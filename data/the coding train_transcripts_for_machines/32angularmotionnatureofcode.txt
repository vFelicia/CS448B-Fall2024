welcome back in this second video of chapter three i want to look at this idea of a rectangle rotating in a p5.js sketch and think about it in terms of angular motion what do i mean by that well you might recall i spent all this time in chapters one and two talking about this idea of motion right and vectors there is a position vector it is a position in a canvas relative to maybe the orange origin point there is a velocity vector the velocity vector is a vector that when applied to position gives instructions for where the position should move to in the next unit of time so velocity moving this dot from here to there and then acceleration is the change in velocity if the velocity if the object is going to turn or slow down or speed up that's an acceleration so maybe it's turning here and then it gets to be we have this new velocity vector gets to here this is represented as position dot add velocity velocity dot add acceleration we had to do all this extra work to sort of figure out how we would manage all this data manipulate it because these were vectors well i want to do exactly the same thing with angles but in this funny way we're going to make it much simpler we're backing up to our life before vectors where we just use scalar quantities because angle is a scalar value it's one number it's a single value maybe it starts at zero then i might have an angular velocity whatever that might be and an angular acceleration whatever that might be and i don't know what makes sense to call these variables um but i think angle angular angle velocity angle a for angular acceleration that's going to work so this is what i want to first start with and add to this sketch over here back to the sketch i'm going to add a variable for angular velocity i'm going to add a variable for angular acceleration then i'm going to instead of having this hardcoded to change by 0.05 i'm going to have the angle change by angular velocity and the angular velocity change by the angular acceleration and when i run the sketch we can see if those values are zero the rectangle is not spinning it's not rotating there's no angular velocity or acceleration i could give it a little angular velocity like point four and we can see oh it's spinning actually that's quite a high value point two it's spinning rather fast again in the clockwise direction if the angular velocity is negative 0.2 it's going to then spin in the counterclockwise direction so but it's spinning it's rotating at a constant angular velocity at a constant rate so let's look at what happens when i introduce the idea of angular acceleration i'm going to use a very small number 0.01 and see what happens we can see it's quickly speeding up over time and now it's cumulative that angular acceleration 30 frames per second 60 frames per second is being added and added and added to that angular velocity so it's spinning out of control the frame rate can't keep up it's actually creating some kind of like unique uh pretty interesting artifact visual artifacts but more likely maybe to demonstrate this i'm going to like give it an even smaller number so we can sort of see it's speeding up over time the first thing that i might want to try to do with this is just map that have that angular acceleration be variable maybe i can map it to the mouse position or some other parameter so that i can it feels like i can apply a force like i'm pushing it to spin further i'm pulling it back to slow down going the other direction etc so let's into in draw i'm going to say angular acceleration i'm going to map just the mouse x position which goes between 0 and width to some value between negative 0.01 and 0.01 i'm going to restart the sketch if i could get the mouse in the middle right we can see here that the amount of acceleration is very very very little and as i push it over to the right it's going to cause it to accelerate really fast but i can push it over to the left which is a force going in that's going to slow down and move backwards so you can sort of see how i'm able to interact with it and again these numbers are still quite large but i can almost like move back and forth and get a little bit of like a seesaw like effect it might make sense to put some artificial constraints here so i might be able to say something like constrain angle velocity between negative zero point you know five and zero point five those are still pretty high numbers and let me actually make this a little bit lower just to emphasize that we can see that it's going to max out at a certain amount i might also suggest as an exercise could you do something where you when you click the mouse you grab the rectangle you can spin it manually by moving the mouse around and then could you drag and release it as if you're like throwing it off in a given direction spinning a wheel so to speak that might slow down and stop that would be a great exercise to do i'll provide a solution for that in the description of this video as well i'd also like to take a look back at the gravitational attraction example from the end of chapter two so here there's an array of mover objects each with this motion algorithm of position velocity and acceleration what happens if we add this concept of angular motion to these objects so for example if i were to add variables like this dot angle equals zero this dot angle v equals 0.01 and let me just add all three of them at zero right now i'm also going to need to add the translate function to the show function of these mover objects because i want to rotate them each around their centers oh and i'm like wondering why it's like acting so strange i also need push and pop so that the translation and ultimate rotation of each mover is selfcontained and doesn't affect the other ones once again that's explained in more detail in my p5.js transformations videos now even though i could add rotate by this dot angle i'm not even if there it was rotated i'm not going to see anything because these are circles and rotating a circle i won't be able to see any rotation so there's a lot of things i could try i could make them rectangles for right now let me just add a line to them and now you can see there's a little line in each of them that's pointing from the center to the outer edge i could try to add like a ring around them as if they're planets or maybe add moons around them that rotate there's so many like interesting possibilities but i'm just going to leave something simple like that and then what would happen now if i were to add in some angular velocity well first of all i need to add the algorithm for angular motion in the update update function so that should be so just like i have acceleration into velocity velocity into position i have angular acceleration of the angular velocity and angular velocity into the actual angle itself so let's now give them just all an arbitrary small angular velocity and we can see they are all now rotating exactly the same speed in the same direction how about i try setting the angular acceleration equal to a value related to its actual acceleration itself so maybe i'll just use the x value for right now i'm sitting here wondering why nothing has changed i realize i put this right after i set the acceleration back to zero which is what happens at the end of every frame so this should really happen now at the very end of update now i have a few things going on i have the algorithm to update velocity and position as well as the algorithms update angular velocity and angle and then right in between i'm going to set the angle acceleration very arbitrarily to the acceleration's x value and then at the very end reset the acceleration values back to zero let's run the sketch again and we can see okay there are things that are spinning now they're kind of spinning super out of control because that x value of the of the acceleration is quite high let's try something like just dividing it by 50. and we can see there's a certain quality now to how these objects rotate as they move about the canvas itself now is it a realistic simulation is there some actual like thing that i'm modeling here in terms of how an object might actually spin as it's moving not even remotely close but i am experimenting visually here and if i were to have objects that were drawn in a different way maybe leaving trails there's a lot of i think sort of visual possibilities that might come out of even something as arbitrary as just setting the angular acceleration to the acceleration's x value but you know there's no reason why i couldn't have made this the y value or some other aspect of the system or it's the velocity itself or where it is on the screen or what color it is there's so many possibilities there so this i would also really encourage you to explore what are some ways that you can control um and calculate angular motion for an object that's in whatever system you've built whether it's gravitational attraction you know if you had something that's more realistic like you know a game where you were trying to throw a ball through a hoop like as you throw it which way would it spin how would it spin how might it slow down or speed up in its spinning so i hope you try out some of these ideas please share them with me find the link to where you can share them in the video's description and i will see you in the next video where i will be talking about okay i remembered in the next video i'm gonna start looking at the trigonometric functions sine cosine and tangent a bit more with more specifics and see how those can be applied to various examples in p5.js themselves okay so see you there and have a good day you