hi I'm very excited about this video I've been recording a whole bunch you could watch the previous ones but you don't have to because if you're ready to write a Discord bot in nodejs you've got node set up on your computer you've got a code editor you're just waiting to type what you need to type in to make your Discord bot work then you are in exactly the right place if you don't have noes set up if you don't know what I'm talking about there's a few videos where I went through some workflow stuff before this that you could go back and watch but let's just get started I'm going to make a list here of what I want to accomplish in this video the first thing I want to do is create I want to create a node project with the discord.js dependency that is the package that I'm going to use to work with the Discord API I need to create a Discord application through the developer portal and I need to make it into a bot I'm going to need to set all of its permissions and add it to the server the Discord server I want to interact with it I'm going need to save the secret token that goes along with the bot that allows me to work with it from my code and then I want to write the code for loading the discord.js package for authenticating with the token and then setting up a slash command so I'll look at what a slash command is but it's the basic primary function of a bot although my plan is after this video is done do all sorts of other fun and whacking weird things that you can do with Discord Bots outside of just plain SL commands but that is a great place I hope to get started I should also mention that I made some Discord bot tutorials like a while back and they're completely out of date and I expect that the one I'm making right now will probably go out of date relatively soon so I'm going to try to minimize the postproduction and editing here and just you know go back to my roots of the raw unedited coding train mess that is trying to make a project and teach it in a video and stutter and and weird and trip over things and all that stuff all right but uh there will be some edits like I'm going on for too long right now so let's just edit right here so good news you actually don't have to watch this video there is a guide that I have put together with a lot of help from several wonderful generous members of the coding train Community which outlines all of the steps and you might just be able to follow it without watching me go through it but if you would appreciate watching me go through it that's what I'm going to do I should also mention that my guide is based almost entirely on the discord.js guide itself so this a little bit confusing there are three things that play here the Discord API is the Discord application programming interface which is a general purpose thing made by the company Discord itself to allow people to write applications that work with the Discord service itself there is also something called discord.js which is a node package that allows you to work with the Discord API from node in JavaScript it is made by other people not officially from the Discord company itself and third there's actually a whole discord.js guide which I'm linking here in the video where you can read lots of information and a nice walkr about all the wonderful things and possible things you could do with Discord JS itself what I'm doing is building on top of the work of the wonderful people who made the discord.js guide to try to make a smaller version of a little guide to help you get started working with discord.js to make something that works with the Discord API I'm going to start from a clean slate I'm in terminal in the desktop and I'm going to make a directory so I'm now in a directory called Discord bot Chucho Chu I want to turn it into a node project I'm going to say npm init and I'm just gon to say Y so that it sort of fills all the package.json stuff out by default great I know that the node package primarily that I want to use is discord.js so let's install that and I think I'm ready to go but maybe I should open up this project in Visual Studio code I know I'm going to be using ES modules import statements so I better add that to package.json then I need a Javascript file where I'm going to put my code for the bot I'll call it bot. Js let's rename index.js and package.json to bot. JS okay so I've set up the project by saying npm in it and I installed discord.js I forgot to install the EnV package let's add that I did add type module to package.json great so this first step was just to get the node project set up but really it's not worth trying to start writing the code until I've actually made the Discord application itself and to do that through the Discord developer portal now you will need a Discord account I'm not going to show you how to sign up for the Discord service generally in this video um but you know there'll be links in the description for just making a general Discord account but once you've done that as long as you go to the developer portal and you are logged in which I am you will see a page that looks like this now most likely you won't see all these like example Bots and applications just right there I've been making them and over the years in different workshops and and and scenarios what you so this will be blank and what you want to do is create a new application so I'm going to do that I'm going to name the application uh coding train ch ch example I'm going to agree to the Discord developer terms of service and why not add a nice profile picture here there we go I could write more about the description Etc but one thing that I do want to make note of is this application ID it's also sometimes called client ID uh we'll need it later when we start writing the code to be continued now the application is just the start the next thing I want to do is click on bot other thing I'm really going to need but I'll come back and get it later is this token token is the most secret part that you need to hold on to as carefully as possible it's essentially your password for using this bot anywhere the next step is to add a bot to a server with the proper missions now a really important thing for me to say here is you can't just willynilly add Bots to servers so what server are you going to add it to I'm going to use the coding Train official Discord server because I am the owner of that server and I have permission to add Bots to it but you will most likely need to create your own server unless you already happen to be part of a Discord server where you have permission to add Bots this is the official coding train server it's what it looks like in the Discord application at the bottom left if you scroll all the way down there is a plus where you can add a server you could obviously join an existing server or create your own so most likely if you want to follow this tutorial you're going to need to create your own so you have permission to add Bots to it back to the instructions in the developer portal you want to go under oo2 and under URL generator here is where you are going to select the Scopes and permissions you want your Bot to have there might be many more things that other future examples and things that I'm going to demonstrate might require but right now the only things I'm going to demonstrate to you are applications. commands that's the slash command I'll show you how that works in a bit in this video and then bot once I've done that there's a lot of other permissions here again we could get into the very granular level of what your Bot can and cannot do but all I actually need is to copy this URL that's been generated at the bottom then I can paste that URL into the address bar hit enter and it's going to come up with this menu an external application coding Train choo Cho example wants to access your Discord account I'm good with that and what it's going to be allowed to do is add a bot to the server and create commands if I had selected some other things those might be listed here it really should be allowed to pick a cake that would be quite nice and I could pick what server I want to add it to it's by default somehow just already preselected coding train cho cho so that's great but other servers I could select here I'm going to hit authorize this is always the part that I have the most confusion with because I I I am a human but I'm making a bot I guess it wants to know that a human is making a bot and not a bot is making a bot then I need to twofactor authenticate which I would highly recommend you set up for your account I'm Still Human as far as I know authorize and now it's been added to the server let me go back to my server and see if I can find it I made a private Channel called bot example just for the purpose of recording this video let me try adding it to this channel ah coding train cho cho example bot I'm going to select that I'm going to hit done again I'm pretty sure if you set up a general new server you're not going to have to worry about adding the bot to a private Channel that's just something I'm doing here for the purpose of testing inside of this little sandbox let me at mention the bot just so we can see and make sure it's there okay it's didn't talk back to me that's something that we could have it do once we learn how to do the code but I can also click on it and I can now see this is definitely the example that's a member since today ah it's in waiting to board which is a role that I have uh before people sign the code of conduct so I'm going to take that out um I'm also going to give it this uh bot roll which is special for the channel so anything that you can do with a regular user you can do with a bot user of your Discord server the important thing here is it is offline I need to get it online the other thing I want to make sure that I do is enable developer mode in Discord this is going to be really helpful for various things that I'm going to need to look at in the Discord application itself in conjunction with coding the bot if I go to settings advanced developer mode I already have this checked but this you want to make sure is checked now before I write the code I need to create a special file called EnV I've made videos before about the EnV package and hiding API keys in a EnV file I'm doing the same thing here with the Discord bot the dot means it's a hidden file um there are ways that I'm going to want to ignore that file not include that file if I publish and upload my bot to different places but for now all it means is as part of my node project let me make a separate file called EnV and I'm going to paste this into it now what goes in the file is not one two three 4 I now need to get the client ID from the application the server ID from the server and the token the secret token the client ID is the same as the application ID I could copy it here it's also under oof to right here under client ID so let's copy that one paste that here the server ID is the specific server of the bot now Bots can live in multiple servers but right now I want my code and my bot to only work in this one particular server if you want to make a bot that you're publishing publicly that anybody could add to their server there are other kinds of restrictions and things you need to worry about but for us right now this is essentially just a developer experiment so I don't have to do much Beyond just get that server ID I can rightclick the name of the server and go to copy server ID that's there because I have developer mode on paste that here and then it's time for the token back to the developer portal under bot and I have to reset the token if I don't have the token there's no way to get it without resetting it to a new one it's telling me my bot is going to stop working which it doesn't work yet anyway so that's fine but if I had already made it and I want to reset the token I've got to make sure to update it I've got a two Factor again and then I want to copy this token and put it in now you might be saying yourself you fool your token is visible in your YouTube video and yeah that's a problem but don't worry by the time you're watching this I'm G to have reset it but if you were doing a tutorial live like you wouldn't want that token to be visible guess what it is time to start writing the code so the first thing that I need to do is import the things that I need from the various node packages so let me copy copy paste these two lines of codee and put them into bot. JS now if this syntax is unfamiliar to you I'll refer you back to the previous video where I covered how to make a node project and how imports work but what you can take away from this right now is that I'm going to need from the discord.js package the client the events and the Gateway intent bits so that's something I want to talk about and investigate further but right now I know I just need those things and I need this function called config from EnV so the very first thing I want to do is execute the config function what that means is it will now Place everything that's in this file under client ID server ID and token into a variable called process.env to confirm that I'm going to say console.log process.env let's now run this code I realized just now that in some of my earlier videos I forgot to show that VSS code actually has a terminal built into it so we could actually do all this from there I could go to view uh terminal and I could start writing my terminal commands in here I'm just kind of out of the habit of doing that I'm going to work separately in my uh separate terminal application but you should certainly feel free to do that instead oh my goodness I forgot so one of the wonderful things about process.env this idea of environment variables is there are ton of them on my computer there are all sorts of things and in fact if I were on a web server on a different machine there'd be different environment variables but you can see here that the client ID the server ID and the token are here on the bottom so just to be a little bit more explicit about it if I were to say do server ID I can now see that server ID is accessible in the code but not saved in the code I'm doing all of this because I don't want to have this this is a bad idea the next step is to authenticate and actually log into Discord from the bot itself I'm creating a new client object that client class is something I imported from the discord.js package and it needs as an argument I forgot I have to look it up in my guide so in future things that I might want to try with a Discord bot maybe I need other properties here but the core base property that I need is called intents and I need an array that keeps track of all of my intentions essentially now why is it called Gateway intent bits kind of a funny name for this variable that holds all of these other constants like guilds why is it called guilds well Discord was originally created as a chat platform for gaming so you can see where the guild terminology stems from and in the developer docs I can see this list of intents all the intents and Gateway events associated with them so this is something you'll have to pay more attention to as you think about what other things you want your Bot to do but at present I essentially don't want it to do anything it's just going to respond to one single basic slash command so I just want to make sure it essentially has the permission the generic guilds intent intent is a word for intention what are this bot's intentions we've got to list them in advance to make sure it's allowed to do those things and the reason why it's called bits is actually these variables are holding numbers and based on the binary values of these numbers different bits being on or off it turns off on and off different kinds of so that's a whole other discussion I'll include some more links to information about how that works in this video's description so next I want to handle different kind of events associated with the Discord bot one of them would be just being ready logged in so I can call the once function for any event that happens just one time and I can access from the events property that I imported the client ready event and then I can give it a call back function I could write that in as an anonymous function here but just to be super friendly let's call it ready Discord and let's define the function and I'm just going to say console log the train emoji and I could put in here I think client. user. tag maybe is a way of getting just to make sure uh I'm getting the actual correct bot name but you can see that this client object that I've created has different properties on it like its user tag all right let's try running this that didn't seem to work oh I realize I forgot so this is the event for when it's logged in but I actually have to tell it to log in so I also want to say client. login and what do I need to log in I need its token the token is hidden away in process.env because of how I'm using the EnV package okay now let's try running this great it's logged in let's go back and look at the Discord server look the green light is on because this bot is online and it's logged into the server as soon as I hit control C I've quit the Discord bot code now it should log out I have a feeling if I go back and look it's still going to be green it sort of takes a minute for it to realize it's not logged in in my experience but at some point when we check back it should say offline all right so on the one hand I could stop here because this is the basic setup but the bot can't actually do anything right now besides log in one of the ways to interact with Bots is through something known as a slash command so before but right now we're on discord. js14 I forget what the version of the Discord API is but a long time ago like you know six months ago a year ago two years ago um it used to be that if you wanted to interact with a bot there was kind of a convention where you would say something like uh exclamation point cho cho and maybe you would write into your Bot code oh only look for messages that start with an exclamation point because you wouldn't want a bot to be interacting with every single message ever posted in the server although that could be fun and maybe we'll come up with some reasons why we might want to do that for experimental playful purposes but since that convention Discord the API adopted something called a slash command so if I type slash I'm going to start to see all of these possible commands that are available for all the different Bots that are in the coding train server so for me to have my bot interact with a SL command there are probably a variety of ways you can do this I'm following the Discord JS guide I'm going to create a separate JavaScript file for that command so I'm actually going to create a separate folder I'm going to call that folder commands then I'm going to create a file in that folder I'm going to call it uh because my Hello World command will just be Choo Cho so I'm going to call the file chuch cho. JS in that file I need to import other things from the Discord JS uh package things that I didn't import as part of uh this sort of main code this main but .js file I don't have them memorized so I'm going to go to my guide and actually all it is is the SL command Builder so uh this is something you'll see in a lot of the Discord JS API how it works if I want to have a message attachment I need a message attachment Builder if I want like a button I need a button Builder so this idea of Builders is very common here I want to build a slash command the way that I do that is by creating a variable um I'm going to call that variable data for a very specific reason I'll get to in a bit and then I'm going to put in that variable a new slash command builder then I can start to set its properties I can say like data set name uh it's going to be called cho cho data. set description it's going to be called uh uh the description will be like this is a demo choo choo you know you can think of a better description when you do it and even though I did this as three separate lines of code when you look at my example it's kind of a nice uh nice thing you could do is just chain these so rather than have a separate line of code I can just say make the new slash Builder do set name and then uh from there I can even change doet description and then when I save my auto format will kind of put line breaks there because that line of code is too long now the next thing I need to do is write a function that will handle any interaction with this command I'm going to call that function execute and it's going to receive as its argument an interaction object now you don't have to call it execute but again the naming is specific here because I'm going to do something else that is going to look for something called data and something called execute I get to that later the other thing you might notice here is the keyword async so I'm using promises the concept of promises in this code with the keywords async and await if that's completely unfamiliar to you I will link to a whole set of videos where I go through that the main thing you need to realize is that certain things things you do with the Discord API are asynchronous events it takes some time for them to complete and if I want to write my code in a way where I'm sequencing them properly I'm going to need to use the async keyword to describe the function that has asynchronous events as part of it and the await keyword to make sure I'm waiting for the asynchronous events to complete and what is the asynchronous event I want to happen I want to reply to the interaction so again this bot barely does anything you can actually have commands that take different arguments that play a game with you that reach out to other apis that post images but I just want a Hello World style bot that sets up a command and when you execute the command it just posts a reply to the server itself now something important here that I've left out of the code this separate file is one that I'm going to need to reference and work with from this main bot. JS file how could I possibly do that well I'm doing doing that already actually I'm referencing objects and functions from Discord dos and from EnV I want my chuch cho. JS file to be something that I can actually import into this file how do I make things in other files that I can import into other files guess what I just need one more keyword the keyword export so now you're learning a little bit about making your own modules that can be imported into other JavaScript files in a node.js project and in fact I can add that right now I'm going to say import start because I just want to get everything as Chuchu from chuch cho. JS so I think this will work oh no it's in commands commands cho. JS I might need a DOT slash here just to say that it's in the root directory of this project but I'm not entirely sure we'll try it both ways but I think best practice practice would put that slash there so there's another step and if I go back to um here we can see like I'm at the end of this create a command step and the next step is deploy the commands so this is a little bit weird this is not actually code that's part of the bot itself this is a onetime operation that essentially says to the Discord server hey this bot is going to have these commands associated with it so I only need to do this once now if I were to change the name of a command or ADD new commands then it would have to do this again but one time only thing I'm not going to go through the code for what's in deploy commands I actually just pulled it entirely from this guide here under registering SL commands I might have made a few little adjustments to it in case I did something differently in my code but essentially you could just copy paste it by the time you watch it this will be a link here's the code I'm going to copy it I'm going to create a file called deploy commands. JF I'm going to paste this in here and if I've done everything correctly if I've set up my client ID my server ID my token this should just work you're also going to notice here if data in command and execute in command so it's looking for those exports called um data and execute so that's why I needed those function names because the deploy uh commands code is specifically looking for those all right let me try running that great started refreshing one application commands successfully reloaded one application commands so that means it worked if you get an error there it might be like a token or client ID is wrong you might have not named it data or execute properly your file might be in the wrong directory like maybe it's not in a file in a folder called commands so look for those things but if you followed my instructions this should hopefully just work now if I log my bot in by calling bot. JS and go back to Discord and type in slash that command is listed there so let's just try running it I'm gonna hit enter it didn't respond so I did register the command I did write the code for what I want to happen when the command is executed but I need to handle it from here in the main bot code last step there's another event so client. one is for events that can only happen once client. on is for events that could happen multiple times like somebody could issue the command multiple times so the event I need to handle is interaction create then I need a function to handle that and now it's time for me to write that function the argument to that function is an interaction object I want to First make sure it actually was a command if that interaction wasn't a command I want to just get out of here other kinds of interactions I will get into later but right now I'm only handling interactions that are commands then I just need to check what was the command name do uh command name equals uh Chuchu and I should probably use a more strict equality there so if the command's name was Chuchu then I want to run the execute function that's part of the cho cho JS file that I've imported and I want to execute that interaction so there's not a lot here this is essentially saying I want to handle any interactions and then Farm those off to my commands files so I could have multiple command files I could load multiple ones I could check to see which commands it is and execute the proper uh you know execute function I will say if you have more than just one or two or three this if statement isn't the best way of doing it but this is perfect I think for a quick hello world let's just get it working demo I forgot something important that I just realized the execute function oh this is I I I almost shouldn't have realized this because I should let myself get the error but the execute function is asynchronous I need to await it to finish and I can't say await unless I've labeled the handle interaction function async so this ready Discord event doesn't need to be asynchronous because all it's doing is console logging that's not an asynchronous event it's just console logging but handling the interaction is asynchronous okay I think I'm ready to go by the way there are different tools which will automate the rerunning your node program over and over again anytime you change the code something called node Monon or node monitor or something you could use but I'll maybe demonstrate that in another video Let's just run it manually okay it's running I go to Discord the bot is online I do my slash command uh run this command it worked so that's actually it that's all the pieces for a Hello World Discord bot essentially that doesn't do very much but if you can get this set up and running if you can follow these instructions if you can piece all the parts together then you are on your way now there's a whole bunch of things I haven't covered number one probably the most important thing is it's much more interesting to have a command that can take an argument for example I think have a uh GIF command let's try running this one and I can give it a query which is like a argument and I can get a kitten GIF so there's lots of other kinds of ways that you can interact with commands that are much more sophisticated what kinds of things would you like to make it's going to be a little while before I make the next video in the series so you can let me know in the comments I can try to design some examples and demonstrations you can also have Bots do all sorts of things respond to Emoji reactions play games with you do things outside of the slash commands uh I will explore that in future videos as well I should also mention that I'm doing something kind of strange here uh you you can just stop watching now but if you want to give me a minute I'm gonna just talk about the pieces of where they are and how they're working on the Whiteboard uh if you want to um kind of think about how you might want to have your Bot running in the future so the thing that's strange about what I've done is on my laptop I am both running the Discord client like the Discord the actual Discord application that's the thing that I as a human type into and read people's messages and react to them I'm also running this like nodejs bot essentially and you would think like oh it's a bot like it should just communicate with the Discord application but the whole point of this is that your Bot doesn't isn't running on your laptop your Bot you probably want to deploy somewhere else to a server that's always on and ultimately the Discord API the Discord web service is you know hosted on a server somewhere in a closet or underground bunker but sure we could call it the cloud and essentially what happens is your Bot is logging in and authenticating here and sending messages here and your your client is also connected to and receiving messages and sending them this way other people who happen to be running Discord are also seeing the messages that your Bot is uh doing and also able to send commands that will then interface with the bot and then send them back and back and forth so that's important to realize that this is a distributed network of clients that are all connected to a centralized Discord server and your Bot is just an automated one that happens to be running from node rather than some user interface so this maybe was something that I'll have to address later but if you want your Bot to be running without you having to just like run it manually from terminal and then if you turn your computer off it's stopped you'll have to find a place to deploy it and I can cover that in other videos and provide some resources here as well and so I should also leave you with like if you want to explore this more you should really look at the discord.js documentation so I already prepared to walk through this tutorial so I've kind of pulled the pieces out that I need to know but if you want to look at what all the things that are possible the names of the functions the different things I'm using this is really where you want to look and I'll dig into this more in the next video so let me know if you got your Bot working share that with me uh there's actually a place on the coding train we'll include this as part of the passenger showcase you can share a bot and then things you want to try that you don't know how to try that you think would be fun for me to do in a video leave those in the comments or better yet join the coding train Discord itself and let's chat about it all right thank you so much for watching this I hope you get a bot running I hope it's fun for you and I'm sure you're going to be very creative with it I don't know what I'm talking about I gotta go I've been recording these videos do you notice I'm wearing the same clothes in like five videos straight I've been doing this all day long time for me to do something else goodbye