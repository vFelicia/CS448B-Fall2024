Hello, welcome to a Q and A video. In this particular video, I am going to talk about, I'm going to answer this question. Now (laughs) you might notice on this GitHub repository that it was this person whose name is Shiffman who asked this question. So, somebody asked me this question, I get this question a lot and so I just added it to the GitHub repo, but I would like to point out if you're watching this video and you're interested in asking me a question that I might answer in a future video, find the link to this GitHub repository in this video's description, go there and ask your own question. So, the question for today is, what is the difference between p5.js and Processing? And I'm going to answer this, by the way, I haven't prepared anything (laughs), so it's going to be kind of stream of consciousness here, but I'm going to answer this in a sort of broader sense. So, one of the things that's happening right now, this very week for me, is that I am teaching a class at ITP, which is a program at Tisch School of the Arts at New York University called Introduction to Computational Media. This is a class for people who want to learn to program who have never written any code before, whatsoever, in their life. And this is another question that gets asked a lot, oh, hey, I'm interested in this code stuff, I want to write some code. What should I learn, what should I use? Now, I don't even for a brief millisecond pretend to actually have the answer to that question. I don't, the answer to that question is different for a number of reasons. Personal preferences, background, interests, that sort of thing. So many languages, frameworks, tutorials, et cetera. I can only sort of speak from my own experience in the sort of smaller scope of one of the things that I'm interested in and work on personally which are, tools that allow people to get up and running with programming very quickly and sketch out ideas, in particular, creative ideas, often ideas that have a strong visual component. Now, and the tools that I enjoy for these kinds of projects and for learning code and sketching out these kinds of ideas are, just happen to be, coincidentally (laughs), p5.js and Processing. So I want to talk a little bit about the history, and this is really now a video that is, in some ways, I'm focusing, oh I already have this URL open, on something called the Processing Foundation. So, the Processing Foundation is a nonforprofit, United States, 501(c)(3) tax exempt corporation (laughs). It sounds very official and ominous, Processing Foundation, duh. And it exists to maintain software platforms as well as develop and administer education, community and diversity initiatives around code and creativity. And you can read about the Processing Foundation on the website and I encourage you to get involved, and I'll talk a little bit about how you can get involved at least in contributing to open source, maybe more towards the end of this particular video. So I encourage you to check out the Processing Foundation. Now let me talk through, for those of you who might be interested, my sense of the history (laughs). (clears throat) History teacher. I don't know, okay. My sense of the history of Processing and what it is, and what p5.js is and also I want to talk about processing.py, or py. Oh and then there's also Processing for the, there's so much. But let's start small. So 2001, I think I actually have done a lot of this in another video but I'm kind of repeating it just to kind of give some context here. So 2001, Processing. It was recently actually the 15th anniversary of Processing itself. Ben Fry, one of the creators of Processing, tweeted out a link to a workshop. I'll try to find that and put it in this video's description. It's not coming to me this moment. But there was the first kind of public workshop using Processing was in August of 2001, if I'm correct about that. So the cocreators of Processing, Ben Fry, Casey Reas, and Processing itself came out of their work, at a place which still exists of course, which a lot of you have probably heard of. Called the MIT Media Lab. And their professor at the time named, John Maeda. World renowned designer, artist, illuminary, thinker, former President of RISD, professor at the MIT Media Lab, John Maeda. And I apologize if I'm mispronouncing the name at all. Anybody's name throughout the course of this video. So the group was called the Aesthetics in Computation Group, that was the research group at the time. It would be great to have Ben and Casey just as sort of bobbling heads here. They don't need to be bobbling but to actually talk here, but I think a reason why Processing came into existence, on the one hand, you're a person whose name happens to be Ben Fry or Casey Reas in 2001. You want to teach people about programming. What do you use? There was a piece of software known as Design by Numbers at the time, which was created by John Maeda. And this was a software platform that was designed for graphic designers to code. And so a lot of the ideas of Processing came out of Design by Numbers and of course so many things came before that. We can think of the Logo programming language, and Turtle graphics and, Hypercard and the work of, Seymour Papert and all sorts of various other types of historical precedence for this idea of creativity through coding. But the idea here (laugh) boy am I being really longwinded about this (laughs). Okay I'm just going to keep going. I can't see the chat now, maybe everybody's left. My 163 viewers has gone down to like 15. So this is kind of where everything came from, this idea of okay number one, a tool that, let's say I'm the person who's going to create Processing. Why am I doing it? One, I want to make my own work, so I need something with which to make my own work. I also want to teach others to make creative work, I need something to teach others. So one of the things that's been there from the very beginning with Processing is walking this fine line between a kind of beginner, friendly, easytogetstarted platform, that you can use right from day one and write code and get stuff going, in a simple and friendly way. As well as a platform that you can actually use for larger projects, commercial work, artistic work, creative ideas, sketching out ideas, as you get more and more knowledge through code. So it's something that can give you a full journey. So the question then in this time is, well what is a good programming language to build Processing with and build on top of? Now one of the limitations of Design By Numbers was that all it really let you do, if I'm correct about this, is make interesting algorithmic geometric graphics through code. But what if you wanted to connect hardware or talk to the network? Or have your graphic sketch visualize data? Or hardware being, other types of hard, I was thinking camera, but that's hardware. So one of the reasons that Processing was built on top of Java is that suddenly, if you have this simple, friendly environment, with a simple drawing API, but you build it with the language Java, you're going to get all this other stuff for free. It's going to be extendable. You can write other libraries for it. You can pull other Java libraries into it. There was also at the time, something called an applet. And one of the key pieces of Processing has always been the key sort of, of philosophical principles, has been shareability. So I'm going to make something. I want to share it with my friends, quickly, easily, instantly, and the web is a great platform with which to do that. I hope everything's still working, yes. So applets were the thing in 2001. If you had this animated graphics thing that you made and you want to put it in a webpage, you put it with a Java applet. Anybody watching this now, you either have never heard of an applet or that your only sense of an applet is a frustrating moment where there's some web pages trying to load a Java applet and you get like 15 different error messages. Try to restart, reinstall Java like three times and it still never works. Eventually you give up and do something else. So this is kind of where Processing came from. So let me show you now over here, I'm back over here, taking a peak at the chat. People are asking about our dweno which is kind of interesting to bring that into the picture as well. But I'm going to run the current version of Processing right now. (laughs) And I'm going to open it. And so this is what Processing is and in its form today. Come on Processing (snaps fingers). If it would come up I could then have this applause. (applause) Did it come, what happened there? Oh it's there (laughs). There it is. So this is what Processing looks like. And I can do something like just say, background, oh and let's make the font a big bigger. And I can do something like this. And I can say. And I can run this sketch. And there we go. And I have my first bit of code. So the idea here is that I am writing code in Java, but a lot of what you would normally have to do your first day of a Java programming class where you need to have a main thing and a class thing, then set up your environment variables and open up something called Eclipse maybe, or command line, all of that is done for you inside of the Processing development environment itself. So Processing is both a library of functions and classes you can call and do stuff with like, background, here's a nice sort of pink background. Ellipse which draws a circle on the screen. And a development environment itself. And this development environment has come a long way in 15 years. There is a console here, there's a separate errors pane. When you have errors you can see here if I forget my semicolon suddenly you'll see, missing a semicolon on line number two, and a little red squiggly here, and if I then put the semicolon back, the red squiggly goes away. There's even a debugger over here. I think I made a video tutorial about the debugger that's on the Processing website. There are, I can go to sketch, import library, add, woops. There's a whole contributions manager so if I go here, I can find countless libraries to do various things, with cameras and other pieces of hardware, and color and a GUI element, and physics engines. So there's a lots and lots of things I can do with Processing. (bell dings) (laughs) I'm getting text messages which I was worried were like, everything's not working, okay. (whistles) So this is Processing. Now (laughs) I really should just scrap this and start over 'cause I could answer the differences between Processing and p5.js rather quickly and instead, I'm going through this sort of history thing. So let's fast, let me come over here (laughs). You know if I were in an actual classroom with people I would get a read of the room, a vibe. People would raise their hands I would have a sense. Instead I'm just speaking to this thing which is like a little circle here and it's a nice little thing, but it doesn't really talk back to me. So let's think about, let me talk about a little bit what's now happening. This is where, this is really, this history now has many, many years (laughs). From 2001 all the way, I would say up around, I believe around 2013, was when one of the first conversations started to happen around, what if Processing, the way you could think of this question, is what if Processing started over? So instead of thinking about, so there have been a lot of projects to port Processing to another environment. So take a literal translation of the entire API. By API I mean all of the functions and things that Processing can do, and translate it to another language. Notably I'll mention two of them. One of them is called Processing.py, which is a Python version of Processing and in fact, if I come back over here, I can access that instantly, up here under Java. I can actually switch here to Python. Now I don't think this Python will show up here by default, you have to first go to add mode, and then add Python, but if I switch to Python I can suddenly type Python code in here and run Processing sketches using the Python programming language and access the entire Processing API. There is another project called Processing.js and this project is, this is very confusing because all these are named Processing. This was a project first created by John Resig, which does something even more magical than just taking all of the Processing API and translating it into JavaScript, for a canvas element in the browser. What John Resig was able to do is not only port Processing to JavaScript so you could write, call make Processing calls in JavaScript, but this also has an engine to take your Processing code and translate it behind the scenes for you into JavaScript essentially. So you don't, you could write your Processing code in Java and have it run in the browser in JavaScript through an auto, magical process. So this Processing is a project maintained by the Foundation itself. Processing.py is also a project maintained by the Foundation. Processing.js was a separate project as I said, created and started by John Resig. I believe it's now also used as an engine for the Khan Academy, a lot of the Khan Academy tutorials. I believe if it's still the case that John Resig does work for Khan Academy. And at one point then Processing.js was taken over by some folks who work with the Mozilla Foundation and I've kind of, I don't know if I have all the pieces of the history of that directly into my head. I haven't been as involved with that particular project. But, this question in 2013 came up. What if Processing were to start over? And someone that I would like to mention here, is Lauren McCarthy. Processing, one of the things we do as a Foundation, is we offer fellowships. Small stipends to people who propose a project around a code library, an education initiative, a diversity initiative and at the time, Lauren McCarthy I believe was one of, one of the first Processing fellows to think about and answer this question. And so the question, and I'm not saying this question was actually posed, but I'm thinking about it this way for now just for the sake of argument. You know there's a lot of different paths that you could take I think, and it could make good cases for all of them. But this idea of shareability, the idea of simplicity back to the sort of Design By Numbers core ideas of simplicity, for with drawing, and shareability on the web. Everything came back to JavaScript again and again and again. So on the one hand you could say, okay, Processing.js already exists. What is the reason for having yet another JavaScript version so to speak, of Processing? And I think what Lauren said and what Lauren did, and now many others have done and contribute to, beyond just Lauren who started this project was, sort of say well, this project called p5.js, and I want to talk about the little p in a moment, this project called p5.js is not just about saying, Processing is this thing that people like, let's port it to JavaScript, but let's not port the code, or the names of all the functions or how everything works. Let's port the goals, the philosophies, the principles behind Processing. Openness, friendliness, accessibility, design, visuals, art. Let's port all of those kind of core principles and ideals of Processing and take those and design a new platform around those ideas, in a new environment. Because if you're in the browser, it doesn't necessarily make sense to do things the same way they've worked in what's now essentially a desktop application, development environment, Processing. And you know what I'm realizing this video that I'm making is kind of the history of Processing and p5.js and I'm going to make a separate video which looks at the differences between the two, and I'll make some code examples that go back and forth. So I'm not actually answering that question in this video, but that's fine. So this I think is really the idea, and JavaScript is such a different place than Java, and being on the web is such a different place than being in a desktop application. So many things are different. Most notably too, I'll mention two things right now. One is that in addition to all the drawing functionality that's part of Processing, p5.js has a DOM manipulation library. And what I mean by that is, and I've kind of made this crazy map here and I almost don't want to erase anything so I'm just going to use this little corner over here. If this is your Processing window, that you're drawing your lovely spiral pattern in, that's all you get in Processing. Your graphics window. If this is your web browser, and you're working in p5.js, and you create a canvas where you draw your spiral in it, you get that in p5.js as this canvas but you also get more. Because the canvas is just one element sitting on the webpage. And you could have some paragraphs. You could have an image. You could have like a little audio player. You can create so much more around the canvas on that webpage and that's what p5.js also offers. It's not just, as Processing is to Java, it's built on top of Java, p5.js is built on top of JavaScript, but it also has hooks into HTML. So here I think you know, really Java, there's also hooks into HTML, CSS and JavaScript. Okay so I'm kind of wrapping up this discussion of the history here since this is, you might be watching this just as a video (laughs). I don't know if you will but, maybe you will. I'm going to check now this is, at the moment, happening as a live stream, so I'm just looking at chat to see if there are any questions or corrections. So if you're watching this now and you said something 15 minutes ago in the chat but it was important, maybe add it again. So here I come back over here and I'm going to look. (laughs) I don't actually see anything in the chat. So I think perhaps I'm going to wrap up this video and what I'm going to do in the next video is I'm going to actually look at Processing and p5.js sidebyside and see how they work together and how some of the code, how the code is actually different and similar and what some of the capabilities are. What's faster here, what's slower here. What works better here, that type of thing. Yes JavaScript is slower. Thanks for watching this video a little bit about the history of Processing and, ah! I forgot something important. (bell dings) So I want to talk about the little p because, JavaScript libraries actually if you'll notice, often start with a capital P, and I'm going to have to find, you're going to have to bear with me for a second. I'm going to go to github.com/processing/p5.js. I'm going to go under Issues, I'm going to search for capital P, P5 with a capital P. I want to just read this to you (laughs), because I want people to hear this and I, Lauren, I hope will have as a guest. You can read a great interview with Lauren that was just done by Kadenze and I'll try to link to that in this video's description. I can have her as a guest to make these statements herself. But since I'm here on YouTube right now, I believe strongly in the work that Lauren is doing and that the Processing Foundation is doing to make these open source environments more inclusive and accessible, and so I want to just essentially read this statement to you, which is a little bit of a weird thing to do on a YouTube channel. To just read something that's in a GitHub issue. If you want to click and read it yourself, you can stop this video now. But there was a GitHub issue thread that started P5 with a capital P. The question was sort of posed like, hey there's this kind of a little bit of an advance thing if you haven't programmed before that you'll see. new p5 is a way of doing this kind of crazy, make an instance of a p5 sketch, and a sort of JavaScript standard might be, capital P5, right? If you're making a new instance of a JavaScript library, you might say it with a capital P and Lauren wrote this response which I think, which is really I think speaks to some of the goals, and principles of the project. Totally hear you. Indeed, namespaces in JS are generally capitalized, this is a good point. However, we chose the lowercase p to indicate that we were breaking with tradition a bit with this library. That is, breaking the tradition of capitalizing, but also trying to break with the tradition of many open source projects that are male dominated, lacking diversity, and privileging experienced developers in discussion over beginners. And so to this end, we are explicit in the community statement and the GitHub the code of content. So I highly encourage any of you that are interested in open source and Processing and p5.js, to go to this issue and click on and read the community statement and the GitHub code of content, and are really trying to see what happens if you build an open source toolkit, founded on core values of diversity and inclusivity. And this relates back to something here which is that, this question that I asked at some point in this video which is what if Processing started over? And this is something that Lauren said to me, which I think is the key principle of p5.js. The question isn't just, what is it that we should be doing right now, to make a creative coding platform, technologywise? That's not the question. It's not about, make sure we support ES6 and the fanciest new, whatever, thing, that's in the browser now. What's happening in the world today? How do we make something that responds to the cultural landscape of today, that breaks with some of these kind of traditions in open source development that have excluded a lot of people of varying backgrounds and skill levels? And genders and et cetera. So that's really sort of a key core principle. It's not just about the code. It's not this thing, diversity, and thinking about diversity is not a thing you do after you write the code. It's something you have have to do right from the beginning of a project itself. We are really trying to see what happens if you build an open source toolkit founded on core values of diversity and inclusivity, letting all design decisions flow from there. There's a lot more but, and Lauren writes, for me, the lowercase p suggests a new tradition of including as many different kinds of people as possible in the project. And I like this, I like the word plucky. Plucky little p, plucky little community, and there's some more discussion here which, ah and this so, also I'll mention, this is a nice little tidbat for, tidbit, tidbat, tidbit for those of you, which is that where does this p5 come from? So actually when Processing was first created, there was a URL which was, I like to say procefiveing (laughs), because Processing wasn't actually available, so it had two fives in it instead of s's, which became p5 for short. So Processing has always, has often been referred to as p5 for short. And now little lowercase p with a five dot js for JavaScript. So boy this was a very long video that, if you watched and enjoyed I appreciate it (laughs). I see in the chat people are asking me, talk about network programming, but you know I got to get through this stuff. There's some more interesting discussion here. So (claps hands) thanks for watching this video about the history of Processing, a little bit about it. I'm sure I missed some important things. I'm sure I missed some important people's names and so if you have comments and thoughts about it, please add them in the comments. Send me a tweet and I'm going to do one more video that's really back to this Q and A thing about, the sort of, technical differences between Processing and p5.js.