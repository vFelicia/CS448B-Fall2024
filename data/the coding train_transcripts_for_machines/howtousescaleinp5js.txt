[DING] Hello. So this is a little bit of a part 2 tutorial about transformations. And what I want to do is show you what the scale function does. And I don't know that this merits its own video, but I didn't fit it into the last one, so that's why I'm doing it. So what does the scale function do? So first of all, we see and there's some other important details that I'm going to fill in about push and pop perhaps in this video. So we establish that translate moves the point of origin. If you translate to some point, you're translating where the origin is, and you're drawing everything relative to that new location. Rotate rotates the view of the canvas so that as you draw things, it appears as if the shapes are rotating itself. So if we were to rotate by an angle and then draw something at 0, 0 relative to its corner, we might see a rectangle something like this rotated by some angle. Scale stretches everything out or shrinks everything relative also to 0, 0. And there's some really goofy stuff you can do with scale. So scale can actually take one argument, or scale can take two arguments. So I could scale the same amount along the x and the yaxis, or I could stretch something on the xaxis and shrink something along the yaxis. Plus, I can also put negative numbers in here. And what negative numbers do is they not so what is the number what is a if I put 1 everywhere, this just means 100% the default scale. That's just what it is. If I were to put 2 in here, suddenly the rectangle will be twice the size. I've scaled it by 200%. 0.5, I've shrunk it 50%. So I can do different things at a different axis the xaxis or the yaxis. But I can also flip the axis. So if I were to flip the axis, that means this rectangle would now appear over here, which would draw the other direction. So I can actually use scale to say y doesn't point down, but y points up, which sometimes you want to do if you want to create some type of simulation where you're thinking about the coordinate system differently. So let's go take a look at this now in action. So if I have this sketch here where now all I'm doing is I have a simple transformation where I'm translating the center and I'm rotating the view so that this rectangle rotates around on its own, I can do things like, say, scale 4. Let's just say scale 4. And now I have this much larger rectangle. Notice this is something very important about this. Look at this. What's the difference between saying scale 4 and just saying draw the rectangle instead of 100, 50, let's multiply that by 4 400, comma, 200. So I'm going to comment out now scale 4. And I'm going to say rectangle 0, 0, 400, comma, 200. The math is the same here. I'm now drawing it four times the width, four times the height. Now, I'm going to hit Refresh. And watch closely. What's different? Is it going to look the same? Or does it look different? Think about it. Think about it. Think about it. Well, it's the same size, but look at the outline now. The outline is only one pixel wide because the stroke weight is 1. So scale is not just making things bigger in the sense that shapes now have a larger width and height, but it's actually zooming in on that twodimensional shape, giving your view of the window scaled up. So even the width of the stroke gets bigger. And so if I go back to here, we can do things like I could scale according to mouseX divided by 100. So if I do that, we can see it's kind of like a 3D effect. It's creating a 3D effect in 2D similarly to how you might work with something like a map API where you're zooming in and out of a map for more detail or less detail. And this is the thing I would like to do in a future coding challenge, which is to create a 2D zoom and pan of a scene. And you could do that now with everything I'm giving you because if I just add translate to this, if I'm able to move the mouse around to translate, then I also have pan essentially. How do I click and drag? And is there an offset and that? The interactivity there is a little tricky, but it's certainly possible. So that's the main thing to say about scale. Let's look at what it means to do this with different values. So I could say scale 4 in the x direction and 0.5 in the y direction. And as you can see this weirdness, I've stretched it out along the x but shrunk it. It's very weird to look at this. Let's actually say mouseX divided by 100, mouseY divided by 100. So let's see what that looks like. So you can see here. And it's a little confusing. I'm going to turn the rotation off also just to make this a little bit more clear. So you can see this is me now stretching it and scaling it in other directions. Now, one thing I want to do here hold on is I'm going to say I'm going to just put scale 1, comma, 1. And I'm going to take out wrecked mode center. So look. The rectangle is now drawn with the corner at 0, 0, off to the right. What if I were to say scale negative 1? Scale negative 1 so just negative in the x direction. Now everything goes the other way. So this is quite interesting. And I could back up for a second and put the rotation back and actually say, let's put the scale in. So now I have this. Notice how it's rotating clockwise clockwise. If I say scale 1 and then negative 1 here, whoa. Oh, whoa. It's still rotating clockwise. I took a little break there to figure this out because my mind stopped working. I thought when I let me step you through this. So let me turn the rotation off, and let me put scale back to 1, comma, 1. So this is the rectangle drawn pointing down. Y points down. If I were to change the y scale to negative 1, now y points up. So that rectangle is drawn up in the upwards direction. And then I added rotate back in. And if y now points up, shouldn't it also rotate backwards? Well, it's not rotating backwards. It's still rotating the same way. But once again, [DING] I forgot about order of operations. Rotate happens before scale. So I rotate the view, and then I flip the y. So it's drawing it the other direction, but it's rotating still before I scale. So this is now before rotate. Look what happens now. Now it's rotating Now, of course, I could have if I just wanted to rotate the other way, I could just rotate by a negative angle. I don't need to use scale for that. The speed of rotation, the angle of rotation that can all be controlled true math. That wasn't the point. But this actually comes up because a great scenario for this is what if you want to take an image and mirror it? So you want to draw the image mirrored? Well, you might think, oh, I have to rewrite all the pixels in the opposite direction. You can actually use scale to flip the image and draw it in the reverse direction. And this can be something that you could try if you're working with images and that sort of thing. All right, so that's what I want to say about scale. If you're looking for a challenge to do, try to make a scene that you can zoom in almost as if a map that you can zoom and pan around in a 2D way using scale, push, pop, translate, rotate. If you do that, share it with me. I would love to check it out. And hopefully, if there's interest, I'll come back and do that in a Coding Challenge video. I'm going to do one more video just in case I forgot anything. I want to talk a little bit about why it's called push and pop and why there are some other functions that have this matrix word in it. You should probably just skip that video. I wouldn't watch I haven't made it yet. I mean, maybe when you're watching this, it'll be there, or it won't be there. It'll come out. But I'm going to try. So who knows? Maybe it'll be fine. See you. Thank you. Goodbye. [MUSIC PLAYING]