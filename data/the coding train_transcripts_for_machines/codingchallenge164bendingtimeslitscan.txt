hello and welcome to a time displacement slit scan coding challenge this video is part of the support p5 campaign adopt a function series thank you to tim rodenbroker who adopted the copy function for this video if you're not familiar with tim's work he teaches all about creative coding on his website you can see beautiful examples of what he's done with the copy function on his instagram he's got an upcoming course all about the copy function and i would certainly encourage you to subscribe to his patreon to get access to all of his courses i've already finished recording this coding challenge what you're seeing here is the end result of the video i'm going to start by just what is the copy function what arguments does it take how does it work how can it be used to create a slit scan effect and from there move on to warping time and space itself enjoy i'm going to begin this exploration of the copy function with just this basic processing sketch one red circle right there in the top left corner at its core the copy function does one thing it takes a rectangle of pixels this is known as the source and copies them to another rectangle of pixels known as the destination to execute the process call the copy function with eight arguments the x y width and height of the source rectangle the x y being the top left the width and height of that rectangle and then the x y width and height of the destination rectangle once again the x y being in the top left and then the width and height let's see this in action i'm going to attempt to copy the top left quadrant of the canvas to the bottom right there we go it looks like i just called the circle function again for a different location but i have not i'm actually just copying the pixels from a rectangular portion of the canvas to another one what is especially exciting about using the copy function is the destination the dimensions of the destination rectangle do not have to match the dimensions of the source one so i also have the opportunity to stretch and skew and twist that original image here i'm just setting the width and height of the destination rectangle according to the mouse x and mouse y location this isn't a particularly engaging example if i really just wanted to draw multiple shapes and kind of skew them i would just keep using circle and ellipse and change the colors and the dimensions of the actual geometry that i'm drawing while i do think there is lots of potential for what you could do with generated graphics and the copy function what i'm going to move to demonstrating now is what happens if i start to use the copy function with an image that i'm loading or perhaps even a realtime video in this particular sketch i've got an image of the choo choo bot character in the data directory now i can load the image from the file and display the image using the image function now what happens if i put back in the copy function here we see the top left portion of the image copied and overlaid onto the image itself this admittedly though is a little bit strange here i am taking the image drawing it to the canvas so that i can copy a portion of it to also draw it to the canvas the copy function can take an additional argument right up front the source image itself so rather than draw the bot image i can just place a reference to the bot image as the first argument in copy and there we go now i'm copying just that one section of the image to the same spot in this window this immediately opens up a lot of possibilities for example what if i draw the image by copying a sequence of slices so this looks like i'm just drawing the image as it was before but i'm not i'm displaying it as 40 slices each of width of 10 pixels i'll put a rectangle overlay just so you can see it there now you can see the scale and size of each of those slices so there's really no reason why i couldn't take a different part of the image and display it in a different place shuffle up the slices here the moment i'm about to copy from the image i pick a random x location to copy from i'm still going to put them in their linear sequence but the source will be random i've added no loop so that it just does it once now you can see i've completely mixed up the image taking away that rectangular overlay and there you go here's an exercise for you could you shuffle up an image in a grid rather than instead of just horizontal slices a checkerboard pattern i would like to take this in a different direction and just explore some algorithmic visual possibilities let's start by adding a sine wave pattern to the location i'm copying from if sine waves are unfamiliar to you it's simple harmonic oscillating motion i'll refer you to my nature of code video series all about these wave patterns i'm going to use the variable name sx for the source x again if i just use x directly from the loop we get the image as is what if i were to offset the source x location by some counter variable x plus counter there is a builtin frame count variable in processing but i'm putting my own variable in here because i'm going to start to do more with it once i get to harmonic motion amazingly enough it's just sliding the image because i'm moving where i'm copying from so what if i were to introduce the modulo operator the modulo operator takes the remainder of division so numbers as they increment past the width of the window will cycle back to zero and again and again sort of little blinking accidental blinking effect as it's kind of working with those end pixels a little by little if i were to use the width itself as my incrementation variable then i will get rid of that little flickery effect of course it's moving much faster because it's going by 10 pixels each time so what if though instead of offsetting by just a counter variable that's going up by one and one and one what if i offset by some variable amount that's smoothly oscillating up and down let's change counter to angle angle plus equal some small amount i'm going to make a separate offset variable which is sine of that angle i'm going to map that value the result of the sine function is between negative one and one and i want to offset it by some amount of the width of the image now because i'm dealing with pixels it's important that i stick with integers because there's no subpixel values there's no pixel 1.5 1.6 so i will also convert that offset to an integer and let's see what we get now it's shaking back and forth i think i've really got to deal with the fact that there's a specific number of columns here even though i have the full width of pixels i only have 40 slices because each one is a width of 10. and i'll call those columns the number of columns is the total width or image divided by the width of each slice now i'm really looking to map the offset not to the total number of pixels but the total number of columns and then to find that source location i can expand by the width there we go back and forth back and forth this is getting somewhere i think i mean i haven't actually done this before i'm doing this just in real time right now as i'm recording this video let me slow it down a little bit there we go looks kind of stuttery because it's actually moving by 10 pixels each time so what's happening here i have a sine wave this motion up and down you can think of it as i'll use a train whistle here as a slider sliding back and forth across the image so right now every slice is sliding back and forth at the same speed but what if some slices slide more quickly or some slices slide more slowly then wouldn't i start to see the image break itself apart put itself back together as the slices become out of sync from each other one way to approach this would just be to multiply the angle by some factor so x is going between zero and with and why don't i multiply that angle by some amount between like point one and 2. so i'm shrinking it or doubling it multiply by factor well i'm not really sure i knew what was going to happen there but we're starting to see the possibilities here at some point i would imagine it's going to put itself back together i'm having to restrain myself right now because i want to keep going with this i think there's probably more clever ways i could think about offsetting the different wave patterns thinking about the slices as horizontal rather than vertical maybe i would use purl and noise or some other kind of algorithm please explore those things and certainly the source image that you choose to work with will make a huge difference in what kinds of visual outcomes you get but the title of this video is slit scan and i really what i want to move towards doing is looking at what happens when i start to work with a moving image a video image something that is not static like the choo choo bot so let me quickly replace the loaded png image with live video i've completely forgotten how to do capture in processing there we go and certainly i could work with code in a flexible way where my the width and height of my canvas doesn't necessarily match the source image everything's going to be a lot easier if they do match so i'm going to match them it's not create capture new capture oh this this i need this no dot just this so here i am using processing so first of all i've got to give permission on a mac at least for processing to have access to the camera and then because i do all sorts of crazy things with this computer i'm getting the open broadcast studio virtual camera into processing which i don't want i want my webcam so let me look at all of the cameras that i have connected and i can see here zero is the obs virtual camera one is the facetime hd camera the builtin webcam there we go whoa glitchy glitchy glitchy so i was being lazy here i just want to put cam.read just read from the camera while you're looping through draw that's not really the proper way to do this i should be writing the actual capture event which is triggered whenever there is a new image ready from the camera and there we go don't ask me what all this red is down here i have a feeling i've got some weird wonky settings on my computer so i'm just going to ignore that for right now it's working now there's no reason why i can't just put in my code from before but replace the bot image with the live camera and there we go lots and lots of fun to be had i've actually done quite a bit of this in a video that i made years ago demonstrating slit scan in p5.js and in that video i referred to this article this catalog of video artworks and research about slit scan photography from goal 11. i would really encourage you to check it out and and look at all of the historical precursors to what we do today with computational media whether it's film photography analog video and additionally since i made this so long ago i would love to hear from you in the comments what are your favorite historical examples of slitscan photography current artist working with these kinds of techniques i would love to know all about them but i just want to take a minute to demonstrate how slit scan works in processing and of course i'll also include p5.js code as well so we're still working with the same core concept of having a source image and a destination image in this case the source image is my webcam and the destination image is the processing window the way slit scan was performed with real film analog film take that film and expose it while sliding it past a slit shaped aperture in other words this is our view of the camera here is maybe that slit we're able to look at just one slice of pixels in this digital image and then this is like our film but this doesn't slide rather we'll take those pixels and put them here and then the next frame will put them here sliding this slice essentially across the destination how do we do that the copy function copy the pixels from a slice put them here put them here put them here put them here put them in here put them right here when we get to the end go back to the beginning so let's keep that width of 10 have a global variable called x and copy really i could choose any slice but i think it's going to be most convenient if i take the middle slice of the camera and that's what i'm always copying so the middle is width divided by 2 minus the width of the slice divided by two and always copy it to that x position i don't need columns anymore so now you can see that's that slice of the middle of the camera it's just always being copied to the leftmost part of the canvas but what if every frame i move that slice over by a pixel well now you can see it's moving i forgot i'm erasing the background every time so i'm just actually seeing that slice move across and i think i want to match it with the actual width so move it by the width of the slice itself we'll see that again it'll move much more quickly now let's stop drawing the background just once in setup and there you go you can see i've like smeared myself all the way across the image but it got to the end and where did it go so i'm going to try if i stay very very still we see that one slice being duplicated of course my mouth is moving if i could move at the exact speed then i can practically get an image of myself i could be in it twice by moving back and forth there's a lot of possibilities here and of course i can reduce the width itself as well let's put it down to two pixels this already i think gives you a lot to work with but i don't want to stop here because i think there's two things i could add that will really expand the creative possibilities of this particular demonstration the first is what if instead of copying the source pixels to the destination processing window itself i had an interim step what if i had a p image object itself where i could take those pixels into it and then i could draw that p image into the destination what that would allow me to do is use things like translate and rotate so what if i wanted that slice to appear a skew what if i wanted to draw my slit scan slices in a radial pattern i'm going to create a p image called slice it's an rgb image with the dimensions of the slice itself we know the copy function can take as its first argument that image source but where do i put the destination if the destination is not the processing window itself well it turns out i can call copy as a method on a p image object a destination p image slice dot copy now x is no longer the location into where i'm copying it i'm always just copying it to the entire slice but x is the location where i'm drawing what i've copied this is exactly what i had before but guess what i can do now translate to the center of the window draw the image from that center and rotate by some angle what should that angle be let's take x which has a range of zero to the width of the image and map that to zero to two pi radians a full rotation around a circle oh i'm missing the range of angle goes from zero to two pi not just two pi and look at that there's my slits again now i'm getting this kind of moire pattern effect because you know the pixels in the center of that rotation are very close to each other and then they're getting further and further apart as the line extends out from the center so i actually might want to just kind of work with that angular rotation separately from this x value itself so i'm just going to make my own angle variable started at zero and kind of arbitrarily just pick up incrementation value and try to finetune it trial and error style that's a little bit better maybe i could also uh just have the width be much bigger of what i'm copying and there we go you can see there's no kind of missing pixels anymore that i made it wider and i can kind of have that spin around this rotational path so that's one thing that allows me a lot more possibilities copying the pixels into its own p image object but once i've copied it into a p image object and then i go to the next frame and copy it again i lost the previous one what would happen if i actually stored an array of slices what if i kept track of the history of slices and cycled them around the screen in various ways by doing this i'm going to get a time displacement like effect let's see what that looks like i think i mean i'm about to try this let me go back to just the slices themselves without being rotated but i'll make them horizontal this time don't worry i'm saving all the versions of the code that i'm writing and you'll find all of them on the webpage associated with this video which is linked in the description below okay i think i've got this right i've gone back to taking a horizontal slice from the camera copying it into the slice p image drawing that slice p image at a different y location going from top to bottom slice is oops i have to change the dimensions of the slice itself oh i did something wrong here ah i was copying from the bottom i need to copy from the middle height divided by two what is going on with h two zero oh no no no no no i forgot i'm copying to the image so we'll also have to copy it to zero zero of the image y is where i'm drawing it there we go now i have exactly what i had before i have a vertical slit scan of just the video image i now want to make my slice into an array of slices slices is a new p image array of height divided by h that's the number of images i need for all the slices each slice is a new blank p image i then need a counter to count through which slice do i want to put the new image in we'll call that slice index slices slice index dot copy and let's just display all of them slices index i at i times h oh well it's working but i'm not increasing the index so let's say slice index plus plus same as what i had before of course when i get to the bottom it goes out of bounds so i can use the modulo operator with the length of the array and there we go now you're probably asking yourself i'm asking myself the same question i don't get it you went through all this extra work to create this array so that you can copy the slice to let me draw what i'm doing here i have my source video where i am taking a middle section of pixels i am copying it to an array called slices where it goes here and then it goes here and then it goes here it goes here these this is the slice index which is changing every frame and then this entire array just gets drawn right into the destination image basically i've engineered a lot of extra memory to store the history of the images just to create the exact original slit scan effect however what this happens to be beyond just all the images of a current view of the slit scan it happens to be a history of the most recent slices those there's no reason why i couldn't start to play back that history in each one of these slices to do that i just need another offset offset is zero slices i plus offset where am i that's a time offset where am i in the history offset plus plus now this is getting a little bit wonky if that offset starts to increase it's going to also increase past the end of the array so i'm going to make a variable called current index which is i plus offset modulus the length of the array and let's see what happens closer to what i was thinking so i went off in a direction that was really making sense to me uh and then i realized this is not exactly what i'm looking to do i kind of like this effect it's sort of sliding that slit scan effect along and it makes it seem much more continuous as opposed to that it gets to the end and it just starts over so i think there actually is quite a bit to explore here but what i actually want to do is have a history of the full frame so that i can take different slices from different points in time so i'm going to double back a little bit and implement that so i'm going to call this p image array history you know it's up to me to choose how long i want that history to be but i think the total number of slices actually kind of makes sense remember it's the full image now i'm actually copying directly to the window the difference is i'm copying from a different moment in time not just the current video copy from the history itself from its corresponding y position the y position being i times h i'm still going to need that offset so hold on hold on to your horses oh wait i also now i've got to save that i just made blank images in the history i'm like what am i doing here aha history index is zero every time i get a new frame from the camera copy the entire image into it why do i only have one slice oh i forgot to increase the history index okay then i've got to copy it into the next spot now i'm back i'm back to that original slit scan effect but in memory is not just those slices but the full image so i can start to move through time within each slice that's where the offset comes in offset equals zero offset plus plus current index equals i plus offset modulus history dot length and there we go there's the time displacement i was looking for so i'm going to stand very very still and with standing very very still nothing's really changing except for my mouth if i just move my head to the left and the right i start to get that wiggle effect now you can start to imagine what happens if you take this effect and do it in a radial pattern in a vertical pattern in all sorts of other ways in a grid so many possibilities finally i have the fun house mirror animated time displacement sketch that i imagined creating at the beginning of this video thank you so much for sticking with me oh i hope you make your own version of this i'm so excited to see the result of what i couldn't possibly imagine in my mind right now thank you so much to tim rodenbroker for your generous donation to the processing foundation and for inspiring the contents of this video check out his website all of his courses he's got a new one coming up all about the copy function that i'm sure will explode the possibilities way beyond whatever i did in this video and i will see you once again on the coding train as we journey along through the creative coding landscape is that is that it did i almost get a catchphrase no