hello everybody and welcome back so as many of you know python 3.8 was released about three months ago on October 14 2019 now this is my first time getting a look at all of the changes in experimenting with them by myself and one of the major changes that I wanted to talk to you guys about is the assignment expressions operator also known as the walrus operator now this is probably the most controversial and exciting feature to come to Python 3.8 almost everyone that writes code in Python will be able to use this in some sense as opposed to some of the other changes like for example positional only parameters which probably argument to apply to more beginner or intermediate level programmers now that being said before I go too far there is a ton of different changes in 3.8 a lot of them are smaller lower level changes or to specific libraries or packages but I will leave this link in the description in case you guys like to have a look at them so now let's dive into the walrus operator and give a few examples of when we might actually use this and what this does now the actual operators syntax itself is a colon followed by an equal sign now this is designed to be used inside of expressions so essentially what it does is assign a variable to some part of an expression so let's have a look at the first example here where we say if n colon equals the length of a is greater than 10 then what we can do is print out this statement right here now what exactly is this doing well it's fairly intuitive essentially what's happening is we're assigning the length of a so that value to the variable N and then we're just evaluating this expression as if this n didn't even exist here that is the way that this works within this expression if we'd like to take part of it and store it in a variable what we do is we put a variable name colon equal whatever part of the expression we want and then we can complete the expression and this will be evaluated and then we can print whatever it is we want to do or go into the loop or you know move forward in the program now in this case we can see that the reason we've done this is because we actually want to print out the amount of elements in a and rather than typing the length of a to x will simply type it once in the actual expression at the top store that value and then we can print it later on now a better example might be down here when we using the what is this called when we're using the regular expressions library in Python we can see that what we're doing here is looking for read search so we're searching for a specific I guess pattern here and then we're gonna see if that pattern exists which is the expression and we're going to assign that pattern to M oh so I guess wherever that was found we're gonna put that inside of mo this way later on in the loop when we want to use mo rather than retyping this entire expression and performing this logic again we already have that value and we can simply use it later on in our program and that's kind of the point of using this expression operator and I'm gonna show some examples in my own code editor that provide maybe a little bit better reason why you might want to do this now this is a good example as well a lot of times you're gonna want to use this inside of a while loop because what you can do is essentially say well my condition is if F dot read 256 does not equal blank but I actually want the value of F dot read so rather than having to get that value again or maybe do it above the while loop and then do it later on before the while loop or some point inside of the while loop we can just use this assignment expression operator assign block equal to F dot read and we're good to go we can process block inside of here okay so I'm gonna close this now we can go to my examples that I have here just to illustrate exactly how this works a little bit better and maybe in a little bit simple terms for some other people all right so let's run through a few quick examples that hopefully will better illustrate why you would even want to use this well here is a quick one so for example we have a variable called not roll risk we want that to store the expression X less than 7 we also want to print out the value of that variable so we have these two separate lines and we do that here now if I skip down and I use the walrus operator well what I can do is simply assign the value of walrus to the expression while printing it out at the same time so this will print out the value true for us just like this one is gonna print out true as well and then if I want to use this variable later on I can do that and I can print that later I can use another expression or whatever it is that I want so that's a quick example hopefully that helps a little bit now let's move on to the second one this is where we see kind of the massive advantage of the walrus operated and where I expect I will probably use it in some of you guys might as well so this is example two what I'm doing is simply just having a little script here that asks the user to type numbers while they're typing invalid numbers we'll add those numbers to a list otherwise once they stop typing in a valid number then we'll just stop asking them so that's what this is doing here you can see we have to ask the input before because we need to check that it's a digit before we get into the loop and then we ask again in here now there's another way to write this loop but either way you're still gonna have a few extra lines that you don't really need an art that clean whereas if we come down here with the walrus operator we can kind of avoid some of this messy code that we have above here and simply say WOW num which is equal to type a number like this dot is digit we can append that number and we can keep doing this and we only have to have this num and this question asked once whereas up here we had to ask this twice all right so that was example two now for example three again this should hopefully show you some of the advantages in terms of readability of using the walrus operator the walrus operators don't really achieve anything that we can't do without it as you can see obviously I'm doing without walrus and with walrus there's nothing that really the walrus operator will do that we can't do without using that but we have here is let's just say bar equals five if R is equal to five we will ask a question so you know type your answer and if answer does not equal blank then what we'll do is print nice now I've shortened this very similar code down here this is pretty much equivalent we say if bar equals five and in this case answer is cool and equal to input type your answer then we can print answer now you know here is probably what actually made sense of my print answer because now this is gonna be the same code you guys get the idea this is where the Walters operator has an advantage where you might want to use it typically inside of if statements as this one has allowed us to actually avoid a level of indentation and example two will probably be the most used use of this being able to use it inside of a while loop expression if you need this value that you're you know the expression is inside of the actual loop so it means that has been it for the walrus operator I hope I give you guys a few meaningful examples and you can see when you might use it I would love to hear from you guys what you think of the walrus operator as I know a lot of people in the Python community are not happy that it was implemented in personally I don't really care I think it's cool it's another tool if you don't want to use it you don't have to use it and for me it definitely you know cleans a few things up especially with while loops like that so with this being said leave a comment down below let me know and I'll see you guys in another video