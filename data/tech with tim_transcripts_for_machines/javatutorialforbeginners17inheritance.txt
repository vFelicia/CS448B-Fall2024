hey guys and welcome back to another Java programming tutorial so in today's video we're going to be going over inheritance so this has to do with classes and this is going to be how we can inherit methods and attributes of previously made classes into like a new class and then override methods and all kinds of fun stuff this is really important this will save you a ton of time and yeah so let's get started so you can see here I have this sari this dog class that we created in the last video and pretty much the goal what I want to do at least in this video of the problem is I want to create a cat class that is identical to this dog class except in this speak method here instead of saying I am whatever I just wanted to say meow my name is whatever right so I just want to change one of these methods to do something different but other than that I want all of this to be the same so intuitively what we think we do is we'll be just take all this copy it put it into a new file called cat and then just change this to be what we want well we could do that and that'd be fine but when we have classes that are like thousands and thousands of lines long ideally we don't want to be repeating code and continually typing like the same thing a bunch of times right it also just makes it more difficult to read so what we're gonna do is we're going to use something called inheritance so I'm gonna create a new class I'm gonna go new class and in this case I'm gonna call mine cats alright and I'll just click finish like that and here we have public class cat now whenever we do this inheritance what we can actually do to inherit all of the properties all of the methods everything from this dog class is up here when we define the class we can type extends if we spell it correctly extends and then the class dog like this okay now what this is gonna do is it is gonna grab everything from dog class and apply it to cat class so this is known as our superclass because it's kind of above the cat class and then cat is known as our subclass so we have you can also call it a child class or a derived class and this could be also called a parent class all right and that's because it's kind of underneath it's getting everything from there but then it's gonna be changing a few things and maybe adding a few methods to it so typically you start off like the most abstract with a parent class and then your child classes are your derived classes or your subclasses because they're all the exact same thing just everyone likes use different words for them are gonna have some slight modifications to them and kind of work based off of that superclass right so or the parent class okay so what we need to do when we first do this as you can see here it already is telling us we need to use the constructor for dog so we're inheriting from dog but we need to use the same constructor otherwise all this stuff and all these attributes well they're not going to work unless we set up our class when we first created the same way as we did dog so what I'm gonna do is I'm actually just gonna click on this and you can see it automatically generates this constructor for us now I could have typed it out but this is a yeah this is what it's going to do so since in our dog class we get name and we get age we need to make sure that we have a constructor inside of our cat class that gets name and gets an age and we have to actually explicitly call our superclass constructor which is going to be the dog constructor using this formation or this syntax super and then we give it the name and we give it the H now this doesn't stop us from being able to type in other properties or other attributes so for example I could do something like int and I don't know food or something that's like how much food they should get this works perfectly fine and we can go ahead and we can create another a street here's they say private I don't know let's just say food okay and this should say int food and then int down here we can go ahead and we can just type this dot food equals food okay right and that works perfectly fine and now we're gonna have since we're inheriting from this we're gonna have age we're gonna have name and inside of this cat class we are gonna have food as well and that works just fine okay so just to know let's go over this again because they kind of gone through it pretty quickly but all of these methods here we're gonna be able to use within our cat class because well we're inheriting we're grabbing all of them from the dog class so this cat class when we first extend it and do nothing is identical to the dog class and then as soon as we start changing a few things in here it's going to become a little bit different but still use all this functionality so we still have the attribute age that we're setting them equal because we're gonna call this constructor method right from our what he call it's super right here so we call this constructor so we setup age and we setup name and then we have speak we have get age and we have set age now before I move any further let me just prove this to you so if I go to main here and I just create a cat object so I'll just a cat Tim equals blue cat and remember we have to give it three parameters or three arguments this time because that's what we typed in so for name you know obviously you Tim age will do 18 and food let's say they get a hundred I don't know grams of food or something whatever you want to Class A there okay now I can use these speak method on Tim so you see we're getting no errors here even though in my cat class there's no speak method but since there's one in dog and we inherit from it we can use it so I'll prove again to you run this I am Tim and I am 18 years old and that works perfectly fine so now remember I said though I want this speak method to do something else I want to change it so how can we do that within the cat class well the way to do this is to just rewrite the method in here because when we do that we're simply gonna overwrite whatever's in the dog class so the child class or the subclass whatever you want to call it whenever there's something the same in here it automatically is gonna override or overwrite whatever is in the dog class so I do public void speak okay so this is the exact same name as the other one alright and in here I change I do something right so I changed something so I'm just gonna say system dot out dot println and in here what did I want to say like meow and my name is let us say plus this dot name and you know it will even add like a little food thing and I get fed let's see here plus this dog food okay I don't know let's get enough for me what's the issue here change visibility of name to protect it uh okay one second I got to do something here cat this just needs to be sorry public and public sorry this is just because we're not actually able to see these attributes because they're defined in the dog class from within our cat class so we just need to change them to public so that we're actually gonna be able to use them within our speak method we can also use something called protected which I'm gonna talk about near the end of this video okay so right now this use public because I don't wanna get into protected but let's see what happens now if I run my team don't speak now we'd say meow my name is Tim and I get fed 100 ok and that's because even though in the dog class we had speak since we wrote it again in our cat class and cat class is the one that we're using we're simply gonna take this one and we're gonna override the the one in our dog class okay now obviously when we're doing inheritance you've already seen we can add our own methods we can add more stuff when we do whatever we want right so in here I can add more methods I can say public Boyd I don't know eat and in this case we'll just have like int I don't know X like as how much they're eating and we can say this dot food minus equals x ok and just subtract from it however much they ate and then we can use eat in the cat class but it's not gonna be seen in the dog class right so we just have to understand this does go one way all the stuff we do in cat class is not gonna be visible to stuff in dog class because well dog does not extend cat right so it's kind of a hierarchy where like dogs at the top and then cat branches off and we can have other things extend the dog class as well we'd have something extend the cat class and we could just keep going and going and going and extending and extending and extending also known as like inheriting right so that's kind of it for inheritance now I want to show something called multiple constructors ok so there is sometimes when we're setting up a class we want to be able to pass it like a different piece of information and set up the class differently right so for example my count class here at gives name age and food what if however I only wanted to give it name and age well we can leave both options available they don't have to be mutually exclusive right I could give it either these three arguments to set it up or I could give it just two and to do this we have to create another constructor so I'm gonna do the exact same thing as above I'm pretty well identical except I'm just gonna leave out one of the parameters here okay so set in to age and then here we'll simply call super and name and age okay and you see no red lines everything looks fine and what we're essentially doing here is we're giving it another way to set up the cat class another way to construct all of our attributes and set up the cat class so we can either call the cat class using three parameters or three arguments or we can call it using two and you know what maybe we could set one up only using one we're only using zero so let's do one with one just to show you how this might work okay so if I do string name and then int age okay and then here I call super oh sorry I should just get rushed I should get rid of this because we're only gonna use one right my bad I'm gonna give name but what about age what am I giving super for for our age well I don't know how are we gonna set it up if they only give us one argument well I would think that if they don't give us an age then we should just automatically assume that their age is zero so let's do that I'm gonna put in zero just hard code that in here so that way this means now say for example they only want to give us a name then we'll just automatically give them an age of zero they want to give us a name and an age that's fine we can do that but maybe what we should do in here if they give us a name in age is we should make sure that food is set equal to I don't know maybe let's give it a default value of 50 so if they don't define how much food the cat eats we're just going to assume that they eat 50 okay and this is kind of a weight you can do like it's known as like default parameters if they don't type something in just automatically set a value for that so that everything still works fine I hope that makes sense so let's show now the three different ways that we can create a cat say cat Bob equals new cats and in this case we'll give it a name so we'll say Bob and we'll give it an age of seven and no red lines this works fine again this defines a cat right because that's another constructor that we had so let's do this one more time and in this case let's just only type in a name we're gonna name this one do I like the name Joe all right and there we are so now we can obviously do like Bob does speak and we could do speak and these are the three ways that we have that we can define a cat okay so meow my name is Joe I get fed 0 Bob I get fed 50 right it can go on like that so again when we have one now we just seen a quick error that maybe we want to fix we should probably give them food as well so you're saying this stop food equals fifty okay as like our default value for how much they get fed so that is a way that you can do multiple constructors and now I'm going to talk about protected values so protected values are something that we can use similar to private and public but there they just act a bit differently so pretty much if you use the protected keyword instead of public when you're defining things so for example here in my dog class I'm gonna go up and change public to protected this means that only things that are within the same package or are subclasses of the class can have access to this pretty much like me okay so that means any of these files or any of these classes within this package are able to see this but if I had another package which you typically do if you have large Java programs anything in there would not be able to see this okay so with whenever we're using what do you call it whenever we're creating like a main class or a parent class pro tected Wow okay we're gonna want to use the protected keyword at least for woody code sorry our attributes so that we can change them and access them from within deep sub class all right now for these methods it's fine they're public anyways right so we can make these protect it as well if we didn't want another package to be able to access them now if we create private methods right if we create a private method here I'm actually gonna try this but I don't remember if this is gonna allow us to use this now out here so let's say like Tim dot I don't even know which one I changed get aged okay say Tim to get aged so int x equals c this is gonna work yeah so again this is not going to allow us to use this because well we made it private right if we made that protect it it would allow us to use it here but not outside of the package now I want to try this though and see if I can gets this uses get aged from within our cat class so if I do for example I want to speak I'll say this get aged ad yeah so this isn't working as well which means that again if we want to use those methods we have to make sure they're either public or protected rather than private okay the only time you're really going to create private methods is if within the class is the only area you're using the method so for example maybe you're doing a Cometh calculation and you only do that from within the class and you don't want anyone outside of the class to be able to do that then you create a private method to do that because you could do that from within the class right so anyways I think I am probably going to end it here in the next video we're gonna be talking more about classes doing some more advanced stuff and then in future we're gonna get into like interfaces and some other cool Java stuff so again if you guys have any questions feel free to join my discord server or leave a comment down below and as always if you enjoyed the video please make sure you leave a like and subscribe and I will see you again