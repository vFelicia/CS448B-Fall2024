foreign so if you're anything like me you probably don't consider yourself a frontend web developer and you're probably not that confident when it comes to building layouts designing web pages and really doing anything on the front end now for the longest time I was the type of person who just said I hate CSS I'm never going to learn CSS I don't want to use it someone else can do that but recently I've been brought into a role where I do actually need to do quite a bit of styling and I've had to learn the basics of CSS so that I'm comfortable and competent and I don't have to constantly be looking stuff up when I'm trying to design a page now I've realized that about 90 of everything I ever need to do comes down to about 10 or 20 different CSS properties basic stuff that's really easy to memorize and once you have an understanding of it it just makes you way faster when it comes to designing some basic layouts you know styling different objects making things look half decent so that's what I'm going to aim to teach you in this video is kind of the absolute minimum CSS knowledge you have to have to be comfortable working in an HTML document and designing some relatively simple layouts kind of aligning different items changing the color of stuff adding some transparency you know adding rounded edges all of that kind of stuff that's what I'm going to aim to teach you here and by the end of the video you should be comfortable hopping into an HTML document changing some Styles creating a basic layout and no longer will you have to look up how to center a div on stack Overflow so if that sounds good to you then let's go ahead and hop into the video after I share with you one very important piece of information which is a sponsor of this video before we get started I need to thank lenode for sponsoring this video I've been using and working with lenode for nearly three years now and they've consistently been my goto choice for hosting my applications and servers in fact right now I'm using the node to host the official Tech with Tim Discord bot a website multiple of my domains and a kubernetes cluster lenode makes it super easy to spin up servers with their oneclick app Marketplace and have tons of written guides and YouTube videos on their channel to help you get started now if you're having any issues you can reach out to the 24 7 support team and actually talk with a real human being now the nodes pricing is simple with no hidden fees and full transparency and you can test out the node services for free by using the link in the description and claiming a 100.60 day credit for any new accounts it's been an absolute pleasure to work with lenode over the past few years and one last thank you to them for sponsoring this video alright so I'm on my computer now I'm in Visual Studio code which is where I'm going to write my code you can do this wherever you'd like I'm going to run you through a very quick table of contents what I'm going to explain to you and all these time Stamps will be in the description by the way is first of all the different types of styling that I'm going to talk to you about CSS selectors I'm then going to discuss colors and backgrounds we're then going to get into block elements versus inline elements we're then going to talk about widths and Heights in the different units you can use for that then we're going to talk about the Box model so margin padding border outline Etc the actual content as well we're then going to talk about flexbox so this is going going to be how you actually make different responsive layouts and some of the common flexbox properties you need to know then we're going to talk about positioning and Zed index so you can do things like layer objects on top of each other have items that are absolutely positioned and kind of learn how that works now there is a million CSS properties I could go through here a lot of them I'm just going to skip over or mention really quickly the goal here is to teach you the absolute minimum that you need to know to be competent in CSS all the stuff I'm showing you here will really make up about 90 percent of the styling you're going to be doing if you're working on something that's not overly complicated so just knowing this will make you much much faster when it comes to writing CSS and styling documents especially when it comes to laying out different stuff which is where I see a lot of people struggle so keep that in mind I myself am not a CSS expert but I'm definitely qualified to explain to you how these things work and with that said let's dive in so the first thing I want to do here is run you through my environment setup so obviously I'm using visual studio code I would recommend that it's probably a good tool to learn how to use and I have two documents here tutorial.html and style.css now I will show you how we link the style sheet and all of that but just create two documents here one HTML one CSS and put them in the same directory and then open them up in some file or some IDE or whatever you want next I have in Visual Studio code this extension called live server now you don't need this but this makes it so you don't have to manually refresh the HTML document instead what will happen is it will automatically update for you whenever you make a change to the document so kind of a useful thing for the video that's what I'm using just figured I'd show you that all right so now that we have gone through that what I'm going to do is just open up my HTML document in my browser and I'm going to do that by running live server so once you install live server you should see it at the bottom of the screen and if you go to your HTML document and you actually have HTML content it will show you a button that says go live so first let's just make an HTML document I'm just going to use kind of the builtin Snippets here from what do you call this uh vs code and then I'm going to click on this button here and go live all right I just had to get rid of another server I had running there so that's why you saw that okay so now I have my HTML document here it's running on Port 5500 and I'll just show you that if I let's make this a bit smaller make a change here and call this like document one notice it just automatically updates I didn't actually have to update it okay so let's make this a bit smaller here uh just so I can see the rest of my code all right so we have our HTML document we have our style sheet for now we're just going to talk about the different types of styling uh and kind of how you apply styles to elements so let's just create a basic P tag here in the document I'm going to assume that you know the basic HTML Elements by the way and let's see how we would apply some kind of styling to this so there's kind of three different methods the first method is inline styling now inline styling is not recommended it can get very messy when you have large documents but essentially it involves passing a parameter attribute here to the tag itself called style now you just say style equals then you're going to have a string so either in single or double quotation marks and you can write the styles that you want directly in here so for example if I want to change the color of the text I could say color equals maybe we just go with aqua I'm going to add my semicolon there and then notice that this changes right away now if I wanted another style I could do something like background Dash color let's just make this blue and now you're going to see that I get a blue background color for the whole PTEC that is inline styling again you can see why this would be a bit messy you don't really get the syntax highlighting either so I wouldn't recommend this method but sometimes if you just want to test something it can be useful the next method we have is writing your Styles directly in the HTML document but in one tag which is a style tag so the way you do this is you write a style tag directly in the head of the HTML document and then you just write the styles that you want and you apply them using CSS selectors now I'm going to talk about the selectors later but for now if we want to Target the P tag we'll just write p and then inside of here I could say color is equal to Blue and notice here the now my P tag will change to the blue color so those are your first two methods you have the Styles like this in the HTML document and your inline Styles right on the element itself so now that we've looked at those two methods I'll just mention that this one here although it is better than inline Styles is still not usually preferred because you're kind of mixing the Styles and the content together and you can get a really massive document when you have all of the Styles up here and then all of the content of the page it just not really preferred instead what you want to do is you want to use an external style sheet so I have this style sheet against in the same directory and the way that I link this style sheet here to my HTML document is I go in the head tag of my HTML and I write the following tag which is link now this can be used to link a bunch of stuff not just style sheets but to do a style sheet you're going to say Rel is equal to style sheet and then you're going to say the href which is essentially the location and you are going to link it to the name of your style sheet which in this case is Styles dot CSS so now I have actually linked this style sheet directly here into my HTML document and now if I go and write my Styles here for the P tag and I say color blue you're going to see it changes and now we have kind of our Styles separated from our content alright so there you go we have concluded section one with the different types of Styles now I'm going to talk to you about the different CSS selectors so a selector is the way that you're targeting specific elements now we've already seen one and this selector is the most basic this is just the tag name selector I don't know if that's actually what you call it but that's what I'm going to call it and it just means that you write the name of the tag you want to Target and then you just put all of the Styles here now I kind of assumed you guys knew the format of the Styles but I'll just quickly go through it whenever you're styling something you're going to do your open curly brace and your closed curly brace and then inside of here you're going to write the style property in this case it's going to be color you're then going to do a colon and then you're going to write whatever the value of that property is and then you're going to finish that off with a semicolon if you have multiple Styles if you just have one style you don't need to have it but if we wanted to add another one I need my semicolon to kind of terminate that line and move down to the next style and then in here I would write the rest of Styles and I would be good to go so syntax is uh pretty straightforward however sometimes we don't want to just Target the entire tag name right if I do this this means every single P tag in my document is going to have the same style so if I add another one down here you see that they're all going to be blue because I'm targeting the P tag directly instead what you want to do is Target specific elements at least in many cases and there's different ways to do that one of the first and most popular ways to do that is using an ID now an ID is simply a unique identifier that you add to an element now you cannot have the same ID on multiple elements you have to have a unique ID every single time you use it so that's a bit of a limitation but sometimes it's nice if you want to Target one specific element and you're not going to be reusing those Styles so in this case if I say ID and let's just go with P tag like that now what I can do if I want to access just this specific P tag is I can select it using its ID so to do that I'm going to put the pound sign which stands for ID and then name of my ID which in this case is going to be P tag now that I do that you can see that in my HTML document I'll just zoom in here so you can see it it turns blue there you go I've selected an element by ID now let's just see what happens if we add the same ID here actually forget what's going to happen here it looks like it did work so I guess we can use the same ID however you're not supposed to have the same ID on multiple tags so you know kind of consider this a bit of a cheat you're not supposed to do that all right so that was the second way uh the Third Way in the most popular way is using class names now a class is the following you just say class is equal to and then you give this a name uh usually by the way the conventionists use a dash whenever you have a space so in this case I'm going to say class and let's just call this the same thing actually we'll just call it P tag and now if I want to reference the class from my CSS rather than a pound sign or a number sign I use the period so I'm going to say period and then P tag and then color and then red and notice now I've changed uh this class here or this P tag to have the color red now the advantage of classes is that you can reuse them or at least I guess you could reuse IDs but you're not supposed to reuse IDs with classes you are supposed to reuse them anyways in this case I can add this class to another P tag and now the same Styles will be applied now there is a bunch of other advanced selectors in CSS I'm not going to walk you through them there's ones where you can select like the first element where every other element you can do all kinds of crazy stuff I almost never find myself having to use these Advanced selector patterns if you need them you can look them up but just understand that you can do things like select the seventh last element or select an element inside of this element that has this attribute on it there's all this crazy stuff I don't really find myself having to use it so I'm not going to walk you through it what I will show you though is how you select elements within another element so let's do this let's remove all of our IDs and our classes and let's see how we do this so let's say I have a div just standing for division right and inside of here I have two P tags now let's add a class to the div so let's say class is equal to section one now let's say I want to select all of the P tags inside of section one and I don't want to have to add classes or IDs to the ptech well to do that I can select the class which is going to be section one so I can say dot section one then I can do a space and AP and then I can say color and just make it red like that now what I'm doing is saying okay all of the P tags inside of section one I want to color red so it's kind of just going in this order right I'm looking for Section red or section one once I find that then I'm getting all the P tags then I'm coloring those red now you could continue this and keep nesting it like I had another div here let's say class equals section two and now I put my P tag in here notice that first of all both these P tags are going to be read because this div is still inside of section one even though this ptexor is inside of section two since section two is inside of section one it's still being selected however if I just wanted to select the one in section two then I could say section one dot section two and if I could unhighlight this you'd see that now this is red so I've just kind of chained that now continuing even further what I could do is just select section two right now this will work as well because I can find section two directly and there you go now one more thing uh to show you is that I could do this I could say section one div and then p and now I'm selecting this so I didn't actually need to add a class I'm just selecting all of the divs and everything inside of all of the divs that's a P tag I am going to highlight red or change color to red hopefully that makes sense but those are really all you need to know for the basic CSS selectors again if you need more advanced ones just look them up and you're probably not going to have to use them very often all right so now we're moving on to colors and background colors now I'm just going to show you how you set different text colors as well as the background colors of elements which is again 99 of what you're going to be doing and then I will show you the different units and kind of types of colors you can use for other properties as well say like the underlying color or the Border color or stuff like that now as you can see when we want to change the color of text we use the color attribute now that is different from the background color attribute background color is going to set well the background color and color just sets the text color at least when we're talking about something like a p element now to set the color you have to give it a value now there's a bunch of different values that are accepted here the most common and the one that I use all the time is just the builtin string values the kind of predefined colors so like you can type a black you can type red you can see that a bunch of them are kind of showing up there's actually a ton of different options here when it comes to the predefined colors like Rosy Brown like very very specific option but you can see that I can do that now other than the builtin color strings you can also pass an RGB value or a hex value so if I want to do a RGB value then what I do is I write the function RGB standing for red green blue I put my parentheses and then I write three values in the range of 0 to 255. I'm not really going to explain RGB but this is the amount of red green and blue and having those three different values can give you essentially any color on the color spectrum so if I wanted red I would do 255 0 0 notice I get red and in vs code it actually tells me what the color is which is kind of nice here if I go 255 0 255 I get purple if I do full 255s that's going to give me white because every color combined or red green blue all combined gives you white if you were to do a bunch of zeros then that would give you black now one other thing you may want to do is you may want to add transparency or an alpha value to your um your color so in this case what you can do to add that is you can say RGB a a stands for Alpha and this is a value between 0 to 1 that represents the percentage of opacity of the object so in this case if I do one this is fully opaque if I do zero this is completely transparent and then something like 0.5 would be 50 transparent or I guess 50 opaque whatever way you want to say it and you can see that we can actually see through it no pun intended there but that is how you do an alpha value when you're using RGB add transparency the next thing we have is hex codes now a hex code is pretty much the exact same thing as RGB except rather than doing a value from 0 to 255 you're going to do two numbers or two digits I guess you could call it in the range of 0 to F now I'm not going to explain to you exactly how hex works but essentially if you wanted to do white with hex then that would be six F's right so each two numbers represents one RGB value so two F's is 255 and if you had two zeros that would be zero right so that's kind of the color you get you get this like teal color anyway so that's how it works with hex you have six digits here in the range to zero to F each two digits represents one RGB value and most color codes you're going to be grabbing are in HEX formats you can write just the hex code here all right so continuing here if you want to add opacity to hex values it's actually pretty easy you just add two numbers at the end of the hex value those two numbers combined can be in the range of 0 to 99 representing the opacity so if I do something like 90 I'm getting 90 opaque right if you want it to be fully opaque well then obviously just leave it you don't add that if you want it to be ten percent you do 10 right if you want to be 20 you add 20 like that at the end of the hex value now one thing I will note other than the transparency is when you are writing the hex values it doesn't matter if you use lowercase or uppercase numbers so you know lowercase f sorry not numbers uh I mean letters lowercase f is going to be the same as capital F it just it doesn't matter so just keep that in mind when you do the hex values all right I think that's pretty much it four colors and kind of how you set the colors I will show you that of course we can just add the same thing here with background colors so if I do background color black now we should actually be able to read this text and the background color is going to set kind of the entire it's going to set for the entire width of the object the entire size of this so it's not just going to stop here at the end of the text because this text actually takes up the entire block which is actually what I'm going to talk about now all right so as I was saying now I want to discuss to you the difference between inline elements and block elements and kind of this property called display so right now we're looking at three p tags and we kind of just take for granted the fact that they're all in a different line they've all kind of evenly spaced themselves out here and they all you know go beneath each other they're not crammed together on the same line now the reason that actually happens is because there is a property by default on all of these paragraph tags called display and that is set to block now you have different kind of defaults in in HTML some tags are going to have block as their default some are going to have inline now what block means is that there is going to be a line break after this object let's call it that and it's going to make the next item in the Dom go down to the next line so in this case these all have display block so you see that they're all on different lines that's intentional because after this is kind of written onto the document it adds a line break and then the next element is written adds a line break and if I were to add something else it would go on the next line because this has display luck now to show you this in action let's just make this select all of our P tags and let's go here and change the display properties so we need to actually type display so as I was saying by default it is block we want to change it though to be inline now when we change it to be inline notice that they no longer have a line break they only take up the amount of space which is equal to the content of the paragraph tag so if I move this over now you can see that they all go on the same line and they're all kind of spaced out which is what the default spacing would be right now if we change this back to B Block then they go on their new line so you just need to understand that because sometimes you'll get some weird layouts because you don't realize that you have objects that are display block and they're forcing everything down a line when you don't necessarily want that and you may want to change their their style here the display to be inline now there is a few other options here there's one called inline block now I don't ever really use this and I don't really feel qualified to necessarily explain how this works it has something to do with setting the width and the height of the object and anyways I won't really get into it you guys can look up inline block if you want one other one for inline or for display here is none now if you do none it just makes this invisible right it just gets rid of the actual object so I don't know that could be useful if you wanted to have some hidden object on the screen for some reason okay so that was it for inline versus block just understand that again that's important to note let's change this back to inline though and let's start looking at widths and Heights all right so I just set up a simple example here so I can talk to you about the width and the height and explain kind of how this works so this is a bit confusing especially at the very beginning but once you understand kind of the fundamentals of the width and the height and the document it becomes very easy to position elements and kind of set them dynamically so first of all understand there's many different ways to set the width and the height when you use something like flexbox it can be automatically set for you when you're using uh different units like percentage pixels REM stuff like that you can manually kind of specify the height of objects now the first thing that we should really understand is what is the height and the width of our body how is that relative to the HTML document itself and then we'll look at specific elements inside of them now what I like to do to make this really easy is set background colors on everything so you can kind of see how much space they're actually taking up and get a visual sense of the width and the height so the first thing we want to look at is the width and the height of the body right now I've set the background color here to be aquamarine and notice is taking up the entire screen now that gives you the illusion that the body is the entire width and height of the screen that's actually not the case and I'll show you how we can prove that so understand that your body is inside of your HTML tag right HTML is kind of the first tag that you have so if I set the background color here to be black now you'll notice that the body is actually only taking up the size of its content now you might say oh well the HTML document must be the entire size of the screen that's actually not true either I'll show you that in a second what happens is when you set the background color on the body or the HTML document it just sets it for the entire page even if the size like the height and the width of the body in the HTML are not the entire size of the screen I know pretty confusing but you can see when I set the background color on HTML now the body is only taking up the size of its content and you can kind of see that because this teal color is in the middle and then if we didn't have background color for these two elements all of this would be the teal color all right hopefully that makes a little bit of sense but let's see now how we could maybe change the height of our body so if I go to height here there's a bunch of different ways to do this right I can try using something like percentages I can use pixels I can use REM which I'll talk about in a second but let's look at the most common which is probably pixels so I can specify manually the height of my body by using this PX unit which stands for pixels so if I say 100 pixels now you can see that my body is 100 pixels and so you may be saying well that's way more than 100 pixels remember that I'm like zoomed in like crazy here right so that's why it's it's looking like it's massive anyways I've set it to 100 pixels and now I've just kind of manually specifies this specify the size now the issue with this is that as I change the size of the screen it just stays the same because it's a static size it's not relative to the viewport or the size of my screen so usually what we want to use is a percentage so I want to set that to a hundred percent now when I set this to 100 if I want to take up the entire screen you would expect that it's going to be 100 of the screen however this percentage is relative to the parent of the tank so when I set a percentage share on body it's a hundred percent of the height of the parent now in this case the HTML tag or the HTML I guess parent its height is just equal to the content of whatever's inside of it so setting this to 100 doesn't make any difference because this doesn't have a height set so what I would need to do if I wanted this body to actually take up 100 of the screen is I would first need to set the height of the HTML tag so I would say height and then I could set this to 100 percent now the parent of the HTML tag will be like the entire document itself like the entire screen so now you see my body actually gets a hundred percent because I've set the HTML height if I don't have the HTML hide set then this doesn't work because 100 of nothing is well still nothing or the size of the content okay hopefully that makes a little bit of sense now one quick note here on the width the width by default is going to take up the entire width of the screen so even if I remove all of my content here I still get the body taking up you know the entire width of the screen because that's just the default here for my document okay so hopefully that's clear in terms of body and HTML now if we wanted to say change the width of the body of course we could do the same thing and if I change this to say 50 width since by default HTML is taking up 100 width now I take up about half of the screen in my body Tech all right so we're getting uh some good progress here next thing I'll talk about is why we have this kind of black you know really margin is what it is around the body by default your body is going to be kind of offset from the HTML document itself very slightly so that you get uh not all of your content kind of squished up against the edge of the screen now you can remove that if you want using a margin property if we just set margin equal to zero percent the notice here uh that we're getting what we would expect right everything is coming down now if I remove all of my content you'll see here that now the body takes up the entire screen the reason why I wasn't taking up the entire screen before is because by default my paragraph tag will have a margin to the top so if I removed both of my paragraph tags here and I just have my divs now you see I go up to the top of the screen right hopefully that kind of makes sense but anyways you have by default the margin and gets like five percent or something like that maybe it's less than that I don't know what it is for the body you can remove that by just setting margin zero so just wanted to explain kind of why you're seeing that that outline for now okay uh continuing here what do we want to discuss next probably the different units and setting widths and Heights and all of that kind of stuff so as you've already seen this percentage unit only works when the height of your item the height of your parent is actually set either it's a percent of something else or it's a fixed height that's the only time percent works if you just try to do 100 and you have no defined height that doesn't work the next unit we can talk about here is going to be vertical height or vertical width so let's say we don't want to set the height on our HTML document here but we still want our body height to be the entire height of the screen well the way that we can do this is we can use this unit which is VH which stands for vertical height now vertical height is going to be the height of the viewport so as I change the size here of my viewport you're going to see that the size of the body is going to automatically adjust based on the size of the viewport and since I have this margin here it's overflowing the screen a tiny bit because it's getting a hundred percent of this whole thing but it's kind of starting here so it's going down a bit right hopefully that uh that would make sense so that's VH that's vertical height that will just use the vertical height of the viewport now same thing we can do VW which is viewport width and now you see that the height is equal to the width of the viewport okay so those units pretty straightforward if I did 50 then I would get you know 50 right of the vertical width okay uh after we have VW and VH we have pixels now I don't know if I showed this already but pixels is just going to be you're statically setting the size of this no matter what the screen size is to be 100 pixels so if I go here right and I start moving this around if I could select my object here come on let me select this it won't let me grab the bottom okay there you go you're going to see that the height doesn't change it just always is going to be 100 pixels so usually you want to stay away from using pixel values unless you're using very small pixel values for stuff like margin padding Etc all right so the next two units to show here for height are going to be em and REM now we'll start with REM now REM stands for the root of the default font size of the document now I know that seems a little bit confusing I Believe by default REM is 16 pixels but what I can do is something like one and then REM and what that sets the size of my body to be is one multiplied by whatever the default font size is for my document now that can be set in the browser so if someone has like a really massive default font size then this will adjust based on that right so this is the root of I guess say the document the browser whatever you want to refer to it as whatever the user has set for their default font size that's what this refers to so if I do 10 REM I get 10 times and I believe the default is 16 so that gives me 160 pixels if I do 5 right 5 times 16 whatever that is that's what you get here 4 times 16 Etc now if I upgrade or change the font size or lower it then this adjusts based on that again this is the root all right the next unit here is em now em oftentimes will be the same as REM but this is actually relative to the nearest parent all right sorry for the cut what I just did here is I set the font size on my body to be 20 pixels because I want to show you the difference between em and rep so I'm going to go to one here and I'm going to say height and this is going to be equal to and I'm going to use the EM unit this time 5 em now as I was saying em is relative to the font size of the nearest parent so in this case the font size of the nearest parent is 20 so I'm going to get 100 pixels for this height now if I change this to be REM you should see that this shrinks a slight bit Yeah I think you can see that right if I go em versus REM notice that the the size is changing and the reason for that is that the root font size is 16 of the entire document but the font size of the nearest parent is 20. so I'm going based off that so A lot of times these are going to be the preferred units to use especially if you're trying to scale for kind of accessibility reasons like if someone has a really massive font size you probably want the content on your screen to show up larger for them because they're probably visually impaired um so that's kind of why you might use em or REM personally a lot of times I just use the percentages uh to do stuff percentage of viewport but this these are good units to know and a lot of you know like pro web guys probably use em and REM for pretty much everything all right so that is pretty much it when it comes to width and height uh those are the main units that you need to know and let's move on to the next topic all right so now we can move on and talk about the Box model which is a very fundamental aspect of CSS so the Box model is essentially trying to tell you what different properties on your box or on your different Dom elements actually do and kind of how they change the spacing and layout of this element so we have four main properties we need to understand here we have the content the padding the border and the margin now the content isn't really a property but it is important to understand what the content is so whenever we're looking at these different tags here we can kind of think of them as containers that are holding content in this case we have a P tag its content is the text that we wrote we have a div tag its content is uh the ptech which then it's content you know nesting inside is the text right we have the body its content is all of these div tags together so by default the size of your container is going to be equal to the size of the content and sometimes you know the content size will be adjusted in this case we have the paragraph tag and since it's display block the size of the content is actually the entire line or the entire width of the parent right that's just how the display block elements work continuing though we have our Panic now the padding is what spaces the content out from the edge of the box so let me show you what I mean by this I'm going to say padding and I'm just going to use the unit 10 pixel for the padding you can use the exact same units you saw before so REM em percentage vertical High vertical width all of this work for the padding I usually use pixels but that's fine you can use whatever you want so notice that when I add 10 pixels of padding first of all what that does is add it on every single side and the padding vertical is slightly different than the padding horizontal hence why you're kind of seeing it look you know different here it's also based on the way that I've zoomed in here anyways just it doesn't really matter but anyways you're seeing 10 pixels of padding on each side that's essentially what I've added now you can notice here that what happens is you see this antique white kind of background color now appearing because the box for this div container is now larger because of the added padding I've now padded the content inside of the Box by 10 pixels and you now see the background color whereas when I remove the padding now you don't see the background color because the size of the container is simply the size of the content so the padding again is the space between the content and the outside of the container okay so there you go we have our padding moving on next we have the border now the border is going to start at the edge of the box right wherever the padding is so if you have zero padding it's going to start right on the edge of the content if you have five pixels of padding it's going to start five pixels um outside of the content right wherever the box is you can kind of see what this highlight color so when I write my border here and by the way the way you can do a border is you can specify the thickness you can specify the style and then you can specify the colors let's just go with black notice here uh that now my border gets added to the edge of the box now it's actually adding one pixel kind of beyond the padding it's not staying within the padding right so if I have 10 pixels of padding and then a one pixel boarding border you could say I have 11 pixels between the very edge of the box and the content that's important to understand if you're trying to go with very specific type things now when I do something like five pixels right okay now I have a five pixel border and again same thing the padding has not decreased the padding is still 10 pixels I've just now added five pixels beyond the padding I know it doesn't quite look proportional to the actual padding you're getting vertically and horizontally it just again kind of how this is working right now don't worry about that too much anyways that's how you do the border now I will mention because we're talking about padding you can specify the padding in different units and for different signs right so you have properties like padding left you have properties like padding right padding bottom this is usually the case for anything that would be kind of square around everything so you can kind of change those here and same thing with the border right you could say border left and then you can make a border on the left side you could say border rights you can make a border on the right side what I'm doing is kind of just the shorthand here for adding on every single side now additionally when you're talking about padding you can specify the padding in on different sides so I can do five pixels 10 pixels uh five pixels 10 pixels and excuse me now what I've done is I've added five pixels I believe to the top 10 pixels to the right five pixels to the bottom and 10 pixels to the left I think that's correct but let's just make this really massive to see yes so this is the left definitely uh this let's see is going to be the top okay and this is going to be the right which would make this the bottom for the padding okay you can just mess around to kind of test what they are but that's how you do the padding all right so we talked about the padding talked about the Border next we have the margin now the margin is the separation between the object and other objects on the screen so to add a margin you write margin and then again you can specify this in whatever unit you want so I can do something like five uh let's just go with em so now I've added 5 times em I think will be 16 because it's just going to be the root because I haven't specified and now I'm getting 5 times 16 units of padding on every single or sorry of margin on every single side let's make this a bit smaller this we can actually see this five pixels and now notice again I'm getting five pixels of margin every single side if I increase this I get 10 pixels and I'm spacing my object out from other objects so the main thing to really take away here is the difference between padding and margin margin is the outside of the box padding is the space between the outside of the box and the interior content very important understand the difference same thing with margin you can add like margin left margin right margin bottom you can specify it like I did the padding 5 pixels 10 pixels 5 pixels 10 pixels and of course you can use percentage and whatever you whatever other units are you want here for the margin all right I think that's going to do it for the Box model make sure you understand this practice with it if you need to just make sure you know at least the difference between the content the padding the margin and the Border I mean that's really all I discussed here but you need to know that very very important to get good at CSS all right so it is now time to move on to flexbox now this is one that a lot of people get uh pretty confused with I'm going to explain as best that I can personally I think it's fairly intuitive to understand once you know kind of the main aspects of flexbox it's very easy to design responsive layouts that automatically scale with the screen size this is the preferred way to lay stuff out at least this is what I like doing and what most people I see do all the time there is some other types of layouts where you have like a grid layout for example however I'm just really going to focus on flexbox because I think this is the most powerful one and what most of you probably need to learn to be able to design HTML pages all right so we have our uh our two divs here right now right now they're aligned um what do you call this vertically now there is other ways than using flexbox to align these horizontally however what I want to do is align them kind of in a row so to do that I'm going to start using flexbox now essentially to use flexbox you need to set this property display equal to flex on some parent container now in this case I'm using the body tag because we have a very simple document here and I have two divs inside of the body and what I'm saying is okay my body tag I want this to be display Flex as soon as I do that it now allows me to use my different flexbox attributes or properties Now by default everything that's in a flex box so when you have display Flex it makes flexbox is going to be aligned in the row or in a row so what's referred to as your main axis is going to be the row and your cross axis is going to be the column or your yaxis okay so notice when I make this larger I'm aligning everything on the left hand side of the screen I'm going to make this a bit smaller so it's easier to see here on this side okay so that's what happens when you make a display Flex automatically you align things in a row rather than a column now what I'd like to do is I would like to make it so that these items are in the center now the way I can do that is I can use the property justify content and set this to Center now what this does is it will justify the content in your flexbox in the center of the main axis now because by default we're using row as our main axis we get this centered in the middle of the screen horizontally however what if we want to do this vertically well to do this vertically we need to use another property called align items now line items does the exact same thing as justify content except it doesn't across the cross axis which means it's going to use the opposite axis of the main axis so if it's horizontal as main then vertical is going to be your cross axis right now right now you might be saying well Tim this isn't aligned in the center the reason it's not aligned in the center is because the body height isn't set and the HTML height isn't set so technically this is the center based on the height of the body but if I just do height equals 300 PX now you'll see it'll be in the center and even prove this to you again let's just go background color black and you can see that uh oh again I forgot I can't do that because it's going to fill the entire thing anyways just trust me it's in the center based on the height uh if we do 100 VH here uh then you'll see it'll just go right in the middle okay and let's actually just same margin 0px so that now it looks like it's actually directly in the middle anyways that's how that works now the thing is we can uh change the direction of our main axis to be column if we want to and the way we do that do you say Flex Direction and we make this column so now when I make this column I'm aligning my items in a column not in a row and they're going to be in the center again the reason they're in the center is because now justify content what this does is it aligns me in the center vertically and what a line items does is align me in the center horizontally because we flip the axes so now these are going to flip so if I remove this notice that now I take up the entire space because I'm not aligning in the center and just by default it's going to fill the container that's what happens when you use flexbox okay so hopefully you're kind of getting the hang of this you do have to practice this quite a bit to get it but just understand main axis cross axis once you know that it becomes very simple okay there's a lot more to show you but this is the basic for now so let's remove these and now notice that these are just going to take up the entire height of the screen because that's by default what they're going to do when you use display flex and they are not aligned at all right they're just kind of starting so the default here when I say justify content is what's known as Flex start now this means align the items at the start of the flex box since my main axis is now my vertical axis it's starting them at the top now we also have Flex end now when I do Flex end what happens here and sorry I realized I changed the axis back to row so I what I said there was incorrect but when I change this to flex n since my main axis is the horizontal axis now it goes to the right hand side because I'm starting at the end of the flex box you can see that now there's a few other options here uh one of them is space between now when you space between it does exactly what it says it's going to align them with all of the space in between the objects and the flexbox so this is quite nice when you want to have something on the left side and then all the way push to the right side of the container use space between and aligns them evenly with the space between now let's see what happens if we add a third div here right notice that now we get the exact same thing so it's going to align perfectly this one will be perfectly in the center and the two will be on the side and if I added one more you can imagine what it's going to do right I'm not going to add another one to show you great so let's justify content uh space between we also have space around now when you do space around you'll see that we'll get the same amount of space around every single object so kind of the margin of these objects are the exact same and that's why you have now padding or margin on the left and right hand side okay so those are the main ones I think there's a few other ones but those are really all the ones I've ever used so that's what I'm going to leave it at and let's just change this back to Center so now let's add align items to the mix now when we use align items we don't have all of the same attribute as we have for justify content so you're going to see my autocomplete's giving me a bunch here we have Center Flex end Flex start stretch which I won't go into inherit initial unset again I'm not going to talk about all those ones but the main ones here will be centerflex and flex start so if I go flex end right and then I save that now I'm going to go to the end of my cross axis if I go flex start now I go to the top or the beginning of my Axis and if I go Center then I go in the middle of the screen right so there you go that is kind of the basics on aligning the items so you've ever wondered how to center a div you do it using flexbox very simple right display Flex justify content Center align item Center and then any items inside of the flexbox will automatically be aligned in the center of whatever that container is okay uh let's continue here and do some more advanced layouts again there's a lot of stuff I can show you here so the next thing I'm going to show you is Gap now what Gap does is set a specific gap between the objects that you have so like right now if we look at this uh these already have a margin on them so that's why they're kind of separated the way they are but if I remove the margin so let's remove the margin from my items they're squished together a lot of times you don't want that and it's also kind of annoying to add the margin directly on the object because then what happens is you have to add it on every single item and um anyways what will happen sometimes is that you can get some weird calculations going on because you're adding the margin to both the left and the right side of the object well maybe you only want the margin between the three items not between anything else I don't know if that necessarily makes sense to you but the Gap property kind of fixes this problem so when I add Gap and I say 10 pixels now what this does is add a 10 pixel Gap along the main axis between the objects so this is quite nice because rather than me having to add a 5 pixel margin on every side of these objects or on the left and right side to make it combine 10 I just put 10 and then it lays it out automatically for me as it should and any items on the left and the right side that are not a part of the flex box are now not having any margin applied to them because the Gap is only between these specific objects okay I know that was a lot I feel like I probably lost a few people there but that's gap and I believe there's also Gap why is there is there a Gap in the y direction uh I'm not sure if there's a gap in the other direction row Gap uh okay you guys can look that up I think maybe it's just on the the main axis although for some reason I thought we had another Gap property okay but that's gap that's the main one all right now we're going to talk about how we determine how much space objects in the flex box take up and to do that I need to add some classes here so let's just copy this and make this two if we could type properly and three and make this two and three so let's say we want object one here to take up double the amount of space than both the other objects well what I can do is use a flex property here and set this value to 2. now when I do that what I'm essentially saying is I want this object to take up two Flex spaces Now by default my other objects are taking up One Flex space so it's going to take up two times more than my other objects right there we go I have two and then one one and actually sorry let me fix this Flex one and flex one uh since I didn't set Flex one on my other objects what happened there was I filled up as much possible space as I could with this object because it's the only one who had the flex property set on it and then my other two objects took up the minimum amount of space required for the container Ken sorry about that it was probably a little confusing what I described there but now notice two one one and I'm filling the entire size of the flex container because now I'm saying hey take up two times the amount of space as the other objects and when you say uh the flex property it's going to take up as much space as it possibly can relative to the width of the container all right so let's try this now with some different values let's go flex two three two now again this is kind of what you're getting I won't go through the math of exactly how that works but you have two spaces three spaces two spaces and whatever the total number of spaces are it'll just divide by that and then figure out the width automatically okay so that's kind of how Flex works and this will be based on the main axis of the flex box so keep that in mind okay uh if I change this now to one again you get the same thing two one one and then obviously I made them all one then they're gonna all evenly take up the same amount of space here uh on my main axis okay I'm just looking at my cheat sheet to see if there's anything else I need to show you related to flexbooks uh so that is the main thing now there's a few other attributes here and there it gets pretty complicated you do an entire video on flexbox where you have things like Flex basis you have things like uh Flex overflow or I don't know if that's what it's called I think it's something like Flex grow or Flex shrink there's all these other properties I'm not going to get into them here but there's ways to make your Flex box so that objects kind of go on different lines okay so I just want to look to some of the other flexbox properties again as I was saying there's so many I can't go through all of them here it's going to take way too long so feel free to look them up if you want to learn more about flexbox what I just showed you is enough to do a lot of layouts like a lot of different layouts you can do here just using this so you should be fine with that and obviously keep in mind that you can Nest Flex boxes inside of other Flex boxes so if you want to have like rows inside of columns or columns inside of rows you can absolutely do that I'm going to do another video actually uh kind of in this series let's call it where I go through building a layout and show you how to do the different Xbox stuff shortly okay let's continue though next thing I want to do is talk about positioning and Zed index so let me clear this let's get a new example and then I will show you how that works all right so now it is time to talk about positioning now this can be a little bit confusing but I'm just going to show you the basics types of positioning and how we kind of Stack objects on top of each other and move them out of the regular document flow so the default type of position for every object that we have on the Dom is static now that's just the default what that means is it's just going to follow how you would assume everything's going to work okay static position however we have four other types of positioning we have sticky fixed relative and absolute now the first one I'm going to show you is absolute now in absolute position and I've just added a uh let's see here so I was going to say position not relative absolute uh means that we're going to position this object based on its first positioned parent now a position parent is anything that is positioned in the document so in this case this container is positioned as flexbox uh it's it's positioning things okay like it's positioned in the document so when I say position absolute I'm going to be positioning this item here based on that parent uh so inside of the parent is kind of where I'm going to be moving it if that makes sense so now notice though when I've made this position absolute what happens is the other documents or the other elements inside of this container are ignoring this element so if I just make this display none then you can see here kind of what's Happening is that these two are aligning as they would if this object wasn't there right whereas this object is kind of following the positioning scheme of the container and again ignoring the other objects around it hence why they're kind of stacked on top of each other now as soon as you have this position absolute this allows you to use a few properties here on the element to align it or to position it the first one is top so you can pass top zero pixels and what that does is move you to the top of the container and puts you zero pixels away now if I said left 0 pixels I moved to the very left of the container again I am 0 pixels away from it if I do 10 I'm not going to be 10 pixels away from the left side hopefully that makes sense of course you can use it right and you can use bottom okay and let me just get rid of top though because that's not gonna work uh now you see I'm 10 pixels away from the ball so that's the basics but that only works if you are positioned uh not in a static positioning because if I now remove position absolute it doesn't matter what I say here for bottom it's not going to work because I'm not absolutely positioned all right so I've just reset a few things so you can see I move my P container up I've kind of changed some of the stuff anyways point is I want to talk to you now about stacking and how we move stuff based on the Z index then I'll show you the other types of positioning so the Z index essentially the elevation on the page an item that has a higher Z index will be on top of an item that has a lower Z index however this is only the case when you're using objects that are um positioned now what I mean by positioned is that they don't have the position type of static so what you need to know by that is if you use absolute relative fixed or sticky Z index works and if you're using a flex item I won't talk about exactly why it's the case but essentially all our P tags here since they're inside of a flex container they will be positioned and Z index will work on them so let me show you how this works so let's go background color here and make this green and let's go background color here and make this blue now notice that the green right now is kind of on top of the blue right it's just the way it's laid out that's how we have it now what happens if I make a z index property here of one so if I add Zen index to 1 to my P tags here notice that now they kind of go on top of my green box now I know it's kind of weird because they're not like filling the entire text content won't really get into that exactly but just understand they've kind of moved on top right whereas if I just make this back to zero uh or I actually set this like negative one actually it doesn't matter what I set it to because it has a value and the other one doesn't but if I remove it now the green goes on top right so if I set the Z index to 1 and then I go here and I set the Z index to two now my green will go over top because it has a higher Z index value and as you saw if something doesn't have a z index value you can just imagine it has a value of like negative Infinity right any Z index value will go higher than that at least from my understanding okay so that's kind of how the Z index works when you're using positioned elements so useful to know we'll talk about this later and show some better examples but I just wanted to quickly kind of show you that okay so now that we've looked at Absolute let's look at another type of positioning which is going to be relative so the relative positioning and by the way we're looking at this item here um is if I can spell relative correctly means that this item is going to be positioned relative to where it would normally be positioned so if it's normally supposed to be here that's where it's going to be until you uh start setting the top right left aspects right so here this is where it's supposed to be so now if I wanted to say move this right I could say bottom 10 pixels and now moving this 10 pixels off of the bottom because it's the bottom is where it's supposed to be and I've just moved it 10 pixels off right and then same thing I could say left 10 pixels and now I'm going uh 10 pixels away from the left based on where it should be so not based on the container that it's in or the first position container it's based on where it should normally be in the document so kind of useful if you need to slightly move something but you don't want to move other objects you can use position relative and then again of course you can use the Z index when you have that type of positioning so let's move to a different type of positioning let's use a fixed position uh now the fixed position just means that this item here is going to be fixed based on the browser position so let me do this here and go to height of my body and change this to 200 vertical light so notice when I scroll doesn't matter this is just going to stay exactly where I've placed it right which is bottom 10 pixels left 10 pixels so when you use fixed you're fixed to the browser you're kind of glued in one spot and this is based on just the browser window itself so if I make this larger then it's still in the bottom left okay that's fixed pretty straightforward for that one and the last one I have to show you is sticky now the way that sticky Works uh is actually I'm only really able to show you when I use um something that's scrolling because it's based on scrolling so let me um let me clear a few of these things and show you let me get rid of that and let's remove all of this essentially and I'm just going to change this to be position and then sticky so the way that sticky works is it's based off your scroll position so if I do something like top zero pixels uh what happens is as I scroll it's going to stop when it's zero pixels away from being at the top right because that's what I've said now if I set it at 10 pixels you're going to get a similar thing but now as I scroll as soon as I'm 10 pixels away from the top it stops okay 25 pixels same thing right now if I had this positioned at the bottom of the screen and I set the bottom if I was scrolling up then it would stay at the bottom of the screen so it's actually uh common for people to use sticky for stuff like bottom nav bars or like Footers or stuff like that or top nav bars for example where as you scroll you want it to kind of stay on the screen so that's why you might use a sticky position anyways I think with that I'm going to wrap it up here there was a few more things I wanted to mention but this video is all already quite long I think I went through most of the fundamental CSS stuff of course you are going to have to practice this you can't learn everything you need about CSS in one single video but hopefully this gave you a good introduction to a lot of these topics showing you how to create different layouts how you can use different common CSS properties and as I was saying I'm going to do a part two here where I just build out a web page and show you kind of how you put these skills into practice with that said if you enjoyed make sure you leave a like subscribe the channel I will see you in the next one thank you