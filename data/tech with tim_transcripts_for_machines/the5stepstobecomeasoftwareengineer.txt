in this video i'll be sharing with you five steps that you can follow to become a software engineer now these are in the order in which you should follow them in but i just want to mention that this is not going to be an exhaustive list it's not going to work for everybody this is just my opinion on what you should probably learn in the order in which you should learn it if you want to become a software engineer as quickly as possible so with that said let me list out what these different topics are and then i'll elaborate on them as we go through the video so step number one is going to be to master the basics step two is to write clean and efficient code step three is to learn software engineering tools step four is to get into advanced programming and step five is to learn about software design and architecture now again this is not gonna be a complete list for everyone if you're going into a specific field of software engineering say like web development that you're definitely going to need to learn other things however i think this is a really good general outline and should apply to most people trying to become a software engineer now that said if you want to learn this content as quickly as possible you of course can follow youtube channels like mine find great free resources online that's definitely doable but to learn this as quickly as possible you should check out programmingexpert.io now programming expert is a course that i just released with the algo expert team that is literally designed to make you a software engineer as quickly as possible you can check it out from the link in the description programming expert dot io and use the discount code tim at checkout if you want a discount i'll let you guys look at that but it's literally designed to make you a software engineer and covers almost everything that i already mentioned in this video alright so let's go ahead and get started step number one is master the basics and what i think you should do in this step is get good at at least one programming language and understand programming fundamentals and really build a strong foundation for yourself so you are comfortable and confident writing code i think this is the most important step for really anyone trying to become a software engineer is to get a really solid foundation and understand the core concepts that are going to apply throughout every single language every single framework and pretty much everything you do going forward so just give you a few examples here i think that you should understand data types variables conditions looping functions object oriented programming all of these topics that are going to apply again to pretty much everything now the reason i'm really emphasizing this is because a lot of people will immediately dive into something like a frontend framework or machine learning or game development or all of these other very interesting topics now i'm not trying to say that you can't do that as a beginner you can but it's way easier and less discouraging when you already have a solid foundation underneath you imagine going and trying to learn 3d game development without knowing how to write a single line of code well now you're doubling the amount of work you have to do to feel successful or accomplished in this field because now you have to learn 3d game development as well as whatever the programming language is that's being used to do that you don't have the foundation and so the amount of stuff you have to do to actually achieve something maybe build a project is a lot more whereas if you build the strong foundation first this is a really great step builds some confidence and allows you to feel more comfortable actually writing code solving problems and then moving on to any other frameworks modules or specific things that you want to learn hopefully that makes sense but that is step number one master the basics alright so now we are moving on to step number two which is to write clean and efficient code now i understand this might be a little bit controversial because some people will only really do this once they've gone through almost all the other steps that i've listed however i think it's very important to build strong habits when you're starting out with programming and to learn how to properly write code and write code in a clean and efficient manner now to do that you need to learn things like time complexity and space complexity essentially analyzing code and understanding which code is more efficient than others now this is not extremely difficult to do especially if you're doing it on a very surface level and not getting into any super advanced data structures and algorithms but i think having that understanding and realizing hey i probably shouldn't have three nested for loops inside of each other unless i absolutely need to have that or oh this approach is a better way to solve this problem it's going to be more efficient it's going to use less space or on the other way maybe i'm going to write something that's a little less efficient but it's going to be way easier to understand and i'm going to be able to go back to this in a few months and be able to modify it tweak it whatever that's kind of what i'm talking about in this section is building strong habits and writing code in a way that's maintainable and sustainable now just to add one last point here from personal experience i was someone that was learning to code when i was a lot younger i was about 11 12 years old and so most of the code that i wrote back then never needed to be seen by anyone else it was just for myself so i didn't care how it looked i didn't care how maintainable it was i didn't care about consistency naming conventions all of those types of things and i built a really bad habit of just writing honestly horrible code that worked that solved the problem but that was really hard to maintain hard to read and hard to understand and so as i was getting older i had to actively work on changing the way that i wrote code because now i was getting into the industry actually working in a job and presenting my code to other people and in youtube videos so that's why i'm putting this step right here it's not very difficult to do but learning things like how to write selfdocumenting code avoiding repetition structuring your code in a very easy way to understand really really important and a good habit to build early on all right so now we're moving on to step number three which is to learn software engineering tools so at this point in time you should be comfortable writing code you should have some confidence in writing code as well hopefully you've solved some small problems you've worked on some projects you understand how to structure code and write clean code you kind of have the basic skills down now to get to the next level i think it's important to learn the software engineering tools that you'll use in a professional environment right so for example some of the tools you may want to learn would be git and github this allows you to work with multiple people on the same code base allows you to store previous versions of your code base i have all kinds of tutorials on it on this channel it's also on programming expert i also would recommend learning something like bash now bash is a command line tool this is going to be used on mac or linux and this is kind of in replacement of your graphical user interface so a lot of times when you're working as a programmer as a software engineer you're not going to have access to a nice graphical user interface and desktop and all of that stuff you're going to have to do everything right from the command line and i think it's important to have a basic understanding of the command line tools how to navigate a linux operating system these are things that you might not have to do that i think are pretty important and that are a good skill to have as a programmer for example understand how to run your code directly from the command line without using the little run button in your editor right that's something that i think most software engineers should know how to do and again how to create files navigate the file system all that type of stuff continuing i also think that you should learn about ides now an ide is an integrated development environment at this point you've probably already worked in one if you've gone through these steps however i think it's important to have proficiency with your ide understand the different keyboard shortcuts how to use things like debuggers and a lot of the professional tools that ides will offer to you for example vs code is an ide that's one that i would recommend if anyone is looking for one to learn continuing i think you should learn about basic networking now this is something you might be able to emit from this list but understanding things like http ip addresses just the basics on what networking is how networking actually works on a very very surface level i think is nice to know as a software engineer because a lot of times you're using features in your code that rely on networking and to just have that basic understanding just makes everything easier to do all right so that's going to wrap up this section again i have you get bash ides and networking there's a ton of other tools you could potentially learn here and those are probably gonna differ depending on the specific discipline of software engineering that you're getting into alright so step number four is to get into advanced programming now advanced programming could have so many different topics within it this of course is very vague but i think you should step outside of your comfort zone now and start learning about more advanced features and things that you don't necessarily need to use but you will probably see and should understand how they work so i'm just going to name a bunch of topics off the top of my head again nonexhaustive lists just some things that i'm thinking of right now so probably threading multiprocessing asynchronous programming iterators generators compilers interpreters how your code is actually ran and executed maybe things like decorators standard libraries all of these different topics that are fairly advanced that you probably want to at least have a basic understanding of and know what they look like in whatever programming language you're working now if you're working in a professional environment unless you're a senior programmer you're probably not going to have to implement a multiprocessed application you might but that's unlikely but a lot of times you'll see in the code base that you're working in there'll be a bunch of advanced features that are used and you'll have to understand how they work so this is really more about just being able to read this type of code than it is about writing this type of code and that's kind of why i threw this section in here because i think it's important to know these different topics even if you don't know how to implement them yourself all right so that is what i have for advanced programming again i apologize that this is vague it's really going to depend on the type of software engineer that you're trying to be but those are the few things that i can think of off the top of my head alright so now we're moving on to the last step which is software design and software architecture now this is something that's very difficult and that most of us are really never going to have to do at least on a super impactful level but the reason i'm including it here is because as a software engineer i think it's important to understand things like design patterns good coding practices the different approaches you can use when designing specific applications and pieces of software even something simple like picking your tech stack right those are things that actually differentiate in my opinion programmers and kind of people that write scripts from people who are software engineers i think it's pretty easy to actually get into programming and learn how to write basic code or you know create basic projects but to be able to work on large scale applications design entire websites design things like netflix facebook google things that need to scale to millions of people that is what software engineers do and when you get to a super senior level of software engineering which full disclosure i am nowhere near that's when you start to really get good at this stuff and when that's your main responsibility now to give you uh some concrete examples here or i guess a personal experience i interned at microsoft about a year and a half ago and when i was there the number one thing that i saw that separated people like me from people that were super senior software engineers was their ability to do software design and software architecture to look at something from a very large macro perspective and say what approach are we going to go with here what are the advantages what are the drawbacks is this maybe the better approach because it's going to be faster to implement all of that type of stuff even just to design a system in terms of laying out the different components structuring a code base picking the tech stack right all of that type of stuff was what those guys were very very good at doing and what our team relied on them to do so that someone like me could go in and implement the individual features and just as a last note here i think that after you get good at software design and software architecture you're probably at a level where you're comfortable to design any type of system any type of application and what comes next is really up to you do you want to master a specific framework master a specific language do you want to get into machine learning and ai do you want to do frontend web development whatever it may be i think once you get to this point in your software engineering career it's really about what you want to learn next you should have the skills and confidence to learn it and well then you go learn it get good at that and continue from there so with that said i think i'm going to wrap up the video here as a reminder almost all of the topics in this video are covered on programming expert dot io check it out from the link in the description use code tim for a discount if you guys enjoyed make sure leave a like subscribe to the channel and i will see you in another one you