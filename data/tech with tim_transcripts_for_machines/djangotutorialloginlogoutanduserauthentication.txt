hey guys and welcome back to their django tutorials so in today's video what we'll be doing is talking about logging in and authenticating users I will also show you how we can only restrict pages so that users that are logged in can see them so for example we maybe don't want a user that's not logged in to be able to create a new todo list or because that probably won't work so how we can do stuff like that and then in the next video we're gonna I'm gonna be doing is talking about creating a custom user model which means that we can add things like all of our todo lists to a specific user so that each user has their own todo list and when they go on the website they're gonna see different todo lists not just all the ones that have been created by any user that's we'll be doing the next one but this one will just be logging in validating and logging out as well so what we actually need to do first of all when we're gonna be logging in and logging out is we need to create those login and logout pages now luckily for us Django actually does a lot of this work for us they have a built in application if I show you in settings top I here that is Django dot contrib dot auth and what this does is it authenticates users so we've done all the hard work of creating new users but now since we've done that Django can actually authenticate those for us so we can use some of the builtin things in this application to do that for us so the first step in what we want to do is we actually want to use some builtin pages that Django's made so they actually have made logout login what does it change password like a ton of different pages like that that we can access simply by linking to them in our URL patterns from our main urls file inside of my site so what I'm gonna do just like I've done to get into my other applications so I'm just gonna say path in this case include but in here I'm gonna say Django dot contrib dot auth dot URLs and I believe that's correct but I will check that quickly to make sure I didn't mess that up yes so that's correct so what this will do now is it'll go to this application it'll look in the urls file there and we'll see if we have a valid URL so if we have login and logout change password create password a bunch of those different pages right now we're just gonna work with login and logout but you know what I mean that's what that'll do for us but the thing is these views if we try to go to them now they actually don't exist so what those templates attempt to do or what the views attempt to do is render a template called login dot HTML logout dot HTML from a specific folder that we need to create so what we actually need to do and it doesn't really matter where we do this but I'm gonna do it from inside of my register application so inside of templates I'm gonna create a new folder and in here I'm gonna call this registration like that now it's important that you spell registration correctly like I just miss felted registration because it's gonna look for this specific folder so we're gonna create a registration folder inside one of our templates folder and then in here we're gonna create a new HTML file and we're gonna call this login dot HTML now this is gonna be where Django will look and what template it will use to render our login form so what we'll do is we'll simply just do what we've done before so we'll start by extends and then in this case main slash based HTML and then we'll add our blocks for our title and for our content so let's do that now Oh block title and then we're gonna say and block like that and then I guess we can do the title we'll just do a login here or something like that and then you know I can just copy this and we'll just change the name to content and now we're just gonna create a nice form in here that will display our form just like we've done probably four or five times by now we'll say form we're gonna say method equals in this case post and then we're going to say class equals in this case form group now we can't end our form like that and then inside here we'll add our CSS our token and whatever that is CSRF underscore token and we will simply display our form now I want to add this to be a Krispie form so it looks a bit nicer so to do that we'll have to load in our Krispies tags so we'll say load and in this case Krispies under school forms underscored tags I believe that's the correct way to do that you don't have crispy forms installed go back and watch the last video because we did that there and then what we'll do is we'll add a filter here and we'll say as the filter will just say crispy and this will display a nice form for us now we also need to add a button into our form because that doesn't come with it so to do that we'll say button we'll say type equals in this case submit and then I guess we'll say class equals BTN BTN success and end our button and just say log in now is the name sweet so that should be it for this login form now we actually may want to add one more thing because sometimes you go to a login page it says well rather than logging in like create an account if you don't have one so maybe we'll add that in here quickly just make things look a bit nicer so we'll just add I guess some peat agz I'll just say /p and I'm gonna say don't and account question mark creates one and then I'll add an a tag which will just link to our treat so I believe it was slash register we did was it slash register slash create that was that URL let's check inside uh where is it here register registers the name awesome so let's go back here register and we'll say here and then sloshing sweet so that should I should be it for the login page and now we can actually go ahead and run our server which I already have running and we will see that the login page is actually working so this is the logout page let's go to login and see what we get slash login um oh well if you spell extends incorrectly extends there you go then it won't work now let's try it i refresh this here there we go so now you can see that we actually have a nice login page and this took us all of what six minutes to create so it's pretty straightforward and what will actually happen here is this will properly do our logins and validate users for us so let's try to login this is a valid login right now password one two three four when I click login you can see that it's actually directing me back to the home page now the reason that this is happening is because I actually have something added down here my settings dog pie file that I forgot to like resave that which is telling us to redirect that page but let me just refresh this let me go back to login and do this again because I want to show you what happens if you don't have that you can see that it brings us to this note page not found which is probably what you guys were getting when you're running this now that's because what happens is when we try to log in its gonna automatically attempt to redirect us to a page called accounts slash profile now we obviously haven't created a page or a URL for accounts slash profile so what we need to do is we need to modify where we're gonna go once we log in now the reason was happening for me is cuz I'd done that previously and forgot to save removing it but let's go inside our settings dot PI file inside of our my site and let's add a redirect to let's say the home page whenever we log in so to do this I'm gonna say in this case log in underscore redirects underscore URL equals and in this case you can pick wherever you'd like to go but I'm just gonna do slash standing for obviously the home page so let's do that now let's rerun and try to log in and well we will see that we should be directed directly to the home page once we log in let's do that and you can see we are brought to the home page so that's awesome now I'm just gonna quickly move this up one because I don't like how that looks let's put this P tag just above here and now I want to refresh this and that looks a little bit better to me so sweet that's how we login now let me show you what's actually happening in the backend when or how we can validate if we're logged in or not because right now there's not really any way for us to tell whether or not we're logged in or we're logged out so what I'm gonna do is I'm gonna go actually all the way back into my main application into templates and based on HTML and I'm going to create a thing that essentially only shows our main content body so like this block content if we are logged in otherwise it will tell us to login and I'll leave a link that says login so a way that you can actually tell if a user is logged in or not is by using what's known as user dot is authenticated so I can actually create a code block here and I'm gonna make this an if statement I'm gonna say if user dot is underscore off then dictated them to kated I think I spelled that correctly so what this does is by default whenever you go to a web page in Django it has a user attribute which stands for the current user now if there's no user signed in I believe it defaults to what's known as an anonymous user so if you call user dot is authenticated on the user if it is a valid user that's properly signed into the web page then this will return true if it does not return true then the person is not signed in so essentially I only want to show this content block for all the different pages that I have if where it logged in otherwise I want to ask the user to login or even maybe redirect them to login so what I would do here is now I'm gonna put an else statement that'll say essentially else so if you're not logged in what we'll do is we'll literally just put an a tag and you ought you guys can obviously make this look a lot nicer than I'm going to do and we'll just link it to the login page and we'll say log in here and you can just click this whole thing and that'll you know what actually let's put this in a P tag make it look a little bit nicer slash P and instead of having the whole thing being linked we'll just do login here alright so now we will hopefully redirect to the login page and the last thing I need to do before I forget is just end this gift blocks will say and if and there we go so let's now go back and let me go to home and I don't think I'm currently logged in but we'll see and okay so dish I am currently logged in so what I want to do actually is just log out so log out brings us to this logout page right that just says thank you for logging out this is the default logout page and I'll show ya we can change that in just a second so now let's go back to the web page and let's just go to the home page and you can see that now that I'm loggedin it says login here if I click this oh okay so that is actually an issue so what's happening essentially is when I go to the login page since we're not logged in it's not showing the login page cuz that's the block content so this is probably not the best way to do it but this is how you can tell if someone is authenticated so maybe actually let me remove this yeah because it won't let us login if that is there so we'll remove this for now and just leave it as block content but that shows you guys how you can restrict kind of page access to people that are logged in so obviously on certain pages you might want to add that if statement so that showing different stuff based on if your login or if you're not logged in but that is essentially kind of how you do login and logout I'll really quickly show you how to change the logout page if you'd like to do that so same thing as kind of changing the redirect here for login so all we'll do is we'll just literally copy this and change this to log out underscore redirect URL and then here we can just define whatever page we want to go to when we log out so if you had created a logout template you could go to that you could go to essentially whatever you want but just by doing that I'll just leave it as a home page for now but you know you get the idea so I guess the last thing I'll show you is let's say that you are create some URLs inside of your new application so maybe we go we have a URL we have to create so let's go to the create page for a second I actually want to go to views my apologies if we want to get the user from with within code we don't want it just inside of the HTML file what we can actually do is we can type response dot user now when you do response to a user that will give you the user and you can run dot is authenticated you can get all the attributes of the user like the name the password the email all that stuff directly from the code and then obviously you could pass that into the context of the page or you can do whatever you need to do with it from the backend so I just figured I'd show you how to do that quickly so anyways that has kind of been it for logging in and logging out pretty straightforward in the next video we'll create a custom user model and we'll talk about how we can modify that model to add attributes like all the todo lists to a specific user so anyways that has been it for this video I hope you guys enjoyed if you did please make sure you leave a like and subscribe and I will see you again in the next one