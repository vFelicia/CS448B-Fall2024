hello everybody and welcome back to part 2 of our hangman pygame tutorial now in this video what we're gonna be doing is really focusing on what I've kind of drawn right here which is these buttons so essentially a core concept of this game is gonna be to be able to press on these buttons which will have a bunch of letters on them so like ABC so on and then have this letter disappear when you press on it and have that letter if it exists in the word show up up here right so if I press a then if the word start with a it would show up here if it contained a it would pop up those A's everywhere in the word that is what we are trying to do and that's what this tutorial is gonna aim to kind of do is figure out first of all how do we draw all of these buttons how can we click on these buttons how do we make these buttons disappear and reappear and that is a fairly challenging thing but I hope you guys are up for and I'm gonna be explaining as best as I can all of the somewhat complicated math that we need to do to be able to handle all that so I'm just rying to get rid of that square there so the first thing we need to do before we can handle any of the logic here is actually drawing these buttons now when I make games I like to make sure everything is nice and center and what I want to make sure everything is perfect and essentially what I want is there to be equal distance between the button on the far left and the button on the far right in other words the set of buttons if you looked at them as one rectangle would be perfectly Center horizontally in the screen so how do I actually go about doing them well I'm gonna explain very quickly here how we do that a few other things we need to consider about drawing buttons and circles and all of that and then of course we'll get into all of the code so let me go to a red pen here and the first thing that we need to point out is a bunch of variables that we have access to so the first thing that we know is the width of the screen now remember the goal here is gonna be to draw all of these buttons perfectly center somewhere horizontally on the screen now what I'm gonna do to draw the buttons isn't me to use a for loop and I'm gonna start by drawing the very first button and then I'm just gonna add a certain distance at a certain distance keep adding a certain distance and drawing all of the buttons until I get to my second row of buttons where I'll keep drawing all the other ones so the problem right now that we really need to determine is first of all how many buttons are we drawing and where do we start drawing the buttons from because I'm gonna use a for loop to draw these buttons so I'm gonna start at some position and from that position I'm gonna continue to add numbers till I get to the end of the row then I'll move down to the next row which coincidentally will start at the same position that this one started at right and then we will continue the process that's what we need to do so what we actually know right now is we're gonna have 26 total buttons and of those 13 are gonna be in each realm so we're gonna have two rows that's the way that I want to do it make as many rows as you guys want but I'm gonna go with two rows 13 buttons in each row so what we now what we now know is that if we have 13 in each row we're gonna have to fit 13 of these in there's gonna be a space between each of these buttons right so it's gonna be some kind of gap that separates them the button themself is gonna be a certain width it's gonna have a certain diameter and there's gonna be 13 of them so using those numbers we have to determine essentially this position right here where do we want to start drawing these buttons from so I'm actually just gonna write the equation for you and then hopefully I can explain it really quickly and we'll actually be on and ready to start coding so the equation we're gonna use to do this and I'm just gonna write all of it out first is width and then what we're gonna do is we're going to say gap plus radius multiplied by 2 and we're gonna multiply our sorry take this entire thing and divide that by 2 and actually let's go back here I forgot one very important part of this equation oops I do make small mistakes apologies here guys this whole thing times 13 divided by 2 that makes a lot more sense so what I'm doing is I'm taking the width and I'm subtracting we can make this even more clear this whole equation here so I'm subtracting the gap plus radius times 2 times 13 now what this value is right here is essentially the distance between two buttons because when we start drawing a button in PI gamers circle we starting from the center so the distance between the two centers will be the radius times two right because that is the diameter that's the width of one button plus the gap so whatever gap we want in between the buttons will be here and the radius will span right to where that gap starts so that is actually the distance between any two buttons will be this so we multiply that by 13 why because we have 13 buttons so we want to figure out the total distance between all of these buttons that's that's essentially what we're trying to do when we do that then we take the width and we do and we minus that from this whole equation so we're taking this whole length right here and we're taking the width and we're subtracting it so what we're gonna get is we're gonna get a part here and we're gonna get a part here so whatever those are that'll be some together then we divide that whole thing by 2 and what that does is essentially give us one of these parts which is the start of where we want to start drawing the buttons and that is the basic way to explain this that's how we actually do this that's how we get that distance so I'm not gonna spend too much more time on this you're welcome to watch this back if you want to see how this works but that's the basics of figuring out how we actually start drawing these buttons and the center of it and then this next part hopefully this will explain this further I will note that this is a little finicky sometimes I I might not have done this a hundred percent correctly but this will pretty well perfectly Center the buttons and if you want to use another way that's totally fine of course there's lots of different math we can use to determine where to start drawing these from so don't worry if that was a little bit over your head but now we're gonna start actually coding it out and worst case you don't totally understand try messing with the numbers and seeing what actually happens when you change things around but I am just gonna go through the math that we did over there and just start kind of discussing how we actually use those numbers that we figured out again there might be a simpler way to do this this is the way that I came up with so if you do know a simpler way please do let me know in the comments the first thing that I'm gonna do is actually just make a what do you call it's another comment up here and I'm gonna say button VARs just for variables I could actually we could type variables so button variables I'm gonna say radius equals and then in this case I'm gonna put a radius of 20 and I'm also going to define a gap science the gap size I want to uses 15 so we do want a gap and we do want 15 for to be that gap and then radius of 20 now down here and actually know what we can do it right up here with the button variables we don't need to go any lower I'm gonna go ahead and say buttons or actually letters sorry is equal to an empty list and this is where I'm gonna store all of the buttons that I'm about to create and then what I'm gonna do is have a start axe and a start Y variable that I'm gonna have to set up here so start X we talked about how to calculate that I want to figure out where we're gonna start the x position so to do that we're simply going to say and this is a little bit complicated round the width minus and then in here we're going to say radius times 2 plus gap like that multiplied by 13 and then we're gonna take this entire thing and we're going to divide that by 2 so essentially what we discussed the width of the screen which we already have that variable 4 minus the radius times 2 plus gap all of this will be multiplied by 13 so we'll subtract the width from that and then we'll divide that by 2 for the start why we're just gonna pick a constant value of 400 this is because we don't want it to be perfectly centered we just want to start at some Y position the X is a lot more important than the whines all right next we're gonna make a for loop or we're going to say for I in range we're gonna put 26 inside of here and I'm gonna say x equals and y equals what we're gonna do in this for loop is determine the x position and y position for each bud so essentially we're gonna start with button 0 we're gonna figure out XY where we should draw that and then after we do that I'm gonna explain how we can actually implement letters and draw those on to the buttons or like make the buttons with letters so we're gonna say x equals now bear with me here because this is a little bit complicated start x+ and we're actually gonna say gap times 2 plus radius I believe that's right sorry yeah plus radius but this needs to have a set of brackets around it and we're going to put times 2 here plus gap and then multiply this entire thing by mod 13 now I know this is fairly confusing and in fact actually let me just put another set of brackets here just to make it a little bit more clear but let me talk about what's going on here so essentially each loop we have this counter variable I that tells us what button were on now first of all what does I'm on 13 well I'm mod 13 gives us the remainder of I after dividing by 13 so if I is 13 then I'm on 13 is 0 because they evenly divide there's no remainder if I is 1 then the remainder is 1 if I is 2 the remainder is 2 right if I is 15 the remainder is 2 so essentially what this is trying to do for us is simulate like having two rows since I have I mod 13 this means that up until 13 I will just count normally and this can just be treated like it's I and as soon as we hit 13 it'll start recounting again starting at 0 going up to 13 that is kind of the goal of putting I'm on 13 now the reason I'm multiplying this by radius times 2 plus gap is because that's the distance between each new button that's strong right I have radius times 2 plus gaps so if you do radius times 2 that is the buttons would be right beside each other if you place them like that and then you add the gap and now that's how much distance between the last button so that's why we have that and then the reason I've added gap times 2 is just so that this offsets a little bit from where it would have started so that there's actually a gap between the right hand side of the screen and the left hand side of the screen so this seems like a weird thing to implement but essentially we need to do gap times 2 just so that we stay a little bit offset from the edge of the screen that's what we're trying to do with this gap times 2 you can try to remove it and you'll see what happens when you remove that now for why this one's a lot easier we're gonna say start why and we're simply going to multiply this by and we're gonna go I integer division 13 and then actually do we need to we can do + but we'll just do multiply because it doesn't matter here actually sorry let's let's do a plus sign my bad on that we're gonna do start X plus and then inside of the brackets i integer division 13 which I'll talk about in a second x and then inside of here we're gonna say gap plus radius times two so that's what we want here so essentially what integer division says is that whatever the actual division is excluding the decimal point is the answer to this so if we had three integer division thirteen the answer is zero because three does not go into thirteen evenly right if we had 13 divided by 13 or integer divided by 13 the answer would be 1 if we had 14 integer divided by 13 the answer will be 1 because we're not taking any remainder we're not taking any decimal point we're just taking the whole number division that's what that says okay so once we have that now we have the XY position and what we're gonna do is we're gonna say letters dot append and we're actually gonna put in a another list like this XY so essentially we're gonna make a bunch of pairs why do I keep typing a period XY we're gonna put a punch a bunch of pairs of XY values into this list so this list at the end will look something like this right like 25 30 right and then it'll have another set and it'll go like 40 55 or whatever something like that okay it'll have a bunch of pairs inside of that list so that's what we're doing and then we're gonna take all of those pairs and draw them to the screen in fact we're gonna do that now so I can show you how to draw some circles and then we'll actually put the text onto those buttons which will be a little more complicated again so what I'm actually gonna do is because we're gonna be doing a lot of drawing stuff I want to do that in one separate area and I actually want to do that inside of a function so what I'm gonna do is I'm going to define a function I'm gonna call this draw the wave function works if you haven't seen it before is essentially you just make something you put a name you put a set of brackets like this and then to actually call this function you write the name of the function and another set of brackets what this does is it will execute all of the code that's inside of this function so for example if I said print X like that and then I go ahead and I write draw like this then we will go ahead and we will print sorry not Acts let's just say print five we'll print five and I can call draw as many times as I want and every time I call it no matter where I am in the program it will immediately jump to where this function is and do whatever is inside of it that's the very basics of functions I don't want to explain too much more so inside of here what I'm gonna do is take all of the drawing stuff I've been doing and put it in here so I'm gonna take these three lines here which are bleeding things to the screen and actually drawing something right I'm gonna take those and I'm put them inside this function now all I have to do is replace them with the word draw and what this will do is call this loop and every single time it will run this so every time that we hit this draw function so every loop we will run whatever code is in here and just draw it so it's just kind of a substitution alright so inside of here I want to draw my buttons so I'm gonna add a comment I'm gonna say draw buttons like this then what I'm gonna do is I'm gonna say four and we'll just say letter in letters now I know this seems like a weird name but we'll see why we're gonna do that in a second and what we'll do is we'll say XY equals letter now this seems strange but what this will do is since all of these are pairs like all of the letters inside of our letters list our pairs we can split them up into the two components the x and y value by saying X comma y equals letter so if letter looks like 4 5 then X would be 4 and Y would be 5 that's the way that we can do that so what's known as unpacking or just splitting up the variables so we're gonna do that and then we're gonna say is pygame dot draw like that dot circle and inside of here we're gonna put where we want to draw it so we want to draw it on the window and then we're gonna put the color that we want to draw so I'm actually going to go up here to where we had our colors and we're gonna define a new color which is going to be black and black is going to be 0 0 0 like that and then what we're gonna do is we're gonna draw this with black so we're just gonna put black there so win we're gonna draw it with the color block we're gonna draw it where we're gonna draw it at X Y so that's the center of the button where we want to draw the button that's the center of the button then what we're gonna do is we're gonna draw it with a radius and finally a width for the width of the actual button so how thick is that line that's outlining the button and I'm gonna make that three pixels so we're saying pygame draw circle draw it on the window draw it colorblock this is the center where I want to draw the button so when we draw a circle we draw it from the center not the top left this is the radius I want from my circle and I want it to be three thick so now let's actually go ahead and run the game and see what we're getting because we're pretty much done drawing the buttons except for adding the letters onto them so let's give this a second here to boot up and let's hope that we didn't crash anything which we may have very well done and would you look at that perfectly we have all these buttons showing up and they are perfectly centered and in fact I think we have enough so one two three four yep looks like we have 13 in each row all right so what we're gonna do now is actually draw text on the buttons so to do that is a little bit more difficult and the first thing that we need to do is we need to go to letters here and we need to modify this a little bit so rather than just storing a pair that has our XY I actually want to store a triplet that has XY and the letter that should be drawn on the button so that way when we press a button or we look at a button or whatever it may be we actually know what letter we're talking about that's the idea we need all these XY positions to coordinate with some kind of letter we're gonna draw that letter on the button and when we click those buttons we'll do something right and we'll try to guess that letter okay so to do this is actually pretty straightforward I'm gonna make a variable called a and I'm gonna make this equal to 65 now the reason I'm doing that is because in programming or in computing every single letter every single character on your keyboard is actually defined by a number and it just so happens that the uppercase a is defined by the number 65 which means every time you add from there you go to the next letter so B would be defined as 66 so hopefully you understand what I'm about to do here since I have a equals 65 every loop I'm gonna add I to aand that's gonna tell me what letter I should draw on this button because if I is well then I'm on my third button because we go 0 1 2 so I add 2 to 65 I'm at 67 right and then I would get I believe C right that would be the letter again so let's redefine sorry I equals 65 and what I'm gonna do now is I'm gonna go right inside of this pair and I'm gonna say a I'm actually gonna say CHR sorry of a plus I now what this says is I'm gonna take the character representation of the number 65 plus whatever is so it's gonna take that number and it's gonna convert that number into the character that it actually is so that's how that works and now what we can do is go inside of our draw buttons loop and well we can start drawing this text on the buttons now to draw text in pygame what we need to do is create a font so I'm gonna go up here and I'm actually gonna make a new section I'm gonna call this fonts like this so fonts and then in here I'm gonna go ahead and I'm gonna make it font and I'm gonna say letter underscore font equals PI game dot font dot sys font like that and inside of here you can choose any font you want and the size that you want the font to be now what is the problem here PI game font sys font I think this is correct it is okay and for my font I'm gonna go with Comic Sans that's what I always pick from my font and for the size I'm gonna go with let's say 40 but we can always change this size after so essentially we're setting up a font by going PI game font sys font we're gonna store it in the variable letter font this is what the font will be and this is what the size of the font is so you can pick whatever you want here so long as it's a valid font I there is a way to look up all the pygeum fonts I don't remember how to do that but you're welcome to obviously mess and change this font around Comic Sans is just the easiest one for me to remember so that's why I always use it alright so now that we have that lets go to our drawing buttons and inside of our drawing buttons now what I need to do is actually draw the letter so instead of just having x comma y equals letter here because now letter is going to look something like this right it'll be X Y and it will actually have a letter because we're gonna have three things in our I guess we can't call it a para anymore in our triplet so we need to actually strip that out as well so we're gonna say X Y and then LTR which stands for letter is equal to letter so now we actually have the character that we want to draw so to actually draw that on the screen it's not super easy but I will explain to you how to do this we are going to first of all render this text so using the font we need to render the text that we want to draw on the button so I'm gonna say text equals and in this case it's letter font dot render you put the text you want to render which in this case is just that letter right then you put one which stands for antialiasing letter one and you put the color that you want to render it with so in this case I'm gonna put black and you can see it's showing me that suggestion here but that is what we need to do to render the fonts or text equals letter font dot render what we want to render the antialiasing which I always just put us one and then the color that you want to render it with now to draw this we're gonna say win dot blitz so we've seen wind up lip before and then inside of here we're gonna put what we want to render we actually want to render the text or sorry we want to draw the text and where we want to draw so we could draw it an X Y and in fact let me draw it at X Y and let me show you what happens when I draw the text at the same location as the buttons so let's run this and let's have a look here alright and we can see that these letters are not really where we want them to be right they are kind of hanging on the bottom right hand corner of all of our circles now why did that happen well the middle of each button is the X Y position right so when I draw at X Y what I'm really doing is starting to draw my my text in the middle of the button which means I'm starting at the top left of my text because that's how we draw anything that's kind of square which in this case is gonna be our text and it draws this way right because we just go the width that way and the height down we don't draw it actually right in the middle because we're starting to draw from the top left of all of this text so what I need to do if I want to draw this text in the middle of the button is use a little bit more math always fun to use lots of math so to do this is actually quite I don't want to say quite straightforward but we just say X minus so inside of here for our location we're gonna say X minus text dot get underscore width now get underscore width tells us how wide this image or this surface that we've just created by rendering this text actually is so it'll give us some number and we're gonna divide that by two now why we're gonna do the same thing so y minus tax not get underscore height so not width divided by two now the reason this works is because you have to imagine that where we want to draw these buttons right is right in the middle so to be able to draw them right in the middle we need to figure out where the middle is which we actually know it's X Y and then we need to kind of go backwards a little bit from the middle so backwards and up so that when we start drawing from the top lefthand corner of our object it actually draws the entire object in the middle we're essentially trying to find the position of the top left hand corner of our of our text right that's what we're trying to do so by divining the width of our text by two that's gonna tell us where the middle of the text would be and then we can just subtract that value and that should draw a perfectly so let's go ahead and run this and have a look here and see what we get and perfect there we go all of our letters are now pretty well perfectly drawn inside of our circles so you have ABCDE you know you get the point they're all drawn and they look pretty good so that is pretty much it for actually drawing all this stuff related to our letters and related to our buttons again I know this is complicated but since we want it to be perfect and we want it right in the center we do need to apply a little bit of logic and a little bit of math so now that we've drawn the button everything is showing pretty perfectly what we need to do next is actually check for collision with each of these buttons now unfortunately there is well there actually is a PI game collision check and kind of module I don't want to get into that so we're just gonna do this manually but since we're using circular buttons it's actually really easy to check for collision all we have to do is check if our mouse is less than the radius distance away from any of the center of the buttons because if the center of the button is here all I have to do is see if the distance of my mouse is further than the radius and if it is it's not inside the button but if it is if it's closer than the radius or equal to the radius then it must be inside that button because that is just how math works right that radius pretty much draws a line which creates that entire circle and if we're within that radius distance from the center of any button we've pressed that button so inside of the event here PI game mouse button down I'm gonna check every single button and see so yeah for every single button what I'm going to do saria's see if we've hit it so I'm gonna check if the mouse has hit that button so what we're gonna do is first of all I'm gonna change this to say M underscore X M underscore Y so essentially every time we press the mouse button down we're gonna get the xcoordinate and ycoordinate of the mouse then we're gonna say for letter in letters like this and now all I'm gonna do is find the distance between the position of the letter so the position of the center of this button which is gonna be X Y LT R equals a letter and we did this before so XY l TR equals letter now I'm gonna find the distance between the XY here and this XY now I'm gonna put that in a variable called dis which stands for distance and the way to do this is actually pretty straightforward we're gonna say math dot sq RT which means we have to go up to the very top of our program and import the math module so we'll do that right there we're gonna say the square root of the sum of the difference of the x coordinates and the Y coordinates sounds confusing it's really not what we can do is pick any coordinate we want so I'm going to say X minus M underscore X I'm gonna put that all in brackets so let me do another bracket here what is going on all my brackets are messed up okay so let's do a bracket there bracket here if I can type properly apparently not and then we're going to do two asterisks because that's an exponent and we're going to plus that with the Y minus M underscore Y to the exponent two now the reason it doesn't matter if we pick X or M X to the mouse position X the the actual position X of the button is because when we do this exponent both these values are gonna be positive right so we're essentially gonna add the distance from the X at the distance for the Y and take the square root and if you guys are familiar with I believe it's I don't know how you say this but it's like Pythagorean theorem I can't pronounce that whatsoever but you know what I'm talking about the thing with the triangle where you get the hypotenuse that's essentially what this is doing to determine the distance between two points so anyways that's what we're getting reading the distance between the mouse position and the position of the center of the button and then we'll say if the distance is less than the radius then we press that button so let's just print out for now the letter that we press so we can see if this is working so that's all we need to do for collision there's a few more things we're gonna check after but this will tell us hopefully if we've pressed the right button so let me rerun this PI game window and let's check it out and see if it's working all right so let me press the button and notice it says B T this says n o P looks to be working if I press right in the corner here that's not working I have to press right on the button and then it tells me what I pressed awesome so that's good that's functioning next thing I want to do is make it so the buttons disappear when I press on them to do this is a little bit more difficult not that much more difficult but what it's going to involve is adding one more thing to our letters list here so right now we're storing a bunch of pairs we're storing like you know 34 56 we're storing a letter so like a string a that would be a capital though and then that's all we're storing right so we're storing a bunch of these inside of this letters list a bunch of triplets that have the X Y so that's for the center of the button and then the letter what I want to do now is actually store one more thing with all of them that's a boolean value so I'm gonna go here and we're gonna start this boolean value as true now what this value is gonna tell us is whether the button is visible or invisible so essentially has it been clicked or have we not clicked it yet so all I'm gonna do to do this is go in to where I'm saying a letters dot append and simply add a field here and put true and now what this means is that we're gonna store four things in every single well now I can't call the pair but every single thing we're adding into letters right and that means we can check if we go down here to our draw loop if our button is visible so we add one more variable here because now we're gonna unpack for items rather than three and I'm just gonna check if visible before I draw anything so essentially that last value is telling us is the button visible is it invisible and we're gonna set that to be false so we're gonna change that value when we press down on the button so here we're only drawing the button if it's visible by default all of them start visible because we start by having that value be true and now when we check for collision what we get to say again is first of all okay so let's say X Y letter we need to make visible here now because there's one more variable we need to check for and we'll say if visible so essentially don't check for collision unless this button is visible there's no point in seeing if we hit it if we don't even see the button right and then if we actually have this happen so we actually collided with the button rather than just printing it let's actually set this visible to be false so let's say a letter 3 equals false the reason I can't just say visible equals false has to do with the way python works with lists and because what we're actually doing when we say X Y letter visible is we're taking all the values from here and just copying them into these variables I don't want to modify a copy of this variable I want to modify the actual variable so what I have to do is say letter 3 equals false and letter 3 is gonna be where that true value is held because remember we have 4 items right we have like 4 whatever does be a string here like a and then we would have true so what we're doing is we're saying letter 3 which would be where this true is and set that to false so now that letter doesn't show up anymore that's what this line is doing so let me show you what happens now when I go ahead and run this let's have a look and let's see okay so Y when I press it immediately that button disappears so that is how this works and that is the button collision button disappearing and pretty much everything we need to do for the buttons so with that that is pretty much it for this tutorial in the next video of course we're get into actually handling the word we're gonna get into displaying that text on the screen if you want if you lost all the other things that we need to make this game complete but this was definitely the hardest part doing all the collision doing all the math getting everything Center and now it's pretty much smooth sailing into the last video where we add all the kind of finishing touches and last functionality so with that being said if you enjoyed make sure you leave a like subscribe and I will see you in another YouTube video