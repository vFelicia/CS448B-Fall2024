hello everybody and welcome to video 4 in this pie game tutorial series in this video i'm going to be adding the finishing touches to this game making it a fully functioning game we have now implemented all of the physics and the logic to allow the players to move but we need something that tells us if we won if we lost well level we're on all of that kind of stuff so that is what we will do now before i go any further though if you have made it this far give yourself a pat on the back and go leave a comment let me know what you've thought of the series so far any feedback positive or negative is more than appreciated all right let's continue and let's get into this so we need to know levels that's kind of the first thing we need here the reason we need levels is because the computer is going to start off very slow and then it's going to get faster and faster and it's going to determine its speed by the level so what i'm going to do is make a class here and we're going to call this class game info now this is going to be responsible for exactly what it says the information about the game you're going to see why it's beneficial to do it in this way but rather than creating like 20 variables to keep track of all the stuff that we want we'll just do it in this class and then it makes our code very very readable so i'm just going to say levels is equal to 10. so it'll be a constant we're going to have 10 levels in this game if you wanted more well then you can increment this then i'm going to say define init under score underscore and i'm going to say self and then level is equal to 1 this is just indicating that we're starting at level one okay then we're going to say self.level is equal to level we're going to say self.started is equal to false indicating whether or not the current level has started we're going to say self.level underscore start underscore time is equal to none the reason that we're doing this is actually we'll do it at zero sorry is because we want to know how much time has elapsed in the current level that's something that we're going to do in here okay so now we're going to say define and we're going to implement some methods we're going to say define next level now what this is going to do is say self.level and then plus equals 1 and it's going to say self.started is equal to false because if we're going to the next level then we don't want to start the next level yet we need to wait for the user to do that then we're going to say define and this is going to be reset now inside of reset we're just going to reset everything so we're going to say self.level is equal to 1. we're going to say self.started is equal to false and then self.level start time is equal to 0 as well i think that's all we need to do then we're going to say define game underscore finished we have to spell finished correctly this will take in self and this will simply return self dot level is greater than self dot levels so if the current level is greater than however many levels we have then we have finished the game and then we'll say define and this is going to be start underscore level now all this is going to do is it's going to say self dot started equals true and it's going to say self dot level start time is equal to time dot time so that's why we imported time previously here i'll go back to this so that you can read it but the idea is we want to keep track of when the level started and then we can easily determine how much time has elapsed by checking the current time and subtracting it from this okay and then lastly we're gonna say define get underscore level underscore time self and here we're just gonna say if not self dot started then return zero so if you haven't started the level then no time has elapsed otherwise we will return self.level start time minus time dot time okay i went through that relatively quickly but that is the game info class you can almost see all of it right there pretty straightforward pretty simple but it's just going to make our life easier as we go through this okay so now that we have that what i want to do is kind of make something pop up on the screen when we first start the game that says like press any key to begin level right so every time a new level happens i want to say like press any key on the keyboard to start level that's all i want to do so the way i'm going to do that is i'm going to go right after my draw here i'm actually going to put another while loop now this while loop is going to wait until the level starts and once the level starts it will get out of it and then allow all of this stuff to happen so you won't be able to move the car the computer won't move until we start the level so let me just go down here so i have a reference on my other screen and this is what we're gonna do wow not and then this is gonna be game underscore info dot started now we need to define game info so i'm going to say game underscore info is equal to game info like that and while not game info dot started so we've not started the current level we are going to blitz some text on to the screen so i'm going to say when actually i'm going to do something else which i'm going to describe now so what i want to do is write a function that is capable of writing any text onto the screen directly in the center of the screen it's a very useful function to have so to do this we first need to define what's known as a font so if you want to write text onto the screen in pi game you need a font so what you're going to do is at the top of your program you need to make sure you do this at the very top you can say pygame dot font dot init you know obviously after you import pugging then what i'm going to do is i'm going to actually define a font object this font object is what you can then use to render text with that font so i'm going to say main underscore font is equal to pi game dot font dot sys font not system font just sys font and then inside of here there's a bunch of options but you guys know that i always go with comic sans and then you can put the size and for now i'm going to go with 44. now this is the text size change this obviously to whatever you want 44 is a good size though for like some title text which is what we're going to have okay so now we have our font this will only work if you initialize the font so if you're having an issue just make sure you init the font first and now that we have the font we can use that to render some text so i'm going to go in utils.pi i'm going to make a new function i'm going to say define and then this is going to be blit underscore text underscore center and this is going to take in a window it's going to take in a font and it's going to take in some text all right so inside of here i'm going to say render is equal to font dot render and then we're going to put the text that we want to render the antialiasing which is 1 and then we're going to put the color which is going to be white so 255 25 235 and in fact let's make it let's go with like 200 200 200 just so it's gray because we have white on the screen already actually is this going to give me white i'm not sure what this color is going to be you know what we'll experiment with 200 200 200 and we'll see what that gives us in case you're curious you just put text you want to render you put antialiasing just always put one for this i won't really explain it just you always want one here and then you're going to put the color and then you can actually blit this text onto the screen just like an image say wind.lip render and then we need to put the position we want to render this at the top left hand corner by the way that's where you're putting here so what i want to do is i want to render this at the dot get underscore width why that fill all of that in okay that's fine divided by 2 and then this is going to be subtracted by and this is going to be the render dot get underscore width over 2. so what this is doing is let's go to paint and i will show you so let's say we have our window okay we obviously have some width and we have some height and then we have the text that we want to render and i want my text to be here now i need to calculate this position not this this would be easy enough i just take width over 2 i want this so the way you do it is falling this is width over 2 right w over 2. so you subtract from this half of the text width pretty straightforward but if you just subtract half of the text width from half of the screen width you get the top left hand corner position of where the text should be drawn from so that it's going to fill the entire screen and be directly in the center like that now you can just do the exact same thing in the height and well that will give you the coordinate for y that you want this to be at right so we give you it you know around here okay actually it would be probably close to around where i have it right now hopefully that makes sense but that's my quick paint explanation and let's go here win.get underscore height over 2 minus get underscore height over 2. okay so it filled that in for me that is great so that's going to render my text on the screen in the middle we're going to use that a few times that's why i wrote that now we want to import that so from utils import blitz text center and then we're going to go down to our where were we our while loop inside of here and we are going to render this so we are going to say blit text center like that and we're going to make an f string only available in python version 3.6 and above by the way i'm going to say press any key to start level and then inside of here i'm going to say gameinfo.level exclamation point okay now that's the text that's actually the last thing that we're going to pass the first thing is win the second thing is our font which is main font and then our text if you're unfamiliar with f strings the way they work is you can embed expressions directly inside of curly braces you just put a lowercase or uppercase f before the string so now whatever the level is we'll say press any key to start level one two three so on and so forth okay now win needs to be capital forgot about that and now that we have blit that text onto the screen what i'm going to do is do an event loop i'm going to say for event in pygame.event.get i'm going to actually copy this seems inefficient to rewrite this but it's simpler than trying to come up with a cleaner way essentially and i'm going to still have this kind of quit clause except instead of run equals false i'm just going to say pygame.quit okay and then here i'm going to say if event dot type equals equals pi game dot key down this means you pressed any key down then what i'm going to do is say game info dot start level so we're going to call that start level method that will start the current level which means this while loop will now exit and then we will go on and well we will have the level now i'm wondering if i'm missing anything i am the one thing i'm missing is i need to manually update this display here so pygame.display.update to ensure i actually show this because we're going to be skipping this draw function hopefully that kind of makes sense but we're drawing everything right and then we have this while loop and this is only going to run if we haven't started the current level so if we haven't started the current level we put this text over top of everything in the middle of the screen and then as soon as they press the key down we're going to exit out of this while loop and then start the game and the current level will start and then if i go here let's just make sure start level looks good inside of this class okay all good so let's run the code and see what we get okay notice says press any key to start level one maybe we want to move it up a tiny bit because it's kind of hard to read when it's over top of the white but for me that's fine press any key and then notice the car starts going and we can start moving all right there you go so that is how we start the current level so we will continue in one second we need to quickly thank the sponsor of this video and this series which is alco expert i'll go expert is the best platform to use from preparing for your software engineering coding interviews they have over 160 coding interview practice questions mock interviews a data structures crash course all kinds of other great features of course i am an instructor on the platform so you know there's going to be some quality content and well with that said you can check them out from the link in the description and use the code tech with tim for a discount on the platform now that we have that i just want some text in the bottom left hand corner displaying the current level displaying your current velocity and displaying the amount of time elapsed in the level which is actually pretty easy to do so inside of the draw function now what i'm going to do is also take in my game info so now i'm going to go inside of draw and i'm going to start rendering some text and drawing some stats onto the screen so let me go to my code here just so that this would be a bit faster for me to code out and i'm going to start by saying that my level text let's go like this level underscore text is equal to and then this is going to be main font dot render and i want this to say level and then game info dot level like that and then i want the antialiasing 1 and the color of white 255 255 255 okay now i'm going to render my level text so i'm going to say not render so i'm going to display it on the screen window blit level text and then where do i want this i'm just going to tell you the position but you can feel free to to mess with it all you want i'm going to say 10 and then i'm going to say height minus and this is going to be level text dot get underscore height minus 70. this is because we're going to put two other things below this now the reason i'm doing this is so that's dynamic so if i ever decide to change the height of my screen then i don't need to change this right here because it's based on the height of the screen which is height and the height of whatever this text is here so again if i change the height or sorry the size of the text i won't need to modify anything this will just automatically adjust itself and put it in put itself in the bottom lefthand corner okay so i'm just going to copy this now because we're going to do the same thing for velocity and time so i'm going to say time text time text and this will be time text like that the minus here is going to be 40 because we're going to have 30 pixels offset that is something that we manually would have to update but that's fine and then here i'm going to say time colon and it's going to be equal to gameinfo.getleveltime like that okay that looks good to me now let's copy this and we're going to do the same now with our player velocity just so we can see how quick it's going i just figured that would be a cool stat to add so now we're going to say vel and then this actually let's add a second here too let's add an s just so it says seconds but for velocity i'm going to go with this is going to be player car dot velocity and then we'll go with px per second standing for pixels per second just so we have some unit there we'll go with white again now instead of time text this is going to be called vel text so we'll just change these all to be vel so this is going to be vel and then rather than minus 40 we're going to go minus 10. so 70 40 10 the pattern is 30 less every time all right there we go that's it for drawing that text on the screen now let's run the code and let's see what we get uh draw takes four positional arguments but five were given good call i forgot to import my game info or to add this as a parameter so do that and now we should be good remember i passed game info into the draw function here okay let's run the code and notice that now we get level one times zero seconds velocity is zero pixels and when i start this now notice we have our time now that's kind of ugly and it's negative which means i messed something up so we're going to have to fix that in a second but then you can see the velocity gets updated here as well great so that's fine but what i want to do is i want to round first of all the velocity so let's do that let's go to my velocity and let's just round this to one significant digit so round and then comma one and then let's go to our game info class here and let's see where i messed up so i did self.level start time minustime.time the reason this is incorrect is because time.time is going to be after the start time so i need to flip this around and say time dot time minus that and then i will as well round this but i'm just going to round this to zero places so just do a whole number because this is going to give me the displacement in seconds or the difference in seconds okay so let's run this now and let's see what we get and now notice that the velocity is all good and so is the time perfect there you go okay so that's all we need for those stats okay so now that we have that we have the velocity we have the time we have the level showing up what i need to do is make it so that my computer gets faster every time i beat a level so what we need to do is go inside of our computer car here and we need to write a method this is going to allow it to update its speed based on the current level so i'm just going to say define next underscore level and what we will do is say self now when we go to the next level what we need to do is reset this car now we could manually call reset outside but the first thing we'll do is say self.reset like that so that this is going to go to its start position its velocity is going to get updated all of that however after we reset the car we then need to change its velocity based on the level so i'm just going to say level inside of here so i'm going to reset the car i'm going to say self dot bell is equal to and then we'll go with whatever the self.max bell is that was passed plus and then this is going to be level minus 1 multiplied by 0.2 now 0.2 is how much i want to increase the speed of this car every level we could put this in a variable i'm just going to hard code it in for right now you also could change this and make it something like 0.5 the one thing to keep in mind is you do not want this car to ever be faster than the player car if it's faster than the player car there's no way the player will win it's just impossible because this car will take assuming you did a good path the best possible like line around the track and so there's no way the human's going to be able to beat it especially because it doesn't have to worry about acceleration it just starts at the maximum speed so you need to make sure that whatever you're incremented here is that that multiplied by the number of levels that you have plus the maximum velocity you start with is not greater than the player's speed you could make it the same but even if you make it the same then the player still can't win so this is fine i'm saying level 1 which means on the very last level i will have 9 multiplied by 0.2 so 1.8 so the speed will be 3.8 so it'll be 0.2 slower than the player hopefully that is good let me just make sure that that all makes sense yes and then the last thing we need to do is say self dot current point is equal to zero although that should really go inside of the reset method so where is reset ah reset was in the abstract class okay so we can leave self.current point here all right that should be good now we just need to see where we should call next level so what i'm going to do now is go to my handle collision handle collision now needs to take game info as well and so when we call handle collision we need to pass game info and now we're going to start kind of working on what happens when the computer wins or when the player wins so if the computer finishes we are going to reset the player card reset the computer card that looks fine okay and now we go here to when the player finishes well if the player finishes then rather than computer car.reset we're just going to say computercar.nextlevel and we're going to pass game info dot level but first we're going to say game info dot and then next level like that so we're going to increment the next level for game info if the player has one we're going to reset the player car and then this will reset the computer car and change its speed for the next level so that should be good now by doing this it means that this will automatically trigger for the next level because the game will now not have been started we'll be waiting for the next level to be okay that's fine the only thing we need to handle now is if the computer wins so if the computer wins we need to put some message on the screen saying hey you know you lost whatever and then we need to reset the game so we'll actually go game info dot reset and before we do that let's just put some text on the screen so let's say blit text center and then this is going to be what do we want to say here you lost exclamation point and we'll do this on the window and we'll pass the main font okay then we need to manually this is going to be capital win like that we need to manually delay the game the reason we need to delay is so that we have time to see this text because what's going to happen is we're going to show you lost we're going to delay for however many seconds you want i'm going to go with 5 seconds and then as soon as that delay is done it's going to automatically restart the game for us so i'm going to say hi game dot time and then dot wait and you put milliseconds in here so 5 000 milliseconds is 5 seconds so we're going to do that okay that should be good the only other thing we need to handle is what happens if the player wins the game but we're going to do that here so after we move the player and after we move the computer and after we handle the collision then we're going to say if the game info dot game finished we want to do a very similar thing to what we just did here we want to reset all this stuff so we'll do that and we want to blit text you won the game like that okay so that's actually all we need now i'm going to get rid of this print statement and i believe that we have just finished the game now obviously i'm not that confident because we have not tested it right now but scrolling through everything looks good and i think we've just handled everything that we needed to and i'm also realizing how much code we have here so again a massive props to you guys if you stuck around because this is a lot of code to digest over video all right let's run the file and let's see if we can win a level here okay let's press any key to start and now mine i remember that the guy my computer did i start i'm at a speed of two or do i start them at a higher speed let's see what speed he's at uh yeah it's f4 okay so i need to put my computer car speed to two otherwise i'm gonna have no chance here okay so let's run the code and let's see that's better okay so now let's try to get a win here and we'll see if the levels are working okay look at this driving skill nice nice all right almost there see if we can finish before the computer i'm hoping so and there we go okay so level two and it says press any key to start level two okay so let's do level two let's just make sure it goes to level three and then i will kind of fast forward as i get to the final level and we'll make sure that this actually works if the computer wins and if i win okay but let's just get through level two first though to ensure that we're going to get on to the next level okay almost there i forget what the time was on the last one i should have kept track of that then i could have seen if we were going faster this time oops okay it looks like there's an invisible wall there that's i guess that's gonna happen and let's try to get up here and okay press any key to start level three we're on level three so now what i'm gonna do is let the computer win i'll fast forward through that assuming that works then we'll see and make sure that the game actually ends when we hit level 10. all right so here we go home stretch of the computer you can see i haven't really moved until now let's see what happens when the computer wins and nothing okay so that's actually a good thing to run into because oh it says press any key to start level one so i guess it lagged for a second uh okay let's see what the problem was here i'm guessing the problem has to okay this makes sense so what happened was we delayed for five thousand seconds or five thousand milliseconds so five seconds but we forgot to update the display to actually show this message so i have to say pygame.display.update and now this will work i'm not going to test it i know that this will work now and everything will be good because it did actually reset back to level one so with that i believe everything should be working i'm not actually going to go through and test the fact that the player wins works properly i have faith that i've coded this correctly especially because i have the finished code on my other side and these two pieces of code are identical although if for some reason it doesn't work please do let me know i'm sure the error is very easy to fix if there is one although i i doubt there is all right so with that said i'm going to end the video here i just quickly want to thank everyone who got through all of this i hope that you learned something from this i hope my explanations were decent enough for some of this complex code it is difficult to do a video where you know you have about 300 lines of code that's kind of what we ended up having here right tons of code lots of code in different files as well all kinds of classes all kinds of functions we used a lot of different python features so again hopefully you learned a lot and you enjoyed this video if you did make sure you leave a like subscribe to the channel let me know you want to see for future content and i hope to see you in the next youtube video