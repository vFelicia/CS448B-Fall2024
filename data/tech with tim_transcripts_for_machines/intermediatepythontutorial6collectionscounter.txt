hey guys and welcome back to another YouTube video so this is the sixth video in my Python intermediate tutorials in this today's video I'm going to be talking about collections and more specifically counter which is a part of the collections module so what is the collections module pretty much it's a built in module in Python that's going to allow us to have different kinds of data types so that we can store information sort through information and do some cool things these are extremely useful on the second I found out about them I started using them all the time because a lot of the stuff that would usually take you a few four loops or a few lines on you can do in one line or two lines with these new collection types so I just was first off and start by saying that in Python it has something called containers so containers are pretty much a data type or an object that's gonna store multiple objects so it's like a container like a list is an example of a container a set is an example of container a dictionary and a tuple as well these are the four main ones with Python and in the collections module they introduce five new ones which are similar to these but they all have their own methods and cool things you can do with them so the one I'm going to talk about today is counter but the other ones are listed here DQ named tuple ordered dictionary and default dictionary you can kind of get an idea what some of them aren't by reading them but let's get into the counter one for right now okay so first thing we need to do whenever we are using collections is we need to import it so this first line up here is unnecessary but I just did that to show you and we're gonna import counter from collection so we can reference it directly without doing collections dot count you okay so I'm just going to start by creating a new counter so in size C equals counter now when you create a new counter what goes in here as the arguments can just be any I want to say that collection data type or any container so for example you put a dictionary set tuple you can put a list and you can also do something which is weird with these keywords I'll show you that in a second so for example I could create a counter like this by just putting a string and it's gonna count all the letters in the string and return them to me and I'll show you that in a second I could create another counter where in here I have a list so it's like a a E see and let's do one more see you like that I could to put a dictionary so I can do it so I like this I'll just make a small loan so we don't take too long whoops like that b2 and you can also put these keywords which is what I was talking about it's kind of cool because you don't have to type out or like use a for loop to create a list like this I could do something like oops cats equals four dogs equals seven like that and I can continue on with keywords and I don't have to actually put the quotation marks around these I can just name them exactly what they are so let's just go ahead and start printing some of these to the screen to see what actually happens when I create a new couch object and what does that look like in Python so we'll just print all these just give us an idea of what they really are okay so there we go so it says we have a counter object it is its own object it's not like a list or dictionary it's it's own thing it says a we have to I believe this is an L we have 2 G 1 D 1 and then same thing here ABC dogs cats so you can see it looks like a dictionary in terms of it has a key value pair but it works a little bit differently so now if we want to reference a specific item which is typically what we want to do from our counter we can just put the square brackets and put the name of the item of the key so in this case I'm gonna put cats and you can see now we get 4 as that's the direct value related to cats and something cool with this counter and a reason why I use it specifically is I can put an item in here that doesn't exist in the counter it doesn't have a key set and that will actually not return an error like might happen with a dictionary so for example I put a key like I don't know let's see pet then it just gives me 0 instead of returning an error so if I were to do this with the dictionary I'll say D equals like I don't know cat 2 and then I tried to do D pet like this and get the value we get an error because pet the key pet does not exist in our in our dictionary okay so let's move on to some more methods and how why these are extremely useful so we can see here one of the methods that we can use is we actually just list all of the elements out and this is useful if you want to like some something so let's just say list and then see doc elements like that and what this is going to do if I print it to the screen is it simply just gonna print out all of the elements in our counter so we say they had cats cats cats cats dogs dogs dogs like that and since here we've said cats equals four dogs equals seven then it prints it out like in a made list with that many indices which can sometimes be useful I'm just gonna change this to be named E so that we can now print out the one like this with a1 b2 and you can see we get a BB like so I hope if I do the same thing I'll change this to e we print it again then again we get another list that just has all of the elements in it so that's one useful method C dot elements another useful element or method sorry is most common now this one by far is probably the most useful ones and you can simply just type this so the name of your counter object and then dot most underscore common and then in the brackets here and put how many elements you want so if you wanted to find the number one most common element you'd put one if you want to find two you put two so let's print the subscreen see we get so and you can see we get the most common elements are a and C and it actually also returns us at out of those elements as well so it says a which occurs two times and C which occurs two times and that's returned to us in a tupple or to pull however you want to call it which is really useful okay so now another one we're gonna use I'm just gonna copy something I have open here just to save us but a time in terms of creating encounter objects so I'm gonna delete all this and I'm gonna make one counter which is equal to a or C and then I'm just making a list which is D and a BBC like this okay so you can actually do something as well with these counter objects you can subtract counts from them from using other integral objects or you can add like the count of objects to them so one method is called tract oops like this and it does pretty much exactly what it it says so we're gonna take this counter object this has to be called on a counter object by the way it says with these counts and we're going to subtract whatever the counts are from D of similar items so we have one A two B's and a C so if I do this and I print just the screen we should let's do a quick calculation here get a is equal to three B is equal to 0 C is 0 and D is still negative 2 none oh it's because I didn't convert this to a list sorry about that let's do this maybe not entire brecht is not integral all right just give me a second guys there is a way that we can oh let's cuz we're doing this so C dot subtract doesn't actually return anything we just have to print see after we call that method okay so there we go and we do get what we had there okay so yeah C is negative 1 because 0 minus 1 gives us negative 1 and there we are so it is working exactly like it should be okay the next one is update so I'll run this now C dot update and this is the exact same thing of subtract except it's simply just gonna add the count of whatever interval object you give it so in this case I'm gonna put D and note here that I'm using a list but I could be using like a dictionary I could be using another counter object I could be using a set a tupple whatever you want to say there it's still going to like work for update so let's see here and I didn't print C let's do that and there we go so we went originally so we changed our counter by subtracting and then we just updated it by adding so it should be the same as our original counter which it is ok so that's working well the next one that I'm going to talk about now is clear this one does pretty much what it states so if you see here we don't see dot clear and then I'll print C to the screen and all it's going to do is just remove all of the counts so we now have an empty counter object that we can use to count something else to add to to subtract so on okay so that's it for the methods pretty well there's one or two more but I don't find them very useful so I'm not gonna right now but there's something cool that you can do with these counters and there's a few operations that are applied to them so you can actually add counters using the plus sign so you do like this C plus D you can do C minus D you can subtract them you can add them and then the two operations which you wouldn't necessarily know intuitively is you can do something called intersection and union of counters so let's just first show what happens when I add these two counters together so C plus D oops and this needs to be a counter now because this isn't gonna work if it's a list there we go so make that a counter and i'll print C minus D and that will print another one after that so if I add them and subtract them you can see that it works like this so when I add them we get the counts I don't up like this and when we subtract we get it subtracted as well now some of you might be wondering here why we don't have the elements B C or D shown in our counter and that is because if the element count is less than zero or equal to zero it's not going to be shown in our counter when we do these operations by adding and subtracting so because of that you can see like with the why that happened because B is 2 here and we have to be so I created 0 C is already 0 and D was negative 2 so when we subtracted it's not going to bother showing those in our new counter now the next operations that we can do is something called Union and intersection so the first one I guess I'm gonna show this intersection and the way that you can think of intersection is like the minimum elements in each of the the list so we're gonna have C intersecting with D in this case we should get a equals 1 B equals 2 and C equals 0 D equals negative 2 so let's just see if this works and here we go we get B is 2 is 1 and we're not showing the other ones again because they are like they're equal to 0 or less than 0 so they're not being shown and this is the and sign is what I'm doing to do this intersection between the counters the next one that we can do is called Union and this one you can think of the max elements shown in each of our counters so it's gonna take a equal to four because that's our max it's gonna take B equal to two there's not some max between here C equals one and then again it shouldn't be showing us D because that's negative tip so there we go we get a is four B is 2 and C is 1 so this is pretty much going through looking at the counters and just taking the maximum element whereas before when we did our intersection it's taking the minimum shown of all those elements so that has pretty much been it for this video and counters from the collection there's a few things that you can do with them as well a few other methods if you want to learn about those just go to just look up collections counter Python you can read through the documentation and you can look at some more examples that I didn't show here specifically other than that I hope you guys enjoyed the video if you did play please make sure you leave a like and subscribe and I will see you again in the next one