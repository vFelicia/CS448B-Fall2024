hello everybody and welcome back to the golang tutorial so in today's video what we're going to be doing is talking about the FMT module specifically the two methods sprint f and printf now pretty much what those are is print a formatted string ant pretty well save or create a formatted string and you've seen this actually before in one of the previous tutorials that I did where I wrote something like FM T dot print F and then notice that's because I imported FM t first of all that's important I did something like percent T and then I put a value say like 10 here and maybe you guys can guess what's gonna pop up so let me actually run this from my console down below but what that does is actually print out the type of this variable so you see it printed int down in the console there but this is what printf allows you to do so essentially we could write something like Hello % T so whatever string we want and then embed these little formatter things with the % put a bunch of variables we don't just have to put 1 in fact I can put another one here let's look at what percent V does and let's run this and we get hello into 10 so what percent V does is actually print the value of the variable but the idea being that this is how we format strings and kind of include variables in our output to the console now that's what printf does it prints out this formatted string and I'll show you what all these little formatters are in just a moment I have a cheat sheet here that we're gonna go through but what sprint F does is actually let us store that value in a variable so we can do something like var x equals actually var X string equals FM t sprint F and then inside of here we could put the same thing we had here and I would simply store whatever this value is which is hello into 10 inside of this variable X right and that's the idea behind that so that is pretty much how the sprint app and printf work now let me show you a few for matters and we'll just go through a bunch of examples here so these are basic type and value those are kind of default ones but let's look at the cheat sheet so we can see that we start with general I've already shown you these two so value and type the value is just whatever the value of that variable is or the statement that you put there will be printed out 2% signs is actually a literal % so you can't just print a % by doing like percent like that sometimes you'll run into an issue if you try to do that so if you do 2% signs that will actually make sure you print 8 % so that's why we have that um but yeah all right let's see if this loads back up okay so for boolean x' we have % t what this will do is either print out a true or false value depending on the value of the variable that you actually put in this output so let's look at an example of percent T in lowercase so if I go percent T notice that's different than the capital % T and actually let's just leave the value 10 here and let's take a guess at what's gonna happen in the console so let's look here and see and what it's gonna happen we get hello and then whoa okay some crazy thing that doesn't seem to make any sense why that's because we cannot format the number 10 as a true or false value but now if I actually change this to 0 and I run this so go run tutorial go what's gonna happen here same thing 0 doesn't work so I need to either put a boolean value here so something like true so if we look at true we can see this we get hello true so that's how you format be true or false right now of course you could just like do true as a string if you wanted to do that but sometimes you want to print out a boolean so in that case you use % T and that will format the boolean appropriately for you ok so now that we've done that lets go down to integer so integer has a few examples here that essentially let you pick what base you want to show when you print out the integer so we have % B o D and X 4 2 8 10 and 16 was the basis of binary octal based on numbering system so decimal and then hexadecimal which is 16 I'll show you some examples of how these work they're pretty straightforward we'll just keep leaving I'll show say number like that and now we'll do % B let me show you what percent B of a thousand 24 is hopefully some of you guys can guess what that value is actually let's do a thousand 25 just to make it more interesting and what am i doing let's run down here so go run tutorial dot go and see that this is actually the binary representation of a thousand twenty five now let's just change this like 3435 see what number we get here let's have a look and one zero whatever a bunch of this gibberish okay so I'm gonna change from binary now to octal which is oh and let's just have a look at what we get there we can see this will be a little bit shorter than previously so 6 5 5 3 nice let's go from octal to decimal and see what happens here we know that this is gonna give us actually the same value and finally let's go to hexadecimal which was it H knows X my bad and let's run that and see what we get and there we go we get D 6 B now something to note here if you actually want to use capital letters you can do a capital X and that will use capital letters for this so you see a capital D and then B instead of lowercase for when you're doing the hexadecimal formatting so something like that but that's the basics for integers so again this stuff is pretty easy it's just a matter of kind of almost memorizing some of these things or knowing where to look to find all right so now we're getting into ones are a little bit more complicated we have floating points so floating points um we have floating point numbers in computing sometimes it's hard to represent them and we don't know what precision to use and things like that so we have to be careful when we're printing them out in what little formatter we want to use so if we use % e that will actually print it out in scientific notation so if you have a scientific calculator and you do some crazy math equation with really long numbers what you'll see is that you get that little E at the end and it shows like E Plus 15 which is supposed to be the exponent or like negative 15 or whatever it is right that's what this will do so it'll actually put the little e in there and scientific notation now the standard is typically % F or capital % F now this will print the decimal it just won't print that will eat the exponent which comes with scientific notation and then % G is actually used for very large exponents to make sure that there's not a miss representation of them when we print them out and I'll show you an example of all these right now so you understand how they are so let's actually change this to what this I got a look here so I don't forget percent e and let's just do something like two point three and a bunch of random digits and see what we end up getting here so let's run that go down here and we can see that our output is two point three seven six three seven e + 0 0 right so if you understand scientific notation you'll understand why or what that means let's shorten this a bit and see if we get something different let's have a look we get + 0 0 again so I don't know the all the scientific notation stuff that and how that works but that's what that does for you so I figured I'd show it to you and now let's do decimal no exponent so if I do % F like that and notice that % F + % capital F actually do the same thing so doesn't matter which one you use there we just actually just get the representation of the number but notice it cuts off after a few digits because it can't represent these last ones that we're trying to show here so if we actually want to make sure that we're showing all of these we have to talk about something called width and precision which I will tell you in a second okay so that's present F but now let's look at percent G and see if this will show us the whole thing so let's have a run down here go run tutorial dot go and notice that shows us all of that so when we're dealing with large exponents or sorry large decimals which this would be then we need to use something like percent G to represent that whole number so that is kind of the trick there okay so those floating points will talk about width and precision as second but let's get through strings so when we want to format strings we can use percent s or percent Q this one's pretty straightforward so if I make a string say oops always do this I let's say like Tim here and I change this to percent s what this will do is just print out Tim it'll just take Tim and say number Col and Tim let's look at it down here we get number Tim now if I change this to Q which is actually the other one for string so this is a double quoted string what this will do is print out Tim but it will include the double quotation marks in the output so let's have a look here go run tutorial go we get number and then Tim surrounding quotation mark so that's something that's cool and it makes it a lot easier if you actually want to quote something because here I can't just like put quotations around the there's gonna be an issue with that okay so now that we did that let's wait for this to load up here let's talk about wit and precision so sometimes we actually want to Pat our strings so that there's certain length so say we're printing like five or six different things we want them all to be centered or in the same area so what we can use is padding now these two sections really should probably be the same because they're they're very similar but the idea is that when we want to make a string or something a certain length we simply precede the formatting character here with some number that says how long we want it to be so in this case this would be the default width and default precision because we just put % F which is for floating point numbers but if we put % 9f this will make it nine wide so from the left side of the screen it will make sure that it's nine wide characters and it will do that by simply padding the front of our string with spaces so an example would be something like this if I had like Tamm and I want it to be nine wide then I would add one two three four five six spaces then I would add Tim which would make this nine wide that's what the padding means assuming I did be correct on spaces so that's what that means now we'll talk about precision so if you do a dot followed by some number preceding the format character here what that means is we're gonna make this precision too so essentially round to two decimal points if you just put a dot that means just round that number off to a whole number so don't include the decimal points and if you do a number and then dot some precision F that's gonna pad it to that width with precision of this for whatever that formatting character is okay so let's just have a look at an example here so let me get rid of that and what I'm gonna show you now is if I do something like say nine Q doesn't matter if this is f or not and I put Tim what this is gonna do is pad Tim to be length nine so it's actually see how that works so if I run this we get let's see number Tim and you see that it actually made it nine wide or made it yeah nine wide from the left hand side now if I wanted to make it justified on the other side so it's a set number blank is cool or something like that I know this doesn't make any sense but if I make this negative what this will do is make it left justified so it will be padded from the other side so let's look at this and see what we get a number Tim is cool notice the spaces are here not on the other side now let's have a look at floating points because I wanted to show you the precision so let's say we have a long floatingpoint number something like that we want to round it up to do decimal points I could do something like dot 2f or say yeah dot two I think that's actually it's and this will round this to two decimal points so let's have a look if I can get down here let's run go tutorial dot go and we see three point four six is cool so we just rounded off notice that this is five but it rounded to six and then if I just do dot F let's see what that does and we get three is cool so it just rounds it actually to the whole number so those are pretty much all the things I want to show you know the last thing I guess is that we can use this zero so that will mean that we actually pad with a digit so if I change this to say like zero D and I say like zero seven D what this is gonna do is actually pad with the digit zero to length seven so if I change this to say like forty five let's have a look at what this does here we should notice that we pound with the digit zero so we can see that we do that padding but we fill with zeros and subspaces yeah so that is pretty much it I mean I showed you what's printf does as well it's pretty straightforward like far let's just say out string equals and all I have to do is really change this to say sprint instead of print so let's just go SPR int F and that will actually just store the value in the variable so I mean I'll show you that there's nothing wrong with doing this but if I decided to out declare to not use okay well if I print this out so let's do fmt dot print F or actually let's just println and we'll print out like that and we run this then we should see there's no problem and that will actually print out the formatted string so we stored in this variable which means we could use it for something else and then we just print the line outs now one last thing to say there's a few special characters that called escape characters that we can use in our strings the only two I'm gonna show you here backslash n backslash T backslash n stands for carriage return or new line that's equivalent to hitting enter on your keyboard so what will happen here is this will automatically make a new line so we'll actually just just have a look at it here I guess go run tutorial go and you can see that it breaks and it does that new line in our string now what percent T does is actually a tab so that's a tab character I believe that's just four spaces but if I run this you should notice there'll be more spaces now than they would before and we get that tab and tabbing over so I think with that that's all I want to show you this has been the FMT module a little bit of printing and formatting which are going to come in handy later on in the next tutorial we'll talk about scanning and getting user input