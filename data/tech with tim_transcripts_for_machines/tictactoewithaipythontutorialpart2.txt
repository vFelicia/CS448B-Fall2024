hey guys I was just editing this video I want to make a quick introduction for the second part just because there is a few errors that I run into near the end of this video so it is really important you guys watch the whole thing because I do fix those errors at the end and if you don't watch it you're not gonna find the fix and you know wonder what was going on anyways I hope you guys enjoy the video if you do please make sure you leave it like and subscribe and yeah so now we're gonna move on to I don't know I would say the more fun stuff which is the AI and this is where things get a little bit more interesting and maybe slightly more advanced because what we've done right here is pretty well just basic coding just running through a bunch of different functions so I'm just gonna go into my main function here now and what I'm gonna do is I'm just gonna edit this this little section that I've written here now this is just because the way that I'm gonna do things is our computer move is gonna return a move to us so I what I want to say is I want to say move is equal to computer me okay okay and then after that we're not gonna print the board yet because we want to check something I want to say if move is equal to zero and this is gonna mean that our computer move function was not able to come up with a move either because the board is full from the player moving into the last position or for any other strange reason we're just gonna say print tie game like that because if there's no more moves that the computer can do then it must simply be a tie game otherwise that means we've got a move that wasn't zero so it was one to nine we're just gonna insert that move into the board and in this case what do we call it the letter insert that letter or whatever in this case our computer is gonna be a stubby board like so and then we're going to print a little message just telling our user what happened and this is also just to break things up so it's easier to see the the grid that we're gonna print out and I'm just gonna say computer place and and then in this case we'll do two backslashes again and OH in position , move and then after that I'm just gonna do a because why not all right after we do this then we're gonna print the board because we want it to wait until we've inserted the letter into the board before we print it out and then that's pretty much it for our computer move little I don't know series of instructions here so now we can move into the actual AI so pretty much the way that this is gonna work is we're gonna follow a really basic algorithm and the algorithm is gonna have five steps the first step is gonna say is there a move that we can do that's gonna result in us winning if there is let's take that move because that means the game's gonna be over and we win as the computer the next step is gonna say okay so we can't win on a move is there a move that the player can do one their next turn that is going to make them win the game if we find that move then what we're gonna say is no we're not gonna let you do that we're gonna block that move by moving into that position after that we say okay so I can't win the player can't win so it's not as important where we move so we're gonna decide on we're gonna pick a corner to move to all right if there's no corners to move to they've all been filled up we're gonna check if the center's been taken if the center has not been taken yet we're gonna take the center and then after that what we're gonna do is we're gonna move to any open edge and and the edges I mean are pretty straightforward then off the corner they're not the center right so that is the five main steps I believe was that four or five I don't know four or five main steps that we're gonna follow as the computer we're gonna run through that algorithm to determine where we're gonna move so the first thing I want to do is I just want to make a list of possible moves and possible moves is gonna be any empty square still left on the board so to do this I'm just gonna say possible moves is equal to em to leave it did like a little four thing here I'm just gonna have a look at my old code because I did it pretty efficiently yeah so I say X 4 X N or X 4 X letter and numerate bored now he might not know what all this means but I'll explain it in one second if letter equals equals blank and X does not equal zero okay so this looks kind of confusing but pretty much what we're gonna what we're saying here is we're running a for loop and I just do this all in one line just cuz it's faster I'm gonna say 4x letter so this is gonna be our indicee and this is gonna be the actual value in enumerate board so what a numerate does is it gives us all the indices and the actual values of the things in our list so it for example in board it's gonna give us something like 0 blank space 1 X 2 O and that's gonna be stored appropriately an X and in letter and then we're gonna check and this is just in the same line I just write it cuz it's faster if the letter is blank so meaning we don't have something there and the indices not 0 because we we always have that blank in to see at the beginning of our list so we don't want the computer to think that they can move into the 0 position because that's not allowed so that's why I just put this in X cannot equal 0 so this just checks the indices of all the possible positions we can move into that aren't already filled and then it puts it in a list so it'll generate a list like 1 4 or 5 6 or something like that whatever positions are aren't yet full ok so that's what possible moves does now after that I'm just gonna set a default move variable here equal to 0 so that when we get to the end of our program if we haven't yet found a move to do we're gonna return the move which is going to be 0 and then we're going to say taiking in our program ok so now we have to go through the first step and the first step was to check if there is a move that we can do that would result in a win now there's a few ways that you can do this the way that I've kind of figured out um is the most efficient way to do it and it makes the most sense what we're gonna do is we're gonna make a copy of the board we're gonna move we're gonna check every single empty position and see if when we move into that position in the copy of our board if it's a winning position or not that might sound confusing it's hard to explain but let me just go through the code with you guys so since we're gonna have to check if we win and then we can check if the player can win on their next turn let's do this in a little for loop so I'm gonna say four let in and this just stands for the letter O because that's gonna be our letter and then X like this so what this is gonna do is its first gonna check to see if always can win and then it's gonna check if XS can order now I'm going to say for I in possible moves so this is gonna give us all of our positions like 1 3 whatever ones are blank we're gonna make a board copy simply called board copy and to do this you could make an alias which which would be just doing this but if you did this that would mean when you reference board copy in your program and you change something about board copy it would actually change the original list our original original board list so what we need to do to make a clone is to put a colon like this so that the program knows we don't want to just reference this with a new name we want to actually make a copy of it and create a new space in memory for that I can go through that in another video how exactly that works in Python with what do you call it I think there's something to like immutable and mutable I believe that's what they called variables because lists are mutable that's why you can do something like that um anyways let's move on to the next step I'm going to say board copy I equals left now what this is gonna do is we've made a copy of our board now we're gonna simply place our letter which is going to be either o or X based on which one we're checking into the indicee and the for in the for loop of possible moves so for the first empty position is let's say 1 which is going to be top left we're simply going to say that top left is equal to o and then now we're gonna check if that results in a winning in a winning game for us so to do that we're gonna say if is winner give it a board and in this gates gonna be board copy and a letter and the letter is gonna be the current letter that we're checking in this case o at the beginning and that X later and then if that's true we're say move equals I returned with so let me go back through this groups one more time just in case anything's confusing we're gonna check through OHS and we're going to check through exes we first have a look through all the possible moves that we can do and that's any empty space which we've defined up here we're gonna create a board copy there's gonna be a copy of our original board and then going through each possible move we're going to place a letter into that empty position in our copy of the board we're gonna check if that board copy is a winner or not so if we win with that and if it is we're just gonna say that's our move and we're gonna return that and we're gonna get out of computer move function because we're just gonna continue because that's the move we want to do it's gonna win for us now same thing goes for here except now we're checking if the player can win so we're saying okay so if we're a player where would we have to move to win if we find a position where we can win on the board well we don't want the player to win so we're gonna move into that position to block them by doing the same thing here and that is pretty much it for the first two steps so that's two steps down in one we check if we can win we check if player can win and then we move appropriately now it gets a little bit easier and we want to check if any corners are open so say no there's no position where we can win there's no position where the player can win we want to move to any open corner but we don't wanna be predictable so we have to find all the open corners and we're gonna randomly decide which we want to move into say corners that are open equals blank list and say for I in possible moves if I in and the corner is gonna be one three seven nine I believe that's it I'm gonna say corners open dot append I like that so now we say okay so we check through all the possible moves if any of those possible moves are either 1 3 7 or 9 we're gonna add that into our open corners and now we're gonna just check we're gonna randomly select one of those corners to move into so I'm just gonna say if the length of loops why am i typing in the other way corners open is greater than 0 now we're going to say move equals select random and we're gonna pass it our lists of corners open my gut and then we're gonna return that myth now the reason that I needed to check if our list was greater than zero is because say no corners are open and we try to run this function that we're gonna create later it'll crash it's not gonna work because there's nothing in the list so how does it randomly select a name to see in the list it can't so we check if there's more than one or if there's more than zero we're gonna randomly select if it's just one it's automatically going to select that one and then it's gonna move into that corner okay so now we've checked if the corners are open the next step in our algorithm is to check if the center is open so we say okay no one can win here with any of the moves none of the corners are open all right let's check at the Centers opens we're gonna say if five in possible moves I'm gonna say move equals five not my movie equals five return movie flick so pretty straightforward and then the next one is take any edge I'm gonna copy all this because it's gonna be the exact same thing except with edges and in this case I'm going to say edge is open and here it's say edge is open edge is open and edge is open and I'm going just need to change this to eat the edges which can be two four six and eight and there we are now after that after all of that I'm actually just gonna take this out of here because if we've gone through everything we've gone through all of this code that we just wrote no edges are open no corners the centers on open we can't make a winning move then we're simply gonna return zero because that means there's no possible moves that we can make all right so now we need to write our last function which is select random now this one's really straightforward in here just gonna start by importing random and then I'm gonna say I need a random number within a range of the length of what am I saying board this should not be bored I'm sorry this should be L I just gonna say for list I'm gonna say Ln which is the Stanford length is gonna be the length of our list I'm going to say R which is gonna stand for random number close to random dot R and range in between zero actually yes zero between zero and L N and then we're going to return Li are like so so what this is gonna do is we're gonna create a random number between zero and the length of our list now remember if the length of our list if we have a list that looks like this one two three the length of our list is three but the maximum in dusty is two so when we use this R and range if this is three it'll never give us the number three and only give us zero one two so that works well for us and then we're gonna return that and that's gonna be our move and I believe we set that here we say move yes is equal to select random edge is open now let's have a quick look through our code see if there's anything that I need to change I believe that's everything so let's go ahead and run the program and we just get a slight error here let's just see how I wrote that over here cuz I know you can do this I just don't know exactly how to read it properly what's wrong with this door maybe this needs to be in the same line or something see if we crash again or these need to be the same line okay so that's annoying but anyway it's just backspace to all these and they should work okay now let's try it missing one potential argument board so print board wherever we write print board we're just gonna have to throw a board in there so let's go down into our main function cuz I believe that's where we write it just gonna say Ford board wait up here run it now and there we go tugging no that's not exactly what's supposed to happen is it ah this I believe this is why so in our board count this needs to be changed from false to true my bad guys now we can read it ok please select a position place an X between one a 9point air what's our air it must be an integer or slices not a list or position pause equals letter letter indices must be one six and insert letter okay so the error here sorry just took me a second eyes to pause the video they're excited to find it is an insert letter excellent wrote board this needs to be move like this ah my bad about that guys and let's try it one more time there we go so now everything's working so we move into position to our computer sites moving to position seven we're gonna move into position five it decides to move there let's see if it takes the winning move we'll go to position one take some winning move and it wins all right so that is pretty much it if we're how to make a tictactoe game in Python again I'm not sure how many would he call it tutorials or how many videos this is gonna be if you guys want to make it so that you can restart the game it's really easy all you have to do is to make a while loop down here so you just say well true and then put main in here and if you wanted to you could put something like input play again push your mark like that and then they would just have to enter to play again I'll let you guys figure that one out because it's pretty straightforward anyways other than that this has been it for how to make a tictactoe game in Python sorry if there was a few little bugs we ran into here it is hard when I'm coding this all at one time and trying to explain everything if you guys have any other questions or concerns please make sure you leave a comment down below because I'm sure myself or someone else would be happy to help you out if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in the next one