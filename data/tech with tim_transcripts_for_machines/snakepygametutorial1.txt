hey guys I just want to do a quick little intro before the intro kind of in this video series because I want to give you guys for the information pretty much when recording this I wasn't sure how long it was gonna take me to do all of the content and do all of the code for this snake game so I ended up just recording it all in one sitting that means that I'm gonna break this up into 15minute segments it was about an hour worth of footage so that should be four videos and if the last video ends abruptly or whatever one you're watching just know that it's gonna start exactly where it left off in the next video it's just because I wasn't sure when I was gonna be ending it and splitting up that I didn't really do like a formal conclusion or reintroduction in the next video just wanted to give you guys heads up for that and with that being said enjoy the video hey guys and welcome back to another youtube video in today's video and i guess the next few videos i'm gonna be doing a tutorial on coding snake in python so let's just go ahead and get a look at what this final product is gonna look like so on like an x by x grid so whatever you want it to be you have a little snake moving around there's a snack is what i want to call it that i shows up and as you collect it it increases the length of the tail and then obviously if you run into yourself and I just did that by clicking the back key while I was going forward it gives you a little error message here says you ran into your tail of your length was nine dog whatever and then you can continue and play as long as you want so yeah it's pretty cool it's not super crazy hard to make but there is quite a bit of code for it so this is probably gonna be a few videos anyways what I'm gonna be doing in here is gonna be coding everything objectorientated I know that there's a much faster and easier way to do this but doesn't really teach you that much this way you're gonna learn a bit about objects about classes how we can kind of work with them and you'll see like how the flow of my program goes and you should learn quite a bit especially if you're somewhat a beginner programmer what we're gonna be using to make this as a module called pygame if you don't know about pygame and you want to learn about it before you do this i would recommend that if not that's fine but anyways if you want to learn about that'll put a little card in the top right corner here i have a tutorial series it goes through that and you can skim through that and learn a bit about bagging before we get into it here all right so let's start coding so pretty much what I've done is I've just set up the flow of the program all the classes and the function just to remind myself what I need to write and while I'm talking here it's probably good ideas if you guys copy this down so what we're gonna have is we're gonna have two main objects gonna have a cube object and a snake object and our snake object is gonna contain cube objects if that makes sense so each one of those little red I don't know squares was moving around is a cube object and the whole thing is our snake object we're gonna have a few functions here draw a grid redraw window random snack message box and main and this first video I'm just gonna go through and I'm gonna code the two classes pretty well and I'll get this draw a grid function working a little bit of the main loop and then we'll go into like the message box getting more into some of the methods here in these classes in the next few videos so let's get started with our main function here and this is what's gonna be our main loop so essentially what I need for the main loop to start is we need to make a surface so in my game to do this we do when equals high game dot display got set on your story mode and then I'm gonna set it let's see here what don't let the height to be nice a width and height like this oops bad spelling and I'm just going to make a variable here called width equals height equals and we'll just set this to 500 by but I have 500 like so now we need another variable and BSF this as rows can delete this down here it's gonna do something we'll do that later and this is how many rows you're gonna have rows or columns whatever you can set us to whatever you want just make sure it divides 500 evenly otherwise you're gonna have like weirdlooking rows if you don't even so I'm just gonna set mine to 20 that's what I'm using the other one but if you want to make it harder set it to something like 10 and there won't be as much room for the snake to move around and the games will go faster pretty well okay next what we need to do is we need to set up a snake object so I know that we haven't even created like anything in the snake class yet but I'm gonna do s equals snake and I'm just gonna give it a position so in this case we want to color sari she's gonna be red because red green blue 255 4 red and I'm gonna give a position we're gonna start in the middle so I'm gonna start at 10 10 now let's move into our main loop so I'm just gonna say wow flag create my variable up here like equals true and then we're just gonna start by doing a tie game tick so pygame got time delay 50 like so and that's just gonna delay us I want to say like 25 or 50 milliseconds every time so our program doesn't run too fast I'm also just gonna create this clock tock tick I'm gonna put that at 10 and what I'm going to do is I'm going to create a clock object up here and this is a builtin thing in tie game and what this is gonna do is like splint in just one second once I finish typing it tie game duck clock I believe it is loops time dot clock like so so what this clock tick is actually gonna do is it's gonna make sure that a game doesn't run more than 10 frames per second so that would mean essentially that our snake would be able to move like 10 blocks in one second and again we don't want it to be that fast so that's why we're also delaying like a few milliseconds here if you put this to low then again it's gonna move too low you can play around with the speed this is kind of what I found was the best speed and it may vary depending on what machine you're on it shouldn't it might so you might want to just change these numbers again the lower this goes is the faster it's gonna be and the lower this one goes is the slower it's gonna be so they're kind of inversely proportional like that alright next what are we gonna do here I'm just gonna call redraw window and I butcher that's so bad oops redraw window like so I'm just gonna give it a surface which is in this case gonna be win that we've created up here and for now that's all I'm gonna put in my main loop here and we'll move more into that once I start coding some other stuff okay so now that we have our redraw window being called here I'm gonna go and I'm going to start code a redraw window so what this is essentially gonna do because we first needed to update the display so pygame type display dot update like so and we also need to draw the grid so we're something to draw a grid we're gonna pass it on same surface that we were given and move on for that we're also gonna fill the screen so when dot fill in this case I'm just gonna use block so it's a zero zero zero and there we are that's all we need to do right now but essentially we're also going to need to draw the snake we're gonna need to draw a few other things on the screen that will we'll get to later okay so draw a grid let's move into this one now what we need to do here is a set draw a grid which is pretty easy to do so what we do is we're given rows and surface so it's probably a good idea if I actually pass in the rows on the surface so I'm just gonna global them here so that I can reference them I think this is going to work well the global rows and width like that and here we also need to make these global just because I don't have passed them and every time I draw a grid we're gonna say wit and rows and this height variable is actually not necessary because we are just gonna draw a square like a square surface every time so we can just make this the same we don't need two variables for width and height do it or gonna contain the same number anyway so global width and rows I go here draw a grid given width Rose and surface so now we're gonna put in well first we're gonna put our rows right oops width row and surface like that okay so that should be working now in here what we first need to do when we're drawing a grid is we want to figure out how big each square in the grid is going to be because what we're gonna do is we're going to just draw lines going down and across but we need to figure out where to draw those lines so we have to figure out kind of like the gap between each of the lines so the way we do that I'm just going to create a variable here a size between is equal to our width integer divided by our rows this is just so that we don't get like large decimal numbers because that we cannot pass into our draw line method in a in Python okay so now I'm just gonna create X variable and Y variable and I'm gonna set these to zero I'll just say for L in range and this is just stating for Lion pretty well and rows like that now what I'm gonna do is I'm going to increment my X by the size between I'm gonna increment my Y by the same so y equals y plus size between and get rid of one of the spaces here know what okay there we go and now we're simply just gonna draw two lines so to draw a line in pygame all we have to do is tie game dot draw dot line and the arguments of that takes is a surface we need a color in this case is gonna be white so we do 255 255 255 for white we're gonna draw at X 0 comma X W and I'll go through this in just one second what this does and I'm just gonna copy this and draw one more and then explain how this is gonna work pretty well okay so now we need 0 Y and W walk like so okay so what this is gonna do is this is going to draw two lines for us every loop of this for loop and these arguments here is the start position of the line and the end position of the line so the first line that we want to draw is going horizontal which means we don't want to change the Y value at all so what we need to do is we need to find the X and then we're gonna put Y at 0 because we're gonna be at the top I think that's right at least oh sorry this list line is drop being drawn down not being drawn to the right I was getting confuse it okay so we're gonna change the X but we're going to keep the y at 0 and then we're gonna stay at that same X and we're gonna keep the Y at the width of the screen so that we're going far enough down and then same thing here this one is going horizontal excuse me I mess that up before so our X is always going to stay at 0 and our Y is gonna be what's changing as we draw a horizontal lines across the screen I hope that makes sense stereo how that works anyways I'm gonna move on from that and that's all we need for the drug grid function so let's just go ahead I probably made a mistake here but we'll run the program to see if everything's working again our name Wynn is not defined when don't fill ah so I've called this when one really needs to be surface like that so let's try it out and there we go we get a nice little grid on our screen like so twenty by twenty grid there we are so now let's move into another function or actually let's start coding on the classes here so like I was talking about before we're gonna have a snake object which is going to contain a bunch of cube objects so essentially what we're gonna do is we're gonna have a list of cubes and that's gonna be known as the snake body so let's go ahead and write that in now what I want to do for that is just create a list so we're just going to say your body is equal to and then a blank list I'm also just well we're already up here in creating a class variable I'm gonna create turns is equal to and it's just going to be this set of squiggly brackets here that will we'll get into in a bit okay so now that we're already in the snake function what we need to do is we just need to define our parameters here that we're passed in so we're just going to say self dot color equals color set a self dot head equals cube which I'll get into in a second given the position say self thought body dot append our head self dot head like this so what we're doing here now is we're saying okay so the head of our snake which is going to be important because we need to know where that is at all times so we can move accordingly is equal to a cube at the given position and the given position is what we pass in here and it's like the starting position of our snake or we could create a new snake like we'd have multiple snakes moving around and anyways that's the position now we're saying we're gonna append to the body this head so now this is in our list here and then we can go through that list we can draw things we can move it we can check things we want all of our cubes to be ordered within this list so that's why I'm putting that in first now I'm just gonna give this one which is called turn X is equal to zero and turn Y which is equal to what so what this is going to do is we have a direction for X and a direction for Y for moving our snake so obviously these are going to be a value like negative 1 1 or 0 and that's gonna be the same for Y and X if Y or X is equal to 1 negative 1 then the other one is gonna be equal to 0 because you can only be moving in one direction at the same time and this is just going to keep track of what direction we're moving in and we'll use this in the next function that we're gonna code which is our move function so moving is pretty straight forward at least in terms of just if you have one object moving around the screen getting it to go left straight right but when you have the snake object it has to turn at certain points so when I click left the rest of the snake is still moving forward once it reaches the point where the head turned left then it has to turn left so that's where things can get a bit complicated