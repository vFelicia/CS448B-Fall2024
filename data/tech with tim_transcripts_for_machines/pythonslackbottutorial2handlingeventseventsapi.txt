hello everybody and welcome back to video 2 in the slack bot tutorial series so in this video we're going to be talking about events so how can we actually subscribe to events now what that means is that right now all we're really able to do is send a message we can do a few other things as well we could like pin a message react to it but we're not able to see what's happening inside of these channels we don't know what other people are doing we can't really see if someone else sends a message and a lot of the times when we have a bot what we want to do is be able to do something when a user you know runs some command or does something specific in the channel maybe they say a swear word and we want to delete that message right that's an example of something that we could do so what we need to do is set up a way for our bot to be kind of alerted or be aware when something happens in this channel now this is somewhat complicated in terms of how this actually works for our implementation it's not going to be that difficult but what we need to do is go back to the slack api page and we need to go here to where it says event subscriptions and start setting up a few things so that we're subscribed to these events so what i'm going to do is go ahead and turn enable events on now notice that the first thing it asked me for here is a request url now what this is saying essentially is that when an event occurs the slack api is going to send a post request which is just a method of an http request essentially to our web server so what we're going to be doing is we're actually going to be running our bot which we're not doing right now on a web server now running on a web server just simply means that this is going to be sitting and it's going to be running 24 7 and it's going to have its own kind of url right just like a website you know if i go to techwithtim.net that's running on a web server and when i go there it returns some html and it renders that on my screen well this is going to work a little bit differently what's going to happen is we're going to be running on a web server it's not going to be a website just a web server and when an event happens it's going to send a request to that web server and then we can handle that request and we can do something with it so for example when a user sends a message we can send a message back or we can say hello or something like that so to do this we need to start by doing a few different things the first thing we need to do is install a tool called ngrok so ngrok the reason for this is that we're going to run our web server on our local computer at least for right now when we distribute this bot later on we will run this on like a public web server that everyone can access but for right now we're running it on our local computer so we need to go ahead and install this software called ngrok which will essentially allow us to take a public ip address or a public domain and route that to our local web server so you just need to go ahead and press download here this is completely free there is a paid version but we don't need that and then if you're on windows obviously download for windows if you're on mac and linux download for those respective platforms now there is some instructions here you may have to do a few different things if you're on linux or mac os you can check that out right here but download that and then make sure you keep track of where that file is downloaded because this software works a little bit differently than we may have used before anyways mine is stored inside of my downloads folder so if i go to downloads you can see i have ngrok right here make sure you unzip that folder and then just take the application file and put it somewhere where you're going to remember in fact you could actually put it right inside of here if you wanted to it's going to be hard for me to run it in this directory but of course you could put it there if you wanted to all right so the next thing we're going to need to do is install a few more packages from pip so since we're going to be running a web server we're going to use a module called flask which is a really lightweight micro web service is what it's called to actually run this server so we're going to say pip install flask like that now again you can see i already have this satisfied for you guys it should install a bunch of different things and then the next thing that we're going to do is we're going to say pip install and then slack events api so i'll leave that up right there and you guys can see what that is but this is what we're going to use to actually handle and grab the events coming from slack so now that we have these two things installed come on finish up there we're going to go ahead and modify some things in our python file and then we'll go back to the slack api page and we'll add a few different things the first thing we're going to do is we're going to say from flask import flask with a capital like that then right after we initiate the client or before it doesn't actually matter where we do it we can say app equals then we're going to say flask and then underscore underscore name underscore underscore this is simply just a variable that's inside of python it represents the name of the file you don't i don't need to explain why we need that but this is just how we configure our flask application now it's super easy to run our flask application what we can do is we can set up this if statement at the bottom of our program and say if underscore underscore name underscore underscore equals and then inside of strings underscore underscore main underscore underscore simply we can do app dot run and then we can say debug equals true now what this is going to do is take our flask application it's going to run it on the default port which i believe is port 5000. if you want to change the port that this is running on you can say port equals and then set that to some integer value that's not already being used but what the debug does is say okay if we save this file or we modify it we don't need to rerun the python script it will automatically rerun it for us it will automatically update the web server which is really nice when we're doing development and then what this is saying here is essentially if we didn't import this file if we actually ran this file directly that's essentially what this if statement says then go ahead and run the web server the reason for that is if we imported this from another file we probably don't want to run the web server when we're you know taking a variable or something like that from this file all right so now we have that the next thing we're going to do is we're going to say from slack events api import slack event adapter now this is kind of a weird thing it's hard for me to explain exactly what this is going to do but this is going to handle all of the events for us so after we make the app and make sure it's after what we're going to do is say slack underscore event underscore adapter like that is equal to slack event adapter and then inside of here what we're going to need to do is pass something something and then our app so i'll talk to you about what these two things are in a second actually we can do the middle thing we're going to say slash slack slash events but for this one we're going to need to pass what's known as a signing secret which we're going to have to grab from the slack api website what this is saying is okay we're going to add the slack event adapter this event adapter will allow us to handle the different events that are being sent to us from the slack api and what we're going to do is say okay we want this route right here so slash slack slash events to be where we send all of those different events to and app is saying okay what web server are we sending these events to well we're sending it to this app which is the current running web server hopefully that makes sense but let's go back to the slack website slack api we're going to go to basic information and scroll down and there's this thing called our signing secret now what i'm going to do is well i'm going to have this blurred out but i'm going to copy this signing secret i'm going to go into my env file and just like i made this slack token i'm going to say signing underscore secret equals and then i'm going to set it equal to that token that i just grabbed that secret that i just grabbed now just like we did previously what we're going to do is use the os dot environ or whatever you want to call this to grab the signing secret from that file so i'm just going to copy this here i'm going to paste that as our first argument to the slack event adapter so now instead of slack token i'm going to say signing oops in all capitals underscore secret like that so there you go i saved and you can see now it kind of went down on the next line we have slack event adapter signing secret the route we want to go to and then app all right now this is where it gets a little bit more complicated but nothing crazy so what we're going to do is go ahead and run this i just want to make sure i didn't mess anything up too badly i actually think that we are good okay so i'm going to go ahead and run this and notice that now we can see that we have a web server running and we get kind of all of this output so it says right now that we are running on http colon 127.0.0.1 colon 5000 so that's just localhost right but what i want you to keep track of here is this port this port is important because we're going to need to use this in the next step so in my case i'm on 5000 you're probably on 5000 as well but if you see a different number here then swap what i do in the next step with that number so what we're going to do now is go and find where that ngrok program was and just double click it to run it now if you're on mac or linux you're going to have to go back to the ngrok website and kind of follow the instructions for that it's not very complicated but you just need to essentially run that program so i'm going to go and double click ngrok and then now i'm inside of cmd what i'm going to do is i'm going to type ngrok and lowercase like that also i have no idea if that's how you pronounce it so i apologize if i've been butchering this the whole time you're going to type http and then you're going to type the number for the port that your server is running on so in this case ngrok http 5000. i'm going to go ahead and press enter and when i do that you're going to see that we have all of this kind of stuff popping up here and what i want you to look for is where it says forwarding so essentially what we've just done by running this program is we've allowed this public ip address which is this http blah blah blah blah to point to our local host web server so we can use this on the internet to kind of test and debug our app and this will point to this localhost address right here now keep in mind just because this is the free version of the software whenever you rerun this tool and you do need to keep this running you can't close this window you need to keep it running the entire time this address will change so what the paid version does for you is it lets you have a permanent address for this so it doesn't constantly change for us that doesn't matter this is just for development purposes anyways but copy this address it doesn't really matter if you use the https or the http i'll just use the http again this doesn't really matter at all we're going to go back to the slack api website here and what i'm going to do now is i'm going to go back to events so let me find where that is event subscription and now we're going to enable events and where it says request url we're going to put that url that we just copied we're going to put slash slack and then slash events now once we do that we're going to go and go to subscribe to bot events we're going to add the events inside of here that we want to subscribe to so in this case i'm going to go add bot user event and what i want to do now is i want to have channels and i want to do message dot channels what this will do is allow me to be subscribed to all of the events where a user messages something in a specific channel what will happen when someone sends a message is it will send a request to this url which in turn will hit our local server because we've rerouted that using ngrok and then we'll be able to do something with that so i'm going to go ahead and press save changes and now it says you've changed the permission scopes for your apps please reinstall your app for these changes to take effect now it also says right here that we need channels colon history as a required scope for this to work so remember back in the first video what we did is we went to oauth and permissions and what we needed to do is add the channel history scope where we added chat right now this automatically added this scope for us because we added that event subscription but just so you know say for some reason it didn't add it it showed you what you need to add you could go here and add that and then reinstall the app but anyways we're going to do is press reinstall app again we'll just press allow and we're good to go and now we can get out of this page we can go back to our vs code and we can continue to write all right so just note if i go here to ngrok we have a request that's come in here that says post slash slack slash events what this is saying is that we have just actually received a request because we just put that url in right and it was verifying that url was correct to this endpoint right here which is slash slack slash events now keep in mind that the reason why if i go back to the api page i just want to make sure this is really clear let's go back to event subscription the reason why i added the slash slack slash events here is because this address right here points to our local host and what i did inside of the code here is i said okay i want all of the events to be sent to this endpoint so that's why i added that there now if i change this like events one i would have to go back here and change ngrok to slash slack slash events one right i would add a one at the end there anyways we don't need that but let's go back to that all right so now that we have that what we need to do is create a route to create a function that can actually handle all of these events so i'm going to say at slack vent adapter and sorry not that we're going to do the one at slack underscore event adapter so the variable we set up here we're gonna say dot on and then inside of here we're gonna say message now this is simply what we use to handle the on message event so when a message is sent we're to handle that we're going to do something inside of here so i'm going to say define message i'm going to take a payload here and then inside of here we'll do a few different things now what this is saying is that when a message is sent we're going to call this function and we're going to take the payload that was sent to us the payload is just some data that the slack api is going to send in this case it's going to send us all of the data about the specific message that was sent so what i'm going to do is say event equals payload dot get and then inside of here i'm going to say event comma and then just an empty dictionary like that what this is saying is let's look for the key event inside of our payload if we don't have that we'll return a blank dictionary the event key is going to give us information again about what that event was and like the message that was sent all of the text and all of that now the first thing that we can do is we can see what channel this message was sent in so i can say channel id is equal to event dot get and then instead of here i can say channel what this will do is give me the channel id that whatever message was sent in right so pretty straightforward next i can say user id so user id equals event.get and then in this case i can say user pretty straightforward it's going to give me the id of the user that sent this message and again we're getting that from the event key in the payload next what i'm going to do is say text equals event dot gets take a wild guess at what this is going to be it is simply text and there we go so what i'm going to do now is simply echo back to the user whatever they send us so we'll use this client.chat underscore post message so we'll go ahead and put that like that and what we will do is we'll say okay when you post a message sorry when we receive a message we will simply send back whatever that message was so i will change the text here to be text which means whatever was sent to us we will send back and then the channel i will simply change to be the channel id so say channel equals channel id and now whenever a message is sent we will send back another message that simply echoes it so let's save that i might have made a mistake here but let's run this code okay so we're running the server have a look at ngrok oops i want to close that i keep opening that wrong one and you'll see all of the events that are coming in but let's go back to slack in this case we're gonna go actually back to our slack channel and now i'm gonna send something i'm gonna send hi and notice that the youtube bot keeps returning hi now we kind of have a problem here right it's just constantly sending back high and if i go to ngrok here you can see that we just keep getting all these requests coming in and it just keeps telling us that messages were sent now the reason why we continue to send high is because if we have a look at our code here all we've actually done is just handled the situation where a message was sent right if any message was sent it doesn't matter by who even our own bot then we're going to send a message back so what we need to do is we need to make sure that when we send a message we're only sending it if the previous message was not from us right so we don't want to reply to a message that was ourself so what we're going to do is check to see if the message event that we're getting sent here is from a bot or if it's from our self now to do this what we need to do and actually let me just stop the server for a second because they're just going to keep going so let's just do control c and i'll stop that there we need to check if the user id of this message is equal to our bot's id but that means we need to know our bot's id so the first thing we're going to do is say bot underscore id i'm going to do this above the function is equal to client dot api call now this is another way that we can call specific endpoints on the slack api if you know about that then this will be useful if not don't worry about it no problem but we're going to say client dot api underscore call i'm going to say auth.test now what this is going to do is return to us again some information one of those pieces of information will be the id of our bot so to get that we're going to say user underscore id now don't worry if this is confusing you just imagine that all this line is doing is giving us the id of our bot so we can simply check if the user id here is equal to the id of our bot if it is we're just not going to send the message so we'll say if the bot underscore id does not equal the user id then we'll go ahead and send that message so let's save that let's run the server and i need a colon here that's going to be syntax error let's add the colon expect an indented block that should be indented as well my apologies but let's run that now we can see this is all running let's go back to slack and let's send hello world give it a second and notice that our bot returns hello world but it doesn't just keep sending hello world now let's say hi i am tim and we get hi i am tim so that is the basics and that is how we subscribe to events now of course there is all kinds of other events as well if you have a look here of subscribe to bot events you can kind of scroll through and just pick whatever events you want it will add automatically add that scope and then all you'll need to do is maybe just do a quick lookup to figure out how or what the string is here that you need to pass in to handle that specific event but if you want another event you would just write the exact same thing i've done here the payload may be slightly different that's coming in but you can get the same information like the channel the user the text you can get the time there's a bunch of other stuff that you can get in fact to conclude here i will just print out what the payload looks like so you guys can have an idea of what we're actually being returned here so let's say print payload like that let's go into our console let's go to slack and let's send a message hello world and you can see if we have a look here we get the payload right so we have all this stuff coming in so this is all the information that it's passing us now you can kind of parse through this information on your own and get all of the stuff that you want but you can just print it out and kind of have a look at you know what you're actually getting back from the api so anyways i think i'm going to end the video here hopefully that showed you how we can handle messages and give you kind of some intuition on how you would handle other events in the future we will handle some other events but i'm going to be trying to show you a bunch of different things just so you're aware of what's possible and you can kind of make your bot your own i'm not going to be trying to make this like a fullfledged bot that has some specific purpose so anyways as always i hope you guys enjoyed if you did please like subscribe and i will see you again in the next slack bot tutorial you