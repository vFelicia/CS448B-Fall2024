in this video I'll show you how to automate your life with python by working on three fun simple yet effective projects that really illustrate the power of knowing Python and specifically the automation techniques now these three projects will be the following the first is a currency converter the next is a YouTube video downloader and the last one is an automated scheduling software for backing up a directory or a folder or whatever files you want on your computer these projects should take us just a few minutes to build out I'm going to explain them line by line and even if you're a beginner python programmer you can follow along now with that said if you are a beginner python programmer you probably want to check out this completely free resource which is an introduction to python from our video sponsor HubSpot now this guide is designed for marketers developers data analysts or really anyone trying to get better at Python and what it does is break down what python is some of the methods and functions the best practices and coding standards and goes over at Advanced python as well now I've left a link in the description so you can check it out completely for free python is a super popular programming language and something you can use in your everyday life even if you don't want to become a developer definitely check out this guide if you want to get better at it and really unlock the power of being able to script in Python now a big shout out to our video sponsor HubSpot for providing this resource and many others completely for free again you can check it out from the link in the description all right so let's dive into the first project here which is going to be a currency converter this will allow us to convert pretty much any currency to any other currency or to a whole list of currencies so for example if you're always interested in the daily exchange rates between maybe US Dollar Canadian dollar Durham Euro whatever it may be you can set that up in this program simply click one button on your computer and you'll be able to see all of them in front of you that's how we're going to kind of automate this anyways first thing we need is some kind of code editor so I have Visual Studio code open but you can use anything that you'd like you just just need to be able to edit a python file now what I'm going to do is make a new python file so I'm going to go here to vs code I'm going to call this currency dopy Okay so we've got a python file open here now what we're going to use for this specific project is something known as an API now an API stands for an application programming interface this is something that we can call that will return some data to our code so we're actually going to use a free API that exists on the internet there are literally millions of apis that are completely free that can do pretty much anything you want and once I show you in this video how to access them you'll be able to use really any API you want and you'll see it's super simple now what we do need to do here though is install a python module that's going to allow us to actually call this API in a really easy manner this module is called requests some of you may already have it installed but what you're going to want to do is open up a terminal window if you're on Mac Linux doesn't matter just open up your terminal or command prompt and you're going to want to type the following command which is pip install and then requests now if you're on Mac or Linux you're going to do pip three install requests hit enter and that should go ahead and install this module for you now for some reason this command does not work I will leave two videos on the screen and Linked In the description that will show you how to fix this pip command specifically they go over fixing or installing pame when you get to the step where you're installing Pi game instead of pame you can just install requests and it should fix it for you okay so now that we have requests installed just to test our code we're going to import requests in our python file I think it goes without saying at this point I'm assuming you have python installed and we can go ahead and run our code now you guys probably know how to run your code you can do it from the little run button up here in vs code but if for some reason that's not working for you you can go to your terminal and you can type Python and then the name of your python file as long as you are in the right directory or the same directory where your python file exists so in this case mine's on the desktop inside of this folder so I do python currency. piy if we don't get get any errors we are good to go if you're on Mac or Linux you can do Python 3 currency. piy and that should work for you okay so now let's load up the API that we're going to be using now I'll link everything in the description so don't worry about that but the API we're going to use is the free currency API again you can find any one that you want but I just went for one that was free and tested it to make sure that it's working as you can see here it gives you kind of a demo so you can pick some different currencies you want to convert between we can check the rat and it should just give us the answer right so one USD is equal to this much Australian dollar if I change this to Euro you can see we get the euro rate awesome now what you're going to need to do here is go and click on this button that says get 100% free API key you'll need to make an account I actually already have one made so it just brings me to my dashboard but in your case you want to make an account so go ahead sign up for one you can obviously unregister from the email list or whatever and what we're going to be looking for here is this API key okay so it says default key so we're going to copy that key and we're going to go to our python file and we're going to make a variable in all capitals called API key like this and we're going to put a string and we're going to paste the key inside of here perfect now the reason I did all capitals is whenever you have a constant value that's not going to change in Python you typically put it in capitals perfect now that we have that we also just want to get what's known as the root for our um API or kind of the domain that we're going to be calling so what we can do is actually head over here to the request playground and you'll see that it has a generated request URL so what I'm going to do is just copy the URL here and we're going to make another variable called basore URL and we're going to make this equal to a string and we're going to put this URL inside now we're going to clean this up a little bit I'm just going to remove everything that comes after the API key and I'm going to kind of explain how this works so right here this is our main domain and then this is the route that we're going to access that will give us the kind of currency information now in order to use this we have to pass the API key so we have some kind of authorization so what we're going to do is use an F string an F string allows us to embed variables inside of curly braces here so if I put F before my string and then I put my curly braces I can now put the variable API key and what I've done is injected my API key into this base URL and now what we'll do is we'll actually make a function that will utilize this URL to send a request to the API which will then return some data back to us so we're going to make a function here called convertor currency okay inside of here we're going to take a base now the base is going to be the base currency or the base currency ticker that we want to convert from now what we're going to do is format our URL so that we include what's known as the query parameters that specify the currencies that we want to do the conversion for so essentially you may have seen before in URLs if I go up here that they have this question mark and then after the question mark you might see some variables that say like search is equal to and then there's some text or something these are known as query parameters and you can pass them alongside the URL and the root the root is the thing that comes after the slash here and they specify what you want to get from the uh URL now in our case I just know what these are because I read the documentation uh you don't need to read it I'm going to share with you how it works but what we're going to do is say that our URL is equal to an F string we're going to inject inside of here the base URL and then we are going to put a question mark like this and sorry we don't need the question mark because it's already here we're going to put an and sign like this because we're going to have more than one query parameter and we're going to say the basore currency is equal to the base which will be passed into this function as a parameter and we're going to say and the currencies are equal to and inside of here we're going to specify the currencies that we want to convert to so what I'm going to do now is I'm going to make a variable called currencies and inside of here we're going to put the ticker symbol of the currencies we're interested in in this case I want USD Canadian dollar euro the Australian dollar and we'll go with CNY as well actually forget what currency that is I'm sure many of you will roast me in the comments but anyways just want to show you we can do a bunch of different currencies okay so these are the five currencies that I'm interested in converting to and for the base we can use anything that we want it could be even one of these currencies regardless what I'll do is I'll go and currencies is equal to and then I'm going to put currencies in here but the thing is the way that the currencies are supposed to be passed in here is they're supposed to be separated by commas so I'm going to show you a little trick that will take this list and convert it to a string that has comma separated values the way we can do this is we can say our currencies in lowercase as this is a variable are equal to and this will be a string with a common dojy and then currencies now the way the join works is it takes all of the elements from a list and it will combine them together in a string using whatever the string is that you have here as the delimiter the delimiter is just the separator it will go it's what goes sorry in between these different values so now what we'll end up getting is just a big string that has USD comma CAD comma Euro Etc which is what this query parameter is expecting the result to look like so now I can pass inside of here currencies so now we have the URL and what's interesting is that if we just went to this URL in our browser it would actually give us the result but we don't want it in our browser we want it here in our code so what we're going to do is write a TR catch block or a TR accept Block in Python because it's possible an error could occur here and we'll kind of talk about how that works in one second and inside of this Tri block we're going to send a request using our newly formatted URL to get some data so to do that let's just make this smaller first of all we're going to say our response is equal to requests which is what we have up here right do get and we're simply going to get the URL that we just created again remember this is a combination of the base URL which has our API key as well as the query parameters which are specifying the data we want now whenever you send a request you get a response so that's why I'm calling this response and then this response is going to contain something known as Json Json is Javascript object notation you don't have to worry too much about that what that really means in Python though is that we're actually going to get a dictionary back that will contain some key value pairs with the data that this API returned so we're going to say the data is equal to the response. Json and for right now we're simply going to print the data and then we're going to return it like that now inside of this accept block I'm just going to show you how we can handle a potential error I'm going to say that we will accept any exception as e and we will print e like this and simply return none okay so let's quickly break down this function we break apart our currencies into the correct string that we're expecting here we format our URL we have a try accept now all this does is attempt to run all of this code if something happens in this code and an error occurs we simply go into this accept block rather than crashing the program in the accept block we say we're going to accept a general exception as e that essentially means we're going to listen for any general exception that occurs we're going to store that in the variable e and then we can just print out e so we can actually see what the error was then we're simply returning none now we can just quickly try this out to see if it works so we can go convert currency which is the name of our function and we can just pass a string with the currency we want to convert so I'm just going to go with Canadian dollars now what I can do is say python currency. Pi remember on Mac Linux Python 3 and when I run this notice that we get some data so it actually returns to us a python dictionary that says data so that's the first key and then we have a whole other python dictionary that contains all of the different currencies based on in our case the Canadian dollar awesome so now what we want to do is just make this a little bit more automated so the user can type it in rather than us passing it into this function and we want to print this out so it looks a little bit nicer so first things first we want to access this interior dictionary which means we want to use the key data on our data so we're going to return data at data like this and let's just quickly run this down and notice that uh what's happening here oh sorry it's cuz I printed data but what I'm going to do now is say data is equal to this and print data and we're going to remove the print statement from up here I know I'm going a bit fast but I'm just trying to illustrate this to you and you'll see now that we just get this interior dictionary so the point of me doing that is that I don't want to have the key data I just want to have all of my different exchange rates which I'm getting here okay so now we have that stored inside this variable now what we'll do is we'll just write something that will'll just print out all of these in a kind of nice orderly fashion uh so it's really easy for us to see okay so how do we do that well we can just write a for Loop and we can say for the ticker comma the value in our data. items now since the data here is going to be a dictionary this allows us to use this items function and the do items function will let us iterate over the dictionary and grab both the key value and the value um yeah as we iterate over it not really sure how to explain that better but items will give you essentially a list that contains first the ticker and then this value so when you do for ticker comma value you'll get both of them and then you can just print them out so I'm just going to say print and we'll just print the ticker so actually we'll do it like this we'll print an F string we'll print inside of here the ticker colon and then and we will print the value like that okay so now if we clear and run you see that we get all of our values popping up here okay so Australian dollars this Canadian one CNY Euro USD Etc okay so this is really good the only thing that's a bit weird is that it's showing Canadian dollar one I don't actually want to show that because I know what the base currency was that I'm converting from so what I can do if I want to get rid of this is I can simply just write this I can say delete data at Canadian dollar so that means okay after we get our dictionary back that contains all of the values we'll just delete the Canadian dollar key so we no longer have it so now if I save and run you see we just get the um currencies that we want the conversion value for perfect now let's just make this code a little bit better because right now I'm manually plugging in CAD I don't want to manually put it in I want to ask the user to tell me what currency they want to convert to so what we'll do is start with that and we'll say the base is equal to input input is how you get user input in Python and we'll just say enter the base currency and I'm going to say Q for quit and this will just be something they can type in if they want to quit the program now what I'm going to do is just convert their currency to uppercase so whatever they give us whatever they type in here we'll convert it to uppercase just so that we always have everything in uppercase rather than getting some lowercase values and then we will say first of all if base is not in the currencies so if it's not inside of the currencies that we have right here then we can simply tell them that they had an invalid currency now we don't have to do this but there is some currencies that you can't use inside of the um API so we might actually run into some errors here although now that I think about it I think it's probably fine actually if we remove that line yeah I don't think we actually need to use that right now okay anyways we have the base so now what we can do is just change Canadian dollar to be the base base so really quick fix there and now if we come and run our code it asks us what do you want the base to be so I can go with maybe AUD and now it gives me all of the currencies other than Australian dollar but it gives me the conversion rates from Australian dollar perfect so this is really really good last thing we want to do is just put this in a loop so that we can continue doing this as much as we want so I can say while true oops that's not what I meant to do we'll get all of this and we're going to do right now after they enter something is we're going to check if they entered Q because Q is how you can quit the program so we're going to say if base is equal to q and notice that I'm doing an uppercase q because we converted the input to uppercase then I'm simply going to break and breaking will just break out of the W Loop so that means we won't actually do the rest of this awesome last thing to check here we're just going to say if not data now what that actually means is if the data value that's returned to us is none so if it doesn't have a value then we can simply continue the reason we're going to do that is because if we try to delete something from data but data doesn't exist that's going to crash our program and give us an error so I'm just checking and saying okay well it's possible we ran into an error here in our currency conversion function if we did we're going to return none so if we have none here we'll just continue rather than trying to do this because this would actually cause some errors for us and I can show you what I mean by that so let's run the code and let's enter con Adan dollar again like that okay gives us all the values and we can enter another base currency now if I enter something like hello notice it actually just gives us an error here and it says data now the reason for that is that in the response there was no key data so it just kind of printed this out now if we didn't want to print this weird message we could just print this and we could say invalid currency like that we don't even need this anymore we could get rid of that and this way you wouldn't get kind of that weird weird error message so now if I quit the program by doing Q and I rerun this and I do hello it just says invalid currency and then we can go again so now I can do again my AUD and it gives me all of my exchange rates there you go okay so let's quit that and that is the first project now all of this code will be available from the link in the description if you'd like to copy it and obviously I will delete my API key so that you guys cannot abuse it last thing to mention here if you wanted to actually convert a dollar amount so maybe $100 $200 whatever all you do is the exact same thing we currently have except you would take whatever the rate is that you wanted to convert to and you just multiply it by whatever the value is that you wanted the conversion from so we have all the rates just take the rate and multiply it by whatever the number is and that gets your converted value okay that is Project one let's move on to project number two welcome to project number two for this project we're going to build a YouTube video downloader now the way this will work is you will just type in URL or video you want to download you will then open up the browse window so you'll kind of select the location you want to save it to and then it will just be downloaded very nice so let's create a new file here I'll just call this YouTube dopy and similarly to the last project we are going to install a module here that will make our life easier so we're going to go here and say pip install PBE same thing as before you're going to want to change this to pip 3 depending on your operating system okay so let's install PBE you can see I've already got it installed all right so now that that's installed we're going to do a few Imports here we're going to say from PBE import YouTube you can guess why we need that we're then going to say import tkinter this is built into python by the way as TK and we're going to say from tkinter import the file dialogue like that now you'll see why we need this in a second but tkinter is a very basic 2D Graphics library or kind of like guy utility library and python that lets you build some graphical user interfaces we're simply going to use it just to have a directory popup so you actually get like a visual kind of place where you can select where you want the file to be saved you'll see what I mean in a second but you can do some more cool stuff with it so if you're interested you can check out teer pretty simple to get started with anyways first thing we want to do is figure out how to download a YouTube video so we're going to make a function here which is download video and what we need to download a video is the URL and the path that we want to save the file to now similarly to before we're going to do a try and accept block because stuff can always go wrong when you're using these kind of apis so we're going to say accept exception as e and then we're going to say print e here and inside the tri block we're going to start writing the code that we need to actually download the video now we're going to say YT standing for YouTube is equal to YouTube and we are going to pass in the URL now what this will do is grab kind of an instance of the YouTube video based on the YouTube url that we pass and then we can kind of do a few things with it like we could get some stats about it but in our case we actually just want to download it now to download it there's a few ways to go about doing this but we want to download the highest resolution version so the first thing we're going to do is get access to all of the different streams of this video so we're going to say yt. streams. filter we're going to say progressive is equal to true and we're going to say the file underscore extension is that how you spell extension I think it is is equal to MP4 now you can change this if you want but I think MP4 is just the default that most of us are going to use okay now that we have access to all of the different streams this is all the places we could be downloading it from we're going to get the highest resolution stream so we're going to say highest res stream is equal to streams doget _ highest uncore resolution like that now this is going to give us access to that stream now that we have access to that stream we're going to download the video so we're going to say highest res stream. download we're just going to say the output undor path is equal to the save path which is the parameter passed into here that's it we can then go and say print video downloaded success y exclamation point okay pretty straightforward but we can go ahead and test this out so we can just say URL is equal to and we'll grab a YouTube video URL and then for the save path we want to specify where we want to save it now if we don't pass anything it will just save it in the current directory where we currently are but I'll show you again in a second how we can kind of fix the path a little bit so that it's a bit easier to figure out where we want to save it now my case I'll just manually type in the path so I'm going to say C drive colon slash user SL Tim SL desktop SL python automation which is the name of the folder that we are currently in okay now we can call the function so download video URL and save path and now what we need to do is just get a YouTube video URL let me just grab one of my videos and I'll be right back all right so I just loaded up one of my YouTube videos three types of projects that make you a programmer but I couldn't help but notice look at this link here enroll in my free software development introduction course that looks interesting let's click on that and you can see that we have start your career in software development and there's actually a free intro course you guys can take if you want that teaches you about how to break into software development if you are looking to actually land a job not going to show this too hard obviously there is a paid course here as well but there is a completely free one that gives you a ton of value it is 1 hour long if you guys want to check it out do that from the link in the description anyways we have our link let's copy the link and paste that inside of the URL variable and now let's save and let's run our code so python youube dopy give this a second to download okay and you can see now that we get the three types of projects that make you a programmer video downloaded successfully and I'd be able to open that up now and actually watch it if I wanted to pretty straightforward so now similarly to before what we want to do is make this code a little bit better just so that we don't have to manually type in this path and we don't have to manually type in the URL so let's scrap all this and let's now write something that makes it a little bit more user friendly so what we're going to do is make a function here called open file dialogue this is going to open the file dialogue which will kind of pick where we're going to save the folder or the file sorry first though we're going to say root is equal to tk. TK now what this does is just instantiate the TK module and kind of creates a TK window uh toer window right to be able to use this file dialogue you need a window but the thing is it doesn't have to be shown so what I can do is I can say root. withdraw now what that will do is it will just hide the window so you don't see it uh kind of appearing on the screen so we initialize the window hide the window and now we're actually able to use this root variable here um or really any tkinter type stuff to be able to open the file dialogue so what I'm going to do inside of this directory is say folder is equal to the file dialogue okay and this is going to be ask directory and then I'm going to say if the folder path so if they actually type something in then we're going to say print the FST string selected folder and I'm just going to print out what the folder was that they selected and then I'm going to return the folder here okay great so now I'm going to go down and I'm just going to make one single line here I'm going to say if uncore uncore name is equal toore maincore now you might be asking what the heck is this crazy line that I'm looking at Tim well what this line will do is make sure that you are directly running this python file before it executes anything that happens under this that's it all that means is that if you run this code directly this will run if you don't it won't the reason you would ever even need this is because sometimes you'll have some code inside of here that might be reused by another file so for example maybe our currency. py file uses something inside of here if we don't have this line and currency were to import this module that would actually run all of the code like it would run all this stuff here so actually with that in mind let's put this here so that anything we do is only going to happen if we directly run this python file I'm hoping that makes a bit of sense but you guys can ask chat GB here or look it up if you want some more clarification pretty standard uh python syntax anyways we're going to say the video URL is equal equal to input and we're going to say please enter a URL and this is going to be a YouTube URL and notice I just added a space here the reason for that is this input doesn't automatically put a space after it so I just put a space so that we'll get some separation with the colon okay so we're going to get the video URL we're then going to get the save directory so I'm going to say save dur is equal to the open file dialogue and I'm just going to quickly do something here I'm going to say if not folder like this and I'm going to say print please select folder dot dot dot we got to change this to say save directory and then I'm going to type continue like actually not continue uh yes please select a dur okay then I'm going to put an else here and I'm going to say download video video URL and save directory and actually rather than please select a folder I'm going to say invalid save location okay so what did I just do here I wrote a very simple line that simply asks for some input so it's going to get the video URL I then had this save directory so we're going to open the file dialogue you're going to see how that works in one second I'm just going to make sure that they actually did select a folder because it's possible they could just exit out of it if they did so which is actually in the L statement here I'm going to download the video if they didn't which is what this is checking I'm going to print they have an invalid save location now if we want this to be a bit more clear we could actually swap these around and say if they have a save directory then we'll download the video otherwise we'll do this and if we want we can do a little print statement here and say print started download just in case the download takes a while or you have slow internet so people know something is actually happening yeah zoom out a bit so we can read more of the code at once again all of this will be available from the description and let's give this a test python youtube. py enter a URL uh okay that's not the URL that I wanted let's go back here and grab my URL paste that in okay then notice it brings up a location so I could go desktop and what was this python automation okay now it's actually going to this isn't going to be good because it's going to save in the same thing okay let's just save it to my downloads I'm going to select downloads as folder notice it says started download okay we'll give this a second and then it should be downloaded inside of my downloads so if I go to my downloads CD dot dot CD dot dot CD downloads LS you can see that we have three types of projects that make you a programmer and it's been downloaded okay so that was it for project number two hope you enjoyed let's move on to the last project moving on to our last project we are going to write some code that will do an automatic folder backup for us this is actually pretty pretty simple uh but I just wanted to show it to you cuz it is kind of a realistic and real world project anyways what we need to start by doing is installing a python module just like before so we're going to say pip install and we're going to install the schedule module you could probably guess what this is going to do but it is going to help us schedule a kind of task to run now this will show you how to schedule really any task doesn't have to be a folder backup we're going to make a new uh python file here I'm just going to call this backup do pi and inside of here we're going to import a few things that we need so we're going to import OS which stands for operating system we're going to import shoe util or however you pronounce this which will do some copying operations for us we're going to import date time because when I back up a folder I actually want to save the new folder as the date that this was backed up so we can kind of have a history of all our backups I'm then going to import the schedule module and I'm going to import the time module okay we've got our Imports now what we need to do is specify what the source directory is so the thing that we want to back up and what the destination directory is so what I'm going to do is say my sourc dur is equal to and I'm just going to manually type in the path for this that I want it to be so I'm going to do c SL users SL Tim SLP pictures SL screenshots now you can do any folder that you want you just have to find the path to it now if you're wondering how do I find the path to it well there's a few ways you can do this now I have to show you on uh what do you call Windows cuz I'm obviously on Windows but if I open up my file explorer here and I go to my if I can do this pictures and screenshots what I can do is just click in the address bar here and it just gives me the path okay so that's how you would do this on something like Windows now on Mac you should be able to just open up a folder so you should be able to like right click on it and go to the properties of that folder or get more info about the folder and it should show you the path to where that folder is so that's how you can pick the location although I'm sure you guys can probably figure out how to find the PATH now we also need to have the destination directory so I'm going to say destination dur is going to be equal to and then here what I'm going to do is C colon SL users Tim SL desktop SLB backups now I just made a new folder on my desktop called backups you can put the folder wherever you want but obviously just make sure the folder exists that you're going to be backing up into okay so now we have the source directory and the destination directory we're going to make our function so we're going to say copy folder to directory and inside of here we're going to take in our source and our destination and we're going to say first of all today is equal to date time. dat. today now what that's going to do is simply give us the current day today that's all this does okay just gives us the daytoday based on our computer we're then going to say the destination directory is going to be equal to os. path. joyin and we're going to take in our destination which is PED here and we're going to combine this with the string of today's date now the reason I'm doing this is that we're essentially going to have this backups directory okay and inside of here we're going to have a bunch of folders all these folders will be our backup and those folders will be labeled like 11 you know 23 2023 right which is the current date so what I'm doing is I'm getting the current date and I am combining the current date with my destination directory so that inside of this directory I have a new directory which contains the backup which is named today's date okay now similarly to before we're going to do a try and we're going to say show you till. copy tree now copy tree just copies everything recursively which means anything inside of the folder it will copy and we're going to copy from our source to our destination directory okay make sure you don't use DES use destination directory because that's the new directory we just set up awesome then we'll do a little print statement here we can do an F string we can say folder copied to the destination directory and then we can do accept exception as e and actually I'm going to do something different because I'll show you how this works I'm going to accept the file exists error and I'm going to print an F string and say folder already exists in the destination now what this is doing essentially saying okay it's possible that an error occurs here when I try to copy my source directory to my destination directory if that's the case that means there's actually already a directory with the same name inside of this uh what do you call it base destination directory so so we are just going to catch that error so that our program doesn't crash and we are going to handle that by just printing out hey this is the error that occurred okay we're almost done so first of all right now if I want I can just do this so copy folder directory and I can pass my source directory and my destination directory now let's just open that up so if we go here and we go to desktop you can see I have backups nothing's inside of here okay now if I go ahead and run my code python backup. Pi we'll see if we get there or not it says folder copied here okay so if I open this up now you can see we have screenshots appearing now the name is a little bit glitched uh don't worry this actually will be named the correct thing for some reason whenever you copy a Windows created folder which is the one that I did it uh it kind of glitches in the ID so you can see date created actually shows the correct name here right but it's just appearing as screenshots cuz there's some kind of weird caching issue in Windows Explorer so it does actually have the correct name just trust me I was messing with this before too uh for some reason it it has like this weird um kind of caching thing if you were to like restart the computer you should see the correct name anyways not a huge deal I'm sure for you guys that worked because I got it working before but now what we want to do is we want to schedule this to run every single day at a certain time right because we want to back up consistently so what we can do is the following we can say schedule every. day. at and we can specify a Time and 24hour Time code that we want to do this backup at now for me right now it's about 652 so I'm going to just put this to 655 right now we can change that in a second and I'm going to do do and I just put the name of the uh function that I want to run whenever this schedule occurs so what we've done now is we've scheduled this task which is just a function right so notice I didn't call the function I just put the name of the function and what this will do here is call the function on my behalf now what we're going to see is that there's a little bit of an issue because we have our source and we have our destination which are parameters that we need to pass to this function so what we can actually do is write kind of a fancy line of python code which if you made it this far I will treat you with which is something known as a Lambda now I'm going to say Lambda and inside of here I'm going to put my sourcer and I'm going to put my destination ter now what I've done is I've essentially written what's known as an inline or a non is function so the idea is this do do takes a function that it needs to call the problem is we need to pass some parameters to that function there's a few other ways to do this but one way to do this is okay we're actually going to write the C of the function with the parameters that we need but we don't want to call the function we got to pass a function to this argument so what we do is we write our Lambda and now what this does is it actually wraps a function so it says okay Lambda is a function that's going to call this so now we're saying okay well we have a function inside of here so when we have do we call this Lambda function which then goes ahead and does this I know it seems weird but it's the same thing as doing this Define l and then inside of here you put this okay so let's copy this and paste that here and then rather than writing the Lambda we just put l which is the name of our function okay this is the exact same thing so the function does this which just calls this rather than doing this we use this Lambda which is this kind of inline Anonymous function bit more of advanced python syntax but hopefully you found it cool okay last thing we need to do we're going to say while true like this and we're going to say schedule. runor pending and we're just going to say time do sleep 60 seconds now let's just move this down a bit and I'll explain so what we're doing is we're scheduling a task run every day at 655 however the way this schedule works is that it's not actually going to execute the task for us until we have this scheduled. run pending call so what we're doing is inside of a w Loop which means just infinitely we are going to consistently run this run pending command which will look for any scheduled tasks that have been scheduled that haven't yet ran and it will run them for us we're then going to sleep for 60 seconds or 1 minute so we don't just constantly keep calling this but every 1 minute we're going to check because this will go up every minute right if the task needs to be ran and if it needs to be ran we'll run it if it doesn't wellon nothing will run so technically you could just leave this python file running forever in the background on your computer and every day at whatever time you put it's going to update your code obviously if you turn off the computer you need to rerun the python file but this is how you schedule a task to run at a certain increment now you can also do every week every year every minute every second like any increment you want pretty much you can set and you can schedule a task so in our case we did every day but you can do any increment you want now I need to make the time a bit further because it took longer to explain and we can test this so I'm going to say Python and backup. piy currently it is oh issue invalid time format for a daily job uh okay I think we need to do sorry it's cuz I have 657 it would need to be 0657 but what I actually want to put is the 24hour time code which is 1857 so now if I run this it's good it's just cuz I didn't have four digits for my time code so actually good error to run into there uh we want four digits now it's 6 uh 56 p.m. not 5 656 a.m. Sur so that's why I had that issue anyways I'm just going to wait one minute here and we should see that it will automatically actually do the backup for us let's give this a second and I'll be right back all right so it actually worked it says folder already exists cuz the folder is already in that location that we're trying to do anyways though it did automatically run this task as soon as it hit 657 now we could just continue to let this run and tomorrow at the exact same time it would then go ahead and run this backup task okay so I'm going to close this by hitting contrl C that's how you can actually quit this program when you have it running and there you go that will finish this uh video so I hope you guys enjoyed if you did make sure you leave a like subscribe to the channel obviously all of this code will be available from the link in the description and don't forget to sign up for my free introduction to software development course