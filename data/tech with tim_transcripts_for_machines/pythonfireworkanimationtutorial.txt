so recently my youtube channel tech with tim hit 1 million subscribers and i thought it would be a cool idea to create a program that launches fireworks to celebrate so i'm going to show you how we build this program in this video i'm going to give you a full tutorial and we're going to be using python and pygame to do this now i am assuming that you're familiar with python this is not a beginner python tutorial however if you don't know pygame that's fine i can kind of teach you the basics here now everything i do in this video is fully customizable so you can change the spread you can change the colors you can change the pattern of the firework this is meant to just give you a solid foundation and base for a program like this then of course please go ahead and customize it and tweak it as you please so i think that's all i have for this introduction thank you again to everyone for subscribing to this channel i hope you enjoyed the tutorial and we'll get into it after a quick word from our sponsor before we get started i need to thank mailgun for sponsoring this video mail gun lets you send transactional or bulk emails effortlessly regardless of your business use case mail guns ease of use worldclass support and powerful apis empower smart development teams to reach customers at scale mailgun can even prevent fake signups remove invalid email addresses and overall improve your email delivery and conversion rates mailgun helps hundreds of thousands of users around the world to provide connected experiences and drive smart results with mailgun's comprehensive analytics your team can use a datadriven approach so you're never guessing how your emails are doing or if they're being delivered with mailgun it's never been easier to build connected experiences and you can try mail gun today by using my link mailgun.com techwithtim thanks again to mailgun for sponsoring this video alright so let's get started with this tutorial i'm going to use visual studio code for my editor you can use whatever you'd like and i'm going to assume you have python installed now the first thing we need to do and actually the only installation step here is just to install pygame so go to a terminal or a command prompt window and type pip install pygame like that now for many of you this command may not work if it doesn't i will leave two videos on the screen and linked in the description that show you how to fix this pip command for both mac and windows now if that didn't work for you just try pip install pygame as well these are just kind of some quick fixes those videos will show you everything if these don't work you can also try python 3 hyphen m pip install and then pygame and alternatively python hyphen m pip install pi game again if none of those work then check the videos in the description or the cards on the screen okay so now that we have pygame installed we can actually start coding before i do that though i just want to bring up the finished product again and just quickly walk you through what we actually need to create here for this program to kind of function properly so looking at this here you can see that we have kind of firework launchers we then have the actual firework itself that kind of goes up in the air and then that firework explodes and we have kind of projectiles coming off of that so we need to kind of model this in our program by having three separate classes we're going to have a class for the launcher we're going to have a class for the actual firework going up and then another class for all of the projectiles and that's going to allow us to do this very dynamically and essentially create as many fireworks as we want uh once we kind of set all of that up so hopefully that made sense but that is what we are going to do and the first thing i'm going to do for us here is just set up kind of the pi game window and the main game loop and all of that and of course i'll walk you through that as we go so i'm going to say import pi game pygame dot init here just to initialize all of the modules and then we're going to say width height in all capitals because this is going to be a constant value for the width and the height of the screen is going to be equal to and i'm going to choose 800 and 600 you can choose whatever width and height you want and if this is too large then of course just make it a bit smaller for your screen next we're going to set up a pi game window so i'm going to say win is equal to pi game dot display dots underscore mode and whenever we do this we need to pass a width and a height so i'm going to pass the width and the height variable and this will create a window for us where we can draw all of our stuff now that we've created a window we usually want to add a caption for this so i'm going to say pygame.display.set underscore caption like that and i'll just call this fireworks exclamation point okay now that we've done that i'm just going to define a few constants here that we're going to use first one is going to be fps this is the number of frames per second we're going to run at i want this to be 60 so that's what i'm going to do and then i'm going to paste in here a bunch of colors now this is going to be red green blue yellow purple pink or sorry white pink and i think i have one other one in here either way it doesn't really matter exactly what they are they're just rgb values and if you guys are wanting to copy this yourself i'll leave a link with all of the code in the description for you okay so now that we have that set up let's just create a function that can kind of show our window and we can quit the window with so i'm going to say define main this is the function we're going to run as kind of the entry point of our program and then down here i'm going to say if underscore name is equal to main then call the main function if you're unfamiliar with this it just means if you actually run the python module itself as opposed to import the python module then run this function so really we don't need this because we're not going to be importing it but it's just good practice to put this here because if we were to import this module and we didn't have this like we just put main say down here outside of the if statement then it would run this entire code even though we might not want it to do that okay so now that we have the main function here what we're going to start writing is just our main event loop so in any pi game program we need something that's constantly running in the background that can essentially do things like increment our counters draw stuff on the screen handle maybe button presses or key presses all that kind of stuff and that's what we're setting up here in this main function so i'm going to say run is equal to true i'm going to say clock is equal to pygame.time.clock this is the object we're going to use to make sure our while loop that i'm going to implement a second here runs at a certain speed so i'm going to say while run and i'm going to say clock dot tick and i'm going to tick fps so what this does is essentially limits how quickly this while loop can run so that we're going to be running at 60 fps no matter how fast the computer is that's running this code so for example i have a very fast computer here and if i weren't to put clock.tick then everything would happen like instantly on my screen it would just go super fast because this while loop would not be limited in its speed and it's go it would go as fast as a single core on my processor could go whereas in this case when i put the clock now it limits it to 60 frames per second giving us a somewhat consistent feel across different devices okay so now that i've done that i'm going to say for event in pygame.event.get and this is kind of the event loop that i'm talking about here what this is going to do is loop through all of the different events that are occurring so if i press a button if i hit a key if i move the mouse all of that type of stuff and then we're going to check for a certain event so i'm going to say if event dot type is equal to pi game dot quit then what i'm going to do is say run is equal to false and i'm just going to break out of this for now run equals false we'll just set this variable to false so then we will exit the while loop and we'll stop doing this and what pi game dot quit is is when you hit the red x button on the pi game window which you'll see in a minute okay so then i'm going to come down here outside of my wall loop i'm going to say all right well if we're outside of the wall loop then we can quit pygame and then we can just quit python as well so we just quit and quit you don't really need both of them but it's fine we'll just put them here okay so now that we have done that we can actually run the code and we should see a pie game window pop up so let's run it here and notice that we get a fireworks exclamation point as the caption and kind of a black window nothing's happening now if i click x it should close and that's because we implemented this here in the event loop all right now that we have done that the first thing we can set up is a way to actually kind of draw objects on our screen so i'm going to say define draw and i like to separate everything out into different functions just so it keeps it clean and inside of this draw function is where i'm going to handle all of the drawing for my program now we're not going to have much in here but for now we'll just put wind.fill and i'm going to fill this with black because it's kind of like the sky right so i want black to be the background and then i'm going to say pie game dot display dot update and then we'll come back to this later on but for now i just want to call the draw function right here at the end of my while loop uh and again we will kind of continue and add to it as we have stuff to actually put on the screen right now we're just filling the background with black okay so now that we've done that what i'm going to start implementing is my launcher so remember we have kind of three objects here in fact we can write them out we have the launcher class we're going to have the actual firework class which of course will be launched from the launcher so put past there and then we're going to have projectiles which are kind of i guess like the parts of the fireworks right that are coming off of it so i'm going to say projectile like this and i'm going to do these all as classes assuming that i spell them correctly it'll just make things really simple for us so we have the launcher the firework and the projectile and what's going to happen is the launcher is going to create the firework and the firework is going to create the projectile so these classes are kind of all working together in the program all right so let's start with the launcher here i'm just going to define a few class variables that i want to use in here so i'm going to say width is equal to 20 and height is equal to 20 and then i'm going to say my color is equal to gray now whenever you see me type something in all capitals that's just denoting that i don't want to change this value within the program i want this to be a constant and that's kind of the convention in python so these are going to be the constants related to the launcher class so all of my launchers will have a width and height of 20 and they'll be a gray color feel free to change that if you want all right now that we've done that we need to take in some parameters in our constructor so i'm going to say define underscore underscore knit self x y and then frequency now the frequency is going to be how quickly we're creating new fireworks you could do this randomly if you want but i'm just going to make it a set frequency so ever so every sorry x milliseconds we're going to launch another firework out of that launcher and we can change that for each launcher so some could be like rapid firing some could be firing every 10 seconds or 20 seconds really up to you but that's why we're putting this parameter here so now that we've done that we're going to say self.x is equal to x self.y is equal to y and then self.frequency is equal to frequency uh and sorry this is just going to be x now x and y is going to be the starting position for the launcher that's where we're going to place it on the screen and just quickly before i go any further let me run this code here one thing you have to note is that in pi game the coordinate system has zero zero at the top left hand corner so right here where my mouse is that's zero zero if i were to go all the way to the right then that would be whatever the width of the screen is and zero if i were to go to the bottom of the right it would be whatever the width of the screen is and then whatever the height of the screen is coming over here it would be zero and then whatever the height of the screen is so in the middle is kind of like half the width and half the height uh keep that in mind because if you want to go upwards for example you need to subtract from your y if you want to go to the right you need to add to your y which is what we're going to be doing here okay so now that we have our initialization we're just going to place a few other things in here so i'm going to say self.start underscore time is equal to time dot time and since i'm using that i need to import the time module so i need some way essentially inside of my launcher class here to determine how much time has elapsed since i launched the last firework so that i know when to launch the next one so that's kind of why i'm putting that here and then next while we're in the initialization i'm going to say self.fireworks is equal to a list and that's going to store all of the fireworks that are currently on the screen that we want to be drawing and kind of moving upwards right so that's what we have for launcher okay so next let's implement a draw method i'm going to say define draw self and then i'm going to take in win and win is going to be the surface that i want to draw this launcher onto and yeah that's we're doing here so we're going to call draw for the launcher every time we want to draw its contents so inside of here i'm going to say pi game dot draw dot rectangle because i want to draw a rectangle for my launcher you can do it in any shape you want but i think a rectangle makes sense and i'm going to say win and i'm going to say self dot in all capitals color to reference this variable here from the class and then i need to pass an actual rect object which is going to be an x y width and height so i'm going to say self.x self.y self.width and self.height all right so that's all i need for the rectangle and for now that's good for our launcher so let's actually just draw the launcher on the screen make sure that's working then we'll move on to the next step so for our draw function since i want to do all my drawing in here i'm going to take a list of launchers and inside of draw i'm going to say for my individual launcher in launchers like that i just want to do launcher dot draw and i'm going to pass to this the window so win here is a global variable right we have that and we're just passing it to the draw function and then we'll draw this rectangle onto the screen okay so that's good but we need to now create a list of launchers so i'm going to say down here launchers is equal to and we'll just go with one for now and for the launcher what do we need to pass an x y and frequency and the frequency we're going to put in milliseconds so let me just make a comment here with ms so that we know it's milliseconds okay so for the launcher we want to place this at maybe 100 x and then i want this to be at the bottom of the screen so to put it at the bottom of the screen i need to place it at the height of the screen the issue with this though is that when i draw an object in pi game i start drawing from the top left hand corner so if i were to draw it at 100 and then the height you wouldn't actually see the object because the top left hand corner of the object will be right at the bottom of the screen so instead i need to subtract whatever the height is of the launcher so that i draw it you know in this case 20 pixels above the bottom of the screen and then it kind of fills down to the bottom so i'm going to say height minus and then this is going to be launcher if we could spell that correctly dot and then height now the reason why i like the class variables because i can just directly access them on the class uh name itself right okay so we have 100 height minus launcher height and then we need some frequency and in this case let's go with three seconds which would be three thousand milliseconds okay so now we have launchers now we just need to pass this to the draw function so we'll do that there and then we'll run the code and let's see we should get a launcher and we do we got one right there okay so the launcher is functioning uh next thing we need to do is actually create a firework every x seconds or so or every frequency seconds right so what i'm going to do here is make a another method and i'm going to call this loop now i'm going to call this every single frame so i'm going to call this once every while loop iteration and it's going to take care of you know creating a new firework and moving the fireworks and all that so inside of here i'm going to say loop self and then i'm going to say the max height or the max width sorry and the max height now the max width and the max height i'm assuming is going to be the screen height and the screen width or the screen width and the screen height and the reason we need this is because once a firework goes off of the screen we want to remove it right we don't want to be drawing something that's not on the screen so we'll get to this later on but i just need to put it in the function signature for now okay so the first thing we're going to do here is just determine if we should be launching another firework so i'm going to say current time is equal to time.time and the way i determine how much time has elapsed is i just take the current time and then i subtract from it whatever the time is that we started at so i'm going to say time elapsed like this is equal to the current time minus the self.start time so now i'm going to say if my time elapsed and then this is going to be multiplied by a thousand because this is going to give me the time elapsed in seconds is greater than or equal to the self.frequency remember the self.frequency is in milliseconds so we're just converting to the same unit if that's the case then i'm going to reset my start time so i'm going to say self.start time is equal to the current time and then i'm going to say self.launch and this will be a method that we need to write so let's just write the stub for this now define launch self and then in here we'll create a firework but again we're not going to do that uh this second okay so that what that's what will happen this will essentially launch a firework for us every x seconds or so but now what we need to do is we need to actually move all of the fireworks now i'm just going to leave a comment so move all of the fireworks because we don't have the fireworks created yet so it doesn't really make sense to be moving them but that's what we're going to do here in the loop okay so i apologize because i do actually have to write a fair amount of code before we can really see any progress on the screen just based on how the program works so just bear with me i think this is simple enough that we don't really need to test this and we're going to go to the firework class now and then hopefully kind of view the firework moving up once we finish coding this so for the firework we need an initialization as well and we need a few class variables so the first class variable i'm going to have is a radius of the firework because it's going to be circular i'm going to make this 10 and i want to know the maximum number of projectiles that should be launched from a firework because we'll make this slightly random so i'm going to say the maximum number of projectiles we want to have is 50 and the minimum number of projectiles is going to be let's go with 25. so we'll have something in this range when we actually generate the projectiles and then we want to have a projectile velocity so i'm going to say projectile vel is equal to 4 and that's essentially how quickly it moves in any given direction all right next we're going to have an initialization so we're going to say init and we're going to take in the self the x the y and then we need the y velocity of this firework because we're going to be moving it upwards right and we need to know at what speed we want to move it up that's different than the projectile velocity the projectile velocity is um the projectile is coming off of the firework whereas this is actually moving the firework upwards until it gets to its launch height or its explode height which is what i'm going to take in here so i'm going to say explode height is the next thing that i want and then for my firework of course i need a couple so for all of these i just need to put myself before them so self.x is equal to x self.y is equal to y self.y value is equal to y val self dot explode height is equal to explode height and self.color is equal to a color okay so as our initialization we're going to just put a few other things here as well we're going to say self.projectiles is equal to an empty list because similar to the launcher we need to keep track of all the projectiles associated with this individual firework we're then going to have self dot exploded and this is going to be equal to false and that's just going to indicate whether or not we've actually exploded the firework because that will change the way that we draw it right okay so now that we've done that we are going to write a few methods the first method that we'll write is our draw so i'm going to say define draw i'm going to take in myself i'm going to take in my window and for now we can just draw a pie game circle but i only want to draw this circle if i have not yet exploded so i'm going to say if not self.exploded then i just want to draw a circle representing the firework because it's kind of going up in the air so i'm going to say pygame.draw.circle excuse me window self.color we need to then pass the center of this circle which is going to be the self.x and the self.y position of this individual firework and then lastly we pass the radius which will be self dot in all capitals radius uh we'll be referencing the class variable here and i actually did something in my terminal here i don't know what this is let me just quit that okay there we go all right so now we're back we have draw now if we have not exploded we'll do this however uh no matter what what i want to do is just loop through all of my projectiles so four projectile in uh self dot projectiles and then i want to draw the projectiles and again doesn't make a ton of sense because i don't yet have the projectiles defined but just like on all our other classes we'll have a draw method and we'll have width so we'll loop through all the projectiles and we'll draw all of them um if we if we have them right and you'll see how we create those in one second okay so that's all we need for now actually i lied we're going to add one more method and this is going to be move so just like we need to uh move yeah we need to move the firework upwards so that's that's what this function is going to do or this method so i'm going to say define move and here again i'm going to take this max width and this max height just so that i know when this firework i should stop drawing it on the screen again we'll get to that in a second okay so i'm going to say if we have not exploded yet then what i need to do is i want to move this upwards so i'm going to say self.y plus equals the self.y velocity and that's just going to essentially be moving our firework in whatever direction this y velocity is so if this velocity is negative we're going to move upwards because we're subtracting from the y if it's positive we'd move down now of course we want to move up but i want to make this dynamic so rather than having a minus equals i just do a plus equals and now if you pass a negative loss that you go up if that's a positive you go down i guess it would work the same in the opposite direction but that's fine okay so we're going to move our y but now what we need to do is determine if our y is at the explosion height because we need to explode the firework and create the projectiles once we get to a certain height right so i'm going to say if the y so self dot y is greater than or equal to the self.explode height then what i'm going to do is say self.explode and i'm going to explode the firework so that means we need an explode method so i'm going to say define explode self and then in here we can actually just say self dot exploded equals true and then we would need to create the projectiles around this firework all right so i want to test a bit of this before we go any further so i just need to write a bit of code that's going to move this firework and draw it and we'll do that from within the launcher class then once we have that we can test and make sure that the firework is moving properly then we'll deal with the projectile uh the projectile creation is the most complicated just because we have to do a bit of math to determine like the angle to launch off the projectiles uh anyways let's go back to launcher for now let's create our fireworks let's move our fireworks and and continue here so for our launch we need to make a fire so the first thing we need to make our firework or one of the things we need is a color so i'm just going to say color is equal to random.choice and then i'm going to choose from the colors list that we defined above and now that i look at it this can be all capitals and i need to import the random module as we can use that functionality so let's go back down here and let's change this to be all capital colors like that okay so now we have a color uh the next thing we need is it is an explode height so i'm going to say the explode height is equal to random.rand range and then i'll just hard code these values i probably would be better to have them in a variable but for now i'm just going to go with something like 50 and 400 so we're going to be picking a height near the top of the screen that we want to explode at recall that the lower the number the higher we are on the screen so 50 is very close to the top of the screen and 400 is about in the middle of the screen actually i don't know what the height is but it's close to the middle so that's the explode height uh and then next we want to make our firework so i'm going to say firework is equal to and then firework and we need to pass to it the x y and then the explode height we also need to pass the velocity and the color so the x is going to be self.x uh the y will be self.y because it's just going to be launching from wherever the launcher is positioned which are these two values then we need to pass the velocity in this case i'm going to pass negative five and then next is the explode height so we'll pass that and then the color now one thing i'm going to do is just add a value here this is going to be self dot width divided by two now the reason for this is that i'm going to be drawing a circle and when i draw a circle i draw from the middle of the circle right recall when we have the circle where was it here this is the center position that we're passing so since it's the center and not the top left if i were to draw it from self.x then it wouldn't look like it's coming out of the center of the uh the launcher so that's the reason why i have the self.width over two so that i'm now centering this i'm moving it in this case 10 pixels over to the right so the center is actually in the middle of where the launcher is and that's why i'm doing self.width over two okay anyways we create the firework here uh now we're going to say self.fireworks.append firework we need to add it to that list for it to actually be drawn and all of that and now i'm going to go to my draw function and i'm going to draw all my fireworks so i'm going to say for firework and self.fireworks we're going to say firework it should just be firework like that dot draw and then we need to pass the window now in the same fashion i'm just going to copy this for loop here and i'm now going to move all the fireworks where i have this comment so i'm going to say for firework in self.fireworks and i'm going to start moving them so to move them i'm going to say dot move and then i will pass to it the max width and the max height again we haven't used that yet but we will shortly that's why we're passing it along and next i'm going to just check something to make sure that i'm not drawing a firework or in this case actually moving a firework if it um has exploded already so let me just write this out and then i can explain it more clearly but i'm going to say if firework dot exploded remember that's a boolean value we have on there uh and the len of firework dot and then this is going to be what is this uh projectiles is equal to zero uh then i'm going to remove this firework so this is going to be a bit weird just bear with me for one second i'm going to say fireworks to underscore remove is equal to a list and i'm going to say fireworks uh and then underscore two underscore remove dot append firework and then let me just finish this up and then i'll explain for firework in fireworks dot remove self dot fireworks dot remove and then firework okay apologies for going quickly there but i just need to get it all down before i could really articulate what's going on so what we're doing is looping through all the fireworks we are then moving all the fireworks we need to call this move method to move them upwards right and this loop method will call from inside of main we'll do that in a second and he was removing all of them uh the thing is i don't want to be moving a firework and doing unnecessary computations if the firework is kind of off the screen so i'm saying if the firework has exploded and we don't have any projectiles so that would mean that uh the projectiles are off of the screen we're going to remove them from the projectile class or from the firework class story so we'll deal with that later but if the firework exploded and we have no projectiles there's nothing we really need to be doing for this firework so let's just remove it i don't want to be drawing something on the screen if i don't have to and in fact if i were to continue to draw this on the screen or to continue to move it then i get a ton of lag as the program continued on because i'd have all of these fireworks that are off of the screen that i'm moving and drawing etc so that's why i'm removing them now the reason i can't just directly do self.fireworks.remove is because i'm currently looping through self.fireworks so i could actually fix this by just making this a copy but i don't want to do this so what i'm doing instead is making a list here fireworks to remove i'm going to append all of the fireworks i want to get rid of and then i'm just going to have another fi for loop here sorry where i remove all of the fireworks after i've looped through them so you just you don't want to be mutating something that you're iterating through so that's kind of why i'm not doing that here and instead i'm doing the second for some of you will probably have a more elegant solution for this but for now this is fine all right so i actually think that's all we need for the launcher class we have a launcher now what we need to do is move the launcher or call the loop method so from main i'm going to say for launcher in not holders launchers like that and then we'll simply call launcher dot move and we'll just pass the width and the height of the screen as the max width and the map max height for our fireworks okay so quick recap here we have our main function this is the main event loop i'm drawing all of my launchers and just doing all of the drawing here and i'm moving all of my launchers or sorry this needs to be dot loop not dot move so i'm calling the loop method on each one of my launchers inside of this loop method i'm calculating the time elapsed if it's been past the frequency time so past three seconds or whatever we set we'll launch another firework then what we do is we loop through all the fireworks we move them and we check if they're exploded and if we don't need to be moving them or drawing them if that's the case we add them into this list and then we remove them here at the end and that's pretty much it and then within the firework uh we're just moving the firework based on kind of the logic that we have inside of here and making sure that we're not moving it if it's already exploded all right let us run the code here and let's see what we get we should see a ball being launched here from the launcher and just moving upwards every few seconds now it doesn't look like that's happening so i might have to go back to the drawing board here um yeah let me have a look at what's wrong and i'll be right back all right so i made a pretty silly mistake here i'm saying if self.y is greater than self.explode height instead of the move method for my firework then i'm going to explode now the reason this is incorrect is because my y is actually going to be greater than my explode height in every situation so because i have this condition here i'm instantly exploding my firework which means i'm instantly not seeing it because i don't have any projectiles to shoot off so i just need to change this to be a less than or equal to the explode height uh because that's actually correct if we're less than the explode height that means we're above it on the screen so we do want to explode so just change that symbol from a greater than sign to a less than sign or just copy the code from the link in the description anyways let's uh let's run this here and now hopefully this should work assuming i didn't make any other errors uh and we got an issue it says tuple object is not callable um okay so i just forgot a comma here when i'm drawing my circle so let me just add the comma and let's try this again and fingers crossed one two three and there we go we see an orange ball go up and then at the explode height it's gonna go away uh because that's what we've set it to do and this would work for all of our launchers notice that we're getting kind of a random exploding great so that's what we want now that we have that let's deal with the projectiles and actually having something interesting beyond the screen because obviously this is kind of the boring part until we get to the projectiles so let's create some projectiles so for the projectile we are going to have just a rectangle so we're going to have a width in this case i'll say that's 5 and a height and i'll just go with 10. now i also want to kind of fade these projectiles like i want to have a transparency to them so they appear like they're fading off in the screen and the way i'm going to do that is by having an alpha property and i need to decrement this alpha property so i'm going to say the alpha decrement is equal to 3 just meaning i'm going to subtract 3 from the alpha and alpha is like your transparency property so you start at 255 that's totally opaque uh and then as you go down to zero you are completely transparent hopefully that's clear but that's what we're doing with the transparency in a minute so i'm gonna define my constructor here i'm gonna take in myself my x and my y and then to move i need my x velocity i also need my y velocity and lastly i need my cup so since we want to move potentially on a diagonal here not just up or down i need two velocities one for both direction and if we move both of them then we can move kind of in a diagonal line right so here we'll say self.x equal to x self.y is equal to y self.xfl xvl self.y val self dot color it's very nice to have a great autocomplete we're also going to set manually an alpha here of 255 and then we'll decrement that as we move the file now this actually will be pretty simple the firework itself we're going to say define move we're going to say self and then we actually don't need to take anything else we can just say self.x plus equals the self.xvel and then we'll say the self.y same thing plus equals the self.y value and then we're going to say the self.alpha is equal to and this is going to be the maximum of 0 and the self.alpha minus and then this will be the self.alpha decrement now the reason i need the maximum here is because i cannot have a negative alpha if i had a negative alpha that's going to give me an error it's going to crash the program so if we get to a position where the firework is still on the screen we're still drawing it but the alpha is less than 255 then we'll just make it zero so it will appear like it's not there all right next we're going to have draw now inside draw we're going to take self and win and we're going to draw something here but i need to make another method this is actually going to be a static method and this is going to be draw alpha so i'm going to say define draw and i'm going to actually be say rect alpha like this and the reason i'm writing this is because to draw a surface with transparency in pie game is a little complex so we're going to put it in its own method so we have a static method because it doesn't actually need access to any of the properties from this class and i'm going to take my surface my color and my rectangle and i'm just going to draw on the surface with a specific color uh a rectangle that has transparency associated with it anyways you'll see what i mean as i code this out so i'm going to say that my shape underscore surf or surface is equal to pie game and i'm going to make a surface so if you're unfamiliar with pygame everything that you draw is a surface now the window here like this is actually a surface but i'm creating a surface and i'm going to enable transparency on the surface which is what you have to do for it to actually accept an alpha property when you're drawing it so i'm going to say pygame dot and then rect and i'm going to pass to it a rect here and we're going to treat this just as a four item tuple which is x y with height but i need to convert this to an actual wrecked object to work with the surface object in pike again it's just four properties x y with height but it needs to be a special object so we're wrapping it there and we're gonna pass actually the size which will give us the width and the height which is what the service needs okay next we are going to enable transparency so to do that we're going to say pi game and then this is going to be src and then alpha like that like that there you go and that will allow transparency for the surface so now that we've done that what we're going to do is apply a color to this surface so we're going to say pie game dot draw dot and then we're going to draw a rectangle where are we going to draw it well we're going to draw it on the shape surface we're going to draw it with a specific color and then i'm actually going to pass here the shape underscore surf like this dot get underscore wrecked so it's a bit weird but what i've done is created an empty surface which is the size of the rectangle that's passed in then i'm going to draw to this surface whatever color we pass which will have a transparency property associated with it as well as the size of the rectangle of this surface i'm just filling the entire surface essentially with a color that has transparency and then lastly i'm going to take my actual surface which in this case will be the window and i am going to blit the shape underscore surface and the rectangle like that the rectangle is the position that i want to put this at okay i know this seems a bit weird if you don't understand this totally fine i actually just took this code from stack overflow i'm trying my best to explain it to you what blit will do is it will take one surface and put it on another surface so we're saying the surface which is going to be the window dot blit and then we're taking the shape surface which is a transparent rectangle and we're placing it on there and the position we're placing it on there is the rectangle position which will give us the x y um etc so now from draw all we need to do is say self dot draw rect alpha we're going to pass the window we're going to pass the color and this is going to be self.color but we're going to say plus and since self.color is going to be a tuple uh we're going to add to it another tuple that contains the alpha property so i'm going to say self.alpha and then a comma because whenever you surround something in parentheses if you want it to be a tuple you need to have a comma after so that's what we're doing that for and then for the rectangle we're going to pass self.x self.y self dot and then this will be the width and self dot height all right so the complex uh the complexity here is done now with the projectile that's all we need for that class now we need to create projectiles in some type of pattern and then move them around on the screen so inside of explode is where we want to create our projectiles um and i guess we can start doing that now so we're going to do two patterns one of them is going to be a star and one of them is going to be a circular pattern so let's start with a circular pattern i'm going to say define create circular underscore projectiles and for here we're going to take in self and we're going to take in the number of projectiles that we want now what i need to do is i need to determine let's go back here for one second the x velocity and the y velocity of every projectile that i have such that it appears in a circular pattern so let me just quickly go to my drawing screen here uh if i can pull this up always forget which one it is a windows ink is right here okay whiteboard uh and let's just have a look at how we actually do the math here all right so i made it to the whiteboard here and i'm gonna give you a quick trigonometry lesson on how we actually do this uh so we have a circle we're familiar with the fact that a circle has 360 degrees worth of angles what we want to do is launch fireworks off kind of at an even displacement or an even distance around the circle right we want them to come off completely evenly from the circle and to do that we need to use a little bit of trigonometry so we know the circle is 360 degrees and something you need to know many of you may know this if you're familiar with trigonometry but if you're not then this is the following so 360 degrees is actually equal to 2 pi 2 pi is what's known as the radian or yeah the radian of the angle 360. so rather than using degrees we use radians in like computer math and just in general trigonometry so just be familiar with 3 pi equals 2 pi uh and or 360 square equals 2 pi and that means that 180 equals pi and 90 is going to equal pi over 2. so if we're looking at kind of our quadrant let me just see if i can move this over here uh whenever we're dealing with angles i like to just draw out kind of a quadrant here we have our quadrant we know there's 360 degrees and we also know that because we have four 90 degree angles here the first angle we have is zero then this based on our radians is going to be pi divided by two then we're gonna have pi then we're going to have 2 pi actually we're going to have 3 pi over 2 because we need one and a half pi and then as we come all the way back here we're going to have 2 pi as the angle okay so just keep that in mind these are the different angles that we have um based on this kind of quadrant right where again pi over 2 is 90 this is 180 this is 270 this is 3 6. so now we're going to say loop through all of our fireworks and we're going to essentially pick angles from 0 to 2 pi that we want to launch these projectiles or fireworks off at so we're going to have you know a bunch of different angles that we select that we want to launch the fireworks often so hopefully you're following so far but we're going to be launching at a bunch of different angles so once we determine the angle that we want to launch at we need to then determine the x and the y velocity that we need to create to move the firework in that direction so if i have an angle here right let's just do this let's create a right triangle so actually let me just redo this again i'm drawing with my mouse guys so just give me a break here we want to launch in this direction we have some angle theta and we know the velocity v that we want to launch this firework off at we want to launch that you know four pixels per second or something along those lines and we know the angle now if we know that information we can solve for x and y and uh that will allow us to determine the x component or the x velocity and the y velocity we need to move the firework at to move at this angle so how do we now solve for x and y well there's a few uh little shortcuts for equations that i like to write down so i have so and then i also have toa again please excuse the handwriting this is kind of horrible but i have sohcahtoa and this stands for sine is equal to the opposite over the hypotenuse this is cosine is equal to the adjacent over hypotenuse and then toa that's tangent is opposite over adjacent all right so i've written these equations here now we know what they mean and let's just go through opposite hypotenuse and adjacent so the hypotenuse is the longest side which is v opposite is the opposite side to the angle so kind of what it's facing which is right there and then a is the other angle so not the hypotenuse or sorry the other side so not the hypotenuse and not the opposite so in this case that's adjacent so what i need to do is find a way where i can solve for o in this case it's going to be y using values that i know in this case i know the value theta and i know the value v these are kind of like question marks um in a sense right so if i want to solve for y i look at my equations and i find something where i have the angle and i have the hypotenuse in this case we have it here sine opposite hypotenuse so i have the angle i have the hypotenuse and i'm going to solve for o so i say that the sine of theta is equal to and then that is going to be the opposite over my hypotenuse but my hypotenuse is a value v which is a velocity that we'll know let's say v is equal to 4 or something okay so now if i want to solve for o all i have to do is multiply v by the sine of theta and that gives me the um the value for o and in this case that's the velocity that i need to move at in the y direction going upwards hopefully you're following again hard to do this without a pen and paper because i'm doing this with my hand and mouse but hopefully you get it and the same thing now is going to apply for the value x now when i want to solve for x i'm going to use the equation cosine is the adjacent over the hypotenuse and really all that means is that i'm going to multiply the cosine of the angle by x as opposed to the sine of the angle by y i'm going to do this in code so it should make more sense but that is practically the trigonometry lesson for today that i needed to give you all right so now that we are done with the math thank god we can go back to create circular projectiles and i can actually start writing this out so i'm going to say my angle difference or angle diff is going to be equal to and then this is going to be math.pi multiplied by 2 which remembers 360 degrees divided by the number of projectiles that i have because i want to evenly move around the circle uh and that's that's how i get this right how many degrees i should essentially shift for every projectile that's what this value is i'm then going to create a variable this is going to be current underscore angle is equal to 0. now next i'm going to determine my velocity and i'm going to do this slightly random i'm going to say random dot rand range like that and then i'm going to say the self dot projectile val one and the self.projectile valve plus one just so i get some uh variance in the speed at which my projectiles move at now it's very slight because i'm just going down one or up one you can adjust this if you want that's what i'm doing for velocity now what i need to do is i need to loop through all my projectiles so i'm going to say 4i in range and then the number of projectiles that i have and the number of projectiles we will randomly generate in a minute now that we have that we need to determine the x velocity and the y velocity of the projectile so i'm going to say the x velocity is equal to math dot and then this is going to be sine and i don't actually know if i have math imported yet i don't so let's import math okay come here and we say the x velocity is math.sine of the current angle that i have multiplied by the velocity just like i showed with the equation that's what we're doing then i'm going to say the y velocity is equal to math.cosine of the current angle multiplied by velocity okay so we have x and we have y now we need to determine the color so for the color i'm just going to say this is random dot choice and then this is of colors this randomly sucks a color for us and then i'm going to say self.projectiles.append and i'm going to create a projectile like this and to create a projectile i need to pass my self.x this is where it starts self.y i also need to pass my x velocity my y velocity and my color and let's just confirm here we have x y x val y val color looks good to me okay so we create a projectile and then lastly we need to increment our current angle by the angle difference so that every single projectile is slightly shifted in this case is going to be to the right and we will complete 360 degrees worth of projectiles being shot off by kind of different angles so that's what this will do now inside of explode i will just call this method so i'll say self dot create circular projectiles but i need to pass through it a number of projectiles so i'm going to say my num projectiles is equal to and then this is going to be the random dot rand range and this will be the min projectiles and the max projectiles but don't forget the self okay there we go so now we actually have pretty well everything we need assuming we pass numb projectiles to now view a circular pattern of projectiles coming off of our fireworks again i apologize that it got complex at the end there but i do try my best to explain everything that we're writing rather than just making you write it out with me hence the trigonometry less so let's run the code here and prepare to be amazed uh assuming that we didn't mess anything up let's have a look here and we got an error okay so not as amazed as i thought we have projectiles is not defined and the reason that would be the case is because where is this we are on line 100 uh this is what we need to say project dial not project dials dot draw so i had an s need to just remove that and now we should actually be able to draw them so let's run the code now and see if we got any other errors okay so we launch it and there we go okay so you can see that a rectangle is being created the issue right now is that we're not actually moving the projectiles so that was kind of an oversight by me we need to move them otherwise they're all going to be placed in the same place and we're not going to see them move so to move the projectiles we need to go to our firework which is right here and we need to now implement something in the move method apologies guys totally overlooked that but i'm going to say similar to what we did with the fireworks projectiles to remove is equal to an empty list and i'm going to say 4 projectile in self.projectiles i'm going to say projectile like this dot move and that's all we need and then i'm going to check if the projectile is off the screen and if it's off the screen i'm going to remove it so i'm going to say if projectile dot x is greater than or equal to and then this is going to be the max width that's why we had to pass this year or the projectile dot x is less than zero then what i want to do is remove it and the way i remove it is projectiles to remove dot append projectile i'm going to say l if the projectile.y is greater than or equal to the maximum height or the projectile dot y is less than zero then the exact same thing projectiles to remove dotted pen projectile and then we will loop through all of those so we'll say for projectile in projectiles to remove and then we're going to say self.projectiles.remove the projectile and notice my autocomplete did a fantastic job there because i'd written the same thing previously all right so that's what we need for move pause the video if you need to complete that i'm going to run the code though and hopefully fingers crossed we will see the projectiles moving so let's have the firework ball come up and there you go we get the projectiles going and fading off into the distance so let's create a few more launchers just so we get a nice kind of aesthetic effect here and then i will implement the star pattern and then we're pretty much done so let's just copy this launcher let's make four of them let me just save this so we have some more space uh let's change the frequency to be like four two and maybe five and yeah we also need to change the x value so let's change the x to be 300 500 and 700 and now let's run the code and see what happens with four okay so they're not completely evenly spaced out but that's fine by me and we can see that they're all going to launch and work properly and we shouldn't experience any lag because we are removing all of the stuff once it's kind of off the screen and we no longer need to be drawing sweet so let's do the star pattern uh the star pattern i'm not going to show you the trigonometry for because i'm sure i've already bored many of you with that i'm just going to write it out and yeah hopefully i can do a good enough explanation so for the star pattern it's going to be slightly different than the circular pattern what i want to do is launch projectiles kind of at a different speed in the same eight direction so since it's a star i'm just going to pick eight different angles that i want to launch at and then launch at a different speed so that it looks like projectiles are kind of moving like with each other in the same direction so i'm going to say define and then this is going to be create underscore star underscore projectiles like that i won't take in the number of projectiles because for this one we actually need to set it to an even number all right so inside of create star projectile i changed it from start to star by the way so we spell it correctly i'm going to do the fall i'm going to say my angle like this underscore difference so underscore diff is equal to and then this is math dot pi divided by four the reason i'm doing that is because we want to have eight separate angles that's just what i've decided uh so if we do math dot pi is the angle difference and that will give us eight unique ones because if we know that two pi is uh 360 the amount that pi over four is one eighth of 360 and that's what we're doing this for next we're going to have our current angle that's going to be equal to zero and i'm going to say 4i in range and then we need to just decide manually how many projectiles we want to have so in this case i'm going to go with 64 projectiles and ideally we'll get eight projectiles going in each direction now since these projectiles are moving in the same direction they need to have a different velocity or a different x and y position otherwise we're only going to see one projectile in each direction so the way that i'm going to fix this i'm going to say that the velocity is equal to and then this is going to be the self dot projectile velocity plus and then this is going to be i mod uh and actually this is going to be a little complicated to do but i'm going to do i mod 4. um is this going to work i don't know if this is going to work properly so actually scrap that i've been changing this back to i mod eight i've just been confusing myself with how i'm gonna do this okay i'll explain why that's gonna work in a second uh but let's continue so we have vel is equal to that and i'm actually gonna change this to be one to just so that my modulus operators work as i expect them to and now i'm going to calculate the x velocity and the y velocity so the x velocity is going to be the math dot sign of the current angle multiplied by my vowel and then for the y velocity it will be this just the opposite with cosine next i'm going to have my color random.choice colors and then i'm going to say self.projectiles dot append not star projectile although good guess autocomplete and this is going to be self.x self.y x y y val and color and then we need to increment our uh current angle so i'm going to say if and then this is going to be i plus 1 mod eight and actually i don't need the plus one because i started at one so we're gonna say if i mod eight is equal to zero then the current angle plus equals the angle difference so essentially what we're doing here is every uh i guess what is this gonna be every eight uh projectiles we're going to increment the angle so we're gonna launch eight projectiles in the same direction with a different speed so we create kind of this starlike pattern um on the screen that that's what this will do i can't really explain it much more than that so now what we need to do though is figure out a way to programmatically decide if we wanted to uh create circular projectiles or create star projectiles and we'll just use a random number to do that so i'm going to say if random.randint and we could just say zero one is equal to zero then we will do this otherwise we'll do the star projectiles uh so no self dot create star projectiles like that okay so i think that's actually all we need that should complete the project so let's run this now and see if we get any star projectiles on the screen that are moving in the correct direction okay so there you go we got the star and notice how the star is like super fast because of the way that i've done the velocity and that we're launching eight in that direction now if you wanted to kind of make these less exaggerative what you could do for the star is instead of doing 65 you could just do 32. now if you change this to 32 you have to change the velocity accordingly uh to be mod 4 so you're doing half of what you did before and sorry this needs to be 33 because of the number of projectiles now to fix this we could just say num projectiles we can do this programmatically instead so if i make this now in the case 32 then i say num projectiles plus one and then rather than imod four i'm gonna do i mod and then this is gonna be the number of projectiles divided by eight because we have eight unique directions so now this will just work and you'll see that we get less going in a direction and they'll actually end up be going a bit slower too so let's look at this now and let's see if we get any stars all right so actually i made a mistake here now rather than doing i mod 8 i need to do the same thing i mod number of projectiles over 8 and then that will work properly and we won't get the angles cutting off so let's try this now and let's see what we get and there we go now we get a proper star and it's programmatic and we can change it and mess with the speeds and all of that all right this was a long tutorial guys i apologize near the end it did get a bit confusing i wasn't planning on going that in depth in the math but i obviously wanted to try my best to explain it to you hopefully you guys appreciate this and enjoyed and now we are officially celebrating together 1 million subscribers again massive thank you to all of you guys for supporting me on this channel the comments are just amazing yes i don't reply to all of them but i do read them all and really this has just been awesome to hit 1 million subscribers so thank you guys so much hopefully you enjoyed the video if you did you know what to do like subscribe and i will see you in the next one