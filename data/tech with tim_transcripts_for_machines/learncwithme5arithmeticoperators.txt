hello everybody and welcome to another c plus plus tutorial for beginners now in this video what i'm going to be doing is showing you arithmetic operators now arithmetic operators are like addition subtraction increment decrement and the things you use on numbers so floats and ins so with that said let's dive into the video so i've got my starting c plus plus code defined i have my main function and what i'm going to start by doing is just listing out all of the operators that i'm going to show you so i'm going to use a multiline comment remember that is the forward slash asterisks and then asterisks backward slash and these are the operators i'm going to show you in the order that i'll show them to you so plus minus division multiplication and then increment and decrement so plus plus means increment by one and minus minus means decrement by one i will show you that when we get to that so what i'm going to start by doing is defining two variables i'm going to say index equals 8 and i'll say into y equals 9 then i will say int sum equals x plus y now when you're using arithmetic operators make sure you understand the types of your operands so the operands are just the things on the left and right hand side of your operator so an operator performs an operation on two operands so in this case x is an operand y is an operand and the addition sign here is the addition operator so when i say in sum equals x plus y my left operand is an int my right operand is an int and so my result is going to be an int so it's very important you understand the types of your operands because when you have different typed operands you may have some type of errors for example you cannot add an integer to a string right that is an undefined operation because the operands are of different types so anyways let's just see out some let's just make sure that this does actually work and i'll go through the other operators of course addition is straightforward it is just addition so let's compile the program i actually want to compile tutorial 5 and then let's run our program and we see we get 17 the addition operator does work now of course we can chain these operators together as well i could add you know a 3 at the end here so i say x plus y plus three c plus plus it does follow the standard order of operations and i will show you that later in the video but anyways let's uh compile this let's run and now we get two uh wait why is it that we're getting two i keep compiling tutorial 4 sorry i want to compile tutorial 5. okay let's run this there we go so now we get 20. awesome so that is the addition operator now of course we have the subtraction operator the subtraction operator could give you negative numbers negative numbers are valid in programming languages and in c plus plus uh so let's run this we are going to compile okay why do we keep compiling tutorial 4. i want to compile tutorial 5. okay run program and there we go we get negative 1. so addition subtraction pretty straightforward now let's move over to division and sorry what did i say division i meant addition and subtraction okay so anyways we're going to divide two numbers now x divided by y so let's compile this and let's see what we get so notice that what i have here is i have 8 divided by 9. so take a guess of what you think we're going to get i don't expect you're going to give me the exact fractional value but what do you think is going to show up here so let's compile this let's run and notice we actually get 0 here that's kind of strange eh because we probably should have gotten a floating point value 8 divided by 9 is not 0. we just know that is not the correct answer so why is it that we are getting 0. so the reason we get this is because our left and our right operands are both integers so whenever you perform an operation and both the operands are the same type whatever your result is is going to be the same type as both of those operands so in this case we have two ins which means our result is going to be an int so even if this division gave us like 0.87 or whatever the result actually is here we're just going to get zero because we're going to remove that entire entire decimal portion sorry because both of our types are ins now even if i change the type of the variable here so i change my sum variable to be equal to float you're going to see that we still get the same thing it doesn't matter if we change the type of this variable we're not all of a sudden going to get the floating point result now we are still going to get the integer 0 because both of our operands are int's now let me show you what happens though when we change only one of these operands to a float so as soon as we change one of these operands to a float and we compile our program so let's compile tutorial 5 and let's run it now all of a sudden we get the correct result so as soon as you have one of your operands being equal to a float that means that you are going to get a float returned the reason for that is that the float has a higher level of precision than the int and so to get a valid answer you need to have a floating point result so just keep that in mind whenever you have a float and you're using arithmetic operators the result will be a float if it is a floating point result right so if it's just one or if it's just zero regardless of the float or ins you're still going to get that but if you could get a floating point value like in this case 0.8889 or whatever it was you will get that when you have one of these floats now when we change the other one to float and then we change this one to int i will show you we will get the same thing it doesn't matter which operand is a float as long as one of them is so compile run we get the same thing if both of them are floats this is all good so let's go float now let's run this okay run program but now what happens when i change the sum variable back to an int well take a guess but when i change this back to an int and i compile and i run now we're getting zero so what's happening here is that after we perform this division there is like a 0.8 and sorry this should be a bunch of eight nine answers so this will give us this x divided by y will actually give us the floating point answer and then what happens is since our variable is an int we will need to convert whatever this answer is to an integer which means we remove all of the decimal places and so we get zero so that is why types is very important that's why i stressed them a lot in the previous videos and they're just going to become more and more important as we go through this series so anyways that is division now we'll show you multiplication which is an asterisk so one single asterisk will multiply x by y so let's go ahead and run this we go g plus plus run program 72 now let's just make one of these like 9.5 let's run and see what we get we get 76. uh let's make it 9.6 i want to try to get er nine point maybe seven something like that so we get some floating point result so that's g plus plus run program we still get 78 day uh is there oh it's because we have an int as the result so let me change this to a float i was trying to get a floating point result for the multiplication but i had int as the variable so let's do this run program there we go we get our floating point result uh so those are kind of the standard operators plus minus divide and then multiplied by now oftentimes what you will do is you will store the result of a division or a multiplication or whatever in a variable like we've done here now let's say you just wanted to like add some number to a variable right there's multiple ways to do this so in a lot of cases you have some variable x and you want to add 1 to it or you want to add 5 to it you want to add something to x right so there's a bunch of different ways you can add first you can say x is equal to and then x plus whatever you want to add to it in this case we would just add 8 to x you also can use this operator right here which is called plus equals so i say x plus equals 2 and then i see out x you're going to see that we will add 2 to x so let's go ahead and run this run program we've added 2. so this is a way to add when you say plus equals this means whatever the value of x is add 2 to it and then assign that new value to x which in this case is 10. now of course you have minus equals as well so minus equals we'll remove two from x so let's run this run program there we go we get six you have multiplied equals which is going to multiply x by two so let's do this and g plus plus run program we get 16 you have divide equals gonna divide by two so let's have a look at this g plus plus and then run program you get four and then finally you have increment and you have a decrement now what increment does which is plus plus is adds 1 to x so if you just want to add 1 to x there's kind of a shortcut that c plus has rather than writing plus equals 1 which is totally valid you just write plus plus and this just means add 1. so let's run this in g plus plus run program we get nine so that is increment this is decrement this means remove one so let's try this g plus plus run program you get seven so use whatever option you would like the cleanest ones are usually to use increment if you're adding one to use decrement if you're subtracting one and then any other addition subtraction multiplication you use the corresponding plus equals multiplied equals divide equals so on and so forth so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 140 coding interview practice questions each of those questions have a detailed conceptual overview and code walkthrough that is in video format so it can help you understand how the question is solved with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform now of course you can also use these with variables right so if i have say something like let's go in y equals 4 and then i'll say x plus equals y and this will just add y to x so if we do this compile run program we get 12. so those are your standard arithmetic operators now what i will show you is how we can use these operators kind of in combination with each other and the order of operations for these and then we're pretty much done for this video nothing super complex today so there is order of operations in c plus plus order of operations is just like let's let's say i have some crazy equation or something i'll just say int sum equals x plus y minus x multiplied by seven divided by three uh you know let's go times two or something like that so how do we know in which order we should do these operations right because we only ever have two operands for each operator so we're going to have to pick in which order we're going to be performing all of these operations well we perform these operations in the following order some people have different acronyms for this in my school at least in elementary school they called it bed mass like this now what this stands for is brackets exponents division multiplication addition and subtraction this is the order in which you perform all of these operations here so you would start with anything that is inside of parenthesis or anything that is inside of brackets so if you put parentheses like this then you will you know parenthesize that part of the equation or the expression and you will do this first then you have exponents i haven't shown exponents i'm not going to show them here division so then obviously uh division you're gonna have multiplication and then addition and subtraction now division and multiplication have what's known as the same precedence this means that they can be executed in any order and it won't actually change the value of the expression so you can kind of test this for yourself but if you have something like one multiple or maybe not one two multiplied by five divided by two it doesn't matter the order in which you do this you're going to get the same result so if you do 5 divided by 2 first you get 2.5 you multiply that by 2 you get 5. if you do 2 times 5 and then you divide by 2 you get 10 over 2 you get 5 right so it gets the same thing same when you're doing addition and subtraction so that is kind of the order of operations so if you look at an expression like this i mean we can just see out x or c out sum and see what we get so not in all capitals in lower cases let's see compile run and we get negative 25. there you go so that is the order of operations i will kind of let you guys mess with this on your own because it's not too useful for me to just go through more examples of adding subtracting multiplying numbers i'm not a math teacher but i will show you one more operator that i forgot to show you which is the modulus operator which is something you may not have seen before so the modulus operator is the percent sign and what this does is give you the remainder of a division now this is actually extremely useful in programming and just in mathematics in general and let me just show you what i mean so let's say we have 8 divided by 5 what i'm going to do is i'm going to c out x mod y so it's going to take 8 it's going to divide it by y or sorry it's going to take x it's going to divide it by y so 8 divided by 5. then it's going to give me the remainder of that division so what is the remainder when you divide 8 by 5 well the remainder is 3. the way you calculate the remainder is you figure out how many times this number right here which is the divisor goes into the numerator evenly then what you do is you multiply this number by the number of times it evenly goes into this number and then you subtract the two so when we have eight times five five goes into eight one time so what we do is we say five times one that gives us five and then we take eight which is our original number we subtract it by five that gives us three so our remainder for this division is three the most basic example is if we do like three divided by two well our remainder here is 1 because 2 goes into 3 one time evenly and then we have a remainder of 1 after that so let's do this 3 divided by 2. we're going to see that our remainder here what is this saying invalid operands of type float and int okay so this is interesting it's a good error to run into actually this is telling me that i cannot use the modulus operator on operands that are different types so what i need to do is i need to change this float to an it so let's do this let's compile the program let's run and then we get 1. awesome so now if i change this to 5 what is our remainder going to be take a guess well it's actually going to be the same thing the reason it's going to be the same thing is because 2 it goes into 5 evenly twice and then we have a remainder of 1. now if we make this 3 what is our remainder going to be take a guess so it's 5 and then 3. well this is going to be 2. the reason is 2 is because three goes into five evenly one time then we have a remainder of two now let's just see what happens when we change these bolts to floats because i actually forget what's going to happen here if this works or not i think this should work but let's see let's compile and we actually get an error so it seems like we cannot use float with the modulus operator so yeah it seems like we just cannot use floats with the modulus operator i believe that's just something in c plus plus i actually don't know exactly why i'm sure there's some mathematical reason with decimal points and overflows and all that kind of stuff why we cannot use this to get the remainder but anyways that is the idea so hopefully that makes sense this is the modulus operator one small thing for this you must make sure you are using integers with the modulus operator you cannot use floats as either of the operands and yeah that's all i need to show you in this video so if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another youtube video