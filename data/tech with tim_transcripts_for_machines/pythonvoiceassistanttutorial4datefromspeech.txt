hello everyone and welcome back so in the next few videos in this series we're going to be doing is working with the Google Calendar API and essentially what we've just created with this get events function to figure out if we have events in the upcoming days weeks months and so on so what I'm kind of envisioning here is like I can ask the assistant to say do I have anything on Monday or do I have something next Saturday or what do I have on September 9th and then it can list out all of those events and pretty much tell me if I'm free or if I'm busy on those days now I'm just gonna do this pretty simply for this tutorial series but hopefully everything I show you will allow you guys to customize it to your liking and that's kind of the goal of this series here is not to make everything super specific but to give you enough knowledge to be able to just really easily tweak a few things and make it exactly how you'd like it now keep in mind we're not programming like Cortana or Google home or anything like that and there is gonna be some bugs with the stuff that we do but I'm trying to make this as easy and as flexible as possible for everyone ok so the first thing we need to do if we actually want to figure out if we have events on a certain day is we need to figure out what day to be looking for those events on now keep in mind we're gonna be doing this with speech right so we're gonna be asking or really speaking something to the assistant and then it has to figure out what day we're talking about or what days or whatever it is now that actually is a pretty tricky task because if you think about it you can ask and talk about the date in so many different ways you can say you know like September 3rd you can say next Wednesday you could say the following Sunday you can say so many different things that we need to make sure that we capture all of those and are able to figure out the correct date based on that now the way I'm gonna program this function here is always assuming we're talking about in the future and not in the past because it really doesn't make sense to ask what we had in the past so that's the way I'm gonna be making this or anyways let's go ahead and get started what we're gonna do is create a function it's gonna be called get underscore date and the point of this function is to determine what date it is that we're talking about from a string of text so in here it's gonna take text and what we're just gonna start off by doing a save text equals text dot lower now at the top of our program here I'm just gonna write a few global variable I'm gonna need the first one I'm gonna create is gonna be called days now inside days I'm gonna have Monday Tuesday Wednesday and so on and you know what I think I'll actually just copy this in because you guys probably don't need to watch me just type these so I'm just gonna copy in these lists that I have here again code will be in the description if you just want to copy this but essentially we have four months January February March April May so on and then days Monday Tuesday all the way through Sunday and then day extensions which is like you know the first the third the fifth are gonna be B's right here so that we can actually determine you know if we're talking about a date or if we're talking about a number based on if we see these extensions because someone could say you know what do I have on September 5 and that'd be easy for the program to detect because we could look for the number 5 but if they said the 5th we can't just determine if this string is digit because it has that th on it so we need to kind of slice through and figure out how we can detect what are actually numbers and what are actually days so that's what we're doing here okay so well after we add these up to the top here we can go back into our get date function and let me just scroll over here to look at what we need to do next okay so we're gonna start by just defining today's date and this is gonna be important because if we say something like you know what do I have on Sunday well that's two days away from now so we need to figure out you know where we're starting to get to Sunday right so we're gonna say today equals date time dot today actually sorry it's daytime date dot today and you guys should have already imported date time from the last tutorial but if you didn't just go to the top of your program and import date time like that okay so now that we have that we're gonna start doing is breaking up our text into all of the different words and figuring out what it does but the first thing I'm just gonna say is if the text dot count equals equals today we're simply just gonna return today's date so this is pretty much saying you know if we pass in some kind of text here and it contains the word today what am I saying if text uh County if text uh count today is greater than zero I'm sorry about that then we will return to and that just means you know if we see today then we're just gonna return today's date because that's probably what this person is talking about all right so next what we're gonna do here is just set up some variables to store the day the month the year and so on so we're gonna say day equals negative one because right now we don't have a day I'm gonna say day underscore of underscore week equals negative one we're gonna say month equals negative one and we're going to say year equals today dot year now cool thing whenever you define a date object like this you can actually call dot year month dot I guess day as well and and get that information so we're just doing assume that we're always talking about the current year unless we specify a month that is you know past the current year so let's say we're in like September and the user says January then we're going to assume they're talking about 2020 January as that is what comes in the future and we'll get into that as we continue through this function so anyways we're gonna do now is just split up our text between to say forward in text dot split what this is gonna do is just split everything by spaces we get each word we're gonna say here is if word in months like this then we're gonna do is say months or not month will say month pools months dot index and then month plus one now let me just slow down here and kind of explain exactly what we're doing kissing gets confused so essentially what's gonna happen is we are going to ask the user to say something so maybe they say and I'll type it down here you know what do I have planned on when's our let's say like September 9th like that like maybe that's what they say right so we're gonna pass this string of text into this get date function what we're gonna do is initially make everything lowercase we're gonna get the current date we're gonna see if we talk about today anywhere in the string if we do we'll just return today's date otherwise we're gonna start looping through and looking for a few certain keywords so we're gonna look for the word September which is one of the months right or any of those months and if we find that what we're gonna do is figure out what index so what number correspond with that so in case we have all of our months ordered as the way they should be so if we find September then we know that that is the ninth month or like the 8th index because that's the 8th or the 9th element in our list so we go 0 1 2 3 4 5 6 7 H and that is the index right so that's how we can figure that out and we're gonna do the same thing for days as well so like Monday Tuesday Wednesday Thursday when we index those okay so now that we've done that so we understand how that works after we look for months we need to look for days so what we're gonna do now is say L if word in days then what we're gonna do is say day underscore of underscore week and we're gonna do the same thing here we're gonna say equals days dot index and in this case day erase it's work like that now we don't have to add one to this because the way that we actually do the days like in terms of Monday Tuesday Wednesday starts at index zero in the day time module but anyways you guys get the point the next thing we're gonna do here is say L if and in this case we find a digit so we're gonna say lef word dot is digits then what we're gonna do is simply say day equals int just like this int word so that means if someone said something like what do I have on Friday 9 I know that's a weird thing to say but like let's say they say that then what we'll do is say okay well if the word is just a digit and we parse through maybe we just see 9 all we'll do is just take that turn it into an int and say that's the day now the last thing we need to do here is let's say that we go through and we don't find any of those now what we're gonna look for is words that have one of these endings so our d th and st and if they do have that ending we're gonna take whatever the number is that's before that and use that as the day so this is a little bit more complicated where I say for EXT which i'm just going to say is like extension in day underscore extensions which is what i've called that list it has like th all those we're gonna say found equals word dot index or sorry i don't think we're going to index oh we could but let's say were defined EXT we just give us the start position or index of where we find that extension and then we're gonna say if found is greater than zero which essentially means if we're not at the very beginning of the list we're going to take what's before that word and turn that into a number actually yes I think I think that's what that's doing but I'm pretty sure what found is saying when it's greater than zero that means if we have something before that so if we have something before that we'll see if it's a digit and then try to turn it into a number and if we can then we use that as the day I hope that makes sense so I'm gonna do a trycatch here just because I don't want to bother having to write all this or try except so here we'll do pass like this but I'm just gonna say day equals int word Pollin found now the reason that this works is because we're gonna slice to where we found the extension so let's say you know like our word is like v well we're gonna find th right and that's gonna be at index 1 because we start we go 0 and then we go 1 so what we're gonna do now is we're gonna say okay well that's index 1 so let's go from index 0 to index 1 which is where this th starts and then take that number which is just the 5 here and store that in day so that's that's what we're doing for that ok so now that we've done that what we're gonna do here is continue on and actually figure out how we can get the correct date using the date/time module so so far all we've done is just started programming this function that's gonna take in you know this text and then figure out what day we're talking about and right here we're determining you know what days in the string what day the week is in the string and what month so that we can figure out what to do so that's in the next video where I can you this function and keep going there is quite a bit more to do so I just want to split this up into two sections um but yeah just make sure you guys head up to the next video to see how that works