hello everybody and welcome to part two of this flask blog tutorial series in this video i'm going to be showing you how we can do all of the security and authentication for our application so how to sign users in sign them out create new accounts all of that fun stuff now in the previous video we created our sign up and login page so what i'm going to start by showing us how to do here is actually get the information from these forms so from you know the login and from the sign up then of course we're going to need to actually create users store them in some sort of database we're going to have to hash their password we're then going to have to validate things like if their username or email is already taken when they try to sign up and create an account this will take a good amount of time but once this is done this is a lot of this the tough and difficult stuff finished then we just need to go and actually build the blog functionality of the app so let's go ahead and get started so i want to start by just showing you what happens now if i fill something ends i'm going to go with tim gmail oops i don't want that in all capitals tim gmail.com maybe the username is tim and the password can be one two three four one two three four okay so when i press sign up right now notice we get method not allowed now the reason we get method not allowed is because if we go to our sign up page here we have a form and this method is post this means when we press this button right here we're going to take all of this form data and we're going to submit this in a post request to the slash sign up url now right now if we go to auth.pi we have not explicitly defined that we are allowed to send a post request to this url so by default the only method that is allowed http method i'm going to describe what this is in a second for all of our routes is a get request so the most basic and most common http request is a get request what that means is you are asking for information from the server so get means get to give me something right you're asking for something and in most cases what a get request is is you're asking for the html of the web page to actually make it up right so when i just go here and i hit enter and i go to sign up i just sent a get request to my server asking for the html that makes up the sign up page and you can see that if you go to the flask app that's running it says get sign up and notice we had post sign up then we had 405 which stands for method not allowed so these are status codes 200 stands for ok 405 stands for method not allowed and method was not allowed on sign up because we have not explicitly defined it can accept a post request there's a few other requests as well you have a put request a delete request update request there's a bunch of other ones i won't go through all of them but just understand that the different types of requests are used for different things theoretically you can return anything from any type of request but post is usually the type of request you use when you are creating something or sending data to the server now there's sometimes some exceptions but a lot of times when you are creating something new in the database so like creating a new user you're going to send a post request to our url that url will listen for that post request and then it will look for all of the data related to what it's going to be creating in the database so anyways the whole point of this is to say we need to go into our auth.root here let me make this full screen and i need to say method is equal to sorry methods is equal to and then a list and inside of here i'm going to say get and post so this is saying okay the methods that are allowed for this url are get and post by default it's just get okay so i'm going to take this and i'm going to put this on login as well and for logout that's fine we can just leave that as a get request okay so now if i go back here and i refresh and i press sign up i don't get there right so it is actually sending a post request if i go here we can see we're getting a bunch of post requests sent to this url and it's refreshing the page after the post request comes in nice so now how do i actually get the data that's being sent from the form well we need to import something from flask this is called request so this is a variable that will store all of the context related to a specific request so you use this everywhere inside of all of these functions use the same request variable and the way that you actually get data that's inside of a form is you do the fault say data is equal to request dot form then dot get and the name of the item in the form that you want the data from so in this case if i go to sign up notice how i said we have to have these names here right email username password1 password2 so the way i access these pieces of information is i say request.form.get and then i put in the name of what i'm looking for so in this case i want the username right so we could say rather than data just username and just very simply here i'll start by printing out the username just to see if this works now the reason you do dot get is because if this does not exist if username does not exist this will return none so rather than crashing your program which happens sometimes if you did this in a different way it will simply return none to you so the username will be equal to none if there is uh no username field that's sent to the post request okay so let's go here and let's refresh uh oops actually let me just hit enter now let's enter a username let's enter tim let's press sign up notice here prints out tim because it's printing the username so now let's do this this line right here for all of the different things that we want so we want the email we want the oops the password1 uh what am i doing here okay and then we want the password to so let's fix that okay and password two nice now obviously we need to change these so this is gonna say email this will say password1 not password backtick and then password two nice okay so we have just sent all this data uh or we've just received all this data now inside of sign up now we can do the same thing inside of login but inside of login all we're gonna need is the email and the password so let's just put this in here while we're at it so we'll say email and then rather than password1 this just give me password like that nice there we go so now we're actually getting all of this data from these different uh these urls or these endpoints or the backend whatever you want to call okay that's great but we can't actually do anything with this data yet until we create a database and have some place to store it or to check if it is valid so that's what we're going to do now so i'm going to go to init dot pi i'm going to start setting up my database now this is a little bit complicated but it's not crazy what i'm going to do is create a variable i'm going to say db is equal to and this is going to be sql alchemy like that uh yeah i think that's all i need to do next in all capitals i'm going to say db underscore name is equal to database dot db so i'm just defining the name of my database and then what i'm going to do is configure my database inside of my create app function so i'm going to say app dot config and i'm going to say sql underscore alchemy uh am i ever spelling that right yes okay not scl sql alchemy underscore database underscore uri this is an i not now make sure that's an i then you're going to say equals and we are going to put the path to our database now for this application we're going to use an sqlite3 database you don't need to know what that means it's just one of the simplest ones to use and we don't need to write any uh like actual sql or sql we can literally just use the builtin flask sql related commands to you know query our database and find users and add stuff to it it's pretty straightforward but here what we need to do is make an f string so i'm going to say f and then i'm going to say this is sqlite colon this is going to be two slashes i think sorry actually three slashes and then we're gonna say db underscore name like that there you go now what we're going to do after this is say db dot underscore or sorry a nit underscore app and we're going to pass our app which is our flask application so if you want to know exactly why you need to do all of this you can reference the sql alchemy documentation but essentially we just need to tell flask where our database actually is and then we initialize our database with our flask application nice now there's a few more things that we need to do the next thing we need to do is actually create the database so what i'm going to do is make a function here and call this create database this is going to take an app and what this is going to do is check if the database already exists if it doesn't it's going to create it so it's going to say if not it's going to be path dot exists like this and we're going to say website slash plus db underscore name okay and then here we're going to say db oops db dot create underscore all app equals app and then i'm just going to print out created database exclamation point okay so let me just explain what this is doing so path dot exists pretty straightforward we're checking if this path exists so if website which is the name of our folder here slash dbname exists if it doesn't exist then we're going to create it so we'll say db.createall we pass the app to this and it will actually make the database file for us and then we print create a database this is not what you would normally do in production but since we're just creating like you know a local application this isn't going to be the next facebook or something this is totally fine we can just do this okay so now what we're going to do is we're going to go here and we're going to call our create database now it doesn't really matter where you call it at least right now it will in one second we need to pass this story the app okay now i need to just look at my cheat sheet here to see what else i need to do okay so let me just move this i just want to keep things a bit organized so let's put that right there okay so now we are creating our database however right now the database is completely empty and that is because we haven't yet created any models or tables in our database so what we're going to do is make a new file inside a website we're going to call this models.pi all right so i'm inside of models.pi as i was saying this we're going to define all of our database models before we do that though i need to import a few things so i'm going to say from dot import db dot stands for the current package that we're in so from website import db which really means from this init.pi file import this db variable right here so we're importing that standing for database obviously then we're going to say from this can be flask underscore login import user mix in like that then we're going to say from and this is going to be sql underscore alchemy dot sql import func now i'll tell you why we need that in a second let me spell alchemy correctly though and now what i'm going to do is define my first database model which is going to be a user so what we're going to focus on right now is the user model the user database table so i'm going to code it code out a little bit of it then i'll stop and explain exactly what i'm doing so i'm going to say class user this needs to inherit from db.model and from the user mixin so db.model is kind of a base class which is a database model now if any of you are familiar with relational databases you you might not have heard of model before you may have heard of table so really a model is just a table it's like the model of a table if that makes any sense now a table has rows and columns every row in the table is a new user every column is information related to each user so what we need to do right now is define all of the columns that are going to be in our user table then every single time we add a user we fill in a new row of columns and that is a user that's as straightforward as it is the reason we need this user mixin thing is because we're going to be using this plugin flask login which allows us to way more easily log users in and out and so you just need to have your main user class inherit from this so that you can log users in and out that's pretty much the best explanation i can give you okay so what information do we want for all of our users well the first thing we need is is an id so we're going to say id is equal to db dot column and then we need to define the type of this column what date is being stored in this column well this is simply going to be an integer so db dot integer and then what we need to do after this is state that this is a primary key so primary key is equal to true so let me explain what this is on every single database model or every single database table you need to have one column which is the primary key this is the key that is unique and that you will use to look up uh users in this case or rows if you're talking more generally in a database tape so every table needs at least one primary key i think you can have multiple primary keys and like combine them together but regardless you need one and that is almost always an integer and in this case we're calling it id you always need an id on all of your tables so we have our id all right now this id will actually automatically be created for us when we make new users so we don't need to try to figure out what the last user was that we inserted what its id was it just automatically gives it a unique id okay next what do we need well now this is up to us we have the id we've kind of filled in the mandatory stuff what information do we want related to user well we're gonna need a username we're gonna need an email we're gonna need a password and we probably want to know when this user was created so like time of creation let me look and see if there's anything else um actually i think that's probably all we need for right now so i'm going to say email is equal to db.column in this column is going to be db.string and it's going to have a maximum length of 150 characters so when you do db.string you need to define a max length for this string we'll say the email has a maximum length of 150. all right then after this we are going to define that this must be unique it's unique equals true this makes make sure that we cannot have any users that have duplicate emails okay we have our email next we need our username so this will be the exact same thing we'll literally just leave it exactly like this unique equals true uh and finally we'll say password is equal to and then this will be same thing except the password does not need to be unique so we'll remove unique equals true okay so that's actually all we need for the user right now sorry we're going to do date created as well so let's do that date created is equal to and then i'm trying to remember what this would be db dot column db dot date time zone is equal to true and let me see if there's anything else we need there we're going to add a default value so the default is going to be func dot now okay that's why i needed to import func so let me just explain what this line just did here so say okay we're going to have a column this is going to store a date we want to know the time zone associated with this date when you say date it also it stirs the time as well it's date and time but we also want the time zone and then the default means okay if we don't pass something in here what should by default we fill this with well we're going to call funk dot now what that will do is uh that will fill this by default with whatever the current time is so it's kind of weird why this is called func but that's why i imported this this just gives you the current time so we're going to make that the default now let me just look at something here okay i just want to make sure everything's good looks good to me all right so we've now created our user model now we're going to go back to init.pi and we're going to import the user module on line 22 or user model sorry online 22. so we're going to say from dot models import user the reason we need to do this is if we don't import the user when we go to create the database it won't create the user table so before we create our database we need to import all of the models individually that we want to be created in our database so that's why we're doing that we're importing this making sure this is part of our flask application now we've imported it in and then we create the database so we make the user table nice now before we do that or actually maybe after we do that we'll see i'm just going to look at my file here yeah we can do it after we do that we're going to set up what's known as our login manager so here i imported login manager in the previous video but we haven't yet used it so we create our database but now we're going to set up the login manager so we're going to say login underscore manager is equal to login manager now this is what's going to allow us to log users in and out of the website and make sure every time they come in they don't have to type in their username and password and they have access to certain pages if they're logged in but they can't access certain pages if they're not logged in right so we're going to say login manager dot login underscore review is equal to auth dot view so essentially what this means is okay if someone tries to access a page and they are not logged in where should we redirect them we should redirect them to off dot sorry login that should not be viewed it should be off dot login so that means we're going to go off and we're going to redirect them to this login page right here pretty straightforward all right and then after that we're going to say login manager dot and then init underscore app and we're going to pass our app nice now the next thing we need to do is we need to create a function so that our login manager can actually find our user model when it logs something in seems a little bit strange i'll just cut it out and i'll describe what it's doing so log in manager dot user underscore loader okay this is a decorator we need to put here we're going to say define load underscore user it's going to take an id and i'm just going to type something out it's going to seem a little bit confusing i'll describe in a second so user.query dot filter underscore by id equals id okay and we're going to actually return this and sorry this is just going to be user.query.get i did this wrong int id all right so what did i just code out here so what i just coded out is something that allows me to access information related to the user from my database given the id of a user so log in manager my understanding i'm not super familiar with this by the way but my understanding of it is it uses a session which i will describe in a second to store the id of a user that is logged in so if you are logged in like you on your computer go to this website and you're logged in there will be some data stored in your session which is the id of your user now whenever you want to actually access say the username or the email or the password of that user you use that id to do so and so we're defining how we're going to actually access the user given the id so what this is doing is saying we have this user model we're going to query it which means try to find something from it and we're going to get the user object that has an id equal to the id that was passed here and the reason why we have this is because the id will be stored as a string we need to convert it to an end because the column we have here for id is an integer and it must be an integer there that's pretty much all it's doing if this is super confusing don't worry about it just type it in and it will work for you okay what is a session so it's a little bit difficult to describe whenever you go to a website your computer has a session with that website now that website will store like some unique identifier about you visiting the website and then it can have some information stored in your session so maybe the last page that you were on maybe if you're logged in or not maybe uh like what you typed in for your password last time random stuff you can store stuff in session that's why when you go to facebook for example you don't have to sign in every single time or maybe it brings you back to where you were previously or if you were like in the middle of doing something and then you close the web page and you go back and it's still there it's because it was stored in the session now session is temporary but you can choose how long it lasts so i think by default here the session lasts for 30 days but you can choose how long session data will last you can make it infinite but sometimes you can like mess up a session and it's kind of hard to describe but don't treat a session as a database just think of a session as kind of a temporary storage to store information about your client your computer visiting a website so that you don't have to constantly log in sign out sign in whatever but what that means here is that login manager uses a session to determine if you are logged in or not so when you return to your computer another day and you go back to this website it checks your session and it says okay are you logged in yeah you are so let's bring you to this page rather than telling you you need to log in again hopefully that was a decent enough explanation of what's going on here then that's our login manager and now that i'm looking at this i think that's all we need to do inside of a knit dot pi we might come back to it in a minute but for now that is fine okay so now that we have that what i want to do is just run this app and see if this is working so let's run this python app.pi no module named fla sql alchemy okay i know what's wrong here let's go to models this needs to be flask underscore sql alchemy that would be why okay so let's try this now run and no module name flask sql alchemy am i spelling this wrong all right guys one sec let me see if i can fix this hair all right so i found the error it's actually just sql alchemy no flask this is different than the one we used previously so just remove the flask and you should be good so let's try this and oops date takes no arguments okay let's see what have i done wrong here date let me look in my cheat sheet um that would be why this needs to be date time okay so make that date time and now we should be good let's try it fingers crossed okay we're all good so now let's go back to our url let's refresh this okay and everything is working we're not going to see anything different because we haven't really implemented any new functionality i just want to make sure the database was working all right now i also noticed that it did not create oh no it said create database okay perfect so it did create the database database for us we might not be seeing it let me refresh and see if it shows up but if it said create a database i trust that it created it i guess just because we don't have anything in there right now so we don't actually see the database file okay so that's all good what we're going to do now is we're actually going to make it so we create a user account when someone signs up and then i will show you how we can like log into that user account and all that kind of stuff so we will continue in one second we need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have 160 coding interview practice questions a data structures crash course mock interviews and a ton of awesome features to help you land your dream job get started with algo expert today by clicking the link in the description and use the code tech with tim for a discount on the platform all right so let's go into our sign up function here and let's start handling the logic for when we want to create a new account so the first thing we need to do is we need to determine if we're creating a new account or if we're just trying to get the html for the page because there's two different methods here right we could be posting data or we could just be asking for the html and if we're just asking for the html clearly we're not trying to actually make a new user we're also not going to have any form data we're not going to have email username password anything like that and so we need to check what method we have here so i'm going to say if request.method is equal to and then here i'm going to say post excuse me okay so inside of here we're going to do an indent this is where we're going to handle creating a new user however if it's not the post method we're just going to return the sign up html page okay so we get the email username and password and password the first thing we need to check here is if this user already exists so how do we do that well we need to look in our database and check if the user exists so i'm going to go up to the top of my program here and i'm going to say from dot import db and i'm going to say from dot models import user okay so how do we look in our database to see if a user with this email exists what we do is we say user dot query dot filter underscore by and then we say email like that is equal to email dot first okay and i'm just gonna go here and say user underscore exists equals this and instead of user exists we'll go email exists okay so what this does is it looks in the user database running user.query and we're filtering this database or this table by an email so we're looking for an email equal to the email that this person typed in in the sign up form and then we're getting the first result that occurs if there's any result it will just be the first result right because we only are going to have one entry in the database with this email if that email exists in the database hopefully that makes sense but there's never going to be two users that have the same email and so doing.first here just guarantees us we get the only user that exists with this email if they exist so now what i'm going to do is i'm going to check if this here exists right if we actually got a result so i'm going to say if email exists and i think that's literally all i need to do so if the email exists that means that we cannot create account because well the email already exists so what i'm going to do is i'm going to say flash and what flash will do is actually flash flash a message on the screen sorry that says hey this email already exists now we're going to have to implement some logic for this to work first we need to import flash from right here and we're just going to put kind of the message we want to appear so we're going to say email is already in use and then we're going to say the category so the type of this message is equal to air so we can flash all kinds of different messages we can flash uh error messages warning messages like success messages like you posted something successfully again we have to implement the logic for that but for now we're just going to do flash and i'll show you how this works in a minute okay so if the email exists or sorry if email doesn't exist we want to check if the username exists so what i'm going to do here is say username underscore exists is equal to user.query dot filter underscore by and i'm going to say username is equal to username dot first now we're going to do an lift here and we're going to check the exact same thing we're going to say elif username exists then we'll flash username is already in use and then category is equal to error nice now let me just do some spacing here okay now what do we need to check next well we need to check the password first so if the email doesn't exist the username doesn't exist sorry we need to make sure the password is of correct length so it's at least x characters and both of the passwords mass match sorry so we're going to say l if password1 does not equal password two then flash passwords don't match oops and this is b escape character don't match nice and then we'll say category is equal to error i spelled it correctly yes it did okay so if the passwords don't match we flash that and then lastly we want to check i guess the length of the username and the length of the password so we're going to say if the len of the username is less than two then we will just flash something and say hey that's no good you know your username is too short username is too short okay category equals error and i suppose we could just copy this because we'll do this a few more times now we're gonna do the same thing as password so if the passwords match then we'll check password one and we'll make sure it is at least six characters long so we're gonna check if it's less than six if it is we'll say password is too short and then lastly we could verify the email i guess um but i don't really want to write any regex or anything to verify the email so we're just going to assume that a user types in a valid email you could check the email if you want you could send them like you know an email to verify that they actually who are who they are we're not going to do that in this we're just going to kind of say your email is your login information we won't validate it they just they can type whatever email they want although they do need to have an email that has at least let's say 10 characters in or something so we can do that we'll say lf the lan of email is greater than we can pick whatever we want i'll go with 10 or sorry l if len of email is less than 10 then flash email is invalid and we'll go category equals air and now that i think of it that might be a little bit too short for the email i'm thinking of emails i've seen that are like four or five characters so you need an at symbol you need a period and then you're going to need another period probably you just need an ad symbol and a period and then you need two characters at minimum so let's just go it has to be at least four characters okay emails in bell all right and then finally if all of this is good we're going to actually create a account right so if none of this happened if we didn't have any error messages then we'll create an account so we're going to say new underscore user is equal to and the way we do this is we just use the class to make a new user so we're going to say user we don't need to pass the id because that will be automatically generated but we do need to pass those the email username and password so we're going to say email is equal to email username is equal to username and password is equal to password1 you could do password too it doesn't matter because they're going to be the same and then there will be a date time that this user was created but that will be automatically added as well we don't need to add that okay so now that we've created the user what we need to do is actually add this to the database we've made the user but it's not yet in the database the way you add it to the database is the following you db dot session dot add and then you add the variable that stores your user objects so we're going to add new user and then once it's added to the session we need to commit it so we're going to say db.session.commit this actually writes it into the database for so this adds it to kind of the staging area ready to be put in the database this puts it into the database so you go now we have created the new user then what we can do is flash user created uh yeah that's fine and then we're actually going to return a redirect for the url underscore four and this is going to be views dot home nice so let me just save this and now we are good to go so if we get through all this we make the user we add to the session we commit it we flash user created we redirect to the home page now if any of these are not the case we flash this message and then we would just actually return the template again they'll have to type in their information again and then they can try to create account again okay so that is good although one last thing we need to do is we need to actually log in our user once they have created an account so we could tell them to sign in once they've made the account but i would prefer to just sign them in once they actually create the account so the way we do that is we need to go here and say from flask underscore login import and i believe this is log in i gotta go look at it here uh login underscore use there we go and while we're here we'll go log out underscore user and then this is gonna be login underscore required okay so we're going to use these in a second now i'm actually remembering that we can't do exactly what i just did here so notice how i just stored this password right in this user model i have not hashed the password and so that means i'm actually storing the password in plain text now that's bad you don't want to store our password in plain text so what we're going to have to do is hash it i'll explain what that is in a second but we need to import a module that could hash the password so we're going to say from westerberg how do you how do you say this workberg i always mess this name up work zig like that dot and then security we're going to import the following this is going to be generate underscore password underscore hash and then i need to look at my cheat sheet this is going to be check password check underscore password underscore hash now i'm almost certain i spelt this wrong let's check this work zug dot security okay that should be good you guys should have this module you shouldn't need to install it i believe it comes with flask login or just with flask by default okay so we have two methods here generate password hash and check password hash all right so what is a hash and what is a hash function i'm going to try to explain this to you because it's pretty interesting so essentially the way that modern day security works is when you have a password you take that password and you never store it in plain text that means you need to store it in some other format but you need some way to determine if the user's password is whatever you're storing right is whatever the hash of that password is so what you want to do is you want to take some password you want to kind of encrypt it and store it in something that's not the password but you need some way to go from that password to the thing that's stored so you can verify if the password is correct but you never want to store the plain text password this is where a hash function comes in so a hash function is essentially a function where you cannot compute the inverse or there is no unknown inverse for this function now what is an inverse well with most functions you have some x so you give some x to it and it gives you some y but if you have the y you can figure out what x is so for example if i have some function i can literally do this in python i can just define this in python and say define foo i take x and then what this does is it returns x plus 2. if we were going to write this function out in math terms this would be y is equal to x plus 2. now the inverse of this function you write in terms of x so you would say okay well if i know what y is can i figure out what x is yes you can x is equal to y minus 2. right this is pretty straightforward you learn this in elementary school math at least i'm pretty sure but regardless given given y i can figure out what x is i just subtract 2 from y and that tells me what x is so that's fine for regular functions but with a hash function there is no way to do that that means given some x you're always going to get the same y but given some y you have no idea how to get back to x and so what we do here is we utilize the hash function to store a password so i say x goes to hash function hash function goes to a hash but from hash trying to get to x that's impossible there's no way for me to get to x given this hash at least not that we know of um that it's kind of an interesting thing quick little shortcut here if you guys are watching an hour long video you probably don't mind a quick 50 and 20 second pause to explain something currently our modern day encryption we assume that there is no way to go from this hash back to x that this is what's known as a oneway function one in which we cannot compute the inverse but we actually cannot prove mathematically that there's no inverse so there may be an inverse there may be a way to go from a hashed password to the original plain text password we just don't know of it so that's a little bit of a scary thought because our modern day encryption relies on an assumption that there is no inverse but there could be an inverse we just don't know how to find the inverse right now anyways i thought that was interesting so i figured i'd share that with you but regardless x goes to hash function goes to hash hash is always the same for x any x you pass if it's the exact same you always get the same hash however from the hash you cannot get back to x so when someone types in their password what you do is you hash it and then that gives you the hash and then you compare this hash with the hash that you've stored so i'm going to store the hash password and whenever someone types in their plain text password i'm going to hash it i'm going to check if that's the same as my hashed password that means these passwords do actually match but if you type in a different password you get a completely different hash you will never have like two passwords that correspond to the same hash hopefully that was a decent explanation uh but that is how password hashing works so we're gonna do that so we're gonna go here and rather than storing the password we're gonna hash it so we're gonna say generate password hash so generate underscore password underscore hash the password is going to be password one and then we need to choose the method for hashing so the method is going to be uh and this is going to be sha256 like that now you don't know what this means this is just a basic encryption method sha 256 okay so that's what we're going to use and i think for now that is good perfect so we've now generated the password hash we should be able to actually create a user account now while we're here let's just code out the logic for login and then we'll actually see if any of this works because once we create the account we'll try to log in so same thing here for login we need to check if the request.method is a post request so we're going to say if request.method equals equals post then what we want to do here is a few basic checks so we need to get the email and the password so we're going to get that and we're going to check if a user with this email exists we're going to say user is equal to user dot query the filter underscore by and we're going to say email equals email.first okay we're going to say if user so if actually sorry if not user actually no we will do if user we'll say if user so if this user actually does exist then we want to check if the password they typed in is equal to the password that we're storing in our user model so we just got the user if the user exists we're going to take this password we're going to hash it and we're going to check if it is the same as the hash password we're storing in the user model so we're going to say if check password hash we're going to say user dot password so that is the hashed password that we're passing first and then we're going to pass the password let me make sure that's all we need to do yes it is okay perfect so make sure you pass the hash password first and then the plain text password after that so this is correct this means user typed in the right password so we're going to say flash logged in and then we're going to return a redirect url underscore 4 and then this is going to be views.home okay and before we do that though we are going to log in our users we're going to say login underscore user this is going to be a user and we're going to say remember equals trip okay so this is the method that we brought in here this will log in our user with the login manager so then we're able to determine if the person session or if the person visiting the website is logged in or not because this will be storing the fact that this person is signed in in the session and it will store what user this person is signed in as hopefully that makes sense but that is what we need to do here now otherwise the password is incorrect right so if this is not the case then the password is incorrect so we're going to say flash password is incorrect and for both of these sorry we want our category so this one is actually going to be category equals success and this one will be category equals error nice and then we want another else here so if the user doesn't exist then we want to tell them that the user doesn't exist we're going to say flash user or email does not exist perfect now i believe that's all we actually need nice yeah that is all we need for login and now i'm just going to go back here to sign up and i'm going to log in my user after we create the account so i'm going to say login underscore user new underscore user remember equals true nice and while we're here we can just do the log out because it's pretty easy and say log out underscore user and we're going to say current underscore user i'm going to show you how we get this in one second okay so let's actually sorry i don't even need to do that i can just do log out user i'm just looking at my cheat sheet here all right so now we should have the sign up and login logic done i'm just kind of scrolling through here to see if i've done anything incorrectly and i want to import one more thing which is current user you just saw me type that from flask login so this is really cool flask login lets you access all of the information related to the currently logged in user from the current user variable so now anywhere once i've logged in i can access this current user variable and get the username password email of the logged in user what i'm going to show you now is something called the login required decorator so if you put this actually i think you need to put it here it might not matter i think you can do it in any order but i'm just going to put it here because that's where i have it in my cheat sheet this login required decorator this is what this is known as it decorates the top of the function is something that makes it so that you can only access this page if you have been logged in so only if this function has been called for your current user session are you able to actually access this route right here that's what the login required decorator does the reason i'm doing that on logout is because you can't like log out unless you're signed in right unless you've logged in and so that's why you need the login required okay let's run this and let's see if any of this works that was a lot of code without testing so let's go here and we will implement the message flashing in a minute right now you're not going to see the message flashing because we haven't done that and let's just try to create an account so i'm going to make an account let's say tim gmail.com username tim six seven password1234567 two three four five six seven uh okay and sign up now when i do that it redirects me to home which means i successfully created the account now the way to actually verify if the account was created is to go back to login and to try to log in so i'm gonna go tim gmail.com one two three four five six seven and notice that worked it redirect me whereas if i try to log in with the wrong credentials so tim gmail.com and one two three it doesn't redirect me it keeps me on the login page because the account credentials were not correct so that is how that works now though we want to actually see the error message right because it's kind of hard to determine if this is working or not when we can't see these flashed messages that we have this is a little bit of code it's in the html file that we need to write so let's go to our base.html now the reason we're going to put this in base.html is because we want these messages flashing to work on any page so we put this in our base template so as i was saying there's this thing in flask called message flashing now when you do flash and then you do the text and the category that passes that information to any templates that are rendered so what i can actually do here is i can write with and i need to go look at my cheat sheet because i don't have this memorized i'm going to say messages equal to get underscore flashed under sort messages like that i'm going to say with underscore and then categories is equal to true so what i'm doing is i'm saying okay with this variable messages equal to get flashed messages and i'm saying yes i would like to know the categories of all of these messages i'm going to do the following so i need to end this with first i think this is end width let me just see if that's how you do it yeah end width that's correct okay so inside of here the first thing i'm going to check is if i have any messages so this will be a list of messages so i'm going to say percent percent if messages like that and i'm going to say percent percent and if okay so if messages what i want to do is now have a for loop so i'm going to say percent percent for message in messages because i can have multiple messages flashing on the screen i'm going to say n4 just bear with me here if you've never seen this before it probably seems a little bit complicated but this is the way that you do it okay so for message in messages i actually realized sorry we need to do this first so for category comma message in messages this will give us the category and the actual text message for each of our messages this is the proper way to do it what we're going to do is we're going to show the message so remember if you want to access the variable you do it in double squiggly brackets like that so for now we'll just show the message but i will show you later how we can actually style this and make it look nice but let's just see if this actually works for now oh god i hate that it does that um okay i'm gonna save without formatting let's just refresh the page here and let's see if any message flashing actually works look at that user created login password is incorrect nice okay let me just refresh that was all of the messages that were not yet shown just got shown on the screen okay so let's just try to log in say tim gmail.com one two three four log in password is incorrect nice okay let's try this again tim at gmail one two three email does not exist so the message is actually working it's showing up right so i just want to prove that to you that's how that works this is kind of the code used to get the messages now though we want our message to look a little bit nicer so how are we going to do that well we're going to use some bootstrap so we're going to create a div this is going to be a class equal to alert and this is going to be alert hyphen danger and then alert hyphen dismissible like that let me make sure i spell this correctly i don't think i did dismissible and then this is going to be fade show like that and the role is going to be alert again i get all this from the bootstrap documentation so now if i do this and i put my message inside of div again i hate the formatting there um you will actually see that this is going to show up in a nice little kind of like banner now we're not quite done because there's some more code that i need to write here we need to actually put a button i'm just going to copy this button inside of this div because this is an alert that we can close so we have this button type button class button close and it closes the alert um yeah i guess this is just called an alert anyways that's what this is here i think that's good sorry i keep looking at my other screen there's a lot of so i have to make sure i'm getting this right okay perfect so what this is going to do now is it's going to show us a red kind of little banner on the screen which is like you know the the error message right so let's save this and let's refresh now and let's just see what this looks like so let's refresh and let's go log in email does not exist okay is there a reason it's not showing me that in a correct color um maybe i type something incorrectly it should be showing that to me in red ah it's because i didn't type danger properly okay so alert danger all right save without formatting and let's try now refresh continue there you go email does not exist okay so let's continue you saw that that was indeed working now the only issue is that right now we're only showing the kind of like error message right i need to also show one that's green if we have a successful message so the way that we're going to do this is we're going to put an if statement inside of our for statement now let's go back to this okay and let's put an if and we're going to check the category so we're going to say if category is equal equal to and in this case it is going to be error then we can do this so we can go percent percent and if and then otherwise so actually we'll just do an else here so let's say if it's not error so we'll say else then we will just show the success message so we'll do the exact same thing except instead of danger it's going to be success like that so let's save without formatting okay hopefully that makes sense but we're saying if it's an error show the error message otherwise show the success okay so let's refresh now we get our red message let's go here let's actually successfully sign in so tim gmail.com one two three four five six seven log in logged in then we can close it by pressing the x there you go sign up same thing it should work for that as well but i won't show that for right now so actually at this point in time this is working this is this is all good now the last thing we need to do here is go to views.pi and we need to add the at login required decorator to make it so we can't access the home page unless we're logged in so we're going to go from flask underscore login import login underscore required and then current underscore user and what we'll actually do is we'll say the name is equal to currentuser.username so that we can like greet the user when they log in okay and then we'll put the at login required here and i'll show you that we won't be able to access this page unless we're logged in so let's go here and refresh now right now i think we actually are logged in because we just logged in right so if i go here oh actually says please log in to access this page um damn okay how did i get that i don't even know how i got that to work because i don't know if i put something there i think that's like a default thing that comes from login manager but it's telling me okay i've got to log in if i want to access that page so what i can do now is go tim gmail.com one two three four five six seven log in and email does not exist hm why does email not exist uh tim gmail.com did i type something wrong one two three four five six seven log in okay let's just try to create a new account i don't know what's going on here okay let's go tim two at gmail.com tim two okay one two three four five six seven one two three four five six seven okay sign up user created and then i access the home page so that was good we are logged in now if i go to login and i go tim2 gmail.com one two three four five six seven login logged in nice okay so it all is working all right so i think with that i'm going to end the video here i don't think there's anything more i need to show you i understand this maybe was a little bit confusing but there's not really a much better way for me to go through all of this because it is a lot of code with that said in the next video we'll actually start working on the blog part of this application so creating a post comments likes all of that and i hope you guys have enjoyed the video up until this point of the series up until this point if you guys did make sure to leave a like subscribe to the channel i will see you in another youtube video you