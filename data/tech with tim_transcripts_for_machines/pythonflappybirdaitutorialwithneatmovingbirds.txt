we say self dot tic underscore county plus equals one which means you know a tic happened a frame went by and now we've moved so we'll keep track of X how many times we move since the last jump all right the next thing we need to calculate is something called displacement and this is gonna be how many pixels were moving up or down this frame and this will be you know what we end up actually moving when we change the Y position of the bird so we're gonna say D equals and in this case we're gonna say self dot Val which is gonna be our velocity multiplied by self dot tic underscore count plus 1.5 times self dot tic underscore count to the exponent two now to any of you physics people this might look similar to a physics equation and that's because it is what this does is tells us based on our current Birds velocity how much we're moving up or how much we're moving down now self dot tick count is actually going to represent how many what he called like time like how many seconds we've been moving for so that's kind of why we use tick camp so every time that we change our direction or we apply a velocity of the birds we either move up or we've kind of stopped moving up this tick count is gonna be going up up up up up and then based on what that tick count is we'll get you know either removing up where we've reached the top of our jump and now we're moving down so what happens essentially you can think of it as as soon as we jump we reset tick count to zero we set the height of our bird to be self dot Y and we set our velocity to be negative ten point five so when tick count equals one what happens is we say negative ten point five times one so we have negative ten point five on this side so let's write this down here negative ten point five then we add that to one point five times selfthought tick count to the exponent two which ends up just evaluating to one because one tick count is one well 1 to the exponent 2 is 1 times 1.5 suruc which is one point five so that means that we're moving a total upwards velocity of negative nine so on this current frame we're moving nine pixels upwards then the next frame will be moving less pixels upward so like seven then five then three so on until eventually we get to Z and then we go down and we start moving positive again and that results in kind of an arc for our bird as it does its jump anyways I hope that that's kind of as simple as I can explain that so now what I'm gonna do is just kind of failsafe this and make sure that we don't have a velocity moving way too far up or way too far down and this is where what's called a terminal velocity so I'm gonna say if D is greater than or equal to 16 so if we're moving down more than 16 pixels or equal to 16 pixels let's just set this to be 16 pixels so that we don't stop we don't move down too fast we reach a point where we don't accelerate anymore so to do this I'm gonna say D equals D over the ABS of D times 16 so this essentially means whatever way that we're moving just actually I don't need to do this ABS I don't think I'm going to just do equals D divided by D times 16 which means I can actually just do 16 so essentially if we're moving down more than 16 just move down 16 all right so now we're gonna say if that's not happening let's do another if statement and we'll say if D is less than 0 what we'll do is say D minus equals 2 now what this is gonna do is say you know if we're moving upwards let's just move up a little bit more and this just kind of finetuned our movement a little bit you can mess with this number if you want the jump to be higher or lower but this is what a number I've come up with that kind of makes it jump nicely alright so now what we're gonna do is actually change our Y position based on this displacement so I'm gonna say selfthought y equals in this case selfthought y plus d so we'll just add whatever we calculated here to our current Y position so that way you know we'll move slowly up or slowly down and now we need to worry about actually tilting the bird so this is the reason we do this inside of move is because based on if we're moving up or down that's how we're gonna figure out whether we're tilting up or we're tilting down so I'm gonna start by saying if D is less than 0 or selfthought Y is less than selfthought height plus 50 now in this case what we're gonna do is we're going to tilt the bird upwards and what I'm checking here is saying if D is less than 0 which means we're moving upwards or selfthought wise less than self dot height plus 50 which essentially means that every time we jump we keep track of where we jumped from so let's actually do a quick picture here so let's say we jump from here we're gonna check if we're our bird position is currently above this position if it is that means we're still moving upwards so don't start falling down yet even if we're on this downward curve still make it look like we're kind of upwards a little bit and then as soon as we get a little bit below this point then we can start tilting the bird downwards that's kind of what that means essentially so we check this and if this happens will we say just say if self dot tilt is less than selfthought max rotation which is that number that we have up here just making sure we don't tilt the bird you know completely backwards or crazy direction then we'll say self dot tilt equals self thought max rotation so rather than like moving it up slowly because the max rotation is only 25 we'll just immediately set the rotation of the bird to be 25 degrees all right next so if that's not true if we're not moving upwards and we don't want to tilt the bird upwards let's tilt the bird downwards now let's do a little bit different but it's not that much different we'll say if self thought tilt is greater than negative 90 what we'll do is say self thought tilt minus equals self dot rotation velocity which is just how much we're gonna be rotating the bird downwards now what this allows us to do is rotate the flappy bird completely 90 degrees so as it starts falling downwards faster and faster it looks like it's kind of nosediving to the ground so that's what you don't use the max rotation because when we go up we don't want to tilt completely up we just want to tilt slightly when we go down we want to tilt all the way down to 90 degrees which is what we do here all right so now that we've done that we've actually finished the move method the jump method and the anit and the last one to do here is draw well actually that lied there's one more but it's not that big starting this we're going to say define self or what am I saying define draw self and win and win is simply going to represent the window we're drawing the bird on 2 now this one's a little bit confusing as well I apologize but we need to get through it so to animate our bird we need to keep track of how many ticks we've shown a current image 4 and when I say tick I just mean how many times is that while loop or our main game loop run and how many times have we already shown one image so I'm gonna keep track of that with self dot image count now what I'm gonna do is create a few if statements and it's probably not an efficient way to do it but it's the way I'm gonna do it anyways I'm gonna say if self dot IMG underscore count is less than self dot animation time then what I'm gonna do is say self dot IMG equals self IMG's zero again I repeat this is not the most efficient way to do this but it's the way that I've come up with all right so now what I'm going to do say L if self dot image count less than self dot animation time x not not 5 by 2 then I'm gonna say self dot IMG equals self dot I am ds1 now we're gonna do the same thing so I guess I should probably just copy this and can you guess what we're gonna change this to we're gonna change this to a 3 we're gonna change this to a 2 we're gonna add I guess two more elif's so we're gonna do one more here where Isis to be a 4 and I change this to be a 1 like this and then what I'm gonna do is do one more Elif and this one is now gonna say 4 sorry 4 plus 1 and instead of having it less than we're gonna have two equal signs and then we're gonna change this image to be zero we're also gonna reset the image counts were going to say image count equals zero all right so let's kind of go through what I actually just did here so what I'm doing is I'm checking what image we should show based on the current image count so if the image count is less than 5 which is our self dot animation time then what we're gonna do is we're going to display the first flappy bird image now if we get to a point where the animation count is larger than this we're gonna check the next Elif statement which says if the animation time or the I guess the selfthought image count is less than 10 we're gonna show the second flappy bird image which is this so we're gonna go from this to this one where the bird the wings are now level alright so next we're gonna say okay if we surpass that then we're gonna check if we're less than 15 for less than 15 we're gonna show the last image then we're gonna show the first image again and we're gonna show the what am I saying we're gonna show the second image again then we're gonna show the first image again and reset the image counter so this way we get the wings flapping up and then flapping down because if we just reset after the last image here then what we would end up having is the bird flaps up and then it instantly goes back to its starting position and it kind of looks like it skips a frame all right now the last thing to do here is just check one last condition so the thing is when our bird is tilted almost 90 degrees so going downwards we actually don't want it to be flapping its wings and changing the image so what we're gonna do is just do a quick check here and say if self thought tilt is less than or equal to negative 80 what we're gonna do is say self dot IMG equals self dot IMG is one which just means we're gonna go to the image where its wings are kind of level and then what we're gonna do is just display that image instead so that it looks like it just knows diving down it's not like flapping its wings going downwards because that doesn't really make any sense and it kind of looks kind of weird so then after that I'm gonna say self the IMG count equals self dot animation time multiplied by two so this way when we jump back up it doesn't kind of like skip a frame it starts at you know what it should be to show this image which is an animation count of 10 all right anyways hopefully you guys understood how to do that now the last thing to actually draw this image is we need to rotate it around the center eye based on its current tilt so all these birds and we've already modified this it has a tilt so how do we actually tilt the image that we have because the image we have if I can find it from the desktop they're all level right like they're all level with the screen so how do I make it go up and go down well this is kind of complicated but I've written wrote I guess a function that does this for us now I want to clarify I actually found this on Stack Overflow unfortunately I can't remember where I found it but I'm just gonna type it out and kind of copy it to show you this is what how you actually rotate an image around its end and Poggi so I must say rotated image equals PI game dot transform dot rotates like that if I could spell that correctly and then I'm gonna take an image and an angle now the image I'm gonna do is self dot I am I guess it's just self dot image because that's what we're keeping track of here and then the angle is gonna be self dot tilt now what this will do is rotate the image for us but we need to kind of move it so it's actually in the center because if we do this it rotates the image around the top left hand corner and it just kind of makes our bird look kind of weird so to fix this we're gonna say new underscore rectangle equals in this case rotated image dot gets underscore X and we're gonna say Center equals image dot get rekt now image is actually gonna be self dot image my apologies and when we do get rekt we're gonna do this I'm gonna save top underscore left or not top underscore left just top left equals top left and then we're gonna say dot Center if I could find this year all right so that should be about right so actually my apologies here we don't need to type top left again what we do here is actually define the top left of our image which is gonna be self thought X self dot y and then we put this dot Center now again I honestly don't really know how this works I just copied it from Stack Overflow but I do know that it rotates the image around the center which is what we need to do I'll see if I can find that link and put it in the description anyways now since in our draw method we have the window that we're gonna be drawing this on I'm gonna say win da blitz and then I'm going to blitt the rotated image around a certain position so I'm gonna say rotated image and then I'm gonna put it on new rect dot top left now I know it's kind of weird and you probably haven't seen this in PI game but this is just how we rotate image again I don't want to go through all of that all right the last method we need is something called get underscore mask and that's what we're gonna use when we get collision for du collision for our objects this one's pretty straightforward all we're gonna do is if I can actually find it because I'm just look my other screen here is we want to return a value that is highgain dot mask dot from underscore image are not image surface and then the surface is gonna be self dot IMG we'll talk about masks later but we just need to implement that all right so I was gonna program the rest of the classes first but I figured since we just did all this work on this bird class let's actually just start getting into drawing some of this stuff here so we can see how this bird class actually works while it's still fresh in our minds so what I'm gonna do is start by creating a function called main this main function is gonna run the main loop of our game I'm also going to create another function called draw underscore window and this is what's gonna well draw the window for our game so it's gonna take a bird and actually we'll do window first it's gonna take a window and bird now what I'm gonna do in here is just really quickly draw the background image and then draw the bird on top of it just so we can see how the bird actually works when it's moving which what I'm gonna say is do win dot blitz and if you don't know what blit does it just means draw so it's like draw whatever you put in here on the window so in this case I'm gonna put our background image which is BG underscore image comma and then I'm just gonna put 0 0 to draw it 0 0 on our screen so let's do that so this is the top left position of the image where you're drawing anyways ok now I'm gonna say PI game dot display dot update which simply updates the display and kind of refreshes it and then I'm gonna draw the bird so I say win not win double it we already have a method for this it's called bird draw and we'll pass it that window and now when we do that we will call this draw method it'll handle all the animation all the tilting for us and draw the bird okay so now inside of our main loop here let's create a bird object let's just call it bird for simplicity here and we'll say bird bird we'll give it a starting position of I don't know 200 200 just so that we can see it and we'll update this later now what I'm gonna do really basically in here is create a while loop and just set up the main game loop for our PI game window so in here I'm gonna create another variable called run equals true I'm gonna say well run and then that way we can make run equal false later and the game if we need to now I'm gonna set up the basic PI game of event loop which is for event in pygame event done yet it's just gonna keep track of whenever something happens like whenever the user clicks the mouse or something we'll run this for boot for loop loop through all the events and then we can do something with that so the event we want to check for here is if event dot type equals equals pry game don't quit in all capitals then we're going to do is PI game quit now what this does is quit spiking so if we click on the red X in the top right hand corner of our PI game window we're gonna quit now actually I'm just gonna modify this a little bit to make this run equals false and I'm just gonna quit outside the loop so you know if we ever exit this loop we quit PI game and then consequently we can actually quit the program as well all right so let me just call main here and inside this while loop let's add one more line which calls our draw window function and now we'll pass that window as well as bird and if we call this we should be able to see our bird moving or actually will see our bird and then we'll be able to see it moving later so let's look at this now if I run and hit control B and subline text what is the issue video system not initialized oh I need to create a PI game window my bad let's do win equals PI game dot what do you call it display dot set underscore mode and then for the coordinates we're gonna go win underscore width win underscore height my apologies about that alright so now that we do that you can see we have this flappy bird and he is flapping his wings now this image is a little bit short for our screen which I mean guess that means we need to make the width a little bit shorter so let's make this width 500 and see if that makes it a little bit better and there we go so we have this bird he's flapping his wings but obviously he's not moving it so if we want to move him what we need to do is we need to call move on our bird so what I'm gonna say is bird dot move so this is what we're gonna call every frame so essentially every time our while loop ticks our birds gonna move so let's run this and see how it looks now and you can see our bird just falls down out of nowhere almost immediately and he falls very quickly so how can we fix this well we need to implement something called a clock so that we can actually set the frame rate or like the tick rate so how fast this while loops running to be at a consistent rate so it's not going to depend on how fast your computer is how fast it runs we're actually gonna set it so I'm gonna make a clock object this is called clock equals PI game time dot clock and now what I'm gonna do is every time I run this while loop I'm gonna call clock tick 30 which stands for we're gonna do at most 30 ticks every second so now if I run this and we do control B you can see our bird falls a much slower and he looks a lot better and you can even notice that he actually tilts down as he starts falling downwards so we know that we've done everything correctly for our bird class so here's we'll leave this in here for now I'm just going to comment out bird move and that's all we need to do to test our bird so next let's start coding our pipe class