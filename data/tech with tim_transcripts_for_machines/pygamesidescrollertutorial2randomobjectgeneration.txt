hey guys and welcome back to the second video in my PI game scroller series I guess that's what we can call it this little sidescrolling game in this video I'll just give you a quick sneak peek of what we're gonna be doing pretty much we're gonna be setting up some different objects that can be moving on the screen to act as obstacles where then we can then we're gonna set up the hitboxes but of those objects and the character and then in the next video we're gonna go over collision and in the one after that we're gonna be doing scoring and like the end game and stuff like that so I'll give you a sneak peek here just by running my other code my other program so you can see here so wait a second we've got a saw with some spinning blades and the red boxes are just to simulate where the hitbox is gonna be so that we know when our character's jumping up and down if he's actually gonna be hitting that object so right now obviously I don't want the collision set up you can see that everything's working well and we randomly kind of generate objects on the screen like this so that's what I'm gonna be doing in this video makes you guys stay tuned until the very end if you have any questions always leave them in the comment down below okay so let's get started alright so the first thing we need to do for this is we need to set up our different obstacles or objects I'm just gonna call them obstacles in this case so I'm gonna start by just creating a new class and this one I'm gonna call my salt class okay so we're gonna inherit from objects oops I do our initialization function like this or method let's go we're gonna do the same that we got from here these ones here so XY with type so and then we'll set them up down here so self dot x equals x self del y equals y and so on oK we've got that set up now in here I'm also gonna create one more variable I'm just gonna call this self thought hip box and we'll just set that equal to blank for right now actually we'll do this X Y width and height so there we go okay and now we need one more method in here and this is gonna be a draw method and that we're done with this just gonna do self.window and then here we're gonna do wind dog blitz can just will pull this image I'm going to fill this in a second selftaught image and then in here we're going to do self thought X and self thought what and then actually underneath here I'll just go step forward and we're gonna do pygame dot draw dot rectangle and then we're gonna draw to the window we're gonna draw it red so by doing that and then we're gonna draw our hip box so let's do self dot hitbox as it's already in the rectangle format here and then we'll draw with a thickness of two and then in here we're gonna set up the hip box afterwards so one second we'll do just so we remember selfthought hitbox equal to that and then we're gonna change these properties in here as our characters moving around okay so now we need to get the image so we've done that class just like I have at the top of these classes here I loaded up all the images this one just gonna be I think it's like four images for our saw with the spinning blade so to do this we're just gonna I'm just gonna call this what I call it image equal to this and then in here we need to do pygame dot image dot load and then in here we're gonna type OS not half don't like join now what this does here if you haven't seen it before is pretty much it allows us to access an image that's inside of a folder so in like a subdirectory or something like that so that that way we don't have all the images mixing with our Python scripts and then first image is called saw zero I'm going to copy and paste this three times and each time I'm just gonna change this so it's gonna say saw one now the next one saw two and the last one is going to be saw three and you should already have all those images if you download them from the github and there we are okay so now we need to kind of animate through our images so right now all I'm doing is I'm just drawing the one image we actually need to count through the images and draw them accordingly just like we do up at the top so just give me one second okay so now we're just gonna do another variable up here or attribute I'm just going to call this self dot let's say here is a self talk count that's fine for now set equal to zero and then in here we're gonna say if self dot count is greater than four actually not for let's see what number do we want to do here we're gonna do eight greater than or equal to eight and I'll explain why I'm using this number in a second that we're just gonna reset our rotate our count variable here to zero and then in here what I'm gonna do them and say wind up lit selfthought image and then we're gonna say self dot count inside of this image right here integer divided by two so what interior division does is it pretty much just is going to find the even amount that can go into something so for example if you're dividing four by three then it's gonna give you an answer of one rather than the decimal answer that you get there so this way every two frames we're drawing one frame of the sauce so that doesn't move too fast and this is kind of how I animated up here just with different numbers this is just an easier example that's why I didn't leave it in the starter file and that should all work like that and that we actually we just make sure that we're incrementing our account otherwise that's not gonna work so we'll do self thought count plus equals one like so okay so now our first objects done are saw object now we want to move on to our next object which I just like to call like a spike so I'm just gonna call this one class spike we're gonna inherit from our saw object but just by typing saw because that's up here and that's gonna save us a bit of time because now we don't need to retype out this we're just gonna change the draw method so now all we need to do is we need to find the image so this spike image is not moving it's just a still image this makes it a little bit easier for us so we're just gonna do image equals and then pygame got image got load same thing as before Oh s dot path join in here when you get images call MA and then I believe I just called my picture spike dot PNG oh that reminds me for all these images up here where we have saw zero we need adult PM G's here otherwise you're gonna run into an error with that so let me just do that quickly dot PNG my bad so I wrote that okay so now we've got the image now we need to make our draw method so we're gonna do define draw then in here self when same as up here and all we're gonna do here is we're gonna do my game or actually win so up blitz then our image so self dot image and then self dot X and self double line like so now after that we want to draw our hitbox so we first have to change our hitbox so we're gonna say self thought hitbox is equal to and we're gonna change it in a second and then we're gonna say tie game dot draw dot rectangle same thing as before on our window color red RGB here and then we're gonna say self dot hitbox and too thick there we go okay so now you take a breath here quickly we've got our spike class and we've got our saw class this one inherits from here so it's going to have these same properties for the initialization method I've got our images loaded up and everything should hopefully be work so now we're gonna do the hitboxes so as I showed you in the other program we'll run that quickly here the reason that we create hitboxes is because an image is not perfect right so everything in pygame becomes erecting but when you draw it as an image and you can see here that if we didn't have the hitbox then if you were to hit even where it doesn't look like there's a spike then it would classify as you like knocking into it or hitting it right so when we do do character collision it's important that we have the hitbox for these different objects so that you're not running into things and you don't even know you're running into them so for example this saw here you might even go well to move the hitbox down a little bit and the hitbox just is what's in red so that we're not running into these corners here because we can't actually really create a circular hitbox without a lot of really complex coding which we're not going to cover in this tutorial okay so that's why we have the hitbox so now I'm just gonna tell you the numbers I use for these hitboxes just to speed up things make it a little faster pretty much is relative to the position of the object right so for our first object which is our saw this is what I have here I have selfthought X plus 5 not just moving it two to the right five and then we'll have selfthought Y plus five moving it down five and then selftaught width minus 10 so that's the same on both sides and self dot height minus five like that there we go and now after this actually for this height here we can just leave this like this just realize that now for the next one spike we have selfthought X plus ten self dot y selfthought width per actually I think I just made this a static number yeah I did it is 28 just because of the width I know the width of the thing that we're drawing there and then 315 like that okay so now let's let's just draw these on the screen so that we can we see them in action make sure they're working so I'm just temporarily doing this you don't have to do this if you don't want but I'm just gonna create two objects I'm just gonna call SAW saw and then in here we're gonna do let's draw a 300 0 48 320 and then we'll just do oh sorry this is spike actually just change that quickly we'll say SAW is equal to a new salt object we're gonna draw this I don't know where do we want to draw this we'll just draw it in the middle screen just we can see it 300 300 and is 64 by 64 perfect now in here we got to make sure we actually are drawing them spike don't draw on the window and saw a girl on the window now I'm just gonna add e and a W here because I realized that the same name is the class we're gonna run into an issue there and there we go so now you can see we've gone our images loaded up here and we can see the hitbox on a spike and the hitbox on the saw now notice the saw is massively large that's just because we're gonna change it and make a little bit smaller I just wanted to show you that first so when we do actually do that the hitbox will be correct so there we are everything looks like it's working this Aussie little animation going so now let's get the saw to be the right size so to do this what we're gonna do is just a little thing in PI game where we can actually transform an image so to do that what we need to do is just type or use a little trick in PI game which allows us to actually transform an image so we can scale it down or scale it up so in this case we want to scale down so where our images in our saw here we're gonna do PI game dot sorry transform dot scale and we'll just put this in brackets our image and then in here what we want to scale it down to so in this case 64 by 64 now we'll go ahead and we'll run the program and we ran into an issue saw drama is not defined hmm let's see here oh that's because I shouldn't put another W here my god alright well I really can't type today can I so make sure you spell pygame correctly and then everything should be working there we go so now you can see the salt looks pretty correct the hip marks might be a little bit low but that's not gonna matter because our characters never gonna go lower than this point anyways and yeah everything looks pretty good for our two hip boxes so let's get our objects now moving randomly onto the screen so we don't just want them floating in the middle like that obviously we want them to be moving so there's a few things we need to do now so we're gonna get rid of these two objects here these were just used to test out our program and now we're gonna create a new list I'm just in this while loop here and we're just gonna call it well I'm gonna say objects it's gonna set it equal to a blank list right now now what I'm gonna do quickly before I don't forget we're gonna say for object another T just so it doesn't mess up in our program in objects we're going to do object dot row like that feel free to change the names all this stuff if you want you can make it X if you like it doesn't really matter I just like to make it so make sense so this would break as well next don't draw it and then in here put window sure you know what we'll just leave like this for now now in here what we need to do is every time this event is triggered remember we increase the speed and this happens every half a second so what we want to do is now we want to create another event that's gonna happen every like two or three seconds we can change that randomly if we want so that we can then create a new object based on that so let's create a new event so we're gonna say pie or game time the center score timer so this timer again is gonna trigger at whatever time we send it so I'm going to so you use your event plus two and then in here I'm gonna do random dot R and range and we'll just make it between 2000 and 3500 so that we don't know exactly when it's going to come but we know it's within two seconds and 3.5 seconds so add a little element of randomness here now make sure that well before we run our program here we import random at the top okay and then we can come back down and there we go so now that this event is being triggered we need to check when the event is triggered so just like we did here I'm just gonna copy and paste this save myself a bit of time then we're gonna change this to two and in this case here we're gonna now append a new object into our lists or new obstacle so objects dot append and then it up here we're just going to start by randomly selecting which objects we want to append so if it's if we get 0 so I'm just gonna say R equals random dot R and range between 0 and 2 if we get 0 then we're going to append our our spike otherwise we're gonna append our saw and it doesn't matter what way you do it just so that we don't know exactly what one we're getting so we'll just say if R was equal to 0 we'll save objects dot append and then this is gonna be a saw and in here we're gonna make our X it's gonna be again we're gonna do a random X actually come on to random we'll just do 8 10 so that we know that it's on the right side of the screen so that we don't see it quite yet it doesn't just pop up and magically appear in our screen it's gonna look like it's sliding in the Y value if we're gonna set at 3 10 and then after that we are going to do 64 by 64 for our width and our height okay now we'll just do else because we know if it's not 0 it's got to be 1 because this can't be two we'll copy this and paste this down here and in this case we're gonna make this a spike and then in here we're not I will put it at 810 I guess and then for our Y value is gonna be 0 we have 48 as our whip and then for our height believe we have put 320 and there we go that should be good so now that we're appending to the screen our objects there's one more step that we need to do we need to move the objects so after we're drawing our objects we're creating our objects we need to move so we're gonna do this another thing I'm here going to say for object another T in objects that we're just gonna say object dot X plus equal cork minus equal 1.4 because that's because we're moving it left right so just like we're moving the background we're also gonna be moving the x value of our objects so it looks like it's sliding left onto this Green another step I'm gonna do here is I'm just gonna say if object dot X is less than and we'll say negative object dot width with two T's so that it's off the screen and we can no longer see it and we'll just multiply this by a negative one so that's the negative then we're gonna get rid of the object so to do that say objects are list dot pop now what pop does is it removes an object add an indices so we have to find the indices we're removing the object so to do this I hate typing this we're just gonna say objects dot index and then in here object like that so a lot of objects here but I picked up pop we find the index of where object is and then we remove it from our list like that okay so that should be it let's go ahead and run our program and see if everything's working okay and give it a second to spawn in some objects so you can see we have a saw coming in now another sauce these are a little bit close together so we might want to increase the time increment for our random and there we go if you got two spikes another saw so it seems to be working pretty well so what we want to do now is maybe just change the time increment so just play around with it maybe two two seconds a little bit too quick so maybe we'll make this between three seconds and five seconds right you guys can play around with this as you like but that's probably good time increment and that's gonna do it for this second video so in the next video I'm gonna go over the collision and then I'm gonna go over scoring that also might lead into a fourth video but that's gonna be it it's only gonna be four videos so if you guys liked the video please make sure you leave a like and subscribe to the channel and I will see you again in the next one