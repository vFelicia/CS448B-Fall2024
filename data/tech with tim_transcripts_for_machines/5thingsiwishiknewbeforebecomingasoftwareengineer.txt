can you remember the frustration of just learning how to code and writing your first hello world program dealing with errors and bugs that kept you up for hours days or maybe even weeks and just the constant idea that you weren't making any progress and you were stuck not sure where to go next well if that's you then I can definitely relate to that believe it or not when I first started learning how to code I made really slow progress I was constantly frustrated and I just felt like I didn't really know what I was doing or where I was going now for that reason I'm gonna make this video and share with you five things that I wish I knew before I became a software engineer now even though they wouldn't have solved all my problems they would have made this experience so much more pleasurable and allowed me to advance that much faster so with that said let's get into the video and let me tell you about five things I wish I knew before becoming a software engineer tip or Point number zero on this list has to do with resources now there are so many free resources and paid resources out there for learning how to code and you have to quickly figure out what type of me medium and resources work best for you I know for me personally I like to read a lot I prefer to kind of skim through documentation maybe read some simple books I like to just get the information very quickly and experiment with it on my own but I know for a lot of you you prefer video content where you want a nice long textbook or you want a Blog article whatever it is you got to figure out the resource that works for you now if you are like me and you do prefer this written content You're Gonna Love a bunch of the free resources from our video sponsor HubSpot one of the resources that caught my eye was the 50 free coding templates which provides a ton of useful code Snippets that you can copy and paste into your code now this is completely free and this resource gives you things related to CSS effects nav bars buttons transitions really anything you can imagine there's a ton of resources in there and I know for me I love working with these kind of code Snippets and prebuilt templates because it lets me get a website up and running really quickly without having to worry about all of the details like CSS which personally I hate writing now I've put the link in the description so you guys can check this out for yourself but HubSpot has a ton of other great resources and you can again check them out from the link in the description completely for free so a massive shout out to HubSpot for making all of these resources free and sponsoring this video now let's move on to our next tip so moving on something I really wish I could go back and tell myself is that the first programming language I learn is not going to be the last now I think a lot of people and especially myself when I was just getting started spent a lot of energy and time focusing on what language we should learn as the first language now as much as that's important and it is worth putting a bit of energy and time into you realize as you get better as a software engineer and just learn a lot of different things that really a language is based on what you're going to be doing with it right it's not like I'm just a python developer or I'm just a JavaScript developer or I only know this language you use different languages based on the type of applications and tasks that you're trying to achieve so rather than saying Hey I want to Learn Python because it's easier I'm going to learn JavaScript script or C plus plus I wish I had focused on what it is that I want to build do I want to build websites do I want to build mobile apps do I want to build I don't know games whatever it is right and then picking the correct language and stack based on that objective I think a lot of people have it the other way around where they pick a language and then they see what they can do with the language as opposed to picking what it is you actually want to make especially as you're getting started and you're really passionate about this and then finding how do I make that what do I need to learn also as you get more experience as a software developer you're going to work with multiple languages you're probably going to get hired on some job where there's going to be languages they use that you don't know and you're gonna have to spend a few weeks learning that language that's totally fine I just wanted to emphasize here it doesn't matter what you start with you can always learn different languages and the important thing is to use the right language for the job and not to be attached to any particular Tech stack or technology now the next thing I wish I knew is that mastering your software engineering tools is almost as important as mastering your problem solving and your program programming language skills now actually as a beginning kind of YouTuber and software engineer I think I made a few mistakes and misguided videos where I talked about things like why you don't need to use an IDE or why it's not that important to master this tool and that was really before I had a lot of experience actually working in a software engineering team now as a developer who writes code pretty much every single day reviews code and sees a lot of Junior developers I can say that it's super important that you're comfortable in the environment that you're working in and you're efficient with various software engineering tools the biggest one that comes to mind is git being really comfortable with Git knowing how to resolve conflicts knowing how to create a pull request knowing how to move commits from different branches there's a lot of stuff that happens when you're working in a large code base and being comfortable with your IDE knowing the different shortcuts and especially understanding things like bash and git commands really comes in handy and saves you a ton of time I can't tell you how many times I've kind of been approached by someone more Junior and they've said hey can you help me with this git issue that's totally fine I'm happy to help them with that but if they had spent maybe an hour watching a git course or going through some more advanced commands that would have saved them you know a ton of time they wouldn't have had to wait for me and they would have just been a lot more efficient so really the thing here is to make sure you are actually learning your software engineering tools you're learning about debuggers you're learning about git and you're placing a bit of an emphasis on that especially when you're trying to work in a team and land some type of job now the next thing I wish I knew was to focus on my coding habits and my coding style much earlier by software development Journey now a lot of people when they're just starting out don't really consider how they're writing code they're just trying to get something done they're just trying to solve a problem and even understand what's going on now that's very understandable and I don't blame anyone for that but I think it's very helpful to also consider the way in which you're writing code and the habits that you're building a lot of people get in the habit especially if they're like competitive programmers of writing really small variable names or not being expressive with their code just solving something as fast as humanly possible now that's great in a competitive programming setting but not when you're actually working in a team you want to be in the habit of writing potentially verbose long and just easy to understand variable names and even things like separating your code out into smaller functions uh kind of condensing some of your nesting levels maybe taking some conditions and putting those inside of a variable there's a lot of very simple things you can do that are really habits you build over time that allow you to write cleaner scalable and just much more expressive and easy to understand code it's very difficult if you've been coding in a certain style for two or three years to all of a sudden go and start writing that really clean code because the habit for you is to write it in the other way so if when you're just getting started you can consider okay how can I write the best code possible how can I be consistent that's the big thing being consistent in whatever style you use that's really going to serve you a lot and when you get into an interview or you get into a team environment where someone's reviewing your code you're not even going to have to think about writing in a different way because the Habit is already built in that you're going to write good code every single time because that's what you do so the next thing I wish I knew is that it's not a competition I think a lot of people and myself included get in this mindset where they're constantly comparing themselves to other people we may watch those videos like how much a software engineer makes right and we say oh that guy's making 200k at Google or that guy's making 250 but I don't even have a job yet or he did that in six months but I've been coding for two years and I still am just a junior developer whatever it may be right we have this constant mentality of looking at other people's success and saying we should be there we should be better than them the reality is that's really just not a helpful mindset it's not really going to get you anywhere and unless that really is like the energy and the passion you're getting for going and learning more stuff I just don't think it's a helpful thing to be doing everyone learns coding at a different pace there's some people that are just naturally very intelligent that can pick it up in a few months and there's some people that it takes two or three years to learn it doesn't matter how long it's taking you what matters is that you're constantly improving and you're doing the best that you pass possibly can right the only person I think you should be comparing yourself to is yourself and saying okay am I doing better than I was yesterday am I actually progressing am I at my capacity that's where a good comparison is to make not against other people that are in a completely different situation than yourself I know it's a lot easier said than done we're all still probably going to do this to some extent but I think as much as possible try to keep the comparison on yourself not on other people I just don't think it's a helpful thing to do all right so my last Point here is meant to be a bit motivational or inspirational but this is that you can really learn anything I think a lot of people especially when they're just beginning programming or getting into a more difficult field they kind of limit what they think they're going to be capable of right they're like oh well I can do python but I think something like C plus that might be a little bit too difficult for me or I don't think I can get into machine learning I just the math is going to be too complicated and they set these kind of limiting beliefs I promise you you can learn anything you want to learn what's going to be different is how long it takes you to learn that I truly believe at this point in time after learning so many different things and spending countless hours literally thousands probably tens of thousands of hours in front of my computer that it doesn't matter what you ask me to build I'll be able to build it doesn't matter what I need to learn I'll be able to learn it it's just gonna take me you know maybe more time than it might take someone else so I think adopting that mindset that you can figure anything out you can learn anything it's just a matter of how long it takes to do that is really really effective and it gives you the confidence to go out there and maybe take a job that you don't already quite know how to do I can't tell you how many times someone's come to me and said hey I need to build this I'm willing to pay you X dollars can you do it I have no idea how to do it but I just say yeah sure I'll figure it out and there we go and I go and I build it right and since I'm getting paid it's that much more motivation to go out there and actually learn this new stack and figure it out there's been all kinds of courses and things that I've wanted to do on YouTube or that you guys have asked me for where I have had no idea anything about it before I started actually producing the course but because I knew I was gonna have to teach it to you guys I had to figure it out go through all the steps do a ton of research and make sure I was confident in what I knew and then presented to you and kind of practice and reinforce all of my learning so anyways I just wanted to leave you with that I promise you guys can learn anything put your mind to it put the time in and you guys will get the results that you need anyways with that said I think I'm gonna wrap up the video here I hope you guys enjoyed if you did leave a like subscribe to the channel and I will see you in the next one foreign