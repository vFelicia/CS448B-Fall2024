hello everybody and welcome to the next video in this tutorial Series where we'll be continuing from where we left off and writing the rest of the front end now in the previous video we handled creating a challenge in this video we're going to be handling listing the challenges and then obviously accepting them and revealing our answer so let's get started by creating a new component that will show us all of the current challenges that are active once we're viewing the different challenges then we can start interacting with them by accepting them revealing the answer seeing who won Etc so I'm going to go to my source directory and I'm going to make a component and I'll just call this list challenges. JS now inside of here let's start by saying import react use State and use effect from react like that we're also going to import some components so we'll say import a button and a heading from our at this slash react I am then going to go here and create the component so we'll say function list challenges like before we want to take in our signer we need the signer so we can send transactions and we can get the address of our account and I'm going to set a bunch of state now the idea here is that I'm going to call my backend and I'm going to use an inspect request to get all of the challenges once I have them on the front end I'm going to sort the those challenges so I'm going to get all of the challenges that I created that I'm currently a part of that I was in before and then the ones that were submitted by other people that way we can have these curated lists of challenges and we can kind of organize them into a few different categories so I'm going to start by saying const current challenges and then Set current challenges is equal to use State and we'll start by making this a list I'm then going to say const my challenge set my challenge is equal to use State and for now this will be undefined now current challenges will be kind of the active challenges the ones where someone needs to uh what do you call accept the challenge or where there's no winner yet in the challenge okay my challenge will be any challenge I'm currently a part of so the one that I created or the one I'm an opponent in we're then going to say const my old challenges and then set my old challenges is equal to use State and this will be a list now this will be a history of all the challenges that are finished that have a winner that I participated in in the past we're then going to say const old challenges like this and then set old challenges is equal to use State and same thing here this will be a list and then we need a few last things we're going to say const loading set loading is equal to use State and that will be false we then are going to say const address this will be our address and then set address is equal to use State and this will just be an empty string to start okay I know that's quite a bit of code already but that is the state that we need now that we have that we're going to set up a use effect hook and as soon as this component is mounted what we are going to do is we are going to get the address from our signer so we're going to put in the dependency array here signer which means anytime the signer changes we'll refresh this and we're going to say signer question mark doget address now the reason I'm doing a question mark is because it's possible that we don't have a signer so I want to make sure we don't have an error so I put a question mark here I'm going to say doget address and then then and I'm going to say addr standing for address and then set addr or set address sorry and this is addr do to lowercase just to make sure that we don't get any errors with the capitalization okay so that is our first use effect now we're going to write a few functions we're going to say async function and then get challenges okay now inside of the challenges we'll say set loading is equal to true and then we'll just put a set loading equal to false here and this is where we'll do all of the code so get challenges we'll write that in a minute I just want to kind of hook everything up first and then we can write the individual functions I find it's easier to uh do it that way so we have get challenges now what I'm going to do is write another use effect and inside of this use effect I am going to say if the address changes then we want to get challenges now what I'm pretty much saying here is okay as soon as we set the address address and the address is modified we're just going to call the get challenges function so we reload those challenges and kind of resort them into their respective list because if the address changes that means we have a new player that we're looking at so their challenge or their previous challenges are going to be different so we want to refresh all of those challenges okay this is not really the most efficient way to go about doing things but for now this is perfectly fine okay so now that we have that we will just write a little bit of the what do you call it kind of UI and then we can write the get challenges function so let's say let button props equal to an empty object and we'll say if loading then button props do loading is equal to true so pretty much the same thing we had before and we're also going to say if not address then we're simply going to return just an empty jsx component because if we don't have an address then we're not going to have any challenges to display so we can just display nothing now other than that we are going to start returning our jsx code or our HTML so we're going to say return div we can give this a class name so we can say class name is equal to and I'll just put Center because I want this to be in the center of the screen we'll write that in a second and for now we'll set up a few headings and then we'll set up some more components and we'll kind of go through that but I'm going to say heading I'm going to say size is equal to large and the first heading will be the active challenges okay then we will go here and we're going to have another heading this is going to be old challenges and then this is going to be my history and where there any other ones we need we have my history old challenges and then active challenges that's actually fine for now we're going to write some more logic in a minute now we'll also put a button down here and inside of this button we'll say dot dot dot button props so we'll kind of Mark it as loading if we need to be we'll say on click is equal to get challenges the text in here will say update challenges so we can manually update the challenges by pressing this button and then we can say type is equal to submit or actually I don't think we need the type I think is actually fine if we leave that out and then we'll say the color scheme is equal to Blue and just make that a blue button now let's format our code okay perfect and let's start writing the get challenges function now remember that with get challenges we're actually going to use an inspect request so this means that we're not going to be sending an input we're just going to be inspecting the state of the caresan machine so to do that we're going to go to UIL and we're going to write a new function here that allows us to send an inspect request so what we'll do here is we'll say export const inspect and this will be equal to an asnc function this is going to take in some payload which is the inspect data so the method essentially that we're going to be calling now what we're going to do is create a response variable so we're going to say const response is equal to a wait and we can just use a very simple fetch so just a normal kind of HTTP get request that we'll send to our server so if we go look at util or not util sorry constants notice we have the default URL which is where the inspect endpoint exists so all we actually need to do is use this and then we need to append the payload here that we want to send and when we send that to our back end it's just a normal HTTP request and it will return the data for us so if we go back to util here I've put in some back ticks and I'm going to embed my variables so I'm going to say the default URL from constants make sure you import that and then we're going to say that this is going to be json. stringify and we are going to stringify the payload and that's all we need to do so we're just sending a simple fetch get request so now we're going to say if the response. status is equal to 200 which means it was successful and we'll just do three equal signs so we don't get yelled at by JavaScript then we'll say the result is equal to a wait the responsejson and then we will return the result. reports now what we're able to do is access this reports object this will contain any of the reports that were generated when we sent this inspect request could be one report could be multiple reports Etc in our case it will just be one and that report will contain all of the different challenges so then we'll be able to access those challenges and utilize them how we see fit now otherwise we'll just say console.log and we'll say jon. stringify and we'll say a wait response. text like that because if it was not a status of 200 then we got some kind of error message so we'll get the text from the response and we'll just display that here okay that's all we need for inspect uh that should be that function so let's go back to list challenges and we can now utilize that function uh to actually get all of the challenges so we'll go inside of here and we will start by saying let results we can then say results are equal to a wait and we can call the inspect function from our util file and what we need to pass is our Json so we're going to say the method is equal to get challenges because that's what the back request is that we want we'll then say that the results are equal to json.parse and what I need to actually do is I need to convert what's going to be a hexad decimal uh value into a string so what's going to happen if we go to util here is we are going to get the Json and inside of the Json here what we're actually going to have is a list of reports right so we access those list of reports now all of those reports are going to be hexadecimal because we have to only send and receive hex decimal data so what I need to do is actually convert that hex decimal data to a string so what I'm going to do is use a utility function here called hex to string that will do the conversion for me so I'm going to go here and I'm going to make another function I'm going to say export const hex to string this is going to take in some hex data and it's just going to return a string so we're going to say try and this is going to be ethers doils do2 and then utf8 bytes like that this is how we convert the hex decimal value to a string so we'll just pass hex and we will simply return that we'll then say catch e so a catch some exception and we will just return whatever the hex decimal value was now I'll just put an underscore here so it get doesn't get marked as an unused variable okay so we have our hex to string now we'll go back here and we will utilize that function so inside of here we are going to say Json parse and then this is going to be hex to string and it's going to be results z. payload and then we're going to take the Json and we're going to access the challenges now what are we doing here well we're going to have a list of reports that's what's returned here those reports well there could be multiple but in our case there's just going to be one so what we do is we access the first report and then we get the payload associated with that report which is the data that contains all of our reports we then convert this hex decimal value into a string we parse it as Json and we access the challenges key now to refresh you if we go back in to main.py and we have a look at get challenges notice that what we're returning is an object that has the key challenges so this is going to access the list of challenges for us that's what we're doing okay so that's what we're getting here with our results now that we have that we need to take all these results and we need to sort them into their appropriate categories so we're going to say con current challenges is equal to an empty list we're going to say let my challenge equal to undefined we're going to say const old challenges is equal to an empty list we're going to say const my old challenges is equal to an Mt list as well now we're going to iterate through all of our challenges so we're going to say const if we can type that correctly and this will be challenge of results and this needs to be a for Loop okay that will fix it for us so con challenge of results and what we need to do is sort these challenges so we need to figure out first of all is the current user so the person signed in whatever their address or account is are they a part of this challenge so the way we can do that so we can say const user participated okay if we spell that correctly is equal to and this will be the challenge do opponent is equal to the address or the challenge. Creator is equal to the address remember address is the address of the person signed in on our challenge we have an opponent and we have a Creator if they are either the Creator or the opponent so our current address then they participate in this challenge let me just format that code okay now what we'll say is if the challenge. winner and the user participated what that means that the challenge is finished so it's no longer active because there's a winner so as soon as we have a winner we know the challenge is done and if our user participated in that that means that this is part of their history so we're going to say my old challenges. push and we'll simply push the challenge inside of there now we'll have an else if and we'll say else if the user participated so if there was no winner but the user participated that means this is currently an active challenge so we're going to say my challenge is equal to user participated because the user can only be in one challenge at a time so if the challenge is not yet finished and they're part of it that means this is the challenge they're currently active in we're going to have another else if and we're going to say else if challenge. winner so what this is really checking now is if there was a winner and the user did not participate because if there was a winner and the user did participate it would have already been caught then what we can do is say old challenges. push and then this will be the challenge and then lastly if there was no winner and the user was not a part of it that means that this is an active challenge that the user could potentially join so we're going to say current challenges. push and then challenge like so okay so now that we've done that inside of the for Loop we need to set all of our state so we're going to say Set current challenges and then current challenges we're going to say set my Challenge and this will be my challenge we're going to say set old challenges and we'll set this to old challenge challenges and lastly we'll say set my old challenges so let's fix that and this will be my old challenges okay and then we'll set loading to false and that is the get challenges function Okay so we've now written the get challenges function we have pretty much everything done for this component what we need to do now though is we need to start actually viewing our different challenges now to be able to view these we need to have a list of challenges and we need to display those now to display those I'm going to make another component because there's quite a bit of data we want to display for any given challenge so I'm going to make a new component here inside of source I'm going to call this challenges. JS now this will take a list of challenges and it will display it for us so let's start writing this we're going to say import react use state from react we're going to say import and this will be button use toast heading and select from and this will be the Chara UI react we then are going to import a few other things we need we're going to say import generate commitment so we have that here as well as the send input because we'll need this when we want to accept a challenge or reveal a challenge we then will say import and we're going to import the move key as well as the key from local storage because when we end up revealing our answer we're going to do that from this component so now we're going to have a function which is our component we'll call this challenges and this will take in the following a list of challenges the address of the current user the signer and it will have show accept which is equal to false now show accept is going to tell us if we should show the accepting of the challenge or not so show the button that says accept challenge essentially means this challenge is active but we've not yet uh what do you call it accepted or we're not a part of it now up here we have a few basic things we need we're going to say con toast is equal to use toast again we're going to use this when we end up sending an input so that's why we need that we're going to have const Choice which is a state variable and then set choice is equal to use State and for now we'll set that equal to one and the reason why we have this is because we're going to need to have the user be able to select what choice want if they accept a challenge so this component here is what's going to handle displaying a list of challenges and then also displaying if we should accept a challenge or if we should reveal our answer so we'll write those U functions in a minute but for now we just want to display the challenges so we're going to say return a div and we're going to say the class name is equal to and this can be challenges now we'll style this all later but for now we want to map out the challenges so inside of here we're going to take our challenges and we're going to map them and we're going to say challenge like this and what we're going to do is actually set up a few variables that we're going to use when we kind of return information about our challenge so what we want to do with every single challenge is we want to understand if we're a part of this Challenge and we want to know if we're the opponent of this challenge or if we're the person who created it so what we're going to do is have a variable and we're going to say let data is equal to an object and we're going to say the opponent underscore move is equal to an empty string we're going to say your move is equal to an empty string and then we'll say the opponent is equal to an empty string now I'm just going to fix this so it's not snake case because I thought I was typing in Python there and then what we can do is the following so what we're going to figure out now is okay are we a part of this Challenge and are we the opponent or are we the Creator the reason why I've set up these variables here is because I want to know who I'm playing against so I'm going to say the opponent whoever I'm playing against not necessarily the opponent associated with the challenge but if I was the opponent of the challenge then who we'd put here is the creator of the challenge I'm not sure if that's making sense but if we look at main.py for example every challenge has a Creator and an opponent now if we are the opponent technically our opponent in this challenge is the creator of the challenge I know it's a bit confusing how I set it up if I did like player one player two that might have been a bit easier to understand but that's why I'm going to use this data and you'll see how it works so I'm going to say if the challenge do Creator is equal to the address so that means if the creator of the challenge is us then what we're going to do is say data is equal to the following we're going to say the opponent move is equal to the challenge dot the opponent uncore move we're going to say your move is equal to the challenge. the Creator move because we're the Creator so our move is whatever the Creator's move is is and then we're going to say the opponent is equal to the challenge do opponent now otherwise we're simply going to do the opposite we're going to say data is equal to and we're going to say the opponent move is equal to the challenge.the Creator move we're going to say your move so let's type this correctly is equal to the challenge dot the opponent move and we need to put this with an score because that's how it's returned from our back end and we are going to say that the opponent is equal to the challenge. Creator okay so now we've mapped out who the opponent is and uh who the creator of the challenge is so now that we have that we'll go down here and we'll start returning some information about the challenge so we got to do this inside of our curly brace and inside of the map so we're going to say return div and this is one individual challenge that we're returning so I'm going to say class name is equal to a challenge let's close off our div let me just format this code a little bit so it's bit easier to read let's go inside of the div and return our information so first we're going to set up a heading now inside of the heading we're going to say this is Challenge number and then the challenge dot challengecore ID again if we want the data being returned we can have a look here we have the challenge ID so we're going to put the challenge ID so we know what number this challenge is we're then going to say the following data. opponent and so let's go and here we're going to put a paragraph tag and inside of the paragraph tag we're going to have a strong tag and we're going to say the opponent colon and then data do opponent now the reason why I'm doing this I'm saying okay if there's an opponent of the challenge then we'll display who that opponent is if there's non opponent because it's possible that we don't have one and it's just the Creator so this challenge maybe just was made we don't want to display that now we're going to do the same thing here we're going to say challenge Dot and this will be winner and we're going to do pretty much the same thing so we're going to have a P tag a strong tag we're going to say winner and then this will be colon and then we will say the challenge. winner however if we are the winner we don't want to just display our address because we might not know our address off hand what we want to do instead is we want to display you right we want to say you were the winner we don't want to just display the address of this user or the address of the opponent we want to say the opponent was the winner or you were the winner so we we know if we won or lost so what we're going to do is write a function here and this function is going to pretty much tell us if we are the address or not so we're going to say cont is address user okay and we're going to take in some address and we're going to say if the addr is equal to the address then we're going to return a strong tag and the style of this tag is going to be color green and we're going to say you now otherwise we'll copy this we'll put this here and we'll just return red and this will say opponent okay so let's save and format so what I'm doing is I'm having this function that takes in an address and it tells me if the address is equal to myself so if it is I just return this code that says youu in green otherwise I say opponent in Red so now what I can do is rather than displaying the challenge. winner I can wrap this in is address user and it will either say you or it will say opponent so that's what I'm going to display here now after we have the winner we want to show the different moves and we also want to show the buttons to either reveal or to accept the challenge so we're going to say data do opponent move does not equal undefined and so let's have and end here we're going to display a paragraph tag again we're going to have strong we're going to say opponent move colon and then we want to display what their move is so we're going to say data. opponent move okay now we're going to do the same thing here for our move so we're going to say data. your move and then we're going to say your move and we're going to fix this to say your move now similarly to the function we have here I'm going to write a function that will take the move and convert this move into uh the string representation so if we go to main. Pi when we return the the move the move is going to be an integer and this integer is 0o through uh three right so zero is none one is Rock two is paper three is scissors so what I want to do is take that number and I want to convert that into what the actual move is so I'm going to make a function I'm going to say const and this is going to say move to string and we're going to take in the move and we're going to return the string representation so we're going to return an object inside the object we're going to have zero and this is going to map to Hidden now if the move is zero that either means the player has not made the move yet or the move is currently hidden so we're going to say zero is hidden we're going to say one is Rock we're going to say two is paper and three is scissors we're then going to index at move and simply return that so again just kind of doing a very simple mapping here for the move to string and now we're going to wrap this so move to string for data. opponent we can copy this function paste it here and wrap this so now again it will display whether it's hidden or if it's rock paper or scissors okay I know we did a lot of stuff here for now I think this will actually display our different challenges so what we need to make sure we do now is export this so we're going to say export default Challenge and actually do we call this challenge or challenges we call it challenges so let's do challenges and later in here we're going to write the different buttons associated with the challenge so again like accepting the challenge revealing the move Etc so let's go to list challenges and what we want to do now is use that component we just wrote so first of all let's export this one as well let's say export default list challenges and now we're going to import the component we just made so we're going to say import and this will be challenges from do challenges and we're going to start to displaying them under the correct heading so first of all we'll go here to where it says active challenges and we'll check if we have a challenge so if we're currently in a challenge so my challenge right if we have an active challenge that's the one that we want to display so we're going to say my challenge we're going to say challenges and then what we need to pass is all of our properties so we're going to say challenges is equal to we're going to pass a list that contains my challenge we're then going to say the address is equal to the address and the signer is equal to the signer okay now we're going to say otherwise so if we don't have our current challenge so if we're not in a challenge we're going to display any of the other challenges that are active that we could accept so we're going to say challenges same thing we'll copy these so paste those in and this time for challenges this will be equal to the current challenges these are ones that we could accept and we're going to pass another prop that says show accept equal to True let's format that so you're able to read it and here we go so we're saying okay if we have a challenge that we're currently a part of display that otherwise display any of the challenges that are currently active that we could join great so that handles that now we'll go handle old challenges and my history so we're going to do this we're going to say old challenges length is greater than zero if that's the case then we want to display the following so we're just going to do an empty component here and inside we're going to put a heading let's format that and then below this we're going to put challenges we'll just copy this okay we're going to get rid of show accept and for the challenges we want to display it's not going to be current challenges it's going to be old challenges let's format that let's copy this exact same thing let's replace my history here with the heading okay and then for challenges rather than old challenges we're going to say my old challenges because that will be our history okay quick recap again showing the active challenges ones that we're a part of or that we could accept otherwise we're showing a history of all of the old challenges and then all of the old challenges that we are a part of now we just need to change this to say my old challenges so this matches with what we're displaying okay so that should now allow us to list all of the challenges and we can't interact with them yet but we can list them now what we're going to do is go to app.js and we're just going to write the component that will list the challenges so to do that we can just put a div here so list challenges like that and we have to pass our signer equal to the signer okay now I'm just going to wrap the create Challenge in a div as well we'll do some styling in a minute but for now that should be okay and obviously I imported list challenges here just happened automatically when I started typing it but you could see I have that imported here from my component okay so now what we want to do is to rerun our react application not sure if this is currently running but we will restart it that'll take a second once it's running I be back and we'll make sure that this is working all right so I just load up the page and I can see that I'm getting an error already here for uh one of the components we have so let's just make a very quick fix we're going to go over to list challenges and where we have have this loading here so for the button props we just need to change this to say is loading so I just made a mistake there we're just going to set that to is loaded okay go back here and we should see now if we refresh that this fixes itself and for some reason this is loading when it really should have stopped loading which tells me we're probably getting an error or we're not sending the request successfully so let's have a look at our back end here and let's see if the back end is receiving a request okay it's not receiving a request so let me just rerun this because it's possible uh that I made a mistake here and there you go we see now that if we refresh this okay we're getting an error let me have a look here and I will be right back all right so I was just doing a bit of debugging and I realized that the error we have here is that in our hex to string method we're doing two utf8 bytes when I want two utf8 string so we were actually converting a heximal value to a heximal array which was causing an issue for us so if we go here now and refresh we should see that I was just doing some logging and we're getting challenges with an empty list and now this update challenges is working so if we go back to list challenges I was just printing out this value before what was happening is this hexa string was giving us the wrong value so when we tried to parse it with Json we were getting an error now though it is working so if we go back here we can have a look at our back end and we'll see that it's generating reports every time time we press this button so we're sending a request and pretty instantly generating the report now what we'll do is we'll make a new challenge and we'll actually see if we get the updated challenge here so I might need to change accounts but we can try this confirm we'll see if this goes to our back end and then we can update our challenges all right so our input has been added we're going to update challenges here uh and we got an issue here it says challenge object has no attribute commitment did you mean commitments okay so we probably just made an error here challenge. commitment. getet in line 150 so let's go fix that in our main.py okay main.py and I have commitment when that needs to be commitments silly error but hopefully now if we rerun our backend let's go here and rerun it and we go back to our front end we can now refresh and we can send another request so let's go create Challenge and let's go ahead and make one here okay we should see that pop up in the back end let's give this one second okay any minute now we'll see that it will make a new challenge for us okay so adding notice challenge with ID was created and now let's go to update challenges and again we got an issue with say challenge object has no attribute winner okay we probably called it winner address again we can go and fix that so we're trying to access a winner if we go to look at our challenge so let's go to challenges. py we have winner address okay so what do we call it here winner address winner address okay so let's go back and change this to winner address of course and we're going to have to test it again okay so rerun and let's refresh and let's make another challenge okay go ahead and run same thing wait for our backend to pick this up and then maybe maybe third times the charm will be able to actually receive this new challenge okay notice created let's click the button and challenge is popping up now for some reason it's not really displaying any data for us as challenge ID the Creator is here the opponent is null winner is null opponent committed false opponent move and Creator move it's not showing us the data that we want to see let's go have a look at our console and see if we're getting any error and it says we should have the unique key prop okay we can fix that uh but it should still be showing some stuff for us so let's go and debug this and figure out what the issue is all right so silly mistake here but I have my challenge equal to user participated when it should really be equal to challenge okay so if we go back now it should just pop up and it says Challenge number zero your move is hidden okay so that's what we were looking for now we could display some text that says we're waiting for an opponent or something but for now that is what we were looking for again we're going to do the styling after but this is working it's now displaying this challenge now we want a way to be able to accept these challenges so that's what we'll work on next and once we accept them we'll be able to actually display some more information about the challenge okay so let's go ahead and do that we're going to go into challenges and we're going to start popping up the button that allows us to actually accept the challenge so how we going to do that well first of all we need to know if we should be displaying it or not so we're going to go inside of this div and we're going to write a condition where we say okay well if we passed show accept that means this is a challenge that's active that we can accept so we'll say show accept and then we're going to put an empty jsx component and inside of here we're going to put a select field that will allow the user to actually select what option it is that they want when they kind of accept the challenge and we'll challenge this person so we're going to say Focus border color is equal to Yellow we're going to say the size is medium we're going to say the value is equal to choice and we're going to say onchange this is equal to a function this function takes in the event okay so we'll say set Choice and then event. target. value just like we had in the other input component okay so this is our select field inside of the select field we need our options so we'll say option if we could type this correctly we're going to say value is equal to one option one is Rock then we will copy this and have value two and value three and this will be paper and this will be scissors like so okay those are our three options we then need the button for the button we'll have the onclick the on click will be equal to a function that we'll write in 1 second and we'll have the color scheme equal to green and then we will say accept challenge okay so now we need a function that we're going to call when we press this button however we can test that the button is appearing correctly by going here refreshing and changing our account to someone who did not create this so we're going to go to account six and connect this guy and then refresh and now you can see it says the opponent is this the opponent moves is hidden and it's showing us that we can accept the challenge again we'll fix the styling later on don't worry about that now we will fix this key prop so let's go ahead and do that we're going to go here to our div we're just going to say key is is equal to challenge. challenge ID just so that uh we don't get that error from react okay so now we need the function that we're going to call when we click the button so let's go ahead and make that function we're going to say const accept challenge is equal to a function this will be an async function and this function will take in the challenge ID that we want to accept and in fact we can just call this ID now what we need to do to accept to challenge is we need to generate our commitment string and we then need to send that to the back end so we're going to say con commitment is equal to await generate commitment we're going to generate the commitment with whatever our choices and with our CER we're then going to say wait send input and for our input we're going to say Json do stringify and we're going to write what it is that we need to pass so we're going to say the method is acceptor challenge because that's what we want to do we're going to say the commitment is equal to the commitment and the challenge ID is the ID then now that we have that let's format and we're also going to pass our signer because we need that to send the transaction and toast for the popups okay so that's all we need for accepting the challenge that will simply accept it for us let's go here and for our onclick we will just call the function which is accept Challenge and we'll pass the challenge. challenge ID so we know which one it is that we're accepting so now this should actually allow us to become the opponent of that challenge we'll see though because always there are errors let's refresh okay we should be able to accept the challenge so let's pop open our back end okay doesn't look like there's any errors so that's good and we're going to go accept challenge okay pops up met ask go ahead and click on confirm and we'll wait for that notice to appear on the back end and then we can refresh our challenges and we can see if we accept it okay so we got a uh notice here that says received Advanced request data method accept challenge says adding notice challenge with ID zero was accepted by this address okay that's a good sign let's update the challenges and there we go we now have the opponent the opponent move and our move so that's great now if we go back to our different account so let's switch this up and go to account 7even and refresh we see now that the opponent is the other person and both the moves are appearing so now we need to be able to reveal our answer all right so now we need to write some logic that tells us whether or not we should show the button that says reveal your answer because once we've accepted the challenge now both players have made their commitments and now we need to reveal and once both players reveal then we know who won so we're going to write some logic in a function called show reveal okay now this is going to take in the challenge and it's simply going to make sure that both players have already made their commitments and if they have it will show the reveal button so what we're going to do here is say if challenge. opponent and the challenge. opponent unor move does not equal zero then return false now let me explain this because this function is actually a bit complicated what we need to do in here is we need to only show the reveal button if both players have made a move but if we have not yet revealed our move so that's why you're going to see a little bit of logic here that might not make sense at first it's because we need to check two things first of all we need to make sure that both players have made a commitment we then need to make sure that ourselves have not already revealed because we don't want to display the button if we already revealed because that's going to be confusing right we only want to show the button if we need to still reveal so the first check is all right if this is equal to address which is what I meant to add here so if the opponent is equal to us and the opponent move is not equal to zero now if the opponent move is not equal to zero what that means is that either we haven't made a move so we haven't committed or we have already revealed our move because if the move is 1 two or three that means we've revealed what it is because it's now displayed on the blockchain so that's what we're checking here now we do the exact same thing so if challenge. Creator is equal to address and the challenge. Creator move does not equal zero then return false so same thing here but now we're just checking if we the Creator because we could be the opponent or we could be the Creator we don't know then once we've handled those cases we're going to return the following we're going to say return challenge. opponent move does not equal undefined and the challenge. Creator move does not equal undefined and the challenge does not have a winner so as a quick fix we can actually make these the double equal to sign that should work we might have to fix this but I think this is fine for right now and what we're checking in this condition is okay has the opponent made a move so if they have made a move and we have made a move and there's not a winner if there's a winner that means the challenge is over then we can go ahead and display the reveal button now when we check is not equal to undefined well we're saying okay have you submitted a commitment or alternatively have you already revealed your move if both the opponent and the Creator have done that and we don't have a winner we can go ahead and display the reveal button so now we need to use that function so we're going to go and write some logic here inside of this so after your move we're going to have show reveal we're going to pass in the challenge and we're going to say question mark and we're going to put a button here this button will say reveal move we will say that the color scheme of this button so color scheme is equal to Kine and then we'll say on click and we're going to call a reveal function which we'll write in a second and then otherwise we're just going to put some text so we'll put a P tag here and we'll say waiting dot dot dot okay because we're waiting on something to occur before we show this button so if we go here it shows the the reveal button which is what we want because at this point the challenge has been created and both players have accepted it now let's just make sure it works from the other side so if we switch over to account six and then refresh you can see it is working here as well okay so now we need to write the actual Logic for revealing the move now we've been through this a few times but I will explain it again so let's write a function this will actually be the last bit of code we need to write we're going to say reveal move okay now this is going to be an sync function and the first thing we need to do to reveal move is we need to get what the move is which is stored in local storage and we need to get our secret key because we need to submit those to the blockchain so we're going to say Conn is equal to local storage. get item and then this is going to be the nons key plus the address Dot and I don't think we need to convert it to lowercase because I think we already did when we passed the address so I think it's actually fine if we just say plus address that's fine so that should get us our nonski we going to say cons move is equal to local storage. getet item and this is going to be the move key put that inside of brackets plus address okay we then are going to say await send input and this is going to be json. stringify and we're going to say our method is that we'd like to reveal the move and then to reveal the move we need to submit both the move and the Nots okay so move and Nots and then we need to pass here is the signer and the toast let me just format that and I think we are good to go okay so that should actually be it for revealing the move uh I did not pass the toast so let me fix that and I think we are good to just call this function so let's now go here to the on click and just call reveal move and let's go back and let's test this out so fingers crossed we are good to go we're just going to refresh for a good measures and we're going to reveal now it's going to pop up metamask here okay let's go ahead and confirm now we'll check our back end here and we'll see if we get any notices and if it tells us if we revealed successfully okay so it says adding notice this address revealed their move of rock okay very good now if we refresh you can see it's displaying our move is rock and we are currently waiting on the opponent now at this point again the opponent cannot cheat because of how we've set this up so if we go to account seven and and we refresh here it says the opponent move is rock your move is hidden you can reveal so let's go ahead and reveal and confirm okay we're going to give this a second and we need to have the Notice come in here so let's wait for the notice okay receiving notice challenge ended in a draw so let's update the challenges and it says Rock okay now it says waiting we actually wanted this to go into the old challenges so if I refresh this here yeah it's not going into Old challenges yet I guess that's actually actually because there is no winner so we're going to have to change a bit of logic to display this correctly because when there's no winner yeah it's not handling so we had a draw and it wasn't handling the draw so let's go and just fix that logic this will be pretty quick all right so I just wrote some new logic and this changes a few things because of how we handle a draw anyways what I was having an issue with is that again if both players didn't win we don't have a winner marked in the field so we don't know if the challenge is done or not so the way we have to determine if the challenge is done based on how I've coded this is we have to check okay is there a winner or have both the opponent and the Creator revealed their move so that's kind of what we're checking here challenge. opponent move and challenge. Creator move does not equal undefined notice I have this with one does not equal now what that means is that if this is zero so if their move is hidden then that will uh not count for this condition okay so if their move are hidden then it won't go into the history so what I've done is said const is the challenge done equal to this I've then replaced where I had challenge. winner with challenge done so I've said if the challenge is done and the user participated then it's their history otherwise if the user participated okay and then same thing here if the challenge is done push it into Old challenges now the only thing we haven't uh kind of handled is displaying draw or not draw and also that kind of waiting that you saw so if we go back here and we refresh it says my history zero this is the opponent this is the opponent move and our move and then it says waiting we don't want to display waiting if the challenge is done so what we should display instead is like winner is equal to draw or something or like the challenge ended in a draw so we can write some Logic for that as well if we go to challenges okay so we have show reveal challenge reveal move waiting now again we only want to display waiting if the challenge is not done so we can do a similar thing to what we did before and we can write a variable here it says const challenge done okay and actually we can do this down here and we can utilize our data variable so we can say con challenge done is equal to data.you move does not equal undefined and the data do opponent move does not equal undefined if that's the case the challenge is complete delete so we'll go here to where it says waiting and we'll simply put a condition here so we'll say if that's the case then we'll check the following condition the condition is going to be challenge done and so we'll say not challenge done and then waiting like that and then we can do something where we say challenge done and not challenge. winner and we display some text ended in a draw let's format here and that should actually wrap up our logic so again we added a variable that tells us if the challenge is complete exact same thing we did before here we're now saying okay only display waiting if the challenge is not done if the challenge is done and there wasn't a winner it's a draw so we'll say end it in a draw so now it should say end it in a draw and it does that is working now to test this let's do the same thing but let's actually make a challenge that someone wins so we have Rock here so let's make a new one okay can confirm we can open up our backend to verify that this is working we want to see a new challenge created here give this a second to appear okay challenge was created let's now go to our different accounts let's go account six refresh the page okay and we've got two things here reveal move and accept challenge so for reveal move we're going to need to fix that obviously because we don't want to display reveal move yet I think the way we can fix that is if we go go to list challenges and we go to show reveal so wherever I have that so that's inside of challenges sorry scroll scroll scroll let's get rid of the double equal sign which I actually don't think I need and if we fix that now okay perfect gets rid of that so it says opponent hidden waiting okay we had Rock before let's do paper and let's accept the challenge okay let's go ahead and click confirm all right right we can give this a second on our back end okay let's refresh and now we have ended a draw which we did not want to display okay so obviously a few things going wrong here guys sorry handling the draw was not something I thought of before so I'm kind of coding this on the Fly let me do a few fixes just to make sure that I'm not misleading you with all these changes and I'll be right back so a few slight changes here that have now fixed things first of all from list challenges I simply removed the does not equal undefined from challenge done so now challenge done is equal to challenge. winner or challenge. opponent move and challenge. Creator move so as long as those are a truthy value so not zero or not undefined then the challenge is finished which is originally what I wanted to have but uh I kind of coded incorrectly so that's my bad then then from challenge. JS I just got rid of the um showing the draw and showing the waiting just to simplify things so all I did was just remove the code that was showing if there was a draw or showing if there was any waiting just to make sure I didn't kind of over complicate stuff so for now you can see active challenges is correct it's showing our active Challenge and then we have our challenge history so let's now go ahead and try to reveal our move and let's see if this works now when we actually have a winner okay so this guy reveal this move let's go over to our back end and it should show us popping up in a second okay uh removed paper or revealed move of paper okay so now we have our move paper and the button goes away and then if we switch over to account seven and we refresh okay opponent move is paper we can reveal our move let's go ahead and do that okay give this a second to run and we are going to update the challenge and there we go we have our history so we have the first move and then we have this challenge it says the winner was the opponent the opponent was was paper our move was Rock so that's exactly what we are looking for that it shows either us or the opponent and just to show you from the other side if we go here to the opponent and we refresh the page it says the winner was us which is exactly what we are looking for okay so that is it and that is going to wrap up this tutorial now I know there was a lot of mess at the very end there I apologize guys but I'm just keeping it real with you this stuff does happen this is the life of a developer and actually reminds me we need to style this so let's style this and then we can wrap it up uh but this is kind of the core logic which we just finished so let's do some basic styling to do the styling we have a few classes uh we have the challenge class right so we're going to want to space those out a little bit in create challenge we have the challenge form if we go to list challenge we have the center class so let's just go into index.js and we can do a fair bit of our styling inside of there so first we'll say do challenge now what we'll do is we'll say this is a flexbox so display Flex say the flex direction is a column we'll say align items Flex start we'll say padding is 10 pixels we'll say the flex is one and the width is 33% so let's fix that and then we will align items actually in the center so I don't know why I had Flex start we're going to put them in the center okay then we're going to have Dot challenges we'll make sure we added that class after but this is going to be width 100% we then going to have the display Flex we're going to have the flex Direction equal to row we're going to have align items in the center we're going to have justify content in the center and we're going to have margin top equal to 10 pixels okay lastly we're going to have Center we're going to say align item Center display flex and then the flex direction of column and then last few things here dot challenge form we'll just add some padding here of 20 pixels and we'll just text align Center and then we will have a button and for all our buttons we'll just add some margin to the top of 10 pixels now now don't worry about copying all of this out I will have it available from the link in the description so you can just grab it there uh but this is kind of the main styling that we need now let's see what that actually did to the page notice now that all of our challenges are going to be aligned in a 3X3 grid the way I did that was by adding the width of 33% for all of our challenges and kind of aligning them in the center we then have the create challenge form with a bit of padding we have some padding between our headers some padding with our buttons looks quite a bit better okay so now that is going to wrap it up that will be the end of this video in the next videos we'll handle deployment talking more about architecture Etc hope you guys have enjoyed this so far again the code is available from the link in the description and I will see you in the next video