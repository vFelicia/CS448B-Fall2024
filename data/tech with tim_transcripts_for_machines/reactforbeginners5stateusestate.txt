hello everybody and welcome to another react tutorial for beginners in this video i'm going to be covering something known as state now state is the data that your application is holding and kind of keeping track of and so in our case here we're going to be implementing state in our different components and while the page our react application has not been refreshed the state will stay the same it will be persistent across our application however as soon as we refresh the react application the state will disappear and we'll talk all about state in this video but just understand that state here is kind of temporary it's stored only in our front end it is not stored in the back end if we were talking about truly persistent data we would want to be storing this data in a database so it's actually stored in some file right on you know file system and can be accessed from anywhere and at any point in time here this is temporary it's only going to stay persistent and you know be the same across our application while our application has not been refreshed and one small note here as well the state that is uh for one client so one person visiting the website will not be the same for everybody so if i have some state on my website and then you go and you visit the website from your computer you're not going to have the same state as me this is kind of local like it's to the client if that makes sense it's not a global state all right hopefully that's clear anyways let me show you how we can implement state and really what that is now the first thing i'm going to do here is i'm actually just going to erase a bunch of stuff because we're going to rewrite a ton so i'm going to remove add item so i need to remove all of the references to it and this info component will keep for now just because it's a classbased component and we'll look at how to implement state in a classbased component later anyways let's go to app.js and let me actually make a new component here and this will be a functional component that's going to have some state so i'm going to say function and let's just make this button state kind of a weird name but again this is just going to be an example that we'll kind of throw away and delete after this is just to understand how state works and then what i'm going to do is return in here and i'm actually going to create two buttons and two text fields so i'm going to say p and in here let's just say i don't know title colon and then we'll put some title there we'll have another p tag and we will say i don't know counter and oops if i can type this counter and then end the tag and then here we will have some state as well now all this needs to be wrapped inside of a div always forget about that so let's take this div tag and put it down here and now let's create two buttons so i'm going to make an input or actually a button like that and then we'll say slash buttons and we'll just say update title okay and then we'll make another button and what this one will say is update counter all right so there we go we have now created our button state component let's just render this on the screen so let's go slash button state and let's see what this looks like refresh and notice we have our title we have our counter we have update title and update counter and when we click these it does nothing so the idea here is that i want to have some state this state is going to uh kind of pertain to this title and this counter and when i press these buttons i want to update the state i want to change it so how do we implement state well these things in react called hooks and what a hook is is kind of a function that's provided by react that you can use to well hook into and kind of modify its behavior so you see what i mean in a second but what we're going to have to do here is import something that allows us to use state it's actually called use state and is imported from react not react dom just from react so whenever you want to set up state in a functional component what you do is you create a constant so you need to use const and then you do these square brackets like this and you define two values first you define the actual variable that's going to store your state and then you define the name of the function that you're going to use to update this state or update this variable so in this case i want a title so i'm going to say title and then i'm going to say set title like that and this is going to be equal to use state now inside of use state you define the default state so in this case i'm just going to make it an empty string so when we start our application title is going to be equal to an empty string and if i want to modify title i use this set title function and you'll see how that works in one minute next i'm going to define my next piece of state which is the counter so i'm just going to say count like that and then i'm going to say set count and make this equal to use state now it's worth noting you can name these whatever you want you don't have to make this set count i could make this whatever but it's kind of good practice you just have set followed by the name of the state variable that you're actually going to be updating all right so now that we have our title and our account we can use these just like regular variables in javascript so i can implement them here into my kind of render field and i'll put title like that and then for the counter i will put my cat now for the counter actually i need to make the default state 0 that's because this is going to be an integer and then we will update this integer so let me refresh the page here and notice the counter is equal to zero and the title is equal to an empty string we see nothing so now what i want to do is make it so that when we press these buttons we update our state and whenever you update the state of a component it tells that component to rerender itself on the screen so only that component and any of the children components it's rendering but not the entire application so hopefully that kind of makes sense but the idea here is that inside of button state as soon as either of these states are modified this entire component will rerender itself so this return statement will kind of rerun again that doesn't mean that the app component is going to rerender everything that's here it just means that this individual component is going to rerender everything that it's returning and so if you have any children components inside of here all of those will be rerendered now this is where you can kind of get into performance and efficiency of react components and how you're storing and handling this state because if all of your state is being stored in say an upper level component like app then that means whenever that state is changed it's going to rerender the entire application which is obviously going to take longer than just rerendering one component at a time so there's advantages and disadvantages we'll talk about those in much later videos but for now just understand when state is updated the component will automatically rerender itself so that it can show the updated state okay so what i'm going to do now is i'm going to make an on click kind of handler for both of these buttons so what you need to do whenever you want to call a javascript function when a button is clicked you need to use on click i forget if we've seen this before if i showed it to you so i'm just going to reexplain it what you need to do is pass a function that you want to be called when this button is clicked so in this case the function that i want to be called is set title and set count but i need to call these functions with arguments those arguments are going to be what i want to set the title to or set the count to and so i'm just going to create two functions here i'm going to say const and this will say i don't know update title clicked like that and this will be equal to an arrow function like that i think that's good okay i'm gonna copy this i'm gonna make another function and this will be update and then counter clicked all right so now for the on click i'm just going to make it equal to these two functions so i'm going to say update title clicked and i'm going to say update counter click now notice i didn't add the parentheses here this is because i'm just giving the name of the function and then this button will call the function that i gave it whenever we click it and anyways inside of here what i'm going to do now is set the title and set the cap so i'm going to say set title like that and then i need to pass what i want to set the title to so in this case we'll just hard code something in and we'll say we now have a title exclamation point and then for the counter i'm going to say set counter and then we will set this equal to whatever the count previously was plus 1. all right so let's save this now and set counter is not defined uh sorry this is going to be set count not set counter and hopefully that will work now okay so now ideally what should happen when we press these buttons is we're going to update the title state that will cause the component to rerender and so we should see the updated title so let's press that and notice it says we now have a title and every time i press this it's going to keep rerendering the component because we're updating the state but in this case here since the state is the same we don't see anything different right now when i go to update counter let's press it we can see the counter goes to one and then to two and then to three and then to four and five and six and so on and so forth and there you go that is pretty much how you can deal with state it's pretty simple you just define the state variable you then define the function that you're going to use to update that state whenever you want to update the state you simply call the function with the updated value and there you go whenever you do this whenever you call one of these functions it will force react to rerender the component so anything inside of here will be rerendered so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo xbox is the best platform to use when preparing for your software engineering coding interviews there's also a product on algo expert called systems expert that you can use to prepare for your system's design interviews get started on algal experience today by clicking the link in the description and using the code tech with tim for a discount on the platform now what i want to show you though is what happens when we want to pass this state down to components uh that are different components so for example say we have some data components and maybe that data component or components whatever they are are actually going to show the title and show the count and from here we want these buttons to update the title and update the count and then we want those components to show that updated count so what i'm going to do is make a new function here and we're just going to call this data and this is going to take in some props because remember if we want to pass information down to components from one of the upper level components we can pass that through the props and here all i'm going to do is i'm just going to return we'll do our parentheses here a div and we're going to expect that we get two props here so the first prop that i want is going to be the title and the second prop that i want is going to be the count so i'm going to say that the title is equal to and then this will be props dot title and then we'll do another p tag and we'll say the count is going to be equal to props dot count all right so there we go we have a super simple component and now what we're going to do is just replace this here with that data component so i'm going to say data and then we're going to pass in here a title and account so i'm going to say title equals and then i'm going to say title right that's my state variable and then i'm going to say that the count is equal to count again that's my state variable and there you go let's refresh the page here and notice that the count resets and the title resets okay so if i press update title now you can see this still works if i press update count you can see that this still works again and the reason that this works is because title and count are both state right they're then passed in the props to this component and what happens is whenever you have the state updating it's rerendering this entire thing and so the props here are going to change based on what the state is and that means we're going to show that in the component it's going to have those updated values so hopefully that kind of makes sense but i just wanted to show you the process of taking state from a component like this and passing it to a component kind of below it in the hierarchy that will then display and now is a good point to actually look at the react developer tools so if we go to inspect and we go to components here you can see that we have kind of the tree hierarchy of the different components that are being rendered so we have our app component our info component we have our button state component and then our data component and if we look here we can see the props are count for title we now have a title rendered by button state and app and if we go to button state we can see we don't have any props but we have a hook we have the state we now have a title and the state four and there you go that's kind of a way that you can look at what's actually being passed around to the different components okay so that is kind of the basics of state hard to get in into any advanced examples right now because well we just need to learn about this stuff before we can really start creating our application what i'm going to do now is show you how we can influence state in our info component and actually what i'll do here is i will just render the button state component and inside of the button state component i will change this to render info so let's actually i'm thinking here if this makes sense to do or not uh you know what no what we're going to do instead is we'll we'll keep info up here and we'll just add a button or something to info and it can handle its own state okay so the use state inside of a class based component is a little bit more complicated than a functional component but obviously we need to learn how to do that so let's do that what i'm going to do in inside of info here is i'm going to start by defining what i want to be held in my state and the way you do this is you say this dot state and then you make this equal to a javascript object and inside of here you define your keys kind of your state values and what their default values are going to be so in this case for our info component let's just do the same thing let's just have a counter it's kind of the easiest example to go through so we'll say count and by default this is equal to 0. so that's the only thing that we're going to be storing in our state and the reason we know that is because we've defined that in the constructor so you start by defining whatever is going to be stored in your state in the constructor like this if i wanted another value maybe like a title then i would define title and then whatever its default value or starting value is going to be so let me remove title because i don't want that okay so now what i'm going to do is actually just remove all the stuff that this is rendering and instead we'll just quite simply show a p tag that's going to have the count so we'll say p we'll say count colon and then this will be equal to this dot state dot and then count and so that's how you access the state you go this dot state and then whatever it is from the state that you want to show in this case we want to show the count now let's remove the props here we don't need these default props anymore and now let's see how we can actually update this state well to update this state we're going to need some type of button or some event that we can use to trigger this so i'm going to say button and then slash button i'm going to say click me exclamation point and then we need to wrap all of this in a div and we need to return it i forgot about that okay so let's say return div let's put all of this here inside of the div and let's remove that semicolon and now you can see that we have a count and a click me but obviously when i press click me nothing has happened so now what i'm going to do let's get rid of these why is there an empty string showing up here i don't want that so now what i'm going to do is do an on click here so i'm going to say on click is equal to and then we're going to define a function here we're just going to say you know button press so button pressed like that and then we will put button pressed all right so now we will call this function notice i had to do with this dot button pressed and the reason for that is because we're inside of a class based component so we have to reference the function with this now actually i'm realizing i do have to explain something to you about how we kind of call functions from a class based component we'll do that one second but for now let's update the state so to update the state inside of a class based component you say this dot set state like that and then inside of here you pass a javascript object with any of the values that you want to update in the state now you do not need to pass every value that's in the state to be able to update them for example what i'm going to do here is say count is equal to this dot state dot count plus one and then this will update the state now if there was another value in the state here so if i had like title colon empty string or i had it equal to a hello or whatever just because i'm only passing count here doesn't mean that this is going to be uh kind of removed or or not updated or whatever what happens here is any of the fields that you pass in here are kind of merged with the existing state and so if you just pass count it will just update count any of the other state values will stay the same so don't worry about that there's no need to throw in like a title colon title or something um you don't need to do that like react is smart enough to realize that if you're only passing one value you're only updating one value and so there's no need to pass anything more than what you want to update anyways hopefully that kind of makes sense but let's just see what happens here i'm going to refresh this and when i press click me cannot read property set state of undefined this is interesting sorry this is probably this dot state dot set state is that the way you do it let's see if that's correct can i read property state of undefined okay so you can see we're getting this error here and this is what i was talking about like a minute ago and i said i'm gonna have to explain something to you about creating these these kind of functions in the classbased component what happens by default when i define this function here inside of the class is it does not have access to this keyword so to give it access to this keyword we need to actually bind it into this class because right now this is just a function that's defined inside of this class doesn't mean it's actually a part of this kind of class instance and so it can't access this now there's two ways to fix this the first way is to define an arrow function inside of here like this so if you simply put the two parentheses then an arrow and then you actually manually call this stop button pressed this will fix the problem for you notice if i refresh and i press this the counter is working totally fine but if you don't want to do this you don't want to do this arrow function then what you can do instead is you can go up to your constructor and you can say this dot button pressed is equal to uh yeah this dot button pressed dot bind and then you can pass the this keyword now let's see if this works now when i press click me you can see that this works fine essentially what we're doing is we're binding the button press to this class and so now it has access to this keyword whereas previously it didn't now i recommend you use the other way so let me just comment this out where you just do the arrow function and the reason why the arrow function works is because since this is a function defined inside of the render method which is already attached to this class it has access to this keyword and so then when you call this thought button pressed it gets access to this keyword as well that's probably a poor explanation you don't need to worry about it too much just realize that this will then give you access to the this keyword anyways now when i do this and i press this if i refresh here uh hmm what's going on here this double button press sorry i need to make sure i actually call that function okay it's refresh you can see that the counter is working totally fine and notice that the counter here is independent of the counter here right and when i press this it's not updating any of this stuff because the state is only changing inside of this component whereas when i press these buttons it's updating in here and it's not updating up here hopefully that makes sense but that's pretty much what i need to show you relating to state kind of the key takeaways here is that state is how we store you know persistent information on the web page as long as you don't refresh obviously when you do that it goes away and a state is kind of local to a component but whenever you update a state it will cause that component to rerender and that means that any of the stuff that it's rendering will also be rerendered to pass state down to children components like this data component here you simply pass it through the props and if you want to update the state of a parent component from a child component you need to pass something known as a callback i'll discuss that in a minute the reason for that is that if we're looking at this kind of data tag if i try to modify the title inside of here we get a problem the reason we get a problem is because our properties are read only values so just remember that that's why i emphasized that a lot in the last video when you are passing props through even if they are state of kind of a upper level component you cannot directly modify them in the child component and so to be able to change them from the child component you actually need to call a function that is contained in the parent component that can then update the state this is known as a callback i'll discuss that in the next video when we get into forums and actually working on some components that we're not going to delete afterwards so hopefully that was a decent summary of state hopefully this kind of makes sense again this is how you do it in a functional way this is the way you do it in the classbased way and in the next video we'll be talking about forms and events and some kind of real examples hopefully you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next react tutorial you