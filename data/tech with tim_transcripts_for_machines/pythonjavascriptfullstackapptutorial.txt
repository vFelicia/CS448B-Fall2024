in this video I'll be showing you how to build a full stack application using both Python and JavaScript the idea here is to demonstrate how we design a larger piece of software that has both a front end and a back end now for the back end we'll use Python and flask and we'll build out an API we'll also connect that with the database and then for the front end we'll use react and JavaScript you don't need to be an expert in either of these Frameworks or languages but you should have some experience with both Python and JavaScript to make this a little bit easier to follow along with the main goal is to teach you how you design this system overall we're not going to make anything super complicated but you're going to see how we separate the responsibilities and the roles and you get a better sense of how these larger systems work and how we do interactions between two different software components this is going to be a really interesting video and this is really what's going to bring you from that beginner or intermediate level up to the point where you have some more comfortability building your own apps and designing different system systems and components so we'll get into the content but I do want to share with you that I am running a giveaway right now that will give you a chance to win an RTX 480 or some DLI credits courtesy of Nvidia now I've partnered with them for this video to promote the GTC this is the global technology conference it happens every year this year is happening from March 17th to 21st in San Jose California now there is actually an inperson event you can pay for tickets to enter that one or there is a completely free virtual component where you can can register for all kinds of great events workshops live sessions Etc and really learn about what's going on in the state of AI just to quickly give you a rundown we've got sessions on generative AI we have stuff for creators we have computer vision related sessions and then three sessions that I'm personally interested in are the following large scale production deployment of rag pipelines so talking about retrieval augmented generation and llms this has been a big interest of mine recently I've posted a bunch of videos on the channel they've also got a session on the future of extended reality and generative Ai and then one I think a lot of you guys will like which is exploring AI assisted developer tools really cool sessions I'll link them down below and if you're wondering how to enter the giveaway all you have to do is attend the GTC the virtual component of it is completely free and then I'll link a Google form in the description all you have to do is put in your email country of residence Etc so we know where to ship the GPU to if you win and then just attach a screenshot of you attending the GTC anyways that's it thanks to Nvidia for running this giveaway good luck to any of you if you do decide to attend the GTC just make sure you fill out this form so you can be entered in the giveaway and with that said let's get into the video okay so I'm on the computer now and I want to give you a quick demo of what it is that we're going to be building now keep in mind that this is a relatively simple application however the type of things that we're going to do here will really show you how you architect out a front end and a back end how they communicate with each other and that's really where the real value is it's not necessarily in the project obviously I could have made this a lot better but the idea is I want to give you a template I want to teach you the base and then allow you to extend this and go build your own applications rather than you guys watching me say style a web page for 3 or 4 hours that's not going to give you the same value then it will be for me to actually show you all of the backend architecting how you design this how you set up the different endpoints how an API works that's what you're going to learn in this video so keep that in mind even though I know the finished project is a little bit boring regardless this is a contact list this uses a persistent database so if I refresh you can see everything is still here we have the ability to update delete create and fetch or to get the different entries so this is kind of a crud create read update delete application you can see here that I could go and maybe change the email to say Tim 2@gmail.com when I do that you'll actually see a corresponding request get sent to my back end which is running in the background if I want to create a new contact I can do that maybe Sarah I don't know let's go Jose I know that doesn't really make sense but we'll do it at gmail.com create new contact and if we want we can delete one of the contacts and as I showed you we can update so that's about it this front end is built in react it's pretty straightforward you can style it after if you want and it allows us to interact with the back end which is ritten in Python with flask so with all that said let me open up a new folder here and let's get started building out this application all right so I'm inside of Visual Studio code and we're going to go ahead and get started here now I've opened up a new folder called tutorial and I want to mention that if at any point in time you're getting stuck all of the code that I write in this video will be available from the link in the description now at this point I'm going to assume that you've installed both Python and node.js and you have worked with react and python before you don't need to be an expert if you're still beginner with those libraries it's fine but you should have seen them before used them a little bit because this isn't going to be a completely from scratch beginner tutorial I'm assuming that you're kind of more at that intermediate level feel free to follow along regardless but just want to mention that so that you don't get super intimidated as I go through now what we're going to do here inside this new folder I've opened in vs code is we're going to make a folder called backend now that we have back end that's where our backend and our python app is going to live and in our terminal we're going to create a new uh react application now as of 2024 the command to do this has changed I'm going to paste in the command because it's a little bit long this is npm create V Vite whatever you want to say at latest and then you're going to give the app a name in this case we're going to call it front end and then two dashes then template react okay so go ahead and hit enter with this command and this should make a new folder for us you can see that we have the front end folder now it gives us some commands to actually run the front end so we can CD into front end and then we can type npm install to install the necessary packages so let's go ahead and do that okay so while that runs let's quickly talk about the order we're going to go in here we're going to start by building the back end now typically when you're building an application like this you want to build the API or the backend first and what this acts as is kind of the structure of the application and really the different operations that you can perform so in our case we're going to be creating a crud backend now this stands for create read update delete so we want to implement these four main operations in our case it's going to be on one instance or one object which is kind of a contact right we're creating a contact we're updating a contact we're deleting a contact or we are fetching or getting the different context now that's really all that we're doing here uh with the back end and what that involves is setting up some different Roots so some things that can be called now these roots or these end points can be called from really any type of application it doesn't have to be a react front end it could be any front end it could be another backend the idea is we create this protocol or this application programming interface that now defines the set of operations that our application has and then we can go Implement a nice front end we can build it in an app we can do really anything we want to call these different methods you'll see what I mean as we go through here but that's kind of the high level overview that you should understand at this point okay so now we're going to change directories and we're going to go into our backend directory so we go into the root directory and then CD into backend and we're going to install a few different python modules that we're going to need for this tutorial now the python modules we're going to need are the following we're going to say pip 3 install and then flask now if you're on Windows it's probably going to be pip rather than pip three so this is going to install flask for us so let's go ahead and hit enter you can see I've already got that installed as well as flask we're going to need flask and then Dash SQL and then Alchemy now this is something known as an OM which is an object relational mapping which allows us to connect to a SQL database and kind of map the entries in SQL into a python object so we can operate on our objects quite a bit easier so we're going to pip install flask SQL Alchemy I already have that installed so I'm not going to install it and then we also going to install flask Das cores notice the capitalization is different here and this is going to allow us to have cross origin requests which we'll talk about when we get to that point so again you want flask flask SQL Alchemy and then flask course okay so install all of those and for your pip command that should be working if not you can also try python hyphen M pip install and always if you're on Mac or Linux it's going to be Python 3 whereas on Windows it's going to be python which makes my job a little bit harder to explain but hopefully you guys know the difference in those commands Okay so now that we have that we're going to go into backend and we're going to create a few files we're going to have main.py we're going to have models. pi and we're going to have config if we can spell this correctly dop okay now config config sorry is going to contain the main configuration of our application I like to separate this out in a separate file so it's nice and easy to see and to find main is going to contain our main roots or the main end points if we had a really large app we might separate this into multiple files but in our case it's pretty straight forward and the models is going to contain all of our database models so pretty much how we interact with the database when we use flask SQL Alchemy what we do is we create a python class which represents kind of an entry or a row in our database kind of like a table and we Define the different columns and data that this object will be storing okay so that's it for these files first thing we're going to do is we're going to go into config and we're going to configure our application remember we're building the API first which happens in flask so we're going to say from flask import flask with a capital f we're going to say say from flask underscore if we could spell this correctly and this is going to be SQL Alchemy import and then SQL Alchemy we're then going to say from flask cores Import in all capitals cores now this stands for cross origin request and what this allows us to do is send a request to this back end from a different URL Now by default uh when you send requests they're going to be kind of protected so that our server can't be hit from a different URL that might be a little bit confusing for you but in our case we have a front end which is a different server than the back end we want the front end to be able to communicate with the back end in order for that to work we're going to have to remove this kind of Coors error which can pop up so that's what this cores uh modules doing if you've never seen the error before it's going to be confusing if you have you'll know exactly what I mean okay so we're going to say app is equal to flask and then we're going to say underscore uncore name underscore uncore okay this initializes the flask application now that we have this we're going to have a few more things of configuration so we're going to wrap our app in course so just going to say cores and then app like this all that does is it's going to essentially disable that error for us so now we'll be able to actually send cross origin requests to our app next thing we need to do is initialize some database things so we're going to say app. config and then inside of set of square brackets we're going to say SQL Alchemy in all capitals uncore database URI is equal to and then this is going to be sqlite and then Colony database. DB what we're doing here is specifying the location of the local sqlite database that we're going to be storing on our machine so all we're doing is we're just storing essentially a file which is going to be a SQL light database this is really easy to work with in flask so we need to specify okay well where do we want to save it or what is the name of it so you always start that with SQL light colon SL slash and actually there's going to be three slashes my bad not two and then the name of your database which is my database. DB you can name this anything that you would like okay next we're going to say app. config and this is going to be SQL Alchemy assuming I spelled that correctly I think I did underscore track underscore modifications and for now we're going to make this equal to false now all this does is mean we're not going to track all of the modifications we make to the database uh you may want to enable that but for our development purposes it's just going to make our life a little bit easier so we're going to disable it last thing we're going to do here is we're going to create an instance of the database we're going to say TB is equal to SQL Alchemy and then we're going to pass our app now what this is going to do is create a database instance which gives us access to the database that we specified here so we can create modify delete Etc and you're going to see how easy it is to do that using this database object from flask SQL Alchemy again what this acts as is an orm object relational mapping meaning we can have a python class that just normal python code and and using normal python code sorry we can modify this SQL database because pretty much any command we perform will be kind of translated for us automatically into SQL and then apply to the database making our life really really easy easy okay so that is config.py next thing we're going to do is we're going to start defining our database models now notice the order that I'm going in here right I start with my configuration then I'm going to go to my database the reason I do this is I want to know the different piece of data that I'm going to be working with so that when I start writing my code I already have that out of the way so I start with my basic configuration okay this happens first that makes sense next we do our database models and now we'll know what kind of field we need how we're going to be adding them how we're deleting them different keys that we might want to check so always kind of start with the data first and then once you know the different data you're going to have you can start creating different views that will allow you to create that data or modify that data which is really what the API is going to be responsible for doing so what we're going to do here is we're going to say from config import DB now this is a uh relative import and this is happening from this config file so we're saying okay we have this config python file it's got this DB um variable we're going to import that because this is the instance which is going to give us access to SQL Alchemy now we're going to create a class and this class is going to be called Contact and it's going toer inherit sorry from db. model so what we're saying is this is going to be a database model represented as a python class and now in Python code we can Define the different fields that this object will have so first we're going to have an ID you always need to have an ID for all of your database instances so we're going to say idid is equal to db. column and inside of here we're going to specify the type of the field which is going to be an integer next we're going to say the primary undor key is equal to true and what this means is that this is the key we're going to use to Index this and it must be unique for every single entry inside of the database we're then going to specify the other things that we want to store for a contact now for a contact we're going to have a first name a last name and an email that's it we could add a lot more later if we want I just want to keep it nice and simple so I'm going to say db. column and then here we're going to say that this is db. string and whenever you specify a string column you have to give it a maximum length so in this case we'll give it a maximum length of 80 we're then going to say unique is equal to false and nullable is equal to false now what that means is that you cannot pass a null value so let me just make this a little bit easier to read here so if you try to make the um first name null you're going to get an error so you have to pass something for first name that's all knowable does now we're going to copy this twice and paste it down here for this one we're going to change it to last name and it's going to stay exactly the same because we just want the same field but for the last name then we're going to have an email so we're going to say email is equal to this and what we'll do is make the email unique so that no two contacts can have the same email and then what we're going to do is just make this a little bit longer and we'll say okay the maximum length for an email we'll make it 120 characters okay so that's about it the next thing we're going to do is Define a function here called 2or Json and this is going to be something that can take all of the different fields that we have on our object here and convert it into a python dictionary which we can then convert into Json which is something we can pass from our API so when we build an API typically the way we communicate is we use something known as Json Json is a JavaScript object notation and it really just looks like a python dictionary so what we'll be doing is we'll be passing Json back and forth so the API will return Json and then we will send Json to the API for creating our different objects so what I want to do is say okay I've got all these different fields that I'm storing in my contact but now I want to make it so that I can convert them all into this Jon object so it's really easy for me to take a contact and give that to the front end or to anyone who's requesting to get our different context so what we're going to do is say return we're going to return a python dictionary and we're going to say ID is equal to self. ID we're going to say first name like this is equal to self. first name we're going to say last name is equal to self. last name and then email is equal to self. email now quick pause here you'll notice that what I did is I pretty much just wrote the same field names except in camel case without any spaces or anything and then Associated it with their value now the reason I'm using camel case here is because when we use Json the convention is to have camel case Fields so camel case is just like the word and then you have a capital letter on the next word whereas snake case which is what we're using here is the convention for python so it gets a little bit confusing but when we're writing python code so a variable like this we do it in snake case when we're working with Json or when we're going to be kind of returning value from our API we want to do this in camel case so that it matches the convention of Json data it's kind of just a style thing it doesn't really matter how you do it but I just wanted to mention uh why we have that all right so that's it for our data so we have our data and we have our configuration and now we're going to go into Main and we're going to start writing different roots that we need now before I start writing anything I like to kind of figure out what are the different endpoints or rootes that I want for my API to access different data resources to create resources Etc now in our case we want a crud app which is create read update delete so we need an operation for creating for reading or getting for updating and for deleting so we can kind of write those out in some comments right we can start by saying okay well we want to create and then we have to specify when we create what do we need well to in order to create a contact we need our first name right we need our last name and we need our email so what that tells me is that when I submit a request and I'll talk about this request and response structure in just a second to the create endpoint I need to pass these different values now let's quickly talk about this because I want to make sure I'm not confusing a lot of you with end points so when we create an API what we typically have is a server that's running the API now the server has some kind of address in our case the address is going to be something like Local Host colon 5000 because we're running this on our local machine now this is the domain or the servers URL if we're talking about other like websites you've gone to something like google.com right that is the domain or the URL now an endpoint is simply anything that comes after this domain so if I have Local Host col 5000 slome the endpoint is home right so we're going to the home endpoint so in our case we're going to have a create endpoint right we'll probably call it something like create contact now what I'm saying is when we hit this endpoint or when we submit a request to the endpoint we're we going to have to submit some data alongside just the endpoints we're saying okay yes we're going to go to this endpoint but we want to create the contact what do we need for that we need the first name last name and we need the email now let's quickly talk about request and response a request is anything that we send to some kind of server in our case an API now what we're doing is we're requesting something to happen and our request has a type now this type can be one of many different things but the typical ones are going to be the following the first type that's very common is a get request now a get request means that we're trying to access some type of resource so it just means we want to get something we want to retrieve something another type of request we have is a post request a post request means we're trying to create something new so in the case where we are using create contacts when we send a request here the type of our request is going to be a post request because we want to create a new contact now we also have a put or a patch request now this is something that you use when you want to update something so I want to maybe update a contact so I'm patching it I'm changing it we then have a delete request and we have a bunch of other requests as well that you can use but these are the four most common ones now as well as the type we also have some other data that we can send and one of this piece of data can be Json data now Json data is exactly what I kind of wrote out before and it's information that can comes alongside our request that's going to be used while we're handling the request to do something so in this case we want to delete a contact well we need to pass the type of contact we want to delete or what contact it is right in the case where we want to create a contact we need to pass the data to create the contact so that is the really Basics on a request we send a request in our case the front end is going to send a request to our back end and the back end is going to return a response now a response will contain a few things it's going to contain a stat stat and the status specifies if the request was successful so a status of 200 means success and you may have seen a status like 44 before and that means not found right so when you see those 404 pages that means hey you went to a URL you tried to receive some HTML to be rendered on your screen but it wasn't found so what did you get you got a status of 404 you know request not found right we were not able to do this because what you requested didn't exist we also have things like 400 which is bad request we have stuff like 403 I believe which is forbidden or unauthorized there's all different types of response statuses or codes that we can use to indicate what happened we also can return some Json so in the case where we maybe want to get a contact then when we have a response we're going to be responding with a Json which is equal to whatever that contact is hopefully this is making a little bit of sense but the idea is we have these different endpoints right they're just code written in Python they can handle a request which will come from some external Source in our case the front end or a website and then our API is going to return a response which contains how that request was handled it's going to say yes this was successful here's the result you're looking for or no there was some kind of error so that's what we're building here we're building this API and this structure so let's get started doing that and I promise it'll start to make a bit more sense so I'm going to say from flask import request and Json ify now what jsonify will do is allow us to return Json data which you've kind of already seen we're then going to say from config import the app and import our database and we're going to say from Models import the contact model so from config we're importing the app and we're importing our database from Models we're importing contact and then from flask we just need this request object and we need jsonify okay now first thing we need to do is we need to run our flask application so we're going to say if the name is equal toore maincore underscore keep in mind these are two underscores here then what we're going to do is say app. run and then debug equals true now what this checks is if we're running this file directly so it means hey if you actually ran main.py then execute the code that's inside of here this essentially avoids us running this code if we were to maybe import something from this file instead because in Python when you import something from a file it's going to execute all of the code in that file but when we have this line it kind of protects us from that which means hey if we import this file don't do this but if we run the file directly do this now another thing we need to add here is we need to instantize our database now I know I butchered that word but you get the idea so we're going to say with app.app uncore context db. create all now what this does is say okay right when we start the application or we're about to start the application we're going to get the context of our application don't worry too much about this code I'm not going to explain in depth how it works then we have db. create all now what this says is go ahead and create all of the different models that we have defined in our database Now it only does this if they're not already created but the idea is we need to actually spin up the database if it doesn't already exist so that's what this code is doing here it's saying okay do we already have the database well if we don't we got to create it so let's go ahead and do that then we start running the code and that will run all of our different endpoints and our API okay so let's begin by just writing the um get method okay so the first thing we'll want to do right is like get some context so how do we get these different contexts and I want to show you how that works so we're start by saying at app. root and then inside a set of parentheses here we specify the root or the end point that we're going to go to so I'm going to say slash context then beside this we're going to say methods equal to a list and we're going to specify the valid method types okay before I go any further let me explain this this here is something known as a decorator now this goes above a function which we're going to write in a second you don't need to know exactly how it works but you just know the name decorator inside of here right CU we're saying okay we're creating a new route we specify what route we're going to go to in this case B it's SL contacts and then we specify the valid methods and remember I was telling you we have methods like post delete patch Etc but those are only valid for certain URLs in our case we only want to be able to use the get method for this URL so that's what we're doing now beneath here we're going to write a function so we're going to say Def and then getor context you can call this function anything you want so long as it's Unique and then inside of here we can actually specify how we want to handle a get request that is sent to the route so what I'm going to do is say contacts is equal to contact. query and then doall now what this does is it uses flask SQL Alchemy which is our om to get all of the different context that exists inside of the contact database that's all it's doing it's just getting all of the different contacts and I told you it's super easy to do that so it gives us a list of all the different contacts the issue is these contacts are python objects right like they look like this they're python object that have the fields ID first name last name email now we can't return python objects from our code what we can return instead is Json data so what we need to do is take all these python objects and we need to convert them into Json now that's why we wrote this two Json method here that we're going to use from main.py so I'm going to do a little bit of fancy python here but what we're going to do is say Json _ contacts are equal to and I'm going to use this map function now in the map function I'm going to pass a function which is Lambda I'm going to talk about this in a second I'm going to say Lambda X and then x. 2or Json and then I'm going to pass my contacts okay what is this doing well our contacts is a list of contact objects we know that all of these contact objects have the 2 Json method so what we need to do is call them call that method sorry for all the different contacts and then create a new list that just contains the uh Json for the contact so what map does is it takes all the elements from this list and applies a function to them and gives us the result in a new list now the function we're using here is just known as a Lambda function it's just a shortcut for writing a function in one line you say Lambda you specify a variable in this case it's the parameter and then you can use that parameter and call anything you want so in this case X is always going to be of the contacts from our list we're going to call to Json on that contact and then it's going to put it inside of a new list the only thing is this map actually returns a new map object what we want instead is a list so we're just going to convert this to a list nice and easily like that okay now what we're going to do is we're going to say return and we're going to say jsonify and we're simply going to return a Json object that says context and that is equal to Json context what we're doing so saying okay we have this context key in our python dictionary it's going to be associated with the Json context which is what we just created here which is a list of all the contacts we have this python uh dictionary object we convert it into Json data using this jsonify function and that's it that's all we have to do so now if we run our code I'll show you how this works so I'm going to clear I'm going to type Python 3 main.py now if you're on Windows it's just going to be python notice that it's going to start running our server so let's bring this up here it says this is a development server blah blah blah and then it gives us the URL so we can copy the URL here which just Local Host Port 5000 and if we open up a new browser window so let's open up one here let me just make this a new tab so it's a little bit easier to see okay you can see that I pasted the URL in here and now I'm going to go to slash contacts because contacts is the get URL and I'm going to hit enter and notice that we get this response it says contacts and it's an empty list so what we did when we use the browser here by default is we send a get request to any URL that we put here so we put the URL of our server we put the endpoint which is/ contacts and then it gave us this Json reply which is contacts well we don't have any of those yet okay there you go that is how it works for actually getting the context so now we can shut the server down if we want by hitting contrl + C we don't have to it will actually Auto refresh I'll just shut it down for now and we'll start writing the other roots for actually creating updating Etc the contexts all right so we're back here and now we'll write the root for creating the context now to do that we're going to say at app. Roots we're going to say this is going to be slash creatore contact and this time the methods that will be allowed will be post because we're going to be creating which is the post method right so now inside of here we need to write a function so we're going to say Define create under _ contact and what we need to do is we now need to get the data associated with the contact we want to create now remember I said that with request we can submit Json data so what we're going to do is look at that Json data that was submitted here and we're going to make sure that it's valid for creating our contact and let me zoom out a little bit just so it's bit easier to read some more code notice that we have this request object imported from flask so we're going to start using that we're going to say first uncore name is equal to request do Json doget and we're going to get the first name property now we're going to do the exact same thing for the last name okay so this equal to request. Json doget and then last name and then we're going to do the same thing for email which is request. json. getet and then email okay so all we're saying is okay let's look in the Json data we're going to use do get because we don't know if this key is going to exist or not and if it doesn't exist it's going to return none otherwise it's going to give us the value of the first name last name and email key now we want to make sure that all these values exist because if they don't exist then we can't make a contact so we're going to say if not first name or not last name or not email okay then we're going to return essentially an error message saying hey this didn't work so we're going to say return jsonify and we're going to put inside of here a string that says message and that says you must include a first name last name and email and then we are going to specify the response error code which is 400 standing for bad request at least I believe that's what the correct message is so again we're saying okay if you did not give us first name you did not give us last name or you did not give us an email we're going to return an error response here the way we do that is we return a Json message so we say hey here's the message so that you can read it and then we actually do a comma and we return 400 and that says what the status message of the request is now by default it's going to be 200 so here I could have just put 200 and that means success okay we don't need to put that though because that's the default if you don't include it whereas in this case we want to tell them hey this didn't work so we're manually specifying 400 okay so now if that was not the case what that means is that we did have valid first name last name and email if that is the case we need to make make a new contact add that in the database and then tell them hey this worked right this was good so we're going to say newor contact is equal to a contact and we're going to specify our values we're going to say first name is equal to first name last name is equal to last name and email is equal to email so notice that for all the fields here right other than the ID because this will be autogenerated for us first name last name and email I'm just passing those into the Constructor of my contact so now I create this new contact object that has these different fields and what I can now do is I can add it to my database now to do that I'm going to do a try and accept block so I'm going to say try db. session. add new contact then I'm going to say db. session. commit and then I'm going to say accept exception as e and then what we're going to do is say return jsonify don't worry I'll slow down here in a second we're going to say message is the string of e and then we're going to return the status code of 400 okay so let's quickly break this down when we want to add a new entry to the database we just create the python class corresponding to that entry we then add it to the database session once it's added it's kind of in the staging area so it's not yet actually been fully written to the database it's just ready to write to the database then we commit when we commit that means okay anything in the session go ahead and actually write that into the database permanently which is what commit does now the thing is errors can occur when we do this so we put it inside of a try accept blocked and in the accept block we just catch any exception and if there's an exception we simply return that as a Json message to the user telling them hey sorry you know something went wrong status code 400 great now if we get past the tri accept block what we can do is say return jsonify and we can say message and we can just do something like user created and then we can return a status code of 201 which stands for created okay it can be 200 as well but 2011 is a little bit more specific so what we're doing is saying okay well we handled all the errors if no errors occurred we're going to tell you that yes this did indeed work we're going to return to a one and now you've created a new contact so there you go that's how that works now the thing is for us to actually be able to test this it's a a little bit complicated so I'm not going to test it right now um what I'm going to do is just write the other roots and then once we have these roots you just kind of have to trust me that they work and we will test them from the front end but I don't want to get into using postmen doing all this other stuff that's going to just take us a lot of time and not really necessary for such simple Roots however usually what you would want to do is test your API before you even start working on the front end so you're going to want to ensure hey everything that I wrote here in the back end is working I'm able to create my data delete it update Etc now that I have all my data related stuff done we're going to go to the front end we're going to make it nice and pretty and we're going to interact with the backend API now in order to do that there are tools and one of the tools you can use is called Postman Postman allows you to send these more specific requests like post requests with Json data to an API especially in a development environment to test it out in our case we don't want to get into that cuz it's going to be a bit more complicated so we're just going to write the next route okay so this is create contact pause the video if you need to okay so after creating we want the ability to update however when we update we need to know what contact it is that we are updating and then we need to have some data that we're going to perform the update with so maybe we're updating the name the email we don't know so keep that in mind as I write what's going to happen next I'm going to say at app. root this is going to be SL update contact and then what I'm going to do is specify a path parameter here which indicates the exact context we want to update so I'm going to say int colon user ID now what this is doing is saying okay we need to pass to this route update contact and then a number indicating the ID of the user that it is we want to be updating so what that's going to look like if we call this is slash update contact slash1 or slash 9 or whatever the ID of the user is we want to update and then beneath that we will actually grab any of the update information and then update the contact so to do this we're going to say Define update contact we're going to take in user ID and notice that the variable name here matches whatever the path parameter is that I specified here okay now I'm going to say contact is equal to contact. query doget with user ID now what this is doing is saying okay I want to look in my contact database and I want to find the user that has this ID because in order for us to update a user it needs to exist so the first thing we're doing is looking for the user and now we're going to check if the user doesn't exist so we're going to say if not contact so if no user with that ID exists return jsonify and then we're going to say message and then this is going to be user not found like that and also this reminds me that for the root we're going to need to specify the valid methods so we're going to say methods is equal to a list and for this one uh we'll actually put patch as the method we can change it later if we want it could be post as well but patch is fine okay and for the status code we're going to go 404 actually because we're saying hey we did not find the contact now if that's not the case and we did find the contact we're going to start pursing through the Json data so we're going to say data is equal to request. Json and now we're going to get the first name last name email Etc so what we're going to do is say contact. first name is equal to data doget first name like that and then comma contact do first name now what this is doing is the following we're saying okay we're going to modify this contacts first name to be equal to whatever the Json data first name is that was given to us so if you gave us a new first name essentially we're going to use that to update the first name otherwise we're just going to leave it at whatever it was now the way the doget works is it looks for a key inside of a dictionary which is what this will be if the key exists it returns to us that value if it doesn't exist it instead returns whatever the second parameter is inside or the second argument is sorry inside of the get function so in this case if first name exists gives us a first name if it doesn't we just keep whatever the first name was for the contact now we're going to do the same thing for the last name we're going to say this equal to data. getet last name and then contact. last name and then you guess that we're going to do the same thing for the email so contact. email is equal to data doget email and then contact email so this way whatever it is that they pass here is what we're going to update so if they give us a new first name we update just the first name if they give us first name and a last name we update those it handles any possible combination of the different data they could be passing us because they may only update one field they may not update all of them right which is what we're kind of checking now what we've done is we've modified the contact what we can simply do is db. session. commit and since this contact already existed it's already added in the session so when we commit the session it makes that change permanently we then can say return jsonify like this and we can pass again a message and the message can say user updated like that and then we can just return 2011 for success I believe there's another exact uh status code we could use but I think 200 is totally fine okay so that's it for updating creating and getting last thing we need to do is handling deleting so let's do that and then the API will be finished and we can go over to the front end which is where we'll actually see the interact ability here in our application okay so let's write another rout we're going to say at app. root and this is going to be SL delete contact and same thing we're going to specify a path parameter here for the ID of the contact we want to to leave this will just be user ID now for the methods we'll say methods are equal to a list and this time it's going to be the delete method okay now we're going to Define our function we're going to say delete contact and then this is going to be user uncore ID and similarly to before we're just going to copy this exact code which is going to give us this contact so we're going to paste that in we're going to say okay let's look for the contact with the user ID if it doesn't exist we're going to return 404 otherwise we'll simply delete it and deleting it is quite easy we're going to say db. session. delete and we're going to delete delete this contact and then db. session do commit and then again return and this is going to be jsonify of a message and the message is going to say user deleted okay and then status 200 okay that's it that finishes our API so if you need to pause the video finish coding this out of course you can also reference the code from the link in the description we can quickly run through it we have the ability to get where we query all the contacts we just convert them into Json and return them we have the ability to create this is a post request we get all of the Json data we make sure that we do actually have a first name last name email then we create the new contact add it into the session and then tell them hey this was created for updating we need to know the contact we're updating so we get the contacts ID we use that to get the specific contact we then update the data did not mean to do that and then same thing for delete we get the contact we delete it and we return our success message so what I want to do now is I want to move over to the front end we're going to start coding this out and we're going to see how to interact with this back end all right so I've just expanded the folder here for front end and we're going to start just cleaning this up a little bit and then we'll start writing a few different components that we need now it's not a ton of code but what we want to do is be able to interact with the back end by pressing buttons using input Fields Etc so what I like to do right away is go to source and just start deleting a few things that we don't need so for example in assets we can just delete this folder we don't need that I want to go to main. jsx actually this looks good we're going to go to app.jsx and we're going to remove the import of the v logo and the assets here we're then just going to delete everything inside of here except for this fragment and we'll get rid of that okay so that's what we want for app now for public we can delete this logo we don't need that and we can go to our index.html and we can remove the reference to the logo and then for the title we can change this to contact list okay so that's kind of all we need what I want to do to begin is just fetch the contacts that we have now by default we're not going to have any but I just want to show you how it works in terms of sending that request and then we'll display all of those and then add the form for creating contact updating deleting Etc so what we'll actually do is from our backend notice I'm my back end here we'll just run this so Python 3 main.py just so that that's going so we can actually test that in a second and then from App we're going to set up some state which is going to store our contacts so we're going to say constant and then inside of a set of square brackets contacts and set contacts is equal to use state and this is going to be an empty list because that's what we're going to have for the context then we're going to make a function we're going to say const fetch contacts is equal to an arrow function here and react this is actually going to be an asynchronous function because it's going to need to wait a second to fetch the contacts and what we're going to do is send a request to the backend to get the context how do we do that well we say const response is equal to await and then we're going to use fetch fetch is something you can use to send a request by default it will send a get request which is the type that we want to send and we're going to send to http colon SL slash make sure you have the HTTP by the way otherwise it's not going to work and then 127.0.0.1 Port 5000 which is what our flask server is running on SLC context all we're doing is sending a get request to the SL contacts endpoint now we're waiting for this to give us a response once it gives us a response we want to get the Json data associated with the response so we can say cons data is equal to await response. Json that's going to give us the Json and then we can say set context and this is going to be data. context okay because what's going to happen is it's going to return the Json remember the Json that we return looks like contacts and then contains a list so so we grab the context property that gives us this value right here which is all of our context we then set that in the state so for now if we want to see what this is we can just say console.log data. contacts and now we would just want to call this whenever this component renders we just want to call it once as soon as we load the website essentially so to do that we're going to import use effect and we're going to put a use effect hookup here we're going to say use effect okay we're going to pass an arrow function then inside of this function we're going to call the fetch contacts function okay so all we're doing is saying okay as soon as this component renders as soon as it loads call this function and then here we call this it's going to give us the contacts and set it in the state and then we can use that to list all the contacts out again right now we're not really going to see anything because we don't actually have any contacts it's going to be an empty list but this will at least allow us to test that we're able to send the request to our backend and I'll show you how we do that so here you go on this side of the screen we have our what is this server our API I'm going to split my terminal and I'm going to CD into the front end directory I'm going to clear and to run my code we type npm run Dev make sure you're in the front end directory for that it's going to spin up the front end server for us and you can see that this is running on Port 5173 maybe different for you I'm going to press on control on my keyboard or command if you're on Mac and press press on that and it's going to open up the browser let me just put this in a new window now if we refresh we should see that every time we refresh we get a new get request happening in our backend server over here so just you can test that and you can see that it's sending the request and if we right click here and go on inspect we should see in the console that we're getting an array with zero elements right so every time I refresh we get that again so we get this kind of empty array uh because well that that's what's happening right we're fetching the contexts and none of them exist so it's giving us an empty array okay so that's that and I think that's it for right now in terms of fetching we can leave these running for now what we want to do next is we want to actually display all of the different contexts that we have I'll show you how we can mock some data by the way so we can actually view if it's working and then we want to create a form that allows us to create a new contact so what I'm going to do is make a new component in this Source folder here and I'm going to call this my contact list jsx now this is where we will write the uh what do you call component for rendering our context so I'm going to say import react from react and we're going to make a new component to do that we're going to say const contact list is equal to a function and inside of this function we're going to take a prop and this prop is going to be contacts because we need to have all the context that we can render them so we're going to accept that and then what we're going to do is start writing out some basic HTML this is something you've probably seen before it's going to be very straightforward that will just render our context in a table so that we can view all of them so we're going to return a div we're going to have a header so we're going to say header two contexts and now we're going to create a table so we'll make a table in HTML to start we're going to define the head of the table and then beneath that we can Define the body of the table by the way if you just want to copy this out again you you can do from the link in the description in the head we need a table Row in the row we need our table headers which are th first one is going to be first name the second one is going to be last name we need another one so table head this is going to be email and then one more is going to be actions because we're going to have actions like updating and deleting uh the different entries so there you go that's it for the head now we want to do the body now this is going to be dynamically rendered because it's going to be based on all the contacts that we actually have so inside the body we're going to put a set of braces here and we're going to say contacts. map and we're going to map with a function here all of the contexts that we have and we're going to return a new row for them so we're actually going to do a set of parentheses and we're going to say t R and then here we're going to pass a key whenever you have Dynamic data you need a key so for the key this is just going to be the contact. and then inside of the table row we're going to have table data for all of the different entries we want to show so we're going to have the contact DOT first name if we could spell that correctly we're going to do the same thing for the contact do last name and then we need the email so we're going to have contact. email and then we need the buttons so we're going to have table data and then inside of here we're going to have two buttons so we're just going to say button first one we'll say update and the second one we'll say delete okay so that should be it this again dynamically rendering all the different table rows for our different contexts pretty straightforward JavaScript and react here we have our table data which contains first row last row or last name sorry first name last name apologies email and then we have our buttons update and delete we'll hook those up with some functions in a second but for now what we'll do is we'll actually render this component from app.jsx so we need to export the contact list I just remembered so we're going to go down here and say export default contact list needs to be exported for us to be able to import it we're going to go to app.jsx and we're going to import it so we're going to say import the contact list from do/ contact list and now we're just going to render the contact list so for return we can just say contact list and then contacts can be equal to contacts like that now right now we're not going to see anything because we don't actually have any contacts however if we go to our web page so let me open this up here oh looks like I closed it so let's rerun it okay let's open this again boom you you see that we get contacts first name last name email actions now it's not very spread out we can obviously change the styling if we want but now what we can do if we want to test a contact is we can simply go here we can comment this out and we can just set a mock contact which is what I'm going to do so I'm going to say first name Tim last name spell that correctly my last name let me just save this I'm going to say email let's go email and then ID of one and I actually realized I don't need to have a string for all of these but that's fine so now I'm just setting like a mock contact so we can test this and let's move this over so we can read it and now if we go back here you can see we get first name last name email actions Tim Vera email update and delete obviously it doesn't look very pretty we can fix the styling later on and in fact if we want to just make it look a bit more plain we can go to app.css and we can just remove all this so if I grab that and just remove it if we go back here we kind of get moved over here and then if we go to index.css same thing if we remove all of that now we get kind of the original HTML now if we want to just space these out a little bit we can do that a bit easier so inside of index.css or app.js app.css doesn't matter which one you do we could say dot T head and we can just say the margin is something like 10 pixels and now if we go back here uh actually we're not getting any spacing there H maybe we want to do it ah it's cuz I haveth we just want th like that now if I refresh okay sorry about the cut there but now that is finished in terms of viewing our contacts what we're going to do now is we're going to make a component that allows us to create some contact so let's remove this mock contact cuz we don't need this anymore and we're going to make a new one here and we're going to call this the contact form. jsx okay so inside of contact form uh we're going to well create a form so we're going to say import and this is going to be U state from react we're then I'm going to make a function and we're going to say actually we could do it the other way the way we did it before we'll say const and this will be contact form equals an arrow function inside of here we're going to take two s uh and actually we won't write them yet cuz I don't want to confuse you we'll write them afterwards anyways inside this function we need some state for our form so we're going to need to store the first name last name and email and then we're going to use that and actually submit that to the API to create a new contact so we're going to say const first name and then set first name is equal to use State and empty string we're then going to say const last name set last name for some reason my shift key is bit sticky here not really working that well we'll say use State and then const email set email is equal to use State and this will be an empty string okay so that's it in terms of the different content we're going to want to store next we're going to return the form so we're going to say return and we'll actually return a form now inside of the form here we're going to have a div now inside of this div we're going to have uh our first kind of label our first input element which is going to be for our first name so we're going to say label this is going to be HTML 4 is equal to the first name inside the label we're just going to say first name colon like that we're then going to have an input tag and for the input tag this is going to be type is equal to text we're going to have the ID equal to the first name we're going to have the value equal to the first name and we're going to have on change is equal to and then this is going to be a function which is e and then set first name and then e. target. value and let's see if we can format that okay for some reason the formatter doesn't seem to want to be working so it's a bit difficult to read uh let me see if I can get that working all right so there we go I got the format working so now we're actually able to read this okay so anyways we have our onchange which is again a function e set first name e. target. value now we're going to copy this exact same thing and we're going to paste it twice one for the last name and one for the email so we're just going to change these manually to say last name this is going to be last name last name and this will be set the last name and then we want email so we'll make this email and rather than that just say email email email and set email okay so now we have a basic form that's first name last name and email we just want a button now that we can press on uh that will actually create this element so we're just going to say button and this is going to say create contact and and then for the type we'll say type is equal to submit and now we want what we want to do is create a function story so that when we actually press on this button it does something and it creates this content and what I also want to do is export this I'm going to say export default and then contact form like that okay so what we'll do is make a function now so we're going to say const on submit is equal to this and inside of our form we're going to set this up so we're going to say onsubmit is equal to onsubmit so essentially that means once we press this button we're going to go into this function naming this function we're going to say e. prefent default and we're going to take in E that just means we're not going to refresh the page automatically which we don't want to do so that's kind of removing that standard behavior and now we're going to set up a post request so that we can actually create the um the contact I also realize this needs to be called set last name not sure how I made that set last time okay so first thing we're going to do is start defining the data that we actually want to pass with our Json as the request so we're going to say con data is equal to an object and we're just going to pass in the first name the last name and the email which corresponds with what we're looking for in the API when we create a new contact we then are going to specify the URL so we're going to say const URL is equal to HT TTP col1 127.0.0.1 colon 5000 SLC creatore contact okay so that's the URL or the route that we want to go to now that we have this we're going to set up some options for our requests so we're going to say con options is equal to first thing we're going to do is specify the method in this case the method is post when you are not doing a get request you need to actually manually specify all the different options whereas with a get request it just automatically does it for you so that's what we're writing here we're going to pass something known as a header so we're going to say headers this is going to be an object again and we're going to say the contenttype is equal to application SL Json now what we're pretty much specifying here is that we're about to submit Json data so we need to include that in a header when we send this request that the API knows that we actually have Json data we're then going to say body is co and equal to Json and all capitals do stringify and we're going to stringify this data might seem a bit weird what we're doing this but essentially this is a JavaScript object just like in Python we need to convert this into a valid Json object so what we do is we take json. stringify that converts it into a Json string which we then include in the body of our request now what we need to do is actually send the request so we're going to say const response is equal to await and we're going to say fetch the URL and we're going to fetch this with the options that we specified and since we're using async here we need to put async for our function uh on the onsubmit so we're going to do that so say con response equal to A8 fetch URL options we then are going to check if this was successful so we're going to say if the response. status does not equal to a one or the in actually sorry not or we're going to say and the response. status does not equal 200 so essentially we're just checking hey if you did not give us a valid response if it wasn't 200 or it wasn't to A1 then what we want to do is we want to alert the user that there was an error so we're going to say con message is equal to await response. Json and then we're going to say alert and we're going to alert the message do message because what happens is inside of the Json which actually we could just call data to make this a bit more clear we have a key called message that contains the error message so we're just going to alert the user of that otherwise we can say that this was successful and eventually in a second we will do something here now this actually completes this form let me zoom out a little bit so we can read it better we have the state for all of the three variables that we need we have our onsubmit might seem a bit confusing but really it's it's not overly complex we're just defining the data defining the URL endpoint setting the options for the request sending the request checking if it was successful if it wasn't we're going to alert them with an error otherwise we'll kind of indicate it was successful but we're not going to do that this second okay so that's about it here for the contact form now we need to actually render the contact form so to do that we're going to go to app.jsx and we're just going to make a fragment here and we're going to take this and place it inside of the fragment and then beneath it we're going to render the contact form like that now let me just actually format this so that it looks a little bit nicer and there we go and now we'll remove the comment on fetch contacts and now we should have a form that will allow us to uh create a new contact so we can test that out and we should have the ability to get that contact once it is created so let's go back here you you can see that we have our form again a little bit messy but we can clean that up in a second for the first name let's go with Tim last name here we're going to go Tim atgmailcom let's click on create now notice we don't get any output the reason we're not seeing anything is because we haven't forc refresh the screen however if we refresh here you'll see that now we actually get this contact appearing and if we go back to vs code and we look here you can see that we had a post request come in right where it created the new contact and returned the status of 2011 now let's see what happens if we press this and um you know we don't have any values it says You must include a first name a last name and email if we just do Tim same thing we're going to get that error there right and if we try to repeat the same email we should actually get an error as well it says here there's some error that occurred here unique constraint failed on contact. email essentially meaning that the email is not unique right and as we said we need it to be unique okay so that's it for the form now we'll make it look a little bit nicer in a second but you can see that we're getting all those error messages in our API and while we are successfully calling the API and creating new contacts okay so now we know how to create new contacts and fetch them what we want to do now is be able to delete them and to update them we also just want to prettify the form a little bit and what I want to do is I want to make it so that if we go back here we only see this form if we press uh create or update so the idea is we can reuse the same form for updating and for creating because it's going to be the exact same information so what I want to do is make it so that we pop this up into modal modal is just something that's kind of hovering on top of the screen it's like a little window that pops up so we're going to implement that modal functionality so that this form is only visible when we're creating or updating and then we'll reuse it or kind of modify it to be able to update the contact as well okay so setting this up is a little bit complex but it's okay we can handle it so let's go to app.jsx and let's start kind of handling this modal component so we're going to say const is modal open and then set is modal open is equal to use State and then false so what we'll do is we'll set this state to True when we want to actually open the model now we need some functions that will allow us to toggle the model so we're going to say cont and this is going to be I'll actually start with close model is equal to this and we'll just say set is modal open to false we'll then have const open and the thing is though this model can be opened in two ways so it can be opened when we're creating a new contact or when we're editing a contact so I'm going to say open create model okay what this is going to do is it simp simply going to say if not is modal open then we're going to say set is modal open to true so if it's not already open then we will go ahead and open it and now that I think of it actually yeah that's good that's what we'll do so if it's not open then we'll open it up okay now we need something that will display the model so let's go down here and let's write this out we're going to have a block here and we're going to say is modal open and if that's the case we're going to render a div now inside of this div we're going to have a class name so this is going to be equal to modal we're going to use a little bit of CSS in a second here we're then going to have another div this is going to have a class name equal to modal Das content and then inside here we're going to have a close button and we're going to have our contact form so we're going to take the contact form and paste it inside of here and then above this we're going to have a span we're going to have class name is equal to close and we're going to have on click this is equal to close the modal and then inside of here we're going to put the ENT times and then a semicolon which is just the x button okay that's what we're kind of representing here okay so now we have what we need for the model we can test this I believe actually however we don't have a way yet to open it so so let's make a button and we're going to say button and this is going to say create new contact and for the button we're going to have onclick equal to the open create model okay so we'll see if this works or not for now we should if we refresh here when we click create new contact you see it opens up and when I click the x button it closes however I want it to kind of appear a little bit nicer than that so we'll write some CSS so that it's styled but you can see it is opening and closing so that's working at least okay so let's go to app.css and let's start writing some of this CSS so we're going to say modal let's zoom in a bit here we're going to say it has a position which is fixed by the way you can of course copy this from the link in the description we're going to give it a z index of one meaning it will appear on the top of the screen we're going to give it a left of zero and a right of zero okay setting its position we're going to say the width is equal to 100% the height is equal to 100% we're going to say overflow Auto and then we're going to say the background color is equal to the following this is going to be rgba and we're going to have 0 0 0 and then 0.4 opacity that's going to give us a nice gray color okay then we're going to have dot modal content and for the modal content we're going to have a background color and the background color can be pound Fe Fe Fe like that okay we're going to have a margin for the margin it's going to be 10% and then Auto we're going to have some padding this is going to be 20 pixels we're going to have a border around the content and this is going to be a one pixel solid border and the color of it is going to be a 888 okay so you can kind of see the the preview right there we're then going to have a width of 80% okay so let's add our semicolon here so that doesn't give us an error okay almost done we're now going to have a close so the close is going to be the close button right so we're going to say color is equal to pound a a a like that we're going to say float to the right so this just means hey put this to the right side of the content we're then going to say the font size is equal to 28 pixels this will Define the size and the font weight is Boldt okay so that's it for our styles again you can just copy them from the link in the description if you don't want to type them out now if we go back here we refresh and we click on this now that's not quite how I wanted it to appear um give me a sec here guys I'm going to look at what's wrong and then I'll come back and we can fix this up okay looks like I'm missing a comma here inside of my rgba color so that might have been the error let's see if we do this now okay no it's still giving us an issue so give me a second aha so I see here in my modal I have a position of left zero right zero I actually wanted left zero top zero so let's try this now and that's better that's what I wanted so now you can see that what it's doing is kind of filling the whole screen with this opacity uh and then it's showing me the modal here and I can close it by clicking the x button and now what we can do is just add a bit of space spacing between our fields and then that'll be kind of done for the styling and we can hook up updating and deleting so let's go to index.css and inside here I'm just going to do a general Style on all my input tags where I say they have a margin top of 10 pixels I'm then going to do the same for my button and my label so I'll say input comma button comma label I just want all of them to have a slight margin so now you'll see when I click on this there's a little bit of margin and it looks a bit nicer okay now that we've got that finished let's go and make it so we are able to actually edit these contacts all right so to be able to actually edit these contacts what we pretty much need to know is what contact it is that we're editing which means from our contact list here when we press on this update button we kind of need to go back into the app.jsx component and we need to indicate what that contact actually was and then open the modal using that context so there's a few changes here and these components are going to be intertwined what we'll need to do is in the contact list we're going to have to have a a button be pressed that button is going to tell the main app component hey we want to edit a contact it's then going to open up a modal and we're then going to need to pass that contact to the contact form and then the form will allow us to edit that contact so what that means is we'll start with the form and inside contact form we're going to take in some props so we're going to say that my existing contact is equal to an empty object and then we're going to take in an update call back which is a function we're going to call as soon as we perform any updates now what we're going to do is for our first name last name and email is we're going to use the existing contacts first name last name or email if it exists so we're going to say existing contact DOT first name by the way sorry if you guys can hear those Sirens here it's it's quite loud but we're going to keep going we'll say existing contact last name and we'll say existing contact. email or an empty string so what this is pretty much doing is saying okay let's look at the existing contact if we have one meaning we're actually editing a contact we'll put in what their first name last name and email is otherwise we'll just have an empty string that's all that's doing now at the same time I also need to know here whether or not I'm updating or creating a new contact because we'll have to change what we're doing inside of here based on if it's an update or if it's a create so we're going to say const updating okay if we can spell this correctly is equal to object. entries of the existing contact. length does not equal zero now what this tells us is okay if you passed us an object that has at least one entry inside of it that means that we're updating it because we actually have some existing data if it doesn't that means we're creating a new contact so that's kind of how we know here uh with with updating okay so now what we'll do is we'll change a few things based on if we're updating or if we're creating so really the only change that we actually need to handle is just in the URL here because whether we're updating or we are creating we're going to be submitting the same data which is whatever is in this form so what we'll do is we'll go to the URL here we'll remove the create contact and we're going to append to this some Dynamic data which is going to be the end point so we're going to say if we're updating question mark then we're going to put some back ticks which are just where the Tilda key is on your keyboard usually beneath the Escape key and we're going to say well if we're updating then we're going to call the update contact but we need to pass to this the ID of the contact we're updating so we're going to pass in a dollar sign in our braces allowing us to embed a variable and we're going to say that this is the existing contact. ID cuz if we have an existing contact if we're updating well this is the one that we're updating so we're calling update contact with that as the path parameter otherwise we just put create contact like that and that's pretty much it so it just changes the URL based on if we're updating or creating to be either update or create nice then when we have the else here we're just going to call the update call back and what this update call back will do is just tell uh the app.jsx component hey we actually finished this we didn't update or create operation and that will then close the model for us uh and allow us to update the data that we see from uh what do you call it the contact list okay so we have the contact form and the thing is we need to pass to this the existing contact if we are um what do you call it updating right so how do we do that well we need to actually go to contact list and from contact list we need to take in some functions as well that we can call if we want to update a contact so I'm going to say update contact and update callback now the idea is whenever we perform an update we'll call the update call back and whenever we want to update a contact we'll just call this function with the contact we want to update so what we'll do is we'll go to the update button here and we'll say on this click so on click is equal to and this is going to be a function and this function is going to call the update contact and it's going to pass the contact okay so we're saying okay if you click on click we're going to have a little function here Arrow function that will call update contact with the contact that we want to update so now when we press that what will happen is if we go back to app.jsx here we want to make it so that that update contact call opens the modal that then allows us to update the contact so for our contact form here we need to pass in something what is it that we wanted to pass let's remember here we need the existing contact and the update call back okay so let's actually do that after we do the contact list so we're going to make a new function here we're going to say open edit model okay now for the open edit model what we want to do here is open the model with our contact so we're going to say contact like that and what this is going to do is say if the modal is open simply return otherwise we're going to actually set some new state so we're going to make some new state here we're going to say const and this is going to be the contact it's actually going to be the current contact and then Set current contact is equal to use State and this will be an empty object and the idea is this will store the Conta that we're currently editing so if we go here to this function we're going to say Set current contact to be equal to this contact and then we're going to open the modal so we're going to say set is modal to be equal to True okay so if you say open edit modal so if we call this function we're going to check if it's open if it is we're just going to return otherwise we're going to set the current contact and then we're going to open the model so we're going to say on uh what is this actually it's going to say update contact is going to be equal to and we're going to pass it the open edit modal function like this and then in the contact form here we're going to say the existing contact is equal to the current contact okay we're now going to do one more thing when we close the model we're going to say Set current contact to be equal to an empty object because as soon as we close it now we're kind of resetting it right so we have open the create model which does this open the edit model and then we have Clos modal now we need one more function which is what's happening when we actually perform an update so we're going to say const on update on update what we're going to do here is we're going to close the model which will do all this and then we're going to fetch the contacts again because they could have been updated after the on update so now for our contact list we're going to have the update call back which is equal to on update and we need the same thing for our contact form okay so we have update call back okay I think that this is good for now I know this is a little confusing but let's test it and then we can move forward so we're going to go create new contact you see it opens up the modal and when I click on edit you see it opens the modal but this time it passes in our contact information now the only thing is that this says create contact when really we want it to say edit contact so let's go change that we're going to go to contact form going to scroll down to where it says create contact and again we can just do some Dynamic rendering so we can say editing uh or what is this updating question mark then we'll say update otherwise we'll say create okay so we can test this again if we go create new contact shows us create if we go update shows us update let's try like Tim two when I click on update okay uh I guess maybe we're getting an error because that didn't do what I was expecting it to do so let's go inspect console and it says syntax error is not valid Json okay server responded with a status of 405 method not allowed so I suppose we're just submitting the wrong request type so let's have a look at this we can go here and notice that we get a post which is not valid okay so I believe that's cuz we used a patch so let's go back to our contact form and there's one more thing we need to change here which which is the method so we're going to say updating question mark then we're going to call the patch method method otherwise it's post so my apologies there guys but the method was not allowed so you actually saw here right it said hey responded with 405 method not allowed because we tried to send a post request when really we need to send a patch request so let's call update again let's change this to tim2 update and now notice it worked this time and it actually changed our email to be Tim 2@gmail.com we can create a new contact let's go Jeff uh Dean okay J gmail.com create and then notice it shows up here the only thing we need to handle is the delete if we call update you can see we can update this to be Jeff 2 and that works completely fine okay so let's handle the delete and then we will be close to finished so let's go back here to our contact list and we need an on delete function so we're going to say const on delete now for delete we just need the ID of the user that we want to delete so we're just going to say ID like that and now we need to send a request that allows us to delete the user so what we'll do is the following we will say try and we're going to say const response is equal to await fetch which tells me I need to make this an async function so let's go ahead and do that and we're going to await the following http colon1 127.0.0.1 delore contact and we're going to change these to back ticks so we can embed a variable in here and the variable we're going to have is going to be slash and then the dollar sign the braces and the ID of the user we want to delete now we need some options for this so we're going to say const options are equal to and in this case all we need to do is specify the method so we're going to say method is equal to delete we don't need to do the application type Json we don't need to have all that Json data because all we're doing is just calling this with the delete method so that means we're going to pass options here that's now going to send that delete request now what we need to do is we need to again check the status and see what happens so we're going to say if the response. status is equal to 200 that means it was successful so we're going to call the update call back otherwise there was an error so we're going to say console. error like this console error if we can spell that and we're going to say failed to delete and then we're going to have a catch block here and we're going to catch the error and we're going to say console. error and actually we can just alert the error so we're going to say alert and then we'll just alert whatever the error actually is okay so I think that should be good let me quickly run through this cuz I know it went a little bit fast there we have a try and a catch just because we could potentially get an error when we try to delete the contact we set the options equal to Method delete we send the request this time it's going to be this URL with options we're using the ID of the contact we then check if it was successful which needs to be if response. status is equal to 200 not two if it was successful we call the update call back that's going to tell our app.jsx here that we should close the modal and then fetch the contacts again because now we've deleted one right and then what we do if we have an error is we say failed to delete or we catch it and we alert okay so that's it now we just need to call this function so we're going to have on click is equal to again a function and we're going to say on delete and we're going to pass the contact. ID okay we can test this out now so let's go here refresh and click on delete and it says failed to fetch uh connection refused okay I potentially just typed something wrong here so let's see looks like I forgot my port 5000 so let's add 5,000 in there go back and delete and now notice that it works and I can update okay Tim two create new contact Jeff do J.O gmail.com and create and you see that we create the contact all of this going through our backend API you can see the post request get request and the patch request of course and the delete request as well okay so I think guys with that said that is going to wrap up this video as I said I know it's not the most complicated project in the world but I think this Illustrated to you how we architect out the front end and the back end the order in which we go about doing things how we communicate between a front end and a back end the different HTTP requests we can set and what it's like actually treating the back end is kind of a separate system that has all of the data and has that protocol that we can then use from the front end keep in mind now we can use this data anywhere we want in any type of application doesn't need to be the react app which is the whole benefit of having a separate backend now it's very flexible to go and create different front ends different interfaces and different ways to communicate with the backend API so I will wrap it up here if you enjoyed leave a like subscribe to the channel and I will see you in the next one w