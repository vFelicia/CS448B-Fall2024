hello everyone and welcome back to their Python quick tips in this video I'm gonna be talking about the difference between equals equals and is and how this works in Python on a fundamental level now this is something that a lot of people especially beginners in Python don't know or don't understand and if you consider yourself good at Python I would definitely recommend watching this entire video because this is very valuable information that you definitely should know that being said I apologize it's a bit longer than usual but I do need to kind of cover all the concepts involved in this so let's talk about equals equals vs. is now the first example I want to show is x equals equals y so we look at this example here we see I have x equals 1/2 y equals 1/2 clearly these are the same running this should give us the value true ok it makes perfect sense now what happens when I change this to is well what does is do vs. equals equals some people might think it does the same thing you might think it says well 1 2 is definitely 1 2 so that should be true but you can see that after running this I mean around again we get the value false that is because we are not comparing equality with these two objects we are comparing the object itself now believe it or not even though these are the same value they're stored in different locations in memory and I can show you where these are actually stored in memory by using a function called ID so I'm just gonna print out the ID of X now I'm gonna print out the ID of Y and I'll show you that although these objects are the exact same in terms of the value they store they are actually different to our computer you can see this is the memory location of X and this is the memory location of Y I mean relatively but that's the way I'm gonna explain it ok so you can see that what this actually does is compare the ID of X and the ID of Y and if those are the same it's gonna give us true otherwise it's gonna give us false now let me prove to you that this does actually work so if I change Y and make it equal to X and now I do a comparison X is y and print this you see we get true that is because these objects are actually identical they're the same object and you can see the IDs here are the exact same so that is kind of the main fundamental difference with is but how do we actually use this properly especially on our own objects well this is where we get into some more complicated and I'm gonna be showing them right now so let me just get rid of this example here and now we're gonna move into my custom example with my custom class dog so based on what we just saw in theory Tim should really be equal to Jill because these equal signs can pair will the value of our two objects and in this case our objects are pretty much the same they have a name that's equal to em and they both have that so if I run this we should get the value true right but we don't and the reason we don't is because on our own objects we need to specify how we're gonna compare them dog object here that we've created has no idea what it means for two dogs to be equal maybe they have a attribute a m our age maybe they have an attribute name maybe they have a bunch of other features about them what needs to be the same for us to say that this dog object is the same as another dog well that's what we're gonna specify it by ourselves by implementing a method here called equals so these are called dunder methods in Python there's also some other names for them as well but essentially what this allows us to do is overwrite standard basic functionality in Python so it will allow us to actually use something like the two equal signs on our dogs so let's show this so if I just throw itself in here and I throw other what I can do is write a quick method here that will take this other dog that's gonna be passed in and compare it to our dog and return true if they're the same and return false otherwise so the first thing I need to do is make sure that this other dog that we're comparing it to is actually an instance of dog so what I do that is I use this is instance method like this and this will tell me if this that I have here this object is actually an instance of the class dog now if that's true what I'll do is I'll say if other name equals equals self dot name return true essentially comparing the names of the two dogs and seeing if they are the same so if they're the same we'll return true otherwise we'll return false so after doing this now when I run my program you see we actually get a value of true now this is because when we implement this dunder equal sign method what this allows us to do is use the two equal signs between our dogs and get an accurate value comparison now this is again going to be different if I switch this to is so if I say tim is joe obviously we're gonna get because again the idea of Tim is gonna be different than the idea of Jill because although these objects are the same value eyes they have a different memory location they are actually unique different objects and they could change their properties at any point in time so that is kind of how that is versus equals equals work now let's just show one more thing if I do something like Jo equals Tim now when I say Tim is Jo we get the value true again because what actually happens is Jo points to the same dog object that Tim points to if you think about this kind of like in a pointer sense where these variables really are just holding the memory location of whatever object you want when you compare with is you'll see if they're actually the exact same object now sometimes this is useful because you need to know if you have you know the same object being passed in or if you have an object that's equivalent value wise but is its own unique object so anyways that is how this equals equals method works as well you can complete this on any of your own objects and this is what all of the built in standard datatypes have in Python so for example like an int datatype of five has a builtin method of double equal sign so it has this underscore underscore equals underscore underscore which allows you to do these equals equals now I won't get into this in this video because this will go much longer but there is tons of other methods like this that you can implement for example you can implement a method like add which will simply take you know will say self and some other object and you can add or change the value return a value based on that so maybe we want to add two dogs together and what we do when we do that is we simply return their names combined so I could do something like other dog named plus this dot name what am I saying this I'm not typing in Java yourself done it so now if we do something like that and I say you know Jo equals oh I'll have to actually make two dogs here otherwise this won't work okay so let's do dog Tim Jo and I print out the value of Tim Plus Jo we'll see that we get Jo Tim so what we do is we add those names together in reverse order so Jo Tim and return that so we can do stuff like this in Python and I just want to make this a quick tip video although it's not very quick I feel like a lot of people don't know this and it's super powerful and you can do a lot with it so that has been it for this video I hope you guys enjoyed if you want to see more complex Python stuff like this let me know because I have a whole kind of list of things I'd like to share on the channel