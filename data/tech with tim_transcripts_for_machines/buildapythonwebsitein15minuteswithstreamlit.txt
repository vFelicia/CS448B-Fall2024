today I'm giving you an introduction to a fantastic module known as streamlet now streamlet is something that we can use to really quickly build interactive user interfaces in Python it's really designed for working with databased applications things like llms machine learning data science but in truth you can use this for pretty much anything now over my 10 years working with python this is one of the best modules that I've used and it's definitely the easiest and fastest way to spin up a really quick website that can interact with your python application so with that said let's get into the video let me tell you a bit more about what streamlet is and then we'll build a sample application that will go over some of the core features so you can learn how to use it and then go and implement it in your own applications so here's a quick look at the application we be building you can see that we have a file import here so I've just imported a CSV it gives us a preview of what the data looks like in the different values gives us a summary of the data so you can see that it tells us the mean standard deviation minimum maximum value Etc allows us to filter the data so in this case I've selected City and then I can filter this by the city so in this case I could look at say New York and then we can actually plot the data here as well so I can plot the date against the temperature for the New York data and there you go we get a nice chart now believe it or not this entire thing is made in about 40 lines of code so let's go over to the code editor start installing streamlet and I'll show you how we Implement all of these different components so in order to use streamlet we need to install it so the first step here is to use use pip from our command line or terminal to install streamlet so what we're going to do is open up something like vs code which I have right here and then type pip install streamlet now I'm going to go with Pip 3 because I'm running on Mac if you're on Mac or Linux it'll be pip 3 and if you're on Windows it will simply be pip so let's go ahead and run that command and if for some reason your pip command does not work as always I'll leave two videos on the screen that will show you how to fix this now after we install streamlet we're going to install a few other modules as well so we're going to install pandas because we need that for this specific tutorial and Matt plot lib which will allow us to create some charts so let's install those as well you can see I already have them installed okay so once streamlet is installed we can test it out and in order to test it out we can type streamlet and then hello now if this command works it means streamlet is running successfully and this should open up a browser tab for you and show you some output here in your terminal now in order to close this you can hit contrl C on your keyboard that should stop that and then we can move on to creating our own streamlit application now for our first application we're going to begin by making a python file which I've done right here main.py and then we're going to import streamlet so I'm going to say import streamlet as St and we're going to spell streamlit correctly just that we have a short form here and we don't need to type streamlet every single time now the first command to be familiar with here is st. write now this is kind of a magic command and what I mean by that is that you can pass pretty much anything to right and it will automatically use some defaults from streamlet to plot it on the screen so whether this is a string like hello world or whether you want to pass maybe an array or you want to pass an object or you want to pass a panda's data frame you can pass pretty much anything here and it will automatically be written for you so let's go with something really simple like hello world and let's see how we would run this application using streamlet so to do that we're going to open up our terminal and we're going to type streamlet run and then the name of our app which in this case is main.py now notice I'm in the same directory where my file is that's why this will work we're using streamlet run passing our script and then this should open up a browser window for us that has the UI that we specified so let me open up the browser here it's just on my other screen and you can see that we have hello world now if we go back here and we decide to change our code while this is running so st. WR and let's write maybe an object where we say key and we have maybe an array here that says value and I save if you notice when you come back here you'll see that it says the source file has changed and we have rerun and always rerun as options if you want it to automatically rerun and update anytime you change the source file you can click on always rerun if you just want to rerun it manually you can click on rerun notice when I do that it displays this kind of Json or python object value for me and that's the magic of using this st. write command that can pretty much write anything that you want now if you want more customization ation you can use specific functions that will write maybe different widgets like sliders or you can have some more control over writing like a line chart or a table and I'm going to show that to you in one second now as you can see here you really don't need to be a web development expert in order to create something cool with python however if you're interested in strengthening your overall programming and problem solving skills our sponsor brilliant can help you achieve that Brilliance is where you learn by doing with thousands of interactive lessons in math data analysis programming and AI they use a first principles approach meaning you'll get the why behind everything each lesson is interactive and filled with HandsOn problem solving which is six times more effective than just watching lectures the content is created by awardwinning teachers researchers and pros from places like MIT Caltech and Google brilliant focuses on improving your critical thinking skills through problem solving not memorizing while you're learning specific topics you're also training your brain to think better learning a bit every day is Super important and Brilliant makes it easy their fun bitesized lessons fit into any schedule helping you gain real knowledge in just minutes a day it's a great alternative to Mindless scrolling brilliant even has an entire Suite of computer science plus python courses that take you from complete beginner to expert with HandsOn lessons that cover the important Concepts you need to master to try everything brilliant has to offer for free for a full 30 days visit brilliant.org techwithtim or click the link in the description you'll also get 20% off an annual premium subscription so now that we've got the basics down here let's build an entire application specifically that demo app you saw before so you can see a lot of the different features that streamlet has so let's close our terminal and delete this and just import a few other things that we're going to use so we're going to say import pandas as PD and then import matplot li. pyplot as PLT okay great so now after this we're going to create a title for our application so we're going to say st. tile and this is going to write some title text for us so I'm going to say simple data dashboard as the title now again if we save and we go back here and we click on rerun you can see that we have the new title okay so let's go back and let's continue writing the next thing that I want to do is create a kind of file upload window or a file upload button so in order to do that I'm going to say uploaded file is equal to st. file underscore uploader this is a widget that's provided by streamlet and then we can give this widget a name or uh kind of a label so we're going to say choose a in this case CSV file and then we can specify the type of file that we want to allow to be uploaded so in this case I'm going to say type is equal to CSV now obviously you can change the type here or you can provide multiple types but in this case we're just going to go with CSV now let's go and actually see how we can use the uploaded file and learn a bit about how streamlet works in the back end so what I'm going to do is say if the uploaded file is not none then what I'll do is just write something on the screen so I'm just going to say st. write and I'm going to say file uploaded dot dot dot now this won't be the finished application but I want to show you how this works so streamlit will actually automatically rerun the python script every time something changes now what I mean by change is that we could be changing the source code or the user could be interacting with some type of component and actually end up changing the state of the application so in this case if the user uploads a file what's going to happen is the python script is going to be reran that file is going to be maintained in the state of the script or the streamlet application and then when we get to this if statement this will change so the upload a file will not be none and we'll end up rendering file uploaded now I know this seems a little bit strange and it's kind of unintuitive to how you'd build a web app using something like JavaScript or HTML but anytime the user kind of interacts with the page and makes a state change like uploading a file the entire thing reruns we reexecute the entirety of the Python code but the state is maintained for whatever what was updated that just means any logic that you have here like checking the value of a variable will be ran again so then we can actually rewrite or modify the page and change it based on what the user just did so let me show you what I mean by that if I come back here and I refresh you can see that we have a file upload so now we just need a CSV file to upload I'm going to leave one Linked In the description in the GitHub that's there so if you want to download a CSV file you can do it from GitHub or you can just use your own but to browse files you can see I have one in my downloads here so let me go ahead and open that and you can see now that it says file uploaded so as soon as I browse the files here and I changed the state this python script was reran and that's why this if statement changed to be true and then we rendered file uploaded okay so now what we're going to do is rather than just rendering the file upload is we're going to read this in as a Pand as a data frame and then we're going to write the Pand as data frame so to do that we're going to say data frame is equal to pd. read CSV and we're going to read the uploaded file next what we're going to do is display a subtitle so we're going to say st. subhe header and this is going to be a data preview so you can see pretty straightforward we're just dising well a title or data preview if we go back and look at this and we go to always rerun now you can see that we have data preview okay next we want to actually write the data frame so we're going to say st. write and we're going to say DF doad now this just gets the first five rows from our data frame we pass that to right and right will automatically handle rendering that for us so again if we go back here you can see now that we have a preview of our data frame showing up okay so let's see what we want want to display next will we want a summary of the data so we're going to say st. subheader and we'll say data summary and then we're going to say St outside of the parentheses here. write and we are going to write the data frame. describe now when we describe the data frame that's going to give us all of those entries you saw in the demo like the average value in all of the columns the count the max the minimum Etc so just to show you that if we go back here you can see now that we have data summary and this table is inter cable and if we wanted to modify the table we could actually use some different commands from the documentation but we're not going to look at that right now I'm just trying to give you a quick introduction okay so we have the subheader we have uh the data summary and the data preview and the next thing is to filter the data so to filter the data same thing let's do another subheader this is going to say filter data and then we need to pass some widgets the user can interact with so first thing let's grab all of the unique columns that we have so we're going to say columns are equal to data frame do columns. to list now that's just going to give us all of the columns in a python list and then we're going to say selected column is equal to and we're going to say st. selectbox now this is a widget that's going to give us a drop down list of all of the different values that we pass to it the first thing we pass is kind of the prompt or the label for this so we're going to say select column okay to filter by and then next we're just going to going to pass all of the columns so this is now going to give us a drop down list with all of the different columns let me make this a little bit smaller just so you can read all of this okay so we're going to have all of the different columns let's have a look at that right now if we save when we come back you can see that we have filter data it says select column to filterby and then we have a bunch of different options that we can select here and every time we select this it's going to rerun the python script caching all of the data that we had before but allow us to run the logic that comes beneath okay so we have selected column we're then going to have unique values and what I'm going to do is grab all of the unique values from this column so I'm going to say DF and then selected column and then this is going to be do unique okay so that grabs all the unique values from this particular column the reason for that is that once we have a column we can then select a value within that column and grab all of the different rows that match that value so now we're going to say selected value is equal to St do select box okay and we're going to say select value and then we're going to go with unique values like that okay so let's go back and look at what this gives us you can now see that we have two select boxes we have a city and once we select something like temperature or city or whatever it gives us all the unique values so it's updating that in our script and then we can select one of the unique values okay so now that we're able to filter our data what we want to do is display that filtered data and then plot that on the screen so in order to display that we're going to say filtered undor data frame is equal to data frame and then this is going to look a little bit weird if you've never used pandas but this is how you can do a filter inside of the square brackets we can say data frame again and then we can say selected undor column double equal to selected value all this is doing is going in our data frame and it's grabbing all of the rows where the data frame at the selected column is equal to the selected value so where this row has that value in the correct column we're going to select it okay then we can write it so to write it we're going to say st. write and then we'll just write the filtered data frame again whenever you want to display something you don't know how to display it or this specific command you can just use right and it will automatically be displayed for you so let's go back and you can see now that it displays that data for us great okay now we want to plot this so to plot this we're going to say st. subheader and then we're going to go with plot data and then in here we're going to uh select sorry the X column and the Y column that we want to plot so we're going to say xcore column is equal to St and we'll go with a select box again we're then going to say select the xaxis column and then we're going to pass all of our unique columns and then we'll do the exact same thing for our y column so let's copy this and paste this down here and just change this to to Y and Y okay so now we're going to grab the X column and the Y column now I want to display a button and when we press the button I want to generate a line chart that uses the data from the X column and the Y column so I'm going to say if st. button this is as easy as it is to put a button here and we're going to say generate chart or generate plot now what this is is the name of the button and then if I press the button this is true and then will go inside of the if statement so again as soon as I press this then this logic will happen inside of the if statement so now I'm going to say st. line uncore chart and what I'm going to do is pass my filter data frame and I'm going to say do setor index I'm going to set the index as the X column and then I'm going to take the Y column values like that and that's really all we need to do to plot that okay now otherwise so just going to have an else statement here so if we've not actually uploaded a file then I'm just going to say waiting on file upload so I'm going to say st. WR and waiting on file upload dot dot dot okay so kind of basic here but I just want to show you a simple example so let's go back here and let's look at this and you can see now that we have if I refresh here uh waiting on file upload we can upload a file so let's upload the CSV file we get the data preview the data summary we have the ability to filter the data so I can go maybe by City And then select say New York and we can view all of the values that we have for New York then I can plot the data so I'm going to plot the date as the x axis and maybe the wind speed as the Y AIS and when I press this button we generate the plot there you go so you can see when the button was pressed we come in here this if statement now runs and is true and then we render whatever is inside of here so a really intuitive and easy way uh to actually kind of respond to different events and that's because once this changes we rerun the python script maintaining whatever the previous state was in this case it's pressed so then we execute this code so that pretty much wraps up the application here obviously there are a million other things you can do here using streamlet if you want to reference the documentation I'll leave a link to it in the description there's all kinds of widgets you can make like sliders you can have text inputs you can see that they have that right here and there's all kinds of advanced features you can have callbacks you can render specific data in different ways you can change the layout this isn't meant to be an indepth full tutorial but just an introduction to give you a sense of what you can create and to encourage you to go and explore this module so with that said I will lastly just mention that you can actually deploy this app very quickly which is another advantage of streamlet and this can work on mobile and desktop if you click the deploy button here from the UI you have the option to deploy this completely for free using the streamlink community Cloud so if you click on deploy now and go through the prompts here uh it's going to say it's not connected get GitHub blah blah blah there's a few things you need to do here in order to deploy this but you can connect it to GitHub and then it will automatically get deployed for you and then you'll have some URL that's public that anyone can access where you can view this application this is really good when you want to build a quick UI for interacting with AI apps or things like custom llms and that's why a lot of people have been using streamlet recently anyways if you guys enjoyed the video and you want more on streamlit make sure you leave a like And subscribe let me know in the comments down below and I will see you in the next video