foreign I'll be giving you an introduction to GitHub actions and teaching you how to automate workflows specifically I'll demonstrate how you can run automated tests on every single pull request how to add Branch protection and how to insert environment variables and environment secrets into your workflows I'll also be giving you some more tips and tricks related to GitHub actions now before we get into all of that I do need to mention that this video is sponsored by Microsoft I've teamed up with them for this video and to deliver a 45 minute webinar on May 9th as a part of the developer digital Meetup tour this webinar will go much more in depth on this topic and demonstrate automatic deployments it will of course include a live q a session and in general go through some more advanced developer workflows and share with you some best practices if you'd like to register for the webinar then please go to AKA dot Ms slash Tech with Tim or click the link in the description and with that said let's get into the video and learn about GitHub actions so as we dive in here let me just give you a quick primer on GitHub actions and explain to you some of the core functionality of it so essentially GitHub actions allows us to automatically run actions whenever some event occurs on a repository now typically this will be related to some kind of Branch so for example maybe we push some code to a branch maybe we have a pull request that we've created those are kind of the two main examples but there's all kinds of other triggers that you can set up where you can then run actions so typically you're going to be doing something like testing your code or deploying your code or building something but you can also run automatic scripts that maybe are going to compile some files for you that are going to move some code around maybe they clean up the code base or they close an issue you can do all kinds of advanced stuff here and this video is really just going to touch the surface of what's possible with GitHub actions so if I scroll down here you can see that you can run any workflow on any GitHub event you can share your workflows across different repositories and you can set up Enviro environment variables and just specific environments in general for all of your workflows to run so in this case you can see that we can create Matrix builds which means that we can run for example all of our tests on different operating systems and make sure that they work across kind of this entire stack or this entire um you know these entire environments sorry we can run any language we can choose the different type of containers and GitHub is actually going to automatically spin up what's known as Runners for us which are free up to a certain amount of minutes per month alternatively you can pay for like a premium GitHub account and get access to more minutes or you can set up your own Runners where you have your own external servers that are actually running all of this code there's all kinds of stuff here but what I usually use this for is automatically testing and making sure that I'm not going to put any code on my main branch or a production branch that is potentially broken or doesn't pass any tests so very great tool saves a ton of time and let me start showing you how to set it up all right so the first thing we're going to do here to set up GitHub actions is we are going to create a new GitHub repository I'm going to do this obviously from the GitHub website I'm just going to call this GitHub actions demo obviously you'd be doing this on a real repository but for this video and tutorial just do kind of a temporary one for now I'm not going to add a readme file I will not initialize the repository and that's because I already have some sample code that I'll share with you that we're going to use to kind of set this up so what we can do here is go through this where we're going to just essentially create our repository and then push it up here so I'm just going to copy this line because I actually have all the other ones memorized and I'm going to close this file go to vs code let me just quickly walk you through this project and then we're going to upload this to GitHub and I'll start explaining to you things like Branch protection and actually running GitHub workflows so here what I have is a very simple flask application this is simply a python web server if I go to main here you can see that I have just a very basic app where I am returning a backward string and then I have have a root here in flax flask sorry that's just going to access the environment variable mode I'm just doing this so I can demonstrate to you how you actually get access to environment variables from GitHub workflows anyways kind of a silly example but you see we have some flat screws here a basic flask website we're loading our stuff from our DOT EnV file and then if I go here I have a test file this is going to test the two routes that I have obviously we could have an npm project we could have anything that we want and what I'm going to show you here we'll kind of apply to all of those projects just with a few different changes continuing I have a git ignore file so I'm just ignoring my EnV file I have my readme in fact uh yeah I think that's fine I can leave that here for now and then I have requirements.txt just so I can use that to install all of the requirements for this project for python okay so this is not yet a git repository so what I'm going to do is type get a knit in my terminal to initialize this I'm going to run through the steps I'm going to type git add dot get commit hyphen M this can be our first commit I'm going to change the name of the master Branch to be main which is now what is on GitHub so I'm going to type git Branch hyphen M and then main that is just going to change the name of the master Branch to main okay I've done that now I'm going to add my remote so I'm going to say git remote add origin and then the URL to my GitHub repository and now that I've done that I can push my code to the main branch so I'm going to type git push origin and then main this should push everything up for me so now if we go to GitHub and we refresh you can see that we have our code okay perfect so now we have kind of our base code the next thing we need to do is actually create some workflows and ideally what we want to have happen is anytime we try to make a change to this repository we want to automatically run any of our tests so in this case I just have one single test but if I had multiple then I would set up the script to run all of my different tests and make sure that those are passing before I allow someone to merge their code into the main branch all right so how do we do this well the first thing that we need to do here is we need to go to GitHub and we need to set up some Branch protection rules now essentially what this is going to let us do is make it so that no one is able to push directly to this main or Master branch and instead they have to create a pull request if they want to contribute now this is typically good practice especially if you're working with multiple people you don't want to be able to accidentally push something to the main branch which is always supposed to be clean and fully functioning you want to First make sure you're passing all of the different tests and then if that's the case you usually want to have your pull request approved and then you're able to actually merge it in so any repository you've worked on that's some kind of public repository or has a bunch of people working on it you've probably seen there's Branch protection rules and all kinds of automatic tests and workflows that are going on and that uses GitHub actions at least typically it uses that okay so I'm going to go to settings here and I'm going to go to my branches now when I go to branches here you can see that I can add a branch protection rule so I'm going to do that now for the branch name pattern you can actually put a regular expression here that is going to match against any branch that you want in this case I'm just going to put main because I only want to run this on the main branch but if you wanted any branch that started with me and then you could do the regex for that okay continuing uh now I can go through kind of all these options there's a ton here but first yes I'm going to require a pull request before merging and I'm going to require approvals now in this case I'll just require one but you can require up to six approvals from contributors of the code base before you're actually allowed allowed to merge the sentence sorry so a few other options you guys can read through these in my case once a pull request is approved even if additional code is added to it I'm going to allow someone to merge that in okay next we have required status checks to pass before merging so status checks are going to be our automated workflows like automatically testing our code in this case yes I want those to pass before I allow someone to merge so I'm going to click this button now if we go here require branches to be up to date before merging this ensures pull requests targeting a matching branch have been tested with the latest code this setting will not take effect unless at least one status code or one status check is enabled yes I'm gonna check that button and don't worry about this for right now once we add our workflows then they will show up here okay continuing we have a few other options here I don't care about any of these and I want to make sure that I allow myself to bypass these settings because right now I'm just working as an individual so no one is going to be able to actually approve my pull request so I need to make sure I can kind of manually override that even though in a real production environment you would want someone to be approving your pull request before you merge it in okay we also have required deployments to succeed before merging we're not going to set up deployments here but if you check out that seminar with Microsoft that I'm doing on May 9th we're going to set up some automated deployments in that alright so now that we have selected these options anyone that tries to push to our main branch that is not administrator of this repository it's not going to allow them to do that because this branch is protected however if I were to try to do this since I do not have this setting checked here it will allow me to push because I am an administrator if I didn't want to allow that then I could check this box and then again it would allow me or it would not allow me sorry to bypass the above settings okay so now that we have done that we want to start writing a workflow and demonstrate what happens when we submit a pull request and try to kind of merge that onto the main branch all right so how do we create a workflow well to do that we're going to go to our code here first I'm just going to make sure I'm on the main branch so get checkout main okay very good and let's clear now to create a workflow what you're going to do is create a folder in the root of your GitHub project your repository called dot GitHub inside of the dot GitHub folder you're going to create another folder here and you're going to call that workflows now you also have like deployments and other types of actions that you can put here in this case we're just going with a workflow now the way you define a workflow is you put all of the syntax triggers command scripts you want to run inside of a yaml file so dot yml to do that we're going to create a new file here you can name this whatever you want but obviously you want to name it something that's meaningful in this case I'm going to call it flask test and then Dot yml okay now here is where I can start writing my workflow now before I do that there is a helpful extension here in vs code called GitHub actions so I've already typed that in and if I go here I can install that extension and it's going to give me a language server uh for GitHub actions and sorry just asked me to press allow here I'm going to select that so that I can kind of connect this to GitHub and this will actually let me view the status of any of my GitHub action runs so I'm going to allow vs code here okay let me open up this URL and let me just make sure all this is good I think we are good to go all right so now we have configured the GitHub actions extension and now that we have this as I was saying you're going to have some live autocomplete and you're going to be able to view the status of any of the workflows that have run based on set pull requests you submitted or something along those lines now that we have that let's go into our yaml file and start defining a workflow the first thing we're going to do is create a name so I'm going to call this flask app test and this is what you're going to see as kind of the description of the workflow when it's running next we need to Define what's known as a trigger and this is when this workflow runs so I'm going to type on and then I'm going to type pull underscore request and then make sure the indentation is here by the way it's important I'm going to type branches and then Dash and then Main so this is pretty obvious but what this is specifying is that I'm going to run the workflow that I Define below whenever a pull request is made on the main branch now of course you could also use push you could use a bunch of other triggers in fact let me bring up some of the triggers and show you a few examples all right so in front of me I've just brought up some documentation here I'll link this in the description that explains to you a few of the different triggers that you can use now there's more than a few in fact there's quite a lot if you look on the right hand side here you can see we have stuff like adding a branch protection rule check run create delete deployment Fork issues label Milestone project pull request pull request comment Etc so you can essentially run this on pretty well any kind of GitHub action that occurs and kind of go as custom as you want obviously I won't show you all these I'm just going to show you pull requests which is kind of the most common okay so let's go back here now that we understand a few of the triggers uh we have the trigger that we're going to run on the main branch next we need to find the jobs that we're going to be running so I'm going to type jobs here and here we can specify a bunch of different jobs but the job that we want to have in this case is going to be test okay now that we've specified that we're going to have a test job we need to specify where we are going to run this so what I mean by that is what operating system now as I said GitHub automatically has different Runners and these are going to be Mac windows and Linux operating systems and you can specify to run on multiple of them at the same time or you can just run on one in our case we'll just run on one so I'm going to type runs on colon and then this is going to be Ubuntu Dash latest of course you could look up the different versions that are available and run on any specific operating system that you want next we are going to specify a few defaults now you don't have to do this but I just want to show you so notice that all of my code is inside of this app folder at least the code that I want to run the test in in that case what I can do is Define the working directory that I want to use while I'm running my different scripts and that way it'll automatically kind of prepend that to my different paths so I'm going to type defaults run so now I'm specifying defaults for the Run command and then I'm going to type working like this and then Dash directory is equal to and I'm going to do dot slash app slash okay referencing this folder right here okay that's all I need for my defaults now that I have that the next thing that I can Define is the different versions that I want to use uh for example for running python code now you could do this with npm as well or really any type of code that you're running what you can specify is strategy okay if we spell strategy correctly then Matrix okay and then next we're gonna do python Dash version and what I can do is pass an array or a list here of the different python versions that I want to run this code on so in this case I just want to run this on python 3.8 but if I wanted to run on multiple python versions I could do something like 3.9 3.10 whatever the specific sub version is I can kind of select all of those and since we have Matrix here that means we're going to run the same test or the same script on every single one of these versions same thing here if I were to create a array and then specify the different operating systems I wanted to run on it would do the same okay so after strategy uh what we can do is we can use some environment variables so if we want to use an environment variable we can say EnV and then we can specify the value of an environment variable so I could do something say like mode and then I could make this equal to a string maybe like Dev alternatively we could use an encrypted environment variable which I'm going to show you in a second which is known as a GitHub secret for now we'll just put Dev here we can specify any other variables we want inside of EnV then they're going to be used throughout the steps that I Define next by the way Microsoft has really good documentation on how to write all of these different workflows you do not have to memorize what I'm doing here I just want to kind of explain to you line by line so that it makes a little bit more sense rather than just reading all of the code at once okay so next I'm gonna have steps now these are the steps that I want to use to actually run the workflow so this is kind of the configuration I've set everything up I'm defining the runner I'm defining uh the strategy you know what python versions that I want to run on and then I have my environment variables next is what do you actually want to do what do you want to test what do you want to deploy Etc so the first thing that we need to use and this is going to be on pretty much all of our deployments is uses and then we're going to type actions slash and then checkout at and then this is going to be V3 now this is kind of a premade script that's provided by GitHub that automatically sets up our running environment for us I won't go through exactly what this does but in pretty much all of your workflows you're going to use this it just sets up the environment automatically for you and fortunately for these workflows we have a ton of different scripts that we can kind of bring in that are prewritten for us and then we access similarly to this so we could use a GitHub URL to access them or we can do you kind of a certain string here like you would have an npm package for example okay so this is what we're saying we're saying we're going to use this so that's going to actually do something it's going to set up some stuff for us next we're going to specify the name and what we want to do is we want to set up python so we're describing this step now for this step we're going to say this uses actions slash setup Dash python at and then this time we're going to use version V4 okay now what this is gonna do as it kind of States here is set up python python for us on whatever environment that we're using on our Linux machine we do already have python installed but this is automatically going to install the correct python version for us and the way it's going to do that is by using python Dash version colon and then we are going to specify a variable here we do that with the dollar sign and then two sets of curly braces and we're going to type Matrix Dot and then python hyphen version okay so this is going to provide all of the different versions that we specify here in The Matrix whenever we're running the steps for every single one of the Python versions okay so that's it for that step next after we set up python python is all installed we need to install our python dependencies now at this point you would kind of change the script based on exactly what you're doing in my case I need to set up the dependencies and then run my test file for you you may have some additional steps as well so I'm going to type Dash name and then it's going to be install uh dependencies if we could spell this correctly okay let's go to our friend spell checker here and then we're gonna say that we want to run the following now this is where we can kind of write our own command so what I want to do is run two commands so I'm going to put this pipe operator here to specifying I can go down to the next line I'm going to type python hyphen M pip install dash dash upgrade and then pip it's a good idea to upgrade your pip before you run the PIP install command and then after that I'm going to type pip install hyphen R and then dot dot slash and then requirements Dot txt and the reason I'm doing dot dot slash is because my working directory is app so I need to get out of that to The Parent Directory where my requirements.txt file is okay now that I have that I'm gonna go to my next step so I have installed the dependencies I have kind of set up Python and now I need to actually test my app code so I'm going to say test app code and then what I'm going to run here is the script which is python dot slash main underscore test dot pi perfect so that's going to actually run my test and then if any of these tests fail you're going to see that the uh what do you call it workflow will fail and it will not allow me to actually merge my branch in if these all pass then assuming I have a review or an approval on my pull request I will be able to merge in my new branch okay so we'll just quickly recap this we have the name of our workflow we have what is actually happening so kind of the trigger here we have the different jobs in this case we want to run a test we can specify multiple jobs in this case we're just doing one we're specifying the operating system or environment we want to run on our default working directory then this is all the different python versions We could be using we could also have multiple things here like if we were setting up Python and mpm we could have multiple kind of arrays of versions here then we have an environment variable we're declaring which is mode later I'll show you how to actually use a secret which is encrypted and then we have the steps that are actually going to happen in our workflow okay so that's it make sure you put this in dot GitHub workflows and then the name of your workflow and if you had multiple workflows you would just create another yaml file here all right now that we've done that let's Commit This code so I'm going to say git add dot get commit hyphen M and I'm going to say create like this a workflow for now I'm going to push this directly to the main branch just so that it gets added then I'm going to create a pull request making a change and show you what happens when uh the workflow fails or passes Etc okay so we're going to type git push origin main again we typically won't be allowed to do this but since I'm an admin I can so I'm going to push this to the main branch okay very good and now if I go and have a look at my GitHub repository here I'm going to refresh you can see that we've created the workflow we have GitHub workflows and then we have our yaml file here okay now we actually want to see these actions running so how do we do that well we need to create a pull request because that's what the trigger is so I'm going to go get and in this case I'm going to actually pull so get pull origin main just to make sure I'm up to date okay then I'm going to type git checkout hyphen B and I'm going to go with let's just call this change okay let's clear let's go and make a change to main.pi so maybe I'll just remove that comment which shouldn't have actually been there okay so that's a change type git add dot get commit hyphen m remove comment and then I'm going to type git push origin change okay now we're pushing to GitHub we'll go back here and we'll create a pull request so let's do this remove comment looks good to me and now if we just wait a second it should automatically run this workflow on our Branch so let's give it a second here and refresh and notice that it started running this workflow so let me go details here and we can kind of watch the status of this once the runner is set up which is automatically going to happen for us from GitHub so it runs the checkout action which sets up our environment now we're installing the dependencies this was a very fast test so we passed it and now we would be able to actually uh create our or actually merge our pull requested now if you go here test app code you can see the output we passed both of our tests pretty well instantly because they're very fast and then if we go back here to our pull requests we get our little check mark and we would be good to submit this awesome now what we could do here is we could review our GitHub actions by using the GitHub action extension notice that we have a test that was ran I can view the test and then just like I was able to do on GitHub I can view all of that directly from vs code here and see all of the logs kind of a helpful extension to look at we also could manually trigger workflows I'm not going to show you that right now but you could do that from this extension okay now let's see what happens if we fail the test so let's kind of just make something where we raise an exception so let's just say raise exception like this okay now type get add dot get commit hyphen m ale and then git push origin change okay now when we go back here it should run the workflow again I think that's how we set it up in our settings okay so let's give it a second it's going to run again okay so the test is finished you can see that we failed uh this test right here it says an exception occurred tells us where it failed just like it would normally in any python unit test and then we would have to fix this resubmit and then we would be able to actually merge this in okay so I'm actually going to close this pull request because I don't really need this uh so I'm just going to go here and go close pull request okay now we can go back get checkout Main and I'm going to show you how we can use a GitHub secret so oftentimes when you are running these kind of deployments especially if you're testing on some kind of server you have a more complex setup you're going to have stuff like API keys or other secrets that you need access to now you don't want to pluck them for example in a DOT EnV file because if you do that then you're going to need to actually submit that EnV file to GitHub and then you'd be exposing that data so it can be a little bit tricky to figure out okay how do I get an API key or other sensitive data as a part of my workflow well the main way to do that is to use something known as GitHub secrets so what I showed you in the workflow by the way here it's just a standard environment variable like anyone can read this anyone can view what it is so you don't want to use that instead what you want to use what's known as an encrypted secret which you can get access to by going to settings on your repository let me make this full screen so I'm going to go here and I'm going to go to environments and the first first thing I need to do is set up an environment that I'm going to use for my workflows so I'm going to go new environment for now I can just call this Dev and inside of here what I can do is add a secret I can also add protection rules but we don't need to do that right now so I'm going to go add secret and this is just like an environment variable except it's going to be encrypted by GitHub and only visible by the administrators of the repository so in this case one of my secrets would be mode this is one of the environment variables we're using here in our code and then the value could be something like def although typically here you would put some kind of sensitive data like an API key or a password or something along those lines and then you can see here that it's locked you can edit it and view it as the administrator but no one else will be able to do that okay so now that we've created this what's going to happen is every time we run our workflow this is automatically going to be kind of applied and sent into the workflow so we'll have access to it and now I just need to show you how we actually use it well to use it we have to modify our workflow so what I can do here is go to envy and now rather than setting the environment variable mode equal to Dev I'm going to set it equal to my GitHub secret now I can't just use the GitHub secret normally so for example if I remove this I'm not going to be able to access the GitHub Secret in my python file as an environment variable instead I have to declare the environment variable name again and then make it equal to the secret value the way you do this though is dollar sign two braces then you're gonna type Secrets Dot and then the name of the secret in this case it's simply mode so that's going to access the GitHub secret mode for you and just one thing to note here if you try to say log the secret or view it uh GitHub is actually automatically going to redact that data for you so you're not going to be able to view the value of this Secret in any kind of logs which is the idea you don't want to expose this you want to keep it well Secret okay so I've modified this workflow now I'm just going to push directly to main so I'm going to type git add dot get commit hyphen M add EnV bar okay get push origin Main all right so that should now change uh the main branch now what I'm going to do is type git checkout hyphen B uh and we will just call this test all right and now what we can do is we can go to Main and I guess we can just make some change here so just go comment okay get add dot get commit hyphen m make change I'm just doing this so we can make a pull request and make sure this works apologize for the cut there I just had my cat running all over my keyboard so I had to deal with that quickly anyways now I'm gonna push to my test Branch so git push origin test okay and now if we go to GitHub and we refresh uh oops I was on the wrong Branch there let's just go back we should see that we can make a pull request so let's go ahead and do that and add our comments okay and we just have one file changed and now we'll just make sure that this workflow runs just to kind of prove that we can actually access that secret okay looks like everything is all good and now we would be able to merge this pull request in using that secret value so with that said I think I'm going to wrap up the video here hopefully this gave you a good introduction to using GitHub actions and showed you some of the core functionality of course there's all kinds of documentation like what I have in front of me here that shows you all kinds of stuff that you can do in terms of creating different jobs workflows triggers Etc this can get fairly complicated and it would take many hours for me to cover this in a single video however if you want to learn more then make sure you check out the webinar that I'm doing with Microsoft on May 9th where we'll be talking about automatic deployments and going through some more advanced topics related to GitHub actions now in the meantime I'll leave some links to documentation in the description in case you want to learn more and keep in mind that if you're doing a fairly common task like testing or deploying there's probably already a workflow out there written for you that you can copy modify slightly and then use in your own environment with that said I hope you enjoyed the the video I look forward to seeing you in another one