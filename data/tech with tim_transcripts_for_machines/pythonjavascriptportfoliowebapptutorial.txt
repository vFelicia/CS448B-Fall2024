in this video you'll learn how to build an entire portfolio website using D Jango and python I'll walk you through everything step by step and by the end of the video you'll have a great project that you can extend and build into something really unique now we'll combine this project with a little bit of JavaScript and CSS and we'll use some more advanced Jango features to show you how to connect to a database and how you can programmatically add different projects this is a great starting project if you need a portfolio website and something you can definitely consider adding on your resume if you extend it and make it that much better with that said let me give you a quick overview of the project and you can see what it actually looks like and what you'll be building so I have the project in front of me and I'll quickly walk you through it this is a portfolio website that demonstrates a few different projects that you built obviously you can make it look better but the idea is to give you the base and do all of the heavy lifting and then allow you to style it and make it unique so you can see that we have some different projects I can click into AI Place Flappy Bird for example I can see a description a link to the GitHub and then some different images for the project maybe I want to go and view my multiplayer Pictionary same thing I can view some different images of what it looks like and then go back home now another thing that we've added is some filtering so if I click on JavaScript for example it will filter all of the projects that have a JavaScript tag we can go back to Python and you get the idea we can view these filtered projects we can also search for a project so something like Ai and then we see that AI plays Flappy Bird pops up so I know this looks pretty simple but I promise you this is a great project and it's going to teach you a ton about D Jango and python now building a portfolio website is great and all but it only means something if people can actually see it that means that you need to deploy the site and that's actually a great skill that you can demonstrate on your resume and in an interview now one of the best ways to deploy this site is actually by using the sponsor of this video hostinger now hostinger is a super easy to use web hosting platform that offers a ton of different options for any use case now for this type of website we're going to be looking at their virtual private server plans which give you complete control over the server they let you log in with root access and you can do all of the advanced configurations you need for deploying a site like this so if we scroll down you can see that they have really affordable options here and what I'd recommend is checking out their KVM 2 so what I'll do now is Select this plan and just walk you through quickly how you could actually go about hosting this site using hostinger so our first step here is to select our period create or sign into an account and then choose one of the various payment methods and make sure we click on have a coupon code and enter my exclusive code Tech with Tim now once we've done that we'll be brought to a page where we can set up our virtual private server so the first step is to select our location and you can just pick whatever is closest to you for the lowest latency so now we can choose our operating system where we have a lot of different options but what we can actually do is use a template here from hostinger if we go to Applications and we simply search for D Jango you can see that they have a template that will already set everything up for us and now we need to set a strong root password so that we're able to actually sign into our VPS and do the configuration later on so now that our VPS has been set up we can view all of the different details and configuration options from this dashboard right here but the next step is to actually SSH into the VPS and start configuring it for deploying our D Jango site now there's quite a few steps here and I can't show you in just a few minutes so what I'll do is I'll leave a link to a video in the description that will walk you through continuing this deployment regardless you'll need a VPS to do this so first check out hostinger from the link in the description make sure you use my special discount code and once you have the VPS then you're ready to deploy this so people can actually see your portfolio website so let's go ahead and get started here now as a reminder we're going to be using D Jango for this project so the first thing we need to do is install D Jango we also need to install another package that we need then we'll create the D Jango project set up our D Jango application I'll walk you through it step by step so what I've done here is open up visual studio code and I've just opened up a new folder you can do this in any editor that you want but if you want follow along exactly with this video just open up vs code and open some folder in this case I have my Jango portfolio spelled incorrectly opened anyways that's fine so what I'm going to do here is I'm going to start by installing D Jango now to do that I'm going to type pip 3 install and then D Jango now if you're on Windows you can change this to be pip and this should install the D Jango framework for you now if you want you can create a virtual environment to install this inside of but it's not necessary for this video now after we install Jango we need to install pillow so this is with a capital P and this is because we'll be displaying some images for our projects and D Jango needs pillow in order to display those images so pip 3 install pillow you can see I already have this installed in my python installation now for some reason these commands didn't work for you I'll leave two videos on screen that show you how to fix them okay so now that we have pillow and Jango installed it's time to create a new D Jango project now to do that we can type D Jango admin and then we're going to type start project and then we're going to give this a name now I'm just going to call this portfolio and I'm going to spell it correctly this time and when I do that you should see that we get a portfolio directory created inside of the folder that we're in now for some reason that didn't work for you what you can do is type Python 3m and then Django admin start project portfolio if that doesn't work you can try python hyphen M Django admin start project portfolio and one of those commands should work otherwise leave a comment and I'll try my best to help you out okay so now we have a Jango project and if we look here we'll see that we have a bunch of files already created so we have manage.py we have a portfolio directory we have an init URLs Etc now what we need to do is CD into this directory so we're going to say CD and then we call this portfolio so we're going to do portfolio here and now we're inside of this folder that we just created so now what we need to do is make a new app inside of our D Jango project now the way this works is that we have this kind of starter project right here and this contains the global settings the global files and then we create individual applications where we can separate out different pieces of logic now in our case we only need one application because this is a pretty small project but in larger Django projects you might have an app for authentication an app for projects an app for your career whatever like you can separate the logic out into different applications and those applications are kind of selfmaintained and you can typically bring them into other D Jango projects anyways what we're going to do here is type D Jango or actually sorry we're going to type Python 3 manage.py and then start app and then we're going to give this app a name now in my case I'm just going to call this main because it will be the main application now if you're on windows again you can just change this to python you'll notice the main difference here is from Mac to Windows or Linux to Windows you have Python 3 in mac and Linux and you have python on windows so when I do this we'll see that a new folder gets created called Main and it has some files in here for us so you can see it's just kind of templating it out and building out all the different things that we need from here I can clear this and I can close the terminal and now we can actually start writing some code and setting up our D Jango project so now that we've created this main application the next thing we need to do is go and Link it to our Jango project so we're going to go into the portfolio directory we're going to go into our settings.py and we're going to make our write a few settings here uh that we need for our project so the first thing I'm going to do is is I'm going to import OS which stands for operating system we're going to use this in 1 second and let's just close this terminal and we're going to scroll down to where it says installed apps now notice we just created an App so what we need to do is actually add the name of this application into installed apps so that we link it to the Jango project so to do that we simply create a new entry here in this list called main because that's the name of the app that we created if you named the app something else then you would change this name okay now we're going to scroll all all the way down to the bottom of settings and just because we're here we're going to write some settings that we'll need uh later in this video now what we're going to be doing is uploading some images and these images will be for our projects now we need a place to store those images on the kind of Jango server so to do that we're going to define the following in all capitals we're going to say mediacore URL and notice I'm doing this at the very end of the file is equal to and then this is going to be slash media this time lower case and then slash now this is a directory where we're going to store all of the different media files in this case we're going to store it on our local computer because that's where we're running the Jango application but if we were running this Jango app on some kind of server and it was deployed it would store in this media location we're then going to say the mediacore root this is where the media folder is actually stored is going to be equal to os. path. jooy sorry for the autocomplete there blocking us and we're going to use the the base directory which is already defined we don't need to Define this it already exists inside of this file and then we're simply going to say media like that so this is the URL so this is where we should go to access the media files and this is the actual location of it uh on our Jango server okay so now that we have the media URL and the media rout and we've added our application here into our installed apps we are done with settings.py now what we can do is go inside of main now I want to quickly walk you through what we actually need to do here what we're going to do is we're going to create some database entries or database models for storing our different projects the idea here is rather than hardcoding the projects in what we'll do is we'll create a database field or a database kind of model and we'll allow ourselves to dynamically add projects or to edit them or modify them later on this way this can be kind of a living website and as you create new projects you can update the site by adding new projects to the database now in order to do that we need to create some models now in Jango I'm going to go in this models.py file by the way we use something called an OM now in orm is an object relational mapping now what this means is that rather than writing all of this custom SQL code or database logic we simply write some python code and then Jango will map that python code to the appropriate database operation so what you're going to see here is we're going to Define in Python what we want the data that we're going to store for our projects to look like and then python will will automatically handle adding that to the database getting it from the database updating it doing all of that tough stuff that we don't want to deal with so what we're going to start by doing is going into models St high and we're going to define a class which is known as a Jango model so I'm going to say class and then I'm going to call this project now we're going to have a few different models here but the first model is going to represent a coding project right so what we're going to do is we're going to say that this is models. model so we're inheriting from that base model and then inside of here we're going to Define all of the fields that we want to have for a project now the first field that we want to have is a title so we're going to say title is equal to models. the character field and then we're going to give this a max length of 200 characters the next field that we want to have is a description now the description is going to be models. text field and this is not going to have any maximum length we'll just write it like this next we're going to have some tags now we'll write this more in a second but for now we're going to say this is models. many to many field and we're just we'll fill this in for now we're going to say tag and then related uncore name is equal to projects I know that we haven't yet defined this tag model we're going to do that in one sec but the idea is for each of our projects we'll have some tags so something like python JavaScript CSS a game a web app and we'll be able to identify our projects based on their tags so we can kind of filter by those tags now a tag will be a different model that we're going to create in a second and we'll make an association or a relationship between the project and between the tag again let's wait a second and we'll look at that next we're going to have a link the link is where we have the GitHub or maybe the live project running so we'll say this is going to be models. URL field because this will be a link and we're going to say the maxcore length will be equal to 200 and we'll say blank equals true which means it's okay if we don't have a link for the project lastly we're going to implement a string method and this is what will happen or this is what we'll show when we print out this model it's going to take in self and we're going to return the self. tile of the project you don't need to write this but it's good practice okay so now that we have the project model written we're going to write the tag model so let's do that and then I can explain better what this line is doing so we're going to say class tag and then inside here this is going to be models. model and then for our tag we're simply going to have a name and this will be the models I think I spelled that correctly do charfield and this will be maximum length of 100 and we'll say unique equals true now when we pass that key it means we can only have unique names so we can't have duplicated tags which is exactly what we want we're then going to have a string again and inside here we're just going to return self. name of the tag okay now we need to make sure that we Define the the tag above our project so let's just copy that and paste so that when we try to reference the tag here it's already been defined okay so let's talk about this many to many field now whenever we create different database models we have the ability to relate them together so in this case we have a project and this project will be related to some kind of tags now the way that we do these relationships or there's kind of three different types of relationships we can have a onetoone relationship so one project is associated with one typ tag we could have a one to many relationship where one project is associated with many tags or we can have a many to many relationship where many projects can be associated with many tags now in this case that's the most appropriate type of relationship which is why we write it this way many to many meaning this tag can exist on many different projects and this project can have many different tags now what we do is we specify the model that we want the relationship to be with and then we have a related name now the related name is the field name on this tag that will contain all of the projects so effectively what's going to happen is for each of our projects we're going to have a linkage to the tag and for each of our tags we're going to have a link to all of the different projects that that tag exists on that's kind of how many to many Field Works uh there's other types of relationships as well and in fact we're going to look at one in just a second okay so hopefully that's clear but that's how we relate these fields together and this allows us to create as many tags as we want that are unique and then associate them with as many projects as we want okay now lastly we need an image so we're going to say Project image and this is going to be models. model and then we're going to specify the project that this image exists for so this is going to be a models. 4 in key and we're going to say that we have a project we have the related name equal to images and then we're going to say onore delete I'm going to explain all of this in one second don't worry we're going to have models. Cascade and then let me save that just so that we get some formatting next we're going to have image is equal to the models. image field now for this we're going to say upload2 and then we're going to give this a directory name so I'm going to call this project images and then slash and then lastly I'm going to say Define uncore uncore string self and then return and we're going to return an F string here and we're going to embed the self. project. tile and then image okay so let's quickly talk about what we just did here the idea is that for each project we're going to have multiple different images now if we just had one image I could have just taken this field and uploaded it or put it right on my project but since we can have multiple images or no images we don't know how many we're going to have we need to make a new model that will store images for our individual project that way we can have multiple of them linked to the project now the first thing we need to do for each of our images is we need to understand what project they're associated with now unlike our tags one project image won't exist for multiple different projects it's just one project image exists for one project right so this project can have multiple images but this image can only be associated with one project so in that case we use the foreign key now what this means is that we always have a single project for our individual images now I know I've repeated that like five times but I'm just trying to be specific here and what we do is we specify that we're going to have a forign key with the project model and then the related name is the field that will exist on this project that stores all of the different images so on my project I'll be able to access images and it will give me all of these different image models now what on delete specifies that if this project that we're linked to were to be deleted we should delete all of the images that's what the Cascade means okay which means delete all of the different images that are associated with the project if that project is to be deleted there's some other options here as well but this is the one that we're going to use lastly we have the image field and this is just specifying where we actually want to store the images within our media directory then we have the string and we're good to go okay so those are all of our models now the next thing that I want to do is I just want to create a directory inside of my portfolio directory so this main one here called media now the reason we need that is because we specified that inside of settings.py as where we're going to store the images so we need to make sure that directory actually exists then inside of media will have a project images directory that will be created when we start uploading images okay so we're going to run the code shortly but the next thing we need to do is make it so that these different models appear in what's known as the admin page now the admin page or the admin portal is something that's provided by D Jango to allow us to automatically manage our different models so we can go in there and we can create different tags we can create different projects Etc the thing is though we do need to manually add these different models to the admin page that we can see them there so how do we do that well we're going to go back inside of Main and we're going to go to admin.py now notice it says that we need to register our models here so what we're going to do is import our models from the models file that we just created so we're going to say from Models import and then we're going to import the tag the project and the project image and we're going to register them now we can just register them like this by default but since we have um some more complex models here we have some links between tags projects Etc let me zoom in here what we're going to do is we're going to write a kind of custom registration now what the custom registration means is that we can specify the different fields that we want to have and how we want to view these different projects so let's start by doing the project uh what do you call it kind of admin view sorry just stumbling here all right class project admin and then we're going to say this is admin. model admin and inside of here we're going to specify a few different fields and these fields again will customize how this looks inside of the admin uh kind of panel so we're going to say listor display is equal to and then notice that this is a tuple here so we're using uh normal parenthesis and then we're going to do title and then link now what this means is that when we're viewing a list of all of the different projects it's going to show us in that list the title and the link for that project we could change the fields that we want but this is what it's going to display next we're going to say inlines is equal to a list we're going to Define that in just one second and then we're going to say search fields are equal to and again in a tupple we're going to do the title and then this time we're going to do the description now this is specifying how we're able to actually search for this project so we can search based on the title or we can search based on the description because there is like a search box in the admin panel and we specify What fields we're going to be searching on lastly we're going to have list filter and this is going to be equal to and then we're going to do tags and then make sure you have this trailing comma the reason you need the trailing comma is because if you just put parentheses like here you'll see when I save they go away so I need this comma to make sure that this is treated it as a tupple because that's the object type that is expected here okay now the list filter this is how we can actually filter different objects so we can filter them based on tags so yes we can search by the title or the description but in this case it will show us all of the tags and allow us to click a tag and any project that contains that tag it will show us so just a nice way for us to be able to filter this okay then we have in lines now what I'm going to do is to find something that will be displayed in line and the reason why we need this is because we're going to have other models that are associated with this project and we want to edit them at the same time rather than editing them separ separately so you'll see what I mean in a second but I'm going to say class and then this is going to be Project image in line and then this is going to be admin. tabular inline and then we're going to say the model is equal to the Project image and we're going to say extra is equal to one now extra equal to one just specifies how many of these we're going to be displaying in line in this case we're going to display one which means by default we're asking the user to upload one image but we could be asking them to upload say four images or five images if we specified it like that okay now inside of inlines we're going to say Project image in line and again what this is going to do for us is it's now going to display this that we've just defined which is really A View to be able to upload an image while we are creating these different projects okay lastly we're going to Define our tag admin and this is going to be admin. model ad admin this one will be a little bit easier we're going to say list display and this is going to be equal to Simply name and then we're going to have our search uncore fields and this will just be equal to name again remember that trailing comma so just how we list it and how we search for it and now that we've created these what we can do is we can register them so to register them here what we're going to do is admin. site. register we're going to start with the tag and then the tag admin so what we're saying is hey for this tag model we want to use this tag admin class as its customization we're then going to say admin. site. register and we're going to register the project and the project admin as its customization and then lastly we're just going to register the Project image so we're going to say admin. site. register and then this one is going to be the Project image and this time we don't need any customization the inline was used to be displayed inside of the project admin but for the Project image itself we don't have any customized class we'll just render this okay we are almost done now what we need to do is start actually running the server we need to make some migrations which I'll talk about in a second and then we can sign into the admin panel and we can see what we actually just coded out so let's go up to our terminal here and what we're going to do is start by applying some migrations now whenever we make changes to our different models what we need to do is we need to make migrations and then we need to apply them now making migrations will create some files inside of D jeno in this migrations directory which you can see here which will specify the changes that need to be applied to the underlying database in order for the changes that we made to actually be applied once that file is created then we need to apply those migrations by running the secondary command so pretty much whenever you make any changes you're going to run both of these commands in sequence if you are affecting your models okay so we're going to type Python 3 manage.py and then make migrations now you're going to see when I do this that it will specify that we've created the following migrations making a new model project tag and Project image now we're going to say migrate okay so you'll notice when I do that that inside of migrations we get those migrations files and now when I click on Migrate what will happen is it will actually apply these different migrations and up the database and you'll see now that we have a db. sqlite3 database that's been created and now it has the provision for those different tables or for those models that we've made okay now what we need to do is create something known as a super user a super user is something that can sign into the admin portal and actually modify these different um what do you call it models that we've created or add new projects for example so to do that we're going to type Python 3 manage.py and then this is going to be create super user uh it's either make super user or create super user I think it's create super user and then we can give this a name I'll just go with Tim and okay never mind let's just run it without a name and you can see okay leave it blank if you want to be Tim Rea I'll just call this Tim you don't need an email address but you do need a password okay so type in some username and some password it's then going to create a super user for you once you've created the super user now we can run the server and sign in to the admin portal so to do that we're going to type Python 3 manage.py run server this will now run the server for us and you'll see that it shows us the URL that it's running on 127.0.0.1 Port 8000 what you can do is hit control on your keyboard and then click on this link you'll see it's underlining when I do that and then it will open this up in a new browser okay so you see it's going to open this up for me and it says the install Works successfully okay no problem uh and now we're going to do is go to the slash admin page perfect so when I do that you see that it brings me here again when you're on this page you're going to go slash admin and now we can sign in with the super user that we just created this is all built by jeno we didn't code any of this we've just added our models to this page okay so I just logged in here and you can see now that we can first manage groups and users we don't need to worry about that at least for this project and then we have project images projects and tags so what we can do is start creating a new project to do that I can go to add and you'll see here that I have all of the different things that I specified so my title description tags link and then the ability to upload an image so let's go ahead and make a sample project just to test this out for me I'm going to say python platformer I'll say this is a python platformer game made in Python with pame exclamation point for the tags if you click on this plus button you can make some new ones so I'm just going to make some new tags I'll say that we have python maybe we have game maybe we have CSS react I'm just making a bunch of random tags you can make whatever ones you want let's have JavaScript obviously ones that are going to be relevant to your projects and then what we need to do is actually select the tags so you can just click on one and it'll be selected but if you want to select multiple then you can hit control or command on your keyboard and select multiple of them so I'm going to do Python and then I'm going to hit on game and you'll see now that two of two of them are selected for the link we could put that in uh actually let's see which one might be here already python platformer okay perfect it already has that for me and then we can upload an image so let me actually go ahead and do that I have one on my desktop and now we can go on click on Save okay so now I've saved it and notice that in my list view here I have my title and I have my link for the project and I could actually filter it by the different tags which is what it's showing me right here and then I could search for a project if I wanted to do that okay so I think that's good for now we've made one project obviously we want to make multiple of them but for now we're just testing out to make sure the site is working now what we want to do is start creating some views so we can actually view these projects on the website and have a nice looking portfolio website so let me get out of that and let's turn off our server for now by just hitting control C on our keyboard and then clearing Okay so we've made the models we have cre cre a new project from the admin dashboard now what we need to do is actually display all of this information on the site now in order to do that there's a few setup steps so the first thing that we're going to do here is we're going to go inside of Main and we're going to make some new folders we're going to create a templates directory and we're going to create another new directory here called Static okay both of these are inside of the main directory now inside of templates this is where we're going to place HTML templates that we can pass data to from from uh dangoor and render kind of dynamic information now this will be kind of where we write all of our HTML and then inside of the static directory is where we're going to have our CSS and our JavaScript so inside of static I'm going to make a new directory called CSS and I'm going to make another new directory called JS and this is where we'll organize our JavaScript code and our CSS code the reason why we put this inside of static is because these are files that don't typically change and what will happen is will render them statically which is different than how we render the HTML you can look that up if you want some more information but for CSS JavaScript and images things that aren't frequently changing on your website you typically have them in some kind of static directory and they're loaded a bit differently than how we would load an HTML file okay now last thing we need to do we're going to make a new file inside of main called urls.py okay and this is where we're going to place some URLs um to kind of Link the different views that we create and inside of here we're going to say URL patterns is equal to an empty list we're going to write in that later but for now we'll just put it there so we don't get any errors okay so what did we just do we created the templates directory the static directory with CSS and JS and then we created the URL stop Pi file with URL patterns with an empty list make sure you've done that now main is set up and what we can start doing is actually rendering some content into our views so what we're going to do now is go to views .p now in Jango when we actually want to display a page we need to create something known as a view now a view is a function that will be called when we go to a specific rout a root is something like slash or slome or slash project with id1 we need to write all of those programmatically so what we're going to do here is we're going to start by importing our models so we're going to say from Models import the project and import the tag and then from render we're also going to import get object or 404 and I did not mean to do that this is what we wanted right here okay I'm going to remove this comment and I'm going to start writing a few different views so the first view we're going to write is the home view now inside of home we're going to take in the request which is what we always take in and we're going to say return render and we're going to render the request and then the home.html template that's it uh that's it for right now sorry what this is going to do is look inside of this templates directory for an HTML file called home.html it's then going to render that template for us which means it's just going to show the HTML on the screen let's define a few other views that we need we're going to have a contact view so this is going to say request and then same thing we're going to return a render of the request and then this is going to be the contact. HTML we're then going to say Define project and then this is going to take in a request and it's also going to take in an ID because we need to know the ID of the project we want to want to render sorry and then we're going to return a render and this case it's going to be request and then project. HTML okay so there's some more things that we need to write here but for now I just want to kind of stub the three different views that we need now what we're going to do is create some HTML templates that will represent these three different pages so it's very important that you put these inside of the templates directory inside of the main directory if you don't do that you're not going to be able to render this code so inside of templates we're going to make some files the first file is going to be base. HTML we're then going to have home.html we're then going to have contact. HTML and then lastly we are going to have project. HTML feel free to pause the video to create all of these different files okay now that we've created these different files we're going to go inside of base. HT ML and I'm going to start talking to you about something known as the Jinga templating engine now Jinga is what's known as a templating engine and what this allows us to do is dynamically render python like code inside of our HTML file so rather than having to write a ton of different JavaScript although we will write a little bit in just a second we're able to actually take variables in Python and display them inside of the HTML now what we can also do is we can create something known as a base template that can contain something like the main styling like the navbar components that are going to exist on all of our different pages and then we can render content inside of that template so we can have all these different HTML files that just have slight modifications to the base template you'll see what I mean in just a second but for now let's write this out now keep in mind all of this code is going to be available on GitHub some people do get lost because there is a lot of HTML that we're going to be writing here so for some reason this is not working for you I'm going too fast you're finding it overwhelming feel free just to go to the GitHub link below go right to this file and then just copy all of the code or at least view it side by side if you do want to write it out line by line okay so don't get too overwhelmed you can always find this from the link in the description so what I'm going to do now is type HTML colon 5 now if you have the HTML extension installed in vs code which I do recommend that you get you'll see that it will actually be able to generate a kind of boilerplate HTML document for us so when I hit enter here you'll see that it just creates this for me and now we can start filling in some of this content okay so we have our head we have our body we have our HTML and then we have a title now the first thing that I'm going to do here is create a new block so let's look at how we do this we're going to use our brace here and then we're going to have a percent sign a percent sign and then a closing brace inside of here we're going to call this block and then title and then I'm going to put the name here which is going to say port folio and then home and then I'm going to put a percent percent and then end block now a block is a piece of content that can be overridden from a child template so this is going to act as our base template we're never going to render this page but what we'll do is inherit it from other templates Like Home Project and contact and then these blocks that we've specified here we can override what exists inside of them so from contact home projects Etc we can override the temp template or sorry the title block and we can change what the title of the website will be okay that's the idea next we're going to specify a link and this link is going to be real equal to stylesheet and we're going to say href is equal to and then this is going to be percent percent and then static and then this is going to be inside of single brackets CSS sb. CSS okay so let's just quickly talk about this first of all notice we used double quotation marks here okay very important then what we do is we use this um kind of variable syntax so we have the brace the percent sign and then we say static now when I say static what that means is that I want to look inside of the static directory which is what we have to find and then inside of there I'm looking for the path CSS base. CSS notice that this is inside of single quotes and the reason it's in single quotes is because we use double quotes outside so if we put double quotes here we're going to get actually a linting error or not a linting error but it just it'll be an error when we try to execute this code so we need to use single quotes instead okay so what this is doing is loading the base. CSS stylesheet which I'm going to create now so what we're going to do is go into static CSS and then we're going to make a base. CSS okay this is where we can put any CSS that we want to apply to this page right here which is our base template okay now one more thing whenever you use the this static keyword here and you're loading from the static directory you need to first load the static directory now to do that you're going to go to the very top of your file and you're going to write the following percent percent and then load static okay what that will do is load the contents of the static directory so you're able to actually reference it here and view this base. CSS file okay now next thing we're going to do here is we're going to say percent percent block and then extra head and then we're going to say percent percent block or sorry end block like that and then extra head now I don't know actually if we need to specify that uh or not yes I think we do and then sorry up here where I have n block we're just going to say n block title because if you have multiple blocks you need to write them by name so we have block title and then end block title and then we have block extra head and then end block extra head now the reason I'm specifying a block here is that we may want to add extra stylesheets from our uh base or sorry child templates so we can do that by inheriting and overriding this block so we're just kind of specifying it here so that we're able to inject things into the head from contact home and project okay now we're going to go inside of our body now for body we're going to define a main component and inside of main we're just going to put a block we're going to say block content and then we're going to say percent per and then end block content this is where we're going to be able to put the main content this is where we'll render most of the code or most of the HTML from the child templates then what we're going to do is have another block down here and we're going to say block and this is going to be extraor JavaScript and then we're going to say percent percent and then end block extraor JS this is so we're able to actually throw some JavaScript into our code from our child templates cuz we want to put that at the very end of the body so we're making a special block for that last thing we want to do is we want to create create a header component here and the header is just going to act as a Navar that will exist on all of our different pages inside of the header we're going to put a ul and then we're going to say to end the UR UL sorry this is going to have a class equal to the navigation menu and then we're going to have an Li component or Li element let's make sure we end that properly and this is going to be a link and we're going to say this is href to slome and then we're going to call this home and we're going to say SL a like that and then we're going to copy this and paste it and rather than home we're going to go to contact and we're going to change that to say contact okay so now what we've done is we've created a basic navigation bar right where we have a nav menu and we have two elements home and contact that are links that we can click on and we have this base template that we'll use to kind of show the same content of the same overall styling for our entire website now what we need to do is actually override or implement this template in order to do that we're going to go to home.html now from home.html the first thing that we need to write is what template we're extending from or inheriting from so we're going to say that this extends and then we're going to say base. HTML then similar to before we're going to load static because we're going to need that here and what we can start doing is overriding our different blocks so now rather than writing and what happened here let's fix that so now rather than writing all this HTML again and copying all of it over here what we can do is just override the different blocks that we have so I can take my block content for example and I can paste that here and I can now write something like a paragraph tag and say this is the home page okay and now what I'm doing is I'm essentially injecting this HTML into this part of my template now we can do the same thing for our title so let's just copy that and change this to say block title and then title and we can just call this homepage or something and then if there's any other blocks that we wanted to inherit we could do that in this case I'm just going to leave it like this because I want to show you this actually working okay so now that we have the templates written or at least most of them we have the base template kind of finished and we have our views hooked up to actually render these different templates the last thing we need need to do is write our different URLs so we have the views we know what to render but we don't know how to actually get there so what we're going to do is write what's known as our URL patterns so I'm going to go to urls.py and we're going to start doing that so up here I'm going to say from Jango do URLs and we're going to import path and then we're going to say from dot import and then views and actually now that I look at it I don't even think we need this variable here but we do need to spell views correctly okay so from URL patterns or sorry we do need paths I'm being stupid okay paths and views from URL patterns we're going to write our different URL paths so the first path we're going to have is just the empty path meaning if you just go to slash it's going to go here and what we're going to do is render views. home and then we're going to give this a name we're going to say name is equal to home then we're going to have another path and we're going to say okay if you go to slome or sorry home slash important that you have the slash in the correct order here then we're going to render views. home same thing this will be name home the reason why I'm doing this twice is that if we go to nothing I want to go to the homepage but if we go to home I also want to go to the homepage so I'm just having multiple different paths that go to the same view then we're going to have another path and this is going to be contact slash and this is going to be views. contact and then name equal to contact okay then we're going to have another path and this is going to be project but this time when I go to a project I need to actually know the ID of the project that I want to view because this will view an individual project for me so to do that I'm going to embed what's known as a path variable the path variable looks like this you specify the type then you specify the name and then you put your trailing slash so I'm saying okay I want to go to project and then some Dynamic variable so something like one 2 three whatever the ID of the project is and then I'm going to say this is views. Project name equal to project now you'll notice if we go to views. high that I've actually ridden that here right so when I have this path variable what will happen automatically is D Jango will pass that variable as an argument to the function that's rendering The View so here it will pass the ID and then we could use the ID to fetch that project and then display it which is what we're going to do later so now we have the URL patterns inside of urls.py however what we need to do is link URLs from our main Django project to this URLs file might seem a little bit weird but the idea is that we have this main URLs file let me get rid of this comment so we can actually read what's inside of here this file here specifies the root URLs for our project then what we can do is pass or forward the URL into a different app that we have in our jeno kind of application or project so let's look at how we do this well to do this here we're going to specify another path and I'm just going to put the empty path now this means if you don't go to anything so if you don't specify admin you don't do anything I'm going to take whatever else is included in this path and I'm going to pass it over to my main. URLs okay bear with me here for a second we're going to import include from this so the way that this um kind of works here is what I can do is I can specify something like main now if I do main slash here what this means is that whenever I see main slash whatever comes after the slash I'm going to pass it over to my main. url's file and then it's going to be handled from here so if it looks like this if I went to main slome then what would happen is I would trim off Main because I see that right here and I would take home and I would pass that to this URL patterns where would then be handled by this pattern here in my case since I'm not specifying anything we're just going to take whatever the URL is and we're going to pass it over to main. URLs where it can be handled there the only exception is if you go to admin since this is written first then we're going to go to the admin site URLs which is exactly what we want okay so that's it for that however we do need to write something else in here to be able to access the different images that are going to be on our folder or on our uh server sorry so we're going to say from Jango docon Dot and this is going to be URLs do static we're going to import static and make sure we spell URLs correctly we're then going to say from Jango docon import settings now what we're going to do is we're going to add a plus here to our URL patterns and we're just going to add a pattern that allows us to actually access the images that are stored inside of this media directory so we're going to say plus static and then this is going to be settings dot the mediacore URL which is what we defined previously and we're going to say the documentor root is equal to the settings. medore root okay so what this is pretty much saying is Hey whenever we go to this/ Media URL we're going to go look inside of the media root and that's going to contain the image that we're searching for might seem a bit weird but that's kind of what we've been setting up this whole time so we can add this line right here and have a URL pattern that allows us to view that image and kind of host the image on our server okay so now we have all of our URLs configured it's possible I made a mistake but let's go and run our server again so Python 3 manage.py run server and let's just see if we're able to render the homepage then we can start actually displaying some content on it so I'm going to view this and notice that we have home and contact and says this is the homepage and if I go to contact we just get this because well there's nothing on the contact page and if I go to home it brings us to this same page I know it seems really basic but we're now well on our way to actually writing a goodlooking port portfolio website so we've got the URLs working we are able to go to the homepage we're able to load this static CSS file you can see all of the different URLs that we've gone to down here we can now close this out with contrl C clear close the terminal and start writing some more HTML code to kind of render this content on the screen and start really getting towards the end of the project okay so let's go to home.html and let's start writing some content inside of here to actually render the different project that we have then we can work on the contact and the project page all right so from our home.html let's continue by actually overriding a few other blocks that we're going to need so we have the extending we're loading static and we're overriding title and content but I also want to override my extra head and my extra JS block so I'm going to say block extra head and then percent percent and then end block extra head okay I'm then going to copy this and I'm going to put this down here here and we're going to do the extra underscorejs and extraor JS now what I'm going to do now just to save us a bit of time for later is I'm going to link to the stylesheet that we'll have for this page and I'm going to link to the Javascript file for this page because I did say we're going to have some JavaScript in this project we will we're going to use that to dynamically display different content on the page so let's go to base. HTML and let's just copy the link to this stylesheet and let's take it and paste it here now I'm just going to change from base. HTML to home. CSS sorry and I completely butchered saying that but I mean let's change from base. CSS to home. CSS and now let's make a home. CSS file that we can place some CSS in later okay now we need to uh write the code for our JavaScript link so let's do that so we're going to have a script tag here and for the script we need to make sure we end the script and then this is going to say source is equal to and we are going to have percent percent same thing as before we're going to load static it with single quotes JS and then home.js like that make sure we have our space and now we can make a new file and call this home.js where we'll write the JavaScript to handle the dynamic filtering and uh rendering of different content great now I'm just going to format this so that it looks a little bit better perfect and what I'm going to do is I'm going to take all of this code and I'm going to Cy it into project. HTML and I'm going to copy it into contact. HTML we're just going to make some very slight changes here because for all of these Pages we're also going to need some JavaScript and some CSS so for contact we actually don't need the JavaScript sorry so I'm going to remove that and I'm going to go uh to where it says cssh home. CSS I'm going to change this to contact. CSS and we'll just change this to say contact page and then we'll say this is the contact contact page okay now we'll go to project for project we're just going to say project page we'll change the CSS to say project. CSS and then what else do we need to do we just say this is the project page and then we're going to load the project. JS uh because we are going to need some of that okay so that should be it for these other Pages for project and contact I just figured we might as well do that and then sorry while we're at it let's go to CSS here and let's make those files so project. CSS and we will load the contact do CSS and then we'll have Js and this will be the project. JS just that all our files are linked and created and we're not going to forget those later on okay so great let's close all that and let's go back into home and now let's start writing the code that we need so the idea is in the homepage we want to have all of the different projects and we want to display them now what that means is that we need to pass the projects to this page and then we need to render them dynamically on the screen now we also want to display the different tags on the screen and these tags will allow us to filter the different projects so we need two things here we need the tags and we need the projects so what we need to do is pass them in and to pass them in we're going to have to go to our views.py file now from our views.py file we're going to go to the home View and we're going to write some very simple code that will just get all of the different projects and we we'll get all of the different tags and we'll pass them into the template so that we can access them so to do that we're going to start by saying projects are equal to the project doobs doall now what this does is just give us access to all of the different projects that we've created that's it and that's why using the omm the object relational mapper from D Jango is so nice next we're going to get access to all the tags so we're going to say tags is equal to tag doobs doall okay perfect and now what we can do is pass a dictionary and the dictionary will contain key value pairs that we can pass into the template that we can use to render different Dynamic data so I'm going to have a key for projects and you guessed it that's going to be associated with my projects and then I'll have one for tags and that will be associated with my tags okay so that's how we render this Dynamic data and we pass it into the template now what will happen is in the home.html template we have access to the variable projects which will contain a list of all of our projects and to the variable tags which will contain a list of all of our tags so now let's go into home.html and let's start using these different variables that we've passed in so the first thing we'll do is render our different tags so inside of the block content we're going to create a div let's end the div here and inside the div I'm going to make a class and let's call this equal to filters okay so we'll start by writing the fil filters which will be a kind of search text filter and then all of the different tags that we can click on that will then show a different project so we're going to show an input for the input we're going to say type is equal to text and then we're going to say ID is equal to the name search and then we're going to say the placeholder is equal to and this is going to be search by name dot dot dot you can change this if you want this is what I'll use for now next we're going to have a div and this div will display all of our tags again if you're getting overwhelmed you can copy this from the GitHub I'm going to say the class is equal to the tags list then inside the div I'm going to use a for Loop and I'm going to render all of my different tags so this is where the templating comes in I'm going to say for tag in tags the only reason I can do this is because I've passed this tags variable into the template from My Views file and then I'm going to do a percent percent and I'm going to end my for Loop now inside of the for loop I can put something here that I want to be rendered every iteration of the for Loop and what do I want that to be well I want that to be my tag so I'm going to say button and we'll close the button and then the name of the button is going to be and we're going to have a set of double braces here this is how we actually grab a variable and render it inside of the template and I'm going to say tag. name so whenever I actually want to display one of my python variables in the HTML I can use these two braces like this okay so that's going to be the name of my button and then the class is going to be a tag because we're going to style this later and then we're going to have the data tag so what's actually um sorry what we're actually accessing when we click on this button and then same thing we're going to use our double brace and we're going to say this is tag. name and then we're going to put a pipe and we're going to put lower now what this is is I believe it's called a Content filter uh there might be a more specific name for a but pretty much what this will do is just convert the tag. name to lowercase the reason for that is so that when we do the filtering we don't have any issues with capitalization and any tags that have the same value even if it's different capitalization will show up so that's what we're doing there data tag tag. name and then we're piping it or filtering it to be lower and that's how we're displaying our buttons let me just move this over here so we can see everything okay so you know what before I go too much further let's run this and see if we get all of our different tags appearing on the screen so I'm going to go Python 3 manage.py let's open this up and notice we have python game CSS react and JavaScript so the different tags we added from the admin panel as well as the search bar are appearing on the screen fantastic now we're going to style this at the very end so don't worry about how it looks for now okay so now that we've done that let's just close this we can leave it running for right now and let's make another div this time to display the projects so we're going to make a div we're going to say the class on this one is the project projects list make sure you type all of these classes by the way because I have a bunch of CSS that will perform this styling for you but you need to make sure you have the classes and the IDS correct okay so now same thing as before we're going to write a for Loop to Loop through all of the projects that we have so we're going to say for project in projects and then we're going to say percent percent end for okay and then inside of here what do we want to do we're going to have a div okay the div is going to have a class this is going to be a project it's going to have a data name we're going to need this for the JavaScript filtering so similar to before we're going to do that this is the project. tile and then we're going to pipe this again over into lowercase inside of the div here we're going to have something else sorry so for the data name we're also going to have the data tag and then here for the tags we're going to have project. tags doall and then again we're going to use one of these filters and we're going to say joyan colon single quotes comma space colon lower okay I know that was a lot let me see if I can format this so that we can read it a little bit easier let's zoom out okay so we have a div class project data name is project. tile and then we're converting that to lowercase then we have our data tags and this is our project. tags. all this gives us all of the different tags notice it's not quite python syntax but it's very similar to what it would be then what we do is we apply the join on this now what we're doing is we're joining these with commas so that we get kind of like the string join of all of these and then we're converting all of those to lowercase okay then inside of the div what I'm going to do is I'm going to display the name of the project so I'm going to say H2 and let's close the H2 and this is going to be a link and we're going to say a href and then inside of here the href is going to be 2% percent and this is the URL and then in single quotes project and then the project. and then what we're going to have is the project. title like that okay that's for our h2 tag we also need to close the a tag so let's do that now beneath that we're going to display the description of the project so we're going to say project. description and then close the P tag if we can type that correctly and then we're going to have the tags so now we're going to say tags colon and what we can do is simply copy what we had up here so project. tags join but we won't apply the lower this time okay and then we need to make sure that we just put this inside of our double braces okay I believe that's going to be it for now I know that this looks fairly messy and it's kind of difficult to follow along with feel free to pause the video and type it out but the reason why we need these data names and data tags is so when we get into the Java script and we apply our filtering it's actually going to work and we can uh view these different divs that have these different tags okay so let's go back here and want to open up my browser okay I guess we're just going to have to do it from down here all right open this up and now you can see that we have our different tags so now working and we have our project so it says python platformer this is a link that I can click on okay we have our tags Python and game and then we have the description and if we had multiple different projects it would display all of the different projects for us perfect okay so now that we've done that what we probably want to do is start writing some JavaScript that can filter these different projects then we'll write the project page so we can view an individual project so let's go into our static JS and home.js where we're going to start writing that JavaScript all right so let's begin by having the following we're going to say documents. addevent listener and then for this we're going to say Dom content loaded we're going to have a function and the function is going to be all of the code that we write here now the point of this is that as soon as the Dom content is loaded and only then will we start executing this code that way we can actually find all of the elements that we're looking for so we're going to begin by looking for a few Target elements the first one is going to be our name search which is that input field where we can actually search for the name of a project now this is going to be document doget element by ID and the ID of this element is the name search field or the name search ID next we want to have all of our tags so we're going to say this is document. query selector all and we want to select all of the elements that have the class. tag and then we want to get all of our projects so it's going to be projects equals document if we spell that correctly do query selector all and again same thing this is going to be project okay so the first filtering we can apply is based on the search field and then we can do the tags so we're going to make a function and we're going to call this filter and then projects now inside of filter projects the first thing we need to do is get the value of the name search field so we're going to say const name query is equal to the name search okay dot value and then this is do two lowercase okay so we're just converting that to lower case now what we're going to do is Loop through all of the projects that we have and we're going to see if the query that we searched for for is in the project name if it is we'll leave it there otherwise we'll remove it so we're going to say projects. for each and then inside of here we're going to have a project okay we're going to have an arrow function and we're going to say the name is equal to project. getet attribute and we're going to get the data name attribute from our project so that is why we had to write the dat name and the data tags attribute so we can actually access it and see if this project matches the filter then we're going to have const name match is equal to name. includes and we're going to see if it includes the name query so we're just searching for a string inside of another string if it does so if name match then what we'll do is say project. style not sure why I did that do display is equal to nothing other otherwise we'll copy this and we'll make it equal to none that's it so all this is doing here and we'll link this up in one second is we're searching through all the different projects we're looking at the name of that project and if the name query that we search for exists inside of that name then we're going to keep this project the way we'll keep it is by making sure the display property is just blank otherwise we set the display to none and that effectively is going to hide this element great now what we need to do though is we need to add an event listener for this uh function so we're going to say name search do add event listener and the event listener is going to be on key up so anytime you finish typing or lift your key up then we are going to uh call this function which is filter projects okay so that should work for now and then we need to do the one for the tags so what we'll do is go back here we will refresh and if I search something like hello world we can see that nothing is happening so what we can do is click on inspect right click on the wheel and click on empty cache and hard reload just to make sure we load the JavaScript and if I type something like hello world or python okay seems like it's still not working which tells me we probably have some kind of error let's go back and try again uh okay guys give me one second I'm going to look at this and see why this is not loading all right so I've made a very silly error here I've typed Sr for my script instead of Sr RC so it was never actually linking my JavaScript file hence why nothing was loading so I've just fixed that here on line 32 uh that was in my home.html file now I had some comments in here just to test this out so let's remove those comments for now and let's go back here and refresh and start typing and we can see now that we get a different error it says HTML input element filter projects uh issue reading to lowercase okay let's have a look at that and see what that issue is okay another silly error here for some reason my autocomplete would have replaced value with area value Max which is not what I wanted so let's make sure that says value I'm sure you guys probably caught that when that happened and let's go back here and refresh and type something like test and you can see now that it goes away because it doesn't match the filter where's if I type python platformer it's still there until I type something that doesn't exist in the string okay so it is correctly filtering through our elements obviously if we had more of them it'd be easier to test it but you can see this is indeed working in the job JavaScript for that is good so next thing we need to do now is filter based on our tags so let's start writing the JavaScript code that can do that so what I can do here is let's just move this down and move this over so we have some more space I can write tags. for each because we need to Loop through all of our tags here we're going to grab the tag and what we're going to do is add an event listener for every single one of our tags so we're going to say tag. addevent listener the event listener will be if we click on the tag if we do we're going to call a function and that function will be the following first we're going to say const selected tag is equal to this.get attribute and we're going to get the attribute data tag okay that's what we've put on the tag that tells us the name of the tag then after we do that we're going to say projects. for each and we're going to say project and then we'll write our Arrow function and inside of here we're going to say const project tags is equal to project. get attribute and we're going to get the attribute of you guessed it data tags that really annoying one that we wrote out now we need to see if the project tags do includes the selected tag so that's what we're doing if it does include the selected tag then we're going to say project. style. display is equal to an empty string otherwise we will say project. style. display is equal to none okay that's it that's all we need so we're doing the same thing effectively that we did here when we're hiding or showing the element but this time we're just doing it for all of the different tags and that's why we need this tag. event listener for each tag great so let's try this out now go back here refresh let's click on JavaScript you see that goes away because it doesn't match let's click on game you see it shows up because it does match obviously this is a pretty simple filter you might want to actually have multiple selectable tags and have maybe checkboxes or something but for now we're just making it so when you click on one it shows you all the projects that are in that category sweet so that's how that works for our uh kind of project page here filtering the projects now what we want to do is actually display the project on the project p on the project page sorry so let's go ahead and do that we're going to go over to our project. HTML we're going to move or remove all of this and we're going to go to views.py now and we're going to pass the individual project that we need to this project page now in order to do that we're just going to go inside of here we're going to say project is equal to get object or 404 and we're going to say that this is project and then primary key is equal to the ID that was pass here now all we'll do is we'll say project colon project and what we're doing is passing a now dictionary that contains this project so this is a helper function you can use in Django all this is going to do is look for a model that contains this key so in this case we're looking for the primary key which will be the ID that we've specified in this project model if it exists it will return it otherwise it will render a 404 page that's exactly what we want and then what we do here is we use this and we pass it to the template so now we have a project variable that contains the project information so now let's go back into project. HTML and let's write the code to display an individual project now first things first let's display the stylesheet which we're already doing okay good check now let's go into content and let's write all of the code that we need so let's write a div let's end the div for the div we're going to have a class and this is going to be the project cart then we're going to have a div and another div this is going to have a class this is going to be project info okay inside of the project info we're going to display well the info for the project so we're going to have an H1 tag and then for the H1 tag we're going to dynamic or render a dynamic variable which is going to be project. tile okay then we're going to have a paragraph tag let's end the paragraph tag and we're going to have an a tag end the a tag this is going to say the GitHub link or let's actually change this to project link for the href this is going to be equal to the project. link okay because we want to display the link to the project then we're going to have a paragraph tag and we're going to display the project description so project do description and then we're going to display the uh URL that allows us to go back to the homepage so we're going to say a href is equal to and this is going to be percent percent and then URL and then single quotes home so this will bring us back to the homepage and then we're just going to say back to home and then we'll end that link and then we're going to have another div that's going to display all of the different images so what we want to do is actually display these images in a carousel so that we can kind of swipe between them because we could have one image we could have five images right we could have multiple images so that's what I'm going to do here now this is where we'll need the JavaScript so that we can display the images and kind of change which ones we're rendering on the screen so we're going to have a div this is going to say class is equal to Carousel okay now let's go slash div then we're going to have another div and this is going to say class is equal to kousol das images okay let's end the div so I don't forget then we are going to display some images so we're going to say percent percent for image in project. images. all let's end the for Loop okay so percent percent end four now inside of here we're going to display some divs for each of our images so we're going to say class is equal to a carousel Dash and this will be item actually then we're going to do /d then we're going to display the image so we're going to say image and this can be a selfenclosed tag we're going to say the source is equal to the image. image. URL and then we're going to say the alt is equal to and this is actually just say Project image okay so that's almost it let's just format this so that it looks a little bit nicer and then inside of this Carousel div here we're just going to have two links that allow us to control the carousel so that we can go to the left and to the right so we're going to have a and this is going to say class is equal to the Carousel and then control and then this is going to say previous then we're going to say onclick is equal to and we're going to call a JavaScript function called move slide and we're going to move the slide Nega 1 because we're going left okay then we're going to close the a tag and then here we're going to put a special symbol I'm going to copy it in which will give us a carrot that is going to the left okay now we'll copy this and we'll paste it and we'll change this to say next and we'll change the move slide to say one and then rather than 94 this is going to be 95 so we get the carrot going to the right okay so that's all the HTML that we need for now none of this is really going to work because we haven't written the JavaScript but we can at least go to it and see what it looks like with a single image and then I want to create a another project that has multiple images so we can actually test this out when we write the JavaScript code so again let's apply a format here let's go and let's save and let's click on this and notice when I go here it shows me the image now you'll see that we have these carrots to the left and to the right we're going to style them so that they look nicer but when we click on these they should alternate the image but you can see that we have python platformer project link we have the text and then we have the image and if we had multiple images this would work okay so let's now go here let's add another image and then let's write the JavaScript that allows us to actually change the images around all right so let's go into project. JS and let's write the JavaScript code that can handle this for us now the basic idea here is we just want to um only show one of the images at a time so we'll do some CSS styling later that makes it look better but the point here is that we'll only show the image that's at the index that we're currently on so we're going to say let slide index equal 1 we're then going to say show slides with the slide index and we're going to call a function that we're going to write now so we're going to say function and then this is show slides and this is going to take in N which is our index now the point here is that all we're going to do is we're just going to hide all the images that aren't the current index and display the one that is so we're going to say let I we're going to say let slides equal document. getet Elements by class name name and this is going to be a care Soul item so all of our item divs we're going to get those and we're going to say if n is greater than the slides. length so the number of slides that we have then we're going to say that the slide index is equal to one okay this is just to make sure that we're going in a circular motion so as soon as n hits the number of images that we have we just go back to the first index we're now going to say if n is less than one then what we want to do is go circular in the other direction so we're going to say the slide index is equal to the slides. length so we go to the back whereas here we're going to the front all right then we're going to say four and actually we don't need to do the way I did here we'll just say four let I equal 0 I is less than slides. length and then i++ and we're going to say slides I do style. display is equal to none so this is just hiding all of the different slides that we have then we're going to say slides at the slide index minus1 do style. display is equal to flex and that just effectively is going to display this Force okay so that's really all we're doing We're looping through all the so we're getting all the slid story that we have we're checking kind of that circular motion with n to see if we need to go backwards if we need to go forwards then We're looping through all the slides we're making all of them hidden and we're just displaying the one that we're currently on last thing we need to do is make another function and this function will be move slide and this is going to take in n and then what we're going to do is say show slides and we're going to show the slide index plus equals n okay now could actually just do this like this we'll say slide index plus equals n and then we'll just display this so this way we can move by as many um what do you call it kind of elements as we want so we can move by one we can move by negative 1 2 3 whatever so first I'm just going to increment the slide index and then sorry I'm just going to display the slide index here I was going to do it in a fancy way there but I don't want to confuse anyone with that syntax okay so now we have the move slides function and from here you'll see that that's what we're calling right move slide and did I call it slides or slide okay slide good so this way we're going back negative 1 this way we're going forward one and then we're calling show slides and the reason we call this immediately is that we only show the starting slide perfect so let's try this out now I did actually add some more images to my python platformer so if I refresh and go here you can see that we're showing two images which actually makes it seem like this is not working so let's go here and refresh and ah we're probably running into the same eror we had before where we have scr this needs to be SRC okay let's refresh and now you see we only have one image and if I go here and click forward it shows the next image forward shows the next image right so I just have two now I remove the other one that we have and you can see that we can cycle between them obviously this looks really really bad though so we should apply some styling which is what I'm going to do now so that it looks a lot better all right so at this point all of the coding that I'm going to do in this video is actually finished and what we're going to do now is some styling now I really don't like just sitting in front of you and writing a bunch of CSS code I find that you're not really going to learn that much from it and I'm not a CSS expert most of the CSS I have I just find online where I kind of toy with quite a bit so what I'm going to do is just copy in all of the relevant CSS and I'll tell you where you can find it now you can feel free to restyle this website if you want you can change it around but again I just don't find a lot of value in me typing it in front of you so I'm just going to copy it in and show you what file it's supposed to go in so let's start by styling the page we just did so we're going to go to CSS and then project CSS now the way you would find the code that I'm about to copy in here is you would simply go and find this file from the GitHub link below so open up GitHub right go into portfolio go into main go into static go into CSS find project. CSS and if you're doing this with me just take the contents of that file and copy it inside of here which is exactly what I'm going to do feel free to read through all the code I'm not going to walk you through it in this video because this is not a CSS tutorial and now once we apply that if we go here and we refresh you might see that nothing happens now if nothing happens that means you should right click up here and click empty cache and hard reload once you do that what you'll see is that the styling will be applied and the reason why you need to do that is because sometimes um it doesn't uh actually load and it caches the previous CSS file so you need to empty the cache and hard reload in order for it to load properly now you're seeing some issue with the carrots here once we apply The Styling for the other Pages this should be fixed so let's go ahead and actually test that out otherwise I will fix this for you in the video Okay so we've done project. CSS now we're going to go into home. CSS and we're going to copy this in so go home. CSS and copy the contents of the home. CSS file and we're going to do base. CSS as well so I'm going to go to base. CSS okay and paste in that and then format it okay so let's go here and let's go empty cache and hard reload still looks like my carrots are not being fixed so I will I guess need to go fix those but you can see now that the nav bar is looking better and if I go to the homepage now everything looks quite a bit better we get these nice pretty cards and if I click here and apply the filtering it does actually work I can click on this and it brings me to this page now what I wanted is these carrots to actually be on the image so let me see if I can fix that for you and then I'll be right back so of course just another silly error here guys on my a tags I forgot to add Carousel control so I need to have the T because I spelled this incorrectly so of course they just weren't being picked up and styled so now if I go back here and I fix this you can see that now my carrots are actually on the image and we can scroll through them okay perfect so we go back to home and then obviously the contact page this is a page I wanted to leave for you guys to write yourself uh I just thought let's have a page let's link it up and then let's let you guys write this however you want and give you kind of some homework and something that you can continue to do okay so with that said I believe I'm going to going to wrap up the video here I hope you guys found this helpful and I hope this gave you a solid template for a portfolio resume or portfolio project in Python I know that this is pretty straightforward however this is a really good base this gets you started and now it's really easy for you to add additional pages to make the projects better to continue to style this obviously I don't really want to do a 10 or 12h hour long video to really build this out to the stage you'd want it to be at and in fact I shouldn't do that because you guys should really build these projects on your own once you get the base set up anyways I hope it helped you with that and I look forward to seeing you in another YouTube video