foreign or intermediate stages of programming you realize quite quickly that there's a variety of other skills that you need to have to Be an Effective and efficient software engineer now many companies will teach you these skills which is great however if you're going to an interview and you already have some of these skills developed it's going to make you stand out as a candidate so I want to share those with you today now just as a quick side note most of these skills you can learn from my courses blockchain expert and programming expert check them out from the link in the description there's probably a holiday sale going on while I'm releasing this video regardless let's get into the skills so the first skill that I have here is git now I know this seems obvious but when I say that you need to know git I really mean to have a thorough understanding of how git actually works what a branch is what different commits are how you change history what's the difference between say A rebase and A merge what happens when you pull a branch down how do you kind of fix a mistake you've made in a git Branch how do you revert a commit how do you cherry pick commits from different branches you should have a thorough understanding and be able to use this very quickly and pretty much have most of the commands memorized now I can tell you that over the past few years using git I have had countless hours where I've had git problems and I've had to copy folders delete folders and do all kinds of weird kind of janky stuff because I didn't know the correct git commands so it's completely worth spending a few hours to really dive in to get understand how it works on a lower level understand how to properly create a pull request how to make sure your history is linear and clean how to remove commits how to change commits over to different branches uh how to pull down existing branches there's all kinds of advanced and kind of nuanced get features that you're only going to run into when you need them and when you make a mistake in a production code base but it's definitely worth kind of diving into that learning all of the nuances of git and having a good understanding it's going to save you a ton of time and also means that you don't have to Now message your supervisor and say hey I made a mistake on this Branch can you tell me the get command all right next skill that I have for you here is testing now this is something I despise doing I always procrastinate writing my tests however now that I'm working for a startup you guys know I have a company called velocity I really need to be testing all of my code again it's something I absolutely hate doing but to be able to feel confident pushing code into production it has to be tested and this means I have to write code in a specific way such that I can actually test this code when you start getting into kind of I don't know the more advanced levels of programming you realize that everyone you're programming with knows how to solve a problem they can create a web page they can create a function they can write it back and however not everyone can write this in a way such that it can be tested easily testing your code is a very difficult thing especially if you have very complicated code especially when it comes to handling all of the different edge cases if you write very very complex code it can be really time consuming to test it so it is a hundred percent a skill to understand how to test your code and more importantly how to write code in a way so such that you are able to test it and you can actually catch any bugs before you roll that code out into production so please spend some time learning testing learn about different types of testing like unit testing integration testing system testing Etc and feel comfortable writing tests for the code that you write so moving on I have the topic of system design now this is a very vague topic it kind of encompasses a lot of different stuff and system design could mean like designing different servers designing a database it could also mean designing different classes functions modules Etc that you're going to have inside of a code base at minimum I think most programmers should be comfortable understanding how to break say a class into different functions or different methods how to have maybe multiple classes interacting with each other maybe you want to have a basic understanding of how you should have kind of data set up in a database that's kind of a different topic but that could kind of roll into system design alternatively system design again could be setting up servers it could be having load balancers it could be understanding how to scale that's kind of a more complex topic that most regular developers are not going to have to handle but I think it's important for most programmers to have a kind of General sense of what is meant by System design the process of doing that how you look at a system as a whole and kind of break that into sub components and minimum understanding okay I want to have you know different files in my code base I'm going to organize those into folders just keeping some kind of structure to make sure your code is somewhat maintainable and you have some kind of you know method to the madness when you're writing a ton of code or a feature so moving on I have a topic that's highly related to system design and this is scalability specifically writing scalable code really what I mean by this is being able to think about how your code is going to scale to maybe tens of thousands hundreds of thousands potentially millions of users and if it's actually going to be feasible to say run on you know a million entries in a database or to be ran every few seconds or how long it's going to take if you have a ton of different entries that needs to process this is something that you only really start developing when you're in some kind of critical environment where you actually need to write scalable code because in most cases if you're just working on a hobby project or you're on a small team or for a small company or a very small product it doesn't really matter if your code scales if you're only serving 10 people or 100 people it's fine if you have fairly slow code because you have a very small amount of users it's going to be kind of servicing right or a small data set it's going to be processing however once you start servicing tens of thousands or hundreds of thousands of users it can become really detrimental and quite expensive maybe even unusable if you write code in a way such that it just can't handle that volume of data so we've all seen the coding interview questions where you have maybe an N Cube time algorithm you're asked to bring that down to maybe N squared or log base 2 of n Etc there's a reason why they ask you to do this and it's because they want to see how you think about creating codes actually going to be scalable so I'm not saying go and do a million Lee code questions I'm not saying that's the way that you're going to learn how to do this but I think it's important to really think about every time you're writing code okay is this going to scale is it okay if it doesn't scale is there a way I can write this more efficiently can I make this more cost effective for example in terms of maybe reads from a database should I change the schema how I'm kind of reading data in all kinds of different things to consider here but it's worth thinking about scalability as you're getting better at programming and trying to practice that even in your hobby projects so continuing here we move on to the last skill which is documentation now this is something that everyone hates doing I don't know anyone who enjoys writing documentation but it becomes very important when your code starts getting larger and when other people are going to be reading and understanding it or attempting to understand it so when you're just working as a solo developer or in a very small team you might think the documentation is unnecessary and a waste of time and in some cases you may be right because you understand the code your team understands the code you know where things are you know you can ask someone if you don't understand but as you start scaling and having more members it becomes very time ineffective to not have documentation because that means now all your new developers have to spend you know countless hours reading through the code base trying to understand what's going on whereas if you had just written a one or two page kind of document or summary or maybe you had I noticed the basic kind of instruction set of what's happening what this code is doing how you you know contribute to the code base Etc that would save you from maybe having to explain this to them or kind of train them on the code base and it would save them from having to read through all of the source code so I think it's definitely a skill to learn how to write documentation even if that's just basic documentation and how to kind of take your code and summarize that in English right and explain this is what the code's doing this is how you add to it this is how you change it this is what it's expected this is the output you're going to get from it Etc so it's worth doing that again probably a waste of time if you're just working on a solo project but as soon as you start getting into some kind of team environment definitely consider especially for critical features or ones that other people are going to work on writing at least some minimal documentation that gives some instruction or at least a starting point to other people that might be diving into the code base alright guys so with that said I think I'm gonna wrap it up here I decided to make this video because these are skills that I've noticed becoming more and more important as I've gotten better at programming started having other programmers work with me kind of being in a more uh you know large code base with tons of stuff going on and I wanted to share them with you because I find a lot of videos don't mention this and in a lot of courses it's kind of Impractical to teach these types of topics or even talk about them because it's hard to really see the importance of them until you start getting into a larger code base you have a team you're in a workplace environment Etc as I said I think many of you are going to learn these skills as you get better at programming as you're working in some kind of job but in the meantime it's definitely worth considering them I may be reading a book or two watching a few videos articles lectures Etc regardless I hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and I will see you in another one foreign