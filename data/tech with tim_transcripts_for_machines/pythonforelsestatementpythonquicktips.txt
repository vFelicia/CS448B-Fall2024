hello everyone and welcome back to other Python quick tips video in this video I'm going to be talking about the for else statement now essentially the way if for else works is you have a for loop and then directly underneath that in the same indentation level you have an else statement but what does this else statement do I'm going to illustrate that to basic examples here so essentially the way this else statement works is it checks if you broke out of the loop using the break keyword or if you reach the end of the loop now that's extremely useful because sometimes you exit the loop and you want to know how you exited did you break from finding some kind of statement or seeing that break keyword or did you actually go through the entire loop and you ended because there was no more elements or no more numbers to loop through so there's two way you can two ways you can end the loop by breaking or just by running out of things to look for so essentially the way the sella statement works is if you break out of the loop it will not run but if you run through the entire loop and it does not witness this break statement then it will run whatever is in this else statement so this basic example you here I have a list called my list you can see the elements that are inside of it and we have this look for which is a number that we're gonna be looking for so essentially what my for loop is doing here is looking for this number and if it finds it what it's gonna do is say found whatever the number is and then break so if it finds it is not gonna print did not find but if for some reason we loop through this entire loop we cannot find this number which is 45 then it's gonna print out did not find so let me run this here and you can see that if I scroll up a bit we get did not find 45 as 45 is not in this list now if I put 100 here then you'll see that we got found a hundred and this else statement did not run so only runs when we loop through the list and we exit it without this break keyword so essentially we finish all of the possible things we can loop for and we didn't break all right so now I'm gonna go to example two so let's just delete this for now so example two is a little bit more complicated but shows another way that you can actually use this so what this does is essentially look for duplicate elements in two lists so what we're doing is looping through list 1 which is this list here then we're looping through list 2 and then what we're gonna do is check whether or not an element exists in both list one and list two and if it does not we're gonna say it's only in list 1 otherwise we're gonna say it's in both lists so let me just run this and show you what I mean and it'll walk through it slowly so essentially what happens here is we get a bunch of print statements that says one is only in list 1 2 is in both lists and so on you can see how that works and the reason that this works is again because we have this 4 else statement and again this is indented inside of another for loop so every time that this for loop runs if we broke out we'll just print this and we won't do this else statement but if we didn't break which means we didn't find for example 1 or we didn't find 3 or 6 or whatever element in list 2 then we're gonna print X is only in list 1 which is gonna be that element that we were looping through so toe is that is healthy for else statement works pretty straightforward essentially like I've said a hundred times now if you break this else does not run if you get through the loop and you do not break out of it using the break keyword this else statement will run super useful one can definitely save you a lot of time and make you avoid having to use some like exterior lists and stuff like that that you might use before that has been quite Python quick tips for today if you guys enjoyed please make sure you leave a like and let me know what you want to see in future videos