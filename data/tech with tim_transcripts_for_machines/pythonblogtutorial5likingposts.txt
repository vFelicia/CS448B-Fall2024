hello everyone and welcome to video 5 in this flask blog tutorial series in this video we're going to be wrapping up the series by looking at how to like and unlike a post i'll also be showing you how we can implement calls to our backend so to the flask server using javascript so we don't have to refresh the page when we want to do something like add a comment add a like etc so let's go ahead and dive in all right so we're going to get started here by creating a database model for a like so obviously a like is associated with a post a user makes that like and so we need some way to store that so we know how many likes each post has so let's go to our models here and let's go class like db dot model sorry this is a capital m and let's start filling in what we need so the first thing we need is an id so just like all other models we can steal id we'll have an author of the like and then we'll also have a post id associated with the like so id author post id now we also could add a date created for the like i mean it can't really hurt to add that even if we don't end up using it so we might as well throw that in and honestly with that i think that's pretty much all we need for the like so now that we have the author and the post id we've created the foreign keys on the model here we need to add the relationships on our post and on our user so obviously each user will have a set of likes each post will have a set of likes and so let's add that relationship i'm just going to copy this relationship right here and change this now so that rather than comment it says likes so let's now change this to be like and we'll leave the back graph equal to users our user sorry all right now same thing let's paste this here actually i can just copy this thing and paste this here and make this backref equal to post all right so that should actually be all we need now we can access the number of likes by just looking at the length of our likes and then of course we have our like model here we'll create a new like when the user presses the like button and then we can delete the like when the user presses the like button again so kind of toggling liking and unliking the post okay so now that we have this we need a way for user to like or unlike the post so we're going to create some icons that will actually allow us to kind of see a thumbs up and then see like i guess not a thumbs down but we'll have a filled in thumbs up and then a nonfilled in thumbs up to represent yes you've liked it or know you haven't liked this post yet and then some kind of counter on the left hand side showing all of the likes of a post so let's go to post div and let's start doing that alright so inside of here i want to add an icon again that thumbs up or that filled in thumbs up but i just realized that before we can do that we need to actually import a new css library that gives us access to different icons and this is going to be called font awesome so we're going to go inside of base.html and just like we have this style sheet right here we're going to add the corresponding style sheet for the one that gives us the icon so like the thumbs up icon so on there's a bunch of different icons you can use so the way we're going to get that is we're going to go to our web browser we're going to go to font awesome like that and then we're just going to press on font awesome now here notice it says start for free so we're going to press start for free i'll leave this link in the description by the way and then you need to enter your email so just enter your email and then set press send kit code and it will send you an email with one of the kits so i'm going to do this and i'll show you kind of what the email looks like and how we can get access to this okay so i've just got the email here i'm going to click to confirm my email address and set up an account i will make a quick password and let's continue okay what's your first name tim sika you used fontos i'm sure 2020. okay let's go and then notice it gives us a script right here that we can use to get access to font awesome so i'm going to copy this kit code notice it says copy your kits code into head of each template or page in your project that you want to use font awesome so copy that kit go right underneath our style sheet here we're going to paste that in and now we should be able to access all of the font awesome icons so here it's showing us okay we can look for some different icons that we can add and if you want to search for different icons well you can search for them so in this case i can do thumbs up or a like or something yeah let's search uh okay no maybe like will give us some results like okay for some reason the search doesn't seem to be working so let's just go explore icons and we can search somewhere else okay so let's search for a like here and let's see okay so we have a thumbs up now that's good we should also have a thumbs up that is not solid so this is f a solid f a thumbs up there should be a way to get one that's not solid as well so let me find that icon and i will be right back all right so i found the nonsolid version so the noninstalled version is fa hyphen regular fa hyphen thumbs up the solid version was fa hyphen solid fa thumbs up so i'm just going to copy this right here this i and i'm just going to show you where we're going to place this like button in our post div dot html so i want this to be right beside where the delete button would be if we were able to delete the post so that is going to be right here so that means i need to put a div around here and then place my like button inside of this dip so i'm going to say div like this and then we can end the div so slash div like that and inside of this div i am going to place my icon so i'm actually going to do this in another div do i want this in another div no it's fine i think i can just place it right here so let's just place this here for now this should actually show up the icon so let's refresh the page now and let's see if we see that like icon uh okay so i guess my server is not running so let's run the server and let's refresh and okay so the like icon is not showing up for some reason so let me have a quick look here and see why this is not appearing all right so i found the root of the issue i don't know why this was the case but i actually needed to change this to say fas rather than fa hyphen solid so i guess fas is the new way to represent solid or maybe the old way to represent solid i'm not sure but either way a s and then f a thumbs up works then if you change this to f a r that would be f a regular so if i do this and i refresh notice you have the non filled in like button and then if you go fas and you refresh you get the filled in like button but notice it's only showing up when this delete button is showing up obviously that's not what we want so i'm just going to need to kind of change a few things around here so i'm going to move this icon so that it is actually outside of this if statement and actually sorry no i'm not going to do that i'm going to move this if statement so that it's inside of the div so i'm going to put the if statement after the icon then take this end if and put it outside of this div or inside of this div sorry so now we have this which will only be shown if the user id is equal to post.author but we have this div which will still show the like icon even if the delete button is not being shown so that was kind of the mistake there so hopefully that's fixed now however what i want to do before i show this button here is i want to show the number of likes on this post so i'm going to do this quite simply by just making actually i'm not even going to make a tag i'm just going to put the post dot likes and then pipe length so that should give me the number of likes on this post it should just put that right here before the thumbs up icon so let's see this let's go here and refresh and okay we got an error it says there's no such table like okay the reason we're getting that error is because i forgot to recreate the database so let's go to init.pi let's go to where it says models let's import like now let's delete this database okay let's save let's go back here and refresh and now we need to create a new account again okay so let's do this we're going to go tim gmail.com tim one two three four five six seven one two three four five six seven okay sign up user created let's make a post okay testing post all right and there we go we get our like count now obviously at this point in time we don't have any functionality to actually add a like but we are showing the number of likes and we're showing our thumbs up button and if we just make another account so let's make a new account here let's go sign up tim2 gmail.com tim2 okay we'll add our password here sign up notice that we get the like button still showing up even when the delete button is not appearing perfect okay so that is what i wanted now what we're going to do is we're going to make it so when we press on this like button it does something before we do that we need to set up the view to allow us to actually add or create a new like so let's do that now so let's create a function let's just call this like and i'm going to add a at views dot root and this is going to be slash like hyphen post slash and then post underscore id like that now let's make this at login required and let's get our post underscore id okay so we have our like now this method here i guess it could be a get request maybe we'll make it a post request because i think this makes more sense i'm going to say method equals post or methods equals a list post and inside of here the first thing we're going to do again is make sure that the what do you call it here that the post actually exists so we're going to say post is equal to post dot query dot filter underscore by and we're going to go id equal to post underscore id okay now if the post does not exist what we are going to do is we are going to say um if not post then we will flash a message this message will say post does not exist okay we'll say category is equal to error and then we'll say alif actually i don't think there's anything else we need to check here we can just now create the post ah this is what we need to check we need to see sorry if the user has already liked the post so we just checked if the post exists if it does exist then what we're going to do is check if the user has already liked the post if they've already liked the post then we're going to delete their like because this is kind of a toggle if you like the post and you already like it you unlike it if you've not liked the post then we will add a new like for that post so what we'll do here is we'll just do a query on the like object as well so we'll say like is equal to like dot query dot filter underscore by and then we're going to say author of the like is equal to current underscore user dot id dot first okay and we need to actually check the post as well so we'll say the post underscore id is equal to post underscore id so we need to check if the current user has liked the current post because they may have liked a different post so we need to make sure we have both parameters inside of here okay so now what we're going to do is import like okay so we'll go like there and this should now be good so now we're going to check if this like object exists so we'll say l if like so if the like object does exist if the user is like the post then we need to delete this so db dot session dot delete and we're going to delete like and then db dot session dot commit oops and actually we don't need to put anything inside of there nice okay now otherwise what we're going to do is make a new like so we're going to say like is equal to like and then we need to add the user or the author so the author is equal to the current user.id and the post id is equal to the post underscore oops underscore id i believe that's all we need and we'll go db dot session dot add like and what we can actually do here is we can take this commit and we can just put it at the bottom here because we're going to commit actually no sorry we need to put them inside of here because this does not actually add anything to the session so let's go db.session.commit and put that there i was going to just put it here but i realize that doesn't work because here we're not adding or deleting anything from the database we're just flashing a message nice and then from here what we're going to do is return a redirect to the url underscore 4 and this is going to be views dot like nice okay so that should be all good so now let's make it so when you press on that like button it actually sends a request to this so let's go to post div and let's make this now actually something that you can press on so let's go a href equals and this is going to be slash like hyphen post slash and then the id of the post is going to be post dot id okay now let's go slash a and that should be good okay so let's try this i'm going to go python app.pi i'm going to go here i'm going to refresh and now i'm gonna press on this like button and okay it says method not allowed okay that makes sense the reason that makes sense is because when we press on this button it is uh sending a post request not a get request so for now i'm gonna change used up high sorry so that this says a get i misspoke there i meant when you press on the button it's sending a get request not a post request and this was only accepting a post request before we'll actually make this just accept a get request okay so let's go here and let's refresh let's press on this and could not build url for endpoint views don't like okay i messed up there uh this should be views.home not views.like okay so now that we have the correct url we can refresh and when i press this notice we get one like now when i press it again notice we get zero but notice that the icon here is not changing right it's not changing from filled or unfilled obviously we haven't implemented that behavior yet but that's what we're going to do now so we want to actually be able to check from postdiv here if the current user has liked the post now this is a little bit more difficult than it seems to actually check this but we will do that and what we're going to do is we're going to change the class of this icon here to be filled in if the user has liked it and to be unfilled if the user has not liked it so what i'm actually going to do is make this class equal to icon underscore class and i'm going to use jenga to actually set a variable here called icon class that will be equal to the fielding class or the nonfilled in class based on if the user has liked the post so i'm going to say percent percent if for now i'm just going to put true and then we'll actually fill that in a second i'm going to say else and then i'm going to say percent percent and if okay so here what i'm going to do is set a variable so i'm going to say set and then this will be icon underscore class equal to and this class will be fas and then fa hyphen thumbs hyphen up i believe that's what that class name was and then in the else we'll say this will be far so if the user likes the post we'll do that condition in a second we set the icon class to this otherwise we set it to this and then this uses the icon class this is how you set a variable in jenga now sorry i realized i made a mistake this needs to be a percent um not a double curly brace so just change that for both of these here and then we should be good so percent and make that a percent okay there we go now the next thing we need to change here is this condition right let me actually go back there because i don't like how it flattened all of that so we need to check if the user has liked the post now it's a little bit difficult to do this because we have post.likes and post.likes contains all of the like objects right so we have all the information related to each like so what i'm going to have to do here is loop through all of the likes and check if this user has liked this post so i'm going to go percent percent for like in post dot likes so what we'll do is we'll set a variable equal to true if the user has liked this post which means we need to set the variable up above equal to false so we're going to say set liked equal false notice i'm using a capital f not an uppercase f that is because in jenga you use lowercase for the booleans rather than capitals like you do in python okay i'm going to go percent percent and four and inside of here i'm going to say percent percent if like dot author is equal to user dot id then we will set that variable equal to true so percent percent set liked equal true okay and then we'll go percent percent and if and that should actually handle that for us and now tell us let me just indent this here uh if the current user has liked the post so now we can just make this if liked okay so i think this should work um not super confident oh god i hate how it flattens all of that let's save without formatting but let's give this a shot and just see what we get so save the formatting all right and save okay so now when i press this it does like but it doesn't change the icon so something is going wrong let me have a quick look and i'll be right back okay so i was having a ton of difficulties with the way i was trying to do this before so i've kind of changed strategies here i actually already wrote the code this was taking way too long longer than i want to admit so anyways i have the code here to do what we wanted to do change the icon based on if the user has liked or not liked the post so let me just walk you through this code here so i'm saying if the user.id so the current user logged in is in post dot likes and then i'm mapping post.likes to the attribute author so what this will do is create a list of all of the authors of the likes on this post that's what this line does right here then i'm converting that to a list because what this actually returns is a generator object you don't have to worry about what that means if you don't know what that means map doesn't return a list it returns a generator object so i convert that to a list so then i can check if the user id is in it if it is i'm going to show this so fas thumbs up otherwise i'm going to show this far thumbs up pretty straightforward but that's what this is doing right here that should get the like icon working properly so let's go ahead and do this again i hate how when i save it it flattens everything but anyways let's refresh and let's see if this works okay so we have one when i unlike there you go it goes back to a what is it hollow like button when i like it goes to a solid button now notice though the page is refreshing when i do this that's because in the method i just showed you we made it so that what he called it refreshes now i'm going to show you the way that we can do this using javascript so i'm going to pretty much rewrite what we just did here if you're happy with this you don't care about if the page refreshes or not then you're welcome to end the tutorial here because that's pretty much all i need to show you you now have a functioning blog application however if you want to see how we can do stuff without the page refreshing then follow along with this part right here i'm going to show you how we can link a javascript file to our flask project and then how we can make it so we actually dynamically change the page without having to refresh it so we will continue in one second we need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use for preparing for your software engineering coding interviews they also have two other products systems expert and machine learning expert to use when preparing for your system's design interviews or your machine learning interviews with that said get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform all right so we're going to start by adding the javascript file to our page so the way we do that is we go inside of website and we create a folder this folder is called static it's very important you call it static and then you place in a javascript file call it whatever you want but i'm going to call mine index.js so the reason we put this inside of the static folder is this is a static asset which will be kind of rendered or served to us from the the flask web server so inside of static is where you would put things like images files and in this case any javascript files that you have so this is where we're going to put our javascript and this is where we're going to write the function that's going to get called when we press on that like button so while i'm in here i'm going to write a function i'm just going to call this like okay so function like and this is going to take a post underscore id for now all we're going to do is just console.log the post id okay so now we need to link up this javascript so to do that we're going to go to the base template and we're going to add a script at the bottom of our body that's going to reference this javascript file so we're going to say script type is equal to this is going to be text slash javascript actually yeah i think that's correct text javascript yes and we're going to say src standing for source is equal to and this is going to be inside of two uh brackets like this so we're using the jenga templating engine url underscore four and then this is going to be static comma and then file name is equal to and this is going to be index dot js and let me just make sure these are in single quotes okay so what this is going to do is it's going to reference the static folder which is right here inside of our our website folder and then it's going to find the index.js javascript file and it's going to render that or use that for a script now for some reason something's going wrong here oh it's because i haven't ended the script tag so let me just end the script tag right there and that's all we actually need to do to link this javascript now actually i think maybe i need to do another tag to end this because it's still showing me some html error okay yeah so that's proper so anyways that's what you need to do and then that will link up your javascript okay so now that we have that we can actually access any functions that we write inside of here okay so i'm back inside of post div and what i'm going to do is start modifying this a little bit so since i'm no longer going to be sending a get request to this url instead i'm going to use my javascript function to actually update the page i'm going to remove these a tags that i have here i no longer need them okay so i'm going to remove these a tags and what i'm going to do now is inside of my eye tags i'm going to start adding a few things so first i'm going to put an id i'm going to say the id is equal to the like hyphen button and then this is going to be for this post the post is going to be post dot id this is because i'll have multiple like buttons i need to know which one i'm referencing so let me grab my id and paste that inside of this icon as well this like button then i'm going to add a well the class is there the id is there i'm going to add an on click i'm going to say the on click is equal to and i am going to call like with if i can get my brackets right here the post dot id okay so let's add the on click to both of these so we'll add one here as well okay so there we go now the next thing i need to do is i need to put a span here and i'm going to put the span around my post dot likes the reason for this is i'm going to use the id of this span to change the likes dynamically without having to refresh the page so i'm going to say id is equal to likes hyphen count and then hyphen and then this will be post dot id okay so that should be good let's just make this look a little bit nicer for us okay let's move this back up here and let me save without formatting okay so let's just see if this still works so let's refresh and notice now that it's not highlighted in blue that's fine it's going to be in this color now if you want it to be in blue just surround it with an a tag but notice when i press this button that it's actually printing something in the console that's because the on click event is working if for some reason this isn't working for you right click on your page press inspect and then right click here and press empty cache and hard reload if you're using google chrome that will clear your web browser cache and then the javascript should get loaded that's a common error again this step is let me just close this here right click if you're in chrome press inspect right click here on the refresh press empty cache and hard reload and then you should get your javascript actually working properly okay now that we have that though i'm going to go inside of my javascript and i'm going to start writing some stuff that will update the like button when i press it so the first thing i want to do is get access to the like button so i can change its class to be filled in or nonfilled in and i want to get access to the like count so i'm going to start by saying const like and then let me just go to my cheat sheet here the first one i'm getting is like count i'm going to say const like count is equal to document dot get element by id and then i'm going to put two back ticks here you'll see why in a second and i'm going to say like hyphen count or i believe this is likes hyphen count hyphen and then i'm going to do a dollar sign two curly braces and post underscore id uh this allows me to actually embed a variable inside of a string and have this expression evaluated so this will give me the string likes count and then whatever the id of the post is so that's my likes count now i want to get access to my like button so i'm going to say const like button is equal to document dot get element by id and in this case it's going to be like hyphen button hyphen and then post id again okay post underscore id now just because we're in javascript i'm going to change this so it's post and then capital id because in javascript you use camel case not snake case okay so now i have access to the like count and the like button so now what i'm going to do when i press this button is i'm going to print out the like count dot value okay so let's just see if this is working so let's refresh let's press this and notice i'm getting the value of the like count nice okay so now that i'm doing that what i need to do is actually send a request to the endpoint that i've created here to this like endpoint to actually like the post so i'm going to change this method here to be post rather than get i'm going to show you how from javascript we can send a request to this endpoint right here however the one change we need to make is that rather than redirecting us to the url for home what we're actually going to do is return something to the javascript that's calling this request since this isn't being called from kind of the main user page no that's a bad way to describe it since this isn't actually going to be rendering a view for us or redirecting anything we're just sending a request to this and having the likes updated what we want this to return to us is the number of likes on the post that's what we want to know we also want to know if the current user has liked the post so that is what we are going to uh what do you call it send back to the javascript you'll see how this works in one second so this means that rather than returning redirect url4 we're going to import something called jsonify and we're going to go here and we are going to return the jsonify of the following python dictionary so jsonify like that and we're going to send likes is equal to and this is going to be post dot likes okay so it's actually going to be sorry the len of post.likes okay so this is going to seem a little bit strange but essentially i want to return json from this endpoint right here so from javascript i'm going to send a request and i'm going to receive some data back that data that i want to receive back is not going to be html it's going to be json json stands for javascript object notation now in python you can kind of create json by creating a dictionary so in this case i've created a dictionary has the key likes and that has the value post dot likes whatever the length of that is so i put that inside of this jsonify function and this jsonify function converts this to json and returns that as a response from this endpoint or url right here okay there we go so jsonify likes len of post.likes now we also want to return whether or not the current user has liked the post so i'm going to say liked is equal to and then in this case i will say current user dot id in and we're going to do the same thing we've done with map so i'm going to say map post dot likes we're going to say lambda x colon x and this will be dot author comma post dot likes so this will now tell me if the current user has liked the post nice did i do that anywhere else i forget if i showed that previously or not anyways that's what this will do it will tell us if the current user has liked the post by getting all of the authors of likes that have liked the post and then checking if the current user id is in them okay so that's good now the only thing is though we need to also return an error message if the post does not exist so from here rather than flashing a message i'm going to return jsonify and this is going to say error comma or colon and then we'll say post does not exist and then i'm going to say comma 405. actually 400. so what you can do is after the the text that you want to return you can return a status code by default the status code is 200 which stands for okay but i want to send a status code of 400 i believe 400 is bad requests i could be wrong on that but i think it's bad request and so this will tell whoever sent the request to this endpoint here that hey this post doesn't exist you've got an error hopefully that kind of makes sense don't worry if you're not super clear on that but the status code is 400 and this is the response that we're going to return or the information we're going to return okay so now i'm going to go to index.js and i'm going to use this fetch method now what fetch does is send a request so i'm going to say fetch where do i want to send the request well i want to send it to like hyphen post slash and then the post what is it i d like that okay now i'm going to put a dollar sign and i'm going to swap these with back ticks because that's actually what i want now what i need to do is i need to specify the type of this request or the method of this request so i'm going to say method colon and then this is going to be equal to post because i want to send a post request to this endpoint right here then i'm going to do dot then res and like this i'll explain what this is in one second essentially what this will do is wait for a response from this endpoint right here it will capture that response in this res variable and then what i will do is return the res.json so the res.json is the data associated with the response i'm then going to do another dot then and this is going to take in a data okay and this is going to get the data associated with the response so i get the res.json that means now i have my data so now i can access all of the stuff from the data here in the second dot then if you're unfamiliar with this notation essentially this is i believe it's es6 javascript functions this is creating a function right here this is the parameters of the function this is the body of the function and since i only have one line in my function by default this function will return whatever is here res.json okay now here this is taking data data will be whatever is returned from here so the response.json then inside of here i can access the data and do something like console.log data okay so let's try this for right now and i'll show you how this works so i'm going to go and run my application i'm going to go back and refresh i'm going to press this button now when i press this button notice it's still showing one so it's logging one the reason why it's doing that is because i need to empty my cache and hardware look so now that i do that when i press this notice i get undefined and it says post 500 internal server error there was an issue that occurred so let's see what issue we have it says base query object has no attribute likes okay so i know the problem let's go to views.pi and i'll show you what i did wrong here so i believe that for post here unfortunately i did not do dot first which is what i need so i'm going to say post is equal to post.query.filterby.first so just add that dot first and then that should fix the issue now let me try this again so let's refresh let's press this button and notice that i get liked true and likes one so when i sent that request it told me if the user had liked the post or not and then it tells me that the number of likes on the post is 1. now if i like it again it gives me no you have not liked it and the number of likes is 0 because i just unliked it now nothing's changing on the page yet but this is actually working this is doing what it's supposed to do so let's now continue okay so let's go to where were we index.js and let's get rid of this console.log first of all we don't need that and what we're going to do now is we're going to update these values right here uh based on the data that's returned to us so i'm gonna put some squiggly brackets here because this function will have a body and now we're gonna start updating the like count and the like button so the first thing i'm gonna do is say like count dot inner html is going to be equal to and this is going to be data at likes so now this is going to change the like count in our html to be well equal to data likes so if i go to post div here notice how i have a likes hyphen count hyphen post id so we're going to access that id so we're getting the document by its id so likes count post id and then of course we're just going to change that html now i think that should work likes hyphen count hyphen post id like siphon count hyphen post id okay uh yes let's hope that works okay so let's go here let's refresh let's press this and okay so for some reason it's not changing let me empty the cache and hard reload and okay so now you can see it's changing we're going 0 1 0 1 0 1 nice the last thing we need to change here is this icon so that it changes to be filled in or not filled in okay so that's actually pretty easy to do what we're going to do is grab this class name right here okay and we're going to go to index.js we're going to say like button dot class list i think that's right actually sorry it's going to be dot class name is equal to and then we're going to say f a r f a thumbs up and then i'm just going to copy this again and make this fas and now we'll implement our if so we're going to say if data liked then what we want is this so we'll put this right here oops okay otherwise so else we will do this okay so hopefully that makes sense we're saying if we have liked the post then we'll make this solid if we have not liked the post then we will make it not solid so let's go here and refresh so when i refresh notice we've liked it so it's solid when i unlike it it didn't change there okay so that's interesting why it didn't change it should be changing let's just see if i've messed something up here ah okay so the issue is i've said if data liked i need to say if data liked is equal equal to true like that okay so now if i do this and i refresh we've not liked so it is not filled in when i like it doesn't get filled in okay maybe my like button is not being referenced properly that is possible so let's see here i'm gonna go to my post div and i have this like button hyphen post dot id so i should be referencing this properly but for some reason it's not actually letting me change this okay so i've actually just emptied my cache and hard reloaded and now it's actually working so that is a common issue as i was saying before if it's not working empty the cache reload and then you should be good but notice that now this is changing and working properly and the page is not refreshing and the like is actually being there persistently so if i refresh now you can see i still have one like and if i unlike and i refresh i still have zero likes so everything is working as it should be there you go that is how you can uh what do you call it create the like or add the like without refreshing the page now the last thing i'll show you here is that you should really add a catch the reason you want to add a catch is because an error could occur so if an error occurs and for some reason any of this fails then you want to do something in my case what i'm going to do is i'm just going to show an alert so it's just a popup on the screen i'm just going to say like or could not like post okay so that's my catch that just means i'm not going to actually have an error occur i'm going to catch the error and then just let the user know hey we couldn't like the post for some reason because an error occurred here in this fetch all right so that should be it let's do one final test here let's add a comment okay comments are working and there you go all right so with that said i think i'm going to end the video here of course there's a lot more you can add to this blog but hopefully this gave you a pretty good kind of start and foundation and showed you different ways to go about doing things obviously it's better if you can update the page without having to refresh that uses a lot of javascript and i wanted to make this again python heavy and not focus on javascript that's why i didn't do that however what i just showed you with the likes you can kind of replicate with comments with creating new posts with anything you want and while you'll be able to have the page update without refreshing the page alright so i hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video you