if you want to make a lot of money in software development one of the best ways to do that is to build a SAS that's a software as a service business some of the largest companies in the world that you probably use every day are SAS businesses and make millions if not billions of dollars think of companies like Shopify Salesforce HubSpot and tons of others they make a massive amount of money usually because they were able to build a scalable software if the people actually wanted now I won't tell you that's easy but if you can do it successfully and you have a great idea you are well on your way to making a ton of money in software development with that said how do you build a SAS well first you need a good idea which I'll leave to you second you need software you need to build the software in a way such that it's scalable you're getting the correct analytics and you're able to deliver value to your customers so in this video I'm going to share with you one of the best Stacks to go with if you're looking to build a SAS as fast as possible now keep in mind there are so many different Technologies millions of ways to go about building software this stack I'm going to share with you is something that I use personally that I've had a lot of success with and that I know many other people are using that are raising millions of dollars and building SAS companies right now as you get more complicated your Tech stack may change but if you're looking to get up into running off the ground as fast as possible this is something you probably want to consider with that said let's dive in and let me share with you the ultimate SAS toolkit so let me start by mentioning that I am no SAS God I do not hold all of the answers so take what I say with a grain of salt and obviously do your own research there's so many different ways to build a successful company so many different technology Stacks you can use and just because I recommend one doesn't necessarily mean it's the best it's just from my personal experience and what I've heard from a lot of other people in this space regardless for a lot of these services or whatever you're purchasing you're going to need to buy it from somewhere now in that case I'd recommend you check out the sponsor of this video which is lenode Akamai now it was formerly called Leno the new name is kind of Akamai but they're kind of mixing and matching so akamala node pretty much the same same thing anyways I've worked with them for over four years they're personally what I use for all of my cloud service needs I have kubernetes clusters with them virtual private servers storage volumes uh got terraform stuff going I got all kinds of stuff with them I use databases on lenode I have my domains hosted there literally everything is with them because they're so easy they're so nice to use super fast and they have a real support team that I've actually reached out to many times that are super helpful so I don't have to wait in line I don't have to talk to robots I just reach out and talk to a legitimate human being which is a massive benefit now lenode has pretty much everything you can imagine from Storage volumes storage buckets they can do serverless architecture they have oneclick installs for all the databases you might want and since they're partnered with me you guys can get a 100 free 60day credit by clicking the link in the description and signing up for a new account as I go through the different services in this video pretty much every one of them that I mentioned is available through lenode so feel free to check that out and use it for free with that cred edit that I just mentioned so the first thing you'll likely consider when you're building your SAS business is what is your back end going to be specifically what type of architecture are you going to have now I like to recommend that people go with a serverless architecture this is great because it means you don't really need to worry about the infrastructure that your code is running on you simply worry about writing correct and scalable code and then you allow Cloud providers like lenode Google Amazon Microsoft Etc to handle that deployment in the orchestration for you now with a serverless architecture that means that your different Cloud functions which we'll get into in a second are going to automatically scale up and down and you're only going to pay for what you use for now there are some disadvantages to this which I'll get into later on but typically if you're trying to get up and running as fast as possible go with a serverless architecture where you're working in some type of environment like node.js go or python you can write something known as Cloud functions these Cloud functions can respond to different events you can schedule them to run you can make them run when things change in a database or storage bucket and it's very useful for writing a back end that's very scalable and easily maintainable because of the small size of the functions that you're writing now a practical example of something that would use serverless architecture is something like YouTube to MP3 or any of those converters you see online typically what they'll have is a cloud function running on the back end and this Cloud function will duplicate itself and expand or scale as more demand is required and it will shrink down and stop being ran when no one's using the servers that means if a hundred people go to YouTube to MP3 it can handle that Demand by just spinning up more instances of the cloud function so it can do this in parallel and if no one's using it it just tears all of them down so you're not paying for usage that you don't have lastly the major advantage to Cloud functions and serverless architecture is that deployment is typically very simple and it's handled for you by the cloud providers you don't need to worry about setting up an automated Pipeline and all of this crazy stuff or packaging and deploying your code you simply run a few commands make sure your code is set up in the correct manner where there's all kinds of guide for and you can just deploy your code to whatever the infrastructure is and not worry about where your code is running just worrying about writing the code itself alright so now that we've talked about our backend architecture Let's Talk About Storage specifically storage for things like videos files images large pieces of data that you're not going to store in a traditional database now you could store this on say a hard drive right you could store this on some remote server the issue with doing that is you don't really get a lot of flexibility and as soon as you reach the maximum storage capacity it's very difficult to scale that up and to increase it so imagine you have like a two terabyte hard drive right you're going to pay for that hard drive maybe it's 70 bucks 100 bucks whatever it costs now even if you're not using all of those two terabytes you're still paying for the entire hard drive and as soon as you fill it you now need to add another one not very flexible a lot of issues with that you're going to have some redundancy concerns what if the hard drive fails so instead you want to use something like a storage bucket now a storage bucket is a redundant globally accessible and essentially infinite size bucket where you can store info Nation it's provided by companies like lenode Amazon Microsoft all of the large Cloud providers have it and what you can do is only pay for what you use and continue to increase the size of the bucket as your data needs increase right so if I only have one user I pay a few cents if I have millions of users I pay tens maybe hundreds of thousands of dollars for my storage bucket but again the point of the storage bucket it's backed up it's redundant it's in multiple different locations you can access it from anywhere around the world you have some URL that just links to that file or to that media and it has all kinds of permissions and typically will hook in with your backend architecture that means you could actually check to see if something changed in your storage bucket and if it changed you could trigger a cloud function to run for example so you can look into that more I won't kind of make a whole video about storage buckets here but I'd highly recommend that you use that for all of your user generated content especially if it's going to be very large files anyways that is storage let's move on alright so now that we've talked about storage let's get into databases now databases and store storage are different Right storage is going to be those larger files where you have typically videos photos Etc and your database is going to be for that more granular smaller information think usernames passwords comments likes small relations tracking stats okay that's the type of stuff you're going to put in a database now for database you have really one main big decision to make and that is do you want to go with a relational database or a nonrelational database now both of them have pros and cons I could make probably an entire series talking about this but what I recommend for most SAS businesses is to go with a nonrelational database something like mongodb firestore something that is nosql okay now people will have a lot of issues with this there may be many people in the comments that say no you should go with a SQL database the reason why I'm recommending this is that a nosql database is typically easier to scale horizontally meaning you can actually Shard it out onto multiple different machines if you go look at something like mongodb you can see how they do all of their scaling there and it's good when you're working really quickly and when your data schema is changing very fast and frequently so that means that maybe you have four columns right now or four fields in your data but in a week you're going to have 20 fields or 20 columns in that case is going to be a lot easier for you to work with an unstructured database which is a nosql database rather than working with a SQL database or a structured database now I will say the advantage of using a structured database is your data is much more consistent it's cleaner you have a lot less issues in terms of checking the Integrity of that data and dealing with it in the future and you can run much more complex queries much faster and more efficiently however nosql again in a very Dynamic fast changing environment is typically preferred and that's usually what I like to use especially when it comes to setup and deployment nosql databases are going to be easier than your SQL databases the only time I really recommend the SQL database is when you kind of know exactly what you're doing you're going to have a more mature data structure you have experience with databases you understand SQL you can write those more complex queries for most people the that aren't database Engineers or backend developers nosql will probably be your goto now I'd love to hear your thoughts on that in the comments by the way so let me know down below typically I recommend you just go with something like mongodb or Firebase that's what I have experience using if you do want to go with the SQL database you have a bunch of options sorry postgres my sequel all kinds of other addons and extensions you can use again don't want to get too into the weeds here but something you should do a bit of research on and look into SQL or nosql all right so now we move on to talk about the front end now before I get into any specific Tech Stacks or what I'd recommend I'll say that for the front end really the important part is that it loads really quickly it looks good and that it's responsive whenever you're building a SAS those are the three main things you're going to want that's just immediately going to make your company look professional and give a great user experience if your page speeds or your load speed story are really slow that's going to immediately turn people off I know for me personally if I ever go to a website and it takes more than two or three seconds to load I usually don't continue navigating to that website or I I only go there if I really need to be in that place there's actually a lot of stats online that kind of talk about user retention and Page speeds but you want to make sure whatever you're doing you load it quickly and you keep that in mind right speed is very very important same with responsiveness if I press a button and I don't get any feedback or I don't know what's happening that's really going to turn me off as a user so you want to make sure that everything is responsive it's clean it's simple to use you know that's a lot of user experience and UI stuff don't need to dive into that but that's the main consideration here so whatever you pick for your front end make sure you hit those different boxes with that said what I'd recommend to create kind of an efficient front end and what's popular now is to use server side render it now server side rendering means that a lot of the load is being handled by the server so it's actually kind of generating the entire completed HTML document and then sending that to the client where very minimal work is done to render that page now that's the opposite of what will typically happen with a dynamically loaded website where what you're doing is downloading the HTML from the server and then you're downloading all of the additional resources like the JavaScript the CSS and then your client is compiling that all together and rendering the website for you so server side rendering means you're taking a lot of the load that's typically done by your client and you're putting that onto the server that way you can load the page faster immediately once it hits your browser now there's a lot more complexity to that you guys can kind of add to it in the comments or let me know what you think but I'd recommend you go with serverside rendering and if you wanted to do that you could use something like nexjs and react or I believe the other alternative is something like nuxt.js nuxt.js and view.js there's a bunch of other frontend Frameworks obviously but those are the two popular ones personally I use nexjs and react so now let's move on to some of the more complex but very important things you want to consider as your application or your SAS grows first continuous integration now this really refers to continually integrating changes into your repository or into your code base and ensuring that any change that you make is stable and working so you have a hiding degree of confidence that the code on your main or Master branch is always stable and up to date now this is a lot easier said than done and I am grossly simplifying what needs to be done for this but at a minimum you're going to want to be writing tests for all of the important aspects of your code so for me personally if I'm trying to go quickly I make sure I test all of my back ends so every single backend function I have has a set of unit tests so I know that all of those backend functions are working as they should be then I will set up some minimal integration tests so I know that my front end calling my back end is working properly any systems that are interconnected are kind of communicating in the correct way going a step further you could set up endtoend tests where you're testing the application really from a user's perspective and going through everything from the front end to the back end to making profiles to signing up Etc that's a lot more work not something I typically do at the beginning stage but you want to set up all of this automated testing and you want to write in kind of a test driven development way now a lot of people have different opinions on this I'm not going to say that I'm the best at testing code in the world but I definitely try to do that at least for the integral and data kind of aspects of my application so I know that at minimum the entire back end is working and then I can deal with the front end test which are a bit more annoying to write so you want to write all of these tests and then set up automations so that they're automatically going to be ran before you make any change or commit anything to your main or Master Branch the simplest way to do this is to use a tool like GitHub actions this can automatically invoke testing scripts that will run against your code when you make a pull request you could go a bit more complicated and get into things like gitlab or Jenkins not going to talk about those too much in this video at minimum though have some automated testing and if you're getting a bit more complex you may actually want to build the entire application push that to some kind of environment and have it be tested on say multiple different devices or in multiple different environments alright moving on very closely to continuous integration we have continuous deployment now this means that anytime you are making a change that is going to stable and should be deployed to something like the main or Master Branch it's automatically going to be deployed in all of the environments that need to be configured will be kind of done automatically right so let's imagine again you kind of have a pull request maybe you merge that's the main branch maybe you have some production branch and all of a sudden you know you Fork off at the main branch to the production branch and you're now ready to push something into production well rather than having to do this manually every single time you'd want to set up a continuous deployment so some kind of automation where it would automatically say push or Cloud functions or update your Cloud functions it would automatically make a new build and upload that to the app store or the Google Play store or push it to a website or whatever it is that you're doing that's really what's referred to here in continuous deployment that you are continually deploying changes as they are made now that could be to production that could be to a staging environment that could be to a Dev environment where you have some maybe public URL that people can use doesn't matter what you're doing you want to set up all of these automations now it's hard for me to get into a ton of detail here without making this video super long if you want more on this topic then let me know in the comment comments down below alright so we've gone through some of the main Concepts here but I just want to mention that as you start scaling and getting bigger and bigger and maybe your team grows and you're into some more complex and advanced tools or use cases you may want to consider looking at things like kubernetes and Nomad and slightly changing or adding different architecture that's not purely serverless so for example serverless architecture is really good however when you get into longrunning tasks High computation and you're doing things like image processing machine learning model training whatever it may be there's a lot of compute power required that's probably not going to lend itself well to serverless instead you're going to be setting up your own environments your own type of deployments your own configurations which are much more complicated but are definitely worth it when you need that type of environment and that type of compute power so really in summary here I just want to mention that once you start getting into bigger use cases you have multiple micro Services communicating with each other you have long running tasks you're doing a lot of compute you have some back end heavy operations need to perform you may want to stray away from regular Cloud functions and move into something like kubernetes Nomad Docker all of those things that are really helpful for setting up those more complex environments that need some more fine grain control alright so now we have the core building blocks for our SAS application the one thing we are missing is analytics right we need data we need user data we need backend data we need performance data we need all of this stuff to make decisions as a business and to understand where our software is lacking where we can improve and yeah how we can get better right so whether that's Google analytics whether that's more advanced platforms or tools I won't get into those in this video you want to make sure that you are tracking things like crashes bug reports page load speeds um you know backend function calls anything that has high latency that's all of the stuff that you're going to get into once your SAS is successful you have some users people are actually on the the website or application now you're going to start analyzing all of that data and seeing where you can improve now the type of analytics you're going to use is really going to vary depending on the project that you're using I can get away with using something like Google analytics for some of you you may need some more advanced platforms you might get into something like bigquery where you're Now using Google analytics but in a much more advanced way all kinds of tools here I don't really feel qualified to talk about them so I'll meet mentioning any specific ones and with that said I think I'm going to wrap up the video here now I know this wasn't extremely detailed or specific but I wanted to give you a high level overview of the different tools and Technologies you will need if you are building a SAS hopefully this got the wheels turning got you thinking about different things and considering different options obviously you need to do your research take everything I said with a grain of salt and pick the best stack and language for you and for the application you're building with that said thanks very much for watching leave a like if you enjoyed subscribe the channel and I will see you in the next one foreign