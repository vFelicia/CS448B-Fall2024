hello everybody and welcome to another youtube video so in this video what i'm going to do is show you the programming project they got me a job offer from shopify so i just want to give you some context before i dive into this project but i will show you of course the finished product and then kind of walk through some of the code and show you how i built it anyways this was back in february of 2020 after i had just received my first two interviews for my first software engineering internship so i was looking for an internship i was 19 at the time i had no prior experience working you know for a company or doing any real software engineering work other than what i had done on youtube and well i received interviews at microsoft and shopify so i was actually on my way back from my microsoft interviews which were in seattle when i got an email from shopify saying that i had received an interviewer we had the interview set up for a specific day so the first interview was an online interview it's what they called a life story interview and i really just had an hourlong conversation with the recruiter essentially and then they called me in for onsite interviews and they said during your onsite interview you're going to need to present some type of personal coding project that you've worked on it should be related to backend development because the position i was applying for was a backend developer intern you're going to have to walk through the code talk about how it works you know you should be an expert on this project that's what they said they said that there would also be some kind of design problem or coding question at the interview which there was so anyways i had maybe about a week to work on some personal project or clean something up that i had already finished so i decided i would write something from scratch which is this project right here now i actually worked on this project during a live stream on youtube i'll leave a link to that in the description also if you want the code for this project there will be a github repository down below anyways that's kind of the context here but when i got to the interview i had to go through this project literally walk through almost every single line of code discussed why i decided to do certain things kind of the architecture and design of what i did here and then talking about the database integration and a ton other stuff like that so really back end heavy anyways keep that in mind the position i got was a backend developer intern position and it was mostly because of this project right here i also did have to answer a short design question uh but you know there were two parts the interview one was the project one was the design question i passed both and if i had had a poor project i wouldn't have gotten the job so anyways i apologize for the long introduction but let's dive into the video after a quick word from our sponsor before we get started i need to thank new lab for sponsoring this video and talk to you about their awesome project and code management software which is called backlog backlog is an online platform that provides your team with everything they need to release great projects backlog's simple yet powerful interface can be quickly adopted by anyone and you can use it to work with developers clients designers and other team members all in one platform use backlog to visualize keep track and prioritize work using kanban style boards gantt charts and burn down charts you can also see which tasks have been completed are currently in progress or need to be adjusted across your entire project lastly you can create comment and update tasks on the go using backlogs ios and android native apps which are free and automatically sync with your online workspace backlog's rich feature set including things like builtin git and svn support for code management make it a superior alternative to something like asana which is not nearly as flexible or agile for developers backlog is trusted by over 10 000 companies and will definitely increase your team's efficiency and organization each backlog project also has a collaborative wiki that all of your team members can edit access and organize to keep track of important documentation or resources get started with backlog today by hitting the link in the description alright so i've got the app running now the web server is running on my computer now this app is also running on my ipad and my iphone this is simply a web application so i'm just going to a specific url to access this page but i just want to talk to you about what this is and then of course i'll kind of demo everything so this is simply a local area network chat room or chat application so you don't need a password you don't need an account or anything like that if you're on the same network as someone you can go to whatever url the server is running on and then you can just start globally chatting with anyone else on the network that's also you know using this application so that's pretty much all i need to explain but that's kind of what this is this uses socket io this uses flask it uses some frontend javascript and something else i think that's about it anyways i'm just gonna kind of sign in here as tim to sign in all you do is you just pick some name for yourself you don't need um what do you call like a password or an account or anything you just pick a name and that's what represents you in the room so anyways i've signed in as tim you can see i was just messing with this before the video to make sure everything was working and now i'm kind of in this chat room and i can start typing i can say something like you know hello sure hello my name is test and send that and then notice that sends in here now what i'm going to do is i'm going to sign into this chat room on my ipad and on my phone over here i'll kind of throw it up on the screen because i'm recording on these devices and then you'll see how this works so i'm going to sign in as ipad from my ipad now i'm in the chat room i'm going to say hi and notice that now ipad says hi comes in now let's just sign in from my phone i'll just put this as iphone and inside here let me say something i'm just going to say what's up now when i say what's up you can see it automatically scrolls to the bottom and you can see the iphone is typing what's up and then obviously on all devices they're getting the same messages so this is just kind of a demonstration of sockets and how you in live time update like a chat room so that's literally all this application is not very complicated whatsoever again i i built this out a few days before the interview because i built it from scratch and if i go to history you can see all of the message history for the person that's signed in so i'll do that on my ipad as well and on my phone and that's literally all there is to the app and then you can log out so i log out i can sign back in as say joe and now i can go in the chat room i can see all of the message history and notice that since tim's not my user it's in a different color now i can say what's going on and i can also send that by pressing the enter key so really not complicated nothing crazy this is the app that i created now i'll jump into the code kind of walk you through it a bit and talk to you about what the devs liked about this project and what they didn't like so maybe you know if you're going to be interviewing at shopify or any other company and you need to kind of show off or demonstrate a project all right so i'm in vs code now what i'm going to start by doing is walking you through kind of the project directory how i organized some files and all of that just just showing you the basics of how this app actually works and why this actually ended up getting me a job now i want to just preface this by saying that i'm not at all trying to say that this is the best practice that what i did here is perfect and that you know you have to make something like this the point of this video is to show you that you don't need to build something that's extremely complicated or massive to be able to get a job or to demonstrate your knowledge in fact the amount of time i put into this project in total was probably about six or seven hours and a lot of the stuff i did here i didn't know how to do until i started working on this project what i wanted to do was bring a project that i knew really well that was relatively simple that was going to be easy to explain and that just showed that i know kind of some solid programming principles i could write clean code i knew how to organize files and directories and that you know i knew how to program that was really what i was trying to demonstrate to the devs and again i had two developers that were kind of singing over my shoulder by laptop in front of me and that's how i was demonstrating this project to them as i was walking through the code anyways let's go through the directory structure so first of all i have this folder called old message server before i implemented this using socket io and flask i had originally coded my own message server using just sockets i just included this in case it was something i could talk about with the devs i'm not going to talk about this here but in case you're looking at the github repository and you see this that's what that is anyways let's go into the website folder so of course i have my readme i have my git ignore i have my requirements.txt and then i have this so i have my application folder i have a env folder or env file sorry that stores all my environment variables i have a config file and then my main.pi file which is the main entry point for the web server or the main entry script then inside of the application folder i have most of the actual code for the website i have a static folder for my javascript i have a templates folder for all my html and then i have a database file filters up hi and views.pi i'm going to go through all the files so we'll get to them in a second but let's start with the the website directory here so of course this is where the website all the code for the website actually is and we'll start in main.pi so inside of main.pi i just have my all my imports for flask i set up the app and i set up socket io and notice as i go through this project that i documented everything i really wanted to show that i knew how to write clean code i followed pretty well all of the programming standards you would when writing clean code although i'm sure some of you guys will point out things that i didn't do correctly and yeah that was kind of one of the main things i really focused on when i was writing this out so as i have a bunch of comments say communication functions and the first thing i define in here is just my socket.io on event function so what this event does is it will simply take the message that is sent and we'll save it to the database that's literally the only thing that needed to be handled on the backend for socket io so then this also runs the web server here and i use the value from my config file to run this so that's main.pi really straightforward let's go into config.pi inside of config.pi what i do is i load a bunch of environment variables that are specific to this development environment so for example are we testing are we in debug mode what's the secret key uh for our session what is the server or server ip address sorry that we're going to run this on i load that from my env file which is right here and stores the environment variables so there you go that's the basics for these three files right here and the reason they liked this they specifically said this was very nicely set up it's really easy to change things easy to see where things are stored and i wanted to show off the fact again that i knew how to use environment variables which of course is an important programming thing so now let's get into application so inside of application i will kind of walk through the front end first and then i will go to the back end so in the front end i used flask if you're not familiar with flask this is going to seem maybe a little bit complicated but when you write a html template in flask you use something called the jenga templating engine it's like jinga but you can write standard html which is what i did i had all my custom css classes here just to make things kind of nice i'm not going to go through those i had jquery imported that's what i used i had a few other things as well i bootstrap that i used and then you can see there's these blocks here so whenever you see a block this means that i'm able to actually pass a value that will be placed inside of this block in code or in in the templating language and you'll see that in a second but anyways i had my nav bar i had this block to show all those flashed messages so when you saw things like logged out or you were successfully logged in as whatever the user is that's what's handling this um this right here all right so now we'll go to history.html so it's worth noting that this base.html file is the base template for the entire website so all of these other templates you see will kind of place themselves inside of this content block right here so they'll all use this as the main base template for themselves and they have some specific html that's going to be inserted in here so if i go to history.html you can see this extends base.html which means we're using that as the base template and then inside of the content block i have what i actually wanted to display for the history page right so this is showing all of the messages in history and you can see it for message in history we're going to take all this information and then just display it nicely in html so that's just this is the jenga templating engine then we have index.html so this is obviously the main page or the home page you can see i had to set up my own message flashing here then i have some style tags block content and the form to actually submit your username and to sign it then we have login.html again login page right there and i won't go through much more than that you get the basic idea all right so we have our four templates we then have static so inside of here i have a bunch of javascript now essentially what i need to do was fetch new messages whenever an event occurred so whenever someone sent a message there would be a socket event that was emitted and then we would have to keep track of that on the front end or i guess handle that event actually occurring and then display a new message on the server so i first had this async function to add messages keep in mind i was not applying for like a javascript role or anything or anything related to frontend so they didn't really care about what i did with the javascript although i did kind of explain it to them so i won't go through this but this is just generating the new messages whenever they come in so whenever an event occurs and then i had some fancy thing that would automatically scroll to the bottom of the div that all the messages were in whenever a new one was added that extended the height then i had another thing for load name so this loads the user's name themselves so you can actually display it on the page i had something to load all of the messages so the first time you hop into that message chat uh yeah i guess message chat what would you call it global chat you need to load all the messages this was the thing that would automatically change the height of the screen so that's proper i had my thing to scroll to the bottom i had some function that would take the date um and it gave me like a certain format for the date for my messages that's essentially what this did so i had the current day then the hours and then the minutes i didn't want the seconds then this was kind of the main logic here to handle all of these socket events so essentially when someone connected what do we need to do well we emitted an event saying this user connected to the server then i had something for the message form so when we submitted a new message we needed to do something which involved emitting a socket event with the message and the name of the user and then that was handled by the backend which i'll show you in a second we also had an event for when someone disconnected and when a response was added we would add a new message anyways i i know i'm just like really quickly going through this but i just want to show you kind of what i did all right so now that was the front end or the index.js now what i'm going to do is i'm going to show you the views.pi file this is not very large but in flask it's super easy to set up backend api endpoints so i have my login endpoint you can read through it yourself i'd log out i had my home page this would render the template i had my history page i had my get name api endpoint here to actually get the name of the user i had my get messages api endpoint i had get history same thing remove seconds from message just a utility function right here and notice i commented out with utilities so pretty organized pretty easy to see what everything does not too much code going on and a lot of the stuff that these endpoints were doing here was they were modifying things in the database so you'll see things like get history like this function right here right you'll see things like um well let's hear db.getallmessages remove seconds or messages so a bunch of utility functions everything was pretty nicely organized and really easy to find all right so now i'm going to go over to database.pi now this was the file that i used specifically to handle all the database operations so i used an sqlite3 database that's stored in the messages.db file right here and well this file was kind of like an interface almost for my database just to make it really easy to get all the information that i wanted so i had my init this would try to create the database if it didn't already exist and create a sql cursor i then obviously had to close the cursor i had my create table function or method get all messages this actually went through used a little bit of sql so you can see sql right here and it was funny because when i was showing them this function they were like hey why did you use python to sort all of the results like couldn't you i've done that in sql and i just was honest with them and i said yeah i probably could have done that in sql but i didn't know the query to write so i just decided to use python because well i knew how to sort in python so anyways i have get messages by name and then save messages so just a really easy to use interface that i could use to handle all of the database related operations and what was stored in the database was literally just all of the users and all of their messages so every time you went back into that global chat you would be able to see the history of all the messages and then for each individual user you could check all of their specific message history now that was literally it i also had this file uh for filters this was i'm not really going to talk about this because it's very specific to flask and jenga but it was just to actually split a string in the templating language for jenga i had to write something custom like that but yeah that was pretty much it i had in a nit.pi file that also did a little bit here so i created this application folder as a python package and then this was actually what initialized and returned to me uh the app that i then ran so again just you know there's a lot to go through i could walk through this project for hours if i wanted to but that is the project that i built and this is what got me a job at shopify so the point of this video really was just to kind of demonstrate that you don't need to make anything super crazy i just made something that showed off that i understood how to work on the back end that i could write clean code that i understood how to hook up a front end with a back end i understood how to use a database it was a lot of things that weren't super complicated or super fancy but i just did a bunch of kind of small things that tied really nicely together i made my code really organized and easy to find everything and the devs were definitely very impressed as they voiced to me and i guess in the offer letter that they sent to me later so anyways that was kind of all i had for this video i hope this was somewhat helpful to you again there will be a link in the description to the github repository where you can you know mess around with this for yourself or look at the code if you care to do that so anyways if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another youtube video you