foreign I'll give you an introduction to python game development by walking you through creating a simple fun yet extensible game we'll make this game using the pi game module which is a simple 2D Graphics library in Python that allows you to create a variety of games in case you're curious I have tons of different Pi game tutorials on this channel and a recent one I posted actually shows you how to build an entire platformer game here we'll make something much more simple just to get through the basics and get you up and started as fast as possible let me show you a demo of what we're going to build so on the screen here you can see our game again this is fairly straightforward we have a background we have a rectangle that you could change to some kind of sprite or character if you wanted to and then we have projectiles that are falling on the screen as we progress further these projectiles will get faster and more of them will fall and eventually if we are to collide with one of these rectangles and it will tell us that we lost obviously you could go and add lives you can make different levels you can make this game really completely your own but I wanted to show you the basics covering things like movement collisions projectiles backgrounds and all of that kind of fundamental stuff that once you know you can make a ton of different games with so with that said let's get into the video now the first thing I want to tell you is that if you are interested in becoming a software engineer or learning more about python go and other programming topics I do have a course called programmingexpert.io I'll leave a link to that in the description I also just released a blockchain course so anybody interested in web 3 blockchain technology creating smart contracts solidity Etc you can check out my course blockchain expert again from the link in the description so the first thing we need to do when we're going to be working with this Pi game module is we need to install Pi game now to do that you're going to open up a command prompt or a terminal and type the following command which is PIP install Pi game now for some reason this command does not work for you you can try to run the command pip 3 install Pi game and if neither of those work for you I will leave two videos in the description and I'll kind of throw the thumbnails up on the screen that explain to you how to install Pi game all right so now that Pi game is installed we can start using this library now I've used this a ton of times but I'm going to walk you through step by step how we set everything up so the first thing to do is go into a new python file you can see I'm in one here in vs code you can work in any editor that you like and import the pi game module now while we're up here we're going to import a few other modules we're going to use for this game so we're going to import time and we are going to import random like that perfect all right next thing we're going to do here is set up our pygame window now the first thing you need whenever you're working in pi game is some kind of window this is really the place where you can draw different objects and actually have your game running now for your window you need a width and a height so I like to Define my width and height at the top of my program in all capitals just that it's clear that these are constant values and they're not going to change so for the width I'm going to make this 1000 and for the height I'm going to make this 800 and that is in pixels now if you are working on a small display chances are this will be too large for you so you can make these values smaller so the window will actually fit on your screen okay now that we have the width and the height we're going to say win standing for our window is equal to pygame dot display dot set underscore mode and inside of here we're going to pass a tuple with the width and the height make sure you have two sets of parentheses here and inside of this intercept you have your width and then your height and make sure you spell the width correctly okay the next thing we can do is set a caption for our window this is going to be the name at the top of the window to do that we can say pygame dot display dot set underscore caption and then we're going to pass a string here and I'll just call this something like space Dodge but you can call this whatever you want all right before we go any further let's run our code here so I'm going to go and type Python and then main.pi whatever editor you're working in I assume you know how to run your python script in vs code you can also press this button okay so when I do that you'll notice the window kind of popped up and then it disappeared immediately that's because we don't have any Loop kind of running that keeps our program alive you can see again when I run this window pops up and then it closes in a minute we'll make sure that Windows stays live and I'll show you how to do that perfect so now that we have our window here our width and our height we need to set up what's known as the main game Loop now whenever you're working in pi game you need a loop typically a while loop that is going to run while the game runs right so that actually keeps it alive the while loop will do things like check for Collision check for movements or key presses and then adjust what's being displayed on the screen so what we're going to do is create a function called main this is really where the main game logic is going to exist for now we're going to create a variable called run we're going to say this is equal to true and we're going to say while run and then inside of here is going to be our main game Loop so the first thing that I always do inside of my game Loop is I check to see if the user pressed the x button on the window if they did that then I want to close the window it's not automatically programmed in you need to handle that key press yourself so to do that I'm going to say four event in pygame dot event dot get and this is essentially a list that contains all of the different events that have occurred in the last what do you call it kind of iteration of this Loop then what we do is check for the x button event so we're going to say if event DOT type is equal to pygame Dot and then in all capitals quit what we are going to do is say run is equal to false which will then end this while loop and we are going to break out of the for Loop because there's no reason to continue checking the events if you've hit the quit button then at the very end of our function here we're going to say Pi game dot quit and pygame.quit will just close the pi game window for us alright so very quick recap of what we've done here we've said run is equal to True while the variable run is equal to true we're going to check all of the different events that are occurring this again will give us events like key presses Mouse being moved all that kind of stuff as well as if we hit the button in the top right hand corner that x button which is the event.type equal to pygame dot quit that's if that's the case sorry we're going to say run equals to false we're going to break out of this for Loop and then that will force us to have this statement here which will quit the pi game window now what we need to do is call this main function so we can test this out we're going to say if underscore underscore name is equal to underscore underscore main like that then we are going to call the main function now what this statement is doing right here is making sure that we are directly running this python file so we're running the file itself we're not importing it because if we were to import it or if we were to not have this line for example and we were to import this file from another python file it would start running our game when we only want to do that if we directly run this python file so hopefully that makes a bit of sense but this is just checking if you've run this file directly whereas if you were to import it this is going to be false okay so now let's run our code python main.pi notice the window appears and it has space Dodge as the caption then if I press this x button we can close out of it that only works because of the code that we've written here fantastic so the next thing I want to do is have a background image and then I want to have a character that can move around on the screen so let's start with the background image well for our background image we need some image that we're going to display on the screen now notice here that I actually have one BG dot jpeg now this is a larger image which is just a space background all of this code will be available from my GitHub including the image so if you want to download this exact image you can do that by going to the link in the description if you don't want this image and you just want your own background image then just save an image you can call it whatever you want but put it in the same directory as your python script and then I'll show you how we can use that image as a background so at the top of our program here we're going to say BG sending for background is equal to pygame dot image dot load and then we are going to load the name of our file which in my case is bg.jpg like that that's all you need to do to actually load this image into pie game now if you named your something else obviously you're going to change the name to match that and if you had it for example inside of a directory then you would do something like slash Images slash and then vg.jpg there's a few other ways to go about doing that but in this case we're just going to load directly from the same directory that this python script is in okay now that we have our background image we actually need to put that on the screen now I like to do all of my drawing in a separate function just to keep it very clear and kind of organized so I'm going to create a function here called Draw inside of this function for now I'm going to draw this background image onto the screen to do that we're going to use our window which is this Capital wind variable and we're going to say win dot blit now blit is a special method that you use when you want to draw an image or a surface that's what's referred to in Python onto the screen so we are going to BLT the background image and then we need to pass the coordinates of the top left hand corner of this image so in pi game when we're talking about our coordinate system 0 0 is the top left hand corner of the screen so if I run my code here uh this should still be okay oops that's not working let's do this you can see that where my mouse is this is zero zero if I go all the way over to the right here now we are at whatever the width of the screen is which is a thousand and then the y coordinate of zero if I were to go down here now we are at the width of the screen which is a thousand and then the height of 800 or the height of whatever our screen is because that's kind of how the Y is incremented so rather than y going up the Y actually goes down zero is the top and as you go down to the bottom you increase your y value X is the same as normal starts at zero and as you go to the right it increases meaning down here we have an X of 0 and we have a y of the height of the screen okay so that's the coordinate system now I want my background image to fill the entire screen so I'm going to put 0 0 as the coordinate of where the top left hand corner of this background image should be placed then the width and the height will fill the screen lastly we need to say Pi name dot display dot update this is going to refresh the display which means any draws that we've done this is a drawing event will actually be applied and put onto the screen every time you update it takes all the draws and applies it if you don't have an update then nothing's going to happen on the screen fantastic so now before we exit our while loop here we're going to call this draw function so now every single frame we're going to call the draw function and it's going to continue to draw this on the screen let's go ahead and run our code okay so when we run it you can see that we get our space image appearing now in my case my space image is quite large so it actually fills the entire screen for some of you your image might be a little bit smaller and you might want to scale it up or make it larger so that it fills the screen now to scale your image you can do the following you can write High game dot transform if we can spell that correctly dot scale and then you can pass the image which in this case is the image that we want to load and then the size that you want to scale this image to so in my case I want to scale my image to be width height so it's going to be this now when you do this type of scaling it is not going to preserve the aspect ratio but there is different transform functions that'll allow you to look up from the documentation that let you actually scale it based on a factor so you can scale by 2x 3x 4X Etc rather than scaling using kind of this uh what do you call it width height system hopefully that makes a bit of sense but this will not preserve your aspect ratio if you use a different scale function it will there's one that I believe is scale 2x which just takes the image and scales it up two times the size okay so now this should scale our image to be the width and the height let's quickly test this out and let me just select this interpreter so this will keep working now so now you can see our image looks a little bit better we've kind of made it the exact size of our screen rather than having it be too large and overflow the screen okay so now we have our background image and we have our main event Loop we have kind of the screen appearing the next thing we want to do is create a character that can move around so let's do that so for our character we're going to go inside of our main Loop here and we're going to say player is equal to a pie game dot rectangle with a capital R and it's just going to be wrecked and then we're going to pass the X position y position width and height of our player so before I go here I'm going to create two variables one which is the player width which will make equal to 40 and another which is the player height which will be equal to 60. I like to declare all of my constant variables in capitals at the top of my program so I can easily change them and update all of my code by just changing one variable here so now I'm going to go to my player which is pygame.rectangle and we're going to pick a starting X and a starting y position for our character now remember that this is going to be the top left hand corner of where we are drawing the player so we can pick any x coordinate we want I'm going to pick 200 and then for the y coordinate we want this player to be at the bottom of the screen so to do this dynamically we're going to take the height of the screen and we're going to subtract the height of the player so we take height minus player height that gives us the top left hand corner where we draw this player so that means that since our height is 800 and our player height is 60 we're going to draw this at 740 meaning the bottom of the player will be directly at the bottom of the screen you'll see what I mean when we draw this but that's why I'm using this math here next we're going to pass the player width and the player height so it goes X Y with height whenever you're using a rectangle in pi game okay so now that we have our player we want to draw this player onto the screen so I'm going to pass this player rectangle to my draw function and then I'm going to go to draw and I'm going to accept my player rectangle now I'm going to draw it to draw my rectangle I'm going to say Pi game dot draw Dot rect and then the first thing I'm going to pass is where I want to draw a rectang well I want to draw a rectangle on my window so I pass window the next thing I pass is the color that I want my rectangle to be in this case I'm going to use red now in the newest version of Pi game which most of you will be using you can just use string colors so red white black orange any color you would know or you can use RGB so if I use RGB then that would be something like 255 0 0 where I have 255 red 0 blue and zero green RGB I think I read it in the in the wrong order red green blue yeah sorry so zero green and zero blue but you get the idea you can use an RGB color code or for Simplicity you can just write the color in which in this case is red okay next we are going to put the rectangle that we want to draw and that rectangle is our player so our player is a pi game rectangle which is an accepted argument to this method here so we say we're drawing it on the window it's a red rectangle and this is actually the coordinates of the rectangle right so it's at 200 it's at this height and it has this width and this height perfect now that we have that we should see a red rectangle appearing when we run our code there you go we have our rectangle showing up on this screen fantastic now that we have a rectangle we want to move it around now to move the rectangle is as easy as adjusting the x coordinate of this rectangle so let's have a look at how we do that the first thing we need to do is listen for different key presses so if the user presses the left Arrow key I want to move to the left which would be reducing its x value if they press the right arrow key I want to move to the right so I'm going to say keys is equal to Pi game dot key dot get underscore press now this will give you a list of all of the keys that the user has pressed and tell you well if they press them or not so what I can do here is say the following I can say if keys and sorry I said list I mean dictionary and then I can say Pi game dot k underscore left which is the code for the left Arrow key if that's the case then I can take my player dot X and I can subtract from that the player velocity which is a variable that we're going to Define now at the top of our program so we're going to say player what player Val sorry is equal to five let me just move this down okay so we're saying if Keys pygame dot k underscore left you may be wondering how I found this I just know it because I've used it many many times before but this is the uh kind of what do you call it code for the left Arrow key if you wanted for example the a key then it would be K underscore a or k underscore B or C Etc if you wanted like the shift key it's K underscore shift there's a whole um kind of documentation where you can look up all of the key codes from the pi game website you can also just look up Pi game key codes and you'll probably find a big list that tells you but the common ones are going to be like space shift c a w Etc or left right so on okay so if they are pressing the left Arrow key then we're going to subtract the Y the reason we subtract sorry not the Y the x is because we want to move them left so by subtracting their x coordinate we move them closer to the zero zero position so to the left that's why we're doing this subtraction now we have the player velocity set at 5 which means every time that you press this key we're going to go five pixels backwards you can adjust that velocity if you want the character to move faster or slower now of course we're going to do the same thing for the other Arrow key so pygame.k underscore right and then we say if I can get rid of that crazy autocomplete player dot X plus equals the player velocity one thing to note here when I use dot X that's simply adjusting the first value here so we start at 200 then we go back by the velocity or forward by the velocity right that's how you access that you can also access the width property and the Y property as well as the height property and that corresponds with the values up here okay fantastic so now we should be able to move our player because we have this movement code so let's run and see if we can do that and using my arrow keys you can see that I can move my player however it's moving extremely fast now the reason for this is that we haven't set up a clock or kind of a timer that regulates how fast our PI game Loop is running now for some of you if you're on a slower computer you're going to run that and be like oh the speed is fine it works okay the issue is that the speed that this while loop runs at is what determines how quickly our character is moving if I'm holding down the key and this while loop is running really really fast I'm going to move fast if it's running very slow say you're on a slow computer then this is going to move slow we don't want that we want this Loop to always run at the exact same speed so that no matter what computer you're on it's going to run at the same pace and your character is always going to move at the same speed to do that we need to set up a clock object so we're going to say clock is equal to Pi game dot time dot Capital C clock then we're going to go here we're going to say clock dot tick and then we're going to put 60 which is the maximum number of frames per second or number of times that you want want this while loop to be running so you create a clock object here and then inside of your while loop you have clock dot tick this is essentially going to delay the while loop such that it will only run a maximum of 60 times per second if you wanted to run faster obviously you would adjust this value to be whatever the fixed FPS value is that you would like okay now that we have clock.tick you'll notice that when I run my code my character now moves a lot slower so again you could speed this up by increasing the velocity and then no matter what computer you're on it's going to be moving at a similar or the exact same speed okay so we're moving but notice here that I can actually move completely off the screen we obviously don't want that for a game otherwise you can just dodge by going off the screen so we need to make it so you can't move if you're hitting the edges of the screen to do that we just need to come here to our conditions where we're checking if you're pressing the left Arrow key and right arrow key and add a guard Clause that makes it such that you cannot move if you're going to be moving off the screen so the way we do this is we add another condition here with and we say if Keys Pi game.k underscore left and we have the player.y minus the player underscore velocity is greater than or equal to zero now the reason we're putting this here is we're saying okay we're about to subtract the player velocity from the x coordinate so if when we subtract this the player is still above zero or greater than zero so their x coordinate is greater than zero then that's okay we can subtract this but if it's not so if we're going to be like negative 1 negative 2 negative 3 Etc don't let them move hopefully that's clear why we're doing that and that's why we have this code here now let's copy this and put the same thing here except now we need to change this a little bit because we're adding to the velocity or we're adding to the x coordinates sorry so we have player What DOT X apologies plus player.vel and then we're going to say plus player dot width and this is actually going to be less than or equal to the width of the screen now this one is a little bit longer because we have to account for the fact that player.x is the top left hand corner of our player so we need to add the velocity kind of like we did here but in the opposite direction because we're increasing it not decreasing it and we also need to account for the width again this is the top left hand corner then we have a width of in this case 40 pixels so we need to make sure the x coordinate plus the width plus the velocity is going to be less than the width of the screen before we allow the character to move to the right okay now let's run this and see if it works and notice when I go to the right here I can't move any further than the very edge of the screen and same with the left hand side okay we now have a character that is moving around the next thing we need to do is keep track of the amount of time that has elapsed we then need to create some projectiles that are coming down on the screen and then check for collision with those projectiles currently we're about halfway done if you're still following along at this point congratulations give yourself a pat on the back believe it or not most people do not make it this far alright so there's a few different kind of directions we can go in here in terms of what we want to write next but I think the easiest is going to be to handle the time so we know how much time has elapsed to do that we are going to create a variable here called start time start time is going to be equal to time dot time time dot time is going to give us the current time so we're going to grab the current time when the game started and then we're going to create another variable here called lapsed underscore time and make this equal to zero then beneath our clock.tick we're going to say elapsed underscore time and this is going to be equal to time dot time minus the start time so we're essentially storing what time we started the wall loop at then every time we iterate we're getting what the current time is and subtracting that from the start time which will give us the number of seconds that have elapsed since we started the while Looper since we started the game now that we have the elapsed time we can pass that to our draw function and we can draw the elapsed time on the screen so we're going to go to our draw function we're going to take elapsed underscore time as another parameter here and then we're going to draw this now to draw this we actually need to use a font because we're going to have text on the screen that says time you know two seconds three seconds Etc so what we need to do is initialize our font module create a font object and then use that font to render some text on the screen so at the top of our code we're going to say Pi game dot font dot init we just need to initialize the font module don't ask me why we need to do this it's a requirement from PI games we just do that at the top of our program then we're going to come down here and we're going to say font is equal to Pi game dot font dot sys font with this capitalization and then we can pass any of our system fonts in this case I like to use Comic Sans and the size of our font which I will choose as 30. you can change this to be whatever you want there's different types of fonts you can put in here no Times New Roman aerial Etc and then whatever the size is I'm just going to make it 30. so again the procedure is initialize the font module create a font object here and then use the font object to create some text which you can render on the screen so to do that I'm going to say my time underscore text inside of my draw function is equal to font dot render and then I'm going to pass the text I want to render now in this case I'm going to say time colon and then inside of my F string here I'm going to say round and then a lapsed underscore time and then I'm going to put an S here then I'm going to put a 1 and I'm going to put the color which is white don't worry I'll go through this slower I know that was pretty fast so we have render the first thing we do is pass the string or the attacks that we want to render on the screen now I'm using an F string available in Python 3.7 and above and this allows me to embed a variable directly inside of the string and have it rendered as a string so I'm saying time colon and then I'm rounding the elapsed time to the nearest second and I put this inside my curly braces so that I can directly use this variable in this round function then I put an S so that I have you know three four five whatever seconds next I put one one stands for antialiasing don't worry about this too much but it just looks makes your text look a little bit better and then you pass the color that you want this text to be in this case I want white okay now that we have our text we need to render this on the screen so we're going to say win dot bullet and then we're going to Blitz the time underscore text and the position we're going to BLT it at is 10 10. so just we have a little bit of padding from the top left hand corner of the screen 10 pixels x 10 pixels y just moves us a little bit off the edge of the screen so it looks a little bit better all right now we should be rendering the uh time so let's see if that works by running our code and notice that we have our time it is counting up uh and it will keep displaying whatever the current time is awesome so now that we have our time the next thing we need to do is generate some projectiles now we're going to generate our projectiles on kind of a counting increment where the increment at which we generate them gets shorter and shorter meaning we kind of generate more of them uh more quickly as the time progresses making the game a little bit more difficult obviously you can mess with this mechanic however you'd like but I wanted to show you how we do some kind of dynamic rendering here so we're not just putting one on the screen say every one second it gets a little bit more complicated than that all right so to do this we need to have a few variables we're going to say star I'm going to call those little projectiles stars even though I know they don't really look like them I'm going to say star add increment is equal to 2 000 milliseconds which means the first star that we add will be added in 2000 milliseconds then we are going to have star underscore count equal to zero and this is actually just going to be a variable that tells us when we should add the next star I know it's a little bit misleading it's not telling us how many stars we have it's going to be counting so that we know when we get to this increment and when we should add another start of the screen okay then we're going to have an array here called stars or a list sorry and this is where we're going to store all of our different stars that are currently on the screen then we'll draw all of them that are inside of this list onto the screen okay so at the top of our code here although it doesn't really matter where you put this we're going to generate some of our stars so we're going to actually say that our star underscore count plus equals clock dot tick now I know this seems a little bit weird but what clock dot tick does is return the number of milliseconds since the last clock tick so you need to actually do it in this way to keep track of the time accurately in my case it's about 16 or 17 milliseconds between every clock tick but for you it could be slightly different so we say star count plus equals clock.tick and what this is doing is essentially counting how many milliseconds have occurred since again the last clock tick you could use this elapsed time variable but it gets a little bit more complicated based on how we're kind of keeping track of the time with this variable I know that I'm probably confusing you a little bit again this just returning number of milliseconds since last tick so you do that um to keep track of kind of the precise time in this variable all right now we're going to say if the star counts is greater than the star add increment then we're going to add stars to the screen so hopefully you see what I'm doing here this is 2000 star count is zero as soon as we have 2 000 milliseconds that have elapsed then we trigger this and then we add a star now I'm actually going to add three stars at a time but you could add a random number you could add 20 Stars you could add one start you can add as many as you want to the screen so I'm going to say four underscore in range 3 because I want to add three stars and by the way this say placeholder variable that you use when you don't want to have an increment variable like I I don't actually care about the iteration count I just want to do something three times so I say four underscore in range three okay now I'm going to generate the X position of my star because I want to randomly position them on the screen so I'm going to pick a valid x coordinate and then we'll choose a y coordinate and place the star on the screen so star X is equal to random dot Rand int and then 0 with minus the star underscore width which is a variable that I don't believe we've defined yet so let's add that variable to the top of our screen here and make that equal to let's go with 10. okay so again star underscore X is equal to random.randint0 with minus star width now the reason we're doing this is because we want to pick a random integer in the range of 0 and width again minus star with which is a valid position for the x coordinate of the star that we are generating okay we can do this because we imported the random module at the top of our program we're then going to say star is equal to Pi game Dot rect and we're going to place this at the star underscore X and at the negative star underscore height which is another variable that we need to Define so let's go here and make this equal to 20. okay now the reason I'm doing this is I want my star to start off of the screen and then move down so when I do negative star height that means I'm going to get a negative y coordinate so my star starts not at the top of the screen a little bit above the top of the screen and then as we move it down it looks like it enters the screen if instead you were to put 0 here then you would see the star kind of appear right at the top of the screen and then start moving down instead we want to see it slowly enter the screen so we do that by giving it a negative height to start okay next we pass the star width and the star underscore height and now we add this star to our Stars list so we say Stars dot append star like that okay so this now generates three random stars for us now that we have that we want to adjust our star add increment and we want to set our star count back to zero so we say star count equal to zero and before that we're going to adjust this increment so that it's slightly less than what it currently is so we generate Stars faster to do that we say star add increment is equal to the maximum of 200 and the star add increment minus 50. okay so let's just quickly go through what I did here I'm essentially saying with this maximum function pick the maximum value out of this and 200. now this makes it so that the minimum star add increment I ever have is 200 right so if star at increment is equal to 200 rather than setting it equal to 150 then 50 then 0 the negative 50 we always keep it at 200 okay so this is just the minimum value that's what I'm setting here then in most cases what will happen is since star at increment is going to be much larger than 200 in the starting case is equal to 2000 we're going to subtract 50 milliseconds so that every time that this runs 50 milliseconds kind of faster we generate another star hopefully that makes a little bit of sense but we go from 2000 to 1950 to 1900 Etc and it gets faster and faster and faster the time in which we're incrementing a star and you can obviously adjust this and change it to be whatever you want okay so that will generate Our Stars for us however if we want to see our stars then we actually need to draw them on the screen and we need to move them downwards so we're going to do both of those steps before unfortunately we can see what's going to happen here so now after we generate Our Stars after we do our events and after we do our movements we're going to move our Stars so we're going to say four star in stars and then we're actually going to make a copy of this star's list the reason I'm making a copy of the Stars list is that I'm going to be removing stars from this list that have hit the bottom of the screen or that have hit our player if that happens if they hit our player hit the bottom of the screen we want to get rid of them because we don't want to be rendering them and uh moving them when they're not on the screen that's a waste of resources so I need to make a copy of this list because if I'm modifying the list while I'm working on it I can get all kinds of weird errors so rather than doing that I make a copy of it so that I'm looping through the copy and then I can adjust or mutate the original list as I go through this for Loop so I'm going to say star.y plus equal the star velocity okay so this moves the star downwards in the y direction by this velocity because we're adding to it meaning it goes down then I'm going to say if the star dot Y is greater than the height of the screen then what I want to do is remove this star so I'm going to say Stars dot remove and then I removed the star which will remove the first instance of this or really the only instance of it from the original Stars list nice next we're going to say l if star dot Y is greater than or equal to the player.y and the star dot collide rect player then we are going to remove the star again so star stock remove star and we're going to say hit is equal to true and we are going to break out of this Loop okay you'll see why I'm doing this in a minute but essentially what we're doing with the second alif statement here is we're saying okay if the star.y was not greater than the height then we're going to check if the start at Y is greater than or equal to the player Del y now the reason we're doing this check here is because I only want to check to see if this star is colliding with the player if the star is at the bottom portion of the screen so if it's in the same y kind of plane as our player if it's not there's no point in me checking uh if the star has collided with the player right it just doesn't make any sense because if it's way above the player I don't need to check for Collision because I know it can't be colliding and in fact I need to add something here start out y plus star dot height because again we need to account for the fact that the star has a height not just a y coordinate okay so we say start a y plus start at height if that is greater than or equal to the player.y then we're going to check if the star has collided with the player so since both of these are Pi game rectangle objects that allows us to use this fancy function called collide which just tells us if two rectangles have collided so if they've collided then I want to remove this star because it hit our player I'm going to set a variable hit equal to true because we'll then look at that variable later on to see if our player has been hit by a star okay now we just want to go up here and say hit is equal to false just so that if we do end up checking this variable later on we don't get an error where it's undefined okay so I know I've done a lot there but we started by generating all of our stars we then moved all of the stars now we need to draw all of the stars so I'm going to pass my stars to this draw function I'm going to go to my draw function and I'm going to start drawing them now it doesn't really matter where you draw them but if you draw them after the player they'll appear on top of them if you draw them before the player they'll appear behind the player so pick where you want to draw them I'm going to do it after so you can see it on top of the player okay so fairly straightforward here we're going to say four star in Stars High game dot draw dot rectangle on the window with the color white r star okay straightforward same as our player we're just doing it for every single start all right so that's going to be a majority of the game done let's run it make sure it works and then we'll handle showing something on the screen when the player gets hit by a star okay so let's run and you should see that we get some stuff appearing on the screen but it looks like we got an error so what is our error here it actually didn't show up for me so let me run this one more time and we'll wait for the error message and it says star velocity is not defined okay so that's a variable that we need to Define so let's say starvel is equal to three again feel free to adjust that to be whatever you want okay now let's try it and see if our Stars start moving and there you go three stars are generated and they start moving on the screen perfect and notice that they kind of disappear when they hit the player or when they hit the bottom of the screen okay fantastic so now the last thing we need to do is just put something on the screen that says hey you collided with a star you lost the game and now we'll be finished okay great so to do that we're going to go down to the bottom of our while loop here and before our draw statement we're going to check if the player was hit by a star so we're going to say if hit then we're going to do something now really all we're going to do is just generate some text that says you lost put it on the screen kind of delay for a few seconds and that'll be it and if you want to adjust this game and kind of make it longer add levels you can do that from here so we're going to say lost underscore text is equal to our font dot render you can make a different font if you want I'm just going to use the same one I'm going to say you lost exclamation point and then one and then the color of white okay now I'm going to draw this on the screen so I'm going to say win dot Blitz the Lost underscore text and I'm going to draw this in the center of the screen to draw this in the center of the screen we do the following we say width divided by 2 minus the Lost underscore text dot get underscore width which is a method you can use to get the width of your text object divided by two and then we do the same for the height so say height divided by 2 minus lost underscore text Dot get underscore height divided by 2. okay so let me just quickly explain why we're doing this we want this in the middle of the screen but we need to pick the top left hand position of the text that puts it in the middle of the screen so you might naively think that you can just do width over 2 because that's the middle position of the screen but you can't you actually have to get the full width of the text object and then divide that by two and subtract that from width over two right so if we have um can I kind of run this let's run this and see so let's say 500 is where my mouse is right if I draw my text it's going to go this direction from my mouse so I need to shift it back half the width of the text and then draw it so that it fills the screen completely in the middle and then obviously the same goes for the height okay hopefully that's clear uh that's why we're doing that all right so now that we've lit this on the screen we need to update the screen so Pi game dot display dot update then we are simply going to pause so we're going to say Pi game dot time dot delay I'm going to delay for 4 000 milliseconds which is four seconds and then I'm going to break which will break this while loop and will end the game okay so let me quickly run through we generate the text we draw it onto the screen now since I'm not doing this in the draw function I need to manually update the displace we actually see that appearing then we just freeze the game so this is just delaying everything for four seconds just so you can see the text and then we break and the game ends if you wanted to you could call the main function again or you could have the game Run a second time you can do whatever you want here you could say how long you've lasted whatever you can add a scoreboard but this is where I'm going to leave it for now so just run make sure this is working and then that's pretty much going to wrap up this tutorial okay so let's just see if we can Collide here and we do and notice it says you lost and then the game is going to end and we can run it again okay fantastic so let me zoom out a bit here so you guys can read some more of the code I'll kind of scroll through it slowly obviously all this code will be available from the link in the description at my GitHub but that was an introduction to python game development I hope that this was complicated enough that it taught you some stuff and showed you how to create a game yet simple enough that you could get through without too many headaches please let me know your feedback in the comments down below and I look forward to seeing you in another YouTube video don't forget to check out programmingexpert.io and blockchain expert which will be in the link in the description thanks again for watching and I'll see you in another one foreign