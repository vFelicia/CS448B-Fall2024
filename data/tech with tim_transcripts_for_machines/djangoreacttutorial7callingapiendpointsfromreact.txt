hello everybody and welcome back to another django and react tutorial video in this video we're going to be continuing from where we left off what we're actually going to be doing is making a view so we can look at room details so right now we're able to create a room you can see this is working this is fully functioning but now we need a way to actually view this room so how can we use this code to access the room so what we're going to do is set up a page that will allow us to go to something like slash room and then slash whatever this code is and then that will pull up the details related to that room and then from there we will allow users to join the room we'll add the media player which will allow us you know play pause we'll hook up with spotify there's a ton of other things that we still need to do i'm going slowly i want to explain everything that i can uh but yeah i just wanted to give you kind of an idea of where we're at and what we're going to be doing in the rest of the videos so let's get started uh the first thing that i want to do here is actually make a new component so i'm going to go inside of components and i'm going to make a component called room.js this is going to be responsible for handling the page that is simply like once we're in the room or we've created a room this is what we see so this is kind of maybe like the main application or the main page of our application uh so inside of here i'm going to say import react component from react like that then we're going to make our class we're going to say export default class we'll call this one room and that extends components like that and then we can say constructor this will take props like that we will need to call the superconstructor so we'll say super no not that not subtle i don't even know what that was something cryptocurrency okay super and then props like that and then inside of here while we're in here i'm just going to define the state that we're going to be using so i'm going to say this dot state equals and then what i'm going to put inside of here is votes to skip this will start at default i guess 2. it doesn't really matter what we put as the default here but we'll just put it at 2 then we need the guest can pause that will start at false we could make it true again default doesn't really matter and finally one new one which is is host and that's going to be default false so these are just the pieces of information that i want to know about each room obviously i want to know the room code as well but we'll talk about that in a second but i need the votes to skip i need guest can pause and i need if the user is the host or not let's define a render function down here and what we can do is just return and actually let's just return the state and just have a look at what that is so i don't know if there's an easy way to convert that to a string but we can just kind of do our own thing so let's return a div slash div we'll make it you know somewhat pretty just so we can see some things nice here so we'll say p and then end the p tag inside of here we'll add this dot state dot votes to skip and then we can just put maybe like a little prefix before this votes uh i would copy that but we're gonna have to write most of it so now we'll say guest can pause and that will be equal to this dot state dot guest can pause and then last one for host so p and the p tag and we'll say host and that will be equal to this dot state dot is host like that all right so now we have a component called room and what we're going to do is pretty much figure out how we can actually get to this page so how do we get to this room page now the way that i'm planning on handling this is having it so that we go to a url where we go to slash room and then slash the room code you can see that i've tried this out previously i have a room code there but for example we go to this code down here that we just typed in and then that would bring us to this room page so i'm planning on determining what the code of the room is by just looking in the url bar and i don't really care if it's visible in the url bar because well you need to know what the code is to be able to access a room so you can just access a room if you know the code by typing it in the url or by using our ui and we'll make a page that allows you to join a room and all that kind of stuff but ideally after you press this create a room button you should be redirected to a page that is you know has this code and represents that room so let's go now to homepage.js and let's set up a route to allow us to actually do that so i'm going to say root like that i'm going to say path equals then inside of here we'll go slash room and then slash colon room code now whenever you add a colon this denotes we're going to have a parameter in our url or we're going to have some kind of variable there and then i'll say the component is going to be equal to room and we'll have to import that so let's go up to the top before we forget and let's import room so let's import room from uh dot slash room semicolon like that okay so what's actually going to happen here is we've set up a route or a route whatever you want to call it that allows us to go to room slash and then whatever the room code is and then we have a component equal to room now the way the react router works is it will by default pass some props to our room component here that will have information relating to how we got there so it'll actually give us a prop called match match pretty much tells us how it matched the url we went to with this string here and that will give us access to the parameters from this url and from that parameters we can grab room code and well we can see that so to show you that let's go to room.js and i'm just going to write a variable here that says this dot room code and that is going to be equal to this dot props dot match dot params dot room code so match is the prop that stores all the information about essentially how we got to this component from react router so that's what react router does it adds match as a prop to this component when it's rendered and of course we can access the room code from the parameters of the url so now let's simply show the room code i guess we can show this in maybe a heading let's go something like h3 and then inside of here we don't even have to say room code we can just show room code because i think we'll know what it is so we'll say this dot room code all right so now all we have to do if we go to home page we can see we set up this route so let's go to urls and let's set one up on the back end just to make sure we don't crash when we go there so we're going to go to path and then this is going to be room slash and inside of here i'm going to say string room code just setting up a dynamic url and that will bring us to index so this is very similar to what i just did inside of react it's pretty much saying hey we'll accept any string here after room uh that's really all there is to it it's just a dynamic url i think that's what they're called if you want to be an int you would put int right you put whatever the python representation of the object is colon and then whatever you want the name of the parameter to be we don't really care in this case but i'll just keep it consistent at room code so now let's just give it a shot and let's go to slash room slash and let's actually go to the code that we already used so that one right there and if we paste we can see that we get the room code votes guests can pause and host uh now it's strange it's not showing me guests can pause and host i can look at that in a second but you can see it showing us the room code at a minimum now i just want to show you something if i go to hello notice that this works any string works so we will need to forbid people from going to a page where a room does not yet exist but that's something that we'll do in just a second all right so now that we've done that we have a way to actually get to that room uh we need a way to get these other details right we need the votes to skip we need guests can pause and we need is host uh or not and yeah so how do we do that well what we have to do is we have to send a request to our backend for this information so what we're going to do is give our backend the room code and then the back end will look at that room code find the room and then give us the information that we want which is votes to skip guess can pause is host and maybe anything else so let's go to views.pi inside of api and let's make a new view that can do that for us now before we do that i need to thank algoexpert for sponsoring this video and this series in my opinion algo expert is the best way to prepare for your coding interviews or to learn data structures and algorithms extremely fast now an interesting fact about algo expert is that i actually teach on the platform so if you're preparing for your coding interviews and you want to hear even more of my voice then head over to algo expert and use the code tech with tim for a discount on the platform the link is in the description so what we can actually do is go right here and we can say class room retrieve like that or we can say like get room you know what maybe get room makes more sense it's easier to type too let's say class get room this is going to inherit from api view just like we used for the create room view and then inside of here we're going to define two things we're going to find our serializer class which is going to be equal to the room serializer and then we're going to define our lookup underscore url underscore quark standing for keyword argument and that's going to be equal to code so essentially what this means is that when we call this get room api view and we call it with the get request well that's what we're going to be using we need to pass a parameter in the url called code and that code will be equal to the room that we're trying to get so we'll say define get we'll say self we'll say request and then we can say the optional format equal to none then here the first thing we're going to do is we're actually going to get what the code is from the url so we're going to say request dot get dot get and then self dot look up underscore url come on if you can type properly url underscore quark like that and sorry this should be equal to that's probably why i wasn't getting the autocomplete uh but when you look at request.get this is giving you information about the url from the get request when i say dot get we're looking for any parameters in the url and i'm looking for one that matches the name code i'm going to get that and that will tell me essentially what that parameter was equal to so now i'll have access to the code and then i can look up the room by the code and well we can go from there so now i'm going to say if code does not equal none so just make sure we actually do have a code here that was passed in the url then what we'll do is we'll say room equals and well we'll have to filter all of our room objects and figure out which room has this code so we can simply say room dot objects dot filter and then inside of here we'll say code equals code now since code is unique that should always give us the correct value or it should always give us sorry what am i saying now since code is unique that should always give us only one value so we'll just have to make sure that we do indeed have a room and then if we do we can grab that value out and do what we want with it so if we do have a room we'll say if the len of room is greater than zero then we will say that our data is equal to room serializer we're gonna serialize the room zero so the first entry in our room and then we're gonna get the data from that so this is strange but what i'm doing is i'm serializing the room we know that there's only gonna be one room right so we can just access it at room zero and then i'm taking the data which will just kind of be like a python dictionary and kind of extracting that from the room serializer so typically if we were to just return the room serializer which i think we have done if you look here i'm returning the dot data right so here i'm just storing it a variable instead and now i'm going to add some things to it like for example is the user the host of this room so now what i'm going to do is i'm going to say data and then we're going to actually pass is underscore host or we're going to make is underscore host as a new key inside of our data and that's going to be equal to the following expression so self dot request dot session dot session underscore key is equal to room 0 dot host now the reason i'm doing this is because the host is going to be the session key of whoever is the host of this room so i can check our current session key so whatever user sent this request and see if it's equal to this and if it is that means that this user is the host if it's not that means they are not the host so i can just store that in a key called is host on my data it's just a python dictionary so i can simply add it to that like what i just did and then i can return a response and in the response i can return my data and i can say status equals status dot http underscore 200 underscore okay now in the situation where this is not true we don't actually have a room then let's return a response that says no there is no room there so we'll say return response instead of returning data we'll return our own kind of custom object here and we'll say bad request and then this will be equal to invalid room code and actually we can say instead of that we'll just say room not found invalid room code and then for the status we can say that is equal to status dot http underscore 404 because we did not find the room so 404 just means you know like not found you've probably seen a 404 page before uh next if none of this is true so in the situation we actually weren't given a code in the url then what we need to return is that hey you know we didn't get the right data so we couldn't give you something so we're going to say return response inside of here we can say bad request and then we'll say code parameter not found in request something like that and then just say status equals status dot http underscore 400 underscore bad request all right so that should be our get room class now let's hook that up with an endpoint so let's go to urls let's go here and we'll make a new path we'll simply call this one get hyphen room and then i guess we'll import the get room so like that and get room dot as underscore view all right so that should work so let's actually go to our url here and let's try this out so i'm going to say api hyphen get room question mark and then i'm going to pass the code equal to when you put a question mark that's saying we're passing a parameter essentially or like some variable and let's just do this with hello i don't remember what the code was so let's pass it as hello and notice it says room not found invalid room code now what happens if i don't pass a parameter well we get code parameter not found in request and then if i do actually pass a valid one well i'm gonna have to find it now api rooms or what was it api room okay let's just look for this one that we created so we'll steal that api get hyphen room question mark code equals that and there you go we see we get the information that we wanted as well as this thing that says is host and that is equal to true so now all we have to do is send this request from our javascript and we'll be able to update our state on our room page so now i'm just going to make a method inside of here called get room details and all we'll do inside of here is simply fetch the details that we want so we'll say fetch and then we'll fetch slash api slash get hyphen room and then we'll add that to question mark code equals plus this dot room code because we have that there and that should be a string so there we go that is the request that we want to send then what we will do is say dot then response arrow function and we can do whatever we want inside of here which is just going to be return the response dot json now i don't think i actually need to write return i think i can just do that yeah that's perfectly fine we'll just say response.json just kind of a trick here when you're doing an arrow function that's only one line so you only have one thing it just assumes that whatever you write after the arrow if you only write one thing and there's no squiggly brackets then that's what's going to be returned so if i just write response.json without the return statement it just assumes that's going to be returned then i can do another dot then so i'm going to say dot then i'm going to say data so this will get the response.json and that will then go to actually a full function and what we'll do inside of here is we'll say this dot set state and inside of set state we'll say votes to skip and that's going to be equal to data dot votes underscore to underscore skip because remember it's passing those keys to us as underscores because in python we use the snake case and then we'll say guest can pause colon data dot guest underscore can underscore pause and then is host will be equal to data dot is underscore host okay so now we actually have a function that can simply get for us the room details so what we will do now after we have the room code is we'll say this dot get room details now that will update the state for us and then hopefully that will make it or that will sorry not hopefully it will force a rerender whenever this is done being called when we set the state and it should show us the details about the room if we go to a room with the correct code so let's go here i'm just going to steal this code and now rather than go to api get room let's go to code or code what am i saying let's go to room slash and then paste that in there okay so it's still giving us votes too guests can pause nothing host nothing um technically this is right i just went back and looked at uh what the votes for this room actually were and it is too uh but i want to make sure that we actually see all this information so i'm just going to quickly convert this information to a string so i'm going to say 2 i think it's literally just two string yep so it does look like it's two strings so i'll put dot 2 string here and then i'll put dot 2 string here as well just so we can actually see those values let's go back here now let's do a fresh and we get yes the host is true and guess can pause is true and votes too so that is indeed working we're getting the correct information that's being updated on room all right so now that all of that is working let's go to the create room page and let's make it so that when we press that create room button it actually redirects us to the correct page so what we're going to have to do is go to the function where it handles the button pressed we're going to have to redirect right here so you see notice we just have data constant log data we have to redirect our user to the web page that's corresponding with slash room slash code so to do that we're going to say this dot props dot history this is another one that react router will automatically add to the props when it renders this component and we're going to say dot push and what we're actually going to do is push to slash room and then slash plus not this sorry data dot code now i think it comes in just straight as code but this should give us the room code so we'll go to room slash wherever the room code is so we can test this out let's go to the create page so let's close this and let's go to create and now let's simply create a room and notice that it redirects us to this room so that's awesome let's now change the votes to be like four let's say no control create room and notice that boom this gets updated votes for guests can pause false so yeah that is all i wanted to show us in this tutorial video in the next video what we're going to be doing is working a bit more on this room page let me go to it here just making it obviously look a little bit better we may or may not add the media player i think it's a little bit too early to do that but i also want to work on the join room page we've got a lot of stuff to do i'm not quite sure exactly what we'll tackle in the next video but it'll be something along those lines of you know joining the room uh or you know making this one look a little bit prettier or whatever that may be so anyways i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next tutorial video