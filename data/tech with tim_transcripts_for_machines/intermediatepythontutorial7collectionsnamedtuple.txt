hey guys and welcome back to another video in today's video I am gonna be continuing with my intermediate Python tutorials and we're gonna be moving on to something called name to tuple or tupple whichever one you prefer which is a part of the collections datatype or module class whatever you want to call it so in the previous video I introduced you to kind of to the collections module in Python and I showed you counter which is really useful today I'm going to be showing you named tuple which is another data type or class whatever you want to call it within that module and pretty much this is the description of it I'm just going to read it right off of the documentation here because it explains it better than I could come up with so let's go ahead and do that named tuples assign meaning to each position in a tuple allow for more readable selfdocumenting code they can be used wherever regular tuples are used and they add the ability to access field by names instead of position index so you should understand a bit of that but if you don't obviously I'm going to go through exactly how this works and how we can use it so the main difference between a name tuple and regular tuple is you could access things by element and it's just a lot nicer to read in your program so they might come in handy if you're coding large things or other people are gonna be reading your code so let's go ahead and first off start by importing collections like this and we're just gonna from collections we are going to import named tuple okay so now that we've done that what we're going to do down here is I'm just gonna create something that I'm kind of gonna go and show you what exactly it says so I'm just making a new variable point I'm gonna set it equal to a named tuple with name point and then it's going to have fields XY and Z and I'm gonna show how this works okay so what I've just done here is I've said point is going to be equal to a new object which is a named top pole or tuple the name of the tuple is point and it has fields XY and z now this looks a little weird you might be confused what we're gonna do whatever we want to create a new point that is in the form of this name tubule is we're gonna treat this like a class and we're gonna do some like this one so a new P is equal to point and that we need to give our parameters so in this or argument so in this case an XY and Z so we're gonna say three four or five like so now you might be looking at this week X Y Z this is one string this might be the name of one parameter the way that this works ends actually really useful is that it's automatically gonna break up this string XYZ into three different parameters so I'm just gonna print this to the screen to kinda show what I mean here so I'm just gonna print new P and you can see that we have x equals 3 y equals 4 and Z equals 5 now what happened here is when we gave an iterable object as our different parameters you can see that we get it just breaks it up by a space so I do something like Gy and then I run this here you can see now Gy is equal to 4 I can add another one on the end like H oh and then we're just missing one argument so I'd have to add another number in here so that we get H is equal to 8 I can also do the same thing with a list per se so if I have a list and I want all these to be the names of it this is my X Y and let's just do like L and we run this takes Fortner okay I keep forgetting to fix this anyways you can see we get X Y L any iterable object will work I'm not exactly sure how a dictionary works but I'm pretty sure it takes the keys so let's just go ahead and have a look at this one we'll just say X 0 y 0 said 0 now this might crash but I just want to see if this actually works oh yeah it does work so it just takes the key names ignores the value so we get x y and z and then I guess you can do the same thing with any other iterable object but those are the only ones I can think of that are useful right now so anyways we want to create a new tuple or a new name couple what we're gonna do is just say whatever the name of that's gonna be is equal to point which we've set up here to be this type with these like parameters attributes and then we just give it those parameters now there's a lot of really cool things and methods that go along with this name to tupple and that's why it's useful so first of all you can do something like this new px new py and new P lips touch zenlike so and now this is gonna do is it's going to allow us to access each element by its index so by its name which you can't do with a regular temple so you see we get three four or five to the screen like that and we can use the same operations that we use on basic tuples so I knew something like new p0 like that and it's my mud thing just popped up somewhere else and you can see we get three because that's the first one that shows up we can also print this so it looks in the form of a dictionary so I'm just gonna say underscore is dict like this I believe this is the method all right not is ass sorry and when we print this to the screen you'll see what shows up and it says an order dictionary and it gives us a list and then it gives us the all the tuples within so X 3 y 4 z 5 kind of a different form if you wanted to play with that and use that we can also print out all the field names which is useful say you forget the fields into new P dot and then fields and it gives us a tupple with those fields in it the next method that we can use is the replace method this one's pretty straightforward but all you have to do simply is type I don't know let's see here new P dot underscore replace and just make sure you guys remember to put these underscore here all the methods pretty well for this required underscore don't ask me why but that's the way they're written they need to underscore and then you're gonna put a key name so say I wanted to replace Y I can say it equals to 6 so we'll run that and then if I just go here just to show you that we did change that let's print new P like that and you can see oh why did not change two to six that's weird listen let me just see if I print this to the screen if it's gonna change it should've worked new P like so let's check and Y is not changing to four that's very interesting why that is not working ok so it's not a quick look at the documentation and the reason why I can't do what I'm trying to do here with this replace is because this doesn't actually change the tuple object it's not capable of doing that so what we have to do is we have to assign a new variable or a new object to that so pretty much what this does is it returns a new named tuple which we then can set to in this case the same name it's gonna do the same thing that we tried to do except we just need this new P equals to hope that makes sense so now if I run the program we can see that finally this is working we are changing X or I was just trying to change Y before but I switched it to X to see if there was an issue there you could see that that is working like that so anyways that is pretty much it I'll show one last method here if you guys are still watching so pretty much we can do something like a new a new point so say P 2 is equal to point dot underscore make and then I'm going to put a little list in here let's say like a b c now what this is gonna do is same similar thing to up here is it's just gonna automatically grab all of these elements in our list and assign them to XYZ accordingly in our named tupple so you can see if I print Peter to the screen now and we give it a run no errors and things where I can find x equals a y equals B's that equals