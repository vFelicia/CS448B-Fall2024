hello everybody and welcome to another c plus plus tutorial for beginners in this video i'll be covering maps now a map is an associative data structure that allows you to associate a key with a value so this is a different way to go about accessing elements and it has some kind of efficiency benefits which i'll talk about in this video so as i was saying what a map allows us to do is access elements based on a unique key not based on something like an index or indices so when we were looking at an array and we had maybe three four five six the way we accessed these elements was based on the order in which they were in the array so the first element was accessed with index zero second with index one so on and so forth and the order in which these elements appear really mattered that was the way that we accessed them and well it was maintained in this structure if i had elements that were 3 4 5 6 every time i look at this array i'm going to have 3 4 5 6 in that order now what this means is that we can maintain the order of elements which is great a lot of times we want to do that we want to know which element was in which position and what not but this also means that if i want to say look for something in this array i want to determine if the element say 7 exists i need to look through every single element in this array to determine whether a it exists or b it doesn't what i mean by this is the following if i have this array and i ask you does element 7 exist and you need to write code that tells me if element 7 exists you cannot be sure if that exists or not until you look through the entire array so if you look through the array and you find element seven you can immediately stop and you can say yes i found element seven it exists but if it does not exist you need to look through every single element to tell me it doesn't exist because if you just look through half the array what's to say it couldn't be in the other half if you look through every element except one what's to say it's not that last element right and so what that means is that if you're searching for something in an array this is what's known as a linear time operation if the array gets larger it takes you longer to search for now of course there's some exceptions if the element's the very first element in the array and you're looking from left to right you'll find it immediately but if we're talking about kind of a worst case scenario we can always assume the element either doesn't exist or is at the end of the array and in that situation however long the array is well that's how long it's going to take you to tell me if this element exists or not now this is different in a map in a map the order in which elements are inserted does not matter and it's not maintained so if you're using a map you need to be sure that you don't care about the order of different elements however this gives you some efficiency benefits this actually means i won't go into exactly how this works you can access an element and determine if it exists in constant time really what that means is that it doesn't matter how big the map is if the map has two elements or if it has 10 000 elements kind of generally speaking you'll be able to determine if an element exists almost instantly no matter how big the map is so this is a huge kind of efficiency booster if you're writing some type of program that's kind of searching for something or looking for something or needs to access or change an element and you're not sure if it's actually there in the map so let me show you kind of a visualization of a map you have some key these keys will all be the same type but they can be any type that you want so in this case i'm picking a char or character as my key and then a value this value again can be any type that you like but all of the values must be the same in this case the value is set so what i'm doing here is just making a map where i have a t and that maps to seven and s and that maps to maybe eight and then we have maybe a lowercase a and that maps to four now obviously i haven't actually like fully created a map in the way we would in c plus plus but this is kind of what a map looks like we have what's known as pairs these pairs have two attributes on them they have a first and a second so the first here is the key the second here is the value and will you use this key to either change or access this value and i'll show you some examples later on anyways though let's actually create a map so i'm going to copy this because i'll use this in a second but we first need to include the map library so i'm going to say include and then map all right so now i'm going to say map i'm going to do my two angle brackets i'm going to say int or i'll do whatever my types are sorry so my key is going to be char my value is going to be int i'll give the name of my map and if i just wanted to make an empty map i didn't want to put anything in it to start i would just stop like this and now i've declared a map now if i wanted to initialize this map with a value i would say is equal to and then this is exactly what i would type i would do two curly braces and then whatever my kind of pairs are i would write in this kind of format where i have curly brace my key comma my value closing curly brace comma and then the rest of my pairs so let's just run this make sure we don't have any errors all right everything is good and well now we can continue so first thing to see here how do we access an element in a map well to do this we use a similar notation to what we use for an array so i would say c out mp which is the name of my map and then here instead of an index i would say my key so i'd say maybe s now i can do end l uh oops we just need a one semicolon there and if i run this we get eight right because s maps to eight if i do a we get a 4 because a maps to 4 and t obviously we get a 7 because well t maps to 7. awesome that's basic that is how you access the element associated with a key now what happens if you try to find a key that doesn't exist well if i do something like mp and maybe u notice that we just get 0. the reason we get 0 is because this key doesn't exist and so when it tries to find what's associated with u it's just returning us to us whatever the default value of this type is which is a 0. and so the thing is though this doesn't really tell us that u doesn't exist because you could theoretically map to the value 0. and so if we want to check and kind of get a true or false value to determine if a key actually exists what we need to do is kind of something special which i will show you in a few minutes anyways just keep that in mind that if you do something like this and the key doesn't exist it's not necessarily going to throw an error it's just going to give you some value that's kind of meaningless like this 0 doesn't really tell us anything because if we don't know if it maps to 0 or if 0 is just the default value and it's returning to us because z u sorry doesn't exist in the map anyways let's continue so now what i'm going to do is i'm going to add you to the map so to insert an element into the map you can say mp you can say the key you want to insert and then it's equal to and then let's just do like 9. so now if i do this you're going to see that we get 9 here because well now the key u exist in the map now there's another way to insert keys into the map i'll show you this it's called mp.insert and what this takes is a pair so this here is kind of the unformal notation of a pair now the way you actually create a pair you kind of initialize a pair if you're doing it in the most seepless plus structured typed way is your right pair you write the two angle brackets you write the two elements you want in the pair in this case i'm going to say char int because it needs to match the pairs that are in my map and then i would do the name of the pair although in this case i don't really need to and then i would just do the parentheses and i would put the elements i want in this pair so i could say maybe s or let's do a like j and let's make that map to 5. so now if i look at j after adding the semicolon here you're going to see that we get the value 5. so this is how you create a pair notice that i could have done something like this i could have said pair char int and then say something like p1 and then do this and then i could actually insert the pair p1 into this map and while the same thing would work this would be fine the only difference in this line here is i need to give my pair a name because i wasn't just immediately using it somewhere i'm kind of storing that this pair p1 exists and has these two values in it so hopefully that's kind of clear but this is what a pair is now what i want to show you with the pair though is that a pair has two attributes on it as i said a first and a second so if i'm looking at p1 and i look at its dot first that's going to give me j right and if i look at its second that is going to give me five and so all of the elements inside of your map really are pairs like that's that's actually what they are and so whenever you're accessing a kind of pair in the map you can look at the key and the value by looking at the dot first and the dot second property so hopefully that's clear but that's obviously how you insert a pair into the map now what i want to show you is a few other things that we can do so these are kind of the two ways to insert elements but now how do we erase an element well to erase an element what we can do is say mp dot erase and then we can put the key that we would like to erase so in this case i will erase the p1 dots first that is going to be the j right and now if i try to access from my map the uh oops mp let's access the key j you're going to see that we will get oops we need a semicolon sorry about that you'll see that we get a zero because we deleted this key from the map so that is the way you can erase keys use erase you use the key that you would like to erase and then it will remove that pair awesome next thing we can do is clear a map so to clear a map you can say mp.clear this will effectively do the same thing it just removes everything from the map so sorry not removing an individual key just completely emptying the entire map so i say mp.clear notice we get a zero here because obviously well the map has nothing in it so the key j is not there there's another thing we can do we can check if a map is empty so i can say mp.empty this will return to me a 1 if it is empty and a 0 if it is not so we should get a 1 here because yes the map is empty however if i remove this clear and now i look at it the map is not empty and so we get a zero now next thing we can do is look at the size of a map so into mp.size this gives me the number of pairs that are in the map in this case that is five and that is kind of the basic maybe methods on a map all right so the next thing i'm going to show you how to do here is how to iterate through the values in a map so remember that a map does not store the order in which elements are added and when we want to access or check if something exists we can do it relatively in constant time meaning that it doesn't matter how big the map is we'll be able to find something or change that thing pretty much instantly anyways how do we loop through a map well i'm going to write a for loop out here and i'm just going to write out what we would need to do to iterate through it then i'll kind of go through step by step and explain what i'm doing so i'm going to say auto itr is equal to this is going to be mp dot i believe this is begin and then i'm going to say itr does not equal and then it's going to be mp.end and then i'm going to say plus plus itr so i know this is probably extremely confusing but let's go through it line by line so mp.begin what this gives us is what's known as an iterator object now these are a little bit confusing but the idea is whenever you have a collection data type so a data type that stores more than one element typically they implement something called an iterator what that means is that you can use this iterator to kind of loop through this structure because you can't just kind of set up your own for loop and maybe count from zero to four right going through all the indices of the map that doesn't work because you don't access elements based on their indices so instead these data structures have an iterator now when you say dot begin what this gives you is an iterator object this iterator object has access to the first pair in the map now i want to clarify here you do not know what the first pair is going to be the reason you don't know is because the map does not maintain any specific order and so when you say mp.begin you cannot be certain where you're going to start but you know that you will be given the first pair in the map based on however it's storing the different elements and then when you increment the iterator what this will do is move this iterator to the next pair and then to the next pair and that's the next pair so on and so forth and eventually when you get to mp.end this tells you you have iterated through the entire map so there is this dot end thing and well as soon as the iterator reaches this mp.end this means you finish the entire map you've looped through it you can stop and so these are the two things that you can use not just on maps but on a lot of other kind of collection data structures that store multiple elements for example you can do this on a tuple as well to determine or to be able to loop through the the structure now there's some other fancy things you can do with this i won't really go into those but when you're creating a for loop and you're iterating through something that is not straightforward to iterate through like you can't just do it like you would an array essentially then you need to use the dot begin and the dot end you need to increment the iterator as you normally would and the reason i put auto here is because this type is kind of complicated what the type actually is is mp colon colon iterator i believe that's correct actually we can test this out and see if it works but anyways i didn't want to write this out because i don't want to explain exactly like how the iterator works and where this type comes from and all of that so if you're unsure when you use the iterator you can just use auto and it will just infer the type based on whatever this returns so i'm going to leave it actually i'll leave it this and then we can change it back to auto if that doesn't work okay so now what's going to happen is i'm going to be given a pointer to all of these different pairs so itr will be equal to a pointer to the first pair a pointer to the second pair and a pointer to the third pair hopefully you guys understand now why i wanted to show you maps later because we need to understand pointers first but what that means is if i actually want to access the elements in this pair i must dereference it so if i say c out and i just try to see out itr we're going to get an error so if i run this nothing works mp is not a class namespace or enumeration okay interesting uh let me look at this i'll be right back ah okay so i made a little bit of a mistake here i shouldn't have said mp instead for the actual type of this it is map the two types that you have so char comma int and then iterator and then that is the type for itr so yeah i made a mistake but this is actually what the type is it's whatever the map is that you are holding so whatever the pairs are and then colon coolant iterator now if i run this um you can see that iterator it or rate well if i spell iterator correctly then hopefully that'll work okay so there we go now that's working the error is now on this line not on this line anyways that's not what i really wanted to show here the whole point is that i can't just print out itr like this just doesn't work reason doesn't work is because this is a pointer to an object and well even if this was the object itself we can't just print out a pair we need to print out either the first element or the second element so anyways my whole point of showing you this is that itr is giving you a pointer so if you want to actually access say the first element or the second element what you need to do is first dereference error and then you can access the first and second kind of member or attribute of the pair so if i try to do itr.first you're going to see we get the same problem here we just cannot access dot first because right now we're on a pointer and we're trying to say pointer.first and well that's not defined that doesn't exist that makes no sense and so instead what i have to do is go asterisk i can put this in parentheses and then dot first and now we get all of the keys right because now we've dereferenced this iterator so it's no longer a pointer it's actually the object and then we have dot first so we're getting all of the different key values that are in our map now of course we can do the same thing for second so i say itr dot second and we get eight seven four five nine and notice here that uh this is not in the order in which we inserted elements right like we're getting eight first even though seven was the first element uh and then yeah we're getting five fourth even though this is the last element we inserted so just to prove to you like you can't be sure of what the order is now there is something that's a little bit shorter than doing this we can actually write iter arrow second now what this arrow does is exactly what i just wrote so the arrow is equivalent to dereferencing itr and then doing dot second so this is completely equal to itr arrow second it's kind of a shorthand notation just to make things a little bit faster so whenever you have a pointer if you want to dereference it and then access some attribute associated with that element what you do is you just use the arrow so in this case this is a pointer to a pair the pair has this dot second thing that we can use and so since we need to dereference it we just use the arrow and then that allows us to actually access this uh it's called a member of this class or of this attribute now i'm using a ton of fancy words here you don't really have to know what they mean just understand that this is kind of known as a method or a member or an attribute and people use those words like interchangeably all the time anyways that's the point of what this arrow notation does so if i do this now we see this still works again it's just dereferencing this then accessing the element all right so i'm going to print this out we're going to do iter first and then iter second awesome there you go we can see we get the key then the value the key then the value so on and so forth all right so now what i want to do is kind of give you a basic example of when you would actually use a map now the example i'm going to give you is something that you actually might be given in like a really simple coding interview question speaking of which if you are preparing for coding interviews you should check out the sponsor of this video and the series which is algo expert as you guys know algo expert is the best platform to use when preparing for your software engineering coding interviews c plus is a language on algo expert and so if you want to practice your programming problem skills make sure you look at algo expert from the link in the description and use the code tech with tim for a discount on the platform all right so let's resume now what we're going to do is we are going to create a string so let me actually erase all this i'm going to say string i'm going to say test is equal to i'm going to say hello world my name is tim and i'm just going to do a bunch of repeated characters here and what i want to do is i want to count the frequency of all of the characters in this string so i want something that tells me the character and the number of times that it occurs now if i was doing this without a map what i could do is maybe make an array or i could try to do something where like i associate a letter with a number and like it would be kind of hard to do this and what i would have to do is loop through this string a bunch of different times every single time looking for an h then an e then an l then an o and so on and so forth whereas what we're going to do here is use a map we're going to loop through this string one time and we're going to create a map that tells us the character and then that character maps to the number of times it occurs in this string so we're going to make a map we're going to say map we're going to say char int is equal to all right so we're going to call this freak like f r eq and then we'll just make this empty now what i'm going to do is i'm going to iterate through this string so i'm going to say 4 into i equals 0 i'm going to say i is less than and then well how do you get the length of the string again i forget maybe a cell length maybe it's not size we'll see and then i plus plus or plus plus it doesn't really matter all right i'm going to say char letter is equal to and then this is going to be test at index i and let's just start by printing this out to make sure we haven't made any mistakes here so i'm going to say c out letter and l okay so let's run this and invalid use of member length i totally forget how you get the size of the string maybe it's dot size we're just going to experiment here let's try dot size same problem i think i need the uh parentheses at the end let's try it out length and there we okay so that actually works though okay so now if i go through here you can see we're printing out all of the different characters so hello hello my name is tim or hello world my name is tim and then ttthhhaaa okay awesome so now we've gotten all of the letters so what i want to do now is i want to kind of count the number of times that they occur i'm going to use the map to do this the idea is i'm going to check if this letter exists in the map if it does i'm going to change the key associated with that letter to be one greater than it was before so by default you can imagine that all of the letters are in this map and they have a key equal to zero so as soon as i see this letter i want to go on the map increment the key by one and then continue and then if i see that letter again i'll increment the key again by one and again by one and so at the very end my map has all of my frequencies so the way that we do this is we need to first check if this uh what we call it if this letter exists in the map so i'm going to say if and here i'm going to say if and we will do freq dot find and then this is going to be letter does not equal and this is going to be freq dot end i'll explain how this works in fact actually i'm going to say is equal to then what i'm going to do is say map at and this is going to be letter is equal to zero okay so when i write dot find what dot find is going to do is return to me an iterator that points to the pair in the map that has this key and so what this will be equal to as i said is just a pointer right this pointer is really just an iterator like we saw when we were iterating through the map and if i wanted to access the pair associated with this key i would need to dereference it and then look at the first or second member so the idea here is that if this returns to me the freq dot end it returns to me the ending iterator that means that this letter does not exist in the map and so this is kind of how you check if something exists in the map or not you say whatever the name of the map is dot find now if this is not equal to the end that means okay you have found this letter in the map but if it is equal to the end that means that this letter does not exist and therefore it's giving you the very end of the map that's the return value right and so if this is the case if we're getting the end we're going to say map at letter is equal to zero so we're inserting a key and sorry this should say frequency which is equal to whatever the letter is that we just found and we're setting that equal to zero and then what i'm going to do down here is say frequency at letter plus plus now this is equivalent to plus equals one this is equivalent to is equal to freak at letter plus one all of them are the same thing but plus plus is kind of the shortest and most common way to do this all this is going to do is take the key value or take sorry the value at letter and just add one to it and that's how it's going to work so now let's actually just see out fr eq at letter let's also see out like a comma here and then let's see out what the letter is so we'll see out uh letter and then end up so now we can kind of see as it as it's counting so let's do this and notice that what we get is one h one e one l two l one o one space this is like an empty string one w two o one r three l right it's counting and giving us the frequency all of all of these letters and so now that we have this frequency what we can do is print out the frequency of all the letters that occur so i'm gonna say four i'm going to say auto itr is equal to and then this is freq dot uh begin i'm going to say wow itr does not equal freq dot end and then i'm going to say plus plus itr all right now what i'm going to do is c out i'm going to see out whatever the letter is so in this case i will say itr arrow first and actually before i do that oh no actually we'll just do it like that and then i will add a colon a space and then i will uh do the frequency so i will say itr and this is going to be second and then end l okay so we're just iterating through the map we're going to print out the letter a colon to kind of separate it from its frequency then the frequency and then end line so if we look at this now you can see that we now have the frequency of all of the things we have six spaces right we have one exclamation point one h four a's one d two e's two h's two eyes three l's and i mean i don't need to read all of them you guys get the idea all right so that is kind of all i need to show you with maps hopefully this was a decent example to kind of bring a lot of the stuff we've done in this series together and kind of show you why we would actually use a lot of the stuff that we've seen anyways if you guys enjoyed make sure to leave a like subscribe to the channel i will see you in another youtube video