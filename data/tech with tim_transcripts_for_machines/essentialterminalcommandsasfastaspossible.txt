in this video i will share with you some essential terminal commands that all developers need to know this will act as a very fast overview of the most commonly used bash commands and ideally refresh your memory if you have some experience with bash or alternatively introduce you to some new commands by no means you need to be a master when using the terminal but you do need to be able to navigate work with files and directories quickly search for text and overall be comfortable with the command line tools i'll cover all of that in this video and if you'd like to learn even more you can check out my course programming expert dot io where not only do i teach you bash ides version control and software design but i also teach you fundamental and advanced programming concepts in go and python that link is in the description and with that said let's dive in so to start let's briefly discuss what i mean by terminal now on windows your default terminal is going to be called command prompt or powershell and on a mac or linux operating system it's just going to be called terminal now the commands i'm going to show you here are known as bash commands and they'll work by default on a unixbased operating system like mac and linux now these commands will be very similar on windows but they may not work exactly as is shown if you're using command prompt or powershell however there is a piece of software called get bash which i'll leave a download link for in the description and this lets you use bash commands on windows so for this video i'll be showing you all of these commands in git bash on my windows operating system now generally speaking the commands you'll want to be familiar with are bash commands so if you're a windows user then download git bash and stick around because you'll need to know these commands so now that we've gone through that let's start looking at some of these commands so in front of me i have get bash open now the first thing you're going to want to have a look at here is the path that's being shown kind of at the top here if you're on mac or linux it's probably going to be shown to the left of where this dollar sign is anyways you can see that i have my user which is tim and then i have at and then this is actually the name of my computer now you may or may not see this depending on the type of environment that you're in but usually you will see a user so this is my user and i'm at tim workstation because that's kind of the computer that i'm signed into continuing i have ming w64 you can ignore that just because of git bash and how this works and then i have the path where i'm currently located now the one thing you need to understand about terminals is that you're always in a certain location so you're going to start in what's known as the user's home folder and that's represented by the tilde now the way that we can actually view where we currently are is we can type pwd which stands for print working directory now when we do that it's going to tell us where we are and if you're seeing the tilde here again that means you're in the user's home directory now the home directory on windows is going to be in your c drive users and whatever the name of your current user is and on linux it's going to be in slash home and then slash whatever the current user is on mac i'm not exactly sure where it is but it's probably in a similar location to those two anyways the tilde means your home directory now that we know that let's have a look at how we can actually change the directory that we're currently in because that's kind of how we navigate in the terminal so to do this i can type cd which stands for change directory followed by the directory that i want to go into now i know in this tim folder that i have a desktop so i can do something like cd and then des and when you hit the tab key it will automatically complete whatever the key is or whatever the word is that you're trying to get into so in this case i type des the only thing that is there is desktop so when i hit tab it auto completes and if i hit enter here notice that my path changes so now i'm in tilde slash and then desktop so if i go back here with pwd print working directory you now see we are in desktop next command we can have a look at here is simply clear this just clears the terminal if you're working in command prompt then cls is actually going to clear that for you so in your bash you're going to do clear and if you're on windows it's going to be cls if you're in command prompt or powershell continuing here we want a way to be able to list what's currently in our directory now to do that we can use the ls command this stands for list so if i do ls you can see all of the different directories and files that are inside of this directory right here in this current path now the ls command has a few other options as well we have ls hyphen and then we have a now this stands for all and it's going to show us all of the files including hidden files so if i do ls hyphen a we'll get the same thing that we got before except this time if there was any hidden folders or files we would see those on here anyways let's clear this and let's look at one more command we have ls hyphen l now this is going to give us a long view or a detailed view so when i do this it gives me all of the same stuff that i got before except now i have the date these were modified or actually this might be created i believe it's modified though i then get the permissions associated with this and whoever owns this directory or file i'm not going to go through all of that but that is the long view now you can also use this on an individual directory or file so i can do something like ls hyphen l and then if i put a directory here like youtube code it's going to give me all of the contents of here in kind of this long viewer detailed view in my term okay so that is the first few commands you need to know those are the most common now we're going to deal with actually creating directories creating files and how you kind of you know manipulate different directories and files so i'm inside of my desktop here and the next command we're going to look at is mkdir now this stands for make directory and this does exactly what it says it makes an empty directory so for now let's make a directory and just call this tim so mkdir tim and then let's cd into this directory so oops cd into and then tim the reason why when i hit tab here this didn't auto complete is because i had other directories that started with capital t now let's clear the screen print the working directory and we're inside of the directory tim on our desktop okay now that we're here let's have a look at how we can create a file there's multiple ways to create a file using bash commands but the way that i like to use is touch now touch is a command that's just going to create an empty file for you so i can do something like touch test.txt when i do that and now i type ls you'll see that this file exists now there's multiple ways to edit this file i'm not really going to talk about that in this video but there is a few editors like vi vim nano uh you have a few other ones as well but if i do something like nano test.txt it opens up this nano text editor and you can start actually editing the file again i'm not really going to go through nano in this video let's just quit this though for now okay clear okay so that is how you make a directory and how you make a file now let's have a look at how you actually rename a file or move that file around so let's just start here by creating a new directory i'm going to say mkdir and let's just go with something like logs for now and if i type ls i now have my test.txt and logs so let's now move test.txt into the logs directory the way we do that is by using the mv command which stands for move now we're just going to type the name of the file that we want to move or the path to the file in this case it's in the current directory so i just put the exact name like this if it was in a nested directory say the logs directory i would do something like logs slash test.txt it would access it access it sorry in the same way anyways we have mvtest.txt i want to move this into the logs directory so i type logs i hit enter and now when i type ls that file's been moved into logs so if i cd into logs and i type ls it's inside of here and we have successfully moved the file now the next thing i'll show you is how we rename a file to rename a file we can use the move command and we can say mv the name of the file we want to rename and then simply the new name that we want to change it to since we're in the current directory we can just write something like tim.txt and now what this is going to do is just move this file into the current directory so it'll be the same directory we're currently in with a new name and this new name is tim.txt when i do that and i type ls i get tim.txt that's the same file as before we've just renamed it alright so now that we've seen how to rename files move them around perform some basic navigation in our terminal what i want to do is show you how we can copy files copy directories and some more advanced commands so first of all let's see how we move to the parent directory right now i'm in logs right we can see that up here we can also do pwd and we see where our current working directory is now if i want to move to the parent directory of this current directory which is simply the one that contains it i type the following command which is cd dot dot now a single dot in bash references the current directory two dots in bash references the parent directory so if i type that it brings me back to tim now that i've done that i can type ls we see that we have the logs directory so let's make a new file here let's see how we copy the file and then how we actually copy directories as well so to copy the file or to make a file let's say touch i will go with another one of test.txt and let's see how we copy this now so to copy this we're going to use the command cp standing for copy i'm going to put the name of the file i want to copy and then the location and new name that i want to copy this file to so if i wanted to copy it simply into the logs directory i could just do logs like this and it would copy it in but if i want to change the name of it maybe i do something like logs and then a dot txt now when i run the command if we type ls and then logs notice that we have a.txt and tim.txt and a.txt is simply a copy of the currenttest.txt moved into the logs directory that's how you perform a copy now let's see how we copy the logs directory itself because this is a little bit different so let's clear the screen so ls we see that we have logs now maybe we want to move this logs directory or copy it and move it to our desktop as opposed to this tib folder well to do that i can type cp and then i need to use this flag hyphen r which stands for recursive and you use this whenever you're trying to work with the directory so you'll see this quite commonly but if you get some type of error saying that you can't do something because the directory is not empty try adding this hyphen r flag and usually that fixes the problem for you for now though i'll do cp hyphen r logs which is what i want to copy and then where do i want to copy it to well i want to copy it to the parent directory so i'm just going to type dot dot like this and hit enter and now if i type cd dot dot and then i type ls we should see that we have a directory here called logs and we do now i don't know why it's giving us a capital here but let's cd into logs let's ls and then oh we actually have a bunch of logs because i already had a logs directory so it simply took whatever was currently in my other logs directory and copied it into the existing logs directory not exactly the behavior i was going for hopefully this makes sense so essentially i already had this directory created and so when i tried to copy the contents of logs to my desktop it just took all of the files from that logs directory and placed them in the existing logs directory interesting behavior to show you anyways that is how you copy a directory all right so we've now had a look at a bunch of different commands now i want to show you how we delete files and how we delete directories so let's go cd dot dot let's cd into the tim folder again let's type ls we see we have logs and test.txt now let's see how we would remove say test.txt to do that we're going to use the command rm standing for remove so we're going to say rm and then test like this dot txt and that will allow us to delete this file when i type ls now the file is gone now let's see what happens if we try to do it on logs rm and then logs notice i get an error says cannot remove logs it is a directory now to fix this we can use that flag i was talking about which is hyphen r and now that will remove the directory and now that's gone all right so there you go that is how you remove now one important note here some of you may have to type the command sudo before all of these commands to be able to execute them if you are not the root user or an administrator user on say a mac or windows machine so if you're getting some type of errors here should have mentioned this earlier but i'll throw it in now use the command sudo this doesn't work on windows because it's not really set up properly but on mac and linux the sudo command stands for super user do and this will allow you to execute any command assuming you have the correct permission okay so that is what i need to talk about there next we're going to get into a few commands that allow you to view the contents of files as well as search for different text inside of files so the first command i'm going to show you here is something called cats now this stands for concatenate and there's actually multiple different use cases for this the use case i'm going to show you is how you view the contents of a file but you can actually use it to concatenate to the end of the file to concatenate the contents of one file to another it's a bunch of advanced usage i'm just not going to get into all of it in this video anyways the most simple usage is to do something like cat and then put a file now i've just created a file this file is called tim is great and when you do this it will give you the contents of the file so you guys can read through this and agree or disagree anyways continuing here we have a another command which is called head now head is gonna by default i believe give you the first five or ten lines of a file so if i go ahead and then tim is great.txt i get all of the contents of the file it's only five lines if it was longer we wouldn't see the rest of the content but again i forget if it's five or ten i'll put something up on the screen that clarifies that however for head we can use a another argument here called hyphen n we can then pass the number of lines we'd like to view and then the name of the file so i go ahead hyphen n2 tim is great this is going to give me the first two lines of the file now that's what i get tim is great as you all know there's a bunch of other advanced usage again i won't go through all of that right now now just like head we have another command here and this is called tail works the exact same as head except from the end of the file so when i go tail hyphen n2 tim is great it's going to give me the last two lines of the file so that's what i get right there and again by default i believe this shows you the first five or sorry the last five or the last 10 lines of the file all right so now that we've looked at those commands the last two commands i'm going to show you have a lot of advanced use cases and i'd recommend you look them up on your own or check out a course like programming expert the first one is called grep and what this allows you to do is search for text inside of a file now the basic usage of it is very easy to understand you can just type a string something like graph tim and then put the name of the file you want to search in so something like tim is great.txt and it's going to give you all the lines that contain this search string however you can use this grep command to look for regular expression patterns you can look for all kinds of advanced stuff you can search in directories you don't just have to search in individual files again please look this one up there's a lot of usage don't want to get into it here because this is just a quick overview so now that we've looked at the grep command we're going to move on to another command called find now find is useful for searching for files or directories within a specific location so let me show you the usage again there's a lot more advanced usage so you can look that up on your own if you'd like but i'm going to type find i'm going to place the location that i want to search in now if it's the current directory notice here i'm just on my desktop then i would type dot but if i want to look inside of a specific directory then i need to type actually the name of that directory now i believe i have a directory called youtube code so let's look inside of there and then i'm going to do hyphen name which means i'm going to be searching based on the name of a file or of a directory and i'm going to put a regular expression pattern here which is going to be astrix dot and it will actually go with pi now this is going to give me all of the dot pi files inside of the youtube code directory there should be quite a few but let's hit enter here and then it's going to give me all of the ones that i have currently it's just searching because it is going to search recursively through all of the directories contained within this directory so you see we're getting a bunch of results here uh once this is done i will be right back okay so it's just finished there and you can see we have a ton of different results because i have a lot of python files inside of that directory but it gives me all of the ones that match that filter alright so with that said i think i am going to wrap it up here now i know i did not go in a ton of depth about all of these commands there's a lot more stuff that i could have covered but if you are interested in learning more about these commands i do have an entire tutorial series on linux for programmers which i will leave in the description and throw up on the screen i also have my programming expert course which will give you a lot more advanced usage and some more real world kind of examples and questions where you can test your knowledge with that said if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another one