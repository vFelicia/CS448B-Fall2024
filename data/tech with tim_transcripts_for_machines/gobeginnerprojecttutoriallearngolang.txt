hello everybody and welcome to another youtube video so in today's video i'm going to be teaching you the basics of go while applying everything that we learned directly into a project so rather than sitting through 20 or 30 minutes of theory and then working on something i'm going to teach you a very basic concept we're going to immediately apply that concept right into our project and every new concept that we learn is going to be kind of like the next aspect of the project so this is going to be a learn by doing tutorial i find this kind of the most engaging and fun way to actually learn a new language and i will mention here that this tutorial is designed for beginners so whether you've never written a line of code before or you're coming from another programming language that's completely fine i think you're really going to enjoy the go programming language in fact it's one of my favorite languages i'm going to show you everything you need to know assuming zero experience in this language last thing i will mention is that if you are a beginner or intermediate programmer you may want to check out my new product programming expert this is something i've been working on for about six months with the algo expert team we just released it last week and this is an awesome platform to learn to code and teaches you pretty much everything you need to know to get up to a software engineer level in program anyways you can check that out from the link in the description programming expert dot io enough of that let's go ahead and get into go programming all right so i'm here on the go website homepage and i just want to give you a quick introduction to this language before we dive into the code so go otherwise known as golang is actually a pretty new programming language that was invented or created in 2012 now it was made by three employees at google to kind of fix some of the problems that they were having with their standard languages or their official languages now back at that time in google the official languages they used were python c plus plus java and most likely javascript and a few other languages and the issue is that working in something like c plus plus or java is very time consuming it's not very efficient but you do get a ton of speed and performance benefits from those languages then on the other hand you have python which is very quick to develop in but is super super slow even though it has very simple syntax so the developers at google said hey we need something that's kind of going to bridge the gap between these languages and give us something that is very quick and easy to write in but still has high performance so that is kind of why go was created and so you're going to see when we start looking at this the golang is a very simple language the syntax is very easy to understand it's actually very similar to python but there's a ton of performance benefits goling is actually a compiled language and it's very very fast to compile and to run now goling is also a strongly and statically typed language which makes it great for working on larger projects now the main use cases of go is pretty much on serverside applications so writing stuff like apis website backends any type of performanceheavy applications and especially multithreaded applications as well because of the concurrency support now i'm sure this probably means nothing to most of you because you probably beginner programmers if you're watching this but i just want to give you a very quick introduction and talk about the main benefits of go going why it was actually created all right so now that we've talked about that i can run you through the environment setup steps for go so what we're going to do is go to the download page for go which is right here i'll leave a link to it in the description you're just going to click on the appropriate operating system so linux mac or windows you can run through the steps right here if you want but really all you need to do is just click the download link that will be up here again for linux mac or windows double click the installer run through it it should install and setup go for you and then what we can do is download our text editor or code editor which is going to be visual studio code so downloading go is one thing but we actually need a place to be able to write our go code in and for this tutorial i'm going to use vs code now you don't have to use this if you have your own code editor or text editor and you understand how that works you can use your own however if you are new to programming or you're new to go then i would recommend that you just download vs code because then everything i do in this video will apply for you as well anyways i'll leave a link to this in the description you should be able to just click this button and it will download the appropriate version for your operating system again run through the installer and then open up visual studio code and we'll start working with go alright so at this point in time i'm going to assume you've successfully installed go and vs code the installers are very straightforward you just need to run through them and click next as many times as is required and now i'm going to ask that you open up vs code or whatever your text editor is so now i'm inside of vs code and mine will probably look a little bit different from what yours looks like the first thing we want to do inside of here is we want to open up some type of folder where we're going to write our go code so what i've done is i've gone to file i've clicked on open folder right here and i've selected a folder where i have this notes.txt file which is just my notes for this video now you can open up any folder that you'd like you can also make a new folder by just clicking on new folder like that and then making the new folder now i'm going to delete that because i don't need the new folder and i don't want to open up a different one anyways just open up a folder and then you should see on the left hand side of your screen here that you have kind of a file view and you can see the folder is open now you won't have anything inside of your folder so what you can do is make a new file by clicking this button right here and making something like tutorial dot go now all of our go files are going to end in dot go so any code that we want to write that's go code needs to go inside of a dot go file anyways for now i'm going to call mine tutorial you can call yours whatever you'd like just make sure it's one word because if you add any spaces then this might be a little bit different or kind of mess you up for the future steps in this video so for now i'm going with tutorial.go as soon as i make that file we should see that it opens that up in our editor here and this is where we can start writing our code however before we can do that we need to install an extension for vs code so vs code comes very lightweight it doesn't come with a lot of features you actually install the features as you need them so if you look on the left hand side here we can go to this extensions pane it's kind of this grid with a square coming out and what i can do is search go in the marketplace search which is at the top of this window so i'm going to search go notice go shows up right here and then what i would do is click install obviously i already have mine installed and so it's showing me disable and uninstall but install this extension it may require that you restart vs code and then we'll be ready to actually write some go code okay so let's go back to the file view which is right here and i'm going to click f11 on my keyboard i'm on windows which is going to make this full screen so whenever we're writing go code the very first thing that we need to do is we need to define what package this code is inside of now for now you don't really have to worry about what this means just write this line and leave this at the top of your file otherwise you will get an error so i'm just going to say package main again i can't really explain this to you because it's pretty complicated and it has nothing to do with what we're about to write but this is required at the top of all of your go files you write package and then the name of the package that this go code is going to be a part of essentially packages are directories that contain a bunch of go files and these go files are called modules and you can use multiple go files within one program that's way too advanced for us to look at right now for now just understand package main is kind of a required line at the top of your program okay so now that we have package main what i'm going to do is import a library that we're going to use here to be able to output stuff to the console so i'm going to say import and then inside of double quotation marks i'm going to say fmt now this is something you're probably going to import in all of your go programs this allows you to actually output stuff to the console and to collect user input again you don't have to worry about exactly what this is doing for now but it just gives us access to some tools that are built into the standard go library again to output stuff and to actually collect user input all right now after we have this we're going to write the following line and i'll break down what this is so we're going to write func what this is doing is defining a function again you don't have to understand what a function is we're then going to write main make sure the name is main here if it's not main you're going to mess up your program then you want to have an opening parenthesis and closing parenthesis and an opening curly brace and a closing curly brace now this is the entry point for our code all of the stuff that we want to execute when we run this go file we're going to put directly inside of this function now you don't really need to know what the function is but it's pretty much an executable block of code and by naming this function main this makes it the entry point of our program so this will automatically be run everything inside of the curly braces here when we run our go code so for now i'm going to show you how we can print out hello world to the screen then i'm going to show you how to run and build this go code and then we'll talk more about what all this stuff is doing so i'm going to say fmt inside of here dot print ln this stands for print line make sure you get the capitalization correct because that's important and then inside of double quotation marks i'm going to say hello world exclamation point because this is our first go program so we're always going to print out hello world whenever we're writing our first program anyways fmt.printline hello world what's going to happen when we run this go code is this is simply going to be outputted to the screen so we know something is actually happening great we have officially written our first go program so now i'm going to save the file and i'm going to show you how we can run this code so what we need to do here is we need to open up our terminal or our command prompt so i'm going to drag from the bottom of the screen here and notice that i have a terminal open now if you are not using visual studio code you're just going to have to open up a terminal if you're on mac or linux or open up your command prompt if you're on windows now inside of here you should be able to run the command go so i'm going to click go where i'm going to type in go and hit enter and we should see that something is being outputted now for some reason this go command is not working you may have messed up your installation of go or you may need to restart vs code or restart your terminal or command prompt and then try running the command again all right so at this point in time i'm going to assume that your go command is working and now i can show you how to run this file first though i will mention that go is a compiled language now what that means is that what we have in front of us right here can't actually be executed by our computer we first need to translate this into a lower level language specifically an executable binary file that our computer can understand and run so that means that we need to run this through a compiler now compiler again is just going to take this source code the source code is the code that we've written here translate it into another language and then that language that new file that we're going to get can actually be ran directly by our computer now this is great because this means if you don't have go installed on your computer but you have access to a compiled go file you can still run this program so unlike languages like python we don't need to have python installed to be able to run python code assuming that in this situation here the go code has already been compiled anyways i want to show you how to run this i apologize for all of the explanations so let's just go into our command prompt or into our terminal and let's run the following command which is go run and then the name of the file that we want to run so notice the directory of my command prompt is in the folder where my go file is if you're using vs code and you open up the terminal it will just be here by default and what i'm going to do is go run and the name of my file now when i do this it's going to take a second and we're going to see that we get the output hello world awesome there we go we have just ran our first go program so what this command actually did for us is it compiled this code into the executable binary code and then ran that executable binary and then immediately deleted that after the output of our code was given to us because we used the go run command instead of another command that i'm going to show you which is the go build command now a lot of times what you want to do is you want to take all of your go code you want to package it up into that executable file and then you want to give that executable file to someone else or allow someone to run it so if that's the case you can actually compile this code manually without running it and you'll be given that executable file so let me show you what i mean if i type go build and then the name of my file so in this case tutorial.go go you're gonna see that it's actually going to give me a dot exe file inside of the directory where i ran this command now if you're on linux or mac you're gonna get a slightly different file the extension is gonna be dependent on the operating system but in this case i now have a windows executable go file and the way that i can run this file is i can double click it if i was in my file explorer or i can just type the name of it so i can type tutorial.exe hit enter and then it's going to run this code and this will work regardless of if i have go installed on my system or not now if you're on mac or linux the way you're going to run this executable file is you're just going to type dot slash and then the name of the file which most likely will be tutorial or whatever the name of your go original file was so in this case mine was tutorial.go so i get tutorial.exe or if i was on mac or linux i just get tutorial but if you named it like hello then you would get hello.exe or whatever hello and no file extension anyways mac and linux just do dot slash in the terminal and then you can run it you also should just be able to double click that file and it should run as well okay great so i'm just going to clear my terminal here and move this down to the bottom of the screen now that we understand how to run our go code we have our environment set up and we've looked at our low world program i can start talking to you about some more interesting things in go alright so now that we've gone through all of that i want to start by discussing the project that we're going to work on and then actually starting to build the project so the project we're going to work on is a quiz game now that means we're going to write a program that asks the user a bunch of questions takes in the answer of those questions tells the user if they got it correct or incorrect and then how many questions they got correct at the end of the quiz as well as like their percentage so if they got 85 we're gonna print that out anyways this is going to be a really good beginner project and teach you a ton of different basic go laying concepts okay so for our quiz game the first thing i want to do is probably welcome the user to the quiz game i probably want to say hey welcome to the whatever type of quiz it's going to be and then maybe i want to ask the user for their name and greet the user to the game okay maybe that's something that we want to do so i'm going to start here by just printing out welcome to my quiz game now feel free to make these as custom as you would like all of the strings that you're printing out in this case i'm just making them simple to save time in the tutorial okay so there we go pretty straightforward we now are printing a new line that's what print ln stands for and this is what we're going to print now before we can move any further i need to talk to you about variables and data types so a lot of times when we're writing code we want to store something in a variable now a variable is really just a container that allows us to store a value or some type of data inside of it so since golang is a strongly and statically typed language that means when we declare a variable we actually need to define the type of data that this variable is going to hold which is going to lead me to data types in one second for now though i'm going to show you how we make a variable which is pretty easy we do something like var we then give the variable name so maybe i call this variable actually name and then we declare the type that this variable is going to hold now in this case i'm going to say string and i'm just going to make it equal to tim but i'll discuss what this means so what i've done is i've just made a variable the variable is called name it has a type of string and i've assigned it the value of tim that means if i were to print out the variable name it would print out tim because name is storing tim pretty straightforward but that's what variables do they store values for us and we can then access those values or change the values of variables later in our program all right but let's talk about what this is right here because this is the data type of this variable and this is very important in goaling so a string is the first data type that we'll look at and really it's anything that's surrounded in double quotation marks so a string is really a sequence of characters this here is a string right welcome to my quiz game that's a string something like tim that's a string something like one two three instead of double quotation marks that would be a string something like underscore hello world that's a string again anything wrapped in double quotation marks is going to be a string okay so that's our first data type pretty straightforward now other than a string we have ins now an int is simply any whole number so something like 21 something like negative nine something like one thousand all of these are ins otherwise known as integers great other than that we have uint now a unit stands for an unsigned integer this simply means any positive whole number now zero is included as well but really when we have a uint an unsigned int we just can't have something like negative 9 or negative 2 or negative 3. that's invalid because this here is the sign which is negative and while you can't have that on an unsigned integer okay great now other than that we have a float now i actually have to do float 64. i'll discuss what this is in a second but float is really any floating point value any value that has a decimal in it so if i have something like 2.0 this is a flow because we have point o that's the decimal part of number the floating point part right if i do something like 2.1 again that's a float if i do something like negative 92.3 that's a float because we have a decimal in it it doesn't matter if it's something like dot zero or dot zero zero zero zero zero whatever it's just if you have a decimal that is going to be a float now the reason why i needed to add a 64 here is because when you define a float you need to pick the precision for this float now i don't want to talk about this too much but putting a 64 here says that we're going to use 64 bits of our computer's memory to store this flow so don't worry about that too much but just understand that when you do define a float you need to specify the precision or the number of bits that are going to be used to store the float and by default we're just going to go with float 64. now we also have the option to use something like float 32 but float 64 is what we'll go with for right now again don't worry about that too much a float is just anything that has our floating point decimal number okay awesome and just to mention here something like negative 2.8 that's totally fine negative value that has the floating point is still a float all right so now we have covered uint int float string and we need to talk about bool now a bool stands for boolean and this is one of two values either true or false okay that's the only two things that we can store in a boolean value or in a boolean type sorry true or false great we have now gone through the core data types in golet now there's a few other data types as well but they're not going to be covered in this tutorial because this is meant for beginners all right so now that we've done that let's just declare our name type again so we're going to say var name string is equal to tim there we go we now define the string data type that stores the value tim now the reason why this is important here well we need to put the type of this variable is because once we define this variable name as type string we can't store anything inside of this variable that's not a string so i could theoretically do something like name is equal to joe this is fine what i'm doing is i'm changing the value of name now to store joe but i can't do something like name equals 23. the reason i can't do that is because 23 is an int and an int is not a string and i cannot change the type of this variable once it's defined so actually i want to demo this to you so if i go here and i type in go run and then tutorial dot go you're gonna see that we get an error it says cannot use 23 type untyped int as type string in assignment again because 23 is not a string so we can't assign that to the string variable all right hopefully that makes sense now i'll just show you that if i do something like hello and i run this we're actually going to get an error but the error is going to be different than we expected so if i do this now it says name declared but not used so what this is telling me is that it was fine for me to assign hello to the variable name because hello is a string but since i didn't use the variable name i'm getting an error now this error is pretty unique to go but in go whenever you declare a variable you need to use that variable somewhere you need to actually access the value of it otherwise you get an error because if you don't use the variable what's the point of having it in your program go is going to yell at you and say hey you need to actually use the variable otherwise there's no point in having it defined so what that really means is that i need to do something like fmt.printline and then i can just print out the name directly and now since i'm actually using this name you'll see that when i save the code and i run it we no longer get an error and it's going to print out the value of the variable name okay hopefully that makes sense we've just really quickly covered variables now the thing is in go they realize that it can be really annoying to have to define the type of every single variable that you make and sometimes it's not so easy to actually pick what this type is it could be very complicated so that's why they have another way to define variables that implicitly defines the type for you so this is the following syntax name equals and then something like let's actually just go with a legit name which is tim so this syntax right here the colon and the equal sign is actually going to implicitly guess what the type of this value is right here and then assign that as the type for this variable so this is the exact same thing as doing var name string equals tim except now we don't need to manually declare that this is a string instead golang will actually do this for us it will look at this value it will determine that this value is a string because it knows what a string looks like and then it will just manually make the type of name equal to string rather than requiring us to do that now we also don't need the var keyword because we're doing it in this format hopefully that makes sense but this is kind of the shorthand notation and this is actually what's recommended in goaling to define variables to make your life easier so just to show you that i'm not lying if i run the code here we'll see that we get the same thing as we did before and we're not getting any errors because this type is now string it's implicitly guessing that and doing that for us all right so now that we've gone through that i want to talk about some more advanced ways to print stuff out to the console because right now we've just been using print line which just is going to print something and then it's going to put whatever we print next on the next line right that's why you see that we have this kind of empty line at the end of the program because it's printing something and then it's going to print what's called a new line character which will move the cursor of the console down one line so the next thing that we print happens on the next line anyways let's look at how we would print something out like hello tim how are you doing now i want to use whatever is stored inside of name in this case i have tim inside of name and i want to print out hello whatever the name is in this variable and then how are you doing so how would i do that well there's a few ways that we can go about doing this but the way i want to show you is using something called printf now printf allows us to actually embed variables and expressions directly inside of what we're going to be outputting so let me just show you an example then you'll see what i mean so i'm going to say hello i'm going to say percent b comma and then how are you doing question mark now notice percent v is actually being highlighted in purple that's because this is a special character that's actually going to take the value of whatever the next argument is that we pass through this printf function now this here is known as a function what it's going to do is it's going to take in some arguments arguments are the things that we're passing to the function so this string right here as well as this name now when i do something like percent v this is saying okay this is a placeholder for the value of whatever the variable is that you put to the right hand side here so since i'm passing name and i have percent v now name whatever the value of it is in this case tim is going to be replaced with percent v and we're going to print out hello tim how are you doing so let me show you what i mean let's go go run tutorial dot go and notice we get hello tim comma how are you doing nice now let's change this to something like joe okay and let's run the code here and we get hello joe how are you doing now percent v is just one of the many placeholders that you can use and i'll show you that you can use multiple placeholders in one expression here so let's say i wanted to print out tim like five times or something or let's just go with two times and i could add another percent b here and i would just have to put another variable on the right hand side of this print f so that i'm saying okay name is going to replace this and then name is going to replace this as well so let me show you this i'm going to go run tutorial.go and i get hello joe joe how are you doing hopefully that makes sense now let's make a new variable so let's say something like number or actually let's do something like age colon equals and then let's go with 21 that's my age and i will say hello and then whatever the name of the user is and then i will just tell them what their age is so i'll say you are and then we'll go with percent and not age sorry percent v like that and now i can say name and i can say h okay so let me now run this and we see welcome to my quiz game hello joe you are 21 and then i really don't need a question mark there i could put something like an exclamation point okay hopefully that makes sense percent v is kind of the main thing you're going to use here in terms of replacing variables inside of this string however there is a few other ones like percent d this stands for decimal notation this is used to print out numbers we also have percent f this is used for floating point numbers there's a bunch of other ones i'm not really going to go through them but i will leave a link here let me actually just copy this into my browser and show you that kind of goes through all of the formatting options that we have so this i will leave in the description go by example string formatting so when we type printf that's saying print with formatting you can use all of the different things inside of here to kind of print out numbers and values with different formatting options okay all right so now we understand how we can print out variables and kind of embed them inside of strings what i want to do next is i want to get some user input because our program is pretty boring if we're not allowing the user to type anything in so i want to immediately ask the user as soon as they run our program what their name is so then i can greet them and i can actually start running the quiz game so how are we going to do that well let's get rid of these three lines right here and let me make a variable now i'm going to say var name and i'm going to make this of type string but notice i'm not actually going to assign it a value i'm not going to do equals and then something like hello now i could do that but i'm not going to now when i don't do that what's happening is i'm saying okay i want to declare a variable called name but i don't want to give it an initial value now i'm going to define that it's type string but right now it's just going to be holding an empty string it's not going to be holding anything because i haven't given it a value that's completely fine a lot of times you want to do that now you don't just have to do this with strings you can do this with ins with bools as well so i can do var and let's just go test bool like that completely fine i don't need to give it an initial value okay hopefully that makes sense i'm kind of just putting the placeholder here and saying all right i want to declare name it's going to be string and i'll give it a value later on now though i want to show you how we collect user input so what i'm going to do is say fmt.scan now dot scan allows me to actually scan something into my program so allows me to let the user type in the console and whatever they type it's going to give it to me and store it in a variable so if i do something like fmt.scan and then i put an ampersand and i put name what's actually going to happen is i'm going to store whatever the user typed in in the name variable now the ampersand is a little bit confusing we'll get to that in a second but for now let me just show you that this works by going here and saying fmt.println and we'll just print out the name for right now okay so we'll go through this in a second but let's go to our console if i can bring this up here let's type in cls and let's run this now notice it says welcome to my quiz game and my cursor is right here in the console so i can actually start typing i can say something like tim and when i hit enter it's going to print that out right because it's storing whatever i type in in the variable name and then i'm accessing the variable name and printing that out okay hopefully that is clear so let's talk about what this ampersand does now this ampersand is a little bit beyond this tutorial but i do need to show it because we have to use it here what this does is actually reference the memory address location of this variable so to go on a quick tangent here every single variable in our program is going to be stored somewhere in our computer's ram ram is random access memory that's what our computer uses when it's running programs now in this case name is going to be stored at some random location in rem we don't really care or know what that location is but to access it we use this ampersand now the reason we need to do this is because fmt.scan requires the memory location to assign the value of this variable equal to whatever it is that's typed in hopefully that kind of makes sense it's kind of annoying that you can't just do something like name but it requires that you pass in the ampersand which gives what's known as a reference to this variable which scan will use to set the variable equal to in this case whatever string the user types it again you don't need to worry about this too much just understand that when you're using scan you need to put an ampersand and then the variable that you want to actually store the value the user types in in now one thing to note here is that you can also scan integers you can scan floats you can scan booleans it doesn't just have to be strings so i can do something like var let's go with age and then we can say int right here and now if i go fmt.scan and i just go with int let me just get rid of name right now and sorry not integer with age and then i print out age now i'm going to be able to actually type in a number and have that number come in as an integer and be stored in the variable age as opposed to getting the string data type so let's run this now let's save and run and notice that i'm going to type in 21 and it prints out 21. however let's see what happens if i do something like hello when i do that notice we get 0. now that's a little bit weird but the reason we got 0 is because hello was not a valid integer and we can't store hello inside of a variable that is of type int so it just gives us the default value of this int which is going to be zero alright so hopefully that makes a little bit of sense but the type that you have for your variable really matters and whatever that type is that's what you're going to have after you do this scan right so if i type in 21 and i have my variable of type int it's going to give it to me as an int but if i have this as type string it's going to give it to me as a string okay so now that we understand that let's go back to the name example and then let's get the user's name and greet them and then start asking them some questions so i'm going to say var name and this will just be a string then i'm going to say fmt.scan and i'm going to say that this is equal to if i could type properly here which i'm having trouble with ampersand and then this is going to be name okay so now we're scanning this into the name variable and now i want to greet the user so i'm going to say fmt dot print f and i'm going to say hello comma we're going to go with percent v like that welcome to the game okay and then we'll go comma and then name like that okay great so let's run the code go run tutorial dot go welcome to my quiz game notice it's asking me to type something in so i'm going to type in tim and then it says hello tim welcome to the game great however one thing i want to do here is i actually want to have a prompt that tells the user to enter their name because right now it doesn't really say anything and it's kind of confusing for the user so what i'm going to do is right before i actually have this scan here i'm going to say fmt dot print f like this and i'm just going to say enter your name colon like that so let's see what happens now when i do that okay go run tutorial dot go let's go with tim and then says hello tim welcome to the game awesome that is much better now notice here that i used printf instead of print lm now println is gonna make it so that we move down to the next line after we print this if i don't use println i use printf instead you're going to see here that what happens is it says enter your name on the same line now obviously we don't want that let me just get out of this here that's why i'm using print ln now if you're using printf and you want to make it go down to the next line after you're printing the formatted string what you can do is embed this special character called backslash n now this is known as the new line character and what it does is it moves the console down to the next line so just to show you something here if i do something like enter backslash n and then your name you're going to see it's going to print enter it's going to move us to the next line and then it's going to print your name and then allow us to type so let's look at this let's go here and see it says welcome to my quiz game enter it brings us down to the next line your name tim and then the rest continues as we would expect okay hopefully that makes sense i just wanted to cover that all right so at this point we've made a little bit of progress on our game but i want to continue and actually start asking the user some questions so the first question that i want to ask the user is for their age and i want to determine if they're old enough to play my game maybe i'm going to make the age limit or the age minimum something like 10 years old maybe i have you know explicit content in my game whatever this is just going to be a good first example to go through so now we're going to repeat the process i'm going to say fmt.printf i'm going to say enter your age if we could type properly like that then i'm going to make a variable i'm going to say var age int okay now i could also make this an unsigned integer if i want so that they can't type in a negative value in fact let's do that that's going to be good and then i'm going to say fmt.scan and i'm just going to scan into the ampersand age variable okay now what i want to do though is i want to print out something that tells the user if they're old enough to play so this is where we're going to start talking about conditions so i'm just going to do this and then i'll talk about how this works i'm going to say fmt dot print ln and i'm going to say age is greater than or equal to 10. so maybe the minimum age to play is going to be 10 years old now what i've just done here is i've written a condition now a condition is anything that evaluates to true or false so in this case what's going to happen is age is going to be compared to 10 and we're going to check if age is greater than or equal to 10. now remember that true or false is the boolean data type which means a condition is anything that evaluates to bull so what this does is this gives us the value true if this condition is true so if age is greater than or equal to 10 or it gives us false if age is not greater than or equal to 10. so now i'll just print this out and it's going to tell us whether or not the user is old enough to play or not old enough to play by printing true or by printing false so let's run our code go run tutorial.go let's enter our name of tim and hello tim welcome to the game it says enter your age we're going to have to fix this because it's on the same line now i'm going to enter 9 and notice it prints out false now let's just run this again let's type in our name of tim let's type in our age let's go with the real age now and notice it prints out true because we were greater than or equal to 10. okay now just like we have greater than or equal to we have greater than now if i were to type in 10 this would evaluate to false because this is checking if age is strictly greater than 10 not greater than or equal to of course we have less than we have less than or equal to we have two equal signs which is checking is the age exactly equal to 10 and we have the not equal to which is telling us is the age not equal to 10. pretty straightforward but those are our conditional operators and all of these allow us to get something that is true or false okay so let's just fix this so it's not showing up on the same line the way i'm going to fix that is i'm going to add a backslash n here the reason i need to do this rather than changing this to ln is because if i change that to ln then i'm no longer able to actually print out my formatted string okay so that's why i need to do the manual backslash n which now means this will go on a new line now i also could do this just put a backslash n at the beginning of this line doesn't really matter it's kind of up to you okay so let's go backslash in here okay so now that we have gotten this and we understand the condition what i would like to do is i want to print something out if the user is old enough to play or if they're not well enough to play right so if they're old enough to play i want to start asking them questions if they're not old enough to play then i want to immediately end the program so this is where we're going to start talking about conditionals really if and else statements so i'm just going to write one out because they're pretty straightforward but i'm going to say if the age is greater than or equal to 10 then i'm going to say fmt dot print line i'm going to say yay you can play exclamation point okay now take a wild guess of what this is going to do i'm going to run the code and then we'll explain it so here we go it's going to ask me for my name i'm going to say tim he's going to say hello tim welcome to the game i'm going to enter my age of 20. it's going to say yay you can play now let's run this again let's go tim let's enter the age of 9 and then notice it doesn't print anything out so what we just did here is we wrote what's known as a conditional block this is pretty much saying we're only going to run what's inside of these curly braces if what we've written here is true so this is a condition this is something that evaluates to true or false which is our boolean data type and if this is true we're going to run this line if it's false we're not going to run this line so here we're checking if age is greater than or equal to 10 so if we type anything 10 or greater then we'll run this otherwise we won't there you go you've just learned how to implement an if statement these are pretty straightforward but very very powerful all right so now that we've printed something if they can play i want to print something if they can't play now one thing that i could do is i could say if age is let's go with less than 10 then i could fmt dot print line you can't play exclamation point however this isn't the most efficient way to do this because we have something known as an else statement so first of all i just want to mention this is val this is going to work the way that we would expect we're going to check this if statement then we're going to check this if statement and one of these will end up running because it's either going to be greater than or equal to 10 or it's going to be less than 10. but since we know that if it's greater than or equal to 10 it can't not be greater than or equal to 10 there's no point in us really running this if statement down here it's kind of redundant if that makes sense at all so this is where i'm going to introduce something called the else statement now the else statement is exactly what it stands or exactly what it sounds like sorry it's what's going to happen if this if statement does not run so i'm just going to say you cannot play exclamation point so the idea here is we're going to check this condition if it's true we're going to run this if it's not true so else we're going to run this so this is saying okay we're going to try to do this if we can't do it we'll do this one so one of these two blocks is going to run either the if block or the else block is going to run okay let's go ahead and run this so i'm going to go here and go go run tutorial dot go enter the name of tim let's enter the age up 9 and now it says you cannot play let's run again let's go tim let's enter 10 and now it says you can play right perfect okay so let's clear that alright so you have now learned about if and else's now this is really all we need to start implementing the quiz game so let's now ask our first question but only if the user is allowed to play now the way that i'm actually going to make it so that we won't ask the user a question if they're not old enough to play is i'm going to write a line right here called return now this is a little bit complicated for this tutorial but what this is going to do is it's actually going to break out of this main function so whenever you see a return keyword this actually allows you to return a value from a function but since we're not dealing with functions for now what you can think that this is going to do is it's just going to immediately end our program so we're inside of this function main and as soon as we hit a return keyword we exit the function which means that if i put a line like here like fmt.printline continue we're not going to get to this continue line if a return statement is occurring before so if we hit this return statement which means we were in the else statement then we won't print this out but if we don't hit the return so if we were old enough to play then we'll continue hopefully that makes sense but let me run this and show you an example okay so go run tutorial dot go let's type in our name of tim and let's go with 20 and then it says yay you can play and continue now if we do this in the other case so i say tim and i enter something like 8 then it's going to say you cannot play and notice we didn't print continue all right so now let's continue and actually ask the user some questions once we get to this line so we can go ahead and do this i'm going to say fmt dot print if i could type properly here printf we're going to start by just asking whatever the first question in our quiz is going to be now you can make this whatever you want for now i'm going to say what is better the rtx and then we'll go with 3080 or rtx 3090 question mark now these are graphics cards and one thing i want to note is that i'm intentionally using print f and i'm adding a space at the end here because i want the user to start typing at the end of this line if i were to type print ln then that would mean the user would start typing on the next line not after the question mark here okay so that's why i'm using printf anyways now i'm going to say var answer and then this will be a string is going to be equal to actually i don't even need to give it equal to anything i'll just write it like that and i'll say fmt.scan ampersand and then answer and for now i just want to go with fmt dot print and we can just print line and i'll just print out the answer okay before we actually check what the answer is so i'm going to run my code go run tutorial dot go okay enter your name tim age 21 yeah you can play what is better rtx 3080 or 3090 let's go rtx and then 3080 and hit enter now notice that the answer that it printed out here is rtx not rtx 3080 even though i typed in rtx 38 now that's actually the incorrect answer but either way notice how it's not giving me the 3080. now this is something that i need to cover which is kind of a potential problem with this scan i guess statement scan function whatever you want to call so the thing is this scan function what it actually does is it scans uh space separated values in your input so what that means is it's going to store whatever the first value is that i type in that's not separated by a space in one variable and then the next thing that i type in separated by a space it will store in another variable so here it's only giving me rtx because i only gave it one variable to scan the values into so i have rtx it's storing rtx but then the 3080 would need to be stored in a separate variable because that's how this works so hopefully that makes sense but as soon as you hit a space it's going to kind of stop storing that current word or that current input and it's going to move on to the next one and try to score store that in a second variable so let me show you what i mean here if i go var answer to string and then i go here and i go ampersand and we go answer two now if i print answer and then answer 2. let's run this and notice that after i get past these i can type something like rtx 3090 and now i get rtx and 3090. so rtx is an answer and 3090 is an answer too so this is a potential solution to be able to collect both of these values is to store them in two separate variables and then we're going to have to combine these variables together by performing a concatenation to actually compare this against what we think the correct answer should be okay hopefully that makes sense now there's other ways to actually collect the entire line but i don't want to show them because they're too complicated for this tutorial so for now if you want to collect multiple words this is going to be the solution that you're going to have to use okay declare multiple variables put multiple values inside of here multiple variables right and then it's going to scan all of those words in now let's look at something else here if i run this and i go tim 21 and let's just type rtx when i hit enter notice that the program's not ending now the reason it's not ending is because it's waiting for me to type the second word so it's not going to end until i type two things so keep that in mind when you're using this scan if i put two variables here it's going to wait for me to type two individual values before it moves on to the next line so now if i type 3090 that's fine but again i need to type two things in because i'm accepting two things inside of fmt.skin okay i think that's all i need to cover for the scan now we'll go with answer and answer two for now that's fine and then what i want to do is i want to check if the answer that the user typed in is equal to the correct answer and tell them if they got the question correct so i'm going to say if and then i'm just going to go answer plus answer 2. i'll talk about what this doing in a second is equal to rtx 3090 then i want to fmt dot print line and then correct exclamation point otherwise i want to say fmt dot print line and then in correct exclamation point okay so what answer plus answer two is going to do is it's going to add these two strings together so whenever we have multiple strings we can concatenate them that means to join them together by just adding them using the addition sign so since the first part of my answer is stored in answer and the second part is inside of answer 2 then i'm going to combine them right so i'm going to say rtx plus 3090. however when i do this it's going to give me the string that looks like this rtx 3090. now that is not equal to rtx space 3090 right whenever we have a space that's going to make the string different rtx 3090 no space and rtx 3090 with a space are different strings now same thing like this right even if i had this these are different strings because this is a lowercase x that's just worth mentioning anyways though this means that i want to add a space in between here so i'm going to do that so now i'm going to combine the two answers with a space and then see if that's equal to rtx 3090 which is the correct answer okay so let me run this here let's go go run tutorial dot go let's go tim 21 and then rtx 3090 and it gives us correct yay there we go we now know how to correct or sorry not correct collect multiple words from user input now let's try this again and let's type in tim and then 21 and then let's go with something like rtx 3080 and notice that we get incorrect right and if we were to type anything other than rtx 3090 then it would not give us correct it would give us incorrect okay let's clear perfect now let's say that maybe there's a second correct answer to this question maybe they can type in rtx 3090 using all lower cases for the rtx because right now that's not going to work well how would we make that answer correct as well well the way we do that is by now implementing an else if statement so let me show you how this works you write else if and now you can check another condition here and check if this condition is true so let's do this i'm going to say else if answer plus answer 2 equals rtx 3090 but i'm going to now this time make this lowercase rtx and then what i'm going to do here is i am going to say fmt.princeline and then correct exclamation point so let me just describe what i did so now we've implemented the l if statement so we're checking if this condition is correct now if this is true answer plus space plus answer two is equal to rdx 3090 we're going to print correct and we're just going to move down to the end of the if statement we're not going to do the else we're not going to check the else if and i mean that kind of makes sense if you read what you know elsif has said now if this statement is false so if this condition is false then what we're going to do is we're going to go to this condition so the elsif condition below it and check if this is true so we're going to say if this is false then we want to check this so if answer plus answer 2 is equal to rtx 3090 with the lower case then we'll print correct and then we'll go down to the end of the if statement now if this is false then we'll go to the else statement okay so we're kind of going in order we're first checking this if it's false we check this if that's false we do this if this is true we're done we don't check either of these we just move to the end of the if statement now one thing that's worth mentioning here is that you can use multiple l if statements so maybe i want to check another possible answer i'm just going to copy this in here i want to check else if the answer plus space plus answer 2 is equal to and then maybe i want an rt and then a capital x 3090 right well that's fine i can do that let me just fix this a little bit and oops okay i'm messing all this stuff up but you get the idea now what's going to happen is i'm going to check this and if this is false i'm going to check this if this is false i'm going to check this and if that's false i'm just going to do what's inside of here okay hopefully that makes sense now let's go back to what i had before because i just messed up my code pretty badly and there we go that's better that's the cleaner if alif statement i want so just to clarify here you can have as many l if statements as you want or else if statements as you would like however they must come after an if statement you need to start with an if statement you can have as many lsifs as you want then you can end optionally with an else but you don't need the else so in this situation i could remove the else that's totally fine this block of code will still work all right so let's go back to what i had before and now let's run this code and check out the else if okay so go run tutorial.go let's go tim 21 and then let's go rt and actually just lowercase rtx 3090 and then notice it gives us correct because now this was false so we checked this it was true we printed correct and then we were done okay hopefully that makes sense so now that we have done this i want to do my next question right so let's now implement our second question directly after this i'm going to say fmt dot printf and now what question do we want to ask let's go with another computer question so let's do something like how many cores does the ryzen 9 3900x have question mark now the correct answer is 12 this is the cpu that i have that's why i'm going with this but i'm going to say var and then actually i can't call this answer and the reason i can't call this answer is because this variable already exists so what i could do is i could just say fmt.scan ampersand answer and then this would store whatever i typed in the answer variable but the problem is the input that i want here is going to be an int i want a number i don't want a string so how do i fix this well since the answer variable is already defined and it has the type string i can no longer use this variable so instead i need to come up with another variable that i'm going to use to store the answer okay now i could actually still use answer but again what's going to happen is my answer is going to come in as the type string which means i would then need to check if the user typed in the string 12 not the number 12 which is not something that i want to do so i'm going to say fmt.scan but before i can do that i need to declare the variable it's going to hold the answer so i'm going to say var let's just go with cores and let's make this int and then i'll say ampersand chorus like that now for experiment purposes if you want you can try doing this with a regular answer and you'll see the problems that i was discussing okay so i'm going to say fmt.scan at coors or ampersand chorus sorry and now i'm just going to do a very similar thing to this where i check if the answer is equal to the correct answer so i'm going to say if answer is equal to in this case 12 then what i can do is fmt.printline and i can say correct exclamation point otherwise i can fmt.printline incorrect exclamation point there you go that's all i need i don't need an else if because there's not really any other way to type 12 unless the user were to type in like 12 but that's not going to be accepted as an answer we're just not going to accept that okay so let's just test this out and see if this works so let's go go run tutorial dot go and we get a problem it says invalid operation answer equals equals 12 mid mismatch types strings in untyped int this is actually a good problem to run into because i realized that i typed this variable wrong but what this is saying is that i cannot compare a string and an unsigned integer which is what i'm trying to do now i didn't mean to type answer here i meant to type course because we want to check this not this but it's just worth noting that when you're going to be comparing different types you usually can't do that so i can't compare a string and an interior because how do i compare if a string is equal to an int when they are different data types it's an invalid operation and well that's why i am getting an error okay just worth noting now one thing i will do is actually change this to uint as well for unsigned end because i don't want them to type in a negative number okay so let's continue here let's go go run tutorial dot go enter name tim we're going to enter age 21. you can play what is better let's go rtx 30 or 2080 okay incorrect that's fine how many courses have let's type in 12 and then we get correct awesome there we go we've answered the question correctly okay so at this point in time i'm not going to implement any more questions because you guys can do that on your own they're just going to follow this same format here what i will do though is show you a few different ways to kind of format these if and else statements and i also am going to show you how we can keep track of how many questions the user has gotten correct so if i want to keep track of the number of correct questions i need a variable that's going to store how many correct questions i have so what i'm going to do is i'm going to make a variable let's do it actually right up here i'm going to say var score and then this is going to be an int and i'll just make this equal to 0. now i don't need to type out all of this though because i'm just going to assign the value of 0. so instead i'm going to say score colon equals zero and now uh golang is going to interpret that this is an integer it's going to manually or sorry automatically i guess make this type an int and so i don't need to type out var score int i can just do it like this the reason why i need to do the types here is because i'm not assigning these a value i'm just declaring that they exist and then i'm going to use them in the scanners so i need to explicitly define the type anyways we have score now i'm going to show you how we can modify this variable to add 1 to it whenever we get an answer correct this is pretty straightforward but inside of my if statement i'm going to say score plus equals 1. now plus equals 1 is an operation you can use to add 1 to the existing value of score so if score was equal to negative 1 and i did plus equals one it would make score equal to zero right if it's zero it's going to make it equal to one it's just gonna add one to it now writing this is the exact same thing as doing the following score is equal to score plus one all i'm doing is saying okay what's the current value of score add 1 to it and then assign that to the variable score that's completely fine because i'm assigning another integer to the int type okay there you go now let's just make this plus equals 1. now one other way that you can do this is you can also do plus plus now plus plus stands for increment and this is going to add one two score so if you only want to add one to it you can just do square plus plus this is kind of a shortcut however if i wanted to add like five then i would do the plus equals because then i could add any number that i want in this case i would add 5. now one thing to note too is that i could add another variable here so maybe i had a variable called increment i could put that here and then whatever the value of that is i would add that to score okay hopefully that makes sense for now we'll go with square plus plus because we just want to add 1. so that means in here i need to do this as well because if i get it correct i want to add one and then i'm going to go to here and go score plus plus so now that i've incremented the score i'm either going to have a score of 0 1 or 2 at the end of my program so let's go ahead and print out what the score is i'm going to say fmt.printf i'm going to say u and then we'll go like this scored this is going to be percent v out of and then the number of questions that we have i also want to store this in a variable so let's go up here to score and let's say num underscore questions colon equals and then we'll just set the number of questions that we have which in this case is two okay so i'm going to say you scored whatever out of whatever okay and then we'll go comma and we'll go with score and then num questions okay so let's just test this out and then we can add some more stuff all right so go run tutorial dot go enter name tim age 21 yes you can play what is better rtx 3080 or 3090 let's go rtx 3090 okay how many cores is ryzen 9 3900 x have let's go with 10 says incorrect you scored one out of two awesome there we go so now to continue with this let's calculate the actual percentage score that the user gets so to do that i'm going to do it in kind of a more verbose way just so that you understand i'm going to make a variable i'm going to say percent colon equals and then what i'm going to do is i'm going to take this score i'm going to divide this which is the forward slash that's division by the number of questions and then i'm going to multiply this by 100. now the multiplication is an asterisk and what i can do is define my order of operations here by doing the following so i can say i want to do the division first in parentheses right and then i'm going to multiply this all by a hundred and that should give me the correct percent now again golling is going to infer what the type of this is going to be so i don't need to manually define that this is an int or a float or whatever it's going to be so in this case now i can say fmt dot and let's actually just add a new line here so this goes to the next line and we're going to print actually f and we'll say u scored colon and then this will be percent v let's find that and then i'm actually going to put a percent sign so that it will say you scored like 75 or 80 or whatever the percent is and then we'll add a period comma and then we'll put percent okay so let's run the program now so let's clear the console and run name tim h21 rtx like this 3090 okay correct how many cores does this have let's go with nine incorrect you scored one out of two you scored zero percent and then it gives me missing this is a little bit weird why am i getting that so the reason why we're getting this error here is because of this percent when i actually want to embed a percent sign inside of my printf i need to do a double percent because the percent is being treated as a formatting character and so when i just have one it's saying missing here because it's missing what's coming after the percent so if i do two percent this actually means a literal percent sign and so now we shouldn't get that problem so let's try this now okay let's go tim 21 uh let's just enter rtx 3090 2090 okay let's go with 12 and then notice we get you scored zero percent that's a little bit weird why am i getting zero percent all right so i had to make a cut there because i was just looking at exactly the problem that was occurring but we were seeing that what we were getting for our percentage here was zero percent when we know the correct percent should have been 50. so how do we fix this and why is this problem occurring well the reason why we're getting this problem is because right now we're dividing two integers we have an int divided by another int now whenever you do an operation with two data types that are the same type the result of that is going to be that same data type so if i have an int and i'm dividing that by an int i'm going to get an int which means i'm going to get 0 here now if the score and the number of questions are the same i would get 1 but since this actually gives me 0.5 it's just going to be rounded down to 0. now it works a little bit more complicated than that but the idea is if i have one in and i'm dividing another int that operation can't return me a float it has to give me an int and so since i can't store something like 0.5 it just defaults to storing zero so what i actually need to do here is i need to convert both of these types two floating point values divide them by each other and then multiply them by a hundred and that will then give me a float type here for my percent so i'm going to say float 64 and i'm going to surround that i'm going to surround score and float 64. and then same with the number of questions now the reason why i need to do both of these here is again because we need to have the same type on the left and the right hand side of my arithmetic expression arithmetic is just math so if i was adding these same thing i would need to do that so that i can actually get the correct type here i know this is a little bit confusing but float64 is just going to convert this type to a float64 data type so now when i divide my two floats i can actually store a floating point result of 0.5 i can multiply that by a hundred i don't need to convert this to a float because it can be interpreted as a float 100 can be stored as a float so this is fine and that means that percent now should give me 50 and i should actually print out 50. again this is kind of getting into the weeds of golang and some stuff i didn't really want to cover in this video but i guess i have to show you because we want to do some basic math and hopefully this gives you some insight into the typing system okay let's run this though go run tutorial dot go let's enter the name let's enter 21 let's enter rtx 3090 let's do this incorrectly and then it says you scored 50 percent meaning that our percentage calculation is now working properly okay hopefully that is clear but there you go we now have the percent awesome now that i've showed you that i'm pretty much ready to wrap up the video the last thing i want to show you is how we can simplify this right here so rather than repeating the code in here we actually have two conditions that allow this here to be true so some of you may have seen this before but we have operators in golang known as the or operator the and operator and the not operator now these allow us to chain conditionals together now to explain these i have to go through them one at a time so i'm going to start with or so what or does or what or is i guess is two pipes okay so two vertical lines and this is going to give you true if what's on the left or the right hand side of this operator is true so for example if i have true or false this is going to return to me true now if i have the other way around so if i have false here or true then take a guess of what we're going to get well we're going to get true so the or is just looking to the left and to the right if what's to the left and what's to the right evaluates to true or false so if it's a condition it's going to look at both of the conditions and if either of the conditions are true it's going to return true now if both of the conditions are false it's going to give me false okay now let's look at ant now and is kind of the opposite of or and is checking the left and the right hand side and telling me if both the left and the right hand side are true so in this case i have true and false well that's going to give me false because no true and false they're not both true so i get false now if i have false and false of course i get false if i have false and true i get false but if i have true and true then i get false okay that is ant then we have not now what not does is simply negates the true or false so what that means is if we have a not false this is going to be true right oops let's do the arrow the correct way like that now if i have not true if we can get the exclamation point then this is going to give me false okay so it just simply reverses true to false and false to true it negates them there you go those are what's known as the logical operators inside of goaling now the point of me showing those to you is that we can simplify this if statement block right here by removing this l if this else if here and simply combining two expressions or two conditions together in this if statement so let me show you what i mean i'm just going to copy this i'm going to remove this else and now we're just going to have the if and the else but i still want to check if you type in all lowercase rtx than 3090 i want to check if you type that in and if you do i still want to say that you got it correct so i'm simply going to put the or operator here and then i'm just going to put my other condition so i'm going to check now if this is true or if this is true hopefully that makes sense but i'm just combining two conditions together and now if both this or this are true then i will return correct so either this one or this one doesn't matter and if both of them are false then i will print incorrect okay now if i wanted to add another one here i could get crazy and i could add another or that'd be totally fine in fact if i do this now maybe i want to check rt and then capital x right that's fine i can now have three ors together and if either of these three conditions are true then i'm going to do what's inside of the if statement okay now just to show you the other operator here if i were to make this an and then this would never be true the reason why this here would never be true is because i'm checking if answer plus space plus answer two is equal to rtx 3090 and if it's equal to this now of course these can't be equal to both of these things at the same time so i would always get false now you use and when you want to check if both of the conditions are true but of course here we want to use or all right you can mess around with those and experiment with them but that is how they work okay so now let's run the code and let's try this so i'm going to say tim let's go 21. let's go rtx 3090 notice we get correct that works fine let's type in 12. correct you scored two out of two you scored a hundred percent awesome all right so with that said i think i'm going to end the video here my goal here was to give you the basics i did not anticipate this video was going to be as long as it is but there was a ton of stuff that i needed to show you and i couldn't really skip it otherwise it was going to leave you guys confused regardless i hope this helped you get an introduction to golang and kind of bring you a project that you can get up and running with and learn the basics of the language a reminder to check out programmingexpert.io it'll be linked in the description that is my platform in partnership with algo expert to learn how to code and to become a software engineer as quickly as possible anyways if you guys enjoyed this content make sure to leave a like subscribe to the channel leave a comment with any go content you want to see in the future and i will see you in another youtube video