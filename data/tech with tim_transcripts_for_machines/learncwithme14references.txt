hello everybody and welcome to another c plus plus tutorial for beginners now in today's video i'm going to be discussing a topic called references now a reference is really an alias so another name for a variable and allows you to modify the variable through its reference or through its alias now people get confused with references and pointers and all these other kind of complicated things that are relatively specific to c plus plus and c in these kind of lower level languages so anyways i'm going to do my best to explain this to you with that said let's dive in so as i said a reference is an alias otherwise known as another name for a variable now to create a reference what you do is initialize a variable just like you normally would so you say something like int a equals let's say two and then if i wanted to make a reference to a i would say int ampersand which is above the 7 on your keyboard and then whatever the name of the reference is that you want and then is equal to and then that variable so notice we have the same type the only difference here is that we have this ampersand and what this tells us is b is a reference of a now really what that means is that if we modify b we will also modify a and the reason for that is b is not storing a copy of the variable or the value sorry that is stored by a it is telling us where a is and is giving us access to the variable a now this is going to be a little bit confusing so just bear with me i'm going to have to probably explain it a few times before you guys really get it but again the idea is this is an alias just another name for a variable we do not have two separate values here we don't have a being equal to two and b being equal to two we have b being equal to a and a being equal to two now let me just show you what i mean here if i c out a and i see out end l oh not end lf just end l and then i c out b and then end l you're going to see that both of these are equal to if this loads two all right now what happens though if i change a and i make a equal to three notice i haven't changed b right i'm just changing a let's see what happens now well i need to add a semicolon so it doesn't crash when we add a semicolon we can see that both a and b changed now same thing here if i change instead of a but i change b so i make b equal to 4 and then i run this you're going to see that both a and both b changed now this is different if i remove this reference so if i change this reference now and instead of saying int reference b is equal to a i'm saying int b is equal to a what you're going to see is that a does not change when i change b so if you look at this here you can see that we have two different values two and four and same thing in the opposite direction so if i change a to b equal to four that does not change the value of b the reason for that is when you say something like and b is equal to a really what this is saying is make a copy of whatever the value a is storing and store that in the variable b so if we're looking at our computer here we kind of have two little boxes one box labeled a that stores the value of two and then another box labeled b that stores the value two these are two distinct value twos and therefore if i change a to b something else that doesn't change b because b is pointing to a different version of the number two than a was pointing to however if i make this a reference and i say okay b is now referencing a what that means is there is only one box in our computer that has the value two and b is simply pointing to that box so a when i do this say we set up this little box here and it has a 2 inside of it and then when i say the reference of b is equal to a really what this does i'm trying to find an arrow here is it just points this variable here to be equal to this same box and so when i do something like a is equal to four that changes the value in this box to four so now when i access b i'm accessing four right because b is pointing to whatever box a is kind of holding or store so hopefully that analogy or visualization kind of gives you a bit of intuition into how this works but that is a reference now some of you may be asking me well what is the point of a reference well to be honest with you it's hard to really show you the point of a reference right now because we don't have any functions we haven't learned about more advanced things in c plus but a lot of times you don't want to just know the actual value that a variable is storing you want to actually have access to that variable and you want to be able to change that variable but through another name so like i showed you here now we have this name b which is really the same thing as a it's just another name for a and now if i modify b this changes a and that's a good thing that allows us to be a bit more flexible in our program and again i apologize i can't give you a really good example right now but there is a lot of situations really when you get into functions where you want to have a reference to a value so that you can actually modify that value you don't have to uh what do you call it just use a copy of that so hopefully that's kind of clear but that's the basics of references now of course you can make a reference of a reference so if i say something like in and then we say ampersand c is equal to and we make this equal to b now if i say c out and i see out c and then i end l you're going to see if i change c to be equal to 2 here or i guess i should change to something else it could equal 3 then now all of these values change to 3. so when i say int ampersand c is equal to b what this is doing is again giving me a reference to a now this is where it gets a little bit more confusing but essentially we have this ampersand b and this is telling us b is a reference however whenever we access b we just use the value b here this actually gives us a now i know this is weird but when you see just like a b sitting here really what this is giving us is whatever this is referencing so it's giving us a and so when i say int ampersand c so the reference c is equal to b it's really giving me the reference to a it's not giving me a reference to b which is then referencing a it's giving me a reference to a that is why if i change c it changes both b and a because same thing here there's one box in our computer and all three of these variables are pointing to that box so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use for preparing for your software engineering coding interviews they have over 150 coding interview questions on the platform many of which are topped by me with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform alright so hopefully that's clear now the last thing i want to show you here is how you actually access the address that these references are pointing to now unfortunately i don't have any good like drawing stuff in front of me so i could do a little illustration for you guys because that would probably be helpful but the idea here is that when you say b is equal to a like i kind of showed you really b is just pointing to that box that is storing the value 2. now whatever the value 2 is in that box i'm just going to keep calling it a box has a location that location is in your computer's memory it's in ram and it has some identifier for it and you can actually look at what the identifier or kind of the address of a variable is by using the ampersand sign in a different kind of context or different way so i'm going to erase all of this actually all these references and we'll just keep a and now what i'm going to do is show you how we can look at the address for this variable so if you put an ampersand before a value or before a variable this actually tells you the memory location address of this variable so let me show you if i run this notice we get this kind of random gibberish that doesn't mean anything to us this is actually a hexadecimal memory location that is telling us where the value 2 is stored and so when you put the ampersand instead of giving you the value stored by the variable it's giving you the address so that's what the address is for a now if i do int and then ampersand b is equal to a and then we just copy this line and we do the same thing and we look at b let's see what we get notice that we get the exact same thing the reason we get the exact same thing is because this is a reference right b is pointing to a and so b has the same memory location as a does and that means if you modify b you're modifying a if you modify a you're modifying b however if i say int b is equal to a and now i do this notice that both of these are different right and the reason they're different again is because what's happening is it's creating a copy of the value two storing that somewhere else and now we have two different memory locations one for b and one for a so hopefully that helped you clear it up a little bit but again remember the syntax here is you use the ampersand before the variable when you're accessing it if you want the memory location there's not too many times when you actually want to do that but for some reason if you do want to do that i mean that's how you access it and then if you want to create a reference you just declare a variable exactly like you would before except you add the ampersand beforehand so of course i've been showing you everything with ins just because it's the simplest you can do this with string you can do this with bool you can do this with whatever else you want so if i say something like bool x is equal to true and then i say bool and then ampersand y is equal to x we can replace this location with x and with y let me get rid of both a and b here let's print this out and notice we get the same thing right this works with all other variables not just ins like i was showing you okay so the last thing here is just kind of some nuances and details about references and creating them so when you create a reference you must initialize it what that means is that when you write bool then whatever the name of your reference is or the type and whatever the name of references you must have an equal sign after and you must set it equal to actually reference a variable you cannot do something like this you can't say bool ampersand y now this would work if you said bool y because you're saying okay i'm initializing this kind of empty variable called y that is of type boolean and then you can change it later on or you're declaring this boolean variable y and then you'll initialize it later on but when we're talking about a reference you must initialize it when you declare it and i know i kind of use those words interchangeably that's slightly inaccurate technically the declaration of a variable is defining its name and type while the initialization is actually giving it a value so anyways just remember that whenever you create a reference you must give it a value immediately you must initialize it you can't just do something like int ampersand y and in fact if you try to do that you're going to see we get an error right declared as a reference but not initialized now i'll show you something else you also cannot make this equal to null so in c plus plus there's this thing called null we haven't really gone over it but this is kind of what you can use as a placeholder when something just doesn't exist there's nothing there in anyways if i do this you're going to see we get an error it cannot bind nonconstant value reference of type bool ampersand to an r value of type bool so just another note there you cannot initialize the value is null it must be initialized to a variable is the same type as the reference that you defined okay so one last thing to mention here is whenever you define the type of your reference it must be the type of the variable in which this reference is referencing so if i try to do something like string x is equal to and then i say make this equal to hello and then i try to reference this here you're going to see that we do get an error invalid initialization of reference because x is a string and well this is a bool so just keep that in mind you need to make sure the types are actually matching okay with that said i think that's all i need to cover here again this really isn't too confusing if you can kind of have that visualization of those boxes right and think about what is this variable actually pointing to because then if you change the location that it's pointing to anything else that's pointing to that location well that will have a different value as well anyways i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel i will see you in another youtube video you