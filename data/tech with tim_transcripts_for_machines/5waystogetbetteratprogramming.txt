hello everybody and welcome to another youtube video so in today's video i'm gonna be discussing five ways that you can get better at programming and writing code now obviously there's many more than five different ways that you can use to get better at programming and writing code but these methods here are things that work for me and things that allow me to write better cleaner more scalable and easier to understand code which is a really big deal especially if you're working for a company or you're working on some type of team where other people are going to be looking at your code and your code is going to potentially live in a code base for a very long time so with that being said let's get into the video after a quick word from our sponsor before we get started i need to thank the sponsor of this video which is alco expert algo expert is the best platform to use for preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with 155 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a mock interviews feature i can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform alright so let's go ahead and dive in the first way i have for you to write better code is to read other people's code now this is extremely important especially if you're working in some type of organization or you're working in a team of developers on some type of code base but reading other people's code helps you a ton in terms of writing better code and understanding kind of different ways of going about doing things speaking from personal experience here when i worked at microsoft as an intern one of the ways i actually learned how to properly write code within the code base i was working with was spending a few days just going through the code base and just reading it just trying to understand what was going on and then every single time one of my teammates would put a pull request up so they would try to add some code to the repository i would read through it thoroughly try to understand it and try to see the way in which they were doing things so that i could kind of match that or on the other side of things i could see what they were doing that i didn't understand and kind of some counterintuitive logic that they were using and then make sure that when i put up a pull request i don't fall into those same kind of flaws now you guys will probably realize this but whenever you read someone else's code the first thing you probably do is come up with a ton of criticism for it you say oh you should have done it this way oh this is wrong oh i don't like this logic oh there's a better method oh this doesn't look very clean that's kind of what your mind immediately goes to because you have your own style of program so what you can do is take all of that criticism that you're applying to someone else's code that you're reading and try to reapply that to yours in the perspective of someone else reading your code to write good code someone else has to be able to understand it if you're doing this in the context of some team some project some organization so the last thing i'll say here because i'm sure some of you will ask me this is how do you actually go about reading other people's code especially if you're not working for a company if you're not involved in some team project well what you can do is go to github you can read my code you can read random repositories code you can go look at open source code you can find unlimited code on the internet to go and read it's just up to you what it is that you want to read and obviously you're going to want to pick something that you're somewhat familiar with so that it's not a huge hassle to try to understand everything but this is really important and this will help you a ton just reading through other people's code and understanding the way in which they have done things alright so the second way i have you to get better at programming is something that i say on this channel constantly and i apologize if you guys have heard it a ton of times and you're getting tired of it but this is to work on projects working on projects in my opinion is probably the best way that you can get better at programming especially if you work on projects that you do not already know how to build a lot of people that work on projects will pick something that they've built a hundred times they'll go build a clone of something or they'll build something that they're very very familiar with and comfortable with what you should do is pick a project that is challenging something that's outside of your comfort zone something that you have no idea how to accomplish and then as you work on this project you'll go and look things up you'll watch a few videos and immediately you'll take that knowledge and actually be able to apply that into your code and see if you're understanding it and learn a ton the way that i got better at programming when i was young was just picking a ton of projects i had no idea how to do and just trying to build them now yeah it took me a really long time to get through these projects but after you know the three weeks of coding this out and building a little application i had learned a ton because i needed to learn that to work on this project so there's not really much more to go through on this but working on projects is just a really really great way to get better at programming and if you're not doing it i highly recommend that you do all right so the third way i have for you to get better at programming is to understand data structures and algorithms and time complexity analysis now i know you guys are already upset at me you're going to say well i don't need to know how to implement a binary search tree or i've never had to write a linked list or whatever that's not the reason i'm telling you to learn this i'm not telling you to learn data structures and algorithms because i think you're going to go and implement these data structures and write complex sorting algorithms all the time that's not all the reason behind this point the reason behind this point is that by understanding these very fundamental computer science theoretical concepts you are able to have some intuition on what is going on behind the scenes in the programming language that you use so i'll give you an example of what i mean here but in programming languages let's go with python for example you have a bunch of methods and functions that you can use that help you to speed up your development time right you have maybe functions uh like sort or search or find or count or whatever length you can go through and you can come up with a bunch of examples all of these functions or these methods have some code behind them that's actually performing these operations they're not just these magic methods that can just figure this stuff out they actually need to do something they have some code that makes up that method or function and it's helpful to know how fast that code is going to be relatively what that code is doing so that you understand if the method that you're going to use makes sense in the context of your program now i'll give you an example here when i was younger i didn't know data structures and algorithms i didn't know time complexity analysis i didn't know how slow or fast different methods were and i look back at some of my code now and i realized that a lot of times i was using all of these fancy methods and tools because you know i thought they were interesting and i thought they were going to make my program simpler and easier to write but they actually made it extremely inefficient and i have a lot of code even some on this channel that's running you know 200 or 300 times slower than it needs to be simply because i didn't understand some of these very fundamental and core concepts and if i did i would have known that these methods were not the right thing to use in this specific situation so really the whole point behind this point right here is that by understanding these concepts you can understand what's going on in these methods functions and very helpful tools in programming languages and know if they make sense to use or not so the next way i have you to get better at programming is to learn design and architecture now this is kind of you're getting out of the beginner stages maybe in the intermediate starting to get into advanced stages of programming where you're getting much better the next step to really make yourself just a good programmer is to learn about design patterns and architecture and what i mean by that is thinking about a system like a program a system whatever as a whole rather than just thinking about it on the individual parts a lot of times when you start writing code you write very small programs right maybe something that's 50 lines 100 lines of code maybe even something that's a thousand lines of code that would still be considered a small program and in those programs it doesn't really matter the way that you do things a lot of times it's totally fine to kind of go with you know like a halfassed way or to not really organize your code very well or not structure things super importantly you can kind of go in and tweak things if they're wrong and it's not a big deal but as soon as you get into a very large code base you know you're talking tens of thousands of lines of code you really need to understand the way in which these different pieces of code are going to work together and the way that you're going to structure your program such that you're not going to have to go back and rewrite 10 000 lines of code such that your program or your system is going to scale if you have more users you need to add something to it and so this is kind of like as you're getting better at programming you need to learn these things so that you can actually work on large systems and get out of the very hobby projects and realize how to work on yeah just large systems and real code that you're actually going to see in a production environment so there's not really much more i can discuss there learning these things is not super simple there's not a ton of great resources online for them although i am planning on potentially making some in the future but it is just really important to understand how to kind of design a system you know even something simple like uml diagrams class diagrams system diagrams etc those are things that you probably want to know and that are very very helpful to learn all right so i'm going to share with you my last way to get better at programming but before i do that i'm going to share with you kind of a quote line sentence whatever you want to call it it really helps kind of emphasize this point and will help you remember it now i'm definitely misquoting this from someone so if you know the original statement or quote please do let me know but it goes something along the lines of the simplest things are the most difficult to come up with or to create now at first glance or first thought that seems contradictive you think of that and you say how can something simple be complicated to create and to answer that question i'm going to ask you to look at something like your smartphone right you look at your smartphone your smartphone is extremely complicated piece of technology the way that it actually works is extremely advanced it uses physics it uses math uses computer science uses chemistry uses a ton of different things so many different components yet you pick it up and you can use it with ease i can program an application for it fairly easily it is something that's very very intuitive for someone to use and that's one of the reasons specifically we're talking about iphone here a lot of people like to use these phones just because they are so simple at a core when it comes to what you're actually doing on this product now that is extremely hard to make it's a lot easier for me to make a very unintuitive complicated and featurerich phone than it is for me to duplicate something like the iphone that has everything so streamlined simple and intuitive right that's kind of what i'm talking about here now of course it's a little bit different when you get into code but the same kind of factors apply it is a lot harder to write extremely readable clean easy to understand and most of all simple code than it is to write complicated and difficult to understand code go and look at some of your code and look at some of the methods and things that you've done in there you probably have some super complicated things that if you came back to in a year you would not be able to understand now you may feel like you know expert genius whatever for coming up with this super complicated logic but really if you had come up with something simple that would have been an advantage to everyone especially yourself if you're going to be looking at this in the future so i'm having a hard time really drilling into this point here but all i'm trying to get at is that it's really hard to write simple code and simple code is the best code because it's easy to debug it's easy to read it's easy for other people to understand and it will live in the code base for a long time and i know a lot of kind of junior engineers or beginner programmers myself included kind of fall in this trap of wanting to make things look super complicated and tricky and complex because we think it makes us look smart but really that's doing no one any advantage whatsoever and it would be a lot better if you could write the simplest most boring code possible and kind of ship that into a production environment or have that be your code because anyone can understand that and all the other reasons that i've kind of stated so again the simplest things are the hardest to create that applies to a lot of things in life in general if you guys want to elaborate on that in the comments i'd love to hear your kind of thoughts on that statement right there with that said i think i'm going to wrap up the video here so hopefully you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another one