now what this will let us do is use all the classes inside of locators to access those locators so let's go to page I just need to look at this documentation on the left side here to make sure you're not getting lost so I'm gonna say main page locators dot Go button so I want to find and sorry inside of here out to click the Go button what I want to do is find the element that is denoted by the locator that I put in the main page locators right so if we went back to locators we see we have this locator here and inside a page we're gonna search by that now we need to add a little asterisks here what this stands for is unpack and essentially you can think of it like this if I have a couple that is one two if I unpack it so I put the star in front of it some people also call this splat then what this will do is separate it into arguments so rather than having this happy one object as a tupple it will separate it into two entities so you can think of like if I didn't have the start then what would go in here would be let me just copy this I don't have to retype it at Apple one two but as soon as I put the star what this actually translates to is 1 comma 2 now you might be like well how is that different well these are two objects whereas before it was 1 and it split that into two objects so we can pass that as an argument to the find elements so that's the idea behind that so let's go back to star main page locators again that's called splat or unpack it's fairly useful actually thing in Python it's used quite often so there we go so that's the click go button we have the locators imported so from locator import star and I think this one is actually getting pretty pretty good so now we're going to find another class which is called search page oops if we can type here it's hard to type when I'm looking at the other screen Serge paid search result page I should type this correctly otherwise this could be a mess okay so a search result page and then we'll inherit from base page again which means we're just gonna use this initialization and then inside of here we're gonna say define is underscore results underscore found self return the string and I'll talk about this after no results found period not in self driver dot page source okay so I think that's right page source yep so what this is essentially saying is okay so we have this search page result class this inherits from the base page and what this is gonna tell us is if any results are found from the the source page so essentially if this string does not exist on that page in the HTML then we will say this worked that was good otherwise that'll be false right so that's the idea for the search result page now I have a feeling these are templates because I don't think they use them but anyways that's the idea okay so now that we have that what we're actually gonna do is go up and create something called element so element is actually gonna be very useful I don't probably draw it try to do an example with this to show you what I mean so from here we're gonna do at the top of this from seleniumwebdriver dot support dot UI imports web driver wait okay so we're gonna say class base page element if we don't have that in capitals will inherit from object and what this file is gonna do is actually represent one element on the page so for example it will represent the search bar it will resent a form input and the idea behind this is that it's gonna be really easy to access and change elements if we have kind of one interface to do that and that's what we're defining here so we're defining a base page element and this is what's gonna be used for all other elements and I kind of just have to write this first and then I will really explain why this is useful we're gonna say define set self object value now notice this has two underscores so underscore and square set underscore underscore we'll talk about what that means but this is called a dunder method it's actually part of the Python data model which is an advanced aspect of Python and then we're gonna say web driver weight and I'll talk about this again driver a hundred dot until lambda driver driver dot find underscore elements underscore by underscore name self dot locator okay so we have that web driver great let me make sure I typed that correctly okay and then driver dot find element by name self dot locator we'll talk about what the locator is in a second that's sorry duck clear and we're gonna copy the same thing but send keys now the syntax should look fairly familiar except for the lambda so I'll talk about that a second but element by I by name dot send underscore keys about you okay so what this is saying is when we have some element on the page if we want to set its value so we want to set you know what it's equal to so say that that search box we want to set it well what we need to do is always follow this process so for any element that we want to set the value for we're gonna do that by following this process we're gonna have the driver which is equal to the object driver now I know you don't know what object stands for yet but you'll see what that is in a second that's gonna be equal to the it's hard to explain this is an advanced Python concept but once we go to the other page I'll I'll show you but essentially this will be the web driver that's what it is and we're gonna say web driver waits so with the web driver up to 100 seconds until this function is true so until we're able to run this so this a function lambda stands for anonymous function so lambda with the argument driver driver dot find element by name self dot locator now self dot locator will be equal to the name that we want to use to locate the element now we haven't defined one yet but what we could do is say locator write equals locator if I get smells correctly spelling is off today if we do locator equals Q or something then what this will do is so we're gonna find the element with the name q and then we're gonna say a driver dot find element by name self dot locator so again that same locator dot clear so clear that input field so that it's empty and that we can now type into it and we'll send whatever value is passed here to that now I know this is confusing you have to promise me that I'm gonna explain this but it's you we have to do it kind of part by part so that's the first one now the next one's gonna be get so let's say we want to get the value of an object right well what we had to do before if I go back to tutorial one was we had to do that wait we had to the implicitly wait so what this element page is saying for us is don't worry about waiting anymore we'll set up this base object that will anytime we try to access or change of value automatically implement this functionality so this will kind of be hidden behind the scenes but what it will do is make it so that any new element we want to access we no longer have to wait for that element we can just use this base class to implement that functionality so that's the idea but here we're gonna say object owner like that and then we're gonna say driver equals object driver web driver wait this is pretty much the exact same thing for the first two lines so I'm gonna copy that and then what it has here is element equals driver defined element by name self dot locator and then return element dot get underscore attribute value okay so now what this is saying is all right so if we want to access the value of an attribute what we're gonna do is or not an attribute of an element my bad is we're gonna say the web driver is a Google web driver let's wait for that element to exist on the page and then let's say that elements is equal to the driver to find element by name locator right and then element get attribute value now there's other ways to do this but what this is saying is you know get the attribute from this HTML field of value and return that so hopefully this makes sense this is setting the value this is getting the value and these will be used for every object from now on so that we don't need to implement this every time we've just written this once and now if we go to page pi we can simply import this so we can say from element imports base page element like that so now let's say there's an element on the page we want to access well what I can do is make it class I gets a class and I'm just going to use the example that they have here which is search text elements like that this one Herot from base page element like that and then we'll simply define the locator that we want to use to locate this so now all I have to do is for each element that I want to locate on the page and be able to manipulate define some class that names the element whatever I want and set a locator so let's say we want to locate the Go button right well assuming that go button had the name I mean this is a bad way to do it just cuz we've already done that but we gets a locator equals you know go like imagine that was the go button name and then here our class would be go fun element and now if we want to access the value if we want to change the value I mean it doesn't work for that obviously because it's a button but if it was like a field or something we wouldn't have to implement any of this functionality because it's already here and we've just inherited from the base page element so again this is I know it's a lot this is this is difficult coding especially from selenium I wouldn't I was not expecting them to make it this complicated but I'm trying my best to explain this as clear as possible so a search text element was just equal to that search box because now we found the locator Q and if I go back to Python here and we hit inspect on the search box notice that the ID name is Q right so name is Q so what it's saying is let's find the element Q and then since we have element defined here we can set it and send keys to it by calling the SAP method and calling the gap method now those are underscored for a reason we'll talk about that in a second but let's go to main page here and let's define something as a attribute so we're gonna say search underscore text underscore element is equal to search text element okay so I've defined this here now what this is actually is doing is creating what's called a descriptor now the idea behind this is you want to hide the functionality of a specific attribute so you do something like what we've done here now this is obviously a complex example but the idea being that every time we access this variable search text element we decide to change it or we decide to get the value from it what it's gonna do is use this set and use this get so if I had you know search I don't want to type all this out search text elements like that and I set it equal to five so we don't we had define it in the other class but you know say we set equal to five what actually happens behind the scenes is the class that this is defined in which I believe is where is it here so main page is passed to the set as object and five is passed as value so what this does now is says object driver which is equal to this main page which has a driver because that's from the base page missile initialization right and then the value is the argument here which is five so it says okay we'll take the driver but the locator is defined already inside of this object right right here and then what we'll do is send the key value so if I set this five it will send the key five and that's the idea behind this you know if I set it equal to five it will just send the value of five and if I set the keys like hello and actually five sorry would have had to be been in a string but anyways if I set the value hello it will send the value hello and input that into the search field now if I do something like x equals search text element what will happen now is will call the get method and it will say okay the object will be equal to the object before and actually I'm I don't really know what the owner is supposed to be equal to I mean we could print it out if we want I'm pretty sure the owner will be equal to something to do with the classes or maybe actually this variable name here that that's possibly the answer but anyways what it will do is since we have the object it will get the driver it will wait until we find that element then what it will do is return the value of that to X so when we say search text element really what we're saying is call this get method and that's pretty how that works so that's the descriptor this is an advanced Python feature very advanced features don't feel you know bad if you're confused but that's pretty much how that's working and I kind of need to explain that because I feel bad you know just skipping through it and not explaining what really is happening there so that's the idea behind that so I think actually if I'm looking here we've pretty much finished this this uh this first page here for paged up high elements looks good locators looks good so now let's go back to the main page because there's actually something I wanted to add on the main page so we go to main pay main type I let me just make sure all of these are saved here what we'll do now is we're gonna actually make another test key so we'll keep test title like that we're gonna save define I'm going a little bit different than documentation now test underscore search underscore Python or something okay so now we're gonna say itself like that and now what we're actually gonna do um hmm this might be a little bit confusing is say okay I'm actually gonna move this around a bit so let's get rid of this just cuz I've seen the way they've done this in it makes sense so let's go define test search Python will say mean main page equals page Don main page so remember that's accessing this class right here which inherits from this so let's go back here and we're going to assert that main page dot is title match so that will call that method for main page which says is Python in driver title alright sweet now we're gonna put a comp now what comma stands for is do these operations afterwards essentially is what it's saying and then we can assert something afterwards so we'll assert this and assuming that's true do this so now we're going to say main page dot search text element which is equal to what we defined here which is that descriptor which implements the Get Set functionality it's equal to that so sorry dot that is equal to hi o'clock so when we pass PyCon again is gonna go through and call set with value equal PyCon and set that attribute so main page dot search text element equals PyCon and then we'll say main page like that dot click go button okay nice now we'll say search result so search result page search underscore results on your score page I really am having trouble typing today it's gonna be equal to page dot search page result or search result page selfdirect okay so this make sense of self driver and then what we're gonna do after here and these sorry should all do they only commas after them actually I don't believe they do no we're gonna say assert search result page dot is result about okay so let's let's digest this now so what's happening is we're gonna load the main page we're gonna say assert main page is title matches now I feel like this column might be an error because I don't think the comma should be there although I might be a little bit confused but anyways the commas going there and then what we're gonna say after we check if this is true or not is main page search text element equals Pikul so search sex element is equal to element we talked about that then we're gonna click the Go button to search for that and then we're gonna say this search result page is equal to page dot search result page self dot driver okay so we initialize a new search result page which is equal to if we go to the page drop I this right which now influenced this method returned no results found in not in self driver top page source awesome so we go back here then that will just tell us essentially if we found any results by searching for the value hike on that is how this works and that is pretty much the test framework so let's run this and we got a value we got an issue I think it is the comma actually yeah so I don't know why they had a comma there in the documentation I was confused by that as well but anyways let's get rid of the comma and let's run this so setup boom runs here failed errors equals one so let's see what the error is here missing one required potential argument positional argument driver's so sorry that's my bad guys we need to add self driver into here so page equals main duh page self driver so we'll add that and run this here so setup give it a second see if I made any other syntax errors notice it searched PyCon ran and then it said the test okay so that is how that works now I mean we don't need to close if we want to see the results but this is how you set up the unit test frame again confusing I agree but hopefully this video helped you somewhat understand how this works now of course you don't need to set up your test as robust as this but this is very good practice and notice how easy it is for me to really go and find anything that I need let's say the name changes for that search text element all I need to do is change the locator here boom script works totally fine let's say that we want to add some other method or some new thing to test okay I want to test a separate functionality well what I can do is I can you know add another search statement in here if I want or I can just make a new method and go ahead and test that okay we move from this the main page to the search page let's make a new search page object there we go that's all we need to do I want to change the value of a field boom that's all I need to do search text element I don't need to do that wait find set send keys I can just access it directly because of that implementation that we did locator changes no problem I can go ahead and change it in here so that is pretty much how you do the unit test framework for selenium again I'm sure I probably lost most of you by now because this is get very complex syntax but hopefully this helps you understand how this works so with that being said I'm gonna leave the video at that I hope you guys enjoyed if you did make sure you leave a like subscribe to the channel and I will see you guys in another Python video