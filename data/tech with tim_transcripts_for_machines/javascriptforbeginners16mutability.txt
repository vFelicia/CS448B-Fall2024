hello everybody and welcome back to the JavaScript tutorials so in today's video we'll be talking about is something called mutability now this is important because if later on and I'm not sure if I'm gonna do this in this series yet we start talking about objects more it's very important to understand how items can kind of change and values can change in our program and this is a kind of a more advanced topic where a lot of beginners find it difficult but I'm just gonna you know can I tell you as is extremely important so make sure you're paying attention and if you don't understand everything from this video you know look up some stuff on your own and make sure you understand this concept because it's very important so the first thing we need to talk about when we talk about mutability is first of all what even is mutability well when we talking about mutability we're talking about being mutable or immutable and that essentially means changeable or unchangeable now when we have a program we have something called variables that we have something called primitive data types and something called objects so for example if I say var x equals 5 what I've done is created the variable X so this X here and it stores the value 5 which is what we call a primitive type and I'll talk more about that in one second now if we say var Z equals and I create a new array here this actually stores what we call an object and if I were to create another variable and I said variable S equals Z what I've actually done here we're going to talk about this more in depth but I'm just kind of going through the beginning stages here is rather than created a new array that is equal to you know whatever the zetas Ray was I've actually just created another name to reference set so that essentially means that if I change anything on the variable s it's actually going to affect is that as well and same goes if I change anything on the variable S or sorry Z it's going to affect the variable s as well that is because these variables here actually what we call reference the same object so changes to one of those variables will change the other one because they're not actually storing you know the value of the array they're storing the array as one object in total whereas when we have this variable X like this this holds just a value it doesn't actually hold a reference to a specific object and again you know you're probably understanding why you might be confused by this we're going to go through it kind of examples but let's do one now so hopefully that makes a bit of sense so our primitive data types are what we call immutable which means they don't change and we're just referencing values rather than objects so if I do something like var you know t equals x well if I change the value of T that does not affect X the reason for that is because this value here is a primitive primitive type it's not an object so we can actually do that so this is a way to kind of you know make a copy of this variable X here and then we can just change within T whereas if we did this with an array well we're gonna get the same thing we just talked about because this is what we call an object and same goes for sets and for maps as well ok so let's do an example I'm gonna creative function I'm gonna call it add 5 we're going to takin some variable let's just call this num and then what we're gonna do is simply add 5 to this number and print it out so we're gonna say num plus equals 5 console dot log num now let's just call this function here so what's actually called a variable let's call it X let's set it equal to 5 let's do add 5x and then let's console dot log the value of X now if you're paying attention and you understand what I was talking about you should be able to answer this question here which is okay so what am I gonna be printing what are the two values that are gonna print out to the screen that's what I want you guys to think about now and I'm just gonna go into the answer so pause it if you want to you know take a look at that well what happens here so what we're doing is passing this variable that we've defined which is 5 to this function add 5 what this function is gonna do is take that in as a parameter called num it's gonna add 5 to that parameter num and then it's gonna print out that value so we should get 10 from inside this function but then down here does exchange like I passed the variable X to this function and we added 5 to it so does that mean we added 5 to X or does it mean we just added 5 to none how does this work well let's have a look here let's refresh the page and no it does not change the value X we get 10 and we get 5 the reason for that is because when we pass a value to this parameter what essentially is happening is inside our function something happens like a line of code is kind of written like this num equals x now we recall from before that since num is what we call a primitive type this just creates a copy of it and it doesn't actually change the underlying value of this variable so that is the first thing to understand the one we're calling with primitive types that's what happens now what are the primitive types well primitive types are numbers strings boolean's undefined and null so for example if I say var equals string like that this is a primitive type obviously well this isn't good now this will work we can try this actually so let's refresh we get string five and we get string we can see it didn't change and now if I do let's say you know the value true and rather than setting this like this we'll just set this to false and we print these out we can see we get false and we get true and these are our primitive data types right and same thing with null and same thing with undefined so those are what we call the primitive types now let's talk about what we called the reference data types or the object data types and see how these work differently so we're gonna create a new function now and what I'm gonna do is actually say append 5 now what this is gonna do is it's gonna take in some array so we'll call it array and what its gonna do is simply append so I think we can just do that with push the value 5 we're gonna console adult log R right here I'm gonna now just make an array in here that's 1 2 3 4 so this should be 1 2 3 4 5 and now we're gonna have a look at what this does so if we change this name to append 5 we need to understand what this gonna do so before I go think about what's gonna print out here is it gonna be you know the same result that we've seen previously or is this gonna be different well what we're doing now is using what we call reference or an object data type which is an array so this is actually mutable it means this is changeable whereas the other values the primitive types were unchangeable and we saw that because they just created copies when we set them equal to a new variable whereas here what we're doing is actually passing in this entire array so this array goes in and then what we're gonna do is push 5 on to that array then we're gonna print out whatever the value of the array is which should be 1 2 3 4 5 and then we're going to come down here and now we refresh the page to see what we actually get which is one two three four five one two three four five now why did this value X change like X is equal to one two three four here up here all we did was push 5 onto this parameter array that's not the same variable X why did it change well again that's because what we did is we passed the actual object to this parameter we didn't just pass you know some copy of it or something that looked like this Audrey right we passed the actual physical thing so when we change this it's going to affect X and it's going to fix ARR and that is kind of the basis behind mutability and it's very important to understand because you can design functions that actually don't need to return specific values they can just modify the input that you've sent to them so in this instance the best you know example is just to use an array you can see here that we wanted to add 5 to an array rather than you know having to return a new array from this function which we've done before we can simply just tack on this 5 by actually modifying the input here now I can do the same thing inside of here where I can do like ARR at 1 is equal to 5 and we'll have a look at how this works and you can see that now we get 1 5 3 4 1 5 3 4 again notice you know it's not changing now let's even go a little bit more complicated here and say var ARR 2 equals err art now I'm gonna go air r2 at 1 equals a hundred and what do you guys think is gonna happen now so I'm printing you know arr also print air r2 first so let's say console dot log will do ARR ARR and then X what is gonna be the value of all three of these variables here are they going to be the same are they gonna be different does this you know do anything that I've just created a new variable inside of here well let's have a look and obviously no it does not again it doesn't because when we do this we're not copying this array we're simply kind of just having a pointer that goes to it and says hey you know this is where the array is you know this is where you can modify it and that's how it works now I'm gonna go into a little bit deeper level of how this works just by doing something on the drawing tablet really quickly well I'm actually just doing with my mouse because it's nothing you know too important essentially when we have an array so I'm just drawing out here and excuse me cuz I'm just drawing with my mouse when we create a variable you know let's say X and we set it equal to this array what we do is instead of having it hold the value of the array and actually holds the kind of pointer or the location in memory where this array is stored so let's say this array is stored inside you know our computer memory maybe it has an ID that's something like you know to write well when we say x equals some array rather than saying you know X is equal to this array what's actually happening is X is equal to this ID so it actually knows the location of the array but it doesn't really necessarily know the value unless it goes to that location to look it up so when I do something like y equals x what I've actually just done it just made a copy of the pointer to this array so what that means is since X you know pointed to the array up there what's happening now is Y is now gonna point the same array so they're pointing to actually the same object in memory which allows us to change them from different variables so this is what we call an alias when we do something like this where we just have another name for the same actual object and I've just been doing this example with arrays but essentially any data type that is not a string float number undefined where null works like this and rather than storing you know the actual value of the object where we can copy it and kind of change it around variables it stores the actual location and memory of that object I'm gonna pause for one second just to get something up on my screen and I'm gonna show you guys how we can create a copy of arrays rather than having to what do you call it change the value because sometimes you don't want to do this okay so to copy an array there's actually two ways now the old way I'm going to show you first which kind of makes a little more sense to me because I'm from a Python background but there is this way in the new version of JavaScript that I'll show you I'm not really going to explain it because I don't understand it completely but it does make a copy of the array for you so what I've done here is said you know var x equals 1 2 3 4 5 I want to say VAR y and I want it to be equal to X but I want it to just be equal to an array that has the exact same values of X but he's not the same array right I don't want it to point to the same object because maybe I want to modify this one but I don't want to modify X right so how do I do that well there's two ways the old way is to do X dot slice so what this actually does and this is a method that you can use on arrays regardless of if you're copying them or not is takes a kind of section of the array and copies it so in this instance when we don't put any values inside the slice function or the slice method what it's gonna do is actually just copy this array entirely value by value now if I want to actually say you know just copy the first three elements of this array what I would do is something like zero comma four I believe and what this is gonna do is take all the elements starting from index zero up to but not including four so actually sorry this should be three so what that's gonna do is simply copy the elements one two three because we won't include index three because that is kind of the end bounce so I'll show you I'm just like I'm not making this up this actually works let's refresh here and you can see we get one two three four one two three so does how the slice kind of works if I just do this we'll have a look and we can see that we get this entire thing but now notice that I can change the value so I can say something like y2 equals nine nine nine and this will not change X so you can see this changes my Y value but it doesn't change X so that's kind of an easy way to copy now there's another way to copy I'll show you that as well here so let's leave actually everything that's there but let's just make a different coffee so what we can actually doing here to do dot dot dot and then X now I don't actually know really what this operator is but I just saw that when I was looking it up that this is a way that you can make a copy as well so if I do this and refresh we get the exact same answer so we keep stick with that copy what this has done is essentially just copied X and you know put that into it's a new array so if you guys are interested in looking at how that works you know I urge you guys to but I figured I'd show it in case anyone wanted to get a look at it and that has kind of been mutability so hopefully you kind of understand now the difference between a primitive type and a reference slash slash object type in JavaScript and why we need to understand the difference because sometimes we're gonna modify the actual you know input and sometimes we're gonna create a copy of it do some other kind of alterations on it so this is what we would call copier clone this value why whereas before when we just did something like you know VAR z equals x that would be known as an alias or simply another name for whatever this X is right so anyways that has been a firm ute ability if you guys enjoyed make sure leave a like subscribe to the channel and let me know if you want to see any other JavaScript videos coming up in the future