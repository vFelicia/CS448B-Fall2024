foreign you every builtin python function I'll run through a quick example of each and I guarantee you that you will learn something in this video and that you will see a ton of intermediate and advanced python examples for every single one of these functions I will explain the basic usage I'll throw the definition on the screen and afterwards you will know a bunch of functions that you did not know before and probably see a bunch of advanced python code that you can then go and learn more about now I did lie a little bit here there's a lot of builtin python functions so I'm actually going to split this into two parts in this first part I'm going to show you approximately half of them which is about 35 functions then in the next part I will show you the rest however I will give you one bonus item in this video and that is the sponsor of this video thanks to aista for sponsoring this video with aista you can create a full stack web app in just five minutes generate a crud API in seconds and have their magic Cloud Auto magically create your web apps without coding one of the best parts of their magic cloud is it can wrap new or existing databases in a crud API and add security automatically making you 10 times more productive and saving you hours of work now not only do you get pregenerated crud apis and effortless security you can also have magic generate a frontend user interface for you this interface is fully featured allowing you to view and interact with your database and even access administrative controls once you're all set up you can schedule hyper Lambda tasks and use their hyper IDE to edit your files directly on your server start taking advantage of low and no code software development today by getting started with iista and Magic cloud and getting one free month of usage go to aista.com and sign up now for your free trial so let's get right into it here after I tell you that I do have a programming course programmingexpert.io if you want to learn more about python learn go and learn Advanced python specifically check out that course I'll leave a link in the description anyways let's dive in here the first function we have is ABS standing for absolute value now absolute value can be used on anything that implements the underscore underscore ABS method now that means we can use this on floats we can use this on ins and you can see here that if I run my code here that I get the absolute value which is just the positive representation of these numbers so positive 9 and positive 100.876 now notice that I wrote this custom class here where I implemented my abs method now this allows me to return anything that I want and now when I call ABS on my custom object which implements ABS it's going to return to me hello which is just the lowercase version of the string hello next function we have is a iter now a iter stands for asynchronous iterator and this returns to the asynchronous iterator associated with an object now obviously this is a little bit Advanced but an asynchronous iterator can be returned from any object that implements the a8er method so if we have a look here at this example function we can see that we create an instance of our asynchronous iterator right here we pass in a start and a stop value we then get the iterator by calling the a function now this is similar to the inner function which you can call on anything that is iterable a iter is the asynchronous iterable version so here it's going to return to us our self which is just this object and now if I print this out you'll see the iterator and then we can Loop through the iterator using an asynchronous for Loop now what I do inside of here is I actually will automatically await the value coming from my async next method now if I run you can see that it's going to take a second and every second is going to print out the next value coming from my asynchronous iterator I'm not going to explain async programming in this video because we don't have enough time if you want to learn that you can check out something like programming expert so the next function we have is all now this tells you if all of the values in an iterable object are true so I can print this out and you can see that we get false for the first one the reason we get false is because 0 is not a truthy value so every single value in python or literal that we can type out like this is either true or false something like zero is going to be false something like an empty string would be false as well uh something like an empty array or an empty list is going to be false as well and that's why you can see that we're getting the results like this so fairly useful one thing to note about say an example like this where we have D is that since we have elements inside of our nested list this actually counts as true which you can see that's printing out here so even though these values are a falsy value since this here has elements inside of it it's a truthy value and since we have all truthy values inside of our list we get true when we print out all of D so the next function we have here is a next a next stands for asynchronous next and this is what is called on an asynchronous iterator to get the next value now you may not know this but when you use a for Loop it automatically calls the next or a next method depending on if you're using an asynchronous for Loop or a regular for Loop and in this example here we can actually manually call the next method from an iterator using anec so if you look down here you can see I'm awaiting the next value by calling a next I need to use a weight here because this is an asynchron awareness function and this has a CO routine that's being awaited inside of it so if I run this you can see that we get one two and then three now I could also have iterated through this using a for Loop if I want but I wanted to show you the a next method which again just gives you the next value in the iterable sequence coming from an asynchronous iterator the next function that we have is any now any is going to tell you if any of the values inside of an iterable object are true pretty straightforward similar to all but only one of the values needs to be truthy so if I run this here you can see that I get true true true until the very end where I get false because every single value here is a falsy value so the next function that we have here is bin bin stands for binary and it's going to give you the binary representation of an integer so in this case we can print at the binary representation of 100 and negative 100 and notice that rather than giving us the twos complement representation it just gives us a negative sign here in front of the zero B whenever you have a binary value it's going to be denoted 0b you can strip that off if you first say converted this to a string and then stripped it uh it's kind of up to you you can also use a format method to do this however this is the bin function so the next function I have here is Bool now Bool is actually the Constructor for the Boolean type or for the Boolean class so when I pass a value here to the bull function it gives me a new Boolean object so you can see here that when I run this and I print out just Bool which is the function it's actually giving me class so this isn't really a function it's actually a class but when we call it then we get the Constructor of that class anyways I can pass to this any value that I want and if this value is a falsy value it's going to give me false if it's a truth you value like one or something that's just not false then it's going to give me true so notice here if I pass like an empty dictionary that's going to be false if I pass an empty list that would have been false in this case it's true even a number like negative one this is going to be true because it's not zero the only uh falsy integer value is zero the next function that I have is known as callable now callable is going to tell you if something is callable so that means you can call it like a function so in this case if I'm saying callable of class this is going to return true because I can call the class by putting parentheses like this which is going to give me the Constructor of the class even if it doesn't exist next I have Funk now Funk is of course a function so it is callable now notice I'm not putting the parentheses here I'm just writing the actual name of the function which is the object I'm checking if it's callable or not next I have function 2 but I'm actually calling this function now when I call this function it returns a function and that function will be callable so this will return true next I have func3 which is a Lambda or Anonymous function and this will be callable I can pass a parameter to this and call it like any other function then I have something like a string which of course is not callable so if I run this here you can see we get true for the first four and then false for the last one the next function I have here is CHR or Char now this is going to give you the character that's associated with an integer this integer is also referred to as the ordinal value so in this case 65 represents our capital A and 97 represents our lowercase a it's not necessary really intuitive what number represents which character continuing if we print this out you see that we get a and a because when past 65 it gives us the character which is capital A now this is often useful when you want to generate a sequence of characters and you don't want to say I have to type a bunch of them out so if I wanted to get maybe the entire alphabet or just a bunch of different characters rather than having to type all of them out on my keyboard and put them in a list I would just increment the ordinal value and pass that to my CHR function it would then give me that character and then I could say Auto populate a list that contains the alphabet the next function that I have for you here is class method now class method is used as a decorator on top of a method that you want to have access to the class not to the instance itself whenever you decorate something with at class method by default the class itself so actually this class name will be passed inside as the CLS parameter you will not have access to the instance even if you call this using an instance so you can see we have a regular method this regular method just prints itself which is going to go to this string method right here that I implemented so you can see when I say t equals test class and then T dot regular method that it prints out my test instance whereas when I call the class method either on my instance or on the class itself both are valid and do the same thing I actually get the class when I print it out because it's not using the representation of the object or of the instance next we have complex now I don't really know much about complex numbers but this is how you can generate complex numbers you can pass one argument which is a string and it gives you the complex number for that or you can pass two arguments which I guess are the components of the complex number I'm not a physics guy so I don't really know how this works but there you go you can see complex numbers the next function I have for you here is known as Dell Adder now this stands for delete attribute and it simply deletes the attribute from an object so what I've done here is set up a custom class we Define the X attribute on our instance we say C is equal to my class and then I can print out C dot X this will be valid I'll get 10. then when I do Del Adder first I pass the object that I want to be deleting the attribute from then I pass the name of the attribute as a string don't try to do something like this that's not going to work you need to pass it as a string then it will actually delete the attribute and then you won't be able to access it so when I do this here notice I get an error on this line because the attribute is now deleted now this is completely equivalent to doing Del Dot and then this is going to be C dot X it is literally the exact same thing the next function that I have for you here is known as dict now this is going to create a dictionary this is actually the Constructor for the dictionary class so notice here that I have a list now this contains key value pairs so I have a and one so this will be my key this will be my value then I can create a dictionary using this so let's see how this works notice I get A1 and B1 now let's just add another value here do something like two one and print this out and notice that I get an error because I don't have exactly two elements it says has length three two is required so there's a few different ways you can initialize a dictionary using something like a list in this case since we have two elements this is gonna work even if we change this to a list we'll be able to initialize so actually let's make it mix type and run this and notice it's the same thing this is fine the next function that I have here is known as dir now I think dur stands for directory and this is going to give you all of the different members that are available on a specific package or class or whatever you call it on so in this case I'm calling it on the math package so if I run this you can see it's going to give me everything inside of the math package which in this case I guess is all the functions or methods that you can use now we can also call this on something like say um let's create something like dict okay if I call this on dict it's going to give me all of the methods hopefully that makes sense that is dirt the next function I have for you here is known as div mod now this is kind of a combination of your Division and your modulo or modulus operator now what this is going to return to you is the whole number quotient as well as the remainder after division so if I do something like 10 divided by 3 then this is going to give me three remainder one so let's print this out and I get three one the next function that I have is known as enumerate now enumerate allows you to have access to the index as well as the value when you're iterating over an iterable object in this case I'm iterating over the list and I want both those things so rather than using the range or just getting the different values I'll get both using enumerate when I print this out you can see that's what I get now just to show you how this actually works let's print the list of enumerate and then values the reason I need to make a list here is because enumerator is going to return an iterator it doesn't actually give you a list so I need to convert my iterator to a list so that I get all the values now when I do this notice that it's actually just going to give me tuples containing the index as well as the value and that's why I'm able to use index comma value this will actually work when you're iterating over an object that has multiple values so if I do something like index value in say values like this now it's going to give me the index and the value for every single one of these right so it's going to be the exact same thing the next function that I have for you here is known as eval and this stands for evaluate or evaluation this allows you to evaluate an expression that is from a string so in this case I can actually ask the user to enter some code code and then based on what they enter I can evaluate that now before I even run this I will mention that eval can be pretty dangerous so don't implement this in your code unless you're very certain what it's doing and how it works this allows you to well evaluate expressions and that can cause harm or do things in your code now what I will do is just run this script so I'm going to say python email.pi enter some code let's do something like print and then hello like that and notice it actually prints out hello now obviously I'm not cheating here if I change this and do something like print X it's going to print out X the next function that I have here is known as exec now this stands for execution and this actually allows you to evaluate python statements not just Expressions so in the previous example I couldn't do something like create a variable or assign to a variable here though I actually can do that so let's run this let's say python exec dot Pi now let's do something like x equals zero semicolon X plus equals one and then print out X and we'll put a semicolon and notice I get one so I can actually build different uh statements here have those executed and I could change the value of variables so be very careful if you're using exec but I figured I'd show it to you because it's kind of cool the next function that I have here is known as filter now this allows you to filter through values in an iterable object in this case I have a list and I want to filter out all of the even values the way the Filter Works is you pass a filter function if this filter function returns true and the value is passed to it then it includes that value in the filter object or whatever it returns otherwise it does not now you can pass an anonymous function like a Lambda function or you can just pass a normal function like this notice here that I'm returning if this value is divisible by 2 or not so let's just print this out notice that when I just print the filter object itself so let me move this down a little bit when I'm just printing this it gives me this weird filter object that's because this is an iterator this is not actually something that you can view so what I need to do is convert this to a list if I want to be able to print it out and view it however typically you're just going to use this object because you can say iterate through this object with no issues you don't need to convert it to a list unless you're trying to say look at it the next function I have for you here is known as float now this is again the Constructor for the float type this allows you to convert something to a float so most useful for a string however you can also convert a regular integer to a float now notice here that we also have a few special things we can pass to float so if you're trying to represent infinity then you can pass INF and this is going to give you whatever the python representation of infinity is you can also pass negative imp and then you can do something like use your scientific notation something like one e negative 0 0 3 and then if I print this out you see that I get all of these values now if and negative imp are actually valid as infinity and python so keep that in mind that's probably the most useful aspect of this float function the next function I have to show you here is known as format now I don't have an hour to explain to you all of the formatting rules that you can use I've just put them here you can see that you can use this format function to generate a string that allows you to say a line specific characters or change the width of something or the Precision or the different type that you're showing you can also use it to create a binary representation of an integer which is kind of interesting I can format 100 as the type B this is going to give me the binary type so if I print this out here notice that I get binary and if we're looking here at this front example or this top example I guess notice that there is a DOT format that you have access to on a string and I believe the formatting options are pretty much the exact same it just works a little bit different in terms of how you write the formatted string next we have a frozen set now the Frozen set function is going to give you an immutable version of a set so what I do is I pass whatever items I want to be in my immutable set and then this is going to give it to me so I have my regular set where I have access to like add delete Etc and then I have my Frozen set now the whole point of a frozen set is that it's immutable not mutable like a set meaning I can't change my Frozen set and since my Frozen set is immutable I'm able to use it as a key for a dictionary area so that's probably the most useful aspect of your Frozen set it's kind of a hashable type and again that allows you to use it as a key the next function that I have here is known as get Adder stands for get attribute pretty straightforward Works similar to Dell attribute you can see that I pass my object as well as the string representation of the attribute and I'm able to get that the next function I have for you here is known as globals now globals is going to give you access to all of the global variables in the current namespace so if I print this out here you can see I have my name main I have my file I have if this is cached I have builtins blah blah blah won't go through this it's fairly advanced the next function that I have here is my has Adder function this tells you if an object has a specific attribute this is actually fairly useful and allows you to avoid trying to do like a try accept block to see if something exists or not so you can see that I can check if x exists on C or Y exists on c as always we're using a string here rather than typing out with the actual uh I guess character would be so if I run this here notice that c does have X but it does not have y the next function that I have here is known as help now this is going to give you the documentation for whatever object you call this on doesn't work for everything but it will work for a lot of the builtin python types or at least it will give you some meaningful information so if I look here at the help on the int class then you can see I get all of this data the next function that I have here is known as hex now this stands for hexadecimal and it's going to give you the hexadecimal representation of an integer now this only works on a class that implements the underscore underscore index method now if we create a custom class that implements Index this will work it's just going to return the hex value of whatever is turned by index so in this case when I run this I get 0xff 0x1 and 0xa which is the correct hexadecimal codes for 255 1 and then 410 which is returned when I call this on C because it calls the index method the next function I have is known as ID now this is going to give you the identifier for a specific python object this is very useful if you want to check if two objects are the same or not so in this case I have my mutable list I then assign y equals to X now this creates an alias meaning that it's just going to be a reference to the exact same object so the ID of X and Y should be the same meaning anything I change on X will change on y so let's have a look at this here you can see these two IDs are the same meanwhile if I have something like a is equal to and then I believe this is a million and I say B is equal to and I've done a plus 1 minus one you can see that I get a different object now kind of an interesting fact here if you do b equals a and you print this out you're going to get the same ID now the reason you get the same ID is not because these objects are identical but it has to do with how python is managing memory so that's why I had to do this plus one minus one so I get the same value however I get a different object a little bit weird obviously if I make a change to a it's not going to affect B and if I make a change to B it doesn't affect a however to save memory uh there's kind of some optimizations going on where they're actually pointing to the same value the next function I have is the input function I think you all know what this does but this allows you to get user input keep in mind the user input is always entered as a string and the input will end as soon as there is a new line character or a carriage return that is entered so as soon as you hit enter then it's going to stop the input and then return whatever you typed in to the variable that you assigned to import next we have the int function now the int function is going to be the Constructor for the int class allows you to pass pretty well any value here and convert it to an INT assuming it's a valid int if you try try to pass something like hello obviously this isn't going to work and it's gonna crash but notice here that if I convert one or sorry if I convert true I get one if I convert false I get zero uh just a valid string like this one two three I can even do a negative if I do something like a floating point value it's just going to strip off whatever the floating point is so it's not going to round it just strips it so math.floor or uh yeah math.floor not math.ciling gives you nine and then if I do something like binary and I indicate the base that I want to be converting from it will actually give me the integer representation of this binary value the next function that I have here is known as is instance now this is going to tell you if an object is an instance of a class so you can see I have a few basic examples here I'm saying if a is an instance of int if B is an instance of float obviously that is not correct if a is an instance of type if you know what type is you'll know that's not the case however if we look at int instance of type you'll see this is actually true now type is kind of the base class it's not really the best way to describe it but type is the type of a a class so int is of type type because all of our classes are the type type I know that seems really weird but you can mess around with this type function and maybe you'll see what I mean the next function I have you here is is subclass now again this is going to tell you if something is a subclass of another class so I have a few classes that I've set up here I've even done a multiple inheritance example and you can see that I first check if C is a subclass of a that is going to be true is d a subclass of C well yes it is because it inherits or nonherits but it is a derived class of C is uh d a subclass of a well D is going to be a subclass of a because D is a subclass of c and since C is a subclass of a that makes d a subclass of a as well so it kind of chains like that continuing is e a subclass of a well of course it is because we inherit from it and is e a subclass of B well yes it is because we inherit from it as well looking here you can see that these are all tricky all right so we move on to our last function in part one which is itter now iter is going to give you the iterator associated with a regular iterator obvious not an asynchronous iterator that would be your a hitter you can see that I've set up a regular iterator example here and when I call iter on my custom object which implements the iter dunder method it returns to me that iterator I can print out that iterator and I can Loop through it let's have a look and notice it all works so with that said that will conclude part one of every python function I apologize if I went too fast for you but this was really meant to be kind of an entertaining and just quick look at a lot of the different functions that exist here hopefully you learned something hopefully you're looking forward to part two and hopefully you're gonna go buy programmingexpert.io from the link in the description which is the best platform to learn more about Python and become a software engineer I look forward to seeing you in part two