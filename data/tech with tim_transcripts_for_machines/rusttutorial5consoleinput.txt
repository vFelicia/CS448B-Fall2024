hello everybody and welcome to video 5 in this ross programming tutorial series in this video i'll be going over collecting user input before i do that i will again mention that i have a course programming expert dot io best place to learn how to code over 250 practice questions actually now i think it's almost close to 300 practice questions assessments projects all kinds of stuff to interactively learn how to code of course not in rust and go and python but great languages to learn regardless if you haven't checked it out yet please do from the link in the description now though let's get into user input so the first thing i want to discuss here is that in any of our rust programs we have something called a prelude now the prelude is essentially a bunch of functionality that's automatically imported and added to our rust file or rust code without us having to manually import it so that's kind of what allows us to use things like print line or fn or different types or a bunch of reserved keywords and functionality from the rus standard library so every programming language has a standard library that comes with a bunch of default functionality that you can use and rust imports a bunch of that in the prelude for you so you don't have to manually import it however if you want to get user input this is not included in the prelude and you do have to manually import it so that's what i'm going to show you now so that's kind of why i wanted to discuss that again the prelude just brings in a bunch of basic functionality that you're almost always going to use it's kept pretty minimal and then there's a ton of standard library packages that you can import and a package in rust which is essentially a collection of code is referred to as a crit so if you hear me say crate i'm really referring to a package or a library they're kind of synonymous and then within each of those packages or libraries or crates we have something called a module which is a specific piece of functionality for example here we're going to use the i o module so what i'm going to do here at the top of my program above this function is where i use std standing for standard library and then colon colon io so what i'm doing is using the std crate or the std package or library and then i'm bringing in the i o module which stands for input output and is going to allow me to get input from the standard input so if i want to start collecting input here the first thing i need to do is declare a variable that's mutable that's going to allow me to store my input so i'm going to say let and then this is going to be mut and i'm just going to call this input for now and this is going to be equal to string with a capital s colon colon new now what this operator is right here we've seen it already is the path separator operator so it allows us to go from something like a package to a module and then from something like a module to a specific function or method that's defined inside of there so here i'm using string and then i'm grabbing the new function i'm going to call it a function i believe that's what it is which is kind of a constructor and going to create a new empty string object for me we're going to talk about strings in another video because they're not as straightforward as some other programming languages say like python or javascript for now though just understand we're creating a mutable string that we'll be able to change later on okay so now that we've created this string we have a variable where we want to assign our input we now need to collect the input so to collect the input we're going to use i o colon colon and then this is going to be std in now i believe std in stands for standard output in and the standard output is kind of just like your terminal right whether you're on mac or linux or windows your terminal your command prompt is kind of the standard output so when you're typing in there and we have std in you know that's what that's doing so hopefully that makes sense okay so we have stdn then we're going to call readline and we're going to say at mutt and then input like this now this is difficult to explain without getting into some much more advanced rust features essentially what we're doing here is we're actually creating what's known as a mutable reference to this input variable which is going to allow this function or method whatever you'd like to call this to directly modify the data that's stored inside of this variable again i know this is kind of weird but by default in rust when you pass something say like input to a function you're passing actually a copy of whatever the value is here in input even though this is mutable by default when i put input here what's going to happen is this function if you're familiar with what i'm talking about here is going to create a copy of this value and that means if it were to say change that copy it's not going to change the input value here and that's not helpful to us because we want to grab the the input in this variable so instead we need to use a reference now reference is this ampersand we're going to get all we're going to get into this in later videos so don't worry if this is confusing for right now however a reference by default is immutable meaning i can't actually change the reference if i pass this to the function so instead i need to say at mutt and then input giving me a mutable reference which i can modify essentially all you really have to understand here is this is allowing us to actually access the input value and change what's being stored here to the input that's typed in in the standard input i know confusing uh but that's that's what's going on okay so then we need to go here and say expect and i'm going to say failed to read line okay so let me describe what we just did here so we grabbed the standard input function from the i o module we're then using the read line method that's what i'm going to call this we are passing a mutable reference to where we want to store the input and then what this dot expect is doing is essentially catching any errors that are going to occur so what's actually returned here from reline is something known as a result object i don't want to get into it too much because it's confusing especially if you're not familiar with these more advanced programming features but what this requires us to do is to call this dot expect on now when we do that it's just gonna check if this gave us a valid value so if we actually got some input or if for some reason it couldn't read what we were insert that's all it's doing there so if it couldn't read if we couldn't read the line we're going to say failed to read line you know the error is going to be handled and we'll see this kind of in the terminal otherwise though we'll just have the value be assigned here to this input variable all right so let's just continue here and we can go back and look at this more so now i'm going to say print line and i'm just going to print out what the user typed in so i'm going to do my curly braces like that and then input okay let me make sure i have my semicolons let's go here and let's just go cargo and then run and let's see what we get and notice we get hello comma world and then no it's giving me my cursor right like it's blinking here so i can type something like hello and when i hit enter hello gets printed out there you go so let's run this one more time we have hello world my cursor starts going this means i'm allowed to type something in here i say hello what is up and then it's going to print out exactly what i typed it okay so that is how you get standard input or that's how you get input from the console so now that we've done that let me just remove this expect and show you what happens so the code actually should execute just fine however you will see that we get a warning so let's run this and notice now that i get this unused result that must be used so i'm getting the warning from this line because as i said it's returning a result value that we're not using now result is going to contain as it says here a potentially an error now if it has an error we need to handle that with the dot expect if it doesn't have an error then all is good and again we get that value assigned to our variable so in this case i'm not really going to be causing an error by typing anything in the console but there is situations in which we can't read the line and that expect will be triggered so it does let us actually execute the code but again we get that warning so you want to have this dot expect here to handle an error that is returned by result if an error were to occur okay that is really all i need to show you though in terms of standard input there's not much to go through here one thing to note is that when we're getting standard input we're gonna be using a string let's see what happens if we change this to something like a number right let's change that's like four so let's go here and let's clear and let's run and notice that we get a problem here it says we expected a string but found an integer so when we're getting the standard input using readline we need to have the type here be equal to a string and that's why i did string colon colon new because i need to initialize this value first of all and i just need an empty string so that the type is going to be strings then we can change this to be the string that the user typed in all right with that said i will leave the video here i hope this was helpful showed you how to get user input in the next video i believe we're going to look at some arithmetic as well as how we change the types of stuff and then we'll continue on to some more advanced rust features as always if you enjoyed leave a like subscribe to the channel and we'll see you in the next one you