hello everybody and welcome to the third video in this pie game car racing tutorial series in this video i'll be implementing the computer car so we're going to set up a path for this car to follow along with then we're going to make it follow the path which is much more complicated than it seems let's get started so the first thing i want to do here is make a class for my computer car so i'm going to say class computer car like that it's going to inherit from abstract car and then inside of here i'm going to define the image for my car as well as the starting position so i'm going to say image is equal to and this will be the green car and the starting position will be 150 okay that's pretty straightforward for the computer car next i'm going to override the initialization so i'm going to say define init self this is going to be maxwell and rotationville is giving me that very good and then i'm also going to take in a path which is going to be equal to an empty list by default then what i'm going to say is self dot not self actually super dot underscore underscore init under squad underscore and i'm going to pass the max velocity and the rotation bell what this is going to do is use this method right here to initialize all the values that i need and then i'm just going to initialize a few more under here i'm going to say self.path is equal to path path is going to be a list of coordinates of points that i want my card to move to and i'm going to say self.current underscore point is equal to zero because i need to know what point in my path i'm currently at then i'm going to say self.vel is equal to the maximum velocity because my computer car we don't need to worry about acceleration it's just going to immediately start at the maximum velocity and will move at that speed the entire time okay now we have the computer car the next thing i want to do is just implement a method on this car that can draw all of the points in the path just because this will be useful for us to visualize so i'm going to say define draw points and i'm going to say self and we'll take in a window and i'm going to say 4 point in self dot path i guess we could have called that points too but that's fine and then we'll say pygame dot draw dot circle and we'll draw this on our window we need to pass the color of our circle which is going to be red so in pi game the colors are rgb so red green blue so 255 is full red zero green zero blue then i'm going to pass the point this is the going to be the center of the circle that i want to draw and then the radius will go with five so that means we're going to have a diameter of 10 for our circle so that should draw all of the points for us that's pretty straightforward okay now we have drop points next i want to make some feature that allows us to actually kind of click on the screen and i guess draw create select all of the points for our path so that way we don't have to manually add them inside of this path variable so you'll see what i mean in a second but first let's create a car let's go computer underscore car is equal to computer car we need to pass a maximum velocity and a rotation velocity so for now let's just go with 4 4 we'll match our player although we will reduce this later and then for the path we won't pass anything right now because we're going to kind of dynamically create the path okay so now we've made computer car let's draw it so let's pass computer card to our draw function and then let's go to draw let's take in computer car and let's do computer car dot draw and inside of here let's draw on the window and then what we will do is we will override the draw method in here so we'll say define draw self win will then say super dot draw so we'll call the draw method from the abstract class here so we'll do this but before we do that we will draw all the points or after it doesn't really matter but we'll draw the points so we'll say super dot draw we need to pass the win and then we'll say self dot draw points and the window so now when we draw our computer it will also draw all of the points in the path for this ai computer or whatever okay there we go now that we have that let's just run the code and see if the computer is being drawn and then we will continue okay great so the computer car is there that's all we were looking for okay let me clear the console here now let's continue so the next thing i want to do is make it so we can click with the mouse and that adds a point to our computer's path and then we can get all of those points at the end of the program so we don't have to manually write them this is pretty easy i'm going to go inside of my event loop here so for event in pygame.event.get i'm going to say if event dot type equals equals pi game dot this is going to be mouse button down like that then what we're going to do is get the position of the mouse we're going to say pause is equal to dot pygame.mouse.get underscore pause and this will give us the x y coordinate of our mouse on the pi game screen then we will say computer car dot path dot append position so we'll add that position to the computer's path okay that's really all we need to do except at the end of our program we're just going to print out the computer car dot path just so that we can copy it and then save it in our file and use it for future use so let's run the code and let's see what we get here okay we get our computer car now let's start adding some points so i'm going to add one here i'm going to add one here and i'll just add all these and then once i'm done i'll be right back okay so i've added all of my points here you can see this is kind of the path that i've defined i've tried to spread them out as much as possible but it doesn't really matter i mean just add the points and make them on the track and you'll be good you could put them off the track because we're not checking collision with the walls but obviously the better you make your points the better this is going to be now i recommend you do spread them out a bit if you make them too close you're going to see it's going to look like all jittery when we're kind of turning and angling towards them anyways that's fine okay so let's close this and notice when i close this it prints out all the points so what i'm going to do is copy all the points and i'm just going to make a variable at the top of my program here called path and i'm going to have it store all of these points just so that i can use this with my computer right with my computer card so now what i will do is i will actually go to where i initialize my computer and i will pass that path so now that will be set for my computer and i'm going to get rid of this mouse button down logic because i no longer need that because my path has been set so now that i have the path let's just run this and notice the path is still printing out it's you know saved right because i have it in a variable great then of course my red car can continue to move just like it did before awesome so now that we have that what i want to do is hop over to paint and i want to show you or discuss how we're actually going to kind of solve this problem of moving the computer car towards these points and it's pretty complicated to do this but i will try my best to explain so let's say our target point is right here and our computer is right here okay it's our computer car so let's just go c this is car now the first thing that's kind of intuitive to do here is to draw a line between the top left hand corner and the point that we want to get to now we're going to be using the x xy as the top lefthand corner of our car so keep that in mind that is pretty important for this and anyways there we go so we have our target and we have you know our car now how do we get to this point well the first thing we can do is we can calculate the displacement in x and the displacement in y right so we know the velocity but we do not know the angle and so what we're actually going to want to look for here is the angle between our computer and this point if we know the angle then we can tilt our car to that angle and then we can move in that direction easier said than done but that's the goal we want to find the angle between our car and the point that we want to get to and then we want to set the car so that it's facing that direction and then just move the car in the same way that we moved our player car because we already know how to move the player card right that part is done we've implemented that logic so anyways we have x and we have y now we can easily calculate x and y because we know the coordinates of this point and we know the coordinates of this point we would just take this point's x subtract by this point x that gives us the displacement in x this points y subtract by this points y that gives us the displacement in y now it doesn't really matter if we get negative or positive values we could take the absolute value if we want but it doesn't matter if we get negative or positive okay finding the angle is still going to be the the same sorry and then we have our velocity now the velocity we don't really need to use but we know the velocity is going to be the hypotenuse of the triangle okay that's fine so what we're trying to do here is determine the angle we know x y and v so there's multiple ways to do this now remember our equations are so this is going to be an h let me erase that so ka and then toa now in this case it seems intuitive to me to use toa because we know the opposite and we know the adjacent so what we can do if we want to solve for theta which is the angle that we're looking for is we can write the equation tan and then this is going to be of theta is equal to o over a now we can do our substitutions and when we do our substitutions we see that o is y and that a is x so we know x and y those are two variables that we know so now we want to solve for theta so any of you that know trigonometry know that we have to take the inverse tangent of this and then that will give us theta so we can say theta is equal to and then tan inverse of y over x and then that will give us the angle that we're looking for and in fact this is actually always going to give us what's known as an acute angle now an acute angle is any angle that's less than 90 degrees now it will give us either a positive or negative acute angle so we could get a negative value here or a positive value here if we get a negative value here that's indicating to us that we are looking to the left if we get a positive value then to the right anyways that's not super important right now but just keep in mind this is how you calculate theta and that this is always going to give us an acute angle that is important it's always going to give us something based on the way we're doing this calculation that is less than 90 degrees okay so now we have found the angle so we found the angle between our car and our point so it should be simple enough right just set the car at that angle well it's not quite that simple the reason why it's not quite that simple is because if our car is like facing this direction and we want to go over here if i just set its angle to that it's going to look like it's just teleporting over that would be the easy solution just set the angle and then that'd be fine but if we do that what happens is first of all we're going to have our car facing the wrong direction a lot of times we're also going to have the car flipping instantly which we don't want we want it to kind of slowly transition to that angle by its rotational velocity we don't want it to just teleport over and face that direction so now comes the problem okay we know that angle we know the angle our car is currently facing how do we determine what direction to turn the car to get to that angle that's really the problem now we know the angle we know the angle of our car now we just need to actually make this car get to that angle so there's a few problems here again the first problem is that we need to make sure we aren't just teleporting so we have to kind of decide do we want to go to the left or do we want to go to the right now this might seem easy when you're looking at an angle like this but there's so many different angles we could possibly have and sometimes we could take the unoptimal approach if we only ever went to the left or only ever went to the right when trying to get to these angles so for example let's say we have this okay let's just move this over a bit let's say our target angle is here okay and our car is facing this way so car is black and the target angle is red now what way should we turn to get to this target angle well we should turn this way however we might end up turning this way so this is kind of the problem we need to figure out which way to turn now another problem that we're going to run into potentially here is that we might have the angle be here so let's imagine this guy is is gone okay we might have it be here now theoretically me turning like this is actually going to make it look like we have the same angle i know this seems really weird but the way that this angle is calculated means that this could actually be this or other way around we could get this angle from this so we need to kind of put in some checks here to ensure that if we're actually moving downwards we're actually going to go in the downward direction we're not going to mistakenly calculate this angle the reason why this is a problem is because these two angles are the same right if you look at this angle and you look at this angle they're the same and so when i do the tangent based on the way that i'm doing it i could get this when my point is down here and so i need to make sure that i'm actually looking at what direction my point is in if it's lower or higher than where i am and based on that i'm going to need to make an adjustment to the angle i get to ensure that i'm going the right direction so i'm just trying to kind of point out some of the problems that you can run into doing this and there's all kinds of other problems as well for example right like i was saying we might go and try to go like this when instead it would be more efficient to go like this so if we ever have a very large angle we'll actually want to reduce that angle to a smaller yet equivalent angle so that we end up moving in the i guess best direction the quickest direction to get to it i also realize that all of my lights turned off here i'm just going to turn them back on i'm sure you guys can still see my face fine but i have like these background lights that for some reason went off okay so that's a bit better okay anyways that was kind of the point of this i'm sure this hasn't cleared everything up i haven't necessarily stated the solution i just wanted to show you problems that can happen and really the main problem is what direction do we do we go do we go left or right that's the main idea so let's now start trying to implement this so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews not only do they have a ton of coding interview practice questions they also have mock interviews a data structures crash course and a bunch of other awesome features to help you prepare to land your dream software engineering job with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform i'm going to go into computer car and i'm just going to define a move method now this move method is special because when i'm moving i need to move towards a point so the first thing i need to do is angle the car in the correct direction and if i am in the correct direction then i can start moving towards that point and we already know how to move we can just use the move method that we have inside of here right if we're angled in the right direction and we're going by a static velocity then that's fine so i need to look at my other code here because it's very easy to mess this up so inside of move what i'm going to do is just make sure that we have a point to move to i'm going to say if the self.current point is greater than or equal to the len of self.path then i'm going to return this is just going to ensure that we are not going to get an index error by trying to move to a point that doesn't exist that's the point of this line after that i'm going to say self.calculate and this is going to be angle now we will write this method in a second but this is going to calculate the angle and shift our car in that direction the next thing we're going to do is say self dot update underscore path underscore point now what this is going to do is see if we need to move to the next point because as soon as we hit a point we collide with that point we then move to the next one that's it and then here we're going to say super dot move so we're going to actually call manually the move method that we're overriding inside of car okay so let's start by implementing calculate area or calculate angle i'm going to say define calculate angle self the first thing i want to do is calculate the displacement in x and y between the target point and my current position once i do that then i can find the angle between my car and the point and then i can adjust the position or angle of my car accordingly to move towards that target point so i'm going to say target underscore x target underscore y is equal to and then it's going to be self.path at the self.current point index this is getting our target point then i'm going to calculate the difference in x i'm going to say the x diff is equal to the target x underscore x minus the self.x then i'm going to say the y diff is equal to the target underscore y minus the self.y now i don't care about the absolute value because my tangent function will actually handle any negative values here and it can potentially give me a negative angle we will handle the negative angles the negative angle is just you know going to i guess the right instead of the left or the left inside the right it doesn't really matter okay so now that i have both of these i'm just going to say if y underscored diff is equal to zero then the the desired underscore radian underscore angle is equal to and i want to say 180 but i want this to be in radians sorry not 180 i want this to be 90. and so in radians this is going to be math.pi divided by 2 because math.pi is 180 degrees 2 2 math.pi is 360. so the reason for this is that if the y difference is 0 i need to manually set the angle because my equation involves a division of the y difference and i can't have a zero division error so you'll see what i mean here i say else the desired radian angle is equal to and this is going to be the math.arc tangent so the inverse tangent of and then this is going to be math dot no not math sorry this is going to be x diff over y diff okay so this is going to give me the angle that is between my car and between the point and then same thing here this will give me that angle so if we have no difference in y then that means that we're horizontal right we're either 90 degrees or we're either 270 degrees now in this case we'll just make it at 90 degrees because 90 and 270 are equivalent angles not in direction but in like the magnitude of the angle if you divide them hopefully that's making sense but we just need to avoid having an over zero so that's why i'm writing this line here okay now that we have that what i want to do is i want to kind of implement a clause here that's going to fix this angle slightly if a certain thing occurs i'm being very vague but let's just write it i'm going to say if the target underscore y is greater than so it's lower down on the screen than self.y then what i want to do is say the desired radian angle plus equals and this is going to be math.pi so the reason i'm doing this is kind of what i discussed before we can potentially have a problem where the angle that we calculate is it's always going to be an acute angle right and so if the target that we're looking for is actually lower down on the screen than where our current car position is the turn that we need to make is more extreme than what the angle is that we're getting maybe we're getting an angle of 25 degrees right and the reason we're getting 25 is because 25 kind of spans this whole horizontal line and so we're looking at it like this but what we really want is to add a whole math.pi add 180 degrees to it so we go in the complete opposite direction of what the angle is that we calculated because we're going down because remember we're always going to get an acute angle so we're always going to be going kind of this way or this way so we need to figure out if we need to go the opposite direction down now in that case well the case is this if target y is greater than self thought why we're going down so we have to add math.pi to the angle to ensure that we're going to go the correct direction i'm sure this is confusing but that's really the best way that i can explain it i'm not a math professor and i don't want to get too much into it because i'm sure i'll butcher the the mathematical explanations of all the angles anyways there we go okay so that's kind of the first thing that we need to do now that we have that though we're going to say the difference in angles is or just angle actually is equal to self.angle minus and then the desired radian angle now we need to first convert this to degrees so we're going to say math dot degrees like this okay so remember this is going to give us the angle in radians so then we convert it to degrees and then we take whatever our current angle is and subtract it by whatever the desired angle is to get to and then based on if this number is positive or negative we're going to know if we have to move left or right now another problem happens here what if the difference in these angles is really massive what if it's 270 degrees what if it's 290 degrees in fact what if it's anything larger than 180 degrees well if the difference in the angle is larger than 180 degrees we are going to be taking an inefficient route to get to the angle so let me show you what i mean if i go to paint here and we zoom in so let's go come on zoom in control plus does that not zoom okay let's just move this okay so let's say we have this example here right where we have some angle here and actually let's just do one here and then we have another angle here now if we calculate the distance between this angle or the difference between these angles maybe we get something like 220 degrees okay that's fine but if we were to go in this direction to get to this angle we need to travel 220 degrees whereas if we go in this direction to get to this angle then we have to only go 140 degrees uh is 140 degrees correct yeah 360. yeah 140 i think that's right okay so we only have to go 140 degrees so obviously we would prefer to go 140 degrees then to go 220. so what are we going to do if we have an angle that's greater than 180 degrees well if we have an angle greater than 180 we know we're taking an inefficient route so all we'll do is we'll take this angle and we'll subtract so let's say it's 220 we'll subtract 360 from it now you might be saying well why don't you do the other way the reason i'm not doing it the other way is because i want to actually get the negative angle by going backwards so if i have 220 by minus 360 then what i'm going to get here is negative 140 which is what i want because i don't want to go 140 degrees this way i want to go the other direction 140 degrees so that is how i'm going to kind of fix this problem of potentially turning the wrong direction is i'm going to simplify this or i'm going to do this this check to make sure we're going in the right direction okay so anyways we have the difference in angle and now we're going to say if the difference in angle is greater than or equal to 180 degrees and we're just going to say the difference in angle minus equals 360. so now we'll turn the opposite direction so now that we have calculated the difference in the angles we don't even care what the difference is well we actually will use in a second but we just want to move in the right direction now to get towards the angle that we want so we're going to say if the difference in angle is greater than zero so if the difference in angle is greater than zero notice we're having our angle first and then the angle that we want to get to we want to go the other way we need to go to i guess the right as opposed to the left and the reason for that is when we go to the left we increase our angle if our angle is already greater than the angle that we desire we need to go the opposite direction to get to that angle so we're going to say self dot and then angle is going to be minus equals and this is going to be the actually let me check here the minimum of self dot rotation velocity and then the absolute value of the difference in the angle let me check that's all good okay that's what we want so the reason for this is that i don't want to potentially pass the angle going the other direction so let's say the difference in the angle is 3 degrees and my rotational velocity is 4 degrees if i just straight up go 4 degrees to the right i'm going to pass by the angle that i want and then what's going to happen is i'm going to pass by it and now all of a sudden i'm going to be 1 degree less than the angle that i want and so i'm going to have to move back the other way but i can only move by my rotational velocity so i'm going to move back by that so what's going to happen is you're going to be like shut up you're going to be like stuttering back and forth like left right left right which you don't want you want to just be you know steadily on the angle so the point of this kind of min right here is that if the difference in the angle is less than the rotational velocity we'll move by that amount so we snap precisely on the angle we aren't going like above the angle below the angle above the angle below the angle that's that's the point okay so now that we have this we're just going to say else because if it's not greater than 0 then it must be less than or equal to zero and here we're just going to swap this to a plus now i think we can just leave the exact same thing in here yeah we can and that should actually be good that will actually rotate our car so that it's going to move towards the point so that is kind of the trickiest part right there um this very complicated method i'm sure this doesn't make 100 sense it doesn't have to if i'm being honest with you i don't understand it 100 this is a lot of trial and error to get this to work but hopefully what i explained gives you some sense of why we're doing the things that we're doing angles are difficult that's the the moral of the story and of this tutorial series okay continuing now that we have that what i would like to do is i would like to make sure that we move to the next point in our path when we are ready to do that so i'm going to say define update underscore path point like that and then inside of here all i'm going to do is check for collision with the points that we have so whatever point i'm currently on i'm going to see if my car has collided with it and if it has collided with it then i've hit that point we can go on to the next one so let me just look at my cheat sheet right here okay that looks good i'm going to say the target is equal to and this is going to be self dot path at self dot current point i'm then going to create a rectangle from my car yeah that's what we're going to do we're going to say rect is equal to pi game dot and then this is going to be i guess it's just wrecked yeah i think it is just wrecked pie game direct and then we're going to instead of doing target i'm going to say self.x self.y and then we need to get the width and the height of our image so i'm going to say self.img dot get underscore width and self.img dot get underscore height so the point of creating this rectangle is that my image alone is a rectangle but it doesn't know its location right like the image doesn't know where it is so i make a rectangle using the x and the y of my car as the top left hand corner and then i get the width and the height of my image so now what i can do is use a builtin method in python in pi game story to determine if a point is colliding with my rectangle now this is pretty intuitive but it is collide point like this and all it does is take a point so you have to call this on a rectangle but it takes a point which will be target and tells you if you are colliding with it now in fact it actually takes a x and y coordinate so what i'm going to do is pass asterisk's target which will then pass the x coordinate and the y coordinate as separate arguments to this function if that's the case if i am colliding with that point i'm going to say self.current point plus equals 1. so if we've hit the current point that we're going to then let's move to the next point that's the idea behind update path point now let me just look and see if i've messed anything up everything looks good to me what we can actually do now is we can start running the car like moving the car around and you will see that it will start moving on the path so let's see how to do that again i have to reference my code here okay it was easier than i thought we're just gonna say computer underscore car dot move okay so just like we have move player now we have the move car so let's do that uh let's run our code after we move our car let's cross our fingers and let's pray this works and notice our car is zipping around the screen here and it's actually following these points okay now you will notice that sometimes it might kind of hit the edge right so you just saw right there it almost hit the edge of the screen keep in mind that it is aiming to get its top left hand corner on all of these points so that's why it's taking these kind of wide turns you'll notice that the top left hand corner of the car is what's kind of aiming to intersect with some of these points okay so we just ran into a problem there with this point right here so that is most likely due to the fact that that point was too close to this one right here and so we couldn't actually hit this point we couldn't intersect this point from this one because we couldn't turn quickly enough so what i'm going to do is kind of fix up some of these points and then i'll be right back notice we're getting another problem here so in fact let me just look at this and see maybe where i made a mistake and i'll be right back so the problem is what i expected the points that i have are just too close together so the car can't actually hit it now that will be fixed by lowering the velocity of the car because it can turn quicker than it can move but to fix this we just have to remake the path so i'm just going to remake the path i'll be right back i'll show you the new path and then hopefully we should just be all good all right so i've just recreated the path here now i'm not going to lie it's not perfect it goes off the screen a few times not very badly but anyways point being i recreate the path you guys know how to make the path i showed you the code to do that it's pretty straightforward so you can mess with it and design as many times as you need to now based on the way we have it right now if you just clear the path at the start and then you add values to the path the car will actually follow up until the last value in the path that's the way that we've designed it so every time i was clicking it was actually going to that point which was kind of cool you could see how it kind of traced the path in real time now one of the big reasons why it's hard for the car to actually hit some of the points is because of the turning radius right if you increase the uh rotational velocity then you won't have the same problem that i'm having here it's just because it needs to take kind of a wide turn to be able to get to some of the points now that's going to change with speeds you have to be careful if you have a lower speed than your rotational velocity it's not necessarily higher but you can just turn more because you're not moving as quickly to each point anyways i just wanted to point that out okay so now i have this new path so i'm just going to copy that into this path variable here so let's get rid of all that let's paste that and now let's repass path where is it right here so i'll just show you what i had was i just added this code back in and that's how i was able to recreate the path and then i had just cleared the path previously okay all right so now that we have all of that our computer is going against the player so what i want to do now is get rid of the drawing of the path so i'm just going to go and comment out under draw this self.draw points because i don't want to do that anymore and i want to implement some collision between the computer and the finish line just so i know if the computer gets the finish line first and then in the next video we'll implement all of the level stuff but this will just be kind of a nice thing to finish off right now okay so just like we have this the finished poi collide i want to go player underscore and i just want to preface this all with player because i'm going to do the exact same thing now except with the computer although with the computer i know it's not going to hit the finish line in the wrong direction so all i have to do is just see if it hit the finish line and then i know it crossed in the right direction so i'm going to copy this and i'll put it actually above here and we can go like this and instead of player we'll just say computer and then we will just change the player to be computer car and now this will tell us if the computer has hit the finish line so i can just do an if statement here and i can say if the computer car computer underscore finish underscore poi underscore collide does not equal none and then i can print out computer wins exclamation point because in this case the computer would have gotten there before the player now we do need to reset both the player and the computer if the computer does win so i'm going to say player card reset and computer car dot reset and that reminds me inside of here i also need to say computer car dot reset because now if the player gets to the finish line we need to reset the computer as well okay we can get rid of the print statement i'm not going to test this because i'm just very confident this is going to work but what i'm going to do now is take all of this collision code and i'm just going to put it in a function again just to kind of clean things up so i'm going to say define handle underscore collision now we want to take both the computer cart and the player car so i'm going to say player car and computer car like that now inside of here we'll do all of this and then we can just call that function so i'll say handle collision and then we'll pass the player car and the computer car and let's just run this here and let's test and see yep okay i can hit the walls just like i was before great so there we go that is all working and with that that's going to end this video so we're getting very close to finished here we just haven't implemented the logic for the game and the nice text so in the next video we'll do all of that but this is the hard stuff what we're doing going forward is very simple we just need to keep track of what level we're on we just need to reset the cars and you know the correct way and yeah all that stuff's pretty easy so we'll wrap that up in the next video if you enjoyed make sure to leave a like subscribe the channel and i will see you in another one