hello everybody and welcome back to the youtube video so today actually marks the official end of my internship working at microsoft i figured it would be a great idea to make a video kind of talk about my experience everything that i've worked on i'm going to demo some of the projects i'm going to talk about kind of a day in my life and then finally share some key takeaways and then kind of some tips and advice for anyone looking to get into software engineering and just some things that i've learned that i think i can share with you guys so before i get into all of that let me just give you some quick context i was actually offered a position in redmond washington so for anyone that doesn't know i currently live in kind of the toronto area which is in canada which means the us obviously is crossborders and due to coven 19 i was unable to go to redmond washington which is microsoft's home base so the internship was turned into remote and that means i actually worked here from toronto uh with a us team that was mostly located in seattle area which is right beside redmond washington i was actually working on the python extension for visual studio code so we had a team probably about 30 people that are responsible for the python extension within that team those kind of three sub teams i was on the data science team so working specifically on data science related features mostly related to kind of jupiter notebooks and stuff like that but anyways that is enough context for this last thing i will say is that all of this stuff is open source i'll actually link the github repository down below if you care to kind of see exactly what i worked on in terms of the code uh and yeah with that let's go ahead and get started and talk about my 12 weeks at microsoft so as i mentioned i was working primarily on data science related features within the python extension that meant i had to learn about data science myself and i actually got to sit in on interviews with real data scientists that were showing us their workflow and kind of what features they liked in vs code now speaking of data science if you want to get started with that you should check out the sponsor of today's video i need to thank simplylearn for sponsoring this video and giving you all a discount on their data scientist master program that was codeveloped with ibm this program is comprised of six unique courses that implement a unique blended learning experience in a high engagement online classroom environment during this program you will master 30 plus in demand skills and work with tools and languages like r sas python tableau hadoop and spark you'll master these skills through 15 real life projects and one capstone project during this 12 month comprehensive course you'll also be given 1200 usd worth of ibm cloud credits to use during your 24 7 access to the ibm watson platform after completion of this course you'll be given certificates from ibm and simply learn to testify to your skills as an expert in data science use the code yt10 at the link in the description so now i'll get into kind of the demo part of the video and talk about what i actually worked on at microsoft so the first thing i worked on was resizing a variable explorer pane so within jupyter notebooks you can click on this little thing it looks like a little grid essentially that is a variable explorer what it does is it allows you to view the values of your current active variables within the notebook so previously before i worked there this was just a static pane so it just took up like 300 pixels on the screen that was the height you could either toggle it on or off you could not resize it so obviously it was really annoying and within vs code you can resize like literally everything so why can't you resize that so that was my first thing working on that that took me probably about three or four days to kind of get fully functioning and that was really just to get me comfortable with the code base understanding the processes the workflow how github operates kind of all of that stuff and then after i did that they asked for some other enhancements related to the variable explorer so for example hey can we get some telemetry like you know let us know if someone toggles the variable explorer or if they resize it let's store that information so that we know that oh and another great feature let's make it so that when they resize it when they reopen that notebook another time or they retoggle that variable explorer it goes back to the same size that they had it at before so essentially just keeping track of what they resized it to and then when they open that again i will be at that same size and that's going to be specific to notebooks so if you have you know untitled notebook 1 or like test notebook 2 and you resize their explorers to different heights then they will both remember that so if you open one of those specific notebooks it will go to that notebook's preferred height so that was what i worked on that took me about two and a half weeks to do all of that stuff some other small cosmetic changes to the variable explorer and that was really kind of my introduction getting started you know let's get some success under your belt and then you can work on some more difficult things so the next feature i worked on was exporting notebooks um to uh different formats so jupyter notebooks dot ipimb files we want to be able to export those to python scripts uh html documents and pdf documents so this involved writing new code completely from scratch i was probably you know a few thousand lines of code but i had to be really careful when i was writing this because i needed to make sure that we could support other formats in the future so this writing this whole feature took me about eight weeks and it was really heavily focused on kind of the design of what i was doing okay how are all these classes interacting how can i make sure this is super flexible and that we can change stuff really easily okay how can i test this feature to make sure that if someone makes a new pull request they're not going to break my own feature so that's what i worked on for about eight weeks is doing that export you guys would be seeing that on the screen so you can get a better idea of what i'm talking about so after i finished the expo related features i had about two weeks left my internship so not enough time to do anything crazy so i started researching and looking at how we could actually improve the data viewing experience within the python extension so currently within the variable explorer if you have a data frame there you can actually view it in our data frame viewer it's fine but it's nothing crazy it's not like the best data frame viewer out there and it's kind of slow when you have like millions of rows in there so they asked me pretty much hey tim you know can you do some research related to this and see if there's any frameworks we could use or just better approaches to doing this than our current data viewer unfortunately after looking around there wasn't anything that was going to be easy to integrate that was actually better than what we currently had so i kind of scrapped the idea of you know making the current data frame better and said hey you know our viewer is okay for now obviously it could use improvements but we'd have to rewrite the whole thing i don't have enough time to do that so let me see what else i could work on so it turns out there's this 3d data visualization tool called sand dance it's like a stateoftheart visualization tool made by another microsoft team so i reached out to that team and said hey you know i'd love to integrate this with the python extension maybe we can view our data frames in sand dance you guys already have an extension for vs code this should be super simple we'll just have to set a few things up so that's what i worked on during the last week so unfortunately i didn't have enough time to actually finish this feature completely but i wrote some prototype code that was kind of a proof of concept that showed our team that hey yes we can do this and this is kind of like a basic working implementation of it so essentially when you have a data frame rather than just being able to view it in kind of the 2d grid system we had uh now based on the code that i wrote you can view it in sandant which is this 3d visualization tool with all these graphs and charts and stuff and that was kind of my last week was just working on that prototype code and trying to kind of have a proof of concept and leave my team with something that they could implement once i was gone so that's kind of all i worked on during the summer it might not seem like a lot but there was a lot of code and there was also a lot of stuff i did that wasn't just coding for example like finding bugs you know team meetings um standups whatever i got a ton of other stuff that takes up a lot of time in the day so i want to give you a quick run through of a day in my life when i was actually working at microsoft now unlike many other people that make these kind of videos or you know that day in the life of a software engineer i don't have those cinematic clips of me going to the cafeteria or me getting in my fancy car or going down the water slide or wearing my you know free tshirt whatever it may be that they're showing you i'm going to talk to you about what my actual work day looked like and what i was actually doing when i was working not just filming myself working which is what some of these videos were doing which was funny to me when i watched some of them regardless my day usually started around 11 a.m so microsoft is super flexible with schedule and time my manager pretty much told me hey you can work whenever you want just kind of be online for most of the meetings and the core hours of the day and if i need to get like in touch with you just answer me like that was literally all i was kind of given there was no one really looking over my shoulder like what are you doing today like what's going on like what are you working on like there was a lot of trust and i really appreciated that for sure because i don't like to be micromanaged i like to kind of manage my own time and they definitely gave me full kind of autonomy to do what i wanted just trusted i was going to get my work done so the reason i started working at 11 am was because my team is located in seattle that's pacific standard time i'm in eastern standard time so doing the conversion they're about three hours behind me so there my 11 am was there 8 am so i'd usually go from around 11 a.m to 6 or 7 p.m at night my time uh and then after that i would sign off and you know do whatever else but this actually worked out really well for me because this meant i had about three hours in the morning between the time i got up which around 8 am and when i started working to kind of film youtube videos and work on my own stuff because as many of you know i'm pretty busy i have a lot of other things that i'd be doing during the day now during the core of my day it really differed depending on what i had that day some days i had six hours of meetings just like back to back to back other days i had you know one hour of meetings or a 20minute meeting in the middle of the day but i'd say on average i probably had about two hours of meetings every day and that was just between you know other engineers or that might have been a standup where we're kind of summarizing what we've done over the past few days and just relaying everything with the team uh there might have been a demo meeting i might have been sitting in on like an ama or something or whatever is going on but i just had probably about two hours of meetings every single day and even when i didn't have formal meetings scheduled i was always you know calling other engineers or screen sharing with someone or we were going through a problem and solving it together a ton of communication and i would say about 50 of my time at microsoft was spent communicating with other people whether that be in a team's channel or over email or over an actual phone call or in a meeting environment so just something to keep in mind that communication is super important and i would not have been able to get through this experience if i wasn't good at communicating and able to explain you know all the problems i was having all the stuff that i was doing the solutions i was going to do and not to mention before i actually was able to even write any code i always had to do a ton of research and look into you know is this solution that i'm going for it makes sense is this the best way to do it is this going to be fast enough is there a better alternative so there was a lot of stuff that wasn't actually coding now of course you guys are here for the coding aspect once all of that stuff was done then i actually had time to code and that was when i'm kind of sitting alone you know listening to my music and just dialed in and just programming writing code and there's not really much more to describe with that it was just me you know interacting with github so i'll look at you know my pull requests say oh okay they want a revision there i need to change that so the basic workflow for anyone that doesn't know kind of how open source development works is i would you know write code on my own local machine test it write automated tests for it then push it up to github where other members of my team would review my code they'd review the code they'd look through the pull request is what it's called and then they give comments on it so they'd say hey you know i think this is okay but maybe you can try doing that method or they'd ask a question like i don't quite understand what you did here could you explain that or like why did you decide to use this pattern rather than that pattern so it was really um you know every piece of code i was putting up other people were looking at and that was going to be checked into the master branch of the code base which hundreds of different people are working on right so you need to make sure that that code is clean that it passes all the tasks that nothing breaks and there's a ton of processes that happen automatically like ci which i think is continuous integration so all the testing will run against your code when you submit it to make sure you don't break anything when you push that code up but that was kind of what a day in my life looked like i mean i had a few presentations that i did just demoing kind of stuff that i had worked on and that was really about it i mean it's hard to kind of walk you through a real day in the life when i'm just explaining to you what i did but a lot of meetings a lot of communication and i just really want to emphasize that because i think a lot of people assume you're going to be coding most of the time at least in my experience that definitely wasn't true but teamwork was just so important and critical um with everything we were doing and it really made me you know want to even talk about it in this video that my team really wasn't just you know 10 individual programmers or five individual programmers or whatever it was it was a team of programmers you know each individual person had their role and worked on their stuff but there wasn't one person who only did that or only did this there wasn't you know these separate things that each person did everyone was working on the same thing together and that's why teamwork was so important because you know the other guy on the team needs to know how to be able to read the code that i just wrote everyone needs to know what major changes are happening who's dealing with what area of the code base and everyone's expected to kind of be familiar with any area so if anything breaks or someone leaves or you know someone's sick for a week someone else can jump into what they were working on and immediately start working on it and that kind of leads me into like code quality and code health that was a big takeaway for me as well writing high quality code was was essential as i mentioned it had to be something that you know i was submitting it to my other engineers they were reading over it they had to approve of that before it could get checked into the code base it wasn't just my code it was all of our code they would give recommendations on things to change maybe i'd modify something they had before and it really just was kind of a cool experience to see how software development was actually done kind of in the real world with a group of people because if you've never worked in a job like that you've only ever really programmed by yourself or with a few other people not in a huge team or with code that is even like legacy code that's been around for four or five years that maybe needs to be rewritten so those were kind of my two key takeaways from this experience and i just want to share those with you because i think before having this experience that wasn't something that i really had a good perspective on was how people work together as a team in software development and how important it was that you were really thinking of the other person when you were writing your code you're almost writing it because you want them to be able to jump in there and just understand everything that's gone on so there's not really much more for me to talk about here that's kind of been a summary of my intern experience here at microsoft so if you guys have any questions please do leave them down below i'm thinking about doing kind of like a q a related to my internship experience so leave some down below let me know what you thought of this video if you've been an intern please kind of give me a little story or something i love to read through those and with that being said i guess i will see you guys in another youtube video you