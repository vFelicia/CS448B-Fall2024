hey guys and welcome back trailer Kibby tutorial so in today's video I've actually developed a pretty like decentsized GUI that has three different pages essentially what it is it's a login form but it actually saves your login information so you can create an account on one page you can log in on the other page and then once you're logged in you're brought to a main window which displays some information to you now your logins are saved so they're saved in a text file I know it's not the most secure way to save it but essentially that means that so you close the app and you rerun it if you'd already create an account your account still exists and your information is still saved so I just want to show you guys and the reason I did this is because a lot of you were asking me to create like a largescale GUI so this is kind of something I did didn't take me very long maybe about half an hour 40 minutes and this uses all of the different things that I've showed you there's a few other small things that I've added that I didn't talk about but I'm gonna be releasing all this code on tech with Tim donut so you guys can have a look through here as a great sample application to kind of mess look through it's pretty clean in terms of the way I coded it I didn't comment anything but I'm sure you guys to be able to figure it out and I'm gonna run you through the code afterwards in case you want to know exactly how this works so let's just run the program and just kind of get a feel of exactly what this is so first of all it's fully resizable you can see obviously it's not ideal when you go full screen but if I I don't know pull it out a little bit then it resizes fairly well to the actual screen size so I'm just gonna leave it like this for now so it brings you to a login page and essentially you can log in or you can create an account so if we click create an account it transitions it's over we have a create account name email password if you already have an account you can log in and you can see how that works now if I try to log in obviously I haven't put anything in here you can see that this gives me an invalid form nice pop up window invalid username or password and just to be clear here I didn't try to go crazy on the cosmetics I could have changed some colors mess around with that but I want to get the functionality down first now what we're gonna do is I don't have an account created yet so let's create an account so the way I'm gonna do this I'm gonna say my name is Tim my email is Tim at gmail.com not my actual email but anyways password let's say 1 2 3 4 and let's click Submit ok so we submit so it brings us over to the login page so now we can log into our account so let's say email is tim at gmail.com and password let's just try 1 2 3 now if I try to login you can see we get invalid login invalid username a password so if I add that for there then it allows me to login and you can see that we come here to this page where it gives me my account name my email and the date that it was created on and the only thing I have here is this information but you can see what you'd be able to do with this and you guys can add more stuff to it again it didn't take me very long to create this now obviously I can log out it said I want someone to see my information so I log out brings me back to the login page which is now empty I can go back to create another account and what not so let's just say if I close this application and I run it again what I can do is I can now obviously I can try to type in that same account and it will let me login so Tim at gmail.com 1 2 3 4 log in and you can see that is indeed working now obviously if I tried to do a different cat like Tim and like 3 4 5 invalid username or password and there you are so that is essentially the GUI that I created I'm gonna walk you through how I did this very slowly kind of through the old code right now so essentially I have this users dot txt file which just saves all the users and their passwords and whatnot and you can see that it just separates things by semicolons pretty straightforward that just adds a new line for each user now that's kind of my data base per se so what I'm working with here is two main classes I have this database class which essentially is responsible for any operations involving this text file which means getting information and setting information and I do this in actually a very efficient way using something called a dictionary so what happens is when you initially run the program it loads up my database first I brings all the entries into what's known as a dictionary and then that dictionary stores user names as keys and all the values like password name and created on as values for that key so that way when we want to look up information it happens in oh of endtime or oh man well one time so like constant time as opposed to every time reading through this thing and you guys will see that when you look through the code and again this be up in my website tech with tip nonet okay so essentially let's go to actually the kV file for a second you can see I didn't go crazy on all the cosmetics but I have two or three main windows so I have create account I have login window and I have main window now these all inherit from the screen and then I have a screen manager that I'm using which is window manager in just a blank class and it's just responsible for moving the things you can see I got two functions here you guys should be familiar with this invalid form invalid login and these just pop up a popup window whenever um you know you do something wrong or whatnot what I'm doing here is I'm loading in my kv file with just like a loader file I'm setting up a new instance of database which we'll talk about in a second and then what I'm doing actually here is it's a bit different but this just so I can change screens from within my actual code without having to do it from the kv file which i'll talk about as well in a in a bit so when I do something like SM current this is the same as changing the current window within the KB file but I'm just changing it from code so that way I can check before I go to the next window and make sure that like they had an invalid login for example before moving to the main window where it had the information right okay so that's how that works essentially also what I do is I create a new instance of SM or a window manager equal to SM and that's what I'm returning it might build up and you guys if you read through this you should be able to understand it now let's just talk about our main classes let's talk about login window first so essentially a login window maybe we'll go to KB file okay so let's go KB file for login window you can see we give it a name and login just so we can reference that I has to object properties email and password so we can reference those values and make sure they're correct obviously float layout and inside the float layout we have an email text input email label text input password and then we're having two buttons and obviously one of those buttons says login and one of those buttons says don't have an account create one and I kind of just dynamically placed them again you guys should know how to do all this to change the transitions I talked about this again we do just equals up and for both these buttons all I'm doing is simply calling a function that's stored or a method that's stored in the class that they belong to you yes let's go to main window quickly um so main window three properties and just stands for name I just couldn't name it name because that's a property of main window already I can float layout we just have the labels and then we have the button which is gonna call but it's a duo no if you use logout it just automatically brings you back so I just change the current from here okay so I think we have what is it two more classes to talk about yeah so or one more create account window so this one's a bit larger you can see we have these different properties again float layouts and again I'm not gonna go through all this because you guys know how that works essentially but you can see that when I call the button I'm calling route login and that's gonna trigger a function or a method sorry from within this class and it's gonna check things before possibly moving us to the next window okay so that's it for the kV file so let's talk about this login class so I have this login button this create button and this reset now what reset is going to do is it's gonna reset both of email and password text fields and that's again one of the reasons I have them as an object property so I can reset them so obviously before we move to another page we'd like to reset that form so when we go back to it it's not it's not filled in stuff right so now login button what this is gonna do is it's gonna call a database method called validate and essentially what that does is it's gonna just validate the email against the password and I'll show you how that works in a second and then we have main window current equals self that email dot text so say that this is true this validate validation is correct the password is correct then that means we're going to what do you call it go to the next window so actually sorry that's not what that does but this is what this does go to the next window this what it's doing is actually setting the current user with inside this main window screen so that that way we can actually display the information for that current user by getting it from the database which is DB get user logout again all this does is just move you to the login screen I don't think I even need that anymore to be honest but anyways okay so back in the login sorry I got distracted create button alice is doing is obviously resetting the form and then moving us to the create page it doesn't we don't have to validate anything before we move to that page right sounds long in window pretty straightforward um this one create account window a bit more advanced but nothing crazy all this is doing essentially in this submit method here is what's called when you press that submit button is it just checking to make sure all of our forms are balanced so they're not empty and that our email is like somewhat validated just that it hasn't sign and it has a period like at least one because you need that calm or whatever right we're also just checking to make sure the password is not equal to blank if you want to do some more checks on the password for example make sure that it didn't have invalid character I don't know whatever you want to do make sure it's length five has a capital letter you can do that in here as well and essentially if all this is correct I'm gonna add this user to the database I'm going to reset the field and I'm gonna change my window to the login page where then we can handle the logging in now if for some reason any of these are not correct I can do invalid form now the reason I have these twice and so just adding this statement in this if up here is in case you wanted to do some more checks on pass or didn't call a different popup window like be like you need to type six characters for your password instead of just saying it's an invalid form you know what I mean okay so login what this is doing again we're resetting all the things which are object properties up here and then we are simply changing the page to the login page and I think that's almost it now let's go to database talk about that and that should be almost done so data pace in board date times because we want the date when we're saving it like this okay but essentially database all this is doing is responsible for loading up this users text file and saving things to it so we start off with the file name this is the initializer so we need this just to know what file we're gonna be working with because this can work with multiple databases we're gonna do load this is the first method obviously load what this is gonna do is load all of our data into a dictionary which is gonna be stored in selftaught users up here and it's gonna make it really quick to be able to look through information so I did that for an efficiency standpoint so we're gonna go forward line and file just you know get email password name just splitting the line up by semicolon and just add a key in our dictionary which is the email and it's gonna have that information like I was talking about and make sure we close that file once we opened up and just so we're making sure we save everything and yeah next method get user really easy we're just gonna first check to make sure that email key is actually in selftaught users if that key exists will return that otherwise we're gonna return negative one representing the fact that we did not find that key okay adding users again pretty straightforward all we're gonna do is just first of all check to make sure this email and I'm just stripping it to get rid of any trailing or leading white spaces is not inside the selftaught users and selftaught users obviously have already been loaded up by the time we're calling add user so we'll be able to check to make sure we're not creating a duplicate account now if that's if this information is correct then what we're gonna do is going to do we're gonna add a key to our what do you call it dictionary which is gonna be that email and we're gonna have the password name and database dot get date I'm sorry that's a method we'll talk about in a second we're gonna save which I'll talk about again later return one representing that this was successful and then otherwise we'll just say email already exists and we'll just do negative one okay now validate so what validate is gonna do is really straightforward we're just gonna get the current user email we're gonna make sure first of all the current user it exists so when we get the user we don't get a value of negative one meaning it exists that means we can try to now grab the user's email so it was a selftaught users the key email zero which sorry is actually in represent the password I'm gonna check to make sure it's equal to the password it was passed if it is we'll return that will turn true otherwise it's gonna return false strikes we're just returning this condition ok safe pretty straightforward all we're doing is just based on every database entry so everything in our selftaught users dictionary we're gonna write that into our text file accordingly so that it looks like nice and neat like this that's what this line does here and then get date very straightforward we're just getting the current date now that essentially is this GU I'll open it up once again just to give you reminders took me like 3040 minutes to make so imagine what you guys can make if you spent like a few days doing this or maybe a week in create some pretty cool graphical user interfaces and it's really easy and nice and hopefully in the next videos I'm gonna go through how we can package this up for Android and iOS now no promises because I'm still trying to mess with it myself I think I figured out iOS but I don't know how to do Android right now so once I figure that out I'll release that to you guys but yeah in the meantime make sure you guys stay tuned make sure you guys so subscribe to the channel for more content and if you like this video in this tutorial series please make sure to let me know by leaving a like can give me some feedback in the comment