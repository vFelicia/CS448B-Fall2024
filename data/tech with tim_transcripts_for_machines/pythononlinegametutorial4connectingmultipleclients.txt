hey guys and welcome back so in today's video what we're gonna be doing is we're gonna be hooking up our graphical client to our server so we can send information back and forth and ideally at the end of this video what we're gonna have is we're gonna have two rectangles on each client so well like two clients running and when you move the rectangle on one client it moves on the other and vice versa okay so you guys will get the idea when we go through but there's a little bit of work we have to do and we're going to be modifying a few things within a lot of the files you've already created so just make sure you guys are paying attention and again if anything is going wrong feel free to download all the code off of Teck with Tim net it'll be available there and it'll be exactly the same code that I'm writing right now okay so first thing we're gonna do is in this network class we're just gonna delete a few things so this testing stuff we don't need anymore this print statement for the self that ID we don't need that and we're actually gonna change this self dot ID to be self thought pause okay and you guys will see why we're doing that in a second and we're gonna add one quick method in here and it would you guys say define get pause okay and all we're gonna do here is just return self thought pause alright and again we'll you'll see why we're doing that but I just don't have to come back to this network class so we'll do that right now okay so I'm from inside our client now what we're gonna do is we're going to import this Network class because we're gonna use it in here so we're gonna say from network import Network and then in our main function down here what we're gonna do is actually above player we're gonna say and equals Network okay like that and then what we're gonna do is we're going to say start pause equals n dot get pots so essentially why I'm doing this is because when we first connect to our server what I want to happen is I want it to return to each of our clients the starting position of their character right or of their cube okay because it's going to depend where they're starting based on if their player 1 or if their player 2 so that on the client side what we're gonna do is when we initially connect to the server which is what we're doing when we create this network object we're connecting to the server we're gonna get that starting position and then for creating our own player we're gonna use that starting position to determine like where we're starting so the position is gonna come in as a topple all right and we'll be coding all this on the server side in a second but it's easier just to go through each file rather than going back and forth it's gonna come through as a table that looks something like this so it'll be like 50 100 okay so what we're gonna do is you're gonna read this tuple in because it's actually gonna comment as a string like we're you'll see how it comes in we're gonna get the two aspects of its like the x value and the y value and then we're gonna use that inside of this player initialization to accept the initial position so that reminds me what we're gonna be doing when we're sending information to the server is we're gonna send it using string data right and that's what we were doing in the last video as you were sending everything with string this is we're sending like hello and then we were decoding in and coding it now this is not the only way we can send information we can actually send information with objects and I'm gonna show you the advantage of doing that in the next video but for now we're just gonna send strings so since we're gonna be sending strings the strings that I want to send our positions okay I want to from each client send the current clients position to the server the server is gonna get that position update it on the server side and then send the other clients position back to the client you guys will see how it works in a second actually let's see if I can do a quick drawing to illustrate this because they'll make things a bit easier okay let's I don't know why I had this let's delete that okay so let's do a quick drawing so we're gonna have is gonna have client one and excuse me some drunk this with the mouse and client okay so it's gonna be one and this is gonna be all right this will do it as a red box is gonna be our server and on the server what we're gonna do is we're gonna store positions so so like one has position like one two okay sorry this is hard with the most guys and then client two will have position like three and one okay so it's gonna store these positions so what's gonna happen is when we initially connect client one is gonna go to the server it's gonna connect to it and then it's gonna be sent back the starting position for the client okay so it's gonna be said okay so your client one so that means you're gonna start at position one client it's gonna connect it's gonna say okay we're client so I to send client two's position so let's send that back all right now let's say we've already connected client ones their clients twos there and we've set their starting positions what we're gonna do next is now we're gonna continually call to the client and update the position so what we're gonna do is say let's say we're working with client one okay what it's gonna do is it's gonna send its position to the server so it's gonna say let's just say pause okay it's sending its current position let's say that position is like four oh five sorry this is really hard with the mouse okay four or five what's gonna happen here is we're gonna say okay so you're updating your position so then it's gonna go in here it's gonna say okay client 1 will update your position to be four five like that okay and then what it's gonna do is instead of sending back this same position because we already know what the position is it's gonna send back the position of client so it's gonna send three one and then on here we can draw that client so that it looks like it's moving right so we're getting we're sending our information and then in return we're receiving the other clients information now the same thing where it's here with client two so if client tooth connects right and it's sending information it's gonna send its position let's say it sends the position one three okay that's its updated position so this is gonna change to be one and three and then what's gonna happen is it's gonna say okay well we don't need clients twos position we need clients one sowhat's client one position well that is four or five so let's send four or five over to client two and then on client two we can draw four or five so you'll see they'll simultaneously be moving I hope that makes sense I just want to draw it out peace you guys know what I'm about to do in this video okay perfect now the only thing is we need to send these positions as strings so we're actually gonna have to implement two helper methods so that we can convert those positions which are gonna be tuples in districts and then we can also read the string into a tuple so what we're gonna do is we're gonna say define and I want to remember what I call this one we'll say this one is read underscore position which means we're gonna take a string value and we're just gonna read the string in so we'll say STR you told STR dot split and we'll split it at a comma okay and you guys will see how this works in a second and then we're gonna do is we're simply gonna return the int of string 0 so STR 0 okay comma int of STR 1 so what we're gonna do is we're gonna take a string in that looks something like this would be at 45 comma 67 okay in in string value 45 67 we're gonna split it which means we're going to get a list that has the string 45 and the string 67 and then we're just going to convert those two ends and return them as a topple so now we get that convert it to something that looks like this which is useful information that we can actually use okay so that's what read pause is gonna do but we need to make one more which is going to convert that position into a string so we're going to say make other squared position and in here what we're gonna have is we're gonna take a topple so let's say top standing for topple and what we'll do here is we'll say let's see here return top actually STR of top zero and then we're gonna add that comma in so sorry I'm butchering my typing right now comma plus STR of top one and I hope that makes sense how we do that so that's returning the string value so we're reading pause and making pause and that's all we need to do for those helper functions okay so that means though that when we get the position initially from our server it's gonna come in in that string value right it's gonna look like 4567 so we need to convert that so what we'll do is we'll say read pause I'm gonna put that around and get pause because it's gonna return to us that string position so we're reading and now what we're gonna do is for our player we're gonna say start pause zero and start pause one okay and what this is going to do is just set it to the initial start position we're going to code all the server stuff after it'll start making a lot more sense okay now what we also need to do is we need to create a second player because we're gonna have to draw the first player and the second player on the screen right so we're gonna say p2 equals and we're literally just gonna copy this except for start position we're just gonna put it as 0 zero for right now and we'll update that in a second okay so we have p p2 and for now that's what we'll do actually once we can continue working in here so that we don't have to do anything else in here after we'll just code the server side so what we'll do now is we're gonna send our current position to the server right that's like the algorithm we've developed essentially we are when we connect we're gonna get the starting position we're gonna set that starting position and then every time after that so like every time the frame updates we're going to send our position and then get the other person position so we're gonna say is we're gonna say P to pause is gonna be equal to and don't send okay and we're gonna send make position of and then what we're gonna have to do in here is it's a little sketchy but we're gonna do P dot X P dot y now right because that's the position of our player the X and the y coordinate we're putting it in tupple form we're sending it to the function make position which is going to turn it into a string and then we're sending it to the server right okay awesome so I think that makes sense and then what we're gonna do simply is 4p2 we're going to update is its position so we'll say P 2 dot X is gonna be equal to actually + 2 dot sent but we're gonna have to put around here sorry is make pause read pause because right it's coming in as a string so we need to convert this into an actual position so at P 2 pause is going to be P 2 position 0 and then P 2 dot y is gonna be equal to P 2 P 2 pause 1 okay now the only thing that's left to do here is what do you call it draw P 2 and update P to s rectangle so what we're gonna do now is in the redraw window down here we're gonna put P 2 we're gonna go to redraw window or in say player 2 here and then we're gonna do player 2 dot draw window because again it's gonna be a player object so that'll be fine and then last thing to do is just update the rectangle so what I'm gonna do is I'm going to say P 2 dot update and we're gonna go to player object now we're just gonna add this one function that is define update and then so you see I just made that self dot wrecked equals XY width height and then in here I'm just gonna say it self updates like this okay so I know these might be getting a bit confusing but we're almost finished just gonna do the server side and we'll recap through everything what we've done explain things I shot kinda have to get this content out okay so define update so what we're doing again here is before we just had this line of code here so we're just replacing that with an update method that's pretty straightforward I hope that makes sense to you guys and that's just again so when we change the X and we change the Y value of p2 directly then we are updating the rectangle so when we draw it to the screen it's in the correct position okay so I believe that's all I have to do for the client side so now it's time to go to the server side and the server side is pretty straightforward now that the server needs to keep track of B positions right it needs a whole player once position and players 2 position consistently so we can decide if we want to store that let's say like on a hard drive or if we wanted to store that in memory now in our case it's not a lot of information so we're just gonna store it in the memory of the server right so what we'll do for that is we're gonna create a list and we're gonna say pause equals in just a blank list and this list is gonna hold the positions of our players now actually that reminds me we're gonna put two tuples in here and these are gonna represent serrate the starting position of our players so we'll start with 0 0 and like a hundred 100 so player 1 will start at 0 0 player 2 will start at 100 hundred okay and that's all we're gonna do for that little list there and then we're gonna do down here well this while loop is and we're gonna keep track of how many players have connected in our case we only want 2 to connect right and then we need to keep track of well those players so we're gonna say there is a current player equals 0 now this is because when we connect we're gonna add 1 to this so that when we go back into this function it'll be you guys we'll see how it works but essentially every time we create a new connection so every time this we accept a new connection we're gonna add one to our current player so watch we do it at the bottom of the while loop we'll say current player plus equals 1 this is just to keep track of which player we're using so that we know what position to update what position to send to that player based on the connection right ok so keep track of current player and now what we're gonna do is when we start this new thread so this threaded client where else we're gonna pass another argument which is going to be the current player so instead of just passing connection we're also gonna pass player in here okay current player like that okay because that's gonna be important information to know all right so we're actually almost finished we just got to update a few things so let's actually grab these two methods from our client class or client file and throw them onto server here so we're just gonna put them right above position because we're gonna need to use them read pause and make pause so now when we initially connect to our player right this is what happens when we initially connect the first thing that sent is this encoded message that is connected now in our case what we want to send is we want to send the starting position so how do we do that well we know what player we are we're either players DL we're either player 1 right because we hat when we have two players when we start with player 0 after player 0 connects then we do player 1 right so what we'll do is we're gonna send pause player now that won't work because it's just a topple right we need to first convert that to a string and then encode that string and send it so it should go back here I want to keep this string dot encode so string down in code and we'll say make underscore or pause and then we'll push put pause player in queue and what that'll do is it'll convert it into a string for us and that it will send that to the player for us right and then they'll read that string in get very to position and update the position accordingly okay making sense hope so ok so that's how that works for player now the only thing we need to change now is what information we are sending every time this loop is running right every time we receive something from the player we want to send back the other players position so to do that what we're gonna do is we're gonna second receive decode so we'll get rid of this for now and that what we're gonna say is we're gonna turn this data into like readable a readable Topol right so to do that we are going to use the read position method that we've already created or function so say read pause kondeh receive and we'll turn that into from that string like this right or whatever it was like 4567 we'll turn that into something that looks like this so that we can actually use it okay so now that we have that it's turned into that what we're gonna do is we're gonna update our current players positions we're going to say pause player equals data right because this is the position they sent to us so let's update it on the server so yeah so it's updated information okay sweet so we've done that now all that's left to do is send the other players position back to our client so to do that what we can do is simply say reply equals and we're just gonna say pause or actually let's not do it up here let's do down here okay ring say if player equals equals one so if we're player one we're gonna send player 0th position right so we'll say reply equals and then pause player or not pause not not player zero sorry and then else we're gonna send so say reply equals pause one okay so if we're player one we send players zero position if we're player 0 we send players one position right like I was talking about with that little algorithm we're gonna use okay and then instead of saying received and sending actually yeah we can say received reply sending reply or rulest a received data sending reply that should work fine okay now what we'll do is we're gonna send all the reply but the thing is our reply we need to first convert into a string so to do that we're gonna say make underscore pause write that function we've already created and then that should actually be about it now I'm probably made a mistake or two here but let's just test this out and see if everything's working so let's start by running the server and then let's run to clients and see if we can connect or if there's any errors okay so we've connected with client one let's run client two and let's see what happens so I'm on client one right now you can see that when I moved my green square it moves on the other client okay let's go to the other one and when you look at this when I move it on here it moves on the other client so we have successfully set up and connected our two clients together now the only thing I want to change quickly is just the color of these so that we know who is whom like which square am I so to do this we're just simply gonna go we'll actually close this server class so those are gonna run into an issue or server instance whatever it is what a client and instead of having the same color here we're just gonna change this to be 255 for player two and I want to show you what happens because some of you are probably to be confused with what's about to happen here but it's kind of interesting so let's run server let's run client one let's run client two now notice that these colors are inverted now can anyone think of why that might be so green right is gonna be your current player so right now I'm on here I'm on this where my mouse is and I'm moving the green square that's near the middle of the screen okay but notice on the other screen it's moving the red square that's because on your clients it's unique to you so on your client you are green and red is the other person meanwhile if I go to this client and I start moving see green is me and red is the other guy right and he's not currently moving now if I wanted to move these at the same time I would just have to be running these on different computers or I would have to change like the arrow keys to move them and that's just because obviously right like if I'm pressing the arrow keys on here it's not gonna work on this client but if I were to load up my laptop and try doing it on there this would work fine as well so anyways that has been this video in the next video we're gonna do a more complex version of this not just moving squares around we're gonna do like a full game sending objects get a lot more advanced this is just the very beginning just touching the tip of the iceberg or whatever you want to call it so I hope you guys are excited about that and I will see you again in the next video