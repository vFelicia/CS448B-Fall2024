if you want to make an absolutely killer programming project that you can put on your resume share with recruiters and talk about interviews then make sure you do these 10 things they're super simple but they will make you stand out and they really do demonstrate to someone reviewing your project that you know what you're doing and you're worthy for a job or worthy at least for consideration now I'm someone who has reviewed literally hundreds of programming projects in fact on this channel we ran something called a timathon or a code jam and for that code Jam I had to review all kinds of GitHub repositories and literally hundreds of different projects going through those projects I've identified the few things that I think are really important yet super simple so make sure you watch this entire video to learn how you can stand out when making a programming project so the first thing that you need to do before you even start worrying about the structure of your code is understand what problem it is that your project is going to solve now you can just make a game and you can do something fun that's fine but a lot of times the best projects are actually solved loving real world problems and if you're in an interview the best thing you can possibly do to present your project is to start by talking about a problem you had and how you solve that with code even if it's not the most complicated problem in the world these make the best stories and the best type of projects I can tell you from experience I've done literally hundreds of programming projects and the ones that stand out the most are the simpler ones that solve a real world problem that's relatable to other people so make sure you understand the problem and you can explain that clearly now the next thing that all great programmers have in common is that they're subscribed to this Channel and they check out the sponsor of this video internext is the world's most secure cloud storage providing strong endtoend encryption modern zero knowledge protocols and being entirely open source meaning your files are always a hundred percent private and secure now let me share with you a personal story as to why I've switched to cloud storage up until a few months ago all of my data existed on a local file server now this was great up until my province start experiencing wildfires flooding and random power outages I realized quite quickly that all of my data could be wiped out in a matter of seconds and everything I've worked for could be gone for that reason I switched to cloud storage for the reliability security and convenience of accessing my files from anywhere internax has all of these benefits and provides three main Services Drive photos and send they make it extremely easy to organize sync and share your different files and photos not to mention their extremely fast download and upload speed so you can skip waiting hours to back up your data if you want to test out internets for yourself and secure your data then click the link in the description and get access to a 25 discount on their lifetime plans that's right pay once and secure your data forever thanks to internext for sponsoring this video alright hopefully you guys are appreciating my sponsor Segways recently regardless let's move on to the next thing you need to do when you're working on a programming project now this is plan now you don't need to go crazy you don't need to create a ton of different system diagrams and sequence diagrams and all that fancy stuff you might see online but you really should spend a bit of time before you dive into your project and come up with a very basic plan for me I like to at minimum decide okay what tech stack am I going to use what database am I going to have what's my back end going to look like what's my front end going to look like and what are the general components in my system that I'm going to need now recently I posted a video where I talked about a python security system and in that video I showed you a bunch of design documents I created before actually writing by code that's really good practice and if you can talk about that in an interview or even have those design documents in your GitHub repo that's really going to stand out but if you don't want to go that far at minimum jot down a few things you should consider and start thinking about the big systems that you're going to have to build before you dive into the project so at this point you've understood the problem you've created a plan and now it's time to work on your directory and folder structure so before you go crazy and start writing a ton of code you want to start setting up your repository setting up your code base and understanding vaguely where you're going to be placing different parts of the system and code now this is where it can really get tricky and where you're probably going to evolve this over time this also is really going to depend on the type of framework that you're using because in a lot of times applications like react or Django or flask are going to have their own directory structure and kind of conventions to stick with if you're making something completely from scratch that's up to you you can do whatever you want but generally speaking stick to the conventions with the framework that you're using and if you're not sure about the different conventions you can go and look at examples of large applications that use that framework see how they've created the structure or you can go to chatgpt you can look it up and you can just use your intuition now what I'm going to do is quickly hop over to the computer and share with you a few tips and just generally kind of how I structure my programs this way you'll have a bit of a sense how to do this regardless of what framework or Library you're using so I've popped over to vs code here and I'm just going to share with you a very simple directory structure that I've set up and go over some tips as we go through some of these folders now the first thing to keep in mind is however you decide to structure your project be consistent okay so even if you think you're doing it incorrectly whatever you decide make sure you do that every single time so if you're always going to have a capital letter at the beginning of your folders always do that if you're going to have DOT test to indicate kind of a test file then always have DOT test if you're going to use underscores instead of spaces or dashes always use underscores whatever you do be consistent that's one big thing I've learned over the years it's way easier to change something around when everything is the same rather than a bunch of inconsistent files random name and conventions again whatever you do even if it's horribly wrong just always do it that way okay so we have our directory structure here now again this really depends on the type of project you're working on but what I would typically do is kind of reserve the root of my Repository for General folders and try not to have too many files right in the root of my uh directory or of my repository the reason for that is I want to quickly have access to things like a readme file design documents other important information that may not necessarily be code right in the root of my repository so typically what I'll do is I'll separate things out by having like a readme file here I might have a folder for design files I'll have one big folder which is going to contain really all of the source code for my app and then I'll have things like my GitHub actions and other random scripts that I might need in the root of the directory but a lot of times I see tons of files right in the root of the repository it's not necessarily bad but for me I like to quickly be able to access different things from directories rather than reading through like a hundred different files right okay so now if we go inside of something like apps right what I'm going to do is usually put my back end front end and any libraries I have in separate directories now this is one point we can touch on a lot of times you're going to have code that you need to share between different systems that might be helper files that might be different functions that might be types types is a really common one in something like typescript if that's the case I recommend that rather than creating a mono repo which means putting everything inside of one large project you separate out your different systems and create a separate library that has all of the shared types so rather than importing code from your backend in your front end or importing code from your front end and your back end take that shared code put it in a library or a lib you can look up how to do that online it's very straightforward especially in something like typescript and now all of your shared code lives in one place and you only need to change it in one location so you can see I've created some Libs here where I have say helpers and types and that's where I would include any of the shared resources and I would even make separate libraries depending on the type of resources I'm going to have depends how large and complicated the project is but in this case I might have one directory for all of my types and another directory for all of my helper files and I know that's all of my shared code from there I would then have a frontend directory inside of something like front end again depends on the library or framework you're using I'm typically going to have SRC which contains all of my main source code I might separate things out into components into the Redux within Redux I might have the different actions and reducers I'm using I'm going to have screens within screens I'll probably separate those into folders authentication screens main screens whatever categories of screens you may have maybe Navigators would be a directory as well then I'm going to have something like tests I'm probably going to have test setup scripts wherever you have code you want to make sure it lives in a place that makes sense and describes its purpose without having to read through all of the code you can see the way that I've structured this I know that if I go into Redux and I go into actions all I'm looking at is different actions right if I go into reducers all I'm looking at is different reducers that's really what you want to try to achieve and having more folders typically is going to be better than having less so oftentimes I'm only going to have 10 50 1820 files in a directory as opposed to having hundreds of them and trying to come up with really creative names this way I can also duplicate names of files if I need to do that if they're in different directories okay from there I might have assets so I might separate this into my gifs my images my Rye files whatever I'm using you guys get the idea just wanted to share with you a basic directory structure alright so now that we've gone through that and we have our directory structure set up what we want to do is start using a Version Control System immediately don't wait until the very end which I'm very guilty of doing I do this all the time to push all of your code to GitHub start doing it right at the beginning because this is going to allow you to practice creating commits making pull requests pushing things to a remote repository and it's going to show if someone goes and looks at your commit history that you know how to separate different commits this is a big thing that a lot of people even more senior programmers never really learn how to do is separate out the type of work that they're doing into individual commit messages that actually actually make a meaningful git history git is a very useful tool especially as you get into larger projects and oftentimes you'll find yourself reverting back to previous versions of the code base and you need to have good commit messages and kind of sizable and let's say logical code changes in those commits so that you're actually able to go back and do that so right away as you begin to write any code you're going to initialize your git repository you're going to start adding your different files and you're going to start writing meaningful commit messages that are small and that allow you to actually have a real history so if you were to go and view the branch you could actually see everything that you did how long it took you to get there and you can go back to any state of the code base which trust me in a large project is very valuable alright so now we are actually ready to start writing some code we've got our Version Control System set up we have our directory structure now we actually have to build the project now at this point you can start coding but you want to make sure that you are separating everything out and you are being module in your approach it's better to have more files and more components more reusable things in your code than it is to have less a lot of times people will just create these really massive files that have 400 500 a thousand lines of code in them that is no good it makes it very very difficult for someone to review or read that code and for you later on to go back and understand what's happening now sometimes it is kind of unavoidable depending on what you're building but generally speaking you want to have short reusable easy to understand components that make sense right and that are in a cohesive group so that means if you have a helper's file or you have some module You're Building like a math module you only want to have code that makes sense to be grouped together in that file if it doesn't make sense you can take that function out put it in a file that does make sense and now again whenever I'm reading any directories or files I know what to expect in the file that I'm going to read a lot of this stuff might seem redundant and annoying at first especially in a smaller project but I promise you you start to get into a lot of code very very quickly especially when you're working on like mobile apps websites Etc and you need to make sure you stay organized and you keep code in logical places where it makes sense to be and it's easy to navigate to if you can't find where a function is by simply reading the different directories and names then you probably have it in the wrong place but at this point we're doing everything great we've written our code it's clean it's beautiful it scales fantastically what do we need to do next well the next thing we need is some documentation now I'm not a fan of over documenting and I don't recommend writing tons and tons of documentation for your code but it is very helpful to at minimum have the following few things I'm going to list the first is an installation guide or troubleshooting guide now a lot of times you're going to be trying to run your code on multiple platforms multiple locations multiple places around the world wherever it may be and you're going to have a lot of issues that you run into and I recommend that you dock document those issues as long as well as sorry the solution to that issue in some kind of gut so generally you want to instruct someone who's never run this code before how would they run this code what do they need do they need any keys from you do they need special access do they need to contact an administrator whatever it may be all of the installation steps are going to follow and then I recommend having a separate document that goes through all of the issues you've ran into or other people have ran into and the solutions for it I know a lot of people aren't going to do this I'm guilty of not doing this but it would be super helpful if I had written a guide for when I was running say a react native application and just gone through all of the little issues and tools I needed to install and kind of Mark those down so that I could tell another developer or even myself if I'm running this on a different computer really quickly how to get past these roadblocks rather than having to kind of reproduce the issue and come up with the solution again now beyond that you probably want to have some kind of contributing guideline if this is going to be an open source project where you're telling people how they they can contribute what you're going to expect what a PR should look like and just general tips that you know they can follow you may also want to have a guideline for issues or a template for issues now this can be set up on GitHub you don't need to do this directly in your code but it's always a good idea to have some kind of template or process and procedure that people can follow if they're filing issues or if they're going to be contributing beyond that if you have really large blocks of code or a ton of different subsystems it's not a bad idea just to throw a few readme files within the root of those directories so maybe a readme file for the back end for the front end for the libraries just to quickly describe what's going on and your thought process in terms of what code is going to exist in this directory I know that's helped me in the past and whenever I have complicated scoring systems or math going on I typically write a little bit of documentation just so that I can refer to that rather than having to refer to the code for more complex and typically math related operations alright so now we're moving on to everybody's favorite thing testing now test thing is not something you really need for a hobby project right you're not writing a critical application that's going to result in people losing money or you know a rocket ship blowing up whatever it may be but it does really show that you have that commitment to proper software development kind of life cycle and I guess methodology when you write even some basic tests in something like a hobby project I know for me if I go and look at a repository and I see someone has actually written some pretty decent tests even if they have minimum code coverage I'm like damn that person actually put in the effort I'm sure they hated writing those but they did it because they knew it was important and you know that says something right that stands out to me so whether it be a few unit tests maybe one integration test an endtoend test whatever it is that you want to write even having a few tests and just being able to kind of demonstrate that with things like test folders and naming your tests and writing them correctly can really stand out especially if you hook that up with the next step that I'm going to talk about so actually I lied we're going to talk about that in the next step what I want to talk about here is dependency Mana management there was not a ton to go through because again this is very specific to the type of project you're working on but you want to keep this in mind and make sure using dependencies that are secure that are being maintained and you want to manage them properly with things like pip mpm pnpm whatever it is that you want to use you just want to consider dependency management have the correct files for that and ideally try to use dependencies that aren't out of date that are maintained that aren't deprecated and that are secure all right so moving on to our final things here the next thing you're probably going to want to implement is some type of continuous integration and continuous deployment now really what this means is automated testing with something like GitHub actions and automated deployment using whatever service it is that you use to deploy now if you want your programming project to actually be used especially by someone like me who hates running through setup steps you're going to want to make sure it's as easy as possible to run and typically that means it's deployed in some type of environment so whether that means it's deployed in a Docker container and you can quickly spin that up or it's deployed as a website and you can go to a URL where it's a oneclick install where you've bundled it into an installer whatever you need to do even if it's a pain such that someone can really quickly get your app running especially if they're nontechnical is going to help you out a ton and it's going to show that you understand that other stage or that other side of software development which is how do you actually deploy these applications out how do you test them and make sure they're secure and working which is something a lot of more Junior developers don't know how to do or never do and it really makes you stand out alright so very last thing to mention here is reviewing your code refactoring and changing it in the future now any software project is going to have code that changes code that's removed codes added Etc but what I would recommend for any programming project especially kind of a hobby one or one you're putting on your resume is after you finish the project take a few days enjoy it relax don't look at the code or look at some other code and then come back to it a few days later and see where you can improve and any changes you can make almost certainly there's going to be a few things you can modify a few ways you can clean it up even if that's indentation levels organizing your variables making some variables constants that you didn't have constants whatever it could be really simple things but a lot of times you're only going to notice that if you take a step back from the code base and don't kind of obsess over it right away and then jump back into it a few days later I know for me a weekend does wonders even just one or two nights or a day or a few hours where I'm not looking at the code can really change my perspective and let me get in there and improve my code a significant amount so with all of that said that is going to wrap up this video I wanted to share with you all of the tips and tricks that I've learned over the years and seen people do well and really poorly when they are working on programming projects hopefully this helps you create a great programming project if it does make sure to leave a like subscribe to the channel and I will see you in the next one