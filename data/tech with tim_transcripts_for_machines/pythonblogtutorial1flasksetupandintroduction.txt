hello everybody and welcome to a brand new tutorial series on creating a blog like application using python and using flask now this is going to be a long series probably somewhere between five to ten videos and likely around four to five hours of actual recorded content that is because there's a lot you need to do when it comes to actually building some type of blog we're gonna start by building out user authentication so we're gonna make sure people can sign in create accounts sign out so on and so forth then we need to allow people to actually make posts so they can post something on their blog then we're gonna have to allow likes comments and kind of all the other things you would assume a blog app has now this won't be a completely fully finished super featurerich application but after going through this tutorial you will learn a ton about web development with python and we're actually going to write zero javascript in this uh this video series so my goal here is to make everything work with simply python so you only need to know python you don't need to know javascript and with that said let me give you a quick demo of the application that we're going to be building out so as i said we're going to be doing this in flask with python you can see this is kind of what the blog looks like i'm not focusing a ton on styling although i will make things kind of look somewhat organized on the page so we can start by creating an account where we can log in i'll just make an account i'll go with tim at gmail.com we can just go tim as the username and then password i'll just go one two three four five six seven one two three four five six seven all right submit you can see we've created our account it brings us to the home page and we can see all of the posts that people have kind of put out there so i'm treating this as kind of like a social media slash blog website so you can see all the different posts you can see the number of likes we can like a post by simply pressing on the like button or we can comment on a post right so you can see all the comments this post has we'll just say hello comment and then notice hello is here now i can press on someone's username and i can see all of the posts that they have and i can obviously like and unlike posts so that's kind of the basics of this you can also make a post so this is a test post okay let's make a post there and then notice it tells you know post created brings you back to this page and then you can see all of the posts so that is kind of the basic idea this is what i'm going to be showing you how to create i hope you guys are excited if you are make sure to leave a like on this video subscribe and let's get into the video all right so let's go ahead and get into it the first thing i'm going to state is just a few prerequisites or things you should consider before you go try to follow along with this for four or five hours so first of all this series is not designed for beginners i do tend to explain almost everything that i'm doing so if you are a beginner you'll probably be able to follow along but that's not kind of the intended audience this is meant for people that have some experience with python understand maybe a little bit about web development http and html we're going to be writing a lot of html here and a lot of python but no javascript so you don't need to know javascript usually for web development tutorials you need to have some background in that regardless that's kind of all the prerequisites next what you need to do is get some coding environment obviously you need to have python installed i'm going to be using python version 3.8 you can use any version you want that's above 3.6 that should be compatible with this tutorial i'm also using vs code to write all of my code in i prefer this for kind of larger projects and stuff that has html because i can use auto formatters and extensions and stuff that i'm going to show you how to set up right now regardless use whatever you want download vs code and we can go ahead and get started so i'm inside of a folder here i've opened this up in vs code the first thing i'm going to do is create a new folder i'm going to call this website this is where all of the code related to our website is actually going to go next i'm going to make a file i'm going to call this app.pi this will be kind of the entry point of our application all right now what we're going to do is just configure vs code if you're not using vs code you can skip this part but i'm just going to install a few extensions that are going to make our life a lot easier as it relates to formatting our code so i'm going to install an extension called prettier actually this is the only one we're going to install so if you go to the kind of extensions marketplace here in vs code it's this icon that my mouse over type in prettier and then press install this will now allow you to auto format your html code i'll show you how that works later on anyways that's kind of the only extension that you need all right now what we need to do is install some python packages related to the modules we're going to use so i'm going to open up my command prompt if you are on mac or linux open up your terminal and we are going to use pip to install the following packages so first thing you should do is try to make sure your pip command is working so go to your command prompter terminal type pip and see if it is working if this doesn't give you any output or it says this command is not found i have two videos on my channel that show you how to fix this command if you guys are a subscriber of this channel you've probably heard me say this about a million times i'll leave those videos in the description they show you how to fix the pip command but something you can do in case that's not working is try python 3 hyphen m pip see if that works you can then try python hyphen m pip you can try python hyphen m pip 3 or you can try python 3 hyphen m pip 3. now not sure if this is going to work for you but you can try those out okay so once your pip command is working what you're going to do is type pip install and you're going to start with flask this is the web framework that we're going to be using it's a lightweight python web framework you can see i already have it installed next you're going to install this is going to be flask sql alchemy i don't know if the capital is matter or not but believe that's how you spell it flask sql alchemy yes okay so that is correct so install that and then finally after that we are going to need to install flask login this is going to help us with uh authenticating our users and having them stored in a session and i'll talk about that later on okay so that is all we need all of our dependencies are installed now and we can actually start creating our first flask application so what i'm going to do is go inside of my website folder here in vs code and i'm going to create a new file this is going to be called a knit dot pi so i'm going to have two underscores so underscore underscore init underscore underscore dot pi and before i go any further i should mention that if you're getting lost here or there's just some code that's not working or something all of the code that i write in these videos will be on github i'll leave a link in the description but for each video i'll have a separate folder on github for all the code in that video so feel free to stop pause look at that copy and paste that will probably be important especially when we start writing a lot of html okay so we're inside of our init.pi file and this is where we're going to start writing kind of the initialization stuff for our flask application all right so first thing we're going to do here is import a few modules so i'm going to say from and flask import with a capital flask i'm then going to say from flask underscore sql alchemy import and then this is going to be sql alchemy like that uh i think i spelt this incorrectly yes i did okay let's fix the spelling alchemy alchemy looks good then i'm going to say from os import path we're going to use this later on and finally i'm going to say from flask underscore login import and then login oops if i can get my capitals right here login manager okay nice so we now have all of the imports that we need now what i'm going to do is create a function i'm going to call this function create underscore app and what this is going to do is create a flask application and return it you'll see why we need to do this in a minute but i'm just going to code out a lot of this and then we'll kind of walk through it step by step so inside of here we're going to say app is equal to and then flask and then it's going to be underscore underscore name under scrunder square this is how you create a flask application this is the first thing you need to do whenever you're making a flask app you do app or whatever the name of your app is going to be equal to and then flask and then you put name now name is referencing the name of the module that you're going to be running to create this app don't really have to worry about it too much this is kind of just what you do now after you do this you need to configure a few variables for flask now you don't have to do this but it's a good idea to do this the first thing we need to configure is what's known as our secret underscore key this is a key that we're using i believe to hash session data which you encrypt session data again you don't have to worry about it too much but you need some kind of secret key here you can make this literally whatever you want i usually just do something like hello world and obviously in production you don't want anyone to know what the secret key is but since we're just going to be kind of running in debug mode here for flask we can make this whatever we want all right now all i'm going to do is i'm just going to return app for right now i'm going to show you how we can run our flask app this is actually all we need right now there is some more but we'll do that in a minute what we're going to do now though is go to app.pi and notice that app.pi is not inside of the website folder so the reason i put this init file inside a website is because this makes this folder a python package now this means that from any other file i can actually import this folder and when i import this folder it will give me all of the stuff inside of dot pi so it's kind of strange if you haven't seen this before what i can actually do is say from and then i think it's just website it might be dot website i need to look at my chi chi here no it's just website import create underscore app so i have this folder here called website it has this init.pi file in it which makes it a package that means i can directly import the folder name and when i import the folder name everything inside of a nit.pi runs so that means i can actually take create app right from website because it's from the init.pi file hopefully that makes sense but now i have this create app function so what i'm going to do here is say app is equal to create app and i am going to say app.run and then debug is equal to true so whenever you are running your flask application and you're like programming it out you're debugging it you're developing it you put debug equals true that means every single time you make a change to your python code it will automatically rerun the flask web server so you don't have to manually keep starting and stopping it however before i do this i'm just going to do an if statement if statement here sorry i'm going to say if underscore underscore name underscore underscore equals and then this is going to be a string underscoring square main underscore underscore then we are going to do this essentially what this does is make sure that we actually ran this app.pi file not that we imported it from something else and then i had this code run okay so now we can actually start our flask application so what i'm going to do is open up my vs code terminal you can obviously do this from any terminal that you want and i'm going to type python app.pi now you also could just run this file by pressing the run button but i like to do it from the terminal so i'm going to go python app.pi and then you should see that it starts the flask application so if that doesn't work just make sure your code looks like this and that you have the folder and your init files name the correct thing and now what we're going to do is copy this link right here so it says running on http 127.0.0.1 this is just localhost by default it will run on port 5000 if you want to change the port you can say port equals and then you can just change the port to whatever you want okay regardless okay i need to rerun this because i had a syntax error but now i'm going to go to that link so this is actually the link right there i'm going to refresh uh okay one second i have another instance of this running i just need to okay so i had a different instance of the flask server running that's why you were seeing the blog anyways i fixed that just refresh and then you should see you get something like this this is fine this means this is working if this link actually works like you go somewhere that's good it says not found the requested url was not found on the server that's fine we haven't added any urls to the server yet and so obviously we're not going to find anything all right nice so what i'm going to do now is show you how we can create what's known as a view or kind of a route now a route is just like slash home slash page slash profile whatever we need to manually create these different routes that we can go to or endpoints so what i'm going to do inside of here inside of create app temporarily is i'm going to say app or sorry it's going to be at app dot and then this is going to be root like this i'm going to put a slash this is the actual route that we would go to in the url kind of address bar and i'm going to say define and i'm just going to call this home so this is kind of the way that you create a flask root or something that's going to show something up on the screen right an endpoint you do at app.root you do the actual name of the root then you define some python function and this python function needs to return something so in this case i'm going to return some html i'm going to return h1 h1 and hello so now if i go to slash it should actually return this h1 tag so i should see hello popping up on the screen so if i go back here and i run this now oops i need to rerun my flask server because i had a syntax error so if i rerun my flask server i go here and i refresh notice we see hello pretty straightforward now if we wanted to make another route we would just copy this we would go here we would say slash and then i don't know let's just go slash profile and we need to change the name of the function obviously so it's not the same and then here i could just go profile nice so let's rerun the application and let's refresh let's now go to slash profile and notice this is working so those are the two routes that we've created okay so i just want to show you that in case you're not familiar with flask that's how you create roots now i don't want to create roots in this way i want my code to be a little bit more organized and i want all of my kind of views or roots to be in a separate file so i'm going to set up something called a blueprint so the first thing i'm going to do is make a new file here i'm going to call oneviews.pi i'm going to make a new file another one i'm going to call this auth.pi now off.pi is going to have all of the roots sorry related to authentication so login sign up sign out etc and then views.pi will have all of the views related to our core blog applications like the home page the user's profile page whatever the create a post page all of that will be inside of here so we've just separated them out so what we need to do though is we need to create what's known as a blueprint so inside of views.pi we can start here i just need to look at my little cheat sheet to make sure i don't mess this up we're going to say from flask import and then this is going to be a capital blueprint and then what we're going to do is say views is equal to blueprint we're going to pass the name of our blueprint which in this case is views and then underscore underscore name underscore underscore again don't worry about this too much you just need to pass this and this is the name of our blueprint so you're going to say views variable signal the blueprint put the name of your blueprint this should mirror this variable name here and now what you can do is just like we did before you can say at views dot root and in the same way that we did previously you can make a route so here i can say define home okay and then i can return in this case we won't even do a tag we'll just return oh nice so that is how this works okay now the thing is we've created this file we've created this blueprint which is really just a place where we're going to be storing different routes but we have not linked it to our flask application so inside of a knit top pie what we need to do is actually import this right here this variable and we need to register this blueprint with our flask application so to do that what we're going to say is from this would be views sorry this is actually going to be dot views import and then we're going to import views like that views is this variable so if you name that something else you would import that or you would change that name there and then we're going to say app dot register and then underscore blueprint and we're going to register the views blueprint and the prefix for this blueprint is going to be a slash now i believe we actually have to url on our square prefix is equal to slash so what i've just done here is i've said okay we have this blueprint it's in this views file we've imported it we're going to register that blueprint with our app and the url prefix means okay all of the roots inside of here what are they going to be prefixed by now in this case i don't want any prefix but let's say i had you know slash home but i wanted you to have to go to slash api slash home well i would make the prefix slash api and now if i wanted to access this i would need to type in my address bar slash api slash home and any other route in here i would need to put slash api before it to access it so that's what the url prefix is but we don't want a url prefix so i'm just going to leave it as slash all right so let's rerun this application now and let's see if this is working so i'm going to rerun i'm going to go here i'm going to refresh and notice this has not found i believe that's because did i make the route slash home i did make it slash home so if i go to slash home you can see now this is showing up all right so we've registered the blueprint for this file now we need to register the blueprint for auth so we're just going to copy everything inside of here we're going to go here we're going to change the name of this obviously to be off auth and then that means this needs to change to off and for now we can just make like some basic login or sign up route so let's change this to log in log in and log in and then we'll copy this and we will make uh sign up oops sign ip sign up okay and we will make sign out all right sign hyphen out or log out i actually like log out better i'm kind of using a combination of sine and log but that's fine okay so we need to change the name of these function obvious obviously so let's make this sign underscore up and let's make this log out and then let's change these accordingly so sign up and log it okay so now that we've done that we need to register this blueprint as well so we're going to go back to init.pi we are going to do a similar thing we're going to say from.off import and then this is going to be off and then we will register the auth blueprint again with no url prefix so we're just going to put off like that and we are good to go now the reason i need a dot here is because i'm doing a relative import now what that means is since i'm inside of a python package and i want to import a file that's also inside of this python package i need to put a dot before it if you're not inside of a python package you don't need the dot if you're inside of a python package you do and so that's why i'm doing the dot it's known as a relative import i won't explain it too much but that's kind of the rationale behind putting that there okay so let's look here let's rerun our flask application and let's refresh and let's try some other endpoints so log out okay that works sign up nice and then finally log in or did i go sign in or did i do login i think i did login uh oops why did that not work okay login nice login works perfect so now that we've done that i want to show you how we can actually render some real html onto the screen because we've set up a few routes we can now access a few different pages but obviously we don't really want to just be showing some basic text we want to show some actual html so that is where this function render underscore template comes in from flask there's this function it's called render template this allows us to render an html template now i'll discuss what that really means in a second but in order to do this we need to make a new folder in our website folder called templates so we're going to go templates like that and this is where we're going to put all of our html so we'll have some html files we will render these html files from our roots which means they'll be returned to whoever called it so we'll actually see that on the screen so inside of here let's make a template let's just go with a super basic template for right now and let's call this one home dot html and actually i'm just going to go back to auth i'm going to copy render template i'm going to go to views and i'm going to do it inside of here so now what i want to do is i just want to have some kind of basic html here so i can actually show it on the screen so there's a little shortcut here in vs code if you type html colon 5 and then you hit tab it gives you a boilerplate sorry html template you don't have to do that obviously but i like this it saves us a bit of time so i'm just going to change the title quickly to say home and for the body i'll just do an h1 tag and i will just say home so now we should be able to actually render this html code assuming we do it properly inside of a render template so let's go back to views now we now have our home.html file inside of templates it's very important you create this templates folder if you don't make this templates folder this is not going to work flask knows to look for templates inside of the templates folder well you just you need to have a templates folder so all we need to do if we want to show that html is instead of returning some string we're going to return render template and we're going to render the name of our template in this case home.html so when i do this flask knows to look inside of the templates folder it will find home.html and then it should show it on the screen so let's go here i think i'm probably gonna need to rerun my flask app oh no it's still running okay good let's refresh let's go to home and uh sorry this has to be slash home okay and there we go now we are at home now i'm just going to show you something because notice how slash brings us here but slash home brings us here now ideally i want if we just go to the base url so if we don't have home it shows us the same home page so both home and slash go to the same place so to do that i can simply add another one of these here right above this and say at views.root and just give it a slash this now means if i go to slash or i go to home it will bring me here so now if i refresh see it's bringing me to the home page all right so now we have a decent grasp of how flask works at least the basics right showing some different pages navigating around what i'm going to show you now is what's known as the jenga templating engine so the reason why we're not going to have to use any javascript for this application is because flask has this jenga templating engine which allows us to write some kind of pythonic related code inside of our html documents so the way it works is when you render a template notice this is called an html template you can actually pass variables to this template so i can do something like name is equal to tim now when i do this this actually allows me to access this name variable from within the html template that i'm rendering and the way you do this is let's just go like this is you put two sets of squiggly brackets and now you can access any variable that you pass through when you render this template so if i go here and i put name inside of two sets of squiggly brackets the templating engine knows that this is a variable so it looks for it being passed when we are rendering the template and then it actually shows you the value of this variable it kind of evaluates the expression so since i passed name equals tim if i refresh now you should see that tim is showing up now obviously if i change this to like joe okay let's save go here and refresh we get joe pretty straightforward we can pass multiple variables and we can do a lot more than just work with variables but this is kind of the cool thing is that we can pass information right from our back end to our front end by just passing it through and we render the template so if i go back to home.html i'm going to show you a few more things we can do in the jenga templating engine one of the things we can do is write if statements and four four blocks or four statements or four loops whatever you want to call it so whenever you're doing some type of statement like an if statement a for loop i think you would do a while loop there may be a few other things you can do but those are the only ones we're really going to use you do the squiggly bracket percent percent and then squiggly bracket so i'm going to write an if state so i'm going to say if i'm going to assume that some variable in here is going to be name so if name is equal equal to tim so just like you would type it in python then underneath this you put whatever you want to appear so in this case i can just show maybe hi actually i think i can just do this hi tim exclamation point and then you need to end the if statement so you're going to go for some percent and if so not quite like python because the indentation doesn't matter here this is how you make a basic if statement you do if condition whatever you want to appear if this is true and then you end the if now if you wanted an else you could go percent percent oops okay and you can do else and then you can say not tim or something okay so now what we can do is we can pass through a name so we are passing through joe and let's just refresh this and see what we get so notice it's saying not tim but now if i change this to tim and i refresh we get high there you go so that's the basics that's how you do an if statement all right so now moving on to for loops to do a for loop is pretty similar you're going to do four and then you could do something in something right or something in range just like you would do in python some stuff is a little bit different here in jenga templating i'm going to refer you the documentation if you want to do anything super specific but you can do something like this 4x in and then you can make a list and maybe go one two three four and then you end the four so n4 now inside of here this will act just like a normal for loop so what i can do is this and this means i'm going to show the variable x which is defined here so let's do this let's go and refresh and notice i get one two three four so it's showing each one of the values here right pretty straightforward okay so that is how you do a four so that is cool but there is one cooler thing that i need to show you and this is called template inheritance so the cool thing with jenga is that you can actually have templates inherit from other templates so what this kind of means is you can create a base template something that maybe has the nav bar the footer some things that are going to be persistent and constant across your entire application and you can define some blocks inside of that template that you want to be overridden by maybe other pages you'll see what i mean in a minute what this allows you to do is create a base for your website and then have all of your other pages inherit from that base template and then add into it as they please so you can kind of imagine like all of this stuff is always here right and then maybe there's a div here and this div is kind of where the content of specific pages is going to go well with jenga you can do this you can make this work so i'm going to change this template here to be base and show you what i mean so i'm going to say base.html this is going to be our base template and what i'm going to do is i'm going to start setting up a few blocks that can be overridden by child templates so i'm going to go here i'm going to go percent percent i'm going to say block and then i'm going to put the name of the block so in this case this is title and then i'm going to go percent percent and block now what this means is that i can actually override this block and sorry this should be end block in another template and whatever i override it with will go inside of here so if in another template template i write block title n block and then i like put hello or something it will show up right inside of here so it'll be the title of my website that's kind of the point of this so i'm going to copy this now i'm going to do the same thing down here i'm going to call this block content okay so let's get rid of this home and it's just going to be a content block so now same thing whatever i put inside of the content block in a child template will go inside of here so this is my base template what i'm going to do now is create a new html file and this is going to be home dot html now the way i use this base template here is i extend it so i say percent percent extends and then this is going to be base dot html make sure you put that inside of a string so now what this means i have to put to the very top of my file here is that i'm going to use all of the stuff inside of here and i'm going to put stuff into this template by accessing the different blocks that it defines so i'm going to copy my block title i'm going to put that there i'm going to copy my block content and i'm going to put this here so now i'm just going to make the title home and for my content i'm going to write a little bit of html so i'll go h1 h1 and then i'll go hello this is a test exclamation point okay now when you save it the auto formatting is kind of weird it doesn't handle the jenga stuff really well so you'll see it kind of looks all janky like this if you want to not automatically format your code on save you can do ctrl shift p that opens the command palette in vs code and then you can say file save without formatting so if you just go format it should show up here so save without formatting and you should just be able to press that and you'll be good okay so regardless this should now work so what i'm going to do is i'm going to refresh my page and notice it gives me hello this is a test now just to prove to you that this is actually using this base.html template i'll go above this div here so not inside of block content and i'll put an h1 and i'll just say hi so now when i do this you should see that we have hi and then hello this is a test so high will always be here and then whatever i put inside of block content well that will fill this diff i assume that probably makes sense now that is how template inheritance works and that's a super super useful thing so what we're going to do is we're going to create a few more templates we'll just write all of them and kind of you know have these blocks as we need them just to save us a bit of time later on so i'm going to copy everything inside of here notice i just have the extends i have my block title and i have my block content and i've ended all of the blocks i'm going to make a few more files first file i'm going to make is login.html i'm going to make a new one this is going to be signup.html we'll make another one this is going to be called posts.html some of these i will not get to until later videos but i'm just going to make them for right now and then we will make a create post dot html and this can have an underscore all right let me make sure that's all of them there's one more that we need here and this is going to be called post underscore div dot html and we'll look at that one later okay so inside all of these i'm going to paste my kind of starter code because all of these templates are going to inherit from the base template so let's put that there let's put that there and let's put that there nice we now have all of our html files created that we'll need for the block okay so now that we've done that we need to start looking at authentication and start actually setting up some real web pages on our flask application right so i've showed you the basics of flask hopefully you're comfortable with it now we're going to start working on creating a few pages so sign up log in you know sign out all that kind of stuff so the first thing i'm going to do is i'm going to go inside of my base template and i'm going to actually bring in a css library called bootstrap now bootstrap is a very basic css library that allows you to use some builtin classes so in this tutorial we won't have to write any css because i hate css and i would much rather just use some prebuilt css from a library like bootstrap so the way you do this is you go to the bootstrap website the link will be in the description and you are going to go and look for this js delivery thing okay so notice how it has the css only and then it has the javascript bundle with popper so what we're going to do is we're going to take both of these so i'm going to copy this here right from the home page of getbootstrap.com i'm going to paste this right above the title in my head so this is a link to a css style sheet i can delete that comment there so now i should be able to use css styles or sorry bootstrap styles so that's good let me zoom out here a little bit so we can see and we're going to now go and we're going to take the javascript so i'm going to copy this okay where is it copy and i'm going to paste this at the bottom of my body all right so you paste you place the script tag at the bottom of the body and you put the link tag somewhere in the head preferably above the title but it doesn't really matter where you put it nice so now we should be able to use some bootstrap classes and we are going to start creating a nav bar and just some basic you know styling for our website so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is i'll algo expert algo expert is the best platform to use from preparing for your software engineering coding interviews they have 160 coding interview practice questions taught by the best instructors one of which is me get started with algo expert today by clicking the link in the description and use the code tech with tim for a discount on the platform all right so buckle up this is where we are going to be writing a lot of html uh there will be a lot of html in this tutorial again if you don't want to write all this just want to copy it you can go to the link in the description and just copy and paste all in but i will go through and explain to you what i'm actually doing okay so let's delete this h1 tag i'm going to leave this div here for the content we'll fill this in in a second we're going to start by just creating our nav bar so we're going to create i actually believe the tag is simply nav and this is going to be class is equal to and this is going to be navbar and then nav bar hyphen expanded hyphen lg standing for large and then navbar hyphen dark and then bg hyphen dark and then we're going to end this nav tag all right so these are a lot of classes now these are all bootstrap classes now the way i find these classes obviously i have this code out already i'm just copying it from another screen is i go to the bootstrap documentation so if you go to bootstrap and you press on this docs button right here you can see all of the different kind of pages of classes that they have so they have components forms content layout etc so here i've pressed on nav so where's nav nav is knabs and tabs oh sorry nav bar is what i want so go to nav bar and this notice it shows a bunch of different versions of a nav bar so if you scroll down here this is actually a very similar navbar to the one we're going to be creating except it won't have any search button here and notice it has navbar navbar dark bg dark and if you go back and look at our code that's exactly what we have except we have this expanded thing what this means is that when the screen gets so small the nav bar will kind of be shrunk into you know those three little lines when you press those three little lines it's like a button you see this on mobile a lot it like expands the nav bar down so i'll show you how that works in a minute but i just wanted to show you that's where i'm getting the classes from so if you're wondering like how does this guy know all of these classes i don't i literally just copy them from the bootstrap website i try to create something that looks kind of somewhat nice and that's at least like laid out properly on the screen okay so that's what we need for the nav bar now what we're going to do is create a bunch of stuff in the navbar so i'm just trying to figure out where to get started here by looking at my cheat sheet so i'm going to create a div this is going to be class equals to container hyphen fluid this just adds some padding around the container so that it's not like stuck to the side of the screen it's like padded off a little bit and then i'm going to make a button so i'm going to say button and this is going to be the button that allows us to expand the nav bar when it's shrunk down and the screen is a certain size so i'm going to say class equals and then it's going to be navbar oops hyphen toggle and this actually toggle lure and then we're going to say type is equal to button we're going to say data hyphen bs hyphen toggle and this is going to be equal to collapse and we're going to say data hyphen bs hyphen target and this is going to be equal to pound navbar which is the id of the content for our navbar which we'll define in a second so you go that's our button now inside of this button we need to put a little icon so i'm going to say span class is equal to and this is going to be navbar hyphen toggler hyphen and then icon like that and then we're going to end the span so that will show a little icon for our actual button that we can press on okay so now outside of this div here but actually is it outside of this div uh no it's inside of this div sorry we're going to make another div and this is going to be the div that is going to have the content for our navbar so we are going to say class is equal to collapse so this means it can collapse down right and then we're going to say navbar hyphen collapse and then we're going to end the div and then we're going to give this an id we're going to say id is equal to navbar make sure that this here and this match so when you press the button it actually toggles this to collapse or not collapse the nap nice now inside of here we're going to say div class is equal to and this is going to be navbar hyphen nav this is that the actual navigation area and then we are going to put a few links that will be on the navbar so we are going to say a class is equal to and this is going to be nav hyphen item and then nav hyphen link like that and then we're going to end the tag and we're going to say href is equal to and this is going to be slash home and we're going to put home all right so you guys are probably familiar with a tags the href is where you're going to go when you press on this link so that's what this is and by doing the nav item nav link it looks nice in the nav bar so we can copy this a few times okay and for now we'll just go with login or sign up okay and then we can change these appropriately so this is going to say log in and it's going to say sign hyphen up nice okay so now we have some sort of a nav bar so you can kind of get the idea of our navbar right here that's what we just coded out so what i'm going to do now is i'm going to go and refresh my page and notice that now we have a navbar right and we can expand the nav bar by pressing on this little button now by default i want the nav bar to be expanded so i'm just going to figure out how i messed this up quickly and show you how we can fix that all right so i found the error just a little bit of a typo here notice how it says nav bar expanded lg that should just say navbar expand lg so change that from expanded to expand again all the code will be available on github in case i'm losing you here all right so let's refresh now and uh come on refresh oh i need to make this larger now notice when i make it larger we see all the links in the nav bar when the screen is smaller then it collapses the navbar so you can kind of change the behavior of that i'm not going to go through how that works but if i press on log in it brings me to log in i press on sign up brings me to sign up home brings me to home perfect okay so now that we have the nav bar what i want to do is i just want to make these other like sign up login pages actually work properly because now when i go to sign up and log in it's not showing the correct page it's not showing the nav bar on those pages so i'm going to go to off dot pi and i'm now going to rather than return log in sign up log out i'm going to render the templates we've created so i'm going to say render underscore template and then the name of the template for login is simply login.html okay nice i'm gonna copy this we're gonna do the same thing now for sign up so sign up like that and then same thing for log out actually we don't need a template for logout sorry so here when we log out i'll show you a little trick we can actually redirect the user when we go to this endpoint to go to a different endpoint or to go to a different page so i'm going to import something this is going to be redirect i'm also going to import url4 and i'll discuss how these work in a second but i'm going to return a redirect to the url for and then i'm going to say views.home now the reason i'm saying views.home is because i want to go to this function right here the home function i'm referencing the home function not not the root or the endpoint here i'm referencing the actual function name now this blueprint is called views so for me to access this function here i need views dot home so i'm saying okay let's redirect the user to whatever the url is for views.home the reason i do this is because i might change the url in the future so i could theoretically just go like slash and that would work but then if i changed the url or i removed slash here this would no longer work so this is a more dynamic and better approach you go url4 and you write the function name because you're not going to be changing the function name but you might change the root okay so now that we have all that let's go here and refresh and let's see if the navbar now works so when i go to log in i go to log in sign up sign up and notice it's showing me the uh what do you call it the navbar the entire time okay so now let's just create say the login page so let's go to login.html let's first change the title here to say login and now let's start coding out some forms for the login page all right so we're going to go inside of our block content here let me just make this look a little bit nicer we're going to define a form so we're going to say form we'll say method is equal to this is actually going to be post and that's all we need for right now i'll discuss what that means in a second but essentially that means when we press the submit button this is going to send a post request to the endpoint that we're currently on so to the login page rather than a get request if you're unfamiliar with those don't worry as soon as we get to the next video we're actually going to be handling like data being sent to our backend i'll discuss what all the http methods are okay anyways inside of the form what we're going to do here is put an h3 tag i'm going to say a line is equal to center pretty intuitive but this means whatever i put inside of here is going to be in the center of the page and i'm going to say login okay then i'm going to start creating a form group so i'm going to say div class is equal to form hyphen group and this is where i'm going to put all of the fields that i need my user to fill in so since we're logging in all i actually need here is going to be let me think of this a email and a password yes that's all i need so what i'm going to do is i'm going to create my label so i'm going to say label for equals email and then this is going to say email address like that i don't need the colon i'll end the label and then i'm going to make my input so i'm going to say input got a spell input correctly oops the input tag is just ended like that sorry i'm going to say type is equal to text because we're going to be typing in text i'm going to say the id is equal to email okay and then i'm going to say the name is equal to email now it's very important that you put both an id and a name the reason we need a name is because when we are actually sending this data to our backend we're posting the login information this is how we're going to access that data from the name field so make sure you have a name and an id okay so type id name do we need anything else i think we need a class we're going to say class is equal to form hyphen control and placeholder that's what we need placeholder is going to be equal to email or enter email okay there we go so now we have our input now what i'm going to do is i'm going to copy this and we're going to do the exact same thing except now it's going to be for password so i'm just going to change wherever it says email to say password and i'll change the type from text to password when you change the type to password that means you can't see what they're typing it okay so let's change this to password uh password and then for the placeholder i guess i can just say enter password nice okay so now no i don't want password address i just want password okay so now we should have a form for logging in so if i go to my login page now so let's refresh and let's go to log in notice we get our email address and we get our password but this does not look very good right it's kind of expanded all the way to the edge of the screen we need to fix that the way we're going to fix that is by actually going to our home or sorry our base template and we're going to add a class to the div that holds all of our content this class is going to be equal to container hyphen fluid so if you do this you add the container fluid class to the div that holds your block content and now you refresh notice that we get this padding off of the edge of the screen but still this is not great can we make this go in a bit further yes we can i'll show you how we can do that so i actually just made a mistake i was wondering why it was so far to the left we need to just have this be container not container fluid if i do this now and i refresh that looks a lot better right it's taking up less room on the screen still not the best login form in the world but that's good enough for me to be honest okay now we need a button that we need a submit button so let's go to login and let's add a button so i'm just going to put a break here so i'm going to say br like that and then i am going to make a button so i'm going to say a button like that class is equal to btn and then vtn primary now when you do this you if you add the btn class this just formats the button it makes it look nice and then you can change the color with btn hyphen and the name of different colors some colors are secondary primary dark danger success you can probably guess what colors they are i think there's a warning as well warning would be yellow danger would be red primary is like a nice blue color so that's what we're going to use and then here i'll just put actually rather than submit we can say login and we will do type is equal to submit so this means that when we actually press this button it will submit the form and post this data to the endpoint that we're on slash login let me see if there's anything else that i need here i think that that is good yes that looks good to me okay so let's refresh now and notice we now have a login button however this login button is not in the center of the screen i would like it to be in the center of the screen so i'm going to put a div here i'm going to say align equals and then center and then i'm going to take my button i'm going to put it inside of the div and now this should be in the center of the screen so let's refresh there we go we're now in the center so align equal center easy trick and bootstrap to make stuff go in the middle of the screen nice so that is our login page let me zoom out so you guys can see all this now what we're going to do is copy this login page actually and we're going to put it for our sign up page the reason we're going to do this is because we just need to add a few more labels right we need like a username we need a password confirmation they need to type it twice that's actually all we need so we'll just copy what we have here our label and input and we'll just make one for username and another one for password so here i'm going to copy this and rather an email address i will say username obviously i need to change a few things here so username username username and then enter username okay we can go a capital u here and then let's copy password so i will actually make this password one and then the other one we have will be password two so this will be enter password again oops we'll say password again and then this will be password two two and two and that needs to be password one okay so i think that's good and then here i'll change this button to say sign up and then we have this h3 tag that says login this will be sign up and the title of our website our web page here will be sign up nice okay so that should actually be it for the sign up page so let's refresh and let's now go to sign up and there we go we now have our sign up page perfect so i think with that i'm going to leave this video here i know this is a long video i did a lot but i told you there is a lot to do for this website there's a lot of stuff that we have to get through in the next video we will handle all of our authentication so we have our form set up now we need to actually have it so when we press the submit button it sends this data to our backend we can look at that backend we can create a user save that in a database validate that it's logged in or logged out we gotta do all that stuff so we'll do the next video if you guys enjoyed make sure to leave a like subscribe to the channel i will see you in another one