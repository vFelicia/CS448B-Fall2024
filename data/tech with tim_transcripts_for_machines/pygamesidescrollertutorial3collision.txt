hey guys and welcome back to the third video in my PI game scroller game series and in today's video I'm going to be going over the collision between the character and the different objects and then I'm also gonna be going over like what happens to the character so for example before nothing was happening so we're gonna have him like falling over and then just a few other minor tweaks and kind of bug fixes for the program before we move into the final stage which is gonna be kind of scoring like an end screen maybe I'll see what I want to do with that so for right now you might have noticed in the last video we did a hitbox furball to saw and for the spike but we didn't end up doing a hitbox for the character so what we want to do here now is do a hitbox for that and the reason I left that over the other video was because it's a fairly complex kind of hitbox sequence because our character moves right like he's jumping up and down he's sliding so his hitbox is gonna vary depending on what action he's doing right so that's why I just wanted to save it for now to make sure that I could test and everything was working and I didn't give you an incorrect hitbox so I've got those hip boxes now for you it's just gonna be easier if I just copy and paste them in here and then I'll give you something to copy them down so it's very important where I'm placing this so I'm in this is my player class right here and I'm in the draw method so what I need to do here now is go to this first part so when our character is jumping now our hitbox when our character is jumping is going to be placed right here so just underneath the ifstatement not inside of the ifstatement just below it okay and then this is what it's gonna be so selfless for comma self dot y and then self dot with 24 it's very important and then self dot height 10 make sure you copy that down pause the video as I'm gonna move on to the next one now okay so our next hitbox is here and this actually involves us to type in a whole new section of code so this is actually a two liner here so I'm going to copy it and paste it in so this is in our kind of bottom part here now if you haven't noticed this part in the other tutorials I added this into the github don't worry about it just if you don't have most recent version and you don't have this or self thought slide up make sure you edit that you can just fix that by looking at my class here now underneath our slide count equal equal to 80 so we're gonna do another Elif like this so it's gonna say Elif and then slide count so it's just all this right here we want to copy this down so if our slide count is greater than 20 and less than 80 meaning that our character is actually lying down that's what the image looks like then the hitbox is gonna be this so it's gonna be self dot X self dot y plus three self thought width minus eight and self dot height minus 35 okay copy that down again pause the video and now we'll move into the next part so the next hitbox is gonna be render Neath where we're drawing everything so do this and we're we have slide count greater than 100 tons we're still in this little LF statement here underneath this we're gonna say self dot hitbox equals self dot X plus four self dot y self thought with minus 24 and self dot height minus ten okay so the next hip box goes just where we're running here so it's gonna go like this and there we are now we're just going to add something else to this class so sorry I'll give you a second here you can copy this down so self dot X plus for self dot Y self thought with minus 24 in self to hide minus 13 okay copy that down and now I'm going to the next part we're just gonna add an attribute in our class here's a self dot and then up here it's going to be falling and we're gonna set this equal to false just so we that we can we don't to come back to this class after we'll just do this now and then right here above this else statement we're going to do an L if we're going to say L if self dot falling and then in here we were just going to simply say win dog blitz and then we're going to do a picture it's gonna be called fall and then in here and say self dot X and selftaught why 35 believe earth well yeah 35 like that just so it moves our character down down a bunch I think that looks about right and then obviously if we're gonna be drawing the picture of us falling that means we need to have the picture of us following and sorry this isn't a this is a bus I keep getting mixed up because in PI game we're gonna leave it as 30 actually when you add to the Y you move downwards just gonna have plus 30 and then we need to get our image so you guys already have this image if you downloaded my thing from the github you downloaded all this files you will already have this image so just type this in exactly as I do it like safe all equals and then PI game got image got load same thing in here when I say OS path join our folder is called images and then this image really easy it's called 0 dot PNG just like that okay there we go we're finished with this player class now and the hitbox for this should be working now if we want to draw the hitbox it's the very last step I just to make sure that everything really is working well we'll go down to the bottom in our draw method and we can just say PI game doc draw dot rect win will draw it red again just like the other ones we're gonna just draw hugging our self dot hip box like that and then so that we are drawing it with two thickness then we'll go ahead we'll run the program and we can just make sure hitbox working and there we go we can see we have our player hitbox like this when he slides it changes it could it should actually be changed a little bit different than that so we're gonna have to look into that for one second to make sure that that everything is fine there and you can see that we can jump over everything the jumping hitbox works fine just the sliding hitbox that we're running into a bit of an issue with so we'll make sure that we get that fixed right now so in the sliding hip box the reason that we're running into an issue I believe is because we're drawing the hitbox in position yeah that's right we're gonna take this selftaught hitbox here that I have in that I've actually put in the wrong position we're gonna copy that now we're just gonna move it up in here so must be inside this if statement my bad make sure you just move that into here and then everything should hopefully be working fine yep there we go now everything looks to be working okay so now that everything's working it's time to move on to the next step which is going to be collision so now that we've have all the hitboxes pretty much perfect for at least our character saw and our spike we're gonna do the collision between them so the way that I like to do this is just by adding a method inside of our both our objects so we could do one in our player but it's just easier to do it in our objects and we're just gonna call it collide so we're gonna start off by going to their saw class say define collide self and then it's gonna take a rectangle so what the rectangle is is just gonna be the hitbox of our player pretty well and then in here we are simply just gonna type if and then we let me just get this so I don't get this wrong here on my other screen so if rect 0 which is the x position of our player plus his width this is the hitbox right is greater than selfthought hitbox and that's going to be zero because we're checking the X right now we have wrecked 0 again the x coordinate of our player it's less than selfthought hitbox 0 plus self dot hitbox 2 because that's how width that and then so this checks if the x coordinates are within each other now that we have the X we have to check the y so since we're just checking the saw object here all we have to say is if the rectangle 1 so that's our players Y position plus his height which is gonna end up being his feet is greater than selfthought hitbox1 because we know that the character is never going to be below the saw because it can go lower than like that ground level we only have to bother checking if his feet are below where the top of the saw is it if so if the X are there and it's below the top of the saw then we know that it's collided so we can leave off one little part that we may have added for collision in different games so if that happens we're gonna return true otherwise we are going to return false like that then we're gonna go ahead and we're gonna copy this and we're gonna paste the same thing in our spike we're gonna make one minor tweak here and it's just gonna be in the Y because that the X is the same thing but for the Y what we need to do is we're going to say if rect 1 and then in this case is less than selfthought hitbox 1 or hitbox 3 sorry and this is because we know that the y coordinate of our player is never going to be above the the top of the spike right he can't jump that high and we know how you can jump so we only have to bother checking if the y coordinate is then above the bottom of the spikes at the bottom of the spikes since it starts at 0 is just going to be equal to whatever the height of the spike is hope that makes sense it's pretty straightforward so now that we've done that what we need to do is we're gonna have to check for a collision so we we have the colliding methods but we don't actually check it anywhere so inside of our while loop we already have it set up so that for every object we're doing something right so we're moving the object and then we're checking if it's off the screen so why don't we as well now check if it's colliding with the player so we're gonna say if object with two T's dot collide and then inside of here we're just going to do runner because that's what we named our player I just keep calling a player runner dot hitbox like that and then if that happens then we're gonna execute what happens when he's hit right so when he when he gets hit when we collide something then we're just gonna say runner daughter falling which we set up earlier is equal to true now I'm also here just gonna delay the game just so we know when he gets hit so PI game time don't delay I'm gonna take this out later but this is just gonna show us where exactly he's getting hit so for one second it's gonna pause so we can see it and that should be good so let's go ahead and check everything out here and make sure that everything's working fine so we can see here we have our little guy we're going to wait for something to spawn onto the screen and then we'll see if the objects collide so actually let me try to jump over this one oh so we see they've collided it keeps delaying the game because they've collided like a bunch of times you can see collide collide collide collide there we go and we shred into an issue here named fall is not defined oh my bad there why we come up here we just need to say sorry this is inside our player class when we're drawing the fall self thoughtful okay let's run it one more time see if everything's working again so you can see our hip box looks to be pretty good could be improved slightly but I mean it's not a huge deal for right now and if we collide then we fall down like that perfect awesome okay and once that happens obviously I'm not gonna be delaying the game so it's not gonna look like this he's just gonna be sliding and falling and yeah awesome alright so now all we need to do is figure out what we're gonna do once the player actually collides so once he collides we don't want to delay the game because we saw what's happening they're just lagging what I want to do is I kind of want to pause the game so I want to make it stop and then we can ask the player do you want to play again so on maybe show a high score table so I'll get that starting now but we're really gonna be doing a lot of that in the next video so I'm gonna make a new function I'm just gonna call it define huh maybe call it reset yep and what that'll do is it's gonna reset all their global variables for us so we'll do that inside of the function and then it's gonna maybe call like the end screen to show us that that good stuff there okay so I'm just gonna type pass in here for now because I'm gonna get on to that in the next video so if this video was useful and you guys liked it please make sure you leave a like and subscribe and I will see you in the next video where we're gonna go over again those end screens and get into the final parts the game that's gonna be the final video for this series