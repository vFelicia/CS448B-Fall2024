hey guys and welcome back to the second video in my online Python game development series so in this tutorial we're going to be working on coding the server and that in the next video we're going to be connecting this client that we made in the last one to that server and then sending information to and from the server so let's get started and let's create a new file that is gonna be our server file so I'll just call this one server key Y and then in here we're just gonna have to import a few things and I'll talk about exactly what they're gonna do for us once we start using them so let's start by importing sockets our socket then we can import underscore thread and we'll also import OS okay so actually not OS sorry sys that's all we need for that so what we're gonna be doing like I've talked about is we're gonna be using sockets and threading to handle connections to our server and essentially what that means is we're gonna set up a socket and it's gonna allow for connections to come into our server on a certain port so we're going to start by just defining server which is gonna be a string and port which is gonna be a number now for ports you guys probably know what ports are you might have heard them before for example like a common port you would use on our common port that is used that you want your router would be port 80 and that is for HTTP connections there's also a port like 443 there's there's tons of other ports that have distinct uses but there's also a ton of ports that don't have any uses and that are just left open for programs like this or for different things to be used for so what port I'm gonna use which is typically open it depends on like what route are using and your internet connection but typically a port that's open is five five five five so we're gonna use this port to connect to and from and it's just a safe port to use as opposed to trying to use another number that we might not know if it's being used for something else or not okay so once we've done that we've created a server and create a port what we're gonna do is we're going to set up what's known as a socket okay and we'll talk about exactly how this works in a second but we're just gonna say s equals socket dot socket and then here we're gonna type something that's probably gonna mean nothing to you but I'll talk about what means so what's this socket equals AF underscore eye net okay and then socket dot sock stream like that all right now these are just the types of connection so since we're gonna be connecting to a I P V for address which again we're gonna keep talking about all this stuff as we go through in case you guys are unfamiliar with networks this is the type are gonna have to use and sock stream just I believe represents like how this server string comes in I could be wrong on that but this is the type we're gonna use and for any kind of applications like this this will be what you use for your socket okay so we're just initializing that and now the next thing to do is to bind our sir and our port to the socket so to do this we need to do a try and accept and the reason we do this is because like I talked about we don't know if this is actually gonna work initially doing it there could be in some instance this port is already being used for something and if that's happening that means that this is gonna fail so we need to try and accept this so it will accept what do you call it error as e so let me say socket Dodge air as E and we'll just print that out to the screen just so we know why we're not working there otherwise what we'll do is we'll say s stop bind and then in here we're gonna put server comma ports okay so will bind to whatever IP address we'll put in here to this gibbon port okay so I hope everything's making sense so far essentially what we're doing when we do sockets is we're setting up a connection or we're using a port on our server on our network it's gonna look for certain connections and then we'll be doing this on the client side as well will be binding or not enough of you binding will just be connecting to a certain server and a port and then since we're connecting to that this server script that we're gonna have running will see that connection and handle it in some way okay so now that we've done that I'm trying to think what else we have to do okay so what we're gonna start by doing is we're gonna start listening for connections so we're gonna do s dot listen now s don't listen essentially just opens up the port so now we can start connecting to it and having multiple clients connecting and not so in here this actually takes one argument now it's optional and if you leave it blank it means it'll allow for unlimited connections to happen now depending on what kind of program you're writing is what you're gonna do for this now for me I only want two people to be able to connect to my what do you call it yeah to my server so we're just gonna do s don't listen to now this might actually be one cuz it might be like zero one but I think maybe the correct thing so let's don't listen for now and then what we're gonna do is we're gonna print after we've listened I will just say waiting for connection and we'll say server started or something like that because once we get to this point we are running the server and everything actually is working like we're listening for connection we're ready to go okay so the next thing we're going to do is we're going to define something known as a threaded function okay and we'll I'll talk about again what this means but let's just do threaded threaded underscore a client for now and I'm just putting you don't actually have to name it this you can name it whatever you want I'm just putting threaded here just so we know this is threaded and then it's gonna take one argument which is just gonna be Co at n which stands for caption and let's just pass in there for right now so the way that threading works actually let's let's do the threading and then I'll talk about how it works so I'll probably make a bit more sense so let's do a while true down here okay so once we set up our server our port we bind it doing here we're starting to listen waiting for connections starting the server then what we're gonna do is we'll be get put into this while loop and what this while loop will do is will continuously look for connections okay because right here we're just listening like once right to see if anything's on that server report but down here we want to continually try to grab connection that see if somebody connected and if it does then we want to print something to the screen or we want to send information or we want to start a new thread which we'll talk about in a second so in here what we're gonna do is gonna say connection which Co n N and then ad are equals and then S dot and then we'll say accept and what s not accept is going to do is it's going to well accept any incoming connections and then it's going to store the connection and the address the connection is by the way an object representing like what's connected the address is gonna be an IP address in these variables okay so if we get a connection what we'll do is we'll say print connected to okay and then ad R and this is just going to show us what IP address is actually connecting so we can have a look at that and then what we're gonna do is we're gonna do start underscore new underscore thread and then in here we're going to do what was that name of the function that we had was threaded clients okay and I believe we do comma and that in brackets here we do Co n like that okay so start new thread is there a reason that's not working give me a sec guys I want to see why oh that's why so up here instead of saying it import thread we're gonna say from underscore thread import star okay and not just gonna make it so we can just do this start a new thread thing and you know what I don't know if we're gonna need this sys but let's just leave it there for now okay so let's talk about what threading is gonna do so essentially the way that you guys are used to programs working I'm assuming unless you have some familiarity with threading is that say we're in this while loop right and we were to call the function threaded client well before we continue going with this while loop we would have to wait until this function was done running or in other words we return back from this function some value or for example like he does like x equals 5 we'd have to wait for this x equals 5 to execute and then it would come back in this while loop and keep going now we don't want that to happen because we're gonna be having multiple connections going at once so what we want to do is we want to start at what's called a thread and a thread is just another process that's running in the background so that just means when we do start a new thread and we do threaded client it's gonna run this function but it's not gonna need this function to finish executing before it continues the while loop so this is gonna be running in the background as like processed to while process 1 is still running and still going so that means say we connect to a hundred different things we're gonna have 100 different functions running so a hundred different threaded clients on the stock or like keep going and then what we're gonna have is this while loop it's still continuing to go what did I just do I'm still continuing to run to look for another possible connection you guys will see more how this works but essentially just means this will run in the background and we don't have to wait for it to finish executing before we can accept another connection that that's the basic kind of wait till that works so now let's start working with threaded client and then we will test the server out and see if it's working and then obviously the next video we're gonna connect to it and do all the connection stuff okay so in here threaded client so what should happen when we connect to a client well we're gonna have to do a while loop in here so I say wow true because we want this to continually run while our client is still connected okay now what we're also gonna do is we're just gonna say reply equal is blank like that I'm just copying from my other screen because this one is a bit finicky I don't mess it up we're gonna put a try in here and we're gonna say is we're going to try to receive some kind of data from our connection okay from whoever connected we want to receive some kind of data so what we'll do is we'll say I believe it's s con dot receive that might be right yeah I think that's right and then here we're gonna put the amount of bits okay now if you guys know anything about computing you know like how what bits represents but essentially this is the amount of information we're trying to receive now if you're getting an error when say you'd like do this and you connect up and you get some area that says what do you call it like object was true on store like uh you're getting any errors just increase this size okay and you can just do that by like putting this like times eight or something just note that the larger this size is and the longer it's going to take to receive information and that's obviously because the more information you're getting the longer it takes to send that over the server so 2048 bits is not a lot it doesn't take very long it happens almost instantly but if you bump this number up to a ton then it will take longer to do that okay so data I'm going to say reply equals and then when I say data dot I think it's actually stringed decode hmm let's see this Oh data decode because it'll be in that that kind of object that dad decode and then here we're gonna do UTF comma eight now the reason we have to do this is because whenever we're sending information over a like clientserver system we have to encode the information and you'll see that in the next step that we're gonna encode information before we send it back to the client but that means that we're receiving encoded information so to actually be able to read it like a human readable string we need to decode it first so it's really easy to do that we just do decode and we're just giving the format which is utf8 okay so reply equals that and then we're going to say it's going to say if not data we're going to print disconnected okay and then we're gonna break and this just means if we try to get some information from the what decodes the client but we're not getting anything we're gonna disconnect and we're gonna break and that likely means that we've well disconnected from the client or the clients left or something like that so instead of continuing to run this while we've been trying to get information from a client that's disconnected we're gonna break this is just kind of a failsafe to make sure you don't get into any infinite loops and it's also gonna show us if we're running into any issues with like receiving the data and decoding it which we'll talk about later okay so otherwise so if we are getting information all we're gonna do is we're going to print received is that how you spell received maybe and then we're gonna put what do you call it rip fly okay I didn't mean to do that let me see if I'm spelling this right I'm knowing to get received reply so this just means we received from the client this reply let's printer to the screen and see what it looks like and then we're gonna print sending and will this print reply okay and then we'll talk about this again in a second why does this keep happening okay brookline next now after this if not data break out what we'll do down here is gonna say con dot send all and we're going to send STR dot Inc would reply now again remember that since we're sending information over the server we have to encode our information so all this is gonna do is just encode our string reply into a bytes object so that means when we read it in from the client side again we'll have to decode that information it's kind of annoying but I mean it's a bit security thing right so now we're just going to accept I guess what it what kind of error would it even be I don't even know if there's gonna be any errors if we run into anything let's just break just to make sure that we're not you know getting in that infinite loop or we're not gonna ruin the program by doing that okay so this is actually about it for our server let's see how much time we're out 13 minutes okay so now what we need to do is figure out what this server number is and then we can actually test it and see if this is working so what we're gonna do now is we're gonna find the server number now to do this we're gonna be doing this over localhost okay that means that we're only gonna be able to connect over our local network meaning that like anything on our WiFi network that can see each other that'll work fine but as soon as we go outside that network it won't work so we're gonna be using what's known as local IP addresses so to find the local IP address of the machine you're currently on you're gonna go to command prompt in the bottom left and then you're just gonna type IP config okay now some of you guys are probably freaking out because you can see my IP address right now this is a local IP address and that means that it is locally assigned to my network no one outside of my network can see this IP address or companion or candy to us it or anything like that okay so it's perfectly fine if you guys see this address or if other people know what this local address is okay just as a note so we're gonna do is we're gonna take this ipv4 address so I'll just copy that and we're gonna paste that inside of the string here okay so 10 to 11 dot 250 207 is mine now yours likely is like 192.168.1 like a massive network usually they use 10.10 like as the default gateway which is what they're using so my IP address star to the 10 yours likely starts with 192.168.1 or dot like 5 or something like that and then the rest of it okay so that's the address we're going to use and this is going to be our server address so whatever machine that you're gonna be running this server script on that's the address you want so say you want to run this server on your laptop and you want to run clients on like your PC and your Mac or something like that then you want to make sure you get the IP address from your laptop and you're putting it in that script okay and we'll talk about more of this in the next video when we actually connect to it okay so now that we've done this I probably made a mistake but let's actually just create a configuration quickly for server and run this and just see if we're getting any errors as of now now it is worth noting that we're not gonna be able to connect anything yet so there's not really gonna be much we can see or really do but for now let's just test this out so let's have server let's run this and you can sees waiting for a connection server started so that's actually good if you're getting this string of text everything is currently working in the next video we'll probably have to debug a little bit once we start connecting to this but for now that is the main server script now I'll briefly just talk about before I end this video how it's gonna work in terms of running the server script and running the client script the server script always has to be running okay so whatever you're trying to connect you have to have first run the server script and then you can run multiple client scripts from wherever on the network you want now the server script has to be running on the machine that the IP address is like this little string here okay it has to be running on that machine and you can run a client script on the same machine that the server scripts running and you can run multiple client scripts on the same machine so like for example what I'm gonna do to test this in the next video is I'm gonna run the server and then I'm gonna run to clients on this machine and we'll see that it like is moving back and forth for them so anyways that's minute for this video as always the code is up on tech with Tim dotnet in case you guys missed any of this are you running into any issues and with that being said I will see you guys in the next video