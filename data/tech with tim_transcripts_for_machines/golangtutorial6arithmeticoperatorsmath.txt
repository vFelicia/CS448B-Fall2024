hello everybody and welcome back to the golang tutorial so in this video we're going to be talking about arithmetic operators and how you can perform basic mathematical operations in golang now this is pretty straightforward but there's a few nuances here that I want to show you because these are things you will often run into or problems you will often run into so let's go ahead and get started now the basic operators that we have in golang we're actually performing arithmetic is plus minus we have slash we have multiplication that we have mod which is the percent sign so these are what the five can standard arithmetic operators are of course we have a set of brackets that we can use just like we would you know in regular math so we can put expressions inside of the brackets and then other operators outside of them but that's the basics for this now the important thing in going is that whenever we use these operators so plus/minus division multiplication I assume you all know how those work the types that we have so the operands on the left and right side of that operator need to be the same type so in this case since num1 and num2 are both ins we can perform these different operators on them so I can do num1 plus num2 and say num1 num2 num1 divided by num2 let me know issue in doing that because these are the same type now what happens though in an issue that occurs is if this becomes all of a sudden so like a float 64 even if this value is still you know an integer value like this right so let's actually do this you're gonna notice that we get a little squiggly line here and it says invalid operation mismatch types float 64 and int so even if the value seemed like they would make sense to perform the operation on so like you know eight point five over four it doesn't work like that they need to be these same types so I'm gonna show you really quickly how if you have say a float like this and an int like this you can still perform these mathematical operations now ideally what you're gonna want to do is you're gonna want to convert any in so you have in two floats and then do those floatingpoint arithmetic so I can actually convert this num2 to a floatingpoint number simply by typing float64 like that and then putting brackets around num2 so now what this actually does is converts num2 to the value of float64 so pretty much remember we're working with numeric types so floats and in so those are kind of the basics we can convert between them by just using something like this so like int we put some float value in here and what this will actually do is just make this value become 6 it will round it down and just round off the decimal point well I guess it's not really rounding it's just stripping off decimal point and making it whatever the whole number equivalent is to this so that's how you can do basic conversions you can use something like in 32 you know in 8u int 8 if you wanted to do that between all these numeric types and convert between them so just keep that in mind you really need to make sure that the types that you're doing this arithmetic on are the same and yeah that is pretty much the answer so let me show you actually what happens let me change this back to int so let's make this int let's just go and get rid of this float here let's do num1 let me make this 9 and let's divide by 4 now what I want to show you is what actually happens when I do 9 divided by 4 and I print out the answer here so let me look at this I'm gonna have to actually get this terminal back up so let's go to terminal CMD go run tutorial go let's see what we get we get 2 so notice that 9 divided by 4 the answer is actually not 2 it's 2 point something right 2.25 or whatever that value actually is that's the answer but we're just getting to the reason for that is whatever type these two values are so these two operands on the left and right side that's what this answer is going to be so what the evaluation of this expression if they're both in so the answer will be an int which means that this will just give you the integer representation of whatever that actually was right because we're not dealing with any floatingpoint numbers now if we wanted a floatingpoint result we would have to change these values to float so if I change this to float 32 and float 32 and now I actually go ahead and run this you can see that we get opens oops I need to change this to % gee sorry for it so the outputs correct but let's have a look at this we get the value of 2.25 so that is how you deal with floating points and integers the biggest issue any of you are probably gonna have is that conversion between floats and intz and dealing with all those things so just keep in mind that you know they need to be the same now of course in go just like all pretty much all other programming languages we do follow bed mass to some extent so bed mass is an acronym I'm gonna try to type it in here let's see so be without the autocomplete it's just auto auto completing my lines yes okay so bed mass this is the acronym so this stands for brackets exponents division multiplication addition subtraction so this is the basic order of operations in mathematics I'm sure a lot of you've heard that acronym before but essentially what that means is I can do something like this like I can put brackets around here you know I can add that five and obviously we'll make sure we do the division first which would have happened anyways and then add B five to that so just keep that in mind anything that you know from basic math pretty well holds here and go there's a few nuances but that's about it okay so now I'm gonna show you what's called the mod operator so let me change these back to int my caps locks can be deactivated and I'll show you what mod does so I'm actually just gonna print out the value of num1 mod num2 now what mod does is give you the remainder after division so if you think back to kind of elementary school math before you were dealing with fractions and all that what you would do when you do division is you would say like 9 divided by 4 is 2 remainder 1 because 4 goes into 9 2 times and then you can't put another 4 in but there's one left over so whatever that leftover is so the remainder is what the modulus will actually give us so let me do 9 mod 4 that will give us the value of 1 so let me actually go down here and run this and we'll have a look and I keep I always forget to do this I got to change this back to D here just show it so it shows it properly ok so we get 1 right so that's the remainder now if I change this to 10 then the mod value that we're gonna get will be what is it to right now the only cases I want to show you that you probably wouldn't necessarily guess is if I do something like the 0 mod 4 I mean what do you think this one's gonna be take a guess let's see the mod of that is 0 now this is one that you need to watch out for is when you do something like this so if you mod with 0 as I guess the what do you call that the divisor or something or whatever that is as if num2 is zero so you're modding by zero you're gonna run into an issue and I'll actually show you the error that you're gonna have it's called a division by zero issue so let's our error whatever that is so if we look here you can see that what happens is when we go go run tutorial let go we have a panic this is go Lang's kind of idea of an exception or an error it's just a panic that's what they call it so here we can see a runtime error integer divided by zero so that's not allowed you cannot divide by zero just like in your calculator that's gonna return an error but just notice that this actually happened at runtime which meant like my code was able to compile I was able to execute this fine and actually run the code but what happened was when it had that division by zero though this is known as a runtime error then it crashed so beforehand go didn't notice anything was wrong because the division by zero didn't happen yet but once it occurred then that happened whereas if I did something like you know 3.2 here and I saved this will get a little squiggly line popping up that tells us you know this isn't okay you can't do this right and if we try to run the code actually I don't know if this one will run or not but let's see here it shouldn't actually even let us get into yeah so here it says so constants 3.2 Trunk kids integers so this means we actually weren't even able to run and execute the code it told us before we could do that that hey there's a problem you can't run the code so that's just something to keep in mind we'll talk more about errors and panics later on okay but that's how num that's how mod works that's how division addition subtraction works the last thing we'll say is that if you want to do math like exponents for example or you want to do like arctangent or cosine there is a package called the math package if you import it up here just under fmt then what you can do is use math dot I think like square root for example abs there's a bunch of ones popping up here exponent exponent to float 64 there's all these different functions that you can use there's actually a mod function here there's logarithms like anything you would need will be inside this math package so if you need a specific mathematical function that's not in here you need a constant like pi or something you can get it from that math package but with that being said I think that's pretty much it for arithmetic I mean it's pretty basic like you can ask those brackets order of operations holds plus minus vision multiplication exponents mod all of that if you understand that you were good to go and that being said I hope you guys enjoyed the video if you did make sure you leave a like subscribe and I will see you in the next goal aang tutorial