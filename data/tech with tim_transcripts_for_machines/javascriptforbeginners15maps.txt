hello everybody and welcome back to the JavaScript tutorials so in this video we're gonna be talking about maps now maps are kind of a mixture of sets and arrays now it's not only the best way to describe them but you'll understand them as we get through but they have the same property as a set where we can actually look up items and see if items exist in what's called constant time now in case I didn't make this clear enough in the last video adding items and deleting items from a set also happens in constant time now I just want to say this because this is the same as Maps when you have an array right here we have an array and we look something like this and we want to add an element site to the beginning of this array well this actually takes what's called o endtime and I don't want to get into spacetime complexity with you guys but essentially the more elements you have in an array the longer it takes to potentially delete one or add one and especially to find if one exists the only real benefit of an array for us is the fact that we can keep track of the order in which elements exist and we can access them directly by using that index right raise your array wand right to whatever right that's kind of the advantage and the reason we use an array and for most problems that's fine but there's a lot of instances in which we actually want a faster kind of structure that will allow us to add delete and look up items in constant time but we can't necessarily access them with indexes and know the order in which they were inserted right and we also can't keep track of the frequency whereas in an array obviously we can have the same element more than once ok so that's my little spiel here now what I'm gonna do is start talking about maps so let's create a map we'll just call this M P equals new map now what is a map well a map is similar to set but what it holds is what are called key value pairs now this is kind of what I mean we have a key maybe this key is something like hi in this maps to some value maybe in this instance we say 6 so we have some arbitrary key can be called whatever we want mapping to some value now this is very useful for a lot of different tasks I'm gonna show a good example in a second of how we actually use this but the whole point of this is that this key value is what we use to access different or this key yeah this key is what we use to access different values and obviously we have you know more than one key so I'd have another key like this I could have maybe the key Apple and that corresponds to the value seven and obviously our keys can be different too we can have a key that's actually numeric which is eight and that could map to may be the string Tim right so this is the way that a map works we have a key that maps to some value and you'll see why this is useful in just a second and again same properties here to look up any key is gonna be instant time so you can think of it as instantaneous versus an array that's much slower and to grab that value is gonna be the same so to add delete or lookup is gonna happen very quickly that's why we use a map so let's start talking about some map operations I'm gonna first talk about the constructor so right now what I've done is created what's called an empty map although I can actually add some values in this constructor to start off with some kind of initialized values so to do this what you actually need to do if you want to start with some keys in here is create an array of arrays of keys and values now I know this seems strange so actually let's separate this like this so you can get a better idea of how this looks okay and like that okay so what I've done is I've had this initial array and then I have two arrays inside of here and what I'm going to do in these arrays is put a key and then a value so my first key I'm just gonna say is T and this will point to let's say the value five and then let's have a key V and maybe this point to the value eight so we've started off our map with these different key values let me just put this up here cuz that's gonna be annoying okay so now how do we access these keys how do we create new keys how do we do all this well to get a key what we use is called get now I'm just gonna console.log this so we can see so I'm gonna console dot log MP which is obviously standing for a map and what I do in here is I put the key that I want to access now what this is gonna do is return to me the value associated with the key so if I put for example T here and we go and we refresh this you can see that we get the value five printed out because this method returned to us five now if I put V and I refresh this here we get eight and hopefully you're understanding and getting the point that is how this works now let's show how we can actually add thing to our map so to add something to our map what we do is MP dot set and we simply put in here a key and a value so I'm actually gonna do this a little bit weird just to kind of confuse you guys a bit I'm gonna actually set the key T to the value 9 now what do you think this does remember maps are very similar to sets do we think this adds another key called T that has the value 9 or does it override the existing key and change that value let's see here if we try to get the value of T let's see it what value we're actually gonna get well we're gonna get 9 that's because if you set a key that already exists essentially what you do is just completely override this and change the value to whatever it is you put here now obviously I can add some other ones so I can MP the set you know like H I honestly let's actually just set like 3 equal to hello now you see if we get the key 3 from our map we get the value hello and let's try to get a key that doesn't exist from our map and see what we're getting there do it refresh undefined obviously there's nothing in the map that's gonna give us that value so those are the two basic operations for maps we have set and we have get now obviously we can look at the size of our map just like almost everything in JavaScript so if we do this we get we have three keys so three key value pairs in our map because we've added this 3 hello and that is the basic principle now to delete keys is very easy as well we're just gonna do MP dot delete we could delete the value or the key T and we should see that our size changes from 2 to 1 so let's have a look at that and now we get the value 1 because we deleted T what happens if we try to delete a key that doesn't exist for example the string 6 well we still have a size of 2 and with no errors that's fine we just didn't end up deleting that key all right so the next one that I want to talk about is has now has simply is a boolean value that tells us if the map has a specific key so very similar to set and this runs in the same kind of time as it does for a set so I say MP dot has and I put the value T like this and we print out our answer obviously that is true and then if we do something like you know six here so let's refresh this then we get the value false because obviously the key six or the string six was not one of the keys in our map and yeah I mean that is pretty much it for maps I'll show you a few other methods we have the map clear method so I could say MP dot clear let's just actually print out MP so we can have a look at it after MP dot clears obviously just gonna remove all of the keys so we see we have an empty map here we've cleared all the entries from it what else we have is the map dot entries methods so this one is actually interesting I'll show you this entries like that so let's refresh and you can see we get T points to 5 V points to eight and this is what's called an iterator which means we can loop through this and look at all the different entries so let's actually do that now we'll do a for loop and just show how we can iterate through this so we'll save our entry of MP all we need to do is simply console dot log the entry now the question is what is entry is entry going to be the key is he going to be the value or is it going to be the whole thing let's find out by refreshing and we can see that's actually giving us the whole thing so if I want to access just the key or just the value what I have to do is actually index either 0 or 1 by index 0 that's gonna give me the key if I index 1 that's gonna give me the value and the reason for this is because again we're actually looping through this array right so we you know we go through the map and then we are given for entry and array so we have to loop through the value to determine which one we actually want I did not mean to do that let's refresh now you see we're just printing out the keys and if we were to change this to 1 then we would just be printing out the values like that pretty straightforward ok so now let's go through an example with why we'd actually want to use a map and this one is a fairly good example actually I like this example to count the number of characters in a string so let's just say STR equals and then let's do this is my new string hello just add some characters in here so what I want to do is actually create a count of all these characters I want some way to be able to find out how many of any letter exists in this string so if I want to find how many T's I want a way to do that how many eyes and and so forth you know I want a way to do that I want to count all the different letters well we can do this very easily using a map and I'm gonna show you just by going through the example and then we'll walk through it step by step I'm gonna save our letter of string which means we're just gonna loop through each letter in our string and what I'm gonna do now is say if in this case well actually these MP dot has letter so if it does have the letter what I'm gonna do is actually say MP dot set and in this case the key is gonna beat the letter and the value is gonna be MP dog get letter plus 1 now what I'm gonna do is store in my map key values that look something like this I'm gonna store the letter for example let's say T and I'm gonna store the count as the value so I'm gonna start how many times I've seen you know whatever this is so if we actually have the letter already inside of our map that means we've seen it before and we'll talk about how we're gonna do that in a second well grab whatever the current value of it is here and then we'll add one to it and store that back in the map and remember when we set and you know a specific key if that key already exists in the map which it will have here say we have T we just override that and we'll just change T's value to be three and that's the point we're gonna just increment and count how many letters and I'll show you how we can look at them in a second now otherwise so if the map doesn't have this letter we need to add that letter to the map but you're gonna say MP dot set ladder one the reason we can just put one is because if this is the first time that we've seen this letters not re in the map all we need to do is give an initial value of one because we've seen this letter one time okay so that is how we do that now let's just print out the map to have a look at it after so if we refresh we go here we can see that we have now our map T has a count of two H has two I 3s 3 blank which is space actually has a value of 5 and then we can keep going and see all of the different letters as well as their counts so this is useful because now if I want to check how many you know say T's are in my map what I can do is say okay let's get a value of T let's see how many T's are in this string that we counted right so if we refresh now we print out two and now any letter I want I simply put inside here and obviously if we don't have the letter in there it's gonna give us you know just an undefined value but you kind of get the point on that so anyways this has kind of been it on maps I hope this example helped illustrate when you might actually use a map I know this seems kind of complicated but it's really not that far you know you have to kind of understand what these methods do and how you actually use them properly I said anyways that has been it for maps if you guys enjoyed make sure you leave a like subscribe to the channel and as always let me know what you want to see from the rest of this javascript tutorial series