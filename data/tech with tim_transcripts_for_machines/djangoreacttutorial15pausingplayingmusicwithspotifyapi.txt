hello everybody and welcome to another react and django tutorial video in this video we are going to be implementing the play and pause feature so allowing users to play and pause the current song and then the next video we will get to actually skipping the song which is a little bit more complicated but nothing crazy compared to what we've already done in this series anyways another congratulations to anyone who is still here i do apologize i know i've been going quickly and i know there's a lot of stuff that's not getting the full detailed explanations but just in the interest of time i really can't explain every single line this will literally take me hours upon hours to get through simple stuff so i kind of have to assume that you guys have a basic knowledge anyways i hope you're enjoying the project again feel free to customize it as much as you'd like and leave any comments with any feedback you guys have i'm always open to you know listening to you guys and trying to improve my teaching style and all of that so anyways let's jump into this video what i want to do now is work on getting that play and pause button to actually work properly so if i go now to this site we can see that the pause button is here and actually let me just pause uh a song this is a good song to pause and you can see this changes to play right so it actually does indeed work the icon is updating but now we need to make it so that when we press this it either pauses or plays the song so let's do that we're going to go to what is this here our views.pie file and we're going to set up two views one for play song and one for pause sock so let's say class pause song let's say api view like that and then inside of here we'll define put we'll say self request and then an optional format which is equal to none now the reason i'm doing a put request here is because the request we're going to send to the spotify api is a put request so it makes sense to kind of mirror the requests on our api and that just generally makes sense because when you send a put request you're typically updating information so we're updating the state of the song anyways the first thing we're going to do inside of here is we need to make sure that the user who's sending this request actually has permission to pause or play the song so we're going to get the room code so we're going to say room code is equal to self dot request dot session dot get room underscore code and then we're going to say that the room is equal to room dot objects dot filter and we're gonna filter for the room underscore code equal to sorry not room underscore code but code equal to room underscore code all right so now we have the room code or the room and we'll index that at zero actually and the next thing that we'll do is we'll check whether or not the guests in this room are allowed to play or pause the song or if the current user is the host of the room because the host can do anything right so we'll say if self.request.session.session i guess this should be key session underscore key is equal equal to room dot host if that is the case or if room dot guest underscore can underscore pause then what we will do is we'll call function which we've yet to write called play song we'll pass the room.host in there now we'll write this function in one second but let's return a response here this is uh successful right in the situation where we can actually pause the song there is a blank response and we'll just simply say status is equal to status dot http underscore 204 underscore no content because there is no content after you play the song we're just simply saying yes this was successful we don't have any content to give back to you now if that's not successful we'll return a response and this response is just going to say forbidden like you don't have the permission to do this so status is equal to http underscore 403 underscore uh sorry this is status dot i was wondering why the autocomplete wasn't working and then four bit so again we're just saying if they are allowed to pause and play the song so if this permission is true in the room or if they are the host then we will simply play the song or sorry this is pause song my bad this should say paw song uh and then we will turn response says no content if they are not allowed we will return responses as 403 forbidden which pretty much tells them hey no you are not allowed to do this now we'll write this function in a second but let's just copy this because it's going to be very similar for play song in fact this is actually going to be literally identical um except instead of having pause song we're going to put play song so i was thinking for a second that it might make sense to put this all inside of a function but then i was thinking well we need access to the response we also need access to the self keyword so even though this is a lot of repetitive code which i don't like to usually do we're just gonna leave these as a as two separate views so i had my pause song just copied it now we're gonna put this as play song and literally the only thing we're gonna change is this function here that just says play song so exact same permissions it's doing the exact same thing except we're just going to call a different function so now that we have this let's go inside of utils.pi or util.pi i guess we could have called that utils and let's define a function called play song and pause song so we just need to take a quick pause before we continue and thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 110 coding interview practice questions that range in difficulty from easy medium hard and very hard this is genuinely one of the best platforms to use to prepare for your interviews it's the reason i was able to get a job at microsoft and at shopify and also the reason i'm able to work at algo expert right now so that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform so for play song what we're going to do is say define play underscore song we're going to take inside of here a session id this is going to be the host just like same thing here with execute spotify api request and all we're going to do is simply actually return the execute spotify api request of the session underscore id and the end point we're going to hit for the play song is simply player slash play right pretty complicated and then we're gonna say put underscore is equal to true because this is actually a put request all right so now that we have that let's just copy this and we'll do the same thing for pause song except again you can imagine that the only difference here is going to be rather than play this is going to say pause and this is also going to be a put request and these there you go we are done we now have the play song and pause song function so those are working this is all good now what we need to do is simply set up a url for both of those views that we just made so pause song and play song and then use them from inside of our our component so let's go to urls.pi and let's make this so we're going to say path we'll just call this one uh pause we could do pause song but it's fine we'll stick with pause and then this is going to be pause song dot as underscore view then we'll do another one this one will be play and then we'll say play song dot as underscore view okay perfect and that is all we need for that all right so now that we have that uh we obviously want to start testing these out so let's go into our music player.js and let's hook up these buttons now so they actually send this uh request to our api which can then send the request to spotify now in case some of you are wondering why we're not just directly sending the request from our front end to spotify rather than always doing it from the back end you want to do this from the back end because we're using a token right we have our access token and our refresh tokens and those tokens we need to store on the back end because we can't have them exposed on the front end otherwise someone could steal user information right so this is just a kind of a security thing whenever you're dealing with apis and access tokens you always want to be handling any of those requests on the back end so that's why we're doing that we're sending kind of like a dummy request from the front end to the back end and the back end is sending the real request which is actually kind of doing the real work right sending the thing to spotify and before i get ahead of myself i'm sorry that i'm kind of going all over the place right now there's actually a small error that i just remembered we need to fix we need to go into spotify views dot pi we actually need to go to refresh spotify token oh sorry that's in util.pie my bad uh let's go into util.pi not view stop pi inside of refresh spotify token we just need to remove line 62. so this line i guess i'll leave it up for a second was trying to get a new refresh token from this response where we pretty much sent a refresh token asking for a new access token now i forgot the fact that we actually don't get sent a new refresh token or refresh token stays the same so this line will actually cause an error when we do try to refresh our token so we just need to remove that line so now when we pass refresh token into update or create user tokens it will just pass the same refresh token so all is good we're just not going to be passing the value none into there essentially which is what was happening before so hopefully that's clear but just fix line 62 again code will be linked in the description okay so now apologies let's go back to musicplayer.js and let's write a few functions that can send a request to actually pause or play this song now again we don't really have to check for any like permissions on the front end here we can just try to send the request to the back end and if it works we had permission to do that if it doesn't work well we just didn't have permission and just didn't work so let's write two uh methods inside of here the first one that i'm going to write is going to be called pause song and these methods are both going to be very similar and then we'll write play song like that now inside of pause song what i'm going to do is say const request options like that is equal to the first key i'm going to have is called method we've done this many times before this is going to have the string put and the next key i'm going to have is going to be headers and this is going to say as the first header here content hyphen type and this is going to be equal to the classic application slash json okay that's all we need for request options there's no payload or data we need to be sending then we're going to fetch the slash spotify slash play or slash pause for pause we'll pass the request options and that's actually all we need to do we don't really care if this gives us an error if it tells us that it's forbidden if that's the situation it just won't work now we could pop something up on the screen and tell the user like oh you can't do that that's not allowed i'm going to let you guys handle that if you'd like to do that for this tutorial i'm just going to not do that because we don't really need to and then for play song we're gonna do the same thing except we're just gonna change pause to be play and well that's all there is we have pause song and we have play some all right so now that we have that in theory this should just work so let's go here let's actually refresh notice that we are indeed the host and also just just so you're aware you saw there kind of lagged for a second uh and then it wasn't showing all of the information about the song like here for example right that does happen uh and in the situation where we just don't have information about the song this player will just be blank right you'll just see the icons and you'll see a little bar if you want to fix that you can make the default state store like a default title that says like no song playing or something like a default album cover like you can do that if you want but i'm not going to do that for this series anyways let me try to pause this and let's see if this actually does work doesn't look like it did and this reminds me i always forget to do this we have these two functions defined but we're never calling them so what we need to do is actually call them so let's hook up our icon buttons now so they are actually calling these functions so on our first icon button i'm going to define an on click this on click is going to be equal to an arrow function and this arrow function is simply going to call this dot and i guess this reminds me that now the function we're calling is going to depend on whether or not we are playing the song right so if we are currently playing the song if it is in play mode then we need to call the pause the pause function right or the pause song but if we are paused then we need to call it the play song so that means that we just need to write something that's a little bit more advanced here nothing too crazy we're going to say this dot props dot is underscore playing and then this will be question mark so if that is the case then what we will do is we'll call this dot i believe this should be pause song otherwise if that's not the case we'll call this dot play song like that so i think that's all we need for this on click now for the skip on click we will we'll do that later because we haven't yet handled the skipping but let's see if this works now okay so let's refresh and give it a second okay loads it up let me pause and notice that it does actually pause you can see the bar is no longer moving on my spotify is actually paused and then if i press play there you go the bar starts moving and it plays the song now of course when you guys do this you'll actually hear the music so it'll be a lot more engaging and fun than what i'm doing here because i can't play any of the music but that is how you get the song to play and to pause so with that said i'm actually going to leave the video here in the next video we're going to handle the skip button and then i'll kind of talk about what we're going to be doing to conclude this series because we are almost done so if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another youtube video