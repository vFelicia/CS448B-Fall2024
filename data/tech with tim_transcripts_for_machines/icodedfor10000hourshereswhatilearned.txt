they say it takes 10,000 hours to feel like an expert in any field and although I don't know if I'll ever truly feel like an expert I have reached that goal and I've learned a few things along the way that I want to share with you now the first is that coding or being a developer in general is really all about thinking now yes it's important to understand the language different Frameworks tools Etc once you get past that point what really makes you a great developer is your ability to problem solve and to think critically what you'll end up doing as you get better and better and you learn mult multiple different languages is you'll realize that all of these things you've learned are simply tools that help you achieve a goal and solve a problem you should always pick the best tool for the job and to be able to do that you first need to understand how to break down the problem and how to solve it into a series of steps that you can then translate into code now the best example of this is these famous data structures and algorithms problems these can be solved in pretty much any language or any text stack and the difficult part is not actually writing the code it's figuring out what you need to code what you need to write down now I'm sure many of you have experienced this before you'll open up a code editor and you'll say okay today I'm going to build this project the thing that's holding you back is not your ability to write the code it's to think about what code you need to write and to break down the problem into enough small sub problems that you're actually able to solve it so I would say if you're a new developer really focus on your critical thinking and problem solving skills there's a lot of ways to practice that but a lot of times it really comes down to just sitting in silence having a piece of paper in front of you and just thinking about how you solve a problem now I know a lot of you watching this may just be getting started and you don't even have 10 hours of practice under your belt now if that's the case I'll let you know that python is a great language to get started with and you can learn more about it from this completely free introduction to python resource from our video sponsor HubSpot this resource is designed for marketers developers and data analyst it goes over what python is the main functions and methods coding best practic and the standards you need to know when writing in Python it also covers some Advanced python features and I've left a link to it in the description so you can check it out completely for free now as many of you know python is a super popular language and is great to learn even if you're not trying to become a professional developer definitely check out this guide and you'll be amazed at what you can do with even some basic python knowledge now this resource and tons of other are provided completely for free from our video sponsor HubSpot massive thank you to them and make sure to check this resource out from the link in the description now the next insight to share with you is something that I unfortunately learned as I got further and further into my journey and that is bad habits compound it's very easy when you just start out programming to just want to get something done right to just actually solve the problem get something in your IDE and run the code now that's totally fine but what will end up happening is you'll build some really bad habits and be doing things with bad practice that you might not even realize are wrong and then you'll get to a phase in your career where you've been doing doing this so long and so often that it's really difficult to reverse it so a few examples of this are just using good variable names when I first started out I never got that tip no one ever told me just use really detailed variable names this is the way you should name them Etc so I constantly use variable names like x y z W1 W2 all these really abstract and ambiguous names and when I eventually started actually working for tech companies and doing professional jobs that was a huge comment that I constantly got and from that that point forward I had to really consciously think about changing that habit whereas if I just had started right from the beginning using good variable names it wouldn't have been an issue it wouldn't have been something people commented on and I would have just not had to consider it because I always wrote code that way another thing is simply typing if you're just getting started out right now I highly recommend learn how to type properly before you start doing it every single day for eight hours it's not something that I did and I still to this day am really limited with my typing ability because I just had a really really horrible form and I've never really been able to correct that up until this point the next thing to touch on now is environment having coded for over 10,000 hours I've worked in pretty much any environment you can imagine and I can tell you this is the number one factor at least for my productivity when I'm able to have an isolated environment in this case maybe an office right a separate room where all I do in that location is code I get so much more done probably two or three times the amount of work as opposed to when I have a place where I'm doing a bunch of different things in that area so to give you a concrete example previously you guys saw I had a really nice setup had a great office had sound panels all of that kind of stuff when I stepped foot into that room it was incredible how much work I could get done I had the best chair the best keyboard the best computer I invested as much as possible in my my equipment and my environment to make sure I'd be comfortable and it would be a place that I actually want to go into and work and I also knew as soon as I crossed that barrier I'm going from Leisure mode to work mode now I'm actually in du buy I'm moving here I'm going to make a video about it later I'm currently in an Airbnb which is a tiny little studio and I don't have an isolated work environment already I've noticed that my productivity has gone down I don't want to work as much it's not as comfortable it's not what I'm used to and it's really just tanking and even changing my motivation so it's something that I definitely recommend considering try to set up as best as possible an isolated workspace I know for everyone it's not possible and if you can make investments in good equipment that you're going to have with you forever I promise it's worth it and I know for me it's really changed the way in which I work so the next thing to discuss here can kind of tie in with your environment and this is that it's all about deep work you are never going to get anything real done unless you're able to commit large blocks of time where you are completely focused and you are just dialed in you're in the Flow State and you are only writing code the times in my life where I felt the most productive and gotten the most amount of work done is when I've done five or 6 hour long coding sessions now I know not not everyone here is capable of doing that it's definitely fine to take breaks but what happens for me at least is I'll start to build a mental model of the code and of the project I'm working on in my brain as soon as I have that built which usually takes a minimum an hour of actually doing coding work I can get stuff done so rapidly because I don't need to keep going back and referencing things and I already know exactly what I need to do in my brain however if I'm distracted if I have to pick up the phone even if someone just walks by my room and I hear too much noise that can completely throw me off and force me to pretty much restart that deep work process so it's really important that you are putting yourself in an environment where you're able to do deep work and whatever that means for you you want to focus as much as you possibly can where your entire frame of mind your entire thought process everything you're doing is focused on your computer focused on coding and focused on the project I know it sounds intense but I promise you if you want to be productive and you want to actually get a lot of work done that's what you need to to do there's no way you're going to become a great developer by just doing 30 minutes a day or 45 minutes a day you have to put in those large periods of time where you are deeply focused now my next insight for you is to not reinvent the wheel before you just go out there and start building something I highly recommend do a little bit of research and get some context on the problem that you're attempting to solve chances are someone else has probably solved this problem before and even if you don't reuse their solution it's great to understand what they did why why they did that and then come up with the pros and cons and if you can potentially take any of that insight into your own project this is something I didn't really do very much when I was kind of in the 2,000 3000 hour range of development this is when you start to get pretty good you build a bit of an ego and you start to realize hey I can just build anything I want so I would go out there and just build all of these things that would cost me a ton of time that I wouldn't really learn that much from that have already been done before if I had just spent even 10 minutes doing a bit of research figuring out if this had been done before and at least taking the same approach or considering those approaches it would have saved me a ton of time and I would have ended up with better quality code and a better quality project so please do a little bit of research and remember that most things you're trying to do have probably been attempted before and you can get a lot of information by trying to find those Solutions now the last one here is something most of you probably know but I think it's worth reminding you of and this is that you learn so much more from other people having a coach having a mentor even just having someone review your Cod or that you talk to once a month can share with you so much insight and information that you never could have obtained yourself or if you could have it would have taking you just exponentially longer now I think as a developer it's really easy to want to isolate yourself to maybe be more introverted just want to stay at home learn something yourself be on your computer and that's what I did most of my kind of early journey I didn't really have any mentors I wasn't a part of a community I wasn't really reaching out to others and because of that it took me a really long time to get good at a lot of skills that I could have mastered much quicker if I had someone just even guiding me in the right direction or sharing with me some bits of tips and advice that I now share on this channel I would have become a great developer much faster and it's one of probably the biggest regrets that I have that I didn't really try to find that resource so I highly recommend try to find other people that you can work with really lean into them try to get as much advice and information from them as you can and if you're able to work with a more experienced developer you'll be amazed just even watching how they work what you're able to pick up and learn this was the big Revelation for me I worked at Microsoft I had an amazing Mentor we didn't even do that much work together but maybe two or three times a week we'd kind of hop on a call and we'd write code collaboratively and in those few periods I learned more than I could have learned in months and it's still something that I carry with me today so with that said I'm going to wrap up this video here I hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and I will see you in the next one oh