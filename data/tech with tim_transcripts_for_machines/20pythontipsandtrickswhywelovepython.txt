in this video I'll be showing you 20 Python tips and tricks that let you write faster better and cleaner code these are some of the reasons that people love Python and I'm gonna start us off right away with actually what's considered an easter egg in the python language which is what happens when you import the module called this when we run this it actually brings up what's called B's data Python which I would encourage you to read as we get into the next 19 tips and tricks a quick disclaimer that these tips come in no particular order and random more complex tips will be scattered throughout the video also I'm gonna be using Python version 3.7 for this entire video so if anything's not working for you make sure you're on that current version I'll also be going very quickly so don't feel bad if you need to pause or rewind the video to catch up with what I've done and that leads us to the first tip here that I'm gonna show which is actually how to create an enum in Python now this is more of a simulation than an actual enum but what we can do is create a class which is the name of the enum that we want in this case I've called it enum and then we can list three variables beside each other so in this case I may be Oh Tim bill Joe and set that equal to the range function in Python what this will do is allow Tim to be 0 bill to be 1 and Joe to be 2 so range 0 1 2 all the way up to 3 but not including 3 if we want to Tim to start at the number 1 then what we could do obviously is change the range function to be 1 for this works just like in a for loop if I want to access the variable in Unum what I can do is do I am Tim like that and obviously we can check their comparison with the value 1 and see that that is equal to true this next trick I like to call multiline assignment essentially this is a property of Python that allows us to assign multiple variables in the same line with one equal sign what you can do is you can do something like X comma y equals 1 2 comma 4 and obviously now if we go ahead and decide to print out X Y we can see that we get the values 1 4 what we can also do with this obviously is have more variables so something like X Y Z equals 1 4 7 run not there's nothing wrong with that and then what we can actually do is use this to decompose things like tuples and lists so if I have X Y Z so 3 variables and then I have 3 variables inside my topple so 4 5 6 like that we can decompose the tuples so that is 6 Y is 5 and X is 4 this works the same with lists if we do it like that and we can see when we run that there's no problem this next trick is called f strings and it personally saved me a lot of time when dealing with strings the program above we can see prints out hello my name is name and I'm 8 years old these are two different ways to do this just to show you the difference between an F string so if we don't want to deal with string concatenation or using the commas inside of a print statement what we can do is use an F string so I'm gonna say st is equal to and simply write the lowercase or uppercase letter letter F in this case it doesn't matter I'll write the lowercase letter F and I'm gonna say hello my name is and then inside of curly braces I can actually embed a variable or an expression directly so in this case if I go ahead and print out the value of st we can see that we get hello my name is Tim and of course if I wanted to embed multiple variables I would do multiple sets of curly braces like this the nice thing is that I can actually add expressions directly inside of here so I could add 10 to Tim's age and then of course what I can do is change this to an uppercase F and it makes no difference so that is f strings note these only work in version Python 3.6 and above they are a more recent addition to the Python language now many times in Python when we're looping through list we want access to not only the index or the position in the list but the element that's at that position as well now the standard way to do that would be something like this for I in range the line of X print I print X I which gives us the index as well as the value at that index now in Python there's a way to avoid this just keep in mind with the output is here so 0 2 1 3 2 4 3 5 what we can actually do is rewrite this loop using what's called the enumerate function which allows us to access the index and the element at the same time so what I can do is actually say for ie where e stands for elements in in this case enumerates X and what I can do now is print I comma E and we'll see we get the exact same output so what innumerate does is essentially pair every element in our list with the corresponding index so we can loop through and have I and E and access both of them directly from the for loop without having to do something ugly like X I and assigning that to a variable this next trick is called the zip function and it's extremely useful when you want to access elements from the same index from multiple lists look at this example here we can see that we have a series of names a series of ages and some different colors obviously tim is 19 his favorite colors blue bills 64 favorite color green you get the point that's how they correspond and when we print this out with the for loop that we have we get Tim 19 blue bills 64 red Jo 34 green that's great but I don't like having to write names I ages I fav color I every time I want to access something so what I can do is actually use something called zip what the zip function does and I'll start writing it here is create pairs of elements from lists so we can do the list representation of the zip of names ages and then in this case fav underscore color and have a look at what that is so that's Tim 19 blue bill 64 red Jo 34 green so it creates tuples of pairs notice that 76 was omitted because the length of this list is longer than the minimum length of all of the lists that we passed in so in this case it was three so we omitted 76 now of course we can use zip to actually iterate through so we can iterate through zip with a for loop so we can do four in this case top in and not range we'll just do zip then we can print out the top and you'll see we have those same tuples that we had before just on there online so Tim 19 blue bill 64 green Jo 34 green I just messed that up but that's alright and of course what I could do as well is do name age color like that since this is a tupple that it's returning and then simply prints out name age color and now we don't get that tupple yet Tim 19 blue bill 64 red Jo 34 green this next trick is called help and it's extremely useful for when you want to look up the documentation for specific modules methods classes anything like that so what I can actually do is go ahead and write the function help simply put in some kind of object or class or something inside of here and run it bat on it now if we go up here and we actually look at what we get we can see we have help on list in module builtins and then it shows us all the documentation that's relevant to whatever object we put in here some things won't work inside of help but most of them do for example we can even put something like a module inside of help so we can import OS and if we go ahead and get help on OS it's gonna be quite long oops if I don't accidentally create any window but if we scroll to the top we will see that we have help on module OS a name a description and all the documentation comes along with the module OS this next trick is called the dev function and is extremely useful for when you want to look at the attributes or methods of a specific object so let's go ahead here and create a blank string called X and let's run the dirt function on this and see what out will we actually get so note we do need to print the value because it simply returns a string but we can do print dur X and when we look here we actually get sorry not a string but a list of all of the attributes and methods that are associated with this object which is a string so we can see that we have something like index is digit is printable all of those and of course we can run this on other things as well so even like an integer like that we will get abs add and and you can see all the hidden dunder methods of a specific object I find this extremely useful when I want to import modules so something like Q so if I import Q and I want to look at Q dot Q so I can do that and I can see that this has Q sighs empty full gets and now I don't actually go to the Internet to look up with all these attributes and methods are this next trick is called list comprehensions what I'm gonna do to demonstrate them to you is just write some complex list comprehensions and you guys can kind of figure out exactly what they're doing so essentially what a list comprehension allows us to do is populate a list within the definition of the list so I can do something like I for I in range font print the value of X down here and we can see we get 0 1 2 3 4 now this is a simple list comprehension where we simply have one element we have an iterator here or for loop whatever it is and then we have the element that just populates for every loop now of course I can add some if statements here as well so I can do something like I mod 2 equals equal to 0 which means now we only get even numbers inside of our list I could actually create nested lists if I wanted to so I could actually do something like a list here and instead of putting high I can just do that and now we get all these empty lists I could populate the list myself like that so is your 1 or I can even put another for loop in here so like for J so we'll just do something J for J and range I this is kind of a cool one oops not high s just I see we get blank 0 0 1 0 1 2 0 1 2 3 so we can create some cool kind of iteration patterns like that of course we can use zip as well which is one that I like to showcase so I can do for I in range zip of in here we'll do range five and then the range of actually five ten and then here instead of just I what we'll do is XY and then we can make our own pair here of XY like that when we print this out we get zero five one six two seven three eight four nine of course we could just print X or just print Y if we wanted to there we go we get X we get Y here we could of course add another if statement at the end so that we filtered these out and that is kind of the basis of list comprehension now since this is a good example for it I'll show you the next trick which is simply the anonymous variable so we can see that up here we have X but we're not actually using X in this context so there's no point in really having this variable here in fact anything it's kind of just like why is that there we don't need it it's not actually storing we're not using that so what we can do is replace that with what's called an underscore which is just the anonymous variable what that means is this is just simply a placeholder it does not store anything it doesn't get assigned anything it's just here we can't access it I can't say like print out the value of underscore and get a value it's just here to say hey we don't want to put a value here but I need to so I can access Y so let's put it there now the best example of when we should actually use this as something like this so for underscore and range five print let's say hello the reason we do that is because again this loop does not depend on the iterator variable so we don't actually need to define it here so we can just put in underscore it just kind of common practice doesn't really matter if you put this or not like you can put in I and it doesn't make a difference but the underscore just looks a little bit cleaner and it tells whoever's reading your code that we do not rely on that iterator variable whatsoever this next trick is called dot join it's extremely useful when we have a list of words and we want to concatenate them into one strength essentially let's say we want to separate all these words by commas and add them into a string what we would need to do is concatenate all of them use a for loop something like that but if we have dot join all we need to do is do something like this dot join words now what this does is take all of these words and concatenate them with this string whatever is on the left hand side here before this dot operator as the separator so if I run this we can get hello my name is Tim I decide to put a comment here we get hello comma my common name comma is and you know we can go ahead and keep doing that with any separator that we want we can do two dashes that is how dot join works pretty useful on and a pretty just cool trick to know this next one's a fast one simply a way to reverse a string pretty easy all you have to do is do the name of the string in a switch which is st and then negative one what this does is use the slice operator to essentially create a new version of the string that is reversed version of this so just note this doesn't do this in place this makes a new version of the string that's why this works when I print it out so that's cool that's how you reverse a string nice fast easy shortcut alright time for another short one this is a cool Easter Egg in Python import underscore underscore hello underscore underscore run that you see we get hello world that was that trick this next trick can be extremely useful it actually tells us the amount of bytes that an object in Python takes up in memory so what we can do is import sys which is a built in module and Python I believe that stands for system and then what we can do is create some variable so let's say something like x equals 100 and then print the sys dot gets sizeof and in this case x so here we can see that gives us a size of 14 bytes to represent the integer 100 or just notice something interesting when I type hello we get actually 30 bytes to represent that we want to create something like a list let's do one two three four like that that takes 52 bytes so this is cool you can check how many bytes any object in python takes up in your program okay so this next trick is pretty cool it actually allows us to get the most frequent element from a list in one line using a few builtin things in Python so we can actually do is print the max of the set of in this case X with the key equal to X dot count now what this does is say okay we'll pick the max element from this set but we're gonna do is count that element from this list X every single time so what you do for the key here is put a function note this is a function typically X dot count has two brackets but we just want to put the actual function itself we don't want to put the two brackets and what this will do is simply call X dot count with the value X which is from the set of X and will return to us the maximum element based on that key so with the max you can actually make a key of whatever you want let's say you have pairs right so you have something like x equals in this case like one two three four and you want to pick the maximum pair based on the second element well then what you would have to do is use something called lambdas as the key and I'm gonna show that in the next example so let's just run this right now we'll get rid of X and show you what this looks like so if we can just comment this one out we'll use it for the next one we can run this and see that it gives us the most frequent element is one if I delete a few of these ones here let's go like that we see the most frequent element is two again if I get rid of some of the twos we can see that this broke because there's an S but now we get four okay now what I'm gonna do is show you how we can use something called lambdas to essentially accomplish the same thing pick the largest element from this list when these are pairs right so to do this we're gonna print out the max of X so the maximum element from the list X by using the key that is equal to lambda Y so not Y u y1 what this says is let's pick the maximum element from the list X what we'll do is pass each element which are gonna be these pairs rights of one two three four one nine so these pairs to this function which is lambda Y which says okay this is an anonymous function that takes a parameter Y and then we'll return the Y value at index one which means we will sort these these pairs and pick the maximum one based on the farthest right element now if we wanted to do it based on the first element in this case we get the middle pair right we could do zero so if we look at this now we get 3 4 because 3 is the largest first element if we change this to 1 we get 1 9 because we're looking at the furthest right element of course this works if you have other pairs as well so you have like 8 10 we can do too and now we'll pick this pair like that and that is how you use lambda as a key inside of the max function this works for things like sorts and many other things as well alright so this next one is another Easter egg this is actually what happens when you import the module called antigravity like that now this one is kind of cool if you run this it actually redirects you to a page you saw my web browser pop up there that has a comic about Python so you can go ahead and read through the comic I'm not going to do that but again a cool easter egg and some nice things to see in the Python language alright so this next one is a little bit more practical this is called string multiplication essentially what we can do is multiply strings by integers in Python so do that all we do is write something like a print statement some string a multiplication sign and then multiplied by some integer run and we can see that what this does is simply concatenate that string to itself that many times so if we go ahead and put a separator like a hyphen there we can see we get all of these things being concatenate together separated by hyphens because obviously that is what's at the end we can add to this because this is gonna be string so we could do something like why you times where's the asterisks 800 and now we get this massive string in the console and we can see that that works and this is string multiplication all right so this last tip and trick is called the splat and unpack operator a little bit complex to explain in the time frame that I'm gonna go for but I will show you a few examples and at least introduce you to it so you can go look it up and learn more about it so essentially the way that these splats and unpack operator works is it essentially takes a list tupple some collection and unpacks it into keyword or regular arguments now the way that we can do this at a common example is doing something like star x in a print statement what this does is simply print out each element of the list beside each other separated by space because what this unpack does when it precedes a list like this is it takes all the elements in the list and passes them as a parameter so the translation of this code would literally look like this print 1 2 3 4 5 because it just removes kind of the list and passes these each separated by commas now this is why you'll see this used quite often in functions something like which is called func and we'll do star args like that and then simply just print out the arguments now essentially what this means is we will take an unlimited amount of keyword arguments that's what star args stands for so if I go ahead and go funk and I do like you know 2 3 and then I print funk they're not prints right just write the funk of 8 7 6 if I could type properly like that and we run this we can see that we get 2 tuples this will take an unlimited amount of arcs now this operator actually works on dictionaries as well so what I can do is use 2 stars and this will now mean that we will take an unlimited amount of what we call keyword arguments so 2 stars means we are actually going to take a dick Neri we're going to decompose the key as the keyword and then we are going to take the value as the actual value that's passed for that keyword so that's the same thing as writing something like defined func have a few positional arguments like that like imagine those are X 1 2 3 and then we have something like y equals 6 right so it's actually defining the name of the argument itself and passing it in now I'll show you what I mean by that cuz I assume all of you are probably confused I can do something like func 2 3 and then I can actually say K equals 0 x equals 8 hey equals 10 and if I go ahead and now not just print arts but print kwargs like that we can see that it tells us this is K equals 0 x equals 8 hey equals 10 and it treats this like a dictionary says the way the args and kwargs work again I know I'm sure most you confused by what I just showed here so go ahead and look that up I do have a video on my channel but with that being said this has been MIDI 20 Python tips and tricks you guys learned something if you enjoyed make sure to leave a like subscribe to the channel and let me know what your favorite tip and trick was any comments down below