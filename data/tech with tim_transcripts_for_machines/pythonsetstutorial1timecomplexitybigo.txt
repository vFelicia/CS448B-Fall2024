in this video I'm gonna be explaining to you guys all about sets giving you a basic tutorial how they work why they're useful and why we would want to use them over a list now a set in Python is its own unique data type and it looks something like this I'm gonna say s is equal to curly brackets and I can just create a few elements here like so okay and if I go type of s you can see that we get art that's art its own data type class set now when we create a list in Python we do something with square brackets maybe one two three four five so on like this and if I type L you can see we get class list these are indeed different now what's different about them so a list in Python is an ordered collection data type it's a mutable data type a set is also a mutable data type the main difference here is ordered now a list is ordered a set is not and what that means is that if I want to find for example the first element in our list well Python knows that one is our first element it knows that fifth is our five sorry is our fifth element it knows that three is the third element it remembers this order and that's really important and that's really good for a lot of applications but in some instances we don't care about that so I'll show you if I want to get the first element I do l0 want to get the last one I do l4 right and that's great we all know that how that works now watch what happens if I try to grab the first element of my sets you say okay well you want you want one all you do is type s0 and you can see that it actually throws me an error and this is because the set object does not support indexing what that means is that this is actually not ordered so when we create this yes it looks ordered to us but within the computer there's no distinct order and where these numbers or these elements are stored they're just kind of there you can think of it it's just like a big circle and there's a bunch of random elements I don't want to say random there's a bunch of elements within the circle there's no specific order all the computer knows is if they are there or if they are not there so another property of sets is the fact that they only contain you elements and what I mean by like that is if I creep if I recreate my list if I do something like 1 1 3 4 and I print my list you we get 1 1 1 3 4 now watch if I try to do this with a set so I say s equals 1 1 1 3 4 and I print s you see we only get 1 3 & 4 and this is a property of a set it only contains unique unordered elements and that is something you really need to understand and remember whenever you're using sets unique unordered elements okay so if we try to add in the way we add to satisfy doing s dot add an element that already exists something like 3 and we print s you can see that it doesn't actually add that to our set and that's because that element already exists and this is really useful on the fact that only contains unique elements because it actually allows us to remove duplicate elements from lists so if we're given a list of saying names and say for example someone wrote down their name twice and we want to count how many names are in that list well we don't want to count lists or names that exist twice or people wrote them down twice we only want to count ones that are unique so the way we can do that is we could convert the list into a set and then count how many elements are in the set and that's a really useful way and that's what we're I'm going to show you an example of how that works later on in this file on the right here so to remove something from a set we can do s dot remove and simply give it the argument we want to remove so in this case I want to move three you can remove three print s I get one for now I just want to go over one more time the importance of the unordered part of the set if we're ever doing anything and we care about the order of our elements or we care about the frequency of our elements we're not gonna want to use a set we only want to use this set in cases where we care if data exists or if it doesn't exist and when I say data I just mean elements okay so another thing I didn't talk about is if we created a set you can actually give it different elements as well they don't through the same type singular 1 3 and that works fine just like a list just want to make sure you guys know that it doesn't have to just be with numbers it's just easier to use numbers sometimes and when we add things like if we add like negative eight and then we print s guess if we get negative eight over here one three string and it's not in the same order in which we typed it in so just to prove to you that this really is unordered and it's kind of random the way that it displays it to the screen to us it's not completely random but that's the way we can think of it for right now so why would we want to use a set then well what's the point of it we can just do the same thing with lists we could just remove duplicate elements well sets are actually really fast and the reason they're really fast is because they're unordered because we simply know if elements exist or don't exist we can actually find if an element exists in a list really or in a set really really fast so fast that it's almost constant time or you can think of it as constant time so I have to quickly go over something called Big O notation right now just so you can understand what's known as the time complexity of sets versus lists I'm gonna try to do this really basically and not take up a ton of time but it's really important that you understand this especially if you're writing any like large programs or anything that's going to deal with large amounts of data this could save you a lot of time in your programs so I'm creating a list I'm gonna say X for X in range 100 like this okay now if we wanted to see if an element exists in our list the way that we would do this in Python is we could do something like elements in L and simply this is like the Python way to do it but all this is really doing is it's running a standard for loop on our lists or saying for L in X if ei L equals equals whatever we're looking for so let's just say looking forward to make this simple oops then we're just gonna return like the index of that element so since we need the index R in before I in enumerate X return I like that okay and then looking for like this is equal to and then whatever number so let's get me do 98 okay so the way that this works now and this is fairly straightforward is we're looping through a not L or not X re L or looping through L which is a list containing numbers from 0 to 99 and we're seeing if the number 98 exists so for every element in the list we're checking if it's equal to 98 now if it is that's great we found our element and we can return that index okay the only issue with this is well what if the numbers not in the list that means we're gonna have to look through the entire list just to find out that this element doesn't actually exist now same thing if our element is one of the last elements in the list or even if it's just somewhere near the middle or even sometimes near the beginning this can take a really long amount of time in fact this takes Big O of n time which is known as a linear function right so however big X gets an X it's gonna be like the length of our list is how long it takes to find if an element exists okay obviously it depends where the element is in the list but we usually go based off in worst case scenario so saying like the element was the last element of the list starting from the end and looking to the beginning we would have to look through every single element in the list now with sets this is not how this works with sets it actually just takes one operation to be able to determine if an element is in the list so remember I set up there if we do something like what do you call it looking for in L this line is actually the exact same as this except it just gives us like a true or false value so I could say true meaning like yes we found it's in the list yeah this is the exact same as this now if I do and I create a set now and I say l equals I'll say guess we'll do s equals x for X in range a hundred like this okay and now I change this to looking for in s well this actually doesn't now take n operations this line is not the same as the line of this we're placing this with s it's the same as Big O of one which simply means constant time one operation okay so just know that whenever we're looking for things in a list it's much much much faster to either first convert it to a set if we're gonna be looking for more than one different element or if we already have a set will create a set first rather than creating a list and looking that set because it's gonna take us one operation as opposed to n now this doesn't really matter if you're looking at any things that are less than like a hundred thousand elements long because on a computer those are gonna run really fast you're gonna be able to look through that really quickly but if you're looking through lists that have like billions or trillions of elements then creating the turning them into a set is obviously gonna be a lot faster when we're looking for elements especially if we're looking for more than one okay um so I hope that kind of makes sense I know it's slightly confusing if you don't know anything about Big O notation just know that sets are really fast to find things and see if things are in there okay now the next thing that we're going to talk about here is two more operations that sets are really fast done and sets are really fast at adding things and removing things from the list so whenever you need to remove something from a list sorry what we have to do is we first have to find the index of that element so again we're gonna have to do this and then once we find it instead of returning true what we would have to do is we'd have to say well whatever L L dot and then I think you just do like remove and then whatever the index is so you do l dot remove I and I would get rid of that current index so again this takes us o n operations to remove an element now same thing if we're adding things to the list so not um not at the end if you're adding it at the end it only takes one operation but if you're adding in the middle so like if I did like a old on insert and then I inserted something somewhere in the middle well this would actually take us and operations to do unlike a set where if you do something like s dot odd this actually takes the same o of one operations to complete so I start add three this takes over one and same thing for move removing something what you said s dot removed like five this again takes o of one operations to complete and the reason again for this is because whenever we're looking for something in the set it takes oh one so to add something we simply obviously it's only I say go one because we just have to throw it in but when we're removing it we find like the index or wherever it exists in the set and then we can remove it and we can do that so quickly so that's why we would want to use the set whenever we're like trying to look if an element exists we're trying to add it if we're trying to remove it so quickly to recap I know I went through a little bit of kind of like math here and like Big O notation which might be confusing to you guys but what you want to do is you want to use a set when you're looking for elements in something so you want to see if something exists you don't care how many times it exists you don't care what order it comes in you only care if it is there that's when you want to use a set you want to use sets when you're just gonna be adding things like that are unique we're removing elements because that's really fast operation and sets are also useful for determining if you have like multiple elements or duplicate elements in your list the way that you can do that and this is a really cool trick actually it's like dupe is equal to the blend of sets okay so set of like s equal equal to the line s so say you have s and it's a list here okay and you create like a bunch of elements in here like that okay five and six and you want to see if any duplicate elements exist in s we could write a for loop and you can look through and you can see if any do because you get sort the list whatever there's so many ways to do this but the fastest way you should just simply convert this to a set and then just check the length of the set versus the length of the original like list so because what's gonna happen is we convert this to a set we're gonna say like at set s is equal to and then it's gonna look something like this and say 1 13 4 5 6 now the length of this is obviously less than the length of the original list so that means we must have had at least one duplicate element in our list and by just giving a condition like this here that's going to give us false because these links aren't the same so we know there duplicate so we actually just do it not equal to if we wanted to get a true value for duplicates existing in the list I figured I'd just show that to you because that comes up quite often and you want to do something like this and this saves you a quite a bit of time one last thing for any of you guys that are still here watching and didn't die off when I started talking about Big O notation when you convert something to a set so if you do like a set of s this takes o of n operations because what has to happen is we have to take every element in the list and add it into a set and since every time we add to a set it takes a 1 well if you have n elements of a 1 that is exactly open operations so just keeping that in mind if you're converting things to set and you want to do stuff faster than Oh N so faster than linear in just something to think about so anyways I hope I didn't confuse you guys too much um this is exactly what a set is it's really useful for finding things really quickly adding and removing and yeah so if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in the next one