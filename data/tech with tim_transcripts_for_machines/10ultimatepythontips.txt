in this video I share with you 10 simple practical and extremely useful python features that every python developer needs to know now these features save you time make your code more readable and best of all can be learned and understood in under 60 seconds so with that said let me rapidly go through these features after I rapidly tell you about the sponsor of this video well it looks like no one wanted to sponsor this video so I'll just tell you about my programming course programming expert now this is one of the most affordable and effective ways to become a software engineer it teaches go python and a ton of other topics like software engineering tools and software design you can check it out from the link in the description and use the discount code Tim I promise you this is a great platform I put months and months of energy into making it it has hundreds of practice questions a live online coding IDE a ton of practice problems and over 7 000 people have purchased it already so if you want to become a software engineer or just get better at programming check it out from the link in in the description I also have a blockchain expert course if you're interested in web 3 development so the first tip to share with you has to do with the underscore in Python many people may not know this but the underscore is a valid variable name and it can be used in a lot of different situations so look what happens when we type an underscore in the python interactive shell you see that we get an error and it says it's not defined however if I do something like x equals 2 and then X Plus 1 and then I type something like underscore you see that I get the value 3. now the reason I get the value 3 is in the interactive shell the underscore actually stores the value of the previously evaluated expression so I can actually do something like underscore plus three when I do that I get six seems very strange but this underscore always stores the previously evaluated expression so that you can use it on the next line without having to type it out again now the underscore can also be used within your program for example you see that I have some code here and I want to actually ignore the index as I'm iterating through the tuples in this list so what I do is I use the underscore as an anonymous variable that I don't actually have to access or utilize and that I won't get errors for with my linter if I have that so A lot of times if you have python linting enabled you'll get some error saying this variable name is not used well you can avoid that by using the underscore so in this case I just get the word out of my tuples as I'm iterating through them in this array or in this list now we can also use the underscore to declare private members in classes so for example if I have the class person here inside my Constructor or really anywhere I can declare a private attribute by prefixing it with an underscore when I do this I'm denoting to all the other python developers that are reading this code this should only be used inside of the class body that we shouldn't access this attribute outside it doesn't actually enforce that because you can still access this if you want but it's just a convention that we use in Python moving on we talk about Lambda functions now Lambda functions are one line Anonymous functions that are extremely useful in callbacks in this case we have a list this list contains some different areas with people and we want to sort these people by their age to be able to do that without using a Lambda or some custom callback function would be a bit challenging but in this case what we can do is say people.sort and we can pass a custom key to this sort function that is a Lambda function the way we write the Lambda function is we say Lambda we declare some type of parameter in this case we have person we also don't have to have a parameter we could just do this if we want in this case we have one parameter person then we specify the parameter and the age so person age accessing the age and now we're going to sort every single element in our people list by their ages now there's a bunch of different cases where we can use Lambda functions for example we can use it in the map and filter functions that's oftentimes where you see it but we can also use it when we want to pass a callback function that needs to be called with a specific parameter so to quickly set up an example here let's say we have Define call and we take in some function now this function we're going to call inside of here well a lot of times we want to call this function with a specific parameter and what we might have to do is past that parameter as a second value so we have param like that now to avoid having to do that you can use a Lambda function and then pass the custom parameter you want now it's a little bit hard to explain this well let's say add X Y here and then return X Plus Y what I can do is the following I can say call with the Lambda of and then this is going to be a function so it's going to be add with 2 3. now when I do this what happens is I will call the add function with the value 2 3 rather than having to do something like add and then pass the two values to three as additional parameters to this call function I'm not sure if that's making sense to you if you haven't seen that example then this probably isn't a use case that will apply to you but in a lot of cases I have to pass callback functions and I need them to include a specific parameter maybe that's in a certain scope if that's the case then I use the Lambda function to essentially wrap this function call such that I can still use as a callback with the specific parameters moving on we have the zip function now the zip function is extremely useful when we want to be iterating over or looking at multiple different lists or iterable objects that have corresponding indices what I mean by that is an example like this where we have a students list that contains names and then a grades list where all of the indices in the grades list correspond with the names in the students list in this case we know Alice has an 85 Bob is 90 and Charlie has a 78. now rather than looping through and kind of finding all of the numeric indices and matching them up manually we can use the zip function which will essentially do that for us what zip will do is return a tuple that contains all of the matching indices in that Tuple so in this case when I run the code you can see we get Alice 85 Bob 90 Charlie 78 David 92 and if we look at what we're just getting from the raw output of this ZIP object you can see that we get tuples that contain the pairings as it kind of iterates through these lists now one thing to note is that we can use zip on multiple different lists or multiple iterable objects so for example if I go here and do something like favorite colors and then I add maybe blue and red now I can zip through those as well so I'll go here and I'll zip three things and now we can do student grade and then color and I'll just pass color here and let's get rid of that come up here clear and run and notice that we actually only get two entries this time now the reason we only get two entries is zip only goes as far as the shortest list or the shortest iterable object so in this case since we only had two matching indices because we only placed two colors here we only got two entries in our zipped list if we include another one then we would get one more and if we include one more then we would get all of the different values so just keep that in mind you're always going to be producing a list of tuples or a zip object of tuples that contains the minimum number of elements out of all of the different objects that you're zipping the next tip I have for you is to use the dot get function whenever you're trying to access the value associated with a key from a dictionary now many of you have probably seen this error before but if I go to my word counts dictionary and I try to access a key that doesn't exist so let's say we run the code here you see that we get an error and it says key error now the way that we can avoid getting that error is by using the dot get function and providing a default value in a lot of instances what people will do is check if a key exists inside of a dictionary before attempting to access it to make sure they avoid the key error however what we can do is something like this where we just use dot get What DOT get will do is attempt to get the value associated with a key but if that key does not exist it will return whatever default value you provide as the second argument to this function so in this case I attempt to get the keyword and if the keyword does exist I get the value associated with it otherwise I just get zero this means I can avoid checking if the word key exists inside of this dictionary before I attempt to access it so if we look here and I run the code you can see that everything is fine and we're counting all of the elements that exist inside of words without having to check if the key exists first before we increment that key hopefully that makes sense super useful I pretty much use this every single time I'm trying to access the key associated with a dictionary so the next tip I have for you is to use the set default function for specific scenarios related to dictionaries Now set default Works similarly to dot get but it actually assign finds a default value as well as returning that value to you if a key does not exist so have a look at this example here we have a student's grades dictionary now this is going to contain nested dictionaries so what we do is we attempt to get the math grades for Alice okay so we say student grids dot get Alice and then we return a default value of a dictionary if the Alice Key doesn't exist in this case it doesn't exist so what happens is we return the dictionary we then look at that dictionary we say math grades at math is equal to zero now the issue here is that we don't actually modify what exists inside of student grades we just modify what was returned as the default value because Alice didn't exist we don't assign that inside of student grades so when we print out student grades we see that no value has been added into the dictionary for the key Alice or Alice doesn't even exist in there however when you use the set default method this is different what this does is actually assign the default value and then return that to you so so you're referencing the same object that now exists inside of the dictionary so here when we say English grades is equal to studentgrades.set default what it does is check if the Alice Key exists if it does just Returns the value associated with it if it doesn't it assigns the key Alice equal to the default value dictionary then Returns the default value dictionary to us so we have the dictionary here we then say the dictionary at English is equal to 85 and now that actually modifies what exists inside of student grades so when I print that out I get the key value pair Alice and then the nested dictionary that we modified from the default value the next tip I have for you has to do with the print function now the print function has some added functionality that most people don't know about for example we can actually pass to it two keyword arguments that change how it works so first let's look at a default example so we have a numbers list here and what we do is we unpack this list using the asterisk operator which essentially passes all of these individual elements as if they were individually passed in to the function so writing asterisk numbers essentially does this it just passes them as individual arguments into the function where we then know they're going to get printed out separated by a space by default so the default behavior of the print statement is print all of the different arguments separated by space then print the new line character which moves us to the next line for the next print statement so this here is going to work just like normally right whereas here what we do is we actually specify a different separator so you can pass sep equal to and then any string that you want and this will change what your separating elements in the print statement with for example if you don't want any separator you just make this an empty string and now you will not have spaces between your elements if you want to have a dash you put a dash here like I have notice as well that we can also print out something with end now what end will do is change what you're printing at the end of the print statement seems straightforward by default end is equal to a backslash n or to a carriage return which will move you down to the next line in this case when we remove that backslash n we're not automatically going to move to the next line and what we have to do here is compensate for that by printing two backslash ends to really separate the set I'll just show you here if I run the code so let's clear this and run kind of what we get here we get the default print print with different separator print with different end character notice this is now the end character that's happening after one two three four five and then print with both the separator and the end character like we just did here so very useful when you want to have some more advanced prints and this can kind of avoid you having to do an advanced for Loop where you're going through and checking the indices and printing out different separators just use the sep and end option in the print statement the next tip I have for you is to use negative indexes when applicable now negative indices allow you to access the last elements from some iterable object especially when you're using the slice syntax this is super useful because you don't need to know the length of some structure to access the last element the second last element Etc in this case I have negative one that gives me the last element in this list if I do a negative two that's the second last element you just start from the very back and go towards the beginning in the opposite direction now as well as just using it to access an individual index we can use this to remove the last element so quite useful if we want to create a slice of this here then I do colon negative one that's going to give me all of the elements except the last one and kind of pop that off for me what I can also do is use this to reverse a list or reverse some structure so if I do colon colon negative one what that actually is is a shortcut for reversing something so if I do this operation you can see we get the Reversed events to prove that to you if I run this you can see we get all the outputs here feel free to pause and look through them the next tip I have for you is to use the else statement associated with a for Loop or a while loop now oftentimes when you're looping through something what you're attempting to do is find something right there's some Target element or something that you're searching for now if that's the case you typically break out of that Loop and that indicates that you found what you're looking for now most people will create what's known as a flag which is essentially a Boolean variable that they'll set to True manually if they found what they're looking for however you don't need to do that because we have this else syntax so here what I can do is Loop through a bunch of numbers if I find the target element that I'm looking for I can break and that means I will not trigger this else statement however if I don't find what I'm looking for automatically after my for Loop python will enter the else statement printing that we did not find what we're looking for so whenever you want to see if you didn't break out of a loop use this else syntax now the same thing works here with our while loop if we don't break out of the while loop so essentially once this condition becomes false and we didn't encounter a break then this else statement will run allowing us again to determine if we broke out or not or found the element or the Target that we were looking for the next tip I have for you is a super simple one but this is to perform inline swaps now in Python you can actually swap the value of two variables or just assign or create multiple variables on the same line using comma syntax so what I can do here is to find my two variables X and Y if I want to swap their values I can just say x comma Y is equal to Y comma X seems obvious but in a lot of other programming languages you would actually need to create a temporary variable to store the value of one of the variables you're swapping which just kind of is messy syntax involves three lines of code and can be a little bit confusing so instead if you just use this syntax right here you can swap the values in one line now you also can assign multiple values in one line so I can do something like X Y is equal to 100 200 I can assign three values four values five values as many as I want pretty useful thing and last thing to show you here is you can actually decompose different structures using this so I can do something like X Y is equal to 1 2. now X will be equal to one y will be equal to two if I make this a tuple same thing will work x equal to 1 y equal to two something useful that you may not know alright so the last tip I have for you is the ternary operator now this is essentially an inline if else statement that allows you to assign different variables without having to write out the whole kind of if else structure so if we look here we can see that we have a more complex example of using this but we have poor if age is greater than 60 or smokes otherwise we have kind of this whole thing if we put this in a set of parentheses good if the age is less than 30 else fair so what we'll do doing is assigning poor good or Fair on one single line which avoids us having to do this nested if else structure which you're seeing right here don't really know how better to explain it essentially we have what you want if the if statement is true that goes on the left side then what you want otherwise goes on the right side so you have whatever's on the left here some if statement you then write else and then you can put anything you want here on the right so I could have just put Fair like that but instead I've put another ternary operator that's what this is referred to that now goes into the exact same thing so I've kind of parenthesized it so you can see but now we're saying good if age is less than 30 otherwise fair so we'll now evaluate good or fair if the condition is not poor okay hopefully that's making sense but that is the ternary operator and that is the last tip I have for you in this video with that said I'm going to wrap it up here I went nice and fast I hope that you guys enjoyed this and learned some new python features if you did make sure to leave a like subscribe to the channel and I will see you in the next one thank you foreign