before we get started eating a massive thank you to the node for sponsoring this video they make it easy and affordable to host your site or service in the cloud offering nononsense hosting with plans starting at just five dollars this means no surprise fees or overages like you might have gotten from some more entrylevel hosting companies now the note else was a full API that works with tools like terraform and kubernetes making an awesome environment for development projects maybe you've used an entrylevel hosting service before well a notice you step up to powerful fast and fully configurable cloud computing anyways go ahead and sign up with the link below and take advantage of a free $20 credit using the code twt 19 all right so let's actually start coding and implementing this AI now the first step and the first thing we always need to do whenever we use neat is we need to load in the configuration file that we work so hard on in the last video and you know feed that and start working with it so we'll discuss that a little bit but essentially what we're gonna do is create two functions now you're create one function called run I'm just gonna pass in here for now and actually not another function story but it kind of looks like a function I'm gonna say if name underscore underscore name underscore underscore equals equals nice garnish per main underscore underscore and now I'm actually just gonna do some weird kind of fancy things that neat usually recommends to get the path to our configuration file which is something that we need so I'm going to say local underscore directory is equal to o s dot path dots I believe it's dirt name and then underscore underscore file underscore underscore but this is gonna do is just give us the path to the directory that we're currently in because we need to use that to load in our configuration file now what I'm also gonna do is say config underscore path equals OS dot path dot join and now what I'm gonna do is join the local directory to the name of my configuration file so in this case the name is config feedforward like that dot txt so this all this is doing is just finding the exact absolute path to this file which apparently we need and then I'm gonna call my run function I'm gonna pass it the config path now inside of my run function now I'm gonna take the config path as a parameter and I'm gonna load in the configuration file so to do that I need to have a look here actually I'm just gonna copy something in because it's kind of long and I don't really feel like typing it this is what we need to type so config and change this to config path but essentially what we need to do is say config equals meat duck config duck config we need to define all of the kind of subheadings we used in this so if you see here we have default genome we have default species default stagnation D flow reproduction and that's exactly what we defined here we tell it kind of all the properties we're setting so neat default genome neat default reproduction default species default section all of that and it assumes that we already have this here because this is actually required every time like I said before so we don't need to put like neat neat here but anyways that's what it does and then we set the path for a configuration file and it looks at that configuration file it reads it in and now we can actually use the configuration file when we start creating a population and doing all of that so next thing we need to do is create a population so for our population I'm going to say P stands for population is gonna be neat dot population and we're just simply put the config file here to generate a population based on whatever we had in this config file okay next we're gonna add what we call these stats reporters to our program here or to neat now what these do is just give us they're optional you don't have to add them but they just give us some output so whenever we are actually running the algorithm rather than not seeing anything happen in the console we'll see like some detailed statistics about each generation and about the best fitness and all of that so to do this what we're gonna say is P dot add underscore your Porcher like that and then inside here we're gonna say meet SD STD out reporter like that and then here we're gonna put true this just gives us some stats I'm not really gonna discuss what that does now we're also gonna say stats equals neat dot stat kisstixx reporter think I spelt that correctly and we're gonna say P dot add underscore reporter and then we're going to add stats like that I guess I could have just put this in here too but that's fine we'll do this I'm statistics okay awesome so this is giving us the output this is setting the population and the last thing we need to do here now is actually say winner equals P run comma 50 and we're gonna put a function here now believe it or not this is almost all we need to do to actually set up neat it's pretty minimal to do this but essentially what we're doing now is we've set a population we've load in the configuration file we've set the output that we're gonna see and now what we need to do is set the fitness function that we're gonna run this many generations so you see here obviously you know I put 50 that means that's how many generations we are going to run the fitness function that I put here now we need to talk about the fitness function what is the fitness function well the way that we determine our birds fitness is by how far it moves in the game so it actually only makes sense that this main function here is gonna be the fitness function for our algorithm or for our needs yeah I guess I need to algorithm now we need to modify this actually quite a bit to work properly as a fitness function but all a fitness function does is set the fitness for our birds so what we're gonna do is we're actually gonna put main in here and what this is gonna do is call the main function 50 times and pass it all of the genomes so like that population current generation population as well as the config file every time then what we're gonna do in here is kind of just generate a game based on all of the birds that were given all of those genomes that were given I know I know this is kind of confusing but it'll start to make sense so I'm gonna say genomes comma config as the parameters here which are required so whenever you create a fitness function for NEET you need to make sure that you have genomes and config as parameters and you can call this whatever you want some people typically call it like eval genomes or like fitness I'm just gonna keep it as what do we have this main and now we need to start modifying this function to work properly for more than one bird because remember this Fitness function is gonna take all of our genomes and it needs to evaluate all of them now we could in theory run a game for one bird at a time so we could you know like for all these birds all we do is just make a for loop and just run one game for all those birds but that's not very efficient I would like to run all of the birds playing at the same time which means we need to make some modifications so the first thing I'm gonna do here is change this bird variable to say birds and what I'm gonna do now you start changing some of the things that we had here that we're only for one bird to work with multiple birds but it's actually pretty easy to do all I need to actually do to change this is go here inside of this pipes method I just want to do one more time but I'm gonna say for bird in birds and then just indent this collision here now what I'm also gonna do is just change where it says bird X here to say birds zero dot X actually no let's not do that let's change it to bird X let's indent this but let's take this pipe X here sorry this is a little confusing now and just move this out like that okay awesome so what I've done is just said for bird in birds we're gonna check if every pipe collides with every bird we're also then gonna check if the birds have passed by the pipe if they have well we'll add this right here and that should be good then we'll still do the same thing with removing the pipe but we don't need to run that in the for loop for the birds because it's only for one pipe and then same thing with moving the pipes okay next thing we need to do here is do the same thing so just add a full loop down here so say for bird in birds like that and then this way we can check if each of our Birds hits the ground which is what this does here and we'll obviously add something to do with that later okay great so we've done that ah and I think that's almost all we need to do for that so now what I'm gonna do is actually just set up some more things at the top of our function that we're gonna need so I'm gonna set up two more lists so I'm gonna say nets equals blank and GE equals blank now what I need to do is I need to keep track of the neural network that controls each bird because these genomes when they come in are really just a bunch of neural networks that are gonna control each of our Birds I need to keep track of the bird that that neural networks controlling so where that position is in the screen and I need to keep track of our genomes so that I can actually change their Fitness based on you know how far they move or if they hit a pipe or if they do all this stuff so I'm gonna use three lists to do this maybe not the most efficient way but should work fine so what I'm gonna do now is say for G in genomes and what I'm gonna do is set up a neural network for that genome and I'm gonna set up a bird object for it and then just keep track of that genome in a list and the reason I'm using three lists is so that each position in these lists will correspond to the same bird so you know like position zero will have the neural network for bird zero the genome for bird zero and the actual bird object that we've created for that bird so we can keep track of where it is so what I'm gonna do is say nets equals neat dot n n dot feedforward Network and then I'm gonna pass G as well as config I believe I think that's right I need to check to make sure I didn't absolutely butcher that which I could have no I think I've did that correctly okay awesome so now that we have that I'm gonna say Nets dot append net I'm gonna say it birds dot append and I'm just gonna create a standard bird object here that's gonna start at the same position of all of our other bird objects so I believe I was 23350 and now I'm gonna append this genome into our GE list so I'm gonna say GE dot append G and make sure I did that correctly and then the last thing I'm gonna do is just set the initial fitness of our birds to be zero so I'm gonna say actually before I pen that G dot fitness equals zero I guess it doesn't matter where I do this but that is kind of how this works so what we're doing is you know setting up a neural network for our genome that's how you do it you say Nita and end up feedforward Network give it the genome give it the config file so it knows how it actually set it up properly append it to the list we're going to append a bird object to that list as well which will you know be with this neural network and then we're gonna append the actual genome to the list as well in the same position of this bird object and this neural network so we can keep track of you know it's Fitness and change its Fitness as we desire all right so now that we have that there's a few more things we need to do in here now the first thing I'm gonna do is start actually removing birds that collide or you know like die essentially so what I need to check is you know if a bird collides with a pipe I don't want to run it anymore I want to get rid of it from here and whatever it's Fitness was at is what it will stay at I don't want to add any more Fitness to it I don't want to keep it in this list I just want to get rid of it so that's how we'll do this so what I'm going to do here is in pipe collide I just need to look at my other file to make sure I don't destroy this I'm going to let's see how I want to do this okay what I'm gonna do is say change instead of saying for bird in birds I'm actually gonna say 4x bird in a numerator just so this way I can actually get the position in the list of where this bird is as well and now I'm gonna say GE x dot fitness minus equals 1 that's the first thing I'm gonna do and what this is actually gonna do is every time a bird hits a pipe is gonna have one removed from its fitness score so that we don't favor birds that you know make it far but just Ram themselves into the pipe every time we want to make sure that if a bird hits a pipe and another bird you know is at the same level but didn't hit the pipe they will have the one that didn't hit the pipe will have a higher fitness course that we encourage you to go in between the pipe so that's what I'm doing here saying G X don't Fitness my equals one now I'm gonna say birds dot remove bird now this is just gonna get rid of that bird object so we're no longer actually moving it throughout the screen alright so actually just make a slight modification here to make sure that I don't mess anything up so I realize I did this I don't even use this so what I'm gonna do is actually just remove the bird the neural network associated with it as well as that genome from the list that we don't touch those anymore so I'm going to say birds dot pop and then in this case X that I'm also going to say Nets dot pomp X cuz that'll be the neural network associated with that bird and I'll say de Pape X just to get rid of those so that those will remove those actually return them here too though that doesn't matter we'll just remove those and now the next thing I'm gonna add here is inside of this add pipe where we increment this or I'm gonna actually increase the fitness level of each of my birds by a fair amount so if they actually get through the pipe I'm gonna give them like in this case an extra five fitness now the reason I'm doing that is because I want to encourage the birds to go through the pipes rather than just you know making it further in the level but ramming themselves into the pipe so what I'm gonna do is essentially say for I guess GE in G no I assess for G in GE I'm just gonna increase their fitness I'm going to say gdug fitness plus equals five so any and the reason I can do this without having to loop through the birds is because if you know we have to remove a bird we're removing its genome as well from that list so any genome that's actually in this list is still alive and if it made it through the pipe then it will gain five to its fitness score so that should work properly now down here I'm gonna do the same thing so if a bird hits the ground rather than removing any Fitness from it I'm just going to remove what do you call it that bird from the list so we'll do that same pop thing here so I mean instead of saying for you know bird and say for X comma bird in enumerate Birds then what we will do is simply pop that so to do that it's pretty easy bird stop pop X net stunt pop X and finally GE pomp X to remove all of those now we might run into an issue here where since I'm removing a bird and we're looping through birds we have an issue but we'll see we'll see as we get through here if that's a problem otherwise I do know a way to fix that but hopefully that'll work