hello everybody and welcome back to the golang tutorial so in this video we're gonna be talking about four loops now there's a fair amount to cover when it comes to four loops especially because for loops actually are the same thing as while loops in Ingo which is different than a lot of other programming languages and they've actually made these for loops pretty flexible in the way that you write them so there's like five or six different styles of for loops you can write so I'll try to cover them all but just keep in mind that I might not go into extreme depth in each of these these different paradigms of writing the for loop so first of all what is a for loop I'm sure some of you are probably wondering what that is well the idea behind a for loop is being able to execute the same block of code multiple times so obviously you could understand why this would be useful right if we wanted to print something a hundred times it's probably not a good idea to actually type the print statement a hundred times right like I don't really want to write fmt dot print line hello a hundred times if I want to print it a hundred times and in fact a big issue occurs too when you know you get asked to print it a hundred times by your employer whoever it is and then the next day they say actually printed 25 times so actually I only printed ten thousand times right you got to change all the code rewrite a bunch of stuff to do that where if we use something like a for loop all we would have to do is change one number and boom we could modify that so let me show you what a for loop looks like and then we'll just get into some examples and understand how they work so a for loop starts with the keyword for now the only necessary thing for a for loop is the keyword for and these brackets now this gonna seem weird because in other programming languages you actually need to write three parts to a for loop that's the variable declaration the condition and then what you want to do at the end of each loop so the increment or the decrement at the end of each loop now with golang these work as while loops as well no a while loop essentially loops wallis certain condition is true so for a for loop what we can do is we can just write some condition here so let's say we have some vow act so let's an X colon equals three and maybe while X is less than five we want to leap well this is actually a valid for loop and goaling we say for X less than five do this and what that says is essentially while X is less than five keep doing what whatever is inside of this four loop now we define the variable up here we're checking the condition here and what we'll need to do to make sure that this isn't an infinite loop is we need to modify the value of x we need to add something to it so that at some point in time we actually escape this for loop right because if I just wrote something like for true here this is a condition that's fine I can write this here it's true that's always true which means there's no way for me to escape this for loop at least with our current understanding and this will just go on forever and ever and ever and ever until the program crashes are until you tell it to quit so keep that in mind that it's very easy to make what's known as infinite loops and you always want to make sure that your loop has some way of ending so that you don't get stuck in the issue of having to close your window or close the command prompt because you made an infinite loop so anyways what I'm gonna do is just say X plus equals 1 here and then up at the top what I'm gonna do is say FM t dot println and let's actually print the value of x so this is the first kind of idea behind a for loop you have a variable you write out what is this saying it's your place with X plus plus ok that's fine let's just do X plus we sorry what you just saw there I'm gonna interrupt myself is I had X plus equals 1 and if go language told me to change it to plus plus because plus plus just adds one minus minus will subtract one that's known as increment and then in case I haven't shown this what plus equals does is simply add whatever the value is on the right hand side here to the value X so this would add 5 to 3 would you give me 8 right but if I just want to add one then I put plus plus now the idea is that at the end of each loop I'm gonna add 1 to the value of X so I can kind of keep track of where X is so we start at 3 we go ahead we say okay is X less than 3 or is X less than 5 yes it is because its value 3 so we go ahead we print 3 now we add 1 to X so now we come back up to the top of the for loop X is 4 and we say okay it's 4 less than 5 yes it is so we print 4 we add 1 to X what is that now 5 we go back up to the top of the for loop is 5 less than 5 no not so we break out of the for loop and we stop looping that's the process behind this so let's actually have a look at this and I'll show you so CL s go run tutorial dot go so we print out the value three four and that's all we get for this for loop now of course I can start at something like zero as well if I start at zero then we should see let's have a look 0 1 2 3 4 5 and say we wanted to include the value 5 then I could change this to 6 or I could change this to less than or equal to so then this condition will be true when X is 5 which means we can print 5 so let's go ahead and do that and we get there you go 0 1 2 3 4 5 now there's a lot of practical uses of for loop this probably one of the most used piece of syntax in programming is a for loop so it's important to understand how these work so this is the first kind of design you make some kind of variable here you have a condition and then you increment it somewhere in the loop now the issue with this is you have to remember to do all this right you got to remember to define the variable you got to put the condition you got to remember to increment it so there's another style of for loop and I'll write it so that it does the exact same as this down here now this style um does the exact same thing it just looks different so you say for you define a variable so let's say X less than equal to 0 you put a semicolon actually here then you say X you put your condition so I'll say X less than equal to 5 and then you say X plus plus and then inside of here you say fmt println X now this does the exact same thing as this in just a different way of writing it so rather than defining the variable outside the loop and incrementing inside the loop we say X is equal to 0 define that here X less than equal to 5 and then X plus plus so the formula goes definition or declaration of the variable condition some kind of increment and we separate those by semicolons then we can go ahead and print that line and let's actually run this I'm just gonna comment this out I haven't shown this before but this is a multiline comment so if you do a forward slash and then the asterisks and then at the end of wherever you want to stop commenting out you do an asterisks and a forward slash it will comment out the entire kind of block of that so in between those things okay so let me run this now and let's just make sure it does the same thing okay so we get if we look here and I scroll up to 0 1 2 3 4 5 so there you go so that printed all the way up to 5 starting at 0 and of course we can add more than one if we wanted to at the end of this loop so I could say X plus equals 2 and when out what's gonna happen is we're gonna count by two so if we run this and we have a look we get zero to four right so we didn't print 6 because as soon as we got to the value 6 that wasn't valid for the loop so we didn't enter it and we didn't go inside okay so those are kind of the two main styles so what you can do is you can write it like this where you just put the condition or you can write it with all of them at the top here separated by semicolons and that's like the basics behind writing for loops now I'm gonna show you a few examples of how we use for loops so you it makes sense to you why I've even shown you all this but the other style and I showed this at the beginning right is I can actually just do four like this if I wanted to and this what this will do is actually set up what's known as an infinite loop which we talked about so this is the same as writing like for true if you just omit the true and just write for but how do I get out of this well there's actually two keywords that I need to show you that can be used inside of a for loop that are gonna really mesh well with the example I'm about to show so these two keywords are break and continue now what break does is actually just immediately exits the loop so say that we're here right and as soon as we hit this break keyword it doesn't matter what the value of x is it doesn't matter if it's still satisfying this condition X is less than equal to 5 it just breaks the loop and it goes immediately to the end of this bracket it skips anything below it it doesn't do anything below it and then it continues the program from there so as soon as I hit break I jump from line eight to line ten and I'm done I'm done the for loop now what continue does a little bit different as soon as I hit continue it does skip everything below it but it actually immediately jumps to the top of the loop so it goes back to the beginning of the loop and keeps running from there so nothing changes with these counting variables all it does is immediately just go back to the beginning of the loop so that anything below it no longer happens so you can think of break exits and goes to the end continue doesn't mess anything up just goes right back to the very beginning and there's many different uses for why we would want to do something like this so let's actually do an example and what I want to do is I want to print out I'm trying to think of this a good way to do this I want to print out all the numbers that are divisible by five seven and nine that are in between zero and a thousand so I'm gonna make my loop go up to a thousand I'm gonna count by one so just X plus plus we're going to start at zero and all the numbers that are divisible by always that I set like 3 7 9 I don't know we'll pick some random ones we'll print those out so how can I go about doing that well what I'm actually gonna do is make an if statement inside the for loop and I'm gonna say if X does not equal 0 and so we do this'll end here and X mod 3 equals equals 0 so that says if X mod 3 which is the remainder of X divided by 3 is equal to 0 which means 3 evenly divides X then that means it's divisible so then after that we'll say and X mod 7 equals equals 0 and X mod 9 equals equals 0 so if that's all true then that means that X is divisible by 3 7 & 9 then we're gonna print out X so since a fmt dot print line let's just print X and then what I'm gonna say is continue and what that means is just jump back to the beginning of the loop now down here what I'm gonna say is FMT dot print line like this and I'm just gonna print a big end so essentially if the number is not divisible by what is it by all these things or this condition isn't true we print n otherwise we're gonna print the actual number so what this is gonna do is it's gonna make sure that when we find a number that's divisible by all of these things we don't print n we only print n when it's not divisible by that now in fact this is gonna be I don't want to actually print n I just wanted to show you an example of when we would use continue like say there was stuff down here that you don't want to do when this if statement doesn't happen well you could there's two ways to do this right we can use the continue statement which we'll just go back to the top of the loop or I can put in else here and put this inside of here now typically it's a lil bit cleaner to use continue but we can use the else statement as well but actually for this example I'm not gonna print n just cuz in the output I want to actually be able to see these numbers which is gonna be hard to do if we print n so let me erase that and let's boot this up here run and see what we get okay oh so I didn't save my file one second let's run this again and there we go so these are all the numbers that are divisible by three seven and nine that are in the range of zero and a thousand so that's a cool example of how we can use a for loop is we can loop through a bunch of numbers and then we can check if they meet some condition if they do we can print them out otherwise we don't have to now in fact what I'm actually gonna do now is I want to say let's print out the first number that satisfies this condition so the first number where it's divisible by three seven and nine and only that number what I've done is I've made this a break so as soon as this happens we'll print the number and then break the for loop so now what happens if we look at it is we should just get that first number that was in that list of values which is 63 right so that's the idea behind break and continue and hopefully that's explained for loop to you so I think with that I'm gonna wrap up the video here I hope you guys enjoyed if you did make sure you leave a like subscribe and I will see you in the next goal and tutorial