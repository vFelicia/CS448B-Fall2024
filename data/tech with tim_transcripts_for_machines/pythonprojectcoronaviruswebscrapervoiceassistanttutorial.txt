hello everybody and welcome back so in this tutorial what we're going to be doing is building a coronavirus web scraper slash voice assistant so the idea being we're gonna collect all this data related to the coronavirus so cases deaths cases by country people tested pretty much any data that we want and then we're gonna set up a voice assistant that can actually serve that data to us so I can ask a question like how many cases in Canada how many worldwide cases right and it'll actually give us a response and this is going to work using reg X search patterns so rather than using like some ml or AI model to set up the voices system which we could do we'll keep it simple and this will allow us to really easily add some new patterns so if you guys want to change or modify this prop this program you're really easily able to do that and that's kind of the idea behind a lot of my tutorials is I want to teach you the basics I want to teach you kind of all the skills and tools you need and then you can customize the project's mess around with it and add your own stuff because you know how to do that so let me just show you how this works how many cases are there in Canada how many worldwide cases are there so that one didn't work but how many total cases are there so you get the idea that's the basics of how that works actually need to close this because I forgot to quit that application ok so we have a sub line here but that's the idea right so you ask it questions and then it gives you the answers based on those questions now I'm actually gonna be getting all of the data for this project from this website here so this is just the first search result when you search coronavirus cases I'll leave a link to everything that I show here in the description but you get the idea so we have coronavirus cases this is the total cases and then if we come down here we get country specific data so USA Spain and then all their related data notice that some of these blocks are missing because I guess they just aren't reported or something like that where they're not in yet but that's the idea behind this so what we need to do is find a way to get the information from this website into our Python code now usually this would actually be quite difficult we would have to do this using like beautifulsoup or selenium or some kind of web scraper and have to look for like IDs and tags and dig into the HTML you know I'm not a fan of doing that and neither is parse hub which is why they actually sponsored this video we're gonna be using them to do this web scraping now I know people get really weary whenever you hear the word sponsor this is free this is completely free I promise you this will save you a ton of time and you do not need to pay for this but we'll just be using this for the project so they do have paid plans but for our purpose and for a lot of purposes you don't need to buy purchases so just go to the description it's par sub comm and click download par sub for free when you do that will bring to a page that looks like this and essentially what this par sub tool does if any of you are questioning why you download it is it allows you to pretty much look at the website in kind of this graphical user interface tool so you actually see this website and just simply click on the data you want so you just click I want that number I want this I want that I want anything that looks like this and what it will do is it will scrape the website for you it will give you an API that you can call to get that data and will let you download the data in JSON format in CSV format and for free so that's the idea behind parse up but once you download it again parse up calm this will be in the description they have a sponsor this video on being transparent with you guys and open that up and what we're gonna do is actually make a new project so this is what the tool looks like I mean you can go through it look at the tutorials documentation if you want but all we need to do them I'll show you how to do this is is make a new project now this might open up a like tutorial for you they do it tries to walk you through you can exit out of that if possible if you have to go through it go through it it's probably worthwhile they'll actually teach you how the Tool Works but once you get out of that go to new project and what we're gonna do is actually put in the URL for that coronavirus website that we want so you can see it's already in here for me because I've used it a bunch of times already but when you do that so we'll be put in that URL for the coronavirus website which is in the description and click start project on this URL you can see that we can actually look at the website on the righthand side of our screen and very shortly we'll be able to start selecting what elements we actually want to take the website so I'll select start project on this URL just give it a second sometimes this does lag a little bit you got to remember it's scraping a ton of information so that's likely why and what we can do is just start clicking on stuff that we want now it's a little bit more complicated than that but the idea is that on a page right so we have a page object we can select different items from the page and the first items that I want to select are related to the total coronavirus cases so I want to get all of these values here so how should we do that well let's make a new selection here and I'm gonna call this selection total so this will be like total cases total deaths like all of that and what I'm gonna do inside a total now is select each one like that and I'm gonna select the other one here so this deaths and we can see that my woody call it voice assistant is still running in the background cause I didn't close it properly so give me a second to close that okay so my voice assistant was actually running in the background I forgot to exit anyways what we're gonna do is just select what we want from the selection so in this case I want the h1 tags to around virus cases deaths and recovered and notice when I selected this h1 tag these two highlighted in yellow which said these are very similar do you want to select these as well we did so I selected deaths and then as soon as I selected deaths it actually automatically selected recovered now the reason for that is because this can actually do like pattern recognition so as soon as you select a few items it will automatically try to select all the other items that are related to those items that are similar now that saves you a ton of time and that's pretty useful now what we're gonna do is we won't actually get these number values as well right and I want to link those two with this so I want to link them to coronavirus cases so that if we look here in our data that's being generated we can see we have total we have a bunch of entries and they each have a name now I want to make sure that these entries that have the name coronavirus cases have the correct value right so what I do is I go to total I click this little plus button on the side here and I hit relative select so when I do that I can click on one of the items have already selected which is this case writer this coronavirus cases and then I'll bring a little arrow and I can select the item that I want to relate to it which in this case is this value so I'll select that and now we can see it's a selection one and it shows me the value so if I want to change that name I go up here and I change it so I'll say instead selection one we'll call that value so now we have the name that corresponds to the value and what I'll do next is I'll select deaths I'll select its value and again notice it automatically does that for recovery so as soon as you do two selections it will automatically try to pattern match and if there's something that you don't like you can unselect it or you can select other things as if it missed it so that's how that works so notice now we have this JSON format down here and that's the data they will be able to access afterwards that's what it looks like and it this just generates it for you as you go so I think you can probably appreciate it why I'm using this tool because for a mass amount of data like this this is way easier and I think this is a pretty useful tool it's pretty cool and it's free so we can use it so let's now hit a new selection on the page so we have this total section right so total is right here but I want to make a new section inside of this kind of JSON so what I'm gonna do is go on page I'm gonna do new select and I'm gonna select now the name USA so I'll select USA there we go and now is select Spain so yes I'll do a check mark on that and we should see that it selects almost all the countries it misses a few though so since it missed some I'll select UK and then when I do that it notices out you want all of them and it selects all of them now if you want to see how many items you've selected you can see that over here it says like 212 and what I'm gonna do inside of this select is put what I selected so in this case I selected country so we have total and we have country now you can see where it's it's extract that is like I'm taking the value from there so you can see we're taking the name so if I go it has a name and then it has a URL now I don't want the URL so I'm gonna delete it but it's by hitting that trash button like that I new seems pretty intuitive on how this works so what I'll do now is I want to link the the names that I've selected with their cases so we'll use the relative select tool I'll click plus relatives select I'll select the name and then I'll select the data I want which in this case is totally now I do need to name this so let's name this total underscore cases like that and now if we look here and we scroll down it's only doing it for us a yak so I need to select one more so we can see that for us H shows the total cases now for Spain what I'll do is I'll select again the cases here the pattern matching will happen and we'll notice it selects all of them except it forgets a few so let's link that up when we link that up now give it a second and all of them are select so if we scroll down we can see that it's showing us pretty much all of the total cases and it says 207 more which we will get when we actually retrieve this data so let's do one more selection I want to actually add another relative select inside of here so we'll select USA and now we'll select the total deaths because all I really care about for my project is the cases and deaths but for you guys feel free to select as many values as you want so let's keep going and keep going ok so that should already be selected nice so now let's do UK and give it a second and we can see it selects pretty much all of them now notice there's a few gaps here so you'll see that this number might be a little bit smaller than some of the other values that's just because some countries don't actually have values for that and then I'm gonna call this total deaths like that okay so let's review our JSON we can see we have the name total cases total deaths looks good to me so what I'm gonna say is all right I'm done let's click get data now what get down it does is gives us a little interface that we can actually now run kind of the program we just created and scrape that website so let's click run when you click run what's gonna happen is it's actually just gonna scrape the website right so if we wanted to update the data that we had we would have to run this again and I'll show you ways that we can do that from the Python code so we don't actually have to go back into this tool this is just the first time we want to do this we do it in the tool so we set up what's called a run and then we can rerun that we can run another run like it's that's kind of the way it works we have projects and then we have runs and each run is like running your project and updating the data and you can access each of those runs which means like say every morning you wanted to run this and you want it to track you know the increase in cases and all of that this already does it for you but you could do that and you can access all of the runs that you've done in the past so there we go we can see our downa is ready this does take a few seconds because this actually runs on their servers it doesn't run locally which means that you're not using any of your system resources to do this web scraping you're using their servers and that's why they have some paid plans so if you're like an enterprise or something and you're doing this then you can just use their servers to do it and obviously they need to charge for that so here we have that we can download our data in a CSV in Excel format we can download it in JSON or we can use the API now we're actually going to use the API to do this which means we're gonna send a web request to this API and it will actually give us the data back now you could download the data if you want that's an option of course as well but it's just better probably to use this API for our purpose so since we're gonna use this API we need the details from this run so we need the API key we need the project token and we need the run token so let's grab those values and make sure we leave this open and let's go into a Python files I'm going to open one up here and let's start inserting those as variables so let's say API underscore key is equal to and then we'll copy the API key which is right here let's go project underscore token this is probably the most important one I actually don't know if we need the run token and it will access that and then run underscore token equals and then we'll steal that run token all right so there we go we have the data from this that we need now I'll show you the URLs and how we actually access this from like the parse of API but that's what we need from this so we can actually close that project now all right now what we're gonna do the first thing we actually need to do is you need to install something in pip so for this project we're gonna use a module called requests so import oops not all capitals import requests like that now request is a third party module to install it you tube tip install request now this is using something called the package installer for Python I don't know the formal name but that's pretty much what it is so if you have python on your system it automatically comes with pip although when you run this command you're gonna get one or two results you're gonna get that it's installing it already extols already installed and like this worked or you're gonna get something that says pip is not a recognized command now if you're on Mac or Linux or a Bunty or whatever OS you're on try pip 3 so if you're not on Windows try pip 3 and then install requests if you are on Windows you're gonna try pip and if those don't work for you then you have your pip kind of misconfigured it's not on your system path so I'm gonna leave a link to a video and a card in the top right which I guess for you is gonna be that and from there it'll show you how to fix pip so I know the video doesn't say like how to fix pip it says how to install PI game but it will show you how to reconfigure your pip so that that's working properly so follow that video and then again try to install the request module and a lot of a few other modules need we need to install later on ok so once you install requests now what we're actually gonna do and I'm gonna open up my other window here so because I don't remember these URLs off by hearts let me go coronavirus let's open that what we're gonna do is actually call a get request on the API from Parsa now I need to copy in this URL because I can't remember it off the top of my head and then let's get it so let me move this over here alright so the request that we're looking for is something like this so let me just copy this in and I'll show you how this works okay so let's go like that oops what the heck why is my copy and paste not working today let's go here copy all right and paste ok sweet so let me zoom out so this is the URL that we need to use to access our our information like art to get the data from that run that we just did and it's gonna return that to us in a JSON format but the idea is that we have this which I'll leave in the description again httpwww.youtube.com/watch v have here is actually the project token so we'll put that in so projects what the heck is happening here so project token like that and then the params is equal to self dot params but we gonna put here cuz I just stole that from another piece is API underscore key I think that's what it is API key Jia API key so this is kind of like the authentication for this get request we need to give our API key and the project token and what we're saying is let's get the last ready run so the last run that we did that is ready and let's get the data from that so we're saying the response is equal to request dot get and then I will show you that I can actually print this out once I format it and we'll get all the data so if I import the module of JSON which is built into Python you shouldn't need to install it then what I can say is data equals json dot i believe it's loads response and I think I can say response data um not what am I saying request response dot and I believe it's data like that so this should hopefully work again this will be in the description if you guys need to use this I'll link the code somewhere there as well so you can copy this but this is the URL I'm using an F string I put the project token here params API key equals API key for that's the up for the authentication and now if I print out data and I run this let's see I get an error what's the issue object has no attribute data so I think I can actually just leave it like response dot text that should work yeah okay so this needs to be response text not data but now if you see it gives me all of this data and we have you know China total cases 82,000 deaths 4,000 whatever and we have the total information for coronavirus cases value is that right and that's the idea so we can do something like that so now that we have this data all we need to do is kind of make some interface that's gonna let us access this data nicely so what we're gonna do for that is actually set up a class which we'll get started with now alright so I took a break there to grab a hall's cuz my throat is killing so if you hear that no that's why I have a holes in my mouth right now but what we're gonna do now is set up a class it's actually gonna let us kind of parse through this data and look at it nicely because right now right if I go to data I can go like total what did I even call this title call this total cases I guess we'll have to I'll have to look at this again cuz now I forget so let me print this print so we print this we can see that we have the keys of total okay so that's the first one and I think the other key that we had was country okay so let's look at data total so data total gives us now just the information related to total and if we look at data of country like that then it gives us all of the country related data so essentially we need a way so that we can find like all of the data related to USA or Italy really easily without having to like go to the check every single time so what I'm gonna do is I'm actually gonna set up a class and I'm gonna call this class data now inside if you were gonna define the NIP method we're gonna take a self we're gonna take a API key actually API key and we're gonna take a project token like that okay so now that we have that we'll say self dot API key equals API key and we'll say self dot Project token equals project token now I'm also gonna set up self dot params now this is gonna be the authentication so this is what we have to pass with every request to set yes this is me I have access to this so we're gonna say API key Quan and I actually I don't even think I need to do quotation right so maybe I do let's do it yeah I think I do API key is the self dot API key all right there we go self DUP Rams API key is self that API key so now we have that information what I'm gonna do is actually set up a method called get updated data or get data so what get data is actually gonna do is it's going to call this request and set the data attribute for this this object so we're gonna say self in here and then we're just gonna copy what we have here and put it here so this will say response equals that and then where'd the rest of my stuff go okay so I guess it just didn't copy that other line that's great this one will say self dot data equals json dot loads s it's Mons dot txt okay so essentially the reason I'm doing this in here is I want to make it so that I can call this method at any point and update the data that we have because notice is this last ready run that means it gets the most recent run for this project because what I can do right as I can go back to parse up and I can run this again if I want to so I can open up that project so let's go I guess it's gonna be this one the most recent one and I can click get data and I can do another run so what I want to do is make sure that this method that I have here is giving me the most recent run so what I'll do then is I'll call self dot get data and now what I've done is I'm pretty much setting up this data variable and that's pretty much how that works right so we'll get the data and yeah that's there we go so we have this set up and now we've done the exact same thing that we did before if I wanted to instantiate that ax equals data and here I'd have to pass the API key and the project token so I guess I could just put API key project token and what I can do is even just print I'm you know data dot data as weird as that is and this should give us the same result and it does so we've set up that class and now that works so what I want to do is set up a few methods in here they give us specific data so the first method that I want to do is set up one that gives us the total case so actually define get underscore total underscore cases let's put a self inside here and then what we'll do is we're just gonna return self data we'll put inside of here I guess total and then we need to figure out what that total cases was so I think that the key for that was the name equals coronavirus cases okay so we need to find an entry that has the name of coronavirus cases so to do that what we're gonna do is we're gonna have self duck get down a total and watch you have to modify this a bit so we'll say actually I'm just gonna say data equals self dot data total we'll say for content in data let's say if content name equals equals oops not that I wanted coronavirus cases I don't know why my ctrl C is uh is not working here then we'll paste that there so coronavirus cases and we'll go here and what we'll do then in this case is return content so if the content when we're looping through data if the name is equal to coronavirus cases then we can return content value now the logic behind this is that we will get this list right so this list up to here when we index at total then what we'll do is we'll loop through all of these will see if one of them has the name equal to coronavirus cases and if it does we'll simply return the value of that kind of like content of that little dictionary so in that case that will give us the value so we can do a very similar thing here instead of get total cases now we'll do get total deaths and okay I keep forgetting that I've like messed up my my copy and paste key here somehow so let's let's just use the built in so get total cases let's do get total deaths and then here instead of colonel virus cases i believe this just said deaths so we can check if we go here and look at this data it does just say deaths so that will now give us the total deaths and if we wanted recovered we could set that up as well except i'm just gonna leave it at this for now okay so now we have get total cases and get total deaths let's test this so data get total cases let's run that and let's see we get the value three point six eight seven million nice and now let's do deaths okay and two hundred fiftyfive thousand one hundred thirty so pretty straightforward this is pretty easy to do now all we need to do is get the information related to countries so let's do that let's get on define gets country do we want get country data yeah let's just say get country data and what this will do is just return all of the data for that country so we'll say get country data will put self we'll put the country here it's gonna be a very similar thing to what we've done here except with countries so we'll say data equals self data and i understand i might be confusing you by using too many datas here self data inside of here we need country because I believe that's what I called it so country like that and we'll say for Khan tent in data if content name dot lower this is important make sure it's not lower is equal to country dot lower will make sure that it doesn't matter about the capitalization then what we'll do is we'll return the content like that so there we go and I guess we can make it here if there's nothing for what we're asking we'll just return like blank I guess like we'd to return zero and then in this case we can return zero as well now I'm doing it as a string just cuz we're gonna be like saying it from the voice assistant but you could return an int value if you wanted just note that these values by default are strings so like all of the value inside of content is a string so if you want to convert that you'll need to convert that to an integer alright so let's try to get the country data for something so let's say get country data let's try Canada where I live run and there we go named Canada total cases total deaths so now if I got that and I want to access just the total cases I'd say total underscore oops cases like that and there we go we get sixty one thousand and that's the idea behind this and how that works okay so pretty much I mean this is kind of the only thing we really need for getting the data right so you've set up that class and now that we've done that we can start using the voice assistant and accessing data from it like this that's the idea we just want to set up a little interface so that it's really easy to grab data and of course you can make this more robust more complex I'm just doing it quickly because again the idea is not to go overboard just to show you what you need to know and then you can customize from there alright so let's leave that we'll add some stuff later we'll look to find data and now we need to set up the voice assistant now setting up the voice assistant is kind of a pain there's actually quite a few things we need to install so I'm just gonna open them up to make sure I don't forget to show you anything um but I do have a video tutorial on my channel showing this but I do have a requirement stop PI file here all try to link this in the description remind me if I forget but we need to install all of these modules so make sure you have your pip working and we're just gonna go through one by one I know the ones like the orders so we're just gonna say pip install the first thing we're gonna install is actually called PI win32 now you might not have this module this might not work but if you're on Windows you're gonna need this so pip install PI win32 I already have that but let's install that so PI 132 and then we're gonna install speech recognition and PI TTS x3 I think which is texttospeech so let's do speech recognition so pip install speech recognition recognition I think I spelled that right there we go instance already satisfied notice these capitals are important so it's speech recognition and again I'll put this file in the description let's pip install pi TTS x3 I think that's right yes it looks like it it's install we can see that I already have that satisfied but again we're gonna need that and then the last one that we need to install is actually called pi audio now you probably won't be able to do it by just doing this so the default install is pip install pi audio but when you do that chances are you're gonna run into a bug or at least I did a bunch of times so what we actually need to do to install pi audio is go to a link that I'm gonna leave in the description it's in it's here so it's Python extension packages for Windows and this is specifically for Windows but because this wasn't working on Windows I had to do this we have to go to PI audio which is right here and find the version that corresponds to our version of Python so if I go and I type Python you can see that I have PI python version three point eight point two so what I need to do is find the PI audio version and starting notice it's 64 bit as well find the PI audio version that's AMD 64 and that's Python 3/8 now if you guys are on 37 you're gonna do cp3 seven right and then whatever 32 or 64bit and if you're looking to determine what version of your Python go into your command prompt or your terminal window and type Python and then just look it'll show you here but I think you can also do something like Python version I think that shows you yeah so python very but you won't get the 64 or 32 bet so you might just want to type pipe on it and see what that is so anyways once we get here again link in the description download the appropriate file so I'm gonna download this one and just keep track of where it downloads because you're gonna need to know that so I'll download that downloads you notice it was already there and what we'll do now is I'll show you a little shortcut to actually be able to install this from your command prompt so if you're on Windows go to wherever you installed that so in this case downloads in this little top bar up here where it usually would type in like the URL I don't want to say URL the path to what you're looking at type CMD it'll open up a command prompt window and notice that here where your directory is will be inside of the directory that you did that so if I went to like my raw video recordings and I did CMD it would open it in raw video recordings so that's cool and it's just a little trick so that you don't have to let go CD downloads and and change directory manually anyways what we're gonna do now is do pip install and then this is gonna be PI audio so I'll just type P + tab to PI audio like that so we're gonna just install that we you'll file this is a pip wheel file this is pretty much the same thing as when you install PI audio it just will grab it from the internet so hit enter with that wheel file and then it should install app for you so that's pretty much how you do this on this again there's many ways this could go wrong leave a comment if you're having issues but the idea being that you want to download from this site the correct version and then install it like that okay so now that we have that we're gonna actually start working on the voice assistant now that's going to involve a few imports so the first import is we're gonna say import PI TTS X is it three I think that's right I'm just gonna open my other file to make sure that I'm not miss getting us here so let's get this open oh I see yeah pi TTS x3 so that's PI texttospeech version 3 I guess and we're gonna import speech recognition which is actually speech underscore recognition as SR now that we have that the only other oops not will do it as SR we're gonna import re which stands for what is that reg X so reg X search patterns and we should have pretty much all the which we need for right now so let's go down here and let's start setting up a way that we can actually have the computers speak to us this is pretty easy we're just gonna define speak with text and then what we're gonna say is engine equals and I'm just looking at my other screen cuz I'm not gonna memorize all the syntax pi TTS x3 dot and knit so initialize the engine and then what we're gonna do is say engine dot say text and that engine dot i think it's say and weights run and weights as what is run and weight all right so what we're saying is this yes function right here takes some text we initialize the PI TTS x3 engine which is PI texttospeech then we say and we wait for this to run until we exit so let's actually test this let's go speak hello now remember that you're gonna have to have your speakers set properly so if you go to audio here I'm on Windows it's gonna be different for mac change your audio settings to be what you want them to be so it comes out of the correct things you see mine's linked to my monitor which links to an external speaker but that's important because you know don't yell at me that didn't work when your speakers aren't configured so let's run this and see if it says hello there you go so I hope you guys heard that but it did say hello what is this thing still popping up on the left side here I can't get rid of this okay anyways no we'll just have to leave it for now okay so speak hello there we go said hello that's working okay so the next thing we need to do is define a function that can actually take our audio so we need to be able speak and we need to be able to so it needs to be to speak and let me spell to listen to us so this um this is a lot of people have issues with this again make sure your microphone is set up correctly and make sure it's not being used by another process so in this case I'm actually fortunate that my OBS doesn't mess with this mic cuz I'm using the same mic for OBS as I am to speak into this thing but if your mic is being used by another process you might have an issue doing this so just keep that in mind while you go through this tutorial so let's define get underscore audio like that we won't take any parameters we're gonna say R equals s r dot in this case recognizer now recognizer is just the speech recognizer I believe you actually change languages and stuff with this although I haven't looked into it that much we're gonna say with with SR dot microphone so like that as the source or using a context manager we're gonna say audio equals r dot listen and then inside here we're gonna put these source again I don't have this memorized so I just have to look on my other screen and then we'll go through it after okay so we're saying audio equals r dot listen source so you know listen on the source for some audio as soon as it starts hearing something it will start recording that and we'll store that inside the said variable here so we're gonna say is try because this does some time messup so we need to put in a trycatch r don't recognize google so these are the different ways that you are the different things you can use so you can use different engines so like our dot you can use Bing Google hound defy IBM Sphinx whatever Google clock these are like the different assistance I think you can pick I'm gonna pick Google just because I've used that and it works and inside of here on a put audio as the listening source so it's gonna recognize pretty much like it'll record it'll save that recording like in memory send that to this recognizer this recognizer will actually listen to that and then tell us in a text format what was said now this is pretty good like this hardly messes up but it does make mistakes sometimes so just keep that in mind all right so now we're gonna say accept exception as E and then we'll just print exception eat and I think I need to put that in a string so we will like that okay so there we go so that is pretty much it now we'll return said dot lower and notice that if this messes up it will just return a blank string so that's the idea behind this that we're going to set up the recognizer set up the microphone listen on a source this will actually record the audio and then as soon as that's done so it's stopped listening it will pass that to the Google recognizer which will then translate that into some text if that works properly will return set lower now we can get some audio so let's actually print out we get audio and see what this does hello and there you go right so it says hello so we can speak into the microphone and we'll get audio and now all we need to do is pretty much set up a loop set up some speech patterns and then you know speak back listen speak back listen which is you know easier said than done but still it's not that hard so let's define a main function we don't have to put this in a function but I like to just so I can call it from other modules if I wanted to and let's set up a one true loop and then here what we're gonna do is just speak or we're gonna print sorry we're gonna print listening and then we're gonna say text equals get audio so essentially what we're gonna do is every loop we're gonna listen as soon as they start saying something we'll record we'll get their audio and then we'll loop and look at their audio and see if we want to respond to that in some way now there is some variables that I need to set up so the first thing I'm gonna do is print start it just so we know because sometimes this takes a second to get started so we'll say started program like that then what we're gonna do is we're gonna say the end underscore phrase equals and this is just how we end this loop I'm just gonna name it stop so essentially if stop is inside of any anything we say so if we here stop at all we'll just stop the loop so to do that I'm gonna say if text dot I guess find end phrase so if it finds stop anywhere in there then what we will do is we will break that loop like that so that's how we quit so we can add a little comment we can say stop loop there something like that okay so now that we have that what I'm gonna do is actually set up something on data that I needed to do so there's actually something that I want to get which is a list of all big countries now the reason for that is I want to see if the person says any country in their text and if they do then I know that I'm gonna be looking for country specific data but the only way for me to know if they've said about country is to have a list of all the countries so inside of my data class I'm gonna set up a new method I'm gonna call this define get list of countries like that now and here we'll put self and what we'll do is just loop through all of the names of the countries and return them so we'll say I guess countries equals that we couldn't do this in one line but I just want to you know spread it out so it makes sense to everyone and we'll say for country in self data and I guess if we put here country then what we'll do is we'll say countries dot a pen so add to the end the country name like that so this should give us a list of countries in fact we might actually want to make this a set we'll see you know what we'll do list of countries for now and then we can put it into a set later so then we'll return countries like that and in fact let's test that out so we haven't even called any of these functions so they won't run so let's call data dot get list of countries and let's print out this value and see if that works so print okay and you can see that here we go we get a list of countries and now what I'll actually do is I'll make these dot lower so dot lower it like that and now these are automatically all lowercase and we can see we have USA Spain Italy UK and they actually are organized by most amount of cases so we could use that as well if we wanted to but yeah that's that's how we get that okay so now we have bounce what we're gonna do is we're gonna start setting up a few search patterns so search patterns are pretty much what we're looking for in a text like what question we're looking at so I'm gonna say totaled underscore patterns like this is equal to a dictionary and I'm gonna start defining reg X search patterns and I'll talk a little bit about how reg ex works that I want to look for in their text essentially like we kind of need to come up with some phrases that we're going to try and detect so in my case before I'm just looking at my other screen I had something like if the word total in the word cases was in their text then we would return to them or speak back the total cases so to do something like that we say our compile and again re sory not R stands for rag X and inside of here we put a reg X search pattern now I'm not gonna go through what reg X is and how it works it's pretty easy but it does take a little bit of practice to get used to but the patterns that I'm gonna show you are pretty much all you'll really need to use unless you want to make this like way more complex but I will say that I'm not a master or pro at this so there's probably a better pattern to use than what I'm using but what we're gonna do is we're gonna say slash W / S Plus total we're gonna copy this we'll talk about this does in a second and then cases and I keep forgetting my damn copy and paste doesn't work so I have to use this I set like a key bind that messed it up okay so there we go so something total cases and we're gonna map that to something now the idea here is that I want to make a dictionary that has patterns that map to a function now the function is gonna be what value I want to speak out so what I want to return what I want to say the reason for this is gonna make it really easy to loop through all the patterns check if any of the patterns match our text and if they do just call the function we defined that matches that pattern right and and return that and speak that so in here instead of like calling a function I'm just gonna put the function I would call which in this case is data dot and I guess this is get total cases so I forgot to say what this reggae's pattern is this w / + what this says is any number of words so we're gonna look for any number of words then total then any number of words then cases that's what that means now I believe you there has to be at least one but the idea being like if you said how many total number of cases are there that would still work because we look for any number of words and then total any number of words and then cases right and if you wanted to make it so you could said like total number of cases remove that and that will work you just kind of have to mess with these red X search patterns and think like if what you typed in will match that pattern again like I'm not a pro at this so I really don't like explaining how all of this works but else so what I'm going to do is actually not call this function I'm just gonna leave it like that so without the curly braces the reason for that is actually I just want to define what I would call I don't want to actually call it and you can write this there's no nothing wrong with what I've written so far so I'm not gonna call it until we actually see that this pattern is matched and then we'll save us a little bit of like computing time and stuff too okay so now we have that I'm just gonna copy any other patterns that I have just to save us a bit of time and I'll go through what how they are and what they work okay so here we go so we have all these patterns now essentially what this is saying is I've just defined like two patterns for each of them so that I don't have to say anything in between total encases I can say something and then total cases and then what that will do is return to me data get total cases the same function we had from before now I've done the same thing with deaths it's the exact same except cases have been replaced with deaths and obviously the function we're gonna call now is get total deaths not get total cases so that's the idea behind these total patterns so let's now look at how we would actually use this and of course why my tab key doesn't seem to be working out either my keyboards just falling apart okay so let's so once we get this text right once I say something we want to loop through all of these patterns and we want to check if the text matches that so we're gonna save for pattern func right the function will call in in this case total patterns dot items what this will do is loop through and get this pattern and it will get this function for each of those entries right and then what we'll do is we'll say if pattern dot match since we did re compile this is a reg X pattern so we can call dot match on it if it match is text then what we'll do is we'll say result equals func and we'll call it now what this is pretty much saying is like the function is defined here but we haven't called it so no matter what pattern we match just call the function associated with it store that value in result which we're doing and then let's break now what we'll do at the bottom is will say if result and then speak result I got so we'll just say that number the reason for this is we're gonna check some other patterns so I just want to make sure that we don't possibly say two answers so rather than just speaking result here I'll break the loop and then we'll check at the bottom if result was defined and in fact if we're gonna do that we need to say result equals none to start so we'll check if it's equal to something if it is then what we'll do is we'll speak that result and that's the idea behind this and then once that happens we'll go back up to the top of the while loop and we'll start listening again and we can ask another phrase so let's try this and we be helpful if we call the function so let's call it and in fact where I define data here I'm just gonna steal this and I'm just gonna define it inside the main function like this and I keep forgetting that my freaking copy and paste doesn't work so I need to do this that's yeah that's gonna have to be a fix after this video so let's throw that in there okay so dad is in there we could take these constants if we wanted to move them down we don't need to run token we don't need right now but anyways let's keep going okay so we defined data in here now what I want to do is test this I will note that there is a few minor mistakes so the first thing is where this little space is we need to remove that otherwise we're gonna get some issues and let's see now if we test this if this actually works that this gives us any results let's run this how many total cases perfect okay so that's working so let's quit the program there and so let's finish now the only thing that's throwing me off is it automatically breaks out I'm curious of this break you were to somehow activating this loop but I would hope that this would just keep looping now I'm actually gonna put some print statements for debugging here and then just say exit like that's we're gonna print out whatever the text is that this person says just so that we can see it and we can see what actually what the computer interpreted so let's try this again let's try something with with deaths what is the total number of deaths okay great so okay so he texts up fine and fries so apparently ah okay I see why so this is returning negative one when I do text off fine so I just need to say if this does not equal negative one then it will exit because I was automatically exiting before and I was a little bit confused why that was happening that's because if it doesn't find the phrase it returns negative one so we need to make sure it's not negative one and then we'll exit out okay great so now what should really happen let's let's run this again and see what was our stop words stop okay how many total cases stopped and there we go a takes it down okay so there we go we're getting pretty good now now what we want to do is get country specific information and then I'm gonna show you how we can actually update this so from like speaking like we asked update and and how can we do that okay so we have total patterns now what we're gonna do is say country underscore patterns and this one is gonna be a little bit different uh might be a little bit more confusing to some of you so I'm actually just gonna copy in these patterns again and I'll explain how they work so this one let's let's tab these forward so yes they're in line with that and let's have a look okay so this first pattern is any number of words cases any number of words now this is the idea being that what we're gonna do is we're gonna look through all the total patterns and if we don't match any total patterns then we'll look and match the country patterns or it actually we might do it the other way around no we'll do it that way that's fine but anyway so like if we have any number of words cases than any number of words then what we'll do is we'll map that to lambda country data get country data country total cases now I know this seems will be confusing but what lambda says is this is an anonymous function that takes one variable country so as a parameter and when it takes that it will call and return this value so since we've done this we've actually defined a function here that calls this function and returns the total cases value from that same thing with total deaths so what we can do is a very similar thing to this except when we call funk this time we just need to put a country inside of it so what I'm gonna do is copy this for loop and I'm gonna paste this here keep forgetting that that ctrl C is not working so let's copy oh what the heck copy and paste okay so now this time for pattern funk in not total patterns but in contrary patterns dot items we'll see if the pattern matches the text and if it does match the text what we'll do is watch we check if there's any name of a country in the text so at the top here I'm actually gonna say country underscore list is equal to data get list of countries and we're actually gonna put that into a set of a list like that so since this is gonna return to us actually know that is a list set no set should be fine actually what am i doing what do I need list like that let's just do set a little brain fart there so we'll make this a set and then that way what I can actually do is in oh one time it's probably not relevant to many of you I can check if a country is in that set and if it is then we're good to go so essentially hmm we say if ah that probably won't work actually because I need to just look through all of the yeah so actually this is gonna have to stay as a list and there's gonna be annoying to do but what we're gonna have to do is essentially check for every country if that country exists in the text if it does then we'll get that specific information so we'll say for country in what I call this country list like that and we'll say if country in text and in fact it makes a little bit faster for us what I'm going to do is I'm going to save text I say words equals text dot split at space and we'll actually put that to a set so that we can check very easily know one time if the countries in the text so we say if country in not taxed but the end of words then what we'll do is we'll say okay salt equals the function of country now this again it might seem a little bit confusing we're using some more advanced syntax will break that for loop as well is we've gonna pass the country to this lambda function and then it will call the get country data with that country so the idea behind this is we're gonna say for pattern function in country patterns items if pattern match tack so if we match that taxed if we if it makes sense like if this is the pattern we're matching then we'll split the words into a set the reason for this is we go from a sentence it looks like a look like they'll say how many cases in Canada we go from that to now a set right that has all of the individual words so that's very easily now very easy for us to check if a country is in this set without having to you know spend a ton of time computationally doing that so we do that we say for country and country list so for every country let's loop through let's see if the country is in one of those words so if that country exists in the words right then what we'll do is we'll say the result is equal to the function which was here at country which will give us the answer we'll break this for loop and then I guess we'll keep looking through patterns but the chance we're gonna match a pattern cases and deaths it is very slim so then at that point we'll come down here and we'll speak the result now that is the idea behind this um so with that that should do it for the country value so let's actually have a look here and let's see if this works how many cases in Canada stop okay so that worked now I understand some of you are probably still confused with all the drag act stuff just look up right I search patterns if you want to see how they work but again any number of words cases any number of words maps to lambda country and then we have this this function we're calling in the lambda function so that's the idea what I will now show you is how we can actually make a new run and how we can update this data this is advanced it involves using a thread I'll explain how that works but the idea is that like say we run this program like ten days from now well we want to update but we don't have to go back to the power sub tool to make a new run we don't want to change this right we want to have it automatically update for us so to do that is kind of complex involves pulling an end point and updating data but I'll show you how we can do it so essentially we're gonna make a new method here and say this is update underscore data self now at the top we need to import some stuff so import threading and import time both of these are built into pythons you shouldn't need to install them and then inside of update data what we're gonna do is we're actually gonna make a post request to a URL that makes a new run now I need to copy in this post request because it's like I can't just I don't have the memory so I need to copy them in but if we look at them well so response equals request stop post notice this isn't get this is post and we're posting to the same URL except instead of so if we look here instead of last ready run data at the end we're gonna post to run right so we have HTTP Parcel calm / API be to project cell top project run / run we have the parameters self dumper Am's and again self dot params is defined up here with the API key for verification so what that does is it initiate initializes a new run on the parse hub servers so this run takes a few seconds so right so we can't just immediately ask for the new data because we don't know when this run is gonna be finished in fact it changes times based on you know how how much volumes on the server and stuff like that so we need to continually pull this from this kind of endpoint and see when this is done we need to keep waiting to see when this is done now there's a few ways that we can do this we use something called web hooks which I'm not gonna use because they're kind of complex but what I want to do is actually set up what's called a new thread it's gonna every five seconds check this endpoint here and see if we got any new data because what this endpoint does is it returns to us the most recent data that we have right that's the last ready run so what we'll do is we'll keep pulling it until this data changes so until the data we're getting is different than the data we currently already have then we'll keep pulling it and as soon as we get new data we'll update our data and we'll you know tell the user whatever we've been updated so what we'll do here is we'll say old underscore data equals self data we're gonna define a function called pol and then what I'm actually gonna do is inside of here we'll pass for now and I'm gonna say T equals threading dot thread target equals pull now what this says is let's make a new thread now the way threads work essentially is there are two separate kind of running instances of the program now it's really hard to explain the threads without going into detail which I don't really want to do but the idea is that if we run a thread this won't interfere with what's happening here right because the idea is inside of this thread we're gonna be constantly asking the server for a response and that takes some time and I want to make sure that while that's happening I can still interact with the program so if I put this in a thread then that means this will only kind of take over our voice assistant part when it's actually running which will be for like a few microseconds whereas if I didn't put it in a thread we would actually have to wait a full minute or until we get the new data before we'd be able to actually have that updated data and interact with the voice assistant again hopefully that's a good enough explanation but to make a new thread in Python 3 you do something equals threading dot thread and then you start the thread like that so we'll start the thread pull and I've just defined a function inside of a function here I don't really need to do this but since it's only used inside of update data I'm going to um and just you know I know this is weird but just understand this is fine you can define a function inside of a function it's called an inner function right so we had pull now inside a pull what I'm gonna do is I'm gonna sleep immediately Bruce you're 0.1 seconds the idea of this is that whenever one of our threads isn't doing something it'll kind of release itself and let the other ones start doing something so I want to immediately when I start pulling give kind of access back to the main thread which is what's running the voice assistant so that it doesn't this doesn't take over that thread and doesn't for like a few seconds relax like that's the idea so since this sleeps it's like okay this threads not running anymore it lets the other thread run which is the thread that's running the voices system hopefully that makes sense okay so we're gonna say time to sleep equals that I actually can just say old data inside of here oh my gosh I keep forgetting I need to do this copy how many times did I make a copy and paste error in this video tutorial be curious to know okay so old data equals that I'm just copying what I have over here to make sure we don't mess up will say well true so we'll do a a while loop and every five seconds I'm gonna ping this URL so I'm gonna ping get data and actually what I'll do and get data is I'll return data now the reason for this is and we'll have to change this up here so it's a data self that data equals equals self bucket data so rather than just setting the data attribute we'll return it so that that way we don't automatically override the data we have unless we want to if that makes any sense that's you'll see how we're gonna use this function down below but just make sure you modify it so it returns data and now we have self data equals self to get data so will be equal to whatever was returned from this method alright so let's go here and we're gonna say new underscore data equals self dot gets data now we're going to check if this data is equal to the old data and if it is then what we're gonna do is we're gonna wait five seconds and then we're gonna ping that again we're gonna do this again so we're gonna say if new data does not equal old data then what we'll say is self dot data equals new data so we'll update that data and then we'll break and we'll print actually data updated so data updated like that now if it doesn't then we'll just timed out sleep for five seconds and that should actually be all we need to do so this is essentially saying that we'll make a new thread this thread will every five seconds hit that endpoint inch and check for new data if it gets new data will stop running this thread so we'll break out of this while loop will break out of the thread and we'll set the current data equal to new data which means that when we now call again the the function right and the read that's the reason why if you look here I don't just call the function actually put the name of the function when I call that function we'll get the updated data so that's the idea behind this now what we need to do is make a verbal command to update the data so what I'm gonna do is we'll say like update underscore command or something now we could make this a rag ice pattern but I'm just gonna make this update just to make it really easy so we'll say update command is update and then what we'll do is at the bottom here will say if text equals equals update command then we'll have to do is data dot update data and let's just do a little speak here and let's actually say result equals data is being updated this may take a moment oops if I could type okay so this may take a moment exclamation point all right so that's pretty much the program now I'll show you how that works but this will again take like 30 40 maybe even a minute to run so I'll skip through it if it takes that long but let's run this update okay so we can see that that's happening now what I'm gonna do is just wait and I'll wait to see when that new print statement comes and says data updated how many cases did Canada have a so you can see that it says data updated here and then I asked how many cases Canada have and it gave me I'm hoping an updated value I mean I don't know how quickly the website updates but the idea behind this is that you know tomorrow when I want to use this I don't need to go manually run it I can just say update at the beginning and then I can wait and it will update right so it said data updated which means our dad is updated and that pretty much means this tutorial is well over um I'll put a link to this code that we've written in the description in case you guys want to copy this down these are you know my private API keys and stuff I've just left them blank cuz I can't be bothered to really deal with them I'll delete them after the video goes live um but yeah that's that's the idea so I hope you guys enjoyed this project this stuff is really cool and I think you can do a lot cooler stuff than what I've done but again the objective was to show you the base show you what you can do and then let you guys kind of take it from there so hopefully you enjoyed if you did make sure you leave a like consider becoming a channel member and supporting the channel I definitely appreciate that of course subscribe if you're not and I will see you guys in another tutorial video