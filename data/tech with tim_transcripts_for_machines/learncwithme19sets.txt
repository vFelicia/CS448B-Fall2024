hello everybody and welcome to another c plus plus tutorial for beginners in today's video i'll be covering sets now a set is a data structure that tells us if an element is present or not that's really the best way to describe it well in this video i will talk to you all about it so the best way that i can describe a set in the shortest number of words possible is an unordered collection of unique elements keep that in mind as we go through this kind of example here a set is an unordered collection of unique elements what that means is that when we use a set we do not care about the order of elements we do not care about the frequency of elements we simply care does an element exist or does it not there's a lot of very good use cases for a set and the reason you would use a set is a similar reason to why you would use a map because finding if something exists or if it doesn't exist can happen instantly so unlike an array where as i described you we need to look through the entire thing or unlike a vector where you need to look through the entire thing because it's an ordered collection of potentially nonunique elements in a set the element either exists or it does not and so to find it can happen instantly it doesn't matter if the set has a million elements or if it has one element now i want to be very clear here as i describe this this is kind of a generalization there is some instances in which you're using a set or a map and it will take a little bit longer than instantly to discover if something exists now that is again well beyond the scope of this tutorial i'm not getting into lower level implementation of c plus builtin features but just understand that all of this is a very general way of looking at this as you learn more about computer science and c plus and programming in general you will kind of realize how these things actually work beyond the level at which we're using the map anyways with that said let's get started here i'm going to include set so include set like that so let's make a set when we make a set what we do is we say set we do our angle brackets we do the type in this case i'll just make it actually let's make it a char set and then we do the name of the set so i'll say s1 now if you want to initialize the set uh i'm just looking at my kind of cheat sheet here actually it doesn't even show what i can do let's just try to initialize the set by adding some characters like c and d to it and see if this works all right so when i run this no problem so uh this kind of confirms my assumption that if you would like to create a set what you can do is put all of the elements that are in the set uh just in curly braces like you would in an array and you can initialize it that way or you can declare the set by simply doing set the type and then the name of the set and well that works as well anyways let's add a few duplicate elements into this set and let's iterate through this set and let's see what elements are actually in it so i'm going to say 4 and i'm going to use kind of that iterator pattern we've seen here so i'm going to say auto s1 is equal to sorry not s1 auto itr is equal to s1 dot begin and then i will say itr does not equal s1 dot end and then i will say plus plus itr now again remember a set unordered collection of unique elements and well that means we are not sure what order we are going to get elements in when we loop through the set and so this kind of means nothing when i write like this specific ordering of elements just just keep that in mind okay that we don't know the order of elements in a set then what i'm going to do is say c out asterisks itr and end l and let's see what we get all right so we get c and then we get d notice i didn't get c d c d i didn't get c c d d i only got one c and one d and that is because when you insert an element into a set that already exists it doesn't do anything because we only care if something exists or if it does not exist in a set that is really the purpose of using it and if i decide to add maybe an a here and we run this now notice we get acd even though a was at the very end of the set so we don't really know what order we're going to get elements in although this might make you assume that you're going to get it in alphabetical order anyways that is a set so hopefully that's clear on the basics of a set and i'll kind of leave this here so we can see what happens as we insert and remove elements from the set so to insert something into the set you can say s1.insert and then you can just add whatever you want so maybe we'll add a b or something we can run this now we see all is good a b has been added in and kind of confirming our assumption that it's probably printing out in alphabetical order anyways we can also erase or remove an element from the set so i believe it's actually a race uh let me look here and see if that is what it is where's all these methods i have a list of all of the methods i think that a race race yep a race looks good so we can erase maybe the key c or the element c so when i do that notice that now c is no longer printing out and so that is kind of the most basic aspects of a set that's how you insert that's how you erase and well this is how you iterate through it now a few other things we can do we can check if an element is present and say if and we'll say s1 dot finds and we will look for some element let's say we're looking for element c we can say if that is equal to s1.end that means the element does not exist so i can see out could not find c and we can do an end l and then otherwise we can say c out and found c exclamation point same thing and l okay so let's run this now and notice that we're getting could not find c a b d because well c is not in the set and so this same way as in the map is telling us it's not there if we look for a b uh well actually we did see so let's just not erase c now so if we don't array c and we run this it says found c it's telling us c is in the set okay so that is really like that's pretty much it for a set now let's just run through a quick example here and just like i did with the map i will create a string so let's say string test is equal to this is a test iij whatever a bunch of random letters okay now we're gonna do is say set char um occurrence is equal to and actually we can just do it like that we don't need to define or initialize it and instead of occurrence let's just make it easier let's just say exists okay now what i'm going to do is loop through the string so i'm going to say 4 and we could use a string iterator here too or we can just loop through it in the way we normally do so i can say int i is equal to 0 i is less than test dot length and then i plus plus or again just because i think this is the proper way we'll go plus plus i and then what i will do now is say exists dot insert and we will first define the letter so we'll say char letter is equal to test at i now notice we don't have to do this i'm just doing this because it's kind of good programming practice to define what it is you're actually inserting and kind of make it easier to read but you could just put test i in here like you could do test i without defining the variable first but for me i just like to define the variable so i'm going to say letter and we'll insert that into the set so now what we've done is we've looped through the string we've inserted every single element in the string into the set now i want to look at all of the unique elements in the set and so what i'll do is say 4 and then i will loop through the set so i will say what is this going to be auto itr is equal to exists dot begin i'll then say itr does not equal exists dot end and then we'll say plus plus itr and then i will just oops c out and asterix itr d reference and l okay let's run this and what we're getting now is all of the unique letters including the space that is in this string now it doesn't matter if i add like a ton more a's we're not going to get another a here because well it's a set right and so if we add a in again it doesn't do anything because it's already in the set so there you go now we can do actually a quick example here again this is kind of another thing you might see in a coding interview speaking of coding interviews if you guys want to prepare for them you know what to use algo expert which is a sponsor of this video and this series they have over 150 coding interview questions many of which use sets dictionaries and a lot of things we're talking about here check out our expert from the link in the description and use the code tech with tim for a discount on the platform anyways good segue there what we're going to do now is i'm going to create another string i'm going to say string find is equal to and then i'm going to say say the word hello okay so let's say we were given a problem we said okay you're given this string called find and you want to determine if all of the letters in this string are also present in this string so you want to see if all of the unique letters here are also present in this string right here there's a few different ways to go about doing this but using a set we can do this kind of elegantly we can create a set that stores all of the letters in this string that we're trying to look for then what we can do is loop through this string we can remove all of the uh letters here from the set that contains the letters in this string and if at the end of going through this entire string this set is empty that means that this first string contains all of the unique letters that are in this string hopefully that kind of makes sense but i'll just run you through it and we can see how that works that's a good example so i'm going to say set i will say find letters like that so now we need to go through and essentially add all of these elements into the set there's a few different ways to do this just some shortcuts as well but we're just going to do the long way because it's good practice i'm going to say 4 int i equals 0. i is less than find dot length plus plus i will then say char letter is equal to and then this will be find at i and then we will say find letters oops find letters dot insert and we will insert uh what is the letter letter like that okay so now if we were to print out all of the letters in this set we would get h e l and o so now we want to go through here and see if this contains all of the same letters that are in here so what i'm going to do now is say 4 and we'll say i guess int i equals 0. i is less than test dot length and i plus plus we'll say char letter is equal to test at index i and then what we will do is erase this from the set so we'll say set dot erase and we'll erase letter okay great so then finally what i'm going to do here is write an if statement i'm going to say if and don't worry i'll go through all this code in a second i just want to type it out first i'll say if the find letters dot size is greater than zero then that means c out no it does not have all letters i know it's not really great english but you get the idea else we can see out yes it does okay great so anyways let's just quickly run this actually let me see if this works uh warning character constant oh i forgot about this this needs to be double quotation marks my bad and missing template argument before dot oh i don't know why i called this set uh look at how many errors i have i need a semicolon there this isn't set this should be find letters let's run this now and there we go no it does not have all of the letters and so that is working as intended okay let me run through all this code i know i went through this pretty quickly so the idea is that we were asked all right we have this fine string we have this test string we want to see if all of the letters that are contained in fine unique letters by the way are also contained in the test string and so what we do is we first create a set we call it find letters we then add all of the letters that are inside of this find string to the set that's going to automatically handle not having like duplicates and anything for us because if we add two l's it's just going to be one l that remains in the set then we go through the second string for all of its letters we remove them from this set because then that means if we remove every single element from this set this string had all of the elements that were in this string if it doesn't though if this set does have at least one element that means that we did not right like we did not have all of the same letters and so in that case we would print out no it does not have all the letters however here the letter that we're missing i believe is an l um we might be missing an o2 yeah we are also missing an o but we have an e and we have an h so now if i add an l and an o in here and we run this we should see that it says yes it does it does have all of the same letters we can even make this a bit simpler we can make this string say like this like hello with only one l and we'll see we still get yes it does because even though it doesn't have two l's that doesn't matter although if we remove the o it's going to say no it does not have all the letters so this is an example of where you might use a set of course there's a lot of other examples but hopefully that kind of brought everything together for you and again i'm trying to do some longer examples here so we can see how we actually solve problems with all of these tools that we now have anyways if you guys enjoyed make sure to leave a like subscribe to the channel i will see you in another youtube video