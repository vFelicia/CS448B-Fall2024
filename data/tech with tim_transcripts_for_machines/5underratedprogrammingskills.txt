in this video i'll be sharing with you five underrated programming skills now of course this is my opinion this video is subjective and if you disagree with me please leave a comment down below and tell me what you think is an underrated programming skill with that said i'm going to list them out right now and then i'll elaborate on them in the sections in this video so the first underrated programming skill is reading documentation the second is copying and pasting especially when you are working in a new code base the third is writing selfdocumenting code the fourth is having proficiency in linux and the fifth is keyboard shortcuts and environment setup now one last thing that is also underrated is the sponsor of this video thanks to loom for sponsoring this video loom provides an easy to use tool to create asynchronous video for work loom helps you focus and get out of those useless meetings by allowing you to easily record your camera screen or both and share it with a single link loom is used by over 14 million users and has awesome features like the ability to instantly edit your videos and remove filler words including um and like loom has tons of use cases but for software developers like yourself it can help to improve code reviews by allowing you to easily demo features record bugs or issues and document your feedback not to mention it seamlessly integrates with github gitlab and other development tools loom videos can contain calls to action reactions and comments drawing and illustrations and content security loom is available as a desktop application chrome extension ios and android application and one of the best parts of loom is that it's free and you can get started with it by clicking the link in the description all right so let's go ahead and get into it i have five underrated programming skills for you i'm hopefully gonna prove to you in this video why i believe they are underrated let's get into skill number one which is reading programming documentation now i understand that this seems relatively obvious but a lot of people omit this and don't end up doing this until they're actually required to do so what i mean by that is until they get in a situation where there's no tutorial there's no video there's no great website article explaining how to use something and they actually have to dive into maybe a more niche technology or something that's maybe internally documented so maybe you can only use it within your company it's not open source and all of a sudden they're lost and they're having a very difficult time understanding how to use some framework module library whatever it may be so what i'm saying here is that it is underrated to understand how to quickly read programming documentation and especially how to extract the important information from it now this really can apply in all areas of life and especially in any kind of academic field where you need to read a lot of stuff programming being one of them but having the skill to first of all find the information that you're looking for and then extract the important parts of that while kind of ignoring all of the fluff or the stuff that you don't need to know is very very important and just to give you a real concrete world example here the reason why i'm actually successful on youtube is because a lot of people don't know how to read documentation i make youtube tutorials i make all kinds of videos teaching programming frameworks libraries all of that kind of stuff and the reason i'm able to do that is because i can read documentation a lot of people don't know how to do that to the same level that i can do that and that's why they would watch my video i go in read a piece of documentation for maybe 15 20 minutes pull out the important parts kind of make a summary of that and then i essentially teach the documentation in a more digestible form online that's how i'm able to be successful and the reason i can do that again is because a lot of people have trouble reading programming documentation so i won't keep going on and on about this hopefully you get the point it is very important to understand how to read documentation and to get better at it you really just need to do it there's nothing wrong with watching tutorials or going through videos it's a very helpful and quick way to learn something but as you get better and into more niche technologies you need to know how to read programming documentation alright so now let's move on to skill number two which is copying and pasting especially in a new code base now i understand this sounds trivial or this is very vague depending on the way that you're looking at it but what i really mean by this is being able to quickly start implementing some type of features or adding to a code based simply by copying and pasting existing stuff that is there now to give you a concrete example here when i worked at microsoft i was an intern i only worked there for three months and so i had to really quickly get up to speed in a brand new and massive code base there was hundreds of thousands if not millions of lines of code now whenever i needed to do something i was usually given kind of a small task but it required either that i write it completely from scratch or i obviously implement it in the existing code base using the complex features and kind of rooting systems and all this stuff that they had going on now i remember that the way that i was able to get through some of the smaller tasks that i had was by looking for similar functionality or similar features in that code base and literally just copying and pasting them into a new file or the area of code that i was working in and then very slightly altering things so that's kind of the skill that i'm talking about here is being able to read code and understand what it does without having to kind of write it from scratch so what i did at microsoft right is i would go and look at features again very similar to what i needed to do figure out the way that they did them literally just copy and pasted the correct section of code by being able to understand what was going on pasted that wherever i needed it and then made very slight tweaks this way i knew i was doing things the correct way based on what was already done in the code base and i was able to get through those small tasks with relatively little familiarity of the code base now of course once you get better and more familiar you can start writing stuff without copying and pasting a ton of crap but that is kind of what i'm talking about here hopefully this is making sense a little bit hard to explain but copying and pasting is a great skill and i guess the way you get good at this is by being able to read and understand code and kind of knowing the sections that you need to copy and paste so now we're moving on to skill number three which is writing self documenting code now really what this means is writing code that does not require comments and doesn't require someone else to explain it to you so essentially your code is selfdocumenting if someone who doesn't have familiarity with the code base can hop in there and understand to a relative degree what's going on and what you're trying to do now really the two main things that are going to make your code selfdocumenting is good naming conventions and good structure it's not even necessarily about the logic that you're using although there is some techniques you can use to make your code more readable but if you just give good variable names good function names and you structure code in a really good way where everything's kind of in the correct area and there's no you know massive functions or massive classes that are taking on too much responsibility your code is going to be selfdocument now a lot of people myself included are lazy when they're programming we like to name our variables x y z uh you know a1 a2 that type of stuff but that is really really bad practice and that's something that makes it almost impossible for yourself or anyone else to quickly understand what's going on in a section of code instead of doing that giving descriptive variable names and descriptive function names even though they may take a little bit longer to type out is really important and really helps you selfdocument your code for example one of the reasons a lot of people tell me they like following my youtube videos is the style in which i code every time i have a variable name or i have a function or i have a class i really think carefully about what i'm naming it and make sure that it actually explains what's going on and isn't misleading now i can't necessarily think of a great example off the top of my head here you can go and click on a recent kind of coding tutorial of mine and you'll notice right away that when i'm naming variables naming functions naming classes there's a lot of thought that goes into that and it really helps selfdocument the code i think this is a really underrated skill i know a lot of really really great programmers that can code pretty much anything out when i go and look at their code in my opinion it kind of just is really messy looks like garbage and i can't understand it and to me the best code is the simplest code that is selfdocument i don't want to have to write comments i don't want to read comments if you can write selfdocumented code that is an awesome skill and a great habit to get into now we're moving on to skill number four which in my opinion is linux proficiency and when i'm talking about linux proficiency i really mean being comfortable using the linux operating system understanding kind of the basics of how it works especially users and permissions and knowing kind of the default commands you're going to use most commonly now the reason i'm putting this here even though i understand some people don't need to work with linux is because a lot of times when you're doing development you're going to be doing that on linux you're going to be either working on a linux operating system or hosting something on a linux operating system and you're going to have to ssh in you're going to be using a lot of different commands and being able to do this quickly and not have to kind of look up and cross cross reference a ton of commands is really helpful for productivity and efficiency so for me as soon as i actually started getting good at linux and comfortable using the system i noticed that i was just much quicker to go and deploy anything anytime i had to do something on a linux machine that wasn't a hurdle that wasn't a roadblock for me and i didn't feel kind of intimidated to go do that i need to host a website okay no problem i'll spin up a virtual private server ssh into that and get going right because i have the confidence i know that i have the skills to be able to work with that without having to look up a ton of stuff look at a bunch of articles you know spend hours essentially trying to learn linux while accomplishing some type of task so i get it this may be controversial i'm sure many of you probably don't need to work in linux but for me i work in linux a ton and i think it's a really underrated skill to actually understand the operating system and know a lot of the commands off by heart it just really speeds up your workflow at least for me anyways that is skill number four let's move on so lastly we are moving on to skill number five which is learning and using keyboard shortcuts as well as setting up your environment now really the goal of this section right here is to say that you need to reduce the amount of repetitive work that you're doing when you're programming and try to be as efficient as possible a few seconds here and there constantly over the entire day saves a ton of time and when you extrapolate that over multiple years of using say the same piece of software it's really really powerful how much faster you can be when you actually learn keyboard shortcuts and learn all of the kind of the tricks and neat things you can do in different pieces of software for example in vs code there is tons of different shortcuts i've learned let's say 30 or 40 of them that really speed up my workflow and when i need to use a new kind of feature quite commonly i'll always look for the keyboard shortcut that's kind of a habit for me the first thing i want to do is find the shortcut for that so i don't have to keep going through the ui menus and kind of searching for this feature whenever i want to use it now to give you a more concrete example here i edit all of my videos in premiere pro i actually don't do a lot of the editing i just do kind of a pre content cut and then i set it to my editing team who actually adds the transitions regardless for the longest time in that software i never learned the shortcuts i didn't know the cut shortcut i didn't know the fast forward shortcut or like change the speed to 2x i didn't know a ton of different shortcuts and because of that reason i was spending so much time on my mouse actually looking at the user interface finding the button for the feature i wanted moving the mouse over it seems like a really trivial thing but when you're spending five seconds to make a cut in your video and you do that you know a hundred times in the editing session it's really really helpful to actually know the shortcut and then use that forever and when you use a bunch of shortcuts you actually have the muscle memory of using them right and so now you don't even have to look down at the keyboard you don't have to look at the user interface whatever you just know what you need to do to get a task done now of course the same thing is going to apply to coding there's so many different shortcuts when you start learning the different shortcuts you may also realize some other features that are way more accessible from the keyboard than from going through you know 10 layers of ui menus so that's kind of the point here the last thing i had was environment setup so there's lots of times where you can set up your environment to for example automatically test all of your code that's really useful that's gonna save you tons of time if you're working on a large project maybe there's a script that you need to run quite frequently why don't you bind it to a keyboard shortcut why don't you make a shortcut on the desktop whatever just trying to do everything possible to increase your efficiency and reduce the amount of redundant and repetitive stuff that you're doing as programmers we really should be automating the repetitive tasks i'm guilty of not doing that in a lot of projects and it really comes back to bite you and costs you a ton of time when you could have spent you know the five minute upfront investment to kind of set up the environment and get everything ready for maximum efficiency going forward anyways that's all i have for this section and for this video i actually will leave you off with one other underrated thing now that underrated thing requires me going to my streaming software here and this is my cat having a programming cat definitely underrated this is fresca and you guys have seen her on the channel before likes to hang out on the desk great companion for uh for late night coding definitely underrated anyways with that said i hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel please check out programming expert if you want to become a software engineer as quickly as possible link in the description you can use discount code tim and i hope to see you in another youtube video