hello everybody and welcome to video 7 in this rust programming tutorial series in this video i'll be going over conditions compound conditions and control flow so if else if and else now if you're wondering why my camera is not on i'm just not feeling the greatest right now and it's easier for me to record without the face cam and the lights and all of that so for now in the next few videos i probably won't have a camera hopefully you guys don't mind but likely in the future the camera will be back all right with that said let's dive in i know you guys understand these topics or most likely you do if you've seen other programming languages before so i'll go relatively quickly and just show you the core operators and syntax and all of that all right so let's start with a condition now condition is really just any expression that evaluates to true or false or the boolean data type so you can create conditions using conditional operators and the operators that we have in rust are very familiar to other programming languages we have the less than operator the greater than operator less than or equal to greater than or equal to uh not equal to and then is equal to with two equal signs so pretty straightforward but these are the six core operators you can use when you are comparing different uh types or not different types i guess different values together in an expression and when you use these operators your expression is going to value evaluate sorry to true or false so let's have a look at a quick example let me do something like let con standing for condition equal to less than three let me make sure i don't forget my semicolon we can then print this out and you can take a guess at what you think the results gonna be although it's pretty straightforward and you'll notice that we get true because 2 is indeed less than 3. then of course we could do less than or equal to now if we put a 2 here this will evaluate to true and i think you get the point that is the basics now one thing to note here is that when you are comparing objects that are different types to each other you can run into errors so let's just see what happens if i do something like 2 less than or equal to 2.2 now when i run this code here notice that i actually get an exception and it says no implementation for integer less than float and integer greater than float so it says expected integer found floating point number in step so you need to make sure that you're using the same types on the left and the right hand side and if you are trying to compare say a float to an int then you need to convert in this case the int to a float so that you have the same type and you're not losing any data from your float so in this case if we want to fix this what we can do is something like 2 as and then i'm just going to say this is an f32 i believe by default this will be an f32 as well and now when we try to do this comparison here let's go cargo run notice that we get true because now we have the same type on the left and the right hand side if you're unfamiliar with how to do the type conversions then refer to the last video because i showed them quite in depth how you convert all of the different types and variables and all that okay so that is a condition i think we have the basics on that now let's look at compound conditions now a compound condition at least what i like to call them as compound conditions is just multiple conditions kind of chained together using something called logical operators now the logical operators are your and or and not however in rust they are uh represented with some different syntax so in python for example you just write and but in rust the and is going to be two amperes the ore is going to be two pipes and then the knot is going to be an exclamation point here so these are the three logical operators in rust again this is and this is or and this is not now if you're unfamiliar with these let's do a quick example so let's do something like condition two is equal to and then i'm gonna say true and kant now what this is doing is essentially checking if both the left and the right hand side are true so the and operator will return true if the left and the right are true but if either the left or the right are false or both of them are false it will return false so in this case i have true and the condition we know this condition is true and so we'll get true here if we print out con 2. so let's go and do this and notice that we get true whereas if i make this one false here well this is still true but now since one of the sides is false we're going to get false okay that is the and operator fairly straightforward and of course if we had two falses here we would also get false okay now let's look at or so the or operator is simply two pipes and this tells us if either the left or the right hand side are true so if either of them are true we get true uh if both of them are false we get false so let's run this cargo run and notice we get true and just to show you here if both of them are true then we will also get true because either the left or the right hand side is true and there you go we got true okay so that is the or operator and then lastly we have the not operator which i like to call the negation operator and what this does is simply flip whatever the result is or of an expression or whatever the boolean value is to the opposite i know that was kind of a mouthful but what i mean by that is that if this expression evaluates to true and we have a not outside of it it's going to make it false so we simply flip whatever it is whereas if this was a false and we have the not then it would become true so it just makes it the opposite so if i run this here cargo run notice that i get false because inside of here we did have true and then we applied the not and that made it false whereas if i go here and i say true or not conned or i do something like i guess false or not kant now what's gonna happen is we're going to negate whatever the value of this condition is so we should end up getting false or false and that should lead us to a false result here uh which is what we get now we get some warnings here i'm not sure exactly why oh it's saying we don't need the parentheses okay well that's fine we can leave them for now okay so let's actually just clear the screen here and continue all right so that is the basics for the logical operators uh one last thing i will mention here is there is a precedence when you are applying the different operators uh the way it goes is you're going to apply all of your knots first then you're going to apply your ends then you're going to apply your ores now the only exception here is if you have parentheses then you're going to apply whatever's in the parentheses first just like you would in arithmetic operations okay so hopefully you got that we're going to do not and and then or i won't go through an example here but it is useful so just remember you have the not and or so if you're ever looking at a um what do you call it a compound condition that doesn't have parentheses you know in what order you need to apply the different operators okay so we have con we have con 2. now what i think we'll do is simply write an if else if an else statement and just show you the basic control flow here and rosten that we can end the video so let's get rid of this print line let's just do something like let food equals and i'm just going to go with something like a cookie for now and let's write an if statement that simply checks the value of food against some conditions that we have and if those conditions are true we'll print something otherwise we won't print something so an if statement is like this and rest you write if you write some condition in this case i'm going to say food is equal to and then cookie and then you open up your curly braces like this and inside of the curly braces you can write anything that you'd like to happen when this condition is true so pretty straightforward but if whatever you place here is true then you're going to do what's inside of these curly braces so in this case let's just go print line and inside of here we can do actually i won't do a formatting string i'll just say i like cookies too exclamation point okay let's run the code here and notice that i get an error because i forgot my semicolon so let's add our semicolons here i keep forgetting to do that and now we should see that we get the string i like cookies too because this condition is true now of course if we change this to be not equal to and we run the code fairly intuitively nothing is going to print out because this condition was not true okay that's it for the if statement now with an if statement we can also use an else if statement or an else so start with the else i'm sure many of you are familiar with this what the else allows us to do is essentially run if this condition is not true so if the if statement doesn't run then whatever's inside of the else will run so we're gonna do one of the two things here but never both i'm gonna say here oh that's too bad exclamation point okay so now let's just change this to be not equal to although that doesn't quite make sense what we're printing but that's fine and notice that i get oh that's too bad because this condition wasn't true so we defaulted to the uh to the l sorry and we did here now of course if this was true then we wouldn't run what's inside of the else great now we're almost done here the last thing to show you is that we can also add something called an else if now you can have as many of these elsifs as you'd like but they need to come after an if statement meaning you can't just write an else if randomly you can only write it after an if statement and before any optional else now as you saw we also don't need the else or the elsif statement i just wanted to show you that we can have multiple of these right so if i have else if here i can do another condition now and the way this works is if i check this and it's false i will then check this and if it's true i'll do whatever is inside of here if it is not true then i'll default to the else so i have an option here to check multiple conditions in a row so in this case i can say if food is equal to fruit then maybe we just do something like prince line that sounds healthy right and we'll keep the exclamation point and now if i change this to say fruit what's gonna happen is we'll check this condition it will be false since it's false we will then check this condition it'll be true and then we'll print this out and there you go okay so let's clear let's run and notice that i get that sounds healthy now one thing to note here is that if this condition is true we will not check any of these or will not do any of these statements so if even if this condition story is true but this one is true as well we will never execute this line of code because as soon as we find the first true condition we execute the block and then we skip the rest of it so keep that in mind you need to kind of put your conditions in the order in which you want to check them now with the elsif we can have multiple of these as i mentioned so i can just paste another one here and say else if food is equal to and i don't know we want to go with here i'll just say bread and i'll say that sounds boring okay and then if we change this to bread let's go here and notice that we're going to get that sound board alright so i think that is all that i need to show you in this video this is fairly straightforward again i imagine most of you already know these concepts that's why i'm kind of going over them fairly quickly just to reiterate here when we do an if statement we simply write the condition if this condition is true then we're going to execute whatever's inside of the current curly brace block and we're going to skip all of the rest of the statements that are part of this if statement now if this statement is not true or if the condition is not true then we're going to go and check all of the other conditions until we find one that's true so if this one is true we execute this we skip the rest if it's false then we execute the next one or we check the next one if it's true we do this we skip the rest if it's false then we just default to the else here and do whatever's here now of course you don't need the else but if you do have one it needs to come after any of the else ifs that you have and same thing with the else if you don't need them but if you do have one it needs to come after an if statement of course you can also nest if statements inside of each other so i could put another one here and do whatever i please inside of this if statement so with that said i am going to wrap up the video here hopefully you found this helpful if you did make sure to leave a like subscribe to the channel and i will see you in another one you