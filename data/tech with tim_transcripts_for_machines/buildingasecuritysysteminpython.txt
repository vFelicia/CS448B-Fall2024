broke so I'm starting this video on a bit more of a depressed note than usual and that's because as you guys would have just seen a few hours ago my house was broken into now fortunately I did have my security system running the one that I built myself using python just last weekend so I was able to actually get all the video footage of the person who broke it now I will say they were extremely attractive young white male about 5 10 ripped super handsome so if you guys know who that is please leave a comment down below I've already reported it to the police and to the insurance but I wanted to make this video so that you guys don't run into the same problem where you have an extremely good looking robber breaking into your house so if you guys want to learn how to build a security system in Python make sure you watch this video I'm gonna go through the architecture I'm going to talk about the code and of course I'll leave all of the links in the description so that you guys can avoid this situation or at least catch someone if they do break into your house just like they broke into mine alright guys so all jokes aside I want to share with you a really great project that you guys can work on extend or even build from scratch which is a python security system the idea here is just to give you a quick overview of how it works talk about the architecture and give you a really great project that you can work on and especially add to your resume this is one I've been wanting to build for a long time but never got around to so fortunately I had a weekend to spare and I kind of coded this out in a few hours set all the different things up and I want to give you a quick demo of how it works and then talk about the architecture and the layout so you guys can go and build this yourself I promise it's a great project looks really really good on a resume especially because it's a real world use case so in front of me you can see here that I have my security system admin panel now this is just a really simple user interface that shows all of the videos that were recorded by this camera setup now I'll dive a bit more into the architecture later but essentially I have my MacBook just sitting down kind of in my main floor and I have it hooked up to a webcam that's on a tripod and that's kind of running most of the software which is recording all of this video now this is just running on a local web server on a react server here where I'm able to preview all the the videos and you can see I can click into like a video like this where I was just testing it out and we can play the video and you can see me kind of waving to the camera we can go full screen exit out of here go back and then I have the ability to disarm or arm the camera uh so I can actually see what's going on now additionally I actually set up notifications on my phone using twilio twilio I don't know how you pronounce it but you'll see I'll put this up on the screen I have a bunch of text message notifications I get every single time motion is detected on the camera now what I did here specifically is I made it so it only detected person motion that's because I have a cat my cat runs around like crazy and I didn't want to get a million text messages when my cat was just running in front of the camera so I ran a really simple machine learning model uh in something called opencv which I'm going to talk about in a second which actually just detected for people in the frame and as soon as someone left the frame for a certain amount of time it kind of captured that recording uploaded that recording and then allowed me to view that from this panel here now I've set up a few other things where I can kind of go through through some different date ranges you can see here when I was just testing this out I have some videos and that's kind of it in terms of the interface and the demo for this system I know it seems pretty simple but this is really cool you can extend this and you can add different types of motion you can have other kinds of events emails multiple cameras at the same time anyways let me get into the architecture here and talk to you a bit more about how this works so the way I actually started this project was just by creating a few design documents and kind of planning out what I wanted to build whenever you're working on a larger project like this it's usually worth The Upfront investment maybe an hour two hours to actually create a few basic design documents so you know what you're going to be building the different components you're going to have and how they're going to interact with each other so you can see here that I made a basic system diagram I made a sequence diagram and I even did a really quick user interface wireframe now a lot of you guys ask me how I build these documents and the tool that I use is actually called Miro now Miro is the sponsor of this video but it's completely free to use and it's a digital workspace where you can actually collaboratively work on different documentation for your various projects I use them personally just for system designs sequence diagrams all the stuff I just showed you but you can use it for practically anything and you can kind of connect with teammates so I've actually used this with my Discord team a few times and we're planning out some different projects we were going to work on anyways you guys can check them out from the link in the description but for now let me just show you the kind of diagrams I created using that tool for this project so you can see here that I wanted to just start by figuring out what different components we were going to have here so what I wanted to have originally was a Raspberry Pi or some kind of remote computer that wasn't my home machine here my big desktop I ended up just using my Mac because it was a little bit easier but originally it was going to be a Raspberry Pi I wanted to have a camera on that Raspberry Pi such as the webcam and then some person person detection sorry model right so some machine learning model that would actually detect if a person was run now for this I wanted to use Python so I kind of just put that in a little box now that was going to be connected to a flask API and this flask API I wanted to run on the actual kind of physical Hardware device so whatever was running the camera which in this case is kind of the Raspberry Pi anyways the flask API was going to be the main interface between the user interface notifications the cloud storage and all of that kind of stuff so I kind of put that in the middle here and then you can see that I have a Google Cloud object storage now this is where I wanted to actually store all of my videos so I ended up creating a bucket in Google cloud and that's where I dumped all the different video files so essentially the flask API is responsible for arming and disarming the camera saving and retrieving all of the videos and getting information about the video metadata which I'll show you in the sequence diagram in just a second Beyond there we have a user interface I wanted to build this in react with JavaScript so I kind of put those two little icons there and this would connect to the flask API and then that's how we would get the different URLs of the videos and control the camera right so arming it disarming it all of that's happening through this API lastly I wanted to have a notification system so whenever someone went in for another camera it would send me a text message so to do that I used twilio or yeah twilio I think that's how you say it and that's kind of connected to the API so whenever motion is detected from the camera goes to the API stores it in Google Cloud Storage notifies myself and then updates the UI and kind of shows the new video that was there so that's the whole system you can see that we have a few different components going on and it's a good idea even if it looks kind of rough and sketchy like mine does to just plan that out and see how those components are going to interact with each other so beyond that I have a sequence diagram now I'll dive into the code and show this to you guys in a second but you can see this is actually how all of the different systems are going to interact with each other in a specific order if you did any type of computer science degree you've probably seen a diagram like this before but it's really good for visualizing kind of what's going on and what is controlling what right so in this case we have UI our user interface so from the user interface we have really three main things we can do we can arm the camera disarm the camera view the video and that's pretty much it right so from the UI we send the armed command now we send that to the API and what the API does is then go and control the camera so whatever software is running the camera it starts the camera camera starts running and then at some point a person is detected in the camera frame some machine learning model going on there as soon as the person motion is detected it notifies the API the API then goes and saves the video in the Google cloud storage and then that storage is going to return the video metadata now from there we could use that data if we wanted to but this kind of little dotted line is just indicating hey something is coming back from the request or the call that you make so next once we get the video metadata or the URL then what we do is we send a notification so using the notification service which is twilio and then that returns to us the notification is set so at that point I could have added another little box saying user receives notification but you get the idea okay so that kind of just goes infinitely right that will continue to happen every time a new person is detected from there we have the disarm command now once the disarm command is ran that means we're going to stop running the camera or release that resource and then that's pretty much it for the camera until we decide to arm it again lastly from the UI we can view the video when we want to view the video we go to the API the API then retrieves any of the videos or video that we want to view returns that data and then returns that back to the user interface so hopefully you can see how this would be a helpful type of diagram but this is what I started with so I knew kind of the flow of my different commands and how the systems would interact with each other alright so lastly after that I did the user interface wireframe now I just spun this up so I had some idea what I wanted to actually create I didn't do the exact replica of this on the actual user interface that I built but you can see that I wanted to have some kind of title the ability to arm and disarm and then just show the different Logs with kind of a little thumbnail image and the ability to go between the different dates or the different pages of videos and then I wanted one other page here just as like a Details page to view the information about one individual video so there you go that is my design documentation now I'm going to get into the actual code here but I just want to show you kind of how I built this in Miro because a lot of you guys ask about this again it's completely free and it's super easy to kind of create the different components alright so I just signed into my mirror account here and you can see if I go to something like my sequence diagram here I will kind of pop this up which I actually just exported as a PDF now from here you can just grab the different components right I could copy and paste them and kind of move them around or I can just use some of the different components from their Library so what I actually did for this is I went over to shapes I went to all shapes and then you see that we have a few different options right it's got basic shapes flow chart call outs you can also go to more shapes and then you can select all the different ones you want now for most of you you're probably going to be interested in the uml uh shapes which are some of the ones that I used or things like data flow but you can see there's stuff related to Azure Cisco so this is kind of um what do you call it made in a way such that if you're a developer you're going to have access to a lot of prebuilt components here to make it a lot easier to diagram your stuff out so I don't think I really need to show you much more than that but the point is that it's super easy to just go in here kind of drag all of the different components that you need need you can just make arrows and move them around and I found it pretty simple to set up the diagrams hence why I use this tool all right so now let's spend a few minutes diving into the code if you guys want this will be available in the link in the description from GitHub now there's a few things that you need to set up here if you want this to work which I'll explain here but if you just want the code and you want to search through yourself then just go to the link in the description you'll find the GitHub page so first of all we have a react front end I'm not going to really run through that front end there all I'll mention is that I just have a few different API calls that are happening from the front end so you can see I've just linked up the IP address of my kind of local server which is just running on my local network so this is the local IP address of my Mac which is running the camera and the API you can see that I start by just getting the status of the camera so if it's armed or not and then I have this kind of little fetch command here which will get me the videos within a certain day so from one day to another day that's how I set it up and then lastly I just have two little commands here two little endpoints disarm and arm two arm and disarm the camera and that's all that's really happening from the front end right interacting with that back end API so that's it for the front end in terms of the back end here I have my flask server super straightforward you can see I have my arm endpoint disarm get armed motion detected and then get logs now motion detected is what's going to be called from the actual camera thread and I'll talk about the threads in one second which will then send the notification to my phone saying hey someone was detected at the front door whatever the camera is that you want to name this okay and then get logs that's just gonna get the um what do you call it kind of different logs or videos sorry from the Google Cloud Storage now in order to separate things out here I created a notification script so this is just simply sending a notification to my text message I've got all this stuff set up in environment variables to my text message to my phone number sorry I've got storage here what storage is doing is uploading to the Google cloud storage and then it is getting all of the videos from the cloud storage within a certain date range so that's something you can do and then what I did here is I just set up some things that I actually encode the video before I upload it to Google Cloud using this ffmpj or whatever you call that simply so that I have the video in a format that the web browser can understand because by default the opencv recording format which is what I'm using for the camera it doesn't actually show up in a preview so I was getting some issues with that so I just had to actually use the software to encode or kind of transcode the video remove the old video get the new transcoded video and then upload that to Google Cloud not sure if that makes sense to you or not but after all of this is done now what I do is I send a request to the API that just says hey this is finished this is the URL of the video and the reason I need to do it that way is that I run all of this stuff in a separate thread and it needs to be in a separate thread because while this is running and uploading the video to Google Cloud I want my camera to still be working properly and be able to record video and detect people while I'm uploading potentially a very long video so what kind of happens is from the camera when motion is detected it then goes and does all of this kind of storage stuff here where it's handling the detection it then sends the request when it's finished back to the API and says hey we've just finished doing all of that and then it sends the notification and goes from there not sure if that makes sense or not but that's kind of what's going on here inside of storage lastly we have camera now this is where most of the complicated code is what I'm doing is I'm reading in a pretrained model which simply detects a person I am then getting access to the camera so whatever the default camera device is in this case it would just be using your webcam you could also set up to use a external camera if you had that set up now inside of here we just have two methods arm and disarm which is what's being called by the API and again everything that you're running here needs to be inside of a separate thread so that your API can be handling any type of request that it's received while the camera is running in a completely separate thread and that's why we have that kind of communication with the API from the camera thread so that we can have data transmitting between the different threads without any complicated locks which I didn't want to set up this is a little bit Advanced if you're a complete beginner this might not make a ton of sense but what I'm doing is running every individual operation that is blocking in a separate thread so that we don't have the two threads conflicting with each other and while we're say uploading a video to Google we can't be recording someone on the camera or while we are recording we can't be receiving a new request from our API so we need to make sure we have these in separate threads so assume as we arm the camera assuming it's not already armed then we're going to create a new thread and run the camera thread otherwise we just dispose of the camera thread which happens right here inside of disarm so inside of run we have a few basic variables right if we've detected a person nondetected counter this is just so that we will keep recording even if the person steps in and out of the frame for a few seconds then we get access to the camera okay and we kind of go through here and we get access to the current frame from the camera we then use that frame to detect if a person is there so this is kind of detecting all the people that are inside of the frame and then drawing a box around them we're then saying if we've detected a person what we're going to do is start recording a video so we're going to actually take whatever this current frame is and we're going to save that into a video file and then as soon as we're no longer detecting a person what we're going to do is take that video and we're going to upload that to Google Cloud which is what happens here in the handle detection that's pretty much it but as soon as someone is detected we start saving a video locally on the computer then we upload that video to Google Cloud deleted from the computer and just continue the rest of the process so that is it for the back end I was gonna say if you do want to set this up then you need to create a credentials.json file with your Google Cloud project where you have a Google storage bucket created and you also need to go into this EnV file rename it to dot EnV and need to put in all of your twilio information to be able to send the notification that's about it everything else is in the readme file and I think with that said I'm going to wrap up the video here the point of this video is just to demonstrate a cool project that you guys can work on extend and build this is something I had a lot of fun making I think it's really cool it's actually useful if I wanted to leave this running 24 7 and I think it looks really great on a resume because it is a more unique project something that not everyone's building and that you legitimately could have a real use case for for example I was going to set this up near my cat feeder and I was going to record every time my cat went and got food and kind of track its eating schedule so that would have been another cool variation of this but I didn't want to wait the days and days to kind of accumulate all of that information anyways if you guys enjoyed make sure to leave a like subscribe to the channel and I will see you in another one remember to check out Miro the sponsor of this video if you want to create those design documents just like I did for this project