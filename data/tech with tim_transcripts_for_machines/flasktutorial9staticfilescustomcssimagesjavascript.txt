hello everybody and welcome back to really flash tutorial so as you guys might be able to tell we are starting off fresh here and what I'm actually gonna be doing is talking about static assets or static files now in flask there's kind of a weird way of displaying images and loading in your own custom CSS classes and using your own custom JavaScript so I'm gonna cover that quickly today and then in the next video we're gonna talk about blueprints which is what a lot of you guys have been asking me about on how we can actually make our flask app into multiple Python files and kind of split it up and make it a bit more organized than what we had before so anyways let's go ahead and get started since I'm starting fresh I'm gonna create a brand new project to refresh you guys on kind of how we do this create the directories on all that so I'm just gonna make a file I'm gonna call this main to up high this will be where we actually have our flask app and I'm just gonna go through and quickly do some things so I guess say from flask import flask with a lowercase L and import render underscore template what I'm gonna do now is just create a brand new flask app we already know to do this on your underscore name underscore and that will just create a very basic kind of home page function here so app dot root will make this just a slash home I'm also gonna show you that we can do more than one route to these functions so I'm gonna do another one for slash which now just means this function can be accessed by both of these different routes I'm gonna say define home and then here we're just gonna return render template and we'll call this one home dot HTML for now and then we'll do something with that okay so now let's run our app so if underscore underscore name equals equals underscore underscore main I believe we say what is it app dot run and then debug equals true like that okay so that should be all that we need to do if I didn't make any mistakes for the main file now what I'm gonna do is set up a template file so we're gonna put all our HTML files so to do that we're just gonna make a new folder I'm gonna call this one templates and then I'm gonna make another new folder this time and we haven't seen this yet I'm gonna call this one static now you might already be able to tell where we're gonna put specific files but essentially any static file we have which means not like a changing file so for example JavaScript CSS images I believe there's some other kind of static files as well are going to go in static directory and then all of our HTML files that we're gonna be rendering again will go inside this templates folder so inside this templates folder I'll create a new file I'm gonna start with a base of each DML we'll also make a new one while we're here and we'll call it home dot HTML we'll start coding up the base dot HTML file and then I'll talk about creating a few files inside of our static directory and how we can import our own custom CSS and then an image as well so let's just create a very basic HTML I'm gonna avoid putting the bootstrap stuff in for now just because it's gonna take up some time we don't need to waste sex we know to do that already so in the head will set up a title like that and then I don't know why it always does that adds the other bracket we'll set up block so we'll just say block title if I could type correctly and then end block now we'll set up a some body tags here so body and then see what it always freakin does that okay and then we'll add another block for 7% block content and then % % and block like so okay so now that we have that we have our base template so let's extend this base template it's a percent percent this is gonna be inside our home HTML file again we already know how to extend so extends based HTML and then we'll add our blocks here so pretty straightforward percent percent block content and then % percent and block and then we'll add our block title which I guess I'll just copy this and put it at the beginning to save us some time okay so now that we've done that let's just fill in these blocks quickly that's what we want to display and then we'll actually get into the static files I know I've wasted a bit of time here but we just need to set this up for the beginning so for our title I'll just call this home page and forever block let's just do an h1 and let's just do home page cuz I'm just gonna apply some basic styles to this so that you guys see how this works okay so we have our home dot HTML file kind of messy but that's fine like that we have our based on HTML file and now what I want to do is show you how we can import our own custom CSS so to import our own custom CSS we're gonna create a new CSS file inside of our static directory so do this I'm just gonna call this style dot CSS it doesn't matter what you call it but make sure you that you remember the name and now I'm going to show you how we can actually load the CSS file from inside here so to do that what we're gonna do is say a link rel equals stylesheet I'm going through this kind of quickly as well because I realize a lot of you guys know HTML so you probably know how this works and then I'm gonna say href equals and then this is where it gets a little bit different so make sure you're paying attention now inside of our kind of flask application it sets a default that all of our static files will be saved in the folder called static which means you actually need to make this folder called static on that I'm showing right here it needs to be called that because what we're gonna do is grab the URL for that static file and then reference the actual specific file name that we want inside of here so to do that we're gonna say URL underscore 4 and then here we're gonna put the name of static so we're just gonna say static like that and we're going to say file name equals make sure you don't forget the quotes and in here the name of your CSS file so in this case style dot CSS the way that this works is essentially we're gonna use the Python code here to grab the URL for the static folder which will give us the URL to here then we can specify the exact file name in this case is styled up CSS and then we'll load that in as a stylesheet now we might also want to do a type equals and I don't actually know if this even makes a difference because sometimes I do without and it doesn't do any different we'll just say text slash CSS and there we go we should now actually have loaded in our stylesheet so I'm not gonna really talk about how CSS works it's just a very basic styling but do you kind of make this easy for us and see that everything's working I'm just gonna set a body color so I'm just gonna say body color I don't know what's let's just do some random FF II I don't think I can actually do FF a why not I don't know what come there that's gonna be but I guess we will see ok so now that we've done that I think we're actually good to go ahead and run this and see if this is working properly we're actually loading this in so give me a second I'm just gonna CMD into this folder and then we'll be right there ok so python maned up I just ran this now sorry that just took me a second gonna open up a webbrowser here let's get this in drag this over and you can see we get homepage showing up in this kind of weird blue color because that is well I guess whatever the color is I decided to make with FFA but anyways that that is how you load in static CSS now if you wanted to have your bootstrapping here as well which you likely would I'm just gonna grab it I have another file open here that actually has that in here what you do is just put your bootstrap HTML or bootstrap CSS link above the other link so what you need to do is put bootstrap up here then you put the link to your custom CSS file and then that way if you do it correctly in your CSS file you can actually override these bootstrap classes and make your own kind of custom HTML and stuff so if you see this like when i refresh that you see that this text gets changed because we had the bootstrap load in here but our color is actually staying the same because that color is gonna override by adding that to the body tag like that so anyways that can get a bit confusing when you have multiple kind of stylesheet you're referencing and you need to override specific styles but this is kind of how you do it you're gonna put your CSS Styles in here now I just want to show you that we can actually create folders within our static folder so if I wanted to say that all the CSS for a specific part of my website is in one folder maybe it's like the login page or the user signup or something let's just say styles like that I'm gonna create a Styles folder I can move this style file into that folder so I'm just gonna do this through subline so Styles like that and now what I would do if I want to reference that is rather than saying file name equals style dot CSS I'm just gonna say Styles slash and then in this case where'd it go style dot CSS the reason that works is again because we're gonna reference this static folder and then once we're in that folder we can just type the absolute path to whatever file we want it will grab that for us and render it okay so we've done that now and lastly to talk about images and then the JavaScript if you know how to do this you'll know how to do the JavaScript so it's not that hard so I want to actually reference an image and display that on my web page so I mean you guys were asking about this how do I do that well we need to grab an image first of all and throw it in our static folder so let me do that if I can actually find an image I don't know where I saved it okay so I found an image I just threw one into the static folder this is what the image looks like it's just off my Python programming tutorials and essentially I've just thrown it in there now what I'm actually gonna do is create a new folder in here and just call it images and then I'll throw that image in there just so we keep things nice and kind of clean here so I guess I'll move that one back in probably should have created the other directory first but that's fine and now to reference that we're gonna do the exact same thing we did for this stylesheet here except we're gonna do with an image so really easy I'm gonna just copy this link tag you don't have actually it's probably easier just to type up the image but I'm gonna paste this in here I'm gonna change this tag to say image like that we'll get rid of rel we'll get rid of type and then our href will just change so that it references the images folder in a references image PNG which is just what I named my image so let's do that so I realized that I actually need to change this to source not a traffic as a traps actually can it be the link that's why this wasn't working when I was messing with it before but let's run this now and when we do we see we get this Python showing up here I'm still not really sure why this homepage has kind of disappeared maybe I did something with the color um but anyways there you that is the image for us it's showing up and that is pretty much how you work with static files I mean we have style in here we know how to reference that by just going where is it here by doing URL for our static folder then we just type in whatever it is that we need and then if we go to home here for the source same thing URL for static and then file name equals and whatever that file is and that is pretty much all there is to using static files now if you're gonna use a JavaScript file same thing here right you'll do your script tag like that or you'll link rel JavaScript and then just load in that specific javascript file and then that will actually work for whatever class you're doing so that is pretty much it on how you use static files images and JavaScript and if you guys have any questions let me know and in the next video we'll be getting into blueprints which is kind of how we can organize our document a little bit better