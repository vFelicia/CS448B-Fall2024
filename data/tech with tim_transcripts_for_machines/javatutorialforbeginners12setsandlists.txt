hey guys and welcome back to another Java tutorial video now in this video I'm gonna be talking about sets and lists now sets and lists are from something known as the collection interface from Java I believe that's what it's called someone correct me if that's wrong but I think that's the name and they are fairly complicated now I'm just gonna talk about really think the basics of them there's a lot more to do with sets and lists I know I'm probably gonna get some comment from some guy who says wow you really you didn't talk about a lot of this you but I can't explain all of it to you guys right now because it's very difficult to understand if you don't know a lot about data structures which in our case we don't so I'm just going to talk about what a list is what a set is quickly and a very basic standard implementation of them now the reason I'm doing this is because whenever you're programming stuff like a lot of Java throws you watch probably won't talk about these because they're really complicated but you're gonna need them to do certain things so for example with an array what I talked about before how you could like you had to set the size of the array like you had to know how many elements you wanted you don't need to do that with a set or with a list and that's the main advantage of it because a lot of times are gonna be adding things into per say a list or set and we don't know how many things you're gonna be adding so we can't define like an array of that linked if that makes sense to us so what should I should just get started we're gonna talk about sets first and then we'll move into lists so I'm just gonna create a set and I'm just gonna type it out and then kind of explain exactly what I'm doing I'm just gonna call this set t equal to new new hash set and integer okay so this already probably looks confusing and if you're typing a sigh with me you're getting these red lines now what we should do to get rid of these red lines is we just have to hover over them and click import set by like clicking on whatever it says there if you don't have we're not using this IDE just literally type import Java dot util dot set and for hash set same thing we're gonna click on it and import it just because this isn't like builtin to me in the java functionality alright so we have a set now what is a set how do we create it well a set is a collection of unordered elements that are unique meaning that a set cannot contain the same element twice and it doesn't know where that element exists so you can kind of think of a set is just like a big bubble and you kind of just throw things into it and it doesn't really know where they are it just knows that they exist there now you also have to understand that can only be unique things so for example I've created this integer set and this is the way that you do it so you type the keyword set in these little like greater than sign less than sign whatever you wanna call it tags if you talk in HTML type integer and I have the name T and I'm setting that equal to new hash set now you don't have to understand what a hash set is just know that it's like the standard implementation of a set and then same thing the types are integer and then these brackets here now inside of these brackets if you had another set you had created like say I said created a set called like W I could put W in here and assuming it had any elements in it this set would get all of the elements from W and start with that and then you could add things into it and whatnot okay so to add things to set I'm just gonna do this we'll go through and see how it works alright you simply type dot add so I'm gonna say t dot add and this case I'm gonna add five and we'll just copy this and we'll add like a few different numbers into our set so just K so it's 7 and 1 5 again and it will add 9 ok now what I'm gonna do is I'm just gonna print this set out to show you what it looks like now remember I said unordered collection of unique elements okay so let's print this out and you can see that we get 5 7 & 9 and notice that this ad right here actually didn't do anything and that's because since we already have a 5 in our set when we try to add another 5 to it since it already exists it doesn't care and it just doesn't add it alright now I'm gonna add another element in this case let's add like negative negative 0 negative 8 alright as our element and you can see that we don't have any specific order now see when I printed this like I had added five seven nine and negative eight so you think that should be the order that we get it or it should come in some sorted order or something like that that doesn't happen with a hash set okay a standard hash set and that's just because again we're just a bubble we just know that things exist we don't care where they exist or how many times they exist we just care if they exist now to see if something exists in a set and this is typically something you want to do like this is the main operation checking if something exists that's why you use a set you can type T dot contains or like your set name dot contains and then any element in here that you want so in this case I can do like if v is contained in the set and it's gonna be able to tell me that really fast now I can't really explain to you why sets are so fast but just know that whenever you're looking for something in a set you can do that very quickly like very fast like in constant time it doesn't matter how big the set is the set can be two million elements or it could be five elements it'll take you the same amount of time to look if something exists in the set okay and same thing with adding and removing things from the set that happens almost instantly as opposed to with arrays the larger the array gets the longer it's gonna take us to look through and find certain elements okay just we have to understand that so let me in there let's create a variable I'm just gonna call boolean X is equal to this and what I'm going to do is I'm simply just gonna print X now to see if that is contained and in this case yes it is v is contained again if I do something like 0 then obviously we get false it's not in there to remove something we can type T dot remove our set name dot remove it and then whatever the element is that we want to remove so in this case if I want to remove like 9 from my set I would do that then if I print my set so in this case T we just get 5 7 negative 8 because we removed 9 those are kind of like the standard operations to I'm gonna try and think if there's any other ones okay so there's one more or there's a few more but I don't know which ones are important you can clear an entire set by just doing dot clear so just simply remove everything from it like that to see if a set is empty you can do dot is empty and this will literally just tell you if it's empty or not to get the length of the set you can do dot size and this will tell you how many elements so in this case value size change this to an int and just print X here then we get a size of three so like again if we had nothing in there the size would be zero so is empty in that are kind of like similar in the sense that you can just check by the size and yeah so that's a hash set a hash set is like the standard set and that's the way that it works way I explain it to you now they also have a tree set and we also have a linked hash set now whenever you use these things they're gonna pop up here I'm not really going to talk about what these do too much I'm just gonna kind of show you the way a tree set works now at reset is similar to a set in the sense that you can only have the hash set sorry that you can only have unique elements but these are actually ordered and they're ordered in a tree data structure you don't have to understand what this means just know that it's like it shows up ordered what's what's our problem here just want to read this error tree set cannot be resolved to a type mmm interesting okay Tresa well let's just try this that still worked okay so anyways I I don't know why I was showing me there but Theresa is gonna actually give us an order so if I type T like this you can see that we actually have an order for the set now so negative eight five and seven now like a ray is like we can't just index the set and we can't just say like T zero like that doesn't work doing that like we were able to do with the race but when we print it out or when we look through the set it maintains this border in like a tree functionality that I can't really explain to you now linked hash sets are this so linked hash set again we're gonna have to import this up there it's linked hash set and this is similar to a basic set it just faster on certain operations so I'm not like I don't really want to talk about the too much because I feel like I'm already confusing you guys but just understand if maybe you know a bit about like operations and speed and time complexity you have a link Tosh set a regular hash set and a trie hash set or tree sets or whatever I typed okay all right so that's enough for sets don't worry if this is a bit confusing like we're we're not gonna be using these too much I just want to show you cuz I feel like you guys are gonna need to do this for some of your projects or whatnot if you're learning this for a reason now we also have lists now lists these are easier to understand don't worry but there is again two types so to create a list what we're gonna do there if you can type array list we're gonna give it a type in this case I'm just gonna give them an integer type and notice how I'm not typing in time typing integer just that's important that we need to use integer here instead of int okay so a rayless integer and call this 20 again equals new array list and we'll type integer and we'll put brackets and there we go now we're gonna have to import this so import ray list up there and we now having a little issed and what a list allows us to do is it's you can almost think of it as the exact same thing as an array except it's a bit slower and it can change sizes so we can add things to it we can remove things from it and if we gets like the end of the array or the end of the list sorry we can just add another element into it it doesn't matter so we can have like it dynamically sized array these have pretty much identical properties to the set so to add things you can do t dot add and you can add like in any element you want so have like one right okay that works fine to remove things T dot remove now to index things because just like an array we can actually index things with lists because this is gonna care about the position it's not going to just care that it exists like a set what we can do is we can do T dot get and then we can give an index right so but even it's showing he's always saying index right here so I do dot index zero then that would give me one right because one is added in there now to like put thing to put something or to set something on a certain index what you do this is T dot set and you type the index and element so I wanted to set index one per se to be equal to like five then that's why I would do it index one is five okay we print out T here just to show you what it looks like okay sorry that's we can't do that we have to do we have to add something in so to set something like this sorry you have to actually have something added at that index I forgot I didn't add that so I'm just gonna add two so what I'm doing now essentially is what this set actually does is you have to have something already existing at that index and this is gonna change that index for you so this is to change an already existing index and before I was trying to set one when we didn't have that in so that was my mistake but anyways there we go so now that works we have changed to two equal to five and twos up session one right so that's the way that that works I just got a thing up here I'm just gonna read through a few of these Oh set yeah okay so that's the basic ones again we have dot size so t dot size we can do t dot empty or is empty and this is actually really useful when it's called sub list and what this allows us to do is get from certain indexes so T dot sub lists let's see ad argument yeah so we just need int so this is gonna allow us to get within a certain range so say I'd like these a bunch of times okay so we have six elements now what I want to do is I want to get from like index 1 to index 3 and I want to print that to the screen so let's just take this and put this here instead so let's get rid of T go to the semicolon and print out and see what we get so we get here now is 5 and 1 because although our list actually has body codes like 6 elements in it from here we can just get the elements from 1 to 3 not including 3 so if I type like 1 to 4 then you should see we get one more element in here we get 5 1 & 2 because that's from from index 1 to index 4 but not including index 4 that's what we're grabbing we're getting all those elements in the the sub list like that now this is a ray list we also have linked lists again this is another data structure that I can't really explain to you just understand that it is faster at certain operations than an ArrayList so for nab to understand the difference between lists you have linked lists and ArrayList and you guys I recommend you to play with those and figure them out on yourself anyways we're coming up on about 15 minutes now almost and that's pretty much all I wanted to talk about with sets and lists now I know this video might have been a bit confusing there's a lot of stuff that I wasn't able to explain to you guys but just understand that if you're trying to do something and you don't know how long you want something to be like a list or an array you don't know how long you want it to be it's a different amount of elements like you don't know you would just use an ArrayList the way that I showed that to you before so ArrayList like that because then you can add things you can get things you can set things and you don't have to worry about like having a designated length the reason you use a set is when you don't care how many times something exists or where it exists you just care if it exists and the reason a set is better is because it's simpler and it's a lot faster to do operations on in terms of like a computer efficiency standpoint that's when you would use a set anyways I'm sorry about the confusing video and the next one I am going to be talking about hash tables which again are similar to this but then after that we're gonna be moving into objectoriented program and getting into classes and that stuff's not as hard it is just a bit more information to remember anyways that's been it for this video if you guys enjoy please make sure you leave a like on the video and subscribe to the channel if you're not and I will see you again in another one