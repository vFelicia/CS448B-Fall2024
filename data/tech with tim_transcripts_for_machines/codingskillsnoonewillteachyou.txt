in this video i'm going to share with you some programming skills and topics that nobody can teach you now what i mean by that is that you can't pick these things up from a book or a university lecture or a youtube video these are things that require hundreds if not thousands of hours of practice and that you're going to build over a career and are going to take multiple years for you to really obtain now i myself do not claim to possess all of these skills in fact a lot of the skills that i'm listing here are things that i've noticed senior developers have that i myself do not have and that i've been slowly working towards as i've been programming for about probably the past i don't even know 10 years so really the point of this video is to share with you these few topics that you can actively think about them as you improve in your career as you get better at software engineering and programming and of course by actively thinking about them you're going to work on them and kind of build those skills faster than if you weren't really considering them from the start so with that said let me start talking about all the things that i myself cannot teach you but first i'll teach you about the sponsor of this video before we get started i need to thank lenode for sponsoring this video i've been using and working with lenode for nearly three years now and they've consistently been my goto choice for hosting my applications and servers in fact right now i'm using lenove to host the official tech with tim discord bot a website multiple of my domains and a kubernetes cluster lenode makes it super easy to spin up servers with their oneclick app marketplace and have tons of written guides and youtube videos on their channel to help you get started if you're having any issues you can reach out to their 24 7 support team and actually talk with a real human being now lenode's pricing is simple with no hidden fees and full transparency and you can test out lenode services for free by using the link in the description and claiming in 100 60day credit for any new accounts it's been an absolute pleasure to work with lenode over the past few years and one last thank you to them for sponsoring this video so moving in here to skill number one now you might argue that this isn't necessarily a skill but i'm kind of grouping it in this category and this is going to be domain knowledge now domain knowledge at least from my perspective is essentially a very specific and specialized set of knowledge in a certain area of programming tech software engineering whatever it may be it's really being kind of an expert or a specialist in some specific topic and area and this is something again no one's really going to be able to teach you how to do this requires multiple years of learning you know maybe even decades or multiple job positions and this is something that you have to do for a very long time before you start to really pick up all this specialized and nuanced knowledge which is very valuable in you know specific roles positions companies etc now to give you some concrete examples here i worked at microsoft when i worked at microsoft i was just an intern there this was my first kind of tech job and as i got in there i realized very quickly that the senior developers that i was working with guys that were like you know maybe like 45 50 that have been working there 20 30 years they had so much extremely specific knowledge on these you know super specific and specialized kind of tasks and projects and all these things that i just knew nothing about whatsoever they were kind of the experts in that area and if we ever had a problem we just turn to them and say hey do you know what the issue is and they'd immediately have an answer or they'd have kind of a hint in the right direction they just knew so many little details about things that you could never even kind of dream of picking up or finding a book they would share and really that knowledge was accumulated over decades of them being in this field and spending so much time on these you know specific topics and projects and whatever now in terms of domain knowledge that i may have that could be related to something like python you guys watch this channel you know that i do a lot of stuff in python i'd be very hesitant to call myself an expert or a specialist but i think i'm probably on my way to getting towards that point and i know a lot of really kind of you know specific details and nuance points about python that most people that don't work with it every day just wouldn't know and the only way that i was able to accumulate that knowledge was by spending countless hours probably thousands of hours of at this point writing code in python learning about python you know building different applications with it that's really the only way to gain this domain and super specific knowledge and it's something that's extremely valuable especially if you're in a really kind of specialized position now i know this is a very vague area but this is something that you should think of when you're kind of learning different technologies or topics do you want to have domain knowledge in a specific area do you want to be considered an expert or kind of a specialist in one area or do you want to be more of a generalist that is kind of an argument you can make on your own but this is definitely something that no one's going to teach you and that can take a very long time to build so moving on to skill number two and this is going to be programming habits now this is something i think a lot of people overlook but this can be a massive skill and advantage if you build really strong and good habits early on when you're learning to code this is something i really wish i thought about more when i was younger and just getting into programming was building those really strong habits so that i could do stuff subconsciously without thinking about it just instinctually right now i know you guys all know this in your regular lives everyone has habits right like we operate on our habits and the people that are most successful in a lot of areas are really just the people who have built the best habits right the people that have the habit of getting up every day you know working out or doing their little routine and they're just in the habit of doing successful things every single day that's the same here with programming and with building strong programming habits so to give you a few examples here a habit that i've recently kind of started picking up on in programming is giving really good variable names and always making sure i'm having a consistent styling when i'm writing code at this point for me this is something i don't actively have to think about i just do it instinctually when i'm coding and a lot of people actually comment that they like kind of the style of my tutorials because of this habit right i have a fairly consistent style i write code in usually a pretty understandable way and i'm always trying to think about kind of the variable names without really having to put too much effort into doing that i know that sounds contradictive but habits are really those things that you're doing without thinking about and that absolutely applies with program another habit could be like do you always write a test before you write your code are you always testing your code are you making a commit after every small feature are you separating logic out into different kind of functional units all those different things right that you're only going to build by spending a large period of time doing them and that you can only have good habits in if you're actively thinking about you know what is my habit here when i'm writing code so i would challenge you guys think about what are your programming habits what do you always do good or bad and should you continue that or should you try to change that habit in kind of a more positive direction now again these are things i noticed with a lot of senior developers they just have good habits when it comes to designing software when it comes to writing tests you know requiring stuff to be in a specific format or style or whatever they do everything right because that's a habit for them to do that obviously there are exceptions but i think this was a good point here programming habits think about them especially when you're just getting into programming and they can be a huge advantage to you in the future so continuing here to skill number three i have software and tools efficiency now i've ordered this a bit weirdly but what i mean by this is how efficient are you using different software engineering tools so like an ide maybe github version control maybe you're really good in the command line with terminal and stuff like that and you can even extend this to different frameworks so maybe you're really good with a testing framework or you're really a master at the specific python module these are things again that no one's really going to be able to teach you how to do you have to put in hundreds of hours to build the skill and it can really improve your efficiency and kind of how much output you have as a software engineer so for example vs code i'm sure many of you guys use this again i challenge you here to ask yourself how efficient are you at using vs code do you know all of the keyboard shortcuts are you manually kind of going up to the menu and clicking on stuff all the time would it be worth your time to spend a few minutes kind of increasing that efficiency and getting to know that tool more are you really good with git you know all of the commands do you have them memorized i'm not saying that you need to do all of these things but i think this is definitely a skill and again something you're not going to pick up unless you're actually actively doing this so one thing that i always try to do when i'm using different softwares is i try to think about you know okay how can i make myself more efficient here what's something that i'm constantly doing maybe i should learn the shortcut for that maybe i need to add a keybind on my keyboard maybe i need to spend a few minutes you know really trying to learn this software better so that in the future i'm going to be more efficient with it for example i do a lot of editing in premiere pro only recently i found out about a lot of the awesome kind of keyboard shortcuts in there and again this was something that no one really taught me it's just over time using the software i picked up on these different uh you know features of it i could have watched a video and that could have been helpful but you only really get really good and efficient using this stuff when you use it a lot so hopefully you get what i mean that's what i'm kind of trying to say in this section continuing you could extend this right to different frameworks so i think i mentioned this but maybe you're really good with a testing framework or a python module and you know that you can be really efficient in this kind of specific area again something no one's going to teach you and that can be a big benefit to you for example i'm pretty good at writing code in pi game not something i'm really going out and bragging about because it's not super useful but if i do want to whip up like a quick demo of a game or like a really basic mvp for an idea i have or something that's a great skill to have i can go in there i know i'm very quick at kind of whipping up a ui and some functionality and i can get something out much faster than probably most other people hopefully this was a good one let's go on to topic number four so moving on here i have debugging and obscure problem solving with an emphasis on the obscure now the reason i'm putting this in here is because i know and i'm sure you guys all know from experience that it can be super frustrating to be given you know all these weird errors and bugs and especially when using thirdparty libraries and stuff and spend like five six seven hours debugging trying to find this issue going through and banging your head on the table when like every answer on stack overflow doesn't work and i think it genuinely is a skill to learn how to kind of quickly debug and problem solve and how to deal with these really strange and weird problems that occur when you're programming for example recently i've been working in react native i'm going to talk more about this in a later video but i've been doing kind of a larger development project and we're working in react native and there's all these weird bugs that happen because this is kind of a crossplatform uh what we call this framework right since it goes to ios and android and i'm using a bunch of thirdparty dependencies you get all of these super strange like really specific errors and it's super frustrating trying to actually solve them and kind of find the issue and if i was more of a beginner programmer and i hadn't experienced this hardship before i'd be really demotivated kind of really depressed honestly with you because of all the stuff that's been happening and i probably would have given up on a lot of these issues or not kind of battled through and tried to actually find what the problem is or you know use my problemsolving skills to find this so i think it genuinely is a skill to get good at and have lots of practice debugging these really weird errors and knowing kind of a good process on how you should go about finding these issues what steps you should try you know when to go to stack overflow when to go to github uh when to maybe ask someone for help or maybe even post like something on a forum or all that stuff again something that is really hard for me to go into more details with because everyone is going to have all different kinds of errors they need to solve i just know that when i was younger i would get really frustrated and demotivated when i ran into you know these big problems or i had some bug that was you know in my program for a week or something like that and now those same problems and bugs i'm able to fix much faster i have much more confidence that i'm gonna be able to fix them and i think it's you know a decent skill and something maybe you guys should consider just as a last thought here i've been coding again like 10 11 years when i started i was not very good i was a complete beginner i had no idea what i was doing and it's really um motivating i'd say to look back at kind of where i was even maybe five years ago and compare it to now and just see the massive drastic difference and not just from the stuff that i've learned but from these kind of core and foundational skills that i've been working on over time and that slowly have started to get better and better and better to the point where i'm really seeing a bigger difference now hopefully you guys feel the same let me know in the comments down below with that said if you enjoyed make sure to leave a like subscribe the channel and i will see you in another one you