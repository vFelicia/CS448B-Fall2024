hello everybody and welcome to video 2 in this rust programming series in this video i'm going to be showing you some rust command line tools specifically cargo and then rust fmt now cargo is something that we use to keep track of our different dependencies and to initialize a rust project allows us to do a few other things as well and it's the recommended tool for actually building running and creating our rust projects now what we did in the previous video was was we just create a single file here right where i have this main function we compiled the single file and then we ran the file now that's fine because in that we didn't have any dependencies we didn't have multiple files kind of linked together and it was very small project obviously we just had you know three lines of code but as your projects get larger you need something to keep track of the dependencies you need a better kind of structure in terms of how you're storing files and folders and all of that and that's where cargo comes in so i'm going to show that to you lastly i'm going to show you something called rust fmt which allows you to automatically format your rust code very useful highly recommend that you use it after you finish writing some code so before we dive in i will quickly mention that i do have a programming course it's called programmingexpert.io it's the best platform to learn how to code has a ton of interactive practice questions has some projects you can work on teaches advanced programming software engineering tools teaches stuff like git bash etc all kinds of great content on there and if you guys want to check it out you can use the discount code tim from programmingexpert.io link in the description with that said i'm just going to delete this main.rs file here and we're going to kind of start from scratch and use cargo to initialize a new rust project so open up your terminal or command prompt here and just type in cargo and make sure that this command works for you it should have been installed by default when you installed rust so i imagine most of you will have that now notice the location that you're in here for your terminal if you can't see it type pwd for print working directory but you want to be in the directory where you want to initialize a new rust project so in this case i'm in rust tutorial on my desktop you guys will be wherever but maybe make a folder where you're going to make all of your different rust projects okay so for now we're going to create a new rust project using cargo so to do this we're just going to say cargo new and then we're going to put the name of the project that we want this is going to be the directory name where our code is going to be contained so for now i can just call this something like tutorial2 and it's important that you don't have any spaces in this name if you want a space again just use an underscore okay so we have tutorial 2. i believe i spelt that correctly let's run this and then notice we get created binary application tutorial 1 package so if i go back here we now have a tutorial tutorial1 folder we have a git ignore file we have a cargo.toml which i believe is tom's obvious something language i actually want to find what this is from the documentation because i remember being funny yeah tom's obvious minimal language that's what toml stands for so great name for this uh and we'll talk about this in a second and then we have src this is where all of our code's gonna go and we automatically have a main.rs file with the function main inside of it so as you can probably guess this is where we're going to put all of our code files inside of src standing for source that's where cargo expects all of our source code to be now git ignore will be used if you have a git project initialized here we don't have one set up or we're not really using git i think it automatically initialized one for us don't have to worry about that for now but we just want to make sure the target folder if it exists is not being a part of our repo and then of course we have this kind of configuration file right uh where we have a bit of information so we have an addition we have version we have the name of our package and then any dependencies that we have would be listed here we don't have any right now so obviously we're not seeing anyways this is the basic setup all right so now that we've had a look at the directory structure let's just see how we actually run the code from our cargo project so to do this we are going to go to our terminal again and we need to get into the directory of our project so i'm going to cd into tutorial 1 like that all right so now that i'm inside of this directory i'm no longer going to use this rust c command i'm going to use the cargo command because it's going to do all the compiling and running for me so i'm just going to type the command here cargo build and this will actually compile all of the code it will set up the dependencies and it will do everything i need to get an executable file so i'm going to type cargo build like that and then it's actually going to build this right it says compiling tutorial 1 uh finish dev blah blah blah and then if i type ls here so as you can see here we have a few new files and directories we have cargo.lock now this is a file that you don't really need to worry about but it's going to keep track of all of the versions of the dependencies that we have we don't need to manually touch it cargo will do this for us then we have this target directory which contains the executable file that we want to run so if you look here we have target inside of target we have some stuff we have debug you don't have to worry about a lot of these files but i'll show you how you get to the executable file so from here i'm now going to cd into the target directory and from target we're going to have another cd into debug now from debug oops what i can do is simply run the following this is going to be dot backslash because i'm on windows and then the name of my project dot exe so tutorial1.exe and we see hello world is going to print out now if i type ls notice that we have our tutorial1.exe if you're on mac or linux then it would be uh dot and then forward slash and then you just remove the dot exe and it should run the code for you okay so that is the basics there let me clear this and go back and i've just showed you now how you actually build your cargo project and how you run it as well now the thing is you don't actually need to manually build this every time there's a command here called cargo run which kind of makes this a bit faster for you and what this will do is compile and then automatically run the code so rather than taking those multiple steps you can just write cargo run and then you'll get the output right here hello world awesome okay so that is cargo run and that was cargo build i think there's a few other commands i wanted to show you let me have a look at my cheat sheet here yes the last command i wanted to show you is cargo check which essentially will check your cargo project now we are not going to get any output here any errors because we have a very small project but if there was any problems in your cargo project or in your code then they would be listed here after running the cargo check command now the real benefit of this cargo check command is that it checks that your code is able to compile without compiling it so you can not have to compile it well knowing that at the current stage in time your code is running properly or your code is correct in a sense right hopefully that makes sense but it's just a way faster command than actually compiling so use this when you don't want to compile but you want to check if you could compile the code that you currently have alright so now that i've showed you that i want to show you one more command which is the format command which will automatically format the code for you now one thing to note here is that you do need a semicolon at the end of your statement in rust now i don't remember if i put one in the first video or not i think it still would have worked because we only had one line if i didn't have it there but the convention is to have the semicolon at the end of the line to terminate the line and say this statement is done so my apologies if that wasn't in the first video but here it is you need the semicolon now notice here that i have my kind of four spaces right automatically for this file so what i'm going to do is just make this uh kind not be in the correct format so i'll do something like this so it looks kind of all wonky and run the format command and show you that it automatically formats the file for us so there might be a shortcut to do this but i believe i can just cd into src and then i can type rust fmt like this again this should be automatically installed you won't need to install it and then the name of your file which in this case is main dot rs so when i do this and i go back here notice that my code has automatically been formatted i have my four spaces and everything looks proper now so that is a kind of quick shortcut to automatically format your code for you using rust fmt alright so i was about to wrap it up i will quickly mention though that inside of your src folder you do want to have a main.rs file it's there automatically but this is the entry point to your program and then inside of main.rs you have your actual main function so you want to have a main file and then a main function inside of that so your code actually runs if you were to say change the name of this then you would get some type of error your code would not compile properly because you don't have a entry point to your program in fact we can test this quickly if we go here let's just cd dot and cargo build and see what happens now notice we get an error because we don't have a main function right with that said i will wrap it up here i hope you enjoyed if you did make sure to leave a like subscribe to the channel make sure to check out programmingexpert.io the best platform to learn how to code from the link in the description and i will see you in another one you