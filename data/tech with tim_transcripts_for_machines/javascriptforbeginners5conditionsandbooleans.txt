hello everybody and welcome back so in this video what we're gonna be doing is talking about conditions and comparison operators now these are extremely important this is kind of the foundation of the next like five or six lessons that we're gonna go through so really I kind of encourage you guys if you haven't been watching the entire videos maybe now is the time to start and make sure you really understand this before moving forward otherwise things gonna be a bit more difficult so I want to refresh you that we started talking about datatypes and a few videos ago and we mentioned the datatype called boolean now we said that we could have that downside called boolean let me just say B here and that value could either be true or that value could be false and remember that we can't have that capital false or that capital two it's only those two special values but what are the point of those values and where do we actually use them well this is where I'm gonna show you how these are views or how these are actually generated so let me create some variables on SI x equals 8 and VAR y equals 9 just like we used in some previous videos now a lot of times when we're doing some computations or we're adding numbers we're doing something we need to do some kind of comparisons maybe we want to see if the value of 8 is greater than the value of 9 or if you know 8 minus 9 gives us enough a remainder and if we're looking at like a shopping cart and we see if they have over $100 in the shopping cart that then maybe they get a discount on their order there's lots of instances where we need to do comparisons with numbers and I'm gonna show you guys how we can do that now typically we're doing comparisons between variables but sometimes it can be between constant values as well and what I mean by constant value is just if I type in some number rather than actually using two variables so let's start by going through some of the comparison operators which are what I'm going to show you now okay so the first comparison operator is the less than sign now a lot of people will say oh no that's a greater than signs don't the less than sign it really matters in which way this is pointing related to your variables in this instance what we're saying is X less than Y that's what this statement means but if I decide to put a sign like this then we could read it like is X greater than Y or is y less than X right it doesn't matter if none of these are really the greater than sign or less than sign it really matters what weight we put them so we have these two signs greaterthan lessthan and we also have the ability to add an equal sign to the end of either of these two signs now this is going to change this comparison to say rather than less than Y or greater than Y and this key is going to say is X greater than or equal to Y now notice that I keep saying is X greater than or equal to Y or is y less than or equal to X or whatever it is that's because this statement or this expression that I've typed here is actually going to return to me a boolean value which is true or which is false and that true or false is gonna tell me the answer to this expression that I've put here now I know some of you might be able to confused but I will I don't know how I just did that log out my answer and show you what I mean by it all right so let's refresh this and you can see we get a value of false now why do we get a value of false well because X is not greater than or equal to Y so when this expression is evaluated this comparison happens between eight and nine and we get the value false now if I decide to reverse these signs like this you can see we get can be value of true and if I decide to change maybe X to say 11 instead of nine and we refresh this now we're back down to false and that is precisely how these basic comparisons work so these less than greater than or equal now it's important you can not do something like equal that and greater than this is a different statement you can see it's just changed colors completely when I do something like that so make sure you add the equal sign after that comparison operator alright so the next operator to talk about is actually the equivalence operator which is the equal to or the two equal sign so is equal to is what we call this now notice that this is two equal signs and not one equal sign now one equal sign is what we call the assignment operator and that is assigning some value to a variable right that's typically what we're doing with the assignment operator whereas with these two equal signs what we're doing is checking for equivalence now there is another operator which is the three equal signs which stands for is equal to value and is equal to type now I'm not going to explain really how this works in difference with the two equal signs because it's kind of hard to understand until you get into objects and some more Vance data type so we'll talk about it as we go through later but for now just understand you can use the two equal signs or the three equal signs and 99.9% of the time these are gonna do the same thing and they're gonna achieve whatever you know functionality is you're trying to get at now equal then equal them so this is just gonna compare if these two values are the same so obviously in this case 11 is not equal to 9 so let's do this comparison and we can see we get the value false however if I were to change my value Y to be 11 and we do this comparison we get true and just notice if I add a third equal sign like this we get true as well now if you're in doubt and you're like well do I use 2 or do I use 3 just use 3 its but we'll explain why later but just use 3 now let me do something I'm gonna change this to 11 I'm actually gonna try to demonstrate the difference because I feel like it's important enough to try we have this variable X which is 11 and we have this variable Y now notice that 11 and 11 are the same right like if we're looking at this as humans we see 11 we see 11 okay those are the same value so this should evaluate to true watch what happens when I run this we actually get the value false now why do we get the value false well this 11 is different from this 11 because they're different types this is a number and this is a string and remember that now if we try to do something like X plus y well this is a string and this is a number so what happens when we add a string and a number well we convert the other number to a string so in this case this is now gonna turn into the string 11 and we mush them together we don't actually compare do a logical addition there we just add these numbers together so rather than getting 22 which we might have expected you can see here we're getting 1 1 1 1 so that's important to understand okay so let's do these two equal signs now all right so what happens when I do two equal signs and I compare these well we actually get the value of true so why did that work well that worked because this two equal signs compares the value and does not look at the type whereas the three equal signs compares the difference in the type and the value and only if both of these are the same will we get that equal alright awesome so now what I'm going to show you is kind of the opposite to this which is the not equal to now there is a not equal to and there's a not equal to equal to which is the two equal signs like that so we'll talk about both so let's start by doing not equal to so exclamation point equal sign what does this do well it literally just gives you the opposite result that you would get if you did two equal signs so here since these values actually are the same what I'm getting is the answer false the reason I'm getting the answer false is because this operator is going to tell me if X is not equal to Y and in this instance it is equal to Y so obviously this condition is false and all of these that I'm typing here are known as conditions so that's important to understand now what happens if I add a third equal sign like that let's run this we get the value true why do we get the value true because obviously 11 and 11 when we're doing 3 equal sign comparison are not the same because this is a string and this is a number so when we do this we get false or sorry what am I saying we get true because these are not actually the same values and that's kind of how that works now let's just do another basic example with 9 and you know if we do X not equal equal to we still get true because obviously these aren't the same but if I were to change this to 11 then we still you know we get false because these are actually these same value now that is kind of the basics of the basic comparison operators now I'm going to show you how we can actually chain these together and use something called and or and not now and or not are very powerful and they allow us to kind of create some more complicated conditions so I'm gonna do more advanced example now just because numbers are really easy to understand typically so I'm gonna say var name equals Tim and I say move our other underscore name equals 10 all right so let's do a comparison of these so what I'm gonna do is simply log out if name is equal to equal to other underscore name well what do you guys think looking at this do we think they're the same do we think they're different does this two equal sign is it gonna make a difference if we used 2 or 3 what do you think well let's run this and have a look we get the value false why do we get to value false because there is a capital here and capitals actually make a big difference what we're doing comparisons this him is not the same as this Tim there are different strings however if I do change this to be like that now we'll get the value true okay so that's great we've done those comparisons now what I'm gonna do is actually add some other variables so we'll say yeah well you know we'll add some more numbers here bar x equals 10 bar y equals 9 now what if I want to print if name is equal to other name and another condition is true what if I want to chain multiple things together and see if those two things are true well what I can do is actually use what's called B and operator or the and kind of comparison chain or whatever you want to call this now this is what this looks like to and signs these are above the what key is it on your keyboard B 7 key on your keyboard and what this is actually gonna do is compare both of these conditions together and see if they're both true now I'm going to add another condition here where I'm going to say X is I'll say Y actually is less than X so what this and does is it starts by evaluating the condition on the left side which in this case is name equal equal to other name we know that this is true right above here this value is true then what it's gonna do is see if this one is true as well so if Y is less than X now if both of these conditions are true and only if both of these conditions are true this whole thing that we've typed here will evaluate to true if one of them are false or both of them are false it doesn't matter which one or if both of them are false then we're gonna get a false value so let's refresh this here and we can see we get the value true because we know that this is true and this is true but what if I do Y is greater than X well obviously we know this is true but we know that this is false and since this is the and kind of chain comparison I don't know the actual proper name for it we're gonna get the value false and we can see that here so this and checks if condition1 and condition2 are true and we can go through and we can do as many ends chain them together as we'd like and we can do you know seven equals equals and nine like we can add that at the end here and obviously we're gonna continue to get false and what's gonna happen here now is we're gonna check if this and this and and this is are true and if all three of those are true will be true otherwise if any one of them are false or any combination of them are false we will get the value false all right the next one we need to talk about is or so let's change this to or now or is simply two straight lines I think you call this the pipe but I don't actually know the proper name for this character but it is where is it exactly it's kind of underneath the backspace character on your keyboard anyways the or is a little bit different than ant what orders gonna do is a similar thing it's going to look at the condition on the left it's going to look at the condition on the right and if either of them are true or both of them are true it's going to give us a true value so in this case we know that this is false Y is greater than X but we know that this is true so if we run this we can see hey what am I getting name equals equals other name or y greater than X that should be giving me true sir I don't know why that wasn't refreshing anyways there we go true now what if I change this to be a not equal equal to then obviously we know that this is gonna be false and this is gonna be false so what is the or gonna give us it's gonna give us a value of false because well neither one of these are true but if I change this now it's to be Y greater than X actually sir it should be Y less than X my bad and we refresh this we can see we get the value true so that is how the or works now we can combine ORS and ends together so we can do you know another and sign here and we can add I don't know something like eight equal equal to eight and we can chain all these together and what's gonna happen here well let's run this we get the value true and the way that we do this is we simply read left to right so if we're gonna combine all this it's kind of complicated sometimes to understand how we're actually doing this what we're gonna do is compare name and other we're gonna get some value let's say obviously this is false now what we're gonna do is say false or what's this value well this value is going to be true so this whole thing here if we're comparing with or is gonna be true like that then we have this end where we're comparing with here which is going to be true true and true returns to us a true value and that's how we get that now what I'm going to show you finally is just a knot and then I'll do a big chain of all them together and I know this video has been long but I want to show you guys all this in one video so what I'm gonna do is simply show you the not operator which is an exclamation point all this does is simply reverse whatever the current thing is that you have so if you have true and you put a knot on it it gives you false if you have false and you put a knot on it it gives you true like that and that's as easy as it is and this works in any condition so in this case if I do something like X less than Y well we know that X is not less than Y so this is false but since we have a knot outside of it and these brackets around this condition well what I'm gonna get is the value of true and this is what I want to show you as well we can change conditionals by using these brackets so let's do not X and y or name equals equals of their underscore name and let's do something like nine greater than zero so what I've done now is chained these together what I can actually do is put these in brackets if I wanted to and do something like a knot sign here in front of this and now what's gonna happen is we're gonna evaluate this expression get the knot of it we're gonna evaluate this expression this expression we're gonna and them together I think I might need another bracket at the end here I think that's right yes okay that is right then we're gonna knock them then we're gonna do the or of this side and this side and see what that result is I'm too lazy to calculate so let's just refresh and that value is staying true so that is how that works this is our comparison operators this is how we combine them so or and and remember or either one of them needs to be true or both of them can be true and if we have that we need both conditions to be true and if we have a knot that's simply gonna reverse whatever it is that we have with those combinations of operators we can create any kind of conditions that we would like and that has been it for this video as always if you guys enjoyed make sure you leave a like and subscribe and I'll see you guys another JavaScript tutorial