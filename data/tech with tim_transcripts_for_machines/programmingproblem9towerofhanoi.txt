hey guys and welcome back to the weekly programming problem now today's problem is the Tower of Hanoi problem now it's a very famous problem typically in mathematics but has a really nice recursive solution to it in computing so that's what we're gonna be doing today now essentially the problem if you're not familiar with it is you're given kind of almost like a toy that looks like this what you have to do is you have to move n disks from a given pool to another pool using an intermediate pool so if we say that this pole is ABC we need to move all the disks from pole age and say pole C and we can use pull bead to do that so the only real rule with this is that you cannot place a larger disc on a smaller disc at any point during the game so I can't for example place this disc here and then do that that won't work you can see that that's giving me an issue okay that's the really the only rule to this problem so how can we solve this and what is the solution to it Inc in computing essentially and what we want as a solution is what moves we should do to go from one pole to the next given and disk that's what we want for any end right so let's start by just figuring out the solution to three disks seeing how we did that and then moving up and eventually moving into a actual program solution in Python so what I'm gonna start by doing is moving this disc so disc one we're gonna call it so we start with this one the second one will be just two the third one will be disc three and then all the way to N in this case all like three discs so we'll move disc one to pull C will move disc two to pull B this one will go back to pull B and then we will finally move disc three to pull see and we will do the following and you can see that we have completely we have found a solution and we have completed this that was pretty straightforward and I think most of you can probably comprehend how that worked now let's think about how we move a disc to a pole and I know this is gonna seem really trivial this is gonna play a very important part into moving four discs to an expo and to our solution so when we move disk to a given pole what we do is we just take that disk and we move it there right we know how to do that so for one disk if we need to go from pull a to pull see if it's only one disk all we do is just move it from pull a to pull see that's pretty straightforward if we have two disks what do we do well what we need to do is we need to move our what he called our first disk on to the intermediate pool and we need to move our second disk onto the final pull and then we move our disk that is on the intermediate pull on to the final pull or the ending pool and that's how you do it for 2 now for 3 this is a very similar solution what we do is we say ok let's pretend that we only have and I shouldn't me bring up my drawing tab here let's pretend that we only have two disks ok so let's say that this is one disk well what do we need to do we need to move this disk to this pole and then we need to move this disk to this pole and then from here needs to go back on to here and that's how that works makes perfect sense right that's what we did for two disks so it's the exact same thing with three we'll just pretend that in this case we need to move these two disks should we move the first disk to the intermediate pull the bottom disk goes to the end pull and then the intermediate pull disk go back to the end pull that's how it works for two disks so let's now try to do that with three so if we need to move these two disks now to here right that's our task so our first task is to do that our second once to move this here so our first task is to move the two disks to the middle pool how do we do that well we know how to move two disks to a given pool what we do is we take the top disc and we put it on the intermediate pool which in this case will be this one because this is not the destination pool and then we'll take the bottom disc we'll put it on the pole that we need to go to and then we'll take that disc that's on the intermediate pole and we'll put it back on to the final pole and that's how that works for two disks so if we're given three disks we can use the fact that we know how to move two disks to move three so that's exactly what we do right so now we'll break it down one more time we say okay well we start and we're gonna say okay let's shrink this down to two disks now so n minus one disks right and let's move these two disks on to the intermediate pool so to do that we'll go here here and here and now we've successfully moved this disc to the intermediate pool we can move this disc over to the final pole and then now that we have this we need to move this these discs here on to the final pole but since this is two discs we need to figure out how to do that so we simply go to the intermediate pool we go to the final pole and let me go from the intermediate pole back to the final pole and that is the solution now this is the exact same process for four discs we're just gonna keep breaking down our disks and sectioning them off in two sets of two discs until eventually we get to a point where all the discs are on the same pole so same thing here let's go back into the drawing time let's pretend what the heck is this I did not mean to do that let's let's go to that quickly okay so let's pretend that all of these discs are simply two discs okay so we need to move all of these discs now first of all to here but the thing is these are three discs right so let's do this now let's say if we need to move these this to here let's now pretend that these are a set of two disks right so we say this disc and this disc so we know how to move two disks so let's do this now we'll say okay so we need to move these two disks to the intermediate pool in this case it's gonna be this one then we need to move this bottom disc here so we'll move that here and then we need to move these discs back to here we'll move this final disc back to here and then we'll move all these disks back to this pool now I know that was kind of confusing but hopefully you're kind of getting the point here we just keep shrinking our discs in two sets of two discs we move them to where they need to go and then once they're there we find the solution so let's now actually create a function for this that will maybe help define what we're doing a little bit better so let's say that's ABC let's say this is 1 2 dot dot dot and this is n ok so we go from 1 to n disks so let's say we're gonna have a function it will just call it t alright and what this function will take is a parameter is how many disks so in this case we'll start with N and then from what pole we need to go to or what pole we're starting at what we need to go to and the intermediate pool so let's say we're gonna start up pull a we're gonna go to pool C and we're gonna use pull B to accomplish that so this is our initial kind of condition what we need to do so we need to move all these discs to pull see that's what we need to do now we don't know how to do that because we don't know how to move for this we only know how to move two discs so let's try to break this down into a point where we get two discs so what we're gonna do now is are gonna say okay well the first step of this problem is to move n minus one disks to the intermediate pull in this case B so let's write that down say the first step is we're gonna go from T to N minus 1 or TN minus 1 from pull a to pull be using pull C that's our our first problem that we need to do we need to move all of these over to here and then after we do that we need to move this disc to pull C and then all these discs needs to go back to pull C right so let's write that down now and then we'll say n so we'll say T in this case n goes to actually we'll just say we'll just say move and to see okay that's what we need to do we just move this to here and we know to do that just one move very basic all right now our next step is well we have these three discs and we need to move them to pull be using pull C but we have three disks so how do we do that so what we're gonna do is we're gonna break this problem down again we're gonna say alright well if we need to go we need to put these disks on to pull be using pull C then we're gonna have to take these top two disks so in this case n 2 disks and move them to pull C move this disc to pull B and then move all the disks back to pull B and then we'll have them there right that's what we need to do so you can see that we're recursively trying to get down to a simpler and simpler case until eventually we get to a point where we can just move we know how to move the disc because there's a set of two disks we move them to the recording place and then we're going to reach a solution so that's kind of how that works now it's really it's difficult to show this with the drawing rather than actually moving the dead so what I'm gonna do now is move the disks and then we'll get into an actual solution so let's do this now let's move all the disks so what we'll do is we'll say okay first step we need to move these three disks to pull B well we don't know how to move three disks so what we need to do is need to move two disks so let's move these top two disks to pull C first of all so we do that by doing this now we move this disk here to pull B and now we need to move these ones back to pull B so to do that we're gonna use C and we'll do that like that okay now we'll move this disc over to here and now what we need to do is well we have three disks and they need to go to pull see using pull a so the way that we do that well is we start by moving to we're breaking this down into two disks need to go here will move up there so what would do is with this this this and continue on like this until eventually we reach the solution and you can see how fast I'm doing this because I'm just following the kind of recursive protocol that we went through there so now let's get into some Python code this will be very quick to do and we'll test our solution to make sure that it's working so let me just put this tablet away quickly and now we will start going so we're gonna define a function inside of our let me actually save this here quickly we'll just say Coward pi put it on desktop okay and what I'm gonna do now define tower and we're gonna take n we're gonna take a start pool and end pull and a middle pool now our base case is because whenever we're doing incursion we need a base case obviously is if n is equal to one meaning we have one disk we need to move it from a start pool to an end pool well all we do is just move it from that pool to that pool so what we're gonna do them say if n equals equals one like this then I will print out in this case we'll say move and we'll say percent I which will be the disk number from tower percent s like this to tower percent s and then in this case we'll just put some brackets will do % and we'll fill in our numbers so we're just gonna say n start end right because what we're doing is well if we have one day so we're moving one disk all we do is just move it from the start disk to the end disk or start tower to the end tower and that's how that works that's all we don't need to use the middle disk if we're just moving one so otherwise if we're moving more than one disk we need to follow the procedure that we've just defined and that procedure essentially is move break it into two disks move n minus one disks to the auxilary pool move that end disk are the like the bottom disk to where we need to go and then move all of those disks that are on the auxilary pool back to where we need to go right so to do that what we're gonna do is we'll say okay well let's call the tower because tower knows how to move our disks we're gonna call it with n minus one disks so splitting it up into two disks and then we're gonna go from the start disk to the middle disk using the one missing disk using the end pull that's what we'll do that's our first step okay then we'll say well after we do that we need to move the bottom most disk to the end pull so all we'll do there is we'll just print out this exact same statement here we'll say okay so let's just take that bottom disk and move it to the pole that we need to go to that's awesome that's all we need to do now after we do that we need to take the disks that are on the auxilary pool and we need to move them on top of that disk so to do that we're gonna say all the disks from the middle pole so because n minus one disks will be on the middle pole because we've moved them there using this we'll say we're gonna use the the end or this the start disk are no sir and using start so move from the middle disk or the middle pole to the end pull using the start pole and that's all we need to do and this is actually a complete solution to our problem so let's define that we're gonna start with in this case four poles and then we're gonna go from pull a two in this case we'll go to pull C and I will use pull B as our intermediate pull so now let's actually run this program and test the solution on our little game and make sure that everything is working so in this case I'm just going to do Python type I I'm on my desktop so that's why I'm running this and if I do this you can see that scroll down here that it gives us a set of moves so let me bring up now the game and let's see if this actually works for our four disks so the first move is move one from A to B so let's do that move two from A to C move one from B to C move three from A to B okay move one from C to a do that move two from C to B move four and my note move one from A to B will do that it says move four from A to C move one from B to C okay we'll do that move two from B to a move one from C to a move three from B to C okay and then move one from A to B move two from A to C and move one from B to C and you can see that we get our solution so I mean I will let you guys test this out yourself with however many ends you want just keep in mind that this solution if you want to know how many actual moves the answer to this is the moves from n minus one plus one so for example we know that for three it takes us seven moves so if you want to find how many moves it would take for four disks you multiply the previous amount of move so in this case 7 by 2 and add one so it's the previous amount of moves multiplied by 2 plus 1 so you have to start at some number that you know in this case will start at 3 and then maybe we wanted to find 5 well we'd say well 4 has 15 moves so we do is we multiply that by 2 so 30 we add 1 and that's 31 and I mean if you want proof you can see here if I keep going up you can see the pattern 3163 127 that's the way that that's the formula for how many moves so anyways I don't I'll show quickly if I put like a hundred in here and run this program that it's gonna take decent amount of time to actually execute all of these different moves because this is probably gonna be in I want to say like the hundreds of thousands of moves but I mean I don't really know so anyways that has been it for this video I hope you guys enjoyed if you did please make sure you leave a like and subscribe and let me know what else you'd like to see for the future of these programming problems