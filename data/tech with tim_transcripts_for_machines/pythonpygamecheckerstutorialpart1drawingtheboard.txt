hello everybody and welcome to a brand new tutorial series where we're going to be building the checkers game in python with pygame now if you don't know pygame that's totally fine it's a module in python that lets us build 2d games what i'll be doing in this series is walking you through everything that we need to do to build a fullfledged checkers game now i'm actually quite excited about this because this is going to be leading me up to another series i'm going to be doing which is talking about the mini max algorithm to actually make an ai that we can play checkers against so let me give you kind of a demo of what this should look like i've already built the game out and i will be not necessarily copying from my other screen but just having it up as a reference to make sure i don't get too lost you can see this is kind of the game of checkers the human player is red and then the other player obviously is white and you can see that we have an ai so the ai will automatically move based on the move that you do so let's see if i leave myself open here the ai oh decided actually not to capture me because i would capture it back and if we play this for a few minutes i won't go through all of it you'll notice that the ai is actually pretty decent and it actually can play pretty well against us so i'll be talking about how we can build this kind of ai of course after we've built the game in a separate series so stay tuned for that all right so that being said that's pretty much it all i want to say quickly is this is not a beginner tutorial series if you're an intermediate you've worked in python before that's awesome i'm going to try my best to teach you guys some news more advanced stuff in this series so yes we will be going through and just building the game but i'll be kind of throwing in some more advanced techniques and explaining how those work so you're definitely going to learn something other than just how to build checkers if you want to follow along with this all right so let's go ahead and get started the first thing we need to do is just install a package this is called pygame so we need pygame again which is the module that we're going to use to do all of the graphics so what you can do is open up a command prompt or open up a terminal and what you need to do is type pip if you're on windows or pip3 if you're on linux or if you're on mac so pip or pip 3 depending on your operating system and then the word install and then pi game so of course you need to already have python installed on your system for this to work but type pip or pip 3 install pygame that should go through and install this you can see for me it was already installed it says defaulting to user installation blah blah blah we already have it installed anyways if this did not work for you for some reason that probably means that pip is not in your system path so i will link a video in the description as well as i'll put a card in the corner here that will tell you how you can actually install and fix pip so follow along with that it won't be titled like how to fix pip but just trust me in that video it goes through and explains how to actually fix pip okay so once we've done that and we've installed pygame the first thing we're going to do is make a new python file you can see i'm using vs code for this tutorial series which is just the editor that we're going to use and let me just zoom in a bit so you guys can actually read what's going on uh but what we're going to do is make a new python file i've named mine main.pi and i'm putting that inside of this checkers tutorial folder here and i'm simply going to type import pygame like that and just make sure that this works so if you're working in vs code what you can do is install the python extension so if you go to this extension tab right here it's on the lefthand menu bar type python click here and install it then you'll be able to debug python scripts you'll run python scripts and everything should work out well for you so what i'm going to do here is just press this run button and this will simply run the current script that i'm on you can see that it says hello from pygame and that means that everything is working and pygame has been installed properly and we're good to get started so what we're going to do here is we're actually going to try to build kind of a module around the checkers game and then add kind of like an api i don't want to use big words to confuse anyone but an application programming interface on top of the game so that we can use it with an ai later on so you'll see what i mean by that as we go through but what i'm going to do right now is just make a new folder inside of my checkers folder and i'm just going to call this one checkers like this so inside of here what we're going to do is actually make a new file i'm going to call this underscore underscore init underscore underscore dot pi so two underscores and knit two underscores dot pi what this will do is initialize this folder here as a package or a module or whatever you want to call it and that will allow us to actually import stuff directly from this package in kind of a special way which we'll be doing later on now what we're also going to do is do an underscore underscore init underscore underscore dot pi inside of our upper level directory so i have main.pi anita pi and then checkers again that's inside of a folder right here so it's inside of this checkers tutorial folder that i have open and once we've done that we can go back to the main.pi script and now we can start actually writing a little bit of code so the first thing that i'm going to do here is i'm actually going to set up a pygame display this is where we're actually going to be drawing everything onto then we're going to set up like a basic event loop and what that's going to do is check if we press the mouse or if we press a certain key or whatever we're doing it's going to check for that and then once we've set up the main loop we can set up some basic drawing so essentially draw the board for the chessboard draw the pieces all of that and then start getting into the actual logic of the game so the first thing i'm going to do is i'm going to say win in all capitals because this is going to be a constant value is win dot display dot set underscore mode and inside of here i'm going to type width and then comma height now these are going to be two fair two variables that we are going to define and what i'm going to do now is go inside of this checkers folder that we've created i'm going to make another python file and i'm going to call this oops it's lowercase constants.pi so what i'm going to do is i'm going to put all the constant values inside of this file here so if we ever want to change anything we only need to go to one file and we can really quickly see all of the variables and we can change everything that we need to so inside of constant stop pi i'm going to import pi game we'll use that later on and now what i'm going to do is say width comma height equals 800 comma 800. if you haven't seen this type of way of defining variables it just means width is equal to 800 and height is equal to 800. now you can define this to be whatever you want but just keep in mind if you change this value you're going to have to change a few other ones accordingly so just maybe leave it the same but this is 800 pixels high by 800 pixels wide next thing i'm going to do is define the amount of rows and columns we're going to have in our chess board so or checkers board sorry so we're gonna have eight by eight that is a standard checkers board so i'm gonna say eight by eight like that and then what i'm gonna do is i'm gonna say square underscore size so essentially how big is one square of our checkerboard and i'm gonna make that equal to the width integer divided by the rows now we could as well do the height divided by the columns or sorry what am i doing with sorry this should be width divided by calls not it's not going to make a difference but it makes more sense to do the width divided by the amount of columns rather than the width divided by the amount of rows so now we have a few constants here width height row calls square size while we're in this i'm just going to define a few variables for some different colors we're going to use so in pi game when we use colors they are red green and blue so rgb color codes so for red obviously we're going to do 255 comma 0 comma 0. this means we're going to fill the entire amount of red we're going to have 0 green and 0 blue and just so we know red green blue goes up to 255 inclusively so you can use any value for these uh between 0 and 255. next we're going to do white white is simply 255 255 255 and then we're gonna do black which is equal to zero zero zero and finally we're gonna do blue which we're gonna use to figure out what squares the person can move to that was those little blue dots you were seeing before if you remember when i ran the game it's going to be 0 0 255. so pretty straightforward i'll add a comment here to say rgb just so we understand that's what it's in and now we've kind of filled in the constants we'll do a few other things here later but we can skip that for right now so what i want to do is i actually want to import the constants that i defined here into this main.pi file so to do that is actually pretty simple what i can do is i can say from checkers dot constants import and then i can import the variables that i want which are width and height now the reason i can do this and i can reference checkers directly is because inside of checkers we added this init.pi file this init.pi file tells us that hey this folder is actually a python package and because of that we can import specific things from it so just to show you if i went inside this init.pi file and i said from constants import star so that means import everything from constants what i would actually have to do now if i wanted to import width and height is simply say from checkers import width height the reason for that is because inside of the init up high i import everything from the constants file so what happens is as soon as i import this folder checkers it automatically runs this which means it will automatically import all the stuff inside of constants now we're not i'm not going to do that i'm going to get rid of this just because i don't want to confuse anyone if that doesn't make sense but that's kind of just the explanation there and i figured i'd show that to you guys so let's go back to from checkers.constant import with height okay so now that we have the window we're going to set a caption for it so i'm going to say pygame dot display dot set underscore caption and inside of here i'm just going to call this checkers this is simply the name of our game and it will pop up kind of in the top little bar after that what we're going to do is we're going to define a main function this main function is going to be what we run to actually run the game and in here we're going to create what's known as an event loop that's going to run every you know x times per second that will check if we've pressed on something it will update the display we'll do all that so i'm going to say run equals false like that or sorry what am i saying run equals true my bad i'm going to say wow run and then inside of here i'm going to put the event loop so the idea being that we're going to call the main function from outside it's going to start running all of this and then there's going to be a while loop inside of here which will do all the event handling and drawing everything so while run which is just the variable we defined up here is true we'll do this loop the next thing i'm going to do is i'm going to define a clock so in pi game if we want our game to run at a constant frame rate so like 60fps for example we can define a clock and the clock will make sure that our main event loop doesn't run too fast or too slow this is good because in a game if you have like a really fast computer it would run faster if you didn't have this and a slow computer would run slower obviously so you want everything to be the same so it can at max run at what we're going to put it at so we're going to say clock equals pi game dot time dot clock and then inside of the while loop we're going to say clock clock.tick and i'm going to put all capitals fps like that and actually up here right above win i'm going to say fps equals 60. now some of you may ask why don't you put this in the constants folder the constants folder is going to be specific to the checkers game whereas this is specific to us actually rendering and drawing the game which will make more sense later but that's kind of the idea of why i'm putting it in here rather than in the constants file from checkers okay so now we have well run clock.tick fps okay great and what we're going to do is set up our basic event loop for pi game so for event in pi game dot if i could type this out event event.get what this will do is essentially check to see if any events have happened at the current time if they have they'll be in this list of the events.get and then what we can do is look at the event and see if it is a specific type if it is say we us hitting the quit button we'll quit if it's like pressing a certain key we can do something else so we say if event dot type equals equals pi game dot and then all capitals quit this just means we hit that red button at the top of the screen which we'll see in a second then what we're going to do is say run equals false so that will end this loop right here and then at the very end of our loop we're going to say pi game dot quit so essentially if we make it to this line of code so this while loop ends we will quit the game which just means get rid of the window that we're going to be popping up okay so now that we have that i'm going to say if event dot type equals equals pie game dot mouse button down so this just means we pressed any mouse on our mouse down if we did that or any mouse what am i saying any button on our mouse down excuse me if we do that then we will check to see hey did we press on a red piece are we moving whose turn is it all of that kind of stuff we'll do inside of here but for now i'm just going to simply type pass all right so now that we have that we have a window set up we have the event loop and let's actually go ahead and run this and see what we're getting so when i run this you can see we get just a black box and it says checkers at the top all right so i'm going to quit that and that means that we're doing things properly so far and now what we're going to work on is actually making it so we can draw that checkerboard on the display and we set up a few classes that are going to represent you know all of the stuff that we need to draw on the screen essentially so i'm going to go inside to this of this checkers folder here and i'm going to create a new file and i'm going to call this board dot pi now this if you haven't guessed is where we're going to put a class named board and this board class is going to represent a checkers board so what it will do for us is it will handle say all of the different pieces moving whose turn is it or actually it won't handle that but it will handle moving specific pieces deleting specific pieces drawing itself onto the screen that's what this class is going to do so we're going to say import pi game like this and we're going to say class board like that and define an init method that we will define in just a second okay so let me just go over to my file here so inside of the init we'll actually just leave it with self and we're just going to define a few attributes of this board class so the first thing that we're going to have is an internal representation of the board so what i'm going to do is i'm going to make a bunch of objects which are just like you can think of them as just pieces right like red pieces or white pieces and we're going to store them in a twodimensional list inside of this class so it would look if i can get get this working properly something like this right we might have like white zero meaning there's no piece there white zero meaning there's no piece there right white and then maybe there's a red one here and there's nothing and there's a red one here and there's nothing and there's a white one here that's kind of what this is going to look like we're not going to use white and red but just to give you an idea we're going to have a twodimensional list because we have eight rows and eight columns so we'll have eight interior lists and inside of each of those lists we will have eight different elements and those elements will be pieces which will tell us if they're red if they're white if they're a king piece all the other stuff that we need for um what do you call it for checkers all right so now we have the board the next thing that we'll do is we'll say self dot turn equals zero what i'm going to say here is zero will mean that actually do we i don't think i even need to define a turn in here sorry i'm going to not define that we'll do that in another class but we just need to keep track of is it red's turn is it white's turn so we know who can move right next i'm going to say self self.selected underscore piece equals none so this is telling us hey have we selected a piece yet have we not selected a piece let's define that and then i'm going to say self.red underscore left equals self.white underscore left equals 12. so the point of this is saying okay we want to keep track of how many red and how many white pieces we have in checkers we have 12 of each so we'll set a constant value up here or not a constant but we'll just set this equal to 12 and then as soon as we remove a white or red piece we can subtract from that next we're going to say self.red underscore kings equals self.white underscore kings equals zero if you're unfamiliar with the syntax this just means these are both equal to zero like if red kings is equal to white kings and white kings is equal to zero then red kings is equal to zero right so that's what this means and that's all we need for the init the next thing we're gonna do is we're going to define a draw underscore cubes now we could call this something more meaningful maybe but we're going to say self win and what this is going to do is say okay give me some surface which is going to be our window that's what wind stands for to draw the red and black cubes on in a checkerboard pattern so let me just run the other one and we'll have a look at it here to see what we actually need to do okay so we need to draw red first then black then red then black then red the black and so on in a checkerboard pattern so we're going to need to write some code that can do that i will show you how we do that right now okay so what we're going to do to start is we're going to fill the entire window so wind.fill with black now i need to import black remember from my constants file so what i'm going to say is from dot constants import black now i'm using dot because when we are in the same package as something else we need to specify hey this is what's known as a relative import we're going to import from dot constant which just means from something in the same directory as us named constants so we're going to fill the window with black and we're going to say for row in range and in this case we're going to just put up here rows so we know how many rows we have so for row in range rows and then we're going to say for call in range row mod 2 8 2 and not 8 sorry this will be rows now what am i doing here why have i done mod 2 well we want to draw a checkerboard pattern right so when we start the column here we either need to start in column 0 or column 1. so let me just bring this checkerboard pattern back up again so i can explain this essentially what i'm saying is okay if the row is zero then what we'll do is we'll say row mod two which obviously zero mod two is just zero so we will start by drawing a red square in column zero then we will step by two we'll draw a red square in column 2 and then in column 4 and then in column 6. now when row goes to 1 we're going to start drawing the red cube in column 1 because row mod 1 if it's or sorry 1 mod two is one so we're gonna start in column one and then we will skip over columns again and we will go one three five seven next where we can start at because it's gonna be two we're gonna go again and we're gonna say zero two four six right that's kind of the idea behind doing this and this is probably the simplest way we can actually write this code so what we'll do is we need to figure out where we're drawing this so we're going to say pie game dot draw dot rectangle we're going to draw it on the window we're going to draw with color red which we'll import from up here and while we're up here we'll actually import the square size as well because we're going to need to use that so what this is saying is okay draw a rectangle draw it on the window draw it with some color in this case which is red then we need to give what's known as a wrecked argument so a x y width and height let me bring back up the pi game window so i can explain this a bit whenever we start drawing something in pie game we draw it from its top left coordinate so top left in pie game right here is zero zero so if you can see where my mouse is kind of right beside this icon this is zero zero as i go far to the right i increase in the x as i go down i increase in the y so technically at the bottom here we'd be at 800 whereas at the top we're at zero so when i start drawing i need to pick where is the top left of the shape i'm about to draw so if i said zero zero it would be here and then i would draw 100 wide and a hundred tall to draw a square that is that dimension at that place so that's how that works so for our x and for our y what we're going to say we're going to say row oops row multiplied by square size and then call multiplied by square size and then for the width and height we're simply going to say square size square size now i know this is cutting off a bit let me zoom out so you can see the whole thing okay so four uh four row and range rows for call in range rows pi game dot draw direct on the window red and then of course this is going to calculate where the top left and right should be and then the width and height okay let's zoom back in all right so there we go that should be it i'm just going to check and make sure that's all we need to do and i think that should be fine for drawing the cubes so now let's test this out and make sure that this is working so what i'm going to do is i'm going to say from checkers dot in this case ford import board so what we'll need to do is create a new board object so we'll have to say board equals board like that inside of here and then at the end of every loop and what is this telling me this error is here pie game has no mouse button down yes it does what i'm going to do at the end of each loop is i'm going to say okay board dot draw cubes and we'll just pass it the window that we want to draw it on and then hopefully this will draw it and we'll say pygame dot display dot update so whenever we want to update the display in pi game we have to call this method the way the drawing works is we'll draw on top of each other so say i draw like a cube and then i draw a square after that so i have like one line that draws a cube and then another one that does this well cube and square i guess could be the same thing what am i saying draw cubes maybe we should call this draw squares yeah let's call this draw squares i realize my geometry is a bit off so if we draw two squares the one that we draw second is the one that we will see that's what i'm trying to say essentially if they were on top of each other but anyways we update the display after we draw the cubes so let's press the run button and what is it saying has no attribute draw squares did i change this squares board object save draw squares am i spelling something wrong it's no attribute draw squares okay let me look at this maybe i'm spelling something wrong i must be let's see define draw squares save really telling me it has no attribute let's see again and there we go okay so i don't know what was going on there but now it seems to be working and we have red black red black so on and so forth and a perfect checkerboard pattern okay so there we go that is a good start next what we need to do is draw all of the pieces so let's go ahead and do that so we have board dot pi and now what i'm going to do inside of here is i'm going to say define create underscore board now this is going to say self and we'll take a pass and what we'll do inside of here is well we will create the actual internal representation of the board and we'll add a bunch of pieces to the list now of course if we're going to add pieces we need pieces so let's make a new class in another file here called piece.pi and let's spell it properly like that so pstop pi i'm going to say class piece like that and then we're going to say define underscore under square in it underscore underscore we're going to say self row call and color so when we make a new piece we need to pass it what row it's in what column it's in and what color it is so we'll say self.row equals row self.call equals call self.color equals color and that should be it we'll add a few more self.king equals false so this is going to tell us are we a king piece if we're a king piece that means we can jump backwards right if you're familiar with checkers so we'll get to that part later but we'll just add that in now let me just check my file and see what else we needed we'll have self. selected that can be equal to false actually i don't think we need this either i have some code that i have written but we don't really need so i'm just filtering it out as we go and what else we need self.direction that is important so self.direction equals we'll have to define this here okay so the dilemma i'm having right now is i need to pick the direction for each piece right are we going positive are we going negative what way are we going essentially so what i can do is i can say okay well if we are and let me just run this look at the checkerboard pattern if we are the white pieces so we're at the top because i believe white is at the top we're going to move down which means the direction we're going to go is positive if we're thinking about the coordinate system of pi game where if we're red we're going to move up so the direction we're going is negative so let's do that inside of piece we'll say if self.color equals equals and now we have to import red and white from the constant so from dot constants import red white so if self.color equals equals red then the direction is actually going to be negative one meaning we're going up otherwise self.direction equals one okay so that handles that and then next we're going to say self.x equals 0 and self.y equals 0. and then what i'm going to actually do is i'm going to make another method that says calculate pause now what this is going to do is calculate our x and y position based on the row and column that we're in so in this case we're going to need to know the square size so that we can simply multiply whatever row and column we're in to figure out what our starting x and y position should be when we draw this piece so that's what i'm going to call calculate position i'm going to say self dot x equals square size multiplied by self dot in this case is going to be call because we're doing x which is the horizontal axis plus square size over over 2. now the reason i'm doing this is because i want to be right in the middle of the square when i talk about my x and y position so we're going to have circular pieces right and circular pieces we draw them from their center so we have a radius around a circle and that's how we draw a circle so our x and y position should be in the middle of the square so we'll just divide the size of the square by 2 that will give us 50 right so in this case this we could literally just put this as 50 if we wanted to and then we would be in the middle of the square all right so self.y equals the same thing square size multiplied by self.row that's the only difference plus square size over over 2. okay so what we'll do is simply call self.calculateposition after this the reason i'm not just writing this code inside of here is because we're going to need to do this a few different times if we change our row and column so it just makes more sense to have a method that can do it for us next i'm going to make another method i'm going to say define make underscore king what this is going to do is simply change the king variable so self.king equals true and that just means we'll literally just make this piece of king if we can next we're going to draw so we're going to say define draw what this will do is pretty straightforward we will draw the actual piece itself this is actually pretty easy to do but let's go ahead and do it so self wind we're going to start by drawing a circle and then we'll draw an outline for that circle so that we can actually see it well enough so we're going to say pie game dot draw dot circle win self dot color which is what we have to put here i believe self.color and then we need to pick our x y position for the center of the circle actually i think this is the right way yeah i think it is we're going to say self.x self.y and then finally we're going to pick a radius so for the radius we need to determine what we want that to be and that is going to be based on how much padding essentially do we want let me just bring this up between the edge of the square in the circle so if you look here we have like maybe 10 pixels of padding on each side so we need to define that and then we can derive what the radius should be based on that so i'm going to define as a class variable here padding equals let's make it say 10 or something like that i'm going to see if that's what i use for the other one yeah we'll make it padding is equal to 10 and we'll define a border which is essentially what do we want the outline to be so we can actually call this outline so outline equals two all right so now when we draw what we're going to do is figure out okay the radius of our circle should be equal to first of all the square size over over 2 right because the radius is not the diameter so we have to divide the square size minus the self dot padding over over two so sorry i've made a bunch of mistakes here this should just say self dot padding not divided by two not multiplied by two whatever i said uh this is the correct math is minus self.padding okay so if that assuming is that's the pattern we want on each side so then i'll just put radius here and yeah i guess that's lowercase variable and then that should draw the circle for us now the next thing we'll do after that is we will draw an outline so we'll simply say pygame dot draw dot circle and we can literally copy the exact same thing we're just going to change the color and the radius so for the radius we're going to say radius plus self dot outline the reason for this is whatever the actual radius of our button is we'll just go two pixels outside of that and actually we'll have to reverse how we draw this but we'll go two pixels outside of that so we draw a slightly larger circle and then on top of that circle we're going to draw the interior one so it will look like it's a border but really what we've done is we've drawn a big circle and then a smaller circle inside of that circle that's covering what that interior circle's color actually is if that makes any sense so i'm going to start by drawing the larger circle which will be radius plus outline and then on top of that i draw the smaller circle so you only see you know the two pixel difference in the radius between these as the outline now for the color we need to pick a color that is not the piece color and is not one of the square colors so we can actually see it so i believe that we can pick something i'm trying to think of like a decent maybe we'll go with a gray or something so let's just define uh gray inside of our constants and we'll use that so inside constants we'll say gray equals and we'll go 128 128 128 that's just a common color code for gray and then instead of color here we will simply do gray and then we'll import that from constants okay great so now we have radius we have the actual circle being drawn for the piece and i think for right now that's all we need to do i'm going to add one more method just to make it easier for us if we need to debug this later and it's just going to be wrapper what this means is what is the internal representation of this object you may have seen before if you print out like an actual object that you've created you get some weird like object at x blah blah blah location to avoid that we can simply make our own representation of the object and that's again just if we print this out or if we look at it it will show us this so i'm simply just going to say that we will use the color so return the string of self dot color so wrapper has to be a string so we'll just take whatever our color is and just turn it into a string so we'll see like 0 0 255 0 2 5 0 whatever the color of our object is okay so now we have peace and if we want to see them well we need to start creating some pieces