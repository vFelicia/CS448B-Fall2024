hey guys and welcome back to another YouTube video so in today's video I'm doing the seventh tutorial in my pug game programming series and in this video we're gonna be talking about collision so specifically collision between the bullets and art Goblin that we did in the last tutorial so you can see here when we we have our little character you can shoot as bullets or goblin runs around the screen and I've got these little red boxes around my characters here now they look very oversized but currently this is actually what our characters hitboxes look like now to do collision we typically use boxes in pygame just because it's easier you can use trigonometry if you're doing stuff with circular objects but we're just gonna ignore that for now because it's a lot easier to do with squares now the way that the hitbox works is pretty much as soon as these two boxes come in collision with each other so one is inside of the other we're gonna say that the two objects are colliding now clearly these hitboxes are not perfect and they are not correctly around our characters they should be shrunken in a little bit and probably moved down so that they're touching each edge of our character now you could prove to you this is actually the hitbox of our character because when I go to the edge of the screen here remember we've said that our character X which is here plus the width if that's gonna be past the edge of the screen we're not gonna let it move and same thing on the left hand side here it's not gonna be quite perfect but you can see that the same thing goes for here it's not letting us move off the screen like that so that is indeed our hitbox and the reason it's so big is because the images that we downloaded are 64 by 64 but the actual populated areas of pixels is not that much so we have to now create the hitboxes for these characters so that when we are shooting our bullets at the character they collide properly I'm also going to show you guys how to fix these these bullets from shooting out like the same time you can see how they shoot two at once it's pretty easy fix and I'll do that later in the video so make sure you stay for that okay so let's get right into it so in order to fix these hitboxes we just need to manually define them so this is what a lot of game developers will actually do and I know it seems tedious right now but it's easy because it's easy to do it's better to do now actually because once you do it then any to the class you create later we'll have a hitbox that's adapted to that so I'm just gonna open up on my other screen here you guys can't see it the perfect like dimensions for the hitbox is just so we don't have to play around with it too much but if you have a different character different sprite you've used you're just gonna want to play around with the hitbox on it maybe move it left to right move it up and down until it looks like it's about on your character so what I'm gonna do here I'm just gonna copy and paste this in is in my player class up here in the first initialization method I'm just gonna do selfthought hitbox and then I'm gonna set it equal to this so it's gonna be make sure you have these brackets not the square brackets we're gonna do self dot X plus 20 self dot y 28 and 60 now you might notice that this is actually a rectangle so whenever you have four things inside of a tuple typically we're just refer to that as a rectangle because this is gonna be the X this is the Y and this is the width and the height now conveniently this is actually the argument that our draw function or what you call it function draw method takes for drawing something on the screen so we've created a rectangle here but inside of this box I'm just gonna write the self dot kit box so now it's gonna be drawing our new hitbox now for our player our player can move right so if we just define this hip box at the beginning then our hip box is not going to be moving with our player so we're gonna copy this again and we're gonna need to paste it at the bottom of our draw method here so this way every time we draw the character we're gonna be moving the hitbox with it and changing that hip box so that we can check for it and you understand what I mean in a little bit if you don't get it now so we're gonna go down to the enemy now and for the enemy the hip box is slightly different but it's pretty similar so I'm just gonna do selftaught hip box again as an attribute and in our initialization method we're just gonna paste it and just copy this down so self dot X plus 20 self dot y 28 and 60 now that is what it is for our enemy and same thing every time we move our enemy we need to change the hitbox so at the bottom of our draw we're gonna change the hip box simply by doing that now again we need to make sure we're actually drawing this new hip box so in our draw that we've done here we're going to just write self up a box and the reason we don't need to put brackets around it is because we already have the brackets here we're gonna save the program and run it and see what happens and there we go we get our hip boxes now you can probably tell that they're not perfect I could probably play around with them a bit more to make them better I'm gonna fix this guy actually right now just because his hip his hip box is a little bit off the Goblin it's fine for right now I don't I'm not gonna worry about it that much so let's go back up to the player character here and this would I mean once you create the hip box you're gonna have to play around with it a bit just to make sure everything's perfect so we'll go here and we're gonna change this to 17 and we're gonna change this selftaught why we're gonna add 11 to it I'm gonna change this to 29 and we'll change this to 52 and these are the numbers I was looking for before and we're just going to copy these so ctrl C and I'm gonna paste it up here as well so just were consistent and then we're gonna go down to our enemy here and we're gonna change these ones a little bit too so for our selftaught enemy or just for our enemy what am I saying we need to just change this to instead of 20 we're gonna be using 17 so let's change this one first 17 self don't why we're gonna add 2 to that we're gonna change this to 31 the width and we're gonna change the height to 57 then you can go ahead copy dot paste that up here where our other hip box is defined and we're gonna run the program one more time and see how that looks and that looks much better there we go so the hip box is now our I would say almost perfect again it doesn't matter too much if they're like a pixel or two off just try your best to get them as close as you can and obviously with the walking animation they're gonna not be perfect all the time but that's good enough for me and now we're gonna get into the collision so what we want to happen here is we want these circles to be able to collide with that rectangle and when that happens we're simply gonna print to the screen that we hit the Goblet now you guys can do whatever you want when we hit the Goblin you can make like explosions come off you can make it say something can make the Goblin disappear we can play with that in the next video but right now we simply want to get the collision working so that we know when the character is hit so this is a little bit harder than it looks the first thing we're gonna do is just in our enemy class here we're just gonna define a new method we're gonna call this one hit and it's gonna take the argument or parameter self then we're gonna pass in here now this is what you guys are gonna do every time that the goblin gets hit so for me I'm actually just gonna print hit you guys can do whatever you want in here once the Goldmann gets hit that's all I'm gonna do for right now okay so now that we've done that we need to check for collisions so the way we're gonna check for collision is in our main loop here and we're pretty much just gonna check every time the bullet is shot so not show up in it like if a bullet is moving across the screen that's why we have this for loop for all the bullets in this for loop we're gonna check if the bullet has collided with B goblin now to do this there's a few if statements and else statements we need to include now it's a little bit complex but pretty much if we run the program an easy way a good way to understand it is always like drawing and visualizing stuff in programming is when we shoot the bullet we need to see if it is inside of this rectangle now if it's inside of the rectangle then we're gonna say it hit if it's not inside of the rectangle then it didn't hit right so if we jump up here although the X's might be the same as the X's here we need to make sure that's inside the rectangle so it has to be in between the two Y values of our square and that'll make sense as I explain this here so before we start moving the bullets what we're gonna do is we're gonna do an if statement here and we're just gonna check if the bullets are within the same ycoordinate so within the top and the bottom of the rectangle of our goblin so if the y coordinate of our bullet is in between the top and the bottom of our rectangle then that means that the y coordinate of our bullet which is in the middle of our bullet which is an issue so we need to add or we need to actually subtract the radius here so that we are checking the bottom of the or the top of the bullet sorry if that is less than our Goblin hitbox of dot hitbox and we're gonna use the ycoordinate the hitbox here plus the goblin dot hitbox and this is gonna be our what do you call it our height so goblin da hitbox of three so if this means if we are less than if we are above the bottom of our rectangle and now we need to check if we are below the top of our rectangle so now if bullet dot dot y plus bullet dollar radius so this means the top of our bullet or the bottom of our bullet sorry is less than or greater than and now we do goblin dot hitbox and just the ycoordinate here so now this part here this checks to make sure that we are above the bottom of the rectangle of our goblin and this part here checks to make sure that we are below the top of the rectangle now just because we meet those two criteria does not mean we've hit the the goblin so to see if we hit the goblin we now need to check the left side and the right side and make sure we are in between that so to do that similarly we're gonna do if bullet dot X and so instead of Y minus the radius or plus bullet the radius what am i doing and here we're gonna need to make sure we have bullet so that this works can't just put radius like I've been putting their full thought radius so plus the bullet radius if this is greater than the Goblin don't hit box x coordinate so hit box euro this access is our x coordinate this means that we are on the right side of the left side of the rectangle hope that makes sense there and our bullet dot X minus our bullet dot radius is what is it here we're gonna have to make sure that it is less than the right side so to do that we then need to do goblin dog hitbox 10 sorry cuz we're accessing the x+ goblin dog hitbox 3 or hitbox 2 because that's gonna be the width alright and that should hopefully work so now if that is all good so that means that we've satisfied all these conditions now then that means we have to we have to do something here so if we are within the ycoordinates we are within the xcoordinates then we just have to do hits right so we're gonna do goblin dog hit and this is what happens when the golden gets hit it's gonna come up here it's gonna call this it's gonna print hit now we also want to make sure that when we hit the goblin our bullet disappears so to do that we're gonna do the same thing that we did here when we were moving the bullets and we're simply gonna remove the bullet from the list now we already did this so I'm not gonna explain how it works but it just removes it from the list so just just put that there and we can go ahead now and we run the program and hopefully everything should be working all right so we've got our two little characters with their hip Fox and when I shoot my bullets and they hit the goblin you can see that it says hit now yes sometimes they hit at different points so sometimes you can see they disappear instantly other times they take longer they go further into the box that's fine they're still hitting now the last error that we need to address here the last thing is the fact that our bullets shoot in like groups of two in groups of three now it's actually a pretty easy fix so just follow along right here we're gonna need to create a variable to do this and I'm just gonna call this shoot loop you can call whatever you want I know shoot looks kind of weird name but that's what we're gonna use and at the end of our when we're shooting the bullets here so when we hit space I'm just gonna do shoot loop equals 1 now I'm gonna come back up here and I'm just gonna write a little bit of stuff here and I'll explain how it works after so we have if shoot loop is greater than 0 then shoot loop plus equals one and then if shoot loop is greater than three shoot loop equals zero and then I'm gonna come down here and I'm going to say and shoot loop equals equal to zero okay so I like fast there but pretty much what happened to you and this just fixes our issue by setting like a really basic timer is we say we're only gonna allow the user to shoot a bullet if the bullet cool down is Matt so the bullet cool down is what we're gonna be calling shoot loop pretty much so when we first shoot a bullet we have shoot loop equals 1 then we run through the while loop we go through the rest of it we come back up to the top we save shoot loop is greater than 0 meaning that it is 1 or greater then we're gonna add 1 to it so we start at 1 we go to 2 and then if it's greater than 0 it's gonna be set to do it's not greater than 0 in this instance so there's only two right now we come down here say we're spamming the spacebar uh it's not working because our shoot loop is not equal to 0 yet then we're gonna go through the while loop again it's gonna become 3 is it greater is shoot loop greater than 3 no it's not we're gonna go through it again and then eventually once it becomes 4 we're gonna set this equal to 0 this is now gonna be met and it's gonna allow us to hit space you don't really worry if you don't understand how that works pretty much it's just setting a really basic timer for like a few milliseconds to make sure that we can't just spam the spacebar and shoot multiple bullets anyways let's see if this works and now you can see that was really beginning there it shoots only one bullet at a time and I can't just like that's as much as I can spam the spacebar like that so that it kind of gives like a break between bullets and yeah there you and we also have that limit so you can only have 5 bullets on the screen at a time and that's also just to reduce lag and so that you can't just like continually span the space bar and you can see every time we hit the Goblin it says hit and everything seems to be working pretty well now in the next video I'm gonna go on to make sure to make this player collide with the Goblin if you guys feel so feel confident about what I just showed here you might want to try to do this by yourself so you can see if you can get the player to hit the Goblin a little bit more complicated but not really not that much and if you guys want to add something else to try to see if you can add like a little score variable that says how many times the Goblin gets hit pretty straightforward if you guys enjoyed the video please leave a like and subscribe to the channel if you have any questions or concerns leave a comment down below and I'll be sure to get back to you and yeah see you guys again in the next tutorial