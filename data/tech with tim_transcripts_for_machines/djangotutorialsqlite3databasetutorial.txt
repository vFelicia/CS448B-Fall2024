hey guys and welcome back to another django tutorial so in today's video what we're gonna be doing is going through databases so how to set up databases add entries retrieve entries all that kind of stuff this will be kind of a beginner ish tutorial on databases I'm not gonna be going through absolutely everything as there's a ton of stuff to cover but I will give you guys a very good foundation and pretty much everything you actually need to be able to use the database then obviously you could probably look up some more stuff if you need that in the future now the database that we will be using is sqlite3 now there is other kinds of databases that you can use but if you're a beginner and for our purposes SQLite is just the best and easiest to use it doesn't really make a massive difference if you use the other ones however if you'd like to use those go ahead and I will be showing you briefly how you can actually change your database now the reason I'm not going into templates and more advanced HTML right now is because likely the information that we're storing in our database is actually what we're gonna be wanting to show within our models or starting out models within our templates and HTML so it kind of makes sense to make the information first and then display it afterwards within templates and all that so we're not kind of redundantly typing things and modifying things later so with that being said let's get started now our first step when we're going to be working with the database is we actually need to modify our settings dot Pi file inside of our interior my site directory now to do this obviously we're just gonna go to settings up pi what we need to do is need to scroll down to installed apps we need to add our application in this case called main for me to our installed apps and the reason we need to do this is because when we're gonna be working with databases and just some things in the future we need to tell Jango that we have another application that has some dependencies and things that need to be set up inside of our project so to do this what we're gonna do is just go single quotes right at the end of this what do you call it wherever the comma is and we're just gonna type the name of our application in this case mine is called main yours this might be called something else and then we're gonna type dot apps dots and then main config and then add a comma after that now obviously if yours is named something else you're gonna change the so you can add a capital letter for whatever the name is and then yeah just put it there and and that'll work for you okay so we've done that and now we've told Jango that we actually have this application main and we need it to be configured and set up when we make some modifications to our project and stuff like that so our next the next thing that we actually have to do is we need to get into our my site directory so the same directory that has that managed up hi file in it and we have to run the following command which is Python managed up high and then migrate now when you type this what do you call it yours might yours should likely pop up like a bunch of text that says making migrations making changes now since I've done this because I was testing it before it's not showing that for me but you should do that what I've just done here essentially said we've updated the settings top PI file so let's run managed up high and get it to make any changes to the project that it might need to do and that's as far as I'm kind of gonna explain that all right so we've done that and now we're actually ready to start defining some of our models for our database so if you don't know how to a database works essentially it's just a collection of information and what we're gonna be doing is defining some models and some attributes that kind of go with each of the models and the model is just a way of well modeling information and it makes it just easier for us to grab information and we can add attributes to those models we can add some methods to them you guys will see how it works in just a second but essentially if we want to create a model what we're gonna do is we just going to create a class with the name of our model and we're gonna inherit it from models dot model which is like a database model class setup from Django already now for this application that I'm gonna write I want to create a todo list so to do this I'm going to create two models one which is a todo list and then the other one which is items that go on our todo list and you guys will see how this works in a second so I'm just gonna say class todo lists like this and it is going to inherit from models dot model now this essentially means that we're creating a database object which is called todo list and now we're going to define some of the attributes and trees that each model todo list is gonna have so our Fuhrer todo list I'm gonna have a name so I'm gonna say name is equal to and in this case models char field and I'm gonna say max underscore length equals 200 now whenever we create a new attribute or yeah I guess just attribute of our information of our model what we do is we create it as a class variable and we simply do the name of the attribute and then we have to do the type of field that we want to be stored in our database all right guys I'm back so I don't a quick cut there cuz getting a phone call what I'm gonna do now is just define a method we'll just call this STR and I'm just gonna put self in here and simply return self thought name just so that if we ever want to print this out or see what it actually looks like we can get some meaningful text by using the string method on that so next what we're gonna do is define our other model which is item so same as before this will inherit from model stock model and this is gonna have some attributes as well now item is a little bit different just because it's actually related to todo list and we're going to have items as a part of our todo list so to do this again what we're gonna do is simply say to do list equals and in this case we'll say models duck for in foreign key and then in here we're gonna type todo lists like that I'm gonna say on delete equals models dot cascade now the reason we're doing this is because remember how look up here we have character field right which is a type of field that we could store information in well we don't actually know the type of field or Django doesn't know the type of field that todo list is because it's an object that's not defined within Django so we have to define the fact that we're gonna use a foreign key in this case a to do list object when we create an item okay and that's what we're doing now on delete is just saying well if we delete to do list since all items exist on a to do list we're gonna have to delete these as well and I've that's what on cascade is doing is just defining the fact that this has a special way of being removed okay so our next attribute is gonna be name so I'm gonna say R sorry not name will be text and text is gonna be equal to a character field as well and a character field is essentially just a string note that you do need this max length whenever you create a character string so make sure you add that in this case let's just make that 300 and now we will add one more field which will be a boolean field so models the boolean field and it'll just represent whether or not we've completed the item on our todo list same thing here for string so self and we'll just return the text so return self dot text now remember in the future we can add to these models and modify them so for now I'm just keeping it simple we don't need anything too complex alright so now that we've done that we've modified our models we actually have to tell Django that we've modified our models and to do that what we're gonna do is we're gonna make sure we're in that same directory so my site I'm gonna say Python managed dot pie make migrations in this case we'll put the name of our app which is me now yes that's K so this should work and let's hit enter here and see what we get alright so there we go so now when you do that you should see something that says migrations for and then the name of your app which should be main and says we created a model todo list and we created a model item now making migrations is similar it's like adding something to the staging area and get if you don't know what this is don't worry but it's similar to version control in that we make a change it'll save the change and then we can actually apply that change to our project so if I want to apply this change right now I've only made it I haven't actually applied it what I have to do is go python managed up high and then migrate and there we go it says applying migrations and it has applied the migrations and you should see if you go inside of your migrations folder inside of your app you should get something that looks like this and you can see if you actually open it up it tells you the exact migrations or changes that were made in case we have ID ID is automatically added for of the different models that you create as a field we have the name which is a character field we have text complete and todo list there we go so that's kind of how that works it's nice because you can go back and view previous changes and then obviously revert to other changes by just using those files so yeah all right so now that we've done that what's actually next is to add some things into our database so right now we have a fully functioning database and I'm gonna show you how we can add stuff to it now the easiest way to show you is just from the command line because we'll just mess around with a few different commands get the syntax down and then start doing stuff from code so to get into a command line what I'm gonna do is just go Python managed up high and then shell this will open up our Python shell for us which will allow me to add some things into the database now our first step is we're gonna import our models so that we can use some of the methods and we can actually use those models to create objects and store them in the database so I'm gonna say from and in this case main got models because we're not in that main directory well imports what's the name of our models we have item and we have to do list like this there we are so front from main dot models import item and to do list and now what we're gonna do is we're gonna create a todo list and add it to the database and this is really easy to do so I'm just gonna say T which is gonna be our todo list will be to do list and then in here I'm just gonna give it a name and I'll say name equals in this case let's just say Tim's like that list sweet so Tim's list and hit enter now if we want to save this into the database watch how easy this is TDOT save and we have actually now saved this into the database and if I want to see all of the different objects what I can do is I can say to do list if I can get the capitalisation correct dot objects dot all and if I do that you can see we get a query set and it says to do list Tim's list and there we go we've successfully stored one to do list in our database so to get all of the todo list that we have I just did objects dot all and obviously dot objects is just giving objects and dot all is actually gonna give me like a query set which will allow me to access objects now each of our objects have IDs associated with them and they have that name attribute associated with them so if I want to see the ID of some of my objects what I can using is a todo list and I believe I can say dot gets and then in here I can say ID equals and then in this case the ID is gonna start at one and it's gonna increment as you add more objects but if I do that type up their to do list says no actually you get hmm I believe we might have to do dot objects dog yet dot objects dog get ah there we go so if I do dot objects get and I put the ID which is the thing that I'm looking for ID one you see we get a todo list and it says Tim's list now if we didn't put that string thing here string method inside of todo list it wouldn't be saying Tim's list it would be giving us like a memory address awesome so we have that now if we want a query by like name so what this is doing querying just means like getting all of the objects that contain the key you're putting what I can do is just say name equals in this case and say Tim's list like that and obviously it's gonna give me Tim's list now if I try to query for something that's not that doesn't exist like I say ID equals two you see we get an issue because there's no query that exists for ID 2 if I wanted that to work I would have to add another item into the database sweet so that's kind of how you do some of that now if we want to create an item what we can do for items is actually really nice is we can just let's see the best way to actually make an item is hmm let's see this we're gonna do t dot and in this case we're gonna say item underscore set and if I print this out dot all like this you're gonna see we get an empty query set now notice I did item underscore set right which would be an attribute of our to do list T right because we created two lists here we saved it and so the t object is still there but i said item underscore set but i haven't defined item underscore set in here this is is because I've added this relation between items and todo lists each todo list automatically is gonna have a set that stores a bunch of different items okay so another way that we add items into our database is a little bit different than how we create the todo lists now because our items are related to our todo list there's a special way that we can create them and create them within our todo list so essentially remember we have that todo list T I just tab down just a bit more space in its cleaner but we have that object T and if I printed that you can see that's our todo list Tim's list now because of the relationship we've created here what I can actually do is say Tim underscore and then what item underscore set dot all and it actually gives me a set of items which are exactly these items and you just reference all of this with automatically with a lower case it's what it defaults to and yeah so essentially there is like a blank placeholder for our todo list a whole too much item because of what we did here so if you want to create an item inside of this item set what we do is we say T dot item underscore set dot create and then here we give the parameters that we need for our item actually need a text and we need complete so what we'll do is we'll say text equals and in this case we'll just say like maybe go to the mall something you have to do and it completes obviously will be equal to false okay so we do that and now we see we have an item that says go to the mall so we've done that now we've created an item inside of our item set now if I do t dot item underscore set and then dot all you can see that we get all of the items and obviously if I want to get one of the items and I can say dot get and in this case it'll be ID one so I say ID one go to the mall again if I try to do ID too we're gonna run into an issue because ID two does not exist alright so now that we've created one item where I would create an item in a todo list inside of our database what we can do is we can actually lay that information from some of our views and start using the web browser to see this information so the reason I did that from the command line is just because it was a lot it's gonna be a lot faster just to run that and actually add items to our database obviously if we're adding things into our database in future videos we're probably just gonna use our web browser and we'll have like a forum where we can input stuff and it'll automatically be added and that's obviously what we'll be doing later so what I'm gonna do is I'm gonna go to my views now and I'm actually just gonna get rid of u1 which means that if I go to URLs I should remove the path v1 now what I want to do is I want you to be able to type the ID of a certain todo list in the address bar and it pop up the name of the todo list and the items that exist in that so to do that I will briefly show a cool thing that we can do with paths and well it will elaborate on it in future videos but essentially I can actually put these two tags in here and say int and then in this case I'll just say IND or ID standing for ID and what this means now is what's gonna happen is we're gonna look for some integer in our path and we're gonna pass that to the function views dot index so that means that index now needs a variable called ID in it and what I can do is well show you basically without the database actually is if I just put like % ID and then or % s sorry and then outside here I do % ID it will actually what do you call it show me whatever number I type in in my what do you call it like all my web browser so I close the command prompt I shouldn't have done that Wow one second I should got a CD into my correct directories here Django CD my site and then we will just simply run our server so we can test this and I can show you what I mean so let's do Python managed up I run server I gotta activate my virtual environment apologize about this guys ok so there we go so we've got this running now so let's go to our web browser and let me show you what I mean by this so if I hit this now you can see we get an issue because it's that it didn't find admin or it didn't find some integer which was an ID so now if I type one in here so like slash one you can see it actually brings me to a page that says one and if I type three in here it brings it to a page says three if I type four we get four and actually anything that we type in that's a number will just show up in here so we do like four eight like it shows up there okay that's like the first kind of way that we can do dynamic pages in terms of the linking alright so what I'm gonna do now is I have this idea obviously so I don't want to just show the ID but I want to get the ID of that object as a todo list from our database so to do that what I'm gonna do is similar what I've shown in the command line is I'm starting I'm gonna start by importing our models so in this case I'm going to say from dot models import and then this case will just import to do list cuz actually we might need item as well so we'll import item as well so their to do list and item and what I'm gonna do is get that to do list based on the ID so I'm gonna say that I'll say LS is equal to to do lists dot objects done yet and then in this case we'll say ID equals ID right so now we have that to do list object and now instead of printing the ID let's print what do you call it the name of our todo list so I can just say LS dot name so now we should have made a modification and it should have just our servers running it should just automatically changed let me just copy this link again and if I bring out my tab uhoh it's already there so if we do this and just change this ID to one now you can see that we actually get Tim's list because again the way this works is we go to URLs we type some number it gets that number it passes it through this function as the value ID we're just gonna say we're gonna go the similar thing we did in the command line little todo list we got all the objects of type todo list we'll get the one that has ID one and then we will simply take the name of that and print it to the screen or show it on the screen now again I could change this from ID and I can make it name and I can make the name like Tim's list so you'd have to type that in to get it so we can show that as well so in this case let's just do string and then we'll do name and now we'll just have to make sure that when we type it in our link bar here that we actually type everything correctly and make sure I save all this too if you type the name exactly like this so if I copy that and I put this here you can see that again it's showing up tim's list and we're not running into any issues but if i try to do like two here you can see that we're getting an issue because there's nothing with the name too in our database awesome so that's pretty straightforward that's how we get items and show them on the screen in the next video we'll do way more advanced stuff with this but if I want to get the items that are associated with the todo list and show those as well well what I can do is let's go back to and now we'll just leave it as name so we don't need to change it now we'll get the items so to get the items we're gonna say items equals and then in this case to do list or actually LS cuz we've already got the to do list dot item underscore set and then dot all and then what we can do is we well we know we only have one item so let's just get the first item so as we just do dot gets and then ID equals one and we'll do is change this percent we'll add another one and we'll simply say item dot name or items not name I guess this should probably just be item will say item don't name or dot text my apologies okay so now that we have item dot text here we got to add another percent in here so I'm just gonna put another tag I'm just gonna say BR and then what do you call it BR just standing for go to the next line and we'll add another tag this case is just gonna be a key tag and we'll just put percent s like that so now if I go back to my bar here and instead of doing T I do Tim's list and I hit enter hmm what's the issue all right so I just realize we actually have to just put this string around item text don't know why that is but apparently that was the issue so anyways now if I go back to my web browser and refresh you can see we sit we get go to the mall now obviously this is a very basic example I'm gonna make this look a lot better in next week and we're not gonna have to do like this kind of weird HTML tagging and whatnot but that's kind of been it for this video I hope you guys have an idea on how to use databases will be continually using them adding things and removing things and all that kind of stuff so if you are still confused we will be going through that in the future videos but I just want to make sure we get everything set up and working for right now and with that being said I will see you guys in the next video