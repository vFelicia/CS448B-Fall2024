hello everybody and welcome to video 8 in this rust programming tutorial series in this video i'll be going over functions specifically i'll be covering basic functions how you create them how you call them how you use them then i'm going to talk to you about statements versus expressions and then i'm going to describe how you return values from functions which is a little bit different in rust than it is in other programming languages with that said let's dive in here after i tell you to check out programmingexpert.io from the link in the description which is the best platform to use if you want to become a software engineer if you're already at this point in the tutorial series just go have a look at it let me know what you think and with that said let's dive in here to functions so we already have a function created in our program and this is the main function now this is a special function and we know it's going to be the entry point to our program and that's why we need to call it main and we need to have this in our main kind of source file here right however we can make our own functions in a similar way to how the main function is defined by using this fn keyword which stands for function so i'm going to do fn here and then i'm just going to do a test function so for now we can just do something basic like test but i do want to mention here that the naming convention for functions in rust is to use snake case so let's say i wanted to have something like test one this is how i would write it as opposed to using camel case which would be something like test one so use snake case like you would in python uh not camel case like you use in most other programming languages okay so with that said we have function test one or we can just go function test we're going to open up our curly braces like this and anything inside of the curly braces here will be executed when we call this function so this is the name of the function inside of the brackets we'd actually put any parameters which i'll talk about in a second and then inside of our curly braces we put the body of the function or what we want to execute when we run it so for now we can do something very basic where we say print line and we can just say test has been called dot dot okay so this is our test function now to use our test function we simply write the name of the function followed by our parentheses and then we're going to put a semicolon here and this will call the function calling a function just means we're going to execute the body of the function so we'll just print this now we can call function as many times as we'd like so we can call it twice like this we could call it before we print hello world and then this function will just run three times so that's kind of the benefit of functions we can reuse them and that's why we would make something into a function okay so let's go here and let's just run the code and make sure this works and notice i get test has been called hello world and then test has been called two times now one thing to note here is that it doesn't matter where you define this function russ does not care if you put it above or below the main function you can put it pretty well anywhere in the program and just to prove this to you here when i run the code it will still work even if it's above the main function and again as we saw when it's below the main function of course it works as well okay so that is the basics on creating a function this is a very very simple function right all we're doing is printing something out and a lot of times when we create a function we're doing this because we want to reuse some code and oftentimes we want to pass parameters or values to the function that it can then process and do something with so let's now delete this function here let's get rid of these calls and let's make a function that does something a little bit more useful maybe like adding a few numbers multiplying something hopefully you get the idea so for now i'm going to do something called add numbers okay and for this function i want to take in two parameters now parameters are just values that need to be passed to the function when we call it so in this case let's take in a number x and whenever we define a parameter here we need to specify the type of this parameter and in this case i'm going to say this is a not in 32 but an i32 i also want to take in y and this will be an i32 as well and then inside of here i'm going to say print line exclamation point i'm going to say the sum is and then i'm going to put my formatting in here and then i'm just going to put here x plus y okay so now we have a function that takes in two parameters and notice that i had to specify the type of these parameters right so that's mandatory when you are writing parameters for your function and you separate them with commas as well if you're going to have multiple parameters so i have x i 32 y i 32 and then i'm printing the sum is and then x plus one okay so let's call this function let's say add numbers now we know we need to pass two i32 values so let's pass away like 20 and 30. and let's go here and let's clear and run the code and let's see what we get and notice we get the sum is 50. so it just adds those two numbers together and then prints that out there you go that is the basics on writing functions that accept parameters now of course we can pass more parameters as well so we could pass a parameter that isn't an i32 type as well so maybe zed and maybe this is something like f32 we'd have to deal with that f32 value we get the point we just have to write the name of the parameter followed by its type all right so now that i've discussed the basic function usage i want to walk you through something called statements and then compare that to something called an expression or expressions now you've probably heard these terms already but it's important to understand the difference here because rust functions can return an expression but they cannot return a statement we need to know what the difference between those two things are so a statement in rust is pretty much one of two things there's a few other things as well but for now we can just imagine the statement is going to be something like a variable declaration where i do something like let x equals 20. this is a statement this whole thing right here it ends in a semicolon and it doesn't evaluate to anything it doesn't return a value what i mean by that is i can't do something like let y equal and then if i put this in parenthesis here let x equals 20. in other programming languages you can actually do this for example in python you can do something like y equals x equals 20 but in rust you cannot and the reason for that is a let statement is a statement right it's not an expression and that means that this here doesn't return anything it's not equal to anything and i can't assign it to what so let y equals this will give me an error because this just doesn't make any sense in rust this itself doesn't return anything even though yes x is equal to 20. okay hopefully that makes a little bit of sense but that is what a statement is so let's hear these are statements they don't return anything we then have function declarations so when we actually write fn and then the name of the function and the parameters and all of that this is a statement this doesn't return something i can't do something like let x equals and then the function here whereas in other programming languages you could actually do that so keep that in mind if i try to do this that's not going to work because this is a statement not an expression okay so we have kind of the two basic things here that are statements so what is an expression well an expression is pretty much anything else that you write in rust that actually evaluates to something or returns a value so in this case a macro is actually an expression a function call is an expression 20 is an expression because 20 returned something it evaluates to something which allows me to store it in the variable x something like 2 less than 3 this is an expression and this is an expression because it evaluates to true or false something like 2 plus 3 that's an expression pretty much anything else in rust that's actually going to return or give you a value is an expression and yes again for now all of our macros and our function calls we are going to imagine they are expressions okay now one other thing i'm going to show you that is also an expression that looks a bit weird is the following so let's actually just delete this and let's say let number equal to and then i'm just going to put kind of a block like this now this is actually an expression but i'll describe how this works in a second i'm going to say let x equals 3 and then i'm going to say x plus 1. so this here is an expression uh that will evaluate to x plus 1 which is actually 4 and then we will put 4 inside of number now i need to prove this to you because it looks a bit complicated but let's print line let's go here and let's print number and let me describe why this works let's also just get rid of add numbers for them so we know that let number here is a statement and actually let me just add my semicolons here so i don't forget and anyways this is a statement so let number this whole thing is a statement but inside of the statement we can have an expression and in this case we are assigning this expression to the value number to the variable number now the reason why this is an expression here is because it returns a value we start by having a statement inside of this expression we say let x equals three but then we have x plus one and x plus one returns the value four so it's kind of the same thing as just having a four here now notice i don't actually have a semicolon here it's important you don't have a semicolon i know this seems weird and you would intuitively want to put one there but i'm intentionally not putting a semicolon here and what that means is that i'm actually kind of returning the value 4 from this block right here which makes this whole thing an expression which i'm assigning to the variable number so i understand this is a bit weird if you've never seen anything like this before this is a pretty specific thing to rust at least from what i know but let me just go here to my my terminal and run the code and notice that we get hello world and we get four so this right is an expression because we have an expression at the end of it and that means whatever this value is is kind of being returned to this whole thing so let number is going to be equal to 4 right as we just saw so now i want to show you what happens when i add a semicolon to this last line now it's kind of unintuitive i wouldn't imagine this would change anything but it actually does and when i go here and i clear the screen and i rerun notice that we actually get an error and it says that this which is the default return value does not implement std fmt display you don't have to worry too much about what that means but essentially it's saying that this here didn't return anything it didn't actually give us a value and so we can't print that out whereas again if we change this to not have the semicolon now this is an expression as opposed to a statement if we added the semicolon and we're kind of returning this and able to use it as the value 4 number all right hopefully this makes a tiny tiny bit of sense now that we've looked at that though let's see how we actually return values from functions because we do it in a similar way to this so i'm going to clear all this i'm going to say function and let's just go with add numbers again let's take an x which is our i32 and y which is going to be our i 32 as well and now what we need to do is specify what we're going to be returning from this function so this time rather than printing out what x plus y is i want to return it so to return it i can simply do x not quotation marks but plus y like that and this now turns this into an expression which is going to be returned from this function when it's called however i need to specify the return type just like i'm specifying the different types for the parameters here so to do that i'm going to put an arrow where i'm going to put this operator here which i believe is just like the return operator in rust and then i'm going to put the type that's going to be returned from this function which is i32 so i'm specifying that i'm taking in x and y which are both i32 values and then returning an i32 value and the way that i'm returning this here is that i have an expression as the last statement of my function body and now what i can do is something like let result equal add not address add numbers i'll pass maybe two and three and then i can say print line and we can just print this out here and print result okay so let's go to our terminal here let's clear and run and we got an issue here oh we need a semicolon my apologies guys i always forget the damn semicolon let's run and notice we get hello world and we get five okay so that's how you return a value from a function you simply write an expression that you want to return at the very end of the function without a semicolon if you have a semicolon it's not going to work so make sure you don't have the semicolon now if i just want to return say the value 5 or the value 10 i could just literally write the value 10 right because this is an expression so if i write this now notice that i'm going to get these errors because i'm not using x or y but i still get 10 returned here uh the program doesn't crash it's just giving me sorry the warnings okay now just like we can do that so we can have you know x plus y right we can write an expression we can also explicitly use the return keyword in rust so i can say return x plus y and if i do this now i'm allowed to add the semicolon and i'll be returning whatever the result of this expression is so let's go here cargo run and then notice i get hello world n5 now i believe it doesn't matter if i add the semicolon or not so if i remove it here i should still get the same thing but when you explicitly use the return statement it's fine to uh to have the semicolon and in fact this is a statement that's going to return an expression from the function i know a lot of terminology here but it is important to understand before we go too much further okay so let's continue here and look at some more advanced examples so inside this function i can do something like let result equal x plus y this is a statement it's fine if i put that inside of the function but if i'm going to be returning a value i need to have an expression as the last line of the function so i'll just do here result and now this is the exact same thing that i had before so if i go and i run notice that i still get five this is the expression that's being returned at the end however i can get a little more complicated here and maybe we'll throw it in if statement and i'll do something like if result is greater than 10 then i'm just going to return the result like this minus 10 okay and we can put a semicolon there and i won't even put an else statement i'll just put result right here so now what i'm doing is i'm returning early from the function which i'm able to do by explicitly using the return statement and if the result is not greater than 10 then i'm just returning whatever the result is so let's make this greater than 10 now so let's go 12 and 3 so 15 so we should get five so if we go we clear and we run notice i get five now actually wasn't the best example because we got five last time but now if i change this to one and three and i clear and i run i get four hopefully this makes a tiny bit of sense but when you want to return early so not returning from the very last line of the function you use the return keyword otherwise you can just write an expression that you want to be returned from the function and then of course you can grab the value by saying something like let result is equal to and then the function call the function call is an expression so it evaluates to something or gives us a value and as you saw previously the default return value from a function is going to be just these kind of empty parentheses here so if you don't return anything from the function and you tried to say get the result of it then it would just give you these empty parentheses and you'll get all kinds of errors when you're trying to use those last thing let's see what happens if we don't manually specify the return type so we get rid of that we go cargo run notice we get an error here it says expected this found i32 whatever it's just giving us you know an error because it's saying the expected default return value is nothing yet you're returning something from the function which you can't do unless you explicitly specify what it is that you'd like to return okay so with that said i think that's pretty much everything that i need to cover for functions there is some more advanced use cases of course but for now this is really all you need to know just remember that function declarations uh stuff like return statements and let statements are statements they are not expressions and when you want to return something from a function you can simply write an expression without a semicolon or you can manually use the return statement you also need to specify the types for the parameters as well as for the return value of the function with that said if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another rust programming tutorial