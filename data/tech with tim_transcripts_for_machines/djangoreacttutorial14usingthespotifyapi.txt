hello everybody and welcome to another video in this django and react tutorial series in this video we're going to be continuing from where we left off we're going to be using the spotify api we're going to be getting access or i guess the information about the currently playing song and displaying that on the screen now depending on how quickly that goes we may also be playing and pausing the current song i'll show you how to do that and then in future videos we'll talk about fast forwarding the song and some other random things as well so anyways that's what we have in store for today so let's go ahead and get started although i will just let you guys know right now that this is where the cool stuff in my opinion kind of starts to happen uh this app at this point in time sure it's interesting but there's not really any you know cool thing that we're doing with it it doesn't really have any purpose we just have users in a room now as soon as we finish this part there will actually be a purpose to this application and well you'll start to see why i wanted to do this tutorial series anyways let's dive in so the first thing that we need to do is we want to be able to get the information about the currently playing song so i want something like the title of the song the artist the duration the time the uh you know the album cover if it's playing if it's pause the id of the song all that information is stuff that i want so to do that we're gonna have to send a request to the spotify api to get the current information about the current person i guess the host of the room's playback information so the first thing that we're going to do to do this is we're going to set up a new view and this view is going to be responsible for returning information about the current song so we're going to call this current song so class current song this is going to be an api view and we'll just define a get method inside of here that will take self request and then optional format which is equal to none now the first thing that i'm going to do inside of this method here is i'm going to get the room code so i'm going to say room code is equal to self.request.session.get and then we're looking for the room underscore code and then after that what i'm going to do is actually get access to this room object so i can figure out who the host is so the reason i need to do this is because whoever is requesting the information about the current song may not actually be the host right they may not be the person who's actually authenticated their spotify with us so we just need to look for the information relating to the host of the room so if someone sends us a request and they're not the host we need to figure out what room they're in we need to figure out who the host is and we need to use that host information to get the the information about the song so let's say room is equal to and then we're going to say room and we might need to import that so we'll do that in a second but room dot objects dot filter we're going to filter code is equal to room underscore code and then we're going to take index 0. we know that this room will exist because if it's in the session well it should exist at least we'll index it at 0 and that will give us the room so next we can say the host is equal to room dot host and now that we have the host we'll be able to actually get the token information relating to this host and then send the request using that token right so the first thing i'm going to do is just say endpoint is equal to and i'm going to define the endpoint that i want to hit to get to the currently playing song information so i'm going to say player currently hyphen playing this is the end point that we need to use if we want to get access to the song that is currently playing for this user spotify account now before i forget let me go import room from oh actually sorry we already have room in here so we're going to say from api dot models import room i'm not sure if you guys have this in your code or not either way it'll be link in the description but yeah just import this line again we're just referencing the api folder which has the room model in it so that's how we do that all right so now that we have this here we actually need to send a request to spotify now whenever we send a request to spotify we need to include our token so rather than me just sending one request in here and writing all the stuff that we need to do to send that request i'm gonna write a separate function that can handle pretty much sending any type of request to spotify it'll just make it easier for us in the future so i'm gonna go into my util.pi file i'm gonna go down to the bottom and i'm just going to define a function and i'm going to call this function execute spotify api api call so execute and then spotify underscore api underscore call or we could say request if we wanted to be more specific now inside of here i'm going to take the session id now really this is going to be the host id of the room so that we can get access to their token and then we can we'll send the token as a part of the request then i'm going to say endpoint so what i'm taking here is the session id and then the endpoint the endpoint is what endpoint of the spotify api do i actually want to hit and then i'm going to say post underscore is equal to false you'll see why we have the underscore later and i'm going to say put underscore is equal to false now the reason for this is that we could potentially be sending a post request a put request or a get request so we need to kind of handle the different types of requests and we just do this with a boolean variable so the first thing i'm going to do inside of here is say tokens is equal to get underscore user underscore tokens and then we'll get them from the session id so assuming we send in the host here we'll get the host token and well that's what we want next i'm going to say header is equal to and then inside of here i'm going to say content hyphen type and this is going to be equal to the standard so application uh if we spell that correctly slash json and then i need to pass my authorization token so i'm going to say authorization if i spelt that correctly colon and this is going to be equal to the tokens dot access token now it's also actually going to be equal to something else sorry we need to change this a little bit we're going to say bearer and then a space and then plus tokens dot access token now this is just something that you need to send before the actual access token you can look at the spotify documentation if you want to see exactly why but just trust me here this is how you send the correct authorization token to spotify so you do the content type application json and then you say the authorization this is a key here is equal to bearer and then plus tokens.access token make sure you have a space here so we're just concatenating these two strings together now that we have that what we can say is if post underscore then what we'll do is we'll send a post request now i think i imported that function yeah it looks like i did so i'm going to say post like that we're going to take the base url which i think i've defined already so it's up here https colon slash api.spotify.com v1 me okay so that's our base url and then we're going to add that to the end point so we're going to say base url and then oops plus endpoint like that then we're going to say that the headers is equal to the header i mean really we could call this headers if we wanted to so we say headers like that but that's fine and that is going to send our request or our post request to whatever endpoint we put in next we'll say if put underscore so if we're sending a put request then rather than post we're just going to say put and then we'll say base underscore url plus endpoint and again headers is equal to headers and then finally we will say response is equal to and then a get request because if you didn't say that you wanted to post and you didn't say that you wanted to put we're going to assume that you want the get request we're going to say base url plus endpoint and then we will have headers but in between headers and the base url plus endpoint we're just going to have an empty dictionary the reason for this is just uh syntax for the get request we need to put something in here that we're like sending with the get request anyways so we just put that there this is the get request and i think that i imported get yeah i did so post put get so we're all good up there awesome so now we have response there the next thing i'm going to do is just say try response dot json like that or sorry not try return response.json and then otherwise so accept return and we're just going to return an error like that and say that could not send request or could not yeah we'll say issue with request okay so just to clarify what we're doing here again we have post underscore put underscore the reason i added the underscores is because these would mirror the post function and the put function uh so obviously i need to distinguish them from that so that's why i put the underscore then here what i'm doing at the end is i'm just sending a get request now there's a potential to get some issues with the get request when we send the get request we're looking for information we could possibly have an issue sending this get request so if we try to return response.json and well this crashes and doesn't work because for some reason we can't get the json information then instead we're just going to return an error now there won't be any issue with the put or post because we don't care about the response from these requests so that's why i'm not doing the try and catch for those ones with the try and accept anyways hopefully that is clear so now that we have this we can use this function to send a request to any uh spotify endpoint so we will continue in just one second but i need to quickly thank the sponsor of this video and this series which is algo expert if you are preparing for your software engineering coding interviews you need to be using algo expert is the best platform to use to learn data structures and algorithms and how to solve advanced interview problems i happen to be an instructor on the platform and can guarantee you that there is many high quality questions there check out algo expert from the link in the description and use the code tech with tim for a discount on the platform so let's go back to views.pi and inside of views.pi we're going to use this function to send a request to this endpoint so we're going to say that our response is equal to and this is going to be execute spotify api call and let me just import this first so just to save us from typing all of these out i'm going to say from dot util import star and what importing star will do is just import everything from the file so we can use anything that we've defined inside of there so that's perfect so we're going to say execute underscore spotify api request and then inside of here we're going to pass the host because that's the id or the session id of the host is what host is and then we'll pass the endpoint and there we go for this specific request it's going to be a get request so we don't need to set you know true or false for put and and post as you can see here okay so now that we have the response what we want to do is have a look at this response and just see what is actually in it so before i start doing anything too fancy let's just print out response like that and then just make sure we don't have an error let's return a response inside of here this will just be an empty response and we will just say that the status is equal to status.http underscore 200 underscore okay and in fact maybe we can just return the response i don't know if this is going to give us an issue or not but we'll just return the response and see what happens now okay so let's go back to our server that's all working okay i'm going to go to my web browser oops that's not what i meant to open and i'm just going to actually type in this view and that reminds me that we haven't set up the url for current songs let's do that now let's go to urls.pi let's import current song and this actually would be a good opportunity to change this to just be an asterisk as well because we just pretty well want everything from inside of there so we're going to say path and then this i guess will just be current hyphen song that makes sense to me and then we'll say current song dot as underscore view like that see if we're getting yelled at no it looks good and now let's go to our browser so i'm going to go to slash spotify slash and i guess this is going to be current hyphen song and when we do that we get an index error okay so interesting we get a list index out of range which i guess means ah okay so this would make sense so the reason we got an index out of range error there was because we are not currently in a room and if we go back and have a look at our views dot pi we are filtering and looking for the room code and we're trying to index zero but if there is nothing that exists there then well that's a problem so we should probably fix this to make sure we don't run into this error so i'm going to just write something down here i'm going to say if room dot exists then we will say room is equal to room at index 0. otherwise we're just going to return a response that just says like 404 not found or something like that so return response this can just be empty and then here we'll say the status is equal to status dot http underscore 404 not found great so that should fix that problem for us but anyways to test if this is actually working let's create a room and what's going on here come on create room there we go okay create a room and you can see it brings me to spotify i'm going to blur out my email so you guys don't see it and i'm just gonna log in and then i'll be back right back okay so to test this out now and see if it's actually working let's go and create a room i'm gonna press create room brings us into a room and now what i can do is send this request so send slash spotify if we spell spotify correctly slash current hyphen song and there we go we get status 404 service not found okay interesting let me take a quick look and see what the issue is there and i will be right back so just a silly error on my part here we're going to go into the current song view and just remove this forward slasher sorry the first slash i had one right there that's not going to work because if we look at our base url inside of here we have a trailing slash so that was going to give us two slashes when we combine these two strings so obviously that's no good that's why we're getting service not found because it couldn't find the url we were sending the requests to so let's go back here let's run this and now you can see that we're actually getting something for this uh response right we're actually getting the current song that is playing so i do have spotify open in the background here i'll kind of drag it onto the screen quickly and you can see that i am actually running a song but inside of here let's just see what we actually get so we get a time stamp we have a context we have a progress in milliseconds we have an item this represents the current song it tells us information about the album there's information about the artists you can see this is by chris ria or re or however you say that available markets shows you all the available markets for this song lots of things like images so you can get like the album cover it has the id of the song the name of the song so dancing with strangers there you go i don't know why that's on uh total tracks in the album 28 and then more information about the artist and just other information as well so you guys can see there's a lot of information here about the currently playing song we also have is playing this is equal to false because the song is currently paused if this was true obviously the song would be playing you have duration of the song anyways lots of stuff so i'm going to show you how we can kind of parse through this because we don't want to return all of this information to the front end we only want to return the information the front actually wants just to make the request as small as possible now in theory we could return all of this but we don't need to so we'll just return the stuff that that we want and we'll kind of clean that up in our view function so let's go to views dot pi here let's go back to current song and now that we understand what's being returned to us from the spotify api we can actually start kind of parsing through it so the first thing i'm going to do is just make sure that here we don't actually have an error right so i'm going to say if error is in i guess this is just going to be response or item not in response an item is a key that we're looking for because that has the information about the current song then what we're going to do is just return a response this response will just be empty and we'll say the status is equal to status dot http underscore uh this is sorry not 200 this should be 204 no content so this will happen we will not have an item tag in our response in a situation where there is no currently playing song right if there's no song playing whatsoever we're not going to get any information back so in that case we'll just return to the front end nothing right we'll just say hey sorry we don't have any song information that's it you know this is you have to deal with it uh anyway so that's what we'll handle there now after that so if this is not the case that means we actually do have a currently playing song we'll get the information about the song like the title and all of that so we'll say item is oops not in all capitals item is equal to response dot gets and we're going to get the item and then we're going to say that the duration is equal to and this should be item now dot get because item itself stores a dictionary so we're going to reference from item the duration underscore milliseconds then the progress so this is like the current timestamp the song like how far in we are is going to be equal to response dot get and this is going to be progress underscore milliseconds then we will say that the album underscore cover or yeah album cover i guess that's what you call it is equal to item dot get we're going to get the album like that and then we are going to get from the album uh e key called images and then from images we're going to reference the first image and then we're going to get the key that is url now i know i'm doing a lot here and it's kind of like how are you coming up with this stuff the way i'm doing this is i'm i've just looked at this response right and if you see we have item and then if i'm looking for let's say the album cover right then what i'm doing is i'm referencing the album which is right here so i get that from item then inside of album there is a tag called images so images is right here you can see this is a list and this has three images one that's 640 by 640 300 by 364 by 64. i want the largest one so i'm getting this one so the first image and then i'm getting the url tag that's how you can get the information that you want you just kind of have to read through the json here and see how you would actually access it anyways moving on next thing that i'm going to do is say is underscore playing is equal to response oops like that dot get and then is underscore playing is what we want and then finally song underscore id is equal to uh not response but item dot get id awesome so there we go that's the information that we want now you'll notice though or you probably won't notice because i have to come up with an example for that which is kind of hard to do but if you have multiple artists the artist tag is going to have multiple keys inside of it so the next few lines i'm about to write are just to handle the fact that if you have multiple artists for a song it has like a really weird format so we're just going to clean that format up when we send it to the front end so anyways just keep that in mind as we as we write this so artist underscore string is going to be equal to an empty string we're just going to kind of create our own string that represents the artist so they're like separated by commas and all nice and anyways we're going to say if sorry not if we're going to say 4i comma artist in enumerate and then we're going to say item dot get and we're going to get the artist like that of the song we'll say if i is greater than 0 so if it's not the first artist in the list then what we want to do is say the artist string plus equals a comma and we'll do a space after the comma as well then we're going to say name representing for the name of the artist is going to be equal to artist dot get we're going to get their name and then we're simply going to say artist string plus equals and we will append uh the name like that so this is pretty straightforward i imagine you guys understand what's going on here but again we're just creating a string that has all of the artist names separated by commas awesome and then the next thing we're going to do is we're going to say song is equal to and inside of here we're going to create our own object that has all the information we want to send back to the front end so we're going to say item dot get inside of here we're going to put the name for the title of the song then we're going to say artist is equal to the artist string that we just unders just underscore created no just created okay and then we will say the duration is equal to the duration i will say the progress is equal to or actually i'm not going to call it progress i'm going to call it time that makes more sense to me is going to be equal to progress then i'm going to say that the image underscore url is equal to the album cover because that is actually just going to be a link to an image which is really convenient for us to show that image on the screen then we'll say is underscore playing well that's equal to is underscore playing uh and finally we will add something for the number of votes that this song has uh to skip but this is something that we're gonna do later on and actually one more thing so we'll just leave votes at zero for now just so we have it in the request already last thing we'll do here is we'll put the id equal to the song underscore id now am i why am i getting yelled at here let's see what's going on okay now i think everything is good i don't know what was happening there so this should be about it for the current song so now instead of just returning the response we're going to return the song which is kind of our custom object that has all of the information about the song that we actually want to send to the front end because as a reminder we like our application is calling this endpoint and this endpoint in turn calls the spotify endpoint which then gives us information we parse through it and then send back the necessary information so anyways now that we have this we want to actually show this information on the screen right we want to see this in the room so i'm going to make actually some pretty major modifications to the room page and we're going to be making another component uh shortly as well but the first thing that i want to do is go into the room page and i just want to remove a lot of this stuff relating to like the votes guests can pause host like all this we don't need all this stuff so i'm going to get rid of host guests can pause and vote i don't think that's necessary to see at least right now so let's delete all of this because again we just we don't need to see this information we're just showing it previously kind of like for debugging the application uh and now let's go to the state of our uh application here and yes this is where we want to be in the constructor i'm going to add one piece of state here i'm going to call this song now by default song is just going to be equal actually to an empty dictionary and what we're going to do is we're going to store all of the information relating to the current song in the state of this component so that way if the song ever changes we'll update the state and then that will in turn update the component so let's now write a a a method inside of here that can actually use the endpoint that we just created and get information about the current song so let's write a method in here i'm going to call this get current song and inside of here all we're going to do is call the fetch request we're going to say fetch slash spotify slash and then i guess this is going to be current hyphen song i think that's what we called it we'll then add our dot then we will have response as the parameter and what we're going to do to start is we're actually going to check if this response is not okay so if not response dot okay then what we're going to do is we're simply going to return blank squigglies like this so just a blank object otherwise we're going to return the response dot json now the reason for this is just in the situation where for some reason this response errors out or it doesn't work we'll just return empty pretty much saying hey we don't have any song data whereas otherwise we'll actually return all of the json data related to the song that's playing then we'll say dot then and then data and inside of here we're just going to say this dot set state and we're simply going to set the state of song to be equal to the data like that so the data that we get will simply just be all the stuff that we want to put inside of the state so all that information and well that is all we need so now that we have that we want to call get current song and then we'll display some of this information so i'm just going to go in my uh render here and i'm just going to actually just put this dot state dot song so this dot state dot song just so we can have a look at it i'm hoping this will just print out and not give me some weird error and then ideally we can just look at what the current song is playing in our web browser all right so we need to call that though so when does it make sense to call get current song well it makes sense to call that after we have authenticated so in theory we could place that under here or somewhere in here but it doesn't really make sense to me to do that there so let's actually just place this under this dot get room detail so we'll say this dot and then get current song and just hope that the timing is okay we're going to do this a different way later on this is just kind of for testing purposes and for me to show you how this works but anyways let's uh let's test this out i'm going to go here i'm just going to refresh um okay it looks like it's returning nothing right now i guess i don't have any currently playing song okay okay so i just ran this request again i was just testing spotify current song and i got an error basically the fix to the error is that i had artist rather than artists so if you look at line 83 this should have a plural s on it so let's just add that there to make sure that we fix that that endpoint and now let me quickly run this and there we go so now we can see we're getting title artist duration time image url all of that but that's not really what i want to test i don't just want to test this endpoint i want to test the actual application so let's go into a room we can see that we're in a room doesn't look like it updated our front end so let me just do a hard reset here and it looks like we're getting an error and what is the error here uh minified react error oh that's great that just means it's not actually going to tell me what's wrong so i'm just going to have to dig for a second i'll be right back after i fix this problem so i've made another silly mistake that was causing the errors here i gotta go to line 75 and simply return response.json i'm sure you guys probably caught that but inside of my get current song method i just made an issue and or an error and just forgot to return response.json so i was returning this blank one but then i just had response.json like that and said we need to return and that should hopefully fix the error that we were having i've also added a console.log statement here to getcurrentsong just so hopefully we can see something popping up so let's refresh here and there we go so we can see in my console i'm getting the title i'm getting the duration i'm getting all the information that i wanted about the current song okay so that's great but the issue here now is that this endpoint is only being hit whenever we refresh the page now that's kind of an issue because that means we don't know if the song is fast forwarded we don't know if someone paused the song because remember anyone on the spotify account can be modifying what's happening to this song so what we really need to do here is we need to what's known as pull this endpoint so we are constantly checking whether or not uh you know a song is playing if it's paused what song is playing we're just constantly checking for updates that's what we need to do now some of you if you're more advanced may have heard of something called web sockets now with websockets we wouldn't need to do this because what we could do is we could set up a websocket and the websocket could hit an endpoint on our server every single time the song is updated unfortunately spotify does not have support for websock it's at least not for the public so we're stuck with having to do this polling method now just so you are aware what we're going to do is every single second we're going to send the request to get this information we're just going to continually update it every single second so we always know what's happening on spotify and we're only at most a second behind now that is going to result in a lot of requests right we're going to be sending a lot of requests and if multiple people on our website that's going to be multiple people sending all of these requests every second so this is not an optimal solution for the amount of people on our website this will be totally fine and even up to like 40 or 50 000 users this will be fine but as soon as you start getting into really large websites doing something like polling just really doesn't make sense and it's not a very efficient way of doing things regardless i'm going to show you how we do it here and i just want you to be aware that this method is called polling you can kind of look it up and see how exactly it works and why it's not usually the preferred method but we're kind of stuck with this because spotify did not implement web sockets anyways what we're going to do is we're going to set up an interval on this room page so every second every one second we pull this endpoint and update the state with the current song information to do this we're going to use some lifecycle methods so component did mount this is once the component has loaded i believe yeah i believe this is loaded on the screen then what we're going to do is set a variable we're going to say this dot interval is equal to this function it's called set interval this is just built into a javascript i believe or react so you don't need to import it or anything like that and then what we're going to do is we're going to put the function inside of here that we want to be called at every interval so i'm going to say this dot get current room now get current what what am i saying get current room get current song sorry my bad get get current song is the uh the function we've defined here and then what i'm going to do is i'm going to put the delay at which i want to uh to call this so every 1000 milliseconds which is one second so again all this is doing is it's going to call this function every second and i'm starting this interval as soon as the component mounts now since i have this interval i need to make sure i close or stop this interval when the component unmounts so i'm going to say component did unmount or i guess sorry we're doing component will unmount my bad and inside of here we're going to say clear interval and we're going to clear this dot interval all this is going to do is just stop this interval from running now component will unmount pretty much tells us this component is going to be gone it's about to be destroyed what do we have to do uh before it's destroyed kind of like cleanup operations is what we're doing inside of here so anyways with this interval set now if i actually go ahead and refresh my web page you'll see that if we have a look in my well apparently this is causing an error but if we have a look here we are constantly hitting this endpoint and we're printing something out i don't know where i have that printed but every second we are sending a request to the server so this interval is indeed working but there is some error here it says uncaught in promise type error this dot set state is not a function so to fix this what we do need to do is actually bind the get current song method to uh this keyword so we're gonna say this dot get current song is equal to this dot get current song dot bind to the this keyword and then we can actually go ahead and remove this call to get current song in the constructor because we're going to automatically do that based on this interval that we've set so now if i go here and i refresh we can see that all is indeed working we're printing out the song information every single time and now all that's left to do is actually display this in kind of a nice format on the actual web page so let's start doing that what i'm actually going to do now is i'm going to make another component a brand new component we're going to call this a media player or a music player and what this component will do is it will actually display the information about the song so we'll have kind of a nice little player that has you know like a play button and then a skip button and it'll show the album cover and it will have the title of the artist or the title of the song sorry as well as the artist of the song and anyways that's what we're going to do now so to do that let's make a new component so let's go into components new file let's call this musicplayer.js all right so at the top of our file let's start by importing react so we're going to say import react and then inside of here we're going to say component and this is going to be from simply react next we're going to import a bunch of other things we're going to use for styling you're probably familiar with most of these at this point we're going to import grid we're going to import typography we're going to import the card we're going to import the button uh sorry not the button the icon button and then i'm trying to look here i think that's all we need from at material hyphen ui core but we are going to import some icons like the play icon and the pause icon stuff like that so we're going to say import and then from here we're going to import the play arrow icon this is going to be from at material ui slash not core this time it's actually going to be slash icons like that then we also want not just the play arrow icon but we want the skip next icon we also want the pause icon and finally we're going to import one more thing from material ui core i forgot this one this is called linear progress we're going to use linear progress just as a way to show the uh the current status of the song or like i guess how much time is gone from the song i don't really know a good way to describe this but hopefully you get the idea you know when you look at a song it tells you like how much time has already played in it that's what we use linear progress to do anyways let's make our class we're going to say exports default class we're going to call this music player and this is going to extend the component then we're going to start by creating our constructor inside of the constructor we're going to take props we're going to start by calling super on the props we always have to do this when we make a new class or a new react component then we're going to say this dot state is equal to and we want two things we want playing this is going to be equal to false and actually sorry i don't think we even need the state in fact we don't need the state i'm just looking at some old code here so let's remove the state okay now let's just write the render function and this will be all we have for this video so what we're going to do now is just spend a few minutes kind of styling this component again what i want this component to look like it's just like a general media player right i want it to have the current status of the song i want it to have a play button a fast forward button i want to have the album cover the name of the song the artist of the song and that's pretty much it so let's start by creating a card if you haven't seen a card well i guess you'll just kind of see what it looks like when we actually render this on the screen but they're pretty popular in most like component libraries they're just kind of like a nice like styled little box with rounded corners they kind of pop off the screen a bit and well yeah you'll see how it looks when we render the page anyways we're going to make a card inside of the card we're going to make a grid we've used this many times so i'll go through it quickly but grid container we're going to say align items and this is going to be equal to center this should align all the items vertically in the grid then we're going to close the grid we're going to create a few grid items so we'll start by saying grid item align equals center we're going to say xs equals 4. now you'll see why we're doing xs equals 4 in a second but this is going to be for our album cover because we want this to be on the furthest left and then we want everything else to be the to the right of the album cover as you would kind of expect it to be so grid item align center xs4 let's just copy this one more time because we will have another grid item so inside of here what i'm going to do is i'm actually going to render the image which is the album cover so to do this i'm going to say img standing for image i'm going to say src standing for source and since we actually know the image source we can put it directly here so just before i get too far ahead of myself what i'm going to do is i am going to pass all of the information relating to a song to this component here to the music player and then it will have access to it here right so i'm going to assume that i have things like the title the artist all of the stuff that gets returned from our api call we will have access to in this music player through the props because we're going to pass it in as a prop to this component so what i can say if that's the case is this dot props dot and then i'm going to say image underscore url because this is the url of the album cover image that we want to display then i'm just going to say height is equal to a hundred percent and i'm going to say that width is equal to 100 this is just to make sure it fills uh the entire container that's what we're doing that for awesome so now we have that let me just quickly save i'm wondering why i'm getting this error here with grid and with card ah i see it's because i forgot to return so let's actually return all of this stuff in parentheses and that should hopefully fix it and it seems like that was not the fix i believe ah okay that's what it is i didn't end my image tag anyways now we have our image tag this will show the album cover now after we show the album cover i want to show pretty much everything else that will be in this other grid item now i'm going to say xs equals 8 for this grid item and i think i've gone through this before with how xs works for grid but pretty much this is going to take up one third of the width of the grid this is going to take up twothirds of the width of the grid which kind of makes sense if you think about the text relative to the size of the album cover anyways that's kind of why i have four and eight there you can mess with the numbers and see see how it changes but the first thing that i'm going to do is have the title of the song so i'm going to say typography and then i'm going to say component is equal to this is going to be an h5 nice and large we're going to say or sorry h5 i guess would be smaller than something like h4 then we'll say that the variant is going to be equal to h5 and inside of typography all we're going to do is say this dot props dot title awesome so next what i'm going to do is just copy this typography tag because we're going to have the artist showing up next so we'll start by changing this.props.title to be artist we're then going to change the component actually sorry we're not going to use a component for this one we're going to say color is equal to and this is going to be text secondary this is going to make it kind of like a nice gray color that works well for the artist you'll see that in a second and the variant is actually going to be subtitle one now there is multiple subtitles again you can look at those on your own but this will just make it kind of a little dimmer a little smaller like light underneath this uh this text here which is the title of the song all right so now that we have that what i'm going to do is i'm just going to open up a div inside of this grid item the reason i'm doing this is just to make sure that all of my icons are in kind of the same upper level container i don't want them to be in this i don't want their parent directly to be the grid i want it to be a div anyways first thing i'm going to do is i'm going to make a icon button so when you make an icon button what you have to do is you have to actually put an icon inside of this tag and then on the icon button itself you can do things like create the on click so anyways we'll see the on click when we start uh you know i guess messing with the on click and actually having these buttons function we're not going to do that in this tutorial but i'm just going to write a little bit of javascript here because the first button that i want to show is either a play button or a pause button so if the song is currently playing then i want to show the pause button because you should be able to pause it if the song is currently not playing if it's paused then i want to show the play button so you play it so this is pretty straightforward and we've done this many times already but i'm going to say this stop props that is underscore playing question mark and this is just doing that one line if statement or there's a fancy word for it that someone reminded me of but i forget and in this case if it is playing then what we are going to show is we are going to show the pause icon which we imported from above otherwise we are going to show the play arrow icon like that now don't ask me why they don't just call it the play icon maybe there is a different one that is just play but we're going to use play arrow icon so now this will show us a different icon based on whether the song is playing or not now after we have that icon button we want one more icon button that's always going to be the same and this is going to be the skip button so inside of here we will simply display the skip next icon like that and let's just do a little slash like that awesome so this should show our buttons and then the last thing that we need because that's actually all we need for right now is the progress bar that will kind of act as like the song progress so at the bottom outside of our grid but still inside of our card i'm going to say linear progress and this is going to be variant equal to determinant this just means that we are determining the value of this linear progress bar and we're going to say that the value is equal to and then i'm going to place the value inside of here in one second so now that we have this let's just go to the top of the render function i want to write a variable and the variable i'm going to call it song progress now if you're unfamiliar with how these linear progress things work this is specific to material ui but we pass a value out of a hundred so what i need to do if i want to show an accurate depiction of how far along we are in the song is i need to take the current time stamp we are at in the song the duration of the song so i need to divide the two and i need to multiply it by a hundred to pretty much figure out what percentage of the song we're currently through and that way i'm going to have a number for the value that is out of 100 so between 0 and 100 that kind of accurately represents the current duration of the song that's been played so you'll see when i do the math here but it's pretty straightforward i'm just going to say this dot props dot time and then that's going to be divided by this dot props dot duration remember duration is the length of the song and time is the current time into the song and then i'm just going to multiply that number by a hundred and that will give me what i'm looking for so for value now we'll just plug in this variable song progress i could have also just put that in there but i figured it'd be cleaner to do it this way and now we should see that this progress bar actually moves as we continually get a new duration for the song or a new a new time story i guess like a new progress time anyways i've been talking a lot let's refresh here and let's see what we're getting ah well i guess nothing is happening first of all because we have an issue here which i'll have to look into but also because we haven't actually rendered this component so let's do that now all right so i just was looking at this error here essentially what happens sometimes is if you don't play a song on spotify for like a really long time then you just don't get any results essentially for this it just gives you blank so we're getting uncaught syntax error unexpected end of json input it's actually fine we don't really need to even handle this because in the situation where we don't have a current a song currently playing we just won't show anything on the screen or it'll like look blank as you'll see in a second anyway so don't worry about that but let's render this component now so let's go to the room.js page let's import this component first of all and why is responsive font size in there i don't want that there let's go and say import this is going to be i guess music oops if i can get my caplocks working here music player from and then dot slash music player like that now what we'll do is we will go here into our render method and right where we had everything else before so in between these two grid items we'll simply just render that component so we'll render the music player and like that and then what we'll pass to music player is all of the information relating to the song so what i can do is actually use the spread operator so i'll do three dots and then say this dot state dot song this is what will pass through the props to the music player and this means that we will take all of the information related to the song so like the title the artist all of that and we'll pass them in as separate keys or separate props to music player so that's ideal that's what we want and then that will allow us inside of music player to do things like this.props.title this stop props.artist so on so forth so let's do that now let's refresh and let's see what we get and we're getting an error uh icon button is not defined okay so i think uh it should be button icon or icon but okay anyways let's go to music player and ah so icon button we don't have a capital b here for button that would be why we're running into that issue let's refresh now and let's see if this fixes the problem okay so still not fixing the problem minified react error i will be right back all right so i was having some issue with these icons right here i just figured out what the problem is really stupid issue i really don't like the way that they did this but this import statement is just wrong what we have up here we need to import all these individually actually and you'll see why in a second we need to import the play arrow icon from and then at material oops at material ui slash icons slash and then actually play arrow you don't even include the icon at the end which is really strange to me and then import and we're going to import the pause icon from you guessed it this time the same thing except we're not going to include the icon again so material ui icons slash pause like that which again is really strange and then import next one which is going to be skip oops skip next icon from at until ui slash icons slash skip next okay so i'm hoping this is gonna work now uh let's give a quick refresh of our application and let's see and there we go it does indeed work so you can see we have this song the blinding lights and then there's the play button as well as the fast forward button and if i actually go ahead and play this uh you'll see again that the progress bar will start going if i fast forward the song we can see that the new song shows up uh and with really long text you might run into some errors here but as i expand this you can see all looks well and all is good so anyways that is it for this tutorial video i hope you all enjoyed in the next video we'll go over how to get this pause and fast forward button to work and then we'll do a few other things as well so with that said if you enjoyed make sure to leave a like subscribe to the channel and i will see you in another youtube video you