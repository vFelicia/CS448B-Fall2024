hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be covering comparison operators i'm going to be showing you how we can compare different values not just numeric values strings characters and boolean values as well so with that said let's dive into the video so in the previous video i showed you a ton of different arithmetic operators the arithmetic operators had numeric operands and they returned a numeric value when i say numeric i'm talking about the int and float data type or data types so in this video i'm going to show you something called comparison operators now i'm actually going to start by just listing out all of the comparison operators we have less than greater than less than or equal to greater than or equal to is not equal to and is equal to the order i'm listing these means nothing there's no um like importance in this order so don't read into that but what comparison operators do is they compare the values of different variables right or just they compare values in general so whenever we write an expression and i will discuss what an expression is when i show it but it's just anything that involves these operators essentially they're going to return to us a true or false value more specifically they're going to return a boolean value so remember we saw this data type called boo now bool is always equal to either true or false it's one of these two values no matter what so when we use these operators right here the expression that contains them returns to us true or false or it evaluates to true or false the reason for that is it's telling us whether or not our comparison was true or whether it was false so to give you a really simple example let me make a variable called test it's going to be the bool data type which is short form for boolean and what i'm going to say is 1 is less than 2. now using some critical thinking skills here what do you think this is going to give us right is 1 less than 2 well 1 is clearly less than 2 and so this should evaluate to true because this comparison was indeed correct it was true now if we flip around this sign and we ask if 1 is greater than 2 then obviously this is going to evaluate to false because 1 is not greater than 2. so that is what you use comparison operators for i will go through all of them but they're fairly intuitive and straightforward and they don't only need to be used on what you call numeric values we can use them on characters we can use them on strings we can use them on booleans we can use them on other data types as well now you want to be a little bit careful when you're using these operators on strings or characters because they don't necessarily work the way in which you think they will in fact whenever you're using these type of operators uh so like greater than less than less than or equal to greater than or equal to with strings or with characters they evaluate or compare the strings using something called the lexi graphical or lexigraphical ordering i'll put the word up on the screen because i'm probably mispronouncing it this is a specific way of comparing strings or comparing characters together i will show it to you in a second but i just want to be really clear that when you use this with characters or you use this with strings the result may not necessarily be intuitive you may not actually be able to guess what it's going to be unless you understand how the comparison is performed anyways enough of that let's just continue with this kind of more simple example i'm just going to see out test right here i just want to show you what i get so if i go ahead and compile my program here oops i didn't mean to run the program i want to compile and now run notice that we get 0. now the reason we're getting 0 here is because whenever we see out a boolean value it's going to give us the numeric representation of that boolean so if you remember back to one of the first videos true is always equal to one and false is always equal to zero so i don't oh it's because i don't have the semicolon yeah that's why it wasn't highlighting anyways you got the idea so true is equal to one false is equal to zero so if you see us printing out zero that means that this test variable was actually equal to false if you see us printing out one that means this test variable was equal to true and just to prove this to you uh even more if i try to just see the actual value of true right here you're going to see that even this is going to give us a 1. so let's do this and you see that we get a 1. so now let me just go through a few more of the comparison operators i'll then show you the comparisons on strings and characters and then we'll get into like a kind of a cool example where we get some user input and then we'll print out some comparisons between different user inputs anyways we have this uh this boolean test variable we obviously have just looked at the less than and greater than comparison now something to note here is if i say 1 is greater than 1 this is false right because 1 is not greater than 1. if i wanted this to be true so i wanted greater than or equal to then what i would do is i would tack on the equal sign at the end here and now what this says is 1 greater than or equal to one so if these two values are the same this returns true or if the value on the lefthand side is greater than the value on the righthand side this returns true now same holds in reverse here if i switch this to less than now i'm checking if one is less than or equal to one however if i just put a less than this is false because one is not strictly less than one so a lot of times people will read this and they'll say strictly less than to really emphasize the point that you are making sure they are not the same values it actually must be less than this other value so i think i mean i'm not going to compile the program and go through these i think you guys get the idea but that is the basics of these four operators right here so now let's look at the is not equal to and is equal to now make sure you do not confuse these operators with the single equal sign so this single equal sign right here and we've seen this if i do something well we're seeing it right here is what's known as the assignment operator so we are assigning some value to some variable or to some container whatever it's going to be but we're assigning something to something else whereas when we have two equal signs we are checking for equivalence or com or we're comparing two values together so i like to read this as is equal to not just equal to because when i say that sometimes people get confused and they think i'm talking about one equal sign anyways let's use the single equal sign or the double equal sign sorry so if i say 1 equals equals 1 what this is checking is if the lefthand side is equivalent or is equal to the righthand side so now let me just see out test let's see what we get if we compare one and one so if i do this and i run the program we get true obviously because one is equal to one now the exclamation point equals sign is uh not equal to you can read this as is not equal to so pretty much you can just check for comparison and then whatever that is you can flip it so if the two things are the same when you have the not equal sign this means you are going to get false because if the two things are the same and you're checking if they're not the same then obviously this is false whereas if these two things are different this expression is going to give you true because you're checking if they are not equal to each other and obviously 1 is not equal to 2. so i think that's probably straightforward enough i'm not going to go into a huge detailed explanation but if i have 1 does not equal 2 and now i run this and i compile we get true because they are not the same however if i make them the same then you're going to see here when i run this that we get false because well they are the same and we're checking if they were not the same so that is kind of the basics of how you use comparison operators now what i'm going to do is show you how we use these with characters and with strings so i'm going to start with characters because they're a little bit simpler and then i will show you strings so first thing to note here and remember that a character is one single character surrounded by single quotation marks if you want to have more than one character you need to use a string which is double quotation marks but let's compare the character a uh to the character uppercase a so just take a guess here and i'll actually make these uh the two equal signs so we'll check if these are equal to each other do you think that this a is equal to this a just take a guess i'm going to compile the program here and let's see what we get oops compile and run notice we get 0. so the reason i want to show you this example is because uppercase letters are different than lowercase letters now it seems obvious but a lot of times people mix this up a lowercase a is not the same as an uppercase a so when we're checking for a comparison between characters or strings we need to make sure we're accounting for the fact that one of them may be a capital the one another one may be lowercase right so just keep that in mind but if i have a lowercase a is equal to lowercase a obviously this will give us true because they are the same character so that is how you compare characters at least when you're checking for equivalence so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have detailed solutions to all of their over 140 practice interview questions in over nine programming languages and you can check them out from the link in the description and use the code tech with tim for a discount on the platform now what happens if i do something like lowercase a is less than and then lowercase b well again take a guess what do you think we're going to get do you think this is even going to work but do you think i can make this comparison is it going to crash my program oops didn't mean to close that all my all my tabs just closed all of a sudden okay let's bring that back up but let's compile let's run and notice we get a 1. so this is actually true this is a totally valid comparison we can check if one character is less than another character and what this actually does is this compares what's known as the lexi graphical yeah i think it's lexigraphical i'll put up something on this the screen because i'm 100 mispronouncing this word but i believe it's called lexigraphical ordering of characters so really that this is fancy for saying we're going to look at what's called the ascii value of these two characters and compare them together so there's this thing called ascii asc i believe again i'll put that up on the screen so you guys can see it i'm not giving you wrong information but this is a table and every single character on your keyboard every single character you could possibly type has a numeric representation in this ascii table so for example the lowercase letter a i believe has the representation 97 the lowercase letter b has a representation 98 and this makes sense right right after a we have b and so that's 98 c is 99 d is a hundred so on and so forth so when we do this comparison you can kind of imagine that we are converting both of these characters to whatever their ascii value is whatever number represents them on this table and then we're just comparing those two numbers together so in this case we're going to have 97 less than 98 that gives us true and so we are all good but now i want to show you something interesting what happens if i compare lowercase a to uppercase b is this going to change anything obviously we know that uppercase and lowercase letters are different and while b is going to have a different representation on the ascii table than lowercase b so just take a guess you're probably not going to know the answer this but i will show you now and you can see that we actually get 0. the reason we get 0 is because even though a comes before b and the alphabet this ascii value is greater than the ascii value of capital b in fact capital b has an ascii value i believe of 66 because i know or i'm pretty sure that uppercase a has an ascii value of 65. so this is something that you're not going to memorize you just kind of have to understand that when you do comparisons of characters or strings it's not necessarily intuitive and that you have to know what the ascii values are to actually understand what you're going to get as your result anyways though if i change this to uppercase a this expression now will be true because uppercase a is indeed less than uppercase b when we compare their ascii values so let's go ahead and run this run the program and now we get true awesome so that is comparing characters now i'm going to show you how we can compare strings so of course when we compare these characters as well we could have used the less than or equal to we could have used the greater than or the greater than or equal to we can use any of the comparison operators just be aware that when you're doing this with characters and strings again it's not necessarily intuitive now i will show you with strings though so let's compare two strings together let's actually compare the string hello to the string hello now take a guess what do you think we're going to get here let me go ahead and compile the program and let's run this and we get 0. the reason we get 0 is because this uppercase e here is different than this lowercase e and so these strings are different right and so we're getting false whereas if i change this now to actually match this string we should see that we get true so let's do that and we get true now there is other ways to compare strings i'm actually going to do an entire video just talking about strings because they're really important but for now you can use the double equal sign like this and then of course you can use the not equal to as well and this will tell you if these two strings are not equal to each other so we compile we run we get zero because obviously these are equivalent to each other now let's try this though what if i have hello and then i have hello with the space at the end are these two strings the same what do you think well let's try it out and we can see that we actually get uh sorry this is because we're checking if they're not equal to each other so this is telling us these two strings are not the same the reason they are not the same is because a space well that's a character that has some value on the ascii table as well and since this string has a space and this one doesn't they are not the same so just make sure you're aware of that again not necessarily intuitive some people may say hello and hello the space at the end are the same but to our computer no they are different because this string has a character that this one does not so that's kind of the basics of comparisons now what i'm going to do is show you how we can actually get input for the user from the user story and then compare it against something and we'll just do like no a more realistic example essentially so what i'm going to say here is int n and or actually i'll say into num1 and int num2 and i'm going to ask the user to type in two numbers so i'm going to say c out i'm going to see out type a number like that and then what i will do after this is i will see in and i will see in whatever they type into num1 now for this example we're just going to assume that the user actually gives us valid input we already know how to handle invalid input from the previous video so i'm just not going to cover that right here so now after i have my cn what i'm going to do is have another c out so i'm going to have another c out that says type a number and then i'm going to say c in and i'm going to see in num2 then what i'm going to do after this is i'm going to print out whether or not these numbers are the same so i'm going to say the following i'm going to say c out and i'm going to say these two numbers oops if i can type here numbers are the same colon and then i'm going to c out and i'm going to say num1 is equal to num2 so this is kind of going to tell us if we get a 1 these two numbers are the same if we get a 0 they are not the same and i think that's pretty much all i need actually for this program uh so hopefully that's clear we're collecting two numbers from the user we are then printing out these two numbers are the same and we're just checking whether or not they are the same so let's compile this i'll compile the program and we seem to have gotten an error uh what exactly is the error here let me just look here all right so i just had a look at this um actually the error i was getting here is that i need to parenthesize this expression the reason i need to do this is because when i had num1 is equal to num2 the compiler was getting confused and it was reading this entire c out and kind of trying to end it here and then it saw the two equal signs and then it wasn't sure essentially what it should do and this kind of makes sense because these two equal signs could be replaced with this right so how is the compiler supposed to know that we're actually trying to compare these two values and then c out this comparison so whenever you have those kind of arrows just try to parenthesize your expression so when you put these in parentheses now this is telling the compiler hey i want to evaluate this first so now i know that i'm going to be c outing a true or a false value whereas before it was having a hard time determining that we were trying to do the evaluation of this comparison before all the c out stuff so hopefully that's kind of clear but if you run into that error just you know try something like this using parentheses is always a decent idea if anything it just makes your code more clear so anyways let me uh recompile this here now we can see this is all good let me rerun the program asked me to type a number let's type a number three let's type three again these two numbers are the same gives me a one saying yes these are the same awesome so let's run this one more time let's go three four and then it tells me these two numbers are same no they are not the same they are different because we are getting zero so that's really all i want to show you i just wanted to implement this into like a really basic example so you can see how this might work uh now try messing around with this with floats uh with booleans with characters all of that and yeah just see how these different comparison operators work it's always a good idea to kind of do stuff after the video because i can only show you so much and this is meant to give you an introduction to really learn these concepts you have to practice and play around with them on your own so with that said i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video