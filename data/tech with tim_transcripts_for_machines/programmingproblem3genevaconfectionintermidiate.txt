hey guys and welcome back to another weekly programming problem and in today's video I'm going to be doing a little bit of a more advanced problem so if you had done the previous problems and you found them maybe too easy or just the right difficulty this is a really good one to try it's a little bit more challenging although it's not too difficult and again I'm gonna be going through a full explanation here on how to solve this problem and personally I really like this problem so that's why I'm doing it today now full disclosure I did not make this problem it's actually from the University of Waterloo so they actually have a competition that they run all throughout Ontario which is called the CCC so the Canadian computing competition so actually throughout Canada sorry so anyone in Canada pretty much is allowed to enter and it gives you a set of five problems increasing a difficulty and you're able to solve them so this one is the third problem in that set and typically the third ones are about an intermediate level so this one is about that level and I really like this one because it shows that if you can figure out what the questions asking and kind of understand the problem that's not too difficult to actually solve it so let's go ahead and read through this one right now so the name of the problem is called the Geneva confection and pretty much I'll just go ahead and read it in order to ensure peace and prosperity for future generations the United Nations is creating the world's largest candy the ingredients must be taken in railway cars from the top of a mountain import into Lake Geneva the railway system goes steeply from the mountain top down to the lake with the tshaped branch in the middle as shown below so you can see we have a mountain branch and lake and the reason I really like these problems as well it's because they give you some good visuals and allow and give you really good examples as well explaining the problem so it's easy to understand rather than me trying to write one like this so right now each of the end ingredients is in their own railway car each railway car is assigned a positive integer from 1 to N the ingredients must be poured into the lake in order 1 2 3 4 etc but the railway cars are lined up in some random order the difficulty is that because of the especially high gravity today you can only move cars downhill to the lake or sideways onto the branch is it still possible to pour the ingredients into the lake in the specified order otherwise is it not possible right so I've kind of skipped through a bit of it because I've already read the problem much time so pretty much what it's asking is you're gonna have a list of ingredients here 2 3 1 4 for example and they're gonna be labeled 1 2 n so n could be any number that's how many ingredients are in the bridge or on the mountain sorry and you want to get the ingredients starting at 1 into the lake in order and you're able to use this branch on the side here so this goes through how you would solve this very simple case of 4 different ingredients so say we want to get one in first but 4 is in the way so the first step it says here slide car 4 out to the branch we would slide 4 to the branch stays on the branch now we now have 1 nothing blocking it 1 is able to go into the lake now we check the mountain talk we say well it's 3 able to go in like no we need to first so we slide 3 onto the branch 2 goes into the lake and then there's nothing left on the mountain top so we then slide 3 from the branch and 4 from the branch into the lake and we get them in the right order now I know I went really fast I'm gonna explain another simpler case I'm actually gonna use pain to just show you the exact order of what you need to do so that you can understand it the input is down here so the first line will contain the number of test cases on that will be run so this is a little bit different than some of the other problems we did as they were a little bit easier and this is where you'll start to see that actually getting the input for some of these problems can be a little bit challenging and might actually take you a few minutes to figure out so this one since the problem is somewhat simple I would say for this kind of level of problem is asking you to do multiple test cases at once so it'll give you like three sets of ingredients that will be at the amount at the top of the mountain or five sets of ingredients at the top of the mountain and your program will have to determine the answer to all of them so whether they can go into the lake or if they're not able to go into the lake and so on so it says here the input each test case has the form of an integer n on the first line which tells you how many cars are gonna be lined up from top to bottom and then the cars will always use the numbers from 1 to N in some random order so to then give you the order again from top to bottom so the first number that you're gonna see in your input which would be this one here at the test case is two so actually sorry I'll just go through the input here quickly um so the first line here we have is art is the amount of test cases so it says two test cases then we see that the next next line is going to be the number of what color I want to say elements or ingredients in our first test case so it says we have two test cases in the first test case there's four ingredients so we have two three one four that's the number the order of all those ingredients that we go down a line say now we're on test case this one has four ingredients as well and that's four one three and I hope that makes sense for you guys and then the output is yes and no because there's two test cases so we need two different outputs on two separate lines all right so you can obviously tell this one's a little bit more complicated but now I'm just gonna go into paint and I'm gonna explain it and hopefully we can understand how this problem works so I've just used a really simple case here of one two three lined up just to show you kind of how this works so first and the first process that we're gonna do when we want to solve this problem is take it down to the simplest case and this is what we want to do for a lot of programming problems is we want to solve a really simple case to figure out the steps that we need to take to do that and then we can scale it up for a larger case because a lot of these problems if you can figure out how to solve a really simple case it's gonna be the same for a larger case just those steps repeated over and over and that's the same for this problem so our first step and this at the very beginning is we're just gonna look at the top of our mountain so this is my little branch here I know this is a crude kind of sketch and paint but just play along so we see that we have three now the ingredient that we need to go into the lake is one because we're starting and we need one to go in so is three one no it's not so the first step and this is always what we're gonna do at the very beginning is going to say well there's nothing on the branch so the only thing we can do if this is not one is moved over to the branch so we have three we take it and we move it to the branch over there so then what I can do from here is I can get rid of three get rid of this little arrow painfully and then we can go ahead and we can check the top of the mountain again so now that we have three on the branch we check the top of the mountain we say well we need the ingredient one to go into the mountain is two one no it's not so all we can do there is we can go ahead and take two can plop it over to the branch over here so we take two and we write two there then we raise two from here and we continue on with that process so now we do the same thing we say well we need one to go into the lake well here we are at the top of the mountain one is here so we can go ahead we can take one and we can shoot it down into the lake over here so once down there now if there was any other elements on the top of the mountain so say we had for example 4 we would we again check we'd say well is 4 so now we're on element 2 we need element 2 to go into the lake is 4 no it's not so what I'm gonna do now is I'm gonna check the branch so I check the branch I see 2 is here it's on the branch so I go ahead I take 2 I erase it from the branch and I put it into the lake so then I go here now 2 is in the lake all right same thing we check the top of the mountain again we say ok is we need the third ingredient to go in well is 4 3 no it's not so we're gonna leave that there and we check the branch we say is is 3 3 oh yes it is so now we erase 3 all right we take 3 and we put it into the lake and then we repeat the process we check the top of the mountain we say well is 4 4 yes it is it goes into the lake now we have nothing left on the branch nothing left at the top of the mountain so there we go we know that we can complete the recipe all right so now I'm gonna show I'm gonna add a few things here to make it a little bit more complex so this is the case where you're not going to be able to complete the recipe that I'm about to show so the one that we just have is fine obviously for is able to go into the mountain so what will happen for example if we can't complete the recipe recipes we'll have something along the lines of I want to say this 64 and then I'm gonna write three I'm gonna just gonna move it back up to the top of the mountain just so that it uh we can use this case here alright so for this is my four by the way I know it's really bad just just pretend that's a four alright so we checked the top of the mountain like a regular process we say well it's three three yes it is okay we move it in and now there's nothing at the top of the mountain right so now that there's something at the top of the mountain we have to check the branch so since we were gonna check the mouse again we check this out there we checked the branch and we see a six now is six equal to four no it's not so we can't complete the recipe because there's no way for six to go back up to the top of the mountain there's no way to four for four to go in before six and that's the case in which the recipe cannot be completed where there's nothing at the top of the mountain and the number at the edge of the branch is not able to go into the lake I hope that makes sense so now I'm gonna go into the code and talk about that a bit more in detail so you guys can see here this is my code I'll scroll through it really quickly it's a bit longer than some of the other code and I've really annotated it so I've really written a lot so that you guys can understand how this works so if you feel like it you can go ahead and read this but I pretty much just explain this little paragraph already so I start off by grabbing the input now the input we have test cases it's just equal to in int input so our very first line really simple I'm just figuring out how many test cases we're gonna have now I'm gonna grab I'm gonna find all of the ingredients for all these test cases the amount of test cases that we have so that amount of times so do a quick for loop and then I say I'm gonna create a less up here so I have a list and every time I there's a new test case I'm going to add another layer to the list so another dimension so there we are I add the dimension and then I grab how many elements are gonna be in this next list or in this next set of ingredients because that's gonna be the next line right so I have F equals input I say for Y in range just converting this to an integer here of however many elements are going to be in that our ingredients are gonna be in that next list like and then in the appropriate list I'm going to pend all of those ingredients into them like so okay so now that we've done that we've grabbed and we've pretty much if we had for example two test cases and they looked like this so it looked like two three five for example and that we had or I guess it has to be two three two one three and that we had like one two three four for example then they would go in accordingly like this and that's what our list would look like now I'm just gonna delete those so it doesn't mess up my program when I eventually decide to run it okay so now I'm just creating a little for loop and for each test case I'm gonna repeat that process that I talked about when I was showing you in paint on so I'm gonna run through that same process in code that I just ran through in paint so we're gonna say car list is equal to list X um this is I'm just creating a new I don't know why that popped up just creating a new list to store the current test case that I'm checking so I'm just calling it Carlos I didn't need to do that but it's just something I like to do so we need to store the location of the cars in the mountain the branch and the car that we are looking for so then I have a new list I call it branch and this is gonna be my list for what's on the mountain current this is the ingredient that I'm currently looking for so the one that I want to get to go into the lake so our first step if cars are on the mountain try to send them into the link that should say Lake okay into the link so if the length of car list is greater than zero which on our first run it always will be then I'm going to say if the car on the mountain so at the end of our list is the one we're looking for send it into the lake and remove it from the list so by doing that I'm gonna add one to our current because now we're gonna be looking for two and then I'm gonna pop on that car from the list so popping just means removing from the end because remember when we grab we get from top to bottom um so that's why I'm looking at the end of the list just by putting a negative one there okay so now if that's not true the list at the bottom of the mountain alright were the ingredient at the bottom of the mountain is not the one we're looking for we're going to look at the branch so we're gonna see is there any cars on the branch if there's no cars on the branch so then we're gonna go and we're gonna do the next step but if there are cars on the branch we're gonna look at the last car on the branch I'm going to say if it equal is equal to the current ingredient that we're looking for we're gonna add one to the current and we're just gonna remove it from the branch there's no point in storing which ones we already put into the lake because that doesn't matter if we have this current variable already okay so now that we've looked at the branch and we've looked at the mountain and we've said well the one on the top of the mountain can't go in the one on the top of the branch can't go in we need to move the one from the mountain to the branch so we're gonna try that that's the only possible thing we can do right now is move the one from the mountain to the branch so we go ahead and we do that so we say branch dot append car list dot pop now in Python this dot pop actually a lot of people just use it to remove something from a list but it actually returns the element that you're removing and so it's really useful to use by just putting it in here and there we are now otherwise what we say here is we've checked we say well there's nothing on the branch and the top of the mountain well that doesn't uh that's not the one we're looking for then again we would we would move the one from the top of the mountain to the branch and that's what happens here and that's the else here so now this is the next step so we said if the length of the mountain is greater than zero right now if there's nothing on the mountain here's where we check the branch and that's what we go to right away so now we're saying if the length of the branch is greater than zero we say well if the one at the end of the branch is equal to the current so the one we're looking for we're gonna add one to current again and then we're gonna remove it and we're just gonna keep checking that again right so we're gonna keep doing this until eventually rerun into the case where the one on the branch is not the one we're looking for and in that instance if there's nothing on the top of the mountain and there's still items on the branch we can't move them into the lake we're not going to be able to complete the recipe so we simply print N and we break this while loop here like now otherwise so here we've gone through we said if the length of car list is greater than zero the length of branch is greater than zero now if we make it all the way to this else statement here that means there's nothing on the branch there's nothing on the mountain that means that we've successfully moved everything into the lake so we can print yes we can break and we can move to the next test case all right so I hope that explanation was good enough for you guys if you have any questions again don't be don't be scared to leave a comment down below I'm always trying to respond to comments and help you guys out and I'm sure if you leave a comment someone else would be more than happy to help you out as well and like always if you guys want to get the code for this you want to look at the problem yourself not just from my video you can go ahead and go to my shared Google Drive I'm leaving a comment or what am I saying I'm leaving a link in the description down below I have all the practice problems that I've done so far so one two three you can go ahead click on the appropriate folder you can see the question and then you can see the answer as well with my commenting on it so that being said if you guys enjoyed the video please make sure you like and subscribe and I will see you again in the next weekly programming problem