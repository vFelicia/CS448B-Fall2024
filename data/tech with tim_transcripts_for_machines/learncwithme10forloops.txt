hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be discussing for loops now before i do that i would love to hear your thoughts on my new kind of office setup here i'm using a much better camera hopefully the audio sounding maybe a little bit better i have no idea you guys let me know in the comments down below anyways as i said in this video we're going to be discussing for loops this is going to allow us to actually repeat something a set number of times very useful very important and with that said let's dive in so we're going to dive into the syntax of a for loop in just one second but i quickly want to state kind of the problem that a for loop solves for us so previously you would have seen that if we wanted to do something multiple times we had to actually write the code to do that thing multiple times right so if i wanted to see out say something like hello world and i wanted to do this multiple times then i had to actually take this line and well paste it and actually from now on this is a good point to talk about this i'm going to be running my code right from sublime text so what you can actually do to run your code in here is you can press ctrl b at least that's the key that i've set up to run my code i'm not really going to go through the entire setup here of how to do this because it can be kind of complicated uh but anyways i'm not going to go to the terminal some of you rightfully so said that's kind of a waste of time just run the code and sublime text so that's what i'm doing now anyways you get the idea we printed hello world three times but now what if i tell you hey print hello world 25 million times or something crazy like that are you going to copy and paste this code that many times you're going to go and count that many lines probably not and well that is where a for loop comes in a for loop allows us to repeat something or loop over something a set number of times when we know the number of times that we want to loop we use something called a for loop now there is situations in which we don't know how many times we want to loop and that is when we would use something called a while loop which i will discuss in the next video anyways let me show you the syntax for a for loop so when you define a for loop you say four you put your open in closing parenthesis you put your open curly brace and you're closing curly brace and then you define what's known as your iterator now an iterator is simply a variable that keeps track of what iteration in the loop that you are in so when i say iteration that is kind of one sequence or one step of the loop so if this loop is running ten times we're going to have some variable it's keeping track of well what iteration are we on are we on iteration zero which would be the first iteration are we on iteration one two three four so on and so forth and that variable is going to tell our loop when it needs to stop running so as soon as the variable gets to say 10 then we're going to go ahead and stop looping because well this loop has happened 10 times anyways let me show you how we define the iterator so the first thing that we do is we define a variable that's going to be our iterator so we say int x or int i is kind of traditional is equal to and then zero and then we put a semicolon now it's worth noting here that you can start your iterator at whatever value you want and it's going to be easier if i just go through one simple example and then talk to you about all the nuances but just keep in mind that you can make this variable whatever you want this does not necessarily need to be an int type but i won't really talk about any other ones than ins because this is kind of standard practice anyways int i equals zero and then what i'm going to say after this is i'm going to say i is less than and in this case i'm going to say 10 and then i'm going to say i plus plus now what i've just done is i've defined the three criteria that i need for a for loop i need to define my iterator variable so initialize this to some value i need to pick my ending condition and then i need to decide what my increment is going to be every single loop so what this for loop really says here is set i equal to 0 loop while i is less than 10. so while the value of i is less than 10 keep looping and then we say i plus plus what this means is every single time one iteration of this loop completes add one to i i showed you what plus plus did previously when you do plus plus it just adds one to i uh you also could do something like i plus equals 3 right and then that would add 3 to i you could say i equals i times 3 that would multiply i by 3. so whatever you want you just have to change the value of i here so that it goes up or goes down based on what you're doing if you don't increment this like if you just did something like i equals 0 you're going to have what's an infinite loop the reason you'll have that is because the loop will never stop running right i will never be less than 10 and you don't want an infinite loop that's something you always want to avoid in programming now one small thing here i will note some people prefer to use the syntax plus plus i i didn't discuss this i i don't think i discussed this actually this is a just different way of kind of incrementing this variable i don't really want to get into all of the details but i know some of you c plus plus masters out there are going to comment that it's probably better to do plus plus i than do i plus plus for our purposes these do the exact same thing you can look up the difference if you want i just wanted to note that either of these ways is acceptable and some of the kind of i don't want to say older but maybe more experienced epos programmers would say plus plus i is uh preferred anyways we're going to go with i plus plus just because that's what i've shown previously and now let's actually you know see how this works so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews it's what helped me land a job at shopify and at microsoft and while i can just highly recommend the platform of course i also work there as well with that said check out i'll go expert from the link in the description and use the code tech with tim for a discount on the plaques so i'm going to say c out and i'm just going to c out i and then after this i'm going to see out and end l so the idea here is i just want to see how this for loop actually operates so inside of this for loop i'm going to print out the value of i which is our iterator variable so let's go ahead and run this code and let's see what we get we get 0 1 2 3 4 5 so on and so forth now the reason we get this is because on our very first iteration so the first time we enter this for loop i is set so that's equal to zero then what we do is we print out i we come back up to the top of this for loop and we increment i the reason we increment i is because after this first iteration runs or after any iteration runs really we're going to do whatever this says right here which is incrementing our our variable here incrementing our iterator so then what we do is we check if i is less than 10. so i in this case after we've done the first iteration is going to be 1 and so 1 is less than 10 so we run the for loop again and we repeat this process all the way up until we get to 9 then at 9 when we do our increment that changes i to 10 10 is not less than 10 we stop running the for loop so that is really the basics that's how a for loop works now you can put a ton of other stuff inside of a for loop right i can say something like if and let's do something like i mod 2 is equal to 0 and then maybe only in the situation where i mod 2 is equal to 0. what this really means is i is an even number or equal to 0 then i print out i so let's just quickly see if this works if i made any mistakes here so if i say if i mod 2 equals equals 0 then do this print statement you can see we only print out all of the even numbers and that's going from 0 to 10. so now let's look at another are a few variations of the for loop so if i change i to say be equal to 5 then that means that i is going to start at 5. so if i starts at 5 when we run this for loop let me just get rid of this if statement right here let's just do that okay if we run this now you see we get five six seven eight nine the reason again is because we started at five now if i start i at say negative five let's run this and you see now that this loop runs 15 times right so that is kind of just the basics of the for loop so you can start i whatever you want you can make this whatever you want you can make this condition something that will never occur but of course you don't want that to happen because you don't want to run into an infinite loop and in fact i don't want to show you an infinite loop because it's going to crash my recording software uh with the way the sublime text works but do an experiment on your own computer if you want okay so sorry i realized i was kind of just rambling on there what i'm trying to say is that if you want to see what an infinite loop looks like and just take my word for it essentially just means the loop never stops running but if you want to see what that looks like you can change this condition to something like i does not equal negative 6 and since i will never be equal to negative 6 this condition will never be false and that means that this will just run continuously now another thing you could do is you could make it so your increment here is just invalid or just doesn't do anything you say like i equals zero as your increment and then well what that's gonna do is again run you in the same situation you're just gonna constantly have i being equal to 0 and that will be an infinite loop so again you guys can experiment with that on your own i'm not going to show you that here but i will show you some more variations of this for loop so let's take another one and put it down here and now let's just look at another variation here so let's say that i actually don't want to increment going upwards or i don't want to have my iterator go up i want it to have i want to have it go down so i could start i at say something like 10 i can say while i is and in this case let's say greater than and make it greater than i don't know let's go 0 then we can say i minus minus now what this is saying is start i at 10 decrement i so subtract 1 from it every single time and then while i is greater than zero continue to print this out so if i run this now you see that we're going to count down so we're going to start at 10 we're going to count down until 1. now we can count down by more than just one right i can say i minus equals 2 and now if i run this we're going to count down by 2 every single time i could count down by 5 if i want and notice that we just get two things printing out now if we do something like if i is greater than 11 right then what you're going to see is that this for loop will never run the reason why this for loop isn't going to run is because i starts being equal to 10. 10 is not greater than 11 and so we don't do any iterations we don't do any increments the for loop doesn't run so that is really the basics of the for loop now the reason i showed you a raise before i showed you this is because i want to show you how you can loop through an array so a very common thing to do in programming is to have an array and to loop through that array or to kind of initialize an array from a for loop i'll show you how you do both of them so let's create an array we'll just make an into array we'll say int x and we can just make this equal to like one two three four five uh and in fact actually let's make it something different five six seven eight nine ten 20 30 40. just add some more unique elements in there so we've declared uh a variable called x and this is an array and it's storing these values so very simply what i want to do is look through this array and i want to print out every single one of these values how can i do this well we have this very convenient variable here called i and i can use i to actually access the indices of this array so if i change i to start out being equal to 0 which is the first index of my array and then i want i to loop up until we're done with all the elements right so i need to figure out how many elements are in this array essentially and then i increment i by one i can use this variable to access the element so let me show you what i mean if i say something like i is less than and then the size of and we're going to take x and divide that by the size of and then we'll just say x zero what this will do is this will tell us the number of elements in the array and the reason why this is going to work for us is because i will loop up to but will not include the number of elements that we have so let's count this one two three four five six seven eight nine so we're gonna get nine here when we look at the size of the last indice is 8 for our array and so that means that i will go to 8 and then as soon as it hits 9 it will stop looping and so we won't get any weird kind of index errors or anything like that because we're only going to be accessing elements in this array that actually exist right or positions in this array that exist so what i'm going to do now is c out x at position i i'm using this iterator variable that we've just talked about to actually access elements in this array so let's just have a look at this here and see if this works and i got some type of error i will be right back just gonna have a quick look at this okay so i realized i did the wrong declaration for an array i work in a lot of different programming languages not an excuse but just a lot of times i just forget the syntax for languages and obviously as you guys know i'm a pretty beginner in c plus but anyways i realize that i need to put this over here so int x and then the parentheses and then we can initialize our ray like this so let's try this now let's see if this works and we don't get any errors i believe let's look up here and you can see that we now print out all of the values in this array by accessing them from the indicee now what we could do is we could look at say every other value in the array right if we wanted to do that then we would just change this to i plus equals two and now what you're going to see is that we access every other element so we have 5 7 9 20 and then 40. so that is kind of the basics of looping through and array now another thing we can do is initialize values in an array using a for loop so let's just create an array we'll say into x and let's say that we want this array to have five elements so into x give it five elements now what we're going to do is we're going to say i is less than 5 which is the number of elements in this array what we also could do is the same thing that we did before so just size of x divided by size of x at 0. that will still work for us as well in fact let's leave that we're going to say i plus plus but now instead of just printing out these elements what i'm going to do is actually assign these elements so i'm going to say x at position i is equal to and let's just make it equal to i now we can make this equal to whatever we want we could fill this array with say tens or hundreds or something like that but in this case i'm just going to make it equal to i so x at position i is now going to be set equal to i then what i'm actually going to do after this so after i set this is i'm going to run another for loop and this for loop is just going to print out the the values of x so we can see what this array looks like so hopefully that's clear but let's run this and see if i made any mistakes looks like all is good you can see we get 0 1 2 3 and 4. so actually sorry this shouldn't be printing out let me remove that print statement let's run this again and there you go okay so technically you saw the same output twice but i should have only been printing here i didn't want to print up here so again the idea here is that we wanted to fill this array with some elements in this case i just filled it with whatever value i want but i could also fill it with say the squares of i right i could say something like i multiplied by i now if i do this notice we're going to get all the squares so 0 1 4 9 16 we could do all the cubes so let's do that and we get 64 at the end or we could do something like just a static number like a hundred and now you can see that we just have a bunch of hundreds in this array so there's all kinds of other stuff that you can do with for loops we're going to be using them a lot in this series and i think here is where i'm going to leave off as kind of a really good introduction to for loops so hopefully this is clear just to quickly recap we have the definition of the iterator variable this does not need to be named eye you could name it whatever you want you can start this value or this variable sorry at whatever value you want you then have your condition so while this condition is true you are going to continue to loop you can put whatever condition here you want and then you have your increment your decrement or really just the change to the variable i so usually you're going to use plus plus you could use minus minus or if you wanted to go by a custom amount by like two three four then you do something like plus equals minus equals you could even do something like multiplied equals if you really wanted to so that is the basics of a for loops i hope this video was helpful to you if it was make sure to leave a like subscribe to the channel i will see you in another youtube video you