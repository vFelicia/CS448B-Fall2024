in this video i'm giving myself a coding challenge and attempting to build the game of brick breaker in one hour i'm going to do this using python and pygame and i just want to clarify here that i've not written any of this code before i don't already know how to make brick breaker this is a new game that i've never made before and i haven't even really thought about this program this is meant to be kind of me just thinking off the top of my head doing everything completely from scratch and giving you kind of a taste and feel of what it's like to actually design a program like this completely from scratch now obviously i'm not going to add a ton of cosmetics or go crazy on the user interface this is going to be focused on building out that core game logic and hopefully i can complete that in one hour in this video ideally you should learn how i actually structure a program how i think about different problems how i set up classes objects functions methods etc how i deal with problem solving hopefully you guys can get a ton of value from this video now as i said i'm not sure if i'm going to be able to do this in 60 minutes i will try my best but one thing i am sure about is the sponsor of this video before we get started i need to thank pi scripter for sponsoring this video pi scripter is a free and open source python integrated development environment with all the features you'd expect in a modern ide it's also natively compiled for windows to use minimal memory with maximum performance pi scripter comes with features designed to enable smooth and efficient python programming these features include a syntax highlighting editor an integrated python interpreter full python debugging with support for remote debugging integrated unit testing and integration for python tools like pylint tab nanny and profile and so much more pi scripter users can run or debug files from memory and use a code editor todo list find and replace an integrated regular expression testing get started with pi scripter two day for free by clicking the link in the description thanks again to pi scripter for sponsoring this video so i'm here on the computer and i just wanted to play a basic version of brick breaker here to show you what i'm kind of trying to create uh this version has a bunch of powerups and stuff that i'm not going to be adding like i'm not going to add these kind of features to the game or have multiple balls or any of that stuff we're just going to go with kind of the basic version where you have a single ball and you're trying to destroy all of the tiles on the screen so pretty straightforward game i should be able to do this in one hour now before i start the timer i will quickly say that i do have a programming course it's called programming expert dot io if you're interested you can use discount code tim it teaches go python has over 300 practice questions a bunch of awesome projects it teaches software design software engineering tools if you want to get better at programming really it is the best place and allows you to get better very very quickly check it out from the link in the description about that said let's start the clock and start coding so the first thing i need to do here is import pygame i'm then going to create a display so let's say width height is equal to and then let's just go with like 800 uh by 600 for our screen size i'll then say win is equal to pi game dot display dot set underscore mode and then we'll go with width and height then we're going to say win or pi game dot display dot set underscore caption let's set this to brick breaker like that uh now one note i have been coding in javascript a lot recently i actually haven't written any python code in probably like three or four weeks so if you notice me using a bunch of like semicolons in parentheses that's probably why okay so we have this set up next i'm gonna need my main event loop so i'm gonna say define main i'm gonna say while run let's go here and say run is equal to true we'll say well run for event in pygame.event dot get if we could type properly here i'm going to say if event dot type equals equals pi game dot quit then i want to say run equals false i want to break okay then i'm going to say pygame dot quit and quit like that then we're going to say if i'm just going to score name equals underscore underscore main underscore underscore then main okay now we just want a basic draw function so i'm going to say define draw i'm going to say win dot fill and then let's just fill this with a white background color that's what we'll go with for now then we'll say pygame dot display dot set or dot update like that okay continuing here let's call this draw function so let's say draw i'm gonna have to pass the window to it here so we'll take in win and then i want a clock object so clock is equal to pygame dot time dot clock okay and we're gonna say clock dot tick and then let's put our fps variable up here at 60 so that we limit this to 60 frames per second okay so let's run this now and see what we have currently and there we go we get brick breaker white background and the screen works okay very nice uh next thing i want to do is probably just get a paddle on the screen that's moving around then we'll have the ball bouncing and then we'll add the actual bricks so let's start with a paddle let's make a class let's call this paddle uh inside paddle i want a velocity so i'm going to say x underscore vel actually let's just go all capitals of l is equal to five that's how quickly we'll be able to move in the horizontal direction i'm going to say define a knit to initialize the paddle i want an x y width and height we'll also take in a color i guess okay and we'll just say self.x is equal to x self.y is equal to y self dot width is equal to width and self.height is equal to height and then self dot color is equal to color okay next what i want to do is draw the paddle so let's say define draw self and win and then we're going to say pygame dot draw direct and then we want to draw this on the window with the self dot color and then we need our rectangle here which is going to be self.x self.y self.width and self dot okay so that should actually allow us to draw the paddle on the screen so now let's create a paddle instance and then pass it to the draw function so we're going to say paddle is equal to paddle and we need to pass to it xy with height color so for the x and y we want it to probably be in the middle of the screen to start so i'm going to say actually let's do something here paddle underscore width is equal to let's make the paddle maybe 40 pixels wide and let's go paddle underscore height is equal to 20. actually maybe we'll just make it 10 because we want to be pretty wide relative to the height uh then we're going to go paddle and we're going to pass this it's going to be width over 2 minus and then this is going to be paddle width over 2 so this goes directly in the middle of the screen and then we're going to say that we want this to be at i want to be near the bottom of the screen which is going to be the height of the screen minus the height of the paddle so paddle height minus let's just go five so it's like five pixels off the bottom and then we'll go paddle width and paddle height and i also realize that i should probably make width and height here in all capitals because they're going to be constant so let's go with height and i could just use my what do you call this uh find and replace but i don't want to replace these ones so we'll just do this here and then height and width okay so let's run this now and oh okay uh it's missing color so let's add our color here of black all right and then we want to actually draw this on the screen so let's pass the path okay now let's go here and say paddle i'm going to say paddle dot draw like that and we need to pass the win so let's do that all right let's run and there we go we now have a paddle now that's looking a little bit small to me so let's make that a bit bigger let's go like 100 by 15 maybe and okay i think that's a better size paddle so now we want to move the paddle on the screen so that involves getting the different key press events so want to get left or right key presses uh let me refresh myself on how to do this we're gonna say keys is equal to pie game dot and then what is this high game dot get underscore pressed or something like that pygame dog keys.get underscore pressed does that work let's just print that out i forget what this is i might have to look it up uh okay pie game has no attribute keys uh all right let me look this up high game get keys pressed this is key dot get underscore pressed okay i was close so let's try that let's run and there we go okay now we have our keys so now i'm gonna say if keys then this is pygame dot uh and we'll use the arrow key so i'll say k underscore left then that means we're going left say if keys and then pygame dot k underscore right then that means we're going right so now we need a method to move the paddle uh so let's just say define move self and then we'll just say direction and we'll say direction can either be one or negative one one will move us to the right negative one will move us to the left uh and then we will say self.x is equal to then self.x plus self.vel multiplied by the self dot direction or multiplied by the direction that's passed here okay so now let's go and say paddle dot move want to go left so we'll say negative one and paddle.move want to go right so i'll put one let's try this and let's see okay so now i can move the paddle now we need to make it so you don't go off the screen with the paddle so let's just get rid of that okay so we only want to move if we're not going to be going off of the screen so i'm going to say keys pigeon delt k underscore left and paddle dot x minus paddle dot vel will be greater than or equal to zero okay now we'll copy this and put this here and this is just going to be the opposite plus this is less than or equal to and then this will be the width of the screen okay try this and uh okay i forgot to include the width so i'll do that on that side let's see if that works though okay that works so we also need to add the width plus paddle.width okay let's try this and there we go now we stop and honestly i think that's fast enough so now we need a ball that's going to bounce around the screen so let's go here and let's say class ball okay uh we want to have yeah we're going to want a velocity for the ball as well let's just make it the same as the paddle let's say to find init okay self x y radius color okay self dot x is equal to x self dot y is equal to y self dot radius come on it's not giving me the autocomplete is equal to radius and self dot color is equal to color okay let's have a define move uh we're going to have to also have a velocity here so for now let's just take in x pass and then let's go self.x underscore val equals zero self.y underscore val equals zero so we're gonna have to have a velocity in the x and y direction which is gonna be a little bit complicated we're gonna have to use some trigonometry to figure out what that is uh but we'll use the base fell and actually for now let's just make the y val be negative self.l and when we move we're just gonna say self.x plus equals self.xfill and self.y plus equals self.y underscore fell we're going to say define set underscore val self expel y vowel and then self dot x val equals x velocity and self.y value is equal to that and then we'll calculate this based on kind of where we're bouncing so do that in a minute that's going to be the most complicated part is having the ball bounce off of the different objects so yeah we'll handle that in a second for now though let's draw the ball on the screen so let's say ball is equal to ball we need x y so for the x i want this to actually be the same as that so let's just call this center underscore x is equal to and then let's copy that so we're not rewriting this okay center underscore x and then this will be center underscore x and then we want to have a ball radius so we're going to say ball underscore radius is equal to uh is 10 going to be too large we'll try 10 for now okay so then we're going to say this is going to be minus the ball radius so we go a bit higher then for the y uh again this will be the same as that rather than minus five let's go let's go actually paddle y okay i'm getting a bit ahead of myself here but let's go paddle y and then this will be paddle y okay and then this will be paddle y as well i'll just go y uh and then sorry actually i didn't even need to subtract the ball radius this is where i need to subtract the ball radius okay so paddle y minus ball radius and then we need the ball radius and then the color we'll just make this black okay then we need to draw the ball and we want to move it as well so we're gonna say ball dot move although that should probably happen before we draw so let's do that there okay and now we need to take in ball okay ball dot draw when and i realized i didn't actually did i do anything for drawing the ball no i didn't so let's do draw define draw self win highgame dot draw dot circle draw down the window draw it on the self.color uh then we want to pass the center so self.x self.y and then self.color and actually not selfie color self.radius okay so now we are able to draw the ball and we're moving it so it should just go up on the screen let's try this now and there you go we can see that it goes up uh now i do realize let's look at this it didn't look like it's directly in the center and the reason it's not in the center is because of this okay actually i didn't really need we'll keep center x but actually let's just call this paddle x let's fix this now uh since it's in the middle we can just do width over two so let's try this now and there we go it's in the middle of the screen okay uh now i want to bounce off all of the edges this is where it gets a little bit complicated uh but we'll check for ball collision here i guess um actually let's make a function fine ball collision i almost just did an arrow function there let's just take in the ball okay and now we want to see if this is colliding with any of the walls if it is we need to adjust the x and y velocity and and go from there okay so we're going to say if the ball dot x is less than or equal to zero then this means we're colliding with the left wall so if that is the case then we need to change the velocity so that let's see this is a bit complicated let me think about how we're going to do this all right so if i'm thinking about this uh if we're hitting the wall i think all i need to do is just reverse the direction because we're not going to be calculating the velocity differently when we calc when we hit the wall sorry we just flip it so that if we're going this way now we go this way and we just go off the same angle that we came on at now the only time we'll change the velocity is when we hit the paddle and that will be based on where yeah where on the paddle we hit and then we'll kind of calculate an angle and send the ball off either right left and you know at a different angle based on that so to do this we can just say ball dot set val is this what i called it yeah setvel and we're just going to say for the xvel this is going to be ball dot x underscore bell multiplied by negative one and then ball dot y underscore so this will just flip the direction now this is actually going to be the exact same thing if we're going on the right side so we can just say or ball dot x is greater than or equal to width of the screen okay so that should do it for the x in y direction now we want to do y so i'm going to say if or sorry for the x direction now we want to do y so if ball dot y is greater than uh yeah it's greater than or equal to height this would mean we're hitting the bottom of the screen or ball dot y is less than or equal to zero we actually want to add the ball radius here so that it doesn't look like we're kind of going slightly off the screen so we're gonna say minus ball radius and this is gonna be plus ball radius and then this is going to be minus ball radius then we'll do this exact same thing except we'll just flip the other direction so let's go here and then multiplied by negative one okay so now let's just call ball collision here so ball dot move ball collision and let's run this and we should just see it bouncing up and down on the screen if i haven't messed anything up and there we go okay so it's just going to bounce and now of course we need to shoot it off at you know some different angle otherwise we're going to get the same thing so for the x file let's just set this at 2 and let's see if this kind of bounces around the screen now okay so that looks proper to me uh now we just need to adjust the velocity when it hits the paddle then we need to create a bunch of bricks and i think for how long are we in here 15 20 minutes ish uh that's a pretty good progress all right so we have ball collision now we need to be colliding with the paddle now when it hits the paddle that's a little bit more complicated because actually i think i'm going to bring up windows paint here to uh to go through an explanation for windows ink where is windows ink do i have this windows inc come on how do i actually get to the app though app whiteboard there we go microsoft whiteboard that's what they're calling it okay uh configuring new one that's fine all right so if we have a screen like this we have a paddle and we have a ball the way that i want to do this is if the ball hits the paddle on the right side then i want to bounce it off to the right now the further to the right of the center of the paddle it hits the further i want it to bounce off and if it hits the middle i want it to go straight up if it hits like really close to the middle on the left i'd want it to go kind of high to the left that's how i'm going to do this so that you have kind of control over what direction the ball is actually going in so what we need to do when we hit the paddle here is we need to reverse the y direction or reverse the y velocity and actually we don't want to reverse so we need to calculate what it's going to be as long as well as the x velocity so if we want to go we have this kind of plane here so this is a maximum of 90 degrees that we can possibly go in so we just need to pick an angle and once we pick an angle then i can calculate the component for the x and the y velocity but how do we pick the angle well if this is the center of the ball and we're here we want to say that if you're at the very end then this is practically 90 degrees right whereas if you're in the middle and this would be 45 degrees so you just want to take the distance between this and the paddle we want to then divide it by the length of the paddle that would give us the percentage of the percentage towards the middle we are so like 50 60 etc then we could just multiply that percent by 90. that would then give us an angle kind of normalized between 0 and 90 and then we can use the angle to determine the direction to bounce off um i don't know if you're getting exactly what i'm saying but that's that's what i'm going to do i'm trying to go fast so that's as as much as i'll explain if this was a tutorial i would go into much more depth uh anyways let's try to calculate this now so let's just make a function even though i don't love making a function for this i'd like to make it a method but i think a function's fine we'll say ball underscore paddle underscore collision we'll take the ball and the paddle first of all we need to know if we're hitting the pedal so how do we know if we're hitting the paddle well if the x is within the um x plus the width of the paddle and the y is like hitting the paddle so how do we do that we're going to say if ball dot x is this is going to be less than paddle dot x plus paddle dot width and ball dot x is greater than or equal to let's be greater than equal to as well uh paddle dot x then that means that we are colliding in the x direction so i'm going to say if and i'm actually just going to put a not around all of this okay so if not the case then return and now we want to check the y so i'm going to say if the ball dot y plus the ball dot radius is greater than or equal to the paddle dot y yes i think that should be good then again we'll just put a knot around this because we'll just check the opposite and then we'll return if this is not the case because that means we're not colliding okay so now we know that we're colliding so now that we know we're gliding we want to calculate the distance between the center of the ball to the center of the path so that's actually pretty easy we can just say that paddle underscore center is equal to ball dot x plus ball dot width over two okay and then we're gonna say distance underscore two underscore center is equal to the sorry and this needs to be the paddle not the ball paddle dot x and paddle up okay so we're going to say if the and this is the ball dot x now what am i subtracting or should i say ball.x minus paddle center i guess so then if this is positive or on the right if it's negative we're on the left so calculate the distance and now we just want to calculate an angle um okay so how are we going to do this so distance to center paddle center so now we're going to say percent underscore width is equal to and this will be the distance to center divided by the paddle.width okay and then we're going to say the angle is equal to the percent width multiplied by 90 degrees okay and then we're going to say angle in radians is equal to math dot radians of the angle let's import math here okay so now that should be giving us the angle in radians yeah okay so that looks like that's correct now that we have that we want to calculate the two components of our um what do you call it of our angle here or of our velocity sorry so to do that let me just pull up my whiteboard again so i can remember the direction here okay so let's just go to this all right come on load faster alright so if i have a right triangle like this and actually let's think about this if the ball comes in like this it depends on what direction it comes in at um okay right angle triangle let's go like this we have this which is going to be our vel that we know this will be our angle i should have drawn this from the other direction uh okay like this that's what i wanted okay so right angle this is the angle that we know this is our velocity now what a how i remember this is so ka if i could right here and so i think we just need this one so this is opposite this is hypotenuse and this is adjacent so x is going to be cosine and y is going to be sine okay i know that probably meant nothing to you guys but that's how i'm going to figure this out so i'm going to say the x underscore val is going to be equal to math dot sign of the angle radians multiplied if i could find my asterisks here by b and this is going to be the ball dot okay now this would be the same for y except this is going to be cos okay and then i'm going to say ball dot set underscore val we're going to say x underscore val and then y underscore vel but this needs to be negative so say multiplied by negative one okay uh let's see if this works i don't think it's gonna work but let's try it and then we can debug it later what did i actually call this function ball paddle collision okay so let's try this all right so that actually went off on an angle so wait let's see no way i did this right the first time it looks like i did it correct first shot that's that's shocking let's see if i go on this side nice okay yeah there we go it looks like it's it's working all right guys i'm as shocked as you i didn't really think i was gonna do that perfect on the first try but uh i did because i guess i'm just that good so uh let's uh let's continue okay now we need some bricks we need to break them uh so let's make a class for bricks class brick okay and define underscore square knit okay self x y width height i guess we might as well just pass a health and a color as well so self.x equals x self.y equals y self.width width self.height equals height self dot health equals health self dot color equals color okay uh nice so now that we have that we want to draw this so i said define draw self win uh we're going to say hi game.draw.rect and then this is going to be on the window with self.color and then we need our rect so self.x self.y self.width self.height okay that's it for draw now i want collide now this is just going to return true or false if the ball is colliding with this brick at the current point in time so self ball now just like i did here let's just copy this okay and then rather than paddle we'll just replace this with self okay and self and itself okay now this will be your return false return false and return true all right now we need to generate a bunch of bricks and then draw them on the screen i'm also just going to say define hit self actually yeah that's fine let's say self.health minus equals one okay and then here we'll just say self.hit then we're gonna want something to where we like delete the brick if it has less than uh less than zero health or or zero health we'll just get rid of it we'll do that later okay so let's generate a bunch of bricks say define generate underscore bricks that and let's just take in how many do we want like the number of rows and columns of bricks i guess rows calls okay so first of all if we have a width of 800 then i have a few options i guess i could just do like eight 100 pixel bricks are like 890 pixel bricks with gap interesting how i want to do this but let's let's just write something that does this okay so we'll say four row in range rows we'll say for call in range calls okay now we're going to say bricks is equal to an empty list and i want to find the brick width so the brick width should be equal to the width of the screen uh integer divided by the number of rows but i want to have some gap between the different bricks so i need to figure out how exactly i'm going to integrate the gap here um we could just make all of the bricks slightly slightly smaller so if you want a gap like two pixels i guess i could just subtract two and then that should be fine so let's actually just add gap though gap is equal to two and let's say minus the gap okay and let's put this here alright so let's say brick is equal to brick and then this is going to be and we need to determine the x so we have row call so how do we do this this is going to be row multiplied by the brick width okay plus the gap i think that's going to be x and then for the y or sorry this is the other way around call multiplied by brick width plus gap and then this will be rho multiplied by and then this is going to be the brick height which we'll decide in a second plus the gap okay so brick underscore height is equal to and let's just go with like 30 for now okay then we want the brick width brick width come on and the brick height this is actually turning out to be one of the most challenging parts you're generating the bricks okay so bricks dot append brick like that and then let's return the bricks okay now we want to draw all of the bricks and check for collision with them so let us oh we also need to pass a color and a height here so for the color for now let's just go with green and sorry the health let's just go with i don't know maybe like five okay so now let's pass the bricks to our draw function and let's draw them where is draw okay bricks i'm going to say for brick in bricks then brick dot draw on the window okay and then we want to check for collision so it'll really be the same thing here we're going to say and oops this needs to go to draw say 4 brick in bricks then brick dot collide ball and then we'll say if brick dot health is less than zero less than equal to zero then we want to delete that brick so we're gonna have to do this bricks to delete we're gonna say breaks to delete dot append brick okay then we're going to say actually i can do this in a better way make a copy of bricks rather than this we'll just say bricks dot remove brick okay uh we don't need that anymore all right let's run this and see what we get and we get an error what have i done wrong here says what uh bricks is not defined ah that's because we didn't ever actually generate the bricks let's say bricks is equal to generate bricks uh let's go actually rose calls let's go three rows of ten columns and see what we get i think it's gonna look a little bit messed up but yeah okay less than equal not square between instead of string and int uh brick.health why how have i done this wrong where's my brick uh health and then color that's why so where am i generating generate here we need to just swap those around make that green okay all right so let's see here what is what is happening here okay something something serious something is seriously wrong um okay brick width brick height plus gap brick height plus gap okay let's just try setting this like something small let's make them square and let's see hmm curious why this isn't working should be zero zero okay let's let's just see this here okay so we get one brick for row and range rows for call and range calls column times brick width plus gap all right so now we have to actually think for a second here how have i messed this up i assume the bricks are like overlapping each other bricks dot append brick we also need to make it so when we collide with it we set the ball we reverse the ball velocity that's potentially why as well so let's go here to collide and say ball dot set val and then this will be ball dot x underscore val and then ball dot y underscore bell multiplied by negative one okay let's just run this here let's see if i can hit one of these bricks okay so there is a bunch of them okay so that's why they're all like stacked with each other apparently the gap isn't really doing anything although i don't know why it's not doing anything i'm just messing up the gap here let's see so we've gapped to brick width of 20 brick height of 20 we have plus the gap brick width okay 20 20. so if we have column times the brick width plus the gap maybe it's because we need to do plus gap times the column i don't think that could be right oh there we go okay so that's doing something now all right so let's go back here now and brick width row time brick width brick height why is the width and the height so so off though oh it's because we need to do the same thing for this gap gap times row okay let's try this uh oops multiplied by row okay there we go now we're getting what we're looking for okay so now for the brick width this is going to be the rows integer divided no the width integer divided by the rows minus the gap is that going to work no okay so now ah it's because we need to do it by the calls that's why let's try this now okay that seemed to work whoa what's going on here okay so clearly clearly something's a little bit messed up here in terms of the the collision with the uh with the bricks uh okay so we'll fix the collision with the bricks in a second but for now at least though we're generating bricks so let's let's fix the collision here it's got to be inside of here so if not ball dot x okay less than or equal to self.x plus self dealt with okay and ball dot y greater than self.y okay and aha simply less than or equal to self.y plus self.height that would be why that wasn't working okay so let's try this now and all right it bounced off but it's because i'm not including the radius that it's looking all weird i believe ball dot y minus ball dot radius that would be y let's try this okay and it's going to bounce and there we go now i think what i want to do is just maybe darken the shade if it's um what do you call it if it's been hit a few times so let's see if i can actually figure that out or maybe add some opacity or something let's just see if there's like an easy way to darken pie game how do i change okay darken color rgb how would you do this okay oh it's even in python perfect something like this maybe all right so let's do the good old don't even read it and just copy it and wait why is there two colors i don't want two colors i just want one color oh it's gonna give me a range between the two colors okay so let's do that um we put this inside a brick gives me one between color and color b now okay that's fine we're just gonna need two colors then so let's just say cutters colors and then we'll say self.hudder is equal to this uh okay now when we collide if we hit we will change the color by interpolating it between the two colors so we'll say self.color is equal to self dot that and then color a will be actually we can just do this asterisk self.colors and then the time will be self dot health uh between it takes a value between zero and one so we're going to say we want max health so max underscore health is equal to and just say health just so we can divide and then get a number between one and zero so be self.health divided by self.max health so if it's uh like the max health and it's one if our health is lower then we should get darker or whatever between the two colors so now we need to pass two colors to our bricks so let's go here and let's just go like green and red with the colors and let's see how broken this is now okay so we got an error here ah it's because it needs to be rgb i can't pass the string so for green this is going to be red green blue so 0 255 0 and then 255 0 0. okay let's try this now and nice okay and it gets slightly darker all right now let's see what happens if we hit the same one again if we can accomplish that come on okay and it gets darker again so i mean this isn't really the best way to do this i guess because it's kind of hard to tell what health you're at but you can see that we're darkening now let me just change the health to just be three so that we can actually see if we're deleting them and then i guess we just need to do a check if all the bricks are gone and then you win the game and then it would restart and that seems good to me we also could implement oh we need to implement live so if it goes off the screen you lose a life okay we'll do the lives first but let's change the health here where am i passing the health to be is this three let's just make it two okay and then run all right straight up again and there we go it's gone okay nice so now let's do lives so we're gonna go here and say lives is equal to three and then we wanna draw that on the screen so let me just pass the lives let's get some font going so we'll say pygame.init just to initialize the font we'll say the lives underscore font is equal to pie game dot font dot sys font uh you guys already know we're going comic sans of course the go to font size just go with 40 because it's going to be live so that's fine for draw will not take in lives and we will say lives underscore text equals and then this will be the lives font dot render and we want to render actually an f string here of lives and then this will be lives okay and then one and the color will be just black that's fine okay then we're going to say hi game dots actually no wind dot blitz live's text and then where do we want this i probably want this in the bottom left or bottom right hand corner so just to make it easy we can go with like 10 for the x and then height minus lives underscore text dot get underscore height 10 and that should be good okay let's see if it shows up now and there we go now we have three lives so now we need to subtract lives so where we have ball paddle collision um that's not what we want what ball collision here this is actually what we we want to check if you didn't hit the paddle but you hit the edge of the screen so in fact we can just make a check in here we don't really need to make a function for this so we're going to say let's add a comment lives check if ball dot y is less than or actually greater than all that y plus ball dot radius if this is greater than or equal to the height of the screen then lives minus equals one and we're going to reset the ball to the where where was this originally set with over two and then this so i'll just just copy this and reset it i'll say all dot x is equal to that and ball.y is equal to this okay uh we reset the ball and then say ball dot set underscore film we'll say the ball actually it's going to be zero and then balled up l but this needs to be negative so multiplied by negative one all right and i think i'm almost getting to an hour at this point i don't know exactly because i didn't really start a clock on my end which i probably should have done but let's see here okay let's see if i lose life all right there you go ah so actually the ball should probably restart at the paddle position so that's a bit of a mistake yeah okay we wanted to restart at our paddle position so we don't want to do this so ball dot x is going to be equal to paddle dot x plus paddle dot width over two and then the ball dot y will just be equal to paddle dot y minus the ball radius i think that's correct so let's try this now okay there you go so it restarts on our panel nice okay so now that we've done that we want to do something if you lose all of your lives so we're gonna say if lives less than equal to zero then we need to restart the game so pass for right now but how are we going to restart well we need to reset all of this so let's copy these and this is not ideal but this is how i'm going to do it because we're in a bit of a crunch for time here just reset all that and then we need to show something on the screen saying you lost and go from there so we're going to say if you want to just use the live spot let's just save us some time lives font dot render you lost exclamation point 1 and then the color will be red and we will say win dot blind and this is going to be lost text okay lost underscore text want this in the middle of the screen so this is going to be width over 2 minus lost underscore text dot get underscore width divided by 2 and then this is height if we could spell that correctly over two minus lost text dot get underscore height over two and then we need to refresh the display and delay so pygame dot display dot and then this will be update and then highgame.time.delay and we'll just delay 5000. now is this what does this convert a number string delay milliseconds yeah so five thousand would be five seconds in fact let's just go three thousand we won't agonize you too much for that and that should that should do everything i think um ball equals yeah paddle equals this we're just creating a new instance that's fine bricks okay yeah let's try this so what happens if we lose all three of our lives okay that's one done okay that's two done and that is all of them you lost okay let's see if it resets and there you go then the game resets all right so that's pretty much it for brick breaker i mean i guess we want to do something if we win but i don't really need to i mean okay i guess we could just implement that because we have enough time so let's do this we'll say if the len of bricks is equal to zero then we want to do the exact same thing so can i hmm i don't like i don't love continuing to rewrite all of this so let us how could i do this let's just do an inside function reset i don't know if this is gonna work or not but let's let's try this reset and then just copy that actually no just copy what i had here okay so reset all right come on go back then it's just this i'm actually gonna put this another function i'm gonna say define display text i'm just taking text here okay and then rather than lost text this will just be text and actually text render that's what this needs to be okay and then rather than that text and then text underscore render and text okay i think that's fine now let's just try to use this so this should make this a lot cleaner i'm just going to say reset and then display text you lost exclamation point and then we'll do the exact same thing here and say reset but you won okay uh let's try this so i just want to test again if it's going to reset uh if we lose all our lives so let's see this all right you lost okay so that did work let's see if it resets okay so it didn't reset so uh and we're gonna get yeah okay i need to just exit this force quit that is this still going okay so reset didn't work um and it's because these variables here there's a way to do this but i should i just i think if i do this then it will work so let's try that again i this isn't the best idea to be doing this it's also another keyword i think i can use to uh to to do that but let's just let's see if this works okay so you lost definitely works yeah okay so that's still not working uh okay quit that all right how would i fix this um this and this we can take out i think i can just do ball dot x is equal to this and ball dot y is equal to this okay yes no what the heck am i doing this is what i want ball.y to equal to this is ball.x uh bricks and this we cannot do here so let's go and do them here okay and here can i do the rest inside of this reset function let's see i should be able to if i rather than recreating this i just modified the attributes so to say paddle dot x equals paddle x and then paddle underscore y equals paddle y but this should be dot y okay let's see if this if this works this time not confident but let's give it a shot and then we should be just at about the hour mark so i can try to play through one game uh see how that goes and then i guess we'll wrap up the video there okay you lost come on reset okay there you go so that actually works properly i just can't redefine the variable uh based on i guess the way i've done it there okay so let's try to play through a game here let's just make sure everything's working don't see any bugs just try to get rid of a few bricks and then once that's done we'll wrap up the video now while i'm playing this guys i will ask you if you enjoy this type of video of course make sure you like the video but let me know what other uh challenges you think i should do here now i also want to try to like bounce the ball off of multiple bricks and see if that's gonna work or if we're gonna get any issues with that so let's try yeah okay so there you go we just bounced off multiple bricks that seemed to work fine so that's good okay let's see here bounce because what i did is oh i made it so when you hit a brick it reverses the y velocity however if you hit the side of the brick it shouldn't do that so i probably should i probably should fix that i'm not gonna have time to fix that right now but that would be a bug here if you hit the side of the brick what's gonna happen is it's still gonna change the y velocity even though that that shouldn't happen i need to kind of check what side of the brick you're hitting so i determine what to set the velocity to but yeah anyways as i was saying yeah you can see it kind of like glitched through the through the bricks there right as i was saying i wanted uh to know what other challenges you guys would have for me in terms of coding this one i think was like much easier than the minesweeper one i did the minesweeper one was a bit more complicated with the algorithm and how to check if uh what is it if there's a mine around or what the number should be on on the different block or whatever you call it and that's okay that's definitely a bug right there yeah let me know so actually i don't think i'm gonna play through this whole thing i'm kind of bored already this is a pretty boring game from what i remember anyways guys i think i'm gonna wrap it up here i don't think any of you really need to watch me continue to play brick breaker if you enjoy this type of content please leave a like subscribe to the channel also i do have a course it's called programming expert you can check it out from the link in the description if you want to learn how to code in python just like this i will see you in another youtube video