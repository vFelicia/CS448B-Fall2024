hello everyone and welcome back to part two of designing software systems now i'm making this video because there was a lot of demand to actually code out the system that we had designed and planned out in the previous video so if you guys appreciate this please do leave a like on the video and subscribe to the channel if you are not already what we're going to be doing is just taking this design that we kind of planned out in the previous video and translating this into some python code now i want to make it very clear here before we get started that what i'm doing here is just my opinion of what the best way to go is this isn't necessarily the only correct way there's many different ways you can implement systems like this and you know three four different people looking at this design are probably going to have different code that implements it so just keep that in mind that if you maybe have a different idea of how you'd want to do something it's not necessarily incorrect and i might actually make mistakes throughout this video and i'd love if you point them out in the comments down below so that i can learn from them and so that everyone else watching this video can see those as well so anyways with that being said let's go ahead and start coding this out but the first step to actually coding this out is going to be to determine where we should start now picking where to start can sometimes be a little bit overwhelming especially if you have a ton of different classes and a very large system the rule of thumb for me is usually just to pick the simplest classes and start programming those ones out first the ones that have the least amount of associations you know only a few properties maybe not such complicated methods and just start kind of at least making a template for those classes and getting those kind of into the system and then slowly you can start building your way into the more complex ones so my approach for this diagram right here is going to be to start with this address class the reason for that is because in my opinion this is the simplest it has one association between person and address so one association with person and it only has attributes inside of it as country city state and then i believe we had province and what else oh sorry no country city state postal code and street address were the attributes we have for address so pretty simple class and something that i think is good to start with next i'm going to go to person the reason i'm going to code out person is because this is an abstract based class for the student class and the professor class so i have to program this one before i program student and professor so of course that logically makes sense to do and then after i do person i'm gonna do student and professor because they simply inherit from person and then i'm gonna do course and enroll probably do course first and then enroll because enroll has an association between course and student so it makes sense to program enroll once all the other classes it's associated with are finished so that's kind of my game plan here things might change we might go on some different tangents as we go through the video but that's just kind of how i decide where i want to start so let's go and start programming address now notice that what i've done is i've just made a new folder and i've just put a new file in here they don't have anything in them right now they're just placeholders they're named the same as each of my classes now usually this is common practice and it's good to do just to make all of your classes in different files that are named that class so for example i'm going to do class person inside of the person.pi file right it just makes it way easier when you're importing stuff and finding things later but it doesn't really matter you can do all these in one file if you really want so i'm going to go ahead over here to address.pi i'm going to start making this class now this one's really simple it doesn't have any inheritance or anything like that we're just going to define our constructor which is something that we have to think about a little bit so when we make these classes they have a bunch of properties right and a bunch of different attributes and and all of that fun stuff so how do we decide what the constructor for all of our classes should look like well usually what i do is i take any of the attributes here and i say okay are these necessary do i need to have them when i create this class and if the answer is yes then i put them in the constructor now if there's any attributes there that aren't necessary that maybe are only going to be created or instantiated later in the class's life then i don't put them in the constructor now another thing to consider is associations so for example we have person and address which are associated together now each address will belong to simply one person right that's kind of what we decided beforehand so we could technically say that we want to have a person class in the constructor of address because every single address belongs to one person and we want that address to know what person it belongs to now we actually don't really need to do that because for this um system itself i don't think it matters if the address knows what person uh it belongs to right i think the address is just an object that stores you know the state of the address like this is where the address is just information and i don't think it needs to know what person actually is living at that address so i'm not going to actually associate going if i can get uh can i get this pen here yeah let's let's do some drawing i'm not actually going to do the association in this direction i'm only going to do the association in this direction so this is where we also talk about directional associations you can have an association that only goes one way and what that means is that one of the classes can view the other but the other cannot view that other class now i said other like six times there but hopefully that makes sense we're only going to associate person to address not address to person that's something we probably should have specified when we did the original design but not a huge deal and again as i said things will change as you actually go into the implementation so let's now just finish coding this out so we're going to say self country state city street and postal code like that so that's going to be what we have in our constructor and then we're just going to have to link all of these to a self attribute so self.country equals country self.state equals state self.city equals city self dot street equals street and self dot postal equals postal now i'm just going to change the name of this one to be postal code just because i think that's what we used when we were actually planning out this uh what do you call it this class so just to say consistent and with that the address class is pretty much finished we actually don't need to do anything else this is all we really need inside of this class and again the reason i decided to program it first so now that we've done address i'm going to move over to person i'm going to start programming this one now the first thing i'm going to do since the person class is actually going to be associated with the address class is i'm going to import that address class so i'm going to say from address import address like that now the way this works is that when you have files inside of the same folder you can simply name the python file without the dot pi extension and you can say from this python file import the class address that's all i'm doing i'm just saying okay let's look inside of this address file here and let's take this class and import it into here all i'm doing pretty straightforward now what i'm going to do is i'm going to say class person like that i'm going to define the constructor for my person now we always start with self but let's see what else we need inside of person so you need a first name last name date of birth and phone number so let's add that so i'm just going to say first last dob for date of birth and then phone now it doesn't really matter what you name these what is more important is what you name the self attribute so i'm going to say self.first underscore oops first underscore name equals first i'm going to say self.last underscore name equals last self.date underscore of underscore birth equals dob which just stands for date of birth and then self.phone equals phone now we're not quite done yet because we actually need to figure out how we're going to deal with this association which is a one to one to many with person and address so essentially what this is saying is that each person has to have at least one address but can have many so how do we deal with that association how do we actually create that well what i'm going to do here is i'm actually going to put address like that now this is because what i'm saying is that okay whenever we create a person we need to have at least one address that that person has so i say address like that and that is going to be a mandatory thing that we need to pass in now the question is what is this address like is it actually an instance of address of the class address or is it a list of different addresses right because if we look back at our diagram here we can have many different addresses we don't just have to have one so how do we determine if they're just getting one if they're getting many how do we deal with that right well this is where things can get a little bit tricky but i'm going to show you kind of my solution to this and again there might be better ways to do this but this is what i'm going to do so i'm going to say self.address is so self.addresses because there are multiple addresses equals a blank list and what i'm going to do is i'm going to allow this address parameter here this yeah address parameter to either be a list or to be an actual instance of an address and what i'm going to do is when this address is passed in i'm going to verify that this is the correct type and if it's not i'm going to raise an error to the user and say hey you know this is wrong pass me the right thing now this is good practice to make sure that your parameters are passed in as the correct type because python is not a typed language so if you want to make sure that you're getting the correct types and set inside of your classes then what you want to do is you want to verify that the types that are passed in as the parameters are correct so the way that we can do this is we can look at this address parameter here and we can check if it's an instance of this address class or if it's an instance of a list so if it's an instance of an address class then what we're going to assume is they passed us one address so when they made a new person they said something like you know person and then they blank blank whatever for all the other stuff so dot dot dot and then they passed us like an address that had you know all the information inside of it that's a potential what they could also pass us that would be valid would be something like and just ignore the other arguments there and then a list that has address classes inside of it right so that's another thing that they could pass in because we could either have one address or we could have many addresses associated with this person so we have to check for these two forms and make sure that those are valid so what i'm going to do is i'm going to say underneath here and we could put this in another method if we wanted to but i'll just write it in here for now if address is instance and then in this case address we will simply say self.addresses dot append address so we'll say if this is a singular instance of the class address which we've imported here then simply append that to our addresses list we'll say else well actually we can say l if address is oops i don't think i have to have double is a sorry just should be is instance and then in this case i believe i've been doing this wrong we're going to say is instance of address list like that then we can do something else here which i'm going to talk about in a second but let me just fix this one up here so sorry guys what we actually have to do is just say if is instance address address so we don't have to say address is instance that's just my bottom speaking other languages here but is instance address which is what was passed in of the class address then we append that to the addresses list otherwise if is instance address a list then what we need to do is make sure that each entry in the list is an address so we're going to say 4 you know entry in address if is instance entry address like that then we'll keep going so actually what i'm going to say is if not is instance entry address and if we spell entry correctly then i'm going to raise an error that simply says in valid address like that dot dot dot so i'm just telling the user that hey this was invalid you gave me address that wasn't okay and i'm just crashing to make sure that they know hey this is wrong you need to give me a valid address this is just good practice i'd rather crash when someone creates the class than later on in the class's life when they try to do something and then it's not valid because they created it incorrectly that's just my idea behind this then what we'll say is self dot addresses equals address so what i've essentially done is said okay you know if it's a singular instance append it to our list if it's a list and all of the entries in that list are actually an instance of the address class then what we can do is just make this self.addresses attribute equal to the list that they passed in and then later on we can you know append things in here if we want to add another address and so on so the next thing i'm going to do is make a method here i'm going to say add underscore address like that we're going to go self we're going to take an address i'm going to do the same thing here we're going to say if not is instance address address then what we're going to do and actually let me just add an else statement here guys oops it's going to have to be after this so we'll go else raise error and then here we'll say in valid address dot dot dot so the reason i added this elf statement sorry i'm getting ahead of myself is because if it's not in these two forms if neither of these two is valid then it was invalid so we just tell them it's an invalid address okay so next one add address if not is instance address address then what we'll do is we'll raise the error and we'll say again invalid address dot dot dot a little bit repetitive but that's fine and then if that's fine so if we get past this if statement here what we'll simply do is we'll say self dot addresses dot append and the address like that awesome so that is add address we could add one for delete address as well but for now i think that's fine we're going to leave the person class at that so now we're going to do student and professor so you can see we've finished this one up we've checked that address is valid so we've done the is instance stuff we've raised our errors again the errors are to make sure we can't create an invalid class so that things crash now rather than crashing later which is kind of just better in software development you want that to happen and now we'll go ahead and do student and person which are going to inherit from person us student person student and professor so student has one extra attribute on it which is international and then it has is part time and probation as two methods so we're going to have to implement those as well but let's go ahead and make the student class so we're going to start by importing this person class because we need to inherit from it so we're going to say from person import person like that we're going to say class student like that inherits from person so in python this is the basic inheritance you just put it in brackets like that and now this means that the base class is person and the derived child class is student now we're going to start by defining our constructor now since we are inheriting from person we need to have the same constructor as person except with a few extra attributes that are going to be specific to student so i'm just going to copy these so we have define init self first last dob phone address and then what else do we have on student we had international like that so i think i spelt that correctly i'll make this a default parameter and just set it at false so what this means is that if you don't pass any value for international we're just going to assume that the student is not international that's a good practice as well for things that you may not necessarily always need to pass you can just make them a default parameter and then be kind of the class can assume if it doesn't see that no the student is not international so what we'll do here is we're going to say super like that dot underscore underscore net underscore underscore and we're gonna go inside here we're gonna say self first if we could get this correct last dob phone and address and what this is gonna do is simply call the person constructor with these arguments that we pass here then what the person class is going to do is it's going to assign all of these attributes that we've had here it's going to do this check that we had here inside of the init and then all we have to do is say self.international equals international so this will assign all of our properties attributes whatever you want to call them we can add one extra here that wasn't in this constructor and we're good to go and that's again one of the reasons we use this as a base class because now all that stuff that we wrote inside of here we can simply use by just writing super dot init and then passing the arguments that we need awesome so now that we have that we need to go back and look at our diagram and think about what associations this student class is going to have so the address association is already handled from our base class person but we are going to actually have another association with this enroll class that we're going to have to handle and oops i did not mean to do that let's get rid of that so need to handle the association with enroll so to do that what i'm going to do is i'm going to say self.enrolled equals a blank list now since when we create a student they're not automatically enrolled in anything there's no need to add anything to the uh what is it the constructor here what we'll do is we'll just add some methods that allow us to add a new enrollment to this student class so this is just a placeholder saying hey we're going to have an attribute that holds all of these enrollments and that will handle kind of the association between our student and our enrollment and that is as easy as it is so we're gonna define here add underscore i guess enrollment you can call these whatever you want i'm going to go with add enrollment we're going to take enroll like that and then what we're going to do is the same check that we've done before and we're going to make sure that this enroll here is actually a valid enroll class now since i've yet to code out the enroll class what i'm going to do in here is just go class and roll and just go pass for now just so that when i import this i don't get a crash so i think enroll i don't know if it's spelled with two l's or one excuse me if i'm spelling this wrong but i think it can be either way but regardless let's just stay consistent and let's go enrolled i don't know if that looks right i want to go 2l's let's just go 2l's uh and we'll change the name of this file so enroll and let me rename this one here to enroll okay so we've just done a placeholder just so i can import this from student so i'm going to say from enroll import and roll like that now we're going to do the same thing we did previously we're going to say if not is instance and rule enroll and this will have to have our two l's here then what we'll do is we'll simply raise an error like that and we'll say in valid in rule right and that's as easy as that is we can add that dot dot dot just stay consistent again it doesn't really matter and then what we'll do is say self dot enrolled dot append enroll like that so there we go we now have a way to add enrollments to a student and let's go back to student and check what else we need to do so we've already handled international we've handled the association between enroll and now we need is parttime and probation so i remember that i believe is parttime is if you're taking less than three classes you're considered parttime i forget exactly what the document said but we're just going to assume that for now and preprobation i believe it was if your grade point average is less than 65 then you're on probation so we don't necessarily need to implement these yet but we can say is define um what is is on probation like that this can be a self and for now we're just going to return false and we'll come back later and implement these methods just once we've coded out the enroll class so then we'll know how grades are handled and this will make more sense and then we're going to define is oops is underscore part underscore time like that self and now we're just going to return false as well and again we'll come back and implement this later once we have a better idea of how the enroll class actually works although now that i'm thinking about it what we can do is just say return the len of self dot enrolled is less than sorry is part time it's less than or equal to three so what this is saying is that if you have less than uh or equal to three classes so three two or one classes or zero i guess then you are considered a parttime student if this number is greater than this of course you're not going to be a parttime student so that's the student class now we're gonna go ahead and do the professor class so we're gonna go ahead and import person as well so we're going to say from person import person and now we're going to say class professor inherit from person and then we're going to do define underscore underscore init i'm going to go look at the professor class and see what we need here so the only main difference between professor and person is that it has this salary attribute here so let's go ahead and add that and we'll need to handle the association between course and then we'll code out course and enroll we should be done actually programming this system so we're going to say that we need the same stuff as person so need all of that so we'll paste that inside of here and what else do we need we need a salary all right so now we'll do the same thing we did inside of students so we'll say oops not self super dot underscore underscore knit we'll pass all of this stuff in except for salary of course and then what we'll do is we'll say self dot salary equals salary and we've done it the constructor except for the association with course so now we'll just say self dot courses equals a blank list like that now i remember that professor actually had are given a raise if they teach a certain amount of courses now we didn't actually define a method that we have on professor to handle you know do they get a raise or not but what i'm going to do is i'm just going to make a method here that says define check underscore for underscore raise and what this will do is just check to see if the professor deserves arrays based on how many courses that they're teaching so i think it was something like if they teach more than four courses a semester or five courses or whatever it is then they get a twenty thousand dollar raise so all i'm going to do here this is kind of just like mocking how you would really do this because this isn't necessarily precise i'm going to say if the length of self.courses is greater than or equal to 4 then self.salary plus equals 20 000. so this is just going to say okay check for raise so whenever we call this and technically you can call this many different times if you wanted to right then we will add 20 000 to the salary if they teach more than four courses now i'm just going to make another attribute here i'm going to say self.got underscore raise and i'm going to set this equal to false and this is just going to make sure that we can't get this raise multiple times so i'm going to say once we give them the raise self.got oops got underscore raise equals true and then i'm going to add inside of this if statement if the length of self.course is greater than or equal to 4 and self.got raise so and not self.got raise then we'll go ahead and do this so again just to make sure that we can't just spam this and keep raising the professor's salary and have some level of kind of security here on the professor's salary because obviously that's an important thing now next what i'm going to do is i'm going to say define add underscore course so of course you need a way to add a course to this professor's course list so we're gonna say self and then we're gonna say course like that and then we're gonna do the same thing we've done many times before which is means we need to go over here to course and say class course like that and just do a pass so we can import this from inside a professor so now we're going to say from course import course and we're going to check to make sure that this is an instance so we're going to say if not is instance course of course then raise error like that and just tell them in valid course dot dot okay then we'll say self dot courses dot append course like that awesome so with that i believe the professor class should be done so we finished person student professor and address and now we need to do course and enroll now i believe i said i was gonna do course first so we'll do that and let's just look at what's in course so we have name code min max and is canceled now course is associated with professor and with enroll and you need at least one professor for a course to actually be run so when you create a course you need to give it a professor so that means inside of our courses uh what do you call it constructor we're gonna need to have a professor as an argument or as a parameter so let's go ahead and add that let's go define underscore underscore init underscore underscore itself we need a name for the course the code the max the min um what else was in this course i believe max min code name and then professor okay so professor awesome now since professor class is finished we can go ahead and import that at the top so we're going to say from professor import professor like that now we'll do the same thing we've done many times so we'll say self.name equals name self.code equals code self dot max equals max self.min equals min don't worry that these are highlighting this just means that this is a reserved keyword in python min and max uh i'm just going to be overriding them for this class it's not a huge deal although you usually don't want to do this so i could do something like max underscore min underscore just to avoid that so that we don't get those highlights so let's actually do that max min and then we'll say self.professor and usually i just say this equals professor but for now i'm going to say it's a blank list and the reason for that is because we need to check if this professor is one professor if it's a list of professors and if it's valid so again if we go back to our diagram we can see that we have a one to many associated with many which means a professor doesn't necessarily automatically teach a course when it's when a professor object is created but when we create a course object we must have at least one professor teaching that course so we're going to have to do the same thing we did inside of a person here with the address so i'm actually going to copy all of this here i'm just going to change the word address to be professor and that's because it's going to be handling the exact same thing but inside of the the course class so we're just going to say if is instance and i guess i can actually just do a control h here and i'll just say oh how'd it know that professor was what i wanted there wait address will replace address with professor and that should actually be good so let's go replace all so that's done everything except professors so we actually need to add es to this so professors is it professors yes or is it just s i'm just going to do s for now although i don't know if that's correct but that actually should be good so it says if is instance professor professor so this just needs to be a capital then we'll append into the professor's list that professor otherwise if instance professor list for entry in professor if not is instance entry professor with a capital p then raise error invalid professor and then self.professors equals professor uh awesome invalid professor okay so i think that looks good you guys can read through that if you're a little bit confused but again it's doing the exact same thing that i explained when we handled the address inside of person this time just with professor because it has that same lower bound of one up to many association okay so next we need a way to actually add courses to a professor sorry add professors to a course because say we're in the middle of a course maybe the professor changes or maybe we need to add a new professor that's something that could happen so we're gonna say define add underscore professor like that and i believe it's one f and two s's we're gonna say self professor and then inside of here we're gonna say if not is instance professor professor raise error like that and we're just going to raise error invalid professor like that dot dot okay then if that is good we'll say self dot professors dot append professor and we should be good to go so with that i don't know if course is done or not i think we have to add a method or two so we need to add the is canceled method and we actually need an association from course to enroll which i had forgotten so i'm going to go up here and i'm going to say self dot enroll mints like that is equal to a blank list we're going to do a very similar thing that we did with the student class when we were adding enrollments like that to the course so self.enrollments i think that makes sense to call this enrollments because you were enrolled in the course and then on the student side enrolled i think makes sense as well but let's add a way to actually add enrollments to this uh to this course so that's also going to involve first of all implementing enroll so from enroll import enroll and now let's go define add underscore enrollment we're going to take self and enroll and we'll do the same thing we've done before we're going to say if not is instance enroll enroll then raise error invalid enroll and then what we'll do is otherwise we'll say self.enrollments dot append in rule now the only thing we need to consider here is this max and this min so obviously we cannot enroll over the max so we'll have to do another check here that says if so we'll say if i guess the len of enrollment is equal to the max so so we'll say self.max like that then we need to raise an error that simply says cannot enroll course is full dot dot dot just to tell them that hey you know we can't enroll you in this because this course is full and that means that they need to do a check before they go ahead and enroll someone in here and make sure that it is not full so what i'm going to do here i'm going to say now add the other method that we needed so is canceled so we're going to say define is underscore canceled we can call this at any time and self is going to be in here and what we're going to do is simply return the len of self dot enrollment because that tells us how many people are enrolled is greater than or equal to self.min and actually sorry this is going to be less than or equal to so what this is saying is okay you know the course is canceled if we have less enrollments than the minimum amount of enrollments that we need i just got rid of that equal sign because if we're at the min we're not cancelled it's only if we're less than the minimum amount of students so with that i think that course is done again it might be a good idea to add a way to remove professor and remove enrollments but for the purpose of this video i'm not going to add that and the last thing we need to do is actually code out this class for enroll now this one is a very easy class to do this simply has an association between let's have a look at it here a professor or sorry not a professor a course and a student so this enroll class needs to have a student and needs to have a course on it right so he needs to have that associated and it needs to have the date that they were enrolled and the grade that they were um that they were given for that course that the professor that has access to the course will be able to change so the reason that the professor will be able to change the grade for a student is because it has a link to the course let me just make this full screen here so it has an association of the course so we can see what courses it's teaching it can go into the course it can look at all of the enrollments for that course and then for all inside of all those enrollments it can access the grade and it can change the grade for a specific student that's associated with that enrollment so that allows the professor to actually change the grade of a student so i just wanted to make that clear in case anyone's confused on how that would happen let's go class enroll we'll say define a net what we need for enroll is we need a person which is going to be our student and we need a course so same thing here we'll make sure that the student and the course are valid so we're going to have to import those here so we're going to say from course import course no not lowercase oops go back we want the capital and we'll say from student is it here i guess not from student import student so now we'll say if not is instant student student or not is instant of course if we get this typing correctly and in fact what i'm actually going to do is put this on another line just so we can have two custom error messages then what we'll do is the same thing we've done many times we'll say raise error invalid student dot dot dot and then same thing here we'll say raise error in valid course now let's assume that those ones are okay so we our student and our course are fine then we'll say self.student equals student and self.course equals course and we're going to say self.grade equals none because currently it has no grade and then we'll say self.date equals and here i'm going to import date so i'm going to say from actually i think it's datetime from datetime import datetime and i'm going to say datetime.now so that should give us the current time i think that's valid this might be incorrect but i'm pretty sure that's how you get the current time and then what this will do is automatically when a new enrollment happens it will keep track of the time that that enrollment occurred at we'll say the grade is none and then we'll add a method that says define set underscore grade we can go self grade and we can just say self.grade equals grade like that now there's other ways to go about doing this this is just a simple way so i'm going to do that here and this means anyone that can see this enroll class can just look at it and say hey set grade self.grade equals grade or just pass a grade in here and it will automatically set that grade for the student so with that all of our classes are actually finished and that is how you go about translating a uml class diagram to an actual system now of course currently none of this is really you know functioning right none of this is actually working these things nothing's being created we'd have to actually make a program that uses this class uses these classes to test it but the point of this was to show you pretty much how we handle these associations and some common practice in terms of checking the validity of different arguments right so in python a nontyped language we need to do something like this just to make sure that when items are passed in or arguments are passed in they're valid and that we don't have a class that has all these weird things that we we're not expecting right the general idea is we want to crash before we actually start running the program so i want to crash when someone you know creates an invalid person object rather than when the person tries to access something on the person object and it's not the item they were expecting right it just makes it easier to crash earlier on so that someone knows hey i need to make sure i add a valid address and they don't you know go through the whole program with a valid address inside of the person object and can't figure that out until later when it crashes at some random point in time right that's the idea behind that i hope that is kind of making sense and again that's kind of how you go about implementing this now as i said um you know there's many different ways to do this and in fact there's probably a lot of other methods and things that we should be adding to these classes for the purpose of this video i'm not going to do that because i don't want to get super complicated i don't want to go into actually doing a full implementation because again that's going to take a really long time but if you notice any holes or gaps in here please do leave a comment and let's have a conversation in the comments down below hopefully at minimum this video showed you you know the basic idea you know how you get started what you have to do when you make a base class like i've done here how you do the inheritance with student and with professor you know how you add some methods like this and how you should implement them how you can do something like this so we have this uh this class here that has just two uh what is it association student and course so we have self.student equals student self.course equals course and now from the course side if we look at an enrollment we can see what student is involved in that enrollment we can modify their grade and then the student themselves can look at their enrollment and they can see their grade right many different things like that is what i wanted to show so i think with that being said i'm going to end the video here of course any questions please do leave them down below in the comments like the video if you did enjoy subscribe to the channel and i will see you guys in another youtube video