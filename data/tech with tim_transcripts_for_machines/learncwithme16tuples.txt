hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be covering something called tuples now quickly note that some people do pronounce this tuple so the actual thing we're going to look at is a tuple but some people say tuple now i don't know what the correct pronunciation is so i'm just going to call it tuple because that's what i've always called it but anyways with that said let's get into the video and i will talk to you about tuples all right so the first thing we're going to do here is we're actually going to include the tuple package or library or whatever you call this here uh but the reason we need this is because there's some functions that we're going to use they're included in this package and well anyways that's why we need to include it now if you don't include this you'll notice that probably almost all of this will actually still work for you but there may be a few things that work a little bit differently or that don't work so i haven't tested what's actually in this and what's not in this but i'm pretty certain that some of the functions that i use here are included in this package and well that's why you're going to need to include it but you guys feel free to experiment and not use it and see when something breaks if you don't have it anyways let's look at what a tuple is so a topple is really like an array it can hold many different elements in it except those elements do not need to be the same type and it has kind of different way of accessing and changing elements but a tuple is very similar to an array in the sense that you kind of have an ordered collection of elements so let me just create a tuple then you'll see what i mean so i'm going to use the data type tuple notice it's not highlighting that's just because it's not kind of like a vanilla data type like say into char float so on and anyways i'm going to say tuple and then i'm going to put within angle brackets like this the data types that i want to be included in this tuple so if i do something like int string comma char what this is saying is that the first item in my tuple must be an int the second is a string and the third is a char or a character and so you can define as many items as you want you could make it just one item you can make it two items you can make it 3 000 items right it's completely up to you but this is how you define a top list you do the angle brackets then inside the different types of the items you'll have then you put the name of the tuple in this case let me actually just remove the char and i'm just going to call this person all right so i've just initialized kind of an empty tuple i haven't actually given the values that are stored in this tuple but i have said okay you know we're going to have this person tuple and these are the types of it items now if i wanted to initialize this with some values what i could do is put the open and closing closing parentheses sorry then inside of here just type the values that i want for the items of this tuple so i would say something like 20 and then i'll say tim although that needs to be in double quotation marks so the idea here is that we have this person tuple the person it's storing is 20 years old and their name is tim now obviously we don't have a label for what the int and the string are but that's kind of the reason i'm doing the end in the string and filling in these values anyways that is how you make a tuple so if we run this now we should see that we don't get any problems all is good and now let me show you how we can access the different elements in a tuple so any of you that are a little bit clever you probably think that we can just do this person at and then index zero and then that's going to access 20 right or you think we knew person at index 1 and that's going to access tim just like an array now i'll show you what happens when we try to do this let's run this here we get an error there's no match for this operator on this type tuple that is because you cannot do this you cannot access and change elements using this kind of index syntax instead what you need to use is the function called get so you say get you put two angle brackets you put an open parenthesis and a close parenthesis around the tuple and then here you put the index of the item you want to access so for example if i put 0 here and now i run this it gives me the first item which is 20. if i change this to 1 it gives me the second item which is tim so this is how you actually access the different elements in a tuple use get angle bracket index closing angle bracket open parenthesis name of tuple closing parenthesis kind of complicated but once you get used to that syntax it's pretty straightforward to remember so what i'm going to show you now is how we can actually change the elements in a tuple so if i do get and then the index and then whatever the name of the tuple is and then an equal sign after this and let's change it to say billy and then we see out this again you'll see this actually does change the first index in our tuple so we'll change tim to be billy so if we run this tim was first and then billy uh let's just add an end l here so that we're getting some better looking output awesome so tim and then billy so again that's how you access and modify the different elements of a tuple is by using this kind of get syntax now let me just make another few tuples here just to show you some other things that we can do so i can say something like tuple int char bool floats right and then i could say okay let's just call this thing and then we could give it some values so we could say actually you know i'm not going to do it like that let's just declare thing and then i will define the values that i want thing to hold the way i would do that is would say thing is equal to and then here what i actually need to do is i need to use this fancy function which is called make tuple which is going to take in all of the different values to initialize my tuple width so here since i didn't do it in this way i didn't kind of inline initialize the tuple what i need to do is say thing is equal to and then make tuple which is the name of a function and this function will then take the four items that we're going to initialize the tuple with so now i could say something like 23 i could say you know h i can say true and then i could say maybe 24.3 or something for my float and then of course if we decide to c out and we can just get zero of this is thing and then end l let's copy this a few times and we'll get the rest of them so see out one two three and run we see we get 23 h1 and 24.3 so that is indeed working all right so let me get rid of this example up here that's old we've already looked at that one now what i want to show you is what happens if you don't initialize the value of a tuple and you just declare it like we did here so again i apologize because i know i confuse you guys by saying initialize and declare that's just i've gotten so used to just always saying initialize even when you're only declaring something again for the probably 100th time when you write a line like this you are just declaring the variable you are not initializing it because we have not yet given a value to it we've just declared that this variable thing exists and it is of this type we don't initialize it until we do something like we just did where we make the tuple or we actually in line initialize it by putting the values in here anyways hopefully that makes sense but now let's just see what happens if i see out all of the elements and i haven't initialized this tuple when i do this you can see that by default they're all just zero now the char is giving us kind of this weird empty character because that's just the default ver uh sorry default value for char but yeah that's what you're getting when you see out all of these different values and you have not initialized them to anything then of course if you go ahead and initialize them well then you're going to get the correct values so there's a few more ways that you can kind of declare a tuple we also could uh kind of omit doing that instead says equal to and then make tuple like this would be fine as well if we said tuple in charb will float thing is equal to and then we use the make tuple function not really a good reason to do that but you could do that if you want to if i run this now you see that this still works and so as you've seen now on c plus plus there's about 100 different ways to initialize variables to different values all right so that's the basics of tuples now i have a few more i don't want to say advanced but just kind of different or unique things that we can do with them so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert as you guys know algo expert is the best platform to use for preparing for software engineering coding interviews they have a ton of awesome features they have great instructors like myself well you can check them out from the link in the description and use the code tech with tim for a discount on the platform so the first thing that's interesting here that we can do is we can swap the contents of two tuples so what i can do here is make another tuple it has to have the same type but if i say tuple int char bool and float and you know what now that i'm thinking about this it's probably going to be easier for us if we just make a smaller tuple for this example so let's delete that i'm going to say tuple int int is equal to and then we will say well we need a name for the tuple first we'll say t1 that's equal to make underscore tuple and then we'll just pass one two and then we can copy this line to make tuple we'll call this one t2 and then this one will have the value three four and now what i can do is well i can see out get 0 of t1 get 1 of t sorry 1 get 0 of t2 and then get 1 of t2 okay so when i do this we can see that we have the value 1 2 and then 3 4. but now if i use this fancy function which is called swap i can say t1 dot swap t2 and this will now swap the content so notice this is what the output was we're getting one two then three four now we should get it the other way around three four then one two that's exactly what we get because the contents of t1 were swapped with the contents of t2 however look what happens if i try to do this so if i add another value to tuple t2 and i make this three four five let's see what happens when we run this notice we get an error the reason we get an error is because these tuples have different types or different number of elements and therefore we cannot make the swap because they are not the same type of tuple so anyways that is how the swap works we need to make sure that's correct of course we could then swap them again we could say t1.swap t2 and then we're going to get it back to the original order because we just swapped it then we reswapped it of course we could also say t2.swap t1 doesn't matter in which order you do this it will give us the same result and there you go we can see we're getting the same thing so the next thing to show you is something called tie now what tie actually does for us is it will decompose a tuple into its individual elements so when i say decompose really what that means is you're taking some object or some data type that has multiple elements in it and you're breaking those multiple elements up into kind of separate unique variables and so i can really only show you this with an example but we have some tuple here t1 that has two elements so what i'm going to do is say int x comma y so we'll declare an x and y integer and now what i will do is i will say tie and i will tie t1 and or sorry not tie t1 i'm going to tie x y and make that equal to t1 and now what i'm going to do is c out x and cly after i end l so what this function does here is it takes in two variables and then you set it equal to whatever tuple you want to decompose and it will take the elements in that tuple and assign them to the variables so in this case x will be equal to 1 and y will be equal to 2 because well x is the first variable we put here y is the second and we're assigning that to tuple t1 so if i do this now you see that oops we need a semicolon here so let's rerun this you see that we get one two with no problems and if i swap this and i make this y comma x now we're gonna get two one and then after this we can still see out t1 and we'll see that t1 is still perfectly valid so we'll say get zero of and then t1 and then end l and then i guess we can just copy this and we'll do the same thing with get one and then make sure we add our end l here so when i run this you see we get 2 1 and then we get 1 2. again this is working properly this is what the tie function does now of course you need to make sure that the type of the variables you are going to be storing the elements from the tuple in are the same type as the elements in the tuple so if i change this to like char right and then i try to run this we're going to get well actually this worked but not in the way that we thought it was going to work because it was able to convert the end to a char but clearly this is not what we're looking for right we wanted the actual numeric value we didn't want some weird character value and so that's kind of the idea there you just need to make sure the types are matching hopefully you're getting the idea now as you're seeing a bunch of c plus plus code that the types really really matter in a strongly typed language like c plus plus okay so the last thing i have to show you here is what's called tuple concatenation okay so sorry for the abrupt cut there but as i said what i'm going to show you is tuple concatenation so tuple concatenation involves taking two tuples and just combining them together and so i'm going to show you exactly how we can do that the first thing though that we need to do is create two tuples and so i'm going to say tuple and we'll make its type int and char and we'll say this is called t1 and then we can just initialize it this way so we can do maybe 20 and then t and then we can do another tuple this tuple does not have to have the same type i can do tuple maybe char string and then that's t2 and this is hr and sorry the char needs to be in single quotation marks not double quotation marks so we'll make this maybe r and then for the string we can make this hello world exclamation point okay so now what i want to do is take these two tuples and essentially what i want to create is their combination so 20 t r and then hello world except obviously this would have double quotation marks that's what i want to try to create so how do we do that well there is this function and this function is called tuple underscore cat and what it does is concatenate two tuples together so it takes the two tuples you want to combine so t1 and t2 and then it returns to you a new tuple which is the combination and so what i need to do is assign this to a variable so i can do something like tuple and then we can call this maybe t3 is equal to tuple cat now i'm going to stop for one second and i'm going to give you guys a kind of a quiz here although this is pretty hard to answer so if you answer this congratulations but i want you to look at this and try to determine what the error is right now if i run this code right now this is not going to work or if it works it's not going to give us the kind of expected behavior and so just look at this and see if you can figure out what i might need to do to actually make this work the hints i'll give you it has something to do with the different types that we have all right so pause the video if you want to try to do that i'm going to continue now i'm going to run the code and notice we're getting an error it says missing template arguments before t3 so since i defined a tuple i need to define the type of this tuple i can't just say tuple t3 i need to define what's going to be in this tuple and so what is going to be in this tuple well it's the concatenation of these two tuples which means it's going to be int char char string because we're going to have int char and then the char from tuple t2 and then the string from tuple t2 and so i need to define that here with t3 otherwise we get that problem and so now if i do this we can see that all works all is fine and now i'll just see out this so we can see it that it's actually working so if i do get 0 and then t3 and sorry this is in parenthesis t3 and then end l and now let's just print this for all the different items so one two and three if i run this you can see that we're getting exactly what we expected awesome now the thing is this is kind of annoying right like i don't want to have to do this especially if i don't know the types of the two tuples that i'm concatenating and that could actually happen or you can find out the types of them but it's like complicated to do that in some situations so there's this great word in c plus it is called auto and what auto will do is infer the type of a variable based on whatever you initialize it with so it might be a lot of words or kind of confusing jargon but essentially when you put auto it will automatically determine what type this tuple is going to be and it can do that the c plus compiler can do that by looking at the type of these two tuples seeing what this tuple cat returns and determining that oh okay it's going to return to me a tuple that has int char char and string and so if i say auto t3 now what will happen is by default this variable will be of type tuple in charge our string and we don't need to write all of that out so if i run this now we can see that this works just like we would expect because of the auto keyword now i generally recommend staying away from doing type inference like this this is what this is called you're telling the compiler hey figure this type out for me i don't want to figure it out myself the reason i say that is because as soon as you start using these keywords you kind of don't appreciate what the types are that you're actually using and you can run into a lot of bugs in your program if you don't know what certain types are and you're just using auto everywhere so be very careful when you use this in a situation like this it's fine you know the two types of your tuples and you're just saving yourself a few kind of lines of code or a few characters of code that you're writing out this is a useful keyword but again just be careful with it especially when you're learning i would always opt to write out all the types explicitly just to make sure i fully understand exactly what they are so anyways with that said i'm going to leave the video here i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video