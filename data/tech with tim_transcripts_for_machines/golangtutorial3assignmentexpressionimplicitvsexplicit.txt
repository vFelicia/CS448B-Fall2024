hello everybody and welcome back so in this golang tutorial we're gonna talk about explicit versus implicit variable creation slash declaration slash assignment now I know that sounds like a mouthful in a lot of big words I promise you it's not that bad these are just the best ways to really define what I'm trying to say is implicit versus explicit so if we look at this that we've done here in the last video on line six what this would be called or what I would categorize this as an explicit variable declaration now the reason it's explicit is because I have explicitly defined and stated what type this variable should be I've said it should be a you in 16 now we actually don't need to do this when we define variables we can and we should but we don't have to what I can actually do is do this I can say var number equals 260 and what this means is tell going to implicitly define what type this variable should be now the reason we call this implicit is because this variable still has a type in fact this will likely be the same type as it was before but we are telling going to take a guess at what the type is based on what we put on the right side of this equal sign so we're pretty much saying whatever we have on this side make this variable that type that's kind of the basics behind it now if I go ahead and do like 260 here well the type that it would guess would be a string right which means I couldn't add 5 to it anymore that wouldn't work but if I put the number 2 then it would guess the type of int right or you int or whatever it would guess something like that now the only issue with doing this is sometimes you don't want it to implicitly guess the type because it's guess might be wrong right so you make the variable here but maybe later in the program you want to add a crazy large number to it or you want to make it negative or you want to do something like that but since you haven't explicitly defined the type you may not know what type of this variable actually is and when you try to do something to it you might run into issue because the type the golang guest is not the correct type that you actually wanted now in 99.9% of scenarios it's fine to not define the type and I'll show you a bunch of reasons and other ways where we can not define the type and make this law faster but just know that sometimes you want to define it and you should try to figure out when those times are right so this is again what's called implicit because golang just guesses the type and in fact to show you the type I'm gonna do something that I haven't talked about yet but I'm gonna say fmt print F this stands for print formatting I believe and I'm actually gonna put percent capital T comma number now what this does is give me the type of the variable so if I actually go here and go go run tutorial let's see what type that golang guest this variable number actually is okay so a guess is that it is type int so it doesn't go ahead and do the like 64 or 32 it just puts int whenever you put some kind of number here right so if I do like 2000 and we run this again this should give us the same value of int let's have a look it gives us int now if I do like 2000 point nine eight and then I run this so let's go I actually have to save that first and then up arrow run what type do we get we get float 64 so that is kind of the basics on how that works it implicitly just guesses what type it should be now that is one of the other ways to write a variable right is to do something like that now another thing that we can do is actually just type the name of the variable and we can use what's known as the expression assignment operator which is also called the walrus operator which is a colon equal sign and then just put the value that we want so what this is saying is do the same thing we did before just omit the VAR keyword so we have this number that's what we want to name our variable and let's assign it equal to in this case let's put 6 like that's the value we're gonna do and let go Leng guess what type this is that's what we're saying so if I save this and I run it again we should see that this is type int let's have a look there we go we get type int and that works so this is the fastest easiest way to declare variables is to type variable name equal and then whatever variable or whatever data you want to store but just note that I cannot do something like this now right I cannot make number equal to STR of a type string and notice we're even getting the error here because it cannot use string as type int in assignment that's the basics behind this now same goes like this if I do hello now if I save this works fine but if I change number down here to be five this is not okay because again we cannot assign the value 5 because this variable type is string in fact this expression here is the exact same as saying var number string equals hello it's just a shortcut and we're getting a squiggly line here just because we cannot define the same variable again so once I make it a string I cannot redefine it and recreate that variable which means doing something like num number colon equals 5 here is not allowed because we already instantiated we already created that variable so that is the difference between implicit and explicit that that's the basics behind it now if we look at % T of this let's just have a look like that go run and string so that is pretty much the difference that's what I want to illustrate but to you with those variables so you do num colon equals something like that now an interesting thing to look at is actually what happens when we create a variable but we don't give it a value that's actually interesting so let's go back to fmt to print line so FM t to print Ln like that and actually let's define a few boolean variables and stuff like that and see what they are so number colon equals true this is fine this is a boolean type number colon equals false this is a boolean type notice that if I add a capital F here it doesn't highlight in purple which means this is nothing we don't understand what false with a capital F means and I'm trying to think of anything else I could show you here with some different types so actually let me show you what default types are so if I create a variable and let's call it number and let's make it you ain't 64 okay so type I want to make it now if I print out the value of number what do you think we're gonna get because I haven't assigned it anything right I've just said we have this variable it's this type but I haven't given it a value so what value do I actually get well that's a good question Tim let's look and we get the value zero so actually by default when we do something like this all of these types have a default value and this number will be set to that default value until it changes so now let's look at another example if I say var and I'm gonna call bool is actually a type of boolean like that uh let's call it BL and then cuz that's the type sorry so the type is bool not boolean my apologies so bar BL bool and now I go ahead and I just print out BL what do you think that default type is gonna be now remember boolean is true or false but what do you think the default types gonna be for that is it gonna be something is gonna be undefined well let's look the default type is false so pretty much if you wanted to determine the default type so you just do this print out the value and you'll see it but I just wanted you to realize that all of these types have a default value that will be assigned to the variable if you don't actually give it the value so obviously it now if I go down here and say BL equals true like that then BL will be equal to true so I can I can run this and we'll see that but if I didn't like before then it was equal to false so that's the idea um so that's pretty much been this video there's not much more to talk about I just really wanted to go over implicit versus explicit the difference and then show you some other things with default types and just more nuances with variables if you guys enjoyed make sure you leave a like subscribe and I will see you in the next one