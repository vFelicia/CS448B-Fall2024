all right so let's talk about arrays most people are familiar with arrays but they don't actually know how they work on a deeper level and that's something that you really need to understand especially going into computer science background when you're gonna be picking different structures on how you can run something very quickly so we're rays let's talk about arrays well the first thing that most people notice when they look at arrays are the fact that they have a fixed size now typically this is seen as a massive disadvantage and inconvenience but there's a reason they have that and we're gonna talk about that in a second but essentially this fixed size means that when you create an array you need to pick before even starting the problem or using the array how big your array is gonna be now if you don't know this answer and you don't know how big it's gonna be how do you decide well that's typically when you might use a different structure but anyways that's something to note that you have to pick how big it's gonna be before you even you know create the array now the next thing with this fixed size is that if you you know say you create an array that's size 10 and you now want to add an 11th item to it well you can't do that because there's no more room in the array so it can be filled up and another thing with this fixed size is that say you create an array and maybe you're like you know what I don't know how big I want this array to be but I'm gonna make it size 10,000 so that it's just massive enough that I don't have to worry about it well if you do that that's another really big disadvantage because what you've actually essentially done here is you've put a little slot of memory here and I'm just drawing like mock computer memory and you've said I'm gonna make sure that I have ten thousand spaces for items in my computer memory which means that you're actually locking up a ton of memory and this is known as a memory leak by creating such a massive array that you're not actually gonna use so when you only have a few items in a really large array that again is another disadvantage of an array because now you're using all of this space in memory that could have been used for something else now in modern day computing with people having sixty and 32 gigabytes of RAM in their machine that's not really a huge issue but still something to think about when using an array alright so now we've talked about a few disadvantages of it what's one of the advantages of an array well one of the advantages is the fact that you can index items now a lot of people take this for granted but we know that we're using a we can use something called indexes and we can look up any item in our array by simply knowing where it is and that position is being held in our computer memory because of this fixed size now when we look up an item this actually happens in what's known as constant time which is very fast as fast as you can do something in computing so because we have this fixed size in our memory let's say we have an array of size 5 so 1 2 3 4 5 5 squares and maybe these are items here like that now we know that the indexes go from 0 all the way up and if I want to look up any item all I have to know is where it is so like index 3 and I can grab that immediately as opposed to using something like a list that takes a lot longer to do that that's something to remember that indexing items in getting any random item takes oh one constant time now what about inserting deleting and removing items well let's look at how that works because it's not quite as fast now because of this fixed size in our memory if we want to insert an item this is actually quite computationally heavy let's say we have this array and we want to insert I don't know item 5 in between 7 & 9 well to do this we actually need to shift every single item in our array past this point over and we might even have to remove the last element to make room for this new inserted array so when we do that it looks something like this we have the box 7 which is index 0 we now squish in our new index 5 sorry new item 5 which is index 1 and now all of these indexes need to be incremented by one and shifted over so 9 needs to go where 10 is 10 needs to go where 11 is and 11 needs to go where 12 is and 12 is well lost in emptiness it's gone forever right and that's what happens when we insert an item at least into a full array so that takes what's known as oh and time which is a long amount of time in computing based on how big the list is or how big the array is it's gonna continually take longer and longer to insert an item especially if that item is at the beginning of our list so once we answer that item that was a horrible box I'll redraw that one we have nine we have ten and we have eleven but these are now moved to new indexes so two three and four now let's look at the example of removing an item and this is the exact same problem we've ran into before let's say we want to remove item 10 we want to just get rid of it well to do that we now need to shift all the items after item 10 down by one so we can rewrite this entire array but we need to now switch forward to be index 3 and replace the value of item 10 so now we have an array that ends up looking like this 7 5 9 11 and then an empty squared that has no value in it and what we've done here you've set 0 1 2 3 this is still index 4 but now we could call this null because we've just removed that last item from 11 so that is what happens when you're inserting and removing items so quick recap here of everything I've kind of covered arrays have a fixed size you need to decide how big you want your array to be before you start even creating and working on the problem if you make your array too big then you're gonna have a ton of room in memory that's just being wasted and that's a memory leak if you need to insert remove items that's gonna take you oh and time which is a long time for at least this structure to remove and add items and the only really advantage of using an array and when you should use it is if you're looking to randomly access items because that happens in oh one time which is faster than almost any other time that we can find now arrays do have their use especially if you're just looking for you know like a small quick thing to implement but you should definitely consider using something like a linked list or a doubly linked list if you're gonna be removing and adding items from the front and back of the array quite often even just inserting randomly is gonna be faster in some of those other structures because of the way that they're set up so just something to consider I hope you guys now know how quickly a razor on and kind of how they work in the computer's memory it's definitely an important thing to understand so if you guys learned something please make sure you hit a like and subscribe to the channel and with that being said I will see you guys and