foreign python function explained in part one I shared with you about 30 functions in this part I'm going to share with you the rest of them I'm going to throw the definition up on this screen I'm going to give you a quick example of how each function works and by the end of this you will know some new python functions and I guarantee you that you will learn something with that said if you haven't checked out part one I will leave that on the screen I will also put it in the description and make sure you check out programmingexpert.io that's my programming course if you want to get better at coding Master python learn go learn about software engineering tools and software design it really is one of the best places to become a software engineer with that said let's dive into the video alright so let's dive in here with the first function which is Hash now hashing is used specifically for dictionaries and comparing dictionary keys so whenever you pass a key to a dictionary or you try to access an object you're going to Hash whatever that key is and then compare that with any hashes that currently exist in the dictionary if there's a match then you're going to get the value returned by that hash otherwise you're not right you're going to get a key error anyways I can show you how it works here though we have a random string and we just have a tuple which is a hashable object and if I run this you see we get kind of random strings here random numbers which are the hash of these values now one thing to note here is that you can only hash things that are mutable so I cannot Hash a list like this it just doesn't work right I cannot Hash a list now can I Hash a set let's try this so one two and I cannot hash set but I can hash a tuple so if you ever need some kind of pairing to be used in a dictionary then you're going to use a tuple rather than a list or a set or something like that because a tuple is immutable and hence we can hash it alright so the next function that I have here is len now this stands for length you can use this on any iterable object you can see that we can get the Elena of a list we can get the Len of a string of a dictionary or of a set now we can do this for a few other types as well and we we can also Implement our own Len Dunder method on any of our custom objects so what happens when you actually use this Len function is it calls the Len Dunder method and whatever's returned from that method is what you get when calling lens so in this case we'll get five when we print this out for C so if I run this you can see we get five and then of course the appropriate lengths for the other objects moving on we have list now this is really just the Constructor for the list data type in Python it allows us to convert something to a list now to convert something to a list we need an iterable object so something like a dictionary a set a string a tuple and we simply pass that object to the list Constructor now if we're converting a dictionary to a list that's going to give us all of the keys so we'll give us one two and three not the strings but the keys if we're doing a set is just going to give us all of the unique objects in the set if we're doing a string then we're going to get every single individual character if we're doing a tuple then we're going to get each element that's in this huffle so if I run this you see we get one two three one two three four we get every single character character in our string including the space and then we get all the elements in our Tuple now it's worth noting here that you cannot be certain that your elements are going to be the in the order in which you have them in your dictionary or your set so imagine you have a very large dictionary like we're not just writing out all the values here you're not necessarily going to get sorted values or the values in the order in which you inserted them in the dictionary it could be in potentially a random order alright so moving on we have locals now locals is going to give you information about all of the local variables that you have access to here in the file so if I run this code here you can see that I get this big dictionary containing all of the different variables as well as their value so we have the name of this file which is main we have a few other things that we don't really need to look at and then you can see here that I've printed out like the location of the file so you can see it's on my users Tim desktop every python function part two and then locals.pi now I've just accessed that from the dictionary returned by locals but I also could just use the special name here in Python which is underscore underscore file underscore score underscore alright so moving on we have the map function now the map function allows us to map all of the values in an iterable sequence using a function so what I can do is create a sequence like this I can use my map function I pass a function here now I'm passing an anonymous function but you can pass an actual function if you wanted to and if you were going to pass a function you defined you would just pass the name of the function you would not call the function by putting parentheses so I'm passing a function here which takes one argument which is X and then it's going to raise that to the exponent 2. then I'm going to pass by sequence what's going to happen is each element from my sequence will be passed to this function and get added into a new map object and then what we can do is convert that map object to a list sorry and now we'll get the squares of every single element from our sequence now you can do the same thing here with a dictionary so I've created kind of a more advanced example I guess we have a function what this function does is it takes items which is this array or this list at whatever key is passed to the phone function and then it multiplies it by the key now in this case we're going to have string multiplication and you'll see what kind of happens in this example so if I run this we get all of the squares from 1 to 10 and then we get a BBB and then four C's now the reason we get that result down here is because when you iterate over a dictionary you're going to get every single key that's what's going to be passed to your map function so we pass the key we get the value associated with the key and then we multiply that by the key since the key is a string that's then going to give a string multiplication and that's why we get four C's Three B's and one a moving on we have the max function this allows us to get the maximum value out of an iterable sequence or of multiple arguments there's different ways you can call this first of all we can pass like a list and this is just going to give us the maximum value in this list we can also pass numbers or arguments individually so I've done that here we can do the same with strings now when we're comparing strings we're going to be looking at the ASCII value of each character starting at the first character so we'd start by comparing each string using the first character if two strings have the same first character then we will look at the second character and use the ASCII value of that character next we have just passing multiple iterable sequences here now whenever you pass multiple values so like multiple parameters to this function they need to be the same type so in this case I'm passing three lists and what it's going to do to compare the list is actually use the first element of these lists so it will have this being the maximum element because this list has the greatest first element in it so just like comparing the strings it works the same for a list we can also use this on like a custom type so I have a custom type here and I can pass the key function or the key parameter sorry to my map function and now we're going to be using this to compare so we'll pass every single value to this key function and then whatever the result of that key function is we'll use to pick the largest value so let me run this and notice we get 34 9 yes we get 2 1 as I said and then we get a custom object if I were to print that out you would see that we would get C3 because the value returned by C3 is the largest alright so the next function is a member review this is a little bit complicated but you can use this on bytes types and a few other types while here in Python to kind of dig into the representation of this object so I have a memory view of my variable X which is a byte type that's what the b stands for here and I can look at for example the first index which would correspond with B now notice that when I print this out the first value I get is 98 so it's actually stored in memory for the character B is 98 and 98 is the ASCII representation of this character so if I then convert that ASCII representation to a character notice I get B and so I'm looking at this character here at index one or position one if I try to print out a slice of the memory I can do this and I'm going to get a memory view object or what I can do is convert this slice to a bytes type and now I'm going to get BCD right so if I'm going from one to four that would be here so I'm getting BCD when I actually convert that to bytes if I don't convert to bytes and of course I get the memory representation of that bytes object all right moving on we have the Min function now this is identical to the max function just the minimum value I don't really need to go through this note that you can use the keyword here as well and no pun intended but you can use key as a keyword and then that allows you to select the minimum based on the return value of this function now next we're talking about the next function now this is similar to the annex function that we saw in part one except this is for regular iterators not asynchronous iterators what this will do is give you the next value in an iterable sequence assuming that whatever you're calling this on is an iterator so I have my custom iterator object here notice that I Implement my inner method as well as my next method and now what I can do is create an enter or iterator sorry from my custom object so I create an iterator and then I can call next on it and I will get the next value in the iterable sequence and I can do the same thing using like a builtin object right so if I have a list I can actually get an iterator for this list and then I can call next on that list iterator and get the next value so let me show you this we have one two three ABC again very similar to the annex function just for regular iterators not asynchronous iterators alright so moving on we have the object function this is going to create an empty object for you if you didn't know every single class in Python by default inherits from object so it has some prebuilt functionality it's not super useful but I'll run the code and show you that we can print out an object of type object and we can view all of the kind of builtin Behavior default behavior for this type moving on we have the oct function which stands for octal it's going to give us the base 8 representation of a base 10 number so if I print these out you can see that that's what we're getting really you want to be looking at the part after the zero o and notice that you get a negative zero o whenever you have a negative octal value don't need to go through this too much more but this gives you the octal value alright the next function I have for you is open now what this does is open a new file now I've put all of the different modes so you can use when opening a file here I'm not going to go through them feel free to pause the video and read them if you want but let's look at this example down here so I import the Json module just to show you how we can kind of save Json data anyways what I can do is use this open object to open a file in read mode or in write mode or whatever the other modes are so you put the name of the file and then the mode you want to open it in in this case lend dot Pi is a file that does exist then if I wanted to read all of the lines I can use the file object returned by open to say f dot read lines this will give me a list of all of the lines that exist I can print those out and then I can close the file object now the better approach to do this is to use this width which really is going to give you a context manager when you're kind of using this open function so you say with open as F lines equals F dot read lines and then print lines and now you don't need to manually close the file because as soon as you escape this with Block it's automatically going to close the file for you continuing I just wanted to show you how we can save Json data so I'm saying data is equal to and then some dictionary then I'm going to open a new Json file that doesn't already exist so data.json in W mode which stands for write mode I open this as F and then I can say json.dump and then data which is my dictionary and then into the file F and this will create a new file that has that content so if I run this code here you can see that I'm just printing out the contents of the lender apply file but now if we look here I have this data.json file that I created using the open function moving on we have the pal function now what pal will do is raise a base to an exponent we also have the option to get the modulus of a base raised to an exponent if we want so if we use the pound normally we just pass our base and our exponent and we can get 100 and we can also get 0.01 here if we pass like a negative 2 as the exponent continuing we have Pow with Mod now if you pass a third argument here to the pal function you're going to raise the base to the exponent then modulus it by whatever this is so mod 6 and in this case you can see this is kind of the order of operations we raise 11 to exponent 3 that gives us this value we then mod 6 that's going to give us five so when I print this out I get 100 0.01 and 5. moving on we have the print function now I'm sure many of you know how this works but we can pass multiple arguments here to the print function they do not need to be strings and they will all be printed out separated by a space by default now if you want to override the default separator you can pass this sep keyword so if I use a pipe now hello enrolled will be separated by a pipe there will not be a space alternatively you can use this end keyword you can also use it in combination with sep and now this means at the end so once this print statement is done rather than printing the default which is an escape character so backslash n you're going to be printing this so usually what would happen is okay would be printed on the next line but since now we're not printing this backslash n which forces the terminal to go to the next line you're going to see that this will be printed directly after hello so let's do this and notice we got hello world one hello Pipe World and then hello end and then okay that's because again we didn't have this backslash n now if I manually add the backslash n in here and I print this out now you notice that we move down to the next one alright so moving on we have property now this allows us to protect an attribute by assigning a getter Setter and deleter you can see I have those here then I have my property function and I pass my getter Setter and deleter you do not need to pass a delete function and you do not need to pass this optional uh what do you call this description of the property so now that I've done this whenever I try to access X on my CClass it's going to use the getter function to return the value to me when I try to set using an assignment like this it's going to use the setter function and pass my assigned value to Value inside of this function if I tried to delete same thing it would use my delete method or my delete function alright so that's that now we can also use a newer syntax which is The Decorator syntax so I can decorate a function which is is the name of my property then I can have a Setter deleter and getter and this works the exact same as just using the function plainly like this this is probably the preferred approach right now it's kind of modern python but you can use this property as well so just to show you here when I print out var.x you're going to see that since I haven't assigned a value to X it's going to give me 1 because that's what the getter says when I set X to 10.2 it's going to round that off to be 10 so then when I print it a second time we should just get 10. so we should get 1 10 and then down here we'll get the same thing so if I run this I get 110 and then 110 this is the exact same example I've just used the decorator syntax alright so the next function I have for you is range now range is useful for for Loops or just generating some range that has a start stop and step value you can pass a start and stop you can just pass a stop or you can pass a start stop and step so the basic rules are the first value you pass is going to be your start the second value is a stop if you have two values if you only pass one value this is going to be your stopping point explain what this means in a second if you pass three values this is going to be the start this is going to be the stop this is going to be the step so you would start at one step by two so you go one three five nine and then you would not go to 11 because that is greater than 10. now this stopping value here is exclusive meaning if I put a 10 here I'm going to stop at 9. so I stop as soon as I hit this value and do not include this value in my range now here when we just put 10 this means start at 0 and go to 10 so we're going to have 0 through 9 as our sequence and we when we do something with negative here which is valid we're starting at negative one going to negative 10 stepping by negative 2. so let me print this out and you can see that these are the sequences that we get all right so moving on we have the wrapper function which stands for representation this gives you the internal representation of a python object now the way wrapper works is it looks for this underscore underscore wrapper method if that exists then it will return to you whatever is is returned from that so here I have my pet class I have implemented the rapper Dunder method and now if I run this notice yet pet name equals Billy and pet name equals Sally now the point of this is that this is a debuggable object or debuggable output which makes it easier for me to read than maybe a string representation now a string representation may just say something like my name is Billy or Sally it may be whatever you want to show to the user or kind of a cleaner nicer looking output whereas wrapper is meant to be something that is your internal representation useful for debugging alright so the next function I have is reversed this is simply going to reverse an iterable sequence and give you a reversed iterator now this will give you a new object it will not modify the existing object so I get one two three it's going to give me three two one however it's going to give me this reversed object so if I want to view it then I need to use list now if you're just going to Loop through it that'd be fine because this is an iterator so you can just Loop over the Reversed object return from here but in our case we want to print it out so I'm just converting it to a list so notice I can do this with a list with a tuple with a string with a few other objects but there you go that is how reversed Works alright so the next function I have here is round now round is simply going to round a number for you in this case if you don't pass a second argument it will round to the nearest whole number so we should get 11 here if you do pass a second argument this will be the level of precision so we'll round to the fourth decimal place if you pass 10 same thing to the 10th decimal place so when I print this out notice I get 10 10.2342 and then 0.828 notice that it is not adding a bunch of zeros here uh when we do 10. there is ways to do that but not with the round function alright so moving on we have the set function now this is the Constructor for the set data type it allows you to pass an iterable sequence and it will create a set from that so it's useful if you want to get all of the unique elements in something like a list now one thing to note here is if you try to do something like s is equal to and then you do curly braces you may think this is going to create a new you set because this is an empty set however this is actually going to make a dictionary because both a set and a dictionary use the syntax so if you want to make an empty set you have to do a new set like this that will give you an empty set that you can then add elements into okay so we can do this with our list I just kind of showed a fancy way of initializing a set here pass a few different elements and then I am unpacking the list and putting all those inside of the set and then printing that out so this is another way to initialize a set we can make a new set and then as I was saying notice there's a new dictionary so if I go here we get our set our set and then class set and class dictionary again if you just use the curly braces gives you a dictionary not a set alright next function I have for you is set attribute or set Adder now what this will do is simply set an attribute on an instance of a class so I create my custom instance I say set Adder C and then I'm going to say the attribute name is X notice I'm putting that in a string I'm going to set that to one and if I print C dot X it's going to give me one there we go alright so next function we have here is slice now what slice does is give you a slice object which you can use to access parts of a list I don't actually know why you would use this over just using the standard slice syntax but you'll see here that when I print LST at s it's kind of injecting this as a slice so the first argument here is going to be your start the second is your stop and the last will be your step now just like the range function if you don't include a first argument it's just a stop if you include two then it's your start and your stop and if you include three then it's your start stop and step so when I do one three start at index one go to but do not include index three so I should get four and six when I do one five and two start at index one go to five which is the end of the list but don't include it step by two so I should get four and eight sorry so if I round this notice 4 6 and 4 8 again kind of weird but this gives you a slice that you can kind of inject or use when you're accessing a list or any other iterable object all right moving on we have the sorted function now this is going to return a sorted iterable for you you can use this on lists on strings on dictionaries uh on say nested lists there's all kinds of things you can do so what I've done here is just sorted this by default it's going to sort in ascending order but you can do this in descending now this is going to return a new sequence for you or a new iterable it will not modify the existing object you're calling it on all right uh continuing here we can do this on a dictionary now if we do this on a dictionary by default it's going to use all of the keys so we'll give us a sorted list of the keys and if we want to do this descending then we pass reverse equals true and this will sort in descending order not ascending now I can also pass a key function here and when I do this it's then going to sort every single element that we have based on the key so when I pass something like sum it's going to sum all of the pairs that I have here and then sort by the result of the sum so whatever sum is higher will be I guess at the end because we're sorting in ascending order here okay so let's print this and notice that I get my first list I get my string I get my dictionary keys I get my descending order and then I get my pairs sorted by these alright so next function I have for you here is static method really this is a decorator this allows you to create a static method inside of a Class A static method is one that does not have access to the class or to the instance it's really just like a utility or helper function that kind of belongs with or is associated with a class so notice that I can call this in multiple ways I can use the dot notation on the class name or I can create an instance and then call it directly on the instance when I do this there's no self keyword so I don't have access to the instance or the class because there's no CLS keyword so if I run this I get five and three there you go that is static method alright so moving on I have the string function now the string function will return the string representation of an object useful for converting numbers to Strings or just anything else that you want now one thing to note here is that when you call the print function it's actually actually going to by default call the stringdunder method or the string function on every single object that you pass as an argument so if I pass my list here to print this is the exact same thing as me converting this to a string first and then printing it out so kind of an interesting note but whenever you print something it calls the stringdunder method on that object and then whatever that result is is what it actually prints out so we can convert many different things to Strings we can convert a set to a string we can also convert our own custom object by implementing the stringdunder method so if I run this notice I get the string representation of my list of my integer of my what is this a set and then of my custom object which is something that I've implemented moving on here we have the sum function now this is pretty straightforward but this is going to sum all of the values in an iterable sequence one thing you can do here that's cool with the sum function is pass a start value now when you do this you're going to be adding whatever the start is to the sum so kind of would save you an additional step of doing something like you know five plus all right let's have a look here when I sum this I get 37.3 42.3 even though it's the same list because I add this 5 and then I sum my set which will be all of the unique elements and that gives me 50. next we have the super function this allows us to access attributes or methods from the parent class directly so when I have class parent here and then I inherit from that in my child class and now super is going to reference all of the stuff inside of the parent class if you have multiple inheritance it gets a bit complicated I won't get into that here but super is referencing your parent or parents class so what I can do with my initialization here is I can call the parent Constructor by saying super dot underscore underscore knit underscore underscore and then passing any value that's required to initialize the parent class I also can do something like super dot Funk and when I do that I'm now calling the Funk from the parent class as opposed to the funk that I have inside of my child class so notice here when I call c.funk it will call this when I do call parents it's going to call self.funk which will be this and then Super dot Funk which will be this alright so let's run and notice I got child child and then parent so moving on we have the Tuple function this is going to convert something to a tuple if I do something like convert a list of pairs then it's simply going to replace the list with a tuple and make this an immutable sequence so if I run this notice I get a tuple it does not convert all the objects inside of my list to a tuple just the object itself now if I use this on something like a string then I get all of the individual characters in my Tuple in the order in which they occurred in the string alright so the next function we have is type now type can be used in a very simple sense you just get the type of an object we also can use type though to create our own classes now I know this seems a bit weird I won't get into it too much but I can actually use it in this Advanced kind of use case to create my own class so I pass the class name I pass anything I want to inherit from and then I pass a dictionary containing all of the attributes or functions associated with my class so when I say attribute I am an attribute now it creates an attribute on this class and when I do add one it now creates an add one function because I'm passing a function here so if I do C equals class name now I can use this just like a class I can access the attribute I can call the add function so if I run this I get I'm an attribute N3 and notice I pass 2 it added one and well there you go now if we just use it in the SIM simple sense we get whatever the classes or the type of the object that we're calling it on alright so the next function I have here is Mars now vars is going to give you all of the variables or attributes associated with a specific object or type so in this case I can print out just bars with nothing and when I do that it gives me all of the globally accessible variables which we've already kind of looked at if we do VAR and then list it's going to give us all the attributes associated with this list type and if we call this on our custom class then same thing all of the attributes associated with the custom class so when I run this here notice that we get a bunch of stuff printing out right so we get name doc all this kind of stuff and then on our own custom object we get all of the default uh kind of implemented stuff right I know seems a little bit weird but there you go that is how vars works now moving on to our final function which is zip now what zip allows us to do is actually group multiple iterable objects together into separate tuples or separate pairing now the way this works is you pass whatever iterable objects you want and then it's going to Loop through and essentially take all of the associated indices and put them together in a tuple so let me just show you what I mean if we start here we can see that we have a zip object so it gives us a zip iterable we can also just convert this to a list but notice I have four five five three six one seven two two three one one and those are all of the indexes that associate with each other now we can call this on stuff that is different lengths or different types when we do that it's only going to go up to the length of the smallest object so in this case I only have three elements whereas here I have five so you see that we get H1 E2 and L3 so very useful and you want to group multiple iterable objects together you can also call this with three values or four or as many as you want so if I do this with widths now notice that I get kind of triplets right in a tuple all right so with that said I'm gonna wrap up the video here I hope this was helpful to you and that you learned some new python functions and some new python syntax if you enjoyed make sure you leave a like subscribe to the channel check out programmingexpert.io and I will see you in another YouTube video foreign