hello everybody and welcome to another django and react tutorial video so in this video we're going to be focusing on the room page in the last video we kind of styled the home page and we made it so that we got redirected to the correct room when we you know say rejoined the website later on if even if we had closed the website uh we went to the room that we are currently in so now we need a way to actually leave a room so we're gonna have to set up an endpoint on the server again or in our api that lets us leave a room and then we're just gonna style this actual room page so it looks a little bit nicer and yeah again we have that button so we actually can leave the room all right so i don't think i need to give much more of an introduction than that let's just get started i'm in my room.js component let's go to the top of the file and let's import some things we're going to need to do a little bit of styling so we're going to import grid we're going to import button and we're going to import typography this is going to all be from at material ui core and we can end that with a semicolon all right so let's go to render here i'll leave this stuff in case i want to use that just down there and up here we'll start doing our render so i'm going to set up a grid this is going to be a container we're going to say that the spacing is equal to 1 and then we can end the grid like that oh this is going to be kind of annoying let's just throw this in a comment at the bottom of the file just in case i want to reference this later on okay so now inside of grid there you go that looks nicer let's make two grid items so let's say grid and actually we'll do three grid items or maybe even four if we want to show all of this stuff so we'll say grid item xs equals 12 and then spacing or not spacing sorry align equals center and then end the grid now let's just copy this three times so two three and four great now inside of the first grid item i'm going to make a title i'm going through this quickly just because we've done it a bunch of times but i'm going to say typography we're going to say that the variant is going to be equal to feel free to mess with this but i'm going to make this h4 we'll say that the component then is going to be equal to h4 as well and then we'll end the typography tag now inside of here let's say actually not room code we'll just say code is equal to this dot room code like that and this will have to be inside of our curly braces all right so i'm actually going to copy this because for the next two grid items i'm just going to make them give us the information about votes guests can pause and host actually so three of them and then we'll add a button so we will need one more grid item but anyways paste that in there paste that in there and paste that in there and then let's just take votes so votes will be equal to that let's put that inside of this typography easy enough uh let's take guests can pause and let's put that inside of this one and then let's take host and let's put that inside of the other one now let's just make these a little bit smaller because i don't want all of them to be as large as h4 so let's make these h6 or h5 we can mess with them after and see how they look so h6 h6 and h6 okay give that a save now let's add one more grid item except in this one we're going to make a button so grid item we can remove typography we'll say button we'll say the color is equal to we could make the secondary or primary actually let's have a look at what our other back buttons have been have been before so if we have a look at back uh yeah it's color secondary so i'm actually just going to copy all this and we'll go back to room.js there we go so variant equals contain color is secondary 2 slash and link perfect that's actually exactly what i wanted we do need to import link though we'll do that in a second then we will say button inside of here we'll simply say leave room like that okay so now let's import link so let's say import link from react router hyphen dom perfect and that should be good for the render okay so i can remove this comment now let's actually just give it a quick look and see what this page is looking like all right so refresh and there we go that looks a lot nicer in my opinion we have the code we have votes we have guests can pause and host that is equal to true maybe we would want to make these a little bit smaller maybe we can make those p tags or something but for now this is fine and the styling of this page is going to change as we actually add the stuff related to spotify anyways when i press this it brings us back to the home page and then it automatically brings us here you can kind of see that it's like you know rerendering it because it's going to the home page and the home page is saying oh you're still in a room and then it's bringing us back to this page so of course that's not really what we want so now we need a way to actually leave the room so let's make a method in here and this method is what we're going to call when we press the button so we actually leave the room and in fact that's going to mean that we have to actually remove this redirect from this button which is kind of annoying because i just have that in there but that's fine i guess we'll do that so anyways let's make a new new method here we're just going to call this leave button pressed and like that oops what am i doing here i'm just pressing all kinds of random keys on the keyboard let's bind this so let's go up here and let's say this dot leave button pressed is equal to this dot leave button pressed dot binds and we'll bind it to the this keyword all right so now inside of here we're gonna have to call an end point that will allow us to actually leave the room but before we do that we need to create that endpoint so let's go to our api let's go to views let's make a new class and let's see what we want to call this one so we'll continue in just a second but i need to quickly thank the sponsor of this video and this series which is as you already know algo expert now i'll go expert is a great platform to use to prepare for your software engineering coding interviews they have all kinds of resources like a data structures crash course if you're going for some higher up interviews they also have a systems design course which is really useful and personally i've just watched because i find it interesting to learn about system design and largescale systems with that said if you want to check out algo expert there is a link in the description use the discount code tech with tim for a discount on the platform so logically i think it makes sense just call this leave room so let's say class leave room let's inherit from api view and let's actually make this a post request the reason i'm making this a post request is because we're going to actually be changing information on the server we're going to be removing the information from the room code in our session or we're going to be just removing the fact that we have a room code in this user session so it makes sense to make that a post request because a post usually means you're like updating or adding or doing something on the server changing information anyways we're going to say post we're going to take self request format equals none and then we're going to say if room underscore code is in the self dot request dot session then what we can do is we can say code equals self dot request dot session dot pop room underscore code so what this will do is actually remove room code from the session this is like i promised in the previous videos how you can actually remove information from a user session now that will actually give us access to the code so the reason we're actually going to store the code here because like i said self.request.session.pop will actually give us the code that was in this session the reason i'm going to do that is because i want to check if this user is the host of a room and if they are then we need to delete that room now i actually i guess i don't really need the code to do that i can use the code to do that but i also could just filter the rooms based on their host and see if it's equal to this guy's session key so in fact i'm going to go back on what i said i'm going to remove code like that and i'm just going to say that i guess the host underscore id is equal to self.request.session.session underscore key and let's just make sure that's what we've been using yeah it does look like that's what we've been using and now we're just going to do a query on all of our room objects and see if this user was the host because if the user or if the host of the room leaves then that room needs to be closed right and everyone else really needs to be kind of kicked out of that room uh which is another thing that we'll have to deal with later but for now we can just deal with this so we'll say room underscore results equals and then i guess we're just going to go with room dot objects dot filter and then we'll filter by host equal to host underscore id like that all right we'll say if room results or i guess if the len of room results is greater than zero then room is equal to room results at index zero room dot delete this will just simply delete the room and yeah that's really all we needed to do all right so here we are removing the code from the user session we're checking if they're hosting a room if they are we will delete that room and then at the very end of this we'll simply return a response and say response message and then just success like that i mean we can put whatever we want here i'll just go with that then status equals status dot http underscore 200 underscore okay now it doesn't really matter if we call this and the user's not in the room if they're not we'll just still say hey you know this was fine you know technically we removed your room code from the session even though you didn't really have one so if you wanted to get all fancy you could check if or you could send a different response sorry if the user was not actually already in a room but it doesn't really matter if we do that or not anyways let's go to urls now let's import leave what the heck okay let's import leave room like that and now we'll say path and inside of here we'll just make this leave hyphen room and then of course it's going to be leave room dot as underscore view all right so now that we have that all we have to do is actually just call this endpoint when we want the user to leave the room and that should be it so let's actually go to room now inside of here we need to call that endpoint so let's say fetch we're going to fetch slash api slash leave hyphen room we actually need to give this some request options because again this is a post request so at the top here we're going to say const request options like that is going to be equal to i guess a dictionary or an object or whatever you actually call this in javascript and we'll say method it's going to be equal to post and then we're going to say headers and that's going to be equal to or colon content type like that and then will give me the autofill no it's not giving it to me application slash json all right so now we'll simply pass that in so we'll say request options like that and then we'll add our dot then and we can simply take the underscore response and then we actually don't really care what the response is that's why i'm giving it an underscore and what we'll do here is after we have done this so pretty much after we have actually called this endpoint and we've leave or we've left the room we will redirect to go back to the home page so pretty much what i'm trying to say here is that right now or you would have seen previously when we tried to leave the room it automatically redirected us back to the room right because if you go to the home page when we go to the homepage it would have checked hey is this user in the room we are in the room so then it automatically brings us back to the room obviously we don't want that so before we redirect to go back to the room we want to make sure we've actually left the room and that by calling this endpoint right here we're not going to get given the fact that hey this user is still in the room so we're pretty much just waiting until the server updates our information and then once it does we head back to the home page so we don't get redirected back to the same page we were just on so that's why i'm going to go here to button i'm going to remove the two and the component which actually means now i can remove the link import we don't need to use that and here i'm going to actually just use kind of the code way to redirect us so i'm going to say this dot props dot push and then inside of here i'm going to say slash room slash and then the room code or sorry what am i saying slash room i'm just going to redirect actually slash because we just want to redirect back to the home page and well that is denoted by slash so that is actually all we need to do and now this should work if we put this leave button press method as the on click for our button so here let's go and let's say on click is equal to and then this dot leave button pressed all right so that should be all good let's give this a shot and see if it is all working so refresh uh just for good measures here i'll just empty the cache in case we press leave room and nothing is happening interesting okay so let me have a look here and oh wait looks like we have some errors uh this.props.push is not a function ah okay so i've already determined what the error is i think this is supposed to be this dot history uh it might be this.props.history or it might be this dot history uh what is it i think it's this dot props dot history dot push uh now i think i showed this to you before but this is literally just gonna redirect us to whatever page we put here so i think that's the right one let's try this now let's refresh leave room and internal server error ah okay that's annoying let's have a look at the python server and see what's going wrong and another silly mistake on my part this does seem to happen a lot i have room.object.filter this need to be objects.filter and we should be good now so sorry just on line 100 again you guys can look at the code file in the description but this should be objects not object you probably realize that when i made the mistake anyways let's refresh leave room and leave room okay so that worked but now we're getting more errors so let's have a look at this and see what's wrong all right so i'm back after probably about 15 minutes of trying to look through and figure out what the heck was going wrong so i've actually had to make a fair amount of changes they're currently changed but i'll kind of like erase the change and then rewrite it so you can see what happened essentially what was going on and the issue i was kind of running into i usually skip through them but this one's kind of important uh was that what would happen is i would leave a room say on like this tab right and actually leave the room successfully that'd be fine like i could get back to this home page but if i was on another tab and say i was in a room so i'll just simulate the issue like i'm in a room here i refresh it brings me into the room i leave the room from this page but then when i refresh on this page it's refreshing slash room slash and then this code and well since this room no longer exists anymore we got an error so i need a way to figure out if the room doesn't exist and then actually redirect us back to the home page if for some reason we try to go to a room that doesn't exist right that was kind of the main issue uh now another like slight problem that was happening that i managed to fix and i'll discuss that is i would press leave room but then it would just automatically go to the home page and then the home page would redirect me back to the room that no longer existed so there was a lot of stuff going on with that and anyways i i have the solutions to those but i just wanted to go through what those problems were uh so first thing that i'm gonna do actually let me just kind of go back and erase all the fixes i made just so we can go and kind of do them from scratch so i think that's good okay let's go back to home page and okay so i added this method we'll remove it and then i'll just kind of rewrite it so it all makes sense and remove okay so homepage uh the first major change i made is right here so if we go down to around like line 70 again code will be in the description uh before i was rendering the room by just passing component uh and then room right i just i had it looking exactly like this we had room we didn't have all this fancy stuff with render now i already showed you what render does right this will be called when we want to render the component so what i've had to do here is i've had to say render i've made an arrow function that takes in props the props are going to be given by the route or by the root whatever you say that and then what we're going to do is return a room that is given all of these props and is also given a call back now i'll discuss what a callback is but this is essentially a way that the child component can actually modify or yeah i guess modify or affect its parent component so first of all these three dots here what this is called is the spread operator this will just take all of the properties that are passed in as an object and kind of spread them out and just write them in as like you know prop 1 equals prop 1 value prop 2 equals prop 2 value that's kind of what that's doing i'm not going to explain that much more but then i'm adding my own prop here i'm saying leave room callback is equal to and then this dot clear room code which is a method that i defined now the way that this works is i'm actually passing a method to my room object here to my room component so then my room component can call that method and it will modify the parent component because the issue that was occurring was that we weren't actually changing the room code in our parent so we weren't changing room code in the home page and what that meant is when we redirected back to the home page when we went into our render method we would see oh we do have a room code even though that room was just deleted and we would redirect to that room so we need to make sure that this room code gets cleared whenever we leave a room so what we're going to do and that's exactly what i just had here is we're going to write a method i'm just going to call this leave room or actually sorry let's call this clear room code okay and all this will do is set the state so that our room code is no or it's empty so we'll say this dot set state and then inside of here we'll say room code is equal to no so this will just reset our state to make sure that we don't have a room code here and we especially don't have a room code here that is no that no longer exists right that was potentially deleted so room called room code no all right so that's good now we have that now all we need to do is bind that so let's go up here and let's say this dot clear room code is equal to this dot clear room code dot bind and we bind it to this keyword all right so now we go back down here we can see our callback is set that's fine we're passing the method notice that i'm not passing two parentheses with it if i did that it would call the method i don't want to call it i just want to pass it so it can be called later on so that's good so now we go to room and now room has a prop on it or we will have a prop passed in here called leave room callback so now we can call that callback method whenever we leave the room and that way it will modify the home page so that it doesn't store the invalid room code so hopefully this is all making sense i know this is a lot especially for like a fix i should have done this beforehand but you know we run into issues and i think it's important to understand how you can solve them so anyways now we're going to go into get room details and what i'm going to do is make sure that when we get a response we actually get a valid response because what was happening here was we could get a response that was like a 404 right saying hey you know this room doesn't exist and then we would try to render this room even though it didn't exist and well there would be no value for room or sorry not room code there would be no value for votes to skip there would be no value for guests can pause there'd be no value for is host and well we would crash because what we're trying to do is say you know data votes to skip well if we don't have any data like if response.json is empty or we just don't have a votes to skip property then this is going to be undefined so when we try to say undefined.tostring or we just try to show that it crashes our program so what we need to do is make sure that our response actually is okay before we go ahead and do the rest of this and if the response isn't okay then we should redirect the user back to the home page because this room doesn't exist uh so that's pretty much what we're going to do here so we're going to say response we're just going to modify this a bit we're going to put an if statement we're going to say if not response dot ok then what we'll do inside of here is we will pretty much leave this room so we're going to say this dot props dot leave room call back we're going to call that so it clears the state on the home page and we're going to say why does it keep giving me that this dot props dot history dot push and we're going to redirect back to the home page so this way if we're in a room that doesn't exist we just call that callback go back to the home page all is good now if that's not the case we can return response.json like that then this dot then will get called and all will be good uh yeah this will just redirect us so that should be good all right so let's save that i'm also just going to copy these two lines because i'm going to use them here in a second and i'm now going to go to api leave room now notice you probably saw i already did this inside of here we only had this.props.history.push before what i want to do before i push back to that page is i want to call this callback so just add this line in here right above make sure it's above the props.history.push and then we should actually be good and we should have solved our problem so hopefully that's clear again code in the description in case it's not but let's just give this a test and make sure everything's working so i'm going to refresh here i'm going to refresh here you can see we're inside of this room so let's open the inspect on both of them if i leave boom brings me back to the homepage here i'm going to refresh i refresh brings me back to the home page that's what we wanted it's exactly what we wanted to see so now we are good and well that's going to conclude this video so i apologize for the mistake there guys but you know this does happen and we need to learn how to debug so anyways i hope you guys enjoyed if you did make sure to leave a like subscribe and of course i will see you in the next youtube video