hello everybody and welcome to another youtube video so in today's video i'm going to be discussing micro services and specifically the micro service architecture now not only will i explain to you what this is what is a micro service what is a micro service architecture but i will explain to you how you can actually implement these properly and effectively and some key points that you want to think about as you go about building out micro services for whatever program application or system it is that you are building now one thing i do need to note here is that i am absolutely no expert when it comes to micro services and that is why for this video i have teamed up with a company called blazedpath not only are they the sponsor of this video but they've helped me come up with a lot of the content i'm going to share with you right now so let's quickly have a word from them because they are actually a company that helps you implement microservices and scale your applications this video is sponsored by blaze path blazed path is a proven low code platform that can help you build applications with ease you can start with a simple application and the platform integrates all of the tools you need to grow scale and turn it into a big enterprise grade project inside blazepath you design build and deploy distributed microservices in the cloud with the help of a lot of integrated tools standard technologies embedded security consistency and integrity validations your team can be hyper productive and get the job done 10 times faster than with traditional development the best part of blazepath is that there are no vendor lockins and it produces human readable code that means that you can deploy your application anywhere you want and there's nothing that keeps your project captive in the platform blazedpath lets you manage the endtoend lifecycle of your project microservices it handles security scalability logging apis message queues and cache blazedpath handles the continuous delivery of microservices features considering all of these and more critical aspects of distributed architectures that we will touch on in this video you can try blazepath for free with the link down in the description create your free account download your local studio and get additional credits using this link the one in the description thanks blazepath for sponsoring this video and now let's dive into it all right so i've said the word microservice about a hundred times so it's probably important that i define that so let's go ahead and do that now so specifically i'll define what a microservice architecture is and then that will kind of explain to you the rest of it so the micro service architecture is concerned with looking at a large system and splitting that system into a ton of small independent components that are loosely coupled and not dependent on each other now they communicate with each other traditionally using a lightweight communication protocol that is not associated with a specific programming language so when i say that part what i'm talking about is using a protocol like http or json or rest apis something that it doesn't matter what programming language you're using you can communicate with these different micro services so that is why they are called micro services because there's a ton of very very very small services that make up one large system as a whole and usually to group these services together you would use something like an api that's capable of kind of you know combining these services and just making them more easily available rather than having you know 500 different services you need to look at or manage or something like that anyways the advantage of the microservice architecture is that scaling your application is much much easier development is usually simpler and just having independent components makes your life easier now i'll give you an example of what happens when you have a very large system that is not split into smaller components so let's imagine we're building like an online shopping platform now we take everything related to this online shopping platform you know the transactions actually purchasing something the inventory system the recommendation system the user's profile everything there the vendors all of that stuff and we throw that into one application one kind of source code block we put that on one server whatever now you can obviously imagine that different parts of these systems are going to have different performance requirements maybe your transaction parts actually buying something is is very easy that doesn't require a lot of resources maybe that doesn't have a ton of requests being sent to it whatever then maybe your machine learning recommendation model that needs a ton of different resources to work properly well now if you want to make your system faster or more performant or scalable you have to just provide more resources to this one thing you don't have options you can't just give more resources to your machine learning model you can't just give more resources to the inventory system all you have the option to do is give more resources to the one system as a whole and that makes it very very difficult to scale because it's hard to distribute those resources evenly between what actually needs them now on the same kind of note here same kind of thought it's very difficult to go and modify anything in this system if you want to go and change something there's a good chance that since everything's so deeply kind of wound together that your change here is going to affect all of the different parts of the system it's really easy to break something and if you want to be able to modify something usually you need an experienced engineer who's worked in this code base before to actually know what you can and cannot do and where you would even look to go and change a specific part of the system so hopefully this is kind of illustrating to you why it's usually a better idea to have your system split into small components that kind of fewer people are managing rather than having this large code base that just has a bunch of engineers that are trying to work on the exact same thing so that's kind of the advantage of microservices and what i'm going to do is give you a real world example here of a company that transitioned to microservices because of this reason so the reason i'm going to give you here is netflix so netflix obviously very large company has to deal with scalability issues all the time right we saw this in the pandemic they had what is it way too much demand and so you can only stream video in like 480p or something for a few days at least here in canada that that happened to us so back in 2003 2004 when netflix was i guess still a large company but a bit smaller uh they did not have their system in a bunch of different micro services they had maybe a few different components but everything was deeply wound together it was this very large system and they still had a ton of developers that were working on this and so that meant every time they wanted to do something add something delete something it was a huge hassle they're looking through millions of lines of code and it was just really difficult to do something without potentially breaking another part of the system and what happened was at one point in time they had three days of complete outage due to just too much demand and they weren't able to scale their system because of the fact that they didn't have these things kind of split into different separate components micro services so what they had to do was rewrite the entire code base pretty much and implement a micro service architecture so they could handle the demand that they were having and what they ended up doing was having very small micro services that were handled by small teams of developers maybe you know eight to ten people which is actually proven to be like the most effective uh team size something around the eight to ten people mark because those people can understand the code in the product they're working on very very well and then they can obviously make changes a lot faster than if they had to understand a super massive large code so that's just giving you an example there a lot of other large companies have done this as well uber facebook amazon you name them any of these tech giants one of the reasons they're so successful is because they can scale everything up or down based on the volume that they have and they can handle billions upon billions of users every day based on the architecture that they've implemented so a lot of companies will start out by not implementing a micro service architecture then realize that hey i can't scale this application to the level i need it to be at and then have to rewrite a lot of things and implement the micro service architecture to kind of handle all of the flaws that i stated with having this just kind of large code base where everything is deeply deeply connected together so hopefully that gave you an idea of what microservices are and kind of the advantage of this infrastructure so what i'm actually going to do now is explain to you some of the things you need to think about when you are trying to implement a micro service architecture because i'm making it sound relatively simple just split everything into these individual components but how do these components connect to each other how do they communicate with each other how is data going to be consistent across how is security enforced how do you actually go about scaling these things and making sure you have good performance that's kind of what i'm going to briefly talk about now so let's go ahead and get into that part of the video so the first thing you need to think about when you're implementing a microservice architecture is dependencies so the whole point of the microservice architecture is to have a bunch of independent components that can be hosted on their own can be deployed on their own and that are not highly dependent on the rest of the system however to have a system that works your components do need to work together and so the way in which your components communicate with each other is extremely extremely important and you really need to think about your communication protocol as you're building out microservices to ensure that your individual microservices are not highly dependent or linked to each other if you have a bunch of microservices but all of them rely on each other all of them cannot be hosted independently a change in one microservice is affecting the other one heavily you've pretty much implemented the same problem you had before when you didn't have microservices but now you just have a bunch of individual components that are kind of split up but still highly reliant on each other so you want to make sure you avoid you know deep dependencies between your micro services and the way you do that is by thinking about the way in which these services communicate with each other and that's why at the beginning of the video when i was explaining what microservices are i said you want to make sure you have a lightweight communication protocol something like json uh something like rest apis something like message streams maybe you have publish and subscribe patterns whatever it is something like that that's relatively easy to keep consistent across most of your different uh microservices and where a change in communication between the microservices has relatively you know minor effects on other services obviously you're going to have these services they're going to be communicating with each other and well if you change one it will have some slight effects on the other one but you want to minimize what that is and so you really have to think about the way in which you communicate and that's kind of what this first section is about again i'm not an absolute expert on this this stuff takes a lot of experience time and you know research to kind of figure out but that's one thing to think about is how these different services are dependent on each other so the next thing you need to think about as you are implementing the micro service architecture is consistency specifically data consistency so when you have a ton of small independent services chances are they're going to need to use the same data and oftentimes they're going to be storing copies of the same data now in one micro service though you may modify the data so how do you make sure that the data is going to be consistent across all of the micro services and you're not going to have conflicts between two of these different services where they have two different pieces of data and you don't know which piece of data is correct well i can't really give you the exact answer to this question because it's highly dependent on what exactly you are doing but there's a lot of design patterns and kind of architectural things that you can think about and implement to make sure this is the case now to give you a real world example of where this actually becomes a problem think about youtube oftentimes you guys go and refresh my video and the view count you see is not the actual view count of this video and that is because youtube has probably hundreds of thousands of servers running constantly picking up and counting all of these views and it's actually a very very advanced algorithm they use to determine what the correct number of views are but on my back end here on youtube i see a different view count than you guys see and that is an example of one of the problems with microservices is data consistency and you have to make sure you're thinking about this as you're implementing it because obviously that's could be a huge huge problem especially if you're talking about you know maybe different passwords or authentication and stuff that's very very sensitive data right anyways that's what i want to talk about for this section now let's move on to the next one so the next thing you need to think about as you're implementing this micro service architecture is performance now of course one of the core advantages of this architecture is that if anything is lagging behind as being slow you can go and individually scale up that component but how do you know which component is the slowest and why does it actually matter to really kind of analyze your system and figure out what compute power you need where well your system is going to perform at the speed of the slowest component right kind of that famous metaphor or quote or whatever it is the chain is only as strong as its weakest link same thing applies here to software development if the rest of your system is blazing fast but you have one part that's really really slow well your system is going to be slow and so you need to make sure that you're able to analyze and figure out which parts of your system need more resources and are more performant heavy and then obviously kind of take care of that and scale the system up accordingly so just something to consider the performance of your system and making sure that each of your components are performing at the level they need to be so that the whole system as a whole is not being bogged down by one individual component all right so the next thing to consider as you are implementing this architecture is scalability now of course one of the main reasons you would have gone with this architecture is because you want to be able to scale your system relatively easily but you still need to have a plan and understand how you're actually going to scale it and you need to design your system with that in mind such that you are able to scale it vertically or horizontally now there's two kind of common ways of scaling the vertical way simply means kind of making your server or your deployment platform sorry more powerful so maybe you have a server with two cpus and you add two more and you give it four cpus and boom you've scaled it vertically now it has more power but you also can scale horizontally where rather than just making your server more powerful maybe you add more servers right maybe you have five instances of the same kind of api whereas you could have one that's just super super powerful so you need to kind of understand what is going to be the best way to actually go about scaling your system now again i'm not expert in this i don't claim to have all of the answers but the things that you want to consider as you are designing your system and implementing a microservice architecture all right so the last point i have for you to consider when you are implementing this architecture is security now this is arguably the most important but you have to imagine that your security does become a little bit more complex when you have a ton of different individual components or services you need to make sure that all of these are using the same standardized way of authenticating users that you have some central way of actually authenticating and authorizing your users and distributing tokens and all those kind of things so to conclude here i will quickly kind of summarize what we've talked about the microservice architecture is concerned with splitting things up into individual components that are loosely coupled easy to work on and can be deployed independently of each other this is going to lead you to faster development times just easier development in general you can have small teams working on individual components which is what happens now at pretty much any successful large tech company and the micro service architecture does have a lot of things you need to consider when you build it but it is very advantageous if you can design it in a way such that all of those concerns that i kind of listed can be mitigated and kind of can be handled by what it is that you're doing so with that said i'm going to conclude the video here i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another one