hello everyone and welcome to a brand new tutorial series on data structures now I'm just making this tutorial series because a lot of you guys have been asking for them and what I'm planning to do here is give really quick recaps in summaries of all these different data structures to kind of refresh you and just teach you the underlying concepts I'm not going to be implementing all of these are going into crazy details I'm hoping just to keep these videos short and explain with as much detail as necessary what these structures are and how they work so without further ado let's get started talking about queues now what is a queue well chances are you have probably been in a queue before or heard of a queue now the most basic example of a queue is something like a line so let's say we have three blobs down here and they're waiting in line to go to the cache let's say maybe they're at a store there's one cache and they're waiting to buy some items so like a grocery store or something like that now the way that we know a line works is the first blob in line will be the first person to get served by the cashier and then the second block will be the second the third will be a third and so on until there's no more people left in the line so we have blob number one he is the first one to get served by the cache and then he will be the first one to leave the line so this follows the principle known as FIFO and this is firstin firstout meaning the first person in the queue is the first person out and in this case when we're talking computer science be the first item in the queue is the first item out so we're prioritizing the people or the items or whatever it is that came first and that is all there is to know about a queue now I'm gonna go and talk about all these methods that I have on the left side here and how they're used to manipulate a queue add items remove items but again it's very straightforward so our queue has what's known as a front and a back and when you first come into the queue you come in from the back side now this is the exact same way that a line comes when you enter a line you come in from the back side then you go behind all the other people that are closer to the front and eventually once you get to the end it's your turn and then you get to do whatever it is that you want to do very basic that's what I need to mention there so if we want to add an item to our queue regardless of if it's full or not all we have to do is use one of the methods on this side which is on queue or push now this stands for add an item to the queue now I'm just gonna right push but again these methods mean the same thing it just sometimes they're different names based on what language you're using it the way you're implementing it but I'm gonna push the item one on to our queue so if I do that and I push the item one what happens is one will come in from the back of our queue and it will go to as far as it can so in this case it's gonna go right to the front and we're gonna put one inside of our queue now let's push another item on to a queue and see how that works so just change the color here if I go ahead and push now the item let's say four on to our queue well the exact same thing happens it comes in from the back side and then we see it here as for now let's move on to the next methods DQ or pop now you can probably guess what this does but this is what removes an item from our queue so this won't remove it from the front of our queue so the first item that was in will be the first item to be removed so if I go ahead and use pump so DQ or pop again the same thing what will happen is one will be removed from our queue and passed to a return to wherever we call pop so we said something like x equals pop we're calling pop on our queue what happens is X is actually gonna be given the value of one because that was the item that was at the front of our queue now what actually happens is inside of our queue that item is removed as well so when we call pop one will be removed and now four is the very front of our queue and the next time we call pop we will get four that is all there is to adding and removing items from the queue now sometimes you want to look at the first item in the queue without removing it you actually want to do this quite often so in that case we use the method peek or front again they mean the same thing just whatever one you prefer to write so in this case all right front and if I do front what happens is we will be given the value of four here so 4 will be right there but we're not actually gonna remove it from the queue and that's as simple as as it is to it so 4 will stay in there but will be seen for and would be given for and if I call front again well we're gonna see for one more time because again we didn't remove it from the queue so you can't actually look more than one item back in the queue you would have to pop off items until you get to whatever item that is so that's something to note that you can't access any of the middle or end items of the queue you can only look at the front of the queue and add items to the back of the queue and that is the restriction of it but that's also one of the reasons that we use it now let's just remove these for one second and let's show the last method which is is empty now if you try to remove an item from a queue and that queue is empty you're gonna run into some errors so let's just erase this right now so let's say we have an empty queue and let's just not call pop or front anymore so let's get rid of all this let's say we have an empty queue and we want to pop off the front item of the queue so if we try calling front like this or we call yeah we can try front or we can even try pop we try to do one of those and there's nothing in our cube we're gonna run into an error so we need to first check if our queue is empty using the is empty method so what we typically do is we say if not is empty like that then we can go ahead and do whatever operation we wanted to do so in this case maybe we pop off the front item of the queue or maybe we add another item or whatever it is but we need to check before we try to do either a pop or front operation if the queue is empty otherwise we're gonna run into issues so the last thing here to mention about queues is the time complexity of these operations so this is one of the reasons we use queues and all of these operations here that I've mentioned running what's known as constant times if you're familiar with Big O notation then you know what that means but essentially it doesn't matter how big our queue gets when we're adding removing an item from our queue it will happen as fast as if the queue was empty or if it only had one or two items in it and it's a very important thing to realize and it's one of the reasons we use these queues now depending on how you implement this queue and write the code you may actually inadvertently change this um time complexity but if you write it properly in the way you're supposed to then this should be in constant time which means whenever you're peeking D queueing on queueing pushing popping whatever checking if the cube is empty that'll happen in constant time now the last thing as well to talk about here is that there is another method that sometimes is used is called is full now depending on what language and how you implement this queue you could have a max length on the amount of items in the queue so it is something worth noting that you may want to check if the queue is full before you decide to add another item to it again that only is dependent on certain languages and certain implementations but I figured I'd mention it here at the end so with that being said that has been it for queues if you guys enjoyed and I looking forward to the next video make sure you leave a like and subscribe and I will see you there