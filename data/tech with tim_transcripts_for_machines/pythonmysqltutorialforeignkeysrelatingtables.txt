hey guys and welcome back to the Python MySQL tutorial in today's video what we're going to be doing is talking about foreign keys and relating tables together I'm just gonna draw out a quick example here and then we'll get into the code to make sure that you guys understand why and how this works and how we should kind of design and implement a database system using foreign keys now the whole point of foreign keys is to allow you to reference one table from another now here I have an example where I have a users table and I have a scores table and we'll say that maybe we're designing some kind of game maybe this game has you know a few different scores that we could store a few different stats whatever it is we want to keep all those stats kind of contained in their own table where we have you know like game time played KD maybe game 1 multiplayer whatever it is this is my basic example of the scores table and we want the user table to store information about the user so like the name the username the password maybe the date that it was created whatever information we don't really want to mix these two tables together and have you know the user's tables storing the scores or having the scores tables storing information about the user we kind of need these to be separate entities so how can we check what user has which scores if these tables aren't connected in some way well we need to connect them and that's where we use something called a foreign key now the concept of a foreign key essentially means that one column in this case it's gonna be our user ID column in what's known as the child table is gonna be the same as the column in the parent table so you can see here I have a column called user ID and I have a column here called ID now this user ID column is actually gonna be what's called a foreign key which references this ID column so every time we create a new score what we're gonna do is say ok we need to give some kind of user ID here that's gonna be the same as one of the IDS in the user table and then we can add the score information this way if we know one of the IDS so either the user ID or the user ID here in scores we can reference both tables and the way that we can do that is because we know that that if we have an entry in user ID here there has to be a corresponding entry with the same ID in users so if we ever look at the scores and we see oh you know like user 2 has the highest score for game 1 I want to display their you know use in this table well or in this like column of high scores what I can do is say well since to is in user ID I know there must be a user in the users column or in the users table that has ID too so I come here I look for ID too and I can say Oh their name is Jo this is the user name I can display that kind of information so I'm hoping this makes sense essentially we're just kind of duplicating a column from one table which is gonna be our parent table in this case users inside of our child table with this in this case is scores that has the same value in it now in this case our user ID column is going to be unique in scores so there's only ever gonna be one one entry in scores right and that means that you know this relationship is what we call a onetoone in that every single user in our users table here has one corresponding scores entry in the scores table but there's many cases in which we can have many to many relationships and many to one relationships now I'm gonna do a quick example of that to make sure you guys understand what that means so let's try to erase all of this okay so the next example I'm gonna do here is a many to one relationship which means that our foreign keys don't necessarily need to be unique and you're gonna understand what I mean by that in a second so let's say we're thinking about maybe an application like Facebook or like a blogging application well we might have a table that we call here I'm just gonna make this one a bit smaller maybe we call this post so we have some kind of post maybe you know it's a blog post it's an Instagram photo whatever it is and this post has you know its own unique ID so we'll call that ID it has a user that created it and it has like some content maybe we'll just say this content basically is just some kind of text that's what it is we'll go simple here for this example well we know that a user can have more than one post and in if we have more than one post that means that we have to find a way to relate that back to the user so what I'm gonna do is say you know maybe we have post that our ID 1 2 3 4 5 and maybe all these posts come from user 1 or some of them come from user 1 and some of them come from user 2 so what I'm gonna do is I'm gonna say this user column here is gonna be a foreign key that references the user ID so what I can do is I could say you know maybe if post 1 2 & 3 are from user 1 well in this column this come here all of these IDs are gonna be one because they reference the user that posted it and then here maybe this one is too and the content you know it'll be whatever it's not really important what that means but essentially what this is saying is well in this column here we have many different users that have created a post and for every user we have possibly infinite amount of posts right that's all that that means and then from post we have every time exactly one user that made that post so this is what we call a many to one relationship we say this is 1 and this is star which means that this could be an infinite amount of posts per user but there's only ever one user that makes a post and that's what this relationship means I can't really explain this more in depth that's kind of just how it works but we call this a foreign key it's not a unique foreign key but it just references the user column here so that if we need to you know display information about that user on the post or we need to get that information then we can simply get that by you know just using this ID now say for example we want to get all of the posts that a user has well all we need to do to do that is say ok what is our user ID well that's 1 we know that every post that has the user ID of 1 in our post table here is posted by this user so let's look through this table for all of them that have that ID and then that will give us a list of all of the posts that are by that user and that's kind of the principle and basics of how this work so now let's get into the code example and start actually creating kind of the first example I did with queries alright so now what we're gonna do is actually start writing the queries to create the example that we started off with which was that users and those scores table so we're gonna have that scores table be a foreign key to or not be a foreign key but have a foreign key that references that user table so the first thing we need to do is actually create the user table so whenever we're doing this we need to make sure that we create kind of the parent table first the one that's gonna be referenced by the other table otherwise you know there's no way to reference the table if it doesn't exist yet so we're going to say create table and I'm just storing this in a variable q1 because I want to just store the query so that we have the master and we can look at them and I say create table users we're gonna put our parameters now that we need or whatever our columns I'm gonna say name varchar' 50 and actually for that I'll even put the primary key which will be our ID so I'm gonna say ID int primary key Auto underscore increment like usual and then we'll have name we'll add a password so we'll say pass W varchar' 50 and I mean we could add some other stuff to this if we want but I think for now that's probably fine and yeah we'll leave it at that okay next query so I'm going to say q2 equals create table scores and now this is where it gets a bit tricky so what I'm gonna do in scores is actually make the primary key be a foreign key now this is kind of advanced and you don't have to do this but I want to show you that it's possible so essentially since we know our relationship is onetoone which means for every score there's one entry in the users table and for every user there's one entry in the scores table typically if we've created an entry then what we can actually say is that this ID here that can be our foreign key and it can be the primary key of the scores table because there's only one of them that's fine to do in our second example where I was talking about actually I forget what the example was that I used everything always in the second example we had I guess posts and we had more than one post per user so I couldn't use that as the primary key for that table but since this case we only have one we can do that so what I'm gonna do is say user ID int then what I'm gonna do is make this a primary key and I'm gonna now say and set the foreign key constraint is what this is called so I'm gonna say foreign key I'm gonna put the name of the key in my table so this current table that I want to be the foreign key so user ID references references and now what I'm gonna do is put the name my other table so users and in brackets the name of the column that I want to reference which is ID so that means that the user ID column here is gonna be the same as the ID column from user or whatever users that we have okay the next thing that I need here was game 1 and game 2 so I'll just say int game 1 into game 2 I'm gonna show you something here on how we can actually make a default value for these so since you know when we start we'll probably have a default score of 0 I'm gonna say default zero and default zero which just stands for that's gonna be the default value if we don't decide to set that when we create the the entry in our scores table okay so now that we have that let's like you run these queries so let's say my cursor dot executes q1 and give you the same thing here on q2 and see if these work or we get an error we get an error let's see what this is oh so apparently I've been thinking I'm coding in Java and I cannot put into the for game one so I need to put it afterwards I'm used to defining you know the type I've been doing that recently okay so it is let's try this now and okay so that actually worked I know I got an error here that's just because like you know I created the user table and I tried to create again when I ran this but I think we're actually good now and we have these two tables if we want to do a quick check we can always describe the tables or we can just you know select all from them so let's just say I actually show tables and I will say for X in my cursor print X and see if we have our two tables in here and do we we just have the users table which means I need to execute q2 again my apologies on this guys are just getting kind of confused okay so q2 and now we can do show tables and scores and users okay so we successfully added them in make sure you don't make the same mistake as me and just define the type after you define the reference or the name of that column okay so now that we have that you might have noticed that I have these two lists up here so users and user scores so what I want to do is actually add some users into my users table and then add some scores for them and show you how we can set up this reference and then check and go through them so the first thing that I need to do is well add my users so to do this I'm actually gonna use a for loop and just loop through all of my users but I'm gonna show you that there's another way to do this and what I can actually do is run a query that will insert all these at once and it's called execute many so I can save my cursor dot execute many like this and then in here I can put a query so I can say insert into in this case users will put what we need to insert so we're not going to insert the ID but we'll insert the name the past W and I realize in here I've added an email but I've added some extra values that I forgot to add here so I'll actually just get rid of these and we'll just leave you know the name and what is it like I username will just say that's the password there that's fine so what I'm doing here is just saying you know this is gonna be our username and this is gonna be the user password doesn't really matter we'll do that and then we'll say the values and in here we'll put % s comma % s and then what we're gonna do is just simply pass in this list abusers so what this is gonna do is actually take all of these tuples and it's gonna run the query three times so it's gonna say insert into users and it's gonna insert this one this one and then this one so that's a quick way to do that but what I want to do is actually do this in a for loop and then insert scores at the same time as I insert users so I can show you something else so let's leave this query here we'll call this q3 and we'll just get rid of the brackets here and now what I'm gonna do is I'm going to say for X comma and we'll say user in enumerates users and I'm assuming you guys know how this works but you should understand it in a second I'm gonna say my cursor dot executes q3 comma user now what this is gonna do is the exact same thing that executes many is doing except we're doing it in for loop but what I want to do after I create my user is create add these scores into the score table for that user so these scores correspond with you know this is Tim's score this is Jo score this is Sara's score so if I want to insert them in what I can actually do is I can get the last ID of the user that I inserted here and then from there what I can do is use that idea to insert into the scores table and you guys will see what I mean in a second so I'm gonna say last ID equals my cursor dot last row ID now what this stands for is get the last row ID that was inserted into the table which is actually going to be the ID of the user that we insert it in because it's getting the primary key of whatever the entry is that we just put in so now that I have the primary key what I can do is actually insert a score into my score table so to do this I'm gonna say my cursor dot execute and we'll type the query up here so q4 is going to be equal to insert into scores we're gonna need our ID which we have there earth this is actually user ID my apologies and then we're gonna have game one game two values and then % s % s and % s if I could type correctly which apparently I can't okay so now that we have % s there what I can do is execute q4 and what I'm gonna do here is I'm actually just gonna say and this is a this is kind of weird but you guys should see how this works last comma our last underscore ID comma plus and I'm gonna say user scores so use their underscores scores X now I know this is kind of advanced or some of you might be kind of confused but what this is doing is just simply creating a tupple that looks something like this we have ID and we have game one score and game two score right after each other just we're just adding the tuples together that's what this area is doing and this user underscore scores X is just gonna grab one at a time these scores and insert them in corresponding with the entries that we've added from our users so let's actually run this and then what I'm gonna do after this is say my cursor dog executes and I just want to see some entries from my user table so I'm going to say select from star from users and then we'll say for X in my cursor Brand X okay so assuming I didn't make any errors which I probably did this should work let's run this and we see now that we actually have users in our table so we have user Tim check with Tim and then we have ID Jo Jo one two three and those are our users now let's have a look at our other table which is going to be scores now actually I realize that I forgot to commit this so we'll run this again and we'll actually commit this change because if we don't do that then this isn't gonna save so what we're gonna do now is just you know the same thing we did before except this time we'll commit it and then we'll look at scores so let's run this and now we can see that our scores we have ID for references 45/100 ID five references 3200 and we look at now the users so we look at scores first and then we'll print out users after will see that these IDs should line up now I know this is weird cuz the last IDs were like 1 2 3 4 5 but that's just because I forgot to commit this so that's why things weren't working but you guys will see how this works in a second so so 4x and my cursor print X ok so we have a lot of entries in here so we have 4 5 6 7 8 9 I realize I've added the same entries twice and we can see that 4 aligns with 4 so that's the square for Tim we can see 5 aligns with 5 6 aligns with 6 7 7 and so forth and that is kind of the way that this works so for each of our users we have a corresponding table in scores with a foreign key that references the scores for that user now in the next video what I'm gonna do is have set up a kind of more complex database with a bunch of different relationships I'm gonna show you how we can actually host this on a server and connect to it but for now this is kind of how foreign key works now I know I kind of went through a lot of stuff here there's a lot to look at but the eye essential idea here is just kind of think about how tables should relate together and you know with that post example when we have something that's manytoone well we're gonna make sure that we have a distinct primary key and then a different foreign key which could reference the same user multiple times in the same table so anyways that has kind of been it for how to use foreign keys in my SQL because how many questions don't hesitate to ask them down below with that being said I will see you guys in the next video