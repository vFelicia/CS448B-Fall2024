thank you so unfortunately University professors consistently failed to explain the difference between a class and an object and what that actually means obviously you need to understand this before you can start working in objectoriented programming languages and actually write object oriented programming code so in the next five minutes I'm going to explain this to you let's get it alright so on my screen here I'm just going to write a few variables so I have x equals 1 y equals string now what do we know about these variables well we know that each of these variables have a type right we know data types exist in Python and one is type int and this string here is type Str we have a bunch of other types as well and depending on the value that we use it has a different type now what you need to understand about the type of an object is that is really the class that was used to create the object now it's a bit hidden here in Python because something like one and something like string are built into the language and when I write one I don't have to explicitly say oh I'm going to use the int class to Define this however there is an INT class and there is a Str or string class that exists in Python and anytime you do something like create a new string or create a new int you are using that class to create the object okay so almost anything you see in Python so something like one something like two something like a list something like a function these are all objects and they all have a type the type is the class that was used to create them and even though you don't necessarily see that that's still their type right so we know this is an INT we know this is a string now the class is really a blueprint that defines the functionality that an object has the reason why I can do something like Z is equal to one plus one is because the int class which is the type of these two objects defines that I can add two integers together if it didn't Define that I couldn't add them together same reason I can use subtraction multiplication same reason I can use any operation you see in Python it's because the class which is the type of the object defines that behavior it says I can add these two objects now let's look at this example what if I try to do one plus Str well this is not an accepted operation I can't do this if you run this code in Python we will get an error now the reason we'll get an error is because this behavior is not implemented on the string or the int Class A String doesn't know how to add an into it and an INT doesn't know how to add a string to it it's not defined Behavior if it was defined we'd be able to do this so the way you think about this a class is the blueprint that defines the behavior that is allowed on an object an object is an instance of a class you can have multiple objects as many as you want of the same class so I can have a bunch of in so I can have a bunch of floats I can have a bunch of strings all of these objects are dependent they're unique and they use the class to to understand what Behavior they have access to now let's look at a custom class and I'll make this even more clear all right so I've got a custom class on the screen let's dissect this a little bit and then I will create an instance and show you how this works so we have dog class first of all this is the name of our class any instance we create of this class will be of type doc because that's the name of our class just like of type ins string Etc that's the name of our class that's the type of the objects we create using the class now the first method you see here now this is a function but we call it a method because it's inside of a class is what's known as The Constructor or the initializer this is what is called every time you create a new instance now this is called on classes like int on float on string you just don't see it because it's built into the language so I'm kind of exposing to what a class looks like whereas the ones built in are kind of hidden you don't really see them anyways we have in here right and what we take is a name age and breed as well as this self keyword now the self keyword refers to the instance that this is being called on that this function or this method is being called it's important to have that distinction because we have multiple instances self is referring to the individual instance that is being called upon or being used in this context you're going to see what I mean in a second but when I say something like self.name equals name I'm saying I want to create an attribute this is data that's stored on the instance not on the class on the instance called name and I'm making it equal to the name value that I passed to this Constructor continuing same with age same with breed we'll look at an example in a minute now we move down here to our other methods now these methods are essentially the behavior of this type right the behavior of instances this class is Blueprinting what all of my instances are able to do so when I put something like bark this means that I can call the bark method so I can do something like dot bar Arc right on any instance of this class because the method is defined same thing with get info I can call this get info method here and it will return information about the instance that I called this on okay so enough of that let's put this over the side let's look at an example of creating an instance so let me just zoom in a bit here let's say I have dog is equal to Doc now first of all this is how you create an instance of a class if it's not built into python you write the name of the class which is dog you put your parentheses and then you pass any required parameters to the Constructor so we need a name age and breed so I'm going to pass Tim let's just pass four for breed uh let's just go with person I know that's not a dog breed but I can't think of any right now so we'll go with something that doesn't really make sense all right so we passed name age person when we do this by default this Constructor here this initializer gets called and it assigns these attributes to our dog instance this is one instance right now if I write something like dog 2 is equal to dog now let's just imagine I have some values in here I'm not going to write them out what I've done is created a separate instance so we have two individual instances that all have their own attributes now since they are the same type they have the same defined Behavior we know that they have a name we know that they have an age we know that we have a breed we don't know what the name age or breed is but we know that they have that because they are type Doc and we know that on both of these instances I can call the bark method and I can call the get info method because that's the defined behavior in the class so if I go here and I write something like dog dot bark if we were in our terminal or if we're actually running this code you would see that bark would print out again the only reason I can do that is the blueprint the type the class has defined this functionality okay very important to understand here as I wrap up this video that each instance stores its own attributes it has its own information right so when I created this first dog and it has Tim for person then I create the second dog me creating this second dog has no effect on this first dog it doesn't change the name it doesn't change the age it doesn't change the breed they all have their own name age and breed because they are instances of the class okay the class is the blueprint defining the behavior for the object the object kind of uses the class to understand what Behavior it has access to to have its attributes assigned all of that obviously I could continue going with this for hours upon hours upon hours the point of this video was to give you a quick understanding of the difference between classes and objects and hopefully conceptualize in your brain what is a class what is an object what do they mean key point class blueprint object instance of the blueprint object uses the class to understand what Behavior it has the class defines the behavior of all of the objects hopefully this was helpful let me know if you like these short explainer videos I'm happy to do more hopefully I'll see you at another YouTube video