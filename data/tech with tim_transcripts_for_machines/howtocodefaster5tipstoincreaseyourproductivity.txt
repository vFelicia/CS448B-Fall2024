so the reality is most people work very slowly they're not very efficient they don't care about how fast they're doing things and in many job environments that's accepted and that's fine and kind of everyone works at about 50% efficiency and never pushes forward now in programming that is not really acceptable and being able to program faster is a massive advantage that's gonna set you apart from virtually everyone else that's on your team now these skills are what you learn as you program for a long time and that's what I'm gonna share with you here today first of all the five kind of reasons why you're being slowed down when you're programming and then how we can combat those and get faster and faster and eventually work our way up to close to a hundred percent efficiency when we're actually programming now in reality there's thousands of things that can slow you down when you're programming but the ones that I'm going to mention here kind of the five main points and the things that make the biggest difference now the first and most obvious thing that's gonna slow you down while you're coding is bugs now debugging trying to find logical errors that's gonna be the number one thing that slows you down I'm gonna talk about how we can kind of avoid that now the second thing that I notice that slows me down personally a lot is redesigning and rewriting code so I don't do it right the first time or I don't come up with a good design right don't plan out my code and I end up having to change things and change the structure and kind of the way that I've laid out my code which takes a really long time now the third thing is gonna slow you down is distractions now this is going to apply to every job field but specifically programming programming is something where you need to be dialed in you often hear the term you know he's wired in don't talk to him don't mess with them don't say anything because you're just programming you're wired in and your laser focus and that's something that you need to get to if you want to be efficient now the next thing that's gonna slow you down is reading documentation now this is vital for most things that you do but how can you do it efficiently effectively and kind of avoid just sifting through it and not really getting the information you need and the last thing that's gonna slow you down is well just having no idea what you're doing and learning while you're programming something now we're gonna get into this in more detail and talk about exactly what this means but these are kind of the main things that are gonna slow you down so now let's talk about how we can avoid them now the sponsor of today's video actually wants to help you code faster by downloading their free product called kite now kite is a free plugin for your IDE or text editor uses machine learning to give you the two possible completions for your Python code it's capable of completing entire lines entire function calls and it ranks all of its completions by relevance so you get shown the best ones first even as another feature called intelligence snippets which allows you to quickly tab to the different options and choose which completion you'd like one of the coolest features that comes with kite is called copilot now what code pilot does this provide oneclick documentation it shows you information about modules classes methods and functions based on your cursor location now the best part of kite is that it's free and you can download it at the link below alright it's the first thing to do that's gonna save you a lot of time is to avoid bugs now I will save and I acknowledge this bugs are gonna happen they're inevitable you're gonna run into them so being able to kind of avoid as many as possible and then understanding how to solve them when you run into them is gonna save you massive amounts of time I know you guys have been here where you're writing a program and then all of a sudden it might not even be a syntax bug it might just be some kind of logical bug you implemented to the program you have no idea where it is you get frustrated you can't do anything you give up or you start writing something else the bug messes up and then eventually you find it and you fix it or you just change some random lines and you know you end up fixing in you hope it doesn't come back this is really not a good way to do things and I'm gonna talk about how we can fix that in a second but the first thing is avoiding bugs to avoid bugs the first thing I recommend is just thinking before you start rambling just writing a ton of code what I usually do and you guys can see this in any of my live streams I've done where I've done some live coding is I'll bring up my whiteboard and I'll bring out my tablet and I'll start drawing stuff out and just thinking logically about the problem and I start thinking about possible edge cases for what I'm doing why this might break and I'm trying to break my own kind of concepts an idea before I even bother implementing it into code for me it's much more worth it to spend 20 minutes on the whiteboard writing stuff out in thinking about the perfect solution and testing it like that then is to write a bunch of junk code mess with it have to tweak it fix some bugs and then eventually end up rewriting it anyways so I always recommend think before you implement and just really you know think about what it is that you're gonna do and that's something that so many people don't do these days is just simply think okay so let's say you've done that you know you're writing your program and now you run into a bug you've thought about it you don't know what's wrong with it well the thing that's large to do is to start eliminating where this bug could be and what I mean by that is kinda have to think of what could be going wrong maybe there's 20 maybe there's 30 different things that could be going wrong what I'm gonna do if this happens to me I'm gonna list those things out and I'm gonna check them one at a time I'm gonna check you know the server side I'm gonna check the client side I'm gonna go and I'm gonna check this and I'm gonna find things that I know work a hundred percent correct on it be aware of that and then I'm gonna slowly work through things until I find what's going wrong and this is the process of kind of just solving any problem in general now it applies specifically to programming because oftentimes you can have a lot of different paths you could be going on so if you can kind of cross off paths and say nope there's nothing wrong with that one I don't need to look at that that's really good that's gonna help you move towards the bug and the problem rather than just randomly guessing and changing lines and possibly breaking your program more than RT is so the next thing you want to avoid if you want to become a faster programmer is restructuring and redesigning your code constantly and what I mean by that is you go in you just start coding a project you don't really think about what you're gonna do and then halfway in the middle of your project while you're coding you're like damn I want to add this in I want to have this feature I want to create this new thing but the way that you've designed this so far does not allow for that to happen in other words you haven't programmed the scalable you haven't thought it out well enough and now you have to redesign the entire document the entire code base to add this one feature to add something new now this is gonna obviously take you a lot of time and it's gonna require you doing exactly what I'm about to mention you should do before you start programming and that is coming up with a plan before you start writing any code for somewhat of a large project or even a mediumsized project you should really plan out exactly what you're gonna need what data structures you're going to need what kind of classes the interaction between objects and other data and pieces of information you need to create some kind of document almost listing all these things now typically they call this a UML document but whatever it is you guys want to make is fine by me so long as you come up with some kind of plan this saves you tremendous amounts of time it's like seriously crazy amounts of time by doing this because now when you're programming something you don't have to be thinking about the design and the structure constantly because you've already laid it out you've already thought of it and now you're just implementing that design and that is really the process of writing good code is first you know figuring out the problem but you want to solve then designing it then implementing it and then you can obviously change things later on to have a better suited structure for what you want to do now another small point here to mention is when you're implementing methods and classes try to keep things simple now I'm guilty of this as well but most people and especially younger program is at least from what I can see is right crazy convoluted methods and just ways of doing things that are super advanced to try to show what they know or to try to prove that they're smarter than other people now you know whatever go ahead if you want to do this but it just is such a headache in the future one maybe you haven't programmed in a month or you haven't looked at this code in a while and you come back and you're adding a new feature and you run into a bug and then you realize maybe that bug is from something you wrote before you go back and you try to read these methods and you're like holy crap what was i doing whereas if you would just added you know two or three lines simplified things a bit but made them a bit more readable this would have saved you a tremendous amount of time so just keep things simple to start it might seem like it takes a little bit longer at the beginning to write those methods and do all of that but in the long term this is gonna save you a huge amount of time and just the amount of time you can avoid by debugging and having to read this code in the future is definitely well worth it all right so this next point is going to apply to pretty much every discipline not just programming and that is eliminate all distractions now anyone who programs knows that to really be able to get anything done you need to build a focus for multiple hours at a time and you guys have seen this before I've done live programming streams where I program for 12 18 hours live straight now the reason I do something ridiculous like this is not just to show off to you guys but it's also because being able to focus on a project for a crazy amount of time allows you to keep your head completely in what you're doing so you can constantly keep your train of thought you can just flow and just go with things I would much rather work for five hours straight then work for an hour take a break for half an hour work for another hour I'd be way less efficient doing that because if I can just focus four hours like four or five hours at a time without having to take breaks without being distracted by my phone or all these different things I can get a lot done and that's what you guys will notice as you start programming larger projects is when you can just dial in and really focus on something you're gonna be crazy efficient and it just is the best way to get things done now I'm not recommending anyone does what I do and just sit there for 12 hours because that is a bit ridiculous you do need to take breaks you do need to maintain your eyes and look away from the screen and all of that but what I'm saying is try to find times in your day where you can dial in really get focused for two or three hours and just coat a bunch of stuff in that time and avoid all distractions now a good way that I like to avoid distractions is first of all just you know throwing my phone away leaving it on the other side of the room I usually like to put on some nice music so I kind of get relaxed and then I just set up my setup and and go and just code the entire time and I'm like for this three hours that's what I'm doing I'm coding there's no distractions I'm not looking at YouTube videos I'm not doing any of this and you get a lot done now another thing to mention here is make sure that your setup is good now personally I mean you guys can see here I've invested a lot of money in my programming setup and it saves me a lot of time because I'm very comfortable where I am I have everything I need I don't need to get up and walk around and look for things and do all this I have a nice keyboard just invest in yourself and invest in your setup because that's where you're gonna be spending long periods of time and you don't want to be miserable when you're spending you know three four hours programming in a row now the next thing that's gonna slow you down tremendously is reading documentation or trying to learn something new now the reality is when you create something you're probably gonna have to learn something new you're gonna have to look stuff up and Google should be your best friend personally for me I always have a Google window open on my other tab and I just go to it whenever I need something really quickly look it up and then crossreference my code and whenever I have on Google there to see what's happening the best programs in the world will do this constantly if you think that you're just gonna memorize syntax and you're gonna already know how everything works then you're just I don't know what to say but people just constantly are looking up documentation it's a skill you need to master and it's gonna save you a ton of time if you can quickly go to a Stack Overflow or you can quickly read through this api's documentation and understand how it works now the first thing I say is if this is your first run looking through documentation don't just copy and paste stuff what you want to do is understand how this works and as soon as you start to kind of understand the way that they've built this program and the way they built this API the way they do things you'll be able to very quickly pick up the rest of it now this goes without saying but to be able to really read documentation to understand you have to be a somewhat experienced programmer and what I mean by that is you have to understand classes you have to understand objects if you don't understand those things well there's no way you're gonna be able to read the documentation they're literally just built on explaining those different aspects to you see I got to get that down first but after you've done that what I recommend is try practicing reading documentation I know this is the most boring thing in the world and you're probably gonna hate the time you spend doing it but if you can get good at being able to find information on a page seek through documentation that's gonna save you a lot of time in the future now the next thing to talk about here is the fact that a lot of people jump into projects or start doing things and they have absolutely no idea what's involved in it and they have no idea what they're getting themselves into now let's say this is specific to Python and you want a program neural networks and make machine learning applications okay great that's awesome do you know what's involved in doing that do you have the prerequisites for that do you understand Python if you don't you should probably enroll in my course which I'll give you 25% off for right now if you just look click it should be like a little thing here that says the code as well as the link in the description but continuing if you don't know what you're doing you don't know the basics of a language you should really get that down before you start jumping into a massive project so just do some research beforehand come up with a plan and figure out if this is even possible to do with your current knowledge base because you don't want to be wasting your time trying to implement this crazy complicated algorithm or do this you know ridiculous thing that you have no idea what to do now the other way here is you know maybe you do know what to do you you have the skill set but you don't know the way to approach a problem what I would say then is look it up you know try to figure out what you should be doing do some research make a plan and then that way when you start programming you'll have a better idea what you need to do that's gonna save you a lot of time from just you know checking and gassing and doing all that which happens all the time so anyways those are kind of my tips to become a faster programmer I understand that some of these won't be applicable in every sense and you know some are more important than the other I haven't listed these in any specific order but I just want you guys to you know be aware of how much time is being wasted and how much more efficient you could be if you get one thing from this video spend long times programming I guarantee you this will be the number one factor that increases your productivity you know spend three for five hours straight programming sounds ridiculous but if you can do this you will be much much faster so with that being said that is it for today guys again if you want to enroll in the course there is a discount code here for 25% off you know see you guys