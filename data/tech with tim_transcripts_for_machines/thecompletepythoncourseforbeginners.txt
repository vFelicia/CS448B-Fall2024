hello everyone and welcome to the complete python course this course is designed to teach you everything you need to know about the Python programming language this is going to assume you're a complete beginner you have no knowledge of python and bring you through right from the beginning all the way up to expert and advanced level features so this course is actually a combination of a bunch of videos that I've created over the past few years it starts with beginner Python Programming goes to objectoriented programming then into intermediate and advanced level features so those are the four main section of this course it's kind of split up in those four sections and within those sections there's a bunch of topics now if you want to figure out what section to jump to or you want to see what's involved in the course look in the description there'll be a bunch of different timestamps that show all of the different topics that are covered and feel free to skip through and go to the ones that you find the most interesting so with that being said this video is taking a very long time to compile and create so I would appreciate if you guys leave a like you subscribe and you consider becoming a channel member if you want to support me on a monthly basis so with that being said let's go ahead and get into the full python course hey guys so welcome back um today I'm going to be doing a Python tutorial Series so this is the first episode in the series it's kind of an introduction showing you how to download python how to install it and then going into data types and variables so the first important thing to understand about the Python programming language so don't worry if you've never programmed before um I'm going to be going over everything very slowly and in depth so that you can understand I recommend that you follow along with everything I'm doing in the tutorial uh pause the video at certain points rewind if you don't understand um it's important you understand these parts so that we can move forward into more complex ideas so obviously the first um thing that we're going to have to do if we're going to learn python is we have to install it on our computer so uh we're just going to go to the python website up here python.org downloads right here and all you're going to do is just click download python 3.6.1 now I'm not going to do that because I already have python installed and downloaded on my computer but pretty much once you uh download this it's going to pop up down here in your downloads folder just run the exe it's very simple um and you'll be running python in no time so now pause the video go ahead and do that and then we can go to the next steps okay so once you've done that you're going to notice that you have an application that looks like this it's called idle um Python and then it'll have the version so I'm using version 3.5 um don't worry if you have a version that is larger than that so 3.6 or even one that's before that most of the things that I do in this will work in all the versions of python okay so go ahead and run the idle you'll notice the first thing that pops up is the python shell as you can see at the top here the shell now this right here is not where we're going to write all our programs it's the console kind of so here I can type any lines of code for example I want to print a name like this and it'll run right away so that's not what we're going to do you can play around with this if you want but we're going to go to file and we're going to click new file and then here we go so now we have a new document that we're going to be working on and we're going to be programming in so I'm going to go ahead and I'm going to save this right away as tutorial one into my tutorial folder which I believe is on my desktop right here yep right there awesome okay so there we go we've saved it and now we're ready to learn a little bit about data types so pretty much python is a fairly basic language in comparison to a lot of other ones a lot of things that it does is uh more simple than other languages but it is important to understand the basic data type so there's four main data types in Python there is a few more but we're just going to talk about these ones right now um the first one is an integer so that can be uh a short form int that stands for integer now um an integer is any number so such as 1 4 76 any whole number it's important that is a whole number it could be a negative number as well5 um zero those are are all integers okay now we have strings now the short form for Strings is St now pretty much a string is anything embedded in quotations so like this uh this is my name Tim that is a string and then we also have something like this this would be a string and even like this this would be a string so although there is a number in here since it is between these two quotations here it is a string so even if I did another number like like that string um now it's also important to understand that it doesn't matter if you use the single quotations or the double quotations sometimes we use the single quotations because inside of our actual quotations we want to use double quotations or maybe um if we use the double quotations because we want to use the single quotations inside of our actual string like that okay so those are just a few examples um now we have Boolean variables uh or data types sorry so Boolean data types is something like true and false so true and false pretty basic um these are reserved words in Python um meaning that they're highlighted in yellow and that you cannot use them for variable names that's going to be important later on um just know that they are important words uh true and false and they do start with capitals so um for example if I typee true like this uh it's not highlighting Orange right so that's because true um in Python the keyword for that starts with a capital so true and false um then we have the um decimals which are the float uh data type like this so anything with a decimal floating point so 1.23 um anything like that any decimal number with a floating decimal point uh would be a float okay so those are the four basic um data types um there is a few more that I'll go on to later on but you just have to understand these ones right now so now that we know these data types I'll give a quick little quiz here so I'm just going to put a few things right here and then I want you to pause the video and go ahead and try to determine what type of data type these things are okay so go ahead pause the video and then I'll go over the answers in a second okay so we'll start with the first one here uh hello it's the same example that I have up here except in single quotations so we can see that it is a string data type okay so that is the short form Str Str now we have the number 123 that would be the integer data type we have another number here that has a decimal point so 3.22 that would be a float we have the keyword true this data type is a Boolean data type then we have two in quotations this is very important we don't want to get this mixed up this is a string some people may think that it's an integer because it's two but no it actually is a string because it is inside of the quotations and then same thing here three inside of the double quotations again is a string not an integer okay so now that we have an idea of the basic data types um I'm going to show you how to create a variable so pretty much you may have heard of variables before in math or something like that um in math we tend to use X as a variable we say x may be five x may be four anything like that um it's the same thing in Python now declaring a variable in Python is very easy all you have to do is type the variable name so in this case I'm going to use name and then simply give it a value so this value as you may remember is a string this is my name and I'm just storing it in the variable name now if I want to access that variable I want to see what that variable is I can print it to the console by simply typing the variable name which is name so now we'll see what happens um if I run the program just going run run module I'm going to use F5 from now on so that's the uh thing and you can see it prints out Tim just like that okay now um say we did that we have name equals Tim we printed it to the screen now maybe we want to change that variable well it's very easy again all we have to do is just type the value name and now maybe we're going to change it to Bob and now we want to see what the new VAR new variable is so we will print it to the screen we'll print name cck F5 to run that and we'll see name and or sorry Tim and then Bob so like we have here name equals Tim print name name equals Bob print name right so we've set it like that okay so that's pretty basic um now you can create variables of different data types so for example if we had a variable age I would use an integer data type so like 18 for that variable and then again if I wanted to print into the screen I would type print and then the variable name like that okay 18 perfect right so we printed that to the screen um again if the variable names um there's a few restrictions on variable names so here you just see I've used three lowercase letters um your variable names can contain underscores um they cannot contain dashes um they can only contain underscores text and they cannot start with a number I believe so if I try to do one one name equals 2 for example I run into an invalid syntax error because we can't name a variable starting with a number now I can end it with a number I believe let us try yep so that's fine it's let us do that name equals one I could do name underscore um person maybe yeah namore person you see if I run that program everything's fine there um but I can't put something like a star in my variable name you see how we've got an invalid syntax there right this is because these symbols represent something else in the Python language so just know for names um we can use capitals if we'd like I could use name like that run the program that works fine but I cannot start it with numbers so I cannot put a number there um and I cannot contain anything other than underscores texts and numbers in or at the end of the variable name now here's a quiz for you if I make a variable called name and do another variable called name um are they the same thing now that's a good question um are these two the same thing um no they are not the same thing so capitals do matter in Python the all capitals variable name is different than the variable name so again name like this is different than all of those variables there okay so I think I've covered um a little bit on variables and data types today um this is the complete Basics just wanting to get everyone caught up um in the next video we'll go into some more advanced things maybe uh operations of variables adding them together subtracting multiplying um buing conditions things like that okay so I hope you enjoyed the video today um stay tuned and we're going to have another one out tomorrow um and like the video if you if it was good and subscribe so yeah thank you hey guys so welcome to the second video in the series um if you remember in the last video we talked about data types and variables uh we went briefly into some of the things that python can do um today I'm going to be talking about operators and we're going to be doing some print statements some input um a little a few small console applications just applying some of the knowledge that we've learned so pretty much the first thing I want to do is I want to go back and I want to review what we did in the last lesson very quickly so we talked about variables and data types so for example the X variable we could set it to something equal to two like that uh a name we may equal to our name right so I make that equal to Tim um so there we go we have the name right there equal to 10 we'll start with that okay now if you remember in the last one I didn't talk about this but I used something called print now the print statement pretty much takes an argument so inside of these brackets the thing that is inside that brackets is called the argument so it takes a uh a string argument usually so I will give it the name so now you'll see again we did this in the last one just want to review I'm clicking F5 simply to run the program when I go to the console it simply puts Tim onto the console just like that right okay um very basic we already did that so now let's say well we want to do something else so let's let's print here and we're just going to put a string and we're just going to type this in ourselves so let's say hello comma what is your name that's going to print to the console now we want to get what the user's name is now there's a way to do this in Python it's very simple we're going to make a variable name it makes sense to put the variable name here and do an equal sign because it's a variable right we're going to type the word input just like this now what's going to happen if I run the program here I'll show you is it's going to say hello what is your name and it's going to actually allow me now to type into the console which I couldn't do before now nothing happens after when I click enter because we don't have anything else after that but it's allowing me to type okay so now well we want to print out what the name is that was said so let's just simply type print and then name all right and we have hello what is your name I say oh well my name's Tim it says Tim all right now well we just printed out the name but maybe we want to go a little more advanced than that we want to say well hello Tim how are you doing Tim something like that right so I'm going to just put a comma here going to separate these two things and I'm going to put in a string and I'm just going to type what I like to type so I'm going to say hello with a comma and then you see that I have this other comma here that is outside of the quotations meaning it's not a string it's actually just separating the two arguments in here and you'll notice what happens now when I print is it goes hello what is your name so I say oh my name's Tim it says hello Tim right so that's pretty straightforward I hope that's easy to understand we're just using the input to get an input and then we're printing it back out to the screen okay so let's do um let's go into the next part of this now we'll use that again later but let's talk about operators so operator that term may sound familiar to you um in math uh we use things called operators so these four operators hopefully should look familiar to you um this is a plus sign this is the addition operator we have the minus sign which is the subtraction operator the division sign which is the well division operator and then the multiplication sign which is again the multiplication uh operator so there's a few more operators that we'll talk about but these are the four basic ones in Python now you remember how I talked to you about data types this is where this comes in when we use these operators it's important that we use them on certain data types so for example um in math I could do something like 3 + 4 right so what is 3 + 4 equal well that is equal to 7 so the computer can actually do that math operation by using that operator to return those values so let's let's give an example here quickly so I have uh let's do num one we're going to use variables here uh remember I can use a number in the variable as long as it's not at the beginning and I'm going to give it a value of 45 and then we'll do num two and we're going to give it a value of three now if I want to print to the console um let's say num one plus num 2 well you can guess what that's going to give us it's going to give us 45 + 3 I hope if this is not an error yeah so that gave us 48 right so oops didn't mean to make that full screen num 1 plus num two is 48 all right so now what about minus let's try this 42 basic um we can do multiplication here with the multiplication sign there we go 135 and then we'll try again with the division sign just to show you all of them we get 15.0 like that okay so that's pretty straightforward um those four basic operators now in Python there's a few more operators that we want to talk about now for example in math we have something called exponents right so how do we do exponents in Python well it's actually two stars is how you do an exponent all right and now maybe there's something called integer division um which I'll get into later but I'll just show you the operator for it right now it's two slashes that means uh I'll give you an example a math example here 64 / by um let's do 10 um would give us usually in math a value of 6.4 right that's if you use one division sign sorry what am I doing times I mean divided by would give us 64 I have 6.4 but now if we do two division signs here like this it actually gives us a value of six that's because it just um it doesn't worry about the remainder at all it just tells us um how many times 10 can go into 64 um and that's all it can go in six times evenly so it gives us a whole number as our answer that's called integer division this double double slash like this okay and then we have another operator which is actually the modulus operator um so this is the percentage sign and this gives us the remainder so here if I do five 5 modulus 2 then the remainder of that is actually 1 because 5 / two is four then with a remainder of one right so it's not going to give us the decimal points it's again just going to give us the remainder if I did five / by four again the remainder is one 5id by 3 the remainder would be two like that okay so that's what the modulus sign um gives us so we'll put modulus here and then there's probably a few others that I'm forgetting about but we can go into those later so now um same thing let's keep using our number variables here and now let's introduce a third variable called num3 now um I want to show you how we can use the variables so num one and let's see if you remember what this operator is uh so that's the exponent operator so that means num one which is going to be our base uh which is 45 raised to the power of four because we're going to use num two and we can print num three press okay and you can see we get a pretty large number um that's because of how exponents work and then same thing here if we want to do maybe integer division see what we're going to get we get 11 right a whole number and then say we want to do modulus we get one okay so now let's tie all these things together with the operators that we've used the variables the prints and the inputs so um let's start by just get doing a little print statement and saying pick a number okay pretty basic we're going to pick a number and then we're going to take the input so we're going to say num one again is equal to the input of that okay so we got the input in Num one um now let's say print pick another number all right so now we're going to pick another number so we're going to do num two is equal to input like that and now what we're going to do is we're going to introduce our third variable so we'll call it sum because we're going to add these is equal to num one plus num 2 and now actually you can't use sum because it's a reserve word so let's just do in all capital sum because remember how we talked about variables capitals and lowercase are different and then we're going to print to the console the sum like that okay so we run the program says pick a number uh let's pick a number let's say four and let's do 32 now what do you think it's going to be oh oops okay so yeah someone equal num one plus num two okay so this is why um I talked about data types so I'm actually uh Happy this happened it's because what actually happens when we get the input of something is it gives us the type of a string um which in this case is not what we wanted to do so um you saw there I'll run it again um it's a good mistake that this happened actually we have four and we have a three and it gave us 43 that's just because we added the string four to the string three um so that simply gave us 43 but now we know in actual math that 4 + 3 equal 7 so if we want to do um the integers we have to actually convert these variables into integers so in order to do that remember I showed you the keyword um int like this before we're just going to put brackets around our two variables here like this integers and now hopefully we should get the correct answer when we do four and we do three and you can see we've got seven so um I didn't mean for that to happen originally but I'm happy it did because it shows us why data types are important so when we take the input of something we're typing it from the keyboard and that is actually a string so um here we can print again um don't worry about what I'm doing right now but I just want to show you the type which is going to give us if it's a string if it's an integer of num two just to show you what the type actually is so we pick a number we pick two and we pick three it tells us that three is actually a string so that's why when we added originally three and two or two and three or whatever it was um it gave us just them added together so two and three rather than what it should be which is five okay now same thing here if we had a number and we wanted to convert it into a string all we would do is we would type Str Str around the number so for example three and then that would give us three just like that so A String so now we've kind of gone over a conversion of variables um conversion of numbers data types how to get input from the console using the input like this um and some basic operators of python so uh review this I hope you followed along and then in the next next lesson we'll move into some more advanced operators and we'll maybe start with conditions okay I hope you enjoyed uh please subscribe like the video and I'll see you in the next video hey guys uh welcome back to the third video in my Python Programming tutorial series um today we're going to be talking about something called conditions so I hope you remember from the other videos we talked about input printing we did variables data types and then we talked about operators so operators like plus minus um division integer division modulus right uh multiplication all those operators today we're going to be talking about a few more operators and then getting into conditions so here in my file right here um I've put down four basic comparison operators so pretty much a comparison is something that's going to return a value of true or false so here we have um let's say if a real world example is Tim equal to Joe well no they're not because Tim obviously spelled differently than Joe so that's going to be giving us a value of false um same thing if we want to go into numbers we say 18 is greater than two well is that true yes it is so that condition gives us a value of true uh it's a very simple concept but it's something that we have to understand as we go into decision Visions later on which will be in the next video okay so these comparison operators I'll read them off and just kind of give a definition of each of them so the first one can e be a less than or a greater than sign uh same thing with the second one right so it's just going to compare if something's less than greater than um usually these are used for integer values um that data type uh we also can use them for Strings but it's a little more complex and I'm not going to get into that right now maybe in a more advanced tutorial later on now the equivalent operator so the equal sign here now a lot of people think well if I'm comparing something why wouldn't I just use one equal sign like this well that's a very good question and a lot of people get mixed up on this it is actually two equal signs that's because in Python um the one equal sign is a declaration um declaration operator so for example if I put a variable X and I want to set it equal to four right um this is is what we do with the one equal sign we're setting values right so when we did name is equal to Tim things like that we're using one equal sign now if we're going to check something we're going to compare them we have to use two because two equal signs and one equal sign have a very different meaning so it's important to keep that in mind that the comparison operator for equivalency is two equal signs okay the next one is not equal to um so we have an exclamation mark and then we have the equal sign like this okay so an example of not equal to because some people may get confused here is say if four not equal to 5 oops what did I type there not equal to 5 okay so what do you think this would give us just think about it for a second well what it's actually going to return to us is true because the condition is if four is not equal to 5 and here we can see obviously four is not equal to 5 so now again if I give another example we put five here we say five not equal to 5 well that would return a value of false because five is indeed equal to five now we can do the same thing with strings so for example we have hello oops spelled incorrectly there we go and Tim uh now you can probably guess by yourself that this is going to return true because him is indeed not equal to hello okay uh it's pretty straightforward um but a lot of people may get mixed up with the not equal to if it's returning true or false okay so those are the four basic comparison operators that we're going to use so we have equal to U not equal to and then greater than and less than so greater than and less than again we use for numbers so one less than two again that's going to return true like that okay so now um we're going to start printing from some things to the console and maybe doing a little bit of a quiz here um just to see how you guys are going to do so a booing condition I'm going to store it in a variable so I'm going to say name uh oops actually we're not going to do that we're just going to print to the console 2 less than three okay now you guys guess and uh tell me what you think is going to be returned to the console it's either going to be true or false I'll give you a hint right now now it gives us a value of true that's because this condition 2 is less than three um is true it's equal to three right um so now if we switch the sign and we make it greater than like that well you can guess what's going to come up so we click enter and we get false that's because this condition returns a value of false okay now we'll do another condition here all right um hello equal to Hilo okay um and guess yourself what this one's going to return false okay that's because they are spelled differently um now we're going to do the not equal sign just to show that one as well hello not equal to hello and we'll see that gives us true because they are not the same um fairly straightforward but a lot of people do get these things mixed up now I'll show you what happens when I try to just do one equal sign like this see we get keyword can't be an expression that's because we're trying to declare a variable here but we cannot do that okay because we're just using one equal sign here we need to use two all right okay so now let's try another example maybe a more advanced one uh this is a little bit of a trick okay I want to see if you guys remember from my last tutorial what I talked about so take a guess right now what you think is going to be returned you think it's going to be true or do you think it's going to be false well it was false okay um that's because again what we talked about in Python um capitals matter right so any capital letter is different than a lowercase letter so something like this um yeah it's going to return false all right it's important to understand that okay so we' very briefly uh gone into conditions now um I'm going to write a few on the side here you guys can go ahead um I'll put them in print statements and test yourself and see if you get them right or not okay I'm going to add a few tricks from the other lesson um try to kind of apply some of our knowledge and see if we can get them correct okay so just give me a minute here I'm just going to write a few out and then we'll go through the answers afterwards okay so you know what we'll just we'll just do these ones for right now and we'll do a few other examples okay so these are a little more advanced than what I was talking about before but they are conditions we have a left side of the condition and we have a right side of the condition so I hope you've taken a guess now of what you think these are going to be cuz I'm about to print out the answer right now Okay so we've gotten true false and false all right so for the first one two less than three that's an example I already gave that gives us a value of true because that condition is true uh now we have two 3 + 4 greater than 5 um so you can do the math there and see that that is going to be false and then this one some people may have gotten a little bit of a little bit confused on cuz I actually use the words false and true in my condition that's going to return false or true so I have print false equals equals true well is false the same thing as true no it's not so obviously we going to be returned with the value false Okay so we've talked a little bit about conditions now um in the next tutorial we're going to be doing something called decision so I'll give you a sneak peek on what that is something like this okay so stay tuned for that um the next episode should be up tomorrow um and yeah I hope you guys enjoyed the video go ahead like And subscribe and yeah share with your friends thanks bye hey guys guys uh welcome back to the fourth video in my Python Programming tutorial Series today we're going to be talking about decisions so we're going to be using the if else and L if statements in Python so pretty much I gave you a little example last time on what these are but if condition equals true then do this sorry not his do this okay so pretty much the syntax for the basic if statement which is what we are going to cover first is like this so if you remember my last tutorial I talked about conditions if you haven't seen that go back and look at that first because that's going to be an important part of today's lesson and you have to understand that so if condition is true then we are going to do this now let's just dig into the syntax a little bit here um so you're going to start with the keyword if then we're going to put a condition so the condition could be something like this if 1 is less than two if tree is equal to plant something like that okay anything that can return a true or false value you can use variable names you can say if x is equal to Y anything like that is condition and it uses a conditional operator like I talked about in the last video and then you are going to end your condition with a semicolon or sorry not a semicolon like this with a regular colon and then you going to Simply click enter and it should tab you in one line now it's very important that you have this indentation um if you have your code like this it's not going to work python reads the lines because of indentation so it's very important that you have whatever statements you want to run after the condition returns true indented properly and this will also be very important as we move further on in different tutorials and we have have lots of different indentation levels within the program okay so let's do a real example now instead of uh this kind of pseudo code here so we'll start off by just getting some input from the user so let's say let's get their age okay so age is equal to input like this and then just if you put something inside of the input like this uh it actually gives a prompt to the user so we'll say input your AG like that and then we will say if the age is equal to 16 then we will print to the screen hey your oops 16 like that okay um all right so let's go ahead and just test it out right away I know I haven't really explained it but I just want to show you how this works okay so we have input put your age so I'll say two as my age and we can see that nothing happens okay um now I want to show you one more I hope you've caught this trick already from what I talked about in the last videos but we'll see now you notice here I'm going to put in 16 and nothing's going to happen now the reason for that is because 16 here is different than the 16 that we get from age if you remember whenever we're getting a number or anything from the console we actually get it as a string so this 16 that we're getting actually looks like this now in Python again we have different data types right so this is an integer data type well this is a string so when we're comparing integers and strings um they're different so we have to convert our age variable into an integer before we can compare it like that okay now we'll try again say if int age equals 16 so now we put 16 in and says hey you're 16 like that okay um perfect so that's pretty straightforward um now we can also do some other conditions so let's do a greater than 16 now okay so this is another conditional operator that we talked about before um and yeah we'll go ahead we'll try it now so we'll say 15 now nothing happened because obviously 15 is not greater than 16 now if we put in 17 it works okay great um all right and also uh I just want to show you there's another operator that we didn't talk about last time a conditional operator and it's the greater than or equal to and the less than or equal to so to convert your um greater than sign into a greater than or equal to sign all you have to do is add an equal sign like this and now anything greater than or equal to 16 will work whereas before it had to be strictly greater than 16 and same thing with the less than sign like that okay uh I just forgot to talk about in the other video so I figured I'd put it in here all right um great so let's go into another example then so let's say um it's great it's telling us we're 16 um or let's in this case we're going to be older than 16 right so hey you're older than 16 but what if we want to message when we are younger than 16 well the way to do this is using something called an lse statement so the Syntax for this uh it simply has to come after an if statement you can't just leave your own else statement like this that will not work it has to be after an if statement is placed and then all you have to do is put a call in and click enter and make sure the indentation is the same as the indentation for the first if okay so now we're just going to print you are younger than 16 okay and we can go ahead we can try this to see if the else is going to work and we say well we're 15 and you are younger than 16 great okay um so just to explain this a little more how this really works when we're reading through the code well python reads code line by line like this now when it reaches this if statement it checks this condition to see if it is true or false so since this condition um was false in the last example we say if false it says Okay so we're not going to run this line of code we're going to skip to the else statement and we're going to do this okay so if we had typed anything in that does not return true so makes this condition not return true then it would go to this else statement like this okay um yeah and then same thing say we type in a number 17 um and that is greater than 16 it's not going to do the L statement it's just going to do the if statement okay um I hope that makes sense now we're going to go into another layer okay so let's get into a new example here um let's talk about height for a roller coaster okay so for some roller coasters uh you have to be taller than a certain height and you actually can't be too tall right so again we'll get the input from the console so we'll just say height is equal to input and we're just going to do this in meters like 1 meter 2 meter 3 meter just to make it really easy okay I know that's not a realistic height but just for the purpose of this example so we say height is equal to input um again we have to remember that when we're going to check the condition we have to make sure we put it in the int because as we get it from the console it's going to be a string okay so we'll say if height is less than 1 M we're going to say you cannot ride so we're going to print to the screen you cannot ride okay now we only want to allow the user to ride if their height is in between 1 M but less than 2 m okay so as you can see I've introduced a new word here called L if all right so this means if this condition up here is false then we're going to go to this one we're going to check if this condition is true or false if it's true we're going to run whatever's in here um otherwise we're going to keep going so you can have as many l ifs as you possibly want um in a decision statement like this okay um you can only have one else though because else is just the default so anything you type in um that doesn't equal any of these statements so like if isn't true Al if isn't true the other L if isn't true then it'll go to the lse statement okay so L if the height is so if it's less than one you can't ride and if it is greater greater than two you also can't ride so we're going to say you cannot ride I'm going to say and we'll say over 2 m and then we'll put here just so we can distinct them under one meter okay and then now we're going to add in the lse statement like this and we're going to say print you can write okay so I know I just did a lot there so we'll go through it quickly we pretty much have a condition up here we already talked about the if statement so if this condition is true we're going to print this and we're going to skip everything else we're not even going to bother reading it because we know that it's not going to be any of those conditions okay so now we do the L if here right so we say well if this condition is false we're going to go ahead and we're going to check this condition so we say oh well this one's true so then we're going to execute this line of code which is the print and we're not not going to do this else statement now say we go through these two and they're both false okay so this returned false and this return false then we're going to go to the else and we're automatically just going to print whatever is in the else statement like that okay so we'll go ahead uh we'll run the program and we'll try it out make sure I haven't made any errors here okay so the input um I didn't give a prompt so I'm just going to type in the height uh a number all right so we'll say one you can ride great okay um that is because again we have the strictly less than sign now if we wanted it to be you have to be over one foot we just put an equal sign here and then same thing here okay so we'll do that and now I'll show you again if I put in one you cannot ride under 1 meter okay so less than or equal to one right okay um let's try again now we'll do it maybe a number greater than two so let's say put four it says you cannot ride because you are over 2 m and then again if we do like a decimal number maybe uh 1.1 Okay so we've run into an error there that's fine just because we can't convert a floating decimal point into an integer but yeah I hope you get the point from that example here um these are just the basic if L if and L statements I'll do one more just to show you here we could do another L if here saying for example um if in height is equal to remember we do two equal signs right not one then we're going to say print while you are tall okay so as you can see we can do infinite elf State L if statements like this and we can only have one lse statement and one if statement at the beginning okay uh so we'll run this one just to show you one more time how this works I'll put in five so five uh you cannot write over two 2 m okay so that's because what actually happened here is we went if we checked this condition now it turns out that um five is greater than two so we did this one and we didn't bother reading the rest now if I wanted to change this uh so that it would check the five first all I would have to do is put this LF statement I'll do it right now above the other L if statement like this and now if I type in 5 it'll work wow you are tall okay so uh that's it for the if L if and L statements um in the next tutorial we're going to go into something called chain conditionals and do some more advanced examples of this we're going to do some addition subtraction and some more things with other operators okay so I hope you enjoyed um please don't forget to like And subscribe the video and I'll see you again tomorrow in another video hey guys uh welcome back to another video this is the fifth video in my Python Programming series and today we're going to be talking about chained conditionals and nested if statements um so pretty much chained conditionals are just adding multiple conditions in one uh one line with using words like and and or okay uh we also have keyword not that we're going to talk about as well so if you haven't seen the last videos in my series go ahead and get watch those now because they are prerequisite for this video all right so let's get right ahead and start um so if you remember before we have something called conditions so for example if we have the variable X I'll set that to two and the variable Y which is equal to three we could have a condition like xal equal y now obviously we know from the last video that this is going to give us a value of false oops and I cannot type today sorry um and that is because two is not equal to three pretty straightforward I hope you have all understood that from the last video all right so what we want to do in this now is we're going to want to check multiple conditions um so we'll put a condition here so if x is equal to Y and then we can put a word in like this the and word um now we'll add another condition so if x + y is equal to 5 Okay so this first condition is going to give us a value of false so if x is equal to Y because they are not the same but now x + y does indeed equal 5 so that is going to give us a value of true so where I'm highlighting we have true and then where I'm highlighting now again we have false so because we have the keyword and this if statement is not going to run so I'll put a print here just to show you we're going to print out true or let's just say ran and you'll see when I run the program nothing is going to happen happen that is because when we use the and keyword it means both conditions on either side must be true so if we change this to something like if Y is equal to 3 now that is going to be true and we'll print out ran okay so that's pretty basic now let's do the or keyword so we'll put or right here and we'll change this condition back to if Y is equal to X and now take a guess on what you think is going to happen well pretty much with the or keyword it means either of the conditions have to be true so if Y is equal to X or x + y is equal to 5 then we are going to run this line now since X+ y does equal 5 we have a true here and again Y is not equal to X so we have a false and you'll see that the program is going to run that's because only one of the condition conditions has to be true for it to run okay so that is the and in the OR keyword they are pretty straightforward and pretty basic now I'd like to point out that you can actually add as many conditions as You' like so now I can have an or I can have an and um I could have another condition I could do as many as I'd possibly can imagine as many as I'd like to do um so now we'll put an lse statement in here and we'll change this just a little bit to use another keyword we'll just put a side face here to show that we didn't run it that we ran the else okay um so now there's something called the not word okay so we're going to put not right here around it and then I will show you what it does so pretty much not reverses anything that you have inside of the brackets of the knot so in here we have if Y is equal to X or x + y is equal to 5 so we know again that this gives us a value of true um so now since true is inside of the KN true becomes false now we have if false um so obviously that's going to bring us to the else statement um which is going to print the sad face so I'll show you that that does indeed work so we have the sad face right now if we change these so that both of these conditions are false you'll see that we have false false um which is going to give us an overall value of false um and then we're going to have the not which is going to change that into a true and will allow us to run it just like that ran um um so yeah so that's how the not the and and the ore work uh and now let's get into nested Loops or sorry not nested Loops Nest nested if statements so we'll do a basic if statement here if x is equal to 2 um if Y is equal to 3 um and then we'll add our El's like this and we'll put some print statements in here okay uh just give me a second while I type out the print statements and then we will go into what this is going to do x = 2 and Y = 3 um so you may have guessed already but pretty much we can actually add as many if statements embedded or nested as we'd like so I could add another if statement here and just constantly keep checking um now the reason I showed you chain conditionals is because if I didn't want to go through the hassle of adding all of these uh nested statements I could just do an and right here and check for another condition but sometimes we do want to do uh nested statements so we'll say here x = 2 y does not equal uh what is it three okay so uh I know I just did that pretty quickly but let's walk through it now so we have if x is equal to 2 then we're going to run whatever is in here because it is indented uh so now we come in here and we say well is y equal to 3 let's say it is now we're going to print out this statement and we're going to be done with this loop with this uh bit of codes we're going to skip down to the end of the program where we have nothing else um then so let's say we do another example X is equal to 2 but y equal 4 so that means we're actually going to run the else which means now we've got print X is equal to 2 but y does not equal 3 and then the last case is X is not equal to 2 so we don't even bother checking if Y is equal to 3 we just go down and we print X does not equal 2 so we'll change around the variables and we'll show you how this works just very quickly so we can see X is equal to 2 and Y is equal to 3 that is because obviously up here two and three now if I want to change Y and we change it to four we get X is equal to two but Y is not equal to three so that means we ran this one in here now let's change it so that X is equal to 4 as well and we can see we get X does not equal 2 all right so that's uh the basics on nested statements and chained conditionals I hope you found this video helpful um stay tuned for more videos we're going to be getting into some more advanced topics and in the next video we're going to be covering Loops um yeah so if you like the video uh please subscribe and like and I'll see you in the next one hey guys welcome back to another video this is the sixth video in my Python Programming series and today we're going to be talking about for Loops again if you missed the other videos in the series please go back and watch them first as it's going to be hard to understand if you haven't seen them already Okay so let's get right into it today we're going to be talking about four Loops um and a loop is a new thing now if you're a beginner in Python and I'll talk about how they work we're going to start off by just writing one out um getting right into it with the syntax so 4X in range and then we're going to put a number which is going to be our starting position so in this case I'm going to put zero um and then a stop point so 10 okay and then we're simply going to print out X now I know we did this pretty quickly but let's talk about what this is and the syntax so a for Loop is going to run a certain amount of times so in this case we're going to start at zero and we're going to go to 10 this means the for Loop is actually going to run 10 times so what's going to happen is we are going to have our variable X which is right here and every time the for Loop runs X is going to be increased by one now we can increase it by more if we'd like to by adding another comma here but by default it is set to one like this I've just put it in so that you can visualize it so really we have something start a stop Oops stop and an end start stop step sorry my bad and I'll just put commas here to show you how it works so you can see we have our zero that's our starting number our stop which is 10 and our step which is going to be one so I know you don't quite understand yet but you will after I show you a few examples so we have X is our variable which is going to be holding the number um of what iteration we are through now iteration uh just means how many times we've already looped through this Loop okay so let's uh do an example here all right so we have X and we've just started running this for Loop now right now X is zero we're going to print X we're going to print zero to the screen and then we're going to add one to X now this time we come through the loop we say well is X less than 10 yes it is so now we're going to print x x is one now we're adding um two okay so now X is 2 is 2 less than 10 yes 2 is less than 10 so let's print two okay and we keep going until eventually we print nine then X has one added to it so it becomes 10 well 10 is not less than 10 so we're not going to print out 10 all right I know I just talked a lot there but let's see it in action all right so just like I said we print out the numbers 0 through 9 now this may seem weird um because I have the value 10 here so you'd say well why doesn't it print out 10 it's because of the way the loop works so like I said really what's Happening Here is this um plus equals 1 so pretty much this means we're just adding one to the variable X um you can also write it like this x = x + 1 like that all right so we print out X and then we add one to X and we have to be less than 10 for this Loop to run so on the ninth iteration we have well 9 is equal to 9 + 1 so X is equal to 9 + 1 uh we get the value 10 now again 10 is not less than 10 so we are not going to print out 10 um yeah so that's pretty much how a for Loop Works um it's pretty basic this is the syntax we have four and then a variable name so this doesn't have to be X we could use anything we'd like to use could use hello I could use um any other word it could be as long as I want as short as I want doesn't matter um then we have the word in which is highlighted in Orange and then range now the range takes a different amount of arguments pretty much an argument is whatever is inside this brackets so like at the beginning how I showed you we just did zero and 10 this means we have a start and we have a stop so we start at zero and we go to 10 now I can also I can actually put one argument in here like this 10 and that just means that we just have a stop so by default python will say well we're just going to start at zero and we're going to step by one now I haven't showed you the step yet so we'll do that um so again we're going to start at zero we're going to stop at 10 and we're going to step This Time by two now what step is is how much we add to X every time so before I showed you we had x = x + 1 um in this case since the step is is two it's going to be by two like that okay um so let's go ahead let's run this we have 0 2 4 6 8 and you notice how we again do not print out 10 because 10 is not less than 10 okay again uh we'll do another example with the step let's put five in this time now you can guess what's going to happen 05 it actually only prints out two things because we start at zero so we print 0 and then we add five we get five now 5 + 5 again is not less than 10 so we are not going to print out 10 okay so that is the tutorial on the for loop we're going to do another type of for Loop where we're going to use something called a list a little bit later on but right now we're just using this one this is the basic one I encourage you to play around with it yourself um and yeah so if you like the video please go ahead and like it and subscribe and I will see you again for another video thanks goodbye hey guys welcome back to the seventh video in my Python Programming Series today we're going to be talking about wow Loops so in the last video we talked about for loops and before that we talked a lot about conditions um so it's going to be important to understand those things before we can move on today to this video so if you haven't seen those videos go back in my channel and check those out first okay so let's get right into it today we're going to be talking about while Loops so let's first of all just put an example down and get the syntax okay so we have while condition then we are going to do what is ever is inside the loop so it seems simple enough um but they can get fairly complex um so well condition is equal to uh true so for example this condition here this could be a variable um well that is equal to true then we're going to do whatever is inside of this Loop so again we keep talking about conditions um they're very important in Python we really need to understand them before we can move into more complex topics okay so uh well condition equal to true we're going to do whatever is in this Loop so how does this really work well uh pretty much what happens is we have the W Loop here we have the condition so this is true this means we're going to do this now what happens is we actually come back up to the top after we've done this and we say well is this condition still true um well yes it is so that means now we're going to do this again and we just continuously do this until eventually the condition is equal to false or we have a keyword appear called Break like this now I'll do an example so we can understand this but this is just the basic syntax we have while we have a condition and then we have a colon followed by an indented block which will be whatever is going to run okay so let's start off by using a variable we're going to just call it loop we're going to set it equal to true now we're going to make our while loop we're going to say while loop um Now by just putting a loop here it defaults to say while loop is equal to false um putting Loop there is the exact same thing as typing this um it's just shorter to put Loop instead of doing the equals equals true okay we're going to get some input from the console so we're going to say name is equal to input and then I'm just going to put in here uh insert something okay and then we're going to put an if statement which we talked about in another video so if you haven't seen that go back and check that out we're going to say if name is equal to stop um then we are going to break out of the loop by typing break or we could also do this we could set the condition equal to false so we set the variable up here equal to false now I know I just typed a lot there so let's um talk about what really is going to happen so we have our condition we say while loop is equal to True um right now we set it equal to True up at the top so it's going to automatically run at least once now we get input from the console um and store it in the variable name now we have a basic if statement here that pretty much says if name is equal to stop well then we're going to stop the loop um and we're going to break out of it otherwise we're going to keep asking the user for to insert something until eventually they type stop so let's see how this all works okay so insert something I say one 123 it didn't like that once me insert something again I say we okay what about hello keeps going okay now I'm going to type stop and you see that the program stops running okay so again I'll show you that we can do this by just setting the variable equal to false same thing again if I type hi keeps going I type stop it's going to stop and then maybe if we get rid of the variable here we can also just type in the word break like that and same thing again if I type in some random things and then I type stop it stops okay so pretty much the way that the break keyword works is by simply saying okay are we inside any Loops right now um it checks whatever Loop you're inside so right now we're inside the while loop and it says okay well I've this line has now run so what we're going to do is we're going to get out of the loop so it pretty much will now start reading from the next blank line in the file um meaning that it's going to get out of this Loop um and just continue going down the program okay and that's pretty much it for Wow Loops we can talk a little bit more about why we would use a w Loop instead of using a for Loop um the reason we might use a w Loop is for something like this so for example if you want to ask someone to insert a password so we have password like this um and we'll just change this variable with password so pass for short um and now maybe we wanted to check we wanted to say um well oops well let's just do password because pass is a keyword in Python I forgot about that um password and we want to make sure that the password has for example at least one letter in it well we're going to keep asking the user to reinput their password until it meets these certain criteria so for example it might have to have one Capital it might have to have one letter in it uh it may have to have a few numbers something like that right so we would keep asking the user for a password um until they gave it to us correctly now the reason we wouldn't use a for Loop for this is because a for Loop um usually we know how long we want to run the for Loop for um that's why we put a number in the range so for example we put 10 or we put 12 while as a w Loop we don't know how long we're going to run it for so for example someone could get the password first try like they could put it incorrectly um with the right criteria or it could take them 30 tries right we don't know how long it's going to take them okay so that's it for today's video um if you like the video please like it and subscribe and I will see you again tomor tomorrow with a uh new video hey guys guys welcome back to the eth video in my Python Programming Series today we're going to be talking about lists now lists can be fairly complex uh but they are a very important part of python and they are very important to understand so a list is another data type so before we talked about strings integers booleans and floating decimal points so floats um and today we're going to talk about list so lists again are their own data type so let's just start off by doing an example right now so pretty much uh a list which is denoted by the square brackets here uh is a collection of different data types it could be the same data types or it can be different data types so for an example I'm going to put a apple in here in my list I'm going to put a comma and I'm going to add another item so maybe we'll put a pair and then maybe we'll put a number as well okay so we have the list fruits and in the list we have three items um now everything here separated by a comma is known as an item so for an example our apple is an item our pair is an item and the integer three is an item now you can see that they're all different data types or sorry there is different data types we have two strings and we have one integer value um now this is fine you can store um different data types in one list um okay so now let's just print the list to the console so we can see what it looks like print it out and you'll see we simply get what exactly what we we've typed uh into the idle so we get apple pair and 3 now if we want to access an individual item in the list we need to do something um a little different so right now we just printed out the whole list but say we want to just print out pair um now what we're going to do is we're going to use the square brackets so we're going to do the list name so fruits and then we're going to put square brackets right beside it no spaces and then inside of the square brackets we're going to type in what's known as the indic of that item um so the way indices work in Python is when you create a list everything is automatically assigned in indic um so in this list we have indices 0 through two now it may seem weird that we start at zero instead of one but that's just the way that computers count um and the way that they work so we have to understand that apple is going to be assigned the integer value of zero so the indic zero meaning I would put zero in here if I wanted to access Apple because that's the first element in our list and then we have pair so that's the second element or item um now that's actually going to be represented by one here so fruits one will give us the value of pair and then fruits two will give us the value of three um now this is uh sometimes difficult for some people to understand but just really try to remember that the first item always is zero so if you would like to access the second item in your list you're going to type in one um into to the indic thing here okay so I'm just going to run this and show you how this works and you see we get pair okay that's because um we have the first indic which represents the second item which is pair okay um now there's some other things we can do with list as well so if we want to add something to our list there's a few ways that we can do it um the first way uh which is the only one I'm going to show you right now is probably the easiest and simply what we're going to type is fruits followed by the dot uh so a DOT a period and then we're going to type a pend okay now this means to add to the end of the list so inside of a pen I'm going to put the element or the item that I'd like to add so say we want to add uh another fruit let's think of another fruit that we could add maybe a strawberry okay we want to add strawberry into the list I'm just going to get rid of three so it makes more sense okay so right now in our list up here we have fruits which is a variable name um containing the list that has Apple and pear now we want to add strawberry to the list so let's start off by printing the list before we add it so we'll print off fruits and then we're going to print fruits one more time after we add this item to the list and you see we have the first list which is what we defined originally and then when we added or appended strawberry to the end of it it added it in just like this so that is a way that we are able to add things into a list um by using dot append now there is another way um it's known as the slice operator using something called insert um but we're not going to do that right now we're going to talk about the slice operator in a later tutorial so stay tuned for that okay so fruits. append we've added strawberry um now if we wanted to add another item we could do the same thing and we could do append again and we could put in another fruit maybe we want to put in a blueberry okay just like that and again we'll see that it does the same thing we have apple pear and then apple pear strawberry blueberry okay um all right so that's it for adding to the list um now what about changing something in our list uh so let's just add right here at the beginning we'll put in Strawberry so we have three items and now let's say we want to change the middle item in our list to a different fruit say we don't like pairs we want to remove it we want to change that so what we're going to do is we're simply going to type the um the name again so fruits followed by the square brackets and then the indic of the item you want to change um so again remember if we want to change pair we're going to use the Indy one um not two because this is the way that it works we're going to use one and then we're going to change it to whatever we'd like to change it to so say I want to change it to Blueberry I can do that like so and then again we can print out fruits and we'll see if it works okay so we get apple blueberry and strawberry that's because we''ve changed uh the item at indic one into blueberry and we've replaced that we replaced Paar with blueberry pretty much okay um so that's how that works for list for changing items again um we you lists are very useful for storing large amounts of information so this is a very small list but in many programs we use something called multidimensional list uh which I'm going to talk about again in another tutorial um and yeah so one more thing before we end it here uh there's another data type called a tuple so a tupal um it's kind of hard word to pronounce but it's used for coordinates and it's also used um for things like colors and rectangles um it can also be used just to hold information as well but it's a different type of data type um than a list so we're going to talk about it quickly uh okay so a tuple pretty much looks like this so if we set a position and we set it equal to something like this not in square brackets in the regular round brackets and then we simply put um the items in like this now we see we get um it looks very similar to a list the way that it works again we can use different data types so I could put something like hello in here as well well um but it does function a little differently and again things like colors we would also store in a tuple so we would use like 255 255 255 that's simply white in uh red green blue colors and again if we print out the type of the color you can see that we get a class tupal okay so I'm not going to go too in depth with the tuples here I just wanted you to understand what they are because we may be using them in some later tutorials okay so I hope you learned how to use lists and a little bit about tups today they're going to be important in the next tutorial um so yeah I hope you enjoyed if you did please like And subscribe and I will see you in the next video hey guys welcome back uh today we're doing the ninth video in my Python Programming series and today we're going to be talking more uh more about for Loops so a more advanced type of for Loop in terms terms of iterating through a list so you may remember a few videos ago we talked about for loops and I mentioned that there are two main type of for Loops that we can use um and the one that we talked about there was looked like this so we had for X in range and then we had a range like this and we simply printed out the numbers like this so we see we got 1 to 10 just like that okay uh so that was the for Loop we talked about there um but the one we're going to be doing today is is a little bit different so I'll leave this here for an example uh so the first thing we need to do is we need to make a list because we're actually going to be iterating through every item or every element in the list so again I'm just going to use the same example I used in the other video fruits and I'm going to make it equal to we're going to have apples pears and strawberries strawberries just like that okay so we have our fruits here and now um we're going to get right into the syntax for this new for Loop so we're going to do four and then any variable name we'd like so in this case I'm going to use fruit and then we're going to use the keyword in once again and then instead of typing range this time we're going to type the name of the list we want to iterate through so in this case it's going to be called fruits just like that and now um we can print out the fruit sorry the fruit just like that so pretty much what is going to happen is we have a list with three items in it we have apples pears and strawberries now we want to print every fruit in that list so we do that by saying for fruit in fruits meaning for every item in fruits so one two and three items we simply want to print out that fruit so this Loop is going to run three times and we're just going to print out every fruit inside of the list just like this and there you go we have apples pears and strawberries just like that um so yeah that's pretty much how you can iterate through a list and same thing if I want to add more elements to the list so 8 um 90 just like that again it'll just simply print out all of the items in the list now uh why might we do this you say well there's a few reasons we may want to iterate by item rather than by indic so the other one uh the in range is known as iterating by indic or by index well this one is known as iterating by item so there's a few reasons we might want to do this but the first one is if we only want to print something out uh if it's a certain value so we just want to check through all of the items in the list and see if there are certain value and if they are then we're going to print it out or we're going to do something specific to that item uh so in this case I'm going to say if fruit is equal to for example pairs then I want to print out pairs so we'll just print out the fruit but if it's not equal to pairs so anything else then I will print out not pairs like that so this is an example of how we can look through every item in the list um and simply check if it is a certain value and then if it is we're going to print it to the screen so we'll try this and we see we have not pairs pairs and Then followed by a few more not pairs um so that's a good way to do it by item um otherwise we can still do this using Indy uh it's just a little more complicated or not as efficient so we could do 4X in range and then in this case we'll do zero and six because we have to do it six times because there's six items in the list and then we'll put a colon and then we'll say the same thing so except this time we're going to say if fruits followed by the square brackets and then X because this is going to be our indic equals equals pairs then we want to print fruit or fruit X oops otherwise we'll print not a pair just like we did in the other loop not a pair okay so we'll run that and we see we get it twice just because I had two for Loops there so it does work uh the exact same way except you can see that this one takes longer to write because we actually have to put the list name followed by the square brackets whereas in this Loop all we have to do is simply type in Fruit um because it's automatically going through the list um another reason too we may want to do that is because in this case we had to actually see how many items were in the list by counting um and then we had to put that number in whereas here it'll just stop at the end of the list automatically um now we could do this so Len this is a new word so I'm just showing this now uh this means length and then inside we can put something like a string or a list so in this case I'm going to put the length of fruits and that would give us a value of six and you'll see if I just get rid of this that it'll work the same way again um um by using the length of fruits okay so that is how to iterate through a list by item uh I hope you enjoyed if you did please leave a like And subscribe and stay tuned for more videos in this series hey guys welcome back today we're going to be doing the 10th video in my Python Programming series and today we're going to be talking about string Methods um so a method is simply something you can call on a string by using the delimiter of a period followed by whatever the method is and then brackets like this now sometimes we have to put some things inside of the brackets um but most of the time we can just leave them with empty brackets okay so let's get right into an example we're going to start by talking about the dot. strip method um now what this one does is it pretty much removes all of the leading and trailing white spaces from a word or from a string sorry so we'll start by just making a variable and we'll make it equal to the input from the console and we'll just say input something like that and then we're just going to print out our input so oops print out text do strip okay so again what strip does is just going to remove all the white spaces before and after the word and it's best to show you with an example um so you can see if we type a few spaces so 1 2 3 4 and then I type hello and then a few more spaces and I click enter it simply gives us hello that's because it had removed all of the spaces from the string while as if I don't have the dot strip here so if I get rid of that and we run it and I do some spaces again and I type hellow and some more spaces it's going to give us those spaces as a part of the string and most the time so when we have a string we want to remove these spaces so that's why we use do strip did I spell that right strip yeah just like that okay um all right so that one's pretty straightforward just removes these spaces now you may want to do this if you're checking um if a string is equal to a certain thing and you're getting a user input and they may have accidentally typed the space before or after the word right okay so now we'll move on to the Len um so this one is actually not a method because you don't call it using a DOT um using a period followed by the word it's actually known as a function which I'll get into later so this just means that it takes something inside of the brackets um so this stands for length Len and pretty much what it does is Returns the length of a string or of a list so right now we're going to use a string and we're going to put text in here and I'll show you again what it does um 1 2 3 4 5 remember although this is a number since I'm typing it in the console it actually gives me a string value so this will work and it says that the length of this is five again uh that one's pretty useful I used it in the last video um to determine how many times we had to iterate through a list because we got the length of the list all right now for lower so pretty much what lower does um is it turns everything into lower cases in our word um so again it's best to just show using an example if I type something like this uh uh with a few lower cases a few capitals and I click enter you see we get everything in lowercase letters all right and now for Dot Upper you can probably guess what this one's going to do it's the exact same thing except in this case everything is going to uppercase so like this and you see we get all uppercase letters all right um and now for the last string method that I'm going to talk about although there is T tons of different string Methods um there's probably over 40 or 50 I'm going to leave the link down below to all of the string Methods on the python website so you can go check them out if you'd like to see some more um so this one is called do spit now this one I'd say is probably one of the most useful methods that I um that I use all the time and what it does is it actually creates a list out of the string that you give it um so inside of these brackets you're going to put what's called a delimiter and what a delimiter is is pretty much what you want to split by so for example I'm going to put a period in here just so we can get an example so we have text dosit and inside of the brackets for dos split we have a period so it's best to just show an example oh invalid syntax I think I have one too many brackets there yes I do okay so we'll run it so I input something I'm going to type hello. tim. by. High just a few random words and you can see they're all separated by a period or by a DOT now when I click enter you see we actually get a list with all of the words and you notice that we don't actually have a period in this list that's because the way that do split works is it gets rid of the delimiter so since the delimiter was a period it's not going to include the period in this list now this may be kind of confusing um we'll do a few more examples so hope you hopefully you can understand so usually what you do um is you would you you would leave these uh brackets blank so you wouldn't put anything in them and by default Python's going to say okay well I guess you want to eliminate by a space um so the way that we can do this again um what'll happen is if I type a sentence like my name is Tim um and I click enter you see it separates by spaces and we have no spaces in our list because it removes those spaces now you could also diiminate by anything you like so I could do an a for example um now if click F5 and we just type a bunch of letters and I put an A and then another a you see we get um the letters and again there's a space at the end because I typed a space right um so yeah okay so that's how dot split works now splits very useful um if you want to do certain things with a list we're going to talk a bit more about it later on um but those are some basic string Methods that we talked about today again there are tons more on the python website which I will link down below um if you like the video please like And subscribe and I will see you again later hey guys welcome back to the 11th video in my Python Programming Series in today's video we're going to be talking about the sliced operator um which is a cool thing that we can use on lists and and strings in Python so if you remember in the previous video if we wanted to access an element in our list we did fruits so the name of our list here which I've already got defined as apples pear and strawberry um and then we would do the items so for example fruits one and we can print that to the screen um just to remind us what this did and we got pair just like that because that is the second item but to reference that we have to use one because in computers we start at zero right um okay yeah and I just wanted to mention I didn't don't think I did this in the list video that you can actually do this on strings as well so say I wanted to access the E there I would just do text one and we get the E because that is the second uh item in this string or character maybe I wanted to do the 11th one then that would give us another E because 11 is right here at the end of like so yeah now what does the slice operator look like so pretty much the slice operator is these two square brackets but inside of them you're going to put two colons just like this now these colons in between them we type some words uh or we're going to put some numbers but in this case I'm just going to show you with words so we have start stop and step um that's what goes where these colons are now if I remove this colon that means I just have a start and a stop and then if I remove this colon I just have a start and that's how we reference what element we want to uh we want to print out right right if we had just put a number there so we'll add the back in and this now we're going to use numbers so the start stop and step works exactly the same way as the range function so you may remember when I did a for Loop we did 4X in range and then inside of the range we did some numbers like this so we would start at one stop at two and step by three like that right so it works the exact same way except in this case we're going to be using um it on lists and on strings right without these numbers so the range like this okay so let's just do an example um so let's start at zero and let's end at this o so the O is 1 2 3 4 five um but if I want to actually include the O I have to put five because remember five would be the space here um and if we stop on let's say four here you'll see what's going to happen um it's not going to print out the O uh because when we stop we do not include that number remember from the range function so if we want to have the O we'll stop at five just like that hello um okay yeah uh now if we wanted to start just from the beginning say we didn't know um all we have to do is just put nothing there and it's going to default start from the beginning so it'll give us the same thing and then if we wanted to start from somewhere so say we want to start at two and we just want to go all the way to the end now we say we don't know how long our string is we don't want to count all of these things and say oh well let's stop at 17 or whatever number it may be by just leaving this blank it'll actually default to stop at the end of the string and you'll see that so we get l l o I like python right it stopped at the end of the string automatically okay so now let's talk about the uh the step feature so if we want to start at the beginning and we want to stop at the end we'll just put nothing in between these two colons because it's going to default from the beginning and default to the end but now we want to skip every other letter that means we're going to put a two here for the step so that way we're going to get h l o then we're going to skip the space here we're going to get I skip the space get L and so on so I'll show you and you see we get that um a bunch of gibberish like this maybe you want to go every third letter that means we would step by three like this and there we go we get a few less letters and same thing we could do four five um and continually going now say we want to start at the third letter or the fourth because we're typing three here so L um we want to stop at the end and we want to step by three then you can see what's going to happen there so we get l i i TN right so a bunch of gibberish okay now this works again same thing for fruits uh it just I don't have as many items in the fruits list so that's why I was showing you with text but if I put the colon in here and we put another colon uh let's say we start at let's start at one so that means we're going to start at pair and let's just go to the end and we'll print that out and again we get Paar and strawberry so we didn't include the apples because we started at pear right so yeah that's pretty much how the slice operator works now there is one other cool thing we can do with the slice operator um and it's called the insert function or the insert kind of uh thing with the slice operator so if you remember uh we H when we wanted to add something to a list we use dot append right so I showed you that in my list video we did fruits. append and then maybe we want to add blueberries like this I know that's spelled incorrectly but there we go we'll fix that quickly blueberries okay and then we can print out fruits once again just to see what it looks like so if you remember this just adds it to the end of the list but say we don't want to add blueberries to the end of the list we want to add it in between Pairs we want to add it in between Apples and pear um we want to add it at the beginning we want to add it somewhere else right how would we do that well we can use the slice operator to do that so instead of using the dot of pend we'll use a slice operator so we'll go like this and this time we're going to just put one callon and then type the indic see where we want to insert it so if we want to insert it at the beginning we're just going to type zero and then zero like this we do need to do them on both sides and then an equal sign and we'll set it equal to whatever you want in this case we'll just put B for Simplicity and you'll see we get B at the beginning of our list now say we want it in between Apples and pear well in that case we would put one and we put one again like this and we get apples comma B comma pear comma strawberries just like that now if we want to add it to the end um we would have to find out what number that is so we do 3 three I believe that should work we'll see yeah so that adds it to the end for us um and then if we want to insert it in between pear and strawberry we would do 2 two like that and there we go we get it in between there so that's how the insert works for the slice operator um I hope you learned how to use a slice operator today we will be using it a little later in some other videos and doing some more complex things with it um if you liked the video please like And subscribe and I will see you again in the next one hey guys welcome back to another video this is the 12th video in my Python Programming series and today we're going to be talking about functions so this is a function up here um we're going to talk more about the syntax and what a function does but it's first important to understand what is a function well if you're in math you know that a function pretty much you pass it an x value and then it does something to that x value and you get a yalue back well it's a similar idea here in Python except there's different types of functions that can do different things so the first function I've just written right here um pretty much I've named it add two and what happens is we give it an x value and then it simply returns x + 2 now this doesn't have to make sense to you right now I just want to show an example of what a function looks like so if we wanted to make our own function what we would type is we'd type DF this stands for definition um and then the function name so maybe in this case I want to do another math related function so I'll do subtract two and oops two as a word and then I'm going to put two brackets and inside of the brackets we're going to put something that's called a parameter so in this case I can name it anything I want I'm going to put number in here and then I'm going to do a colon click enter it should tab me in one space and I'm simply going to return X or sorry number minus 2 now I'm I'll talk about what all this really does um a little bit later but I just want to give some examples so now if we want to call our function or want to actually use these functions we have to do something we can't just leave it like this I'll show you if I run this right now nothing's going to happen what we actually have to do is we have to do a um call statement so what I can do is I can do add to and then in here we have a parameter X but what's actually going to happen is I have to give add to a number because we're going to add two to that number and it's going to be returned so let's say seven now you'll see what's going to happen here uh I'll run it quickly and nothing prints out to the screen that's simply because we haven't printed anything what actually happens is in this add to call statement we have it sets x equal to 7 so it comes up here and it says okay we're going to add two to S so we have X here we add two and then we're going to return that back down here so pretty much we call this function and it returns it right here now I have to set this equal to a variable or simply print it out to the screen so I'll set it equal to a variable right now so I'll say new number is equal to add to 7 and now if I print out new number like this we get nine okay so that that's how that works all right now what about subtract two so we can do the same thing here with seven so we do subtract two we'll leave seven in here for number and you'll see we get five so that works correctly now I can do it again I could do 12 and we get 10 and maybe I could even change what I want to do in these functions so this one's called add two but maybe I wanted to add two to X and then I wanted to square it so then I would do that and then if we go back to the add two so I'm going to put 12 + 2^ 2 which should be 14 squar which will be a pretty big number which will give us 196 just like that so you can kind of see um and understand how these functions are working they have a parameter this is what that's called up here so a variable name I could do X I could do y I could do Zed doesn't matter I can do any letter I want any name I want um it makes sense to call it something that makes sense in terms of the function so here x works fine but if I was doing a string so maybe we want to write another function let's let's do another function here and we'll do Define and we'll call we'll say print string and now inside of here I'm just going to put string like that as our parameter name and then we're simply just going to print the string to the screen so now what actually happens is instead of setting something equal to a variable all I have to do is I have to do print string this is my call statement and then in here I'm going to give it a string so I'm just going to type hello and you'll see if we run the function we get hello and we didn't print it down here we just printed it from the function so I know I've gone kind of fast but the easiest way to understand the functions are to show examples of them and how they're working pretty much there's a parameter I'm going to give the parameter I'm in the argument of the call statement so this in the definition of the function is called a parameter and in the call statement in between the brackets it's called an argument um so those are just some key words now I can actually use these functions as many times as I want so I can print string again and I could print my name is Tim just like that and you'll see it should do it twice yeah there we go so that's why these functions are extremely useful because say for example I'm writing a big program and I know that I would need to do a certain thing multiple times well I don't want to have to constantly write it out um in the main line of my program here when I can just have a function that's going to do it for me and all I have to do is call that function using a simple call statement like this so we haven't really done many big programs yet where functions make sense but you'll see when you start programming that you're going to be using a lot of functions um to do things because you're going to be repeating code um now these are very basic functions we have subtract two add two but you can have like physics functions for example if I know I'm need to find the uh acceleration of an object then maybe I would make another function here and i' do Define excel I'll just do like that uh short form and then I'll put in mass and the force like that so you see I can actually have more than one um parameter I can have two parameters here and I'm going to say a is equal to mass Time Force I know that's not correct but we could do something like that mass time force and then I could return the variable a and now if I I called my Excel function and I printed that to the screen well that would give me what the acceleration would be right um so that those are just some examples of why functions are extremely useful well we're going to talk more about functions I'll do a more advanced tutorial um a little later on but this is just an introduction so that you can hopefully understand how they work pretty much you have if you're writing a function you have the deaf keyword um you have the function name so this case it's highlighted in blue so I did add two then you have brackets and say for example when we do a function we can actually do one without a parameter so I could do Define do something and in here I could simply print high right I don't need to have any parameters that just means when I call this function so do something I don't put anything inside of the brackets right we just do this and we see hi hello my name is Tim right um so yeah doesn't have to have parameters it can have multiple parameters um if for example in this acceleration function you have multiple parameters that means that when you call the function so I'll do an example here then you're going to have to put two numbers in or two strings so I do 2 comma 5 like that and we'll print this to the to the screen because we don't print it in that function so we can see what we're getting so yeah we get hi hello my name is Tim and then 10 right so acceleration 2 okay um so yeah that's just the basics of functions we're going to talk more about them uh in more in depth later but just try to understand how they work and yeah so if you like the video please like And subscribe and I will see you again later hey guys welcome back this is the 13th video in my Python Programming series and today we're going to be talking about reading from a file so specifically a text file and we're going to be using something called file.io in Python so the first thing we need to do before we can read from a file is we need to create a file so I'm just simply going to go and find the directory where my python tutorials are so oops not here they are right here in the tutorials folder um and now you see I've got all my python uh scripts right here and all I'm going to do is I'm going to right click and I'm going to click new and then I'm going to find text document like that now I can name it whatever I like I'm just going to name it file for right now file. text now you may want to populate the uh text document so put some words in here so I'm just going to put a bunch of different words hello Tim python Learning Easy just some random random words in my text file I'm going to save that um and now we can go to reading in the text file so it is important that when you make the text text file you do have to save it in the same directory as your python script so if I were to put the text file here on my desktop and I have my python script in the tutorials folder here it's not going to be able to find the file properly um you would have to do something which is a path joining which I'm not going to talk about in this video but maybe in a later one so make sure that you save your file in the same directory uh and same folder as where your script is okay so now that we've done that we're going to read from the file so the first thing we need to do is we need to create a variable so we're going to name this file you can name it whatever you'd like and you're going to set it equal to the keyword open and then inside of open all you're going to do is you're going to type the name of your file so file. text a comma and then the mode you want to open your file in so in this case we want to read it so we're simply going to put a lowercase R inside of the quotations just like that and now that's pretty simple that's all you have to do in python to open up the file and to prepare to read it now make sure you do put R in here if you put nothing or you put a W for example which would be write mode it's actually going to clear the whole file which you don't want to happen you want to leave the contents of the file in there right so we need to open it in read mode with this R that's very important um now what we're going to do is we're simply going to read all of the things from the file so we've opened the file now we need to read it so in order to read the file uh we have to type a few things so we can do it in multiple different ways the first way I'm going to show you is this so I'm going to make another variable I'm going to call it f and this one we're going to make it equal to file. read lines like this okay and then we can simply print out F just to show you what's going to happen you see we get all of the words that are in the file now there's an interesting thing here you may notice that there's a back sln attached to all of the words except for the last one that's because I'm going to open up the text file again and show you um you notice here I didn't actually type back sln but every time we click enter like this it actually creates something called an escape character which is that back sln so if we want to read in the file we're going to have to remove that um character afterwards right so it's just something to keep in mind that if you have things on different lines each of the end of the lines is going to have a back sln on that line that you don't actually see here in the text document but python will read that in okay so we don't need to save that um yeah so let's move into the second way to read it properly now so we have f equals file. read lines now we want to remove all of these back slashes uh get rid of these ends from our lines so there's a way we have to do that and it's by using a for Loop so we're going to do a for Loop just going to say for line in F because now F has read all of our lines so we're going to do what's called iterating by item if you remember from my other videos so each line so every item in this F list here that just created by file. readlines we're going to remove that character and we're going to create a new list so let's make a new list we'll call it new list just make it a blank list like this new list and then here we're going to say um what is it new list. a p and if you remember what a pen does that simply means add to the end um of this new list and then we're going to add the line and we're going to use the slice operator to remove that back sln so we're going to Simply do the colon and then1 now what this does is we it will H take all of line except for the last character so negative one um I didn't talk about this in the other video but negative 1 pretty much just goes to the last character but does not include the last character when you do negative 1 like this so just just follow along for now you don't have to completely understand it but just put that negative one and now if I print out new list we'll see what we get new list F5 and you see we get rid of all of the back slash ends now we have one issue here um down here on ease uh it should say easy but we've actually removed the last back sln from that string so if we don't want to do that now we need to actually add an if state statement into our for Loop so inside of the for loop we're going to type if and then we'll say line and we'll put a negative 1 again to represent the last character in that line equals equals back sln and then we'll simply tab this in because remember everything in Python needs to be indented properly for it to be read um and now we'll try this and we'll see if this works and there we go so we got hello Tim Python and learning but now we forgotten one thing we haven't actually included easy so now we need to do an else statement so we have else and then we'll do new list do append and we'll simply append the line just like that and now we can print it out and we will see what happens and we get hello Tim python learning and easy now there is an easier way to do this I just want to show this example because you may want to do something where you're checking through all of the lines and you want to see if the last character maybe the first character is equal to a certain item and depending on what that string is or depending on what it is you may want to add it to a new list you may want to do something to it so I just want to show you a way that we can do that pretty much this is iterating through every line in the file so file here so F creates a list of every line and then we go through every line of it and we see we say if the end of it has this back sln then we're going to remove the back sln um otherwise we'll just add that line into our list right okay so now the easier way that we can do this is actually with something that's called The Strip string method so in my other video I talked about this strip method that removes the spaces but what we can actually do with this uh is we can remove what do you call it sorry we can remove the back sln with the strip method as well so all we have to do here now it's a lot simpler is do new list do append and then inside of here we're simply going to type line. strip and now this will automatically remove those back SL ends and we'll see if this works there we go so we get everything and you can see it's a lot simpler and we don't even have to do the if statement um for the easy like that so that pretty much is how you read a file in using python there are some other ways to do this but this is the most basic and easiest way to understand we've also talked about how to remove that it's called an escape character at the end of the string that back sln and in the next video we're going to talk about writing to a file I hope you learned something if you did please like And subscribe and I will see you again in another video hey guys and welcome back today this is the 14th video in my Python Programming series and we are going to be talking about writing to a file so in the last video we talked about reading from a file and now we're going to be writing to it so the first thing we need to do is create a file so we already have a file created here called file. text I did that in the last video and inside we have nothing so I'm just going to put the word hello in here so that we can test something out later okay now it is again important that you have this file in the same directory as your script so tutorial 14 which is the script I'm using right now uh is in the same directory that's important otherwise python will not be able to read that file properly okay so now we're going to do the same thing we did in the last video we're going to do file is equal to open the file name so in this case file. text oops that has to be the lowercase my bad file. text and the mode so in the last one we used R but in this case we're going to use W and that stands for right now there's one thing we need to do which I forgot to do in the last video and that is close the file so we do need to actually close the file so that it saves our changes which I forgot to do in the last video and it's very important that we do that so my apologies but here we go file. close and again if we had changed this name to anything else then we would do that name do close because the file is contained in the variable file like that okay so now we want to write to the file so all we have to do is type the variable name so file and then do write which is very simple and inside here I'll put a new word I'm going to put python like that now before we run it let's notice what is inside of our file. text so in here we have the word hello now I'm going to run the script and nothing happen here obviously because we just wrote to the file but when we open the file again you see now it says python now what actually happened was we removed the word that was in there before so hello and we over wrote it with python so what happens in this mode here W is it actually clears the entire entire file and then it writes what you want to write to it so if you have this W here it is going to clear the entire file now there's a way to get around this but I'm not going to be showing that in this video today okay okay so let's write something else to our file so file. write and then I am learning how to write to a file just like that and again we'll run the script and we'll open the text file and you see we get everything here on the same line so that's okay um but you may want this to be on different lines so how would we do that well if you're remember from the last video there was something called an escape character that we got when we read in the file we had that little back sln attached now that's the same thing we need to do when we're re writing to the file if we want things to go on a different line so on this line here I'm going to type the backs slash and then the N uh and now what's going to happen is it's going to have this Escape character which is going to tell python we need to move to the next line and then it is going to type this right here so we can show what's going to happen here we go F5 and then if we open up the file once again you see Python and then I am learning how to write to a file so that happened again because we use that back sln the Escape character now same thing we could use this in between uh a line so if we wanted to write a large thing and we want it on different lines then we can put the Escape character in there like that same thing open the file again and we'll see what happens and we see we get it on a different line so that's how you can write things to a different line uh now this has been a pretty short video today but that's really all it is uh to writing something to a to a file in Python now in the next video I'm going to show how we can write and read to a file at the same time so that would involve not wiping the entire file when we open it but if you learned something today please like And subscribe and I will see you again in another video hey guys and welcome back today this is the 15th video in my Python Programming series and we are going to be talking about some more methods that we can use on strings and on lists these methods are I'm going to put them in a comment so that I remember is theind and the do count method and now these can be used on strings and on lists so let's go right ahead and give an example so the do find method this is this is a uh very useful method in Python it's not in a lot of other languages so it is specific to python so what we can do is we're going to make a variable we're going to call it string now we can set this equal to whatever we want so let's just say hello for this case for Simplicity and then we're simply going to print string oops if I spelled it correctly string doind and then inside of theind brackets here so the argument for this meth meod we are going to put in what we want to find so we want to see if we can find the indic of any of these letters here so if I put in L you'll see what happens is I get two and that's because there's an L the first l in the string is found at the indic of two just like that um now you may be confused right now I haven't completely explained it but that's fine so as you can see we have two L's in the string right now when I put in this l in the brackets it gives me a value of two now that is where the first L is found in the string if I put in O for example you'll see it gives me four and there's only one o in the string so it gives me the value of where that o is which is the fourth indic of the string the fourth index uh if I put in h you see we get zero and now notice what happens if I put in a number or a letter that's not actually in the string so I'll put in seven for example the string seven and you see we actually get1 that's because if python does not find that inside of the string it's going to tell you that it's negative one so rather than zero it gives you negative 1 just like that so this is useful because maybe we want to check in a password for example if it contains a certain elements so maybe if there's a dash in there we don't want them to be able to use that password or maybe we're not allowing a certain character or we need a certain character to be in a password or a string this is where find is useful um and it'll tell us if that's in the string or not now there's actually another useful uh string method here that is do count now it does a similar thing except instead of finding the index of the letter it counts how many of them there are in the string so now we're going to go to do count so we'll go do count like this and again inside of the brackets we're just going to put a string uh so let's do L and you see if we F5 here we get the value of two that's because obviously there are two L's in our string now I'm just going to type a bunch of random letters and show you that this does work for all kinds of things so if I type in a for example see how many A's I typed we have six A's in that string now let's try a zed I know I didn't use Zed here I'm pretty sure at least oops that's my bad uh we forgotten a uh parenthesis there sorry okay and we get zero right so instead of 1 it counts and it says well there are zero of them in the string so we're going to return zero again we can use this to find if there's a certain character in the string so if we say you can only have a maximum of three numbers in your string well we could count and we could say if there whatever how many numbers right um the dot find is different than this because it actually tells us where that is so if I do find again and now maybe I put in an a well we know there's six A's in the string but which a is this one going to give us so it says five because that is the first place that an a occurred in the string so we see here at the fifth indic or index that's where the first a is it's not going to give us the A's from back here if we wanted to find the A's back here we' have to use a for Loop and we'd have to Loop through the string in different parts of the string to find where all the A's were um again yeah so that's how you use doind and do count it's very useful if you want to check certain things so I'll show you an example here if we wanted to check a string how we would use the count method or the do find method so I'm going to say if string. count and I don't want to allow any let's say underscores in my string is greater than zero so that just means uh if it's I guess we could also say not equal to zero so if it has if it contains at least one of these underscores then we're not going to allow it so we're going to print to the screen not good just like that okay just to show how this works now here instead of actually having a preset string we're just going to get input from the console so we can do this a few times and see so input and we'll say please type something as the prompt like that and otherwise so in L state in here if it doesn't contain any underscores we will print good like that okay so now I'm going to type hello that was our first string and oh what happened there good so we get good sorry I don't something glitched uh in the program there we'll rerun it I'm not sure what happened there F5 please type something I type hello there we go now we get good I'm not sure what happened the other one okay so now let's do it again and this time we're going to include an underscore so we'll do underscore uncore hello it's going to say not good because it counted these underscores and it said well there is more than zero underscores so it's not good and then same thing if we put an underscore in the middle of the word or we put a ton of underscores so h e l o whatever just like that uh not good because there's underscores in the word just like that and yeah that's pretty much how the doind and the do count methods work there's a ton of uses for these and it's really useful um that they have this method because in a lot of other programming languages they don't have this count and find so it makes it a lot harder if you're trying to find how many things are in a string or if you're trying to find the index of a letter so I hope you learned something I hope you enjoyed if you did please like And subscribe and I will see you again tomorrow for another video hey guys welcome back this is the 16th video in my Python Programming series and today we're going to be talking about python modules and import statements so this is something new that I haven't talked about yet but python is a modular programming language meaning that we can use multiple files together to create one program and you'll understand what I mean later in the video when I show some examples um but yeah so pretty much in Python at the beginning of all your Python scripts what you typically do is you write something like this it says import and you can see this highlights an orangey yellow meaning that it is a keyword in Python now there are many builtin modules or what they called um in Python that contain a list of functions and classes that we can use in our python script so for example the math module import math this allows me to do things like dot square root or it's the square root function which I believe is like this and then you can put something inside of it um so yeah there's plenty of cool things like that there's another module it's called pame Uh we're going to be doing this later I'm going to be talking about game development with python if you want to see that leave a comment down below and I'll get it started soon and then we have import we can also import something called OS and this gives us uh opportunity to do things like file paths and lots of different things like that we can import images we can import tons of different things into our files um in Python so we're just going to use the math module today for demonstration purposes but pretty much what happens is there's a bunch of builtin modules in Python so this one is known as a builtin module math uh when you download and install python it pretty much you download that module the pame module that I was talking about is not a builtin module that means you actually have to go to the internet you have to find it and install it on your computer before you can import it into your Python program and now what's really cool about python is that it's an open Source language meaning that you can actually create your own modules um and they contain functions classes and you can use them in many of your different programs or you can also send them to a friend maybe or post them online for other people to be able to use so let's get right into it and uh let's do some things here so if we want to use this math module we have to first start by typing math so the name of our module here okay so math and then afterwards we're going to do the name of a function or a class in that um that math module so you see a bunch of things pop up there uh in that little box so if I do the dot again in wait a second it should pop up yeah so there we go and you see we have cosine s tangent all that stuff uh degrees factorial all these things inside of our math module so these are new things that we wouldn't be able to use before so I'll show you if we do math.pi and I print that to the screen well we should get an endless number of digits like this math. Pi uh is it running there we go so it just had to print a bunch of numbers so math.pi it didn't print all of them I think it only went to 10 decimal points um so yeah and then I'll show you if I comment out this uh this import math what'll happen if I try to do this we get an error because well math is not defined we didn't import it at the top of our program so we'll uncomment this now now I can do things like math. degrees uh degrees simply turn something that is in radians into degrees so if I did math. Pi in here for example and we print that to the screen we get 180 degrees like that uh they also have the math. radians I believe which does the opposite so it turns a degree into a radian so if we did 60 degrees here like that and we get 1.47 which is about pi over 3 uh radians like that so yeah there's lots of cool things that we can do with these modules now I'll actually show you an example of how we can use our own modules and how we can import our own modules into our function so I'm going to just start by typing import I'm going to type my module just like this okay um now I haven't actually created this module yet we're going to do that in just a second now I'm going to go and I'm going to find the directory that my main script is in so it's in tutorials up here I've got this open and remember uh how we had the file in here as well because it has to be in the same directory so I'm going to create a new file in that directory so file new file I'm going to save this one as my module now spelling is very important again capitals do matter uh and it has to be in the same directory as our main script which it is like that now inside of this module I'm going to write a very basic function if you haven't seen that video yet go check that out first um we just talked about some basic functions and what they do in the use of them so I'm going to Define I'm just going to call it my funk like this it's going to take a parameter called X and all it's going to do is return x + 5 so very basic function like that but just for demonstration purposes here okay and now I have my module imported like this so I can actually use my module so I'm going to do print my module dot my funk because that's the name of my function and then inside I need to give it a number so what number do we want to use maybe we'll use six and we print this out and you see we get 11 so by simply all I did was create a new file put it inside of my um same directory as this script here and easy enough we were able to use it now I can actually create multiple functions in here so I can create Define another Funk like this that'll be the name this one will take X again and inside here I'm going to return X integer division five and then again we could use that one so instead of my funk we'll use another Funk like this and let's just type in a big number like that and see what we get there we go so again it's working perfectly fine so that's how uh modular programming is what it's called works in Python now obviously if you're going to be doing modular programming it's usually for larger uh programs and bigger programs where you want multiple files to keep things organized say maybe if you're doing a flight simulator you may have one module that includes all of your physics functions so you know that when you need to do physics you're going to import your physics function and then you can or module sorry and you can use the functions from there and the great thing about this is that these uh these modules are reusable in other python files I can import them and I can reuse these functions I don't have to constantly rewrite them inside of my script like this so this has been a very basic tutorial uh just an introduction to modular programming I showed the math module a little bit if you want to learn about some of the builtin uh sorry modules in Python then just go ahead and go to their website and you can see a bunch of the different ones that they have another one that we may be using later is called OS so the statement for that is just import OS and if you want to get started with game development you can look into pame which is this cool thing that I'm going to be doing a tutorial series on later so yeah that's been the video for today we talked a little bit about modular programming if you enjoyed please like And subscribe and I will see you again tomorrow with more content hey guys and welcome back to another YouTube video this is the 17th video in my P Python Programming series and today we're going to be talking about functions more advanced functions and something called optional parameters so let's just give a quick refresher of what a function is I'm just going to write one very quickly I did do another video on basic function so if you haven't seen that yet go check that one out first now here we've defined what we're going to call the function Funk and then inside of these brackets we put something called parameters if you remember that from the other video so in this case I'm just going to put X as my own only parameter and then I'm simply going to print x to the screen just like that so A very very basic function but it's just to give you a quick refresher of what it does now when we wanted to call our function all we had to do was write our function name and then put a brackets or the brackets like this and then inside of our brackets if we had a parameter set we had to do we had to give it that parameter so we could do three we could do hello let's just do hello in this case and we'll click F5 and we get hello on the screen screen just like that now we can change this again to maybe Tim which is my name just like that and we get Tim printed this screen very basic very easy just like that okay so that's pretty much what a function is now what we're going to be talking about today is more uh in depth on these parameters so you remember we can give it multiple parameters so we could do x uh and we could do maybe text like this so we had X and text and then we could print x to the screen and maybe we'll say if text is equal to um let's say one so the string one then maybe we'll print text is one otherwise so else we will print text is not one just like that very easy okay so now what we have to do when we call the function is we have to give it another parameter in this case I'm going to give it two and we'll see what happens we get Tim and then texter I misspelled that my bad is not one now if I change this parameter to one again we'll see that we get text is one now again that's just another example but in some cases when we call a function and we have many parameters or maybe we don't have many but we don't want to constantly be rewriting these parameters we want to have something called the default value for our parameters so X maybe we always want to give our function the value of x but in text here we always want it to be set to something unless we otherwise specify so in this case I'm going to say text and then the equal sign and I'm going to put two just like that now here I'm going to remove the one and you'll see what's will happen here we'll just run it to show you and then we'll go in what's actually happening so we get Tim and then text is not one so what actually happened here is since I didn't specify a value for text so I didn't do a and write something else here it defaulted to the value of two now we can prove that by just simply printing out text and showing you that it is actually two so we have Tim and two just like that um if I wanted to change this value now all I would have to do is simply put a comma here in the function and change it to whatever I want so in this case I'll do 67 and if we print it again you'll see we get 67 so that's how the optional parameter works now all you have to do to set an optional parameter is simply type an equal sign after your parameter so if I have X and I'll set it equal to three like that now when I call the function I actually don't have to give it any parameters because it already has the optional parameter of three and of two which are going to be the default values if I don't write anything in my function argument here so inside of these brackets and you'll see again we get three and two because those are the default values now there is one tricky thing that you have to understand about these optional parameters say you wanted to have X stay at the default value so you wanted it to be three and you didn't want to type three in the brackets like that but you wanted to change the text optional parameter to something like seven or eight or maybe another string well you can't actually do that in order to change this text optional parameter you would have to also set a value for x here so if I try to I'll say I just want to set the text to three so I'll do like three here it's actually not going to change um sorry what do you call it it's I'll change it something else so we can we can see it better five let's do five it's actually not going to change that second variable right it's going to change the first one automatically because that's just the order in which they're defined so if you want to if you have more than one optional parameter you will have to set a value for the one before in order to change the one afterwards like this so that's the only tricky part about these optional parameters other than that they're extremely useful again you would use them if you're constantly using a function and you don't want to have to keep writing in parameters you only want to give it a parameter in a very specific case then you would have that optional parameter already set so you don't have to keep typing a certain word you don't have to keep giving it a value like that so this is been a shorter video but this is the video on how to do an optional parameter they look just like this they're very simple and pretty basic and I hope you learned something today if you did please like And subscribe and I will see you again in another video hey guys welcome back to another video this is the 18th video in my Python Programming series and today we're going to be talking about something called a try and accept block of codes so just like we talked about the if else and L if block of code um and like we talked about the for Loop which is a block of code and like functions which are blocks of code uh we're going to be talking about the try and accept so in Python we use try and accept as our keywords in other languages you may have heard of try and catch statements um this is the same thing except in Python instead of catch we use accept Okay so let's talk about what a try and accept statement is sometimes in Python you want to do an operation or you want to try something but you don't know if it's really going to work or not there's some different variables that may come in sometimes it may work sometimes it may not work usually this depends on user input or what the user is doing in the program so a good example of this is maybe if we're validating a form so we'll do an example here we'll say text is equal to uh input like this and then we'll say username okay now in typical usernames you're only allowed certain characters maybe you can't do um a comma you couldn't do a star certain things like that right maybe we only want it to be text or we only want it to be numbers uh we just want to validate this we could use a huge if statement to do this um but instead there's something called a try and accept that we can use so in this case I want my username to only be numbers so I don't want it to be a string at all I want it to only be numbers so what I'm going to do is I'm going to make a new variable here and I'm going to call it number and all I'm going to do is I'm going to try to int the text like this okay so if you remember what the int does is that simply converts our string into an integer and then I'm going to print that to the screen so I'm going to print number to the screen now what what happens right here is uh if I try to type in a word like this you see we get an error it says there's an invalid literal for INT with base 10 now you don't have to understand what this error is pretty much all this means is that we can't convert hello into a number because there is really no number there how how does it know what number to make that into right so in this case we would use a try and accept look because if the user types in something that's invalid well we want them to type in something else we don't want the program to crash like it just did there so here I'm going to put a try like this followed by a colon and then I'm going to indent these two blocks right here so that means we're going to try this block of code okay and then underneath here I'm going to type accept just like that followed by a colon now there is a more advanced way to do this we can accept a specific type of error um but I'm not going to talk about that in this video this is just a very basic try and accept block and then under here uh I'm going to type what I want to happen if this block of code doesn't run meaning this block of code returns an error um and we can't actually execute it so in this case I'm just going to do uh I'll just print to the screen invalid username because remember we're only going to have our username contained numbers all right so now if I run the program and I try to type in something that is not a string so just I mean that is not a uh number like this it'll just say invalid username rather than crash ing the program which is what happened before and if I do try to type in something that is valid so maybe I type 1 2 3 4 it just gives me that username back right so it works like that um so that's pretty much how the try and accept works again this is a very basic example and that's what I try to do in my videos just give you the basics and then you can try to apply it to some projects you're doing um and some more advanced things so again what happens is it tries this block of code if that block of code doesn't run or an error happens instead of Simply crashing the program and giving us that red message it's going to go to this accept block and it's going to do whatever is in here now in this accept block again we could ask them to type in a new username we could display another message we could maybe um close the program on them we could do whatever we wanted to do in this accept block and it's extremely useful um so yeah that's pretty much how the try and accept works if you learned something please like And subscribe and I will see you again in another video hey guys welcome back to another video this is the 19th video in my Python Programming series and today we're going to be talking about a fairly complex topic some people find kind of confusing in their programs um it's very useful to understand and it's Global versus local variables so Global um pretty much means everywhere can be used in anything and local means specific to a certain uh block of code or to a certain class so let's just dive in right away with an example so in our program we have things called variables again we've talked about them before so I'm just going to say VAR up here equals 9 we'll say our um true this is lowercase here uh is just equal to true or actually let's call it Loop in instead just not to confuse anyone so Loop is equal to true and then maybe let's make a function we're just going to call this function Funk we'll give it a parameter of X and we're just going to say if x is equal to oops 2 equal sign 5 then return true and we'll set a variable up at the top of this function and we'll just call it uh Newar is equal to seven or yeah seven let's do that and then instead of returning true we'll actually return new VAR my bad new VAR just like that okay so here we have three variables we have the variable VAR which is equal to nine the variable Loop which is equal to true and then the variable Newar which is inside of our function and that's equal to 7 uh and then the parameter X which again can kind of be considered a variable but it is uh more specifically a parameter so I just want to show you right away what tries to happen if I print out the variable Newar so outside of my function in its own line I'm just going to say print Newar like that we click F5 and we get an error here it says the name Newar is not defined but how can that be possible we just made Newar right here in our function well this is where we get into local versus global variable so the variable Newar is actually known to be a local variable to the function uh Funk so that means the only thing that's able to access the variable change the variable and use the variable Newar is the function Funk so again if I put the print statement inside of my function and then I call my function it will work so here if I type Funk now and I'll give it value of two then Newar does print to the screen and we don't get an error so that is how uh the local variable works so again it's the same thing in any other type of function so if I write another function I do Define other Funk this one I won't give it a parameter and I'll just say Newar is equal to five like that so different than seven and then this function will print Newar well do we think it's going to print out seven or do we think it's is going to print out five so we'll show you like this if we run uh take zero positional arguments other fun oh my bad there's a two in there sorry it prints out five right so it doesn't look at this variable here it looks at the local variable in here called Newar now same thing if I put Newar up here outside of all of these functions and I set it equal to 23 and then I click F5 here to run it's still going to print out five that's because these functions they can see these variables up here but if there there's a variable already declared inside of their function they're going to use that one instead I know it's kind of confusing I'm going to talk a little bit more about how this works I just want to give some examples to start off okay so now we'll talk about global variables so local variables are ones that are declared usually inside of a function so that means outside of the function so again if we tried to print Newar out here um and I got rid of this up here we get the error like we got before right it says it's not defined so what about global variables well these Global variables are ones that anything in the program can see so VAR and loop would be known as Global variables in here if I try to print out our variable VAR and then I'll just call that function by doing Funk and I'll give it a value of two once again it will be able to see VAR and it does print it to the screen as nine that is because this is global it's not defined inside of a function or inside of a class and classes we'll talk about later don't worry about that um same thing if we try to print out Loop so if I change this to loop again it should work we get true printed out to the screen just like that so now there's the issue with changing variables in inside of a function so typically you want to avoid this you don't want to be dependent on these Global variables up here to make your functions work this is because if you remember in my other video I talked about modular programming where we can reuse functions well if I have a variable defined up here and my function is referencing that variable meaning it requires that variable to work then if I try to use this function in another one of my programs it's not not going to function properly because that Loop variable or that Global variable that I try to use is not going to be uh defined in that other program right so let's do an example here of how we can actually change a global variable so if I go here and I say Loop is equal to 7 so I call my function and it's going to set loop equal to 7 it's um and then I try to print out the variable Loop Loop well what do you think is going to print to the screen give me a guess it's either going to be seven or it's either going to be true um what do you think right so I'm printing it underneath after I call this function Let's see we get true now even though we what looks like changed the variable in this function instead of actually changing This Global variable instead we created a new variable which is local to the function called Loop if we want to change the variable we have to use something called the global keyword so in Python what we have to do is at the top of our function we just type the word Global followed by the variable name that we want to change so in this case I'm going to say Loop now if we run this program we print out seven that's because this tells our function that we're going to look outside of the function here for the variable if it exists then we're going to change it just like like we did there so I know this has been kind of confusing I've kind of jumped around try to play around with these things and see uh if you're getting errors see if you can figure out what's going to print to the screen here if you want to change a global variable so one that you define at the top of your program here or outside of your functions then you must type the global keyword inside of your function followed by the name here again if I try to change the uh the variable down here so not inside of a function it will work so if I I do Loop is equal to false then uh oh we get seven again just because I called it up here so I won't call this function this time if I say Loop is equal to false then we will get false because it's not inside of a function so it is able to see and change this variable so really using the global keyword uh it's just inside of functions and just remember that if you do create a variable inside of your function it's local to your function meaning that unless you type this Global keyword first and then followed by the name of that variable everything outside of the function will not be able to see that variable so if you liked if you uh like this video and you learned something please like And subscribe and I will see you again in another video hey guys and welcome back to another YouTube video so in this video I'm actually starting a new series on classes and objects in Python now I'm going to start off fairly simple and just explain to you kind of what is a class what is an object how can we create our own and in future videos I'm going to get a lot more advanced and show you some really cool things that you can do with classes and objects that not only make your life a lot easier but are really cool in my opinion and I didn't even know you could do them until I was kind of searching around before making this video so make sure if you guys are interested in bringing your programming kind of to the next level and stepping out of the basics of python and moving into more of an intermediate to Advanced topic that you guys watch through the series because you're going to learn a lot and you're going to have a fundamental understanding of python that you never uh understood before if you can understand the topics I'm going to talk about okay so let's start by talking about objects what is an object well in Python an object is pretty much anything and you can see on this my screen here I have two variables x = 5 y = string now to us without any understanding of objects and classes this just looks like X is equal to an integer that's five and Y is a string and that string value is string now I just want to show you quickly and you might have seen that you can do this before if I print out the type of X and what do you call it we'll just do the same thing here with Y run our program you see we get class int and class string now this is pretty trivial you figured this was going to happen but what does this class actually mean here well pretty much whenever you create a new object in Python so whenever you create a variable something like that it automatically creates an instance of an object now X the way that you can also read this is X is equal to an instance of the in class and its value is five whereas Y is equal to an instance of the S Str class and its value is string now these classes allow us to have builtin functionality in Python now you might might take for granted the fact that we can do something like x + 7 right and obviously we know we're going to get 12 when we do that or if we do like x 6 or x / 4 but someone actually coded this functionality into Python and you just can't see it when you're coding here um because it's kind of underneath and I'm going to actually show you a way that you can look at this builtin um code okay so just know that anytime you create a variable and anytime you kind of use any functions like for example if you use uh I don't know say like H is equal to what's something we can do like int y okay I know that's not going to work but whenever you use functions like this someone already coded these functions for you and they're typically built into a class of a certain type when you do something like y. strip you just take for take for granted the fact that you can use this strip method um and this is called a method but someone actually built this in and the reason you can use this is because it's a method on the CL class of St Str if I tried to do something like x. strip well clearly that's not going to work because X is not a string object so just understand that whenever you create anything in Python it is actually an object without you really knowing it or not okay so now I'm going to show you I'm just going to run this in debug mode so I can print some stuff out to the screen okay so I go console and python console okay so I'm using Pym but this works perfectly fine with regular idle in Python okay so if I type this help function and I pick a class and I'm going to pick int like this okay I type help on int you can see it prints me all this stuff now what does this actually mean well once we get to the top you can see it says class int of type object or inherit from object so pretty much whenever we create an integer and the way we create an integer in Python is simply by just saying like x = 5 xal 470 whatever like that it automatically defaults this x is a type int and you can see here that it actually tells us exactly how this class works and this is really useful if you don't know documentation you can just type help on something and it'll read out all the class and everything for you so convert a number string to an integer return zero if no arguments are given that's what happens when you call the int function and when you give a base well then it tells you what it does there okay now it says methods defined here well these are actually all the methods that you can use on on the class integer so if you have abs you have ADD and bu seal div mod equal to Flo floor FL TI and I'm going to show you what all these actually mean uh and why they have the underscores on them later on okay so just wait for that you can see that there's a ton of different methods and a ton of functionality already built into this integer class size of string and you can just keep going two bytes and there's a ton and then class methods defined here we're going to talk about what those are later now I want to show you if I do the same thing on string so I say help on oops on S strr like this then we get the same thing except for string and this one is going to be what do you call it a little bit longer because there's more things you can do with string but you can see we have class string and it inherits from object and we'll talk about what all this means later just uh follow along for now create a new string object from a given object uh if encoding and so on okay and then it goes down here add contains equal and you can go through all of the different MTH methods that it has now obviously this is the same for Boolean values and for what do you call it uh floats and all other data types in Python now if any of you have ever seen Turtle before you know that if you create for example import Turtle okay wow I can't type today and you create like Tim equals Turtle do turtle like this what you're actually doing is creating a new instance of a turtle object so in this Turtle module there's a class named turtle and when you call this what's known as a Constructor you're actually creating a new turtle object and you're just naming it Tim or storing it in the variable Tim okay so what else should we talk about with objects here yeah so let's talk about the difference between methods and what do you call it functions quickly so a function everyone here should know is created with the Define key okay or like Define keyword so I say Define Funk give it a value X and we'll simply return x + one now we know to call this function what we can do is we can simply say like print and then Funk of five and we know that that should give us a value of six right because it just simply adds one to what we're giving and this is a function there's no question about it okay now a class is actually what you call with the dot operator so this sorry not a class a method so this dot uh right here turtle. turtle is a method that creates a new turtle object and I'll show you what I mean here so if I do something like print y do uper well this upper right here is not a function it's actually known as a method and it only applies to the class St Str so I'll just print this quickly to show you we get string in all capitals okay if I tried to do something like x. uper and I click the play button here well X has no uh method upper and you can see int object has no ATT upper okay and that's because well X is an object of type int and remember when we typed help on int well we didn't see any upper method there so we actually can't use that and that's why we can only use methods on their correct data types right so if you create a float and you do like uh I don't know like f equals like 5.5 then obviously if we try to do f. uper here this is going to crash as well because well float object has no attribute upper right it had doesn't have that class or that method sorry in it okay so a method is anything you're calling on an object itself right and a function is something that's going to take an object and apply an operation to it right so you can see here that uh five is passed into the function we don't have to do like X do function we just pass it in there and then it returns us a value now methods can return us values as well this one is returning us a value of all capital string it's just different how we actually call those things and they are very similar just the difference is the way that one of them you call on an object and one of them you have to just call and then pass an object through and sometimes these methods can take objects as well for example let's see if I do x dot or F do replace I think that's a thing all I'm going to have to do y. replace y. replace like this okay and then I'm going to pass it a I don't know what should we pass it let's pass it a s and we'll replace it with a blank string okay so we're passing a object of type string and we're passing another object of type string and that's what this method takes as well as we have to call it on the instance right so string so if I call this we get string and six because it simply replaced s with quotations okay so I think I'm going to cut the video here uh I hope you have a little bit of an understanding of what an object is because in the next video we're going to create our own objects and our own class classes uh and we're going to talk about that it just was fundamental that you guys understood this before moving on to the next video okay so that's been it for this video If you guys liked please make sure you leave a like And subscribe and I'll see you again in the next one hey guys and welcome back to the second video in this object and class tutorial Series in this video we're going to be going over creating your own objects and your own classes and what that looks like in Python so just go ahead and delete this code from the last video uh and start fresh so if you guys remember in the last video we talked all about objects talked about methods uh and that's all cool we kind of already understood a lot of that stuff like we've used those methods it Mak sense how they work uh but now how do we create our own and this is the whole goal of this tutorial series to create your own classes and your own objects and add functionality to your program so to create a new class and this is going to be a new like data type uh something like that we'll talk about that in a second you just simply type class and then whatever you want the name of your class to be so in Python they have in string list whatever okay we're going to create a class and I'm just going to call it dog now you probably have seen this example before if you do anything um what do you call it with like uh classes or objects because people like to use animals but it's a really good example so this is now creating a new class of dog now what we have to do whenever we create a class is we have to uh add some methods into it so remember I talked about methods or things that you call on the actual class itself so I'm just going to type Define nit uncore uncore and we're going to talk about what this does in a second and make sure you don't forget this self keyword uh this object keyword you can leave out if you want I just like to type it because I don't know it's just a habit right because we have class dog Define the NIT and I'm going to make one more method and we're going to call it speak okay and make sure you don't forget this self keyword we're going to talk about what all this does in a second okay pass and in here I'm going to say pass all right so we've now just created our own class it does not do anything but we've created our own class so what we actually do here is we're creating well new class it's equal to dog it inherits from object don't worry about that and this is what's known as The Constructor method now this uncore uncore nit uncore uncore needs to be in most of your classes okay so if you guys want anything to happen initially when you first create a class you need to make this a nit class and what happens is when we create a new object and the way we can do this is by doing something like I don't know Tim equals dog like that this method is automatically going to fire it's automatically going to go off we don't have to say Tim doore netore uncore we don't have to do that whenever we create a new object of type dog this is automatically going to happen so for example if every time I created a new object of dog I wanted to print out uh kn nice you made a dog like this then every time that we do this so if we say like fred equals dog as well then he's going to print this to the screen and I can prove this to you by simply running so he says nice you made a dog nice you made a dog all right we didn't have to call this a nit it just automatically happened whenever we created this dog so let's talk more about this a nit and what we can do with it so in classes there's things called attributes and methods all right methods are anything that you create using Define okay and they look just like functions except you have to call them using uh an object like we talked about in the last video and attributes are kind of like variables that belong to a certain object so to create a attribute you need to use this self keyword all right what this self keyword actually stands for is it stands for the instance that you're calling so him is known as an instance of type dog or of class dog now Fred is another instance of type dog now I'm just going to do this and then hopefully you guys can understand how this kind of works uh because it is somewhat difficult to explain okay so now what we're saying is we've created this initialization all right and we have now that it takes a name okay so what that actually means is we have to now type a name into uh our initial initializations whenever we create a dog we have to give it a name so in here I'm going to give it a name Tim and in here I'm going to give it a name Fred all right and don't worry if you guys are confused I'm going to explain this all in depth in a second okay and I'm just going to do this so that we can actually see what our name is print hi I am comma self. name and we'll talk about what self does in a second okay let's do tim. speak and Fred dope as well okay so let's print this and it says hi I'm Tim hi I'm Fred okay so how does this work so in this initialization this fires automatically when we create dog okay so by calling this we're automatically calling a nit so if we put a parameter in a nit so name that means that we now have to pass a parameter when we create our dog and just like a function we can create multiple parameters we can do like name age color kind we can do as many as we want okay uh and that works fine now what does this self do so this self actually represents the instance right so if I'm if I call dog equals Tim or dog Tim whatever and I set that equal to Tim well Tim is what's being passed into this self parameter here and notice how we have two parameters but we only pass one thing that's because self always needs to be here except in like really specific cases that we're going to talk about later so when we call self. name we're saying that tim. name is equal to whatever name we put in here and that's the same thing with Fred right so when we call it on Fred then we say well fred. name is equal to Fred all right if we didn't do that and we said something like name equals name if I tried to print self. name that would just crash it wouldn't work because we don't know which instance has what name okay so this self means belong it kind of means like belongs to the in that you're calling it on I'm trying to explain this as good as I can because you you really to understand this I'm going to do another parameter here too okay so self. age equals H all right and let's just print this out and I am self. AG years old all right okay so let's print this out and see what we get missing one age sorry I got to put age in here 55 3 okay so now if I print this say hi I'm Tim and I'm 55 years old hi I am Fred and I'm 3 years old okay so each of these are instances of class dog and they each have a name and an age and you're able to call the speak method on them now with the speak method does is notice how when I call speak it automatically takes self because it has to know what instance I'm calling it on and that way it's able to access the name and the age now in here you can actually change the name and the age so I'm going to create a new method I'm going to say change like this okay and notice how it takes self no matter what it automatically types it in for me and here I'm going to do H all right now what I can do is I can say self. AG is equal to H and if I call let's see here tim. change age and I give it something like five now if I speak you can see that we get hi I am Tim and I 5 years old and we say hi I am Fred and I am 3 years old now obviously you guys can create as many methods as you want you can do call them whatever you want just make sure whenever you create them they first of all have self because we have to know what instance we're calling it on so we can access those attributes all right and you can change these attributes however you like within those methods now I will show you what else you can do okay so say you wanted to access Tim's age and you didn't want to print out like hi I am all this you didn't want to speak you just want to know what his age is well what you can actually do is you can simply print tim. H and now you can see if I run the program we get five down at the bottom and you can do the same thing with name so tim. name and it gives us Tim like that so we're actually able to access the attributes of our object uh from just simply calling whatever that attribute is and in this case its name so whenever you want something to be like public to the uh instance so that they can see it throughout all the methods you need to simp you need to do self. and whatever you want to call it so I could uh say like self dot I don't know let's say Li it's going to stand for list could have a list of like 1 three four and now if I call tim. Li you can see we get 134 and obviously if I call friend. Li well this is going to work as well we get 134 now the main benefit of classes is that you can create things um you can create multiple objects of a class so if I wanted to store like the name the age and a list for 300 dog objects if I wasn't using classes what I would have to do is I'd have to do like dog one name equals Tim and then I'd have to do dog one age equals 5 and then I'd do dog 2 Age equals Fred and you'd have to continually keep doing that with a ton of variables and obviously you don't want that so these classes allow you to create infinite amount of objects of that type class class and have all of these properties and attributes apply to them okay so what else should we talk about here uh maybe creating new attributes okay so attributes are anything that have this like self. name self. AG self. Li whatever and methods are with these defined Keys okay so if I create a new one and I say Define and add uh what do you call it weight okay say add weight I'm going to give it a weight and then we can say self. weight is equal to weight and what this does now is it creates a new instance attribute um that is going to be applied to this dog class now you see it's giving us an error here it says instance attribute weight to find outside of a nit that's because it wants us to Define that inside of this initialization but it's fine you can actually do it out here so now if I do Tim dot add weight and I give it a weight of like 70 okay and I'll print tim. weight like here let's see what we get we get 70 okay now what if I try to print fred. weight well let's see what happens we get Fred has no attribute weight or dog object has no attribute weight and that's because we have not yet added this by calling add weight on our instance Fred okay so I think I'm going to cut the video off here hopefully you guys have a basic understanding of how classes worked it is kind of difficult to explain it if you guys have any questions leave them down below cuz I feel like I might have butchered the explanation on some of it uh other than that in the next video we're going to go over I think inheritance and creating some more advanced methods and talking about how those work okay so if you guys enjoyed please make sure you leave a like And subscribe and I'll see you again in the next one hey guys and welcome to the third video in my python object and class tutorial series now in today's video I'm going to be going over inheritance and this is an extremely important and a little bit more complicated topic dealing with inheriting attributes and methods from other objects I just want to start off by quickly saying though if you guys are finding the videos a bit too slow for you and uh I'm kind of explaining things a lot of time the reason I do that is because I'm not sure the level of person that's going to be watching the video and I want to make sure that the people that will understand quickly can get the information within like the first few minutes and then the people that really need some extra reinforcement have that opportunity to watch through the entire like 11 or 12 minutes and have it explained to them multiple times so if you guys are finding it's a bit too slow um and you want to move faster just fast forward the video or skip uh to the next one if you guys are done with whatever I've been talking about because like in the last video for example I watched it back and I kind of explain the few uh the same thing a few times that's just for the people that need a bit of extra help and that's kind of what I aim to do with a lot of my videos so that people that need help can you know grab that if they want to okay so let's get started and I'm just going to modify this class just delete Li uh we'll get rid of change age and add weight and we're just going to have name age so on like that okay we can get rid of all this stuff down here now what I'm actually going to do is I'm going to create a new class and I'm going to call this cat okay now cat is going to have very similar attributes as dog in fact let's just copy them over okay so we'll paste them like here we have name age hi I am whatever okay now I'm just going to add one thing and in this case I'm going to add let's see color okay say self. color is equal to color okay now this cat object is obviously going to work the same as dog I don't think I need to show you now just take note of what I just did I just copied all of the stuff from here into cat now if you know anything about programming you know that programmers don't like to copy and paste and that you really shouldn't be copying and pasting code so python has actually come up with a solution to what I just did that allows us to not have to do that and that is called inheritance so I'm going to delete all this and I'm going to go back into cat and I'm going to type dog here now what this little bracket up here means is it means parent so whenever you're talking about inheritance you always have a parent or a super class and then you have a child or a like derived class okay and there's a bunch of different words for them they're not really that important just know parent and child is the most basic okay so in this case cat is going to inherit from dog which means dog is the parent class and cat is the child class and it is derived so it's taken from dog so that means if I do class dog and if all I do in here is just type one thing so I type netore uncore and in here I'm just going to put name age and color and I'm just going to do something that's going to look confusing I'm going to explain it after okay super doore netore uncore and I give it name age say self. color equals color and then I create a new object of cat so I'm just going to say Tim equals cat give it a name agent colors in this case we'll do Tim H5 color blue blue cat I know okay so we do that we Press Play No errors okay I'm just going to show you if I do Tim dosp what do you think is going to happen take a guess says hi I'm Tim and I'm 5 years old now how the heck does all this work and what did you just do I know that's probably the question you're asking should probably fix that say color so the way this works is when you inherit from another object or another class sorry you actually inherit all of the properties and attributes and methods of that class so when I do tim. speake you can see well Tim is an object of type cat and Cat well I don't see speak here how does that work well since the speak method belongs already in the dog class and we're inheriting from the dog class it is actually carried on to the cat class and we're able to use it like that okay so Tim dope now what I did here with this super. anit I know this looks confusing but pretty much in the initialization of cat which is unique to cat because it has this added um parameter color I simply called the initialization of dog first which means that when I gave it name and I gave it a age it automatically added self. name and self. AG to my cat object of Tim you see how here I didn't type self. name equals name I didn't type self. AG equals age all I did was call The Constructor method or the initialization method of the superclass and the super class simply means dog um and it did that for me now in this example it seems like well why in the world would you want to do that um that like that doesn't make sense there's not that many lines whatever if you have really long methods and really long classes it makes a lot of sense to inherit so in this example it's hard to show but in long ones you do want to inherit now I want to show you that you can add and overload things from the uh parent class so for example the parent class has speak I'm going to add one more method in here I'm going to say Define let's just say talk okay and in here it's going to say print uh bark cuz it's a dog okay now obviously in our cat class if we want to talk we don't want to bark right and that's what's going to happen right now if we do tim. talk it's just going to say bark so if we wanted to change this we can actually overload this or override this method so if I do Define talk in here I can print and in here I'm not going to do bark I'm going to do meow okay like that little explanation point so now if I do tim. talk like this you can see that we get meow instead of bark and that goes for anything in inherited classes okay so anything that we do in here is going to override whatever is happening in this dog class so say we wanted to change speak we could say Define speak in here and then whatever we put in this speak method would overwrite what's in here now that's not to say that it's going to change if you create a dog dog object so if I do like I don't know let's say gym is equal to dog give it a name give it gy clearly age this an old dog we're 70 okay and we do jy. talk well we're still going to get if I spell JY correctly bark right so we get bark and meow so we don't actually change anything in this class we just say that well if you create a class or if you create a cat object then it's going to have this talk method which overrides the talk method that we created in dog and this is the same if you do something with uh like these attributes so if I didn't like self. name and I just statically type in a name like I type uh Tech okay uh then when we do tim. speak now you would think that I it's going to get hello I am Tim because that was the name right and I am 5 years old but instead we're going to get Tech so it says hi I am Tech and I am 5 years old and that is because although we set name up here to be equal to whatever name we type in the in as a argument uh we are changing it to Tech and that overrides whatever happens in this dog class okay uh so I hope that makes sense now what else can we override from those classes well we can inherit like multiple times and we can inherit different classes from upper class I'm going to talk about the way you would want to do an inheritance okay so the way you typically want to inherit is you want to have one really General class that kind of applies that's a bit smaller that applies like a bunch of different classes so I'm going to delete these and I'm just going to type out them and show you an example of what I mean by General class so if I created a class and I called it vehicle like that okay is that how you spell vehicle I don't care we're just going to leave it like that okay and then I created an initialization in here okay and the initialization is going to take like uh price uh gas and color okay I know these are random but just just follow along self. price equals price self do gas equals gas and self do color equals color okay now I'm I'm just going to give it a method I'm going to call Define fill up tank like this okay and what's to say self. gas equals and we're just going to say that each gas tank has a maximum of 100 okay say Define um empty tank and this is just going to say self. gas equals z and we're going to say Define gas left and this is simply going to return self. gas okay and the reason I have this is because well in all vehicles we're probably going to want to have um gas right all of our vehicles are going to have gas if they're not electric obviously we're not going to deal with that for now um so fill up tank empty tank and gas left is probably something we want to know for all of our different Vehicles now for example if I create another class and I say class car okay and car is going to inherit from vehicle like that okay and all we're going to do for the init is we're just going to call the vehicle init so how we do that is do super doore uncore anitore uncore and obviously this needs now a price gas and a color so we're going to pass it price gas and color like that and then that's our initialization and in car all we're going to have is we're going to have a method and it's going to call let's actually let's add one more thing here speed okay self. speeed equals speed okay and then here as a method let's just have like beep okay and all this is going to do is simply print beep beep okay now I know these aren't great examples but just follow along so what we have now is we have the vehicle class okay and it has these things that do with gas and obviously gas is going to work for all of our different types of vehicles and and then we create a car class class that inherits from vehicle and in here all it does is it has an extra attribute called speed and it has a method called beep now if I create another class instead of car I want to do truck now truck is not going to say beep beep it's going to say honk honk like that okay and instead of having self. speed we're going to have self. tires okay equals tires because that's a a property that we're going to care about for our trucks because sometimes they get like six tires 18 you know what I mean that's what I mean by a truck okay so you can see that we have a really General class vehicle that simply has a cut a gas and a price and obviously within our truck and car class we're going to care about those attributes so price gas color but in truck we care about tires and when we click beep we want to say hwk hwk and for car we care about the speed that the car can go and when we uh call beep we want to print beep beep okay so that is an example of where you would use inheritance I know this is a really small example a lot of the classes you're going to end up building are going to be like massive and inherit from uh like other classes and you're going to have like large files full of classes but this is the best example I can kind of give you of when inheritance would be useful and same thing if I wanted to do like Define motorcycle then you could do the same thing there and for Wheels you do like self Wheels equals 2 like stuff like that okay so I think I'm going to end the video here hopefully you guys have an idea of how inheritance works one quick thing if I wanted to I could inherit from car as well so if something is inheriting from something you can also inherit from it so that would mean that now truck has all the attributes of car and all the attributes of vehicle because well car has the attributes of a vehicle so since car has it we're inheriting from car truck is going to get it as well just wanted to add that in before we end anyways make sure you guys leave a like And subscribe and I will see you again in the next video hey guys and welcome back to another object and classes tutorial video in today's video I'm going to be going overloading default python methods and why these are extremely useful now if you don't know what I'm talking about just stick around for one second and I will explain it so first of all I just want to talk about what I've already coded here I just have a very basic point class and you can see that our Point object has three kind of attributes in x y and then our coordinates which is self.x and self.y we have a very basic method that can simply move us by x and by y we type it in okay I've created four points down here and these are what we're going to use to kind of test out some examples that I'm about to create so in Python uh remember in my first video I was talking about the fact that if you create integer objects so for example I say like IAL 5 and like zal five if I wanted to add these together all I simply have to do is well put a plus sign right and python knows that this plus sign means Okay add these two things together now how does it know this and how does it know what to do well with integers is pretty straight straightforward but what if we start doing things like strings right if you do s and then you go like 6 7 8 how does python know how to add these two strings together well it would make sense to it just appended on top but someone actually had to code this functionality in and that's exactly what we're going to be doing in this video except with our custom Point object okay and you'll see what I mean in just a second so pretty much what we want to eventually do at the end of this video is be able to add multiply subtract um and compare points without having to reference their attributes outside of the class so right now uh if I do P1 plus P2 our program is going to crash because it doesn't know what that means but by the end of this video we're going to be able to do that okay so that's what I'm going to show you right now so in Python there's a bunch of default kind of operations and methods that you can apply on classes and by default uh they're not defined right on our point class if we try to add to things right now that doesn't make sense so what we're going to is add that method so to do this to add the add operation you're just going to do Define underscore add okay and then in here you need to give another Point object so what happens when I try to add a point and another Point object well whatever we're going to return a new Point okay that is simply equal to self.x plus p.x and then self.y + p.y so what this is doing is since we're passing another Point object so when we do like P1 + P2 P2 becomes p and P1 becomes self so we're going to grab the coordinates of P1 add them to P2 and return that in a new Point object okay now the same works for subtract multiply and Division and for a few others as well so I'm just simply going to copy this okay and paste it one more time and instead of add now you could probably guess I'm going to put sub and what this is going to do is allow us to subtract points so it's going to be the exact same except now we're simply going to subtract the coordinates now with multiplication this one is simply Define underscore uncore Moore underscore and this going to allow us to use the ASX or the star uh to multiply two different point objects so same thing it takes a point and in this case when we multiply points I could return a new point with multiplied coordinates but the way it actually works if you know anything about vectors is we're simply going to return the scalar product which means you multiply the first two x coordinates get a value in this case we would get nine and then you actually add it to the ycoordinates multiplied together so in this case we'd have nine um what do you call it plus 8 and that would give us 17 we're not returning a new Point object it's a scaler or like just a number value okay so what we're going to do here is we're going to return self.x multiplied by p.x plus self.y multiplied by p.y and those are the three that I'm going to stick with right now and I'm going to show you a bunch more that we can use to compare Point objects using greater than equal then sign in just a second so I want to test if this is working so let's create a new point I'm going say 0 five is equal to p1+ P2 and I'm going to say 6 is equal to P4 minus P1 okay and then we'll even go as far as creating p7 and multiplying P2 and P3 just to make sure everything's working so now I'm simply going to print to the screen P5 P6 and p7 and let's see what we get so you can see here I get main point object main point object and nine now the way that this worked and the reason that we're not actually getting a coordinate value is because I have to show you another method that we can use so that this was actually going to give us something meaningful because right now when we point print out our Point objects right cuz 0 5 is a new Point object cuz when we add point1 and point 2 we have returned sorry a new Point object right so if we want to make this meaningful and not just show us the address in memory uh where the point is stored which it currently is right now we need to add another method and this one is called Str Str okay and what this is going to do is this is going to be called every time we try to convert our Point object into a string so when we try to print our Point object it automatically looks for Str Str and and if it doesn't find it it gives us this kind of uh gibberish right here but if it does find it it's simply going to well use the value that we returned so in this case we want to return I think we'd want to return from string uh probably the self dot coordinates right so I want it to look something like this we have brackets and then Plus St Str and then self.x plus a comma Plus St Str self.y and plus and then another bracket like this okay so now if I try to print5 6 and 7 you can see what we get and there we go so now instead of getting that gibberish we get 66 3 and 3 now keep in mind you can make this anything you want but you do have to return a string value here for this to work okay so the next methods we're going to talk about I'm just going to put them above string here just for good practice is going to be comparing two points so this is great now we can add we can subtract we can multiply but what if we want to compare so what if we want to see if0 one is greater than 2 or if 3 is greater than point 4 well how do we do that we first have to determine how are we going to compare points are we simply going to compare the x's and the Y's or are we going to find like the magnitude of a point like what are we going to do to compare which is larger in my case I want to find the length of a point from the origin so in this case the way this would work um I think I can just bring up a little grid program here and just draw it for you quickly so if you have an origin like this okay I'm just using my mouse right now and you had a point here and a point here well from the origin this would have a distance and from the origin this would have a distance obviously this could be like a distance of seven this could be a distance of two and seven would win right because we don't really care about the negatives if you had something all the way over here with a larger distance then well we would want that to win right um so that's the way that we're going to compare them and I'll talk about that and how we do that in one second so to compare we have four major comparisons I think that we can do anyways I'll type them and we'll see so one of them is greater than and that is GT okay and then you can do self and you also need another Point object like this another one is greater than or equal to and greater than or equal to is simply GE okay and then same thing we need P we have less than so Define and you can probably guess LS or sorry LT what am I saying less than and then we also have less than or equal to so l e like that and we have one more and this is simply equal to so this is if we do the double equal sign then it's going to give us a comparison now in these methods we need to return a true or a false value so in greater than remember the way I said I wanted to compare them is to get like the magnitude of the point from the origin so I'm just going to add a method in here I'm just going to call it uh let's do length maybe okay and then in here I'm simply actually we don't need to take anything we're just going to return the math.sqrt and I'm going to import math right up here and this is simply how you get the length from the origin okay of self.x to the power of two plus what am I doing self.y the exponent to and this is going to give us the length Okay so import length so when I'm doing greater than I want to see if return self.x or what am I saying self. length is greater than P do length like this okay and I believe we do actually need these square brackets here so all this is going to do is it's a Boolean condition it says well if the length of ourself is greater than the other length well then we're simply greater than so let's just copy this and put it in here and in this case we're just going to do greater than or equal sign because this is greater than or equal to we'll copy this again change this around to less than and one more time and this is now just going to be less than or equal to now if we're seeing if two things are equal to each other well that's pretty easy as well all we can do is simply take this or actually the way we're going to do this is just see if the coordinates are the same because if we try doing the math. square root and we get like a large decimal number sometimes decimals kind of mess up in Python and they don't get the same Precision so let's just return if self.x equal equal p.x and self.y equals p.y because that would mean that they are the same points right okay so let's do some comparisons now so let's just simply print if P1 equals equals P2 and then we'll print if P1 is greater than P2 and we can print if P4 is less than or equal to uh P3 okay and just test these out okay so we get false true and true and you guys are welcome to mess around with these and kind of figure those out for yourself so I will show you I'm not going to go through all of the methods because there's a lot of ones that you can overload but I'll show you how you can have a look at all of the different methods okay so I'm just going to pull up a web page here that has like a large list of all of the kind of builtin methods that you can override or like what do you call it overload um there is a way in Python to like see all of them and print them to the screen but I completely forget the command so I apologize one of you guys knows that command please let me know in the comments because I've been looking for it and I can't find it but anyways you can see here there's a ton like I think there's like a hundred or something of builtin ones you can use like ad sub Mo div true div Flor div can read through here and see what they all do some useful ones I will mention is probably Len I probably should have talked about that one but it's if you call the Len function on something so actually I'll show you Len really quickly just because I feel like I should have talked about so instead of doing length here I could have just done Define underscore uncore lencore uncore and what this would have done now is if I call like Len of P1 it's just going to return uh whatever value I have here so math. square root okay that's like a really useful one too so I don't know why I didn't talk about that but anyways so we go back to this page for one second and see real numbers slice slice can be useful if you're do deal with kind of like list objects that you're creating items and slices you can go through all these and kind of read them yourself I'm not going to talk about all of them CU I'm sure these you guys probably won't end up using very much um the ones that are very important are the ones I talked about yeah so you can see builtins like there's something you can do with like dir builtins to see them all uh and yeah I'll leave this link in the description in case any of you guys are interested in having a look at these but there is some way in Python again if you know that way please let me know okay guys so that's been it for this video in the next video I'm going to be talking about static and class methods and then in the future video I'm going to be talking about private private and public classes in Python so if you guys enjoyed the video please make sure you leave a like And subscribe and I'll see you again in the next hey guys and welcome back to the fifth video in my python objects and classes tutorial Series in today's video I'm going to be talking about class methods static methods and class variables now these are very important and very useful especially if you're coding large projects with multiple different classes and they are fairly complex but I'm going to try my best to explain them right now so pretty much you can see here I've already set up a class and I've already actually coded all the methods and class variables and all the stuff we're going to deal with and I'm just going to go through and talk about it because it just saves a bit of time and makes things a bit easier so first of all let's talk about class variables Now to create a regular variable within a class you can see that we have something like self. name equals name we've been over this we know how this works now when you create a class variable typically you do this at the top of the class and you just simply write like a variable just not inside of one of your methods so you can see up here I have a list says dogs equals and then a list if I wanted to have something like X I could say xal 5 or x equal 5 and I could put that at the top of my uh what do you call it class and then to reference that you have to be inside of the class so this sometimes is useful if you want to have variables that every object in your class is going to need to use and you don't want to have to do like self.x equal x within your initialization and it's just better practice to put variables that are going to be like statically uh used inside of the class if that kind of makes sense so the way that you reference these variables is the same as you would reference uh an attribute within your regular class so you can see here like I do self name equals name to create a new variable self. name when I want to reference it later I would have to type self. right it's the same way to reference these class variables so you can't or I guess you could but you wouldn't want to have um the same name as this like in here and if you did that it would just overwrite this uh so you'll see what I mean in just a second but anyways what I'm essentially doing here inside of my initialization is I'm appending every single dog object that we create into the list dogs now this list dogs be begins to the class dog not to the actual instance of dog so Tim and Jim if I reference dogs and I print that out will be the same value it doesn't change dogs or like dogs is not specific to Tim and it's not specific to Jim it's specific to the entire class uh for every dog object so it's the same for all that an XC like five is going to be the same for obviously Tim and Jim and all other dog objects I hope that kind of makes sense we'll walk through it in just a second okay so let's just first of all just print and figure out like what's the point of this uh class variable like what can we do with this well first of all the good thing about class variables is if you want to access them you don't have to have an instance of the dog object to do so so to see this typically like if I wanted to call so if I remove this class method I remove the static method you want to call method on a dog object you'd have to do the name of the dogs like Tim and then Dot bark or Tim do uh I don't know whatever else that we have like do add do add weight whatever you want to do okay but in this case we can just actually call it on the name of the class so if I do dog Dot and then you can see it's already coming up here do dogs like this we should be able to print this to the screen and you can see that we do end up being able to print this to the screen with a dog object and another dog object so the main difference here with class variables is that you can call them with you can still call like I could still do tim. doogs but it I can also call them with the actual name of the class and that's what makes it useful so you don't have to have an instance uh to call that what do you call it variable if that makes sense and I guess that's all I'm going to explain kind of for class variables because they're not that complicated and if you play around with them you should be able to figure that out figure them out okay so next we're going to talk about static and class methods now you can see here I have at static method and at class method these are known as decorators and you put these above your method like directly above them like this if you want to indicate that they are going to be a special type of method and that's what these two methods are so I'll start I'll first start talking about class methods because we kind of already have touched on it with class variables so the way that a class method works is that you can actually call it on simply the name of the class so you can see inside of here uh my parameters I only have one thing and it's called CLS it's not called self it's called CLS what this this means is the name of the class so if I remove Tim and Jim so I guess I can just comment that out like that whatever then what I can do is I can say dog Dot and then what do you call it numb dogs like this and this will actually work and you can see that I'm not calling it on an instance or like of the dog class or like a object of dog class I'm just simply calling it on the class so if I do this you can see that it gives me zero and that that works right now again you can call it on uh what do you call it like you can call it on an instance like if you say Tim equals dog and name Tim I can still call it on Tim and this is still going to work fine it's just that you don't need to do that right you can do it by just calling with the name now static methods are a little bit different they actually don't need the class to uh to be called so so it doesn't pass in the class so that means that you can't reference anything within the class so the whole point of having this class passed in when you call this method is so that you can use class variables and you can use other methods with in with inside the class so for example if within numb dogs I wanted to use a static method or I wanted to call an initialization or I wanted to do something that revolved around the dog class I would need the class name right so that's why it's passed through but with static methods we only pass whatever parameters we want so we don't have to have a self we don't have to have a class and we don't even have to have any parameters but in this case I'm giving one parameter n so I'm going to show you how this works so I've completely removed any instances of dog in my program there's no objects we're not printing anything whatever okay what I'm going to do now is I'm going to call Bark without passing through any object or any class name and you can see how this works so what I have to do to do this is it has to know obviously where bark is right so it's in inside the dog class so I have to start by typing dog but then I can type bark like this and give it a number and you can see here I just wrote a little comment barks's end time so if I run this you can see we get bark bark bark bark now notice that with inside this bark class I don't do anything like I don't touch any attributes I don't touch any class methods and there's actually no way for me to do that so if I were to try to say I wanted to get the value of the length of dogs right with inside this static method well I would be unable to do that because I don't have self right self is it's not working I don't have a class so how am I going to be able to call a class um variable or another class method I actually can't do that so the point of static methods is when you're just going to be using them as a function but you want to organize them within a class so a really good uh use of static methods for example is say you were created like a class and you called it math okay in here instead of having like an initialization ation and all this stuff you just had a bunch of static methods now why would why do you put them in this math class why not just create them as functions well the thing is you want to be able to import modules within python you guys have probably seen this before right you can import other files that you've created into like main files so when you create a bunch of um like math methods or whatever what You' do is you'd say class math and then you just say like at static method and then you do Define and you'd say like add like this okay and you say like X and X2 and then you could return x + X2 and that way you don't have to create an instance of math you don't have to say like m equals math right you can just say math. add give it two values and it will return it to you and you can do math. subtract and you can organize all like the functions that you wanted to use within that class and then class methods right are more used for like if you want to access class variables without having to pass in an object because it's just going to automat pass whatever the class name is that you're giving it I hope that that makes sense now these I'll touch on these really quickly in case I didn't really talk about them these are known as decorators um I know it's kind of a weird name but pretty much this just denotes the fact that you are creating a class method and you are creating a static method because otherwise it's probably going to get mad at you and tell you that you need to type in self or you need to type in like another parameter or something like that so by doing this not only is it a visual representation for anyone that's reading your code but you're also so just um telling python that this is going to be a static method this is going to be a class method obviously you can have as many static methods as you want as many class methods as you want and they're actually really useful so anyways I'm going to wrap up the video here if you guys have any questions about any of this stuff make sure you leave a comment down below and in the next video I'm going to be talking about public and private classes in Python anyways if you guys enjoyed the video please make sure you leave a like And subscribe and I will see you again in the next one hey guys and welcome to the fifth and final video in my python classes and objects tutorial Series so in today's video I'm going to be talking about public and private classes and how to import your own classes from other files into like a main file uh you'll kind of see what that really means as we move along so the first thing to talk about I guess would be what is the difference between public and private so I've brought an example here I've just kind of written this random example in Python to try to illustrate this to you so in other programming languages there's things known as private and public classes now private classes typically can only be used within the same file or within like a certain scope where public classes are accessed or can be accessed by everyone so private kind of means within something like it's not accessible outside of that whereas public means it's accessible everywhere now I have just a definition I found on Google that I'm just going to read because it's the best way to kind of explain it and I can talk about qu it after so in terms of java and we'll talk about this in a second uh public versus private class and this is the same for most languages means this so public is a Java keyword which declares a member's access as Public public members are visible to all their classes this means that any other class can access a public field or method further other classes can modify public Fields unless the field is declared as final okay so what does that all mean and why did I just give you an example in Java well in Python there's actually no such thing as private or public classes there is conventions that we use to declare like a pseudo like private or like a public class um but there's not really anything restricting us from using private classes so hopefully I can explain this but pretty much this first class up here is private and what makes this private is the fact that we have one underscore at the beginning of the class name now in python or in Java for example when you create a class you would do like like you could do something like this like public static class and then that would mean that this is a public class you could say like private class now in Python we don't have those so the way that we Define this just as a convention is you start with one underscore and then the class name now to create a public method or like attribute of a class it's the same thing you just use one underscore so for example you can see I have two display methods here one is a private method as it has an underscore and the the other one is public as it doesn't have an unders Square again like I've said it doesn't actually matter like you can still use this the regular way you'd use method by calling doore display but by putting this underscore here you're essentially telling other programmers and even maybe yourself later on in the future not to use this and you're saying this is private I don't want you to use it obviously if they decide to use it that's their decision but it's just telling you like don't mess with this don't use this it's private for a reason and typically when you private things that's because you don't want other classes to be able to use it and like mess with the class or do anything like that so same thing here when you create an entire class as private that means everything within the class is also private so I'm going to go over to this file now and you can see I have one file mod and one file tutorial one um now mod is this one that we just went through tutorial one is a new file and you can see that I'm actually importing mod uh so I'm importing this file now when I do that what that does is Imports all of the classes and functions that are within this file so for example if you wanted to organize your program you would have a bunch of different files that contain a lot of different classes and you would import them by simply typing this at the beginning of like your main script this way you can keep everything organized clean and neat and then you can see from Mod I'm importing not private so the way that this works in terms of importing individual classes is you type the name of the Python file in this case mod and then the name of the class or function that you wanted to import and in this case I want to import not private so I can simply do that now say I remove this line I say import from Mod import not private I'm still able to access not private just in a different way you can see now this goes red the way I would now do this is I'd say Mod Dot not private because it's saying we're looking within the mod file for the class or function not private but it's just easier to do it this way so that you don't have to type Mod Dot before all that stuff okay so I'm just going to show you this working I guess I have uh this not private class you can see we have two displays and when I run it we get high now I also want to show you the fact that although I told you that this class is private and that this method is private that we can still actually use them so if I simply do testore display you can see that this now works perfectly fine and it gives us hello so I just felt like I had to make this video although it's not really an important aspect in Python just because if you guys are going to be learning different programming languages you have to understand the difference between private and public classes it's very difficult to illustrate in Python because there's nothing that's truly public or private but just know that if you ever run across some classes that have underscores at the beginning of the name or underscores before method names for example like anit then that means that they are typically private or want to be private at least so you should probably not mess with them and not use them that goes for you as well if you are programming and you want to create stuff that you don't want people to kind of mess with just put an underscore before the name it's just a typical convention in Python uh to do that to create a private or public class anyways that's been it for this video and for the series I hope that you guys did enjoy the series and you did learn a lot if you did please consider subscribing and hitting that like button as it would mean a lot to me hey guys and welcome back to another YouTube video so in today's video I I'm going to be starting a new um tutorial series on intermediate programming with python um so that being said a prerequisite for these videos is going to be that you know a little bit about python you know the basics you know if statements for Loops lists so on um as I'm not going to be reteaching and touching on a lot of those aspects um which I'm going to consider trivial now um I'm going to be teaching some more advanced topics so if you guys are interested in that make sure you watch until the end of the series and you go through all the videos as a lot of the stuff I'm going to do is going to add add on um as we keep going on videos so something I show in the previous video I'm going to add on to it in the next one um and these videos are going to be a really good way to enhance your programming knowledge and to learn a lot more about python that being said a lot of the stuff I'm going to show here is specific to python um and probably will not work in other programming languages that being said let's get ahead and go ahead and get started with our first video and this one is going to be optional parameters now this is probably one of the simplest topics that I'm going to cover in this series but I figured it would be a good starting point so let's just um go up go ahead and go over what a parameter is um so you should already know this but just to catch some of you guys up I have a function here I've defined I call it funk it returns X to the^ of two um and our parameter in this case would be X anything in this bracket is a parameter note you can have multiple parameters so I can have x y z and so on now what we want to do is we want to create something called an optional parameter now again sorry the argument here um so when we I call my function I said call equals Funk five our argument five is passed into the parameter x x is used here and then if I run my program so I'm running it here uh oops have to drag my console over it's on a different window right now oh and I've accidentally opened up something else now have uh one second guys sorry about that okay I have my console which is here uh it prints 25 to the screen uh like expected okay so now we want to create something called an optional parameter so the the whole point of an optional parameter is so that we don't always have to keep typing in parameters um especially if we have uh more than one that we have to type in it can get tedious so the way that we can do this and it's actually really simple and it's extremely useful and I'll show you in a different example later simply beside your parameter so in this case X just put an equal sign and then put what you want it default value to be so in this case I'm just going to put uh one okay so now what what happens is if I call my function and I don't give it a value for x it's simply going to use one so we can show that so again run the program and I get one because one to the^ of two well is one and I didn't put anything in here and I didn't get an error now notice if I get rid of this equals one and I try to call we get an error because it's missing a uh potential argument X right so let's put that back xal 1 now what happens if I do put something in the brackets here of my function call so for example I pr x 5 when I run the program now we get 25 so if you ever put anything in uh your function instead of the uh like default instead of just leaving it blank in this case then it's going to overwrite this default parameter and it's going to make x equal to 5 instead of one now you might say well why is this useful I'm going to show you an example in just a second but I want to show how you can use multiple optional parameters um and how you can mix them with nonoptional parameters so let's just rewrite this function um and in this case I'm going to take two parameters I'm just going to say like word and currents or let's say frequency like this okay and now all I'm going to do in this function is I'm simply going to print to the screen word multiplied by frequency like that okay and then here in my function call my word I'm going to say is Tim and frequency five now this should just print to the screen right do this and it does we get Tim Tim Tim Tim now what if I wanted to make the frequency um an optional parameter so all we have to do here is I'm going to change my frequency to be a default of one so that means now I have a parameter that's not optional which is word and a parameter that is optional frequency so when I run the program by just putting in my needed parameter I get Tim and just one time because that's the default value of frequency again we don't get an error um like you might expect and then same thing if I want to change the frequency so maybe I want to make the frequency 10 all I do is I type in a number for frequency so corresponding and then when I run the program I get Tim and then 10 times like that now what happens if I do something like this and I put 10 here um instead of frequency well you'll see what happens we get 10 because 10 now is word and frequency is 1 and 10 * 1 well is equal to 10 okay so now let's go to multiple optional parameters um so now I'm going to say add and frequency and I want add to also be an optional parameter so in this case I'm going to say add is equal to 5 frequency is equal to 1 okay um so what I'm going to do now is I'm just going to say word is times frequency plus add like that um and now in this case same thing I'll just do word in this case I'll say hello um so our default value for ad is five our default frequency for uh our default value for frequency is one so we should have 5 + 1 um which is six multiplied by word so we should get hello six times and we do and now again I can put put in a value um for add so in this case I'm going to say add is equal to zero frequency is still going to be one so now I get just one time to the screen hello so the way it we're is when you have optional parameters is say I wanted to type in a value for frequency but I wanted to leave add as the default value I'm not actually able to do that because of the order in which I've set these parameters so if I wanted add to still be five but I wanted to change frequency I would have to put five for ad and then I could put a value for frequency like three or something like that okay um and again if we show this ad is going to stay at five frequency is going to be three so we should get hello eight times in which we do um now if I wanted to change that around um and I wanted to say okay well I want ad to always be defaulted to a value like five and I'm hardly going to change that but frequency is going to be something I change a lot when I use my function then we would just flip these around so we' say frequency equal 1 add equals 5 like that so now this is going to uh go to frequency and this is going to go to add um like so I hope that makes sense so now I'm just going to go down and I'm going to show um some better examples to why this is kind of more useful so I've just created this class here um called car all right and I have you can see a bunch of parameters so I have five up here um not including self and then just one here in its method called display now these optional parameters can be used inside of methods as methods really are just functions that apply to a class right so I'll show you right now how this class kind of works um I've just created a new object called whip it's a new car object and we have four Fusion 2012 new um and these are the parameters that it takes right so it takes the make the model year condition and kilometers all of these are required I need to type these in no matter what the next one that I have my method is display um and what this is going to do is simply just print out to the screen um one of two messages if show all is equal to true it's going to print out everything including the condition and the kilometers of the car if not it's just going to print out the make model and year of the car so let's watch this uh run on the screen so this car is a Ford Fusion from 2012 it is new and has 0 km um like so so you can see that this is working well now what if I wanted to say um I want condition and I want kilometers to both be optional parameters so typically when you buy a car most people buy new cars so I'm going to say the condition is going to be defaulted to new and kilometers is going to be equal to zero because if you're buying a new car well then kilometers should be equal to zero so only if um I want to I'm going to change that so now same thing here if I go like this and I run the program we should get the same thing so this car is a Ford vision from 2012 it is new and has zero kmers and indeed we do we didn't need to type in those parameters because again they're optional um next one I'm going to show you is down here in display same thing I can set this equal to something like true so show all equals true and now when I call my display um it automatically shows all unless I specify otherwise by typing in false like so and then we get this car is a Ford Fusion from 2012 now this is really useful if you have a lot of different parameters it is especially useful when you're typing and working with classes so that's why I wanted to show you this example I hope that you guys are able to implement this in your programming um anyways that's been it for this video uh make sure you guys stay tuned for the next one which should be coming out in just a few days hey guys and welcome back to another YouTube video in today's video uh the second video in my uh intermediate python tutorials I'm going to be going over static and class methods um so pretty much these are just uh different things you can use uh within a class uh and I'm going to explain what they do and why they're useful so without further Ado let's go ahead and get started um so because these two things uh methods obviously a part of a class use a class we need to First create a class so in this instance I'm just going to make a class I'm going to call it person um it is of class object and then I'm just going to start off by making my initialization uh method here give it self I'm also going to give it name and age and we move to the next line so let's just assign our variables here here self. name equals name and self. AG is equal to H okay the next method I'm going to make um this one is going to be called get population this going type self um actually here I'm going to type CLS and I'm going to get into what this does uh in a little bit and I'm going to return CLS do population and now I just remembered that I actually forgot to make this up here I'm going to make a class variable um where I'm just going to say population is equal to 50 like so okay one more method this one I'm going to call the fine and then is adult and then in here I'm just going to put age I'm going to say return age greater than equal to 18 okay I'm also going to make one more method down here just to show you the difference between a bunch of these and I'm just going to call it Define um display okay and so it's going to take self um and that's actually all we need we're just going to print to the screen in this one we're going to say self do name and then comma is and then comma self. AG comma years old so this should if I did this right it's going to say whatever the person's name is is and then their age years old so for me 18 years old so now let's create a new instance of this class down here um so I'm just going to call this one new person going to set it equal to a person whose name is Tim and whose age is 18 like so and now I'm just going to go through this class and kind of uh go through what we've actually done here so pretty much what I've started off by doing is I've created a class variable population equals 50 I've done my uh Constructor method um which is just going to initialize my variable's name and age and then I've created two methods in here which actually aren't done and they're called get population um and is adult now the name of this video is class methods and static methods so one of this is a class is a class method and the other one is a static method um go ahead and guess which one you think is uh which so I'm going to tell you right now the first one is actually a class method and the next this one here is a static method and the way that we denote these in Python is by putting something called a decorator above these methods um so it's just an at sign and then the name uh so in that case static method or class method in this case static method now what is a class class method and what is a static method and the best way to explain these is to use an example um so pretty much a class method means that you can call it on any um instance of a class so you don't need to have uh for example I don't know what to say you don't have to have an object already created of that class you can just call it on the class so for here for example I've done something like new person and it typically if I didn't have any other um any static methods or class method I would just say like new person. display or new person.get population what this class method allows us to do is do something like this so we can do person.get population now person is simply the name of our class it's not the name of an object of that class so new person is an object of class person whereas person is just the name of the class and if I do that and I print this to the screen so I print person.get population assuming I have no errors here um oh it says it's cuz I haven't put uh the little brackets here my bad doget population it pops up to the screen and it gives us the value of 50 and again we didn't have to create an object to use that method because it is a class method um I hope that makes sense I'll try to explain it maybe one more time really quickly pretty much you don't need to create an object of the class to use any methods that are decorated as class method now also in class method all that's passed to the class method um is well the class because it's not actually an object we don't need this self parameter here like we need um in our initialization method and in any other regular methods that we have um we just need one variable we can call whatever we want in this case I call it CLS which is going to store well what class you're getting pretty well and then we can add any other parameters that we want so I can add X could add y um Ely many after that we just need to make sure that we have at least one in there because for example if I remove this um CLS like that it's going to say take zero positional argument but one was given because the class name is automatically sent into um this method when we call it okay the next type of method is static method um and this one is similar to class method um except it can be called without using that class I want to say so doesn't take a self parameter and it doesn't take a class parameter um so you don't actually need anything in here in this case I have age just cuz I want to be able to compare age um but it doesn't need any parameters if I did something like this it would work fine so the way we denote that again is with the at sign static method just above where the method is defined um and to use this method I can do something like person do is adult and then in here if I put something like five we're going to get back the value of false which you can see here if I do a value like 21 we get a value of true now why is this useful what's different than class method um static method is just used when you don't need self and you don't again need that actual object and it's just a good organizational way of storing a bunch of methods so for example if you had like I don't know maybe a math class that you created um and you wanted to have a few math objects and then you wanted a bunch of static methods that were all stored under math so for example when you use the math module in Python you use math.round or math. so on that's an example of possibly a static method or just a function within the math class um you want to organize all your static methods which in within that class um so you would call like whatever the class name is math and then dot the method and then you give it an argument and it'll return that and work fine uh I hope that kind of makes sense it is hard to explain if you don't have like a lot of good use cases for it um class method meod it just takes the actual um class and then it can access anything within the class um that's public to the class so here you see I had do cs. population and population is a variable defined up here this static method it can't access this population um variable because um it doesn't have access to the class name right it it doesn't it's not pass that information um so it can only use the parameters that you pass it it can't use any that are defined within the class um and that's really the best way I can kind of explain it to you guys um and a good way to understand how to use this um and why they're useful is to use them in your own um use cases so again static method um You can call just by calling the person uh the name of the class and then that method um given whatever parameters it doesn't need any parameters if I do something like this and I'll just put like five greater than or equal 18 this still works um you don't need any parameters whereas a class method you need one parameter at least at minimum um which is going to be that class name and it has access to anything within the class so any variables you define um or other static methods within like within this class method you could call another static method um and so on so yeah I hope that makes sense to you guys it is kind of hard to explain the static and class methods but they are really useful um especially if you're trying to organize things um and when you get further on with object orientated programming in Python you definitely notice that you will use these a lot anyways that's been it for this video um please make sure you guys leave a like on the video and subscribe and I will see you again in the next one hey guys and welcome back to another YouTube video in today's video this is the third video in our uh intermediate python uh tutorials and I'm going to be going over the map function um so pretty much the map function is an extremely useful tool that allows us to well apply a function to list and then create a new list um with those new values and you'll understand what I mean as I go through an example here so before I even start using the map function I want to just present us with a problem um that the map function can solve and this is kind of the best way to understand it so I'm going to create a list um I'm just going to call it Li of integers up to uh 10 like this so 9 and 10 okay um and now I'm going to create a function and I'm just going to call it funk and it's simply going to take one parameter X and all we're going to do is we're going to return x to the exponent x very simple okay now what this problem is it's very simple um I want you or I want to be able to apply this function X to every value in the list here so one uh to 10 um and then have that stored in a new list so intuitively the way that you would want to do this U or the way that you would try to do this at least is you make something like new list is equal to this you'd write a for Loop you say 4X in Li and then You' say new list. aend um and then you would put well Funk and X like that and then if you printed out your new list you would get that value I don't know why print is showing up in a different color now but anyways um and there we go so we get 1 4 27 and so on and so forth okay um so now what we want to do is use the map function to do this faster so this is a very valid way to do this this works fine but I can actually shorten all four of these lines into one um by using the map function so let's go ahead and do that now so I'm going to start by typing uh actually we're just going to print because I want to print first starting with I'm going to do list um like that and I'll tell you why in a second I'm going to write my map function like so uh and now your map function takes two arguments um so it takes a function and it takes a list so let's give it our function which in this case is going to be called Funk and then let's give it our list so I actually don't need these double brackets here excuse me let's give it our list which in this case is Li so let's talk about what this really is doing right now so the map function takes a function which is Funk so the name of our function and it takes a list which is Li what it's going to do is it's going to apply this function to every element in the list and we can watch this happen we run the program and you see we get the exact same value as we did before um and that's extremely uh extremely useful in Python because a lot of times you want to apply a function or even possibly multiple functions onto um a VAR or onto a list or every element of the list and you don't want to have to type out that whole for Loop yes you can do that it works fine but the map function is just a shortcut to be able to do that um so let me just show you now uh maybe a few other examples that we can use so like using this map function there's another way that we can create this and it's totally preference which one you want to use I like using map just CU it's kind of cool um you can also use something called list comprehension um and this is something I would have shown in some my previous python tutorials uh like from way back like years ago on my channel but I'll go over it quickly now um and the way that this works is you can do the same things you can say funk X for X in Li now this is actually going to give us the exact same value as what we have up here with this map uh function Li for example because what we're going to do is we're going to say we're going to take this right here so whatever this expression is um and we're going to do it uh for every value of x in the list so that's exactly what this map function does um and it's just going to turn it into a list because we put our square brackets here so if I print this out see we get again the same value um and that's how list comprehension works now for list comprehension you can also add um like an expression in here so I can do something like if um let's say x uh modulus oops modulus 2 equals equals z and now it's only going to do this uh or put this into the list if x is divisible by two uh syntax eror oh I forgot my square bracket here my bad I don't know how even got rid of that let's run that oh it's because that is why all right excuse me on that okay so now we get 4 2 5 6 so it's only doing it for the even numbers of X um so yeah those are two really cool ways to kind of change a list or modify them apply a function to them in Python say Obviously you might want to use a function that's more advanced than this um this is just for a basic example and if you wanted to apply maybe two functions to it you could have X be changed here and then you could return like function two of x to the X here and then that would put um that value obviously in the map so again map takes two parameters a function and a list um and it will apply uh the function to every value in that list I hope this has been useful for you guys if you did enjoy the video please make sure you leave a like And subscribe and I'm going to be moving on to some more complicated and um other examples using map and other functions um in the next video so make sure you stay tuned for that hey guys and welcome to the fourth video in my intermediate python tutorials and in today's video I'm going to be going over the filter function so this one is very similar to what I did in the last video which is the map function um but obviously it has a few differences but the filter and map function are nice to learn back toback because they can be used together um and a lot of people do use them together when they're making uh programs so I'm just going to go ahead and start off by typing out two fun functions here uh that we're going to be using in our examples so I'm just going to make one function called add seven which is simply going to return seven and I'm going to make another one which is called is odd and it's just going to return if the number is an odd number so the way we do that again is X modulus 2 does not equal zero like that okay pretty straightforward now I'm just going to make a new list in this case I'm just going to go 1 2 3 4 5 6 7 8 and nine and then we'll even add a 10 in there and and now I'm going to go over uh what the filter function does so I want to assign our uh a new variable here create a new one I'm just going to call this B and I'm going to make it equal to list filter which is the name of our function just like this and now filter function actually takes the same arguments that our map function did in the last video it takes a function and it takes an iterable uh list so we can take a string as well um but typically we just pass it a list something that's iterable and that you can go over um so what I'm going to put in here for our first function is I'm going to put is odd and then I'm going to give a list a now the way filter function works is if this value so it's going to it's going to do the same thing the map function does it's going to pass every element in our iterable item uh in this case the list to the function is odd so it's going to start with one it's going to pass one in there it's going to say one modules 2 does not equal z um which is true so it's going to give us a true value and then it's that's going to be added to the list because this function returned a true value now say we put two in here and we go and we say 2 is X two modules two well that does equal zero so we get a false value returned here now two is not added to the list this is essentially filtering out elements based on um a predefined function so obviously you can make your function that you want to check um a lot longer and a lot more extensive so you're filtering out more items but this is extremely useful when you're solving problems so rather than going through a for Loop and checking every single item um like we might have done with the map function to add things into a list we can just simply call filter um give it the function that we want to filter um based on and then a list and it's going to return that new list so let's just go ahead and run the program here and make sure that everything's working fine um so I'm just going to print out a to the screen and I'm going to print out B and we can see that B has essentially filtered out all of the elements um that were even so we get 2 6 8 10 they are all gone so now I want to show you how we can implement this with our map function um why is this useful what can we use the map function for so I'm make another list here and I'm going to call it C and this time I'm just going to do list map and then inside a map I'm going to do filter but before filter I'm just going to apply another function so in this case I'm going to do add seven and then in filter here I'm actually just going to change this to B because I'm going to type the same thing now let's go over what I just did here so essentially what's going to happen now is we're using the map function which if you don't know go back and watch the previous video um and we're going to apply this new list B which has been filtered um so we filtered out this original list U now we have 1 3 5 7 n so far and based on that list we're going to add seven to every element in that list now again if you wanted to save a line I could just get rid of B here and I could simply paste that in here removing list like that um and this would work fine so let's go ahead and see what actually happens here again we're just taking this new filtered list and now we're applying another function to it um in this case add seven so let's make sure that this is indeed working I haven't made a mistake here so we'll print a again and I will print C and you can see um that we do indeed get that so our one add seven we get eight our three add seven we get 10 5 7 and so on you can see how this works now these are extremely straightforward examples but if you're doing a list and for example you wanted to filter out any elements that contained a certain digit or um that met a certain criteria then you could create a more advanced filter function uh function to filter based off of that had a whole bunch of criteria and then it's going to return a true or false value so I'll show you here if I do something like just return true uh and I don't return a condition per se um then every element in my list is going to be um sent through because nothing's going to be filtered out so again if I print C here all of our elements are here so we have 10 elements because we're always returning true same thing if I always return false then none of our elements are going to be printed because well it's always false so the way to think about it is um I'll uncomment out this for a second is what this filter function does is it's going to apply a function that gives us a true or false value um to every element in the list if when that element is applied to that function we get a True Value then it's going to be created in that new list which filter returns to us um like that now again yeah this is really useful for solving problems and I just want to show you what happens if I do something like return one um and I'll print C to the screen here you can see we get every um every element out of here so pretty much the way is uh in Python something is said to be true as long as it's not zero if it's a number so like if I pass something like high well if you say is high true technically high is true um again if I print C uh we're still going to get every element although I didn't pass the value true um High technically evaluates to a true value in Python the only thing that's not going to evaluate to a true value is something like zero so now if I print C you can see we get an empty list um just wanted to add that in at the end there um teach you something you might not have known there um so anyways that's been it for the filter function in the next video I'm going to tie these all together with something called lambdas and what they look like is that uh you can see it highlights here as a keyword and pretty much this is a kind of function that we can use so we don't have to keep creating all these other ones at the beginning of our program um and they're extremely useful and they're really cool so make sure you guys stay tuned for the next video and I'm going to be explaining how we can use those with list uh maps and on their own anyways if you guys enjoyed please make sure you leave a like And subscribe and I will see you again in the next video hey guys and welcome back to the fifth video in my Advanced Python programming tutorials in today's video I'm going to be going over Lambda uh I think that's the way you say it at least uh excuse me if I'm going to say it wrong this whole video which pretty much stands for an anonymous function now these are extremely useful um and they don't take up very much space in your program which is really good I'm going to show you exactly how they work um and what they do so I first want to just start off by defining a regular function again this is one example I've been using a lot I'm just going to say Define funk say like return x + 5 that's what our function is going to do it's simply going to add five uh to the number whatever we give it so right if I print something like Funk of two we should get seven there we go and we get seven to the screen now for an extremely basic function like this um often times you don't want to have to write a function definition and take up uh like two lines of code like this um it's easier to write it in a different way and it looks uh like more smooth maybe more slick in your program and I'm going to show you how to do that so that's one way that we can do it by making a function like that another way and this is using Lambda is to do something like this so the name of our function say funk I'll say funk 2 is equal to and then we're going to type our keyword Lambda like this you can see it highlights um in Orange just like our definition key here for our function we're going to give it a parameter or multiple parameters I think you can use multiple parameters at least and then we're simply going to State what it returns so the way this works is you type Lambda the parameter um or multiple parameters which we're going to try in a second uh a colon and then whatever value you're going to return so the thing with Lambda is it's used when you have one uh return or one expression in your function so something like this so again I can do return x + 5 over 4 like I could do a whole expression as long as that expression fits on one line um then that's perfectly fine to return and I'll show you how this works so if I say print Funk 2 and I just give it number like nine there we go we get 14 and seven so it works just like a regular function um and it kind of just looks like a variable so we're saying function two is equal to an anonymous function that's what Lambda stands for anonymous function with the parameter X and simply going to return x + 5 now these are really useful um for using with the map function and the filter function which I'm going to show you later so you don't have to constantly create a new function up at the top of your program and you can also use them inside of other functions so let's let's uh start by doing that so we're going to say funk 2 simply just going to copy it and paste it into my other function and then I'm going to return Funk 2 of X+ 85 let's try that and now if I call my function we can see that we get 92 like so now this again is really useful because you want to um often times create another function or use something multiple times within a function um but you might not want to like write a new one up here like Funk two um you just want it to be only used within that function and in that case you would use Lambda as it keeps it all contained and at the top of your function you can write a bunch of other mini functions um that you can then use multiple times within your program it's hard to see the use case for it in small examples like this but they are extremely useful um especially in like more indepth code longer code so now I'm going to show you with multiple parameters so I believe and I'm not sure but we'll see if we can do this um so we're going to try and we're going to make Funk 3 is equal to Lambda x y and then we're simply just going to return X+ y so let's just see if we call fun three and let's give it a value like five and five and we'll print that to the screen as well see there we go so that does work as well so you can give this infinitely uh an infinite amount of parameters just like you'd be able to do something like this in our function um and you can also I believe do optional parameters so I can do something like yal 4 and then if I put five we should be getting a value of nine here and there we are so you can use optional parameters um you can do everything that you'd be able to do with a regular function except you can just return one expression um like that okay so let's now use this with our map function and our filter function so in earlier videos uh I used the map function and to recall what that does I'm just going to create a list quickly say a equals 1 2 3 4 5 6 7 8 9 oops n and 10 like that and I'm now just going to say let's say new list equals list map and then we're going to have a function in this case I'll just write funk for now and then we give it a list right like a so uh what I want to do now is actually want to just put a function in here uh without having to create a new one up here like I don't want to Define Funk so this is a perfect example where we can use Lambda we don't even have to make a variable like equal to the function anymore we can just type Lambda right in here so Lambda and then we so X and we'll say x + 5 so now we again should simply just be adding five um to each of the El elements in a and then print so we're just print new list to the screen now and see if this is indeed working and there you go we can see we started at one so six uh all the way up to 15 like so again that saves us now having to make a function at the top of our program that we're only going to use for one specific case which is this map function um and again we also don't have to create like Funk equals Lambda up here but you can if you want if you're going to use it in a different case you can just type it right in this same line as uh your map function or as your fil with your filter function so this works the same with the filter function I'll do filter like so um it's going to be our function I guess uh yeah I believe this works with the filter function oh yes it does okay so what this is going to do now is we're just going to return X modulus 2 equal equal Z so again now given X we're going to see if it's divisible by two uh if it is we return true we add that element to the list otherwise we will not we check now we get 2 4 6 8 10 and there we go so you can see why Lambda is extremely useful it's really cool um especially if you want to create a lot of mini functions or you want to create functions within functions um so keep everything nice and organized and it's a nice trick to be able to use in Python so with that being said that's been the end of the video today if you guys did enjoy and you did learn something please make sure you leave a like And subscribe to the channel and I will see you again in the next tutorial hey guys and welcome back to another YouTube video so this is the sixth video in my python intermediate tutorials and today's video I'm going to be talking about Collections and more specifically counter which is a part of the collections module so what is the collections module pretty much it's a builtin module in Python that's going to allow us to have different kinds of data types so that we can store information sort through information um and do some cool things these are extremely useful um the second I found out about them I using them all the time because a lot of the stuff that would usually take you a few for Loops or a few lines um you can do in one line or two lines with these uh new collection types so I just want to first off and start by saying that in Python it has something called containers um so containers are pretty much uh a data type or an object that's going to store multiple objects so it's like a container like a list is an example of a container uh a set is an example of a container a dictionary and a tuple as well um these are the four main ones with pyth and in the collections module they introduce five new ones um which are similar to these but they all have their own methods um and cool things you can do with them so the one I'm going to talk about today is counter uh but the other ones are listed here DQ named Tuple ordered dictionary and default dictionary you can kind of get an idea what some of them are by reading them um but let's get into the counter one for right now okay so first thing we need to do whenever we're using collections as we need to import it um so this first line up here is unnecessary but I just did that to show you and we're going to import import counter from collections so we can reference it directly without doing collections. counter okay so I'm just going to start by creating a new counter so I'm going to say C equals counter um now when you create a new counter what goes in here as the arguments um can just be any uh I want to say like collection data type or any uh container so for example you put a dictionary set um tle you can put a list uh and you can also do something which is weird with these keywords I'll show you that in a second so for example I could create a counter like this by just putting a string and it's going to count all the letters in the string and return them to me and I'll show you that in a second I could create another counter where in here I have a list so I can say like a a b c and we'll just do one more C like that and I could put a dictionary so I could do something like this I'll just make a small one so we don't take too long uh oops like that B2 and you can also put uh these keywords which is what I was talking about it's kind of cool because you don't have to type out or like use a for Loop to create a list like this um I could do something like oops cats equals 4 dogs equals seven like that and I can continue on with keywords um and I don't have to actually put the quotation marks around these I can just name them exactly what they are so let's just go ahead and start printing some of these to the screen to see what actually happens um when I create a new counter object and what does that look like in Python so we'll just print all these um just to give us an idea of what they really are okay so there we go so it says we have a counter object uh it is its own object it's not like a list or dictionary it's its own thing um it says a we have two uh I believe this is an L we have two G1 D1 um and then same thing here A B C dogs cats so you can see it looks like a dictionary in terms of it has a key value pair but it works a little bit differently so now if we want to reference um a specific item which is typically what we want to do from our counter we can just put the square brackets and put the name of that item or the key so in this case I'm going to put cats and you can see now we get four as that's the Direct Value related to cats um and something cool with this counter and a reason why I use it specifically is I can put an item in here um that doesn't exist in the counter it doesn't have a key set and that will actually not return an error like might happen with the dictionary so for example I put ay like I don't know let's see pet then it just gives me zero instead of returning an error so if I were to do this with a dictionary let say d equals like I don't know uh Cat 2 and then I Tred to do D pet like this and get the value uh we get an error uh because pet the key pet does not exist in our uh in our dictionary okay so let's move on to some more methods and why these are extremely useful um so we can see here um one of the methods that we can use is we can actually just list all of the elements out and this is useful if you want to like sum something um so let's just say list and then c. elements like that and what this is going to do if I print it to the screen is it's simply just going to print out all of the elements in our counter so we say cats cats cats cats dogs dogs dogs like that um and since here we said cats equals 4 dogs equal 7 um then it prints it out like in a made list with that many uh indices which can sometimes be useful I'm just going to change this to be named D so that we can now print out the one like this with A1 B2 and you can see we get a b b um like so I if I do the same thing I'll change this to e we print it again um then again we get another list that just has all of the elements in it so that's one useful method uh c. elements another useful element uh or method sorry is most common now this one by far is probably one of the most useful ones um and you can simply just type this so the name of your counter object and then most underscore common and then in the brackets here you're going to put how many elements you want so if you wanted to find the number one most common element you'd put one if you want to find two you put two so let's print this to the screen and see what we get so and you can see we get the most common elements are a and c and it actually also returns us a count of those elements as well so it says a which occurs two times and C which occurs two times and that's returned to us in a tupple or Tuple however you want to call it uh which is really useful okay so now another one we're going to use uh I'm just going to copy something I have open here just to save a spit of time in terms of creating counter objects so I'm going to delete all this and I'm going to make uh one counter which is equal to a uh or C and then I'm just making a list which is uh D and it's a b b c like this okay so you can do something um as well with these counter objects you can subtract Counts from them uh from using other idal objects or you can add uh like the count of objects to them so one method is called subtract oops like this and it does pretty much exactly what it uh it says so we're going to take this counter object this has to be called on a counter object by the way um it says with these counts and we're going to subtract whatever the counts are from D of similar items so we have 1 a two B's and a c so if I do this and I print just the screen we should let's do a quick calculation here get a is equal to Three B is equal to z c is z and d is still 2 uh none oh it's CU I didn't convert this to a list sorry about that let's do this maybe non type object is not ital all right just give me a second guys there is a way that we can oh it's because we're doing this so C do subtract doesn't doesn't actually return anything we just have to print C after we call that method okay so there we go and we do get um what we had there okay so yeah C is Nea 1 because 0 one gives us negative 1 um and there we are so it is working exactly like it should be okay the next one is update so I'll run this now c. update and this is the exact same thing as subtract except it's simply just going to add the counts of whatever iterable object you give it so in this case I'm going to put D and note here that I'm using a list but I could be using like a dictionary could be using another counter object um I could be using a set uh a tuple uh whatever you want to say there it's still going to uh like work for update so let's see here and oh I didn't print C let's do that and there we go so we went originally so we changed our counter by subtracting and then we just updated by adding so it should be the same as our original counter which it is okay so that's working well the next one that I'm going to talk about now is clear um this one does pretty much what it states uh so if you see here we do c do CLE and then I'll print C to the screen and all it's going to do is just remove all of the counts so we now have an empty counter object that we can use to count something else to add to to subtract so on okay so that's it for the methods pretty well there's one or two more but I don't find them very useful so I'm not going to show them right now um but there's something cool that you can do with these counters and there's a few operations that are applied to them so you can actually add counters using the plus sign you do like this C plus D um you can do c minus D you can subtract them you can add them and then the two operations which you wouldn't necessarily uh know intuitively is you can do something called intersection and Union of counters so let's just first show what happens when I add these two counters together so C plus d oops and this needs to be a cter now because this isn't going to work if it's a list there we go so make that account counter and I'll print C minus D and then we'll print another one after that so if I add them and subtract them um you can see that uh it works like this so when I add them we get the counts added up like this and when we subtract uh we get it subtracted as well now some of you might be uh wondering here why we don't have the elements B C or D shown in our counter uh and that is because if the ele count is less than Z or equal to Z it's not going to be shown in our counter when we do these operations by adding and subtracting so because of that um you can see like why that happened because B is two here and we have two BS so that created zero C is already zero and D was 2 so when we subtracted it's not going to bother showing those uh in our new counter now the next operations that we can do is something called Union and um inter intersection so the first one I guess I'm going to show is intersection and the way that you can think of intersection is like the minimum elements in each of the uh the list so we're going to have C intersecting with D um in this case we should get AAL 1 Bal 2 and C 0 D 2 so let's just see if this works and there we go we get B is 2 a is 1 and we're not showing the other ones again because they um like they're equal to zero or less than zero so they not being shown and this is the and sign is what I'm doing to do this intersection between the counters the next one that we can do is called Union and this one you can think of as the max Elements shown in each of our counters um so it's going to take a equal to 4 because that's our Max it's going to take b equal to two that's the max between here Cal 1 and then again it shouldn't be showing us D because that's 2 so there we go we get a is four B is 2 and C is 1 so this is pretty much going through looking at the counters and just taking maximum element whereas before when we did our intersection it's taking the minimum shown of all those elements so that has pretty much been it for this video and counters uh from The Collection there's a few things that you can do with them as well a few other methods if you want to learn about those uh just go to just look up collections counter python uh you can read through the documentation and you can look at some more examples that I didn't show here specifically other than that I hope you guys enjoyed the video if you did play please make sure you leave a like And subscribe and I will see you again in the next one hey guys and welcome back to another video in today's video I am going to be continuing with my intermediate python uh tutorials and we're going to be moving on to something called named Tuple uh or tupple whichever one you prefer um which is a part of the collections data type or module class whatever you want to call it so in the previous video I introduced you kind of to the collection module in Python and I showed you counter which is really useful um today I'm going to be showing you named Tuple which is another data type or class whatever you want to call it within that module um and pretty much this is the description of it I'm just going to read it right off of the uh documentation here because it explains it better than I could come up with um so let's go ahead and do that named tupes assigned meaning to each position in a tuple and allow for more readable selfdocumenting code they can be used wherever regular tupes are used and they add the ability to access field by names instead of position index so you should understand a bit of that but if you don't obviously I'm going to go through exactly how this works and how we can use it so the main difference between a name Tuple and a regular tupal is you can access things by element and it's just a lot nicer to read in your program uh so they might come in handy if you're coding large things or if other people are going to be reading your code so let's go ahead and first off start by importing collections like this and then we're just going to from collections we are going to import named Tuple oops okay so now that we've done that what we're going to do down here is I'm just going to create something that I'm kind of going to go and show you what exactly it does so I'm just making new variable point I'm going to set it equal to a named Tuple with name point and then it's going to have Fields X Y and Z and I'm going to show how this works okay so what I've just done here is I've said point is going to be equal to a new object which is a named tupple or tubble um the name of the tub is point and it has Fields x y and z now this looks a little weird you might be confused what we're going to do whenever we want to create a new point that is in the form of this name tubal is we're going to treat this like a class and we're going to do something like this we're going to say new p is equal to point and then we need to give our uh parameters so in this or arguments so in this case in X Y and Z so I'm just going to say 3 four five like so now you might be looking at this be XYZ this is one string um this might be the name of one parameter the way that this works and it's actually really useful is that it's automatically going to break up this string XYZ into three different parameters so I'm just going to print this to the screen to kind of show um what I mean here so I'm just going to print new p and you can see that we have x = 3 y = 4 and Z equals 5 now what happened here is when we gave an iterable object as our different parameters you can see that we get uh it just breaks it up by space so I do something like gy and then I run this here you can see now g y is equal to 4 I can add another one um on the end like H uh oh and then we're just missing one argument so I'd have to add another number in here so that we get H is equal to 8 I can also do the same thing with the list per se so if I have a list and I want all of these to be the names of like so like X Y uh and let's just do like L and we run this takes four okay I keep forgetting to fix this anyways uh you can see we get x y l any iterable object will work I'm not exactly sure how a dictionary works but I'm pretty sure it takes the keys so let's just go ahead and have a look at this one we'll just say x um zero y z um Zed zero now this might crash but I just want to see if this actually works oh yeah it does work so it just takes the key names ignor the values we get X Y and Z and then I guess you can do the same thing with any other iterable object those are the only ones I can think of that are useful right now so anyways when we want to create a new tupple uh or a new name tupple what we're going to do is just say whatever the name of that's going to be is equal to point which we've set up here to be this type um with these like parameters attributes and then we just give it those parameters now there's a lot of really cool things and methods that go along with this named tle and that's that's why it's useful so first of all you can do something like this new p.x um new p.y and new p oops. z like so and now what this is going to do is it's going to allow us to access each element by its uh index so by its name which you can't do with a regular tle so you see we get three four five to the screen like that and we can use the same operations that we use on basic Tes so I can do something like new P0 like that um and oops my mod thing just popped up somewhere else and you can see we get three um because that's the first one that shows up we can also print this so it looks uh in the form of a dictionary so I'm just going to say underscore is dict like this I believe this is the method or not is as sorry and when we print this to the screen you'll see what shows up and it says an order dictionary and it gives us a list and then it gives us the all the Tes within so X3 y 4 Z 5 um kind of a different form if you want to play with that and use that we can also print out all the field names um which is useful say you forget the fields we can do new P do and then fields and it gives us a tle with those fields in it the next method that we can use is the replace method um this one's pretty straightforward but all you have to do simply is type I don't know let's see here new P doore replace and just make sure you guys remember to put these underscore here all the methods pretty well for this uh required underscore don't ask me why but that's the way they're written they need underscore and then you're going to put a key name so say I wanted to replace Y and I can say equals to 6 uh so we'll run that and then if I just go here and just to show you that we did change that let's print new P like that and you can see oh why did not change to uh to six that's weird let's let me just see if I print this to the screen if this is going to change it should have worked new P like so let's check and Y is not changing to four um that's very interesting why that is not working okay so I just had a quick look at the documentation and the reason why I can't do what I'm trying to do here with this replace uh is because this replace doesn't actually change the Tuple object it it's not capable of doing that so what we have to do is we have to assign a new variable or new object to that so pretty much what this does is it returns a new named tupal uh which we then can set to in this case the same name it it's going to do the same thing that we tried to do except we just need this new P equals to hope that makes sense so now if I run the program we can see that finally this is working we are changing X or I was trying to change y before but I switched it to X to see if there was an issue there uh you could see that that is working like that so anyways um that is pretty much it I'll show one last method here if you guys are still watching so pretty much we can do something like a new a new point so say P2 is equal to point doore make and then I'm going to put a little list in here I'll just say like a b c now what this is going to do is same similar thing to up here is it's just going to automatically grab all of these elements in our list and assign them to XYZ accordingly in our named tle so you can see if I print P the screen now and we give it a run no errors everything's working fine xal a yal b zal c hey guys and welcome back to the eth video in my intermediate python tutorials in today's video I'm going to be continuing with the collections module and we're going to be talking about a data type known as the deck so yes this says DQ right here and the title of the thing is spelled DQ um but the way that you pronounce it is deck uh and I just found that from reading the documentation otherwise I was going to go through this whole video saying DQ anyways uh deck is the proper way to say this word so if I do end up saying DQ throughout the video please don't leave an angry comment about it uh I don't know why I just keep saying it but anyways deck is the proper way so why would we want to use a deck over uh a typical list so pretty much it kind of looks the same as a list and I'll show you in just a second but the reason why we' use a deck is because it's faster in terms of adding elements to the end and the beginning of a list so rather than using a list you want to use a deck because it's going to be faster whereas if you're trying to randomly access elements within uh a container so a list then you're going to want to use a list over a deck and if that's confusing don't worry I'll kind of show you how we uh as we go through so let's start by creating a deck and see how that works so I'm just going to say d and that's going to be stand for a deck is going to be equal to a deck and then this just takes an iterable argument so in this case I'm going to take type in hello but I could give it something like a list a DI iary uh so on so anyways D equals uh deck hello now if I run the program press F5 and I simply print D to the screen here you can see that we get deck and then h e l l o i just split that up into what looks like a list but it's actually a deck okay so now let's go through uh a few methods that we can use on this so obviously we can use something like append so we can append an element to the end so I can append something like four uh I can pend another element do something like five and if we run this and then print it again you can oops didn't mean to do that then you can see we get hello and then four five so on so you can append uh a nice thing is you can actually append to the beginning of the list as well so I can say append left instead of just regular append and now you can see when we run the program and we print D I don't know why that didn't work let's see here we get five and then hello four so that's a nice method as well we can do the same thing with popping which is removing elements from the deck uh so I can do pop in this case and I'm not going to do four in here so I do d. pop and then I can also do d. poop left and what pop left is going to do is it's simply going to remove the first element in Our Deck rather than the last so pop uh this works on lists as well and dictionaries and stuff you can remove the last element or whatever index you type in here like five two whatever that's the one it's going to remove pop left simply removes the first one so I'll do this and then print D and you can see that we are left with eell because we removed o and we removed the H okay another method that we can use is clear uh this one is simply going to remove everything from the deck so that's pretty standard if I print D again then you can see that we have an empty deck now okay the next few that I'm going to talk about here I believe you can use on some other containers in Python but they do work on this deck as well so let's go through that so now that we already cleared Our Deck let's just go ahead and add some more things to it so what we can do is we can do something called extend and what extend is going to do is it takes an iterable argument which means anything that's a container so like a list a string uh something like that and it's going to put it at the end of our list so if I have something like 456 and I run the program and I print D you can see we get four five6 at the end of our list now to show you what happens if you already have something in I called it a list but our deck is if I extend again I'll extend something like so we can see it better hello then what we get is print D we get 456 and then hello so this is a way that to add multiple things into your deck so again if I make like a list and I go like 1 2 3 this is going to work as well so we should get four five 1 2 3 and print D and there we go we get that as well so if you ever don't want to run through like a for Loop to add an entire list into a deck then you can simply use extend extend also works really nicely um with extend left which is going to add to the beginning of our list so now we have a list of 4 5 6 1 2 3 let's see what happens if we extend the word hey um to the left side of the list so I'm going to print that and you can see we get y 45 61 2 3 you might say well why didn't we just get H well it's because we're actually extending to the left so we're going to add this in the reverse order and that should make sense because if you're extending this first and then you extend this and then you extend this y should be the first element on the left side of Our Deck like that okay so now we're going to use um a few other methods so this one is probably the most useful one that the deck has and the reason why you would use it if especially if you're going to be dealing with things at the beginning and the end specifically and it is known as rotate so what this does is it takes a integer in here either positive or negative if you put a positive in integer in here it's going to rotate all of the elements by that amount to the right otherwise it's going to if you put a negative element in there rotate everything to the left so just see what happens if I put negative 1 in here to rotate to the left and then we'll print down here sorry it's at the bottom of the screen right now and you can see that we went from this one which was the last uh D or whatever when I printed it and now we've rotated everything over so three's moved over to the position of Two And when we get all the way over to here we've switched e and Y so E's moved over here and Y has been rotated back to the end of the list now you can actually rotate with other uh numbers as well so rotate by two and then you can see if I print D down here that we get a rotated two elements over now and this is is really useful when you're trying to solve certain problems uh to be able to use this rotate again you can do the same thing with positive so if I just rotate it by one now and I simply print D you can see that now we've rotated to the right side so three which was originally here has now been moved up to the beginning of the list okay so now that we've talked about that there's one last really useful thing um that I left out on purpose because I wanted to show now that we can do with these decks so when we initi iate Our Deck here we give it an iterable object we don't have to give it anything it'll just create a blank one if we do that but there's something that it has called Max Len now if I do something like Max Len 5 and I'm just going to remove all this and I'll show you how this works so I have a max line of five and I have a string that has five characters in it if I try to add something to my deck here so I'll just do I'll just simply I'm going to print it here just so it saves us some time going to print D and then I'm going to go d. and let's do one and then print D again let's just Watch What Happens so you can see we get we have a max line of five we start with hello and then when we add one H is actually removed from our deck now the reason that happens is because when we set this max length when we start adding things into the list it needs to remove something to maintain that um attribute of a maximum length of five so it removes the first element from our deck uh and that's really useful as well if you're solving problems because then you don't have to deal with removing things every time you add something to the end or removing like a slice of for example list if you're going to be adding more than one thing so if I extend like something like let's see here one two 3 now we should see that h e and l should all be removed and we should have L1 23 so let's try it and there we go we get hello and we get l123 and we didn't have to deal with figuring out how many elements we need to take from the left side from the right side because of this Max Len now just to note you can't change this Max len by doing something like d. Max Len equals five it's uh or I guess we'll do like six because it's already five you can only access what the max Len is by just doing is simply this print ma d. Max L and this should just give us five uh and it does but if I try to do what I was showing you there so d. Max Len equals 5 you'll see the error that comes up and it says this attribute of Max Len is not writable so we can't actually change it after we've initiated that value so anyways that's pretty much been it for deck within collections this is really useful and you might not see a use for it now but if you start solving some more advanced problems using this deck will make your life a lot easier with those methods that I went through and I'm going to copy all of them down uh into like a little paste bin thing so you can click the link in the description there if you want to see all of them in a list um so you don't have to specifically memorize that other than that you can always just go to the documentation and have a look if you just search up like DQ collections python it goes through what all of these do again I forgot to talk about reverse but it's pretty straightforward you can use reverse and if you're followed up to here you probably probably already know that one so anyways that's been it for this video um if you guys enjoyed the video please make sure you leave a like And subscribe and I will see you again in the next one hello everyone and welcome to the first video in our python expert level tutorial series now what I'm going to be doing in this series is teaching you about some expert level features in Python how they work how to implement them and then getting into how you can actually use them and why you would use them in your python code now it's worth noting that a lot of the features I'm about to show you as much as they're very useful and complicated and you know Advanced and expert level you don't necessarily need to use them there's a time and a place and as you guys learn this you should refrain from using these features just to almost show off and actually make sure that you understand the purpose of using them and use them in the correct context that's what a lot of the focus of this series is going to be is giving some meaningful examples that try to tell you when you would actually use this feature or at least help you understand really why it works so that you could think about a situation when it might want to be implemented now quick disclaimer here if you guys are not python you know intermediates already or you're not familiar or fluent in python this is going to be a difficult tutorial series for you to follow along with you know you're welcome to as always but just keep that in mind I do have a lot of python tutorials on my channel that a more beginner level if you want to follow along with those before maybe jumping into something like this now in this video what I'm going to be doing specifically is talking about some very interesting and cool features in Python these are not anything specific they're nothing you may not have seen before but it's something that you need to kind of understand before we can move into the more advanced things so we're just going to be talking about how python code actually runs and why we can type out some weird lines like I'm going to show you um in the next few minutes anyways what I'm going to do now is briefly discuss how python code is actually ran and executed now I will say right now I'm not going to go into extreme detail I'm hopefully going to give you enough information so that you understand on kind of a surface level but if you do want to read into this I would recommend it because understanding how your program is actually compiled interpreted and eventually ran on your machine is very important and it definitely helps you understand why a lot of the things in the language work the way they do so most of you would have probably heard that python is an interpreted programming language but what does that really mean well to understand that we need to define the difference between a compiler and an interpreter and talk about how they work together because although python is interpreted it is actually compiled as well into bite code before it is actually interpreted so the way that python works and actually we'll go back to the definitions first so a compiler what does a compiler do well a compiler takes some highlevel code typ Ally high level code and translat translates it into a lower level so for example the python compiler that we use is going to take our python code which would be considered highlevel code that's furthest away from the hardware right and translates that into something called bik code which is a little bit harder for us to understand and closer to the computer's level so that it can actually be used and ran on our machine so what does an interpreter do well an interpreter takes some kind of code typically B code and interprets and runs that that code so it will read that codee and translate it on the fly into machine code that can be executed by our computer rather than doing this translation beforehand when you use something like C what you typically do and depending on the compiler that you're going to use there's tons of different versions and methods of doing this you will compile your code directly into machine code which means that it can be ran directly on the operating system that you're using and you don't actually need an interpreter to interpret your code and run it now I know this seems like a lot but this is something that we kind of need to understand so now I'm going to go into the way that Python's kind of execution chain is when you actually you know press that F5 button or do whatever it is you're going to do but essentially what happens in Python is you write your highlevel code which is going to be on your desktop you know in your text editor your python code and then when you press that run button or you go to execute that code what happens is it's translated into something called bite code now this translation is simply just a tool that checks all of the Syntax for your python code and then converts it into some equivalent code that can be read by The Interpreter that we're going to use so what happens is if you have invalid syntax like say I just type CL or something and that's not defined or I mess up and I don't have a colon or something like that then we get an error because the translation can't happen because the format of our code is incorrect and hence you know invalid syntax that's the error that you would get now assuming that your syntax is correct then what happens is you'll move on to the next stage where everything will be translated into bite code and then that bite code will run through the compiler and the compiler will translate that bite code in like a live time into machine code that runs and executes on your machine so this is why there's a lot of issues with python running on say mobile devices or on other devices that don't have a python interpreter because this bik code cannot be directly understood by the CPU you need some kind of interpreter to run it so hopefully that clears it up a little bit on how that works the basic summary is you know you write your high level code translated into bite code that bite code is then translated through an interpreter in live time as it's reading line by line so one at a time not all at the same time into machine code where it is executed and that's how your program runs this is different than a lot of other languages and each language has a very kind of complicated process of compiling and interpreting and running code so anyways I hope that kind of cleared it up a little bit but this feature of being interpreted and having a lot of things happening live is what we're really going to dig into here so the first thing that I want to show is something that's unique in Python that's not unique in a compiled language and that is the fact that a lot of checks and a lot of things that you typically can't even write with you could not compile code that exists these types of things in other languages you can do in Python so let me just show you what I mean all I'm going to do is create a class dog and inside the anip method um I'm simply going to call a method that does not exist called bark so this is my file um intro. piy we have a class dog a nit and a method self. bark that's being called but that method does not exist in the class body now for any of you that program in other languages you'd say okay well this is not going to work right if we don't have this method the compiler is going to pick that up it's going to say okay we cannot compile this code you need to Define that method or you need to remove the statement whereas in Python we do uh what was this python intro. py no issues we're totally fine we're good to go this is something that's unique about python is that a lot of the code is actually executed at runtime not at compile time all that the compiler really does for us in Python is just translate this code into B code it doesn't necessarily check that all this code is a valid now this a good thing and this is a bad thing we'll talk about why later on but that's something to understand that you can make errors like this in your python code and they will not be caught until runtime which can actually be a huge problem when you know you can't test every single aspect of your application your app gets through goes into a production environment something happens in runtime you didn't check it cuz the compiler didn't pick it up and now all of a sudden your code has crashed right so that's something to consider Okay so we've done that um that's fine that's just something I wanted to discuss and show you and that's kind of the way that python Works everything is actually happening kind of live it translates but then the runtime environment is what picks up on a lot of these errors okay so now let's get into some cooler things and talk about some strange things that we can do in Python that we can't really do in other languages so I'm going to Define a function and I'm actually going to make this function called make class so Define make class now what I'm going to do in here is get a parameter called X and I'm actually going to define a class inside of this function called dog just like we did before so I'm going to say class dog let say Define uncore uncore netore uncore we'll take a self value we'll take a name and then we'll just say self. name equals name okay now what I'm actually going to do is say Define print underscore value what I'm going to get this to do is simply print the value of x so we'll say print X like that and then I'm going to go down here and I'm going to actually return uh the dog like this now notice that I didn't return an instance of the dog by putting the brackets I simply returned dog itself which is actually a reference to the class not actually the uh the object so what I'm going to do down here now is I'm going to say CLS equals make uncore class and I'm just going to print out CLS and show you what this is so let's say CLS let's give the value 10 in here let's go and let's see first of all is this going to work does this not work why does this work what is this even doing well we'll talk about it okay so this actually worked so see what happened here we had this function called make class took an argument X and then we had a class dog that we defined inside of this function now first of all this should look strange to you but but the reason we can do this is because again the python compiler does not check if this is valid or not it doesn't really care so long as you have valid syntax so long as the format is correct your python code can run and it can execute and that's fine and that's exactly what's Happening Here we can define a class inside of a function because that's just the way python works we read from the top to the bottom left to write and that's totally fine that's totally valid now what have I actually done inside this function though well I've created a class that uses a value from the actual function argument here and then we actually return the class itself not an instance of that class now notice that's something that we can do in python as well since python code is running live it's kind of executing on the fly all of these things that we've defined here are actually being stored in memory so this um dog class here actually has a memory location for it that's why we can actually see this same thing with this function same thing with our VAR variable um and same thing with anything else that we Define that's something that's true about python is that all these things are actually defined and stored in memory which means we can interact with them live which is what we're doing right now so when I printed CLS we can see that I got main.m class. local.dog now let's just translate this a little bit although I'm sure most of you understand this main simply means this came from our main module which is a module we ran make class is the name of the uh I guess what is it function that we defined here locals Define what's inside of this function and then dog tells us the actual name of the class so that's what we printed out here but now let's see how we can actually use this so what I'm going to do is actually make an instance of this now I'm going to say d equals CLS name Tim and I'm actually going to say d. printor value like that and let's run this now so now we actually get the value 10 so what I've done is I've said okay well this CLS variable is actually a class since it's a class what I can do is use the way that I would typically use a class it's literally just another name for dog so we'll put our brackets we'll create an instance of it which makes self. name um you know equal name I can show you that as well by just printing d.name and then what we'll do is call the method on our object now the prints the value that we gave when we actually created this class so you can almost think of this um function that we've defined here as a I guess class Constructor where it's creating the class for us then we can use the class so I think that's pretty interesting that's something that's cool and again if we wanted to I could Define another function inside of here we can do another class inside of this class I can make seven classes inside of this function there is no limit to what you can do so long as you're using the correct syntax and you know it's not going to crash at run time right so that's something to consider now let's show some other weird cool things that we can do in Python um that's actually using some other kind of syntax so what I'm going to do now is I'm actually just going to make a for Loop and you might kind of be thinking about what I'm I'm going to do here so I'll say 4 I in range 10 what I'm going to do is Define a function I'm going to call this function just uh I don't know let's do show and all this is going to do is simply print the value I and let's just do I * 2 why not make it a little bit cooler now I'll call the function show here and let's run the code and no surprise to any of you when I run this that this should work fine and we get all of our values printing out so we can obviously do things like this I can define a function inside of a for Loop what I've done here is well only one show will actually ever exist at the end of this kind of runtime but I've defined 10 different shows that do 10 different things and I've called them directly after and then they get overridden and I do them again so that's something that's cool and again another feature of python that you can't really do in some other languages now what happens if I take this show and I put it outside of the for Loop so it's not running at the same time as this function is defined at well let's run this we see we just get 18 the last show that was defined is the one that exists and the one that's created now why would you ever do something like this I don't really know maybe if you had a lot of content inside of this for Loop and you had a function you were going to use it multiple times but only locally you could Define it up here again doesn't make that much sense to me to do that but just showing you some of the features of the language okay so now let's show some other things that we can do um I'm trying to think of something that would be cool okay so let's do another one here let's say Define Funk what I'm actually going to do here is take some value let's just say x and I'm going to return a function from this function if the value of x is a certain value so I'm going to say if x equals equals let's just say one then what we're actually going to do is make a new function we'll say Define uh I'll just say like RV which will just be return value and then inside here we don't need any parameters all we'll do is say print X is equal to 1 okay otherwise we'll do is say Define RV and then we'll say print X is not one okay now we'll return this function RV and if you guys remember from what we've done before what I can do is say Okay newor Funk equals Funk of let's just do value one and then I can actually call my new function like that because notice if I don't do this right then let's have a look at this here nothing gets printed out to the screen but if I call my new function by putting my two braces outside of it here then what we get is X is is equal to one and we could change this obviously and then we would get a different value where we get X is not one so we can do interesting cool kind of like paradigms like this again I don't know why you would use this there's easier ways to accomplish this but it's something to consider is that this can actually happen and any arguments that we use here obviously we can use inside of these functions as well and we can get into some pretty complicated things when we start defining functions inside of functions inside of functions Okay so last thing that I want to show you is just a cool thing that we can do to actually look at some of the details of our objects because remember that I said everything in Python pretty much Happens Live this function is an object um this function is an object our Val variables are an object any classes are an object which allows us to do what I'm doing where we're passing them through and around the program they'll have their unique memory address and so long as we can reference that we can use it so let's actually see how we can inspect and look at some of our functions so first of all I'm just going to show you you know you probably seen this before we can look at the ID of our function if we'd like to just by doing this um now if I print this out this should give us the memory address location of our function which we can get right here um and there's a lot of other things that we can do as well and one thing that I want to show you is actually by importing the inspect module so the inspect module can show us some pretty cool things because of the fact that all of our python objects classes all of that are actually live we can interact with them we can inspect them we can ask questions about them um and get that value back from The Interpreter so what I can actually do in here is say print inspect dot uh what is this we can do I'll do get members for now just to show you so get members I won't really discuss exactly what this does but it's just going to show you some details about the function so let's look at this here we can see we get all of this little information and we can obviously use this if we wanted to let's see if we can pick anything out in particular um that stands out nothing okay so here we go function. Funk locals RV at this memory address location so it just gives us all this details that's called new funk is down here the name of it so we can get some stuff like that um not extremely useful we can't use that at other times another really cool thing is we can actually get the source which is the source code of a specific function method class whatever you want so here when I do this it actually tells us the source code of the specific python function now why would this be useful well if we wanted to see exactly what was happening in some kind of thing that we were using that was maybe Library code we couldn't access that actual code we could have a look at the source code like this so now I want to show you another useful thing of this inspect module if I were to import some module and this is kind of a good use case of it say like Q right which is a python builtin um what is it from from Q in for Q This is a builtin data structure from Python and I wanted to look at the code of it obviously there's other ways to do this but if you wanted to just quickly do it in your terminal then what you could do is do something like that and now we can actually see all of the code that's been used by python itself to create this object or create this class so I think I'm going to wrap it up here it's been about 15 minutes I hope that this gives you guys a good understanding of python a little bit more how we can pass objects around how we can look at their values we can inspect things we can look at the source code and just remember that everything in Python is pretty well happening live all these objects are defined in memory and well since they're defined in memory we can do a lot of cool things with them like pass them around the program and since the python is an interpreted language we can do all these crazy things where we Define classes inside of functions functions inside of classes inside of functions that we can go crazy and we'll continue to do that as we get further into this tutorial Series so if you guys enjoyed make sure you leave a like subscribe and I will see you guys in another expert Python tutorial hello everybody and welcome to video 2 in the python expert tutorial Series in this video we're going to be doing is talking about Dunder slashmagic methods and the python data model now this is very important this is something that I guarantee you've seen before but you probably just haven't understood what it actually was or why it was working the way that it did and this is actually going to give you a great insight into the way that a lot of things in Python actually operate because until you see this you kind of just take them for granted so what I want to do is give you a very basic example of two objects in Python um just kind of being used and interacting together I'm going to show you how we can create the same thing with our own python objects and even modify existing python objects to implement uh implementations or operations that we want so what I'm going to do to start is I'm going to just make two uh variables here I'm just going to make a list I'm say 1 2 3 and I'll make another list that just says you know four five like that now we know that with lists we can add them together by using the plus sign right we know that that's fine that we're allowed to do that so let's actually have a look at how that looks we get that list and it adds them together now why does that work we don't really no we kind of just assume that that's a feature in Python that we can add list together right and that's totally fine for our intermediate kind of understanding so what about length right I can get the length of a list that works fine too so if I look here I get a length of three and there's all kinds of things that I can do on a list like I can index something on a list I can put you know X1 and that gives me some value here and you're like well why are you showing me all this stuff because you're going to see that this kind of syntax that we're using right here on this object because this list is actually an object and I'll prove it to you just by printing the type of it and telling you that is actually a part of a class you can see class list is implemented under the hood now you might not understand what I mean by that right now but I'm actually going to import inspect and show you and then we'll get into a little bit deeper of this understanding so what I'm going to do is actually just say print inspect doget source of list Now list this is going to be ridiculous when we look at this in the terminal um list is a builin class oh it won't let me uh look at the source of the builin class okay that's fine we don't need to look at it for now um but anyways the whole point of this is that these objects here this is an object this list is they're both objects we take for granted the fact that we can perform certain operations on these objects using some special python syntax right like even being able to multiply list together like I can do X multiplies by 3 right that's kind of a special syntax why is it that we're able to to do that well that's because this operation is implemented on the list object itself and it tells the list object how to behave such that it sees a multiplication sign right after it or such that it sees a plus sign or it sees this index or it sees a call we Implement that functionality and because we can do that we can Implement that on our own objects now let's do one more example so obviously we saw when we printed out the value of this right we printed out X um we just printed like it just looked exactly like this it printed 1 2 3 right or in fact actually let me show you if I do a space here and I just print X let's have a look at what we get here we can see that this gets uniformly spaced even though there wasn't a space here so it's not the fact that it's just printing out exactly what this looks like there is something under the hood that's telling python what this list object looks like and what to print when we decide to print it out so let's create our own object now actually so I'm just going to say class person like this and let's just Define in a knit method now this is actually a double underscore method or a Dunder method or magic method whatever you'd like to call it we'll talk about how this one works in a little bit although I'm sure you guys understand so we'll just make our object uh person I'm going to say p equals person like this Make an instance give it a name of say Tim and then if we print the value of P well if we were you know if we looked at the list before and we saw that the list printed 1 2 3 4 just printed exactly what it looked like we we would assume that when we print P it should just print person Tim right it should print this well when we look at it it doesn't do that and I'm sure you've seen this before it prints the memory address location now the reason it does that is because we have not told person what to do when we try to print it it does not know what that what we should show so by default it shows the information that it thinks would be valuable which is simply just its memory address location right that's its like representation internally in the python program so how can we change this well we can Implement what we call a Dunder method or magic method which is called repper now I'm sure you've seen this before but essentially what rapper does is allows us to define the string representation of an object um from inside of it so what I'm going to do is make an F string and I'm simply going to say person and then in here self. name so now when we decide to print this out what we get is person Tim and I'll just do it one more time instead of getting that crappy you know just gibberish of memory address location so this is the first thing that we can do is we can Implement methods such as this on our own objects um to implement some kind of functionality now let's show a few others and why this is so powerful so there's actually a whole list of what we call Dunder methods and this is what's part of the Python data model and some people call these just data model methods and essentially um you guys can read through this if you want I'll leave the link in the description someone remind me if I forget if we scroll scr down to the bottom here we'll start to see that there's all kinds of these double underscore methods that we can actually Implement on our own objects and obviously I'm not going to go through all of them because there's just so many to kind of talk about uh but let's keep going down here so for example new nit Dell repper right we have this one here string bytes format uh ltle e EQ NE GT G we'll talk about what all those are hash um bull right get attribute set attribute dur Dell attribute multiplication there's all these kind of things that we can do so what I'm going to do is actually do a weird one and I'm going to U implement the multiplication Dore method so what this tells python to do actually um is what happens when we use a multiplication operation on objects of this type on objects of type person so what I'm actually going to do in mole here I'm going to assume actually X is going to be some integer and what I'm going to do is just take the person's name and multiply it by whatever the integer is and that's the operation we'll implement when we use the star or the asteris on the person object so what I mean by this is I'm just simply going to say selfname equals self. name time x and I'll even do a little just um thing up here I'll say if uh Type X is not int then we'll simply just throw an exception so we'll say raise exception we'll just say invalid argument must B in uh or in yeah whatever it doesn't really matter what we put there but that's fine okay so we'll say p equals person now what I'm going to do is simply print p uh we won't print that actually we'll just say p * 4 and then we'll print p and let's have a look at what this gives us okay person tim tim tim tim tim right so we can actually Implement whatever functionality we want using this upper level python syntax by implementing some kind of lower level Dunder method and that's what the whole point of this video was to do was to show you that everything that we use in Python all of these different symbols can be implemented on a lower level on our own objects and these are again our like data model uh methods right so we can create objects such that we can add them we can multiply them we can have representations we can do a call on them we can do all kinds of crazy things for example let's do Define uncore call let's just do self let's take some argument why not why and let's just print this value so what I'm going to do is now instead of printing P I'm just going to do p and put value four in there and now let's watch what happens so if I go like this we get the value four printing out we could even change this called this function right four so what happens is we can implement the fact that these two brackets what these two brackets do if they are on an object which is really cool it allows us to make objects that are much more usable much more readable and just almost seem like they fit in with the standard python documentation because I don't need to necessarily call a method I could actually just put the brackets now anything you can think of with this kind of syntax you can probably implement for example Define underscore uncore lencore uncore self return the Len of self. name maybe that's how long a person is unless you're going to ask for their height or something like that then what we could do is print the Len of P right so if we go like this we get three as that's the name so that's kind of the idea behind these Dunder meth in these data model methods the whole point is everything that's above even something like division you know greater than or equal to um less than whatever it is equals index all of these things can be implemented and if you want to see the implementation details of how all these work then you can read through this data model U documentation because there is a ton of them the whole point is you don't need to memorize these you just need to know that they exist and then you can think about for example if I have a class and I want to implement some kind of functionality maybe I have a polinomial class I want to add them or multiply them together then rather than having to make my own method called multiply what I can do is simply implement the mole um double uncore method and then that will allow me to use a star on it now notice you're going to want to make these types safe because obviously I multiplied by an integer but you could technically multiply two people together um you can do all kinds of things such as that okay so now I'm just going to show you something interesting this is just maybe to kind of inline you a bit or to show you something that we could actually do in theory so what I'm going to do is import actually let me say from Q import q and import inspect now what I'm going to do is just make a q object so I'm just going to say qal Q if you don't know Q it's just a builtin data structure in Python works as a q pretty straightforward and print Q okay so I just want to print Q to just show you that Q does not actually Implement a rapper method so let's just do this um and you can see that we're getting some random you know kind of memory address out to the screen so if I wanted to actually see why this wasn't giving me that representation I could have a look into Q itself so I can say print inspect uh doget Source like that and then I could print my just Q object like this not Q object sorry Q class have a look at the source code and we'll see that if we scroll through it here we don't have any Dunder methods that are implementing any functionality so let's say you wanted to make your own Q class that worked very similar to the python Q class but you wanted to do things like allow the plus sign or you wanted to do things like allow the minus sign well what you could do is you could say from Q import Q as Q like that then you could say your own class class Q is extends from q and then you can Implement your own Dunder methods so that you could override this so for example Define uncore rapper like this and then what I want to do is maybe I want to show a q but I want to say how many elements are in the Q well then in that case what I would do is return q and then I would say q and then I guess in this case going to be self doore Q length or Q size something like that now now what I do if I create a q say uh you know qu equals Q like so and I decide to print out qu like that so let's have a look and we can see we get Q with zero items now the reason I knew to use Q size is because I read through the source code and I saw that Q size returns a length of self doq and I see here we have self. q equals DQ uh what else do we have all these other things so this Q actually just implements a DQ object uh where's the init it's right here it can read through you can understand how this works so if you wanted to actually add something to the que right using maybe the plus sign and you didn't want to implement something else then what I could do is say Define underscore uncore add _ self um item like that and then what I would simply do here is okay let's add that to the Q so we'll say self dop put and then item so now if I want to add something to my Q I can say Q + 9 and it doesn't even need to be equals I can literally just do+ 9 and if we come here and we run this now we have an object CU with length one right and I could keep doing this I do Q + 7 right like that and then if I wanted to I could literally Implement a negative sign so I can say Q minus we have to put something here but if I want then I'd say Define uncore subcore self item and then all I can do is say s let's just say self. getet like that and that's all we need to do so now if we run this we should see Q as length one and even though I mean I don't like I just put a minus sign like this actually I'm curious if this will even work um Q minus imbal syntax so I could do like Q minus none if I wanted to uh and then that still will remove that item for me so this is the idea right these aunder methods allow you to implement these kind of syntax things this higher level syntax and this is what's called again the data model in Python this is how all these different objects work and these Dunder methods can be very useful there's a lot of different ones I'm not going to go through all of them but the whole point is that you understand that each one of these kind of unique pieces of syntax in the higher level of python maps to a lower level Dunder method that implements that imp implements that operation right so that's the way that this works so yeah so hopefully that kind of cleared things up on Dunder methods and Magic methods they're really not that complicated they're very useful and when you're creating classes where these operations make a lot of sense to do like adding subtracting multiplying especially working with numeric values being able to avoid having to create your own methods like Define add x y and being able to just implement the dunder method add and use the plus sign can make things a lot more intuitive um and just easier to read in your programs so anyways that has been it I hope you guys enjoyed this video on Dunder methods magic methods and the python data model as always if there's anything you'd like to see in the future videos please do leave a comment down below like subscribe and I will see you in the next video hello everyone and welcome back to another python expert tutorial series what we're going to be doing in this video is covering meta classes a fairly complex but very interesting topic in Python so we're going to start from the very beginning and start understanding how classes are actually created instantiated um the way they work on a lower level in Python and then from there we're going to move into what meta classes are how they actually work and why we would even want to use them now I'm just going to preface this video by saying meta classes are an extremely complex thing I'm only going to be showing kind of the basic implementation of meta classes here if you really do want to use these you're going to have to look up the documentation and implementation details on your own and there's very few instances in which you need a meta Class A lot of what I'm about to show you can be accomplished in other ways and typically you're going to want to use another way other than a meta class just because these are seen as very complicated and almost sometimes bad practice depending on what you're trying to do so these should really only be used by experts I mean I'm showing them to you guys so you can get an intuition on how they work and if you see one you'll understand what it does but you shouldn't really be putting these into your own code and using them unless you absolutely need to so before we get into the content again a quick thank you to kite for sponsoring this video series they have a download link in the uh in the description down below you can download them for free they are essentially a very good python autocomplete so you can see if I start typing some things like this we get a kite completion thing popping up and anyways that's what they are they're free you can download that from the link in the description all right so let's go ahead and get started now the first thing that I want to do is really discuss how classes work and what classes are so we saw in the previous example and I believe two videos ago I did something crazy like this right and I made a class and I find it inside of a function and then in that function I actually just returned the class itself and this is totally fine this is valid syntax you can see I just ran the code down here we don't get any errors that's fine the reason we can do something like this in Python and not in other languages is because in Python classes are actually objects now the property of an object essentially means that we can interact with it at runtime we can pass it around through um parameters through variables we can store it we can save it we can modify it we can interact right that's what an object is now a lot of people are going to say well how is a class an object I thought a class created objects for us well that's very true a class does create objects for us but that doesn't mean that it's not an object itself and if a class is an object if you believe what I'm saying and I'll prove it to you in a second then that means we must have had some higher level class that created that object for us right just like if I Make an instance of high and I do something like that that means we must have this class High such that we can make an object you know and have the instance for it so what we're going to be getting into here with meta classes is the basic idea is a class defines the rules for an object right it defines the attributes the parameters the methods the things that are allowed the operations that can be performed that's what a class does for an object what a meta class does is Define the rules for a class so when you create a class you will use the meta class to create it this happens automatically you don't need to type anything specifically but we're going to hook in to it later and see how it really operates and that meta class defines how this class is created and that's the basic concept here so I'm going to make another class and I know this is confusing but as we go through here you're going to start to slowly understand with these examples and all I'm going to do is just print an instance of this class so let's look at it we can see this tells us it's an object main test object at some gibberish location so now let's print above this just the class itself okay look at that class main. test now the reason we're able to do this again is because this is an object so I know this doesn't explicitly say object but this class is an object now I want to look at something else so we know we have this method in Python called type and I can look at the type of a uh a class or an instance or an object and I see what it is so let's look at it when we do the type of test we get that is in class main if I were to print say the type of an integer right like the type of two let's have a look that's class int right and we could print you know the type of whatever we want we could print the type of a function so we say Define Funk like that and then just we'll just say pass in there and we do Funk what's that that's class function right so that exists in a function so this is an object this function is an object everything in Python is an object and that means they have a type and they were created somehow so what is the type of a class well let's look at it so we'll delete all this and then we'll just print the type of and I somehow hit insert accidentally there of test so what do you think this type is is it of type test is this class of that type no it is of Class Type now I know this seems ridiculous this means nothing to you right now we're going to dive into what this is but essentially this is what we would refer to as the meta class so this type is what essentially defines the rules and creates this class for us when we type this class syntax we will call a type Constructor using the different things in our class to make this class object that we can then use to make objects and use to interact with in the program so what is Type how does this type thing work well if I told you that this class all this is doing the syntax is just calling this type class then we should explicitly be able to create our own objects without typing out the syntax like this we should just be able to use the type class itself which is true and what I'm about to show you so I've just created class test it it has passed it has nothing in it right now I'm going to show you how we can make this without actually having to type this kind of syntax and writing out class in fact and this seems ridiculous I agree python should have done a better job when they defined this but I believe it's something to do with just backwards compatibility we can make a class by doing this and just watch and then we'll talk about exactly how it operates so this line of code is completely equivalent to this these two things are completely equivalent there's absolutely nothing different about them and I can use test here the same way I can use test here just like I can create an instance of test I can create an instance of this other test so let's do it let's let's prove it to you so if I print test and Make an instance boom main test object Works totally fine no issues with that what else can I do I can print the class and again same thing we have that object totally fine that's because this function here essentially creates the class for us using these different arguments a name this is the internal representation of the class any bases which means anything that we inherit from so like a super class or a parent class and then any attributes so let me start showing you what I mean uh and then hopefully this should make some more sense so I'm going to set an attribute of five I'm going to say t equals test Make an instance and just print that attribute uh go like this of t.x so just like this works on a regular class we can do that we get our value five now just like in regular classes as well I can Define attributes outside of the class so you say something like t. Wy why not set that equal to let's just say hello want to print Wy sure let's go for it uh T.W one second guys oh T is not defined so that needs to go above so I can explain meta classes but apparently cannot just create regular classes okay so that's totally fine that works we have t equals test and then T.W equal hello we can print that attribute that's totally fine so that's how we can create classes using type now what about methods what about sub I'm going to show you all that so we'll do that now uh and then we'll get into actually meta classes and how this is even useful to us so what I'm going to do is make another class I'm just going to call this class Fu let's just make a method in here just called print uh actually not print let's do like show and then all we'll do in here is take one attribute we'll say self and just print hi why not right just do that so if I want to now have an inheritance what I can do is simply type the name of the Class A Comma just to make sure this registers as a tble Here and Now test will inherit from F which means that if I want to use the method show I can do that and I can run that like that and we get that now I shouldn't have printed that out because I forgot that wasn't a return value but you can see we get high that works totally fine this is how you do this right now what if I want you add methods right so to add a method is a little bit different but essentially what you're going to do is just Define a function that will be the method signature so in this case let's say you know add attribute put self like that then here we just say self. Z equals 9 why not right we'll do that and then in here we'll Define our attribute so we'll say addore attribute colon guess what we're going to do add attribute no brackets now make our instance let's call t. add attribute and then let's print t. Z like that and let's look at this and there we go we get the value nine that works fine so this is how we use type this is how we create a class and this is very important to understand as we get into the next part of the tutorial here because if you can understand how we use this to create our own classes then you're going to understand the next part and why when we have a syntax like this all this really does is pass that information to another class called type that creates the class for us and returns an object that represents that class now I know this was a lot I hope this you guys understand at this point now we're actually going to get into meta classes this was just the underlying information we need to understand all right so welcome to the next part of the tutorial what we're going to be doing now is actually getting into meta classes and showing how they work so again the basic principle here is to remember that a meta class is above the classes you're creating yourself so if you create something like class dog right and you do that what's actually happening is all this information that you typee out the syntax gets passed to some meta class the thing above it that actually takes that and returns to you an object that represents that class and that's the whole point here so what we're going to do is actually make our own meta classes so rather than using that builtin type class and you could see on all of our objects when we looked at the type of them they were of type type we're simply going to make our own meta class that inherits from type so does a very similar thing but we're going to change slightly how objects are constructed so you can really understand how this works now you might get lost a little bit at the beginning when I start typing some of this stuff out but hopefully you should start to follow along as we go through and explain how all this works so let's get started I'm going to start just by creating a meta class and I'm going to call this meta now whenever you make a meta class what you have to do is make it inherit from type uh not necessarily but for our purposes that's what we're going to say it has to inherit from type to make a meta class the reason for that is because type does some other things when it's creating an object right and if you don't inherit from this well your class is just going to be not a meta class now because it's going to be using type to create this kind of class if that makes any sense whatsoever but hopefully that does what we're going to do now is I'm actually going to define a new method like this and for those of you that don't know what new does as a Dunder method or magic method like we talked about before essentially this is called before the init method so this is the first thing that is always called when a object is created or instantized or whatever you want want to call it this is always called first so what you can actually do here is hook into this and modify the way an object is constructed by changing what happens in this new method whereas the init all the init is doing is after this new method gets called and the object is constructed what it does is it um initializes uh it changes the values it takes some parameters in like that's what it does right whereas new is just called beforehand to modify the construction of the object okay so what I'm going to do in here is I'm going to take self I'm going to take class name and remember this is what's going to be called whenever we create another class that uses this as a meta class we're going to say class name we're going to say bases and bases is what we put remember in that type argument when we want to do inheritance we have the name we had the bases and we have the attributes and guess what this last one's going to be it's going to be attributes so essentially we're saying okay when we create this new method the construction of a class which happens in this meta class needs to contain the class name the bases and the attributes so that that way we can look at them we can do something with them and we can return to you a class that has those pieces of information right as an object so what I'm going to do now is simply just return the type of in this case it's going to be class uncore name bases and htrs now this is very simple we're not really going to do anything other than this but I'm also just going to print out the attributes so you can see what they look like okay now what I'm going to do is I'm going to make another class I'm going to call it dog this is going to have a meta class that's equal to meta like that and then in here all we'll do is just say x = 5 y = 8 just so we can look at some things when we print these attributes out and then we'll create an instance of dog so we'll say d equals dog like that and run the code all right so look at this what has happened well actually I'm even going to get rid of this and just show you that even if I don't create an instance this still runs right you can see no instances this is still running the reason for this is because the default meta class of dog is type right that's what it runs and that's how the class is created what we've done is we've overridden that we've changed it to our own meta class and essentially we've added our own little piece here that just prints out the attributes and then returns to us an object remember this is an equivalent way of creating this class by just literally typing this line and this is what happens this is what we get so we can see that we have the attribute module is equal to main the qual name dog so that's the name of this class right and then we have our attributes so X5 Y8 that we've defined down below now what if we Define a method called hello and we print say hi inside of here well then you can see we have dog. hello at some memory location that's mapped to by hello and that's a function so that's how this works now knowing this information meta classes can be very powerful because for example let's see like I can hook into the construction of this class and I can modify the construction of it if I want now this is something you would never do what I'm going to do is actually change all of the attributes that I have here to be um what do you call uppercase so I'm going to change this x to be a capital x this y to be a capital Y and this function hello to be Capital hello so all capitals I won't bother changing I can't change these underscore methods but I'll show you how we do this okay so let's start programming this so what I'm going to do is I'm going to make a blank dictionary I'm just going to call it a because notice down here that all of my attributes are actually in a dictionary right so what I'm going to do is modify this attributes dictionary based on the attributes that we passed in and make them all capital assuming that they're not they don't start with two underscores so what I'm going to do is say for item in hrs. items and I'm not sure if the syntax is 100% correct so there might be a mistake here we're going to say if item do starts with and in this cas case it's going to be underscore uncore then what we'll do is simply just add it back into the dictionaries actually yeah we'll just add it back into the dictionary so we'll say a in this case item equals ATS and then item like that so essentially since this is dictionary the way this is going to work right is we're just assigning this item to this new dictionary it's just literally the same thing right okay otherwise so if it doesn't start with a double underscore we need to change it to be uppercase so we're going to say a and in this case item. uper like that equals atrs item then we'll change the attributes here to be a which will be our modified attributes and that means when we return this dog class this should work assuming I haven't made a mistake which is likely but let's look at it and let's see what I got wrong all right so I guess I forgotten the fact that when we do something like this I need to actually Loop through with name value rather than just item so name will be the attribute name value obviously the value mapped with it just means we're going to have to change a few things here which we say name so having to do that we can change that to Val we can say name and that's yeah so name here this will be Val like that and I think we should be good on that front let's run that um and let's have a look at this air name Val is not defined of course I've made it value let's run and there we go we get good okay so let's I haven't proved to you really what happened but let's just step through this code cuz I did make a few errors so it might be confusing so we started by printing the attributes we then made a blank list uh a blank dictionary sorry that's going to represent our new attributes and then we've looped through all of the attributes so we just do do items to get uh the name and the value and we said if the name starts with a double underscore just add the proper value back in otherwise what we'll do is add the uppercase attribute with that corresponding value so we've changed them to Upper uh to uppercase essentially so let's actually print the values down here so the new values just have a look at the difference and you can see if we scroll up here that notice hello has been changed to Capital hello X to capital X and Y to Capital y so now let's do another proof just to make sure that all of you believe me that this is okay to do and let's go down here and say d equals dog create an instance and let's try to say see what d.x is so just print d.x well what is the error let's look at this here dog object has no attribute X what's but we defined X up here that's because we've changed it to be a capital X and notice that when I do that that's totally fine and same goes with hello I can't access that but when we change that to Capital hello we're totally fine because again we've modified the construction of the object all right so now that we kind of understand how meta classes work we've seen that we can hook into them we can change the way that objects are created we can en Force certain constraints I can change all of the attributes to be capital I can do whatever I want right I could change the bases I could remove an inheritance if I didn't want that to be allowed essentially this is why they call it magic because with this kind of hook into the creation of classes you can really enforce quite a bit of constraints on how classes are created so for example if you want every single class in a specific module to never be allowed to use a certain attribute or to only have or to have to have that attribute you could set meta classes for those or for that actual specific module which I'm not going to talk about now and then when that module's run it will check The Meta class right it will go through the meta class that's how we create the classes itself and make sure that all of these classes kind of conform to that structure that you've defined now this is specifically nice for when you're writing kind of Library code and you want your user code to be very specific let's say they're inheriting from a specific type um you could check if they're inheriting from you know whatever type it is that you want if they do inherit from that type you can enforce the fact that they have a specific function or specific method in that class that's needed to make that work so that's some of the things that you can do with meta classes again they're very complicated there's not really like a need to use them so you don't necessarily need to implement them into your program but sometimes they're cool and understanding how this class construction Works to me is even a better benefit of using the meta class itself so I believe there was one last thing that I wanted to cover here although it's not coming to me at the top of my head I mean I think that's pretty much it I don't know what more more I can show you guys you can have meta classes that inherit other meta classes you can do very very complex things with that but I think honestly for now we're going to wrap the video up at this I hope you guys enjoyed I hope you understand now how classes are created how meta classes work and what the heck they even are and I hope that you understand that you don't need to use this and the point of this video is to introduce you to the concept and make you more familiar with the way that classes and objects actually work in Python so anyways that has been it I hope you enjoyed make sure you leave a like if you did subscribe to the channel and I will see you in another expert Python tutorial hello everybody and welcome back to another expert Python tutorial so in today's video we are going to be talking about decorators which are a pretty cool and useful tool they're not super complex but essentially they allow us to modify the behavior of a function without actually changing any of its code now this is useful because sometimes you want to be able to add and remove decorators while debugging a function or maybe you want to change the behavior of all of your functions and rather than going in and changing all of the code you could create a decorator which will allow you to Simply you know use one line of code to change the behavior of all of these different functions so I'll show you how this works and what a decorator actually is to start by just going through a bit of a kind of recap of how python passes objects around and why we can actually even use decorator a quick reminder before we get started that kite is the sponsor of this series kite is the best AI auto complete for python on the market and you can get it for free in the link in the description it integrates with the all the popular idees and text editors so subline VSS code adom Vim you name it chances are kite is you know compatible with that again you can download that from the link in the description so the first thing I'm going to do is I'm going to create a function called Funk now what I want to do is just show you that if this function takes a string I can actually return another function in here that does something with this argument and we've seen this before in the previous expert python tutorials but I want to just make this very clear on how this works so I'm going to call this function a wrapper because it's in side of this function it's not going to take anything as an argument and what I'm simply going to do in here is say print started print string and print ended like that and we'll do a capital and I guess actually this string sorry does not need to be in a string it needs to be like that so we print the variable and then what I'm going to do here is simply return the wrapper function like that so if I do this now what happens if I say x equals Funk like that and I put in my string let's say hello and I run this program you can see we get started hello and end it now the reason that happened is because we returned here the wrapper being called right these two brackets but if I remove this and I do this now nothing happens so what we've actually done if I print out the value of x is you see we store a function in here that was returned from this function which is actually equal to this and then if we wanted to call this function we could put our little braces like that and here we go we get started hello and ended so I just want to show you that this is possible and the reason this is possible is because functions in Python are objects which means that we can pass them around we can throw them around our program and you can see up here that this is the location of the object you know function wrapper from funk. locals okay so now that we understand that let's bring it up a little Notch and see what happens if we actually instead of just just passing a string in here pass another function so I Define a fun function I'll call it funk two like that and all we'll do in here is just print something we'll say I am Funk 2 why not I'll get rid of this and now rather than passing a string in here why don't we actually just call some function so let's put F in here let's put I don't want Funk two I just want F let's call whatever function is called so we'll do print started call whatever ever function was in here and then print ended and then return this function so let's see how this works so now if I can move this down a bit let's say x equals Funk Funk 2 let's print X and then let's call X so what we're doing here for anyone that's confused is we've created this function which accepts a function as an argument right or as a parameter then what we do in here is we Define a function that prints started calls whatever function was passed in prints ended and then returns this function so this is not actually going to do anything until it is called so when we return this we'll store it in a variable X and then when we want to use this interior function here we call it with this right the X and the brackets so let's have a look at how this works contrl B and you can see started I am Funk to ended fun Funk uh rapper locals right and the idea here is that I can do the same thing with say funk three right right if I print let's say I am Funk 3 like that now rather than passing Funk two I can pass Funk three and we can see now we get the same thing happening except Funk three and in fact we could do it you know I could say y equals Funk Funk 2 and then we can do the same thing and just call Y down here and now both of them are going to work and they're both going going to be different so started I am Funk 3 started I am Funk two ended so with this in mind we can start looking at kind of what a decorator is now almost but I just want to show you a way that let's say you know this function right here which we're going to call our decorator we don't want to have to do this weird call right where we use our decorator function to call function three we just want to call function three and have it do this behavior and you know do whatever function three is right how would we get that to work how would we get that to happen we rather than me having to call Funk and pass Funk 3 and Call Funk and pass Funk 2 how can we do this another way well what I can actually do is kind of a cool sneaky line here in Python where I do this I say funk three is equal to Funk at Funk 3 now this seems like a weird line of code but essentially what this is going to allow us to do now is rather than having to call function and pass Funk 3 in we can actually use Funk 3 which is a variable now which stores the function that is returned from the call of Funk with function three which means that if we call Funk 3 like that then what's going to happen is it's going to run this function that was created from this call so this is a way that we can kind of change that behavior we can say okay so Funk 3 I always want this whatever's inside this wrapper function to happen whenever I call it so all I need to do to Define that is write this line of code and now every time I call Funk 3 from anywhere in my program it'll do this and if we run this we can see that happens and that works fine and we can do the same thing with funk 2 um yeah Funk 2 equals Funk Funk 2 and then we'll call Funk two like that and we can see that it works for both of them so this is where we now get into the concept of a decorator things are going to get a little bit more complicated but now all I'm going to show you is what a decorator does versus what we've done so this kind of line of code here is weird right like it's not something you really want to write you don't really know where to put it it's like just not ideal to have to write this line of code so python has thought of this for us and what they've introduced is a syntax that essentially allows us to do this um just in a better way and all it is is using this at sign and putting the name of your decorated function so like that just on top so now this line here pretty much just replaces this line like they are exact identical copy they do the same thing this just looks a little bit nicer and it's a little bit easier to understand what's happening when you have you know this decorator syntax above the function and you can actually decorate your function with more than one decorator if you want we're not going to talk about that right now uh but that's something to note so pretty much to replace these lines of code all I have to do is put at the name of the function that I want to run before right and then now if I do fun three and fun two we can see we get the same thing so we get started I Funk 3 ended started I am fun two ended so this is how this works so whenever you're creating a decorator function you need to kind of implement this raer functionality where the first thing takes the function itself and the second function here well this just takes the um or what is this this creates the function that's going to be called when this is returned right or when you actually call this function so essentially you're changing your said Funk 2 is now going to be equal to whatever this is and usually inside of here you're going to use the function now there's a lot of problems that I'm sure some of you can think of here so what happens if I say fun 2 takes an argument X and instead of saying uh I am fun 2 all it does is just print out x what happens now well if I run this and I even let's give an argument let's give five here you can see we're getting an error right and the reason we're getting an error this huge error what it say rapper takes zero positional arguments but one was given so the issue is that when we actually call Funk two what we're actually going to be calling from this line of code is this wrapper function so this wrapper function needs to have the same amount of arguments that function two has so how can we do that how can we fix that well we could just put an X here like this right and then let's comment out fun three let's run this uh oh sorry my bad we got to throw an X in here that was what the issue was before so we have our X's there and then this works right so I put an X in the wrapper I put an X here which means that when I call this x will be passed to this wrapper X and then we can use that to call the function and that's totally fine but what happens now when I want to use Funk three and Funk 3 does doesn't take any arguments but this takes arguments the whole point of decorators is to be able to use this on multiple functions and we get missing one required positional argument x uh Funk three there's an issue you know things are happening so what what do we do here how do we fix this well this is where we use what we call the unpack operator I believe or the Splat operator or something but essentially you can put star args star star quars like this and what this will allow you to do is accept any number of position or keyword arguments so essentially this says okay we don't know how many arguments are going to be coming in here there could be an infinite amount so rather than just trying to guess or figure it out or write a different rapper function for every single amount what we'll do is simply write star args star star quars which tells us except all of the arguments that are passed in except all the keyword arguments and what we can actually do is simply pass whatever these are to this function so let's do this here star star quarks so now what's going to happen is any arguments pass in we'll just automatically pass to F same with quars and if there's none we just won't pass anything so this kind of handles any amount of arguments and now we'll see that when we run this we don't get any error and this works fine for any number of arguments so even if I were to add you know X Y in here something like that and then we call this with like 56 and run that still same thing this is working doesn't matter how many arguments we have we're perfectly fine okay so that's good but what happens when we return a value from function 2 well what happens then so let's say x equals print X and right now so we can see that we're returning y from function 2 right but if I call this and I print X we don't get y return to us so how can we fix this right so what we actually need to do is since we're calling the actual function here inside of the wrapper we need to store the return value I'm going to store that as RV so that I can return it at the end of this wrapper function so since this wrapper function is returned from here this could return a value as well and well we don't want to return immediately so like I could just write the line return F like that and that would work fine but we want to do something after the function is called so to you know solve this we do RV and then we can return RV so store the return value of this function return it at the end and now if I print this you can see that we get our return value of six so that is how we return turn values that is how we pass in different amounts of parameters and now I'm just going to show you a few actual useful um decorator functions that you might want to use so you're probably looking at me like well what's the point of this right now like why do we have this well a good example is say you want to validate input say you want to have a bunch of functions that accept some numeric input and that numeric input is always going to be between the value 1 and 10 right rather than checking the parameters every single time inside of your function what you could do is you can use a decorator that checks them for you right and then all you would have to do every single time you want to validate that your input is correct is throw a decorator over top of your function that says validate input or whatever it's called Write the appropriate code inside of a decorated function and this these kind of functions like this and then you're good to go so that is kind of the idea behind decorators that you can modify the behavior of a function add functionality to it without modifying the code and sometimes you don't want to touch the code of a function because you want to make sure that you're not breaking anything you don't know how it's been written but you want to add something on top for example maybe timing how fast the function runs and this is a very common example I'll show you this as kind of our last example to using decorators um so yeah we'll do a timing one so essentially if I want to time how long a function takes to run every single time right then I can create a timer decorator so you know what actually let's do it from the start let's erase all of this um and do one from the beginning so I'm going to say Define timer which is the name of my decorator it's going to take in a function we'll Define a wrapper this will take STAR args uh star star quars like that again quar stands for keyword arguments what we're going to do here is start by importing time we're going to say uh let's say start equals time.time like that and then we'll just print started or actually we could do something else let's do this let's say uh RV equals Funk like that and then let's say end or guess we'll say total equals time. time minus start and then we'll print time like that and we can put total and then we will return RV and return wrapper like that oops I did not mean for those okay so now that we have that let's create function let's just say defined test and then here we're just going to say 4ore in range 1 th000 let's just say pass and there we go so now if I want to decorate this function I can say at timer and what this will allow me to do now is when I run this function have it tell me how long this took to run so let's go ahead and just actually call test like that and see it ran in 0.0 seconds so I guess this rounded for us but I guess would I be able to do this make it take any longer if I add any more zeros there we go so we can see that is how much time this function took to run and if I wanted to add timer on another function well then I could do another one say test two like that and we can even just say time do sleep why is my capitals on 2 seconds and we'll decorate this one with at timer as well and now when we call test two and we run this give it a second and we should see that this takes 2. o1 seconds so this is how decorators work again useful when you want to modify the behavior of a function without actually touching it without changing it you can add other decorators on top of an existing decorator I'd urge you to see you know how that actually works how you'd be able to do that you can test that out for yourself but for now that's pretty much it and a really useful example of decorators is a timer decorator when you're debugging you want to check what is really slowing down or how long something's taking another good example is having a logging decorator so having a decorator that essentially logs the calling of functions or what's happening in the program that's a good one to add here and then obviously validating input and checking return values and stuff like that is always a good example of when you might want to use decorative so with that being said I hope you guys enjoyed if you have any questions as always leave them down below and with that being said I will see you in the next expert Python tutorial series hello everyone and welcome back to another expert Python tutorial so in today's video we're going to be talking about generators now generators are a pretty straightforward and actually very useful expert level feature in Python and chances are you've probably seen them before now before we get into generators I do need to quickly mention that this uh Series has been sponsored by kite so kite is the AI autocomplete for python that I've been using throughout this entire series and just through my daily coding you can see that when I actually start typing something we get these nice suggestions top um popping up from kite with the little kite icon here it is just the best python autocomplete it works very quickly and actually saves you quite a bit of time and works for other modules that aren't just builtin python things so it's pretty useful if you guys want to download it there's a link in the description and it's free so you know go ahead and do yourself a favor if you do want that auto complete okay so now let's get into generators now actually before I discuss generators I want to show you the problem that generators help us solve so we should understand that in our computer we have a finite amount of memory a finite amount of RAM and when we run a computer program our program is loaded into that memory and when we're storing things manipulating variables lists all of that that's all stored in our computer's memory that's because that is the fastest way for us to retrieve and write data while we're in a program you know we could put some things on a hard drive but that's pretty slow and it really depends on what we're doing but most of the time we're working in Ram and what that means is that we are limited to the amount of ram that is in our physical computer when we're writing a computer program and in fact you know most of us will never even see the error that I'm about to show you but it is possible to actually fill up all of ram right to use all of ram to have nothing left and in fact that's what I'm going to try to do right now so if we look at the example on the screen and I've just started running the code you're going to see this takes a second to run what I'm trying to do is generate the sequence of all of the squares from the number zero up until I want to say this is like 100 million or 10 million or some number like that right and then what I'm going to do is Loop over all those numbers and print them out and you're going to notice that very shortly yes and there we go we get the error we get a memory error which essentially means that no we can't do this these numbers are too big we don't have enough room left in memory we're not allowed to use that much space no that's not allowed so how do we go ahead and how do we fix this well this is where we use a generator now before I actually create a generator I want to look at something here if all I'm doing in this specific application is just printing or processing say one value at a time which is what I'm doing when i'm looping over this list right one value at a time I'm processing it I'm not accessing other values I don't need values that are in the future I don't need values that are in the past then is it really necessary for me to create a list like this to Loop through and the answer is no obviously right in fact what I could do is replace this for loop with just a print statement right so I could replace this entire thing actually we'll just do it down here so let say 4 I in range and then we'll just type that same number whatever that's close enough and then what I can do is print I the exponent two like that right and this is the same thing and this is the idea behind generators this is not what we're going to do precisely to generate this sequence but generators allow us essentially to look at one value at a time and to not store the entire sequence of numbers when we don't need to do that and I'm actually going to code out our own kind of generator pattern here that just uses a class and some Dunder methods to illustrate what's actually happening inside of a generator when we use it now I understand that most of you probably still don't know what a generator is but after I write this class and start showing you hopefully this should make sense so what I'm going to call this is just gen and what I want this to do is the exact same thing that we did before where it's going to generate a sequence of all of the squares up to some number let's say that number is ADD so in this case I'm going to say let's define uncore uncore nit uncore uncore let's take self Let's Take N let's say self. n is equal to n and then let's say self. l is equal to Z so this is going to be the last number that we generated the square for and we're going to use this variable to keep track of the last number we generated the square for so that we know which next number to use and I'll show you how this works we're going to define a actually in this case we're going to do a Dunder method so underscore next it's going to take self and what it's going to do is return self. next now I know we haven't defined self. next yet well we're going to do that now so Define next self and in here what I'm going to do is generate that sequence that I did before except I'm just going to do it using these two variables I'm not going to do it using a for Loop like we had before and storing everything in a list so what I'm going to say is RV equals self. last to the exponent 2 so this is saying our return value is going to be equal to whatever this last number is that we have to the power two right so we're going to find the square for that then I'm going to say self. last plus equal 1 we're going to say if self. last and in this case equals equals self. n + 1 um actually what I need to do is sorry put this at the beginning of my Loop so if self. last here equals equal self. n then what we're going to do is say raise stop iteration stop iteration is just an error that we can raise that essentially tells us hey no we can't go any further and then what we're going to do is return this RV okay so now I'm going to show you how we can use this so this we can actually use in a very similar way that we were kind of looping through the numbers before and we're going to say in this case g equals gen let's say we want to Loop up to you know some massive number like that and now if I want to actually Loop through this entire sequence what I can do and I mean some of you are saying oh this isn't big enough okay let's go bigger we'll say while in this case true we're going to say try print the next value of G right and what this underscore uncore next is allowing me to do is call this next function or method or whatever you want to call it on G here here and we can print the value and then I'm going to say accept stop iteration and then we're simply going to break this Loop like that and we should actually be good with that okay so what this is going to do now is Loop and I'm just going to make this number smaller just so we can see that it does actually just go up to 100 um but I promise you this does work with an infinite sequence and we'll watch and we can see that this works just like we would have before and we can generate all of the squares for these numbers now I can make this number absolutely massive I can make it you know that's super long number and this will be totally fine and in fact that's because we're not storing all of this in a list where we're storing all of the previous values all we're keeping track of is kind of the internal state of the next number we need to generate and this is the idea behind a generator is that we don't need to store every single value what we can do is just store you know almost the last value that we generated and then using that we can generate the next one right or we can figure out the next number to generate and obviously this kind pattern like you can write this if you want but what python has done for us is kind of come up with a pattern that makes this a little bit easier called the generator pattern so what I'm going to do now is pretty much take this class and I'm going to convert it to a generator and I'm going to show you how this works so I'm going to say Define gen and here this will just take the value n what I'm going to say in here say for I in range and in this case we'll say n then we're going to say yield I to the exponent 2 now I know this seems weird but it's essentially the way that this works is we instead of using this crazy pattern that we had before we're going to use the yield keyword now what the yield keyword does is as soon as we hit this it returns this value to wherever this was called from or wherever we were looping through and then it pauses this function so rather than stopping the execution of this function which is what a regular function would do when we hit the return keyword it just pauses it which means we actually keep track of what I was so we still know what that number is we still know you know what n is we still have all of the internal information of this function stored in memory we haven't gotten rid of that but we're just pausing when we hit this yield keyword that's what that means so think of yield as like a pause whereas for example return would be a stop of execution so we can use this generator by doing something like this g equals gen give it some number like this and then what we can do is say 4 I in G and then what we can do is simp simply print out I now this is going to work the exact same as all of the other examples I've seen I've shown you before and you can see that indeed it is working and we could run this you know infinitely and we're not actually going to ever run into a problem and in fact I probably should have made this number a little bit smaller because I feel like this is going to run for a long time but anyways that can go down there so this is the point of a generator and I know some of you are still confused but the way you have to think about it is we create this generator by creating this function gen with uh what do you call it you know 100,00 th000 or whatever it is whatever this number is 1 million and then what we can actually do is Loop through this and what happens when we Loop through this is it runs this for Loop up until it sees this yield keyword so it sees this yield keyword I to um squared right and then as soon as it sees that what it does is it pauses the function and says okay we don't need to run this anymore and then it waits until it's called again so until we Loop through it again with this for Loop the next method on it is called and then it returns to us the next year and because it's pausing rather than stopping execution this is totally fine and in fact we can actually look at how much memory this function is using versus if we were to do the same thing say with a list and we'll do that in a second but I want to show you that to use this generator I don't have to just Loop through with a for loop I can use that next method that I showed you before and if I do nextg and I run this you can see we get zero because obviously the first answer is zero and if we do this a few times we get zero 149 so this is how this works when we call the next method or the next function on our generator we get the next value so essentially up until it hits the next yield keyword and in fact we actually can use more than one yield keyword in our gen if we want and I could say yield one uh and we could do as many yields as we want so let's do this and then let's actually show what happens when we go past how many yield keywords we have so if we look at get this here we can see we get 10 100 1,000 10,000 and then we actually end up getting an error and there was a one up here just so you can see and that error is actually a stop iteration error right here because we don't have any more keywords yield inside this generator so there's nothing more to return so this works the exact same way that I showed you with that class that I did before where it keeps track of the internal state it knows what line it was on when it paused and then it goes to the next one until it hits the next yield keyword and that's when it pauses again and that's how a generator works and they're pretty useful there's some other things that we can do with them and in fact I'll show you um comparing the size of say a generator like the one we just created versus actually generating an entire list you can see in memory how much this is actually using so if we want to generate the sequence right we know this generator works we can use that now so let's run that and what I'm going to do now is import Sy I'm going to actually make that list that I did before so we're going to say x equals and in this case we'll say I to the exponent 2 for I in range and we'll just do uh let's say 10,000 like that and we'll replace 10,000 Here and Now what I'm going to do is just print out the size of both of these so I'm going to say sy. get size of and in this case the first size we'll look at is X which is that list and then we'll get the size of G and I'll show you the difference in memory so what this does is tell us how many bits or actually I believe how many bytes are being used by whatever object is we pass in so in this case the list and in this case the generator and you're going to see that we have a substantial difference so this first list is using 43,81941 need it one at a time which is what we're doing when we say Loop through something then it's much better to use a generator to generate this sequence for us now there's a lot more that I can show you with a generator uh we can close a generator we can stop a generator we can send values to a generator but I'm going to leave that for people that are a little bit more advanced the point of this is to introduce you to this concept of the generator whereas when you're programming think about say if you're going to make a massive list like this with a bunch of values do I need of these values am I using one value at a time am I looping through am I printing it am I adding it to something or do I only need say the last value and this value or a few values and obviously you can make your generators more complicated than a simple for Loop you can do some more complex computations you can store variables inside of here because remember that this yield keyword just pauses the execution when this generator is called and what that means is that I can Loop through this this first generator say you know five times and then somewhere later in my program continue looping through it and it will you know resume where it left off and that's a useful kind of construct it's hard to show any examples in this you know short amount of time but hopefully this gave you an idea of when you would use a generator so with that being said I hope you guys enjoyed if you did make sure you leave a like subscribe to the channel and as always let me know if there's any other expert level features you would like to see in the comments down below hello everyone and and welcome to another expert Python tutorial so in today's video we're going to be talking about context managers now context managers are definitely one of the more useful topics that we're going to be talking about or that we have talked about so far and you'll find yourself using them a lot especially as you get into more advanced programming and dealing with things like shared memory and shared resources and unlocking and locking and yeah it just all those kind of things contact managers come in very handy essentially now I'm actually almost certain that all of you have seen context managers before in fact I'll show you a few examples here of times when you've used them and just not known that you've used them and that's kind of a common Trend here that I'm hoping you realize is a lot of the stuff that we're using it's not completely new to you it's not something you've never used before you just never really understood how or why it worked and that's what the point of this Series has been is to give you that appreciation and understanding of how these lower level things work so that you have more control over your code and if you need to change them or write your own versions you now know how or at least have the intuition to do so now again this video is sponsored by kite a big thank you again to them you can see whenever we start typing we got these little kite keywords popping up it's just a really good auto complete and again it's free if you want to download it it's from the link in the description you can find that okay so let's go ahead and get started with context managers now the first thing that I want to do is show you what problem context manager solved to us so I'm going to start or solve for us so I'm going to start by showing us the problem and then the solution with a context manager so essentially let's say we have some file and we want to we want to open a file right so want to open say file.txt we'll open it in right mode which just means create a new file if it doesn't exist yet and then what we'll do is say file. write let's say hello and then we'll say file. close okay pretty straightforward pretty basic this will work run this code nothing wrong with it but what actually is wrong with what I just wrote well looking at this at a surface level it seems like everything's totally fine I mean we've opened the file we've written one line to it in this case hello and then we've closed it now the issue occurs in this code if this line here so this file. right line doesn't work or it doesn't happen for example like if I just error this line by putting line X here and then we run this we can see that we don't make it down to this file. close line because we had some error on this right line so say we open the file and we start trying to write something happened something else had the file open we couldn't access it well now we've opened the file and we haven't closed it and that's an issue we need to make sure whenever we open a file or have some shared resource that we work with that we close it afterwards now a better example would probably be if I open this in read mode um as opposed to write mode because that would mean that this file already exists on the system but hopefully you get the point that the issue occurs when we open the file we do a bunch of stuff and we don't reach that file. close so the point is how can we make sure that we reach this file. close no matter what happens in between the open and in between the close well the way that we could do that is we could use a try and a finally statement right so we could leave what we have right here and we can just add a try like that and then we could add a finally uh down here if we indent that properly for the file. close so what this means is regardless of if this works or not we will eventually or finally close this file so that's good and we've just kind of fixed our area there and that's totally fine but there's an easier and better way to do this that allows there a little bit more functionality and what that is is a Conta text manager now this code right here is completely equivalent to what I'm about to write so with open file.txt we'll open in R mode again we'll call this as file to be consistent and we'll just simply say file. WR and in this case Hello so these two kind of blocks so this block up here and this block actually do the exact same thing and the way that this works is this open method here actually defines what we should do when we use it as a context manager when we exit and when we enter so when we enter what that means is okay when we open this file when we write this code what's the first thing that needs to happen well the first thing needs to happen is we need to open the file and we need to return that so we can store that as the file object that's the thing that's happening when we enter this context manager and we can tell we're using a context manager because we're using the with keyword and that's the most common way and kind of the only examples I'm going to show you here is using the with keyword in pth then what we do is we do something whatever we have inside here we could print something we could you know fil out right we could do a for Loop doesn't matter and then when this is done so all of the code in here regardless of there if there was an exception or not we will call the exit method and what the exit method does is some kind of code that allows us to close our file properly and make sure that everything works so essentially the context manager is kind of like a hidden way to make sure that whenever we do one operation we do another one regardless of what happens in between and again that's really useful for things like opening and closing files and for locking and unlocking shared memory so now I'm going to show you how we can actually write our own context manager that does the same thing that we've just shown here so we have this open F function and we say with open file. txtr as file file. WR hello we understand that after this runs regardless if there's an exception or not we close the file but how does that actually work well let's try to do that so what I'm going to do now is I'm just going to make a class and we're going to write this context manager so I'm going to say class file I'm going to say Define nit and since we just want to do the same thing we did before we're going to take a file name and a method in our nit and we're going to say self. file equals open file name method now it's important to note that when we make a context manager we don't necessarily need to use it as a context manager all the time in fact I'm going to start writing a context manager here and show you the methods we need to implement to do that but right now you know the function that we have here we can use this fine even though you know it's going to be a context manager we can instantiate it and we can use it as we usually would we just aren't going to call these special methods that I'm about to wct so we have the first method which is called enter now remember enter I told you is the first thing that happens and what this function needs to do is return to us some value that we're going to use in the context manager right when we wrote for example with something um as you know F then this something is going to call this enter method so we're going to store whatever's returned from enter in F so that's what we should get there so here what we're going to do on the enter is simply return self. file and again that should be the open file object then what we're going to do is Define an exit method so underscore uncore exit uncore uncore and notice these are special Dunder methods because they're going to be called in a special way automatically from python because we're going to use the context manager syntax so here actually takes three arguments and the three arguments or parameters I guess we have our type I believe we have I'm going to look to make sure I haven't messed this up we have value and then we have Trace back so essentially what this does is regardless of whether or not we get an exception between when we open or so between when we enter and between when we exit if we get an exception it's actually going to call this exit method with that exception so that we can handle the exception in here the way that we would like and I'll talk about how that works a little bit more in a second but let's just do what we wanted to do which is self. file. close so for now we're actually going to omit the fact that uh we're going to deal with these parameters although we'll talk about them later so in here I'm actually just going to write some code um some print statement so that we can see what happens when we enter and when we exit these methods so print enter print exit so now what I'm going to do is I'm going to set up the same thing I did before except this time instead of saying with open I'm going to say with file and the reason I'm allowed to do this is because I have this enter and exit method defining that this is a context manager and I'm going to say with file we have let's say you know file.txt let's put that in say read mode um actually we'll put it in write mode and then we'll put that as F we can say f. write hello as the classic example that we've been using and now let's actually run this code and let's look at these print statements and make sure this works okay so we get enter and exit and inside here I'm actually just going to put a print statement that says middle just so we can see how this works so even though I have it explicitly called this exit or this enter method we can see that they do get called so enter middle exit and they get called in the appropriate timing right so this stuff happens in between the enter and the exit and now what I'm going to do is simply put an exception in here so I'll say you know put some letters here just to make sure this crashes let's run this um and actually sorry that's going to be a syntax see if there's any way that I can get this just to crash uh let's just say raise exception like that and now let's see if we still get um all right yes we do so we can see we get enter middle exit and then we get the exception raised afterwards even though we raised the exception before we got to this exit method so what this essentially says is regardless of if there's an exception or not we're going to call this exit method and the point of this is so that we can actually handle an exception inside of our exit method if we need to so I know this is kind of confusing to see in my Trace down here because there's all this text but look what's happening right we can see that in line 17 an exception was raised but the thing is we still called this exit print um and we still closed the file even though that exception was raised which again is the advantage of a context manager okay so what I want to do now is show you what this type value and Trace back actually is so we notice that what happens is essentially any exception that's raised inside of here actually gets sent to this a exit function where it can be handled and that's why we see this exit popping up here because we enter we do this middle stop some exception was raised in the middle that's fine so we immediately go to this exit function where we pass that exception and we wait to see if it gets handled and that's why all of this code in the exit function runs before we decide that we're going to crash the program or that something's going to happen so what I'm going to do now is show you how we can actually handle an exception inside of this exit function and again what type value and traceback are so now we'll keep printing exit but we're also going to print all of the different values that are here so we'll just use an F string and we're just going to do a bunch of commas so that we can see what all these are so type value and in this case Trace back so let's run this now we're still going to get a crash in our code but now we can see that we have class exception none and then a trace back at some location so if we wanted to we could look at this traceback we could look at the type of the exception and we can actually handle it and in fact the way that we handle an exception from our exit is if we determine that this exception is fine that we shouldn't crash the program that all is good what we're actually allowed to do is return the key value true so if we return true from this exit method here that's going to tell python that we gracefully handed handled this exception which means we don't need to crash the code we don't need to run or you know see all this Trace back in the output here we're fine and we're good to go and in fact if I run this you can see that by simply adding this return true here we no longer get a crash in our program and everything is fine now be careful with this because you don't want to just add return true if there is actually exceptions and they need to be handled properly in fact a better practice would probably be to do something like if type equals equals and then whatever type of exception you were looking for maybe I raised like a file not found exception or something and we were looking for that specific one then what you could do is handle that exception inside of here and then return true in that instance and in fact this still works because the type was exception um but I'm trying to see if I can raise like yeah so let's say file um exists error like let's do something like that and run this and you can see now because that wasn't just a regular exception this crashed because we didn't handle that properly so that's how we can handle errors inside of this exit function you just return true if when you check through this error that's passed in here um you get you know some valid stuff and can handle it right and if you don't return true and there's no error like we've seen that's totally fine so if we don't raise some exception regardless of if we return true or not everything works fine and we're good to go and that is one of the massive advantages of context managers okay so now I'm going to show you how we can actually create the same context manager because this seems a little bit complicated using a generator so we've talked about generators and we talked about decorators what we can actually do is import something called context lib so we can import context lib like that and from Context lib there's actually a decorator in here that allows us to decorate a generator that becomes a context manager and I'm going to show you how that works okay so let's do the same example we did before with opening a file but now using a different kind well not really different kind but just a different way of creating this uh context manager so what I'm actually going to do is I'm going to write this decorator and The Decorator is context li. context manager like that there's no brackets at the end and in fact what we could have done is said from Context lib like this import context manager and this is a builtin library in Python and that will just allow us to do this rather than having that um dot beforehand so let's do that I'm going to say Define file like this and what I'm actually going to do is take again the file name and the method and inside here I'm going to say okay file equals open and in this case we'll say file name method then I'm going to yield cuz again this is a generator the file object and then I'm going to file. close so what this means essentially is that the first thing we're going to do is say file we're going to create this file object we're going to yield this to wherever we're being called from and then when this function resumes again you can think of this as the enter right and this as the exit we're going to close the file and in fact in here again we can handle some exceptions we can do things like that and this is a quicker easier way to actually make a context manager so now I can say with file and in this case let's just say you know what what have we been doing I don't know let's just say text.txt let's switch it up here let's go W mode and we'll say as F and we can say f.r let's say hello like that and if we run this code that's perfectly fine that works and now when we add our print statement so we'll say print uh enter like that and we'll print exit like that and then we can print middle and we can see how this is is actually working okay so enter middle exit so this decorator allows us to turn this generator object into a context manager it works pretty much exactly the same as I talked about before there is more to go in and kind of dive in with this uh this syntax right here I typically recommend to people just to use the class syntax just because it allows you to do some more things into something more people are familiar with but if you want to use this context manager decorator and do some things with this generator kind of syntax um to use a context manager you're more than welcome to and that's why I showed you so I think with that I'm going to wrap the video up here an interesting idea though if you guys want to mess around with context managers is to think about locks in threading so actually from the threading module in Python I can't remember the syntax right now off the top of my head you can have shared memory um and you can have locks and yeah like memory locks which essentially allow you to wait for another resource to give up this lock so that you can access a resource so the point is like say we have one variable X here that's going to be accessed by two different threads well we can't access and change X at the same time so we create a memory lock and what one thread will have to do is wait for that lock to be available before it's able to access the object and you can actually implement this functionality with a context manager so that your threads you make sure they unlock the resource before they finish changing it so that's something that's interesting if you want to mess with that I don't really have that much time in this video so I'm not going to do that um but yeah so with that being said this has been context managers I hope you guys enjoyed if you did make sure you leave a like subscribe to the channel and as always let me know if there's any other expert level features you would like to see