so in my opinion one of the worst parts about coding is how timeconsuming and mentally exhausting it can be often times you spend entire days multiple hours in a day just trying to find bugs just trying to solve problems and well it's really frustrating when you put a whole day's worth of work into writing some type of code and really have nothing to show for it so in this video i wanted to share with you five tips strategies that you can use to write code faster now what i mean by this is not just typing faster on the keyboard or getting more lines out into the ide i'm really talking about how you can write code in a better way such that you're going to have less bugs and you're just going to be more efficient when you're actually going through the programming and coding process this is something that i really didn't figure out until i got into university and started working my first job and while a lot of these tips and strategies are super simple and they're just things to keep in the back of your mind while you're actually writing your code so with that said let's go ahead and get started and talk about five tips strategies you can use to write code faster now before we dive in i need to thank yubico for sponsoring this video and talk to you about how you can secure your online accounts using their signature product the ubik key the yubikey is a physical security key that provides the strongest form of twofactor authentication and prevents against common phishing attacks and sms hacks the yubikey is extremely easy to use can secure multiple accounts on a single device is portable watering crush resistant and a costeffective option to secure your online accounts there are multiple versions of the yubikey and personally i use the yubikey 5c which provides usbc support the yubikey 5ci which works with my ipad and iphone and the yubikey 5 nfc which has a standard usb interface for my main computer other forms of twofactor authentication are great but nothing can protect you better than a physical device start securing your online accounts today by checking out yubico and their different yuba keys from the link in the description so the first and most important tip on my list is to write a plan before you write any kind of code when i say plan this can be whatever you want it to be it doesn't even have to be written down but the idea here is that you really should think about your project or think about the problem you're solving pretty deeply before you go into the code and start writing anything this is going to save you a lot of lines of code in general it's going to save you a lot of time and it's going to force you to really make sure that the solution you're coming up with is accurate and works for your entire project it's very easy when you jump right into the code immediately without thinking about anything to forget about different aspects or to you know forget a feature that you need to implement or something like that and then all of a sudden be halfway through your project and realize that oh crap what i just wrote is no longer going to work this is not compatible with the other thing that i need to implement where i've made a critical error now i'm going to have to redo this because it just doesn't work the way it needs to this is what a plan helps you avoid and it also just makes it so that when you get into the coding environment you really know exactly what you're doing you don't have to stop and think about all these small little things that should have been thought about beforehand you have a little sheet or you have some steps that you're going to follow along with you just take those steps and you transcribe them into code it's much easier to do these two things separately and not have to come up with a solution while coding it out at the exact same time so hopefully this was persuasive enough to get you to write a little bit of a plan again this does not need to be very detailed what i do for myself is usually just write bullet points of kind of the main things that i need to complete and then maybe within those main things i have some sub problems and that just gives me a good place to start it makes me have a very kind of structured approach to my coding and genuinely saves me a ton of time so my second tip is straightforward i'm going to keep it short this is to keep it simple that is the tip keep it simple whenever you are faced with a decision and you have different routes that you can go down or different paths that you can take almost always is going to be preferred to take this simple approach the reason for this is that the simple approach is easier to understand easier to read and write and easier to debug and that is going to save you a tremendous amount of time if you decide to try to implement something using like the most complicated convoluted way you can think of doing it that is just going to be more difficult to do naturally right it's going to be harder to think about doing that it's going to be much harder to debug especially if something goes wrong you're going to have to try to understand what you were thinking when you went through this approach and if anyone else has to read your code well good luck to them because it's going to take them a tremendous amount of time even yourself let's say a month or even a week in the future you go back and you're looking at this code you wrote all of a sudden you have no idea what's going on and it spends you at least the same amount of time it took to write it to even just understand what is going on in this code so hopefully those are enough of a reason but really it's just much better to do things simple and oftentimes i see this especially with a lot of beginner programmers you know they learn some new tool or they learn some new i don't know like a language feature and they just want to use it they want to show off they want to be like yeah i understand how to use lambdas oh i can write this function that solves this problem in one line of code only look at this that's great that's cool good for you but it doesn't help you at all right it solves the exact same problem it's just much more complicated and if anything it's going to cost you time in the future so hopefully that's enough of the reason but let's move on to tip three so my tip number three to write code faster is simply to use a debugger now there's not really much more i can say about this a debugger is just a superior tool when it comes to finding bugs in your program if you've never used one before i promise you it's not a difficult tool to learn how to use a lot of people for some reason are intimidated by it but what it lets you do is pause the execution of code at any point in time in your program so let's say you want to look at the state of a bunch of variables well you would place a breakpoint right before or right after say a variable gets changed to something and then at that point in time once you hit the breakpoint you can view all of the variables in the current scope you can see all the methods on them you can see what type they are you can see all of the internal information and just anything that you would print out you can see and it's just in a better interface it's better to look at you can then step through code slowly and see how variables are changing it just helps you a ton saves you a ton of time and is really necessary if you're working in a large project so that's my tip number three learn and use a debugger so tip number four to write code faster is to write tests now when i say test this could be anything that you could imagine this could be a unit test a functional test this could be a full test suite of a bunch of different things you can go as crazy as you want with tests but just writing really basic tests that will test out things that you manually are going through constantly will save you a ton of time and usually i'm very guilty of this i get stubborn i really don't want to write the test and then i end up manually testing the exact same thing like 20 30 40 times until eventually it starts working whereas what i could have done is spent two minutes write a really basic test script and then just ran that script whenever i wanted to see the output it would tell me hey your test passed hey your test failed and then i could continually use that test throughout the entire project to make sure i didn't break something that i wrote previously so tests are super valuable they are your friends yes they are a pain to write but really they're definitely worth it and if you find yourself spending more than a few minutes testing out something manually it's probably a good idea to just bite the bullet and write a damn test for it so my tip number five may seem counterintuitive but i promise it is not and this is to take frequent breaks now this is fairly well known in the programming community and there's a lot of jokes about this you know you see the jokes of like programmers solve a lot of their problems on the toilet things like that but it honestly could not be more true i cannot tell you how many times i've been looking at a bug for you know hours at a time i get up i walk around i go talk to my friends something like that then all of a sudden i just have this kind of you know epiphany or light bulb in my head and i've just solved the problem out of nowhere i have no idea how it came to me but as soon as i got up from that screen walked around had the blood pumping i was able to fix the problem or even other times where maybe i don't fix it in that small break i come back to the computer i look at the screen and within two minutes i'm like oh this was a stupid issue this is where the bug is it was just something that i never would have thought to look at i was so kind of dived into my perspective i was you know have this tunnel vision on where i thought the problem was and it wasn't until i took kind of a step back took a small break and came back to the computer that i was able to solve that problem so especially if you're stuck on a bug if you're really frustrated take a break relax and come back to it that's going to be a lot more productive than just sitting there banging your head on the table and trying to find where it is so with that said i hope you all enjoyed the video and just one last quick word from our sponsor now one last thank you to yubico for sponsoring this video and a reminder that physical security keys are the best way to protect yourself online and are far superior to sms authentication check out yubico's different yuba keys and start securing your online accounts today by heading to the link in the description you