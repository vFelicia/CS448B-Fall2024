hey guys and welcome back to a new tutorial series so I'm just filming a quick intro here to explain to you guys how this series is gonna work and what we're going to be doing so essentially this is online game development with Python which means we're gonna be using sockets and networking to connect what's known as a client and a server or multiple clients to a server where they can send and share information and therefore we can create an online game so we're gonna start off with just the absolute basics and just get shapes for example like if I move a shape on my computer it moves a shape on your computer like if you're the other client and then we'll start getting into some more advanced stuff where we create a legitimate game and start sending massive amounts of information to the server and back to the client and I'm expecting this series to be I want to say like 10 to 15 videos long I don't really have it completely planned out out of filming this intro but if there is any feedback that you guys have for me while we go through the same thing you want to see please make sure you let me know so essentially what we're gonna do today in this first video is I'm just gonna show you guys how we can create like a very basic client and then the next video will go to a server and then we'll connect those client as server together and then we'll start moving into more advanced things like how we can get the game running on multiple machines and all of that so we'll start really simply by just getting everything working on our local network and then once it's working on our local network we'll deploy that to an external server which will allow us to play from anywhere in the world not just against people on our local network so I'm just gonna quickly get into this video where I'm going to show you guys an example of what an online game looks like with Python it's something that I've personally created and then we'll get into writing a bit of code and in the next videos we'll do most of the serious coding okay so what I'm showing you right now is actually an online game that I created with Python Pi game and networking and this is similar to something we're gonna make obviously not as advanced but it works on the same principles so essentially I have what is known as two clients now if you don't know the way that any online game works is we have multiple clients connecting to one main location which is known as a server now right here on my screen we have two clients so this client on the Left that my mouse is kind of going over that has this red highlight like where the brook is or where I just I'm about to move this night is client 1 and then this black one over here so like you are block where I just moved this pawn is client 2 now you can see in the background I have this command line thing going and it's sending and receiving information and this is essentially how a online game works and you might see whatever you guys playing online game it says waiting for server or connecting to server and that's because it's doing exactly that it's waiting to get a connection to the server and then grab information from that so that's the way that we're gonna be doing things is using a client and server now I'm not gonna be using any frameworks that are pre created like I know there's like twisted and some other frameworks for Python the only module we're gonna be using that's external is PI game and that's just to create some very basic graphics okay so let's close this I just want to give you as an example of what an online game looks like and you could see what I was moving something on one client it would move it on the other so let's close that up and let's actually get started with the tutorial it did not mean to open that so I'm gonna be working with PyCharm for this tutorial now if you don't know what PyCharm is it's an IDE to download it all you have to do is just go to the internet type pycharm and you can go here and click download whatever it loads up now if you guys don't want to use pycharm that's absolutely fine you can do everything using the standard editor like ideally you could use adam use whatever you want but if you want to follow exactly what the tutorial i'm gonna be using pycharm now the next thing we're gonna need other than I do I guess you don't need pycharm is we're gonna have to install Poggi now for ninety percent of you the way that you're gonna be able to install PI game you're just by going to command prompt loading it up like this and there's typing pip install PI game and then hitting Enter now if this doesn't work for you I'll put a card in the top right hand corner of the screen right now which tells you where you can go to install PI game and I have a video explaining you exactly how to do this and if this command doesn't work for you can follow that video and I'll explain to you how to do that so once we have PI game then we're ready to actually start writing a bit of code so while I launch up PI charm right here and create a new project let me just tell you about I don't know some of the things we'll be going through in this tutorial series so obviously we're gonna be working on coding both a client and a server and I'm gonna explain obviously exactly how those things work and how we can create them and then what we're gonna be doing is we're gonna be dealing with a bit of server like administration if you want to say that so actually deploying things to an external server does stalling impendent installing dependencies working with like a linux server to deploy our game to and that'll be at the end of the series that we do that right now we're just gonna be working with what's known as localhost which means that we're just gonna be doing it on our own network so right now the games that we create are only going to work on our would call it against people that are on our WiFi or on the same network as us and then later it'll work against anyone in the world that has that client downloaded ok so let's just create a new project here my new project I'm just gonna say is tutorial oh it's a network tutorial Warners made and just as a what do you call it here just letting you guys know I did actually mess up my thumb a little bit it's kind of swollen so if my typing is not the best not is actually my excuse for that so now that I've got a new project open I'm just gonna create a new python file is just call this tutorial one actually let's call this client okay and just save that as ok cuz that's all we're gonna be coding in this video is just a very basic client okay so now we've got client so what I'm gonna start off by doing is creating a configuration for my client and keep in mind if you guys are using something else you don't have to worry about what I'm doing with this pycharm specifics this is just the way you have to set up a project in PI gem so I'm just gonna set a client I'm gonna go to script path now we're game client okay apply okay now quick sidenote all the code that I'm about to write is available on my website tech with Tim done net usually I have as well as that a textbased tutorial version I'm not sure if I'm gonna be able to write the textbased tutorial while this first tutorial is out but you will see it on there at some point import tutorial import plugin but yeah all the code will be available on there in case you guys missed something or something's not working so we're going to start by importing pygame and make sure that that's working once that's working we're going to create a window so to do that with the same when equals PI game doc just splay dot updates all right what am I saying PI game that's played doc set underscore cap set underscore mode Wow bit tired today guys and then in here which can type width and height and then we're going to create these variables so say width equals 500 height equals 500 okay so there we go with height win and now we're just gonna set up a few global variables we're gonna have to use after we care to caption so let's just say plug in but display dot set underscore caption and then here we'll just go to caption let's just say clients okay alright so now let's set up a global variable that we're gonna use and what we're gonna do for this global variable is it's gonna hold be current like clients we're gonna say like clients number and we'll just start by making that zero but we're gonna increment that based on like once we connect to the server which we'll do later okay so now that we've done that there's a few basic things this is we always do for like a PI game project or whatnot it's gonna define redraw window okay and in here all we're gonna do is just PI game dot display dot updates like that and we'll also fill the display before we do that oops didn't mean to do that with win dot fill and it will just pick a color in this case I want to do whites which is 255 255 255 okay now yeah I just realized this is actually gonna be a lot harder to type that I thought because my thumb so just excuse me guys if I'm making a few mistakes here okay so we got our redraw window now and what we can do next is we can code our main loop so I'm gonna say define main and then here I'm just gonna create a game loop and this is gonna run continuously while I program is going and it's just gonna be what's checking for collision checking for events can constantly asking the server for information and you guys will see how this works in later videos but more so we're gonna say run equals true and you here will say well run and it'll just set up some very basic things that we always do for PI games so for event in PI game dot event gets okay and then all we're gonna do say if event dot type equals equals pi game dot quit with all capitals then we'll simply do PI game dot quit like that don't get a semicolon I guess we can say run equals false as well okay for events that looks good and then what else we'll do in here is we'll just call that redraw window function so redraw window like that now what I'm thinking we should do next is probably set up a class for our character okay now our character is going to be just the only object we're working with right now and it's just going to represent like a rectangle that moves like left out up right around our screen and I guess we'll do that all in this video moving that character around and that will connect it to the server the next one so let's create a class and we'll do that up here and we'll say class player like that okay so we'll give it an it function if you guys don't know much of an objectoriented program and programming and you want to learn I do have a tutorial series on my channel that I would recommend you go through if you don't understand a lot of the stuff that I'm doing right now okay so X Y width Heights will be what we get in here and this is just gonna represent actually let's give it a color as well because that'll be good to have X Y width height color and yeah this will just represent kind of our player and what variables they're gonna have so we'll pass these values in when we create an eclair so self dot y equals y this is very straightforward self dealt with equals width and self taught height equals height and finally self that color equals color so these are just our initialization here this is what we're gonna use when we're drawing the character when we're checking for a collision or stuff like that and what I'm also gonna do to save us a bit of time in the future I'm gonna say self dot rect equals and then in here let's do this okay so X Y width height like that okay and this will just make it a bit faster when we're trying to draw our character so the next thing we're gonna need is to find draw now in the draw method here we're gonna take a window so we'll call that wind and all we're gonna do is just draw a rectangle that represents our character onto the screen and it obviously be the appropriate they're so to do that all we have to do is just say win dot oh no we don't do that we have to do PI game dot draw dot rect standing for rectangle we have to first give the window so we'll give when we need the color so we'll do self dot color and then we need a rect which will be self dog wrecked okay and that's actually all we need to do to draw the rectangle to the screen now we need one more method we're gonna use in this can be club move and move actually I believe yeah we don't need to do anything else in there right now as they are answer so for move what this is gonna do is it's essentially just gonna check what do you call it if they press like left key right key what not how can we move them around the screen so the way that we can do this really basically essentially is just goodbye game dot what do you call it duckies dog get underscore rest I believe that's it it might be key mmm might be keys we'll see let's see if which one works so this is essentially gonna give us a list of all of the keys actually a dictionary of all the keys and essentially each key is gonna have a value of either 0 or 1 now if one is true that means we're currently pressing the key if 0 is there that it means we're not pressing the key so the way that this is useful as opposed to doing what we could sometimes do which is just check for events in here is if you're pressing more than one key at once it'll allow you to move like diagonally or whatnot okay so what we can do in here now is we can just check if certain keys are pressed and then change the x and y values accordingly so we'll say if what do you call it oh I guess we should probably put this in a variable list just like keys equals PI game dot maybe I feel like it's key we're gonna go Kieffer right now probably I'm not key don't get under script well so say if keys and then PI game dot K underscore left standing for our left arrow key and that's all we need to do for that one and then we'll say if keys and then PI game dot K underscore a sure this be all capitals I think it should be I can't underscore right and then the next one if keys PI game dot K underscore up and then our last one obviously is and then we'll change our values accordingly inside of these if statements so pygame dot k underscore it down okay so left right up down so if we press the left arrow key obviously what we have to do is subtract from our x value so to do that we'll just say sup that x minus equals self dot val now val is something we need to define so let's that do that up here self dot Val equals and let's do a value of like three for right now okay so if we're going right we need to add to our X so we'll do this very similar so self dot X plus plus equals self dot Val okay if I could type that correctly and then to go up we're gonna subtract from our Y value so self dot Y minus equals self thought well and to go down with your self dot y plus equals self though now and that's the way the coordinate system works in pygame our coordinates actually at the top left hand of our player where our screen so if we want to go down we have to add to it and then left and right is the same in terms of subtracting and adding okay so that should successfully move our player we could add like a jump and stuff in here as another time but for right now that's all we need I'm trying to think of anything else that we could do right now we should probably create a player object and draw that to the screen just to make sure everything's working so to do that let's create a player should we do it up here let's do it right above our main loop here okay so we're gonna say brush it we'll do it inside the main loop this'll work better we'll say peace and for player just a post player and then we'll give it some values need XY with high colors so for X Y we'll just start them out like 5050 and then for our width let's just do a hundred by hundred so he's nice and big and we can see them and then we'll do a color of green so that would be red green blue like that so 255 for green and then what we're gonna do do actually is we're gonna type in here insert in redraw window we're just gonna pass P to our redraw window so that we can draw him and before we do that what call P dot move and what this will do is move our character based on what keys were pressing so an inside redraw window let's add a player what'd he call it argument attribute whatever you want to call that sorry parameter that's the correct name and then we'll just say player dot draw like that and we'll pass win in here which probably should be passed in here as well because we do use wind quite a bit so let's do P let's do win and then P okay so let's run this now and see if I made any mistakes I likely did process finished oh we not never calling the main function so let's call this main function from down here so we're actually executing that code that we wrote and there we go so now we have a little green square and you can see hmm interesting it's not working for me to move this around so let's check this one more time pede move what is move doing get pressed let's just add I want to add something here and make sure this is working so let's we're gonna say clock equals PI game dot time dot clock okay and then in here which gonna do clock dot tick and we'll do 60 FPS I just want to see if this is working if not I dunno how to fix this okay so we're not able to actually move this oh I know why so very interesting we are not updating this rect but we are updating what do you call it like up down left right so at the bottom here all we're gonna do is just redefine our erect by doing self dot X self dot y self thought width and self dot height now I'll really quickly explain why this error was happening essentially we're defining rect up here based on the input parameters when we're creating our player so that means we're always just constantly drawing our rectangle in the same position because we're never updating this rect variable we're only updating like X Y width height right so we just have to redefine our X variable every single time that we're moving which is fun and we can do that so now let's see and we can move our green square around the screen I actually quite like the speed this movement so yeah so essentially in the next video what we're gonna be doing is I'm wrapping it up here is we'll add a little bit more to this client and then we'll start working with sockets so we can connect this up to a server and we'll start talking about all the net working aspect then so if you guys enjoyed the video and are you excited for the next one please make sure you leave a like and subscribe and I will see you again in the next video