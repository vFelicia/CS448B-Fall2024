hello everybody and welcome back so in this golang tutorial what we're gonna be doing is talking about how to get user input and convert that input into numeric types so essentially this is gonna teach you how to convert a string to an integer where number or float or whatever it is you want as well as how to actually get input from the user from the console so if I go down here you can see that ideally what we're gonna want to have is something like type blank and then we're actually gonna let the user type in we want to take what they typed and do something with that and the example we're gonna go through here is asking the user to type in what year they were born in and then hopefully being able to tell them how old they're gonna be at the end of this year so as of December 31st 2020 that's when this tutorial is well 20 20 is when this is being made December 31st is obviously need last day so we're gonna tell them how old they will be at the end of this year so let's actually go ahead and get started with that problem so the first thing I'm going to do is actually import a few modules that we're going to need to use so to import multiple modules we are going to actually put the brackets like this outside of the import statement hit enter and then just type a list of all the modules underneath each other so FMT buf io we want OS and we're gonna use another one called STR on comps of string column sorry but we're not gonna use that right now so I'm going to leave that commented out now in case I forgot what this comment means is pretty much don't read this line it says we don't want to delete this line we just want it here so don't read it just leave it in oftentimes you'll see that people will leave comments that are descriptive that are kind of saying like what a few lines of code are doing or maybe you'll see something like this where it's kind of a line of code they want to keep there but they don't actually want delete so they just tell the program hey ignore this for now and then maybe later they remove those comments which is what we'll do so that's a comment two forward slashes it Gray's out the entire line anything I type on that line okay anyway so what's going to function and I'm gonna show you how we can actually get user input now this a little bit of a process but it's not that hard but what we need to do is gritty scanner object now my autocomplete is telling me pretty much what I'm gonna type but I'm gonna call this scanner and I'm gonna let this implicitly infer what the type is of what I type now so that's what this walrus operator does we talked about that in the last video and the type or what I'm gonna put here is actually gonna be buff IO dot new scanner with OS dot STD in now I know this is kind of a mouthful for a line and it looks looking a little bit confusing especially for some of you beginners but what this means is from the buff IO module which I believe is buffered input output could be wrong on that but I think that's what that stands for we're gonna make a new scanner object that is that has in here OS STD in so o s stands for operating system that's this module an STD in pretty much means like the input like the command line while we're typing in so that's how you set this up don't worry about it too much but this is how you make a scanner object which we'll need to use in just a second okay so now that we've created a scanner object if we actually want to scan what the user typed what we do is we say scanner dot scan with a capital ass like that this will scan the line and will actually store inside of this scanner object what the text is that was skinned so what we typed in now what we do if we want to actually store the value of what was scanned as we make a variable I'm gonna call it input and we set it equal to scanner dot text so you can see that we have scanner is equal to a scanner object we scan the line and then we store that in the variable input so that is pretty much the basics and now that we've done that all we have to do is print out what we typed in just to make sure that it was working so it's the FMT dot print F and we will say you typed colon percent Q comma input so pretty much no not input scanner just input what I want to do is let the user type something in then I just want to print out what they typed it so let's have a look at how this works let's go down here go run tutorial dot go let me start typing here so hello I type hello boom you typed hello so we can successfully grab the input from a line the way this works is as soon as you hit enter it will scan that line and then will start reading the next line so we wait on this line until you hit Enter and then we continue and we go down to here where we actually get the text and then we print it out pretty straightforward now the only thing is some I want to have a prompt before I type so I want to say ask a question so I want it to say like type your name colon and then they can add their name if I want to do something like that all I have to do is just print before I scan so I'll say fmt dot print F and here I'll say type something like that so I'm gonna do a space just to make sure that when I start typing I'm one space away from the colon that I don't smush with the coin so I'll do that and now if I run here so go run tutorial dot go we get to type something let's say hello worlds and bye spell world correctly and you typed hello world so that is the basics that is how we scan and to get something in now the only thing is what I want to do is actually ask the user for the year that they were born so ideally what I'm gonna do is say what year were you born we're gonna subtract we're gonna take 20 20 year and then tell them how old they are so let's start with that problem so I'm gonna say type dates what is it type the year you were born I'm sure there's a better way so this may be your year your birth year or something like that but we'll just do that so type the year you were born we'll scan it in and then we'll print it out now the issue is though what type is what I'm passing in so what type is the stuff that I type in that's what I'm trying to ask is it a number is it whatever I type is it different does it change well the answer is actually that whatever we type in from the scanner here will automatically be stored as a string so even if I type in like 4.5 which we know is a float floatingpoint number it actually gets interpreted as a string when we type it in or when the scanner grabs it so we need to actually convert whatever it is that we type in to a number before we can perform any arithmetic operations on it so before we can add subtract multiply and treat it as an int or a number before we can do that we need to convert the string into a number so let me just show you what I mean and what issue is gonna pop up so we say input equals scanner dot txt now what I'm actually gonna do is I'll say let's print you typed the digit of 20 20 minus input and watch you say you are you will be percent the years old at the end of 2020 okay so that's my string and then the formatting is 20 20 minus input right I mean in theory this should work because it inputs a number and we type it in and say SATA type mm that's year I was born well this will tell me that you will be 20 years 20 years old at the end of 2020 or at least that's what we hope so let's just see what happens when I save this okay I save it and what are we getting so there's an error over here and this says cannot convert 20/20 type untyped number to type string so input this variable here is actually a string which means we need to convert it which is what I've been saying so that's just the proof I wanted to show you that here so how do we go ahead and actually convert this well what I do is I use this string comm that I've brought in so I'm gonna take away these what is it's two slashes here to the comment and I'm gonna change input to be string kampf dot and in this case we're actually gonna say parse and notice that a few options pop up so parsefloat purse bewl purse into purse UN's we're gonna parse in int of scanner dot txt like that what this is gonna do it means add a little bit more to this but ideally what this is gonna do is it's gonna take whatever is in here which will be the text that we scanned that we typed in and it will convert it to an integer that is of base 10 and size 64 so what we need to do when we create this string dot parse int is we need to pass the text that we want to parse notice I'm passing scanner text but I could very easily pass 10 like this so that string we need to pass the base so is this octal binary hexadecimal or decimal in this case it's decimal which is base 10 and then we pass the size of the integer we want to store which is 64 so I'm gonna go back to the the string comp here so scanner text and now let's see if we get any errors when I save this so we look at this I'll give it a second to load and what is the issue here so parseint interprets a string s in a given base 0 to 60 third and bit size 0 64 and returns a corresponding value I so this looks to me like this should work but apparently is not mismatched one variable returns to values okay so what I actually need to do here sorry is put an underscore now what this is gonna do if I save and sorry the same tax is confusing so sometimes I don't want to introduce if I don't have to you but what this is gonna do is say if for some reason we can't take this text and convert it into this input we're gonna actually raise an error and it will store that right here where I put this underscore but since I actually don't really care about the error I'm just gonna put an underscore which says pretty much ignore it so if this doesn't work just to kind of ignore that and move on that's what that's saying for now we'll talk more about the syntax later on but the idea is that this returns an error if this doesn't work so if I don't type a number and it tries to parse a number and it can't do it it will return an error that error would usually go to the variable I put right here so input comma whatever the variable is but since I don't care about it I'm putting an underscore okay so let me run this now and let's see if we can actually get this to work so go around tutorial dot go and let me type so I was born in the year 2000 which means you will be twenty years old at the end of 2020 so that does indeed work and that should actually work for any year that we type in so let's run this one more time let's just do like in 1960 or something so in 1960 you'll be sixty years old at the end of 2020 it's around this once more and let's try not a number so let me try it below well at the end of this year you will be twenty twenty years old so that's because what happens is when there's an error and it cannot parse a number it can't find one this input string will be empty and that means 20 20 nothing so zero right is 20 20 so that's what it's printing out but yeah that is pretty much been the tutorial I showed you how to get user input how to convert a string to text that's what this line is doing right here and then how we can format that in print that out so hopefully you guys enjoyed it if you did make sure you leave a like subscribe and I will see you in the next goal aang tutorial