hello everybody and welcome to the second tutorial in the selenium webdriver tutorials series now in this video what we're going to be doing is talking about how to actually access elements on the page so before you saw that we did things like print out the title we can access tech with Tim done net we can quit but that's as far as we went so what I want to show you now actually as an example on my website bring it up here I do have the selenium documentation for our reference so on my website I have a search bar and what I want to do is access this search bar search for something and then actually be able to grab all of the search results and have that in our Python code so that's gonna be our challenge for this video that's gonna teach us a lot about how to access different elements and how to nest inside of kind of different divs and things like that but I need to start by giving you a very brief overview of HTML code and how we access elements in HTML so she let me go back to this so when you're on a website in google chrome at least if you want to look at the HTML or the page source what you can do is click on any element that you'd like to look at right click and hit inspect element here you'll see I have this zoom down on my screen so you can see it better but it shows me the HTML that was used to define that element now this is important because when we access elements we need to access them by a few different properties or one of a few different properties so we have an ID we have a class we have a name we have the tag there's a bunch of different ways to access the elements but the most common ways are gonna be ID name and class name now if you look here we can see that the input here has a class it has a name but it does not have an ID so that means we need to find some way to access this input tag by using what's defined inside of here so most likely we'll use a name but kind of the general hierarchy and what we want to use is ID first because an ID in HTML is guaranteed to be unique then secondly if there is no ID we probably can go with something like name name is not necessarily unique but it usually is on the page then in worse situation we can you something like class now class name is okay to search by but the issue with it is when we search for elements using slam it returns to us the first element that it finds on the page so a class is not necessarily going to be unique so what that means I could write search field for something else on the page and if that element was above the element I was looking for then when I search for it it's gonna return the one above not this one because it returns the first one it finds now there's all different ways to get around this we can find all the elements on a page and then kind of go through them we can search for the specific HTML like the actual string representation that's right here but I'll show you a few different ways just keep that in mind ID class name when you're looking for an element try to search by ID if you can't do it by ID do it by name then class and there's some other ways as well so what I'm gonna do right now is since input has a name and it doesn't have an ID I'm gonna steal that name which is just s and I'm gonna show you how we can search for that name so in here I'm gonna say search and this is just a variable that represents what it is I'm gonna be storing here what I found is gonna be driver find element by name so notice here it's showing me all the different ways I can search for things so by link text by partial text by CSS selector by class name by link text there's a whole bunch we're gonna use by name and then here we're gonna put s now what this will do is simply return to us an object that represents that search bar that we can now actually interact with and mess around with now notice at the top of my program I've included this new import which is from a selenium webdriver common keys import keys now I meant to type this out with you but not a huge deal I'm assuming you guys can figure that out for yourself what this is gonna do is actually give us access to things like the Enter key the escape key so that we can type something in this search bar and then hit enter and be able to see all the search results so what I'm gonna do now is actually show you how we can send text to a box like this so this search box is just an input field is gonna be very similar when we work with forms and later videos what we can do is say search send underscore keys like that and then inside here just put what it is that we want to type in the search box in this case I want to search for tests that'll be the test or the string we want to search for so I'll put that in there and then after we search for tests we want to hit enter so that it actually brings us to the search results for that page so we'll say search dot send keys and now we're gonna say keys which I imported up here don't return now commonly reach enter is referred to as return I think the actual name of the key is return but most people just call it enter but anyways that's the idea so now we found s which is that search box we typed in tests and that we hit enter so we can run this now and see what happens but first I imported time as well notice that so I'm gonna just sleep so we can actually see what's happening so it's time to sleep five seconds this just delays the program by five seconds so that it doesn't quit immediately so we can actually see what those search results are so let's run this give it a second to boot up here my website is fairly slow so some of this will take a second and there we go search results for test wait our five seconds and we'll notice that it closes there we go all right so that is how that works we accessed s we sent the key test we hit enter and then it searched for test so now that we've done that what I want to do is actually bring in the search results into here and be able to access all those and list out the titles so we'll start by showing you a way to actually access the entire HTML page so once we go to a specific page what I can actually do is print out the page source so I can do something like print in this case driver dot page source excuse me now this isn't gonna be that useful but I just want to show you what this looks like so you get an idea that we can scrape and access the entire website so wait for that to run here give it a second and notice it brings this big blob of text here but this is the entire source code for the page you can see all of it popping up here so that's the idea behind this we have the entire source code so if we have that we can access anything from there that we want so let's get rid of that now I just want to show you that was a feature and now what I'm gonna do is actually go to my website hee I'm gonna go to the search bar type in test and just see where it brings us because I want to start inspecting the page and see how I can actually access all of these different things here so notice that it has the dates you know HTTP methods this a little bit messed up like some of the spacing is off but what I want to actually do is be able to so for some reason this is all glitched I think there's like a title in here yeah there should be where can I get it here I think there's like a hidden title here that's just showing up in white text like that's the reason I can't read it because my cursor keeps hovering over top of it so I want to print all of those out or at least print out like all of the different search results that are here now of course I can't do all of them because they're not all on this page I would have to go over to page two to get the rest of them but you get the point I just want to find all these search results so to do that I'm gonna hit inspect I'm gonna have a look at how these are formatted so that I can figure out how I want to start looking through the tags to get all these different things so I noticed that right away all of the search results are inside of this main tab so they're inside a main like that so I'm gonna start start by searching for main I want to find all the stuff that's inside a main first and then from there I can start looking at all these articles which seem to be the individual results in the search tab and we can see that there is what like a few of them here so let's try that let's go ID main let's search for that inside of selenium so we're gonna say after well we don't need to sleep immediately we'll just say main equals in this case I guess give me driver dot find element by name or not name ID and that's gonna be main and now that we have main let me just show you that I can actually print out all of the text inside of main just by doing that so we'll print main dot text just we can look at what that is and to ensure that we're gonna have enough time to actually hit the next page before we run into main I'm gonna show you a way that we can actually make selenium wait because what's gonna happen right now and I'll show you is uh once we run this this test right so we run tests we hit enter it takes a few second seconds before it actually redirects us to the page so we could potentially run into an issue where we start trying to look for this ID main before we've actually hit the next page because it's just directly after and that's gonna run into an error for us we're gonna have an exception right so to fix that there's actually a way in selenium that we can wait for a specific thing to exist on the page before we start looking for it so that is actually where I have the documentation up here we can see that I mean you guys can read it if you want explicit weights what we can do is say try element dot web driver weight driver ten dot until EC presence of element located by ID this so what this is essentially saying is we're gonna wait until the presence of this element is located on the page before we decide to move on to the next part of the script so I'm gonna do that I'm gonna copy this in here we're gonna have to copy some of the imports as well and I'll put that like that and instead of having element equals all this we're gonna say main and then instead of this we're gonna say main now of course I need to take some of those imports so the import was all of three of these so from selenium webdriver comment by import by support you I import webdriver wait support import expected conditions as EC okay so let's import that at the top here again you can find this from the selenium documentation or you can just type it out it's nice and big here you guys should be able to read that and now that we have that this should actually work fine so it's gonna load main I can get rid of this now and then after it loads main I can print main dot text like that okay so let's go ahead and run this script and see what we're getting now okay give it a second loading loading loading how slow is my site okay so I don't know if that worked okay so maybe that actually we ran into an issue your print main text so I guess main was not defined okay so I figured out what the problem was here I have this has not accept I guess I was just copying blindly without really looking at it I don't want to quit unless this actually doesn't work so what this line is saying let's just clarify is web driver weight driver so that's the name of our web driver ten seconds that essentially means we're gonna wait a maximum of ten seconds until this thing here so II see the presence of element located so that's saying expected conditions dot presence of element located by ID main so by ID we can actually put in here like by name as well we can do class name there's all these different things that we have access to inside of by but I'm just gonna use ID for now so by ID main and then I had finally which meant no matter what if this works or not quit we don't want that we just want it to quit if this doesn't work right so yeah so that's what we'll put except there I mean and really I should be putting I mean text inside of the try it's not a huge deal for what we're doing but we'll make it a little bit better so let's run that now and see what we get give it a second and it just goes ahead and quits right away so let's see if it actually printed anything it did so main dot text actually gives me all of this so search results for tests we have a dates HTTP methods dates you know all this stuff great alright so what I'm gonna do now is actually make it so that we can find all of the headers of the different search results and print those out so notice that everything was inside of me right so now that I have access to main if we go back here and I inspect what I want to do is figure out where I would be able to find the headers of all of these different things so I can print out the search results well it looks as though they're inside of article tags and they're in a div called what is this header entry header and then entry title so what I'm actually gonna do is I'm gonna search for all of the article tags that are inside of this main tag and then inside of those I'm gonna look for all of the entry titles which are these right and then from there I'm just gonna print those out so I'll show you how we go ahead and do that I'm gonna say that once we find me and should I put it inside of except she adds do finally well leave that as finally we'll get rid of quit and we'll do everything inside of here so we'll say once we have main let's find all of the elements that are articles so articles equals main dot find elements elements by if I can find this here oops find underscore elements by tag name so what I'm doing is finding elements so plural by their tag name of article so this is gonna give me a list of all of the article tags so all of those elements which now I should build a loop through and print out the header tags for so I'm gonna say for article in articles like that and then we'll just say header equals article dot find element by in this case I think it's actually class name so find element by class name the class name I forget what it was so we're gonna have to go back in here and find that this is entry title so class entry title I can copy that here so let's do that by class name entry title and then simply print the header dot text so what this is saying is for every single article in the articles that we found from the main body tag then what we're gonna do is loop through them we're gonna find any class that says entry title inside of that article tag so it will only give us that one header and then print out that header so that's what we're trying to do so let's run this and see if this works okay give it a second and if we look here we can see that it's printed all of the text but there's nothing so there's all these blank lines so rather than doing the entry title let's change this to entry summary which I think was another class so entry summary so let's do that instead and see what results we get this time so the issue is that there was no actual title so it was printing something it just wasn't printing the correct titles so here you can see now we've printed all this research search results so we have these to do dot and yeah that's how we got all of the results so I think with I'm gonna leave the video here zoom out so you guys can read all of the code at once if you want but the idea behind this is we search something so we access that search bar search for an element then what we did was we redirected so we waited using this wait code here until we got to the next page then we found all of the elements inside of a specific tag so inside of main that had the article tag we looped through all of the articles and then we found the title we were supposed to find the titles but we found the summary of all those entries and simply printed them out so that's what we did that's what this tutorial covered I hope you guys enjoyed if you did make sure you leave a like subscribe and I will see you guys in the next selenium tutorial