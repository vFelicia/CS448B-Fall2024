hello everybody and welcome to video 6 in this tutorial Series where I'll be showing you how to deploy our cartei decentralized application now before I get into all of the steps I just wanted to show you this site here which is called rollup laab the URL is rollup la. it's powered by caresi and it showcases a bunch of interesting projects that have been built using cte's framework most of these are Community projects some of them are built during things like hackathons and you guys can definitely be a part of this and check it out for inspiration in fact one of cartez these main goals is actually to get more developers reaching out to them and experimenting with the technology they have a team called the dev ad team which is happy to talk to any of you on oneonone calls brainstorm ideas give you some inspiration Etc and that team is also offering up to $5,000 to build decentralized apps with cartei development tools Etc so if you're interested at all in building something definitely reach out to their team you can also submit any existing project that you've built and it's uh possible you'll be eligible for some grants money or at least to get some mentorship and other opportunities now what I want to do is go through the deployment steps so what we'll be doing here is deploying to a test Network so obviously you don't need to have any ethereum you don't need to have any money to be able to do this but there are a few steps that we're going to go through so first thing here is we're going to open up our project in Visual Studio code or whatever code editor you want to use now there's a few files that we're going to modify just to specify the name of our decentralized app so when we go through the deployment process we know what it is so first of all we're going to go to Docker uh bake. override HCL now I've already changed this but for you guys you'll see that we have things like Target server console machine and you'll have dap colon then you'll have a name here and then kind of the tag server tag console Etc now in your case you're probably going to have something like Echo python here what you want to change this to instead is rock paper scissors or whatever name you want to give this decentralized app so just make sure in your Docker bake that after Dap You have a name that you're going to remember so actually just copy it rock paper scissors now change that in all of these places now we're also going to go to the docker compose file and same thing here where we have our server manager we're going to make sure that we change the name so that rather than Echo python it's rock paper scissors now don't delete the devil server leave that just wherever you see the existing name like Echo python you're going to want to modify that now if we go in the docker file this should be fine we don't need to change anything here we can look in some of the other files and I think that's all good it's just this Docker bake and this Docker compos file that we're going to want to modify so now that we've made those changes the rest of the steps that we're going to follow are just going to be in our Dev guide so I'm going to open up the dev guide here on the left hand side of my screen I'll open up WSL on the right hand side and we can start going through some of these commands now I'm just going to follow this step by step so please open this up on your computer as well so you have all of the commands to copy and paste first thing we're going to do is is we're going to sign up to Alchemy which will allow us to have some URLs for our application and to actually get some test net ethereum now we're going to use the sapoia test Network so ethereum sapoia test net that's just the one we'll do for this tutorial but there's a few other that you can use sorry like arbitrum optimism polygon Etc we're just going to use spolum for here so let's go over to Alchemy actually let me just open that in a new tabs we're going to scroll all the way down here until we get to the deployment instruction okay deployment I'm just going to right click and open a new tab so we still have that available now I already have an account so I'm just signed into it uh but what you'll do is make a new Alchemy account and then we're going to make a new app so I've already got an app created here but I can go ahead and make a new one so create new app and we're going to give this a name now I'll just call this rock paper cartesia like that I don't need to give it a description that's fine and for the network we're going to change this to ethereum sepolia okay so just make sure you have an app name it whatever you want make sure the Chain's ethereum and the network is ethereum sepolia okay so now this has been created we'll just leave this page open because we're going to use this later on now what we need to do is we need to get some sapoia test net ethereum so we're able to actually deploy our app because we need a little bit of ethereum to pay the gas fees on the test Network don't worry this is completely free so what we'll do is go to the sapoia faucet so again I'm going to open this link in a new tab here and we need to sign in with Alchemy so we're going to click Alchemy login we're going to sign in should just automatically sign you in if you were signed in with the other Tab and we're going to open up metamask now for metamask we got to type in our password so let me do that first and we're going to go to any account that we want so in this case I'll just go to account number one I already have some ethon here but that's fine what we'll do is we'll copy the clipboard the address and we'll make sure that we're on the aoia network so if we go to networks we should have the test networks down here if you don't see them you can toggle this button and click on on seoa again you're going to copy the address of whatever account it is that you want to use we'll have to eventually have uh some ethon 2 accounts but I'll show you how to do that in a second and we'll paste our wallet address we'll do the capture and we'll just say send me eth so it should send us some ethereum might take a minute or two to go through but it should kind of pop up the transaction here and just give us some of this test net eth all right so now I have sufficient ethereum because I've used that faucet and what I can do is actually start building my application for deployment mode so what we're going to do is copy this Command right here and we're going to go into our terminal again if we're on Windows we're going to use WSL and we're going to change into the directory where our application is so in this case it's going to be CD rock paper scissors okay so I'm inside of the rollups examples rock paper scissors and I'm going to paste this command and I'm going to make sure the docker desktop is running all right so my Docker desktop is running and we're going to go to where it says Network here and we're just going to change this to say sapoia now make sure it's sapoia not sepoi this is actually just a small typo that should be resolved in the version that you have but for me we'll just put seoa okay so we're going to go ahead and hit enter and it should build everything that we need once that's done I'll be right back keep in mind this can take a minute or two there's quite a few things it does need to build so the build phase is now finished and we are ready to actually deploy the onchain components for our cartei dap now what we'll be deploying is something known as the cartei DAP Factory which will be the onchain part of our whole decentralized app later we'll then actually run a node and the node will be what's sitting offchain communicating on chain and kind of logging the results of the rollups anyways to be able to perform this deployment we need to actually export a few variables so the first thing we're going to need to get access to is our 12w neonic I don't know if that's how you pronounce it but essentially the 12 word secret key that gives us access to our metamask wallet now it's very important for this next step that you are alone and that you're not sharing this information with anybody even in my case it's a bit risky to be recording this because you guys can access my wallet fortunately I don't have any funds here so even if I were to leak something it's okay but as soon as you get access to these this 12w pneumonic here you want to make sure no one's looking at your computer you don't store this anywhere insecure because this will give access to your entire metamask wallet but we do need this for the deployment phase so if you already know where that is great if you don't I'll show you how to retrieve it from metamask so if you open up metamask here and you go to the three dots and you click on settings you can go to security and privacy and what we want to do is reveal our secret recovery phrase now it's going to ask you a few questions uh and it's going to say for example if you lose your secret recovery phrase metamask cannot help you okay if someone is asking for this phase you're being uh scammed sorry so we'll go here and then we'll click continue okay so now we need to enter our password and make sure no one is looking I will hide this part here but once you enter the password it will will give you that kind of 12word key and then we're going to use that in our terminal in a second so make sure you copy it all right so I have my 12word pneumonic now what we're going to do is export a variable here in our terminal so I'm going to go to clear and I'm going to type export and then in capitals this is going to be m n m o n i c pneumonic is equal to and inside of Double quotation marks we are going to paste our kind of secret recovery uh phrase sorry which should be those 12 words so paste them inside of here then hit enter I'm going to do that then clear my terminal so you guys don't see them but make sure that you do this in the instance of the terminal where you're going to be running the following commands if you were to stop the terminal and restart it you would actually need to repeat this step again because this variable only exists in the current instance of this terminal again meaning as soon as you close the terminal or you're using a different terminal you would need to repeat this step okay let me go ahead and do that I'll be right back all right so my 12word phrase is now exported as the variable here which gives us access to metamask keep in mind by default this will use the first account that you have in metamask when it does the deployment now the next thing we need is not something that's secret and this is going to be the sepolia RPC URL so what we're going to do is go over to Alchemy we're going to click on API key here obviously don't leak your API key but for the uh URL we need just this https URL it's fine if this is leaked so we're going to copy that here we're going to go back to our guide and we're going to type export and then RPC URL and this will be equal to and we can simply paste the URL here okay so now we have the URL and we have the pneumonic now what we're going to do is actually deploy this uh to the Target Network so we're going to copy this Command right here okay we're just going to fix any of the potential line breaks sometimes you can copy in a new line character so that's why I fix that right there I'm going to go to EnV and I'm going to change this topolia so where we see Network we need to replace that with the network name which is sepolia and for the DAP name this is going to be the name that we changed in the very first step of the video where we were in those kind of Docker files and we changed it from Echo python to rock paper scissors so we'll say rock paper scissors like that just to clarify again if we go to VSS code it's what you have here that we changed in the docker bake and the docker compos override okay that's the DAP name so let's go back open up our guide and we're going to go ahead and hit enter now what this should do is spin up the necessary I don't know volumes containers Etc and then actually deploy this to the test Network that we're using so give this a second to run once it's finished I'll be back all right so the deployment is finished you can see some logging information here and now that this is done what we're going to do is tear down the components and the volumes that we no longer need and we're going to do that by copying the command that is in the next step of our Dev guide so we're going to C copy this in here again we're going to fix our line braks and we're going to replace wherever it's this network with the test Network we're using which in this case is sepolia and the DAP name with the DAP we deployed which is rock paper scissors like that okay so go ahead and hit enter it's going to remove all of those containers and volumes that we no longer need now we can go ahead and press clear now at this point we've kind of done the onchain component where we've deployed this cartez dap Factory which essentially creat the DAP on chain for us what we'll need to do next is run node now this is just like running a regular ethereum node in this case we're running it on Layer Two but this node will actually run the back end for us and allow us to inspect the state and see information about our app so this is also one of the advantages of cartei is that we can create our own infrastructure and run our own nodes and anybody that's interested in the state of our application can either use an existing node that maybe we Expos to the internet or they can just run their own node and they can process all of the inputs that have gone through sorry and the state of the cartisian machine will be at whatever the current state of it is on the network I'm hoping that makes a bit of sense but in order to actually use the application you need to have a running node uh it relies on these nodes that are on Layer Two it's kind of the whole part of the framework anyways what we can do now is we can have a look at what the address of our deployed contract is by using this cat command or we can just go and do it from vs code so if we go to vs code here we can go into the deployment folder and you should see that we have a folder for sepolia so if we click here you can see we have roll ups. Json and we have rock paper scissors and this gives us the address of our dap so this is something we'll use later on but just keep in mind that we have that information inside of seoa okay now that we have that let's go back and run the node and then I'll show you how we interact with it from the front end so next thing we need to do here in the same terminal instance as before is need to export the WSS URL which is the web socket endpoint so what we'll do is go to Alchemy we'll go to API key again and we'll copy the WSS uh URL we're then going to go here and type export WSS okay so WSS URL let's make sure that's all in capitals and this will be equal to and we'll paste the URL in here okay so now we have all the variables in this instance we have the neonic we have the RPC URL and we have the WSS URL now what we'll do is we'll actually build a server manager for our Target Network and then run a validator node which will just be happening on our local computer now I'll talk more about how these nodes work and how to run different instances later on but what we want to do for now is simply build this so we're going to copy this command paste this in notice sepolia is already in uh inputed for us sorry for the network argument so we're going to have Docker build X bake server load set the argument of network to a polio so let's hit enter again give that a second to run and then I will be right back okay so our build is now complete and all we need to do is run this validator node now you'll notice there's two commands here the one below for host mode is if you want to actually be debugging the application while you're running it you can run it in host mode we don't need to do that we're just going to run this normal validator node now again I am just going to fix some of the line breaks here because when you copy in the command sometimes you get those new line characters I'm going to change the network to be POA and for the DAP name same thing we want this to be rock paper and scissors or whatever you change the name to okay so go ahead and run that going to take a second to spin up and now we have a validator node which is actually running our backend inside of the cartez machine so at this point our dap is pretty much deployed we have what we need on chain and we have the backend validator node running now again you can run as many of these nodes as you want and if you wanted this to be available to anyone you would need to expose the port that this is running on to the Internet so it gets a little bit more complex in that instance but pretty much we have a server running on Port 50005 which gives us access to inspect the cartisian machine right so if we go back to our front end I'll kind of explain some things while this runs in the background we have this default URL right this URL is what we're sending requests to to get information about the state of the carian machine now in this instance since we're running this validator node on our local computer this is going to work completely fine and we don't need to change anything because we're connected to our own node running on Local Host if we wanted to connect to a different node that wasn't running locally then what we need to do is put the public IP address of that node or whatever the domain is and then 50005 SL inspect right so we would have to have some node that's exposing this port or exposing whatever Port they want to forward it through and we would have to connect to that node and then use the correct um kind of address right SL inspect I'm hoping that makes a little bit of sense but this is just like connecting to any other node on any blockchain network if we want to be sending requests to it well we need to know the address of that and the port Etc in our case since we're running it on our local computer we're fine we don't need to change this now what we do need to change in our front end is the address of our decentralized application and the input box address now the DAP address we can find by going to deployments sepolia and then rock paper scissors right so we'll just go and we'll copy the address here and we'll put that as our dap address this is going to change now because we're running this on a different network so there you go that's our dap address next thing we need to do is find the input box address now contracts like input box are part of the rollups framework which are deployed by cartei on the different test networks that are available or on ethereum mainnet for example in this case we're working on sapoia so all of the different contracts that you need like input box are already on there and they've been deployed for you by cares you don't need to deploy a duplicate version of these it's just one that works for all of your cartez daps so what we'll do is we'll just go to a URL that I'll leave in the description that shows you what all of the addresses of these contracts are so this is in the description we have all of the deployments for all of the rollups that are on chain so we have main net optimism Etc we want sapoia now here you can see all of the different contracts that exist this that can be used for again kind of transferring assets Etc we're going to go to input box because this is what we use to send inputs to our D now we're going to copy the address here don't worry again this will be linked in the description so you can find this exact page and we're just going to change the input box address here to be that okay so now what we've done is we've modified the DAP address we've modified the input box address and that's it we can now run our front end and interact with our onchain dap so we're going to see the inter rock paper scissors CD into front end and yarn start once that starts I'll be right back and I'll show you how we interact with the DAP okay so our front end is now running and you can actually see that we're getting some logs here on the right hand side of our screen that are showing that the inspect request that we're sending is actually working properly you can see when I send the inspect request story we get received finished status received inspect request data Etc gives us the logs we had before we were running this in development mode so interacting with this node is working locally now what we want to do is make sure we can actually send inputs now remember sending inputs requires the blockchain so let's try to create a challenge and see how this works so we go to create challenge okay we're going to send a uh what do you call it transaction here this will use the input box contract and send the transaction to the DAP address that we specified in our front end and remember we've changeed that now so that that is the DAP address of our onchain uh kind of cartei dap right so that transaction has been sent and I will note that it will take a little bit of time here could take up to a few minutes for us to actually get this update in our front end and the reason for that is that we had to use the blockchain so we need to wait for a certain number of confirmations before this is actually going to pop up in our back end and be handled by the back end so just be patient wait a little bit and then once our backend gets that advanced uh kind of request data here when we update our challenges we should see that updated challenge so right now we're not seeing it again we're just going to wait a few minutes we'll get the request popping up in the back end and then we'll be able to interact with it like we did before so this input has now been handled by our back end if I scroll up you can see some logs related to it like the payload input Etc and you can see here now that we have challenge zero which is our active Challenge and we're just waiting on an opponent so now what we should be able to do is change over to another account notice I have some uh test ethereum here in this account as well CU I set that up and when we refresh the page you you see now that we have the ability to accept the challenge so I'm working exactly like before I can change this to paper and click on accept Challenge and now similar thing we're just going to need to wait for all of the confirmations and then the input will get sent to our backend and then we should have the ability to reveal our moves once that's finished and the back end picks up this input I'll be back and we'll kind of repeat you know the reveal process and just make sure everything is working all right so the next input has been accepted here by the backend and you can see now we have the same state we have when we're doing local development the opponent has a move that's hidden we have a move that's hidden we can go ahead and reveal so let's click on this and send the reveal transaction and then we'll go do the same thing from the other account so let's switch over here to our account number one and refresh and reveal the move okay and now we'll wait for both those inputs to be handled and we'll just make sure that everything's kind of working properly and that we see the log of the winner which I believe should be the player who selected paper which I think was account number two all right so both those inputs have been processed now by the back end and we can see that we were getting the log of the challenge saying the winner is the opponent the opponent made the move paper and we made the move Rock now if we go back to our other account here and we give this a refresh we should see that we get the opposite we are the winner because we made the move paper and the opponent made the move Rock so everything is working our deployment is successful again it's going to take longer on a real Network when you need to process those transactions so just be patient and I promise you things will pop up we did everything properly and you can see the deployment process was actually relatively straightforward so that is pretty much it just to clarify what you would need to do if you want this front end to actually be working for anyone first of all you need to deploy the front end so you'd have some kind of URL and just deploy this using whatever you normally would you could use for sell or something you need to have some kind of node this node would need to expose the port for the inspect server and then you just need to have the front end communicate with this node or any node that you want to be able to get information about the caresan machine once you do that everything should just be working and you'd have a fully decentralized application that anyone with a metamask account or really any blockchain network account would be able to access and use so now as we wrap things up I will quickly show you another tool that you might find useful if you start working with cartez more and doing some more deployments building Etc now this tool is called Su noo I'm not sure actually how you pronounce this I'll leave the link in the description but this is a framework for developing decentralized applications built on top of caresia Technology it helps developers to create build run test deploy Monitor and doctor or verify their application so a lot of the complex commands that we just went through using Docker Etc we wouldn't need to actually type in if we're using the Sue noo package so this just again kind of wraps and Abstract some of the things that we went through and created manually and gives you a kind of better API and experience I for actually working with and developing caresia daps so with that said that will wrap up this video in the next videos in the series we'll go more in depth the carteia life cycle and architecture and we'll talk about some next steps and things you might want to consider as you continue to get better at web3 development and working with Technologies like caresia I hope you enjoyed this video and I look forward to seeing you in the next one