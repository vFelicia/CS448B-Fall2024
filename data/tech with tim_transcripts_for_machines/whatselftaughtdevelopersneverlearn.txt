foreign so in today's video I'm going to share with you some topics that selftaught developers most likely will never learn and when I say selftaught developer I'm really talking about someone who hasn't gone through the traditional school system and just give you a bit of context here I myself have done two and a half years of a computer science degree I've done most of the mandatory computer science courses and I'm aware of the courses that I'm going to have to take in the future if I continue my computer science degree and I'm also pretty much selftaught with a lot of the other development skills that I have I started to learn to program well before I was in university and a lot of what I know I didn't learn in University so I gotta have a decent perspective here as someone who's been through school but also teaches themselves a lot of programming anyways with that said I will lastly mention here that there is a reason why a lot of developers don't learn these topics again I'm not trying to say you need to code and learn them a lot of them are relatively useful in a real job environment however I believe it's important to be aware of some gaps in your knowledge and hopefully this video will just show you some things that maybe you haven't considered before and you might want to learn anyways let's go ahead and get started after quick word from our sponsor before we get started I need to thank the sponsor of this video which is Alco expert algo expert is the best platform to use when preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with 160 practice questions detailed Solutions and nine of the most popular programming languages a featurepacked browserbased coding environment extensive test Suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to Ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a mock interviews feature I can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code Tech with Tim for a discount on the platform alright so let's go ahead and and dive in now the first thing I'm going to clarify here is that a lot of the main topics I'm going to bring up are just the names of university courses that I've taken so what I've kind of done is gone and looked through all of the courses that I've taken and that I need to take in the future and thought about if I was a selftaught developer if I would have learned that content or even like a subset of that content so if it was a course where this is something pretty important and most developers already know this I obviously didn't include it here but if it's something like say math then I probably put it in this list because that's something that as a selftaught developer is not super important not a real practical skill and you don't really necessarily need to learn that to get a job anyways let's dive into topic number one that selftaught developers most likely will never learn and that is advanced mathematics and proofs now when I say advanced mathematics I'm really talking about University level mathematics and I'll go through kind of the main courses that I'm talking about here so the first one this is pretty obvious but calculus so personally in University I had to do calculus 1 and calculate list two these were actually pretty difficult courses so in these courses pretty much what we learned was integrals derivatives and a few applications of integrals and derivatives I haven't found these super useful in Computing in fact the only time I've ever had to use any of that knowledge is when I was looking at some Advanced machine learning kind of explanations so the math behind some machine learning models or machine learning techniques or artificial intelligence related stuff but other than that I've had pretty much no use for calculus in my life since then anyways moving on the next course that I'm kind of grouping in this advanced mathematics and proof section is going to be linear algebra now this is actually one that I would say is pretty important not simply because of the content that it teaches but because of the way it allows you to kind of think about math so linear algebra is a much different type of math than something like calculus or algebra in general like regular algebra with linear algebra you're doing threedimensional math you're working with matrices you're working with Vector spaces and just a very abstract field of math that I know to a lot of people who are in my course was very new and for me again I didn't find it crazy useful in my experience writing code or being a software engineer but it did help me kind of think about math and problems in a different way and that's why I found some value in it moving on the next two courses are ones that I actually hadn't even heard of until I went into University and this is discrete structures and discrete mathematics now discrete mathematics is kind of the first course and discrete structures is the second course and what you learn in this is actually very computer science relevant math so you're learning about proofs for specific algorithms you're learning about things like permutations combinations graph Theory set theory modular arithmetic and really a lot of the underlying math behind a lot of the principles and programming languages that you're using and behind a lot of very famous algorithms that solve problems so these courses I actually found super useful I wish I could recite more of what I learned in them but I'd recommend that if you haven't heard of discrete mathematics or discrete structures go and give it a Google search look at some you know syllabus or curriculum for it and just see all of the topics that it covers because they're pretty interesting and one of the cool things that's taught in these courses is actually how you prove the correctness of algorithms so how do you say that my algorithm 100 is going to be correct on any input and how do you do that using math that was probably the most interesting aspect also the most difficult aspect of this course alright so with that that pretty much wraps up this first section which is advanced mathematics and proofs again the reason I put it here is because why in the world would you go learn this unless you had to learn it or you're just a math geek I know I'm not and if I wasn't in school there's no chance I would have learned any of this on my free time alright so moving on to the next topic here I have digital systems and computer architecture now these were two separate courses that I took in University but I'm kind of clumping them together because digital systems was first and then computer architecture was second and what was taught in these courses was really how computer hardware works on a much lower level and specifically how a processor actually works so how you take say two numbers and add them in a computer so not like okay how do we look at two numbers and add them but how do wires and circuits and electricity actually allow you to perform computations now to me I found that super fascinating because I'm someone who's really into building computers and I like the hardware aspect as much as I like the software aspect and so to actually kind of get an insight into the lower level and be like oh this is how you know the memory of a computer is managed this is how I access some data at the data specific memory address this is what machine code looks like and this is how I take you know some commands and actually run them on an APU or a CPU that was really really fascinating so other things we learned in these courses was uh the different Gates that you would use in a digital system so an and gate and or gate a nor gate we learned about Boolean algebra so how you simplify Boolean expressions and a ton of other stuff it's been a long time since I've taken those courses these were very difficult courses is probably some of the hardest courses that I had to take but the knowledge that I learned in them was really valuable and I'm actually really glad that I got to take them because even though they were a pain in the ass back then right now I feel like I have a much much better understanding of how a computer works as a whole not just at the software and the code level but actually on the lower level Hardware level which is something that I like alright so moving on to the next topic we have programming paradigms now programming paradigms refers to the different styles of programming and every programming language that you write in implements specific programming paradigms so for example a language like Java this is an objectoriented programming language that's its Paradigm it implements that whereas a language like python implements both functional programming and object oriented programming and I think it implements something else as well but those are the two ones that I know for sure that it implements anyways the point is that most developers only ever learn a few programming languages and most of those programming languages are the same Paradigm so if you're learning languages like Java JavaScript python C plus plus but these all fit into kind of the similar or same Paradigm and you're writing code in a very similar style the way you solve a problem in Python is very similar to the way you solve it in Java the only difference is the syntax might change a bit there might be a few language features that kind of differ across the problems that yourself point being there's a bunch of other programming language paradigms as well that most programmers never look at for example imperative logical procedural there's a bunch of other ones I can't remember off of the top of my head but the way you write code in these languages is completely different from the way you write them in your kind of traditional modern languages now do you really need to know these paradigms probably not they're probably not going to be useful to you in your job but for me when I had to write code and say an imperative style I actually became a better programmer because I had to stop relying on a lot of the kind of language features I had in a language like Python and really think hard about how I'm going to use the bare minimum amount of features to solve this problem for example I had to work in a language called ocamel now I'm not very knowledgeable on ocamel it's just what I did in the course but when we were in the course we were never introduced to a loop so there's no for Loop or while loop or anything like that if we wanted to Loop over something we need to use recursion so we had to have a recursive function if we just wanted to say look at every element of a list we had all kinds of nested functions higher order functions and all kinds of crazy random stuff I'm actually going to talk about in the next section but the point is go and look up programming paradigms and look at some of the paradigms you've never seen before and just have a look at those languages because they're very cool and if you can learn even just a tiny bit of a different Paradigm in my opinion it makes you a better programmer and gives you kind of an appreciation for a lot of the features that you might use in your modern programming language that you just you know assume are always going to be there anyways let's move on to the next topic alright so moving on to the next topic I have programming language Concepts now this was a specific course that I took in University as well this is the one that I had to write ocamel code in as I was mentioning in the previous section and in this course we learned some very Advanced programming language Concepts and when I say that I literally am talking about the different ways in which programming languages are implemented how you know memory is handled how execution occurs in a language and a lot of very low level things also how to create you know multiple threads distributive programming multiprocessing multithreading a lot of stuff like that was taught in this course and one of the cooler things that we learned was higher order programming and higher order functions which means having you know a bunch of nested functions inside of each other we're having a function that returns another function and then we're talking about things like closures and I'm just rattling off a ton of things that I remember learning in this course the point being this course actually taught us about the design of a programming language as a whole and how you pick what features should be in a programming language and what kind of pros and cons you get or what you know advantages and drawbacks you get from different implementations of programming language features so I feel like I'm just completely rambling in this section again I don't remember a ton of this stuff I learned this a while ago but this was something that I learned in University that I thought was useful and worth a mention in this video anyways let's move on to the next topic alright so the next and last topic I have on my list view here is operating systems now when I say operating systems I'm not just talking about you know Linux Mac Windows that's not what I'm referring to I'm referring to how operating systems actually work on a lower level now full disclosure this is a course that I have not taken I actually stopped school I'm kind of on a break right now from school I may or may not go back that's a that's a different video point being this of course I haven't taken so I just went and read kind of like the syllabus for this course and picked out some of the key points that I could discuss them with you because this is something that I really know nothing about anyways operating system something that most selftaught developers including myself probably will never learn so when I say that I'm talking about things like Process Management process scheduling concurrency CPU scheduling memory management virtual memory mask storage systems file systems input output devices how does an operating system work with all of this stuff what actually is an operating system how do you build a basic operating system those are all things that to my own knowledge are taught in this course and I'm not going to elaborate on them more because I really don't know what I'm talking about in this section point being most selftaught developers don't learn this so with that said I actually am going to end the video here I hope that this was somewhat insightful and at least maybe gave you some topics to consider learning personally I find learning anything like this is going to give you some value you know you can question how much value it is and if you should learn it or not but for me I don't regret taking any of these courses even though at the time they were a lot of work and a pain in the ass as I said previously but now after taking them I do have an appreciation for all the stuff that was taught there and I'm grateful that I was able to have the opportunity to learn anyways I hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel and I will see you in another one foreign