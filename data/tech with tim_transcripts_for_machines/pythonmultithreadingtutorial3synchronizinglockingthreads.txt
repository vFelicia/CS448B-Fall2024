hey guys and welcome back to their multithreading tutorial with Python so in this video we're gonna be talking about synchronizing threads and using something called locking threads and essentially what that means is allowing our threads to wait for another thread to finish before they go and what I mean by that is in the last video we saw that when one thread was waiting or was pausing the other thread would automatically run and then when mountian pause the next one would go but for example if the first thread ran it waited one second but the next thread didn't wait at all it would just continue to run that thread until it finished right so maybe there's some instances where we need to finish one thread before we can move on to another thread and I'm gonna show you an example of that right now so you guys see where this might be useful so essentially let's think of an example like this okay so we're thinking about kind of like a payment system a check out like a cash online okay so you have our main checkout which is right here and there's kind of three main functions of the checkout so they've selected their item the first thing we need to do is we need to process payment okay the next thing we need to do is send some kind of confirmation email to that client or to that user and just say this is your shipping information let's say they bought like a tshirt or something and say thank you for shopping with us right and then the next thing that we have to do is we have to redirect them back to the either the original web site and say like purchase more stuff or Salo or say thank you so essentially this I'm just saying load Thank You page as an example but like load another web page okay these are the three things we need to do so these would all be in their own threads okay this is what we're gonna do this multithreaded you could do this single thread but we're gonna do this multithreaded the way so what we need to do right is well processing payment is gonna take a few seconds right let's say this takes like five seconds drunk it's that's a five and that's an S I know you can probably not can tell sending a confirmation email let's say this takes like 10 seconds okay I don't know how long it actually takes but to like connect to the server and send it and let's say loading this Thank You page it takes like 3 seconds ok so 5 seconds 10 seconds 3 seconds now let's think well we can't really send them a confirmation email until this pain in process so until they validate like the visa or whatever the card is right we can't really do any of these other threads until that is complete because well if it doesn't work that we have to tell them something else right so this needs to happen before we can do one of these too that's just important to understand but once this happens and we process the payment sending this confirmation email might take a long time to be able to connect to the server to actually send that email out think about it you could probably take a few seconds to do so rather than you know waiting just to connect to the server sending the confirmation email and then loading the thankyou page which would take us 10 seconds to send the confirmation email and then load the thankyou page let's load the thankyou page in the background in its own thread while this sending confirmation email is waiting so waiting to connect to the server or something like that so essentially the user is able to see this Thank You page before the email is sent or maybe they see it around a similar time and essentially the reason we would do this is because I don't sure if you guys actually know but when you try to load a page on Google most users actually click off of the page or click exit on the tab if if it takes more than like two seconds to load the page I don't know the exact number but it's very short and like 50% of people will exit out of the tab if the web page doesn't load in a certain amount of time it might be like five seconds or something but here right it's sending confirmation email is gonna take 10 seconds then they might think something's wrong and they might refresh the page and they may click eggs and not my like that could possibly mess up our program or it would just be like you don't want the user to leave the website you want them to maybe continue shopping or something like that right so these are our tasks now right now we don't really have a way of doing this we could set up three threads we could run them but what would happen is if this waited for a second I don't know do something else right like to connect or to validate the card to get receive information from a server then what would happen is this would start sending automatically and then if that waited this would happen right and we don't want that to happen so what we need to do is essentially lock a thread so that these only can go after our process payment is done so that's what we're gonna do now and it's very easy to do this ok so let me put this little drawing tab away so that's just a real life example because I want you to get see when you would actually use this because you might think it's kind of useless what I'm gonna do is I'm gonna set up a locking object in threading and the way we do that is I'm just going to variable this is again the same code as last time it's all gonna be on my website I'm going to say threadlock is gonna equal threading dot lock okay and this is just kind of a new object let me just make sure this is correct yeah that is correct and all I'm gonna do is in this run here so when we run the thread I'm going to lock the thread and then release it once it's finished and I'll show you how this works I'm gonna say thread lock which is gonna be a global variable dot acquire which essentially means lock the thread and don't let any other thread run unless this thread finishes and then what this does is we say thread lock dot release and what this does is release the lock or release the lock on the thread so that as soon as this function is done happening we release the lock which allows another thread to start running so notice how we're delaying some time in the last code we did it went like one two one two one two right if you haven't seen that video I recommend you watch that but here you're gonna see what happens when I run the program and how the the locking actually works okay so let's do this so thread 1 thread 1 thread 1 and it's gonna go and finish thread 1 and only once it's finished thread 1 it'll do thread 2 even though in reality before right we had to go one two one two one two one two and that's how it should work but since we're locking it that means we can't do any other thread until this one's finished okay so now what I'm gonna do is I'm gonna simulate that example that we just kind of drew out and created using a third thread so what I'm gonna do actually though is sorry I commented these out cuz I was testing something but we'll leave those like that I'm gonna copy this thread class and all I'm gonna do is essentially just make it called my thread two and I'm just gonna change the location of this release so I'm just gonna bring thread lock release I'm gonna put it up here so essentially what happens in here is we acquire the lock which means that we're we're gonna lock the thread but we're also gonna see if any other thread is locked before we like continue to do the next step that's that's what this is doing as well and then after we do that we're just immediately gonna release it the reason we need this here is because if we don't have this release it's gonna lock the thread and never unlock it so it's like what we're kind of doing here is we're checking if any other thread is locked if it is then we're gonna wait before we continue moving in this run function otherwise then we'll lock the thread instantly release it do this and then you'll you'll see how this works so what I'm gonna do now is we're gonna create a third thread so we can say thread three equals my thread two I'm gonna change thread two to be my thread two as well I'm gonna give it ID three I'm gonna call this I'm actually loading page I'm gonna change the names of these to make some more sense I'm gonna change thread to sew the thread two we'll call this sending email and for thread one will say payment again and I'll actually make these the times that I said so let's say process payment is five sending email takes 10 seconds and loading the page takes three now all I do is I'll start these threads again so say thread 3 dot start and then at the end here thread 3 join and let's let's see if I made any mistakes or not but I think with that we should actually just be exactly simulating the situation that I kind of said you guys so let's run this now and let's see so starting payment case we're doing payment payment payment let's make this full screen exiting payment ok now we're sending email loading page sending email loading page exiting loading page and then sending the email right so when we exit loading page technically loading page will still be like up on the screen but we're just done loading it so essentially since this sending email was taking like a few seconds to send it was loading the page as well whenever it broke or whenever it stopped working so now the page is open here and the email is still sending which means that we've loaded the page faster to our user so we've got more users to stay on our website rather than I'm having to wait like 10 or 13 seconds to load that page right which is a long amount of time think about waiting 15 seconds 13 seconds for a page to load you'd probably think something was wrong so essentially that is kind of it on how we'd lock threads very simply just got to use this acquire and release if you're kind of confused on how these work I recommend you just play around with them and if you want to create more threads that use different functions I recommend you do that as well with that being said follow my Twitter join my discord and obviously subscribe to the channel if you're not and I will see you again in the next video