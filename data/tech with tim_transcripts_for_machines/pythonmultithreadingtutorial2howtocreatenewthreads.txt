hey guys and welcome back so in this tutorial I'm kind of just gonna be going through the code that I used in the last video explaining what that code does why it does that and how we can kind of modify it to do different things in future videos were going to talk more about some of the things in the threading module there's some really cool stuff that you can do you can set tasks to run at like a softer certain time interval you can see how many threads you have currently running there's a bunch of other cool stuff that's we're gonna get into before I go too far if you want any of the code that I write in here and you don't want to copy it out it will be on my website Tech with simnet and if you need any help feel free to join my discord server or message me on Twitter okay so let's get started and we're gonna just start by importing threading and importing time okay and what we need to do when we want to create a new thread is we actually have to create a subclass of the main thread class from this threading module you guys will see what I mean in a second we're gonna say class name this whatever you want I'm going to say it's my thread and it's gonna hear it from threading dot thread like this okay we're gonna create a nice knit method here it's gonna take self it's going to take thread ID which will just be some kind of integer I'll take a name which can be whatever the thread name is and then finally we will take a count and the reason we're taking account is because this specific thread that we're creating is going to try to count down from whatever number we give it right so that's what we're gonna do so now the first thing we actually have to do whenever we create kind of as a subclass like this of the threading class is we need to call that the parents constructor method or initialization method so we're gonna mean to call this on this so to do that we're just gonna copy this so threading dot thread underscore underscore an it on your underscore and just give itself the reason we have to do that is because there's some lowlevel stuff going on when we create a new thread and well this is what's gonna handle that for us so we just call that it sets it up in our thread is ready to go essentially so now we're just gonna define all of our what do you call it attributes here so just say thread ID equals thread ID but they're self got name equals name and self dot count equals count sweet okay so we've done that and that's actually all we need for our initialization method here and now we can just make it method called run and this is what is actually gonna define it actually it needs to be called run by the way because that's how we know to start the thread it needs to define essentially what the thread is going to do so we're going to give it an argument of self doing anything else I don't think so we'll just leave that itself and in here we're simply just going to print that we're starting the thread and then we're gonna call some kind of function and that function is gonna be what the thread is essentially and this is pretty well the way that we're gonna do anything when we want to create a new thread is we're going to create a subclass of this threading what do you call it this main threading class we're just gonna call the constructor set a few things these can be whatever you want by the way you don't have to have these ones in that I'm defining we're gonna create a method this does need to be called run and this is what is going to well run when you start the thread okay so in here we're just gonna say print and then we'll just say starting and we'll just put the name of the thread so it's a plus self dot name and we're gonna add a new blind character this is gonna seem weird but just just go with me here okay on this newline character next we're gonna call whatever function it is that's gonna be doing something for us so in my case I'm just gonna call my function print underscore time because that's what we were doing last time and in here what do we need to give it we need to give it three things and we'll define those after we're gonna give thread name so we're gonna say self dot name self dot okay selftaught count which is gonna be up there and then we need to give it a delay and the delay I think is I'm gonna say is one second okay so we'll do that alright next in here we're gonna say print and then we're going to say exiting and then obviously the name of the thread so self dot name and essentially this is what's gonna happen once this function is done running we're gonna come here and then we're gonna print this out saying that we're essentially done the thread okay sweet so that's actually it for creating a thread now this can be changed quite a bit and it's actually really nice because it means that we can kind of give our threads their own attributes and properties and define what they are based on what kind of thread they're so this thread for example is just gonna call the print time function but if we wanted to create different kinds of threads we just create more classes like this and call it like my thread my thread obviously an appropriate name but you get the point and then in here we can just change the function we can maybe not print something out we could print something different we can give it some different attributes and all that kind of stuff sweet so let's now create a function and we're going to call this one print time so define print time it's gonna take three things which can be a name a delay and it count okay and in here all we're gonna do is we're gonna say Wow count and then what we're gonna do is we're gonna do time dot sleep and here we're just gonna do the delay that's how much we're gonna sleep by and then we're gonna simply print out I'm just gonna copy this in because it's kind of a long string here or a long statement I'm gonna just print this so percent s % does % s and then these are the three things we're going to use except I just need to change these to be the correct name so we're gonna say name time dot c time which is gonna get the current time and just format that nice for us it's a counter this is just called count sweeps we've got that and next what we're gonna do is we're going to decrement the counter you're gonna say couch equal one and essentially what this is gonna do is we're just gonna count down from whatever number we passed in here and once that eventually hits zero so well count like any number will be true there unless it's zero then we'll exit out of this we'll stop we'll go back here we'll exit and then we'll be good to go so that's actually almost about it for creating kind of the function and the thread now we just need to start our threads and wait for them to kind of execute so to do this pretty straightforward we just need to create new threads to start so we're gonna say thread 1 equals my thread and then here we're just gonna give it the three things that need so ID name count so ID is gonna be one name is gonna be simply thread 1 and the count will say is like 10 okay next so we're going to say thread two is equal to my thread and then here we're gonna give it ID we're gonna call it well thread two and we're gonna give it a count of five okay and I should probably call spell thread correctly that would be good okay so we've actually just created these threads now but if we won't actually run them and have them like working for us will we need to do that so to do that is pretty straightforward all we're gonna do is just say thread 1 dot start and then directly underneath that will do thread 2 got start as well and what this is gonna do is it's gonna start running the threads and it's kind of gonna do exactly what we showed in the last video how they run through and we'll show that again now the last thing that we need to do is we need to do thread 1 join and thread two dot join now the reason we need this is because if we don't have this it's not gonna we could run into some issues where the thread is gonna eggs it or like this just something goes wrong with the thread so essentially these we'll talk about them more in later videos it's just we're waiting for the thread to finish executing before we terminate the program I think that's the easiest way to do it and now what I'm gonna do at the end is I'm just gonna say print done main thread because well like what we're doing here right is we're creating two threads but the thing is our programs already running in one thread which is known as the main thread so we're actually gonna have three threads now in our program so we have the main thread and we have two that we've created that are running based on what's said in the main thread okay it's kind of weird but that's like we have three threads essentially for a program because we have main one so once these two threads are done doing their kind of thing then we'll we're finish the main thread because the program is done executing so we'll just print that and say that we're done okay so I don't think that I made any mistakes here I'm just having a quick look through my other thing to make sure I don't run into any error see okay so that should be alright so let's now actually you just run this and see what we're getting okay starting thread one thread two thread one thread two thread one thread two this is a little bit different than the one I did last time but I think it's actually a pretty decent example and we'll go through in a second sweet so this worked really well surprisingly that I didn't make new Stakes so obviously thread one starts at ten it's trying to count down to zero thread two starts at five and they're just gonna alternate back and forth because they each delay one second in the little loop so when one is delaying the other one can run when the other one is delaying the next one can run now if you don't want these little blank lines in between them I think it makes it easier to read then you can just remove that what do you call it newline character at the end but I just like it because it makes it easier to read so we get seven to six one obviously now thread two's done so we exit thread two and then we go and just keep executing thread one until eventually we get to zero and then we exit it and then we're done so that essentially is the code we wrote in the last video if you guys want to modify this and play with it try changing what this function does maybe don't just print the time out maybe do something else maybe count some other numbers or maybe multiplied I don't know do your own thing just mess around with it don't be afraid if it's not going to work because the only way you really do learn these kind of things well is just to mess around with them and play with them yourself that's at least what I've been doing to kind of figure out threading before I taught it to you guys again you can mess with this delay you can make it a variable you can change it maybe in here you want to add another attribute that's delay so that you don't have to have like a hardcoded 1 second delay uh and yeah maybe create three threads four threads whatever so if we want to create another one that was different than this and did its own kind of tasks like maybe it counted up well then essentially all we would do is just copy this class and paste it here and then instead of having it call print time it just call a different function or it could even just have like its own while loop in here right because all essentially this function does is has a while loop it's just so we can use it twice but I mean like you can put your own while loop in here as well and do something like that so anyways that has kind of been it for this tutorial the next one we're going to get into some more cool things in the threading module counting threads starting them after a certain time doing some more practical examples and with that being said I will see you guys in the next video