foreign super simple tips that are going to drastically improve your code quality you're going to go from looking like a junior developer who just wrote their first hello world program to looking like the most advanced senior developer that you've ever seen seriously this stuff is super simple very easy you just need to learn it one time and if you can build it into a habit you're going to drastically increase your code quality now with that said let's quickly talk about what makes clean coat and what all of these tips are going to hit on so when I'm thinking of good high quality clean code I'm thinking of three things readable reusable and maintainable now when I think of readable code I think of nice and simple good variable names not a lot of nesting very easy to understand now when I think of reusable code I think of functions that have good inputs and outputs code that's well organized and structured that's not coupled heavily which means there's not a bunch of external dependencies or other functions that this code might be relying on and lastly when I think of maintainable code I think of code that is testable that is future proof that is well optimized and that is flexible and extensible so with that said let's dive into the video here after I give you my first and kind of bonus tip which is to check out the sponsor of this video before we get started I need to thank lenode for sponsoring this video I've been using and working with lenode for nearly three years now and they've consistently been my goto choice for hosting my applications and servers in fact right now I'm using the node to host the official Tech with Tim Discord bot a website multiple of my domains and a kubernetes cluster now lenode was just recently acquired by Akamai and as a part of this acquisition they're going to be adding more than a dozen new data centers around the world in the next year lenode makes it super easy to spin up servers with their oneclick app Marketplace and have tons of written guides and YouTube videos on their channel to help you get started now if you're having any issues you can reach out to the 24 7 support team and actually talk with a real human being now the nodes pricing is simple with no hidden fees and full transparency and you can test out the node services for free by using the link in the description and claiming in a hundred dollar sixty day credit for any new accounts it's been an absolute pleasure to work with lenode over the past few years and one last thank you to them for sponsoring this video alright so let's get into our first tip here which is to reduce comments now I know this seems counterintuitive because a lot of times professors and teachers will tell you write all kinds of comments describe your code make it nice and clear Now comments can be a good thing but only if they're not overused and if they're actually necessary a lot of times when you're writing a bunch of comments this is a signal to yourself that there's a better way to write your code such that the code is selfexpressive and doesn't require comments to explain it I almost never write comments when I'm writing code and that's because the way in which I write my code explains itself I don't need a comment to explain what's going on you can read through the code even if you're a beginner programmer and it's very easy to understand because of the way that I've organized and separated out different pieces of logic and because of the different variable names function definitions Etc so if you look on my screen here you can see that we have an example of code that may be a more Junior developer would write where they're being very verbose they're writing a ton of different comments and they're kind of explaining things that maybe don't need to be explained or that could be explained in a better way by writing the code you know a bit different so here initializing the list of student names initializing the list of student scores function to assign random scores to students and notice that we're using things like Global variables so in this case I might actually need this comment to explain that I'm assigning scores to my Global students list here whereas if I took students as a parameter it's going to be more clear that I'm then assigning it to that parameter rather than some global object now as you go through here you can decide for yourself what comments you might have written or which ones you might have omitted obviously this is a bit of an exaggeration but you get the point there's a ton of comments here they're really unnecessary any senior developer would probably cringe if they were reading through this type of code and stuff like importing the random module we don't need to have that comment anyone who's reading this code is going to know that import random does that so just keep that in mind now to give you kind of a contrast here to this code where we have a bunch of comments we're kind of explaining unnecessary things let's have a look at what a senior developer might write sorry so here you go we have our senior code now notice that we've kind of refactored some things we've changed some stuff around and we've made the code a lot more clear and readable without having any comments so even if we just start from the main line here we have students equals initialized students okay that's clear what that's doing scores equals initialize scores and we're passing in the number of students that we have okay that probably tells us that we're going to have these scores associated with the students assign random scores okay we're passing our scores array it's going to give random scores for all of those makes sense highest score find the student with the highest score we pass in our students we pass in our scores very clear what's going on so even without getting into any of these individual functions just by reading the main line of the program I know exactly what the goal of the program is I know what's happening and I don't really need any comments this is very very clear even if you go to these individual functions notice that rather than having a variable called students that's Global that we're accessing we just have an initialize students function that's very clear that reduces our need for the comment saying hey we're initializing the student names same with the scores and now that we're taking in a parameter we kind of know that these scores are going to be associated with whatever length object we're passing in here assigning random scores same thing we take in some scores array we're assigning random scores to each index and then finding the student with the highest score and notice that we take in our students and we take in our scores as a parameter so it's very clear that the operation is happening on this whereas if we go back here we just have find highest score we have no parameters and now we might need to explain that we're actually looking at the global scores that are associated with students because that's not quite clear hopefully this gives you a bit of a contrast but try to write your code in a way such that it's selfexpressive and it requires minimal comments alright so let's move on to tip number two which is to use guard Clauses now a guard Clause is simply some kind of condition that you're going to check at the top of a function program or block of code that will typically Escape or exit from that block of code if the condition is not true a guard Clause is a way to avoid performing additional logic if you don't have the preconditions required to actually get into that block of code hopefully that makes a bit of sense but an example of a guard Clause could be checking inputs to a function making sure maybe you have at least one element in an array making sure a number is not zero making sure you have the correct types all kinds of different things you can be checking but they're very helpful to increase the readability of your code reduce nesting and reduce the kind of complexity of logic you might have later on and to ensure that whatever logic you're about to perform is actually going to be valid and necessary to perform based on the inputs typically that are passed to some kind of function so I'm going to show you here an example of how we could Implement a guard Clause to make this function a bit more readable now obviously this is quite simple it's only 11 lines of code if you write something like this no one is going to scream at you and yell at you but there is a way to just make this a little bit better and it will kind of show your experience and the fact that you're used to do doing this type of thing so here we have calculate discounted price we take in a price we take in a discount now we just say the discounted price is equal to zero and then notice that the first thing we do here with our if statement check is we check if the discount is valid for us to actually perform the computation that we're about to do so essentially the discount has to be greater than zero and less than or equal to 100 for us to be able to calculate the discounted price using the formula that we have then after we see this we say okay well if the discount wasn't valid and if the discount is less than zero we're just going to say the discounted price is equal to whatever the price is otherwise we're going to raise a value error because if the discount was not less than or equal to zero and the discount was not greater than zero and less than or equal to one hundred then it is in valid and actually now that I see this this should be just a double equal sign sorry not then a less than or equal to all right so again this is fine there's a way that we can make this a bit cleaner let's have a look at how to do that all right so we say Define calculate the scatter price again same function signature and now what we're doing is you're checking if the discount is invalid so notice we've kind of flipped the operation here over here we checked if the discount was valid if it was we made this calculation and then we continued on with the rest of our elif and else checks here the first thing we're doing is implementing a guard Clause where we're saying we're not going to continue and perform any other logic unless the discount you pass to us is valid so if the discount is less than zero or the discount is greater than or equal to 100 we immediately raise our value error next we do one other check that we have to have this is kind of another guard Clause where we're saying if the discount is equal to zero well we don't want to perform this logic so we're just going to return whatever the price is lastly we return the price multiplied by one minus the discount over 100 which is just our formula for calculating the discount so hopefully you can see kind of the difference here I'll split this on the screen and let's have a look at these two functions side by side notice that this one is a little bit easier to read we start with our two different guard Clauses where we're immediately exiting the function if either of these things occur and then if our discount is valid for the calculation we simply return whatever it is this makes it a little bit easier for us to see where the core logic is happening in the function which is in this return statement and to know the conditions that we need to pass for us to hit this main piece of logic hopefully that's clear now let's move on to the next tip alright so moving on to tip number three I have to reduce nesting and to group conditions together so let's have a look at kind of the junior code example here which might be something like this so we have a few variables here age city income education level imagine these are Dynamic obviously for the example I'm just making them kind of static constant values and you can see that what we're trying to check is if someone is eligible to enter a program so the first thing we check is their age if they're greater than or equal to 18 then we move on to the next check where we see if they're from New York or Los Angeles then we need to see if their income is between forty thousand and one hundred thousand then we need to check if their education level is one of these two then we go here and we print that they are eligible for the program otherwise we have all of these different else statements and you can see that it gets a bit confusing to determine which ones are associated with which so here this one is associated with the education if statement this one here is associated with income this one here is associated with City but notice that I kind of have to trace the little line in my editor and again it's not the cleanest and easiest way for me to read this also in a language like python it becomes easy for me to mess up the indentation level if I wanted to add more logic into any of these different statements so this is not an ideal way to write this code instead we should do something like the following notice right away that I have pretty much no nesting the only nested level I have here is this one indentation for my kind of flat if statement block which is always what you should try to achieve when you're writing any complicated logic like this so when I come here you can see that we have the same variables but notice that what I've done is I've actually created very descriptive Boolean variables for each of my conditions so this is kind of what I was referring to when I said group conditions so I have eligible age and then I have the Boolean which is age greater than or equal to 18 or the condition age greater than or equal to 18. so rather than coming here and saying if age is greater than or equal to 18 I now have this and this is what I'll check to see if it's true or false it makes it very clean and easy for me to read what the condition is next eligible City again it's the same condition but I've kind of grouped this into a Boolean variable that makes it very readable for me to see what it is that I'm checking same with eligible income put that in a variable and then eligible education again I've put this in a variable and kind of grouped this compound condition into one main condition that I'm going to check in my if statement so now similar to what we've done with the guard Clauses I'm going to start by checking if someone is not eligible and you'll see this pattern quite often where you're going to check all of the things that shouldn't be the case and then if none of those are true then you have a valid situation right where you are eligible for the program so I say if not eligible age then print it's not eligible if not eligible City if not eligible income if not eligible education very clean very easy to understand one level I don't have a ton of nesting and then I have you are eligible for the program at the end so if none of these checks are true that means that we are eligible and we can print that out now you could even go one step further here and you could actually make a variable eligible is equal to and then you could combine all of these so take this and and take this and let's say now you didn't actually care if they weren't eligible you would just have one single if statement and you would say if eligible then we're going to print that you are eligible for the program so rather having to rather than having to write all these sorry in one line and making it a little bit messy and hard to read you put this into one single variable and now again it's very clear for you to see what's actually happening and what you're checking in this if statement so moving on to our next tip this one is super simple but something that I see people make the mistake of all the time and that is to be consistent when I say be consistent that means have a consistent styling have a consistent format and if you do something one way always do it that way I'm not even going to tell you you have to follow the official style guide or you have to do something in a certain way but if you decide to say always have a space after your comments just do that all the time you want to make sure that your code however you're going to write it is in some kind of consistent styling and that it's predictable how you should continue to write the code every organization every code base probably has their own style guide which is the consistency guide really for you to follow along with but even when you're writing Hobby projects or you're on your own get in the habit of picking some kind of style some kind of you know format to go in and just staying consistent with them doesn't have to be perfect but just do the same thing every single time otherwise your code just looks like garbage so to give you an example let's have a look at this one right here you can see that we have defined calculate sum and we're using Pascal case here where we have a capital on the first word a capital on the second word and then we're actually capitalizing our parameters and we have some kind of leading spaces here we don't have a space after the comma it just looks kind of weird right then we're using our capitalized variable names we don't have a space between the pluses that's fine now if you wanted to write coding this way that's okay but make sure you always write it in that way so that it's consistent I wouldn't advise doing it like this but hopefully you get what I'm saying so now we move down to the next function where we have multiply numbers and already our style has completely changed now we're using a camel case style where we don't have a capital on the first word we don't have leading space cases or kind of spaces between our parameters here our parameters are now not capitalized they're lowercase and then here the only thing that's consistent is that we don't have a space between our operator okay continuing we have result one we have a space on each side of our equal sign we have kind of random spaces here when we're actually putting in the parameters or the arguments we have a comment that's kind of glued to the side here doesn't have a space like you'd typically do it like this and then again we get a different style down here where there's now no space between the equal sign then we're printing stuff out we kind of have random spaces popping up here very inconsistent very kind of strange and just like cringy to read for lack of a better word so instead you want to have a consistent style like this here we go so this is actually a more kind of standard python style it it's consistent much easier to read and just immediately looks a lot better notice that we have an underscore now separating our words in our function or our variable names this is actually the correct format for python which is snake case we now have the correct spacing so we have a space after our comma we have lowercase parameter names which is what we should have we have spaces between the return spaces here between our operator and we're doing the same for both of our functions same thing here for our calls same style for our print statement same style and now for our comment we have a space after where we're commenting which is what we're supposed to have and a leading space between the pound sign and the first word or symbol of our comment very straightforward not much more to say there stay consistent all right so moving on to my last tip here this is to check your inputs and to assume whoever's using your code is an idiot now this is a bit blunt but this is the reality of programming you have to assume whoever's going to attempt to use your functions modules whatever it is you're writing is not going to do it properly and you need to give them good error messages and handle situations in which someone could use your code incorrectly so let's have a look at this example you can see that we have really nothing wrong with this code there's not a kind of deep nesting levels it's easy to read I think it's clear what's going on We're looping through our data and we're applying some kind of operation to every single element in our data now that's fine but what happens if we have no data what happens if our data is not a type integer not a type float what happens if our operation is not one of these valid operations hopefully you get where I'm going here there's all kinds of inputs I could pass to this function that would cause some kind of random exception to occur that would make it pretty much impossible for me as someone who's maybe black boxed from this function to be able to actually know what's going wrong so what I want to do instead of just writing it in this naive way where I'm assuming someone's going to pass the correct inputs is I want to write it in a more robust way where I'm actually checking all of the possible edge cases and errors that could occur now this is more verbose there is more code that goes into this but if you're writing some kind of Library function or something that's going to be used in a larger code Base by a lot of people you want to do these types of checks so notice now if I go to my process data function the first things I'm doing are I'm validating my data and I'm validating my operation then I go on to actually perform all of the logic we can talk about this section in a second but if I look at validate data first I'm making sure that my data is a list right so I need that to be a list for this function to actually operate if it's not I'm raising a value error and I'm telling the user what they did wrong data must be a list of numbers next I'm going through every single item in my data and I'm making sure that that's of type int or float so that I can actually perform an arithmetic operation on it without having some kind of error same thing I'm then raising a good error telling the user what the problem is next I have validate operation now again since we're in Python we kind of need to do these checks in a strongly typed language you wouldn't need to do this it'd be enforced for you but notice that I'm listing all of the valid operators and then I'm making sure that all of the operations or sorry the operation that's passed in is in my valid operations if it's not again I'm raising an error telling me that hey this is not one of the valid operators all right continuing here we have process data so we've already actually gone through that and then lastly we have this try accept luck now in our situation we know that this is going to be successful because we're passing valid data but typically if you're calling some kind of function and you're not sure if it's going to succeed or not you might want to wrap this in a try accept block where you're going to listen for a specific error in this case we're listening for the value error if that occurs we're probably going to do something to handle that error this part is not really kind of part of the tip but I just added it in so you could see how we might deal with handling the exception all right so that is my last tip that's all I wanted to show you in this video so this is really not overly complicated this stuff doesn't take years to learn it's really about building the habit of doing all of these individual things every time you write code you might watch a video like this and it might all make sense to you but if you don't actually implement this into your daily coding routine you're not going to see yourself kind of gaining the benefits and the quality code that you'll get from implementing these types of strategies so with that said I'm going to wrap it up here if you guys enjoyed make sure to leave a like subscribe to the channel and I will see you in the next one