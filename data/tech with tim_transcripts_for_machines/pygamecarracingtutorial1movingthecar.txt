hello everybody and welcome to a brand new tutorial series on this channel where i will be showing you how to make a car racing game in python using pygame now pygame is one of my favorite modules in python it's been a while since i've done a tutorial series using it so i kind of came up with this game right here which actually fun fact is one of the first games i ever created using a software called game maker so i kind of recreate it in python and it turns out to actually be pretty complicated to implement it makes a really good tutorial anyways let me explain who this tutorial is for and then i will demo the game to you so this tutorial is kind of designed for intermediate programmers if you are a beginner you can definitely follow along i'll try my best to explain everything as always but this is going to use quite a bit of kind of more advanced python syntax or more intermediate python syntax and so if you haven't seen object oriented programming before it might be a little bit difficult to follow along but again i will try my best to explain with that said this will probably be five videos maybe two and a half hours of content everything you need will be linked in the description in each video all of the assets you see here most of them i actually made myself and of course they're free to download from the description all of the code that i write in each video will be uploaded to github so you can look at the code per video not just the finished code and yeah with that said that's pretty much everything you need to know so let me demo the game for you and then we will start actually writing the code so the idea behind this game is we have two cars one car is kind of the player car so the red car the other one is the computer right so the green car now the objective is to simply beat the green car to the finish line at every single level now you can see right now that the green card is going quite slow but as the levels increase it increases in speed and well it gets progressively more difficult now i always like to leave my games pretty basic and then allow you guys to kind of add on to them so something you could do to make this more challenging is add obstacles you could add like i don't know oil or something on the track so that you would slip if you hit it you can do all kinds of crazy stuff what i'll be showing you in this tutorial will allow you to kind of add that stuff as you continue now you can see here we've moved on to level two notice the car will get progressively faster and then this game goes up to 10 levels the last level has the green car almost as fast as the red car and so if you beat that last level there then you win the game anyways i won't keep playing through this but this is a pretty complicated thing to actually make i know it looks trivial but to allow the car to move in this way to have this car follow a path to have a collision with a track that's kind of not square right not rectangular collision to have the finish line to increment levels to change speeds there's a lot going on here and this is a really good kind of learning experience from this tutorial anyways enough of this long introduction i apologize let's go ahead and get into the code all right so let's go ahead and get started now we have some setup steps that we need to walk through and then once we do that in this first video i'm going to show you how we can move a car around the screen i know that seems trivial but we're going to implement acceleration velocity braking and slowing down and a bunch of other stuff like actually changing the angle of the car and determining the horizontal and vertical displacement of the car based on its angle so it's actually pretty complicated and that's why this video will be you know the length it is it's probably pretty long although i haven't filmed it yet obviously and anyways before we can do all that we need to set up our environment so i'm here in visual studio code feel free to use whatever editor you want and the first thing we're going to want to do here is download all of the assets for the game so i'll just walk through them kind of one by one because i actually made almost all these assets myself so hopefully you guys are impressed by that but we have a finish line we have this grass which is kind of the background i didn't make this i found this on google images we have a green car i made this i was impressed that i made this with pixlr hopefully you guys like that too we have a gray car we have a bunch of other cars as well i just made a bunch of different colors so you guys could swap the colors if you want but i'm using green and red and then obviously we have the red car and then we have our track border i'll discuss why we need this in a second and then we have our track so notice this track kind of has some white outlines the reason for that is i took this from google images and then removed the background from it in photoshop i'm not very good at doing that so that's why it looks the way it does feel free to use any track that you want but what you will need if you use a different track is you will need the border or kind of like the yeah i guess you'd call it border i guess you could call it the walls or the outline of the track as well you'll see why we need this but this is how we're going to handle collision by using kind of just the edges to determine if our car has actually gone off of the main track and that's how we're going to bounce our car backwards so again you need the main track like this and then you would need the track border you could do it with just the border as well and then you could have some background kind of beneath the border you'll see what i mean in a minute but i'm kind of just explaining why we have these two images here then of course we have the white car again this is just so you guys can have some options when we're using the cars great so download all of those again link in the description it should download a zip folder and then you can extract extract the zip folder sorry by right clicking on it and get all of the images now that we have that what we need to do is install pygame so what you're going to do is go in your terminal or command prompt and type pip install pi game like that now for some reason this doesn't work i have two videos on this channel i'll link them in the description as well they'll walk through all of the possible ways that installing pi game could go wrong and how to fix them so i'll refer you to those two videos there for some reason you cannot install python so watch those and then come back great obviously i already have pygame installed so we are good to go now that we've done that i'm going to make a python file in fact i already have one called main.pi outside of the images directory but inside of the folder where my project is going to be all right so now that we've got all of that set up i'm inside of the main.pi file and we're going to start writing some code now the first thing i'm going to do is just import pygame because we're going to need that a few other imports we'll need as well is going to be import time and then i'm just looking at my cheat sheet here in fact if you notice me looking to the right it's because i have all of the code already written just so that i don't get lost as i'm going through this tutorial we're also going to import math we'll be using a lot of stuff from the math module now that we've done that the first thing i actually want to do is just load in all of my images the reason i'm doing that now is because we actually need some of the images to set up some other things you're going to see so the first thing i'm going to do is load in my grass so in all capitals i'm going to say grass the reason all capitals is because this is a constant this is not going to change so that's the convention i'm going to say pygame.image.load and i'm going to put the path to my image which is going to be images slash and then grass dot png like that so now i have my grass next i'm going to load my track so i'm going to say track is equal to pi game.image.load it's this can be images slash track dot png like that after we do that we will load in our track border so i'm going to say track underscore border like that is equal to pygame.image.load and this will be track hyphen border let's make sure that's the correct name looks like it is okay great and now that we have the track border we can load in the finish line so i'll just say finish is equal to that and then this will be finish dot png and then we can load in our cars so we'll say red car is equal to and then this will be red hyphen car and then we will have our green car let's make sure that's all capitals and then green car like that now of course feel free to swap these cars if you want i don't think i need to explain how to do that but you just change the name inside of here and then the corresponding variable name great so now that we've done that what i want to do is start displaying some of these images on the screen but first i need to actually set up a screen or set up what's known as kind of the display surface so what i'm going to do here is say that my window or my win in all capitals is going to be equal to pie game dot display dot set underscore mode and then the mode that i need to set inside of here is a tuple containing the width and the height of my display now the width and the height of this display i actually want to be equal to the size of my track so whatever the track size is that's how big i want my pi game display to be so what i'm going to do here say width comma height is equal to and then track dot get underscore width and then track dot get underscore height like this so a little trick in python whenever you have a surface which is what this does it loads in an image and renders it as a surface or stores it as a pi game surface you can get the width and the height of that surface by using get width and get height so we're going to get the width and the height of our track and then i'm going to say that i want a display that is of size width height and that is obviously corresponding to the size of the track now that i have set up the window i'm just going to give my window a name so i'm going to say win dot and then this will be set underscore caption like that and i'm just going to say racing game exclamation point like that okay so now that we have our windows set up we should see if we run the code here let's see no such file or directory images grass.png okay that's interesting let's see why that's happening oh it's grass.jpg well that makes sense so let's fix that let's run this now and then we should see a pie game window pops up and then it just immediately goes away because apparently it has no attribute set caption interesting i believe that's because this is actually the correct one pygame.display.set underscore caption my apologies again that's going to happen a lot i'm going to make mistakes in this video let's run this code now though and see what we get and there we go perfect so everything is working as you would expect the reason the window is not staying on the screen is because we haven't made it stay on the screen yet okay so now we have loaded in some of our images the next thing that i want to do is actually show some of them on the screen so i'm going to set up my event loop i'm going to say wow run and i'm going to make a variable here that says run equals true now the event loop in python is kind of a constant loop or in pi game story that is going to be handling all of your collision all of your movement all of your events like the user pressing a key and so the first thing you usually do is you set up this main event loop and that's what keeps the window alive right keeps it running on the screen and then as soon as you quit the window or the game ends then you would destroy the event loop and destroy the game and then the window would disappear hopefully that makes a bit of sense but we're going to say run equals true while run now inside of here i'm going to say the following for event in pygame dot event dot get this is going to give us a list of all of the events and then we can loop through them and the first event that we want to check is if the user has closed the window so if they press the x in the top right hand corner so the way we do that is we say if event dot type is equal to pi game dot quit then we're going to say run is equal to false we're going to break out of this for loop right here and then underneath this while loop i'm going to say pygame.quit now this will just close the window cleanly for us so the idea is if we press the quit button we make run equal false we exit the while loop and then well we would quit the game awesome so now that we have that if i run my code we should see that it says racing game window shows up everything's fine and then if i click x it closes there we go and that is some good progress okay so now that we have that what i want to do is set up a clock now what a clock does is make sure that our window is not going to run faster than a certain frame per second that or then a certain speed is probably what i should say so right now this while loop is going to run as quickly as our processor can handle it so if you have a really quick processor it's going to run faster than if you have a really slow processor but the thing is when i have this game i want it to run at the same speed on every single person's computer right or i want to at least have a maximum speed so one person can't be going like super fast down the track meanwhile on a slower computer they're going really slow just because their processor can't handle it so i'm going to set up a clock and this clock will fix that for us so i'm going to say clock is equal to pi game dot time and then dot clock with a capital c then up here i'm going to say fps standing for frames per second is equal to 60. right at the top of my wall loop i'm going to say clock like this dot tick and i'm going to tick by fps now what this does is make sure that this while loop cannot run faster than 60 frames per second okay so if you change this number then that will change how quickly this while loop can run hopefully that makes sense but if we run the code now we should see that it's just working the exact same we're not really going to see a difference because we're not drawing anything on the screen okay so now that we've done that i want to draw some of these images on the screen and just see the size of them and then we're going to kind of position them and redraw them just to make sure they look good so let's go inside of here and let's start by doing this pie game dot display not clear but dot update now this is a method that you need to run every single time you want what you've drawn on the screen to actually be drawn so what you can kind of do in pi game is you can draw a bunch of stuff and then as soon as you've drawn it onto the screen you update the display and then it will show all of the stuff that you've drawn so in this case i want to start by drawing this grass background and the track over top of it so let's do that we're going to say pie game actually not pie game we're going to say win which is the name of our window dot blit this is what you do when you want to draw an image onto the screen we're going to put the image we want to draw so i want to draw grass and where do i want to draw this at position 0 0. now the coordinate system for pi game is 0 0 is at the top left hand corner i guess top left would be there for you guys and then as you go down the y increases so the bottom of the screen would be the largest y value and as you go to the right the x increases so the furthest right would be the largest x value sorry so yeah the x increases as you go right perfect so let's run this now let's see if grass is showing up and notice grass is showing up now it's not quite large enough we'll make it larger in a minute but for now we can see it on the screen so now that we've done that we want to draw the track so i'm going to say window blit and then track like that and we'll draw the track at 0 0. now notice the order i've drawn this i've done the grass first and then the track second that's so the track will show up over top of the grass if you did in the other order well you would get it in the other way let's run it now and notice now we have our track and that the size of the window is exactly kind of the size of the track here right so now what we need to do is draw the finish line and we also need to increase the size of the grass and i actually want to make the track a little bit smaller because it's taking up a bit too much room on the screen for my liking so let's just draw the finish line now we'll say win dot blit like that and then we'll say finish and we'll just draw this at 0 0 as well just so we can see what it looks like and then that's the finish line that might actually be a good size but we might need to make that a bit smaller as well when we change the size of this stuff okay so now that we've done that we need to change the size of some of these images so to do that i want to write a function the reason i want to write a function is just going to make it a lot easier for us to scale our image rather than having to manually write the same thing a bunch of times so i need to go look at my cheat sheet here and we're going to write the following function define scale underscore image this is going to take in an image and a scale factor now the factor is like if i give 2 it's going to scale it by 2x if i give 0.5 it's going to shrink it by a factor of 2 or shrink it or i guess multiply it by a factor of 0.5 right whatever way you want to think of it but that's kind of how it works so now i'm going to say the size this will be the new size is going to be equal to round and then this is going to be image dot get underscore width multiplied by the factor the reason we need to round this is because we need to have integers when we scale the image we cannot have decimal values so we'll do that now let's copy this we're going to go comma and instead of get width now we're going to do get height and again we're going to multiply it by the factor so this will give us a tuple that contains the new width and the new height of our image then what we're going to do is return like this pygame dot trend form dot scale and then we're going to pass the image and we're going to pass the new size that we want this image to be let me make sure that's right looks like it is so that will allow us to scale our image now the thing is i don't really want this function kind of cluttering up my main file so what i'm going to do just to clean things up a little bit here is i'm going to make a new file called utils.pi and inside of utils.pi i'm going to put utility functions that are going to be used from inside of this main file so inside of here i'm just going to import this function and at the top of the program i'm going to say import pi game like that just because we need access to pi game in here to use this pi game function great so now rather than having this function here i'm just going to say from utils import and we will import scale underscore image like that great so now we can use scale image so the first thing i want to do is i want to scale my graph so i want to say scale image i'm going to pass this image to scale and then what do i want to scale it by let me check here and see for now we'll try with 2.5 we might want to change that but that's what we'll go with right now and then for my track i don't really want to shrink this too much but i want it to be a bit smaller so i'm just going to scale it by 0.9 okay so now we've scaled the track and the grass while we're at it i'm just going to scale the track border to be the same size as my track the reason for that is i need the border to be the same size otherwise we're going to have come some weird collision errors in the future so let's make this 0.9 and then the finish line we'll leave like that for now okay so let's run this and notice that that looks a little bit better the grass is taking up the full screen track is a bit smaller everything looks good now let's just draw a few cars and then let's scale those so let's go down here and rather than blitting the finish line let's blit a car so let's just go with red underscore car all the cars are the same size so if you scale one you can scale all of them notice the car is a little bit big i'd like that to be a bit smaller because we want to be able to fit two cars on the track kind of parallel or beside each other so let's make the car a bit smaller let's go to red car let's go scale image and that should not be in all capitals let's go scale image like that we're going to scale this to 55 so 0.55 and then we'll do the same thing here scale image and 0.55 okay now let's run it and let's look at our car and that is a much better size sweet so now we have drawn pretty much what we need to onto the screen however what i would like to do is kind of clean this up a bit we're going to notice we're going to continually be cleaning and refactoring stuff as we go through this i want to take all of the stuff related to drawing and i want to put this in a separate function just to make sure that i know where all of my drawings being done and i'm not drawing you know like 100 things inside of this wallet because that's going to get really messy really quickly so i'm going to make a function up here called draw now the reason i'm not going to put this inside of the utils function is because this is very heavy or very correlated to the game whereas the stuff inside of utils.pi i could use this in any game whereas this draw function is going to be used only in this game right so it kind of makes more sense to be in this file anyways i'm going to take a window that i want to draw stuff on and then i'm going to take images that i want to draw then inside of here i'm going to say 4 and we're going to go with img in images i'm going to say win blit and then i'm going to blit the img and we're actually going to say img comma pause and you'll see why in a second and i'm going to blend it at this position now what i'm going to do is i'm going to say my images are equal to and i'm going to make a list containing images and their positions that i want to draw them on the screen so i'm going to say grass and i want to draw this at 0 0 and then i'm going to say track and i again want to draw this at 0 0 and for now we won't draw the car we're going to draw that a bit differently so now inside of here i need to call this draw function i need to pass in my window which is a capital win and then my images like that so now if we run the code we should get the same thing we got before and we do always work okay so that is all good now we want to draw the car and we want to move the car around the screen and the thing with the car is we need it to be able to change its position we need to be able to rotate the car right so we can go left it can go right because that's how we're going to be able to turn we have to be able to turn around the track and we need to turn the heading of the car so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 160 coding interview questions on the platform and i am one of the instructors on that platform so you can be sure there are great explanations for each of those questions check them out from the link in the description and use the code tech with tim for a discount on the platform so what i'm going to do here set up a class and this class is going to handle all of that stuff for our car so i'm just going to say class and i'm actually going to make in what's known as an abstract class i'm going to say abstract car like this now let's see why we need this in a minute but the idea is we're going to have both a player car and a computer car so there's going to be a lot of stuff that's common to both of these cars so we're going to put all of the common stuff in an abstract class this is a class that's not meant to be instantiated but it's meant to act as the base class for the other two classes if you're not familiar with inheritance don't worry about it too much just understand that all of the stuff i put inside of here is going to be used by both my player car and my computer car and that's the point of this so inside of abstract car i need to go and look at my code here to remember what i put i'm going to define an init now i'm going to say define a knit like this and inside of here we're going to take self we're going to take a x and a y um actually no we don't want an x y we're going to go with max velocity as our first parameter and as our second parameter we're going to go with the rotation underscore velocity so the reason i want both of these is because i want to know the maximum speed my car can go so the maximum velocity and i also want to know how quickly my car can rotate so it's rotation velocity and then inside of here i'm going to say self dot max underscore val is equal to max underscore val i'm going to say self.vel equals zero the reason why the starting velocity is zero is because your car's not moving when it starts it has a velocity of zero and i'm going to say self dot rotation velocity is equal to rotation val i'm going to say self.angle is equal to zero and the point of this is that our car will start at an angle of zero and then when we change the angle that will change the way that the car is rotating okay so now that we have that the first thing i want to handle is just rotating the car so i'm going to go inside of here and i'm going to say define rotate like that i'm going to take a self a left is equal to false and a right is equal to false now you're going to pass left equals true if you want to rotate to the left and right equals true if you want to rotate to the right now inside of here all i need to do is say if left i'm going to say self dot angle and then this is going to be plus equal and then self dot rotation velocity like that and then if we are moving to the right it's going to be the opposite so we're going to say left right then self dot angle minus equals self dot rotation val and now that i'm thinking about it when i'm going to the right my angle is increasing when i'm going to the left my angle is decreasing so i actually think it might need to be the other way around um or maybe i'm crazy here you know we'll leave it like this for now and if for some reason we're rotating in the inverse direction then we'll change this i think this is right i'm just confusing myself okay so now we have rotate i'm just looking at anything else we might need here for now that actually looks good so what we can do is call the rotate method and then depending on if we're going left or right we'll rotate to the left or right the way we rotate is by changing the angle however we need to actually rotate the car right we can change the angle in this class but that's not going to change the position of the car image so what we need to do is find a way to actually draw the car image rotated so we need to know how to rotate the image in pygame now this is a little bit complicated but i'm going to go inside of utils.pi and i'm going to write a function that can take an image and return to a rotated image based on an angle so let's do that we're going to say define blit underscore rotate underscore center and what this is going to take is a surface this is where we want to draw the uh actually let's call this wind this is where we want to draw the rotated image then we're going to say the image we're going to say the top underscore left and we're going to say the angle okay so i'm just going to write this function and i'll explain a little bit about what's going on after but i will note that rotating an image in pi game is not trivial if you're going to be rotating an image you can just normally rotate it but if you do that you're going to get all kinds of distortions and the reason for that is the rectangle that contains the image so i should say every single image in pi game is really a rectangle and then the actual image is inside of that rectangle so even if it doesn't look like a rectangle there is a rectangle that's containing the image so when you rotate the image you're also rotating the rectangle and based on the position that you're rotating the rectangle around you can get really kind of weird like you know morphing and distortions occurring with the image so that's why we need whatever we're doing here so i'm going to say rotated image is equal to pi game and i believe this is dot transform it is dot transform dot rotate we're going to pass the image and the angle that we want to rotate now what this will do is rotate the image around the top left hand corner now that's no good we don't want to rotate the image around the top left hand corner because that's going to lead to us kind of having like a circle around that stationary point instead we want to rotate around the center of the image so the way we're going to do that is we're going to say new rectangle is equal to rotated image like this and this is going to be dot get underscore rect and we're going to say that the center of this rect is equal to image dot and then get underscore rect like this and we're going to say that the top left so top left like that is equal to the top underscore left and then inside of here we're going to say dot center okay so what's happening here is pretty complicated but i will try my best to briefly explain it i have to admit i did take this code from stack overflow i didn't come up with this on my own anyways point being we rotate the original image when we rotate this image i'll show you in a second we get all kinds of weird distortions and the actual x and y of the image is going to change based on how it's rotating around the top left hand corner so then we have our new rectangle so we say the new rectangle is equal to the rotated image.getrectangle the point of this is we want to remove the offset so we want to make it so that we rotate the image without changing the x and y position of the image on the screen that's what this whole line is trying to do for us so we're saying let's get a rectangle from the new rect but let's make its center equal to the image the original image its rectangle at the top left hand corner position then whatever the center of that is so we're getting the original image we're saying the top left hand corner of that original image is equal to whatever its x and y position is because the image doesn't know its x and y position so we need to set the top left hand corner explicitly to be equal to that then we're saying let's get the center of that and wherever that center is the new image needs to still be on that center so that way we're only rotating from the center of the image not from the top left but we had to originally rotate from the top left because that's the only way to rotate an image in pi game hopefully that makes a little bit of sense and then what we're going to do is say this we're going to say win dot blit and we're going to blit the rotated image and we're going to do this at the new rect.top left so the whole idea of this new rectangle is to find the correct x and y position of the new rectangle such that it's going to be in the same position as it was before but now it's rotated all right a lot of complicated code there but there you go that will blit it and rotate it in the center for us so let's go to main.pi now and let's define a method inside of abstractcar that can draw the car for us we're going to say define draw and then we're going to take in self and we're going to take in a window all we're going to do is the following we're going to say first we need to import this i believe this was blit underscore rotate center yes it was so we're just going to say inside of here blit underscore rotate center and then we're going to pass self dot img actually we're going to pass wind sorry and self.img which we've yet to define which we'll do now so we're going to go to abstract car we're going to say self dot img actually not up here what am i doing sorry we're going to do inside of here we're going to say self.img is equal to and then here i'm going to say img is equal to and we are just going to reference one of the images that we want for this car so in this case i want the red underscore car i'm going to say self.img is equal to self.img i understand this a little bit weird what we're doing here is saying the following we're going to store inside of the class the image that should be used for this class so in this case i want it to be a red car then i say the self.image so the image specific to this instance is equal to self.img so whatever the image is here and then inside of here we then reference that image so that we can rotate it and we'll blend it in the center okay that's all great however i need to first make a way to actually rotate my car before we can see if this is working so let's let's actually just draw the car first let's make a car i'm going to say car is equal to and first we should create a concrete instance of this class so i'm going to say class i'm going to go with player car like that now inside of here all i'm going to do is just copy this i'm going to remove it from abstract car because now we have this class and that's actually all i need inside of player car but i need to make sure i inherit from abstract car so let me just explain this quickly in case this is a bit confusing we have the abstract car class this defines a bunch of functionality when we put it inside of the brackets like this we're saying we're going to use everything from inside of here so imagine all of this is just copy and pasted right inside of player car the only thing we're doing differently here is we're defining image inside of here and then it will be used inside of the initialization when we instantiate this car class okay that was a lot of big words but let's continue so i'm going to go here and say car actually with playerunderscore car is equal to player car like that now we need to pass to this a maximum velocity and a rotation velocity so for now i'm going to go with 4 4 feel free to change that to make it slower or faster obviously the higher number the faster it will go and now let's just draw the car so inside of draw i'm now going to pass my player car so that means we need to now take player underscore car and now we're going to say player underscore car dot draw and then inside of here now i'm going to take my pie game.display.update i'm just going to put this right inside of the draw function so that everything related to drawing is contained in one place okay so that should draw our car let's see if this is working and required one uh required missing one required position argument win okay playercard.draw that would be right here so we just need to make sure we pass our window to the draw method so let's run this now and we got an error blit rotate center missing two required positional arguments top left and angle of course i forgot those let's fix that so we need to pass the top left hand position now the top left hand position is actually going to be equal to the x and the y of the car which we haven't defined yet so we're going to do that now we're going to say self.x self.y is equal to self.start underscore position pause like that sorry and then inside of here we're going to say start underscore pause is equal to and then we're going to define what the starting position should be so i'm just going to say actually let me just go look at my other code and see where i started it before i was starting it at 180. uh was that right let's see 180 and 200 okay so go 180 and 200. okay so now our self and x self.x and self.y is equal to the starting position which we've defined here and inside of here we now need to pass that so we're going to say self dot x self dot y and then we want to pass the angle and the angle is just going to be self dot angle like that okay let's run this now and let's see what we get okay so there we go our car is now drawn here now let's just see if changing the angle actually does anything so let's go and make the angle 90. let's see where we go now notice we are facing left perfect that's what we would expect okay now let's make the angle 180 we should be upside down now and there we go so we are getting the car in the correct position sweet so let's make that back to zero and now let's make it so we can change the angle based on pressing a key so we're going to go and i'm going to write the following inside of my main event loop remember anything in the event loop is kind of handling events handling collision handling all of those types of things so this is where we would put you know key presses and moving the car so i'm going to say keys is equal to pi game dot key dot get underscore pressed like that and then what i want to do is check if we pressed a specific key so i'm going to say if keys and then i'm going to go highgame.k notice that's a capital underscore and then a so i want to use wasd to move my car so this would be left if i'm pressing on the a key so if i'm doing that then i want to say player underscore car dot rotate left is equal to true okay let's copy this and then let's go here and say if keys pi game k underscore d so this would be right then i want to say right is equal to true okay so that should now allow us to actually rotate our car left and right by clicking on a and d if you're wondering how you find other keys you can look them up there's a bunch of i guess these are called constants in pi game but you also can just do k underscore and then whatever the lowercase letter is of the key that you want if you want like a spacebar or something then you would go all capitals and you would go space same thing with like shift or enter or any of those keys if it's not just a standard character then it's usually in all capitals okay let's run this though and let's see if it works and now notice if i go left and right i can rotate my car and the speed at which i'm rotating my car is defined by that rotation velocity so you guys can mess around with that but if you change the rotation velocity you'll notice you're rotating faster or slower okay that's great so we can now rotate the car off to a good start that's actually a pretty difficult thing to do so congratulate yourselves if you made it through that now let's see how we can move the car forward so we have our self.velocity we have the maximum velocity we have the rotation velocity we have the angle the next thing we need is the acceleration because cars don't just instantly reach their top speed they take a few seconds to get up to speed when you slam on the gas you are accelerating you're adding more force to the tires you're going faster and then eventually you re reach kind of like a terminal velocity which is what we're going to get to here so i'm going to say self dot acceleration did i spell that correctly looks like i did is equal to 0.1 so this means every time that we are pressing down on i guess it's going to be the w key to go forward we're going to increase the velocity of our car by 0.1 let's call it pixels per second that's maybe the unit that we're going at if you want to accelerate slower then make this 0.05 right or if you want to go faster make it something like 0.2 anyways we have that now i want to define a method and i want to call this move underscore forward okay so define move forward and inside of here i'm going to take self now all this is going to do is it's going to increase the velocity of my car based on the acceleration and if i'm already at the maximum velocity it just won't do anything but it will move me forward so inside of here i'm going to say self.vel is equal to i guess this is going to be the minimum uh yeah the minimum of self.bell plus self.acceleration and self.max underscore velocity so what this is doing is saying okay well if self.vel is already at the maximum and we add self.acceleration we don't want to go faster than the maximum so we put self. max val here so if this is greater than this we just default to the maximum velocity if it's not though then we will increase the speed of the car by the acceleration remember the velocity starts at zero okay so we'll increase our velocity now that's great but we actually want to move the car forward so to do that i'm going to make a new method called move i'm going to say define move like this and inside of here after i increase the velocity i'm going to say self.move now the thing is inside of move i need to actually calculate what direction i'm going to move my car because if i'm angled to the right or i'm angle to the left then i need to move in that appropriate direction i can't just go up or go right or go left so i'm going to start by just showing you how we move in one direction so i guess one plane or one dimension and then i will show you how we can move in multiple dimensions so move x and y based on the direction of our car that's going to involve a little bit of trigonometry anyways inside of here i am going to say self.x plus equals self.velocity so we're just going to move to the right based on whatever our velocity is that's all we're going to do to start right now then we'll get more complex okay so now that we've done that we want to implement another key press to move the car forward so i'm going to go here and say if keys pie game dot key underscored w then player card dot move underscore forward like that so now as we press down the w key we should increase speed as soon as we get to the top speed we'll stay at that speed and we'll move forward now remember we're not decreasing the velocity here so as soon as we hit the maximum speed we'll stay at that maximum speed even if we let go of the w key we'll keep going at the same speed i'll show you how we fix that in a second but just wanted to note that as we got in here okay so i've loaded now notice when i press w i move over to the right like that now i'm going to stop as soon as i let go of the key but when i press the key again i'll be moving at the maximum speed so that's it that's how you move one direction right we just incremented the x of the car and that moved our car over okay that's great but we ideally would like to be able to move in two dimensions so this is where i need to pull out the paint program and start showing you some trigonometry okay so i'm here in paint and i'm gonna start describing the trigonometry that we're gonna use to actually move in the direction that we're facing this is not trivial this is why i'm in paint now please go easy on me i am using my mouse so this is going to be really rough but it will give you kind of you know what you need it would give you the basic visualization of this so the idea is we have some car let's say this is our car now if he's just moving this way all we have to do is move the y direction right if he's facing completely up then we can just move that direction if he's facing completely to the right or completely to the left any of these kind of polar coordinates here then we can just go in those directions right it's very easy we can just decrement the x increment the x decrement the y increment the y however what happens if we're moving on an angle like this well it is not so simple now to actually figure out how much we need to move this guy by because we can't just move by the x and we can't just move by the y we need to move by both of them we need to go some amount up right and some amount to the right now first of all what are those amounts well if you said the amount is equal to whatever the velocity of the car is that's incorrect the reason for that is if my car has the heading like this like it's pointing this direction then the velocity that we have is in that direction right so let's say my velocity is 4. well if that's the case then this is 4. that does not mean that my x is 4 and my y is 4 in fact i need to use this total velocity to determine how much x and how much y i need to go by so that my total velocity accumulates 4 because when i'm moving in two directions i'm moving well two ways and so i need to sum the velocities but it's not it's not as easy as just adding them together to determine what the total velocity is going to be now in this way we're going to go in the opposite direction we're going to say the following we're going to say okay well this is like a right triangle right we want to go some direction x some direction y so let's say x and y like that and then this is our total velocity right here now it turns out that we know this angle and if we know this angle we can actually figure out what y and what x are by using trigonometry so there's a few very popular equations the way i remember them is the following we have so which is soh and then we have uh cap cah like this so cat and then we have toa as well toa now o stands for opposite now this is relative to the angle that you're talking about so if i'm talking about this angle right here the opposite side is y so oh those are all sides okay that's side lengths is what i'm talking about and s stands for sine c stands for cosine and t stands for tangent anyways i have my angle so the opposite side is this because that's kind of what the angle is like facing it's what it's looking at and the adjacent side is this it's x because that's what's beside the angle that's the way you can think of it so if i want to solve for y here keep in mind i know my angle and i know my velocity then what i need to do is the following i need to set up my equation so i'm going to say that the sine of theta is equal to my opposite over my hypotenuse now we know the angle and we know the hypotenuse so h is really v which is my velocity now let's just plug in 4 because we know the velocity is going to be 4. we'll say the maximum velocity is 4 right so now we're solving for o and o is really equal to y right because that's the opposite side and so what we do is we say that the sine of theta which we can calculate we just take the sine of the angle multiplied by 4 because we need to take the division and multiply it on this side is equal to y so the sine of theta multiplied by our velocity gives us our displacement in y and then if we go to cosine here it's just going to be the other way around we're just going to take the cosine and we're going to multiply that by our velocity and that is going to give us how much we have for displacement in x so just basic trigonometry but i wanted to walk you through that all right so hopefully that is a decent enough explanation what we actually do in the code might differ a tiny bit just because of a few factors but this is the general idea of how we can solve kind of two components based on one velocity and an angle we're calculating the x and the y component that's what they're known as because this is we can kind of call this a vector right like this line right here if you know anything about physics you would call this a vector because we have a angle so we have a direction and we have a velocity or a magnitude and then we want to split it into its two components x and y okay so let's get rid of that and let's implement this so let's go to our move method and now rather than moving just by the velocity we're going to do that kind of fancy equation that we just did so the first thing i need to do is i need to convert my angle into radians this is because we use radians in most computer math radians is just kind of a special way of calculating angles in case you're unfamiliar 360 is equal to 2 pi in radians and 180 is equal to pi okay you don't really need to know that but just figured i'd let you know so we're just going to say math.radians and then self.angle like that notice our angle is in degrees because that's how we want to rotate it but then when we actually are looking for the components we need it in radians now let's calculate the vertical displacement or the vertical velocity so we're going to say vertical is equal to and then this is going to be math dot and i actually think this is going to be cosine for this math.cosine of radians multiplied by self dot velocity and then we are going to say that the horizontal is equal to math.sine of radians multiplied by self.bell then i'm going to say self.y minus equals vertical and self.x minus equals horizontal now you can switch this to the plus side and watch what happens but the reason we we need minus is because these are actually going to return to us in a lot of instances negative values and based on the way that we are angling our car and just kind of some other things we've done that i don't really want to get into too much we need to subtract rather than adding now if we're subtracting that means if this value is positive we're going to the left right and if we are uh and sorry and we're going up so going to the left and up which is the way that our angle is directing so that makes sense and then if this value is negative that means that we're going to be going to the right and we're going to be going down i mean respective to x and y anyways let's just run our code here and see if this works and so let's do this and now notice i can move in whatever direction my car is facing there you go so we are now moving our car which i'm going to call a success now the only thing we need to do here is we need to make it so our car slows down because as you saw let me actually run this again my car just instantly stops right if i let go of the key it just instantly stops that's not realistic our car is going to have momentum it's going to be moving and it's going to take some friction to slow the car down so we need some way to actually slow the car down when we're not pressing on the key which is what we're going to do now so we're going to implement a method here on our car we're going to call this reduce underscore speed and we're just going to take in self now what we're going to do is reduce our speed by half of our acceleration that is because we can accelerate faster than we can slow down at least that's the logic that i'm going to use i'm not sure if that actually applies in the real world but that's kind of what we're going to do here also just so that we don't slow down super super quick because we can accelerate really quick anyways you'll see how this works as i get into this method now i just need to look at where i have this in my other code so that i don't mess this up too bad okay so we have reduce speed what we're going to do inside of here is say self.bell is equal to the maximum of self dot vel minus self dot acceleration over two and then this is going to be zero now the reason we have this is because if this value for some reason is negative we don't want to be moving backwards we just want to stop and so that's why we have the zero right here so we change the velocity and then since we have this move method already set up we can just say self.move so now when we reduce the speed all that's happening is we're reducing the velocity by half of the acceleration and then we're just going to move and since this is set up it'll just work it's just going to move us slower in whatever direction we're facing and while we're slowing down if we're not on the gas we can still turn which is a very important thing to keep in mind okay so now we have reduced speed so what we're going to do is go inside of here and we're just going to do something i'm going to say moved is equal to false and inside of here i'm going to say moved is equal to true now the point of this is that if we are pressing the w key we don't want to reduce the speed but if we let go of the w speed or w speed the w key we do want to reduce the speed so now i'm going to say if not moved so if i didn't press forward on the gas reduce my speed so i'm just going to say not self it will go with player underscore car and this will be dot reduce underscore speed so now you should see that when i'm not pressing on the gas and not pressing on the w key we should reduce the speed so let's run this code and let's see what we get so now notice that we slow down right and it takes a second to slow down i'm pressing the key i let go of the key and we continue going and then we slow down until eventually we stop all right so with that said this long video is now over if you guys had the patience to sit through all of this give yourself a pat on the back and not expect it to be this long but there is a lot of stuff that goes into moving a car in this fashion in the next video we're going to set up the actual collision with the track we're going to make it so you bounce off of the track we'll then add a finish line and we'll make it so that you can hit the finish line and collide with the fission line so we'll just be doing collision pretty much in the next tutorial then after that we will implement the computer car so moving around a path which is also not that easy to do and then i guess we'll do four videos for this series and in the last video we'll about all of the nice stuff like the text showing the kind of the stats the level system all of that fun stuff anyways if you guys enjoyed make sure to leave a like subscribe the channel and i will see you in the next one