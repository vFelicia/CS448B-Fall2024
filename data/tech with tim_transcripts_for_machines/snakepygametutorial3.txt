anyone who might have been confused okay so now for drawing it's a little bit harder just because of what I mentioned as well is the fact that we need to figure out the distance between each x value in each Y value so when we're drawing something in PI game it draws in the top left hand corner of the object so if we draw a cube we're drawing that in the top left so we need to figure out what that x and y values going to be for each cube when we're drawing to the screen so I'm just gonna call this gap here that is gonna be our distance anyway the same thing self W myself thought rose and we're gonna change W and Rose down in our program later but week actually just type it in now like this with 500 and 200 just so we have that set okay so self dot W answer / self dot rose again that's the same thing we did when we were drunk the grid to figure out the distance between our x and y values okay we're gonna say I is equal to self thought pause it's gonna save us a bit of typing in our function here or in our method or just say J duck self dot pause one so we're just saying I which stands for row J stands for column like a classic like convention for it so that we don't have to keep typing pause zero plus one when we move okay so the next one next thing you need to do is now draw rectangle you're gonna say pygame dot draw dot rect like this and then we need a surface we need to color so self uh color and then we need a rect and here is a little bit of math I'm just gonna type it I'll go through exactly what it goes J else by by disciplines one just supposed to just supposed to okay so the reason I have these little plus ones and these minus 2's here is just so you can still see the grid when we draw the rectangle um because if we were to draw with exactly the dimensions of this distance then what would end up happening is we'd cover the white lines of the grid and it just looks kind of weird if you can't see the white lines so that's why I have plus one added here and just so we're drawn inside of the circle or inside of the square a little bit and you'll see that in a second so what I'm simply doing is I'm multiplying my eye value which is going to be my current like row Collin by the distance that we need to get to the next one and then same thing for Jay and then this will add ones twos is just to make sure that we stay inside so a quick example if you don't understand is say we're in a position zero zero so RI is zero and our jesu we're gonna say I multiplied by distance let's say distance is like 40 okay so zero multiplied by 4000 multiplied by 40 0 so our position is zero zero and that's correct because if we're drawing in the top left hand corner here and we're in position zero zero then that's where we to draw again if you go something like 0 10 and you are and you move down I guess so 10 you moving wide down I'm gonna say 0 distance 0 and you're gonna say 10 x distance let's say it's 40 then we move to that correct position down the screen so this is rectangle X Y width height okay make sense now the next thing we need to do is need to draw the eyes now you can skip this part if you want I'm just gonna copy it in because it's a little bit of math to make it them like perfectly aligned on the square but yeah so we said if eyes and we're saying our center is equal to distance modulus 2 because that's gonna be the center obviously or much sort of saying / it's gonna be the middle of our cube and we're saying the radius that's how big the eye radius is gonna be and then we go through a little bit of math here so circle middle is gonna be high x distance plus center radius and then we're finding out the X and this is just like a random exit I'm setting by just putting it 8 pixels up like every time because I don't want to calculate the X I don't feel like doing that and I'm drawing two circles based on circle middle one circle middle and then the radius and a color of black or color of white actually sir or no that's black I'm confused alright anyways with all of that being said and done and you guys probably pretty confused right now let's just run and see if anything's actually happening and you can see we have a cube in the middle of the screen yay so that's all we've done with all this coding uhhuh so far is drawing a cube so actually not quite because we still all we have to do now simply to start having that cube move and seeing our key presses work is just do a little bit in the main loop so let's move down to the no and have a look here what we need to do okay so what I'm gonna do is I'm simply just gonna call a stop move which is our snake object every time this main loop runs and what this will allow us to do is I want to call us before I read your window is it's gonna go up to that method and snake it's gonna check every time that we run the loop if a key has been pressed if it has we're gonna move accordingly and remember that in this move loop here it moves all of the objects for us so it moves all those cube objects and then we're just drawing the grid we're drawing everything in this redraw function so it'll just display that and update that to the screen so let's see here and we got air to put object is not callable selftaught pause ero put something there next all right one second guys oh it's because I used cook okay so apparently I am an idiot and I forgot to add an equal sign here so the issue was simply that this looked something like this then I changed it to square brackets when all I needed to do was put an equal sign like this and now we should be up and working so to reiterate the line here that the issue is that you guys probably saw this when I coded it to be honest is in move in cube it's near the top of the program all you have to do is change this add an equal sign between this like the bracket and the pulse so now that we run it we can see that we have a moving object and that we can move up down left right etc so on and so forth like that okay so play around with that for a second and now we'll get into adding cubes and we're actually almost done we just need to add feet that add cube function message box a little bit in the main loop and that will be finished okay so what we're gonna do now is that's all great we're moving around but we need to add stuff to our cube right like we need to progress the game so to do this we are going to generate what I want to call a random snack that we're gonna place on the screen that our snake can't eat so the way that we do this I'm just gonna say positions equals item dot body and this item it shouldn't be items should be item it's just gonna be a snake object I don't know why I'm calling an item but that's what I'm calling it and we're simply just gonna set like a new list equal to on that list so on okay it's now we're going to say well tree capital T we're gonna do x equals random dot R and range if you have an imported random yet make sure you do that and y equals random dot R and range rows and rows again should be global so let's make sure that this works global rows like that and after this we're going to say if I don't know how I just type that but the length of and I'm doing something fancy here and I'll explain what this does in a second okay so I know I just typed this stuff that probably makes absolutely no sense you guys if you haven't been using Python for a little bit but pretty much what this is gonna do is we're gonna get a list of a filtered list and we're gonna see if any of the positions are the same as like the current position of the snake pretty well so what we're doing is we're saying that we want to make sure that we're not gonna put a snack on top of the snake because if we have a really long snake the chance of that happens actually somewhat high and I didn't do this when I first coated the game so what happened is when you have your snake moving around the screen all of a sudden the snack would pop up but it's like on the tail of the snake which you don't want so what this is doing and just type it out you don't really have to understand it is we're saying this this means a function I said and we're just checking if this Z position is equal to X Y so if it's equal to X Y which is the position we just generated here by getting two random numbers so x and y then we're gonna have to do this again so we say continue and else we break like that and then I'm just got simply gonna return in the tupple or a to go where you want to call it XY okay so this is confusing but um you can do this in like a much longer way with the for loop where you pretty much loop through every position in this list you check it against X&Y you see if it's the same if it's the same then do this loop again otherwise you break any return XY that's all we're doing in there to generate a random snack and messagebox gonna leave that and in here now what we're good okay so now that I've created this this random snack function what I need to do is I need to use it so I'm just gonna create a new object and you're gonna call this snack and it's gonna be equal to another cube right because we want to have the same functionality we want to draw it possibly move it around right so we're just gonna create a new cube object we're gonna give it a position of a random snack which is gonna be something like this random snack and then random snack I believe oh it takes a row and an item so what we're going to do is we're going to give it row or rows and we'll just give it our item which is gonna be s and then after that what else do we need for cube