foreign I think we can all agree that habits are extremely important and I'd actually argue that they're one of if not the most important factors in defining success now that could be success in life success in programming some kind of field sport whatever it is that you do what I find with myself is that what I'm able to consistently do without having to think about a ton is really what leads me to longer term success so with that said I wanted to make a video here an outline for you what I think are the habits of god tier programmers Now by no means am I calling myself a God to your programmer a lot of the things I'm taking here are things that I've seen from programmers that I've worked with which are much more experienced than myself and I've kind of noticed these things and tried to work on them on my own because I've seen hey programmers that are way better than me always do this this this and this if I want to get to their level chances are I need to build similar habits to what they have so with that said let's get into this video and talk about the habits of God to your programmers after a quick word from our sponsor before we get started I need to thank Pi scripter for sponsoring this video pyscripter is a free and open source python integrated development environment with all the features you'd expect in a modern IDE it's also natively compiled for Windows to use minimal memory with maximum performance Pi scripter comes with features designed to enable smooth and efficient Python Programming these features include a syntax highlighting editor an integrated python interpreter full python debugging with support for remote debugging integrated unit testing and integration for python tools like pilint tabnanny and profile and so much more Pi scripter users can run or debug files from memory and use a code editor todo list find and replace an integrated regular expression testing Embarcadero also offers free GUI libraries for python that are integrated into Pi scripter for example their Delphi fmx or python GUI Library supports multiple platforms including Android this package is used to build crossplatform GUI applications for all windows Mac Linux and Android Target platforms find more info from their free ebook and download PI scripter from the link in the description alright so let's go ahead and dive into it now as I get into these different habits I think it's a good exercise to ask yourself do I do this is this routine is this a habit I have and if it's not to genuinely challenge yourself and say would I be a better and more effective programmer if I adopted this habit I'll let you decide that for yourself but let's get into habit number one so habit number one is designing and planning your code before you write any now this is something that seems really straightforward it seems like it should be easy to do but I can tell you I've known about this habit and knowing this is an important thing to do for many years yet it's still not something that I consistently do before I write every piece of code some of it might come down to laziness maybe arrogance thinking I don't need to write a plan or a design but I can promise you that every great programmer I've ever seen even if it's minimal always comes up with some kind of design or Plan before they jump into the code and start writing now there's a ton of different reasons for this but the main one is that you want to have a good picture of what it is that you're actually building what you're doing and kind of the task you're accomplishing before you just go and start writing a bunch of code the idea here is that if you dive in and write a bunch of code it's possible you could come up with a good solution but in a lot of cases you're not going to fully think through the problem before you start writing and later down the road you're going to realize hey I've made a mistake here this isn't scalable it's not flexible enough I don't know how to test this or how to document this and you have to go and change a bunch of code or rewrite code because of your lack of thinking and planning kind of at the starting process so again really a difficult Habit to pick up because a lot of people want to just get in there they want to start coding they want to feel like they're getting something done but it will save you a drastic amount of time to come up with a thorough plan or some kind of design especially if you're building a more complicated system but with that said the only way to pick up this habit is to do this no matter what type of code you're writing even if it's a simple function even if it's a really small program even if it's something you've done a hundred times before it's still a habit that you need to build and you need to say okay what is my plan what are the steps I'm going to go through maybe you need to draw some kind of uml diagram again depends on the complexity of what it is that you're making but even if you're a beginner programmer right now practice this habit by before you starting to code spending five minutes listing out everything you need to do coming up with just a general outline or kind of the big picture of the program that you're building maybe breaking it down into smaller tasks and just thinking through the entire process before you go in there and start writing code so moving on to Habit number two I have testing now obviously testing is important you need to have confidence in your code you need to make sure it's doing what it's supposed to do if you're working for any kind of large company you have a critical feature or really you just want to make sure that your code is consistently working and that it's not going to break in future changes you need to be writing automated tests there's all different kinds of tests you can be writing but this needs to be a habit and something that you do consistently now even though I know this extremely well and I tell you guys on the channel constantly to test your code this is still something that oftentimes I end up not doing it's a habit that I've really struggled to build and that's because a lot of times I'm lazy I don't want to write a test case it's brutal oftentimes to have to write your tests and it's just something that a lot of times I like to skip over and I'll say oh I'll do it later now that's not good that's something I need to work on but what I've noticed kind of forces me to write the tests or helps me build this habit is to write them before I write my code so actually write best cases before I go into building a solution or I'm constantly thinking about during the design and planning phase how am I going to test my code before I start writing it by doing that I make my job a lot easier when it comes to eventually writing the test cases because I've thought about how am I going to segment this code out how am I going to test this and a lot of times I end up reducing the complexity of my code to make sure I'm going to be able to test it later on so again a difficult Habit to pick up something that's really annoying I sympathize with you no one wants to write tests but you absolutely need to do it it gives you confidence in your code and it's a habit that I'm continually working on and that you should probably be working on as well moving on to step number three we have documentation again this is one of these things that no one likes to do it's a pain it's really annoying us developers usually don't want to be writing out full sentences or even writing comments but you absolutely need to do it it saves a ton of time for other developers and for yourself especially if you're coming back to the code base after a long period of time some examples of things that I like to document are installation steps common problems or debugging a lot of times I run into some kind of weird error and I usually like to document how I fix that so that if I ever run into it again I have the solution or if another developer runs into it they can have a look at that obviously documenting your code so that could be writing comments doc strings even just read me files kind of explaining the general idea of what's going on and then even how to contribute to a repository or how to kind of change the code or add things there's a lot of other stuff you could potentially be documenting all of these things are a pain there's stuff that a lot of times people leave until the very last minute but there are very important to be doing and they're going to save you and your team a significant amount of time so another Habit to think about are you documenting your code do you write comments do you write readme files are you explaining installation steps common errors how to contribute to your code base even if it's simple I think you should get in the habit of doing that and one way you can kind of practice doing that is every time you upload a GitHub repository you can write kind of some instructions for running the code how to get stuff set up even maybe a little paragraph about how you've designed the code or where some of the different parts of the code lives I understand it might not be extremely useful on a smaller project but is a good habit to get in the practice of doing because if you're working on larger code bases or working with a ton of different people you're going to need documentation all right moving on to step number four I have automation now when I say automation this can be stuff like setting up your environment so that you know all of your keyboard shortcuts it can be automating testing or automating deployments or automating just like setting up a certain folder structure or different files in your code base the general idea here is that all of these really good programmers that I've seen don't waste time doing repetitive stuff they're programmers after all and they always like to automate pretty much everything they possibly can it's actually a little bit ridiculous some of the automation stuff that I've seen from them but automating adding stuff to their calendar automating uh doing testing automating release notes automating literally anything you can possibly think of even if it's like a 5 or 10 second task if they know they're going to be doing that a ton of times they'll spend the hour two hours whatever it is to write a little script that's going to automate that away so just something to keep in mind here these really good programmers the reason why they can oftentimes get a ton of stuff done is is because they spend the time up front to automate set up their environment and make themselves as efficient as humanly possible so they can spend a majority of their time writing code or writing tests or whatever it is they need to do rather than performing these kind of monotonous and repetitive tasks so moving on to Habit number five I have writing clean code now the point here is that you should get in the habit as early as possible of writing clean and quality code no matter what you're coding now that's what I've noticed with these kind of god tier really experienced programmers it doesn't matter if they're working on a hobby project on a nonimportant feature on something that's critically important they always have the same code quality because they're so used to writing high quality clean code that they do it no matter what it's like second nature they don't have to think about writing clean code that's just how they code because they've been doing it for so long so I think you need to ask yourself here do I always write the best quality code that I can am I sometimes rushed am I sometimes you know skipping out on variable names or functions or dividing my code and making it simpler and if you are you might just want to consider kind of the repercussions of doing that that you're not building that habit of consistently writing quality code and you actually have to think more carefully okay how do I write my code and cut away cleaner manner once you get in the habit of just always doing that it doesn't become difficult anymore becomes simple you're just always writing code in a quality way I know this was a bit repetitive but I just want to drive the point home that these guys that I've seen that are really really good programmers they don't think about writing clean code that's just how they code because they've been doing it for so long so with all that said I think I'm going to start wrapping up the video here if you're interested in getting better at programming you can check out my course programmingexpert.io if you want to learn blockchain and web3 development then check out my new course blockchain expert they'll both be linked in the description regardless I wanted to make this video to try to give you some inspiration and information about how to be a better programmer hopefully you take this to hard and start working on some of these habits I know that I am doing that consistently and I'm slowly improving in all these areas and seeing how much better of a programmer I can really be that set all ended here I hope you guys enjoyed if you did make sure leave a like subscribe to the channel and I will see you in the next one foreign