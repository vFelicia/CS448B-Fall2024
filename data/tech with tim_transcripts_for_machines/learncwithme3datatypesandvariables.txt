hello everybody and welcome to video three in the c plus plus tutorial for beginners now in this video we're going to be talking about variables and data types these are extremely important and this is where we'll actually start learning something new right because in the previous videos i kind of just showed you the same thing again with more detailed explanation here we're actually going to learn about how we can create variables how we can store values what the different types of variables mean and very foundational and important topics we need to know about c plus or any typed language in general so with that said let's dive into the video so the first thing that i'm going to start discussing here is something called data types now data types are extremely important in any programming language but especially important in a language like c plus which is statically and strongly typed now to really understand why data types are important we need to talk about variables which we will do in a minute but just like in math in programming we can have variables that store values so for example we may have a variable called x it may store the value 2. now if you saw an equation something like 4x plus 2 you would probably be able to tell me that this equals 10 because you know the value of x is 2. now x is what we consider a variable in this algebraic equation right and it has the value 2. now the value that is stored by a variable has a certain type in this case this value is just a number right the type of this value is a number we might call it an integer because it's a whole number we might call it a floating point decimal if it had say something like 2.9 or a floating point number you get the idea now in programming we have all these different data types these data types are used in different ways and they can be stored in a variable so variables can store different types and there's all kinds of different types in c plus and in any programming language now the five main data types i want to show you right here are the kind of foundational really important ones in c plus plus and they are the phone we have an int we have a float we have a bool we have a string and oops we have a character or a char these are the five most important data types that you need to understand in c plus now again when i'm saying data type i'm really just talking about the type of data the type of information that something may store or that we may use now an int stands for integer and an int is any whole number that does not contain a decimal so it doesn't matter whether it's positive negative or zero any whole number that does not contain a decimal point in it isn't it so the number seven isn't it the number 98 is an end the number negative nine isn't it number negative nine seven five seven six five isn't it zero is an int and so on and so forth ten is an int you get the idea so anything that does not contain a decimal is an int now a float is very similar to an int but it's any number that contains a decimal point contains a level of precision so if i have something like 7.0 even though this number theoretically in math is an integer because it's a whole number it is actually considered a float in our programmer in c plus because it has this decimal point right here and decimals are treated much differently in our program the way that binary represents them and everything like that is just a lot different than an integer and so that is why they are considered floats so something like negative 9.8 is a float something like 0.2 is a float something like 2.1 is a float whenever you have a decimal it doesn't matter what that decimal value is as soon as you see a period and is attached to a number then you know that you have a floating point value or you have this data which is considered a float so that's the difference between int and float really get that into your brain make sure you memorize that because you need to understand the difference next we move on to boolean now bool or boolean bool is the short form for boolean stands for true and i actually believe this is lowercase story and false so boolean value can be one of two things it can be true or it can be false now this is just like in binary where you can have a 1 standing for true or you can have a 0 standing for false so these are boolean values we're going to use these later on in this tutorial series but they're very important and just understand that a bull or a boolean is either true or false it's one of these two values nothing else and it must be with a lowercase so as soon as i go like this this is not a boolean this is actually nothing this is not a data type because it does not have the lowercase t but now when i put the lowercase d this becomes true so capitalization is very important in programming make sure you understand that as well int right here that's highlighting in kind of this turquoisty color is not the same as int with a capital lock they are very different all right so now we move on to string now string is actually a type that we need to import or not import we need to include in our program so a string is simply anything that is surrounded by double quotation marks anything inside of double quotation marks doesn't matter what it is is a string so if i do h this is a string if i do 7.0 this is a string the reason it's a string is because it's surrounded by double quotation marks even though 7.0 technically speaking is a float right we can see 7.0 right here under float since it is surrounded with double quotation marks that makes it a string now we could have 7.0 hello we could have a bunch of random characters any character on the keyboard we can type if it's inside of double quotation marks it is a string a string can be any length a string could be zero length like this a string can have a ton of spaces inside of it it could have you know brackets whatever anything in double quotation marks is a string now a character is any single character on your keyboard doesn't have to be uh numeric or alphanumeric it can be a special character as well that is inside of single quotation marks this is the differentiator between a string and hr char again standing for character so x this is a character zero this is a character because it's inside of single quotation marks this is not valid because this is two characters inside of single quotation marks you cannot have that you have to have only one inside of single quotation marks to represent a character now if you have double quotation marks and you have one uh single character here this is still a string because it's inside of double quotation marks okay now as soon as you switch that into single uh quotation marks this becomes a chart or right care so there you go those are the main data types memorize what they are make sure you understand what they mean because they are extremely extremely important i cannot emphasize that enough now the next thing i'm going to show you here is just something to do with string so this string data type you're going to use all the time it's very important however it is not built in to c sharp or c sharp what am i talking about it is not built in to c plus by default what i mean is we must include the library that contains string into our program to use this string data type so what i'm going to do is copy this first line right here and i'm going to put include string like that what this is going to do is include the string library into this program this now means when we define something as a string this will actually work if you don't include string and then you try to use this string data type you will have an error because you cannot find string you won't be able to find a reference to it and also notice that string is not highlighting in this turquoise decoder like these other data types are so those are our main data types and this is a good point in time for me to talk to you about something called comments because i'm going to comment these out so obviously this is not valid code what i have right here i can't just write this this is just me trying to illustrate what the data types are so whenever you have something that you don't want your compiler or your c plus program to actually read but you want to have in your code maybe for reference for yourself or someone else to read you can create something called a comment now a comment is anything uh preceded by two forward slashes so if you have two forward slashes anything you type on this line is considered a comment it will be ignored by your program it is simply here to help you the developer you the programmer understand the program write something down it's just anything that you would like to ignore so this is what's known as a single line comment as soon as i start typing below this notice it no longer highlights in gray this is no longer a comment this will be interpreted by the compiler now that is a single line comment a multiline comment is the following you have a forward slash and an asterisk and then an asterisk and another forward slash and this is a multiline comment anything between these two lines will highlight in gray and will be ignored by the compile so as a single line comment and a multiline comment usually you use single line comments however you have multiple lines you would like to comment out you use a single line comment or sorry what am i saying a multiline comment which is this okay so there you go uh hopefully that is clear again this is multiline you must have a terminator for it if you don't have a terminator you're going to have a crash in your program uh and then this is a single line comment like that okay so what i was going to do i actually had it in the multiline comment was i was just going to leave these data types commented out in this multiline comment at the bottom of my program just so it's ignored by my compiler and you guys can still read it so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert aligo expert is the best platform to use from preparing for your software engineering coding interviews they have over 140 coding interview questions on the platform and i actually happen to work there as an algorithms instructor so with that said check out algo expert from the link in the description and use the discount code tech with tim for a discount on the platform so now that we understand data types let's talk about variables now variables are extremely important they're very versatile and they're used all over the place not just in program like i was saying before you could have a variable in math maybe x equals 2 and then you know substitute that into an equation or something whenever you reference x it's going to give you the value 2. now in programming it's very similar there's many different ways to define a variable but just think of a variable as some name to store some value some way to access some information you access the variable gives you that information you can also modify variables you can add variables you can change them you can assign variables to other variables very versatile you can do a lot with variables now to define a variable as i said there's a few different ways the first way to do this is to define the type of the variable to find the variable name put an equal sign which stands for an assignment operator so the equal sign is the assignment operator and then put some value here that is the type of the variable you defined and store it in that variable so when i write this line this is saying i am defining a variable called x it is of type int is an integer this means x may only hold integers and x is going to be assigned to the value 2. so now what i can do is i can actually c out x so c out and then i'll do my uh what is the stream insertion operator and then if i run this you will see that two will print out to the screen so the idea being again we defined that the type of variable is an int is called x it is equal to two let's now uh characters output x okay so let's run this uh if i go g plus plus and now i do run program notice to print to the screen there we go that is the basics of variables so when you define a variable it's very important that the value you store in the variable is the same type as the variable you defined now let me actually just show you what happens if i assign a type to this variable that is not the correct type so let's do this let's actually assign x equal to a string so this is a string because it's in double quotation marks the type of the variable x is an int and let's see what happens when we compile this program so when we compile this program we get an error it says invalid conversion from const char to int it says intex equals string and this is where the problem is so you don't have to worry about what this error message is really it's just kind of telling us that we cannot assign a string to an int because this variable is of typing however if i now try to do something like 2.7 and i assign that to x let's see what happens so when i do this notice that the program actually compiles fine and now when i run the program though notice that we get 2 printing out not 2.7 this is not me running a previous iteration of the compilation this is what happens when you assign a value that is not an integer to an integer variable what will happen is c plus plus will try to convert this value here in to an integer so whenever you try to assign a value to a variable that is not the correct type it will try to convert that variable or sorry not that variable that value into the correct type so in this case to convert a float to an int you simply chop off the floating point part so you remove the decimal and there you go you get the n2 to show you another example if we did 4.7 and we run this now and then we run program we get four right it just chops off the decimal point so that is kind of some areas you may run into if you try to assign values to a variable that are not the correct type that is the first way to define a variable now of course we can define other types of variables as well we could say string we can say y and then we can make this equal to say tim so now let's see out y and let's see what happens so g plus plus run our program and then tim prints out to the screen no problem don't worry that this isn't highlighting it's just because it's from the uh the library it's not like built in by default into your standard c plus coding environment or whatever you may call it so that's another variable so when you create variables there are a few rules that you need to keep in mind and these are specific to the naming of your variables so when you name a variable you want to make sure that this name is unique so if i'm defining a new variable that i have not created before the name of this variable must be unique what that means is that i cannot redefine a variable i've already created so if i have something like intex equals 4.7 i create the variable x and i store 4.7 inside of it now if i try to say string x equals tim let's just see out x here so we don't get that error let's see what happens let me clear the screen let's run this notice we get an error it says that there was a previous declaration as index so we now cannot define this variable name as x because it was defined before now that's just one of the rules but there's a few more rules as well another rule is that your variable names may not contain any special characters other than underscores so you cannot contain spaces you cannot contain asterisks you cannot contain ampersands anything like that the only special character you're allowed is an underscore other than that you may contain letters and numbers they may be uppercase letters if you would like but you cannot start your variable name with a number so i cannot have a variable called 1y if i try to do this the compiler is going to yell at me and it's going to tell me that i cannot do that just not a lot okay but however i can put a 1 at the end of the variable name so i can say something like y1 so now let's try this let's see if the compiler yells at me it does not i can run the program everything still works now you can contain numbers in the middle of your variable name as well i could say like y one s right and that is totally fine that is valid you just cannot start with a number now a lot of times when you're creating variables you want to make sure that your variable name is descriptive so whatever your variable is holding you want to have the name actually be descriptive so a variable name like x is not very descriptive maybe it works in this case because we're just holding a number but in this case if i'm holding like my name in a variable i would want to call my variable name just so that it makes sense anyone else reading my program knows what this variable is holding because you have to remember as a programmer a lot of times you're not the only person reading or using the code that you wrote so just keep that in mind try to name your variable something relatively descriptive and the point of me saying that is a lot of times when you try to do this name them something descriptive you're going to realize that you need kind of multiple words to describe what your variable is holding if that's the situation what you want to do is the phone you want to use an underscore to act as a space so you could say something like name tim like that and then this would actually separate the variable right into kind of two separate words and since you can't use a space use an underscore instead now traditionally in c plus plus it is better practice to use something called camel case to do something like this so if i wanted to say name of user i would type it like this rather than typing it with underscores so name underscore of oops underscore user so this is the preferred way when you use camel case rather than what this is called which is snake case now you can use whatever you want you're not writing any production level code it doesn't really matter at this point but just figured i would mention that to you the kind of standard way for using multiple words is to have camelcase so that is the first way you define variables you do the type name of variable equal and then what is equal to although sometimes you would like to create a variable but you do not want to initialize it when i say initialize it i mean assign a value to it immediately in that instance what you can do is type the phone you can type the type of the variable then the variable name so in this case i can say index and what i've done is i've created the variable x but i have not assigned any value to it or i have not really initialized the variable what i can do now though since i've defined the type of this variable is i can assign something to it without having to rewrite the type so i can now say something like x equals 7 and then i can c out x and this will totally work so let's do this let's compile our program and what is it saying expected a semicolon uh where was it expecting the semicolon i realized that when i see outed x here i made a mistake i needed to add my uh stream insertion operator so let's now try this and we should see this works that was the error that i was getting okay compile is fine now we run and we get seven printing out to the screen so this is a way to define a variable uh kind of a little trick here if you want to define multiple variables but you don't want to assign anything to them you can say x comma y you can do the type beforehand and now you've created two variables that are both type int one called x one called y i assigned a value to x i have not yet assigned anything to y uh if i compile this program you'll see that this does work and we don't get any errors that's totally fine and you can also change the value of a variable once it has been initialized or once it has been created so now i can say something like x equals six and then maybe i'll say something like x equals eight and now what's going to print out well it's going to be eight so let's have a look here and we see that we get oops trying to get to the run program we get eight because at the point when we printed out the value of eight it had been changed or not eight of x it had been changed to eight so hopefully that's clear but that is kind of the very basics on variables there's a few other ways you can create variables with these two ways of the standard ways you can also have variables interact with each other so let's say i define y equals and i make this equal to something like 4. what i can do now is i can see out x and then right after i can see at 1. so let's have a look at these right here let's compile the program let's run it oops i accidentally compiled it again let's run it and we get 8 4. now we're not getting 84 we're getting 8 4 but they're just being kind of mushed together because we don't have a space in between that's fine but now let's see what happens if i do this x equals y and let's just see out x now take a guess what do you think is going to print out let's compile the program let's run the program and we got four the reason we got four is because we changed the value of x to whatever y is equal to which in this case is four so that is kind of the way that variables work just keep in mind you can change the value of variables but the value you change them to must be the same type as that variable so again when you define the variable type name equals assignment or you just do type name and then you can assign something to that variable or use it without having to redefine the type so i think that's pretty much all i need to show you about variables just keep in mind the data types are very important you must assign the correct type to a variable if you try to assign a type to a variable that is not the type of that variable c plus plus will try to convert that variable or convert that value sorry to the correct type and it can do that for a lot of instances but in some instances it cannot so you may get weird strange errors and that may be because you're trying to assign a value to a variable that is not the correct type so with that said that is going to conclude this video i hope that this was helpful and i look forward to seeing you in another c plus plus tutorial video you