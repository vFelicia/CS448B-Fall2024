so i film a lot of youtube videos and tutorials i have over 700 videos on this channel i'm teaching over eight different programming languages hundreds of different frameworks modules and technologies and i often get asked how do you learn all of this stuff how do you do this so quickly and how is it one week you're teaching us this topic and the next week you're teaching us that well in this video i'm going to outline kind of the structure that i use to very quickly learn programming languages and frameworks and how you can do the same now i want to say here that this does not make you an expert i do not claim to be an expert in a lot of the stuff that i teach you on this channel and there is a reason why a lot of my content is kind of introductory intermediate and i don't get into the weeds of a bunch of stuff because that is very time consuming and it does take you multiple years or months or just hours in general to really get good at these specific topics what this video will show you how to do is how to become competent kind of fluent in a programming language or framework and a general structure to very quickly learn something and then to continue on and pick up the specifics as you need to so with that said let's get into the video after a quick word from our sponsor before we get started i need to thank crowdin for sponsoring this video crowdin lets you automate localization for your company so you can release multilingual software as fast as software in just one language crowdin has over 200 integrations that lets you connect with different tools so you can localize all customer facing content like marketing communications and emails not just your software with crowdin you can set up and sync text and translations with platforms like github where your translators can then push their work directly to a github repository this means that translators don't have access to code but have access to the latest copy of text without having to bother developers now at the same time developers can receive these translations as merge pull requests to the repository directly when translators have completed their work so start automating your localization and translations today by signing up for crowded you can start with their free plan and utilize a 14day free trial to try out all of the paid features if you so desire you can do this by clicking the link in the description thanks again to crowdin for sponsoring this video so i'm going to start by just outlining the algorithm or the steps that i follow to learn something quickly then i'll go through each point individually give you some more details and talk about why it's important so step number one is to get a high level overview or kind of summary of what it is that you're about to learn step number two is to create a curriculum or a list of topics that you want to learn and put them in an order in which you plan on learning them step number three is to learn one of these topics at a time by either reading through documentation watching videos or using really whatever strategy works for you to learn this step number four is to stop at every few lessons apply your knowledge that could be either with exercises or projects and then step number five is simply to repeat this process until you've learned what you want to learn and you've got to that point now it turns out that these five steps here are exactly how i design my programming course programming expert dot io now this course allows you to learn python and go advanced programming objectoriented programming software design uh software engineering tools and so much more and the way we design this is that you have a highlevel overview of everything you're going to be taught every section has kind of an introduction video that gives you some information about what's coming then we have a list of all the topics you can see the order in which you're supposed to follow them and after every single lesson you have practice questions practice problems coding exercises and then we have large projects as well as coding assessments at the end of each section that you can complete so keep that in mind there's a reason i use this for programming expert and i'm pretty well sharing with you here how i design curriculum how i teach stuff and well how i learned that at the same time so with that said let's move on here to the different steps i'm gonna go one at a time and explain why each is important so step number one is to get a general overview or summary of what you're about to learn now what i usually do for this is find someone who's kind of an expert in the topic that i want to learn and watch a half an hour video from them or maybe go through kind of like 20 or 30 minutes of some documentation or a book or something along those lines and just try to get a general sense of what it is that i'm learning kind of some key information and points about this topic and then hopefully get a sense of kind of what's possible what i plan on learning what i don't want to learn what's maybe beyond the scope of what i want to be learning right what's too advanced or some stuff that's really important that i know i'm gonna have to need to focus on so that's what i like to do in this section and i can kind of compare this to like reading the blurb of a book or scanning through all the different chapters of a book before you read it or when you go to a website kind of scrolling through looking at the key headlines the bolded points stuff that your english teachers probably told you to do and that you've probably never done when you're reading a book that's what i like to do it just gives me a really kind of decent picture of what's about to be happening what i'm about to be learning and i find it helps me to retain information especially as i move on to step number two so step number two is to create a curriculum or list of the items that you want to be learning or the topics so to give you a concrete example here i'm doing a rust programming series right now on the channel i apologize i have some videos in queue right now it's been taking longer than i expected but what i do when i want to do a tutorial series like this is i start with that high level overview then i go and i list out 20 25 maybe 30 topics that i want to cover in order for each of those topics i'll do a few little key points about some important things that i'd like to cover there and that gives me a really good kind of checklist and guide on the steps that i need to follow along with were the topics i need to learn to start really understanding this topic so with rust i would have created yeah maybe like a 20 25 point list so on that list i probably would have had the first video as like an introduction or a setup the second video is like cargo and rust tools the third video is probably like console output then i would have had console input arithmetic data types all of those different core topics now why this is important to do as well is that it makes you have to go and figure out all of the topics that you want to learn and while you're doing that of course you're going to be picking up little bits and pieces of information and you're giving yourself a structure of what you need to go through and that alone is already helping you understand the language and all of the topics that are coming up i mean i don't know about you guys but whenever i get like a syllabus or i'm in a course or something i always like to go and look at all of the key topics or chapters or lessons that i have just to have a sense of what's coming up in the course why what i'm learning right now may be important it just helps right it helps you structure everything and for me i'm a very organized person and that's what i like to do so hopefully you guys see the value in this point at minimum it gives you a list of kind of deliverables or tasks that you need to complete and that should help you stay on task as you're actually going through and learning a programming language framework technology whatever it may be so now we're on to tip number three or step number three in this algorithm which is go and learn the topics that are on your list now this one is the most difficult for me to explain to you because everyone learns differently you kind of have to figure out what your most efficient learning strategy is and for me personally when i want to learn these different topics usually what i do is i reference documentation now it may be official documentation it may be like an informal guide on something like medium or maybe i'm even reading like stack overflow posts or something along those lines but usually i'm reading the official language or framework documentation and going through and learning each topic that's on my list now for me when i read the documentation what i like to do is have like a code editor or an environment set up have the on kind of my secondary screen and be reading it and then kind of applying it or messing around and testing uh on my other screen i like to constantly be kind of interactive with what i'm learning again something we did in programming expert dot io which you can check out from the link in the description but the point is that's what works for me so for some of you it may be watching a video on the topic obviously i hope a lot of you guys enjoy videos considering i post tons of them on this channel i just know for me that i'm usually more efficient reading documentation but if something's really complicated and i'm not understanding it then i'll go and watch a video i'll usually turn it to 2x speed and that's kind of the fastest way for me to pick up this information so now we move on to step number four you've learned this different stuff you've read the documentation you've gone through a book or a video or whatever it may be and now of course you have to apply your knowledge and check for understanding so this is why i usually will film a video immediately after i learn a topic this does two things right it lets me have all the knowledge be fresh in my brain but also allows me to immediately check if i understand something because now i have to explain it to you you've all probably heard this saying before but if you can't explain something you don't understand it and that's never been more true from my situation there's all kinds of times where i go to try to film a video and very quickly i realized that hey i have no idea what i'm talking about i didn't really learn this topic back to the drawing board let's take an hour break let's relearn it and cover all the stuff that i really was struggling with explaining then come back and film the video or alternatively i think i don't really understand something that well but then i go to film the video and it seems good you guys comment and you say it was a good explanation i go oh maybe i did actually understand that i was overthinking so that's what i like to do i'm not saying you guys have to film a video that's just my way of actually applying my knowledge and checking for understanding if you're using something like programming expert you're gonna have all kinds of exercises that you can go through or alternatively you can find some projects to work on or some exercise online i'm sure there's all kinds of free stuff that you can go through maybe it's just you know messing around in a code editor and writing a little script uh that you came up with on your own anything works but you definitely need to apply your knowledge and confirm that you do actually understand what you're learning before you move too far so my step number five here not really much to say this is just repeat right you're just gonna pretty much be repeating steps three and four where you're learning different topics applying your knowledge learning different topics applying your knowledge etc etc and there you go that is how i learned something quickly and how i create videos pretty quickly on these different topics now i know this sounds like a lot to do but the first two steps are things that you can realistically accomplish in about an hour right get a general overview get a summary create a list of topics or a curriculum then it's about learning each individual topic and if you're someone who's learned similar stuff before you'll probably be surprised at how quickly you can pick stuff up for example in rust which i'm teaching now data types i already know all of the core data types there's some nuances and difference in rust but i know what a data type is i know what an int is i know what a bool is i know some of the problems i'm probably gonna have with data types i know i'm gonna have to probably convert them i know how it's done in other programming languages and that allows me to look for the key differences in rust as opposed to having to learn something completely from scratch so keep that in mind you want to utilize your past knowledge as much as possible and allow you to kind of set the differences or find the differences between what you know and what you're learning as opposed to relearning something completely from scratch hopefully that makes a little bit of sense not sure if that was super clear but that is what i have for you for this video so as always if you guys enjoyed make sure to leave a like subscribe the channel and i will see you in another one you