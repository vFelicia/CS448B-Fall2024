in this video i'll be showing you how to make a social media slash instagram clone using react on the front end express on the back end and then sanity for our content management system as well as our database now this is going to be a pretty advanced tutorial that's going to walk you through how to do all of this completely from scratch so i'm going to assume that you have some understanding of javascript as well as react and express now with that said let me give you a demo of what we're going to be building out then i'll talk more about exactly how this will work and we'll get into all of the setup steps so here you can see that i kind of have a mock instagram now i know the styling is not quite what we would expect i'm not going to focus on styling in this video it's really just meant on the functionality you guys can go in and change the css and make things look better after you have the functioning website built regardless what i can do here is sign in now i'm not implementing real authentication here and the reason for that is it would make this video extremely long we're just going to focus on the actual content of the website as well as the functionality so adding followers searching for accounts unfollowing and following different users being able to post something right all of that kind of stuff view profiles edit profiles that's what we're focusing on on here as opposed to kind of all the authentication stuff which you can add to this fairly easily anyways what i can do here is make an account so maybe i make an account i just call it hello and then world and then once i make this account it will automatically sign me in now what i can also do is log out and then if i know the username of the account i can just sign in by entering that username nice okay so now i'm going to go to search and i'm just going to look for a few users here and when i press search i'm going to see all of the different users that i have here in my i guess app so what i can do is click on the rock and if i want to i can follow the rock and now that i'm following the rock we should see the follower account update here i can go to my home page or my feed and i'll now see posts from whoever i'm following right so if i go back to search here let's search let's go to timurzika which is this beautiful guy right here let's follow him nice then when i go back home i'll see all of the posts from him as well nice now i can click into different profiles of course i can unfollow people if i want to do that then when i go back to the home page of course those posts are going to be gone then i can go to my profile and i can actually edit this profile so maybe i want to change my first and last name maybe i want to change my bio maybe i want to update a photo so let's actually do that okay let's update and give it a second here and we have now updated our profile so that's really what i'm going to be focusing on in this video i do know this looks a little bit simple but there is a ton of stuff that's going on in the back end and once you understand how to implement these different features here you'll see how you can add a ton of other stuff like likes comments removing posts a bunch of stuff that i just haven't implemented in this app and then of course you can make a post here by choosing a file and then entering a bio or entering a caption for that photo all right so that is the demo of the application now i do want to mention that this video is sponsored by sanity which as i said is what we're going to use for the content management as well as the database aspect of this app now this is an awesome platform and it really just makes it easy to access different data and to do that from really any source so even though we're going to be viewing our data from say a react front end here we could be viewing our data from a mobile app or from really anything else and one of the awesome parts about sandy is they have this uh what's it called sandy studio which allows you to go in and actually view all of the entries in your database so i can go and modify different things view all of the different entries and it makes it really convenient when we're debugging as well as people who aren't developers so just really easily say add a post without having to actually go onto the website you know sign into an account all of that kind of stuff now of course sandy is completely free and it's just an awesome thing to use for the database and i've really enjoyed messing around with it as i've been learning it over the past few days so yep that's what we're going to be using not much more to say about that you will learn about all of the features insanity as we go through this video so i just want to jump in here and mention that for the free version of sanity usually you get a hundred thousand api requests 500 000 api cdn requests and then 10 gigabytes of bandwidth but sandy was actually nice enough to double all of that for this tutorial so if you go to the link in the description sandy.com tech with tim you'll see here that you can use this coupon so sandy and nit and then hyphen hyphen coupon tech with tim and that actually gives you double number of api requests cdn requests and bandwidth so usually it's 100k 500 000 and then 10 gigabytes and now it's been doubled to 200 000 1 million and 20 gigabytes again completely free you really will not need this many requests but in case you want to run some other type of application using sanity then this is going to be a higher limit and just make it a bit easier for you to do that now the way that you get access to this again is you write this sandy init and then hyphen hyphen coupon tech with tim now i'll leave this link in the description also when we start setting up sanity i will mention that you can use this coupon code to get access to the double limits so as i mentioned we do have a few setup steps here for this application we need to set up our database our backend and then our frontend so for the database go to this website it is sanity.io and all you need to do is actually just make an account so you can click on login and then assuming you don't have an account you can just create a new one once you've created that account we can actually do all of the setup for this from our command line so just install node.js if you don't already have it i'm assuming most of you have that already and then get into vs code or whatever editor you want to use now inside of vs code here and i've opened up a folder called instagram clone this is where i'm going to put all of the code for this project i've made another folder inside of here called database now database is specifically where i'm going to put all of the sanity database related stuff i'll make two new folders one for api and then one for frontend where the api will be our express backend and the front end will be our react application so now that i've cd into this database folder here what i'm going to do is type the following npm install hyphen g and then at sanity cli now this is going to globally install the sandy cli which we're going to use to actually run the sandy studio and create our sandy database kind of starting code right so i'm going to install that i already have it installed so it goes pretty quickly and then once i've done that i'm going to type the command sanity init now this will work assuming that you've installed that the sandy cli and that's going to ask you if you want to select an existing project or create a new one so i'm going to create a new project here that's what i would recommend you do as well and we'll just call this insta clone tutorial and we should probably do like some underscores or something here so it's a little bit easier to see okay insta clone tutorial for my project name then it's going to ask me do i want to use the default data set configuration we're just going to click yes for this we're going to create the data set here which will take a second and we'll be given a few other options here so project output path i'm just going to hit enter meaning it's the current directory if you wanted it to be somewhere else you would just type in the relative path to where you currently are okay and then we can use a project template if we would like so movie project ecommerce blog i've already showed you what the studio looked like but if you want to explore it with some sample data then you can either choose movie project or ecommerce and it will give you some data as well as a schema and you can have a look at kind of what a sample sandy studio may look like and why it's beneficial anyways for now i'm going to go with clean project with no predefined schemas because we don't need those for our project we're going to write our own schemas all right so we'll just wait for this to finish once it is done i will be right back and then we'll move on to the next steps all right so this command has now finished and i've opened up the database folder and you can see that we have a bunch of files and content inside of here now all we really care about is the schemas folder where we have schema.js we'll look at this later but this is where we'll define our database models now i want to mention here that what sandy's actually going to do is it's going to build our different database models for us and then host that in the cloud so we don't actually need to have any local database file here and our database will be in the cloud meaning we can access it from really any application so even though we're building a react app here if we want to access it from python or we want to access it from really any other programming language we could just use the api that sandy provides to access that data that's why it's so nice to actually use sandy because it hosts everything for us and kind of deals with all of the you know database related stuff hence why we're using it in this tutorial regardless i want to mention that just keep in mind we're not actually hosting the data locally we're just defining the schemas then when we start the studio which we can do now by typing in sandy start i will build the schemas for us host that online and you get the point so i'm going to start this with sanity start now i need to be inside of the project where sandy is so inside this database folder and then it'll take a second and what i can do is go to a local host link and i'll be able to actually view all my database models and all of the data that's in my database now in this case we don't have any models so i'm not going to be able to view anything but i just want to show you kind of how this works before we proceed all right so it's successfully compiled so what i can do is go to localhost colon 333 so let's open that up now in google chrome and when i go here it's going to ask me to log in so i had google as my login so let me log into this and then i will show you what it looks like alright so i've logged in now to my google account and of course it's going to say empty schema because well it is empty we haven't put anything here yet but i just want to show you this kind of how the studio works you access it from this local host link all right so we pretty much set up sanity now we'll do the database models later on so i'm just going to end this with ctrl c and now we're going to set up express so i'm going to make a new folder here and i'm just going to call this api and then i'm going to cd into the api folder so cd api all right so i'm now inside of the api folder so i'm just going to run the command npm init to give us a fresh project and then i'm going to run through this setup here so package name api is fine the version 1 is fine we don't need a description the entry point of index.js is fine for right now we don't need a test command we don't need a git repository no keywords no author no license is this okay yes it is and hit enter okay so now we have a package.json which is what i want i'm going to install a bunch of modules that we need and then we'll actually just create kind of the boilerplate express application before we start kind of writing all of the different endpoints so what i'm going to do is type npm install and then i'm going to install the sanity client now there is a javascript client that we can use that will allow us to very easily send requests to the sanity api again if you're working with sandy from another programming language they do have some other builtin packages and kind of prebuilt i don't even know what you would call them modules that you can use to connect to sandy but you also can just do it manually using the sandy api regardless npm install at sandy client we also want to install the body hyphen parser this is going to allow us to actually get json data in our express api then we are going to install multer we're going to use this for uploading files we're going to install env we're going to use this so we gotta have an environment variable file that stores our api token we're then going to have fs which is file system again this is for uploading files and then we're going to have a nano id to get a unique id so let's spell that correctly okay so i'm going to install all of these right here again if any of this is confusing to you please feel free to check out the code from github again the link will be in the description and you can just take the package.json file download that and then install everything that's inside of it on your own okay so i've now installed all of those packages now what i'm going to do is create a few different files that i need inside of here and then that will conclude the setup so the first file that i want to make here is index.js this is going to be my entry point the next file that i want to make is going to be api calls.js this file will be responsible for holding all of the sanity api calls so interacting with our database essentially next what i'm going to do is make a new file and this is going to be client.js we're going to initialize this in a second this will be our sanity client and then finally we're going to do dot env which is going to store an environment variable with our api token for the sanity project now what's going on here is we're going to have a back end the back end is going to be interacting with the api so the sanity database api and the point of this is so that our front end can hit our back end our back end can be authenticated with the api and then that way we're not exposing our sanity api token and we're only having the back end of our application actually manipulating or dealing with any data i could from my front end hit the api for sanity i don't actually need to build out an entire back end but this will be slightly more secure now i will mention that what we're doing here for the back end is not the most secure you'd have to make some modifications if you're going to put this into production but it's just better practice to have any of your api tokens and interactions with data to be done from the back end as opposed to the front end so hopefully that makes a bit of sense but that's where we're making the api essentially so we forward request from the front end to the back end that we're building the back end will then send the appropriate request to the sanity api which will be hosting the database and giving us any data that we need and then returning that to the front end so you can kind of think of the back end as a proxy between our front end and the database all right so we have dot env client we could really start anywhere here i'll start at index.js and i'm just going to write kind of some boilerplate code to set up our express application so i'm going to say import express from express and then i'm going to say imports the body parser like this from and then this will be just body parser so actually i think it will be like this body hyphen parser now i don't know why did a space here okay we have our two imports then i'm going to say my const app is equal to express this makes my express application i'm going to say app.use and then bodyparser.json and then app.use and this will be body parser dot and then this is going to be url encoded and then inside of here we have to have to pass an object and we're going to say extended and then false now what we're doing here is essentially installing a few things that are going to allow us to actually look at and parse the data that's sent as the data in a post request or in a get request to our server now if you don't have a body parser like this you're not going to be able to actually receive say post data or just data in general json from a request what this will do is actually parse the data for us then return it to us in our request.body i know that might be a little bit confusing but really this just allows us to actually get request data uh from wherever the request is being sent from okay so that's what we're doing for this now we're just going to start the app so i'm going to say app.listen and then i'm going to put this on port 3001 and then i'm going to have a function here and this is just going to say console dot log and then we'll just say started just so we know that the server actually ran successfully all right so that's all we need so far for index.js we'll start writing a few different routes like get get roots post routes whatever later on but for now this is kind of our starting code all right now one thing i need to do here is go to package.json and i just need to remove this test script and i want to add a start script here and what the start script is going to be is just node and then index.js okay so that's going to run the file for us and i need to add one other field here and this field is going to be type and then module now what this is going to allow us to do is actually have the import statements here so a lot of times you'll see something like express equals and then something like use or something like require sorry and then express now i don't want to do it that way i'd rather just have regular imports so i'm going to have a module type so i say type equals module and that allows me to have my regular inputs okay so that's what we need for package.json that's good for index.json api calls we don't need anything right now but for our client.js we are going to initialize the sanity client so i'm going to say import and then sanity client from and this is going to be at sanity client and then i'm going to import dot env from and then this is going to simply be dot env remember we installed all of these things okay now that we've done that we're going to say dot env dot config remember what this is going to allow us to do is actually read this dot env file so that's why i'm writing this and then i'm going to say export default and i'm going to create a sanity client so i'm going to say sandy client and i'm going to pass to it an object here that has all of the data that we need to kind of initialize the api connection to our sanity database so i'm going to say project id colon and then this will be something that i will tell you how to get in a second we're going to say data set you're going to make sure you put production here this is just the name of the default data set for a sandy project then we're going to say use cdn now i'm going to set this equal to false and i'll explain what this is in one second we're going to say api version and for the api version what we can actually do is just put today's date now when i'm recording this it is february 22nd and when you do that it's just going to give you the most recent version based on this date so just put the current date you also could just do something like new date but for now we'll just hard code in this string because i know that works then we're going to say token and this is going to be our api token which i'll show you how to get again in a second so what the cdn is going to do here if we enable this to be true is it's going to give us a much faster response from the database but it's going to give us a lot of stale data now the reason for this is going to cache all of our requests so if we send the same request twice it's going to say oh you sent this request before what was the response last time let me just give you the same response as opposed to hitting the database that's what the cdn does so we want to make this false for our application because we're doing a lot of changes that we want to see happen instantly so if we're caching all of our requests we're going to be getting a lot of stale data although that data will be returned to us returned to us very much faster so if you have cached data everything is a lot quicker but you're getting some stale data whereas if you don't cache it it's going to be slower but you're getting fresh data which is what we're going to prefer here so i'm going to turn the cdn off you can make it true and see what happens in your application obviously once we start building out something that's more functional so what we need to find now is the project id for our sanity application now the way we can find that is we can go to database we can go to sandy.json we can just copy the project id and notice here the name of the dataset is production so that's why i put that in the data set field here okay so for the project id i'm going to paste that in that's now going to link it to that project and then we need a token now to get the token we actually have to go to the sandy website so what i'm going to do is go here to sandy i'm going to log in and then i'm going to find my project now my project here you can see i've messed around with a bunch of them before this is insta clone tutorial i'm going to click on api here and then i'm going to go to tokens and i'm going to add an api token now for the name let's just go tutorial and we want to have editor access here so we have read and write access to all data sets but you could just give a viewer access right or the deploy studio token only access to deploy study studio and graphql apis to our hosted service anyways we want the editor so let's go with editor it's going to give us a token this is the only time we can copy it so i'm going to copy that token and i'm going to go now to my env file i'm going to make a variable here called sanity and we'll say api token in all capitals is equal to and then i'm going to paste the token inside of here now i have to check if we need a string or not in this file so bear with me i don't think we do actually yes we do need a string so let me make this stringified here by putting another quotation at the end all right so the point of this is that if we were to upload this project to github for example we would not upload this dot env file and that would mean if someone else wanted to use our application what they would have to do is make their own env file put their sanity api token inside of that file they'd have to change their project id then they'd be able to run this application with their own sandy project so we're putting in an env file because i don't want to hard code this directly into my js file and it's kind of good practice to store things as environment variables that are sensitive data now of course i'm showing you the api token here if any of you are crazy enough to type out the entire token then well you can have it although i'm going to delete it after this video is finished being filmed anyways okay so now that we have this env file what i want to do is access that variable from the env file so since i've used env what i can do here is type process and then this is going to be dot env dot and then this is going to be sanity underscore api underscore token okay i believe that is correct yes that looks good and that will access the variable right here from our environment variable file and allow us to use this sandy api token again without having to hard code it directly into the file okay so now we have set up our client.js we have set up our index.js let's now see if this actually works and then we'll move on to setting up the front so what i'm going to do here is just type npm start from inside of the api folder and let's see if it works notice we get the output of started which is what i wanted to see we're all good we can now quit this with ctrl c all right so we now have our api and we have our database set up the next thing that we need to set up is our react frontend so i'm going to go into the parent level or the top level directory here of my instagram clone and i'm going to run a few npm commands so i'm going to say npx create react app and i'm going to call this frontend this will give us kind of the boilerplate react app code so let's run that and let's see what we get here okay it's going to take us a second to run once this is done then i'll open up that folder and start showing the other stuff we need to do all right so we have now created the front end folder here that actually took a lot longer than i was expecting so what i'm going to do now is cd into front end and i'm going to install the other mpm packages that we need so i'm going to say npm install then this is going to be react router dom i'm also going to install react and then router and then bootstrap and the reason we need that assuming we spell bootstrap correctly is because we're going to install react bootstrap which is going to give us some prebuilt components just allowing us to style things a little bit nicer so again react router dom react router bootstrap i spelled bootstrap wrong a second time and then react bootstrap okay so let's run that this will take a second once it's done i will be right back all right so we have now installed all of the packages that we need so i'm just going to go inside a front end and i'm going to start cleaning this up a little bit because we don't need all the files that are inside of src so src is where we're going to write our source code we don't really have to worry about anything else right now inside of here i'm just going to delete a few things that we don't need so i don't need app.test.js i don't need logo i don't need report web vitals and i don't need setup tests so let's delete all of those remove those through recycling bin let's now go to app.js and actually let's remove the import for logo.svg we don't need that for the source for this image in fact for all the stuff inside of here we can just delete this and we can just make it so we have a single div for app we can then go to index.js we can remove the report web vitals remove the import for that and now we are good now we just want to set up this src directory a little bit just so we're ready to start coding in a second so let's make a new folder here i want to call this components this is where we're going to put all our components i want to make another folder here called css and i just want to move my css file inside of here and that's where we'll put all of our custom css so both the css folders or file store are going to go in there and then we'll put app.js inside of components okay and index.js can stay outside of here but we now oh the import automatically changed for us okay that was nice didn't realize it did that i was going to say we have to change the import but doesn't look like we do so for this import here we will actually have to change this so i'm going to say dot slash css slash index.css because we're index and we're trying to get in the css folder and then for app.js here i need to change this import as well so it's going to be dot dot slash and then css slash app.css that is going to bring us to the parent level directory src then into css and then to app.css if that's wrong i'll fix it later but i think right now that is good okay now that we've done that let's go to our package.json and we just need to add one line here at the very bottom and this is proxy and then we're going to proxy localhost colon and then 3001. now we'll also do http before this the reason why we need this here is because we want to forward requests that we're sending from the front end to our back end which is going to run on port 3001 now i believe that our react app is going to run on port 3000 our back end runs on 3001 and then the sani studio will run on three three three three although we don't really care about that url for right now because again all that's hosted in the cloud that's just giving us kind of the nice visual of our sandy database okay so now we have most of the setup complete we have our front end we have our database we have our api so let's just run the front end and make sure that's working so i'm inside a front end so let's type npm start and let's see if this crashes or not or if it actually runs the application for us all right so it looks like everything is good here i'm looking through the terminal doesn't look like i have any errors and you can see that i'm at localhost colon 3000 and i can view my react application so that is good that is what i wanted to test out now ideally we're going to run this at the same time as our back end but for now we don't need to do that i just wanted to make sure that each individual step was working so now we have our front end we have our database and we have our api let's just quickly go to the sandy website for one second and i want to show you here if i go to overview what i can do is view for example the api cdn requests the regular api request the bandwidth the documents and for the free version this is what we're limited at right 100 000 requests 10 gigabytes of bandwidth you are not going to hit that especially because this is just a tutorial and then you can view things like members data sets access usage i won't go through all of it but i just wanted to mention that this does exist here and again because this is hosted on the cloud you can view all of this data and you are rate limited at a certain point because it's the free plan of course you can upgrade and get more limits or higher api requests and all that kind of stuff okay so now that we've done this i want to start setting up the backend database so specifically the schemas so i want to go into the schemas directory here and then into schemas.js and in fact i'm actually not going to do that i'm going to make a new file called user.js and another new file and this is going to be called post.js and inside each of these individual files i'm going to code out schemas for the database models for a user and for a post once i do that i'll add them to the schema folder then i'll show you how we actually build that schema by just running sanity start right and running that that studio alright so i've just taken a quick cut here and opened up a website containing a basic tutorial on how to create schemas in sandy i'll leave this in the description in case you guys want to have a look but let's quickly run through this right here just so we understand basically how to create a schema so we want to focus on this which is an individual schema or actually this which is an individual schema and what we do to create a schema is we have a title a name a type and then the fields that we want on each of these objects so the title is the display name this is what we're going to see when we're printing this out or when we're viewing it in the sandy studio the name is what's going to be used in the apis so make sure the name has lower case letters at least that's the convention then for the type we're only going to go with document for now but as it says you can have some more advanced types we're not going to look at any more advanced ones if you want to see how those work again reference this documentation we then have fields now the fields is going to be all the data we want to store for every object that is of this type and so now they just have one field which is a name so the title is name that's the display name the name which is used in the api is name and then the type is going to be string now of course you can have more advanced types like arrays references booleans i'm going to show you a bunch of those as we write out our user as well as our post okay so just want to quickly run through that now let's create the user schema so i'm going to write the schema in here and then we'll import it from schema.js i just make things a bit cleaner so i'm going to say export default for the title of this it is going to be user okay then we will have a comma let's spell user correctly for the name this will be user with a lowercase and then we want the type this is going to be a document okay and then for the fields this is going to be an array and inside of here we're going to have a bunch of fields so the first field is going to have a title of first name let's get the quotation marks correct here it's going to have a name of this is going to be first underscore name and then we're going to have the type of and then string okay that's all we need for that field for the next field we're going to have last name so we can actually just copy this and just change first to last so this will be last and this will be last all right next we want to have a username so we have first name last name username we're going to have a bunch of other things as well so we're going to say title this will be username the name will be username with a lowercase and then we want the type here to be again a string okay continuing we want to have a photo this is going to be like the profile photo of the user so we're going to say this is title and the title will be photo the name will be photo and then the type will be and this is going to be an image next we are going to put the vial so i'm going to say title this is bio i think we all know what a bio is little description for the user we're going to say the name is the bio and the type here is going to be you guessed it a string actually sorry not a string text because text can store longer piece of data than string since we can potentially have quite a bit of data for the bio we go with text so actually no you didn't guess it we're going with text okay all right so this next field here is going to be following now this is going to be all of the users that this user is following now you also could have say on a user a followers field and then that would contain all of the people that are following them however you only want to have one or the other so pick what you want you can have followers on on the user which contains all the people following them or you can have following which is the people that a user is following i think that makes sense to have what i'm going to put here which is the following field but just want to describe what this is so i'm going to say title this is going to be following the name is going to be following and then this needs to be an array right because we're going to be following multiple users so i'm going to say type array and then this is going to be of and inside of here i'm going to define the type that this array is going to store so i'm going to say type this is going to be a reference type now a reference is something that's going to reference another document so inside here we're going to reference the id of another user so i'm going to say 2 because that's what we need for reference and then inside of here i'm going to say type and then user this essentially says okay we're having an array and then this is going to be of references and these references are going to be two users now one thing i can also do here is add what's known as a validation so i can say validation and i can say rule and i can write a function here and this rule can go to rule dot unique and what this will mean is that we need to have unique values inside of this array all right hopefully that makes sense but that is what we're doing for the following field again an array of references to a user and when we reference the user we're just going to need the id to that user and i'll show you how we make that later on all right the next thing that we want here actually where am i going to define this it looks like i'm going to define it right before this square bracket is going to be created at so i'm going to say for the title let's put this down let's have created at okay then we're going to have name this will be of completely messed this up created at and then the type for this is going to be date time all right so thank you autoformatter for fixing that for me we have title created at name creator. type datetime we just want to know when we created this user great so that's really all we need for this schema here for the user i'll slowly scroll through it so you guys can have a look at everything again all this code will be available from the description next we're going to do the schema for the post all right so for post we're going to say export default and then similarly to before we're going to say title this is going to be post we're going to say name this will be post we're going to say type this will be a document and then we are going to have our fields like this which will be an array and we will define the fields so on a post what do we need well we need a photo so we're going to have title photo name photo type and this is going to be an image okay moving on to the next field we're going to have a description for the post so we're going to say title description name description autocomplete is coming in clutch here and the type is going to be type text okay continuing we want the author of the post as well as when the post was created so i'm going to say title created at okay let's go name why did it do that oh name created at let's actually do created underscore at and then for the type this will be date time okay let's make these on new lines though autoformatter can you fix this for me nice and lastly we want the author now the author needs to be a reference type to the user that created this post so we're going to say title author excuse my bad typing here name author and then type is going to be a reference and it is going to reference two and we're gonna put type and then user inside of here all right so we've now created our two schemas we have our post schema as well as our user schema so let's now go to schema.js let's import these two schemas and we'll use them inside of here so what i will do here is simply say import user from and then dot slash user.js and then import and what's the other one that we wanted we wanted a post from and then dot slash post.js nice and then i put my types in here so i'm going to say user and post doesn't matter the order that you place it but now we're going to have these two schemas inside of our data set all right so we have now set up the database we've set up the front end we have set up the back end let's now rerun sanity studio and see if we can view these different uh database models that we've created so let's run a new terminal here okay a new command prompt and let's cd into the database and let's go sanity start and then let's have a look at the sandy studio and view these new models all right so it is now compiled so let's launch this in google chrome let's have a look here at the sandy studio it's logging me in and now notice we have user and post over here we can actually make a user in a post if we want right one of the great things about sandy studio is the fact that i can do this and maybe i give someone who is not very tech savvy in my organization access to this tool and then they can just come in here and they can make a new blog post they can make a new user they can make whatever it is that they want by looking at a graphical user interface right so my first name last name username photo bio following create it out i'm not going to fill this out but of course you can see how easy it is to actually do that okay so we don't need that open anymore let's actually close sandy studio and now what we'll move on to is actually writing some react code now i understand this video has been long so far with all the setup steps but that was anticipated at the beginning there's a lot that we have to do so let's now open up our front end and start writing some react code and first of all i want to make some new components so just kind of template out the components that we want and then we'll fill in those components one at a time so i'm going to say new file the first component that i want is going to be all posts okay not ks this is going to be dot js i also want a component that's going to seem a bit weird right now but this is going to be alert and then dismissable okay i don't know if i spelled that correctly i think i did okay that's fine this is going to be an alert that will show up on the screen you saw that during the demo but we'll need a component for that so let's just write that right now next we're going to say create post dot js that's going to be for well making a post we're then going to have edit profile this is going to be kind of a i think it's called a modal or like a popup that will show up on the screen that lets us edit a post as you saw in the demo and then we're going to go login.js then i'm going to make a new file this is going to be profile.js we're going to have another component this is going to be profile item.js now this is actually going to be what shows up in the search bar for each one of our profiles or each one of our users and then we're going to have search.js and we're going to have lastly sign up dot js all right so i think that is pretty good now for all of these components what i want to do is just write the kind of boilerplate function for them just so that i can import them and start setting up my routes for each of these different pages so inside of all posts i'm just going to say export like this default and then this will be a function all posts okay and then inside of here for now i'm just going to return a p tag and this p tag will just say if we do this correctly all posts just so we know what page we're on again this is just for the rooting so let's copy that and let's put this inside of all of these so for alert dismissible this will be alert dismissable okay and then here this is gonna need to be alert dismissable as well let's do a space though for create post you guessed it we're gonna say create and then post and then this is gonna be create post okay continuing we're going to have edit profile so let's make this one edit and then profile see how good the autocomplete here is edit profile we want login okay just trying to come up with words to say here as we go in and fill all these in next we're gonna have profile okay this will be profile we want profile item profile item and inside of here profile item with the space we want search we are almost done here last one coming up and the last one that we want here is going to be sign up okay so let's go sign up and then sign up okay apologize for that we just wanted to write all the basic functions so that now we're able able to see what page we're on when we start handling the routing we now close all of these we no longer need them we want to go inside of app.js and i want to start setting up my react router now my react router is what's going to allow us to route between different pages and that's why i wanted to create all this component so now i can import them and then route between them so let's just go up here and let's start by importing react and let's also import use state okay and we're going to do this from the react module okay then i'm going to import all of the components that i just created so i'm going to say import and then this is going to be all posts from and this is going to be dot slash and then allpost.js now if you're hearing something right now that is my cat running around my keyboard so i apologize for that continuing i'm going to say import and then we're going to import the alert dismissible from alert dismissible okay dot js then we're going to import create post from dot slash create post then i'm going to import edit profile from edit profile i actually don't think we need the dot js here so i think i can remove that then i'm going to import login from dot slash login i'm going to import profile from profile and actually i don't need edit profile sorry i just need profile i will import search okay from dot search and then lastly the sign up page import sign up from dot slash and then sign up okay all right so while we are at our imports here let's import what we need from react router dom as well so i'm going to say import and then this is going to be the browser and then router as well as a route as well as the routes as well as link from and then this is react and then hyphen router dom now if you haven't never used this before again this will allows us to route between the different pages and make it so if we go to say slash signup it actually brings us to the slash sign up page so for our div we can leave the class name actually yeah we'll leave the class name empty for right now and we'll worry about the css later and i'm going to start actually building out the html of the page so the first thing i need to do here is put browser router now anything inside of here will allow us to actually route between it okay so browser router is kind of where we're able to write routes as well as where we're able to have links and a nav bar and all this kind of stuff so that's why i'm writing this out then we're going to set up all of our different routes then i'll make a nav bar so inside of here i need to write this roots tag and then i need to end the roots tag and this is where you're allowed to define roots you can only do that inside of roots so make sure you don't try to make a root outside of it and then i will make my roots so i'm going to say root okay the element for this root is going to be equal to we're going to start with all posts now all posts i really could have called like your feed but that's fine we're going to render the all post component for this route the path to this is just going to be home so when you go to the home page it's going to bring you to your feed which will render all of the posts on the screen or it will show only the posts of the people that you're following uh depending on uh what is it if you're logged in or if you're not logged in so i put exact here now what exact does is just make it so the path has to match this exactly if you don't have that then i could go to slash and then anything else like slash hello slash world it would also match with this path just because it's only a single slash so that's why i have exact okay now continuing we're going to have another route i'm going to say root element equals it doesn't really matter the order that we do this so let's just do login i could render it that way but i want to render it just with a slash for the path for this we'll say this is slash login now we could do exact but it doesn't really matter to me here because if you type slash login and then slash something else um that's fine we used to bring you the login page um i think it's fine to just have login like this okay now continuing not router we want to root the element for this one might as well just do sign up so let's do sign up okay and then the path here is going to be equal to slash sign up uh and then we'll have slash nice okay continuing i'm gonna have root element equals and then the next one that we want is profile so i'm going to say profile like that and then this will be path is equal to profile okay we need another root uh where's my autocomplete here root element equals yeah we want search that's good for the path we'll go with slash search okay and there's any other ones that we need uh we need create post okay let's do create post we'll say root like that and i keep saying router i mean root sorry if you see router that's not what i meant to type i meant to type root okay and then element is equal to and then this is going to be uh what was this we need to create posts so let's have create post the path will be slash create dash post okay and then we can end and for sign up just because my ocd will kill me here let's go with sign and then hyphen up and i realized that i made a small mistake here guys let's just fix this to be root as opposed to router again i don't know why i kept typing that uh it's meant to be root not router and i'm sure i'm mispronouncing that and you guys are making fun of me but that is fine okay so now we have all the different routes that we need so we can go to login sign it profile search create post we'll need to make a few more specifically we need one for logout i'm also going to do something here for profile i will actually have a variable in the name and i go with username now what this means is that i'm going to type slash profile slash and then the name of the user that i want to go to and then this will be passed implicitly to the profile component so i'll be able to know uh what the parameter was essentially to get to this profile page okay so now that we've made those changes let's run our front end so let's go cd dot dot let's cd into the front end let's go npm and then start and we'll go to local host colon 3000 and let's just see if we can go to some different routes here alright so i've just opened up my react application here notice i'm on the all post page which is what happens when we go to the default route now let's try sign up okay brings us to sign up let's try login okay brings us to log in let's try profile uh we'll go to profile slash tim actually because we need a variable okay brings us to profile i and i'm sure the other ones are going to work as well there we go we have now set up the react router all right so now that all of that is working i want to build out a nav bar so to do that i'm going to bring in a few things here from bootstrap that i need to use so i'm going to say import we're going to import the nav bar we're going to import the what else do we want here the container we're going to import the nav and we're going to import the button from and then this is going to be react bootstrap so react and then bootstrap like that okay let's start building the nav bar so we're going to use the navbar component okay inside of here i'm going to say collapse on and then this is going to be select and then i'm going to say expand is equal to medium now this says when am i going to start expanding the nav bar from a collapsed nav bar to a larger nav bar that's when the screen size is medium which is a certain pixel amount in bootstrap essentially when i have collapse on select what that allows me to do is make it so that i can collapse the nav bar when it's a smaller version of the navbar you'll see what i mean when i start messing with the screen but this nav bar will be dynamic so on mobile you'll have to actually click on the button to view all the different links then you can click on a button to collapse the nav bar and hide all of the links and it's saying when do i want to expand the bar while i want to expand it into a full size now bar once the screen size is medium okay now for the background i'm going to make this dark and all this stuff you can find from the bootstrap documentation so if i don't explain something then just reference it there and for the variant of the navbar i'm going to go with dark and that's all i need for the navbar definition here now inside of the nav bar i need to put a container so i'm going to say container this container is going to be fluid which means it takes up the entire top of the screen so inside of this container i'm going to put a few different things the first thing i'm going to put is kind of the branding now the branding would be the logo in this case i'm just going to put a name so the way i do this is i say link container i need to import this which i'm going to do now so i'm going to say import and then link container and this is going to be from and this will be react bootstrap or actually react router bootstrap sorry so i'll explain why we need this you need a link container when you are using bootstrap components with a react router seems a little bit weird but when i want to actually navigate between different pages i want to click on a button on the nav bar and usually i would use this link component to allow me to navigate to another page the issue is if i just use this standard link on the navbar it's going to be styled in a really weird way so instead i surround it with this link container and then that's going to make it so that i have the default styling of the navbar and that the styling of this link component doesn't override it hopefully that makes a bit of sense but that's why i needed to install react bootstrap or react route or bootstrap to get this link container component to allow my styling to stay consistent so i'm gonna say link container and i'm gonna say two this is gonna go to slash and then i'm gonna say navbar uh wait what the heck this needs to go inside of here sorry my autocomplete is doing some funky stuff i'm gonna say navbar.link okay and then inside of the link i'm gonna put instagram clone because that's the name of our app okay so that's the first thing that we need in this link container then what i'm going to do is say navbar dot and then toggle now this is going to be the toggler for the nav bar allowing me to expand it or unexpand it or collapse it right collapse on select and then i'm going to put all of the stuff that i want to be collapsible content so i'm going to say navbar dot collapse inside of here so all the stuff that goes inside of if this will be collapsible when i hit this little toggle button for the nav bar so now i want to add a nav so i'm going to say nav okay and then inside of here i'm going to put all of my links and link containers so i'm going to say link container and then this is going to be two and this will be slash okay so inside of this link container i'm going to say nav dot and then link and then we need to end this so nav dot link okay and then here this will be feed i mean i can go with home feed really whatever i want now let's copy this a few times the next thing that we want is search and the last thing that we want is just post now for the two links we got to change this this would be to search and this will be two create and then hyphen post all right so that wraps up most of the nav bar but i want to put something on the right hand side of the screen that allows me to log in to log out to view the profile of the current user and then to sign in if i'm not currently signed in so for now we'll just put a sign in button but then we'll make it so that once you're signed in it shows you the log out button and lets you view your profile so for now i'm just going to say navbar.text because i don't want this to be kind of a link like you see before i want this just be regular text and then inside of here i'm going to say link and then for the link this link is going to go to and then slash login and then i'm going to say not signed in okay so it's going to allow me to sign in when i click on this it will bring me to the login page so let's have a look at what i did understand i just wrote a ton of code at once to do that we can just refresh the page on slash home here and we should see that we get a navbar uh okay let me just go here and clear the cache and we're still not getting this um all right i'm not sure why we're not getting a navbar here let me have a look and i'll be right back all right so i was running this code and i was having trouble figuring out what the problem was because i wasn't seeing anything being rendered on my screen but then i looked in the console and i realized that i actually named this right here on line 21 link when it needs to be brand so my apologies but this needs to be navbar.brand and then everything else should be fine and now when we come back to the screen we should see that we get a nice navbar here we have feed search post not signed in i'm going to show you how we can move that to the right later on when i click between the different links it brings me to the different pages when i click on the brand here instagram clone it brings me to that page so i just want to jump in here for one second and mention that if when you're looking at the nav bar you're not getting a styled navbar and it looks really strange and kind of default styles what you can try doing is adding this line right here on line 4 to your index.js file so you're gonna have to just type this in dot dot slash node module slash slash bootstrap slash dist css bootstrap.min.css and that will actually import the css file just in case for some reason it's not being imported now this line errors out for you then what you can do is just manually install bootstrap it should already be installed but you can do npm install and then bootstrap like that and then you should be good to go and you should be able to actually run this line again i'm not sure why that would be a problem for you but i've had that in the past so again just import this line right here in your index.js file and it should fix that problem for you also make sure your index.js file is right inside of src and none inside of any other folder otherwise this relative import is going to be different all right so that is all we need for the nav bar and also you can see when i make this small enough it makes it collapsible so now i can open and close it so let's get the css working on the navbar just so that we have this moved over to the right hand side then we'll move on and code out some more stuff so to fix this and make that go over to the right hand side what i'm going to do is add another nav group here so i'm going to say nav i'm going to put my navbar.text inside of here and again all of this you can find from the bootstrap documentation i'm not going to explain how all of it works and what i can do is go to this first nav here i can say classname is equal to and then me.auto now what this will do is make it so that we're going to space these two nav components out and that other nav component is going to go to the right hand side so you can see now it's moved over to the right hand side and if i remove this class here so let's remove that and have a look notice that it kind of comes back over here to the left so me auto just makes it so we're going to take up the entire space that we have so this will take up as much space as possible and then essentially push this over to the right hand side if we want to have a look at that more specifically we can inspect here and when we look at we have our div navbar collapse we have another div notice it's taking up all of the space right this one that has the me auto on it it's pushing all the way the right hand side then since it takes up all the space it pushes this tag over here all the way to the right hand side of the navbar okay so that is the css that we needed for the navbar i think that is all good for right now now we can start looking at login and sign up and then sending some requests to our api for actually creating an account and then signing into an account so let's start by coding out the sign up page which is going to allow us to create a new account so inside of here i'm going to say import and we're going to import use state from and then this is react then i am going to import a form and a button from and then react bootstrap then continuing down here i want to set up some state for the different form entry points or form elements that i'm going to have so i want to ask the user for a first name a last name and a username so i need state to store all three of those pieces of information so i'm going to say const and we'll go with first name and then why is my autocomplete giving me such weird things maybe set first name is equal to use state and this will be a string and then i'm going to say const and then last name and then set last name is equal to use state and then const username set username is equal to use state all right we'll use that state in a minute then we want to write the actual html of the page so we're just going to set up a basic form so i'm going to say form form like that the class name for now will be empty but we are going to add some css to make this centered on the screen and i'll show you how we do that in a minute and then inside of here i'm going to say form dot group i'm going to do a bunch of these groups for each of the different elements that i have or inputs that i have now for the class name of these groups excuse me it's going to be mb4 which stands for margin bottom 4 which just means we're going to space out our different form groups so that we have a margin at the bottom and they're not kind of squished directly together then i'm going to create a label so i'm going to say form.label the first thing we'll ask for is the username and then we need a form dot control element which is equivalent to an input element okay form.control and then for this it's going to be type is equal to text and then the placeholder is going to be username and then the on input function we're going to call a function although let me fix the string here i will write that function in a minute now i also realize i don't need to end the tag like that i can just end it inside of here and i think that's going to be better okay so here we go we have our first input here again we have username that's going to be the label for this here and that's inside of a form group okay let's copy this two times because now we're going to have the same thing for first name and for last name remember we're not going to do a password here we're just going to allow them to create an account without any authentication and then sign in by just using the account name here let's change this to be first name and let's change this to be last name okay i think that is all good now we want to set up the different functions as well as the button to submit the form so outside of this form group here i'm going to make a button okay this button will be our submit button so the variant of the button is going to be primary this is going to make a nice blue button you also can use a variant like secondary you also have danger and warning i believe which will give you kind of a red and yellow color the type of this is going to be a button and then the on click is going to be a function again that we've yet to write and then inside of here we're just going to say create account for this button i'll show you what the page looks like in a second uh but that is pretty much what we have for the html of the page all right so now we can add the different functions which are going to update the state for our respective input fields and again form.control is just equivalent to an input field but it's going to give us a nice styled element so what i'm going to do is make some functions here i'm going to say function we'll go with update username this is going to take in e now e is going to give us what we actually typed into this input field so what we're going to do is say set user name and then this is going to be e dot target dot and then value and that will give us exactly what they typed into this form control element now we can copy this function and just change the name of it to be update and then first name and then rather than set user name this is going to be set first name then copy this one and we'll do the same thing here for last name so this will be update and then just change first here to be last and this to be last okay then i'm going to go inside of here and i'm just going to write the respective functions so this is going to be update and then username this is going to be update and then first name and this is going to be update and you guessed it last name and then we need an on click here for this button so let's just make a function uh and is for some reason it's not showing that i'm calling this function i probably just need to save the file okay that's fine for now yeah okay now it's good but i want to go to function here and say on create or actually let's just call this create account okay we'll take an e here as well for now we're not going to do anything but i'll just call it so we don't get an error in our jsx here which we're writing okay so create account save that should be all good now i'm just going to open up my react application of course i'm running the npm start command in my terminal that's why i'm able to view this right now and let's just go to not signed in okay it brings us to login i want to go to the sign up page actually so sign hyphen up and then notice that we get this nice form now i want to put this in the center of the screen again i'll show you how we do that in a second but for now we have username first name and last name and then the button to create an account excuse me so let's code out the logic to actually press this button and have it make an account for us and then once we do that we can style the elements all right so let's come inside of here and really what we need to do is just start coding out these different functions now the only function we actually need to write here is going to be create account and what we need to do is send a request to our backend which can create the account for us so before i can actually complete this i need to write the corresponding api endpoint in my back end so let's go to api here let's go to index.js and we're going to write our very first route here that's going to be able to create an account for us so what i'm going to do is write a post request here or write a post root i guess because when we're creating something we're going to do that with the post method so i'm going to say app.post and then for the url here this is going to be create and then user i could write this in a different way but i think that's fine for now and then we need to accept a request and a response object and then inside of here we're going to write the function that we want to occur whenever we hit this endpoint okay so the first thing i'm going to do is i'm going to get all of the data from the request body so i'm going to say const and we'll go with body is equal to request.body this is how we can get all of the data the json specifically that's sent to this post request now we're going to expect that we'll be sent a first name a last name and a username and then we'll send that information to actually a separate file to the api calls file where then we will call the sanity api to create a new user so again this is really just a proxy that's going to be calling the appropriate functions that will then make the api calls to our sanity api and database okay so i'm going to write a function that we've yet to define but it's called create user and we're going to pass to this body dot and then first name body.lastname and then body.username and then we're going to say dot then because this will be a promise we're going to take data and we're just going to say res.json and then data now what this does is simply return this data as a json as the response from this right here so hopefully that makes sense but that's all it's doing we're going to call this function it's going to return to us a promise once the promise resolves we're going to get some data from it so a result and then we're going to return that data so now that we've written this create user function let's go to the api calls file this is where we're going to interact with the database so i want to write all of the functions that are using my sanity client inside of here so the first thing i'm going to do is import the sanity client because this is how we're going to interact with the database right using the client that we set up from client.js and this is going to be from and then dot slash client.js then i'm going to say const functions is equal to and then this is going to be an empty object and the reason i'm doing this is because i'm going to put all of the things that i want to export from this file inside of functions and then just export this function's object so to show you what i mean i'm going to say functions dot create user this is going to be equal to an arrow function and this arrow function here is going to take in the first name the last name and the username then inside of here i'm going to use my sandy client uh yes i'm going to use it i'm going to say return sanity client dot create now dot create is how you create a new document you can create any type of document using this command and what you do is you pass an object of the document you want to make so in this type i in this case story i put the type so i'm going to say underscore type and this is going to be user the lowercase version so the name of our database model then we need to put in all of the fields that we want to complete so i'm going to say first name is first name last underscore name is lastname username is username and then created at is going to be new and date okay and that's actually all we need to create a new object in the database or a new document now this is going to be a promise so we're returning the promise which then we can resolve from inside of index.js so once this finishes right i call my dot then i get the data the data is just going to be the resulting object that we created so it's going to give us the json of that object in the database and then we'll return that here as the response from this route so hopefully that makes sense but just to mention here i'm not filling in all of the fields for this user and i don't have to do that and if i go to database and i look at my schemas and i look at user.js you'll notice here that i'm just using the name field that i have right so first name last name username then i didn't fill in photo bio or following and when i don't do that they'll just get the default value of this type so again empty array empty text and then an empty image which is fine we can fill that information in later on we actually edit a user's profile so that's it this is how we create a user now that we've done that let's actually call this from the front end because we've set up really all we need in the back end you're going to notice the back end will be fairly straightforward we just require it kind of for security here so again we're not exposing our sanity api token on the front end so inside of this create account function what i want to do is send a request and i want to send a request to our backend right so what i'm going to do is start by setting up my request options so i'm going to say const and then this is going to be request options and this is going to be equal to and then i need to make my method which is going to be post and then i need to add some headers here so for headers i'm going to say inside of here the content type okay is going to be and then this is going to be application json and this is content hyphen type my apologies that's all we actually need for the headers and then for the body this is going to be the data that we want to send so we're going to pass json dot and then this is going to be stringify okay and we're going to stringify this object here and this object is going to contain the first name as the first name key the last name as the last name key and then the username as the username key okay so that's what we need for our request options we're going to use this inside of our fetch request so now i'm going to say fetch and i'm going to say slash create and then user okay because this is the url that we want to hit and then we're going to pass our request options and for some reason oh i'm putting this inside of my request options oops let's put this down here okay that should be better so fetch create user request options and we're going to say dot then so whenever this response actually comes in we're going to get our response which will be underscore res and all we will do here is write a little arrow function and for the arrow function for right now i'm just going to print out the response so i'm going to say console.log and then underscore res and i'm actually going to do underscore res.json just so we can see what the response was and then we'll do a dot catch here and for the dot catch we'll catch an error and we will just console.error and then whatever that error is okay now we will do something else here in a second so we actually show an alert on the screen saying that you created the account and then we'll navigate you to the home page but i just want to look and see if this is actually working and for right now we can test that by just printing out some stuff to the console so my react app is open so let's go to the console here and let's try to create a new account so console for the username let's just go tim for the first name let's go tim for the last name let's go with my last name which is reseca and okay we got an issue here so it says promise pending rejected 500 internal server error okay so we're getting a few issues here the first problem that i'm realizing is that i forgot to run my backend api so what i'm going to do is open a new console here i'm actually going to split this terminal and inside of here okay let's make that a lot smaller let's go cd and let's cd to our api and then let's go npm start okay that should fix that problem obviously we need the back end running for us to be able to send a request to it and then let's come back here and let's try this again so i'm just going to press create account and okay again we get 500 internal server error so let's refresh this and try one more time tim tim ruseka create account okay still getting there so let me have a look at this and see what the issue is all right so i was just having a look at this error here and there's actually quite a few things that we did wrong so first let's go to the api calls function and let's export the functions which i forgot to do so export default functions okay which is this object right here then we're going to go to index.js and we're actually going to import this because i can't call this create user function when i haven't imported it as i'm sure many of you already noticed so i'm going to say import let's spell import correctly okay functions from and then this is going to be dot slash api calls and then make sure you add the dot js here okay now that we've done this we want to get the individual function object from this functions object or the individual function from the functions object so i'm going to say const and then i'm going to put inside of curly braces here create user is equal to and then functions like that now i forget the exact syntax name for what i'm doing here but i'm going to explain it as i'm breaking down this object into its individual components or individual fields and so i'm able to get the create user function from it by just doing this and if i add other functions later on i can just write them out in this way and yeah that's how we're going to actually get access to the function okay so now we have access to this function here also on my front end i'm going to go to sign up here and i'm sure many of you already realized this for our response what i'm going to do actually is i'm going to return underscore res.json because this is a promise to get the json and then i'm going to say dot then and also we can remove the underscore here and just have it res and then i'm going to say data and i'm going to say console.log and i'm going to log the data and what did i just do actually move pages okay i don't even know how i just did that let's go back into sign up okay let's save that and now we should be printing out the information that we need okay my apologies about that guys let me rerun the api so you are going to have to restart that and now if i come here and i refresh let's go tim tim tim mercica create account and let's see what we get and notice that we actually get this object and we have now created the account awesome so we have created that id rev type we have a bunch of other stuff we can look at all the fields we have username created at type updated out all this stuff now what i'm going to do here is go to sanity studio and just make sure that object was created so let's run one more terminal i don't want to split it again but i guess we'll have to and let's cd into database and let's go sanity start and now once this is compiled i can go to the studio again i can actually look at my uh my new entry in the database all right so it is now compiled so let's go to localhost uh and then i want to go to three three three three okay sandy studio let's wait for this to load and let's see if we've created this new user and we can view it inside of here so i'm gonna go to user and we should see now that we have users now the reason we had two is because i kind of messed up and i was messing around with this while i was trying to fix the error before anyways the point is we now have the users that we created and let's say we want to delete one of them because in this case we have duplicate what i can do is go here i can click on this little down arrow and i can click delete and i can just delete the user like that okay but we do have the user and this is great for debugging we can actually check to make sure everything was created and for this user here we have our first name last name and then username and then we can manually enter some other information if we want great okay so now that we've done that i want to put this in the middle of the screen and i want to start adding some alerts on the screen that tells us hey you created the account successfully because we need some feedback to our user right so let's move this down i'm just going to hide that for now we don't really need to rerun that and let's now put this in the middle of the screen so to do that i'm going to go into css i'm going to make a new file here and i'm going to call this dot signup.css then inside of sign up let's look at what classes we have so for the form i'm going to add a class name and this is going to be sign up and then form so now we'll use this class name inside of our css file but first let's import the css file inside of here so let's say import and then this is going to be dot dot slash and then css slash and then sign up dot css okay then we'll go to signup.css and we'll go dot sign up form and we'll write the custom css here to put it in the middle of the screen so i'm going to use flexbox to do this so i'm going to say display and then flex i'm going to say align items this is going to be center i'm going to say justify content this is going to be center sorry this needs to be a regular colon not a semicolon then we're going to say the flex direction is going to be column which means all of our items will be aligned vertically and then we're going to have height and this will be 100 just so we fill the entire screen okay we may we might have to add some more css as well to make this work up but for now that should do the job so let's open up our app and notice now we are in the middle of the screen awesome now the thing is i want this to actually be dead center in the middle of the screen not just aligned in the center uh horizontally so to get it to be dead center vertically i actually need to extend the size of the root element or the root div of my html so if i go here and look at the html so i go elements you can see that the body is only this high so if i want this to be in the middle of the screen what i need to do is make it so that this root div here takes up as much room as possible and then once that's happening this will automatically be pushed into the middle of the screen because of the elements or because of the css styling that i put here alright so to fix this problem i actually need to write a few pieces of css again just to make it so that the root div is going to extend the entire size of the screen and then all the other divs inside of that that's containing the main content of the page also extends the full size of the screen just so this goes in the middle so i understand this might be a little bit confusing but we're going to go to index.css so inside of index.css i'm just going to write some css here for the root so hashtag root which is the root div i'm just going to make the height 100 percent and then i'm going to make another class here and we'll use this in a second called fill parent and i mean this makes sense what it does but it's going to fill its entire parent and the way it's going to do this is by having a width of 100 percent so let's do that it's going to have a height of 100 percent and let's add a semicolon not a comma i keep messing that up and we're going to say the display here is flex okay and then the flex direction is going to be columns that everything we put in here is going to be aligned vertically because that's fill parent while we're here let's write another class that we're going to use later called center so i'm going to say dot center i'm going to say height this is going to be 100 and then percent we're going to say align items this is going to be center okay we're going to say display and then flex and then we're going to say flex direction and this will be column okay so we're using flexbox for all of this now i'm going to go to myapp.js and here we have an empty class name i'm going to put fill parent now what this is going to do is make it so all of the content inside of here will fill the parent so fill that root div so we should expand it and take up the entire screen we might have to add a little bit more css but i think that should be good for now so let's go here and let's just clear the cache and reset and okay we're not getting it in the middle of the screen so let me have a look here and see what the problem is all right so i've found the problem very simple fix here we just need to go to body and we need to go height and then it's going to be 100 vh which stands for 100 vertical height so just the entire width or sorry the entire height of the screen the viewport specifically uh so this will now make it so the body has the max height then the root will have the max height and then the div that we have will have the maximum height as well and so we should get this centered in the screen fingers crossed let's go here and notice that we now have this right in the middle of the screen which is what i wanted okay now i understand the css is probably not as good as it could be i'm not a css master again i'm not focusing too much on styling but now to get everything in the center of the screen should be pretty straightforward okay so let's try this one more time let's make an account here let's say joey let's go with joe and smith maybe joey123 create account let's go to console and notice it creates it so now what we want to do is we want to navigate to another page and then give some feedback to the user so we can start with kind of an alert for the user and to do that i'm going to go to this alert dismissible component and we're going to start coding this out and then we'll use this inside of our app component and we'll have kind of one simple way to trigger alerts from the main app component and i'll show you how we do that for now though what i want to do is import a few things so i'm going to go and say import and then this is going to be use state and this will be from and then react and then i'm going to import the alert component and this will be from react bootstrap so from react and then bootstrap like that okay now inside of here we need a piece of state so for the state we're going to say const and then this is going to be show set show and this just tells us if we're currently showing the alert because the alert will have a button that allows us to close it so by default this will be true but we could make it false we also want to accept three props here to this component i want to accept a message a variant and a delete alert function so when the alert is deleted we will call this function it's kind of a callback right the message is the message we want to show and then the variance is well the variance for the alerts that's very dynamic and we can show a bunch of different things so here i'm going to say if show then i will return something otherwise though then what i will do is just return no because we're not going to show anything if we're not showing the alert right so if we are showing something then i'm going to return an alert component so i'm going to say alert and then alert like that and yeah we can end it like that that's fine inside of here we're going to put the message for the alert and then for the variant this is going to be equal to the variant okay and then we want to have an on close and the on closes when we click that little button right and what we'll do here is we will have an arrow function and this error function will simply call delete alert but it's also going to call set show and it's going to make this false okay so let's put our curly braces here and then let me explain exactly what we're doing okay come on give me uh some autocomplete what's wrong with this i could not find matching tag oh i need a lowercase on the l okay and then i want to add something to the end here which is dismissible and this will just be true now when we put this in we don't have to manually say true but this makes it so we can dismiss the alert alright so that's actually all we need for this component so we have a piece of state telling us if we are showing the component or not so if we set this to false then we're not going to render the alert but if it's true then we will be rendering the alert right and then for the variance that's whatever variance they pass in there's a few different options like i think we have success warning we may have danger there's a bunch of them i'll go through them later on close means when we click the little dismissible button for the alert then what we're going to do is delete the alert so we're just calling this delete alert callback function and then we're going to call set show and what set show will do is make this false right it's just changing the state so then we'll no longer render the alert and then inside of the alert the message will show as whatever message they pass to this component okay so now that we have alert dismissible i want to go inside of my app component and i'm going to use some state inside of here for the alert so we'll make it so you can have one alert at a time so we're going to say const like this and then this is going to be alert and then set alert and this will be equal to use state and then inside of here this state is actually going to be no and we'll have an object that is stored inside of here that will give us the variance as well as the message for an alert and i'll show you how we trigger that so now what i want to do is dynamically render this alert underneath the nav bar if we do have one so i'm going to write some jsx here and i'm going to say alert question mark and then if we do have an alert then i'm going to say okay i want to render this alert dismissible component okay come on auto complete give it to me alert dismissable nice okay i want to render this component and what i need to pass to it is my alert so i'm going to say dot alert okay and then i want to pass a callback function for delete alert and what the delete alert callback is going to do it's just going to be an arrow function that is simply going to call set alert and it's going to set it equal to no okay i believe that's all we need so if we have an alert we're going to show this otherwise we just won't show anything so we'll have no okay hopefully that makes sense if alert does not know render this component dot dot alert is going to again decompose and kind of break down the alert object the alert object is going to have the variant as well as the message and then we will delete the alert and the delete alert function is just this which is going to set the alert here to be null so we'll no longer render this alert component okay so now how do we actually trigger an alert to be shown well i need to pass the setalert function here to the props of in this case the sign up page and then it can use that function to change the state in the app component which will then show the alert so if i go to sign up and i say set alert is equal to and then set alert like that then we're able to actually now call this function from inside of there so let's now go to sign up and let's see if we can use this so instead of signup in the props i'm going to take set alert okay and i keep typing in uppercase l it needs to be lowercase and then here when we get our data what we will do is we'll say set alert and the alert is going to have a variant of this will be success this is going to be a green alert and then the message is going to be account created so we'll say your account has been created thank you very much autocomplete and what is wrong here am i missing a bracket or something uh okay let's put that there um set alert oh i need to get rid of this semicolon sorry okay and i think that should fix it nice okay so now we are setting an alert once we get the data and just so this doesn't give us an error we'll do underscore data like that all right the next thing we need to do is navigate to the home page so to navigate to the home page i'm going to import a hook here so i'm going to say import and then this is going to be use navigate and this is from and this is going to be react router dom now this is only in react router version 6 and above so if you're using version 5 although i don't know why you would be then this is not going to work i would just make sure you're using version 6. okay then what i'm going to do here is say const navigate is equal to use navigate and what use navigate allows me to do is navigate between different pages and go to a specific root so now what we'll do is after we set the alert we'll say navigate and we'll just navigate to whatever page you want to go to which in this case is just going to be slash although i just need to add some curly braces here so we can have multiple statements being executed at the same time let's add a semicolon and now i believe we are good okay so we're going to set the alert we're going to navigate so now we can test this out by creating another account and see if it navigates us back to the home page so let's go here to react let's refresh let's just go test underscore account let's go test and then account and then create account and let's see okay your account has been created and then navigates us over to the other page and if i hit the x button it closes the alert awesome we now have a way to create alerts we now know how to navigate and now what i want to do is make it so this little banner here tells us if we're signed in or not because after i create a new account i should just automatically be signed into it so how am i going to do that well from my app component here i'm going to make a piece of state i'm going to say const this is going to be user and then i'm going to say set user and this is going to be equal to use state and this is just going to be a string now this is going to be the name of the user that's currently logged in and we're just going to store that in the app component this is not the best way and if you're doing real authentication you do this in a different way but for now we'll just store the user here in the app component as a piece of state and that way we know if we're signed in and then we can check and render something different here for this navbar text so if we are signed in so if we have a user then we're not going to render not signed in we're going to say you know signed in as whatever and then give kind of a link to go to that user's profile so in fact let's do that now so here what i'm going to write is user question mark checking if we're signed in or not and if we are signed in then i'm going to say navbar.txt okay and then for the text i'm gonna say signed in as and then we'll put a link and this link is going to go to so two equals and then this is gonna be slash profile slash but then we're going to add whatever the current user is because to get to the user's profile well it's profile plus and then the user name and then we will have inside of here the name of the user okay uh nice i think that's good for now and then we need to just have an option here where if they're not signed in then we're gonna show this so we're gonna copy that paste that here and now this is what we have so if we're signed in we show this otherwise we show this however if we're signed in we also want to show a button so the button will be inside of the navbar text as well so we'll say button okay the type is going to be button the variant is going to be primary okay and then we'll have an on click and what the on click is going to do is just going to set the user to be false so we're going to say this is an arrow function and this will be set user and we just set this to an empty string and then here the text on the button will be log out and i think that's all we need although we also want to make it so there is an alert that goes on the screen when we are signed up so we'll put our curly braces here and then we will set the user to be an empty string and after we set the user to be an empty string we're going to set an alert and we're going to say set alert we need to pass a variant the variant will be warning which will give us kind of a yellow one and then the message will say you are now signed out okay so you are now signed out exclamation point okay so we can test this out now again feel free to pause the video and copy this or reference the code from the link in the description but when i go here and i refresh the page and i go to sign in let's create an account sorry not signed in is bring me the login page i need to go to the sign up page so sign up page okay so let's make an account let's go with tim one two three four tim is great okay create account and then it says your account has been created brings us here and this is not changing okay i need to check why this is not changing because that should have changed so now we're actually seeing the user that's signed in ah well the reason that is not changing is because i forgot to manually change it from sign up i have not actually set the user which is what i need to do so what we're going to do is in sign up here we're going to take another prop called set user and then after we navigate or actually before we navigate we're going to say set user and we're going to set this equal to whatever the username was so i can look at the data and actually i'll remove the underscore now because we're going to use it and i'll just get data dot and then user name and that's what i'll set the user to because well that's the username that the user just signed up with now though i need to pass the prop to sign up so i'm going to go here to where i'm rendering sign up and i'm going to say set user is equal to set user okay so now this should work again my apologies about that error let's go and fix this okay so open this up let's just give it a refresh let's go to the sign up page okay sign up and we'll make an account tim one two three four five tim is great let's fix the capitalization okay create account and now notice that we get signed in as tim1234 and then we have the option to log out now i'll show you how we can add a little spacer between those we need to make it so we hit the log out button it signs out which is what it did okay i forgot that i actually already implemented that so that is all good that is working okay next we'll do the sign in page however let's just add that little spacer between the log out button just so that it looks a bit nicer so here we have signed in as what i'm going to do is just put some jsx and inside of the jsx i'm just going to put an empty string i'm going to put a little bar here now i know this looks a bit weird but it's going to be a bar and then an empty string so we just have kind of a little spacer as well as this pipe now i don't know if i actually even need the empty string but i think that should make it so it spaces out a little bit more but let's have a look at this now if we create a new account so again i have to make so many accounts it'll be nicer when we can just uh just sign in sorry not create post create user or what am i doing sign up okay let's go to not see sign up just regular sign up okay and let's go joe joey12345 very creative joey smith don't really care about the spelling right now we're just trying to test this okay there we go now we have a little spacer between the logout button and between signed and as and when i click on this it brings me to this profile page okay now we log out and it signs us up nice now let's do the sign up page it's gonna be very similar or sorry let's do the login page can be very similar to the sign up page so let's close this let's close this let's go to login and let's start coding this out so similarly to the signup page i need to import use state so i'm going to import use state from and then this will be react and then i need to import a few things here from bootstrap specifically i need to import the form and the button so i'm going to say import form button from and then this will be react and then bootstrap okay so let's go bootstrap like that and i'm going to say import and then we will import use navigate as well as link and then this is going to be from react router and then hyphen dom okay nice now inside of here we can code out our state to start so i'm going to say const and then this is going to be username set username is equal to use state this will simply be a string and then we're going to say const navigate is equal to use navigate we're going to use this though when we sign in we can be redirected to the home page okay now that we have that let's write our login form this will be a little bit simpler than the other one because we only need a username attribute here or username input field so i'm going to say form form the classname is going to be equal to and this actually needs to be the exact same class that we had for sign up so that we go in the middle so really what i can do here is i can just take this class and i can paste this inside of index.css and rather than calling it sign up form i can just call this center form and now i can just use this inside of any of my form tags really i could use it for any div as well and it should just put it in the center of the screen so let's just make a change quickly here let's put this center form and then inside of sign up let's change it so that rather than using the class name of sign up form we're using center form because they're going to be the same and then we can no longer import sign up and i can remove the class from here because i don't need that anymore and if we add any more css in the future we put it in that file okay that should be good let's go to log in so we have our center form now we need our form dot group okay so let's add the group uh for the class name of this we're gonna say class name equals and then margin bottom and then this will be three i believe the other one we did four but let's just go with three let's change it up for this one we'll go form dot label and then we're going to say the label is username and then we want a form dot control which again is equivalent to the input tag okay for the form dot control we're going to say type is equal to text we're going to say the placeholder is equal to username we don't need a class name but we do need an on input so on input here will be equal to an arrow function we could write a custom function as well but this will just take in e and then we can say set username e dot target dot value now we could have done this before and sign up but we've already finished that so we don't need to change now we have type placeholder and then we have our on inputs now we'll get what you type in now that we have this i just want to add something that says how to get to the sign up page because right now we have to manually go to that link so here i'll do something like if you don't have an account then click on this to go to the sign up page right we've seen that before on on sign up forms so i'm going to say small this will just give us some smaller text and then the id actually we don't need an id but the class name of this will be equal to form text and then text muted this just makes it so it's a bit grayed out and it's not as strong as the standard text i'm going to say don't have an account question mark sign up and then we'll put a link inside of here okay and we'll say here now for the link i'm just going to say 2 is equal to and then this is going to be sign up and i think that should be good for that okay now that we've done that let's add a button so the button is going to go outside of the form group so it gets spaced out a bit we're going to say variant is equal to primary you get a nice blue button for the type we will just say this is going to be a button and i'm going to say on click is equal to and then the on click function we'll need to write and we'll do that in a second and here i will say sign in or actually let's just go with login all right so now let's write the function for handling the login so i'm going to say function handle login okay inside of here we're going to have a fetch and we need to write that back in endpoint so for right now we can just say console. the username and then we'll finish this later but for the on click we can just write handle login and we do need to take an e even if we don't use it because it will pass e to that function implicitly all right so now we have the login page sorry not export this is e okay uh and what's the issue here is saying export is no okay no it's because it's still reading the previous one it hasn't seen that i changed this to e anyways now we have login so let's just go to the login page and see what it looks like okay so there we go we can see we get our nice login page i just have to refresh this so everything is working fine then if i click on sign up okay that is a bit weird to bring us to login sign up the reason for that is i need to add a slash here okay apologies about that let's refresh the page let's go back to login okay let's click this now and then it brings us to the sign up page now so we can click this to get to login okay awesome so now we actually want to log in which requires that we have an account so now we need to write the back end that actually will check if the account exists for the user we're trying to sign in as and essentially return to us the account data for that so let's go to our back end here so let's close a few of these files that we don't need let's go to index.js and now let's write to the root all right so here i'm going to write app.get because it's going to be a get request and this is going to be i guess get profile and we will say request and then response this will be an arrow function and then inside of here i'm going to accept a query parameter which is going to tell me the user that i want to get the profile for so i'm going to say const user is equal to request dot query which is the query parameters dot and then user and then i'm going to send a request here to get profile so i'm going to say get profile user dot then and then this is going to be inside of here data and we're going to say res.json and we're going to return that data okay so now we need to write this gap profile function from api calls so first of all let's just import it so we don't get the error we got before and let's go to api calls and now write get profile so here i'm going to say functions dot and then this is going to be get profile this is going to be an arrow function this arrow function is going to take in the user and then what we're going to do is say return sanity client and then not get this is going to be dot fetch and what dot fetch actually accepts inside of here is a string which is going to be the query that we want uh to get okay so the query language that we're going to use inside of here is something called grok groq now that is graph relational object queries and i'm just going to write them out here i'll leave some documentation in the description that explains exactly how to write them but it would be a very very long video if i went through explaining every aspect of the query language so you'll start to understand once i give you an example i would just bear with me here because it will look a little bit confusing right now so we're going to put an asterisk we're going to put our square brackets here and the first thing we're going to do is to find the type of the document that we want to query from the database so in this case the type that i want is a user and i just need to single quote this just so that my quotes don't get all messed up here okay so we have our single quotes we have our type which is equal to a user inside of double quotes i'm going to say and and and then username is equal to and then this is going to be the dollar sign and then username because this will be a variable that i input in a second in fact i can just do user like that so what i've just written here is essentially the condition for this query so i'm saying okay i want to get all documents that are of type user and have a username that's equal to the username that i pass right here so that's just going to give me a single document at least that's what i hope for and then what i do after this is i define all of the fields on this document that i'd like to receive so i actually need to put this inside of back ticks just so that we can have this string extend onto multiple lines and inside of here what i'm going to write is all the fields that i want so i'm going to write dot dot dot now what this does is it's going to give me every single field that's that's what dot dot does okay then i can write then what i can do is write my own custom fields in here and kind of modify the fields to get some certain attributes that i'm looking for so a field that i want is following i want to know how many users this person is following so i actually don't care about the following list i don't want to know the individual users i just want to know the count of how many people this person's following because we're going to use this for a few other things as well not just for getting the the username of the user or checking if the user exists right so i'm going to use the account function and i'm going to count how many elements are in the following array of the user's following field okay that's what count is doing just tells us how many are there and then it's going to put it into a field called following so this will essentially override the current following field and give us just the number of people the user's following then i'm going to say followers and this is a bit more difficult what i need to do for this is another query and i'm going to say type is equal to and then this is going to be user and i'm going to say and and references and then i'm going to use the i believe it's called a hat operator or the carrot someone can correct me in the comments on exactly what this symbol is and then dot underscore id now what this references here uh or what this story it's weird because it says references but what this refers to is the id of whatever this user is okay so whatever user i get here from this query or whatever users i get from this query this is referencing that user and so what i'm saying i want to get all the fields i want to get the following and then i want to get followers for the followers i need to find a user that references the current user that i'm on and then add that to a list here again i know this is a little bit weird but that's kind of what this query is doing it's going to give me a list of all of the users that reference the current user that i'm receiving and so that will tell me all of the people that are following this user okay hopefully that is clear and then next i'm going to say photo and since the photo gives us a few different attributes i need to say photo asset arrow like this and then i'm going to break this into an underscore id and a url so a photo insanity is kind of a nested object it gives us an asset it also gives us a few other things as well and this asset what i need to do is kind of break it down into an id into a url so i'm saying okay for the photo the aspect of the photo that i want to get is the asset and then from the asset i want to get the id and i want to get the url and so i have to write that in this way okay that's just how you get the id and the url of the asset of the photo the url is what we use to actually render the photo and it will be hosted by sanity we don't need to download the photo or anything like that okay so that is this first query again i know it's a bit confusing please reference the documentation if you want more explanation but hopefully you can at least understand the basics of what's going on here and i think i can put this on another line it'll make it a little bit easier to read let's just indent all of this by one all right so now that we have this we should actually just be able to use the back end endpoint that we wrote and it should return to us information about the user that we passed here to get the profile from again we're going to use this in multiple places that's why i wrote all of these other aspects of the query if we just wanted to see if a user existed then we really could just have dot dot dot in here and that would just return all of the fields related to the user so index we wrote this as get profile and we're accepting a query parameter so when i go to login now inside of here i'm going to send a fetch request that's going to contain a query parameter so what we'll do is say fetch and then fetch is going to be slash get profile okay and then we're going to say question mark user is equal to and then i can do a concatenation if i want i'll just say plus and then this is going to be username right here okay so whatever they entered into the field then i'm going to say dot then i'm going to get my response i'm going to return myresponse.json then i'm going to say dot then and i'm going to say data and i'm going to look at the data and do something inside of here so for the data what i need to check is if the length of the data is greater than zero now what that means that i actually do have a user because i'm going to be returned a list from sanity of all of the things that match that query so if i go back here this will give me a list of everything that has a username that matches with this so theoretically if i had multiple users with the same username which we're not going to allow but if we did have that i would get all of the users that had that username right because it's giving me a list of all the results so even though this will only give me one result sanity doesn't know that so by default it returns to me a list or an array and so what i have to do is look in that list and see if we have at least one element if we do that means the user exists if we don't that means the user does not exist and then we have to grab the first element out of this array and use that to access the different fields so i'm going to say if the data dot length is greater than zero we need to put this inside of parentheses here then what we can do is say add alert okay we're going to have to take add alert in here so let's say add alert we also want to take in set user so we'll pass that from app in one second but the alert that we want to add is going to have a variant of success okay and it's going to have a message of success fully logged in exclamation point okay so that's what we need for the add alert then we're gonna say set user we're gonna set this sorry let's go to set user to be the data zero dot username and we know we can do this because we'll have at least one element in our data right so data.zero data zero sorry.username and then we are going to navigate to the homepage okay so we're just gonna navigate to slash all right now otherwise what we will do is just set an alert saying that there's no user with that name so we're gonna say add alert okay this is gonna have a variant which is equal to and this will be danger which is going to be red apparently i can't type very well today and then we're going to have a message that says no user with that name exists okay let's fix our capitalization all right we'll do an exclamation point as well okay so that's what we have for handle login and then we'll just have a cache here just in case something goes wrong and we'll have an error and we'll just display that error as an alert so i'm just going to say add alert okay variance danger message will be air and then error.message nice okay so i think that's all we need for the login let's see if this works now and if it actually logs us in and brings us back to the home page so let's go here let's refresh we actually need to rerun our api because we've now changed one of the uh what do you call one of the functions in there so let's end that let's rerun npm start okay it looks like that's working successfully all right so let's attempt this from our front end let's give a refresh let's type in tim and log in and it doesn't seem to be working we're not actually getting anything here and okay so we're getting a crash from our back end and let me go and have a read here and see what it's saying okay param username reference but not provided okay so this is from our sandy client so let's go to our api calls and what i need to do is just fix this so that user is going to go inside of a squiggly bracket sorry kind of forgot that i need to do that since we can pass multiple parameters i need to be inside of a javascript object and so i can just write user like that and i think that will fix the problem for us so let's try this now let's rerun the api so yes you want to end that let's rerun okay and now let's come here let's refresh and let's go tim let's hit login and okay again we got another error so what's the error this time is it saying the same thing uh param username reference but not provided okay so the issue here is that user does not match with username so what i can do is make this username colon and now hopefully that should fix the problem so let's rerun this again my apologies guys whenever you're working on a large project you are going to get tons of errors i like to keep them in just to be real with you that uh not everything is perfect anyways let's restart this so let's refresh let's go here with tim let's hit log in and we got ad alert is not a function okay nice so we can fix that problem now but that means that the sanity uh what is it query that we had didn't fail so at least we're getting an error on the front end here not on the back end we're not seeing anything inside of our index.js or inside of our backend so let's go to login or actually let's go to app and the fix to this is we need to pass our set alert and set user to the login component so if we paste that in here that now should fix the problem because remember in our what is it what do you call these again props we have ad alert and set user but we weren't passing them so of course those were not defined we were getting a problem so let's try this now let's refresh let's go tim let's go login and uncaught at alert is not a function all right so looks like the error is that i have add alert as opposed to set alert my apologies here this needs to be set alert not add alert so let's change all of these to be set and now that should fix the problem again my apologies let's refresh let's go tim let's go log in and there we go successfully logged in signed in as tim nice okay let's log out let's go to sign in let's close that let's try to sign in as an account that doesn't exist like h and then no user with that name exists nice okay so that's working let's go with tim log in and then it signs us in all right so we now have signing in signing out and signing up completed the next thing that i guess we can work on is searching for users then we can start looking at the profile creating posts in fact before we do that let's actually deal with creating posts and uploading files and then once that's done we can kind of move on to some other features doesn't really matter the order that we go in at this point so to create a post we obviously need the html for that page as well as that component so let's start with that we're going to go to create post and we're going to import a few things so i'm going to say import and let's import if we can type here use state and use effect this will be from and then react and then continuing we're going to import just like before in the other pages a button as well as a form from and then this will be react bootstrap and i'm also going to import use navigate so i'm going to say import use navigate from and then this will be react router and then done okay now that we have that let's set up the state that we're going to need so when we create a post we're gonna have a caption for that post as well as a file uh the file will be an image right so we're gonna say const this will be caption is going to be set caption this will be equal to use state and then that's a string then we're going to have const and this will be file and then we'll have sev file really this will just be the image but for now we can call it file and this will be use state we'll just go with an empty string because we're going to store the path to the file and then we're going to have const navigate if we spell it correctly is equal to use navigate okay now i'm going to add a use effect here which is going to run as soon as the component is rendered and what this function is going to do is just make sure that we're currently signed in so i'm going to ask that we're passed here a user as well as the add alert function and it's not going to be ad alert it's going to be set alert i don't want to make that mistake twice and the user we're going to check here and see if we have a user so if we don't have a user if it's an empty string that means we're not signed in and well we can't make a post if we're not signed in so i'm going to add an alert to the screen or set the alert saying hey you can't do this because you're not signed in and then we'll bring you over to the login page so i'm going to say if not user then we will set an alert and for the alerts we're going to have a variant of warning i mean we could do warning we could do danger let's actually do danger i think danger makes more sense and then we'll go with message and we'll say please sign in to make a post exclamation point okay and then what we're going to do is navigate them so i'm going to say navigate and we'll navigate to slash login and i think that's good for that and then here we want to rerun this effect whenever the user changes okay so that's what we need for use effect now let's do the html of the page so i am going to return so let's render a form inside of here so let's go form for the class name right now we can go with center form and then inside of the form we're going to need a file upload so that's what we'll put in our first form group and then we're gonna need a button uh we're gonna need a few other things as well so i'm going to put a form dot group and then slash form dot group a for the class we'll go with margin bottom three so class name is equal to mb and then three okay i think that's fine for now inside of here the first thing that we'll do is have an image tag now the image tag is just going to show us the image that we currently have uploaded so i'll say image src is going to be equal to file question mark if we do have a file then we're going to say url dot and then create object and then url and that's going to be for our file otherwise we're going to say no and then we're going to have class name which is equal to upload image and i'm going to write that class later on okay so that's going to be our image tag again this is going to display the current image that we have uploaded if we've uploaded an image so if we do have a file we're going to get the url for that file you don't have to wonder too much about what this is doing but essentially just allows us to directly reference this file and display it as the source for the image and then we're going to have another form group that we need so let's copy this for this next form group inside of here we will have the file upload so i'm just going to put an input tag let's end it like that and then we'll say type is equal to file we will say accept and then this is going to be equal to and image and then that will be slash and then an asterisk and then let's put our quotation mark and then we're going to say on change and we can make this call a function so for the function let's actually just write it right now let's say function upload file let's take e and then we will take inside of here or we will call sorry the upload file function okay i think that's all we need for the image upload the next thing that we're going to need is the caption so i'm going to say form dot group okay then we're going to have our form dot and this will be control and this will just be the caption so i will say type is equal to text we will do placeholder equal to caption we can actually just do something like enter a caption and then we'll have it on input and the on input will be equal to and we will do an arrow function inside of here that accepts e and then we will simply update our caption so we'll say set caption e dot target dot value and let's fix control so we have the proper capitalization okay other than that we want a button uh why is that highlighting in red okay i think that's fine um yeah that's looks fine to me right now actually let's end the tag like this sorry and then that should hopefully fix our problem for us okay there we go so now we want to have a div i'm going to say div class name is equal to and then this is going to be post button and then wrapper i'll show you why we need this in a second but we're going to add some styling to this div just to put the button in a certain location and i'm going to say button and inside of here we'll say variant is equal to primary and then we will go with type equal to button and then we'll have on not submit but on click is going to be equal to and we will call a function that we've yet to call yet to write sorry so this function will be function and we'll say make post like that okay so let's put make post here and then inside of the button we will just make this say post okay i think that's all we need for now let's have a look at the create post page and just see what we're getting and then we'll complete the rest of this because obviously it's not fully finished okay so we're getting an error here it says set alert is not a function okay i need to remember to pass these two things as props to this from app so let's go to app.js let's go to create post let's say user is equal to user and let's say not add alert but set alert is equal to set alert and then what the heck is this uh the path is fine okay let's just write out because it gave me this weird autocomplete here so this will be set alert is equal to set alert okay now let's try this and please sign in to make a post nice okay so let's sign in as tim let's log in it's gonna take a second okay let's go to post and then we have our file we have our caption and we have our post and i'll have to fix this again because you're noticing that you know the post button is kind of weird the caption should probably be larger the file input isn't lined up so we'll fix all of that in one minute we also want to have kind of a default image for the uh the image right like that we have here so we can see something showing up even if there's not something there let me just refresh again here and see if we're getting any errors okay so let's go tim login and it looks like if we go to post we are all good okay so let's handle the styling and making things look a little bit nicer now all right so i need to add a few classes here as well as a few divs in create post so the first thing for my button here i'm going to say class name is equal to post button okay then i'm going to add a div that's going to surround all of this so we're going to say div class name is equal to and then i guess we'll just go with post or actually let's just go with create post okay let's take that div and let's surround everything inside of here all right again i'll explain all the css in a minute and then we need a few other class names so for our image let's add a class name let's say class name is equal to post image i believe that is fine okay so now that we have all of these classes let's make a custom css file let me just close some of this so it's not clogging up my left hand side so let's make a new css file let's call this createpost.css we can then import it inside of here so we're going to say import and then this will be dot dot css slash create post dot css okay now let's go to create post and let's write the different classes that we need so the first class that i want to write here is going to be create post so let's just write this out and then we can see exactly what's going to happen so i want to set the min width to be 30 percent of the parent i then want to say the display is flex i want to say the flex direction is going to be column okay just so we have a flex box all of the elements inside of that div will now be a flex item and then we're going to have margin hyphen top and this is going to be equal to 2 e m 2 e m is going to be whatever the default font size is i believe of the browser multiplied by 2. okay so that's margin top just to give us a bit of spacing from the top of the screen i then i'm going to have my post button and then wrapper so this is the div that's wrapping that button and this is going to allow me to actually center the button so i'm going to say display this is going to be flex and then i'm going to say align items and this is going to be center and i'm going to justify the content in the center as well all right so now that we have that for post button wrapper we're going to do our post button i just want to make it larger so i'm going to say post button width and then 100 so we'll take up 100 of its parent and then i want my upload image so let's go upload image or actually it's not upload image it's post image to have a width and a height so i'm going to say width is equal to 300 pixels and height is equal to 300 pixels just so it takes up some room on the screen and we should see something now okay so now that we've added this css let's go here and let's sign in so let's go tim okay let's go to post okay so that looks a little bit weird the issue that's happening here is i'm spacing everything out and taking up the entire height of the screen which i don't necessarily want to do so i'm going to need to fix this slightly and the way i'm going to fix this is by actually creating a new class name here so rather than center form i'm going to have post form and let's now go here and write the post form class so i'm going to say dot post form and we'll do something similar to what we had for center form but we're just not going to take up the entire height so i'm going to say display this will be flex we're then going to go align items and this will be center and then i want to have justify content this will be center and then i want to have the flex direction and this will be column okay so let's see this now and okay i got to sign in so let's go tim log in let's go post and close although the image it's still a little bit weird right it looks like this input tag is going above the image i don't know why that's the case so let me have a quick look here and i'll be right back all right so i'm just having a look here and i made a few kind of silly mistakes so first of all i added a post image class to this input tag which was not expected and i also realized that i named this upload when it should be post to match with what we have here right post image and now post image now we'll have a width and height i also realized that for this form i forgot the class name equal to margin bottom three and i believe now with those fixes we should actually be good so let me have a look at this now and that looks much better okay everything is aligned so just quickly looking at the css uh what we did is we made it so that our post form has a display flex everything is aligned in the center so horizontally and vertically and then the direction is column meaning that we're having everything aligned vertically right then we have create post so for create post i just wanted to make the minimum width of everything 30 so that way we're gonna take up a certain amount of size on the screen no matter what then i have display flex flex direction column and the margin top is this right here so it's making it so we're not directly squished to the top of the screen we have some padding between the other diff so that's what we're doing there or i guess a margin padding whatever you know what i mean and then we have post button wrapper display flex align item center and then justify content center this pushes our button into the center of its container because it wouldn't have been directly in the center before and then we have post button with a hundred percent just to make it take up the entire width of its container which will be 30 of the width of the div because this div the create post div is going to be 30 of the entire screen so it will be 100 of this div right hopefully that makes sense and then post image we're just giving it a width and height of 300. we could do percentages but i think this is fine and you'll see if we resize the screen everything actually looks all right and we can you know kind of move it around and it's all good in fact maybe we want to just make the image uh have a width equal to 100 and a height equal to 100 uh although height i guess i can't really do i can do height 300 with maximum and then that way it will uh expand although i'm not super fussed with the css for now so honestly let's just leave it and you guys can mess around with that if you want okay so that is uh most of the styling for create post now of course we want to actually be able to make a post and we need to be able to upload a file now uploading a file is going to be a bit more complicated but inside of here what i can do for upload file is say set and then file like this and it's going to be e dot target dot and then files and then zero because we're only uploading one file okay so that's what we'll do we could also put this in arrow function but i think it's fine just to leave it here it doesn't really matter and now for make post we want to write this before we can do that we need to be able to handle this on the back end so let's go to index.js and let's start writing it now so that we can actually accept a file upload as well as the caption and the user that's making this post and then we can create a new post now this is fairly complicated uh to actually accept a file upload we have to use a few things that we haven't yet seen but that we installed previously so i'm going to go up here and i'm going to say import and then i'm going to import multi from and then motor now i might be mispronouncing that but that's something that we need to use to actually handle a file upload now after we make our app what we need to set up here is a storage location for all of the files that are going to be uploaded now i'm going to put them in a folder here called public so in api i'm going to make a new folder this folder will be called public and that's where we're going to save all the files that are being uploaded before we then upload them to sanity because we need them stored on our local disk before we can upload them to sanity we can delete them after if we want or we can just keep them here it's really up to us so what i'm going to do is say var storage like that is equal to multer dot and then this is going to be disk storage and we're going to define a location where we want to store this so inside of disk storage i'm going to say the destination is going to be a function and this function is going to accept a request a file and a cb and we're just going to say cb and then inside of here it's going to be no and then public and this is a callback function now i understand this is not going to make any sense right now i'm going to be quite honest with you i just found this code on stack overflow tested a bit and it seemed to work so i don't know exactly what's going on here but i will try my best to explain the parts that i do understand i do know that what this does though is set up a storage location where we're able to save files to so i have the destination which is equal to this and then the file name is going to be the callback function here and it's going to be no and it's going to be date dot now plus and then we're going to put a hyphen and then we're going to put file dot and then original name okay so we're getting the destination uh to get the destination we take in the request the file and a callback function and we just call the callback function with public now callback is going to be essentially our current location so we're going to append public to it which means that the location that we want to save this is in the public folder right so relative to our current path plus the public folder then the file name that we want to save is going to be daytime.now so whatever the current date is plus a string plus the file.original name just so that we have a unique name for our file name okay now that we have that we're going to say var upload is equal to multer and we're going to pass this in object which is storage storage so now it knows where we're going to be saving any uploads now to actually accept and upload we're going to do the following we're going to say app dot and then i'm going to make this a post request because we're going to be adding a a new image and this is going to be slash create post so sorry not just new image but a new post then i'm going to pass your upload dot and then single and then the parameter type is going to be file because we're uploading a file and then we are going to have our regular request and our response and what we're going to do inside of here is get the body so we're going to say const body is equal to request dot body okay and then we're going to call the function create post and we're going to pass through this the body dot user which is going to be the user that we want to make the post for the body dot caption which is going to be the caption of the post and then the request dot file so notice i'm doing a request file not body.file because the file that we want to store will be a part of this request because we have this upload.single here then we're going to say then i'm going to put inside parentheses here data we're going to say res.json and then date now i will explain how we actually upload the file in a second because we're going to have to do that from the create post function what we've just done here is set up a storage location again don't worry too much about this code i don't fully understand all of it i just know that it does work we then have upload now this is the multer object which is going to allow us to actually accept a file upload here on our server so now we pass in here upload.single file which means we're accepting a single file to this post request okay as well as any of the request body that we want and then we're going to take body.user body.captionrequest.file pass that to create post and request.file will be the path to the file which will now be sitting on our server so we're uploading the file from our front end we're then going to be downloading it on the back end saving it locally and then we're going to take that file and use that and upload it to sanity okay the reason we're doing this is because we need to upload to sandy so we first need to get the file here on our back end then once we have it here we can use it and send it to sanity all right so let's go to api calls now and what was the function we want to write the function create post so what we're going to do here is say functions dot create post now this will be an arrow function and what we want to take in here is the user the caption and the image okay and then we're going to say return and this is going to be sanity client and the first thing that we need to do is we need to upload the photo to sanity so to upload a photo to sandy is different than to create a regular document so we first upload the folder or first upload the image story then we're going to link the image as this user's post so you'll see what i mean in a minute but we're going to say sanityclient.assets because we're uploading an asset we're going to say dot upload we're going to upload an image and then we're going to create a read stream and this is going to be of the image.path now i need to import this from our file system so we're going to go up to the top here and we're going to say import create read stream from file system okay and then we also need to import one other thing the base name from and then path and i think path is installed by default but if it's not then we'll have to install it in node.js okay so we're creating a read stream of the image.path this is essentially going to give us a byte stream of this image and then we'll be able to upload that to sanity because well we need to take the image turn it into a format sandy can accept which is this and then upload it now we also need to pass here as an additional argument the name for this file so i'm just going to say file name is equal to base name of image.path and this is going to give me well just the base name so just the image name not the entire path so i'm saying okay i want to create a read stream of the file at this location we want to save it as the file name of this and then we're going to wait for this response to finish we're going to get the data from this and the data is going to include information about this image that we need to link it to a post so now what we're going to do is say functions dot get user id this is a function we're going to write in one second we're going to say dot user we're going to say dot then we're going to say ids inside of here actually did i mess something up here nope i think we're okay for now i'm going to say ids and then i'm going to do something here inside of an arrow function okay let's save this hopefully it gives me some formatting what's the issue with my parentheses expression expected okay that's fine we'll do something inside of here and here we're going to say return sandy client dot and then create and then we're going to create a new post now i know this is really confusing let's first write out this get user id function because what we need to do here when we're making a post is we need to have a reference to the image for the post as well as a reference to the user who made the post now to be able to do that we have to have both the id of the image as well as the id of the user so that's why i'm first doing the upload right i'm uploading the image it's then going to return to me some data this data is now going to contain the id of the image i can then use that id to link the image to the post because the image is stored separately than the post then same with the user i need the id of the user which i don't have i just have the name so i have to get that id so i'm going to say functions dot get user id this will be an arrow function that takes in a user and then what we'll do inside of get user id as well we will get the user id so to get the user id we're going to say return sanity client dot and then this is going to be fetch and then the and then the query that we want here for the fetch it's going to be following we'll put it inside of back ticks just so we can have a multiline string here we're going to do our asterisks we're going to do our square brackets we're going to say underscore type is equal to our user let's have a space here and then we will add similarity to 4 and user is equal to and then this will be username and then we'll have to pass that username in a minute and then inside of here the only thing that we want is underscore id so rather than putting dot dot or anything else we just put this because we only care about the id of the user and then here we're going to say username colon and then user like that okay nice so that gets user id so we've now ridden that function so now what we're doing right is we're saying okay well once the image is uploaded we're now going to get the id of the user now it's actually going to give us a list of ids because remember it's always going to return to us multiple things so if we want just the id we can say const id is equal to ids at zero and then dot underscore id okay and that will give us the id of the user assuming this user exists and then we're going to return sandyclient.create and then the type that we're going to use here is going to be a post okay so we're going to say type post and then we'll fill in the other fields that we need for creating a post so we'll put the author of the post the author is going to be equal to a reference so we're going to say underscore ref and this is going to reference the id okay that's all we need for that then for our photo this is going to be an asset and this asset is going to have a reference to the data dot underscore id which will be the id of the photo that we just uploaded that we're now getting from data and then after photo we're going to have our description which will really just be the caption i think i called it description in the uh in the database although let's have a look actually let's go here schemas post and yes i did call description so we're gonna have to use description other than caption okay and then the last thing that we want is the created at which is new and then date all right so that is actually all we need to create a post i know very confusing there's a lot of stuff that we have to do took me a long time going through the documentation to figure this out because since we have this on the back end we need to first download the image then we need to get the path to the image then we need to upload it to sanity then we need to link the image with the post as well as the user id with the post and so this is how you do it right if i want to have a reference to a person i do underscore ref for the author and then i'm referencing the id of a person object and then for the photo i put asset inside of here because that's one of the mandatory fields then this asset is referencing an asset that is on sanity already that we just uploaded so that's why we had to do that first and then get the id of it then the description well it's a caption created at new date there we go we have the create post function okay so that actually should be fine now so if we go to index.js that's all we need for slash create post now for make post we're going to send a request here so let's start creating our what do you call it request options as well as our form data so when we want to send a file we need to send this file in form data so what i'm going to do is say const form data is equal to and then this is going to be new form data because remember here we need to upload a file then what i can do is add the fields that i want to the form data so i can say form data dot append i can append for example the user that will be equal to whatever user is passed here to create post all right continuing we're going to say form data dot append and we're going to append a description uh actually let's check here index.js nope we're going to append a caption and the caption will be caption okay and then we're going to say form data dot append and we're going to append a file and the file will be the file all right okay then we're going to say const request options and we're going to say that this is equal to an object and we're going to say the method is equal to and this is going to be post and then the data will be our form data okay we're just doing it this way because we're actually sending a file so we want to add that to our form data so it's handled properly and then i'm going to fetch the slash create post and then we'll pass the request options we're going to say dot then and we're going to get a response so underscore res like that and then we will do the following so assuming that we get a response and we don't get an error we're going to say add alert and we're going to say variant and then this is going to be success and we're going to say message we're going to say post created exclamation point and then we're going to navigate to the home page so navigate home now if we do not get this successfully so if we have an error we're going to need to catch that error so we're going to catch error okay and then we're going to make a new alert so we're going to say add alert or not add alert this is going to be set alert don't tell me i called this one ad alert okay sorry guys set alert so we're setting alerts and then the variant here is going to be danger and the message will just be error.message so whatever that is we'll display that okay so that should actually be it for making a post now so when we hit that post button it should just well make the post and we should be good to go again apologize for all the complexity there but it is required so let's refresh the page okay let's sign in as tim let's go to post let's close that let's choose a file uh i have dwayne the rock johnson nice awesome uploaded and notice it shows up here because again when i go to my image let's have a look at it here you can see that i am displaying the image only if we have a file since i set the file we now have it so i can display it there and then what i'll do for the caption is say this guy is strong okay and hit post and post created although we got an issue it says create post not found ah okay so the reason we got that problem there is because we need to restart our api because we added a new function so let's restart this and let's try this again okay so let's come here let's go to post let's choose a file dwayne the rock johnson this is a strong man okay and then post all right again 500 internal server error what's the error that we got this time it says create post is not defined okay we need to import that so let's go to our index.js and let's add here create post and now hopefully this should work okay let's try this now let's go to post we need to rerun the api because we made a change okay so stop and rerun let's go back here let's upload a file and let's go testing this time and post and another internal server error what is the error this time property path of undefined okay let me have a look here and then i will be right back all right so i've found the problem here i apologize there's a really stupid error here i need to change data to be body so it was saying that i wasn't getting a file because i wasn't really sending any data because i had data rather than body so this needs to be body here and request options and now it should fix the problem for us so let's rerun this let's go to refresh let us sign in okay tim sign in let's go to post and then let's choose a file okay let's go with dwayne again strongman post okay this is a good sign it's taking a second that means it's uploading the file and then post created and if we go to our back end you can see i've just printed something out and we got actually the file that was passed here so let's now go to sandy studio and let's see if we have that image uploaded so when i go to post notice that we have a photo and when i look at the photo we get dwayne with descriptions strongman and that is posted by tim awesome so we've just figured out how to create a post now that we have done that we want to view all the posts then search for users then set up the profiles hopefully at this point in time you are realizing that yes this app does look simple but there is a lot going on in the back end i will continue to show you how to do the rest of the stuff right now all right so now we're going to move on and code out the all posts page which is going to show us all of the posts for a user's feed or if the user is not signed in then it will just show us all of the posts that's how i'm going to implement it here feel free to change it around if you'd like and you just need to import a few things here so we're going to say import and we're going to import react we're going to import use effect we need this we're also going to import use state and then this will all be from react and sorry i don't think i need react i think i just need use effect and use state okay continuing i'm going to import and this is going to be link from and this will be react router dom then i'm going to import a card from bootstrap so from and then this will be react and then bootstrap down here nice now that we have that let's set up the state that we want for our page we're also going to accept a user as a prop so that we know if we're signed in or not and we show the user's feed or we just show all of the pages or all of the posts are so i'm going to say const this is going to be all and then posts and then data and this will be set all posts like that and then this will be equal to use state and for now we will go with no and we'll put an object in there later okay then we're going to write our use effect although actually yeah we'll do the use effect now so i'm going to say use effect okay and then we need to do the arrow function and we want to update this whenever the user changes so if a user signs in then we're going to change it to show their feed as opposed to showing all of the posts so inside of here the first thing i'm going to do is say if and this is going to be not user then what i want to do is i want to fetch all of the posts so i'll just write the fetch but then we'll actually write the back end endpoint later on so i'm going to say get all and then post so that's we do if we don't have a user otherwise if we do have a user then we want to fetch and this is going to be slash get and then posts of and then following and then we're going to do as a query parameter user equals and then plus and then whatever the name of the user is because again we want to get all of the posts of the users that this user is following all right so that's what we need for the use effect we'll have to modify this in a second and actually do something with the different fetch requests but for now we'll just leave it like this and now we can write the html of the page so i'm going to return a div here and for now i'm not actually going to write any classes in a separate file i'm just going to write them all inline css it's definitely not best practice and i'm being a bit inconsistent here but just to show you that i can use some builtin bootstrap classes instead of having to write all the custom classes myself so i'm going to say div class name then this is going to be equal to center and then this will be mt3 so margin top 3. now the center class is one that we already made and if we go to index.css we should see that we have center here and it just puts us in the center of the screen okay going back to all posts what i want to do inside of here is i want to map the all post data so i'm going to say all post data dot map and then for every single element in my all post data which is going to be a list of all the posts that i have i want to display a card for them so i'm going to say post and then index and then this is going to go to an arrow function and actually nonarrow function sorry just a parenthesis well it is an arrow function but we're going to have parentheses as opposed to the curly braces and then inside of here i'm going to have a div so each post will have its own div and the div is going to be class name equal to and this is going to be center as well and we're going to say m and then 2. now this is margin 2 meaning we're going to have a margin of 2 on all sides and then for this i'm going to say style is equal to and i'm going to say that the min underscore width is equal to 30 percent so we're going to go 30 like that and then we're going to say that the max width is equal to and we're going to go with 400 pixels now this will just give us a nice dynamic size so we're going to take up a minimum width of 30 uh 30 on the screen but when the screen is large enough we'll take up up to 400 pixels now you could change this around if you want the post to be slightly larger but i messed around with a bunch of different values and this was pretty good now since we're going to have a bunch of divs that are going to be in kind of a list we're going to say key is equal to and then index whenever you're using map and you're putting multiple elements inside of what's being mapped you're supposed to put a key and the key is just a unique value for the elements on the page so kind of hard to explain it more than that but you'll see that you get errors if you don't have this or you'll get warnings at least that are saying that you need to have a key property in the element because when you're rendering them dynamically like this that's what react expects now inside of this div we're going to display a card so i'm going to say card like this slash card and we're going to put a div inside of the card now this div will have a class name and this will be equal to d flex so display flex and we need another s here for the class name now this is a bootstrap class that you can use that just adds the display being flex for this specific div then i'm going to say align items and then center i think you can guess what that is going to do and then we'll make this a flex column as opposed to a flex row and then let's end our diff okay now inside of this div i'm going to put a card image so i'm going to say card dot and then this will be image and then card dot and then image the variant of this is going to be top which means we're going to put the image at the top of the card that we have for the src this is going to be equal to the post dot and then photo dot and then asset dot url okay that's the source for our photo and then for the style we're going to say that this is equal to and then this will be width and then 100 so we'll take up the maximum width of our container okay there we go now we want to do a card body outside of this div so i'm going to say card dot and then this is going to be body this will be card dot body as well inside of the card body i want to have a link to the user's profile so we're going to have kind of an at symbol say the users actually posted this photo then i want to have the description of the post as well as when the post was well posted so the date time that it was uploaded or yeah i posted whatever you want to call it so inside of here i'm going to make a link and i'm going to say 2 is equal to and then we'll actually do inside of curly braces here slash profile slash and then this is going to be plus and then this will be post dot and then this will be user name like that okay that should be fine and then we'll end the link so slash link and here we'll just put the name of the user so i'm going to say card dot and then title and then card dot and then title like that let's fix that and inside of here this will be an at symbol and then we will say post dot and then username now username will be a field that we're going to add to each post each post is going to have all of the elements on it that our posts have from our database and from what our query returns which we're going to write in a second for both of these fetches okay so now we have the card title that's inside the card body next we want to have the description so we're going to say card dot and then text and then card dot text and then we want to put inside of here the post dot and then this is the description okay so that's all we need here for this that's what's going to be the content of our card body now we're going to make a card footer so i'm going to say card dot and then footer like that this will be beneath the card it's kind of muted and it looks a little bit uh what do you call it like kind of lighter so i'm going to say class name equals text and then muted and then inside of here i'm going to post the post dot created at all right now the creator is just gonna be the date time this was posted at we could format this and make it a bit nicer but for now i think that's good enough and that is what we will have for the content of our page so now all we need to do is write the queries for get all posts and get posts of following so we're going to have to go to our api calls or sorry to our index.js and then we'll go to our api calls after that so looking here again in all posts we had get all post and get posts of following so let's copy this one to start and let's go app dot get let's paste that in slash get posts of following we're gonna take in our request our response this will go to an arrow function then we're going to say const body or not const body we're going to say const and then this will be user is equal to request dot query dot user because we want to know the user that we're going to be getting these posts for then once we have that we're going to call the get posts of following function and we're going to take in user or pass user sorry and then say dot then and then we'll have inside of here data and then we will return res.json and data okay now we're going to do the exact same thing here except it is going to be for get all posts so we'll just say get all posts and then we don't need a user because well when we're getting all of the posts we don't care about the user we'll change this function to be get all posts now while we are in here let's import these functions and then we're going to have to actually write them so let's write get all posts and get posts of following like that okay i think that is what they were looks good now let's go inside of api calls and let's write the queries and calls with the sandy client so i'm going to say functions dots we'll start with get all posts this one will be easier so i'll say get all posts this is going to be an arrow function this arrow function actually doesn't take in any parameters and we're going to return sanity client dot and then this will be fetch and we want to fetch a specific query now this query is going to be asterisks followed by our square brackets instead of here we're going to go underscore type is equal to and then this is going to be post now there's nothing else that we care about we just want to get all of the posts and then we want to get some specific information from those posts so we'll start by saying dot dot then we're going to get the username so since this is a custom field i'm quoting this so i'm saying username is going to be the author which is a nested object right because this is a reference to a what you call this to a person or to a user object so we're going to say author and then we're going to get the author's username like that so that's how we're going to have username on all of the values that are returned here from this query then down here i'm going to say photo and then we're going to take the asset and then the asset is going to give us the underscore id as well as the url so in case i didn't mention this before whenever you see the arrow that essentially means that we have a reference type so an asset is a reference type and we are going inside of the reference and grabbing some specific fields so i'm getting the username here and here i'm getting the id as well as the url which is the information that we need okay so that's what we need for get all posts now we're going to have to write a fairly complicated query which is going to get all of the posts for following so the reason why this is a little bit confusing is because we have all the users that we're following on our user but i need to then go and find all of the posts that reference a user that this user is following so you're going to see but it's not the most trivial thing in the world and it took me a good amount of time to actually come up with this query so you're welcome for just typing it out for you here so i'm going to say get posts of following is equal to we'll take in the username okay and then we're going to say uh what is this return sanityclients.fetch and we are going to fetch the following it's going to be underscore type and we're actually going to start with user so what i'm going to do here is start by finding the current user then going through a list of all of the people that this user follows or an array of all the people that this user follows and then adding a post field to all of those people so we're able to get all of their posts and then we can aggregate all of their posts together so i'm going to say underscore type is equal to user and i'm going to say username is equal to and then this is going to be pound username or not pound dollar sign username then let's make sure we pass this variable so i'll just pass username since the name is the same as this variable i can just pass it like that and then i'm going to say following and this is an array and i'm going to essentially map all of the values into in in the array to some certain return values that i want to get so i want to get the posts so i'm going to say post colon and then this is going to be a new query and this query is going to be type and this is going to be underscore post and i'm going to say and and references and we're going to do the hat dot and then underscore id now this is a bit weird but every single one of the entries in this following array here is going to be a person so what this hat is going to reference is the current person that i'm on while i'm looping through this array and then for every single one of those people i'm going to do a query to get all of the posts that they have made so let's make sure this is underscore type and then from all of their posts what i want is dot dot so everything from the post as well as a username field the username again is going to be author and then username and then i'm going to go photo and then i'm going to say asset since this is a reference type i'm going to go with my arrow and then i'm going to get underscore id and then url okay so similar to what we did here except the query is a little bit more advanced so i'm adding a post field to every single entry in my following array then outside of here when i actually return this i'm going to loop through i'm going to grab all of these posts field and i'm going to aggregate them together so that's all we need for now so get posts of following so let's go back to index.js here and let's continue writing some code so for my data here and get posts of following i'm going to change this slightly and i'm going to now loop through my results i'm going to grab all of those posts field and i'm going to combine them into one array and then return that array so i'm going to say var posts is equal to and then this is going to be data 0 dot following okay so this will give us the list of following from the user that we got the post for so i know this is a bit weird but again we looked up the current user so the user that we want to get the feed for we got all of the people they were following and then we added the post field to that following array so now i'm getting this following array and now i'm going to map this so i'm going to say post is equal to and then this is going to be posts dot map and i'm going to map every single post to the post dot post okay now i know i said the word post like a hundred time it's going gonna be post dot post which is the field inside of that object containing all of their posts now that i have that i'm gonna say posts is equal to and then this is gonna be post dot and i'm gonna flatten this to one level now what this will do is just take all of the nested arrays that i'm going to have inside of here and flatten them into one and then what i'm going to do is say res.json with posts okay now also just add a cache here in case something goes wrong so i'll say catch error and then we'll just res.json and we'll just return an empty array so if something does go wrong empty array just saying you know okay there's no post because an error occurred all right so i think that's all i need for now so let's go back to all posts now and let's continue writing these fetches so now we'll actually display some data so for this fetch i'm going to say dot then i'm going to say this will be res we want to return the res.json and then we're going to do another dot then we want to get the data and then we're going to say set all posts and we'll set all posts with the data now we'll do a very similar thing here in fact we'll do the exact same thing so let's do this and let's run that now what i can do is also just add a cache to both of these in case something does go wrong so i can say catch error and then we can just console.error this error i won't show it in a alert although i could do that if i want now let's just take this catch and copy it and put it down here again just so in case anything goes wrong we'll be launching that to the console nice so now that we do that we should actually be able to see all of the posts from a user once they've signed in or when we're not signed in we should just see all of the posts and so let's resize or resize let's rerun our api excuse me i've been recording for a long time now as you guys can probably tell so npm start our api and let's go back to our front end so let's refresh our react app and we're getting an error cannot read property of null reading map okay uh what else any other errors here says can i read property of null reading map okay so let me have a look why that's going wrong what are we mapping so we are mapping our uh what is it all posts okay so the way to fix this is to say all posts data question mark otherwise we'll go down here and we'll just render null now the reason we're going to do this is just to make sure that we have some data because if we have no data then this is no we also could fix that by just making this an empty list but for now i think it's fine to leave a null and say okay well if we uh have no posts then we're not going to do this obviously because that's going to give us an error otherwise we can show no or maybe what we want to show is just something simple like a p tag that just says no post to display okay so let's do that let's go to our front end and then notice we're going to see the one post that we currently have okay so we see this post and if i sign in as tim let's do that when it redirects me to the home page oh it's showing me this post which it actually shouldn't be showing me because i'm not following this person let me just go back to feed here and okay so it's still showing this to me let's sign in as another account i forget if we have an account like joey123 let's sign in and it's still showing it to me okay let me have a look here and see what's going wrong because we should not be seeing this post when we are signed in all right so to fix this problem i just realized we need to go to app.js and we need to pass the user to our all post page because i forgot to do that so i'm going to say user user like that now when we go to all posts we'll actually have a prop so now this condition will be correct us when we have a user it will actually give us all of the posts of their following okay so let's now go here and notice that the page is actually refreshed for us because we added that so if i go to say search go back to feed no post to display or actually it's giving me an empty list and since it's giving me an empty list we don't have no and so it's not showing me no post display but we're not displaying any posts because i'm not following the person that made that post so now what i want to do is make it so that we can actually search for uh different users and then once we search for them we'll be able to view their profile and then we can actually start following people right because well we need to follow people to be able to view the different posts so let's start working on that let's close all posts let's close actually let's not close app let's pass do we want to pass something to app sorry do we want to pass something to search i think for now we don't need to let's go to the search component and let's start writing this out so i'm going to start by importing what we need here so i'm going to import use state from and then react and then i'm going to import a form a button a list group and a card from and then this is going to be react bootstrap and then i'm going to import a profile list item from profile listitem.js now i will write this later on but every single item that we're going to have in a list is going to represent a user and it's going to be easier to have a separate component that we can render for each one of those individual users in the list that will do all the styling and formatting for us so we'll use this later on um you can think of this kind of as an li tag within a list that's uh what it will be and it will just show you know the user's following it will have a follow button all that kind of stuff and then i want to import a css sheet which you're going to fill in there's actually quite a bit of styling we need to do here so we'll say css slash and then search dot css okay and what is the error that we're getting here it's saying browser doesn't contain a valid field doesn't contain js can i remove this is that going to fix the problem okay you know what we'll look at the problem later on because right now we just need to finish writing this okay so now we want to add some state here so i'm going to say const this is going to be search text and then update search text okay update search text is equal to use state and the search text is going to be the text that we're searching for when we're searching for a user then we're going to say const search results as well as update search results or set search results or whatever we want to call this update search results i know i'm being inconsistent here uh but that's fine for right now you guys can change that if you want and for the search results we'll have an empty list for now and then uh we will just return the html of the page sorry so return and we're gonna have a div so we're going to say div class name is going to be equal to search i'll fill in all of the classes then we'll just write all of the css at once okay so we have search now let's make another div now this div is going to have a class name of search and then wrapper and then we will end the div tag and then inside of here we're going to have a form which is going to allow the user to enter their search text and then hit the button to search so we'll say form and then for the class name this will be equal to the search and then form okay then we'll go here and we'll say form dot and then control and then to end this tag we'll just end it within itself for the type here we are going to go with text so type equals text we're going to have an on input which will be a function this actually just be a function that updates the search text so we'll take e in here and we'll say update search text e.target.value and then we'll have a placeholder and we'll just type search for a username okay so let's write that username like that okay nice now continuing under the form control uh we actually want a form group to put this form control inside of so my apologies let's write that now form group okay let's copy the ending tag let's wrap it around our form control and then for the form group we'll have a class name and this is going to be equal to the search field just so that i can expand the size of the uh the field inside of here okay now outside of the form group we want to have a button to submit so we'll say button and then button and then here we'll just type search for the variant we are going to have this being equal to primary and then we'll have an on click which we'll call a function that i have yet to write okay i think that's all we need for right now then underneath the form but inside of the search wrapper i'm going to start displaying all of the search results so we're going to go here and say search results dot length and we're going to say if this is greater than zero then what i want to do is i want to render this so let's have this otherwise we're just going to render no or actually rather than rendering no we'll render a p tag and we'll just say no search results so let's say p slash p and then no search results okay and then inside of here we want to render a div so i'm going to say div slash div and then for the class name this is going to be the search results and then wrapper so let's fix wrapper here so that it has a hyphen and then inside of this div we're going to render a bunch of cards so we're going to have card card for the card we're going to have style equals and then we're just going to make the width 100 okay and then inside of the card we're going to render a list group i understand this is a lot we'll walk through it after in a second but let's just get it all down i'm going to say the variant of this is going to be flush this is going to be just well a list group that will display all of the different list items that i have and then inside of here we're going to say search results dot map and we're going to map the i guess we'll call it item and idx and we'll map this to a profile list item so i'm going to say profile list item like that and then let's just end the tag here and we'll pass to this dot dot item which is going to contain all of the information about uh what do you call it an individual user that shows up in the search page now let's change width here so that's inside of a string okay profile list item and then we also want to pass an index here so i'm going to say idx is equal to idx just so we can render an index inside of the tag and we don't get a warning okay i understand that was a lot i think that's pretty much all that we need for this now let's write the two functions for the on click for the button as well as did we have another function that we needed to write actually no we already did this one for the on input so let's just write the search function so let's go function search okay and then let's just simply call search right here okay so i think that's good i'm not sure looks like we're getting some errors so let's see what the errors are okay so the error first is saying search.css does not exist so let's create that file search.css okay now that is created it's giving us another error it's saying profile list item does not exist okay that's because it's called profile item so let's change this to a profile item from profile item we don't need to call it list item and we're getting another error here it says profile list item is not defined um okay that would be right here let's change this to profile item save and it looks like all of our errors go away okay so let's open up our front end and this is what the search page looks like a little bit weird but we have the the search field expanding the entire width we have the search button that says no search results if i hit search it's going to say no search results again what we need to do now is add the styling and all of the classes for this so let's do that is going to be quite a bit of css let's start writing it out so we're going to say dot search and this is going to be display and then flex and then we're going to say the flex direction is a column and we're going to say align items and we're going to align them in the center okay we're going to have our search wrapper so i'm going to say search wrapper this is going to be display flex i'm going to say the flex direction is going to be column i'm going to say align items center i'm going to say justify content this will be center as well we're then going to have the min width which is equal to 30 so take up a minimum of 30 percent of the screen uh why is that oh it's because i have a comma here so let's fix that then we're going to have a max width and the max width i'm going to make 500 pixels okay so let's see how this looks so far when i make these two changes notice here that the classes i did was this div and this div so let's have a look and notice that now we're taking up kind of the correct amount of size in the screen we do want to be a bit larger so we're going to have to affect some of the the other styles or some of the other classes we're going to have to change them but anyways you get kind of what we're looking at right now okay now that we have that let's do our search field so for the search field this is going to be where we actually have the input i'm just going to say whip is 100 okay now after the search field we're going to go search form so let's go search form like that the search form is going to be display flex it's going to be margin and then top and rather than 20 pixels we're just going to go with 2em okay then we're going to go flex direction the flex direction here is going to be the row and then the width is going to be 100 now before i do the rest of them let's actually just see what this looks like so far and now notice that we have this beside the search button so that's what i wanted to have and that's what this does right here when i put the flex direction to row it means all the items contained in this div or i guess this is the form are going to be aligned in a row rather than in a column so that's what i was doing to make it look like that okay now that we have that i'm going to go the search and then the results and then wrapper and this is going to be equal to margin top we're going to do 2em as well i'm going to say flex direction this is going to be column and then the width is going to be 100 all right so after search results wrapper that should be all good so let's now have a look at what we get okay nice so that's exactly what i was expecting we have the margin from the top we have the text field and the button kind of beside each other we have this in the center now what we need to do is start actually getting the results and then displaying them by using where is it here the profile item so we can actually code out profile item first to display an individual profile item and then that way it's going to be very easy for us to just finish the the fetch commands there and allow us to actually get the different users that we search for so let's start here by importing and let's import a button let's import a list group and then let's do this from and this will be the react and then bootstrap and then we're going to say import and we're going to import use navigate and this will be from react and then router and then dom okay now we're exporting our profile item inside a profile item i want to take a few props i want a username i want a first name i want a last name i want a photo and i want the followers however for the first name i'm going to do it like this for the last name i'm going to do it like this and then the photo will be here now the reason i'm doing it in this way is so that these match exactly what the fields are that are going to be returned from our sanity api and that way i don't need to actually do any modifications or manually look for them okay now i'm going to say const like this is going to be use navigate or const navigate will be use navigate okay so const navigate equals use navigate and then we are just going to return what we want to display so i'm going to go here i'm going to say return we're going to return a list item okay this list item will have a div inside of it so we're going to say div the class name of this div is going to be equal to d flex this is going to be a line item center justify content and actually not center we're going to justify the content between then i'm going to end the div tag and inside of this div i want to have another div this div is going to have a class name which is equal to it's going to be d flex okay and then we're going to going to align the items in the center of this div and then we will put an image now the image here is going to be the profile photo of this user so i'm going to say image we'll end the image tag within itself and then we'll say src is equal to and we'll check if we have a photo now if we don't have a photo or if we do have a photo sorry then i'm going to say photo dot asset so let's do this dot asset dot url otherwise we'll just display a placeholder photo that kind of says okay this user doesn't have a photo but we're going to show something anyways just so it doesn't look empty now this is the url for the placeholder photo so what you can do here is just change this to be any size you want so in this case when i make it 80 it's going to make the size of this image 80 pixels right so https colon slash less via dot placeholder dot com slash 80. there you go that's all we need for the source and then for this style here we're just going to say style is equal to and we're going to make the width of this 100 and the height of this 100 and you'll see that what ends up happening here is the height and width is going to be limited by the size of the container so when we expand the width and the height of 100 the image will just fill the amount of size that we allowed this div to take up okay hopefully that it makes sense now we're going to put another div here and this will just be a div to space out a few items so we'll say slash div and then inside of here we're going to put a p tag the class name is going to be equal to and this is going to be px2 and then m hyphen zero so that's margin zero so the px2 means that we're going to have padding and the on the left and the right hand side now two is just a certain amount of padding it's not two pixels it is more than that it's two multiplied by something i forget exactly what it's multiplied by it might be em but anyways that's what this is and then i'm saying margin 0. so i'm just eliminating the margin on this p tag here but i will have the padding and then inside of here i want to put the username so i'm going to say in a strong tags just so this is uh what do you call it like standing out i'm going to say the username okay then beneath this i want to have the first name and the last name of this user so i'm going to say p p and then we are going to do the same thing here we're gonna have px2 and m0 so class name is equal to px2 m0 and we're going to check if we have a first name so i'm going to say first underscore name question mark if that's the case then we'll render the first name otherwise we're just going to render an empty string and then we're going to add this to a space plus and then the last name if we have a last name so i'm going to say last underscore name question mark and then last underscore name and then if we don't have last name it'll just be an empty string okay so that's what we need for rendering the first and last name again we're just checking if we have a first name if we do we'll show it and checking if we have a last name if we don't then we won't show it and if we do then we'll show it in concatenation with the first name and a space all right now that we have done that we're going to complete the next div so we want to put a div here and we're going to say div div for the class name of this div this is going to be d flex and then flex hyphen column okay and then inside of here we're going to put the number of followers that this user has in a p tag so i'm going to say p p and then we're going to do class name we're going to say px2 okay and we don't actually need m0 we just need px2 and then in a strong tag again we're going to say strong strong we will have followers which remember is going to be the number of followers not actually a list of followers at least the way that we're going to call this and then here i will put followers like that and then we're going to put a button below this which is going to ask us if we want to view the profile so i'm going to say button like that and we will just have the text be view the variant i will have equal to success so this is a green button and then the class name will be equal to px2 and then margin zero so we move the margin from that and then we're going to have an on click event and the on click is going to be equal to an arrow function and this arrow function is going to navigate us to the user's profile when we click on it so i'm going to say uh yeah i can do it actually without this i'll say navigate and it's going to be slash profile slash plus and then username like that all right i think that is all we need uh that looks good although i think i may have messed up some of the divs here this div i actually believe i need to take out of here and put it one level down okay that makes sense let me just walk through what we did because this was a lot so we created a list item and that is containing everything right then inside of the list item we have one main div and what this div role is is to just make sure everything is centered and to justify the content between now justifying the content between means we're going to push the first item to the left and the second item to the right hand side of the screen so we're justifying the content on the left and the right as opposed to centering that so we're centering it was it vertically but we are not centering it horizontally we're pushing this to the lefthand side and this to the righthand side okay so the profile image goes to the left as well as the name and the username and then we have the followers in the view button going to the righthand side so then we have this div right here which is going to align our image with this div so this would be the two flex children of the two flex items for this flex container and you'll see that we'll get an image and then what we will have is this div beside the image where we'll have the username as well as the first name and the last name and the first name and the last name should be stacked on top of each other because we have them as p tags okay then coming inside of here again we have another div now this is a flex column which means we're going to have everything aligned vertically and we're going to have our followers and then beneath that we're going to have the button okay hopefully that makes a bit of sense that's what we have for profile item search.css is finished so now we just need to finish this search field and we need to make a call to our api here so what we'll do inside of search is we'll say fetch and for the fetch we're going to say slash search for and then username we're going to say question mark text is equal to plus and then this will be the search text and then we'll just write uh what we'll do here and then we'll write the backend api call as well as the api endpoint on our node.js server our express server so we'll say res res.json dot then we're going to have data and then what we're going to do with the data is we're just going to update the search results so i can actually just say update and then this will be search results like that with the data and then we will have a dot catch we will catch our error and we'll just say console.error error like that and that should be good now i might have to do message i think it's fine if i just show the error it should actually display it for me and i will actually be able to view the message from that error object okay that's what we have for search so this component is pretty much done we now just need to go to index.js and we need to write this route so what was the route it was search for username with a query parameter of text so let's copy that let's go here let's say app dot get okay slash search for username then we're going to take in our request our response that will be an arrow function we want to get the text query parameter so i'm going to say const text equals and then this will be request dot query dot text and then we're going to call a function so we're going to say search for username we're going to pass text then dot then and then inside of here we're going to have data and we're going to say res.json data okay so now let's import this and then write that you guys should be getting used to doing this by now we've done it a few times let's go to api calls and now let's write the api call for that so we're going to say functions dot and then this is going to be search for username this is equal to an arrow function this is going to take in some text that we want to search for and then we are going to return sandyclient.fetch what is the issue here sorry this is not functions.function so functions.search username we're going to fetch we'll go with our backticks again we're going to do our asterisks and we're going to say underscore type is equal to and then user and what i want to do is match this text against any text for our user names so we're going to search for usernames in that box and essentially any text that i find i'm just going to see if it's contained in the username starting from the beginning and if it is then i will return that user so the way i do this here is i write and and username and then this is going to be match and then we'll write a variable here with the dollar sign and we'll say text and it will just pass text as the object here so we actually get that now what match says is if the start of the username matches with the text that we have right here then it will match i mean hopefully that's clear but if we have a username that's like hello then the text h e would match with that but the text ello would not match because we didn't start with an h so maybe you want to search for it in a different way but i think this makes sense you're going to search like a few letters and then if the those letters are contained in the beginning of any username then it will show you all of the usernames that have that result right okay so here now we need to decide what we want to return so i'm going to return dot dot which just means everything and then again i'm going to return my followers and here for followers i'm going to count the number of followers that this user has now to count this again is not trivial because i need to find how many references there are from other users to this user because we're not storing followers on a user we're storing following so now i need to do another query and for this query i'm going to say underscore type is equal to and then this is going to be user okay so we'll go with user like that and then we're going to say and and references and then again we're going to go with the carrots and then dot underscore id so we're looking for how many users reference the current user that we got when we're searching through all of the different users okay then we're going to say photo and then this is going to be asset then we're going to have our arrow and then we're going to say underscore id and then url just like we've always done all right i believe that's it for search for username and now it should actually just be functioning i mean i always say that we've probably done something wrong to be honest but let's give it a shot and let's see and you can see i have the uh the bootstrap page open so i could remember what the x meant for px okay so let's go here it says list item is not defined that is inside of profile item so let's go to profile item and i had list groups sorry this needs to be list item so let's change that import now we should be good okay list item import is listed was not found in react bootstrap all right let's have a look here uh the issue is that i need to actually have this be list group and then rather than list item this is gonna be list group dot item okay so that makes sense list group dot item okay now that we have that let's go back and see if this works and let's hit search and we got an issue it says console.error is not a function where is that that is line 11 in search ah this needs to be air okay well that means that we did get an error so that's no good and the reason we got an error is because we need to restart our api so let's restart it because we added some code to it i always forget to do that i always think it automatically restarts now let's try this again so let's refresh let's hit search and we should see some search results popping up here although it's not showing me anything so okay this is a little bit weird why i'm not getting anything at all uh let me have a look here and see what the problem is all right so i realized what the problem here is and it's actually in our api call so the query was working as we wrote it but i wrote it incorrectly because we need to put quotation marks around this text as well as an asterisk at the end that indicates that we're going to be matching using a regular expression pattern so the text and then anything following the text is what we're looking for so hopefully that makes sense but that is why that wasn't working because the query was wrong so we actually had our fetch request going through weren't getting any areas on the back end but we just need to fix this now so that we have the correct regular expression pattern okay so now that we have that let's refresh this and let's hit search and it should show us all of the the different accounts that we have and it's not because i have not restarted my api here so let's restart that now let's give a nice refresh let's hit search and let's see if it gives us any results okay back to the drawing board here not sure what's going wrong now all right so just messing around here because i was really confused why this wasn't working and it looks like the way that we were embedding our text variable in here just wasn't happening properly so what i did here is changed it so now i'm using a dollar sign and just directly embedding text as opposed to using the variable inside of sani client.fetch not exactly sure why this is an issue but i think it has to do with the quotation marks here on how they were being used i think we were having double quotes being placed inside of here for some reason and maybe i didn't need to quote this string anyways i'm just going to go with this because i know this is the solution and now it looks like it's working so i'm going to go back to search here and notice that i've just been printing out the data and the reason i was doing that is because even though now this is working and i restarted my api you'll see that i'm not actually seeing any content here even though i'm being returned all of my different list items which are the the strings that match with this user and if i search again here you'll see that we get even more which is all the users that we created so clearly i'm not rendering this properly so let's have a look here and see why the rendering is incorrect and let me stop actually printing this out because we don't need to do that anymore so this is a very silly issue here but inside of my search results.map i'm not returning anything because of the fact that i have this curly brace here so instead i'm going to remove it and just move this up so it's directly in line with the arrow and now okay it automatically adds a parenthesis but now i'll actually be returning this item before i wasn't returning it i just had it inside of there and so since it wasn't being returned while i wasn't rendering anything on the screen so let's go back now and see and notice that we're actually getting well what we expected now for some reason the images down here are larger than the ones up here that's a little bit strange to me so what i can do is just manually set the width to fix that problem so let's go and do that where is our image our image is in profile item so here rather than making the width 100 and the height 100 in fact i didn't want to make the height 100 i just want the width to be 100 so now let's see if that fixes anything at all uh doesn't look like it so let's just manually set the width let's say width is going to be something like 80 pixels okay let's see now and there we go so now it's fixed and all of our images are uniform width and i think 80 pixels is actually a decent width and we can see as i move this it's going to dynamically resize and everything looks good now let's try searching for some other usernames here so i'll go with something like joey when i do that we get a list that just contains the names that have joey and if i search with something like t now we'll get all the ones that start with t if we go with tim we should just get three accounts nice and then if i hit view here it brings me to the profile page which is going to be the next thing that we're tackling in this tutorial okay so searching is done signing in is done signing up is done viewing post is done so now we're going to tackle is the profile page now the profile page is fairly complicated i won't lie to you and the reason why it's complicated is because we need a way to follow a user unfollow a user and to edit our profile so let's start coding out profile i'm going to go to the profile component and there is going to be a lot of styling here as well because we want to display all of the posts that a user has on their profile as well right so i'm going to start by importing everything that i need i'm going to import use state use effect this will be from react i'm then going to import use params so import use params like that now what this will give me access to is the parameters that were coming from my path so when i go to say tim i'll get access to the tim part which then i can then use to grab the information about the current user so i'm going to say import use params from react router dom okay and then i'm going to import the button from react bootstrap so let's do that from and then react and then bootstrap okay then i'm going to import edit profile from edit profile which we'll use later on and then i'm going to import the css for this which i've not yet created so i'll have to make that but it's going to be dot dot css slash and then profile.css let's go here and make the css file so it's going to be profile.css i will write all of our css inside of here okay so going back to profile.js so we can now set up the state here and the pieces of state that i want is going to be the profile data the post that this user has if we're following this user or not because if we're not following it then we need to show a follow button if we are following then we need to show a different button a button that's going to say unfollow right if we are the owner of this profile or not if we own this profile then we need to show an edit button so we can edit the profile and then we need to know if we're in the editing mode or not because i'm going to display i think it's called a modal it's kind of like a popup where we'll be able to edit the profile without leaving the page so those are the three pieces of state that i need not three pieces that's more than three i believe it's five pieces but i'm gonna say const profile and then data and then set and then profile data this will be equal to use and then state and we'll just put an empty object inside of here for now and then we're going to say const and the next thing we need is the posts so posts and then set posts like that this will be equal to use state okay nice and then we'll say const and this will be following and then we'll say set following like that and we're going to say is equal to and then use state and for now we'll make it false then we are going to say const and we're going to say owner so are we the owner of this or not and then set owner and then this will be equal to use state false and then we're going to say const editing telling us if we're editing or not and then set editing is equal to use stay false and then finally we're going to say const params is equal to use params like that which will give us access again to the profile that we're currently looking at okay now what i'm going to do is write a few functions just that we have them defined and then we'll fill them in so the first function we want is going to be update following this will tell us if we're following or not so i'm going to say update following i will take in profile here and for now we just won't do anything then i'm going to say function this is going to be update profile so this is just going to grab the profile information for a specific username okay and then we're going to say function and this will be follow click so if we click the follow button what do we do here okay and i think that's all we need for our functions nevermind we need one more and this is going to be hide edit callback and again we'll fill these in later i just wanted to code them out for right now so the first thing i'm going to do is just say if the profile data is equal to an empty object then what i want to do is just return nothing and the reason i'm going to do this is because actually we're going to return no is because if we don't have any profile data then that means that the profile that we went to does not exist so i will show an alert for that but i just don't want to render anything on the screen so we'll just return no otherwise though if that's not the case then we can start actually coding out the content of the profile page now again this is going to be fairly complicated a lot of css just because we need to design kind of like a decent looking profile with everything laid out properly so i'll code out everything and then i will try my best to walk through it but there is some understanding of css you have to have to understand how this works so for now we're going to say class name is equal to profile okay then we're going to do an h4 tag for the name of the profile now you can make this smaller if you want but i think h4 is good and we're going to say at and then this is going to be the profile data dot and then this will be the username of the profile then beneath that i'm going to have a div and for this div we're going to have a class name which is equal to the profile data now the profile data is going to be the number of posts the number of followers and the number of following uh it also actually i'm not sure if in this div we're going to hold the post or not but either way we'll have this div now inside of here we want an image the image is going to be the profile image right of this user we want to see that so i'm going to say image src is equal to and then this will be profile data dot photo question mark so if we do have a photo then we will display it so we'll say profile data dot photo dot asset dot url otherwise though we're gonna show the placeholder image which i'm just gonna grab from profile item right here okay so let's grab that and paste it here then uh we can add an id for this we'll say id is equal to and this will be the profile underscore image we could have made this a class but i think the id is fine and that will allow us to then change the size of this which we'll do later on okay so now that we have the username and we have the image the next thing that we want to display is what i'm going to call some vertical data so i'm going to say div div it's going to be class name equal to vertical and then data like that and then inside of here i'm going to put a p tag and in the first p tag what i want to put is the number of posts that this user has so i'm going to say strong strong and we're going to say posts and then beneath this i want to display the number of posts in an h4 tag so i'm just going to say h4 and then i'm going to go here and say that this will be so here i'm going to say posts question mark and then post dot length so if we do have some posts then i will display what the post doll length is otherwise i will display zero just in case for some reason when we try to get the post we get an error we'll just show zero okay then the next thing that i want to display is some more vertical data so i'm going to copy this because what this vertical data class will do is it will just align both of these so they're going to be on top of each other and be centered so other than posts i want the number of followers so let's go followers let's then say data dot followers and then this is going to be profile data dot followers dot length and otherwise we'll display zero okay copying this again we're going to have one more piece of vertical data which is going to be the following so now rather than followers it's going to be following and then this will be profile data dot and then i think we can just do following because following will already be the count because we'll get that from the query from the back end whereas here the followers will be a list or an array and so we just need to count the number of elements that are inside of that okay now that we have that we want to write the follow button so i'm going to say div class name is equal to and this will be the follow button all right so for the follow button there's a few things i need to do here hence why the logic is going to be kind of long i need to check if we're signed in and if we're signed in then i'm going to allow the user if it's not their profile to follow or unfollow and if it is our current profile so like the profile we're looking at is ours then we'll be able to edit it now if we're not signed in then we won't show any button because you can't interact with the profile if you're not signed into an account so let's do this we're going to say user and and not owner so if we are signed in and we are not the owner then we'll do this sorry this will be a question mark we'll do this otherwise we will not display anything and inside of here we're just going to show a button now the button will say follow or unfollow but the text of the button is going to be variable based on if we're following so i'm going to say following question mark if we are following then it will say unfollow otherwise it will say follow okay and then for the variant again that's going to be determined on if we are following or not so i'm going to say variant and then this is going to be following question mark if we are following then it will be a danger because unfollowing will be red and if we are not following then it will be a success as saying that you know we want to fall so we'll have a green button to follow and a red button to unfollow i think that makes sense uh for the button we need an on click as well so let's have the on click equal to and then this is going to be the follow button pressed what did i call this follow click sorry so let's go follow click like that all right i think that's it for the button that looks good now now beneath here i want to potentially render another button that says edit so i'm going to say if user and and so let's go and and owner here then i want to display a button so question mark otherwise no and this button is going to say the following it's going to say edit the variant is going to be primary so it'll be blue and then the on click will be and i guess we'll just go with set editing here so i'm going to say this is an arrow function and we'll set editing true and when we set this to true then we will dynamically render that editing page and so we'll show the editing page once uh this here this piece of state comes to true okay so i think that's all we need for the edit button that looks good to me now that we have done this we have written a lot let's uh go through what we did so far so we have our profile that's inside of this div we then have an h4 here which is going to be the name of the profile so the username we then have profile data so all of that goes inside of this div right here and we have an image which is the profile image we then have a bunch of vertical data divs which are storing the number of posts number of followers number of following then we're going to have a button so all of these divs here these four divs because they're inside of this profile data div they're going to be aligned in a row beside each other with a certain amount of spacing that's why i put them in here same with the profile image okay so now that we have that we want to go down one and we want to create a profile bio so i'm going to make another div here and i'm going to say div div class name is equal to and this will be profile and then bio like that and the bio is going to be like your first name last name and then the description that you had so we'll make a div div class name is equal to and then the first class that we'll have here is the profile name okay and then inside of the profile name i'm going to have a strong tag i'm going to display the first and last name now i can actually just copy what i had for profile item so let's copy this here first name last name and we'll just modify it a little bit so actually profile data dot first name okay and then if that's the case we'll display oops did not mean to copy that whole line if that's the case we'll display the profile data.firstname now the reason i'm doing this is because you could only have a first name or you could only have a last name well if you don't have one of them i don't want to get an error by trying to access it and then not seeing it there okay so i think that's good for our profile data or for our first and last name sorry now that we've done that let's do our bio so in another div i'm going to say class name is equal to and this will be the profile text and then inside of here we'll go profile data dot and then this will be the bio now i think i might be crazy here because i keep saying bio when i think i mean description but let me go to my database and let's go to user and we have bio okay so it is bio in here so when i'm making a user i guess i didn't enter the bio field have i been looking at the description of a user at all recently no the description would have been of the post okay so my apologies i'm just going a little bit crazy after coding for this long anyways we'll continue here so we have profile attacks we're going to show the profile data dot bio that looks good to me and then that is all good for right now okay the last thing that we want to show here in another div is going to be all of the posts of the user so we're going to have a div i'm going to say that the class name of this div so let's code that out first is going to be equal to profile and then this is going to be posts and then wrapper and then we're going to have another class or another div with a class name of profile posts let's end the div okay and then inside of here i want to map all of the posts so i'm going to say posts and we're going to say and and post dot length so let's go post dot length is greater than zero if that's the case then i want to map all my posts i'm going to say post.map and we're going to map the post and the idx and then here what we want to return is an image for the post so i'm going to say image src is equal to post dot photo dot asset dot url and that should be fine because if we have a post we know we're going to have an image for it and then we need to end the image tag and we need to say key is equal to and then this is going to be idx okay now i've done something wrong here with the brackets let's see how i can fix this okay so we're returning we have our image tag which is closing this should be this closing tag let's see what's wrong alright so the issue here is that i just need to add something where i do colon null just so we have another option so if this is not the case if this condition is not the case then i want to display no now what's the error here expected a colon no i think it's expecting a question mark but when i save it it's auto formatting okay it looks like that's all good okay apologies that was a lot of code to write at once let's remove this final return statement but we've completed the html for this page now really what we need to do is fill in these functions and we also need to write all of the css now we can't really write the css or at least see what it's doing until we have these functions filled in and we're getting some profile data getting some posts and getting all of this so let's start by writing the function which is going to be update profile so i'm going to go to update profile here and what i'm going to do in here is i'm going to fetch and i'm going to fetch from slash and then get profile which we've actually already written and i'm going to say user is equal to plus and then user all right and actually sorry it's going to be user name and we're going to get username from our params we're going to call this function from somewhere else which i'll do in a minute okay so we have fetch slash get profile user username i'm going to say dot then we're going to get our res we're going to return the res.json then we're going to say then again we're going to get data and we're going to return the data so we're going to say actually we're not going to return the data we're going to set the profile data of data okay so that's what we need for there however we need to do a few things just in case any errors occur here so let's add our curly braces and the first thing that i want to check is if we have any profile data so i'm going to say if and this is going to be data and i keep writing the wrong brackets i'm going to say if data dot length is equal to 0 then i'm going to add an alert and i'm going to get the alert from in here so i'm going to take in user and i'm going to take in set alert so i'm going to say set alerts like that and the alert that we want to send is that this user does not exist so if we don't get any length from our data that means there was no user that existed with the username that we're trying to get the profile for so we set the alert with the variant equal to or equal to danger and the message equal to no user no user with this username exists okay or i guess we could say profile does not exist that's probably a bit shorter profile does not exist uh not exist okay nice so that's what we have for set alert and then we can just write return here and then down here we will set the profile data however before we set the profile data i want to fetch all of the posts that this user has and i have to do that in a separate request based on the way that i'm going to write these queries so i'm going to say fetch and this is going to be get so slash get posts and this is going to be question mark user equals plus and then username okay and then here i'm going to say then i'm going to get my response i'm going to return my res.json okay then i'm going to say then i'm going to get my data and i'm going to handle the data so again what we're doing here is we're getting all of the information about a specific user so we're just getting their profile then once we get that assuming that we actually have a user with that name we're going to get all the posts from that user and once we get the post i'm going to change this actually so rather than this saying data this is going to be profile data okay and we'll change this to be profile data just a little bit more clear and actually no we don't want to shadow the above name so let's leave this as data let's leave this as data as well but let's change this to be posts just so it's clear that we have data up here and we have posts here because we're going to have to use them both so i'm going to set the profile data of the data that we got here but then the post i'm going to say set post and that's going to be the post that we got all right so now that we've done this i just need to make a few modifications first i need to make this data 0 because again our data is going to be a list even though it only contains one element so i want to get the first element then i'm going to call this update following function so i'm going to say update following and i'm going to call this with data0 and this will update if the current user is following this user so we know if we have to display a follow button or an unfollow button and then lastly i'm going to say set owner and i'm just going to say is the current user which is stored in the variable user equal to data zero and i guess we'll do three equal signs because this is javascript dot and then username so this is saying is the current user the profile that we just got if it is then we want to show the editing button or show the edit button at least and so that's why we're we're setting this here okay now that we've done that we can just add a cache so we'll add actually i guess we can just add one catch right here so we can say dot catch we can say error then we can say console dot error and we will just display this error this here should actually handle almost all of the errors for us so if we get a length of zero then we'll just say profile does not exist otherwise we can just log the error to the console okay now that we've done that i guess we need to write the get post request and then once we write the get post request we're going to have to write this function here for update following and actually i think we can just write update following first because this is pretty straightforward so for the update following all i need to do is just loop through all of the followers of this profile and see if the current user is in this so i'm going to say 4 and this will be let and we'll go with follower of and then this will be profile dot followers then i'm going to say if follower dot username is equal equal equal to the user then what we'll do is say set following and we'll set that equal to true and then we'll break actually not break we're going to return sorry and then otherwise so if we get to the end of the four loop we'll say set following and then false okay so this just sets the state again telling us if we are following or not now what i need to do is add a use effect here so i'm going to say use effect and i'm just going to call this update profile so i'm going to say update profile and then what i need to pass here is the dot and then username like that and then when i want to run this again is whenever the params.username changes or whenever the current user changes so if i log out that i need to refresh the page again so we change the follow button actually we remove the follow button off the screen if the user were to sign out or we show the follow button if the user were to sign in okay so the next thing we're going to do after this is editing but i want to write this get post first which will just give us all the posts of a specific user so let's go to api calls and actually not api calls let's go to index.js and let's start writing out this function so get post is going to be pretty straightforward we're just going to say app dot get it's going to be slash get and then post like that and then we're going to do request response and we're going to get the query parameter which is the username so i'm going to say const user is equal to request.query.user that looks good to me then we're going to say get posts pass the user and then you already know what we're going to do here dot then i'm going to take in our data i'm going to say res.json data okay so now let's import this and then write the function so we're going to go with get posts and then we're going to go to our where is this api calls and start writing this so functions.getposts and not a following just get posts we're going to take in a user equal to user equal to an arrow function we're going to return the sandy client.fetch and we need to fetch again another query here so this is going to be the asterisks square brackets underscore type is equal to and this will be post and then we want to say and and the author of this post and then the username is equal to and then this will be pound or not pound dollar sign user and then we'll pass our username actually i can just change the parameter name to be username and then that will fix the problem for us okay now we just need to write the data that we want to get so for the data here i want to get dot dot so everything as well as the followers or sorry not as well as the followers but as well as the username so i'm going to say username and then this is going to be equal to author and then username and then i want to get the photo so i'm going to say photo and this will be asset and then the asset is going to go to underscore id and url okay that's all we need so what this query is going to do specifically it's going to get all of the posts where the username of the author of that post is equal to our user or our user name sorry and yeah that's all we need and then we're going to get the username of the author just as a field that we've added as well as everything else and then the photo the asset the id the url okay so i think that's all good so let's rerun our api here so let's go and stop this okay let's go npm start and then is there an error here we do have one error uh what is the error that we're getting it's saying the dot css doesn't exist okay uh what is the problem looks like it imported a css file that we don't have so let's go to profile and dots ah this is why i just need a slash here now when i add the slash it should fix the problem and notice our error goes away and we're only having warnings okay let's try this now go to the front end uh let's refresh and notice that we get an empty profile photo we get an at we get post followers zero zero zero and it says uncaught type error res.arraybuffer.js is not a function it looks like i must have messed something up there so let's go to line 40 here and what is the issue i have array buffer why the heck do i have array buffer autocomplete must have did that to me let's save that let's go back here and notice we get ten one two three four five zero post zero followers zero following now let's make a post uh please sign in to make a post okay fair enough let's go tim log in and let's go post let's choose a file uh let's just post this thing i don't know what this is okay hello make a post all right we go to our feed here we're not gonna see it because we're not following ourselves that makes sense now let's go to our profile by clicking on this and notice that it shows us okay so it's actually showing us all of the posts unless maybe i posted the dwayne derock johnson from tim as well although i don't think that i did maybe i did i mean we can check that so let's go here let's go to post let's go to dwayne and i did post it from him okay so that makes sense so it's showing us all of the posts here that we had as well as number posts number followers number following and the only thing i'm not seeing right now is the button and i'm not sure why i'm not seeing that so let's see how we get the button to show up and then let's do the css to fix this and then we will continue okay so where is my button my button is right here i'm saying user and owner and ah the reason for this is i'm not passing user to this uh profile component and i'm also not passing set alert so let's fix that let's go to app let's go here to our profile and let's say user is equal to and let's pass user and then let's go set alert is equal to set alert and we're all good okay now let's go back and now notice we're getting the edit button because this is our profile awesome when i click that it doesn't do anything but that's what we expected now let's go here to search let's search let's go to say joey and now notice it shows the follow button here because we are not following this user obviously we need to make the follow button do something we're making some really good progress so far on the profile page all right so now we need to add following we need to add the styling so let's do the styling first i keep forgetting to do that it's also because i hate styling as i'm sure many of you do as well let's start writing out all these classes the first class that i'm going to write is my vertical data i'm going to say this is display flex i'm going to say this is align items and then we're going to align this in the center uh we need our semicolon here okay we need the justify content so we're going to say justify content center and then we're going to say the flex direction is going to be columns so they go above each other so let's have a look what happened now when we add that notice that now our posts followers and following are all stacked above each other which is what we wanted okay the next thing we want is dot profile so 4. profile i'm going to say display flex we're going to say flex direction here is going to be row okay then we're going to say justify content this is going to be center align items this is going to be center i'm also going to put a flex wrap here where i say flex wrap and this is going to be wrap okay let's have a look now and notice that everything kind of gets pushed in the middle here a little bit strange but we're making some progress all right next i actually need to write a class that i forgot to add so what i'm going to do is go back to profile here and add another div that i forgot to add here so right inside of profile i'm going to say div class name is equal to this is going to be profile hyphen banner okay so this is going to contain everything up to but not including the posts so i'm going to put the ending div tag right here and now we have a profile banner div so now i'm going to go to profile.css and i'm going to code this now the profile banner again just contains kind of the top banner aspect that's everything other than the post for this user okay so we have profile banner what we want for profile banner is the following we're going to have a min width so we're going to say min width is going to be 30 of the screen or of the parent we're going to say the max width will be 500 pixels again this is not the best way to code all this out but it will make it look decent enough for our our purposes i'm going to say this is display flex i'm going to say flex direction and this is going to be column okay i'm going to go with align items so align item center we're going to go with the justify content center as well and then we're going to go column gap which is how much of a gap there is between each column and this is going to be 2em okay now let's have a look here and notice it brings it all back here over to the left hand side don't worry as i code out the rest of it it will continue to fix it so that is profile banner now we need our profile data so i'm going to say profile data and this is going to be display and this will be flex and then we want to have a flex direction of row and then we want to have a column gap here as well of 2em okay so continuing here let's go dot follow and then button and for the follow button i want to have the display of flex and i want to have a line item center okay then we're going to have our profile image which i'm referencing with id don't really know why i went with id as opposed to class but it's done now we're going to say max width is a hundred percent so let's fix that and then min width is and this is going to be a hundred percent okay apologies if you hear my little kid in here that is meowing sitting right beside me i know you guys can't see her but uh she's meowing and i'm not sure if it's picking up on the mic or not we're going to continue here we're going to have profile bio this is going to be display flex and then we're going to say flex direction this is going to be the column okay and then we're going to go dot profile posts and then this is going to be hyphen wrapper this is going to have a min width and not of none but of 30 percent it is going to have a max width of 500 pixels so 500 px and then it's going to have display flex okay and the flex direction is going to be column so let's fix that okay then for our profile posts i want to have a grid to display them so that it's nice and organized so i'm going to have profile posts and then inside of here we're going to have display and this is going to be as a grid and then i'm going to say grid template columns and i'm going to say one fractional unit one fractional unit one fractional unit and what this will do is make it so that we have three posts in every single row of our grid uh that's kind of just what this is doing now if i wanted four i would do one more fractional unit if i wanted to i would remove one i'm not going to explain much more than that that's what that line does though and then finally i'm going to say profile posts and then for all of the image tags inside of there i'm going to say the width can be a hundred percent and the min width will be a hundred percent as well okay min width and then a hundred percent okay again i'm not a master of css i'm sure some things here don't make complete sense and there's probably better ways to do stuff but this is what i got working before and i'm not really down to change it right now okay so let's go here and let's refresh okay so that looks better after i refresh but this image is way too big so i gotta find a way to make the image smaller so let me have a look here and then i'll be right back all right so i realized what the issue is i had this at a hundred percent when i meant to have a hundred pixels for my profile image so let's fix that make it pixels not percent and there we go that is looking much better now it is a little bit offset like it's over to the left when i want it to be in the center so again let me just have a quick peek here and see why we're getting that alright so i see the issue here for my align items in my profile banner i'm actually going to align them at flex start which means i'm going to align them at the beginning of the container and i think that should make the fix so let's have a look at this now and that looks a bit better so these items have now been pushed over to the left we still have this kind of offset to the left when it should be in the middle of the screen so let me continue look for the issue here i'll be right back all right so i found the other issue here had to do with my profile so i had the flex direction as row when it needs to be column uh when we make that column now it should fix this and put it in the center of the screen as you can see it does and when i resize it everything is dynamic and looks okay all right there we go now let's go to tim's profile because there's some images there and let's see if these are laid out nicer now so for tim now we get our two images not perfect but i can live with that for right now it's good enough again we're not focusing a ton on the styling but i can see the different images and actually maybe one thing that i do want to do is add a little bit of a break here between the images as well as the bio here so let's implement that and the way that we can do that is we can go to uh profile here and we can just add in a break div in between here so i can say div i can say class name is equal to break and then if i go to my profile.css let's just write that so i'm going to say dot break and for dot break this will be pretty straightforward we're just going to say flex and then basis is going to be 100 okay and then we're going to say that the height of this is going to be 2 em which is how much we want to break by now the flex base is 100 we'll just make it so it takes up 100 of the width of the screen and then the height 2em will just be well the height and so it should break uh okay that is actually not what i was expecting was going to happen uh let's change something here okay so the reason that happened is because my profile flex direction is column i know i just changed that but now that i've added the break in i think it messed some stuff up so let's change this back to row now and when i change this back to row you should see that now we get them aligned in a row and okay there we go so that's better all right now we have our space we have our name we have this let's sign in now let's now go to our profile and now notice it says the edit button shows this shows our name very nice okay everything is working as i expected now we want to be able to edit the profile and then follow and unfollow and then we will be done with this project so let's start by coding out the edit profile now as i said i'm going to put that in a separate component and this is going to pop up a popup or a modal that's going to show us all of the different fields so we can edit so we can edit the profile photo we can edit the bio we can edit the first name and the last name so what i want to do for edit profile is start with my imports so i'm going to say import use state and then this will be from and react and then i'm going to import the button the form and the modal from and then this is going to be react and then bootstrap okay nice now that we have that let's take in some props here so the props that i want for the profile is going to be should i show this what's the hide callback so when i hide this modal by clicking out of it what's the callback function for that then we have user we have not add alert but set alert and then we have the profile data because we need to populate the fields with kind of the default data that's already there and then see if we need to update it or not so what i'm going to do now is say my state so i'm going to put a state for the bio so i'm going to say const bio and then set bio is equal to use states we'll say use state and then this will be the profile data dot bio so that's what the default value is going to be for it whatever our current profile data bio is then we'll have const and this will be the first name and this will be set first name equal to use state profile data dot first underscore name okay and then we're going to have const last name set last name is equal to use state so let's do that profile data dot last underscore name okay then we're going to have const and this will be a file this will be set file and this will be use state and this will be an empty string and the file is going to be for our profile picture and i'll show you how we update the profile photo later on okay then we are going to write the html for our page or for this modal for the component so i'm going to return a modal now this is kind of a popup on the screen that's what i've been saying a bunch of times now now do i want to show this well i'm going to say show is equal to and then show so if this is false we won't show it if it's true then we will show it i'm going to say on hide so when this is hidden what do we do well we're going to call the hide callback function which will be passed to us from wherever we render this component then inside of here i'm going to say modal dot header and for the header we're going to add a close button which will allow us to close this and i'm going to add a title so i'm going to say modal dot and then title and then this will be edit profile and i think that's all we need for the title okay now outside of the header we're going to add a body i'm going to say modal dot body of course this will be the main body of that and then inside of here we're going to add a form so add form and inside of the form we're going to have a group so form dot group okay and then the class name here is going to be margin bottom three or mb3 then we are going to update the profile photo if we have one so i'm going to say profile data dot photo question mark so do we have a photo in sorry and and not file now the reason i need this is because what i want to show for the image is whatever the photo is currently of our profile and if we don't have a photo then i want to show the file that the user uploaded however if we have a photo and we have a file meaning that the user just changed the profile photo then i want to show the file that they uploaded so that's what i'm checking do we have a photo and do we not have a file if we do let's show the photo otherwise if we have a file let's show the file that they upload okay so if that's the case then what i'm going to show here is an image tag and inside the image tag the src is going to be the profile data dot photo dot url sorry dot asset dot url and then the class name is going to be equal to so for the class name let's go with upload image and then we will write the html for that or write the css sorry for that in a minute now otherwise okay so for the else here what i need to do is render a different image so i'm going to say image it's going to be src and this is going to be equal to the following let's just end the tag here so i can save this hopefully oh okay let's do this okay now it's going to be a little bit easier for you guys to see so i'm going to say src is equal to and i'm going to check here if we have a file so i'm going to say file question mark if we do have a file then i'm going to say url dot create object and then this will be url and we will put inside of here the file otherwise we'll just have null here for the source of our image so we won't actually show anything and i'll say class name is equal to and again this will be upload image which we're going to need to write the css for in a minute okay so that is for our image now let's copy this form group and let's put another one and let's copy it a few times because we're going to have three more inputs here so for the next one i just want a regular input which is going to be a file input so i'm going to say input this is going to be type equal to file and then what do i want next i want it on change and the on change is going to be equal to an arrow function and the arrow function is simply going to say set file and this is going to be e but we need to take an e here dot target dot files at index zero which we've already seen so that'll give us the file that we actually uploaded here and then we can say accepts or actually let's go look at our create post and try to remember here what we had okay so it says accept image slash and then asterisks okay so that's what we want for this as well so edit profile let's paste that in okay that's it for that form group now we're also going to have another one which i forgot about in the next form group though we are going to have a form control for the first name i guess so we'll have form control and then we'll just end the tag inside of itself we'll say type is equal to text we'll say placeholder is equal to first name and then we're going to say that the default value is going to be equal to profile data dot first underscore name okay and on input this is going to be equal to an arrow function where we're going to update the first name so we're going to say set first name e dot target dot value okay so let's copy this and let's paste the same thing here but now we're going to do this for the last name so the default value will be last name and then we will do rather than set first name set last name okay lastly we want the bio so we can actually paste this in as well and now we're just going to say bio this will be dot bio and then rather than setting the first name we will set the you guessed it bio okay last thing we need here is a button so inside of the form i'm gonna put a div i'm gonna put another div here and then i'm gonna say that this is a button okay the variant will be equal to uh primary so we have a blue button here the type is a button although i don't actually think i even need that one it's just a default button and i'm going to say on click is equal to and then i'm going to make a function here so i'm going to say function update profile okay and we'll do something inside of here for now though let's just call update profile okay so that should be the html of the entire page i believe that's all good what is the issue here with the return i expecting that uh okay i think this is fine um yeah just give me a warning okay so i guess my vs code is just tripping out now i think that's all good for right now now we need to do is code out this update profile function so inside of this function since i need to actually send a file right if we have a file to update the uh what do you call it the profile image i need to create my form data so i'm going to say const form data is equal to new form and data like that okay then i'm going to say form data dot append and we're going to append the file with the file and the form data dot append and we're going to append the user user and this is actually going to be the user that we want to update the profile for which will just be our current user so actually that makes sense we can just use user inside of here all right so then i'm going to continue and say form data dot append we're going to append the first name so let's do that the first underscore name this will match up with first name which is our state variable and then form data dot append we're going to append the last name and the last name and then we're going to do the bio so form data dot append and then bio bio like that all right that should be all good then we're going to say const request options and we're going to say that this is equal to and this is going to be method and this is going to be post now we also could maybe make this a patch method but i think it's fine just make it a post because we're going to be uploading a file as well and then for the body we're going to have our form data okay then we're going to fetch an endpoint we need to write this endpoint still but we might as well just write the code now and this is going to be update profile we're going to pass to this the request options and we're going to say dot then we're going to get the response and we're going to return the response.json we're going to say dot then we're going to get the data and then we're going to do something with the data now what we're going to do specifically is we're going to add an alert and we're going to say actually is it add alert what did i call this set alert i keep saying add when i mean set okay so we're going to set an alert and we're going to say here the variant and this is going to be equal to success okay and then the message and this is going to be equal to profile updated successfully okay now what i'm about to do here is going to seem a little bit weird but it's going to save us from having to make another request to the api to retrieve the new image for our our profile image if we uploaded one so explain why we need this but i'm going to say if file so if we did actually upload a new file then i'm going to say data dot and i'm going to add a new key here it's going to be image url is equal to url dot object or dot create object so it's going to be create object url and i'm going to pass to a file now the point of this is that i'm going to now call the hide callback function with my data and i've now added this image url field to it and so now from the component that's rendering this which is going to be the profile component i can grab the image that was uploaded here in the modal and without having to wait to get a response from the api at least to send another request get the new profile data get the new image etc what i'll do is just immediately update it on the profile and so it's going to seem like it's a lot faster because what happens here is when i send this request it's going to return to me all of the data that i updated on my object it's also going to return just the data of the object in general the issue is that it's not going to return to me a url for the image that i uploaded it's only returning to me the id and the reference of that image so since i already have the image path here i'm going to say data.imageurl is equal to and i create a url for it and then i display it immediately again this is saving me a request to the api so once we start getting through this it'll make more sense but again we're just adding the url to the image we uploaded to this data so now i can grab that from the profile component and i can just display that instantly and so it looks like we updated very quickly when we don't have to send a second request to the api to get the new image hopefully i'm clear there let's add a cache though just in case something goes wrong so i'm going to say error and then here we will add an alert actually so i'll say set alerts caught myself that time and let's go with variant and this will be danger and then the message will be error dot message and then we also need to call the hide callback function from here as well but this time we're not going to have any data to return so i'm going to do semicolon and then i'm going to call the hide callback and i'm just going to pass to it undefined because we have no data okay so that's it for the update profile function now that's really going to complete this component now what we need to do is write the update profile api endpoint so let's go to actually index.js first and inside of index.js we're going to write this so we're going to say app dot post now this is going to be slash and this will be update profile now here we want to accept a file although we're not sure if we're always going to get a file but we could because when you're updating the profile the idea here is that you can update some aspects of the profile but you don't have to right you might only update the first name you might only update the last name so we have to be careful here how we're updating this and making sure we don't clear any fields if we didn't change those so i'm going to say upload.file and then inside of here actually sorry not upload.file upload.single this will be a file and then we're going to say let's go here request response and then this will be equal to an arrow function inside of here i'm going to get the body so i'm going to say const body is equal to and then request dot body like that all right so now that we've done that i want to call a function called update profile and i need to pass to this mybody.user mybody dot and then this is gonna be the first name my body dot last name okay so let's go last name like that my body dot and then this is gonna be the bio okay and then finally we're going to pass the request dot is it image or is it file i believe it is simply file okay then we're going to have dot then data and then we're going to return res.json like that all right so let me just quickly fix this so that we don't have these uh things here because we don't need those now what i wanted to mention is that throughout this video i haven't really been showing you all the responses from the sandy client now they're just standard json responses that are going to contain all of the fields from our database but now at this point it's going to be a little bit different because we're going to actually be updating an object and when we update an object it's going to return to us kind of a different looking response now from the sandy documentation you can see exactly how all of that works but i just wanted to mention that if you want to look at what the exact response is you can come in here and you can just print out the data before you return res.json and then that way you'll be able to see well exactly what the response is in the console or specifically you'll see it actually from your api like when i was here when i was printing out a file that i was uploading in fact let me remove that i have a console.log somewhere uh where is it yeah right here console.log request.file okay anyways we have update profile we have this function so let's now import the function okay and then i just want to copy this just so i don't forget the different arguments and let's go into api calls and let's start writing this so i'm going to say actually not const functions dot and then this is going to be update profile like that this will be equal to an arrow function and then we're going to take in the first name the last name the bio we also need the user so first we'll take in the user first name last name bio and then this is going to be the file or we'll call it the image this will go to an arrow function and inside of here we need to make what's known as a patch request uh with the sandy api client so that we can update the profile so to update the profile first we're going to check if we have an image because if we have an image we need to upload that image and then use the new id of that image as kind of an update field when we're updating the profile of the user right so i'm going to say if image like that so if we actually have something then we're going to return the sandy client and this is going to be dot assets right and then dot upload and we're going to do exactly what we did before so sandyclient.assets.upload we're going to upload an image we're going to create a read stream this is going to be of the image dot path and in fact uh actually yeah we'll just cut it out because why not we have the file name here and this will be the base name of the image dot path okay and then from here we're gonna say dot then and then we're gonna have some data and then what we're going to do with this data is we're actually going to say functions dot get user id like that we're going to get the user dot then i know this is a lot i'm going to save in a second actually let's save right now just so we can see this a little bit easier okay that's a bit easier to read so i now have dot then now i'm going to get ids and then from the ids excuse me i need to say sanity like this so sanctity sanity client dot and then this is going to be patch and i'm going to patch ids 0 dot underscore id don't worry i'll explain all of this in one minute and i am going to set something specifically i'm going to set all the fields that i want to update so let's write that out but first let me just fix this so i don't have my curly brace because i can't have that here that's going to crash my program okay so dot set and this is the way that we update a field okay so let me just slow down for one second because i'm getting lost a bit myself so we have if image if we do have an image we're gonna start by uploading the image which we already know how to do once we upload the image it's gonna return to us some data that data is going to contain the id of the image which we're going to use to reference it okay so that's where we're first uploading the image then we're saying functions.getuserid we've written this i guess very close to the top yeah it's right here just returns to us information about a user specifically just the id but it's going to give it to us in a list so we want to get id 0 and then dot underscore id which will actually be the id of this user then we're saying dot set because we're patching here so patch says we're going to be updating and then we're setting and when we set a field we're just changing the value of that field to be whatever we want so then i'm going to write an object here and i'm just going to put the names of all my fields so i'm going to say first name last name bio and then for the image we're going to have to set it a little bit differently so we're going to say the image actually not the image sorry the photo because that's the name in our database and this is going to be equal to an asset and the asset is going to be a reference so we're going to say underscore ref and this is going to reference data dot underscore id okay let's save this now it's a little bit easier to read so again we upload the image we get the data associated with the image which will allow us to get the id we get the user id of the current user and then we say sandy client dot patch and we're patching what id or what document we're patching the document with the id of this user so when you use dot patch you pass in an id of the document that you want to patch and set different fields on and then i'm saying dot set so dot set allows me to actually set the values so i pass an object here i pass first name last name bio and then i'm passing photo and this is going to be an asset that's referencing the image that we just uploaded which we're going to be able to get the idea of from data okay and then what we do is we type dot commit and when we do that it's going to commit all of the changes to the sanity database all right now we also have the option to unset i won't show you that again you can reference it from the documentation but setting is how we can make an update to the object and override those fields nice now that we have that we need to write an else because if we don't have an image then we're not going to upload an image in fact if we don't have an image we're just going to do this so i'm going to copy this part right here actually it'll just be this first part and we're going to say return like that this is going to be functions.getuserid dot then and then inside of here what we're returning is sandyclient.patch id0id set first name last name bio but we're not going to set the photo this time because well we don't have a photo so there's no reason for us to set the photo right pretty straightforward okay so i think that's all we need to do inside of here that looks good for update profile definitely the most complicated one that we had to do thus far now we will go back to edit profile and i guess we can actually just give it a test although i need to render this component from inside of profile so i am importing edit profile from edit profile so what i'm going to do now is go here to right before profile and i'm going to reddit the render the edit profile component so i'm going to say edit profile and then what i need to pass to the profile is quite a few things so i'm going to say user is equal to and then user i'm going to pass show which is going to be equal to editing so if we're editing or show it oh we're going to show it if we're not then we are not obviously and then i'm going to pass my hide callback okay so hide callback is gonna be equal to and then what did we call this i think we called this hide edit callback okay that is what we called it and let's just end the component so i don't forget to do that so we have user show hide callback we also need to pass our profile data so i'm going to say profile data is equal to and then profile data let's save that and then lastly we need to pass our ad alert so i'm going to say add alert is equal to and then add alert which would have been passed to us in a prop right here and oh my gosh i keep saying add alert set alert set alert and then let's just go to edit profile make sure i called this set alert okay i did call it alert nice okay so that now will actually allow us to view the edit profile page whenever we click the edit button all right i think that's all we need to do for the profile component i have a feeling a few things are not going to work as expected but that's fine we'll fix them when we get to that point so let's go here let's go to our react app let's refresh okay let's sign in let's sign in as tim let's go to our profile and notice we can click edit so let's hit edit and nice we get this modal now the button oh i forgot to put text for the button so let me do that in a second we also need to make a size for the image so it takes up some room but you can see i have tim rasika and then i don't have a bio now when i press the button it should update but let's first just fix this a little bit so that the button actually has a name so let's go to edit profile our button is down here so let's i don't even know what we should do maybe just submit i think that's fine uh and then our image we want to add a oh we want to add the styling for upload image okay so let's do that first so let's actually do this inside of profile.css and we'll say dot upload image and then the image that we want to upload here is going to be width of 300 pixels and height of 300 pixels just give it a static width and height for now doesn't really matter too much okay so let's restart our api actually so now we can test this so let's go yes let's restart okay started all right now let's come here let's sign in as tim so sign in okay now let's go to our profile okay it says edit shows our modal perfect now we could put this in the middle i'm not too worried about that right now let's add a bio so let's say hello world and let's add a new image and actually we don't have any image at all so let's just go with something like this okay nice dog let's press submit and let's see if this is gonna work or not okay so it said profile updated successfully but we have not closed the modal and when i come back here it's actually not even letting me close it because i have not implemented the hide callback function so we need to fix that but it does look like that it was updated we didn't get any errors which is a good sign so let's continue okay so let me close this let's go to edit profile and we need to implement this hide sorry let's go to profile my bad we need to implement this hide edit callback so inside of hide edit callback we're going to say set editing false now that will at least close the modal for us we also need to do a few other things the next thing that we're going to have to do is get the data that's going to be passed here and we're going to use that to make some updates to our profile again so we don't have to send another request so i'm going to say if data so if it's not undefined if this did happen successfully then i'm going to say profile data dot first underscore name is equal to whatever the new data.firstname is and then the profiledata.last underscore name is equal to data. and then last underscore name okay and then i'm going to say if data.image underscore url so if we do have an image url inside of there then we'll update the photo so profile data actually we'll say profiledata.photo is going to be equal to and then this will be an asset and then this will be a url and the new url will just be data dot image url okay and then down here we'll say profile data dot and then bio is equal to data dot bio okay and then we'll say set profile data and we will set it to be profile data just to make sure the state updates okay so just to stop here and explain because i know i'm not explaining exactly the data that's being returned from our api call when we update as i was saying it's going to return to us a new object with all of those new updates however the image that we're going to get is not going to contain a url because we didn't explicitly ask for the url from the asset and so that is why again i was adding that image url aspect to our data from the edit profile here that's why i did this so now when we come back here we just grab the first name grab the last name from the new data right this will be whatever the updated first name is whatever the updated last name is updated image updated bio and we just used that to update our profile data we then set the profile data set editing equal to false and now we have all the updates we just made without having to send an additional request now if we wanted to simplify this we could actually just call the update profile function here and then that would send another request that would then give us all of the new data and then we wouldn't have to worry about any of this so what we could do is not return any data and just call update profile and we just call this with the username right and then that would update it for us however i prefer doing this and it's going to be faster and look faster on our page so let's try this now let's go here let me click this it actually closed and then we have undefined undefined and then hello world okay so this is a bit of an issue uh our first name and last name are not being updated as i hoped they were going to be updated so i will show you how to fix this but i was hoping it wasn't going to happen so let's go back to edit and notice these are both undefined now if i manually change them and i change them say timber seca here and now i submit we should see that this closes and it does actually update for us the issue is if i don't modify them at all and then i hit submit okay uh oh okay it actually looks like it didn't make it go to undefined although let's see if i go post and tim if they're undefined now no okay they're not undefined that's weird why they were undefined before let's let's try this one more time let's submit and there we go so now they're all they all go to undefined so again this is kind of weird but what's actually happening here is that the state for some reason is not going to be holding the correct profile data when we don't make any changes to it so just to kind of debug this a little bit let's print out the first name and the last name so let's print out first name and last name as well as the bio here when we don't make any changes just to see what they're equal to before we add them into our form data and then we can hopefully fix this problem so let's refresh we're going to have to sign in again just because we've refreshed the app so let's sign this tim let's go here okay let's hit edit now let's make a change that's going to persist so tim receica hello okay submit tim or seek hello okay that's what the state is nice it updated now let's just go post and tim just so that we get a fresh api call to get everything here okay now let's go edit and let's not make a change and hit submit now notice they all become undefined now i'm not a react expert and so i don't know why for some reason the state is not getting what the uh what do you call it what the props are because the props where my profile data is is first name last name and bio so i assumed it was going to store that data but for some reason it's not so really there's no point of us even putting that in there because well clearly it's not the correct data so what i'm going to have to do is check if the state is empty and if the state is empty then i'm going to have to replace first name last name and bio with the current profile data from inside of here so really the fix involves this we're going to say if and then we're going to say first name is equal to an empty string or we could just say something like if not first name really up to you how you want to do it then we're going to say set first name and then this is going to be profile data dot first name now this is only going to trigger if we don't manually make a change change to first name so that's fine if we do make a change it won't trigger then this is going to be last name and we're going to say set last name and we're going to say profile data dot and this should be last name and then lastly here we're going to go with bio okay and then we'll say set bio and this can be profile data dot and then bio now alternatively i'm thinking that there's probably a world where we can do this inside of a use effect where we just set the first name set the last name and set the bio equal to this information as soon as this information comes in to us i'm assuming what's happening is that originally when the profile data is passed it's actually empty to the component and then it's not being refreshed and so that's why we're getting kind of the empty state here because if we go to profile actually i think this makes sense i think i've just figured it out here the update profile is not going to be done immediately because we're sending an api request so it takes a second to get this data so immediately when we actually start rendering this edit profile and we pass the profile data we're passing empty profile data and that means when i go to edit profile here and i set the initial state i'm setting it with empty profile data and so i'm getting undefined so now if we just set it as an empty string and then we update it using the profile data once we've hit the update profile button we should be good to go again we could probably do this in a use effect but i think this is fine for now okay so let's save this let's go back here and let's give this a try so let's refresh we're gonna have to resign in so let's sign in as tim login okay let's go to our profile let's go edit let's change this to something that makes sense so tim receica okay hello world okay submit and let's make a change now and let's just submit with no changes okay so submit and that looks good now let's go back to the profile so post tim and it does not show undefined awesome so that's exactly what we're looking for looks like we were able to edit the profile successfully let's try changing the image now so let's go the young man's face okay submit and let's see if it works and there we go we get it uh oh okay so this time the first name last name and bio are gone okay so it looks like we do have an issue uh we're gonna have to fix that so let's try this one more time though just so i can make sure i get the issue correct so tamara sika say bio okay let's submit all right when we submit we get that let's go here let's go back to the profile okay so we're getting all that but now if i choose a file here so let's update the file and let's submit for some reason it cleared my first name last name and bio okay so that's annoying let's just make sure that actually is occurring and it's not from our callback function okay so it is actually persisting in the database let me have a look and i'll be right back all right so i've just fixed the problem but it did require a few major changes so when we're looking at our state here notice that i just have these as empty strings okay then for use effect i've added this in here to edit profile so i imported it first right and then what i'm doing is i'm setting the first name setting the last name and setting the bio whenever the profile data changes so whenever we load the new profile data from our profile component then it will force this to update here and so we'll force update the state then what i'm doing here is i'm just appending all these things in the same way that we had before however when i call the callback function i'm no longer passing the new data now when i go to profile.js here notice that in the callback function i've removed everything and now i'm just calling update profile so yes i did say before that it was going to be faster to get the data back and then make those changes however that was really bug prone and i realized this was going to be a better solution just because there's not going to be all these weird education edge cases sorry and things going on that we need to handle so even though the other way will be faster and we should try to come up with a way to do that for the purpose of this video we're just going to recall the update profile and that's going to force another api request which will now give us all of the new data in the format that we're used to expecting and then we can just update the profile using that and that means we won't have any data inconsistency issues as well so for hide edit callback i'm no longer taking a parameter and i'm just calling update profile so those are really all the changes that i made another change i made is that if you go here notice that i have first underscore name not first name so that was one of the causes of a lot of our issues was i had camel case as opposed to snake case and so hopefully you guys can understand all of those fixes again code will be available from the description in case i lost you here but i think we should be good to go now so let's come back here let's refresh the page and let's give this another test okay so let's go tim let's go here now i have undefined because i was messing with us before anyways let's change this to be tim let's go hey let's submit and now we get the correct stuff okay now let's make another change and actually let's just submit the current data that we have notice we don't get any undefined okay fingers crossed let's upload a new image here okay let's try this and yes awesome everything is working we can now move on to adding followers okay so we've updated the profile a lot of the hard stuff is done now we just want a way to be able to follow and unfollow accounts so actually not overly complicated to do that we're going to do that from the profile page so we can now close the edit profile page we're done with that however i want to go into my api calls and i want to write those and then i want to write the corresponding backend api endpoints that we'll need and then that way we can just work in the profile file for the remainder of the video so let's write some functions that can add and delete a follower so i'm going to say functions dot add follower is equal to we want to take the user that we're going to add the follower for and we want to take the following id so who are we following okay then we're going to come here and we're going to going to return and this is going to be functions dot we need to get the user id of the user that we want to add the follower for we're going to say dot then we've already looked at this before but we're going to get our ids and then inside of here we're going to say sanity client dot and now we're going to patch because we're going to be adding an element to an array which is a patch or update operation for the current user right so that's why we're patching we're going to patch ids 0 dot underscore id okay now we're going to add our dot then we're going to take in our data or sorry we don't need a dot then my apologies we're going to have a dot and then this is going to be set if missing and we're going to set if missing the following field to be an empty array just so when we try to add something into the array if we didn't already have it we don't get any errors now we should have the field there already but again if for some reason we don't have it we're going to set it if it's missing i mean that's pretty intuitive and then we're going to insert something now we're going to insert after and what i can write here is following and then colon negative 1 or sorry just negative one and this is going to reference the very last element in the following array here just like we would in python now it doesn't really matter where we're adding this element in because we don't really care about the order of it but we'll just add it at the end because that kind of makes sense to do and then what we're going to do is we're going to add a underscore reference and this reference is going to be to the following id like that and then we need a unique key inside of this array so the key i'm going to use is nano id and i need to import that so i'm going to come up here and i'm going to say import nano id from and then nano id i believe it's a default import actually no it's not so we're going to have to import it like this and what nano id is going to give us is just a unique id that we can use now the reason we need an id inside of here is because every element in our array we want to be able to have quick index access for it and we can access every element using a unique id so when i have key now if we had say a duplicate reference in here we shouldn't have that but if we did we'd still know which element is which because we have the unique key so this just helps in the database for them to quickly locate different elements hopefully it's making a tiny bit of sense but every element that we have inside of the array we add this key which is a unique id that we get from this nano id function we installed that at the beginning of the video okay now the next thing that we need to do here when we're going to be adding a follower is we just need to add the type so i'm going to say underscore type like this and this is going to be a reference so let's add reference like that and that is literally all we need to do to add a follower other than commits okay so we'll commit like that all right so let's just walk through this one more time we're getting the id of the user we're already going to have the id of the person that we want to follow and i'll talk about how we get that in a second then we're going to well get the id from the user we're going to patch this user because again patch we take an id of a document that we want to make a modification on we're going to set if missing the following field and then we're going to insert after the last element in the following array if it doesn't have any elements it'd just be the first element we insert and then here we pass an array of all elements that we want to insert we're going to insert multiple elements at a time so i could put another object if i want to insert it here in this case i just want to insert one so i'm inserting a reference to the following id because the reference type or the type of this array is referenced right and then i'm saying key nano id the unique id of a key and i'm saying type reference and we're all good to add a follower okay now in a similar way we're going to remove a follower so i'm going to say functions.remove follower this is going to be equal to user and following id as well then inside of here we're going to return the sandy client and then this is going to be dot patch and again we're going to have to get the user id actually so first i'm going to say return functions dot get user id we're going to get the user id of the user i'm going to say then this is going to be ids and then here we're going to say sandyclient.patch this is going to be ids 0 dot underscore id okay let's save that and then after the dot patch we're going to say unset so this is how we actually remove something and we're going to unset the field that we want in this array so i'm going to say inside of here following like that and then this is going to be underscore ref and then the ref is going to be equal to a string and this string i'm actually going to have to sorry make this back text just so that we can insert what i need here so we're going to have a string and i'm going to go with following id like that inside of parentheses or not parenthesis sorry this is going to be squiggly brackets okay so let's save that so it goes down on the next line so what we're doing here is saying okay we are going to get the user id we are going to patch that user so make an update on it and then we are going to unset and we are going to unset following and then at this key so really following is the array and we just want to unset one element from that array which is really removing it from the array the element we want to remove is the one that has a reference which is equal to the following id so that's why we're putting it here and then we need a back tick so we could embed this directly inside of here then of course just like before we need to commit and once we make a commit it will update it in the database and there we go okay so now that we have done that we just need to go to index.js and we need to write the corresponding what do you call it endpoints here for remove follower and add follower so i'm going to say app dot and then when we want to add a follower it's going to be post so i'm going to say post and then this will be slash add follower again you can maybe make this a patch request if you want but we'll just keep it as post it's not really a big deal and i will go here with request and response and then this is going to be const body and i want to say request dot body because i need to get a few things here specifically i need the user as well as the id of the person that i want to follow so now i'm going to call the remove or sorry not remove the add follower function and i'm going to pass this the body.user as well as the body.id and the id is going to be the id of the person i want to follow then i'm going to say dot then data and then i will return what is it yeah res.json and then data okay that's what we need for that let's copy this and do the same except this is going to be the delete method and this will be for remove follower because we're deleting something right and then we're going to have our request.body same thing want body user body id except rather than add follower it's going to be remove now we just need to import those two functions so let's go add follower and remove follower and now we are good from the backend standpoint so let's close this let's rerun our back end and now let's go to our front end and let's actually use these inside of our follow click function because the follow click function is really the last thing that we need to code out here to add and delete the followers so the first thing i need to check here is am i following or am i not following i also want to make sure that i'm not the owner and that i can't somehow click this before the the page fully renders so what i'm going to do is say if owner then return just to make sure that i can't go any further inside inside of the logic here and then i'm going to say if not following so if i'm not following then this means that i'm actually going to add a follower if i am following then i'm going to remove so we'll have an else statement here and we'll do something there okay so i'm going to say const request options this is going to be equal to an object now the method is going to be post okay again you could have made that patch some of you are probably going to argue in the comments that i should have changed some of the methods but that's fine we'll go with post and then i need to add a header here and the header that i want to add is content and then type and this is going to be application json because i'm going to be sending json data and then for the body here i'm going to say that this is json.stringify and i'm going to pass my user equal to my user and my id equal to the profile underscore data or sorry profile data dot underscore id so again we can get the id from our profile data the reason we can do that is because the profile data returns to us all of the data from our database and every single element in our sanity database has an underscore id and the id is going to be completely unique for each document so this is the id of the current person's profile that we're on and the user is the name of our current user that's viewing the profile okay so that's what we're doing there uh that's actually all we need for that and then we're going to fetch a request i mean i don't know if fetcher request is really the proper way to say that but we're going to fetch an endpoint maybe and this will be add follower okay and we want to add the follower with the request options and then we're going to say then we're going to say underscore res and we don't actually care about the response here i mean i will still return the res.json and i will say then data and then i'll do something here but i'm actually just going to update the profile once this occurs to set the new following count so you'll see what i mean here but i'm going to say update profile and then params.username like that okay so what we're doing when we add a follower right is we don't care about the response here uh it just doesn't matter to us what it is because we can just update the profile then that will update the follower count of this user to go up by one when we follow them there's no other updates that we need to make and so again we'll just do update profile okay so add follower request options that's post request application json we're sending the user and the profile data id this will add the follower for us assuming all that works will follow successfully and then we don't actually need to like add an alert onto the screen because when we call update profile it will actually call this update following for us and then you'll see that we'll set the following to be true which means the button is going to change and so that will kind of be the uh what do you call it the response to the user or the information to the user now just so i don't get yelled at i can do underscore data here just to say i'm not using that variable and now that's fine okay so otherwise if i'm not adding a follower i'm deleting a follower so let me copy this here and we're going to change the type to be delete and then rather than add follower i'm going to say remove follower and then we'll do the same thing with update profile here it's saying res is not defined oh sorry so let's fix this so get rid of underscore res get rid of underscore res and now that should be good instead of here so that's actually all we need i think for adding the follower and for removing the follower yeah that should be about it now i could add a catch statement if i want to add an alert saying that there's a problem i think for now though this is fine if you want to add that feel free okay so that really should wrap up this entire application now i'm hesitant to say that because of course we're doing a lot of complex stuff and there's always a possibility that there will be some bugs or some issues here but let's go and test this out and see if this works so let's refresh the page here if we want to follow someone obviously we have to sign in so let's sign in as like joey123 and let's now go to our account and for joey okay we see we have joe smith that's the name let's go to search let's search for some users okay so when i'm searching let's go to tim and let's follow tim now okay we got an issue here it says unexpected token in json at position 0. so as i suspected we have an error let me figure out what that is and then i'll be right back all right so i have found the error here it just has to do with when i was unsetting and committing in my remove follower so i'm going to go here and place this like that let me remove my semicolon so what i was doing was i was adding the unset and the commit after uh these sandy clients so i was kind of adding it here as opposed to inside so i just need to fix that and i need to do the same thing here for this patch so let me copy all this and paste this inside of this parentheses so that's what was being messed up again have a look at the new code here i have sandy client.patch then after the dot patch i'm doing this as opposed to after the dot then which is what i had before which was causing me to get an internal server error so let me restart my back end of course we had an error i think this should be good now though uh let's see let's go back let's refresh okay let's sign in as joey123 all right let's go to our search let's search for a user let's go to tim and let's press follow and fingers crossed we will see okay nice so the followers go up by one now it says unfollow now the moment of truth is is it going to show my new post now based on who i'm following so if i go to feed now i see the post of tim because i'm following tim so let's click into tim and let's unfollow and let's see now if those posts go away okay so let's go back to feed and there we go now we don't see any posts because well we're not following anyone so let's just do a few more tests here i'm going to sign in as tim so let's log in as tim here let's go and notice that i have one follower that would have been joey from what i was following before let's go to search let's search let's go to tim1234 let's follow okay now it has two followers nice now let's make a post so let's just add a random image here and say test okay let's post let's see if that works okay all good let's go to our profile we should see now we have another post here because i've signed in as tim now let's just go to search and see what other accounts we have we have joey12345 okay so let's go log out sign in as joey12345 let's go to search let's go to tim let's follow and now he has two followers okay let's go to feed and then i should see all the posts from tim awesome okay everything is working i'm very excited the video is now complete all alright so i'm going to conclude the video here this was an extremely long video so if you made it to this point i'm expecting that you leave a like and you subscribe to the channel maybe even leave a comment because this took a very very long time to film record come up with beforehand and i will give another thank you to sanity for sponsoring this video again completely free i think it was really easy to use and also a great tool because we have this visual uh you know sandy studio that i can go in and actually view all the stuff happening with my database it just makes it way easier especially when it comes to debugging and again for people that aren't kind of tech savvy and aren't going to write the code if they were working on a project with you they could come in here and they could add whatever it is that they needed to again without having to write any code themselves now this is as close to a social media clone as i can realistically make on youtube in a decent amount of time of course we don't have likes we don't have comments we don't have you know dms and stuff like that but with the tools in this video you should be able to add those features and extend this to really create whatever you want of course the styling is not as good as you'd hopefully want it to be but you can mess around with that it's very time consuming to do css styling as you briefly saw in this video anyways if you made it this far please do like the video please do subscribe maybe even leave a comment and i hope to see you in another youtube video