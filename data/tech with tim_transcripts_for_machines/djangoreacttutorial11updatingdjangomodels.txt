hello everybody and welcome back to another django and react tutorial video in this video what we're going to be doing is actually building out the settings page or the settings tab on our room page so i don't know if i've discussed this previously but right now we just have this page that shows us information about the room and we can leave the room but ideally if the user is the host of the room they should be able to modify these settings they should be able to change the number of votes they should be able to change if the guests can pause and i guess that's really all the stuff that they're going to be modifying but either way we want to have like a nice settings page for them so that they can simply press settings and then modify the settings of the room so what we're going to do in this video and probably the next video as well is build out the ui for that settings page in fact we're actually going to use the same user interface or the same component that we've already used and i'm going to show you how we can modify them by messing with this component's props now what i mean by that is right now if i go to create a room this is a form right that allows me to pick the number of votes required to skip and play or pause right and then we have some nice information here we have create a room we have back whatever all this stuff but this component is very similar to the component that we would want to build out for our settings page right say we wanted to have a component that was specific for settings well it would look almost identical to this except the create a room button would be changed to update room or yeah i guess update room or change room and then create a room up here would just be settings right so what we're actually going to do is modify the existing create a room component and we're going to change it such that it's able to kind of dynamically modify itself based on information that we give to it so that's what we'll be doing we're of course also going to have to build another endpoint on the back end or in the api folder that's going to allow us to actually update the existing room so for that what we're going to have to do is make sure that the person trying to update this room actually is the host of the room and if they are we will let them modify it now since we usually start out by doing all the front end work and all the ui design and all of that let's switch it up and let's actually do the back end first this time we'll build out the view that we need or the api endpoint and then we'll get in and do the front end so let's go to views.pi and essentially what i want to do right is i want to be able to update a room so i have to ask myself what information do i need to update a room well i need the room right so i need the code for that room and then i need information that i'm going to be updating now the only two things we can really update is the number of votes required to skip and if the guest can pause or play so that's the only information that we need and well we just need those three pieces of information to be passed to some endpoint right or pass through as the data we can look at it and then we can do whatever we need to with it so let's make a view let's call this update view let's have this inherit from api view and then let's actually define a new method in here that we haven't seen yet which is called patch now patch is kind of another word for update essentially it means you're just modifying or updating something on the server you're not creating something new you're not deleting something now in leave room i used a post request some might argue that this wasn't the right request to use usually what you would do with post or with the post http method is you're actually creating something new on the server and we're just going to leave it here but just keep in mind that when you're updating something usually you use patch and well that's why we're going to use it here so i'm going to say self request format equals none and then inside of here we can start writing our code now since we actually need some information to be passed to this update view it's not like the leave room view where we're not actually taking any information we're simply just doing something when we hit this endpoint we actually need some information so we're going to define a serializer class here so i'm going to say serializer class equals and then we're actually going to go into the serializers file and we're going to make a new serializer that will let us kind of grab the information that we need so like we've done many times here you can see we set up a serializer we say the data is equal to the request.data we check if the serializer is valid and if it is we continue on so let's go to the serializers.pi file and let's set up a serializer that will take in the information that we need which is a code guest can pause and votes to skip this is pretty straightforward i'm just going to copy the create room serializer i'm going to change this to update and then i'm going to go inside of meta here and i'm going to simply add the field code now one thing to note here and this is kind of a nuance i realized this earlier when i was uh what do you call it actually messing around with this code is that since if we have a look at the models.pi file here the code field is unique what that means is that our serializer is actually going to not allow us to have valid data or it's going to say the data that we sent in is invalid if the code that we pass in is not unique so hopefully this makes sense but imagine we have a bunch of models or a bunch of different rooms and they all are that have some code right and we send the same code that already exists on one of our rooms to this serializer we use it in the serializer it's going to say that the information that was passed was invalid now of course we don't want that because we're not trying to create a new room with that code we're trying to update an existing room and well we need the code of that room to update it so pretty much the whole reason i'm saying this is because we just need to make a slight change here and just kind of redefine the code field so that inside of our serializer it doesn't think that we need to pass in a unique code because if we have to pass in a unique code well then everything's just going to be all messed up we can't pass a unique code because the code we're going to be passing will always belong to a room hopefully that's clear but you'll see when i start doing this so i'm going to say code equals serializers dot char field and then inside of here i'm simply going to say validators equals and then an empty list what i've done here is i've pretty much redefined the code field right in the serializer so that i'm not going to be referencing the code field from my model right if we go back to models we can see here that says unique has to be equal to true because again if unique is true it won't let me pass in a code that isn't unique but we want to be able to pass in a code that isn't unique because we need to use that code so anyways we redefine it here and that just means that now code will be referencing this field and that's totally fine that's all we need and now everything will work with this update room serializer so let's go back to views.pi we're going to import the update room serializer so let's go here and say update room serializer from serializers let's go back down to the bottom now and for serializer class we're going to say update room serializer so before we go any further i need to quickly thank the sponsor of this video and the series which is algo expert now i'll go expert is the best platform to use to prepare for your software engineering coding interviews as you know i work at algo expert at the time of recording this video there's over 110 coding interview questions on the platform five of which were ones that i made and i actually taught doing the conceptual overview the code walkthrough and all of that stuff so if you guys are looking to prepare for your software engineering coding interviews check out algo expert from the link in the description and use the discount code tech with tim for a discount on the platform all right so now that we have our serializer class defined let's go inside of the patch method and let's start writing some codes the first thing i'm going to say is serializer is equal to self.serializer class and then inside of here i'm going to say data is equal to request dot data so like we've done previously passing our data to the serializer so that we can check if it's valid so i'm going to say if serializer dot is underscore valid like that and we don't want a hyphen we want an i so let's do that so if the serializer data is valid we'll go ahead and do something but if it is not then we want to return a response looks like my autocomplete was smart enough to actually do that for me and the response that we're going to return is something that we should be quite familiar with at this point i'm just going to say bad request like that we can say invalid data exclamation point or dot dot depends how mean you want to be and then we can say status equals status dot http underscore 400 underscore bad request all right so there we go that is the response if our serializer data is not valid but if it is valid then what we want to do is grab some information from our serializer so the first piece of information that i want is guest can pause so not in capitals but guest underscore can underscore pause is equal to serializer dot i believe it's data dot get and then the first piece of data that we want to get is guest underscore can underscore pause all right now that we have that i'm just going to copy this line and i'm actually going to copy it twice and now we'll fill in the other fields that we want so the next field we want is votes underscore 2 underscore skip we'll put that inside of here as well so votes underscore two underscore skip and then finally we want the room code doesn't matter what order we write these in but we just want to grab this information from our data all right so now that we have that the next thing that we need to do since we're going to be updating a room is we need to find a room that has this same code so what i'm going to do is i'm going to say query set is equal to room dot objects dot filter and we're going to filter with code equal to code so that way we find any room that has this code now we want to make sure that of course we actually did find a room if we didn't find any rooms then that means that hey we can't update this room because it does not exist so i'm going to say if not query set dot exists and i believe i've used len of room results before we really could just use dot exists i think this is actually the proper way to do it keep in mind this is just telling us if we have any results so you would have seen sometimes i'm using len of results greater than zero other times i'm using dot exists that's just my inconsistency i would recommend you use dot exists again for the purpose of this tutorial series i'm not focusing too much on industry standards and all of that anyways i'm just going to return a response here so in the situation where we don't have a query set no rooms existed for that query we will return the response inside of here we can simply say msg for message or we can put whatever else it doesn't really matter and we can say room not found or room doesn't exist whatever you want and then we'll say status equal status dot http underscore i'm going to return a 404 here pretty much saying hey we could not find this room all right so now that we have that uh the next thing that we need to do is this will assume so pretty much if this happens we're gonna exit out of this patch request if we make it past this then we did actually find a valid room so let's store that room we'll say room equals query set at index zero now we need to make sure that the person trying to update this room actually is indeed the owner of this room right so that means we need to get their session key and we need to check it against the host of the room and make sure that the same person who created the room is the person who's trying to update it so i'm going to say user underscore id is equal to self dot request dot session dot session underscore key now since i'm using session in here i want to make sure my code doesn't error out if i don't yet have a valid session so let's go take the code that we've used at the top of the post request on line 58 so create room view let's take that and paste that right above here at the top of our patch request just to make sure that we create a session if we don't already have one all right so now that's good let's go back to user id now we're going to make sure that the user id is equal to the host of the room so to do this i'm going to say if room dot host remember room is what we just grabbed here from the query set is not equal to user id then we will return a response i'm just going to copy this one right here that pretty much tells you hey you can't do that that's not valid you don't own this room so we'll say you are not the host of this room dot and then for the status we're actually going to change this to a 403 which stands for forbidden so pretty much you don't have access to this content all right so http 403 forbidden all right so imagining that all of this is good we get past all of these if statements and all these returns then we are good we can go ahead and update the room so we're going to say room dot guest can pause is equal to guests can pause room dot votes to skip is equal to votes to skip finally we'll say room dot save and then we'll say update underscore fields are equal to and inside of here we'll say guest underscore can underscore pause and then votes underscore two underscore skip all right finally if this is all good we can return a response inside of this response what i'm going to do is say the room serializer we'll take in our room dot data and then we'll say status equals status dot http underscore 200 underscore okay to say this is all good now some of you may be looking at this and realizing that this is very similar to the create room api view that we have here in fact you may be saying it's almost identical except we don't create a new room if one doesn't exist so why is it that i made a new view rather than just using the create room view well first of all i think it makes sense to have two separate views to do this and the other reason i'm doing this is just because in the future we may potentially want to have a situation where some users could say have multiple rooms or maybe we're in a situation where for some reason the database is storing multiple rooms for the same user well it would make sense for us to specify which room we want to update so with this method here we're not limiting ourselves to the future because we can update any room right and say in the future too maybe we want to allow the users to make someone like an admin in their room well then here we can simply uh change this code just a very slight bit instead of saying if room.host does not equal user id we can say if user id is not in authorized users right something like that and allow other people to update this room because if we didn't do that and we just use the create room here we'd be very limited in what we're able to do because we would either update an existing room or we would be creating a brand new one and we don't want to create a brand new one if we're just sending an update request right so that's kind of my rationale behind doing a separate api point here or endpoint whatever you want to call it i think it just makes more sense and for the future if we ever want to change something it's nice to have a separate endpoint that we're sending requests to anyways now we're going to go ahead and actually set this up with a url so i went to urls.pi inside of here i'm going to say update underscore room or not underscore sorry hyphen and then we will import this so update room and then here we will say update room dot as view now let me make sure i called the update room uh i call it update view oops we want to call this update room i'm sure you guys probably noticed that and let's make sure we named this right okay update room all right we are all good the back end is now done all right so now that the back end is finished let's go to room dot js and pretty much what i want to do now is add a settings button to this user interface and allow it or allow the user if they're a host and only if they're hosts we're going to show them the settings button when they press that send settings button we're going to render the settings page right which is really going to be a reuse of this create room page because we want it to look the exact same with a few minor tweaks so we're going to have to kind of rework this component to make sure that it's able to take in some information and modify how it looks based on that information anyways we'll get started in the room page though i think it makes most sense to do that so the first thing that we need to do is kind of figure out how are we going to like you know show this settings page are we going to go to a new page we're going to go to slash settings or do we want to just have it kind of show up on the same window so what i mean by that is if we go to create a room make a new page here we can have it so the settings appears on this route so on room slash and then this or we can make it go to like room slash whatever the room code is and then a settings url now you can do whatever you want you can make a new route or a route if that's easier for you but for me i'm just going to make it so that we change what this page looks like if we press the settings button so rather than redirecting us to an entirely new page this component will just change how it looks so it shows the settings page and the way we'll do that is we'll store some information in our state which will pretty much tell us hey are we looking at the settings page or are we looking at the actual room page then based on what the information in the state is so whether you know settings is being shown or not we either show the settings or we show this page right here anyways that's kind of what i'm trying to get at just giving you guys my thought process for how we're going to be making this but let's get started and actually go to the state and modify this slightly so inside of room we have votes to skip guest can pause and is host i want to add one more piece of information and i want to call this one show settings now by default we're going to make this equal to false and we'll modify this right and make it equal to true when we want to actually show the settings page so let's actually make a method right now let's call this one update show settings like that and inside of here we'll just take a value and all this is going to do is simply modify the state to be equal to this value so we'll say this dot set state and then inside of here we'll say show settings and this will be equal to value so of course we're assuming that value is going to be true or false so we'll simply modify show settings to whatever value is this will just make it a bit easier for us later on but we do need to bind this method to this keyword so let's go up here and do that we'll say this dot update show settings oops update show settings equals this dot update show settings dot bind to the this keyword all right so now we need a way or we need a button that's going to be like the settings button so let's actually code that out but i'm going to do something strange i'm going to make a method that's going to return the html to render this button so i'm going to say render settings button like that now the reason i'm making a method here is because we only want to show the settings button if the user is a host so rather than me hard coding it right into the render function here i'll add some logic in the render function that will only call this function to show the settings button if we are the host so it just makes it a little bit cleaner and kind of organizes the code a bit we could do this all right here in render but i just like to kind of spread things out and make it easier to read so inside of here what i'm going to do is i'm going to return and we're going to put two parentheses and now we're going to code out exactly what we want to return which is simply just going to be a grid item that contains a button so inside of here i'm going to say grid i'm going to say item xs is going to be equal to 12. a line is going to be equal to center like that and then close the grid okay now inside of the grid what we want to do is add a button soul state button we'll say the variant is equal to contained like all the other ones we've been using we'll say the color is equal to primary and we'll say the on click is equal to and what i'm actually going to do is i'm going to use an arrow function to call this dot update show settings with the value of true because what's going to happen here is when we press this button we're going to use this arrow function we're then going to call this dot update show settings pass the value of true that will modify the state so that show settings is equal to true and then down here in the render we'll show the settings when show settings is equal to true so hopefully that's clear but let's end that button there i think that's all we are sorry now let's end the button here and then we'll put the text that we want to show on the button obviously which in this case is just going to be settings okay so i think that's actually all i need for this so now let's actually call this method so i'm going to go inside of here i'm going to go actually right above leave room because i want the settings button to be above leave room you could put it below if you want but for me i want it above i'm going to put in two squiggly brackets like this and i'm going to say if the user is a host we'll render those buttons otherwise we just won't do anything so we'll say i guess this is going to be this dot state dot is host and then we'll say question mark so if it is we'll say this dot render settings button and we'll call that method otherwise we'll just put null which means we're not going to do anything so this is pretty much how conditionally we can show this settings button the user is not a host we won't show this settings button now keep in mind that a user could still without seeing the settings button be able to access or kind of like you know hack our front end so that they can modify the settings or at least they can see that page but if they are not the host of the uh the room sorry then our view right update room since we kind of added these security features in here to make sure they actually were the host of the room will not let them update it so even if somehow a user is able to send a patch request to update room they're not going to be able to actually update the room unless they're the host because of the way that we implemented that view so that's something to keep in mind you always want your backend to be really secure and to kind of consider the fact that people are going to try to hack your website and send requests and then mess with things right so that's why we're doing this anyways this dot state dot is host and now we should only see the settings button if we're the host so let's actually refresh this here i'm going to empty cache and hard reload and now you can see the settings button shows up when i press it nothing's happening obviously because we haven't really done anything for when settings is shown but now we have the settings button now if you were able to join a room say we were running this on our local network or something and you joined this from your phone you would not see the settings button if you weren't the host all right so let's continue and now let's actually show the settings so now we need another function or another method that will actually render what the settings page will look like for us so i'm going to call this one render settings like that and then inside of here we'll start writing all of i guess the jsx or html that we want to show so i'm going to start by making a grid that's actually going to be a container keep in mind that what i'm going to do for settings is going to be completely different than all of the stuff right here so this will be kind of its own page and what we do for settings will be again its own page so i can't assume that this is going to be called from within any of this that's why i'm setting up another grid container and all of that so i'm going to say container i'm going to say spacing equals 1 i'm going to close the grid off like that now inside of the grid i'm going to put some grid items so i'm going to say grid item xs equals 12 like that i'm going to say line equals center i'm going to close off that grid item we're going to just copy this and put one more here and then inside of my first grid item what i'm actually gonna put is a create room page component now we really should change the name of this i can't think of a good name for it like a room properties page or something like that because this will be a multipurpose component it's not just going to be used to create a room it will also be used to update a room and i'll show you how we modify this component in the next video but anyways we're going to be using this component what we're going to do is pass through some props to it and based on the props it gets it's going to change its appearance and kind of functionality as well anyways we want to use create room page so what i'm going to do is go to the top of my file here i'm going to import it so i'm going to say import create room page from and then we'll do dot slash create room page like that all right so now we can use that component so inside of here in render settings we're going to say create room page we're going to pass it a bunch of props so to pass props i can simply write the prop that i want to pass in this case i'm going to say update i'm going to pass a value of true obviously this hopefully should make sense but i'm trying to tell the create room page that hey you're going to be in update mode not in create mode right so that's why i'm passing this prop called update the next one i'm going to pass is votes to skip i'm going to say votes to skip is equal to and then this dot state dot votes to skip the reason i'm passing this is because by default i want the form or the create room page to have whatever this room's current votes to skips is as you know filling in that field that is what the default value should be so rather than showing two to start which we always usually would show we're going to show instead whatever is passed to us as votes to skip again this will be more clear as we start going through it but just trying to explain as we go now i'm going to say guest can pause this is going to be equal to pretty much the same thing we're going to say this.state.guest can pause and again this is so that we can show the most uptodate information and then we're also going to pass the room code so we're going to say the room code is equal to this dot room code and then we will pass one more thing and actually i'll write it now and i'll talk about it later but this is going to be the update callback and that's going to be equal to something else that we won't fill in this minute but pretty much i just want this create room page to call a function whenever it actually does update the room you can probably guess what that function is going to be but it does need to call some function whatever it updates the room so that the parent component which is us right this room page can actually kind of update and get that new information so now that we have that and again we'll talk about this more in the next video let's make a button here so when i'm on the settings page i need a way to go back to this original page so if we look at create room page on create room page we do have a back button right but this back button redirects us to the home page of course i don't want to be redirected to the home page i want to be redirected back to just this regular room page but since we're not actually changing our url we're not going to like slash settings there's no way for me to redirect using a link or using a route to the right page so what i actually need to do here is make a button i'm going to call this button close and what this button will do is close this settings page so it won't actually redirect us anywhere but it will change the state so it will change show settings to be equal to false and then that way what we can do is we can actually remove showing the settings page on this screen so it's gonna be kind of confusing but we'll have this create room page component we'll then have a button below that component that says close when we press close it will pretty much just delete this component off the screen that's kind of an easy way to think of it but anyways let's just take one of the buttons here i'll just copy it to make this a little bit faster i will leave the color actually not as primary but as secondary like that on click now you can guess what this is going to change to we're just going to change this value to false because we want to stop showing the settings so we'll change the state to stop show settings and we'll just call this one close i think that's all we need actually for the button so let's do some testing in one second but now what i need to do is actually use render settings right so i'm going to go into my render method now and you can see that we're rendering all this main content but i only want to render this main content in the situation where we're not showing the settings page so i'm going to go up here i'm going to write an if statement before my return i'm going to say if this dot state dot show settings if that is the case then return this dot render settings okay otherwise we can return that we don't even need an else statement because of the way that the returns work we can simply have this so now whenever we have show settings that state being true we will actually just return the render settings or sorry that's this one right here otherwise we will simply just show this now since i'm using this keyword inside of the render setting button and render settings i need to bind it to this keyword so let's do that quickly let's go to the constructor let's say this dot render settings button is equal to this dot render settings button dot bind to this keyword and then we'll do the same thing here we'll say this dot render settings i think that's all we called it is equal to this dot render settings dot bind to this keyword all right so now that we have that let's have a look at our website let's refresh and we got an error what do we have here something looks pretty big okay uh let me have a quick look at this and i will be right back all right so it turns out the error was that i had update callback without anything inside of it and apparently you can't do that so i just put nola inside up here or we really we can just put an arrow function for now just have something valid inside of there again we'll change this but for now let's just have update callback equal to a blank arrow function all right so now that we changed that on the line 65 let's go back here let's refresh let's press settings and notice we get an error let me have a look and i will be back all right so another silly error inside of render settings actually did not return this code which of course is going to cause an issue because it means we're not rendering anything but yeah we just need to return all of this so that way when we go here and we return this.render settings it actually returns all of this code rather than returning nothing okay so that was the issue just need to add the return statement in render settings so let's refresh here uh now let's press on settings and notice that it shows us create a room we have the back button the close button which we added and then everything else that was just usually on create a room now if i press close notice it brings me back to this page and we don't change the url so settings close settings close we're on the same page and that's how we can kind of toggle showing two different pages now notice though if i go to settings and i press back it redirects me you saw the redirect it redirected me the home page and the home page redirect me back to this page now that's fine we we could use the back button but what we're going to do is we don't want to have all these redirects happening if we don't need them is we're going to modify let's go back to settings this page so first of all it says update room instead of saying create a room it says update room and then instead of having the back button it just doesn't have any button there at all and it kind of gets replaced with the close button that we added ourself from the other component so now we press close all is good and well that's where i'm going to conclude this video so hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next react and django tutorial you