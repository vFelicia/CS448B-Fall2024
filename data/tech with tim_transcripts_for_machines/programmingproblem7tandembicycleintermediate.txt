hey guys and welcome back to the weekly programming problem now last week we did a maze traversal video which was a pretty complex problem and saw involved a breadthfirst search algorithm generating a ton of different possibilities traversing through a maze this one is gonna be a bit easier not too much easier but it does require a little bit of thinking the actual code for this I'll tell you right now my solution is 20 lines and I could probably condense it into about 15 or maybe even 10 so I really encourage you guys to try this problem I'm gonna read through it explain it and then go through my solution quickly but yeah so anyways this is the problem we're doing today this is again from Waterloo website so University of Waterloo Canadian computing competition that's where I take all these problems from pretty well and essentially I mean you guys can read through it but what it's saying is they have two groups of citizens one from the town of whatever that is and another one from peg land and they are on tandem bicycles and essentially the fastest person pedaling on the bicycle is gonna be the one that dictates the speed so like if I'm pedaling at five miles per hour and someone's pedaling at four miles per hour the person pedaling at five will determine how fast the bike goes because the faster peddler is like the slower person's not doing anything essentially so that's something to note and what it's asking is essentially given the speeds of people from these two cities how can we match them up to make either the fastest possible speed or the slowest possible speed what I mean by possible speed is if you sum all of the people that are on the bicycles so all of the speeds of the bicycle so let's say we have ten bicycles and each of them are going out one mile per hour the total speed would be ten so going out to it would be twenty you just sum all of the bikes that are moving and that's the total speed of like all the bikes right so I mean you guys can read through the problem but I think you'll should understand it fairly straightforward so let me just go through the input quickly and then we'll get into the solution but essentially the input starts off in telling you there's there's two problems that you could be asked to solve one what is the minimum total speed out of all the assignments in two pairs so you have to determine how to pair them up so you get a minimum speed or what is the maximum amount of speed in two now the input comes in it tells you what question gonna be answering either question 1 or question 2 in this case question 1 student this example here and then it's gonna tell you how many people you have from each or how many bikes you have essentially so how many people from each town which and these are always going to be the same and then the next two lines are gonna be the people from each city so the first one will be from demo whatever that town is and then the next one will be from peg lund and these are their speeds when they're peddling on a bicycle so we can see that we have one person pedaling at five one at four one one at four and those all those need to be paired with one of the ones that I'm highlighting right now so six two or four so how do we pair them so we either get the maximum or the minimum speed based on whatever question we're asking now this actually seems like somewhat of a complex problem now let me go through this explanation for output one it says what do you call it output one the answer is 12 that's the max or the minimum speed that they can go and it's saying this is how you would pair them up so you're pairing citizen with speed file with speed six you're pairing Sisson with one with speed two and then four with speed four if you guys actually read through some of these inputs you'll probably figure out the trick for this problem because it's very light computationally what you actually have to do so ah yeah that's kind of the way the problem works I hope you understand that now let's go into my solution quickly and talk about how it works now I'm just gonna bring up this drawing tablet quickly and I'll get just pause quickly will I get my tablet alright so I just got my tablet open now and this is actually a really easy problem in terms of the write the code that you have to write for it you might have saw quickly when I when I went back into my pycharm window but essentially let's do an example of how my solution is gonna work quickly and I'm hoping you guys can kind of see how you would actually approach this problem and make it really easy so we're gonna do like these are the four the speeds so this will be like a so like town a and this will be town B and then we'll say they have like five three and seven as their speeds so we now we want to determine let's start off the minimum speed that we can possibly go so how do we do that what assignments of pairs do we need on our bicycles so we'll say like pair 1 pair 2 and pair 3 so that we get the minimum speed well let's think about this for a second what we should do to get the minimum speed is we want a max or we want to minimize the amount of large number speeds right so for example what we actually want to do is we want to pair the highest number from B with the highest number from a and then we want to continue doing that so we're gonna pair 5 with 4 which means that we've now eliminated this 4 essentially from a so that 4 isn't gonna be a speed that would maybe go with 3 right you guys will see how this works in seconds so pair 1 will be 5 and 4 will just do a little or something there okay so now we've eliminated those so we'll cross those out now what's next same process we want to do the highest speed that's remaining from B with a so we pick the two highest speeds so it picks 7 and we pick 3 ok so let's do that so we go 7 and 3 and then same thing now we're gonna pick 3 and 2 obviously there's only two left but we're gonna pick these and when we do this we get that what do you call it the minimum sum is gonna be 7 plus 5 plus 3 which is equal to 15 now let's think if we didn't do it this way let's so let's let's undo all this and let's go back and try doing it some other way and you guys will see why this way is the way that we need to do it essentially let's say we just like randomly try pairs okay so what if I try um what do you call it 3 with 4 as my first pair so B has 4 or a s 4 and B has 3 so we write those there and now that's done ok so now we have 5 & 7 which are gonna be paired with 2 & 3 right so we go 5 and that can go with whatever and then 7 can go with 3 now if we add this up we get 60 that's one larger than the previous one and that's because we didn't use this 7 to eliminate this 4 right because we want to eliminate the amount of larger numbers ideally we want a speed of three matching with like three you want three matching with two we want the largest numbers matching with the other largest numbers so that we eliminate the most amount of large numbers possible and that's I mean there's not really anything other other way to explain that then that that's just the solution now for minimum are we doing minimum suitor we do yeah we doing minimum so now we'll do maximum so for maximum it's precisely the opposite we actually want to take the smallest number from one and match it with the largest number from another and it doesn't matter which one we pick cuz it'll end up working out at either way but we want to match and the smallest number from a with the largest number from B and then continue that process so we want to match to a seven so let's do that seven and two we want to match five with three okay so it match five with three and then we'll match four with three so again this like this will be the largest number from B and that would be the smallest number from a it doesn't matter what what order we do it in but it'll you'll see how it works out so we do that and now we get eight plus seven or so we get sixteen again and that's the maximum speed that we can go with these pairs and that's essentially how that works whenever you're doing min you just want to match the largest numbers with other largest numbers from each set and then when you're doing max you want to match the largest number with the smallest number and that's how that works so with knowing that we can actually implement the solution pretty easily with some Python code so let's do that so let's go here and this is this is my solution right now and you could see that actually the first four lines are literally just getting the input and this is all the solution is all I do and I mean think about this it's pretty intuitive is that if we want to match the smallest number with the largest number well it would make a lot of sense to just sort our list right because we actually don't care what order we get our numbers in so let's just sort them and then this way we're gonna have a list that will go from min to max sort of a min to max or smallest to largest and then this one will go min to max as well so what we'll do now is simply loop through so for question one when we're getting what the minimum speed we want a Mac we want to match the Mac's numbers with the Mac's numbers and those will all be at the end of the list all the minimum numbers would be at the beginning of the list so when we do this and we loop through the amount of bikes we have all we have to do is just add the maximum value from what do you call it the index I that we're at and the other index I because those are gonna be the two max values at that position or whatever right and that will work for us in terms of matching up like the largest and the smallest all right so that works for for the minimum but that's all you have to do for maximum all I do is just reverse the list of one of it doesn't matter which one you reversed but I'm just reversing demage or whatever and now this way what's gonna happen is you're gonna have the max at one end and the min at the other end so now you're gonna be maxing are you gonna be matching min max min max min max women max so you're gonna get the maximum possible speed because you're not going to be eliminating larger numbers which is exactly what we're trying to do here when we sort these into smallest to largest right so all we do is simply reverse one list and then we just add the maximum from the two indexes and then we print that speedo now prove to you that I'm not making this up and this actually works so let's bring up did I close that I think I did okay let's let's run this all right so let's grab let's put that on the side there okay let's grab some input so let's try sample input one so I'm going to do one three five one four and then six two four and you can see that our output is 12 so that this is indeed working and I've tested on all these inputs and like a ton other ones so I know that this solution actually works but yeah that is essentially it for this problem and it kind of shows you that even though this problem is actually designed to be somewhat difficult if you just think about it in a logical way you can usually come up with a solution that somewhat math related or just logically make sense as opposed to having to like Luke because what you could technically do is do every single possible combination of pairs which would give you what is it like the power sets or whatever like you'll give you a ton of different it's exponential essentially as you increase the amount of N and you can see here that n actually goes up to a million I had some points so it could take a time but this way we just found that this makes sense logically how you match them and that's our solution to this problem so with that being said that's my name for this problem if you guys have any ideas for problems that you want to see in later videos or like types of problems please let me know I like doing these kind of problems but I mean I want to do what you guys like so with that being said that's it for this video and I'll see you in the next one