hey guys and welcome back so originally I wasn't planning on doing kind of a part 3 to this series but a lot of you guys asked me to do some kind of GUI for the sudoko and make it into an actual game so that's what I did this morning probably took me about two hours to get everything working with the bugs and everything so I'm not gonna be doing a full tutorial on the GUI but I will be walking through how I kind of made this and then providing all of the code to you guys via my website tech with Tim net quick reminder if you didn't already see you guys should definitely go follow me on instagram at tech underscore with underscore tim if you guys want to get exclusive updates on what's going on pretty well in my personal life and kind of sneak freaking to projects and all that so anyways let's talk about this GUI so just a reminder I'm actually on my website editor right now so you guys I have all the code up there she'll be able to download it right as this video is out so anyways essentially the way it works is you can kind of select what do you call it different squares here and these are obviously the squares that come default with like the beginning game so let's say I want to put one here I can start by penciling it in by just hitting whatever key on my keyboard and then to confirm that I actually want to place that there I can hit enter and if it is actually valid it will let it go there now for example if I try to put one say here well that conflict' with this one and this one so if I go to the square and I hit enter then you can see that it simply clears that square and gives me an X saying that I got that wrong now I don't really have any system where if you get a certain amount access you just lose it just kind of just show you that you messed up that many times and it works like this this just works now obviously I'm not gonna play the entire thing so it'll take a second but once you eventually get down to the point where there's only like like you've completed the board it'll simply just say like you won and then you're done and then obviously a keeping track of how long you've been playing in the corner here now it's neat because you can kind of pencil multiple things in they go in the top corner and gray and then when you're ready to confirm them you can hit enter and if it's correct obviously it would go in the right square so yeah so that's how the GUI works what I did to use this was just make a very basic kind of pie game like GUI I guess some people said you used to Kenter but I just no I'd rather use PI game and I'm just using the script that we wrote in the last two videos so this whole thing here to actually see if when I put something into the board if it's a valid solution or not and the way that I'm doing that is by doing two things I'm first making sure that using this valid function that we wrote that it's valid to go into the board if it is then what we do is I call the solve method on that board and then it checks to see if we will be able to actually come to some kind of solution based on what we just put in the board and then based on the results from true or false from these functions that'll determine whether it allows me to put that in or not so up here all I've done is imported that file there in the same directory obviously and then just use the method Psalm and the method valid to do that now the starting board gets stored in this main grid class and this is like what you would modify if you want to change the starting position I didn't really go too hard with this GUI and there's a lot of things to be improved on this is just kind of the standard like it works its functional GUI because I don't want to spend too much time on it but if you want to modify the actual board you could do it have a method that randomizes this and randomly picks some kind of solvable state or you could just modify it by hand and change some of the numbers so yeah that's essentially how it works we have two objects here that I'm using for the game I have this great object and/or class sorry and then I have this cube class and essentially the grid holds a bunch of different cubes in like a row column structure so actually in this identical structure just holding the cube objects and then each cube object let's go down to these actually have all of these different values so it holds a temporary value which is the value that kind of gets penciled in at the top if you ever played sudoko before that's how you do it and then the actual value which is like it's set it can't be changed once it's that value so you'll notice once you actually get a valid value in the board you can't change that right and that's the way it should be and then obviously the draw methods will this draw method is just gonna actually draw that little box little square to show you that it's selected if it is selected and then it will also draw the number on that Square I have set and set temp which will do obviously what they say there and then a bunch of methods for boardlike click which will simply return the position of the cube that we clicked on I was so a little bit of math there is finished we'll simply just make sure that where it'll check actually if there's no empty squares left in the board and then we have clear which is simply given a what do you call it that's currently selected oh I forgot to show you guys that actually let's do that quickly so for example if I type like 6 in here I don't want 6 anymore well I could type another number but I can also just clear it by hitting del and then that way it just goes away so I don't see it but notice how I try to hit del on one that doesn't have anything penciled in or is one like this just nothing happens right and that's the way it works same thing like I can't change these values I can only change ones that aren't already set so yeah that's essentially how that works select what this does is simply select the square that you press on and that needs to modify a variable for the class and then draw obviously is gonna draw all those grid lines that you were seeing so a certain thickness every three lines and then it's gonna draw all of the cubes what else do we have your sketch all this is doing is setting the temporary value for the cube object that we like hit a button on and then place is setting the permanent value and just making sure that it is valid to do so and this is where we're using that valid and solve methods from the previous script that we wrote update model so the way that this works essentially is we have the board which is what the user sees and then we have a model and the model is the board that we're gonna send to solver to attempt to solve so we need to essentially update this model because we're only gonna update this when we need to what do you call it attempt to see if the solution can be solved I won't I'm not gonna talk about how this works exactly too much but essentially it's so that when we send this over to solver we can send it a slightly different solution than an actual board that's here because the board that here has to show us like penciled in values and all that stuff but when we send it to solver we don't care about the pencil invaluable integer values are so we need to get all the integer values which is what it does this from the cube objects because in the board we only store cube objects but we need to actually store integer values to pass that over to our solver method I hope that makes sense and other than that that's pretty much it for the GUI I mean you guys are gonna be able to look at all the code on my website there's a link in the description read through if you have any questions please don't hesitate to ask me and again I apologize for not making a full tutorial on this but that would just take way too long and I'm kind of want to move on to the next project now so with that being said if you guys enjoyed the video please make sure you leave a like and subscribe and I'll see you again in another one