hello everybody and welcome to a brand new youtube video so in this video i'm going to be showing you how to create a group video calling web application using react and using an awesome platform called agora so that's a g o r a dot io i'll be discussing that more in this video anyways i'm sorry if my faces are freaking you out here just wanted to give you a quick demo of what this application is going to look like you can see here that we can stop the camera we can start or stop the microphone i'm not going to do that because it's going to echo a bunch of times and yeah that's kind of how this works i'm going to keep it pretty simple with the ui i'm just going to show you how to set up this grid system how to get everything connected how to allow video streams to be sent between obviously different machines or different computers i'm also going to show you how you can host this on the web not permanently but temporarily so you can test it out you can see here i'm connected to an actual url if someone that was not on my local network type in this url they would be able to join this group video call so theoretically you can use this with anyone who has access to the link that i'm going to show you how to set up again all of this is free i hope you guys are excited now let me get all my faces off of the screen and we'll dive in alright so hopefully you guys enjoyed that demo there and are excited to get started this is a really cool application that we're going to be creating and the first thing i will mention is that although this does look really complicated right creating a group video calling application this actually is not that difficult to do there are quite a few steps in this tutorial but none of them are extremely challenging or difficult to follow along with however i will mention that it's probably a good idea that you have some familiarity with react with javascript and just with programming in general to follow along with this i'm not designing this for absolute beginners you should have a little bit of experience doing this and at the end of this tutorial you will have a really good kind of starting place for a group video calling application that you can then go extend work on implement in other projects whatever it is you may want to do now i do need to mention that this video is sponsored by agora agora is the platform we are going to use to implement this video calling and they make it super simple to do this so you're thinking of a group video calling application this seems like a really complicated thing but it's actually not that hard to do because of the work that a lot of talented developers at agora have done so you can see that agora is the realtime engagement platform for meaningful human connections and although we'll be using it to create a group video calling app you can do voice calls on it you can record your calls you can have realtime messaging you can do live streaming you can do analytics there's a ton of stuff that you can do here with agora and what i'm going to show you in this tutorial doesn't even scratch the surface of what is possible but hopefully it will give you an idea of kind of how to get started using this platform and this technology so just to give you a few more examples of things that you can create with agora that are actually concrete real applications i have the following list you could create online yoga classes with ai for form correction of participants you could create a speed dating video chat application you could create vr dj classes you could make an online poker with video chat that would be cool so you could actually see people's faces when you're playing there's all kinds of applications you can create with agora and as i was mentioning we're really just scratching the surface of what's possible in this video now i believe i mentioned this a few times now but this is free you do not need to pay for this the first 10 000 hours you use of video calling is completely free and as you can see here agora powers an average of over 50 billion minutes of human connections per month anyways that's all i really need to mention about this platform obviously we're going to be using it throughout this entire video to actually implement this and the first thing we're going to do here to get started is we're going to press start building today on the agora website i will link the website in the description but this is the link right here and then this will bring you to a page where you're asked to create an account now you can see i'm brought right here into this kind of console or dashboard just because i've already created my account but please go create your account first and then what we're going to need to do is create an agora project all right so once you have created your account what you're going to do is go over to project management and then you're going to press create so project management and kind of the left bar here you can see i already have a project that i was working on previously but what we'll do is press create we're going to give this a name so the name i will give for this project will just be react and then this will be video calling if i could spell calling correctly app and i'm going to press the secure mode app id plus token now you'll see why we're using this mode in a minute we could use just the app id mode essentially what you're selecting here is the way you want to authenticate your users with agora it's recommended that you use the secure mode that's what we'll use but we're going to be using what's known as a temporary token to do this so we won't have to deal with all this really complicated authentication uh that if you were actually going to deploy this to be a real live application you would definitely want to look at anyways let's just press submit here oh it says my project name already exists okay i think i might have created one previously anyways let me just change this now instead of saying react we can change this to say group so group video calling app all right so now i've created this project what we're going to do is set up our development environment so as i was saying we are going to be using react but specifically the code editor i'm going to use for this video is visual studio code so you can download that if you want you can use whatever editor doesn't matter i just prefer vs code we're also going to need node.js so this will allow us to use npm and you know work with our react development server and all that so download node.js all these links will be in the description and then finally we're going to use this thing called ngrok you can download it right now but when we get to that step i'll remind you and again this link will be in the description what ngrok will allow us to do is actually have a temporary public url that we can test our website on so you saw in that demo i was on my phone i was on my ipad well what we can do is actually set up this public url that anyone around the world can use to kind of test out our application now this url will actually expire after about two hours but this will allow people that are not on your current local area network to access your development server without you having to go through all the tedious steps of actually deploying this out to aws or whatever that may be anyways ngrok is really cool you'll see how that works much later in video okay so once we've done all that what we're going to do is we're going to open up visual studio code and we're going to create a new folder wherever you want that's going to store our application so let me open vs code here alright so vs code is now loaded i'm going to go to the explorer tab right here i'm going to press open folder but i also go to file and then open folder and then in my kind of windows explorer here what i'm going to do is go to my desktop go to my folder called agora you can see i have a folder here already that i was using for kind of the demo that i showed you so i'm gonna make a new folder i will call this tutorial and then inside of here is where i will actually put my react application okay so we're now inside of this tutorial folder what i'm gonna do now is open up my vs code terminal i did that by just scrolling up from the bottom of the screen and i'm going to use the npx create and then react app command to actually create a sample or kind of start a react application so we don't have to go through that tedious process of setting up the servers and the scripts and all that annoying stuff that we shouldn't have to do now you're only able to use this command if you've installed node.js so make sure node.js is on your system first and if for some reason it's not working you need to make sure that node.js is in your system path so that you can run the command npx and npm and hopefully the command yarn as well which you'll see in a minute anyways let's make this full screen and let's now type mpx create react app followed by the name of your react application so what i'm going to put my name as is actually let's just go group video calling app okay i'm going to press enter and then it should start generating a folder here inside of this tutorial folder it's going to have all of our react kind of starter code now we're not going to need all of the code that's in here so after this is done we're going to clean up a bunch of stuff delete a bunch of files then hopefully by the time that's finished our agora application will be synced and we'll be ready to set up our tokens and authentication and all of that stuff that we need alright so you can see we have now initialized our react application we have some folder group video calling app i'm just going to go through a few of the files here briefly discuss what they are and then delete a bunch of the ones that we don't need so first of all just make sure that if you want to start this dev server you are in the directory called group video calling app so i'm not going to explain really how to you know navigate directories and stuff in windows but you can use cd and then group video calling app you can see that now i'm in the correct path and well now i would be able to start my development server it shows you the instructions right here but just wanted to quickly mention that anyways inside this folder you see we have our node modules our public folder and our src folder the rest of the files you don't really need to concern yourself with the node modules folder is what's going to store all of our dependencies for the project the public folder stores some well public stuff i mean that's the extent of the explanation i will get into and what we're actually going to start by doing is deleting a few files that we don't need so we're going to delete these two logos here delete both that 192 and 512. we're then going to go in our manifest and see how in the manifest we're referencing these two files here so logo 192 and logo 512 the ones we just deleted we're going to delete the two references to this here so from line 10 to line 19. all right we're going to save that manifest we're now going to go into index.html we're going to remove the reference to this logo 192. so on line 12 we have this apple touch icon thing just delete that and by the way your stuff should look identical to mine because that's what the kind of starter code template does when you run create react app and what we can do here is we can change the title of our application if we want to i'll just change mine and say oops if my caplocks is toggled correctly group video and then this will be calling app like that i will now save this index.html file and there's no more changes we need to make here unless you want to change the description of your app okay so that's it for the public folder we can leave this fav icon thing i mean you can delete it if you want or change it but i won't worry about that for right now now we're going to go into src and we're just going to delete a bunch of files i won't really explain why we're deleting them but essentially we just don't need them there's a bunch of junk that comes with this that we can delete so we're going to delete app.css app.test.js logo to svg report web vitals and setup tests so i'm going to select all of those delete them and there you go very good all right now what we're going to do is just go inside of these three files here and do a few minor modifications so i'm going to go inside of index.css first and all i'm going to do is delete this margin colon zero this means that now we will have a margin around some of the tags specifically our body tag and so all of our content will no longer be kind of hugging the border it will be slightly offset it just looks a little bit nicer so i'm removing that margin and then you could remove this if you want as well but i'll just leave this here because it makes our font look a bit nicer uh in our you know what do you call it application or on our screen okay so let's delete that or not delete that close that now i'm going to go to index.js i'm going to remove the reference or the call to web vitals here i'm going to remove the import of web vitals and i think that's all i need to do in this file okay so i'm going to save index.js your index.js should look like this now i'm going to go to app.js and what i'm going to do is remove both of these imports because we've deleted these files that we're trying to import and now i'm going to delete everything inside of here except for this diff so this is what your app.js should look like i mean you could delete the entire thing and type this out if you want uh but yeah not a big deal and also i should mention that all of the code that i write here will be linked in the description uh via a github repository so for some reason i'm going too fast or you missed something or you just want to copy the code you can go to that github repository and have a look at it okay so there we are going to close these files now and that's all we kind of need to do to actually clean up our react app now what we can do is run this react application and make sure that it's working so what you're going to do is make sure you're in that correct directory so group video calling app and you're going to run the command yarn start now for some reason yarn start doesn't work for you just run the command npm start they do the same thing i'm not really going to explain you know the difference between npm and yarn yeah just run yarn start or npm start depending on which one works for you and then give it a second it's going to start running a development server and it should automatically open in google chrome or whatever your default browser is the actual localhost colon 3000 which is going to be the url of your video calling apps you can see here the title of this tab is group video calling app that means this is indeed working we can right click here press inspect we can view you know the console and all of the details see how there's no errors here that's good that means our react app is now working all right so that's all i need to show you in terms of the setup of the react application obviously we're going to be putting some content on the screen for now it's blank but i'll close that and now we're going to go back to our gorek dashboard here we're going to set up a temporary token that we can use for authentication looks like we are good to go you can see there's actually a web demo and so if you press on this web demo it will open up this thing it says you know reseca my last name invites you to join a video call you could press join channel and then you can see my webcam is popping up here anyways you can you know have a look at this demo if you want i'm not going to do that what i'm going to do though is go here and press temp token for audio video call so this thing that looks like a key press on that it's going to bring you to this thing it says app id app secret and channel name and what you're going to do is type in the name of the channel that you want to use for users to connect to and chat with each other so in agora you have these different channels now a channel you can think of as kind of a room where users can join in there and chat with each other so you can name this channel whatever you want i'll just name this channel main and you can make as many channels as you want that will have different tokens associated with them so i have my channel name main then what i'm going to do is generate my temporary token like that you can see it expires at 12 24 am i think it expires uh four hours after you create it because for me right now it's 8 24 pm and anyways you can copy this token but we'll use it in one minute okay so now we have our token generated what we're going to do is go back to our react app and we're going to create a few files we're going to go inside of src this is where all of our source code is going to be this is really where all of the files that we're going to be working with are from now on so you don't need to worry about the rest of the files or folders what we're going to do inside of here is we're going to create a file we're going to call this file settings dot pi or sorry not pi.js i'm used to my python coding and inside of here we're going to put a few pieces of information that we need to kind of initialize our agora application or initialize our agora api connection whatever you want to call okay so inside of here what we need to do is define two variables the first variable that we're going to have is our app id so we're going to say const app id and this is going to be equal to a string and then what we're going to do is go back to our agora app here or a gore dashboard whatever you want to call it and we're going to copy this app id so copy the app id come here paste it inside of this variable obviously make sure it's all on one line all right the next thing we want here is our token so we're going to say const token is equal to and then you guessed it we're going to go here to agora and we're going to copy this token all right so copy the token paste it in there that's all good and now we will continue all right so now that we have these two pieces of information that we need the app id and the token we're going to install a few dependencies that we need in our react application so what i've just done is i've stopped my development server i did that by pressing ctrl c and now we need to install three npm packages actually so the first thing we're going to install is material ui this is just the component library that's going to make it so our app looks a little bit nicer we can style things have a nice grid to lay out stuff in and anyways the way we do this is we say npm install and then app material hyphen ui core all right so we're going to install that this will take a second to install once we'll be back i will show you the next two things we need to install all right so material ui core has now been installed now what we're going to do is install material ui lab so run that command same thing once this is done only back for our last dependency all right so now we've installed all of the stuff we need related to material ui the next thing we need to install is the agora sdk so there's a lot of different ways that you can go about doing this i'm just going to quickly show you actually how you would do this for a different project if you weren't going to do this in react so if you go here to agora and you go to developers and we go to documentation so i'm here in the documentation i'm going to show you how we can download and use the agora sdk so we're going to go to the downloads tab right here it's going to bring us to this page and the first thing i want you to notice that agora is available for all kinds of different platforms so in this case we can see android ios mac web windows electron unity flutter so on and so forth a ton of different platforms that you can use agora on and if you look here we have the voice sdk the video sdk this is the older web sdk realtime messaging sdk all kinds of different sdks that we can use and the one we're actually going to be using is the web sdk so we want sorry not the voice sdk we want the video sdk for the web so we would click on this one right here and this would actually download the entire folder now for the web sdk we don't need to download the entire folder we could actually use a cdn which is just a link that we could include in our html file but in our case instead of that we're actually going to be using a react wrapper for agora so i'll show you that in one second but i do want to mention that for all of these different sdks and platforms there's all kinds of tutorials on the agora website and sample applications so check those out if you're trying to do this on a different platform but as i mentioned we're going to use the react wrapper so let's go to that now so this is a wrapper that's created by the agora i o community so this is an open source wrapper and what this actually does is just make our life easier so it has all of the agora sdk in it and it comes with a few hooks for react that we can use if you don't know what that is don't worry about it we'll look at those later and just kind of simplifies the sdk for us and wraps a bunch of these functions so you can see right here it's showing us the usage way simpler than if we were to actually try to you know bring in the sdk ourself and then work with all those functions that still is not super complicated but just trust me here this is good to use so what we're going to do is install this wrapper and again this wrapper will have all of this stuff with the agor sdk all it's kind of doing is just wrapping some of these functions and just making them a little bit simpler for us to use specifically in react again if you were not going to use this in react if you were going to use this somewhere else there's all kinds of tutorials on the agora website it is pretty intuitive and simple to do but i found as i was experimenting with this that this wrapper is just going to make our life a bit easier and so we're going to go ahead and use this wrap all right so i'll leave this link in the description but what we're going to need to do to install this wrapper is we're going to go here to our console and we're going to say npm install and actually i'm just going to paste in this command because i have it copied to my clipboard npm install and then git colon and then the link to that repository that i just showed you but this is going to be a little bit different so i'll leave this line in the description of course you can also just type it out here it'll be on the screen for long enough you could pause the video but again this will be in the description type this in press enter and then it's going to install a bunch of stuff now this will probably take a few minutes to run just because there's a ton of modules this is installing the entire agora sdk and then a few other things as well so once this is done i will be right back all right so now everything is installed our dev environment is set up we have our tokens we've set up our agora project we understand briefly what agora does now we can start actually writing some of our react code and setting up this application now this part's not too complicated but we will have to create a few different components have some buttons like turning off the camera turning on the microphone all of that kind of stuff and well anyways we're going to get started here in settings.js so what we're going to do right now is we're going to initialize our kind of agora application so we're going to set up a configuration and we're just going to create what's known as a hook so that anywhere in our react application we're able to access this client object that we need i understand this might seem a little bit confusing if any of you are relatively beginner in react or in just programming in general but just follow along it will start to all come together so we're going to say import and then what we're going to import is create client and create and then this is going to be microphone and camera tracks like that and this is going to be from and this is agora hyphen rtc and i have to spell agora correctly obviously agora hyphen rtc hyphen react now let me make sure i spelt this correctly microphone and camera tracks looks like that is correct okay so we've now imported these two things that we need from agora rtx react okay what we're going to do next here is we are going to export three variables we're going to say export const and then we're going to create a config variable now this is going to store the configuration for our agora application so we're going to say mode is equal to rtc i believe this stands for realtime communication you can also set the mode to like a live stream mode you'd have to look at the agora documentation to see all the different stuff for this config i'll just tell you what the ones are that we're using here the next thing we need is the codec so this is what we're using to actually encode our video we're going to use vp8 now small note here for some reason you're using a really old version of safari or internet explorer or something you probably want to use h.264 i believe the codec here is h264 if that doesn't work i think you can type in just h.264 anyways vp8 is what we're going to use if you don't know what that is don't worry it's just kind of the algorithm that's used to actually encode the video that's going to be displayed we then need to pass our app id so we're going to pass the app id equal to the app id the variable we have up here and then we need the token so we're going to say token colon token okay so we now have our config next what we're going to do is say export const and then this is going to be use client and this is going to be equal to that create client function there that we imported and we're going to pass inside of here config so we're going to create an agora client using the configuration that we just defined up here next what we're going to do is say export const and it's going to be use micro phone and camera tracks like that and then this is equal to create microphone and camera tracks and we're just going to call that function so what these two things actually are right here are hooks now if you're unfamiliar with hooks essentially these are functions that we can call to get access to something now that's a really poor explanation of what a hook actually is but for our context right here what we're defining is this used client and this used microphone and camera tracks hook and so we're going to be able to actually use these hooks from any component that we want to get access to the client and get access to the microphone and camera tracks now this is important because we need access to both of these things from a bunch of different files so rather than passing them through the props of all of our react components or you know kind of messily handling them around and throwing them around our program we put them in one file the settings.js file and then we can access them whenever we want you'll see how we use them obviously as we start using different components but understand that's the point of the settings.pi file so now we can access the config the use client and use microphone and camera tracks from any component without having to kind of pass them around through props and all that messy stuff we'd normally have to do okay we're done with settings.js now we don't need to look at that anymore unless something doesn't work what we're going to do now is go into app.js all right so i'm actually going to stop here for a second and just backtrack a bit i realized that the order i was about to go in for creating stuff doesn't really make much sense so let's do it in the proper order actually what i'm going to do here is go to settings.js to start i'm going to export one more thing so i lied we are going to need to touch this file again i'm going to export const i'm going to export the channel name so i'm going to say channel name is equal to and then this is going to be the name of the channel that we set up which in this case is main so the reason why i'm doing this is because i realize that i forgot to mention this token here is associated with this channel main so if we go back here we go to gora we go to token you can see that we have our channel name main we have our app id and we have our temporary token so as i was saying this token only allows you to join the main channel so it doesn't make sense for us to maybe say ask the user to type in a channel because if we're hard coding our token then we need to hard code the channel the users are going to join in so what's going to happen when we load our app is users are automatically going to be put in the main channel there won't be a choice they'll just go right into one channel but if you wanted to allow users to join different channels what you would need to do is make different channels here in this console there's also a way to do it from code but i'm not going to explain that it's a little bit beyond the scope of this tutorial and then you would ask the user to type in the token and the channel that they want to join once you've created different channels here right so you could say okay type in the channel name type in the token and assuming that token is associated with the channel they would be able to join hopefully that makes sense but just understand that again this token only works for this channel and so we'll have one channel anyone who kind of goes to our application will just automatically be brought into that channel so now that we understand that let me close this i don't know like get ignore is open what we can do is we can just set a few things here in app.js so i'm going to go to app and i'm going to import use state from react all right so we've got you state now and if you're looking at you state and you're like i don't know what this is i'm going to highly recommend that you go and brush up on your react maybe watch a react tutorial because this is probably going to be very difficult to follow along with if you're not familiar with something as basic and react as something like use state so not to discourage you i just want to make sure i don't waste anybody's time if you are a beginner please go brush up on react make sure you're familiar with some of these things because i can't really explain them in this tutorial okay so we've got use state and what i want to do here just set one piece of state that tells me whether or not my user is in a call already now we're going to try to just automatically join the user into a call as soon as they come to our web page but we might not be in there immediately and so we need a piece of state that's telling us are we in the call or are we kind of waiting to join so we're going to say const in call and then set in call and this will be equal to use state and we'll set this equal to false by default now we're going to go inside of here inside of our return so this is the stuff that's actually going to show up on the screen and we're going to check if we're in the call so in call question mark if we are in the call what we'll do is just render some text that says we are in the call otherwise we'll say waiting to if we spell waiting correctly waiting to join call okay now we're going to replace this text here with the thing that's actually going to display the call we haven't created that component yet so let's actually go ahead and do that now i'm going to make a new component and i'm going to call this video call now this is where a lot of the logic for our program will lie you know what while we're at it let's create all of the components that we're going to need so we need video call this will display all of the actual videos all the video feeds we then need our controls so this is like okay we need to mute the microphone we need to stop the camera we need to leave the call that's what controls are and then finally we need a component to actually display all of our video so video.js so video call will render our controls and all of our videos so video represents all the video feeds control is obviously the control and then video call will kind of render both of them and before it renders them it will make sure that we have you know joined the call and all of that kind of stuff okay so let's go inside a video call and let's say export default and then let's make a function and let's call this video call so just making a component this will take in some props and inside of here we're going to start by just decomposing this props so we're going to say const and the one prop that we're actually going to get here is going to be set in call and this will be equal to props so if you're unfamiliar with this syntax what this does is look at props which is an object grabs out the prop called set in call that allows us to use that in here and the idea is that we're going to kind of join the call from this component so once we've joined we will then use this function here to tell our app component that hey we are in the call and so then it can actually render this component fully perfect okay now what we want to do is set a few pieces of state so to set some state we need to import use state so we're going to say import use state and then this will be from react okay so the pieces of state that we want first of all is the users so we want to know what users are currently in our call right so we're going to say const users set users is equal to and then this will just be use state and this will be a list or an array all right next we're going to have our start state so start set start this is kind of similar to in call this is telling us if we can start our video so we'll see how that works again in a minute but actually we're going to set this equal to false to start just another variable that's kind of telling us hey are we ready to go have we initialized everything we'll use this a little bit differently than set and call i can't really show you how it works until we actually get into the logic of joining the call okay then what we're going to do is we're going to import a bunch of stuff from our settings so we're going to say import config we're going to import our use client we're going to import our use microphone come on give me the autocomplete here so i don't have to type at all uh okay let me just go from settings.js and then maybe it will give me my autocompletion because i don't really want to type use microphone and camera tracks okay too bad i did have to type it did i spell this correctly use microphone and camera tracks i think so and then the last thing that we will do actually we don't need to import anything else from this that's all we need okay sweet so we've got all that next we're going to say import and we're going to import grid from this can be app material hyphen ui core now this is what we use to actually kind of lay out a few things that we need here okay so now we have our state for start and for users the next thing we need to do is grab our clients we're going to say const client is equal to and this will be use client now notice we're actually calling this we're calling it as if it's a function what this is going to do is return to us the client object which we can use to connect to the video call next we're going to say const ready and then tracks is equal to and this will be use microphone and camera tracks we're going to call that again just like we called use client and what this will give us is our audio and video track and whether or not they're ready to go ready to be used so when we call this what it will try to do is initialize our audio and video track so we have two tracks here this is actually going to be a list of tracks again one for audio one for video and then we can use these tracks like we can disable the audio we can disable the video or we can show the audio or display the video or whatever right and then this is telling us hey are we ready and the reason we need that is because we have to get permission from the user to use their video and use their audio this handles all of that for us we don't have to you know pop up a dialogue or anything it will automatically ask the user to allow the camera all right so next what we're going to do is we're going to import use effect so essentially as soon as we render this component what we want to do is we want to have an effect here and this effect is going to do all of our kind of initialization so we're going to say use effect this is just going to be a function and then we are going to do this effect whenever the channel name changes which i'm actually going to import from up here that's the thing i was thinking about importing but didn't whenever the client changes whenever the ready variable changes or whenever the tracks change okay so if you're unfamiliar with this when you put a list here this says okay only do this effect so only run this function when one of these things changes so when one of these four values changes then we will actually call whatever's inside of this function for use effect now what i'm going to do here is i'm going to define a variable i'm going to say let knit equal async we're going to take in a name this is going to be the channel name and then this is going to point to a function so we have an asynchronous function again i can't really explain async but this means not based on the clock tick of your computer this has some delay essentially we're waiting on a network operation and inside of here what we need to do is we actually need to define some event listeners so we have our client object we have clients right and what we do with client is we can have some different events that are going to be triggered and that we're going to listen for so there's a bunch of different events here i'm going to go to the agora documentation to show you what some of these events are so let's go to developers let's go to documentation and i'll start walking you through some of the events that we want so let's press on video call here and let's just see what can we look at maybe quick start okay let's go to quick start see what it brings us to we're going to change the platform here to be web all right okay so let's scroll down and let's look for if there isn't a list of events okay so this is actually what i wanted to show you i believe this is i think they call this a sequence diagram i forget what this is actually called maybe an activity diagram or something regardless you can kind of see the flow of what needs to happen here but we need to create the client which we've already done and then we need to initialize the client now when you initialize the client what you need to do is join a channel that sends a channel request to this is kind of like the back end for agora essentially and then after that what's going to happen is we need to create a local stream initialize the stream play the stream and publish it so what we're going to be doing as a client is we're creating a stream of our webcam and of our audio and then what people can do is they can publish or sorry they can subscribe to that stream which means that they can access it they can view it so once we create the stream we publish a stream that's what i mean and then that's going to send the stream data here to the sd rtn then what happens is you can subscribe to a remote stream so people can subscribe to our stream it will then kind of add it to say their react application their video calling app whatever and then they'll start seeing our video stream and so whenever someone joins the room we want them to automatically subscribe to all of the other user streams and we want those users to subscribe to their stream right but we need to handle different events like what happens when someone unsubscribes subscribes from a stream what happens when someone leaves the channel so on and so forth and so that's all the events that we're going to be kind of hooking up right now there's a lot more events that can happen i mean you can read through this the documentation is really good for this but i will just show you the events that we need to kind of set up here so the first event that we're going to have so we're going to have client.on is going to be a user published a stream so if a user has published a stream then what we want to do is we want to call the following asynchronous function now this asynchronous function is going to take in a user it's going to take in a media type now the media type is going to be audio or video so did the user publish an audio stream or a video stream and the reason why this is kind of important here is because users can enable and disable their video streams right so if a user disables their video stream they're going to be kind of unpublishing it whereas if they reenable it they'll be publishing it and so we need all of these events to look for all of that kind of stuff that's going to happen i get that this is really probably confusing for a lot of you but just bear with me we'll get through it and you'll see how it works okay so we're going to say client.on user published we have an asynchronous function and what we are going to do is we are going to await the phone we're going to say client dot subscribe and we're going to subscribe user and media type so we're going to subscribe the current client to the stream that a user just published so a user publishes stream this does not mean we are automatically subscribed to it but now we are aware of the fact they published it we have the user and we have the media type now we can subscribe to it so that's what we're doing here we're awaiting the fact that we subscribe to the stream then we need to check what type this stream was so we're going to say okay if the media type is equal to video we should do three equal signs here then what we're going to do is we're going to change some state here so we're going to say set the users that are in this video call and we're going to get the previous users so we're going to say prev users like that we're going to have a little function that we run and inside of here we're going to return dot dot so the spread operator prev users and then user so what this is doing is this is getting the previous users so whatever was currently in the user's state that's kind of how this works and react when you use an arrow function inside of a state or inside of setting a state story so this gets whatever the previous state was then what we do is we return a new list that has all of the users that were currently there plus the new user that's kind of what this is doing that's what we're returning okay so that's good then what we're going to do after this is we're going to say if the media type is equal to audio like that we can make this an l if two if we want but it's fine we'll just leave it as an if so if media type is equal to audio then what we're going to do is say user dot and then audio track so let's go audio track like that dot play so we don't need to subscribe to the audio track because it's just kind of given us the audio track we have the user the audio track is associated with the user and so we're going to start playing it in the web browser which means now we'll be able to hear whatever the user is saying so again all the stuff you find from the documentation like i said at the beginning this video is just meant to get you up and running as fast as possible and hopefully give you you know some piece of information that are useful okay so we've done that we've now done our first event now there's a few more events that we need to do so the next event we're going to do here is say client.on and we just checked if the user published an event so what happens if the user unpublished or nonevent uh streams right so user and then this is unpublished like that now similarly we're going to have actually not an asic async function this time because we're not waiting on a network operation we're just going to say user type is equal to and then inside of here we'll do kind of the same thing except this time we're going to unsubscribe the user right or we're going to yeah unsubscribe the user so rather than doing type just to keep it consistent i'm going to say media type and i will say if type or media type like that is equal to audio we need three equal signs so if the media type is equal to audio then we want to stop playing the audio so we're first going to just make sure that the audio is playing we're going to say if the user dot audio track then what we will do here is say user dot audio track and then dot stop now the reason we need this little if statement before is because a user could technically leave the web browser or they could have disabled their mic something could happen where we didn't hit this event and the audio track has stopped playing already and so we can't stop the audio track if it doesn't already exist so we just need to make sure it exists before we try to do this just to prevent any potential errors from coming this is kind of good practice to do just always check if something exists before you go ahead and try to stop it or start it or whatever whereas here we don't need to do that because we know if the type is audio we're going to have an audio track and so we can play okay otherwise we're going to check if the type is video so if the media type is equal to video i always do two equal signs that needs to be three then we want to unsubscribe and we also want to remove the user so we're gonna say set users like that we're going to say prev users and then here we're going to return it's going to seem a little bit unnecessary but this is the way we'll do it prevusers.filter we're going to have a function here we're going to take an uppercase user and we're going to say if the user.uid this is their unique identifier i believe that's what uid stands for does not equal user.uid then we will go ahead and keep that in our array okay so i lied here we actually don't need to unsubscribe i believe when a user unpublishes their video stream you are automatically going to be unsubscribed from it because well there's nothing more to look at and so you don't need to manually say unsubscribe you can just remove this user from the user state so keep in mind here there's kind of two pieces of state right we have the state in our front end which is allowing us to display all these different video feeds then there's going to be a state kind of in the back end api or sdk that represents what users are in the room and you know what users have video feeds what streams are published all of that we don't need to deal with that because obviously that's handled by the sdk but here we do need to be able to keep track of what users are in our room or not so we know what streams we should be displaying hopefully that kind of makes sense but at minimum we want to know how many users are in a room and so we want to have this user's array that's storing all those users and so we can get access to their different streams and so what happens is when a user unpublishes their stream well they may have been automatically unsubscribed we may have auto unsubscribed but we need to change the state on the react front end to kind of remove that user and so what this does here is it takes whatever our previous users were from this user state and then it filters this array so what this will do is now create a new array that has all the users in it except for this user right here the one that unpublished their stream okay so that's it for that now we have a few more events that we need to handle so client dot on and this is going to be user left so user hyphen left like that this doesn't need to be async because we're not waiting on a network operation we're going to take in the user and then same thing we're just going to run this set users kind of set state function whatever you want to call so if a user left or if a user unpublished their stream these are kind of the same thing like if a user leaves they do unpublish their stream but it's just a different event that occurs so we need to look for both of them to make sure that we are you know removing the users from our frontend state okay so now we have all of our event handlers kind of configured here so those are configured the next thing that we need to do here is we need to try the follow so we've set our event handlers we're going to say try catch will catch an error and we'll just console.log error just so we can see if an error occurs and inside of here what we're going to try is the following we're going to say try await client dot join what do we want to join well we're going to join config.app id we are going to pass in the name of our channel so name which we'll pass to this asynchronous function right here and then we're going to say config.token and we're going to pass no now uh let me just explain what all these parameters are here i mean all of them are pretty straightforward but we're passing the app id we're passing the name of the channel we want to join we're passing the token to join that channel and then this is the uid of the user that's joining the channel so uid unique identifier you can see we have a unique identifier for all of our users if you leave this null it's going to automatically generate that for you which is what we want but you could manually define the id of the user joining maybe there's some reasons why you'd want to do that but for now we just leave this no but this parameter here is really the uid now it's required so we have to pass something so we pass null but when you pass no it will automatically generate the uid of the user don't have to worry about it too much again it's just kind of the id of the user we could set it if we want but we're not going to do that okay so we've tried that we've logged the error the reason we're trying it is because something could go wrong here we don't want to crash our program and so now what we're going to do is we're going to say if tracks we're going to await client dot publish and what we're going to publish is the following tracks 0 and tracks 1. now we could if we wanted to clean this up just use the spread operator i'll just leave it like this so it's very explicit on exactly what we are doing what we're checking here is okay do we have any tracks if we have any tracks this means that our audio and video has been initialized and so what we can do is we can uh what is it let's see here where am i we can publish it so this is publishing a stream so what we've done is we set up all our event listeners and now once all those are done and we've joined the channel we are going to publish our stream to the channel so anyone else in the channel now that has these event listeners and every client will have them because well that's what we're coding out here they're going to automatically subscribe to our stream that has been published and then they will see our stream so hopefully that kind of makes sense but at the end of setting up all this stuff doing all the configurations here and all our event listeners then we're going to publish the stream then after we publish the stream what we're going to do is we're going to say set ready or not set ready sorry set start equal to true so we're saying okay we've done everything we need to do here we've set up the event listeners we've published the stream and so now we indicate that hey we are ready to start so we say set start now let me just go here and make sure okay i just wanted to look at something quickly to make sure i wasn't going off course here it looks like we're good now inside of use effect but outside of this init right here because this init is a function right what we're going to do is we're going to call this init function so we're going to say if ready and tracks then what we'll do is we will try the follow so we're going to try to init with the channel name otherwise we're going to catch an error we're just going to console.logging so constant log error and sorry we need to constantly log the error message uh actually we can just log the error it's an object but we can look at the object in our console okay so what we've just done right is we've set up this kind of a knit asynchronous function then what we're doing is we're waiting for ready to be equal to true and for our tracks to be there so we have some tracks essentially so really what that means is we're waiting for the user to give us permission to access their microphone in their camera once we have that we're going to try to initialize our kind of video stream with the channel name now the reason we're putting in a try again is just to be extra safe and to make sure that something goes wrong we are good and we have caught that and actually what i realized here is that we could remove this try because technically we're trying this entire thing but i think it's good to have this because this will catch a specific error that happens just when we try to join the channel so we'll leave that in for right now and this effect is going to be called right whenever ready changes and whenever uh what do you call client changes channel name changes or track changes but we're only going to call this huge kind of function that we made here so let a net equal async when ready and tracks have both been initialized okay so we've done all that now what we're going to do is we're going to set up what we're actually rendering on the screen so we're going to return and what we will return here is a grid so we're using material ui this is going to be a container the direction of our grid is going to be a column and we just need to make sure that we set the height of this we're going to say style is equal to and then this is going to be height and we just need to manually set this to 100 okay so we now need to close the grid so slash grid now inside of this grid what do we want to do well we want two grid items here so we're going to say grid and then this is going to be an item that is inside of our grid we're going to say style is equal to and then we're going to again manually set the height of this so we're going to say height colon and then 15 now if any of you guys know some better css than this to you know set heights and do dynamic sizing and all of that please do let me know i'm not very good at css so i'm just using what i can to make this look half decent so sorry the height of this is going to be five percent and the height is going to be 95 now you're probably like what the heck are you doing tim well what i'm doing is i'm going to be rendering the controls and then actually the video right so remember i told you this component handles all of this kind of annoying connection related stuff but then what we are going to do is we are going to render alt videos and we're going to render all of the controls which are going to be in two separate components and so that's what we're going to do here all right so inside of this five percent this is where we're going to put our controls so we're going to check if ready and tracks and and then what we're going to do is render the following if both of those are true so we're going to say ready and tracks and and then we're going to render the component controls we've not defined this yet but we will define this later i'm just going to hard code in for now i'm going to say tracks is equal to tracks we're going to say set start is equal to start and then we're going to say set in call is equal to set in call all right i don't think there's anything else we need to pass there those are the props for that component all right so ready and tracks and done this so essentially just saying okay when we're ready and we have our tracks we'll display the controls then inside of here we're gonna do a similar thing i'm gonna copy this paste it but rather than ready we're going to put start so we're going to say start and then rather than having controls what we're going to have is simply our videos so we're just going to say videos we're going to pass the tracks but we're also going to pass the users so we're going to say users like that is equal to users and then i think that's actually all we need here so let's close that okay so i know again probably confusing i'm even confusing myself there's a lot of code that we need to write here but we're just going to only show the controls and then the video when the corresponding variables are true right so once we're ready and once we are starting okay so just because we have two variables here ready and started i'm just going to stop and explain what these are just to make sure this is clear so what's the difference between ready and start okay so start essentially is telling us we can now view other people's videos so we have these events set up so once we set up these events what we can do is we can view other people's uh videos right once we've joined the channel however we may not have published our video yet so it seems a little bit confusing the thing is we're setting start equal to true regardless of the fact that we publish the video or not because if we do not have any tracks if we have not given permission to our camera or whatever or for some reason we just don't have any tracks to display then we can still view other people's videos but we are not going to publish ours and so that's why we're setting start however we should only show controls for our video if we have a video right so once our video is ready and we have our tracks then we can disable and enable our video but we want to still be able to view other people's videos before that point is ready so hopefully that kind of makes sense but that's the difference like ready is telling us our video is good started saying okay we can now view other people's videos so yeah that's the core difference there i get that that's probably a bit confusing but anyways that's the way that we're going to do this here and a lot of this code i've just taken from official documentation from agora just to make that crystal clear i did not come up with all this stuff off the top of my head okay so now that we have that we need to code out these two components controls and videos right so let's start with controls because i feel like that's the most intimidating one so we'll get the easy stuff f uh done after we do this okay so let's make a new file here and let's call this one controls dot js oh i already have sorry i already made controls.js one step ahead of myself now we're gonna do is import a few things that we need so we're gonna say import it's gonna be used this will be from and react then we want to import use client and this will be from and then dot slash settings like that perfect then we want to import grid so we're going to say import grid button and icon from and this is going to be at material hyphen ui core okay perfect and then what we actually need to do now is we need to import a bunch of icons now i'm going to copy all of these so let's copy them all right now okay so mic icon mic off icon video cam icon video cam off icon exit to app icon i don't think i need to explain why we need these icons i mean they're going to just be the icons we have for our different buttons and now i realize that we need to install the material ui icons package so what we're going to do is just type npm install material ui icons app material ui icons okay this is going to take a second once it is done i will be right back all right so now we have material ui icons installed now we're going to start coding out this component so export default function controls take in some props like that okay we're going to use our client so const client is equal to use client like that const and then tracks set start and set in call is equal to props perfect and then const track state set track state is equal to u state and this is going to have two things it's gonna have video true and audio true okay perfect let me make sure that's correct i think that's all we need nice okay now we have all those things initialized what i'm going to do now is just code out what this is actually going to look like right so we're going to say return and now it's going to be a little bit of html madness going on here where we make a grid and we place some buttons and some icons essentially i want three buttons right i want the button to turn off the mic the button to turn off the camera and the button to leave the call so i'm going to say grid container spacing equals 2. if you're unfamiliar with this you can reference the material ui documentation but what this does for us is set up a nice grid using i believe it's called flexbox so this just kind of has some default css classes for us so rather than me having to go through and write all the css we can just use this grid so you know it's kind of as it explains by default a grid is going to be in a row size so we're going to have things showing up horizontally on the screen but i think you saw previously i think i did it here i set up a grid that was the direction column so things were going vertical in the screen anyways that's the difference column is vertical grid is horizontal okay now we're going to set up some grid items so we're going to say grid item notice that items go inside of containers right so we'll have two grid items actually we'll have three grid items sorry so three grid items and inside of each of these items we're going to have some buttons now of course align item center it's going to put all our items in the center of the grid which is what we want now we're going to have a button this is going to be the variant which is equal to contained there's a few other variants again you can find all this stuff in the material ui documentation uh it's not super important so i won't really cover it we're going to have the color the color is going to be equal to dynamically red or blue depending on if the audio is on or off right so this button the first button here is going to be for our mic so we'll have the color that is equal to track state oops dot audio and if the track state dot audio is on so if that's true then we're going to show the color primary which means blue right and then we're going to show the color secondary which is kind of like a red color again look at material ui documentation if you want to see all of this okay so we have our button now this button is going to be called i guess actually we're not going to have a name for this button so we're just going to put an icon for it so we have two icons right we have mic icon and mic off icon so depending on the same condition here if the audio is on then we want to show that the audio is on otherwise we want to show that it's off so there's two icons we can show here the first icon we'll show is the mic icon if the audio is on otherwise we will show i'll just copy this and change it to i think it's called the mic off icon mic off icon let's see yeah that looks like that is what it's called okay sweet so we're going to show the mic on if the audio is on otherwise mic off all right so now what i need to do is add an on click here so i'm going to say on click and this is going to be an arrow function so on click is equal to an arrow function and this is going to call another function that we've yet to define called mute it's going to pass in audio now what mute is going to take is audio or video so the string audio or video if you pass it audio uh then it will mute the audio otherwise it'll mute the video right pretty straightforward okay so let's copy this button because the next ones are going to be almost identical let's put two more here and this time rather than having audio we're going to do video so we'll just change all of this to say video like that and the icons need to change too this all got got to change to video now we're going to use video cam icon and video cam off icon okay so let's change this to video cam icon and this will be video cam off icon sweet just notice i changed everything to video okay so now our last button is going to be the leave button so what this is going to have is it's just going to say leave like that and then we will actually have an icon beside leave i think that the leave icon is not super intuitive and so i want to add some text there as well okay now we will just use the uh exit to app icon that's like a little you'll see what it looks like but it just looks like you're leaving that's why i picked it okay so now for the color for this one it's not going to be dynamic it'll just be the same because once you press that button you're going to leave it we're going to call this default and then it's going to call a function called leave channel like that now we actually need to call it so there you go okay so now we have all of our buttons so again contained default we're calling the leave channel function which we'll define in a minute and i realize that we no longer need this icon i thought we were going to use that but i guess you can just define the icon like this okay so now let's write out those two functions so we need that mute function and we need that leave channel leave channels easiest so we'll start with that so we'll say const leave channel is equal to async and then yeah that will be brackets like that and inside of here we're going to say await client dot can you guess what it is it's leave pretty straightforward just leaves the chat then what we want to do after this we need to remove all the event listeners so we're going to say remove all listeners so if we go back to video call see how we set up all these on whatever event listeners what this does is it just removes them to make sure that we don't have all of these kind of lingering event listeners and we've already left the channel okay then what we want to do is we want to close our audio and video tracks so we're going to say tracks 0 dot close and tracks 1 dot close or one of these will be audio one of them will be video i can't remember which one's which but it doesn't really matter because we kind of do the same thing for both of them and then we're going to say set start is equal to false and set in call equal to false perfect okay so now we've done the leave channel next thing we want to do is mute so we're going to say const mute is equal to async this needs to be asynchronous because you're going to wait on a network operation here just like this one was async as well right so we're going to take in a type so the type is going to be either audio or video then depending on what it is we'll disable that audio track or video track so we're going to say if type is equal to audio then what we want to do is say await and it's going to be tracks zero so there you go zero is going to be the audio track dot set enabled and we're just going to set equal to our set enabled sorry to whatever the opposite of its current state is so we're going to say track state dot audio not track state audio so essentially you know if this is true if audio is playing then we're going to set it to false otherwise set it to true i think you guys get the idea then after that we're going to say set oops set track state like that and we're going to take in whatever the previous state was so that's ps previous state and we are going to return a new object with the previous state but this time with audio equal to and this will be not ps dot audio okay we're going to do almost the exact same thing for video so let's just copy it go down here we could change this one to elsif if we're feeling uh feeling creative here so it goes to else if now this can go to video make this tracks one rather than trackstate.audio you guessed it it's going to be video now rather than audio this is going to be video so not ps stop video okay there we go we are now finished the mute function finish the leave channel function and we are done with this component okay so this component is good now we need to do the video component this one is a little bit simpler than the other one yeah it's actually not too much that we need to do here i'm just going to take a quick break here and review some of this code to make sure we haven't made any major flaws or mistakes and i'll be right back all right so we are all good we are now going to do the video component now i apologize that we can't really run the app right now we just have to code a ton because we can't really see anything functioning until all of this stuff is done kind of sucks but at the same time it's fine let's just scale the code done and then we can enjoy the application after all right so what we're going to do now is we're going to import the agora and this is going to be the video player from the wrapper we installed so agora hyphen rtc hyphen react wonderful then we are going to import the grid from and this can be at material hyphen ui slash core and then we're going to import oops let's go next line here going to import use state and use effect from react nice okay let's make our component export default function video props and let's define some state or sorry let's grab some stuff from our props so we want users and we want tracks remember we pass these through the props to video this is equal to props we're then going to say const this is going to be grid spacing set grid spacing you'll see why we need this in a second but the idea here is that in our grid in our material ui grid we have 12 potential positions four items in the grid so if you're looking at the grid in terms of uh horizontally right so like width of the screen you can have 12 items in a grid so the thing is we can define how much space an item uses in our grid out of 12. so to start when it's just one person in the room they'll take up the entire grid right they'll take up all 12 squares in the grid but as more people join we need to shrink them so we need something representing our grid spacing and we'll have this set to 12 to start and then we'll divide it so we'll divide 12 by the number of users in our room to define how much space each person the grid is taking up now as soon as someone starts taking up like less than a certain amount of space we will increase the size of the grid vertically so we'll fill up specifically three people in one row and then as soon as three people are in one row we'll automatically move down to the next row and that's why we're using this grid because grid is really easy to do this in and you'll see it's not super complicated but we just need to define you know how much space each person's taken up okay so we're gonna define use effect now inside of use effect we're gonna say set grid spacing and we're gonna set the grid spacing equal to the math dot maximum of the math dot floor this is just to avoid any what is it floating point division and we're gonna say 12 divided by our users dot length plus one now the reason we're doing this is because we are a user and technically our users uh does not define ourselves so we have users.length plus one to represent that hey we're in the grid two and then after this what we do is we're gonna define in the max function right 4. so we're going to say okay if we have 12 users we don't want each user only taking up one grid square we want them taking up 4. so if we have actually less than 3 users here then we'll take whatever this division is otherwise we're going to take 4. so hopefully you guys can understand that math there but this is just a dynamic way to do it and then we're only going to do this effect whenever the users change or the tracks change so if we disable a track right then we'll stop showing ourself in the grid actually sorry we're not going to stop showing ourselves but someone else will stop seeing us and anyways you'll see how it works but technically a user could disable their mic without leaving the chat right and so if or sorry not not mic video so if they disable their video but they haven't left the room yet or left the channel then we want to stop showing them in the grid we could show them with the black screen if you wanted to do that then you would just remove tracks from right here but i don't want to do that so i'm going to do it this way okay so now all we have to do is just return whatever we're going to render here so i'm going to return i can make my grid and say grid this is going to be item and container actually sorry this should just be container grid container this is going to be style equal to and we need to set the height of this as well so i'm going to say height 100 now any of you guys that are better at me at css like why are you setting the height to 100 well unfortunately this agora video player here i was having some difficulties with it i'm sure some of you guys are smarter than me can figure this out but pretty much i realized that i just need to set the height of everything to be a hundred percent otherwise this has a height of zero so my limited knowledge of css tells me that the parent of this is what the size of this thing is going to be and so if the parent doesn't have a defined height if it's not set to some specific height then this is just going to be a height of 0 because usually what happens is your container will take up the amount of space that the children are taking up right if the child's a height 100 then the container here will be height 100 but in this case the agora video player gets its height from the height of the container that it's in and so we need to set the height of the container which is annoying but we can figure it out and that's actually the reason why here we have the root being equal to 100 vertical height the reason i had to do that is because we need to have somewhere some absolute height in this case hundred vh is actually going to kind of stand for a pixel value so vh is like the number of pixels the vertical height of the screen right and so we're saying 100 of the vertical height and so really this will be equal to some pixel value and so that means that when we set all of the divs going down to 100 height they'll all be equal to that height as well and so eventually when we get to video our containers that are storing these videos will be able to actually have a height i'm sure no one understands what i just said there but that's my rationale just want to explain that so you guys don't think i'm too crazy okay now we're going to make our grid items so this item is going to have spacing which is equal to grid spacing so in case you're unfamiliar with how you do this xs stands for extra small you have md i think or m or something that stands for medium you have lg which stands for large i think you have like xlg or yes something like that you'd have to look it up exactly on the material ui documentation but what i'm doing right here is saying okay when the screen is size extra small or larger we are going to have this item taking up this number of grid spacing squares and we're setting that in this state variable right so whatever we get from this math here that's how much space is going to be taken up by this grid item so anyways that's the rationale there xs is just saying okay take up this much space in the grid now you could define like when the grid is larger take up less space or take up more space but when you just set xs this automatically sets it for all the other ones too so if you set xs for a medium size screen or for a small size screen for a large size screen it will set the spacing the same but you can individually define what you want the spacing to be for all different types of screens okay so again reference the material ui documentation i'm going to keep saying that but if you guys have made it this far i think you'll be able to look through the documentation and figure that out pretty easily okay we're gonna have two great items here so we have this grid item and then we're gonna have another grid item now the first grid item here inside of here we're gonna put an agora video player now this is going to be us so we're going to say agora video player when i say us i mean like whoever is the client it's going to be their video the other stuff that i'll show you in a second will be everyone else's video so be agora video player and then we need to define a few things in here so we're going to say that the video track is equal to and then this is going to be tracks one our video track right so tracks one and then we're going to say that the style is equal to and this is mandatory you need to put this if you don't put this it's not going to work height 100 width 100 now if you want this to be smaller of course you know adjust these values you can make them pixels too uh but to make it dynamic you want to be a percentage so we're going to say height 100 with 100 so fill the entire size of this grid container okay so now we have another grid but what i want to do is i want to generate a grid item for every single user's video feed so what i need to do here is i need to map all of my users to a grid item so i'm going to say users dot length is greater than zero and and users.map and i'm going to take in a user and then what i'm going to do is return if the user has a video track so if user dot video track like that i am going to return the following now i realize i need i uh what is it curly bracket here so put a curly bracket there put another one here and we are going to return a grid item so lets grab that grid item let's put it here let's save let me see what it's showing us is wrong here okay so i just have my bracket in the wrong order here just got to put a bracket there and i think that's good now yeah okay there you go so now we're good so now inside of this grid item we can put what we want so it's going to again be an agora video player so let's copy that it's gonna have to have the height of a hundred and hundred and then what we're gonna have is the video track which is equal to rather than tracks one user dot video track okay so it's equal to user.video track and then what we want to do here is we want to also have a key now whenever you use like a map which is what we're doing here in react every child object is supposed to have a unique key so in this case the key is going to be user.uid this is just so that you don't get screamed out in the console okay now otherwise though because we have this if right we need to have something else so we're going to say else return no so just don't do anything so essentially if we have no users just don't do anything you can just stop now why what is wrong here what is this saying um i think this should be good okay yeah so i don't know i think vs code is glitching out because this is fine okay so that in theory is all we need to do except for a few very small things in app.js so let me zoom out here just so you guys can see this i'll go through the files for one second so you guys can look at all of them but again i have all this stuff in a github repo so feel free to check that out from the link in the description okay so this is video this is controls although it's kind of large so i can like scroll through it a little bit so you guys can see it this is video call okay and this is app.js all right so let's continue here we're going to nap dot js now we need some way to actually enter into our video call room so what we are going to do is we're going to make a button here so we're just going to say import and we're going to import a button from and this is going to be at material ui core we're just going to put a button above this we're going to change this right so that's something else we're going to put a button and this button will be a variant equal to contained its color will be equal to primary and then we'll have an on click say on click is equal to this will be an arrow function what the arrow function is going to do is it's going to call set in call equal to tr okay and then here we're going to say join call like that and then if we are in the call what we are going to do is we're going to render the video call components we're going to say video call like that and then we need to pass through this video called component set in call as a prop so setting call is equal to set in call okay we need to import this video call component so we're going to say import video call from dot slash video call and now we're going to run the app and we're going to see how many errors we made now i'm not super optimistic just because it's a lot of code we wrote without testing it but let's start the application and let's see if this actually works all right so as i suspected we have a few errors first error is a go to video call.js we have to put dot before this settings.js import it was saying we couldn't find it because we didn't have that dot now you can see there's other errors popping up in video call which is right here we forgot to import controls and videos so let's do that we're going to import videos from dot slash videos make sure you have dot slash then we're going to import uh what's the other one we needed controls from dot slash controls uh controls not control okay let's see what air we get now okay uh cannot resolve videos ah so this is video not videos nice just messing up the players okay videos is not defined yes that would make sense if we go down here i've called this videos when this is actually just called video okay compiled with warnings that's good warnings are always good because they're not errors okay so now let's go here and let's refresh okay so it says join call waiting to join call uh one of the prettiest uis you've seen i know okay so let's press join call and now look it says use your camera wants to use your camera so we'll press a lot should ask me for the microphone too okay so now it's showing me all of the controls but it's not showing the video now i think i know why but let's go to the console here and see so failed prop type align items of grid must be used on container okay failed prop type spacing of grid warning receive true for a nonboolean attribute container okay and we go through here everything else actually looks like it's kind of working now the video i believe we're just not seeing right now i'm going to show you how we can see that in one second this is actually a decent start considering the amount of code that we wrote okay so let's go back here and let's fix a few things now actually let's just press these buttons and see if they work okay they do work you can see that they toggle back and forth and then if you press leave set start is not a function that's fine we'll fix that in one second okay okay so i'm not necessarily tackling these errors in the order in which we saw them but first error here line 73 in video call this needs to say set start not start so i'm not sure if uh if we saw this but when you press the leave button it didn't work because we apparently could not set start because well we didn't have said start so it's in video call.js line 73 make this set start now the other error we were getting here was related to the fact of our grid so it said align items and spacing are not valid things here for our grid oh maybe i have container equals true i don't know where i would have done that container equals true let's try this container equals true can we just look for container okay container here container here hmm okay it's saying something about container equal true let me look into this and then i will be right back all right so very silly error here just a typo so if you go to line 39 you see i had cannot tinner it should be container like that and then that should fix our ui so again line 39 change that to container rather than the typo that i made although i'm sure you guys would have fixed that anyways okay so let's press join call and now notice that it joins now the join uh button is not disappearing which we need to fix but we can see that our menu buttons or whatever you want to call them controls at least they're they're showing up nicely now if we press leave that does work because we fixed that so let's do a few more changes here so let's go to app.js and let's make it so we only see this button if we're not in the call right so rather than saying waiting to join call let's just put the button right there there we go that will have fixed that error for us now what we need to do is make it so we actually see our videos now i am actually certain that the video is appearing i know that seems like a lie because you can't see it but it's because we haven't set the height of one of the divs that i remember i forgot to do so if we go actually i don't think it's here no it wouldn't be in controls i believe will be in video call we have the container height equal to 100 we have this height equal to 95 but if we go to app.js notice how we did not set the height of this div so what we actually need to do here is to say style equals and then height colon and then this should be 100 okay so if i do this now i believe this should work for us could be incorrect but let's try this so if i press join call let's see okay i can see my webcam turning on and there we go i can now see myself on the screen so notice how i'm taking up the entire screen when it's just me in the call right so this is very good we've actually done a lot of what we need to do now if i stop the video notice it it turns off right and if i stop the mic then you would stop hearing it now the thing is uh you can actually test if the mic is working by joining in another tab which is exactly what i'm going to do so what i'm going to do here is just copy this go to another tab here and paste it local host colon 3000 and you'll see now when i join this that another thing will pop up so when i press join a call you'll see now there's two of me right and notice that the one on the left is mirrored in a different way than the one on the right the reason for that is when it's showing you yourself it's different than when it's showing it to someone else right kind of like looking in a mirror so you can see like how it's it's all kind of you know wonky and weird and like you can do stuff like that anyways that's because the one on the left is you like if i do this notice how it shows a black screen but then if you go over here then we can see other two people okay so now what i'm going to do is just show you if i stop the camera here and i go back here notice it's just showing me now the reason it's just showing me is because here i stopped the camera and so since i stopped the camera it's not showing the other person because their camera is off so let's join from another tab so when i join another tab just press join call notice now it's going to show two people because one person's camera's off if i go here it's showing three though the reason it's showing three is because there's three people in the call and this is my camera which is off now if i turn this back on and i go here you can see there's three people now let's see what happens if i join again so if i join one more time so we join a fourth time uh okay it's showing up still in the grid this isn't what i wanted to happen actually i'm gonna see how to fix this in one second um okay let's join one more time though just test this out okay so if we join a fifth time now it's showing five people okay so something is going wrong a little bit that we need to fix so let's leave the call you don't actually have to press leave call you can just you know manually leave and it should work but regardless hopefully you guys are happy with this at least so far because that's pretty cool and that took us a long time to make okay so let's fix this let's go to video.js and let's fix our spacing here for this grid so i am a little bit confused why it's not showing us the correct spacing here i think i may have messed something up here so i'm just going to reference some of my other code have a look at this and i'll be right back ah okay so i have found the issue here one missing bracket always seems to do it okay so i need to put this bracket here at the very end so i had i had three brackets here when there's supposed to be another one here and so like the math which is incorrect here on set grid spacing so that's why the grid spacing was all messed up okay so i think that was all i needed to fix actually trying to think if there was anything else uh but i think that's it for now okay so let's go back here and let's join the call okay give it a second shows me okay let's join again uh oh press join call okay there we go now we see two people we're just gonna have to test it with four people let's see if it works okay join there's three of us okay join and always we gotta have to press join call and now notice how the grid goes down right so now notice how it's showing more people and obviously as you expand this you're going to see more of each person because it's cropping the camera as you're like resizing the window right if i go really small you can see obviously not the most responsive design in the world but at least it shows everybody okay let's just join one more time just because i know you guys want to see my face again in the grid here okay there you go all right let's join a sixth time and boom there you go now you can see six of me and obviously you know you can stop your camera right and then if you go here there's only five people in the grid and while you guys can mess around with this as you please okay so let's close all of these just leave leave leave leave and leave beautiful okay so now that we've done that i want to show you how we can connect this application to a public url that anyone can access because right now we can only do this on our local area network if i'm not connected to this network and i try to access that well it's not going to work okay so remember i was telling you that we need to download ngrok that's what we're going to do now so go to the internet search ngrok link will be in the description by the way and just download this now if you already download this that's great but you're going to press get started for free it's going to obviously download for your operating system this is going to download a zip folder now what you need to do is you need to take the file out of the zip folder there's going to be a file it's called ngrok.exe inside of the zip folder take it out drag it somewhere else easiest place to put it to your desktop you can put it wherever you want okay then what you need to do is you need to navigate to the directory that you have this file in from your terminal or from your command prompt so a little shortcut on windows here if you open up windows explorer and you type cmd into the path that you want to open so see i'm on my desktop right i'm on my desktop if i go here and i type cmd it's going to open up a command prompt that is in my desktop so you can see that i have i'm on desktop right users tam desktop that's the path obviously you guys probably know how to change directories using cd so you can do it that way too but anyways what you want to do is just get into the directory where you have this ngrok file not the zip folder the file it could be the same directory but you got to take that file out of the zip folder so now what i'm going to do is i'm going to cd into agora because my file is somewhere else and now inside of here i think i can do this you can see that i have the ngrok.exe file now dur just tells you all the files and directories that are in the current directory and so i have ngrok.exe so what you're going to do here is you're going to type ngrok dot exe but before you type dot slash actually yeah we'll see if that works dot slash ngrak.exe you're going to type http and then you're going to type 3000. now what this is going to do is it's going to give you a public url that points to your computer's port 3000 and so that means that anyone else can access your web server which is running on port 3000 that's why i'm typing 3000 because that's where react is running uh from this url so let's press enter and okay dot slash is not recognized as an internal external command if you're on mac or linux you can do that if you're on windows you just type ngrok.exe http space 3000 or whatever port your react apps running on and then what you're going to see here is it's going to give you these two forwarding addresses right i think they're actually just the exact same so what you can do now is you can copy this url okay and make sure you take the https one actually you need to do this on https if you do this on http it's not going to work you need https uh just remember that see how this expires in two hours that's what i was talking about the expiry you can just restart the command after two hours and you'll get a new url but this one's gonna you know expire after that mount so what i'm gonna do now is go to my web browser and i'm going to paste this okay so when i paste this you can see brings me to my website right so this is a public url anyone can access this give this to anyone friends family whatever do it from your phone and press join call it's going to ask you to allow this because it's a new url so i'm going to allow it and there you go see working totally fine now even if i go to localhost so i go localhost colon3000 and i join the call here you're going to see that this works so even though they're on two different urls it's the exact same thing because this url is just pointing to localhost so that's what ngrok does and that's really all i need to show you that's pretty much going to conclude this video so obviously here you can disable the microphone turn on the camera blah blah and yeah i guess that's really all i needed to say okay so yeah that's going to conclude this video right here i apologize that this was kind of all over the place but that's just you know what happens when you work on a really large project like this hopefully this got you guys up and running with agora and got your react video webcalling application working this was a really fun project for me to work on and i'm happy i was able to share it with you guys so one last thank you to agora for sponsoring this video let's actually head over to their website here this is a really cool platform as you guys saw we're able to do all of this stuff for free i didn't pay for this they didn't give me like a higher level account or anything like that uh the documentation is actually really good and as i was saying you can create so many different cool things right live streaming video call voice call recording realtime messaging you can look at all the analytics so if i go to my dashboard here which i'm on and i go to products and usage you'll see that you can see exactly how many minutes you've used uh your hd full hd 2k 2k plus resolution video whatever and then you can see in like what channels and stuff and there's more um what do you call it analytics that you can look at as well just kind of giving you an idea that this is what you can do on the platform all right so that is going to conclude this video i hope you guys found this helpful if you did make sure to leave a like subscribe to the channel and one last thank you to agora for sponsoring this video