in this video I'll show you how to write a Python program that simulates the gravitational slingshot effect now this is the effect that happens when spacecrafts get near planets what happens is they have an existing velocity and acceleration and then the gravitational pull of that planet depending on the mass and the distance actually makes it so they can kind of slingshot around the planet there's a lot of famous scenes in movies where they actually use this to their advantage and this is definitely something that is calculated by the spacecraft and all of the engineers really cool simulation doesn't take that long to build it's actually not overly complicated just a few very simple physics equations that I will break down for you and with that said let's dive into it after a quick word from our sponsor today I'm sponsoring my own video to tell you about my brand new software development course which is especially designed to help you land a job not only do we teach you all of the skills you need to be a great front end backend or devops engineer and you can pick which one you want to be we also connect you with a network of employers that are looking to hire you as soon as you graduate the course the reason they do that is because we run you through the best possible curriculum we test you every step of the way through proctored exams and final Capstone projects and we set up your resume we help you get interview ready and employers actually pay us to interview you because they know you're such great candidates this course is an absolute GameChanger I've been working on it for a very long time and what happens is you'll go through a software development fundamentals course taught by me and then you'll pick a specialization in front end backend or devops taught by an industry expert for example Kyle from webdev simplified is the frontend instructor and he has a fantastic course which will literally make you the top level candidate for any Junior frontend position this is a game changer I hope you guys like it and you can check it out from the link in the description all right so let's spend a second here breaking down exactly what's going on in this simulation and talking about the steps we need to take to actually code this out first of all all of the code for this will be available in the description so if you don't want to code it out feel free to just grab that from GitHub that will also include the different assets that I have here like the little planet and the space background now the way I've set this up is that we can click the mouse and kind of place an object and then we can choose the launch trajectory and the relative kind of velocity of that object so we can test this out from many different areas now you'll see that what ends up happening is if I kind of shoot in a straight line here not really close to the planet we get very minimal effect and we're pulled slightly to the right that's because we're kind of far away from the planet and the gravitational pole is not that strong however if I'm very close to the planet like this you can see that I almost immediately get launched right into the center of it and that's because the gravitational force is very high you probably learned this in something like a grade 10 physics class if you didn't don't worry I will break down the equations there fairly straightforward but what we need to do here is make it first of all so we can launch this little object that's going to be the first step launching it in some direction the Second Step will be adding this planet and then calculating the force that's being applied to our object as it moves around the planet and gets closer so that's what we need to do again that's going to involve being able to launch the object which we'll do first and then we need to actually adjust the object's velocity uh and its movement based on the location of the planet and the gravitational force this will be an intermediate Python tutorial not anything crazy complicated but I am going to assume that you have some understanding of python with that said let's go ahead and dive in all right so I've just cleared my file here and I'll just kind of start with the setup step so for this video we'll be using pame now pame is a 2d Graphics library in Python great for simple simulations like this if you want to learn more about it you can check out tons of videos on my channel don't worry if you don't know it though I'll explain everything you need in this video it's quite simple however the first thing we need to do is install py game to do that we'll open up a terminal like the one I have here in vs code and type pip install and then pame if you're on Mac or Linux you may need to do pip three install pame go ahead and run this it should install that package for you now many of you have issues with this pip command if that's the case I will leave two videos on the screen that will show you how to fix this for both Mac and Linux and to install pame on your system once we have pame installed that's pretty much all we need to do other than grabbing these two images here now you don't need to use the images but I'm going to recommend you do because it looks quite a bit nicer so you can grab these images by clicking the link in the description and downloading them it should bring you to my website which will just automatically download the files for you if you don't trust that link well obviously you can trust it but if for some reason you don't want to click it then you can just go to GitHub and you can download them from there all right so we have an empty python file here open in vs code we have pame installed and we're going to start writing some code first we're going to import the pame module and then we are going to import the math module we then going to go down here and initialize the pame package or module like that now what I like to do is start by setting up a bunch of constant variables that we'll be using throughout the program they may seem abstract right now but we'll be referring to them constantly as we go through the rest of the code so just give me a second here and let's code some of these out the first thing we need to do is Define the width and the height of our window so we'll say width comma height is equal to 800 comma 600 now you can adjust this if you want but this is a pretty standard width and height that should work for pretty much all monitors and devices next we're going to set a window now the window is going to be where we draw all of the objects on P game now this is referred to as a surface but since this is the window surface I call it a window okay so we're going to say py game. display. setor mode and inside of here we're going to pass a tupple that contains the width and the height of our window okay so what we've just done here is initialized a new pame window where we'll be drawing all of our content that contains uh or sorry has a width of 800 and has a height of 600 you can adjust those if you want next we'll just set a caption this is kind of like the title of the window and for the caption we can just say this is going to be a gravitational slingshot effect and it looks like I spelled all of those words quite incorrectly so we'll use my spell check here gravitational is that correct is that how you spell that um gravitational there you go I am apparently not very good at spelling okay there you go don't roast me in the comments too hard guys I'm better at coding than I am at spelling okay now that we have the display set up we'll set up a few constants for the different objects we'll be using a few colors some stuff like that and then we'll move on to actually creating the main Loop for our program so we're going to need to have a Mass for our objects because the gravitational effect is actually relative to both the distance and the mass so what we're going to set is first the mass of our planet I'm going to call this 100 and next we're going to set the mass of our ship now our ship is just going to be those little objects the kind of red dots right you can make an image if you want for them but I'm just going to go with the circle for now so we're going to say the mass of our ships is five we're going to set a gravitational constant this is essentially the force of gravity or the effect you're going to feel so if you want more gravity you would increase this if you want less you would decrease it and I'm just going to make this five for now we're then going to set an FPS this is the frames per second that our simulation is going to run at I'm going to run this at 60 if you want to speed it up you increase it if you want to slow it down you decrease this few more ones we're going to need here I'm going to say my Planet uncore size is going to be 50 so it's going to be the rate radius of my Planet uh we'll leave it as size for right now and then we're going to have an object size same thing radius of our object this will be five lastly we're going to have a scale for our velocity which is going to be equal to 100 you'll see why we need that in 1 second okay so now we have these next thing we're going to do is just take these two images here and import them into P game so we're able to draw them I know a lot of set up right now but in a second we'll write some code that we'll use all of these variables so we're going to say BG standing for background is equal to py game. image. load now this how you load an image now if the image is in the same directory as your main python file what you'll do is simply write the name of the image so in this case it's going to be background. jpeg okay if you're using a different image make sure you put the corresponding file name here you can see I have background jpeg so that's why I'm calling this background. jpeg now if this was for some reason inside of some folder say I had something like images here and some images there I could write SLB background. jpeg or I can use something from the OS package which I'll quickly show you here which is path. jooin so if you want to join a directory with a file name you can do os. path. jooy the directory name and then the file name like this and it will create that path for you and allow you to load that image now if the image is not in the same directory as this uh file you're going to have difficulty loading it so I recommend just make sure all of your images are in the same root directory where this main python file is okay in this case it's just a directory on my desktop okay we loaded our background the next thing we need to do is load our planet image so I'm going to say planet is equal to py game. image. load and I'm going to load Jupiter which is this specific planet. PNG now the issue here though is that when I load these images you see they're quite large for example this background. jpeg is actually a 6000x 4,000 pixel image now that's going to be too large for us to display and it's going to look all distorted on our screen so what we're going to do is transform or change the resolution of the image uh we can do this to scale by knowing the aspect ratio or we can just set it to any scale that we want so what I'll do here is actually say py game. transform. scale and then I'm going to put the image first as my uh first argument and the second argument is going to be a tuple with the new desired size of this image now for this image I'm going to go with the size of 800x 600 or we should really use our variable variables here which is the width and the height that's because this is going to be our background image so I want my background image to be the same size as my window there you go next we're going to do the same for our planet so we'll copy this again P game. transform. scale first argument is the image second argument here is going to be the size that we want now we have our planet size here and this is representing the radius of our planet so what I'm going to do is say Planet size multiplied by two and then Planet size multiplied 2 now in case you haven't realized this by now uh the first is always the width the second is the height or the XY when we eventually get to that point okay now the reason I'm multiplying my Planet size by two is because this is meant to act as the radius so I would need to create the image to be double the size of the radius because that's kind of the diameter and the X and Y direction right hopefully that makes a bit of sense but that's why I'm doubling the planet size to two here for my Planet image perfect lastly we'll Define a few colors that we need so we're going to say white is equal to a tupple and this tupple will be 255 255 255 which is white this is an RGB color code right next is going to be red red is going to be 255 0 uh for RGB you have red first green and then blue if you have zero for the other ones and kind of some value here you're going to get some shade of red in this case it's the most red we can get because 255 is the maximum value for RGB zero is the minimum next we're going to have blue blue is going to be 0 0 255 fairly straightforward okay if you wanted black you would just have 0 0 0 no C at all when you want white you actually mix all of the colors together that gives you white in RGB okay so now we have all of our constants and all of our initial setup we can remove that OS module what we want to do now is just kind of see this pame window and be able to just interact with p game very simply before we start actually launching these objects around the screen so to do that we're going to create a function this function will be called main now what we'll do is just put pass in here for now and we'll go down to the bottom of the screen and set up kind of this initialization which will call the main function so we're going to say if underscore underscore this is two underscores here otherwise known as Dunder name is equal equal to main again two underscores main two underscores then we will call Main now what this line does right here is it only calls this function if we run this python file directly now that's opposed to if we were to import some code from this python file don't need to go through that a ton but you always want to have this kind of in the main line of your program and this will call some function or something that initializes the code again you do that because you only want this to run if this python file is ran directly not if code is imported from another python file okay so inside of Main here what we'll do is we'll create a w Loop now A W Loop will act as our game Loop whenever we're working in pame we need some Loop that's running infinitely that's checking for all of the different events and doing all of the rendering and drawing on the screen so what I like to do is create a variable here called running and make this equal to true and then I'm going to say while running like that and then inside of this while loop here is the main Loop which is kind of the event Loop and handles all of the stuff that might occur now what we need to do in our main Loop is we need to make a way to ex the loop right we don't want to have an infinite Loop so the way we can do that is we can write a for Loop here and we can say for event in py game. event. getet now what this is going to do here is Loop through all of the different events that are occurring from pame and then we can check the event and see if it's equal to a specific one like pressing a key pressing a mouse pressing the x button for example so I'm going to say if event. type is equal to pame Dot and this is going to be quit in all capitals then we're simply going to say running is equal to false okay so all this means here is if we exit out of the window so if the event. type is quit then we're going to set running equal to false that's going to exit out of our while loop and the last step we need down here is to say py game. quit Okay saying py game. quit story is just going to actually close that pame window for us so it will exit kind of cleanly return all right I know that was quite a bit of code but let's run the code right now and just check out what our window looks like and then we'll move on to some of the more fun stuff so I'm going to say Python main.py and you see that we get our gravitational slingshot effect I can hover over X when I click it it closes the window and we are good to go okay so let's clear go back to our code and start writing some more stuff so now what I would like to do is Implement a clock now a clock is going to essentially regulate this Loop and make sure it doesn't run too fast because right now the loop is going to run based on the clock speed of our computer if you have a really fast CPU it's going to run faster than if it's on a slower computer but we don't want that we want the simulation to be the same no matter what type of Hardware we're running on so we are going to set a clock we're going to say clock is equal to py game. time. clock notice this is above the W Loop and right at the top of the while loop here we'll say clock. tick and then we'll put the FPS which is the variable we defined right here now when we do this it essentially makes it this wall Loop can run at maximum 60 times per second or however much our FPS is right so in this case it's 60 could be 30 could be less than that just regulates the speed of the loop okay great now that we have that I want to draw the background onto the screen so we get something a little bit more meaningful so there's a bunch of different ways to draw in P game but to draw an image we write the name of the window or the surface that we want to draw on in this case it's the window we write blit now blit I don't actually know what that that stands for just puts an image onto the screen so we're going to say wind. blit we're then going to put the name of the image asset which in this case is BG right because we have BG is equal to this and then we're going to do comma and we're going to put a tupple with the location of the top leftand corner where we want to display this object now in py game we use a 00 coordinate system top uh starting sorry at the top leftand corner of the screen that means 0 0 is the top left so imagine VSS code here is the pame window right where this kind of explore icon is and my mouse is at the top left that's 0 0 that means as I go down my y increases as I go to the right my X increases okay so for my image I want it to fill the entire screen so I'm going to draw this at 0 0 and that's where we will begin drawing the image starting at the top leand corner of the image and drawing down into the right hopefully that makes sense but this will draw the image now all we need to do is say py game. display. update now now the way that pame works is we essentially can paint or draw a bunch of things to the screen in any order that we want and as soon as we update it actually takes whatever is there and puts it onto the screen okay so we have to constantly update every time we want any of the drawing changes we made to appear That's so that we can do a bunch of drawing without rendering it first and we can render all of the drawing at once not sure if that makes sense to you but we would do all of the drawing operations then update all of the drw drawing operations sorry then update Etc okay so let's go and run our code and see if our beautiful background appears and we got an issue here it says py game. time has no attribute clock that is because clock needs a Capital C my apologies let's make that correction and run our code and notice that we get this Starry space background appearing looking great okay so let's exit out there now what we want is to be able to launch objects on the screen now there is a few ways to do this uh but we're going to go with well obviously my Approach now the way that we'll do this is we will say objects is equal to an array and this will be an array that stores all of our individual objects now really the process will be we press our Mouse down and that'll be the location we're going to start launching the object from then we need to determine the velocity and direction to launch the object in which will be another mouse press so it's two mouse presses to create the object that means we first need to determine okay what mode are we in right are we selecting the velocity or are we choosing the location of the object so we're going to Define a variable here called temp object position okay and this is going to be equal to none now this variable will store any object that we've placed onto the screen that we've not yet launched great so now what we need to do is go inside of our event Loop here and we're going to start by grabbing our Mouse position so we're going to say our Mouse position is equal to P game name mouse. getor pause this will give us the XY coordinate in a tle of the location of our Mouse now we want that because if we press onto the screen we're going to store that location in this variable so we now know where we're launching the object right so what I'll do is go inside of my event Loop and I'm going to check to see if someone has pressed the mouse down so I'll say if event. type is equal to pame Mouse button down that just means I pressed any of the mouse buttons doesn't matter left middle right then what I will do is say my temp object position is equal to and this will simply be the mouse position because that's where I pressed it now there is a few other things we need to do here but for now what we can do is we can go ahead and actually draw the location of the mouse or of this temporary object so we see it on the screen so what I'll do is after I blit so after I draw my background then I do all of my other drawing Okay the reason I draw my background first is this essentially draws over top of anything that was already on the screen so whenever you draw the background you're essentially clearing the screen by putting the background on top of it and then you can draw anything else on top of the background before you perform the update so what we'll do here is we'll check okay if the temp object position exists then what I want to do is actually draw this onto the screen so we can see it so I'll say pame do draw do Circle because we're just going to draw a circle for this we're going to draw this on the window which is the first argument to this function we're going to pass the color we want to draw in this case we want to draw red and then we're going to pass the location now the location of the middle of the circle which is what we're passing here that we want to draw is temp object position where we pressed our Mouse down right remember this is going to be a tupple containing the x and y coordinate so if we wanted to break it down here we could do something like 101 that would mean we draw it at 1010 but in this case we want to draw at the temporary object position next we need to pass the uh radius that we want to draw this object now the radius is going to be the objector size okay and that's it that's going to draw a circle for us if we have something to draw great so let's go ahead and test this code out now and see what we get and notice that as I press around the screen my DOT moves to wherever my mouse is and there we are okay all right so that is step one the next thing that we need to do now is calculate the velocity and the direction in which we want to launch this off object so what we now need to kind of check is okay if we're pressing down or if we have this object placed on the screen sorry we want to draw a line between our Mouse and the object so the user can see kind of the relative power they're going to be applying in the direction they're going to shoot the object so what we'll do is we'll actually go here and we'll say if the temp object position exists meaning if we've placed that first object we're going to draw a line between the object and the mouse so so we're going to say p game. draw. Circle or sorry not Circle what am I saying here doline we're going to pass the window we're going to pass the color which is going to be white and then we're going to pass the location of both sides of the line okay so the two points on the line that we want to draw between so we're going to pass the first position being the temporary object position and the second position being our Mouse position right and then we can pass a thickness of the line in this case we'll go with two pixels so now if we run let's bring this up here you'll see when I press down I get this line okay now I can change locations obviously by clicking but it's kind of showing me the uh the line around the object now that's coming from the center and if we didn't want to see it inside of the object we just change our drawing order so we go here and put the circle after the line and now notice that when I draw the line is kind of coming out of the circle Circle it's not on top of the circle which I think actually is probably going to be preferred okay that's great now that we have that what we actually need to do is on that second press we need to figure out all of those different components right okay what is the x velocity what is the Y velocity we need to start moving the object which is obviously a bit more complicated so what we're going to do now is set up a class and this class is going to represent our object or kind of our spacecraft this will be where a lot of the logic will lie for actually moving the object around and having that gravitational Force so we're going to say class spacecraft like this and instead of here we're going to do an initialization now for our spacecraft we need to know the starting X and Y position on the screen we need to know the Velocity in the X Direction and the Velocity in the y direction if you're unfamiliar with velocity that's just speed okay now whenever we have a 2d graphic system we have speed in two directions or two components the X Direction horizontal and the y direction vertical okay so we need to break it into those two components lastly we need the mass we'll use that when we actually apply or sorry calculate the gravitational force now we need to make these all attributes of the object we're going to say self.x equal to X self.y is equal to Y self. xcore Vel is equal to XV self. Yore Vel is equal to oh I put this in the other way okay yv or v x like that okay not sure why I wrote it that way but that fine and then we'll go self. mass is equal to mass and in fact this is actually going to frustrate me so let me change this to vorx and velore Y and there we go okay so that's everything we needed to initialize here for our spacecraft now all I'm going to do is I'm just going to write a draw method and the draw method will just draw this object on the screen in a second we'll start moving it but for now we'll just draw it so we're going to say Define draw and we're going to say self and we're going to actually that's it we don't need to take anything else in to draw we're going to say pame do draw do Circle we're going to draw this on the window now this is using a global variable not necessarily the best practice inside of a class but in this case that's fine and we're actually going to have the exact same thing that we had down here pretty much uh just up here so we're going to say wi red center of the circle is going to be self.x self Y and what else do we need to do here we need to pick the radius which will be the OBG uncore size like that so not OBG obj all right last thing I'm just going to round off these values here using the int function int is just going to strip any decimals we might have just because we'll be doing some calculations that could have some pretty large significant digits and I want to make sure that we don't get any errors trying to render floats here so instead we're just kind of drawing in not sure if you know what I mean there but if we had like a large floating point value that could mess with pi game so we're just going to convert these to int values by doing that okay so now we have our spacecraft so now the point is that we want to actually create a spacecraft object every time we kind of launch one of these objects so once we have our temporary object position right once we've set that we're actually going to check if temporary object position when we're pressing the mouse button down now if we already have a temporary object position that means we've already placed an object down so now instead of placing another one what we'll do is we'll actually launch this object so I'm just going to put an else here so to launch the object we need to figure out all of the things that we have for our spacecraft so the X Y and then the velocity and the X Direction velocity in the y direction and the mass well we know the mass but really these two are the ones we're looking for the Velocity in the X and the Velocity in the Y so what we can do for now at least is we can say that our TX tore y standing for temporary position X temporary position Y is equal to Temporary object position when I do that it will give me the X and the Y out of this tupple uh that's kind of a Shand in Python that you can use now what we'll do is we'll create an object so we'll say object is equal to and this will be a spacecraft instance for the spacecraft we're going to pass our TX and our Ty and for now we're going to pass 0 and zero for the X and Y velocity and then last last L here we're going to pass the mass which is going to be the object or the ship Mass sorry now we're just going to take this object and we're going to append it into objects we'll just get a little bit of the flow working here and then we'll deal with some of the more complex math which I think we should kind of do all at once so we're going to say objects. append object like that and now that this object is inside of this object's array what we'll do is we'll actually Loop through the objects array and draw all of the objects onto the screen eventually we'll be moving them as well but one step at a time so after this down here I'm going to do another for Loop and I'm going to say for event in or sorry not for event for obj in objects I'm simply going to say obj do draw now that's because every single one of our objects is a spacecraft instance which has the draw method so I simply call that on all of the objects and now they get drawn last thing after we add the object we'll sent we'll set sorry the temporary object position to be none we do that because now we're indicating okay we just went through that twostep process right we place the object we figured out kind of how fast and what angle we want to launch it at so now let's get rid of this because we already put it in the objects array and then we have the ability to place another object going forward again not fully finished yet but that is the gist of it okay let's just have a look at this for now and see if I made any mistakes so when I press and go here notice it stays on the screen and the line goes away that means that this is now an object in that object's array and eventually it will be moving same thing here and you can see that I can place all of these various different objects onto the screen okay so now comes the hard part moving the objects now we can begin by moving the objects based on their X and Y velocity but shortly we actually want to calculate how they should be moving based on the interaction with the planet which we'll need to draw on the screen uh and a few other things for now though let's go in spacecraft and let's define a move method now for the move method we're going to have self and we're going to take in a planet for now I'm going to make this equal to none but eventually that will be actually the location of the planet so we know how to calculate the gravitational force for now all we actually need to do is simply say our self.x is plus equal to the Velocity in the X Direction and the self Y is equal to the self dot V in the Y Direction that's it right we have a velocity in both X and Y Direction so we simply apply that to our X and Y and move in that direction boom that's move now we can very easily move our objects by going down here and saying OBG or obj do move perfect now if I were to go here instead a velocity of something like 1 one you'll see that we start moving diagonally on the screen so if I go here and run this uh and I place my object here we start moving it looks like it's moving in the direction I set but it's really just moving one pixel down and one pixel to to the right every single frame at a 45° angle okay there you go we now have objects moving now we want to move them in the direction of our Mouse what I'm going to do here is hop onto my drawing tablet and give you a brief explanation of how we can actually figure out what direction they should move in welcome to physics with Tim we're on the Whiteboard and we're going to get started right away so let's start with what information we have well we have our object and for object we have an X1 y1 coordinate we have some line this line goes to some point this point is our Mouse okay for our Mouse this is X2 and Y 2 now immediately let's figure out what information we can derive using these two points well first is the overall velocity okay now the velocity here V is actually a vector the reason it's a vector is because it has a direction scalar values don't have a direction Vector values do so we have some value V which is really the distance between these two points and that's the relative velocity that we want to launch this object at however that's not really helpful to us we need to figure out what direction to move in X and in y so what that means is we need to expand this to a right angle triangle and we need to figure out the Y component and the X component of this velocity now to do that using two points is actually very straightforward we just simply need to take the difference of those two points okay now the order in which we do this is important to make sure we move in the right direction uh but in this case what we can do is we can say Y is simply equal to Y2 y1 and X is simply equal to X2 minus X1 now that's going to give us the uh component for x and for y of the Velocity right or the direction that we want to move it that's it that's literally all we need to do to get those velocities all right so I think that's actually going to wrap up this whiteboarding session I just wanted to quickly show you kind of with the right angle triangles why we're doing this again we have V which is really the distance of this line we don't actually care about V what we care about is the components of V which are the X and Y velocity so we can get at doing that we don't need any complex trigonometry however we will in a second need some trigonometry which I will show you later all right so back onto the computer we go and we're going to start implementing this now I actually would prefer to make a function here that can create this object for us uh so that we don't need to worry about it ourselves so what we're going to do is have a function define correct create underscore ship cuz we're going to create a rocket ship right we're going to take in the location for the ship to start and we're going to take in the mouse position now inside of here we're just going to start by breaking our components so we're going to say TX Ty Y is equal to location and we're going to say MX mcore y standing for Mouse X Mouse Y is equal to Mouse now all we need to do is calculate the difference in these right so we're going to say the Velocity in the X direction is going to be equal to MX we're going to do the mouse X because this is the direction we want to go in minus and this is going to be the tore X now we just need to make sure we do the same for y so we're going to say v y is equal to mcore Yus tore y now we have the velocities that's fine what we want to do now is say that our object is equal to a spacecraft that starts at the position TX tore Y moves v x Vore Y and has a mass of the ship mass and then we will return our object okay that's it for creating the ship so now we'll go down here and rather than saying object is equal to this we're going to actually get rid of that we're going to say object is equal to create ship we're going to pass the temporary object position as the location and the mouse pause as the mouse and there you go we now should actually have a ship that starts moving now let's see if I did this correctly or not we're going to run the code we're going to go here and you see that we launched now we're moving extremely fast in whatever Direction I launch it in uh but I will show you how we can actually scale that down because right now we're moving at the velocity which is just equal to the distance of the line obviously we don't want to move that quickly instead what we actually want to do is we want to scale down the movement a little bit so what we're going to do to do that is just go here to our velocity X and Y we're going to put a set of parentheses and we're going to put divide div by the velocity scale and what this is going to do is just divide this by 100 so it's going to make it 100 times slower which is going to be more reasonable for this simulation okay so that's it just divide that by the scale go here now and notice I can move in this direction I can move here I can move whatever Direction I want Works in any quadrant that we're trying to move in okay so that's all great however what's going to happen is all these objects are going to be moving off the screen and still being handled and eventually our CPU is going to get bottlenecked because we're going to have so many objects on the screen so what we want to do is just ensure that we clean up our objects whenever they move off the screen so we're going to go here to our objects and we're just going to make a simple check here to determine if they're off the screen so we're going to say off undor screen is equal to and we're just going to check all of the different ways that could be off the screen so left right up and down so to do that we will say if the OBG OBG I keep saying OBG obj obj dox is less than Z Z or the obj doy or sorry let's do X again is greater than the width of the screen or the object doy is less than zero or the object doy is greater than the height of the screen okay so then we'll say if off screen then we can say objects. remove our object now just to ensure this doesn't cause any issues while we're iterating through this array we're just going to actually make a copy here that we will iterate through so when I do this it just simply makes a copy of this array or this list and now when I remove something from this list it doesn't affect this iteration because we're iterating through a copy not the original list okay so now we'll just see that these objects get removed we actually don't need to test that that is fine okay so now we know how to launch objects next thing we're going to do here uh is look at creating the planet and then moving around the planet there's actually not a lot more code that we need to write right uh but there is just a bit of math that we're going to go over so what I'm going to do now is make another class called planet now we're going to Define our initialization we're going to take in a self an x a y and a mass for the planet now we're just going to Define these here as attributes so self.x is X self.y is y and self. mass is equal to of course our Mass next we're just going to have a draw function so we're going to say Define draw and we're going to take in self and screen and actually we don't need screen uh we can just leave this like this and we'll say screen or win. blit and we're going to blit the planet image okay because we're going to draw the image for our planet right and now where do we want to draw this well I'm actually just going to take int of the self. exposition uh and actually I don't think I need to do that sorry just second guessing myself here I'm going to take self.x minus the planet underscore size and self. Y minus the planet underscore size okay so I'm drawing the planet at this XY position which will ideally be in the middle of the screen well we'll set that but the reason I'm doing this is because I'm drawing a rectangular image but I want to draw it as if it was a circle because if we look at this image here it's a circle right so what I'm going to pass to planet is I'm going to pass the center uh position of where I want to draw the image now when I pass the center image or the center of the image sorry I need to adjust that coordinate because what I'm passing here is the top leftand corner of the image so since my image has a size of Planet size times 2 if I take self.x so whatever the position is and subtract half of the width of the image and half of the height of the image that means we draw it perfectly centered at the XY position hopefully that makes a bit of sense but that's why we need to do that okay so now that we have Planet we're just going to create a planet Planet here and we're just going to draw every flame every frame sorry so we're going to say planet is equal to Planet let me just look at what uh coordinates we want here well actually this is simple we'll just take width an integer divide that by two we'll take height an integer divide that by two and then we'll pass in here our planet mass now all we need to do is just draw our planet you can decide when you want to draw that I will draw it at the very end so nothing is over top of it and I will simply say planet. draw so now we'll get a planet in the middle of the screen let's give that a test and you see that we now have our planet we can start launching objects now obviously they can kind of Hit the planet and they can go through them so next thing we'll do is make it so if we collide with the planet they disappear and then we'll add the gravitational pole okay so let's just quickly do if they collide with the planet so if they collide with the planet there's a few different ways we can do this but the easiest way is just to check the distance so since we're colliding with a circular object we can simply see if the distance between our point and the planet is less than the radius of of the planet if that's the case it means it's inside of that planet okay so to do that we're going to say collided is equal to the math. square root and we're going to take the square root of the object dox minus the planet. X to the exponent 2 plus the object doy minus the planet doy to the exponent 2 if you're not familiar with this this is the distance between two points formula okay so you simply just take the difference in the x coordinates raise the exponent two plus the difference in the ycoordinates and then you take the square root of that and that gives you the overall distance this is similar to how you would find the hypotenuse of a triangle given the two side lengths now we're going to say if offscreen or collided uh then we will remove and that reminds me that I need to actually make this a condition so I need to say this is less than the planet size which is the radius of the planet okay so actually we can do less than or equal to if the if our distance St is less than or equal to Planet size it means we're inside of the planet which means we've collided so we will remove the object from that object's list so we no longer draw it quickly test this out okay shoot at the planet and let's see if it comes out the other side it does not because it collided and we removed it all right last step now is the most fun part which is the gravitational force let me hop onto the drawing tablet again and explain to you how we'll do this welcome back to physics with Tim now let's dive in immediately so we have our planet and we have some rocket ship we know that we have some gravitational pull or effect from the planet to the ship now the factors that are going to affect this are one the mass and two the distance okay now the distance is going to be the more important factor I mean mass is going to have a big impact as well but the further away you are the less uh gravitational pull you're going to have towards the planet and this is is inverse proportional and you're going to see in the equation the distance has a massive effect on how much gravity plays a role so we already know the mass of the two objects well we actually need to calculate to figure out the force or the acceleration to the planet here is going to be the distance so what right now what we're looking for is distance D now once we have that distance that's going to tell us the force or the amount of pull on this object towards the planet as a vector in that direction now you'll see what I mean in one second but let's start by writing out kind of the main thing we want to figure out here which is the force so the force gravitationally between two objects is equal to the following that is going to be the gravitational constant G * M1 * M2 divided by and this is distance squared okay so we already know Mass one and we know Mass 2 those are the mass of the two objects we know the gravitational constant we can just make it up or we can use a real one and then we need need to figure out the distance and then Square it now to figure out the distance we just take the distance between two points on a line we already know how to calculate that so I'm not going to show that to you right here so now let's imagine we've figured this out okay so we actually find force right we get it boom we figured it out now what we need to do though is we need to take this force and we need to turn this into acceleration because the force doesn't actually tell us the speed it tells us the number of Newtons right or whatever the unit ends up being killing Newtons or whatever those newon units are um that's kind of the pull from the object but we need the acceleration so to calculate the acceleration we simply take the force and we divide this by the mass of the object that is moving in this case the mass of the object that is moving is going to be the what is this the spacecraft okay so take the force divided by the mass that gives us acceleration however this is acceleration in a direction this is a vector acceleration okay now the reason it's Vector is because again we have some planet we have some space shuttle and we have some pole here and and we've just figured out a but what we need to do now is break that into its two individual components the ax and the a y now how do we do that well we're using right angle triangles and we know that we always need at least two pieces of information to solve for every piece of the right angle triangle right now when we're looking at this triangle the only thing we have is a however this triangle is the exact same as the two points that we're calculating this acceleration four that means that I'm actually able to solve for this angle Theta once I have that angle Theta I can then figure out the two components using my right angle triangle of my acceleration I know this might be going a little bit fast for you guys but I know a lot of you already know this so what we'll do to start is we'll solve for angle Theta now to solve for angle Theta we use the right angle triangle that we began with that allowed us to determine the distance between the two points so the right angle triangle uh where should I draw this let's draw it over here looks something like this okay you have Planet down here you have object up here and we know these points right we have X2 Y2 and X1 y1 again we want to figure out y we simply take Y2 y1 want to figure out x x is equal to X2 X1 so we now have the opposite and the adjacent side of the triangle we also have the acceleration so now that we have the opposite and the adjacent side we're able to solve fora now to solve for that we're going to take the inverse tangent of one over the other now the way I remember this in case any of you like this shortcut is something called so I'm butchering this C TOA okay now you might laugh at me for the shortcut but I've remembered this for many many years this stands for S is equal to opposite over hypotenuse cosine is equal to adjacent over hypotenuse and tangent is equal to opposite over adjacent now what we need to do is we need to figure out okay what piece of information do we know in this case we know the opposite and we know the adjacent side so what we'll do is we'll use this tangent formula so we write out tangent so this says tan of theta is equal to opposite over adjacent what do we want to solve though we want to solve for Theta because we know opposite and adjacent side so how do we solve for that well we have to take the inverse tangent or the arc tangent So Tan inverse of opposite over adjacent okay that's all we need to do when we take that that is going to give us the Theta or the angle now that we have the angle we can now use the angle to solve for the components of our acceleration so I'm let me just clear the screen here and remember that this is what we have we have our right angle triangle okay we have Theta now we know what that is and we have acceleration and we want a y and a X how do we solve it well to solve for a y we simply can write out our shortcuts again right so so C TOA I'm doing this off the top of my head by the way so excuse any uh you know delays here but I want to solve for what is it let's start with a y now a y here is the opposite from this angle so I need to find where opposite exists but I know the hypotenuse now that's sign so what I'm going to do is I'm going to say the S of theta is equal to the opposite which is a y over a I know a and I know Theta so I simply take s of theta multiplied by a and that gives me my a y now I'll just shortcut this for you I can now do the same thing with cosine to solve for my ax okay so that is how we've now gone from actually figuring out the acceleration in the X and the Y Direction that's it that's what we need to do I know seems a little bit complicated but I promise promise you it is not overwhelming let's dive into the code here just a few lines and then we will have this project done all right so let's dive into the move function here and Implement what I just showed you first thing we need to calculate the distance between our self and the planet so we're going to say math.sqrt if we could spell this correctly don't know what's happening with my typing now to do that it's going to be self.x minus the planet dox okay to the exponent 2 plus self.y minus the planet doy to the exponent 2 we now have the distance we now want to calculate the force well the force is going to be our gravitational constant G times self. mass times the planet do mass divided by the distance to the exponent 2 we've now calculated the force now now we want to calculate the acceleration well the acceleration is simply equal to the force divided by the mass of the object we're moving which in this case is our self next we need to figure out the angle right so we have the acceleration now we need angle Theta and then we can break it into components so the angle is the math. AR tangent of the planet doy minus the self.y and the planet dox minus the self.x now we do it in this order because this is going to give us the direction uh correctly that we're moving in okay if you did it self.y uh first like you swap these around I would actually give you the reverse Direction so just make sure it's this direction okay that's how we have to do this for the arc tangent now we have the angle and the acceleration and now that we have that we can calculate the acceleration in each Direction so we're actually going to say uh acceleration X is equal to the acceleration multipli by the math. co of the angle and we'll say the acceleration in the y direction is equal to acceleration multiplied by the math. sign of the angle giving us acceleration in both directions now acceleration is applied to Velocity so we're going to say self. velocity X plus equals acceleration in the X Direction and self. velore Y plus equals the acceleration in the y direction now we just keep this the same and we take whatever our new velocity is because again we're accelerating right we're changing the velocity it's either going up or down and we're applying that to our X and to our y okay that's it now you'll see that the entire simulation will just work and everything will be good so let's go ahead and run this and see what we get uh and we got an issue none type object has no attribute X okay that is because we forgot to pass Planet here to move so we'll go down here to where we have move and we'll simply pass in our planet and now that should work my apologies let's try this now and we got another issue math. arc tangent takes exactly one argument two was given uh okay ah so the reason here is that I actually wanted to use the arct tangent two function which just simplifies this operation a little bit for us so just make this A1 2 all right let's see if this is the last one third times a charm right come on and there you go we can see that now this is applied we can launch as many objects as we would like if they do end up colliding with the planet they will disappear obviously if you launch them kind of slowly like this they might end up hitting the planet they could get quite close and not hit it really really kind of cool when you actually look at this and see how this works and imagine if you're dealing with Real World objects obviously not everything here is you know the best numbers you could potentially use but but you can mess around with this and change it quite a bit uh and see kind of how the gravity is affected based on the different masses based on the velocities based on uh what do you call it here the gravitational constant that you choose I think this is a really really cool project and if you stuck around until the end give yourself a pat on the back for completing it with that said I'm going to wrap up the video here this was a long recording for me if you guys appreciated this please leave a like subscribe to the channel I do have a few programming courses programming expert. blockchain expert.i if you guys enjoy those or want to check them out please do from the link in the description I always appreciate that and with that said I will see you all in another YouTube video