hey guys and welcome back to another neural network tutorial now in today's video what we're gonna be doing is talking about text classification with tensorflow 2.0 now what I'm gonna be doing just to be full fully transparent with you guys here is following along with the actual official tutorials on the tensorflow 2.0 tutorial now I find that these are actually the best in terms of like kind of a structure to start with to understand very basic neural networks for some pretty simple tasks I would say and then we're gonna stray away from those we're gonna start using our own data our own networks our own architecture and we'll start talking about kind of some of the issues you have when you actually start applying these to real data so so far you guys have noticed and I've seen some comments on already that the data is really easy to load in and even preprocessing it like in the last one we just divided everything by 255 I gots really simple in the real world your data is definitely not that nice and there's a lot of stuff that you need to play with and modify to make it actually usable so anyways we'll follow along this one for today and essentially the way that it works is we're gonna have movie reviews and we're just gonna classify them use their as either positive or negative now what we'll do is we'll just look at some of the movie reviews and then we'll talk about the data we'll talk about the architecture using stuff to predict some issues might run into and all of that now I don't know how many video parts this is gonna be I'm gonna try to record it all at once and just split it up based on how long it takes but with that being said enough talking let's get started so what we're gonna do obviously is start in our file here and again this is gonna be really nice because we can just steal kind of the data from cara's so what we'll start by doing is just importing tensorflow as TF we're gonna say from tensorflow import Chara's and then we're going to say import numpy as NP now before I start I ran into a quick issue when I was actually trying to do this just following along with the official tutorial and that was that the data that I want to grab here actually doesn't work with the current version a numpy that comes with tensorflow it's on their github as an issue but anyways to fix this what we need to do is install the previous version of numpy so to do this what I'm actually gonna do is just say pip I think I do like pip numpy version or something because I want to see what version it is incorrect it's say pip version number I want to find what version it is and then just go down to that version okay so I found the version of numpy what we're going to do now is actually just install the correct version a numpy to make it work for this tutorial now this should be fine for everything going forward and if you want to install the most recent version of numpy after doing this go feel free but to do this all I'm gonna do is just say pip install and then numpy equals in this case one point one six point one I believe the version we're using right now is 0.3 at least at the time of recording this but just change it to this version and hopefully in the future they'll fix that issues so that we don't have to do this but anyways I'm going to install that yeah you're gonna have to add two equal signs and I already have this installed so that should just not do anything but you guys just make sure you do that I'll leave the command in the description now after we do that what I'm gonna do is load in the data go say data equals in this case Kara's data sets dot I am what is it I am DB now I believe this stands for like some something movie database I don't really know but anyways that's what the database is and we're gonna do the same thing we did in the previous tutorial which is just split this into training and testing data so to do that I'm gonna say train underscore data train underscore labels comma and then in this case we'll say test underscore at data and then test underscore labels equals in this case data load underscore data and we're just gonna add one thing in here which is num underscore words equals in this case ten thousand now the reason I'm doing this is because this data set contains like a ton of different words and what we're gonna actually do by saying num words equals 10,000 is only take the words that are the 10,000 most frequent which means we're gonna leave out words that usually are only occurring like once or twice do it the entire data set because we don't want to throw those into our model and have things like be more difficult than they have to be and just have data that's kind of irrelevant because we're gonna be comparing obviously movie reviews and there's some words that are only in like one review we should probably just omit them because there's nothing to really compare them to in other data sets any I hope that kind of makes sense but that's not super important we're gonna be numb words equals 10,000 it's also shrinks our dad a little bit which makes it a bit nicer now what we're gonna do next is we're actually gonna show how we can display this data now if I start by actually just showing you like the Train underscore data and let's pick like the zero with one so I guess the first one and I print this out to the screen so let's go if I could get 2pi 'the python and i guess in this case we'll have to do I probably should just type this to start tutorial to when this actually prints out probably going to take a second here just to download the data set you can see that what we have is actually just a bunch of numbers now this doesn't really look like a movie review to me does it well what this actually is is integer encoded words so essentially each of these integers point to a certain word and what we've done just to make it way easier for our model to actually classify these and work with these is we've given each word one integer so in this case maybe like the word the integer one stands or something the integer fourteen stands for something and all we've done is just added those integers into a list that represents where these words are located in the movie review now this is nice for the computer but it's not very nice for us if we actually want to read these words so we have to do is find the mappings for these words and then find some way to actually display this so that you know we can have a look at it now I'll be honest here I'm just gonna take this from what they have on the tensorflow website on how to do this typically you would create your own mappings for words with your own dictionary and you just already have that information but fortunately for us tensorflow already does that so to do that I'm gonna say word underscore index equals in this case IMDB dot underscore word underscore index like this now what this does is actually going to give us a dictionary that has those keys and those mappings so that what we can do is well figure out what you know what these integers actually means so when we want to print it out later we can have a look at them so I'm gonna say now is word underscore index equals in this case K and then we're gonna say what it could be plus three for K the in word underscore index thought items so I might have been incorrect here this doesn't actually give us a dictionary this just gives us like tuples that have the string and the word in them I believe and then what we're doing here is we're gonna say instead of C sorry this should be B my apologies is we're gonna get we're just break that tupple up into K and V which stands for key and value and the key will be the word the value will be obviously the integer yes that's what it will be and we're gonna say for word items and index will break that up and then we're just gonna add a bunch of different keys into our data set now the reason we're gonna start at +3 is because we're gonna have actually one key or three keys that are gonna be like special characters for our word mapping and you guys will see how those work in a second so I'm gonna start by just saying word index and in this case I'm gonna put in here pad we're gonna talk about this in a second so don't worry if you guys are kind of like what are you doing right now I'm gonna say word index and in this case starts equals 1 I say word underscore index in this case I believe it's like UNK yeah that's correct when I say UNK equals 2 now UNK just stands for unknown and I'm gonna explain all this in a second but it's easier just to type it out first and we're gonna say word index in this case inside this tag I'm used we're going to say equals 3 so what I'm doing essentially is all of the words in our training and testing data set have like keys and values associated with them starting at 1 so what I'm doing is I'm just gonna add 3 to all of those values so that what I can actually do is assign my own kind of values that are gonna stand for padding start unknown and unused so that if we get values that are not valid we can just assign them to this essentially in the dictionary now what I'm gonna use for padding you guys will see in just a second essentially it's just so we can make our all our movie sets the same length so we'll add this what's known as pad tag and we'll do that by adding 0 into our actual movie review list so that we're gonna make each movie review the same length and the way we do that essentially is if they're not the same length so maybe one's a hundred maybe ones 200 we want all of them to be 200 hundred length movie lists will for what we'll do is we'll just add a bunch of padding to the end of it to make it length 200 and then obviously our model will hopefully be able to differentiate the fact that that is padding and then we don't care about the padding and that we shouldn't even bother really like looking at that right alright so now what I'm gonna do is add this kind of complicated line here just to I don't even know why they have this to be quite honest this is the way the tensor flows has decided to do they're like word mappings but apparently you need to add this reverse underscore underscore word underscore index which is equal to dictionary and then in here we're gonna say value comma key for key comma value in word underscore index I believe that's correct and what this is gonna do actually sorry not word index word index dot items what this is gonna do is okay I understand now now that I've typed it out you just swap all the values in the keys so that right now we actually have a dictionary that has all of the like the keys first which is gonna be the word and then the values where we actually want it the other way around so we have like the integer pointing to the word because we're gonna have our data set that is gonna contain just integers like we've seen here and we want these integers to be able to point to a word as opposed to the other way around so what we're doing is just reversing this with a reverse word index list just our dictionary sorry essentially that's what this is doing here all right now that we've done that the last step is just to add a function and what this function will do is actually decode essentially all of this training and testing data into human readable words so there's different ways to do this again I'm just gonna take this right from the tensorflow website because this part is not super important and I'd rather just you know do it quickly than spend too much time on it so we're just gonna say return blank string dot join and in this case we're gonna say reverse word index dog gets in this case we're gonna say I comma question mark now what this does essentially if you don't know how the cat works is we're gonna try to get index I which we're gonna define in a second if we can't find a value for that then what we'll do is just put question mark and that's which is a default value which means we won't crash we're having like a key error in our dictionary I'm gonna say for in this case I in text I don't know why where I have text typed I think I might have messed something up here so one second here ootek sorry is the parameter my apologies so anyways that's what this is gonna do is just going to return to us essentially all of the the keys that we want or the human readable words my apologies so now what we'll do is we'll simply just print out decode review and I'm just gonna give it some test status let's say test for example zero and I guess we're going to do test underscore data it doesn't really matter if you train or test data but let's just have a look at test out of zero and see what that actually looks like so let's run that assuming I make any mistakes we should actually get some valid output in just a second this usually takes a minute to run up I am DB is not defined what did I type here I typed that as data my apologies so where we say IMDB which is right here we just need to replace that with data in my other file I called it IMDB so that's why I made a mistake there but let's run that again and hopefully now we will get some better looking output so let's wait for this and see dict object has no attribute items this needs to be items classic typos by Jim one more time third time is a charm hopefully let's see and there we go so now we can see that we're actually getting all of this decoded into well this text now I'll allow you guys to read through it but you can see that we have these kind of keys that we've added so start which is one which will automatically be added at the beginning of all of our text and then we have these un Ches which stand for unknown character essentially and then we don't have any other keys in here but say for example we had like some padding we had added to this we would see those Pat tags as well in here it's not essentially how that works if you'd like to look at some other reviews just mess around with kind of the values and the index here throw them into decode review and then we can actually see what they look like now something to note quickly is that our review our different lengths now I've talked about this already but let's just compare two reviews to really test that I'm not just making this up so I'm going to say test underscore data why I have a capital here tests underscore add to zero so the length of testament or data is zero and the length of let's try test underscore data one just to prove to you guys that these are actually different lengths which means there's something kind of fancy we're gonna have to do with that padding tag which I was talking about there so let's go into text class classification let's go see MD and then Python in this case tutorial to PI now I guess we're gonna get that output again which is probably what's causing this to just take a second to run you can see that we have like 68 and we have length to 60 now this is not gonna work for our model and the reason this doesn't work is because we need to know what our inputs shut shape sorry and size is gonna be just like I talked about before we define the input nodes or the input neurons and the output neurons so we have to determine how many impo neurons there's gonna be and how many output neurons there's gonna be now if we're like we don't know how large our data is gonna be and it's different for each what do you call its entry then that's an issue so we need to do something to fix that so what we're gonna do is we're gonna use this padding tag to essentially set a definite length for all of our data now we could go ahead and pick the longest review and say that will make all of the reviews that length but what I'm gonna do is just pick an arbitrary number in this case we'll just do like 250 and say that that's the maximum amount of words we're gonna allow in one review which means that if you have more than 250 words in your review we're just gonna get rid of all those and if you don't have 256 words or 250 words or whatever it is we're just gonna add these padding tags to the end of it until eventually we reach that value so the way to do this is again using those fancy tensorflow functions now if you don't like these functions and like what these do for you and how they just kind of save you some time go ahead and try to write them yourself and if you want help on how to do that feel free to reach out to me on discord or in the comments or whatever but I personally just use them because it saves me a quite quite a bit of time in terms of like typing out the function and I already know how to do a lot of what these functions do so for me it doesn't really make sense to just read type them out when I can just use these kind of fancy tools so what we're gonna say is we're gonna redefine our training and testing data and what we're gonna do is just trim that data so that it's only at or kind of normalized that data so it's at 250 words so to do that I'm gonna say train underscore data equals in this case Kara's got preprocessing no idea if that's how you spell it we'll have to check that in a second dot sequence dot pad underscore sequence so preprocessing I think that's correct I guess we'll see and then in here we have to define a few different parameters so what we'll first do is we'll give that train underscore data we're gonna say value equals which will be the pad value so what we add to the end of in this case our numpy array to pad it per say and in this case we'll just use this pad tag so we'll say literally word index pad so let's copy that and put that there we're gonna say our padding equals in this case post we just means we're gonna Pat after as opposed to before we also could pad before but that doesn't really make too much sense for this and then what we'll say is max in this case Len equals and then you pick your number that you want to make all of the values equal to now tensorflow did like 256 I'm just gonna do 250 and see if this makes a difference in terms of our accuracy for the model and I'm literally just gonna copy this and change these values now to test underscore data instead of Train underscore data and this will do the same thing on our other data set oops didn't mean to do that so test underscore date sounds like that so quick recap here because we are at 17 minutes now essentially what we've done is we've loaded in our data we've looked at our data we've created the word mappings essentially for our data so that we can actually figure out what at least integers mean we've created a little function here that will decode the mappings for us so we just pass it a word review that's integer encoded it decodes it and then it we can print that information out to the screen to have a look at it what we've just done now is we've done what's called pre our data which means just making it into a forum that our model can actually accept and that's consistent and that's what you're always gonna want to do with any data that you have typically it's gonna take you a bit more work than what we have because it's only two lines to preprocess our data because Cara's kind of does it for us but for the purpose of this example that's fine all right so now that we've done that it's actually time to define our model now I'll show you quickly just to make sure you know you guys believe me here that this is working in terms of preprocessing preprocessing our data so it's actually gonna make things the same length so we'll say train underscore data test underscore data let me just print this out to the screen so python tutorial 2 again we're gonna get these integer mappings but we'll get the length at the end as well and another error of course we need to add an S to these sequences again my apologies guys on that classic typos here so anyways I had pre process processing sequence we need sequences and now if I run this you can see that we have a length of 250 and 250 so we've kept that consistent now for some oh I'm printing I don't know why this is printing toot oh it's because I'm printing it here and then I'm printing it here but you guys get the idea in that we've now made them actually the same size so let me remove these print statements all of them so we can stop printing trained out of 0 up here as well and now let's start defining our model so I'll just say model down here is a little comment just to help us out so what I'm gonna do now is similar to what I've done before except in the last one you might have noticed that the way I define my model was I'll show you in a second once I finished typing this so we did Kara's dot sequential and then what we actually did was just had a listing here that had all the layers that's fine you can do that but in this case we're gonna have a few more layers so what we're gonna do actually is add these layers just by doing the model dot add it's precisely the same thing as before except instead of adding them in this list we're just gonna do it using this method so now we're gonna say Kara's dog layers dot in this case embedding and I'll talk about what these layers do in a second it's really 10016 and then we're just gonna actually copy this four times and just change these layers and be kind of parameters as well so now we're gonna say global average pooling 1d and then do that and then we're gonna add a dense layer here and another dense layer and change these parameters so we'll say dense and we'll say in this case 16 will say activation equals Lulu or rectify linear unit whatever you guys want to call it and then we'll do down here one and activation equals direct fire linear unit as well actually sorry not really really we're gonna do sigmoid my apologies so now we'll actually talk about the architecture of this model and how I came up with picking these layers and well what these layers are well what we want essentially is we want the final output to be whether the review is good or whether the review is bad I think I mentioned that at the beginning of the video so what we're actually gonna do is just have either that like we'll have one output neuron and that neuron should be either 0 or 1 we're somewhere in between there to give us kind of a probability of like we think it's like 20% 1 80% 0 something along those lines now we can accomplish that by using sigmoid because what it will do again we've talked about the sigmoid function is it'll squish everything so whatever our value is in between 0 and 1 which will give us a nice way to test if our models actually working properly and to get it the value that we want