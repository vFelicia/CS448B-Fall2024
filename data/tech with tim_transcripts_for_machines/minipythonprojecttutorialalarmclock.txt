foreign I'll be walking you through a mini python project where we will create an alarm clock slash timer now this will be fairly straightforward but I will show you how to play sound through Python and how you can do a fancy thing with the terminal which involves clearing what you've already printed and then printing something over top of it so you kind of get a live countdown timer you know 10 9 8 7 Etc and it looks a little bit better than printing out like a ton of lines of code probably something that's interesting and that you guys have not seen before regardless that's what we're going to build if you are interested in getting better at Python and becoming a software engineer check out my course programmingexpert.io and there'll be a link in the description it has hundreds of practice questions all kinds of projects hours upon hours of lectures and videos I know you guys get a ton of value from that last thing I do have a blockchain and web 3 course as well it's called blockchain expert if you're interested in that space then check that out from the link in the description and with that said let's get into the project alright so just give you a super quick brief here on what we're going to be doing essentially we're going to ask the user to input some kind of time you know five minutes six minutes 30 seconds whatever it is we're then going to give them a live kind of countdown timer and then as soon as that timer or alarm goes off we're going to play a sound now that means the first thing we need here is some kind of sound effect so we can actually play that when the alarm goes off so to get a sound effect you can just download one on your own you can pick one that's on your computer and just drag it into the same directory as where your python script is so in my case I have a folder open on my desktop and inside the folder I have my alarm clock.pi file and then alarm.mp3 which is a sound effect I downloaded from this link which I will leave in the description so whatever sound effect you want just make sure it's in the same directory as the file uh that you're writing your python code in okay next we need to install a module which is going to allow us to play this sound effect so I'm going to open up my terminal here or command prompt whatever you want to refer to it as I'm going to type the command pip install play sound so this is the name of the library module that we're going to be using to play the sound okay PIV install play sound I already have it installed if for some reason that doesn't work for you you can try pip 3 install play sound if that doesn't work try python hyphen M pip install play sound and if that doesn't work try Python 3 hyphen M pip install if none of those work I will leave two videos on the screen that show you how to fix this pip command okay at this point I'm going to assume you have play sound installed and what we can do now is import this module so we're actually going to go to the top of our program and we're going to say from play sound import play sound now this here is a function that we can use uh to play a sound so we can simply say play sound we put the name of our sound which in this case is alarm.mp3 notice it matches the file name here and since it's in the same directory all I need to know is the name of the file and then if I run my code it will start playing this sound this one is pretty aggressive it's also fairly loud hopefully it's not going to annoy you guys too bad but that is how you play sound very very easy okay next I'm going to import a module here called time we're going to use time to kind of regulate the time so we have you know one second for each iteration as we're doing this countdown clock perfect we're then going to make a function so we're going to say Define alarm this is going to take in a number of seconds and this is how long until we will play that kind of alarm sound effect okay the first thing we're going to do inside of our function here is we're going to say time elapsed is equal to zero we're going to need a variable to keep track of well how much time has elapsed and then we're going to have a while loop and we're going to say well the time elapsed is less than our seconds we're going to do whatever is inside of here perfect so the first thing we're going to do is say time don't sleep one now this means wait for one second very straightforward just pause the code right here wait for a second and then continue obviously we need to do that because if we don't have this kind of regulation of time then the alarm is just going to go as fast as it possibly can as fast as your computer can run it and while we're not actually going to be waiting 20 seconds 30 seconds Etc okay next we're going to say time underscore elapsed plus equals one okay and now we want to figure out how many minutes are remaining and how many seconds are remaining and then print that out to the screen so you can do this in whatever kind of format or order that you want but in my case I'm just going to take the number of seconds I'm going to figure out how many minutes are in that and how many seconds are in that and then print that out if you want us to do hours you know weeks days months Etc feel free to go ahead and do that in my case I'm just going to do minutes and seconds so first I'm going to say time left is equal to the seconds minus the time elapsed because seconds is how many seconds we want to run this for time elapses well how much time has elapsed so we subtract those and that is how much time is remaining then we're going to figure out the number of not hours the number of minutes so we're going to say minutes left is equal to the time left integer divided by 60. integer division is two forward slashes and that's going to give you the integer component of division so for example if we had a 125 seconds like this and we integer divide this by 60 then we're going to get 2 because 60 evenly divides 125 two times all right very good next we're going to say seconds underscore left is equal to the time left and then this is going to be modulus 60. now the way the mod operator Works which is the percent sign here is it gives you the remainder after division so again same example we have 125 seconds if we do the mod operator here by 60 that is going to give us 5 because 60 goes into 1 8 125 two times sorry so that uses 120 seconds and then we have a remainder of 5. okay so that gives us the minutes and seconds left now we can print those out so we're going to say print we're going to use an F string available in Python 3.6 and above so you do F either lowercase or uppercase doesn't matter you do a string and then inside of the string you can use curly braces and inside of the curly braces you can just put a variable so I can do minutes colon and then seconds and now it's going to print however many minutes colon however many seconds are left great lastly we can go here and we can call the alarm function and let's just test this out with say 10 seconds to see if everything's working before we go a little bit uh further and kind of make things look prettier all right so let's run this here run the code and notice that we will get an issue named minutes is not defined okay that's because I need to put minutes left and seconds left so let's quickly fix that bug and then rerun okay nine eight seven six five Etc just gonna count all the way down however notice that this looks a little bit weird right we don't want to have like zero zero zero one instead we'd want to have something like zero zero zero one that's what we're used to seeing right or you know 20 minutes and five seconds if we want it to be formatted like this so how do we fix that well there's actually a fancy thing we can do in Python to automatically format our numbers we can go to our variable here which is a number we can put a colon directly after it and then we can put 0 to D and this stands for make this two digits and Pat it with a zero so if it's already two digits fine we leave it the same but if it's only one digit we add a leading zero that's what this is going to do so I'm going to copy that and I'm going to put that on seconds left as well and now just to quickly show you if I run the code here notice that we now get our formatting with our leading zeros Perfect all right so now that we've handled our formatting the next thing we need to do is kind of clear the terminal and make it so everything is on the same line and it looks like it's constantly updating kind of the same countdown timer so to do this we're going to use two sequences of characters which are known as ansi characters or like commands or Escape sequences whatever you want to refer to them as essentially these are invisible characters that when printed to the terminal will manipulate the terminal in our case it's going to clear something or delete something but it could change the color of something it could make something bold underline italicizes all kinds of styles and interesting sequences and characters you can print that manipulate the terminal so I'm just going to show you two of them here related to clearing but if you want to look at more of them feel free to look them up you're looking at ansi I guess it's characters or Escape sequences so we need two of them the first one we're going to have is clear and this is just going to clear the entire terminal screen so that it's empty we don't see anything else now to do this we're going to do backslash zero three three then this is going to be a square bracket then two and the capital letter j the next sequence we want is going to be clear and return and this works a little bit differently but this is going to return the character to or sorry return the cursor to the home position so that when we print again it's going to print over whatever was currently there whatever was there before so now this sequence is zero three three square bracket and then H okay so what we're going to do is start by just clearing the entire terminal right once we clear the entire terminal then we're going to print out this and then the next time we print it we're going to clear return to the home position and kind of print over it I know it seems a bit strange but let's start by just looking at one of them so I'm going to go here and I'm going to say print clear and we'll just do clear okay the first one so now notice when I run my code that it clears the terminal and then it starts printing stuff out so that's fine but it's printing everything on a new line which we don't want so what I can do is stop this and now if I use my other sequence I'm going to go here in my F string and I'm going to print clear and return before I print all of this and now Watch What Happens okay nine eight seven and look it's on the same line and it's just updating the value okay so we cleared the entire terminal then we cleared and returned to that home position and kind of printed over what we had before so hopefully that is making a little bit of sense I know it's kind of weird how these uh Escape characters function but now we have like a decent timer being updated on the screen so now the last thing we need to do is once our alarm is finished or the timer is up we need to play the sound so we're going to say play sound and then it's going to be alarm dot MP3 and we need to ask the user how many minutes and how many seconds I want to set the alarm for so let's go ahead and do that we're gonna say minutes is equal to input how many minutes to wait or whatever you want to say here okay now I'm just going to convert this directly into an integer I'm going to assume that they give me a valid int if they don't that's going to crash the program but again we're just going to assume that's fine then we're going to say seconds is equal to int input how many seconds to wait like this and now what we can do is we can say total underscore seconds is equal to minutes multiplied by 60 plus the number of seconds that they said and then we can pass here total underscore seconds and if we want to make this a little bit nicer we can have some text here it says alarm will sound in and then the minutes and the seconds remaining okay so we're clearing and then we're going to print the alarm will sound in and then it will update whatever this value is and keep going downwards okay so that is pretty much our entire program let's try this out here guess we're going to run how many minutes to wait let's wait zero minutes and how many seconds let's wait 12 seconds okay alarm will sound 11 10 9 8. goes on and then hopefully we should hear the sound okay so let's give this a second two one and for some reason I'm not hearing the sound okay ah the reason I'm not hearing the sound is because my speakers are off but I think you guys probably heard it in the recording because of the way that I have things set up and there you go everything functions it plays the sound and we are good all right so I think with that said that's gonna wrap up this video that's all I had to show you for this Python alarm clock hopefully you got some value from this you learned a little bit about these Escape sequences how to play sound Etc if you enjoyed make sure to leave a like subscribe the channel and I will see you in the next one foreign