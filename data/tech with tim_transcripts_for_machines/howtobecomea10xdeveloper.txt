foreign so as you may know there's a big difference between being a good programmer and being a productive programmer a good programmer can meet requirements and write High good quality clean code and a productive programmer can just do that a lot faster now I experienced this when I worked at Microsoft as an intern as an intern I wasn't trusted to write a ton of code I wasn't given a ton of tasks to complete and I didn't end up being very productive meanwhile there was experienced members of my team who had worked there for 20 plus years who would pump out Mass amounts of code in a single afternoon I would go and look at their commits and look at how much code they were actually writing and it was easily 10 20 30X the amount of code I had written in like an entire month so I asked myself how do you become a productive developer and now about two years later the tables have kind of turned and I'm the lead engineer at a startup and I am pumping out Mass amounts of code and I want to share with you how I do that so first let me tell you what is meant by a 10x developer which is what I'm kind of talking about in this video now this is kind of a debated topic it's hard to argue someone actually writes 10 times the amount of code as someone else but the idea behind calling someone a 10x developer is that they write 10 times the amount of code as other members on their team now I'm sure you've all experienced this in any field that you work in there's just people that are way faster and way more productive than other people and they're not necessarily better they just do things a lot quicker so step one on my list here to becoming a 10x developer and writing code much faster and just being much more productive is to really prioritize what it is that you're doing now to give you a great example of that I've prioritized the sponsor of this video this video is sponsored by Intel they've made it a big Focus to save developers time particularly when it comes to cross architecture workloads culminating in their one API tools and libraries for artificial intelligence internet of things and Cloud projects you can transfer code from one platform to the next making for an incredibly efficient development experience click the link in the description to learn more and download it today a for free so hopefully you enjoyed that segue But continuing here with the section on prioritization now this is pretty obvious but really what I mean is to pick tasks that are going to have the highest impact on whatever you're doing now to give you an example right now I'm working for a startup and we're building a mobile app in react native now I've talked about this a few times on the channel but right now we are trying to get this in front of investors we're trying to get this in front of a lot of people so we can get feedback and we just need to have kind of a bare bones version of the app that's functioning so we can start showing it to people and getting feedback and then revising based on that so the last thing I want to be doing right now is working on small polishes or doing a ton of unnecessary tests or working on you know really optimizing all of my CSS or all of this stuff that does eventually need to get done but that right now is not important and that's going to cost me a lot of valuable time because we're trying to do this as fast as possible right so instead what I'm working on is Big features app infrastructure stuff that's going to be here forever and that needs to 100 be correct and done properly and that yeah kind of sucks to work on and is annoying and hard but that needs to get done and all of these features require a large amount of code and just a large amount of work now I'm doing this instead of doing stuff like animating Pages or worrying about a ton of telemetry and analytics or going and refactoring the code a million times to make it look perfect I'm just trying to get as much code out as I possibly can that's correct and that's tested and done properly but I don't want to go overboard and start going into a ton of polishes and kind of nitpicky finishing stuff because it's just going to cost me a lot of time and really kind of delay our development let's say cycle or timeline right so that's what I mean by prioritization now to be able to prioritize you need to have some sort of a plan or at least a minimal idea of the things that you need to get done so what I like to do here is to kind of start each day or maybe each week whatever time increment you want to pick by just writing down a list of things that I need to do and then very quickly deciding on which ones actually need to get done right now and which ones can wait till later on whether they're tedious or time consuming or they're just not important to the app so have a plan you don't need to over plan you don't need to do anything crazy but list out all the tasks prioritize them put them in an order and then start doing those tasks so moving on to the next thing that will help you become a 10x developer and this is to learn multiple programming languages Frameworks and tools and have a diverse knowledge of many different programming Concepts and Technologies now this is very important because as a 10x developer you can't be someone that needs to rely on a bunch of other developers to do something for you because you don't know a language or you don't know a framework or you don't know this specific tool you need to be someone who's confident enough to know that you can figure that out and that you can look at something for a few minutes or do a bit of research and just start working in that technology or start working in that language for example you guys can look at my YouTube channel you'll see that I work in all kinds of different programming languages all kinds of different Frameworks now I don't claim to be an expert in many of the things that I teach there that I show you on the channel but but I know that I'm good enough to figure it out and to teach you guys the basic concepts I know that if there's a Code base that's in say flutter for example I can get in there and very shortly I can get used to it and start writing some good quality code now am I gonna be as good as the flutter Master who's been doing this for 10 years probably not but I'll be good enough to write code that's up to standard and that we could push into production right and that's the idea here yes obviously it is good to be an expert in specific areas and some companies do need that but in a lot of scenarios if you want to get a lot of stuff done you need to be able to work in many different areas of the code base without relying on someone else or without having to ask someone to kind of assist you or help you now of course asking for assistance can be good if it's something or it's going to take you a really long time to figure it out but hopefully you understand what I'm saying here by having a diverse perspective of many different languages many different Technologies and Frameworks you have the confidence to know that you can solve pretty much any problem and even if it's something you're not familiar with you'll go and you'll figure it out because that's what you do as a 10x developer so moving on to the next thing that will help you become a 10x developer and this is to take advantage of Automation and to use your Dev tools now this is a bit boring no one likes to do this but it's something that saves an extreme amount of time in the long run especially if other people are coming into the code base so I'll just go through a few quick examples of what I mean here first obviously it could be writing automated tests now you don't want to get carried away with this because you can over test that's definitely a thing but having solid automated tests that you can rely on gives you confidence you don't need to constantly be manually testing all of these features and saves you a significant amount of time especially if you're working in a code base for a long period of time next adding correct type hints or type annotations now if you're in a language like typescript it's really easy to just add in any right oh you have a complex type you have to write I'm not going to bother with that I'll just put any I'll remember what the type is going to be trust me don't do that in the long run this saves you an extreme amount of time I cannot tell you how many times I've gone and reference my types files or gone and looked at specific types because I couldn't remember what was being accepted by this parameter or variable or whatever it may be continuing setting up continuous integration and deployment very very important you want something that's going to be automatically checking for example all of your commits maybe automatically deploying something to a website or moving it to another code base whatever it is that you're going to need you want to spend the time to set up these things yes they're annoying yes they take you a fair amount of time but again in the long run it saves you a ridiculous amount of time continuing you want to set up stuff like linters that's automatically checking for say unused variables or spelling mistakes or all the other things that linters do that I won't talk about in this video next you want to set up your extensions maybe you want to set up some keyboard shortcuts and you want to learn how to use your IDE and all of the dev tools that you have properly so that you can really spend the most amount of time coding and avoid having to do all these tedious things that can be automated for you lastly I'll say that spending some time writing automation scripts is very useful for example in this app that I'm working on we have a bunch of small games as some of you may know from one of the previous videos that I posted and rather than kind of writing this Advanced documentation that explains how to add a game into the main app I just wrote an automation script that essentially runs you through the steps so it says okay what's the name of the game what's the description what's the uid of the game blah blah goes through all the stuff that's required and you just type it into this kind of command line tool and it generates everything for you now that took me two three hours to write but now that's gonna save myself and everyone else that's working in the code base an extreme amount of time and even better now I don't have to explain to someone how to do something I can just say hey just go use the script it's already been done if if the script works then it's done properly right so spending some time to automate those type of tasks very important and setting up some commands that maybe automatically run every time you do a deployment where every time you push something to GitHub again definitely worth the time and something I would recommend you do alright so moving on to step number four and this is to manage your energy levels or what type of tasks you're doing at certain parts of the day so this is going to be different for everyone but I know for me that I usually have a solid four or five hours of coding until I get fatigued and until I kind of don't want to do complex tasks anymore or at least they take me a lot longer for me right in the morning probably around 9 to 10 a.m after I kind of finish a workout or after I eat breakfast and wake up that's when I'm most productive from the morning up until probably 1 or 2 p.m I write a lot of code I get a lot of stuff done and any complex task doesn't really bother me that much because I'm kind of in my Peak energy Zone however after that as we drift kind of into the afternoon and the evening I'm a more I'm more fatigued I've done a lot of stuff already and I don't want to try to take on anything that's too big or too complex and I know I'm going to kind of lose focus more easily so what I do is I make sure that I handle or I take care of my really complex tasks in the morning and I save all the easy stuff for the end of the day so something like styling for example that can be tedious and annoying Wing but it's pretty easy for me to do so I would do that at the end of the day something like reviewing pull requests again that's something that's pretty easy to do I would save that task for the end of the day anything communication related that's not urgent again I would do that at the end of the day answering emails reading over stuff like that do that at the end of the day anything that's going to be pretty easy that's kind of smaller shorter tasks that are easy to knock off I don't want to do those in the morning I want to save those for a time when I don't have the energy to do something more complex so I can always be working on something the last thing I want is to only have complex tasks left and then just to be too tired or too exhausted to really make any significant progress on them and then to get halfway through it and have to start that in the morning I'd rather finish something to completion and then kind of knock off some smaller tasks in the evening right so that's kind of what I'm talking about here so think about that this is something I always try to do and have done for a very long time I save all my easy stuff for a time when I'm tired and don't want to work I put all my hard stuff at the beginning of the day when I know I have have the energy and I still have the motivation to get it done so moving on to the last tip here and this is probably one of the most important and this is to enter the Flow State now the flow state is really the state in your brain where you are completely focused and completely immersed into what you're doing all of your energy all of your thoughts are revolving around what it is that you're working on and it makes it very easy to kind of have a map at least for me of code in my mind and able be able to write just a lot of code at once really like when I'm in my flow state for maybe two hours per day three hours per day depending on kind of how I'm working and how long I write an extreme amount of code that just completely outpaces anything else I would do when I'm not in the Flow State now for me to enter the Flow State usually takes about an hour in the morning I have a coffee I kind of relax a bit I start working I start reading a few code files and then all of a sudden I start kind of really diving into a feature we're diving into a bug or diving into whatever it may be and as soon as I've been in that for a few minutes now my entire focus is on that I start building kind of a map of the code in my brain and it's very easy for me to switch between different files or switch between different areas without losing focus it's just it's all up here right I'm in the Flow State I'm I'm flowing I don't know how better to describe it and during that time I write a massive amount of code and usually it's even higher quality code than I write when I'm kind of you know in and out I'm checking my phone I'm texting you know I'm doing something else I'm going downstairs and spending you know 10 minutes whatever taking a break during the flow state is really when I'm the most productive and when I get a lot of stuff done especially the difficult stuff so that is what I have for you here now I would love to hear what your tips are for productivity and just getting more code out in the comments down below so please let me know I also want to make it clear here that I'm not at all trying to kind of boast and say that I'm just the best programmer in the world and I'm the most productive but I do notice that over the past few months and years I've really drastically increased my productivity and these are the kind of the ways that I've done that so I wanted to share those with you so if you guys enjoyed make sure to leave a like subscribe the channel and I will see you in the next one foreign