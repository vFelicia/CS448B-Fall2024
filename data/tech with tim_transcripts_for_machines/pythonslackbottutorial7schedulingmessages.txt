hello everybody and welcome to another slack bot tutorial so in this video we're going to be talking about how to schedule messages how to delete scheduled messages and how to view a list of all of the messages that we have scheduled uh this hopefully shouldn't take too long and right now i am planning on this being the last video in the series i feel like i've covered a really good kind of fundamentals of all the stuff you need to know to get started with this and the goal of all my tutorial series usually is to give you guys kind of the basics show you how a few of the things are done and then let you kind of expand your knowledge on your own and just give you a good foundation so you're not lost jumping into a new thing so anyways let me know if you guys want to see some other things i will mention that to host the bot like this you will just simply need to host a website with a domain and then run what we have going on right i mean we have a flask server this is pretty much a web server that's just running an api on it so what you can do is host this like you would host any other website set up a domain and then simply replace all of the ngrok links that we've used for development on your api with whatever the or sorry on your api dashboard with whatever your new domain is anyways we might talk about that later but let's get into it so the first thing i'm going to do since we're going to be scheduling a message is i'm going to import the date time module as well as the time delta and date time i guess sub modules or classes or whatever they are so i'm going to say from date time import date time and import time delta we're going to need to use these so we can actually set the time that we want to schedule these messages at the first thing that i'm going to do is i'm going to make a list of all of the messages that i want to schedule now we could just start with one that's totally fine as well but we also can schedule multiple so i'm going to say scheduled underscore messages equals and i'm going to make a list and inside of this list i'm going to have dictionaries that have the following keys the first key is going to be text the second one is going to be post at which means this is the time we want to post this message at and then what i'm going to do after this is i am going to say channel so what channel do we want to actually post this message in uh we'll probably have to grab this from somewhere else before i can actually fill this in but these are the keys and kind of the format i'm going to use for scheduling a message now of course you guys can clean this up to be whatever you want but let's put in two here and let's just you know write some different things so let's say first message uh let's say second message exclamation point and then for post at i'm going to show you how we can you know kind of play around with the times here and actually set the correct time so the timestamps in uh this api that we're using in the slack api i believe are in like they're called a timestamp so technically that is a way of representing time i don't really know exactly how to describe it i'm pretty sure it's in something like like milliseconds or microseconds or nanoseconds you'll have to look that up for the specifics i don't want to mislead you but what we can do to get a time is to do something like this i'm going to go inside of brackets i'm going to say date time dot now remember we imported that from up here plus time delta and inside of here what i'm going to do is put how many or how much i want to add to the current time so let's say i wanted this to happen tomorrow at the exact same time as today then what i would do is i would say days equals one and what that means is now i'm going to say okay the current date time plus the time delta so like the change in time of one day i'm going to add those two together and then outside of the brackets i'm going to say timestamp with another pair of parentheses like this what this will do is take this datetime object and convert it into a numeric time stamp that's what we need to use now i don't want to have this post tomorrow because i want you guys to see that this is working so i'm just going to say seconds and i'm going to set this equal to like 10 seconds so essentially we'll post it from 10 seconds after whenever this bot gets initialized you'll see how that works in a second but that's how we do this now i could do like seconds and then days equals one this would mean we would post tomorrow at the exact same time plus 10 seconds and that's kind of how it works and then we could do years and you know so on so forth we can add like all of the different things like microseconds milliseconds minutes all that stuff you can kind of see it popping up in the top left hand corner or right hand corner sorry so anyways let's stick with seconds 10. uh and let's now do the same thing so i'm going to copy this i'm going to put this again at post at and instead of doing seconds 10 let's do seconds 20. so then that way we can see like a little bit of a difference and for the channel we're going to need to pick a channel id now i'm going to kind of do this a hardcoded way i wouldn't necessarily recommend this but what you can do is just look for like what is it this right here so we go client we go the name of the server or of the workspace or whatever it's called here and then we have the channel id which is this so this is the channel id so i can copy this just make sure this channel id is obviously one that your bot is installed into and i'm just grabbing it from the url right so let's go ahead and put that for the channel this needs to be in a string this might not work if it doesn't i'll show you how to fix that but this is kind of my cheat for right now because i don't want to have to code something that's going to get the channel the bot is in and then automatically put it in there it's just too much work for what we're going to be doing all right so now we have two scheduled messages and i'm going to make a function that can actually schedule these messages right because that's just a list for right now so right underneath where i have the send welcome function i'm going to make another function i'm going to say define schedule underscore messages and we're going to take a list of messages what we're going to do is we're going to say for message in messages and we're going to go ahead and actually schedule the message so we're going to say client dot and then chat post message so this is the same thing that we've done before or sorry not post message schedule message that's the method that we want to use so client underscore our client dot chat underscore schedule message and then inside of here let's actually see what this error is though uh missing mandatory keyword yeah we're going to add these three keywords so channel post that and text you can see them popping up there so we'll say channel and then that's going to be equal to well message channel right because all of the elements inside of our messages list are going to be dictionaries that have these keys and we'll say text equals message channel right and then after this we will say post at so post underscore at equals message and then post underscore at pretty straight forward all right so now we'll save that and it gives us the nice formatting and now what we'll do after this is we'll actually grab the id of this posted message just because i want to return all of the ids of these messages so what's going to happen in the response body of this is it's going to tell us an id for this scheduled message now we can't reference it with the time stamp because the message is not yet posted so it actually comes up with a unique id and then we can use that id later to say delete that message change that message you know get a list of the messages whatever it may be so let's say ids equals list and then we're going to say id i guess we'll have to do underscore equals this is going to have to be equal to response so we'll say response equals that and then this will be response and inside of here we're going to get the id so i think that will work actually instead of doing that we're going to use get just in case for some reason we get an error we don't crash our bots and then we'll say ids dot append id underscore and finally return ids so this might not work i might have to look into this we'll look at that in a second but this should schedule our messages for us so let's test this out what i need to do is i need to run the app and then right after i run the app i need to call this schedule messages and in fact i might not actually i'm deliberating between whether i want to do that before or after i run the app i think it will be fine to do it beforehand so let's actually do it beforehand let's say schedule messages and then let's pass the scheduled messages so if this doesn't work going before the app is running we'll do it after i don't think it will make a difference the reason being that we actually set up the api stuff right before we run the app so we have you know slack event adapter and we have the client set up here i don't think it matters if the app's running for us to actually call this so let's give this a shot let's run our bots and we got an error time is in the past okay so that's interesting that i'm getting time in the past maybe we'll have to increment the seconds a bit more i guess datetime.now is not giving us what we expected so we have datetime.now plus time delta seconds equals 10. let's just try making this like 40 seconds and making this 50 seconds and see if there's just some kind of delay with that so let's run this and see what we get and there we go so now that works so i'm gonna have to quickly go over to the bot uh otherwise we might miss it so i will wait and then once it pops up i will be right back all right so these messages just came through we got four of them i guess like the previous run schedule messages which just came through now i don't really know what happened with that to be honest with you this won't be a problem when we're only running our app once and we know it works but i'm sending the channel id for some reason so i think i made a mistake here so let's go back to when i send these messages in this function and yes of course so channel equals message channel and text equals message channel i guess you guys probably would have seen that but that should be text so i just reran that i don't think that will reschedule the message but let me just quit this and let's change the time now just so it wasn't as long because i actually had to wait a fair amount of time for that let's make that 20 seconds and 30 seconds and i think we should be okay to do that so let's run this and we didn't get time in the past which is good i'm going to go over to slack here and hopefully we'll get that first message second message popping up i'm tempted just to wait here because i think they should come in shortly and there we go we got first message coming in first message is coming in three times for some reason and let's wait i believe second message should come in as well second message second message second message so i think the reason this is happening is just because the app is like reloading it really shouldn't be sending more than one message it should just send it once i think it's just because of the fact that if you have a look here it's like reloading the app yeah so the reason these keep coming in is just because the app keeps reloading this wouldn't happen in a production environment because we wouldn't have this debug mode equals true i can promise you it's only supposed to send one time it's just because if you have a look here it reloaded like a bunch of times so that's why it was like continually spamming and resending the message so what we really could do is remove the um scheduling messages from here and we could just call actually i don't know if that would work we'd have to leave it here but my point is just in production this would be fine we wouldn't keep recalling this because well the app wouldn't be continually kept running again if that makes any sense but anyways that is how we schedule messages so i'll show you now how we can delete a scheduled message so i guess we'll just schedule them and then delete them right after just to show you that that works so to delete a scheduled message first of all we need the ids of that scheduled message so what i'm going to do is i'm going to say all right ids equals schedule messages because we're returning all of the ids and then what i'll do is i'll write another function that can delete a scheduled message and we'll just call it the number of ids times with all those ids and we'll remove that scheduled message so to do this i'm going to say define delete underscore scheduled underscore message and then inside of here i'll take an id or we really could take a list of ids that might be easier delete scheduled messages let's say ids and we'll say for id and ids we'll need to do an underscore just because id is a keyword in python and then what we'll do is we'll say well we don't really need the response we can just go client dot chat underscore delete scheduled message and i think all we need to pass here is the channel and the id so we're going to say channel equals channel which actually we'll need here so we'll take channel as well for all of the ids to delete technically you know this could be a mistake if these ids are not in the same channel for our purpose we know they're going to be in the same channel so we can do this but if you were going to have scheduled messages in different channels then you would have to make sure you passing a different channel for each of those scheduled messages hopefully that makes sense we'll say channel equals channel and then id i think it's scheduled underscore let's see if it came up yes scheduled underscore message id is going to be equal to underscore id so this should actually just delete the scheduled message so hopefully if we run this and we call this function right after we schedule the messages we won't see anything popping up now you'll kind of just have to trust me that this is working but let's go and now say delete scheduled messages and then let's pass the ids and let's pass the channel which is going to be equal to that string that we used to schedule the messages so i will just steal it from up here so let's take that and we'll put that inside of there okay so that should be good that should delete the scheduled messages now i'm just going to ask you to trust me that that works you guys can run this on your own and make sure it does i you know what just in case let's rerun the bot and have a look because maybe i'm wrong and there we go invalid arguments all right so it's saying we were getting an invalid scheduled message id or saying you must pass a string whatever the reason for that i believe is because this id is incorrect in other words we didn't get it from the right place so i'm just going to do something here to quickly debug and figure out what this id actually is or how we can actually grab this id because it should give it back to us in this response body so i don't know exactly what is off the top of my head so i'm just going to import the pretty printer so i'm going to import p print i'm going to make a printer so i'm going to say printer equals p print dot pretty printer and then we're just going to print out the response body so we can have a look at what it actually is so let's go here and let's go printer dot p print and let's print the response all right so let's run this and let's see what we get okay and we get a response object okay so i think i might need to grab the json from that or something like that so let's go j response dot json i think that should give us the right answer here let's have a look and has no attribute json great maybe it's data i always forget what this is my apology guys guys i believe we probably used this before but let's see if it's data ah data is what we're looking for so we want the data and there we go so it says message and there should be yeah so message bot profile and then id that's the same i'm just trying to find the id scheduled message id that's what it is all right so what we'll have to do is grab the scheduled message id so to do this we're going to say response equals all of this dot data and then we're going to say response.get scheduled message id so that should be how we do it i just took an assumption last time i did this so let's run this now and see what we get and invalid scheduled message id ah interesting okay i'm gonna print out the scheduled message id and see if we're getting the correct thing here i will be back after i have a look at that all right so i can't seem to get this to work so we're going to debug this together i'm going to make the method now that will list all of these scheduled ids maybe something's going on where these ids are changing again i don't know what's wrong with this there is a lot of issues from what it seems with the slack api uh maybe that's just my misunderstanding but that id really should work right like i'm getting the scheduled message id i seen that this id is valid i know that that's correct and then i try to remove it and says no it doesn't exist well it should exist let's say define list underscore scheduled underscore messages we'll take a channel and then all we're going to do is say response equals client dot chat underscore scheduled message list and then we'll say channel equals channel and then return response dot data and i'm pretty sure the key here is messages so response.data.get messages like that i believe this is a list in fact let's just loop through it and actually just get all of the ids while we're here so let's say messages equals that and then what we can do is we can say ids equals an empty list and for msg in messages we will say ids dot append msg dot get and it should be scheduled underscore message underscore id i scheduled i think i need to do that alright so scheduled underscore message underscore id append that into ids and then return ids now not returns return and while we're here let's just print the message just have a look at this in case this doesn't work so rather than me trying to delete the scheduled messages now because clearly that's not working let's try to just list them out so let's say list schedule messages and then for the channel we will pass this and let's see what we get all right so let's run the bot and let's see none type object is not iterable interesting so maybe we're getting something wrong here so if we go list scheduled messages chat schedule messages list response.data.get looks like messages is not the key so let's print out the response dot data and see what that looks like all right so here's response.data i didn't use the pretty printer which maybe i should have kept and we can see that adds not messages it's scheduled messages so let's grab that and note here that the id is actually stored as id not scheduled id and that we have a bunch of them inside of here so let's go and modify this now so rather than where am i and i'm getting lost here list schedule message rather than messages it is schedule messages and rather than schedule message id this is going to be id all right i don't appreciate the lack of consistency there uh but that is fine so let's run this now and see what we get okay so that actually worked we listed out the scheduled ids so now let's just grab these ids and let's delete those so that they're not scheduled and then that way we can see if this is working all right so we can remove all these print statements so let's remove the print response.data let's remove the print message and now we will say ids equals list schedule messages that will give us all the ids and then we can delete the schedule messages after and that should work so let's quit this alright so let's run this again and invalid scheduled message id i am so confused on why that isn't working that really should be working because that should give us a list of ids so let's print the ids here and just have a look at what they are all right so if we have a look here these are all of the ids maybe for some reason some of them just aren't in there because we only got two failures here so maybe we've just done something wrong because there's a bunch of ids and only i guess one time here it actually failed so maybe we just had one wrong scheduled message or if they're all wrong i have no idea let's just do a try catch here inside of delete schedule messages and see if we can get any of them to be deleted at all so let's go inside of delete scheduled messages and let's just go try and let's just go accept exception as e and we can just print out e and maybe this will work that's the best solution i kind of have at this point because again no idea why that's really not working so there we go it looks like we're getting a bunch of invalid scheduled messages but we are not getting as many invalid scheduled message ids as there is actually ids so if we look at printing the id one two three four five six seven we don't have seven failed messages here it's only four which is leading me to believe maybe for some reason we're trying to delete a scheduled message that is no longer scheduled maybe because the time has passed or something like that anyways it looks like this is working so let's just go in here and we can see that all these messages now that we've scheduled as we've been messing around are printing out uh the ones i guess that we didn't cancel so maybe you were good hopefully i have no idea i believe the problem probably has to do with the fact that we were just running this constantly so many times but honestly i'm just gonna leave it at that so i really do apologize that there was quite a few mistakes in this tutorial like i've said i'm human as well you know i'm learning how this api works and just kind of trying to show it to you guys and learn along with you but this is kind of my debugging process and what i'll do when something's not working if you guys know for some reason why this isn't working please do let me know but my temporary solution is just the try catch i think that's probably fine and for our purposes this will do the job that we needed to do so that being said i hope you guys enjoyed this series if you did make sure you leave a like subscribe to the channel and i will see you guys again in another youtube video