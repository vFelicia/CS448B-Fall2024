hello everybody and welcome to another youtube video so in today's video i'm going to be discussing the global keyword in python why it's generally recommended that you do not use it now the reason i'm making this video is quite often people like myself will just mention or will say something like never use the global keyword now it's quite frustrating especially for someone who's a beginner because usually we don't explain ourselves we don't discuss why we don't even really talk about what the global keyword does so a lot of people will find out about this keyword and then get told never to use it without any rationale behind that so i want to demystify that for you talk about why you actually shouldn't use it and explain to you how exactly it works because that's going to help with this explanation so let's get started i'm going to start by explaining the global keywords the first thing i'm going to do is define a variable called x this is going to be equal to 0 then i'm going to find a function called foo inside of here i'm going to say x equals 4. then i'm going to print x i'm going to call foo i'm going to print x once more now take a guess i'm going to run this program what do you think the output is going to be so when i run this i get 0 0. now some of you may have guessed and rightfully so because this seems intuitive that we were actually going to get 0 and then 4. and the rationale behind that might have been something like well x is defined up here so we'll print x equals zero then we call the function that changes x to be equal to four so then we should print x equals to four or x is four now the reason that is not the case is because we have what's known as global and local variables x is what's known as a global variable the reason it is a global variable is because it is defined within the scope of this file and x is what's known as a local variable because it is defined within the scope of this function so anything defined within the main line of our file so not within a function or within a class is what's known as global anything in this entire file can access this global variable because it was defined just within the file not within anything specific in the file whereas x equals 4 on line 4 here well this is local to the function foo it is only accessible and usable within this function now to show you what i mean if i go inside of here and i print x now you're going to see that we're going to get 0 4 0 printing out the reason we get that is because when we print x here we are talking about the local variable x the x that is defined within the scope of this function you don't really have to worry about what the name scope actually means but it pretty much just tells us where something is defined and where we should be looking for specific values now what makes this even more confusing though is if i remove these two print statements i remove x equals 4 and then i call this function when i call this function now we get 0 printing out now why is that the case why does this actually work well the reason this works is not because obviously we have a local variable x defined it's because this x right here is global this was defined within the global scope it was just defined on the main line of our file so any function anything that is also defined within the scope of this file this function is defined within the scope of this file can access this variable x so we can see x and we can find it but now of course when i change x and i say x equals 8 like that we're getting the value 8. the reason for this is when i do this our print statement is going to look at this x not at this x because this is the closest this is the most local to this function right here so hopefully that's clear but when i say x equals 8 i am not changing this x up here i'm actually creating a new variable which is also named x but which is local and defined within the scope of this function and that is again why i cannot access this value or i don't get the value 8 when i print x outside of the function either before or after i call it now hopefully that's clear but that is the difference between local and global variables anything defined within the main line is typically known as global anything defined within a function or a class pretty much when it's indented but not within like an if statement or for loop that's an exception obviously then that is going to be a local variable to whatever function or whatever class it's defined in so actually before i get into the global keyword i'm kind of backtracking here i'm going to do something that is kind of weird if you haven't seen this before but just trust me this is valid python code but will really illustrate what i mean by local and what i mean by global and what i mean when i'm talking about these scopes right because this seems like kind of a confusing topic so i'm going to say x equals 2 on line 4. i'm going to define a function inside of this function this is totally valid to do i can do this no problem i'm going to say this is called bar and inside of here i am going to say x is equal to 7 and then i'm going to print x like that now outside of here i'm just going to call the bar function and then i'm going to print x after i call the bar function so in case you haven't seen the syntax before this seems confusing i'm just defining a function inside of my other function what that means is this function is what's known as a local to this function so i cannot actually call this var function from outside of the function i have to call it from within which is what i'm doing here so bar is included or the call to bar is with inside of the foo function and the function bar is defined within the foo function anyways i have x equals 2 at the top my foo function inside of bar i say x equals 7 i print x then i call bar and i print x then i'm just going to call foo and i'm going to print x after i call foo i just want to show you what we're actually going to get for the output here and we see we get 3 different values 7 2 and 0. and this just goes again to illustrate what i mean by global and local so x here is global right so when i print x i'm referencing this x then inside of here i say x equals 2 i define the bar function i call the bar function we print 7 because well 7 is what is it called well 7 will be the first thing we print because we just called that function first 7 is local to the bar function so we print 7. then we print x after we call bar well x is equal to 2 because this is within the foo function x is local to 2 so we print 2. then we print x here and again i already discussed that that was the global variable x so it's kind of weird because i have to say the same words a million times to explain this but now let's make this even more confusing remove x equals 7 and i'm just going to print x inside of the bar function now take a guess at what you think is going to print out am i going to print this x or am i going to print this x it's a good question or is this going to error out what's going to happen so let's run this and notice we get 2 2 and then 0. so we print 2 we print 2 and then we print 0. now this is a really good example to show you how we actually look for global variables or variables that are not defined within our current scope so when i try to print x here inside of bar the first thing that our computer does is it looks within the scope of this bar function anything defined in this bar function and says do we have a variable x if we do what it does is it uses that value for x because that is the most local to where we called this statement from but if it does not find an x it says okay there's no x here but there might be one outside so what it does is it goes to the scope that's containing it which is the foo function because bar is defined within the foo function and then what we do is we look for any x defined in that scope we do find one we find x is equal to 2 and so we print or use that value of x there you go but now if i remove x from here and i do this let's run it we get 0 0 0. so what happens in this print statement is we look within this scope we don't find any x's so we look within the scope that this is the find in and we find the x so then we use x which is a value of 0. same thing inside of the foo function we look in the foo function don't find any x's we look in the global or the file i guess the main line and we find x equals 0 and we use that as the value so hopefully that explains to you scope and how we actually reference or access variables now let's talk about the global keyword so i'm going to go back to that previous example i had we'll keep the print statements and we'll say x equals 2 and then x equals 7. now what i'm going to do is inside of the foo function i'm going to say globalx now this is what you do when you want to define a global variable you put global at the top of the function and then you can put multiple variables here like i could do x comma y if i wanted to and this pretty much tells our function that what we should do is treat any variable called x as a global variable now remember global variables are anything defined within the main line of the file so what that means is we're going to treat x here the same as x up here so when i say x equals 2 what this is going to do you know what i'm just going to remove the bar function because this would be a bit too advanced if i leave that in there for right now what this will do is it will say let's treat x as a global variable so when i say x equals 2 i will actually change the value of x here so when i run this you see we get 2 2 because this actually does change the value of x so that's kind of the basis on how that works if i remove x from up here and i call my function foo with global x the same thing is going to happen we get 2 2. the reason for that is even though i didn't define x as a global variable above like i didn't say x equals 2 since i said that it is global that means that we are going to create it in the global scope so anything after this variable is created so after we call the function foo can access the variable x now you may already start to see why this global keyword could cause some issues because this seems a little bit confusing and you can make it even more confusing when you do something like this define bar and then inside of here let's say x equals 7 and let's call the function bar what do we think is going to happen now when i do this well let's run this and we see that we get the same thing so x equals 7 even though we called the bar function did not globally change x the reason it did not globally change x is because x is local to the function bar we did not define in the bar function which we could global x like that that we should change the global value of x and if we do do that inside of here then will that change the value of x out here or will it change the value of x here that's the question right are we going to get 7 printing out here what are all the print statements going to say in fact let's print x inside of here so let's do this and let's run it and we see we get 7 everywhere so when i do this what this does is it actually changes the value of x for the global context so not for just the simply the function above us for all of them now to make this more clear i know this is confusing let's do this so let's just have the function foo we're not going to define anything inside of foo other than the bar function then we'll just call the bar function then we'll print x here and we'll print x here let's run this and we get the same thing 7 7. so all i'm saying is what the global keyword does is it tells us to treat any variable with the name that we've defined as global as a global variable for the entire file not just for the scope above the current scope that we're defined in i know it's starting to get confusing but i do need to explain this just to make sure it's really clear on how scopes work how you look for variables and all that i think it's valuable to understand so that is what the global keyword does now why is this an issue why would you not want to use it now there's many potential answers to this question you can probably come up with a huge list of why global is really bad but one of them is that it adds hidden side effects to our functions now what i mean by that is that if i decide to say you know take this function here and i put it in a new file let's just imagine that the new file doesn't have the call to foo and it doesn't have the print statement okay i just make this function or i want to reuse it i just throw it into a new file now all of a sudden this function is modifying a global variable called x so let's say in my other file i'm using a variable called x and i have x storing some you know really important information maybe it's equal to hello or something like that it's not even equal to a number all of a sudden i throw this function in that file and now it's going to break my entire program as soon as i call it the reason it's going to break that is because we have global x defined and well we didn't know we have no way of knowing inside of this function if x is already defined outside well this is going to override x so it's going to change x which is storing some really important information to be equal to 7 and well we might not necessarily want that now you could say well tim let's just not throw this function into another file okay that's great but now you're removing one of the great aspects of a function the part that it is reusable and typically when we write a function we want to be able to reuse it multiple times and not just from one specific file we might want to have like a library of math functions or a bunch of things like that that we can use in any program that we want and ideally when we create a function it should do one thing and it should do one thing very well all of a sudden when we say global x what we are doing now is we are modifying something outside of this function and it's very hard for us to actually figure out that we're doing this especially if we have a very large function because if we just don't see this global keyword we have no idea why some random variable in our file is getting modified right so just to go through some of those reasons i'll show you some more examples it removes the reusability aspect of our function from other files it also just makes it way harder to figure out if something's going wrong so it makes it hard to debug because now we have some global value some global variable and we're potentially changing other variables defined other places within our function or sorry within our file so makes it hard to debug and hard to reuse which are already two very good reasons not to use it but let's talk about some more so let's actually define a function that uses the global keyword that might seem to make sense so let's say define um you know let's go add underscore seven like that we'll take some variable called x and what we're going to do is we're going to set a global variable so we'll say global um i don't know let's say result and this is going to be equal to x plus 7 like that okay so we just say result uh is i guess equal to x plus seven and now what i'm going to do is i'm going to define the function i'm going to call the function i'll say add underscore seven we'll call it with the value six and then we'll just print out the variable result right that's an instance in which we could use the global keyword so let's do this and now we go ahead and we get 13. but now of course the issue arises when we define some result variable here we say result is equal to you know 65 or whatever and now all of a sudden after we call add seven we're changing results right if we run this we're getting uh 13. even though result is defined as 65. let's imagine you couldn't see this function or it was like you just didn't think to look in this function for an error all of a sudden you have no idea why when you're printing results you are getting 13 and you are not getting 65. so the alternative approach to doing this and this is obviously what most of you would probably do would be to do something like this result equals add underscore 7 and rather than setting result you just return the value so you say return like that you get rid of the global makes your function cleaner and easier and now if we say something like result there and i don't know let's i'm trying to think of another way that we could use results that would make sense but regardless this is just easier and this is much better now it doesn't matter what i call the variable that's storing this result right i didn't call it result one like that boom we're good to go so that is just an alternative approach to using the global keyword now the reason a lot of people like to use a global keyword is they say i don't want to be passing a ton of parameters to my function and they say it's easier if i just make all of these variables global because then i can set all these variables and it's just better now if you're doing that if you are setting a bunch of values or changing a bunch of things globally from a function you're already making a big mistake you should not be doing that when you have a function it should do one thing and it should do one thing very well as soon as you start modifying global variables from within side of your function that should be a clue that your function is not behaving the way that it ideally should in terms of following best practices and again based on the reasons i just discussed it makes it very difficult to debug your program especially if you call this function multiple times because it's going to keep resetting global variables and if you ever use that variable again globally then it's just going to be a huge headache and a huge mess so i could go on and on and show you a bunch of examples but i just want to give you two really quick reasons why you shouldn't use the global keyword it just makes things very confusing hard to debug and it's just really not a thing that you ever need to do if you find yourself and you say i have to use the global keyword reevaluate the way you're trying to solve this problem and think about how you can make a function that can take some inputs and give you some output like i just did right here and rather than setting the global variable inside of here get the results from the function and then define or reset the global variable from the global context where it makes sense to do so so hopefully this was helpful i apologize if i not did not get into too many reasons on why you shouldn't use the global keyword again it's hard to illustrate this with just a small example but hopefully this explained to you scope explained to you how this worked and well i guess yeah this was helpful so if it was make sure you leave a like subscribe to the channel and of course i will see you in another youtube video