hello everybody and welcome back so in this go length tutorial we're gonna talk about functions now functions are very important for any programming language and especially in golang so let's talk about what a function is and then I'm gonna go through a bunch of examples and in the next video in this series we'll actually get into advanced examples with functions so just keep in mind that if I don't cover everything here it's probably coming in the next video okay so what is a function well I would say that the easiest way to define a function is a block of reusable code seems pretty vague but that's really all a function is it's this block of code that you can reuse as many times as you'd like and you can reuse it because you can call a function you can pass a value to a function and a function can return a value back to you the most common example of functions I like to use is something like the absolute value function so what is the absolute value function do well it takes some value X and returns to you the absolute value of X that is what that function does now this is reusable because I could pass in any value so I can pass in negative 5 and I would return to me the absolute value of negative 5 which is equal to 5 this is an example of a function it takes one value in and it spits one value out now there is some functions that don't take any values in that's totally fine you could have a function that just prints something to the screen you could have a function that takes something in but doesn't return a value so maybe it takes the value X and rather than returning that value it prints it to the screen this will make a lot more sense as we get into the examples but I just want you to think about the keyword function and what that really means because that's gonna be important when we make functions to think about what this block of reusable code is doing how we should name it is returning things as it taking values but let's get into that now so the first example of a function that we've seen in all of these videos is function main now what is this this is simply a function that does not take in any values it does not return any values it simply does whatever is inside of these brackets here so this is the entry point for our application and we know that we've had two min right we'd have to have been writing almost all of our code inside of this function so far and what ever happens in here just runs and that execute is fine now we can actually make our own functions I'm gonna show you how we can do that so I'm gonna write function I'm just gonna say test like that and do my square brackets or my squiggly brackets so now I have a function called test doesn't do anything right now but I've defined a function test and inside what I'm gonna do is I'm gonna say FM t dot println so let's put our quotation marks I cannot type today let's do a test now this function test is just sitting here nice perfect nothing wrong with it the only problem is right now if I go ahead and run my code so go run tutorial dog go nothing's gonna happen there's gonna be no output from my program and you can see that down here nothing happened that's because this main function ran but it didn't automatically run this test function for me so how do I call a function how do I actually get this function to work well what I do is I simply write the name of the function followed by two parentheses like this now sometimes actually I won't even go into the example I so to say there but this is how you call a function you simply put the name of the function you put two parentheses afterwards and then sometimes there's a few other things you need to do but for our basic example this is how we call it now what this means is I am telling this function to run so just do whatever is inside your function that's what that's saying so when we hit this line it will run whatever's in test you can think of it as like from line 10 we jump to line 5 and we run whatever's inside of there so let's actually go and run this and see what happens is now that we call test there we go we get the ball you value test print it out now the reason functions are great is because I can reuse them and call them multiple times so look at this I can call test again a second time and look what's gonna happen test prints out twice so I call test once it runs through the function and then boom we're done we come down to this line line 11 we call it again and it runs great that's the basics of functions and how you call them now let's talk about parameters and return types so just like the absolute value function that I showed you at the beginning functions can take in values so what I mean by taking values is they can accept a parameter now a parameter is simply a variable that or a piece of data something that we give to the function when we call it sometimes they can be optional they may be mandatory we'll talk about that later but let's make a parameter X that we passed to test so if I want to tell my code that when we pass a bount when we call test we need to pass one value for the parameter X and what I do is I simply write the name of the parameter that I want here so the value that I'm expecting and then I write the type of what this parameter should be so if I want this to be an int value if I want them to give me an integer then what I would do is type int directly after the variable so X int like that now what this is going to allow me to do is use the value X inside of test so in fact I could print out test and actually let's just print out the value X so printing out the value X what this says now is okay we have some parameter X that we pass to the function let's just print that value out so let's have a look at how we now call this new test function because if I save this code and I wait for the little squigglies to pop up is it giving it to me yes it's saying not enough arguments to call tests so what's up here is known as your parameters and what you need to do when there's parameters for a function is you need to give what's known as an argument in your function call so I'm gonna call test with the argument 5 and test with the arguments 9 now take a guess of what you think this is gonna do but it's pretty straightforward we go ahead and go go run tutorial go we print out 5 and we print out 9 because when we pass 5 here X gets assigned the value of 5 we print it out when we pass 9 here X gets assigned the value 9 we print it out now we can have multiple parameters as well let's go ahead and actually add in a Y parameter let's change the value of this function to be at so what I want to do now is I want to add the value x and y and print that to the screen so let's add X plus y and print that out so now I'm gonna call test oops I call this ad and we'll give it 6 and 7 and we should assume what the result is gonna be here but let's have a look and we get 13 so we can do things like that now these are how we type in parameters you simply put the name of the parameter nd type if I wanted this to be a floatingpoint number I would put float64 if I want it to be a string I will put string if I want to be some custom type which we haven't talked about yet I would put the custom down inside there now a little shortcut for functions here is that you can actually if you have parameters that are the same types is omit writing it two times so I can actually do X comma Y int and what that means is x and y are both intz just because I put that here and we didn't define a type for X but we defined one for Y so it's gonna assume that X is an int so look at this if I run this code here this is completely valid there's nothing wrong with this we still get 13 printed out so that's what you can do if you have multiple parameters that are all the same type just list them all out and then put the type at the end they don't need to be you don't need to write into that many times now of course we can have parameters of different types I could have X being a string and why being an int obviously we can't add these now but we can do that that's totally valid okay so let's go back to the example of XY int and add now here notice that what I was doing was printing this value out now instead of printing this what I actually want to do is return this value now what that means is give this value back so do this calculation and give this value back to wherever it was called from so what I'm actually gonna do here is I'm going to say ans colon equals ad I'm gonna say fmt dot print line ans so what I'm hoping is gonna happen now and I have to change this function is that when I call ad rather than each printing outs rather than ad printing out X plus y it just gives me the answer so it returns to me what the answer is and I can store that in the variable and s so how we do that how we set up a return type were multiple return types from our function is we define after the brackets and the name here what the return type is gonna be now in this case it's gonna be an int so I simply write int but if we return to a float then maybe I would write float64 there and if I was returning multiple things I would write multiple things so int comma int that means I'm returning to int values from this function so let's actually see what happens and when I have one INT here so whenever we define that we're gonna return something we need to write inside of our function a return statement and the return statement is telling us what value or what values were gonna return back to the caller so wherever this was called from keep in mind when ever we hit a return statement we immediately exit our function and we send whatever was in that return statement back to what was called so if I go here and I say return X plus y what this is really saying is okay we're gonna call the function add with a value six seven we're going to return the sum so six plus seven to add which means this statement adds six seven gets replaced with their sum which is 13 and that means answer now becomes equal to whatever that value was in this case 13 so let's have a look at how this works go around tutorial go and we get 13 again now of course if I change this to be 14 then we can see that this function will still work properly and we will get 21 as our answer so that is how you set up the parameters and how you set up the return type now for some reason you might want to return more than one thing in that case you just add another variable here that says the two things you're gonna return so I'm gonna return to Innes and in this case I'm gonna return X plus y and X minus y so now let's have a look at what ans is equal to if I do this or if this is actually gonna work so let's go go run tutorial Co and let's see what happens missing function body syntax error unexpected comma after toplevel declaration okay so I actually remember what's wrong here my apologies guys when we return multiple things sorry what we need to do is put them inside of their own set of brackets just so that the function knows that these this is the return type not multiple things okay so we need to put them inside of a set of brackets my mistake on that but once we do that so assume the function is fine now we're returning two integer values we're gonna have to modify this line of code down here because right now we only have one variable that's gonna store the return from this function so I'm gonna say a ns1 ns2 standing for answer one answer two and then I'm gonna change this to an ax and s1 and ans to what this is saying is since we're returning two values when we make this variable declaration we need to define two variables so that answer 1 becomes equal to X plus y and answer 2 becomes equal to X minus y so let's run that and run this code now and have a look at what we get and we get 21 & 7 so we get those two separate values and that's how we return mult things okay so I'm gonna show you a few more cool tricks that we can do with golang functions and then in the next video we'll do some more advanced examples okay so the first thing I'm gonna show you is actually labeled return values so I can go ahead and do something like this Zed and Zed Zed I know these aren't fair he a meaningful name so let's do z2 and Zed one I can actually label my return variables and if I do that what that means is I actually don't mmm there's a different way that I can do this so if I have these labeled I just me just show you this example sorry I can actually assign I can say Zed 1 equals x plus y oops I don't want to add Y again Z 2 equals X minus y and I can simply write return here now what this is saying is I've labeled Zed 1 which is my first return variable and I've labeled Zed 2 which is my second return variable so I've set them equal to X plus y and X minus y now when I return this will actually automatically return these values for me without me having to write Z 1 Z 2 so I can do something like that if I label these return types then I can just assign what it is I want to return somewhere in the function write the return keyword at the end and it will return those values so let's save this and let's run this and see if I made a mistake or not and it looks like this is still working fine so we can do that we can label the return types and I can do the same thing that I've done here I can say Zed 1 comma Zed to int and this will still be valid so let's have a look at this and we're good so this is just a short form when they're the same type you can do something like this so there we go we've labeled it now now the last thing I'm going to show you is what's known as a defer state so in the first statement defers the execution of whatever we put on this line until the function returns so this seems strange but let's say that I want to print something right when the function stops executing all right when the functions about to return what I can do is I can say fmt dot print line hello like that and what this says now is that we will defer the execution of this until we hit this return keyword so this will happen at the and of the function this might not see me useful to you but it actually is nice because if there's something that you need to do like cleaning up a file or closing something and you don't want to forget about it you can just defer that statement at the very beginning of the function so that whoever's reading this or yourself knows that this is gonna happen and then it won't happen until the end of the function so this is a very useful keyword that I don't know what other languages it's actually in but if you write defer and some statement then it will not do this statement until these values return now I can prove this to you because I can show FM Twp prints line before return and in theory if you didn't know it defer did you'd probably think we were gonna print hello and then before return but you'll see that we print before return and then we print hello so let's run this and go run tutorial go and we get before return and then hello so this successfully deferred the execution of the statement until the exit of the function so I know these things are a little bit more advanced than what I've shown you before in the next video we're gonna talk more about functions and inner functions anonymous functions everything you pretty much need to know about them but without being said that has been this video I hope you guys enjoyed if you did make sure they like subscribe and I will see you in the next one