00:00 - hello i think we are live yeah i think
00:03 - so
00:04 - let's wait and see just always want to
00:06 - get confirmation that
00:08 - we're actually live hello in the youtube
00:10 - chat if
00:11 - you can hear us yes say hello
00:15 - we're we're looking through the chat and
00:17 - youtube right now
00:19 - cool all right yeah my
00:22 - great my youtube is up um people are
00:25 - saying
00:26 - no in chat hi you're live hi mitch
00:28 - mitchell cool
00:29 - um hi everyone nice to see you here
00:32 - um let me since this is gonna be like
00:36 - posted on youtube after the fact
00:37 - i'll do like a clean start but hello
00:39 - everyone uh good to see you here
00:42 - um oh i see some familiar faces uh lisa
00:44 - i recognize you hi everyone
00:46 - um okay cool so let's go ahead and
00:50 - start it now hi everyone
00:53 - uh i'm alex koontz i'm a curriculum
00:55 - developer here at codecademy and i'm
00:57 - here with sophie
00:59 - hey everyone i'm sophie i'm also a
01:01 - curriculum developer here at codecademy
01:03 - and we are super excited to kind of kick
01:06 - off this new live stream series that
01:07 - we're calling cs101
01:09 - we are live right now on youtube this
01:11 - will also be posted after the fact on
01:13 - youtube
01:14 - so if you can't make these live um
01:16 - they'll always be posted after the fact
01:18 - on youtube um right now i think we're
01:20 - streaming on a couple of different
01:21 - uh platforms we're on twitter and
01:23 - youtube and facebook and i think twitch
01:25 - although our twitch channel is pretty
01:26 - small
01:27 - um but sophie and i are looking at the
01:30 - youtube chat primarily so if you're
01:32 - watching this live and want to chat with
01:33 - us
01:34 - um feel free to jump over to the youtube
01:37 - chat
01:39 - um yeah i see a bunch of people are in
01:41 - the chat already we have them
01:42 - from all over the world which is super
01:45 - exciting
01:46 - um yeah if you are in the chat why don't
01:48 - you go ahead and tell us
01:50 - kind of how much coding experience you
01:52 - have
01:53 - uh what you're what you're looking for
01:55 - from this series kind of just start uh
01:58 - start chatting in that in that chat and
02:00 - meanwhile i can introduce
02:01 - what what the heck we're doing here
02:04 - yeah yeah we're we're this is our first
02:08 - live stream for this series so we want
02:09 - to get a sense of where everybody's at
02:11 - and what everyone is
02:13 - coming to this to learn so so that would
02:16 - be great
02:17 - cool yeah so let's uh let's describe
02:19 - what we are doing here and i see in the
02:21 - chat
02:22 - yeah somebody says this seems like this
02:23 - is based off of cs50 at harvard
02:25 - i would say that that is pretty accurate
02:27 - where this live stream series that we're
02:29 - doing
02:30 - is kind of a uh it's going to be a
02:32 - little bit of a preview of what you
02:34 - would normally expect
02:35 - in your introductory computer science
02:37 - class at a university
02:38 - or even an ap computer science class in
02:40 - high school
02:41 - and one of the reasons why we're doing
02:42 - this right now is that this is a part of
02:45 - our big back to school campaign where we
02:48 - just launched
02:48 - a student pricing uh plan where there's
02:52 - a discount for students
02:53 - um we're running this series we you know
02:56 - uh there's a
02:57 - pr uh student hub page where we give a
02:59 - lot of kind of resources for students
03:01 - that are
03:01 - starting the school year we obviously
03:04 - realized that this school year is pretty
03:05 - different and so
03:07 - yeah we hope that this can be a valuable
03:08 - resource for folks that are
03:11 - you know just starting to learn
03:12 - programming
03:14 - yeah and for a little bit of context so
03:16 - i see a lot of people responding in the
03:17 - chat about
03:19 - how much experience they have a lot of
03:20 - people with no experience a lot of
03:22 - people with
03:23 - a little experience here and there
03:24 - looking for a little more
03:27 - background or a refresher um so
03:31 - in the spirit of sharing our experiences
03:34 - i will also share that um so i come from
03:38 - a data science and statistics background
03:40 - so i'm actually
03:42 - a curriculum developer specifically for
03:44 - data science
03:45 - content but um in the context of
03:48 - learning
03:48 - more about statistics and data science i
03:51 - had to learn a lot of programming skills
03:53 - and so i'm coming at programming from
03:56 - kind of a
03:57 - alternative background where i learned r
03:59 - first
04:00 - then learned python and then and even
04:03 - just now
04:03 - still on codecademy learning a little
04:05 - bit of javascript
04:06 - javascript um and so part of this is a
04:10 - learning opportunity for me as well and
04:12 - hopefully that will help me answer some
04:13 - questions that you all have because i'm
04:15 - also coming at it from that perspective
04:17 - of
04:18 - this is a little bit of a refresher for
04:20 - me you know alex on the other hand
04:22 - yeah it's what sophie and i were just
04:24 - talking i think we kind of have not
04:25 - opposite but very different experiences
04:27 - with programming where
04:28 - sophie learned it kind of um later on in
04:31 - her
04:31 - uh college and grad school um
04:35 - and i and kind of like from a applied
04:37 - sense where you focused on statistics
04:38 - you needed to learn how to program to
04:40 - run experiments and run tests and that's
04:42 - how you learn programming
04:43 - i have the kind of more traditional
04:45 - american
04:46 - uh computer science college experience
04:49 - where i took
04:50 - the ap courses in high school i got a
04:53 - traditional like computer science
04:55 - degree from college i've taught computer
04:57 - science in high schools for a couple of
04:59 - years
05:00 - and so i'm kind of like locked into what
05:02 - a normal you know kind of introductory
05:04 - computer science curriculum looks like
05:06 - and i think that let me go ahead and
05:08 - share my screen real quick and i can
05:10 - show the
05:12 - the syllabus that we're gonna be working
05:13 - through in this stream um
05:15 - like somebody said in the chat this is
05:16 - gonna be pretty similar to what you'd
05:18 - see in cs50 from harvard
05:20 - or really any of your kind of
05:21 - introductory computer science
05:23 - courses and really kind of the thing
05:25 - that i want to stress is that
05:28 - you can teach computer science in two
05:30 - ways one it can be like really applied
05:31 - like what sophie did where you're gonna
05:33 - be like i wanna build a website or i
05:34 - wanna
05:35 - you know like run this you know
05:38 - experiment for my stats class or
05:39 - something can be in that really applied
05:41 - way
05:42 - uh or it can be in this way which is
05:44 - kind of teaching
05:46 - computational thinking and this is a
05:49 - little bit
05:49 - harder to describe because like in the
05:52 - in the first way when you're building a
05:53 - website
05:54 - you're like oh i made a website i did it
05:55 - i learned this skill and
05:57 - computational thinking kind of sounds
05:59 - like nonsense right it's like kind of
06:00 - this like ambiguous thing that you don't
06:02 - really know what it means
06:03 - um but the skills that we're trying to
06:07 - teach are basically
06:08 - the content of this course we want to
06:10 - teach you to start
06:11 - like recognizing patterns and seeing
06:15 - themes within programming and computer
06:17 - science and
06:18 - the really cool thing is that these
06:20 - fundamentals and themes and patterns can
06:22 - basically be applied to any programming
06:24 - language
06:25 - so the way that this course is organized
06:28 - is that
06:29 - each one of these modules we're going to
06:32 - have uh um kind of a couple of
06:35 - introductory lessons where the big ideas
06:38 - are taught
06:39 - kind of separate from the code itself
06:41 - and then we'll look at that code in
06:42 - python
06:43 - and then we'll we have some code
06:45 - challenges at the end as well um
06:48 - let me resize my screen here to so i can
06:51 - see the chat
06:54 - um cool i love how active the the chat
06:56 - is so if
06:57 - anything pops up in the chat that you
06:58 - think is worth calling out or talking
07:00 - about always feel free to interrupt me
07:02 - or
07:03 - say something that i miss will do
07:07 - okay cool so let's go ahead and get
07:08 - started again this is
07:10 - a this is a course on codecademy called
07:13 - cs101 livestream you can find it in our
07:15 - catalog it's linked all over the place
07:17 - if you found this
07:19 - um if you found this from like the blog
07:20 - post that we that we link to there
07:22 - should be a link to this course
07:23 - in the youtube description there's a
07:25 - link to this course hopefully it's
07:26 - easier for you
07:27 - to get here um in terms of how you want
07:30 - you should interact with this content
07:31 - there's a couple of things that you
07:32 - could do
07:33 - you could either take the content
07:36 - beforehand
07:36 - right so right now we are doing this
07:39 - module
07:40 - all this stuff about variables next week
07:42 - we'll be doing functions
07:44 - so there's a couple of ways to interact
07:46 - you can take the content beforehand
07:47 - and like come prepared with questions
07:50 - and
07:50 - uh another good way to do this is you
07:53 - can like follow along with us
07:54 - um as we're as we're coding live and
07:56 - then finally if you're watching this
07:58 - you know a recorded version or you want
07:59 - to come back to this later you can
08:01 - always
08:02 - you know bring up the youtube video and
08:03 - then code along with us later
08:05 - yeah i see a couple of quick questions
08:08 - one
08:08 - is why python and not javascript
08:12 - um and then the other is can i take this
08:14 - if i want to learn basic data science
08:16 - yes so if you want to take
08:19 - the data science question sure i what
08:23 - i'll say is
08:23 - i think anybody who wants to do data
08:26 - science
08:27 - needs some programming skills at this
08:29 - point um
08:30 - data science has kind of become this
08:32 - intersection between
08:34 - uh between computer science and
08:36 - statistics and so
08:37 - to be a data scientist you need to be
08:39 - able to work with code
08:41 - so this is definitely a good starting
08:43 - point for that i think our data science
08:45 - career path
08:46 - has a ton of python curriculum
08:49 - at the beginning of it anyway so this
08:51 - will be a great way to
08:52 - prep for that um and you want to take
08:55 - the
08:56 - python versus javascript one yeah so
09:00 - python versus javascript really you
09:02 - could do any of these kind of
09:03 - introductory languages right
09:05 - python javascript java c plus c sharp
09:09 - swift like any of these languages are
09:11 - going to have these fundamental ideas
09:13 - the reason why i choose python is that
09:15 - it's a little bit easier to just like
09:17 - get up and running
09:18 - so for example for javascript which is
09:20 - very kind of
09:21 - intertwined with html and css
09:24 - uh to get kind of basic things happening
09:27 - in javascript
09:28 - it requires a little bit of
09:30 - understanding of like how it's
09:31 - interacting with html
09:33 - and so in that in this particular
09:35 - example python doesn't have to deal with
09:36 - any of that um you'll be able to see
09:38 - as we get into this python lesson it's
09:40 - pretty easy to just kind of like
09:41 - immediately start up
09:42 - hit the run button and run some python
09:45 - code
09:46 - yeah um cool uh
09:50 - yes i see i see some comments in the
09:52 - chat about is this course for free
09:54 - this this particular course is paid
09:57 - um it's for pro only but we have free
10:00 - python content out there um
10:02 - and there's a lot more con
10:05 - there's a lot more of this content in
10:07 - our paths as well so this is like a good
10:09 - little taste of what
10:10 - um pro content looks like
10:13 - i think you're gonna need to go back to
10:15 - the first exercise yes
10:17 - good call
10:20 - all right cool so let's let's dive into
10:22 - this this
10:23 - and hopefully this exercise loads go to
10:25 - refresh
10:27 - um really quickly so i saw a question in
10:29 - the chat about pandas and numpy and
10:32 - those are
10:34 - python libraries that are not going to
10:35 - be covered in this course
10:38 - those are data science specific
10:40 - libraries
10:42 - which if you're going to do data science
10:43 - you would also need to learn a little
10:45 - bit about
10:46 - but those are not covered here yeah and
10:48 - again kind of like
10:49 - comparing this to a traditional computer
10:51 - science course
10:52 - that sort of thing would maybe be a
10:54 - second year course or an elective of
10:56 - like
10:56 - i'm in college and i want to learn data
10:58 - science i'm gonna
10:59 - take a course about pandas numpy map
11:02 - thought lab all that sort of stuff the
11:03 - stuff that we're gonna focus on here
11:04 - is you know my first computer science
11:07 - course ever basically
11:09 - yes um okay cool uh let's
11:14 - start by talking about variables in
11:17 - general and so we have a couple of cool
11:19 - little applets here
11:20 - i'm not gonna you know read through the
11:22 - exact text of this
11:23 - but we can start to get the idea of what
11:26 - a variable is
11:27 - and a variable is a concept that's going
11:29 - to exist in
11:30 - any language that any programming
11:32 - language for the most part that you're
11:34 - interested in so whether you're
11:34 - interested in web development or data
11:36 - science
11:37 - or straight up computer science you're
11:38 - going to be interacting with all of
11:39 - these kind of fundamentals
11:41 - and so the idea behind a variable is
11:44 - that
11:45 - a variable is a place where you can
11:46 - store data of some sort and so we have a
11:48 - little applet here
11:50 - where we can start storing data so you
11:53 - can see i already have
11:55 - um you know some
11:58 - forest rocks uh
12:01 - grass um let's throw on rocks
12:05 - i think we will later see like i think
12:07 - there's a lake maybe not
12:08 - what else was there snow no we'll see
12:12 - well we'll get later into this this
12:13 - exercise and we'll see all the different
12:14 - types that we can build
12:16 - um it actually so on the side there what
12:19 - you're supposed to fill them
12:21 - yeah so on the side here it says okay
12:23 - let's fill fill each row with
12:25 - these different things um
12:28 - sophie so for this particular exercise
12:32 - what are our variables here so
12:35 - in this particular exercise we're not
12:38 - really defining variables um
12:41 - or or we're redefining some variables so
12:44 - every time
12:45 - we have a block that is showing us grass
12:50 - then the the pattern for that block is
12:53 - set to
12:54 - grass um and so in this example
12:58 - we're rewriting the word grass every
13:00 - time we want that to happen
13:02 - yeah i would say that we have uh like
13:04 - nine variables here right
13:06 - each one of these is a bucket that can
13:07 - hold some value and
13:09 - we kind of have a limited number of
13:10 - things of what that value can be
13:12 - right right now it seems like it only it
13:14 - can only be grass
13:15 - rocks forest um there might be some
13:18 - other types here
13:19 - but that's kind of the starting point
13:21 - for variables
13:22 - is that i can have a word that is
13:25 - associated with some value
13:27 - and so you know eight right now is going
13:29 - to be associated
13:30 - with grass
13:33 - all right so that's kind of the basics
13:34 - of variables i can put i can have one
13:36 - thing and i can
13:37 - put uh i can put something in that
13:40 - variable
13:41 - cool next we have okay now that i've
13:44 - stored that variable i can use it in
13:47 - multiple places
13:48 - so again this is the same idea of let me
13:50 - define
13:51 - terrain one as one of my variables here
13:57 - [Laughter]
14:00 - and now i'm using it in three different
14:01 - places right so this is the idea of like
14:04 - you'll see in coding a lot of variables
14:06 - that we have have a lot of times
14:08 - are numbers so you know uh
14:12 - when you're when you're checking out an
14:14 - order from amazon
14:15 - like your your total right that might be
14:18 - a variable that's stored somewhere in
14:19 - amazon's
14:20 - system where it's storing a number a lot
14:23 - of times
14:23 - uh words are are stored in variables
14:26 - those are usually called strings
14:28 - where maybe the the title of the item
14:31 - is stored in a store in a variable um
14:34 - on an amazon page and then that title
14:36 - can be used all over the page
14:38 - so here we have three different
14:42 - variables
14:45 - actually and this kind of this kind of
14:49 - is an interesting point of uh right now
14:52 - if i like typo it like i just did
14:54 - like let me try to switch terrain three
14:56 - to rocks
14:58 - well that was a terrible example let me
15:00 - just switch it back to forest
15:02 - by mistyping forest with two r's
15:06 - so nothing happened uh
15:10 - this is like maybe our first bug in
15:13 - programming
15:14 - right like
15:17 - so if we did can you see like an
15:18 - equivalent of like
15:20 - in programming in python or any other
15:22 - language
15:23 - how might this be a bug where i have
15:26 - this variable and i'm trying to assign
15:27 - it as something and it's
15:29 - it doesn't take it right like when does
15:32 - that
15:32 - happen elsewhere in programming
15:35 - i mean it can happen in a lot of
15:38 - different
15:39 - circumstances i think in this case
15:41 - basically
15:43 - we're re we're trying to reference some
15:45 - some
15:46 - patterns that exist or that have been
15:48 - defined elsewhere
15:50 - so somewhere in the back end of this
15:52 - code we've defined that the word forest
15:55 - is going to have this particular pattern
15:56 - associated with it but we haven't
15:58 - defined anything
15:59 - for this double r forest um and so
16:02 - the computer doesn't know what to put
16:04 - there so
16:06 - so that so it's not doing anything when
16:08 - we press
16:09 - run and i think i think that this is
16:11 - like
16:12 - a really good example of what
16:14 - programming feels like a lot of the
16:15 - times
16:16 - where there's these rules in the
16:17 - background right somewhere there's a
16:18 - rule that says
16:20 - force with one r is going to produce
16:22 - this particular image
16:24 - and and if i do two r's it's going to
16:26 - totally break it's not going to do
16:27 - anything
16:28 - and so somewhere that rule has been
16:29 - defined and
16:31 - what it means to learn programming is to
16:33 - essentially like
16:34 - understand what those rules are for a
16:36 - particular language where with python
16:39 - you know there's going to be rules like
16:40 - oh i need to put single quotes around
16:42 - something
16:42 - or i need to you know i'm defining this
16:45 - thing as a
16:46 - double which means that it has to have a
16:48 - decimal point
16:49 - so kind of what programming is for the
16:51 - most part is that
16:52 - somebody else has written a bunch of
16:54 - rules and we have to like
16:56 - understand what those rules are and then
16:58 - we can make new things and eventually
17:00 - you can get to the point where like
17:01 - you're the one defining what the rules
17:02 - are
17:03 - where which is like kind of what we've
17:04 - done here where here at codecademy we
17:06 - built this little applet we defined the
17:08 - rules for this
17:10 - for this thing that you're interacting
17:11 - with um that
17:13 - other people can use yeah
17:16 - cool i think before you move on the one
17:19 - thing that i want to point out here
17:21 - um is that so in the
17:24 - in the first exercise we saw and this
17:26 - exercise
17:27 - we're really doing the same things if
17:29 - you're if you're following the
17:30 - instructions with in exercise one about
17:33 - what goes in what row you're generating
17:36 - exactly the same patterns
17:38 - but in the first exercise you're having
17:41 - to write down
17:42 - nine different words um so every time
17:45 - you want grass you're having to write
17:47 - down the word grass
17:48 - and in the second exercise what we did
17:51 - is we defined some variables
17:53 - uh so graph one for grass one for rocks
17:56 - and one for forest
17:57 - and then we're reusing those variables
18:00 - in different places so
18:01 - we've reduced down writing out
18:05 - nine different things with some
18:06 - repetition we've reduced it down in the
18:08 - second exercise to writing only three
18:11 - things down
18:12 - and there's now no reputa repetition in
18:15 - the things that we're writing down
18:16 - um and so i think that's another big
18:19 - there's lots of ways that we can do
18:21 - that kind of thing in programming where
18:23 - we're taking out some repetition
18:25 - that if you were trying to do this
18:27 - manually like color this
18:29 - in you'd have to you know pick out which
18:32 - which block goes in which place
18:34 - and by writing a program to do this and
18:36 - using variables in a in
18:38 - a sort of smart way we're now reducing
18:41 - down a lot of the work that we need to
18:42 - do we have to write less things out
18:44 - yeah that's a great point that's like
18:46 - one of the core things that's great
18:47 - about variables is that you can reuse
18:49 - the same information everywhere
18:51 - um a couple of other little like subtle
18:53 - things that are happening here is that
18:55 - right now these variables like kind of
18:58 - exist
18:58 - right but they don't point to anything
19:01 - they're they're blank
19:02 - right they're showing a blank screen
19:03 - this is something that will come up in a
19:05 - lot of programming languages of like you
19:06 - can define a variable without giving it
19:08 - value
19:09 - and then another thing that i was doing
19:11 - here kind of without even thinking about
19:13 - it right
19:14 - was reassigning things so this variable
19:17 - right now is holding grass
19:18 - but i can reassign it to holmes
19:22 - forest ah and if i can smell the forest
19:26 - i also do see some questions about is
19:29 - this javascript
19:30 - or is this python and it actually is
19:33 - javascript uh that's being used to
19:36 - generate
19:36 - this uh this web page so right now we're
19:40 - um
19:41 - we're in the kind of part of this live
19:43 - stream where we're going to talk about
19:45 - the big ideas and then hopefully a
19:47 - little bit later we'll get into the
19:48 - python code
19:50 - but right now we're actually not writing
19:52 - any code directly
19:54 - uh although this this
19:57 - page is javascript yeah and i i think
20:01 - like you might you might be familiar
20:02 - with scratch which is a program built by
20:04 - mit which is
20:05 - really kind of like gooey slash visual
20:08 - based
20:08 - and that's kind of what we're doing here
20:10 - right i would actually argue that this
20:12 - is still
20:12 - programming right we're still telling
20:14 - the computer to do something and that
20:15 - and it's doing something
20:17 - it just has like different syntax than
20:19 - traditional javascript or python and
20:22 - for for those of you i think if i heard
20:24 - the word syntax in my first
20:26 - computer science class i'd be like never
20:29 - use the word syntax again i don't know
20:30 - what that means right it's just like a
20:31 - scary word to encounter people like
20:33 - never programmed before syntax are just
20:34 - like
20:35 - the again the rules of the language
20:37 - meaning um
20:38 - the syntax of this language is i have to
20:40 - put stuff in these boxes and it seems
20:42 - like
20:42 - there's a reserved set of words that do
20:45 - anything
20:46 - um syntax is like the rules of the
20:48 - language
20:49 - cool um yeah and we can actually show
20:51 - off the like behind the scenes stuff
20:53 - um of this this program we can take a
20:55 - look at the javascript if people are
20:57 - interested in
20:59 - um cool uh let's see changing the value
21:02 - of a variable
21:03 - we kind of talked about this already um
21:05 - we've now
21:06 - replaced these variables with different
21:09 - options just so i don't have to type
21:10 - them in
21:11 - and we can overwrite the old value with
21:14 - a new value
21:16 - um and you know there's some
21:18 - implications about that it
21:20 - seems like it completely forgets about
21:21 - the old value right if i if i'm on lake
21:24 - i have no memory that i was just on town
21:26 - or whatever i was just on
21:28 - um so basically that's an important part
21:31 - of variables is that not only can they
21:32 - store value and be used
21:34 - in many different places but you can
21:35 - also overwrite their value but when you
21:37 - do that
21:38 - you kind of lose memory of what it was
21:40 - before
21:47 - the town one did you ever have had that
21:48 - like play mat that was the
21:50 - like the town grid no
21:54 - okay i don't know yeah i i wonder if
21:56 - anyone out there knows what i'm talking
21:57 - about but there's like an iconic like
21:59 - play mat that uh that i had when i was
22:01 - you know five years old that looked
22:03 - just like this yeah
22:07 - all right cool so let's get to the last
22:09 - so
22:10 - for people asking what language is this
22:12 - written in
22:13 - you can see here now we've moved to kind
22:15 - of a more
22:16 - traditional programming view of of this
22:19 - instead of having
22:21 - text boxes to enter in text and you know
22:24 - variables associated with those text
22:25 - boxes
22:26 - i can now write this this happens to be
22:28 - javascript
22:29 - personally i think it doesn't really
22:31 - matter that it's javascript like
22:33 - the takeaway message of this is not
22:35 - we're writing javascript
22:36 - takeaway message here is what variables
22:39 - are
22:40 - different ways that you can interact
22:42 - with variables and this happens to be
22:44 - one of the ways
22:45 - that javascript or this is how you write
22:47 - variables in javascript
22:49 - and you can even see that we're like um
22:52 - let's see what were some of my options
22:54 - there i mean i'll do forest again but
22:57 - i think there was lake
23:03 - beach might have been one yeah and for
23:07 - people out there that know javascript
23:08 - you can even tell that i'm like
23:10 - kind of being lazy here javascript
23:12 - normally you would end with semicolons
23:14 - you could define variables with like var
23:17 - or
23:17 - what so technically i'm writing
23:21 - javascript
23:22 - here but again the point is not that
23:24 - this is javascript the point is
23:25 - let's internalize what it means to be a
23:28 - variable
23:29 - um and so that way we can use it in any
23:32 - language because we're about to use it
23:33 - in python rather than javascript
23:35 - yeah definitely there's something here
23:38 - that
23:39 - we haven't really done in the other
23:41 - exercises
23:42 - sophie do you have an idea of like
23:44 - what's different here
23:46 - than other exercises and if you don't
23:47 - because i'm just springing this on you
23:49 - like in in us creating these variables
23:52 - what are we doing that we haven't done
23:53 - elsewhere i
23:56 - don't know so we are defining the
23:59 - variable name
24:00 - right up to this point the variable name
24:02 - has been defined for us oh oh i see
24:05 - yeah so here the variable name was like
24:09 - terrain one terrain two terrain three
24:12 - here we have to define the variable name
24:16 - ourself
24:16 - right i can't just put like forest
24:20 - because this program is associating
24:22 - these blocks
24:24 - with a particular variable name
24:27 - gotcha yeah we've taken away i guess the
24:30 - um the nice format where it allows us to
24:34 - just type in
24:35 - the word and automatically assign the
24:38 - variable now we are
24:39 - doing that explicitly in code
24:42 - yeah another slight but
24:45 - important detail is that we are putting
24:47 - these words in quotes
24:48 - which i saw somebody in the chat um uh
24:51 - brought what brought us to that
24:52 - attention yeah so
24:53 - that's again like very specific
24:55 - javascript syntax of
24:57 - before the syntax of our created
25:00 - programming language
25:02 - right the syntax of this one is like a
25:03 - drop down menu with no quotes the syntax
25:06 - of this one
25:06 - when we were entering in text we didn't
25:08 - have any quotes around it
25:10 - the syntax of javascript is
25:13 - if i want to put in a word or a string
25:16 - i have to put it around quotes and for
25:19 - javascript either single or double
25:20 - quotes will work
25:22 - yeah um you've got a quick question uh
25:25 - whether you can
25:26 - give a quick look at the folders in the
25:28 - top
25:29 - um and i think
25:33 - it's worth showing briefly um i think
25:36 - one of the things about learning
25:39 - programming skills is that like
25:41 - there's a there's so much to learn and
25:43 - i've seen this a little bit in the chat
25:45 - already that people get overwhelmed and
25:47 - so
25:47 - one of the things that happens on the
25:49 - codecademy platform is that
25:51 - we usually only have one uh one file
25:54 - open at a time so that
25:55 - you're not overwhelmed and kind of
25:57 - digging into all the nitty-gritty you're
25:58 - kind of focusing on the one skill
26:00 - that is being taught in that exercise
26:03 - but
26:03 - it is i think useful to at least see
26:06 - that if you
26:07 - wanted to look a little further at
26:08 - what's going on behind the scenes
26:11 - um there's some more files in here
26:14 - that are actually being used to generate
26:16 - this screen on the right and so
26:19 - yeah i think i think these might
26:21 - actually be hidden from
26:22 - uh from folks by default i have my
26:25 - special authoring mode turned on so we
26:27 - can
26:27 - kind of have a behind-the-scenes look at
26:29 - some of this stuff but yeah let's look
26:30 - at the
26:31 - the rest of the javascript code right
26:33 - because we were writing our code in
26:34 - main.js
26:36 - but then we also have this javascript
26:37 - file that's like doing the rest of the
26:39 - work
26:40 - and so you can see right there's a lot
26:42 - of stuff going on here and it might
26:44 - immediately be overwhelming but one of
26:45 - the things that we can look for are
26:47 - things that we
26:47 - currently understand which are variables
26:50 - and so you can see that we are creating
26:52 - variables
26:54 - associated with each picture basically
26:58 - this is a this is a link to the picture
27:00 - that we're using for grass
27:02 - and so we're storing it in a variable
27:03 - named grass and so later on in our
27:05 - program
27:06 - if we ever need to like talk about this
27:08 - picture again we can just use this
27:10 - variable
27:11 - i think one thing that might be
27:12 - interesting is so we've asked you to
27:15 - specifically declare a variable named
27:17 - one
27:17 - two or three see if we can find
27:21 - um yeah ctrl f isn't gonna really work
27:24 - but let's see
27:25 - here we go um
27:29 - so here's where we are using the
27:31 - variable from the other file we're
27:33 - taking your variable
27:34 - to and storing it in a another variable
27:37 - named input
27:38 - value two and then we're doing stuff
27:42 - with that with that variable right so
27:43 - you can kind of get the sense of how
27:46 - how variables are used in this larger
27:48 - system
27:49 - yeah all right i say we close it so that
27:52 - we're not
27:54 - going to be full and i think we should
27:56 - try to like
27:57 - get through these other big picture ones
28:00 - kind of quickly so we can get into a
28:01 - little bit of the coding
28:02 - i think we should even jump to python
28:04 - right now and do like declaring
28:06 - variables in python
28:07 - um changing variables in python all that
28:09 - sort of stuff and i might even jump
28:10 - around in this exercise a little bit to
28:12 - to cover the stuff that we've talked
28:14 - about um
28:17 - so let's see so let's jump right to
28:20 - variables we can
28:21 - talk about printing and strings and all
28:24 - this stuff
28:25 - in more detail in the future but let's
28:27 - jump right to variables
28:30 - and all right so cool this is python
28:34 - it looks pretty similar to what we just
28:36 - saw in javascript
28:38 - some of the stuff that we just skipped
28:40 - over was
28:41 - let's talk about it two two important
28:44 - things i suppose
28:45 - um the print function so right now if i
28:49 - run this code
28:50 - and this code might even be the starting
28:51 - code let me hear that the solution code
28:54 - let me
28:54 - reset this i went through all this stuff
28:56 - before the stream
28:57 - so um yeah the code
29:00 - might uh might have been complete there
29:04 - so we're asking you to update the
29:05 - variable me a meal to reflect each meal
29:08 - of the day before we print it so meal
29:11 - starts with
29:12 - an english muffin and then we print
29:15 - breakfast
29:15 - followed by whatever is stored in my
29:18 - meal variable
29:19 - for lunch sophie would you have for
29:21 - lunch today i haven't eaten lunch yet
29:24 - okay
29:24 - none because because
29:27 - we are streaming
29:31 - i'm going to eat a sandwich i think
29:36 - nice okay yeah and dinner um let's see
29:40 - so cool we updated meal to be
29:43 - a lunch meal and then we printed lunch
29:45 - followed by whatever is in meal
29:47 - now let's update meal to be dinner so i
29:50 - can do meal equals
29:52 - um let's see for dinner i'll have indian
29:55 - food
29:57 - i love indian food me too
30:01 - right okay cool so right a couple of
30:03 - things that we're doing here
30:04 - one is that concept of we can declare a
30:07 - variable
30:08 - so we declare the variable meal at the
30:10 - very top of our file here
30:12 - um and start it as an at an english
30:14 - muffin but then we can continue to
30:17 - change it as we go right we we then say
30:19 - okay meal is no longer an english muffin
30:21 - we've overwritten it
30:22 - it's now none because we are streaming
30:25 - we use it
30:26 - we print it out and then we change it
30:27 - again
30:31 - when i say like we use meal three times
30:34 - what like what do i mean by that
30:38 - in this case it's pretty simple so in
30:41 - this case we're just
30:42 - printing it out as um a string
30:46 - in some bigger context so like before
30:49 - each
30:50 - each time we print it out we're saying
30:51 - what the meal is and so
30:53 - um and so we're using it in three
30:55 - different contexts right we're
30:56 - using it as a printout of what our
30:59 - breakfast was our lunch was and what our
31:01 - dinner was
31:02 - and this is kind of similar to what we
31:04 - saw before with the patterns in those
31:06 - blocks
31:07 - because before it's kind of like we were
31:09 - defining
31:10 - what those patterns should be and then
31:12 - every time we printed them
31:14 - they looked different depending on what
31:16 - was stored in that variable
31:18 - and here now every time we're printing
31:20 - the text that's contained in meal
31:22 - we're printing it in a different context
31:24 - um but we're still printing the context
31:27 - or the contents of that variable meal
31:30 - yeah i think that that's kind of another
31:32 - thing that we skimmed over almost
31:33 - because it's almost like second nature
31:34 - when you're interacting with those
31:35 - applets like
31:36 - in those applets not only were we
31:38 - defining the variable but we were using
31:40 - them
31:41 - in some way and we kind of use them in
31:43 - the same way
31:44 - every time right the way that we used
31:45 - those variables was
31:47 - show an image on on the screen in the
31:50 - same way and we did that for every
31:51 - variable right
31:52 - in the same way that the way that we're
31:53 - using the variables here
31:55 - is printing them out and again the idea
31:58 - behind like
32:00 - learning to program is understanding
32:02 - what you can do with different things
32:04 - and so it seems like a thing that we can
32:06 - do with
32:08 - this variable is we can print it but we
32:10 - can also do
32:11 - other things with it right and this is
32:13 - stuff that we'll get to in later
32:15 - exercises whoops
32:16 - um yeah like so we'll get into
32:20 - other things that we can do with
32:21 - variables later on but let me give a
32:23 - little
32:24 - brief preview here where i can say
32:27 - um lunch is
32:30 - um this is my lunch
32:35 - so a thing another thing that i can do
32:37 - with variables other than printing them
32:38 - out
32:39 - is combining them so i can say um
32:42 - breakfast and
32:45 - lunch equals meal
32:49 - plus lunch and then i can so that's
32:52 - using these two variables in one way i'm
32:54 - combining them together
32:56 - again you kind of have to have a little
32:58 - bit of knowledge to know that plus is
33:00 - going to combine them together in some
33:01 - way but that's what learning to program
33:03 - is it's learning to understand like what
33:04 - does plus mean in this context
33:07 - and then i can combine those into a new
33:10 - variable
33:11 - and now i can use that variable in uh in
33:14 - any way that i want um in this case
33:20 - printing it out so let me get rid of
33:25 - kind of everything else that i have down
33:26 - here
33:31 - so there we go i'm kind of using
33:32 - variables in two ways now i'm
33:34 - concatenating them
33:35 - i'm adding them together and then i'm
33:38 - also
33:38 - printing them
33:42 - very cool i think
33:45 - one of the things that always surprised
33:47 - or that surprised me
33:48 - about uh python when i first learned
33:51 - some
33:52 - basic syntax was that you could add
33:55 - strings together and it would
33:56 - concatenate them
33:58 - and i think some of the other exercises
34:00 - in here which maybe we'll go back to now
34:03 - are about how are about different
34:04 - variable types and so
34:06 - um what we were just looking at were
34:08 - strings um which are
34:10 - basically just like text that we've
34:12 - contained in um
34:13 - in quotes and so we are using this
34:16 - operator like a plus sign
34:18 - that normally we use with numbers but
34:20 - all of a sudden
34:21 - um when we're using it with strings it
34:24 - has this behavior
34:25 - that i mean it makes sense that it puts
34:27 - the two strings together but it's not
34:29 - necessarily obvious unless
34:31 - um you understand the rules of python
34:35 - and how python is interpreting
34:37 - uh your command so um i think it
34:40 - i think it's interesting one that python
34:42 - does that not all
34:44 - programming languages do um and also two
34:47 - it's kind of interesting to see
34:49 - uh if you had defined your meals or
34:52 - defined your variables as
34:54 - numbers the way that that plus sign
34:56 - works
34:57 - is going to be different so it's
34:58 - dependent that operator is dependent on
35:01 - your variable types which is like
35:04 - an interesting yeah let's look at let's
35:08 - look at
35:08 - in numbers and then maybe we can jump
35:11 - back to the second
35:12 - uh kind of conceptual lesson which shows
35:14 - this idea of like
35:16 - variables have types associated with
35:17 - them and the things that you can do
35:19 - with different types is different
35:20 - depending on the type so let's jump to
35:22 - numbers real quick just to see how
35:23 - numbers work in python
35:25 - um it's pretty similar to what you might
35:28 - expect so there's
35:29 - differences between numbers with a
35:33 - decimal point and numbers without a
35:34 - decimal point and this is something that
35:36 - happens in most programming languages
35:38 - and most programming languages
35:41 - handle them slightly differently um
35:44 - and
35:48 - when i when i describe this stuff it's
35:49 - like again i for this
35:51 - particular lesson and this particular
35:53 - series the things that we're looking at
35:55 - are like
35:55 - really big picture where there's a lot
35:58 - of small details that we're doing that
36:00 - we're like kind of breezing over here
36:02 - and i think one of the small details
36:04 - that i would like to breeze over here is
36:05 - like the distinction between
36:07 - an integer and a float um really kind of
36:10 - like the big picture thing that
36:13 - i want to highlight in this lesson is
36:14 - that idea behind data types where
36:16 - if i have numbers whether they're
36:18 - integers or floats and like don't worry
36:20 - about the difference between them
36:22 - the plus sign is going to act
36:23 - differently than
36:25 - a string which is uh you know those
36:27 - words in quotes
36:28 - so let's let's see what they're asking
36:30 - us to do here
36:32 - um so they're asking us to create two
36:35 - variables one columned release year
36:39 - let's say this movie was released in
36:42 - not 2020 2020 is a bit of a bummer let's
36:44 - do 2018.
36:47 - and then run time let's say it is
36:50 - uh you know 250.
36:55 - let's hit run and see if that works let
36:57 - me
36:58 - i have annoying things because i'm in
37:02 - author mode
37:02 - uh cool so that went ahead and worked
37:07 - you'll notice that nothing happened
37:11 - this would kind of be a this is because
37:13 - we're not using these variables in any
37:15 - context right this would kind of be
37:16 - equivalent if we just had those
37:18 - input boxes back in our applet and we
37:20 - didn't have any
37:22 - you know uh images being shown right the
37:24 - variables are created
37:26 - they're given value but it's kind of
37:28 - useless at this point because we're not
37:30 - doing anything with it
37:31 - so in python the way to like show the
37:33 - variable kind of similar to how we
37:35 - showed the variable
37:36 - through images in the applets is with
37:37 - the print statement so i can now print
37:39 - release here and should hopefully see
37:42 - 2018.
37:45 - yeah i got an error down here because i
37:46 - didn't follow whatever stuff this is
37:48 - but you can see there we go 2018.
37:52 - um let's play let's let's finish this
37:55 - exercise just so it stops giving us
37:56 - error messages
37:58 - um cool now create a variable define
38:01 - called rating out of 10
38:05 - and give it a float number between 1 and
38:08 - 10.
38:09 - so again a float number in the very
38:12 - simplified version of python is just
38:13 - going to be a number with a decimal
38:14 - point
38:15 - so i can say that movie was an 8.5 or a
38:17 - 5.6 out of 10.
38:22 - and cool i just created the float
38:25 - sophie what sort of stuff should we do
38:27 - with these numbers to like demonstrate
38:28 - the data type
38:29 - stuff well i guess
38:33 - first might be to add some of them like
38:36 - uh you could say maybe
38:40 - uh start you could have like a start
38:43 - time
38:44 - or something and add the run time to it
38:47 - sure
38:47 - how about we do uh current year
38:52 - is 2020 and then years to a remake or
38:56 - something
38:57 - well i was going to do subtraction i was
38:59 - gonna do how how long has it been since
39:01 - it was released
39:02 - right so i can do um years
39:07 - since release is
39:10 - um current year
39:14 - minus release here
39:20 - and then i would print that yes good
39:22 - call so print
39:24 - that um we're getting i
39:28 - i think there's a couple of questions in
39:30 - the chat about
39:31 - um like ides and text editors and things
39:35 - like that
39:36 - um and so i just want to quickly just
39:38 - say
39:39 - uh everything that we're demoing right
39:42 - now
39:42 - i think the the benefit of codecademy
39:46 - is that you get this kind of workspace
39:48 - and so
39:49 - in this particular lesson the workspace
39:51 - is in python which means
39:53 - um you your code is going to be
39:55 - interpreted as python and
39:57 - you can kind of write code in the
39:59 - script.pi file and you can run it and
40:01 - you can see the output
40:02 - um but then on your own computer
40:05 - you're going to need to have you know
40:08 - some way to interpret python code
40:10 - if you want to replicate this on your
40:12 - own um and
40:14 - we're not going to cover this today but
40:16 - there are a lot of resources on
40:18 - codecademy
40:19 - um to to learn how to set that up on
40:22 - your computer so
40:24 - um yeah it's funny when i when i teach
40:26 - in a
40:27 - normal classroom not online like a lot
40:30 - of the
40:31 - first couple of classes are all about
40:33 - setting up your own machine in order to
40:35 - like be able to run this stuff
40:36 - and it's kind of a bummer right because
40:38 - it's like that's
40:40 - all a nes that's a necessary skill to
40:42 - know how to do but it's not
40:44 - the main skills that are like
40:47 - fundamental to computer science where
40:50 - right the ideas of like computational
40:52 - thinking
40:53 - starting to see the world as variables
40:55 - that can interact with each other and be
40:56 - used in a certain way
40:57 - like all of that stuff is really kind of
40:59 - like the meat of an intro computer
41:01 - science class
41:02 - and it's kind it's kind of a bummer that
41:05 - you know it's a little bit complicated
41:07 - to set up on your own machine
41:08 - and so i think that that really is one
41:10 - of the strengths of codecademy is that
41:12 - you can learn how to do all of this
41:14 - stuff kind of in our safe little
41:15 - environment
41:16 - and then once you feel comfortable with
41:18 - those fundamentals
41:19 - you can you well one you're probably
41:22 - like more
41:22 - confident with coding a little bit
41:24 - because you've interacted with it a
41:25 - little bit so the setup process will be
41:27 - a little bit less scary
41:28 - but then two um you've already like seen
41:31 - the
41:32 - the fundamental thinking and so you can
41:34 - like immediately transfer that to your
41:35 - own computer once
41:36 - uh once you learn how to set it up on
41:38 - your own computer yep
41:40 - and i think kenny has also sent some
41:42 - links in the chat so
41:44 - yeah let me um so to really demo this
41:47 - difference between
41:48 - different data types of strings versus
41:51 - ins or doubles let me change back to
41:54 - that being a plus
41:55 - so this is now not going to be years
41:56 - since release so i'm gonna just say
41:59 - this is an added uh or whatever
42:03 - i'm gonna call it my number this doesn't
42:05 - really represent anything anymore right
42:07 - it's not years
42:07 - since released i'm just adding together
42:09 - the current year plus the really release
42:11 - here
42:12 - and this should be right four thousand
42:15 - 4038.
42:16 - so that's an example of me using the
42:18 - plus sign in the context of
42:20 - two uh well this is even an integer
42:24 - and a float so i'm combining an integer
42:27 - and a float with a plus sign
42:30 - in the last exercise i combined hello
42:34 - and i combined two strings
42:38 - with a plus sign and it smushed them
42:41 - together
42:41 - right and so this is a good example of
42:44 - like
42:45 - python knows that when i have two
42:47 - numbers and i'm using the
42:48 - plus sign i don't want to smush those
42:50 - numbers together because that would be
42:51 - kind of
42:52 - you know silly um but when i have
42:55 - strings the defined method of
42:57 - plus is uh smush it together
43:03 - some other kind of cool things that we
43:04 - can experiment with is like what if we
43:07 - do hello plus a number
43:13 - cool um so
43:17 - if we do a hello plus a number we get
43:20 - kind of our first error message here and
43:22 - you can see that
43:24 - okay i have a type error i must be a
43:26 - string
43:27 - and not an integer so it's saying that i
43:29 - don't know what to do if you
43:31 - tell me to add a string and an integer
43:37 - um let's experiment with some other
43:39 - things because i know that there are
43:40 - some cool
43:41 - kind of you know not hidden features but
43:43 - maybe unexpected features if i do
43:45 - hello times three
43:48 - that will actually work where that will
43:50 - multiply the
43:52 - um that will multiply the string three
43:55 - times and smash the three results
43:56 - together so you can kind of see
43:58 - that you know depending on your data
44:01 - type
44:02 - and depending on the operator the thing
44:04 - that you're doing to it
44:06 - um there can be different results and
44:08 - again that's kind of what it means to
44:09 - learn a language is to understand what
44:11 - these different results are
44:14 - one thing that i again went through kind
44:17 - of quickly or without even
44:18 - noting is that previously i've been
44:20 - using variables everywhere
44:24 - and this time i'm not right i'm using a
44:27 - string and a number i'm not using it in
44:30 - a variable
44:31 - and so you know there are pluses and
44:33 - minuses to this right i can do this kind
44:35 - of quickly
44:36 - where um hello times three i don't need
44:38 - to store it in a variable but then i
44:40 - also
44:40 - lost the result right i can't really i
44:43 - would have to do it again
44:44 - right i would have to then say you know
44:46 - hello times three again if i wanted that
44:48 - and it and if i stored in a variable
44:51 - ahead of time
44:52 - i i couldn't use it again
44:56 - okay cool let me
45:00 - to kind of underscore this topic of
45:02 - different variable types
45:03 - and i know we only have 15 minutes left
45:05 - so we can kind of
45:06 - fly through this i want to go back to
45:09 - the syllabus
45:10 - and i know that we have this kind of
45:12 - conceptual lesson on data types
45:15 - or again the thing that i really want to
45:16 - stress is that we are learning python
45:19 - but the thing that we are really
45:20 - learning is these fundamental
45:22 - topics so this fundamental topic is
45:25 - different data types do different things
45:27 - and so we have a couple of you know fun
45:28 - little applets here to
45:31 - play around with that so i can say okay
45:34 - if my
45:34 - if my input is a kangaroo
45:38 - and i tell it to capitalize
45:42 - my output will be kangaroo
45:45 - but if my variable type is a number
45:50 - and i tell it to capitalize i get an
45:53 - error message
45:53 - so that's exactly what we just saw in um
45:57 - in python right where i was trying to do
45:59 - i was trying to use
46:01 - a function or an operator i was trying
46:03 - to use something in python
46:05 - that uh it where the data type didn't
46:08 - align with it it didn't know how to do
46:10 - an integer plus a string just like here
46:12 - it doesn't know how to capitalize
46:14 - a number um
46:18 - cool so yeah in this in this example we
46:22 - kind of go through
46:23 - common data types uh this one's fun
46:27 - sophie did you ever have the book zoom
46:30 - as a child
46:31 - a book zoom yeah no
46:34 - it was a book like this where you just
46:36 - zoomed out and out and out and actually
46:38 - uh it's kind of a shame because my
46:40 - browser window is so small we didn't
46:42 - make this
46:42 - super reactive i guess um where
46:46 - it's a little bit hard to see but you
46:47 - can zoom out right so here's a here's a
46:49 - representation of numbers
46:50 - um where a computer can very easily
46:53 - store very small numbers or
46:54 - huge numbers
46:58 - um another common data type is strings
47:02 - we were just interacting with strings in
47:04 - python a string is a series of
47:06 - characters
47:07 - so i love cs101
47:12 - and let me make that's slightly wider
47:16 - i might break everything
47:20 - we reload i love the artwork on these
47:24 - i know they're super fun i i really i
47:26 - really love this course that uh
47:28 - this was made by zoe and nick um who are
47:30 - two great curriculum developers
47:33 - um i like this
47:36 - this exercise in particular because it
47:38 - kind of draws attention to the fact that
47:39 - spaces are characters um
47:43 - something that you might have noticed
47:44 - when we were concatenating or smooshing
47:45 - our strings together is that there was
47:47 - no space in between
47:48 - and that's because we would have to tell
47:50 - the computer that we wanted the space
47:51 - there
47:52 - if we actually wanted a space there so
47:54 - there's again like little details that
47:56 - are like almost second to second nature
47:58 - that you have to really think about when
48:00 - you
48:00 - are programming and making variables and
48:02 - strings
48:04 - um boolean all right sophie what's the
48:07 - deal with booleans
48:08 - oh booleans are the best i thought i
48:12 - read through this earlier and i didn't
48:14 - know that uh
48:15 - they were named after someone named
48:17 - george boole so that's yeah
48:20 - but so so booleans there was even a
48:22 - question
48:23 - in the chat about this earlier and some
48:25 - very kind people already
48:26 - answered it um but basically a boolean
48:30 - uh value can be either true or false um
48:33 - and so it's kind of it's another data
48:36 - type that you can use to kind of
48:38 - check conditions so a lot of times you
48:40 - might want to do something
48:42 - if some condition is met and in order to
48:44 - check that condition
48:46 - um you need to be able to check whether
48:48 - a value is true or
48:50 - false um and so that's what they're
48:52 - useful for
48:54 - yeah and just like with numbers or
48:55 - strings they're also variables so in
48:57 - this example
48:58 - we can turn the lights on or off and so
49:02 - if you were to think about this in a
49:04 - more traditional syntax again i'll
49:06 - contend that this is programming we are
49:08 - writing syntax here it's just that the
49:10 - way that we change a variable is through
49:11 - this toggle
49:12 - rather than through text is so we can
49:15 - use this
49:16 - toggle to change the variable from true
49:18 - to false or
49:19 - you know it's not even explicitly called
49:20 - true and i guess it is here um
49:22 - you know here it's not explicitly called
49:24 - true or false
49:26 - and then now that we have this variable
49:29 - we can do something with it and the
49:30 - thing that we do with it is
49:32 - you know either show the sun graphic or
49:35 - show the moon graphic
49:37 - um again i think it's like important to
49:40 - underscore like
49:41 - we can create these variables but then
49:43 - in order for these variables to mean
49:44 - anything you have to do something with
49:46 - them
49:46 - and that like doing something with them
49:48 - is almost second nature
49:49 - where you don't even really realize that
49:52 - something is actively happening here um
49:55 - just like you know we didn't even talk
49:56 - about it
49:57 - in the very first example with the
49:59 - squares we didn't even really realize
50:01 - that oh we're creating variables and
50:02 - using them
50:03 - um but yeah important to realize like we
50:05 - can both create variables and then
50:07 - have to use them in some way
50:11 - um cool and then
50:14 - yeah for folks that want to see the
50:15 - behind the scenes let me uh
50:19 - um sure let me turn on my
50:23 - oh maybe i don't know i didn't turn it
50:26 - on
50:27 - um yeah so for folks that want to see
50:29 - the behind the scenes of these little
50:30 - applets again this is these are written
50:32 - in javascript
50:33 - and uh we can take a peek at the
50:36 - javascript
50:37 - where there's a lot going on here right
50:40 - but the important things to note are
50:42 - that somewhere we have
50:44 - variables that let's see if we can find
50:48 - here let's first say capitalize
50:52 - and
50:55 - make this wider um i don't even know
50:59 - where the
51:00 - let me reload this
51:10 - looking for the input button here
51:16 - this might be an issue because my screen
51:18 - is all uh
51:19 - small because i'm streaming um well
51:22 - anyways there should be an input
51:23 - like an input button um somewhere here
51:26 - so we could like choose a word to
51:27 - capitalize
51:28 - oh no it's over here of course
51:32 - um right so i can define the input over
51:35 - here
51:36 - so i can say sophie and then i can tell
51:39 - it to capitalize
51:40 - i can run it um and then tell it to
51:44 - capitalize that input and
51:48 - it's a little bit screwed up again
51:49 - because i changed the size here
51:52 - definitely does say sophie and cap all
51:54 - capital letters though
51:55 - yes um
51:59 - there we go there's sophie even though
52:01 - it should be down there
52:04 - cool so we can like kind of peek into
52:06 - the javascript here to see what it looks
52:08 - like
52:09 - um let's see if i can find
52:14 - where i'm using my variable called my
52:16 - string
52:19 - so let's see
52:25 - should be able to find like a
52:26 - capitalized function that's being used
52:27 - somewhere in here
52:33 - left my string
52:37 - yeah i don't think control f works in
52:39 - these unfortunately
52:47 - hmm there's got to be a way where we
52:51 - grab my string somewhere like in a
52:53 - different um
52:54 - in a different file yeah we might we
52:56 - might like throw it through
52:58 - html or something
53:01 - yeah either way you can see that like uh
53:03 - we're defining variables here in
53:06 - this file that are then going to be used
53:08 - somewhere in our javascript to make this
53:10 - applet kind of
53:11 - kind of work you know
53:14 - perhaps a confusing behind the scenes
53:15 - look at how cool academy works
53:17 - i think it's great um
53:21 - okay let me
53:24 - we have seven minutes left
53:28 - let me jump to some of these coding
53:30 - challenges
53:33 - i think that we have done enough of
53:35 - these lessons to be able to do these
53:37 - so i'm going to put some of these coding
53:39 - challenges on the screen for folks in
53:41 - chat
53:42 - um you can either write the code to
53:45 - uh solve these code challenges or you
53:47 - can just kind of like describe what you
53:48 - would do
53:49 - and i'll sit like for 20 seconds on each
53:52 - of these and
53:53 - let people take a look and then we can
53:55 - we can solve them i'll also use this
53:58 - as an opportunity to look through the
53:59 - chat a little bit so
54:01 - go ahead and think of how to solve this
54:04 - code challenge
54:09 - i think it's nice so i'm just looking at
54:12 - this
54:13 - really quickly and i'm noticing that uh
54:16 - in each of the messages we've left
54:18 - uh a space at the end so that everything
54:21 - will look nice when we made it
54:24 - yeah exactly we have a space at the end
54:26 - of hello there and we
54:28 - alternatively could have put a space
54:29 - there um
54:32 - cool so let's go ahead and do this one
54:34 - sophie how would we
54:36 - do this we want to create a message or a
54:38 - variable called full message
54:40 - and how do we concatenate three strings
54:42 - together
54:43 - so one way is to write
54:47 - each of the variable names so message
54:49 - one
54:50 - plus message two plus
54:53 - message
54:57 - and one thing i'll say is i said that
55:00 - this is one way you could do it because
55:02 - actually there are multiple ways that
55:04 - you could concatenate those strings
55:06 - um so i think
55:09 - i'm not sure if that was covered in this
55:12 - this lesson but it's an interesting
55:15 - thing to point out is that like a lot of
55:17 - things that you might want to do
55:20 - there are actually multiple ways to do
55:21 - it yeah exactly and i think like
55:24 - again that something that's subtle that
55:26 - could potentially be important
55:28 - is this is something that we actually
55:29 - haven't done so far in this
55:31 - in this class of using two operators
55:34 - right so far we've only ever done
55:36 - message one plus message two
55:38 - now we're doing two together right we're
55:39 - kind of doing two steps and so
55:41 - something that you might wanna think
55:42 - about is well what order does this
55:44 - happen in
55:45 - because like math right
55:48 - with math if i do um 2 plus
55:52 - 3 times 5 there's an order of operations
55:55 - and so somewhere written into python
55:58 - there's going to be an order of
55:59 - operations and so
56:00 - even like let's see
56:03 - so if you don't know if you saw this
56:05 - when i was doing this but i can you can
56:07 - combine strings with
56:08 - numbers if you multiply them right yep
56:11 - and so the question here is that message
56:13 - one plus message two is hello there
56:15 - friend
56:15 - hope you're having uh so
56:18 - is the thing that's going to be
56:19 - multiplied is that going to be
56:21 - the concatenation together or is it only
56:23 - going to be message two
56:25 - and so this thing so it seems like
56:29 - it's only message two right the order of
56:31 - operations
56:32 - is consistent with normal math where the
56:35 - multiplication happens first
56:37 - and then uh you know message one gets
56:39 - tacked onto the front
56:41 - so that's something to be aware of even
56:43 - in something as simple as this
56:45 - two things are happening and they're
56:46 - happening in a particular order and it's
56:47 - important to kind of like
56:49 - think about that and realize that even
56:50 - though in this example it's like kind of
56:52 - inconsequential because
56:53 - they happen one right after another we
56:56 - got a few people in the chat giving us
56:58 - another way of doing this by putting the
57:00 - three messages within a print
57:02 - statement separated by commas do you
57:04 - want to do that below
57:06 - the cringe just yeah let me actually
57:10 - get rid of that print statement so i
57:11 - don't print it out twice so i can do
57:13 - message one message
57:16 - two um
57:21 - yeah there we go interesting
57:24 - consequences with that
57:25 - is again because i'm just doing this in
57:26 - a print statement
57:28 - uh i kind of am not remembering my
57:30 - results i'm not saving the results
57:31 - anywhere
57:32 - right if i deleted that variable i can
57:34 - still print that out
57:36 - but now i don't have that i haven't
57:37 - stored that anywhere i can't really use
57:38 - it again
57:39 - i would have to do something with the
57:41 - original messages again
57:43 - that's true okay
57:46 - errors there are three errors in the
57:48 - following program
57:49 - find them all this one's fun
57:53 - yeah the i think the first one
57:57 - we very briefly covered but the other
58:00 - two hopefully oh and we didn't even
58:02 - really cover the second one
58:04 - so i would will you press run really
58:05 - quickly so we can just see the error
58:07 - message
58:08 - yeah yeah cool
58:11 - um air syntax error eol while scanning
58:14 - string
58:15 - literal eol stands for end of line
58:19 - and you can see that something weird is
58:20 - happening on
58:22 - line one and you can see that little
58:25 - arrow pointing actually exactly to where
58:27 - the problem is
58:28 - yeah so this error message is saying
58:31 - basically i expected
58:33 - um i reached the end of the the end of
58:36 - the line
58:37 - when i still expected something and the
58:38 - thing that they expected was
58:40 - us closing this string this string
58:42 - hasn't been closed yet it started with
58:45 - double quotes and it ends with single
58:47 - quotes so it hasn't been closed so we
58:48 - could do something like replace that
58:50 - single quote
58:51 - but keep the single quote and put a uh
58:54 - put a double quote but now this
58:55 - you know this is green apostrophe um
58:59 - so yeah so that that's that first error
59:02 - message is that uh it was
59:04 - it reached the end of the line while
59:05 - still expecting the end of the uh
59:07 - the string all right the next one yeah
59:10 - this one's pretty
59:11 - this is a pretty good error message from
59:13 - python
59:14 - of missing parentheses uh in call to
59:17 - print did you mean
59:18 - this and yes we did
59:22 - yeah lots of people in chat are giving
59:24 - us all these errors
59:26 - too nice thank you for all the people
59:28 - that are
59:29 - are participating in chat that's awesome
59:31 - yeah
59:32 - uh final error name fave color is not
59:35 - defined
59:36 - what does that one mean oh it's because
59:38 - the f and the c
59:39 - are not capitalized in the definition
59:43 - yep exactly so we were asking for a
59:44 - variable that doesn't exist
59:46 - and the reason why it doesn't exist is
59:48 - because python is case sensitive
59:50 - most languages for variables are going
59:52 - to be case sensitive i can't think of
59:54 - one that's
59:54 - not so there we go
59:59 - we only have one minute left i know uh
60:02 - in fact i won't do this one because this
60:04 - is using plus equals which is something
60:06 - that uh we didn't teach
60:07 - so let's go ahead and leave it there um
60:11 - we have one minute left um
60:16 - okay so i want to plug
60:19 - what's happening next so we're going to
60:22 - be doing these sessions every week
60:24 - um you can find them on the codecademy's
60:27 - events page
60:28 - if kenny is still in chat that'd be
60:29 - great if kenny could drop it in chat or
60:31 - sophie if if you could find the events
60:33 - page and drop drop in the chat
60:35 - so you can um register for these events
60:38 - to basically get a reminder about these
60:40 - events
60:40 - every week um they're always also going
60:42 - to be on youtube so you can just um
60:44 - you know subscribe to our youtube
60:45 - channel or whatever and find them here
60:48 - uh i would love feedback on this so on
60:51 - the events page themselves there are
60:53 - there's a feedback form
60:55 - uh let us know what was helpful and what
60:58 - is not
60:58 - um i know that like this is a ton of
61:01 - content that we're trying to jam into an
61:03 - hour long
61:03 - and so if you would prefer us to just
61:06 - like go through a lesson step by step
61:08 - because we jumped around to uh today a
61:09 - lot i don't know if that's
61:11 - if that was a frustrating experience or
61:12 - not so
61:14 - um you know if you have feedback for us
61:17 - uh you can go to those event pages and
61:19 - there should be a link to a feedback
61:20 - form
61:21 - in the event pages um
61:24 - yeah anything anything else that i'm
61:25 - forgetting sophie
61:27 - no i think uh i know that this was a lot
61:30 - of basics and
61:31 - we weren't quite sure where everybody
61:33 - was coming in uh to start
61:35 - but hopefully this is a really good way
61:37 - to kind of start from the beginning and
61:39 - and move through this together um i
61:42 - am going to be personally logging on to
61:44 - all of these we have
61:45 - different curriculum developers running
61:47 - these events um
61:49 - and i think it's a really cool way
61:51 - especially in this weird time that we're
61:52 - living in
61:53 - to kind of all come together and like
61:55 - learn a new skill together
61:57 - so um so i hope you'll come back and
62:00 - um and keep participating and asking
62:03 - questions and
62:04 - uh yeah yeah uh i guess last thing is
62:07 - that right
62:08 - we're specifically doing this like cs101
62:11 - very introductory this is your first
62:13 - high school our first college uh session
62:15 - we're specifically doing that now
62:16 - because we launched the back to school
62:17 - campaign
62:18 - there's a uh discount on pro membership
62:21 - for students
62:22 - um so uh you know i think we've like
62:26 - linked all over the place to information
62:28 - about that if you go to codecademy it's
62:29 - like a big banner
62:30 - um so if you are interested in this kind
62:34 - of stuff
62:35 - this content is all available if you're
62:37 - a pro member and then
62:38 - obviously all of this stuff that we're