00:15 - cool and yeah it looks like we're good
00:16 - so hello everyone welcome to another
00:19 - session of codecademy live we've got an
00:21 - exciting one for you today uh we're here
00:23 - with
00:24 - josh goldberg who is going to be
00:26 - teaching us a little bit about
00:27 - typescript um hi josh how are you i'm
00:30 - doing great i'm excited for my first
00:31 - live stream how are you
00:33 - i'm i'm good um yeah josh i
00:36 - uh so a little bit of background i know
00:38 - absolutely nothing about typescript so i
00:39 - am excited to learn some uh you are
00:42 - probably the person that is most excited
00:45 - about typescript that i know in my in my
00:47 - life um can you give us a little bit of
00:49 - background about
00:50 - how you got into typescript kind of what
00:52 - you do at codecademy um all that all
00:54 - that kind of stuff
00:55 - absolutely
00:56 - um
00:57 - typescript is great big fan of it uh
00:59 - it's a superset of javascript meaning it
01:02 - adds a bunch of really useful stuff on
01:04 - top of regular javascript so as a web
01:06 - developer you don't have to use
01:07 - typescript but if you choose to it can
01:09 - be really useful
01:11 - i got into it because i had a few
01:13 - personal projects a bunch of years ago
01:15 - that were very
01:19 - bad code i will say politely to myself
01:21 - it was they were very sloppy it was very
01:23 - hard to keep track of what was going on
01:25 - and i kind of fell in love with
01:27 - typescript and other things that are
01:29 - called static analysis stuff that looks
01:30 - at your code without running it and
01:32 - tells you whether it's good or bad
01:33 - because they helped me a lot in cleaning
01:35 - up the old code and figuring out
01:37 - how everything works
01:39 - so now fast forward a few years i work
01:41 - at codecademy on our front-end team and
01:44 - we use typescript in pretty much
01:45 - everything that users touch so i'm
01:47 - really excited to be able to show off
01:49 - how how this thing works
01:51 - yeah if if you can kind of uh show us
01:54 - how typescript is used in codecademy
01:56 - that'll be a cool uh cool little bonus
01:58 - as well um i think the plan is going
02:01 - through a little bit of our typescript
02:02 - course which i think you wrote um or at
02:05 - least you advised on or helped write um
02:07 - a couple years ago um
02:09 - yeah what what was that like i guess of
02:11 - um
02:12 - of trying to teach typescript to
02:15 - codecademy users
02:16 - ooh it was fun um when i joined
02:18 - codeacademy it was early 2019. you were
02:21 - there uh there we didn't really use
02:23 - typescript that much i know there were a
02:25 - few people in the company who were
02:27 - interested but no one had gotten around
02:28 - to really putting in the investigation
02:30 - effort and switching things over
02:33 - similarly we didn't have any typescript
02:34 - in our curriculum which is a little bit
02:36 - of a whole because it's very popular and
02:38 - important for a lot of web dev areas
02:41 - i think
02:43 - it was very formative in learning for me
02:45 - because there is a lot of thought that
02:47 - goes into codecademy curriculum a lot of
02:49 - people i think miss that there is a lot
02:52 - of
02:52 - i believe the term
02:54 - curriculum uses pedagogy uh there's a
02:56 - lot of a lot of kind of understanding of
02:59 - what needs to go in what order how do
03:00 - you explain things to someone without
03:02 - either making them feel stupid or making
03:04 - them feel like you're just
03:06 - telling them things they already know
03:08 - so
03:08 - teaching typescript was a battle of
03:10 - trying to figure out what are the core
03:11 - parts of typescript that are really
03:12 - important and and how do you explain
03:15 - those well to people who might not have
03:17 - any experience in
03:19 - a typed language like c sharp or java or
03:20 - c plus plus beforehand
03:23 - does that
03:24 - make sense and answer the question
03:25 - you're looking for
03:27 - yeah i think so um
03:29 - cool yeah do you want to jump in and
03:32 - take a look at some some typescript
03:34 - yeah i thought for the stream today i
03:37 - share my browser screen and we go
03:39 - through the learn types of course
03:41 - i am very proud of and excited about
03:43 - this course because i didn't fully write
03:45 - it but i did help advise on it and write
03:47 - some of the content although i think
03:49 - it's changed a bit since i
03:51 - started it so i reset my progress here
03:54 - and oh yeah this graphic this is new
03:58 - and i just met my weekly target i love
03:59 - these little
04:01 - little delighter features
04:03 - uh yeah going through it uh types of
04:05 - typescript lets us type variables with
04:07 - different
04:08 - hang on a second is this the first thing
04:11 - oh no
04:12 - it jumps that might be a bug and all
04:14 - right we have to fix that
04:15 - there we go what is typescript that's
04:17 - what we're supposed to start on
04:19 - um
04:20 - i remember i remember being so pleased
04:22 - with the art person on this graphic this
04:24 - graphic is just so beautiful i've used
04:26 - it in presentations
04:28 - oh my god nice
04:30 - um but yeah uh invented 95 javascript
04:34 - was designed as a small scripting
04:35 - language it wasn't until 99 that it
04:37 - could do all sorts of dynamic web pages
04:39 - which weren't really common until 2005
04:42 - which is true i remember when uh
04:44 - learning html for the first time it was
04:45 - all tables
04:46 - uh
04:47 - and there was there was like very little
04:49 - interactivity and now we have things
04:50 - like twitter instagram
04:53 - so in 2012 microsoft develops
04:57 - typescripts and released it publicly
05:00 - to blend kind of the flexibility of
05:01 - javascript with the advantages of a
05:03 - stricter language
05:05 - javascript doesn't have types which is a
05:06 - feature
05:07 - in other languages that allow developers
05:09 - to say explicitly what something is
05:11 - supposed to be
05:13 - like this variable is supposed to be a
05:14 - string or that function is supposed to
05:16 - take in two numbers and an array of
05:18 - booleans or something and javascript
05:20 - doesn't let you do that there's just no
05:21 - concept in the language
05:23 - so at its core what typescript is is it
05:26 - adds a type system to javascript it says
05:28 - you can now declare in your code what
05:30 - stuff is is allowed to be or not allowed
05:33 - to be
05:35 - does that what can that explanation ring
05:37 - with you yeah i think that that makes
05:39 - sense why why would somebody care about
05:42 - that and so i think
05:43 - so if you
05:45 - if you're watching this and you're not
05:46 - familiar with typescript or javascript
05:48 - really i think that
05:49 - this comes up with like python where
05:51 - python
05:52 - um you don't have to declare hey this
05:55 - variable is going to be an integer this
05:56 - variable's going to be a string it can
05:58 - just kind of be whatever it wants versus
05:59 - something like java you have to
06:01 - specifically say
06:02 - this thing that i just created is a
06:04 - string and it's only ever going to be a
06:06 - string
06:06 - um
06:08 - and so i think people have different
06:09 - opinions on that where it's certainly
06:10 - nice to write python you don't have to
06:11 - worry about that kind of stuff so you
06:12 - can kind of like
06:14 - write code quickly and it's probably
06:16 - gonna
06:17 - it's it's a little bit easier to work
06:18 - with than something like java so
06:20 - why
06:21 - why add this level of complexity of of
06:24 - adding types to uh to javascript
06:26 - that's a great question um
06:29 - i think that you're absolutely right you
06:31 - hit it on the nail on the head uh when
06:33 - you're starting out and you just want to
06:34 - get something to work you're in like
06:36 - early mode hackathon just trying to get
06:38 - the thing to work
06:39 - uh it's really annoying to have to jump
06:41 - through hoops to
06:43 - get the whatever tooling the compiler
06:45 - happy
06:46 - but if you have a hundred files in
06:47 - javascript
06:48 - and a function declared in one file
06:50 - that's used in a dozen other files
06:52 - it gets really confusing and annoying to
06:55 - try to figure out what is that function
06:57 - supposed to take in uh the example that
06:59 - i like to give is suppose it's supposed
07:00 - to take in an object that has a name a
07:03 - superpower and a weakness
07:05 - you're in the marvel universe or
07:06 - something um and then later on in your
07:08 - code you realize well actually i'd like
07:10 - to have weakness be an array because
07:12 - some people are weak to multiple things
07:14 - now
07:15 - in javascript it would be incredibly
07:17 - difficult to figure out all the places
07:19 - that call that function and all the
07:20 - places that call those places and switch
07:23 - from anything that could be a string to
07:24 - an array of strings and make sure you've
07:26 - gotten all of them
07:27 - whereas in typescript because you've
07:28 - defined in your code this must be an
07:30 - array or this must be a string it'll
07:33 - tell you if you've forgotten a place
07:34 - saying hey you passed a string here did
07:36 - you need to pass a string array
07:39 - so definitely very useful not just for
07:41 - for explicitly saying what's supposed to
07:43 - be in the code but as you change things
07:45 - which almost always happens in code that
07:47 - lives for a while it makes it easier to
07:48 - know when you've messed up or when you
07:50 - still need to change more stuff
07:52 - yeah i think that's an interesting thing
07:54 - when you're learning programming because
07:56 - oftentimes the programs that you're
07:57 - working on are
07:59 - a single file or maybe three or four
08:02 - files that are all working together and
08:03 - so i think it's hard to like replicate
08:05 - this giant system where
08:07 - uh a change in this variable is gonna
08:09 - have like impact beyond what you can
08:11 - possibly uh
08:13 - like track down if you don't have
08:15 - systems like this so it's kind of an
08:16 - interesting thing that's a little bit
08:17 - hard to teach um
08:19 - because a lot of introductory coding
08:22 - lessons are kind of sandboxy and
08:24 - self-contained um so it's a cool
08:26 - experiment and like trying to teach
08:28 - something that
08:29 - is impactful for the really big projects
08:32 - yeah for sure
08:34 - i remember actually that was one of the
08:35 - difficulties in making this course that
08:37 - we didn't want to show people these 50
08:39 - file projects that we needed to show the
08:41 - usefulness in just one file
08:43 - yeah
08:45 - oh cool should i should i move on yeah
08:47 - yeah let's keep going let's see some
08:49 - code
08:50 - um i guess i will also say that
08:53 - uh right now we are live uh and i see
08:55 - people chatting in the youtube chat if
08:56 - you have any questions for for josh um
08:59 - again i cannot imagine more of a
09:00 - typescript
09:01 - expert and so uh
09:03 - uh please feel free to put any questions
09:06 - you have in the youtube chat
09:08 - with love questions
09:10 - it is
09:11 - as someone who's doing this for the
09:12 - first time i'll tell you it is
09:14 - terrifying to me that i am boring people
09:16 - so please stand up give me your
09:18 - questions
09:20 - um but yeah let's look at some
09:21 - typescript uh the first thing that i i'm
09:24 - very excited that we teach about
09:26 - typescript uh
09:28 - oh someone in someone using o3x yeah is
09:30 - that uh
09:31 - a lot of javascript code is also
09:33 - completely totally valid typescript code
09:35 - and vice versa uh this example here that
09:37 - first name is unders equals unders fun
09:40 - fact anders helzberg the architects
09:43 - leader of typescript was also the leader
09:44 - of c sharp another microsoft open source
09:46 - language
09:47 - um
09:49 - it would output this code like first
09:50 - name equals unders so if you were to run
09:52 - this in typescript and then have
09:54 - typescript output javascript which is
09:56 - what typescript does
09:57 - they'd look the same because typescript
09:59 - is a superset it's javascript plus other
10:01 - stuff and if you don't use the other
10:02 - stuff it's still just javascript
10:06 - so the way you might do typescript oh no
10:08 - sorry go ahead josh i guess kind of a
10:11 - uh a question about that i think so when
10:13 - i think of like super sets or like adds
10:15 - add-ons to a language i think of like
10:17 - packages in python of like oh i'm using
10:19 - base python but i want to do some
10:21 - graphing and so i import matplotlib as a
10:24 - package what makes typescript its own
10:27 - language as opposed to like
10:29 - you know a package or an add-on or
10:31 - something like that to javascript or is
10:32 - that definition just like
10:34 - is there a distinction between those two
10:36 - like is is typescript just a javascript
10:38 - package
10:40 - oh that's such an interesting question
10:41 - because there are multiple answers to
10:43 - that
10:44 - um
10:47 - typescript is
10:48 - typescript is technically written in
10:50 - typescript which is fun uh and it's
10:52 - distributed as an npm package so the
10:55 - standard package manager for javascript
10:56 - akin to
10:58 - i forget what the python one is called
10:59 - but the one you i think are referencing
11:02 - um
11:03 - it is
11:05 - so
11:06 - typescript is
11:07 - it's a language and it's a type checker
11:09 - and a compiler all in one thing so
11:12 - there's a specification saying you're
11:14 - allowed to do this console.log or this
11:16 - in code like this is valid typescript
11:18 - syntax and then there's also a package
11:21 - that is called the same thing typescript
11:23 - or the type of compiler that takes in
11:25 - the types of code and outputs javascript
11:27 - code and the way that that package
11:29 - understands how to work with your code
11:31 - is it checks your code against the
11:32 - typescript language spec
11:34 - it says okay this this let is allow this
11:36 - is fine so it'll output the equivalent
11:38 - javascript
11:39 - so when we say typescript is a superset
11:41 - what we really mean is that the language
11:44 - idea of typescript contains all the
11:46 - javascript syntax plus some more stuff
11:49 - and then the typescript package takes in
11:51 - typeship syntax it outputs javascript
11:53 - syntax got it does that seem reasonable
11:57 - yeah i mean it's kind of a hard question
11:59 - to answer like what is a programming
12:00 - language either which is like hard to
12:02 - hard to
12:03 - specifically define in a way that that
12:05 - makes sense um but yeah that makes sense
12:09 - remember talking to someone once who
12:11 - said that people should always learn
12:12 - assembly they're like lowest level
12:14 - bits ones and zeros and then work their
12:16 - way up and i think that that would be a
12:17 - very difficult thing so now we deal with
12:19 - professions
12:22 - yeah uh let's look if we in the
12:25 - bash terminal provided here we've
12:26 - pre-installed the typescript package so
12:28 - if you run tsc which stands for
12:30 - typescript compiler
12:32 - it will
12:33 - create an equivalent file
12:35 - index.js
12:37 - cool
12:38 - interesting how the syntax highlighting
12:40 - is different
12:41 - someone there's a bug somewhere
12:44 - uh but yeah uh index.ts became index.js
12:47 - and similar to this example they're the
12:49 - same thing
12:51 - and if we run
12:53 - node index.js we get the nice hello
12:55 - world
12:57 - yay
12:58 - cool
13:00 - and and just to be clear so like if we
13:02 - try doing node index.ts that is not
13:05 - going to work because node presumably
13:07 - doesn't know how to interpret typescript
13:11 - confusingly it does work um i'm going to
13:15 - sneak peek
13:18 - if you add typescript specific syntax
13:20 - this colon space string is something new
13:22 - and then you try to node index yeah i
13:25 - hit save
13:26 - cool
13:28 - uh you probably need to hit run to save
13:30 - yeah that's what i was trying to do
13:31 - thank you
13:34 - nice so once we start adding typescript
13:37 - specific things to our textbook file
13:39 - then node can no longer run it
13:41 - exactly yeah
13:43 - which is one of the one of the
13:45 - difficulties with typescript that you
13:46 - have to compile from your ts file to
13:48 - your js file using a tool such as tsc
13:51 - the typescript compiler the official one
13:59 - but before we get into those type
14:01 - annotations uh
14:03 - let's look at type inferences so
14:06 - typescript looks at your code and
14:07 - understands things from it based off of
14:10 - all the stuff that it sees being done in
14:12 - this case it can look at your aged
14:15 - variable and see that it's a type
14:16 - boolean because it was initially true
14:19 - or it can look at real age and see its
14:20 - number because it's set to zero by
14:22 - default
14:23 - um this fun fact these little pop-over
14:26 - things we this was a kind of hard to add
14:28 - to the learning environment we added it
14:30 - specifically to support the typescript
14:32 - course at the start
14:33 - uh
14:35 - a fun feature to add
14:37 - ooh someone asked in the chat if i'm
14:39 - working with my react do i need to use
14:41 - typescript not js no you can always use
14:43 - javascript with any package
14:46 - that's popular like react or angular
14:48 - some of the packages really emphasize
14:50 - and recommend typescript such as angular
14:52 - but you can you can still use regular
14:55 - javascript
14:58 - yeah
14:59 - um
15:00 - one of the the cool things about
15:02 - typescript though is that it adds a lot
15:03 - of cool stuff such as helpful inferences
15:06 - in this case uh we are trying to assign
15:09 - a string value four years to real age
15:12 - but the way typescript understands
15:13 - variables is that if it has an initial
15:15 - value it's inferred to be that initial
15:17 - values type it should only ever be that
15:19 - type of value
15:21 - so we're not allowed to say assign a
15:22 - string to something originally type
15:24 - number because typescript thinks well
15:26 - that was originally a number you're not
15:28 - allowed to put a string there
15:31 - does that make sense alex i don't know
15:32 - if that's a reasonable exponent yeah i
15:34 - think that makes sense what happens if
15:35 - you don't give it an initial value does
15:37 - it just kind of stay typeless until you
15:39 - do give it initial value
15:41 - yes it's what's called an evolving any
15:44 - um when something doesn't have an
15:46 - initial value when types of can't figure
15:48 - out what it is that defaults to the any
15:50 - type
15:51 - um
15:53 - ooh this is an interesting
15:56 - ah this is cool so typescript can later
15:58 - figure out in fact typechip will tell
16:00 - editors that hey i can i can figure out
16:02 - from its usage what the type is actually
16:04 - supposed to be i can infer type of thing
16:06 - from usage uh when in this case this is
16:08 - the operator indicating it's either a
16:10 - string or a number
16:11 - got it uh
16:13 - the the any type is kind of a bad smell
16:16 - like normally we try to avoid it
16:18 - um it's called an evolving
16:20 - oh go ahead sorry i was gonna say it
16:22 - seems like it's kind of defeating the
16:23 - purpose of if the special thing about
16:25 - typescript is giving variables types
16:27 - then giving everything be any type is
16:29 - like we're kind of just back to
16:31 - javascript
16:33 - exactly yeah um
16:35 - sometimes you have to sometimes it's
16:37 - just annoying to try to type things out
16:39 - properly but for all the examples we're
16:41 - going to look at today there's there's
16:42 - generally a good type to put in
16:45 - it's evolving because typescript can
16:47 - figure out that after you assign
16:48 - something to it it actually is that
16:50 - things type
16:52 - so after line five we assign a string to
16:54 - real age type chip knows it's type
16:56 - string
16:58 - that's not supported in our editor
17:00 - that's funny
17:01 - but yeah don't do any uh
17:07 - here we go so if we do
17:09 - run to save and then
17:11 - tsc index ts
17:13 - um
17:15 - there we go
17:16 - we see that type string is not
17:17 - assignable to type number is an actual
17:19 - error given to us by typescript
17:22 - fun fact for our learners you can resize
17:23 - this window
17:27 - um
17:30 - it looks like real age the assigned
17:32 - value real age should be
17:34 - four i'm guessing
17:40 - all right cool
17:41 - and if we run psc in next yes no
17:43 - complaints
17:44 - yay
17:46 - cool
17:47 - um but to really
17:50 - dive in here uh the way typescript
17:53 - understands a shape is pretty key to how
17:56 - typescript works overall
17:57 - if we see that first name is muriel and
17:59 - it's a string type ship then knows that
18:01 - first name has all the things the string
18:03 - has like dot life
18:06 - or first name
18:08 - dots
18:09 - not getting suggestions here we might
18:11 - have turned that feature off but like
18:13 - first name dot split or something is a
18:16 - method
18:17 - but if you do first name that two
18:19 - uppercase typescript knows that's wrong
18:21 - did you mean to uppercase with a capital
18:23 - c
18:24 - so that's like i think immediately like
18:26 - the first example of real value that
18:28 - typescript gives someone where if you
18:30 - mistype something it can suggest the
18:31 - correct thing to use there
18:34 - so back in javascript world
18:37 - uh
18:37 - is the difference just that
18:39 - you know our text editor wouldn't
18:41 - recommend dot length because it doesn't
18:42 - know that it's a
18:44 - string or if i tried to dot length a
18:47 - javascript variable would that just uh
18:51 - only work if it is a string
18:53 - yeah um
18:55 - a lot of javascript editors now somewhat
18:57 - confusingly use typescript to
19:00 - understand their auto completion for
19:02 - example vs code very aggressively does
19:04 - that
19:04 - so it might it might tell you you can't
19:06 - use dots whatever the wrong thing is the
19:08 - typo but yeah uh most of the time if i
19:12 - were writing this code in just
19:13 - javascript and i console logs with the
19:15 - wrong thing
19:17 - node index yes
19:19 - it would it would give a crash
19:22 - you would just know at run time oh i
19:24 - messed something up you better go find
19:25 - it which is really annoying because you
19:27 - have to wait until it runs and sometimes
19:29 - it takes a long time to
19:31 - use your program or project or whatever
19:33 - until you get to the point where it
19:34 - crashes so it's quite nice to have it in
19:36 - your editor with a little red or yellow
19:38 - squiggly here
19:40 - nice
19:44 - cool fun fact by the way these are all
19:46 - references to 90s cartoons in this
19:48 - lesson
19:49 - muriel is from courage the cowardly dog
19:51 - one of my favorites
19:53 - uh we got we have a question in chat
19:55 - which uh is maybe a tough tough question
19:57 - to answer but if i'm trying to build an
19:59 - api is typescript better than javascript
20:06 - better is a hard question to
20:08 - answer you don't have to use
20:10 - oh there's some people in the chat right
20:11 - now hi john um
20:13 - you don't have to use typescript uh
20:16 - i'd say if you're not familiar with
20:18 - typescript it can be quite confusing to
20:19 - suddenly use it for an api or some
20:21 - project
20:22 - so i definitely recommend
20:24 - if you do want to use typescript and you
20:26 - don't know it yet bucket some time to
20:28 - really learn it to make it easier for
20:30 - yourself
20:33 - but there are a lot of advantages for
20:35 - typescripts um
20:36 - when you write something in typescript
20:38 - you can output shapes uh definitions for
20:41 - these shapes that we're seeing here so
20:43 - consumers of your api understand better
20:46 - what is supposed to be what types
20:48 - i just think it's a really good language
20:50 - for writing stuff because it gives me a
20:51 - lot of development utilities
20:53 - so i can't really answer the question is
20:55 - it better to use javascript or
20:56 - typescripts but i can say that if you
20:58 - know typescript or are willing to learn
21:00 - and have the time it is very useful and
21:02 - i would recommend it
21:05 - cool
21:08 - uh you see
21:09 - uh
21:10 - what was the need of typescript when we
21:12 - already have strongly typed languages on
21:13 - the back end ah such a good question um
21:17 - typescript is a superset of javascript
21:20 - so you'd use typescript wherever
21:21 - javascript is used and javascript is
21:23 - used in node.js
21:25 - and more recently also in dino which is
21:27 - similar to node but from the same
21:28 - original creator as much more secure
21:31 - so although you could be writing
21:33 - strongly type stuff on the back and say
21:35 - i don't know
21:36 - go or c plus plus or java
21:39 - there's still a lot of advantage to
21:41 - writing things in the same language on
21:43 - your server and client let's say that
21:45 - you have a project a small app that has
21:47 - a back-end server a front-end app and
21:50 - then some shared types that are supposed
21:52 - to be understood
21:53 - maybe you have a cat api the shape of a
21:55 - cat is supposed to be sent from the
21:57 - client to the server or vice versa
21:59 - it's really useful to be able to use the
22:01 - same language and then share type
22:03 - definitions or class definitions between
22:05 - the front end and the back end so even
22:07 - though people
22:09 - might have preferred to write in some
22:11 - other language like c-sharp on the
22:12 - back-end there's still a lot of
22:14 - advantage to writing in the same
22:15 - language so if you're writing on the
22:17 - front-end which is practically always
22:18 - javascript these days
22:20 - for web apps you might as well write in
22:22 - javascript or typescript for the
22:24 - back-ends too
22:26 - so yeah a lot of frameworks like next js
22:28 - and gatsby are popping up because it's
22:30 - really nice to be able to use the same
22:31 - language for your server and clients
22:35 - alex i don't know if that times well
22:37 - with some of the thoughts you have there
22:39 - um
22:39 - [Music]
22:41 - no i think it makes a little bit
22:43 - makes a little bit of sense to me again
22:44 - i'm not a web developer so like even the
22:46 - distinction between
22:48 - um
22:49 - you know i don't
22:51 - quite know the
22:52 - i've never encountered an exact example
22:54 - of like oh this is this is where i wish
22:56 - my front end and back-end language were
22:58 - the exact same um that's never come up
23:00 - just because i'm not a web developer but
23:01 - i can i definitely get your point of or
23:04 - seeing how that might be uh
23:06 - useful cool yeah
23:10 - the world of web development is wild and
23:12 - wacky at times random considerations
23:14 - like using the same language mean much
23:16 - more when using a different language
23:18 - would mean having to
23:20 - cross language boundaries for type so
23:22 - not being able to use the same process
23:23 - to serve a rendered web page
23:28 - yeah i'm gonna i'm gonna fix these
23:31 - errors uh
23:34 - node next yes so the issue was i'm
23:37 - actually going to use typescript's quick
23:39 - fix to change spelling on this one
23:42 - because i love using the typescript
23:44 - things
23:44 - nice thumbnails
23:46 - yeah really cool that we got that in
23:48 - our uh our text editor here
23:51 - you know
23:53 - uh we actually completely overhauled the
23:55 - text editor at around the same time a
23:57 - time as this course
24:00 - it's it used to be something called code
24:02 - mirror and then we switched it to
24:03 - something called monaco to be more
24:05 - accessible so like folks who don't have
24:07 - a mouse or
24:08 - low vision can use it and coincidentally
24:10 - monaco is what is used in vs code which
24:13 - has great typeships of course because
24:15 - it's also written by microsoft
24:19 - yeah you you asked earlier about enemies
24:21 - and this this you were peeking ahead i
24:24 - think instinctively
24:25 - uh what happens if we have yes without
24:28 - an initial value well it's an any which
24:31 - is not great um
24:35 - so it's allowed to be anything
24:38 - and then
24:39 - the end result is typecube doesn't stop
24:42 - you from putting in any particular value
24:44 - on it
24:47 - got it
24:49 - and so
24:50 - i i would have actually expected that to
24:53 - error because again i i would have
24:54 - expected this to be what is called an
24:56 - evolving anywhere um
24:59 - where i would have guessed setting it
25:00 - into blue would have said okay this is a
25:02 - string and then once i set it to one
25:04 - then then it would error um so i guess
25:06 - this surprised me of uh
25:08 - not crashing there
25:11 - yeah to be honest evolving enemies
25:13 - happens so rarely that i i just don't
25:16 - i don't know much about him
25:18 - um i only learned the term after we
25:19 - wrote this course which is why i don't
25:21 - think the course actually references the
25:22 - evolving any concept
25:24 - but yeah i believe it's that it starts
25:27 - off as any and then from there on out is
25:29 - always any and types it might be able to
25:31 - give you better suggestions based off of
25:32 - it if it sees
25:34 - kind of type but it's still any
25:36 - got it makes sense
25:39 - so what some folks might be thinking at
25:41 - that point is well does this mean
25:42 - typescript doesn't let you declare a
25:44 - variable without an initial value
25:46 - but no you you can add type
25:48 - oh that's a typo there should be a
25:51 - no space in front of that
25:53 - formatting preferences so like this
25:55 - phone number thing is a good example
25:57 - where we meant for it to be a string
26:00 - so you can explicitly say say
26:02 - colon space string
26:04 - or colon space whatever the type is
26:06 - supposed to be
26:08 - got it and so that that
26:10 - if we didn't include that it would be an
26:11 - emmy but now that we are including that
26:13 - we're saying hey this thing doesn't have
26:14 - value yet but it will eventually be a
26:16 - string yes
26:18 - exactly
26:20 - what is the
26:21 - what is the concept of like null or
26:23 - undefined or any of that stuff does the
26:25 - typescript handle that in the same way
26:26 - that javascript does
26:28 - it does yeah uh null and undefined are
26:30 - both
26:31 - both types and values so you can say
26:34 - that for example let by value colon null
26:38 - and then my value is only allowed to be
26:40 - you know
26:41 - got it
26:43 - which is useless at first but i guess
26:46 - maybe this is me not knowing javascript
26:47 - what is phone number on line two uh
26:50 - before we give phone phone number a
26:52 - value is it undefined is it
26:55 - no is it uh
26:57 - it is undefined
26:58 - got it
27:00 - um
27:00 - and type people actually tell you if you
27:02 - use it before you've assigned the value
27:04 - it's undefined that's not going to work
27:06 - variable whatever is being used before
27:08 - assigned
27:09 - okay cool and so i guess that's
27:13 - yeah that's
27:15 - i mean i guess that just makes sense of
27:16 - so phone number is going to be a string
27:18 - but it's allowed to be undefined until
27:20 - it is a string
27:23 - cool
27:24 - are you familiar with the term billion
27:26 - dollar mistake any chance
27:28 - no i'm not
27:29 - oh it's one of my favorite things i
27:31 - think we go over it later in the lesson
27:33 - but the idea in a lot of programming
27:35 - languages is that you can
27:37 - you can assign the null value in that
27:39 - language null undefined nil whatever
27:41 - they call it to anywhere that expects
27:43 - some other value type
27:45 - um so like in some languages you'd be
27:47 - allowed to do this
27:49 - and we typescript originally had that
27:51 - billion dollar mistake of allowing this
27:53 - and then later on added a feature so you
27:56 - can you can make it so this is not
27:57 - allowed
27:58 - it was originally there because some
28:00 - languages didn't have an understanding
28:01 - of the difference it was easy to add in
28:03 - but the person who made it uh later
28:05 - called it his billion dollar mistake
28:06 - because this is really annoying and it
28:08 - has caused a lot of bugs perhaps over a
28:10 - thousand dollars of bugs at this point
28:13 - nice
28:15 - um interesting question from chat we
28:17 - were kind of talking about this before
28:18 - but doesn't any type ruin the whole
28:20 - purpose of strongly typed um
28:22 - uh
28:24 - yeah uh
28:26 - i don't think any is of any use because
28:28 - um because again it's kind of ruining
28:30 - the purpose of typescript
28:32 - yeah um
28:34 - it does defeat the purpose of typescript
28:36 - but it only defeats the purpose of
28:38 - typescript in one small little place so
28:41 - i would rather have a file that's 90
28:43 - typescript and has a few endings in
28:44 - there and places that i couldn't type
28:46 - then have a file that's zero percent
28:48 - obvious by zero percent typescript and
28:49 - it's only javascript
28:51 - nice that's a good way to put it
28:54 - um
28:55 - question about difference between let
28:57 - and var that's definitely a
28:59 - javascript thing but does typescript do
29:01 - anything specific with what versus var
29:04 - no typescript recognizes how javascript
29:06 - plays differently with them
29:08 - let's
29:09 - let in javascript and constant
29:11 - javascript
29:12 - are
29:13 - newer than var where var has some weird
29:15 - behavior
29:16 - where like if you do this or hello
29:19 - inside an if statement
29:21 - the hello variable will be
29:23 - available after the if statement
29:27 - uh which is weird
29:31 - saying this
29:33 - yeah because
29:36 - this this code is very confusing to me
29:38 - uh bars get automatically
29:43 - declaration or file so like some even
29:46 - though the var
29:48 - oh no
29:50 - that was weird
29:51 - even though the var is available is
29:53 - declared inside the if and the else it
29:54 - gets hoisted up here so it's as if we
29:56 - did our hello here
29:58 - that's weird and confusing and no one
30:00 - likes that and that's how javascript's
30:01 - been forever latin const don't do that
30:04 - which is why we all prefer them now
30:06 - so if you switch that var to a let on
30:09 - line 8 then line 15 will start to yell
30:11 - at us
30:14 - yeah
30:15 - but yeah that's a javascript thing type
30:17 - ship recognizes a lot of javascript
30:18 - features such as latin bar and counts
30:20 - but does not
30:22 - i love john riley is another typescript
30:25 - person who's done a lot of open source
30:26 - for didn't mention yes it is tony i
30:28 - don't know how to say his last name in
30:30 - the chat who invented them
30:33 - so yeah cool we can now by the way see
30:35 - that phone number is supposed to be a
30:37 - string so i can fix that
30:41 - thanks
30:42 - cool
30:47 - moving on all right
30:52 - line of code made me so happy
30:54 - fun fact i have to fight to get these
30:55 - emojis here
30:57 - uh
30:58 - emojis so we have to fix some bugs
31:01 - cannot only imagine what the emoji uh
31:04 - code course had to go through oh it was
31:06 - hell
31:07 - [Laughter]
31:09 - worth it though
31:10 - uh but yeah typescript is a superset of
31:12 - javascript that adds types it's a
31:13 - language and it's also a compiler that
31:16 - takes in typescript code and outputs
31:17 - outputs javascript code uh typescript
31:20 - has a type system which can look at your
31:22 - code and understand these variables are
31:24 - particular types
31:25 - and once it understands a variable's
31:27 - type it can understand the shape of that
31:29 - variable let's say it's a string so it
31:31 - has a dot length on it
31:33 - if you can't infer a type you can use a
31:35 - type annotation such as colon boolean
31:38 - otherwise typescript will think it's an
31:40 - any type which somewhat defeats the
31:41 - purpose of typescript locally a little
31:43 - bit
31:46 - shape is an interesting term
31:49 - that i feel like i haven't heard in any
31:50 - other programming language i feel like
31:52 - if i were to
31:54 - make an equivalent to java or python or
31:56 - something
31:57 - like that i'd be using class of like
31:59 - okay uh you know i i have this object
32:02 - it's of class dog it can do anything
32:04 - that a dog can do what's it is that kind
32:07 - of the same way to think about shape
32:08 - like how does shape differ from class
32:11 - this is
32:12 - i love this these are such good
32:14 - questions um typescript is such a
32:16 - weird unique language compared to most
32:19 - other mainstream programming languages
32:21 - in that it's structurally tight or shape
32:24 - typed meaning it cares about the shape
32:26 - of objects less than it does the exact
32:28 - reason why they are that shape
32:31 - we'll see this a little bit more where
32:32 - we start defining object shapes
32:34 - but um
32:35 - you can if you define a shape let's say
32:37 - you define an interface and i'll this is
32:39 - a little bit peaking ahead like has
32:40 - length where it defines that something
32:43 - passed in much has must have a length
32:45 - takes as length
32:50 - and then takes has length is provided
32:52 - let's say array and provided a string
32:55 - typescript is structurally typed and
32:56 - only cares about the shapes meaning both
32:58 - of these are okay
32:59 - you don't have to explicitly say that
33:02 - i'm passing in an array or passing it a
33:03 - string as long as the thing passed in
33:05 - happens to satisfy the shape being
33:07 - requested it's allowed so that's why we
33:10 - use both both strings and arrays have a
33:14 - length and so
33:15 - because you've you've said that hey this
33:17 - thing has to have a length those
33:20 - both of those will work
33:21 - yes exactly
33:23 - and even if you pass in some arbitrary
33:25 - object that just so happens to have a
33:26 - length number all we care about that has
33:29 - the length that's fine
33:31 - makes sense
33:33 - and that's different than a class
33:35 - because
33:37 - you know a class is only this specific
33:40 - thing but uh
33:42 - but typescript just says if you're in
33:43 - the shape of
33:45 - what we are asking for then uh
33:48 - then it will work
33:50 - exactly yeah although there are some
33:52 - peculiarities with how tech trip deals
33:55 - with classes
33:57 - uh let's say that we do say this
33:59 - explicitly must be the has length class
34:01 - and then we do takes has length class
34:03 - and pass in
34:04 - an array that's fine uh
34:08 - typescript actually doesn't explicitly
34:10 - need you to pass an instance of the
34:11 - class as long as it satisfies the
34:13 - correct shape
34:16 - uh which is very weird and a lot of
34:18 - people are confused about when they
34:19 - first see it
34:21 - so like this this thing
34:24 - won't satisfy
34:25 - is not assignable parameter of type
34:27 - and honestly i can never remember the
34:29 - reason why
34:30 - this is the case but it has to do with
34:33 - um
34:34 - structural typing being just like a
34:36 - convenient thing
34:38 - so
34:39 - fun
34:40 - nice
34:42 - yeah we're peeking ahead do we have time
34:44 - to move on to the next
34:46 - yeah i mean i'm happy to have you for uh
34:48 - until until noon if uh if you can stay
34:51 - that long i'm done i will note though
34:53 - that i am deploying code to production
34:55 - in the background and every time you ask
34:56 - a question i'm furiously checking to
34:59 - make sure i didn't
35:00 - age of deployment uh we had a slow down
35:03 - earlier today
35:05 - that's always what happens so i might
35:07 - get folded
35:08 - that's all right um
35:10 - maybe um
35:12 - this might be putting on the spot could
35:14 - you show an example of how typescript or
35:16 - where typescript is used on codecademy
35:18 - itself oh absolutely let's look at
35:20 - source code fun fact on codecademy
35:23 - we intentionally keep all of our source
35:25 - maps in production
35:27 - which means
35:28 - you can in your dev tools look at our
35:30 - code
35:31 - uh source maps is the thing that tells
35:34 - some environments such as a browser um
35:37 - this javascript
35:38 - source actually looks like some other
35:40 - file
35:41 - and we also enable the react dev tools
35:43 - on production so if you're a react
35:46 - aficionado like me and you want to see
35:48 - how things work you can use the dev
35:50 - tools to look at
35:52 - all of our stuff
35:53 - so like this article
35:56 - content container is a component that
35:58 - we've declared
36:01 - and i actually don't know how to skip
36:02 - from these dev tools to the source if
36:05 - that's a
36:07 - doable thing
36:08 - that
36:09 - does that work
36:11 - well that almost works but uh article
36:14 - content
36:18 - here we go
36:20 - i guess i'll just look at some other
36:20 - components
36:22 - oh yeah some of these components are
36:23 - kind of
36:24 - wacky but yeah here we go the way that
36:27 - we define an article which is the
36:30 - current container that we're seeing on
36:32 - the screen is it's a we say it's of type
36:35 - reacts of fc so react function component
36:37 - and using the syntax that i think
36:39 - eventually gets introduced called the
36:40 - generic we say that the type of props
36:42 - for this article
36:44 - are article props
36:46 - um i'm realizing as i say this this is
36:48 - all kind of react specific stuff
36:51 - but i will say though that it's kind of
36:53 - hard to find examples of where
36:54 - typescript's really used because most of
36:56 - the time typescript code looks a lot
36:58 - like javascript code
36:59 - like this all is basically javascript
37:02 - code
37:03 - well and then even declaring that i mean
37:05 - i think uh scrolling up a little bit
37:07 - declaring that
37:08 - variable like we that's that same syntax
37:11 - of colon space and then the type and the
37:12 - type it just happens to be this react
37:14 - thing right
37:17 - yeah
37:18 - ooh actually url dot ts
37:21 - here we go we have
37:23 - url we have a file that has all the urls
37:26 - on codecademy so if you ever wonder what
37:28 - all the urls are you could possibly hit
37:30 - in your learning experience url
37:32 - helpers.ts has them and yeah these look
37:35 - a lot more like javascript where some of
37:37 - these parameters we've declared as type
37:39 - colon string
37:41 - yeah
37:43 - oh yeah in fact that's going to be a
37:45 - feature i should scroll past that
37:48 - some previews
37:52 - um
37:53 - cool yeah um
37:55 - so what so i think i i mean my question
37:57 - is like i kind of get it right okay type
38:00 - script or type javascript with types
38:02 - like
38:03 - i guess i'm curious what comes next in
38:05 - the course like there's obviously going
38:06 - to be lots more a lot more subtleties to
38:09 - that but like when you're introducing
38:10 - typescript to someone i imagine you go
38:12 - through these basics of
38:14 - it's like javascript but we can assign
38:16 - types to variables
38:18 - what do you teach next
38:21 - great question i'm going to use this
38:22 - opportunity to shout out the learner
38:24 - experience team at codecademy for
38:26 - building this new course menu which
38:28 - helps me answer that question
38:30 - first we talk about types um which has a
38:33 - lesson some articles about the ts
38:35 - configuration file which is the standard
38:38 - file that
38:39 - folks can write to configure
38:41 - typescript's settings we have them do a
38:43 - couple small projects with it
38:45 - once you understand types we then move
38:47 - you on to functions
38:48 - being able to declare function
38:49 - parameters and optional parameters and
38:51 - types
38:52 - uh once you go through functions we
38:54 - bring you on to my favorite
38:57 - one complex types which actually is a
38:59 - weird name maybe we should rename that
39:00 - to
39:01 - no no that makes sense because we talk
39:03 - about arrays and objects
39:05 - um so being able to type what's in an
39:06 - array or if you have an object literal
39:08 - in javascript what are all of its
39:09 - numbers supposed to be
39:12 - uh and then
39:13 - oh yeah unions and narrowing are one of
39:16 - the coolest things another feature
39:18 - that's not super popular in a lot of
39:19 - mainstream languages but typescript is
39:21 - made popular is union types where you
39:23 - say that something can be one thing or
39:25 - another
39:26 - for example a parameter might be a
39:27 - string or undefined
39:29 - which is where the undefined and null
39:30 - types start being really useful
39:34 - and then lastly there with type
39:36 - narrowing and advanced object types
39:38 - if you do an if statement
39:40 - that checks whether something is say
39:42 - defined type will understand within the
39:44 - if statement that that thing is defined
39:46 - so we can narrow down from a union type
39:48 - which says something is say number or
39:49 - undefined to just number or if it's not
39:52 - defined just
39:54 - and then after that we do fancy advanced
39:56 - object types like i forgot what those
39:58 - are but i would assume nested interfaces
40:01 - and stuff like that
40:03 - yeah i think the the general gist is
40:05 - because typescript just adds to
40:07 - javascript it doesn't make its own
40:09 - opinions and architecture or structure
40:11 - most of the learning for typescript is
40:13 - about how to use the type system to
40:14 - declare your existing javascript stuff
40:19 - a question about union types i guess
40:22 - to me that that again seems like a
40:24 - little bit
40:25 - similar to any where
40:27 - in theory you could union every type
40:29 - together and get any is that kind of the
40:31 - same idea of
40:32 - like oh sometimes in our code we
40:35 - it could be one of two things and so
40:37 - it's like kind of bending the rules of
40:39 - typescript a little bit of like oh we
40:41 - want things to be strongly typed we want
40:42 - this to only be a integer or a string or
40:45 - whatever but in reality sometimes it's
40:47 - gonna have to be one of two things is
40:49 - that
40:50 - a
40:51 - fair way of thinking about that
40:53 - it actually is the correct way of it's
40:56 - not just a uh do i remember right do you
40:58 - have a math background of any sort
41:01 - um slight i mean like you know i took uh
41:04 - calculus 2 in in uh college and stuff
41:07 - but nothing nothing super intense
41:09 - well typescript actually has a lot of
41:12 - type theory and set theory in the roots
41:14 - of its type system and what you just
41:16 - said that the any type is a union of all
41:18 - possible types is actually the correct
41:21 - theoretical way of thinking about the
41:22 - any type
41:24 - so
41:24 - any
41:25 - there was a great talk at the last ts
41:27 - conf from dan vanderkam uh author one of
41:30 - the good typescript books effective
41:31 - typescript about how you can take this
41:33 - one of the analogies was you can take a
41:35 - big piece of marble that's the any type
41:37 - and you can chisel away smaller types
41:39 - from it so maybe one part of it is
41:41 - string and then you can chisel away from
41:43 - string all the possible string literals
41:45 - which actually is the difference between
41:47 - a primitive and a literal the primitive
41:48 - type might be string but the literal
41:50 - type might be empty string or hello or
41:53 - something like that
41:54 - and within the set of all possible types
41:56 - you have these subsets of each other
41:59 - and any yep is the possible union type
42:02 - of anything that could possibly be
42:04 - anything
42:05 - and then like in theory like this string
42:07 - type is the union of all of these
42:09 - smaller string types
42:11 - exactly
42:12 - cool i'm so excited
42:19 - um
42:20 - nice uh well what do you what do you
42:22 - want to do next you want to show any of
42:23 - this stuff off do you want to
42:26 - uh
42:27 - one thing i want to ask you before we
42:28 - leave is about the typescript like
42:30 - community in general i follow you on
42:31 - twitter and see you tweeting about uh
42:35 - conferences and typescript and all that
42:37 - kind of stuff all the time so i kind of
42:38 - wanted to pick your brain about that
42:40 - community and how to get more involved
42:42 - but if you wanted to show something off
42:44 - um or you know show off anything else um
42:46 - i think we we can also do that sure yeah
42:49 - um i'll skip off of codecademy go off
42:51 - platform for the typescript playgrounds
42:53 - and then i'll answer the community
42:54 - question
42:55 - um this i think is the single most
42:57 - useful tool i have found for
42:59 - explaining typescript things to people
43:01 - um it works similarly to the codecademy
43:04 - courses and we're actually going to have
43:06 - a feature soon it's in beta now called
43:08 - workspaces that somewhat work like this
43:10 - we have a playground to work in
43:13 - but uh just showing off the
43:15 - the
43:15 - uh
43:16 - unions thing like if you have a const
43:19 - my i'm gonna get this one right here my
43:22 - name equals math.random
43:25 - josh or alex
43:28 - actually let's make it joshua sorry
43:31 - and then if my name exists
43:34 - we look at my name
43:36 - here um
43:38 - typescript understands that my name is
43:40 - no longer josh or undefined it's
43:42 - specifically josh
43:43 - got it because you wouldn't get into
43:45 - that if statement otherwise
43:46 - exactly so here we have the concept of a
43:48 - type union uh using a type literal not
43:51 - just the primitive string but literally
43:53 - josh or undefined
43:55 - and then we have my name here
43:58 - uh
43:59 - and then in the else statements
44:01 - my name is
44:04 - undefined
44:05 - cool nice yeah this playground is great
44:08 - uh it is
44:09 - it has a whole bunch of plugins uh orto
44:12 - a former member of just the type of
44:14 - community and now also remember the
44:15 - types of teams set it up very nicely
44:17 - so there's like a presentation mode and
44:19 - all sorts of cool stuff
44:21 - um the type of website itself which has
44:23 - a link to the background
44:25 - uh is very good has a lot of really
44:27 - great documentation and resources so if
44:29 - you want like the pure docs and not a
44:31 - guided walk through the way academy is
44:34 - typestripline.org
44:36 - on the community sites um they're super
44:39 - active on twitter and github fun fact if
44:42 - you go together.com microsoft typescript
44:44 - issues there are
44:46 - five last i checked there were 4900 now
44:49 - it's
44:50 - rounding up to 5 000 issues
44:53 - so uh i would recommend if you have a
44:55 - problem with the language figure it out
44:57 - or try to figure it out on stack
44:58 - overflow first and then if you actually
45:00 - think you've found a bug or identified a
45:02 - feature that you want to add to the
45:04 - language if they're totally open to
45:05 - these things provided you do your due
45:07 - diligence and like see if someone's
45:09 - asked for the same thing before
45:11 - uh very fun place to be
45:13 - they also have you have you worked on uh
45:16 - on this repo have you worked on you know
45:19 - any of these issues yeah um
45:21 - i actually have two open pull requests
45:23 - now i've merged a few dozen uh into
45:26 - typescript um
45:28 - one is a really cool feature actually
45:30 - where
45:31 - um
45:31 - [Music]
45:33 - you can it like improves how typescript
45:35 - narrows things in the falsie case
45:37 - um let me see
45:41 - so the types of playground can preview
45:42 - different types of versions or even like
45:45 - knives
45:46 - so like in in the original
45:48 - type scripts
45:50 - playground
45:52 - in the current version of typescript
45:54 - if you do if text on stringer undefined
45:57 - and then else here text is inferred to
46:00 - be string or undefined because it could
46:02 - be the empty string or it could be
46:04 - undefined if it doesn't exist
46:06 - and this feature i'm trying to propose
46:08 - we change it so that typescript
46:09 - understands
46:10 - it's only a falsie string so it would be
46:13 - uh has to be empty empty string were
46:15 - undefined
46:17 - cool
46:18 - that makes sense the benefit of being an
46:20 - open source language
46:24 - this is a
46:25 - this is
46:26 - maybe a very random question but when i
46:28 - see these kind of
46:30 - uh
46:31 - i don't even know how to describe it
46:32 - inferences that the language is making
46:34 - based on uh using conditionals and based
46:36 - on the
46:38 - uh
46:38 - type of variable i guess i think of um
46:43 - short circuiting in
46:45 - java where
46:46 - you know if i have
46:48 - um true or
46:50 - whatever that java just like won't even
46:53 - look at the at the or because it knows
46:55 - that true happen uh
46:57 - it knows that the thing is going to be
46:59 - evaluated to true um is this at all
47:01 - related to any of that uh
47:04 - any of this of like kind of shortcuts
47:06 - that the language can take
47:08 - um yeah okay so i can infer yeah yeah
47:12 - like shortcuts short circuiting and
47:14 - inferences in the type system
47:16 - yeah
47:17 - fun fact types it actually i think has a
47:20 - checker for this
47:23 - it'll tell you if there's unreachable
47:24 - code i don't know how often it's
47:29 - oh yeah there we go
47:30 - yeah
47:32 - so that's the control flow analysis
47:34 - checker i think that's called
47:37 - yeah in the type system i think it's
47:38 - equivalent yeah
47:40 - cool
47:43 - oh and for the community um once you're
47:46 - done playing around on the uh
47:48 - the playground a lot of people end up
47:50 - needing to integrate with external
47:52 - packages when they're using typescript
47:53 - like let's say you are writing a react
47:55 - package
47:56 - and react itself is not written in
47:58 - typescript so you would use what's
48:00 - called a definition file or a types
48:02 - package to tell your local typescript
48:04 - how your external packages such as react
48:07 - are meant to look
48:08 - and the typescript playgrounds which is
48:10 - linked sorry not the playground the
48:12 - typescript types search tool which is at
48:15 - aka.ms types my favorite url in the
48:18 - world
48:21 - is a great search engine that'll tell
48:22 - you how to get the types for example for
48:25 - react you install the
48:27 - types react npm package which will then
48:29 - tell your texture project what react
48:31 - looks like
48:33 - nifty
48:36 - um
48:37 - if i am brand new to this uh or maybe
48:41 - i've taken that codecademy course and
48:42 - want to
48:44 - continue learning typescript like what
48:45 - is the thing that i should do from there
48:50 - great question uh the codecademy
48:52 - projects in the course are pretty good
48:55 - um for getting you
48:57 - set up with some types of stuff um being
48:59 - able there's a difference that a lot of
49:01 - our learners have noted between writing
49:03 - stuff in the
49:04 - codecademy ecosystem and then moving off
49:06 - platform so these projects i think do a
49:08 - good job of helping you
49:09 - get there
49:10 - once you've done them
49:12 - uh
49:13 - because javascript's a prerequisite for
49:15 - typescript just conceptually the way we
49:17 - have it set up it's probably
49:19 - reasonable to assume that you might have
49:21 - other javascript projects you've already
49:22 - written
49:23 - so maybe convert those to typescript
49:26 - i think that's a fun thing and any
49:28 - really any project that you've done in
49:30 - javascript i think would be a a
49:32 - theoretical good example of something to
49:34 - do in typescript excuse me um i
49:37 - personally really enjoy writing connect
49:39 - four as a game it was like my first
49:41 - project when i did c plus plus the first
49:43 - language i learned for more than a year
49:45 - um so like writing a typescript thing in
49:47 - c uh for connect four is
49:50 - i think a good idea it's like a good
49:51 - good way of showing basic logic in a
49:54 - more complex project so that's my
49:56 - recommendation
50:01 - um every year there's
50:03 - oh sorry one more thing i wanted to know
50:04 - every year there's a
50:06 - conference ts comp which actually just
50:08 - happened last week uh so recommend
50:10 - checking out ts conf next year
50:12 - csconf2022
50:14 - josh do you want to plug your book
50:17 - oh yeah matt
50:18 - well now that you mention it yes i am
50:20 - writing a book but it's it's scheduled
50:22 - to be published in either somewhere
50:23 - within july through september of next
50:25 - year um
50:27 - i don't know if i'm allowed to plug it
50:29 - on this stream as it competes with
50:30 - codecademy but it is a typescript
50:33 - type
50:34 - follow josh on twitter
50:36 - yeah
50:37 - yeah i'm on twitter joshua k goldberg
50:40 - you can look me up i have somewhat okay
50:42 - seo so look forward to hearing from all
50:44 - y'all about typescript
50:48 - um yeah and then anything else you wanna
50:50 - you wanna say about typescript or or
50:52 - show no but thank you for having me this
50:55 - was fun i hope i hope our learners got
50:57 - something out of it
50:58 - yeah um thank you everyone for watching
51:00 - so this was um really the first time
51:02 - that we've had um you know a real
51:04 - engineer at codecademy
51:06 - um walking us through stuff i think um
51:09 - i don't have anything scheduled right
51:10 - now but um i'm gonna be reaching out to
51:13 - other engineers to see if they wanna do
51:15 - things like this uh if you have ideas of
51:18 - things that you want to see um feel free
51:20 - to put those in the comments of this of
51:21 - this video on youtube um and then we
51:24 - also have uh fede from our community
51:27 - team um is doing a lot of
51:30 - live streams like this with our
51:32 - recruiting um or
51:34 - uh yeah with our recruiting department
51:37 - and talking about um how to get jobs in
51:40 - tech so
51:41 - um
51:42 - not as hands-on with code but still
51:44 - super valuable if that's what you're
51:46 - interested in so um i think he has
51:48 - another one of those coming up uh next
51:50 - week so be on the lookout for that
51:53 - um josh thanks so much for for doing
51:55 - this this was great to get an hour of
51:57 - your time
51:58 - thank you
51:59 - see you next time