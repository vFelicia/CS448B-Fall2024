00:00 - oh my gosh who's the first person we see
00:06 - befeathered garc√≠a lorca say hi everyone
00:11 - hello okay cool just wait a bit for
00:25 - everyone to get settled in I'm seeing
00:31 - ready for the swift coolness hi everyone
00:35 - this is awesome yeah just right in the
00:37 - chat your name and where you're from and
00:40 - what get started oh one thing about oh
00:45 - hi ELISA
00:45 - again hi Lena and Alex D they know
00:50 - everything
00:50 - hello we actually have a hold on one
00:53 - second you guys this is so cool we have
00:55 - this is it showing so just like a quick
01:09 - rundown and then I'm gonna go away I'm
01:11 - gonna fade away use the chat to chat
01:15 - with each other on chat you can chat to
01:18 - the panelists that's Alex and Galina or
01:22 - if you use the drop down you can chat
01:25 - with each other by saying all panelists
01:27 - and attendees that's the fun one and use
01:33 - the Q&A box for all questions okay that
01:38 - is so officially it from me thanks Alysa
01:45 - thanks Melissa
01:49 - okay I'm so hi everyone we have a poll
01:55 - actually to poll questions that you guys
01:58 - can answer as you're getting settled in
02:00 - this just gives us some information
02:03 - about you and who's joining us today so
02:04 - if you see the polling button at the
02:08 - bottom and if you click that you should
02:10 - be able to see two questions
02:12 - so go ahead and pull those out and then
02:21 - also just like while we're here we do
02:23 - have some resources I'm gonna post them
02:24 - in that chat so some of the resources
02:27 - that you're going to see in there it's
02:30 - gonna be a box a lot we have our learned
02:32 - from home day syllabus we have some
02:34 - customer support swift resources in
02:38 - general or learned from home blog post
02:40 - so I'm just guessing that into the chat
02:41 - now so we have lots of things for you to
02:45 - look at and feel free to ask for these
02:46 - again because we know that they're gonna
02:48 - get lost in this check is already have
02:50 - so many people see yet you should be
02:56 - able to access the lecture videos after
02:59 - this goes on and this is being recorded
03:01 - and then if you guys have questions the
03:03 - best place to ask that is that Q&A panel
03:05 - Oh awesome we have plenty of questions
03:10 - um can we add the links here yep sure I
03:14 - will add that add those links that I
03:17 - gave you right now what lessons have you
03:23 - worked on that's a great question on
03:25 - Galena I'll let you answer that first
03:26 - one yeah um so I've officially
03:29 - co-authored Swift they learned so of
03:32 - course with Aleks
03:33 - as well as Sonny he's also one of the
03:38 - hosts here today and Kenny so we've
03:42 - worked on that currently Alex and I are
03:45 - gonna be working on something called
03:46 - Kotlin which is really exciting and
03:49 - previously i also you may have seen me
03:52 - do a couple of project walkthrough
03:54 - videos in the Ruby on Rails course the
03:57 - Python course even the Java course so
04:00 - just a little bit of everything really
04:05 - great and then I've also I joined
04:08 - recently in January and I've been a part
04:11 - of the learn Swift course um yeah
04:18 - so as we go through this just make sure
04:21 - to write your questions into the Q&A and
04:24 - we'll get to them as soon as we can we
04:27 - might not be able to answer it right
04:29 - away as we're walking a lesson but rest
04:31 - assured we'll try to cover as many as we
04:33 - can if you will give just another minute
04:39 - or two for everyone to get settled in
04:43 - I'm seeing one
04:45 - I'm seeing a couple things saying that
04:47 - they can't see the links in the chat Oh
04:50 - oh thanks Leonard Leonard Leonard oh man
04:56 - hold me down all right cool I'm going
04:58 - away now great and then on yep they're
05:04 - also in that Q&A we answered one of
05:06 - those questions that's gonna be in there
05:08 - hmm let's see
05:11 - someone just wrote I'm not seeing Galena
05:16 - can you guys see me I'm seeing you
05:20 - Galena I see you I'm looking at the
05:28 - polls now there's a hundred and eighty
05:31 - three of you who know your way around a
05:33 - code editor awesome and how many of you
05:37 - want to be the next Steve Jobs 54 Thanks
05:41 - okay
05:54 - what time is it maybe let's give it to
05:58 - 1208 to reminisce yeah two more minutes
06:01 - sounds good so if anyone's here what
06:17 - course did you just come from is this
06:18 - your first course of the day were you in
06:21 - the the JavaScript course before let us
06:24 - know P 5 yes awesome we were there too
06:31 - so it's great saying that everyone's
06:33 - joining in from there yes HTML awesome
06:36 - first course hello welcome Python cool
06:50 - no there I saw a question there wasn't
06:53 - Python I think that that's just like the
06:55 - last course that somebody was taking
06:57 - yeah yeah but like I think that your
07:01 - question Alex was like which session did
07:04 - you just come from so it looks like
07:06 - people are really following the track
07:07 - right now yeah that's awesome so you'll
07:11 - have to see that
07:16 - Ellen wrote in the QA and not sure if I
07:18 - missed this which link are we supposed
07:20 - to go to to follow lesson yeah that's
07:22 - actually one that we're going to link to
07:23 - in a few minutes as we get started so
07:26 - yeah it was anything see what will we be
07:33 - learning Kaela just asked that and we're
07:35 - gonna be learning about getting started
07:37 - with programming with Swift so if you've
07:40 - never coded before this is gonna be a
07:41 - great course for you we're gonna get
07:43 - into some basics of how you start with a
07:45 - code editor and how you write programs
07:48 - using the Swift language so that is a
07:50 - great question we're super excited to go
07:53 - through this with you
07:54 - how many uses two Swift have in real
07:57 - life well one of the major ones you'll
07:59 - see this as a programming language for a
08:01 - lot of Apple products so a lot of app
08:03 - development comes
08:04 - but we're going to talk a little bit
08:05 - more about that in just a bit
08:07 - I also in advance apologize a little bit
08:12 - for the background noise I am from New
08:15 - York so there's quite a bit of
08:16 - background noise so let me know if you
08:19 - guys can hear me okay and yeah
08:21 - definitely a lot of Hong Kong yeah if
08:26 - you're in the West if you were in the
08:28 - last lessons with Kenny and Alex you
08:32 - hear a lot of sirens in the background
08:34 - that might be here too yes the police
08:36 - are also coming after us
08:40 - from Turkey cool do we get started ox
08:50 - yeah let's do it
08:51 - Oh awesome alrighty so I am going to
08:55 - share my screen okay can everybody see
09:05 - my screen this how's it looking into
09:10 - chats Alex look we have so many chats
09:13 - going on this is awesome
09:16 - okay great as long as everybody can see
09:18 - my screen yeah we are going to first be
09:22 - navigating to cook Adam EECOM slash
09:25 - learn slash learn from home conference
09:28 - we can post this in the chats as well
09:34 - all right so I just posted into
09:36 - something everybody okay here we go turn
09:44 - again alright so now you should be
09:45 - linked to that learn from home
09:47 - conference so everyone should be able to
09:48 - see that yes if you're logged into code
09:51 - Academy you should have access to this
09:53 - page it's available for everybody so
09:58 - this learn from home conference page is
10:01 - made specifically for today it contains
10:04 - all of the courses and lessons that
10:07 - we're going through throughout today's
10:10 - sessions so we are going to be
10:12 - particularly focused on number five
10:15 - which knows languages and usage
10:17 - introduction to Swift so you should not
10:21 - have any progress on these if you do
10:24 - feel free to keep it or if you would
10:27 - like to reset your progress and start
10:28 - from scratch you can do so as well there
10:31 - should be
10:31 - a reset button so after you hit start
10:34 - there would be a reset button at the
10:38 - very top of the course so I'll try to
10:40 - show you guys that once so if we click
10:44 - and from home I guess because I didn't
10:49 - start the content yet it's not here but
10:50 - typically there would be a bris reset
10:52 - progress all the way over here
10:54 - so if you can click that it should start
10:57 - you from scratch did everybody get a
11:06 - chance to navigate to this page
11:14 - good looking good we have lots of
11:17 - guesses in here um okay so as you're all
11:22 - navigating to this page we'll just take
11:24 - a second to officially introduce myself
11:26 - and Alex I am a curriculum developer
11:30 - here at the Academy I've worked on the
11:32 - learn Swift course and also worked on
11:35 - various different parts of the
11:37 - curriculum so I'm really really excited
11:39 - to be here with you guys today and then
11:43 - I'm Alex I've also worked on the learn
11:45 - Swift course and I'll be working with
11:46 - Galina on our upcoming learn Kotlin
11:48 - course I joined pretty recently in
11:52 - January but we're super excited to be
11:54 - here all righty so if everybody is ready
12:02 - let's get started
12:05 - so click on this hello world interactive
12:08 - lesson and it should take you to the
12:10 - very first exercise of this lesson okay
12:16 - we have some really fun artwork here too
12:19 - okay so what is Swift
12:21 - Swift is a powerful and intuitive
12:24 - general-purpose programming language
12:26 - developed by Apple its development
12:28 - started in July of 2010 and it's
12:31 - versions still get updated today so much
12:35 - of the inspiration for Swift came from
12:37 - Pascal Ruby c-sharp Python and so many
12:40 - more other programming languages so if
12:43 - you know any programming languages and
12:45 - you're coding in Swift you may find
12:47 - syntax and concepts that are very
12:48 - similar to Alain which you're already
12:50 - familiar with so yeah the Swift syntax
12:54 - is very concise but expressive and it
12:57 - has modern features that make it the
12:58 - perfect first language for beginners and
13:00 - one experienced developers also enjoy
13:04 - transitioning into so its first version
13:07 - was released in 2014 with the intent to
13:09 - create applications for all of these
13:12 - products so since then hundreds of
13:16 - companies including uber and slack have
13:18 - incorporated Swift into their tech stack
13:20 - so as you can see we have this really
13:22 - cool gift on the right side and it
13:24 - represents all of the company Alex you
13:26 - not all of them but
13:27 - some of the big companies that you may
13:29 - recognize that use swift in their
13:31 - textile so why don't you go ahead and
13:34 - write in the chat which companies you
13:36 - see lifts Apple Google Maps Ritter this
13:57 - little bird over here well we have the
14:04 - Apple watch down here yeah okay so let's
14:15 - get started with our exercise just out
14:20 - of curiosity can you guys see the when
14:23 - I'm viewing the chat panel no okay all
14:28 - right so let's move on
14:31 - first exercise hello world so take a
14:34 - look at the hello duck swift file in the
14:37 - code editor that is placed in the middle
14:38 - of the screen so in case this is the
14:41 - first session that you're entering in
14:42 - your very new to Academy we're just
14:44 - gonna do a very quick run-through of the
14:46 - learning environment so the learning
14:48 - environment is where you input your code
14:50 - you get instructions from us and so on
14:53 - so in the middle of the screen which is
14:56 - where hello to swiftest that's your code
14:58 - editor this is where all of your swift
15:00 - code is going to go on the right side to
15:03 - that is a black panel that demonstrates
15:06 - the output terminal so anything that we
15:09 - type into here as we click run it's
15:12 - going to run our code on the right so
15:14 - we're gonna get into more what this code
15:16 - is doing but just one minute to
15:18 - familiarize you guys with this entire
15:20 - platform so on the left hand side we
15:23 - have the narrative so the narrative
15:24 - explains the instructions teach us
15:27 - something and just the main part of the
15:31 - exercise is handled in the narrative and
15:33 - then if you scroll on down there are the
15:36 - instructions which are the
15:38 - points as we call them so as you go
15:40 - through an exercise it's going to have
15:43 - checkpoints to check if you how well you
15:46 - understood the concept it's gonna give
15:48 - you an exercise to do so yeah and as
15:51 - you're going to go through it you are
15:53 - going to hit run and it's going to check
15:56 - your code and click check if it's
16:00 - correct or incorrect and if it is
16:02 - correct it's going to mark this check
16:04 - box screen as I have it on the left
16:07 - right now so actually I'm going to make
16:10 - sure I reset this so that I don't have
16:13 - this checked off and you guys all show
16:16 - should have a gray box on the left not a
16:19 - checked off one okay all right so let's
16:30 - get started so take a look at hello dot
16:33 - Swift and the code editor that is placed
16:35 - in the middle of the screen
16:35 - it's a swift program so when learning a
16:38 - new language tradition suggests that our
16:40 - first program prints those screen
16:42 - hello worlds in Swift this can be done
16:45 - in a single line with a print statement
16:48 - so we'll get more into what a print
16:50 - statement is but just for now
16:51 - familiarize yourself with how it looks
16:53 - so everything inside these double quotes
16:56 - will be printed to the terminal and
16:58 - that's remember the black panel on the
17:00 - right and it's the window that allows
17:03 - people to interact with a computer
17:04 - program it should be blank right now but
17:07 - that's going to change in a moment okay
17:10 - and just a quick reminder here if you
17:12 - don't understand something at the moment
17:13 - rest assured we're going to cover these
17:16 - concepts more in depth as we go forward
17:19 - throughout the lesson I'm just gonna
17:22 - check on the chat for a second to make
17:24 - sure I'm or Alex how's it looking over
17:27 - there looking good looking good
17:30 - great okay so if everybody's ready to
17:33 - run their first program
17:34 - let's hit run and I've done that before
17:38 - so you can already see the output on the
17:41 - right notice how we just see hello world
17:44 - exclamation mark we don't see the quotes
17:46 - we don't see the print statement and we
17:48 - don't see the parentheses that's because
17:50 - the print statement is a
17:52 - special built-in function from Swift
17:54 - that allows us to output something to
17:56 - the terminal so here we're just
17:58 - outputting something that says hello
18:00 - world also one other thing I wanted to
18:05 - mention if you guys are running in into
18:07 - any issues like you're not able to pass
18:09 - the exercise even though your code is
18:11 - correct or something just seems not
18:13 - right do send us a message in the chat
18:16 - or the Q&A post a screenshot of your
18:20 - window so we can see exactly what's
18:22 - wrong and try to be as descriptive as
18:24 - possible in your issue so we can really
18:26 - help you up okay so if everybody's ready
18:31 - let's move on to the next step cool so
18:36 - let's talk more about print so we
18:39 - learned how to output a line of text
18:41 - with the following code I'm just gonna
18:43 - refresh my page um seemed I have some
18:47 - kinetic connection issues oh cool as
18:50 - soon as you see this connected to cook
18:52 - atom II you're good to go but yeah so we
18:54 - learn how to output a line of text with
18:56 - the following code so we actually did a
18:59 - hello world but here it shows you that
19:01 - you can use emojis too which is really
19:03 - fun so having a print statement that has
19:06 - a car and this like poof wind emoji is
19:11 - going to output just the car and the
19:13 - wind emoji so we can also output
19:15 - multiple lines by adding more print
19:18 - statements so if we have print hello and
19:21 - print goodbye as you should already have
19:23 - it in your code editor running it is
19:26 - going to output hello and goodbye so
19:29 - don't mind this error message at the
19:31 - bottom at the moment this is just
19:32 - checking my instructions so I can either
19:36 - in person yep domani know what happens
19:38 - if we add a semicolon to the end of one
19:40 - of these print statements someone's was
19:42 - wondering if it was an optional thing in
19:44 - Swift yes very good question so if we
19:47 - add this I'm just curious
19:49 - is that person coming from JavaScript
19:51 - because there's a lot of semicolons in
19:52 - JavaScript that's my guess it's probably
19:54 - the JavaScript one but yes good question
19:57 - so if you add a semicolon Swift is going
20:00 - to ignore it it's very generous with
20:02 - some of its syntax
20:03 - so you're not going to get an error if
20:05 - you use a semicolon but for the purpose
20:08 - of staying with best practices and
20:11 - having clean code I'm just gonna remove
20:13 - this because Swift will not throw an
20:16 - error without okay so yeah so these
20:22 - print statements something really really
20:24 - interesting about Swift code is it is
20:26 - read from top to bottom so I didn't have
20:28 - good bye hello printed I had hello
20:30 - goodbye because that is the way that I
20:32 - laid out the code okay so now let's get
20:36 - into doing a little coding challenge so
20:39 - instead of displaying the two lines in
20:41 - the code editor which we already did
20:43 - um edit the code so that we output the
20:45 - following pattern in the terminal okay
20:47 - so we want it to look exactly like this
20:51 - but in this terminal in the black panel
20:54 - okay so let's get started so the key
20:59 - thing here is the spacing so be very
21:02 - careful with how you space it I'm gonna
21:04 - try and use tabs you can also maybe try
21:08 - space let's see how that works out but
21:10 - as long as you're using one or the other
21:12 - staying consistent is key so we'll have
21:15 - a first print statement that's going to
21:17 - have our one a second print statement
21:22 - that's gonna have our two or three so
21:25 - let's start pushing these off yeah so
21:30 - when you use spaces and tabs it kind of
21:33 - creates this disconnect so make sure to
21:36 - use one or the other
21:43 - okay now
21:44 - that's one so I'm using one space
21:48 - between the digits but I'm using tabs to
21:52 - get from the opening quote to the ending
21:55 - quote and then we're gonna have or i6
22:05 - push that back and then we're gonna have
22:10 - 7 8 9 10 ok so you see how now we have
22:18 - this little disconnect that means we
22:19 - should start with an extra tab in the
22:21 - front so I'm gonna tap this let's do one
22:31 - more
22:31 - hey Galena yeah you're doing that there
22:35 - I'm like I selfishly want the answer to
22:38 - this how do you type an emoji in a code
22:41 - editor from Gregg Garin oh yeah sure um
22:44 - so we actually have an exercise within
22:47 - an emoji in the next exercise so we'll
22:51 - get to that in just a minute okay so
22:57 - once we hit run we have our pattern on
23:01 - the right the 1 2 3 4
23:04 - basically all the numbers to 10 that are
23:07 - laid out and kind of like a pyramid
23:08 - scheme so how is this one guys did you
23:12 - get the right answer
23:15 - great awesome
23:17 - yeah lots of yeses lots of yeses all
23:22 - right so let's move oh one other thing
23:25 - I'm not sure if I mentioned before we
23:27 - have this stuck get a hint feature which
23:30 - allows you to get a hint for the
23:32 - exercise without necessarily getting the
23:34 - solution from running the code multiple
23:36 - times so be sure to check that out if
23:38 - you get stuck and one other thing I'll
23:42 - mention here at the bottom we have this
23:44 - reset to circular arrows so you can
23:48 - reset the exercise once you click that
23:50 - it deletes all of the code in your code
23:52 - editor you can also share your code and
23:55 - you can also copy your code to the
23:57 - clipboard
23:58 - so if you want to flag any issues to us
24:01 - with your code feel free to use one of
24:03 - these options and then a few people
24:07 - asked is there any way to do this all
24:10 - these prints in one line of code instead
24:13 - of doing several ones and one of the
24:15 - ways you can do that I believe is
24:16 - backslash N and then that should start a
24:20 - new line and then you could do that with
24:21 - just one print statement instead of like
24:23 - multiple yes for now we're just
24:26 - practicing how to work with print
24:28 - statements so but yes normally you
24:30 - wouldn't want to repeat so many in your
24:32 - code okay
24:34 - comments we're on the fourth exercise
24:37 - almost done comments are a very
24:40 - interesting feature in almost any
24:42 - programming language so as we write our
24:45 - code our code can quickly become
24:46 - difficult to understand when we return
24:48 - to it even if it's just a few hours
24:50 - later I've noticed if I'm coding
24:52 - especially a long program and I have a
24:55 - specific ID in mind and then I go take a
24:57 - lunch break or I go for a walk and then
24:59 - I come back and I start to wonder what
25:01 - was I thinking what was I writing what
25:02 - was happening
25:04 - so this is where Commons come in handy
25:06 - so for this reason it's often useful to
25:09 - leave a note or reminder in your code
25:11 - for our future selves or other
25:12 - developers so comments explain what our
25:15 - code is doing leave instructions for
25:18 - developers using code or add any other
25:20 - useful annotations so in Swift there's
25:24 - two different ways that you can create a
25:26 - comment so you can create a single line
25:29 - comment which will comment out a single
25:32 - line and is denoted by two forward
25:34 - slashes so I'm going to just copy this
25:38 - code paste it in the editor as we're
25:41 - going through this you don't have to do
25:43 - this this is just for me to show you
25:45 - guys how it works and so here as you
25:49 - notice we have our two forward slashes
25:51 - so as soon as you put those two forward
25:54 - slashes so if looks at it and says well
25:57 - okay that's a comment we're not going to
25:58 - run on that code and you can see how
26:01 - it's grayed out so that kind of gives
26:03 - you a hint as to which part of it is a
26:05 - comment which part of it is actual code
26:07 - that the compiler is going to run so
26:09 - another thing you can see in this
26:11 - second option is you can also write a
26:14 - comment on the same line as you write
26:17 - your code so it doesn't necessarily have
26:19 - to be two different lines you can also
26:21 - add this prints hi on the same line as a
26:24 - print statement and oh yeah I don't want
26:29 - to interrupt yeah maybe finish that and
26:33 - then I'll come back with what I'm seeing
26:34 - in the chat okay cool um yeah so you can
26:38 - write a prints a comment on the same
26:40 - line as the code or a comment on a
26:42 - separate line but now unless I'm really
26:45 - curious what that question is yeah I
26:47 - mean I'm seeing this pattern of
26:50 - questions come through oh this is very
26:53 - similar to Python or this is just like
26:54 - JavaScript and then there's this
26:56 - question of like which one is this more
26:58 - like can you and/or Alex speak to the
27:03 - similarity to other languages people are
27:06 - like Paige yeah certainly um Alex do you
27:11 - want to take over yeah I could start off
27:14 - with some stuff so one thing is Swift as
27:16 - a type safe language and we'll get into
27:18 - type safe in the next in the next
27:20 - exercise and so that just means when we
27:22 - declare variables and when we use data
27:24 - we have to stick with the same type of
27:27 - data with our variables whereas Python
27:29 - you could switch things you could start
27:31 - python as a string and then immediately
27:33 - change your variable to a number but
27:35 - with languages like java and swift and
27:39 - that's gonna kind of give you an error
27:40 - yep so Julia said type Swift is a type
27:43 - safe language and when we declare
27:46 - variables we need to stick to the same
27:47 - data type Thank You Julia yes perfect
27:51 - and in addition to that also I'll cover
27:53 - just the syntax portion of it yeah so
27:55 - print statements also I believe exist in
27:58 - Python and so the syntax is very very
28:01 - similar and as well as in java scripts
28:06 - the way that a console dot log works
28:08 - it's very similar to how a print
28:09 - statement works in Swift so the syntax
28:12 - is very very similar in some ways but in
28:15 - some ways it's also different so the
28:17 - reason that's what the reason that is is
28:19 - because Swift was inspired by many other
28:21 - Pro
28:22 - any language is just like we've
28:23 - mentioned before so a lot of the syntax
28:25 - is very similar but there's also a lot
28:27 - of things that are very Swift specific
28:29 - just like Alex mentioned it being a type
28:32 - language so yeah there are some
28:35 - differences but also some similarities I
28:38 - also believe that comments with a
28:41 - forward slash are also written like this
28:43 - in JavaScript as well as the multi-line
28:46 - comments so I think that inspiration
28:48 - came from JavaScript okay cool so where
28:54 - were we
28:55 - o multi-line comment okay so a
28:57 - multi-line comment will comment out
28:59 - multiple lines as denote and denoted by
29:01 - a forward slash asterisk to begin a
29:04 - comment and asterisk forward slash to
29:08 - end a comment so I'm just going to copy
29:10 - and paste this into the code editor to
29:11 - show you guys how that works okay so if
29:17 - I run this what do you guys think is
29:20 - going to output to the terminal
29:32 - getting a lot of highs a lot of highs is
29:39 - that answer going into Q&A maybe um I'm
29:44 - getting a lot of the answers in the chat
29:46 - right now okay cool um so guys oh um yes
29:51 - okay great somebody said nothing very
29:54 - quick so why nothing why do you guys
29:58 - think nothing will output to the
29:59 - terminal if I click run okay Barry yeah
30:08 - it's very good the code will print high
30:10 - but the comment won't print okay perfect
30:14 - very good great job everybody who said
30:16 - hi perfect yeah so we run it don't mind
30:21 - this error at the bottom for a second
30:22 - because that's just checking our code
30:24 - but yes the comment is not going to be
30:26 - read it's not going to run so we can put
30:29 - anything we want in here and look this
30:31 - can go as long as we want it to go hey
30:34 - there so we can write anything we want
30:40 - and it's not going to be interpreted
30:41 - okay so let's delete all of this and now
30:49 - let's get into number one let's practice
30:52 - adding a comment to create a single line
30:54 - comment with forward slashes followed by
30:57 - your favorite emoji so here's where our
30:59 - emojis come in so I'm gonna do two
31:02 - forward slashes and let's take a second
31:05 - for you guys to maybe google your
31:07 - favorite emoji or if you want to you can
31:10 - also grab one from the hint I'm not
31:11 - gonna open it cuz I don't want to show
31:13 - the answer but yeah grab an emoji and
31:16 - put it in the comment got it is it work
31:32 - to do
31:32 - ctrl command space does that is that how
31:35 - you're opening up your emoji menu oh
31:39 - yeah I remember there was a shortcut for
31:41 - it I'm not sure what that is off the top
31:43 - of my head
31:44 - what did you say was Alyssa on a Mac
31:47 - keyboard it's control command space all
31:49 - at once
31:50 - Brenton Jackson is saying on Windows
31:52 - it's a plus Oh
31:54 - control command space worked thank you
31:56 - yeah you can choose any emoji you want
31:59 - let's go with as literally all I have to
32:04 - teach ever at all today golina we also
32:09 - do have a question
32:12 - so with print statements doesn't matter
32:14 - if you use double or single quotes oh
32:17 - very good question yes it does matter so
32:20 - this is another key difference between
32:23 - well let's say JavaScript syntax and
32:25 - Swift syntax so I'll show you guys so if
32:28 - you do actually let's just type what the
32:31 - XV check wants us to type so we'll do a
32:34 - print code cat of me so if we hit run
32:38 - this should pass us and so with Swift
32:42 - your Swift is very particular with the
32:43 - quotes we are going to get more into
32:46 - what type of data type this is it's a
32:49 - string and so strings are only denoted
32:52 - by double quotes not single quotes as
32:55 - they are in JavaScript in JavaScript you
32:57 - can write a string with double or a
32:59 - single and it will get recognized either
33:00 - way in Swift you cannot if we put single
33:04 - quotes here we are gonna see an error on
33:07 - the right here it is
33:09 - so error single quoted string literal
33:12 - used double quotes so also the cool
33:15 - thing is if you run into an error error
33:17 - they tend to be very very descriptive so
33:19 - you can almost always figure out what
33:21 - the issue is but yeah great question
33:23 - okay are we ready to head on to our
33:26 - review awesome okay so we've gotten into
33:32 - the last exercise of our lesson so we've
33:35 - written a few Swift programs we've
33:37 - learned that Swift is a general-purpose
33:39 - coding language that code is read from
33:41 - top to bottom that we can use a print
33:44 - statement to output something in the
33:46 - terminal we can also use comments to
33:48 - describe what our code is doing so we
33:51 - can use a single comment with two first
33:53 - slashes or we can use a multi-line
33:55 - comment with a slash as
33:57 - in the beginning and an asterisk / at
34:00 - the end so something also very cool
34:03 - recently that we've worked on our cheat
34:05 - sheets so if you click this link here
34:07 - it's going to take you to a cheat sheet
34:10 - for this entire course so this in
34:13 - particular is a cheat sheet for the
34:15 - learn Swift course and you can basically
34:18 - review everything that you've learned in
34:19 - the course with this cheat sheet you can
34:21 - also download the cheat sheet printed it
34:23 - so that's very cool and let's head back
34:26 - ok so now we have a really fun exercise
34:29 - to do with you guys so before we move on
34:31 - to the next thing let's write a letter
34:33 - to your future self
34:35 - so in letter dot Swift let's add the
34:37 - following goals for yourself your name
34:40 - and today's date and then we'll click
34:42 - click run to mail a letter
34:44 - so this letter will be returned when you
34:47 - complete the course so this is
34:48 - referencing the original learn Swift
34:50 - course so just keep that in mind okay is
34:55 - everybody ready to write their litter
34:58 - okay so in letter dot Swift we're gonna
35:02 - start it with print do yourself and then
35:05 - let's do our goal for yourself let's say
35:17 - that's gonna be Michael and my name and
35:21 - today's date and today's date is the
35:25 - 10th and you can also paste in the chief
35:30 - or something let's click run ok so here
35:36 - we can see our letter on the right and
35:40 - once you complete the learn Swift course
35:42 - you're actually gonna get the letter
35:43 - back to you in the very last lesson so
35:46 - this should be fun did you guys write
35:48 - your letters would you want to share
35:51 - some of them in a chat that's a great
35:55 - idea also shout out to Morgan happy
35:58 - birthday thank you for joining us oh
36:00 - happy birthday Morgan
36:03 - learn Swift and have fun love it I went
36:07 - to finish the Python class cool eat
36:09 - lunch
36:10 - Oh should we take up a few minute break
36:14 - do you guys want to maybe grab a snack
36:17 - or something before we get started with
36:19 - the next content item yes okay cool yeah
36:25 - for sure
36:25 - how much time do you guys think you'll
36:27 - need well then I can try and do a poll
36:33 - real quick oh yeah that'd be great
36:35 - thanks Alyssa wait no over-promised
36:39 - can't do it it looks like the
36:43 - everybody's mostly saying five minutes
36:45 - so maybe let's just take five minutes
36:49 - sounds good we'll take a look at all the
36:52 - questions on the Q&A and we'll do our
36:54 - best to get them answered yeah and we'll
36:56 - be here in five minutes ready to start
36:58 - the next topic like 1242 like five
37:05 - minutes or like 12:45 five minutes uh
37:08 - yeah whatever let's go with 42 yeah okay
37:13 - you guys restrict five minutes grab
37:17 - lunch grab your chargers
37:41 - okay I'm gonna take a peek in the key
37:44 - six
37:45 - I'm with so cool Singh everyone's time
37:47 - that's three you have some people where
37:50 - it's about 6:30 or twelve so shout out
38:01 - to the person with eight percent battery
38:03 - left the charger last minute yeah you're
38:13 - welcome Joseph we got you um we're
38:16 - resuming at 12:42 well in like four
38:21 - minutes so some people are getting
38:23 - breakfast love it Wow 10:14 p.m. 23:00
38:30 - 38 p.m. Wow that's late mm-hmm yes we
38:34 - are both in New York has 10% Joseph I'm
38:48 - trying to open the QA and it seems like
38:50 - I can't do that with when I'm sharing my
38:52 - screen Oh interesting I can get to them
38:59 - when Alex you go oh here we go we have a
39:06 - question when does this class go to how
39:09 - long are we going on for Galena oh very
39:11 - good question so this was supposed to as
39:13 - plan to be 90 minutes long so we started
39:16 - at 12 its 12:40 now so we're 40 minutes
39:20 - in so we have 50 more to go and yeah so
39:24 - I think it should and right on time as
39:29 - we're going now yeah we'll also link to
39:33 - the next session as we're completing
39:36 - this one and then closer to the end
39:40 - we'll ask everybody if they want like a
39:44 - five minute breather in between this
39:46 - session and the next one that might let
39:49 - us know how left
39:52 - there is and then just just a reminder
39:57 - seeing some questions come through on
40:00 - chat it's easiest to get those answered
40:04 - if you put them in the Q & A because
40:07 - then galina and Alex can note which ones
40:11 - they've already answered so yeah oh
40:13 - don't be sorry Liam it's nice that
40:17 - you're asking questions I appreciate it
40:45 - so is this people's first programming
40:48 - language it is let us know or if you've
40:52 - been if you've been doing a bunch let us
40:54 - know which languages you used before we
40:57 - had a lot of nose and I guess Alice is
41:01 - fun PHP Python want pythons JavaScript
41:12 - I love JavaScript
41:19 - yeah I agree with that I also love how
41:22 - Swift shows a very concise error
41:24 - yeah that's definitely a huge plus
41:26 - what's left mm-hmm um oh here we go we
41:30 - have a question that you might be able
41:31 - to answer Galena what are your favorite
41:34 - apps oh that's a really good one
41:37 - um that's from sunny who also helped
41:41 - write this course really that's from
41:43 - sunny okay my favorite app and I'm not
41:49 - biased is the code Khadem yeah that's a
41:53 - great answer you guys didn't know we
41:56 - actually have a Coke ad amigo app where
41:59 - you can practice all the content that
42:01 - you've learned it's free you can
42:02 - download it on the App Store and yeah it
42:05 - allows you to practice everything that
42:07 - you've learned on the course on your
42:10 - computer and yeah let's check it out and
42:14 - then one more question and then we'll
42:17 - get back to it what was your first
42:19 - programming language Oh my first
42:22 - programming language I think was C++ in
42:27 - college
42:28 - what am i you know mine was Python um so
42:33 - it's it's near and dear to my heart
42:36 - hmm what's your favorite programming
42:40 - language I'm gonna stick with Python
42:44 - yeah with Python but I also have to say
42:47 - like Swift is out there
42:49 - yeah it's same yeah so perfect
42:54 - yeah I agree with you Michael I love
42:57 - JavaScript
42:57 - I'm JavaScript okay is everybody back
43:06 - yes all right cool so let's get started
43:13 - so now now that we've taken a lesson we
43:17 - are going to give you guys a quiz okay
43:20 - you guys ready okay wait hold on don't
43:28 - look at the answers okay
43:30 - all right can everybody see this Alex
43:34 - sir is this is it showing
43:36 - yep I'm able to see it cool okay well
43:39 - wait no don't write the answers yet so
43:43 - the question is what would the ALPA be
43:45 - for a program like this so what would
43:48 - this print statement output choose your
43:51 - choice and you can just write it down on
43:54 - a piece of paper keep a note of it or
43:57 - something and then we're gonna go over
43:58 - those solutions together so yeah just
44:02 - give a few more seconds everybody see a
44:08 - lot of twos some threes okay all right
44:18 - let's go to the next one yeah somebody
44:25 - recommended muting the chat and writing
44:27 - it on a piece of paper so you can
44:29 - challenge yourself yes so don't look at
44:32 - the chat you can write it on a piece of
44:34 - paper and just look at the screen when
44:36 - I'm going to show you the question so
44:38 - let's move on to the second one which
44:41 - one is a single comment in Swift um you
44:48 - guys can also just minimize the chat if
44:50 - you want or just not clear close it
44:56 - somebody wrote I just came back to we
44:58 - finish variables no we didn't start
45:00 - variables we're actually just taking a
45:01 - quiz I'm gonna pop back into the first
45:04 - question to make sure everybody saw that
45:06 - one for a second okay I'll go to the
45:15 - first one when we're done with these two
45:17 - it's not letting me go back 400 okay
45:24 - here we are
45:24 - this was question one for anybody that
45:26 - missed it and gonna go back to question
45:32 - two
45:41 - okay and if everybody's down with
45:43 - question to the final question question
45:45 - three
45:55 - you
46:03 - okay are we ready to see the answers yes
46:11 - okay let's go so the question the answer
46:15 - for question one was this second choice
46:19 - so it wouldn't be the first one because
46:22 - we don't have a world in there it
46:24 - wouldn't be the third one because the
46:25 - quotes wouldn't go in there and it
46:27 - wouldn't be the last one because then it
46:29 - would be missing the last part of the
46:32 - string which I can't pronounce okay all
46:39 - right next one
46:40 - the answer for question two is the
46:43 - second choice so it's not the first one
46:45 - because that would run
46:46 - that's real code it's not the last one
46:49 - because it doesn't have any forward
46:52 - slashes in it and I'm sorry it's not the
46:54 - third one because it doesn't have any
46:56 - first I'm just in it and it's not the
46:57 - last one because that's actually a
47:00 - comment written in Python yes and you
47:06 - got it anybody know one more language
47:09 - that this comment is written in starts
47:11 - with an R yes Ruby very good cool got
47:18 - some rubyists here and then the last one
47:21 - question three swift code is read from
47:24 - top to bottom and that is true very good
47:27 - perfect
47:28 - john gerdes how many of you guys got
47:31 - everything right
47:35 - awesome job good job guys
47:38 - perfect okay let's move on okay so um
47:51 - something we've noticed earlier just a
47:53 - little blip if you click up next
47:56 - it might not yeah so we're going to skip
48:00 - this block letters project and we are
48:03 - gonna do a project today but we're not
48:04 - going to do this particular one so when
48:05 - you click up next just don't go to block
48:08 - letters we're actually going to navigate
48:09 - back to the course page and manually
48:13 - choose another lesson to go through I'm
48:17 - also gonna post that link to the next
48:19 - lesson in the chat yeah so if you're at
48:22 - this page and you're a little bit stuck
48:23 - just click the back button and should
48:25 - take you back to our last exercise no
48:32 - just refresh refresh fixes everything
48:39 - this is true you guys should try to get
48:43 - into the introduction of variables yeah
48:46 - so I click to learn from home conference
48:48 - at the very top and then if you scroll
48:52 - down and you can see that we've
48:56 - completed the hello world
48:58 - you guys should have a check Oh somebody
49:01 - said they don't have block letters next
49:02 - up is variables that's awesome great it
49:04 - may just be showing that for us but just
49:06 - in case that you do see block letters
49:08 - you can also navigate back and click
49:10 - variables here or you can also click up
49:12 - next if you have variables next okay
49:17 - awesome I'm gonna hand it over to Alex
49:20 - to go through variables with you guys
49:22 - great so I'm going to share my screen
49:25 - one second as we get this all set up
49:27 - sounds good I'm gonna stop sharing I'm
49:33 - gonna pop into the chat and the awesome
49:37 - so do you guys see this introduction to
49:39 - variables peace yes good Hey so let's
49:47 - see I'm gonna move some stuff
49:49 - and fantastic okay
49:52 - so let's just get right into this so
49:54 - before we learned with Galena of how to
49:56 - use a print statement and how a program
49:59 - runs and Swift from the first line to
50:02 - the last line but one thing you should
50:04 - know is that with the programs you know
50:07 - what we wrote before with hello world it
50:09 - didn't read anything or calculate
50:11 - anything or allow for user input and the
50:14 - fun part about programming is we can do
50:16 - things that are a lot more fun than that
50:18 - and in order to create programs that
50:21 - produce results based on input of the
50:23 - user instead of just outputting the same
50:26 - thing we need data and the thing about
50:28 - data is that we need to store it
50:31 - somewhere somewhere in our computer we
50:34 - need to take that our computer's memory
50:37 - and start storing data and to do that we
50:39 - need variables and a variable it's just
50:43 - a name that represents a particular
50:44 - piece of our computer's memory that has
50:47 - been set aside for us to store retrieve
50:50 - and use data and so we're gonna be
50:52 - talking about different types of
50:54 - variables as well as constants but one
50:57 - thing we should also talk about are the
50:59 - basic data types and data types are
51:02 - simply just saying what kind of data
51:05 - were holding and if you look at this
51:06 - screen in the middle we have this really
51:09 - nice chart and it has the type the usage
51:12 - in some examples we'll actually go over
51:14 - some of these data types and the first
51:16 - one we'll talk about is an int or
51:17 - integer and integers are basically whole
51:20 - numbers so you can see some examples we
51:22 - have zero we have 420 it could be
51:24 - negative five thousand so those are just
51:27 - whole numbers the next one we'll talk
51:30 - about is a double which is similar to
51:32 - the integer where we're using numbers
51:34 - but it's a floating-point number so we
51:37 - have decimals in it so some of the
51:39 - examples we have our 3.14 pi and
51:42 - negative 200 point zero okay next we
51:47 - have strings and those are just
51:49 - sequences of characters so for example
51:52 - that could be a whole sentence like
51:55 - hello world or it could be one word like
51:57 - code Academy you'll know you're using a
51:59 - string when you're using
52:01 - double quotes and someone asked this
52:03 - before is there difference if we use
52:04 - single quotes and double quotes as
52:06 - galina mentioned yes we're using double
52:09 - quotes for Strings and then the final
52:12 - type we're gonna talk about our bowls
52:13 - and those are truth values and there's
52:15 - only two types that you can have there's
52:19 - only two data that piece of the data
52:21 - that you can have in your truth value
52:23 - and that's true or false okay so we're
52:28 - just gonna continue right along and
52:30 - we're gonna move on to declaring a
52:32 - variable so whenever we want to use a
52:35 - variable we need to create it in our
52:37 - programs and so to do that we're going
52:42 - to use some code so if you look at this
52:44 - example over here we can see at the top
52:46 - I have this little code snippets that
52:48 - says var score equals zero and this code
52:52 - snippet is actually us declaring a
52:54 - variable but let's break this down a
52:56 - little more so the first thing we see is
52:58 - the bar keyword and so bar is a keyword
53:02 - that lets the compiler know that let's
53:04 - our program now hey we're creating a
53:07 - variable that we're gonna use next we
53:10 - have score and scores the name of the
53:12 - variable and this is just one specific
53:14 - variable we can name our variables
53:17 - almost anything so that's important to
53:19 - know next we see that equal sign and
53:22 - that's the assignment operator we use
53:24 - that to a sign of value to our variable
53:27 - and in this case the value of our
53:29 - variable is zero so again we just have
53:32 - that one piece right there bar score
53:34 - equals zero and so something to know is
53:37 - we could print out our variables now if
53:40 - we just use a print statement and typed
53:42 - in the name of our variable like we see
53:44 - over here print score it's going to
53:46 - print the value of our variable so you
53:49 - see how the output says zero it's not
53:52 - printing the word score it's printing
53:55 - zero because that is the value that the
53:57 - variable score holds and then over here
54:01 - we see a note and says variable name
54:03 - should be in camel case format what does
54:06 - that mean when you name a variable it
54:09 - has to be one word if you try to use
54:11 - multiple words or admin spaceless
54:14 - you're gonna get an error so in order to
54:17 - keep your code readable when you have a
54:20 - complicated variable name we use camel
54:22 - case and I'll show you an example
54:23 - suppose we were creating a variable
54:26 - called yearly bird population what we
54:29 - would do as you can see in my coded
54:32 - editor editor we start off with the VAR
54:34 - keyword and then the first bird was
54:36 - yearly and all of that's gonna be the
54:38 - lower case now the B though in bird
54:41 - we're gonna capitalize that and keep the
54:43 - rest lowercase and the P and population
54:46 - will also be capitalized so let's say we
54:51 - just have 10 so the point is that's
54:55 - camel case and that's just something you
54:56 - want to keep in mind will you get an
54:58 - error if you don't use camel case no but
55:01 - this is a really good way to kind of
55:03 - keep things readable so let's move on to
55:06 - those instructions and the first
55:08 - instruction we have is declare a
55:09 - variable named gear but the value of the
55:12 - current year so let's work on that so
55:14 - the first thing I'm going to you do is
55:16 - use that var keyword and then I'm going
55:18 - to type the name of our variable which
55:20 - is a year and then I'm going to assign
55:23 - it the value of the current year so I'm
55:25 - gonna assign up using that assignment
55:27 - operator the equal sign and then put in
55:30 - that year so 2020 and if you're in the
55:33 - chat key tell us what kind of data type
55:35 - we have going so far and there's no
55:38 - quotes or periods in it great so I'm
55:43 - gonna try and run this code and glean it
55:45 - what the answers are we seen
55:47 - yeah we're seeing int we actually have a
55:49 - really great question for type safety
55:54 - can I declare var test call an int and
55:57 - assign it later yes yes you can and
56:01 - we'll actually be talking about this in
56:03 - a little bit you'll learn the exercises
56:05 - that covers this so that's a great
56:07 - question but yeah because it's type safe
56:10 - and just with Swift we can just declare
56:12 - a variable without giving it data yet
56:15 - and I promise we'll go over that and
56:17 - it's an awesome question so I'm gonna
56:19 - run this code where we declare variable
56:21 - and it works and the next thing it's
56:23 - asking us to do is
56:24 - you're using print so I'm gonna start
56:27 - printing so I'm gonna write down print
56:29 - we're gonna have our open parenthesis
56:31 - and then I'm just gonna write year down
56:33 - so I'm gonna run this but we're gonna
56:35 - hit an error and it says it's an
56:39 - unresolved identifier year now the
56:42 - reason we hit that error is because I
56:44 - used a capital y in gear capitalization
56:47 - matters with your variable names if you
56:50 - use a capitalization and in one variable
56:52 - but not the other but you're trying to
56:54 - reference them as the same thing you're
56:56 - gonna get an error so that's just
56:58 - something important to know
56:59 - capitalization matters and there will be
57:02 - a point where you run into an error and
57:04 - that's gonna be the cause of it all
57:05 - right so you see I changed it back to
57:08 - the lowercase Y I've ran it and now our
57:10 - code outputs to the terminal and you can
57:12 - see in our output it says 20/20 which
57:15 - once again is the value behind our
57:16 - variable here okay well moving right
57:22 - along with this arithmetic operators in
57:26 - case you didn't know computers are
57:28 - incredible at doing calculations and
57:30 - since we've learned how to create
57:32 - variables now we can use variables with
57:35 - arithmetic operators to calculate things
57:37 - and the arithmetic operators that we can
57:39 - use in Swift are just like the ones we
57:42 - can use in our everyday life we have
57:44 - addition we have subtraction
57:45 - multiplication division and modulo and
57:49 - all modulo is is when you divide
57:51 - something and get a remainder it returns
57:53 - the remainder of that value let's take a
57:56 - look at this example we have over here
57:59 - this nice little code snippet so just
58:01 - like in the last exercise we declare a
58:02 - variable called score and we set it to
58:04 - zero then we have something that says
58:07 - score equals 4 plus 2 one thing you
58:10 - might notice is when we reference score
58:12 - after we create it we no longer need to
58:14 - use var in the beginning the only use
58:17 - bar when we create the variable after
58:20 - that when we want to call it or
58:22 - reference it we don't need to use var we
58:25 - can see that in that first line score
58:27 - equals four plus two for now score is
58:30 - going to have a value of 6 and now that
58:33 - next line we see score equals score
58:35 - minus 2 now
58:37 - I might trip you up because we're
58:39 - referencing a variable in the variable
58:42 - but all that means is we're gonna take
58:44 - that value of score which is 6
58:46 - I'm gonna subtract it by 2 and that's
58:49 - gonna be the new back a new value so 6
58:52 - minus 2 is 4 square now equals 4 moving
58:57 - right along the next one score equals 4
58:59 - times 2 so now score equals 8 score
59:02 - equals 4 divided by 2 so score is now 2
59:04 - and then score equals 5 modulo 2 so when
59:09 - we divide 5 by 2 it goes in twice but it
59:13 - leaves 1 as a remainder which is why the
59:15 - value of score is now 1 and something
59:19 - just to know with the order of
59:20 - operations just like math in real life
59:23 - it does respect parentheses when we use
59:27 - parentheses that's gonna be calculated
59:29 - first before anything else so we see
59:31 - this example score equals 4 times
59:34 - parentheses 2 plus 1 its first going to
59:37 - do the math of 2 plus 1 so that's 3 and
59:40 - then it's gonna say 4 times 3 so that
59:43 - equals 12 okay so let's take a look at
59:47 - these instructions in the code editor we
59:52 - already declared and initialized a
59:54 - variable called amount now we're going
59:56 - to declare a new variable named tip and
59:58 - give it the value of amount multiplied
60:01 - by point 2 all right and if in the chat
60:05 - let me know do you think this is going
60:06 - to be a double or an INT when I write
60:10 - this out I'll use that bar keyword all
60:13 - right the name of the variable which is
60:14 - tip we're gonna set it equal to amount
60:18 - times 0.2 unless I run this code let's
60:26 - see so oh honey we got that check
60:28 - because it works and now we're being
60:30 - asked to print out tip so let's see what
60:32 - that amount is gonna be so once again
60:34 - I'm just gonna write print and inside
60:36 - those parentheses tip and all its gonna
60:38 - do is give us that value which is 3.7 so
60:42 - we got a double right I just wanted to
60:48 - jump in for just a second we
60:51 - Highbury Rana who wrote in the chat for
60:53 - the learning important to remember that
60:56 - if you put any of these numbers in
60:57 - quotes it will be read as a string not
60:59 - int huge plus one two that Johanna plus
61:03 - one yeah you're right yeah so just like
61:07 - she's saying so we see this VAR apples
61:09 - equals sixteen in the code editor if I
61:12 - change this by adding those quotes we
61:14 - don't have an int anymore now we're
61:16 - working with a string if you have quotes
61:18 - you're working with a string okay so now
61:22 - we're going to talk about compound
61:24 - assignment operators so before we
61:26 - learned a little bit about math and how
61:28 - we can use it to you heat up our
61:30 - variable the values of our variables but
61:33 - now we have compound assignment
61:34 - operators and we use those when we want
61:37 - to adjust the values of our variables
61:39 - it's kind of a shorthand method of using
61:42 - arithmetic operators in a lot of ways so
61:45 - for example in the last lesson this is
61:47 - how we learned how to change a value
61:49 - using arithmetic operators so we see
61:52 - more age equals 99 and then the next
61:55 - line we say age equals age plus one so
61:58 - if the value is 99 and we add one to it
62:01 - when we print age in that next line it's
62:04 - going to have a value of 100 but we can
62:08 - use a compound assignment operator to
62:10 - kind of shorten this so I'm just gonna
62:12 - scroll down and let's take a look at
62:14 - this new code snippet and it's just like
62:17 - before we initialize a variable called
62:19 - age with a value of 99 but in the next
62:22 - line we say age plus equals 1 that's the
62:26 - compound assignment operator we're
62:29 - adding the value of 1 and then we're
62:31 - assigning that new value to our variable
62:35 - so when we print out age we're going to
62:37 - have a value of 100 and kind of similar
62:41 - to go forward here we had adding
62:42 - subtracting multiplying that's the same
62:44 - thing with compound assignment operators
62:46 - we can use those all here but with
62:49 - compound assignment operators so let's
62:51 - actually take a look at this in action
62:53 - so we initialize a variable called
62:55 - dollars and we give it a value of 5 in
62:57 - the next line we say dollars plus equals
63:00 - 4 so what we're doing is adding 5 & 4
63:04 - and now the value of dollars is 9 in the
63:08 - next one we see dollars - equals three
63:11 - so we have to think of it as dollars
63:13 - equals 9 minus 3 which is 6 then we have
63:17 - dollars x equals 5 so think of that as
63:20 - $1 equals 6 times 5 which is 30 we
63:24 - continue on dollars dividing equals 6
63:28 - so that's 30 divided by 6 douwe is now
63:31 - equals 5 and then dollars modulo equal
63:34 - to so 5 modulo 2 and we get a final
63:38 - dollars value of 1 all right so let's
63:43 - actually practice this a little bit more
63:45 - with our instructions imagine we are the
63:48 - owners of a small fruit stem to start
63:50 - the day we have 16 apples and let's say
63:53 - customer comes in and they buy 4 apples
63:56 - let's use a compound assignment operator
63:58 - to adjust this value so all I'm gonna do
64:01 - is first I'm going to reference that
64:04 - variable so I'm gonna write in apples
64:05 - and then we're subtracting 4 so I'm
64:09 - gonna use that minus equals compound
64:11 - assignment operator and then we're
64:13 - subtracting 4 so I'm just gonna write
64:14 - that down and now I'm gonna run it so
64:18 - you can see in our output terminal or
64:19 - value is now 12
64:21 - that's what Apple's is fantastic so
64:24 - continuing on another customer comes in
64:27 - and they purchase half of the available
64:29 - apples so we're going to use a compound
64:31 - assignment operator to reflect this
64:32 - change so similar to before I'm gonna
64:36 - reference apples and then since we're
64:38 - dividing by 2 I'm just gonna use divide
64:41 - equal 2 and when I run this we see now
64:45 - apples has a value of 6 okay so how are
64:49 - we doing so far
64:50 - right now galino do we have any big
64:52 - questions going on sorry I'm eating
64:56 - myself
64:56 - no yeah we're doing great I'm getting
64:59 - trying to get to everybody's question in
65:01 - the Q&A panel also peeking into the
65:03 - chats it seems like everybody's
65:04 - following along so yeah okay cool so
65:09 - we're just gonna keep going great job
65:11 - everyone
65:12 - whoo so now we're gonna talk about type
65:15 - annotation someone asked the question
65:17 - about this before so I'm happy we're
65:19 - getting to this so we can talk about it
65:20 - so we can provide type annotation when
65:23 - we declare a variable so we can be clear
65:26 - about what kind of value like what the
65:29 - type is but that variable will store so
65:32 - we talked about some of the data types
65:34 - before where we have the aunts the
65:36 - doubles the strings the bulls and when
65:39 - we want to declare a type all we have to
65:42 - do is we write out our variables when
65:46 - we're declaring it after we say the name
65:49 - of the variable we're going to add a
65:51 - colon and then the type so we can see
65:54 - over here in this first example bar
65:57 - artist colon string so someone asked hey
66:00 - can you declare a variable and its type
66:02 - without giving it its data yet this
66:05 - shows that the answer is yes
66:06 - we could just run this if we ran this
66:09 - code it would work
66:11 - and so again but what we're saying is
66:14 - when we do is sign it a variable when we
66:16 - do assign this variable of value it has
66:18 - to be a string and if we try to use
66:21 - something like an integer or a double
66:23 - we're gonna get an error so we can see
66:26 - over in that next line what we do is we
66:28 - have our artists and we assign a string
66:30 - value the next thing we're gonna say
66:32 - artist equals Daniel Johnston and
66:34 - Johnston Daniel Johnston is in quotes so
66:37 - we're giving it a string value now you
66:40 - could assign it you could do this with
66:42 - two lines like we see in that first
66:43 - example but when we look at that third
66:46 - code snippet we can see that we can
66:48 - assign the name the type and the value
66:53 - all in one line of code with VAR artist
66:56 - : string equals Daniel Johnson and um as
67:02 - we said string as a type safe language
67:05 - one of the benefits of it is if you try
67:08 - to change the data
67:10 - type of the variable you're gonna get an
67:11 - error and that's just preventing other
67:14 - errors from happening down the line so
67:17 - let's take a look at these instructions
67:19 - declare a string variable named book
67:21 - with a value of just kids so what I'm
67:24 - going to do is I'll first start off with
67:26 - my bar keyword and then we're gonna say
67:28 - the name of the variable and that's book
67:30 - and it says we're gonna declare it as a
67:33 - string so what I want to do that I'm
67:34 - just gonna hide that colon and then I'm
67:36 - going to type in string and then we're
67:40 - gonna give it a value of just kids so
67:42 - I'm going to use equal and then just
67:45 - kids that capitalization was off great
67:51 - and one thing I do want to know before I
67:53 - run this we're gonna we're gonna get an
67:55 - error in the first one that's okay what
67:57 - happens if I don't use quotes around my
67:59 - string error so just something that you
68:03 - know if you're using a string you need
68:06 - those double quotes so I'm just gonna
68:07 - add those back in and you can see that
68:09 - as soon as I had those quotes the color
68:11 - of the text changes so that's a good way
68:13 - to keep you on your toes of knowing
68:15 - whether or not you're using the right
68:17 - syntax happen if you I'm just gonna pop
68:22 - in for a quick question somebody asked
68:23 - so what happened we don't declare it a
68:25 - string whoo so if I just wrote our book
68:28 - equals just kids yeah so this is gonna
68:33 - so when I run this it's not gonna give
68:35 - us an error in our code editor because
68:37 - of type annotation I not type annotation
68:43 - sorry type inference and that is that
68:45 - switch is automatically able to figure
68:47 - out the data type of the variable just
68:50 - by looking at when you give it so when
68:52 - it sees those quotes and something
68:53 - excited they're like oh okay this is a
68:55 - string so by all means this isn't a
68:58 - necessary part you don't have to use
69:00 - type annotation but this is a good way
69:03 - that if you want to you could add it
69:05 - it's just kind of a syntax preference
69:07 - umm you think that sums it up kalenna
69:10 - yeah that's great great um so just up to
69:13 - you but it's really important to know
69:15 - that you can do both so you can see that
69:18 - without using it I'll get a little error
69:20 - at the bottom over here that says did
69:22 - you forget to use type in
69:23 - answers yes so let's fix that so I'm
69:26 - gonna add in that : string we're gonna
69:28 - run this code and let's see we had a
69:30 - green checkmark so we are good to go
69:32 - and one more quick note for everybody so
69:36 - you can declare the variable in both the
69:38 - way that Alex just did it or you can
69:40 - just do bar book equals just kids
69:42 - it would be correct in both situations
69:44 - but we want you to specifically practice
69:46 - with type a notation here and that's why
69:48 - we're asking you to use it absolutely
69:51 - thank you so much Galena okay so
69:54 - continuing on without let's declare an
69:57 - int variable names page count and give
70:00 - it a value of 278 so once again we're
70:02 - gonna use var the name which is going to
70:05 - be page count and note that page count
70:08 - is using camelcase
70:09 - because we capitalized that seeing count
70:11 - and then going to use a colon we're
70:14 - going to declare it as an int then we're
70:16 - gonna assign it a value of 278 so let's
70:20 - run this code and see what happens we
70:22 - get a check and we are good awesome okay
70:28 - I'm excited about this one string
70:31 - interpolation so sometimes we want to
70:33 - insert the values from our variables
70:35 - into a print statement and so what if we
70:39 - want to do that we're going to use some
70:41 - string interpolation so let's take a
70:43 - look at this value that this example
70:46 - that we have in our narrative
70:47 - so it says lauren albums equals 17 and
70:51 - underneath that we have a print
70:52 - statement that says Daniel Johnson has
70:54 - made backslash parenthesis albums studio
70:59 - albums when we run this code it's going
71:03 - to output Daniel Johnston made 17 studio
71:06 - albums I think this is super cool
71:09 - because when you look at this at first
71:10 - you're thinking oh it's going to print
71:12 - out back slash albums of course but not
71:15 - really because we're using um we're
71:18 - using string interpolation and what that
71:20 - does is it takes the value of that
71:22 - variable and it inserts that into our
71:25 - print statements and so we can see that
71:27 - the syntax to do that is just that
71:29 - backslash parenthesis and inside those
71:31 - parentheses we put the name of the
71:33 - variable and you'll notice that the
71:35 - color changes so when we use that
71:37 - excess parentheses and we reference the
71:39 - variable albums is in like an orangish
71:42 - color whereas the rest of the string is
71:44 - yellow so that's a good way to know if
71:46 - you're doing the right thing um just
71:49 - like this says this magic okay so let's
71:54 - take a look our first instruction is
71:55 - declare variable called age and we're
71:58 - gonna set it equal to our age so we're
72:00 - gonna start with bar I'm gonna name my
72:02 - variable age and I'm going to set it to
72:04 - my age which is 25 so we're gonna run
72:07 - this code and things are good to go and
72:10 - then the second question is with age
72:13 - setup print and use string interpolation
72:16 - to output I am eight years old but when
72:20 - we print it to the terminal we wanted to
72:21 - say I am 25 years old so let's get that
72:25 - going I'm gonna start with my print
72:26 - statement get those double quotes and I
72:29 - am so this is where we're going to add
72:32 - in our variable so I'm gonna use
72:34 - backslash open parenthesis and then I'm
72:37 - gonna just type in age and that's all we
72:39 - have to do and then let's continue on
72:42 - with the rest of our string so I am age
72:45 - years old and let's run this that period
72:49 - in cool so let me see the output of this
72:52 - it just says I am 25 years old and
72:55 - what's fun about this is we can change
72:57 - this let's say I'm actually 150 years
73:01 - old and let's see if we print when we
73:04 - run this it's gonna print that I'm 150
73:06 - years old so again this is where it kind
73:08 - of gets a little bit more fun because we
73:09 - could add our own input into our
73:11 - variables and what it outputs okay okay
73:19 - so now we're gonna talk about constants
73:21 - in a few of the past exercises we were
73:23 - able to manipulate the value of our
73:26 - variables and that was great when we
73:28 - needed to change something but sometimes
73:30 - there's data that we don't want to
73:32 - change because it doesn't change so for
73:36 - example think of pi pi doesn't change so
73:40 - why would you let someone change the
73:41 - value of pi in your program so what we
73:44 - can use is something called a constant
73:47 - and a constant just makes a value and
73:51 - suitable which means the value stored
73:52 - inside it cannot be changed and when we
73:56 - want to declare a constant we're going
73:58 - to use a lit keyword so the variables we
74:01 - use var when we use var that means we
74:03 - can change our variables
74:05 - but if we use let that means it's a
74:07 - constant and we can't change those
74:09 - values you can see over here let pi
74:12 - equals 3.14 and as it says here why use
74:17 - constants it's used as a safety measure
74:19 - when we use it we're making her program
74:21 - safer by guaranteeing that we only
74:23 - change the values we expect to and then
74:26 - it helps us to prevent some potential
74:28 - bugs so let's do this now declare a
74:31 - constant named months and assign it the
74:33 - number of months at end with y okay so
74:37 - let's start this we're going to use the
74:38 - let keyword and then months and that's
74:42 - going to equal for January February May
74:47 - and July yep yeah that's it so oh for if
74:52 - I'm wrong it'll give us an error let's
74:55 - see oh it's right okay cool so again if
74:59 - we try to change it will get an error
75:00 - and I'll even show you this so let's say
75:02 - we're changing this and I want to say
75:05 - month equal seven when I run this code
75:08 - it's gonna give us an error error cannot
75:11 - assign two value months is it constant
75:14 - so again if you're assigning it a as a
75:18 - constant can't change it so that's just
75:21 - an important thing to know okay moving
75:26 - on you have a fun challenge to do and
75:28 - it's a temperature challenge um so let's
75:32 - write a program that is able to convert
75:35 - temperature from Fahrenheit to Celsius
75:37 - using this following formula okay so
75:42 - let's get started and we'll go straight
75:43 - to these instructions first search for
75:46 - the current temperature of New York City
75:48 - in Fahrenheit we're going to declare a
75:51 - double variable named temp F and
75:53 - initialize it with the temperature then
75:55 - we're going to declare another double
75:57 - variable thing temp C so let's see I'm
76:00 - going to first declare that temp F and
76:03 - we're gonna copy
76:04 - a double so I'm gonna use that : and I'm
76:08 - gonna sign a double and I'm going to set
76:11 - it to you I think I checked it was 50
76:13 - but I'm gonna just keep that for today
76:16 - okay so now we're going to declare
76:19 - another double variable name temp C so
76:21 - here we go
76:22 - barn temp c double you can see I'm not
76:28 - assigning temp C of value right now all
76:31 - I'm saying is this variable exists and
76:34 - when we give it a value it's going to be
76:35 - a double so let's run this code see how
76:38 - it goes and this worked awesome and it
76:42 - says convert the temperature to Celsius
76:44 - using the formula provided and we're
76:46 - going to store that result in temp C so
76:49 - I'm gonna have to go up so I can look at
76:50 - that formula
76:51 - so let's reference tap C so I'm just
76:54 - gonna write in temper C and we're gonna
76:56 - sign it to the value let's see
76:58 - Fahrenheit minus 32 so I'm gonna stick
77:01 - with those parentheses because that's
77:02 - important so I'm gonna write in temp F -
77:06 - 32 and outside of those parentheses I'm
77:10 - gonna divide it by 1.8 and I like having
77:14 - spaces so I'm gonna just great cool so
77:17 - let's run this code see what happens
77:20 - and we got the green check so we are
77:22 - good to go guys and finally display the
77:26 - result using string interpolation and
77:28 - the output needs to say the temp is
77:31 - temperature C degrees in Celsius so
77:34 - let's get this going I'm gonna write out
77:36 - that print statement double quotes okay
77:38 - you temp is and I'm going to use string
77:43 - interpolation so let's see we're gonna
77:45 - cut that in and I'm going to write temp
77:47 - C ok degrees there we go okay let's see
77:59 - let's run this let's see what happens
78:01 - and it says the temp is 10 degrees
78:04 - Celsius so that's awesome guys we went
78:06 - through variables and by the end of it
78:08 - we were able to create a conversion
78:10 - program that changes things from
78:12 - Fahrenheit to Celsius which is one of my
78:15 - favorite things because I never know
78:17 - what the answer
78:18 - so now I can have my program do it for
78:20 - me job Alex um you guys want to take a
78:28 - little bit of break to let some people
78:29 - catch up just maybe one or two minutes a
78:31 - eyestalk a couple messages about people
78:33 - falling behind Oh perfect sounds good
78:37 - yep and I'll open up that chat so I can
78:39 - try to help in any way also um actually
78:42 - some of these we can probably answer
78:44 - together for from the QA degree do we
78:49 - need to specify the type of data also
78:51 - any constant oh good question I think
78:56 - the fun way then format is let's write
78:58 - some code yeah so let's see what happens
79:01 - let's say I say nope we're gonna use the
79:05 - lip so I'm going to say I'm just gonna
79:09 - keep it as name I'm not planning on
79:10 - changing my first name so let's see what
79:13 - name string equals Alex okay and
79:20 - actually what I'm going to do is I'm
79:22 - going to say name one so this is me I'm
79:24 - using type inference to kind of say hey
79:30 - this is my name there we go
79:34 - yep I'm gonna give it a tight so I'm
79:35 - saying it's type string but let's say we
79:38 - have a second constant and that's gonna
79:40 - be name too and I'm just gonna set that
79:42 - equal to Galena you can see that I'm not
79:45 - going to declare this as a string I'm
79:47 - just gonna let it be and when I run this
79:49 - code you can see that we didn't get an
79:51 - error so just like with variables you
79:54 - can give it a type in the beginning when
79:56 - you'd occurred but you don't have to
79:58 - because with type inference the compiler
80:00 - will automatically be able to figure out
80:02 - the type of it whoa what else are we
80:12 - seeing
80:18 - um yes Michael I you see me you're
80:23 - saying you have an issue with accessing
80:25 - the course are you logged into York
80:27 - Academy account I'll send up another
80:32 - link to it and let me know if that one
80:36 - works um a quick question for everyone
80:45 - including glia and Alex do we want to
80:49 - work in five minutes before the next
80:52 - session at 1:30 we want to take
80:56 - questions up to the last minute up to
81:01 - you guys still learners we just have one
81:04 - more thing to get through so we can use
81:06 - the rest of the time just to what the
81:10 - next four minutes just to finish this up
81:13 - and then answer questions how do you
81:14 - guys feel about that anyone else need a
81:17 - coffee break need to grab their charger
81:19 - you don't want anyone at eight percent
81:24 - this is like it's like really really
81:28 - mixed yeah it sounds like finish up and
81:30 - then what we'll do is we'll let one of
81:33 - the next sessions know that some people
81:36 - will be coming over a little later Oh
81:39 - awesome I'm glad you guys are having fun
81:42 - with this okay so what let's actually
81:49 - just go over to this last exercise and
81:52 - it's just a review congratulations guys
81:55 - you made it to the end so let's go over
81:58 - everything we learned throughout this
82:00 - lesson a variable represents a
82:03 - particular piece of your computer's
82:05 - memory that has been set aside for you
82:07 - to use by storing it retrieving it and
82:10 - manipulating it with data variables are
82:13 - declared using the VAR keyword um if
82:16 - you're in the chat can you change the
82:19 - value of variable yes or no um everyone
82:25 - I'm just
82:25 - pop in for one second so I'm seeing some
82:28 - people are having issues with their code
82:30 - so maybe let's do this
82:33 - send your code into the QA that way I
82:38 - can answer one by one and we can try to
82:41 - figure out what's wrong and why it's not
82:44 - able to pass but yeah just submit your
82:46 - code into the QA post the entire code
82:49 - and let me know what the issue is and
82:52 - with the error messages now I'll try to
82:53 - help out well thank you Galena okay well
82:58 - continuing on constants are declared
83:00 - using the let keyword so to those of you
83:04 - who tried answer that last question you
83:05 - can change the value of the variable
83:07 - constants you cannot once you declare
83:10 - the value of a constant that is it
83:12 - cannot change it or you'll get an error
83:15 - like we saw so now let's go over some of
83:18 - those swift basic data types which
83:20 - include the int which is just integers
83:22 - or whole numbers doubles which are
83:25 - floating-point numbers so think of
83:26 - numbers with decimals in them strings
83:29 - which is art which is sequence of
83:31 - characters that are held within double
83:34 - quotes remember that's important you
83:35 - need to use those double quotes to
83:38 - contain your string or you'll get an
83:39 - error and finally the bull which is just
83:42 - true or false values when you want to
83:46 - assign a value to a variable definitely
83:49 - use that assignment operator which is
83:51 - just the equal symbol you have
83:53 - arithmetic operators like plus minus
83:56 - times divide and modulo and the same
83:59 - thing with compound assignment operators
84:00 - plus equals minus equals x equals and so
84:04 - on and so if you really enjoyed learning
84:08 - about Swift make sure you check out our
84:10 - learn Swift course it is on the platform
84:12 - so if you wanted to keep going with it
84:14 - I'll just post that into the chat if
84:17 - you're interested let's see when to go
84:21 - into the chat
84:26 - yeah if you are ready to go to our next
84:30 - session I'll post those next session
84:31 - links in there too so right now I just
84:33 - posted that learn Swift course if you
84:35 - feel like going through this or seeing
84:37 - some of the other modules that we have
84:38 - available there okay and then our next
84:43 - sessions I will also post this into the
84:45 - chat you're very welcome Agata okay
84:53 - let's say it's post this in
84:56 - you
85:03 - so once again here is the links to the
85:08 - next chat I just posted that in
85:12 - and then again I'm gonna post in that
85:15 - learn Swift course if you want to take
85:17 - it at a later time cool and also sunny
85:21 - posted I believe it was a cheat sheet
85:23 - link
85:24 - I think Elena went over this in the
85:26 - beginning it's an awesome way to just go
85:28 - over what you learned you can print it
85:30 - out you can save it as a PDF and you can
85:31 - always go back to it in case you just
85:33 - need a refresher in what we learned um
85:35 - we are so so happy you guys could join
85:38 - us today this was awesome and like Sonny
85:42 - said bookmark those cheat sheets and
85:44 - definitely it's gonna be exciting enjoy
85:47 - the next two courses they're going to be
85:49 - awesome whichever one you choose thank
85:54 - you guys
85:55 - umm yeah X did we share the Swift Docs
85:59 - with them yes but I will post those
86:01 - again okay cool I thought that if you
86:04 - guys are interested in reading more
86:05 - about Swift and reading the
86:07 - documentation we are also gonna provide
86:09 - you guys with those links and yeah this
86:12 - is great thank you so much for for
86:13 - joining us so much okay so I just posted
86:16 - in some Swift resources with apples and
86:19 - Swift Docs org they're awesome anything
86:24 - else so yes so if you want that learn
86:27 - from home day syllabus if you're looking
86:29 - for those next courses I'm also going to
86:31 - post that in thank you so much that was
86:34 - a lot of fun I'm so glad you guys joined
86:36 - us today I'm gonna try my best to answer
86:40 - these lingering Q&A questions I'll get
86:43 - to them as soon as I can there's quite a
86:44 - number of them so please be patient but
86:46 - yeah thank you again for your time quick
86:51 - question for you Selena and Alex
86:54 - actually this is definitely like a
86:57 - PostScript to the presentation
87:00 - dude are you either of you in discord
87:02 - pick in the discourse from her I'm not
87:05 - but I can join in so let me get you all
87:09 - the discord server Joseph I don't know
87:12 - if you're still on a lion or Steve
87:14 - Copeland if you're still here hey do you
87:17 - have I like don't have it right now do
87:19 - you have the discord server link Joseph
87:23 - yeah I think you do
87:24 - he's gonna pull it there okay thank you
87:28 - I think that what it seems to have been
87:33 - working there you go Joseph just painted
87:36 - right there so yeah what seems to be
87:37 - working
87:38 - oh I do I was just over in discord and
87:40 - people who are chatting with each other
87:44 - in these presentations are just like
87:48 - taking it over there so I don't know is
87:50 - it just an idea maybe your si devs can
87:53 - show up over there too okay I'm going
87:55 - I'm going to are I'm gonna go hang out
87:58 - and are okay have fun yeah great so and
88:06 - to those of you who are still there I'm
88:07 - gonna post the links to those the two
88:09 - next courses just in case you still need
88:12 - them and then we'll also get in that
88:17 - discord link again someone posted it
88:19 - before how many of you guys are going to
88:21 - finish this Swift course now a nurse
88:24 - will get that letter back oh one other
88:28 - very very important thing so this
88:30 - learned from home conference module is
88:33 - going to be up and available up until
88:36 - the end of today so you can still
88:38 - progress through the course and keep on
88:41 - working on it but note that it's going
88:42 - to be deprecated by the end of today
88:45 - well at the end of today I think maybe
88:47 - tomorrow morning I'll confirm on that
88:49 - but yeah you can still have access to
88:51 - the learn Swift course on the cook Adam
88:53 - II platform yeah so be sure to take it
88:57 - let us know what you think yeah
89:01 - definitely and again thank you so much
89:03 - for joining us and trying to get the
89:04 - discord link for you guys again in case
89:07 - you missed it in the chat and I sorry
89:09 - one more thing I keep on remembering
89:10 - things I want to mention so if you went
89:14 - through the projects and you are not in
89:17 - the pro cook Adam e-version by any
89:20 - chance you might lose that project code
89:24 - so go ahead and copy all of your project
89:27 - code that you want to say whether it was
89:28 - like a challenge actually not the
89:30 - chocolate Emperor oh wait we didn't get
89:32 - to a project so that they should be fine
89:34 - yeah and then to answer John sees
89:36 - questions so
89:38 - this particular one from the learn from
89:39 - home day conference yes we're gonna tape
89:42 - that down later however or learn from
89:44 - Swift course so you're gonna see those
89:46 - same modules we went over those are
89:48 - still on the platform and you could take
89:50 - that send a link to learn Swift for you
89:54 - guys perfect
89:55 - I believe we're like eight or nine
90:01 - modules for learn Swift yes okay so
90:08 - everyone I just sent the link to the
90:09 - learn step of course and we're at time
90:11 - so yeah that's great to see a great
90:15 - talking with you guys and thanks for
90:17 - joining
90:17 - yep thank you enjoy the next one guys
90:20 - bye