00:00 - hi this is Pat with code Kadim II I'm a
00:02 - web developer based in Washington DC
00:04 - I've been teaching coding for over six
00:07 - years now and a very common question
00:09 - that I get with a lot of students is
00:10 - what programming language should I learn
00:12 - or what language is right for me this is
00:15 - a big topic and I don't know that anyone
00:18 - can really answer it adequately in under
00:20 - ten minutes but we're gonna give it a
00:22 - try there are a lot of answers out there
00:24 - trying to answer this question and if
00:26 - you're new to programming it could be
00:27 - very confusing to try to wade through it
00:29 - all you might be worried about this in
00:31 - that's okay part of the problem is that
00:33 - our industry changes so fast this video
00:36 - can't answer all those questions for you
00:38 - but what we are gonna do is take a stab
00:40 - at the following points give you some
00:42 - high-level guidance based on what are
00:44 - some of the most common paths that
00:46 - people take clear up some misconceptions
00:48 - and give you the tools to go out and
00:50 - find the right answer for you I can't
00:53 - promise you will have the answer by the
00:54 - end of this video but I can promise you
00:56 - that you will be closer than when you
00:58 - started let's get going okay so what is
01:01 - a programming language computers are
01:04 - machines that give data outputs based on
01:07 - data inputs they're really great at this
01:09 - and they can give you millions of
01:11 - outputs per second they are serenely
01:13 - undaunted by complexity the problem is
01:17 - that computers do not think like humans
01:19 - do it's really hard for us to talk to
01:21 - them programmers are like the
01:23 - ambassadors between the two worlds we
01:25 - use programming languages to give
01:27 - computers sets of instructions in a way
01:29 - that both parties can understand and at
01:32 - the end of the day a computer only
01:34 - understands binary meaning the ones in
01:37 - zeros so no matter what the programming
01:39 - language is it must eventually compile
01:42 - down to binary the closer to computers
01:45 - native tongue binary the faster the
01:48 - language because there's not as much
01:50 - need for translation but it's also a lot
01:52 - harder to program at that level now here
01:55 - there are two major distinctions in
01:56 - programming languages some languages are
01:58 - closer to how computers communicate
02:00 - refer to as low-level some however are
02:04 - closer the way the you and I would
02:06 - converse and those are called high-level
02:08 - languages there are pros and cons to
02:11 - each so
02:12 - low level languages they're easy for
02:14 - computers to understand and super fast
02:16 - to run but they're very difficult for
02:18 - humans to learn and understand what's
02:20 - happening high level languages are easy
02:22 - for humans to learn use in debug but
02:25 - slower for computers because they have
02:27 - to go through multiple translation
02:28 - cycles to eventually get into something
02:30 - that a computer knows what to do with
02:32 - and it's not just us computers really
02:34 - struggle to understand humans - fun fact
02:37 - there's a whole field called
02:39 - natural language processing and it's
02:40 - trying to crack this programming
02:42 - languages at the end of the day are all
02:44 - just different ways of telling computers
02:46 - what to do and they're usually designed
02:48 - with different philosophies or different
02:50 - approaches to how to build stuff in mind
02:52 - high versus low is more of a spectrum
02:55 - than a black and white sort of thing
02:56 - when I say high level is slower I'm
02:59 - talking about fractions of seconds
03:01 - milliseconds really and there's
03:02 - relatively few tasks where those
03:04 - milliseconds are so important because
03:06 - humans are so much slower we just don't
03:09 - notice when those tasks pile up they
03:11 - become noticeable to us humans ever
03:14 - gotten mad at your computer because it
03:15 - was taking too long to load College
03:17 - computer science degrees don't usually
03:19 - focus on high-level they focus on low
03:22 - level languages as the foundation boot
03:24 - camps like the one I taught at are there
03:26 - to just teach you the high level things
03:28 - you need to get a job and nope you don't
03:31 - need a computer science degree to do
03:33 - programming or to get a job as a
03:34 - developer but yes knowing more about how
03:37 - a computer works in computer science can
03:39 - help with high level users long term for
03:42 - now just know that for most tasks and
03:44 - most jobs high level will do the trick
03:47 - that brings us to the big question which
03:50 - programming language should you choose
03:52 - well because programming languages are
03:54 - tools to talk to computers it's not just
03:57 - about what's best for the computer but
03:59 - what's best for you and why the computer
04:01 - are you going to be working together so
04:03 - we should really ask is what are you
04:05 - doing
04:06 - are you programming for fun are you just
04:08 - curious do you want the easiest language
04:10 - under your belt a particular project
04:13 - that you're working on are you are you
04:14 - trying to get a programming job or are
04:16 - you trying to apply these skills to your
04:18 - current job maybe you're not sure truth
04:20 - is is that there are different right
04:23 - languages for each of these answers
04:25 - to these questions now for a few of them
04:27 - like for fun you could just pick any
04:29 - language you like and dabble and see
04:30 - what you can do some of the common
04:32 - choices here are HTML CSS and JavaScript
04:34 - in that order to build websites and or
04:37 - Python to build almost anything if
04:39 - you're just curious similar story for
04:42 - the fun crowd but maybe you should drill
04:43 - into why you're curious if these cover
04:46 - you great to come back to this video
04:48 - later beyond that this gets real
04:50 - complicated real fast so buckle up now
04:52 - the easiest language is quick to ask but
04:55 - long to answer what's easy depends on
04:59 - what you use it for so for example a
05:01 - hammer is easy to use to drive nails and
05:03 - requires less skill than using a saw but
05:06 - try cutting a tree down with a hammer
05:08 - languages are tools and were created to
05:10 - handle specific tasks so as a general
05:13 - rule some tasks will be easier to learn
05:15 - to program than others HTML is
05:18 - quote-unquote easy but it won't help you
05:21 - with data analysis now if you want to
05:24 - build a project
05:25 - or get a specific job done it matters
05:26 - what kind of project you're doing is it
05:29 - a website is it an application what are
05:31 - you trying to build with this project
05:33 - now if you want to apply your
05:34 - programming skills to your current role
05:36 - that comes with its own bag of questions
05:37 - - like what job are you in marketing
05:40 - needs are gonna be different than the
05:42 - Financial Analysts what industry what
05:44 - sorts of tasks are you doing what kind
05:47 - of technology - do the people around you
05:49 - use at your current job now what if you
05:51 - want to get a programming job and that's
05:53 - the million dollar question before
05:55 - getting too deep into these let me clear
05:57 - up some misconceptions that might be
05:58 - holding you back
05:59 - misconception number one learning the
06:02 - wrong language is a waste of time
06:05 - this is one of my favorites because the
06:07 - truth is that you can't spin your wheels
06:10 - on one language but the truth is is that
06:14 - programming is about patterns many
06:16 - people think the coding languages are
06:18 - like human languages where if you pick
06:20 - the wrong one you're wasting your time
06:22 - like learning Chinese when you want to
06:24 - move to Germany that's not really the
06:26 - case with programming
06:27 - you see programming languages might look
06:30 - different on the surface but they
06:32 - usually have a lot in common and in part
06:34 - that's because they have some shared
06:35 - ancestry all programming languages are
06:38 - trying to
06:38 - efficient they're all trying to cause as
06:41 - few bugs as possible and they're all
06:43 - trying to execute the same set of
06:44 - instructions you start to see the same
06:47 - patterns and structures it's easier to
06:49 - pick up others because they're all using
06:51 - similar concepts these all might look
06:53 - very different to you now but they have
06:55 - a lot more in common than it seems if
06:57 - you know what you want to do and you
07:00 - know the key coding concepts then
07:02 - writing a program is largely a matter of
07:04 - syntax how that concept is written in a
07:06 - particular language so unlike most human
07:09 - languages once you learn one you start
07:11 - seeing the same patterns and structures
07:12 - and once you pick up one it's easier to
07:15 - pick others up once you have some
07:16 - foundational knowledge like you can get
07:18 - from any free code Academy course you'll
07:20 - be able to make better more informed
07:22 - decisions later if you only remember one
07:25 - thing from this video this is it when
07:28 - you're just starting out don't worry
07:29 - about focusing on if you're learning the
07:31 - best language instead focus on learning
07:34 - the concepts and the proper form when
07:36 - you're just getting started some of my
07:38 - students have spent months and sometimes
07:40 - even halted entire projects because they
07:42 - were trying to research what was the
07:44 - perfect programming language for them
07:46 - the truth is is that once you get a
07:47 - foundational knowledge it all becomes so
07:50 - much easier after that but you have to
07:52 - learn the basics first in any
07:54 - programming language will do that for
07:55 - you
07:55 - misconception number two programming is
07:58 - about knowing and doing now as a caveat
08:01 - it is true that you do have to memorize
08:03 - some stuff but the truth is is that
08:06 - programming is primarily about learning
08:08 - it's easy to see developers who know
08:11 - more than you and think they have it all
08:13 - memorized the truth is that we rarely
08:15 - know what's happening when we start one
08:18 - way to look at it is like we're
08:19 - professional Googlers but I like to look
08:21 - at it like we're professional learners
08:23 - we're curious we poke we prod we test
08:26 - sometimes we can figure things out from
08:28 - experience because we've solved them
08:30 - from before however the better a
08:32 - programmer you gets the more likely you
08:34 - are to be asked to solve problems you've
08:36 - never solved before and this is
08:38 - especially true in code breaks we often
08:41 - don't know why it's broken so most times
08:43 - programming is about learning why it
08:44 - broke and learning how to solve it the
08:47 - most senior developers I've worked with
08:49 - the ones I felt the most
08:51 - will will often be the first to admit
08:52 - they don't know what's happening or
08:54 - what's wrong but they're so confident in
08:56 - their abilities to figure it out that it
08:57 - seems like they knew all along it's not
09:00 - uncommon for a developer to stride
09:02 - between languages and technologies
09:04 - throughout their careers as both the
09:06 - challenges they face and the way we
09:08 - program software changes misconception
09:11 - number three there is a crutch way to
09:13 - learn programming now to be clear there
09:16 - are plenty of ways that you can learn
09:17 - programming and some are going to be
09:19 - more helpful than others but the truth
09:22 - is that there are mistakes to learn from
09:25 - an expert programmer is someone who has
09:28 - learned all the mistakes in their field
09:30 - there are some universal truths in our
09:33 - field and there are a lot of bad ways to
09:36 - write software and to learn to program
09:37 - when you're just starting out it's kind
09:40 - of all the same to you learning to
09:42 - program and write good code takes time
09:45 - but it also takes a lot of hard lessons
09:47 - for example you'll hear it echoed from
09:49 - everywhere that you shouldn't repeat
09:51 - yourself when you write code but that
09:53 - won't mean something to you until you've
09:54 - had to run around to 20 different files
09:56 - every time something needs to be updated
09:59 - correct ways to learn to program are
10:01 - presented as correct because
10:01 - well-intentioned curricula is trying to
10:04 - save you from making the same mistakes
10:05 - as previous developers but sometimes
10:08 - those lessons can really only be learned
10:10 - from experience
10:11 - put another way programming is not about
10:14 - knowing what good code is but why is it
10:17 - good code misconception number 4
10:20 - programming languages are about
10:22 - programming and what I mean by that is
10:24 - that it's just cranking out lines of
10:26 - code truth is is that programming is
10:29 - about solving problems underneath this
10:32 - is the basic problem that a lot of new
10:34 - learners struggle with and I certainly
10:35 - was in that camp picking a programming
10:38 - language without a problem is like going
10:40 - shopping for ingredients without a
10:42 - recipe you can buy a bunch of
10:44 - hypothetical ingredients but unless you
10:46 - know what you're making you might not
10:48 - have the stuff you need instead I
10:50 - recommend that learners to start with a
10:52 - problem that they're trying to solve or
10:54 - something that they're trying to do
10:55 - first and then learn what popular
10:57 - frameworks and languages have been
10:59 - written or made to suit that specific
11:01 - Shaolin
11:02 - I'm saying it's more helpful to start
11:03 - with a problem first than it is to start
11:05 - with a programming language if you don't
11:07 - know what you're trying to solve and you
11:08 - just want to learn programming and it
11:09 - doesn't really matter which one you
11:11 - choose okay now so for applying the
11:13 - skills to your job this is a bigger one
11:16 - programming is useful for many people in
11:18 - many different ways it's a big topic but
11:21 - for the majority of people if you're
11:23 - trying to use code at work it's usually
11:25 - in one of the following categories to
11:27 - analyze data to automate tasks or to
11:31 - understand how technology works at your
11:33 - company and every company is different
11:35 - but more or less now we're at a stage
11:37 - where every company is a tech company
11:38 - for analyzing data it matters how your
11:41 - data is stored and how it's used at work
11:44 - accessing that data is often done with
11:46 - sequel then to analyze and visualize you
11:49 - have some options but the big players in
11:51 - this space are Python in the r
11:53 - programming language for automation it
11:55 - depends on what kind of task you're
11:57 - trying to automate and where but you
11:58 - won't go too far wrong by starting with
12:00 - any of the major programming languages
12:02 - lots of people like to start either Ruby
12:04 - JavaScript or Python when writing these
12:06 - kinds of apps for understanding tech at
12:07 - your company and really for all of these
12:09 - keep in mind it matters what these
12:11 - technologies are used for in the office
12:13 - some companies use outdated programming
12:15 - languages like Fortran but programming
12:17 - languages solve problems so a company's
12:19 - technology will likely reflect the kinds
12:22 - of solutions those technologies offered
12:24 - relative to what the company was facing
12:27 - at that time that's important to keep in
12:29 - mind when you're looking at what
12:30 - languages different companies can use
12:32 - for example when Mark Zuckerberg was in
12:35 - his dorm room coming up with the first
12:37 - version of Facebook he didn't worry
12:39 - about what would be perfect but what
12:41 - suited him at the time as Facebook grew
12:44 - they had the chance to change and adapt
12:46 - to their needs when it comes down to it
12:48 - customers investors and employers don't
12:50 - care so much about what your product was
12:52 - built on what matters to them is that
12:55 - the software works that's one of the
12:57 - reasons why what you might need to learn
12:58 - might not be what's popular and trending
13:01 - at all if you want to learn how to
13:02 - program an ATM you'll need to learn
13:04 - older lower level programming languages
13:06 - like COBOL which hasn't been popular in
13:08 - decades but is still used in 70% of
13:11 - global financial transactions
13:13 - games are basically just a specific type
13:16 - of program so you can make a game in
13:18 - virtually any language but the
13:20 - split-seconds of extra speed at the
13:22 - lower level can make a big difference
13:23 - for mobile apps or native apps on any
13:26 - device you'll need to learn at least a
13:28 - little of the specific languages used
13:30 - for that devices operating system but
13:32 - you may not need to learn tons for
13:34 - example these days you can make apps on
13:37 - pretty much anything using mainly
13:38 - JavaScript there's tons of nuance to
13:40 - this topic pros and cons and your
13:42 - infinite ways to write code but don't
13:45 - pay too much attention to the endless
13:46 - discussion about what a best language or
13:49 - what's trending the best pic for any
13:52 - task is usually just to code in
13:55 - whichever language you are most
13:57 - comfortable for everyone with a career
13:59 - focusing on coding I also like to add
14:00 - one piece of top advice think about what
14:03 - sorts of jobs you'd like to have at the
14:04 - end of the day at these companies
14:06 - companies will literally tell you what
14:08 - they're looking for for those positions
14:10 - and they'll also always be up to date so
14:12 - it's just a list of everything that you
14:14 - need to learn if you want to work at a
14:15 - company like that consider keeping an
14:17 - eye on not just entry-level jobs but the
14:19 - more senior wants to so you can map out
14:21 - what you're going to need to learn later
14:22 - this applies to marketers product
14:24 - managers the whole range of tech careers
14:25 - but especially for developers don't
14:27 - worry even if what you want to learn is
14:29 - really complicated or not very popular
14:32 - it's more than ok to start with smaller
14:34 - goals in easier more popular or higher
14:37 - level languages before switching into a
14:39 - harder one later oh this is a huge topic
14:43 - and thanks for sticking with me there's
14:45 - a lot they can still be discussed about
14:46 - this so let's do just that
14:49 - I head over to the web form so that we
14:50 - can continue the discussion there I'll
14:52 - see you next time