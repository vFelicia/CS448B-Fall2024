00:04 - all right we're we're good to go
00:09 - well I am not seeing oh there we go
00:15 - see participants that opened watch you a
00:19 - poll opened and then we will hello puts
00:24 - them in chat chat
00:25 - [Music]
00:30 - everyone everyone give it up for Kenny
00:32 - who is uh who's doing his third straight
00:35 - session here I need to know that
00:39 - krazee-eyez that's that's the reason why
00:42 - but like I'm glad to be here Andrew says
00:51 - yeah I know he keeps following me around
00:52 - Oh find out and why man so many
01:03 - participants from so many different
01:04 - places this is so cool how are the other
01:07 - streams are people coming from what we
01:10 - had Swift and CSS going on yeah so
01:12 - coming in from CSS and remember people
01:15 - from all over the world from the UK and
01:18 - all in the u.s. New York Brooklyn Queens
01:22 - Jamaica Oklahoma wow that's just pouring
01:27 - in from all over yeah no this is this is
01:31 - great um Minnesota school any miss Emma
01:36 - hello Minnesota's so everyone's saying I
01:40 - appreciate it so same thing as the other
01:42 - sessions if you have questions later on
01:44 - will answer questions in the Q&A panel
01:47 - if you want to take some time right now
01:50 - to take a breather get some coffee we'll
01:53 - wait for a few more participants to show
01:54 - up maybe we'll start in a minute or two
01:58 - yeah Kenny maybe if you want to show
02:00 - them where like which course the to get
02:05 - into the course that we'll be starting
02:07 - it yeah sure so I I went through the
02:13 - the course page itself already but if
02:15 - you need help getting there go to a
02:17 - catalog and here this will show you our
02:22 - entire site all our listings and for
02:25 - today we made this special course and
02:27 - it's called learning from home
02:29 - conference once you click into that
02:32 - you'll see the only course available
02:33 - there for today if your if we continue
02:36 - to see a lot of people interested in
02:37 - this we might continue to populate more
02:39 - and add more so definitely let us know
02:40 - I'm gonna click in so that that right
02:42 - now I've made 6% progress today you'll
02:49 - love to see it in a teacher 6 days out
02:51 - of the way but that's because I've reset
02:55 - my progress just to make sure that
02:57 - everything is a blank slate today that
02:59 - is not indicative of my preparation as a
03:01 - teacher just giving you a hard time
03:04 - getting I some questions have to be
03:07 - answered Alex and so I sorry I skipped
03:15 - the step and I jump straight it's a
03:17 - JavaScript I'm gonna go back on one web
03:20 - page and once you go to the syllabus tab
03:24 - you'll see the collection of all the
03:26 - courses that we have available for today
03:28 - and so I'm going to the third one here
03:31 - that's build websites introduction to
03:35 - JavaScript it's JavaScript right yes and
03:38 - then I'm gonna click on the first item
03:41 - here which is an interactive lesson
03:43 - called introduction to JavaScript
03:46 - no not Java please do not click
03:49 - introduction to Java to separate things
03:58 - and once you do that you should land on
04:01 - this page called introduction to
04:03 - javascript titled what is JavaScript
04:11 - alright it's 1:35 how about we get
04:14 - started with Mike did you want to say
04:16 - something before you go yeah just wanted
04:19 - to say hi everyone I'm going to kind of
04:21 - be in the background
04:22 - I'll be off video in a minute but I'll
04:24 - be helping to answer some Q&A especially
04:26 - if we get really busy but I will
04:29 - definitely yield to the experts you have
04:31 - with you Alex and we're going to take
04:34 - you through all the materials so just
04:35 - wanted to say hi and hope I can be of
04:37 - some service in the background and be
04:41 - immensely helpful like thanks oh one
04:43 - more thing
04:44 - this questions come up a lot so we are
04:46 - recording all of these sessions
04:48 - throughout the day and we'll post them
04:50 - all to YouTube they'll probably go out
04:52 - Tuesday we just need some time to like
04:54 - get everything together and but you'll
04:57 - we'll e-mail you with the link so if
04:58 - you're if you're not you'll you'll get
05:00 - access to not only this one but other
05:01 - ones in case you're curious to check
05:03 - them out hi again thanks Mike hi again
05:10 - everyone just introduce ourselves in
05:12 - case you're you're joining in for the
05:14 - first time or maybe you're coming back
05:16 - from lunch I'm Kenny I'm a curriculum
05:18 - developer here at cook at me I've
05:20 - actually worked on the introduction to
05:23 - JavaScript course though hopefully we'll
05:26 - get to the material that I've actually
05:28 - written this is stuff that my colleagues
05:30 - have done a great job on and I'm really
05:32 - excited to have you here
05:34 - yeah and I'm I'm Alex I'm also a
05:37 - curriculum developer I've written a
05:40 - bunch of the kind of data science II
05:43 - curriculum so some Python stuff I'm
05:46 - currently working on our courses I ran
05:50 - the first session with Kenny on kind of
05:53 - creative coding using Java Script so I
05:55 - definitely have some JavaScript
05:56 - experience but I don't have a ton of
05:59 - experience in it and using it like a
06:01 - strict web development way like we're
06:03 - gonna be doing during this session so uh
06:04 - Kenny's definitely the go-to uh for this
06:07 - one I think alex is sawing health cell
06:12 - phone
06:12 - a little bit short there but we've
06:15 - gotten some chance of p5 from DD in the
06:18 - chat I stab you back I just posted the
06:22 - link to the session again we haven't
06:24 - gotten started yet so you need to
06:25 - acclimate yourself go right for I like
06:28 - Mike I will also be trying to answer
06:30 - questions in the chat as as we're going
06:33 - but I will also try to talk to Kevin
06:36 - so thanks Alex most of this is going to
06:39 - be about you guys alright so we're gonna
06:42 - learn JavaScript today
06:43 - I can't guarantee how far it's gonna be
06:46 - part of making a website and so it's
06:48 - gonna be part of the journey that you
06:50 - will go through if you're very
06:51 - interested in web development and we're
06:54 - gonna get to learn a little bit more
06:55 - about the language today for one of the
06:59 - first questions there from Lila do you
07:02 - think it's no good learning lots of
07:04 - things at once CSS HTML Javascript it
07:07 - depends I think it varies from person to
07:09 - person if you have the aptitude to
07:12 - juggle multiple things at once then
07:14 - that's in your persona that's something
07:16 - that you used to for myself I like
07:19 - focusing on one thing at a time
07:21 - so I've often done like back when I was
07:24 - learning web development I've learned
07:25 - HTML first and then I've learned CSS if
07:29 - you can call it that and then I jumped
07:31 - into JavaScript Alex do you have any
07:34 - thoughts on that yeah I think I think
07:36 - it's interesting I think HTML and CSS
07:39 - are pretty different from many other
07:42 - programming languages because they're
07:44 - more of like a markup language more
07:46 - about like form rather than that
07:49 - function but I think one of the one of
07:53 - the interesting things if you're just
07:54 - coming from work Swift that workshop
07:57 - that we ran I think you'll see that
07:58 - there's a lot of similarities between
08:00 - that and JavaScript and so I do think
08:02 - that actually it's it can be an OK thing
08:03 - to be jumping between these different
08:05 - languages when you're a new learner
08:07 - because you can kind of see the
08:09 - similarities and differences and you see
08:10 - that really there isn't a ton of
08:12 - difference is at least on the beginner
08:14 - level between all of these languages
08:16 - like you could definitely take skills
08:19 - that you learn in this in this session
08:20 - and apply them to our Python course or
08:23 - swift course all these other courses so
08:25 - it's kind of fun to drop around between
08:27 - languages sorry I lost audio for a
08:31 - second but yeah we're gonna be jumping
08:33 - around and to answer Jonathan's question
08:36 - and maybe Ashe code leh to JavaScript is
08:41 - used for a lot of things and you'll
08:43 - probably primarily see it with web
08:44 - development so making websites
08:48 - interactive if we were to think of the
08:52 - website as like the human body we when
08:56 - you start off with JavaScript that sorry
08:57 - start off with HTML that provided the
09:00 - structure like the bones of the
09:02 - operation and then CSS is more like the
09:05 - clothing or the skin that you put on the
09:07 - appearance that it takes up and then
09:09 - JavaScript will be the muscles things
09:11 - that make it move make it pop make it
09:13 - interesting so we'll be talking about
09:15 - that today where someone no coding
09:20 - experience sorry I think you've come to
09:22 - the right place coke atom it has a lot
09:23 - of great beginner content and this is no
09:25 - exception what does javascript is one of
09:27 - my favorite course I'm biased because
09:28 - I've helped write it I would put plenty
09:31 - for it yeah I just answered that
09:33 - question to you and I said hi thon but
09:36 - there's a bad place to start one thing
09:39 - that I tell people is kind of like look
09:41 - at outcomes like if you can and
09:43 - sometimes that's hard but if you can
09:44 - figure out like what the heck is like
09:46 - Python even used for what is JavaScript
09:48 - even used for like if you can somehow
09:50 - get a sense of the outcomes of these
09:52 - programming languages then maybe you can
09:54 - pick one that like a lines a little bit
09:55 - your interest for example Python is
09:59 - typically a little bit more like data
10:02 - science you oriented and so that's why
10:05 - that's why it fit that's why I recommend
10:07 - it to people because it's like oh it's
10:09 - the stuff that I'm interested in is more
10:10 - like data oriented as opposed to design
10:13 - oriented so if you can find outcomes
10:16 - that's sometimes temples yeah that's a
10:18 - really good point Alex
10:20 - there's also uphold that ELISA open up
10:22 - thanks ELISA I was seeing responses slow
10:25 - in do you want to say a few words
10:27 - anything before we know ask you guys
10:38 - a lot of you guys are first-timers some
10:43 - of you used it a few times before
10:45 - comfortable with the basics okay one
10:49 - expert in here here to mentor others
10:51 - thanks for the support and let's see
10:55 - where you see jobs reviews on a website
10:57 - mostly they're never seen it used
11:00 - anywhere until today okay that's great -
11:06 - okay making a full application awesome
11:10 - so pull there but there's a lot of
11:13 - interesting responses will definitely
11:15 - cater to the beginner audience and we'll
11:18 - see how far we can get with this and
11:20 - again it's about you guys they ask your
11:23 - questions if you don't get to fun
11:24 - content well we also have a lot of
11:27 - different resources like our forum we
11:28 - have a discord channel so without
11:31 - further ado shall we Alex let's get
11:33 - started let's do it I'll be reading the
11:35 - narratives and will be progressing from
11:38 - there if you don't want to hear me
11:40 - listen and you want to read on your own
11:41 - feel free to meet me I won't be offended
11:42 - I probably won't even know that you did
11:44 - it yeah
11:47 - what is JavaScript last year millions of
11:50 - learners from our communities started
11:51 - with JavaScript
11:52 - why JavaScript is primarily known as
11:55 - language of most web most modern web
11:57 - browsers and it's earlier xscape a bit
12:00 - of that gave it a bit of a bad
12:02 - reputation however the language has
12:04 - continued to evolve and improve
12:05 - javascript is a powerful flexible and
12:08 - vast programming language now used for
12:09 - increasingly complex web development and
12:11 - yacht
12:12 - since javascript remains at the core of
12:14 - web development it's often the first
12:16 - language learned by self-taught coders
12:18 - eager to learn a bit we're excited for
12:20 - what you'll be able to create with the
12:22 - JavaScript fundamentals you gain here
12:23 - javascript powers the dynamic behavior
12:25 - on most websites including this one in
12:28 - this lesson you will learn introductory
12:30 - coding concepts including data types
12:32 - built-in objects essential knowledge for
12:34 - all aspiring developers make sure you
12:36 - take notes and pace yourself this
12:38 - foundation will set you up for
12:40 - understanding the more complex concepts
12:42 - you'll encounter later ok so that's just
12:46 - the introduction is there any questions
12:48 - that we can get to before we actually
12:50 - get started
12:52 - let's take a look any use for JavaScript
12:55 - outside of web and mobile so there are
12:59 - actually full scale applications if you
13:01 - have ever used slack
13:04 - this interactive chatroom app they they
13:08 - built it using something called electron
13:10 - that jas so while it's not a full web
13:12 - browser and it's not fully mobile but
13:15 - there are mobile applications it's its
13:17 - own full application and in its own
13:18 - right so you can definitely feel built
13:20 - full applications assets
13:24 - how does UX user experience play a role
13:27 - in HTML CSS and JavaScript there's a lot
13:30 - of different factors going on there
13:32 - right because in order to have a good
13:34 - user experience
13:35 - all these things must fit in together
13:37 - and provide a good flow for learners
13:40 - sorry for your users so click through
13:43 - your site and use it at the difference
13:46 - between JavaScript and PHP that's a
13:48 - that's a tricky one because they're both
13:49 - kind of website related right
13:52 - yeah I don't wanna model the waters too
13:55 - much PHP right now but that is a good
13:58 - point if we get to if we have enough
14:00 - time later I would love to look up some
14:02 - documentation some comparisons and why
14:05 - one might prefer another though honestly
14:07 - I don't have much experience with PGM my
14:10 - very basic understanding with it and
14:12 - again I don't have a ton of experience
14:13 - with with it either is that javascript
14:15 - is more client-side meaning like
14:19 - javascript is running in your web
14:21 - browser and PHP is more server-side so
14:25 - talking to like more of the backend
14:27 - stuff but again it's like a very high
14:30 - level description yeah so Alex
14:32 - so what knowledge must you have about
14:35 - HTML CSS and JavaScript to be able to be
14:38 - a web developer let's see I think that
14:44 - largely depends on maybe the job that
14:46 - you're looking for if you want to be a
14:48 - front-end developer that seems to be the
14:51 - major skill set that you might look into
14:52 - we just talked about PHP so that might
14:56 - be part of the toolkit you want to use
14:58 - as well depends on like whatever job it
15:00 - is that you're applying for and what is
15:02 - it that they're ultimately asking you to
15:04 - do
15:06 - also those sorry I was answering a
15:10 - another question I put you on the spot
15:12 - it's okay I think I answered it but we
15:14 - can you can definitely return to any of
15:15 - these questions later on as well and
15:18 - we're gonna ask can you explain a little
15:20 - bit the differences between web
15:23 - developers software developer and
15:24 - software engineer so I think again it
15:28 - goes back to the job description at hand
15:30 - web developer is very much specific to
15:32 - working on applications on the web so
15:35 - websites web pages maybe even know let's
15:39 - keep it so that for now and then a
15:41 - software developer or software engineer
15:43 - is a bit more broad you can work on
15:45 - applications that aren't limited by the
15:47 - web it could be maybe important on
15:50 - something on the server size on the
15:52 - backend they say so depends it's just
15:55 - like broader definitions of how you
15:57 - would categorize jobs yeah is it
16:01 - possible to find a job after completing
16:03 - one of the career paths did you just
16:06 - answer that I didn't maybe Mike
16:09 - yeah the career paths are one of the
16:11 - like feature or one of the products that
16:13 - cook at me that are kind of the longest
16:15 - the longest tracks that we have Mike I
16:18 - don't know if you uh if you want an
16:21 - answer but yes good question um it
16:23 - really it depends on so many factors of
16:25 - course but I would say you know if
16:27 - you're a totally beginner and you get
16:28 - through the career path you know and a
16:30 - good next step might be to check out a
16:32 - site like up work to get some to get
16:34 - some experience freelancing take on some
16:36 - projects you can get paid for them and
16:39 - then you know after you build up some
16:41 - some experience it might be easier to to
16:44 - get an interview and get a job from
16:45 - there thanks Mike where do you code
16:50 - JavaScript to make a website we probably
16:54 - won't get into that specifically today
16:57 - we'll just be learning JavaScript as a
16:59 - language how to use it how it's do stuff
17:03 - for us but you can include JavaScript
17:06 - into a website using something called a
17:08 - script tag so if you followed us back
17:11 - from the CSS webinar we had a style tag
17:16 - that we added a CSS to
17:19 - then we can also link out differently
17:22 - using a link tag to a stylesheet that
17:25 - was in a separate file all together and
17:26 - the same sort of idea applies for
17:28 - JavaScript where we can link to a script
17:31 - and that's gonna get stored in a
17:33 - different file and had that file
17:34 - interact with HTML and potentially CSS
17:38 - that's going on in the web page and
17:40 - website yeah we did that a little bit in
17:44 - the EP 555 session if you were if you
17:47 - were in that but very briefly that's how
17:51 - we were able to get the final solution
17:53 - right Alex that's right are we doing
17:57 - additional projects in the zoom session
17:58 - we're just writing through the course in
18:00 - case we need to leave early people
18:02 - trying to make it to the projects I have
18:04 - no guarantees though um it just depends
18:07 - on our pace how do we feel at the time
18:09 - what are we going through what see can I
18:15 - learn enough with Codecademy Pro to get
18:17 - a job coding
18:18 - I think this varies I think that you can
18:23 - definitely learn a lot but a lot of
18:26 - times employees are also looking for
18:28 - practical experience as well so like
18:29 - Mike mentioned with freelance experience
18:32 - I've also been told that working on
18:34 - different projects and finding different
18:36 - things that I can apply my skillset to
18:38 - to show employees employers excuse me
18:41 - that I have the skills I need for the
18:44 - job is also incredibly helpful almost
18:47 - yeah I think I've been having a
18:49 - portfolio or a github account or
18:51 - something is uh is really important to
18:54 - being able to show that you've that
18:57 - you've put these things in the past or
18:58 - that you can't produce things and I
19:00 - think that's something that we try to do
19:02 - later on in the end our paths and code
19:04 - Academy is like start working on
19:06 - projects outside of code academy on your
19:08 - own computer and so getting you
19:11 - comfortable with working in your own
19:12 - environment so then you could maybe you
19:15 - know create a portfolio or create a
19:16 - website or do something like that that
19:18 - you could show that you could show
19:20 - people when you're applying to jobs
19:23 - Jonathan the difference between Java and
19:25 - JavaScript two separate languages I I
19:30 - don't have much experience with Java but
19:32 - it's
19:33 - related to working on the backend if I'm
19:35 - right yeah I mean so I think that Java
19:41 - is used to write applications and not
19:47 - necessarily like web applications right
19:49 - we're really worried at least what we
19:52 - focus on in the JavaScript and all of
19:53 - our JavaScript courses are like making
19:54 - web apps or web applications ends you
19:57 - can make Java applications like you know
20:01 - you end up with a with a Java file that
20:05 - you can like sense your send your friend
20:07 - and they can double click on and it will
20:09 - open up on their desktop right and so
20:10 - it's like that sort of application
20:11 - rather than a website or something like
20:14 - that yeah Aman had a good comment about
20:16 - the difference between Java and
20:18 - JavaScript is the same as the difference
20:19 - between a car and carpet sort of idea I
20:22 - guess it is annoying if they're so
20:25 - similarly named well it's like they
20:27 - based name off right because John was so
20:29 - popular back then and so when they
20:31 - introduced JavaScript they wanted some
20:33 - connotation with this super popular
20:34 - language and I guess that connotation
20:37 - just never really laughs it's good
20:39 - question answer a few more before we get
20:44 - started with coding unless you guys just
20:47 - want me to keep answering questions to
20:48 - just totally fine Bobby yeah maybe we
20:51 - can ask any chat whether you want us to
20:52 - like get started on the lesson itself or
20:54 - keep answering questions because I feel
20:56 - like we can okay
20:58 - everyone everyone's alright so and the
21:06 - first thing let's Russ let's let's start
21:10 - with the second exercise which is the
21:13 - console
21:13 - ok the console is a panel that displays
21:17 - important information like errors for
21:19 - developers much of the work that the
21:21 - computer does with our code is invisible
21:23 - to us by default if we want to see
21:25 - things appear on our screen we can print
21:27 - or log to our console directly in
21:30 - JavaScript the console keyword refers to
21:33 - an object a collection of data and
21:35 - actions that we can use in our code
21:38 - keywords are words that are built into
21:40 - the JavaScript language so that the
21:42 - computer will recognize them and treats
21:44 - them special one action
21:46 - method that is built into the console
21:49 - object is the log method when we write
21:51 - console dot log and we'll be doing this
21:54 - a lot through our course by the way what
21:56 - we put inside the parentheses will get
21:58 - printed or log to the console it's going
22:01 - to be very useful for us to print values
22:03 - to the console so we can see the work or
22:05 - see the work that we're doing and here's
22:08 - a code example of console log 5 and that
22:12 - will print out 5 this example logs 5 to
22:16 - the console the semicolon denotes the
22:18 - end of line which statement although in
22:20 - JavaScript your code will usually run as
22:22 - intended without a semicolon recommend
22:24 - learning the habit of ending each
22:26 - statement with semi clones so you'll
22:28 - never leave one out in the few instances
22:29 - they are required you'll see later on
22:32 - that we use console.log to print
22:34 - different types of do different kinds of
22:36 - deal ok and let's take a pause for a
22:42 - second there any sort of questions
22:46 - anything that's lingering on people's
22:48 - minds before we get started on the
22:50 - checkpoints a little better I didn't
23:04 - move it to the side but I just made the
23:07 - antic the text a little bit better but
23:09 - that's that's gonna have pretty good
23:12 - yeah okay let's get started
23:17 - a lot of times I do like checking out
23:19 - how the code snippets look in our code
23:23 - itself and how it prints but in doing so
23:25 - it's probably gonna solve the first
23:27 - checkpoint for us so if you're following
23:30 - along chances are you're not 5 but we
23:33 - can try it out regardless run it and
23:37 - notice that 5 pops up so this code
23:40 - example that was right up here at the
23:43 - top was telling us the truth
23:44 - okay now that we did never lie to you
23:47 - you should just always check on your own
23:48 - just to gain that experience for
23:50 - yourself ok let's see another thing is
23:55 - you'll probably notice that I'm not
23:57 - clicking run instead on I'm on a Mac so
24:00 - I'm
24:00 - pressing a command return or command
24:02 - enter that just saves me a little bit of
24:05 - time and another disclaimer I haven't
24:09 - really bad habit of leaving out my
24:11 - semicolons Alex I want to put you on the
24:14 - spot because I think you do too
24:15 - yes so if you if you want to see that
24:20 - semicolon consistently remind me in the
24:22 - chat otherwise I will forget and we'll
24:25 - just continue coding I hope that's okay
24:27 - as well any one of the things that I
24:30 - thought might be good to show is that
24:31 - here on these lessons we have the
24:33 - console right there on the right side in
24:36 - code Academy but if somebody is
24:37 - programming off of code Academy what is
24:40 - the console how do you find it all that
24:42 - sort of stuff
24:43 - yeah it's a good good question um so
24:46 - we'll dive into that a little and the
24:49 - easiest way that will apply to most
24:51 - people I'm using a Chrome browser but if
24:54 - you right click and scroll down to this
24:56 - option called inspect click on it and
25:01 - then I'll open up a panel that'll
25:03 - display multiple things and two things I
25:07 - guess we can focus in on are the
25:09 - elements tab at this right here the very
25:11 - top and it has a whole lot of
25:15 - information this is the basic HTML
25:17 - structure of our site and it includes
25:20 - all the IDS classes attributes if we
25:24 - scroll up a little bit we'll see that
25:26 - we've included a script tag like I was
25:28 - mentioning before and then in the head
25:31 - like we were talking about in the CSS
25:33 - webinar you'll see a lot of relationship
25:36 - like shortcut icons and we'll also have
25:39 - a lot of style sheets here on the bottom
25:42 - the question at hand though about the
25:44 - console is right here and there's quite
25:47 - a few warnings here so I'm just going to
25:49 - clear it
25:49 - there's this option to clear the console
25:51 - right here which is the circle with
25:53 - strike through it and doing so will
25:56 - clear the console and we can do the same
25:58 - thing that we were doing in our text
26:01 - editor that's on our site using this
26:03 - console so even if you're not on coke at
26:05 - me let's say they're on Google home page
26:10 - Oh Google Google if you're allowed to do
26:14 - that
26:15 - what curse did it's crazy and I do the
26:18 - same thing where I try to inspect the
26:20 - page even though I don't have a web
26:23 - browser like we did for the code Academy
26:26 - site if I click on the console tab I'll
26:30 - clear my warnings again and I do console
26:33 - that log
26:34 - five just like we did before should see
26:38 - five pop-up and the same idea there or I
26:43 - just pressed enter so run the code so
26:47 - there's no Run button here but pressing
26:49 - enter will run yeah so similar idea I
26:52 - mean really but what code Academy is
26:54 - doing is just kind of like making that
26:55 - whole process of like having to go into
26:57 - this menu and lock up all this stuff
26:58 - right coke Adam II is nice because we
27:00 - have the output right there but you know
27:03 - we're not doing anything fancy you could
27:05 - be writing JavaScript in the in the real
27:08 - console as much as you want yeah great
27:12 - point offs so going on the next line
27:16 - long number representing the number of
27:18 - weeks you've been programmed this is
27:21 - gonna take some math it's like let's say
27:25 - for two years and make it easier for
27:27 - myself each year is 52 weeks so I should
27:32 - be constant logging like one on four I
27:35 - did the semicolon in for you guys five
27:39 - and 104 and I got a green checkmark
27:42 - which means we're good to go
27:44 - all right let's take a pause here yes
27:47 - and let's through some questions yeah
27:50 - there's a question about what's the
27:51 - difference between return and console
27:54 - dot log I might be getting a little bit
27:57 - too far for like functions and return
27:59 - and all that stuff but yeah so let's
28:03 - stop briefly return because a keyword
28:06 - that is used for functions and a
28:09 - function is like a collection of code
28:13 - that does a specific task that executes
28:16 - a whole bunch of code at the same time
28:18 - we have returned we won't see it print
28:21 - it to the screen but the computer is
28:23 - going to know
28:23 - about it because it's done that
28:25 - computation and it's telling us okay
28:26 - after we do all these steps after we do
28:28 - all these calculations give this value
28:30 - back so as developers we're not privy to
28:34 - that we can't see that directly we can
28:36 - save it somewhere we can store it we can
28:37 - print it out later but console.log is
28:40 - really helpful because it allows us to
28:42 - directly see the the output that becomes
28:46 - a bit more clear I know that's a little
28:47 - hand wavy but once you get to functions
28:49 - you'll see the the start distinction
28:51 - between the turn and console.log how
28:54 - about how about print we had a question
28:56 - about that
28:59 - they're both referring to the same
29:01 - things in this case for JavaScript
29:03 - truth be told while I was trying to
29:06 - prepare for this webinar I I've gotten
29:10 - used to writing Swift and their syntax
29:13 - for printing out values that the console
29:16 - is actually called print and so I've
29:18 - been writing this a lot it's just like a
29:20 - and getting an error so I think this is
29:24 - a good segue into what an error is by
29:25 - like printing and console logging for
29:27 - JavaScript is talking about the same
29:29 - things while I have you here and while
29:32 - we have this glaring red text at us yeah
29:36 - it's telling us something's wrong right
29:39 - like red text not good and if you ever
29:41 - need to debug something look at this
29:43 - spectrum it's actually really helpful
29:45 - I mentioned that trace back trace is
29:47 - just how to find where in your code
29:49 - that's giving you the error so in this
29:51 - case I'm seeing that it's coming from
29:53 - this file Holmes /cc user workspace
29:58 - introduction to JavaScript console slash
30:00 - fjs notice in the top left corner here
30:04 - you have apt is which is the file that
30:07 - we're working on and it's telling me
30:09 - that it's on line 4 so this thing about
30:12 - print one two three zero one eight
30:15 - reference print is not defined so in
30:18 - JavaScript we don't have a print
30:19 - statement and that's how I was able to
30:22 - remember that console.log is the way to
30:24 - print things in JavaScript not print
30:28 - nice clear that way and it's gone okay
30:33 - any other questions you think we should
30:36 - bring for the table Alex
30:38 - yeah so I think last one on console dot
30:42 - log if the user doesn't see console dot
30:44 - log then why do we why would we want to
30:46 - use it oh I love using console dialog
30:50 - for a very quick and simple debugging
30:54 - when we're writing a lot of code and
30:57 - it's not as simple as just two lines of
31:01 - JavaScript we're getting it's a hundreds
31:02 - and maybe thousands of lines of
31:05 - JavaScript if we need a just pinpoint
31:08 - one thing where we know something weird
31:11 - is happening then we can add a console
31:13 - log statement check that the values are
31:14 - correct we're not correct and fix it
31:16 - according pretty much cool all right
31:20 - yeah I think let's go on let's do it
31:25 - okay comments so programming is often
31:31 - highly collaborative in addition to our
31:34 - own code
31:35 - sorry in addition our own code can
31:36 - quickly become difficult to understand
31:38 - when we return to it sometimes only an
31:40 - hour later for reasons it's often useful
31:43 - to leave notes in our code for other
31:44 - developers or ourselves as we write
31:47 - JavaScript we can write comments in our
31:49 - code that the cut the computer will
31:51 - ignore as our program runs these
31:53 - comments exist just for human readers
31:56 - comments can explain what the code is
31:58 - doing leave instructions for developers
32:00 - using the code or add any use other
32:03 - useful annotations there are two types
32:06 - of code comments in JavaScript a single
32:09 - line comment will comment out a single
32:10 - line and is denoted by two forward
32:13 - slashes preceding so you'll see an
32:17 - example of that there where the first
32:19 - line
32:19 - prints five to the console is the
32:21 - comments itself and constant that a lot
32:23 - of f5 is our code you can also use a
32:26 - single line comment to comment out after
32:29 - a line of code so notice it looks a
32:32 - little weird with my screen full Emacs
32:34 - that way but zoom out a little bit
32:36 - you'll see console that log 5 semicolon
32:39 - and then the comment goes after the code
32:42 - which also is completely valid the other
32:46 - type of comment is a multi-line comment
32:48 - a multi-line comment will comment out
32:51 - multiple lines is denoted by the forward
32:53 - slash with an ass with the asterisk that
32:56 - follows it to begin the comment and a
32:59 - asterisk forest latch to end the comment
33:01 - and you'll see an example of that right
33:04 - below you can also use the syntax to
33:07 - comment something out in the middle of a
33:10 - line of code so we took a look at that
33:12 - console and that we have a multi-line
33:15 - comment but it's used just in the middle
33:17 - of the console log statement where
33:19 - ignored is ignored is yeah followed by
33:23 - another comments that's that's still
33:26 - print this five let's take a second
33:31 - right through a bunch of text yeah
33:33 - people are notice people are noticing
33:34 - that commenting and JavaScript is the
33:37 - same as some other languages definitely
33:40 - a lot of languages use similar similar
33:43 - comment structures where let's see there
33:45 - are these forward slashes or in Python
33:49 - and are both of them are using hashtags
33:53 - for comments so you'll see similar
33:55 - similarities between different languages
34:00 - so that said comments are super useful I
34:05 - a lot of times just a debug code but
34:08 - yeah so though what the narrative said
34:11 - at the very beginning of it being highly
34:13 - collaborative and allowing other
34:15 - programmers who are working on the same
34:17 - project with you to know what your
34:19 - intentions are what their intentions are
34:21 - things that still need to be left things
34:24 - that need to be done later on comments
34:26 - are immensely useful
34:28 - so we'll start practicing with some of
34:32 - the code comments and I'll check in with
34:34 - you guys me afterwards but the first
34:37 - thing is that it asks us to practice
34:39 - adding some code comments and to the
34:41 - right we've been provided with the
34:43 - beginning of the book catch-22 by Joseph
34:46 - Heller and asks us to on line one write
34:49 - a single line comment that says opening
34:51 - line so right here I would just add two
34:55 - forward slashes opening one actually
34:59 - before we do this this is a good
35:01 - opportunity to show you what our
35:03 - personal error messages
35:05 - for why you're not passing a checkpoint
35:07 - how would that look like so I'm not
35:09 - gonna had anything yet but I'm gonna run
35:10 - the code and everything prints out just
35:13 - fine there's no error like we saw before
35:15 - for the JavaScript interpreter but we do
35:19 - see a box that has some red text on the
35:21 - bottom tells us that asks us did you
35:23 - write a single line comment using two
35:25 - forward slashes so these two different
35:27 - error messages are completely separate
35:29 - where we're running tests on your code
35:32 - through these steps and these
35:33 - checkpoints just to make sure that
35:35 - you're writing your code right and then
35:37 - any errors that pop up in that right
35:39 - side panel is gonna be errors that are
35:42 - related to syntax most of the time that
35:44 - the JavaScript interpreter as it reads
35:47 - your code and like makes sense of it if
35:49 - it stumbles and there's something wrong
35:51 - they will let you know okay so I'm gonna
35:54 - do it properly this time around I'm
35:56 - gonna write it so two forward slashes
35:58 - opening line and I'm gonna front it and
36:02 - notice my red X is now a green checkmark
36:07 - I'm pretty good about myself of that I
36:10 - wanna can people as I'm as I'm typing
36:14 - out questions can people hear me typing
36:17 - in the in the chat I don't wanna I don't
36:21 - know whether I should be muting myself
36:22 - as I'm answering questions okay
36:23 - excellent I will keep myself unmuted so
36:25 - I can continue to talk to Kenny as I
36:27 - type anything great sweet and then for
36:35 - the second checkpoint or sometimes
36:38 - you'll hear referred to as steps and
36:40 - more used to it as checkpoint so food
36:44 - sing-along comments are great for adding
36:46 - context to your code multi-line comments
36:48 - are African best suited to prevent a
36:50 - block of code for running however both
36:52 - types of comments can be used for either
36:55 - purpose use a multi-line comment so that
36:57 - the consonant log statements on lines 4
37:00 - through 9 are commented out
37:02 - so I'll start if you ever need a hint
37:05 - you can click on those and it tells me
37:08 - the syntax can which forward slash with
37:11 - an asterisk that follows and immediately
37:13 - I see all my text is kind of grayed out
37:15 - okay
37:17 - but I know that I need to end it and
37:19 - chat real quick should it go online at
37:22 - the end of line 10 or at the start of
37:25 - line 11 does it matter
37:29 - either one I'm seeing 111 all right does
37:35 - it matter don't know both let's let's
37:37 - figure this out okay so I'm gonna I'm
37:39 - gonna just run it I put it at the I love
37:42 - it because that's the first response I
37:43 - saw and yeah all of it was commented out
37:47 - so let me see if if I remove that and I
37:51 - put it at the end of line 10 that also
37:57 - works as well so it just depends on
37:59 - preference on style what you have been
38:02 - working on previously how your comments
38:04 - have looked before
38:05 - keeping that consistency it's often
38:08 - things that may feel insane as you work
38:10 - through your project and things don't
38:12 - Paulina and here's a good question about
38:15 - comments I think I know the answer to
38:16 - but you probably know for sure is when
38:20 - something is commented out does it still
38:21 - run in the background or use resources
38:24 - as if it wasn't commented out is there a
38:26 - difference or resource wives between
38:27 - commenting out and not commenting out
38:28 - things it's interesting I I don't
38:31 - actually have too much insight into that
38:32 - as like as far as what the interpreter
38:34 - does with it I believe once it reads
38:37 - those two forward slashes or the slash
38:40 - asterisk it's kind of just ignores when
38:42 - it keeps running through until the end
38:44 - so it's probably adding a little bit of
38:47 - text adding a little bit of space to
38:48 - your project but as far as it affecting
38:51 - the interpreter and the run speed I
38:52 - don't think there's any substantial yeah
38:56 - I would guess that it doesn't do
38:57 - anything with it just because if there
38:59 - was like a syntax error in that in that
39:01 - comment and I was trying to run it like
39:02 - real code then you could have like bugs
39:05 - in a comment and then you know that
39:07 - might screw with the with the
39:09 - interpreter in some way so I would guess
39:11 - that it just reads it as text and
39:13 - doesn't do anything with it yeah yes
39:16 - thanks for that great question okay I'm
39:20 - also a really big fan of shortcuts my
39:22 - way or like hockey is so if you guys are
39:24 - on a Mac if instead of writing forward
39:27 - slash every single time you can to the
39:30 - right use come
39:31 - and /and noticed that my cursor as it is
39:34 - at the very end of it and it still
39:36 - commented out the code for me okay I
39:38 - believe on Windows it's like control
39:41 - forward-slash for those on Windows if
39:43 - you can fact check me on that I also use
39:48 - that as a means of like commenting out
39:50 - multiple things at a time sometimes
39:52 - instead of using multiple the multi-line
39:55 - comment so I can highlight both lines
39:57 - and command /ice and same idea here so
40:02 - if you guys are into shortcuts really
40:05 - helpful things too man thanks for the
40:08 - clarity a confirmation guys on Windows
40:10 - appreciate it well I think that's really
40:15 - up for comments
40:16 - let's go on to the next list for folks
40:23 - if you're if you're not passing the like
40:27 - code Kadim e checkpoints for some reason
40:28 - there's a wait and you want to continue
40:30 - on the lesson with us there's a way to
40:32 - get the solution codes you want to demo
40:34 - that real quick Kenny sure I'm gonna go
40:37 - back yeah I saw some I don't want
40:39 - somebody had an error and I feel like
40:42 - rather than uh rather than trying to
40:44 - debug it right now it's might be easier
40:46 - to just like go onto the next lesson yes
40:49 - so also if you guys are ever stuck in
40:50 - your code like is completely broken no
40:53 - idea what's going on this reset
40:55 - workspace this repeating arrow will
40:58 - allow you to set the status of your code
41:01 - to our initial sort of default code that
41:04 - we've provided for you guys okay I think
41:08 - there is two ways I'll show you the hard
41:10 - way of how to do it where I'll run my
41:12 - code run my code again and then this
41:16 - panel this little text pops up with a
41:20 - light bulb icon and I can click view
41:23 - solution there's very encouraging text
41:26 - to say that no way I want to keep trying
41:28 - but if I've gotten to this point I might
41:30 - just want the solution to the entire
41:32 - exercise so keep in mind though when you
41:34 - get the solution it doesn't give the
41:35 - solution just for the single checkpoint
41:37 - it gives the solution for the entire
41:38 - exercise yeah that's just because of the
41:41 - way we store files so keep that in mind
41:43 - so
41:44 - I can do that and awesome it looks
41:47 - exactly like it did when we were doing
41:49 - it together I'm gonna reset this
41:53 - exercise again just to show you the
41:56 - easier way
41:56 - you're not stumped but you're short on
41:59 - time and you want to follow along with
42:00 - the live stream so here in the get help
42:05 - panel there is also a solution tab that
42:08 - you can click and the same light bulb
42:10 - will play appears and get solution code
42:13 - that's the same thing and so in this
42:15 - case just give me the solution so that
42:17 - we can move on and I'll run it again and
42:20 - it does the same thing yep data types
42:30 - now this is when we start getting into
42:32 - how like the underlying concepts of how
42:35 - JavaScript works and how it interacts
42:37 - with date information data types are the
42:42 - classifications we give to the different
42:44 - kinds of data that we use in program in
42:47 - JavaScript
42:47 - there are seven fundamental data types
42:49 - one number any number including numbers
42:53 - with decimals so that includes four
42:55 - eight one thousand five hundred sixteen
42:57 - or twenty three points for two strings
43:01 - which is any grouping of characters on
43:04 - your keyboard that can be letters
43:06 - numbers spaces symbols etc they can be
43:10 - surrounded by single quotes or double
43:11 - quotes that we prefer single quotes some
43:15 - people like to think of strings as fancy
43:17 - word for text as a lot sometimes they'll
43:20 - just contain sentences or like words
43:22 - that you want to include that you want
43:25 - to be printed out boolean this data type
43:29 - only has two possible values either true
43:31 - or false and keep this in mind
43:34 - they don't have quotes once we put
43:36 - quotes around them they become strengths
43:37 - so boolean czar true or false it's
43:40 - helpful to think of boolean as on or off
43:42 - switches or the answer is to a guess or
43:45 - no question or no this data type
43:50 - represents the intentional absence of a
43:52 - value and is represented by keyword not
43:55 - without quotes
43:58 - undefined this data type is denoted by
44:00 - the keyword undefined without quotes
44:02 - again it represents the absence of a
44:04 - value though it has a different use than
44:07 - we can talk about that a little after I
44:09 - finish I want to keep going just so that
44:12 - we've round out six symbol a new newer
44:16 - feature to the language as singles our
44:18 - unique identifiers useful and more
44:19 - complex coding no need to worry about
44:21 - these for now and then seven object
44:25 - objects are collections of related data
44:27 - the first six of those types are
44:30 - considered primitive data types they're
44:32 - the most basic data types in the
44:34 - language objects are more complex and
44:36 - you'll learn more about them as you
44:37 - progress through JavaScript at first
44:39 - some types might not seem like a lot but
44:41 - you'll soon observe the world opens up
44:43 - with the possibilities once you start
44:45 - leveraging each one as you learn more
44:47 - about objects you'll be able to create
44:48 - complex collections of data but before
44:52 - that let's get comfortable with strings
44:54 - and numbers so here in the example we
44:57 - have console.log and it's logging
45:00 - location of coke atom a headquarters 575
45:03 - Broadway New York City and then we also
45:05 - console.log 40 a number in the example
45:09 - above we printed out a string so that
45:11 - whole collection of characters right
45:13 - here that is the strength that is
45:15 - wrapped between the single quotes our
45:17 - our string isn't just a single word
45:19 - includes both capital and lowercase
45:21 - letters spaces and punctuation careful
45:24 - on that guys on some of our tests we
45:27 - expect very exact strings so like
45:30 - missing a period or not catalyzing a
45:32 - letter that can cause you to go into an
45:35 - error and we'll see that later on okay
45:38 - after that printing of the string we
45:40 - have console.log 40 so then we print the
45:43 - number 40 and we didn't use quotes okay
45:47 - take a second now let me talk a little
45:51 - bit about null and undefined they are
45:54 - they do have their own distinct
45:56 - differences we can think of no as like
45:59 - it says the intentional absence of
46:01 - values so we don't want anything
46:02 - assigned there whereas undefined for
46:06 - from - saying it's often like the
46:08 - default value that gets assigned first
46:11 - for it accepts another about okay and
46:14 - that becomes a talking point for
46:16 - variables for JavaScript one of the
46:18 - quirks that you'll find as you start
46:20 - developing is that once you declare a
46:22 - variable but you don't initialize it
46:24 - you'll instantiate it you don't provide
46:26 - a value straight off the bat it just has
46:28 - a value of undefined whereas no you need
46:32 - to assign that back you need to sign the
46:34 - absence of a value no to that
46:37 - so that gets cleared up a little bit
46:38 - more with variables and with a symbol
46:42 - honestly I've never used it before so
46:46 - this day I know I've seen the
46:48 - documentation write it it creates like a
46:49 - very unique string in my mind but it's
46:53 - often like very situational and all
46:56 - while this really is but I've not really
46:59 - run in so many situations where I've had
47:01 - to use a symbol before we got a couple
47:04 - of questions about null in other
47:06 - programming languages I know in Python
47:09 - it's none with the capital and okay what
47:12 - is like what has it been Swift I think
47:15 - it's nil nil is a common one null is
47:20 - used in other programming languages as
47:22 - well so you'll see this you'll see this
47:23 - concepts all over the place but you
47:26 - slightly slightly differently any other
47:30 - questions no at some discussion about
47:36 - like the single quote versus double
47:38 - quote difference for Strings
47:41 - why do you what do you prefer why do you
47:45 - prefer it what do you think the
47:46 - difference is oh if I'm gonna be totally
47:50 - honest I
47:51 - I just like using my shortcuts and so
47:53 - like if I'm typing things away it's
47:56 - perfectly valid and I think it's more
47:58 - acceptable to write the multi-line
47:59 - comments here such but because I am lazy
48:04 - I can't just like highlight all of this
48:06 - and then I can change I was a lot for me
48:11 - everything
48:12 - well what I'm used to before is just
48:15 - highlighting everything and command or
48:17 - control of /and comments it out and then
48:19 - I can toggle back to work between yeah
48:22 - sorry sorry the question was about a
48:24 - string
48:25 - Oh is a single quotes versus double
48:28 - quotes and like why I think you've said
48:34 - that the this standard is what's like
48:37 - the recommended uses it single quotes or
48:39 - double quotes yeah great question so
48:42 - this goes back to style guides so we've
48:46 - been talking a little bit about remember
48:47 - that line of like should I add this on
48:49 - 10 should I add it on 11 and we both
48:51 - found out it doesn't really matter it's
48:53 - one of those same kind of questions
48:55 - where it's like if we're using single
48:58 - quotes throughout our entire project
49:00 - let's stick to single quotes if we have
49:03 - to use double quotes or we're using
49:04 - double quotes throughout let's stick to
49:06 - double quotes in our course we actually
49:11 - we're using a Google gogo Google's
49:16 - JavaScript style guide so I'm just gonna
49:20 - quickly look that up and you'll notice
49:23 - that the first link is just that Google
49:26 - JavaScript style guide other people
49:28 - prescribed to like Airbnb is a style
49:30 - guide some companies have their own
49:33 - style guides and it just lets you like
49:35 - write code faster because you don't have
49:37 - to think about you don't have to think
49:39 - should I add a single quote here or
49:41 - double quote it comes almost automatic
49:43 - and it's kind of expected for what
49:45 - you're writing for that project but if
49:50 - we we try to do this notice that it's
49:53 - it's the same thing both prints hi one
49:57 - case that I can think of for when single
50:00 - quotes and double quotes matters is if
50:02 - you have like an apostrophe like I'm
50:04 - hungry and we can tell off the bat that
50:09 - there's something weird about the syntax
50:11 - highlighting right the string is
50:12 - supposed to be yellow but I'm getting
50:14 - some sort of orange here and the reason
50:16 - for that is that our interpreters and is
50:18 - looking at this and thinking well I is
50:20 - just it's single single character string
50:24 - and the way to we get rid of this
50:27 - situation and continue to use our
50:29 - posture fee is using the backslash which
50:32 - is called the escape character so it's
50:35 - telling the interpreter to ignore the
50:37 - original attention of what the
50:39 - quote is just treat it like any other
50:41 - thing it's not special in this case but
50:43 - then once it gets to this ending um
50:45 - single quote that it's that's the that's
50:49 - the part that we industry so here I can
50:52 - type I'm hungry but before without this
50:55 - it goes back to this syntax error but
50:57 - I'm missing cow parentheses after which
51:01 - is exactly right but it tells me that
51:03 - line four is messed up somehow yeah that
51:07 - kind of comes up a lot in data science
51:09 - II things where if you're like loading
51:12 - in data from a different source and you
51:14 - can't really like you know cuz it
51:15 - because in this example maybe you would
51:18 - change that sentence to I am hungry or
51:20 - something but if you're ever working
51:22 - with data where things are like very
51:24 - fixed sometimes you need to know those
51:26 - little quirks of the language to to get
51:30 - around stuff so things like that are
51:32 - definitely kind of like the annoying
51:33 - part of programming where you're like oh
51:35 - my god why is this like not working it's
51:36 - because there's this there's a silly
51:38 - apostrophe randomly in my code that
51:42 - breaks everything I didn't know that was
51:45 - such a point or yeah it's like so you
51:50 - like loading its table and you know it
51:52 - will have like pre you'll like loading
51:55 - the spreadsheet basically and the
51:57 - columns of that spreadsheet will be
51:58 - already named for you sorry I was
52:01 - dealing with this recently where the
52:02 - columns were a date but the date was
52:06 - like four slash what's today four slash
52:09 - 10/20 and so that slash was really
52:12 - screwing things up and like I couldn't
52:14 - change the column names and it was just
52:15 - a pain in the butt
52:16 - I just called me out on my lack of
52:19 - semicolon so I'm adding those back in
52:22 - but also to go back to the some of the
52:25 - escape sequence and they used of like
52:27 - double quote single quotes here we have
52:29 - double quotes because I know I wanted
52:30 - use an apostrophe am I in my string so I
52:35 - can type I'm hungry and both of these
52:37 - will work I'm just gonna comments out my
52:39 - first one type I'm hungry and that works
52:44 - if I add the xscape sequence here it's
52:47 - gonna also be okay like it doesn't read
52:51 - it
52:55 - that said I hope we covered to get
52:57 - amount of questions I want to get
52:59 - started with the first checkpoint and
53:01 - let's take a look for what it's asked
53:03 - some of us to lock the string JavaScript
53:06 - to the console so if you guys are
53:08 - following at home you probably did this
53:09 - already I'm gonna type it out and it
53:12 - wants to use single boots log JavaScript
53:18 - I'm gonna purposely get this wrong I'm
53:21 - gonna add some coal I'm gonna purposely
53:22 - get this wrong just as demonstrate that
53:24 - our tests sometimes are a little bit
53:25 - strict and if we're asking for a very
53:28 - specific output it won't pass
53:31 - so I've lower cased JavaScript okay and
53:34 - I'm gonna write close this error message
53:37 - and I'm gonna run and in my output look
53:41 - it says JavaScript but the error message
53:44 - that we are providing for you guys is
53:46 - did you spell JavaScript correctly so
53:49 - because it's missing because it's not
53:52 - capitalized that s not capitalized it
53:54 - won't pass our tests and something to be
53:56 - aware of as you continue to use our
53:58 - class so I'm gonna fix that now when I
54:01 - capitalize JavaScript because that's
54:02 - what they intend it and run the code and
54:05 - checkpoint on line to log the number
54:17 - 2011 semicolon for y'all and 2011 shows
54:23 - up awesome I haven't been clicking on
54:25 - the hints but if you guys are coding
54:27 - along at home feel free to do that they
54:30 - are really helpful to give you just
54:32 - maybe a burst of inspiration or some sex
54:34 - reminder if you're stuck on something
54:35 - okay with line 3 print whoo I love to
54:40 - code hash tag code Academy and I want to
54:43 - point out here that code cad me does not
54:45 - have an additional hey it's not code
54:48 - Academy it's code Academy so I'll get
54:50 - tripped up but let's see this console
54:53 - log the number of people that uh that
54:57 - don't know that yeah and I'm gonna just
55:00 - copy and paste here make things easier
55:02 - for myself so I don't mess up because I
55:04 - work here and
55:06 - I shouldn't be getting that wrong the
55:07 - foolproof way of getting it right yeah
55:09 - who loves a code hashtag Academy and
55:12 - online for we're gonna print the numbers
55:15 - floating number twenty eight point four
55:17 - nine oh I did it again told you I was
55:22 - gonna do it I clicked print instead and
55:24 - it's that print is not defined sorry
55:26 - okay uh console.log code twenty someone
55:34 - in the chat said I thought it was code
55:35 - Academy and it worked for them so maybe
55:37 - maybe in the test we wrote an acceptance
55:39 - if we get it pass for code code
55:41 - academies and so many people do that
55:43 - yeah I think so I think this was like a
55:45 - coverage okay so I liked before it go
55:49 - but like for other things we're likely
55:52 - not gonna look for all these in this
55:54 - fillings and we're probably gonna meet
55:56 - the exact output so just the heads up
55:59 - for you guys might not happen every
56:01 - single time yeah so we we did it with a
56:05 - lesson exercise for I'm gonna take a
56:09 - look at the the check again Jonathan
56:13 - Krueger I'm just jumping around but I
56:16 - see you're getting an error if you look
56:18 - at that era specifically it tells you
56:19 - that something is happening on line four
56:21 - and it's not expecting that token so
56:24 - maybe you are missing a ending
56:27 - multi-line comments I think that might
56:31 - be what's going on there Alex if
56:34 - something comes to mind anything that
56:35 - you saw that pops up I'm sure I'm not
56:38 - getting a ton of similar questions so I
56:40 - think we can move on I'm trying to keep
56:41 - up with the questions that are being
56:43 - answered in some QA cool let's see an
56:47 - honest attendee why do you have to put
56:49 - console down lock every time so yeah
56:52 - code sometimes is just extremely literal
56:55 - if we need to tell the computer to print
56:57 - stuff if we just put it on the screen
57:00 - it's not gonna know that's our intention
57:02 - we have to explicitly tell the computer
57:04 - I want to print out JavaScript first
57:08 - then I want to print out 2011 then I
57:11 - want to print out woohoo I love to code
57:13 - hash tag code Academy and then print out
57:17 - 20 dot 49 so
57:20 - all of these are sequential orders that
57:21 - we tell the computer to execute and then
57:24 - it shows up in our terminal that brings
57:28 - up a really good point about like the
57:29 - ordering of the console log statements
57:33 - and notice that when I switch the
57:36 - ordering of like the last lots of code
57:38 - to the very end it also prints to the
57:41 - very end and you guys might notice that
57:44 - I've been adding white spaces here just
57:47 - even though the instructions tell me to
57:50 - do on specific lines on line 2 or line 3
57:52 - line four javascript is actually pretty
57:55 - lacs on white spaces so these sort of
58:00 - spaces between like strings and
58:04 - parentheses and tabs or or new lines and
58:07 - all of this will still do the exact same
58:10 - thing it's just again goes back to like
58:14 - style guides and how your project should
58:16 - look it should have some sort of
58:18 - consistency so that you understand and
58:20 - more importantly other people understand
58:22 - what to do when they're working with you
58:24 - on your code is there a way to reduce
58:30 - the redundancy of repeating console yeah
58:35 - but it's it's more advanced stuff I
58:39 - guess
58:40 - so let's say that we were up to the part
58:45 - where we can store functions in
58:47 - variables what I would do is something
58:50 - like let will console not locked without
58:57 - the parentheses and then I can do
58:59 - something like prints and let's just
59:05 - remove all these to come and notice that
59:11 - this works this is crazy
59:13 - and we've kind of shortened it out if I
59:15 - want it to just have it like print just
59:19 - key I can do that as well but it's again
59:23 - like normally you wouldn't see this
59:26 - normally it's not done according to how
59:29 - companies do it and how the people have
59:30 - styled it so
59:32 - something that I would recommend but to
59:34 - answer your question that is a potential
59:37 - wait I've never seen that before
59:39 - yeah it's like it's a little hacky yes
59:42 - it's cool nonetheless just like quirks
59:44 - that you can do with JavaScript yeah I
59:46 - will say that that will probably break
59:48 - some of our tests some of the like code
59:50 - Khadem e tests of trying to get the
59:52 - green checkmark if you do stuff like
59:53 - that man I'm in sorry for confusing you
59:57 - I will try not to do any sort of
60:00 - confusion anything's to confuse anyone
60:02 - but things happen it's alright let's
60:06 - keep going let's keep the momentum
60:10 - operators basic arithmetic often comes
60:14 - in handy when program so math stuff an
60:17 - operator is a character that performs a
60:20 - task in our code javascript has several
60:22 - built-in arithmetic operators that allow
60:24 - us to perform mathematical calculations
60:26 - on numbers this includes the following
60:28 - operators and their corresponding
60:30 - sentence so addition is plus subtraction
60:33 - is minus multiplies an asterisk star
60:36 - divided forward slash and remainder is
60:39 - the percent symbol sometimes you'll see
60:43 - remainder as modulo as well and they're
60:46 - both referring to the same thing we can
60:48 - work through it later on the first four
60:51 - work how you my guess so we'll see the
60:55 - use of addition subtraction
60:57 - multiplication and division and to check
61:00 - our math against all of it we can just
61:03 - copy and paste that code directly in and
61:05 - write seven four eight three no way back
61:09 - for them note that when we console.log
61:12 - the computer will evaluate the
61:13 - expression so all of this all these
61:17 - lines of code are called expressions
61:20 - inside the parentheses and print the
61:22 - result to the console if we want to
61:24 - print out the characters three plus four
61:25 - you would wrap them in quotes and then
61:27 - print them as a string so if we didn't
61:31 - want them to calculate and we want to
61:32 - print out three plus four exactly I
61:34 - would put quotes around them and notice
61:38 - that in our console it says three plus
61:41 - four so that's a way to get around that
61:43 - if you don't want them to you don't want
61:45 - the interpreter calculate
61:46 - the remaining operators sometimes called
61:48 - montolo returns a number that remains
61:51 - after the right hand number divides into
61:53 - the left hand number as many times as
61:55 - evenly can so 11 modulo 3 equals 2
61:59 - because 3 fits into 11 3 times leaving 2
62:02 - as the remainder so both we've referred
62:05 - to that as the remainder operator as
62:07 - well and this is really helpful for when
62:10 - we are trying to decide whether a number
62:13 - is even or odd so let's see if we do 2
62:18 - to 3 modulo 2 what do you guys expect to
62:23 - happen to show up in the terminal before
62:27 - I press Enter okay ones are probably
62:35 - gonna catch up so I'll just run it and
62:38 - you guys are exactly right once I'm
62:40 - seeing a lot of ones from very specific
62:42 - people good job
62:43 - so that is exactly right because 3s are
62:47 - two fits into three once and it has a
62:49 - remainder of 1 so when we do stuff like
62:52 - this
62:52 - something modulo 2 often times we're
62:55 - trying to figure out if it's an even or
62:56 - odd number if it returns one then it's
63:00 - an odd number if it returns zero then
63:02 - it's an even up okay kind of talk
63:08 - through a good amount of that let's take
63:10 - a break again for questions and see what
63:12 - you guys have thought of us not a ton of
63:17 - questions one about the difference
63:18 - between remainder and divide okay if you
63:21 - show just another example and then other
63:24 - than that I think we might be able to
63:26 - move on well so let's change the number
63:29 - there from 5 modulo 2 and also 5 divided
63:34 - by 2 let's see what happens so in the
63:38 - first one 5 module 2 it's an odd number
63:42 - so we get 1 and then for the second one
63:45 - where we divide 5 by 2 we get 2 point 5
63:48 - because 5 divided in half is to come off
63:53 - [Music]
63:57 - our scholarships
63:59 - yeah I'm answering that one right now
64:01 - pretty Alex okay that's it I'm
64:04 - gonna continue on with the instructions
64:06 - and seeing what we can do about using
64:10 - our para thematic operators in our code
64:13 - and clear this out in the console in a
64:16 - consonant log at 3.5 to your H this is
64:19 - the age will be when we start sending
64:21 - people to live on Mars so one of those
64:30 - and I want to add two point five to that
64:33 - and I get in three and a half years 31
64:37 - and a half so that's one will be going
64:38 - to Mars or to that and on line two on a
64:46 - new line right another a console log
64:48 - inside the parentheses take the current
64:50 - year and subtract 1969 this is how many
64:53 - years it's been since the 1969 moon
64:55 - landing okay so let's type up another
64:58 - console log and two years 2020 - one
65:04 - nine six not run it again 51 years since
65:09 - then continuing on create another
65:14 - console that log oh and I guess the
65:17 - shorter way to do this it's just like
65:19 - copy console log into your clipboard if
65:22 - you don't want to keep like semicolons
65:25 - okay gotcha guys yeah let's just do that
65:31 - and inside I want to divide 65 by 240 65
65:37 - 5 to 4 and some white spaces in there
65:41 - and just to show you against and we get
65:45 - zero point two seven awesome which is
65:47 - what our text test expected and one last
65:52 - console log multiply zero point two
65:56 - seven seven zero eight by 100 that's the
66:03 - percentage of the Sun that is made up of
66:06 - Helium assuming that we can stand on the
66:08 - Sun we'd also how much
66:09 - chips is that right does anyone know in
66:13 - chat what's the question that's the
66:16 - percentage so like if we could stand on
66:19 - the Sun we'd sound like Chipmunks
66:20 - because that's the percentage of the Sun
66:22 - that's made of hue just like would it be
66:27 - that we're breathing helium in after the
66:29 - fact this is totally not coding related
66:31 - maybe I should go back to penny I wonder
66:36 - I guess it's a question I can pose to
66:39 - each fad
66:40 - I wonder if it would be useful to show
66:44 - how this relates to webdev like do
66:49 - people want to jump to a project and
66:50 - show and like watch us connect it to a
66:53 - HTML file or do people want us to
66:55 - continue along with the lesson except
66:57 - that was a question that we just thought
66:58 - of like this is already we're following
67:00 - along but uh how does this relate to web
67:02 - development mmm
67:05 - connect I don't know if this is like
67:09 - massively throwing you off your game but
67:11 - uh but if you have a project in mind
67:13 - that would be an easy thing to show
67:16 - let's see this is gonna require us to do
67:20 - a little bit of navigation because I
67:22 - didn't fully expect this but hey let's
67:27 - roll with it let's see what this goes so
67:29 - let's go back to code CAD me and I'm
67:34 - pretty you can you could even go into
67:35 - the p5 project and we could just edit
67:38 - the code in there oh well I want to show
67:42 - it directly as how it relates to a site
67:44 - rather than like the dirty element
67:46 - canvas and I think that's a good point
67:48 - though but let's um go through the
67:50 - catalog and we'll sort by language here
67:57 - JavaScript okay notice that we have a
68:04 - bunch of skill paths a bunch of courses
68:05 - and the one that I want us to go to that
68:11 - it's gonna be directly related is the
68:14 - dog and we will we will post this link
68:20 - in the chat yeah
68:22 - and but it's pro only - um ah let's do
68:29 - let's do um about this so let's just do
68:34 - a little bit of hacking we're starting
68:38 - to speak not really but well show you
68:40 - how the console at least works and how
68:42 - we can type in JavaScript to manipulate
68:45 - that a little bit so let's take a break
68:50 - well continue to use code Academy we're
68:52 - on air let's do that and I like using so
68:58 - this is for you guys who are into web
69:00 - development very common tool and edible
69:02 - using the the inspector element so let's
69:05 - go here and I've clicked on the arrow
69:09 - with the box that is used to select a
69:11 - specific element so let's focus on this
69:13 - and in here maybe click on it in our
69:18 - right-hand panel like this and close out
69:23 - of this you'll see that it contains the
69:25 - text inside so this is more or less like
69:27 - basic HTML manipulation and what we can
69:31 - do is actually change words and titles
69:35 - and strings around so instead of calling
69:37 - it arithmetic operators I just want to
69:39 - let's say I want to name it how to add
69:42 - and subtract cross enter notice that
69:46 - this text will change it's not gonna
69:50 - persist though it's not gonna last
69:51 - because once i refresh this once my
69:58 - internet catches up to me refreshing
70:06 - living in all these scripts that are
70:08 - happening here but you don't say that
70:11 - once i refresh it goes away so I'm back
70:14 - to earth with an arithmetic operators
70:16 - it's gone and so that's kind of just the
70:22 - first step in realizing that these
70:24 - elements these elements in the HTML
70:28 - document can be manipulated so when we
70:31 - talk about these sort of manipulations
70:33 - oftentimes we're talking about something
70:34 - called the Dom or the document object
70:36 - model and all these elements live inside
70:40 - the document document object model and
70:44 - what we can do is typically it's a like
70:47 - including a script in here you can
70:50 - interact with the Dom in the console of
70:52 - itself so I'm gonna go back for a quick
70:54 - second just so that I can get like the
70:57 - name of it and I have something here I
71:00 - have the class of the h1 element so
71:04 - something that I can do with JavaScript
71:06 - is I can access the document itself and
71:09 - notice that when I type in document the
71:12 - whole thing highlights that's because
71:14 - it's referring to the entire document
71:16 - object model it's not and what I can do
71:19 - is search for this and I can get element
71:23 - by class name and what I had before and
71:30 - this will kind of look very similar to
71:32 - console that log right we're calling
71:34 - regret we're getting an object we're
71:37 - getting a method behind it so console
71:43 - for being the object log being the
71:45 - method in this case document being the
71:48 - object and get elements by class name
71:51 - being the method only make this a little
71:54 - bigger for you guys getting kind of lost
71:57 - not gonna lie umm we'll return back but
72:00 - I just wanna for those who want to
72:01 - satiate their thirst like how what
72:03 - development works and how we can
72:05 - interact itself let's do a sneak peek
72:08 - and so once I do this and I add an
72:11 - argument we'll see that we can select
72:14 - this very htmlcollection this part of
72:18 - our document
72:21 - and I can assign it to a variable so
72:25 - let's title and title is going to be
72:37 - that collection we'll get further along
72:40 - into the collection types later on like
72:44 - arrays and dictionaries sorry raising
72:47 - objects but since it is a collection I
72:49 - just need the first element in it and I
72:52 - can do title 0 and I can do another
72:56 - thing called inner text so notice that
72:59 - this auto populates as arithmetic
73:02 - operators and what I can also do is we
73:05 - assign that value using javascript to be
73:09 - something different and notice that even
73:15 - though I didn't have to interact with
73:17 - that element in the HTML document I was
73:20 - able to do that directly using
73:22 - javascript so great so we're using
73:24 - javascript to like basically talk
73:26 - directly to the HTML so we're using
73:28 - javascript to grab certain parts of the
73:30 - HTML and then change it and kind of the
73:32 - point is that like all the math that we
73:35 - were doing Kenny can you I don't know of
73:37 - what string casting necessarily looks
73:39 - like but can you set that that title to
73:42 - the results of 1+1 yeah let's do it
73:45 - so JavaScript I think is a bit lenient
73:50 - in this and which it allow it to happen
73:52 - another language is very strict or it's
73:55 - like typed meaning that if the value was
73:58 - already assigned as a string then we're
74:01 - gonna keep it as a string and throw an
74:03 - error but in this case Java scripts like
74:04 - oh we can do whatever we want we can
74:06 - coerce and change types really merely so
74:09 - in this case we set the title of inner
74:12 - text to 1 plus 1 which is 2 and you see
74:14 - that right so I want right so kind of
74:17 - and again like as you're watching this
74:19 - don't worry too much about having to do
74:21 - any of this we're just having them
74:22 - trying to demonstrate how Java Script is
74:24 - connecting to websites but you can
74:26 - imagine right whenever you're buying
74:29 - something online and it's showing like
74:31 - okay you super order total and this is
74:32 - your tax and
74:33 - let me like add those two things
74:34 - together to show you the the total
74:37 - amount that you're paying for like that
74:40 - addition is happening over in JavaScript
74:42 - and then it's gonna send that result
74:44 - over to the HTML just like Annie just
74:46 - did you know set the title of this thing
74:49 - equal to one plus one and it kicks out
74:51 - too yeah great point Alex yeah it's it's
74:55 - all connected and once you get even more
74:56 - advanced so if on your computer screen
74:59 - I'm gonna exit out of this but in the
75:03 - top right hand corner notice that I have
75:04 - my picture my icon there and that's
75:07 - specific to who I am it's not gonna show
75:10 - up for you guys it's gonna show up a
75:12 - little differently in which case it
75:14 - would be because your profile picture is
75:18 - saved to some back-end and they're
75:20 - taking that value and subbing it in for
75:23 - every differently for every single user
75:25 - once they visit our site there's a lot
75:29 - of different applications with
75:30 - JavaScript so we're just pointing out a
75:31 - few things that might stand out to you
75:34 - some things that might not even be
75:35 - thinking about that javascript could be
75:37 - responsible for yeah I mean it's
75:39 - definitely a tricky thing when trying to
75:41 - teach this because it's like you know
75:43 - we're doing addition you know it's like
75:45 - how can this possibly you ever ever be
75:47 - like related to making crazy websites
75:49 - and stuff but like understanding for me
75:55 - you kind of have to have faith that the
75:58 - skills that you're learning here
75:59 - eventually will be like translating into
76:01 - making a cool cool project because this
76:04 - is at least what I felt when I started
76:05 - to learn programming of like how is any
76:07 - of this connected to anything irrelevant
76:09 - but then the further that you get into
76:11 - it you start to see like okay this skill
76:12 - that I just learned I can immediately
76:13 - see like how this will apply to a
76:16 - website later on so it especially at the
76:19 - start you just kind of have to happy bit
76:22 - of faith that it is relevant yeah it's
76:25 - one of those things like he has to learn
76:26 - how to walk before you can run right so
76:28 - starting off we're learning how to walk
76:30 - first and later on you'll be going on
76:34 - beyond what we just did with that Dom
76:36 - manipulation and running full force
76:38 - making web applications but it does take
76:40 - time it does take effort and tenacity
76:43 - and willpower yeah and like we certainly
76:46 - do not expect
76:47 - people who have never coded before to
76:49 - like be able to open the console and
76:50 - grab this element from the DOM and
76:52 - change it like right on the spot right
76:54 - that's why we start with these kind of
76:56 - easier like isolated examples and then
77:01 - eventually you can grow up to a B to be
77:03 - a Kenny and just open the open the
77:05 - console on stream and uh start changing
77:08 - the Dom so alive
77:13 - all right cool it sorry Kenny I feel
77:18 - like I totally disagree derailed us but
77:20 - I think no no I think that was a really
77:21 - good helpful like insight into maybe the
77:23 - end product and said because like you
77:25 - mentioned before when I started off
77:27 - doing all this stuff and I was learning
77:29 - to Academy I didn't fully understand why
77:32 - I was doing all this stuff and I think
77:33 - had someone like showing me example of
77:35 - the potential applications that we can
77:37 - use it for it could give you like a good
77:40 - insight into what an end goal might be
77:42 - and something that's a you want to
77:43 - strive for its might for sending all
77:48 - those helpful links by the way see ya or
77:50 - can fizzy and check what we do now Kenny
77:55 - do we want to keep going in the lesson
77:56 - do we want to like twelve minutes less I
78:03 - want to go through some of the questions
78:05 - I think we lost a good amount of people
78:07 - so if there's like anything I can look
78:10 - into before maybe people seemed excited
78:14 - for the lesson in the chat so check it
78:21 - again but yeah what you came here from
78:26 - concatenation to show us some cool stuff
78:29 - let's move on okay
78:30 - string concatenation operators aren't
78:33 - just used for numbers when a plus
78:35 - operator is used on two strings it
78:37 - appends the right string to the left so
78:40 - here the code example is below so we can
78:43 - contaminate high and yah - hyah
78:46 - and then whoa whoo and also quote I love
78:51 - to blank code notice here left a little
78:54 - special space the interpreter is not
78:58 - going to do that for us so we have to
78:59 - again be really explicit
79:01 - what we want to see printed out okay
79:03 - this process of appending one string to
79:05 - another is called concatenation notice
79:08 - in the third example we had to make sure
79:09 - to include a space at the end of the
79:11 - first string the computer will join the
79:13 - strings exactly so we need to make sure
79:15 - that the included space we want is fine
79:18 - to make sure to include the space we
79:21 - want it between the two strings and
79:24 - here's a few examples of that explicit
79:27 - string being provided where we have one
79:29 - with a front space one with a back space
79:31 - one with no space and one with a middle
79:34 - space and just like regular math we can
79:38 - combine or chain our operators or
79:40 - operations to get a final results so
79:43 - notice here we have one two three four
79:46 - five separate strings and we're
79:48 - concatenating them all into one okay
79:52 - prints one two three four
79:54 - I'll show you guys this is very much
80:04 - slightly going to be our last exercise
80:07 - so let's maybe another quick pause let's
80:10 - see our well for this session
80:13 - sorry guys not too mean like this is the
80:15 - ultimate end but like we're closing in
80:18 - on our okay let's see what type okay not
80:28 - super related but I'm noticing at the
80:30 - the last question asked by anonymous are
80:32 - you able to specify what a type what
80:35 - type of variable is and in JavaScript we
80:39 - cannot specify a time it's a very
80:42 - loosely typed language I can assign
80:45 - variables to a string and just so we can
80:56 - see that it's actually working string
81:01 - and then once I've reassigned if I want
81:03 - to be three
81:06 - I tried printing out again the council
81:10 - doesn't give me any sort of error like
81:11 - we might see for Swift semicolons chase
81:16 - I'm working on it I'm working on it it's
81:18 - a bad habit okay notice that yeah like I
81:23 - said the interpreter treats it just fine
81:26 - like oh you declared a variable you want
81:28 - to assign a new value to that variable
81:29 - hey okay no problem but for something
81:32 - like Swift maybe you guys have come to
81:35 - this webinar from that webinar well
81:37 - remember that typing is really important
81:39 - when you declare a variable to have a
81:41 - very specific value like a string type
81:43 - or a number type or a double type that
81:46 - must be the same type of value applied
81:48 - throughout so that's one of those quirks
81:52 - about javascript that either you come to
81:54 - love where you come to hate depends on
81:57 - what context you've used it on yes okay
82:01 - some confused why is there so much
82:04 - connection between HTML and JavaScript
82:06 - mmm I guess I want to answer that
82:09 - question
82:09 - from Joseph before really like doing
82:13 - what we had intended for the
82:16 - instructions and like I was saying
82:19 - before HTML provides the structure and
82:22 - if you guys were in our CSS webinar our
82:28 - session you were able to see that we
82:29 - were able to take CSH tml and style and
82:32 - make it look nice make it look pretty
82:34 - make it look presentable otherwise you
82:36 - might not be attracting the users that
82:38 - you need to go to your site so to
82:40 - provide funding or to click through
82:41 - stuff to buy stuff people are interested
82:44 - in super plain things for that without
82:47 - the functionality of JavaScript some
82:49 - people might not actually be interested
82:50 - in your site a lot of things that
82:52 - JavaScript allows you to do and making
82:54 - it interactive let's say we're creating
82:56 - some sort of shopping site when you
82:59 - click on an item and you add it to the
83:00 - cart HTML and CSS it's not speaking care
83:03 - of that that logic is being handled by
83:05 - the JavaScript that you write so you'll
83:08 - probably notice that from HTML and CSS
83:10 - we're being very declarative we're
83:11 - saying do this do that and not doing
83:14 - much including like any sort of logic in
83:15 - there once we move further with
83:17 - JavaScript you can add conditionals we
83:19 - can
83:19 - it's things to account for many
83:21 - different situations one of them being
83:24 - like a shopping cart like I mentioned
83:26 - and adding that to the car doing the
83:28 - check it out all of that stuff requires
83:30 - JavaScript yeah
83:32 - detecting events right when you click on
83:34 - something and something happens that's
83:36 - usually uh that's usually JavaScript and
83:39 - doing all that sort of stuff
83:42 - okay Kenny a good question I saw a
83:45 - little bit ago was we've used the term
83:46 - like oh the interpreter is doing this
83:48 - the interpreter is doing that what does
83:50 - what does that actually mean oh it's uh
83:52 - thanks for calling me out it's basically
83:56 - like your web browser and how it reads
83:59 - your code and spits out information so
84:01 - the engine sometimes you'll also hear
84:05 - about as an engine the interpreter the
84:08 - engine that is reading the JavaScript is
84:10 - a little different from browser to
84:12 - browser so the implementation for Chrome
84:17 - is different from Mozilla so the name
84:20 - for it I think are different
84:22 - I believe chrome uses something called
84:24 - the v8 engine and then something called
84:27 - SpiderMonkey so if we go to this other
84:32 - site that love using can I use which
84:38 - tells me like what exactly is supported
84:40 - in different browsers that's the reason
84:43 - for it the implementation of how this
84:45 - interpreter this this engine this piece
84:47 - of software that is being used to read
84:49 - the JavaScript code is implemented
84:55 - differently across different problems so
84:57 - you'll notice that for Internet Explorer
84:59 - it's partially supported like if I want
85:02 - to use the the keyword let in declaring
85:04 - a barrier but it supported across the
85:07 - board for our edge Firefox and Safari
85:08 - but once we go to like mini opera if a
85:12 - user was trying to access my site and I
85:15 - had used the keyword let in that project
85:18 - in that website they would not be able
85:20 - to see that variable and they would get
85:22 - some sort of error it's interesting I
85:27 - wonder so this is a question for me as
85:30 - somebody who is not super into web
85:32 - development like why did
85:33 - use different interpreters what's the
85:35 - what's the benefit like why can't we all
85:36 - just use the same one too yeah that's
85:40 - good no idea I think it's also about
85:43 - like a market share kind of thing like
85:45 - if your browser is able to read or
85:47 - detect run JavaScript faster slower that
85:51 - could be some sort of differentiating
85:52 - factor so I think it goes more to like
85:55 - business there but yeah if we have one
85:57 - standard and just draw from it which is
86:00 - what Akuma script is this is going a
86:02 - little far into the weeds but all the
86:04 - standards are coming from there and the
86:06 - implementations there differently by
86:08 - done differently through browsers cool
86:12 - all right I think we only got four
86:15 - minutes left yes Oh Kenny if you want to
86:16 - start wrapping up all right I think
86:19 - that's about it if you guys have any
86:21 - additional questions in the chat I don't
86:23 - love to just like provide resources at
86:25 - this point so I know we got up to
86:27 - exercise six out of ten or so exercise
86:30 - lesson but there are general questions
86:33 - or go to the forums that you guys can go
86:36 - to a lot of resources even though I
86:38 - haven't shown it can be done through a
86:41 - quick simple search online so one of my
86:45 - favorites is Ocilla development network
86:48 - and sometimes I'll just look up things
86:52 - that are related to JavaScript so if I
86:54 - forget how to JavaScript declare array I
87:01 - can search setup and then I'm like
87:05 - directly to the website that can be
87:08 - additional supplement material for you
87:10 - guys
87:10 - as you work throughout courses a lot of
87:13 - these questions maybe even had something
87:15 - about string concatenation it's one of
87:17 - our more popular courses so there's a
87:19 - good chance that someone asks a question
87:20 - about it already but if you also want to
87:22 - add to those questions and see what
87:24 - other people have to think about it
87:26 - that's also a fantastic resource I know
87:29 - Mike was posting a chat started posting
87:31 - a link in our chat about discord so
87:34 - there's a lot of different resources out
87:35 - there for you guys if you're just
87:38 - worried about getting started with a
87:39 - language I know Alex I mentioned Python
87:42 - I talked about JavaScript I think one of
87:44 - the more important parts is just getting
87:46 - started
87:46 - yourself acclimated into this
87:48 - environment I'm posting the link to the
87:52 - our scholarship page so I mean I was
87:55 - surprised in our first session how a lot
87:58 - of people didn't seem to know about the
88:00 - scholarship that was going on but if you
88:02 - have a dot edu or dot k-12 email address
88:05 - then you can get a couple of months of
88:08 - pro for free by filling out this
88:10 - scholarship form if you're a student and
88:13 - don't have those email addresses dot edu
88:15 - or a dot k-12 email address there is a
88:18 - forum in the frequently asked questions
88:20 - section and we should be able to help
88:23 - you out anyways the scholarship is we
88:27 - launched it probably a month ago at this
88:29 - point and basically we are giving away
88:32 - Pro for students and teachers until the
88:35 - end of the occurrence we were so we're
88:37 - giving it for 90 days so if you jump in
88:39 - there now you should get a good maybe 60
88:41 - days worth of pro so yeah that's a good
88:46 - resource if if you want to get some free
88:49 - grow I'd say that I'll post it again and
88:52 - look in the chat here but for those who
88:56 - are asking if we're done yeah we are but
89:00 - there is a wrap-up session back with
89:02 - ELISA and Mike and so you guys go to
89:06 - that webinar just like say thanks really
89:09 - for joining us it's been really fun on
89:11 - my behalf I'm sure Alex yeah Kenny you
89:15 - did so well
89:16 - good job buddy Hey right back at you now
89:19 - would be possible without entire
89:21 - audience here yeah cool all right we
89:24 - will see you over in the wrap-up session
89:26 - guys I'll talk to you all later
89:34 - you