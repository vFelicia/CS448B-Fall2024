00:00 - hey everyone I'm Matt a developer from
00:02 - Ohio in this video I'll give you some
00:04 - tips for working on a software
00:05 - development team you might be learning
00:08 - to program and just about to start on
00:10 - your first team project you could be a
00:12 - newly hired developer at a software firm
00:14 - or a seasoned developer looking to make
00:16 - your team more efficient this developers
00:19 - were often better at writing code and
00:20 - fixing bugs than we are at working
00:22 - together
00:22 - I hear programmers say I can do it
00:24 - faster on my own or my team would just
00:26 - slow me down and I get it it can be
00:29 - tough to let others take some control
00:30 - especially if you're used to a more
00:32 - independent workflow but here's the
00:34 - thing an effective team is more than the
00:36 - sum of its parts and it's absolutely
00:38 - necessary in real-world development
00:40 - consider these scenarios the project is
00:43 - simply too large for one developer to
00:45 - reasonably do on their own the project
00:47 - covers a lot of different specific
00:49 - technologies and any one developer isn't
00:51 - likely to be an expert in all of them
00:53 - the project has a deadline so some parts
00:55 - need to be worked on simultaneously
00:57 - these are all realities of most product
00:59 - development which means that you'll need
01:01 - to deal with them if you work as a
01:02 - developer or ever want to there's plenty
01:05 - of things that your boss or manager can
01:07 - do to optimize your team's work but how
01:09 - can you be the most effective
01:10 - collaborator over the rest of this video
01:12 - I'll break down my tips for how to
01:14 - communicate effectively keep momentum
01:16 - and actually work together we'll start
01:19 - with communication do you ever come
01:21 - across a piece of code that's just
01:23 - impossible to read well every piece of
01:26 - code was written by someone so you
01:28 - should try your best to avoid being that
01:29 - person make your code easy to understand
01:32 - other developers and your team should be
01:35 - able to grok the purpose of a class
01:36 - function or file almost immediately if
01:39 - they're walking around the office asking
01:41 - who wrote this and why then your work
01:43 - isn't easy to understand follow your
01:45 - team's guidelines a lot of companies and
01:48 - open-source projects have style guides
01:50 - which provide conventions for function
01:52 - naming code formatting comment styles
01:54 - and so on
01:54 - following conventions makes your work
01:56 - easier to parse if your team doesn't
01:58 - have a style guide you should always try
02:00 - to match the existing code as much as
02:02 - possible writing code is not the time to
02:04 - voice your opinion about tabs versus
02:06 - spaces make your file is easy to find by
02:09 - filing them away neatly if every script
02:12 - file ends up in one big store
02:13 - folder nobody will be able to find
02:15 - anything in my experience this leads to
02:18 - a lot of overlapping functionality
02:19 - developers will add necessary features
02:22 - if they can't find them because lost
02:24 - code is as good as no code if your
02:26 - team's project directory is a mess
02:28 - consider having a talk with everyone
02:29 - about how to best sort it out the best
02:32 - way to make your work understood is to
02:34 - simply name your files functions and
02:35 - variable as well this is most of what
02:38 - people mean when they say
02:38 - self-documenting code always write
02:41 - descriptive names in modern development
02:44 - with less file size restrictions and
02:46 - more IDE autocomplete features there's
02:48 - never a reason to use shortened or
02:50 - abbreviated names if you ever find the
02:52 - name isn't enough add a comment don't
02:55 - ever leave it up to future developers to
02:56 - guess speaking of descriptive names and
02:59 - comments remember that most
03:00 - communication between developers is
03:02 - documentation when well-documented
03:04 - codebase keeps all the developers on the
03:07 - same page makes it easier to read and
03:09 - work on legacy code lets developers
03:11 - collaborate without going through the
03:12 - original author and helps track and
03:14 - resolve issues unfortunately
03:17 - documentation also takes a lot of time
03:19 - especially if you have to go back and do
03:21 - it later feels like it takes time away
03:23 - from working on new features and isn't
03:26 - really part of the same skill set that
03:27 - makes you a great programmer but the
03:29 - truth is that it's not that hard and
03:31 - it's important to keeping a healthy
03:33 - maintainable code base the best thing
03:35 - you can do is mix it into your existing
03:38 - workflow documenting is hard when you
03:40 - have to go back and add it but it can
03:42 - become part of every step write some new
03:44 - code document it right away
03:46 - commit and push that's documentation on
03:48 - its own and I'm not talking about
03:50 - closing your IDE and adding some
03:51 - paragraphs to the company wiki just use
03:54 - thoughtful names leave descriptive
03:55 - comments right good commit messages that
03:57 - sort of thing you're already writing
03:59 - code and committing your work it doesn't
04:02 - actually need to take any longer than it
04:03 - already takes I'm Jason to code
04:06 - documentation is work documentation
04:09 - earlier I said that lost code is as good
04:11 - as no code well the same goes for
04:13 - duplicate code if everyone on the team
04:16 - knows who is working on what duplicate
04:19 - code won't happen I'm not talking about
04:22 - scrum or Kanban or any of the other
04:24 - popular task management methodology
04:26 - as a manager myself I've tried all of
04:29 - them methodologies are like diets you
04:32 - can follow a specific set of rules but
04:33 - it really comes down to just eating no
04:35 - more than you need all you really need
04:38 - to do to avoid work overlap is to let
04:40 - everyone know your current task let the
04:42 - team know when you start and when you
04:44 - finish you can use sticky notes in the
04:46 - office send a group message or just
04:49 - stand up and announce it larger teams
04:51 - might consider more elaborate tools but
04:53 - they serve the same purpose that about
04:55 - does it for effective communication
04:57 - remember to make your work understood
04:59 - write documentation as soon as possible
05:01 - and make sure that everyone knows what
05:03 - you're working on next we'll take a look
05:06 - at how to keep momentum my last tip was
05:09 - let everyone know your current task but
05:11 - how do you pick tasks on some teams you
05:14 - might have specific tasks assigned to
05:16 - you on others you might claim tasks on a
05:18 - week-by-week basis or just grab a new
05:20 - one when you finish the last however you
05:23 - work try to make sure that you're
05:24 - focusing on the right task at the right
05:26 - time that is prioritize your tasks it's
05:30 - important to keep a prioritized backlog
05:31 - which is a list of all the upcoming
05:33 - tasks ordered by which of the most
05:35 - integral to the project in modern agile
05:38 - development the product design can
05:39 - change in reaction to ongoing
05:41 - development that's why it's important to
05:43 - get the big task settled as soon as
05:44 - possible the lower priority tasks can
05:47 - wait or even be abandoned in some cases
05:49 - this is the one tip on here that I
05:51 - personally struggle with a lot when I
05:53 - look at the backlog I often find a more
05:55 - appealing task than the one with the
05:57 - highest priority maybe that top priority
05:59 - is difficult to run interesting if you
06:02 - find yourself wanting to go after an
06:03 - interesting but lower priority task see
06:06 - if you can put your name on it and save
06:07 - it for later
06:08 - sometimes a high priority task stays
06:10 - undone for a long time maybe no
06:13 - developer has claimed it or one
06:14 - developer is having difficulty with it
06:16 - this isn't an excuse to ignore that task
06:18 - and move on to another your team is most
06:20 - effective when everyone can work
06:22 - together on the project as a whole
06:23 - consider these swarm and destroy tactic
06:26 - as opposed to the divide and conquer
06:27 - tactic in divide and conquer everyone
06:30 - works on their own tasks if they get
06:32 - stuck those tasks won't get done on time
06:34 - in swarm and destroy everyone teams up
06:37 - on the tough tasks and blows them away
06:40 - what I'm talking about is limiting
06:42 - work-in-progress
06:43 - remember that your team is more than the
06:45 - sum of its parts by ganging up on
06:47 - progress blocking tasks your team can
06:49 - move forward without ever stopping to
06:51 - wait knowing when to swarm is important
06:53 - too the reality is that some tasks are
06:56 - going to be easier than others and it's
06:58 - impossible to perfectly anticipate the
06:59 - complexity of every task this is where
07:02 - stand-ups come in a stand up is just a
07:04 - quick daily meeting with everyone on the
07:06 - team going around the room everyone says
07:08 - whether or not they're stuck on anything
07:10 - if someone is stuck that's when you
07:12 - should swarm of course whether or not
07:15 - you do full-fledged stand-ups is down to
07:17 - your team's workflow as long as you
07:19 - touch base with your team as often as
07:20 - possible you should be good for example
07:23 - I work from home and there's no time
07:25 - that every one of my developers is free
07:27 - every day instead of having stand-ups we
07:30 - have a channel in our chat room for
07:31 - people to post daily status updates so
07:34 - my tips for keeping momentum are
07:35 - prioritize tasks limit work in progress
07:38 - and do stand-ups at least in some form
07:40 - my last few tips are for actually
07:43 - working together I say actually because
07:45 - there's a big difference between a bunch
07:47 - of developers working toward one goal
07:48 - and a finely-tuned team working as unit
07:51 - there's one key difference between
07:53 - working towards the same goal and
07:54 - working as a cohesive unit mutual
07:57 - accountability it's human nature to
07:59 - serve our own best interests so that's
08:01 - what we do I've seen it plenty of times
08:03 - one developer is stuck on something and
08:06 - everyone else keeps their own tasks
08:07 - because that's not their problem I've
08:10 - even seen someone deliberately avoid
08:11 - helping his co-workers because he
08:13 - thought it made him look better in
08:14 - comparison that logic is flawed because
08:17 - teams sink or swim together it's in your
08:19 - own best interest to keep a team
08:21 - oriented mentality because it is your
08:23 - problem if the team's product ships with
08:25 - a critical bug or ends up months behind
08:27 - schedule think about your favorite teams
08:30 - for it no matter how good the star
08:32 - player looks the whole team either wins
08:34 - or loses besides isn't it only decent to
08:37 - help each other out when you're working
08:40 - collaboratively toward that finished
08:41 - project it's likely that you'll end up
08:43 - with conflicting ideas about creative
08:45 - direction or the validity of a
08:46 - particular solution this is why we have
08:49 - team leaders when everyone follows the
08:51 - team's lead there is never more than one
08:54 - worth of hangups if you disagree or are
08:57 - unsure about something the lead
08:58 - developer or manager or other leader
09:00 - will make the call if your team doesn't
09:02 - have a leader I'd recommend that you
09:04 - establish one developer as the lead
09:06 - developer having someone to arbitrate
09:08 - even minor conflicts will save a ton of
09:10 - time in the long run of course I'm not
09:12 - recommending that you sit idly by if you
09:14 - disagree with the lead developer you can
09:16 - and should talk to your team's leader if
09:18 - you want to make a change to the product
09:20 - or the workflow if you go against the
09:22 - grain without approval though you'll
09:23 - just end up confusing everyone and
09:25 - slowing down the process most of my tips
09:28 - so far have been about work habits but
09:30 - how can you increase the quality of your
09:32 - team's actual code in my opinion the
09:35 - best way to increase code quality is to
09:37 - simply review each other's code here's
09:39 - the idea whenever anyone on the team
09:41 - commits code or a viewer has to approve
09:43 - the changes and merge them into the
09:45 - project this keeps everything up to the
09:47 - team standards allows for systematic
09:50 - testing and keeps developers accountable
09:51 - for their work your team may have a
09:53 - formalized process for code review and
09:55 - that's great I definitely advocate for
09:57 - mandatory code review if your team
09:59 - doesn't do reviews ask your teammates to
10:02 - double check your work after committing
10:03 - big changes if that's not enough another
10:06 - way to ensure code quality is pair
10:07 - programming pair programming is just
10:10 - what it sounds like to developers at one
10:12 - keyboard one of you will write code
10:14 - while the other place Navigator spotting
10:16 - errors thinking one step ahead and
10:17 - searching for solutions to any problems
10:19 - you run into a lot of newer developers
10:22 - see this as a waste of manpower but it's
10:24 - great for producing more stable code
10:26 - you'll probably make up for lost time by
10:28 - not having to go fix a lot of bugs plus
10:31 - pair programming can be a lot less
10:32 - isolating than burying yourself in the
10:35 - zone pair programming is easy to get
10:37 - running without major changes to your
10:39 - team's process because you can simply
10:40 - ask one of your teammates to help you
10:42 - out for a bit
10:42 - I wouldn't recommend pairing on every
10:45 - task just use it when you need it and
10:46 - encourage your teammates to do the same
10:48 - if everyone is open to effective
10:51 - collaboration the rock will go by faster
10:53 - and easier to recap my tips for actually
10:56 - working together are think as a team
10:58 - follow your leader do code review and
11:01 - try pair programming and those are my 10
11:05 - tips for working on a dev team
11:07 - here they are one more time make your
11:10 - code easy to understand follow a style
11:12 - guide and use descriptive names mixing
11:15 - your documentation by doing at every
11:17 - step along the way let everyone know
11:20 - your current task so that nobody ends up
11:22 - doing duplicate work prioritize your
11:25 - tasks and bookmark the more interesting
11:27 - ones for later touch base as often as
11:30 - possible so you know when it's warm
11:33 - limit work in progress by swarming on
11:35 - unexpectedly difficult tasks keep a
11:39 - team-oriented mentality remember that
11:41 - you all sink or swim together follow the
11:44 - teams lead you'll end up confusing the
11:46 - team if you don't if you want to make a
11:48 - change
11:48 - ask your lead about it review each
11:51 - other's code to increase code quality
11:53 - and try pair programming to make more
11:56 - stable code and have more fun at work
11:58 - hey thanks for watching you can join the
12:00 - conversation by subscribing to this
12:02 - channel or dropping a comment below and
12:03 - if you want to take your skills to the
12:05 - next level you can start learning at
12:06 - code academy today