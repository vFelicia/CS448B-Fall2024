00:00 - hello my name is Stephanie I am a
00:02 - software developer from Georgia I've
00:04 - been programming for about ten years and
00:05 - today I'll be sharing some of my
00:07 - experiences and things that I wish I
00:09 - knew when I first started out I've put
00:12 - together a list of things that helped me
00:13 - along the way and I'll largely be
00:15 - speaking for my experiences and
00:17 - observations for my classes and at work
00:19 - so programming is incredibly broad and
00:22 - that's why you often see many people
00:24 - with different backgrounds have very
00:26 - different starting points so what's
00:29 - important is that you have an idea of
00:31 - what you want to achieve by learning how
00:33 - to code so my starting point was just
00:36 - trying to change how my profile looked
00:37 - on this virtual pet website Neopets
00:40 - please hold the judgment no one said I
00:42 - had to be practical but from there
00:45 - you'll want to get an idea of where to
00:47 - start to learn this knowledge it doesn't
00:50 - matter where you start
00:51 - I've seen people start programming with
00:53 - a class a bootcamp a book or even a
00:56 - bunch of Google searches I mean I just
00:58 - ran some Google searches to find some
01:00 - pre-made templates I could copy and
01:01 - paste once you get your feet wet you
01:05 - start to figure out what you don't know
01:06 - so it's a bit counterintuitive but when
01:09 - you start to see what you don't know
01:10 - then you can start learning those things
01:13 - to reach your goals so I needed to know
01:16 - more about what the code was doing in
01:18 - order to fully customize a website and
01:20 - so that's where I started learning about
01:21 - web development I also realized that I
01:25 - needed to use my strengths to learn
01:27 - concepts especially since code can be
01:30 - boiled down to a bunch of characters in
01:32 - a file it can be difficult to understand
01:34 - what's happening conceptually so it's a
01:36 - good idea to understand your learning
01:38 - style and use that to master and
01:40 - remember concept I'm very much a visual
01:43 - learner so I try to train the concepts
01:45 - into something tangible like associating
01:48 - them with different images if there's
01:50 - something that I'm really struggling
01:51 - with then I'll try to draw it out on a
01:53 - piece of paper or whiteboard for example
01:56 - I started out learning Java which is
01:58 - great for object-oriented programming
01:59 - I'll skim over the details but there's
02:02 - this concept called a class which
02:04 - determines how an object is defined and
02:06 - can be used to create instances so when
02:09 - I first learned about classes and
02:11 - instances of a class
02:12 - spent weeks trying to remember the
02:14 - difference between the two and how they
02:16 - were related and I just couldn't nail
02:18 - the two down for the life of me
02:20 - eventually I just throw out some
02:22 - pseudocode or fake code on a white board
02:25 - with some illustrations and I suddenly
02:27 - start to get this visual of what was
02:30 - happening in my head and saw this
02:31 - assembly line with a blueprint turning
02:33 - out these little bicycles not everyone
02:36 - has the same learning style but I find
02:38 - that visualizing helped me the most in
02:40 - remembering tricky concepts another
02:43 - thing that I wish I knew was probably
02:45 - that I get really comfortable debugging
02:47 - a lot of times we strive for perfect
02:50 - code but there isn't really such a thing
02:51 - when you're first starting out if you
02:54 - encounter a lot of bugs that doesn't
02:55 - mean you're bad at coding so don't beat
02:58 - yourself up over simple bugs that in
03:00 - hindsight are obvious I mean I've spent
03:03 - a lot of time getting hung up on fixing
03:05 - syntax errors that it made me lose sight
03:06 - of what I was trying to do from a
03:08 - conceptual perspective so as a result
03:10 - I've developed a pretty complicated
03:14 - relationship with a debugging process
03:16 - when I write some bad code in my editor
03:18 - it'll yell at me and serve up this
03:20 - lovely reminder that my code is very
03:23 - wrong in the form of this red underline
03:26 - so I fix the issue
03:28 - and the line goes away and then it comes
03:31 - back to you lengths later and three
03:33 - lines later and four lines later and six
03:36 - lines later I've had plenty of those
03:41 - days and still have them where no matter
03:44 - what I do everything is wrong but that's
03:48 - okay don't worry about remembering the
03:49 - programming syntax you can easily just
03:52 - run a quick Google search to figure out
03:54 - what the right format is it's way more
03:55 - important to focus on what's happening
03:57 - to sexually the most successful
03:59 - programmers I know are always able to
04:01 - answer why and what their code is doing
04:03 - behind the scenes it's kind of like when
04:06 - you're writing an essay if you have some
04:08 - grammatical mistakes it doesn't mean
04:10 - you're a bad writer because you've got
04:11 - some solid ideas to shape your essay and
04:14 - for all the time that you spend fixing
04:17 - your bugs it's also really important to
04:19 - set aside time for your brain to relax I
04:22 - initially thought that the amount of
04:24 - time I threw into a problem would be
04:25 - proportion
04:26 - to the progress that I made well
04:28 - sometimes this is true and other times
04:32 - it's less true especially when you've
04:35 - been staring at the same issue for eight
04:37 - hours straight this has probably been
04:41 - the hardest for me to come to terms with
04:43 - especially since I can be pretty
04:45 - stubborn but there have been countless
04:47 - times where I would be on the same two
04:49 - lines of code for hours walk away to
04:51 - grab a snack come back and then the
04:55 - answer is staring at me right in the
04:57 - face sometimes it feels like my brain is
04:59 - staging a boycott against me but if a
05:02 - break is all it takes to get a solution
05:03 - then I'll do it you should also take
05:07 - charge of your own learning a large part
05:09 - of that is being comfortable with not
05:11 - knowing things and with asking questions
05:13 - in my classes I had really low self
05:16 - confidence because it felt like my peers
05:18 - had so many more years of programming
05:21 - experience on me I thought I would be
05:24 - judged for saying something wrong so I
05:26 - just thought well I can just run a quick
05:28 - Google search on this later I didn't
05:31 - realize this but I missed out on a lot
05:33 - of great conversations because of this
05:35 - eventually I got over my mental
05:37 - roadblock and started talking to my
05:39 - peers about concepts that were covered
05:40 - in class and believe it or not it
05:42 - actually helped me gain confidence and
05:44 - help them solidify their understanding
05:47 - so more of them often than not the
05:49 - conversation would evolve beyond my
05:51 - initial question and I would walk away
05:53 - with more than what a Google search
05:55 - could achieve I also realized that when
05:58 - I started talking more I was also
06:00 - exercising the jargon
06:02 - one of my most embarrassing moments was
06:05 - when we were talking about cash I had
06:08 - only ever seen the word on paper so I
06:09 - thought it was pronounced cash and I am
06:13 - so glad someone was there to correct me
06:15 - before I said cash in an interview
06:17 - everyone's experiences are different and
06:20 - these are some of the realizations I
06:22 - made the hard way but the programming
06:24 - community is very helpful and inclusive
06:27 - so don't be afraid of not knowing enough
06:29 - to be a part of it too just ask your
06:34 - question and odds are someone else will
06:36 - have the same
06:36 - as you - I hope you found this video
06:39 - helpful and good luck on your coding
06:41 - journey