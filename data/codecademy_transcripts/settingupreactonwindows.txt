00:00 - Hello my name is Farish and in this video, we're going to set up React on Windows
00:05 - and we're going to take two different approaches here.
00:07 - The first is to use the Create React app so you could do a fully functional React app from scratch,
00:15 - and the second approach is we're going to take your existing HTML and CSS file and show you have to integrate React into it.
00:23 - So let's get started.
00:25 - So by the end of this video, you should be able 
to install Create React app
00:30 - and start a React project from scratch using Create React app,
00:35 - and lastly, integrate React into your existing HTML CSS project.
00:41 - So there's a couple requirements for this video.
00:44 - First, I'm assuming you have Git Bash and Node js installed.
00:49 - If not, don't worry, Codecademy has instructional 
videos on how to do both.
00:55 - So I have Git Bash open and the first thing 
we need to do is verify that Node is installed.
01:01 - The easiest way to do this is to check what 
version of Node is currently on your computer.
01:08 - In the command, we're gonna type is node hyphen v. Make sure to include a space after node, then I hit enter,
01:19 - and we see that the Node version appears.
01:22 - Now if you get a message that says command not found or if nothing happens on the screen, a good chance node js isn't installed.
01:31 - Now that I know we have node installed, we're going to use NPM to install the Create React app.
01:38 - And the command is npm install hyphen g create 
hyphen react hyphen app.
01:47 - And you can copy exactly what I typed on the screen.
01:50 - And the reason why we're using the hyphen g flag, which stands for global, is we like to be able to make our React projects any puter.
02:00 - So that only took 6 seconds and it's successful.
02:05 - So I'm going to clear the terminal and now I'm going to cd into my projects folder, and I want to make a React app, and the command is really easy to type.
02:17 - It is create hyphen react hyphen app space, then your app name, which in this case will be for me my hyphen react hyphen app.
02:32 - Then you hit enter and this does take a little while
02:37 - so I've sped up the installation process. It only took 66 seconds in real time but what I want to point out is after it's done,
02:46 - at the very bottom, it does give you instructions on what to do next.
02:50 - So what I'm going to do is cd into my React app, then I'm not going to use yarn start, I'm going to use npm start.
02:58 - Yarn is a alternative to npm that's pushed by Facebook
but to maintain consistency, I'm going to use npm.
03:06 - So now I'm going to cd into my React app
and now I'm going to type npm start.
03:14 - Now I'm going to hit enter, and the development server is going to start up, and this should automatically open up your browser to the React app
03:22 - but what I like to point out is this line in the terminal just in case you lose the location of your app in the browser,
03:31 - maybe you accidentally closed out the window by mistake,
03:34 - you could always type this address in your browser to get back to the app.
03:39 - And speaking of the browser, let's go ahead and take a look.
03:43 - Here's our React app, and it even states you can go ahead and 
edit the app dot js file to get things started.
03:50 - Now, as I stated earlier, Create React app is a great starting point if you want 
to build a fully functional, with all its features, React app from scratch.
04:00 - But what if you have an existing project that you just want some light touches of interactivity but you'd like to use React for that?
04:08 - Well, I'm gonna show you how to do that next.
04:12 - Now this website is called tea cozy and it's one of our projects 
from the web development path,
04:17 - and it's built on HTML and CSS, no JavaScript.
04:22 - So what I'm going to do is incorporate React into this project. I want to add a button to the mission section.
04:28 - When you click on that button it will trigger an alert using React. Now let's head over to the code editor and get started.
04:36 - So I have the index dot html page of the tea cozy project open in 
VS Code, and I want to scroll down a little bit.
04:45 - What I'm going to do is start implementing React into this project.
04:50 - So over at the very bottom, before the body, I'm going to paste in three script links, and I'm going to zoom in for a closer look.
04:59 - The first link is for the React library for making components. 
Now the second link is for React DOM,
05:08 - and what this does is manages the rendering of components 
along with the DOM manipulation on the web page.
05:16 - In the last script link is Babel, and Babel is mainly used to convert ECMAScript 2015 plus, also known as ES6 code,
05:25 - until a backwards compatible version of JavaScript that will 
work in current and older browsers.
05:32 - Now that we have these three script links in place,
let's get started in adding React to this project.
05:38 - So I'm going to insert another script into our HTML and because we're using Babel, the type needs to equal text slash babel.
05:49 - And after typing that, I'm going to add a few spaces here
05:54 - so I can make some room for the class that I'm going to create here.
05:58 - Do is convert the mission section of this project into a component. So I'm going to name the class mission and start building out the component here.
06:07 - And this is a React tutorial, this is for demonstration purposes 
on how to convert your project over.
06:15 - So I'm assuming at this point you understand enough of React to be able to do this and understand what's going on.
06:24 - So I'm going to build my render statement first,
06:28 - and once I have this part written now, I'm going to grab the 
admission section and copy it over.
06:34 - Now I don't want to grab the whole mission 
div with the ID, I want to grab the div that has the content in it
06:42 - and place it inside this render statement. So I'm going to cut this out
and paste it right inside of the return.
06:50 - One thing to note, class is a reserve word in JavaScript.
06:55 - So here where we have the div, I have to change each class 
to class name using camelcase.
07:02 - The next thing I'm going to do is make a button and add the on 
click event handler, and inside of the button for the text, I'm going to add click here.
07:15 - Now the next thing I'm going to do is write out a function that we 
can call inside of the event handler.
07:22 - And I want to call that function handleClick.
07:26 - And once again, this is for demonstration purposes
so the handleClick function is going to call an alert,
07:34 - and the alert's going to say, Button was clicked.
07:39 - Now I'm going to go back to the event handler and write in this dot handle click, and because this is going to trigger an alert, we're not passing in any arguments.
07:51 - The last thing I need to do is to write out the react DOM render method.
07:56 - And for this method, the first is going to be the mission 
component that I've created
08:02 - and the second is going to be the element that's
going to be the insertion point for this.
08:07 - So remember earlier in the video I stated that I was going to 
leave the mission div alone but grab the content div instead?
08:16 - This is why I did this. Now I'm going to target that mission ID as 
the insertion point.
08:23 - Now it's time to save this, go back to the project, and 
make sure everything's worked out okay.
08:29 - So I'm back at the page and the first thing I need to do is reload this. And after hitting reload, we can see my Click Here button is there,
08:39 - and all we have to do is click on it and the alert works.
08:43 - Now in the real world, you're not going to use React for alert.
08:46 - But the idea here was to show you how you can easily integrate 
React into an existing HTML CSS project.
08:54 - Thanks for watching and happy coding!