00:00 - everyone my name is Carlos I'm a web
00:02 - developer based in Boca New York and
00:04 - we're today we're gonna look into sass
00:05 - now assassins a tool that's been
00:07 - available for us for a long time so if
00:09 - you're heard of it but you're not
00:10 - familiar on why we should use it or how
00:12 - it works then you've come to the right
00:14 - place
00:14 - so let's go ahead and get started so
00:16 - today we're gonna cover what is sass why
00:19 - are we gonna be using it they're gonna
00:21 - look at how it actually works then we're
00:23 - gonna look into certain features that
00:24 - sass provides and lastly we're gonna
00:26 - compare with CSS and SCSS to see how it
00:29 - looks ok so what exactly is says well
00:33 - the jist sass stands for syntactically
00:35 - awesome style sheets and it's an
00:37 - extension of CSS which adds nested rules
00:39 - variables mixin selector inheritance and
00:42 - a lot more features
00:44 - now sass is actually written in Ruby and
00:46 - it's intended to make our lives a lot
00:48 - easier in writing CSS but let's look at
00:51 - a few other reasons why we actually want
00:52 - to use sass instead of CSS now if you
00:56 - have written CSS before there I'm sure
00:58 - there's been instances where you have to
00:59 - copy blocks of code over to multiple
01:01 - other elements in order for them to have
01:03 - the same custom styles so CSS can get
01:06 - very hairy and disorganized and very
01:08 - cluttered sass helps us organize as
01:10 - clutter and make it into really specific
01:12 - modules and 16 pieces of code another
01:15 - reason is that the syntax is easy to
01:17 - learn especially if you already know CSS
01:20 - now there are a few specific differences
01:22 - with sass like the use of indentation
01:24 - and dollar signs to create variables but
01:27 - overall the syntax is quite identical to
01:29 - CSS so it's very easy to learn one of
01:32 - the most important reasons to use SAS is
01:34 - that with the use of variables and
01:35 - various other features were able to
01:37 - reuse a lot of our code one of the
01:40 - things that our software developers and
01:41 - most is having to repeat themselves so
01:44 - as such mantras like to repeat yourself
01:46 - and tools that automate repetition are
01:48 - quite popular and SAS helps us to avoid
01:50 - this issue
01:51 - lastly sacis has a very mature and
01:54 - stable community so SAS has actually
01:57 - been active and supported for about 12
01:59 - years by its core team but not only that
02:02 - it's actually been supported by several
02:03 - tech companies and hundreds of
02:05 - developers so it's very stable at very
02:07 - mature and very up-to-date so now let's
02:10 - look at how SAS actually works so SAS
02:13 - is actually a preprocessor and if you're
02:16 - not sure what a preprocessor means it's
02:18 - simply a program that processes input
02:20 - data and produces an output and then
02:22 - that output will be used in another
02:24 - program now this is gonna make a little
02:25 - bit more sense in the following slide
02:27 - where I'll explain how the actual flow
02:29 - works but one other thing I would also
02:31 - like to point out is how SAS actually
02:33 - has different syntaxes now there are two
02:35 - popular ones called SCSS and SAS so we
02:40 - have SCSS which is basically standing
02:42 - for sassy CSS and this is a superset of
02:45 - the css3 syntax now scss is more like a
02:49 - middleman between sass and CSS then we
02:53 - have an actual sass code so sass will
02:55 - just be the full-on sass file that will
02:57 - actually be compiled into CSS so let's
03:01 - look at how this flow actually works so
03:03 - let's say you have written your sass
03:05 - file containing a bunch of variables and
03:08 - using a bunch of the other features that
03:09 - sass actually uses from there it's going
03:12 - to go through a processor or a compiler
03:14 - and that compiler will actually sped out
03:16 - CSS that the browser will be able to
03:18 - read so all this is going to happen
03:20 - behind the scenes and sass needs to be
03:23 - compiled into CSS because browsers
03:25 - actually cannot read sass so they need
03:28 - to be transformed back into CSS so let's
03:31 - look at some of the features that sass
03:33 - provides and just to preface I'm only
03:34 - gonna be showing about three features
03:36 - sass actually provides a bunch more and
03:38 - I suggest you guys look at the
03:40 - documentation to see what else you can
03:42 - do with sass so let's start out with
03:44 - variables so think of variables as a way
03:46 - to store information that you want to
03:48 - reuse throughout your stylesheet now you
03:50 - can store things like colors fun snacks
03:52 - or any CSS value that you think of one
03:54 - I'd reuse and in order to do this with
03:56 - sass where you're gonna use a dollar
03:58 - symbol to make something a variable so
04:00 - here's an example where we actually have
04:02 - a variable called control height set to
04:04 - 40 pixels and we use that variable for a
04:06 - header class and a sub header class now
04:09 - if we were to write this in CSS we would
04:11 - simply write the number itself now in
04:13 - this case we're only using it for two
04:15 - classes but in long style sheets where
04:18 - we use multiple 50 to 100 classes it can
04:21 - be quite confusing to scroll back up and
04:24 - see what actual height we used for a
04:25 - previous class so
04:27 - very useful to have a variable that we
04:28 - can just reuse over and over again for
04:30 - different elements so now let's go ahead
04:32 - and take a look at mix ins I mix it
04:35 - basically lets us make groups of CSS
04:37 - declarations that we may want to reuse
04:39 - throughout our site so we can even pass
04:41 - in values to make our mix in more
04:43 - flexible so let's take a look at an
04:45 - example here in order to create a mixin
04:48 - we're gonna use the add sign directive
04:49 - and give it a name so we have a mix in
04:51 - here called awesome and we included in
04:54 - two different elements one called body
04:55 - and one is a paragraph so that awesome
04:58 - mixin can have probably or how many
05:01 - other declarations you might want maybe
05:02 - you want to put a border or maybe a
05:04 - radius or a fun color and we can insert
05:06 - those properties into different elements
05:08 - as well so it's very useful and this
05:10 - would translate like this and CSS where
05:13 - it's a little bit more declarative and
05:14 - we actually have to specify the width
05:17 - and the height for each element lastly
05:19 - let's take a look at one of the most
05:21 - useful features in sass called extend
05:23 - and inheritance now with extent we are
05:25 - able to share a set of CSS properties
05:27 - from one selected to another it's kind
05:29 - of similar to the mixin but it's not
05:31 - exactly the same so we have an example
05:33 - here where we actually have an h4 header
05:35 - with some properties and listed for that
05:38 - and we have a label here that has
05:40 - already one property with a cursor but
05:42 - we want to extend that the properties
05:44 - from the h4 element and if we were to
05:47 - translate this to CSS it would look like
05:49 - this now the difference is not that
05:51 - drastic it doesn't look that big of a
05:53 - difference however we can see how we're
05:55 - already reusing label here and if we
05:57 - were to have a very large example and we
05:59 - have a large amount of styles that means
06:02 - that we need to add it might be a little
06:04 - easier to actually use extent in order
06:06 - to actually pass those properties onto
06:08 - different elements so now let's take a
06:10 - look on a side-by-side example between
06:12 - CSS s CSS and sass so we have CSS which
06:16 - stands for cascading style sheets and if
06:18 - we look here we're styling an anchor tag
06:21 - to the color red and whenever we hover
06:23 - over it the color is gonna change to
06:25 - lime now if we use s CSS which stands
06:28 - for sassy CSS it's going to look kind of
06:31 - similar and like I said it's an
06:32 - in-between style sheet between CSS and
06:35 - sass and here we're using variables but
06:38 - we're still using curly brackets and
06:39 - semicolons
06:40 - and it's doing the same exact thing now
06:43 - for cents which stands for syntactically
06:45 - awesome stylesheets we have a much more
06:47 - condensed version of when we have from
06:49 - CSS and CSS the logic is still the same
06:52 - we have to color stored in variables but
06:55 - we're not using curly brackets here or
06:57 - semicolons which helps us avoid more
06:59 - errors so hopefully this video gave you
07:01 - a better understanding of what is SAS
07:03 - and how it actually works
07:04 - thank y'all for watching join the
07:06 - conversation by subscribing to this
07:07 - channel or drop in a comment below and
07:09 - if you want to take your skills to the
07:11 - next level start learning on code
07:12 - Academy today