00:00 - hello everyone and welcome to another
00:03 - session of code CAD me live but we are
00:06 - hopefully streaming on YouTube and
00:08 - twitch right now my name is Alex Koontz
00:11 - I'm a curriculum developer here at Koch
00:13 - Adam II and I've got Kenny with me Kenny
00:16 - you want to introduce yourself everyone
00:18 - like Alex also a curriculum developer
00:20 - and guide code CAD me super excited to
00:22 - be learning a bit about pipe on today
00:24 - with Alex well alex is gonna be teaching
00:26 - I'm gonna be learning alongside you guys
00:28 - yeah so we Kenny and I are both in the
00:32 - YouTube chat right now we're also
00:33 - streaming on Twitch although I don't
00:34 - think many folks are over there right
00:35 - now
00:37 - yeah if you're watching this video in
00:39 - the in our historical YouTube page I
00:44 - want to show you very briefly what these
00:46 - events are and how you can follow it so
00:49 - I'm gonna do that very briefly and in
00:51 - the meantime if you're alive on YouTube
00:52 - right now go ahead and start chatting us
00:55 - with us in chat where people coming to
00:57 - us from and all of that sort of stuff so
01:03 - today's focus is gonna be mostly Python
01:07 - functions but if there's anything that
01:09 - you guys have questions about Python
01:10 - related or cook aadmi related just write
01:13 - it in the chat we're hearing a few we're
01:15 - here - we're happy to answer questions
01:17 - / thing cool all right so again very
01:21 - briefly I want to want to show kind of
01:23 - these events that we are working on it
01:24 - on code Khadem ii if you go to code
01:27 - Academy comm slash events or even if you
01:29 - go to just coke atom e-comm you scroll
01:34 - down to the very bottom you will see
01:36 - that you have this events page and this
01:39 - kind of shows you our scheduling for
01:41 - upcoming events so this stream that
01:43 - we're doing right now we are going to be
01:46 - streaming every day or sorry every week
01:48 - on Tuesdays at 1:00 p.m. Eastern Time
01:52 - don't just be streamed on YouTube and
01:54 - our other various social social media
01:56 - platforms so you can catch us there and
01:59 - yeah if you look at this event page
02:01 - you'll see that we have some events
02:03 - about our community a team is putting
02:08 - together an event where it's just a
02:09 - study session we have a Q&A event
02:13 - for pro members that you can come in and
02:15 - ask more like direct questions to the
02:17 - members of the curriculum team so we've
02:19 - got a lot of events coming so for anyone
02:21 - that doesn't know what we're doing or
02:23 - you know our kind of plans for the sort
02:26 - of stuff
02:26 - this event page is really the place to
02:27 - go for all of this all right Kenny what
02:32 - let's jump right into this lesson so
02:35 - what sounds great
02:36 - this year the series that we've been
02:38 - doing is we've been going through the
02:40 - visualize data with Python skill path
02:43 - the way that you can find this page by
02:45 - the way is clicking on the catalog I
02:48 - wanted to briefly show this page because
02:50 - we are super excited to announce that we
02:53 - just launched three new skill paths we
02:55 - just launched to analyze data with our
02:57 - past the technical interview with
02:59 - JavaScript and one more might not be
03:04 - appearing on this page so we just added
03:06 - a couple of new skill paths so if you're
03:08 - a big coke atomy fan haven't seen those
03:09 - yet that was been released but in this
03:13 - stream we are going to be going through
03:15 - visualized data with Python right off
03:17 - the bat we have a question from chubbs
03:19 - where where they're asking what's the
03:22 - difference between learning Python and
03:24 - visualizing data with Python oh yeah
03:27 - good question so I think I think we'll
03:30 - see a little bit of both both of those
03:32 - things throughout this series so right
03:35 - now we're going through this scope ask
03:37 - which is visualize data with Python and
03:39 - you'll see if you look at the path
03:40 - towards the end we get into how to make
03:44 - graphs in Python and specifically with
03:47 - matplotlib and Seabourn but in order to
03:49 - kind of do that more advanced stuff in
03:51 - order to make visualizations with Python
03:53 - you kind of need to learn the basics and
03:55 - so that's what the path starts you with
03:57 - are kind of some fundamental Python
04:00 - concepts that you uh that you might be
04:02 - interested in so this is our third
04:05 - session that we've done it so if you
04:07 - look in our YouTube history you can
04:09 - watch the first couple of sessions where
04:10 - we've gone over introduction to data
04:12 - visualization gone through Python syntax
04:15 - and in this session that we're going to
04:18 - be going through our lesson on
04:19 - introduction to functions um but before
04:25 - we do that we thought that we would do a
04:27 - quick review
04:27 - of Python syntax and we are going to do
04:30 - the syntax quiz that we didn't get the
04:33 - chance to do before so yeah it's been a
04:36 - while since we live stream so exactly
04:38 - this get a refresher and then we could
04:40 - jump straight into functions
04:41 - alright so Kenny what's the difference
04:44 - between a float and an integer you see
04:46 - this has a ton of different programming
04:47 - languages okay geez I know from I'm not
04:50 - versed in Python but I know the floats
04:52 - allow for decimals or like
04:54 - floating-point numbers just where the
04:56 - name comes from and an integer is like a
04:58 - whole number
04:59 - what's answers yeah so it looks like
05:02 - it's the first one away or a float these
05:04 - are two different datatypes floats let
05:06 - you have decimal points where you
05:08 - integers are just a whole number at one
05:10 - I was a lot of pressure Alex oh yeah all
05:15 - right which one of these would produce a
05:17 - syntax error so for this one this is a
05:20 - question that's talking about defining a
05:22 - string and so let's see is there any
05:27 - difference between these two oh yeah
05:30 - it's very subtle very minute oh yeah so
05:33 - what what difference do you see here
05:34 - coming I'm seeing some mismatched quotes
05:36 - which is never a good sign
05:37 - ah so in the second one we open with
05:41 - double quotes but we close with the
05:42 - single quotes and so that is actually
05:44 - going to cause an error it's possible
05:48 - that this one would cause an error too
05:49 - if the thing on the right side is not a
05:52 - defined variable yes but this mismatch
05:55 - of quotes is definitely gonna be an
05:57 - error that's that last point Alex is
06:01 - it's like different from a syntax error
06:04 - like you would lead to an error but it
06:05 - was it like interesting yeah I mean yeah
06:09 - I guess it's not a syntax error it's
06:11 - almost a kind of logical error judge
06:13 - alright what is the value of total costs
06:16 - that gets printed that's so total cost
06:18 - starts at five we use this plus equal
06:21 - sign along with ten and that maybe does
06:24 - something to total cost and then we
06:27 - print total cost so this question is
06:29 - basically testing your understanding of
06:30 - what plus equals does chemi you've seen
06:33 - plus equals before what does plus equals
06:35 - do it saves over it increments it and
06:39 - also saves over that
06:41 - to the new baby so the existing better
06:42 - ah interesting so this is saying that
06:45 - I'm gonna take total costs I'm gonna
06:47 - take whatever used to be stored in total
06:49 - cost I'm gonna I'm gonna add on to it
06:52 - and override or and like save that value
06:55 - in total cost so this is gonna say total
06:58 - costs used to be five we're gonna add 10
07:00 - to it and then save that edition so
07:03 - what's going to end up being 15 all
07:09 - right what function output outputs text
07:14 - to the terminal so we have a couple of
07:15 - different functions here they all do
07:18 - different things but is it this one is
07:20 - kind of your typical function that is
07:23 - just going to show messages the terminal
07:25 - it's a function that you use all the
07:26 - time really busy or really useful for
07:29 - debugging and that is the print function
07:34 - hi everyone in chat I see all of your
07:36 - questions and comments
07:38 - I can definitely touch on some of those
07:40 - questions after we go through this quiz
07:41 - yes I only elaborate I'm providing some
07:44 - surface level school yeah and I'm kind
07:49 - of trying to go through this quiz
07:50 - quickly just so we can get to new
07:51 - material but um I take questions along
07:54 - the way as well so a multi-line string
07:57 - in Python or multi-line yes string in
08:00 - Python so if you want to create a string
08:03 - but you know if your string is so long
08:05 - that it looks kind of terrible in the in
08:07 - your text editor and you want to break
08:09 - it into multiple lines you can do so
08:11 - using this guy would be three quotation
08:16 - marks and you're on fire Alex how do you
08:24 - concatenate two strings ooh
08:25 - so this is definitely different in
08:28 - different programming languages first
08:30 - Kenny I guess what does what do you we
08:33 - may invite combine two strings or
08:35 - concatenate two strings
08:36 - it sounds like taking two strings and
08:39 - putting them into one singular string
08:40 - right yeah exactly so we oftentimes see
08:44 - this word concatenate where we just kind
08:45 - of want to smush two strings together
08:47 - and you do there are different ways to
08:49 - do this in different programming
08:50 - languages
08:51 - I think Python is just the addition sign
08:54 - dot concatenate that looks a little bit
08:57 - JavaScript e to me but think in Python
09:00 - it's trippy + design I want to cost me
09:03 - alright what is the value of the modulo
09:06 - variable in the following expression any
09:08 - what the heck is modulo it's this one
09:11 - often takes a little longer to explain
09:13 - it's like take the roommate find the
09:15 - remainder of after division right so I'm
09:19 - gonna divide 14 by 4 which so 4 goes
09:22 - into 14 3 times so we get 4 8 12 right
09:26 - it goes in three times and then we have
09:28 - 2 left over to get up to 14 so the
09:31 - remainder is 2 so that's what modulo
09:33 - does ok right answer exponents here so
09:41 - this question is basically asking how do
09:43 - you do exponents in Python and it's with
09:46 - the double star notation and so 2 to the
09:50 - 4th you have to the first is 2 2 squared
09:53 - is 4 to the third is 8 and 2 to the
09:56 - fourth is 16 what character begins a
10:04 - comments in Python this is the hash tag
10:07 - I don't know if you guys so Kenny and I
10:10 - were both were both classroom teachers
10:14 - and I don't know if kind of you reached
10:15 - a point where I so I started teaching in
10:19 - like 2013 and I was still using the
10:21 - terminology pound sign and then pound
10:25 - has just been completely eradicated from
10:27 - the face of the earth
10:27 - nobody says pound sign anymore everyone
10:29 - is saying hash tag yeah it's it's like a
10:32 - nice little fun fact to bring up and
10:33 - it's like hey this hash tag is actually
10:35 - known by so many different names the
10:36 - acos throat have you heard of that one
10:38 - oh I've heard of the octo through oh
10:40 - yeah I remember I remember my students
10:43 - just being like mr. Koontz what are you
10:44 - talking about that's a hash tag what
10:45 - does a pound sign there's so many old
10:47 - moments with the students all right what
10:53 - what is Python syntax for creating a
10:55 - variable and assigning the number 10 to
10:56 - it so there are a couple of there are a
11:00 - couple of different things that are
11:02 - going on here so it's not def def is how
11:06 - you create a function name which
11:08 - but we're actually gonna be talking
11:09 - about in today's lesson equals equals
11:12 - Kenny what is this what is equals equal
11:15 - ones doing here that's like an equality
11:17 - operator right where you check to see if
11:18 - two values of the same yeah exactly so
11:21 - this isn't assigning the variable to ten
11:24 - it's checking to see if the value
11:26 - already stored in variable name if
11:29 - that's equal to ten so this one return
11:31 - like a true or false it doesn't do
11:32 - anything with assigning the variable
11:34 - this is the correct answer
11:36 - just a variable name equals ten and then
11:38 - new is kind of like a special keyword
11:41 - similar to def where we see that in kind
11:44 - of object-oriented programming and
11:46 - classes and objects and things that you
11:48 - can learn about way down the line all
11:53 - right what happens when running the
11:55 - following code hahaha this one is a
11:59 - little bit of a trick question this is
12:02 - going to throw a syntax error because
12:04 - it's not surrounded by quotes so if we
12:07 - wanted to actually print out what a cool
12:09 - message we'd have to put quotes around
12:11 - that so this question is just kind of
12:14 - testing to make sure that you know how
12:16 - to properly define a string so yeah
12:21 - message wouldn't be printed message is
12:22 - just the variable name if this if
12:25 - message we're actually storing a string
12:27 - right if we did this correctly it
12:29 - wouldn't print message it would print
12:30 - the contents of message for the what the
12:32 - variable message is is storing all right
12:38 - what is the output of the following code
12:39 - Kenny in prep this one got me oh boy oh
12:46 - because it's not reassigning cool number
12:49 - right yeah so cool number starts at 42
12:53 - and then it looks like we are
12:54 - multiplying 42 by five which I assume
12:57 - will give us 210 but what Kenny just
13:01 - said is exactly right we're not
13:02 - reassigning cool number if we wanted to
13:04 - reassign it we could say cool number
13:07 - equals cool number times five but we're
13:10 - not so it's a little bit of a trick
13:11 - question could we use the equals star
13:16 - five kind of thing yeah so earlier we
13:18 - have that question about like basically
13:20 - what does plus equals do
13:22 - plus equals not only does the addition
13:25 - but it also sets it also like resets the
13:28 - value to that new value yes so we could
13:30 - do cool number x equals five and I would
13:33 - say take the value currently stored in
13:36 - cool cool number multiply it by five and
13:39 - a reset the value a cool number I'm just
13:41 - trying to make you say cool number
13:42 - multiple times it's works alright last
13:48 - question which of the following defined
13:49 - variables is a string it's one it's one
13:53 - it's fairly easy we've got float you've
13:56 - got an integer we have a string which is
13:59 - something that's surrounded by quotation
14:01 - works and then this will also be an
14:03 - integer where this is we're doing some
14:06 - exponent works work it's four to the 14
14:09 - to the third when the string is cool
14:11 - variable three yeah a hundred Alex thank
14:17 - goodness if anyone in chat has liked any
14:22 - questions about that feel free to feel
14:24 - free to post questions I'm gonna pull up
14:27 - the lesson that we're gonna work on next
14:30 - I don't think this is gonna take us to
14:33 - what we actually want we're gonna skip
14:35 - the project from that yeah back to
14:41 - visualize data Python all right 15
14:45 - minutes in and cool the thing that we
14:48 - are going to be covering is the third
14:49 - main lesson in this course which is
14:51 - introduction of functions it's super
14:53 - important concept glad we're covering
14:55 - this definitely functions are in almost
14:59 - every programming language I don't think
15:00 - I've ever worked in about programming
15:01 - language it doesn't have functions I
15:02 - suppose there are some very strange ones
15:04 - that that might not have functions but
15:06 - the things that you learn in Python
15:09 - can totally be applied elsewhere so cool
15:14 - uh Kenny do you see any comments that
15:17 - you think are worth worth talking about
15:19 - before we dive into the lesson um I
15:22 - think Chris G mentioned something that
15:24 - was worth while we should talk about
15:25 - like would you recommend we learn Python
15:26 - 3 module before tackling other Python
15:28 - subjects and I had mentioned that like
15:31 - yes I think especially if you're just
15:34 - trying to learn a language to do so
15:35 - thing I imagine other modules we're
15:37 - talking about like skill Pat's and very
15:39 - specific things that you might want to
15:41 - do so learning the tools to do something
15:43 - and then figuring out what you want to
15:45 - do could be worthwhile other people take
15:47 - a different approach but yeah thoughts
15:48 - Alex yeah I would agree this skill path
15:51 - that we're going through we teach the
15:53 - little bit of the Python fundamentals
15:55 - that you'll need in order to get to the
15:57 - data visualization stuff but we also
15:59 - leave out a lot of Python fundamentals
16:02 - that are not necessarily necessary for
16:04 - data visualization but are like probably
16:06 - good to know in the long run it's kind
16:10 - of like if you were just interested in
16:11 - learning data visualization take this
16:13 - skill path otherwise I might look into
16:16 - either the computer science career path
16:18 - or the Python 3 course that one kind of
16:21 - give you a more rounded or a more
16:24 - complete understanding of what a a
16:26 - Python as opposed to this I'm very
16:28 - specialized go path alright let's let's
16:35 - get going so this introduction to
16:38 - function functions I love this I love
16:41 - this animation that we have that kind of
16:43 - shows this office so the idea behind the
16:45 - function is that we want to write code
16:49 - that is both are reusable and can have
16:53 - input and output so in this in this
16:57 - image that we have showing here the
16:59 - input is some shape and you could
17:02 - imagine like okay that's it's a little
17:03 - bit hard to think about in Python terms
17:05 - because it's like how do we even define
17:06 - what a shape is perhaps that's just a
17:09 - number of this shape has three sides or
17:12 - four sides so we know how to create
17:13 - integers in Python and then we are
17:16 - taking this function which we have named
17:18 - add one side and we are applying that
17:22 - function to all these different inputs
17:24 - and the function then gives us output so
17:26 - when we apply it to a triangle it
17:28 - produces a square when we apply it to a
17:30 - square it produces a Pentagon a Pentagon
17:33 - makes a hexagon all that sort of stuff
17:35 - so this is this is kind of like the one
17:40 - of the main ideas the kind of function
17:41 - is that we want to write code that's
17:44 - both reusable and can deal with the
17:46 - inputs and outputs
17:49 - any any thoughts about that Kenny any
17:51 - yeah reusable and it's always ask you
17:54 - think it also looks like very consistent
17:56 - right like it's consistent behavior that
17:58 - we observed throughout and if something
18:01 - were to change in that behavior I guess
18:03 - we can look into that one place that ad
18:04 - one side function and deal with it there
18:07 - yeah functions are kind of nice because
18:10 - you know you don't you don't necessarily
18:13 - need to know all of the code that's
18:15 - going on inside this hammer right like
18:17 - somebody wrote this ad one side function
18:21 - that does the thing that turns a
18:23 - triangle into a square but if the person
18:26 - that wrote that function did it
18:27 - correctly and did it well you can just
18:29 - assume that this function is going to
18:31 - work it's going to do what you want it
18:32 - to do it's gonna add one side to the
18:34 - shape and you don't really have to worry
18:37 - about the implementation inside that
18:39 - function if you're just using function
18:41 - so you see this like all the time and in
18:42 - a real development where you're calling
18:43 - functions all the time where you don't
18:45 - really know every line of code that's
18:48 - happening inside that function point
18:50 - Alex all right
18:53 - let's dive into how do define functions
18:56 - in Python
18:59 - hopefully you load here I have to
19:05 - refresh ya oh one other thing I guess
19:09 - Alex it's like I know that gif displayed
19:12 - input and outputs inputs and outputs but
19:15 - like do the two functions always need
19:18 - inputs and outputs
19:20 - definitely not so even in this first
19:23 - example that we're doing here
19:25 - there's no there's no input or output
19:27 - from this function this function is just
19:29 - going to do some things sometimes we
19:31 - call these like side-effects of the
19:32 - function because usually a function has
19:34 - input and output but this function in
19:39 - particular doesn't have any input and
19:42 - output it will just do the exact same
19:43 - thing every single time that you call it
19:45 - it's not dependent on on any input or
19:47 - output gotcha
19:48 - very cool cool though all right what is
19:53 - a function so as we were talking about a
19:55 - function is kind of a bundle of code
19:59 - that can be caught that can be used all
20:01 - at once and it can be
20:02 - we used and so in this example we are
20:05 - defining a function named singsong and
20:08 - sit and if we were to call the function
20:10 - these four lines of code would be wrong
20:13 - we're gonna get like into all of the
20:16 - very specific Python syntax of like okay
20:18 - what's this DEF keyword what's the colon
20:21 - doing here there's like seems to be some
20:23 - sort of indentation going on but
20:25 - basically the idea is that we've written
20:28 - the blueprint print for what does it
20:31 - mean what do I mean if I say call a sing
20:34 - song we've written the blueprint here
20:36 - and now we can execute that code we can
20:39 - we can run that blueprint so the
20:42 - instructions here say we've made a
20:44 - function for you called sing song call
20:45 - that function wants to see what it
20:46 - prints out so though I can call the
20:48 - function by just writing it like that
20:55 - there we go we see that our four lines
20:57 - of code are printed out singsong a
21:02 - second time and what do you expect the
21:06 - output in here to be Kenny we should see
21:09 - eight lines where it's the next four
21:12 - lines on the repeat of the first four
21:14 - lines exactly so the exact same thing is
21:18 - printed out twice so you can kind of see
21:22 - that this is the first really useful
21:25 - things about fun functions with air
21:27 - instead of you know I could also print
21:30 - these oops I could also print these four
21:32 - things out twice by writing this code
21:36 - twice by copying and pasting right
21:40 - that'll do the same exact thing if I
21:42 - didn't call the function twice but
21:45 - that's a lot of repeated code that's a
21:48 - lot of like effort and copy and pasting
21:50 - and it makes my file look worse so in
21:54 - this example I think the main purpose of
21:56 - this function is to condense that code
21:58 - to put those four lines of code into a
22:01 - single line of code all right let's see
22:09 - here's a good question that we had from
22:11 - our community forums in general when
22:13 - should function be created in the code
22:15 - what do you think about my Kenny I think
22:20 - like the name of functions it lends
22:22 - itself to her to knowing that as well
22:24 - just like if there is something that I
22:26 - know I need to be doing in this case
22:30 - singing a song many times over I would
22:34 - write a function so that I can reference
22:35 - those four lines of code so I could do
22:38 - it over and over and over again yeah I
22:41 - think going back to that point of
22:42 - reusability and maintainability or keep
22:46 - it go dry neat and then yeah you can can
22:49 - always go back and reference it that's
22:52 - what would make life easier and that
22:54 - would be my guiding point keep life easy
22:56 - nice I think that I think that's a
22:58 - that's a good good kind of reference
23:04 - point to keep track of just like would
23:05 - my life be easier if if this was in a
23:08 - function and I didn't have to keep
23:09 - repeating the same code over and over
23:11 - again all right cool so in this exercise
23:15 - we're going to actually write this
23:18 - function and so this this goes into some
23:22 - of these keywords that we were talking
23:23 - about so in order to define the function
23:27 - we have to use the Python keyword def so
23:31 - functions are in many different
23:33 - programming languages and in Python we
23:36 - say hey I'm writing a function by using
23:38 - this keyword def Kenny what it what is
23:40 - it in like JavaScript on F Q and see
23:44 - yeah so other other programming
23:46 - languages have stuff like this where
23:48 - it's like okay here's a here's a special
23:50 - keyword that is telling me I'm about to
23:52 - define a function Python we're using yes
23:54 - and then let's see this task is asking
23:57 - me to write a function called a loading
23:59 - screen so that's the name of the
24:03 - function alright next we have these
24:06 - parentheses which for now I'm just going
24:08 - to leave as open close parentheses
24:11 - these parentheses as we'll see in a
24:13 - second are involved in the input of the
24:18 - function and since this function doesn't
24:20 - have any input we're just going to not
24:22 - worry about these parentheses right now
24:23 - and we won't come back to it later and
24:25 - then finally we have a colon we
24:29 - says that's the name of my function it
24:31 - right now it has no input and then the
24:35 - colon says okay you've defined the name
24:36 - of the function that what is the
24:37 - function actually do and so this
24:40 - function we are asking you to print this
24:45 - page is loading so I just ran my code
24:56 - Kenny why did this paper is loading not
24:59 - print because I so in the previous
25:02 - exercise in order for our code in our
25:04 - function to run we have to call the
25:06 - function right yeah exactly
25:08 - and so what we've done here is we
25:11 - defined the function we've we've like
25:13 - written the blueprint we've said this is
25:16 - what I expect to have or this is what I
25:17 - want to have happen when somebody calls
25:19 - loading screen but I haven't called it
25:21 - yet so now I can come down here and say
25:24 - okay what's called loading screen and
25:30 - there we go now we actually see our
25:32 - output I skipped one little detail of
25:38 - writing this function which was that
25:40 - this line of code is indented so let's
25:44 - put a pin in that and I think we are
25:45 - going to talk about that maybe even in
25:47 - the very next exercise okay let's see if
25:50 - there are good community form questions
25:53 - who is it okay to place function calls
25:56 - inside of another function what do you
26:00 - think about that Kenny from other
26:04 - programming language it's possible I
26:07 - imagine Python allows it as well but I
26:10 - have not tried it definitely what's up
26:13 - let's actually give that a try so we can
26:14 - do something like F my second function
26:21 - and I'm not gonna print this is another
26:26 - function
26:30 - okay cool so I can call this function
26:32 - now I can call my second function and
26:37 - what do you expect the print the
26:39 - printout to be here so let's see going
26:43 - down load screen is called first so it
26:45 - would print out this page is loading and
26:48 - then when we call my second function
26:50 - then this is another function we print
26:52 - yep so one thing to note is that the
26:55 - order in which these functions were
26:57 - defined doesn't really matter when I'm
26:59 - down here calling the function so even
27:01 - though I define my second function first
27:03 - I'm calling it second which will make
27:05 - the order be this page is loading this
27:08 - is another function but now if I do
27:13 - something like inside this function I
27:15 - called my second function what do you
27:23 - think happens here okay so we call
27:28 - loading screen first which prints this
27:30 - page is loading and then we call my
27:32 - function there so that should print this
27:36 - is another function and then we call my
27:38 - second function again so then another
27:41 - line of this is another function print
27:44 - yeah exactly so I'm writing a little
27:47 - comment here so this so loading screen
27:50 - and now prints this page is loading and
27:52 - then does whatever my second function
27:54 - does so that just like you said that
28:01 - will print this page is loading and my
28:03 - second function will print this is
28:04 - another function and then we have
28:06 - another call to my second function down
28:08 - here which will then print off this is
28:10 - another function again so I'm expecting
28:12 - this page is loading this is another
28:14 - function and then this is another
28:16 - function that's exactly what we've got
28:19 - hey Alex if I know for JavaScript
28:22 - there's like a concept of hoisting so
28:23 - like you can declare variable as our
28:25 - variables and functions willy-nilly
28:27 - that's an overgrowth of
28:29 - oversimplification but if you were to
28:32 - put my second function the Declaration
28:35 - of it after loading screen is area like
28:37 - an error or something it's a good
28:39 - question I think that this will
28:41 - technically error but I'm actually not
28:42 - sure
28:43 - so for people watching along like this
28:47 - is really the best way to understand
28:48 - what's happening where it's like you
28:50 - really can't break anything while
28:52 - programming right like this might throw
28:53 - an error but now I understand like okay
28:56 - the order in which these functions is
28:57 - declared matters maybe my second
28:59 - function isn't declared yet because it's
29:02 - declared now afterwards let's see what
29:04 - happens no but still worked well so yeah
29:10 - so the order of declaring these
29:11 - functions seems like it didn't matter
29:17 - for for people in chat have you heard of
29:23 - the concept of recursion before and as
29:28 - you answer that I'm going to gonna clean
29:33 - this up a little bit I want you to think
29:39 - about what would happen if we did this
29:41 - oh so can you what do you think I think
29:50 - I'm very nervous right now and they have
29:52 - a nicer web page potentially I but it
29:56 - seems like if you're calling a function
29:59 - within itself it'll keep coming back so
30:02 - recursion being like a loop in it of
30:03 - itself right yeah and when does it end
30:08 - though right so this is an example of
30:10 - recursion which is the concept of one
30:13 - function calling itself and so right now
30:17 - if I ran this this would be an infinite
30:18 - loop I might even like try to do that in
30:20 - the spirit of like you can't you can't
30:22 - screw up too badly right like nothing
30:25 - that bad can happen so if I call loading
30:30 - spring here loading screen says okay I'm
30:32 - gonna print this page is loading and
30:34 - then I'm gonna do whatever loading
30:36 - screen does well whatever loading screen
30:38 - does is print this page is loading and
30:41 - then do whatever loading screen does
30:42 - well whatever loading screen does is
30:44 - print this page is loading and the right
30:45 - so it's an infinite loop would never
30:47 - ever ever get out of there so right now
30:52 - this wouldn't be an issues I'm just
30:54 - defining it so that function is defined
30:57 - now if I call gloating screen this will
31:02 - be an Internet so I'm gonna run it and
31:03 - this might crash my web browser which
31:05 - shouldn't kill the stream if I have to
31:07 - cut if I have to kill my entire web
31:09 - browser right ah look at that that's
31:13 - cool oh so you can see we printed out a
31:17 - ton of stuff and then we got this error
31:21 - maximum recursion depth exceeded while
31:24 - calling Python object
31:25 - it's basically what this is saying is
31:28 - like Python kind of realized that we
31:30 - were in an infinite loop it realized
31:32 - like he's got eyes have called this
31:34 - function again and again and again we
31:35 - get and so many times that we've I can't
31:39 - do it anymore and we're just gonna bail
31:42 - that's good to know
31:43 - how I was worried about you crashing
31:45 - your browser and say yeah that's a good
31:48 - that's a good different different
31:49 - program languages will handle this
31:50 - differently I think JavaScript might
31:52 - just keep trying to run and depends on
31:56 - environment believe but yeah different
31:58 - languages different processes don't
32:00 - really all right cool okay so that was
32:07 - kind of answering it's an OK to place
32:08 - function calls inside another function
32:09 - this other question after completing my
32:12 - function how can I return to an
32:14 - uninvented line that's a that's a good
32:17 - question so it's like if I'm writing my
32:19 - function here we get rid of the
32:22 - recursion so if I'm writing my function
32:26 - here in order to call the function I
32:28 - want to be on an unintended climb right
32:32 - because I didn't indent again I would be
32:35 - back into this recursion universe where
32:37 - now this is part of the function and
32:39 - again indenting is coming up very soon
32:40 - but to get to a nun indented line you
32:44 - just have to delete some of the we like
32:46 - we like automatically add the tabs or
32:48 - the spaces here
32:49 - so to get to a non indented line you can
32:50 - just delete those tabs and now start
32:52 - writing no yeah and that goes into a
32:57 - concept of like scope right now except
32:59 - on later oh yeah there's a whole lot of
33:02 - stuff about variable scope which is like
33:04 - where do variables exists are they
33:06 - inside only inside the function or can
33:09 - you interact with them how
33:10 - and the function all that sort of stuff
33:13 - I see in the twitch chat we have someone
33:17 - named Darth Vader asking what we're
33:19 - doing
33:20 - welcome twitch chat I imagine that
33:22 - you're one of a few people that are
33:23 - hanging out over there this is we're
33:25 - going through a Kenny and I are both
33:28 - coke Adam II curriculum developers we're
33:30 - going through a scope atha yeah which is
33:34 - one of our one of our courses that we
33:36 - have specifically about kind of intro to
33:38 - Python functions alright white space
33:43 - cool so this is what I was talking about
33:46 - with indentation where as you will have
33:50 - been seeing with these past function
33:53 - declarations everything that we want to
33:55 - be part of the blueprint part of
33:57 - defining the function is indented two
34:01 - spaces and so let's do these
34:04 - instructions run it script py and look
34:07 - what what is printed out so it prints
34:12 - this computer is running on version
34:14 - everest puma i think this is like a joke
34:16 - back when all the e iOS systems were
34:19 - named after big cats and mountains right
34:22 - well i so i think that they were and
34:25 - they were big cats for a long time it
34:26 - was like the snow is snow leopard and
34:28 - lion and then they started doing like
34:31 - national parks where we have like
34:32 - Yosemite and exactly so we print out
34:39 - that line and then we also print out
34:41 - this is your desktop so both of these
34:43 - print lines are a part of the function
34:46 - however if I remove the two indentations
34:51 - for the indentation here now this is
34:56 - your desktop is no longer a part of the
34:58 - function at all and so really what we're
35:01 - doing is first we are printing this is
35:04 - your desktop and then we're calling the
35:05 - function so these will actually be
35:08 - flipped right now the first thing that
35:10 - we're doing is just printing this
35:11 - outside of any function stuff and then
35:13 - we're calling the function yes so if I
35:19 - put
35:21 - something inside the function hello just
35:31 - demo that again this is outside the
35:33 - functions it will be print first and
35:35 - then these two lines will print how
35:40 - about if I do I call the function twice
35:42 - here what do you expect output to be now
35:47 - Kenny so you so they well this is your
35:53 - laptop will be sandwiched between those
35:55 - two lines of this computer is running
35:57 - version everest puma and hello yep
36:00 - exactly so i called the function once
36:01 - which efforts out these two guys then I
36:04 - call this entirely separately from the
36:06 - function and then I call the function
36:07 - again yes oh and check let us know if
36:11 - the font is big enough for you that's
36:14 - too small we can can also increase yeah
36:17 - also chat if you're uh if you have
36:19 - questions feel free to feel free to ask
36:21 - us whenever yeah we make this as
36:24 - interactive as possible I forgot to kind
36:28 - of ask before likes um about like naming
36:31 - conventions hmm is there certain rules
36:36 - that we have to follow when naming a
36:37 - function yeah let me see if we go I
36:40 - don't think that we specifically talked
36:43 - about this or maybe we did in the
36:44 - earlier section I just kind of went
36:47 - through it very quickly generally you
36:50 - want your function name to be
36:51 - descriptive of what it's doing so this
36:53 - functions name is about this computer
36:55 - and it was that because we were printing
36:58 - out information about this computer we
37:01 - might have a function that adds the
37:02 - numbers together and so you might want
37:04 - to call your function like add numbers
37:05 - or something like that the other thing I
37:09 - guess is that typical Python style is to
37:13 - write your function name this is called
37:14 - a snake case where everything is
37:17 - lowercase and you put underscores
37:19 - between the words some other programming
37:22 - languages use camel case which would be
37:24 - like about this computer
37:28 - that's called camel case because it's
37:30 - like the start of every word is
37:32 - capitalized so it's kind of like you get
37:34 - like humps like a camel so so that's
37:37 - just it right like it's convention if I
37:39 - did if I wrote a function in camel tees
37:42 - with that break the programming anyway
37:45 - so as long as your function definition
37:47 - matches whatever you're calling it it
37:51 - wouldn't break so I could change this to
37:53 - about this computer and then as long as
38:01 - I call actually this will be a good
38:04 - example so I'm calling the function
38:10 - twice one correctly and one incorrectly
38:13 - so we should see the correct one work
38:14 - and we'll see the print out and then our
38:16 - program should crash when I try to call
38:18 - this function that doesn't exist
38:19 - Oh what happened my Run button oh that's
38:23 - I guess the part of like making it too
38:25 - big potentially oh let me refresh the
38:28 - page might also have to scale your own
38:31 - oh I said there we go the function ran
38:37 - once and then it crashed because the
38:40 - error message name about this computer
38:43 - is not defined and specifically the
38:46 - snake case is not to find right the
38:48 - underscore version of this function
38:50 - isn't defined Christian the chat says
38:55 - I've heard something about something
38:57 - called pep eight does that have anything
38:59 - to do with naming okay this might be a
39:01 - good one for you this is e or do you
39:04 - know what pep f8 is that is other is a I
39:07 - thought that was a JavaScript thing
39:08 - maybe that's the name of the Python
39:10 - documentation
39:11 - I said it's a style guide for Python
39:15 - code okay I thought it was this it was
39:18 - the style guide for JavaScript yeah so
39:21 - Chris pep eight is the style guide for
39:23 - Python code which is basically like
39:28 - recommendations or you know this is how
39:31 - most people are running our Python code
39:33 - and so in pep eight which is the style
39:36 - guide you'll see things like typically
39:38 - functions are written using the not
39:41 - camel case here using sniffing this
39:45 - great question ug
39:47 - yeah good question right we got 20
39:51 - minutes left so I want to make sure we
39:52 - get to input and output but very briefly
39:54 - what's the deal with indentation two
39:56 - spaces versus four spaces versus tabs
40:00 - these are all different options that you
40:02 - could do with indentation the only thing
40:04 - that matters is that it has to be
40:06 - consistent so I'm actually gonna rename
40:09 - this to the correct style just to be
40:11 - good Python programmers I'll run this to
40:15 - make sure that this is good good cool
40:18 - ones I'm gonna add another print line of
40:21 - glow so right now this is good because
40:25 - the indentation is the same it's two
40:28 - spaces of indentation if I make it four
40:31 - spaces of indentation this is going to
40:33 - crash my program you'll see that the
40:35 - error is unexpected indent but if I make
40:39 - everything four spaces it should work so
40:46 - there's probably a style guide
40:49 - recommendation for whether to use two
40:52 - spaces or four spaces here at Koch atom
40:54 - II we use two spaces generally but
40:57 - realistically the program will work as
40:59 - long as you're consistent all right
41:05 - parameters all right so the idea behind
41:12 - the parameter is that sometimes we want
41:14 - our functions to take input value again
41:17 - going back to that starting image of the
41:19 - shapes the input value was you know the
41:24 - number of sides on the shape so imagine
41:27 - we want to have a function that has some
41:32 - input value and what we are going to do
41:35 - is we want to take that value multiply
41:38 - it by two and add three right now we've
41:41 - written a function that already does
41:42 - that so we say the function most to add
41:45 - three prints the number prints the
41:48 - number multiplied by two and adds three
41:50 - as it's written now the number that it
41:53 - operates on is always five call the
41:55 - function and see what prints out so if I
41:57 - just call mult
41:58 - two
42:00 - and three we're gonna do five times 2+3
42:09 - and Kenny I'm seeing some questions in
42:12 - the chat which might be good for I don't
42:14 - know if your your answering those are
42:15 - not type in a way buddy you so cool we
42:21 - just we just wrote this function it's
42:22 - similar to what we've done before where
42:24 - you have no input we're just taking five
42:26 - we're multiplying it by two and we're
42:28 - adding three however what we can do is
42:32 - let's say I didn't want to always do
42:35 - with five well I could change this to
42:37 - six but now this function is locked into
42:39 - always using six so we want to write a
42:43 - function that lets us do this add to or
42:48 - x to add three for any number and so in
42:51 - order to do that we need to give it an
42:53 - input an input value or a parameter so
42:57 - what we are asking you to do here is get
43:00 - rid of this line of code and say that's
43:06 - the number at a parameter called number
43:10 - so I'm gonna add a parameter between
43:13 - these parentheses this is our input
43:18 - print we're saying I expect you to give
43:20 - me a number and with that number I'm
43:22 - going to multiply by two and add three
43:26 - now when I actually call the function I
43:29 - can't just leave these parenthesis empty
43:32 - because as the definition of the
43:34 - function has said I expect you to give
43:36 - me a number so I put four in here I
43:41 - guess that I guess the exercise asked me
43:43 - to put one in here so if I put one in
43:45 - here one is now going to be substituted
43:48 - in number so I'm gonna do one times two
43:51 - plus three I should get you get five yes
43:54 - because 1 times 2 is 2 so 1 times 2 is 2
43:57 - plus 3 gives me 5 I can now call this
44:01 - function again like we asked you to do
44:03 - with the value of 5
44:08 - there we go the function has done
44:10 - something different now right it hasn't
44:12 - done the same thing again and again
44:13 - because I'm able to give it different
44:15 - inputs let's do it with a negative one
44:23 - and let's do it with zero cool so before
44:34 - when we weren't working with inputs our
44:36 - function could basically only do one
44:38 - thing it was deterministic it always did
44:41 - the exact same thing because we couldn't
44:43 - add inputs that would change that will
44:46 - change what it does by adding an input
44:48 - now the function can do the same thing
44:52 - right it's still always multiplying by
44:54 - two and adding three but it can now do
44:56 - that with any number that we give it
45:01 - cool can you please tell me what a
45:04 - real-world application would be I've
45:07 - heard that JavaScript is good because
45:08 - with no no js' you can work on the front
45:10 - of the backend and truly be a full full
45:12 - stack developer that's a question in
45:13 - chat yes so javascript deals with web
45:20 - development python more deals with we
45:24 - use it a lot for data science or in the
45:26 - past I have used it a lot for data
45:27 - science but for an example of like a
45:31 - real-world application of this is let's
45:34 - say you were writing a program that I
45:38 - just wrote a project for coke Adam
45:41 - Edelen with like coronavirus data right
45:44 - and one of the things that we had to do
45:48 - was we had a big list of data points and
45:51 - so we had to sum up all of the all of
45:54 - the data or we wanted like sum up all
45:56 - the numbers in this data set to find you
45:58 - know how many people have that have
45:59 - recovered from coronavirus over the
46:03 - course of the past couple of months and
46:04 - so I wrote a function to do that right
46:06 - rather than rather than just writing all
46:11 - my code out outside of a function I
46:13 - wrote it inside of a function so I could
46:14 - plot that could apply it to how many
46:16 - people have recovered in the u.s. how
46:18 - many people have recovered in Italy
46:19 - right I could give a different input and
46:22 - the function would know what to do with
46:25 - that input and give me a result cool all
46:33 - right an example it looks like that yeah
46:38 - let's see I'm looking at the community
46:40 - forum questions in Python do parameters
46:43 - still hold some value when the function
46:45 - call completes I think the easy answer
46:48 - for that is like know when the function
46:51 - call completes this one is kind of
46:55 - forgotten about right where we were
46:58 - subbing in what we were using one in
47:02 - place of number and after this function
47:04 - is done number doesn't really remember
47:06 - that it used to be one right we call it
47:09 - again and now the number is five we call
47:11 - it again and now number is negative one
47:13 - so after the function call completes
47:16 - it's like the blueprint has been used
47:18 - and it doesn't remember that it has been
47:19 - used it's just ready to go again it's
47:21 - like it's serving its its job as a
47:23 - blueprint and it's ready to go again
47:24 - with whatever number you give it next
47:28 - all right multiple parameters so in the
47:37 - previous exercise we just had one
47:39 - parameter right we said we're interested
47:41 - this function wants one number and it's
47:43 - gonna do some stuff with that number you
47:45 - can imagine that you would want a
47:47 - function that takes multiple numbers so
47:49 - a real world example of that is maybe I
47:54 - want to write a function that adds up
47:57 - all of my bills so I need to give it my
47:59 - electricity bill and my you know my heat
48:03 - bill all that sort of stuff so this is a
48:06 - function that you need multiple sources
48:09 - of input so let's see we're saying first
48:15 - change the name of the function tumult X
48:17 - add y ou X Y so right now that function
48:25 - is still only taking one parameter named
48:27 - number but what we want to do is we want
48:31 - to add two new parameters so let me
48:34 - briefly call this function
48:36 - so I can calm won't X & Y right now I
48:42 - can give it a number
48:44 - let's give it five that's gonna do the
48:46 - same thing as last time right we're
48:48 - gonna multiply 5 by 2 and then add 3 so
48:51 - that you know I didn't pass this it's
48:54 - test because I didn't do what we asked
48:55 - but you can see that we printed 13 so I
49:00 - can now add multiple parameters by just
49:03 - adding them with a comma here in between
49:05 - the parentheses so I can add in the
49:08 - parameters X and y when I want run this
49:13 - code right now I'm gonna get an error
49:14 - because I'm trying to call this function
49:17 - with just one parameter but I've given
49:20 - the the blueprint right I've told the
49:23 - function
49:23 - hey you expect three numbers so if I run
49:26 - this function right now you'll see that
49:28 - the error is missing two required
49:31 - positional arguments missing x and y
49:34 - well that's saying is all that with just
49:37 - five and if I wanted this function to
49:38 - run correctly I would have to give it
49:40 - two more so let me run that right now
49:44 - and we'll see that the code ran
49:46 - successfully
49:47 - right now I'm not doing anything with
49:50 - these these parameters right in the
49:52 - function I'm using number in this print
49:55 - statement and I've defined X and y I'm
49:58 - not really doing anything with it yet so
50:01 - we say inside the function replace two
50:03 - in the print statement with X and three
50:08 - in the print statement why
50:15 - so now when I run this code what's going
50:19 - to happen is that five is gonna be the
50:21 - value for a number one is gonna be the
50:24 - value for x and two is gonna be the
50:27 - value for y and in fact I'm going to
50:28 - change one into two and three just so it
50:33 - matches with what we're asking you here
50:37 - there we go so now we have a function
50:40 - that expects multiple parameters and
50:42 - then we're doing different things with
50:44 - those parameters so again now I can kind
50:47 - of change up how I use this function the
50:49 - blueprint is written and now I can use
50:51 - the blueprint in multiple different ways
50:57 - so you can see the first time I did five
50:59 - times two plus three the second time I
51:02 - did one times three plus one two
51:06 - different values all right this is a
51:16 - great question will a function still
51:17 - work if there are multiple parameters
51:18 - but some of them are never used within
51:21 - the function itself kind of demoed that
51:22 - earlier right if I just change that Y to
51:24 - a five we're asking for a Y right we're
51:30 - demanding that when someone uses this
51:32 - function that we give it three values
51:33 - but then Y is never actually used in
51:36 - here this will totally work I can still
51:38 - run my code doesn't crash but it's a bit
51:41 - silly for me to be asking for this third
51:43 - parameter and then we're using it she
51:50 - might function use print or return it's
51:53 - a good question we haven't gotten a
51:54 - return to return yet so hopefully we
51:58 - will answer that coming up yeah this
52:01 - this question that is asking how can i
52:03 - rename a function because we asked you
52:05 - to change the name of the function to
52:08 - motes x @ y if you like reset the code
52:11 - here you'll see that the function was
52:16 - originally named mol to add three and we
52:19 - asked you to make rename it to mult x
52:21 - and why it's a renaming a function is
52:24 - really just changing the name as it's
52:26 - defined right up there
52:29 - my thought was just like I don't think
52:31 - you can that makes sense yeah I think
52:35 - it's just that that's a that's something
52:37 - where this instruction is a little bit
52:40 - confusing where we asked you to like
52:41 - change the name of the function that's
52:43 - already defined
52:44 - we don't realistically when you're
52:46 - writing Python code you're probably not
52:48 - doing it that much probably maybe like
52:50 - you have an idea of what you want your
52:51 - function to be doing you name it
52:52 - something appropriate and then you never
52:54 - like after we change the name not you
52:56 - make sense all right we got you've got
53:02 - five minutes left let's get through one
53:04 - more and then I'll plug our next
53:07 - sessions keyword arguments so this is
53:13 - getting into like kind of the
53:14 - nitty-gritty of of our parameters the
53:20 - idea here is that sometimes I can use I
53:23 - can set up default values for these
53:26 - parameters so because we just have a
53:29 - couple of minutes I'm not even going to
53:30 - go through the instructions here I'm
53:32 - just going to show an example where
53:34 - right now we are calling this function
53:39 - and what this function does is it
53:40 - accepts a name I guess this is new so
53:43 - far we haven't we've only seen putting
53:45 - numbers or integers in as our parameter
53:48 - here we're putting in a string and we
53:51 - are contaminating that string with
53:55 - create a spreadsheet columns so if I run
53:58 - this code you'll see that it prints out
54:02 - create a spreadsheet called it downloads
54:06 - so the idea behind keyword arguments is
54:10 - that I can give this argument a default
54:13 - value by doing something like my my
54:18 - spreadsheets actually before I even do
54:21 - this let me let me do this
54:24 - I removed downloads there my program is
54:28 - gonna crash and again we saw this in the
54:29 - last exercise of we have the blueprint
54:33 - expects us to give it a title and we
54:36 - don't give it anything that's own
54:37 - crashes we can change this by giving
54:41 - this this parameter a default value of
54:45 - something let's say my spreadsheet find
54:51 - out we run this code even though I don't
54:53 - give it a value here Python knows to
54:57 - pull the one that that is defined by
55:00 - default so this no longer crashes it
55:04 - just says okay you didn't give me a
55:05 - value for title and so I'm gonna use the
55:08 - one that you gave me when you when you
55:10 - wrote the blueprint when you define the
55:11 - function I can override that by saying
55:16 - by giving it a value great I can say
55:18 - forget about my spreadsheet I want the
55:21 - the thing that you use for this title
55:22 - variable to be download there's a lot of
55:28 - subtlety that goes into this
55:30 - this this exercise goes into like what
55:33 - if I have a second parameter called
55:36 - whatever age can I give this a default
55:43 - value of 20 all right there's like a lot
55:47 - of subtleties now that were starting to
55:49 - add more complexity to our parameters
55:51 - some things work some things won't work
55:54 - fortunately we have three minutes left
55:56 - so I don't think that we are getting to
55:58 - it today but if you're curious about
56:00 - this sort of stuff we recommend you
56:02 - taking the course you know I feel like
56:06 - we kind of flew through this stuff very
56:07 - quickly and so if you're confused about
56:12 - any of that we would recommend taking
56:14 - the course again I'll show you how to
56:16 - navigate it specifically what we were
56:18 - doing today if you go to the home page
56:21 - of code Academy go to the catalog we
56:26 - were going through visualize data with
56:33 - Python so and so this is a big one long
56:39 - track it has a lot of exercises in it
56:40 - there's cool cheat sheets there's all
56:42 - that sort of stuff there's lots of you
56:47 - know there's lots of great content in
56:48 - here the thing that we specifically did
56:50 - today was Python functions we got about
56:54 - half if you
56:55 - got lesson there's a quiz that can help
56:57 - review it there are projects which are
56:59 - kind of further practice getting you to
57:01 - use those concepts in different ways
57:05 - yeah so if you want to keep working on
57:09 - that or finish that lesson that we
57:11 - didn't get a chance to finish this is
57:12 - the yeah this is specifically where we
57:15 - were working on it cool all right let me
57:19 - plug what is coming up unless you guys
57:20 - have something to say Kenny no I was
57:22 - gonna ask exactly that and just read my
57:24 - mind Alex let's go cool
57:26 - so coming up we have a couple of
57:29 - different events and we go to our events
57:31 - page just just to show them off you go
57:37 - to the events page we have a couple of
57:40 - events we have the thing that we are in
57:42 - right now which is visualize dated with
57:44 - Python number three tomorrow we have a
57:47 - Greek focus session this is not run by
57:50 - me or Kenny I think this is our
57:52 - community team oh yeah will Lisa like
57:56 - all those all those awesome people if
57:59 - you'd like kind of a place to work on
58:01 - work on code with people you can
58:04 - register for this session and then on
58:08 - Thursday we have a session that is for
58:11 - pro members only so I think if you're
58:13 - not a programmer you won't even see this
58:15 - you won't even see this block but
58:17 - basically this session is a private zoom
58:20 - call with some curriculum developers
58:24 - where you can ask us more questions we
58:26 - can give you a more detailed answer like
58:29 - Kenny has been trying to keep up
58:30 - answering all the questions in chat but
58:32 - you know those are sentence long answers
58:34 - and so really I view these sessions as
58:37 - the as the time it's like your time it's
58:39 - time to like answer your specific
58:42 - questions that you have in the past
58:45 - we've like brought people on the call we
58:47 - talked to someone in Ireland who is
58:49 - wondering about like how to set up a
58:52 - data collection hardware stuff that was
58:56 - super fun like I basically I want to
58:58 - turn it into like a radio show right
59:00 - having people calling with their
59:02 - questions so if that sounds like
59:04 - something that you're interested in
59:05 - we're going to be running those every
59:07 - Thursday at noon
59:09 - and if you're a pro member you can
59:11 - follow the instructions in here to sign
59:13 - up for that finally next week we will be
59:17 - running another free stream like this
59:21 - one going over the next unit so that
59:24 - won't be me I believe that's other
59:27 - curriculum developers so yeah Carolyn
59:29 - Carolyn so yeah so they'll be covering
59:35 - the next the next event in the pass
59:38 - which is also want to make a plug for
59:46 - that search option which has helped me
59:48 - like yes we have a search option so I
59:53 - imagine sunny and Carolyn will be doing
59:55 - Python lists maybe they'll want to do
59:58 - the projects but I think we won't try to
59:59 - get them to do Python they'll Python
60:02 - lists yeah so that's the plan
60:09 - we're gonna try to do these until we get
60:11 - through all of visualize data with
60:13 - Python um if you're watching this now we
60:16 - would love your feedback whether it's
60:18 - just in like the chat that exists right
60:22 - now or I'll have to off to find ways to
60:27 - get good feedback but if you're watching
60:29 - this right now thank you very much we
60:31 - appreciate getting through this lesson I
60:32 - really love doing these live live coding
60:35 - sessions Kenny I appreciate you being
60:37 - here the feelings my questions to answer
60:41 - stuffing chat to be a good person to
60:43 - bounce bounce conversation off of it's
60:47 - always fun Alex don't have to thank you
60:48 - then oh cool let me stop screen sharing
60:55 - definitely follow us along we're gonna
60:56 - try to make this a weekly thing like
60:58 - Alex was saying so any feedback you guys
61:00 - have in chat is super welcome and once
61:02 - again thank you love to see you again
61:05 - and Alex anytime you want me on just let
61:08 - me know all right cool thanks Kenny and