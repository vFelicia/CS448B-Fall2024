00:00 - Hey everyone, this is Chris DeGuira from Codecademy.
00:03 - In this video, we'll walk through the Control Flow lesson in the Learn Python 3 course.
00:08 - For each exercise in the lesson, we'll do a brief recap of what the lesson's narrative taught,
00:13 - and then we'll walk through the exercise's instructions where we'll apply our knowledge.
00:18 - Throughout the lesson, we'll cover a brief introduction to Control Flow,
00:23 - Boolean expressions and variables, relational 
operators, as well as if/else and else/if statements.
00:31 - Let's get started! Exercise number one: introduction to Control Flow.
00:36 - In this exercise, we'll start off the lesson with 
a brief introduction to Control Flow in Python 3.
00:42 - So, what is Control Flow? Let's start by painting a mental picture.
00:46 - We can do this by thinking about the decisions we make on a typical morning.
00:50 - For this, we'll draw a decision tree - a graphic 
representation of our decisions.
00:55 - First, we need to decide what time we'll wake up, for example, 
if it's a weekday, we might wake up at 6:30 A.M.,
01:02 - but if it's the weekend, we might, instead, wake 
up at 8:30 A.M.
01:06 - Depending on which path we took, we arrive at another decision. In the case where it's not a weekday, we'll decide if we need to go outside or not.
01:16 - And if we don't need to, we can stay in our pajamas.
01:19 - On the other hand, if it's a weekday and we had to get up earlier we come to the decision on whether or not to wear a raincoat.
01:27 - This decision is determined by the condition of 
"is it raining?" which produces a yes or no value.
01:33 - Control Flow in Python and other programming 
languages is similar to the decision tree we made about a typical morning.
01:40 - Python executes starting at the top of the file and works downward.
01:44 - Decisions are made throughout the program based on certain conditions that we've defined.
01:49 - Depending on the condition, Python will determine the path of the code that needs to run.
01:55 - Similar to how some of our decisions were skipped in our morning example, certain parts of the program may be executed while others are skipped.
02:02 - Throughout this lesson, we'll take a look at how python defines these conditions so we can create Control Flow.
02:08 - This exercise doesn't have an instruction section, 
so let's move on to a Frequently Asked Question from the Codecademy community.
02:15 - Before we move on, let's look at one of the frequently asked questions for this exercise.
02:19 - You can find these in the community forum section under the instructions.
02:24 - A commonly asked question is, "Are decisions 
in Control Flow required to be binary? Do they have to be only yes or only no?"
02:33 - The answer is yes. In Control Flow for a program, the decisions must be made from only yes or no answers.
02:39 - Typically represented by true or false values.
02:43 - If, for example, we need python to answer a question like: is my name Chris, we'll use true and false values to do so.
02:51 - These are called Boolean Expressions which we'll be covering in the next exercise.
02:56 - Number two: Boolean Expressions.
02:59 - In this exercise, we'll talk about what a Boolean Expression is and what does and doesn't qualify as a Boolean expression.
03:07 - So, what is a Boolean Expression? A Boolean Expression is a statement, which has an objectively yes or no answer.
03:15 - In Python, this is represented by a true or false value.
03:20 - Boolean Expressions cannot be subjective 
statements such as opinions.
03:25 - Let's take a look at some statements on the right to determine whether they are Boolean expressions or not.
03:32 - The statement "today is a weekday" is a Boolean 
Expression since depending on the day it will return either true or false.
03:41 - The next example is 
the statement "Sunday starts with the letter C".
03:47 - This is also a Boolean expression since, although it is always false, it has an objective yes or no answer.
03:55 - The last example is the statement 
"Friday is the best day of the week".
03:59 - This is not a Boolean Expression since the answer varies depending on who's answering the question.
04:05 - There's no way to prove that Friday is the best day of the week.
04:09 - Being able to determine whether something is a Boolean Expression or not enables us to write effective control flow in our python programs.
04:16 - This is because programming languages don't inherently know how to handle values that aren't concrete like true or false.
04:23 - Now, let's practice Boolean Expressions by 
tackling the instructions portion of this exercise.
04:28 - The instructions ask us to answer whether or not each of these statements is a Boolean Expression.
04:34 - For statement one, we have "dogs are mammals". This is a Boolean Expression
04:39 - since it has an objective yes or no answer and it's not an opinion.
04:42 - Dogs are classified as mammals, so we'll write yes.
04:47 - For statement two, we have "my dog is named Pavel." Again, this is a Boolean Expression,
04:54 - since the dog's name either is or isn't Pavel. So, it has an explicit yes or no answer. So, we'll write yes, again.
05:04 - Statement three is "dogs make the best pets."  
05:07 - This is not a Boolean Expression, since it's 
an opinionated statement.
05:11 - The answer varies from person to person, and so, we can't assign a consistent true or false value. So, we'll write no.
05:19 - Finally, the last statement is "cats are 
female dogs."
05:24 - Although this is a false statement, it is a Boolean Expression since it has an objective yes or no answer.
05:29 - In this case, the answer will always be no, but 
it is a Boolean Expression so we'll write yes.
05:37 - And now, let's hit run.
05:42 - And we can see that we pass the test. Before we move on let's look at one of the frequently asked questions for this exercise.
05:50 - A commonly asked question by Codecademy users is
05:53 - can Boolean Expressions be combined into a longer expression.
05:57 - The answer to this is yes. Boolean Expressions can be combined using Boolean operators which we'll learn about later in the lesson.
06:04 - Some common Boolean operators are and, or, and not.
06:08 - Exercise number three: relational operators part one.
06:12 - In this exercise, we'll learn about two frequently used relational operators in Python and what they accomplish.
06:19 - Let's first start with defining relational operators.
06:24 - Relational operators are used to compare 
two items together.
06:28 - They return a true or false value depending on the result. Because of this, they are also known as comparators.
06:36 - Two of the main relational operators are equals and not equals.
06:42 - These use double equal signs and an 
exclamation point followed by an equal sign.
06:48 - One of the common use cases is not only to compare values, but also to compare data types.
06:54 - Double equals will test if the data types 
are the same, then if the values are the same.
07:00 - Let's take a look at some examples on the right.
07:04 - First we have one double equals one, which 
returns true since the values are the same.
07:10 - Next is two is not equal to four. This returns true 
since two is indeed not equal to four.
07:18 - Then we have three double equals five. This returns false since they are not equal, so the expression is not true.
07:26 - Finally, we have the string seven double equals the number seven.
07:30 - This returns false, since the data types are not 
the same.
07:34 - Now, let's switch over to the lesson and go over the instructions portion of the exercise.
07:38 - The instructions for this exercise ask us to set each variable to true or false depending on the results of the Boolean Expressions.
07:46 - For each of these Boolean Expressions, we can solve each side separately, then compare the two answers.
07:51 - Let's start with statement one.
07:54 - First, we take a look inside the parentheses since it has the highest order of operations.
07:59 - Five times two is ten, then minus one is nine, and on the other side we also have nine.
08:05 - Now we'll use the relational operator double equals to compare the two values.
08:10 - Since they're the same, true will be returned.
So, let's set statement one equal to true.
08:18 - Next for statement two, we have a similar situation, but this time we're using the not equals operator.
08:25 - If we do the math, the left side of the not equals 
operator is seven and the right side we also get seven.
08:31 - Now, we compare the two values using the not equals relational operator and this will return false, since 7 and 7 are actually equal.
08:40 - This is the same as asking is seven not equal to seven?
08:44 - The answer is no or false, so let's set statement two to false.
08:51 - Finally, for statement three, if we did the math 
we get 3 on the left side and 3 on the right side.
08:58 - Because of this, when using the double 
equals operator true will be returned.
09:03 - So, let's set statement 3 to equal true and we'll hit run.
09:10 - And we can see that you passed the test. Before we move on, let's look at one of the frequently asked questions for this exercise   
09:17 - One commonly asked question for this exercise is, "in Python what is the difference between equals and double equals?"
09:24 - That's a great question. In Python, a single equal sign is called the assignment operator and is used when storing data in variables,
09:32 - like in the exercise, when we assign statements 
one two and three to be true or false.
09:38 - On the other hand, double equals is a relational 
operator used to compare two items.
09:43 - Like when we were comparing the results of the expressions in the exercise.
09:47 - So, in essence, both the single equals and double equals operators serve different purposes.
09:52 - Exercise number four: Boolean Variables.
09:56 - In this exercise, we'll explore the difference 
between regular variables and Boolean Variables.
10:03 - So, what are Boolean Variables?
10:05 - Well, they aren't much different from regular variables, except for containing data with the data type of Bool.
10:12 - And the only values of the Bool data type are true and false.
10:16 - So, to create a Boolean variable we can either 
assign true or false to the variable directly
10:22 - or we can assign something that will return a 
true or false value, such as a Boolean expression.
10:28 - Let's take a look at some examples of this 
on the right.
10:32 - First, we have two variables one called set to true and one called set to false.
10:37 - These are assigned with Boolean values, directly.
10:41 - Next, we have a variable called bool_one. This variable is assigned a Boolean expression, which will return either a true or false value.
10:50 - In this case, we have 5 is not equal to 7, which will return true. So, bool_one will contain the value of true.
10:59 - Then we have bool_two. This is a sign the Boolean expression one plus one is not equal to two.
11:06 - bool_two will contain the value of false, since one plus one is equal to two.
11:12 - Finally, we have bool_three is equal to three times three double equals nine.
11:17 - The Boolean expression will return true since 3 times 3 is equal to nine and the result is stored in bool_three.
11:25 - All right, now that we've covered the basics 
of Boolean variables, let's go through the instructions for this exercise.
11:31 - The first instruction for this exercise asks us to create a variable named my baby Bool and to assign it to the string true.
11:39 - So, let's write that in the code editor. We'll have my underscore baby underscore bool equals true and we'll hit run.
11:53 - So, we pass the test, but did we actually create Boolean variable.
11:57 - Let's find out in the next part. For the next 
instruction, we need to print out the data type of my_baby_bool
12:03 - using two functions: the type function and the print function.
12:08 - If we click the link in the instructions we will be taken to Codecademy docs.
12:15 - Codecademy docs is Codecademy's beginner friendly and community driven collection of code documentation
12:20 - for popular programming languages and frameworks, like python.
12:24 - On this page, we can read all about python functions, including the type function.
12:30 - We'll learn more about functions in later parts of the course, but for now, the important thing to remember is that the type function  
12:36 - is used similarly to the print function in the code,
12:39 - except type will allow us to see the data type of a specific value or variable. Let's return to the instructions and see how.
12:52 - So, let's write print and type of my_baby_bool.
13:03 - And let it run.
13:06 - When we hit run, the data type Str is printed in the console for string.
13:12 - This is because we created a string containing the text true and not the actual bool data type value of true.
13:18 -  For the third instruction, let's fix this.
13:22 - Let's create a new variable called my_baby_bool_two and assign it to the value of true.
13:30 - So, we'll have my_baby_bool_two equals true.
13:37 - This time, we'll use the Boolean data type value of true instead of a string. And we'll hit run.
13:47 - And finally, for the last instruction, we need to 
repeat the steps of printing out the type of my_baby_bool_two.
13:55 - So, similarly to before, we'll have print and type and my_baby_bool_two.
14:07 - And we'll hit run.
14:11 - Notice how bool is now printed in the console. This is because we assigned my_baby_bool_two with the bool data type value of true,
14:19 - instead of a string containing the text true.
14:22 - Before we move on, let's look at one of the 
frequently asked questions for this exercise.
14:27 - One commonly asked question by Codecademy 
users is "can True and False be used as normal variable names?"
14:33 - The answer to this is no. True and False with capital first letters are reserved words known as keywords,
14:40 - they represent the two values supported by the bool data type.
14:44 - If you were to use true and false with lowercase letters, then, technically, they would be valid variable names.
14:50 - But doing so isn't recommended since it might be easily confused for Boolean values by others reading the code.
14:56 - Exercise number five: If Statements.
15:00 - In this exercise, we'll finally start to build 
control flow into our python programs.
15:05 - We'll start by learning about the python if statement and how it works with conditional statements.
15:11 - So, what does an if statement do? An if statement is the coded form of a conditional statement.
15:18 - Conditional statements allow us to make 
decisions in our code, thus creating control flow.
15:24 - If statements use Boolean Expressions to determine if certain portions of code should be executed or not.
15:30 - So, if something is true python will 
execute some code, if it's false then it won't.
15:37 - The syntax is the following structure: we'll use the if keyword
15:42 - followed by a condition, which determines 
if we should execute the code or not,
15:47 - a colon character to tell python to execute 
the following code if the condition was met,
15:53 - then the indented code to execute. It must be 
indented because this tells python that it's part of the if statement.
15:59 - rather than the code outside of it. 
Let's take a look at an example on the right.
16:05 - Say we have a conditional statement written in 
a sentence format: if it is raining then bring an umbrella.
16:12 - Within this conditional statement, we can extract the Boolean expression "it is raining" which will return true or false.
16:21 - In our example, this can take the form of a variable called "is raining". Let's assume it was set to "true" earlier in the code.
16:28 - Next, if we wanted to use this conditional statement to replicate the logic in the sentence,
16:33 - we can use the if keyword with the Boolean expression defined by "it is raining".
16:38 - We can then set the control flow to print out the 
phrase "bring an umbrella".
16:43 - So, if it is raining, then we need to bring an umbrella. We've successfully transformed the sentence into python control flow.
16:51 - Remember, the indentation inside of an if statement is important.
16:54 - If the code below is not indented, it will not be properly executed. Now, let's move on to the instructions for this exercise.
17:02 - For the first task of this exercise, we are asked 
to assign any string to the variable username.
17:08 - This program will check the username variable 
and run some control flow depending on the value.
17:13 - In this case, we're creating a program to keep a co-worker off our computer.
17:17 - Let's go ahead and use the string Dave.
17:23 - And we'll hit run. When we hit run, we'll see an error come up, but the instruction will be checked off as correct.
17:31 - Not to worry, we'll fix the error in the next step.
17:36 - The next task asks us to debug the program to 
fix the error we're seeing in the console.
17:42 - When looking at the console, we see there's a syntax error and python is pointing us to the equal sign.
17:49 - This is because a single equal sign is the 
assignment operator and not a comparison operator.
17:54 - So, python is confused because, as we learned 
earlier, the if keyword required a condition to come after it.
18:00 - In this case, username equals Dave is not a condition because of the single equal sign.
18:07 - To fix the error, we'll need to add an additional equal sign so that we're using the comparison operator
18:13 - and it becomes a Boolean expression. So, let's add that in here.
18:20 - Let's hit run again and see what happens. Now, 
python is able to reach the print statement  
18:27 - since the Boolean expression returns true because username was assigned Dave earlier in the code.
18:33 - For the last task, we're updating the program to 
stop our co-worker from accessing our computer using a different name.
18:39 - We need to start by updating the username to equal angela_catlady_87  
18:45 - So, let's go ahead and make that change.
18:52 - Now, we need to add a second if statement, which will print a different message if username is equal to angela_catlady_87.
18:59 - This way we can catch our co-worker if they use either username.
19:04 - First, we need to make sure that we're not indented from the first if statement,
19:09 - then we use the keyword if and we provide the condition. In this case it's username double equals angela_catlady_87.
19:25 - And, after the Boolean expression, we use the 
colon character and move to the next line.
19:30 - And here we need to make sure it's indented, since this is the code which will execute
19:34 - for the Boolean expression in the if statement is true.
19:38 - And here, we'll have a print statement which prints, "I know it is you, Dave, go away." So, let's add that in.
19:55 - Now, let's hit run see what happens.
20:00 - Our second if statement worked and we 
have our custom message in the console.
20:04 - Looks like we secured our computer.
20:06 -  If we scroll down, we can see there are a couple of community questions but they're not in the scope of this lesson.
20:12 - We'll move on without going through a community question, but feel free to click on these and go through them yourself.
20:18 - Exercise number six: Relational Operators part two.
20:22 - In this exercise, we'll learn about some more commonly used relational operators in Python.
20:29 - There are several more common relational operators that we can use.
20:33 - For testing if one item is greater than another, we use the right angle bracket.
20:39 - For checking if something is greater than or equal to something else,
20:42 - we'll use the right angle bracket followed by an equal sign.
20:46 - The same applies for checking if something is less than. We can use the left angle bracket.
20:52 - And checking less than or equal to uses the 
left angle bracket followed by an equal sign.
20:58 - All of these relational operators return true 
or false. Let's look at the example on the right.
21:05 - Inside of our if statement, the condition is a 
Boolean expression which tests if age is less than or equal to 13.
21:13 - If this condition is true, then the message will be printed out.
21:17 - Now that we've reviewed the basics of some additional relational operators, let's take a look at the instructions for the exercise.
21:24 - For the first task, we're asked to create an if statement for checking if the variables X and Y are equal.
21:30 - If they are, then we need to print out "these numbers are the same."
21:35 - To do this, we use the if keyword followed by a 
Boolean expression for checking if x is equal to y.
21:43 - We'll use the double equals relational 
operator to test if x double equals y.
21:50 - Afterwards, we use the colon character to tell 
python that the indented code under the if statement definition
21:56 - will be executed if the condition is true.
22:00 - Inside of the if statement, we'll add a call to the print function with the message "these numbers are the same."
22:12 - Let's hit run and see what happens.
22:17 - Looks like the code worked. Since the two variables have the same value, the message is printed.
22:27 - For the second task, we're asked to check if a student has enough  
22:30 - credits to graduate based on a variable called "credits."
22:36 - Here, we can create another if statement but this time the Boolean expression will test if the number of
22:41 - credits is greater than or equal to 120,
22:44 - since a student could earn more than 120 credits.
22:48 - So, we'll have if credits is greater than or 
equal to or 120. Then I'll use the colon character  
22:58 - and inside of the if statement, we'll have print 
the message "you have enough credits to graduate."
23:14 - And when we run our code, looks like we have enough credits.
23:17 - Before we move on, let's look at one of the frequently asked questions for this exercise.
23:22 - One commonly asked question by Codecademy users is,
23:25 - can relational operators be applied to values other than numbers? The answer to this is yes.
23:31 - Relational operators can be applied to many different items including variables strings and other
23:36 - data structures, which you'll learn about later on. 
Each data type has its own rules for comparison.
23:42 - Let's take a look at an example. Back in 
our code, let's try a couple of examples.
23:47 - Let's use a print statement and inside, let's try 
comparing a is less than b. Let's see what happens.
23:59 - When we hit run, we can see true is printed to the console.
24:04 - Let's also try that with some symbols.
Print dollar sign is greater than ampersand.
24:18 - When we hit run, we can see false is printed. So, these characters are being compared
24:23 - and that's because each character has a numerical representation in the background, which is used to determine the order.
24:29 - As you start writing programs with control flow, you'll start to discover the different conditional rules for different data types.
24:36 - Exercise number seven: Boolean operators and.
24:41 - In this exercise, we'll learn what Boolean operators are and be introduced to the first one called and.
24:49 - So, what exactly are Boolean operators?
24:53 - Boolean operators combine multiple Boolean expressions together to return one true or false answer.
25:00 - The three main ones which we'll be looking 
at in this lesson are and, or, and not.
25:06 - They're also known as logical operators. In this 
exercise, we're exploring the and Boolean operator.
25:15 - The and Boolean operator returns true if both 
Boolean expressions on either side of it are true.
25:23 - If either Boolean expression is false then the whole result is false.
25:28 - Let's take a look at a few examples on the right.
25:32 - First, we have one plus one equals two and two plus two equals four.
25:38 - The left and right side of the and operator are both true.
25:42 - Since we're using the and operator and both sides are true, the whole expression will return true.
25:49 - Next, we have 1 is greater than 9 and 5 is not 
equal to 6.
25:55 - In this example, even though the right side of the Boolean operator is true, the left side is false, so the whole expression becomes false.
26:04 - Then we have one plus one equals two and two is less than one.
26:09 - Since the right side of the and operator is false, the whole expression is false.
26:15 - Finally, we have zero equals ten and one plus one equals one.
26:20 - Since both sides are false, the whole expression will return false. All right now, let's take a look at the instructions for this exercise.
26:28 - For the first task, we need to determine 
the answers for statement one and two.
26:34 - For statement one, we can evaluate the left side using two plus two plus two which gives us six,
26:40 - and that's greater than or equal to six, so the left side is true.
26:44 - And on the right side, we have negative one times negative one, which gives us one is less than zero,
26:50 - and that's false since one is not less than 
zero, and since one of the sides is false
26:55 - in the case of the and Boolean operator, the whole statement becomes false. So, for statement one we'll write false.
27:05 - Next, we look at statement two. For this statement, on the left side of the expression,
27:10 - we have 8 is less than or equal to 8 and 6 is equal to 6.  
27:17 - Since both sides of the expression are 
true, the whole expression becomes true.
27:25 - Now, let's hit run.
27:30 - And we got it right.
27:33 - In task two, we'll need to create an expression that prints a string if the GPA variable is greater than or equal to 2.0
27:42 - and the credits are greater than or equal to 120.  
27:45 - In script.pi we already have an if statement that checks the latter.
27:51 - Let's add the second Boolean expression 
and combine it using the and operator.
27:57 - So, here we'll write and, and then GPA is greater than or equal to 2.0.
28:07 - Now, we'll run the code and see what happens.
28:11 - As we can see in the console, since both 
conditions are met the message was printed out.
28:16 - Exercise number eight: Boolean operators (or)  
28:21 - In this exercise, we'll learn about another Boolean operator called or
28:26 - So, what does or do? Similar to the and operator, the or operator has specific conditions it must meet to return true or false.
28:36 - The or operator returns true if either Boolean 
expression on each side is true or if both Boolean expressions are true.
28:44 - It will only return false if both Boolean expressions on both sides are false.
28:50 - Let's take a look at some examples on the right. First, we have true or 3 plus 4 equals 7.
28:59 - Since both sides of the or Boolean operator 
are true, the whole expression returns true.
29:05 - Next, we have 1 minus 1 equals 0, or false. The left side of the or operator is true but the right side is false.
29:14 - Since only one side has to be true, the whole expression returns true.
29:20 - Then we have 2 is less than zero or true. Since the right side is true the whole expression becomes true.
29:27 - Finally, we have 3 equals 8 or 3 is greater than 4. 
29:32 - In this case, both sides are false, so the whole expression becomes false.
29:37 - Now, let's go through the instructions for this exercise.
29:40 - Similarly to the previous exercise, the first task asks us to solve two Boolean expressions and assign the results in two variables.
29:49 - For statement one, the left side of the Boolean operator is one is greater than three, so false.
29:56 - And the right side is negative 10 equals 
negative 10, so true.
30:01 - Since at least one side is true, the Boolean operator or returns true. So, let's assign true to the variable statement one.
30:12 - For statement two, the left side of the Boolean 
operator is 14 is less than or equal to 15, so true.
30:20 - And the right side is 7 is not equal to 7, so false.
30:25 - Since at least one side is true, the whole statement comes true, so let's assign true to statement two, as well.
30:35 - And we'll hit run.
30:39 - Looks like we got it right.
30:42 - The next task asks us to rewrite the if statement from the last exercise but with different conditions.
30:48 - We need to print a message if we have either 120 or more credits or a GPA of 2.0 or higher.
30:56 - Let's start with the if keyword followed by our Boolean expressions.
31:01 - Our Boolean expressions will be, "if credits is 
greater than or equal to 120 or GPA is greater than or equal to 2.0".
31:16 - Next, we'll use the colon character and indented below the if statement,
31:21 - we'll add a print function, which displays, 
"you have met at least one of the requirements".
31:28 - So, we'll add that in here.
31:41 - And now we'll hit run again and see what happens.
31:46 - Since the GPA was high enough, the code 
inside of the if statement is reached.
31:51 - Only one of the Boolean expressions needed to 
be true, since we used the or Boolean operator.
31:56 - Before we move on, let's look at one of the 
frequently asked questions for this exercise.
32:00 - A commonly asked question by Codecademy users is: "when comparing one value against multiple values can we separate each value with or?"
32:10 - The answer to this is no. In Python, you cannot separate each  
32:14 - value with the or operator, since it would cause 
a logical problem due to the order of operations.
32:19 - It would, technically, not cause an error, but 
it would not perform as expected. Let's take a look at what this means.
32:26 - Back in our code, let's print the result of GPA equals 2.5 or 2.0 or 1.5.
32:38 - When we run the code, 2.0 gets printed to 
the console.
32:43 - So, what's happening? In Python, non-zero numbers are considered truthy values or values which act like a true Boolean value.
32:53 - Because of this, when Python reads the Boolean 
expression, it starts from left to right
32:58 - and returns the first instance of a true, or truthy 
enough, value.
33:03 - Since we're using the or Boolean operator, it can return that value immediately, since Python doesn't care about the rest.
33:10 - It knows that the result will be true already. 
33:13 - If we used and, it would have to look through the whole set of Boolean expressions.
33:18 - Since the first Boolean expression, GPA equals 2.5, is false, 
33:24 - Python moves to the next Boolean expression, which in this case, is just a value 2.0.
33:30 - Because 2.0 is considered a truthy value, it gets returned and we can see 2.0 in the console.
33:37 - The last Boolean expression is ignored since we're using the or Boolean operator.
33:42 - Exercise number nine: Boolean operators (not)  
33:46 - In this exercise, we'll learn what not does and how to use it with Boolean expressions.
33:53 - So, what does the not operator do? The not Boolean operator flips the result of a Boolean expression  
34:01 - If the result would have been true, then false is returned. Otherwise, if false would have been returned then true is returned instead.
34:09 - Let's look at some examples on the right.
34:13 - First, we have not 1 plus 1 equals two. Since the Boolean expression on the right side would normally be true,
34:20 - the not operator flips this and the whole expression returns false.
34:25 - Next, we have not 7 is less than 0.
34:28 - The expression on the right side would normally be false, but the not operator flips the result to be true. Great.
34:35 - Now, let's go through the instructions for this exercise. Just like before, the first instruction asks us to solve two statements
34:42 - and store the results into statement one and 
statement two.  
34:47 - For the first Boolean expression, we have 5 plus 4 is 9 which is less than or equal to 9,
34:53 - which normally would be true, but we have the Boolean operator, not, which flips the result, so statement one will equal false.
35:04 - For statement two, we have 8 times 2 is 16
35:08 - not equal to 20 minus 4, which is 16.
35:12 - So, normally this would be false, but the Boolean operator not flips that and statement two becomes true.
35:22 - Let's hit run.
35:26 - We got it right.
35:29 - The second task asks us to write three if statements using the not Boolean operator In reference to the college program we wrote earlier.
35:38 - The first case says, if credits is not greater than or equal to 120, it should print, "you do not have enough credits to graduate."
35:47 - So, let's write that. We'll start with if and 
not credits is greater than or equal so 120.  
35:57 - Then, print "you do not have enough credits to graduate."
36:08 - Next, if their GPA is not greater than or equal to 2.0, it should print out this message.
36:15 - So, once again we'll have if not GPA is greater than or equal to 2.0
36:24 - and we'll print "your GPA is not high enough to graduate."
36:31 - And finally, if their credits is not 
greater than or equal to 120 and  
36:35 - their GPA is not greater than or equal 
to 2.0, it should print out this message.
36:42 - If not credits is greater than or equal to 120, and not GPA is greater than or equal to 2.0.
36:52 - And we'll print out "you do not meet either requirement to graduate" and let's say run to see the results.
37:04 - And we pass the instructions. We'll learn to better control the order of the conditional statements in the next two exercises.
37:12 - Before we move on, let's look at one of the frequently asked questions for this exercise.
37:16 - Codecademy users on the Forum have asked: "why does not true double equals false work yet true double equals not false doesn't?"
37:25 - Take a moment to pause the video and think about it.
37:28 - Let's switch over to the exercise and take 
a look together. First, let's print not true double equals false.
37:38 - When we hit run, true is printed to the console, like we'd expect.
37:45 - Now, let's modify it to say true double equals not false.
37:54 - Now, when we hit run, we get a syntax error in the console.
38:00 - This is due to the order of operations for Boolean and relational operators.
38:05 - The comparison operator double equals has higher precedence than the not Boolean operator, so it tries to execute first.
38:13 - This means that Python is actually executing 
the statement true double equals not.
38:20 - This is an invalid statement, so it fails.
38:23 - To fix this issue, we can use parentheses to force not false to execute first before the comparison takes place.
38:31 - Let's fix it and run the code again.
38:36 - So, we'll surround not false in parentheses and hit run.
38:41 - We can see that true is bring to the console.
38:45 - Exercise number 10: Else Statements
38:48 - In this exercise, we'll learn how to use else 
statements to improve our decision making.
38:54 - So, what does an else statement do? An else statement executes code when the conditions of an if statement are not met.
39:02 - It's placed below an if statement and also uses a colon with indented code below it.
39:08 - If the condition of the if statement is false and the code is skipped, then the else statements code will execute instead.
39:14 - For instance, let's look at an example on the right.
39:18 - We have, if age is greater than or 
equal to 13, then print access granted.
39:24 - But what if the age is less than 13?
39:27 - To handle this case we can use an else statement, which executes different code if the if statement's condition was not met.
39:33 - using this else statement: if our age is under 13,
39:37 - we will get a message saying "sorry you must be 13 or older to watch this movie."
39:42 - Now, let's move on to the instructions for 
this exercise to practice else statements.
39:46 - In this exercise, we are returning to our graduation program.
39:50 - The instructions ask us to add an else statement to the existing if statement.
39:54 - The current if statement covers the condition if a student qualifies for graduation,
39:59 - but if they don't qualify, nothing currently happens since the code is skipped.
40:04 - To fix this, we need to add an else statement below the if statement  
40:07 - and print out a message saying "you do not meet the requirements to graduate"
40:12 - So, below our if statement, let's type else and a colon and below that we'll have print then our message.
40:21 - "You do not meet the requirements to graduate."
40:31 - And now when we hit run, we can see our new message pop up since the GPA is too low.
40:40 - We've successfully controlled our logic to account for two situations.
40:44 - One for a graduating student and one for a student that shouldn't graduate.
40:48 - Before we move on, let's look at one of the frequently asked questions for this exercise.
40:53 - A frequently asked question by Codecademy users is: "Is it a good practice to include an else statement for every if statement?"
41:01 - The answer to this is no. It's not usually a good practice to have an else statement for every single if statement in your code.
41:08 - This is because it's not always necessary to include it.
41:11 - Python skips the code indented under an if statement if the condition is not met and sometimes that's enough.
41:17 - Including too many else statements can unnecessarily cause your code to be less optimized and more convoluted.
41:23 - They should only be used when you need something specific to happen
41:27 - if an else statement fails to execute due to its Boolean expression returning false.
41:31 - Exercise number 11: Else If Statements.
41:35 - In this exercise, we'll learn how to add extra conditions to if statements and better control the decision making in our program.
41:44 - So, what's the point of an else if statement, 
pronounced elif in terms of syntax,
41:48 - if we already have if and else statements? 
41:52 - Well, the else if statement allows us to perform additional checks if the initial if segment fails due to a false condition.
42:01 - Because of this, else if statements control 
the order of conditional statements.
42:06 - It forces only one of the statements to execute. 
Once one of the elif conditions is true and the indented code is executed,
42:14 - the rest of the conditions are skipped and python moves on.
42:18 - An else statement will only execute if none of the conditions from the if or else if segments were met.
42:25 - Let's take a look at an example on the right.
42:29 - Let's say we have a program accepting donations, but we want to print a custom message depending on the donation amount.
42:35 - We could write an initial if statement for an amount greater than or equal to a thousand, which gives customers Platinum Status.
42:42 - At this point, we could put an else statement but that would limit our control flow to only two options.
42:49 - Instead, say we wanted to create three levels of messages for donations of 1000, 500, and 100.
42:57 - We could do so using else if statements.
43:00 - Here we have two else if statements, which 
check for different donation amounts.
43:06 - Finally, there's an else statement, which will 
print a message about the bronze donor status.
43:11 - This message will only be printed if none of the previous conditions were met.
43:16 - Now that we've covered a bit of the basics of 
using else if, let's go through the instructions for this exercise.
43:21 - Let's return back to our program of upgrades at school.
43:24 - The instructions for this exercise ask us to create an if, elif, else statement to calculate the student's letter grades.
43:32 - If their grade is 90 or higher, we print A. For 80 or higher, we print B. For 70 or higher we print C. 60 or higher is D. Otherwise, it's F.
43:43 - So, we'll start with an if statement. So, if grade is greater than or equal to 90, the print letter A.
43:58 - Now, to test another condition, we use elif. So, elif grade is greater than or equal to 80,
44:12 - we print B. Now, we continue on. Elif grade is greater than or equal to 70.
44:26 - Print C.
44:31 - Elif grade is greater than or equal to 60.
44:38 - Print D.
44:41 - Otherwise, else print F.
44:50 - Now, when we hit run, we can see that B is printed to the console since the grade was an 86.  
44:57 - Let's try changing grade and see 
what happens. Let's change it to a 97.
45:05 - And we get an A.
45:08 - How about a 62. Get a D, and a 30 is an 
F. So, our program is working properly.
45:20 - Before we move on, let's look at one of the 
frequently asked questions for this exercise.
45:25 - A commonly asked question by Codecademy users is "in Python, is there a limit to the number of elif statements that are allowed?"
45:32 - This is a great question. There is no limit to the number of elif statements but there must be one starting if statement.
45:39 - Also, there can only be one else statement at the end of all of the elif statements, but having an else statement is not required.
45:47 - While there is no limit, you do want to consider how long your control flow gets.
45:51 - The longer it gets, the harder it becomes 
to read for yourself and other developers.
45:56 - Exercise Number 12: Review.
45:59 - We've made it to the end of the lesson.
46:01 - In this exercise, we'll briefly touch on each of 
the topics we went over throughout this lesson.
46:08 - Throughout the lesson, we talked about Boolean 
expressions and how they return true or false values.
46:14 - We discussed relational operators and how they're used to compare items together.
46:20 - Remember that the most common relational 
operators are equals, not equals,
46:24 - greater than, greater than or equal to, less 
than, and less than or equal to.
46:30 - We went over Boolean variables and how they store the Bool data type consisting of true or false.
46:37 - We talked about Boolean operators and how 
they combine Boolean expressions together  
46:42 - The three we talked about are and, or, and not, 
but there are others you'll learn about, as well.
46:50 - Finally, we went over if, else, and elif statements and learned how powerful they are for controlling decision making in a program.
46:58 - Let's look at a final example on the right.
47:02 - This example combines many of the topics we 
learned about to create complex control flow in a program.
47:08 - If the lesson is complete and or on the review exercise, then for now you finished the lesson.
47:15 - Otherwise, if the exercise is review, but the lesson is not complete, then print out that you missed an exercise.
47:22 - Finally, if neither of those conditions were met, then for now let's continue the lesson.
47:28 - Now, let's wrap up the lesson by going over 
the instructions for the last exercise.
47:32 - The instructions for the review exercise ask us to write a program which will calculate the weight of a person based on the planet they're on.
47:40 - We're given a data table, which includes the relative gravity for each planet, as well as the ID number for each planet.
47:48 - The data we're provided within the program is the weight variable and the planet variable, which contains the planet ID.
47:55 - We can use if and elif statements to check which planet ID is being used in order to calculate the correct weight.
48:01 - So, let's start with planet ID 1. We'll have if planet equals one, then
48:12 - weight equals weight times our relative gravity 
for Planet 1, which is Venus, and that's 0.91.
48:24 - Now, for another condition we use elif
48:28 - planet equals two, we'll have weight equals weight times 0.38.
48:42 - Now, we can repeat this for planet three.
48:49 - Weight equals weight times on Jupiter is 2.34.
48:57 - And keep going on.
49:10 - Now, for planet five.
49:22 - Then, finally, planet six.
49:32 - That's 1.19.
49:37 - Finally, we'll add a print statement to display the 
weight. We need to make sure it's outside our if statement.
49:49 - Now, when we hit run, we can see a new weight is printed to the console.
49:56 - So, let's go ahead and change the planet. Let's try planet number one.
50:03 - You can see that our weight changes, and let's try planet six.
50:11 - So, our weight changes based on whichever planet we're on.
50:15 - Now, you may be wondering why we didn't just use a bunch of if statements,
50:18 - since the ID will never be two different IDs at the 
same time, and there won't be any overlapping.
50:24 - This is because Python skips the rest of the elif statements if one of them executes.
50:28 - This saves computational time and prevents Python from checking every individual if statement.
50:34 - That about wraps it up for this lesson.
50:36 - Thank you for watching this video and we hope you enjoyed learning about the basics of control flow in Python 3.  
50:42 - If you have any more questions or want to get 
involved with the Codecademy community,
50:46 - head over to the Codecademy forums or join our Discord server. See you next time and happy coding!