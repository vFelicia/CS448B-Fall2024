00:01 - okay hey everybody I'm Patrick welcome
00:05 - to the live stream
00:06 - I'm very excited to be here today we're
00:08 - gonna be talking about acing the coding
00:10 - interview it's a topic it's very
00:11 - exciting especially in the new year
00:13 - you're thinking about making a change in
00:14 - your life maybe you want to get your
00:16 - first job as developer maybe you want to
00:18 - change jobs either way I'm going to talk
00:20 - through some tips and strategies today
00:22 - that will hopefully help you in your job
00:24 - search so for today I want to break this
00:26 - down into two parts for the first half
00:28 - or maybe first quarter I want to give
00:31 - you a broad overview of what you can
00:32 - expect if you've never applied for a job
00:34 - as a programmer it's a little bit
00:36 - different than another job application
00:37 - so I'll talk a little bit about what to
00:39 - expect as you progress through that
00:41 - process and then for the bulk of the
00:43 - livestream we'll work through a problem
00:45 - some strategies about how to solve that
00:47 - problem and maybe work towards like an
00:49 - optimized solution if we have time cool
00:51 - all along the way as always if you have
00:54 - questions or comments things that you're
00:55 - curious about please put them in the
00:58 - chat we're always looking at it and I'll
01:00 - try to keep it as interactive as
01:01 - possible I'm definitely gonna throw some
01:02 - questions to you during the stream so be
01:05 - on your tippy toes
01:06 - cool so to start applying for a job as a
01:10 - developer you know there is the caveat
01:13 - that applying for a job as a developer
01:15 - is like applying for a job in the sense
01:17 - that you want to present your best self
01:19 - you want to polish your resume you want
01:22 - to make sure it doesn't have any typos
01:23 - any of that but the first step of trying
01:26 - to get a job as a developer is
01:27 - unsurprisingly going to be applying
01:30 - right you're going to be looking on your
01:32 - job board and you're gonna see an
01:34 - opening for a web developer a software
01:36 - developer and you're gonna send them
01:38 - your resume a slight addendum to this
01:42 - that I'm going to recommend is if you
01:44 - can do it try to get some kind of
01:47 - referral I know if I spell that right so
01:50 - what this means is you know someone at
01:52 - the company maybe it's a friend they
01:54 - don't necessarily have to be a developer
01:56 - just someone at the company who can
01:58 - vouch for your character your work ethic
01:59 - that's really going to help you get a
02:01 - response
02:02 - so this first phase is probably gonna be
02:05 - the highest number you might may be
02:07 - applying to a lot of different jobs but
02:10 - a referral can really help increase your
02:12 - odds of success in hearing
02:13 - back from someone so after you sent out
02:16 - your job application usually the first
02:18 - step is going to be some kind of a phone
02:20 - screen so the phone screen can take a
02:24 - couple different forms maybe you'll be
02:26 - speaking with a recruiter so this is
02:27 - someone whose job it is to vet and
02:30 - evaluate candidates and guide them
02:32 - through the process at the company
02:33 - usually those types of phone screens are
02:36 - non-technical meaning you're not going
02:39 - to be evaluated on your ability to
02:40 - program it's more about who you are
02:42 - what's your background why are you
02:44 - interested in the company maybe what do
02:46 - you know about the company the domain it
02:48 - operates in that kind of thing
02:51 - there are also phone screens that are
02:54 - going to be technical and these will
02:55 - usually follow a non-technical phone
02:57 - screen so in a technical phone screen
03:00 - that's when you will be paired up with
03:02 - an engineer at the company and there'll
03:03 - be a value awaiting your ability to do
03:05 - the job of a programmer so you may be
03:09 - doing a shared screen exercise where
03:11 - you're typing into an editor where the
03:13 - engineer can see it on the other end of
03:14 - the line and they're asking you a
03:16 - question and you're writing out some
03:17 - code to solve that question a lot of
03:19 - companies will vet this out to a
03:21 - third-party service like carat or triple
03:23 - byte and it's a very similar idea where
03:26 - you're logging onto a platform they're
03:27 - giving you a question maybe they're
03:29 - giving you some inputs you're writing
03:31 - code to solve it that will like output a
03:34 - solution to the problem another sort of
03:38 - thing that will come up at this phase is
03:40 - a take home challenge so I'll write that
03:43 - out call it take home now a take home
03:48 - challenge is going to be a little bit
03:49 - different whereas with a technical phone
03:52 - screen you're talking to the engineer so
03:54 - there is a time element involved with it
03:57 - and a take home challenge they're giving
03:59 - you a prompt or maybe a package of files
04:01 - and that prompt is saying we would like
04:03 - you to build you know say a website that
04:05 - can upload photos and display them or a
04:08 - to-do application something to that
04:10 - effect and you are able to build this
04:13 - application in your own environment
04:15 - somewhat on your own time usually
04:17 - they'll give you an expectation of maybe
04:19 - three to five days but the take-home is
04:21 - trying to replicate less pressure on you
04:25 - less time intensive
04:26 - pressure whereas a technical phone
04:27 - screen you're really right in the moment
04:29 - you're given about 45 minutes to solve
04:31 - that problem
04:32 - cool so assuming you do well in these
04:35 - steps that's when you move to your on
04:38 - site and the on site is when you're
04:41 - actually coming in person to the company
04:42 - it's a very exciting moment because you
04:44 - passed a few hurdles at this point and
04:46 - this is where you're coming in person
04:47 - you're greeting people and the on site
04:50 - will have several different aspects to
04:52 - it usually a lot of on sites are all-day
04:55 - affairs or half-day affairs so it can be
04:57 - somewhat of a marathon and the
05:00 - recommendation here is do your homework
05:01 - you know understand what kind of a
05:03 - company this is understand who it is
05:05 - they're looking for what types of things
05:07 - do they value so for example at a
05:09 - company like Codecademy we are looking
05:12 - for people who are very passionate about
05:13 - education and pedagogy and people who
05:16 - care about accessibility in education so
05:18 - those are things you qualities that
05:20 - we'll be looking for every company will
05:23 - be different obviously with the on-site
05:25 - usually you'll also be evaluated on your
05:28 - technical ability your ability to solve
05:29 - problems so there may be a situation
05:31 - where they're giving you a problem in
05:33 - front of a whiteboard and you're writing
05:34 - out the code which is what I'll be
05:36 - demonstrating later in the live stream
05:38 - there may also be on sites where you're
05:41 - pairing with a engineer on a computer so
05:43 - you're both sitting at a computer
05:44 - together and talking through the problem
05:47 - maybe you're working on code that the
05:48 - company actually has in production
05:50 - something to that effect so this is a
05:53 - pretty high level it's difficult to get
05:55 - a very very specific advice because
05:57 - every company is different but these
05:59 - steps are pretty much always going to be
06:01 - present you're gonna have to apply or be
06:03 - referred there's gonna be some sort of
06:04 - screening process which is sort of like
06:06 - an introductory are you a crazy person
06:08 - are you saying who you you know are you
06:10 - the person that we were looking for in
06:11 - this company and then the on-site which
06:14 - is a little bit more a little bit more
06:16 - of an effort you're coming on-site we're
06:18 - meeting you probably getting lunch or
06:19 - something like that
06:20 - I'm cool any questions about that again
06:26 - fairly high level so one question we got
06:32 - is as I've heard it's a red it's worth
06:34 - working through project Euler so this is
06:37 - a website of which there are many
06:39 - provides you with problems that you'll
06:41 - try to solve in the coding language of
06:42 - your choice practice always a good thing
06:45 - you can never it'll never be a bad thing
06:47 - to practice these problems project Euler
06:49 - is a little more math focused so if
06:51 - that's a domain that you're not as
06:53 - comfortable in don't be discouraged not
06:55 - every company is going to expect you to
06:57 - have that sort of understanding but it
07:00 - is a great great site to practice on
07:02 - we'll move on now to the actual problem
07:05 - and what I'm gonna do is kind of play
07:08 - both sides of the coins so what I mean
07:10 - by that is I'll take the place of the
07:12 - interviewer what they may say what they
07:14 - may ask of you and I'll also act as the
07:16 - interviewee and what you can do as an
07:18 - interviewee to help increase your odds
07:19 - of being hired cool so one sort of
07:26 - overarching piece of advice I'm going to
07:28 - give is ultimately even when you're
07:32 - being evaluated on your ability to code
07:34 - the most important thing is do the
07:36 - people that are in the room with you or
07:38 - on the phone with you do they feel like
07:39 - you're someone they like to see every
07:41 - day at work and work with are you a
07:43 - collaborative person are you a person
07:45 - who communicates well do you listen to
07:47 - the things that they say do you
07:49 - incorporate the things that they say
07:51 - into your decisions and thoughts those
07:53 - are the types of characteristics that
07:55 - are appealing to an employer if you're
07:58 - someone who is very very shy this can be
08:00 - kind of tough and it might feel a little
08:02 - bit like you're being grandiose or
08:06 - arrogant but this is really a time to
08:08 - shine
08:09 - think about the strengths you have as a
08:11 - person as and as an employee and that's
08:13 - what you're trying to like put forward
08:15 - great so without further ado what I the
08:20 - question I'm going to be posed is given
08:23 - an array you need to find the index
08:26 - where the sum of all values to the left
08:28 - of that index equal the sum of all
08:31 - values to the right of that index that's
08:34 - our question so the first thing whenever
08:37 - I'm asked a question in a technical
08:38 - interview is it's sort of like a deer in
08:41 - the headlights moment maybe and what I
08:43 - would always recommend is rephrasing the
08:44 - question and what this does is gives you
08:47 - a moment to breathe and it also helps
08:50 - iron out any misunderstandings
08:53 - so when I'm receiving this question I
08:55 - may say to myself okay what does that
08:57 - really mean what are they really looking
08:59 - for anything that I'm unsure about
09:01 - anything that's ambiguous those are the
09:03 - things I want to pose back to the any of
09:05 - your interviewer and make sure that
09:06 - we're on the same page working together
09:08 - so one thing that can be helpful
09:11 - especially if you're in a white boarding
09:12 - type of environment is start drawing out
09:15 - examples and say well if I have this
09:17 - type of an input I would get this output
09:19 - is that right is that what I'm looking
09:20 - for and that will help sort of begin
09:22 - this dialogue with the interviewer so if
09:25 - I'm looking for this we'll call it an
09:27 - equilibrium point in an array I'll pick
09:30 - maybe like a very basic example here of
09:34 - 1 0 & 1
09:38 - cool so given this input I would expect
09:43 - this to be the equilibrium point because
09:46 - if I look to the left of that index I'm
09:48 - seeing 1 and if I look to the right of
09:51 - that index I'm seeing another 1 1 equals
09:54 - 1 so this is kind of the moment where
09:57 - I'm starting to like flesh out what
09:58 - exactly are you looking for and there is
10:02 - a little bit of ambiguity here and so
10:04 - this is kind of a moment where I'll be
10:05 - like well are you looking for the value
10:09 - located at the equilibrium point are you
10:12 - looking for the index where the
10:13 - equilibrium point resides oh sorry
10:19 - switch into the black marker just a
10:22 - little tidbit about myself my favorite
10:23 - color is blue but it is not the easiest
10:26 - color to see so my apologies let me
10:28 - erase that I'll start over so just to
10:33 - kind of recap what I'm going to be
10:35 - looking for is the index so you know
10:41 - maybe that's an ambiguity that came up
10:43 - and I and I ironed it out with my
10:45 - interviewer I said well what I really
10:46 - want is that index so if this array is
10:50 - my input what I'm looking for is the
10:52 - index of 1 assuming a zero-based index
10:55 - so we have index 0 and X 1 and X 2 I
10:59 - would expect 1 to be returned I'm going
11:04 - to pose a question now back to you
11:06 - I feel like I've maybe a little bit
11:08 - scoped out this question but what are
11:10 - some other things that you feel are
11:11 - unclear or if I were to ask you to solve
11:14 - this question you would want to know to
11:16 - make sure like what are some other
11:17 - things that could come up what we call
11:20 - edge cases maybe that could arise and
11:23 - what what would be expected to be done
11:25 - in that kind of a case so
11:26 - I'll pose the question to you given this
11:29 - equilibrium point question what are some
11:31 - things you might want to consider
11:42 - I'll fill in one more while we're
11:45 - waiting so yes there is no equilibrium
11:47 - that's a great one so thank you rob tuck
11:50 - definitely really really really great
11:54 - observations so there may not be an
11:56 - equilibrium point and again just to
11:58 - illustrate this there's no harm but like
12:01 - let's say I have 0 7 7 so at this point
12:10 - I don't have an equilibrium point right
12:13 - so if I take my sum here there is no sum
12:16 - I have 14 I take my sum here I have 0
12:20 - and 7 I take my sum here I have 0 and 7
12:24 - so I'm never gonna reach an equilibrium
12:25 - point with this input so in this case I
12:30 - kind of have a conversation with my
12:31 - interviewer I'm like okay well I know
12:33 - that you'd like me to return an index if
12:35 - there is an equilibrium point if there
12:37 - isn't would you like me to return a
12:39 - boolean
12:39 - maybe non-nil depending on the language
12:42 - that you're working with maybe negative
12:43 - ones is sometimes used to indicate a
12:47 - sort of non index position so great job
12:51 - Rob Chuck that's a good one to ask I
12:52 - have another question for you is it
12:55 - possible that there are multiple
12:56 - equilibrium points so let's say for
13:00 - example we have negative 7 1 5 2
13:08 - [Music]
13:09 - negative 4 3 & 0
13:13 - ok cool so in this input we have an
13:18 - equilibrium point here where we have
13:21 - negative 1 and negative 1 and we also
13:25 - have an equilibrium point I think here
13:29 - where we have negative sorry here hmm
13:37 - let me do this really quick aha
13:40 - that'd be 1 and negative 1 maybe we
13:45 - don't have another equilibrium point I
13:46 - don't know do we see it I think there is
13:51 - another equilibrium point here but I
13:52 - don't like it stuck on this
13:54 - but in that type of a situation again
13:56 - it's a case we're going to be talking to
13:57 - the interviewer like do you want a
13:59 - single return would you like maybe an
14:00 - array of the indices in that case and I
14:03 - would work it out with the interviewer
14:04 - cool so in this case at this point I
14:08 - feel like we've sort of scoped out the
14:12 - like the breadth of the problem like
14:14 - what are we really looking for and now
14:16 - we can start getting into my strategy
14:18 - once I know what is expected of me now
14:20 - is the time for me to have a
14:21 - conversation about how I'm gonna go
14:23 - about achieving that so this is another
14:27 - part that may feel a little bit
14:29 - uncomfortable because you are sort of
14:31 - admitting to a certain extent that you
14:32 - may not have an idea in the moment of
14:34 - how to answer this question but that's
14:36 - okay
14:37 - the reality is working as a developer
14:38 - you're often in a state of not-knowing
14:41 - so in an interview setting it may feel
14:44 - really uncomfortable like you want to be
14:45 - the person that always has the answer
14:46 - that can immediately say oh you just do
14:48 - this but that's not very realistic so
14:51 - it's totally alright to talk through
14:53 - things if you have absolutely no idea
14:55 - and you're totally stuck even saying
14:58 - that to the interviewer can maybe
15:00 - solicit some kind of a dialogue the one
15:02 - thing that you really don't want to do
15:03 - is just sort of freeze sweat sort of
15:07 - like Hammond haw and I think mostly that
15:10 - again comes from the idea that you
15:12 - should know the answer immediately and
15:14 - that's just an unreasonable expectation
15:15 - for yourself so I think I've done this a
15:20 - little bit let me draw this a little bit
15:23 - bigger in the center so you can talk
15:24 - through it we've got negative 7 1 5 2
15:31 - negative 4 3 & 0
15:38 - cool so here's the array that I'm
15:42 - working with and when I was talking
15:46 - through my example inputs I kind of did
15:48 - this thing where I move through each
15:49 - index and I talked about the sum to the
15:51 - left and to the right so I'm gonna kind
15:54 - of explore that because I feel like
15:56 - maybe that's my key to trying to solve
15:57 - this problem and if I'm starting here I
16:01 - kind of have like nothing or nil to my
16:04 - left and I've got 8 negative 4 is 4 plus
16:08 - 3
16:09 - so I've got seven here then I'll move
16:11 - one over and if I looking to my left
16:14 - I've got negative seven here then I've
16:16 - got 7 minus 4 is 3 plus 3 is 6 and so on
16:21 - and so forth I don't necessarily need to
16:23 - go through each one but I'm kind of like
16:24 - starting to form out like ok so what I
16:27 - really need to do is move through each
16:30 - element in the array and then somehow I
16:33 - need to take all the elements to the
16:35 - left of that index sum them up take all
16:38 - the elements to the right of that index
16:40 - sum them up do some kind of comparison
16:42 - cool great so I have like the beginnings
16:45 - like my Inklings of how a cool edge case
16:50 - a lot of hahaha that's true when I was
16:53 - looking for multiple edge cases are
16:55 - sorry multiple equilibrium points an
16:57 - array of many zeroes would have been a
16:59 - great example so you know no no lack of
17:03 - equilibrium points here very nice thank
17:05 - you
17:05 - Julio cool
17:08 - great so at this point like I'm talking
17:11 - through my strategy and I feel like this
17:13 - is the point where I'm kind of thinking
17:15 - out loud is what I'm doing and all this
17:18 - time I'm directing my attention to the
17:20 - interviewer like you understand what I'm
17:22 - saying does this make sense to you the
17:24 - interviewer may be very engaging they
17:26 - may be very collaborative they may be
17:28 - kind of stone-faced don't take it
17:30 - personally if there stone-faced maybe
17:32 - that's just the type of person they are
17:33 - maybe they feel that to evaluate a
17:35 - candidate they can't really give a lot
17:37 - but don't be discouraged and don't stop
17:39 - from talking to them you know if you're
17:42 - talking through how you're gonna solve a
17:44 - problem to an interviewer and they're
17:45 - just getting you nothing back that
17:47 - doesn't mean you should stop like always
17:49 - present you're thinking you really want
17:51 - to make sure that the person evaluating
17:53 - you has a very clear idea of your
17:55 - thought process because that is a very
17:58 - important aspect of working with someone
18:00 - you want to know how they think how they
18:02 - take in ideas that kind of thing cool so
18:05 - as I said before I feel like I have a
18:07 - general strategy here for how I'm going
18:09 - to solve this problem and what I like to
18:11 - do in these cases is give myself like a
18:15 - little bit of a roadmap so what I'm
18:18 - doing here is trying to offload some of
18:22 - the mental like the mental strain on me
18:25 - I'm a very simple guy I can only keep so
18:27 - many things in my head at once so if I
18:29 - have a strategy that works as like a
18:31 - high-level I want to like write it down
18:33 - here so I can refer to it later and that
18:35 - way when I'm working through like
18:37 - actually writing out the code I don't
18:39 - have to be trying to remember what my
18:40 - approach was so let's say I was going to
18:45 - iterate through the list I was going to
18:54 - sum all of left and I was going to sum
19:00 - all of the right compare if the loop is
19:11 - done then I'm gonna return I would say
19:15 - none cool so one thing I haven't talked
19:21 - through yet because hopefully this is
19:24 - something that is going to be clear in
19:25 - the job that you're applying for when
19:27 - you're asked this type of a question and
19:28 - it's not evident the language that
19:30 - they'd like you to use I would just do a
19:32 - quick hey I'd like to solve this problem
19:34 - in Python that's the language I'm most
19:36 - familiar with is that okay with you and
19:38 - I would say nine times out of ten I've
19:40 - never been in a situation where they've
19:41 - said no do a completely different
19:42 - language in all likelihood the language
19:45 - that they're hiring you to work in is
19:47 - probably the language they'd like to see
19:49 - but if you don't know it that's fine
19:51 - just use the one that you feel most
19:52 - comfortable with cool just trying to
19:58 - catch up with the chat okay great
20:01 - cool so I have my sort of road map this
20:03 - is the thing that's going to keep me on
20:05 - track
20:05 - and at this point there's nothing left
20:08 - to do but to jump into coding and I do
20:10 - kind of want to draw attention to the
20:11 - fact that I've been talking for like a
20:14 - decent amount of time right and I
20:16 - haven't written any code at all
20:18 - and again that that that like may at
20:20 - first feel kind of strange but it is
20:22 - totally alright like coding is not a
20:25 - profession we're rushing is going to
20:28 - help you being able to plan talk through
20:30 - an approach these are the things that
20:33 - are going to ensure or at least help you
20:35 - get a solution that has less bugs that
20:38 - functions the way that you want so don't
20:40 - be in a hurry to jump to writing code
20:42 - immediately because it will always help
20:45 - you to take a step back really think
20:47 - through the problem how you're gonna
20:48 - solve it cool and without further ado
20:51 - we're gonna start writing the problem
20:53 - out so in this situation I'm again I'm
20:56 - gonna try to keep up this collaborative
20:58 - aspect of it where I'm going to you know
21:00 - write out sections of my code describe
21:03 - why I'm writing them out again I want
21:05 - there to be zero room for doubt zero
21:08 - question about what I'm thinking at any
21:09 - given moment cool so I'll start with def
21:17 - I'll call it equilibrium point what have
21:20 - you it's going to take in LST that is my
21:24 - list great and what do I want to do when
21:29 - I'm in this list well I want to iterate
21:32 - through it and as I'm working through
21:36 - the problem I'm realizing again it's
21:38 - good to have an example input I've had
21:41 - it a few times that I've also erased it
21:42 - for space so and I think zero so a
21:51 - little messy hopefully people can still
21:52 - see there this is kind of what I'm going
21:54 - to refer to as I work through it one
21:58 - thing that I feel like has been a little
22:00 - bit ambiguous and this is something I
22:01 - probably should have clarified with the
22:02 - interviewer I'm just going to kind of
22:03 - make a decision right now is there are
22:06 - times when I was treating the very first
22:08 - index to the left of the very first
22:10 - index at zero I could also treat it as
22:12 - like none or not even zero that's kind
22:15 - of a decision I have to make so as I
22:20 - iterate through the list what I'm gonna
22:21 - do is start at the first index because
22:24 - by starting at the first index I can
22:26 - look for all the values to the left and
22:29 - the right
22:30 - I feel like again this is something
22:31 - that's a little bit like ambiguous and
22:33 - whatever I came to agreement with the
22:34 - interviewer which happens to be me in
22:36 - this case would be the acceptable thing
22:39 - so I'm gonna write my for loop my
22:44 - iterating variable is going to be ID X
22:47 - I'm going to use my
22:49 - range function so if you're not familiar
22:52 - with Python what range is going to give
22:54 - me is a series of numbers based on the
22:56 - arguments passed arranged and as I just
23:00 - said I'm going to start at one and I
23:03 - want to go up until this second-to-last
23:07 - index so I will get the length of the
23:10 - index I'll use the Len function pass in
23:13 - list and I'm going to subtract one from
23:17 - it and just to recap again for people
23:20 - that aren't very familiar with Python
23:22 - what this is going to give me is a
23:23 - series of numbers from 1 up until this
23:27 - index here so range is non inclusive of
23:30 - the second argument and I'm also
23:32 - subtracting one cool okay and so now
23:37 - that I'm iterating through the list what
23:39 - do I want to do inside of it I want to
23:41 - sum all of the left ok great so I'm
23:45 - going to create a variable I'll call it
23:46 - left some okay and left sum is going to
23:53 - be a sum so there is a sum function in
23:57 - Python that sums all the values in a
23:59 - list I will make use of that and some
24:04 - takes as an argument a list and I'm
24:06 - going to pass in a sub list or a slice
24:09 - of the original list and I want to slice
24:12 - everything to the left of I DX right i
24:16 - DX is sort of my marking point of like
24:18 - where that equilibrium point could be so
24:21 - I'm going to take the slice of
24:22 - everything up until that point so I will
24:26 - take lists and the syntax for slicing up
24:32 - until a point is I'm not going to put
24:35 - any value on the left side of a colon
24:38 - and on the right side I will put I DX
24:44 - and then I'll close my invocation of sum
24:47 - so again what I'm doing here is taking a
24:49 - copy of the sub list all the values from
24:52 - the very beginning which is that empty
24:54 - space to the left of the colon up until
24:57 - but not inclusive of the index great so
25:01 - my left sum
25:03 - do my rights um I'll do kind of a
25:05 - similar thing some of the list and now
25:13 - I'm going to slice it in a different way
25:16 - so one thing again it's been kind of
25:19 - implicit but I want to be explicit about
25:20 - it now we're not including the indexes
25:23 - value in the equilibrium point so that's
25:25 - being excluded so in this case I want to
25:28 - take ID x plus 1 so I want a slice of
25:33 - all the values one from the right of
25:35 - this iterating index to the very end and
25:39 - I can denote the very end just with an
25:41 - empty space again similar to at the
25:44 - beginning of the array there and that
25:46 - will give me all the values to the right
25:48 - of the sub cool so I have my left sum
25:52 - and I've got my rights um and now I want
25:55 - to do my comparison great so I'll just
25:58 - say excuse me I want to say if left sum
26:07 - is equal to write sum if that's the case
26:14 - then I found my equilibrium point and I
26:16 - want to return the index cool and if
26:25 - that's not the case if I get through
26:26 - this whole iteration then I want to
26:29 - return none ok so a little bit sloppy I
26:39 - wouldn't really say that in interview
26:40 - but just sort of like I'm being honest
26:42 - with myself I'd probably want to write
26:43 - this out a little bit neater hopefully
26:45 - people can see it but just to recap what
26:48 - I've done here defining my function it
26:50 - takes a list as an argument I'm gonna
26:52 - iterate from this first index to the
26:55 - second-to-last index in this iteration
26:59 - I'm going to get a sub list of all the
27:02 - values to the left a sub list of all the
27:06 - values to the right and then I'm going
27:08 - to compare them so I wrote some and Sun
27:11 - and sort of some if they are equal in
27:14 - value I'm going to return that index
27:15 - that iterating
27:16 - next otherwise I will return none cool
27:20 - so at this point I've written out my
27:23 - code I've talked through my strategy
27:26 - I feel reasonably confident that this
27:29 - will work but you should never be overly
27:32 - confident in an interview and even if
27:34 - you are you want to really show that it
27:35 - works so in this kind of a case this is
27:39 - why we have our like sample input
27:41 - because now we can kind of put it to the
27:43 - test
27:43 - walk through each line of code plugging
27:46 - in this input and seeing what comes out
27:49 - I've got a little bit of space here so
27:51 - maybe I'll try to do it there perfect so
27:56 - to start I D X is going to be one we're
28:02 - starting at one there the sum of
28:04 - everything to the left up until it is
28:06 - going to be just do LS for left sum and
28:09 - we'll do RS for right sum so my left sum
28:14 - is going to be 7 or it starting negative
28:17 - 7 excuse me my right sum will be 7 minus
28:19 - 4 is 3 plus 3 is 6 6 those aren't equal
28:24 - so I'm going to increment my index and
28:30 - now I'm taking for my left sum these two
28:34 - values so that's going to be negative 6
28:37 - and my right are going to be negative 2
28:41 - plus 3 is 1 so negative 6 & 1 those
28:47 - aren't equivalent get out of here you
28:49 - and we're gonna go index 3 so maybe I'll
28:54 - write my indexes down here to make it a
28:56 - little easier cool so everything here so
29:02 - I've got 6 negative 7 so that's negative
29:05 - 1 on my left and on my right I have
29:08 - negative 4 3 & 0 so that's also gonna be
29:10 - negative 1 and ding-ding-ding we found
29:14 - our equilibrium point so we're matching
29:17 - this conditional here and we're
29:19 - returning the index that's the end of
29:20 - our function very cool I'm super proud
29:25 - of the fact that I wrote a solution and
29:28 - let me just check in with the questions
29:30 - and
29:30 - sure we're cool here some questions
29:34 - about Python I'm sorry that I have to
29:36 - use a specific language
29:37 - I chose Python because I feel like it's
29:40 - probably the closest thing in terms of
29:42 - readability there's less syntax quirks
29:44 - we use indentation or whitespace in
29:47 - Python to denote blocks of code so
29:49 - that's what you're seeing there cool
29:54 - some questions about greedy algorithms
29:55 - I'm not going to touch that because I
29:56 - don't want to get to sort of like down
29:58 - that rabbit hole I would definitely
29:59 - check out our CS path and the algorithms
30:04 - we have there we have a lot more
30:05 - in-depth discussion there plug cool
30:12 - sheet of built-in functions yes so so
30:16 - that's an interesting question any
30:18 - function that the language provides you
30:20 - is fair game to a certain extent if an
30:22 - interviewer asks you for example to
30:24 - write like a sorting function and you
30:26 - use an inbuilt sort that's probably
30:28 - cheating but you know most interviewers
30:31 - are gonna be happy with the fact that
30:32 - you're using some rather than like you
30:34 - know writing a for loop and summing
30:35 - manually this is really going to come
30:38 - down to your familiarity with the
30:40 - language and as I said you know earlier
30:42 - when someone was asking about project
30:43 - Euler practice makes perfect the more
30:45 - comfortable you are with the language
30:46 - the more familiar you are with the
30:48 - different inbuilt functions the less
30:50 - time you have to spend thinking about
30:51 - that and the more you can focus on the
30:53 - actual problem so I wouldn't bring in
30:56 - like a cheat sheet of functions but that
30:59 - is just something that hopefully you'll
31:00 - become more and more familiar with as
31:02 - you practice if you're not if you're
31:05 - really like stuck and you're like oh I
31:06 - just need like a function that could
31:08 - like some values of a list then I would
31:09 - be set you know the interviewer might
31:11 - suggest
31:12 - oh well Python does have a sub function
31:14 - you know that there may be something
31:15 - like that but you can't be like oh if
31:18 - only there was like a function that
31:19 - could find the equilibrium point of a
31:20 - list you know like you can't do
31:22 - something like that
31:23 - it should be like a small piece of the
31:24 - problem not the problem itself cool
31:28 - great so we are getting a question about
31:30 - efficiency and time complexity so that's
31:31 - a nice segue thank you very much so I'm
31:35 - going to talk about that one thing
31:37 - that's a really really great signifier
31:39 - that you're like a serious engineer that
31:41 - you care about scale you care about time
31:42 - complexity
31:44 - is to talk through the efficiency of
31:45 - your code so let's just like take a look
31:50 - at what we're doing here right we're
31:53 - gonna talk about I'm going to talk about
31:55 - this in terms of Big O notation if
31:56 - you're not familiar with Big O notation
31:57 - we do have an excellent course on it at
32:00 - code Kadim e but I'll give you a very
32:01 - high-level very succinct uhm idea of
32:05 - what Big O is and that's sort of like
32:07 - how much work is our function going to
32:09 - do based on the input it's given so if I
32:13 - give it a little bit of input is it
32:14 - doing a little bit of work if I give it
32:16 - a medium amount of input is it doing a
32:17 - medium amount of work if I give it a lot
32:19 - of input is it giving a lot of work you
32:22 - know that would be like a linear time
32:23 - complexity is what we would call that
32:24 - and in other words the work scales one
32:27 - to one with the input that's the idea of
32:29 - like a linear time complexity like a
32:32 - worse time complexity would be a
32:34 - quadratic time complexity where I'm
32:36 - doing you know the sort of like line of
32:38 - my work Rises very steeply rather than
32:41 - being sort of a straight steady increase
32:44 - so with that very bad very high Big O
32:48 - notation we're gonna jump into analyzing
32:51 - this so let's take a look at what we're
32:53 - doing here as someone said like what if
32:55 - this input list was like millions of
32:57 - elements right well one thing I'm doing
33:00 - is I am iterating through each value you
33:04 - my range I mean I'm you know leaving off
33:06 - a value here there but for the most part
33:08 - I'm gonna go through each element and
33:11 - oftentimes in Big O notation we're
33:14 - talking about the worst case scenario so
33:16 - if I had to do the most possible work
33:19 - this function had to do what would you
33:23 - know what would be required of me so in
33:25 - other words if I found the equilibrium
33:26 - point at the first value that's not
33:28 - really very interesting if I don't find
33:31 - the equilibrium point that means I'm
33:32 - going through everything right so that's
33:34 - what we're gonna consider so in a worst
33:36 - case scenario I'm gonna go through every
33:38 - value right and then I'm summing I'm
33:42 - making a copy of a list and so we may be
33:44 - tempted to say well maybe this is linear
33:46 - because I know I'm going through every
33:48 - value but we want to think about what
33:51 - work are we doing for every value right
33:55 - anything that happens in this
33:57 - block is happening for every value in
33:59 - our input list so let's really kind of
34:02 - drill down into what we're doing and
34:05 - again let's just like take this scenario
34:07 - here where we found the equilibrium
34:09 - point we made a copy of the list so we
34:12 - made another sub list here that was like
34:16 - negative 7 1 & 5 that was our left
34:22 - that was the copy we made and then we
34:24 - summed and to summit you can imagine
34:27 - we're going through every value and
34:29 - adding them together so we're making a
34:31 - copy which requires us to go through
34:33 - every value to copy it over and then
34:35 - we're also going through every value to
34:38 - sum it together and we're doing the
34:40 - equivalent on the right side so we also
34:42 - have a list that's like negative 4 3 & 0
34:47 - and so what we can see here is we're
34:51 - kind of creating a whole new version of
34:54 - the input array it's a little bit
34:56 - smaller because we're excluding that
34:58 - middle value but otherwise it has as
35:01 - many elements inside of it as our input
35:03 - and in Big O notation we talked about
35:06 - the input as n usually like a big n so
35:10 - what I'm doing inside of the loop is
35:13 - also could also be considered n work or
35:17 - a linear amount of work putting that
35:19 - together for a linear amount of work of
35:24 - iterating through each element I'm doing
35:27 - a linear amount of work so n times n
35:31 - times n you know that I'm doing it
35:34 - multiple times so that's not great
35:35 - either but the time complexity for this
35:38 - is actually going to come out to N
35:40 - squared
35:41 - o of n I'll write it out there and again
35:44 - n is the length the number of elements
35:47 - in our list so not great not like our
35:50 - ideal efficiency and so if if what we
35:56 - just covered feels a little bit like
35:57 - whoa I didn't even I you know like this
35:59 - seems like a lot don't be discouraged I
36:02 - wouldn't say that this is the end-all
36:04 - be-all of doing well in a technical
36:06 - interview ultimately you're being hired
36:09 - to implement business
36:10 - logic build applications build features
36:12 - so if you're someone who's really
36:14 - passionate about coding and you can come
36:17 - to solutions that is a really really
36:19 - good accomplishment and something you
36:21 - should be proud of this is sort of like
36:23 - the icing on the cake the real nice way
36:25 - to distinguish yourself talking about
36:26 - time efficiency but don't discount this
36:29 - work you're getting to this point to be
36:31 - able to write out this type of a
36:33 - solution is really great
36:36 - cool awesome so at this point yeah I
36:43 - think I'm trying to think of how much
36:46 - time we have and I feel like we could
36:48 - probably code up a more efficient
36:49 - solution so let's do it I'm what I'm
36:52 - gonna do is take this work here I'm
36:55 - going to erase it so now we're gonna
36:58 - dive into like okay I want to write a
37:01 - more efficient solution for this problem
37:04 - I'm gonna sort of undo the code I've
37:07 - done because at this point I've sort of
37:11 - satisfied to myself and hopefully to the
37:13 - interviewer that I can code up a
37:15 - solution to this but now my challenge is
37:17 - I want to do a better job I want to make
37:19 - this more efficient and when doing a
37:22 - more efficient solution I find that like
37:27 - a general helpful strategy is how can I
37:29 - eliminate repeated work so to put this
37:33 - another way when I was analyzing the
37:35 - time complexity
37:36 - I was summing up the sub lists and I was
37:40 - summing up the sub lists multiple times
37:43 - I was making a copy of negative seven
37:46 - then I was making a copy of negative
37:47 - seven and one and I was making a copy of
37:49 - negative seven one five and so on but
37:53 - negative 7 and negative seven and one
37:56 - aren't all that different right like
37:58 - it's just one more value so do I really
38:01 - need to copy over and sum over all these
38:05 - values every single time through my loop
38:07 - that's my way of thinking of like oh
38:10 - maybe I can reduce that complexity this
38:14 - is definitely again a little bit more
38:16 - advanced and if it's this feels like a
38:19 - little discouraging or hard to grab
38:21 - that's totally ok this is really comes
38:23 - with like a lot of practice
38:24 - during this for several years so again
38:27 - don't be discouraged but what I want to
38:29 - do is remove that repeated work so you
38:33 - know one thing I have to do is I have to
38:35 - iterate through the array like I have to
38:37 - go through the array to find out where
38:38 - that equilibrium point lies so I'm gonna
38:42 - have a for loop I know I'm gonna do that
38:45 - sold you for EDX in range about boat
38:54 - range length of the list
38:58 - great cool so I still need my loop but
39:04 - now what I'm gonna do is I'm going to
39:06 - sort of create a running tally and I
39:09 - think someone talked about like a greedy
39:10 - algorithm and this is kind of like
39:11 - moving in that direction of like the
39:13 - idea there what I'm gonna do is I'm
39:16 - gonna create a sum which is the entire
39:18 - sum of the array and I'm going to create
39:20 - a sum that's like no elements in the
39:22 - array and then I can make small changes
39:25 - to each of those values as I move my way
39:28 - through and in that way I won't have to
39:30 - do a sum for every iteration of the loop
39:32 - and I won't have to do a sub slice of
39:34 - every iteration in the loop so what I'm
39:37 - going to make is a left sum and my left
39:44 - sum is going to start out as zero and
39:46 - I'm also gonna make a right sum and my
39:52 - right sum is gonna be the sum of the
39:55 - list
39:56 - so basically everything right and what I
40:01 - want to do now is in my loop I want to
40:04 - add to my left some I want to check
40:08 - whether my left sum equals my right sum
40:10 - if it does I found the equilibrium point
40:13 - we can all go home or I want to subtract
40:17 - from my right some cool so let's move
40:24 - through this again ok cool I think I'm
40:26 - doing this correctly if I'm not I feel
40:28 - free to call it out to do what I want to
40:33 - do is take my left sum
40:36 - and I'm going to add to it the value in
40:42 - lists located at index so LST idx cool
40:52 - then what I want to do is check if the
40:57 - left sub is equal to the right song if
41:10 - it is I want to return the index if it
41:15 - isn't I want to kind of set things up
41:16 - for the next iteration of the loop and I
41:18 - need to subtract that value from my
41:20 - right some otherwise my left sum is
41:22 - gonna build up but my right some isn't
41:24 - gonna go down so I'm going to subtract
41:28 - from my right some minus equals the
41:35 - value at the list at that index cool
41:41 - beans
41:42 - and then out of four if my loop
41:45 - concludes I'm gonna return none great
41:49 - cool again like I'm kind of like moving
41:52 - through this quickly because I don't
41:53 - want to keep everyone too too long but I
41:55 - think we can wrap this up in the next
41:56 - couple minutes so I feel good about the
42:01 - code I wrote but again it's not about
42:02 - you feeling good it's about showing that
42:05 - it works so we're gonna step through win
42:07 - the input and see how this goes just
42:10 - like before I find it's really helpful
42:12 - to like diagram out the variables that
42:14 - you're working with just to like really
42:16 - like have it all out there I don't need
42:18 - to keep it in my mind I can just refer
42:19 - to it on the board so I've got my index
42:24 - I've got LS will be my left sum and I've
42:30 - got RS which is my right sum so unlike
42:33 - the previous solution I'm starting at
42:34 - the 0th index so a little change there
42:36 - so index 0 my left sum is starting as 0
42:41 - as well and my right sum is the sum of
42:43 - the list which is negative 1 or sorry
42:45 - negative 6 negative 1
42:49 - positive 1 negative 5 negative 2 doing
42:57 - math on the spot not my most strongest
43:00 - suit but I feel I'm doing pretty well
43:01 - cool so we're starting with the first
43:06 - thing we're gonna do in our loop is
43:07 - we're gonna add to the left sum of
43:09 - negative 7 so my left sum is going to
43:12 - become negative 7 then I'm gonna do my
43:17 - check is negative 7 negative 2 no it's
43:19 - not then I'm going to subtract from the
43:23 - right sub so I'm going to subtract
43:26 - negative 7 from my right some negative 9
43:32 - wait yeah I think that's right cool and
43:35 - then I'm gonna go back in the loop now
43:38 - I'm at index 1 cool 1 is my value I'm
43:45 - adding to the left some so that's going
43:46 - to become negative 6 and I'm going to
43:51 - check is negative 6 equal to negative 9
43:53 - no it is not and so I'm going to
43:56 - subtract from my right sum of negative 1
44:00 - so that's gonna become negative 10 I'm
44:04 - going to to now cool so adding to the
44:09 - left sum of 5 so this becomes negative 1
44:16 - are they equal no they are not the right
44:20 - something's gonna get subtracted of
44:21 - negative 5 so that's negative 15 does
44:24 - not feel like I'm moving towards the
44:26 - right solution here I think there's a
44:29 - bug in this what have I done oh yeah
44:34 - yeah nice ok cool so thank you very much
44:36 - for helping out in the chat my Aeneid
44:38 - and my initial summing of the list was
44:40 - incorrect so negative 7 plus 1 is
44:43 - negative 6 plus 5 is negative 1 plus 2
44:46 - is positive 1 minus 4 is negative 3 and
44:50 - plus 3 is 0 so again folks just goes to
44:54 - show that mistakes happen
44:57 - and that's totally fine the good part is
45:00 - that we were able to get to the bottom
45:01 - of it and also this kind of illustrates
45:03 - the
45:03 - benefit of y-you want to walk through
45:04 - the code that you wrote with these
45:06 - inputs so in this case when I was doing
45:09 - my demonstration that's where the
45:10 - mistake came in but again mistakes
45:13 - happen it's ok let's start this over
45:17 - really quick my apologies
45:21 - so my left some weight all right all
45:25 - right hold I was like it zero zero and
45:28 - the sum of the list is zero so yes so
45:33 - great so a little confusing we're back
45:36 - on track my index is zero I'm going to
45:39 - add to my left some at that index so my
45:42 - left sum is going to become negative
45:43 - seven they're not equal so I'm going to
45:46 - subtract from the right some negative
45:51 - seven cool I'm going to add to the left
45:54 - some one so that is negative six
46:00 - they're not equal so I'm going to
46:02 - subtract from the right some negative
46:04 - eight I'm going to add to my left some
46:08 - five the next value so that becomes a
46:12 - negative one subtract this that it
46:15 - becomes negative thirteen did I do this
46:18 - correctly
46:21 - negative negative 7 is plus seven all
46:24 - right all right at this point I feel
46:25 - like I'm trying to rush through a more
46:27 - efficient solution which is probably not
46:29 - the way to go about this so I'm sorry to
46:30 - end on such like a disappointing note
46:32 - but I feel like at this point you'll
46:34 - have to make the evaluation of whether
46:35 - you're gonna hire me or not
46:37 - I could try to debug here I don't know
46:40 - do people want to see me debug this I
46:42 - feel like a pretty close all right I'll
46:46 - jump through the questions
46:56 - okay cool so the question is about like
46:58 - how difficulties progress I would say in
47:02 - general at least in my experience and
47:05 - the people I've spoken with who have
47:06 - done it just need to debug math skills
47:08 - it's true I would say that the time
47:12 - spent in the on-site is more significant
47:15 - than the time spent during the phone
47:16 - screen so in that case you may you're
47:20 - going to be expected to be talking about
47:21 - how you code through solutions or the
47:23 - problem on the on site I don't know
47:26 - necessarily that the problems become
47:28 - more complex or more difficult but there
47:30 - is more time devoted to evaluating you
47:32 - as a candidate so in that in that sense
47:36 - you will sort of be evaluated a little
47:38 - more strongly in the on-site than the
47:40 - phone screen any other questions yeah
47:54 - generally what you do in the if you make
47:56 - the mistake as I literally just did in
47:57 - front of you is first of all it's not
48:00 - the end of the world like mistakes
48:01 - happen everyone makes mistakes the most
48:04 - experienced professionals make mistakes
48:05 - the most neophyte beginner makes a
48:08 - mistake I think what like what you can
48:11 - do is acknowledge that and move forward
48:14 - now in this case I'm trying to like wrap
48:17 - up this so I'm not really gonna go into
48:19 - a debugging mode but in the interview
48:22 - like I'm gonna be talking with an
48:23 - interviewer he's maybe gonna help point
48:25 - me towards the solution yeah yeah I mean
48:31 - again like I don't go down the rabbit
48:32 - hole of debugging it haha but I think
48:34 - the important part is to acknowledge
48:36 - that you made the mistake talk about why
48:38 - that mistake happened so you know for
48:40 - example and the first time I was like oh
48:41 - right the some of the list isn't
48:43 - negative 7 or whatever I said it was
48:45 - it's actually zero that's where the
48:47 - mistake happened so you're sort of
48:49 - showing the ability to diagnose why you
48:51 - went wrong and what you can do to get
48:52 - back on track which is debugging again
48:55 - it's a very valuable skill if you don't
49:00 - pass the test so that's a good question
49:02 - about passing the test in the phone
49:04 - screen so some screens especially if
49:07 - it's like a third party screen
49:09 - there may be like a number of tests you
49:11 - have to pass like literal like red-green
49:13 - tests usually you need to pass those or
49:15 - at least a good amount to proceed if
49:17 - it's a problem you're working through
49:19 - with another engineer it's gonna be a
49:21 - little bit more subjective because
49:22 - there's that human element in it but
49:25 - again in those cases usually you at the
49:28 - very least have to find some kind of a
49:30 - solution so if I'm diagnosing my own
49:32 - interview right now I would be like
49:34 - points for being able to come up with
49:36 - the more naive implementation he
49:38 - struggled with the more advanced version
49:40 - of it but I think he was on the right
49:41 - track so in that case it really comes
49:44 - down to like the companies needs
49:45 - evaluating against other candidates like
49:49 - going back to making mistakes I think
49:50 - that's another important thing to keep
49:52 - in mind is you're being evaluated based
49:55 - on the other candidates you're not being
49:57 - evaluated based on a sort of like
49:58 - perfect human being that can answer
50:00 - everything perfectly instantaneously you
50:03 - know you you're only gonna get hired or
50:05 - not hired relative to other people I'm
50:10 - cool yeah so I would say that the the
50:17 - computer science path starts you off
50:19 - with fundamentals of Python so if you
50:21 - don't have a lot of experience that's
50:22 - totally okay we'll teach you through the
50:24 - very beginnings the building blocks of
50:26 - the language and we'll get you all the
50:28 - way up through more advanced algorithms
50:29 - and data structures if you completely go
50:36 - down the wrong path with a solution so
50:38 - this is a good question again Rob Chuck
50:39 - thank you I would say that this is
50:43 - somewhat dependent upon the interviewer
50:44 - but in general I think it's helpful to
50:46 - imagine that interviewers want you to
50:48 - succeed if you do a really good job in
50:50 - an interview that means the interviewer
50:52 - doesn't need to see other candidates and
50:54 - they can fill the need they have at
50:55 - their company so if an interviewer sees
50:58 - you going down the totally wrong path
51:00 - like that is not correct they probably
51:03 - are gonna speak up and say something you
51:06 - know I don't think it's helpful to think
51:07 - of interviewers as like vindictive
51:08 - people that want to see like struggles I
51:11 - in my own experience being an
51:13 - interviewer I want to see people succeed
51:14 - I want to help them as much as I can
51:16 - without sort of tainting the evaluation
51:19 - of them as a candidate
51:21 - you then recover from that as a as an
51:23 - interviewee like oh I went down the
51:25 - wrong path and they like got me back on
51:26 - the right track what do you do
51:28 - gotcha yeah I think if you go down the
51:30 - wrong path and you could sort of then in
51:32 - the moment try to diagnose like okay I
51:35 - went down the wrong path in my strategy
51:37 - I was including for example the value
51:41 - that I was supposed to be finding the
51:42 - equilibrium point and that was
51:43 - preventing me from finding it so you
51:45 - know that was how I made my mistake and
51:47 - now I'm going to rectify that mistake by
51:50 - leaving it out of my calculations so I
51:54 - think the again it kind of goes back to
51:56 - like trying to self-diagnose articulate
51:59 - what went wrong and how you can find a
52:00 - solution for it like okay this was a
52:03 - mistake I made here's why I made that
52:04 - mistake here's what I'm gonna try now
52:09 - more interview prep livestreams I'd love
52:11 - to do them hopefully I can come up boy I
52:16 - really feel like this works there's
52:17 - something wrong crazies but yeah I would
52:20 - love to do this more so if people are
52:21 - interested let me know
52:22 - great I think at that point it's been
52:25 - almost an hour so I'm gonna put a button
52:26 - on it my kind of final thoughts are for
52:29 - one like don't be discouraged finding a
52:32 - new job especially in a new field is
52:34 - very difficult I don't say that to be
52:36 - discouraging it's more like this is the
52:38 - road ahead for you and you know like any
52:41 - goal that's worth having it's gonna take
52:42 - some effort but you can absolutely get
52:44 - there
52:45 - the keys are putting in the practice
52:47 - having patience with yourself being able
52:49 - to appreciate where you've come even if
52:52 - you're not quite where you want to be
52:53 - like personally I'm proud of the fact
52:55 - that I could come up with some things a
52:57 - moment even if I wasn't able to like
52:59 - totally ace this but those are the main
53:02 - things and again like communicate with
53:04 - your interviewer talk to your
53:05 - interviewer try to build a rapport with
53:07 - them try to build some kind of a
53:09 - relationship because that is one of the
53:11 - people they're one of the people who are
53:13 - gonna be making a decision about whether
53:14 - to hire you or not so if even if you
53:17 - come up with like the perfect solution
53:18 - but you never talk your interviewer you
53:20 - never tell them what you're thinking
53:21 - it's gonna be kind of hard to give that
53:23 - person the green light because you just
53:24 - don't know what they're gonna be like to
53:26 - work with and that's that's a very dicey
53:28 - situation cool thanks so much everyone I
53:32 - really appreciate your attention
53:34 - have a good one good luck with your job
53:36 - interviews