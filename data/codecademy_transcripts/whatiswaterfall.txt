00:00 - hi this is Pat with codecademy I am a
00:02 - web developer based in Washington DC if
00:05 - you've heard the term waterfall you've
00:08 - probably been confused by what it means
00:11 - exactly and we're not talking about the
00:13 - majestic cascading water that comes down
00:15 - the edifice of a rock we're talking
00:17 - about the waterfall development method
00:20 - for developing software in this video
00:22 - we're gonna discuss what waterfall is
00:24 - what are its shortcomings and
00:26 - limitations what are its strengths what
00:28 - are some of the best use cases for it
00:30 - let's get started so in this video we're
00:33 - gonna talk about what waterfall is what
00:35 - are some of the key differences in
00:37 - strengths as opposed to agile and then
00:39 - there are three main themes that set
00:42 - waterfall apart from agile scale
00:45 - duration and quality we'll wrap up by
00:49 - talking about if waterfall is better
00:51 - than agile and give you some examples to
00:53 - sink your teeth into so that you have a
00:54 - little bit more that you want let's get
00:56 - started
00:57 - Waterfall is believed to have been the
00:59 - first process model in software
01:01 - engineering originating from mechanical
01:03 - engineering
01:04 - it's a sequential design process meaning
01:07 - that the earlier phases define
01:08 - subsequent phases so how is this
01:11 - different than agile I'll link a video
01:12 - below that goes into more depth about
01:14 - what agile is but they're both trying to
01:16 - solve the same problem which is how do
01:18 - we turn an idea into a reality
01:21 - so in today's economy you're likely
01:23 - going to have to build software as some
01:26 - part of realizing your business dream or
01:29 - any creative endeavor that you have
01:30 - that's just the world that we live in
01:32 - but if you find yourself there how do
01:35 - you start building software what are the
01:37 - different ways you could go about it
01:39 - well when it comes to waterfall one of
01:42 - the main considerations is if your AI
01:44 - dee' needs to work on the first try or
01:46 - risk losing customers what approach
01:49 - should you take in this case this is a
01:51 - good example of why you would need
01:53 - waterfall because waterfall emphasizes a
01:55 - quality and completeness and testing
01:58 - over getting to market fast and
02:00 - iterating on top of it waterfall is
02:02 - different from agile in a couple of key
02:03 - ways agile is about fast iteration and
02:07 - waterfall is about totality and
02:09 - completeness agile is about
02:10 - incorporating the feedback that you get
02:12 - based
02:13 - the results that you have whereas
02:15 - waterfall is more about being complete
02:17 - and getting it right on the first try
02:18 - see the strength of waterfall is that it
02:20 - is strictly sequential and top-down that
02:23 - means that there has to be thorough
02:25 - planning and documentation this lends
02:27 - itself especially well to large projects
02:30 - that need more accurate estimations for
02:32 - approval even just to start this means
02:34 - that each phase is stronger than the
02:36 - previous phase because you're building
02:38 - off of the knowledge and lessons learned
02:39 - from the last part also it's really hard
02:42 - to start your part of the project if you
02:43 - don't have all the resources that you
02:45 - need one of the main defining features
02:47 - of waterfall is scale Waterfall lends
02:50 - itself especially well to large project
02:52 - sizes and that's because estimations are
02:54 - needed to be given for large projects we
02:57 - need to know how many developers to hire
02:58 - and what resources they need to be
03:00 - successful that means that we have to
03:01 - dive deep into which resources we need
03:04 - to provide what specializations we need
03:06 - and who we need to hire for the right
03:08 - job we also have to take into account
03:09 - any runway for supporting elements like
03:12 - marketing finance and legal on top of
03:14 - that this likely means that for
03:16 - waterfall projects there's going to be
03:17 - multiple teams even multiple teams of
03:20 - teams working on the same project to do
03:23 - that they're gonna need documentation
03:24 - because different team is working on
03:26 - different parts might not have been
03:28 - involved in the previous phase they'll
03:30 - often be starting from scratch based off
03:32 - of the lessons that somebody else is
03:34 - handing them the emphasis here is on
03:36 - sequentiality and completeness lastly
03:39 - when you have multiple teams working on
03:40 - the same application maintainability
03:42 - becomes really important and that's
03:44 - where the documentation comes in is
03:46 - because you're often asking developers
03:48 - to maintain something they likely didn't
03:50 - build so they need to know how to fix it
03:52 - and how it works as a whole
03:54 - the next defining feature of waterfall
03:57 - is duration especially length some
03:59 - features take longer to build than
04:01 - others some applications take longer to
04:04 - build than others especially when it
04:06 - comes to larger clients like
04:07 - institutions banks and government
04:09 - services they likely have running
04:11 - systems that are working but they're a
04:14 - little bit antiquated for today's
04:15 - technology that means that we have to
04:17 - engineer bridge building a software for
04:19 - translating and transpiling into the
04:21 - proper format so that we can work with
04:22 - it going in sequential order also means
04:25 - to time some features require to have
04:28 - been built before others can proceed and
04:30 - this sometimes means going back to a
04:32 - previous stage sometimes you might
04:34 - encounter things that weren't foreseen
04:36 - in the planning like bugs problems or
04:38 - just general vulnerability which means
04:40 - that you have to go back and redo
04:42 - certain parts the application
04:46 - the third defining feature of waterfall
04:49 - is quality because waterfall is about
04:51 - predictability while no application can
04:55 - foresee all of the challenges that it
04:57 - will face some types of applications
04:59 - need to have their pathways anticipated
05:02 - things like load times use rates
05:04 - vulnerability proofing and compliance
05:07 - what happens if the power goes out when
05:10 - someone's using your application what
05:12 - happens if the internet was dropped what
05:14 - if the application comes under a
05:15 - malicious attack for some organizations
05:17 - or companies it has to work and there's
05:20 - a number of scenarios that we have to
05:22 - account for and we can't just tell you
05:24 - as well it just doesn't work
05:25 - this means that waterfall endorses a
05:27 - robust testing and documentation phase
05:29 - you can't test it if you don't know
05:31 - what's going on and so documentation
05:33 - allows you for testing and maintenance
05:35 - this dovetails nicely into maintaining
05:37 - because maintainable means durable a
05:40 - waterfall application will likely grow
05:42 - and evolve over its build-out but that
05:44 - means that it has to evolve to the new
05:46 - challenges it might face sometimes that
05:49 - might mean building out entire divisions
05:50 - or sections to support the application
05:52 - things like non-technical user support
05:54 - teams that need to be able to fix or
05:56 - address problems in the application
05:58 - without calling the lead developer in
06:00 - the middle of the night you'll have to
06:01 - build them support applications and
06:03 - interfaces to be able to provide the
06:04 - customer service for your users so
06:07 - hopefully I've made a pretty strong case
06:09 - for why waterfall is good but you might
06:11 - be wondering if it's better than agile
06:13 - Waterfall is not necessarily better than
06:15 - agile because there are just certain
06:16 - types of applications which lend
06:18 - themselves to one or the other I've seen
06:21 - a lot of teams leverage both aspects of
06:23 - waterfall and agile in their day to day
06:25 - agile is best when the product needs to
06:27 - be small and have frequent updates with
06:30 - the emphasis on getting to the market
06:31 - fast waterfall is best when the quality
06:34 - is more important than the speed with
06:36 - the emphasis on testing and durability
06:38 - of the application so what are some good
06:40 - examples of applications which are
06:42 - better for waterfall or agile well let's
06:44 - take a look at a healthcare website
06:45 - because of the sensitivity and nature of
06:48 - people's health you are gonna have to
06:50 - build something that works right out of
06:51 - the gate without any problems or at
06:53 - least minimize the problems that they
06:54 - have and if something goes wrong you're
06:56 - gonna have to have the support staff and
06:58 - structure to address your users
07:00 - questions so in this case for a
07:02 - healthcare application you're likely
07:04 - gonna have to think through a number of
07:06 - scenarios to make sure that your
07:07 - application is working and if it doesn't
07:09 - you have recourse for your users if you
07:11 - contrast that to an online store where
07:14 - somebody might be selling their art
07:16 - most of the time it's not life or death
07:18 - as somebody can't buy a painting your
07:20 - users will likely come back to the
07:22 - website and put up with a number of bugs
07:24 - even if they're not successful in the
07:26 - first try another good example of a
07:28 - waterfall application would be something
07:30 - for your bank your money is important to
07:32 - you and your trust in that bank is the
07:35 - only thing that's keeping you there so
07:36 - if the bank's application doesn't work
07:38 - or it's really bugged you might start to
07:40 - question the legitimacy of that bank so
07:42 - again the application has to work from
07:45 - the very first time that it's used from
07:46 - any number of users in any number of
07:48 - locations or situations and if you
07:50 - contrast that to a social media
07:53 - application which would be a great
07:54 - candidate for an agile workflow the idea
07:57 - here is to adapt to the new user base as
07:59 - quickly as possible which means getting
08:01 - their feedback and trying new features
08:03 - and deploying as quickly as you can if
08:05 - it's buggy or doesn't seem to work
08:07 - completely right it doesn't look
08:08 - completely right your users will likely
08:10 - be very forgiving of that if you're
08:12 - providing them the service that they
08:13 - want put another way if your social
08:16 - media application isn't working like you
08:17 - hope it would that's a different story
08:19 - than if your bank application is
08:21 - freaking out on you
08:23 - hi this is Pat with code Academy I
08:25 - really hope that you found this video
08:27 - helpful but did I answer all your
08:28 - questions do you have more do you want
08:31 - to know more about waterfall leave a
08:33 - comment below or subscribe to this
08:35 - channel
08:35 - I love responding to learners comments
08:37 - we'll leave some links in the show
08:39 - description that can give you a better
08:41 - understanding of what waterfall
08:42 - development is and where to use it and
08:45 - if you're ready to start your
08:46 - programming career or come on over to
08:48 - code Academy we'll help you get started