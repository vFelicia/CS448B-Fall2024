00:00 - hi this is Pat with coke Adam II I am a
00:02 - web developer based in Washington DC if
00:05 - you're new to web development you've
00:07 - probably heard the term pull request but
00:10 - you're not sure what it means some
00:12 - developers even jump into their first
00:14 - jobs and still don't even know what it
00:17 - means how was me that's okay it's not
00:20 - exactly it's self-explanatory so in this
00:23 - video we'll discuss what a pull request
00:24 - is why you want to use it what makes it
00:26 - important
00:27 - and I promise by the end you'll be
00:29 - opening up your first pull request with
00:31 - confidence
00:32 - so what is a pull request well to
00:36 - understand a pull request we have to
00:39 - understand yet if you're not familiar
00:41 - with what git is or you kind of know it
00:44 - but have a little bit of a shaky
00:46 - foundation don't worry I will link a
00:48 - video below that will help explain what
00:50 - all that is so that you put that into
00:52 - context now put yourself in the shoes of
00:55 - a team of developers and you have a
00:58 - single source code base that you're all
01:00 - working off of but each of you has
01:03 - different tasks that you're working on
01:05 - you know somebody might be updating the
01:07 - front end somebody might be updating the
01:09 - back end but each of those changes kind
01:12 - of affects the other what happens when
01:14 - multiple people need to work off of the
01:16 - same source code if it's the same files
01:18 - and even the very same lines imagine
01:22 - sending somebody an email and then
01:24 - waiting for them to put their changes in
01:26 - and then the email back to you and then
01:28 - you update your changes it's not
01:30 - efficient you have to work on the same
01:32 - code at the same time and this is why we
01:34 - need version control because without a
01:37 - way to control the versions each person
01:40 - will be overwriting each other's work
01:42 - you don't know what the other person is
01:44 - working on you don't know if you're
01:46 - deleting or overriding what they've done
01:50 - yet allows developers to make
01:52 - contributions without interfering with
01:54 - each other's work or getting in their
01:56 - way but there does come a time when you
01:58 - have to reconcile the changes when it
02:00 - comes time to fold your changes into
02:02 - somebody else's the process is known as
02:04 - a pull request so at its core a pull
02:09 - request really seeks to answer the
02:11 - question what did you change
02:12 - there's a couple of reasons that we want
02:15 - to formalize this process we could just
02:18 - fold it in but we want to give a little
02:20 - bit of time and space for allowing to
02:22 - ask for feedback on the changes that you
02:24 - made this is usually a pretty
02:27 - straightforward process but we're also
02:29 - soliciting advice on how to improve our
02:32 - code and also to ask if there is
02:34 - anything that's wrong with our code that
02:36 - we might not be aware of we will have
02:38 - our specialties and our experience with
02:41 - the code base but there may be things
02:43 - that we haven't taken into account that
02:44 - we absolutely need so moving forward
02:46 - pull requests also allow you to
02:48 - contribute code to a code base that you
02:51 - don't own or don't have permissions to
02:53 - post to and this is especially helpful
02:55 - for open-source when we think about
02:57 - projects where we have a ton of
02:58 - developers from a bunch of different
03:00 - backgrounds and places that are all
03:02 - contributing to the same source code the
03:04 - only way to figure out whose code needs
03:06 - to come in and what those changes are
03:08 - being proposed to is through a pull
03:10 - request and so it consolidates your
03:12 - changes into a succinct presentation of
03:14 - what you changed added or deleted there
03:17 - are places where you can comment and
03:19 - request changes on specific files and
03:22 - even specific lines and this creates an
03:24 - environment for your peers and
03:25 - co-workers and even your friends to
03:27 - discuss the changes in context so this
03:31 - is a pull request it is a formal process
03:33 - of saying this is what I changed and
03:35 - asking if it's okay for us to merge this
03:39 - into the final source code so how does a
03:43 - pull request work well imagine that we
03:46 - have this block of code here this is our
03:48 - source code and when we create a pull
03:51 - request the first thing we have to do
03:53 - before we even get to that stage is we
03:55 - have to create a branch a branch is just
03:58 - a copy of the original source code as it
04:00 - is it's literally as if you had done
04:03 - ctrl C and then done ctrl V the branch
04:07 - though represents a copy of this master
04:09 - source code but one that you can change
04:12 - completely without affecting the master
04:15 - branch and once you have your your
04:18 - source code copy what you can do then is
04:20 - you can and make your changes there you
04:22 - can you know complete your ticket your
04:24 - task
04:25 - and we're not worrying about affecting
04:27 - the final source code and this could be
04:29 - big or small and meanwhile the master
04:32 - hasn't changed it could have changed
04:34 - from other developers that have merged
04:36 - into it with their pull requests but so
04:38 - far as you know the source code hasn't
04:40 - changed and that's important because we
04:42 - don't want the website to break and
04:45 - that's why we have to make absolutely
04:46 - sure that the final master source code
04:49 - is functioning and working properly
04:51 - anytime we make changes to that source
04:53 - code we'd have to go through a formal
04:55 - process of reviewing it before we submit
04:58 - it for that final merge once you have
05:01 - all of your changes in you create a pull
05:03 - request and you're going to ask for
05:05 - reviewers will who will then look at the
05:08 - changes and either request them or
05:10 - approve them this can be a rather
05:12 - arduous process depending on how large
05:14 - the task is how many files you changed
05:17 - and were affected and the the depth and
05:19 - width of what those changes were but
05:22 - what the pull request allows us to do is
05:24 - to look at the source code side by side
05:26 - from what it was to what it's proposed
05:29 - to be so that we understand the
05:31 - implications of what we're trying to
05:32 - change if all goes well and everything
05:35 - checks out the branch is then merged
05:37 - into master and your changes then become
05:40 - part of the new source code so that as
05:43 - we move forward we can then create new
05:45 - branches to make changes off of but now
05:48 - we're going off of a new updated version
05:50 - of the master source code so the last
05:52 - part here is why pull requests and we
05:55 - touched on a couple of these topics a
05:56 - little bit but when we think about the
05:58 - health of us of a code base we always
06:01 - think about the health of a team of
06:03 - developers because developers work in
06:05 - teams and they benefit from the feedback
06:08 - of their peers all developers can
06:11 - absolutely get better at what they do
06:13 - but some of them are coming in with more
06:16 - experience than others and the only way
06:18 - you can really gain that experience and
06:20 - gain that feedback is with a formal
06:23 - process like the poll requests but it's
06:25 - kind of like learning on the job it's
06:27 - it's a chance for you to understand a
06:30 - little bit better what you were trying
06:31 - to do and maybe do it better next time
06:33 - you could also take this time to nip any
06:35 - bad practices or
06:37 - better solutions perhaps your solution
06:39 - works and there's nothing wrong with it
06:41 - but there might be a better way to do it
06:43 - and this is a chance for you to get that
06:45 - feedback it also creates an opportunity
06:47 - to make sure that the code that is being
06:49 - merged into the final source code won't
06:51 - cause any problems and this is really
06:53 - important is because once we send the
06:56 - source code out to production out into
06:58 - the wild everyone is going to be
07:00 - assuming from the CEO of the company
07:02 - right down to yourself that the final
07:05 - source code works to make sure that what
07:08 - we've done isn't going to affect the
07:10 - final production branch lastly you might
07:14 - not know on the entire code base by
07:17 - heart and it's very possible that while
07:20 - you're working on your task or your
07:21 - tickets that somebody else will have
07:24 - come in and done their own work and then
07:26 - merge it into master and so now what you
07:29 - want to commit to is different than what
07:31 - you inherited it from so it is a last
07:34 - chance to make sure that there aren't
07:36 - any conflicts meaning that what was
07:38 - written on source code has changed from
07:40 - the original time that you had copied it
07:44 - hi this is Pat with code Academy thanks
07:47 - so much for watching I hope you found
07:49 - this video helpful but did I answer your
07:52 - questions do you have other questions
07:53 - about pull requests leave a comment
07:56 - below or subscribe to this channel
07:58 - I like responding to learners questions
08:00 - we'll leave some links in the show
08:02 - description that can help you give you a
08:03 - little bit more information about pull
08:05 - requests but if you're ready to take the
08:07 - next step come on over to code Academy
08:09 - we'll help you get started with your new
08:10 - programming career