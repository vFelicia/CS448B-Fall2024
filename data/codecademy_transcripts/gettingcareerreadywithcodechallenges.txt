00:00 - to confirm that
00:02 - sounds good hi
00:05 - uh do you see us alicia
00:07 - i do not see this on the youtube page
00:09 - now
00:09 - all right not yet probably a little bit
00:11 - of a delay
00:17 - cool i think
00:19 - there we are so
00:20 - hello everyone uh my name is alex i am
00:23 - here with the great alicia alicia hello
00:26 - how are you doing
00:27 - hey i'm
00:28 - good cool and we are here today to demo
00:32 - code challenges one of the new features
00:34 - that we just introduced uh to the
00:36 - website so hello everyone we're live on
00:39 - youtube and i think facebook and twitter
00:41 - and even twitch
00:42 - uh if you're if you're watching this uh
00:45 - elise and i are looking at the youtube
00:46 - chat right now um so welcome feel free
00:49 - to post questions in the chat feel free
00:52 - feel free to say hi in the chat we'll
00:53 - keep an eye on that as we're going uh
00:55 - this will also be posted on youtube
00:57 - after the fact and so if you miss this
00:59 - or have to run uh don't worry you can
01:00 - always catch it on youtube after the
01:02 - fact and if you're watching this on
01:03 - youtube after the fact hello as well
01:05 - um
01:07 - cool so let's go ahead and get started
01:09 - uh this is gonna be just a half hour
01:11 - session so we have a lot to get through
01:14 - i'm going to go ahead and share my
01:15 - screen
01:17 - and we are here today to talk about
01:20 - uh code challenges
01:22 - um let me first quickly navigate to the
01:25 - code challenge page uh on codecademy and
01:28 - then we can talk a little bit about what
01:30 - these are so these are found up in the
01:32 - resources tab and these are the
01:34 - challenges and so when we go here you'll
01:37 - see that we have a bunch of different
01:38 - code challenges and you can sort them by
01:41 - three different languages right now so
01:42 - we have them in python javascript and
01:44 - java
01:46 - before we get too far alicia do you want
01:48 - to kind of describe
01:49 - what code challenges are how they might
01:51 - be useful
01:52 - um why people might be interested in
01:54 - using them stuff like that
01:56 - yeah absolutely so basically code
01:58 - challenges are meant to emulate a
02:00 - whiteboarding question um you know you
02:02 - can take paths to get ready for
02:03 - interviews but you actually want to get
02:04 - the practice with doing the whiteboard
02:06 - questions themselves um and these are
02:08 - created to be taken after completing the
02:10 - interview prep paths or if you think you
02:11 - have all the content ready um you can
02:13 - just dive right in basically we give you
02:15 - the question we give you the workspace
02:17 - and you're answering it we give you a
02:19 - sample input and output and then we test
02:21 - your inputs against what we expect and
02:24 - we tell you if you pass or not but it's
02:26 - really free structure it's for you to
02:27 - actually kind of formulate your own
02:29 - thinking as you would in a real library
02:31 - question
02:32 - yeah and so i think if folks have never
02:34 - had a whiteboarding question or never
02:36 - had a technical interview these are
02:37 - really common where you're kind of asked
02:39 - to do a coding challenge this coding
02:41 - challenge has multiple solutions there's
02:43 - probably
02:45 - uh degrees of
02:47 - um
02:48 - cleverness that you can implement in
02:49 - these uh challenges where stuff like
02:51 - there's probably a kind of naive
02:53 - solution and then if you're in that
02:55 - interview they're gonna kind of push you
02:56 - to get to more clever or faster or
02:59 - better solution um
03:01 - and there's tons and tons and tons of
03:03 - these types of questions out there and
03:05 - so this is a great way to practice that
03:08 - um
03:10 - yeah i'm looking at chat and i see a
03:12 - couple of good questions already uh
03:15 - when can we expect code challenges for
03:16 - sql i think sql is like a little bit of
03:19 - a different beast where sql questions
03:21 - are probably not as much about
03:23 - algorithmic complexity and uh solve this
03:26 - coding problem they're probably a little
03:28 - bit it's probably just a little bit of a
03:30 - different interview format um but that
03:32 - would be an interesting one to find
03:36 - let me go ahead and demo one of these in
03:38 - particular
03:39 - uh i've prepped the first one that we
03:42 - have under java prime number
03:44 - finder and so this will give you a
03:46 - little bit of a taste of what these code
03:48 - challenges are like
03:49 - um
03:51 - this is a good example where there are
03:53 - again kind of varying levels of
03:56 - complexity to the solution that you
03:58 - might write and so this question in
04:00 - particular is telling you okay we want
04:03 - you to write a function named prime
04:05 - finder that finds all of the numbers n
04:08 - uh between one and n at r prime so for
04:12 - example if you do
04:13 - private finder of 13 it's going to give
04:16 - you 2 3 5 7 11 and 13.
04:19 - um like alicia was saying
04:22 - really one of the things that already
04:24 - existed on codecademy before developing
04:26 - these were giant paths helping you get
04:30 - prepared for technical interviews and
04:34 - so
04:34 - if you encounter this problem and
04:37 - are a little bit stuck on
04:39 - how to tackle it
04:41 - we think that
04:42 - these technical interview paths are
04:44 - really a great place to start where
04:46 - uh
04:48 - you know if you're if you're a real
04:50 - beginner at coding it will walk you
04:52 - through some of the basics some of these
04:53 - basic data structures start talking and
04:56 - we'll start talking about um
04:58 - algorithmic complexity
05:00 - and then
05:01 - uh
05:02 - what's really kind of interesting is
05:04 - ultimately we get into
05:05 - [Music]
05:06 - kind of some of the more clever
05:08 - solutions for some of these projects so
05:10 - in particular the reason why i'm i'm
05:11 - showing off prime number finder is at
05:14 - the end of this path at this uh
05:16 - technical technical interview path we
05:18 - have this article
05:19 - that
05:20 - uh kind of walks you through a way to
05:23 - cleverly solve this prime number finder
05:26 - um i i don't even know how to say this
05:28 - uh alicia can you pronounce it or no
05:32 - eratosthenes i believe yeah
05:34 - so this is a clever way of finding prime
05:36 - numbers there's a there's kind of a fun
05:38 - gift here to show how that process works
05:40 - um
05:41 - so i think that this is
05:43 - uh this is a great example of
05:45 - if you get stuck on some of these
05:47 - technical interview problems there's
05:49 - probably something in this path that
05:51 - will help you get unstuck
05:55 - um alicia
05:57 - in
05:58 - this uh in this code challenge itself
06:00 - what are some of the like features that
06:01 - uh are noteworthy i guess or what should
06:03 - we highlight about this new code
06:05 - challenge feature
06:07 - yeah so um in the question itself one of
06:09 - the things we do is we link you to the
06:11 - path um in case you want more places to
06:13 - brush up for some of them we link to a
06:15 - specific lesson or article we also talk
06:17 - about where this question has been asked
06:19 - because we want to make sure that we're
06:20 - giving you questions that are based in
06:22 - real world problems so this one was
06:23 - asked at facebook um and i'm sure other
06:25 - places as well
06:26 - and namely we give you something like
06:29 - for prime finder 13 we tell you what it
06:31 - should return to give you an example so
06:33 - you know what you're working off of
06:35 - and then basically the biggest thing is
06:36 - a different ui so there's an output and
06:38 - then there's a test case where like you
06:40 - actually test your code so you can run
06:42 - it without testing it first
06:44 - yeah i think uh let's demo that test
06:46 - case and
06:48 - uh i'm sorry to chat but i'm not going
06:50 - to code this up live i have the solution
06:52 - code uh i have one solution uh
06:55 - copied in a note stock over here
06:57 - um we can actually even kind of like
06:59 - talk through this solution i think that
07:01 - it's um it's a little bit interesting
07:03 - and it's a
07:04 - good example of ways in which you can
07:06 - solve these problems in different ways
07:08 - um this is kind of a
07:10 - brute forcey or naive solution
07:14 - where
07:15 - um
07:17 - essentially i'm looking through all of
07:18 - the numbers
07:20 - from
07:20 - one to n so i'm going to say okay is is
07:23 - one prime is two prime is three prime is
07:25 - four prime and so on and then in order
07:27 - to figure out if it's prime i'm gonna
07:29 - loop through all of the numbers from one
07:31 - to n again or from uh technically from n
07:35 - to one and see if it's divisible and if
07:37 - it's only divisible by itself and one
07:39 - then it's prime
07:40 - um
07:42 - i this is this is all a little bit like
07:43 - in the weeds of this particular problem
07:45 - so like don't worry if um all of this is
07:47 - foreign to you if you
07:49 - uh don't know java if you're super
07:50 - intimidated by uh
07:52 - you know all of this code again that's
07:54 - kind of what the technical interview
07:56 - path is preparing you for um for doing
07:58 - this kind of stuff
08:00 - um
08:01 - but if i go ahead and run my code
08:04 - so
08:05 - yeah run my code
08:08 - you can see that
08:10 - my test output uh was just run so i
08:13 - called my function with 13 i can change
08:15 - this to
08:16 - you know 20 if i wanted to
08:19 - run my code there are all the primes
08:21 - between 1 and 20.
08:23 - and then
08:25 - i can also test my code so we have
08:28 - uh we have tests that are kind of hidden
08:29 - on the back end that will check to see
08:31 - if what if the function that you've
08:33 - written
08:34 - is actually doing what uh the prompt is
08:36 - asking you to do so
08:38 - uh let me actually
08:41 - get this incorrect so
08:44 - i'm going to
08:46 - uh i'm going to screw this up so if i
08:48 - run this you'll see
08:50 - this is now incorrect these are not the
08:51 - prime numbers between 0 and 20. so if i
08:54 - test my code
08:57 - you'll see that okay 0 out of 5 tests
08:59 - have passed
09:01 - but if i
09:05 - accurately solve the problem
09:09 - got all of our tests um have passed
09:12 - so again that's it's a little bit
09:14 - similar to like lessons in codecademy
09:16 - right we we have this um testing
09:19 - framework it it exists on codecademy but
09:22 - um every single one of these interview
09:25 - problems are going to have five tests
09:27 - behind the scenes they're all going to
09:28 - be testing your code regardless of
09:30 - implementation so right you could have
09:32 - solved this problem in a completely
09:33 - different way and
09:35 - the test will either pass or not pass
09:38 - so it's a little bit different there
09:41 - after you pass the challenge we give you
09:44 - the option to submit the challenge
09:47 - and i'll show you what that looks like
09:49 - essentially
09:50 - um
09:52 - the idea behind submitting the challenge
09:54 - is now that you've solved it maybe you
09:56 - want to clean up your code a little bit
09:58 - maybe you want to put comments maybe you
09:59 - want to describe what you're doing again
10:01 - kind of thinking through
10:03 - the technical interview itself of if you
10:06 - just coded this up in a technical
10:07 - interview you're not really going to be
10:10 - the interview doesn't end there right
10:11 - you're going to be asked to explain what
10:13 - you did explain your thought process
10:15 - what are the drawbacks of this this
10:16 - solution what are the advantages of this
10:18 - solution
10:19 - um
10:20 - right you need to be able to explain
10:21 - your work and so we wanted to give you
10:23 - an opportunity to also practice that
10:25 - portion of the interview and so we do
10:28 - this through the forums so you can copy
10:30 - your code
10:32 - and then you can go to the challenge
10:33 - forums
10:35 - and
10:36 - this will be a
10:38 - place where other people who have
10:41 - solved this challenge can post their
10:44 - their solution so you can see already um
10:47 - this launched super recently so
10:50 - um there aren't a ton of people in here
10:51 - but you know there's a
10:53 - uh
10:54 - someone posted this this solution two
10:56 - days ago looks like a kind of a similar
10:58 - solution to mine two for loops they're
11:00 - using this break statement which i
11:02 - didn't use so slightly different
11:04 - um
11:07 - this person is
11:09 - same kind of thing nested for loops um
11:11 - so you can see that there are a lot of
11:13 - different
11:15 - implementations
11:17 - and solutions to this challenge and so
11:18 - we're really hoping that people kind of
11:20 - discuss and chat with each other and
11:23 - talk about their best solution
11:27 - alicia any questions from the chat that
11:29 - we should uh tackle
11:31 - um most of the questions are regarding
11:33 - when new languages will be popping up um
11:35 - and i think q1 of next year is probably
11:37 - the best bet
11:38 - yeah i know that um
11:40 - right now we are uh alicia and myself
11:44 - and our team are working on building out
11:45 - more of these
11:46 - so
11:48 - right now we have a total of 15 per
11:51 - language um
11:53 - we are building out another 15
11:55 - with just more variety of types of
11:58 - questions more
11:59 - data structures more kind of like
12:01 - algorithmic strategies that you can
12:03 - you can that's you can use um so really
12:06 - just trying to get a good
12:08 - variety of these kind of questions
12:11 - um
12:13 - let me take a look at my notes
12:17 - um
12:22 - one of one of the other things uh this
12:23 - is like perhaps a little bit
12:25 - self-explanatory but one of the other
12:27 - things that i wanted to note and let me
12:29 - get back to the code challenge itself
12:32 - um
12:39 - this will load
12:44 - can you not click into it
12:46 - i think it's i think it's trying to load
12:48 - let me uh
12:51 - open up a different one
12:57 - let me try
12:58 - alicia if you want to try loading one up
13:00 - you can uh
13:02 - you can potentially screenshare the
13:04 - thing that i wanted to demo was that um
13:07 - the
13:09 - the um code editor that we have and it
13:11 - looks like it's just loaded um the code
13:13 - editor that we have we obviously have
13:15 - these back end tests that are telling
13:16 - you if you've got something correct or
13:18 - incorrect but um in our output terminal
13:21 - this can this can also give you any
13:23 - information that you want including um
13:25 - errors and debugging right so if i make
13:28 - an error let's say i forget that i'm
13:29 - working in java here and i try to print
13:32 - hello um and i run my code
13:37 - you can see that
13:39 - kind of your usual
13:40 - error message pops up so uh
13:43 - you'll get lots of feedback on when
13:45 - you're actually trying to code out this
13:46 - challenge beyond our test cases that are
13:48 - either passing or failing
13:52 - um
13:53 - yeah and actually this is a good example
13:55 - of um
13:57 - this question in particular
13:59 - is relevant to heaps and so we we link
14:02 - you out to
14:03 - um
14:04 - the lesson that we have on heaps
14:10 - cool um
14:12 - i think that that is pretty much all we
14:14 - wanted to show off um
14:17 - we're happy to take any questions from
14:19 - the chat if there are any um but if not
14:22 - this can be a
14:24 - a short live stream um
14:26 - so if anyone has questions in the
14:28 - youtube chat and you know what let me
14:30 - actually open up
14:34 - try to find twitter facebook as well
14:53 - nothing so far in the chat yet
14:56 - okay cool well then maybe we will call
15:00 - it there um we're super excited about
15:03 - this feature i think that it's
15:05 - a next great step towards codecademy
15:07 - really helping you prepare for
15:10 - um landing a new job whether you're an
15:12 - upskiller or whether you're um moving
15:14 - into tech for the first time uh you know
15:17 - previously we've had all of this
15:19 - curriculum we've had all of these great
15:20 - paths that are that are huge and you
15:23 - know if you if you went through this
15:24 - entire path you would certainly learn a
15:27 - lot about
15:29 - how to prepare for these technical
15:30 - interviews but we never really had
15:32 - anything that tried to emulate that
15:33 - technical interview process
15:36 - and so yeah we're really excited about
15:37 - this kind of the next step in that
15:39 - career journey that we're trying to uh
15:42 - trying to make so
15:43 - yeah um
15:45 - feel free to leave comments on this
15:47 - youtube video if your feedback about
15:49 - code challenges um
15:52 - yeah and i hope i hope a lot of you
15:54 - start using it and posting to those um
15:56 - those forums
15:58 - um
16:00 - cool
16:01 - all right
16:03 - with that alicia i think we'll
16:05 - we'll call it there so thank you
16:06 - everyone for checking us out and we will
16:09 - see you later