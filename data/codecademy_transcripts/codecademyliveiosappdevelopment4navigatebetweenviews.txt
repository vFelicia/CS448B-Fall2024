00:35 - all right
00:36 - hello everyone here welcome to another
00:40 - live stream we are continuing our series
00:42 - to build an ios quiz app in swift ui
00:47 - so we're going to review where we
00:49 - started on right now and this should be
00:50 - the final lesson
00:52 - live stream in the series we're going to
00:54 - take us through
00:55 - finishing the rest of our quiz
00:56 - application uh and then show you some
00:59 - next steps that you can take for working
01:01 - on this on your own
01:02 - so
01:03 - i hate everyone here i can look along
01:05 - and chat and let us know where you're
01:07 - coming in from if you're watching live
01:09 - and hello to everyone who's going to be
01:10 - watching this uh later on as well
01:14 - so let's go ahead and get started and
01:15 - take a look at where we left off at the
01:17 - end of the last session as a reminder
01:19 - you can find all this on the swift ios
01:22 - live stream github page and i'll shoot
01:24 - you a link for that in chat in just a
01:26 - second and that's where we're following
01:27 - along from now in the live stream three
01:30 - branch
01:32 - so
01:32 - uh what are we up to here let's take a
01:35 - look at the state of our application as
01:36 - we left it
01:38 - so we can see from here that when we
01:40 - start off in our application we get our
01:42 - quiz app we have this quiz time at the
01:44 - top we've got our questions and then we
01:46 - can go ahead and put in
01:48 - our answers
01:50 - and as we answer we get this little next
01:52 - popping up we saw last session that we
01:54 - learned about state and how we can be
01:56 - transitioning from one question to
01:59 - another question
02:01 - by adding in these different property
02:03 - wrappers around what our variables are
02:06 - so we're going to add this component of
02:07 - state where these change over time
02:09 - so we see the different questions as
02:11 - we're answering them we got to the last
02:13 - questions
02:14 - and then
02:16 - we stopped because we weren't sure what
02:17 - to do after that
02:19 - and so we originally were breaking
02:21 - so we gotta figure out how it is that we
02:23 - can not crash which we did but also how
02:26 - can we show them that the game's over
02:28 - and tell them how they did on the quiz
02:31 - and hi from everyone and on chats you've
02:34 - got some people from new york city and
02:35 - israel so kind of got a good range here
02:38 - which is great
02:40 - okay so let's go ahead and get started
02:43 - so what we want to do in this session is
02:45 - finish the quiz app by adding in
02:48 - this results screen so once we click
02:50 - next to the last time we can see
02:52 - something useful
02:53 - and we want to add in a little bit at
02:55 - the beginning where we can just welcome
02:57 - learners to the application say hey
02:59 - you're about to take a quiz this is
03:00 - what's going to go on and then let them
03:02 - get started from there let's go ahead
03:04 - and build that welcome view first and
03:06 - then we'll take a look at how it is that
03:08 - we can be transitioning after the quiz
03:10 - is over we'll learn a couple tricks from
03:12 - going over the introductory welcome
03:14 - screen that will be able to adapt for
03:16 - figuring out how to end artwiz
03:19 - so
03:20 - let's start with our welcome screen
03:22 - so right now our application starts just
03:25 - on this page right here we're already in
03:27 - the quiz let's just add a little screen
03:29 - in front of it where people can kind of
03:30 - get context for what they're going to be
03:32 - looking at
03:33 - so
03:34 - by this time we've made a bunch of new
03:35 - views already we're going to make one
03:37 - more so we're going to make in this
03:39 - views here
03:40 - a new file which is going to be a swift
03:43 - ui view and this is going to be our
03:45 - welcome view
03:47 - welcome view
03:51 - okay so
03:53 - as always we can have our canvas up here
03:54 - so we kind of see what we're making as
03:56 - we're making it so we want for a welcome
03:58 - view is a little bit of text up at the
04:00 - top that just kind of welcomes people
04:02 - into our application let's just lets
04:03 - them know what's going on uh we want to
04:05 - have that bottom bar that's going to go
04:08 - ahead and tell learners like hey this is
04:10 - what you should be expecting or sorry
04:12 - this is what when you click on this you
04:13 - can go and see the rest of the questions
04:15 - on the quiz
04:17 - so before we do that let's go ahead and
04:18 - get started by adding in our little
04:20 - background color that we've had for the
04:22 - rest of our application
04:23 - using this z-stack trick here
04:26 - so we want to have a background color
04:29 - that everything else will bleed through
04:31 - for now let's just copy and paste this
04:32 - from here
04:35 - i say for now because we're going to
04:36 - revisit that in a second
04:38 - and then just add a background color and
04:40 - check out what our view looks like here
04:43 - okay so we've got the same color going
04:44 - on which is great now let's go ahead and
04:46 - just build this view out
04:48 - so we want to go ahead and add in a
04:50 - v-stack which is going to be a vertical
04:52 - stack
04:53 - and then what we want to do in that
04:54 - v-stack because we want to have a text
04:58 - which is just showing
04:59 - maybe we should take this text in the
05:01 - game view where we say quiz time let's
05:03 - just move that in actually because this
05:06 - really doesn't need to happen at every
05:08 - question probably makes a lot more sense
05:10 - if it just happens for the specific
05:12 - question or sorry at the beginning of
05:14 - the application entirely
05:16 - so let's grab this quiz time here
05:18 - go back into our welcome view
05:20 - and then add that as our first text here
05:24 - uh and question chad actually glad you
05:26 - could build apps in the cloud using slow
05:28 - macbook air that is the promise of xcode
05:30 - cloud building which sounds really cool
05:32 - i have not actually played around with
05:33 - it yet but if it works that is what it
05:36 - says it does which would be fantastic
05:38 - because on older devices it can take a
05:40 - long time sometimes
05:42 - uh okay great so we've got that quiz
05:44 - time right there and now let's go ahead
05:46 - and have a little prompt for learners so
05:48 - that they know what they're expecting
05:50 - so select the
05:53 - correct answer to each of the following
05:56 - questions
05:59 - and then we can be resuming just kind of
06:01 - get updated on how our ui is changing
06:03 - you can see it's a little small maybe
06:05 - you want to make that
06:06 - a little bit bigger so we can give it a
06:08 - different font maybe a title tube
06:10 - that's kind of like an h2 from if you're
06:13 - used to working with html
06:15 - uh and then let's give this a little
06:16 - padding as well
06:19 - okay
06:20 - so far so good let's go ahead and push
06:22 - these views up a bit we can do that
06:23 - using a spacer
06:25 - these views get bumped up up to the top
06:27 - and then what we want to do is have a
06:29 - little button at the bottom that's going
06:31 - to
06:32 - let them go from this welcome screen to
06:35 - the actual quiz
06:37 - now last time we made a bottom view
06:40 - right here
06:41 - this bottom text
06:43 - and we made this a button by itself
06:46 - well
06:47 - that worked from before but maybe we
06:48 - just want this to be a text and have it
06:50 - do something a little more interesting
06:52 - than just have uh some command we're
06:54 - passing in let's do a quick refactor
06:56 - here and change this bottom text
06:59 - to not be a button also and we'll move
07:02 - the button aspects of it back to the
07:04 - view it was coming from
07:06 - so let's do that by getting rid of this
07:08 - on flick handler here
07:11 - and then just taking this label and
07:13 - having this be the thing that we're
07:15 - pulling out from here
07:18 - so we've got
07:19 - a
07:20 - text in between two spacers
07:26 - then what we can do is here instead of
07:28 - making this uh passing it in this way
07:31 - we'll just make a button here
07:34 - have our button take in an action and a
07:36 - label
07:37 - the action will be the same this view
07:40 - model advanced game state that's what we
07:41 - want to do
07:43 - and the label is going to be that bottom
07:45 - text that says next
07:47 - bottom text saying next
07:50 - okay
07:51 - then we can go ahead and get this check
07:53 - to see that this builds
07:56 - which it should
07:59 - then as always once we change something
08:00 - we want to go back and make sure that
08:02 - still looks okay
08:06 - so we can see that as we
08:08 - play to start our little canvas we see
08:10 - the bottom button comes up and that
08:12 - looks a little better before only the
08:14 - text that kind of worked as a button now
08:16 - the whole thing works with a button it's
08:18 - a little bit nicer anyways
08:19 - okay so that's still working fine
08:21 - now going back to our welcome view now
08:24 - that we made this bottom text just a
08:26 - text again just with a couple h stacks
08:28 - and some formatting we can go ahead and
08:30 - use that at the bottom of our welcome
08:32 - view
08:33 - so we can go ahead here
08:35 - and add in our bottom text
08:38 - now when we put in our bottom text we
08:41 - want to say something like uh let's go
08:43 - we can see it showing up here
08:46 - okay now this is just text right now
08:49 - it doesn't particularly do anything
08:52 - uh we want this to do something we want
08:54 - it so that when we click on this
08:56 - something happens
08:57 - now previously the way that we've seen
08:59 - how to use swift ui for that is by using
09:02 - uh just buttons like we were just taking
09:04 - a look at but swift actually gives us a
09:06 - really powerful tool from transitioning
09:09 - from one view to another view
09:12 - and that concept in general is called
09:14 - navigation like if you are on any
09:17 - application in your phone let's say that
09:18 - you click on the link in facebook or
09:21 - instagram or whatever and something else
09:22 - pops up and you have like a little back
09:24 - button there's a really easy default way
09:26 - to get that kind of behavior in swift ui
09:29 - and that concept is called navigation
09:31 - and so the views in swift are called
09:33 - navigation links and navigation views
09:36 - a navigation link is just like a button
09:39 - but it's a button that has a special
09:41 - purpose of sending you to some other
09:43 - view
09:44 - so instead of this just being a bottom
09:46 - text we can wrap it inside of a
09:49 - navigation link
09:51 - which it says here is a special view
09:53 - that controls a navigation presentation
09:57 - so this initializers look fairly similar
10:00 - you've got you know
10:02 - labels or titles in this case we want to
10:04 - label because we have our own view that
10:05 - we're using not just text
10:07 - and we want here to be uh showing the
10:10 - destination as well
10:12 - so this destination is where should i go
10:14 - and this label is what should i look
10:16 - like
10:17 - so we can go ahead and make this the
10:19 - same bottom text let's paste that in
10:20 - from here
10:24 - and then our destination we say where
10:26 - should we go well we should start a game
10:29 - view
10:29 - we should go to this view right here
10:32 - once we start
10:33 - now if we look closely it's a little
10:35 - small but you can see that this doesn't
10:37 - look like a very promising button it's
10:40 - kind of gray doesn't seem like it
10:42 - actually goes somewhere
10:44 - that's because any time you have a
10:46 - navigation link
10:48 - doesn't do anything unless it's wrapped
10:50 - in a navigation view
10:52 - inside a navigation view that tells
10:55 - swift ui hey
10:56 - start some kind of stack thing so that
10:59 - people can tap on buttons and present
11:01 - new views on top of it if you don't have
11:03 - that navigation view it doesn't think it
11:06 - can go anywhere with these links it
11:07 - doesn't understand where it should be
11:08 - putting them putting the new views that
11:10 - come up
11:11 - so we can fix that
11:13 - by wrapping
11:14 - all of this z-stack here
11:17 - inside of a navigation view
11:22 - and what this does is it doesn't look
11:24 - like anything it's just blank but it's
11:26 - kind of a special meta view that tells
11:29 - swift ui that all of the navigation
11:32 - links inside of it are active and they
11:34 - have a place that they can be presented
11:35 - which is this navigation view
11:39 - we can see now that the button shows up
11:41 - in a much more promising blue
11:43 - and when we start and try to poke around
11:45 - here and click this let's go button
11:49 - now we get to see our next view show up
11:51 - here
11:52 - and we can see that we get this back
11:54 - button for free we actually might want
11:55 - to see i can get rid of it but the
11:58 - default behavior is that you can do this
12:00 - really seamless navigation back and
12:02 - forth which is really convenient
12:04 - let's go ahead also while we're at just
12:06 - add a little bit of padding to this
12:07 - bottom text
12:08 - just to make a match up the others all
12:10 - right there we go
12:12 - okay
12:13 - great
12:14 - so we've seen here that we can add this
12:16 - navigation link which just says where
12:18 - should we go and what should the label
12:20 - be from it and as long as we remember to
12:23 - wrap that navigation link
12:25 - inside of the z-stack
12:27 - then we can go ahead and figure it out
12:28 - here and there's a question is this an
12:30 - old video no this is happening right now
12:32 - so uh if you have any questions you can
12:34 - feel free to ask them you are watching
12:36 - this all live and i appreciate your
12:38 - comments from last time i remember we
12:39 - were talking about i think it was the uh
12:41 - changing guesses to uh selection which
12:43 - was a better name
12:45 - uh great
12:46 - uh yes this is also for ios applications
12:49 - so we're still looking at a ios
12:51 - simulator here
12:52 - so this is going to be the final video
12:54 - in the series building out an ios
12:56 - application absolutely
12:59 - uh okay so what we can do then is we can
13:02 - take a look see we said that we wanted
13:04 - to go to the game view which makes sense
13:06 - we can actually put any view that we
13:08 - want to in here
13:10 - so we can go ahead and add in a
13:11 - different view and then we would
13:12 - navigate there just fine if you remember
13:14 - making the controls view before
13:16 - well sure if we put a controls view in
13:19 - then this button would take us to the
13:21 - controls view it's the button and it
13:23 - just takes you to any view that you put
13:24 - in here it's a really neat way to
13:26 - connect different parts of your
13:27 - application
13:28 - so we want to go to that game view so
13:30 - we'll go ahead and put that game key in
13:31 - but you can put any destination you want
13:33 - to as long as it's a view
13:37 - okay
13:38 - so now we can see this navigation works
13:41 - and we have our welcome view setup
13:45 - okay
13:46 - so taking a look at this we can see that
13:49 - we have this back button here
13:51 - now this back button makes sense for the
13:53 - first question but it starts making a
13:56 - lot less sense as we start to go in the
13:58 - quiz once we start answering a few
14:00 - questions like let's say we get this
14:02 - wrong
14:03 - and that's wrong
14:04 - we still have this back button here and
14:07 - it doesn't really do what the learner
14:08 - might think someone's going through the
14:10 - quiz
14:11 - they might think this back button would
14:12 - take him to the previous question it's
14:15 - actually going to kick them all the way
14:16 - back to the welcome screen and that'd be
14:18 - a really bad user experience if you see
14:20 - a promising back button and you're like
14:22 - oh i can just go back maybe change my
14:24 - answer for the last question but then
14:26 - you're kicked all the way back to the
14:27 - main screen and you lose all the work
14:29 - that you just did so we want to make
14:31 - sure that we're not putting users in
14:33 - that spot so we can go ahead and hide
14:35 - the back button
14:37 - uh question what does padding refer to
14:39 - great question
14:40 - uh so the best way with any of these
14:42 - properties is always just like add stuff
14:44 - and get rid of it so let's type in
14:46 - padding for under let's say this one
14:49 - here you can see that we have our bar at
14:51 - the bottom
14:53 - if we type in padding it tells us it's a
14:55 - view that pads this view inside some
14:59 - edge inserts with a system calculated
15:01 - amount of padding
15:02 - what it means in practice is it just
15:04 - puts a little buffer around it to space
15:05 - it out a bit
15:06 - so if we got rid of this padding you
15:08 - would see this kind of shoot down a
15:10 - little bit
15:10 - putting in this padding
15:12 - means that it's going to just be bumped
15:14 - up into the sides a little bit here and
15:16 - actually see how it's kind of even
15:19 - crimped in the sides
15:21 - maybe we want this to be all the way
15:23 - across the bottom because if we get rid
15:25 - of this we can see that the bar goes all
15:28 - the way from the left to the right i
15:30 - think we still want that actually we
15:31 - just want to be up a little bit higher
15:33 - just be offset
15:34 - so what we can do is we can go ahead and
15:37 - just say that we only want the padding
15:40 - to be on the bottom
15:42 - and now you see it fills in from the
15:43 - sides right there
15:46 - so that's one way that you can kind of
15:48 - discover and play around with it the
15:50 - other is you can remember if you open up
15:51 - this panel you can go and look at any
15:54 - view that you have
15:55 - if you stop the kind of put it back in
15:58 - the viewer can mess around
16:00 - click on this view right here
16:05 - okay and then in the modifiers you can
16:07 - go ahead and add modifiers to any view
16:09 - that you like
16:10 - and one of the modifiers is going to
16:12 - tell you you can add in padding and
16:14 - it'll have the same kind of information
16:15 - there that you can go and mess around
16:17 - with
16:19 - okay
16:20 - that's on padding yeah feel free to ask
16:22 - any other questions for things that
16:23 - you're seeing as we're putting this
16:25 - together here
16:27 - okay
16:28 - so we've got our initial navigation view
16:31 - now we want to figure out how to hide
16:33 - that back button from the views that are
16:35 - going up next to it
16:38 - uh and yes with padding
16:40 - oh good question so if you're used to
16:42 - android studio or if you're used to
16:44 - building out applications with ui kit
16:46 - there was a lot of different screen size
16:48 - kind of finagling that you'd have to do
16:51 - and you're exactly right that um
16:54 - in swift ui you just put in padding and
16:56 - the system figures it out for you
16:59 - if you're working in ui kit which is the
17:01 - older ios framework there's a concept
17:02 - called size classes which talks about
17:05 - all the different devices you can have
17:06 - like uh ipads or iphones or big iphones
17:10 - small iphones i you don't have to worry
17:12 - about most of that most of the time in
17:14 - swift ui the defaults work really well
17:16 - for you if you are working in ui kit you
17:19 - still need to be talking about size
17:21 - classes and handling things separately
17:23 - but even in ios compared with android uh
17:26 - in android there are i'm i don't even
17:28 - know like maybe thousands of different
17:30 - screen sizes in ios there's only ever
17:32 - been like maybe 20 or 30 devices that
17:35 - have different sizes so it's a little
17:36 - bit simpler to work with but yeah it's a
17:38 - good question all right for the most
17:40 - part you don't have to worry about
17:41 - handling different sizes and we could
17:43 - even test that here
17:44 - by changing from an iphone to an ipad
17:48 - and we can get to see what our ui looks
17:50 - like now we haven't really been
17:51 - optimizing for it so it might not look
17:54 - fantastic but we can kind of let this
17:56 - load and see what it is yeah that's i
17:58 - was
17:59 - having to deal with multiple different
18:01 - device sizes can be pretty challenging
18:03 - and the ui here might not be perfect but
18:06 - swift ui will get you up and started
18:07 - with a really reasonable interface just
18:10 - from a lot of defaults
18:12 - uh is using geometry reader common uh
18:15 - yeah you'll need to use geometry reader
18:16 - if you're trying to do more complicated
18:18 - ui things that's typically the rationale
18:20 - for it
18:21 - and so here we can actually see some
18:23 - unusual behavior where we have this
18:25 - navigation view and because of that it
18:29 - so puts it like this here
18:33 - and that actually works fine and we can
18:34 - see that the views here we didn't really
18:36 - do anything for them
18:37 - and it kind of looks fine on an ipad
18:39 - it's a little spaced out
18:41 - but it adds a lot of handling for you to
18:43 - go ahead and put in the different
18:45 - components that you might want
18:47 - so
18:48 - and you can kind of see this this is the
18:49 - thing we want to get rid of because it
18:50 - doesn't really make sense to go back to
18:52 - but it's just it is a great note and
18:55 - it's cool to see that you get a lot for
18:57 - free when you're working on ios in terms
18:59 - of sizing
19:00 - yeah all right so i'll put this back to
19:02 - a iphone
19:05 - [Music]
19:07 - okay
19:09 - this will reload and now let's take a
19:10 - look at hiding that back button well we
19:12 - can go back and mess around with it in
19:14 - an ipad towards the end if we have time
19:15 - it is fun to get to see how seamless it
19:17 - is to transition between them
19:19 - okay so let's go ahead and take a look
19:21 - at
19:22 - what is our next view here that was the
19:24 - game view yeah exactly
19:28 - uh so we can take a look at the game
19:30 - view here and
19:32 - hide that back button now
19:34 - all we need to do to hide that back
19:36 - button uh yeah of course glad to go
19:39 - through some of that uh yes all we need
19:41 - to do to hide the back button is to add
19:43 - in the special property
19:45 - which is navigation bar hidden and
19:47 - passenger
19:49 - and that means if this ever happens to
19:51 - be in a navigation view it's just going
19:53 - to hide the back button
19:54 - so when we go back to our welcome view
19:57 - and start to go in for it we can see
19:59 - that the back button is gone
20:00 - so super straightforward no more back
20:03 - button so now we don't have that weird
20:04 - kind of confusion where we're looking at
20:06 - the wrong kind of thing
20:09 - okay
20:10 - so that's a great little introduction
20:12 - into what we can be doing with that
20:14 - navigation view and adding that initial
20:16 - setup so now when our application starts
20:19 - we want to have this kind of welcome
20:20 - screenshot first
20:22 - now we've been playing around with it
20:23 - just in the welcome view let's try
20:25 - running it in our simulator just just to
20:27 - make sure things are going the way we
20:28 - want them to be going
20:32 - so when we open our simulator
20:34 - applications can start oh
20:36 - well we didn't get that welcome view at
20:38 - all
20:39 - that's because we didn't add it into our
20:41 - actual tab view which is really where
20:43 - our application begins
20:45 - so we need to make sure that we're not
20:47 - just having it look good in the canvas
20:49 - but making sure that we're from time to
20:51 - time checking in the simulator just to
20:53 - make sure everything's looked up how
20:54 - we'd expect it
20:56 - so instead of this being a game view
20:57 - this can just be a welcome view
21:00 - well come view
21:04 - okay
21:08 - and now when we try to run it now it's
21:10 - gonna be the same in here uh but when we
21:11 - try to run in our simulator we should
21:13 - also get that little welcome screen here
21:15 - we can see we got that little bit of
21:16 - padding at the bottom which we looked
21:18 - for
21:19 - and then we get into our quiz here and
21:21 - we can see that the padding matches
21:23 - great
21:24 - one last thing that we're going to do
21:26 - before we start going onwards is we
21:28 - notice here before we had this color
21:30 - property
21:32 - here we had that same color property
21:35 - that was in the game view and we just
21:37 - kind of copied and pasted
21:39 - anytime you're just copying and pasting
21:41 - something in multiple places you should
21:43 - kind of take a little pause and
21:46 - check to see whether there's a more
21:48 - efficient way to be doing that
21:50 - here we're going to add another
21:52 - structure that's just going to hold all
21:53 - of the colors so we don't have to copy
21:55 - and paste things multiple times
21:57 - uh and to the question in chat adding
21:59 - permissions in swifts i'd by can you
22:02 - explain a little bit more what you mean
22:03 - about permissions
22:05 - well i go ahead and we we go ahead here
22:07 - and start to put together this
22:10 - structure
22:11 - so we'll call this a model it's kind of
22:13 - model-ish
22:14 - we'll call this a game color
22:16 - this will just be a view
22:19 - game color
22:22 - and a game color
22:24 - is going to just be a little wrapper
22:26 - around some of the colors that we'll
22:28 - need
22:29 - so we'll have a static property here
22:31 - which will just be the main color of
22:33 - application
22:34 - and that will put in
22:37 - this color here copy it for the last
22:38 - time
22:43 - get rid of some of this extra spacing
22:47 - okay
22:50 - and then now we can just refer to
22:52 - gamecolor.name
22:54 - so we can go here back to our welcome
22:57 - view and we can go ahead and call this
22:59 - gamecolor.main
23:02 - ignore safe area
23:04 - and
23:05 - get rid of this
23:06 - and then do the same thing in our game
23:08 - view
23:09 - this is our main game color
23:13 - the advantage of this is now if we want
23:16 - to go ahead and update our game color we
23:18 - only have to go in one place to do it so
23:20 - if we go back to our game color here and
23:23 - we said that we wanted everything let's
23:25 - get rid of
23:26 - this one hypothetically let's say we
23:29 - wanted a different color and we wanted
23:31 - uh
23:33 - make these all point two and see what it
23:34 - looks like
23:38 - we could then run our simulator and get
23:40 - to see what this new color scheme would
23:42 - look like across all places in our
23:44 - application
23:46 - so here now we can see it turns grey
23:48 - well maybe we didn't like that so we can
23:49 - get rid of this one put the colors back
23:51 - to the way that they were before
23:54 - and now we can see that the color scheme
23:56 - is going to be reverted back to this
23:57 - color that it was before
23:59 - so just a way to centralize the
24:01 - different colors that we have in our
24:02 - application
24:04 - okay
24:05 - with that now we can focus on that last
24:07 - task we have of
24:09 - once we start our application we want a
24:11 - way to finish it users should be able to
24:14 - get through the quiz get to see how many
24:16 - questions they got right how many
24:18 - questions they got wrong and maybe an
24:20 - option to start the quiz again because
24:22 - right now we get to the end
24:24 - and
24:25 - we just keep clicking next and nothing
24:27 - happens and our application broke we're
24:29 - gonna leave a bad review no one likes
24:30 - that
24:31 - so
24:32 - let's go ahead and start adding some of
24:33 - that logic
24:35 - and uh yeah let me do let me know if you
24:37 - have other questions about permissions
24:39 - uh in general i guess what i can say is
24:42 - that
24:42 - you have uh you have to go through a
24:45 - little bit of setup to get an expert
24:46 - account when you're interested in
24:47 - pushing things up to the app store if
24:49 - that's kind of what you mean by
24:50 - permissions uh otherwise if you're just
24:52 - working locally you can just
24:54 - set up pretty pretty easily just by
24:56 - downloading xcode and getting started on
24:58 - your environments and it doesn't need
25:00 - any special permissions to get started
25:03 - okay
25:04 - so let's go ahead and add some of this
25:06 - logic so we can find out how many
25:08 - correct answers we get how many
25:09 - incorrect answers we get at our final
25:11 - screen
25:12 - so
25:13 - we're going to start this here by going
25:16 - to our game and taking a look at how our
25:18 - model was built out before
25:21 - so we know how many selections we know
25:22 - what selections have been made as
25:24 - learners are taking and answering these
25:26 - questions we can see that as like when
25:30 - they out answer python or something here
25:32 - we can see that
25:34 - this question will be kind of hashed and
25:36 - saved in this dictionary
25:38 - and then it'll be stored with
25:40 - number index number one which is the
25:42 - answer that they made for this question
25:44 - here
25:45 - so we want to go and figure out how many
25:48 - of these they got right and how many
25:49 - they got wrong
25:51 - that's something that we know just from
25:52 - our selections dictionary we can go
25:55 - through each question
25:56 - and then see whether or not we have a
26:00 - uh what is it see whether or not the
26:02 - index that was selected was the correct
26:05 - answer index and go from there so let's
26:07 - go ahead and start to write that
26:08 - function
26:09 - oh permissions for that kind of stuff
26:11 - yes that's an excellent question uh you
26:13 - do need to add permissions if you want
26:15 - to have like gps for example
26:17 - uh if you want to be doing some kind of
26:19 - user tracking if you want access to
26:21 - camera roll there is some
26:23 - extra setup that you'll need for that we
26:25 - we're not going to cover any of that for
26:26 - this quiz since we won't need those
26:28 - permissions uh we do not currently have
26:30 - anything on that in the upcoming skill
26:33 - path which will be released later this
26:35 - year we're going to have a little bit of
26:37 - content around accessing the camera roll
26:39 - so we're gonna talk a little about how
26:41 - permissions work there that's a good
26:43 - question
26:44 - okay so let's go ahead and add that
26:47 - property to find out
26:48 - what are the uh how many of these
26:50 - selections are correct and how many are
26:52 - incorrect i'm just uh
26:54 - using a new type of uh
26:56 - uh swift concept we haven't seen
26:58 - necessarily which is that of tuple
27:00 - because we're gonna have a lot of tuples
27:01 - around in this implementation
27:03 - so we're gonna call this something like
27:04 - a selection
27:06 - count
27:07 - something like that
27:08 - and so inside of our selection count
27:10 - we're going to want this to be
27:13 - a tuple which is a a type that holds two
27:17 - things
27:18 - that's going to tell us how many things
27:20 - we got correct
27:21 - and how many things we got incorrect
27:25 - so we have a tuple here that shows how
27:27 - many things we got right
27:28 - and how many things we got wrong
27:31 - okay so when other users like our review
27:34 - model other people calling our api like
27:36 - our view model rather are trying to
27:38 - figure out what we got right or wrong
27:40 - they'll be able to look at the selection
27:42 - counts and then go from there to figure
27:44 - out how many are right how many are won
27:47 - okay so the first thing we're going to
27:49 - do is we're going to make this count
27:50 - property which is just in the same form
27:53 - that we have up here
27:55 - we have correct and incorrect answers
27:58 - and this is going to start with
28:01 - zero correct and zero incorrect
28:05 - then we're going to go through each of
28:07 - the selections that the users made and
28:10 - if there is a correct one we're going to
28:12 - increment this and if there's an
28:13 - incorrect one we're going to increment
28:14 - this so we're going to go through each
28:17 - question
28:19 - and the selected index
28:21 - in the selections
28:23 - and if the questions
28:26 - if the selected index
28:28 - is the same as the questions correct
28:31 - answer index
28:32 - then we're going to go and increment the
28:34 - correct count by 1.
28:36 - if that's not true then we're going to
28:38 - go ahead and increment the incorrect
28:40 - count by one
28:41 - then we're going to return the count
28:44 - and so the way that we just went through
28:46 - that is a great way to be writing some
28:48 - idiomatic swifts uh unlike some
28:51 - languages where you just kind of want to
28:53 - crunch everything up and have as few
28:54 - characters as possible
28:56 - swift wants to be conversational kind of
28:58 - language where the code as you're
29:00 - writing it is kind of the same way that
29:02 - you'd explain it and so that was what we
29:03 - did there i'm talking about very
29:05 - readable sentences so you're welcome to
29:08 - have one line or ternaries and all other
29:09 - kinds of things under code but for swift
29:12 - especially i like having the code try to
29:14 - be conversational so it's really clear
29:16 - about what exactly it's doing as you're
29:18 - running it
29:20 - so we now have the selection count
29:22 - property inside of a game
29:24 - if you ask it hey what's your selection
29:26 - count it'll give you back a tuple which
29:28 - is a object containing the correct and
29:30 - incorrect guesses
29:31 - uh that it calculates by looking at all
29:34 - the selections finding out which ones
29:36 - were correct by comparing the selected
29:38 - index
29:39 - versus the correct answer index
29:42 - and then seeing if that was right or not
29:46 - uh cool so let's see how to use in a
29:48 - second and then question is there less
29:50 - content for ios than android it's hard
29:52 - to find solutions um i don't think
29:55 - there's less content i think it's a
29:57 - little more niche just because the the
30:00 - ios markets are really big in like the
30:02 - us really big in china that drives a lot
30:05 - of app store revenue but it's less big
30:07 - in some other markets so it's not as
30:09 - globally relevant but it's super
30:11 - relevant for markets where it's really
30:13 - large so you can definitely find some
30:15 - great content about ios we have some on
30:17 - our site at codecademy and there's some
30:19 - other good resources as well where you
30:20 - can go find some more ios contents
30:24 - okay so we have our selection count here
30:27 - what do we do with it well let's go
30:29 - ahead and then go to our view model
30:32 - and we're probably going to need to use
30:34 - it here so let's go ahead and just add
30:36 - those in preemptively to just get the
30:38 - correct guesses and incorrect guesses
30:40 - so it's going to be correct
30:42 - guess
30:43 - or selection excuse me selection count
30:48 - which is just the game dot selection
30:52 - count dot correct
30:55 - and the incorrect selection count
31:00 - which is game dot selection count not
31:03 - incorrect
31:04 - so now we're just tying things together
31:06 - so our game knows our view model knows
31:08 - and now we'll be
31:10 - to be able to access it when we need it
31:12 - when the time comes
31:14 - so now that we have that hooked up from
31:16 - our model and view model perspective
31:18 - we can go ahead and start building out
31:19 - our view to show what are those results
31:22 - we're going to need a new view for that
31:24 - so we can go ahead and get started with
31:26 - a new view
31:27 - let's go ahead and make a new file
31:29 - we'll go ahead and make this a new view
31:32 - and this is going to be the view to
31:34 - showcase what the results are so we'll
31:36 - call the results view
31:38 - this is an eminently reasonable name for
31:40 - such a view
31:42 - and now we want to go ahead and build
31:43 - this view so that's going to show users
31:46 - after they've come to the end of their
31:48 - quiz how well that they did
31:52 - what are the results so
31:54 - we're going to start by doing that same
31:56 - trick with that z stack so we're going
31:59 - to go ahead and make
32:01 - in the body a z stack
32:04 - and then give ourselves a game color
32:08 - dot main dot ignore safe area
32:12 - and that will give a nice background to
32:14 - begin our review right here
32:19 - so now we want to add a little bit of
32:21 - information
32:22 - uh maybe what percentage right they got
32:25 - how many were right how many were wrong
32:27 - and then a button at the bottom that
32:28 - lets them restart and take the quiz
32:30 - again
32:32 - so we can start adding those in
32:34 - let's start by adding in
32:37 - the body let's start by adding in that
32:38 - final score so let's put maybe a v stack
32:41 - in here and then let's go ahead and add
32:44 - in a text
32:45 - that says final score
32:48 - that's going to showcase what the final
32:50 - score is
32:52 - and maybe let's put this in an h stack
32:54 - so that we can have some other thing
32:56 - next to it
32:58 - so it can have final score and then we
33:00 - can have whatever the final score
33:01 - actually is
33:02 - like question mark percent we don't know
33:06 - uh good question what does z stack stand
33:08 - for
33:09 - so we have v stack which stands for
33:11 - vertical we have h stack which stands
33:13 - for horizontal and we have z stack which
33:16 - stands for
33:17 - three-dimensional
33:19 - in the z-axis
33:21 - the analogy breaks down a little bit but
33:23 - the idea is if you imagine a kind of uh
33:25 - like a plot where you've got an x-axis a
33:27 - y-axis and a z-axis
33:29 - putting things on the h and then h stack
33:31 - puts them next to each other like we see
33:33 - right here
33:35 - putting things in a z-stack puts them on
33:38 - top of each other like if we put down
33:40 - another text here
33:41 - that says hi
33:43 - change that in a second
33:46 - oops
33:47 - then we have some text here and a z
33:50 - stack means we're going gonna put
33:51 - something behind something else so if we
33:53 - put text here
33:56 - behind
33:58 - you
33:59 - made that nice and big
34:04 - we can see that a z stack here kind of
34:07 - puts things on top of each other yeah
34:08 - thank you for the correction they're
34:09 - doing that so a v stack or when elements
34:12 - are like on top of each other like one
34:15 - is at the top of the phone and then
34:17 - one's lowered to it and a z stack is
34:19 - when they're like
34:21 - nest like behind it so it's like if you
34:23 - could look and poke your finger down
34:26 - deeper into the phone that would be
34:27 - going in the z direction
34:29 - so you can see that adding things in the
34:31 - z stack kind of makes them weird and
34:32 - overlapped you wouldn't want to do that
34:34 - with text but it's great with things
34:36 - like colors because then the colors are
34:38 - just
34:39 - behind everything else to kind of recess
34:41 - back from it
34:43 - okay
34:44 - so
34:45 - now we've got our v stack here we've got
34:47 - our eight stack which says what our
34:48 - final score is going to be make this a
34:50 - little bit bigger
34:51 - maybe uh title two
34:55 - and we don't know we don't know what
34:56 - question mark percent means necessarily
34:58 - so we're gonna have to figure that out
35:00 - then we have our car how many they got
35:03 - correct and how many they got incorrect
35:04 - here so let's put a little bit of space
35:09 - ooh that's a lot of space remember
35:11 - spacers take up as much space as
35:13 - possible here so that might be a little
35:14 - bit more than we want maybe just put a
35:16 - little padding around it and that could
35:17 - be enough
35:18 - that seems okay
35:20 - so then here we can go ahead and then
35:22 - add in
35:23 - the
35:24 - uh correct and incorrect selections so
35:26 - this is going to have something like how
35:28 - many did we get right and how many did
35:29 - we get wrong
35:31 - so we got question mark right and a cool
35:33 - little trick you can do in xcode on a
35:35 - mac if you push down control command
35:37 - space
35:38 - it brings up a little emoji menu and you
35:41 - just use emojis anywhere you have a
35:43 - string or text you want to show
35:45 - so you can have this many correct
35:48 - and then you can have question marks
35:50 - that are ctrl command space
35:52 - incorrect
35:56 - neat fun fact about swift uh emojis are
35:59 - perfectly good variable names for some
36:01 - reason so you can make a variable called
36:03 - like
36:05 - duck
36:09 - and this is actually fine this compiles
36:12 - so if you want to have a lot of fun with
36:13 - uh variable names you can go with that
36:16 - can we make grades depending on the
36:17 - score in the game yeah we can definitely
36:20 - do that that is uh that is something
36:22 - that we can let's put a placeholder for
36:24 - that yeah i wasn't planning on it but
36:25 - yeah let's let's do that i like it
36:27 - uh so let's have a final score below the
36:30 - final score let's have like a letter
36:32 - grade or something
36:34 - what matches the school for something
36:36 - letter grade
36:40 - and we don't know what it is yet but we
36:41 - can go ahead and add that in
36:44 - let's resume this
36:46 - let's add some padding to all these
36:52 - adding
36:55 - and maybe these don't need padding but
36:56 - that one does okay so we've got our
36:58 - final score we've got a letter grade
37:00 - which will be something we'll have to
37:02 - figure that out and then we can figure
37:04 - out how to add in all of these bits
37:06 - content here fonts
37:09 - [Music]
37:12 - great
37:13 - okay so we've got kind of the
37:15 - boilerplate for what this looks like
37:17 - here let's just go ahead and then give
37:18 - these a font as well maybe
37:21 - system 30 and a little bit bigger
37:28 - okay
37:29 - all right so this is our final screen
37:30 - and then we just need to add that bottom
37:32 - button to showcase there
37:34 - but in chat if you have any other ideas
37:36 - anything else you'd want to put on the
37:37 - screen you can figure out how to dump it
37:39 - in
37:40 - uh is there a unicode type number
37:42 - associated with emojis uh there is
37:44 - there's a wide and wondrous world of how
37:47 - unicode and swift work together uh if
37:50 - you really want to go deep you can look
37:51 - into the unicode scalar planes uh but
37:54 - yes all of the emojis all have a unicode
37:57 - value they are not an ascii value
38:00 - uh but they do have an associated
38:02 - unicode character alongside with them
38:04 - and there's lots of depth you can get in
38:06 - there with combining diacritical scalers
38:08 - and all sorts of nonsense uh swift has
38:11 - really robust handling for unicode so
38:12 - you can definitely go from
38:15 - different characters or strings into
38:16 - unicode and i think the name for that is
38:19 - let's just check here
38:21 - uh
38:22 - let's say equals if you make a character
38:27 - say there's i believe there's a type a
38:29 - unicode scalar which is like the number
38:32 - associated with something and then you
38:34 - can look at the emoji let's say a duck
38:39 - and i believe
38:41 - see if you make a character from this
38:47 - and then get all of its unicode scalers
38:50 - and then look at the first one
38:53 - then this will show you what the number
38:55 - is that's associated with this duck here
38:58 - and that has to be more
39:00 - so
39:02 - if you want to mess around you can
39:03 - definitely do things with lots of
39:04 - unicode scalers uh it is swift has
39:07 - robust unicode uh the handling and you
39:09 - don't need to specify anything else it's
39:11 - just there out of the box
39:13 - okay so what do we do now we've got our
39:15 - model here we want to add that last
39:17 - button so we'll just do that at the
39:18 - bottom
39:19 - so we'll go ahead and add that
39:21 - navigation link so we've got our z-stack
39:24 - now let's add a spacer
39:28 - and then
39:29 - maybe you want to put this in the middle
39:30 - so do put this between two spacers or
39:32 - something
39:35 - and then we'll add in
39:36 - our bottom text which will be here
39:39 - bottom
39:40 - text which will say retake
39:44 - quiz
39:47 - quiz k
39:49 - okay that's pretty good so we can always
39:52 - tweak what the ui should look like
39:54 - that's something that you can always go
39:55 - back to but this should be a good place
39:56 - to start now we can pad this a little
39:58 - bit here
40:00 - okay and we only want the black padding
40:04 - all right there we go
40:06 - so now we have to do is connect this
40:08 - well we gotta fill in these question
40:09 - marks depending on what the user how
40:12 - well they did on their quiz
40:14 - so how can we do that well we can go
40:16 - ahead and give this thing its own view
40:19 - model and then do all the hard question
40:22 - answering in there that's usually a good
40:24 - tactic when you're building uh views
40:26 - using what we talked about last session
40:28 - in model view view model design is if
40:31 - there's ever kind of work that someone
40:32 - has to do
40:33 - just put that in a view model and have
40:35 - that do the work for you so that the
40:36 - views can be nice and simple
40:39 - so
40:40 - we're going to want to make a results
40:42 - view model which is going to be able to
40:44 - fill in all these question marks
40:46 - so let's go ahead and add in a new file
40:50 - which is going to be a results view
40:52 - model just a regular old view
40:55 - results view model
40:58 - a regular file not a view at all
41:01 - uh it is a view model so it's just kind
41:04 - of a regular swift file we're going to
41:06 - name this results view model
41:09 - before our game view model we made a
41:11 - class because we had to have like things
41:13 - that were observing and changing with it
41:15 - this is going to just be static
41:17 - information you get the score you get we
41:18 - show showed you and you're done so this
41:20 - can just be a structure
41:21 - because that's going to be static
41:24 - our results view model needs to know
41:27 - the incorrect selections
41:31 - need to know the correct selections
41:35 - uh and we can actually make this match
41:36 - why not we can have this be like a
41:38 - selection count
41:40 - we can have this be like correct
41:42 - incorrect
41:45 - just to match kind of the same
41:47 - way that we had displayed before
41:50 - so it's going to have that tuple
41:51 - selection count
41:53 - then we're going to need to find a way
41:54 - to answer all these question marks so
41:56 - let's do the same thing that we did a
41:58 - little bit last session where we're
41:59 - going to pull it up side by side
42:01 - bring up our results view that's holding
42:03 - down the option key and then clicking on
42:05 - it to bring it up here
42:07 - and now let's delegate all of these
42:09 - questions over here so we can have like
42:12 - something for percent text
42:15 - final percent text
42:19 - and we'll go and this will be the final
42:21 - percent text
42:24 - and then while we're at it let's just
42:25 - give this a view model now
42:28 - so this will be its view model is going
42:30 - to be a results view model like so
42:35 - and then i'm just going to temporarily
42:37 - get rid of this here
42:38 - and that's fine let's just add our
42:40 - selection content
42:42 - so it needs our view model which takes
42:44 - the results view model which takes a
42:46 - selection count so we can just say uh
42:48 - just play with someone who's gotten
42:50 - three and one or something
42:52 - uh
42:53 - so there's a question chad the swift
42:54 - support sql or my sequel uh yes there
42:57 - are
42:58 - different wrappers around so if you want
43:00 - to look into that you will need to look
43:02 - into how to use different packages to
43:05 - out of the box usually like the tool is
43:07 - called core data which lets you kind of
43:09 - store and work with different databases
43:11 - and tables and whatnot you can
43:13 - absolutely use different like sqlite
43:15 - databases for it you'll need to look
43:17 - into either swift package manager or
43:19 - into cocoapods for how to install those
43:22 - and get those set up
43:24 - okay so let's go ahead and keep working
43:26 - through this here so we've got that
43:28 - final percent text
43:30 - view model dot final percent text
43:34 - we know that we're going to want to have
43:36 - our letter grade so letter grade
43:38 - text
43:40 - which is going to just be this here
43:46 - text
43:48 - view model
43:50 - dot letter grade text
43:52 - what's this combining button this one
43:54 - before
43:56 - uh
43:58 - [Music]
44:04 - good
44:05 - cool all right so then we can do the
44:07 - same thing for here so that's going to
44:08 - be our
44:10 - correct
44:11 - selection
44:12 - text
44:15 - our incorrect selection
44:19 - text
44:20 - text
44:23 - and that's all fine so we'll go ahead
44:25 - and just bring this here so we've got
44:26 - our correct selection text and our
44:28 - incorrect selection text
44:32 - so this is going to be our correct view
44:34 - model
44:36 - dot correct selection text and
44:39 - view model dot
44:41 - incorrect selection text
44:44 - great
44:45 - so all we did here is we just said well
44:47 - we know we're going to need the number
44:48 - of correct and incorrect selections so
44:51 - let's go and put those in the view model
44:52 - let's let the view model worry about all
44:54 - of these and now our view just has to
44:56 - worry about how to display this
44:58 - so that's how you can be separating out
45:00 - a lot of the considerations when working
45:02 - with the mvvm architecture
45:06 - okay
45:07 - so now we can just work on this file
45:09 - here and figure out well how do we
45:10 - answer these things let's start with
45:11 - easy ones the correct selection text we
45:14 - already have that
45:16 - uh
45:17 - visual basic videos uh i will look to
45:19 - see if we're getting any of those made
45:21 - uh maybe we have some in our catalog i'm
45:22 - not sure but
45:24 - uh that is that is fun as well
45:26 - okay so let's take our selection count
45:29 - we'll take our correct guesses here
45:31 - selections
45:32 - then we'll take our incorrect selection
45:34 - text which will be our selection count
45:36 - dot incorrect
45:38 - like so
45:40 - and we can see that if we pop over to
45:42 - our results view
45:45 - and we resume
45:46 - this should be previewing something with
45:48 - three correct things and one incorrect
45:49 - thing
45:50 - so it should start popping up here
45:53 - yep so we've got three correct one
45:55 - incorrect great so we can go back to our
45:57 - results view model here
45:59 - and then figure out that final percent
46:01 - text
46:02 - so we want to calculate the percentage
46:05 - well to do that we're going to take the
46:06 - number of
46:08 - uh
46:09 - selection count
46:10 - dot the correct answers
46:12 - here multiplied by
46:15 - a thousand divided by the number of
46:17 - total answers
46:18 - so that's going to be the percentage
46:20 - here
46:21 - so that's selection count dot
46:24 - correct plus selection count
46:28 - selection count dot incorrect
46:32 - and that's too many parenthesis now this
46:34 - looks good
46:35 - okay so now we can see that we have our
46:40 - it's divided do that swift actually does
46:42 - care about white spaces so you have to
46:44 - make sure that you're adding those in
46:45 - evenly balanced
46:47 - okay so now we've got our final percent
46:48 - text let's go back to a results view and
46:50 - see if that looks good
46:55 - it's thinking
46:58 - great 75 that looks right and now let's
47:00 - find that letter grade
47:02 - uh so let's go back to our results view
47:05 - so for a letter grade uh we wanted to
47:07 - figure out how to get that standard like
47:09 - you know 90 to 100 as an a 80 to 90s b
47:13 - so and such you can always add some more
47:15 - there
47:16 - so what we want to do is take this final
47:18 - percents so we want to get this um maybe
47:20 - just like a final grade so let's just
47:22 - make that as a private property so
47:24 - private var
47:26 - uh score this is called a score which
47:29 - will just be an integer
47:30 - and the score is just going to be this
47:32 - part here
47:33 - let's call that the score
47:36 - so then this can just be score percents
47:38 - and now we have the score that we can
47:40 - use again that's a great example of i
47:42 - didn't want to type this again out so we
47:43 - just make it its own property and now we
47:45 - can use it
47:47 - now uh a great tool that we can use for
47:50 - this is going to be a switch statement
47:51 - and i'll see if we can remember the
47:53 - syntax for it here
47:54 - uh we want to switch on the score
47:57 - and then we want to return different
47:59 - things in different places
48:01 - so
48:02 - if we have the letter grade text here
48:05 - okay so if the score
48:08 - if you underscore where
48:11 - uh
48:13 - let's see very much syntax here
48:15 - case x where
48:20 - so we want to figure out the range
48:22 - between 90 and 100. i'm gonna have to
48:23 - double check this index on this here
48:25 - i think it's something like this here
48:27 - where we have i know we want to put the
48:29 - range in and then we can say the thing
48:31 - that we're trying to return
48:35 - let's go ahead and double check that
48:37 - syntax though
48:38 - so all switch statements need a kind of
48:40 - set of cases and a defaults here
48:43 - and for the default we'll return let's
48:45 - just say question mark because that's
48:47 - that's a weird grade
48:49 - i think this compiles okay great
48:51 - so now they keep changing the synthetics
48:53 - of this so if they get between a 1900
48:55 - that's an a if they get between an 80
48:58 - and a 90
49:00 - that sounds like a b
49:02 - if it's between a 70
49:04 - and an
49:05 - 80
49:07 - that's a c
49:09 - and these are the us grade systems i
49:12 - think that different kind of all
49:13 - different countries have different
49:14 - systems here so if you want to put this
49:17 - in you can definitely replace it with a
49:18 - different style
49:20 - uh case 0 to 60 would be an f like so
49:27 - okay and then that's our letter grades
49:29 - let's go ahead and take a look back at
49:31 - the results view and see if that worked
49:36 - we can resume
49:40 - and it just says c
49:41 - great so that's correct it's 75 we can
49:44 - test it to see make sure an a works
49:45 - let's say they got a four
49:49 - that's 100 that looks like question mark
49:51 - what'd we get wrong well if we go back
49:53 - to our view model here
49:55 - you can notice that we said up to 100
49:59 - but not including 100. so that's why
50:01 - it's really good to make sure that
50:02 - you're looking at those edge cases so
50:03 - that you can include
50:05 - 100
50:06 - as an a
50:07 - because you know you wouldn't want to
50:08 - tell someone they got a question mark
50:10 - if they got a hundred percent
50:13 - great
50:14 - so
50:15 - they got an a
50:17 - great and this is not that we happen to
50:19 - have four questions on our quiz this
50:21 - view is very powerful it supports any
50:22 - number of questions maybe there's a
50:24 - really long quiz and it looks like this
50:27 - this looks like a failing grade probably
50:29 - but we'll see
50:33 - yeah so this is 21 and you can see there
50:35 - are a model of justice and shows that
50:37 - here but if it looks like uh maybe we
50:40 - got a bunch more right then they got
50:41 - wrong
50:42 - they got 104 right they got 20 wrong
50:44 - that's an 83 that's a b so it looks good
50:46 - so we can see that our view model is
50:48 - correctly giving what we should have
50:49 - from here
50:51 - uh and maybe we also want to have to say
50:53 - like letter grade or something too so we
50:54 - can we can play around with our ui make
50:56 - it look how we want to here
50:59 - so we can make this say like uh letter
51:01 - grade
51:04 - and then this can be the letter grid
51:06 - text
51:09 - like so
51:13 - great so you can always play around with
51:14 - the ui and the the neat thing is once
51:16 - you have all the hard stuff although the
51:19 - hard work happening inside of the view
51:21 - model it's a lot easier to move the
51:23 - views around and you don't have as much
51:25 - you have to worry about changing
51:28 - so
51:28 - uh
51:29 - we can go now we've got our view model
51:32 - working we've got a results view that's
51:33 - showing the results the only thing we
51:35 - have left to do in our results view is
51:38 - hide the
51:39 - uh view and then get back to it can we
51:42 - show the beginning of the results oh
51:43 - sure also all of this if you look at the
51:46 - top of the chat you'll find a link to a
51:48 - github repository and if you go there
51:51 - there's a live stream for branch and all
51:53 - the code that we're talking about is up
51:55 - inside there um but yeah this is the
51:57 - beginning of the results view
52:00 - looks like this up here actually this is
52:02 - pretty much all of it this is that's all
52:03 - the results here it's not a very large
52:05 - view because you're able to take all
52:06 - that hard work and give it over to the
52:08 - view model
52:09 - yeah absolutely
52:11 - uh
52:11 - great so we've got our view model here
52:14 - perfect thanks for just putting that
52:16 - branch in uh now let's go ahead and get
52:19 - that bottom
52:20 - thing here that takes us back to where
52:22 - we want
52:24 - so we saw before that we can use a
52:26 - navigation link so we can go ahead and
52:28 - add a navigation link
52:31 - so we'll add in a navigation
52:34 - link
52:35 - and it'll be pretty much the same as we
52:37 - saw before we'll have that destination
52:39 - which will take us
52:40 - back to uh maybe our game view
52:43 - back to the first question
52:46 - and then the label will just be this
52:48 - button text here
52:50 - with its padding
52:54 - okay
52:56 - and now notice again
52:57 - ooh in our preview this looks grayed out
52:59 - not super promising uh it's going to be
53:02 - in a navigation view and the rest of our
53:04 - application and if you want to preview
53:05 - that you can just go ahead and add that
53:07 - preview in here by just putting it in a
53:10 - navigation view in your preview
53:15 - and that way
53:16 - it turns blue you can click on it and
53:18 - then you'll see where it takes you so
53:19 - this will take us back to the beginning
53:21 - of the quiz
53:24 - great we can even have it take us back
53:25 - to the welcome view if we want it's
53:27 - wherever you like
53:29 - okay
53:31 - so this takes us back great
53:33 - we answer our questions great
53:36 - but we still don't have the last bit of
53:38 - connection we need from the uh last view
53:42 - here
53:43 - over to the last uh
53:46 - into the results view from the last
53:47 - question of the results view
53:49 - so
53:50 - there's gonna be a little trick we're
53:51 - gonna use to make that happen we're
53:53 - still gonna use a navigation link but
53:54 - we're going to be using the slightly
53:56 - clever kind of way so let's go back to
53:58 - our game view
54:00 - now
54:01 - we haven't really been navigating in our
54:03 - game view we've been showing different
54:05 - uh
54:07 - sorry we've been showing different
54:09 - questions
54:10 - but that's just because our game has
54:12 - been changing
54:14 - uh can we add the time someone answered
54:17 - in yeah that's a great feature let's add
54:19 - this in first and then see if we have
54:20 - time to add in the uh some time stamping
54:22 - information because i'm pretty sure
54:24 - that'll be a neat thing to add and i
54:25 - think we have our model set up for it
54:28 - okay so as we answer questions inside of
54:31 - our application
54:33 - [Music]
54:36 - oh keeps freezing okay so we're going to
54:39 - answer questions
54:41 - we get next we know that this game over
54:43 - thing is triggered but then we don't
54:44 - have anywhere to go
54:46 - what we're going to do to navigate is
54:48 - we're going to put a silent hidden
54:50 - navigation view or navigation link
54:52 - excuse me
54:54 - in the background of this that's just
54:55 - waiting for the game to be over and then
54:58 - it'll immediately just kick in and
55:00 - navigate over to the results view
55:02 - so we're going to do that by adding in a
55:04 - background
55:05 - to this here
55:07 - and that background takes in any view so
55:10 - we can make it a navigation view
55:13 - and we'll a little tricky here a
55:16 - navigation view
55:18 - now
55:19 - this navigation or navigation link
55:21 - excuse me
55:23 - okay
55:24 - now this navigation view is gonna have a
55:25 - lot of stuff in it so let's just make it
55:27 - a separate property here so let's just
55:28 - make a private var navigation
55:32 - view
55:32 - which is some view
55:34 - and then we'll go ahead and put that in
55:37 - here
55:39 - and this is a
55:41 - maybe this is a results navigation view
55:44 - and this is a results
55:46 - navigation view
55:49 - doing that should be navigation link
55:51 - views contain the links but the actual
55:54 - things that let you go somewhere else
55:55 - are the links
55:57 - okay so now we can add our navigation
55:59 - link
56:01 - our navigation link
56:03 - we see has the special is active uh
56:06 - initializer that we can use
56:08 - and what the is active one is going to
56:10 - do is it's going to take us to where we
56:11 - want to go which is going to be the
56:13 - results place
56:14 - and it'll do that when something becomes
56:17 - true
56:19 - the label that we're going to want to
56:20 - use here it's actually just an empty
56:22 - label we don't want to show them
56:24 - anything or an empty view we just want
56:25 - to go there as soon as it's done here
56:29 - so we want to navigate over to
56:34 - somewhere the results view when
56:35 - something is true
56:37 - the reason this says dot constant is
56:39 - because it's really a binding we saw a
56:41 - little about bindings when we're going
56:43 - over control views that have that kind
56:44 - of dollar signee syntax
56:47 - we don't really need to use all of that
56:48 - we don't need to go back and forth at
56:50 - anything so it recommends which we can
56:52 - just use here of just using this dot
56:54 - constant which means when the view
56:56 - reloads anyways check this and see if we
56:59 - need to navigate
57:00 - so the thing that we're going to check
57:02 - for
57:02 - is to see if the game is over
57:06 - and we can add that property into our
57:08 - view model
57:09 - we have
57:10 - our guesses our advanced game state we
57:13 - could also just add that little property
57:15 - called game is over
57:18 - which is just going to tell us whether
57:20 - or not
57:22 - what do we call this game is
57:25 - oh we might need to expose it
57:28 - there it is
57:29 - so it turns out we need to know that so
57:30 - that can't be private so then we can go
57:32 - back to our view model
57:34 - and just go ahead and pass it along here
57:39 - all right so now we know if the game is
57:40 - over or not we can go back to our
57:43 - navigation link
57:45 - and then
57:47 - we should navigate if the game is over
57:49 - where should we go we should go
57:52 - to the results view
57:54 - the results view needs a view model so
57:57 - that's one of those results view models
57:59 - yeah just for a second
58:03 - now what does that view model look like
58:05 - you just start asking it what it needs
58:06 - and it tells us it needs a selection
58:08 - count of correct and incorrect answers
58:11 - well fortunately our view model has a
58:15 - third email has
58:17 - it has a
58:19 - it can have a selection count and so we
58:20 - can just give it one
58:22 - so we can see our view model here has oh
58:25 - it has a correct selection count an
58:27 - incorrect selection count let's actually
58:29 - just make that selection count
58:31 - i don't think we need it for anything
58:32 - else here
58:34 - so we changed a little bit from this
58:36 - here we'll just make it a selection
58:37 - count and then this is game dot
58:39 - selection count just make life a little
58:41 - bit simpler
58:44 - and then we can go back in here
58:46 - and then just pass in the view model
58:48 - selection count so we're just passing
58:51 - over from one place to another
58:54 - now if we needed to break that down we
58:56 - could break that down and look at those
58:57 - other properties but this should be fine
58:59 - for now
59:01 - okay
59:01 - so now this is just kind of waiting in
59:04 - the background for the game to be over
59:06 - and then it's going to work to rebuild
59:08 - itself
59:09 - remember for previewing
59:11 - navigation links need to be inside
59:13 - navigation views to work
59:15 - so we can wrap this in a navigation view
59:17 - to check to see if it's working
59:21 - as we start answering questions
59:23 - we make our selections we answer things
59:26 - and once the game is over becomes true
59:30 - then we get to be presented with the
59:32 - results screen well we didn't do super
59:34 - well on this quiz but we can always
59:36 - retake it to go back to it
59:38 - because we have our back button kind of
59:40 - down here we can get rid of this back
59:42 - button using that same trick we saw
59:43 - before and that results view so we can
59:46 - go in our v stack and we can go set that
59:49 - navigation
59:50 - bar hidden to be false
59:54 - uh this is probably a lot so we can just
59:57 - put this back here
59:58 - and then we can just try it in our
60:00 - simulator to make sure everything's
60:01 - hooked up
60:04 - the the one last thing that we'll try to
60:05 - add is that time feature uh because i
60:08 - think that's a nifty bit of
60:09 - functionality that we can put into it
60:12 - so let's check to see our quiz is
60:14 - working
60:15 - and
60:16 - we answer our last question
60:18 - oh no we only got 25 oh the back
60:20 - button's still there so it looks like we
60:22 - probably put that a little bit too low
60:24 - so let's go ahead and make sure that
60:26 - it is put in the correct spots
60:30 - to
60:33 - maybe it's v-stack
60:37 - oh i put it false that's why
60:40 - okay
60:41 - navigation bar hidden should be true not
60:43 - false
60:44 - i think false is the default so
60:46 - we forgot to change it
60:49 - okay and then we can check to see in our
60:52 - simulator here
60:54 - uh let's get some of these right huh
60:56 - uh-huh
60:57 - uh-huh
60:59 - all right better we see the back
61:00 - button's gone so if they want to retake
61:01 - the quiz they have to go back here to
61:03 - retake it
61:04 - great
61:05 - all right last thing that we'll try to
61:06 - add is that timestamp uh
61:09 - we'll do that here by just adding in the
61:11 - time so let's say start time
61:14 - which will just be a date
61:18 - so this will just tell us like when we
61:20 - started
61:21 - and then as soon as we get to the
61:23 - results view we can go and just grab
61:25 - what the final time looks like here
61:27 - so resultsviewmodel maybe also wants the
61:30 - uh
61:31 - let's
61:34 - do game start time or something
61:38 - like so
61:41 - then everywhere that once needs a game
61:43 - start time
61:44 - we can actually just specify wow
61:47 - let's pass it in
61:49 - so let's say game start time it's just
61:52 - right now
61:54 - here we need to pass in the game start
61:56 - time
61:57 - we'll go ahead and grab that from the
61:59 - game
62:00 - right it has a start time
62:03 - we'll get back to the view
62:04 - model so have our start time
62:08 - start time
62:11 - game
62:12 - start time
62:14 - just game
62:15 - dot start time
62:19 - uh
62:21 - and then our view model can know when
62:23 - the game started and then be able to
62:24 - calculate from there there's a bunch of
62:25 - ways you could break this down but this
62:26 - should work fine
62:28 - uh
62:29 - where's our error
62:33 - ah okay so the game start time is going
62:35 - to be the view model dot
62:37 - game start time
62:40 - then we can go inside of our results
62:43 - view model we know what time the game
62:45 - started so we can say that the
62:49 - uh
62:50 - game end time is let's say for
62:52 - convenience whenever we build one of
62:54 - these the game is over
62:55 - that might not strictly be true but
62:57 - maybe it's true enough
62:58 - uh actually we can put that here let
63:02 - game end time it's another date
63:05 - again lots of more clever ways to do
63:07 - this but this is just kind of a first
63:08 - pass of how we might add this feature in
63:11 - so we can go
63:13 - and add in not just start time
63:17 - but also the end time
63:22 - and then we can do that inside here
63:25 - the game starts then but the game ends
63:28 - right now
63:31 - and now we can go ahead and go in the
63:34 - results view model and make some kind of
63:36 - like uh what do we want to say how long
63:38 - it took
63:39 - total
63:40 - game
63:42 - time
63:43 - text
63:46 - which can be our
63:49 - difference between the game start time
63:50 - and the game end time
63:52 - so we can do game
63:54 - end time dot
63:56 - uh let's do
63:59 - see how we subtract distance two
64:03 - great
64:04 - our time interval from this may be
64:06 - better
64:07 - time interval since
64:10 - game start time
64:15 - okay
64:16 - and then let's just show this and see
64:17 - what let's see uh see what this looks
64:20 - like
64:21 - so this is just one showcase of what you
64:23 - can do with morph with that to add more
64:26 - features into an application
64:28 - so we can go back to results view we can
64:30 - just add our total time maybe somewhere
64:33 - at the bottom right here
64:36 - total time and then just display that
64:40 - and that's in the view model
64:44 - let's take a look what this looks like
64:53 - okay this opens here the game's starting
64:56 - we're taking our time we're answering
64:58 - questions finding some computer bugs
65:02 - and here tells us that we took about six
65:04 - seconds on it so we know that this gives
65:06 - it in seconds so we can just go ahead
65:08 - and add that in
65:09 - and then we can probably trim this a
65:11 - little bit maybe we can just round it to
65:12 - a nearest integer
65:14 - so we can just go ahead and make this a
65:18 - in the results view model you can just
65:20 - go ahead and take this and turn it into
65:22 - an integer
65:26 - [Music]
65:28 - like so
65:30 - so that is going to go ahead and just
65:31 - crop it and then just say seconds
65:35 - lots of different ways you can break
65:36 - down time within things but this is one
65:39 - illustration of how you could be adding
65:41 - extra features and if there's something
65:43 - that you want to be tracking
65:45 - so we let's get let's get them all right
65:47 - this time binary
65:49 - objective c
65:50 - moth
65:51 - and tim
65:53 - great and now it tells us we did in
65:54 - seven seconds and that seems to be how
65:56 - long it takes here
65:58 - let's see if we just let this sit for a
66:00 - second if it takes a little bit longer
66:04 - okay so now let's go ahead and do it
66:06 - again
66:07 - we sat for a second at the beginning
66:10 - and now it tells us it took 12 seconds
66:12 - so it's working correctly and now we
66:14 - have the time added to our application
66:15 - as well
66:16 - and that was a great question for an
66:18 - extra feature on that because it really
66:19 - illustrates once you have your model set
66:21 - up
66:22 - it's it's easy to see where things need
66:24 - to go and you can add in new features
66:26 - relatively quickly now this may be
66:29 - leaked too much information we could be
66:30 - changing how we're putting this around
66:32 - we could be storing in different places
66:33 - or all other kinds of ways we could be
66:35 - adding this feature so that's kind of
66:36 - the great thing about development is you
66:38 - have so much control over how you're
66:40 - choosing to build things but this is
66:42 - clearly a working prototype about how
66:44 - you can add in a time taken feature to
66:47 - your application so you can build on
66:49 - this to add any other information that
66:50 - you're interested as well
66:52 - it's another good idea of a future
66:54 - request you can take a look at later
66:56 - which is if you edited a question maybe
66:58 - you could go back and change it again
67:00 - but uh we probably won't cover that in
67:02 - this session but if you're interested in
67:04 - trying to figure out how to add in other
67:05 - features like uh changing questions or
67:08 - changing responses or going back to
67:11 - other questions you can definitely add
67:13 - those kind of features in adding in
67:14 - other question types like you know fill
67:17 - in the blank questions and text
67:18 - questions there's all kinds of extra
67:20 - features you can be going and putting on
67:22 - from here
67:23 - so
67:24 - that's what our final state of our
67:25 - application is going to look like from
67:27 - here it has been a pleasure getting to
67:29 - work on this and kind of talk through
67:31 - some aspects about ios developments with
67:34 - all of you here as for next steps we
67:36 - have the link in the chat about where
67:38 - you can find all of the code that we've
67:39 - worked on during this live stream and
67:41 - all the live streams previously
67:43 - codecademy has many other live streams
67:45 - you can find on the same channel here if
67:47 - you want to look back to our history you
67:49 - can find some great content around
67:51 - some data analysis some data
67:53 - visualization with p5 and some other
67:55 - great bits of content and we're going to
67:57 - have some more live stream series coming
67:58 - up ahead so again thanks to everyone for
68:01 - joining in now thanks for everyone who's
68:02 - watching in live later and then if you
68:05 - have anything else you want to ask us as
68:07 - part of it you can feel free to go to
68:08 - the codecademy forums
68:10 - just on our platform or hop into discord
68:13 - we got a great discord community of
68:14 - people who are happy to answer any
68:16 - questions you have around ios
68:18 - development or anything else that you're
68:20 - looking at on codecademy platform or
68:22 - just in programming in general so
68:24 - thanks everyone i hope they all are
68:26 - ready to build some more great ios
68:28 - applications and looking forward to