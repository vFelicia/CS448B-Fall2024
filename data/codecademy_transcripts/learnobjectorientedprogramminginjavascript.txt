00:00 - all right hello everyone welcome to
00:04 - another edition of a codecademy live
00:07 - stream my name is Alex I'm a curriculum
00:11 - developer here at code Kadim II in chat
00:14 - go ahead and let me know if you can see
00:16 - everything if you can hear everything as
00:19 - we get started here today's lesson whoo
00:25 - and my audio is playing today's lesson
00:29 - and we're gonna be doing a little bit of
00:31 - object-oriented programming which is a
00:33 - really common style of programming and a
00:35 - really great way to organize your code
00:38 - and kind of think about programming as a
00:40 - whole I kind of shapes you know it kind
00:45 - of shapes your entire perspective or
00:47 - it's kind it's a little bit hard to not
00:49 - think about coding in terms of object
00:50 - oriented programming once you get used
00:51 - to it
00:52 - at least I find that I I think a lot
00:55 - about it
00:56 - audio is broken other people are saying
00:59 - they can hear me hello Oscar okay great
01:05 - so if you are watching on YouTube the
01:10 - kind of goal of these live streams are
01:12 - to be able to code align code along
01:13 - actively with me so if you're on a
01:16 - YouTube this first a link in the
01:18 - description will send you to this page
01:23 - on code Academy you'll have to be logged
01:25 - in if you're not logged in go ahead and
01:27 - log in and you might have to refresh the
01:29 - page or click on that link again and you
01:32 - will get to a page that looks a lot like
01:34 - this right now I have the final version
01:37 - of what we're going to be making today
01:39 - these are all separate objects in
01:42 - JavaScript so we'll talk about what that
01:46 - means for these to be objects and how we
01:49 - make them but this is kind of our final
01:52 - goal at the end of this livestream yeah
01:58 - another thing that I want to mention is
01:59 - I want this to be super interactive so
02:01 - we've got a bunch of people in chat let
02:04 - me know if you have questions let me
02:06 - know if you're able to follow along I've
02:09 - someone I've Sara sitting in the room
02:11 - with me right now she'll also be in
02:13 - chat and so if there's a question that I
02:16 - missed or a question that she can answer
02:18 - she might call it out to me or answer it
02:20 - herself in chat other than that let's go
02:25 - ahead and get started so I won't reset
02:30 - my project okay so what you should see
02:33 - is just this blank blue screen and we're
02:39 - gonna be coding in JavaScript so there
02:41 - we have a JavaScript file here and an
02:44 - index dot HTML file here so this is just
02:47 - this is like kind of like web
02:48 - development right where I could write
02:51 - any sort of HTML in this HTML file that
02:54 - I wanted and then this sketch jas file
02:59 - is linked to the HTML file so really
03:04 - what we are doing is is making an
03:06 - interactive website but it's not gonna
03:09 - be a website like you are used to
03:11 - because all we're gonna have is this
03:12 - canvas that we're going to be working on
03:16 - this prep this part of JavaScript that
03:18 - we're using is a library called p5 which
03:22 - is really great for visualizations and
03:24 - so one of the first things that we can
03:26 - do is we can draw shapes so we can draw
03:30 - on lips at on onto our canvas at a
03:35 - certain point and so I'm gonna draw an
03:38 - ellipse at one hundred two hundred and
03:42 - I'm gonna make it 20 by 20 so let's go
03:47 - ahead and just make sure that we can
03:48 - draw our first image onto this canvas
03:52 - cool
03:54 - so ellipse takes a couple of parameters
03:58 - there are four of them you can play
04:00 - around with what these do the first one
04:02 - is the x-coordinate of the ellipse and
04:05 - in fact it's the center of the ellipse
04:07 - and so if I move if I change the X going
04:12 - to 400 my lips is gonna scoot way over
04:15 - to the right the second parameter is the
04:20 - y-coordinate and so if I change this to
04:23 - 50
04:26 - the ellipse is gonna move up so one
04:31 - thing to notice right away is that zero
04:34 - zero on this coordinate system is the
04:37 - top-left corner
04:38 - so as my x-coordinate gets bigger the
04:41 - ellipse moves to the right and as my
04:43 - y-coordinate gets bigger my ellipse
04:45 - moves down so if I change that to two
04:47 - hundred mile Epps moves down if I change
04:50 - it to two hundred and twenty it's gonna
04:52 - move down a little bit more so that's
04:55 - kind of like the basics of of p5 is we
05:00 - can draw shapes on the screen we're
05:02 - gonna get into a ton of stuff with
05:03 - colors and moving and all of those
05:06 - different stuff but that's kind of like
05:07 - the basics I see our sky car in chat
05:12 - says can you explain to how how to
05:14 - organize these projects using classes
05:16 - yeah that's we're gonna get a lot into
05:19 - why we make classes how we organize
05:21 - projects using classes so that will be
05:23 - what what a lot of this is about the
05:28 - we're doing this in JavaScript just
05:30 - because it's kind of like nice and fun
05:31 - to have this nice JavaScript
05:34 - visualization but the real purpose of
05:36 - this lesson is to wrap our minds around
05:37 - classes and objects and why we might use
05:39 - them so we'll focus a lot on that okay
05:43 - if you're curious about these other two
05:45 - parameters in the ellipse function those
05:48 - determine the size of the circle so this
05:51 - first one will make the circle longer if
05:53 - it gets bigger and the other parameter
05:56 - will make it taller so you can make it
06:01 - kind of any shape that you want okay
06:04 - cool
06:05 - so one of the cool things about p5 is
06:08 - that this draw function happens again
06:13 - and again and again and by default it
06:15 - happens 60 times a second and so you can
06:18 - kind of animate your your objects really
06:23 - easily or your your shapes really easily
06:24 - so the first thing that I'm gonna do is
06:26 - I'm gonna create a variable for my
06:31 - objects Y position let's start it at 50
06:35 - as a side note I
06:38 - I am probably more most comfortable in
06:41 - Python and again I'm really kind of
06:44 - focused on the conceptual understanding
06:45 - of the class so I am NOT a super expert
06:49 - in JavaScript so I might do things like
06:51 - forget a semicolon as I've already done
06:53 - that a couple of times I might forget -
06:56 - I might use var instead of what because
06:58 - that is kind of new so bear with me as I
07:02 - make some you know JavaScript JavaScript
07:05 - syntax errors here and there okay cool
07:09 - so we have this variable called Y
07:11 - position and let me plug in Y position
07:14 - into my own lips and so this should
07:17 - scoot that circle up a little bit yeah
07:20 - global variables exactly so it's a good
07:24 - point right so this project is gonna be
07:26 - a little bit hacky in some areas like I
07:30 - just defined this global variable but
07:32 - the point of all of this is to kind of
07:35 - explain why classes are necessary or why
07:38 - we might want to use classes so they'll
07:39 - definitely be some stuff that is a
07:40 - little bit thrown together great point
07:45 - Sam if the video is blurry that you can
07:49 - go ahead and change settings down here
07:54 - in YouTube to 720p okay so great I have
08:04 - plugged in my variable for my Y position
08:06 - and now we can really see this draw loop
08:10 - in action again the draw loop happens 60
08:12 - times per second so if I change my Y
08:15 - position by 1 every time the draw loop
08:17 - happens this is going to be this is
08:21 - going to make it look like this ellipse
08:24 - is moving so there it goes so every
08:28 - single time the draw loop happens I draw
08:32 - an ellipse at a certain position and
08:33 - then I change the Y position that it's
08:36 - gonna draw at and then the loop happens
08:37 - again and now that ellipse is drawn at
08:39 - the new position and then we update
08:41 - where the next one is going to be drawn
08:42 - and that happens 60 times a second you
08:46 - can see that the old ellipses are still
08:50 - there in the background
08:52 - we can make it look like like there's
08:56 - only one ellipse by repainting the
08:58 - background every time the draw loop
09:00 - starts so I'm gonna grab it this code
09:03 - that is painting the background a
09:05 - certain color and there we go we have
09:11 - this one ellipse that is moving down the
09:14 - screen and really what's happening is
09:16 - I'm painting the background so I'm
09:19 - painting over everything that we've done
09:20 - before I'm drawing the ellipse I'm
09:23 - telling her I'm updating my Y position
09:25 - variable to say the next ellipse that I
09:27 - want to draw should be a little bit
09:29 - lower and that I'm repainting the
09:31 - background drawing the ellipse updating
09:33 - the position and doing that again and
09:34 - again and again okay cool
09:38 - any questions about kind of basic p5
09:42 - shapes or how this draw loop works again
09:46 - this doesn't really have anything to do
09:48 - with object-oriented programming yet but
09:50 - we're gonna need it in order to make a
09:52 - really cool visualization using objects
10:00 - ok I think we are good so we can move on
10:07 - ok again I'm gonna show the final
10:12 - results again really quickly so I'm
10:14 - gonna copy my code that I have already
10:15 - I'm gonna show you guys my final results
10:19 - in case you tuned in late so this is
10:22 - what we're gonna be aiming for and so
10:24 - these are a bunch of objects that are
10:27 - falling down the screen and one thing
10:29 - that you might notice is that when an
10:31 - object hits the bottom of the screen it
10:34 - pops back up to the top so that big
10:37 - green one just popped up there right
10:38 - this purple one keep an eye on it there
10:42 - it is back at the top so let me go back
10:45 - to what we had before so how do you move
10:52 - the ellipse yeah that's a good question
10:54 - in in chat again the ellipse is really
10:57 - kind of moving because we are updating
10:59 - this y position variable every time
11:01 - through the draw loop to increase by one
11:04 - every time if we made it increased by it
11:06 - five every time it would make like it
11:08 - would make it look like the ellipse is
11:10 - moving faster so this number here is
11:13 - kind of the speed of our of our ball
11:16 - that is falling okay cool
11:20 - so we just saw that when one of these
11:23 - raindrops hit the bottom of the screen
11:25 - it reappeared at the top so let's write
11:27 - in that logic and again this isn't
11:29 - really object-oriented programming yet
11:31 - but it's kind of a a piece of
11:35 - functionality that we're going to want
11:36 - to build into our objects so this is
11:39 - going to be to do this we're gonna use
11:42 - an if statement or a conditional
11:43 - statement so I'm gonna go ahead and say
11:46 - if my Y position is greater than or
11:50 - equal to 500 and 500 is the bottom of my
11:54 - canvas I defined the size of my canvas
11:56 - here if my Y position is greater than or
12:00 - equal to 500 what do you think should
12:02 - happen well we want what we want the
12:07 - ellipse to move back up to the top so I
12:10 - could reset Y position to be equal to
12:13 - zero
12:15 - so as soon as the ellipse gets to the
12:17 - bottom of the screen I'm gonna say nope
12:19 - email at the bottom anymore you're all
12:21 - the way at the top so let's see if that
12:25 - works it's moving slowly I probably
12:30 - could have increased the speed nice it
12:33 - does work let's increase the speed a
12:35 - little bit cool okay so we kind of have
12:45 - one object that you saw in the final
12:48 - final result and we haven't put this
12:50 - into a class or made this an
12:52 - object-oriented program yet before we do
12:55 - that let's make a hundred ellipses and
12:59 - let's create them with random X
13:03 - positions let's have have them all move
13:05 - at random speeds and so in order to do
13:07 - this we're gonna use an array and again
13:10 - if you're if you're not super familiar
13:11 - with arrays that's okay the point of
13:13 - this lesson isn't to really teach you
13:15 - how to use arrays or you know what
13:17 - arrays are so this might be so don't
13:22 - worry too much if you haven't seen this
13:23 - syntax before yeah nice Jarrell can you
13:28 - said set it to one so I'm going to
13:31 - create three lists
13:41 - and okay so what so if we want a hundred
13:45 - of these balls that are falling we want
13:48 - a hundred expositions a hundred Y
13:51 - positions and a hundred different speeds
13:52 - right one of the one of these one per
13:56 - per ball all right so what I'm gonna do
14:00 - is I'm going to give them a I'm gonna
14:02 - make all of those variables random to
14:04 - begin with so I'm gonna write a for loop
14:07 - again don't worry too much if you aren't
14:12 - really familiar with for loops so I'm
14:20 - gonna write a for loop that happens 100
14:23 - times I hope I've done that right and
14:27 - what am I gonna do 100 times I'm gonna
14:30 - add a random value into each of these
14:32 - lists so let's put something into you by
14:36 - position list let's push so I'm going to
14:41 - take my Y position list I'm going to
14:44 - push something into it meaning adding it
14:46 - into this list and the thing that I'm
14:48 - gonna add to it is a random number so I
14:53 - will explain this line of code in a
14:55 - second and actually I will also do this
15:00 - for the X list and a while list while I
15:02 - do this think about what this value that
15:06 - I'm pushing into these lists what this
15:09 - what this is try to try to take a guess
15:12 - at what math dot random times 500 what
15:15 - that could possibly be doing
15:27 - any thoughts on what these three lines
15:31 - of code are doing
15:39 - so math dot random gives you a random
15:44 - number between zero and one do we have a
15:49 - audio issue ooh an error interesting can
15:53 - you try to refresh do you guys don't see
15:55 - me here okay cool so Matt thought random
16:01 - gives you a random number between 0 & 1
16:04 - a decimal right so it might be point 2
16:05 - it might be point 5 we're then going to
16:08 - take that random number and multiply by
16:10 - 500 so that kind of says that kind of
16:13 - increases the range which these numbers
16:15 - could be it starts where it's some
16:18 - number between 0 & 1 and we multiply by
16:20 - 500 so now we have a number between 0
16:22 - and 500 please show the HTML yeah I can
16:29 - show the HTML it's really basic all
16:32 - that's going on in the HTML is I am
16:37 - including the p5 library and p5 is the
16:42 - thing that lets us draw ellipses and
16:43 - change the color and p5 is the thing
16:46 - that lets us basically interact with the
16:47 - canvas in the way that we're doing so
16:50 - all that's going on in the HTML is I'm
16:53 - including the source code for p5 and
16:57 - then I am also including this sketch jas
17:00 - file that I'm writing and like I said
17:04 - before this is like a normal HTML file
17:06 - so I could add whatever I wanted here I
17:09 - could do this is my object-oriented
17:15 - visualization
17:21 - I could put that in a div and then look
17:26 - at that it's very on my HTML so this is
17:29 - like any kind of HTML that you might
17:31 - already be familiar with but we're just
17:32 - really focusing on the JavaScript
17:34 - portion of it and specifically the stuff
17:37 - that we can do in p5 shouldn't we use a
17:42 - round method here yeah that's a good
17:44 - point so Matt thought random gives you a
17:48 - random decimal and then we multiply it
17:50 - by 500 and so that is also a random
17:52 - decimal and eventually what we're gonna
17:55 - be using these numbers in these lists
17:56 - for our to draw ellipses in certain
18:00 - locations and so we might want to round
18:04 - those to a whole number like 400 but
18:08 - this works fine I could have said
18:10 - ellipse at 400 point 5 and that would
18:12 - have you know put it on the screen just
18:14 - the same so yeah we might want to round
18:18 - random numbers but it's not a huge huge
18:21 - deal if we don't good question though
18:27 - okay cool so we have our three lists why
18:34 - don't I use semicolon that is a great
18:36 - question i don't use semicolon because I
18:38 - don't usually program in JavaScript and
18:41 - I am a forgetful person but you should
18:48 - use semicolons because that is proper
18:52 - style in JavaScript so good call yeah
18:58 - Oscar this this video will be posted
19:00 - right away right as it ends so if
19:04 - you--if you jumped in late or if you
19:06 - can't catch the end of it stick around
19:08 - and or check our YouTube channel
19:10 - afterwards and this video should be up
19:11 - there okay
19:15 - so what do we do with these random
19:17 - members actually before I even use them
19:19 - let me make sure that these random
19:20 - numbers are working correctly so I'm
19:25 - gonna open up the JavaScript console I
19:28 - usually do that by I use Chrome and so I
19:32 - can come in here and save you
19:34 - developer JavaScript console ooh and
19:42 - that really kind of screwed up my window
19:46 - here fix this so I pull up the
19:51 - JavaScript console if you've never
19:53 - pulled up the JavaScript console before
19:54 - it's a really good way to kind of get a
19:56 - sense of what what variable is your
19:59 - program thinks it's working with the
20:01 - value of those variables it's where you
20:03 - can log things to the constant to see
20:05 - what they look like so I'm going to I'm
20:08 - going to log one of these one of these
20:12 - values only log Y paws list and so let
20:19 - me do that when I run this now you can
20:23 - see in the console this big list of
20:25 - numbers was logged and it has a hundred
20:27 - things in it which is great that's what
20:29 - I wanted and then like we said yeah
20:32 - they're all decimals and it sure looks
20:34 - like it's between zero and five hundred
20:38 - so it looks like we've done that
20:40 - correctly I'm gonna keep the console up
20:41 - here just so we can kind of come back
20:43 - and look at it look at it later if we
20:45 - need to but that's good to know that
20:47 - this is currently working okay cool so
20:52 - now that we have these lists of numbers
20:55 - let's use them to draw a bunch of
20:58 - ellipses so this is going to look really
21:00 - similar to what we have already except
21:03 - for instead of drawing one ellipse we're
21:06 - gonna use another for loop to draw 100
21:09 - of them so we're going to write another
21:15 - for loop that happens 100 times and I'm
21:21 - gonna put all of this code that's
21:23 - already in here inside that for loop
21:25 - because this is the code that that drew
21:28 - an ellipse that fell and when it reached
21:29 - the bottom it it uh it jumped back to
21:33 - the top
21:35 - couldn't you use modulo so why pause
21:38 - modulo 500 instead of the if stuff yeah
21:41 - that's a that's a great point that's
21:43 - another really good way to do that where
21:45 - if you use modulo
21:48 - so we could do why pause equals why
21:53 - pause modulo 500 that would make sure
21:56 - that why pause is always a value between
21:59 - 0 & 1 100 that's another great way to do
22:03 - that yeah great way to refactor your
22:05 - code okay cool so we have this for loop
22:09 - and now what we want to do is we want to
22:11 - use these lists that we created already
22:14 - so I want to draw an ellipse at X pause
22:18 - list index I and it's its Y position
22:23 - there should be Y paws list at index I
22:26 - again don't worry too much if this
22:28 - indexing isn't really if you haven't
22:31 - seen this before
22:32 - all we're doing is we're looping through
22:34 - the list and for every item in the list
22:37 - we're grabbing that item and drawing and
22:40 - setting that drawing an ellipse at the
22:43 - at that place in the list so for example
22:47 - the first thing in expose list might be
22:51 - this 327 so the first time we go through
22:54 - the for loop its gonna use 327 the next
22:57 - time we go through the for loop it's
22:58 - going to use 357 as as the exposition
23:00 - and so on and so on
23:03 - cool so let's say everywhere that this
23:09 - happens so we're gonna update why pause
23:11 - list by not 5 but by speed list of I
23:17 - we're gonna update we're gonna say if
23:20 - why pause list of I is greater than 500
23:24 - we are gonna really set why pause list
23:27 - of I and I want that to be why possible
23:33 - list so if we run this right now
23:36 - ooh yeah those are going super fast
23:39 - which Sara pointed out is because we are
23:42 - allowing this speed to be a really huge
23:44 - number so I'm not gonna allow it to be
23:46 - between 0 and 500 I'm gonna allow it to
23:49 - be between 0 and 10
23:55 - cool any questions so far
23:59 - I didn't I'm very happy to take
24:02 - questions about this i indexing or
24:05 - what's going on in these four loops if
24:06 - you want to talk about it so if you've
24:12 - got any questions go ahead and post them
24:14 - in chat I'm gonna have another list up
24:22 - here I'm gonna add I've been saying
24:25 - lists a lot are they called arrays in
24:27 - JavaScript
24:27 - what are they say are they arrays they
24:29 - are indeed are raised again I'm more of
24:32 - a Python person and Python that they are
24:35 - called lists can you make it go slow and
24:39 - fast at the same time interesting what
24:42 - do you mean by that uh slow and fast at
24:47 - the same time you can definitely make so
24:49 - some of these are moving slower than
24:50 - others and that's because we were using
24:52 - different speeds we were updating the Y
24:55 - position by a different speech time what
24:58 - is push great question push is the thing
25:03 - that it's the function that will add
25:06 - something to an array so I start with
25:09 - these arrays being empty and I do
25:13 - something 100 times right that's what
25:15 - this for loop is doing and the thing
25:17 - that I do 100 times is I push a number
25:19 - into the array and so at the end of this
25:22 - for loop
25:22 - I now have arrays that have 100 things
25:25 - in them slow on one side fast on the
25:30 - opposite end ah interesting
25:33 - yes so you could potentially edit so
25:40 - this this line of code this is this
25:45 - changes the bones position all right
25:50 - this line 25 changes the balls position
25:52 - and right now we are doing that just
25:53 - based on the speed list we could do that
25:55 - based on anything that we want right so
25:57 - we could do it based on expose list of I
26:00 - and this is gonna make it so this is
26:04 - gonna make it to the ones on the far
26:05 - right which have an exposition of 500
26:08 - at speed five hundred so they're gonna
26:09 - be going really really really fast yeah
26:14 - so they're going so fast that it looks
26:16 - basically like gibberish but the ones
26:18 - further to the left are are a little bit
26:21 - better but you do expose lists divided
26:23 - by twenty that's kind of cool I will
26:27 - keep it like that Matt says I'm seeing
26:32 - one that does not move at all
26:33 - why that's a good question Matt the
26:37 - things that we're putting in this speed
26:39 - list our numbers between zero and ten
26:42 - and so some of those will have a speed
26:45 - of zero and so those won't move at all
26:46 - if we wanted everything to move at least
26:48 - a little bit we could add plus one to
26:51 - all of these and so now our numbers go
26:54 - from one to eleven rather than zero to
26:56 - ten I really like this this edition of
27:00 - slow on the left and fast on the right
27:02 - that's very cool
27:05 - okay so we've reached the point where
27:10 - basically this looks really similar to
27:12 - that final version of my project that I
27:15 - had before which again I will pull that
27:17 - up in case you have not seen it so I
27:19 - just copied the all the code that we've
27:21 - done we make sure that I don't lose it
27:26 - okay great
27:29 - let me pull up the final save point so
27:33 - this is the this is the final version of
27:36 - the code that we want and so we
27:38 - basically have this already I mean we
27:40 - haven't done the size thing really we
27:42 - haven't done the colors but we have a
27:44 - hundred balls that are falling and
27:46 - reappearing when they reach the top and
27:48 - so this is where we can really start to
27:51 - learn about object-oriented programming
27:54 - and so let me bring back the code that
27:56 - we just had okay so the idea behind
28:02 - object-oriented programming is that
28:04 - it'll be really nice if I could kind of
28:06 - define what one of these balls or one of
28:09 - these raindrops is and right now we've
28:11 - done that in three separate locations
28:13 - right we've said the first ball that is
28:16 - dropping is the is the first number the
28:20 - the information about
28:22 - ball is contained in the first number in
28:24 - this Y position list the first number in
28:26 - the x position list and the first number
28:28 - in the speed list the second ball is the
28:31 - second number in each one of these lists
28:32 - right so we kind of have all of these
28:34 - information about each one of these
28:36 - bones separated into three different
28:38 - variables and the idea behind
28:40 - object-oriented programming is that we
28:42 - want to create our own structure that
28:46 - will keep all of this stuff together so
28:48 - rather than having these three lists I
28:50 - can just have a list of raindrops or
28:52 - balls and each one of those balls will
28:54 - know this is my X position this is my Y
28:56 - position this is my speed
29:00 - another quick the the other curriculum
29:02 - developer in the room Sara had this
29:05 - really good metaphor of in life you
29:10 - think about objects as the properties
29:12 - that they contain about themselves right
29:14 - so I've a I have a closet full of shirts
29:19 - and in fact I don't because I live in a
29:20 - small Brooklyn apartment I don't have a
29:22 - closet however ensure the bottom of the
29:26 - code however when I think about the
29:30 - shirts that are in my closet I don't
29:32 - think about three lists of these are
29:34 - their colors and these are whether
29:36 - they're buttoned or not and these are
29:38 - you know whether they're short sleeves
29:39 - or not I think about I've I've one shirt
29:41 - that is plaid and button-down and you
29:48 - know is blue and white I have one shirt
29:49 - that is red and you know all of these
29:51 - other properties about it when I think
29:53 - about objects in the real world I think
29:55 - about the objects and the properties
29:57 - associated with them
29:58 - I don't think about lists of properties
30:01 - on their own like what we have here
30:04 - maybe that's a maybe that's a bizarre
30:06 - metaphor but I think that I think that
30:09 - it was a good one so what we want to do
30:12 - is we want to write some code that will
30:18 - where all of the data about a single
30:20 - ball will be will be contained and so we
30:24 - do this by writing a class and so the
30:29 - class is kind of the template of if I
30:32 - were to make a raindrop what are the
30:34 - things about the about a raindrop
30:36 - I want it to know about so I'm gonna
30:37 - write this class rain drop if you have
30:41 - any questions about like the overall
30:43 - idea of this please please ask in chat
30:46 - because again this is like more of a
30:48 - conceptual lesson than anything else the
30:50 - syntax doesn't really you know I I want
30:53 - you to be able to program this and code
30:54 - this but I'm more interested in like
30:57 - developing this understanding of what is
30:59 - a class what is an object how can we
31:01 - think about the world in a way that we
31:03 - can write code that makes sense Alice
31:07 - can you post this code somewhere I can
31:09 - read slowly I have an error somewhere in
31:11 - mind which I can't find absolutely in
31:15 - fact let me this was something I was
31:18 - playing around with earlier let me go
31:21 - ahead and save this and use some of my
31:27 - special code Academy access Alice if you
31:33 - want this exact code that I have I think
31:36 - if you press this reset project button
31:37 - right now I think you might be able to
31:39 - get my exact code right now I hope that
31:43 - works it might not I didn't test that
31:45 - before but I think that it should work
31:49 - so you can try it you can try that if
31:51 - not I can make sure to post this code
31:53 - afterwards okay cool so let me write
31:59 - this class raindrop okay and so the
32:05 - first thing that we want to do when
32:07 - making a class is saying when I create a
32:10 - raindrop what things do up what nouns or
32:14 - adjectives about this raindrop do I want
32:16 - it to know about and these are usually
32:17 - called instance variables and those are
32:20 - set in the constructor and so for us a
32:27 - raindrop has an x position
32:31 - it has a Y position and it has a speed
32:35 - and eventually we won't you like color
32:38 - and size and do other things so these
32:42 - are the instance variables right I used
32:45 - I usually think about these as these are
32:47 - the nouns and adjectives about the
32:49 - last that you're making cool and the way
32:56 - that you declare instance variables in
32:58 - JavaScript is you use this this dot
33:02 - syntax I'll talk a little bit about what
33:07 - that why we use this dot but for now we
33:13 - can just say okay these are the three
33:14 - variables that a raindrop knows about
33:16 - and when I create a raindrop when I make
33:19 - a new raindrop refreshing made
33:22 - everything go away oh you are correct
33:27 - that makes a lot of sense let me see is
33:40 - there an easy way to fix that I reset
33:42 - the initial workspace
33:48 - [Music]
33:52 - the initial safe point but that doesn't
33:55 - do anything no right because it didn't
33:59 - end until we reset it to the initial
34:00 - save point okay let me I will reset the
34:06 - initial save point yeah let me do that
34:22 - yeah
34:28 - okay Beedie Beedie Beedie i think now if
34:32 - you press that yeah that's actually it's
34:38 - actually a good solution as well Sarah
34:42 - I'm gonna send you this code you put it
34:46 - somewhere yeah
34:58 - cool
35:01 - you have it now great okay so hopefully
35:05 - hopefully that works I'm also getting
35:07 - Sarah to paste this code somewhere
35:09 - accessible okay will the string be saved
35:16 - on the channel yep the streams always go
35:18 - up right go up on the channel as soon as
35:19 - they're done so if you missed the start
35:21 - of it or if you can't stay for the whole
35:22 - thing
35:22 - you can check it out later okay cool so
35:26 - we were making this constructor so we
35:29 - have our three variables that a raindrop
35:33 - and it was about and when we construct a
35:36 - new raindrop we want them to have random
35:38 - values so let me grab it these three
35:44 - things and right we eventually want to
35:50 - do color and size I'm actually going to
35:54 - now get rid of this thing that we were
35:56 - using when we had our three separate
35:59 - lists because we don't want that anymore
36:04 - okay cool so now because I have this
36:08 - class and again the idea behind of class
36:10 - is that it is the template for how do I
36:12 - make a raindrop now that I have this
36:15 - class I can actually make a raindrop I
36:17 - can say I can make this variable named
36:19 - my first raindrop equals I think in
36:26 - JavaScript you use new syntax yeah so
36:36 - I'm saying my first raindrop is a new
36:37 - raindrop great and now let me call some
36:47 - adult log my first raindrop
36:56 - I'm gonna run that again who internal
36:59 - error great
37:01 - I totally botched this by resetting the
37:04 - workspace
37:14 - okay no I didn't might have to refresh
37:16 - if if you get that internal error I
37:18 - don't see the code in TPS I don't I'm
37:24 - not sure if I know what you're talking
37:28 - about if you could be a little bit more
37:29 - Airy if you could explain the error that
37:31 - you're seeing or what's happening okay
37:35 - but for now what I'm doing is I'm making
37:36 - a raindrop and I'm logging it and over
37:39 - here I can see hey look I logged this
37:41 - raindrop and this raindrop has a speed
37:44 - has an x position and it has a Y
37:47 - position and and those things were set
37:50 - when I created the raindrop right when I
37:54 - say new raindrop the constructor gets
37:56 - called and so it sets the position and
37:59 - speed to random values if I wanted the
38:02 - speed to all be the same I could do
38:03 - something like this and now this
38:06 - raindrop that just got created has speed
38:08 - three I don't see the code on the site
38:13 - yeah go ahead and refresh the page or
38:16 - you can click on that link that Sara
38:19 - posted and get some get some of the code
38:22 - from a little bit ago okay cool so we
38:28 - just made our first raindrop let's let's
38:32 - make 100 raindrops
38:33 - so let's now say raindrop list raindrop
38:46 - list is an empty list oh yeah Jim Jonsin
38:53 - that might be a problem
38:55 - your editor might look like this you can
38:57 - click on that middle panel to see it if
39:01 - it looks like that
39:08 - okay cool so right we are making a list
39:14 - of raindrops so again I'm gonna use a
39:16 - for-loop to do this so far I equals zero
39:20 - I'm gonna create a hundred of them and
39:26 - now what I'm gonna do in the for loop is
39:29 - I am going to take my raindrop list and
39:37 - I'm going to push into it a new raindrop
39:40 - and now let me log my raindrop list
39:54 - cool there's my list of 100 raindrops
39:58 - and I can open this up and I can look at
40:00 - each one and they all have a random X
40:02 - position in a Y position and a random
40:03 - and not a random speed the speed is
40:05 - three right now let me change that back
40:06 - to somewhere between one and eleven okay
40:15 - awesome
40:16 - so now we've kind of done this idea of
40:19 - before we had these separate lists that
40:20 - each contained a different aspect of a
40:23 - raindrop right a different element a
40:25 - different adjective or noun about that
40:27 - raindrop they used to be separate and
40:29 - now what we've done is we've combined
40:30 - them into this one object called a
40:33 - raindrop which is really great like our
40:36 - code is a lot more organized now and as
40:38 - we start develop develop bigger projects
40:41 - it'll be a lot easier to keep track of
40:43 - this is a raindrop and it has a x
40:46 - position okay cool so now what we want
40:52 - to do is we want to be able to display
40:54 - them so the other thing that classes
40:58 - have is classes can have specific
41:00 - methods associated associated with them
41:03 - and I always describe these as like new
41:05 - verbs of your object right so right now
41:08 - we have a rain drop and the rain drop
41:10 - has adjectives and nouns and those are
41:12 - our instance variables those are its
41:15 - position its speed its color you know
41:17 - all of the adjectives and nouns
41:18 - descriptive things about this rain drop
41:20 - and now we want to do thing now we want
41:22 - to write code that is about what can
41:24 - this rain drop and do right it's a verb
41:26 - and one thing that a rain drop can do is
41:28 - display itself right we want a rain drop
41:31 - to show up over here in our on our
41:34 - canvas so I'm gonna write this display
41:40 - function and what the display function
41:42 - does is really similar to what we had
41:45 - before is display draws on ellipse at
41:51 - this dot X position so the raindrops
41:55 - exposition it draws it's what at its Y
41:59 - position and for now let's draw it at
42:01 - ten by ten
42:05 - so I just added some functionality to
42:08 - our class right and these are these are
42:10 - called methods and again think of it as
42:13 - a verb that this thing could use and so
42:17 - now I can use that right I have my list
42:18 - of 100 raindrops and now down here
42:21 - instead of calling ellipse and instead
42:25 - of changing all instead of adding all
42:27 - the functionality down here I can say
42:29 - raindrop list of I so every single
42:35 - raindrop I want them to display so
42:41 - before I want before I run this do you
42:45 - think that the raindrops will be moving
42:49 - and why or why not
43:01 - we have someone new welcome yeah so if
43:08 - you're if you're brand new to this this
43:10 - is a lesson that we're going there's a
43:14 - lot of different programming topics in
43:16 - here like for loops and arrays and a lot
43:19 - of kind of syntax that might look really
43:21 - scary and I want to assure you that the
43:27 - idea behind this is not of this specific
43:29 - live stream it's not to really teach
43:31 - those for loops and arrays and stuff
43:34 - it's about this concept of
43:35 - object-oriented programming and
43:37 - organizing your code in this way where
43:39 - we're making a raindrop that has things
43:41 - about itself and that that can do things
43:44 - I repeat the question do you think that
43:48 - the raindrops will a show up on the
43:51 - screen and be move and see I guess if
43:55 - they move do you think that they will
43:56 - jump it back up to the top of the screen
43:58 - when they reach the bottom how do you
44:02 - get rid of the internal error that I got
44:03 - earlier i refresh my page which I hope
44:08 - will not completely destroy your code
44:17 - and what won't move because you haven't
44:20 - added movement to class that's exactly
44:22 - right
44:22 - right the only thing that the class
44:24 - knows how to do is this display function
44:27 - and the only thing that happens in the
44:28 - display function is drawing an ellipse
44:31 - so if I run this code I got an error
44:36 - let's see what it is I think I got an
44:41 - error let me clear my console run the
44:47 - code again let's see I've not made the
44:56 - call to do that yet yeah Madame's and
44:58 - that is correct
45:00 - where is okay I have a syntax error or
45:06 - somewhere have an unexpected token so
45:08 - I've missed a missed a curly brace or
45:10 - something and some line 36 I'm guessing
45:12 - I screwed up my brackets here yeah I did
45:22 - nice ellipse is this a JavaScript
45:25 - function or a p5 function that's a p5
45:26 - function all right and actually if you
45:28 - want to look at more p5 functions first
45:31 - of all there are a ton of really awesome
45:33 - resources to learn about p5 I think it's
45:36 - the best tool for beginning programming
45:39 - because it's super fun it's very visual
45:43 - you should look up dan shiffman's
45:45 - youtube series he does he has this
45:48 - youtube series called the code the
45:49 - coding train it is really really awesome
45:52 - Sarah also just posted all of the p5
45:54 - there are some p5 resources in the chat
45:58 - ok cool
46:00 - so I ran my code after fixing that
46:02 - little bug about having an extra curly
46:05 - bracket and there are all of my dots so
46:11 - they're not moving so let's write
46:13 - another function of a raindrop class
46:15 - called move or we could call it fall
46:18 - right again it's a verb that a raindrop
46:20 - can do a raindrop can move or can fall
46:22 - or it can do whatever and at this time I
46:25 - think I will use it was
46:29 - I forget who suggested the the other
46:33 - implementation of making it jump back up
46:35 - to the top I think maybe Beedie Beedie
46:37 - Beedie but I won't say a raindrop moves
46:42 - by increasing its Y position by its
46:46 - speed and again we're in this class so
46:51 - don't forget to use this dot this dot
46:54 - means I want this raindrops Y position
46:57 - to move by this raindrop speed not some
47:00 - other raindrop that exists in the world
47:01 - I want my raindrop its Y position due to
47:04 - move by my speed mi shiffman's younger
47:08 - brother I am NOT but we wear similar
47:11 - clothing okay cool so let's let's call
47:19 - this B let's let's run this before doing
47:21 - the thing where it gets set back up to
47:23 - the top so every raindrop is going to
47:26 - display itself and then every raindrop
47:31 - is also then going to move and they are
47:34 - all gonna zoom off the screen and never
47:36 - up here again um I found this page
47:42 - really helpful to JavaScript audience oh
47:44 - I don't know what that is I hope it's
47:46 - not spam okay cool so all of our all of
47:52 - our raindrops are falling let's write
47:55 - the little bit of logic that will get
47:57 - them to reappear at the top the nice
48:00 - little suggestion is that we could use
48:01 - modulo to do this so we can say this dot
48:03 - y pause modulo equals actually equals
48:11 - this dot y pause modulo 500 nice
48:22 - and so there they all are they're all
48:24 - following they're all reappearing back
48:25 - at the top let's add some color and also
48:32 - size and again let me if you have
48:37 - questions about these functions go ahead
48:41 - and go ahead and ask them now and let's
48:44 - also get back to that point where the
48:46 - ones on the right were following faster
48:48 - than the ones on the left that was we
48:50 - did that by saying don't increase it by
48:52 - its speed increase it by its exposition
48:55 - which will make the ones on the right go
48:57 - really really fast so exposition divided
49:00 - by let's say 50 that's cool I like that
49:07 - quite a bit
49:10 - should probably be mod 500 plus a lip
49:12 - size yeah so there's like a little bit
49:14 - of weirdness with how big the ellipse is
49:18 - right now everything is happening from
49:20 - the center of the ellipse which I think
49:22 - that that is that's fine
49:25 - sorting list by speed could also work
49:27 - that would also be a great idea that
49:29 - would so sorting the list by speed would
49:33 - yeah that would make more sense right
49:36 - this is kind of a weird line of code
49:37 - where we're modifying the Y position
49:40 - based on its x position but you know
49:43 - it's kind of a demonstration if you can
49:44 - use these for anything yeah now you made
49:46 - snowflakes yeah that's a that's a good
49:48 - point we can also say you can also
49:50 - change how these things are drawn right
49:52 - right now they're just ellipses we can
49:53 - like throw a rectangle on top of them
49:56 - right you can do a ton of stuff to it
49:58 - make these appear differently please
50:02 - repeat the purpose of the raindrop class
50:04 - yeah that's an awesome question that's
50:05 - really kind of like the whole point of
50:07 - this exercise is that we've made this
50:09 - class where all of our information about
50:12 - a single raindrop is contained in one
50:15 - place and so there are really two big
50:19 - big things that a class or a big piece
50:22 - of pieces of information that a class
50:24 - has it has all of the nouns and
50:27 - adjectives associated with that thing
50:29 - and those are our instance variables and
50:31 - so right now that's that's a raindrops x
50:33 - position its Y position and its
50:35 - and we're about to do this dot size
50:39 - we're about to do size right that's an
50:41 - adjective associated with a raindrop and
50:43 - so those are all in the same kind of
50:46 - data structure in the same place the
50:50 - other thing that a class can do is you
50:52 - can add functionality to it so these are
50:54 - the verbs
50:54 - what can a raindrop do it can show
50:56 - itself on the screen that's display and
50:59 - it can move right or it can fall or you
51:02 - know we could have named this whatever
51:03 - we wanted you can think about other
51:05 - things that raindrops do maybe you want
51:06 - like a splatter function and when it
51:08 - gets to the bottom it like you know
51:10 - turns into something else once we're
51:14 - done with this exercise we'll talk a
51:16 - little bit about conceptually other
51:18 - classes that we could make so let me
51:22 - quickly add size so I'm gonna make the
51:25 - size a random number between let's say 1
51:33 - and 30 and so weird why you sighs I use
51:39 - size in the verb to display right in the
51:43 - function display so instead of being 10
51:47 - by 10 I'm gonna use this dot size so now
51:52 - if you should all have different sizes
51:54 - that's that's pretty cool and then
52:00 - finally let's add some color I haven't
52:03 - really talked about how to do color yet
52:09 - in p5 so this will I'll go through this
52:11 - kind of quickly Alice I see your
52:13 - question I will answer in a second let
52:15 - me do color and there's actually going
52:17 - to be three different instance variables
52:19 - or adjectives about this it's gonna be
52:21 - how much red does this raindrop have
52:23 - it's gonna be how much green does this
52:25 - raindrop have and how much blue
52:29 - does this raindrop have and these are
52:34 - going to be numbers between 1 & 2 or 0
52:38 - and 255
52:44 - and if you know anything about like RGB
52:47 - values or hex codes or anything this
52:50 - might look a little bit familiar to you
52:52 - if not don't worry about this too much
52:56 - this is basically how you do color in p5
52:58 - which is a really cool topic and you
53:00 - could go you know you could you could
53:02 - learn a lot about this but for now all
53:05 - we're gonna do is we're gonna say before
53:07 - we draw the ellipse we're going to fill
53:09 - it with its red value it's green value
53:14 - and it's blue value and there we go each
53:23 - ellipse has its own red green and blue
53:25 - values and those three values are used
53:27 - together to color in the ellipse and you
53:32 - can imagine if this wasn't object
53:34 - oriented we would have needed these big
53:37 - lists for like red lists right we would
53:41 - have needed something like this green
53:42 - list right we would have needed all of
53:46 - these giant lists and instead what we do
53:48 - because we are you're making this a
53:52 - class we're saying one single raindrop
53:55 - has a red value it has a green value it
53:57 - has a blue value and then those are used
54:00 - within the raindrops and then we happen
54:01 - to make 100 raindrops can you change
54:05 - attributes from where you call the class
54:07 - ie
54:08 - new raindrop x yeah so that's that's a
54:11 - great question we can say if we want to
54:15 - always make the raindrops appear at the
54:19 - exposition 250 we could say the
54:22 - constructor takes some input x value and
54:27 - rather than the exposition being this
54:29 - random number we're gonna make it B
54:32 - input X value and now these raindrops
54:37 - should all be right in the middle of the
54:40 - screen so that's a that's a really good
54:42 - question Jim about adding parameters to
54:46 - this constructor and you can certainly
54:48 - do that we just happened because we want
54:52 - this to be like random and fun and them
54:54 - all over the place we're just making
54:56 - everything random which me
54:57 - that we don't really need to pass any
54:59 - Constructors in here the parameters
55:07 - appear in order then yes exactly so so
55:10 - they appear however you however you
55:14 - define them in here so if I if I pass in
55:16 - a 250 250 and then a 100 and then I have
55:19 - two parameters up here of per am one and
55:23 - per am two parameter one will be 250
55:28 - parameter two will be 100 and then I can
55:31 - use them however I want in the
55:32 - constructor so I could set the speed
55:35 - equal to per m2 or I could set the blue
55:39 - equal to per am one so these will all
55:43 - now be moving at the same speed and
55:44 - they'll all have the same blue value
55:51 - okay cool
55:54 - if you have any other questions about
55:56 - this specific project go ahead and ask
55:58 - them to finish this up I wanted to kind
56:01 - of like talk about this idea behind
56:04 - object-oriented programming in general
56:07 - and I think a good way to do that is to
56:10 - think about pieces of software that
56:14 - you've seen before or that you've used
56:15 - before that have objects and thinking
56:19 - about what the nouns and verbs associate
56:21 - nouns and adjectives associated those
56:23 - objects are so what would those those
56:26 - instance variables speed and then what
56:28 - can those objects do meaning what
56:30 - functions do they have and the one that
56:32 - I it that I've used in the past is is
56:37 - let's pull up an image of a Mario game
56:43 - alright so I think like a useful
56:47 - exercise now now that we kind of have
56:49 - this idea of objects and classes are
56:51 - used to store data all in the same place
56:54 - is let's think about what are some what
56:58 - would the instance variables of Mario be
57:02 - and go ahead and think about that in the
57:04 - chat right what are the nouns and
57:06 - adjectives associated with Mario and
57:08 - there'll be some similar ones the ones
57:09 - that we coded today
57:10 - for these raindrops and they'll probably
57:11 - be some different ones so go ahead and
57:17 - in chat
57:19 - give me some instance variables for
57:21 - Mario or really for any of these things
57:22 - or if there is a different object that
57:25 - you're thinking of let's try to think
57:30 - about how we would create some of these
57:32 - objects if we were to if we were going
57:33 - to try to start writing Mario
57:46 - any ideas what are nouns and adjectives
57:50 - associated with Mario or if you want to
57:52 - do the second part of a class what are
57:54 - these functions or methods that Mario
57:55 - can do like what what are the verbs that
57:58 - he has access to wait a little bit to
58:03 - see if anyone in chat has any any ideas
58:05 - about if we were to write a Mario class
58:08 - what would what would our instance
58:14 - variables be and what would our
58:15 - functions be her methods be I've never
58:22 - played Mario what does he do
58:24 - Mario walks around he can jump he you
58:31 - know yeah we also don't have to do Mario
58:33 - right we can think about actually
58:35 - another good idea is I mean it
58:39 - practically like we can think about
58:41 - objects in the real world as classes and
58:44 - objects and so maybe think about it you
58:51 - know a deck of cards or some dice what
58:55 - what could those what properties are
58:57 - associated with a single die or several
59:00 - dice cats yeah Mario that's it that's a
59:05 - good one right cats there are lots of
59:07 - variables associated with there are lots
59:10 - of like nouns and adjectives associate
59:11 - with cats so those are the instance
59:13 - variables and lots of verbs things that
59:14 - cats can do whom yeah a fireball
59:18 - variable right so going back to the
59:20 - Mario example and we can make this brief
59:21 - because some people have not played
59:23 - Mario right Mario has an x position he
59:26 - has a Y position he has am I am I in
59:31 - fireball mode right can I throw
59:32 - fireballs
59:33 - he has am i dead or not he has have I
59:38 - jumped already right because he can only
59:39 - jump once before touching the ground
59:41 - again all of these variables are things
59:44 - about Mario and then he has things that
59:47 - he can do he can jump and so when he
59:49 - jumps maybe that variable associated
59:51 - with have I jumped already before
59:53 - touching the ground
59:53 - maybe that flips to false you'd have to
59:58 - again right movement right
59:59 - more functions that more methods that
60:01 - mario has he can walk right he can run
60:04 - right he can walk left he can run left
60:06 - he can crouch he can do all sorts of
60:08 - things right so those would be if we
60:12 - were to make a Mario class those would
60:13 - be the functions and all of the nouns
60:18 - and adjectives the things about Mario
60:20 - would be the instance variables and then
60:22 - in theory you can make 100 Mario's right
60:23 - and each one will have this one this
60:26 - one's position is this
60:27 - this one has fire flower mode this one
60:29 - is running left this one is running
60:32 - right right you can make a hundred
60:33 - different copies of this one object that
60:35 - all have their own information about
60:37 - them the dice example which I will do
60:42 - very briefly a die has a certain number
60:46 - of sides so I could if I were to write a
60:50 - die class or dice class I might have a
60:57 - constructor that has this dot sides
61:04 - right most uh most dice arse excited but
61:07 - some are not dice have this dot face up
61:15 - right that's an important thing what's
61:18 - the current top side of the die maybe it
61:21 - starts at one by default and then I
61:23 - think that thing dice can do is I can
61:25 - roll my own dice right and that would
61:28 - probably change the this dot face up
61:33 - variable if I'm doing something in like
61:38 - p5 I would probably want the dice to be
61:41 - able to display itself right which would
61:43 - this would like draw a rectangle and a
61:48 - certain number of circles based on this
61:56 - dot face up meaning if the current thing
62:00 - that's face up is a six I would want to
62:02 - draw a rectangle with six dots on it if
62:04 - it's a three yard line draw a rectangle
62:05 - with three dots on it yeah Jim great
62:11 - question of
62:12 - out what does this dot mean is it like
62:15 - var or what and actually Sarah here's a
62:19 - question for you should these instance
62:22 - variables should I do wet this thought
62:24 - exposition or is that not proper syntax
62:30 - so I don't think you need to do when
62:33 - you're when you're making these instance
62:35 - variables and again this is specific to
62:37 - JavaScript the the syntax is going to be
62:39 - different depending on the language that
62:41 - you're using you might have to say it
62:43 - let but this idea of this dot is present
62:48 - in pretty much any language that is
62:49 - using object-oriented programming and
62:52 - what this dot means is that you are
62:55 - defining the the variable for every
63:01 - raindrop right so each one of these
63:03 - raindrops has an exposition and a y
63:07 - position and a speed and when I call
63:10 - when I use these instance variables in
63:13 - functions like display or move the
63:18 - instance variable that I want to use is
63:19 - this raindrops position or this raindrop
63:23 - speed I don't want to use any of the
63:24 - other raindrops that might exist in the
63:26 - world I want to use this single one yeah
63:31 - that's that's a really great question
63:33 - Jim and I hope I explained it well let's
63:42 - see what's my favorite IDE I use my text
63:50 - editor is Adam I think it's okay I don't
63:54 - have strong feelings about it anyway
63:59 - because I don't exit it it's very true
64:04 - okay cool I think that we have reached
64:07 - the end of this live stream whenever why
64:12 - would you want to create your own
64:13 - library for classes instead of using an
64:14 - existing one that's a complicated
64:17 - question and really depends on what that
64:18 - existing library does
64:22 - Yeah right it's entirely possible that
64:25 - you are trying to do something that has
64:26 - never been made that's like what is
64:28 - super empowering about coding is that if
64:31 - it doesn't exist then you can just kind
64:33 - of make it yourself and and it can be a
64:36 - thing that exists in the world and other
64:37 - people can use it and it's a great
64:39 - collaborative process instead of p5 for
64:44 - example interesting so like when would
64:48 - you want to make your own yeah I think I
64:53 - think one answer is if you're not
64:54 - satisfied with the functionality of p5
64:56 - right if you find p5 really frustrating
64:58 - in certain ways and you're like hey I
65:00 - think I have a better way of drawing
65:02 - shapes to the screen or a more intuitive
65:04 - way then you can you can start to get
65:07 - your hands dirty writing your own
65:08 - library yeah more control maybe yeah and
65:11 - I mean just depends on what you want to
65:14 - do with it right there are lots of
65:15 - different it's kind of the same thing
65:19 - with programming languages in general
65:21 - right where I like Python because the
65:26 - things that I do with Python are usually
65:27 - like data science e related and python
65:29 - has a bunch of libraries that I know
65:31 - well and that I find less cumbersome or
65:36 - less burdensome to use and so I could do
65:38 - all of this data science stuff in
65:40 - JavaScript and there are lots of cool
65:42 - libraries that would let you do that but
65:44 - for the stuff that I am working with I
65:48 - like the Python things okay so this is
65:53 - what I want you to do if you made it to
65:54 - the end of this video thank you very
65:56 - much
65:57 - I am shoot I did not make a feedback
66:02 - form okay I will post a feedback form in
66:11 - the description of this YouTube video in
66:13 - like 10 minutes
66:14 - I understand that that is probably an
66:17 - impossible task for someone to come back
66:18 - to a YouTube page ten minutes after a
66:20 - live stream has ended but if you watch
66:23 - this I would have very much appreciate
66:24 - you to fill out a feedback form yeah
66:29 - Sarah if you could put the code on repla
66:31 - train
66:36 - yeah let me why don't you just do the
66:39 - final the final save point yeah yeah so
66:49 - one I will post a feedback form on the
66:53 - YouTube description it would be great if
66:55 - you could fill that out too
66:57 - I would love to see you take this idea
67:01 - of falling raindrops and experiment with
67:04 - it on your own like this idea of having
67:06 - the ones on the Left moving slowly and
67:08 - the ones on the right movement quickly
67:09 - is awesome and it makes a really cool
67:10 - result I would love to see you guys or
67:15 - you all experiment with this on your own
67:18 - and if you do something send it to us I
67:21 - tweet at code Kadim a comment in the
67:25 - youtube section and in fact what I will
67:28 - do is if you send some stuff in and
67:31 - they're really cool I will put
67:32 - screenshots of your projects and give
67:34 - you credit in the objective over here
67:38 - and that goes for people who are
67:40 - watching this well after the fact too so
67:41 - people who are not watching this live if
67:42 - you make it all the way to the end I'd
67:45 - love to see what you what you do
67:49 - okay post the feedback form in chat
67:51 - instead yes I can you know what I will
67:57 - because I'm about to shut down the live
68:00 - stream and make this feedback for them
68:01 - anyways I might as well just do that in
68:05 - a separate window and keep the chat open
68:08 - so you guys can ask questions so I could
68:12 - be making a feedback form over here
68:16 - feedback form in slack maybe yes I will
68:22 - post the feedback form but the issue is
68:24 - that the feedback form is not it
68:25 - currently exists when can I start
68:31 - applying to jobs so we actually had a
68:33 - live stream about about job interviews
68:39 - and whiteboarding and things like that
68:42 - you can find that on our youtube page
68:45 - there's
68:46 - so ways to find it on coke atom e itself
68:53 - I don't know if I would be able to
68:55 - quickly
69:09 - again I'm just gonna make this form
69:11 - right now so if you want to if you want
69:14 - to leave there is gonna be pretty much
69:16 - no more no more coding that is happening
69:19 - but I'm happy to answer questions as I
69:22 - make this thing
69:57 - how can I know that I'm ready for
69:59 - applying that is a really great question
70:08 - [Music]
70:12 - how can I know that I'm ready for
70:14 - applying for jobs I think it helps to
70:18 - kind of practice these interview
70:20 - questions yeah it really depends
70:22 - I can't scroll to the bottom of my code
70:28 - yeah I think having a little bit of a
70:30 - portfolio might help like if you have
70:32 - two or three projects that you can show
70:33 - off that might really help okay cool I
70:41 - have this form ready let me
70:58 - let me get post it in the chat
71:12 - um is too expensive that is very true
71:19 - okay so there's the feedback form I will
71:22 - also post it in the description of the
71:24 - YouTube video if you want to if you want
71:29 - to fill it out later cool okay I think
71:36 - I'm going to stop this dream we're gonna
71:38 - continue streaming every Thursday at
71:41 - 1:30 so if you don't get an email or if
71:45 - you don't see a notification on code
71:47 - Khadem e or if you don't see a tweet or
71:48 - any of these ways that you might have
71:49 - found the stream hopefully you can just
71:52 - find it through youtube this has been
71:53 - super fun I hope you liked this project
71:55 - I hope you have a better understanding
71:57 - of what object-oriented programming is
71:59 - and why you might want to use it and
72:03 - we'll see you next time thanks everyone