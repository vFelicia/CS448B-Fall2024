00:00 - take off alex
00:10 - i
00:13 - think yeah we're live okay cool
00:16 - we're live hello everyone and welcome to
00:19 - the second
00:20 - series of second live series of creative
00:23 - creative coding
00:24 - um at co academy um my name is jiwan
00:27 - and we have um
00:31 - everyone with us today i'm jamie um i've
00:34 - been on a few live streams in the past
00:36 - normally for data science related
00:38 - content or like python stuff
00:39 - so this is a little different today um
00:42 - but i have some experience
00:44 - with p5.js not nearly as much as g1
00:47 - um so i'm really excited to do this live
00:50 - stream with her and
00:51 - learn a lot along the way cool um so
00:54 - first off sorry for alex posted in the
00:58 - chat but sorry for a little technical
00:59 - difficulties and starting a little bit
01:01 - late
01:02 - um but um let's do a move on
01:05 - and i do want to quickly recap some of
01:08 - the things that we covered in our first
01:10 - live series
01:11 - so during our first live series session
01:13 - we really talked about what is creative
01:15 - coding
01:16 - basically um kind of um talking about
01:19 - the fact that creative coding is just a
01:21 - different approach to programming right
01:23 - we're not necessarily thinking about
01:24 - creating something is
01:26 - useful but rather we're using create
01:28 - coding to
01:30 - um create something create something
01:33 - creative
01:34 - and really you know the goal of
01:37 - the things that you will learn inside in
01:39 - the learn p5.js course
01:41 - is for you to use programming to create
01:43 - drawings and um
01:44 - using primitive shapes for most part of
01:46 - the content and
01:48 - you'll get to move on to doing some you
01:49 - know incorporating some
01:51 - audio with audio at the for the last um
01:55 - last live stream series but in the
01:57 - course you'll also get um
01:59 - in a little bit of a taste of how to use
02:01 - images and videos in there as well
02:03 - and i do also want to say that the p5.js
02:06 - course is free on the platform
02:08 - so anyone who is following along with
02:10 - the live stream series would be a really
02:11 - good compliment
02:13 - to the learn people ideas on course for
02:15 - you to follow along and we've this is
02:17 - the second series we've got six more to
02:20 - go to
02:21 - um i've got a lot of exciting things
02:23 - happening
02:24 - um for the future live series as well as
02:27 - today's
02:28 - um so so for today's live live stream
02:31 - series i do want to
02:32 - perhaps share my screen now and
02:36 - um trying to find the
02:40 - right one um
02:44 - so i'm seeing my screen okay right jamie
02:48 - yes okay so for today's live stream i do
02:51 - want to talk a little bit
02:53 - about um the second module of the
02:56 - learn p5.js course which is called
02:58 - animation
02:59 - so in the last stream last stream series
03:02 - live series we
03:03 - kind of take a took a look at you know
03:05 - the how to um set up our p5.js sketch on
03:08 - the and set up the canvas on a web page
03:11 - and use the setup and draw functions to
03:13 - create
03:15 - a canvas and create 2d shapes what we're
03:18 - going to do today
03:19 - is we're going to be creating um the end
03:21 - goal of the live series is two for us to
03:23 - create this
03:24 - um sketch um we're going to be following
03:26 - along this project called bouncing balls
03:29 - so we can see on the right hand side the
03:30 - end product of what we're going to be
03:32 - creating
03:33 - which are basically you know a lot of
03:35 - circles that are going to bounce around
03:37 - the canvas and they're going to have
03:38 - different sizes and different colors and
03:40 - different speeds and so on
03:41 - and so this is kind of what we're trying
03:43 - to do and um
03:46 - basically we're going to be using just
03:47 - one shape a circle function
03:49 - to create already a list function in
03:51 - this case um to create this kind of
03:53 - the shapes that are going to be in there
03:55 - and then we're going to use
03:56 - um arrays and for loops to create this
03:58 - sort of an effect of animation
04:00 - but before we get into there i do want
04:02 - to talk a little bit about
04:04 - uh some of the things that you'll be um
04:07 - you'll be learning about
04:08 - inside of the animation module which is
04:10 - you're going to be talking about
04:12 - uh in in this um first animation lesson
04:15 - we're going to let me read back go back
04:17 - to the introduction
04:19 - exercise but first we're going to get
04:21 - into like what even is animation
04:23 - right if animation is basically um if
04:26 - you put uh if you
04:28 - display images after the other then it
04:32 - basically becomes like an animation
04:34 - um and um in the concept of animation
04:36 - there is
04:37 - a thing called frames which is the thing
04:39 - that we're going to be
04:40 - basically utilizing the way that our
04:42 - draw function
04:44 - works in order for us to create
04:45 - something moving which
04:47 - which essentially means that it has some
04:50 - different value
04:51 - in whatever the thing that is moving um
04:54 - so that will look like it's
04:56 - moving frame after the other um and then
04:59 - we get to
05:00 - um the other lesson that is inside of
05:01 - the animation module is basically on
05:04 - a little bit more of like an
05:05 - intermediate um like an add-on to the
05:08 - sheet functions that we looked at in our
05:10 - first live stream series and in the
05:12 - first module of the course
05:14 - but basically you look at the different
05:15 - kinds of transformation functions
05:18 - um that will help you group together
05:20 - shapes
05:21 - and make them you know rotate and
05:22 - translate and that kind of things
05:24 - are covered in the second lesson
05:26 - included in these
05:27 - in this animation module there's also i
05:29 - do want to talk a little bit about this
05:31 - article that is included
05:32 - in this um module as well which is
05:35 - called tips for creating animations with
05:37 - p5.js
05:38 - but this is all of those things that are
05:40 - a little bit like a side topic in a
05:42 - sense they're not essentially
05:43 - strictly about the animation but all
05:45 - these tips that will
05:47 - increase um or like make your animations
05:49 - p5.js animations look a little bit more
05:51 - responsive
05:52 - and a little bit more um fun so to speak
05:55 - so i do if you guys were here for this
05:58 - first live series you will know that i
05:59 - do
06:00 - enjoy putting in opacity um
06:03 - in when i filled um colors
06:07 - for my shapes so that you know you can
06:08 - use it to create this kind of like a
06:10 - um trailing effect without doing too
06:12 - much other than
06:13 - just adding opacity into the background
06:15 - color and the fill color of your shapes
06:18 - and so on this this article is a little
06:21 - long
06:21 - but i think i do think that it has a
06:24 - little bit of like
06:25 - this kind of like all of my tricks up my
06:27 - sleeve things written out in
06:28 - article form so i do hope that you guys
06:30 - get a chance to take a look at this
06:33 - and um i hope you guys enjoy it also
06:36 - do you want just one question so you
06:38 - said this course is free to
06:40 - all codecam users or just to pro members
06:43 - all cool crappy users so this if you
06:45 - have an account like academy you should
06:47 - be able to access
06:49 - most of the content on this um of course
06:52 - definitely the lessons and the articles
06:55 - i do think that the quiz and the project
06:57 - are pro only but everything else in
06:59 - terms of the actual core content of the
07:01 - course is free
07:03 - for everyone okay now that we've talked
07:06 - a little bit about
07:07 - the kind of the content uh that is um
07:10 - that i'm going to cover
07:12 - um and then it's covered in the
07:14 - animation module
07:16 - i'm going to reset all of this
07:20 - and start taking a look at the project
07:22 - that we're going to build
07:24 - so today's project is called bouncing
07:27 - balls
07:27 - and what we're going to do is as you saw
07:29 - previously we're going to create a lot
07:31 - of bowls
07:31 - and then we're going to have them bounce
07:33 - around the canvas
07:34 - and um i'm going to go ahead and maybe
07:37 - take a look at the prompt
07:39 - and it's talking about how you know like
07:41 - that how you can express yourself with
07:43 - the the way that you animate certain
07:46 - um things certain certain shapes and you
07:49 - know this
07:49 - this talks about measuring it imagine a
07:51 - sketch with only
07:53 - one gray circle small and tucked away in
07:55 - the corner what mood
07:56 - would this would this convey and so on
07:58 - but then the goal of this
08:00 - um sketch is for us to create a lot of
08:01 - the balls in different colors and make
08:03 - them look super festive
08:04 - and super fun and we're going to touch
08:07 - on a lot of the things that were covered
08:08 - in the animation module like i said
08:11 - but before we go um talk about
08:14 - the things that are specifically to do
08:16 - with animation i'm going to go ahead and
08:18 - start reading the prompts
08:20 - and in this project so the first one it
08:23 - says
08:24 - take a look at the sketch shares on the
08:25 - right right now there's a setup function
08:27 - it's mostly empty there's a setup
08:29 - function and there's a draw function
08:30 - so let's actually do take a look at what
08:32 - we have in here right now
08:34 - and talk a little bit about um the
08:36 - existing code in here provided for us
08:40 - as a little bit of a recap so we've got
08:42 - two functions in here there's a function
08:44 - called setup
08:45 - that is defined in line eight and
08:47 - there's a function called draw that is
08:48 - defined in line 24 right now
08:50 - inside of the setup we've got this
08:53 - function called create canvas
08:54 - that has two arguments window width and
08:57 - window height
08:58 - so what this create canvas function does
09:00 - is that it essentially creates this
09:02 - black block in here that we see i am
09:05 - going to go ahead and like
09:06 - um comment this out just to show you
09:08 - guys that
09:10 - did not do anything i'm gonna also take
09:11 - this out
09:13 - but my point oh okay well this actually
09:16 - does prove something
09:17 - that even if we don't use the create
09:19 - canvas function in here it is by default
09:22 - going to create a canvas in there for us
09:24 - if you actually don't want to use a
09:26 - canvas within your
09:27 - pp5.js sketch which seems like a really
09:30 - really rare
09:31 - instance because you would normally be
09:33 - using q5.js to create drawings
09:35 - you can use a function called no canvas
09:38 - to not actually draw anything on your
09:40 - b5.js sketch which again i have to say
09:43 - i think this just background is black
09:45 - but this no canvas function will make
09:47 - sure that there is no canvas that you're
09:49 - drawing on there
09:50 - but let's actually do this create canvas
09:53 - and what this does is that it draws a
09:54 - canvas to the window with
09:56 - the browser with or the preview width
09:58 - that you see in here and the window
09:59 - height that you see here on here
10:01 - so if i were to actually change these
10:03 - and say 100
10:04 - and give it static numbers and say 100
10:06 - 100
10:10 - it will create a much smaller canvas i
10:11 - am actually going to go to style
10:13 - but css because yes i do see the
10:15 - background is blank
10:17 - i'm going to take this off for now so
10:18 - that i can show you
10:20 - more effectively that we were drawing a
10:23 - canvas
10:24 - and that the background of the whole
10:25 - html was black so now if i were to turn
10:28 - this back on
10:30 - we now see that there is only one small
10:32 - canvas
10:33 - that is a width of 100 pixels and height
10:35 - of 100 pixels in the middle of the web
10:37 - page
10:37 - wise in the middle of a web page this is
10:40 - not something that is done by default by
10:42 - p5.js
10:43 - we have extra code in here for style.css
10:46 - that
10:46 - makes this particular canvas appear in
10:49 - the middle of the whip
10:51 - horizontally and vertically in the
10:52 - middle of the web page so if you were to
10:54 - you know this
10:55 - if i were to disable all of these inside
10:57 - of the canvas
10:58 - selector then we'll see this in the top
11:00 - left corner of the web page like we
11:02 - should normally do
11:03 - because everything is a plug element
11:05 - anyway we're
11:06 - i'm going to leave that in there um for
11:08 - the purpose of this um
11:10 - creating this project but i did want to
11:13 - just have a do a quick recap of
11:15 - you know the create canvas function
11:16 - which is used to basically create the
11:19 - area
11:19 - in which we're going to start drawing
11:21 - into and if we use
11:23 - um variables which are window width and
11:25 - window height which are
11:26 - built-in variables that come with the
11:28 - b5.js library
11:31 - window width window height
11:34 - it will generate our canvas to be the
11:36 - exact width and height
11:37 - of our browser um
11:41 - so there we go do you want a quick
11:42 - question about that if you extend
11:44 - the browser because like the browser is
11:47 - shrunk right now
11:48 - if you extend it does it automatically
11:51 - no oh so does it just um kind of
11:55 - like stay with like what it is currently
11:58 - yeah that's also actually because the
12:01 - setup function only runs
12:02 - once at the beginning when we click run
12:06 - or when we click save in our case
12:08 - if you did want to make sure that your
12:10 - canvas resized when your browser resized
12:13 - you can actually take a look at that in
12:14 - the article in the tips for any creating
12:16 - animations article here
12:18 - and that's the first thing that we
12:19 - talked about which is that you can
12:21 - create another function called window
12:23 - resize
12:24 - inside of it if you use the resize
12:26 - canvas function
12:27 - and i have a little gif in here you'll
12:29 - be able to resize the canvas and resize
12:32 - all the elements
12:33 - inside the canvas given that they use a
12:36 - not a static value like a pixel
12:38 - value they will move along with it so we
12:40 - can actually go ahead and try doing that
12:42 - so for example i usually do it at the
12:44 - end
12:44 - of my sketch or at the end of my
12:46 - javascript file
12:48 - so if i do function let me actually just
12:50 - move it up so you can see better
12:52 - and then do function do
12:55 - window resize so what this function does
12:59 - is that
13:00 - the contents of this function will run
13:02 - when the window resize
13:04 - event is detected so this is a little
13:06 - bit like an event callback if you guys
13:08 - are familiar with what they are
13:10 - and it's for but if you don't all you
13:11 - need to know is that all
13:13 - the content of everything inside of this
13:14 - function will only run when the
13:16 - browser window has been resized and
13:19 - inside of here we can call the resize
13:22 - canvas function and if we pass in window
13:25 - width
13:26 - and window height again because window
13:28 - width and window height variables will
13:30 - change
13:31 - depending on the current window browser
13:33 - is window width and current browser's
13:35 - window height
13:36 - so if we go ahead and save this and
13:39 - i stretch and shrink my canvas
13:44 - it does do a little bit of a lag but
13:47 - mostly because
13:48 - there's a bit of opacity in the
13:49 - background so if i were to take that out
13:52 - it will do a bit more of a cool
13:57 - zero is oh there we go something
14:00 - happened
14:00 - uh but now it kind of sticks more
14:03 - immediately to
14:04 - the expansion and shrinking of the
14:06 - canvas
14:07 - oh sorry of the browser with uh window
14:09 - width and height
14:11 - let me actually bring that opacity back
14:13 - in here
14:14 - because this is the most essential thing
14:15 - that you will need to do in order for
14:16 - you to create traces of your animation
14:19 - um which we actually talked about in our
14:21 - last live stream
14:23 - okay so what will happen this the
14:26 - the second function that is in here the
14:28 - draw function is going to be the most
14:30 - essential
14:31 - sort of like a structure or the
14:32 - fundamental structure that we'll need to
14:34 - use in order for us to create animations
14:36 - so just for a quick recap the draw
14:39 - function runs
14:40 - um in an infinite loop after the
14:43 - everything inside of the setup function
14:45 - runs so everything in the setup function
14:46 - runs
14:47 - once all of these are done running and
14:49 - it only runs once
14:50 - the draw loop everything inside the draw
14:52 - function also called drop loop will run
14:55 - in continuously until you exit out of
14:57 - the browser
14:58 - or you stop to come to um stop the
15:01 - sketch itself which could be done in
15:02 - multiple ways but
15:04 - the easiest way would be just closing
15:05 - the web page right
15:07 - and what we're going to do is that we're
15:09 - going to utilize the fact that it runs
15:11 - in an infinite loop
15:12 - so if you keep updating one value in
15:14 - there um
15:16 - incrementally and ev and then you have
15:19 - something that loops over and over again
15:21 - it will move
15:22 - something or change something
15:24 - incrementally and gradually so it will
15:26 - look like it's being animated over time
15:28 - and we're going to use that mechanism in
15:31 - here and
15:32 - i'm going to now take a look at the
15:34 - first instruction that's been given to
15:36 - me
15:37 - and it says first let's set up our
15:39 - global variables since we're creating
15:40 - multiples we'll need to determine how
15:42 - many poles we want to bounce around our
15:43 - sketch in order to do this
15:45 - get a variable called boldcount and
15:47 - we're going to set it to 100.
15:48 - so i'm going to say let's fall count and
15:51 - we'll set it to 100.
15:52 - later on we'll look at how like how we
15:54 - can change the number of bowls by just
15:56 - by changing this
15:58 - the value of this variable but actually
16:00 - that's exactly the point on why we're
16:02 - saving this as a global variable
16:04 - right if we ever wanted to change the
16:06 - number of balls that we see
16:08 - on the canvas we can easily do that
16:10 - because we have the save as a global
16:12 - variable
16:13 - and we'll be referencing this variable
16:15 - name rather than this static number
16:16 - when we want to create x number of balls
16:20 - within our draw loop so let's go ahead
16:22 - let's actually check that off
16:24 - and then go to our next step which it
16:26 - says now we need to initialize
16:28 - empty oh thank you i'm on a strike um
16:33 - streak sorry not a strike um okay let's
16:36 - go to the second point it says now we
16:38 - need to initialize empty arrays for x
16:39 - and y position of our ball bouncing
16:42 - bouncing balls um below our ball count
16:44 - variable
16:45 - um create a variable for the x position
16:47 - called x and
16:48 - variable called y positions called y and
16:50 - then set x and y variables to empty
16:52 - arrays
16:53 - let's go ahead and do that and let's say
16:54 - let x is equal to a empty square bracket
16:58 - so just as a quick refresher if you're
16:59 - not um
17:01 - familiar with what arrays are they're
17:03 - basically a list
17:04 - there's a mech there's a mechanism of
17:05 - keeping a list of um
17:08 - values and in javascript we can
17:10 - initialize them by using a closing and
17:12 - opening
17:14 - square brackets so if you have an empty
17:16 - one like this then it means that you've
17:17 - created a variable called x
17:19 - and you're going to you you're going to
17:21 - use it as an array and you've
17:22 - we're eventually going to fill the
17:24 - contents of this array
17:26 - in there and so um we'll do the same
17:29 - thing for our variable y
17:30 - so we'll say let y is equal to an empty
17:33 - array in here
17:36 - okay so um i'm not going to read all of
17:38 - this because i know that what we're
17:40 - going to what we're asked to do is
17:41 - create
17:42 - a similar thing so similar and similar
17:44 - we're going to create empty arrays for
17:46 - our speed x speed and wide speed
17:49 - variables
17:50 - and our size and color variables so let
17:53 - me actually write this out and explain
17:54 - why we need all of these variables
17:57 - um and why we know all of these arrays
17:59 - so we're going to create an empty array
18:01 - for xspeed
18:02 - empty array for y speed
18:05 - and then we'll create an empty array for
18:07 - size and it will create an empty array
18:10 - for
18:10 - r for red value empty array for
18:14 - g for green green value and an empty
18:17 - array for
18:17 - b for blue value so the reason why we
18:20 - need all of these things
18:21 - is eventually what we're going to do
18:23 - with our bouncing bowls is that we're
18:24 - going to be updating their positions
18:27 - so we're going to update their positions
18:28 - for each round of the loop in the draw
18:30 - function
18:31 - we're going to update the x and y
18:33 - positions of the ellipse function
18:35 - and the amount of which it increases for
18:38 - x and y value will be determined by the
18:40 - numbers inside of the
18:42 - x speed and y speed values arrays
18:45 - and we're also going to keep at track of
18:47 - the sizes
18:48 - for each of them the separate um
18:50 - ellipses that we're going to have for
18:52 - our bouncing balls
18:53 - and same goes for the red green and blue
18:55 - values
18:56 - for uh that we will use for to fill our
18:59 - um
18:59 - ellipses and the reason why they're in
19:01 - arrays
19:02 - is because we're going to create a
19:04 - hundred of them so
19:06 - each of these arrays the x y x b the y
19:09 - speed size
19:09 - rgb arrays are going to contain a
19:12 - hundred elements inside of it
19:14 - and we're going to be using a for loop
19:15 - to iterate through all of them and to
19:17 - update
19:18 - all 100 um bowls per draw loop
19:22 - okay now that we've covered that and we
19:25 - sort of basically what we did in here as
19:27 - we said in the section title
19:28 - we've set up all of our global variables
19:30 - the next step we're going to do is that
19:32 - we're going to set up our initial
19:33 - properties
19:34 - so that if um because it says maybe this
19:37 - would be a hint
19:38 - if it says set up perhaps you might want
19:40 - to think about doing it inside the setup
19:42 - function
19:43 - the reason why it's called setup is
19:44 - because you want to do it once
19:46 - you want to initialize all of your glob
19:48 - your variables once
19:49 - and then in draw we'll use those
19:51 - variables to update
19:52 - certain things to create the animation
19:55 - so inside of the setup
19:57 - um it says create a for loop okay so
19:59 - what we're going to do
20:00 - is here we're going to create a for loop
20:03 - for let i is equal to zero i is
20:06 - less than ball count so this is where
20:08 - we're using that ball count global
20:10 - variable the first variable that we
20:12 - we set at the very top of our sketch and
20:15 - we're going to iterate them
20:16 - through the for lip by um
20:19 - incrementing it by one i'm closing it
20:21 - here so that we can contain all of the
20:23 - um
20:24 - oops all of the comments inside so after
20:28 - we've done that
20:28 - inside of the for loop let's actually
20:30 - check that off so what's going on in
20:32 - here is that we're
20:33 - saying okay i'm going to define a
20:36 - variable called i
20:37 - started at zero and incremented for how
20:39 - many of our ball count times
20:41 - and and and um updated by one every time
20:45 - the for loop runs
20:46 - right so everything inside of here
20:48 - between line 19 and line 27
20:51 - will run a hundred times
20:54 - so uh general question if you want the
20:57 - because we want 100 balls right
20:59 - how come it's i less than ball count and
21:02 - not less than or equal to
21:04 - okay that's a really great question and
21:06 - it actually um touches on
21:08 - um the kind of uh the concept of how
21:12 - elements instead of arrays are
21:14 - referenced so
21:15 - when you use um a data type called array
21:19 - um you'll have you could you could have
21:20 - like i said a list of things in here so
21:22 - i'm just gonna
21:23 - put things in here i'm gonna get rid of
21:24 - them eventually but i'm gonna put in
21:26 - some numbers in here so let's say
21:28 - there's
21:28 - inside of an array called b we've got
21:30 - 255 10
21:31 - 5 i don't know 21 in here so in here
21:35 - as you can count you've got four numbers
21:38 - that are separate separated by commas
21:40 - so you can say this array b has four
21:43 - elements inside the array
21:45 - the way that we reference them um
21:48 - reference each of these elements or each
21:50 - of these items
21:51 - inside of the l the b array we call them
21:54 - um well we call each of the um the items
21:57 - inside array elements
21:58 - and the way we can reference them is
22:00 - using what's called index number
22:02 - and the way that um indexing or like um
22:05 - ordering elements inside of the array
22:08 - goes is by starting the count from zero
22:11 - not one so conventionally normal people
22:14 - would go to the grocery store and say
22:16 - i want one two three four apples but in
22:19 - terms of programming how they counted
22:21 - the number of elements inside of the
22:22 - array is they go
22:23 - this is the zeroth element of the array
22:25 - this is the first element array this is
22:27 - the second element of the array and this
22:29 - is the third element of the array
22:31 - so having said that in order for us to
22:34 - access the first element of the array
22:36 - we need to have our i value that's going
22:38 - to be used to reference the index
22:40 - numbers of the array
22:41 - starting at zero and we actually can't
22:44 - have it go all the way to hundred
22:46 - because if we count there are four
22:47 - elements in the array but the last index
22:49 - number is
22:50 - three not four so if we make it go less
22:53 - than
22:54 - bowl count it will not include the
22:55 - actual number of the volcano itself
22:58 - cool thank you for a great question okay
23:02 - so moving on uh what we're going to do
23:04 - is that we're going to set the x and y
23:06 - positions to be at the center of the
23:08 - canvas
23:09 - so what that means is that for the um
23:12 - um i x element sorry so the i
23:15 - element of the x index which we don't
23:18 - have anything in there
23:19 - but we are setting you um in this um for
23:22 - loop
23:22 - i want it to be the um the center of the
23:26 - canvas meaning
23:27 - i want to reference the width variable
23:29 - which is a built-in variable in b5 gs
23:31 - and divided by 2. this should give us so
23:34 - the width would be remember that the
23:36 - coordinates go from
23:37 - um the x is at zero coordinate or zero
23:40 - um when it's all the way to the left of
23:42 - the canvas and the increase to
23:44 - the actual width of the canvas as we go
23:46 - towards the right
23:47 - so if we want to be in the middle of it
23:49 - you will want to reference the width the
23:51 - whole the whatever the width of the
23:52 - canvas may be and then divide it by half
23:54 - so so this should set all of the
23:58 - um the elements from the 0th element to
24:01 - the 99th element of the x array width
24:04 - divided by 2.
24:06 - and we'll do the same thing for y so the
24:09 - one
24:10 - at y um at the ice element of the y
24:13 - array we're going to set that to height
24:15 - divided by two
24:16 - um so again the same sort of concept
24:18 - using the height
24:19 - um p5 built-in variable to get um
24:22 - whatever the height of the my canvas may
24:24 - be and divide that by two
24:26 - okay um i think that's checked off
24:29 - so just to check g1 this would make it
24:32 - so that each ball
24:33 - is set up in a specific spot on the
24:35 - canvas right right so this will i make
24:37 - sure that
24:38 - all of the bowls that we're going to
24:39 - create will appear right in the middle
24:41 - of the canvas and then we're going to
24:43 - have them disperse
24:44 - in all sorts of directions
24:47 - okay so then now we're going to do a
24:50 - similar thing of setting our
24:52 - x speed values for all the items in the
24:55 - array of xspeed array
24:57 - and in this case we're going to use a
24:59 - function called
25:00 - random so what this random function does
25:03 - it's a built-in p5.js function
25:06 - and it's different from any other random
25:08 - functions that you might know in
25:09 - javascript or any kind of
25:11 - other kind of programming languages but
25:13 - in p5 you can give it
25:14 - two numbers in here we can give it a
25:17 - minimum number and a maximum number so
25:19 - for example in our case we're going to
25:20 - give it a minimum number of minus five
25:22 - and maximum number of five and what this
25:25 - will do is it will
25:27 - generate a random number between minus
25:29 - and minus five and five
25:31 - and that random number will be a random
25:33 - decimal number so it might be like
25:35 - i'm making this up three point one two
25:38 - four four
25:38 - five or something like that i guess
25:41 - that's why
25:42 - we let the computer figure out the
25:43 - random number and not have the human
25:45 - manually entering random numbers because
25:48 - i feel like really like what is random
25:50 - um i think even computer rent
25:52 - computer generated random numbers are
25:54 - not 100 percent random
25:56 - but that's more philosophical so i'm not
25:58 - going to go too deep into that
26:00 - um we have a question from the chat so
26:03 - someone's asking
26:04 - how are we accessing the width variable
26:06 - i think you said that's like a
26:08 - just like a global variable inside the
26:10 - uh
26:11 - yeah yeah so the width variable is a
26:14 - built-in
26:15 - um p5.js variable so you can actually
26:18 - take a um rep and take a look at the
26:20 - documentation by going to t5js.org is
26:23 - which is their website
26:24 - if you go to let's say go to the
26:27 - reference page
26:29 - and then you'll be able to actually just
26:31 - search for this with
26:33 - it it says environment underneath the
26:35 - environment section there is a
26:37 - documentation
26:38 - on the web variable which says system
26:40 - variable that stores the width of the
26:41 - drawing canvas
26:42 - so if you reference the width variable
26:44 - it will return watch
26:46 - whatever the the width of the canvas
26:49 - that you've used
26:50 - to for your crete canvas function so in
26:53 - this case so if you
26:54 - created a create a canvas function with
26:56 - 350 as the width of the canvas
26:58 - the width variable will return 350. in
27:01 - our case
27:02 - we used a dynamic variable called window
27:05 - width
27:06 - so how much ever this width of the
27:08 - window is
27:09 - this will be return in pixel value
27:14 - okay so also okay going back to setting
27:17 - the random number for our x speed and y
27:19 - speed
27:20 - the reason why i want a random number
27:22 - between minus five and five
27:24 - is because all of we've set it so that
27:27 - all of our
27:28 - x and y positions of the um the ellipse
27:31 - or the bouncing ball will be generated
27:32 - in the middle of the canvas
27:34 - right and so we really want to
27:37 - make the full use of the area that we
27:39 - have on the canvas
27:41 - so we want it to go towards the left
27:42 - towards the right or on towards the top
27:44 - towards the bottom
27:46 - and all go in all sorts of directions so
27:48 - if we
27:49 - um use the speed uh a negative speed
27:52 - and we have a ball at the center of the
27:54 - canvas that means that it will minus in
27:56 - the x
27:57 - value of the um the x value of the
28:02 - position meaning that it will go towards
28:03 - the left if the x speed value
28:06 - is um generated randomly so that it's
28:08 - positive if then it will travel towards
28:10 - the right
28:11 - and same thing for the y values if we
28:14 - have a
28:15 - y speed value that we're going to
28:17 - eventually use to um
28:18 - to alter the the y position
28:21 - of the sheet if the y speed is positive
28:24 - then we'll go towards the bottom
28:26 - because remember that y values
28:30 - are zero towards the top uh we're at the
28:32 - very top
28:33 - uh edge of the canvas and the y value is
28:36 - how much ever the height of the canvas
28:38 - is as it goes towards the bottom
28:40 - so that's why we want our speed to be
28:43 - uh going both negative and positive
28:45 - directions and that's what we have here
28:48 - for our random functions
28:50 - okay now that that is done i don't know
28:52 - why seven is already checked off
28:53 - what we're going to do is we're also
28:55 - going to do something similar and set a
28:56 - random size
28:58 - to our four hours ellipses which we're
29:01 - going to do a random between
29:03 - 10 and 50 so this means that it will be
29:05 - a random number between
29:07 - 10 pixels and 50 pixels that we will
29:09 - eventually use for our ellipse function
29:11 - and then lastly we'll also set random
29:13 - numbers for the red
29:15 - value so we'll set a random number
29:17 - between 0 and 255
29:19 - a random number for g the green value
29:22 - between
29:24 - 0 and 255
29:27 - and it will also set a random mover for
29:29 - the blue value
29:30 - between 0 and 255.
29:35 - so that should all be set i'm just going
29:38 - to click save
29:39 - and run nothing should happen because we
29:41 - didn't draw any
29:42 - any we didn't actually draw any shapes
29:44 - in here these are all the steps that
29:45 - have that we did in order for us to set
29:48 - up all of these variables that we're
29:49 - eventually going to use
29:51 - so having said that we'll actually um
29:53 - set some things up and
29:55 - um program something so that we are
29:56 - going to be seeing some
29:58 - shapes that are happening that are going
29:59 - to be drawn inside of our
30:02 - um canvas so i've now moved inside of
30:05 - the draw function
30:06 - and underneath the background i'm going
30:08 - to create another for loop
30:10 - that we're going to be using this time
30:12 - to go through the elements
30:13 - inside of the array that we've just
30:15 - initialized and actually use those
30:16 - values that we've saved in there
30:18 - to create the ellipses or to draw the
30:21 - ellipses
30:22 - onto our canvas so i'll do the same
30:24 - thing i'm going let i
30:25 - is equal to zero i is less than ball
30:27 - count
30:29 - i plus plus
30:32 - and let me move this closing bracket all
30:35 - the way at the bottom of
30:37 - the draw function and here
30:40 - uh let's before we do all of those other
30:43 - things to animate
30:44 - what we're going to do is we're just
30:45 - going to start by drawing the actual
30:47 - ellipses so i'll use the ellipse
30:48 - function
30:50 - which again i'll maybe go back in here
30:51 - and show that underneath the 2d
30:53 - primitive
30:54 - there is a function called ellipse in
30:57 - here that
30:58 - as namesake it you can use it to draw
31:00 - ellipses onto your canvas
31:02 - so it's the um the function takes in
31:05 - four
31:06 - um it can take up up to five but it
31:09 - normally takes up to
31:10 - four arguments in here the first
31:12 - argument is for the x value of the
31:14 - position
31:15 - the y is the second argument is for the
31:17 - y value of the position
31:19 - and then the width and the height of the
31:20 - ellipse so we'll go back into our
31:23 - um project and we'll use whatever the i
31:26 - element of the x array as my x position
31:30 - and i'll use the ice element of the y
31:32 - array
31:33 - for the y position and then for the
31:36 - width and height i'll use size
31:39 - um the size the eighth element of the
31:41 - size array in here
31:42 - so once we do that uh june is the reason
31:46 - we're using
31:47 - uh like ellipse instead of i saw there
31:49 - was like a circle
31:51 - function in the documentation we can
31:52 - definitely use circle in here
31:54 - so if we use circle there's no reason
31:56 - really
31:57 - um actually it has a little bit to do
32:00 - with the fact that
32:01 - um the p5.js function didn't used to
32:04 - have
32:04 - a circle and a square function it used
32:07 - to only have
32:08 - ellipse and a rectangle function because
32:11 - if you think about like like the shapes
32:14 - overall like
32:15 - the ellipse is kind of like the
32:18 - what's it what what is this like a
32:20 - overarching group that it's like
32:22 - it's like the idea an ellipse can be a
32:25 - circle so you might as well just use the
32:26 - same function and same thing with a
32:28 - rectangle so an ellipse with the same
32:31 - width and height
32:32 - is a circle so they didn't used to have
32:34 - the library itself didn't used to have a
32:36 - circle
32:36 - and a square function and it's been more
32:39 - like a relatively recent addition to the
32:41 - library okay
32:42 - so i think it makes sense to use circle
32:45 - in this case because we're not
32:46 - differentiating between
32:48 - width and height but the reason why we
32:50 - haven't um
32:51 - we have um this being used being with
32:54 - the ellipse function is so that
32:55 - later if you want to modify anything in
32:57 - the sketch you are
32:58 - welcome to modify this so that um
33:02 - the bouncing balls are not exactly as
33:04 - like a
33:05 - perfect circle but let's actually just
33:07 - try using the circle function in here
33:10 - and are you are you doing it at the
33:11 - bottom because you don't want it to like
33:14 - i'm guessing it's so like it's like it's
33:16 - animated last
33:18 - like after all the like other like
33:20 - things are done like if you put it at
33:22 - the beginning would it just like
33:23 - kind of show the circles and then show
33:26 - like the
33:27 - well we kind of want to do all the
33:28 - process that we need to do
33:30 - in order to animate the circle um if you
33:33 - do have this at the top
33:35 - at the first thing as the first thing on
33:36 - the for loop you will see it be animated
33:39 - but the first frame that it draws will
33:41 - not be animated
33:43 - not that it really matters because you
33:45 - know the draw loop
33:46 - runs really really fast and 60 frame
33:49 - frames per second
33:50 - um ideally but um for the sake of like
33:53 - logic you should really do it be doing
33:56 - all the things that
33:57 - updates the shape or the enemies to
33:59 - shape first
34:00 - and then we should be setting um this
34:02 - sort i'm drawing the actual circle
34:04 - as the last step and actually as the
34:06 - second last step
34:07 - we're actually going to be using the
34:09 - fill function well actually this
34:11 - this telling it's telling me to do no
34:12 - strokes but let's do uh let's set the
34:16 - fill color of the shape by using the rgb
34:19 - the elements of the rgb arrays that
34:21 - we've already set inside of our set
34:23 - and setup function so i'm going to say
34:26 - use the red value
34:28 - at the i index of the r array
34:31 - and use the green value at the i index
34:34 - of the g array
34:35 - and then b value at the iphone text of
34:37 - the b array and now as we
34:38 - once we hit save and something's
34:41 - happening
34:42 - circle did i mess something up is it
34:45 - supposed to have another argument or it
34:47 - doesn't only need three
34:48 - it only needs three okay or did i write
34:51 - something by mistake somewhere
34:54 - i think it happened after you wrote the
34:56 - circle are you
34:57 - maybe we can just go back to ellipse and
35:00 - yeah but it's just really
35:02 - that's actually really interesting maybe
35:04 - i misspelt
35:06 - oh it's bothering me this should work
35:12 - it's actually really interesting okay
35:14 - i'll take a look at that but let's use a
35:16 - list for now
35:18 - and then i'll set size and um width and
35:20 - height to be the same thing
35:22 - also we have a question from someone in
35:24 - the chat they're asking
35:26 - we'll probably uh get to this pretty
35:28 - soon but is there a timer for when the
35:29 - ball will change direction or is it when
35:31 - it hits the border
35:32 - so i think it will be when we hit the
35:34 - border right
35:35 - well yeah we'll get there but yes we're
35:37 - going to basically what we're going to
35:38 - be doing is we're going to use our
35:40 - x and y position to detect if it's
35:43 - reached the boundaries around this
35:45 - around the canvas um i'm also going to
35:48 - do another styling in here
35:49 - it says um style to have no strokes if
35:52 - we say if i say
35:53 - no stroke in camel casing with capital s
35:56 - for the stroke word then we're going to
36:00 - have all of our shapes not have any
36:02 - strokes around them so that it will lose
36:04 - the default black shape
36:05 - around the ellipses that we've drawn in
36:07 - here
36:08 - okay so i'm kind of going a little bit
36:10 - off the order of things but what we're
36:12 - going to do is
36:13 - we're going to start off by trying to
36:15 - animate um
36:17 - the movement we're going to try to
36:19 - animate by incrementing the positions
36:21 - of our circles so in order for us to do
36:24 - that i'm going to first start
36:26 - referencing the eif element of the x
36:29 - array
36:30 - and here what i'm going to do is i'm
36:31 - going to take whatever it currently is
36:34 - and then add the i've element of the x
36:37 - speed
36:38 - array so if we do this and start and
36:41 - save and run
36:43 - we should see all of our bowls are going
36:45 - to move horizontally and spread out like
36:47 - that
36:48 - that's pretty that's because all of our
36:51 - bowls are not moving vertically
36:53 - only moving horizontally and they're
36:54 - going to spread out
36:56 - let's do the same thing for our y
36:59 - position so
37:00 - we're going to reference the i element
37:02 - of the wiring
37:03 - and make it equal to whatever it
37:05 - currently is and plus it by at y
37:08 - speed at the eighth element
37:12 - so now if we do this we should see
37:15 - everything
37:16 - dispersed from the middle of the canvas
37:17 - and spread out
37:19 - so it's kind of like if you hit pull and
37:22 - they're all like
37:23 - somehow overlapping on top of each other
37:25 - and like sort of letting it all go and
37:26 - burst in different directions
37:28 - um so okay that's great now that we've
37:31 - made
37:32 - this is like a very it doesn't take a
37:33 - lot of
37:35 - lines of code i feel but we've basically
37:37 - um animated the bowls that were static
37:40 - before these two lines of code
37:41 - right they were before they were all
37:43 - stacked on top of each other so it
37:44 - didn't look like much
37:46 - but we did have 100 balls on top of each
37:48 - other
37:49 - and after we give it an animation for
37:51 - the x
37:52 - y speed of our ellipses then it moves
37:54 - that way and in combination with the uh
37:57 - y um the animating the y y position of
38:00 - the ellipses we get the sort of
38:02 - dispersing effect
38:03 - so this song if you were to like expand
38:06 - the
38:07 - screen right now would the balls like
38:09 - disappear
38:10 - like like i don't know how to like um
38:14 - like if a ball like escapes in the x
38:17 - direction oh yeah yeah so like you can
38:18 - still see it slightly
38:19 - on the screen okay so i should be trying
38:22 - you could like try to catch up to the
38:23 - movement of the bowl
38:25 - and like follow it along as it moves out
38:27 - of the canvas
38:28 - but let's actually program it so that
38:32 - they will bounce back
38:33 - in to the um area of this um the canvas
38:37 - so what we're gonna do is actually we're
38:39 - going to be modifying the x
38:41 - speed and y speed if the x position
38:45 - is either smaller than zero meaning that
38:48 - it's gone beyond the left border
38:51 - um of our canvas or if it's become
38:53 - greater than the width
38:54 - meaning that it's gone beyond the right
38:57 - border of our canvas
38:59 - so we're going to be using um a bunch of
39:01 - if statements or
39:02 - two if statements um so for the x
39:05 - direction
39:06 - for us to capture everything
39:08 - horizontally first we're going to use an
39:10 - if statement and say
39:11 - if the x um the eighth element of the x
39:14 - array
39:15 - is less than zero or which you can do
39:18 - with two pipelines
39:20 - or if x um either element of the x array
39:23 - is greater than
39:24 - width what we're going to do is that
39:27 - we're going to take the
39:28 - value of the x speed the current value
39:30 - of the x speed at the
39:31 - index i and um
39:35 - take whatever it currently is and times
39:38 - it by minus 1.
39:40 - another way of writing this by the way
39:42 - would be xspeed i
39:44 - um and then do times equals minus one
39:46 - right oops
39:47 - minus one the thing that this is going
39:50 - to do
39:51 - is um so let's say that we have a ball
39:53 - and it's traveling towards the
39:54 - um left boundary of the canvas and it's
39:57 - actually traveling in a negative way
39:59 - right because it's decreasing the value
40:01 - of my x position
40:03 - in order for me to go towards the left
40:05 - and when it hits that hits that point
40:07 - where x is less than zero
40:09 - what it will do is that it will turn my
40:11 - x speed to be
40:12 - positive so from that point on it will
40:15 - now plus
40:16 - uh my x position add to the my x
40:19 - position so that it will start traveling
40:20 - towards the right
40:22 - so then it will create sort of like a
40:24 - ping-ponging effect in there
40:26 - um i'm going to do the same thing for
40:28 - the the
40:30 - y speed so first i'm going to check what
40:33 - the current value
40:34 - of the y value and index i
40:37 - if it's less than zero or if the y value
40:40 - at index i
40:41 - is greater than height of my canvas then
40:44 - i'll say
40:44 - y speed of index i is going to be what
40:48 - it currently is
40:50 - and then times it five minus one so now
40:54 - we have
40:54 - actually i'm gonna turn this off and i'm
40:56 - gonna show you what it looks like with
40:58 - just this
40:58 - if statement now we see things bounce
41:01 - off the left side and the right side of
41:03 - the
41:04 - canvas but everything that's going up up
41:07 - is not being captured and contained in
41:08 - there
41:09 - right and if i turn this back on the
41:11 - lines 5 to 57 i just added 40 y
41:15 - checking the ui speed um sorry the y
41:18 - position and the
41:18 - changing of the y speed in there
41:22 - then we get this thing where all the
41:24 - ellipses are contained
41:25 - within this the array of the area of the
41:29 - canvas
41:32 - um cool
41:38 - i think also someone asking is how
41:42 - we can make the movement more random
41:45 - yeah so right now we're have we're
41:48 - getting this sort of like a
41:49 - ping-ponging back and forth sort of a
41:51 - movement because
41:52 - um the speed uh values are set inside of
41:56 - the setup
41:56 - and it's set once so each of these bowls
41:59 - have their own
42:00 - x speed and y speed values that are
42:02 - flipping in terms of sine so in terms of
42:04 - direction
42:05 - but the amount of its um its increase
42:08 - for
42:08 - the x and y position of the ellipse is
42:10 - constant right
42:11 - so the thing that you would do in order
42:13 - for you to make all of these like
42:15 - super super random would be to
42:17 - essentially
42:18 - not use this x speed and y speed values
42:21 - the constant values that we've set at
42:23 - the setup
42:24 - but maybe i'll just do it for the x
42:26 - speed
42:27 - so in replacement for the x speed value
42:29 - that we have set inside of the setup
42:30 - i could do another random function in
42:32 - here so
42:34 - right now what it's doing is that for
42:36 - all the bowls that i have inside
42:38 - um inside of the that we have the 100
42:41 - volts in here
42:42 - i'm going to i randomly add some number
42:45 - between minus 5 and 5
42:47 - in the x direction
42:52 - now it looks almost like a what does
42:54 - this look like it kind of looks like a
42:57 - confetti falling back and forth like a
42:59 - lava lampy sort of
43:00 - feel oh this is interesting because it's
43:02 - like um
43:04 - am i like it's kind of staying in the
43:07 - center
43:08 - because it's like harder for it to
43:09 - escape to the left or right since like
43:10 - many of the random values
43:12 - might be like negative or positive so
43:13 - it's harder to oscillate between the
43:14 - left and right
43:15 - so the random in here is creating that
43:18 - very jittery effect it's almost like you
43:20 - know all of these are phones and they're
43:21 - all vibrating
43:22 - on like a very very um sleek canvas
43:26 - but yeah so that's what you can do and
43:28 - you can do um
43:30 - maybe i'll do mention this sort of on
43:32 - this this as well but there is another
43:34 - randomizing function called
43:35 - noise in v5js so random is
43:38 - um for its namesake it generates a
43:41 - really really random
43:42 - um it generates a random number um that
43:46 - you can't really guess
43:47 - which is also mentioned in here but
43:49 - there's also a function called noise
43:51 - which gets a little bit a little bit
43:53 - mouthy because it what it does is that
43:55 - it generates
43:56 - what's called a purlin noise so purlin
43:59 - is um proline noise is named named after
44:02 - the person who
44:03 - generated a created algorithm can purlin
44:06 - um basically it's kind of like a
44:08 - technique that he's
44:09 - um invented to create more natural
44:12 - sequence of random numbers
44:14 - so when you use um what a noise value um
44:17 - the noise value will
44:18 - um the current noise the noise value
44:22 - that you get right now
44:23 - will be influenced by the noise value
44:25 - that has previously been generated and
44:27 - will be generated in the future
44:29 - and the whole concept is like really
44:30 - really interesting and everything
44:32 - and really it was first used in the
44:35 - original
44:36 - um what's that what's that not troy wait
44:39 - i'm blanking out oh that game movie
44:44 - starts with t tron yes
44:48 - it was used to do oh thank you it was
44:50 - used to do
44:51 - um shading effect for the tron movie
44:54 - so cool so it does create like a very
44:56 - like a natural sequence of numbers which
44:58 - i'm actually going to go ahead and use
45:00 - it in here so if i use
45:02 - noise and i'm going to use um
45:06 - something in here that um
45:09 - so i i talked about this last time so we
45:11 - use there's a variable called frame
45:13 - count
45:13 - mp5.js is also another one of those
45:16 - built-in p5.js variables
45:18 - but basically this number keeps track of
45:20 - how many frames that has been rendered
45:22 - um during the duration
45:23 - the in the duration of the canvas or the
45:26 - the the program running and so all we
45:29 - need to think of this as is it's an
45:32 - increase
45:32 - increasing number and it's a linearly
45:34 - increasing number
45:36 - i'm just gonna slow it down and use it
45:37 - inside of my noise function
45:39 - and what this will do is
45:43 - it does something a little bit different
45:46 - i'm actually going to add a little bit
45:48 - of randomness in here actually so that
45:50 - they don't all move at the same time
45:53 - or actually i want you know what i'm
45:54 - going to do is
45:56 - oh at this point now i'm just playing
46:01 - a little bit um but i can add the
46:04 - the current x position in here so that
46:06 - the x position will influence
46:08 - my noise value
46:13 - noise is built in yes i just saw a
46:15 - question from kali
46:17 - um but it does something interesting in
46:19 - here and let's actually do the same
46:20 - thing
46:21 - for the y speed and do
46:25 - this
46:30 - okay they move at the same time this is
46:31 - not good okay maybe i will do
46:34 - oh random in here
46:37 - do minus five and five
46:43 - and now they still move at the same time
46:45 - it's not good
46:51 - but but i think the takeaway here is
46:54 - that
46:56 - the random even the noise function
47:00 - even with the random in here sort of
47:02 - moves in an unpredictable way
47:04 - but it is still it's very natural in the
47:08 - sense that it doesn't jitter anymore
47:11 - i'm actually gonna um i don't think this
47:14 - is actually
47:15 - that great of a place to use the random
47:17 - and the noise in here
47:18 - actually i don't understand why it's not
47:21 - very
47:23 - um spread out
47:26 - i think we will have to do a lot more
47:28 - things in here and it's
47:29 - actually i've kind of broken the program
47:31 - a little bit because it no longer is
47:32 - bouncing things off of that
47:34 - because for us to detect and
47:37 - make sure that things bounce off of the
47:39 - walls we're flipping the signs of our x
47:41 - speed and y speed values
47:43 - which are we we no longer use to in
47:45 - order for us to do animations
47:47 - so really actually let's go back in here
47:50 - and put in the y
47:51 - speed of x and what this was is x speed
47:56 - of x in order for us to keep the
47:58 - integrity of the uh
47:59 - of the bouncing um within the canvas but
48:03 - still make things random
48:04 - what you would need to do is after we
48:06 - check or
48:07 - maybe even before we check all the
48:09 - boundaries you could also just do x
48:11 - speed
48:13 - of i is now equal to a new random value
48:15 - between -5 and 5.
48:18 - so this way it would actually check and
48:20 - make sure that everything is staying
48:22 - inside of it even though we're using a
48:24 - random
48:24 - um we're resetting the random value for
48:28 - the x speed value
48:29 - and same thing if we wanted to do the
48:30 - same thing for the y speed we could do
48:32 - random of minus five
48:35 - and oops and five in here
48:41 - oh my god it kind of looks like little
48:44 - flies
48:47 - you could actually turn it into a little
48:49 - bit more of like a
48:50 - firefly firefly
48:53 - sort of um animation by um
48:56 - decreasing the size of this
49:00 - let's make it super small between two
49:02 - and five
49:03 - or two and ten maybe and then how do i
49:06 - create yellow
49:07 - is it green and blue together google it
49:13 - [Music]
49:14 - yellow
49:18 - oh not not but now it's a little more
49:21 - buggy
49:23 - it looks so cool
49:26 - okay yeah wait how do i create yellow is
49:30 - it like a little
49:33 - um
49:36 - i don't know i can just do it in the
49:39 - shades of blue
49:40 - which should be just randomizing the
49:42 - blue number
49:45 - now it kind of looks more like yellow
49:47 - sea creatures
49:51 - but yeah oh also the other thing that i
49:53 - do want to note is that
49:55 - it's a little less obvious now but it is
49:59 - all the shapes are creating a little bit
50:01 - of um tracing
50:02 - let me actually go back and make the
50:05 - size a little bit bigger again
50:09 - so if you see this the movement of all
50:11 - of my um
50:12 - circles are have a little bit of a trace
50:17 - so i also turn this off be more obvious
50:23 - oh there we go
50:27 - it's too dark let me bring all of these
50:30 - random in here
50:31 - because i wanted to make a point about
50:33 - something that's happening inside
50:34 - of the so here okay i don't know if you
50:37 - can see this but you can see all the
50:38 - traces
50:39 - that's following the ellipses that are
50:41 - bouncing around
50:42 - and that is done because we have opacity
50:44 - in our background
50:46 - so if i were to remove this 50 comma 50
50:51 - you see that difference there's no more
50:53 - tracing happening in the
50:55 - animation i'm going to bring it back in
50:57 - here and make the
50:58 - um the opacity or transparency really
51:01 - high
51:02 - so now it's it do you see the tracing
51:04 - more
51:07 - yeah a lot more yeah so that's because
51:10 - when we
51:10 - refresh the background on top of each
51:12 - other it is drawing with a lot of
51:14 - transparency on top of each other
51:16 - so really what you're seeing is that the
51:18 - previous frames are like still staying
51:20 - in the in the visible
51:22 - like transparency level so so to speak
51:25 - so that you're seeing
51:26 - um kind of like the traces of all the
51:27 - other frames that have
51:29 - previously been drawn how many
51:33 - like how much would it take to like
51:35 - because like right now it seems like
51:36 - still
51:37 - pretty like there doesn't seem to be
51:39 - much lag
51:40 - in this um but
51:44 - when would you like start to notice lag
51:46 - in the animations
51:47 - let's actually give it a go i'm going to
51:49 - make thousand
51:51 - oh 1000 oh my god
51:54 - okay okay let's actually put in
51:58 - i'm going to start putting in some
51:59 - opacity in my fill as well so we'll
52:01 - soften
52:02 - the fill color of everything there we go
52:05 - maybe this is a bit more
52:08 - but it seems like it's fairly easy yeah
52:10 - it's still in pretty well
52:11 - okay let's go 5 000
52:15 - okay there we go now it's very slow
52:19 - so you can like comfortably do up to
52:23 - 5 000 draw 5 000 ellipses in here
52:27 - it really depends on what kind of
52:29 - operations that you're doing
52:30 - inside of a canvas for example like
52:33 - we're doing a simple thing of like you
52:35 - know
52:36 - adding a number to another number and
52:38 - then we're you know like
52:39 - twitching signs or something if some if
52:41 - some condition is met
52:43 - but if you were to do a lot of like um
52:45 - noise in here if you were to use a lot
52:47 - of like um trigonometry like you know
52:49 - oscillation using sine and cosine
52:51 - that will obviously slow this down a lot
52:55 - um what handles the graphics for this
52:58 - this is um
52:58 - using webgl so all all okay
53:02 - don't quote me on this but i'm most
53:05 - things that you most graphics that you
53:06 - generate on the web will use webgl
53:10 - okay cool i think this is all i've
53:14 - prepared unless someone else um
53:17 - we have we could take maybe one more
53:18 - question or one more can we try this
53:21 - sort of request or jamie do you have a
53:25 - request
53:27 - i don't know i just want to play with
53:29 - p5.js
53:32 - and now i want to take this course okay
53:35 - but i've um
53:36 - achieved my goal of the day yeah i
53:39 - i'm so used to just working with like
53:42 - numbers all the time that seeing
53:44 - graphics is really cool
53:46 - okay let me stop sharing and i do want
53:49 - to say and i'm putting a little bit of a
53:51 - plug for it
53:52 - next live stream session because the
53:54 - next live stream session
53:56 - we're going to have a guest speaker um
53:59 - and we're going to have cassie coming in
54:02 - to talk about um
54:06 - okay i will answer stop fala's question
54:09 - in a bit but we're going to have cassie
54:11 - coming in as a guest we're going to talk
54:13 - a little bit about this would be
54:14 - not really be a much of a code demo
54:17 - session but will be more of like an
54:18 - interview q a sort of a session with
54:20 - cassie who's
54:22 - been has a really big involvement in p5
54:24 - open source community and processing
54:25 - foundation all that kind of things and
54:27 - we're also going to talk about
54:29 - what's uh an editor that you can use
54:31 - called p5 web editor
54:33 - that is a really easy way for you to
54:34 - take your um projects off of the
54:36 - codecademy platform and really start
54:39 - experimenting on your own projects and
54:41 - sharing your um
54:42 - you can also share your projects or
54:45 - little sketches with
54:46 - anyone else in the world with the link
54:48 - that you get generated with the editor
54:50 - so we're going to have her and it's like
54:51 - a um little treat i feel like
54:54 - because um she's an incredible person to
54:57 - talk to and she knows a lot about this
54:58 - sort of a community so i do want to put
55:00 - it up there
55:01 - and i guess the last thing i will do is
55:03 - answer a question
55:04 - that we just got in here i can't find
55:06 - death in v5 library is it possible to do
55:08 - that or just next to one position
55:11 - um i'm gonna talk a little bit about it
55:13 - and maybe give you
55:14 - um a way that you can get started with
55:16 - that so
55:17 - p5.js sketches by default are
55:19 - two-dimensional meaning that you can use
55:21 - x and y positions
55:22 - you can however turn your entire p53
55:25 - sketch into b
55:26 - in 3d and you can you will need to do
55:28 - that by specifying a
55:30 - third argument of the create canvas
55:33 - function by specifying the third
55:35 - argument to be webgl in all caps
55:37 - so maybe let me go to i know i'm not
55:39 - sharing my screen i just want to find a
55:41 - link
55:44 - canvas and if we if you go to the
55:46 - documentation for a create canvas
55:49 - um which i can't
55:52 - put into chat i'm gonna uh i can send a
55:56 - link to
55:56 - the chat because i have the fancy
56:01 - codecademy account but um basically you
56:05 - will need to specify for your canvas to
56:07 - be in
56:07 - uh in 3d mode and then you'll be able to
56:10 - use um
56:11 - the z value for depth so it's uh it's
56:13 - not that there's a specific like a
56:15 - depth pro a way that's like function or
56:18 - anything like that but you will have to
56:19 - um specify in all places where you just
56:21 - have two numbers
56:23 - you you might be able to put in a third
56:24 - number or you can't use like shapes like
56:27 - ellipse or rectangle because they're are
56:29 - 2d
56:29 - primitives there's a whole other section
56:31 - for 3d shapes in the documentation
56:34 - so i guess those are a couple of places
56:36 - for you to start
56:37 - creating 3d shapes and p5
56:40 - cool well thank you guys so much
56:44 - for um attending the session with us and
56:47 - we'll see you next week
56:48 - on next tuesday at 4 p.m eastern time
56:51 - thank you so much for letting me join
56:52 - you on this was so much fun
56:54 - i'm glad yeah i learned a lot and i'm
56:56 - sure everyone watching did too
56:58 - cool