00:00 - hey how are you all so it seems like
00:03 - we're talking maybe like ten seconds
00:05 - ahead of the stream but we can see all
00:07 - the comments for this session we're
00:12 - gonna be continuing the visualize data
00:15 - with Python track and today we'll be
00:19 - focusing on lists and how we use them
00:22 - and what they allow us to do so let's
00:25 - just get let's just begin right away let
00:31 - us know in the comments if you are
00:34 - familiar with lists already but we will
00:37 - just be you know going through feel free
00:40 - to code along with us and but if you
00:44 - don't want to coat alone you can always
00:45 - you know go back and do it yourself so
00:49 - firstly can everyone see my screen
01:03 - all right sunny can you see my screen
01:07 - let's see I think on the YouTube stream
01:11 - yeah I'm still lagging a little bit I'm
01:12 - a few seconds behind so I'm not sure
01:14 - okay alright thank you sir
01:18 - all right so this is visualize data with
01:20 - Python track so far you've gone through
01:24 - intro to data visualization regular
01:27 - basic Python Python functions so we're
01:31 - gonna be looking at this module right
01:33 - here which is the Python lists so let's
01:39 - get just like a preview of like
01:41 - everything that's gonna be in this
01:42 - module we're starting with the lesson we
01:45 - got a quiz project an article that you
01:50 - know gives you some challenges with
01:51 - using lists and the lesson two for the
01:56 - code challenge so there's also a project
02:00 - a part of this module but today we'll
02:05 - just be focusing on the lesson and
02:06 - running through the lesson so I'm gonna
02:08 - start opening up the lesson now and Alex
02:12 - can you set up the link in the chat all
02:18 - right so this intro to the lesson right
02:22 - here what is a list a list is basically
02:27 - it's objects in Python that are ordered
02:32 - and you use brackets to instantiate a
02:37 - list so right here in this first example
02:40 - we have heights of a student in a class
02:43 - we want to jot down these numbers and
02:46 - want to group them together so we're
02:48 - gonna group them together in a variable
02:49 - called heights and this is the exact
02:53 - code that we would use to make that list
02:58 - alright so I'm going to start with the
03:04 - check point right here this the first
03:06 - instruction so we already have the
03:08 - heights list over here we want to add
03:10 - one more so there comma separated so all
03:13 - we have to do is do
03:15 - and then add Cole's height which is 65
03:19 - they run that check and there's a this
03:28 - invalid code right here so let's remove
03:31 - the comment symbol from there first if
03:34 - we run it it's invalid syntax well we
03:38 - need our commas okay all right let's run
03:46 - it now okay no errors that's a good list
03:51 - cool so let's move on to the next
03:54 - exercise
03:55 - yeah yeah so I think this I've never
04:00 - really seen this introduction before I
04:01 - think this introduction kind of lacks
04:03 - like this exercise in this lesson kind
04:06 - of lacks like why we need to use lists
04:08 - right so lists just like what Carolyn
04:12 - said it's used to store a collection of
04:14 - data but we can actually create these
04:18 - variables using different variable names
04:21 - right we can so far on line one we
04:23 - actually don't have to create a list we
04:25 - can actually do height one equal to 61
04:26 - height two equals 70 high 3 equals 67
04:29 - but it is better and more convenient to
04:33 - store it in the sort of collection right
04:36 - and because this is a data visualization
04:38 - skill path we're gonna see this over and
04:41 - over again so it's good to understand
04:44 - the syntax right now right and I don't
04:47 - think we've seen this before I don't
04:49 - know I haven't been watching the
04:50 - previous live streams but it's like a
04:51 - opening square bracket all the numbers
04:54 - separated by commas and then a closing
04:55 - square bracket yeah so I'm just to
05:00 - follow up on that list are like the most
05:01 - basic data structure and they're
05:04 - stepping point until you know us being
05:06 - able to graph a series of values right
05:08 - on on the graph and visualizing them
05:10 - translating them into things that look
05:13 - nice right and then with these lists we
05:17 - can also lo learn more later about how
05:19 - to turn them into more like table like
05:21 - structures that we can actually
05:23 - manipulate and gain more insights from
05:25 - but this is really like the basics of
05:28 - Python that you
05:28 - to know in order to do that alright so
05:32 - sudden you want to pick up from the
05:33 - second exercise yeah so let's take a
05:35 - look so list part two so this is
05:39 - actually really interesting lists can
05:40 - contain more than just numbers so I
05:42 - guess it's a little bit different than
05:43 - some of the other languages when we you
05:44 - know use arrays or vectors so we don't
05:48 - we can have more than just numbers in
05:50 - our list so in this little code block
05:52 - right here with names we have four
05:55 - different strings values instead of
05:56 - numbers we have a string called Jenny a
05:58 - string with the value Alexis a string
06:01 - with a value Sam and a string of value
06:05 - grace okay so four strings in a list and
06:11 - then here's another interesting thing
06:12 - you can actually combine different data
06:13 - types and one list so this I think this
06:15 - is the part that's very different than
06:16 - other languages right so you have a
06:19 - string type for the first list value and
06:22 - a number type in the second list values
06:24 - so in this one the list name is mixed
06:27 - underscored list mixed a list cool so we
06:34 - can we can try this out so Carol is
06:36 - actually typing right now so add any
06:38 - string to the list in ten strings add
06:45 - they're heading out I should add six all
06:48 - right awesome
06:53 - and I create a new list called Sam
06:56 - underscore height that contains two
06:58 - values the first values the string Sam
07:02 - with a capital S and the second string
07:06 - value is sorry the second list value is
07:10 - 67 no errors cool awesome yeah pretty
07:19 - straightforward I'll take the next
07:21 - exercise okay
07:23 - so lists can hold you know different
07:27 - data types but they can also hold lists
07:29 - so you can have lists of lists so let's
07:33 - return to this first example which is
07:36 - you know the heights of these different
07:37 - people
07:41 - from the previous you know exercise we
07:44 - learned that we can have a mixed data
07:46 - type list so here we can store we can
07:50 - make a list called Jenny we can have the
07:52 - name and the height so we can do is put
07:56 - several of these mixed lists into one
07:59 - big list called Heights the heights will
08:03 - be a list of lists all right so let's go
08:07 - to this first check point here new
08:10 - student is named Vic and 68 inches tall
08:16 - okay so I'll try to add Vic to this
08:21 - little list of Lists oh we have so we'll
08:23 - make firstly what I'm doing right now is
08:25 - making the square brackets for a new
08:30 - list that will have Vic's name and mixed
08:34 - height all right so now he's you know
08:38 - part of the class also this is on line
08:45 - one it looks kind of confusing right now
08:46 - because the code Ashley overwrapped
08:49 - but if you just like scroll expand the
08:52 - window the co-editor window you'll see
08:54 - that is just one line of code it's not
08:56 - multiple lines of code and you can
08:57 - actually format it this a little bit
08:59 - differently to write into that maybe
09:02 - like the first inner list is like on
09:06 - line the second inner list is on the
09:08 - second line you know you can you can
09:09 - format a little bit differently so it's
09:11 - more readable yeah I've seen that done a
09:15 - lot of times right so I'm just gonna run
09:20 - this different formatting so makes it a
09:23 - little bit easier to read okay so I'm
09:28 - running this but it's making it thinks
09:31 - that I'm attempting the second
09:32 - checkpoint but that's correct code okay
09:36 - so this second checkpoint right here
09:38 - it's asking me to create a list of lists
09:41 - called ages so first I'll just do that
09:43 - variable where each sub list contains a
09:47 - student's name and their age so
09:51 - that's like the the outer list it's
09:55 - asking me to make sub lists so the first
09:59 - sub list so I'm gonna add the name and
10:03 - the first name in the first age that's
10:06 - the first sub list second sub list it's
10:10 - gonna be Judy and their age which is 16
10:16 - all right cool that's valid all right
10:21 - let's move on to the next one
10:23 - yeah and I think in this in that
10:25 - exercise too I noticed that
10:30 - so all the lists all the inner lists are
10:33 - have two values but you actually don't
10:36 - have to do that right so you know some
10:37 - of the lists they don't have to have the
10:39 - same number of values it's just one
10:41 - thing to know about these sort of lists
10:43 - of lists yeah just a little side note
10:47 - yeah I think with this this exercise is
10:50 - hinting at is that we're trying to build
10:53 - like kind of a neater database looking
10:56 - thing so we would want you know to kind
11:00 - of standardize on our own here but yeah
11:04 - like this would not be invalid that
11:08 - would be fine all right cool
11:13 - so this next one okay so this is
11:16 - actually I don't think I've used this
11:17 - before so zip let's return our class
11:19 - height example Jenny's 61 inches Alexis
11:22 - 70 inches Sam is 61 67 inches tall grace
11:27 - is 64 cool suppose we already had a list
11:30 - of names in a line of heights
11:31 - all right so we have two different list
11:33 - names and Heights and if we want to
11:35 - create a list of lists I paired each
11:37 - name with a height almost like a
11:39 - dictionary and you know some like a key
11:42 - pairing we could use something called
11:44 - zip CIP so zip takes two or more lists
11:49 - as inputs and returns an object that
11:52 - contains a list of pairs we're almost
11:54 - like we're almost combining two
11:57 - different lists each pair contains one
11:59 - element from each of the inputs you
12:01 - won't be able to see much of this object
12:03 - from just printing it okay
12:05 - - no so the so that the print the output
12:08 - of this actually a little bit weird it's
12:10 - like a little square bracket zip object
12:14 - at you know a memory location so I guess
12:19 - we just have to try it out to see what
12:20 - happens also have a question about this
12:23 - - can you know the site now suppose we
12:27 - have two different lists of two
12:28 - different value of different number of
12:31 - values and then we use zip what happens
12:33 - there should we test that out - after we
12:38 - sure yeah cool so I mean this is like
12:44 - you know a big chunk of information and
12:46 - this in the description of the lesson
12:51 - right here so let's just see in action
12:53 - well we already have in the workspace
12:57 - you want to pick up sunny
13:01 - yeah so let's use a zip to create a new
13:06 - variable called names and dogs names new
13:10 - variable names underscore and underscore
13:13 - dogs underscore names that comprise
13:15 - those two lists that we have names list
13:18 - and dogs names list into a single object
13:22 - a zip object I'm gonna look scroll up
13:26 - just to see how it's being used
13:28 - okay so it's being used like that so I
13:30 - think we did function before so you
13:33 - should recognize is this sort of syntax
13:35 - right the function name the command name
13:38 - or whatever and then we're throwing the
13:40 - two arguments inside names and dogs
13:42 - names mm-hmm I just want to address a
13:46 - question um somebody asked is the
13:48 - content is this content the same that's
13:51 - in the data science path oh we've got a
13:54 - moderator answering that question right
13:56 - there so thank you moderator um cool so
14:01 - let's see what happens when I run this
14:04 - oops
14:05 - typo I'm gonna use the right variable
14:08 - name dogs names okay
14:15 - so this next little instruction here is
14:22 - telling me to turn this into a list if
14:27 - you go back to the lesson description if
14:31 - I try to print names and dog names right
14:35 - away whoops
14:39 - dogs names okay then I'm gonna end up
14:43 - getting a zip object this is because the
14:47 - zip function here returns not a list but
14:51 - a zip object so that's what we'll see if
14:55 - we try to print it straight away but
14:58 - what we can do is cast this names and
15:02 - dogs names into a list so that we can
15:04 - actually print and see it that's exactly
15:06 - what this section second instruction is
15:08 - asking us to do so when this variable
15:13 - name is a little bit long so I'm gonna
15:15 - copy that over names and dog names
15:23 - schools
15:24 - I'm gonna cast this zip object into a
15:31 - list and then I'm going to print these
15:36 - are really long variable names all right
15:41 - okay so now that I um I print the actual
15:47 - you know lists version of it um I'm
15:51 - gonna comment that line out which gives
15:54 - us that zip object um once you cast it
15:58 - to a list you can print it and it looks
15:59 - much nicer so what it does is makes
16:03 - pairings ray of each name and each dog
16:07 - name so we're essentially trying to like
16:13 - make a pairing out of each out of each
16:19 - item in each list so Jenny will be
16:23 - matched to Alfonzo Alexis will be
16:27 - match to dr. doggy Sam is matched to
16:30 - Carter and grace is mesh to bro so it's
16:35 - important that these two are the same
16:37 - length yeah let's let's test out the use
16:42 - case like what happens if you know let's
16:44 - say dot we have an extra dog in the dog
16:46 - names let's do some other name okay all
16:57 - right so let's try let's try running all
17:00 - this code with that okay so just like
17:02 - kind of disappear okay good to know so
17:05 - yeah what we just did was um kept the
17:08 - same amount of names in the names list
17:10 - but we added an extra name so it seems
17:14 - like what zip does if there's an extra
17:16 - element that's unmatched somewhere
17:18 - it just won't match it with anything yes
17:22 - so we know that for the future okay so
17:26 - this is so this actually pretty good use
17:27 - case so I didn't know about zip before
17:29 - right this sort of like pairing system
17:31 - but like this could be a use case
17:33 - suppose you have like a playlist and you
17:34 - have artists and then in one like you
17:38 - know band names or artist names in one
17:40 - list and then saw names and song titles
17:43 - or when another list and you could
17:45 - combine these two lists using zip so
17:47 - it's like a pretty good little tool that
17:49 - we can use yeah we have a question which
17:52 - is why does it return with round
17:55 - brackets so good question Lulu so if we
18:00 - you know I'm highlighting this one kind
18:03 - of pairing that zip gave us what the
18:08 - what zip makes is something called a
18:11 - tuple so a tuple is like you know any
18:18 - math class is like XY right there's
18:22 - those values are basically like grouped
18:25 - together in that way so these tuples are
18:33 - not actually lists these tuples are
18:36 - tuples so i
18:39 - we can actually create a couple right
18:41 - yeah I think Python estoppel its instead
18:44 - of using square brackets I think it's
18:46 - literally the same thing by using
18:48 - parentheses and then in the difference
18:51 - between listen tuples so I always call I
18:54 - always call them tuples I didn't know
18:55 - they're called tuples but they are I
19:01 - think the only difference is like lists
19:04 - are mutable and tuples are not and I'm
19:08 - not sure what output looks like a tuple
19:10 - but I guess I just like the way Python
19:12 - works in the back end where it likes to
19:14 - display everything if it's a key pairing
19:17 - then it's a couple but I do wonder this
19:19 - so suppose it probably isn't a tupple
19:23 - when it's not zipped right not a couple
19:29 - if it's not this right like suppose we
19:31 - just like create a new like when we did
19:36 - the list of lists and when we print it
19:37 - out it's not a tuple right still with
19:39 - square brackets mm-hmm I'm going back to
19:42 - that lesson it's because we when we
19:44 - created them with the square brackets
19:46 - they they're automatically lists yeah
19:52 - but if but you can try it out just to
19:55 - show people like if you just do names
19:56 - too and like you just copy the very
20:00 - first line of code and then paste it
20:06 - somewhere called names too and then
20:08 - instead of using square brackets use
20:10 - parentheses it's then you make a couple
20:14 - sorry if I use square like opening
20:17 - parenthesis and a closing parenthesis
20:18 - instead of square brackets for life for
20:25 - yeah and then you print names too so
20:30 - that's a tupple I'm pretty sure oh yeah
20:43 - so that's a couple and the difference
20:45 - like you can't change what Oppel where
20:47 - is like less you can manipulate it
20:48 - however you want it to right so you
20:51 - can't really
20:52 - like I can't add more elements to names
20:55 - too right there's no functions for me to
20:58 - like a pen or plus sign okay so yes like
21:04 - if you have like a parent that you know
21:06 - is true forever then I'll use a tupple
21:09 - instead of a list but most of the times
21:11 - I feel like the data that I touch even
21:13 - when this number data was historic data
21:15 - I like to use lists just because you
21:18 - never know we need to add a number you
21:20 - need to reference a number you need to
21:21 - change a number delete a number right
21:26 - there's a question from somebody named
21:29 - hold on why is it if you print lists
21:35 - casting names and dog's name to list two
21:38 - times in a row the second time returns
21:40 - an empty list so let's try that out so
21:46 - I'm going to uncomment some way hoping
21:48 - is this D Hoban I don't know I see that
21:53 - probably not if you print
21:59 - okay I'm gonna copy that line of code
22:02 - and demo what Hoban is talking about so
22:18 - all right so um good question so what
22:26 - happens the first the first time it
22:28 - turns into a list so this is the first
22:36 - time that we cast that to a list so here
22:40 - let's I think I might know what's going
22:43 - on here that's that's really interesting
22:44 - that I hope and ask this so what happens
22:46 - when you let me think how do i how we
22:52 - can take title this okay so right here
22:58 - this is a the first time we cast it to a
23:00 - list and then the
23:04 - hold up
23:10 - if you print so it seems like something
23:19 - happens the second time we cast it to a
23:22 - list but it it's a little bit different
23:29 - if we do this versus if we do this do
23:42 - you have a sense why Sonny why only
23:46 - sorry
23:47 - yeah so I think Alex said it's because
23:48 - zip object is an iterator which is kind
23:51 - of a more obscure Python concept but I
23:55 - wonder how we can like make people
23:57 - understand what hope is talking about
23:58 - here I wonder if we can they set up
24:02 - printing after we use the list command
24:05 - what if we just print out a line on line
24:09 - 11 we print out names and dogs names yep
24:17 - just like right there we're gonna have
24:20 - to resit we print that out right so that
24:24 - was a line that I commented out before
24:25 - okay so we'll just see as a zip object
24:27 - cool and then after we you know put into
24:30 - a list let's print out the names and
24:33 - dog's names again let's see what happens
24:35 - there so maybe like between line 17 and
24:37 - line 18 so between these two lines let's
24:42 - print out the names and dog's names
24:44 - again just so I want to verify like is
24:46 - there still a zip object at that you
24:48 - know hexadecimal location yeah okay so
24:51 - it's still there huh all right I guess
24:58 - just a weird Python so something about
25:04 - iterator functions I think makes it so
25:10 - the second go around there's
25:15 - okay now here's my question what if you
25:17 - do in a third time
25:18 - there's another question is this still
25:21 - empty what does it do it or does it
25:24 - restarts okay so maybe it's like where
25:29 - it like runs out of elements to to cast
25:33 - maybe yeah I love little interesting
25:36 - language this is so bizarre you use up
25:40 - everything in the iterator thank you
25:42 - very sense
25:43 - yeah that's bizarre though cuz nice and
25:46 - but the the object zipped objects still
25:49 - there in that memory location which is
25:52 - really bizarre yeah I think so I think
25:57 - maybe what happens is actually the list
26:00 - function is I think that might be the
26:04 - thing that's sort of eating up the
26:07 - elements yes right okay all right and
26:13 - just get to know weird
26:15 - yeah that's case cool
26:19 - also check please let us know if you
26:20 - have any questions we love questions
26:22 - like those too we'd love to learn stuff
26:24 - like this - yeah and let us know if you
26:26 - know at any point we're going way too
26:28 - deep into a demo and you know we need to
26:31 - get back on the list okay cool so let's
26:35 - move on to the next one we now know what
26:37 - zip does this is a pretty
26:42 - straightforward one okay so I guess
26:44 - hoping already kinda cover this what
26:46 - like what the heck is an empty list so
26:48 - the empty list basically elicits doesn't
26:50 - have anything
26:50 - it might looks like a square right there
26:53 - but oh it is it's like a opening square
26:54 - bracket in a closing square bracket so
26:57 - not nothing too crazy right there right
27:01 - so an empty list is like something that
27:07 - you can just like keep as a as a box and
27:12 - let's say that in your code you're gonna
27:14 - fill up that box later so like if we
27:19 - make in my empty list empty list we
27:24 - passed that checkpoint there but
27:27 - we can see in the next exercise is how
27:30 - we can add to that box so I think this
27:35 - is a pretty straightforward one that's
27:37 - valid code we're gonna learn how to like
27:41 - grow that list now so here we're
27:48 - introduced to a function called
27:50 - append so that's that allows us to add a
27:55 - single element to a list so you know
27:58 - again if we start with this empty list
28:00 - right here
28:01 - we can add an element to it using dot
28:05 - append and the element that we want to
28:08 - add to the list so that would be one in
28:11 - this case so and this just demos like if
28:16 - we print empty lists we'll get a list
28:18 - with the element one cool
28:23 - and when we use dot append on a list
28:26 - that already has some elements what it
28:29 - does is it just it adds it to the end of
28:33 - the list well this is a simple little
28:37 - example right here let's just get
28:39 - straight into it
28:41 - alright the story goes ji-ho is working
28:44 - for a gardening store we can see the
28:47 - code in the editor right here we got
28:51 - orders of daisies and periwinkle let's
28:54 - use print to just respect those orders
28:59 - Cole shows up here daisies periwinkles
29:04 - we got a new order of tulips alright so
29:09 - what we can do is the list name which is
29:12 - orders we use append and what's the
29:16 - flower alright
29:18 - tulips alright let's run this this first
29:25 - print is just printing what it was
29:27 - before we appended so another order has
29:31 - come in now we can append roses
29:40 - [Music]
29:43 - now let's print the whole thing again
29:46 - cool that has our updated
29:48 - flower orders we've got a question the
29:52 - chat is empty list equals double bracket
29:58 - the same s empty list single bracket
30:02 - alright so let's use the like previous
30:06 - editor to make that comparison so yeah
30:12 - my understanding is that they should not
30:13 - be the same rank even though they are
30:16 - empty also by the way is this called a
30:18 - 2d like two dimensional array I mean
30:22 - sorry two dimensional list like two
30:25 - double double brackets or like a matrice
30:27 - okay yes so what you're making your so
30:34 - actually like the let's call it not
30:38 - really empty list I want to say because
30:42 - what it actually is is a list of lists
30:45 - except it has an empty it has an empty
30:48 - list inside that list yeah so can we
30:53 - print rep let's print the truth-value of
30:57 - them if whether or not they're equal so
31:04 - they're not equal let's just like print
31:09 - those out to see what they look like
31:10 - even just an output alone and then also
31:12 - we can test it by using a pent and see
31:15 - what happens there okay so they look
31:23 - very different even the output and then
31:25 - let's go one more step let's append
31:27 - something to both of those lists so
31:29 - let's do like a pen to one or something
31:31 - so like my okay so I understand
31:38 - emptiness append one and then not really
31:43 - an empty list append one and then print
31:45 - those out again and let's see what
31:47 - happens I've a feeling that the outputs
31:49 - can be very different
31:51 - I wonder if the yes so that's a really
31:57 - interesting point right just very just
31:58 - like what Carolyn said do you see how
32:01 - the Pend looks so different these two
32:03 - because the first empty list in the list
32:08 - of lists is actually the first element
32:11 - right and when your pending one to it so
32:14 - you know in not really empty lists the
32:20 - first element is empty list and the
32:23 - second element is now one yeah and the
32:28 - follow question is how to use append in
32:31 - a list of lists and list form and we
32:33 - actually line 11 is when we're actually
32:36 - doing that we're pending it to this list
32:40 - of Lists so like if we say that a list
32:43 - can contain mixed data types it can
32:47 - contain lists within itself but it can
32:49 - also contain single elements so we can
32:52 - call this one a mixed list as well and
32:56 - that's what happens when we append a
32:58 - single element into what was previously
33:02 - a list of only lists okay yes nice
33:07 - question it's good like with these super
33:12 - basic lessons to like dive super deep
33:14 - into like the you know actual object
33:17 - that's being kept track of and Python
33:20 - and how and the logic behind it right
33:23 - okay you know it's very easy to
33:27 - especially when you're working with data
33:29 - it's very easy like to miss where you're
33:32 - you know adding a certain layer and
33:34 - changing the changing the object type of
33:38 - something that you think is just a
33:39 - regular list but is something else yeah
33:43 - okay so here's a random question I've
33:46 - been I've been wondering this like it's
33:47 - just like the beginning I don't I didn't
33:49 - I didn't want to ask this on on stream
33:51 - but so Carolyn used to be a data
33:54 - engineer at tumblr so my question is how
33:57 - often do you actually use lists at your
34:00 - job like did you even use Python a
34:02 - tumblr
34:04 - um well I don't know how much I'm like
34:08 - you know allowed to talk about like the
34:11 - whole you know everything yes - yeah we
34:16 - didn't use Python though um however like
34:19 - you know the concept of series and
34:23 - tuples yeah you know constantly show up
34:25 - right regardless of the language just
34:28 - like a mandatory yeah knowledge yes and
34:31 - when you're doing anything with data and
34:34 - you know engineering anything like you
34:36 - have to be extremely sure about the
34:38 - datatypes of everything because if they
34:42 - don't match you're not able to use a lot
34:45 - of the functions that manipulate them
34:47 - right you have to standardize like
34:51 - pretty much all of your data so if you
34:53 - have something let's say like you have
34:55 - something that's in a single bracket and
34:59 - you wanna and you forget that you know
35:01 - you keep this other thing and inside of
35:03 - like a like lists of lists or a list of
35:11 - tuples it's like there's a lot of
35:14 - conversions that you have to figure out
35:16 - - yeah the data that you want to get -
35:21 - yeah I think that's one my problems with
35:23 - I feel like Python in general is just
35:26 - like they're less I mean I did post in
35:29 - curriculum chat of I think Python 3.9 is
35:33 - adding type hinting which means like you
35:35 - can add like an int to know to check
35:39 - whether you know the argument of
35:40 - throwing is like the parameter suppose
35:42 - there is supposed to be an int this
35:44 - argument being thrown into the per am
35:46 - and to the function is an int value okay
35:49 - so so it's it is happening but I have
35:52 - ran into a lot of problems with like
35:54 - even writing machine learning curriculum
35:55 - with you know one numbers off maybe add
35:58 - a stantly added you know
36:02 - maybe have a strain in a list of numbers
36:04 - you know just like something a typo or
36:07 - something and that happens a lot it's
36:08 - really hard to find yeah Python in
36:12 - general like you don't know if it's
36:15 - wrong unless you you know run it whereas
36:18 - you know there are other languages like
36:20 - Java where it's so strict about types
36:23 - you have to be upfront about exactly
36:26 - what you're declaring so that makes it a
36:31 - little bit that has its pros and cons
36:33 - right you know it makes developing you
36:36 - know a little bit more intentional and
36:39 - maybe maybe difficult but you know on
36:42 - the compilation before the code is
36:45 - actually running on the data set when
36:48 - you know which could take a long time so
36:50 - you know that when the code compiles
36:51 - whether or not it's whether or not all
36:55 - of the objects that you want to
36:57 - manipulate and get insight from are
37:01 - actually like you're not going to run
37:05 - into issues during the execution
37:09 - okay yes and hold on for data science
37:14 - using a package like pandas helps
37:17 - I wonder if pandas is in this it's not
37:20 - in the data visualization path but it is
37:24 - in the analyzed data with Python path I
37:28 - think and in the general data science
37:30 - skill path path so here curious about
37:36 - pandas actually I think it's right there
37:38 - right it is it is there it is here yeah
37:42 - yeah Oh data manipulation with pandas
37:45 - yeah yes so this package allows you to
37:49 - [Music]
37:51 - like inside of pandas it does look like
37:55 - you know the list language right here so
37:57 - it's good to know the list stuff but it
38:01 - but within pandas it creates it kind of
38:04 - wraps more around the list so that you
38:09 - can you know have functions on them
38:14 - yeah like dataframes or whatever great
38:16 - yeah that that makes your data analysis
38:22 - and data visually visualization and how
38:24 - you're grouping the data a little bit
38:25 - neater oh cool
38:29 - also and Kenji baby says and also the
38:33 - fact that space makes a difference in
38:35 - Python is annoying true very true okay
38:43 - yeah stealing you know people are like
38:48 - thrashing on Python here yeah that's
38:51 - great this is a great easy language as
38:52 - fast I mean it's like it's good first
38:55 - build something pretty quickly with
38:57 - Python yeah is it pro here okay so
39:02 - there's two like pick up a little bit we
39:04 - just did append right which adds single
39:07 - elements on to the end we can also use a
39:12 - plus sign which feels really you know
39:15 - really Universal but a plus sign is
39:18 - combining two lists instead of adding a
39:21 - single element so let's say we have
39:25 - items sold at a bakery cake cookie bread
39:29 - and we want to start selling biscuits
39:32 - and tarts - so what this line of code is
39:37 - doing here is we're adding the list
39:43 - called items sold plus notice that
39:47 - there's a new list containing biscuit
39:50 - and tarts and the add basically combines
39:55 - them into one list okay right so we you
40:03 - can see it by printing right so here
40:10 - there's a little note about like we can
40:14 - only use plus with other lists this is
40:16 - what happens when you try to add a
40:19 - single element you get this type error
40:21 - that you can only concatenate
40:24 - concatenate is can think about as gluing
40:27 - you can only concatenate two lists not
40:31 - an int int element to a list okay but if
40:38 - you wanted to add 4 to that list what
40:40 - you could do is put a put brackets
40:43 - around that 4 and make it a list
40:45 - containing 4 all right so by so those
40:48 - you know a little flower shop business
40:53 - we're still adding orders he just
40:57 - received orders for lilac and iris we
41:02 - want to use + to create a new list
41:06 - called new orders it combines orders the
41:11 - existing orders and we want since we're
41:16 - using + we have to wrap those new
41:19 - elements around a list so they're lilac
41:23 - and iris awesome alright the second
41:31 - checkpoint asks us to fix this broken
41:34 - line of code right here why is it broken
41:40 - if we run this we're gonna get a type
41:43 - error can only concatenate lists two
41:48 - lists not and into a list so that's the
41:51 - same error that we've been warned about
41:52 - before we can fix this command by
41:55 - putting that for around brackets awesome
42:03 - yes comments we will be using pandas
42:07 - numpy and lists all together that's
42:11 - that's going to be in the data
42:15 - manipulation with pandas module what
42:19 - happens if you print this out let's try
42:22 - that one more yeah broken piece of
42:24 -  prices yes it's not broken
42:27 - anymore
42:29 - cool remember to to make your variables
42:36 - always reflect what's actually going on
42:40 - okay um cool so let's move on this looks
42:50 - like we're nearing the end of this
42:51 - lesson
42:52 - call and make sure you understand what's
42:54 - the difference between a pend and the
42:56 - plus the plus operator there's like a
42:58 - pretty big difference but like when you
43:01 - first starting out you might know you
43:02 - might not know which one to use but
43:04 - there's like a difference there alright
43:10 - for a range this is a this is another
43:12 - function we're getting introduced to
43:14 - this is kind of like a shorthand for us
43:18 - to create a list of consecutive numbers
43:21 - so if we wanted numbers 0 through 9 this
43:26 - is you could list all of them out like
43:29 - so
43:30 - you know painstakingly like if you had
43:33 - to list number 0 through a hundred I
43:36 - don't think any of us want to wants to
43:38 - be there typing every single number from
43:41 - 0 to 99 or a hundred and we human error
43:47 - right so let's let Python give us an
43:51 - easy way of doing that
43:53 - it's called range so the function range
43:55 - takes a single number and it generates a
44:05 - list of numbers starting at zero and
44:08 - ending just before the number that's
44:11 - given so here this line of code my range
44:15 - equals range 10 that will give us 0
44:20 - through 9 so 9 is just before 10 and
44:25 - just like with zip that range function
44:28 - doesn't give us exactly what we want it
44:31 - doesn't give us exactly that list so we
44:34 - would have to convert that into a list
44:36 - using the list function okay okay all
44:42 - right let's let's use range in this
44:44 - editor right here want to modify this
44:47 - list 1 so currently let's let's print
44:51 - out
44:54 - list one let's see what it gives us this
45:00 - is the error message from us not doing
45:02 - the checkpoint but let's follow the
45:06 - checkpoint all right so if we print this
45:15 - right here it doesn't give us the list
45:18 - it give us a range object so if we put a
45:25 - little list casting around that list one
45:30 - it actually gives us what we want which
45:33 - is that list of 0 to 8 all right let's
45:39 - make a second list with a range of 0
45:42 - through 7 so what should I type in here
45:45 - Sonny I think 8
45:48 - oh why 8 just zero to the input value
45:54 - minus ones so which is 7 right 8 minus 1
45:57 - is 7
46:01 - just print out yeah I'm actually pretty
46:05 - surprised you had to do this like with
46:07 - zip and range values I'm surprised like
46:13 - Python makes you have to like do the
46:15 - list command again like it could easily
46:17 - be just like that's a return value and
46:19 - then the you know the zipped object
46:22 - memory location or that range 0 10
46:26 - whatever like basically to be more
46:29 - explicit like those could just be
46:30 - property values so mm-hm maybe for
46:35 - Python 4.0 if anybody watches cook a
46:37 - meal I've seen it on dev team yeah you
46:41 - change that yeah hopefully a reason that
46:44 - they keep keep it as a range object it
46:47 - could be helpful you know for other
46:48 - functions later on that's actually I
46:52 - just want to like comment on you know
46:55 - variable names here so since we want
46:59 - this to actually represent we want list
47:01 - one to actually represent a list let's
47:03 - do the casting here instead of what
47:05 - we've instead of when we print it so
47:07 - that
47:08 - doesn't confuse us so this is good
47:10 - coding practice right the variable
47:13 - represents the actual truth about the
47:16 - the data that it contains that's just my
47:21 - two cents
47:23 - all right cool
47:26 - I like that let's wait can we got a
47:29 - question so coach at me account I think
47:31 - that's Alex right what happens if you
47:32 - try print list list one again okay so
47:37 - I'm gonna do that to list - so basically
47:40 - list one is already a list oh wait
47:43 - so if I print um let me print list list
47:52 - range oh boy it's because I already I
47:56 - already changed the variable - to
47:59 - actually be a list so essentially it's
48:03 - like what happens if we try to double
48:05 - cast on this range object same thing I
48:12 - guess we do a list of illicits is still
48:14 - the same thing that's weird
48:17 - feel like that's not the same behavior
48:21 - as zip should we never tried that
48:26 - actually no no no I think that's
48:28 - possible with zip of a zip yeah that's
48:30 - not possible I mean unless you do zip
48:34 - zip and a zipped list and then try to
48:42 - zip try to zip list2 and list3
48:56 - Oh what's going on here
49:00 - missing a on line eight missing a
49:04 - closing okay so then if I print okay I
49:17 - want to do is it equals I'm gonna store
49:20 - this in a variable and I'm going to
49:28 - print the Zips okay so when we print the
49:37 - zipped it gives us the tuples but the
49:40 - question is what if we double cast you
49:47 - know the question is actually if we
49:48 - zipped again okay yeah so yes for yeah
49:54 - whoops click back instead of right no
49:58 - okay so this is a thing all right
50:01 - oh we cast it to a list cast is zipped
50:06 - to a list the first time it gives us
50:08 - this these tuples which is what we want
50:11 - but if we cast if we try to lists cast
50:15 - the zip to a list again it gives us an
50:18 - empty list all right so here's something
50:19 - more ridiculous eleven instead of
50:24 - printing out the list of zipped again
50:27 - what if we do another zip of list for
50:31 - and list five and then we do the yeah
50:37 - actually you know yeah all right so I
50:43 - mean we already know that that wouldn't
50:44 - have happened with zip right um but I
50:50 - okay let's
50:54 - [Music]
50:59 - range thing I'm just gonna go back to
51:05 - the actual question which is what
51:11 - happens if we print the list of the
51:13 - range thing right then we get this nice
51:23 - one but if we try to do the same thing
51:25 - again actually it will give us the same
51:29 - thing again so it seemed like lists on a
51:34 - range has a different behavior at the
51:37 - list on Asia hands if stocks Arctic as
51:42 - Kenseth take more than two parameters
51:45 - yes
51:46 - it can't I think this is covered in you
51:52 - know a future exercise but we've really
51:56 - made a mess of this editor haven't we
51:58 - yes so let's say cat name sir yes dogs
52:03 - ages right let's say there's four right
52:11 - okay so let's say we had so you want to
52:15 - zip we want to zip all three of these
52:19 - things together I'm going to comment out
52:23 - the other mess okay names ages so whoops
52:32 - we need to do that casting thing again
52:36 - so
52:52 - okay so here's what happened all three
52:55 - of those things got zipped into the same
52:58 - couple so tuple is not limited to two
53:01 - elements so that's good to know
53:05 - okay definitely try out a zip on your
53:11 - own go back and do this exercise and you
53:15 - know you can play around with it cool so
53:24 - let's just let's try to finish up this
53:28 - range thing in the last five minutes
53:31 - when I talk about some what's gonna
53:34 - happen Thursday and some future events
53:36 - all right so this exercise range two
53:43 - instead of just being able to do
53:46 - consecutive numbers you can actually
53:47 - have consecutive note you can actually
53:49 - have a series of numbers that skip of
53:52 - yes like numbers that have intervals
53:56 - between them so this range function
54:01 - right now starts it starts from 5 ends
54:06 - at 15 and the third argument is gonna
54:09 - have a we want it to have a difference
54:11 - of 3 between each item so you can also
54:15 - use range this way
54:17 - so let's print out the lists of that
54:24 - all right so this is what happens when
54:27 - we this is the output from range with
54:31 - five fifteen and three so we got 5 plus
54:34 - 3 is 8 plus 3 is 11 plus 3 is 14 and it
54:39 - will not go up to 15 right yeah so I
54:43 - think this might looks a little
54:44 - ridiculous but we're all we're doing is
54:46 - we're skipping now right like a 3 is how
54:49 - much we're incrementing like the last
54:52 - value so still going from 5 to 15 well 5
54:55 - to 15 minus 1 but we're incrementing by
54:59 - threes we're skipping right let's just
55:04 - do the second example super quickly we
55:07 - start at 0 we want a difference of 5
55:10 - between each item it ends at 40 though
55:14 - so that's gonna be the second argument
55:17 - and then the final argument is how much
55:19 - it's gonna skip and let's print out cool
55:31 - so it does exactly that it skips 5 from
55:35 - zero to just before 40 awesome ok review
55:41 - here definitely recommend for you to
55:47 - complete this lesson on your own it
55:53 - basically you know you're gonna be
55:55 - running through all the skills that
55:56 - you've learned in this lesson so far in
55:59 - the last few minutes let's talk about
56:03 - what we'll be doing Thursday I'm Sonny
56:06 - do you want to wait a second I don't
56:09 - think I've that pulled up
56:11 - well Thursday so Tuesday's are our days
56:15 - where were you know deep diving into a
56:17 - lesson like we are right now Thursday's
56:20 - are more of a ask me anything Q&A so you
56:24 - have more opportunities to ask questions
56:26 - there although you all did a great job
56:28 - asking questions today Thursday will be
56:32 - a little bit more loose so like instead
56:34 - of us you know just sticking with the
56:36 - lesson
56:38 - we can do is kind of like jump all over
56:41 - this module so you know if we want to
56:45 - check out that project we can if we
56:48 - instead we want to actually like
56:52 - download and like install Python into
56:55 - our own computer we can demo that so
56:58 - Thursday's just a little bit more loose
57:00 - but you will have you have more ability
57:04 - to decide what happens on thursdays then
57:08 - make sure to go to kokum e-comm slash
57:11 - events for future live events i think
57:14 - we're we have a bunch of goodies coming
57:17 - soon that were trying to push for
57:19 - especially doing this time I think it's
57:21 - just like a perfect to have to learn
57:22 - when you have some down time so make
57:25 - sure to check that out go kami comm /
57:27 - events if Alex you want to send that out
57:29 - and chat yeah make sure to join the
57:33 - Thursday session if you have Pro yes go
57:38 - I'm gonna just pull up that advanced
57:40 - page quickly in the last minute yes so
57:45 - today was a Tuesday Thursday is
57:51 - questions oh is you can also ask us
57:54 - questions that are outside of you know
57:55 - the curriculum can ask you can ask us
57:59 - questions about like generally like how
58:03 - to do data stuff in Python some of our
58:06 - experience from being engineers in the
58:11 - field so we'll try to answer as many
58:15 - questions as we can
58:16 - you can also have learners you know
58:17 - sharing and participating a little bit
58:19 - more
58:20 - that's Thursday next week next Tuesday
58:23 - we'll have other people on our
58:26 - curriculum team doing the next module
58:30 - which is matplotlib so graphing stuff
58:34 - and then same thing next Thursday is
58:37 - also asking anything that's all we have
58:40 - coming up thank you so much you all for
58:43 - joining today this is my first live
58:47 - stream
58:48 - [Laughter]
58:51 - so I mean I'll see you all on Thursday
58:53 - again we'll see you all on Thursday
58:55 - again everybody give Carolyn a claps in
59:02 - the chat oh and you can leave some
59:08 - comments now we can you know maybe
59:10 - address them on Thursday too so we'll
59:13 - just keep looking at the chat Thank You
59:22 - moderator cool it's Thursday session
59:29 - recorded good question I think if you're
59:31 - a pro it's gonna be available right
59:39 - thank you I love your username all right
59:46 - I do see a comment from ha so let's see
59:50 - which age is the best to start coding I
59:53 - think high is 15 where I'm where I'm
59:57 - from the best classes can only be
59:59 - attended by individuals over 18 and I'm
60:01 - currently 15 therefore have access to
60:02 - low-level classes okay so 15 your
60:06 - freshman freshman in high school yeah I
60:15 - think there's a perfect time to start
60:16 - learning I think even when you're 15 you
60:19 - can actually sit in a college lecture
60:21 - right you can just sign up for that and
60:26 - I'm sure if you're in the States a lot
60:29 - of the high schools now have computer
60:31 - science clubs so definitely recommend
60:34 - joining those and then also online
60:36 - tutorials are a great way to get started
60:38 - even when you're yeah I was saying try
60:42 - to just do your first project and it
60:46 - takes a lot of just research on the spot
60:49 - but it's really fulfilling to build your
60:52 - own thing so you know you can figure out
60:54 - what kind of thing you want to build and
60:57 - go from there I would recommend that you
61:00 - know cuz you're starting so young you
61:02 - know you want to do fun things with it
61:06 - awesome so I think we're gonna sign off
61:09 - for today thank you all for the claps
61:12 - and join us on Thursday we can you know
61:17 - have more banter and all that okay all
61:22 - right goodbye everybody
61:23 - I see everybody have a good Tuesday
61:26 - peace