00:00 - but let me know in the chat uh we had
00:04 - a few difficulties
00:07 - um getting started so
00:11 - let's just make sure that everything is
00:14 - okay
00:18 - we will hopefully be able to cut some of
00:20 - this out
00:21 - later when we post this um
00:24 - but let me know in the chat great okay
00:27 - perfect
00:28 - um well welcome to our fourth live
00:31 - stream
00:32 - in the cs 101 series um i'm sophie i'm a
00:37 - curriculum developer at codecademy and
00:39 - i'm really excited to be here
00:40 - um at my colleague alex who's also a
00:44 - curriculum developer is
00:45 - going to hopefully be joining me at some
00:48 - point
00:49 - very soon but he's having some internet
00:51 - issues so
00:52 - um so he'll join when he can get back
00:55 - online
00:56 - um oh alex is here via his phone
01:00 - um anyway so we're gonna
01:03 - jump right in i am going to share my
01:06 - screen
01:07 - and tell you guys a little bit about
01:10 - what we're going through in this live
01:12 - stream and then we will get started
01:15 - so let's see
01:21 - great um okay so hopefully everybody
01:25 - can see uh this
01:28 - window um so right now we're going
01:31 - through
01:32 - uh this cs 101 live stream series the
01:36 - link should be
01:37 - in youtube um and on the events page so
01:41 - that's at codecademy.com
01:44 - events um you will be able to
01:48 - see this event right here where um we're
01:52 - doing lists
01:52 - today and then you can also click into
01:56 - this module by clicking here on cs 101
01:59 - live stream series
02:01 - and so so far we've we've gone through
02:05 - variables and basic syntax functions
02:08 - control flow and now list is going to be
02:11 - the fourth module
02:14 - and so we're going to start
02:17 - as we have with all of these modules
02:20 - with a more conceptual
02:23 - lesson so um these are all broken up
02:25 - into kind of
02:26 - conceptual then how to implement
02:29 - something in python
02:30 - and then last but not least we have some
02:33 - code challenges which hopefully
02:35 - i'm planning to leave some time at the
02:37 - end so that we can get into
02:39 - the code challenges because i think one
02:41 - of the the best things about this live
02:43 - stream series is that you can kind of
02:45 - see
02:46 - how somebody goes about coding and um
02:49 - and dealing with errors that might come
02:51 - up and
02:52 - both alex and i went through this uh
02:54 - code challenge
02:56 - uh article before this before this live
02:59 - stream and we were both saying how
03:01 - you know they're a little bit
03:01 - challenging we both made the same kind
03:03 - of mistake and hit up against a similar
03:06 - error and then
03:07 - found different ways of solving it so i
03:09 - think that's a good
03:10 - thing to be able to see somebody do in
03:12 - live
03:13 - in real time so hopefully we'll have
03:15 - time to get to that
03:17 - but for now i'm going to click into
03:19 - lists
03:20 - oh uh also i don't know
03:23 - if somebody has already said this in the
03:25 - chat but uh we are
03:27 - streaming live on a few different
03:29 - platforms we're on
03:31 - youtube facebook and twitch i think
03:34 - those are the main three
03:36 - um i am looking at the chat
03:39 - in youtube um so if you have specific
03:42 - questions
03:43 - you can uh let me know in the youtube
03:47 - chat if you're
03:48 - watching this on facebook or twitch come
03:50 - over to youtube if you want to
03:53 - ask something during the um
03:56 - during the livestream and yeah and also
03:59 - i see people are posting about where
04:01 - where they're calling in from see
04:03 - someone from finland
04:05 - uh feel free to uh just post in the chat
04:08 - and say hello and
04:10 - tell us where where you're from i know
04:11 - we get a lot of different people from a
04:13 - lot of different places
04:14 - and it's kind of cool to see where where
04:17 - everybody is
04:18 - is listening in from so
04:21 - cool um okay so we're gonna jump right
04:25 - in then to
04:27 - an introduction to lists and
04:30 - lists exist and as far as i know
04:33 - every programming language that i have
04:35 - used
04:36 - uh and and so a list so far we've talked
04:40 - about variables
04:42 - and we've talked about storing
04:43 - information in
04:45 - some sort of object that has a name
04:48 - but now we're going to talk about
04:50 - storing multiple
04:52 - objects within the same name
04:55 - and so lists are really great for that
04:57 - they also
04:58 - have a way of ordering the objects that
05:02 - you're storing so that you
05:03 - can then pick out whichever objects you
05:06 - want if you
05:07 - if you need them for any future uh
05:11 - like program that you're writing so um
05:14 - so we're gonna go through again this is
05:17 - we're starting with the conceptual piece
05:18 - so we're not actually gonna be
05:20 - doing any coding quite yet so um
05:24 - here's our our little like and we can
05:27 - even think of this as an
05:28 - empty list so um it this is kind of a
05:31 - space that we can make
05:34 - to put objects into it and
05:38 - save them in that one in that one space
05:41 - and so here we've got a few this is like
05:43 - a comic strip so we have
05:45 - um cody plants a seed so he's going to
05:50 - plant a seed water the seed wait for it
05:53 - to grow and then a sprout grows
05:55 - and notice that this has these pictures
05:57 - have an inherent order to them
05:59 - so we're going to try to put them in
06:01 - that order within our list
06:03 - so first he's going to plant the seed
06:07 - um
06:10 - hopefully i can get this yep
06:14 - okay so first he's going to plant the
06:15 - seed then he's going to
06:17 - water the seed and then he is going to
06:22 - wait for the seed to grow
06:26 - and then it is going to grow
06:29 - and so now we've got in this box which
06:32 - represents our list
06:33 - object we have four panels and they're
06:36 - in
06:37 - an order that makes sense to tell a
06:39 - story and so we've saved four different
06:41 - things
06:42 - in one place um
06:46 - cool so now
06:48 - um so now like i said one of the
06:52 - benefits of this is that it allows you
06:54 - to
06:55 - then pull out any value from your list
06:59 - that you want
07:00 - um and so many coding languages
07:03 - including python have um
07:06 - indep indices that start at zero um
07:09 - which there are reasons for that and
07:12 - hopefully we'll have
07:13 - a chance to talk a little bit about why
07:15 - that is but um
07:16 - but it does sometimes make the counting
07:19 - process
07:20 - a little bit more challenging so um
07:23 - so we're counting from zero and so the
07:26 - first item has an index of zero the
07:28 - second item has an
07:29 - index of one the third has an index of
07:32 - two and the fourth has an index of three
07:35 - so if we want to get the second item
07:39 - from the list all we need to do is kind
07:41 - of grab
07:43 - the item that's at index one which is
07:45 - the second item so
07:47 - i'm gonna manually do that now um and
07:49 - i'm gonna
07:50 - grab this image which is the second item
07:52 - at index one
07:54 - and i'm gonna i guess just click it and
07:57 - now it's highlighted we've
07:59 - we've been able to identify which image
08:02 - we want
08:02 - by using these kind of built-in numbers
08:05 - and we'll see how that's useful as well
08:07 - once we get into python
08:10 - okay um adding items to a list
08:14 - so just like before here's our list
08:18 - it has some items already in it and
08:21 - the point of this is really just to show
08:23 - you that you can always add items to
08:26 - your list
08:27 - um so if you create something um you can
08:30 - then change it you can add or even
08:32 - remove things from it
08:33 - so so i'll go ahead
08:37 - i think this one it's saying like you
08:39 - can end this story in any way so we have
08:41 - cody starts his hike he goes on his hike
08:45 - um he's walking past a tree and then
08:47 - here are
08:48 - three different endings he can meet a
08:50 - friend he could just walk keep on
08:52 - walking to the end
08:53 - or he could go sit on the tree
08:56 - so um i'm gonna have him meet a friend
08:59 - because that
09:00 - seems like a nice thing to do um and
09:04 - my window is a little short so that's
09:06 - why that's happening but
09:07 - yeah so here we go um now you can see
09:10 - that we've added something to our list
09:12 - we could even add more things to the
09:15 - list i think well
09:16 - we could in in python i guess not here
09:19 - but we could take that out and we could
09:20 - put something else in here
09:22 - um and so now he's sitting on the tree
09:25 - instead
09:27 - cool um
09:30 - okay
09:34 - the next one like i said you can remove
09:37 - items from a list
09:38 - so here we've got um
09:41 - another list a different sequence of
09:43 - events and
09:45 - here we've got him shooting a basketball
09:48 - and we don't want the basketball to jump
09:49 - back out so we're gonna move this fourth
09:51 - remove this fourth item and now we have
09:55 - a shorter list and
09:59 - last one um so here
10:02 - is the first time that now we're seeing
10:04 - some code and
10:05 - actually this is javascript
10:08 - i believe yeah uh main.js but
10:12 - uh in fact this same syntax is gonna
10:16 - work in python so
10:18 - so we can do basically the same the same
10:20 - thing in multiple languages which is
10:22 - at least nice to see um okay so we've
10:26 - got let's read the instructions and this
10:28 - is
10:29 - a nice way to kind of segue into the
10:31 - coding that we're gonna do
10:33 - so um cool so we have
10:37 - a list called comic strip that we're
10:40 - gonna create
10:41 - it contains the following strings cody
10:44 - sees the trail cody starts the hike
10:47 - cody is halfway and cody reaches the
10:49 - finish i guess i already did this one
10:51 - um okay so we've now put all of these
10:54 - things into a list we've typed them out
10:56 - uh
10:57 - so they're strings so remember we have
10:58 - to enclose them
11:00 - in quotes and then we're going to
11:03 - separate them with commas
11:04 - we're going to use square brackets to
11:07 - denote the beginning
11:08 - and the end of the list and then
11:12 - the next piece so
11:17 - the next piece is going to be to select
11:20 - the fourth item so here
11:22 - um you can see i've selected
11:25 - the the item at index three
11:29 - which is gonna be the fourth item
11:30 - because remember it starts
11:32 - at zero so it's zero one two three
11:36 - so the fourth item is at index three
11:39 - um and i think if i change this to
11:42 - zero you'll see so this one gets
11:45 - highlighted now so this is
11:47 - index zero we can do index
11:50 - one um and then
11:54 - two is going to give us
11:58 - this one down here and then 3 you saw is
12:01 - the last one
12:03 - cool um in javascript don't you need to
12:08 - have
12:08 - the ver or const keyword so
12:11 - um i will preface this by saying i'm not
12:14 - um a job or i am not trained in
12:17 - javascript but
12:18 - yes i think that this is kind of a short
12:21 - uh
12:22 - a shorthand that you can use um but
12:25 - probably not best practice
12:27 - uh but yeah cool
12:30 - yes thank you kenny um yeah so kenny
12:33 - says
12:34 - it's best practice to do so but the idea
12:36 - here is not to get lost in the
12:37 - javascript syntax
12:39 - it's more about thinking about the the
12:41 - programming
12:42 - list is a programming subject cool
12:44 - awesome
12:45 - um okay so now that
12:48 - we have seen what a list can do
12:52 - and we're gonna jump into some syntax
12:54 - and actually
12:55 - start trying to work with some lists in
12:58 - python
12:59 - so let me uh go back to
13:02 - the live stream series
13:06 - and we're gonna go into
13:10 - that first lesson
13:13 - um cool
13:17 - great so now we're in python world but
13:21 - you'll see
13:22 - that it looks very similar to what we
13:25 - just
13:26 - saw um okay so we've got
13:30 - in this exercise we're creating a um
13:34 - a list of heights so we've got four
13:37 - heights in this list
13:38 - oh my gosh hello sophie oh my goodness
13:42 - hi
13:43 - well welcome thank you well done i'm
13:46 - sorry
13:47 - for the technical difficulties uh for
13:49 - all of you who are in chat i think i was
13:50 - posting in chat
13:51 - uh sophie and i were prepping for this
13:53 - and like 30 seconds before we were about
13:55 - to hit live my internet went out for 15
13:57 - minutes
13:58 - so i'm back sophie amazing job leading
14:00 - this youtube
14:02 - so glad you're here to come help me
14:05 - answer questions about javascript and
14:07 - things
14:07 - that are not in my wheelhouse
14:11 - um cool all right yeah we're just
14:14 - getting into the first
14:16 - lists lesson um
14:20 - kenny says got the dynamic duo back
14:24 - yeah cool sophie so before we get into
14:27 - the python stuff there are a couple of
14:28 - things
14:29 - that i wanted to talk about or ask about
14:32 - one was um throughout this entire series
14:36 - really what
14:36 - what i've been focusing on is i love
14:38 - these um
14:40 - these language agnostic lessons that we
14:42 - do at the start where
14:43 - you're still programming right you're
14:44 - still like dragging and dropping but
14:46 - it's different syntax than python or
14:47 - javascript where it's it's really image
14:49 - based and kind of mouse-based and
14:51 - movement based
14:52 - so in a lot of these um applets there
14:55 - are like
14:56 - subtle things that are going on that you
14:57 - might not even realize and as i was
14:59 - watching you i realized like
15:01 - in the very first one when you could
15:03 - drag and drop
15:04 - elements anywhere in the list one of the
15:07 - and same thing with removing elements
15:08 - from the list actually
15:10 - when you remove an element from the list
15:12 - or when you add something to the list
15:13 - like at the start of the list
15:14 - all of the other elements also have to
15:16 - change right so if i remove something
15:18 - from the list all the other ones scoot
15:19 - down
15:20 - an index or if i add something to a list
15:23 - um you know if i add something to a list
15:26 - all the other ones scoot over
15:27 - and so again like small little subtle
15:29 - things like that
15:31 - are good to keep track of where all
15:33 - different programming languages are all
15:34 - gonna handle this slightly differently
15:36 - um but yeah that that was something that
15:39 - stuck out to me in this lesson
15:40 - of like um yeah i think that might be
15:43 - the one
15:44 - where you can only add to the end but if
15:46 - you go to the very first one
15:48 - um
15:51 - um back one more even actually oh yeah
15:55 - yeah so this one you can add in any
15:58 - order and you
15:58 - kind of add in any order right so if i
16:02 - if you now add there
16:03 - not only are you adding that to index
16:05 - one you're also moving the thing that
16:07 - was at index one two index two
16:09 - and so again that's just like kind of a
16:11 - tiny example and python will actually
16:13 - handle that for you but
16:14 - um small little details like that are i
16:17 - think are kind of like these essential
16:18 - programming questions that we wanna
16:20 - um remind ourselves of and then the
16:23 - other thing that i wanted to say before
16:25 - we get into real python is that
16:26 - lists are a data structure and i think
16:29 - data structures
16:29 - often have really like in sound
16:33 - intimidating so sophie could you like
16:35 - define what a data structure
16:37 - is or like why is a list a data
16:40 - structure
16:41 - sure yeah so that's a really good point
16:44 - and
16:44 - um i think actually because i'm
16:48 - coming from a programming or sorry from
16:51 - a
16:51 - data science background and statistics
16:53 - background i think a lot about like
16:55 - storing data um and so you can think
16:58 - but data is anything right like data can
17:01 - be a number
17:02 - a picture it could be anything and so
17:04 - when you have
17:06 - information that you want to store
17:08 - somewhere it kind of matters
17:10 - like the way that you store it so
17:13 - um like we were talking about with lists
17:16 - there
17:17 - they have some inherent order right that
17:19 - indexing that we saw
17:21 - um here like it means that this
17:24 - you know this item comes before this
17:25 - item comes before this item
17:27 - and you could imagine and they're just
17:29 - kind of in a string so there's only
17:31 - like things can only come before or
17:33 - after something else
17:35 - um but you could imagine you know a
17:37 - different type of structure where
17:39 - you just are throwing things into a
17:41 - bucket basically and like
17:43 - they are all kind of they're in the same
17:45 - place but they're they don't have any
17:47 - order to them
17:48 - um you could also imagine something more
17:50 - complicated than this like
17:51 - a grid kind of uh where you have things
17:54 - that can be above or below
17:56 - other um other pieces of information
17:59 - um and and so the way that you
18:02 - store that information and and you can
18:04 - kind of conceptualize
18:07 - storing like objects in your house like
18:09 - the way that
18:10 - the way that you store anything in the
18:12 - organization that you apply
18:14 - to it um has an impact on
18:17 - how you can then use that information
18:19 - later
18:20 - and so uh and so
18:23 - it's important to then think about
18:26 - especially
18:27 - now that we're going through lists like
18:29 - what are the what are the ways that like
18:31 - this
18:32 - this structure is organizing our
18:34 - information
18:35 - yeah i think so data structures might be
18:37 - a topic that you kind of see towards the
18:39 - end of your first year as a computer
18:40 - science
18:41 - student or it's kind of it's typically
18:43 - like us your second course it's usually
18:45 - titled data structures
18:46 - i think that oftentimes that's
18:48 - intimidating but thinking about it as
18:51 - like sophie said it could be this list
18:53 - of things one after another or it could
18:55 - be a grid
18:56 - right stepping back from coding and just
18:59 - being able to like
19:00 - conceptualize okay i have all this data
19:02 - and let me store it in a particular way
19:04 - and that's what a data structure is
19:06 - like stepping back from the code and
19:08 - understanding it at that high level
19:10 - and really it's not that intimidating
19:11 - it's just like different ways to store
19:12 - objects right um like you're saying so
19:14 - if you do that around the house all the
19:15 - time
19:16 - um again that's like um
19:19 - to me that's what computer science is is
19:22 - understanding these like big picture
19:23 - ideas
19:24 - outside of the code and then learning
19:25 - how to translate it into code
19:28 - yeah totally that those are some really
19:31 - great
19:31 - pointers and that's why i missed having
19:34 - you here
19:36 - yeah i appreciate the the redirect so
19:38 - you don't move too fast because those
19:40 - are some really important
19:41 - i think like the thing that's really
19:43 - nice about this is like
19:44 - actually this is kind of how i visualize
19:47 - a list in my head
19:49 - um and and it's kind of how you create
19:52 - it in python 2 but
19:53 - um but having a visual picture of your
19:56 - of the data that you're storing is a
19:58 - really helpful thing
20:00 - um cool all right yeah so let's go and
20:02 - see this in python then
20:05 - go back i should be opening these in
20:07 - separate windows but yeah
20:09 - people in the chat as you're navigating
20:10 - to there they're talking about how
20:12 - index shifting happens um dimitri is
20:15 - saying when you use the pop function
20:17 - um that that happens and so yeah that's
20:20 - that's one of the things as you're
20:21 - adding things to lists and
20:22 - removing things from lists you got to
20:24 - think about like how are my indexes
20:25 - changing here
20:26 - yeah exactly um awesome
20:30 - okay so i think this uh
20:34 - this exercise is just um
20:39 - about defining a list and making sure
20:41 - that you use the right syntax so
20:44 - um the way so up till now right we've
20:47 - been mostly talking about the conceptual
20:49 - piece and now we're talking about how we
20:51 - can actually create a list and then work
20:53 - with it in python
20:54 - and so python has some rules which we're
20:57 - calling
20:58 - syntax which are just related to
21:01 - the way in which we define um
21:05 - the the data structures or objects or
21:07 - whatever
21:08 - we want to call them um
21:11 - in in python so that the computer knows
21:15 - what we
21:16 - want to create um and can can
21:19 - understand it basically so um
21:22 - this list is being created with square
21:24 - brackets we're separating the elements
21:26 - with commas
21:27 - um this is asking us to add somebody
21:29 - else's height here so we could add
21:31 - 65 here this is an example of something
21:35 - that python
21:36 - won't be able to parse so first let's
21:39 - just do this
21:40 - to just prove to ourselves that
21:44 - that we have heights here
21:48 - um and so yeah so if we run this um we
21:51 - end up
21:52 - we we just print it out python says okay
21:55 - we've got
21:55 - heights um and this is a list and now
21:59 - if we uncomment this
22:02 - i think we don't even have to print it
22:04 - and we're going to get
22:06 - an error and yeah so it says invalid
22:08 - syntax
22:09 - and and basically what that means is um
22:13 - we did something wrong here where
22:16 - the computer doesn't understand what we
22:17 - want like it doesn't understand if these
22:19 - are separate
22:21 - things that we want to store or if
22:23 - they're all one thing with spaces in
22:25 - between it doesn't know
22:26 - you know if we put the put it in quotes
22:29 - or something like this
22:30 - then we could actually it would be fine
22:32 - because this could all be one
22:34 - object or one oops
22:37 - one string yeah one string yeah
22:41 - um but if we want them to be separate
22:45 - values in our list then we need to
22:48 - separate them with commas
22:50 - so if we want them to stay as numbers
22:52 - and we want them to be separated
22:54 - we've got to do that yeah and one thing
22:56 - to note here is that this is
22:58 - just uh the same exact thing as
23:01 - setting a variable equal to any data
23:02 - type that we've seen before so
23:04 - so far we've seen integers strings all
23:06 - that sort of stuff and so
23:08 - this is the exact same you do this in
23:10 - the exact same way you just use the
23:11 - equal sign to
23:12 - set the value of something and then you
23:15 - can also
23:15 - reset it right so we could take heights
23:17 - and we could reset it to
23:19 - just a plain integer right it doesn't
23:20 - have to always stay a list and that's
23:22 - actually something that's a little bit
23:24 - um i guess not unique to python but
23:26 - that's a aspect of python
23:28 - where something like java if you
23:31 - declared a variable as an integer you
23:33 - wouldn't then be able to switch it to a
23:35 - list or a string or whatever but in
23:36 - python
23:38 - it doesn't matter what what your
23:39 - variables is a variable can be anything
23:40 - and it can switch back and forth
23:43 - yeah that's a great point um yeah and
23:46 - there's different syntax and different
23:47 - languages like
23:49 - um i know an r for example like people
23:52 - this would work but people tend to use
23:54 - this like arrow
23:56 - um because there is some discussion
24:00 - around like
24:00 - well in function if you're like
24:03 - assigning a parameter and a function
24:04 - like this equal sign
24:06 - means something different and so like
24:08 - only having symbols mean
24:10 - one thing is like a discussion but
24:13 - um but yeah that's something that python
24:16 - is pretty
24:17 - i don't know how to describe it other
24:18 - than like lazy you're not strict about
24:20 - where
24:21 - uh the same symbol can mean multiple
24:23 - things we've already seen that a couple
24:24 - of times where plus means a bunch of
24:26 - different things depending if you're
24:27 - adding two strings together or two
24:28 - integers together or
24:30 - things like that right awesome okay
24:33 - uh let's take a look i wanna so like i
24:37 - said i i would like to
24:38 - kind of go through this not
24:41 - super quickly but um a little bit more
24:44 - quickly because i want to make sure we
24:46 - have time for some of the coding
24:47 - challenges so
24:49 - uh let's just take a look at what's in
24:51 - here
24:52 - um okay so
24:56 - i think um really quickly
24:59 - i will show you and let me just
25:02 - this is my uh
25:06 - author author hacks yeah you can't do
25:10 - that
25:10 - um so i think uh
25:15 - i'm gonna skip well briefly just mention
25:19 - one of the nice things about lists is
25:21 - that you can have multiple data types
25:24 - in a list and so um
25:28 - if you're for example interested in data
25:30 - science and you
25:31 - are learning about pandas you might have
25:34 - seen
25:35 - that one of the data structures in
25:36 - pandas is a panda series
25:38 - and um and i believe it's the case that
25:41 - within a panda series
25:42 - everything in in there so it looks a lot
25:45 - like a list but everything
25:47 - has to be all of the same type um
25:51 - and so lists are nice because you can
25:54 - store multiple different
25:55 - kinds of data in there so you could um
25:57 - it store
25:58 - both a string and a number um in a list
26:02 - yeah and so again this is something that
26:04 - in java for example java can
26:06 - if you're creating a list you have to
26:08 - declare it as a list of integers or a
26:10 - list of
26:11 - strings or something like that and
26:12 - that's fine um you know
26:14 - it just works slightly differently i
26:16 - think python's ability to store
26:18 - multiple data types in a single list is
26:21 - one of the reasons why
26:22 - again python doesn't it's a little bit
26:24 - more casual right it doesn't care about
26:26 - um it's not as strict as as java and so
26:29 - i think this is one of the reasons why
26:31 - python is a good beginners language
26:32 - because
26:33 - um you know the thing that we're doing
26:36 - doesn't really have to do with the
26:37 - objects in the list
26:38 - we're more interested in like how to
26:40 - work with lists and so just kind of like
26:41 - lowering that barrier of entry of like
26:43 - yeah it doesn't matter what's in this
26:45 - list we're just interested in
26:46 - um you know using uh playing around the
26:48 - list itself
26:50 - yeah um and then
26:53 - yeah so kind of like what i was saying
26:56 - before
26:57 - about having sort of like a
27:00 - 2d two-dimensional sort of
27:04 - setup for your data um you can't exactly
27:07 - do that with lists but one of the kind
27:09 - of
27:09 - one of the ways that people kind of work
27:12 - around that
27:13 - at least visually and if i was in a code
27:16 - editor i think it would like
27:18 - do this for me uh without having oh look
27:21 - it's doing good
27:22 - okay um sometimes people
27:26 - kind of create so like we said right you
27:29 - can put anything
27:30 - as the individual items in the list and
27:33 - so are individual values and so
27:36 - a list can go inside of a list and so in
27:39 - this case
27:40 - the items in the list are lists
27:42 - themselves
27:43 - and so uh we can kind of recreate like a
27:47 - almost like a a data set
27:51 - that you might see in pandas or
27:52 - something that has
27:54 - this two-dimensional structure where
27:56 - we've got all the names as the first
27:58 - value
27:59 - and all the heights i think as the
28:01 - second value
28:02 - and so uh so yes this is another thing
28:05 - that we could create here
28:07 - and i will print this out just for
28:11 - whoops yeah you can also go
28:14 - as deep as you want right so you can
28:16 - have lists of lists of lists or
28:18 - and so on yeah
28:22 - um nice okay so then it prints it
28:25 - doesn't print it out with the 2d kind of
28:28 - look but you can you can use the other
28:30 - thing i will say is
28:32 - um i when i'm
28:35 - coding on my own i like to have kind of
28:37 - like spacing and returns between things
28:40 - so i can see
28:41 - um what's going on and sometimes i would
28:43 - even like press enter here you know so i
28:46 - can see okay like that's the beginning
28:47 - of my list
28:49 - and then i've got all these things in
28:50 - the middle and then
28:52 - that's the end and so you can see all
28:54 - the pieces um
28:56 - and in python i think that's still fine
28:59 - right
29:00 - yeah it can still interpret that so
29:03 - however many spaces are
29:05 - uh whatever you want to add in there to
29:07 - make it easier for you to read what
29:08 - you're doing is also totally
29:10 - totally fine that's a good point though
29:12 - that often times python is particular
29:14 - about spacing but in this case
29:16 - it's not um we're oftentimes you know
29:18 - you need to have exactly two in
29:20 - you know two spaces or a tab in order to
29:21 - be inside your function or your if
29:23 - statement or something but in this case
29:25 - uh it doesn't it doesn't care about it
29:28 - cool um yeah i saw a good question in
29:32 - the chat too
29:32 - saying is there a reason why you would
29:35 - have a list in a list
29:36 - instead of a dictionary in python do you
29:39 - want to maybe address that
29:41 - briefly a dictionary in python is just
29:43 - kind of a different
29:45 - data structure right where a dictionary
29:47 - is the idea of having a key and a value
29:49 - um so you can think of you know a real
29:52 - dictionary of words where the key would
29:53 - be
29:54 - the word itself and then the value would
29:56 - be the definition of the word
29:58 - and so usually you want to use a
30:00 - dictionary when you have something that
30:01 - can benefit from that
30:02 - like a relationship right a key value
30:05 - relationship a 2d or a list of lists or
30:09 - a 2d array
30:10 - um yeah i could see situations where
30:14 - um you could probably do similar uh
30:17 - similar things to what you're doing with
30:19 - dictionaries but really i
30:21 - tend to use dictionaries when there is
30:23 - that like one-to-one relationship of key
30:25 - to value and that might not be the case
30:26 - with whatever you're doing with the 2d
30:28 - list yeah um
30:31 - okay i i skipped over zip um
30:34 - and i saw in the chat that there was a
30:36 - question what is a zip
30:38 - um i'll go over super briefly
30:42 - um which is to say basically you can
30:45 - imagine it like a zipper like if you
30:47 - have two lists
30:49 - and you want to zipper them together so
30:51 - you know how a zipper it has like
30:53 - all the prongs fit in like every other
30:56 - right that's kind of what's happening
30:58 - when you zip
30:59 - two lists together as it takes the first
31:02 - element
31:03 - first element second second third third
31:05 - fourth fourth
31:07 - and so if
31:10 - we like here
31:15 - names and dogs equals
31:19 - zip um names
31:22 - dog names and then statement might be
31:26 - kind of ugly
31:27 - yes yeah
31:31 - um if we do this oops
31:35 - what did i do um dog names
31:38 - uh let's see name dog names
31:42 - it's not defined dogs names dogs names
31:46 - nice
31:49 - yeah so now we see that it's kind of
31:51 - it's matched
31:52 - the first value in this first list jenny
31:56 - with the dog named alfont alphonse
32:00 - uh i was just googling what doc dr doggy
32:03 - dds was what reference we were making
32:05 - there
32:05 - i have no clue um okay so that's all
32:09 - we're gonna do for that
32:11 - um okay um
32:14 - empty lists super simple your list
32:17 - doesn't have to contain
32:18 - anything and so
32:21 - if we just put uh square brackets an
32:24 - opening bracket and a closing bracket
32:27 - bracket with nothing inside then we're
32:29 - going to be
32:30 - creating a an empty list and
32:34 - so then we've kind of created a space
32:36 - for some
32:37 - some information that we're going to put
32:39 - into this list
32:40 - and this happens a lot if you're kind of
32:42 - like
32:43 - storing a bunch of data that you're
32:46 - collecting over time so
32:48 - you want to start with nothing and then
32:49 - you want to add to that
32:51 - uh over a series of steps then you might
32:54 - want to start with an
32:56 - empty list nice
32:59 - um and just like that we can go from
33:03 - an empty list to a pending to a list
33:07 - so i think we saw before um
33:11 - well actually no i guess not because we
33:13 - haven't gone over lists but anyway so
33:16 - uh so if we want to add a value to a
33:19 - list
33:20 - then we can use the dot append
33:23 - method is it called a method um
33:27 - yeah uh yeah it's a list method yes
33:31 - i i have told alex before that in
33:33 - learning python the thing that confused
33:36 - me the most coming from r was the
33:37 - difference between methods and
33:39 - functions um which i i think there's
33:42 - some exercises
33:43 - maybe in the other one that's in here
33:46 - about
33:47 - um like sorting and using like
33:50 - the sort built in or um
33:53 - sorted as a function which uh
33:56 - it is kind of an interesting
33:58 - juxtaposition and clarifies
34:00 - some of the reasons some of the things
34:02 - that confuse me so hopefully we'll get
34:04 - to that
34:05 - quickly um so if you want to add some
34:08 - value
34:09 - to a list you can use dot append um
34:13 - i don't know what it's going to ask us
34:15 - to but um
34:18 - we're going let's print and then add two
34:20 - lips it looks like
34:21 - i append two lips to this list
34:24 - so uh i'm going to append
34:28 - tulips and then print it
34:31 - again um and now we see
34:34 - we started with just daisies and
34:36 - periwinkle and now we've got daisy's
34:38 - periwinkle
34:39 - and tulips so if you try so i think uh
34:43 - uh no it's not it's not a pen i was
34:45 - gonna say try doing append
34:46 - like one comma tulips i think you
34:49 - might be able this might be incorrect um
34:54 - see and then see what that comes there
34:55 - yeah okay it's not append
34:57 - there's a so i want to bring this back
34:59 - to what we were doing that language
35:01 - agnostic version of being able to draw
35:02 - i can drop things anywhere um append
35:05 - what that's doing
35:06 - is uh i think it was either the like
35:09 - third or fourth
35:10 - little uh slide from that drag and drop
35:12 - where it's always adding to the end of
35:13 - the list
35:14 - but there's a python function that can
35:16 - let you add anywhere to the list and
35:17 - automatically scoots everything else
35:18 - over one
35:19 - um it might be cool it might be i
35:21 - thought it was somewhere
35:23 - in here maybe it's not um
35:25 - [Music]
35:26 - cool yeah um but yeah so
35:30 - this will always and it append will add
35:34 - to the end of the list um
35:38 - but yes there are definitely ways to add
35:41 - things somewhere else in the list um
35:46 - cool so next
35:49 - one um this is basically just another
35:52 - way
35:52 - to do the same thing so um the same way
35:55 - that we were talking i think in the
35:58 - first
35:59 - live stream that we did about how you
36:01 - can you know use the plus sign with
36:04 - different data
36:05 - types and it has different behavior
36:09 - with lists it has this behavior
36:13 - that you can basically append
36:16 - a bunch of values onto a list another
36:19 - list all at once by kind of adding them
36:22 - together
36:22 - so i'm not really following uh this
36:25 - instruction
36:26 - because i'm being a little lazy but
36:30 - if i do um
36:33 - if i basically just add these two lists
36:37 - [Music]
36:38 - here
36:40 - and print the output you'll see that
36:43 - it's it's just added them together so
36:45 - the first one ends at lily and then
36:47 - we've added cake cookie and bread
36:50 - to this list yeah one thing to note here
36:52 - is that in that broken pieces if you try
36:55 - to add just the number four
36:56 - that's gonna break you have to add two
36:58 - lists together right yeah so
37:01 - that's a really good point um so
37:04 - this operator this plus sign only takes
37:07 - it can only figure out what to do with
37:10 - the things that you are
37:12 - putting on either side of it if they're
37:14 - the same type of thing
37:16 - so um here four is
37:19 - just it's like an int or or a float
37:22 - and then this is a list and so it can't
37:25 - add
37:25 - two different kinds of things together
37:27 - but as long as you
37:29 - put this four inside a list
37:32 - then um
37:35 - i think that should work
37:44 - oh i had so many plans of getting
37:47 - 20 minutes on this i know i was actually
37:50 - thinking do you want to show accessing
37:52 - an item and then we can jump to code
37:53 - challenges
37:54 - yeah uh cool
37:58 - range is fine yes i highly recommend
38:01 - that you go through some of these there
38:03 - are some other
38:04 - cool things on here if you want to like
38:05 - automatically create a list of all the
38:07 - numbers
38:08 - from zero to nine or something like that
38:10 - or between two numbers
38:12 - with some uh some specific jump
38:16 - between them basically we realize we're
38:18 - going very quickly through these lessons
38:20 - but the lessons will always be there for
38:21 - you to
38:22 - take and sophie and i think what's
38:24 - really valuable is to
38:25 - kind of see our thought process as we
38:27 - are solving
38:29 - code challenges um so we're going gonna
38:31 - do one quick thing that we're gonna need
38:32 - for these code challenges
38:34 - and then jump to the code challenges yes
38:37 - okay so um
38:40 - we are going to oh i think um also
38:46 - counting so selecting elements of a list
38:50 - oh and we're gonna go quickly
38:54 - uh okay so one thing you can do
38:57 - always is figure out the length of a
39:00 - list
39:01 - and so here the function len
39:04 - is going to give us the length of a list
39:06 - and that's just the number of items in a
39:08 - list so there's
39:10 - five items here so the length of this
39:13 - list is going to be
39:14 - five um
39:18 - selecting items from a list um so
39:21 - remember before when we had that picture
39:24 - of the items in the list with their
39:26 - indices
39:27 - and it started at zero and went up to
39:31 - um some number one less than the number
39:34 - of items in the list
39:36 - so uh if we create this list
39:39 - calls with ali bobcam doug and
39:42 - ellie um then ali is going to have an
39:46 - index of zero
39:47 - bob is going to have an index of one cam
39:50 - will have an index of two and so on
39:53 - and so we can then access any of those
39:56 - values by using
39:58 - that index inside square brackets
40:01 - after the name of the list so here
40:05 - if i say print
40:08 - who's your favorite character here uh
40:09 - sophie michael dwight jim pam ryan andy
40:13 - robert
40:13 - certainly not robert i mean might be
40:17 - michael
40:18 - uh yeah so if i use that the
40:21 - index of zero that's going to pull
40:24 - michael
40:24 - because he's the first value if i wanted
40:27 - to get
40:28 - jim i would use an index of two
40:33 - because he's zero one two
40:36 - um one of the things before moving on
40:39 - there sophie i think one of the things
40:40 - that's important is
40:42 - to start like combining the things that
40:43 - we know together that we know together
40:45 - and so instead of hard coding into there
40:48 - let's put in length of employees and
40:51 - think about
40:52 - what length of imp putting length of
40:54 - employees would mean
40:55 - um so actually this is a
40:59 - an interesting yeah because this is
41:02 - often a
41:03 - an error that you'll you'll see um
41:06 - index out of range so when you get an
41:09 - error like this i think that there are a
41:11 - couple of things that you
41:12 - should do to debug this and often the
41:14 - best thing to do is just like print out
41:16 - the values of your variables um to see
41:18 - what's happening
41:18 - so before we run that line of code can
41:21 - we print
41:22 - length of employees and just see what
41:23 - that value is we you know we probably
41:25 - could do that by hand by just counting
41:27 - those looks like seven people so i
41:29 - expect this to be seven
41:33 - right cool and now if we bring that line
41:35 - of code that was erroring back
41:37 - okay so now we're asking for employees
41:39 - at index seven
41:40 - and that's giving us an error and so why
41:43 - is why is that an error
41:45 - so remember that it starts at zero for
41:48 - indices so
41:49 - um it's actually for seven values the
41:51 - index is only going to go up to six so
41:54 - it's going to be
41:54 - zero one two three four
41:58 - five six nice yeah so when we try to put
42:02 - in length of employees which is equal to
42:03 - seven it errors so we could do something
42:06 - like length of employees minus one to
42:07 - get the very last one
42:09 - so hopefully give us robert yep and then
42:13 - one little trick which we probably cover
42:15 - somewhere in this lesson
42:16 - is that you can index from the end of
42:18 - the list using negative numbers so if
42:20 - you ask for just
42:22 - length of yeah sorry it's in that lesson
42:24 - uh
42:25 - right so if you ask it for just uh in
42:28 - this case list
42:29 - minus one it's going to give you e
42:31 - because that's in the narrative over
42:33 - there it's gonna give you e
42:34 - this one it's gonna give you serial
42:37 - yeah and you can do the second to last
42:39 - with minus two
42:41 - do you get an index out of bounds error
42:43 - if you go too far if
42:45 - i do like negative 10 and that goes
42:47 - obviously way past eggs
42:48 - is that also going to be yeah also an
42:50 - index out of bounds range so we went too
42:52 - far
42:53 - starting from the end yeah one of the
42:55 - interesting things
42:56 - to notice is that when you're starting
42:58 - from the other end with negative numbers
43:00 - you actually do start
43:02 - at one so there's no like negative zero
43:05 - um and so if you're starting from the
43:07 - opposite end
43:08 - you're starting at negative one um two
43:11 - from the end would be negative two
43:14 - um great question the chat from silicon
43:16 - valley he asked can we create an array
43:17 - list with multiple object types or not
43:20 - so it sounds like silicon valley is
43:23 - uh maybe knows a little bit of python a
43:25 - little bit of java where
43:27 - in java you can't have items of
43:31 - you can't have multiple data types in uh
43:33 - in a list but if you use an arraylist
43:35 - you can kind of finagle it to work that
43:37 - way
43:37 - in python just by default you can throw
43:40 - any data type that you want in a python
43:42 - list
43:44 - great cool um
43:48 - okay i think i'm going to just really
43:50 - quickly jump i think
43:53 - count is kind of cool to show this will
43:56 - get
43:56 - 10 minutes that's fine um
44:00 - so you can count the number of times if
44:03 - you have the same thing
44:04 - in a list multiple times so
44:08 - here for example the name cassie is here
44:11 - multiple times i can use votes
44:14 - dot count cassie
44:19 - to count the number of times that cassie
44:21 - shows up in this list
44:23 - and i'll again print it so we can all
44:26 - see it
44:29 - um and so here yeah cassie came up five
44:32 - times in the list
44:33 - and we could change this to anything we
44:35 - could count the number of times
44:36 - jake shows up in the list jake shows up
44:39 - nine times
44:40 - um so this is kind of a nice preview for
44:44 - what we're doing next week where this
44:46 - this count method is doing some magic
44:49 - for us
44:49 - you know we don't exactly know how it's
44:51 - working but you can think of
44:53 - count is probably going through every
44:55 - item in the list
44:56 - and checking to see if that item is
44:57 - equal to jake in this case
44:59 - and so there's some kind of like looping
45:01 - function there right where
45:03 - we don't want to just look at the first
45:05 - element we don't want to just look at
45:06 - the second element we want to look at
45:07 - each element
45:08 - individually and we could probably use a
45:10 - loop to do that so this is kind of a
45:12 - nice preview of loops which is what
45:13 - we're doing next week
45:15 - yes great point um
45:18 - and the last thing i will just show
45:21 - really quickly because i mentioned it
45:22 - before
45:23 - is that um so one thing to keep in mind
45:27 - and this is
45:28 - a kind of like i don't know how this
45:31 - extends to other languages but it's
45:32 - something that
45:33 - often trips me up is that um
45:37 - so sometimes if you use methods it
45:40 - changes
45:41 - the object right away so for example if
45:45 - i do
45:46 - if i call dot sort on this list of names
45:50 - it's going to sort the names in place so
45:52 - i don't have to do something like
45:55 - sorted names equals names.sort and
45:58 - resave it um
46:01 - but in fact actually yeah uh it looks
46:04 - like we're doing that in the workspace
46:05 - with sorted
46:07 - cities here uh where it saves it to a
46:09 - new
46:10 - array yeah you don't right so you could
46:13 - save it to a new
46:14 - name but at the same time calling.sort
46:17 - is actually already sorting cities so um
46:20 - when i run this line of code
46:22 - if i print sorted
46:26 - cities and i print
46:29 - cities um
46:35 - i don't really know i'm gonna delete
46:37 - that
46:39 - yeah so so sorted cities is actually not
46:42 - storing the new list it's storing
46:44 - the result of that method call which is
46:46 - nothing the the method
46:49 - and then returns nothing oh see even
46:52 - this is good we're learning um so yeah
46:55 - so
46:56 - if i call if i had just called
46:58 - cities.sort
46:59 - and then i said sordid cities
47:04 - equal cities then they would be the same
47:08 - right yeah um cool that's good to know
47:12 - so
47:13 - if you just save this right away it's
47:15 - it's just saving the result of the
47:17 - method
47:18 - um but then in this function if you use
47:21 - sorted and you use a function instead of
47:24 - a method
47:25 - then um then it's not sorting them in
47:28 - place so you would need to re-save
47:30 - that value and now if i said
47:34 - like sorted the references in this
47:37 - lesson are so good
47:38 - goals sorted
47:42 - games something like this and then i
47:45 - said
47:45 - print sorted games
47:49 - now sorted games is going to contain
47:52 - the um the sorted list
47:56 - yeah so this is kind of like a subtle
47:57 - distinction of this happens a lot in
47:59 - different programming languages where
48:01 - it's
48:01 - it's a question of does your method do
48:04 - something
48:04 - in place to the to the object that you
48:07 - give it
48:07 - or does it uh not change that original
48:10 - object and instead create a new thing
48:12 - that you can then
48:13 - you know assign a new variable to yes
48:17 - okay so now well we're less than 10
48:20 - minutes
48:21 - but that's okay all right i think we
48:24 - should do the last one i think the last
48:25 - one's the best
48:26 - you want to do the last one i think
48:28 - that'll be the most i think it's the
48:29 - hardest and so probably the best for us
48:31 - to
48:31 - kind of like walk through okay cool
48:34 - i'm i'm into it um okay
48:38 - so this has got a lot of different parts
48:41 - to it
48:42 - um i'm gonna read through and then talk
48:45 - through how you could kind of like
48:46 - attack each of these parts
48:48 - one at a time so it says create a
48:50 - function
48:51 - called middle element that has one
48:53 - parameter named
48:54 - lst list if there
48:58 - are an odd number of elements in list
49:01 - the function should return the middle
49:02 - element if there are an even number of
49:04 - elements the function should
49:06 - the function should return the average
49:08 - of the two
49:09 - middle elements so actually this is
49:13 - kind of like creating a function for
49:15 - median
49:16 - uh so if you you know anything about the
49:20 - median
49:21 - and uh and know how to calculate it then
49:24 - this is a function that will do it for
49:26 - you
49:26 - which is kind of cool so um
49:30 - it says write your function here uh but
49:33 - i think before we actually start writing
49:36 - a function
49:37 - what we want to do is start thinking
49:39 - about the parts that we're going to need
49:41 - in order to um in order to make this
49:44 - happen so i'm going to kind of write in
49:46 - pseudo code here
49:48 - so the first thing that we're going to
49:51 - want to
49:52 - do is there's two different behaviors
49:54 - that we want this to take
49:55 - if um if there's an even number of
49:58 - elements or an odd number of elements
50:01 - and so um the first thing we probably
50:04 - need to do
50:05 - is figure out how many elements are
50:10 - there
50:12 - in lst um and then maybe we'll save that
50:17 - that number as something like
50:20 - num elements
50:29 - then once we figure out how many
50:31 - elements there are
50:32 - we need to figure out
50:37 - if num elements
50:40 - is even or odd
50:46 - then the next thing we're gonna have to
50:47 - do is
50:49 - we're gonna have some behavior if it's
50:51 - even or behavior if it's odd
50:53 - so i think odd is the easier one so if
50:56 - it's odd
50:57 - we're gonna just take the middle element
50:59 - so if
51:02 - it's odd then
51:06 - we're going to
51:12 - uh get the index
51:17 - of the middle element
51:20 - then we're gonna use that index
51:24 - to remove to return
51:29 - the middle element yeah and as sophie's
51:33 - doing this one thing that
51:34 - i that is was is helpful for me to
51:38 - tackle a problem like this is that you
51:39 - don't necessarily have to code it in
51:41 - this order
51:42 - so when i did this problem as we were
51:44 - prepping for this
51:45 - what i did first was i said okay let me
51:47 - assume that my
51:48 - um that my the length of my list is odd
51:52 - because
51:53 - really you know uh finding out whether
51:55 - the length is even or odd is more of a
51:56 - like
51:57 - modulo uh conditional task
52:00 - and really the thing that i want to
52:02 - practice is doing stuff with my
52:04 - my list of accessing elements um trying
52:07 - to find the middle element of the list
52:08 - so it's like when i was doing this i
52:11 - kind of skipped these if statements
52:12 - first and just said okay let's assume
52:14 - that i have an odd number list let me
52:16 - see if i can get the middle element let
52:17 - me
52:17 - let me see if i can get the value of
52:18 - that middle element and then return that
52:20 - value
52:20 - and then once i prove to myself i could
52:22 - do that i said okay let me try the even
52:24 - case and then i wrote my
52:25 - my conditional nice yeah um
52:28 - i think we should should go through that
52:30 - so
52:32 - what i'm gonna do is i'm actually going
52:34 - to start
52:35 - with um with an example list because i
52:39 - always find it
52:40 - a little bit easier to kind of work with
52:42 - some
52:43 - real set of numbers and to start i'm
52:46 - going to make this
52:47 - be odd so we've got five values in here
52:52 - and so here what our function is
52:55 - supposed to do is return the middle
52:57 - number which is negative 10.
53:01 - uh i guess well it's only a median i
53:03 - guess if these are in order
53:05 - so so that would be another uh
53:08 - another i'd have to use that sort you
53:09 - guys like add sort and then
53:11 - yeah okay so
53:15 - first thing i'm going to do is i'm going
53:16 - to just print
53:18 - the number of elements in list
53:21 - and make sure that this function
53:25 - len works on my list so
53:29 - um so cool so if i print the length of
53:32 - list i get five
53:33 - um okay so now what i'm gonna do is i'm
53:36 - gonna say okay i want
53:38 - blend lists to be saved as something
53:41 - called
53:42 - num elements and that that number
53:46 - num elements is going to be five in fact
53:48 - i could have done
53:50 - yes and one thing that sophie's doing
53:53 - here is that
53:53 - uh you know as you get more and more
53:56 - comfortable with these functions
53:58 - you probably don't need to confirm for
54:00 - yourself that length is working like you
54:02 - expect it to
54:02 - but if this is your first time you know
54:04 - working with lists in python
54:06 - then it's important to do stuff like
54:07 - this so just like making sure you
54:09 - know what this variable is because if
54:12 - it's actually something different or
54:13 - different than what you expect
54:15 - then everything that you do after that
54:16 - is kind of gonna fall apart and it's
54:18 - gonna be really hard to debug
54:19 - because you know you don't know where
54:21 - you went wrong and it turns out you went
54:22 - wrong at the very top but you know it
54:24 - could be anywhere in all the other code
54:25 - that you wrote so
54:27 - like being this thorough especially when
54:28 - you're just starting out i think is
54:30 - really helpful
54:31 - nice that's a really really good point
54:34 - um yeah i this is what i do a lot like
54:38 - sometimes i try to write functions all
54:39 - at once and then i get errors and then
54:41 - this is what i end up doing as i like
54:43 - do all the parts separately and make
54:45 - sure that they look like what i expect
54:47 - yeah um okay so then what i'm gonna do
54:51 - i'm gonna skip this for right now um i'm
54:54 - gonna get the index
54:55 - of the middle element so this is this is
54:58 - odd
54:59 - so i'm i'm gonna just want the middle
55:01 - element which in this case
55:02 - is two right think about what that is
55:05 - yeah so
55:06 - here we've got zero one
55:09 - two um and len was
55:12 - five um so if we kind of think about
55:16 - like how we get from five to two
55:19 - um i think the the thing that comes to
55:22 - my mind first is it's always going to be
55:24 - like
55:25 - half of one minus the length um
55:29 - i i think it's going to be half of the
55:30 - length and then take off the remainder
55:33 - right if you divide five by two you're
55:35 - gonna get two point five and then we can
55:36 - cut off the remainder if you have seven
55:38 - divided by two you're gonna get uh what
55:40 - is that 3.5 and then we can cut off the
55:42 - 0.5 to get three
55:44 - sure is that what happens so if i coerce
55:46 - to an
55:47 - int does it go does it round down
55:50 - um yeah exactly okay so um so actually
55:54 - let's do that so
55:56 - let's say um instead if i just
56:00 - say print um int
56:03 - of lst or sorry of
56:07 - num elements
56:12 - divided by two um then
56:15 - i'm gonna get two which is what i wanted
56:18 - um and so
56:19 - inch right i should i should have done
56:22 - this in two steps but
56:23 - um so num elements divided by two was
56:26 - 2.5
56:27 - and then um if i took the int
56:31 - of that um
56:34 - we're going to get 2. so what i'm going
56:38 - to do is i'm going to save that as
56:40 - something called
56:41 - index and
56:44 - then i'm going to just make sure that
56:48 - if i print that index so if i print
56:52 - um num or if i print lst
56:56 - of width of index um so the
57:00 - the value at that index in lst
57:03 - um i can confirm that that's printing
57:06 - out negative 10.
57:07 - so that's good and then um
57:12 - i know we're running out of time but i'm
57:14 - just gonna go ahead and
57:16 - finish this up quickly
57:19 - so if it's even um
57:22 - now i'm gonna like kind of add something
57:24 - back so let's say
57:26 - we add back i'm going to make these
57:28 - easier numbers
57:30 - we add back a 1 and a 3 in the middle
57:34 - then if it's even we're going to want to
57:36 - get the
57:37 - indices of the two middle elements so
57:39 - we're gonna want
57:40 - um the indices of the one and the three
57:44 - and now we have six items if we divide
57:48 - six by two we get three
57:52 - and so three is going to be the index of
57:55 - the
57:55 - larger of the items which happens to be
57:57 - value three which is
57:59 - slightly confusing but yeah you value
58:01 - three yeah sorry
58:03 - uh i can make it five um
58:06 - and so uh so yeah so
58:10 - we're gonna need two indexes i'm gonna
58:12 - call them index
58:13 - one and i'm gonna make that the
58:17 - num elements over two
58:20 - um and let's print
58:24 - index one really fast
58:28 - oops so yep so it gives me three
58:31 - um which is the index that i wanted zero
58:33 - one two three
58:34 - is this the upper of the middle two
58:38 - items
58:39 - and then um notice that it has this
58:41 - point
58:42 - zero after it which means that it's
58:44 - actually storing this as a float instead
58:46 - of an integer
58:48 - um and so i know because i did this
58:50 - already
58:51 - and i made this mistake that i'm gonna
58:53 - need to
58:54 - put int around that so that um it
58:58 - stores it as an integer otherwise we're
59:00 - not gonna be able to use it to grab
59:01 - something from this list
59:03 - yeah good call that again that's like
59:05 - another really kind of subtle thing that
59:06 - you might not even
59:08 - realize if you do this all at once
59:09 - you'll just end up getting this error
59:11 - that's like
59:12 - list indexing doesn't work with a with a
59:14 - float or a double
59:15 - um and so you need to realize like oh
59:18 - hey these numbers that i'm usu
59:19 - using because i divided it by two that
59:22 - turned it into a double and now i can't
59:24 - use that to access the items in my list
59:26 - yes okay so now
59:30 - i'm going to uh use those two oh so i
59:33 - i created index two now which is index
59:36 - one
59:37 - minus one which is a little cheating but
59:39 - right so
59:40 - we had this index which was three
59:44 - and now we want the index of the value
59:46 - right before it
59:47 - so that's one less um
59:50 - and now we can use those to get an
59:53 - average um and so we but we actually
59:56 - want the average of these numbers
59:58 - so um so we're gonna have to pull them
60:01 - out of list
60:02 - um so we've got index one
60:06 - um so if we print that right remember
60:10 - that that's gonna be
60:12 - the value at index one which is
60:15 - equal to three so the value there is
60:18 - five
60:19 - good um and i'm going to
60:23 - take the average of that
60:26 - and the value at index 2
60:30 - and remember average is just
60:34 - the sum divided by the number of
60:37 - elements which is 2
60:39 - and i'm actually just gonna print that
60:43 - really fast to make sure that it's what
60:45 - i expect it should be
60:48 - the average of one and five which is
60:50 - good can we change our list there just
60:52 - to confirm that
60:54 - a couple of things that we can do to
60:55 - confirm here can we change those numbers
60:56 - in the list
60:57 - to be i i know we're out of time it's
61:00 - fine we uh
61:01 - we took five minutes to start so we can
61:03 - we can go a little bit late
61:04 - can we change those numbers in the
61:06 - original list to be something different
61:07 - just to confirm that we're like actually
61:09 - grabbing those two numbers
61:10 - so maybe maybe some to be an odd number
61:14 - so
61:14 - yeah zero and five or yeah so we should
61:18 - see 2.5 here
61:23 - oh um
61:27 - line 18 uh
61:31 - extra you're you're missing a
61:33 - parenthesis uh
61:36 - oh
61:41 - and then one other thing can we check to
61:43 - make sure that this works for a
61:45 - even number uh list of even even length
61:48 - but different size so we can can we add
61:50 - two more or can we get subtract two more
61:52 - just to
61:53 - see if that works because we want to
61:56 - make sure it works on things other than
61:57 - lists of uh
61:59 - you know that exact size six so now it's
62:01 - taking the average of four and five
62:02 - which is 4.5
62:05 - and then finally before we move on to
62:06 - the next one i know uh we won't actually
62:08 - implement this but
62:10 - the the instruction doesn't really tell
62:12 - you what to do if you have a list of
62:14 - like
62:14 - size zero or size two right we might be
62:18 - interested in like does this work for a
62:19 - list of size two and it might actually
62:20 - break i'm not sure but like that's stuff
62:22 - that we could
62:22 - you want to check these edge cases of
62:24 - like what if your list doesn't have
62:25 - anything what if it only has one thing
62:26 - like that sort of stuff
62:28 - yeah i think we can do that another time
62:32 - but yeah but i agree um
62:35 - okay so now what i'm gonna do is i'm
62:38 - gonna go through
62:39 - so the last piece is to kind of build
62:42 - this function
62:43 - and i guess figure out if it's even or
62:45 - odd
62:46 - um i'm going to kind of do this a simple
62:49 - like i'm going to do it for us which is
62:52 - to say
62:53 - i'm going to check if um the modulo
62:57 - of num elements is equal
63:00 - to zero um
63:04 - of the the second module so module two
63:08 - modulo two uh and actually i'll print
63:11 - that out
63:12 - here so what modulo does
63:16 - is it gives you the remainder and so
63:19 - if i do num elements modulo
63:23 - 2 um here
63:27 - it's zero because there are eight
63:30 - elements um but if there's nine
63:33 - elements then this is gonna be modulo
63:37 - one
63:37 - yeah it's a nice easy way to get even
63:40 - odd is to do
63:41 - your number mod two if it's zero that
63:43 - means it's even if it's one that means
63:45 - it's odd
63:46 - so if um num elements modulo
63:50 - two is not
63:53 - equal or is equal to one okay
63:58 - then i'm gonna do these things so now
64:00 - i'm gonna
64:01 - build this function um so we'll say
64:04 - def uh middle
64:07 - element we're gonna have to
64:11 - tab these things now we have
64:15 - if this the comments might screw up the
64:18 - tapping too we might have to get rid of
64:19 - the comments
64:20 - eventually but i don't know if that's
64:23 - the case
64:24 - i think the comments would screw it up
64:25 - but um
64:28 - and we want to return this
64:36 - and for those of you watching when i say
64:37 - the comments would screw it up the
64:38 - comments can could stay if we indented
64:41 - them but i think the indentation level
64:42 - of the comment would have to also be
64:44 - indented to the proper amount
64:45 - um and then
64:49 - else because it can really only be even
64:53 - or odd
64:54 - then we've got this stuff
64:58 - index 1 index 2.
65:02 - yep a couple of a couple of good notes
65:04 - in chat don't forget the parameter to
65:05 - the function
65:07 - we don't want to do it always on lst
65:11 - or we don't want to do it on that
65:12 - hard-coded list of 52054
65:16 - we want to do it on some input function
65:18 - and then on line 7 you have an extra
65:20 - closing parenthesis
65:23 - on line seven yes okay
65:26 - yeah cool and then we'll do this
65:33 - let's see um i think it's a
65:36 - parenthesis issue on line 11.
65:41 - oh yeah yep
65:44 - cool and so that is what is that that's
65:49 - the average of what's not
65:52 - right that's not right um
65:57 - oh it's because you have you're still
65:58 - you're on line three you're resetting
66:01 - list to be so right so it wasn't
66:04 - actually using that thing we passed into
66:05 - the parameter it was using something
66:07 - else
66:07 - so that's the average of negative 10
66:10 - plus negative four
66:11 - and if we do this there we go
66:15 - nice cool okay
66:18 - nice work sophie thank you
66:21 - um okay with that i'm going to stop this
66:26 - shared screen um
66:29 - and i will also just encourage everybody
66:32 - to
66:33 - definitely try those coding challenges
66:34 - on your own they're a really good way
66:36 - to kind of test your skills and put a
66:39 - lot of different things together and
66:41 - and kind of get the experience of like
66:42 - coding a whole thing at once and
66:45 - seeing errors and debugging things yeah
66:48 - really i think uh coding challenges like
66:50 - that are
66:52 - really really valuable and you can find
66:54 - some of those all over our platform i
66:55 - know in the python 3 course
66:57 - we have lists of big coding challenges
67:00 - they have like
67:01 - 10 in each one of those little articles
67:03 - and usually
67:04 - people are struggling with those a lot
67:05 - and so i think seeing a stream like this
67:07 - hopefully is valuable to kind of see the
67:09 - process of sophie
67:11 - walking through all those different
67:12 - steps catching all the mistakes that
67:14 - exist in various places right we made
67:16 - probably five different bugs over the
67:18 - course of
67:18 - that solving which is totally fine
67:21 - that's you know that happens to everyone
67:22 - um so yeah that's kind of one of the
67:26 - goals of this
67:27 - of this stream is to not only teach the
67:29 - syntax of python but really get
67:31 - getting you to think programmatically um
67:33 - like sophie was just doing to kind of
67:35 - like
67:35 - step through the problems and debug as
67:37 - you go um
67:39 - so yeah i really encourage you to
67:42 - check out those coding challenges
67:43 - elsewhere on our platform um
67:46 - i think that going through coding
67:48 - challenges
67:49 - is like a better use of our time than
67:51 - going through the lesson in great detail
67:53 - um for those of you who are watching
67:55 - whether it's live or
67:57 - after the fact um there's a feedback
67:59 - form
68:00 - about these streams that you can fill
68:01 - out um it's on the on all of the event
68:03 - pages i can actually drop that in the
68:05 - chat
68:06 - um we would love your feedback you can
68:08 - also tell us what you think right now in
68:09 - chat if you're here right now
68:11 - but uh yeah we would love feedback on
68:13 - this kind of stuff on what works well
68:15 - what doesn't work well what you're able
68:16 - to follow
68:17 - all that sort of stuff um so yeah if you
68:19 - go into one of the event pages on that
68:21 - event page you should
68:25 - um sorry i lost my train of thought you
68:27 - should find the feedback i'll link to
68:28 - the feedback form
68:29 - awesome and we'll be here next week as
68:31 - well
68:32 - yep well different people but we're here
68:36 - every week and there's uh i think four
68:39 - more
68:40 - so yeah i think we're eight total so
68:42 - we're halfway there
68:43 - so all right thanks sophie thank you
68:46 - guys
68:47 - all right talk to y'all good rest of
68:48 - your day everyone