00:00 - Plus hey hey everyone hi everyone
00:04 - welcome to code Academy live my name is
00:10 - Ian I'm a cracking developer here at
00:12 - Khan Academy and I'm Alex de Stassi I am
00:15 - also a curriculum developer at code CAD
00:18 - me and we're super excited for today's
00:19 - live stream yeah this is gonna be a
00:23 - great one we hope you are able to catch
00:26 - us last week as we started going through
00:28 - the visualize data with Python skill
00:31 - path with some of our colleagues and we
00:35 - are going to be spending some time today
00:36 - to continue to go through that path look
00:40 - at the content together with you and
00:42 - hopefully answer a lot of your questions
00:44 - all right so I'm gonna share my screen
00:47 - and hello to everyone saying hi in the
00:51 - chat from all over we're so glad to have
00:55 - you here so just to get started we're
00:59 - gonna navigate to the page that we'll be
01:00 - working with today so right now I'm on
01:02 - the code Kadim e dashboard and what I'm
01:05 - gonna do is I'm gonna go over to the
01:06 - catalog that's in the top left hand
01:08 - corner
01:11 - and then we're gonna choose one of these
01:13 - subjects over here and for our course
01:15 - we're gonna go into data visualization
01:18 - and we'll see that the first thing that
01:20 - comes up and the only thing is visualize
01:22 - data with Python so you're just gonna
01:25 - want to go that way we can see we have
01:27 - our path progress so if you joined us
01:29 - last time you went through introduction
01:32 - to data visualization and today we're
01:35 - actually gonna move on from that
01:37 - and we're gonna work with some Python
01:38 - syntax so you guys covered a lot of
01:41 - information I know you guys went over
01:43 - some graphs and just general information
01:46 - about data visualization with this one
01:48 - we're actually going to take a few steps
01:49 - back and we're going to learn about
01:51 - Python syntax so we can say we have
01:54 - three options here the lesson the quiz
01:56 - and the project all you want to do is
01:58 - click into the lesson learn Python
02:00 - syntax and if you weren't able to join
02:06 - us last week just to you know take a
02:11 - moment and pause and just talk a little
02:13 - bit about data visualization before we
02:14 - we jump in data visualization is this
02:17 - whole really interesting area and field
02:19 - where we think about how can we
02:23 - graphically represent data that is given
02:26 - to us story with the data and present it
02:30 - in a way that might bring out some new
02:32 - insights and some new understanding and
02:37 - to get started with that we we got to go
02:40 - back to the beginning and syntax and a
02:43 - language is a great place to do that so
02:45 - if you have no background or experience
02:47 - in you know programming or data
02:50 - visualization that's no worries at all
02:53 - you're in the right place to get started
02:56 - with your learning journey right here if
02:58 - you do have a little bit of background
02:59 - and experience you might be familiar
03:01 - with some of these concepts but always
03:03 - good to get a refresher on you know the
03:06 - foundations of things and all these
03:09 - things that we talk about today will be
03:10 - helpful throughout the entire data
03:12 - visualization journey definitely so
03:15 - again we're just gonna go back to the
03:17 - basics into the very beginning and
03:18 - that's with Python and actually Python
03:22 - was my first programming language
03:24 - so I was excited to go back through it
03:25 - so what is Python
03:28 - it's the programming languages it's a
03:30 - programming language and a programming
03:32 - language gives us the ability to
03:34 - communicate ideas in a technical setting
03:37 - so again it's giving commands so in one
03:41 - way we give commands all the time I say
03:44 - my hand I can do that and just series of
03:47 - commands that we give and we do this
03:49 - through a programming language so we do
03:52 - this by conveying our commands to the
03:55 - computer by writing them in a text file
03:57 - using a programming language so if you
04:00 - take a look at the screen in front of us
04:01 - we see here we have our code editor and
04:04 - that's where we see a little bit of code
04:05 - right here and if you look at the top
04:07 - you can see the name of the file and
04:09 - it's script dot PI the dot PI extension
04:12 - actually just tells us that this file is
04:14 - filled with Python code and when we run
04:19 - the program it just means we're telling
04:21 - the computer to read our file r dot PI
04:24 - file translate it into the set of
04:26 - operations that it understands and
04:29 - perform those actions so the first thing
04:32 - we're going to do is we're going to take
04:33 - a look at these instructions we're gonna
04:35 - change Codecademy so you can see right
04:38 - here on line one code Academy here and
04:40 - we're gonna have it say our name in the
04:43 - script to the right okay so all I'm
04:46 - gonna do is I'm gonna go into the editor
04:48 - and take back code Academy and I'm going
04:51 - to add in my name and you can see this
04:53 - line under here it says hello and
04:55 - welcome plus my name so now what we're
04:58 - gonna do now that we've completely
05:00 - written our file is we're gonna run our
05:03 - code so you can see at the bottom of the
05:05 - code editor we have that blue button
05:07 - that says run now when I click it we see
05:10 - that it processed and our output comes
05:13 - to the right of the screen so right over
05:15 - here we have our output terminal and it
05:18 - says hello and welcome Alex so again
05:22 - this was our first program and with that
05:26 - we'll just move right along into the
05:28 - next exercise ironically the first thing
05:34 - we're going to do is show how to tell
05:36 - our computer to ignore
05:37 - part of a program and what we're gonna
05:40 - do is we're gonna create something
05:42 - called a comment so a comment begins as
05:45 - we can see over here in the narrative it
05:47 - begins with a hashtag and what this does
05:51 - is any text that comes after the hashtag
05:53 - will not be run so it's just going to be
05:57 - ignored and they several uses for
05:59 - comments and I would say that's the
06:03 - difference between like good code and
06:05 - great code great code has comments so a
06:08 - few things you can do with comments is
06:10 - provide context for why something is
06:12 - written the way it is so again when you
06:16 - write code there's a very good chance
06:18 - that someone else might need to read it
06:20 - one day by writing comments you can
06:23 - document what's happening inside of your
06:25 - program that way it's readable to other
06:27 - people and that they can understand your
06:29 - code and actually if you offer yourself
06:31 - to them so a few things you can do is
06:33 - come so for example one thing to note is
06:38 - you may be writing a program and today
06:40 - you understand what it does but you
06:42 - might not remember what it does in about
06:44 - a week so it's important to have your
06:46 - comments ready and that way you know
06:49 - what you've done in the past and it'll
06:51 - just help you as you go through and
06:53 - continue write in your code so we went
06:57 - through the first two you talked about
06:58 - why something is written the way it is
07:01 - helping other people read the code and
07:03 - understand your own code quickly and
07:06 - finally you can ignore a line of code
07:08 - and see how a program will run without
07:10 - it so if you're going through code and
07:12 - you're like I'm not sure why this works
07:14 - the way it does or I think there's a
07:17 - better way to write this but I don't
07:18 - want to delete any of my other code you
07:20 - can use a comment so if you write code
07:22 - inside of a comment
07:23 - remember that code will be ignored okay
07:29 - so looking at our instructions one
07:32 - second great documentation is an
07:35 - important step in programming write a
07:37 - comment describing the first program you
07:39 - want to write so all I'm gonna do is in
07:42 - my code editor you're gonna write that
07:44 - hashtag and that's going to begin our
07:46 - comment so you can see that any code
07:48 - that I write after it is going to be in
07:50 - that gray
07:50 - out text so that'll let you know that
07:52 - you're working with a comment so let's
07:54 - in the first program I want to write is
07:56 - just as prints hello world to the output
08:04 - terminal okay
08:06 - so right there we have our first comment
08:09 - and if you're ever confused about one of
08:12 - the instructions that you see in a
08:14 - lesson be sure to check out this hint
08:16 - here so where it says stop get a hint
08:19 - with the yellow background if you just
08:21 - click that you'll get a hint to help you
08:23 - along with your code so you can see
08:26 - start your comment with the the hashtag
08:29 - symbol and write the rest of your
08:30 - comment afterwards now Alex let's say I
08:34 - am writing some code and I have a lot of
08:38 - feelings about it because I'm really
08:39 - excited about this piece of code that
08:41 - I'm writing and I start putting in some
08:43 - comments to explain what I'm doing and I
08:45 - have like a big paragraph a chunk of
08:49 - information about about my code is that
08:51 - something that I'd maybe what I do in
08:54 - this case or do you think maybe I should
08:55 - change that filter down a little bit
08:57 - make it a little more kind of precise to
09:00 - what's going on with the code that's a
09:04 - good question umm I think you definitely
09:07 - want to be as specific as possible when
09:10 - writing out your comment but what do you
09:13 - think with that what would you answer
09:14 - for your own question yeah so sometimes
09:18 - I think I will write a lot of
09:20 - information okay
09:22 - what's gonna be most clear for for
09:25 - either myself when I'm looking at this
09:26 - later on or for someone else down the
09:29 - line who's taking a look at this code so
09:32 - I don't want to over like inundate them
09:33 - with with too much information so I kind
09:35 - of just don't think okay what context do
09:38 - they need to understand what is going on
09:40 - here there I'm not by their side to 222
09:43 - them
09:43 - so I don't try and go too overboard but
09:46 - just keep it informative and to the
09:48 - point no I completely agree and actually
09:51 - one of the things I like to do when I
09:53 - write code I like to use comments just
09:55 - to create a little header for it
09:58 - so with me if I'm writing out a program
10:00 - so let's say I'll start off and
10:02 - just say like the file name so in this
10:07 - case we have script PI then I'll say who
10:11 - the author is just in case you need to
10:13 - get in contact with them so I'll just
10:15 - put my own name and then um usually I'll
10:20 - add a date and this is the date that I
10:22 - started but if I edit my code later on
10:24 - in the future I'll change the date
10:26 - around so that it says maybe last edited
10:28 - or just something along those lines so
10:31 - today's the May 26 2010 finally I'll
10:36 - just write out the purpose of the
10:37 - program and I'll just take this code
10:41 - this is comment right here and put it
10:44 - back and that this just gives an
10:45 - overview of what I want the entire
10:48 - program to do so it doesn't have to go
10:51 - into too much detail just a general idea
10:53 - so if someone looks at your program they
10:55 - think okay this is what the program does
10:57 - and then as I go through the code I'll
11:01 - try to write it above the code array
11:02 - just to give a simple explanation but
11:05 - just like Ian said you want to be very
11:06 - concise and specific and try to just get
11:10 - to the point great so I'm going to run
11:13 - this and we can see that this worked
11:15 - because we got that little green mark
11:17 - over there so now we can continue on
11:20 - with our code one actual question I want
11:23 - to field quickly from from the chat that
11:26 - was seeing both on on Facebook point out
11:29 - Alex is how we can write multi-line
11:35 - comments in Python and this is a really
11:40 - helpful tool if you don't necessarily
11:42 - want to be using that pound or hashtag
11:45 - symbol on every single so I don't know
11:50 - Alex if you have experience writing
11:53 - multi-line comments and Python before I
11:57 - actually don't think I do what is the
12:00 - right syntax for that yeah and you know
12:03 - this is one of those things that can
12:05 - often change in between language and
12:06 - language and sometimes when I'm
12:08 - switching you know maybe from Python to
12:10 - our JavaScript I'm like hey what's the
12:13 - what's the right syntax so
12:16 - in Python if you go and put a set of
12:20 - triple quotes right at the beginning so
12:24 - you do one two three quotes in a row and
12:29 - then that will kind of begin your
12:33 - multi-line comment and then if you do
12:35 - another set of them on the bottom that
12:38 - will n your multi-line comment so you
12:39 - can start putting in any text you want
12:40 - in between Oh interesting
12:47 - yeah so let's say maybe you had a
12:50 - function and that's something that we'll
12:53 - be discussing in a future lesson a piece
12:58 - of code that you encapsulated with a
13:00 - name so that you can kind of repeat the
13:02 - same code whenever you need it but if
13:05 - you wanted to explain what maybe that
13:06 - function is doing you can add a
13:08 - multi-line comment right beforehand that
13:11 - says hey I given this information and
13:13 - then I output this information and so
13:16 - yeah it might be useful to have more
13:18 - than one line there yeah that see I did
13:21 - not realize that we're all learning
13:23 - something new super helpful was a rebel
13:27 - in there and again you can see when I
13:30 - run this we don't get an error so you
13:32 - can see that it's just ignoring all of
13:34 - the text that we're writing all of our
13:36 - comments it will not have an effect on
13:38 - the program that you're writing okay no
13:43 - that was great thanks Ian cool so moving
13:47 - right along now we'll talk about print
13:50 - and print statements so basically what
13:54 - we're going to be learning in this
13:55 - particular exercise is how to get our
13:59 - program to communicate and so this is
14:03 - often what so basically what we see in
14:06 - our output terminal that's what our
14:08 - comes what our computer program is
14:11 - actually communicating to us so what
14:15 - we're going to talk about is how we can
14:18 - do that and in Python it's because we
14:21 - use something called a print statement
14:22 - which is used by the syntax print so the
14:27 - print function is
14:28 - used to tell a computer to say something
14:31 - to talk and when we write messages in
14:34 - our print statements they should be held
14:36 - inside double quotes so let's take a
14:38 - look at this example right over here so
14:40 - we have a quote from Mary Shelley's
14:42 - Frankenstein and all it says is print we
14:46 - have an open parenthesis then we have a
14:49 - chunk of text that's held together in
14:51 - double quotes and then we have a closing
14:54 - parenthesis so that's basically all we
14:57 - need to know about our print statements
14:59 - and what it looks like so in the in the
15:02 - above example we direct our program to
15:05 - print an excerpt excerpt from a notable
15:07 - book the printed words that appears the
15:09 - result of the print statement are
15:11 - referred to as output and so the output
15:14 - of that specific program will be that
15:16 - exact text that we saw there's something
15:18 - I work in my soul which I do not
15:20 - understand um and that's basically it
15:24 - with the print statement and our first
15:26 - instruction is to print the
15:28 - distinguished greeting hello world um
15:31 - often if you if you're not too familiar
15:34 - with programming often the first thing
15:36 - you do when you're working with a new
15:38 - programming language is trying to just
15:40 - print out hello world so to write this
15:44 - out all I'm going to do is first print
15:46 - and we can see that the text changed as
15:48 - soon as I finished writing print and
15:51 - that's because print is a keyword it's
15:54 - known as it's known to Python as a
15:56 - keyword that does something so we have
16:00 - our print and then I'm going to open up
16:02 - those parentheses so we have a pair of
16:05 - parentheses and now we're going to write
16:07 - something in there so again so I'm going
16:10 - to do is I'm actually going to give
16:11 - ourselves some errors for a bit so just
16:14 - stay with me so if I just wrote print
16:17 - hello world no parentheses if I run this
16:21 - we'll get an error and we'll talk about
16:23 - errors a little bit more in this session
16:25 - and it says syntax error missing
16:28 - parentheses in call to print did you
16:30 - mean print hello world so you can see
16:32 - it's telling us that if we want this to
16:34 - work we need those parentheses so I'm
16:37 - gonna fix that all right and then the
16:41 - other thing I'll do we're gonna get
16:42 - one more error guys is I'm gonna take
16:45 - these quotes out and we're just gonna
16:46 - leave hello world here oh so now we have
16:50 - a different syntax error invalid syntax
16:51 - and that's just because it the software
16:54 - has no idea what this hello world text
16:57 - is and that's because we need to have it
17:00 - in a string which we'll what about but
17:02 - basically if we're gonna print text
17:04 - you're going to want to put it in double
17:07 - quotes and that's important so now I'm
17:09 - gonna run this program again and we can
17:12 - see that one we did it right because we
17:14 - got that green check over under the
17:15 - instructions and two we see hello world
17:18 - in our output no Alex let's say I've
17:23 - been coding elsewhere on my own before
17:27 - I've seen it out in the world and I was
17:31 - able to go ahead and make a print
17:34 - statement without those parentheses what
17:38 - what might be going on in that case
17:40 - thank you for bringing that up so that's
17:42 - actually one of the big differences
17:43 - between Python 2 and Python 3 um
17:47 - basically when we say python 2 and
17:49 - python 3 those are just the versions of
17:52 - Python so I noticed that when I first
17:56 - started programming I didn't need those
17:59 - parentheses I could just write print
18:01 - hello world with the without the
18:03 - parentheses just the quotes and we were
18:05 - good to go after the release of Python 3
18:09 - that changed and you started to have to
18:11 - include that those parentheses as part
18:13 - of the syntax awesome thanks right does
18:20 - that sum it up in basically we have a
18:24 - new new syntax in in Python 3 they just
18:27 - use those parentheses I'm super
18:30 - frustrating after the initial change
18:32 - lovely changes always always hard right
18:36 - changing from one version language to
18:38 - another or chain languages but it's
18:41 - always also fun to overcome those
18:43 - obstacles
18:44 - figure out what's going on and learn
18:46 - something along the way yeah and to me
18:49 - now now that I've used this syntax are
18:52 - so long would be weird for me not to
18:54 - include
18:56 - all right just like when one the apps on
19:00 - your phone gets updated to a new
19:02 - interface you know the first day you're
19:05 - like Oh two days later
19:11 - exactly you just gotta go with the
19:13 - change I just want to jump to the chat
19:16 - really quick I'm gonna say thanks to
19:18 - Adam for pointing out that actually when
19:21 - we are doing those multi-line comments
19:25 - what we were calling was on comments in
19:26 - in Python those aren't actually
19:28 - docstrings
19:30 - which are a little bit different but
19:34 - they essentially enable us to create
19:36 - something like a multi-line comment
19:39 - thanks for calling that out Adam I know
19:45 - we also have some people in the Chad who
19:47 - are saying you know I'm really
19:49 - interesting data visualization are are
19:51 - we going to get there and this is just
19:54 - like we were mentioning the first step
19:57 - in a series where we're gonna be
19:59 - building up to creating visualizations
20:01 - and you know we're starting out here
20:04 - with syntax which is really a core
20:06 - foundation of programming and this is
20:09 - gonna be really helpful for us when we
20:11 - move down the line in order for us to
20:14 - create those visualizations that I know
20:16 - you're so yeah we'll get there in time
20:21 - yes definitely
20:23 - um and it'll be great when we get there
20:26 - and just like I'm saying this is just
20:28 - building the foundation so we can get to
20:30 - data visualization and everything will
20:32 - be understandable we hope ok so moving
20:37 - right along strings so you may have
20:39 - heard me call something the text that we
20:41 - were working with before a string in the
20:43 - last exercise and so computer
20:46 - programmers refer to blocks of text as
20:48 - strings in our last exercise we created
20:51 - the string hello world and a string is
20:54 - either surrounded by double quotes or
20:56 - single quotes it doesn't matter which
20:58 - ones we use as long as we are consistent
21:01 - let me just refresh this there we go
21:07 - okay um and we'll also
21:10 - talk about this a little bit more but
21:11 - strings are also considered a datatype
21:14 - and you'll you'll know what that means
21:16 - in a bit this is just a hint so what
21:19 - we're gonna do is we're going to print
21:20 - our name using the print command okay so
21:24 - just like before we're going to get out
21:26 - that keyword print type that into our
21:29 - script
21:29 - pi open up those parentheses and then
21:33 - I'm just going to write in my name and
21:36 - right now I'm using double quotes so
21:38 - here we go I'm gonna run this and we can
21:41 - see that this was correct and we did it
21:44 - correctly okay so if your print
21:47 - statement uses double quotes change them
21:49 - to single quotes or vice versa
21:51 - okay so let's change this so one I'm
21:54 - actually we're gonna get an error I'm
21:56 - doing this on purpose what if I just
21:58 - leave it what if we say forget
22:00 - consistency and run our code well we'll
22:04 - get an error so that's why you need to
22:06 - stay consistent if you change it up you
22:09 - will just get an error so we'll fix this
22:12 - just by making sure we have the
22:14 - consistent single quotes on both sides
22:16 - of our text and when I run this you can
22:21 - see that it works now and Alec's prints
22:24 - out to the output terminal and then one
22:29 - thing just to know um if you're going
22:31 - through this and you're like there's no
22:33 - way I will remember all of this
22:35 - information you're throwing at me don't
22:37 - worry about it it takes a while for it
22:39 - to really get ingrained in your head but
22:41 - one great way to keep reviewing this
22:43 - material is taking a look at our cheat
22:46 - sheets so you can see right under the
22:48 - instructions where it says concept
22:49 - review if you want to quickly review
22:51 - some of the concepts you've been
22:52 - learning take a look at this materials
22:54 - cheat sheet so we can see this is all
22:57 - about Python syntax and it just goes
23:00 - over all the different things will go
23:02 - over through this lesson it's just a
23:03 - quick way for a quick review and it's a
23:06 - really hopeful resource so again if
23:08 - after this course you're like wow I
23:10 - don't want to forget all this stuff that
23:11 - I learned this cheat sheet might be
23:13 - perfect for you geez our really really
23:17 - great one of the things I love about the
23:20 - Khan Academy platform
23:21 - some people printer man
23:23 - some people leave them up in another tab
23:25 - lots of cool things you can do it them
23:27 - but always a great resource to have
23:29 - mm-hmm okay
23:31 - so we'll just keep moving right along
23:35 - variables programming languages over a
23:39 - method of storing data for reuse so if
23:43 - there's a piece of data that we want to
23:46 - reuse in our program whether it's a
23:48 - greeting or a date or a user ID or just
23:52 - a very important number that we're going
23:54 - to be revisiting again and again
23:57 - throughout our program we can use a
23:59 - variable and when we have a variable
24:01 - we're basically able to name a piece of
24:04 - data that we can store and call whenever
24:07 - we want in our program so they're super
24:10 - useful and a very important part of
24:12 - programming so um if we want to do this
24:17 - we can create a variable which can store
24:19 - a value and in Python we assign
24:21 - variables by using that equal sign or
24:24 - the assignment operator so you can see
24:26 - right over here we have an example and
24:28 - it just says message string equals hello
24:31 - there so the name of our variable in
24:33 - this example is message underscore
24:36 - string and then the value that this
24:38 - variable is holding is the text hello
24:41 - there and now we can see right over here
24:45 - we can print out our variable and when
24:47 - we print out the variable the output
24:49 - will be the value that the variable
24:52 - holds okay so in that above example we
24:58 - stored the message hello there in a
25:00 - variable called message string variables
25:02 - can't have spaces or symbols in their
25:05 - name under the other than an underscore
25:07 - so that's important to know we can't
25:09 - have a variable called seven eight nine
25:11 - message that won't work
25:13 - we can't have one called message seven
25:15 - eight nine so just make sure we
25:17 - understand that difference let's see so
25:22 - oh other things with variables is when
25:24 - you name a variable try to have it be
25:26 - related to the data that is holding um
25:29 - having a variable called random and it
25:33 - stores your birthday probably not the
25:36 - best name for it
25:37 - but if you want to store your birthday
25:39 - maybe names the variable birthday so
25:41 - always try to keep that in mind because
25:43 - something important with coding is the
25:45 - readability of your program before we
25:47 - discussed how comments are important and
25:49 - how they can help us document our code
25:51 - so that it's more readable but proper
25:53 - variable namings that's another top one
25:56 - least fun things that sometimes happens
25:59 - in programming is I maybe worked on a
26:03 - file and maybe a few weeks later I come
26:06 - back and I see these variable names and
26:09 - there's something like num1 num2 val one
26:12 - gal two and I'm like wait what what were
26:16 - these values representing more the
26:17 - numbers so those descriptive names can
26:20 - be helpful for yourself
26:22 - absolutely cuz again you might regard a
26:25 - program and the date you wrote it you're
26:27 - like yes all of this makes sense
26:28 - and then you revisit it like the next
26:30 - day or like a week or two later you're
26:31 - like oh my goodness what on earth is
26:34 - this so readability it's good for others
26:37 - and it's good for you great so it's no
26:43 - coincidence that we call these creatures
26:45 - variables if the context of your program
26:47 - changes we can update a variable but
26:50 - perform the same logical process on it
26:53 - so let's take a look at this code
26:56 - example we have over here so first we
26:58 - have a greeting and we know that it's a
27:00 - greeting because there's a comment
27:01 - telling us that and we have a variable
27:03 - message string that has the value of
27:05 - hello there and we print it and it
27:07 - prints hello there to the outlet
27:09 - terminal underneath we have convinces
27:11 - farewell so what we have is the same
27:14 - exact variable message string but we
27:17 - changed the value so once this goes
27:20 - through the value of message string is
27:23 - no longer hello there it's been updated
27:25 - too hasta LaVista and when we print it
27:28 - hasta LaVista will be the one will be
27:31 - the text that is outputted so that's
27:34 - just something you want to know we can
27:35 - change the value of our variables
27:39 - okay so let's take a look at our
27:42 - instructions update the variable meal to
27:46 - reflect each meal of the day before we
27:48 - print it so if you look at script dot PI
27:50 - we have this little program um and what
27:53 - you notice is meal comes out several
27:55 - times so first we have our breakfast
27:58 - which is an English muffin and when we
28:00 - print it it'll say breakfast English
28:02 - muffin but now let's see let's update
28:04 - our meal to be lunch so I had a peanut
28:11 - butter jelly sandwich for lunch I always
28:22 - love a good PB&J sandwich thank you it
28:24 - was great and no dinner um so let's see
28:29 - so it doesn't say that we're gonna have
28:30 - to update the meal to be dinner so what
28:32 - I'm gonna do is I'm going to write meal
28:34 - I'm going to use that equal sign that
28:37 - assignment operator we're gonna change
28:39 - the value of meal and for dinner I'm
28:41 - going to have pizza today okay so this
28:46 - is our program and now I'm gonna run it
28:48 - and let's see what comes at net output
28:49 - terminal so you can see right over here
28:52 - breakfast and English muffin lunch
28:54 - peanut butter jelly sandwich and dinner
28:56 - pizza so we were able to output all
28:59 - these different values however it was
29:02 - the same variable that we used we just
29:04 - changed the value associated to the
29:06 - variable great okay so we move right
29:15 - along with this errands or we jump into
29:18 - the errors exercise which i think is
29:23 - actually one of my favorite exercises in
29:25 - this lesson in the comments I see Adam
29:30 - saying that he thinks it's good to think
29:34 - about concepts instead of maybe syntax
29:38 - or there's more importance of concepts
29:39 - that just syntax and maybe why are we a
29:42 - team of syntax here and I would say I
29:44 - agree with you that concepts are the
29:47 - most important thing in programming they
29:51 - kind of go through
29:54 - everything that you are learning and you
29:57 - know if you understand the concepts it
29:59 - can often make the syntax easier
30:01 - sometimes but I also think it is key to
30:05 - have a good foundation in the syntax of
30:09 - language and that also ends up helping
30:12 - you when it comes to understanding
30:14 - concepts of maybe more difficult things
30:15 - or different aspects of the language and
30:18 - you are also able to you know get a
30:21 - better feel for four concepts when that
30:24 - base syntax is kind of in your tool belt
30:27 - and you're not spending all your time
30:30 - thinking about okay you know it's just
30:33 - the right way for me to do something of
30:35 - course you can always also go and look
30:38 - up syntax online and you know the chichi
30:41 - for example is a really great place to
30:42 - go and check the Python syntax um if you
30:46 - know you want to go look at it um but I
30:47 - do agree with you that concepts are are
30:50 - just as important if not more but it's
30:52 - always good to get that foundation
30:53 - syntax
30:55 - great great points Thanks okay so moving
31:01 - on to errors so humans are prone to
31:04 - making mistakes and we're also typically
31:07 - in charge of creating Peter programming
31:09 - computer programs to compensate
31:12 - programming language attempt to
31:13 - understand and explain the errors made
31:15 - in their programs so Python refers to
31:19 - these mistakes as errors and they'll
31:21 - point to the location where the error
31:23 - occurred with the whole uptick character
31:25 - when programs throw errors that we
31:27 - didn't expect to encounter we call those
31:29 - bugs programmers called the process of
31:32 - updating the program so that it no
31:34 - longer produces unexpected errors as
31:36 - debugging so there are two common errors
31:39 - that we can encounter while writing
31:41 - python while writing code in Python and
31:44 - that's a syntax error and a name error
31:47 - so a syntax error means there's
31:49 - something wrong with the way your
31:50 - programming is written maybe the
31:52 - punctuation there doesn't belong there
31:55 - maybe the commands not where it's
31:57 - expected to be or even a missing
32:00 - parentheses can all trigger something of
32:01 - a syntax error now a name error occurs
32:05 - when the Python interpreter sees a
32:06 - word that it doesn't recognize so this
32:09 - could be code that contains something
32:10 - that looks like a very blue but was
32:12 - never defined on that would throw a name
32:15 - error so let's see our instructions so
32:19 - first off the code that we see in script
32:21 - pine they're gonna throw us some errors
32:23 - so you might encounter a syntax error if
32:26 - you open a string with double quotes and
32:28 - end it with a single quote which we saw
32:30 - earlier on in this exercise Oh in this
32:34 - live stream so we're gonna update the
32:37 - string so that it starts and ends with
32:39 - the same punctuation so we can see on
32:41 - line one this string has mismatched
32:43 - quotation marks so instead of the single
32:46 - quotes let's have them both be double
32:50 - quotes so we're gonna change this okay
32:54 - so this will fix the error in our first
32:57 - line and then in the next one this is a
33:00 - name error if we try to print a single
33:02 - word string but fail put any quotes
33:05 - around it so python expects the word of
33:07 - your string to be defined elsewhere but
33:09 - can't find where it's defined so we can
33:12 - add quotes to either side of the string
33:13 - to squash this bug and so I'm just gonna
33:16 - run this as is and we're gonna take a
33:17 - look at that error really quick so once
33:20 - again we can see the first one prints
33:22 - out this message has mismatched quote
33:24 - marks but then that second line that
33:27 - print abracadabra that's going to throw
33:29 - us an error so you can see file script
33:31 - up pie line too and that's where it is
33:34 - script up on line two
33:37 - we can see even the very line of code
33:40 - that it's having an issue with we have a
33:41 - name error and the name abracadabra is
33:44 - not defined so to fix this we're just
33:47 - gonna add some quotes so I'll do single
33:49 - quotes for this one okay so if i run
33:53 - this there we go so now we have no more
33:57 - errors and we can continue on with our
33:59 - program um I also often find that when
34:02 - you get an error it's very frustrating
34:03 - and you may feel like you have to give
34:05 - up or perhaps coding isn't for you
34:08 - errors are such a common part of
34:11 - programming so it's just about being
34:14 - able to read them and get getting
34:16 - through them and problem solving so if
34:18 - you feel frustrated
34:20 - valid but definitely don't give up and
34:22 - keep trying to fix your code okay I was
34:26 - like I think America's as a sign that I
34:28 - am exploring something new with my code
34:31 - that I haven't tried before um just
34:34 - because if if you're writing code and
34:36 - you're you aren't seeing areas coming up
34:38 - maybe you're you know writing code
34:40 - that's very similar to what you did
34:41 - before on the same topic which is also a
34:43 - great but but when I'm looking for that
34:45 - challenge or to try something new or as
34:48 - will will surely be coming my way too so
34:51 - I always try and think that it's like a
34:53 - good sign hmm I often learned the most
34:57 - when I'm debugging my code that's when I
34:59 - figure out what it does like that's when
35:01 - I have the best idea of what micro my
35:03 - program is doing okay so now we're gonna
35:08 - talk a little bit about numbers so
35:10 - computers can understand much more than
35:12 - just strings of text so python has a few
35:15 - numeric data types um and it has
35:18 - multiple ways of storing numbers which
35:20 - one you use depends on your intended
35:22 - purpose for the number you are saving so
35:24 - the first one we'll talk about our
35:26 - integers in Python they are sometimes
35:28 - known as int and that's when you're
35:31 - using whole numbers so no decimal points
35:34 - and it contains all accounting numbers
35:36 - and as well as their negative
35:38 - counterparts so we can see with some of
35:40 - these examples one two three integers
35:43 - negative one negative two negative three
35:45 - also integers um so some examples of
35:51 - when you would use an integer is if you
35:53 - were counting the number of people in
35:54 - the room number of jellybeans in a jar
35:56 - the number of keys on a keyboard
35:59 - um again those are the examples of when
36:01 - you would want to use an integer now the
36:04 - other data type that we could use is
36:06 - something called a floating-point number
36:07 - or float and the values hold held by
36:12 - these data types are ones with decimal
36:15 - points and so this is good for if you're
36:17 - trying to save a data point that has
36:20 - fractions in it so for example if you
36:23 - were measuring the length of your
36:25 - bedroom wall calculating the average
36:27 - test score of a seventh grade class or
36:29 - storing a baseball players batting
36:31 - average for the 1998
36:33 - that was a very specific example but
36:37 - those are good times of when you would
36:38 - use a float so numbers can be assigned
36:41 - to variables just like they we code with
36:43 - strings and we can use them literally in
36:46 - a program so let's take a look at these
36:48 - two examples here we have our variable
36:51 - called an int and it holds the value two
36:54 - and you can see that it's a whole number
36:56 - no decimal point so it's an integer and
36:58 - then we have the second one that's
37:00 - called a flow and that has the value of
37:02 - 2.1 and because it has a decimal we know
37:06 - it's a floating-point number and right
37:09 - over here we can see that we can just
37:10 - print and we can use these values in our
37:12 - program it's right over here we have
37:14 - print and in plus three so it takes that
37:17 - value over here to plus three and then
37:20 - it prints out that final value of five
37:24 - okay so one thing to know is floating
37:27 - point numbers can behave in some
37:29 - unexpected ways due to how computers
37:31 - store them and that if you want more
37:33 - information about this definitely review
37:35 - pythons documentation on floating point
37:38 - limitations so that link is there for
37:40 - you if you're already in the sexercise
37:42 - and you recommend that you check it out
37:44 - okay so let's take a look at these
37:46 - instructions a recent movie going
37:48 - experience has you excited to publish a
37:50 - review you rush out of the cinema and
37:52 - hastily begin programming to create your
37:55 - movie review website the big screens
37:57 - greatest scenes decided by a machine
38:01 - create the following variables and the
38:04 - sine integer numbers to them so release
38:06 - year and runtime so we're gonna do that
38:09 - so release year and we'll have that be
38:13 - 20/20 you can see no decimal so it's an
38:16 - integer all right and the other one is
38:19 - at runtime and that's going to be this
38:23 - say it's 120 minutes so we'll leave that
38:25 - value at 120 so let's run this code and
38:29 - you can see that all is good so we can
38:32 - continue on now create the variable
38:35 - rating out of 10 and assign it a float
38:37 - number between 1 and 10 ok so let's do
38:41 - that was it a good movie or was it
38:44 - okay oh I'm gonna say it was not great
38:50 - movie it's a not great movie um it got a
38:56 - 3.7 mm-hmm it's not great the critics
39:02 - have decided so I run this and so let's
39:07 - see it gave us an error so let's see
39:09 - what the problem of that is oh so my
39:13 - issue was I need my variable wrong
39:15 - instead of writing out ten I actually
39:17 - wrote out ten tn okay that's on me so
39:21 - who we just fixed this little error we
39:23 - run this and now we are good to go okay
39:26 - so I'm actually gonna stop sharing for a
39:28 - moment and I'm gonna let Ian take over
39:30 - for the next section awesome thanks so
39:33 - much Alex
39:36 - and so just what I could lead jump to
39:38 - the chat I see someone asking about why
39:42 - why are we talking about
39:43 - maybe Python three if there is Python
39:46 - 3.8 out and kind of just questions about
39:50 - different types of versions of Python
39:52 - and so um when typically people will say
39:57 - Python 2 or Python 3 there's a bunch of
40:00 - different versions of those two releases
40:02 - um but when people won't necessarily say
40:05 - like Python 3.8 or 3.7 3.6 so just say
40:08 - oh yeah we're working in Python 3 there
40:10 - are minimal differences or there are
40:13 - differences between those different
40:14 - pieces but generally they're similar
40:16 - enough that you can just refer to them
40:18 - as you know Python 3 or if you're
40:22 - working and the older version of Python
40:23 - you would say Python - I'm so we are
40:25 - working here today in Python 3
40:30 - great question
40:32 - all right I'm going to go ahead and
40:35 - share my screen and we will keep running
40:38 - through um yeah blessed
40:49 - awesome and so we were now moving over
40:55 - to exercise eight where we are talking
40:58 - about calculations and so now that we've
41:02 - discussed variables and you know
41:06 - different types of numbers instant
41:09 - floats
41:09 - um we can do different things with
41:12 - variables that are storing those
41:14 - integers and floats to do the same kinds
41:17 - of calculations that we would maybe do
41:20 - on our calculator if we were in math
41:23 - class or I'm on a sheet of paper um you
41:26 - know if we're you know just trying to
41:29 - maybe do the tip at a restaurant or in
41:32 - other places in life and we are able to
41:35 - use in Python the same kind of
41:37 - operations that you would do anywhere
41:42 - else
41:42 - um so the ones we will talk about here
41:45 - are addition subtraction multiplication
41:47 - and division so we can see here in the
41:52 - code block that we can just go ahead and
41:54 - take integers or floats and directly use
41:58 - these different operation symbols to
42:01 - make certain calculations so we wanted
42:04 - to do 500 73-74 plus one well can just
42:09 - go ahead and use the minus symbol and
42:11 - the plus symbol in order to subtract 573
42:15 - and some before and then add one and if
42:18 - we put that inside of a print statement
42:19 - we will get 500 now similarly if we go
42:26 - ahead and sorry just refreshing my page
42:29 - there um if we wanted to do a
42:33 - multiplication we'll use the star symbol
42:35 - to represent that um and if we print 25
42:39 - times 2
42:39 - it's going to give us the multiplication
42:41 - listing numbers which is 50 similarly we
42:44 - can do division and we see here that
42:47 - when we are doing this division
42:50 - getting an answer of two and you'll see
42:55 - also specifically that we're getting an
42:56 - answer not just two which would maybe be
42:58 - an integer but we're getting 2.0 which
43:02 - represents a float and so when we are
43:05 - doing division in Python we will
43:08 - automatically convert that answer to a
43:12 - float so if we put in two integers as
43:16 - inputs to our division so we do ten
43:18 - divided by five it's going to spit out
43:21 - to the float version of 2 which is 2.0
43:23 - instead of just the integer which is to
43:26 - this differed from previous versions of
43:28 - Python so if you were working in Python
43:30 - 2 you would see a different answer their
43:36 - division can have its own error which if
43:40 - you are a math person you might have
43:42 - encountered before which is division by
43:44 - zero so that is something that we do not
43:48 - want to do and bold cause and so I'm
43:55 - just gonna restore my workspace here um
43:58 - and we'll go and do this checkpoint so
44:01 - here it says let's print out the result
44:03 - of the equation 25 times 68 plus 13
44:07 - divided by 28 so I'm gonna go and create
44:10 - my print statement and inside of here I
44:14 - will just do 25 use the star symbol from
44:17 - application 2 times 68 I will then add
44:21 - 13 with the plus symbol and then I will
44:25 - use the forward slash to do division and
44:29 - divided by 28 and when I run this code
44:34 - we get out mmm let me do this
44:39 - just to make sure night we're working
44:40 - and there we get a check great we get
44:43 - 1700 point four six four to eight I'm so
44:48 - we're getting out this float here so
44:51 - we're getting all of the decimal places
44:53 - I so very similar to how you would work
44:57 - on a calculator now we also are able to
45:07 - take advantage of variables which we
45:11 - talked about earlier in order to do
45:13 - calculations and so we don't necessarily
45:14 - need to just use the actual integers and
45:17 - floats to do calculations we can assign
45:21 - those values to variables and then use
45:24 - those more meaningful variables that we
45:26 - were talking about giving good names to
45:27 - to do calculations that might make more
45:31 - sense in a certain context so we can see
45:36 - here that we're creating a variable
45:37 - coffee price and we're setting it equal
45:40 - to one point five zero so we're saying
45:43 - here we went to the store maybe the
45:46 - price of a coffee is a dollar fifty if
45:49 - we're in the u.s. or 1.5 euros or five
45:54 - pesos whatever your denomination is so
45:59 - and then let's say we wanted to get four
46:03 - coffees at the cafe so we're picking up
46:06 - some coffee for our friends so gonna do
46:09 - some work we're gonna create a variable
46:12 - number of coffees and set it equal to
46:15 - four and we're using this equal sign or
46:18 - the assignment operator to assign a
46:20 - value of four to that variable number of
46:24 - coffees we are able to do some
46:30 - calculations now on those variables I'm
46:33 - using those operators that we were
46:35 - talking about in the previous exercise
46:38 - so if we wanted to see what was the
46:40 - total cost of making this purchase we
46:44 - would do the coffee price times the
46:46 - number of coffees and we can put that
46:48 - side of print statement and we would get
46:49 - six one point five times four
46:53 - when five mean the coffee price and for
46:55 - being the number of coffee is to get six
46:58 - we are also able to go ahead and update
47:01 - the price or update the value of
47:03 - whatever variables so let's say the
47:06 - coffee shop besides to raise the price
47:09 - of coffee two to two dollars to euros
47:13 - whatever denomination we're working in
47:16 - now they're they're trying to copy that
47:19 - Starbucks um raising the price strategy
47:23 - and we can now go ahead and make the
47:27 - same calculation as before do coffee
47:29 - price x number of coffees and we will
47:31 - now get eight since our coffee price is
47:33 - now - but the number of coffees is still
47:35 - four and two times 4 is equal to 8 so
47:40 - let's jump over to the checkpoint and we
47:43 - see here we decide to get into cruelty
47:45 - um trying to get a little creative maybe
47:48 - we're in quarantine and this is a new
47:50 - school that we picked up so calculate
47:53 - the number of squares you'll need for
47:55 - your first quilt let's create two
47:57 - variables but with and quickly let's
48:00 - make this first quote eight squares wide
48:02 - and 12 squares walk so I will do quilt
48:05 - which is equal to eight using that
48:10 - assignment operator and then I will do
48:12 - quilt liens is equal to twelve can run
48:20 - my code here and now we are asked to
48:22 - print out the number of squares you'll
48:24 - need to create the quote so since the
48:26 - width is eight and the length is 12 I'm
48:28 - going to go ahead and multiply those two
48:30 - numbers together to get the total number
48:34 - of squares would you print statement
48:38 - because we went for that inside that
48:39 - print and then how would you well with
48:43 - times quilt
48:50 - and now what I could have done in the
48:53 - side this Prince Amon is just wrote
48:54 - print 8 times 12 but let's say it's you
48:58 - know a few weeks from now or I pass this
49:02 - file over to someone else that I'm
49:03 - working with a sign you know this close
49:05 - business and they're looking at this
49:08 - code and while I know that eight and
49:10 - twelve represent the pool within the
49:12 - pool Lane they might not know that they
49:14 - might not have that contact so by
49:15 - creating these variables with
49:17 - descriptive names and then using those
49:19 - in the calculations and make sense to
49:21 - other people besides myself what is
49:24 - going on here in the code now we see it
49:28 - turns out that the code required a
49:29 - little more material than we have on
49:31 - hand let's only make the quilt eight
49:33 - squares long how many squares what you
49:35 - need for this quilt instead so it seems
49:38 - like we're changing that lane from 12 to
49:41 - 8 so I can just go ahead and update the
49:44 - value of my claim variable and now if I
49:48 - rerun my code we just redid that
49:51 - calculation now with our new code name
49:55 - value and now we can see that it's 64
49:57 - squares so we did a reduction from when
50:01 - the potlatch was 12 and then actually we
50:05 - do have a question so chancellor was
50:07 - asking if we'll be covering for loops
50:09 - and while loops today and actually the
50:11 - answer to that is no because we only
50:13 - have about nine minutes left of today's
50:15 - stream however the content is out there
50:19 - and we'll possibly get that to that in
50:22 - the next one of the next few live
50:25 - streams or if you want to on your own
50:28 - just go through the course or learn
50:30 - Python course this could be super
50:32 - helpful no that's that's a great
50:35 - question so whoa today cover um one more
50:38 - exercise right here um and then we will
50:42 - part for today just so that we um you
50:46 - aren't going over time all right um you
50:49 - know continuing on from here we will be
50:51 - having other sessions that will pick up
50:53 - on this content and help you get further
50:56 - through the visualized data with pythons
50:59 - copass I'm sure we'll talk about that in
51:00 - just just a second but great question
51:03 - ah awesome
51:06 - so for for maybe the last thing that
51:08 - we'll cover today our exponents and so
51:11 - if you've you know done done math class
51:14 - outside of programming um you might have
51:16 - run into exponents beforehand but they
51:19 - are a really useful tool in in math that
51:22 - allows us to multiply numbers together
51:27 - repeatedly really easily and so in
51:33 - Python the way that we can you do
51:38 - exponents is by using the asterisk or
51:43 - the star symbol about writing it twice
51:44 - so we'll use the asterisk once for
51:47 - multiplication and then twice for
51:50 - exponents so for example if we wanted to
51:55 - raise two to the tenth power
51:57 - and so just to go over that really
52:00 - quickly what 2 to the tenth power is
52:04 - saying is let's multiply 2 by itself ten
52:08 - times so there'd be 2 times 2 times 2
52:10 - times 2 10 times so to do that we would
52:15 - do two and then two asterisks and dine
52:20 - and if you wanted to do let's say 8
52:22 - squared which is and for any squared
52:25 - value it's supposed to find that one
52:26 - number by itself we would do eight
52:29 - double asterisk and then two and then if
52:34 - we want to do nine cubed which is the
52:36 - same thing as saying nine to the third
52:37 - power we would do nine double asterisk
52:40 - and then 3 we're also able to do
52:44 - fractional exponents which you know some
52:47 - of you might know or think of square
52:49 - roots or different roots and so for
52:54 - example the square root is same as an
52:56 - exponent that is 0.5 and we could do
52:58 - four double asterisk than 0.5 and we'll
53:05 - quickly do a checkpoint and then we will
53:06 - wrap up for today so we really like how
53:09 - the square of protein less exercise came
53:11 - out and decided that all cults um we
53:13 - make for now on will be square use the
53:15 - exponent operator
53:16 - print out how many square eyes we'll
53:18 - need for a six by six seven by seven and
53:20 - eight by eight quilt um so what we do
53:23 - here is four squares we will take the
53:28 - the the length of one side so let's say
53:31 - in this case at six we will use our
53:33 - double asterisk and that's if you want
53:35 - to square it we are going to use the
53:37 - second power I could do the same even
53:39 - here for seven I'll do seven double
53:42 - asterisk two for seven squaring and I
53:46 - will do eight double a service squared
53:49 - if you print that we will see we get 36
53:51 - 49 and 64 um we would love to continue
53:56 - more for today diving into Python syntax
53:59 - um but we are running short on time so
54:03 - there are some things that we want to
54:05 - leave you with before before we go um so
54:10 - first just wanna say thank you so much
54:11 - for joining us here today to chat about
54:16 - Python syntax I'm I know a lot of you
54:18 - are really excited about data
54:19 - visualization um and this is a
54:21 - foundation and in order for us to get to
54:24 - create our own visualizations um so we
54:28 - will be getting there in time we really
54:31 - recommend that you continue to go
54:33 - through the Python syntax course there's
54:36 - a few more exercises here that are
54:38 - really great for setting that foundation
54:39 - um a few other things that we would like
54:44 - to mention um there will be another
54:46 - stream on Thursday featuring both myself
54:49 - and Alex a firmer cook adding me
54:52 - pro subscribers where we will get some
54:55 - time to talk and more one-on-one way we
55:00 - can go through some content related to
55:01 - Python syntax and data visualization but
55:04 - we're also open to chatting with all of
55:07 - you about different questions that you
55:10 - have maybe related to Python syntax tree
55:12 - database or just having some time to to
55:15 - chat in in a smaller environment um so
55:17 - we really hope that you'll join us for
55:19 - that um and we just want to quickly show
55:22 - you how you can go ahead and find that
55:26 - stream
55:27 - so you go to Khan Academy calm
55:32 - and we'll let it load um and if we
55:37 - scroll down from the home page of code
55:40 - Academy we can see do to do to do if we
55:45 - scroll down towards the bottom we have
55:47 - our community academy section which is
55:49 - great for in general finding out
55:51 - information about events that are
55:55 - happening places that you can
55:56 - communicate with other code Academy
55:58 - learners um and really find an online
56:00 - community to help you in your journey of
56:02 - learning to code and so if you go to
56:04 - this event section right here you can
56:06 - click this register button and that will
56:09 - bring you to a page with all of our
56:10 - events so you can see that we have event
56:13 - on Thursday May 28th for our pro members
56:18 - to come join a Q&A I'm visualizing it
56:21 - with Python myself Alex and you know if
56:26 - you aren't a pro member you know there
56:29 - are other events that will be continuing
56:31 - to happen for you as well next week we
56:34 - will have the famous Kenny and the
56:37 - famous Alex different nominee are
56:43 - actually really amazing and great but
56:47 - you will be getting a different Alex
56:49 - Alex Coons and Kenny who will be joining
56:53 - everyone for the next phase and going
56:57 - through content of visualized data with
56:59 - Python skill path and so they will be
57:02 - working on the functions module and kind
57:06 - of picking up where we left off um so we
57:10 - really recommend tuning in for that and
57:13 - they will also have another Q&A session
57:15 - there for them as well next week so go
57:19 - to this page register for these events
57:21 - we are looking forward to seeing you
57:24 - there and to continuing to interact with
57:26 - you all
57:27 - while maybe you're at home I'm just
57:31 - trying to help everyone out with
57:33 - learning more about va's with you all
57:39 - also if you're interested in learning
57:42 - more about our live streams and being
57:44 - notified be sure
57:45 - subscribe to our YouTube page or follow
57:48 - us on Twitch and that way you can get
57:50 - notifications about more upcoming live
57:52 - streams definitely yeah well I can
57:56 - subscribe button to follow we were
58:00 - excited to interact with you and so we
58:02 - hope to see you in those future sessions
58:06 - um thank you all so much for joining us
58:10 - today again my name is Ian and I'm Alex
58:14 - thank you so much no conscience it's
58:17 - time to do with you hope you all learned
58:18 - something and we hope to see you soon