00:02 - foreign
00:03 - [Music]
00:07 - welcome to live coding with codecademy
00:10 - I'm Dan an engineer at code academy and
00:12 - today we'll be working on adding
00:14 - persistence to an existing project with
00:16 - Ruby on Rails we'll be working on a
00:18 - project that's available in the code
00:20 - academy learning environment to All
00:22 - codecademy Pro users you can find out
00:25 - more about codecademypro in the video
00:26 - description below but if you're not a
00:29 - code academy Pro user don't worry we're
00:31 - going to be working through the project
00:32 - in Sublime Text and using the terminal
00:35 - on a Mac computer so if you don't have
00:38 - Pro don't worry you can still follow
00:40 - along at home I will also be using Code
00:43 - created from the last live coding
00:45 - project if you weren't if you didn't
00:47 - watch the last live coding project don't
00:49 - worry we have the solution to that
00:51 - project up on GitHub we have the link to
00:54 - that in the description and we'll be
00:56 - using code from this as we work through
00:58 - adding persistence to this project
01:02 - um I'll expect that you know a little
01:03 - HTML JavaScript CSS and rails don't
01:06 - worry though you can still gain a lot
01:09 - just by watching and seeing how things
01:11 - come together and are built
01:14 - um before we start if at any point you
01:16 - feel like you're falling behind don't
01:18 - worry you can pause the video and resume
01:20 - at any point and we're going to keep the
01:22 - video up afterwards so you can replay it
01:25 - whenever you need to and if you do get
01:27 - confused you should check out our learn
01:29 - rails course on codeacademy.com the link
01:32 - to that's also in the description and
01:34 - it'll teach you even more about Ruby on
01:35 - Rails and what I'll go through today and
01:37 - it'll provide a little more background
01:38 - too
01:39 - so the project we're going to be working
01:41 - on is threadly and if you were here last
01:45 - week this is what the project looked
01:46 - like we have a text box where you can
01:48 - share your thoughts and so you could
01:50 - type something like hello
01:52 - and when you post the comment goes down
01:54 - below you may have noticed last week if
01:57 - we refresh the page we lose the comments
01:59 - and that's because we didn't add any
02:01 - kind of persistence to the project and
02:03 - so this week we're going to work on
02:05 - adding persistence to the project by
02:07 - using Ruby on Rails
02:09 - and if you're not familiar with rails
02:11 - rails is a web application framework for
02:13 - Ruby it makes creating web applications
02:15 - really easy by providing developers with
02:18 - a lot of tools to get started in fact
02:20 - the code academy website itself is built
02:23 - with Ruby on Rails so you can use it for
02:25 - introductory projects and you can also
02:27 - use it for really large scale
02:29 - applications
02:30 - so to get started we're going to create
02:32 - a new project and the way we create a
02:34 - new project is we're going to go into
02:36 - our terminal
02:38 - and we're going to type rails new and so
02:42 - rails new will create our new project
02:43 - and we're going to name it threadly
02:47 - and there'll be a lot of output here
02:50 - and so if you look in our code editor
02:53 - now we have a ton of new files and
02:58 - we're not going to look at all of them
02:59 - today we're going to focus on a few I'm
03:01 - going to CD and go into that directory
03:05 - that was just created
03:09 - spell it correctly this time
03:11 - and once we're in our directory we can
03:13 - start our application by running rails
03:15 - server so this will start up a web
03:17 - server
03:21 - and if we look in the output we see that
03:24 - our rails application is now starting
03:26 - and running at this address so I'm going
03:29 - to go into my browser and Go to http
03:34 - localhost 3000.
03:37 - and when I go there we'll see that we
03:39 - have my application running and so this
03:42 - is the default rails application output
03:45 - it's you'll get pretty familiar with
03:47 - this if you make a lot of applications
03:51 - um so today we're going to work on
03:52 - adding that database persistence to this
03:56 - application and the way we're going to
03:57 - do that is by following What's called
03:59 - the MVC pattern in rails and MVC stands
04:02 - for model view controller and it's a
04:05 - technique for composing applications
04:07 - into three different components the
04:09 - three components the model is where we
04:11 - handle all our business logic and
04:13 - database interaction and then our view
04:15 - is used to handle how we present that
04:18 - data to the user and our controller is
04:21 - what we use to pass data between views
04:24 - and models I'm going to start off by
04:26 - creating a model and we're going to do
04:28 - that from the command line again and the
04:30 - way we exit our rail server is by
04:32 - pressing Ctrl and C at the same time so
04:34 - that'll stop it so now if I go back and
04:36 - try to view my page now you'll see it's
04:39 - I'll get an error because it's not
04:40 - running
04:41 - so now when I go to I'll generate my
04:44 - model by typing rails generate
04:48 - and I'll say I want to generate a model
04:52 - and the model I want to make is post
04:55 - and that's what we're going to call
04:56 - those comments
04:58 - so I hit enter
05:03 - and we'll see that a couple files got
05:05 - created we see that we have this file DB
05:07 - migrate with a timestamp create post and
05:11 - we have this app model post.rb those are
05:13 - the two that we're going to focus on
05:15 - today and so I'm going to go and show
05:18 - you those two files so if we look in
05:20 - create posts that's in app
05:22 - sorry DB migrate
05:26 - and this is what's called a migration
05:27 - file so this describes how you want your
05:31 - data to look like in a database and so
05:33 - we see that we're creating a table
05:34 - called post and we're adding a field
05:37 - called timestamps
05:39 - we look back at our application we have
05:41 - the only thing that we want to save to
05:43 - the database is a single field and the
05:45 - field we're saving is called a comment
05:48 - so we can go ahead and add a comment to
05:51 - that table
05:53 - by inside of this create table block we
05:56 - can say t
05:57 - string and this says create something a
06:01 - column in our database called string and
06:03 - now we need to give it a name so we'll
06:05 - use comment
06:09 - so now that we've updated our migration
06:11 - file we need to update our database to
06:14 - have that new column in it and the way
06:16 - we do that is with the break migrate
06:19 - command
06:21 - so we run rake DB colon migrate
06:28 - we'll see that we we migrated our
06:31 - database and we added our new column
06:36 - so now I'm going to show how you can use
06:38 - the rails console to interact with the
06:40 - model so to get into the rails console
06:42 - we just type rails console
06:48 - and inside of the Rails console we can
06:51 - type any Ruby code we want so we can do
06:53 - things like two plus two
06:56 - and see that it equals four but we can
06:58 - also interact with the model we just
07:00 - created so we can get to that with post
07:03 - and so
07:04 - this is our object that represents posts
07:06 - in our database and so if we want to
07:08 - create a new post we can say something
07:10 - like new post
07:12 - and we can set it equal to post dot new
07:16 - so now we've created a new post object
07:18 - but we haven't saved it to the database
07:20 - yet and before we save it to the
07:22 - database we want to modify our comments
07:24 - so we can save
07:26 - new posts
07:29 - and we want to change the comment
07:31 - property so we can do comment
07:33 - and we can set it equal to something
07:35 - like hello there
07:40 - and now once we've updated the comment
07:42 - for our post we can save it by doing new
07:45 - post
07:46 - dot save
07:48 - we'll see that
07:49 - we ran it when we called new post.save
07:53 - this database query got ran and this is
07:55 - what really makes one of the things that
07:57 - makes rails really quick for development
08:00 - is you don't have to really have a
08:02 - really good understanding of how MySQL
08:05 - or SQL light works or any database
08:08 - because rails will handle a lot of those
08:10 - interactions for you
08:13 - so now that we have our model created
08:15 - and we kind of have a basic
08:17 - understanding of how to use it we need
08:18 - to work on creating a controller and a
08:21 - view in order to display that data for
08:22 - the user so the first thing we're going
08:25 - to do is create our controller and to
08:27 - create our controller we're going to
08:28 - exit out of the Rails console again
08:31 - and we're going to run another one of
08:32 - those generate commands and you'll run a
08:35 - lot of these in rails and this is called
08:37 - scaffolding and it's one of the ways
08:40 - that rails makes development really easy
08:42 - so we'll run the command rails generate
08:45 - and this time we're going to generate a
08:47 - controller
08:48 - and we're going to name it posts
08:52 - and again we'll see that rails has a lot
08:54 - of creating a bunch of new files the one
08:56 - that we are going to look at is in the
08:59 - app controllers directory and it's the
09:02 - post controller
09:05 - so this will start off empty and there's
09:08 - not much here and so it's our job to add
09:10 - the logic to interact with our database
09:12 - and to provide data to our view in here
09:18 - and so to before we do that we have to
09:20 - have a way for our application to get to
09:22 - our controller and in rails that's done
09:24 - with what's called routes
09:27 - and um
09:29 - what a route does is when you get a
09:31 - request for a URL to the web browser so
09:33 - if I go to localhost
09:35 - 3000 slash posts
09:39 - this request will go to rails and it'll
09:41 - go to the router and the router will
09:43 - look at all the the routes you've
09:45 - defined and it'll
09:47 - okay it'll dispatch it to one of your
09:49 - controllers and we can see all the
09:51 - routes that we have in our application
09:52 - by running the rake routes command in
09:55 - our terminal
10:00 - and rails will tell us that we don't
10:01 - have any routes currently defined and
10:03 - that we should add some to config slash
10:06 - routes that RB so that's going to be
10:08 - what we're going to do now so we're
10:09 - going to open config routes.rb
10:13 - you'll see there's a lot of code in here
10:15 - already and these are all comments that
10:17 - just describe the different ways you can
10:19 - interact with routes
10:21 - the routes the first route we're going
10:24 - to create is one that's going to create
10:25 - actually several routes and we're going
10:29 - to do this by using a resource route so
10:31 - we'll type resource and the resource
10:34 - that we want to create routes for is our
10:37 - posts
10:41 - so now if we go back to our terminal and
10:44 - we look at what routes Exist by running
10:46 - rake routes again
10:49 - we'll see that rails is automatically
10:51 - generated a few routes and this is
10:54 - what's the router generator called crud
10:56 - routes which stand for create retrieve
10:59 - update and Destroy and um
11:02 - you'll see we have our create route we
11:05 - have our edit route we have our retrieve
11:08 - route which is show and we have update
11:10 - and Destroy routes and we're going to
11:12 - focus on our crate route and we're going
11:16 - to also create one additional route for
11:18 - viewing all of our posts together
11:22 - so the new Route One new route we're
11:25 - also going to create is we want to
11:26 - create a new route for the home page and
11:28 - the way you change what the home page
11:30 - route is is by using the root route
11:33 - so we're going to type root and then
11:35 - we're going to do our controller which
11:37 - is post
11:40 - and the action we want to do is index
11:43 - now we're going to go ahead and create
11:45 - that index action
11:48 - and so this is our
11:50 - controller and right here is our action
11:54 - if we go back into app controllers post
11:57 - controller we're going to create a new
11:59 - action in here and the way you create a
12:02 - new action is by creating a function
12:03 - inside of the post controller class
12:06 - and our first action is going to be
12:08 - called index
12:13 - so if we look back on our last
12:17 - readily app we see that we we want to
12:19 - get all the posts that exist and we want
12:21 - to display them and we also want to
12:23 - create
12:24 - have the ability to create a new
12:27 - post with a new comment
12:29 - so to retrieve all the routes we can
12:32 - create a new variable and we're going to
12:34 - call it posts and we're going to use the
12:36 - at symbol in front of it and this allows
12:39 - us to pass variables from our controller
12:42 - into the view that we're going to create
12:43 - afterwards
12:45 - so we'll do posts equal and we'll do
12:47 - posts
12:50 - dot all and so this will retrieve all
12:52 - the post objects that we have and assign
12:55 - it to the variable post
12:57 - and the one additional thing we want to
12:59 - do is create a new post that we'll be
13:01 - able to use for our form and our page so
13:05 - we'll create a new post we'll call Post
13:07 - new
13:08 - we'll do a new post that sounds better
13:13 - and we'll assign it to post dot no
13:16 - now we have our posts and we have our
13:18 - new posts so the next step is to create
13:21 - a view so that we can view all these
13:24 - posts and create a form there
13:26 - and we're going to create our view in
13:29 - the app views post folder
13:34 - we'll create a new file and we're going
13:36 - to call it
13:37 - index.html.erb
13:42 - ium
13:45 - yeah
14:09 - it's saving in the wrong directory so in
14:11 - posts we're going to create
14:13 - index
14:15 - .html.erb
14:18 - and in here is where we're going to take
14:20 - our code from the last threadly project
14:22 - and we're going to put it inside of our
14:25 - Erb template and Erb is um stands for
14:29 - Ruby template and so now we'll go into
14:32 - our index.html from the threadly project
14:34 - and again this code is linked to in the
14:37 - description of the YouTube video
14:41 - and the code we're going to copy is all
14:42 - this code inside of this main div
14:50 - and we'll paste it in
14:52 - and so now we're going to start a rail
14:54 - server and see what happens when we go
14:56 - to a localhost 3000.
14:59 - foreign
15:04 - and we'll refresh the page
15:10 - and you see that we now have some code
15:12 - here we have our it's not styled yet but
15:15 - we have the same code we had before
15:17 - but we don't really want these to be
15:20 - the same all the time we want to be able
15:22 - to modify the comments
15:24 - so the way we're going to do that is
15:25 - we're going to use our post variable
15:27 - that we have before and we're going to
15:29 - iterate over them in a loop and for each
15:31 - one we're going to create a new Li for
15:33 - it
15:35 - the way we do that is with an each Loop
15:38 - and we'll go into our comments UL
15:44 - and we're going to delete what we have
15:46 - already
15:49 - and we're going to create a new Erb
15:51 - block and the way we do that is with the
15:54 - less than and then the percent sign
15:57 - and we're going to close this
15:59 - and inside we're going to do a loop over
16:01 - our post we do our our post variable and
16:04 - then we want to Loop over each of them
16:06 - and for each of them we're going to do
16:09 - a block
16:12 - and this is a Ruby block syntax if
16:15 - you're not familiar with this you should
16:17 - check out the code Kennedy course on
16:19 - Ruby
16:24 - and so what's going to happen is any
16:27 - code we type inside of this block is
16:29 - going to get executed ever for every
16:31 - post that we have in our database and
16:34 - what we want to do is create an Li and
16:36 - output it on the page for each of these
16:38 - elements so we can create our Li
16:42 - and inside of our Ally we're going to
16:44 - Output the text of the comment and we do
16:46 - that with another Erb block but this
16:48 - time we do percent equals and the
16:51 - percent equals is Erb syntax that
16:54 - outputs whatever's inside of it onto the
16:56 - page and the thing we want to Output is
16:59 - the comment of the post and we can do
17:01 - that with P dot comment
17:06 - so I'm going to save the file and I can
17:08 - refresh the page and we'll see that now
17:10 - instead of those default comments that
17:12 - we had in the page before we have our
17:15 - comment from the database and we can
17:17 - even go back into our rails console and
17:20 - I'll Ctrl C out of the server and go
17:22 - back into rails console
17:25 - and I'll do the same thing I did before
17:27 - to create a post so I can create another
17:29 - new post
17:36 - and I'll set the comment
17:39 - equal to
17:46 - and I'll save my comment
17:49 - or my post
17:51 - and I can exit the rails console and we
17:54 - see this just like before we have a
17:55 - database insert statement
17:59 - and now I'll start my rail server again
18:07 - and when I refresh the page we have our
18:10 - new comment that was there that we just
18:12 - inserted into the database and if I
18:13 - refresh the page it's still there again
18:15 - and so our comment
18:17 - from the database are always there
18:21 - so the next thing we have to do is
18:23 - actually allow the users to save these
18:25 - comments
18:26 - so to do that we're going to update our
18:28 - existing form and use rails form helpers
18:31 - so that we can
18:34 - um
18:35 - have rails handled the saving of our
18:38 - form
18:39 - so we're going to replace our formative
18:43 - that we have our form element and the
18:46 - closing form element
18:48 - and we're going to replace it with an
18:50 - Erb block
18:53 - and we're going to use the rails helper
18:55 - form four
18:57 - and the form 4 helper is a function and
19:01 - you need to pass it the object you want
19:03 - to create a form for and in this case we
19:06 - want to create it for our new post that
19:08 - we created inside of our controller and
19:10 - if we look back at our controller we see
19:12 - that that new post was just post.new and
19:16 - it's the same thing we did in the
19:17 - console
19:19 - so back in our template
19:22 - for the new post we want to do we're
19:23 - going to do another do block
19:25 - and we'll use F this time and this F
19:28 - represents our form object
19:32 - and in place of where we had our slash
19:35 - form element before we're going to use
19:37 - another Erb block and we're going to end
19:39 - the Ruby block
19:43 - now if we look at our if we look at the
19:45 - existing form that we had in the
19:47 - inspector
19:48 - we'll see that the Syntax for the form
19:50 - just says form class equals form but I'm
19:53 - going to refresh the page now that I've
19:54 - used the rails form helper
19:59 - and if you notice we don't actually have
20:02 - any output here and that's because we
20:04 - forgot to add we forgot to tell it to
20:06 - actually output anything because we
20:08 - didn't use the equal sign in the Erb
20:10 - syntax to instruct it that we want to
20:14 - actually output the form for
20:16 - so now if I refresh we'll see that we
20:18 - have a new form and if I inspect it this
20:21 - time we'll see that rails has added some
20:23 - new stuff to it so we see that we now
20:25 - have an action that goes to slash posts
20:28 - and the method that it uses is post
20:32 - and if we look back at the routes that
20:34 - we have
20:40 - we'll see that the post method for post
20:43 - corresponds to
20:45 - a is being routed to a controller post
20:48 - and to an action called create so now in
20:51 - order for us to save it we need to
20:53 - implement that create action inside of
20:55 - our post controller
20:57 - so let's go back into our post
20:58 - controller and we're going to create a
21:00 - new method called create
21:04 - foreign so this is the action that will
21:06 - get called when we hit that post URL
21:10 - with a post HTTP method
21:15 - so we're going to use another rails
21:17 - convenience method and the convenience
21:19 - thing we're going to use is called
21:21 - params and the params will allow us to
21:24 - validate that the data that was passed
21:26 - to our
21:28 - method was correct and I'm going to
21:30 - create a new another method and I'm
21:32 - going to create a private method
21:33 - and use private methods so that you
21:36 - can't route to them any method that's
21:39 - public on a rails action controller will
21:43 - be is considered one that you can route
21:46 - a URL to so we're going to use private
21:48 - because we don't want this to actually
21:50 - be a method that can handle a request
21:54 - and we're going to call it post params
22:00 - and we're going to use another rails
22:02 - helper called params
22:04 - and with params we're going to require
22:06 - that
22:08 - we have a post
22:10 - and with our post we're going to permit
22:12 - one field to be modified and we're going
22:15 - to allow the comment to be modified
22:20 - and so now when we call this function
22:21 - rails we'll look at our parameters that
22:23 - we have that we pass to the route and
22:26 - it'll make sure that there's one for
22:27 - post and it'll make sure that the only
22:31 - parameter that exists for that is common
22:35 - now just like we did on the terminal
22:37 - we're going to modify our create route
22:40 - so that we actually create the post that
22:42 - we've retrieve
22:43 - so we'll create a new variable and we'll
22:45 - call it new post
22:48 - and we'll assign our new post to
22:50 - post.new but this time we're going to
22:52 - pass it parameters that we get from
22:55 - calling our post params function
22:59 - and so this will get our parameters that
23:01 - we passed and pass them into the new
23:03 - post object
23:05 - and once we have our new post we're
23:07 - going to call new post dot save
23:11 - and once the post is say we want to
23:13 - redirect the user back to the home page
23:15 - and so we redirect them back to the home
23:17 - page with the redirect to method
23:21 - and when you have redirect 2 you need to
23:24 - pass it a URL to direct them to and
23:27 - rails has helpers for any route that
23:29 - exists on your page so you can see the
23:32 - helper we have root for going back to
23:35 - our home page so we can get the URL to
23:37 - that by calling root and then underscore
23:40 - path
23:41 - and this will generate a URL that goes
23:43 - back to the home page
23:46 - and the last thing we have to modify is
23:49 - we need to update our
23:51 - HTML so that our input fields are also
23:55 - rails
23:56 - input fields
23:58 - and we do this by using form helpers
24:01 - again
24:03 - and we'll I'll first we can go ahead and
24:06 - delete this input and
24:09 - we're going to make another Erb block
24:10 - and inside of it we're going to do F dot
24:14 - text field and so this will create a
24:15 - text field that's set up to
24:18 - be submitted by this form
24:21 - and we're going to pass it comment which
24:23 - is the name of that field
24:25 - and just like before we can set
24:27 - placeholder text on it
24:32 - and we're going to set the placeholder
24:33 - text to share your thoughts
24:41 - and we're going to do the same thing for
24:42 - our submit input
24:45 - and instead of using the
24:49 - F text field method we're going to use f
24:51 - dot submit
24:55 - and we're going to pass we're going to
24:56 - call the field host and we're going to
25:00 - give it a class of BTN so that we can
25:02 - style it like we did before
25:08 - so now when I refresh my page
25:11 - first I have to remember to start my
25:12 - rail server
25:20 - and when I refresh the page
25:23 - see that we have our form here it looks
25:26 - just like before but if we inspect the
25:27 - element we see that
25:29 - our parameters now called post comment
25:32 - whereas before it was just called
25:35 - comment and this is goes back to the
25:38 - post params method that we defined so
25:40 - when we submit that form we're going to
25:42 - have it's going to see that we have a
25:44 - post because that's the post parameter
25:46 - and it's going to see that there's a
25:48 - comment field because we have that
25:50 - comment right there
25:53 - and this is all handled by rails so it
25:56 - makes it it's really really helpful it
25:58 - makes you able to develop really quickly
26:00 - so now that we have our create method
26:02 - and we have our template updated to have
26:07 - use the rails form helpers we can go
26:09 - ahead and see if we can share our
26:10 - thoughts and we'll
26:16 - and when we post we see that we now have
26:19 - our new we just our new comment down
26:23 - below and if we refresh the page it's
26:25 - still there
26:27 - and so now we've handled all the
26:29 - persistence parts so the next step is
26:31 - we're going to want to take what we had
26:32 - before which is this really nice looking
26:34 - form and we're going to want to do the
26:36 - same thing in rails and this is just as
26:39 - simple if you know how to do CSS in
26:41 - static websites doing it in rails is
26:44 - just as easy
26:46 - so we're going to go back to our
26:48 - threadly project that we did before and
26:51 - we're going to go into our
26:54 - styles.css file
26:56 - and we can actually copy just all the
26:58 - styles that we wrote before
27:01 - and we can just go into our rails
27:04 - application and we'll go into the app
27:07 - assets folder and inside of there
27:09 - there's a folder called style sheets and
27:12 - we're going to put all these Styles we
27:13 - can just paste them into the
27:15 - application.css file
27:23 - okay
27:26 - and now if I refresh the page
27:29 - we'll see that our styles are here but a
27:32 - little bit different and that's because
27:33 - before we were using bootstrap so we
27:36 - also have to include our bootstrap CSS
27:37 - and if we want our fonts to look like it
27:39 - did before we should also include that
27:41 - Google style sheet font so if we look
27:44 - back at our
27:46 - index.html in our solution code
27:49 - and again the solution code is just in
27:51 - the description
27:54 - we have we see that we added these two
27:56 - links for our style sheet files for the
27:58 - Google font and for the bootstrap CDN
28:01 - so we can actually copy those and we're
28:03 - going to be able to put those into rails
28:05 - and the place we're going to put that is
28:07 - in a layout so if you look in the app
28:10 - views layouts folder you'll see we have
28:12 - this one called application.html.erb
28:16 - and a layout file is what decorates
28:21 - different controllers so when a
28:23 - controller and action pair get run they
28:25 - return some code and the code that they
28:28 - return is HTML and whatever HTML they
28:32 - return
28:33 - will get placed Inside by this yield
28:36 - function so when we call this yield
28:37 - function
28:39 - tells rails to Output the contents that
28:42 - was returned by the controller in action
28:45 - onto the layout at this location
28:47 - so we can make use of this by modifying
28:50 - our layout which gets included on all of
28:53 - our pages and we can add style sheet
28:56 - tags for our bootstrap and our Google
28:59 - font URL and if you look rails has
29:02 - already added two of them or they added
29:04 - one for our style sheet link tag and one
29:06 - for a JavaScript tag so we're going to
29:08 - add two stylesheet link tags
29:13 - and we'll do application
29:16 - and the second thing we pass is the URL
29:19 - that of the font or the CSS file we want
29:22 - to include so I'm going to copy and
29:24 - paste from our solution code
29:28 - and I'll end my Erb block
29:31 - and I'll create another one
29:36 - and use the style sheet link tag again
29:37 - but this time I'll use
29:41 - the bootstrap URL
29:45 - and again I'll just copy and paste
29:48 - from the solution
29:57 - if I go back to my page and refresh
30:02 - see that we have oh looks like I created
30:04 - two so rails is also really nice at
30:07 - detecting syntax errors so if you ever
30:09 - have a syntax error rails will tell you
30:12 - which line it occurred on and sometimes
30:14 - it'll even tell you why it occurred so
30:16 - we see that we had a syntax error on
30:18 - line six of our layout and it was
30:21 - because we had two of these Erb uh Echo
30:25 - blocks so I'll remove the first
30:27 - and refresh the page and now it looks
30:31 - like we had before the only thing we're
30:33 - missing is we don't have our header that
30:35 - says threadly so we can take
30:38 - our header that was in our solution code
30:40 - and I'm going to paste this on into our
30:43 - layout
30:45 - right above the yield statement because
30:47 - we want to have our header show on all
30:48 - of our pages
30:50 - that we might make later and if I go
30:52 - back to the threadly page and refresh
30:56 - that we have our heading here and we go
31:00 - back and forth it looks just about the
31:02 - same and I'll create a new comment in
31:05 - our rails app
31:07 - and I'll say
31:14 - and I'll post and there's my new comment
31:17 - down below and so now our fun our two
31:20 - websites function just about the same
31:22 - except now our rails one has persistence
31:24 - and we can refresh the page over and
31:26 - over again and more comments will still
31:28 - be there but our old static JavaScript
31:30 - page we see that this won't get saved
31:34 - and it'll show up once but when I
31:36 - refresh we lose it and so that's
31:39 - um the power of using Ruby on Rails we
31:41 - can create pretty functional websites
31:44 - really fast
31:46 - if you want to learn more about rails
31:49 - you should be sure to check out our
31:51 - course on Ruby and rails that we have
31:53 - Below in the description and if you're
31:55 - interested in doing more projects like
31:57 - these in on codecademy you should check
31:59 - out code cadmium Pro which we also have
32:01 - a link to in the description and I'm
32:03 - going to try to answer a few questions
32:05 - now if um since we have some time
32:18 - um so could we do what we did today with
32:21 - only Ruby and not rails
32:23 - um you certainly could it would be much
32:25 - much harder if you the amount of code
32:28 - that's been written to create Ruby on
32:30 - Rails is pretty vast and so using rails
32:34 - just speeds up development a lot I
32:37 - personally wouldn't try to create a
32:39 - website without using something like
32:41 - Ruby on Rails it just it's a lot of code
32:43 - you're going to have to write that you
32:45 - it just it takes a longer time so I
32:47 - wouldn't do it
32:49 - um why are forms used to pass the input
32:52 - data back and forth to the DB is this a
32:54 - good way to do things in most cases
32:57 - um yeah you can forms are a perfectly
33:00 - fine way to pass data from the views to
33:04 - the database one thing you'll see that
33:07 - we used is that's why we use those post
33:09 - params before so if I go back into my
33:12 - controller
33:14 - okay
33:16 - the post params ensures that only the
33:19 - data that we want to go into our
33:21 - database gets there so we're only
33:22 - allowing a comment to be passed in and
33:25 - the other thing rails does is active
33:28 - records the thing that
33:30 - handles the database interactions has a
33:33 - lot of security features built in and so
33:35 - it's pretty safe and you should use
33:38 - forums they are
33:40 - good and they'll make development faster
33:44 - so one question is do Wrap so routes
33:47 - what are what tell the server what URLs
33:50 - to access uh yeah that's a good way to
33:52 - put it so when you get a request so you
33:55 - can see like if I
33:57 - roll up here
34:00 - we see in our log that we started get
34:02 - for slash so when rail sees this request
34:06 - it'll go to the router and it'll ask the
34:08 - router
34:09 - what is Cape what is set up to handle a
34:12 - request to slash and because we used in
34:16 - our routes we said the root can be
34:19 - handled by post index rails will now the
34:22 - router will route that
34:24 - URL to the post index
34:27 - controller and action pair
34:32 - if you close the server and reopen it
34:34 - will we still have the post save well
34:35 - let's find out
34:37 - so we're going to we'll type a few posts
34:38 - hey there
34:41 - will this be saved
34:44 - when I restart
34:48 - and if I post that and refresh it's
34:52 - there right now but let's see if I
34:56 - exit my server and I'll now it's not
35:00 - running and if I start it up again
35:04 - and refresh we'll see that it is in fact
35:07 - saved and that's because we've saved
35:10 - that post into a SQL Lite database and
35:14 - so if you restart the application it'll
35:16 - always it'll come back
35:21 - um how can we tell what code goes in
35:23 - each file in the file system Navigator
35:25 - this is something that you kind of will
35:27 - learn over time but it's also one of the
35:29 - things that makes rails really nice
35:31 - because rails kind of sets it up so
35:33 - there's only certain places you can put
35:35 - certain things it creates all these
35:38 - directories for you so if you look an
35:40 - app you know that your controllers will
35:42 - go and controllers your views will go in
35:44 - the views folder your models will go in
35:46 - the models folder and rails is really
35:48 - good at convention so it wants you to do
35:52 - things a certain way and you try to do
35:54 - things a different way you'll kind of
35:55 - see quickly that you're not meant to do
35:58 - that
35:59 - um
36:01 - to reverse the post output making a post
36:03 - go to the top of the list instead of the
36:05 - bottom would you recommend it be done
36:06 - using CSS or in the controller in the
36:08 - model I would recommend that you do it
36:11 - in the controller and you can I'm not
36:14 - going to show it right now but you can
36:15 - write a query that will instead of
36:17 - retrieving just by I by default when you
36:20 - do post.all it'll retrieve them from the
36:22 - first ID to the last ID but you could do
36:25 - something like retrieve the newest post
36:28 - instead of the
36:29 - um
36:30 - oldest post
36:34 - if the class equals comments then why is
36:37 - the post comment and not comments
36:41 - so the class is post not comments and so
36:46 - our if I
36:48 - um
36:50 - if we look back at our
36:53 - posts we can go to our migrations so our
36:57 - the class that we have is post and one
36:59 - of its properties is common so it's not
37:02 - that we have a comment that has a
37:04 - comments we have a post with a common
37:08 - can rails be used to develop mobile apps
37:11 - too it you can't make Native apps with
37:15 - rails but you can make
37:17 - um
37:18 - web applications that are mobile
37:20 - friendly
37:22 - and for those of you who don't know a
37:25 - native application is one that you could
37:27 - for instance download in the Apple App
37:30 - Store or in the Android App Store
37:35 - and then does the percent sign call a
37:38 - ruby specific template engine yeah so
37:40 - the percent sign is specific to the Erb
37:44 - the X and you use that whenever you want
37:48 - to do something an ERB
37:51 - specific thing or when you want to call
37:52 - a ruby function
38:00 - and I think that's
38:02 - about as much time as we have for
38:05 - questions
38:07 - um thanks everyone for joining today and
38:10 - again you should check out the course on
38:12 - Ruby onrails on codecademy.com and you
38:15 - should check the link to Pro if you want
38:16 - to get even more in depth on an extra
38:20 - help on learning Ruby on Rails and
38:22 - thanks everyone for joining and have a
38:24 - great day