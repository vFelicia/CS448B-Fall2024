00:19 - all right
00:21 - hello to everyone how we all doing
00:26 - and
00:27 - hello in
00:28 - chat everyone welcome to our second
00:33 - live stream
00:35 - super excited to have people who are
00:37 - watching live back now and people who
00:39 - can be tuning in later to watch it um
00:42 - it's good to see people back in here and
00:44 - hello to everyone who's gonna be
00:45 - checking this out in the future
00:49 - so
00:50 - hope everyone's had a good week so far
00:51 - since we've been working on some new
00:53 - material hello world hello everyone
00:56 - coming in
00:57 - uh
00:58 - so let's go ahead and do a little bit of
01:00 - a preview from where we left off
01:02 - now if you uh either
01:05 - don't have the repo with you or just
01:07 - want to make sure that you're in the
01:08 - same spot
01:09 - i'm going to put a link in chat good
01:11 - evening robert
01:12 - uh this is a link that you can find out
01:15 - to the repo where you can go ahead and
01:18 - download kind of the existing project
01:20 - where we ended up last time
01:22 - and hi everyone coming in
01:24 - so
01:24 - and the link up in chat if you want to
01:27 - make sure that you're in the same spot i
01:28 - linked at live stream one which is kind
01:30 - of the brand for where i ended up last
01:32 - time
01:33 - and let me share my screen and showcase
01:36 - how to go ahead and take a look at that
01:38 - so
01:41 - um
01:42 - this one
01:44 - all right so over here the link that i
01:47 - gave out to take you to this page right
01:48 - here if you want to go ahead and get a
01:50 - repo to make sure you're in the same
01:52 - spot as we end up last time you can go
01:54 - ahead and click on this code button
01:57 - download a zip
01:58 - and then this will go ahead and download
02:00 - a zip file you can then extract that zip
02:02 - file and you'll end up with the exact
02:04 - same project that we ended up with last
02:06 - time
02:07 - so if you'd like to follow along and
02:08 - want to make sure you're in the same
02:09 - spot you can feel free to do that if you
02:12 - have your own project that you've been
02:13 - working on and want to see how you can
02:15 - add to that you can do that too uh and
02:17 - if you want to go ahead and just follow
02:19 - along and watch that's absolutely okay
02:21 - too
02:22 - i see questions as python project no
02:24 - this is going to be an ios project so
02:26 - we're going to be building out more of a
02:29 - quiz application that we started
02:30 - building out last time
02:32 - so you can see a little simulator right
02:34 - here with our application so kind of go
02:36 - over a little bit of where we ended up
02:37 - with last time and then talk about kind
02:39 - of the problem we ran into and then how
02:42 - we can start leveraging the new feature
02:43 - of the language to go ahead and fix that
02:46 - so
02:47 - uh go ahead and make sure that you've
02:48 - got either following along in the way
02:50 - that you want to be doing go ahead and
02:52 - get rid of this
02:53 - and then take a look at our project here
02:56 - so
02:57 - this is where we ended up with last time
02:59 - we have our quiz app you can see it's
03:01 - running in the simulator uh we learned
03:03 - how we can lay out different views and
03:06 - make them display in a phone we talked a
03:08 - little about the simulator and how it's
03:10 - a real phone and you can navigate around
03:12 - in it which is really fun
03:14 - uh we talked about adding some view
03:15 - modifiers uh this is all using swift and
03:18 - swift ui
03:19 - and then we showed how we could add some
03:21 - buttons to the bottom that we could go
03:23 - ahead and click on
03:25 - so we talked a lot about getting our
03:27 - project set up we talked about these
03:28 - views here
03:30 - but we didn't talk a lot about how we
03:32 - can make these buttons do something that
03:33 - was interesting
03:35 - so right now when we click on one of
03:36 - these buttons uh for what the first
03:38 - computer bug is
03:40 - it just goes ahead and prints that in
03:42 - our ide our integrated development
03:45 - environments like xcode in this case
03:48 - and that's great for us because we can
03:50 - know that our button is doing something
03:52 - it's not great for users of our
03:53 - application because nothing about this
03:55 - appears anywhere on the screen
03:58 - so where we ended off with last time is
04:00 - saying it's great that we got all these
04:01 - connected but be even better if we had a
04:04 - way that we could
04:05 - know if the answer was correct or not
04:08 - and give that feedback back to the
04:10 - learner or back to the user of our quiz
04:12 - here so they could do something with
04:14 - that
04:15 - so that's exactly what we're going to be
04:16 - doing in this session is we're going to
04:18 - be figuring out how can we add what's
04:20 - called states to our application
04:22 - and make our
04:25 - views change their layout depending on
04:27 - what the user is doing
04:29 - so without any further ado let's go
04:32 - ahead and get into it here taking a
04:33 - first look at our content view uh and
04:36 - yeah this will work in if you have an m1
04:38 - that's great you can also use any other
04:40 - macbook or
04:41 - any other device where you can run xcode
04:43 - which is essentially just max but it
04:44 - will work just as well in an m1 as with
04:47 - kind of the traditional intel
04:49 - okay
04:50 - so inside our content view we want to
04:53 - figure out how to get some feedback back
04:56 - to the user about whether they got it
04:57 - right or not
04:59 - so one thing we know we're going to need
05:01 - is
05:02 - what what the correct answer is since
05:04 - that's not a concept we have stored
05:06 - anywhere in our application
05:08 - now we know that we need to have that
05:11 - correct answer stored and we also know
05:13 - that we're going to have multiple
05:14 - questions in our application as we keep
05:16 - developing it
05:18 - rather than just add a correct answer
05:21 - index to the top and then try to figure
05:23 - out later how we can
05:25 - change all these around when we get to
05:27 - other questions let's try to work
05:29 - thinking a little bit of the future and
05:31 - try to plan out for that and what we're
05:33 - going to do for that is say
05:35 - even though we have a question we have
05:36 - possible answers maybe we need a correct
05:38 - answer index there's one concept that
05:41 - really brings all those together and
05:44 - that's the idea of a question
05:46 - right questions have text
05:48 - they have possible answers and they have
05:50 - the correct answer index out of those
05:52 - possible answers
05:54 - so instead of just what's called hard
05:56 - coding these into our view we can make
05:59 - our view more powerful and reusable by
06:02 - abstracting these out to their own
06:05 - structure
06:06 - their own question and then to make a
06:09 - content view we can specify what kind of
06:11 - question we're we're asking
06:14 - so let's go ahead and start doing that
06:15 - abstraction
06:16 - what we're building out now is called a
06:18 - model which is different than a view
06:21 - model is kind of what powers the
06:23 - business logic of your application how
06:25 - it reasons and thinks about different
06:27 - entities the view is just what it
06:29 - displays
06:30 - so let's go ahead and build that out
06:32 - separately here so go ahead and click on
06:34 - new view
06:35 - and we're going to make a new swift file
06:38 - which is going to be our question
06:43 - when we click create we'll see that we
06:44 - have a new view added here right under
06:46 - our quiz app so we've got our content
06:48 - view and now we've got our questions
06:50 - this is going to be where we're going to
06:52 - keep track of what the questions are and
06:54 - what a question should have inside of it
06:57 - so we're defining a new structure which
07:00 - is called question
07:01 - we have lots more on structures in our
07:04 - content on academy about like define
07:06 - these and what these two
07:08 - so we've got our structure we then
07:11 - want to know what does it mean to have a
07:13 - question inside the context of our quiz
07:16 - application
07:17 - so questions should have question text
07:21 - in this case could be what was the first
07:22 - computer bug so we know that every
07:24 - question is going to need that
07:26 - questions also are going to have
07:28 - possible answers so all the different
07:30 - things we can be selecting from
07:32 - and we can see that those are going to
07:34 - be strings as well
07:36 - so we're going to have our possible
07:38 - answers
07:39 - which is going to be an array of strings
07:42 - and we'd really like to know what's the
07:44 - correct answer in a quiz question how
07:47 - can we give the right kind of feedback
07:49 - to users for using our application so
07:52 - we're going to have that correct answer
07:54 - index
07:58 - and so these are the things that it
07:59 - means to be a question a question should
08:01 - have all of these elements
08:03 - now another great thing that would be
08:05 - that we can do in our question is we can
08:07 - make it know what all the questions are
08:09 - that we're going to want to ask so we
08:11 - don't need to worry about building them
08:12 - again later
08:14 - so to do that we can add what's called a
08:16 - static property and this means that
08:18 - something true about questions in
08:20 - general rather than one specific
08:22 - question
08:23 - but for now we can just kind of keep in
08:24 - mind that this is a place where we could
08:26 - be storing our questions
08:28 - we'll call this all questions
08:30 - we'll go ahead and make this
08:32 - an array of all the questions that we'll
08:34 - want to ask in our application
08:36 - and now we can start
08:38 - bringing those from our content view
08:41 - into this question model here
08:44 - so we can go ahead then and pull out the
08:47 - question text
08:48 - that's the first computer bug and put
08:50 - that inside here we can have our
08:52 - question
08:54 - to question which has text possible
08:57 - answers
08:58 - and domain index here
09:00 - uh and does this save the format i'm not
09:03 - quite sure what spss is by having
09:05 - different views
09:06 - uh but yeah it's definitely true that
09:07 - adding different views uh on that your
09:10 - question is a good way to be separating
09:12 - out things and we'll see that later in
09:13 - this as well
09:14 - so with our question text we can ask
09:17 - what the first computer bug is we can
09:19 - then grab all the possible answers which
09:21 - we already have in this array right here
09:24 - so we can copy that in
09:26 - and then we have a correct answer index
09:28 - so we see we've got fly moth and beetle
09:31 - remember that moth was the first
09:32 - computer bug and if you're new to arrays
09:35 - array indexing starts at zero so you
09:38 - count zero one two three so we're
09:40 - looking at
09:42 - what's at index one for the correct
09:44 - answer index
09:47 - okay so now we have our question
09:49 - translated into our model here and while
09:52 - we're at it we can add a few more
09:53 - questions so that we can be previewing
09:55 - different aspects here i have a few i'm
09:57 - just going to copy and paste in but you
09:59 - can go ahead and work and add in your
10:02 - own questions that you'd like to as well
10:04 - so i'm just adding in a few more
10:06 - questions that we have in the same quiz
10:09 - app that we build
10:10 - asking what language ios developers use
10:13 - before swift
10:15 - saying uh what is it called when you use
10:17 - zeros and ones to store data and who
10:19 - invented the world wide web
10:21 - these are some of the questions that
10:22 - we'll have in our quiz app these are
10:24 - just string
10:26 - these are the strings you can put in
10:27 - note as you're following along you can
10:29 - feel free to add whatever questions
10:30 - you're interested in asking in your own
10:32 - application
10:33 - okay so now we have our question model
10:36 - built out and we can see all the
10:38 - questions that we're going to be asking
10:40 - their application
10:41 - back at the content view now that we
10:43 - have our question we can get rid of
10:45 - these hard-coded strings
10:48 - and instead power our view
10:50 - by just having a single question
10:54 - that way instead of these strings that
10:56 - we're reading from
10:58 - we'll go ahead and take this question
11:01 - it's going to be the question text to
11:03 - show what's in the middle here
11:05 - the possible answers will be the
11:07 - questions possible answers
11:10 - and then the answer button will have the
11:11 - text
11:12 - of the possible answers at the right
11:15 - index
11:17 - so we got to get rid of some stuff which
11:19 - is always great when you're refactoring
11:21 - you make things shorter and easier to
11:22 - read it's much more clear that this
11:24 - content view depends on the question
11:27 - now when we build this we'll see a
11:29 - couple error errors and that's because
11:32 - we depend on this question now we're not
11:34 - hard coding it in which means we need to
11:36 - give it to anyone who wants it which is
11:38 - going to be
11:39 - preview and also this view right here is
11:42 - going to want it
11:44 - so we can add in the question and tell
11:46 - it to just for right now
11:48 - get the first question that we have in
11:50 - this all questions array and we're going
11:52 - to come back and find a better way to be
11:55 - figuring out what question we're on
11:56 - let's just look at the first one for now
11:59 - we'll add it to this quiz app app which
12:01 - is not the best name for this but that's
12:03 - okay
12:04 - and then inside here we'll go ahead and
12:06 - add
12:08 - the same first question right here
12:10 - question dot all questions at zero
12:13 - let's go ahead and get our canvas back
12:15 - up because it's nice to be able to see
12:16 - what those previews look like
12:18 - bring up our canvas
12:21 - resume that update up automatic updating
12:24 - and let's let it build for a second to
12:26 - make sure we don't have any errors
12:29 - great now everything looks the same
12:31 - which is always good news when you've
12:32 - just done a refactor
12:34 - but something that's neat about this is
12:36 - because our question model has multiple
12:38 - different questions we can be asking
12:40 - we can change the index that we're
12:42 - previewing
12:44 - and it shows us the next question
12:46 - so we can look at all of the different
12:48 - questions that we have by just
12:50 - previewing what it's going to look like
12:53 - and so we can see some of the power and
12:55 - reusability that we've added to our
12:57 - content view because now by just
13:00 - changing around one number i can make it
13:02 - display something totally different from
13:03 - what it was showing before
13:07 - so these are great for previewing right
13:08 - now and in our next session we're going
13:10 - to be taking a look at how can we be
13:13 - advancing questions to be starting at
13:15 - the first question and then moving
13:18 - through so that we can be seeing each of
13:20 - these questions
13:21 - for now it's a good uh indication that
13:24 - our refactor worked well and now we have
13:26 - the single question model as power in
13:28 - our application
13:31 - okay
13:31 - so
13:32 - that was a great bit of refactoring
13:34 - we've added in this model so that we
13:36 - don't have to depend on these hard-coded
13:38 - things in our view but we didn't really
13:40 - solve our main problem yet which is how
13:43 - do we make it so that clicking on a
13:44 - button
13:45 - changes what we're looking at so we know
13:48 - if we got something right if not
13:50 - so
13:51 - to answer that we're going to go ahead
13:53 - and first add the concept of a correct
13:57 - answer index or a guest index rather we
14:00 - need to know what they guessed so right
14:02 - now this is just a static view you can
14:04 - click on buttons and just print some
14:06 - text
14:07 - we need to be tracking some information
14:09 - and the information that we need to be
14:11 - tracking is
14:12 - did the user make a guess
14:14 - and if so
14:16 - what was the guess that they made which
14:18 - index did they select or click on
14:21 - we're going to represent that both of
14:23 - those two questions of did they make a
14:25 - guess at all and if so what index did
14:29 - they guess in a single variable by using
14:32 - a great swift type called an optional
14:35 - so we're going to name this property
14:37 - guest index which is what guest did they
14:40 - make
14:41 - and the type of this we're going to give
14:43 - is what's called an inch
14:45 - question mark
14:46 - and an inch question mark is kind of
14:48 - like a regular end in that it's a number
14:50 - but the question mark means maybe it's
14:52 - not a number at all maybe
14:55 - it's nil because they didn't guess
14:56 - anything so optionals are a great
14:59 - structure to be using when you have
15:01 - questions that might not have good
15:03 - answers to them like what index did the
15:06 - user guess it's like well they haven't
15:08 - guessed any index so
15:10 - the answer is nil there's no it's not
15:12 - that they guessed index zero that's a
15:14 - real guess they could make it's not that
15:16 - i guess index negative one that's not
15:18 - even inside this it's that they didn't
15:19 - make a guess at all
15:21 - so having a guest index be equal to nil
15:24 - and b of type optional integer lets us
15:28 - answer both of those questions at once
15:30 - what index did they guess
15:32 - if they guessed it and if they didn't
15:34 - guess it
15:35 - then we'd just say that there's nil
15:37 - there's nothing that they've guessed at
15:38 - all
15:40 - okay
15:40 - so now we have the concept of
15:43 - whether or not they've made some kind of
15:45 - guess
15:46 - now that we can
15:48 - have for this property inside of our
15:50 - view we can go ahead and say
15:53 - uh figure out a way to be giving colors
15:55 - back to people here
15:57 - uh yeah in a minute if if you just copy
16:00 - this exactly you'll all end up with the
16:01 - same application so you're free to go
16:03 - ahead and make whatever edits uh you
16:05 - like to it as you're building it what
16:07 - i'm building is more of a template for
16:09 - something you can be building off of to
16:10 - make your own kind of quiz application
16:12 - as well
16:14 - so
16:15 - let's go ahead and figure out how we can
16:17 - use this index first we have to decide
16:19 - how should we show people if they got
16:21 - the guests right or not
16:22 - now what we do for codecademy and i
16:24 - think a good way of showing uh
16:26 - a user whether or not they've gotten it
16:28 - or not is changing the color of the
16:30 - button that they've guessed on
16:32 - so we're going to want to make it so
16:34 - that when you click on a button if they
16:36 - guess right to turn green as i guess
16:39 - wrong it turns red
16:41 - to do that we're going to need a way to
16:44 - be generating the right color for the
16:46 - button at each index
16:49 - so we're going to build a little method
16:51 - here
16:51 - which is going to be answering that
16:53 - question
16:54 - based on where the button is what color
16:57 - should it be
16:58 - so we're going to call this something
17:00 - like
17:00 - color
17:02 - or
17:02 - button at index
17:06 - and this will go and give us the color
17:07 - that we should be getting back
17:10 - again i think this is a might be the
17:12 - first function we've seen through this
17:13 - we have a lot more content on functions
17:16 - in our uh skill path and in our learn
17:18 - swift course as well so if you want to
17:20 - go deeper into them
17:22 - definitely take a look there the clgr of
17:24 - what functions are doing here is
17:27 - they take inputs which in this case is
17:29 - the index what is uh which button index
17:32 - zero one two or three do we get in and
17:35 - they give an output what color should i
17:38 - be
17:38 - given the index that i'm at
17:41 - and that's all this function is showing
17:42 - in this case
17:44 - this at keyword just means when we call
17:46 - it we can just use this
17:48 - called an argument label just kind of a
17:50 - neat swift thing
17:52 - so
17:52 - let's answer that question
17:54 - based on the index of the button
17:58 - and this is the button index here uh and
18:01 - we can make explicit i'm gonna go ahead
18:02 - and call this button index
18:05 - based on the index of the button
18:07 - what color should it be
18:10 - now
18:11 - if the guest index is nil i'd say that
18:14 - they've made no guess at all
18:17 - what color should the button be
18:19 - now there's a little bit of a chat delay
18:21 - here so i'm going to wait a little bit
18:23 - to see if anyone has ideas for that chat
18:25 - the question being
18:27 - uh if the guest index is nil
18:30 - what color should the buttons be
18:36 - anyone has any ideas for what that might
18:38 - look like
18:40 - i've got my own ideas but you never know
18:46 - so if we don't have any
18:48 - uh guest index at all the guest index is
18:51 - nil
18:52 - the user hasn't made a guess
18:55 - then what color do we want
18:57 - yeah
18:58 - stay blue yeah exactly so it should stay
19:00 - the same for sure now blue is the border
19:02 - right and we could be changing the
19:04 - border that's totally right uh
19:06 - if the if we want to be changing the
19:08 - border color then we would want it to
19:10 - just stay blue i might actually want to
19:12 - change the middle of it so that like the
19:14 - full thing is highlighted in word says
19:16 - it but yeah it should definitely stay
19:19 - the same
19:20 - if they haven't guessed anything yet
19:22 - uh and i'm on you're definitely right
19:24 - once it gets wrong we'll want to be read
19:26 - but they haven't guessed at all then we
19:28 - should just keep it like this which is
19:29 - what it looks like right here exactly
19:32 - now in swift uh we can use what's called
19:34 - a guard statement to check to see if
19:37 - there is a guest index
19:39 - so we can see
19:40 - sorry about guest index equals guest
19:43 - index
19:46 - so what we're doing here is we're saying
19:48 - hey
19:49 - if they have actually guessed something
19:53 - then we can keep going
19:55 - otherwise return clear which is
19:57 - basically stay the same as what you were
19:59 - before just match whatever the
20:01 - background is doing is clear here
20:06 - great so now we've we know what to be
20:08 - doing if we have no guess at all it's
20:11 - just stay clear have the background be
20:13 - the same
20:14 - now
20:15 - if they click on let's say fly at index
20:18 - 0
20:19 - we also don't want whatever is happening
20:21 - here to change
20:22 - right so if they click on fly
20:25 - nothing about v should save them it
20:26 - should also be clear
20:28 - so
20:29 - if they have uh they haven't guessed
20:32 - anything
20:33 - or
20:34 - the thing that they guessed
20:36 - isn't the button index then we want it
20:39 - to be clear
20:40 - so for the guest index
20:43 - uh
20:44 - is equal to in which case the button
20:47 - index now guard statements work a little
20:50 - bit weird if you're used to ruby it's
20:51 - called like an unless but the way to
20:53 - read this is
20:54 - unless there's a guest index
20:58 - and unless the guest index
21:01 - is the same as the button index
21:03 - then stay the same as the background
21:05 - color it's a lot of like double
21:07 - negatives to play with but that's kind
21:09 - of how it works in terms of parsing it
21:11 - out so make sure that they've guessed
21:13 - something
21:14 - and make sure that the thing that
21:16 - they've guessed
21:17 - is the same as the the index that
21:20 - they've guessed is the index i'm looking
21:22 - at right now to figure out what color
21:24 - should be
21:25 - and if neither of those things is true
21:28 - then go ahead and just make it the same
21:30 - as the background
21:32 - so that's getting our kind of base
21:33 - states out so if we just leave it as is
21:36 - right now and call this in the
21:38 - appropriate spot
21:39 - then we're just going to be using the
21:41 - background color all the time once we're
21:44 - down here on line 44 i'll make this a
21:46 - little bit bigger
21:48 - once we're here on line 44
21:51 - then we can say we know that they've
21:54 - made a guess
21:55 - and we know that the guess they made is
21:58 - the same one as the button that we're
22:00 - trying to figure out what color it is
22:02 - so now we're in a position to be trying
22:03 - to figure out what that background color
22:05 - should be
22:06 - so if the guest index
22:09 - that we've looked at here
22:11 - is the same
22:13 - as
22:14 - the correct answer index
22:17 - for our original question
22:20 - then we want to go ahead and have it
22:22 - show up as green because it's correct
22:25 - and if it's not a correct guess then we
22:27 - want to have it show up as read
22:30 - so there's a lot going on in this method
22:32 - so let's talk it over one more time and
22:33 - then try to figure out how we can go
22:34 - ahead and use it in our application
22:37 - so we're saying we have a function
22:39 - that's saying
22:42 - what color should the button at each
22:44 - index be
22:45 - we're going to go through each button
22:47 - one at a time and it's going to ask this
22:48 - method what color should i be
22:52 - that's each button index going in this
22:54 - method answers back hey if the user
22:56 - didn't guess anything you're definitely
22:58 - clear and it also says
23:00 - if you're not the one that the user
23:02 - clicked on you're definitely clear
23:05 - if it says nah the user did click on me
23:08 - and they've guessed something then we
23:10 - get to keep going down and say okay well
23:13 - uh are you the correct answer button
23:16 - that they've clicked on and if the
23:18 - answer is yes they've clicked on me and
23:20 - on the right thing they should have
23:21 - clicked on me then we give back green
23:23 - otherwise we get back red
23:26 - okay did a lot of work writing that
23:27 - method which is great because it's going
23:29 - to power a lot of the logic here
23:31 - now
23:32 - when we play
23:35 - no colors are changing yet and that's
23:37 - because we haven't done anything with
23:38 - this method we've just written it here
23:41 - uh so what we can do is we can go ahead
23:44 - and start
23:46 - by
23:47 - taking
23:48 - the answer button
23:49 - and giving it a color at each of these
23:52 - indices here
23:53 - so we can say the color
23:56 - the background color
23:59 - is going to be the color for button
24:02 - at
24:03 - the index that we're looking at right
24:05 - now
24:06 - we saw it kind of went around for a
24:08 - second here but it stays the same
24:11 - and if we click on anything nothing
24:12 - changes
24:14 - but notice if we change this clear here
24:16 - to something like say uh red
24:20 - now we know that they're connected to
24:22 - each other it's saying oh if no one
24:24 - clicks on me then i should just turn red
24:26 - or turn blue or turn whatever other
24:28 - color we like here
24:30 - so they're definitely connected i'm
24:31 - still not doing anything
24:34 - and that's because
24:36 - we haven't told the button to do
24:37 - anything when they click on it we have
24:39 - to do the last bit of hooking it up so
24:41 - that those are connected
24:43 - and to the question in chat i think
24:45 - we're going to stick with these times
24:46 - for now but these are all recorded on
24:49 - youtube as well so you can feel free to
24:50 - watch the recordings of the line of the
24:53 - live streams from the youtube channel
24:56 - yep
24:57 - uh okay so we have the colors hooked up
25:02 - we now just need to go ahead and make
25:04 - sure that when you click on a button
25:06 - something happens
25:08 - now
25:09 - right now we're clicking you know we're
25:11 - printing out the thing that they
25:12 - selected which is great but doesn't
25:14 - give any information back
25:16 - what we'd really love to do is make it
25:18 - so that when the user clicked on a
25:20 - button
25:21 - this guest index got updated to the
25:24 - index that they guess on
25:26 - now how can we do that
25:29 - we abstracted our answer button so our
25:31 - answer button is isolated this whole
25:34 - separate structure does have an doesn't
25:36 - have any idea about this guest index
25:40 - fortunately
25:41 - we can use a little bit of the same
25:43 - pattern that regular buttons use by
25:46 - making a button
25:47 - take in a thing that it's supposed to be
25:49 - doing and then run that code later so we
25:52 - see when we define this button here
25:54 - we could just pass in something we
25:56 - wanted it to do and it just went ahead
25:58 - and did that
25:59 - we can add that same hack to our button
26:01 - here
26:02 - give it some on click method
26:04 - and then give it a type
26:06 - which it looks real weird which i'll
26:08 - explain about in a second and then when
26:11 - we click on the button we'll just go
26:13 - ahead and run whatever code someone
26:14 - passed in
26:16 - and up here
26:18 - we'll go ahead and pass in the code to
26:20 - do something
26:23 - and let's say let's just put that print
26:24 - statement out here
26:26 - new print location
26:29 - just to show that we've moved around
26:30 - where that's happening
26:34 - okay
26:35 - great so that builds and while this runs
26:37 - let's take a look at what we did here
26:39 - so we added in and
26:42 - so we can see that this new print
26:43 - statement is working as we expected it
26:45 - to
26:46 - so
26:47 - as we're looking at the answer button
26:49 - here we can see that it takes in this on
26:51 - click thing which has this really weird
26:53 - type so it's like open close parenthesis
26:55 - and arrow and void what this means is
26:57 - our on is our answer button
27:00 - takes in something to do some code to
27:02 - execute just like a regular button does
27:05 - so we're basically just passing on this
27:08 - command onwards down to the actual
27:11 - button here
27:13 - for now something to worry about for
27:14 - these the bigger concept associated with
27:16 - this is called the closure
27:19 - these are in our learn intermediate
27:20 - swiss course we talk a lot more about
27:22 - closures but for now uh what to get out
27:25 - of them is it's a way of passing one of
27:27 - these commands
27:28 - down a couple levels so that we can have
27:30 - all the context when we need as we're
27:32 - writing this line of code here
27:36 - okay
27:37 - so
27:37 - we have shown that we can be executing
27:39 - code from here which is great because
27:41 - we've got the guest index here we know
27:44 - the index they've guessed because we can
27:46 - be injecting it into the button
27:48 - so we can go ahead and update the guest
27:51 - index
27:52 - be
27:53 - the index
27:54 - few have we done it does this work no
27:58 - so close
27:59 - okay
28:00 - uh why does this not work well
28:03 - swift's ui is a special kind of
28:06 - framework and we've shown that by just
28:07 - making a small change to this uh where
28:10 - was it
28:11 - the color that we were looking at here
28:13 - all background would just change and
28:15 - that's because this is a
28:16 - what's called a declarative framework
28:20 - we just go ahead and say what we want
28:22 - our views to look like
28:24 - based on the state of our application
28:26 - and swift ui obligingly fills in the
28:29 - rest and goes and updates everything
28:32 - now
28:33 - these properties here it kind of takes
28:35 - as givens it thinks that question should
28:38 - just be the question it shouldn't change
28:40 - when we have a guest index it just says
28:42 - that's a guest index that shouldn't
28:43 - change
28:44 - and that's what it's hinting at right
28:46 - here
28:47 - where it says self is immutable it says
28:50 - we can't change self we're not supposed
28:51 - to change it but we want to change it we
28:54 - want our view to look different
28:56 - because swiss ui is a declarative
28:58 - framework it cares a lot about how we're
29:02 - changing things so we have to be really
29:04 - explicit with it about what we're
29:06 - expecting to change
29:08 - we want to tell it hey this guest index
29:11 - is going to change as the user interacts
29:13 - with this view
29:15 - and as it changes
29:17 - you should go ahead and update all of
29:19 - your views because all of them might
29:21 - depend on this guest index
29:24 - right
29:25 - as this guest index changes for example
29:28 - our buttons might have different
29:29 - background colors
29:31 - the way that we can mark that is by
29:34 - using the special at state keyword
29:38 - that makes our error go away and
29:40 - indicates that this is a special
29:43 - property
29:44 - that our view has
29:46 - that as it changes
29:48 - everything else might change as well in
29:50 - our view and switch i should start back
29:53 - from the top and re-go through all of
29:55 - these to figure out what's different now
29:57 - that the state has updated
29:59 - that makes this error go away
30:01 - and then when we rerun this resume this
30:04 - here
30:05 - we can see that it looks the same
30:07 - preview is happening but now when we
30:09 - click on something
30:10 - it shows up as green
30:13 - so that's a common error that you'll get
30:15 - as you're working with properties you
30:16 - might want to change is if you want to
30:19 - change something in a view that the rest
30:21 - of your application might depend on you
30:23 - have to mark it with that at state rider
30:26 - to show that things might change around
30:29 - and it has to redraw itself as it's
30:31 - sometimes called to reflect those
30:33 - changes
30:35 - now let's do a little bit of cleanup
30:36 - here while we're at it
30:39 - we notice that we can go ahead and click
30:41 - on the button we got the background
30:43 - color changing
30:44 - but we can still click on other buttons
30:46 - they're all the right color
30:48 - but you still only get to guess once in
30:50 - a quiz right you shouldn't get to go
30:51 - back to the same question you already
30:53 - answered and just click on all the
30:54 - things until you get to the right answer
30:56 - might be a little bit messy
30:58 - so what we can do to fix that is disable
31:01 - the button once they've made a guess
31:05 - buttons have a special property called
31:07 - disabled
31:08 - and we can change this to be whether or
31:11 - not the guest index is not mental
31:14 - so we should disable this if the guest
31:16 - index isn't know
31:18 - if there's a real value that they've
31:20 - guessed
31:21 - then it will be disabled
31:23 - and so when we
31:25 - we re-run this here
31:27 - now you can see all the buttons gray out
31:29 - a bit i'll make this bit bigger
31:33 - at least
31:34 - so you can see all the buttons gray out
31:35 - and clicking on them doesn't actually
31:37 - accomplish anything
31:39 - okay so that was nice and we can see
31:41 - that that's using that same state
31:44 - property here so that's why it's really
31:46 - important for the compiler what's
31:48 - actually xcode is it's thinking about
31:50 - things to know what state
31:52 - so that it can recalculate whether or
31:54 - not the button is disabled whenever the
31:57 - guest index changes
31:58 - one way to think about it is as this
32:01 - changes there's a bunch of stuff that
32:03 - depends on it and it just figures out
32:04 - the new values for those
32:07 - okay
32:08 - so
32:09 - we've gone through we've added some
32:11 - state to our view which is great the two
32:13 - things we're going to do left here is
32:15 - we're going to do a little bit of setup
32:16 - for our next session to figure out well
32:19 - how can we start presenting the user
32:21 - interface for other questions
32:24 - and then we're going to take a little of
32:25 - a side track and talk more about
32:27 - stateful views in swift ui more broadly
32:31 - and other ways you can go ahead and add
32:32 - them
32:34 - so let's go ahead first and then figure
32:36 - out how once we click on something we're
32:38 - not just stuck but something new will
32:41 - happen on the screen
32:42 - that users can interact with to get to
32:45 - the next question
32:46 - we're going to represent that with like
32:48 - a little bar that's going to come up
32:49 - from the bottom that's going to just ask
32:50 - for the next question
32:53 - that looks like another view so we're
32:55 - going to build a new view for it
32:57 - the last time we built a new view we
32:58 - just did it here
33:00 - let's actually do this one by building a
33:02 - new view entirely using our files
33:05 - up
33:06 - over in this place here
33:08 - to get started with that you can see how
33:10 - this says content view it says question
33:13 - let's reorganize this a bit
33:15 - we might have multiple models in our
33:17 - application so we can go and put this in
33:20 - a directory or a folder
33:22 - as new group from selection
33:25 - and call this models
33:28 - this then represents all of the models
33:30 - that our application might have
33:33 - content view is a view
33:35 - and we're going to want to have multiple
33:37 - views in most applications
33:40 - so we can name this views
33:42 - so we have our models which power kind
33:45 - of the information that our application
33:47 - works with
33:48 - and then we've got our views to display
33:51 - that information to the users of our
33:53 - applications
33:54 - so this bottom bar thing it's not like
33:57 - business logic
33:59 - it's some kind of view that we're
34:00 - presenting information to with so we
34:03 - want to go ahead and add a new view up
34:05 - here
34:07 - to add a new file on a specific place we
34:10 - can either just use this menu here or we
34:12 - can go and right click on this and then
34:16 - you can go ahead and then click on new
34:18 - file right here inside our view
34:21 - so we're going to build a new swift ui
34:24 - view
34:26 - we're going to call this bottom text
34:28 - it's going to be the thing that pops up
34:29 - as we're done with answering a question
34:31 - it's called this bottom text
34:35 - and
34:38 - we get this default interface same as
34:39 - before for our content view when we
34:41 - resume we should see the basic starting
34:43 - configuration that we have
34:45 - now we want this to look like some kind
34:48 - of you know just bar got some text maybe
34:51 - we would like to center that that could
34:52 - be nice
34:53 - so what we're going to do is take this
34:55 - text and put it inside of an h stack
34:57 - with a couple spacers
34:59 - and so we can remember
35:01 - some of the different ways we could do
35:02 - that we can of course do that just in
35:03 - the editor
35:04 - we can also do that by using this object
35:07 - library here
35:08 - grabbing some spacers
35:10 - and then putting them to the side of
35:12 - this here so that we can center it
35:14 - so we can grab a spacer there
35:16 - grab a spacer here
35:18 - and put that
35:20 - to that side here
35:22 - and we can see our text gets to be
35:23 - centered which is great
35:25 - can add a couple attributes here
35:27 - looking on our text maybe we want to
35:29 - give this thing some padding
35:32 - uh maybe we want to go and make it bold
35:34 - so we can go and look at the font let's
35:37 - give it a body font make it
35:40 - bold
35:42 - we can go ahead and give it some padding
35:44 - all around
35:47 - and then
35:48 - that is essentially what our text is
35:51 - going to look like just kind of a nice
35:52 - little centered bit of text the last
35:54 - thing we can do is we can just go ahead
35:56 - and give it a background we'll do this
35:58 - in the editor here
35:59 - give it a background
36:01 - and let's make it blue looks nice but it
36:04 - kind of blocks the text a little bit so
36:06 - let's use the same trick we saw before
36:08 - and just make the opacity a little bit
36:10 - lighter
36:10 - so call it color dot uh blue
36:14 - and give it some opacity that's a bit
36:16 - lower
36:19 - great and then like we saw before you
36:21 - can uh what's that called the preferred
36:23 - color scheme
36:25 - dark just to kind of get to see what it
36:26 - looks like with different user
36:28 - configurations and you can see that
36:30 - because we changed the opacity to be
36:32 - lower this looks fine even in dark mode
36:34 - so it's always good to make sure that
36:36 - you're going to work with the different
36:38 - settings that people have here
36:42 - great so we have gone and
36:45 - built our little bit of bottom text here
36:47 - that we're going to showcase
36:50 - uh
36:51 - great question uh
36:54 - i'm that's asking a great question of
36:55 - hang on a second this is saying hello
36:57 - world that doesn't seem like it should
36:59 - be the text that we have and that's
37:01 - exactly right so that's gonna be the
37:02 - last step we're gonna have here is we
37:04 - don't want this to say hello world all
37:06 - the time right and in fact we could make
37:08 - this say something like
37:09 - next question
37:11 - but maybe we're going to use this in a
37:12 - lot of different places maybe at the
37:14 - beginning of our application we want
37:16 - there to be a bottom bar that says let's
37:18 - get started or something like that so
37:20 - let's not restrict it to one bit of text
37:23 - let's let people using it decide what
37:26 - they want the text to be
37:27 - and then just display that text
37:30 - right here
37:31 - as an excellent point is why restricted
37:34 - at all to like certainly why have it say
37:36 - hello world
37:37 - and then why restricted at all we can
37:38 - just go ahead and have the text be
37:40 - anything that people want to be putting
37:42 - in
37:43 - so this is test text
37:47 - now our view is flexible enough to be
37:49 - putting in any text that uh
37:52 - whatever callers are asking for
37:55 - okay so now we can go ahead and add that
37:57 - bottom text to our content view
38:00 - so here we can go ahead and write at the
38:02 - bottom we can go ahead and add our
38:06 - content what is it called our bottom
38:08 - text
38:10 - and we can have it say
38:12 - next our next question
38:15 - okay well this is good but it's not
38:19 - great right now because this is always
38:21 - there and we're not adding logic for it
38:23 - yet but people shouldn't get to see the
38:25 - next question
38:26 - when they haven't answered the first one
38:28 - they shouldn't get to see a little bar
38:29 - telling them to go next they should need
38:31 - to wait and answer something and then
38:33 - have disappear
38:34 - so how can we fix that
38:36 - well we could try adding this disabled
38:38 - kind of elements but an easier way to do
38:40 - that
38:43 - is by using a conditional
38:45 - if you've looked at our kind of
38:46 - conditionals uh and conditional logic
38:48 - force at swift
38:50 - you might have seen that in swift if
38:51 - you've seen that in other languages it's
38:53 - a very common framework you can use an
38:56 - if statement to make views appear if
38:58 - certain conditions are true
39:00 - so we can say if the guest index
39:03 - isn't nil
39:06 - then show the bottom text
39:08 - and if it's not then don't show anything
39:11 - then we can go ahead and when we run
39:13 - this here we can see that it's first
39:16 - shows nothing
39:18 - as we click on something
39:20 - ben we got the bottom text appearing
39:22 - because now the guess index isn't no
39:24 - it's marked a state so it knows that all
39:27 - of our views might change and be laid
39:29 - out differently as the state changes
39:32 - so a great tool you can be using is a
39:35 - state marker with different properties
39:36 - you're interested in gives you a lot of
39:38 - power here as well
39:40 - uh
39:41 - question is swiss faster using c that's
39:44 - a great question and a lot of it depends
39:46 - on what you mean by faster uh
39:48 - running swift code is usually slower
39:51 - than running c code c is much lower down
39:54 - as a language it's much closer to kind
39:56 - of the you know binary and assembly and
39:59 - the real nuts and bolts of how
40:00 - programming works so it has a faster way
40:03 - to give instructions to it but it's a
40:05 - lot faster to write swift code than c
40:07 - code because there's a lot of powerful
40:09 - abstractions that you get access to that
40:11 - make it a lot easier to reason about it
40:14 - uh if you really want to go deep into it
40:16 - aaron you can also build ios
40:18 - applications using objective-c which was
40:21 - apple's old framework i think that's
40:23 - actually one of our questions
40:25 - is that our uh
40:28 - yes what language did ios developers use
40:30 - before swift is actually objective c as
40:33 - the language there and you can write c
40:36 - in objective c and it's uh can let you
40:39 - do some very powerful fast things but
40:41 - it's also very cumbersome to keep track
40:43 - of
40:44 - so lots of fun detail to get into there
40:46 - for sure
40:48 - uh okay so we've gone and now our
40:50 - application works we can show
40:53 - we have a stateful view
40:55 - our colors change as we start editing
40:57 - our application or rather as we start
40:59 - making guesses and this next bar can
41:02 - appear
41:03 - let's do one last bit of refactoring and
41:05 - then we'll take a look at how we can
41:06 - build out some more
41:09 - stateful prop some more stateful views
41:11 - and some more powerful things we can do
41:13 - with swift ui
41:15 - this is still called content view which
41:17 - is fine but it's not a great name for
41:19 - what this is here it would be great if
41:22 - this could just be called game view so
41:24 - that it was more clear what purpose it
41:26 - was solving
41:27 - now if we just write game view there's a
41:30 - bunch of places that that's going to
41:32 - give a problem because this preview
41:34 - doesn't know
41:35 - how to change it and this text is still
41:37 - wrong and our main application doesn't
41:39 - have a content view anymore so it's
41:40 - going to complain
41:42 - this is a fantastic tool that you get in
41:44 - swift which are using xcode which is if
41:47 - you right click on
41:48 - the name of a structure
41:50 - click on refactor and then mouse over to
41:52 - rename
41:54 - it will think for a second and tell you
41:55 - all the places in your whole application
41:57 - you use it
41:58 - type in whatever name you want
42:01 - and it goes and updates the name of the
42:02 - file the name of the view and every
42:05 - place it's called right here
42:08 - so that's a great trick that you can use
42:10 - if you are
42:11 - dissatisfied with the decision that you
42:13 - came to when you named something you can
42:15 - go ahead and change that
42:18 - okay
42:18 - so
42:20 - we have gotten the gist of where our app
42:23 - is gonna get to here we're gonna take a
42:25 - little bit of a segue here and build out
42:27 - some controls that maybe aren't the most
42:30 - useful for this particular quiz
42:32 - application but are great tools to be
42:34 - using in other applications that you
42:36 - build out
42:37 - yeah and i'm not uh the there's a great
42:39 - question how do you actually move to the
42:41 - next question uh the preview of that is
42:44 - we have models which dictate what the
42:46 - questions are
42:47 - we have views which dictate what should
42:50 - be shown
42:51 - and what we're going to go to cover in
42:53 - the next session is a concept of a view
42:56 - model
42:57 - which mediates between models and views
43:00 - so and again this is all built out in
43:03 - the could coming track is going to
43:05 - preview there but the basic idea is
43:07 - we're going to build out a game model
43:10 - which knows what question we should be
43:12 - at
43:13 - and where it's going to be responsible
43:15 - for powering our application
43:17 - so i'll leave you a little on a little
43:18 - bit of a cliffhanger for that as i
43:20 - previews a little bit more you can do a
43:22 - state because it's a little bit of a
43:24 - larger topic and i want to make sure
43:25 - that i can give it its to
43:28 - do merit as something that's interesting
43:30 - but that's how you can kind of preview
43:31 - that
43:33 - so let's go ahead and work a little bit
43:35 - more with state and just see some more
43:37 - controls we can add
43:38 - so let's leave on there for a quiz and
43:40 - say all right let's say we want to add a
43:42 - little controls view that had some
43:44 - controls that we could be using for a
43:46 - quiz
43:47 - uh i'm going to show you how you can
43:48 - build a template for that and then you
43:50 - can build in whatever controls you'd
43:52 - like uh and then this as a kind of
43:55 - lead-in for how to work with
43:57 - flexible uh controls in swift ui
44:02 - to get started with that we're going to
44:04 - want to have another view we can display
44:06 - right now our application is a single
44:08 - view just shows a game view
44:10 - we're going to want to start by adding a
44:12 - tab view which is a very common
44:14 - structure where there's a couple things
44:15 - at the bottom if you go open gmail or
44:17 - yelp or facebook tech talk or whatever
44:20 - there's probably a bar at the bottom and
44:21 - there's multiple things you can tap on
44:23 - it's very easy to build that kind of
44:25 - deal in swift so let's take a look at
44:26 - how to do so
44:28 - it's a new view so let's go ahead and
44:30 - add
44:32 - a new file
44:34 - which is going to be a swift ui view
44:36 - which is going to be called our main tab
44:38 - view
44:43 - our main tab view is going to be the
44:45 - special swift type called a tab view
44:48 - which just says
44:49 - uh
44:50 - nest all of these views inside me and
44:52 - bring up that little bar at the bottom
44:54 - so people can switch between them
44:57 - then our tab view is going to have
44:58 - inside of it our game view
45:00 - which takes a question which we'll just
45:02 - go ahead and default to our first
45:04 - question for now
45:05 - then we just have to mark that this
45:08 - game view is a tab item
45:11 - which means it gets its own tab at the
45:13 - bottom and it needs a label which just
45:15 - takes in its
45:16 - name and takes in
45:19 - an image about what you wanted to what
45:21 - you want what symbol you want associated
45:23 - with it
45:25 - if we take a look at our preview here
45:27 - you can see that it's exactly the same
45:29 - except we have this game at the bottom
45:31 - that's our label
45:32 - this system image then we can choose
45:34 - from what's called any of sf symbols
45:37 - it's a separate application that you can
45:39 - go ahead and download but sf symbols has
45:41 - all the kind of stock symbols that you'd
45:44 - expect to see in a regular uh ios
45:47 - application
45:48 - let's go ahead and pick one of these
45:50 - because we have a game that we're
45:51 - building here so let's go ahead and use
45:52 - the game controller you just go ahead
45:54 - and put the string right in here
45:56 - and then you can just see it updating we
45:58 - can make this whatever we wanted we can
45:59 - make this uh a person
46:02 - we could make it a sunrise
46:04 - nice to make it a anything that we
46:06 - wanted we could go ahead and put in here
46:08 - let's go ahead and change it back to
46:10 - that game controller
46:12 - great while we're at it you can see that
46:14 - this is totally flush against the bottom
46:16 - which isn't fantastic so let's just add
46:17 - a little bit of padding there
46:19 - and we can do that by just taking uh
46:22 - this
46:23 - whole v-stack
46:26 - and then just add a little bit of
46:27 - padding to it and that should do totally
46:29 - fine
46:30 - it's padding
46:32 - bottom
46:33 - so just pad a little bit to the bottom
46:36 - and then we look at our
46:37 - view here
46:41 - and resume we can see that just gave a
46:43 - little bit of breathing right here so
46:45 - having these canvas previews is a really
46:47 - easy and compelling way to look at uh
46:50 - kind of how things are changing what's
46:52 - different
46:53 - okay
46:54 - the last thing we'll do is we want our
46:55 - application to start on the tab view so
46:58 - in our quiz app right here
47:00 - instead of starting on a game view let's
47:02 - start in the main tab view
47:06 - now that means when we build it in the
47:08 - simulator it's going to know the right
47:09 - place to start as well and this is what
47:11 - people will see on their phone
47:13 - great so now we're all set up to have
47:15 - another view where we can start messing
47:17 - around with some other staple properties
47:19 - in swift ui
47:21 - so let's go ahead and add another view
47:23 - that we're going to call controls view
47:28 - controls view
47:31 - right here
47:33 - and then let's go and tab view so that
47:36 - we can see something when it opens up
47:38 - we'll have a controls view
47:39 - this will be a tab item
47:42 - it's going to take that label we're
47:43 - going to call it controls
47:45 - we're going to give it a system image
47:48 - of let's say gear
47:50 - it's a good controlling kind of thing
47:54 - and as this updates now we can see this
47:56 - just pops up which is great and when we
47:59 - run this order in our simulator it just
48:01 - switches back and forth between these
48:04 - again so if you like super flexible
48:06 - framework uh very easy to get started
48:09 - and work with once you kind of learn a
48:10 - couple basic uh views that you can go
48:12 - and combine unless you build some things
48:15 - that look just like ios applications
48:17 - very quickly so i'm i i'm a big fan of
48:20 - it as a framework i think it's a great
48:22 - place to get started when you're trying
48:23 - to build your own applications
48:25 - so let's go ahead and build out this
48:27 - controls a little bit here so that we
48:28 - have uh can see a little bit more about
48:31 - what these stateful properties look like
48:33 - and it's do i
48:35 - okay
48:36 - okay these controls aren't really going
48:39 - to connect to our game very well think
48:42 - of this as more of a thought exercise
48:44 - template and how can you use controls to
48:47 - do something in an application and how
48:49 - can we use more stateful properties to
48:52 - be powering our application
48:55 - so
48:56 - let's go ahead and start building what
48:58 - this view looks like here
49:00 - go ahead and make a v stack uh we'll
49:02 - have some text at the top just letting
49:04 - people know that it's got controls
49:07 - we saw we could do this using the
49:09 - attributes editor and the object library
49:11 - you can also just type in the editor
49:12 - once you're more familiar
49:15 - uh
49:16 - yeah they they the little icons at the
49:18 - bottom are just there to control which
49:20 - view you're looking at so in the main
49:22 - tab view we can navigate between
49:25 - different things
49:26 - so if you're using like facebook maybe
49:28 - you've got a you know your profile is
49:30 - one of these tabs at the bottom
49:33 - so
49:34 - that's what we're going to be using it
49:35 - for here it's just a little kind of
49:37 - forms window just to show like settings
49:39 - we could be adding to an application
49:42 - so let's say we've got some controls we
49:45 - can go ahead and give this a font to
49:46 - make it a little bit bigger
49:48 - give this let's say a large title
49:52 - add some space put that up at the top
49:55 - give a little welcome message here
49:58 - to say let's say welcome name
50:03 - it's the person that we might want to be
50:04 - welcoming
50:06 - and then actually so that space should
50:08 - be there
50:10 - yeah
50:11 - let's give that a little padding the
50:12 - spacer a little down there
50:14 - okay
50:18 - okay so we've got our controls we can
50:20 - welcome people into the controls it's
50:22 - maybe something that they can
50:23 - reconfigure
50:24 - uh and then just to mess around with the
50:26 - time we have left and kind of show some
50:28 - things you can be doing let's just make
50:29 - a bunch of shapes up here and control
50:31 - how many shapes that we have
50:34 - uh so that we can kind of showcase a
50:36 - little bit about how these controls work
50:39 - exactly exactly so it's like i'm i'm
50:42 - just kind of showing how this template
50:43 - works but uh later you can try to figure
50:45 - out things like changing font size or
50:48 - changing the sound or turning on
50:50 - animations all that kind of stuff that
50:51 - you might have in a game it's exactly
50:53 - the right kind of use case
50:55 - uh
50:56 - so let's go ahead and display a bunch of
50:58 - circles just to kind of show something
51:00 - that we could be changing here
51:03 - so we're going to have one another of
51:04 - these four inches
51:06 - be displaying let's say
51:08 - five shapes
51:11 - and let's just display five circles
51:13 - right here
51:17 - meet so we have those in our h stack
51:20 - uh and we have our kind of controls up
51:22 - here
51:23 - so what does this do right now doesn't
51:25 - do anything just has a bunch of shapes
51:27 - has a name right up here
51:29 - so
51:30 - let's let's figure out how we can
51:32 - control what this text reads like at
51:34 - least inside this view instead of saying
51:36 - in just the string name be great if it
51:38 - had they could enter in their own name
51:40 - and then this would update to reflect
51:43 - later on and either in other sessions
51:45 - here or in other skill paths that we
51:47 - cover in codecademy we can look at how
51:49 - to translate information on one view and
51:52 - pass around to other views but for now
51:54 - let's just look at how we can mess
51:55 - around with this view
51:57 - let's have some name property
52:00 - which let's just say is called user
52:02 - and let's go ahead and have this text
52:04 - refer to the user name up here
52:08 - so this should update and just say hello
52:10 - user instead of hello name or welcome
52:12 - user
52:13 - now let's give our users a chance to
52:15 - change this around so that they can put
52:17 - their own name there
52:19 - we can do that using a form which is
52:21 - just a swift ui way to build some
52:23 - controls you want to be adding
52:25 - that should be inside the v-stack
52:29 - and inside this form we can add a text
52:32 - input
52:33 - or text field excuse me
52:35 - which takes in
52:37 - like a placeholder screen of like what
52:39 - it needs what it should read like when
52:41 - they haven't entered anything and then
52:43 - something called a binding
52:44 - which is interesting we haven't seen
52:46 - that concept yet
52:47 - let's start with the easy one what
52:49 - should it read when there's nothing
52:50 - there apple loves doing this they have
52:52 - johnny appleseed everywhere in their
52:53 - demos so you can just copy that
52:56 - just some kind of default name
52:58 - and for the text it wants a binding to a
53:01 - string
53:03 - bindings are really interesting concepts
53:05 - what they mean is that anything that
53:07 - gets entered into this text field
53:09 - will change one of these variables
53:11 - around in real time
53:14 - to have a binding to something it needs
53:16 - to be marked as state
53:18 - because as it changes the rest of our
53:21 - view might change as well
53:23 - so we can make this a binding to name by
53:27 - using this weird
53:28 - dollar sign syntax
53:30 - which gives us a binding to the setup
53:32 - right here
53:35 - now what we can see is that we have to
53:38 - do
53:39 - preview loading
53:42 - okay
53:44 - great so we've got this user down here
53:47 - and when we run this we can see as we
53:49 - edit
53:51 - in real time any text that depends on
53:54 - this goes and updates which is really
53:56 - cool
53:58 - we can also see that when it's blank
54:00 - this says johnny appleseed which is the
54:02 - string that we put in right here at the
54:03 - beginning and we can put in our own name
54:06 - or anything you like and it will go
54:07 - ahead and display that
54:10 - so
54:11 - for now this doesn't do a lot in the
54:13 - context of our application but it's a
54:14 - great demonstration of what you can be
54:16 - doing with these kinds of views here
54:19 - i think it was time to showcase one
54:21 - other cool thing you can be doing with
54:23 - controls and that's changing around
54:26 - numbers so we saw this change as text
54:28 - you can also have controls that change
54:30 - numbers
54:31 - right now we have five circles let's say
54:34 - we wanted more or less how can we do
54:36 - that
54:37 - we can make another property
54:40 - which is going to keep track of how many
54:42 - shapes we have
54:45 - and instead of our for each just looking
54:48 - at five we can tell it to go to the
54:50 - number of shapes we have
54:53 - one
54:54 - slightly strange note is four eaches get
54:57 - a little bit confused when numbers
54:59 - change under them
55:00 - so you have to add this little id
55:02 - property to say no don't worry
55:05 - just keep track of the things that i
55:07 - give you and don't worry if the number
55:09 - changes
55:10 - again we go much more into this in the
55:11 - skill path but
55:13 - it's a very common error you'll get as
55:15 - 4hs have numbers that change you just
55:17 - need to add this reminder that it should
55:19 - keep track of the different elements
55:23 - so
55:24 - now we are going up to the shape count
55:26 - let's go ahead and make sure that this
55:27 - still shows us the five circles
55:30 - it does great
55:32 - now we can add another control that lets
55:34 - us change how many circles there are
55:37 - uh another good control is called a
55:39 - stepper that's a thing that makes a
55:42 - little plus and minus button that you
55:44 - can use to modify uh different bits of
55:46 - text here
55:47 - so we can go ahead and make a stepper
55:49 - that has
55:50 - let's say a text of number of shapes
55:54 - and then just displays the shape count
55:57 - the value reflects uh what it should be
56:01 - tracking and linked to yeah if he has a
56:03 - gun
56:04 - uh
56:04 - and then we can go ahead and
56:07 - say what the range is of how far it
56:09 - should be going so let's just say it
56:11 - goes from one to eight
56:16 - okay
56:17 - now we have a text field which reflects
56:19 - our user which we can go ahead and
56:21 - update
56:23 - and then we have our number of shapes we
56:25 - can control
56:26 - by clicking on the minus here or the
56:28 - plus here
56:31 - so again right now this doesn't do much
56:33 - for the rest of our game application but
56:35 - it's a great uh showcase of some things
56:38 - simple things you can do with forms that
56:40 - are really powerful with very little
56:42 - code that you're writing which is pretty
56:43 - neat
56:44 - so as we're adding more shapes we can
56:46 - see up gets up to eight and that's as
56:48 - many shapes as we said that we were okay
56:50 - with the getting before capped out
56:53 - we can go back down to one and we can't
56:55 - get down to zero because we said that
56:57 - step the stepper had to have a minimum
56:58 - of one and we can set that up here as
57:01 - well
57:02 - uh you can have the shapes as
57:05 - yeah you could you could absolutely do
57:07 - that that is a fun idea let's see if we
57:09 - can do that i can the number of shapes
57:11 - see the count of how many we have here
57:14 - uh
57:15 - yes but then this stepper wouldn't do
57:16 - anything
57:18 - but we can do it let's let's go ahead
57:19 - and take a look at what that looks like
57:21 - so let's say that we're going to go to
57:23 - uh
57:24 - name dot count instead
57:27 - and then get rid of this stepper and
57:29 - this is just messing around but this is
57:30 - exactly the right kind of intuitions to
57:32 - have about how the language how how ui
57:34 - works
57:35 - now as we change the number of letters
57:37 - here
57:38 - it displays an extra circle for each of
57:41 - the letters in the name
57:45 - which is super cool as we see getting
57:47 - smaller and smaller as we keep adding
57:49 - more and more letters in
57:52 - and if we get down to zero
57:54 - then it just goes away entirely
57:58 - so just a cool thing that you can be
58:00 - doing uh that might be a little
58:02 - confusing to a user if they didn't know
58:04 - that was gonna happen from it but it's a
58:06 - fantastic way to demonstrate of how you
58:09 - can connect different properties to each
58:10 - other and how once you have one of these
58:13 - stateful properties as we've been
58:14 - talking about the session
58:16 - the views can redraw themselves and
58:18 - update in any kind of way that you like
58:21 - uh based on this view changing
58:23 - yeah this is pretty cool
58:25 - so i'm gonna go ahead and revert this
58:27 - back here but you can absolutely change
58:28 - that on your own and mess around with it
58:30 - to make it work in whichever way you'd
58:32 - like to
58:36 - okay
58:37 - so
58:38 - let's do a little bit of recap the last
58:40 - couple minutes we have uh if you have
58:42 - questions you'd like to ask about
58:43 - anything we've covered here feel free to
58:44 - start getting into the chat uh and i
58:46 - might be able to have it take a couple
58:47 - of minutes where we can answer some of
58:49 - those
58:50 - but to recap what we did for the first
58:53 - session
58:54 - is we started at our game view
58:56 - and i'm gonna cheat a little bit and
58:58 - because i've been using uh
59:00 - github for some source control
59:04 - i can show all the things we did
59:05 - so we used to have this question right
59:08 - up here that was hard coded and these
59:10 - possible answers that were hard-coded we
59:12 - replaced those with a single question
59:14 - we then went and added a guest index
59:17 - property that was totally new
59:19 - to represent the guest index we took all
59:22 - these things that used to refer to these
59:23 - hard-coded strings inside of our
59:25 - structure and we changed them to refer
59:27 - to this question that we built out in
59:29 - our question model
59:31 - then we use this guest index property by
59:33 - making this new method color for button
59:36 - which uh instead of just dictating uh
59:39 - well we didn't have anything before
59:41 - instead of everything being clear
59:42 - our buttons were now smart enough to
59:44 - know how to ask the right question so
59:47 - that they get what color they were
59:49 - depending on whether they were the
59:51 - button at the correct index
59:53 - and whether the user had guests had made
59:55 - a guess at all
59:57 - and then we could get to see if it
59:58 - should be clear green or red
60:01 - we then added that as a property to each
60:04 - of the answer buttons
60:05 - and then went and updated the guest
60:08 - index once the user tapped on a button
60:11 - by changing our print statements to be
60:13 - this new method that the user could pass
60:16 - in when they were building a button for
60:17 - the first time
60:20 - lastly in this view we added in this
60:22 - disabled state so that once they tapped
60:24 - on something
60:26 - none of the other buttons were
60:27 - operational and we added this bottom
60:30 - text that showed up that just said next
60:32 - uh but this is nice centered blue
60:34 - highlighted kind of thing once the guest
60:37 - index wasn't no
60:39 - from there our apps kind of poised and
60:41 - ready to go to be set up for our session
60:43 - next week where we start to talk about
60:45 - how do we present other questions using
60:47 - best architectural practices which will
60:49 - be the mvvm uh architecture which we'll
60:53 - get into then
60:54 - uh and we took a little bit of a segway
60:56 - into looking at some more controls in
60:58 - swift ui to try to figure out uh how can
61:01 - we just make more stateful properties
61:04 - and have our views depend on them in
61:05 - interesting ways that we can control
61:07 - directly and we saw we can do that by
61:09 - using a form and some common inputs like
61:12 - a text field and a stepper
61:14 - and then we connected those by using a
61:16 - tab view so that we could have a single
61:19 - place our application would start
61:22 - uh so that a single place our
61:24 - application would start so that as it
61:26 - began people would know
61:28 - uh
61:32 - so people can see and choose between the
61:35 - controls and the original game we had so
61:38 - we've seen a lot of new stuff in the
61:40 - session today if you look at the link
61:42 - that i'll go ahead and give here as well
61:44 - it's a slightly different version that
61:46 - we built out because as you're building
61:48 - things live you often make some slight
61:50 - adjustments
61:51 - but if you take a look at the link here
61:54 - this is more or less the application
61:56 - that we built out with a couple extra
61:58 - features that we didn't quite get time
61:59 - for so if you'd like to review any of
62:02 - the code from here take a look at it
62:04 - feel free to go ahead onto that link
62:06 - there and then next week we'll be taking
62:08 - a look as you mentioned at how to make
62:11 - other questions show up
62:12 - so that when we click on this next we
62:15 - get to see another question show up and
62:18 - that'll be into building view models so
62:20 - that we can be connecting a game model
62:24 - and our views so
62:26 - see everyone there next week uh if you
62:28 - have any other questions and feel free
62:29 - to let you know in chat here or you can
62:32 - always go into our discord or to ask
62:35 - anything on our forums at discuss
62:37 - codeacademy.com
62:39 - so it has been a pleasure uh getting to
62:41 - work through some more of our quiz
62:43 - application with everyone here uh thanks
62:45 - everyone who's tuned in for this time
62:46 - and then excited to see people back next
62:49 - week as we continue building this
62:50 - application out
62:52 - so
62:53 - thanks to all uh then we'll go ahead and
62:55 - end the stream here