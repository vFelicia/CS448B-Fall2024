00:00 - cool um so hey everybody
00:03 - my name is carolyn i'm a curriculum
00:05 - developer
00:06 - here at codecademy um and this is alex
00:11 - fellow curriculum developer this is our
00:14 - live stream series uh on so we're doing
00:17 - live streams every tuesday
00:18 - and thursday tuesdays are open to
00:21 - everybody and thursday
00:22 - are pro sessions so throughout this live
00:25 - stream series we've been covering
00:28 - the visualize data with python path
00:31 - on our site um so that's what i have
00:34 - open
00:35 - right here um alex we can see that right
00:37 - uh
00:38 - i don't see yes i do see screen sharing
00:40 - yes okay awesome
00:41 - um so this is where uh we're at
00:45 - um throughout the past few weeks we've
00:48 - covered
00:48 - um kind of review to intro to python
00:52 - um python lists graphing and python
00:57 - which is based on matplotlib which is a
01:00 - popular python library
01:02 - we also did
01:05 - quite a bit of material on pandas which
01:08 - is
01:10 - basically how to create data frames in
01:12 - python
01:13 - there's a bunch of uh functionalities
01:16 - within pandas
01:18 - and today uh that's leading up to today
01:21 - uh where we're going to be doing more
01:23 - advanced graphing with
01:25 - a python library called seaborne and
01:28 - it's specifically a data
01:30 - visualization library it's built on top
01:33 - of
01:34 - matplotlib which is like a more basic
01:37 - library
01:38 - and it also works really well with
01:40 - pandas which is where the
01:42 - um where we can create data frames
01:45 - and uh we're going to be doing the intro
01:47 - lesson to seabourn today
01:49 - so i'm going to click through to that um
01:52 - well actually let's
01:53 - take a look at this module first um
01:57 - so before i go ahead with all that um
01:59 - please share your name
02:01 - and your location and the chat it would
02:03 - be great to
02:05 - uh get a sense of you know where all our
02:08 - learners are coming from
02:09 - yeah i know we're we're streaming on
02:11 - multiple places right now so we're
02:12 - streaming on like facebook and twitter
02:14 - um carolyn and i are mostly gonna be
02:16 - looking at the youtube
02:17 - chat so i know on facebook there should
02:19 - be a link to the youtube channel
02:21 - um i'll try to open up the facebook chat
02:23 - as we as we get started as well just so
02:25 - i can kind of look in there in case
02:26 - anyone who's commenting in there
02:28 - but we're mostly looking at um youtube i
02:30 - know twitch
02:31 - we're also streaming there which uh
02:34 - almost nobody knows about our channel is
02:36 - like just beginning to grow
02:37 - um so wherever you are we're happy to
02:40 - have you
02:41 - and then also if you are watching this
02:42 - in the um
02:44 - recorded version on youtube we put all
02:46 - these videos up on our youtube page
02:47 - after the fact um so if you're watching
02:50 - the recorded ones
02:51 - we are streaming these live every
02:53 - tuesday at 1 pm eastern time
02:55 - and uh if you're watching the recorded
02:57 - version you can always go back to the
02:59 - very start of this series this is like
03:00 - the 11th video
03:02 - um hopefully i think even if you've
03:03 - missed the other uh the other
03:05 - videos this will still make sense and
03:07 - you'll still be able to follow along but
03:08 - if you want to watch the whole thing
03:10 - uh you know there's now 11 hours of
03:11 - content for you guys to go through so
03:13 - um yeah happy to have all of you here i
03:16 - see everyone in the youtube chat
03:18 - we have uh someone from the philippines
03:20 - juan
03:21 - talia i think i recognize you we've seen
03:23 - you before so yeah nice to have
03:25 - familiar faces awesome um
03:28 - cricket florida is that a town or
03:32 - yeah it must be okay or is it a cricket
03:35 - effect
03:35 - [Laughter]
03:38 - um i'm down in atlanta so kind of close
03:42 - to you janice and then
03:43 - carolyn are you still in uh i'm in new
03:45 - york or queens yeah
03:46 - yeah i'm in queens nice yes
03:49 - um feel free to uh
03:53 - keep chatting in the chat we also have a
03:56 - q a feature can you all see that
03:59 - oh cool egypt cool the q a might
04:03 - be a part of the zoom only caroline i
04:04 - don't know if uh okay exists on youtube
04:06 - but so if you have questions you can
04:08 - just
04:09 - put that directly in the chat yeah and
04:11 - i'll keep i'll keep the chat open and
04:12 - watch
04:13 - but uh yeah let's let's go ahead and
04:14 - dive right into this this seabourn stuff
04:17 - um i'm really excited for seabourn this
04:20 - is kind of the very end of this module
04:22 - and seaborn really kind of combines a
04:24 - lot of the
04:25 - things that we've learned so far
04:26 - especially all of the pandas content
04:28 - that we
04:28 - went over in the past couple of weeks so
04:30 - we can um yeah so let's let's go and
04:32 - dive right in
04:34 - cool um and i just want to give a
04:36 - slightly more context about this module
04:38 - right here
04:39 - um we're just we're going to take it
04:42 - slow through the intro lesson today
04:44 - but um in this module we also have
04:47 - um a follow-up lesson on distributions
04:51 - quiz to kind of assess your
04:53 - understanding
04:54 - and these fun articles that um
04:57 - are really good uh kind of primers
05:01 - for um all of the
05:04 - the the customizations you can put into
05:07 - seabourn
05:08 - um like the the style of the visual
05:10 - visualization the colors
05:12 - there's tons of colors that come with
05:13 - seaborne and
05:15 - a project and there's also a
05:18 - more cumulative project where you take
05:20 - this off of our site and you do this on
05:22 - your own computer so that's something
05:24 - that we might touch on on thursday
05:26 - but let's dive into the intro lesson
05:29 - today
05:34 - um you have such an international crew i
05:38 - know it's funny it's funny we kind of do
05:39 - these in the middle of the day in the
05:40 - u.s time so we get a lot of folks
05:42 - who i don't know if you're like watching
05:44 - this over dinner or something but it's
05:45 - funny that we get a lot of europeans and
05:48 - yeah um i mean it's great to code at
05:51 - night i guess
05:53 - uh cool so um we have our little
05:56 - intro narrative here um
06:00 - this uh intro we're primarily gonna be
06:03 - working with bar
06:04 - charts bar charts with like statistical
06:06 - analysis built in
06:09 - so just to reiterate again
06:13 - it's seaborne is a python visualization
06:17 - library
06:19 - and it's based on matplotlib um but it
06:22 - improves it in
06:23 - a couple of different ways um alex did
06:25 - you want to touch on this more
06:27 - yeah so this is something that i it was
06:29 - kind of really highlighted to me as i've
06:31 - been doing this series where
06:33 - uh you know i ran some of the sessions
06:35 - on matplotlib where we're like trying to
06:36 - build a bar chart
06:38 - and you really kind of need to build
06:41 - everything by hand i would almost
06:42 - describe where it's like okay i want to
06:43 - build a bar chart and i need to give it
06:45 - specifically
06:46 - the list of the values in the x-axis
06:49 - and the uh specifically a list of the
06:52 - things in the y-axis that go with it
06:54 - um or you may remember like trying to do
06:56 - a side-by-side
06:58 - bar plot which is kind of what carolyn
07:00 - is showing on the right side of her
07:01 - workspace right now
07:02 - like that was a huge pain in the butt
07:04 - where it was like okay this bar needs to
07:06 - be like .8
07:07 - units to the right of the other bar and
07:09 - it was all this like really crazy
07:10 - horrible math that we had to do
07:12 - and uh frankly i was like surprised that
07:15 - matplotlib
07:16 - was that kind of i don't even know how
07:19 - to describe it other than a hands-on
07:20 - where you really need to do a lot of it
07:21 - yourself
07:22 - and what's cool is that seabourn really
07:25 - simplifies
07:26 - a lot of this um and so
07:29 - i i was looking through this narrative
07:30 - this morning and we have things like
07:32 - th this quote that says seaborn natively
07:34 - understands pandas data frames making it
07:36 - easier to plot data from csvs
07:38 - that's definitely true um but i think
07:40 - that that's also true
07:42 - for matplotlib like in in our last
07:44 - session
07:45 - we showed hey we just we have this
07:47 - pandas data frame we have all of our
07:48 - data
07:49 - and now let's throw it into matplotlib
07:50 - and graph it and we could do that
07:52 - but really the power of seaborne is that
07:54 - it just makes it so much easier so
07:56 - both of them can use panda's data frames
07:59 - but like
08:00 - the syntax for seaborne just is so much
08:03 - more simplified that it becomes a ton
08:05 - a lot easier
08:08 - well um yeah and you can see this
08:12 - with this bar chart right here um it is
08:14 - pretty
08:16 - involved you know there's a lot of um
08:19 - different details right over here but
08:21 - this is all the code that's necessary to
08:24 - both load the data
08:25 - and to um
08:29 - to load the entire data and to also um
08:32 - graph the data
08:34 - yeah and again like another thing to
08:36 - point out that's different between
08:38 - seaborne and matplot web is even just
08:40 - like the error bars there
08:42 - if you look back to our previous um
08:45 - session about map
08:46 - lib or if you take those courses you'll
08:48 - see that we go through this big
08:49 - computation of like
08:50 - okay let me find the um you know the top
08:54 - of that blue bar
08:55 - let me get that value and then let me
08:57 - add on to the error that i computed and
08:59 - let me subtract the error that i
09:00 - computed
09:01 - and like you know we're just doing all
09:03 - of the addition
09:04 - subtraction all of the all this stuff by
09:06 - hand and you can see that
09:08 - uh if you look at the the code here we
09:11 - really don't need to do that at all it's
09:13 - in fact it's like a little bit
09:14 - um hard to even tell where the error
09:17 - bars are coming from by looking at just
09:19 - line 11 there
09:20 - um which i think has a downside and
09:22 - we'll touch on that in a little bit but
09:23 - it's like
09:24 - so much stuff goes into this seaborne
09:26 - graph with so little code
09:28 - um that it makes it easy but then maybe
09:29 - there's some downsides to that
09:31 - right um so the
09:35 - only instruction in this exercise is to
09:38 - import seaborn into your environment
09:43 - so this is the code to import
09:46 - um i'm going to paste it over here
09:50 - so um
09:54 - the graph is already there but um the
09:58 - this it's important to understand like
10:01 - this
10:02 - import statement even though it's one
10:03 - line seaborn
10:05 - does have dependencies on um
10:08 - importing pandas and importing
10:11 - matplotlib
10:12 - specifically the plt
10:16 - aspect of matplotlib so
10:19 - if we go to um the
10:23 - seabourn website um we can see
10:26 - um that you would have to install c
10:28 - board into your own computer if you were
10:30 - to code this
10:32 - in your own systems like python
10:34 - environment
10:36 - this is how you would install seaborne
10:39 - um
10:41 - i think it also if you go to this site
10:44 - it also tells you what kind of
10:45 - dependencies but
10:46 - feel free to visit that seabourn just
10:49 - look up seaborn python on google
10:52 - and it should lead you to the seabourn
10:55 - site where you can also
10:56 - look at the example galleries so let's
10:59 - go back to our lesson
11:01 - oh so we've imported seaborn
11:04 - um now we need to um
11:09 - we need to import data in order to graph
11:11 - it right so
11:12 - this exercise um we're
11:15 - simply going to be
11:18 - reading in a data frame using pandas so
11:21 - just to remind you what data frames are
11:25 - data frames are a data structure that
11:29 - puts your data into rows and columns
11:33 - so they're basically tables and you can
11:35 - read in a data frame
11:37 - from any csv files
11:41 - csv files being kind of uh they stand
11:43 - for comma separated values it's kind of
11:45 - the
11:45 - if you were to download a excel
11:48 - file or a google sheets file you would
11:51 - have the option to download that as a
11:53 - csv
11:53 - um probably like the most common type of
11:57 - data storage um or at least one of the
11:59 - most there's like you know there's other
12:00 - stuff as well but we work with csvs a
12:02 - lot
12:04 - yep so if you've been working with
12:06 - something on you know like google sheets
12:08 - or something and you want to see it
12:10 - graphed
12:12 - this is you just have to download the
12:14 - csv file
12:15 - um download download as csv
12:18 - and save it into your computer
12:23 - and from your python you just give it
12:26 - the either i mean this is right here in
12:30 - our own directory
12:31 - um but typically you'll have to add in
12:34 - the path to that file yeah i think
12:37 - that's a good point i think i think
12:38 - that's something that codecademy makes
12:40 - really easy for you and it's kind of
12:42 - a stumbling block for when people try to
12:44 - do this on their own computers
12:45 - so you'll see that if you look at the
12:48 - tabs on carolyn's text editor there
12:50 - you'll see that script.py and
12:53 - survey.csv both exist within the same
12:55 - folder
12:56 - and so if you were doing this on your
12:58 - own computer they don't have to be on
13:00 - the same
13:00 - in the same folder the the script your
13:02 - python script that you're running and
13:03 - the data that you're pulling from they
13:05 - could be in
13:06 - different places but if that's the case
13:08 - it takes a little bit more work
13:09 - to tell python where to look to find the
13:12 - data
13:13 - and so usually it's easiest to just like
13:14 - throw them in the same folder or at
13:15 - least for like a small project like this
13:17 - when you're just kind of playing around
13:18 - experimenting with graphs it's usually
13:20 - easy to just throw everything in the
13:22 - same folder and then you can
13:23 - directly reference the file name you can
13:25 - say i want survey.csv
13:27 - and python knows to look in the folder
13:30 - that's
13:31 - this you know in the same folder as
13:32 - script.py um
13:34 - if they're in different folders you'd
13:35 - have to do something slightly different
13:36 - that's definitely something that
13:37 - uh i know can trip up a lot of like
13:40 - brand new people where
13:42 - you know they download files and then
13:44 - they don't uh
13:45 - connecting their files together is kind
13:47 - of tricky
13:49 - yep um for sure um
13:53 - but we have the file here and
13:56 - um in the instructions here
14:02 - where we can read this line of code
14:06 - which is
14:06 - importing the
14:09 - file survey.csv into a data frame
14:13 - called we'll call the variable df and
14:16 - uh the pd here stands for pandas
14:20 - so we imported pandas and made a
14:22 - shorthand um
14:23 - called pd um so
14:26 - now that we've imported it into that
14:28 - variable
14:29 - we can inspect that data frame
14:33 - using head
14:38 - whoops okay so i have to add a print
14:42 - statement
14:45 - so very helpful error message
14:51 - cool um all right so we can see
14:55 - um the print statement
14:58 - uh makes the the csv file a lot more
15:02 - readable um we have four columns here we
15:06 - have patient id
15:07 - um we have gender we have an age range
15:12 - um and the response
15:15 - um well we don't know what exactly the
15:18 - context of this file is yet but we know
15:20 - it's a survey
15:21 - um
15:25 - and we've just printed the first five
15:27 - lines so that's what head does
15:29 - so if we wanted to print the whole thing
15:31 - we could just print df
15:33 - straight away yeah let's give it a shot
15:34 - see what happens yeah so then you can
15:37 - actually scroll through
15:38 - all the things um head is useful for if
15:41 - you just want to get like a little
15:43 - sample of the data
15:46 - yeah and again this is kind of uh
15:49 - dealing with this data frame is what we
15:51 - covered in our last two
15:52 - courses so if you go back and look at i
15:54 - think that's episode nine and ten it's
15:56 - going to be all about pandas but
15:58 - carolyn if you do like print df of
16:01 - a column name so in like square brackets
16:03 - if you put a column name
16:05 - um and the column name naming quotes and
16:07 - let's look at let's
16:09 - let's select one um let's do
16:13 - uh age range i think i have to put it in
16:17 - quotes like this
16:20 - cool yeah so now it just shows the age
16:23 - range column
16:25 - um this on the side right here is just
16:27 - indexing the
16:28 - the rows yeah and so this is the kind of
16:31 - stuff that we're now going to start to
16:32 - throw into
16:34 - seaborne to start graphing and again you
16:36 - could throw this into matplotlib to
16:37 - start graphing
16:38 - as well um but we'll see how it's um
16:41 - it's pretty easy to use these out of
16:42 - frames with c1
16:44 - cool um let's head over to the next
16:48 - exercise
16:52 - okay um this way
16:55 - since we already know how to load the
16:57 - data um
16:59 - if we just remember back to that first
17:01 - lesson we only need a couple of lines of
17:03 - code
17:04 - um so this lesson will just be um
17:07 - this exercise i will be covering like
17:10 - how to get your first
17:12 - bar chart up um
17:16 - so uh let's take a look at
17:19 - the file results.csv here
17:24 - um we have two columns
17:27 - uh gender and mean satisfaction
17:33 - and we're going to be plotting that data
17:37 - in this exercise but
17:40 - looks like this narrative gives us a
17:41 - little bit more of a story behind the
17:43 - data
17:44 - so this is this
17:47 - result is based on uh asking a thousand
17:50 - patients at a hospital
17:52 - how satisfied they were with their
17:53 - experience um
17:56 - the satisfaction is
17:59 - on a scale from 1 to 10 and
18:03 - 10 being extremely satisfied
18:07 - cool and so looks like results is
18:11 - just averaging those satisfactions by
18:14 - gender
18:14 - yeah and i guess one thing to note is
18:16 - that we we've already done that
18:18 - averaging so
18:19 - maybe something that we can try here
18:21 - after we go through this exercise is
18:22 - like
18:22 - copying the the real data set from the
18:25 - last exercise like the data set with the
18:26 - thousands of rows
18:28 - right and seeing if we can get the same
18:29 - results because i think one thing that
18:31 - we talked about here is how
18:32 - um c seaborn is going to automatically
18:35 - compute the mean
18:37 - and so it's a little bit strange here
18:38 - that we're like automatically computing
18:40 - the mean on this data set
18:41 - that we've already computed the mean on
18:43 - um so i'd be interested to see what
18:45 - happens if we can bring in
18:46 - the like full data from the other page
18:48 - um eventually but let's let's first walk
18:50 - through this exercise i guess
18:52 - cool um and the narrative
18:56 - is emphasizing here that uh it takes a
18:58 - lot of lines of code in matplotlib
19:00 - to get this bar chart right here
19:04 - um so we won't be doing this
19:08 - and we'll be using seaborn to accomplish
19:11 - basically the same thing yeah and that's
19:14 - kind of what i was talking about at the
19:16 - very start of this stream where in
19:18 - particular i'd like to highlight i guess
19:19 - the third line of code in that block
19:21 - the plt dot bar that's where you need to
19:24 - like
19:24 - specifically give it x and y values
19:27 - where
19:28 - the x values we're doing this range of
19:30 - length of df
19:31 - that's just to produce numbers basically
19:33 - one through in this case one through
19:35 - three because there's three items in the
19:36 - data frame but you can imagine that
19:37 - being one through
19:38 - a thousand and then the second thing
19:40 - that we're passing to that is
19:42 - the column uh the mean satisfaction
19:44 - column so again that's basically
19:46 - uh an array it's not technically an
19:48 - array it's a
19:50 - data frame series or it's a series from
19:52 - pandas but you can think of it as a list
19:54 - or an array of three things
19:55 - and so it's like that's way
19:59 - like that range length of df thing is
20:01 - just like such a pain in the butt
20:02 - because all you want to do is pass
20:04 - the numbers zero through three in this
20:06 - case or a thousand
20:07 - but it's like it's so hard it's so
20:08 - complicated it's so unwieldy and we'll
20:10 - see that
20:11 - uh we don't have to do any of that stuff
20:12 - in seabourn
20:15 - um oh my gosh it's storming outside
20:19 - yeah i saw those wires are hitting my
20:21 - window i saw that there was like a
20:22 - tornado warning right now in new york so
20:25 - if carolyn
20:26 - you know just like disappears maybe
20:28 - that's because her power went out
20:30 - uh the rain took me what happened
20:34 - um okay so uh
20:37 - the narrative suggests that we should be
20:39 - using a cborn function called
20:41 - sns.bar plot to do the same thing
20:44 - um and so it takes in three arguments
20:47 - takes in
20:48 - data which is a pandas data frame well
20:51 - we know how to
20:52 - import a data frame x
20:57 - is a string that basically specifies
21:00 - which column is going to be
21:02 - in the x part of the graph
21:06 - and it basically defaults that to our
21:10 - x label as well y
21:13 - is same thing as x but you know the
21:16 - y-axis
21:18 - um and it's the one that um
21:24 - will be automatically aggregated
21:28 - yeah automatically converted to the mean
21:31 - yeah so um by default seaborn is going
21:33 - to
21:35 - aggregate oh my god
21:39 - the outside is just
21:42 - yeah um it's gonna plot the mean of each
21:45 - category
21:45 - so um let's let's do this um
21:49 - checkpoint right here okay so let's
21:53 - save the loaded in data frame from
21:56 - results.csv
21:58 - into a variable called df okay so i'm
22:00 - going to write
22:02 - df equals to um
22:06 - i think it's pd right i want to say
22:09 - i want to ask panda to do this has a
22:13 - because it has a function called read
22:15 - csv
22:16 - and i'm going to give an argument um the
22:19 - name of the file
22:20 - i want is results.csc
22:23 - so let me run that code
22:28 - awesome so now
22:32 - to preview
22:35 - the data frame i'm going to print it
22:38 - cool so that looks like what we have um
22:42 - in results.csv but just formatted into
22:45 - the dataframe um
22:48 - and we're going to be uncommenting
22:52 - this sns.bar plot
22:56 - um code right here
23:01 - oh well somebody just gave me a
23:02 - hurricane update
23:04 - in the chat come on david thank you for
23:07 - uh
23:09 - telling carolyn if she has to go to her
23:10 - basement or something
23:12 - um wow yeah it's
23:16 - uh moving right over new york city
23:19 - and up the hudson river so hopefully it
23:21 - travels up the river soon
23:23 - um
23:26 - live coding as there's a live uh
23:29 - tropical storm going on
23:30 - yeah um
23:33 - cool okay come back to this um
23:37 - i've uncommented the sns dot bar plot
23:40 - line from the workspace
23:44 - um and we're gonna be filling in the
23:46 - missing values so
23:47 - whit is our uh data
23:51 - we've created a variable called df to
23:53 - store
23:54 - our data frame so the data is going to
23:56 - be
23:57 - our data frame pretty straightforward um
24:02 - and x um is going to be
24:06 - the name of the column that we want to
24:08 - use in
24:10 - the uh x-axis right so that's
24:13 - um and there's also csv it's going to be
24:16 - gender i'm gonna put that around quotes
24:19 - formatting is
24:20 - killing me okay um and then y
24:24 - uh is gonna be mean
24:28 - satisfaction all right so let's run that
24:32 - code
24:36 - cool um so that doesn't do anything yet
24:39 - because i didn't
24:40 - show it so just like matplotlib you have
24:43 - to
24:43 - um show the actual plot
24:47 - and if you were doing this not on
24:48 - codecademy the kind of distinction there
24:50 - is that whenever you call
24:52 - plot.show um that will kind of pop out a
24:55 - new window that where it shows your
24:57 - graph um
24:59 - as opposed to just showing on the right
25:00 - hand side yeah
25:02 - um so usually seaborn will aggregate the
25:05 - the y data um but in this case
25:09 - we only have three three rows and each
25:13 - um each gender only has one data point
25:17 - so there's it aggregates to just the
25:20 - same value anyways
25:21 - yeah so it's aggregating on a value of
25:23 - one right
25:24 - carolyn do you want to give a shot of
25:26 - going back to the old exercise
25:28 - copy and pasting that entire csv file
25:31 - and pasting it into results.csv
25:33 - and seeing if we can make the same graph
25:35 - yeah
25:36 - um or i can just uh copy this code right
25:40 - um yeah so yeah and i can just do
25:43 - satisfaction instead yes all right so
25:46 - let me go back to where we have
25:48 - the survey data okay
25:52 - um so
25:56 - we have our data frame um
25:59 - and in our data frame uh i'm gonna
26:03 - just so we can preview the entire data
26:05 - frame in there
26:07 - um cool so in this particular file
26:11 - or data frame we have four columns um
26:15 - and in this case the
26:18 - um the satisfaction is stored in the
26:21 - response column
26:23 - right so if we wanted to automatically
26:25 - average the
26:26 - um response column we would put that
26:29 - into
26:29 - the y-axis so
26:33 - let's see if this works i i certainly
26:39 - nice cool so it um
26:42 - it creates a bar chart and uh it
26:45 - averages
26:46 - each value for um female male
26:51 - yeah so it looks like it's a slightly
26:52 - different data set than what we were
26:53 - working before
26:54 - another one we had non non-binary um
26:57 - but yeah this is something that i wanted
26:59 - to point out where this is like
27:02 - you know cborn is great it makes it
27:03 - makes the code really easy to write but
27:05 - it also
27:06 - is in my opinion like slightly more
27:09 - dangerous than matplotlib because
27:11 - nowhere in
27:12 - that line 12 through 16 is it super
27:15 - obvious
27:16 - that the thing that we are plotting on
27:17 - the y-axis is the mean
27:19 - right we know it has something to do
27:20 - with response but
27:22 - there are obviously a ton of different
27:23 - responses in here and so
27:25 - um you know the thing that's actually
27:28 - shown there
27:29 - could be anything and so it's kind of on
27:32 - you to know that by defunct seaborn is
27:34 - going to when making a bar plot
27:36 - seaborn is going to uh make it the mean
27:39 - of all of the value all the x values so
27:41 - the the average of
27:43 - all of the female responses or the
27:45 - average of all the male responses
27:46 - right um so question for
27:50 - the chat um why would i not put
27:54 - age range um into y
27:57 - in this instance
28:01 - but yeah that's a that's an interaction
28:04 - well so yeah
28:04 - so i know that the chat is always like
28:06 - 20 seconds behind so maybe we can talk
28:07 - about this as they as they respond
28:09 - but um yeah so like what what kind of
28:13 - graph would you imagine by
28:15 - putting gender on the x-axis and age
28:18 - range on the y-axis that kind of graph
28:20 - would maybe be showing like
28:22 - like what would you be trying to answer
28:24 - with that graph or like
28:26 - you know do you have a graph in mind
28:27 - that you're trying to make doing uh by
28:28 - doing that
28:32 - um
28:36 - i think it's just a just like a um
28:39 - logistical question right like we don't
28:42 - have
28:42 - um well like it would just automatically
28:46 - do the averaging for us
28:47 - and like it wouldn't be a very
28:49 - interesting bar plot um
28:51 - because you don't need a bar plot to
28:54 - uh to illustrate the differences in the
28:58 - age average right yeah but maybe in like
29:02 - a
29:03 - a diff maybe in like a more um
29:09 - complicated story like that could factor
29:12 - in here
29:15 - i i wonder really quickly changing x to
29:19 - age range then we should see a couple of
29:20 - different uh we should see more than
29:22 - just two
29:23 - um bars on the x-axis yeah
29:30 - cool nice so it seems like the younger
29:33 - ones are really
29:34 - dissatisfied really dissatisfied right
29:38 - yeah the satisfied yeah um
29:42 - yeah that's interesting i i think
29:44 - another thing to point out is that
29:46 - like you said uh if we we can even try
29:49 - putting age range and though in the y
29:50 - column if we want and we
29:52 - i imagine unfortunately we won't see an
29:53 - error message because of the way that
29:55 - codecademy is set up in this exercise um
29:58 - but i think one of the reasons why that
30:00 - won't necessarily work is because
30:02 - age range is represented as a string
30:05 - right and so what does it mean to take
30:08 - the mean or the average of a string
30:10 - you know seaborn won't be able to
30:11 - automatically do that right
30:13 - um and already some thought went behind
30:17 - the creation of that age range column um
30:20 - because maybe the hospital was like it's
30:23 - more
30:23 - useful for us to um have these
30:26 - categories of age
30:28 - um to kind of um
30:32 - yeah to categorize our our patients
30:35 - instead of having like a gradient
30:37 - of ages um it might be more useful
30:39 - information
30:40 - um so that we would only end up with
30:42 - four
30:43 - um like categories within age then like
30:48 - a hundred and however long people live
30:51 - yeah
30:52 - and of course there's like tons of
30:53 - different there's tons of different ways
30:54 - to do that right there's
30:55 - yeah so don't even print because there's
30:58 - obviously an error going on behind the
30:59 - scenes i wish we could see the error
31:00 - message
31:01 - that might be a good thing to do on
31:02 - thursday
31:04 - um yeah but like you were saying
31:08 - um sorry i just lost my train of thought
31:11 - um
31:12 - oh the bucketing um so there's a couple
31:14 - of different ways to do that right
31:15 - there's
31:16 - uh you could do this like pre-processing
31:20 - task or this
31:21 - data cleaning task of okay i have my raw
31:24 - data i have every person
31:25 - you know has an a an age associated with
31:27 - them and now i want to bucket these ages
31:29 - together into
31:30 - 18 to 25 26 to whatever um
31:33 - you can do that through working with
31:35 - pandas right you can say okay i want to
31:36 - create a new column
31:38 - and you know um if their age is between
31:41 - 18 and 25 i want to mark that down as
31:43 - 18 to 25. so you can do that through
31:45 - pandas by like
31:47 - this process would traditionally be
31:48 - called like data cleaning
31:51 - or you could maybe use a different graph
31:53 - where a histogram as opposed to a bar
31:56 - plot
31:56 - a histogram specifically deals with that
31:59 - bucketing automatically so you could
32:01 - probably pass that data
32:02 - like the the original ages so
32:05 - like carolyn was saying a hundred
32:07 - different ages you know i'm 18 or
32:09 - 19 or 20 all the way up to 100 or
32:11 - whatever
32:12 - you could pass that data into a
32:13 - histogram and that might do some of the
32:14 - bucketing for you so there's like tons
32:16 - of different ways where you can solve
32:17 - these problems
32:18 - yeah um we kind of went on a tangent
32:21 - there
32:22 - but i think it's useful to just like
32:25 - demystify all this because it's not it's
32:27 - not just magic
32:28 - there's a lot of thought that goes
32:30 - behind um
32:32 - like even though this the code is short
32:34 - here it
32:35 - um there's a lot within it so i think
32:38 - it's useful to explain that
32:40 - yeah i see in the chat david is saying
32:43 - for some reason i'm not seeing the chart
32:44 - updates
32:45 - uh david are you working alongside us in
32:47 - your own version if you are then
32:49 - um there's probably an error somewhere
32:52 - in your
32:52 - um uh like a syntax error somewhere in
32:55 - your code
32:56 - again it's like one of the one of the
32:58 - hard parts about these
32:59 - lessons is because we want to show you
33:02 - the
33:02 - result on the right we kind of sacrifice
33:04 - the terminal which is where you would
33:06 - normally see the error messages
33:08 - um so i understand that that can
33:10 - potentially be a
33:12 - frustrating experience where it doesn't
33:14 - look like it updates and that's because
33:15 - there's an error message and we're not
33:16 - really showing you the
33:18 - the real error message
33:22 - um there's an another question from
33:25 - john which is do we
33:28 - um if we go to the seabourn site we can
33:32 - see different plot types in the package
33:34 - yes
33:34 - um so generally speaking for any
33:38 - um library uh you can
33:42 - you can sort of navigate like all of
33:44 - these uh different functionalities
33:47 - within
33:47 - the library it should all be listed um
33:51 - on the site and if i click on any one of
33:54 - these
33:55 - um well
33:58 - i guess my feedback for this is there
34:00 - should be more pictures since the
34:01 - visualization
34:02 - um library but yeah um you can
34:06 - read through all of these um great
34:08 - question john
34:10 - um all right so i'm gonna move into the
34:12 - next
34:13 - exercise um we just plotted our first
34:16 - bar chart
34:18 - um and this
34:21 - this exercise is gonna give us more sort
34:23 - of knowledge
34:24 - um behind like the aggregate statistics
34:28 - um that play into seabourn um so
34:31 - uh an aggregate all it is is a single
34:34 - number that's used to describe
34:36 - one set of data so um
34:40 - it so with seaborne bar charts that
34:42 - defaults to the average or
34:44 - the mean but um what other
34:48 - uh aggregates could there be
34:52 - um sorry i was worried i will have to
34:54 - like wait 20 seconds
34:57 - oh uh yeah i
35:00 - was responding in chat yeah so there
35:02 - could be other types of aggregates other
35:04 - than mean
35:05 - um which
35:09 - yeah uh that's that's a good question so
35:11 - given a
35:12 - given a thing of data how else could you
35:15 - aggregate
35:16 - that data and carol can you give like a
35:18 - definition of what like an aggregate
35:20 - even means
35:21 - yeah um so i just um i just said
35:24 - aggregate
35:25 - is it's a single number that describes a
35:28 - set of data
35:29 - um so let's say you have like a couple
35:32 - of different
35:33 - uh numbers and you're like i have a list
35:36 - of numbers that's like
35:37 - 5 14 8 9 10. how would you
35:41 - what's something that could combine
35:43 - those numbers into a single data point
35:45 - so something would be something like
35:47 - that would be a mean
35:49 - of that data set
35:55 - another example might be sum adding all
35:57 - those numbers up together
35:59 - right that's another aggregate yeah we
36:01 - kind of see it we have courses about
36:03 - like summary statistics so
36:04 - more um more statistics that summarize a
36:07 - data set
36:08 - are the standard deviation the maximum
36:11 - the minimum
36:12 - the like quartile so like what's at the
36:14 - one uh one-fourth and three-fourths
36:17 - um mark at uh the median all of these
36:20 - are like different things that we could
36:21 - a single number that kind of describes
36:24 - the data set
36:27 - um cool so keeping that in mind
36:31 - um we're gonna be introduced to a new
36:34 - data set over here
36:35 - um which is which has three columns it's
36:38 - a grade book so
36:40 - there's a student name there's the
36:42 - assignment name and there's a grade for
36:44 - that assignment and that student
36:50 - so to calculate um the
36:54 - so if we were to look at this data set
36:56 - and we wanted to calculate
36:57 - a certain student's grade for that
37:01 - course we would average the um
37:05 - the grades of each of their assignments
37:07 - right so let's say for amy
37:09 - we want to figure out amy's grade in the
37:11 - class thus far so
37:13 - this class has done two assignments that
37:15 - means that for amy
37:17 - um the grade would be the average of
37:21 - the two grades that amy has right
37:24 - um so this is what happens
37:28 - if you do that for each student so amy
37:31 - will have
37:32 - this average between the two assignments
37:34 - has this average increase
37:36 - as that average um and so that's one way
37:40 - of grouping
37:41 - the um the categories
37:45 - in this data set right by student but if
37:48 - let's say we wanted to figure out how
37:50 - difficult
37:51 - uh each of those assignments are uh
37:54 - maybe assignment one was really tough
37:56 - and assignment two was a little bit
37:57 - easier or they're about
37:59 - the same um difficulty right so the way
38:02 - we would
38:04 - understand that if we were a teacher is
38:06 - to figure out the average grade across
38:08 - all the students for each assignment
38:10 - okay so for assignment one looks like
38:12 - the students averaged at 82
38:14 - diamond two the average is slightly
38:18 - lower
38:19 - um so in both of the both of these
38:22 - instances we're
38:23 - doing something called aggregating
38:26 - yes well yeah and i think we're about to
38:29 - like
38:30 - make some graphs that reflect that and
38:33 - maybe as you start
38:34 - like uh writing the code in that does
38:36 - this first checkpoint which i think uh
38:39 - um let's see well we first need to right
38:42 - yeah so i'm gonna pour down numpy
38:46 - numpy is a like a number crunching
38:50 - library in python um it takes care of
38:55 - stuff like median mode standard
38:57 - deviation average
38:59 - sum whatever so let's import that
39:03 - um run this code after we import
39:06 - and uh we already have the gradebook
39:10 - data frame imported for us so that's
39:13 - convenient
39:14 - um and let's
39:17 - let's just take a look at it by printing
39:19 - it yeah this might be a
39:22 - slightly uglier printout you'll notice
39:23 - that we're using the terminal now rather
39:25 - than our kind of fancy um
39:27 - display cool um
39:31 - so this just lists out all of the
39:34 - the rows um at least it's aligned so we
39:36 - can read all those
39:38 - columns um cool so
39:42 - um let's say we wanted to just get
39:45 - the um the rows that represent
39:49 - assignment one so we already learned a
39:51 - little bit
39:52 - um but we already went through the data
39:54 - manipulation and
39:56 - selecting the data from a data frame in
39:58 - our previous
39:59 - lessons in the path so
40:04 - uh well with this analysis is to save
40:07 - all of the assignment one rows to a
40:10 - variable called assignment one so i'm
40:11 - going to do that
40:12 - assignment one equals two um
40:16 - and to select the rows i'm going to call
40:18 - the data frame first
40:19 - and um i'm gonna do square bracket to
40:23 - select
40:25 - the rows based on a condition
40:28 - and the condition is that assignment
40:30 - name
40:31 - is equal to assignment one
40:34 - so i need to refer to
40:38 - the row by gradebook
40:42 - dot assignment name i'm going to check
40:44 - if that's
40:45 - equal to assignment one so it's equal
40:48 - equals
40:49 - to the string assignment one
40:52 - yeah again it's something that you can
40:54 - go over in a lot of detail in all of our
40:56 - um pandas of course i think this was the
40:59 - last exercise that we covered doing
41:01 - these kind of
41:02 - filtering techniques like uh getting the
41:04 - rows where
41:05 - uh a column is equal to something mm-hmm
41:09 - um let's just print to see i did the
41:11 - right thing
41:14 - there cool so this printout right here
41:18 - um looks like i got all of the rows that
41:21 - um are for assignment one
41:26 - cool um and now what i can do
41:30 - is i can use numpy to calculate the
41:33 - median grade so the median
41:34 - is the value that's in the middle of
41:38 - the sorted list of those grades
41:42 - um so
41:45 - uh i can use mp.medium
41:49 - uh np is a shorthand for
41:52 - numpy based on our import
41:56 - so i can do mp.median
42:00 - and i can now refer to the column
42:03 - grade in this data frame that we created
42:06 - called assignment one
42:11 - and i want to save that to a variable
42:14 - called
42:15 - one media
42:22 - so i always have to print it out to see
42:24 - it
42:25 - yeah cool so
42:28 - looks like the average grade for
42:30 - assignment one is
42:32 - 88 or no not the average the median
42:36 - um okay cool
42:40 - so i'm on the right track here and i
42:41 - think something that's like a little bit
42:42 - interesting about the way that these
42:44 - lessons are even structured kind of
42:46 - reflect my point about
42:48 - seaborne being easy enough that you
42:50 - really have to understand the statistics
42:52 - you'll notice that
42:53 - in these lessons we're doing a lot more
42:55 - stuff about like okay let's dig into
42:57 - this data frame
42:58 - let's grab this column let's find the
42:59 - median we're like actually kind of
43:00 - working with the data
43:02 - itself and i think the reason why we do
43:05 - that is because the graphing becomes
43:07 - so easy once you actually kind of get
43:09 - that data
43:10 - and so it's like in the past with
43:12 - matplotlib we really didn't talk a ton
43:14 - about
43:14 - the different like statistical concepts
43:17 - that
43:18 - go into or that you might want to
43:19 - consider when making a graph because
43:21 - you know matplotlib was so difficult to
43:23 - even like get a basic graph up and
43:25 - running
43:25 - but now that seaborn is here and things
43:27 - are relatively easy to do
43:29 - we can spend more time like really kind
43:30 - of digging into our data set
43:32 - doing things like this understanding how
43:34 - to grab a certain column
43:35 - understanding how to filter the data set
43:37 - um like all of these skills kind of
43:39 - intertwine with each other right i'm
43:41 - sure that there's a way to do this
43:43 - only through seabourn right you don't
43:45 - necessarily need to be
43:46 - creating these variables that stores the
43:48 - median like i'm sure seaborn would have
43:50 - a way to do that
43:51 - but this is just another way that you
43:52 - can kind of like interact with all these
43:54 - systems together
43:55 - right and with this specific exercise
43:58 - we're understanding
44:00 - how we create how we have aggregates in
44:03 - the first place like how we calculate
44:04 - them
44:05 - um and right here like what i'm doing is
44:07 - i'm
44:08 - mainly like um
44:11 - like using this code to um
44:15 - just like confirm that that's what i
44:18 - want right that i want the median
44:20 - um and so maybe like
44:23 - after i do all of this like
44:26 - kind of pre-selecting and
44:28 - pre-calculation in my head then i can do
44:30 - like the
44:31 - um really concise c board code right
44:34 - here
44:34 - yeah exactly um so that's leading up to
44:40 - so we've just like done that little
44:42 - portion where we um
44:43 - get the aggregates um here's where we
44:46 - like
44:46 - transition it to plotting the actual
44:49 - aggregates
44:50 - right um using seaborne
44:53 - um so this is a familiar gradebook
44:56 - data set from the last exercise um
45:00 - let's say it's stored in a data frame
45:04 - right and we could
45:07 - basically just uh plot that
45:10 - data that data frame straight away with
45:13 - this line of code
45:14 - we've already seen this line of code
45:16 - from the previous exercises
45:19 - we put in the data here which is going
45:20 - to be
45:22 - the name of the data frame
45:25 - if we do x equals student student
45:27 - becomes our x
45:29 - axis and that's also the name of the
45:32 - um it's also going to label all of the
45:35 - um bars for us yeah
45:39 - that's that's another pain in the butt
45:40 - in mathwa web
45:42 - and then the um grade uh being the
45:45 - y-axis
45:46 - um again this like will default to
45:49 - averaging out the grade
45:50 - so we're going to get the average grade
45:52 - per student
45:55 - from that line of code so um
46:00 - that's um that's how you would get the
46:02 - average grade per student um
46:05 - our task here is to plot the average
46:07 - grade for each
46:08 - assignment um so we already have
46:12 - the gradebook um import it as a data
46:15 - frame
46:15 - so um i'm gonna like reuse this
46:19 - code because i only have to change
46:22 - one thing right um well first i have to
46:26 - change the
46:27 - data frame name but after this just one
46:30 - thing
46:30 - right um is my x axis gonna stay the
46:34 - same do i want um
46:36 - the do i care about um
46:39 - the student's name uh
46:42 - for each assignment grade
46:46 - so not really yeah
46:50 - um the average rate for each assignment
46:52 - right so
46:53 - yeah we don't want the student grade
46:55 - we're going to want to look at the
46:56 - assignment right so let's just confirm
47:00 - that that's our
47:01 - okay so the name of the column is
47:04 - assignment name
47:05 - it's always good to um
47:08 - also always good to like print your data
47:11 - frame so you can
47:12 - see it in your workspace yeah um
47:15 - so sorry i'm just gonna
47:18 - print it so that it's there um
47:22 - and now uncomment this bar plot thing
47:26 - um it should work because we've got all
47:28 - the column names correctly
47:31 - um and what are we missing here we're
47:34 - missing
47:35 - the display line of code so there's a
47:38 - plt dot show
47:41 - nice cool um so it shows us the average
47:45 - grade
47:45 - per assignment um so that matches
47:48 - our calculation or no this is a
47:50 - different calculation this is an average
47:52 - calculation cool so this is a pretty
47:55 - straightforward example um
48:00 - this next exercise is going to like
48:03 - telling us what these
48:04 - error bars are that show up on all our
48:07 - bar plots so far
48:10 - yeah and as we get into this again
48:11 - contrasting it to matplotlib
48:13 - in matplotlib we had to do all the math
48:15 - ourself to actually compute the error
48:17 - and then add and subtract basically say
48:20 - how far those those
48:21 - errors should go so it's like you know
48:23 - if the top of the blue bar is at 80
48:25 - and our error is five we have to
48:27 - specifically say okay
48:28 - the error bar should go from 75 up to 85
48:32 - right five on either side um
48:34 - you'll see that here seaborn calculates
48:37 - all that for us which is great
48:38 - but then also the downside of it is if
48:41 - you don't really know what
48:42 - an error bar is or you know how the
48:46 - uh how error is computed or what it
48:48 - represents then you're kind of in
48:50 - trouble in terms of actually talking
48:51 - about
48:52 - what these arrow bars mean right like a
48:53 - thing that we really want to stress is
48:55 - like
48:55 - being able to make the graph is one
48:56 - thing but then also being able to
48:58 - unders explain what it's what it's
49:00 - showing and
49:02 - to like represent your data accurately
49:04 - and
49:05 - to not be misleading in your um in the
49:08 - visualizations that you make and so
49:10 - again kind of this balance of seabourn
49:11 - does it all for you but make sure you
49:13 - actually know what it's doing and what
49:14 - it's talking about
49:15 - yeah and i'm sure there's an option to
49:18 - also take away the error bars if you
49:20 - don't like the look of that
49:21 - um all you have to do is you can
49:23 - probably google search how to take off
49:25 - error bar off c1 graph usually like
49:28 - that's
49:29 - the fix for anything any small issue you
49:32 - have someone's probably thought it
49:33 - before
49:35 - um well so um yeah the error bar mainly
49:38 - is just uh seaborne
49:42 - like default providing a confidence
49:44 - interval
49:45 - um so like roughly speaking it's like
49:48 - it's using a 95
49:50 - confidence interval so it's saying 95 of
49:53 - similar situations
49:54 - would have an outcome in this range um
49:58 - and if that's not uh
50:01 - if the confidence interval is not
50:03 - something that you care about you can
50:04 - also change it to
50:05 - one standard deviation which is
50:07 - something that more of us are
50:08 - familiar with from our like statistics
50:11 - knowledge yeah
50:12 - um sin to change it to a standard
50:15 - deviation
50:15 - all you have to do is add like one more
50:17 - comma here and add
50:19 - ci equals um so that means
50:23 - confident stands for confidence interval
50:25 - probably
50:26 - um equals to quote sd
50:29 - standard deviation um so
50:32 - we can modify this code right here to do
50:35 - just that
50:36 - um so we just add one more option to
50:40 - this
50:41 - so that the error bars are based on
50:44 - standard deviation
50:46 - now well hard to see if that even
50:49 - changes but
50:50 - uh yeah yeah yeah um so
50:54 - um yeah it's pretty um
50:58 - it's pretty useful for um
51:01 - i guess some instances i guess but
51:05 - yeah i mean i think this shows like how
51:07 - all of these fields start to like
51:09 - intersect where
51:10 - now all of a sudden um graphing is
51:14 - so relatively easy that you can really
51:16 - devote time to thinking about
51:17 - do i want standard deviation or do i
51:19 - want this 95 confidence interval like
51:22 - uh actually getting a grasp and
51:24 - understanding the stats behind it
51:26 - um is something that we can devote time
51:28 - to now that we're using seabourn and
51:30 - you know graphic is relatively easy yeah
51:32 - for sure and um this is
51:34 - advanced graphing too so um it's nice to
51:37 - have these options
51:38 - if you're like somebody that's more
51:40 - familiar with statistics
51:42 - and you're um using seaborne in your job
51:46 - right um cool so i mean
51:49 - we know how to do the average
51:52 - aggregate for our bar plots because
51:55 - that's what the default is in seabourn
51:57 - but
51:57 - um some cases you might want to plot the
52:01 - median instead or you want to plot the
52:05 - um the summer or something else
52:09 - um and it's flexible right we
52:13 - all we have to do is again just add one
52:16 - more option
52:17 - to our line of the line of code that
52:21 - makes our bar plot um so it seems like
52:24 - if we want to do a median um all we have
52:27 - to do is add an option that
52:30 - says um that sets the estimator
52:33 - uh that's a seaborn keyword
52:37 - um estimator equals to np
52:40 - numpy stands for numpy dot median
52:43 - so that automatically um aggregates your
52:47 - y value um based on the median
52:51 - yeah what you can think of of that
52:53 - estimator parameter doing is basically
52:55 - you give it a function
52:56 - and so you can think of by default
52:58 - estimator is going to equal like np.mean
53:00 - or something
53:01 - so basically what that's going to say is
53:03 - i'm going to take my y values in this
53:04 - case
53:05 - responses and pass all of those values
53:08 - through whatever function is in there so
53:09 - by default it's mean it will pass all
53:11 - your
53:12 - y values through the mean function and
53:14 - kick out something that's like
53:15 - in this case it looks like it's you know
53:16 - 35. if we
53:18 - change that function to median then
53:20 - it'll pass it through the median
53:22 - function and kick out whatever the
53:23 - median is
53:24 - you can also give it other functions
53:26 - like in the second example we give it
53:28 - uh lane len or for the length
53:31 - and that's cool because that gives you
53:34 - now
53:34 - the total count basically if you're
53:36 - curious okay just how many
53:38 - um male uh
53:41 - you know responders in the survey um are
53:44 - there and how
53:44 - uh how many female responders are there
53:46 - you can pass the length and that will
53:47 - just give you
53:48 - okay what's the total number of things
53:50 - from this from this array that um
53:53 - that we're given yeah that's basically a
53:55 - count
53:56 - yeah um so we are introduced to at least
53:59 - two options
54:00 - in this um narrative here
54:03 - um so let's let's try
54:07 - uh one of them out um
54:10 - on this data frame so again it's the
54:12 - same
54:14 - survey.csv um
54:17 - data um it's printed out i think
54:21 - it's already printed that was just
54:23 - printed from the last
54:25 - workspace cool so this is the data again
54:29 - um and let's do
54:33 - a bar plot that
54:36 - uses this data frame again has the x
54:39 - being
54:40 - gender y equals response and then
54:43 - um exactly like alex said um if we use
54:46 - the len
54:47 - estimator here we would um this
54:51 - uh these few like um options added
54:55 - together is going to give us a bar plot
54:56 - that tells us how many
54:59 - uh people of each gender responded okay
55:02 - uh carol we have we have two minutes
55:04 - left so as you as you
55:06 - write that code so we can kind of see
55:07 - the final result let me talk about
55:09 - more things that we have coming up in
55:11 - the future um
55:13 - so for pro members um
55:16 - every thursday we do a kind of like
55:19 - private zoom call
55:20 - with pro members so this week carol and
55:22 - i will be running that
55:24 - um pro session it's on thursdays um at 1
55:27 - pm eastern time
55:28 - if you're uh you can look at
55:31 - the events page i just posted in the
55:33 - youtube chat it's codeacademy.com
55:35 - events if you're a pro member you'll see
55:38 - um the one on thursday if you're not a
55:40 - pro member
55:41 - you won't see it but you can see the
55:42 - other events that are going on which i
55:43 - think there are
55:44 - a couple in there um so yeah we do a
55:47 - private
55:48 - uh or like a pro only show on thursdays
55:50 - i think this week what we'll do
55:52 - is um build some of these graphs
55:55 - um on our own computer so again kind of
55:57 - showing how to down download
55:59 - seaborn how to um run it locally all
56:02 - that sort of stuff
56:03 - um i i might even want to like go back
56:06 - to to the
56:07 - matplotlib lessons and like see you know
56:09 - the really
56:10 - ugly code that we have to do to make
56:12 - these matplotlib graphs and i might want
56:13 - i i think it would be fun to try to make
56:16 - those exact graphs in seabourn and see
56:17 - what this
56:18 - code looks like yeah um and during
56:21 - thursdays
56:22 - we'll also also have learners share
56:25 - their screen or their work but i mean
56:29 - you don't have to if you're feeling shy
56:30 - but
56:31 - um it's a time for like us to really
56:33 - like
56:34 - um interact beyond the the chat function
56:37 - here
56:38 - yeah my kind of dream for this i say
56:40 - this like every single time my dream for
56:42 - this is to make those thursday shows
56:43 - like a radio
56:44 - a radio show where people like can call
56:46 - in and ask questions and
56:48 - um you know we really have kind of the
56:50 - space because it's
56:51 - pro only there's fewer people in there
56:53 - that we can kind of address really
56:54 - specific questions
56:55 - um yeah um
56:59 - so i think our time is up
57:03 - um but just to
57:06 - um like wrap up this
57:10 - exercise um this is the result of
57:13 - us uh uh using the estimator
57:17 - length um in order to like calculate or
57:21 - show
57:21 - um how many people per gender took our
57:24 - survey
57:25 - and if we turn it into the
57:29 - median function
57:32 - um then we get something like this right
57:35 - the median
57:36 - of those responses so
57:39 - yeah and this is like um
57:43 - i think whatever we've gone over so far
57:44 - allows you to
57:46 - um uh build some pretty nice looking
57:49 - graphs
57:50 - off the ground um i don't i don't know
57:53 - if we can stay on for like
57:54 - two more minutes but i think it's really
57:56 - cool because you can start adding
57:58 - other you can add more dimensions to
58:00 - your bar chart
58:01 - um i'm just going to copy that code yeah
58:05 - yeah carolyn if you want to stay on
58:06 - a couple more minutes i have to run to a
58:08 - meeting in like two minutes actually
58:10 - um so if you want to keep going
58:12 - essentially as long as you want
58:13 - we're fine with that but um
58:18 - yeah i i saw one question uh from
58:20 - muhammad uh
58:22 - he's new to data science field where do
58:24 - i learn this from the stuff that we're
58:25 - specifically going over right now is the
58:28 - visualize data in python path and so on
58:31 - codecademy if you look for that that's
58:33 - what we're currently going through we're
58:34 - at the basically the very end of the
58:35 - path
58:36 - um so uh this is fairly advanced stuff
58:39 - if you're just starting
58:40 - um but yeah feel free to take a look at
58:41 - that early path and then um
58:43 - yeah john thanks for uh john in the chat
58:45 - thanks for checking us out um hope to
58:47 - see you on the
58:48 - on the thursday show if you can make it
58:50 - um carolyn with that i'm gonna i'm gonna
58:52 - log off but
58:53 - you know feel free to go uh to show off
58:55 - these last last couple of things
58:57 - i'm just computing this last exercise
58:59 - but it's
59:01 - um there's something that
59:04 - doesn't like about my code even though
59:06 - it's correct i think
59:10 - uh i'm gonna just view this solution
59:12 - here
59:13 - um okay so it's
59:16 - basically that um but
59:19 - now you can have these side-by-side um
59:21 - bar charts if you just add the hue
59:23 - option um and that creates that like
59:26 - splits your category
59:27 - um by like one more
59:30 - column in your data
59:34 - so definitely
59:37 - go to our path and
59:41 - take this yourself and you can re-watch
59:44 - this
59:45 - video and code along if you're coding
59:47 - along
59:48 - this whole time awesome um
59:52 - so i look forward to seeing you all
59:54 - thursday if you can make it
59:56 - um so thank you everyone for tuning
60:00 - in thanks everyone this has been fun
60:01 - yeah well uh closing out
60:03 - we'll see you later yeah all right bye
60:06 - everyone