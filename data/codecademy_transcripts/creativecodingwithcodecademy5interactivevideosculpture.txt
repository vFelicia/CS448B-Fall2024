00:00 - okay hello and welcome back to co
00:03 - academy
00:03 - um live for creative coding this is
00:05 - session five
00:07 - um i feel like we've come a long way
00:09 - since the beginning of the series which
00:11 - i can't even remember do we start in um
00:15 - march i believe and this is
00:18 - the fifth one so five weeks ago yeah
00:21 - we started off with like introducing um
00:24 - some of you for the first time
00:26 - you know to p5.js a javascript library
00:29 - that is an open
00:30 - you know open source javascript library
00:31 - that we're going to use today as well
00:33 - to do um to create do our creative
00:36 - coding works
00:37 - uh we've gone through like a lot of
00:39 - topics so far
00:41 - so in the first lesson we exposed you
00:43 - guys
00:44 - to the library itself and the core basic
00:46 - structures of the library using
00:48 - the setup function and the draw function
00:51 - and then we
00:52 - looked at how we can create static
00:54 - drawings using like basic
00:56 - uh primitive shape functions and then we
00:58 - also looked at how to
00:59 - create animations um by adding you know
01:02 - um variables and those kind of like
01:05 - basic
01:05 - programming techniques to increment and
01:07 - decrement values over time
01:09 - or over a number of frames and then we
01:11 - also last we
01:12 - actually looked into how to add
01:14 - interactivity
01:16 - interactivity or sketches so that we had
01:18 - our mouse and keyboards
01:20 - driving the animations that we are
01:22 - creating and last week
01:24 - we created this thing called generative
01:26 - arts um
01:28 - no it's cool it was called creative art
01:30 - generator generator art tool
01:32 - something like that something along the
01:33 - lines where we um
01:35 - basically maps different shape functions
01:38 - into
01:38 - our keyboards so depending on which
01:40 - keyboard you created if we were
01:42 - generating this sort of like a pattern
01:44 - of drawing we also looked at how to save
01:46 - our b5.js canvases into png files
01:50 - so you can take them on and like you
01:52 - know post them on social media or use it
01:54 - as your background for whatever you like
01:56 - and that kind of stuff
01:58 - so those are the things that we kind of
01:59 - hit on um today what we're going to do
02:01 - is
02:02 - we're going to build on top of
02:03 - everything that we've learned so far
02:05 - during our live series
02:06 - and again i also want to say that
02:08 - everything that we're talking about
02:09 - um for p5.js is going to be based on
02:13 - this um
02:13 - learn p5.js course that we have on our
02:16 - platform
02:17 - let me actually that's actually a good
02:18 - cue to start sharing screen
02:20 - um and so um we've been going through
02:24 - the contents in this learn p5.js course
02:27 - the first week we looked at this first
02:29 - module introduction to creative coding
02:31 - we're now here in our media module where
02:34 - this module talks about using
02:36 - images and videos inside of our p5.js
02:39 - sketches so we'll be doing a lot of that
02:41 - today we're actually going to be
02:43 - basically focusing on using
02:44 - videos instead of images but this is
02:47 - sort of the content we're going to go
02:48 - through and this
02:50 - um lesson kind of introduces you to
02:52 - combining all of these different
02:54 - media assets into your sketch so and
02:57 - then it goes through you know
02:58 - how to load images and videos in here
03:02 - what you need to do in order for you to
03:03 - load everything but also going through
03:06 - some of like manipulation techniques
03:07 - that you can apply
03:09 - um for your images and videos for
03:11 - example this one
03:12 - you know it walks you through how to use
03:14 - the filter method to apply different
03:16 - kinds of filters on the images
03:18 - we've got a lot of dogo images in this
03:20 - lesson there's a lot of dogs
03:23 - and then we'll walk you also through
03:25 - some fundamentals of what's called the
03:26 - pixel manipulation
03:28 - meaning that you are really getting deep
03:30 - into the
03:32 - data components that comprise an image
03:34 - or a video file
03:36 - so an image file if you go deeper down
03:38 - into the file itself
03:39 - they're comprised of data for each of
03:42 - the pixels
03:43 - that make up the whole image and also
03:46 - for video that means you know that has
03:48 - multiple images and within that each
03:50 - image or the frame it has those pixels
03:52 - inside of it
03:53 - so this um lesson also goes into a
03:56 - little bit of a fundamentals of how you
03:57 - can access those pixels in there
04:00 - to do something like i think in here
04:02 - we've got a video that you're
04:03 - manipulating the pixels into
04:06 - to create this sort of glitchy effect so
04:08 - this is this glitch effect is not done
04:11 - you know in the video itself but it is a
04:13 - filter custom filter applied live
04:15 - as you're playing the video so those are
04:18 - the things that you can take a look at
04:20 - um in this module and for today's
04:23 - um live series what we're going to look
04:26 - at
04:27 - is actually going to be going to doing a
04:30 - walkthrough of this project called
04:31 - interactive video sculpture in here
04:33 - so if you take a look at it this is what
04:36 - it looks like on the le
04:38 - um and just to talk about the project a
04:40 - little bit it's called interactive video
04:42 - sculpture but it's very very
04:44 - um heavily inspired by it's almost like
04:47 - an homage almost to namjoon takes video
04:49 - sculptures
04:50 - i don't know if you guys are familiar
04:52 - with namjoon page works but basically
04:55 - he takes a lot of these like you know
04:56 - old um tv monitors
04:59 - what are what is like a there's an
05:00 - official term for these monitors i
05:02 - forget what they're called
05:03 - yeah i'm not sure either but these are
05:05 - like the bulky ones these are definitely
05:07 - not the tvs that you have in your house
05:09 - right now these are like
05:11 - they have like a fat back to it and then
05:13 - they have like a little bit of a
05:14 - curve and bulky bulkiness to them and um
05:18 - part of like one of the key features of
05:20 - his works is that he would have a number
05:22 - of these
05:23 - put together in like a grid and then
05:25 - they will you know change it show
05:26 - different kinds of
05:27 - um snippets of footages and then they
05:30 - will change in loops or some sort of a
05:32 - time sequential order
05:33 - and what we're gonna do is that because
05:35 - we don't have you know access to all of
05:37 - these like this many
05:39 - tv monitors we're going to use p5.js to
05:42 - basically
05:43 - be able to um draw our videos into a
05:46 - grid
05:46 - into these grids and um
05:50 - we're going to also take a look at how
05:51 - we can add some interactivity in here to
05:53 - show
05:54 - different kinds of videos and not have
05:56 - it just static
05:58 - so that's kind of what we're going to go
05:59 - with for today's
06:01 - live stream series and another thing to
06:04 - mention
06:04 - is that um in the youtube video
06:07 - of the video that you guys are currently
06:09 - watching in the description section
06:11 - there's gonna be links to two
06:13 - um um there's gonna be two links to
06:17 - that you will need for today's live
06:19 - stream one is going to be called what's
06:20 - called starting code and the other one's
06:22 - going to have the solution code or the
06:24 - end code that we
06:25 - want to get to at the end of the series
06:28 - and those are ready for you and actually
06:31 - there
06:31 - because the thing that we're gonna do
06:33 - today that is different from the first
06:35 - two live
06:36 - series is that we're gonna be using this
06:38 - platform called p5
06:40 - web editor instead of working on the
06:42 - codecademy platform
06:43 - so i've actually gone ahead and moved
06:46 - all the instructions that
06:48 - you will find in our platform into this
06:51 - starting code file so that if you have
06:54 - an account
06:55 - with the p5 web editor you should be
06:58 - able to
06:59 - open it and if you want you should be
07:00 - also able to duplicate that and then
07:02 - save it
07:03 - to your account so remember um you know
07:06 - if i web editor if you first log in
07:07 - you're not going to see this hello
07:09 - js6450 which is my college id actually
07:14 - throwback yeah i've been using this for
07:17 - so many years since i graduated college
07:19 - but like i use it for
07:20 - a virtually anything that requires me to
07:23 - put in some sort of a user id
07:25 - but anyway um if you're logged in you
07:28 - should be able to save file duplicate
07:30 - and then you it
07:31 - should say copy at the end of the title
07:34 - that i've given it for our starting code
07:36 - and you can name it to something else
07:37 - like i'm gonna say codecademy
07:40 - live five because it's our fifth session
07:43 - and that should be saved within your
07:44 - account so you can open it you can
07:46 - create
07:46 - not you know other fifa sketches but you
07:49 - can always come back to this one if you
07:50 - want to
07:52 - so this is where we're going to work on
07:54 - uh and we're going to be following all
07:55 - of those steps in here to go from
07:58 - i think i do want to give you guys a
08:00 - little bit of a sneak peek of what we're
08:01 - going to do
08:02 - so this is the um what you should be
08:04 - seeing also i mean i'm going to run this
08:06 - code in here so this is what you will
08:08 - see
08:08 - you will see a grid of a 4x4 grid
08:12 - of white rectangles we're going to
08:13 - eventually fill these
08:15 - with different kinds of video files and
08:18 - at the end result
08:19 - will it be something like this
08:23 - where we've got you know this is
08:24 - actually one video that we're going to
08:26 - separate into four segments and then
08:29 - we've got all of these
08:30 - outside videos in here as well and
08:33 - if i click on my mouse on the canvas you
08:36 - will see that some of these
08:37 - outside grid is changing
08:40 - so this is very you know it is very
08:42 - reminiscent to
08:43 - um styles of namjoon peaks video
08:45 - sculptures and we're just creating like
08:47 - a digital version of it
08:50 - awesome cool that looks great i'm
08:53 - excited
08:54 - to get into it so the first thing that
08:56 - i'm gonna do here is
08:58 - i'm actually just gonna go ahead and
09:00 - explain what is going on in here first
09:03 - so um what's happening in here is that
09:05 - we've got a bunch of
09:06 - um variables in here that say cloud path
09:09 - start path static path and human path
09:12 - and what they do is they just um contain
09:14 - strings
09:15 - that point towards where these video
09:18 - files are saved and they're actually
09:19 - stored in
09:20 - our codecademy's um server but basically
09:23 - if you were to copy this and paste it
09:24 - into your url
09:26 - you should get you should be able to see
09:28 - you know what these video files do
09:30 - like in actual content of those video
09:32 - files so we're using these to basically
09:34 - say i i'm going to be
09:36 - um loading all of these video files that
09:38 - are stored on our codecademy server
09:41 - into rp5 web editor sketch so that we'll
09:44 - be able to ready them to be used
09:46 - within these um this preview window
09:48 - within the sketch itself so those are
09:50 - the um
09:51 - the variables that are given for you
09:53 - there are also some definitions of
09:55 - global variables which we're going to
09:56 - take a look at and first
09:58 - actually one of our first few steps are
10:00 - going to be to fill in or like
10:01 - initialize values for these variables
10:04 - we've also got some variables in here
10:06 - global variables that are
10:07 - you know for the margins so this
10:09 - actually 20 margins gonna be is used to
10:12 - calculate the gap between these
10:14 - rectangles
10:16 - and the rectangles are actually being
10:17 - drawn inside of the draw loop already in
10:20 - here
10:21 - inside of a nested for loop one for the
10:24 - i
10:24 - and one for the j so the i in this case
10:26 - is used for the
10:28 - columns and the j is going to be used
10:30 - for the counting the rows down
10:32 - into our grid and you will also see that
10:35 - the x and the y coordinates for each of
10:38 - these are calculated for you and that's
10:40 - what's being used to draw these
10:41 - rectangles
10:42 - this also means that you see here we
10:44 - have two global variables that say
10:46 - number of screens tall and number of
10:48 - screens wide
10:50 - um if i were to change this to something
10:52 - like this
10:53 - it doesn't happen because i'm assuming
10:57 - the rectangles are not actually probably
11:00 - going to be cropped off
11:01 - i'm good i was going to say that they
11:02 - are being they are being used to do
11:05 - um loop through uh to set the number of
11:08 - times that
11:09 - each of these loops are being drawn but
11:11 - i think there are some other things
11:12 - inside of the code probably to do with
11:15 - margin and width and all the kind of
11:16 - stuff that is
11:17 - preventing it from immediately being
11:19 - reflected on what we're going to do
11:21 - but if we go down to what if we go down
11:22 - to two uh
11:24 - because i wonder if he when he went to
11:25 - six i wonder if it was just going off
11:27 - the screen there we go
11:28 - yeah i think it was just going off the
11:30 - screen so if i set this to two
11:32 - um screens total to two then we've only
11:34 - got a four by two grid
11:36 - so i just wanted to show that these are
11:37 - the two deciding factors that decide how
11:40 - many
11:40 - um what what by what grid that we have
11:43 - on our sketch um but for now i'll leave
11:46 - it at this because
11:47 - you know if we change this we'll also
11:48 - need to change some other code
11:50 - that goes inside of filling or replacing
11:52 - these white rectangles
11:53 - with video files so those are the
11:56 - variables that we have i wanted to just
11:58 - explain the basic structure of it
12:00 - our canvas size is actually by 600 by
12:03 - 500
12:04 - so they're not actually using the you
12:05 - know my favorite dimensions of canvas
12:07 - which is
12:08 - window width and window height so we're
12:11 - not using that and we're actually
12:12 - setting a very static
12:14 - width and height variables to the canvas
12:16 - but you will also see that
12:18 - when i do shrink and stretch my
12:21 - canvas or the preview window it does
12:24 - center
12:24 - and i do want to kind of show you that
12:26 - there are you know these hidden two
12:28 - other files that
12:30 - get into the actual rendering of our
12:32 - p5.js sketch which is the index.html and
12:34 - css
12:35 - and you may notice in css there are some
12:37 - more styling that are
12:39 - given for you so this is actually the
12:42 - styling for done for the canvas
12:44 - in css is what setters what's centering
12:47 - our
12:48 - p5.js canvas html element
12:51 - so you i wanted to show you guys that so
12:54 - that you don't have to have a
12:55 - dynamically sized window with a window
12:58 - height
12:59 - canvas you can set it to a static number
13:01 - and then you can just take the whole
13:03 - canvas element
13:04 - and then center that in the within the
13:06 - html page
13:07 - how or not center it you know just you
13:09 - know late but put it in anything
13:11 - it's just an element yeah it's just an
13:12 - html element that you could do anything
13:13 - with
13:14 - yeah exactly so i did want to you know
13:16 - demystify that a little bit and then
13:18 - let you guys know or remind you guys
13:20 - that it is an html element
13:21 - and nah element is stylizable by
13:25 - using css cool so moving from on from
13:28 - that i'm going to follow all these steps
13:30 - that i have
13:31 - inside of my sketch file
13:34 - as comments so it says step one is to um
13:37 - use the create video function
13:38 - to load these videos into their respect
13:41 - respective variables
13:42 - and we've got these lists of variables
13:44 - in here but like i introduced before
13:46 - we've also got this list of paths given
13:49 - to us
13:50 - in terms of string that are of actually
13:52 - the actual locations of where all these
13:54 - video files are saved
13:55 - in and i'm going to go ahead and use
13:57 - this function
13:58 - but let's actually take a look at the
14:00 - reference page for that function
14:02 - together
14:03 - so this is the p5.js reference page i'm
14:06 - going to actually search for create
14:07 - video and if we take a look at this
14:10 - creative function a video function
14:13 - the syntax is that okay this is a little
14:15 - bit different because
14:16 - doing this will allow you to load
14:19 - multiple video files with different
14:21 - sources
14:22 - so like you know if you have a video
14:24 - file that have different file types like
14:26 - mp4 ov
14:27 - og v and webm you can load them in an
14:30 - array and they will pick whichever one
14:32 - that is
14:32 - um that basically your browser allows or
14:36 - your browser prefers so if your browser
14:39 - prefers a webm file that it's going to
14:41 - use that file over the other ones that
14:42 - you provide in there
14:44 - which is actually the exact same way
14:45 - that you can use using the video tag
14:48 - right video html tag within the video
14:50 - html tag you can specify multiple source
14:52 - files using the source tag
14:54 - so this is in the this kind of is like
14:57 - an indicator that behind the scenes the
14:59 - creative video
15:00 - tag the function is creating a video dom
15:03 - element
15:04 - so um yeah i just wanted to show you
15:06 - guys that that
15:07 - is the case and you can also give it a
15:09 - call back function
15:10 - for it to run it when all the videos are
15:12 - downloading we're gonna use um the
15:14 - create video function in the simplest
15:16 - way
15:16 - so we're going to say let cloud oh sorry
15:19 - um those
15:20 - variables are actually defined for us
15:22 - already in line 12.
15:23 - it has global variables so i'm just
15:25 - going to say cloud
15:27 - um video is equal to
15:30 - and then i'll say oh sorry equal to
15:32 - create video of
15:34 - path cloud path
15:37 - with capital p and i'll do the same
15:40 - thing for
15:41 - three other video variables that we have
15:43 - in here so stars
15:45 - video is going to equal to create video
15:48 - add
15:48 - stars path and then
15:51 - our static video is oops
15:55 - static video is equal to create
15:58 - video of static path
16:02 - and then we're going to say human video
16:05 - is going to equal to create
16:07 - video of a human path
16:10 - g1 i'm curious if folks are interested
16:13 - in using their own videos so right now
16:15 - what we're doing is we're giving you
16:16 - these four different videos of you know
16:18 - cloud star
16:19 - static and human but like what's your
16:22 - best advice for
16:23 - i want to go find my own videos are
16:25 - there good like public domain
16:27 - videos that you can use or how how would
16:30 - someone go about
16:31 - like uploading their videos um in a
16:34 - usable way so if you're looking for just
16:37 - kind of like you know stock
16:38 - videos to use and experiment with i'd
16:41 - recommend using pexils.com and then
16:43 - they've got like a whole section on
16:45 - videos
16:45 - and you can download a video from here
16:48 - and then
16:49 - what you can do in the web editor is
16:50 - that if we click on this
16:52 - um what is this directory view again you
16:54 - can click on this um
16:56 - arrow down button next to what it says
16:58 - sketch files
16:59 - and here you can actually upload a file
17:02 - i think they do
17:03 - have a file size limit something like
17:05 - 100 megabytes or something per file
17:08 - but you can load small video files in
17:11 - here for you to use
17:12 - within the sketch by directly drag and
17:14 - dropping
17:15 - files in here or you can also
17:18 - host it somewhere else i don't think um
17:21 - hosting
17:22 - on things like google drive is the best
17:24 - way to go but if you have your own
17:26 - server you can definitely upload it in
17:27 - there
17:28 - i actually don't really know um does
17:32 - this is this gonna have a public url
17:34 - no yeah there might be yeah
17:38 - i don't want to share it but if you have
17:41 - any like sort of a link
17:43 - that you know the point i think is that
17:45 - if you have a video file hosted
17:47 - somewhere else for you
17:49 - and if you go to the url and it looks
17:50 - just like this with just a video
17:53 - um content then chances are this will
17:55 - also work
17:56 - for your v5 web editor sketch there are
17:59 - also other
18:01 - incredible hurdles to overcome
18:04 - for because of things like course access
18:07 - and all that kind of things which i
18:09 - don't want to get too much into
18:11 - but you're being some videos it might be
18:12 - hard to load if you're just pulling it
18:14 - from a random website
18:15 - yeah so my best uh what i would do is i
18:18 - would upload it directly into my
18:20 - p55 editor actually so to
18:23 - that would actually mean that you would
18:25 - have to have small enough of a file size
18:27 - or if not you might want to actually
18:29 - take the whole project this might be
18:30 - actually a really good reason why you
18:32 - would want to work
18:33 - locally at this point and there are
18:36 - let's go back to our learn p5.js
18:40 - actually um
18:43 - our course so if we go back in here
18:46 - there is
18:46 - an article um inside of
18:51 - this one inside of our first module
18:53 - introduction to creative coding
18:55 - the whole step-by-step guide into
18:57 - creating a local p5 address project
19:00 - so you can follow this along and then
19:02 - you know it assumes that you know
19:03 - or you already have a text editor and so
19:05 - on but it will walk you through
19:07 - how you can download it how you can have
19:09 - your folder structure in here
19:11 - and you know how how you can or if
19:13 - you're going from actually a web editor
19:15 - you can download your project as a
19:17 - zip file and how you can start working
19:19 - off of it from there
19:21 - so you can take a look at this article
19:23 - if you are at that stage where you're
19:25 - using a lot of video files i would
19:27 - recommend doing that
19:29 - okay cool so now we have all of that
19:32 - you might have noticed if i click run
19:34 - and if i scroll
19:36 - you see all of these things behind it
19:38 - that you've never seen before
19:40 - and they kind of look like they are some
19:43 - like you know a little bit
19:44 - bits of the video file that i've shown
19:46 - you guys before
19:47 - and that is because they are and all of
19:49 - these video files natively are quite
19:52 - big in size and so that's why they're
19:54 - appearing
19:55 - actually behind the the um
19:58 - sketch or the canvas because like i also
20:01 - alluded to before
20:02 - all of these video files when we say
20:04 - create video they are
20:06 - ultimately creating a video tag but
20:08 - they're just not being played or
20:09 - anything yet so they kind of appear
20:11 - within the html page
20:13 - because we haven't told it to not
20:15 - display
20:16 - our video tag as an html element which
20:19 - what
20:20 - is what we're gonna talk about in step
20:22 - three but just seeing these should be
20:24 - like an indicator that your video files
20:26 - have correctly been imported into your
20:28 - b5.js sketch
20:29 - so if you're seeing that that's great
20:32 - it's not an error you're supposed to see
20:33 - it and we're ready to move on to step
20:35 - two
20:36 - wow step two out of 16.
20:40 - okay we're getting there cool so then
20:43 - what we're going to do here is just
20:45 - place all the newly created video
20:46 - elements into a single array store in
20:48 - the videos variable
20:50 - so there is a um a global variable in
20:53 - here line 13 that's called videos
20:55 - and i'm going to actually just say
20:57 - videos and then list
20:58 - all of the video videos that's been
21:01 - loaded inside of our cloud videos stars
21:03 - video static video and human video
21:05 - i'm going to just list them in here and
21:07 - say inside of my square brackets
21:09 - right cloud the video comma stars
21:13 - video comma being careful of spelling
21:17 - static video comma and human
21:20 - video in here okay great so
21:23 - now that's done and this is not gonna
21:25 - have any visual impact because we've
21:26 - just
21:27 - loaded that array variable inside
21:30 - we've just loaded the array variable
21:32 - with the video
21:34 - variables that we've loaded in our step
21:36 - one and in step three it says okay
21:38 - now that the videos array is it has been
21:41 - populated
21:42 - iterate over the videos array to loop
21:45 - mute and hide each one so let's actually
21:48 - start off by defining or creating a for
21:51 - loop
21:51 - so i'll say let i is equal to zero
21:55 - i is going to be less than four you can
21:57 - write four because we know that there
21:58 - are four videos
21:59 - inside that exist inside videos or if
22:02 - you want to be
22:02 - you know you want to make sure that you
22:04 - if even if you added your own videos
22:06 - later that it will still work properly
22:08 - you can also save videos about length
22:10 - right whichever one you prefer
22:13 - and then you can we're going to
22:14 - increment it by i and what we're going
22:16 - to do here
22:17 - is we're going to say videos of index i
22:19 - so whatever one whichever one we are on
22:21 - when we're
22:22 - iterating over them i'm going to say dot
22:24 - loop
22:26 - and once we do that and we hit run we
22:30 - see
22:30 - if we scroll down we'll see the video
22:32 - files actually looping and playing
22:34 - so there's two ways that you can play
22:36 - video files you can say dot loop
22:38 - using the loop method to loop over the
22:42 - video over and over again
22:43 - or you can use the play method which
22:46 - will only play that video file only once
22:48 - and then stop playing
22:49 - but in our case because we want it to be
22:51 - like a digital
22:53 - video sculpture we want our videos to be
22:55 - continuously running
22:56 - so we're just going to say loop um and
22:59 - if we do this in the web editor
23:01 - you're the doing loop will be fine
23:04 - without having
23:05 - um having us to be to needing to be mute
23:08 - anything
23:09 - but if you are working locally or if you
23:12 - are kind of thinking of putting this
23:14 - on some other platform you might
23:16 - actually want to make sure that your
23:18 - videos before you loop them
23:20 - are muted so you can use the mute um
23:24 - method to make sure that all of your
23:25 - video files have volume of zero
23:27 - before it starts playing anything and
23:30 - this guy the reason why we do this
23:31 - oops did i smell something wrong
23:34 - there's an error with a mute could not
23:36 - be called as a function
23:38 - mute is not a function okay but
23:41 - let's go and this is great okay we're
23:44 - gonna look up the video
23:46 - media element and then we're going to
23:49 - look at
23:50 - mute which is not a function ah i say
23:53 - mute but i actually mean volume
23:57 - oh okay you can set volume to zero or
24:01 - something
24:01 - exactly so i i wrote new than i totally
24:04 - should have
24:05 - i think i said it the other way i said
24:07 - oh we need to mute it which means it's
24:08 - volume 0.
24:09 - i meant to say oh volume 0 means you're
24:11 - muting it
24:12 - um but the reason why we need to do this
24:15 - volume 0 step
24:16 - is actually because um in order for your
24:20 - videos to auto play with
24:22 - uh or be played with uh volume it has a
24:25 - lot to do with you know web security and
24:27 - how
24:28 - like auto playing different elements
24:30 - embedded into websites work but
24:32 - basically
24:33 - videos or audio files that have the
24:35 - start with the volumes here are
24:37 - allowed to auto play or allow to be
24:39 - muted with the javascript function
24:41 - without the stage chances are that
24:44 - sometimes it's gonna work and sometimes
24:46 - it's not gonna work depending on how
24:48 - you're running your sketch
24:50 - so it is always a good idea to make sure
24:52 - that your volume is set to zero
24:54 - and then you mute your video so that
24:56 - they will there they have a higher
24:57 - chance of playing on the web or wherever
25:00 - you're hosting it
25:01 - okay cool so now that those are done and
25:03 - you can see the videos playing
25:04 - underneath
25:05 - what i'm actually gonna do is that i'm
25:06 - going to actually not want to see all of
25:09 - these videos
25:10 - playing underneath my sketch because i'm
25:12 - eventually going to
25:13 - position them and scale them so that
25:14 - they appear in the designated places
25:16 - that i want them to appear
25:18 - so i'm going to say videos of i dot
25:21 - hide and what this will do is that it's
25:23 - going to hide the html elements that are
25:26 - actually that which is our which is what
25:27 - you're seeing underneath in here
25:29 - and so once we do that i'm no longer
25:32 - able to scroll
25:33 - through the webpage anymore because i
25:36 - i'm actually not seeing
25:37 - visually seeing all of the uh video tags
25:40 - being rendered on the web
25:42 - page so this is sort of like um
25:45 - this basic setup of what we need to do
25:47 - before we can start drawing
25:49 - actually one last thing that we are
25:50 - going to do is that we are going to
25:52 - populate another variable
25:54 - as an array and that only contain cloud
25:56 - video stars video and static video
25:59 - and the reason why we will need to do
26:01 - this and we'll explain after i do this
26:03 - so i'm going to say
26:04 - outside videos it's going to equal to an
26:07 - array and inside my square brackets i'm
26:09 - going to write
26:10 - cloud video comma stars
26:13 - video comma and static video
26:17 - and the reason why is we're separating
26:19 - it out into these two arrays is because
26:21 - this whole video is gonna the videos
26:24 - arrays that used
26:25 - to um do some sort of a general
26:27 - operation for
26:28 - all of our video files and what we're
26:30 - gonna actually do instead of draw
26:32 - in here is that actually i think there's
26:35 - a link to one of the diagrams that will
26:37 - help me
26:38 - explain this and there's a link to it in
26:40 - the
26:41 - starter code is that for our human video
26:45 - one of our videos that we have saved and
26:47 - loaded inside our b5j sketch right now
26:50 - we're going to actually crop the video
26:52 - program
26:53 - programically and um load them into
26:56 - these each of these four quadrants of
26:58 - the video is within
27:00 - the grid so we're going to call these
27:02 - the inner grid
27:04 - and then for all of other videos that we
27:06 - have stored inside of
27:07 - our outside videos array we're going to
27:11 - dynamically choose whichever one we want
27:13 - and put them all around our outside grid
27:16 - so that's why we have two separate um
27:18 - arrays happening in here okay
27:21 - and then with that said um we've already
27:24 - got some of these things that are done
27:25 - for us where
27:27 - um it calculates the positions the width
27:29 - and height and the positions of our
27:31 - um screens that we're going to be um
27:33 - drawing into with our video files that
27:35 - we've uploaded
27:37 - and so um we've also got you know uh the
27:40 - x and y
27:40 - location which is you being used for the
27:43 - top left corner of the rectangle
27:45 - already calculated for us the good news
27:47 - is that
27:48 - the image function which we're going to
27:50 - use to render the videos
27:52 - onto our p5.js sketch is also a
27:55 - rectangle and then also the x and y
27:57 - coordinates for the image files
27:59 - also are going to be used for the top
28:01 - left corner of the image so we don't
28:03 - have to do any more calculations to them
28:05 - but we have already been uh given for us
28:07 - as in as part of the starting code
28:09 - i'm going to go ahead and then i'm going
28:11 - to um
28:14 - read through some of these uncommon so
28:16 - it says that we're going to be
28:17 - filling the screens by which we mean the
28:20 - white rectangles
28:21 - with the video according to this i comma
28:23 - j position
28:24 - and the i comma j position is coming
28:27 - from the
28:28 - variables that are going the counter
28:30 - variables that are being used for the
28:31 - nested for loop
28:32 - and there's also a diagram that will
28:34 - help you visualize how those i comma j
28:37 - positions are going to be used
28:38 - and how we're going to reference them so
28:40 - there's this very um
28:42 - a really helpful wreck um diagram that
28:44 - is
28:45 - linked to inside of the web editor
28:47 - sketch in here
28:48 - where it says the i is going to go
28:50 - through like i said the columns of the
28:52 - grid
28:53 - and the j numbers are going to go
28:54 - through the rows of the grid
28:56 - so at zero comma zero we'll be
28:58 - referencing the referencing to the top
29:00 - left um grid on the four by four grid
29:03 - that we have
29:04 - and we're firstly gonna focus on these
29:06 - two four um
29:07 - quadrants in here where the i i j
29:11 - position is one one comma one two comma
29:13 - one one comma two and two comma
29:15 - two and so on and then the way that
29:18 - we're going to basically check
29:20 - which grid that we wanna draw onto
29:23 - within this nested for loop
29:25 - is going to be using an if statement so
29:27 - using an if statement for step 5 what
29:29 - we're going to do is we're going to say
29:31 - if i is equal equal equals to 1
29:35 - and if j is equal equal equals to
29:38 - 1 meaning that while we're going through
29:41 - this um
29:42 - nested for loop and i'm just actually
29:44 - just going to move it so my
29:45 - if statement is closing inside of
29:48 - containing all of these um
29:50 - comments in here but basically when this
29:53 - happens is that if
29:54 - going while going through this nested
29:56 - for loop
29:57 - if we've just hit this position
30:00 - for the um grid or the grid cell
30:04 - that we are looking for to display a
30:06 - specific
30:07 - video file then we're going to display a
30:10 - video file in here
30:12 - but like i said for the four inner grids
30:16 - what we're going to do is
30:16 - we're going to divide one video file
30:18 - into four sections
30:20 - and we're going to be using the image
30:22 - function but the image function the way
30:24 - that we're going to be using it
30:26 - is a little bit different than how you
30:28 - would have normally used it if you've
30:30 - used the function before
30:31 - so we're going to go to rp5.js um
30:35 - reference page and we're going to find a
30:37 - function called image
30:39 - so what the image function does is that
30:41 - after the image has been loaded you can
30:43 - use it to actually draw that image onto
30:45 - our p5.js sketch
30:47 - or onto our canvas and it you can use
30:51 - you know but it should have a minimum of
30:53 - three arguments in here
30:54 - the variable storing the actual image
30:57 - and the x and the y position
30:59 - of the image but you can also give it
31:02 - um form on two more arguments which will
31:04 - be used for the width and height of the
31:06 - image
31:07 - but you can also give it so much more
31:11 - arguments oh my god yeah we're gonna be
31:14 - giving a total of
31:16 - eight arguments wait is it eight no nine
31:19 - arguments for our image function
31:21 - because the last four uh numbers what it
31:24 - does is that
31:25 - you're actually selecting an area um
31:28 - of where you want so this is actually
31:30 - selecting a crop
31:31 - area actually and i know i could maybe
31:34 - talk about this for like you know
31:35 - several minutes to help you understand
31:38 - or i can just show you guys
31:40 - a diagram which will be a lot easier for
31:43 - me to explain
31:44 - what i'm trying to talk about so okay
31:46 - looking at this diagram
31:48 - what the d the um the ones that start
31:51 - with
31:51 - d uh for destination these are gonna be
31:54 - the four
31:55 - the second second argument third
31:57 - argument fourth argument and fifth
31:59 - argument
32:00 - of the image function right this is
32:02 - really similar to drawing the rectangle
32:03 - right where it's just where
32:04 - where is the top left corner and then
32:06 - how long is it and how high is it
32:08 - exactly but the next four arguments what
32:11 - it's going to what those are going to
32:14 - uh basically specify is where in the
32:16 - source
32:17 - image do you want to start drawing from
32:19 - and how much in terms of width in the
32:21 - source image you want to draw to um
32:24 - the width of it to and the height of the
32:25 - two so those are the four um
32:28 - so those are the eight arguments what
32:31 - i'm thinking of already is what happens
32:33 - if if the d heights
32:37 - d height and s height aren't aligned so
32:39 - like you're saying okay i want to draw
32:41 - this image
32:42 - so let's let's say s height is 50. so
32:45 - you're saying i want 50 pixels of height
32:47 - from the original image
32:48 - and then let's say d height is 100
32:52 - it will say okay take those 50 pixels of
32:54 - height from the original image
32:56 - and then what does it stretch it to fit
32:57 - to fill the entire 100 yeah interesting
32:59 - okay it will stretch to fit so what will
33:02 - happen is that so that basically means
33:04 - that your s
33:04 - height will have to be dependent on the
33:06 - image with an image height sorry the s
33:08 - height and the s
33:09 - width will have to be dependent on the
33:12 - image with an image height
33:13 - so then you know i can also reference to
33:15 - image with an image height using the
33:17 - method for the image or the video for
33:19 - the in this case
33:20 - and you can do divided by two but that
33:22 - divided by 2
33:24 - is going to be the half of the native
33:26 - image or the video's width and height
33:28 - and that's going to be different from
33:29 - the width and height of the canvas
33:31 - itself so it will do a bit of like
33:32 - scaling and stretching
33:34 - um as it is necessary um
33:37 - okay so i think we should actually just
33:40 - try
33:40 - using the function and then we'll get a
33:42 - little better sense of what we're gonna
33:44 - do
33:44 - uh but basically what we're gonna do
33:46 - here is that we're going to draw our
33:48 - human video
33:49 - uh render our human video using the
33:51 - image function
33:52 - and we're going to say here is that
33:54 - we're going to actually start
33:56 - from um the
33:59 - so we have to give it the destination x
34:02 - comma y
34:03 - which we're going to just use x comma y
34:06 - y because we have it um calculated for
34:08 - us in line 56 and 57
34:11 - inside of our draw loop and then it will
34:13 - be based on whatever the i
34:15 - and j values are anyway so we can just
34:18 - blindly use the x
34:19 - x and y values in here and the width and
34:22 - height is also going to be
34:24 - it's already calculated for us which
34:26 - exists in line 48 and 49 and they are
34:28 - given in
34:29 - uh as variables w and h so i'm also
34:32 - going to use that and say w
34:34 - comma h and so the next four digits are
34:37 - going to be the things that are going to
34:38 - be a little bit more
34:40 - complicated to think about but because
34:42 - at i comma i
34:44 - we're going to go back to this diagram
34:45 - and we know that this is here and we're
34:47 - gonna
34:48 - start wanting to draw from the top left
34:49 - corner of the image of the video file
34:51 - itself
34:52 - we're going to start off by zero comma
34:54 - zero and then for the next two arguments
34:57 - what i'm gonna do is i'm gonna refer to
34:58 - the video
35:01 - variable itself and do dot width divided
35:04 - by two
35:05 - so we're taking the whole width of the
35:07 - video and then we want to only draw to
35:09 - half of the video
35:10 - and then we're also going to go here and
35:12 - say human video
35:13 - where the height will say dot height
35:15 - divided by two
35:16 - so then what that will do is it will
35:18 - also take the total height of the video
35:20 - and then we only only want to draw half
35:22 - of that with height
35:24 - so it's going to start drawing from the
35:25 - top left corner of the video
35:27 - and it will draw for half the width and
35:28 - half of the height of the video itself
35:31 - so once that is done i'm going to press
35:32 - save and then we see
35:34 - this part of the grid being filled and
35:37 - we do only see the top left corner of
35:39 - the video file
35:41 - okay i hope this makes sense but i think
35:44 - that's okay because we've got
35:45 - three more rectangles to fill and then
35:48 - by that time i think
35:49 - people are going to get a little bit
35:50 - more accustomed to how we can use this
35:53 - so for the next um quadrant which is the
35:56 - one at i
35:57 - is one and j is two so i'm going to go
35:59 - back in here and then i
36:00 - i'm i can see that i'm going to be
36:02 - drawing this one so sort of directly
36:04 - underneath the one that we just drew
36:06 - so i will go back and say i'm going to
36:09 - create an else
36:09 - if statement in here and so i'll say
36:12 - else if i's equal equal equals to one
36:14 - and j is equal equal equals to two
36:18 - um and then inside of it and i'm going
36:20 - to contain
36:21 - all of this curly brackets inside i'll
36:24 - then say
36:25 - use the oh okay we have a
36:28 - tricky tricky situation happening with
36:30 - like all of the
36:31 - commenting let me try to structure it a
36:34 - little bit better
36:36 - and inside the if statement i'm going to
36:38 - use the image function here again i'll
36:39 - say
36:40 - image and i'm going to draw the same
36:41 - videos i'm going to say human video in
36:43 - here again as the first argument
36:45 - and i'll say x comma y comma w comma
36:49 - h because all of those are not going to
36:51 - change and x comma x and y are variables
36:54 - that are
36:55 - being calculated using the i and j
36:57 - variables anyway
36:59 - and then the next four arguments are
37:00 - going to be because i'm i'm drawing the
37:02 - one in here
37:04 - it's going to start from where x is zero
37:07 - but y is actually going to start where
37:09 - um
37:10 - how where it's at the midpoint in terms
37:12 - of height of the video file itself
37:14 - so we're gonna actually have to
37:16 - reference the human video file
37:18 - and then do dot height divided by 2 so
37:21 - it's going to start
37:22 - halfway to the height of the video file
37:24 - but the width and height of the video
37:26 - are going to stay the same because we
37:28 - still want to draw half of the width
37:30 - and half the height of the video so here
37:32 - we're going to say
37:33 - same as the one we did before
37:35 - humanvideo.width
37:36 - divided by 2 and human video dot height
37:40 - divided by 2. once that is done
37:43 - and we hit run we have this
37:47 - quadrant being filled with that video
37:48 - file as well
37:50 - um similarly we're going to continue
37:52 - with the same sort of like a
37:54 - pattern of programming and we'll do else
37:57 - if
37:57 - i is equal equal equals to 2 in this
38:00 - case
38:01 - and j is equal equal equal to one in
38:03 - this case
38:04 - so now we are drawing the grid
38:09 - um that is in here
38:12 - two comma one which is this one so
38:16 - then we're going to use the same image
38:18 - function in here and say
38:21 - um image function is going to draw the
38:24 - human video
38:25 - which will start at x comma y and we'll
38:28 - have width and height
38:29 - of w and h it will start at now this
38:33 - time
38:33 - halfway to halfway to our videos with
38:37 - so we'll say human video dot width
38:40 - divided by two
38:41 - but it will start all the way at the top
38:43 - so the y our y starting y is going to be
38:45 - at zero
38:46 - but our dimensions width and height
38:47 - dimensions gonna remain exactly the same
38:49 - again
38:50 - so we'll do human video dot width
38:52 - divided by two
38:54 - human video dot height divided by two
38:58 - we will hit run and then we see this one
39:00 - also being drawn to our
39:02 - grid and then lastly for the
39:06 - um the inner grid we're going to do
39:08 - another if
39:09 - else if statement this is going to be
39:11 - lost else if statement
39:12 - and then make sure that it closes after
39:15 - all of these comments
39:17 - um inside of our else if statement we're
39:20 - not going to check for
39:21 - if i equal equal equals to 2 and j
39:25 - is equal equal equals to 2. and inside
39:28 - of here
39:29 - then we're going to use our image
39:30 - function to draw the remaining quadrant
39:33 - of the video which will be at human
39:34 - video which will draw the human video
39:36 - file
39:37 - at x comma y at with width of w and
39:40 - height of
39:41 - h and then we will start at the middle
39:44 - of our video so this will be at x
39:47 - coordinate of
39:48 - human video dot width divided by two
39:51 - and human video dot height divided by
39:54 - two
39:56 - and our dimensions are also going to be
39:58 - exactly the same thing so i'm actually
39:59 - going to
40:00 - copy this and then paste it as the
40:05 - last two arguments of the function and
40:08 - we now have all of our integrated being
40:10 - filled
40:10 - with different um sections of the video
40:13 - file
40:15 - okay so the next thing or the last thing
40:17 - in terms of visualization that we have
40:19 - to do is fill
40:20 - all of this outside the grid and
40:23 - thankfully we're not going to do that
40:25 - one by one
40:26 - what we're going to do is that we're
40:27 - going to say basically what's happened
40:29 - in here in terms of the code structure
40:32 - is that we've checked for whether i and
40:34 - j are
40:35 - at specific locations and we've used if
40:38 - statement and then we've used an else if
40:40 - else if else if so if i at the end of
40:44 - all of these else's statements put an
40:46 - else that means i'm capturing all the
40:48 - other positions of the video file
40:51 - nice that's super clever i was wondering
40:52 - how you're going to do that
40:54 - yeah i don't want to you know do go
40:57 - iterate through all of them one by one
40:58 - manually
40:59 - so if we do if we eliminate all of these
41:02 - four positions we've got the rest
41:04 - and the rest of the videos we're going
41:06 - to fill it um more or less generatively
41:09 - and the way that we're going to do that
41:10 - is basically we're going to say
41:12 - create a global variable inside of this
41:15 - um
41:15 - else statement and say let's selected
41:18 - index is going to be equal to there is a
41:22 - formula that's given for you and i'm
41:23 - going to explain this a little bit
41:25 - but what this will do basically is that
41:28 - by using this index we're going to pick
41:30 - one um a video that will exist
41:33 - inside of our remember our outside
41:36 - videos
41:37 - array so we're going to just randomly
41:39 - pick one of them
41:41 - using that formula that we've just put
41:43 - in there and then we're going to display
41:45 - whatever video that's been generated or
41:47 - that's been picked to be placed
41:49 - in there and so we'll go back down here
41:52 - to where i just added the select index
41:54 - variable and what this does is that um
41:57 - whatever okay take um whatever this i
42:01 - so meaning like which column the video
42:03 - might be at and the j
42:05 - value so which row the video might be in
42:08 - and combine it together
42:10 - and then using modulus uh figure out
42:13 - where um figure out a index number
42:16 - of where it uh which video that we want
42:19 - to use
42:20 - inside of our outside videos arrays this
42:23 - seems a bit arbitrary but that's because
42:25 - it is it totally is arbitrary
42:27 - and we're just using something that is
42:29 - really um that uses the i
42:31 - and j values to decide which index for
42:34 - us to be able to use
42:36 - and we could have you might think okay
42:38 - well if you're just kind of arbitrarily
42:40 - selecting
42:40 - which index we want to use why not use
42:43 - random
42:44 - right that's a really exactly what i was
42:45 - going to say
42:47 - that's a really really valid um you know
42:49 - logical assumption
42:51 - and the reason why we can't use it is
42:52 - because you have to remember that we're
42:54 - drawing this inside
42:55 - of a draw loop so that means if we put a
42:59 - random function in here that picks a
43:01 - different um
43:02 - index every draw loop and for how many
43:05 - ever grids that we have
43:07 - it's going to randomly select a new
43:09 - index so it's
43:10 - it means it's going to continuously
43:13 - change which video is going to be
43:15 - displaying over and over and over again
43:18 - so that's exciting i suppose we could do
43:20 - something like
43:21 - couldn't we um uh generate
43:25 - however many random numbers how many is
43:26 - that uh 8 9 10 11 12. couldn't we
43:28 - generate 12 random numbers in an array
43:31 - up in
43:31 - setup or something and then that's
43:32 - static and that won't change so yeah
43:35 - you could figure out weird ways to do
43:36 - that but then you have this like weird
43:37 - way array of random numbers and that's a
43:39 - little bit
43:40 - odd as well yeah that's totally valid
43:42 - though and
43:43 - um this is something where like if you
43:44 - wanted to experiment with how you can
43:47 - select um videos for the outside grid
43:49 - this is totally you know
43:51 - please go in and try to figure out what
43:52 - you want to do but this is sort of the
43:54 - arbitrary way that we've
43:56 - we've come up with for you guys to start
43:58 - using
43:59 - to do a generative selection of the
44:01 - videos that you want to display for the
44:03 - outside grid
44:04 - and what we're going to do now is that
44:06 - using whatever the selected
44:08 - index i'm also i'm going to create
44:10 - another
44:11 - local variable in here and i'll say let
44:13 - selected
44:14 - video and then i'm actually going to
44:16 - reference that outside videos array in
44:18 - here
44:19 - outside videos array and inside the
44:22 - square brackets i'm going to
44:24 - use my number that i've um created for
44:27 - the selected
44:28 - i've calculated for the select
44:31 - index ah the comment says selected index
44:35 - and i wrote select
44:36 - i'm going to change it so that it fits
44:38 - the comment so it'll say
44:40 - select selected index in here and also
44:42 - say let selected index in here
44:45 - the last thing that we'll do for the
44:47 - outside grid and then we'll see this
44:49 - magically appear after this step
44:51 - is to actually draw these videos and
44:53 - we're going to use the image function
44:54 - again
44:55 - this time we're not going to use all
44:57 - nine
44:58 - all of our nine um arguments we're gonna
45:00 - just use five
45:02 - five seems like it's not a lot one
45:04 - compared to nine
45:05 - and so what we're going to do here is
45:07 - we're going to draw whatever the
45:08 - selected video is
45:10 - at x comma y with height width of w
45:14 - and height of h that's also already
45:16 - calculated for us
45:18 - once it's safe we get an error great
45:21 - okay outside video is not defined
45:24 - in line 96 i have a feeling i probably
45:28 - misspelled something uh videos now
45:32 - oh oh when the e is flipped nice
45:36 - okay so i spelled videos correctly and
45:39 - we have
45:40 - a video sculpture a digital visual
45:44 - video and so because we have some time
45:48 - left we are going to do this extra task
45:50 - that i've
45:50 - written down here and that is to add
45:52 - some interactivity
45:54 - and this is also the part that you can
45:56 - kind of like now you can take it however
45:58 - you want you can
45:59 - add different kinds of interactivity
46:01 - depending on what you want to do with
46:02 - this video sculpture
46:03 - but the thing that we are going to do is
46:05 - we're going to
46:06 - uh use the mouse clicked function which
46:09 - we looked at in our last session
46:11 - and then we are going to use a variable
46:13 - global variable
46:14 - the only one that we haven't used so far
46:16 - which is the counter variable
46:18 - and we're just going to increment that
46:20 - and use that counter variable
46:22 - like i said the place that you want to
46:25 - manipulate to get different outside
46:28 - videos
46:29 - or a new selection of the outside videos
46:32 - is by manipulating this value the
46:34 - selected index value so we're going to
46:36 - use the counter variable
46:38 - somehow in here and that's going to be
46:41 - something that just increments
46:42 - over time when the mouse is being
46:44 - clicked on the canvas
46:46 - so we'll define this uh event function
46:48 - in here called function
46:50 - mouse click and the contents of this
46:52 - function only run
46:53 - and run once when a mouse is correct
46:55 - when mouse is clicked within the canvas
46:57 - element
46:58 - and here it's gonna we're gonna keep it
47:00 - super simple and say counter plus plus
47:02 - so what that will do is that every time
47:04 - the mouse is clicked the counter
47:05 - variable is gonna increment by one
47:07 - we can quickly check that by saying
47:09 - console.log counter
47:12 - and let's run that and we'll see that it
47:14 - goes 2
47:15 - 3 4 5 6 and so on
47:19 - so we're going to use that number to
47:21 - basically you can use that now however
47:23 - you want
47:24 - i'm just going to just blindly times
47:26 - this
47:27 - the j by counter and again
47:30 - be you can be as creative as you want to
47:33 - whatever you want to do in here
47:35 - and you can hit run now it goes
47:39 - every time i'm pressing on it something
47:42 - new happens
47:44 - i actually had a really quick
47:47 - idea i don't know what this is gonna do
47:49 - i'm gonna put
47:51 - second in here
47:56 - what is second oh every second
47:59 - yeah got it yeah yeah is a p5.js
48:02 - function
48:03 - that returns you the second number of
48:06 - every second of the clock
48:07 - so it's going to go from zero all the
48:09 - way to 59.
48:11 - so what this does is that every every
48:13 - second
48:14 - something new happens nice that's clever
48:17 - yeah so we could do something like that
48:19 - but it just it is not like a
48:21 - it will do an animation animation of the
48:23 - video selection
48:24 - but if you wanted to keep it you know
48:26 - like attached to
48:28 - a user interaction we can go back to
48:30 - using the counter variable in here
48:34 - or if you really wanted to mix them up
48:36 - together you could do
48:38 - second in here i feel like you could
48:40 - create a really weird version of a clock
48:42 - using video sculptures yeah that's
48:45 - interesting
48:46 - so now we've got something that is
48:47 - happening over time
48:51 - and then i can still change things
48:54 - if i press the mouse as well nice
48:57 - yeah do you want to how would you
49:01 - how would you make your click more
49:04 - targeted and i think i
49:06 - i know how i would do this but it's
49:08 - really cumbersome
49:09 - and annoying but like so if i say if i
49:12 - wanted like okay i'm clicking on
49:14 - the um you know first video in the
49:17 - uh or the third video in the first
49:19 - column and i want only that one to
49:21 - change
49:21 - how would you go about like making your
49:24 - like canvas targetable of like oh i'm
49:27 - clicking in this area
49:29 - i think you are trying to lead me into
49:31 - the next week's
49:33 - topic the next week's livestream topic
49:36 - but
49:36 - i think there could be a number of
49:38 - different ways that we can do that
49:40 - and one of the perhaps maybe like easier
49:43 - way to think about it but
49:45 - in terms of code it's going to be long
49:47 - and repetitive lines of things
49:49 - we just using if statements right
49:51 - because we've already got these
49:53 - um x and y coordinates figured out for
49:56 - us for each of these rectangles
49:58 - so what we could do is that actually
50:00 - within the if statement
50:01 - you could use the mouse's pressed
50:04 - boolean variable inside of the
50:06 - nested for loops and say if mouse is
50:08 - pressed and if
50:09 - mouse x is between the or bigger than
50:13 - x value and bigger than y value
50:16 - then something else could happen right
50:19 - yeah so you do this kind of like the
50:20 - targeting thing
50:21 - that was my idea of basically saying
50:24 - yeah
50:24 - is the mouse inside a certain bound and
50:27 - if it is
50:27 - then um you know then change that
50:31 - specific
50:31 - image yeah but the way that i actually i
50:34 - think i would do it
50:35 - is i would turn each of these screens
50:37 - into an object
50:39 - and so yeah if if you create this as an
50:41 - object
50:42 - which you can also i'm gonna stop this
50:44 - for a little bit because i think it's
50:45 - you know creating a lot of um visual
50:48 - distraction but if we do create it as an
50:51 - object you can also
50:52 - pass in the um the variable that's
50:54 - containing your video or your image
50:56 - inside of the object itself
50:58 - and then so you should be able to do all
51:00 - of this displaying and everything inside
51:01 - the object as a method
51:03 - but it also means that you can you're
51:05 - you know t
51:06 - uh maintaining the x and y coordinates
51:08 - and the width and high coordinates for
51:10 - all of these screens in there
51:11 - so then you can just say you know if
51:13 - mouse is pressed and if it's
51:15 - between this dot x
51:19 - plus some width then it is probably
51:22 - within the lounge
51:23 - so you still have to do some sort of
51:24 - boundary checking one way or another
51:27 - yeah but making this object oriented
51:28 - would definitely i mean i
51:30 - i guess it's arguable whether it's
51:32 - cleaner or not because the
51:33 - the class that you end up writing or the
51:34 - object that you end up running is uh
51:36 - will end up being complicated but um
51:39 - definitely a strategy that you could use
51:41 - yeah um i mean we can try doing the
51:45 - other
51:45 - one because we've got some time no i i
51:48 - mean
51:49 - i don't think we necessarily need to i
51:51 - think um
51:52 - turning it over to the chat right now if
51:53 - they have questions or ideas about ways
51:55 - to uh
51:57 - to extend this or uh g1 i'm curious some
52:00 - other ideas that you've had as you were
52:02 - developing this or
52:04 - seeing this project get created of other
52:06 - things that we could do um
52:08 - i think that whole idea of like turning
52:10 - this uh oops what did i do
52:12 - turning this uh video sculpture into
52:14 - some sort of a clock would be really
52:15 - interesting
52:17 - because i mean clock is definitely you
52:19 - we use it to
52:21 - keep track of time and to reference time
52:23 - but i think it's also
52:25 - just in general to be able to look at
52:26 - something like this and just
52:28 - realize the notion of time passing but
52:31 - not necessarily being able to know what
52:32 - time it is i think it's just an
52:34 - interesting concept as it is so if
52:37 - people wanted to like somehow figure out
52:39 - rules to changing different
52:42 - visualizations in here to make it like a
52:44 - clock
52:45 - um and that kind of reminds me of
52:48 - another digital artist's work um
52:51 - john simon jr john f simon jr
52:56 - he's got these on lcd screen clock
52:59 - pieces i'm not sure if i'm going to be
53:00 - able to go here
53:02 - so these pieces are actually almost
53:04 - clock-like because although the visual
53:06 - oh
53:06 - it doesn't actually zoom huh
53:09 - all of these visualizations that you see
53:11 - in here
53:12 - they are they run with time and if you
53:15 - go
53:15 - see any of these pieces in a library not
53:18 - library
53:18 - maybe library but in a museum you'll see
53:21 - all of these animating and then like you
53:23 - know
53:24 - if this goes around in a loop then
53:25 - something else happens another
53:26 - visualization that kind of
53:28 - things so maybe like combining these two
53:31 - inspirations like namjoon peak and like
53:33 - john f simon jr
53:34 - you could create like a clock-ish
53:36 - animated version
53:38 - of um crackish animated version of the
53:41 - clock yeah i'm using
53:44 - this as a template i could i could see
53:47 - when you're talking about clocks here
53:49 - and and counting and stuff i could see
53:50 - this
53:51 - being kind of a binary counter here
53:53 - where you have
53:54 - um a bunch of different screens that
53:56 - could either represent a zero or a one
53:58 - and then every second
53:59 - it takes up to the next binary number i
54:02 - think we had
54:02 - jonathan not read your mind alex
54:06 - yes could do like a binary clock
54:10 - um yeah so that's one thing that i think
54:12 - i can think of another thing is like
54:14 - we've kind of put you know selected
54:16 - these like very glitchy
54:18 - and like almost futuristic futuristic i
54:21 - don't know if that's like the right
54:22 - genre but like we've created we've
54:24 - selected a
54:25 - series of videos uh with our aesthetic
54:29 - um choices but i think you could
54:31 - definitely think about
54:32 - do you want to create some sort of a
54:34 - theme or a story in here
54:36 - and you could also you know swap out
54:39 - videos inside of the
54:40 - uh videos array you could up upload your
54:44 - own
54:44 - videos in here but you could also you
54:47 - know create
54:48 - some sort of a story with it so you
54:50 - could have a lot more videos in a video
54:52 - file
54:53 - and then you could go through after a
54:55 - certain amount of frames have passed
54:57 - i want to actually use videos from you
54:59 - know not from one to four but i want to
55:01 - now use it from five to eight or
55:03 - something like that
55:04 - so you can keep like a story going in a
55:06 - loop as well
55:07 - yeah probably more more interesting ways
55:10 - to apply this idea of like segmenting a
55:12 - video into different quadrants or
55:14 - different parts of the video
55:15 - i could see you applying that to the
55:18 - outer the outer ring of videos
55:20 - um other things like
55:24 - you know now that you know how to
55:25 - display videos in smaller segments
55:27 - within your canvas
55:29 - you can use a video file to do like a
55:31 - tetris or
55:32 - you know you don't have to just display
55:35 - videos in a static way you could have
55:37 - videos move with like keyboard or with
55:39 - your mouse
55:40 - and all that kind of stuff so you don't
55:41 - have to think about videos and
55:43 - actually i think you know what i think
55:44 - it'd be really interesting to do some
55:46 - sort of like a
55:47 - paint tool by using different video
55:49 - assets i was i was just gonna say can we
55:51 - can we try connecting one of uh one of
55:53 - those videos to your mouse and just
55:55 - start dragging it around
55:56 - yeah let's do that so i'm gonna actually
55:58 - do it outside
56:00 - um of all the loops and i'll just say
56:04 - image and then let's pick one video i'll
56:06 - pick the cloud video
56:08 - and i'll do um mousex
56:12 - mouse y and then keep our i'm just going
56:15 - to keep 100 100
56:17 - for width and height and let's see what
56:19 - happens
56:22 - and i think it's because actually like
56:24 - we're drawing
56:25 - our background i don't know how much of
56:27 - a mess this is going to be
56:28 - we'll see
56:32 - that's right the uh so the grid
56:36 - keeps getting painted or the videos in
56:38 - the grid keep getting painted over but
56:40 - uh yeah but the cloud is
56:43 - now painting it the background yeah
56:47 - so that's fun so you could draw with
56:50 - different video assets instead of image
56:52 - assets or
56:53 - you know just a primary color or
56:56 - something
56:58 - so there's multiple ways you can take it
57:01 - i think
57:02 - these are tools and you know you're not
57:04 - messing up if you
57:06 - if you mess like a cell of this video
57:08 - grid up it's not gonna cost you an
57:10 - actual tv monitor
57:12 - i think that's like also another way of
57:14 - like if you were actually you know if
57:16 - you did really want to make a live video
57:18 - sculpture
57:19 - this actually is a way that you can use
57:20 - p5.js to do a digital mock
57:23 - of what you want to make so you could if
57:25 - you wanted to try it out with multiple
57:27 - other grids
57:28 - numbers of grids or you know if you want
57:30 - to do a long
57:31 - um and a wide one or if you want to do a
57:34 - tall one
57:35 - this could be like a tool that you can
57:37 - use to basically
57:39 - um see what that looks like and then
57:41 - like you might want to actually put that
57:43 - together physically
57:46 - cool that's a fun one
57:49 - yeah um obviously you want to kind of
57:52 - preview what we'll do next week a little
57:54 - bit sure
57:56 - um yeah so next week i'm gonna or the
57:58 - next two weeks actually i'm gonna be
57:59 - leading the sessions
58:00 - and i'm already feeling uh lots of
58:02 - pressure of where jihan creates these
58:04 - like amazing artistic
58:06 - uh uh creations and mine is gonna be
58:09 - very low quality in terms of artistic
58:12 - value i would expect like
58:14 - colored circles bouncing around um
58:17 - but next week's session what we're gonna
58:18 - do is we're gonna look into
58:21 - what object-oriented programming is
58:23 - working with
58:24 - classes and objects um again my
58:27 - background with p5
58:28 - is that i never really use it as an
58:32 - artistic tool i use it as a
58:34 - as a teaching tool so i taught um
58:37 - intro level programmers how to program
58:40 - using p5 and so
58:41 - basically i'm going to run a kind of a
58:43 - little class on what are objects
58:45 - what are classes and using p5 to do that
58:48 - so
58:49 - we'll be turning little balls into
58:50 - objects that can then bounce around and
58:52 - maybe we can add some
58:53 - clickable stuff or we'll see where it
58:55 - goes but it will be
58:56 - um kind of more of a traditional um
59:00 - programming lesson or like the the goal
59:04 - of the lesson is to learn programming
59:05 - concepts rather than to create
59:07 - a piece of artwork but a nice a nice
59:10 - side effect is that the thing that we
59:11 - will create will still be fun and visual
59:12 - rather than like
59:13 - you know print statements which is what
59:15 - usually happens when you learn
59:17 - inter-programming topics
59:19 - but i think um op or object-oriented
59:21 - program is going to open up
59:23 - a much larger door into creating
59:25 - generative visualizations
59:27 - there's so much more you can do when you
59:29 - apply oop concepts to
59:31 - your your visual programming so yeah
59:34 - i'm excited yeah i'll be interested to
59:35 - see to get your thoughts on
59:37 - how else you can how else we can apply
59:39 - uh uh that programming style to this
59:42 - so cool cool all right well thanks
59:46 - for checking this one out everyone um do
59:48 - you want great work
59:49 - anything else you want to say do you
59:50 - want no um i will see you guys next week