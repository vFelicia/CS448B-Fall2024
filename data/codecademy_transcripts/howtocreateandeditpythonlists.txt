00:00 - in this demo we will turn our attention
00:03 - from strings to list lists are
00:05 - sequential containers for index ordered
00:08 - elements and which can grow and shrink
00:10 - in size lists are mutable and in many of
00:13 - these respects they are similar to data
00:15 - structures such as arraylist in Java
00:18 - however because of the way in which
00:20 - python combines object oriented and
00:22 - functional programming lists in Python
00:25 - are probably far more important than
00:27 - arraylist ever will be in Java
00:30 - let's go ahead and get started on screen
00:32 - now we've defined an empty list this is
00:35 - a variable called my list we can see
00:37 - that it's on the left hand side of the
00:39 - equal to sign on the right hand side we
00:41 - have a pair of empty square brackets
00:44 - we've already briefly encountered this
00:46 - and so we know that square brackets are
00:48 - used to define the list ordinary
00:51 - parentheses are used to define tuples
00:52 - and curly braces are used to define sets
00:56 - and dictionaries
00:57 - we can invoke the print method on a list
01:00 - just as we can with pretty much any
01:02 - other python object this is going to
01:04 - return just the pair of square brackets
01:07 - which we see up above because we don't
01:08 - have any elements in our list as we
01:11 - shall see in subsequent demos the print
01:13 - statement will invoke the wrapper
01:15 - function on every object in the list
01:17 - let's go ahead and create another empty
01:20 - list in a slightly different fashion the
01:22 - syntax is on screen now
01:24 - on the right hand side of the equal to
01:26 - sign we have the name of the list class
01:28 - followed by parentheses but you should
01:30 - be clear that we are not invoking any
01:33 - method from the list class this can be
01:35 - thought of as equivalent to
01:37 - instantiating an object in Java using
01:39 - the new keyword along with the
01:41 - Constructor we could pass in a set of
01:43 - values which we like placed into our
01:45 - list but here we have not done so and
01:48 - that's why what we get back is an empty
01:50 - list when we print it out a screen all
01:52 - that we see is a pair of square brackets
01:54 - let's now go ahead and create a list
01:56 - which has elements in it this is done
01:59 - using the same square bracket syntax
02:01 - which we see in cell 1 up above with the
02:04 - difference that we now have values
02:06 - between those square brackets which are
02:08 - separated by commas
02:09 - in this instance every one of those
02:11 - values is a string we have four such
02:13 - values badminton golf basketball and
02:16 - tennis
02:17 - when we hit shift enter games list
02:19 - appears as a list with four elements
02:22 - if we invoke the type function on our
02:24 - list what we are going to get back is
02:26 - list remember that list is one of the
02:29 - three sequence types in Python the other
02:31 - two are tuples and ranges
02:34 - let's now access individual elements
02:36 - from the list we do this using the index
02:39 - of operator this index of operator
02:41 - consists of a pair of square brackets
02:44 - along with an integer index
02:46 - that integer index is currently set to 0
02:49 - on screen now and you can see that
02:51 - indexing into the list has given us the
02:54 - first element that's badminton as we can
02:57 - see from this indexing in Python starts
02:59 - from 0 in similar fashion if we index
03:02 - into our games list with the index 1 we
03:05 - are going to get golf if we do so with
03:07 - the index 3 we are going to get tennis
03:11 - our list had four elements what happens
03:13 - if we try an index in with a number
03:15 - which is equal to or greater than 4 well
03:18 - we are going to get an error you can see
03:20 - this on screen now this is an index
03:22 - error list index out of range that's
03:25 - because we try to access the Fifth
03:27 - Element using the index 4 there is no
03:30 - such element and that's why the error
03:32 - resulted if you come from java this
03:35 - ought to be pretty familiar it's very
03:37 - much like an index out of bounds
03:38 - exception next let's turn our attention
03:41 - to negative indexes before we do this
03:43 - let's first refresh our memory let's see
03:46 - what the games list contains it has the
03:49 - four elements badminton golf basketball
03:50 - and Tennis let's now try an index into
03:53 - this list with the negative index that
03:56 - is negative 1. we can see that this
03:58 - returns tennis which is the last element
04:01 - in the list
04:02 - if we try with the negative index
04:04 - negative 2 we get back basketball
04:07 - and from this we can discern the pattern
04:09 - negative indexes are going to work from
04:12 - the end of the list backwards when we
04:15 - specify negative one that's going to
04:17 - give us the last element in the list
04:19 - negative 2 will give us the second last
04:21 - element and if we try negative 4 that's
04:24 - going to give us the first element in
04:27 - this Four Element list which is
04:28 - badminton I like to remember how
04:30 - negative indexes in Python work with a
04:33 - shortcut
04:34 - positive indexes start from the
04:36 - beginning of the list and are indexed
04:38 - starting from 0 negative indexes start
04:41 - from the end of the list and start from
04:44 - one and as a result of this we can take
04:47 - the length of the list back on a
04:50 - negative sign in front of it and that's
04:51 - going to give us the first element in
04:54 - the list here our list had four elements
04:56 - the length of the list is 4 we attack on
04:59 - the negative sign and that gives us
05:00 - minus 4 so the index minus 4 gives us
05:04 - the first element in the list if we go
05:06 - beyond this we get the same index error
05:09 - that we encountered a moment ago we now
05:11 - try to index in with negative 5 and we
05:14 - have an index error list index out of
05:16 - range as we discussed in a previous
05:19 - example there are really no restrictions
05:21 - on the kinds of elements in a list on
05:24 - screen now we've defined three lists
05:26 - integers list float list and Boolean
05:29 - list as the names of these variables
05:31 - would suggest they only contain objects
05:33 - of the corresponding type it's also
05:36 - perfectly acceptable to create a list
05:38 - which has elements of different types
05:40 - and we'll get to that it's not very
05:41 - commonly used
05:43 - to get the number of elements in a list
05:45 - we simply invoke the Len function on it
05:48 - this is a built-in function which can
05:50 - work with pretty much any sequential
05:52 - data type here when we invoke Len on the
05:55 - games list the value printed out to
05:57 - screen is 4.
05:59 - in similar fashion if we invoke Len on
06:02 - the integers list the value that's going
06:04 - to be printed out the screen is 5
06:06 - because of course that listed five
06:08 - elements
06:09 - as we remarked a moment ago there's
06:11 - absolutely nothing preventing us from
06:13 - creating a mixed list which has elements
06:15 - of different types we've done exactly
06:17 - this on screen now mixed list is also
06:20 - the name of our variable and this is a
06:23 - list like any other we can invoke the
06:25 - Len function on it and the value printed
06:28 - outer screen is 8 and we can count and
06:30 - satisfy ourselves that there are indeed
06:32 - eight elements in the list of above
06:35 - lists are mutable we can change the
06:38 - contents of lists and we can do this in
06:40 - two different ways we can either replace
06:43 - one element of a list with another
06:45 - object
06:47 - or we can modify the elements of the
06:49 - list itself both of these are acceptable
06:52 - let's see this with some examples let's
06:54 - go back to the games list which we
06:56 - created a moment ago games list still
06:58 - has the four games in the badminton golf
07:01 - basketball and tennis
07:03 - next let's go ahead and modify the
07:06 - zeroth element to be soccer
07:08 - we've done this by having games list
07:11 - indexed in with the index 0 on the left
07:15 - hand side of an equal to sign then on
07:18 - the right hand side we have a new string
07:20 - which is soccer
07:21 - if we check the contents of games list
07:24 - after this reassignment of the zeroth
07:26 - element we can see that the zeroth
07:28 - element is now soccer We have replaced
07:31 - the zeroth element it used to be
07:33 - badminton and now it's soccer so this
07:36 - proves that lists are indeed mutable
07:39 - changing one specific element of the
07:41 - list does not alter the other elements
07:44 - in any way on screen now we are setting
07:46 - the element at index position 3 to be
07:49 - equal to table tennis and when we print
07:51 - games list we can see that only that
07:53 - particular element has been modified
07:56 - these operations that we just performed
07:58 - were both reassignments we were entirely
08:00 - changing the objects at specific index
08:03 - locations let's go ahead and modify this
08:06 - in a slightly different way to do this
08:08 - let's first bring up our integers list
08:11 - this has the values 10 20 30 40 and 50.
08:14 - now we are going to modify one of the
08:18 - elements note again that we are not
08:20 - reassigning the element we are modifying
08:23 - it
08:24 - the index into the list using the square
08:27 - brackets operator and then we use the
08:29 - unary plus equal to operator to modify
08:32 - the object at index position 1 by adding
08:35 - a hundred to it and when we print out
08:37 - integers list after this modification we
08:40 - can see that that element has changed
08:42 - from 20 to 120. this is a modification
08:46 - let's perform another modification this
08:49 - time of the object at index position 4
08:52 - we use the unity multiplied by equal to
08:55 - operator we have 10 on the right hand
08:57 - side of that Unity operator and when we
09:00 - run this line of code we can see that
09:02 - the last element in the list that's the
09:04 - one at index position 4 has gone from
09:06 - being 50 to being 500 it's been
09:09 - multiplied by 10. early on in the demo
09:12 - we had created an empty list with the
09:15 - keyword list on the right hand side of
09:17 - the equal to sign followed by a pair of
09:19 - parentheses here we are again using a
09:23 - similar bit of syntax however this time
09:25 - on the right hand side we pass in
09:27 - various values those values are apples
09:29 - bananas Pairs and mangoes this operation
09:33 - does not go through when we run this we
09:35 - get a type error telling us that a list
09:38 - expected at most one argument but got
09:41 - four
09:42 - and this is because we need to modify
09:44 - this syntax ever so slightly
09:46 - let's rerun this command but this time
09:49 - we'll have a not one but two pairs of
09:51 - parentheses around the four fruit names
09:53 - and this time when we hit shift enter
09:55 - everything works just fine the return
09:58 - value when we examine fruit list is
10:01 - indeed a list with the names of all of
10:03 - the fruits in there what just happened
10:06 - the first time around that's on Cell 28
10:08 - when we passed in the names of those
10:10 - four fruits they were treated as
10:12 - individual values the second time around
10:15 - those four fruit names when enclosed
10:17 - within parentheses were treated as a
10:19 - tuple
10:20 - and this caused the list Constructor
10:24 - convert our Tuple into a list tuples are
10:28 - very similar to lists in that they are
10:30 - also sequential indexed ordered
10:32 - collections but the difference is that a
10:34 - topical is immutable a list is mutable
10:38 - so this bit of code on line 29 converted
10:41 - a tuple into a list and that's why it
10:44 - worked fine
10:45 - do keep this little example in mind it's
10:47 - an example of a rare instance where
10:50 - python syntax is not very intuitive this
10:53 - counter-intuitive syntax explains why
10:55 - the usual way of creating a list when we
10:58 - have values is using the square brackets
11:01 - you can see this now on Cell 30 we've
11:03 - simply enclosed all of those values
11:05 - between square brackets and separated
11:07 - them by commas this has the exact same
11:10 - effect as the previous bit of code and
11:12 - the syntax is a lot simpler we still
11:15 - have a list with all of the fruit names
11:17 - in there