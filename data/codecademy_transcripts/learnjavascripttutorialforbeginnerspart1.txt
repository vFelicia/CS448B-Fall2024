00:00 - Hi everyone, this is David Patlut from Codecademy.
00:02 - In this lesson walkthrough video, we'll walk through the first lesson in the Learn JavaScript course.
00:07 - In this lesson, we'll cover some of the basics of the JavaScript programming language and some other fundamentals.
00:12 - I'm really excited to be part of your learning journey, let's get started.
00:16 - Let's talk about what we'll be covering in this lesson.
00:19 - In this lesson, we will cover the following 
topics:
00:22 - First, we will cover a brief introduction to the JavaScript programming language.
00:26 - We'll talk about things like what it is, where it comes from, and the common use cases.
00:32 - Then we'll talk about basic JavaScript programming.
00:36 - We'll cover things like how to use the console, how to write comments, some common JavaScript data types, how to use arithmetic operators,
00:44 - how to perform string concatenation, and the basics of methods, properties, and built-in objects.
00:50 - There is a lot to cover, so let's get started.
00:53 - As we go through the lesson, we will cover three distinct parts of an exercise.
00:57 - The first part will be a recap of the lesson narrative.
01:01 - As we review the contents of the narrative, I might switch over to a Codecademy workspace to show some examples.
01:07 - If you're not familiar with workspaces, they are a feature Codecademy offers to create shareable sandbox environments
01:13 - for multiple programming languages.
01:15 - You can write your code in the sandbox and then share it using a unique link.
01:20 - To share it, you can go up to the right hand corner,
01:22 - click the share button, and then copy the link. You can either make them public or private.
01:28 - If you'd like to create your own workspace, click 
My Home on the Codecademy main navigation bar.
01:34 - While on this page, scroll down until you hit My 
Workspaces.
01:39 - From here, you'll be able to see all the workspaces that you create and create new ones.
01:44 - If you'd like to create a new one, click new workspace.
01:49 - Here, you'll find options for the different 
languages that you can create a workspace for.
01:53 - Any code that we write while covering the narrative will be hosted in a workspace.
01:58 - Don't worry, we will link to the workspace in the video's description.
02:02 - You can follow along in the video or visit the workspace link and see the code for yourself.
02:07 - Once we are done recapping the narrative, we will scroll down and cover the instructions portion of each exercise.
02:13 - The instructions portion is a set of challenges to 
test your knowledge of the content that is taught in the narrative.
02:18 - In this video, I'll be referring to each individual challenge as a checkpoint.
02:23 - For this portion, we will work directly in the exercise rather than a workspace.
02:28 - Lastly, once we finish the checkpoints we will take a look at the community forum section.
02:33 - This section hosts a variety of frequently asked questions by Codecademy users.
02:38 - We will take a look at one or more of the questions together.
02:41 - Now that we have an overview of how the walkthrough will work, let's get started with the first exercise.
02:46 - Exercise one: What is Javascript?
02:50 - All right, let's talk JavaScript.
02:52 - JavaScript is one of the most popular programming languages and it's based on what's known as the ECMAScript standard.
02:59 - ECMAScript is a standard used to define any general purpose scripting language.
03:04 - It is maintained by ECMA International, an organization that defines standards for different technologies,
03:09 - such as programming languages like JavaScript. We can think of JavaScript as a subset of ECMAScript.
03:15 - It is defined as a general purpose scripting language that conforms to the ECMAScript specification.
03:21 - That might sound a bit technical and complicated,
03:24 - but the gist of it is is that JavaScript is a language that was created 
based on a template, in this case ECMAScript.
03:30 - JavaScript still has its own unique features and characteristics, but also guarantees
03:34 - that it follows some guidelines about what it 
should be able to do as a programming language.
03:39 - Don't worry too much about ECMAScript, since we won't ever directly deal with it.
03:42 - Some developers even use the words JavaScript and ECMAScript interchangeably,
03:47 - since JavaScript is the most popular implementation of the ECMAScript standard.
03:50 - What is important to know about ECMAScript is that the latest version of JavaScript
03:55 - and the one we'll be working with is called ES6 which is short for ECMAScript version 6.
04:00 - It's also important to know that most of the modern web browsers such as Chrome or Microsoft Edge use JavaScript under the hood.
04:08 - They're actually built with it.
04:10 - However, even if a browser isn't directly built with JavaScript they'll typically still work with the language in some capacity.
04:16 - In most cases, we'll be able to use JavaScript in tandem with a browser, since we'll be working with web development.
04:23 - We will explore more about this in later lessons.
04:26 - Lastly, JavaScript has a bunch of use cases. It can be used for web development, as we just mentioned, 
04:31 - mobile apps, or even games. The possibilities for what you can build with JavaScript are pretty endless.
04:38 - The exercise in this lesson, for this introduction, 
doesn't have any checkpoints for us to do,
04:43 - so let's move on to the community forum section and cover a frequently asked question.
04:47 - A commonly asked question by Codecademy users in this exercise is, "How are Java and JavaScript different? Which one should I learn?"
04:54 - This is a great question.
04:56 - Before we touch on Java and JavaScript, specifically, let's talk about the process of picking a programming language.
05:02 - When we are starting out in programming, it is very easy to be confused about which programming language we should choose.
05:07 - This is due to the sheer fact that there are so many programming languages that exist.
05:11 - Should I learn JavaScript? Should I learn Java? How about Python? Maybe C++? Or C#?
05:18 - It may feel like there are endless options.
05:21 - The most important thing to remember is that all programming languages share common traits.
05:25 - When you learn the basics of one language, it will feel much easier to pick up your second, third, or even fourth language.
05:31 - Don't worry too much about which language you choose just yet, because you can't really go wrong.
05:36 - In terms of Java and JavaScript, it's important to know that they are both programming languages that share a common name.
05:42 - However, they were invented to serve different purposes.
05:46 - We won't dive too deep into their differences in this video, but we will include an additional resource comparing the
05:51 - two languages in the video's description, if you 
would like to learn more.
05:55 - Exercise 2: Console
05:57 - Now that we've covered a bit about the JavaScript language,
06:00 - let's take a look at one of the most common components that we'll be interacting with: the console.
06:04 - In JavaScript, the console is a way to see important information such as code output, errors, and much much more.
06:11 - To use the console, we'll be doing so using the console keyword.
06:15 - A keyword is a specific reserved word that is built into a programming language, in this case JavaScript.
06:23 - Using the keyword lets us tell JavaScript to target the console component, so that way we can use it.
06:28 - Kind of like pointing a finger and saying, "Hey JavaScript, I'd like to use the console, give me 
access to it."
06:34 - On the right hand side, you'll see an example of what a console might look like.
06:38 - This is an example of a web browser console. 
06:41 - You'll find these types of consoles in browsers such as Chrome, Firefox, or Microsoft Edge.
06:47 - We won't be using this type of console, specifically, because our console will be built directly into the lesson.
06:54 - We'll see more on this when we switch over to 
using the workspace to test this out ourselves.
06:59 - To log data to our console, we can append .log to the console keyword.
07:04 - For example, here's console.log(5).
07:08 - What's happening here is we're using the console keyword, we're using .log to specify that we want to log something to the console,
07:16 - and then we're specifying what we want to log, in this case, the number five.
07:20 - What we're actually doing behind the scenes is using an object and a method.
07:25 - We'll circle back around to these terms later in the lesson and then you'll get the full picture of how it all works.
07:31 - For now, just know that we can attach certain keywords to console to make it perform a specific task.
07:38 - In this case, .log tells the console we'd like to log or output some kind of data.
07:44 - Let's take a look at the console in a workspace to see this in action.
07:47 - Here is the workspace we will be using throughout the lesson.
07:51 - Don't worry, the link for this workspace will be available in the video's description, if you want to access the code we are working on.
07:57 - On the right-hand side where it says, "run your code to see 
output", we will have our output console component.
08:04 - This is where we'll be able to see the output of using the console.log.
08:08 - So, let's see how we can actually output to this console. Let's go over to our script.js file.
08:14 - For context, while we haven't covered this it's important to note that anytime we write JavaScript
08:20 - we'll be doing so in a file that has a .js extension. In this case, we have a file called script.js.
08:28 - This indicates to our browser, or in this case the workspace, that we'd like to use the JavaScript programming language.
08:35 - So, let's write console a keyword .log and then open a set of parentheses.
08:42 - Inside of these parentheses, let's keep it simple and put the number five.
08:46 - If we click save and run, we can see on the right-hand side where we have our output component we have the number five.
08:54 - This means that we successfully console logged to our JavaScript console and saw the output come out as five.
09:01 - The output console is similar to what we will be using when we switch over and do the exercises checkpoints.
09:07 - Note that this console is different than the screenshot we saw in the slides,
09:11 - because this console is built directly into the 
Codecademy website or in this case the Codecademy workspace.
09:18 - All right, now that we've covered the basics of using console.log, let's tackle the instructions portion of this exercise.
09:25 - Before we do so, know that we're working in a file called app.js/
09:29 - Recall that the .js extension is necessary to tell our computer that we want to use the JavaScript programming language.
09:36 - In this case, we're telling the Codecademy workspace that we want to use JavaScript.
09:41 - On the right-hand side, we have a black box.
09:44 - This might look empty now, but this is actually going to be similar to the workspace we were working in where we have this as our output console.
09:51 - Don't worry, we'll see this in just a moment. Let's go ahead and scroll down to the instructions.
09:57 - In this instructions portion, we have two checkpoints. Let's start off with the first checkpoint.
10:03 - The first checkpoint says, "Use the console.log code in the editor to log your age to the console run your code when you're ready to see the result."
10:11 - Let's go ahead and write console.log and open a set of parentheses.
10:18 - In these parentheses, we're going to put our age. For myself, I'm going to put 29 years old because I'm 29.
10:24 - If we click run, we can see on the right-hand side in this black box we have 29.
10:30 - Remember this is going to be our output console, so this looks about right.
10:34 - Looks like we have a check mark, so we're good to move on to the next exercise.
10:38 - For the next exercise, it says, "On the next line write another console.log to print out a different number representing the number of weeks you've been programming."
10:47 - Same as before, let's write console .log and open a set of parentheses.
10:54 - I've been programming for a while, so I'll add a big number like 560.  
10:59 - Don't worry if this is your first week programming, I was right there with you not too long ago, we all have to start somewhere.
11:06 - If we click run, we can see that 560 comes up on a new line.
11:10 - Anytime we write multiple console.logs, they will all present themselves on different lines in the output console.
11:16 - Great, we've completed both checkpoints in this exercise. Now, let's move on to a frequently asked question by Codecademy users for this exercise.
11:26 - For this exercise, Codecademy users on the community forums have wondered, "Do I need to use a semicolon?"
11:30 - This is a great question. This is also a largely debated question in the JavaScript Community, as a whole.
11:38 - Some developers tend to use them, while others avoid them completely. The important thing to note is that, generally speaking,
11:45 - if you choose not to use semicolons, it will not typically affect your code from running correctly.
11:51 - Let's go ahead and switch over back to our lesson and see how this works.
11:55 - For example, here, where we wrote console.log 29 and console.log 560, we didn't use a semicolon.
12:03 - Note that in the narrative, we did use a semicolon and that's how our narratives generally teach you to use it.
12:09 - I have, actually, purposely left the semicolon off to return to this code and show you that it ran correctly without it.
12:16 - If we go ahead and add our semicolons to this code and click run,
12:20 - we can see that nothing exactly has changed about 
our code output, it's also just returning 29 and 560.
12:28 - That means our code did not break. That said, some developers note that semicolons improve the readability of code
12:35 - and it can be best to include them to be on the safe side.
12:38 - Including semicolons in the JavaScript can also be good if you plan to eventually learn a language that does require semicolons, such as the Java programming language.
12:47 - For the purposes of this lesson and the code that we write, we will include them moving forward. Let's move on to the next exercise.
12:55 - Exercise three: Comments
12:57 - JavaScript programming language gives us a feature to be able to document our code.
13:01 - This is accomplished by using a comment syntax.
13:04 - We can leave instructions, notes, or any other useful information we feel is relevant to put into our code.
13:11 - Comments don't get read by JavaScript when it executes in our code.
13:15 - They won't affect the output or produce a error. There are really two ways to write a comment in JavaScript.
13:21 - The first way is to use a single-line comment. Take a look at an example on the right.
13:27 - The next way to do so is to use a multi-line comment here's an example of what a multi-line comment looks like.
13:34 - As you will notice by looking at the examples on the right, the syntax is slightly different.
13:39 - Let's write a few comments together in our workspace. Welcome back to the workspace.
13:44 - Notice how console.log(5) is left over from our last exercise  
13:48 - You'll notice as we progress to this lesson that we'll be able to return to a lot of our code that we write in this same workspace.
13:55 - That way, when you access it, you'll be able to see all the code that we've written throughout the entire lesson.
14:00 - So, let's talk about comments. Let's go to a new line in our workspace.
14:05 - Let's go ahead and write a single-line comment using a double-forward slash. So, two forward slashes. Notice how the color changes to gray.
14:15 - This is a way that JavaScript indicates using color that a comment has been created.
14:20 - Notice how console.log and five, they're all kind of different colors,
14:24 - but a comment is shown as gray, we'll add a comment that says, "this is my first console.log."
14:34 - Awesome. We've written our first comment. I run the 
code, notice that nothing's going to change about the output.
14:41 - We still get the console.log 5 from earlier. As we mentioned, JavaScript completely ignores comments and we won't see them in our console.
14:50 - The comment will be mostly useful for us or for other developers that read our code.
14:55 - If I wanted to add a bigger comment I could also do that, as well. Known as a multi-line comment.
15:00 - Let's first add a few more lines of console.log so that way we can wrap them in a multi-line comment.
15:06 - And go back to my code, and I'm going to do console, oops, .log 10. 
15:13 - Another one, console.log 11, and one more console.log 12.
15:22 - Now that we have a couple of lines, let's go ahead and add the Syntax for a multi-line comment.
15:27 - To do so, I do a forward slash, a star and then notice how these console logs already became grayed.
15:35 - Now we could stop here, but this would actually be incorrect syntax because we haven't closed our multi-line comment.
15:41 - We have to go to the end of this block and then add star and another forward slash.
15:47 - Now that we've done that, we've successfully created a multi-line comment. Same thing as before, if we run this code,
15:54 - only 5 will be output to the console. Nothing has changed because comments don't get read.
16:00 - Let's practice this by switching over to our exercise and completing the checkpoints.
16:04 - All right, now that we've covered the basics of using console.log, let's tackle the instructions portion of the lesson.
16:10 - Before we do so, take a look at the top bar over here. Notice that our code is in app.js file.
16:17 - This is very similar to before, where we were in a workspace with script.js.
16:21 - Remember, the js extension is necessary to tell our computer that we want to use JavaScript.
16:26 - In this case, we're telling Codecademy that we want to write JavaScript in this file on the right-hand side, similar to before, we have an empty black area.
16:34 - This is going to be our output console. Don't worry, we'll see things come up once we run our code.
16:40 - Alright, let's go ahead and do the instructions portion of this exercise.
16:44 - The first instruction says the following, "Let's practice adding some code comments.
16:49 - "To the right we've provided you with the beginning of the book Catch-22 by Joseph Heller. On line one, write a single-line comment that says 'opening line.'"
16:59 - Alright, let's go over to line one and we'll initiate a single-line comment using a double forward slash.
17:04 - We can see the color has changed to gray, indicating 
that as a comment, and we can write "opening line."
17:10 - If we run our code here, we'll see on the right-hand side we have the output from the console.logs.
17:16 - What we do, also, notice is that the comment doesn't appear in our output console. Cool. Let's move on to the second checkpoint.
17:23 - The second checkpoint says the following, "Single-line comments are great for adding context to your code.
17:28 - "Multi-line comments are often best suited to prevent a block of code for running, however, both types of comments can be used for either purpose.
17:36 - "Use a multi-line comment so that the bottom six console.log statements are commented out."
17:41 - So, we'll be targeting all of these console logs here. To initiate a multi-line comment, let's go ahead and add some space above.
17:49 - To start a multi-line comment, we'll have to do our forward slash star and we immediately notice that the color of the console logs gets grayed out.
17:57 - This indicates to us that they have become a comment.
17:59 - Remember, in order to complete this comment we'll have to add the star forward slash to the end of it.
18:05 - If we don't, our code might error out. If we run this code, we now see that the only console.log
18:12 - that is coming out in our output terminal is the 
first one, console.log it was love at first sight.
18:17 - We can see that we've successfully completed the 
second checkpoint. Great.
18:21 - Now let's move on to a community question asked by Codecademy users. Some Codecademy users on the Codecademy forums have asked the following,
18:29 - "Why would we want to prevent code from running by using comments?"
18:32 - That's a great question. Let's switch over to our workspace to talk about this.
18:36 - We already know that one of the primary purposes of writing 
comments is to document our code.
18:42 - We already saw this in the exercise, but here's another example 
of what documentation might look like.
18:46 - For example, on line one I've written exercise 2 console 
and on line 5 I've written exercise 3 comments.
18:54 - This is to indicate that the code that is below this point refers to the exercise number that's indicated.
19:00 - This allows Codecademy learners to come into this workspace and understand,
19:05 - "Hey, if I'd like to review all the code that was covered for exercise 2 and see a reference to it, I can look at this point."
19:11 - Commenting out code is not just useful for adding documentation to our code, but it's also commonly used for what is known as debugging.
19:18 - When we write code in JavaScript, it is inevitable that eventually, we will make a mistake.
19:22 - Debugging is a process of solving problems in our code, or in this case, our mistakes. These mistakes are commonly called bugs.
19:31 - They're also commonly referred to as errors.
19:34 - For instance, let's take a look at how commenting code can help in the debugging process. Say we have the following code.
19:42 - Let's go ahead and add a little space here, don't worry too much about what this code is or does but notice what happens when we click save and run.
19:52 - The output console turns red. This is an indication that something has gone wrong with our script and JavaScript gives us an error.
20:00 - In the process of debugging, we may use comments to common outlines of code that we think are breaking
20:05 - to likely confirm our suspicions that the line is causing the error.
20:09 - By commenting out code, we can also keep the program running so we can fix the error and move on.
20:14 - For example, I might take a look at this error and notice that it points to l e y equals 20 on line 16.
20:21 - I may now go to that line and add a single-line comment to comment out this code to confirm my suspicion if it is breaking.
20:30 - Go ahead and save and run and we notice that we've confirmed our suspicion and this line is actually the line that is breaking the code.
20:37 - Notice that the program no longer gives us an error in our 
output console.
20:42 - We will be exploring more about debugging later but for now, the main thing to take away is we can use comments
20:47 - to comment out code to keep our program running, or to assist in the debugging process.
20:52 - We will use this technique of commenting out code quite often in the later parts of the course.
20:56 - Exercise 4: Data Types
20:59 - In programming, we'll want to work with different types of data. Whether it's a number, word, or even a true false value,
21:06 - JavaScript allows us to define and use these different types of data in our scripts.
21:11 - JavaScript has specific terms to categorize these different data types that we can work with.
21:16 - For example, let's take a string. Strings are things 
like words or characters.
21:23 - We also have numbers such as whole numbers or even decimal values. We also have true or false values known as Booleans.
21:33 - We also have common data types, such as null, undefined, and objects.
21:39 - All the data types, except for objects, are known as primitive values.
21:44 - There is another data type not listed here called symbols, but we won't talk about symbols in this lesson.
21:49 - Let's practice defining some data types by moving on to the exercises checkpoints.
21:53 - In this exercise, we're being asked to define a few different console.logs to Output different data types into our output console.
22:00 - For the first checkpoint, it says, "On line one, log the string JavaScript to the console."
22:06 - Let's go ahead and do that together.
22:08 - I'm going to write console .log, open up some 
single quotes, and put Javascript.
22:15 - Don't forget to add your semicolon, so that way we're keeping 
consistent with our code throughout these lessons.
22:21 - Go ahead and run our code, and it looks like we passed the first checkpoint.  
22:25 - The second checkpoint says, "On line two log the number 2011 to the console."
22:30 - Here, we're going to be logging a number, a different data type in JavaScript. We'll do console.log and put the number 2011.
22:40 - Again, don't forget your semicolon and run, and it looks like 
we successfully completed that checkpoint.
22:46 - Moving on to checkpoint 3. Same thing here, I'm going to have to add a console.log and in this case, we're going to be doing a string.
22:54 - It's asking us to print the string, "Woohoo! I love to code #Codecademy."
23:00 - I'm going to go ahead and copy this string over from 
this portion of the instructions and paste it in here.
23:05 - Saves us a little bit of time of typing. Run 
our code and it looks like we've successfully passed.
23:12 - For the fourth checkpoint, it says, "On line four print the number 20.49 to the console."
23:18 - Let's go ahead and do that and do another number data 
type in our console.log.
23:23 - Console.log 20.49. Again, don't forget your semicolon, let's click run and we've successfully completed the fourth checkpoint.
23:34 - All right, now that we've practiced logging a few different data types, let's move on to a community question.
23:40 - A commonly asked question by the Codecademy community is, "When should you use single quotes or double quotes for strings?"
23:46 - That's a great question and one that is debated amongst the JavaScript community.
23:50 - It ultimately comes down to personal preference, however, let's take a look at two situations where it might matter.
23:57 - Alright, we're back in the workspace. I've added a new section down here for the fourth exercise in the lesson.
24:03 - Here, there are a few comments if you ever need to remember the common data types that exist.
24:08 - Down here, there's a new section we'll be taking a look at the single or double quotes question.
24:12 - Let's take a look at a situation where our choice of single or double quotes matters.
24:18 - Let's take a look at this string right here this string says we'll get started with doing math.
24:24 - Notice that this string has an apostrophe in it. This presents an issue for us because we can no longer use single quotes for logging the string.
24:32 - Let's take a look at what happens if we do. Let's go ahead and get rid of these forward slashes and write console.log,
24:40 - and then wrap this in a single quote, close that single quote, and run our code.
24:50 - Notice that JavaScript gives us an error. In this case we can't use single quotes because what happens is Javascript gets confused.
24:58 - It assumes that the closing quotation mark, a single quotation mark, happens here
25:04 - and it assumes this part of the string here isn't properly closed.
25:08 - In this case where we have an apostrophe in the string we're trying to console.log or work with, we need to use double quotes.
25:14 - Let's go ahead and replace this with some double quotes.
25:20 - And if we run our code, we'll see that it properly works.
25:24 - All right, let's go ahead and comment this out for now.
25:28 - The same applies for when we have a set of double quotes in our string, like the string here, that we have on line 33.
25:34 - In this string it, says, No, He said: open double quotes I do not 
like math close double quotes.
25:41 - In this case, this sentence is trying to quote what someone has said and in English, we need to wrap the quote in double quotation marks to denote it as a quote.
25:48 - Same as before, if we wrap the string in double quotation marks it will produce an error.
25:53 - Let's go ahead and see how this happens.
25:55 - Let's go ahead and get rid of the single-line comment 
double forward slashes, we'll write console.log,
26:02 - and then move that closing parentheses, add 
our semicolon, and then wrap this in double-quotes.
26:12 - Let's go ahead and run it and we can see, similar to before, it will produce an error.
26:17 - Here, we need to get rid of the double-quotes and wrap it in single-quotes, And it will correctly get read by JavaScript.
26:29 - If we run this, now our string gets properly put out into the output console.
26:34 - Exercise 5: Arithmetic Operations
26:37 - Now that we know JavaScript deals with numbers, it's only natural that we would have some sort of way to perform arithmetic, or better known as math.
26:45 - JavaScript gives us what are known as operators. An operator is a character that can perform a task with our code.
26:52 - These characters represent different mathematical operations like addition using the plus character,
26:58 - subtraction using the dash character, multiplication using the star character, division using the forward slash character,
27:05 - and remainder also known as modulo, which Returns the remainder of a division operation, using the percentage sign character.
27:12 - Here are some examples of these in action. First, we have addition, so here we have three plus four which would return seven.
27:20 - Next, we have subtraction: five minus one which would return four.
27:25 - 4 times 2 - multiplication - which returns 8. 9 divided by 3, which will return 3,
27:33 - and then we have modulo. Here we have 11 modulo 
3.
27:36 - This will return two because a division operation between 11 and 3 has a remainder of 2.
27:42 - However, if we have a situation like this, where we're doing 12 modulo 3,
27:47 - our result will be zero because a division operation between 12 and  3 has no remainder.
27:53 - Now that we've covered the basics of these operators, let's move on to the exercises checkpoints.
27:57 - All right, let's now work through some checkpoints. Just like before, we'll be working in an app.js file.
28:03 - The first checkpoint says, "Inside of a console.log add 3.5 to your age. This is the age you'll be when we start sending people to live on Mars.
28:12 - I guess in three and a half years, we'll be off to Mars. Let's go ahead and add our console.log now. Console.log,
28:20 - I'm 29 years old, so I'll use that number, 29, and then I'll 
use the plus operator to do addition and add 3.5.
28:31 - All right, let's go ahead and run our code.
28:35 - Looks like that was successful.
28:37 - Second checkpoint says the following, "On a new line write another console.log. Inside the parentheses take the current year and subtract 1969.
28:47 - The answer is how many years it's been since the 1969 moon landing.
28:52 - All right, let's go ahead  and do that now. Console.log the current year is 2022, so we'll do 2022 and then subtract 1969.  
29:03 - Add a semicolon, run the code, it's been approximately 53 years since the moon landing.
29:10 - Alrighty, checkpoint three.
29:13 - "Create another console.log inside the parentheses divide 65 by 240."
29:18 - All right, go to my editor console.log 65 divided by 240.  
29:27 - Some developers tend to put some spaces between operators, it doesn't really matter if you do, it's personal preference.
29:34 - For the purpose of readability, I'll add that to my code. I'm going to run the code.
29:39 - 0.2708 and then repeating threes. That seems to have passed the checkpoint.
29:45 - Let's move on to the final checkpoint.
29:47 - The final checkpoint says, "Create one last console.log Inside the parentheses multiply 0.2708 by 100.
29:55 - "That's the percent of the Sun that is made up of helium, assuming we could stand on the sun, we'd all sound like Chipmunks."
30:01 - All right, let me add my last console.log 0.2708
30:08 - and we're going to multiply it by a hundred, semicolon, and then run the code.
30:16 - Looks like that successfully ran and we got the result of 27.08. Let's now move on to a community question.
30:24 - A commonly asked question by the Codecademy community is, "What is the difference between 3 plus 4 and the string 3 plus 4?"
30:32 - Let's switch over to our workspace to take a look. Alright, we're back in the workspace.
30:37 - Notice that I've added a comment here for exercise 5 for arithmetic operators.
30:41 - I've also added two console.logs for the things that we're going to talk about.
30:46 - Here we have a console.log for three plus four, I'm going to add some spacing here, and I have three plus four as a string. Let's go ahead and run our code.
30:56 - Here, we'll see that the output is seven and three plus four. So, what's actually happening and what is the difference?
31:02 - Well, it's important to note that anytime we wrap something in quotation marks, JavaScript will treat it as a string.
31:09 - So, as opposed to the first line, where it's seeing three and four as numbers, here it's seeing three plus four as a whole string.
31:18 - That's why for the first console.log we get 7 as the result  
31:21 - because it's performing the arithmetic operator 
on three and four. The result will be seven.
31:27 - As opposed to here, we're having three plus four in a string, so JavaScript doesn't perform any arithmetic.
31:34 - Exercise six: string concatenation
31:36 - We saw in the previous exercise that we could use the plus character to perform mathematical operations, like addition.
31:42 - However, we can use operators like the plus sign on more than just numbers. In fact, strings can be combined using the plus operator, as well.
31:50 - The process of combining one or more strings together is known as concatenation,
31:54 - or more specifically, in this case, string concatenation because we're working with strings.
32:00 - Let's take a look at some examples. On the right-hand side we have two strings, 'hi' and 'ya'.
32:06 - We are combining them using the plus character. The result will be a concatenated string of 'Hiya'
32:13 - What if, instead, we wanted to add a space between the two words we were concatenating? Take a look at the following example.
32:20 - Here, we have a string front with an extra space and the word space as a string.
32:26 - The result of this will be front, a space character, and then the word space.
32:32 - We can add spaces in our concatenation by adding a space to either the front or back of a string.
32:40 - Here, we're adding it to the first string front, but here's an example where we can do it to the second string,
32:47 - where, here in this example, we're adding a space to the word space.
32:52 - This was a result in 'back' 'space' with the word 
space. We can produce a similar result by adding an empty space character, as well.
33:01 - Here's an example. Here, we have three strings that we're concatenating.
33:05 - We have 'middle' as a word, an empty space character, and then the word 'space' as a string.
33:12 - This would give us a very similar result. We can add this at any point of our concatenation to add a space between things.
33:21 - We can combine any number of strings together to also form sentences.
33:25 - Something like this. Here, we have a longer string, where we have one plus two plus three with some extra spaces and commas.
33:34 - The result would look like this, one comma two comma three exclamation point.
33:40 - Now that we've seen some examples, let's hop over to the lessons checkpoints.
33:44 - Alright, now let's do the instructions portion of this exercise. Let's take a look at the first checkpoint.
33:51 - The first checkpoint says, "Inside of a console.log statement 
concatenate the two strings 'Hello' and 'World'.
33:57 - Let's go ahead and do that now. We'll do console.log, now parentheses, and then do the first string, which is 'Hello',
34:06 - add the plus sign to indicate that we want to concatenate it, and then do 'world'. 
34:11 - Don't forget to add your semicolon. Go ahead and run this, and it looks like we successfully completed the first checkpoint.
34:18 - Notice in our output the term 'Hello' and 'world' does not have a space between the two strings.
34:25 - Don't worry, we'll add this in the second checkpoint.
34:28 - The second checkpoint says the following, "We left off the space last time, create a second console.log statement in which you concatenate the strings 'Hello and 'world',
34:36 - but this time make sure to also include a space between the two words.
34:40 - Alright, we saw an example of this earlier. This should be pretty easy to replicate.
34:44 - We're going to do console.log 'Hello' plus an empty string and 'world', and add our semicolon, and then run our code.
34:57 - That pretty much wraps it up for this exercise, let's move on to a community question.
35:02 - A Codecademy user on the forums asks the following, "Why would we use string concatenation?"
35:07 - That's a great question. Let's switch over to the workspace to clarify this question. All right, let's take a look at an example.
35:13 - Take a look at line 43 and 44. On line 43, we have console.log with one big string that says 'Hello World'.
35:21 - On line 44, we have an alternative, which uses string concatenation to combine the string hello with the space and the string world.
35:29 - At first glance, it might seem like we have no reason to concatenate strings if we could just write them as one big long one.
35:36 - In this case, we get a similar result whether we do option one 
on line 43 or option 2 on line 44.
35:44 - However, things get trickier in bigger programs. This is because sometimes strings may need to be more dynamic to make our programs more dynamic.
35:52 - Let's take a look at an example of what this might look like.
35:55 - Let's first add two new console.logs . The first console.log on line 46 will say console.log 'Hello Molly' A specific person named Molly.
36:07 - Let's also, add a second string that will also reference the name of Molly.
36:11 - We can add console.log and we'll say, "Molly is great"  We'll add our semicolon, we'll go ahead and comment out these two lines just for now.
36:23 - Add that now and we can move forward.
36:26 - Now we have two strings that reference the name Molly, but there's an issue.
36:30 - What if instead of Molly, we wanted to use another name, such as Muhammad or Emmy.
36:36 - We would have to go to both lines or any amount of lines in a program that referenced the name Molly and change it to the name that we want.
36:42 - This can be a bit cumbersome and probably not a good use of our time.
36:46 - However, JavaScript gives us a tool called variables that can help us solve the problem.
36:51 - While I will give a brief introduction to variables now, don't worry we will cover variables more deeply in a later lesson.
36:58 - For the purposes of demonstrating the usefulness of string concatenation, we will learn a bit about it now.
37:04 - So, what is a variable? Well, a variable is a way for JavaScript to store a reference for a piece of data that can be reused across an entire program.
37:14 - For example, let's go ahead and make some space above our two console.logs .
37:18 - Say we wanted to save a name to our program, like Molly. We could create a variable to do so.
37:23 - Here, I'm going to write let name equal the string Molly and I'm going to add my semicolon.
37:30 - This tells JavaScript to create a variable called name and store the string value of Molly inside of it.
37:37 - We can then use the variable of name throughout our entire program. So, how exactly does this pertain to string concatenation?
37:45 - Well, we can use variables in string concatenation to make our programs more dynamic, thus proving the usefulness of doing string concatenation, in the first place
37:54 - So, instead of writing Molly directly in our strings, let's replace it with a name and concatenate it.
38:00 - Again, don't worry too much about the syntax that we're about to do, just pay close attention to the result.
38:06 - Let's go ahead and replace the instances of Molly. Here, on the first line of 48, we're going to remove that and add name.
38:14 - Also going to go over here, remove Molly, and then do name plus the string space is great.
38:22 - If we replace name in both instances and click run, take a look at the output.
38:27 - Looks like we made a small mistake where we didn't add a space after hello. Let's go ahead and correct that, and then run it again. Looks good to me.
38:36 - Here, we have Molly still being returned properly in each string.
38:40 - However, now if we wanted to change the name to say something like Emmy, we only need to change the value of the variable, like so.
38:48 - Go up to line 46 and instead of Molly, we'll put Emmy, a different name.
38:53 - Notice now, if we click run, what happens.
38:57 - In this case, every instance of name that was in our console.logs changed from Molly to the value of name, which is now Emmy.
39:06 - So, to summarize, we won't always be able to create a long string if we want to make our programs more dynamic.
39:13 - In this case, in this example that we looked at, we used string concatenation with variables to make our program much more dynamic and easier to maintain.
39:23 - If you feel a bit stuck on this whole variable thing, don't worry, we'll cover more about it soon.
39:28 - Instead, what you should take away from this is that string concatenation will be useful to make our programs more dynamic, 
39:35 - more reusable, and more developer-friendly.
39:38 - Exercise 7: Properties
39:41 - In JavaScript, whenever we introduce a new piece of data, such as say, a string, JavaScript will create what is known as an instance.
39:49 - This means that it creates a new single unique entity of that type.
39:54 - Every data type has access to specific properties that are passed down to each instance we create in our programs.
40:01 - These properties can be accessed using the dot operator. For example, take a look at the following console.log.
40:10 - Here, we are saying console.log and outputting hello, and accessing the property called length on the string of hello.
40:19 - This property exists on any string we write in our JavaScript programs.
40:23 - All right, looks like we only have one checkpoint for this exercise, let's go ahead and see what we have to do.
40:28 - The first checkpoint says, "Use the length property to log the number of characters in the following string to the console.
40:34 - The string is, "teaching the world how to code."
40:37 - All right, we saw an example of this already, so let's go ahead and replicate it in the checkpoint.
40:42 - Let's say console .log and then we'll go ahead and copy and paste this string in here to save a little bit of time.
40:50 - At this point, we have to use the property of dot length to access the length of the string.
40:56 - So, we'll use the dot operator and then add length to the end of it. Don't forget our semicolon, and then let's run the code.
41:04 - Looks like the length of this string is 30. This includes white space characters like spaces.
41:11 - Alright, now let's move on to a community question about properties.
41:15 - Codecademy users on the forums have asked, "Why would the length of a sentence be important to know?"
41:20 - That's a totally valid question. In essence, users are wondering what are some actual use cases of knowing the length of a string.
41:27 - A very good example of one that might be useful would be an everyday login page.
41:32 - Let's go ahead and take a look at an example on the Codecademy login page.
41:36 - Take a look at the Codecademy sign up page. It looks very 
similar to most signup pages that exist on the internet.
41:42 - However, notice that the password field in the form has a validation error.
41:47 -  Here, I've put in an email and a password but my password doesn't actually meet the parameters, or requirements,
41:53 - that a password needs to have to make an account on Codecademy. You can find a bit more information here,
41:59 - where it's asking that our password has eight characters that contains at least one uppercase letter one lowercase letter and a bunch of other things.
42:07 - Here we have an error that says password must include at least eight characters in red color indicating that it's an error.
42:16 - This is a good example of where we might be using JavaScript to check the length of a string to make sure it matches some requirements.
42:23 - In this case, the error is being produced because our password is not eight characters long.
42:29 - There are other use cases that are popular, such as character limits on popular social media platforms, like Twitter.
42:35 - Here's an example on Twitter where tweets have a character limit and behind the scenes, it's most likely developers are counting the characters we typed
42:44 - to let us know that we've hit the limit. In this, case they've given us a red visualization
42:49 - to let us know that we're approximately 294 characters past the limit on Twitter.
42:55 - This is another great example of where we can use the length property to create some kind of validation on our web pages.
43:02 - Exercise 8: Methods
43:04 - Similar to properties which each instance of a data type can access, all data types also can access methods.
43:12 - Methods are special utilities that similar to properties like length, allow us to access specific data from an instance or even manipulate it.
43:20 - We use a method we call it by first adding the dot operator, adding the name of the method, and then lastly using an opening and closing parentheses
43:31 - Sometimes some of these methods will require us to put something inside of the parentheses, which will allow the method to perform its operation correctly.
43:39 - Let's take a look at an example.
43:41 - Here's an example of the usage of the toUppercase method. This method will take a string and convert it to all uppercase letters.
43:49 - Notice that when we call the toUppercase method 
on the string hello, which is all lowercase,
43:54 - it returns a fully uppercase version of the string. Another useful example would be the start with method.
44:00 - Here, we call it on a string of 'Hey' and it will return a value of true since our method is checking that it starts with the letter H.
44:08 - Similar to before, you can find all the methods that a data type can use by visiting the MDN web documentation.
44:15 - You can also find all the methods and much more documentation by visiting Codecademy docs.
44:20 - Codecademy docs is our community driven collection of code documentation for popular programming languages and frameworks.
44:27 - For example, here's our page for strings, where if you scroll down, you can find a list of all the methods and properties you can access on a string data type.
44:36 - To navigate to the docs, go over to the resources tab, and in the first section of the navigation bar, head over to the JavaScript button and click that.
44:46 - When you have a moment, check out Codecademy docs 
and take a look at all the documentation that we offer.
44:51 - Let's, now, move on to the checkpoints for this exercise and practice using methods in JavaScript.
44:56 - Alright, let's go over the checkpoints for this exercise.
44:59 - If you notice in app.js we already have some code provided for us. We'll be using this code as we go through both checkpoints.
45:06 - For the first checkpoint, we are asked to do the following, "Use the toUppercase method to log the string Codecademy to the console in all capital letters.
45:16 - Alright, let's go ahead and do that now. We'll go over to Codecademy in our console.log 
45:23 - and we'll use toUppercase as a method and then run our code.
45:27 - If we take a look at our output, we can see that Codecademy has come up as all uppercase.
45:32 - Let's now move on to the second checkpoint.
45:34 - The second checkpoint has to do with white space. The second checkpoint says the following,
45:39 - "In the second console.log statement, app.js , we have a string remove white space which has spaces before and after the words remove white space.
45:48 - If we browse the JavaScript string documentation, we find several built-in string methods that each accomplish a different goal.
45:54 - The one method that seemed ideal for us is dot trim.
45:57 - Use the method to remove the white space at the beginning and the end of the string and the second console.log statement.
46:03 - You can take some time to click on the string documentation link and browse the documentation to take a look at the method.
46:09 - However, just for the sake of time since we know that we need to use the trim method we're going to go over here,
46:15 - type dot trim as a method, and then run our code. It looks like we successfully used the trim method to remove the white space.
46:23 - That's it for this exercise, let's move on to a community question.
46:26 - A Codecademy forums user asked, "This exercise mentions documentation but what is that and why/when/how do we use it?"
46:34 - That's a great question. Let's dive a little bit deeper into documentation.
46:38 - If you're getting into programming or even a seasoned software engineer, it is likely that you'll be working with documentation very often.
46:45 - So, what is documentation in the first place? Well, we already saw some examples of it but to put it plainly,
46:51 - documentation is any type of resource that helps you learn about specific technologies,
46:56 - features, and capabilities, such as a programming language like JavaScript.
47:01 - Developers use documentation whenever they need to learn about that specific technology that they're interested in.
47:07 - For example, like us, we're learning to program in JavaScript and so  
47:10 - documentation for JavaScript is very important to us since we want to know a little bit more about its features and capabilities.
47:17 - If you're feeling a little bit overwhelmed whenever you open a documentation link, don't worry, you probably aren't the only one.
47:23 - Documentation can be a bit intimidating.
47:26 - The important thing to remember is that while documentation might be lengthy,
47:29 - its goal is to help teach you about the specific features, methods, or whatever you're looking for in the documentation about the specific technology.
47:36 - Take your time with it and, eventually, reading documentation will become second nature.
47:41 - If you're looking for a beginner-friendly version of documentation,
47:44 - visit Codecademy docs, which we looked at a little bit earlier in this video.
47:48 - If you're wondering a bit more about how to, actually, use documentation, we'll provide a video resource for you in the video's description.
47:55 - Another commonly asked question by Codecademy users on the forums for this exercise is,
48:00 - "What is the difference between a property and a method?"
48:03 - At first glance, they do look very similar. Let's hop into the workspace to look at an example.
48:08 - Take a look at the code in the workspace, here we have some examples of properties and methods.
48:13 - If we take a look at line 53, we have a string which is using the dot length property.
48:18 - However, on line 56 and 57, we have methods, such as toUppercase and starts with.
48:24 - The main difference to notice is purely about syntax. When we're using methods, we always have to use a set of parentheses to call the method.
48:32 - Sometimes, as we can see in line 57, we actually have to provide some value inside of the parentheses for the method to function properly.
48:40 - In terms of what they actually do, in most cases, we can think of methods as actions and properties as qualities.
48:47 - A good analogy for this might be a house.
48:50 - For example, a house might have a property, which is the number of windows that the house has,
48:54 - whereas, it might also have a method which is the action of closing a window. Most things that we work with in JavaScript will both have properties and methods,
49:04 - and you'll be using them pretty often in your code.
49:07 - Exercise 9: Built-in Objects
49:09 - In addition to the primitive data types that exist in JavaScript such as strings and numbers,
49:14 - JavaScript also has another type of data called objects.
49:17 - We've actually been using an object all along because anytime we use console.log , we were actually using the console object.
49:24 - Objects like the console are built into the language and are classified as built-in objects.
49:30 - Built-in objects have their own custom properties and methods.
49:33 - For example, anytime we use the .log method when we use console.log we were using a custom method that belonged to the console object.
49:42 - Another example of a useful object is the math object. The math object gives us useful methods for performing mathematical operations in JavaScript.
49:51 - For example, take math.random . Here, we have the built-in object of math and the method.random that belongs to it.
49:59 - This method will return a random decimal number greater than zero, but less than one.
50:05 - So for example, an output could be something like this 0.764 and multiple digits beyond that.
50:12 - Another use case for math.random is generating a number between 0 and a specified number.
50:17 - In this case, we're specifying to.random to generate a number between 0 and 10. A random one, something like 6.
50:26 - We will practice using the math object and the checkpoints for this exercise.
50:30 - Let's hop over to the lesson to get started.
50:33 - In this exercise, we have four checkpoints. Let's get started with the first one.
50:36 - The first checkpoints are the following, "Inside of a console.log , create a random number with math.random , then multiply it by 100.
50:43 - All right, let's go ahead and do that. We'll go on our first line and we'll write console.log
50:48 - and inside will access the math built-in object with the method random.
50:53 - Close those parentheses, and then multiply it by 100. I'm 
going to add our semicolon and then run our code.
51:01 - Looks like our result was a success and we got 48.6 with some decimal places after that.
51:07 - Awesome. Let's move on to the second checkpoint. The second checkpoint says the following,
51:12 - "Now use math.folder to make the output a whole number.
51:15 - "Inside the console.log you wrote in the last step, put the existing math.random times 100 code inside of the parentheses of math.floor .
51:22 - We did not touch on the math.floor method in the slides, it's actually covered in an exercise's narrative.
51:27 - To recap, it is a method that will round a number down to the nearest whole integer value.
51:32 - Let's go ahead and wrap our previous code in math.floor go up here, write math.floor, and then wrap the parentheses around this result.
51:43 - So, to recap, the value that will be returned from math.random times 100, in this case say we were working with 48.6, will be rounded down to the nearest whole number,
51:53 - in this case, if we were working with 48.6, we would get a result of 48.
51:58 - In this case, since we're getting a random number each time, it won't be 48.6 being used again, so we'll probably get a different number.
52:05 - Let's go ahead and run our code and see the result.
52:10 - Looks like our result is 89. Let's go on to the third checkpoint.
52:14 - Scroll down here and let's read what it says. "Find a method on the JavaScript math object  
52:20 - that returns the smallest integer greater than or 
equal to the decimal number.
52:24 - Use this method with the number 43.8 , log the answer to the console.
52:28 - Feel free to pause the video and click on the documentation link for the JavaScript math object to find this method.
52:34 - For the sake of time, we're going to skip this. The method we'll need to use is called ceiling. Here's what it's going to look like.
52:40 - If we go here and add a console.log inside of here, we're going to access the math object and we're going to ceil.
52:49 - Inside of this, we're going to do 43.8 and add our semicolon.
52:54 - What will happen here is this will round it to the smallest integer greater than or equal to the decimal number.
53:00 - In this case, let's see what our result will be.
53:05 - Looks like 44 was our result and that's the result we expected since we're on point eight.
53:10 - This will round up and we'll get to 44 as is indicated by 
our output. All right, now let's move on to the fourth checkpoint.
53:17 - Let's make a new space here and then read what the checkpoint is asking.
53:21 - Here it's asking, "Use the JavaScript documentation to find a method on the built-in number object that checks if a number is an integer.
53:28 - Put the number 2017 in the parentheses of the method and use console.log to print the result.
53:33 - Same thing here, if you'd like to take a second to look through the JavaScript documentation pause the video and then return when you've done so.
53:40 - For the sake of time, we're going to use the method directly in app.js .
53:44 - The method that we're looking for is isInteger.
53:46 - So, let's go ahead and go to our line, we'll do console.log , and here, instead of accessing the math object, we're going to look at the built-in number object.
53:55 - And this built-in object has a method called isInteger.
53:59 - This method will check if the number that's provided in the parentheses is an actual integer.
54:03 - Let's go ahead and add 2017, add our semicolon, and then run the code.
54:11 - Looks like that returned true and we've completed all the checkpoints for this exercise.
54:15 - If we scroll down, we'll notice that there are a couple of community questions from the forums.
54:19 - However, we've already covered the math.random and math.floor question, and the one that talks about portfolio is out of the scope of this lesson.
54:26 - We'll move on without covering a community question but feel free to visit this section and click on the questions to look it over yourself.
54:33 - Exercise 10: Review
54:35 - Congratulations, you've reached the end of the lesson. If you've made it this far you've taken a huge step to learning the JavaScript programming language.
54:43 - Let's take a second to cover what we learned in this lesson.
54:46 - First, we started with a brief introduction to JavaScript programming language,
54:50 - we talked about what JavaScript is, where it comes from, and why we might use it.
54:54 - We then moved on to doing some basic JavaScript programming. We talked about topics like the console and logging our output,
55:02 - how to write and use comments, different JavaScript data types,
55:06 - performing arithmetic with operators, string concatenation, and the basics of working with objects, methods, and properties.
55:13 - That's a whole lot of information that we've covered. Take a second to review any exercise you feel like you need a bit more practice with,
55:19 - and play around in the final exercise app.js file. All right, that 
pretty much wraps it up for this video.
55:26 - I hope you enjoyed the lesson walkthrough and if you want 
to get involved with the Codecademy community,
55:30 - visit our forums or the growing Discord Channel. Have a great day and happy coding!