00:00 - hi everyone my name is Carlos I'm a web
00:02 - developer based in Brooklyn New York and
00:04 - today we're gonna look into pseudocode
00:06 - we're gonna see how to use it how to
00:07 - write it and we're gonna look at an
00:09 - example where we actually use it to
00:10 - solve a coding algorithm so what is
00:13 - pseudocode
00:14 - well pseudocode is a simpler version of
00:16 - a programming code in plain English
00:18 - before it is implemented in a specific
00:20 - programming language pseudocode is often
00:23 - referred to as a syntactical
00:25 - representation of a program and it
00:27 - doesn't have a strict syntax since it
00:28 - only represents the way we're thinking
00:30 - so it should leave very little for the
00:32 - imagination so it's readable for most
00:34 - people one of the most important keys to
00:37 - understand about pseudocode is that it's
00:39 - not a programming language it's actually
00:42 - a learning and reasoning tool used to
00:44 - help programmers understand and write
00:46 - code so it's language agnostic it's
00:49 - something that you're right that is not
00:50 - an actual code in any programming
00:52 - language but that if anyone were to read
00:54 - it it would be very clear to what is
00:56 - happening or what steps are being taken
00:58 - so what pseudo code actually enables us
01:01 - to do is to grab a simple set of
01:03 - instructions that are written in plain
01:04 - English and eventually translate that
01:06 - into a program that can be executed now
01:09 - there are a few other reasons why we
01:11 - would use pseudocode for starters
01:14 - pseudocode abstracts away syntax to let
01:17 - you focus on solving the problem in
01:19 - front of you so instead of getting
01:20 - bogged down in the exact syntax of a
01:23 - language pseudocode allows you to work
01:24 - almost impure programming logic this way
01:27 - you don't actually have to know what
01:28 - exact built-in functions a programming
01:31 - language provides you can simply write
01:33 - down in plain English what it is you're
01:35 - trying to do so why else use pseudocode
01:38 - well some people can visualize the
01:40 - entire solution to an algorithmic
01:42 - problem in their mind while others may
01:44 - find it difficult to come up with a
01:45 - solution without having to first write
01:48 - it down somewhere in general pseudocode
01:50 - won't do any harm if not any good it
01:53 - essentially helps us break down large
01:55 - problems into smaller manageable pieces
01:57 - through this running pseudocode allows
02:00 - you to think through a problem with some
02:02 - foresight and lets you anticipate
02:04 - important questions before they arise
02:06 - this is possible because they're
02:07 - breaking down something into multiple
02:09 - steps oftentimes when faced with
02:11 - problems a common gutter
02:13 - action is to jump straight into Google
02:15 - but there are ways of googling that are
02:16 - helpful and some that are actually
02:18 - counterproductive so if you turn to
02:20 - Google before thinking you're not
02:21 - actually thinking like a programmer so
02:23 - if you don't take time to write
02:25 - pseudocode and think through the details
02:27 - of the project you'll end up googling in
02:29 - an efficient way
02:30 - you'll end up wasting time so in the
02:33 - short term even though you're writing
02:34 - pseudocode might feel like you're taking
02:36 - two steps back to go one step forward it
02:39 - is actually saving some time and
02:40 - headaches along the way and breaking
02:42 - things down with pure programming logic
02:44 - and then googling or research and what
02:46 - you need to look for will essentially
02:47 - help you in becoming a better programmer
02:49 - so now let's go ahead and see how to
02:51 - actually write pseudocode and then we'll
02:53 - solve an algorithm together now
02:56 - pseudocode doesn't have a strict
02:57 - systematic way or standard way of being
03:01 - written so don't think of these as rules
03:03 - think of these as more suggestions on
03:05 - how to get started writing pseudocode so
03:08 - for starters you may need to capitalize
03:09 - Kumasi will remain in the actual code so
03:12 - if you're using if statements for
03:14 - example it's important to keep those if
03:16 - statements in capital letters this makes
03:19 - it easier to create code blocks and
03:21 - actually spots some of the logic next
03:24 - step is to actually stick to writing one
03:26 - statement per lime so each statement in
03:28 - your pseudocode should express just one
03:30 - action for the computer in most cases if
03:33 - the task list is properly drawn then
03:35 - each task will correspond to one line of
03:37 - pseudocode another really important one
03:39 - is to use indentation so using white
03:42 - spaces between blocks of text will help
03:44 - keep different components of your
03:46 - pseudocode isolated and indenting
03:48 - different pieces of each block will
03:50 - indicate that those pieces of pseudocode
03:52 - go under a less indented section you
03:55 - also want to make sure you're being
03:56 - specific so everything that is happening
03:58 - in the process must be described
04:00 - completely pseudocode statements are
04:03 - close to simple English statements and
04:05 - will be very easy for the person who's
04:07 - reading it if you're actually being
04:08 - specific and detailed for each step
04:11 - lastly you want to keep things simple
04:13 - don't write pseudocode in a complete
04:15 - programmatic manner it is necessary to
04:17 - be simple to understand even for a
04:19 - layman or a client so don't incorporate
04:21 - too many technical terms and make things
04:24 - overly complex
04:25 - okay so now that we have an idea of how
04:27 - to write pseudocode let's go ahead and
04:29 - take a look at an algorithm and start
04:31 - writing our own pseudocode and solution
04:33 - with it so this is a classic interview
04:35 - question and coding challenge that is
04:37 - very popular and you might have seen
04:38 - before
04:39 - it's called fizzbuzz so here are the
04:41 - instructions for fizzbuzz what we're
04:43 - gonna do is we're gonna write a short
04:45 - program that prints each number from 1
04:47 - to 20 on a new line for each multiple of
04:50 - 3 we're gonna print fizz instead of the
04:52 - number for each multiple of 5 we're
04:54 - gonna print Buzz instead the number and
04:56 - four numbers which are multiples of both
04:58 - 3 & 5 we're gonna print fizzbuzz instead
05:01 - of the number okay so let's get started
05:04 - so I'm using Chrome here and I'm using
05:06 - my dev tools console in order to
05:08 - actually solve the problem I've also
05:10 - copied and pasted the instructions so
05:12 - it's easier to break down what exactly
05:14 - we're gonna be doing okay so first thing
05:17 - I notice is that we're gonna be running
05:18 - a program that produces a set of 20
05:21 - different values so this looks like a
05:23 - perfect situation for a for loop so we
05:26 - know a for loop is written with three
05:28 - optional expressions so the first one
05:31 - will be the initialization expression so
05:33 - we're gonna be sending out the counter
05:34 - to one then we're going to add a
05:37 - condition for the counter to actually
05:38 - break with and lastly we're gonna add a
05:41 - final expression which will be the
05:42 - incrementation number so once we have
05:46 - our for loop created we let's look back
05:49 - at the problem where you have about four
05:51 - different conditions we're gonna be
05:53 - working with this means within our for
05:55 - loop we're gonna have four different if
05:57 - statements that actually give out
05:59 - different results depending on the
06:00 - number we're on so once we have our for
06:03 - loop here let's make sure we are also
06:04 - using indentation so let's get started
06:06 - with our first conditional now if we
06:09 - want to check if a number is divisible
06:10 - by another number we can use our
06:13 - remainder operator called modulo so we
06:16 - use modulo on a number and it returns
06:18 - zero which means that remainder is zero
06:20 - it means that it was actually divisible
06:22 - by that number and in one of the cases
06:24 - were actually checking if a number is
06:26 - divisible by both multiples of three and
06:28 - five if so we're gonna print fizzbuzz so
06:32 - in order to make this short and sweet we
06:34 - can actually just check if it's modulo
06:36 - 15 if its remainder is zero then
06:39 - it's true and we can just print fizzbuzz
06:41 - from there so I'm gonna keep some of the
06:44 - key commands in capital letters like my
06:46 - if and mod and I'm going to use some
06:49 - indentation under my if statement to
06:51 - make sure that there's a code block and
06:53 - within that if statement so for the next
06:54 - conditional we want to check if the
06:56 - number is divisible by three so else if
07:01 - number mod three is equal to zero then
07:06 - we're going to be printing this after
07:14 - that we want to check if the number is
07:15 - divisible by five and we're going to be
07:18 - printing buzz for that one so you can
07:21 - see I'm basically following the same
07:23 - kind of pattern here it's non following
07:27 - a strict rigid syntax but it kind of
07:29 - keeps the capital letters for the key
07:31 - commands and I'm keeping indentation to
07:33 - make sure that there's a code block
07:34 - within each statement and for the last
07:37 - conditional which indicates that it is
07:40 - not divisible by any of those numbers 3
07:42 - 5 or 15 we're simply going to print the
07:45 - number as is and there you go that is
07:48 - essentially our pseudo code so once our
07:51 - pseudo code is completed it's fairly
07:53 - easy to actually translate this to code
07:55 - if you actually have the steps pretty
07:58 - detailed and and laid out for you so I'm
08:00 - going to scroll this further down a
08:01 - little bit and I'm actually going to
08:03 - zoom out so we can see or pretty much
08:05 - what we're writing here
08:06 - so let's start out with our for loop
08:08 - here and we know that the for loop will
08:10 - start with the number 1 we'll keep going
08:14 - until it's less than or equal to 20 and
08:16 - we'll be incrementing it by 1 let's make
08:21 - sure the first if statement is added so
08:24 - we want to check if I is modulo and we
08:28 - use a percentage operator for this one
08:30 - is equal to 0 and if that's true we're
08:33 - going to actually console.log fizz buzz
08:39 - or close that if statements or write the
08:42 - second one so we want to check if the
08:45 - number is modulo 3 is equal to zero if
08:50 - so we're going to
08:52 - console.log fizz then we want to check
08:59 - if the number is divisible by five so i
09:03 - modulo five equals zero we want to print
09:10 - buzz for the capital b and lastly you
09:20 - simply have to print the number itself
09:22 - which is i will close that up close up
09:26 - the for loop and here you go we have the
09:29 - results here I'll zoom out a little
09:31 - further so you can see you can see all
09:33 - the numbers that are multiples of three
09:35 - are printed out as fizz all the numbers
09:37 - that are multiples of 5 are buzzed and
09:39 - the numbers that are multiples of 3 and
09:42 - 5 which is 15 only here is fizzbuzz now
09:46 - the more you write pseudo-code the more
09:48 - you will find a way to write at them
09:49 - each sense to you specifically and
09:51 - running good pseudocode that makes sense
09:54 - to you is simply a matter of practice so
09:56 - what is some way you can actually
09:58 - practice in your everyday life
10:03 - so let's take a look at cooking ramen as
10:06 - pseudo-code well with cooking ramen the
10:08 - first thing you would do is open the
10:09 - packet then you might feel a pot with
10:11 - water then you might bring the water to
10:13 - a boil before putting the ramen in for 5
10:16 - minutes then you'll stir the ramen once
10:18 - every minutes and then after 5 minutes
10:20 - you drain the water before you actually
10:22 - enjoy it so you can turn everyday tasks
10:24 - for example doing laundry or cooking
10:26 - something else going out to a store and
10:28 - purchasing coffee into pseudocode and
10:31 - this will help you basically write
10:33 - pseudocode in a way that makes more
10:35 - sense to you so hopefully this gave you
10:37 - a better understanding on how to write
10:39 - pseudocode and how to use it they go for
10:41 - watching join the conversation by
10:43 - subscribing to this channel or drop in a
10:45 - comment below and if you want to take
10:46 - your skills to the next level start
10:48 - learning on Codecademy today