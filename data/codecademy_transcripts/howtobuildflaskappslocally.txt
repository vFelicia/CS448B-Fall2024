00:00 - hey my name is Mike I'm a developer with
00:01 - code Academy and in this video I'm gonna
00:03 - walk you through setting up your local
00:05 - environment in order to start building
00:07 - flask apps and so up until this point
00:09 - we've been mainly building our flask
00:11 - apps on the code Academy learning
00:13 - environment but in order to move from
00:15 - that environment into your local
00:17 - environment there's gonna be a couple
00:18 - things that you need to set up the first
00:20 - thing that we're gonna have to do if
00:21 - want to start creating flask apps on our
00:23 - local machine is create what's called a
00:25 - virtual environment now when we're
00:27 - building flask apps there's gonna be a
00:29 - lot of things called dependencies which
00:31 - we need to work with and all of these
00:33 - different dependencies have potentially
00:35 - different versions and they might
00:37 - interact with different versions of
00:39 - Python differently and so a virtual
00:41 - environment is going to be an isolated
00:43 - environment on our computer where we can
00:46 - control all of the different
00:47 - dependencies and the versions of those
00:49 - dependencies so that they interact with
00:51 - our flask app correctly this will also
00:53 - allow us to control which version of
00:55 - Python we're using in order to run flask
00:58 - now in my case on my local machine
01:00 - I have Python installed so I can just
01:03 - type in Python version and you can see
01:05 - that I have a Python 2.7 0.15 version
01:09 - installed I also have a version of
01:11 - Python 3 installed so if I type in
01:13 - Python 3 - - version you see I have
01:15 - Python 3.8 point to now it's this Python
01:19 - 3 version which I'm gonna want to use in
01:21 - order to create the virtual environment
01:23 - so with my Python 3 program I'm gonna
01:26 - say python 3 - M V env and then the name
01:31 - of the app that I want to create so in
01:34 - this case why don't we just call it my
01:35 - app now this V env program is actually
01:39 - something that Python is going to give
01:41 - us by default and you can look over here
01:43 - there is documentation for this on the
01:45 - official Python website and it's here
01:47 - talking about virtual environments and
01:49 - packages so basically this V env command
01:52 - is going to create a virtual environment
01:54 - on my machine where I can control all of
01:57 - the different versions and the different
01:59 - dependencies that my flask app is going
02:01 - to use and that's generally the
02:02 - recommended way to build an app like
02:05 - this so we can just hit enter and you'll
02:07 - see what happens in a second over here a
02:09 - new folder got created which is called
02:11 - my app
02:12 - and this new folder was created by
02:14 - Python 3 by that V env command and so
02:18 - this is now the folder where we can go
02:20 - ahead and start building our flask app
02:22 - so I'm gonna CD into my app and now that
02:25 - we're in here we can actually start
02:27 - building our app so you'll notice that a
02:28 - few different folders got generated and
02:30 - I'm not gonna spend too much time going
02:32 - through these but basically this Lib
02:33 - folder contains copies of all of the
02:36 - different dependencies that your app is
02:38 - going to use and by default
02:39 - ven ven disease in there for us there's
02:44 - also this include folder which will
02:45 - include anything that you want to
02:47 - include into your app and then here's a
02:49 - bin folder which contains a bunch of
02:51 - different executable scripts that we can
02:53 - run in order to do different things so
02:55 - you can see here we have for example pip
02:58 - and we have Python all these different
03:00 - things that we're going to need to use
03:01 - so there's one final step that we need
03:03 - to do in order to set up this virtual
03:05 - environment which is activated and
03:07 - activating it is gonna make it so we're
03:09 - actually operating within the virtual
03:11 - environment instead of from our local
03:13 - machine anymore now there's a different
03:15 - way to do this depending on if you're on
03:16 - Windows or if you're on Mac I'm on Mac
03:19 - so I'm gonna show you the Mac version
03:20 - but I'll also show you the Windows
03:22 - version right after so you're just gonna
03:23 - type out source and then you're gonna
03:25 - type out bin forward slash activate and
03:28 - what this is gonna do is it's going to
03:30 - activate our virtual environment and
03:32 - you'll see here that my command line
03:33 - prompt changed a little bit so now in
03:35 - these parentheses I have my app and
03:38 - that's just an indicator that we're now
03:40 - in this virtual environment if you want
03:42 - to get out of this virtual environment
03:44 - all you have to do is type in the
03:45 - deactivate command and then it'll
03:47 - deactivate it now in my case I want to
03:49 - stay in here so I'm gonna activate it
03:51 - again and so if you're on Windows it's a
03:53 - similar command except this time you're
03:55 - gonna run scripts back slash activate
04:00 - dot bat and that should do exactly the
04:02 - same thing so that's the commands for
04:04 - window and and Mac and now that we have
04:06 - a virtual environment set up we can
04:08 - actually start building our flask app
04:11 - but before we do that let me just point
04:12 - out one thing so you remember before
04:14 - when I ran this Python - - version
04:16 - command
04:17 - I had a version of Python that was
04:19 - version 2 but now when I run this you'll
04:22 - see it's Python version 3 and this is
04:24 - one of the benefits of using this
04:26 - virtual
04:26 - environment is now my python version is
04:29 - set to the version that I used to create
04:32 - the virtual environment which was three
04:34 - point eight point two okay so now that
04:36 - we're in the virtual environment let's
04:37 - start installing some of the
04:38 - dependencies that we're gonna need for
04:40 - our application so the first thing we'll
04:42 - do is we'll say pip install flask and
04:45 - what this is gonna do is it's going to
04:46 - install all the dependencies that we
04:48 - need to start up our flask app and
04:50 - you'll notice here if we look in the bin
04:52 - folder that now we have this flask
04:54 - folder in here and there's a couple
04:56 - other dependencies in here as well these
04:58 - are all things that flask is gonna use
05:00 - we're also gonna install one extra thing
05:02 - which is going to allow us to build out
05:04 - forms in flask which is called flask WTF
05:08 - so I'm gonna say pip install flask
05:11 - underscore WTF and this will help us
05:13 - like I said with forms so once again if
05:17 - you look in your live folder you'll see
05:18 - now that we have a dependency for that
05:21 - so the next step is to actually start
05:23 - writing the code for our flask app so
05:25 - I'm gonna create a new file in here in
05:28 - my directory and I'm gonna call it app
05:29 - dot pi now this is the default name that
05:33 - we're gonna need for our flask app and
05:35 - in here we can start writing some of
05:36 - that flask code that we've been looking
05:38 - at over the last couple lessons so the
05:41 - first thing we'll do is we'll import
05:42 - flask so we can say from flask import
05:45 - flask and then we're also gonna import a
05:48 - couple other things that we're gonna
05:49 - need so we're also gonna need render
05:51 - template and finally we'll need request
05:54 - so these things will come in handy later
05:56 - once we start setting up a basic form
05:58 - we're also gonna import that flask WTF
06:01 - library that we just installed so I'll
06:03 - say from flask WTF I want to import and
06:07 - this is going to be called flask form
06:09 - and then finally we'll say from WT forms
06:13 - we're going to import string field and
06:18 - submit field so these will be used as
06:21 - fields on the form that we eventually
06:23 - create next we'll say that our app is
06:26 - going to be equal to flask and we're
06:28 - gonna have in here underscores and the
06:31 - name and then finally we're gonna set a
06:33 - secret key so I'm going to say app dot
06:35 - config and then in square brackets we're
06:37 - gonna put secret key
06:40 - all caps and we're gonna set that equal
06:42 - to a secret key now in my case I'm just
06:45 - gonna set it equal to my secret since
06:46 - this is just sort of a starter app all
06:49 - right so the next thing that we're gonna
06:50 - do is we're gonna define one of our
06:52 - routes so remember the routes are
06:54 - definitions for where the user can go in
06:57 - our app and what types of operations
06:59 - they can perform on those routes whether
07:00 - they're get operations post operations
07:03 - etc so we'll say in here app dots route
07:07 - and that's going to have inside of it a
07:09 - forward slash so this is just going to
07:11 - handle any requests that get made to
07:13 - basically the home page like the root
07:15 - directory of our site and then over here
07:18 - we'll define the different types of
07:19 - methods that we're going to accept now
07:21 - eventually we're going to have both get
07:24 - and post requests being made to this so
07:26 - let's just put both of those in there
07:27 - for now
07:28 - so we'll say get and post next we'll
07:31 - define an index method and this is going
07:33 - to be the method that handles any of
07:36 - these requests that get made and so
07:37 - let's just test this out why don't we
07:39 - return hello world and then we'll come
07:41 - down here and we'll run our app so
07:43 - running the flask app here from your
07:45 - local environment is very easy all you
07:47 - have to do is say flask run and as long
07:49 - as you're in the correct directory here
07:51 - in your my app directory and as long as
07:54 - you have an app dot PI file then this
07:56 - should work so I'm gonna hit app dot run
07:58 - and now you'll see that our site is
08:00 - running on 127.0.0.1 at Port 5,000 this
08:05 - is also known as localhost so let's go
08:08 - over here and take a look I have this
08:10 - open over here on this other tab and
08:11 - you'll see that it's printing out hello
08:14 - world so that looks good to me
08:15 - looks like our site's working as
08:17 - expected now let's add in a little bit
08:20 - of extra functionality right this is a
08:22 - good app but it's not really doing too
08:24 - much so why don't we create an app that
08:26 - allows us to handle to do's so this will
08:30 - be kind of like a to-do list app and we
08:32 - can have the user enter in the two do's
08:33 - that they want to perform so a good
08:37 - first step to this is to create a
08:38 - template and a template is just HTML
08:41 - that we can use on this page over here
08:44 - so instead of just rendering out a
08:46 - string like we're doing right now we
08:48 - could actually render out an entire HTML
08:50 - document so let's create a new folder
08:52 - here at the root directory and we're
08:54 - I call it templates and this templates
08:56 - folder is the place where we can store
08:57 - all of our HTML templates that will
08:59 - eventually be showing to the user so
09:01 - inside the templates folder let's create
09:03 - an index.html file and this will be what
09:06 - gets rendered by our index method it's
09:08 - always a good idea to have the method
09:10 - name over here match the name of the
09:12 - file so in this file why don't we just
09:14 - generate an HTML document now my text
09:17 - editor allows me to do that with a
09:19 - single click of a button but in your
09:21 - case you can just copy out all of this
09:23 - HTML this is sort of like the most basic
09:25 - structure of an HTML document so once
09:28 - again we want to have to do so why don't
09:31 - we just put that here to do's and now
09:33 - we'll hook this template up with our
09:36 - index method so instead of just
09:38 - returning hello world instead we're
09:41 - going to return the result of rendering
09:44 - a template so we'll say return render
09:47 - template and remember this is that thing
09:49 - that we imported up there before when we
09:51 - first started creating our app and so
09:52 - inside of here we can put the name of
09:54 - the template file in this case it's
09:56 - index dot HTML so let's save this and
09:59 - now if we restart our app and we come
10:03 - back over to our website now you'll see
10:05 - that we have that HTML document being
10:08 - shown instead of hello world so the next
10:10 - thing that we can do is start setting up
10:12 - our app so that it can use - dues now
10:15 - all of our - dues could be stored in a
10:17 - database or in this case since we're
10:19 - building a simple app why don't we just
10:21 - store them here in the memory of our
10:22 - computer in this app so I'm gonna create
10:25 - a array here which is called - dues and
10:27 - inside of here why don't we put a couple
10:29 - to do so we can say learn flask that can
10:32 - be one of our - dues we could also say
10:35 - setup ve NV which we already did and
10:38 - then why don't we have one more build a
10:42 - cool app so we have three to do is learn
10:44 - flask setup ve env and then build a cool
10:47 - app and we're gonna want to render these
10:49 - out over here on our templates so on our
10:52 - web browser we want the user to be able
10:53 - to see them so what I can do is inside
10:56 - of this rendered template method I can
10:57 - actually put a comma and we'll pass in
10:59 - another argument so I could say over
11:01 - here - dues is going to be equal to -
11:04 - dues and so when we do this I'm
11:07 - basically specifying that the template
11:09 - is going to get a variable that it can
11:11 - use called to do's and I'm setting that
11:13 - equal to the two dues that we have over
11:16 - here and so now let's go back over into
11:19 - our template and we can actually render
11:21 - out all of these to do so why don't we
11:22 - put like a header one here and we can
11:25 - say to do's and then down here will
11:27 - actually start rendering out some of
11:29 - these two dues now I'm gonna use a for
11:31 - loop in order to do this so inside of
11:33 - these curly brackets will actually write
11:36 - some Python code so I'm gonna say for to
11:39 - do in to dues now remember this two dues
11:42 - variable was given to us over here right
11:46 - so over here I specified that two dues
11:48 - has a value of all of the two dues that
11:51 - are up here and that are defined so I'm
11:55 - saying for to do in two dues and then
11:56 - down here we can say and four so we'll
12:00 - end off our for loop and why don't we
12:02 - put the name of the to do here inside of
12:05 - a list item so we can say to do just
12:08 - like that and I'll put some spaces on
12:10 - here so it's easier to see okay so now
12:12 - we have a for loop which loops over all
12:14 - of the two dues in our program and then
12:17 - puts them into list items so now if we
12:20 - refresh our page and actually we need to
12:22 - reset our server before we do that so
12:25 - now we'll refresh and you'll see that we
12:27 - have our nice header one and then all of
12:29 - our two dues are set up here in the for
12:31 - loop and if we want to see how this
12:33 - works in the internals you can see
12:35 - here's our HTML and we just have all of
12:37 - these different - dues that are listed
12:40 - out just like that so it's the code that
12:41 - we rendered over here so that's step one
12:45 - and that's looking pretty good right we
12:46 - can now display all of our - dues but
12:49 - there's another thing that we want to do
12:51 - which is we want to allow the user to
12:52 - add their own - dues right we've kind of
12:54 - hard-coded these ones in we want the
12:57 - user to be able to say what they want to
12:58 - do in order to do that we're gonna need
13:01 - a form now there's a couple different
13:03 - ways that we can set up forms in a flask
13:05 - app but the way that we've been learning
13:06 - so far in this course is using the WTF
13:11 - form so those flask WTF forms and so I
13:15 - think that's probably the best way for
13:17 - us to do it in this project
13:18 - now we've already imported
13:20 - everything that we need so we have
13:21 - flasks form and we also have a string
13:23 - field and a submit field and so down
13:25 - here we can create a class which we
13:28 - could call to do form and inside of here
13:30 - we're gonna pass in flask form and we'll
13:34 - put a colon and then inside this class
13:36 - we're gonna define a couple things so
13:38 - the first thing we'll do is define this
13:40 - variable here and this is going to be
13:43 - the form field so this will be the field
13:46 - where the user enters in their to do so
13:48 - this is going to be a string field and
13:50 - once again this is something that we
13:52 - imported earlier and inside of here
13:55 - we're gonna say to do so this is gonna
13:57 - be like the the label or the text that
13:59 - tells the user what this field is for
14:01 - and then finally we'll put a submit
14:03 - button so when the user hits the submit
14:06 - button then our HTTP request it's going
14:09 - to be a post request will get sent over
14:12 - to our route and then we'll be able to
14:13 - handle it so over here I'm gonna say
14:16 - submit field and this is just gonna say
14:21 - add to do alright so we have our form
14:25 - setup and then the next step is to pass
14:27 - that form over here into our template so
14:31 - here I'm gonna say template form and
14:33 - this is just another one of those
14:34 - arguments that we can pass in and that's
14:37 - going to be equal to to do form and a
14:40 - new instance of it so I'm creating a new
14:42 - instance of the to do form class and I'm
14:45 - passing that in to template form okay so
14:48 - now that we're passing in the template
14:49 - form we can come back over to our HTML
14:52 - and we can write out the HTML for that
14:54 - so we're gonna create a form field and
14:57 - this is gonna have a method which is
14:59 - post so basically that means that when
15:01 - this form gets submitted it's going to
15:03 - make a post request basically it'll make
15:06 - a request to our server in order to
15:08 - create one of these two do's now inside
15:11 - of here we can start using that form WTF
15:14 - that we set up so inside of the double
15:17 - curly brackets here I'm gonna say
15:19 - template form dot hidden tag and this is
15:25 - basically going to ensure that our form
15:27 - is secure so remember before we set up
15:30 - this app config secret key
15:33 - this is basically what this is doing so
15:35 - this forum will sort of interact with
15:37 - our server using that secret key in
15:39 - order to validate the request and that's
15:41 - just something that we need to do for
15:42 - security purposes so now let's create a
15:45 - paragraph and inside of here we'll put
15:47 - the field for the to do so I'm gonna say
15:50 - template form dot to do dot label and
15:55 - remember over here in app dot PI we set
15:58 - the to do here and then we set the label
16:00 - text right there so there's our label
16:04 - and then why don't we just copy this and
16:06 - we're gonna put this down here and now
16:08 - we're just gonna say dot to do and then
16:11 - in open and close parentheses so this
16:14 - will create the actual text field where
16:16 - we can put our to-do and then finally
16:19 - down here why don't we create a submit
16:21 - button I'll put it in another paragraph
16:23 - and this is going to be instead of
16:26 - template form to do this is just gonna
16:28 - be template form submit so this should
16:31 - end up creating a submit button for us
16:33 - all right so why don't we reset our
16:35 - server and make sure that we didn't make
16:38 - any errors so I'm gonna come over here
16:39 - I'll refresh the page and you'll see now
16:42 - that we have this really nice form so I
16:44 - could put my two Do's in here and then I
16:47 - can click Add to do and it'll make a
16:49 - post request to my server the last thing
16:52 - that we need to do is we need to modify
16:54 - the server so that it's able to handle a
16:57 - post request and basically we'll make
16:59 - the post request with the to do
17:01 - information maybe like take out the
17:03 - garbage and that will then add it to
17:06 - this to-do list and then this list up
17:08 - here should get updated so we'll add
17:11 - another thing here now our form is
17:13 - already set up to accept a post request
17:15 - but down here in the index method we
17:17 - need to write some code so I'm gonna say
17:19 - if to do in request dot form now I
17:26 - imported this request library up here
17:29 - it's from flask and what I'm saying in
17:31 - this line of code is I'm saying if a
17:33 - post request or if really any request is
17:37 - made and it has a to do attribute then
17:41 - down here we want to do something so
17:43 - down here I'm going to say - duze which
17:45 - is this
17:46 - to dues that we have up here dot append
17:49 - and then in here we're gonna put request
17:51 - dot form and we'll grab that to do
17:55 - parameter so once again here we're
17:58 - checking to see if the request got made
18:00 - and it had a to dues field on it and if
18:03 - it did then we'll append that to do to
18:06 - this to do array and we can get the to
18:08 - do by saying request dot form for the to
18:11 - do so that should be enough for our app
18:14 - to be complete
18:15 - assuming we didn't make any mistakes so
18:18 - let's restart the server and then we'll
18:20 - try this out
18:21 - so we'll refresh just to make sure
18:23 - everything is good and let's say we have
18:25 - a to do for take out the garbage so when
18:27 - I click this it should make that post
18:29 - request add it to the to dues array and
18:32 - then refresh the page so that the new to
18:34 - do is add it to that list and you'll see
18:36 - here that when I click Add to do it does
18:38 - exactly that and then let's do another
18:40 - one why don't we do go to work so we'll
18:43 - add that to do as well and you can see
18:45 - that it's getting added to the list so
18:47 - that's basically it that's how we can
18:49 - build a sort of basic bare-bones flask
18:52 - app on our local environment and you'll
18:55 - notice here that it's very similar to
18:56 - the way that we built these in the code
18:58 - Academy environment right except we had
19:00 - to create a virtual environment so that
19:02 - we can manage all of our dependencies
19:04 - and we created our templates folder
19:06 - manually over here but from this point
19:10 - on everything should be exactly the same
19:12 - as you've been doing it on code Academy
19:14 - so all the skills that you've been
19:16 - learning should transfer over into this
19:17 - environment as well so that's all I have
19:20 - for today I want to say thank you so
19:21 - much for watching I hope you learned
19:23 - something and I'll see you next time