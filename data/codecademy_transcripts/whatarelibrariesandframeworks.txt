00:00 - the turns framework and library are two
00:02 - terms that are used a lot in the tech
00:03 - industry many people use them
00:05 - interchangeably and don't really
00:07 - understand what they mean so if you're
00:09 - on that boat hopefully this video will
00:10 - help you out so let's go ahead and get
00:12 - started so today we're gonna cover what
00:15 - is a library what exactly is a framework
00:18 - and then we're gonna compare both of
00:19 - them and see what the actual difference
00:21 - is so what exactly is a library well
00:24 - Anna Geist a library is a set of code
00:26 - that was previously written that can be
00:28 - called upon when building your own code
00:29 - so it's essentially a collection of code
00:32 - packed together that can be used over
00:34 - and over again and it's a very good idea
00:36 - to put frequently used functions
00:37 - together and build yourself a library
00:39 - one of those reasons is handling
00:42 - reusability so reusability is one of the
00:45 - most important factors in software
00:47 - development
00:47 - so whenever some method is used you can
00:49 - simply make a method invocation using
00:52 - the library just imported so we can look
00:54 - at an example of how we import libraries
00:56 - and JavaScript right over here we're
00:59 - importing three different libraries one
01:00 - called promise body parser and lodash
01:03 - and from there we can simply make calls
01:04 - to those libraries whenever actually
01:06 - needed so let's go ahead and take a look
01:08 - at an example where we actually use a
01:10 - library now let's say you're building an
01:14 - application where you need to register
01:15 - and sign up a bunch of users in order to
01:18 - do that the users must actually submit a
01:20 - valid email address when signing up now
01:22 - there are many ways to do this but most
01:24 - of the ways will actually involve using
01:26 - regular expressions so I actually wrote
01:28 - a function that validates email earlier
01:30 - so we're gonna write a function called
01:31 - validate email that will take a
01:33 - parameter called email and from there
01:35 - we're gonna write our regular expression
01:37 - and you can see it's quite lengthy and
01:39 - tedious and it's hard to understand if
01:41 - you're not familiar with regular
01:42 - expressions they basically match a
01:43 - string with specific characters and this
01:45 - is basically a pattern that actually
01:47 - looks for the specific email that
01:49 - matches the pattern so near the end of
01:51 - the function we actually going to return
01:53 - a boolean that will check whether the
01:54 - email has passed a read regular
01:56 - expression test and it will tell us
01:58 - whether the email was false which was in
02:00 - which means invalid or true which means
02:03 - that it was valid so let's actually go
02:05 - ahead and test this out before we start
02:08 - let's go ahead and validate email that
02:12 - has the wrong character
02:13 - so I'll passing a string that simply
02:15 - says name calm save that and then we're
02:18 - gonna run the validator and you can see
02:20 - that's false I put a little quote there
02:22 - accidentally run that again and you can
02:24 - see that's false
02:25 - so if I type in an ad gmail.com and save
02:29 - that that's returned true so the regular
02:32 - expression is essentially looking that
02:34 - there's characters and it's split by an
02:36 - @ sign and it has another domain name
02:38 - here followed by a period and then
02:41 - another 3 string character or a specific
02:43 - number of characters here now all those
02:46 - this works totally fine and it's
02:48 - acceptable code there's nothing wrong
02:50 - with it there's a faster way to do this
02:52 - by using a library called email
02:54 - validator now email validator
02:57 - essentially has this function kind of
02:59 - similar to this but it goes in a lot
03:01 - more depth as to what are valid emails
03:03 - or not here it's probably not testing
03:06 - all the cases for specific emails but
03:09 - the specific library email validator can
03:12 - check for a bunch of different emails
03:13 - with different domain names different
03:14 - lengths different symbols and many other
03:16 - ways around meaning we'll so I'm gonna
03:18 - go ahead and move this down and import
03:20 - that library and you'll see how much
03:22 - more succinct and condensed our code
03:25 - looks our code looks using this library
03:27 - so I'll import the library at the top
03:30 - here and I'm going to call it validator
03:31 - and we're gonna require it into this
03:33 - file now the library name is called
03:37 - email validator and now what we do now
03:42 - that we have validator the library
03:43 - itself we can call a lot of their
03:46 - methods that are actually written in
03:47 - that library using a period so we can
03:50 - simply type in of console lock this as
03:53 - well
03:53 - validator dot validate and then here we
03:56 - type in the name the email that we want
03:59 - to check so I'll do the same one that we
04:01 - did earlier now I'm actually going to
04:02 - comment this out so we know we don't get
04:04 - confused here I'm gonna save this and
04:07 - clear this console out again and we can
04:11 - see that it's actually true so let's say
04:13 - let's remove the @ sign to make sure
04:15 - that it's invalid and we see now we get
04:19 - a false so you can see now how a lot
04:21 - more condensed our validator is simply
04:24 - importing the library allows us to reuse
04:26 - this
04:27 - function into this file and really
04:29 - condense it and make it really readable
04:31 - and easy to to use so let's say we have
04:33 - this validator when setting up a user
04:36 - but we also want to validate users when
04:38 - logging in so we can simply import this
04:40 - library on the login page and do the
04:43 - exact same thing we've done here instead
04:45 - of actually running a long tedious
04:46 - function using regular expressions like
04:48 - the one below so we can actually save
04:50 - ourselves time by reusing this handy
04:53 - function from the library instead of
04:55 - writing this function over over again in
04:57 - different files now in theory you could
04:59 - actually write this function in a
05:00 - utilities file of your own project and
05:02 - save it there and import it in other
05:04 - files but you're essentially running a
05:06 - library on your own and since there's
05:08 - already an library for email validation
05:10 - you might as well just use the one
05:11 - that's available now let's take a look
05:14 - at what is a framework and a gist a
05:16 - framework is a supporting structure
05:18 - where your own code defines the meat of
05:20 - the operations by filling out the
05:22 - structure it essentially provides a
05:23 - scaffold on which to build software and
05:26 - allows a programmer to avoid writing any
05:28 - boilerplate code and merely fill in the
05:30 - blanks leaving the framework to decide
05:32 - when it's appropriate to execute any
05:34 - business logic so let's go ahead and
05:36 - take a look at an example of how we
05:37 - would use a framework we're gonna be
05:39 - working with one called Express now
05:42 - Express is a framework that provides a
05:43 - robust set of features for web and
05:45 - mobile applications now I'm not gonna go
05:48 - too in depth as to what Express is and
05:50 - how it works since this isn't really up
05:52 - tutorial on it but I do have some
05:54 - boilerplate code here where I'm actually
05:56 - importing the framework at the top I'm
05:58 - making an instance of the application
06:00 - itself and sending it to a variable
06:02 - called app and I have a variable called
06:04 - port set to the number 3000 which we're
06:07 - going to be using in a second now we use
06:09 - an Express and similar to other
06:11 - frameworks it's structured in this
06:13 - specific way for it's gonna be looking
06:15 - for specific method calls and specific
06:18 - parameters so when you're actually using
06:20 - Express in framework so you have to be
06:22 - able to name them the methods correctly
06:24 - you can just name them whatever you want
06:25 - so let's say we want to make an actual
06:27 - get request on our route path and we
06:31 - already have an actual Express server
06:33 - instantiated and stored in our variable
06:35 - called app now app will have a bunch of
06:38 - methods that is expecting and one of
06:40 - them is actually
06:41 - get so dot get is basically saying that
06:44 - when it gets to that route it should
06:46 - give the response that is specified in
06:47 - the function and it will take two
06:49 - arguments the first one will be the URL
06:51 - which will be our route path which is
06:53 - simply a forward slash and then it will
06:55 - take a callback function that tells
06:56 - express what to send back to the person
06:59 - making the request
07:00 - now that callback function will take in
07:02 - two parameters as well request and
07:05 - response and these are essentially
07:06 - objects that express knows how to handle
07:10 - and manage and it's essentially going to
07:11 - be looking for them when this route is
07:13 - hit so what we want to do is simply send
07:17 - a message to the route and let's just
07:19 - send back something that says hello from
07:22 - code caddy just like our app
07:28 - instantiation our response object has
07:30 - also a bunch of functions and methods
07:33 - that is are available and we can invoke
07:36 - them whenever we want so before we
07:38 - actually run this we actually have to
07:40 - instantiate our server as well and we
07:44 - can do this by simply calling don't
07:46 - listen and passing in our port close
07:51 - that I'm gonna restart my server here
07:54 - and then we could simply let me save
07:56 - this and then let's go ahead and run our
07:59 - server so I have a new tab open and I
08:04 - have set up my port on 3000th so we can
08:07 - go directly to our localhost 3000 and
08:09 - whatever we have sent through the dot
08:12 - send method call the string that we
08:14 - passed in there and the response object
08:16 - should display to the client here so
08:18 - let's go ahead and go to our localhost
08:20 - 3000 and you can see that the string
08:22 - that we passed into that function call
08:23 - is sent back to the to the user to the
08:26 - client so that's what was written right
08:29 - over here so it's okay if you don't
08:31 - completely understand what the code
08:33 - means in here like I said this isn't
08:35 - really an Express tutorial but what I do
08:37 - want you to get out of this is mostly
08:39 - how we're actually working with a
08:41 - framework as opposed to a library where
08:43 - we simply import it and call a method or
08:45 - a different method with different
08:48 - parameters in this case there is a
08:49 - specific structure that we have to
08:51 - follow so over making a get request or a
08:53 - poster
08:54 - it's gonna be expecting two parameters
08:56 - at least one of them being the route and
08:58 - the other one being a call that function
09:00 - so if one is missing or the certain
09:04 - pattern here is like and not a string
09:06 - it's gonna give you errors so you have
09:08 - to follow the pattern the structure that
09:10 - the framework provides so in this case
09:12 - were more of filling in the functions
09:13 - themselves instead of making simply
09:16 - method invocations like we're doing with
09:18 - the library in this case the framework
09:20 - is calling on your code you're not
09:22 - calling on the frameworks code so let's
09:26 - take a look at an analogy in order to
09:28 - drive this home let's pretend you're a
09:30 - construction worker and you're assigned
09:31 - to build a house now in theory you could
09:34 - build a house without using any tools
09:36 - but if you want to make your life easier
09:38 - you'd go ahead and use a hammer use a
09:40 - nail gun use a handsaw whatever you need
09:42 - so in a sense all these tools are your
09:44 - library you're gonna be using these
09:46 - tools to build a house and not only can
09:48 - you build a house with them you can
09:49 - y'all go ahead and build a table a chair
09:51 - or anything you like with these tools
09:53 - now if we look at a framework
09:55 - well the supporting structure is gonna
09:57 - be the framework itself so the framework
09:59 - dictates how your project will be
10:01 - structured where as libraries are more
10:03 - of the building blocks that can be used
10:04 - anywhere so the skeleton or foundation
10:06 - of the house is essentially your
10:08 - framework you're going to be adding to
10:09 - it and we're gonna fill out the
10:11 - structure until it's completed and it
10:12 - comes together now one key point to note
10:15 - here is that a framework may use
10:16 - libraries but it doesn't really need
10:18 - libraries in order to operate so now we
10:21 - have an idea of what a framework in a
10:22 - library is but one of the biggest
10:24 - factors that differentiate a library and
10:27 - a framework is something called
10:28 - inversion control when we use frameworks
10:31 - and libraries our code flows a little
10:33 - bit different so let's say you have your
10:35 - own code written and you import a
10:37 - library when you import a library you
10:39 - have access to all these methods that
10:40 - are collected pieces of functionality
10:42 - from that library so you're making calls
10:44 - directly to the library itself so when
10:46 - we use a library we are in charge of the
10:49 - flow of the application we are the ones
10:51 - choosing when and where to call the
10:52 - library on the other hand when we use a
10:54 - framework the framework itself is making
10:57 - calls towards our code so the framework
10:59 - writer writes the application and leaves
11:01 - out the interesting details which we
11:03 - fill in so when using a framework the
11:05 - framework is in charge of the flow it
11:07 - provides some places
11:08 - you to plug in your code but it calls a
11:10 - code you plugged in as needed now a lot
11:12 - of frameworks can get quite hefty and
11:14 - large like rails for example so for that
11:17 - reason many frameworks actually end up
11:18 - even using libraries but it's important
11:20 - to note like I said in the previous
11:21 - slide it's not a necessity for a
11:23 - framework to contain libraries okay so
11:25 - let's go ahead and take a look at some
11:27 - actual popular frameworks and libraries
11:28 - that are used around one of the main
11:31 - most popular frameworks which I just
11:33 - mentioned is rails which is a very
11:35 - popular beginner friendly framework that
11:37 - uses Ruby and makes it very easy to get
11:39 - started and set up a basic skeleton if
11:41 - you worked a lot with front-end
11:43 - development then you're probably
11:44 - familiar with angular which is a
11:46 - front-end framework that specializes in
11:48 - building rich single page applications
11:50 - there's also django which is a framework
11:52 - that uses python for web development and
11:54 - it's used on by some of the big names
11:56 - such as google youtube and instagram and
11:59 - we also have Express which is a back-end
12:01 - development framework that prides itself
12:03 - in being very minimal and fast so let's
12:06 - go ahead and take a look at some of the
12:07 - libraries now what are the most popular
12:09 - libraries which you've probably heard of
12:11 - is react and react is a JavaScript
12:13 - library by Facebook that's used for
12:15 - building user interfaces and single page
12:17 - applications there's also jQuery which
12:20 - is a very old cycle library designed to
12:22 - help in manipulating HTML elements as
12:24 - well as the event handling and CSS
12:27 - animation another library called lodash
12:30 - is essentially a Productivity kit that
12:32 - provides a bunch of utility functions
12:34 - that you can use in your program right
12:35 - off the bat and last we have redux which
12:38 - is another open source JavaScript
12:39 - library for managing applications state
12:42 - and it's commonly used with react so
12:44 - hopefully this video gave you a good
12:46 - understanding of what is a framework and
12:47 - a library and how they're actually
12:48 - different anyway thank you all for
12:50 - watching during the conversation by
12:52 - subscribing to this channel or dropping
12:53 - a comment below and if you want to take
12:55 - your skills to the next level start
12:57 - learning on code Academy today