00:01 - welcome everyone to Khan Academy live
00:06 - thank you all for joining us today I'm
00:18 - Alex I'm curriculum developer at Koch
00:21 - Adam II and my name is Ian I'm also a
00:26 - Kuykendall bird here at cook at me and
00:29 - we're super excited to be walking
00:32 - through another lesson and are
00:34 - visualized with Python skill path I'll
00:37 - with you all today so thank you so much
00:39 - for joining us yeah and you know for
00:46 - this session we are really looking for
00:48 - this to be interactive with you all so
00:51 - feel free to be active in the comments
00:54 - from wherever you're watching ask any
00:58 - questions that you have we're here to
01:01 - answer them and provide any insight and
01:04 - guidance and today is a really exciting
01:08 - day I would say in my opinion if you've
01:11 - been following along with us over the
01:13 - last few weeks or so since we are going
01:16 - to get into some real data visualization
01:21 - today and start building some graphs so
01:23 - I'm excited I don't know you feel like
01:25 - Alex but yeah awesome hi Shamala and hi
01:37 - Michael thanks so much for joining us
01:41 - we're gonna just go ahead and not waste
01:44 - any time and jump into where and so our
01:49 - listen and so if you want to follow
01:54 - along on your own we're going to be
01:57 - going through the line graphs live
01:59 - lesson on economy um so you can go ahead
02:02 - and open that up as well
02:08 - awesome so if you have been following
02:12 - along we've been going over how to work
02:16 - and code in Python
02:18 - I'm over the last two weeks and today
02:19 - we're going to take that Python
02:21 - knowledge and apply it by creating some
02:26 - line graphs and the way that we're going
02:29 - to do this is by using a package in
02:32 - Python that is called matplotlib and
02:35 - this is a package or library that is
02:38 - really helpful for us to create charts
02:40 - and graphs and so today we're going to
02:46 - discuss a few different basics to help
02:49 - you get started with creating your own
02:52 - graphs and so some of that will include
02:55 - how you can actually go and take data
02:57 - that you have and create a simple graph
03:00 - out of it on how you can edit
03:02 - customizations to that graph and for
03:06 - example if we take a look at this graph
03:07 - that we have here on the right-hand side
03:09 - of the screen we can change things like
03:12 - the colors or we can adjust the axes
03:16 - which are those lines that kind of
03:18 - border the graph and let us know maybe
03:21 - how much we're measuring something or
03:23 - what we're measuring also able to add
03:26 - two strips of features like titles and
03:32 - some more helpful tools like legend so
03:37 - if we're gonna plot multiple sets of
03:39 - data on the same graph how can we tell
03:42 - them apart and so all this is really
03:45 - useful really helpful I think maybe now
03:48 - more than ever
03:49 - in reading the news we see crafts coming
03:53 - up and appearing to showcase what's
03:55 - going on in the world to explain all
03:58 - sorts of things whether it be public
04:00 - health matters or if you're into like
04:04 - finance and the stock market lots of
04:06 - applications of line graphs or if you
04:10 - are a researcher and you're trying to
04:12 - show off your research that you've done
04:14 - mine graphs will be really useful so
04:16 - there's all sorts of different usages
04:18 - and applications that are there first
04:21 - row line
04:21 - and so hopefully today you'll be able to
04:25 - learn a little bit and go ahead and
04:27 - create some of your own grass your own
04:28 - datum and so before we go ahead and dive
04:37 - in the first thing that we need to do is
04:39 - to load the package that helps us do all
04:44 - this in python and that is matplotlib so
04:48 - at the top of our file we're just going
04:52 - to go ahead and write this one line of
04:54 - code from mat pot lab import pipe lot SP
04:58 - LTE and so what is it doing for us is
05:02 - it's saying that let's go to this
05:05 - matplotlib package and let's import the
05:08 - pipe lot module with this name PLT and
05:15 - so pipe lot is the is a module of
05:17 - matplotlib that specifically helps us
05:20 - with creating this kind of graph so map
05:21 - can also do a lot of other cool things
05:24 - in the worlds of visualization but
05:26 - pipeline is the module we're going to
05:27 - focus on today and just for ease of
05:31 - writing on this module there's a
05:35 - standard where we import it with this
05:38 - name PLT so kind of shorthand for plot
05:41 - and all of the function we're gonna use
05:43 - today are going to be accessed from
05:45 - within this module pipeline so we're
05:47 - always going to be saying something like
05:49 - PLT dot plot we want to do a plot so we
05:55 - can go ahead and run this code and there
06:01 - we go we've gone ahead and imported our
06:05 - MATLAB package so for the next exercise
06:12 - I'm going to pass it off to my partner
06:16 - Alex
06:25 - okay so I think I am sharing my screen
06:28 - now great so we're gonna start off with
06:32 - the basic line plot and basically some
06:37 - of the data that we can visualize using
06:39 - a line plot is the average price of
06:41 - gasoline over the past decade the weight
06:44 - of an individual over the past couple of
06:46 - months and average temperature is a lot
06:48 - along the line of longitude over
06:50 - different latitudes so again these are
06:53 - just some of the types of data that we
06:54 - can use and we can visualize using a
06:57 - line so using matplotlib we can use this
07:03 - code we can see over in the left hand
07:06 - side to plot a simple graph and so the
07:09 - first thing we'll take a look at is X
07:11 - values and it's just a list an array of
07:15 - five different values and the same thing
07:18 - with the Y out Y values it's a list that
07:20 - contains five different integer values
07:23 - so the first thing we'll notice here is
07:25 - a PLT dot plot and so what that does is
07:30 - it plots our data - to the plot and so
07:37 - the first thing we'll take a look at is
07:39 - what are we plotting what values are we
07:40 - giving this function so the first one is
07:43 - X values so always when the first
07:46 - argument that you give is going to be
07:48 - the x value of the plot and then we have
07:51 - the Y values of the plot so that just
07:53 - works perfectly so we can see that on
07:55 - the x axis it's going to plot our x
07:58 - values on the y axis it's going to plot
08:00 - our Y values now just using plot will
08:04 - not actually visualize anything in order
08:07 - to view the final graph you're going to
08:10 - need to use dot show so that's what
08:12 - we're using here with the PLT dot show
08:16 - ok so once again just take a look at
08:19 - these values over here X values and Y
08:22 - values when we run this code the output
08:25 - is going to look like this graph so you
08:28 - can see it matches our X values and our
08:31 - Y values and immediately let's just go
08:34 - into creating our own plot
08:37 - um but before we go on one thing you
08:40 - might notice is on line one we see
08:42 - saying this is import code Kadim II live
08:45 - and actually I'm gonna pass this on to
08:47 - Ian to explain a little bit more about
08:49 - this line and what it means for us in
08:51 - this lesson that's a great point Alex
08:55 - and so when we are working with plotting
08:59 - on Khan Academy if you're taking any
09:01 - more lessons that I used the map alone
09:04 - package you will see this import Academy
09:08 - live at the top and this is something
09:11 - that we have on pacifically just on our
09:14 - platform that helps us display our plots
09:18 - to you and so what you're going to see
09:20 - shortly when Alex goes ahead and plots a
09:25 - graph is that we're gonna see that image
09:28 - up here on the right hand side is for
09:30 - you and when you're working locally on
09:33 - your own computer maybe an a PI file or
09:38 - a Python file or maybe you're more of a
09:40 - data analyst it is a scientist and
09:42 - you're working at your notebook the way
09:45 - that a plot will appear will depend on
09:47 - however your you're working locally and
09:50 - so if you're in that PI file you won't
09:53 - have to write in for a quick ad Amiel in
09:54 - you'll just you know import matplotlib
09:56 - as we've done here write your code and
09:59 - when you run that code an image will
10:02 - appear and you're on your computer but
10:06 - just in order for us to replicate that
10:07 - process on Codecademy we have to do a
10:09 - little bit tinkering on our back-end to
10:11 - make this happen I'm gonna so that's
10:13 - what you see that import code cut me
10:14 - live there that's just something
10:15 - personal to us here that we have to do
10:17 - in order to show you the plots that we
10:19 - create so no need to worry on your end
10:22 - but a great thing to call out yes thank
10:26 - you so much in so you can see right now
10:28 - on the right side of my screen you have
10:30 - a broken image but that's going to be
10:32 - fixed when we run our code and we
10:33 - actually have a graph to show so let's
10:37 - see first instruction we're gonna make a
10:39 - simple graph representing someone
10:41 - spending on lunch over the past week so
10:44 - the first thing we're going to do is
10:45 - define two lists one called days and the
10:48 - other called money spent and it's going
10:50 - to contain the
10:51 - integers in this list so we'll just
10:53 - start that off so days equals and this
10:56 - goes from zero to six so I'm just going
10:59 - to plot that great awesome okay and now
11:12 - we're going to create our second list
11:14 - array and that's going to go under the
11:17 - money spent so we're going to use this
11:18 - information over here so we're going to
11:21 - type down let me spend and then we're
11:24 - going to set that equal to 10 12 12 10
11:33 - 14 22 24 we have some expensive lunches
11:38 - okay so we're going to run this code and
11:41 - we'll see if this is correct and okay
11:45 - one second
12:01 - see there we go alright so now that we
12:04 - have the graph correctly I'm going you
12:05 - can see that we plotted these two lists
12:08 - correctly and if you ever get stuck make
12:11 - sure you take a look at those hints to
12:12 - help you out so this would have helped
12:14 - you if you weren't sure how to create
12:15 - that Python list okay so now the next
12:18 - thing it's going to ask is plot days on
12:21 - the x-axis and money spent on the y-axis
12:24 - using PLT dot plot so here we go we're
12:27 - gonna try that out PLT dot plot and so
12:31 - once again x-axis is going to be days so
12:33 - that's gonna be the first piece of
12:35 - information we put into this as an
12:37 - argument and our second argument is
12:39 - going to be money spent okay so we're
12:44 - gonna run this code you can see that's
12:47 - all correct and so finally in order to
12:49 - show the plot we're going to use PLT
12:51 - show okay so once I run this we can see
12:58 - immediately that a graph pops up over
13:01 - here and it's plotting our points so we
13:03 - can see the x-axis which goes from zero
13:06 - one two three four five six we can see
13:08 - that on the x-axis over here and then on
13:11 - our y-axis we can see the values that we
13:13 - put in for the array money spent okay so
13:19 - I'm actually going to now look before we
13:22 - go into the next exercise I'm going to
13:23 - pass this back to Ian
13:30 - awesome thanks so much Alex um now for
13:36 - our next exercise we are going to take a
13:50 - look at um how to expand upon that basic
13:56 - climb plot and so um what we can see
14:04 - here is that as we saw in the last
14:06 - exercise we could take that set of data
14:08 - and make that plot showing the money
14:11 - spent over time but what if we wanted to
14:14 - showcase two sets of data together on
14:17 - the same plot I'm gonna enable us to do
14:19 - a comparison we're able to do that as
14:22 - well with map a loop and the way that we
14:27 - can do that is just by doing the same
14:29 - thing that we did in the last exercise
14:32 - where we use the PLT dot plot function
14:35 - we're gonna do that twice with the two
14:38 - different sets of data that we are
14:40 - working with so for example let's say
14:46 - that we want me to look at the amount of
14:50 - money that our friend spending on lunch
14:52 - over time in addition to the amount of
14:54 - money that we were spending on lunch
14:55 - over the time so if we look in this code
14:58 - block here on the Left we have the same
15:01 - days of the week 0 1 2 3 4 5 and 6 and
15:05 - then we still have that money spent list
15:09 - which contains amount of money that we
15:11 - were spending over those different days
15:12 - but now we have an additional list money
15:15 - spent - and so we see that our friend is
15:21 - spending different amount of money than
15:23 - us on each day sometimes we're spending
15:25 - less sometimes you're spending more you
15:28 - know depending on their mood and what
15:30 - they want for lunch and what we can do
15:33 - is just by calling the PLT plot function
15:36 - twice once with our money spent against
15:40 - days and then it
15:42 - again with now our friends money spent
15:44 - against days and we're able to plot
15:47 - those two sets of data on the same graph
15:51 - and one thing I want to call out is that
15:55 - you'll see when plotting with MATLAB
15:57 - there's a certain set of colors that are
15:59 - automatically used and we'll discuss a
16:02 - little bit about how to change those
16:03 - colors in a bit but by default I'm you
16:06 - will see lines plotted in blue and then
16:10 - if you add additional line orange and
16:13 - this is not just by chance or because
16:16 - the MATLAB developers like these colors
16:22 - this is because blue and orange are
16:25 - colors that are easy to distinguish for
16:29 - essentially a large group of people so
16:32 - if you have someone who is colorblind
16:33 - typically they'll be able to distinguish
16:35 - between an orange and a blue so this
16:39 - choice was made to ensure that when we
16:41 - are creating plots with my poem by
16:43 - default
16:44 - they'll be visible to as many people as
16:47 - possible and this is something that you
16:50 - know sometimes people don't think about
16:51 - just because maybe you know they're not
16:54 - colorblind or they don't know people who
16:55 - are colorblind and they're gonna go
16:57 - ahead and just design something that
16:58 - looks um you know nice to them but it is
17:02 - important to keep in mind of who your
17:05 - audience is and where different people
17:08 - are coming from I'm so this is just a
17:09 - really helpful thing that is built into
17:11 - MATLAB
17:11 - enabling your plots to be be friendly to
17:15 - people who might be colorblind so
17:17 - something to keep in mind as you go off
17:18 - and venture and treating your own that's
17:20 - just because it can be really fun to
17:22 - choose all sorts of colors but good to
17:24 - keep in mind of making your
17:26 - visualizations as accessible as possible
17:31 - cool so now let's go ahead and try and
17:35 - do a plot of two separate sets of data
17:39 - at the same time so we have our lists
17:44 - called time here that goes from 0 to 4
17:47 - and now we're looking at revenue and
17:50 - costs so maybe in this example we
17:53 - a business and we want to see how
17:57 - revenue and costs are changing over time
18:00 - so the first thing we want to do is plot
18:02 - revenue versus time so I'm gonna call it
18:04 - p lt's up slot and as my first argument
18:09 - I'm going to put the data set that we
18:11 - want to go along the x axis and the x
18:14 - axis is going to be that bottom part of
18:17 - our graph so here we want to put time
18:20 - it's usually helpful when you're doing
18:22 - visualizations with time to have that on
18:24 - the x axis and then as our second
18:27 - argument we are going to put what we
18:30 - want to be plotted on the y axis which
18:33 - is revenue and so if I go ahead and
18:38 - click run right now on this code it'll
18:43 - see that we've called the plot command
18:45 - and sometimes when I'm working with my
18:48 - lib I'll do this and I'll run my code
18:50 - and I'll be like hey where where's my
18:53 - plot like what's happening it's missing
18:56 - something's broken
18:58 - but always remember that unless you call
19:03 - PLT that show um we're not gonna be able
19:06 - to see our plot so if I edit PLT got
19:09 - shown right here what would happen now
19:13 - is on the right hand side we're now able
19:14 - to go and see that line that we plotted
19:19 - so yeah something to just keep in mind
19:22 - when you go off and start explore on
19:24 - your own but now what we want to do is
19:27 - we also want to plot the second set of
19:30 - data which is those costs over time and
19:34 - so what I'm going to do is beneath my
19:36 - first call to PLT the plot but above PLT
19:39 - dot show I'm gonna do another call to
19:43 - PLT template and I'm going to put time
19:47 - on the x-axis and costs on the y-axis
19:51 - and now when I run this we're now able
19:56 - to see those two sets of data uh
19:58 - together and what I'm going to do
20:01 - quickly is go ahead
20:06 - expand this plot um and we just take a
20:12 - look at this quickly and we can try and
20:14 - I know that's what's going on so if we
20:17 - remember and I'm gonna expand this for a
20:19 - second just to confirm the first thing
20:21 - we plotted which is going to be the blue
20:22 - line is time or revenue verse time and
20:28 - then the orange line is cost versus time
20:32 - so the blue is the revenue and we can
20:34 - see at the beginning on that first day
20:36 - of revenue is higher than costs which is
20:39 - a good thing if you're a business you
20:40 - want to be bringing in more money maybe
20:42 - then you're spending we didn't see um
20:45 - that for the second day did a wine that
20:50 - B cost go above revenue um but then as
20:53 - time goes on from days two to four
20:57 - revenue is always higher than costs um
21:00 - so you know when you're working with
21:03 - data like this I think it's always
21:05 - helpful to just take a second to always
21:09 - stop and look at the data look at the
21:13 - plot and think okay does this make sense
21:16 - based on like the actual data that I
21:18 - have um and to kind of just a question
21:21 - what you're doing because at the end of
21:22 - the day the the plot is what tells the
21:24 - story um especially when you go and
21:27 - share your visualizations with someone
21:28 - so it's always helpful to just check to
21:30 - make sure that things are lining up
21:32 - expect awesome so I am now going to pass
21:40 - this back over to Alex to bring us on to
21:45 - index exercises great thank you for that
21:50 - so just like we said before you in front
21:53 - of a great point about the two colors
21:55 - that are used but like we also mentioned
21:59 - that there is a way to change the line
22:02 - styles of your line graph and so we can
22:06 - specify the color just by going into PLT
22:09 - dot plot adding our x value or Y value
22:12 - and then adding something called color
22:15 - so you can see right over here we have
22:17 - that color key word and then we use a
22:20 - I'm an operator just equal sign and then
22:22 - we either give it a color name like
22:24 - green or a hex code so we can see right
22:27 - over here we have that hex code there
22:30 - and when it comes out we can see that
22:32 - the first one is green and the second
22:34 - one is a grayish color so it's pretty
22:37 - easy just to add that in just make sure
22:39 - between each of your after your x value
22:42 - and your Y value add a comma first then
22:44 - put in the keyword now another way we
22:49 - can style our lines is using line styles
22:52 - so this can give us the ability to
22:54 - create dotted lines or dashed lines so
22:57 - you can see it's the same type of syntax
22:59 - where you use peel T dot plot and after
23:02 - you put in the x-value and y-value you
23:05 - specify what you're trying to change
23:07 - about the line using the keyword so for
23:10 - line style you're going to use line
23:12 - style so we can see over here if we want
23:16 - a dashed line style I'll just highlight
23:18 - this over here we're gonna use just - -
23:21 - and it's in single quotes so make sure
23:23 - you label what you want um your line to
23:27 - look like with as a string so if I were
23:30 - just to put - - with a string you're
23:32 - just gonna get an error so make sure you
23:34 - are aware of that
23:36 - another example here we have is the
23:38 - dotted line style and that's just using
23:41 - the colon and finally no line so that
23:44 - would just be an empty string now
23:47 - another way we can change up our the
23:50 - visualization of our line plot is by
23:53 - changing the marker now the marker is
23:55 - just the data points the exact data
23:58 - points so some of the ways we can do
24:00 - this is we can have a circle or a square
24:03 - or star and you just have to kind of
24:06 - memorize which ones you're looking for
24:08 - and once again it's the same thing where
24:10 - we put it into PLT dot plot after the x
24:13 - and y values and we use marker so if we
24:16 - want a circle as our marker we're just
24:19 - going to use o once again this is going
24:22 - to be in a string and besides just those
24:28 - options there's a lot more possibilities
24:31 - when it comes to styling you're lying
24:33 - so we have this link over here so if
24:35 - you're in the lesson definitely go ahead
24:37 - and check that out it's the matplotlib
24:39 - documentation and you can just take a
24:42 - look and explore different ways to style
24:44 - your line graph so let's take a look at
24:48 - this example over here we are using PMT
24:50 - pot and we can take a look at some of
24:52 - the different ways this can be affecting
24:55 - our graph so we have our first one so
24:58 - these days money spent and then our
25:01 - first change is the color where we're
25:02 - going to make our line graph green and
25:04 - then the line style is dashed so if you
25:07 - take a close look you can kind of see
25:09 - how that has that effect it's a very
25:12 - it's it's light in this case but you can
25:15 - see there's a very fine line on that
25:17 - green line graph now for the second one
25:21 - where we're documenting daily is the
25:23 - first money spent - we have our color
25:26 - still gray but now we're using that
25:28 - marker where it's a circle marker and if
25:31 - you take a look at each of those points
25:32 - you can see there's a dot right where
25:34 - each of those points really lie in so I
25:37 - think that's really helpful it improves
25:39 - just understanding what's happening with
25:42 - your graph um but again it's also
25:44 - completely optional and you can use it
25:46 - or you don't have to okay so let's get
25:50 - some practice with this so the first
25:53 - thing we're going to do is we're gonna
25:54 - plot revenue versus time as a purple
25:57 - line as a purple dashed line so let's
26:00 - give this a try so we're gonna use PLT
26:03 - dot plot so we're going to have time in
26:07 - our x-axis revenue in our y-axis and
26:11 - then we want a purple line so I'm just
26:14 - gonna use that keyword color and we're
26:17 - going to have that equal purple okay
26:21 - great
26:22 - and then the second one we want to do is
26:24 - we want to make this a dashed line so
26:25 - I'm going to add another comma and the
26:27 - keyword is line style and I'm going to
26:31 - set that equal to dashed okay so I'm
26:35 - just going to run this really quick
26:37 - great and so now the second thing we're
26:41 - going to do but I'm actually before we
26:43 - run this I want to show what this looks
26:45 - like so PLT
26:47 - let's take a look at what we created
26:51 - there we go so you can see that in our
26:54 - graph over here we have a purple dashed
26:57 - line and you can really this is very
26:59 - helpful um especially if you have
27:01 - multiple pieces of data on the same
27:05 - graph this could be a really great way
27:06 - just to help you differentiate between
27:09 - what data you're looking at okay
27:13 - so we do have to plot one more graph on
27:17 - this so we're going to plot cost first
27:19 - time with the hex color on 8 - EDC 9 I'm
27:24 - very curious as to what color that will
27:26 - be and then these square markers so I'm
27:30 - gonna type in PLT dot plot once again we
27:33 - have time as our x-axis we're going to
27:38 - use costs for y alright our color equals
27:46 - and type that in 8 to DDC 9 and then
27:53 - finally we're gonna have the s style
27:55 - marker so I'm just gonna type in marker
27:57 - and I'm going to set that to 2 so I'm
28:04 - gonna run this and we can see it's
28:08 - already there and we can have a good
28:10 - idea of just how different this makes it
28:12 - look so we have that nice like light
28:14 - green color and we have the square
28:17 - marker and so you can see just the
28:19 - square plot points right on our graph
28:22 - and it's a little easier to see like
28:23 - what exactly the number we're looking at
28:26 - is at that specific point okay so I'm
28:30 - actually going to go ahead and I'm gonna
28:31 - pass this back to Ian for the next one
28:37 - thanks so much Alex and something I do
28:41 - like a lot about being able to style
28:45 - lines with certain colors is if you're
28:49 - maybe working at a company and they have
28:53 - a certain color scheme or if you are
28:57 - maybe trying to visualize certain data
29:00 - that has like a color associated with it
29:02 - inherently getting to use those colors
29:05 - to maybe fit to your company um
29:10 - specifics or like you know fit to what
29:20 - what what come like that data that you
29:23 - want it just makes things a little more
29:25 - fun and um enjoyable so I'm big fan of
29:29 - taking advantage of that cool so we're
29:35 - gonna now switch over to talking a
29:38 - little bit about our axes and the axes
29:46 - are what we use to determine or show
29:54 - what are the kind of scales for what
29:56 - we're plotting and so we have the x-axis
29:58 - on the bottom of our plot and then we
30:03 - have the y-axis um going up on our plot
30:07 - and so when we choose to just plot a set
30:11 - of data map Allah will automatically
30:14 - choose for you what what area your plot
30:19 - range over but sometimes we might want
30:22 - to change those values and maybe zoom in
30:25 - on a certain part of our plot that were
30:28 - most interested in we're able to do that
30:30 - using the PLT dot axis function so if I
30:37 - go ahead and just run this code
30:38 - originally let's take a look at what's
30:41 - happening so first we have the variable
30:43 - X which represents a range of 12 so
30:46 - that's taking us from 0 on the lower end
30:49 - to
30:50 - eleven on our upper end and then we have
30:54 - four y-values numbers that are ranging
30:57 - between twenty-nine hundred and
31:00 - thirty-one hundred and so when we plot
31:03 - this data but applying X that range from
31:07 - zero to 11 on our x axis and then those
31:11 - numbers between twenty nine hundred and
31:12 - thirty one hundred the y axis we got
31:14 - this to plot that you can see on the
31:16 - right and I'm gonna go expand this for
31:18 - us and take a look at and automatically
31:22 - we can see here that MATLAB is choosing
31:25 - to set the range or our x axis from zero
31:29 - to 11 so that's the only area that it's
31:31 - showing because that's the only area
31:33 - that we have a data for on that x axis
31:36 - since our numbers only range from zero
31:37 - to 11 similarly on the y axis it has
31:41 - chosen to only show the numbers 2900 to
31:46 - 3100 because those are the minimum and
31:49 - maximum of those Y values in our data
31:53 - set but sometimes we don't want to go
31:57 - with that default sometimes maybe we're
31:59 - just interested in a certain area and
32:00 - that's what we want to focus on and we
32:03 - can change that using the PLT dot access
32:06 - function and the PLT the access function
32:10 - can take a list as an argument and the
32:16 - numbers and that list will have specific
32:18 - meaning for determining the minimum and
32:21 - maximum of the x value and Y values
32:24 - displayed so let's take this look at
32:26 - this example here and the narrative
32:28 - component of the page if we had this
32:32 - data x and y where x is a range of
32:37 - numbers from 0 to 4 and then y is a list
32:40 - containing 0 1 4 9 and 16 and let's say
32:45 - we just wanted to look at this plot from
32:48 - the area x equals 0 to x equals 3 so
32:51 - long that xx this instead of going from
32:53 - 0 to 4 which is what our dataset
32:55 - contains we just want to look at 0 to 3
32:57 - and then on the y axis we just want to
33:00 - look at the area from y equals 2 to y
33:03 - equals 5
33:04 - so even though this data ranges from
33:07 - zero to sixteen we just want to see the
33:09 - part of the plot that's in between y
33:12 - equals two and y equals five what we'll
33:14 - do is we call our PLT the odd function
33:17 - like we normally would putting in our X
33:19 - as our first argument to be the variable
33:22 - plotted on the x axis and then Y as a
33:25 - second argument to be the variable on
33:27 - the y axis but this time we're also
33:30 - going to call the PLT dot access
33:31 - function before we call PLT not show and
33:35 - we put in this list of four numbers and
33:38 - those four numbers in a particular order
33:40 - let's let us dictate to the graph what
33:45 - we should focus on and so the first
33:48 - number is going to be the minimum x
33:49 - value displayed and the second will be
33:52 - the maximum x value displayed so those
33:54 - first two numbers what's that they we
33:56 - just want to go from 0 to 3 on our
33:59 - x-axis and then the second two numbers
34:01 - or set of two numbers will dictate the
34:04 - y-axis so the third number will be the
34:06 - minimum Y value displayed and the fourth
34:09 - number with a maximum Y value displayed
34:10 - so here we're saying we want the minimum
34:12 - Y value to be two and then the maximum
34:14 - to be five and so when we now plug this
34:17 - we can see that um our plot on the x
34:22 - axis two ranges from 0 to 3 and on the y
34:25 - axis ranges from two to five and so the
34:30 - plot just is only showing this part of
34:33 - the line and so maybe like what's
34:36 - happening here is like some exciting
34:37 - event in our data maybe there's some big
34:39 - change or in this example maybe there's
34:43 - some big acceleration that's happening
34:44 - here um or change it's making our part
34:47 - go more vertical and we want to show
34:48 - this to our audience I'm so that's why
34:51 - you might want to use the PLT to access
34:53 - function to focus in on a certain area
34:55 - so let's now go ahead and give this a
34:59 - shot on our own so we have this line
35:04 - already plotted representing someone's
35:06 - spending on coffee over the past 12
35:08 - years so well this person is spending a
35:13 - lot of money on coffee
35:14 - if this is
35:16 - if we're gonna soon this is okay I'm
35:19 - assuming dollars maybe that's not the
35:21 - right case if we're in the US and this
35:23 - is dollars three thousand dollars a year
35:26 - on coffee is a lot I'm hoping this
35:29 - person is maybe in a different country
35:31 - and they're not that are working in
35:33 - dollars divided units are also very
35:36 - important when working with data but
35:39 - maybe yeah so um but we're working in
35:44 - some currency unknown to us here but
35:47 - this person you know maybe in your zero
35:51 - they spent three thousand in their
35:53 - currency then the second year three
35:55 - thousand five so they went up a little
35:57 - bit that that second year and you know
36:01 - that spending that they're doing on
36:03 - coffee ranged between twenty nine
36:05 - hundred and three thirty one hundred
36:08 - awesome so I'm gonna run this code just
36:13 - to see the resulting plot and I'm
36:18 - actually just gonna quickly do something
36:20 - you won't have to worry about just an RN
36:22 - so I can get our checkmark to go off
36:24 - amazing and now we need to go ahead and
36:31 - change the focus of our plots by calling
36:35 - the PS Vita access function and so I'm
36:38 - gonna say okay I'll take that axis and
36:40 - the check point here is saying modify
36:43 - our plot so that our x-axis goes from 0
36:47 - to 12 and so what this will do is it's
36:51 - going to expand our x-axis out one more
36:55 - unit to the right so now we see us going
36:58 - from 0 to 11 if I update update the axis
37:04 - or 4 to 12 were to go out one more and
37:07 - so as a reminder we need to pass into
37:09 - the PLT to access functionalist and
37:11 - we're going to put 0 as the first number
37:15 - and 12 is the second so this is saying
37:18 - let's take our x-axis to go from 0 to 12
37:21 - and then the checkpoint says the y-axis
37:25 - should go from 2900 to 3100 so I'm gonna
37:29 - do
37:30 - 2900 to 100 and I'm gonna run the code
37:37 - here um and you'll see our y-axis is now
37:43 - going just for 2900 to 3100 um and you
37:47 - if you saw beforehand and I'm not sure
37:49 - going to take it out so we can just
37:50 - quickly compare so if I take out this
37:52 - line and I run the code we're still only
37:59 - really showing from 2100 to 3100 but
38:01 - there's a little bit of room like above
38:03 - below those numbers but when I've on and
38:07 - this code now we're doing a hard stop at
38:09 - 2900 and 3100 so we're not seeing
38:12 - anything above 3100 and nothing below
38:15 - 2900 and then similarly I'm just gonna
38:19 - expand this I'm on the x-axis we do a
38:22 - hard stop at 0 nothing below and we're
38:25 - going up to 12 now which we weren't
38:26 - showcasing before on our plot and maybe
38:30 - 1 we want it to add 12 to kind of ponder
38:33 - or maybe question to someone looking at
38:35 - this plot to say what does this person
38:37 - think is going to happen next year do we
38:40 - think that their spending is going to go
38:43 - up or go down when you kind of have that
38:45 - area to like think about it it makes a
38:48 - little bit easier to postulate or to
38:50 - guess what might happen so my guess
38:52 - would be that um this person is going to
38:57 - be spending a little bit more on their
38:59 - coffee and your 12 than they did in your
39:02 - 11 but who knows right just just my
39:05 - guess so now I'm sorry what if the
39:14 - y-axis value is in millions and you have
39:18 - to write it in empowers is that possible
39:23 - so if the data on your y-axis and the
39:29 - second question is in millions you can
39:33 - express that in a few different ways so
39:36 - you could write out let's say right
39:38 - instead of 3,000 this person spent 3
39:41 - million
39:42 - you could write three million out this
39:46 - way there are other ways to express
39:49 - large numbers in Python so we could do
39:54 - um and my I'm gonna try and remember how
39:59 - to do this in a little while but I could
40:01 - do maybe like three um okay you do three
40:07 - times and we could do ten to the I think
40:12 - 10 to the 6 is a million no 10 to the 6
40:17 - maybe um so this would be another way
40:21 - that you could do it so if you're
40:23 - working in cyclic notation which is
40:24 - typically something that a lot of you
40:27 - researchers might work in or if you're
40:29 - you know work in the sciences you might
40:32 - be familiar with this format where you
40:33 - express numbers as like some multiple of
40:37 - 10 to a power we could just change the
40:39 - data to be like that and that would be
40:41 - fine so here we're saying let's take 10
40:44 - to the 6th power which i think is a
40:48 - million but I could be wrong I'm gonna
40:51 - go look at your right and then we just
40:55 - multiply that by 3 to get 3 million um
40:57 - so you could have all your data
40:58 - formatted like this and your plot will
41:00 - look just fine now if I go and run this
41:02 - now the placer looks very weird because
41:04 - this one data point Oh see okay this is
41:09 - actually a great situation you brought
41:11 - up so I change this value enough to 3
41:13 - million but my plot still only goes from
41:17 - 30 120 100 why is that that's because we
41:20 - set those axes explicitly I'm on line 9
41:24 - here so even though that I have this Y
41:27 - value of 3 million we're not showing it
41:30 - because it's outside the scope of our
41:32 - plot because we're only going between
41:34 - 2930 or 100 but you can see that the
41:38 - plot is coming down from a very high
41:40 - value it looks like a vertical line
41:43 - because we're going straight up we're
41:46 - going straight up a lot so if I were to
41:50 - remove that peel team to access call I'm
41:52 - wondering what it look like
41:54 - yeah we basically just see a
41:56 - flatline afterwards because um that for
42:00 - his values so is so large so great
42:02 - question so this is really useful if you
42:05 - have a lot of like outliers in your data
42:07 - yes yes um yeah outliers are a whole fun
42:12 - topic that I would I can go on a long
42:17 - time about um and just like yeah a Liars
42:20 - are just essentially data points that
42:22 - right um or like outside maybe the the
42:25 - normal range of your of your other data
42:27 - so in this case if someone spent 3
42:30 - million on coffee for a year that would
42:33 - definitely be an outlier um in in this
42:37 - data set ah just because other years
42:39 - they're spending around 3000 so maybe if
42:42 - we're doing an analysis we want to throw
42:43 - out that the extra large number and
42:46 - ignore it or maybe there's some
42:48 - interesting insight with it and data
42:50 - visualization is can be a tool to help
42:52 - us see where we have outliers in our
42:54 - data so I'm just another cool thing you
42:57 - can do with data vis yeah yeah and if
43:00 - there's any other questions that people
43:02 - have definitely throw them in the chat
43:04 - we love the questions we're here to help
43:08 - out answer anything on your mind all
43:10 - these data vis or two line graphs and
43:13 - plotting yeah so don't be shy
43:17 - and I'm gonna go now and pass it back
43:21 - over to Alex for our next exercise okay
43:27 - so now we're going to go into labeling
43:30 - the axes and so one thing you might have
43:32 - noticed with the graphs that we've
43:34 - created is and we understood the data
43:36 - and what was happening on the x axis
43:38 - versus y axis because we talked about it
43:41 - but if we were to present these graphs
43:43 - to someone without any context that
43:45 - could be really confusing so that's why
43:47 - it's important that we learn how to
43:48 - label the x axis the y axis and even
43:51 - title our entire graph so we're gonna
43:54 - actually talk about how we can do that
43:56 - and in order to label the x axis and the
43:59 - y axis we're going to use poto x label
44:03 - and PLT why label and if we want to use
44:06 - the title that's going to be PLT that
44:08 - title
44:09 - one thing that you have to note is when
44:12 - you're titling these you're going to
44:15 - need to use a string all of them require
44:17 - a string if you don't use them you're
44:19 - going to end up with an error and so
44:22 - like we've discussed in previous lessons
44:25 - when you use a string you can contain
44:28 - that set of characters in either a
44:29 - single quote or a double quote it's up
44:32 - to you which one but you have to be
44:34 - consistent so if you start off your
44:36 - string with a single quote and end it
44:38 - with a double quote you're gonna run
44:40 - into an error so just make sure you keep
44:42 - that syntax in mind so let's take a look
44:46 - at an example of us labeling our axes
44:49 - let's say someone's been keeping track
44:51 - of their happiness on a scale out of 10
44:54 - throughout the day and wants to display
44:56 - this information with labeled axes we
44:58 - can use the following commands so let's
45:01 - kind of take a look a little bit into
45:02 - this snippet of code so we have a we
45:07 - have a list of hours and we can see that
45:10 - it spotted a few different points on
45:12 - here and we have another one of
45:13 - happiness so those are gonna be the two
45:15 - pieces of data we're gonna plot so the
45:18 - first thing that they do is peel t dot
45:20 - plot and we're gonna have it be hours of
45:22 - verse happiness so ours is gonna be on
45:24 - the x-axis and happiness is going to be
45:26 - on the y-axis and now we're gonna label
45:29 - it so in order to do our X label what we
45:32 - do is peel T dot X label and then we
45:35 - open up a bigger parenthesis and we put
45:38 - the string that we want the label to be
45:40 - inside of it so you can see our X label
45:43 - is going to be time of day then we have
45:45 - our Y label once again it's peel T dot y
45:48 - label in parentheses happiness rating
45:51 - out of 10 and then we have our title my
45:53 - self-reported happiness well awake and
45:56 - then once we do that then we can do PLT
45:59 - dot show in order to show our graph so
46:03 - right here is the result of the graph
46:05 - from the code snippet above so you can
46:08 - see it's a lot easier to understand
46:09 - what's happening with our data we have
46:11 - our time of day we have our happiness
46:13 - rating and we even have a title for our
46:17 - plot so this is just a lot easier so now
46:20 - you can take this graph you can show
46:22 - people and they can
46:23 - Stannis without you having to so much
46:26 - explain each of the labels each of the
46:29 - axes so now let's try it and add some
46:31 - labels to plots of our own so let's take
46:36 - a look we're going to label the x-axis
46:38 - time in this so if we take a look at our
46:42 - data right now we can see that we just
46:44 - have our data isn't really labeled as
46:46 - something before our our lists were
46:50 - labeled things like days of the week and
46:52 - money spent this we're just using X&Y
46:56 - so if we were to plot this we really
46:58 - wouldn't know what this data is trying
47:00 - to show what would we should get from
47:03 - this data so that's why we're going to
47:05 - actually label our axes so the first
47:07 - thing is we're going to do is label the
47:09 - x-axis time so we're gonna start this
47:12 - PLT dot let's see if to check that one
47:17 - more time X label so we're gonna write
47:20 - down X label I'm gonna open up that pair
47:22 - of parentheses and then as a string I'm
47:24 - just gonna write tied in here okay so
47:27 - let's run our code and we can see
47:30 - automatically since we're already
47:31 - showing our plot if we take a look at
47:34 - our graph over here on the right and
47:37 - look at our x-axis we can see in the
47:40 - middle we have that label time great so
47:44 - now let's go into the next one and it's
47:46 - going to be dollars spent on coffee I'm
47:50 - so glad we're back with this expensive
47:52 - coffee data and it is dollars in this
47:57 - lesson really really must be a coffee
48:01 - caffeine lover okay so we're gonna write
48:06 - this in dollars great so I'm gonna run
48:13 - this code and we can see it
48:15 - automatically updated so we can see on
48:17 - our y-axis we see dollars spent on
48:19 - coffee so now we have a better
48:21 - understanding of the two pieces of data
48:22 - we're looking at and finally we're gonna
48:25 - add a title to our graph so that's going
48:29 - to be peel t dot title once again
48:33 - parentheses and then has a string
48:36 - my last 12 years coffee drinking so
48:45 - let's run this and we can see right at
48:48 - the top we can see that label we just
48:50 - created my last 12 years of coffee
48:52 - drinking so I always think it's super
48:55 - important to label your maxi's and my
48:59 - own suggestion is that as you go through
49:01 - the lessons definitely get practice
49:02 - always adding these labels to your
49:04 - graphs and I think it's going to come in
49:07 - handy when you start creating them on
49:09 - your own okay so I'm going to actually
49:12 - now cast the soft end so we can go into
49:14 - our next lesson and I will quickly
49:20 - follow up to say that labeling your axes
49:23 - and putting a title on your plot is one
49:25 - of the simplest ways to make your data
49:28 - visualization more effective I can't say
49:33 - how many times I've either been looking
49:36 - at like someone's data visualization and
49:38 - they were missing one of those things
49:39 - and it was unclear to me whether you're
49:41 - trying to communicate or maybe I
49:44 - prepared something and I forgot to add
49:46 - that label and it made it harder for
49:49 - someone to interpret when I was trying
49:51 - to get across um and so I think you
49:54 - should always always always try and just
49:57 - put axes labels and a title on your on
50:01 - your physicians it's just like an easy
50:03 - win um and everyone who looks at the
50:07 - visualizations you create well thank you
50:09 - so something to always keep in mind
50:14 - definitely agree so this next section
50:20 - and actually before we jump into this
50:21 - there was one other question I saw in
50:24 - the chat um
50:27 - someone was asking um I believe it was
50:31 - Siddharth was asking about creating an
50:35 - access object or an access object and
50:38 - and using that to create subplots which
50:40 - kind of leads us into this subplot
50:41 - section and what I want to basically say
50:46 - on this is that there are multiple ways
50:47 - to create or manipulate your plot
50:51 - with my public um so there's different
50:53 - techniques for kind of organizing your
50:57 - figures and making changes and no one
51:00 - way is right so we'll show you one
51:05 - example today of how to work with
51:06 - subplots there are other ways of doing
51:10 - these kinds of visualizations where we
51:13 - have multiple plots together but this is
51:15 - just one one technique and so it isn't
51:17 - necessarily the right technique it's
51:18 - just one so subplots are a really cool
51:24 - feature matplotlib they're also a point
51:26 - of frustration I think for a lot of
51:28 - people and can be confusing and so we're
51:31 - gonna try and break it down here today
51:33 - before we sew what's up let's allow us
51:40 - to do is they let us display two or more
51:43 - plots side-by-side on different sets of
51:47 - axes rather than just together on the
51:51 - same plot so beforehand when we were
51:53 - looking at maybe revenue and costs it
51:56 - made sense for us to have them on the
52:00 - actual same plot they want to see them
52:04 - together but maybe we want to have just
52:09 - multiple graphs all next to each other
52:11 - and compare them that way and that's
52:13 - what subplots allows us to do and when
52:17 - we create a data visualization that has
52:21 - um multiple slots on it with multiple
52:27 - sets of axes for each set of data we
52:29 - call each of those a subplot and all
52:32 - those subplots together make up one
52:35 - figure so the figure is the overall area
52:37 - or the overall data visualization and
52:40 - each of the subplots are those
52:42 - individual plots are creating so we look
52:45 - at this example that we have here on the
52:47 - Left we can see the figure is this whole
52:50 - image so that whole image right here
52:52 - that I'm moving around that is our
52:55 - figure and on the figure we have six
52:58 - subplots so this would let us showcase
53:01 - six
53:01 - different axes that we're gonna be
53:03 - plotting on and you know I've seen a lot
53:08 - of subplots actually very recently um
53:12 - for looking at copán 19 data and so in
53:18 - certain countries they're trying to look
53:20 - at cases like on a regional basis I'm
53:22 - and seeing how those cases are changing
53:24 - over time on a regional basis and some
53:27 - seen tons of subplots where maybe if
53:28 - you're in the US
53:29 - you see um cases um over time for a
53:34 - bunch of different states so you know a
53:36 - 1-1 supply you have New York another you
53:39 - have Mississippi another you know
53:41 - Florida I mean you're able to kind of
53:42 - see how cases are changing over time
53:45 - amongst those different states and so if
53:47 - you're in another country it could be by
53:48 - you know the region within your country
53:49 - or even comparing countries together you
53:52 - can have one country for each subplot
53:54 - showing those cases so it can be really
53:56 - helpful when you're trying to draw
53:57 - comparisons and so and this is an
54:01 - example that we have here we have six
54:08 - subplots and the way that they're
54:09 - organized is um we have them as a two
54:18 - rows and three columns so that enables
54:25 - us to have six plots and that was just
54:27 - by my choice we can have different
54:29 - setups where it doesn't it can be maybe
54:31 - just two rows and two columns or two
54:33 - rows in one column and to just show you
54:35 - a few examples I'm going to quickly jump
54:37 - over to this presentation all right doc
54:41 - that I have to show you some different
54:43 - examples so if we wanted to create um a
54:47 - visualization where we just have two
54:50 - plots
54:51 - um one on top of another we could create
54:55 - one that looks like this
54:56 - and this would be a two row 1 column
54:58 - supply the inverse of that would be a
55:03 - one row two column subplot so now we
55:07 - just have one row with two plots or we
55:09 - can create a two row 2 column subplot
55:12 - where we're gonna have the room for for
55:14 - four subplots
55:16 - so those are just a few different
55:17 - varieties of surplus that we can create
55:20 - and the way that we create these is with
55:24 - the PLT the subplot command and to
55:30 - create these subplots we have to give a
55:33 - few different pieces of information as
55:36 - arguments to appeal to that subplot the
55:39 - first argument is a number of rows of
55:41 - subplots and the second is going to be
55:42 - the number of columns so I wanted to
55:44 - create this 2 by 2 I would do to us the
55:47 - first argument to as a second argument
55:49 - if I wanted to create this 2 by 1 so two
55:53 - rows in one column I would do PLT that
55:55 - subplot with a 2 as my first argument 1
55:57 - it's the second argument and then lastly
56:00 - if I wanted to do 1 by 2 I would do um
56:03 - one row as or 1 as the first argument
56:06 - and choo as the second argument the last
56:10 - argument you give is the index of a
56:12 - subplot we want to create and the index
56:17 - could be a little tricky but essentially
56:19 - whenever we create a a figure with
56:22 - subplots there's a number system that
56:24 - gets created and so if we look at this
56:27 - example here with our six subplots the
56:30 - numbering goes from top left to bottom
56:32 - right so our first subplot is the one at
56:35 - the top left subplot number two is the
56:38 - one in the middle on the top and subplot
56:39 - number three is the one on the top right
56:41 - then we go down so plus four is the
56:44 - bottom left so plus five is the middle
56:46 - and subplot middle bottom and some
56:48 - plastics is at the bottom right
56:49 - similarly if I jump over to the other
56:52 - examples I have we see that numbering
56:54 - system goes from top left across then
56:56 - down and across so we have one two three
56:59 - four um and similarly if we just have
57:03 - two subplots it will go from top to
57:07 - bottom one two or if we just have two in
57:10 - this case we'll go one to two left to
57:11 - right so my best recommendation for
57:16 - getting control with this and we have to
57:17 - wrap up really quick shortly um so we're
57:20 - not gonna get to go um through too much
57:22 - of an example here but it's it just mess
57:25 - around and play with some plots um every
57:27 - time I jump back in
57:28 - to doing plotting with Python I always
57:31 - forget how some plots work I'm always
57:34 - confused I'm like what like what is this
57:37 - number mean like what is the subplot
57:39 - index like how do I create this um and I
57:43 - think this is true with sub loss and I
57:45 - think is sure with coding in general
57:46 - it's like just dive in and mess around
57:49 - take a look at the documentation and
57:51 - just you know start trying to create
57:53 - some plots and seeing what happens
57:56 - um and you can kind of just mess around
58:01 - with it so you get the right get the
58:03 - right answer so it looks just quickly
58:06 - look at this example and then we're
58:07 - gonna wrap up um we have two data sets X
58:10 - and y if I want me to create a subplot
58:13 - of one by two so that's one row two
58:16 - columns in the first position or index
58:20 - one I want to plot x and y with the
58:23 - color green so that's gonna create this
58:25 - subplot that we see here on the bottom
58:27 - left we're in the first position of a
58:31 - one row two column supply or two column
58:34 - figure then for our second supply we're
58:38 - still gonna be working on a one by two
58:40 - grid so we still have that one row two
58:42 - columns but now I want to make this plot
58:45 - and position number two which is going
58:47 - to be that second plot and this time
58:49 - we're going to do our plot and
58:50 - steel-blue
58:51 - so now we can see that that second plot
58:53 - is in that blue color if you're going
58:56 - ahead and following along I recommend
58:58 - going to play around with this exercise
59:00 - because it's a tricky one and it's a
59:02 - tough one but I think it's a fun one so
59:05 - we're not going to do it today here
59:07 - together but I recommend giving a shot
59:09 - on your own and letting us know comment
59:12 - on the video if maybe how that goes um
59:16 - but yeah we are all out of time now
59:19 - thank you so much all for joining us
59:23 - today to chat a little bit about data
59:25 - visualization and jump into creating
59:28 - line graphs I hope that was a lot of fun
59:31 - I know I enjoyed um and I recommend that
59:34 - you go and try and create some on your
59:37 - own yeah definitely keep going with this
59:40 - lesson and for pro members
59:42 - join me and I on Thursday we're gonna
59:44 - have another zoom session and we'll talk
59:46 - be able to talk a little bit more about
59:48 - what's been happening they can answer
59:50 - your questions and join us next Tuesday
59:53 - for the continuation of this path and
59:56 - I'm just gonna share my screen really
59:58 - quickly so definitely sign up for a coke
60:01 - Adam II account so you can keep up to
60:02 - date with different events that are
60:04 - happening if you're on the Codecademy
60:06 - main page and you scroll down you can
60:09 - see that the events section is right
60:11 - here and you can take a look at the
60:13 - different events that are happening so
60:15 - we could see here's our event today over
60:18 - here is the event for Thursday and then
60:20 - we have just continuing on always check
60:23 - back and register them that way you can
60:26 - stay up to date with what events we're
60:28 - doing and thank you so much for joining
60:30 - us today it was really awesome being
60:33 - able to go through this yeah definitely
60:37 - everyone come back on Thursday here
60:39 - co-member for our free members we'll see
60:42 - you again next week we'll continue going
60:45 - through the past thank you all so much
60:47 - for joining us today and have fun out
60:51 - there doing some coding and