00:00 - theory we're live i think we'll wait a
00:02 - couple of seconds just to confirm but
00:04 - hello everyone if you're out there
00:06 - um i guess we'll go ahead and get
00:08 - started cause i'm pretty sure we're live
00:09 - um
00:10 - my name's alex uh this is another
00:12 - edition of what are we what are we
00:14 - calling this do you want creative coding
00:15 - with codecademy
00:17 - um co academy live series for creative
00:19 - coding that's what i've been calling
00:22 - cool well yeah this is our sixth session
00:24 - um
00:25 - juwan has been leading all of all of
00:27 - them so far but for the next two
00:28 - sessions i'm going to be leading them a
00:30 - little bit
00:30 - um i have to warn folks that all of my
00:33 - projects are going to be
00:34 - about a hundred times less creative than
00:36 - jiwan's jion i've been so impressed by
00:38 - like uh
00:39 - you're coming at this really from the
00:41 - creative coding
00:42 - artist angle um and i actually think my
00:45 - sessions are going to be
00:46 - slightly different in having limited
00:49 - creative capabilities but uh kind of
00:52 - focusing on programming fundamentals
00:55 - i'm hoping throughout the series i can
00:58 - maybe give you a little bit of like oh
00:59 - what if we do this sort of suggestions
01:02 - yeah for sure um i guess has a little
01:04 - bit of background in
01:05 - in setup of what we're doing today um i
01:08 - used to be a high school teacher
01:09 - i used p5 in the classroom and in
01:12 - addition to
01:13 - using p5 to make really amazing pieces
01:16 - of art and do creative coding like g1
01:18 - has been doing
01:19 - i think p5 is an awesome tool just to
01:21 - teach programming fundamentals
01:23 - so today uh today's session is going to
01:25 - be all about object-oriented programming
01:27 - what is a class what is an object how
01:29 - can you start to think about designing
01:31 - your programs in an
01:32 - object-oriented way um i think what's
01:35 - especially cool
01:36 - is that i'm not even really a um
01:40 - web dev guy like i don't know
01:43 - javascript that well i cert i certainly
01:45 - don't know css that well
01:47 - um so even though p5 is
01:50 - uh javascript based um again the things
01:53 - i really want you to focus on as you're
01:55 - watching this session are the
01:57 - the fundamental concepts because these
01:58 - concepts are going to translate to
02:00 - java or python or javascript like we're
02:02 - going to see today
02:03 - um but it's the concepts that are
02:06 - important not necessarily the syntax
02:08 - um so going into that again uh g1 as
02:11 - someone who
02:12 - has way more javascript experience than
02:14 - i do i'm sure i'm gonna be doing things
02:15 - today that are
02:16 - like not super official or
02:20 - javascript style or it's going to be
02:21 - it's going to be weird right um
02:23 - so maybe i can even learn a little bit
02:25 - from you today if you want to call out
02:26 - like hey that's not how you
02:27 - you know declare a variable or you're
02:30 - forgetting all of your semicolons what
02:32 - are you doing
02:32 - um i will try but also i do have
02:36 - you know like i think if it works it
02:38 - works
02:39 - i think one of the beauties of using
02:40 - v5.js is that you know you don't have to
02:42 - be too bogged down on the little
02:44 - syntaxes and like
02:45 - you can really use it to try out um you
02:48 - know computer science concepts that
02:49 - might not be
02:51 - not may not have given you that visual
02:53 - click but that the p5.js will give you
02:55 - that
02:56 - and we'll get to see some of that too
02:58 - today exactly
02:59 - um i see we have the chat open um i want
03:02 - to definitely make this as interactive
03:04 - as possible i have kind of an outline of
03:06 - what uh we want to what i want to build
03:07 - and what i want to show off but there's
03:09 - a lot of different ways that we can
03:10 - experiment and go in different
03:11 - directions
03:12 - so as i'm doing this feel free to
03:15 - ask questions or make suggestions or
03:19 - experiment along with me um finally last
03:22 - thing to say before getting started is i
03:24 - will post solution code in the
03:26 - youtube description basically the code
03:28 - that we end up with i'll post in the
03:29 - youtube description
03:30 - after the fact so if you're watching
03:31 - this in the archives um go ahead and
03:33 - check the description if you want to
03:35 - see if you want to have access to the
03:36 - code that we ended up
03:38 - cool okay so let me give a brief preview
03:41 - of
03:42 - kind of what we're going to aim for
03:43 - again i doubt we'll end up with
03:45 - exactly this but uh this
03:48 - is an idea of what we're aiming for so
03:52 - it's uh falling rain drops here and the
03:55 - key piece of insight here is that
03:57 - each of these raindrops is a different
04:00 - object
04:01 - so we'll talk about what that means what
04:03 - an object means
04:05 - what a class means all that kind of
04:06 - stuff but this is around what we're
04:08 - going to be aiming for so
04:11 - i'm going to stop that i'm going to come
04:13 - over here and
04:15 - open up a blank p5 canvas
04:18 - and what i want to do before getting
04:21 - into object oriented programming
04:22 - is first doing something similar not
04:25 - object oriented so kind of
04:27 - following uh things that we've been
04:29 - seeing with juwon
04:30 - um doing some of our basic p5
04:32 - functionality that you should know by
04:33 - now if you've
04:34 - if you've followed this series and do it
04:36 - in a non-object-oriented way
04:38 - so first thing that i want to do is let
04:41 - me just
04:42 - set up a a single ball that
04:45 - is going to be falling and so to do that
04:47 - i'm going to set up
04:48 - some variables for the ball's position
04:52 - so i'm going to put the ball at 100 in
04:55 - the x direction
04:56 - and let's say 200 in the y direction
05:00 - and let me draw that ball
05:03 - at x y and let's make the radius
05:05 - something like 20.
05:07 - just make sure that that works cool
05:09 - there's our ball
05:11 - to make the ball move to make the ball
05:12 - move what i need to do is i need to
05:14 - start
05:15 - modifying this x variable in the draw
05:18 - function
05:18 - so again a little bit of a recap the
05:21 - draw function
05:22 - gets called again and again and again in
05:24 - e5 where
05:26 - um i think i think it by default it gets
05:29 - called
05:29 - 60 times per second so in the draw
05:33 - function if i say x equals x plus one
05:38 - this ball is going to uh move in the x
05:40 - direction so it's actually not even
05:42 - going to fall it's going to move
05:43 - horizontally
05:44 - and when it gets to the edge of the
05:45 - screen it's just going to keep going
05:47 - right
05:48 - you can imagine this x variable it
05:49 - started at 100
05:51 - it reached 400 eventually and then it
05:54 - went above 400 so it's at 500 now maybe
05:57 - up to 600
05:59 - which might be something that we want to
06:01 - change so
06:02 - i can actually do a little bit of a
06:03 - trick here i can use some mod
06:06 - arithmetic to say x equals x plus one
06:10 - mod 400. if you want i think you might
06:13 - have
06:14 - talked about this a little bit in some
06:15 - of your sessions but
06:17 - how does how does this mod work and why
06:19 - does this kind of help the ball
06:20 - reset back to the uh the start of the
06:23 - screen
06:24 - yeah we looked at modulus in our last
06:26 - two sessions
06:28 - the first time we mentioned that was
06:29 - during the generative art tool a creator
06:33 - project and we also use the last class
06:35 - of that class last session
06:37 - when we're creating the digital
06:40 - sculptures but basically what modulus
06:42 - does is that
06:43 - it takes the operand on the left side of
06:45 - the symbol
06:46 - and then divides it by the operand on
06:48 - the second on the right side of the
06:50 - symbol so in this case
06:51 - the first time when it um lows will be
06:53 - when um
06:54 - the left offering is 101 and it will
06:57 - divide it by 400
06:59 - and what will return is the remainder of
07:01 - that division
07:02 - so basically what modulus are generally
07:05 - used for is if you
07:06 - have um if you want to limit a range
07:09 - like in this example the way that alex
07:11 - is using
07:11 - so they will ensure that whatever that
07:13 - first operand the first
07:15 - number may be it will stay within 100
07:18 - and
07:18 - 399 actually because if it's 400
07:21 - it will fit into 400 by once and the
07:23 - remainder will be zero
07:25 - another way that you can use um up
07:27 - modulus is to basically fit
07:29 - everything into a fixed number of
07:31 - categories so you can use it to do
07:33 - something like
07:34 - you know if you want to divide that into
07:36 - you know in this case it will be a
07:38 - little bit different but if you do
07:39 - modules by three then you can do
07:41 - one two three one two three one two
07:43 - three f for each step
07:44 - of that um ellipse moving um
07:48 - but one pixel at a time so you can do
07:50 - something like that too
07:51 - and doing the categorization is actually
07:53 - the one the thing that we use modulus
07:55 - for in
07:55 - our two previous examples so actually
07:57 - this is a really great
07:58 - new um way of using modulus
08:03 - cool yeah and i want to give a little
08:04 - demo here as you were explaining it we
08:06 - can even see if i change this slightly
08:08 - x is now going to continue to increase
08:10 - so if i log x
08:12 - here in the console you'll see there's
08:15 - my x increasing
08:16 - and i never actually change x to be
08:19 - below 400
08:20 - but what i do is i draw x
08:23 - at whatever x is so at this point it's
08:26 - up to 700 800
08:27 - but then i mod it by 400 so that's going
08:30 - to keep that range in between
08:31 - 0 and 400. so uh this is a nice little
08:35 - little trick that as you're developing
08:38 - uh your program
08:39 - um i see sunita asked a question of this
08:41 - can you give us some tips
08:43 - this is a really useful one of basically
08:46 - use print statements to
08:48 - investigate what your variables are
08:50 - doing if you have a bug
08:52 - oftentimes printing something out taking
08:54 - a look at what these variables are is a
08:56 - really good
08:56 - way to see what's going on um
09:00 - i'm going to change this back to keep
09:04 - uh to keep x between 0 and 400 um
09:08 - just for ease i mean again as you're
09:11 - saying g1 like the output is really kind
09:12 - of the thing that matters there's a
09:14 - bunch of different ways to do this but
09:16 - now i know that x is always going to be
09:18 - between 0 and 400.
09:20 - cool um so this looks like one of the
09:23 - balls that we saw on our kind of
09:25 - completed version i guess it's moving
09:27 - horizontally and not
09:28 - um vertically but uh you know we just
09:31 - have to change the y
09:32 - the y variable in order to get them
09:34 - vertically um
09:35 - this isn't quite object-oriented
09:37 - programming yet and in fact
09:39 - let's modify this now so rather than do
09:42 - only having one ball let's set up a
09:45 - hundred volts
09:47 - and so i'm gonna take these same ideas
09:48 - and i'm going to say okay rather than
09:50 - just having a variable for one ball an x
09:53 - variable and a y variable for one ball i
09:55 - need to have
09:56 - 100 variables for each of those things
09:58 - and one thing that i could do is i could
10:00 - list out 100 variables right i could
10:03 - have let
10:04 - x2 equals 150 and then i could tell it
10:07 - to draw
10:08 - at x2 um that obviously
10:11 - is gonna take some time and probably
10:13 - something we're not interested in doing
10:15 - so another really fundamental um idea in
10:18 - computer science
10:19 - is we're going to use uh g1 in in
10:22 - javascript is it
10:23 - called a list or an array an array
10:26 - okay cool so uh we're going to use an
10:29 - array
10:29 - with in python they're called lists uh
10:32 - in java they're called arrays as well
10:33 - um but we're going to use an array which
10:36 - is going to hold 100
10:37 - variables for us i'm going to actually
10:40 - do something a little bit new here
10:42 - in order to populate this list with a
10:45 - hundred different values
10:47 - i'm first going to use a for loop so
10:51 - again don't re if you're not familiar
10:53 - with for loops here
10:55 - don't really worry about what i'm doing
10:58 - um again the the idea here is that i'm
11:00 - just populating
11:02 - this list or this array with a hundred
11:04 - different values
11:06 - and again that's yeah we have tons of
11:08 - courses on what four leaps are how to
11:10 - get comfortable with them
11:11 - but not really the core thing that we're
11:14 - interested in
11:14 - for this exercise um for this exercise
11:17 - we're eventually going to look at
11:18 - object-oriented programming
11:20 - okay so let me
11:23 - add to my arrays here i'm going to add
11:26 - to the x-array i'm going to do
11:28 - x dot is it push g1
11:31 - yes uh adding to an array in javascript
11:33 - cool so
11:34 - push if i put in 10 here
11:37 - uh and let's do y dot push
11:40 - um i'll actually put in 100 and
11:44 - 200. i'm going to put in
11:48 - well let me even change these values uh
11:51 - i'm going to put 500
11:55 - i'm going to put the value 500 into my x
11:57 - array
11:58 - 100 times this loop is going to happen
12:00 - 100 times i'm going to keep putting the
12:01 - same number in again and again and again
12:04 - i'm going to put the number 200 in the y
12:06 - array
12:07 - 100 times i'm then going to
12:11 - rather than draw just one array
12:14 - or just one ellipse i'm going to
12:19 - uh draw a hundred of them so i'm going
12:22 - to put this code that i had
12:24 - before in a loop
12:28 - and now rather than drawing the ellipse
12:31 - at
12:31 - x if i do this this is likely going to
12:34 - crash it might do something weird but we
12:35 - can take a look at what it does um
12:38 - cool yeah so the other thing
12:41 - alex your x is starting at 500 and your
12:44 - canvas is 400.
12:46 - good call let me start that at 300 then
12:51 - and let's also see what else is going on
12:54 - it says ellipsos expecting number
12:56 - for parameter but it did not get that oh
12:59 - well
13:00 - the other thing that you're not doing i
13:02 - guess is you're not using
13:03 - an element inside the array you're
13:05 - refreshing the whole
13:06 - excellent x array and whole y array
13:09 - yep exactly so here before when we ju
13:12 - when
13:12 - x was storing just a number this worked
13:15 - because i could plug in my number for x
13:17 - and i could draw my ellipse at 100 or
13:19 - whatever x was
13:20 - now what i'm saying what i'm saying
13:21 - right now is draw my ellipse at
13:23 - x and x is this array that has a hundred
13:26 - numbers in it
13:28 - uh this function this ellipse function
13:30 - has no idea what to do with that
13:32 - um with that hundred um
13:35 - elements so instead what we wanna do is
13:37 - we wanna say
13:38 - let's draw our ellipse at the ith
13:42 - element so the first time
13:45 - and i'm gonna do that for all of these
13:48 - the first time
13:49 - this loop um happens
13:53 - we're going to grab the element at
13:56 - the zeroth position of the array the
13:58 - second time the loop happens we're going
14:00 - to grab the element at the first
14:01 - position of the array again loops are
14:04 - not
14:04 - the main focus of uh of this session so
14:08 - if that's confusing um i would say
14:11 - largely don't worry about it we're going
14:13 - to kind of breeze through that and get
14:14 - to object oriented programming in a
14:16 - second
14:16 - but that's the idea of we're going to
14:18 - grab
14:19 - each of our 100 100 different elements
14:23 - one time and we're going to draw an
14:24 - ellipse
14:25 - and g1 what do you expect to happen now
14:28 - if we
14:29 - uh if we run our code we should see
14:32 - all hundred ellipses appear in the exact
14:35 - same spot and move
14:36 - exactly at the same time yep exactly
14:40 - they're all going to be
14:41 - right on top of each other because they
14:42 - all have the exact same
14:45 - x and y dimensions so this is another
14:48 - kind of little new thing that i want to
14:50 - introduce
14:51 - in order to solve this we're going to
14:52 - use math.random
14:57 - and we're it's going to look even
14:59 - slightly more confusing than just
15:00 - math.random we're going to do
15:01 - math.random times 400. and i'll
15:04 - show you what that does in a second
15:07 - but before we do that let's take a look
15:08 - at um there we go
15:11 - there's our 100 different um
15:14 - bones so um here we're using the
15:18 - math.random function
15:19 - and that function is a vanilla
15:22 - javascript
15:23 - function what's called vanilla
15:24 - javascript meaning that it's a native
15:26 - javascript function but p5.js also has a
15:29 - random
15:30 - built-in function ah cool so you can
15:32 - just say random and
15:33 - inside of it you can give it well you
15:36 - can give it one
15:36 - argument which will be used for the
15:38 - maximum value you can also give it two
15:40 - arguments in there
15:41 - um two so you can define minimum and
15:44 - maximum point but in this case if you're
15:45 - going to do a random between 0 and 400
15:48 - you can just put in 400. cool that is
15:51 - way easier so
15:52 - this is now giving me a random
15:56 - random value between 0 and 400.
15:59 - random decimal number random decimal
16:01 - number so in fact
16:02 - let me print out um
16:07 - let me print out inside this for loop
16:11 - um uh console.log
16:15 - x of i so i'm going to be logging the
16:17 - numbers that are inside
16:18 - this x array and
16:22 - there they all are so there's my random
16:23 - decimal number between
16:25 - um 0 and what is it 0 and 400 so you can
16:29 - see
16:30 - um this is what's currently in our array
16:36 - cool let me get rid of that statement
16:41 - i don't know how nerdy this is gonna
16:42 - sound it almost makes me
16:44 - this feels like watching like water
16:47 - particles
16:48 - move from one end of the hose to another
16:51 - end of the hose
16:52 - yeah or like when you're in the car and
16:54 - you're watching the water like to drip
16:56 - down the
16:56 - window yeah yeah
17:00 - cool let me take a peek at
17:03 - uh the chat what is object-oriented
17:05 - programming
17:06 - cool uh new username brb so
17:10 - that is what we are gonna get into right
17:12 - now so
17:13 - so far we've kind of done the goal
17:16 - right again let me show you what the
17:18 - goal is the goal is something that looks
17:20 - like this
17:21 - uh you know there's some color that we
17:22 - haven't added yet there's some size
17:24 - stuff that we haven't added yet there's
17:25 - some speed stuff that we haven't added
17:26 - yet
17:27 - but for the most part it's there right
17:30 - we have
17:30 - balls that are moving across the screen
17:33 - what we're going to now do
17:34 - is we're going to transform this into
17:37 - being object oriented
17:38 - which means that we're going to start
17:39 - thinking of each of these bonds
17:42 - as a specific object in our code
17:45 - so right now right now our code doesn't
17:48 - really have
17:49 - a a sense of object right we just have
17:53 - these giant lists of
17:54 - x positions and y positions and
17:57 - it's a little bit hard to i get
18:00 - you know uh object oriented programming
18:02 - is just a style of programming this
18:03 - obviously works but we're going to
18:05 - investigate what it means to
18:06 - build something through object-oriented
18:08 - programming um
18:11 - let me talk a little bit about what
18:13 - object oriented
18:14 - programming is first and then we're
18:16 - going to implement it using these
18:18 - uh these raindrops so
18:21 - the main idea of object-oriented
18:22 - programming is
18:24 - we're going to section off some of our
18:27 - code
18:28 - into attributes and f and
18:31 - methods or functions and so sometimes
18:34 - i like to think of these as the nouns
18:37 - and verbs the nouns and adjectives and
18:39 - verbs
18:40 - of an object so juwon what is something
18:43 - that is
18:44 - currently in your room let's do a little
18:46 - experiment
18:47 - of uh turning that thing into an
18:50 - object in object oriented programming
18:52 - i've got a plant
18:54 - okay cool so you've got a plant so if we
18:58 - were to
18:58 - uh represent a plant as an object in
19:01 - code
19:02 - we would want to think about what things
19:04 - belong to the plant
19:06 - and so again those are like nouns and
19:07 - adjectives associated with the plants
19:09 - and what can the plant do so those are
19:11 - the
19:11 - methods or the verbs associated with the
19:13 - plant
19:14 - so i wish i had some some pet in the in
19:17 - the room right now something that has
19:19 - more dynamic action but
19:21 - yeah has more verbs well so so the verbs
19:24 - in p5 are going to be a little bit
19:26 - strange because it's going to be like
19:27 - display yourself um which i suppose you
19:29 - could say that the plant is doing where
19:31 - the plant is like
19:32 - exist yeah um
19:35 - but some like more obvious things i
19:38 - guess
19:38 - a plant could grow right that would be
19:41 - changing a certain attribute about it
19:43 - um let's talk about what are the
19:44 - attributes of a plant um what are some
19:46 - nouns or adjectives associated with your
19:48 - plant
19:48 - so it can have leaves more specifically
19:51 - can have
19:52 - number of leaves and then there will be
19:54 - also
19:55 - the height and the width of each of the
19:57 - leaf or the whole
19:58 - of the height and width of the plant
20:00 - itself as well
20:02 - there's also going to be things like
20:05 - does it have flowers can it have does it
20:08 - bloom
20:08 - does the plant bloom there's also gonna
20:10 - be colors
20:11 - things like um the color of the flower
20:14 - the color of the leaves
20:15 - that kind of things and you know if
20:17 - we're talking about the whole plan as an
20:19 - entity
20:20 - like what's the pot size that we need it
20:23 - could also be like a numeric number that
20:25 - will be an attribute for this particular
20:27 - plant that i have behind
20:29 - yeah that so that's a great example and
20:30 - i love that you gave me
20:32 - attributes that are all different data
20:34 - types right you had
20:36 - um some numbers how big is the pot how
20:38 - tall is it
20:39 - um you had some strings like what color
20:42 - is it you could imagine that being
20:44 - represented as a string or what is the
20:45 - name of the plant
20:46 - uh and then finally you add some boolean
20:48 - some things that are either yes or no
20:50 - right does this plant flower
20:52 - does this plant currently have flowers
20:54 - um
20:55 - things like that things that are either
20:57 - um
20:59 - yes or no so uh i'm gonna pose this
21:02 - question to the chat
21:03 - and i know chat is like 30 seconds
21:04 - delayed so we will have to uh
21:06 - we'll have to keep talking as they try
21:08 - to answer this question but
21:09 - thinking about what we currently have
21:12 - and again looking at
21:13 - our final output what are some of the
21:16 - attributes to these raindrops right what
21:19 - are the nouns and adjectives
21:21 - associated with these raindrops um
21:24 - i'll post that to chat and in the
21:26 - meantime
21:27 - g1 can you give me um
21:31 - can you give me a a noun or an adjective
21:34 - associated with these raindrops that you
21:36 - you think i haven't coded in yet like
21:38 - what else could we add to these
21:39 - raindrops that
21:40 - doesn't look like it's already there um
21:44 - i think that's not already there
21:49 - oh yeah okay this is difficult
21:53 - because we've already got okay i don't
21:56 - also want to think out loud a little bit
21:57 - because i feel like i'm going to give
21:58 - away the answer that we are expecting
22:00 - people to write on the chat
22:02 - um i think opacity could be one even
22:05 - though
22:06 - something is already related to that
22:09 - but i think also opacity could be
22:11 - calculated based on
22:13 - the size that could be actually really
22:15 - interesting you know make you can create
22:17 - like almost like a 3d effect of that i
22:19 - think
22:20 - yeah i think i i think that that the way
22:23 - that you were talking through that gave
22:24 - me an interesting thought of
22:26 - uh you can kind of tell the things that
22:27 - i haven't coded into these raid drops
22:29 - are the things that they all share
22:30 - so opacity are all the same right they
22:33 - they all
22:34 - are perfectly non-opaque um
22:37 - shape shape something that's also uh the
22:40 - same where
22:41 - uh every raindrop is a circle so that's
22:44 - an attribute that i'm not
22:45 - i'm probably not really keeping track of
22:47 - maybe all of these raindrops know that
22:48 - they're all circles but
22:50 - uh that would be a little bit silly if
22:51 - every raindrop in the world
22:53 - is a circle and they all know circles um
22:56 - so it's actually interesting because you
22:59 - kind of frame this as raindrops so i
23:03 - immediately thought oh like all of these
23:05 - should be circles but
23:06 - you know raindrops don't have to be
23:08 - squares if you're in minecraft it might
23:10 - actually be
23:11 - cute it's not not circles so
23:15 - yeah um other things i think we could do
23:18 - are maybe we could
23:19 - um do like individualized movement
23:22 - within it as well so
23:23 - you know we've got everything falling
23:25 - and it looks like they have different
23:26 - speeds of falling
23:28 - so different y speeds but i think we
23:30 - could also make it do like a little bit
23:31 - of jittery motions as well
23:33 - yeah and that's interesting because that
23:35 - kind of combines right now we're
23:37 - focusing focusing on just the attributes
23:39 - of
23:39 - what are the qualities of this object
23:41 - what are the nouns and adjectives
23:43 - associated with it but then
23:44 - falling is definitely a verb and so
23:46 - that's starting to like blend the two of
23:49 - maybe some of these raindrops have an
23:51 - attribute of like
23:52 - i'm a fast faller or i'm a zigzag father
23:55 - or something
23:56 - and then that affects how the fall
23:59 - method or function um gets uh gets calm
24:03 - or that that affects the verbs
24:06 - um cool well it looks like nobody is
24:09 - answering us in chat which is very sad
24:11 - but uh jivan do you wanna what are some
24:14 - of the attributes here that you think do
24:16 - exist for these raindrops
24:17 - so a really blatant one here is color
24:21 - right every raindrops have different
24:23 - colors and we also got different sizes
24:26 - and they've also got different x and y
24:29 - positions as well because
24:30 - they i assume they start off on
24:32 - different x position and the y position
24:34 - is actually individually kept track of
24:36 - it seems
24:37 - i've also got different rate of falling
24:39 - as well because i see some things
24:41 - that are kind of together at that moment
24:43 - in time when you keep looking at it
24:45 - one falls faster than the other or
24:47 - slower than the other depending which
24:49 - one you're
24:49 - focusing on so i think those are the
24:52 - main things i see
24:54 - cool so let's go and write that down
24:56 - over in
24:58 - uh the code that we're building so we
25:00 - had these are the attributes
25:02 - and oh man i don't even know how to draw
25:04 - yeah that's it yeah
25:05 - yeah um these are the attributes of a
25:08 - raindrop or that at least the ones that
25:09 - is already coded into our final
25:11 - final solution that uh uh that we were
25:13 - seeing there so
25:14 - we had yeah i saw myself just said size
25:19 - um we had an x position we had a y
25:21 - position
25:23 - we had a color we had a speed um
25:29 - i suppose yeah again like we had a shape
25:32 - even though they were all the same
25:33 - that's something we could consider
25:34 - adding
25:35 - um yeah i think that that is oh we had a
25:40 - yeah size is already in there okay cool
25:42 - so these are the
25:43 - um attributes
25:47 - of a raindrop cool
25:50 - how about uh actions
25:54 - or attributes i'm gonna again put
25:57 - noun slash adjective
26:00 - of a raindrop actions are the verbs
26:04 - that a raindrop can do um i see a
26:06 - question to chat what language this is
26:07 - currently in javascript using p5 which
26:10 - is
26:10 - uh this uh kind of visualization library
26:14 - that uh that javascript has
26:16 - um cool so what are the actions or verbs
26:20 - of a raindrop what can a raindrop do do
26:22 - you want
26:24 - they fall but they also
26:27 - um i don't know is it cheating if i go
26:29 - back if we go back to the other
26:31 - yeah we'll take a look it does seem like
26:34 - also when they go
26:35 - down they're coming back up as well sure
26:38 - so they like
26:39 - reset somehow
26:42 - um yeah because you can see uh yeah
26:45 - let's catch one at the bottom that blue
26:47 - one
26:47 - then pops up there um and you could even
26:51 - i
26:51 - i don't think i've coded this into uh
26:54 - into this solution code but
26:56 - you could imagine when they reach the
26:58 - bottom they have a new
27:00 - x position where they can like jump
27:01 - around but they reset
27:04 - there's also a comment actually came in
27:06 - from chat
27:07 - from archie and saying that there's also
27:09 - seems to be
27:10 - layers in the frame that's actually
27:12 - really interesting interesting
27:14 - right so that's like um what is that
27:16 - called like the z
27:17 - level right like how far forward or back
27:20 - um
27:20 - the object is well i think that's sort
27:23 - of like the
27:24 - way of thinking about it if these were
27:26 - individual each
27:27 - of those were like external elements for
27:29 - example but what is actually going on in
27:31 - here is because
27:33 - an ellipse is drawn one after the other
27:35 - so the topmost element or the topmost
27:38 - ellipse that's being drawn on this frame
27:41 - is the i
27:42 - element in the array actually right or
27:44 - the
27:45 - object in the array and then one that's
27:47 - going to be furthest back is the one
27:48 - that's drawn
27:49 - last in the draw loop so it is yeah
27:53 - yeah like this stacked effect but not
27:57 - on purpose if that makes sense yeah but
27:59 - i mean we could think about ways in
28:01 - which if we wanted
28:02 - if we wanted one ellipse to always be on
28:05 - top of the others we could think about
28:07 - ways that we could
28:08 - do that but yeah that would that is
28:10 - slightly trickier just based on how
28:13 - how drawing things on top of each other
28:15 - works in p5 where
28:16 - right what g1 was saying was the first
28:19 - ellipse that gets drawn in this for loop
28:21 - is going to be the one at the very
28:23 - bottom and then any ellipse
28:25 - that comes after that if they happen to
28:27 - overlap with that other ellipse are
28:28 - going to be on top
28:29 - um so that that is happening kind of
28:32 - as a side effect but we could think
28:34 - about how we how we might be able to do
28:36 - that um or how we might be able to code
28:37 - that into
28:38 - our object so like yeah that'd be fun
28:40 - actually
28:42 - is that called z what is that called z
28:45 - no i i i mean the css term is z
28:48 - index but in this case i would just call
28:50 - it layers okay
28:53 - cool um cool so
28:56 - let's think uh there's one more
28:57 - important verb very specific to p5 and i
29:00 - kind of hinted at this with the uh
29:02 - the plant but another thing that these
29:04 - raindrops are doing
29:06 - is they are displaying themselves right
29:08 - i could
29:10 - i could create these raindrops these
29:12 - raindrops could exist in the code
29:13 - all their variables could be changing
29:15 - and then i could just choose not to draw
29:17 - them
29:17 - uh we could see that if i i do this
29:21 - right now in in the non-object-oriented
29:23 - version of this code
29:24 - the displaying of it is kind of
29:26 - equivalent to calling this a lip funk
29:28 - ellipse function and so i just i just
29:32 - ran my code
29:33 - all of that stuff is happening in the
29:34 - background all of those
29:36 - um all of these values are changing the
29:40 - modulus is happening they're all staying
29:41 - between 0 and 400 but they're not being
29:43 - displayed
29:44 - and so that's kind of a weird
29:48 - uh verb or method of these uh
29:52 - of these raindrops that's not
29:53 - immediately obvious so display
29:56 - self um
30:01 - cool i one uh one thing that we could do
30:03 - that actually haven't built into this
30:04 - but
30:05 - we will try to do it if we have time is
30:08 - some sort of clickable event
30:09 - so um a raindrop could like detect that
30:13 - it's been clicked
30:14 - and then change color or do anything
30:17 - really
30:17 - so um it could like detect clicked
30:23 - it could almost be like a game it's like
30:25 - one of those like catch
30:26 - objects falling yeah for sure
30:30 - it can like yeah raindrop might be able
30:32 - to detect where it is and then if it's
30:35 - you know in the basket then you score a
30:37 - point or something so like
30:39 - um you know detect
30:42 - in basket could be a function that that
30:45 - could be a verb
30:46 - that a raindrop could do
30:49 - okay so this is kind of
30:52 - the outline of how we start to turn this
30:54 - into an object-oriented approach to
30:57 - coding this out
30:58 - and so now that we've kind of
31:00 - conceptualized it
31:01 - let's actually start building this out
31:03 - and the way that we do this
31:04 - is by building a class and
31:08 - uh let me actually even look at yeah so
31:11 - the way that you do this in
31:12 - javascript is i'm going to declare i'm
31:14 - going to build a class
31:16 - raindrop um
31:21 - in object-oriented programming the class
31:23 - is kind of like the blueprint
31:25 - of the objects that you're gonna make so
31:27 - in fact it's gonna be we're basically
31:28 - gonna kind of fill in the details
31:30 - of um of everything that we just talked
31:33 - about
31:35 - we're going to define this class this
31:37 - blueprint
31:38 - and then we're going to take that
31:40 - blueprint
31:41 - and make a bunch of objects we're going
31:43 - to make the raindrops themselves and
31:44 - make the raindrops um display themselves
31:47 - and make them
31:47 - make the raindrops move we're kind of
31:50 - going to
31:51 - first define the blueprint for doing
31:53 - this stuff
31:54 - and then we're going to put that
31:55 - blueprint into action and make real
31:57 - objects
31:58 - so that's kind of the distinction
31:59 - between a class and an object the class
32:01 - is the blueprint it's the setup it's
32:03 - what do what does it even mean
32:05 - to for a raindrop to exist and then the
32:08 - object
32:09 - is let's make a raindrop raindrop exist
32:12 - now
32:12 - the class is defined let's actually make
32:14 - one it's an instance of a raindrop
32:17 - so cool let's start by
32:20 - defining the constructor and g1 this is
32:24 - where um
32:27 - your javascript knowledge might uh come
32:29 - in handy
32:30 - i'm going to be defining all of my
32:33 - attributes
32:34 - inside i'm going to be defining and
32:36 - giving initial value to
32:37 - all of my um attributes inside the
32:40 - constructor is that typical or does the
32:42 - defining of the variable typically
32:44 - happen outside the constructor
32:46 - it should happen inside the constructor
32:48 - with the the
32:49 - the this that keyword which i'm sure
32:51 - you're going to get to
32:52 - but basically the constructor is also a
32:55 - method of the raindrop and it runs
32:57 - when that when an object of that class
33:00 - raindrop is created right
33:02 - so i think in a way it almost um is very
33:05 - similar to how the setup function runs
33:07 - within v5.js right
33:09 - it's it's running it will run one time
33:11 - only when the
33:13 - um an object of the raindrop class is
33:15 - created
33:16 - cool okay yeah so yeah the job of the
33:20 - constructor
33:21 - is to uh give these attributes
33:24 - initial values so we're going to create
33:27 - a raindrop and give them initial values
33:29 - so let me first list out all of these
33:32 - uh attributes that we want uh and give
33:34 - them a variable name
33:35 - and i'll talk about what this this dot
33:38 - word actually means
33:39 - but let's give these some variables uh
33:41 - so i'm gonna
33:42 - say x position this dot y position
33:46 - uh this dot color i'm actually gonna
33:49 - break into
33:50 - three variables i'm going to break into
33:52 - an r
33:54 - a g and a b a red
33:57 - a green a blue value so color is a
34:00 - little bit
34:01 - i mean we could do one we could do one
34:02 - variable but we're going to be able to
34:04 - do
34:06 - i guess more interesting colors if we
34:07 - break down three
34:09 - let me do this dot speed um
34:12 - and for now i'm going to pass on these
34:14 - i'm going to just say every raindrop is
34:15 - going to be an ellipse
34:16 - and so i don't need to build that into
34:18 - the class itself
34:20 - and uh i don't want to think about
34:22 - layering right now although i'm sure we
34:24 - could
34:24 - come up with something cool um if we
34:26 - have time or that's a that's a good
34:28 - extension if you want to play around
34:29 - flaring i think we
34:31 - are missing size oh good call yes this
34:35 - dot size
34:37 - do you want do you want to explain what
34:39 - this uh
34:41 - keyword means
34:45 - it's hard right it is a little bit hard
34:47 - but basically
34:48 - what this keyword does and this the
34:52 - the this keyword isn't just unique
34:55 - for um javascript only well it is
34:58 - javascript thing but it's not just for a
35:01 - object-oriented programming thing only
35:04 - you will also see this being referred to
35:06 - when you're doing a
35:07 - dom event or like a dom detection as
35:10 - well
35:11 - basically what that means is that this
35:14 - keyword indicates
35:15 - the particular instance of the xposed
35:18 - property or the attribute that belongs
35:20 - to that particular object
35:22 - so what that means is that if we create
35:24 - let's say three raindrop objects using
35:26 - the class raindrop
35:28 - the particular this within the blueprint
35:31 - will refer to
35:32 - that um the one specific
35:36 - one specific objects x position
35:38 - attribute y visual attribute and so on
35:41 - and it's commonly basically used to
35:44 - individualize these values or these
35:46 - properties
35:47 - per object that we're going to be
35:49 - creating yeah exactly so
35:51 - again we're going to be creating 100
35:53 - raindrops each one
35:54 - is going to have its own x position its
35:56 - own y position
35:58 - it's going to have its own each one of
35:59 - these attributes going to have its own
36:01 - one of those
36:02 - and this keyword we're going to be able
36:04 - to say
36:05 - i want to specifically look at that
36:07 - raindrops
36:08 - uh you know x position or that raindrops
36:11 - exposition and we need to know that
36:13 - those two x positions even though
36:14 - they're both
36:15 - named x position belong to certain range
36:17 - drops and so that's the idea behind
36:19 - this it belongs to this dot x position
36:22 - x pause belongs to a specific raindrop
36:25 - um cool
36:30 - yeah that this is always really tricky
36:32 - to conceptualize and i think it will
36:34 - become a little bit more clear as we
36:35 - start to
36:36 - start to make raindrops when we start
36:40 - actually use the blueprint
36:41 - but if you have questions about this
36:43 - definitely drop them in chat and
36:45 - hopefully by the end of this session
36:46 - um it will make a little bit more sense
36:50 - um cool so the constructor is almost
36:54 - done
36:55 - uh we've defined our variables we know
36:58 - what variables we want but the other job
36:59 - of the constructor is to give them
37:01 - initial value
37:02 - and so something that i'm going to do
37:04 - here is again use that random function
37:06 - i'm going to say whenever the
37:08 - constructor is called meaning
37:10 - whenever we make a new raindrop we are
37:12 - going to
37:13 - set its x position to a random value
37:16 - between
37:17 - uh 0 and 400. again i'm going to hard
37:20 - code in
37:21 - i'm not gonna hardcode in i'm gonna
37:23 - let's see
37:26 - i'm gonna say let the height of the
37:29 - screen is gonna be
37:31 - a thousand and let the width of the
37:34 - screen also be a thousand
37:37 - there's probably some i could probably
37:39 - do this in a different way like these
37:41 - are now
37:41 - global variables which i imagine are not
37:44 - super loved by everyone
37:46 - uh but we're just gonna roll with it so
37:50 - uh width oops
37:53 - width and height um
37:57 - and then this is gonna be width height
38:02 - um maybe just as a reminder you can also
38:05 - use the window width and window height
38:07 - global but the built-in variables to
38:09 - make it
38:10 - the exact size of your preview window as
38:12 - well um
38:14 - and also if you want to refer to width
38:16 - and height of the
38:18 - canvas itself you can also use the width
38:20 - and height
38:21 - built-in variables too so something
38:24 - that's a little bit weird there though
38:25 - is
38:26 - uh don't those variables only exist
38:29 - after setup has been called basically i
38:31 - want to use width and height
38:32 - inside this class you should be able to
38:34 - use that in there
38:36 - interesting okay let me okay let me back
38:38 - up then because that's definitely the
38:40 - better thing to be doing rather than
38:41 - setting up these
38:42 - um those variables that we don't need
38:46 - um i'm going to start by by hard coding
38:48 - in 400 and then let's play around with
38:50 - so you think i can just do with right
38:52 - you can it's just uh you might have to
38:54 - move the class definition at the end
38:57 - but i don't think you even need to do
38:59 - that because what it will do
39:00 - is that regardless of where your code is
39:02 - defined p5.js library will just
39:05 - look for a user defined setup function
39:07 - run that
39:08 - and then and then run everything else
39:10 - after but let's see
39:11 - what happens if you do that and then if
39:14 - not
39:14 - i know that you can do it it's just
39:16 - whether that class will have to be
39:18 - defined
39:19 - after the setup function in terms of
39:20 - line word in the line of code
39:23 - that might i'm a little bit faint on
39:25 - that
39:26 - okay cool yeah let's leave it like this
39:27 - for now it's going to be a second until
39:29 - we run our code anyways and if things
39:31 - break we know we can go back
39:32 - and hard code in 400 for now but that's
39:34 - something we can eventually
39:36 - um look at um for the colors
39:39 - uh i'm gonna do a random number between
39:43 - 0 and 255. um
39:46 - again i think g1 dropped a link about
39:48 - color
39:49 - uh in the chat you can look into how
39:52 - colors work but basically if this number
39:55 - ends up being high
39:56 - close to 255 then there's going to be a
39:58 - lot of red in my color
40:00 - if it ends up low closer to zero then
40:02 - there's going to be less red and same
40:03 - thing
40:04 - for green and
40:08 - and i guess uh uh could i do 256 i mean
40:12 - it really does not matter at all but
40:13 - uh is it i guess 255 is what we want
40:16 - here yeah
40:18 - cool um speed for now let's just say
40:22 - every raindrop has a speed of one and
40:25 - for now let's say every raindrop has a
40:27 - size
40:29 - of between one
40:32 - and one is gonna be really tiny let's
40:35 - say it has a
40:36 - size between um 10
40:39 - and 50.
40:43 - okay cool so at this point
40:46 - we've kind of uh dealt with our
40:49 - attributes
40:50 - of our class um a raindrop
40:53 - we can now start creating raindrops
40:55 - using the constructor
40:57 - uh and each of those raindrops is going
40:59 - to have you know
41:00 - a lot of these attributes we didn't
41:01 - quite get to shape our layer but they're
41:03 - going to have those attributes
41:04 - we haven't done the verbs yet but let's
41:06 - go ahead
41:07 - and actually use this constructor
41:09 - because we can we can do that at this
41:10 - point
41:12 - so i'm going to delete these arrays
41:17 - and um i'm gonna delete all of this
41:21 - as well and now
41:24 - instead of having these separate arrays
41:26 - for the separate attributes
41:28 - where again we added here all here's my
41:31 - array of
41:32 - 100 x values here's my array of 100 y
41:35 - values
41:35 - you can imagine if i wanted to start
41:37 - doing colors i would have to say here's
41:38 - my array
41:39 - of 100 red values here's my array of 100
41:42 - green values here's my array of speeds
41:44 - right
41:44 - it starts to become super cumbersome
41:46 - when we're defining all of these
41:48 - these different arrays for all of our
41:50 - different attributes
41:51 - instead of yeah so i'm just i want to
41:54 - point out that we actually
41:55 - did something like that um for our
41:58 - second live stream session we created
42:00 - these like
42:01 - they're not exactly bouncing balls but
42:03 - there are a little bit bouncing balls
42:04 - actually
42:05 - that started from the middle of the
42:06 - screen and then went around and it
42:07 - bounced around the canvas
42:09 - and the way that we um differentiated
42:11 - for each of the
42:13 - the ellipses in the bouncing bowl is by
42:15 - having i think we have like
42:17 - what six or seven different arrays for
42:20 - each of these attributes
42:21 - which i guess is a the thing that we're
42:23 - addressing here the benefits of using
42:24 - object-oriented programming versus
42:26 - having a lot of arrays for each of these
42:30 - yeah and you can kind of imagine if our
42:32 - program got bigger and bigger
42:34 - now we now these these arrays that are
42:37 - very specific to the raindrop
42:39 - are going to start mixing with things
42:41 - that are like irrelevant right we're
42:42 - just going to have like the
42:43 - the array containing the speed of the
42:45 - balls right next to something that's
42:47 - completely unrelated
42:48 - and so by doing this object-oriented
42:51 - programming approach or object-oriented
42:53 - approach
42:53 - what we're doing is we're containing all
42:55 - of the information about raindrops
42:57 - inside the raindrop class and nobody
43:00 - else really has to worry about it all
43:01 - you need to know how to do
43:02 - is create a raindrop and the position
43:05 - the color
43:06 - all of these things are going to be kind
43:07 - of taken care of for you or at least
43:09 - it's going to be
43:10 - sectioned off into its own part of the
43:11 - code um
43:13 - so let's look at
43:17 - um let's now create a list of raindrops
43:20 - rather than a list
43:21 - of or an array of all these different
43:23 - features so
43:24 - same as before want to stay let before
43:27 - raindrops
43:28 - thank you yeah uh there's some
43:31 - of my javascript experience coming in um
43:35 - yep so defining my array of raindrops to
43:37 - be empty
43:38 - and then here where before we had
43:42 - um let me let me control z because i'm
43:45 - upset with myself for deleting all that
43:46 - code
43:47 - um so let raindrops
43:51 - equals that and here before we had
43:55 - let me push on a random number to my x
43:59 - value array let me push on a random
44:00 - number to my
44:02 - y value array now we're only going to
44:04 - have one of these because we only have
44:05 - one array we care about
44:07 - and that's named raindrops and instead
44:09 - of just pushing a number
44:11 - onto our array what do we want to do
44:14 - juwon
44:15 - we want to create a raindrop object
44:19 - and then push that object into the array
44:21 - correct
44:22 - so this is us actually using the
44:25 - constructor
44:26 - and let me make sure i have the syntax
44:28 - of this right because again this is kind
44:29 - of different in every language that
44:32 - you use but it's creating a
44:35 - new raindrop
44:40 - so what this is doing is uh
44:44 - there's probably subtleties to the the
44:46 - new keyword
44:47 - that i don't actually know but the way
44:50 - you know in your introduction to
44:52 - object-oriented programming
44:54 - lesson the way that you should be
44:56 - conceptualizing this
44:57 - is i'm cr i want to go to the
45:00 - raindrop class and find so which is the
45:03 - class that we uh defined right here
45:05 - and find the constructor with no
45:07 - parameters
45:08 - right that's why we have open close um
45:11 - brackets right here
45:12 - and do whatever that constructor does so
45:15 - in this case i'm going to create a new
45:17 - raindrop and
45:18 - set up its position its y position its
45:20 - red green blue values
45:22 - um do you want does javascript allow for
45:25 - multiple constructors with
45:27 - different parameters um
45:32 - that's a good question i believe um
45:36 - you shouldn't be able to do but let me
45:39 - quickly look that up
45:41 - yeah uh as she does that i guess i can
45:43 - give a little bit of an explanation of
45:46 - other languages enabling you to write
45:49 - multiple constructors so some
45:51 - constructors want like
45:53 - a variable here right and that variable
45:56 - might
45:56 - define the range in which the size could
45:59 - be
46:00 - um right i could like put that there uh
46:03 - so other languages allow you to define
46:05 - multiple constructors and then when you
46:07 - actually
46:07 - call those constructors you would have
46:09 - to you know make sure you know which
46:11 - constructor you're calling where
46:13 - if my constructor took a variable then i
46:16 - would have to give it
46:17 - in order to call that one but again
46:19 - differences between
46:21 - different languages um
46:25 - yeah i think the answer is that if we're
46:27 - using
46:28 - so there the thing with javascript is
46:30 - that this
46:31 - is what's called an es6 way of defining
46:35 - um it's a version of es6 is a version of
46:37 - javascript and it's that way of defining
46:40 - classes in es6 javascript the latest
46:42 - version of javascript
46:43 - you should be able to use um prototyping
46:47 - what's cool this is like getting a
46:49 - little bit too much into the new ones of
46:51 - things but basically the short answer is
46:53 - if you're if we're using this pattern no
46:56 - but if you're using another pattern
46:57 - yes you might be able to yeah so again
47:00 - kind of something to think about
47:02 - as you're working with object-oriented
47:05 - programming
47:05 - is that there's different ways to create
47:08 - um
47:08 - different constructors and the way that
47:11 - i am doing this right now
47:12 - we're kind of stuck with this default
47:14 - constructor with no parameters which
47:16 - is totally fine for our purposes
47:19 - let me um now that this raindrop
47:23 - exists let me actually
47:27 - i don't even know what's gonna um print
47:29 - out here i bet it's a bunch of
47:31 - objects that aren't gonna be helpful let
47:32 - me log what my
47:34 - raindrops uh
47:38 - it should be an array actually looks
47:40 - like
47:41 - um and that should be fine so
47:44 - if i yeah cool
47:48 - i have an error here because down in my
47:50 - draw method i'm still using
47:52 - x which doesn't exist anymore but the
47:54 - thing that we're interested in here is
47:56 - here is my array of raindrops so it's a
47:59 - hundred of them
48:00 - and now i can start to actually inspect
48:03 - each of these raindrops
48:04 - look at this this raindrop has its own
48:06 - exposition
48:07 - x position um sounds like something
48:10 - exposition
48:11 - uh this raindrop has its own exposition
48:15 - its own y position
48:16 - red green blue values and this raindrop
48:19 - has
48:20 - its own uh variables so each one of
48:23 - these
48:23 - has its own own variables the reason why
48:26 - they're different is we're using this
48:29 - random function
48:30 - to say when i when i create a new rand
48:32 - drop give it a random value
48:34 - so that's awesome that and the the
48:38 - console.log really helps there to see
48:40 - all of these different raindrops and
48:42 - they all have their different
48:43 - values cool
48:47 - so we are set with attributes we can
48:49 - create raindrops
48:51 - and they can have their own attributes
48:54 - right they all have nouns and adjectives
48:55 - associated with them
48:56 - let's now write some some actions some
49:00 - verbs things that
49:01 - the raindrop can do and so again if i'm
49:04 - comparing
49:05 - back to what i had before all of the
49:07 - actions
49:08 - i was doing down in the draw loop right
49:10 - i was drawing
49:12 - the the circle i was i was using the
49:14 - ellipse function to draw the circle
49:16 - and then i was moving the circle down
49:18 - here in the draw function
49:20 - and so what we're looking to do is we're
49:22 - looking to kind of
49:23 - move some of this code away from the
49:26 - draw function
49:27 - and bring it into our class
49:30 - so let's start that by defining the
49:33 - um display let's say a thing that a
49:37 - raindrop can do is it can display itself
49:40 - so i'll even call it display self
49:44 - this is a method of the raindrop class
49:47 - and we have to ask ourselves okay what
49:50 - does it mean for a raindrop to display
49:52 - itself
49:53 - that a raindrop displaying itself means
49:55 - calling ellipse
49:56 - at its own x position
49:59 - its own y position and
50:03 - uh and i'm going to do this not
50:06 - y position and uh
50:10 - size this dot size
50:14 - cool so i can display a raindrop
50:17 - let's see let's put that into action um
50:21 - so down here in my draw loop i'm going
50:25 - to instead of calling ellipse here
50:28 - i'm going to say grab the raindrop
50:33 - at position i
50:36 - and it's called raindrops at position i
50:39 - again that's our
50:40 - array of raindrops and have that
50:42 - raindrop
50:43 - display itself
50:51 - cool there they all are so again kind of
50:54 - that similar idea of
50:56 - i don't really want this code about
50:58 - displaying a raindrop just kind of
51:00 - floating in the draw function where it
51:03 - could
51:04 - be interacting with any other code i
51:06 - write here it's
51:07 - really specific to raindrops and so
51:09 - let's just section it off
51:10 - into um into
51:14 - the raindrops class right you could even
51:17 - imagine
51:17 - somebody coming along i hand them this
51:20 - raindrop class
51:21 - i say a raindrop knows how to display
51:23 - itself don't worry about how it's doing
51:25 - it
51:26 - you don't need to know anything about
51:27 - its exposition you don't need to know
51:28 - anything about its y position
51:30 - all you need to know is that it can
51:32 - display itself
51:33 - and so go ahead and make it display
51:35 - itself and somebody could come along and
51:36 - make it do that
51:38 - actually um one thing that we should go
51:41 - back to circle back into is that the
51:43 - width
51:43 - random the random width is working up
51:46 - there yeah there you go
51:47 - um yes this is working where the random
51:51 - width
51:51 - is getting between 0 and 400. so if i
51:55 - increase this to
51:56 - a thousand we should hopefully see
51:59 - yeah um these raindrops are spread all
52:02 - along
52:02 - oops um all along
52:06 - my a canvas even past 400 400
52:09 - so that is definitely working let me
52:11 - shrink the canvas to
52:13 - 8500 by 500. all right we got eight
52:18 - minutes left
52:19 - so let's do okay an aspect of displaying
52:23 - itself
52:24 - is uh setting the color so
52:27 - before i uh draw the ellipse i'm going
52:30 - to set the fill which is
52:32 - the fill is kind of like setting your
52:34 - paintbrush for the
52:35 - uh for all future shapes so i'm going to
52:38 - set the fill
52:39 - to this dot r um
52:43 - this dot g this dot b
52:53 - do you want why does why are they
52:55 - different
52:56 - colors um given i just said phil
52:59 - sets the color for all future shapes
53:02 - like how are we getting a bunch of
53:04 - different colors if phil is saying
53:06 - any shape you draw from now on is going
53:08 - to be this color
53:09 - because when we created the object
53:12 - in line 40 by saying new raindrop it ran
53:16 - if we go back to the code in the
53:19 - constructor
53:20 - in line 22 to 24 we're randomizing the
53:23 - rgb
53:24 - values so basically each of our
53:27 - raindrops have different
53:28 - value for red different valley for green
53:30 - different value for blue that's going to
53:31 - range between zero and
53:33 - well technically a little under 255
53:35 - right the
53:36 - the highest number it can get is 250
53:38 - 4.99
53:39 - but that just means that we're
53:40 - eliminating the chance that the raindrop
53:42 - will be
53:43 - completely white but that's okay for our
53:45 - purposes
53:46 - but basically because of that when we
53:48 - draw it in this place else
53:50 - each of the objects are going to have a
53:52 - different r g and b
53:53 - value so they're going to be using
53:55 - different fills in there
53:56 - and every time that um ellipse function
53:59 - where the display self
54:00 - function runs um a new fill color set
54:03 - and then the ellipse is drawn and the
54:04 - next time a new fill color is set and
54:06 - then the ellipse is drawn and so on
54:08 - yep exactly so because i'm going through
54:10 - this for loop the first raindrop calls
54:12 - display set
54:13 - we say every shape from now on is going
54:16 - to be filled with that first raindrops
54:18 - color
54:18 - let's draw a shape then the very next
54:21 - thing that we do is this loop happens
54:22 - again
54:23 - we tell the second raindrop to display
54:26 - itself
54:26 - and we basically overwrite that first
54:28 - film command from the first raindrop you
54:30 - say forget about that
54:31 - from now on any shape we want to draw um
54:33 - should be filled with this color
54:35 - and then we set the ellipse and that
54:37 - happens again and again
54:38 - one kind of side effect here is that if
54:40 - i started drawing shapes after this for
54:42 - loop
54:42 - they would all be drawn in the color of
54:45 - the final raindrop
54:47 - um of of that set so if i just draw like
54:50 - a rectangle
54:50 - at 100 100 that's 50 50.
54:54 - um you'll see that this is filmed with
54:57 - whatever the last raindrop was which
54:59 - looks like maybe that was that's the
55:00 - last three drops
55:02 - oh it's cool you can spot it
55:05 - yeah in fact here we can uh this is like
55:08 - super overkill and something i shouldn't
55:09 - do given that we have five minutes but
55:10 - we can see yeah the raindrop at x
55:14 - at four what is that 439 so that's
55:18 - far yeah so it looks like it's that
55:21 - raindrop
55:23 - which is kind of cool but yeah kind of a
55:25 - side effect to remember is that we never
55:28 - um we never like clear that fill so
55:31 - something that we could do here is then
55:33 - say
55:33 - great after i'm done drawing those
55:34 - raindrops let me set the fill
55:37 - to black or whatever you want but just
55:40 - be aware that
55:41 - this is changing the fill kind of
55:42 - without you realizing it
55:44 - um cool
55:47 - all right you got four minutes left
55:49 - let's implement
55:50 - uh the other big act
55:53 - the other big verb here of fall so a
55:56 - raindrop
55:57 - can fall
56:01 - and for a raindrop to fall what that
56:04 - means
56:05 - is that we want to change the y position
56:08 - by its speed so
56:11 - this dot y pause plus equals
56:16 - um or i don't even know if plus equals
56:18 - this so this is not y plus positive
56:21 - y pause plus
56:24 - this dot speed it'll be more fun if we
56:27 - give
56:28 - each range of random speed so let's do
56:31 - between one and ten
56:33 - and then i know we said kind of uh reset
56:37 - self could be a separate thing
56:38 - but let's for now just put reset self
56:41 - as part of the fall method so
56:45 - let's do the modding here again so mod
56:49 - cool cool a trick that a lot of
56:53 - or an error that a lot of people will
56:55 - fall into is saying great
56:57 - i wrote my fall function let me hit run
56:59 - and see all my raindrops fall
57:01 - what the heck they're not falling uh and
57:03 - that's because of course
57:05 - i am just writing the blueprints here
57:07 - raindrops know how to fall
57:09 - but i never toned my raindrops the
57:12 - instances of my raindrops the raindrops
57:13 - i
57:14 - actually made i never told them to
57:15 - actually fall so let me
57:18 - go ahead and do that um
57:21 - fall there they go
57:26 - i think in my original version um i
57:30 - in fact it didn't have a speed
57:33 - variable so if i run this now this is
57:35 - going to break because
57:37 - i'm asking to use the speed variable
57:39 - here and instead i think that this is an
57:42 - interesting
57:43 - uh this shows how you can use instance
57:46 - variables in multiple ways
57:48 - i said i want them the speed is
57:52 - dependent on the size
57:53 - so i said uh
57:56 - plus this dot size so
58:00 - this would make the big ones fall faster
58:03 - um which we can go ahead and see it's
58:06 - probably going too fast and so let me do
58:08 - this dot size divided by
58:10 - uh yeah
58:14 - cool so the big ones are falling faster
58:17 - the small ones
58:18 - are falling slower um i think that this
58:21 - is a
58:22 - uh a good thing to remember is that i
58:25 - think a lot of people think
58:26 - hey my my variables can only be used for
58:29 - one thing
58:30 - or my constructor can only set up
58:34 - variables another thing that i could do
58:35 - that i could have done
58:36 - is i could have said this dot speed
58:40 - equals this dot size divided by
58:43 - 10 and then do this dot speed here
58:49 - the exact same code basically instead of
58:51 - doing it here i'm doing it up in the
58:52 - constructor
58:53 - um but yeah just remember you have
58:57 - access to
58:58 - any of your tools in your coding toolbox
59:01 - in any of these
59:02 - methods whether it's the constructor
59:03 - whether it's a different method like
59:06 - fall
59:06 - you can be as creative as you want in
59:09 - any of these methods and
59:10 - um yeah and do do different things
59:15 - can we try making two small
59:18 - um style changes here sure it's gonna be
59:21 - two lines of code
59:22 - um so in setup let's do no stroke
59:26 - um yeah anywhere
59:30 - cool and then that takes away the
59:32 - outline the black outline from the uh
59:34 - from the shapes
59:35 - and let's do my favorite thing of um
59:38 - adding in
59:39 - um traces so in the background function
59:43 - in the background function let's change
59:46 - backdrop
59:47 - background to 255 comma um and let's do
59:50 - 30.
59:56 - oh my god you wonder
60:01 - immediately way more interesting um
60:04 - that's awesome
60:08 - let me find what color i used for this
60:10 - background um
60:12 - oh yeah so we can just do that and then
60:13 - just put 30 as the fifth argument
60:24 - honestly yours was better with the uh
60:25 - the white background
60:28 - no i like this yeah um
60:31 - cool so we are basically at time let me
60:34 - uh
60:35 - stop here and see if anyone in the chat
60:38 - has any questions
60:40 - um as we wait for questions to you on
60:43 - what are some of the ways that you you
60:45 - would uh
60:46 - change this or add on to this what are
60:48 - some further challenges that people
60:49 - could work on
60:51 - i think you could definitely explore
60:53 - that adding click function to in in
60:56 - there we briefly talked about in our
60:57 - last live stream session as well
60:59 - um and but basically during our last
61:02 - last live stream
61:03 - we um experimented with binding key
61:07 - events to um to create interactions
61:10 - actually that was the one before
61:12 - but we also did the same thing in that
61:13 - class um so wait a minute backtracking
61:16 - we learned how to implement in
61:19 - interaction
61:20 - to rp5.js sketches in the last two live
61:23 - stream sessions
61:24 - so a really good challenge would be you
61:26 - know adding in some sort of mouse click
61:27 - event to each individual
61:30 - um raindrops so you could create a whole
61:33 - new method in there
61:34 - um the hints that i'm gonna throw out is
61:36 - that you would most likely
61:38 - want to use the mouse is pressed boolean
61:41 - variable
61:42 - it's a built-in b5 transparent variable
61:44 - which will allow you to check
61:46 - whether a mouse is pressed or not and
61:48 - then you would also want to check
61:51 - using referencing the mouse x and mouse
61:54 - y
61:54 - built-in variables and check that
61:56 - against the position
61:58 - values of each of the ellipses and that
62:01 - way you should be able to detect
62:02 - whether a mouse is pressed and whether
62:04 - that when a mouse is pressed or whether
62:06 - the mass x and mouse y are within the
62:08 - range of that
62:09 - particular raindrop and you should be
62:11 - able to have you know change color
62:13 - or change the shape or you know change
62:16 - opacity
62:17 - what have you um depending on you know
62:19 - um
62:20 - whether that um
62:23 - yeah mouse yes so a super quick uh
62:27 - demo of this is uh i wrote this new
62:30 - method i'm saying if the mouse is
62:33 - pressed
62:34 - and um the mouse's x position
62:37 - is to the left is is less than the
62:40 - raindrops x position
62:42 - then change the raindrops blue color to
62:45 - 255
62:45 - that's gonna do something really
62:47 - interesting though
62:49 - yes we can do it let's do it
62:52 - for sure so let's make sure to call our
62:54 - method
62:55 - um what do i call it is clicked
63:02 - do this and then start clicking
63:05 - so right so let me even restart so i'm
63:08 - changing all of these ones to blue but
63:11 - all the ones that
63:12 - my mouse isn't to the left of stay the
63:14 - same
63:15 - but now if i start to go in this
63:16 - direction they're all
63:19 - changing blue which is cool
63:25 - um we have a quick question from rafael
63:27 - in the chat and saying
63:29 - these forms are made on with canvas
63:31 - right could you use svg
63:33 - um you can't use well you could use svgs
63:38 - by importing them
63:39 - in as an image file and you could
63:41 - display those image files instead of
63:43 - displaying ellipses in here
63:45 - um if you want to actually control the
63:48 - each of the points within the svg
63:50 - you're going to most likely going to
63:52 - need another library on top of the v5ds
63:55 - library to manipulate things within the
63:57 - svg file itself
63:59 - but you could use um svg or any um
64:03 - image files instead of an ellipse in
64:05 - there so if you wanted to use like
64:06 - pngs that are in the shape of a raindrop
64:09 - an actual raindrop with that you know
64:10 - the
64:11 - curve going up like that you could use
64:13 - that instead yeah and all of that would
64:15 - fall
64:15 - in the display the display self method
64:18 - of
64:18 - rather than drawing an ellipse say hey
64:20 - load this png or whatever you want to do
64:25 - cool cool um great that's all we have
64:29 - for this session again i will post this
64:32 - solution code in the youtube
64:35 - um description if you want to play
64:37 - around with it next week
64:38 - we are doing a similar thing rather than
64:41 - um
64:41 - looking at kind of uh so in this session
64:44 - we looked at object oriented programming
64:46 - through the lens of p5
64:47 - um next week we're going to look at
64:49 - machine learning through the lens of p5
64:51 - so
64:52 - um coding up uh a machine learning
64:55 - algorithm uh in p5 in fact
64:58 - um let me see if i can find this suit
65:01 - quickly because i think it is a nice
65:04 - thing to get
65:08 - man machine learning is such a buzz word
65:10 - though
65:11 - gonna we could actually you know you can
65:14 - combine
65:15 - machine learning with the 5js and
65:16 - there's another library called
65:18 - ml5 which is also an open source machine
65:20 - learning library that you can use in
65:22 - javascript
65:23 - which is also a good way of exploring
65:25 - but i think alex you're talking about
65:26 - something a little bit different right
65:28 - yeah i'm talking about oh man and i
65:31 - don't know if i'm gonna be able to find
65:32 - it quickly
65:34 - um
65:40 - um
65:44 - okay here it is yeah
65:48 - give me one second sorry
65:52 - cool let me screen share
65:56 - um cool this is the
66:00 - this is the thing that we're going to be
66:01 - building which is um
66:04 - the k-nearest neighbor uh
66:07 - um classification algorithm where
66:10 - uh that this is what we'll be doing next
66:12 - time of explaining what k-nearest
66:14 - neighbor is
66:15 - and then building out this this
66:16 - visualization so
66:18 - really interesting yeah like where my
66:21 - mouse is right now is being classified
66:22 - as
66:23 - light green because uh its closest
66:28 - points are two light green points and
66:30 - one dark blue point um
66:32 - so we will get into all of this and much
66:34 - more next week
66:36 - um cool anything else
66:39 - uh you want to say g1 um
66:42 - just one two we had a question
66:45 - from charlie about when the next live
66:48 - stream is
66:49 - um it will be next tuesday 4 p.m but
66:52 - it's going to be eastern standard time
66:54 - 4 p.m cool awesome all right folks
66:58 - hope to uh hope to see you then