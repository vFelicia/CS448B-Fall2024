hello again this is matt and this is the fifth video of my supersupposed beginner's guide on youtube in this video we're going to be looking at what happens in your computer when you create and use variables in your c plus postcode more specifically we're going to be looking at how the computer allocates resources for variables that you create in your code just before we start i'd like to ask you guys to please subscribe to my youtube channel as it is the only way to see if people are actually enjoying these videos and if they want to see more c plus plus guide videos so let's get to it what i've got here is a simple cmake slash siplus plus project which is pretty much identical to the project we had in the last video if you don't know how we ended up here please watch my previous videos as i explained very well in those videos how to create and use variables in your simplest source code the only thing i've changed is the name of the variable that we have inside the program previously this variable was called my value i believe but now it's called my age and it represents an h value and in a whole number containing my age and this the program simply outputs that value in a string that says value of my age is and then it appends the value of my age so if you run this code you'll be able to see just that as you can see here now going into the main topic of this video i want to discuss what your computer does under the hood when you create a variable such as my age here in line seven and to do that i've created a notepad with a grid representing your ram your computer's ram where all the values for variables and data that you create inside your computer will be stored if you didn't know this your computer ram can be fought of just a continuous block or continuous array of data where the cpu can access each individual byte and if you don't know what bytes are bytes are pretty much just a set of binary digits which are pretty much different ways to represent numbers in computers using only two digits such as the number three the number three is written as this as you know but in binary the number three is represented with this set of binary digits of bits and in hexadecimal which is what we're actually going to be using this video for the most part which again is just a different way of writing numbers is represented as this and that is base 16. if you don't know how to do this conversion between decimals to binary and binary to hexadecimals you can simply open your calculator on windows and select the program mode select the base you want to work with in our case we're going to be entering numbers in decimals and then just type the number you want to convert here such as 79 and you can see that 79 is equal to this in binary and this in hexadecimal 4f now if you're not using windows you can simply google decimal to hexadecimal calculator and i'm pretty sure you're going to find something useful out there another important note is i am pretty much simplifying a lot of things here so i'm not going to be talking about cpu caches or registers in this tutorial and we are assuming that all the data that you create inside the program will be stored in the ram so now that you understand the setup that i've made here we can actually begin to look at what happens inside your program when you create a variable so the first thing that happens here so when you say int my age regardless of whether you know you are defining a value to a whether you're not you're putting an initial value to it or not your program is going to ask the cpu to allocate just enough memory to store one integer variable inside my age here and what does that actually look like in the run well so your program is actually instructing the cpu to request some memory from the ram that has been currently unused so your program can use it internally so it's going to say something like hey can i please have four bytes to store an integer value and your ram is going to retrieve a position to the starting byte where your integer is going to be storing so it could be something like here for example i'm highlighting the four cells that will be storing the integer and the reason why i know it will pretty much ask for four bytes here so four cells is because you can actually google uh the c plus plus integer ranges in this particular page it actually tells me what the typical size of each type that i've got here is so for in our case we've got an integer type here and if you go to this page it says here that integers are typically four bytes in fact for all the architectures that i know out there for all the computers that i know out there in c plus suppose integers are always four bytes i've not seen a different value yet but theoretically this would depend on your architecture and your compiler but in our case we have four bytes so what your program is going to do when it reads this is going to ask for the ram for four bytes and the ram is going to return an address in memory so the starting point here where you're going to store your value okay and one thing i want to note as well is that if you're not defining the value this memory that you have just requested here is going to be uninitialized and what that means is that you have no way to tell which value is going to be stored in those bytes that you've requested when you actually get a hold of it so it could be anything anything that the previous programs which were running on your computer will have stored on that particular memory that's now unused so it could be something like a b f f and then this here so anyway it's a complete bogus value you have no control over what value you actually get when you just request it now the interesting thing of this line here is that we're actually requesting for the bytes to store the integer and we're actually defining a value to it we're actually giving a value to initialize it with so what your computer is going to do is it will pretty much go back to your ram and request that memory but straight away it's also going to assign that memory with the value that you've added in your code here so 24 and if you look at the calculator 24 in decimal is simply equals to 18 hexadecimal so what this is actually gonna store here is simply zero zero zero zero zero zero one eight and this is what is going to be inside your ram once you write the line of code here line seven and if you're actually understanding this you see why i said in the last video to always initialize values when you can and not to use them before you actually give it a value for example if i had a value called number of cars and i left it uninitialized and i were to simply print out the value here the value that you would print out is undefined and in my case it doesn't actually compile because i've got some flags enabled that will prevent the sort of bug from occurring but what would this actually do is it would request a different space in the ram and again this is not necessarily right next to the value that we've just got from my for the variable my my age here so it will be a different value won't be right next to it you'll be somewhere else that's currently in use so for example it will be on say location 42 here as you can see on the left so start here and it will request four bytes of memory and and let's say that the value that was previously in there is something like ff ff ff and ff so the value that we have here in number of cars currently when unassigned is this hypothetical value of ffffffff that was that previously before you requested that ram memory and obviously if you were to print it out you would just be a random value that you have no control over so this is why it's always good to if you can always define a value when you're creating a variable so something like five here okay and i've actually made a misspell it should be number of cars so now this says that the number of cars that i have is five and you have control over that value because you gave it a value in the first place and i just wanna know that i don't actually have five cars i have zero cars at the moment and i really wish i had five cars so that's it guys i'm gonna leave this video here and i hope you've understood uh the idea of allocating space in your ram to be used for your variables so whenever you create a variable you're pretty much requesting some space in the ram and that variable whenever you assign a value to it it's going to override the value that you currently have in your space in your ram okay so this is pretty much the idea and i just want you guys to think of any computer program out there as a set of instructions that tells your cpu how to create modify and move values around and that's pretty much what every program does so understanding this idea is pretty much essential to any programmer well so i'll leave this video here i hope you guys have understood i have simplified a lot of things but if you've got any questions if you've got any feedback please comment below and i'll get back to you as soon as i can so that's it thank you guys byebye