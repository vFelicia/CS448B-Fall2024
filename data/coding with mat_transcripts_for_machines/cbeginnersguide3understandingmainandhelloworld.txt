hello again this is matt and this is the third video of my simple supposed beginners guide series on youtube and in this video we're going to be going over the program that we wrote in the last video and we're going to analyze each line in the c plus plus code looking at what they do and why they are necessary again just as a note this is pretty much a compilation of information i previously wrote on my website in particular this post dissecting the simplest simplest first program talks about everything we're going to be looking at in this video so if you haven't quite understood the ideas presented here please have a look at this article i'm pretty sure that it should be clear enough to you after reading all of this so let's get straight into it the first thing you're going to do is you're going to open your id of choice in my case i've got visual studio 2019 but if you've opted for the c line installation open c line the next thing you're going to do is you're going to open that simple program directory i know that for my case i can see it here on the left but if you can't see the simple program directory that we created in the last video just navigate to it in my case it's on the desktop coding and cpu simple program open the folder and as you can see here we've got everything that we had in the last video so we've got the main.cpp source code we've got the cmake lists which tell cmake the structure of your project again if you don't know what this is please refer back to the last video watch that i explain how to make a very simple cmake project with just one source file ie main.cpp and this is the source code that we had so this is the cpp code here i've zoomed in quite a bit so you guys can see the text better without me having to edit the video too much and zooming in everywhere so the intention for this video is to go over this file here main.cpp and i'm going to explain every line and why they are necessary now i'm going to begin by talking about this int main function here if you think about it when you open an executable a program in your computer such as google chrome visual studio or even a game that you play as soon as you open the program the computer needs to know where to start executing so which lines of code are going to be executed first as soon as you open that program an int main this this this whole line here this this whole block of code here is the entry point of your program so this is where your program will start executing so everything inside these curly braces will start executing first now one thing i'd like to point out is that into main this design here line three defines a function called main and returns values of type integer now if you don't know what a function is don't worry too much if you know a little bit about mathematical functions it's essentially the same in programming in a sense that functions in programming are pretty much a black box where you put some values in and you get some values out okay in the case of c plus plus this is pretty much a standard definition of a function so main which is the name of the function takes no parameters as you can see here this is what the open and close brackets mean no parameters and returns integer values this is what comes before the name and everything inside the open and curly braces is the code that executes when once this function is called once this function is executed okay just so just to summarize as soon as you start your program here simple program once you compile it and execute it the code that's going to run first is everything inside here the intermain function okay now the next thing that we have is what we call the scope of the function so the code that runs when the function is called and this is represented by line four to line six here and in c plus plus you indicate the scope of the function by opening the curly braces after the function definition here as you can see and closing the curly braces so everything in between the open and curly braces is the code that runs when you run the function main next up is the stdc out hello world now this is a little bit more difficult to explain because firstly we need to actually talk about this first line here include iostream in c plus plus hash include and then whatever comes after it will essentially tell the compiler to take this file iostream and copy the contents of it up here where the include is so this is what the compiler is going to do in c plus plus you can actually see what this iostream file is and what and what's inside it by hovering on the name and pressing f12 it will take the definition of that file and you can see where the file is if i actually zoom in here you can see that it's in c programs microsoft visual studio community blah blah iostream and this has a lot of code here so essentially what the compiler is going to do is it's going to take all the contents of this file and copy it to the top of my file here main.cpp okay so to be more specific this is called an directive and it tells the compiler to copy all the code inside this file that comes here at the top of your c suppose source code in the case of iostream it is a header that comes with the compiler by default so most compilers such as microsoft visual uh c plus plus compiler gcc and clang on linux will all have this header available for you to include it and this is essentially how you include code defined somewhere else maybe in your project or in your system inside your source code with include directives okay and we're including i o stream here because it defines this functionality here so it defines std c out in c plus plus this is called a output buffer and this buffer will essentially output the message to the console so stdc out stands for console output if i believe and it's part of the c plus plus standard library that's why you've got an std column column here this is called a namespace i'm not don't worry too much if you don't quite get these things here this is just the first time we're seeing this but i will go into more detail in the future okay so this line here essentially says hello world to the console so hello world is the message been sent to what we call the output buffer the console output buffer and the syntax to do that is is what you can see here so there's a less than less than sign i have to see out and the message after it okay so if you run the program you should see that it just says hello world and exits as you can see here so your program runs says hello world and exits with code zero okay now it's interesting that you can see a code being returned from from your program so code zero so what does that mean long story shore that is the value returned by your function main okay now you might be wondering where that zero comes from and essentially by default the compilers will automatically add this line of code after your function main so by default the compiler adds a return zero if you have no return statement in your phone in the main function and this is only valid for the main function this doesn't this is not a general rule for functions in c plus plus so in main if you don't add a return the compiler will automatically add a return zero at the end of your function and by convention zero means success and anything that's not zero means a failure so unless you don't want the default behavior to return a zero to say that everything worked just fine unless you've got a very good reason not to you would use return and then another value here to indicate the error code of your program okay so if i return minus one you should be able to see when you run the code that you returned 1 here on visual studio and it's essentially the same on c line as well you'll be able to see the output at the bottom tab i believe of your ide well guys i'm going to leave this video here i think we've actually gone through quite a lot even though there isn't much code to go over but again if you haven't quite understood everything that i've explained in this video please read this post that i created on my website it talks about all these things in much more detail and in a much simpler way to understand it i believe as well everything is in text so you can just reread it if you haven't quite understood something if you have any questions if you have any issues compiling the code that we we went over in this video please let me know in the comments and i will try to help you okay so until next video bye