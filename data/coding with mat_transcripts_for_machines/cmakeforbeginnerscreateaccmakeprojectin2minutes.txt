hello my name is ma and welcome to another cmake video today we're looking at an open source tool that I believe can help beginners create very simple simple Source projects without having to worry about all the cmake around it and all of the infrastructure that goes into writing your first cmake program specifically we're looking at the cmake init tool which basically aims to create a cmake slash C plus plus project skeleton so you can just go plug into vs code or your editor of choice and start coding without having to worry about all of the stuff that goes around right in the the hello world so let's get into it I actually came across this a couple of weeks ago in one of the forums I'm part of and this project seems to be quite small I mean there isn't much to it apart from the the cmake and the python that makes the whole thing work there's only like six contributors and as far as I can tell only one of these people here is the the main contributor that basically wrote most of the stuff but don't let that fool you because this is actually a very powerful and a very good idea that I believe can help anyone trying to get into C plus so as you can probably guess by now this is a command line tool where you basically just type in cmake in it and it will create a directory containing your whole project structure in a way that you already compiles as soon as you plug the project into vs code or your ID of choice given you have the right requirements installed so as you can see here there's a there's a little bit of an usage GIF here I'm not really going to be you know explaining the whole thing but yeah we're gonna we're gonna go through all of this in a terminal anyway so let's actually begin talking about the requirements and what you need to have installed in your system before you even install the tool so that it runs you know smoothly if we scroll down here on the GitHub project itself there is a list of requirements for example you need to have python 3.8 or newer installed you need to have cmake 3.20 on your installed you need to have get installed and the rest of them are optional stuff however if you are following this tutorial if you are typing everything I type in the terminal line by line you should probably have Conan installed because that's what I'm going to use today or you can also opt to choose a VC package as your package manager as well because this tool supports both the VC package and Conan so in my view this gives the project some brownie points because it integrates package managers seamlessly and just one more note on the requirements here I am using Windows so I've got all of these things already set up and if you don't have all of these things set up in your Windows machine make sure to go on Google and type it because I'm not going to be teaching you how to install all of the requirements these are things you can probably just Google and install them very quickly and also I'm not just on Windows I'm actually using WSL in other words I've got Ubuntu installed here on my Linux so that's what I'm going to be using and if you have used Ubuntu before you probably know that whatever cmake install from the APT package manager it's not going to be a new version it's probably going to be something like 3.16 as far as I know 3.16 or 3.17 so the best way to install a new version of cmake in other words 3.20 or newer is to actually uninstall it using sudo app so sudo apt get Auto remove I believe it is and then you type in cmake here and that will uninstall your cmake system version in my case I don't actually have it installed via apt because I've installed it using pip and believe it or not if you do a sudo pip install cmake I will install cmake systemwide but also a new version of cmake so if I look here C make the version I can see that it's 3.25 so this is a much better way to install cmake compared to apt in my opinion if you're using Ubuntu so just look out for this little detail so let's actually get into C making it let's try to use it so the first thing once you've installed cmake in it which if you follow the tutorial here the the little guide they've got here on the GitHub so if you're done you know your sudo install a sudo pip install see making it you should be able to use it from the command line like this here now if you're running for the first time with no arguments it'll just give you a little help in fact if you do cmake in it hell it will actually give you a more cumbersome help which is kind of what you need in this case so all you can see here is that I see making it the rest of the stuff is optional and the only thing I need is a path to the project so that's what we're going to do here let's let's do that let's put our project into the directory called project and this is where it's going to launch the setup wizard I'm not going to talk through everything I may talk about little things but let's just go with it so I'm gonna put the name on the description and so on now this is one of the things worth mentioning you can even have an executable project a header on the project or a static shell Library project then this is one of the downsides in my opinion of this too because I may want to create an executable as well as a shared object out of my project which obviously you can modify later on you can modify the cmake and do that anyway but for this particular example let's just select the executable with standard and then here comes the the optional stuff that you you can have for example if you want to static analyze your project you can have client ID enabled I'm going to select yes I'm not going to have CPP check I'm going to choose Conan as my package manager here and that's it voila you've got a whole project now on the project directory here so if I do you know three here you can see that quite a few files were generated for me automatically and you can see that you've got your cmake lists here on the top there you go so you make lists as well as something called the cmake precess.json and the cmake user precess.json these two files is what allows you to quickly plug this project into your vs code no matter where you are running from you may be running from your home machine now but you may be running in the same project from from your work as long as you've got the same user presets you should be able to just plug it into vs code and compile it in the same way such as the flags the compilation flags with the same the cmake flags will be the same as long as you select the same preset so this is what's very nice about this project it generates that for you automatically so you don't have to worry about learning the cmake feature and if you're a beginner this can you know help you out quite a lot and another thing worth mentioning here is because we're using Conan we actually have to install the dependencies beforehand with VC package I'm not sure that's the case I think you can just plug and play but let's do that on this project here just so we can actually open it on vs code and start compiling it and running our program so yeah so this is the command to install the dependencies given that you are building with debug which you know this is a bit of a spoiler that we are going to be building in the book because we're going to select the developer a preset that the project generates for us and that is the debug so just make sure you pass the build type into Conan otherwise it won't work and I've had issues where I just try to install the release packages and it just doesn't build out of the box if you don't specify the build type equals debug here so that's one of the things you should watch out for and I'm going to zoom it in just so you can see this uh yeah and because of the way that the cmake in it offers uh wrote the the column file all of your Conan dependencies and you know cmake files that are related to your dependencies should be added inside the Conan directory so if you look at here you know there's a lot of Conan stuff here that was just generated for us and that is it I mean so now if you go into the root of the generated project you can just open it with vs code and as soon as you open it with vs code it's going to ask you to select a user preset I believe right so let's have a look at that if it hasn't asked you to select a user preset what you can do is control shift p and then select that preset and then you select Dev and this is what we're going to be using to build our application in debug mode here and you can see that there's many other presets you can configure such as you know CI coverage CI sanitize so if you're running this in a CI CD pipeline these are the presets available for you so you can just build your project for example for test coverage here so that's one of the cool things about it as well but let's just select Dev so we can build it it should configure it for you automatically and you can see here the mine has already configured and once it's configured you should be able to just do a cmake build so no errors as expected no errors at all the only thing that we got here is a warning which was actually identified by a compiler which is a good thing but we don't really care too much about it uh all we care about is that our executable here was was created and and if I'm not mistaken it's actually called you know the name of your project underscore exe does the Target name and when you compile it you can see that it gets added to your build forward slash Dev directory and my particular executable here is called coding with ma which is the name of my project so this is where we add this about executable and if you're not sure which name you're executable should have I recommend going into the cmake lists and looking at you know what it does to the the main executable here so you can see here it creates an executable Alias is it the XE and sets a property oh so the output name is actually going to be called coding with Ma and this is where this is how I know that this is the you know the main executable that the project generate generated for me and of course there's a lot more cmake that you can go dig into and learn a little bit more if you haven't already used certain functions like this this project generates for you but that's it I mean as far as you know as far as you the beginner is concerned there's nothing you need to actually edit here on the cmake lists you can just start typing your code and compile it now one of the things we haven't actually looked at is you know where is the code where is the main source code and as you can probably guess it's inside the source directory here so if you look at the main.cpp this is what gets compiled into our executable I believe this this file alone is the executable and there is a library that gets created automatically for us as well but I'm not going to go into the library side of things if you want to just get some really quick and dirty code out you'll probably be editing this main.cbp file here this is where you put your Hello World C out so for example let's just modify and then print something else here so I added a new print out here that says hello there YouTube at coding with Ma and let's try and compile it and then after it's compiled let's actually run the executable so as you probably guessed the executable is inside build Dev as we saw before coding with Mars so let's go into that and then we're inside build Dev so all we have to do is call coding with mac and there you go hello there YouTube coding with Mac and I hope you enjoyed this tutorial this is essentially everything you need to know as a beginner if you just want to get a quick cmake project out use cmake in it I'm just going to repeat this you don't really have to know the cmake that goes around it you can just trust the project it's going to create a nice cmake list for you though you know already contains the the executable that you want to create and the rest is just you typing a code into the main function here now obviously there are downsides to it for example if you just want to create an executable as well as a few libraries you will have to basically dig into the cmake and you have to copy and paste things but you know you may find that once you you do that there's quite a lot of bloat that you perhaps don't really need such as if you're creating a shared Library here I know that cmake in it sets up all of the the export headers and all of the macros related to exporting functions in in libraries which you may not necessarily need depending on use case but you know this is way more than suitable if you just want to get a quick project out and not worry about the C make around it so I'm going to give this project a rate of maybe nine out of ten because there are certain things I've perhaps mentioned in this video than it could be improved but nonetheless it's something that you you know every beginner should know and every beginner should indeed use this to get a c plus project compiling in like under three minutes which is you know something that not many people can do I hope you've enjoyed this video and if you've got any feedback if you've got any suggestions or simply just want to say hi feel free to post a comment below and check out my other videos as well particularly if you want to actually debug this project here you know we've created a project we can run it on the terminal but you can't actually debug it using vs code because you know the C making it doesn't yes support setting up the the debugging automatically for you I actually have a video on how to debug a C plus plus projects using vs code on W on Windows WSL so check that out so that's it and bye