hi again this is matt and this is the second video of my c plus plus beginners courses guide and in this video i'm going to be teaching you guys how to create a very basic simple source program and how to build it with cmake just as a side note uh this video is pretty much a compilation of two posts i previously wrote on my website the first one being dissecting the simplest c plus plus program which talks about the the very uh simplest simplest program you can have and the second one being a simple introduction to cmake where i talk about what cmake is and why we need it okay so let's get to it so first of all let's begin by creating a directory where we're going to store all our source files all our c plus code and the c make files that we need in my case i've got a folder on the desktop called coding and inside there i'm going to create a folder called simple program okay now the next step is to create the simplest simple supposed source code so source code or source file is simply a text file with c plus plus code in it and to do that on windows you can use notepad to do it so if we open notepad we can write the following and this is the simplest simplest program you can have when saving it you're going to click on file save as select the directory we just created so the file is going to go under the directory coding simple program and the file name is going to be main.cpp okay and make sure you select all files if you're using notepad so the file doesn't get saved as a text file as a txt file okay and once you've done that you should be able to see main.cpp here okay now if you're on linux i would recommend just simply using the terminal and a program called nano and i'm going to explain how to do that because i've actually got linux running on my windows machine so if you're on window if you're on linux uh let me just open a linux terminal again you're going to navigate to the directory you just created if you have created one in my case on desktop and simple oops city coding and simple program i believe okay so now you can see that we're under this directory on the terminal and what we're going to do is we're going to open nano and up and create a file called main.cpp and nano is going to automatically save that file it's going to create that file on the directory you're in once you save it okay so once you've done that simply type the simplest program which is this and to exit it while saving is control x type in y for yes and enter okay and that should have saved it on your linux machine it should have created a program called main.cpp as you can see here okay because i'm actually running linux on my windows he actually created the same file inside my simple program directory which is okay i'm also assuming that if you're on linux you know how to use the terminal if you've never used it before all you have to do to open the terminal is to open the search bar of your distribution in the case of ubuntu you can press a button called search i believe and type in terminal and that will bring up the terminal for you so you click on that program and a window like this will appear okay now the next step is creating the very basic cmake lists file that cmake needs in order to be able to tell your project structure and how to tell your system how to build it okay you could again use notepad if you're on windows so it's the same thing as the uh as creating the main.cpp file but instead i'm gonna actually use my linux system and my windows to do that with nano because it has some syntax highlighting so all i'm going to do on linux at least is open nano cmake lists dot txt and this is the name of the file you want to create if you're on windows so you're going to type in uh you're going to save the file as cmakelists.txt this time okay not cpp anymore this is a different file type just a text file once you've saved that on when on windows you should already see it on the directory but because we're on nano is only gonna save it once we exit to okay and for this file for this to work you have to write uh a few c make lines which are required by c make and i'm just going to write them out and explain to you guys after i write them out okay and this is the the most basic c make you can have for this type of project the first line c make minimum required tells you make what minimum version of c make the user needs to have in order to be able to compile your project in our case 3.10 is the minimum version you need to have so if you have 3.9 for example cmake will not let you proceed okay the project line project simple program tells you make the configurations of your project in our case we're just simply telling cmake the name of our of our project which i named it simple program you can name this whatever you want as long as as it's you know it's a reasonable name i guess it's a good name and the third line or the fourth line in this case because i've got a new line here and perhaps the most important line is the line add executable open brackets simple program space main.cpp close brackets and this tells cmake that we want to generate an executable in other words an exe file if you're in windows and that executable is going to be created from the source code or the source file main.cpp okay once you've done that you can save it type in yes and we should have cmake lists right here so whether you're on linux or windows you should have been able to to create this structure here okay so we're now ready to use cmake to build it so just before we go into an ide with this project because you could now open this with an ide and it will build just fine i'm going to teach you guys what happens under the hood when when you open a cmake project with your ide okay and for this i'm actually going to use my windows powershell because i want it to generate i want it i want to compile a windows executable no not a linux executable which is what would be created if i run it on my linux subsystem here okay so if i navigate to that directory what i could do now is ask cmake to build it from the command line and in order to do that you generally create a build directory for all the build files for all your executables and all your cmake cache files you don't have to worry about what those are for now uh so that's where cmake will put all of this and to do that we can just simply run make the and then the name of the directory build in my case and make there has the effect it just simply creates a directory under this directory here on the left and it's as you can see here on the on the actual windows explorer it simply just created a directory called build okay and what we can do now is we're going to navigate into the directory and ask cmake to configure my project to build all those cache files and save it inside the current directory and to do that we simply type cmake dot dot here as you can see i'm gonna zoom in so you can see it better and this will call cmake and you'll tell it to use the cmake lists file from the directory above so not the build directory but the cmake files inside simple program in our case so once you see this message build files have been written to blah blah blah this means that cmake generated everything without any errors now if you've got any errors please comment below the errors and we'll be able to figure those out but you shouldn't really have any errors if you follow this this this video line by line essentially if you haven't really missed anything else so what we can do now is we can tell cmake to build uh our executables from these configuration files uh just so you guys know what cmake actually created if we go inside the build directory you can see that it created all sorts of files here and because my default compiler is my default build system is visual studio it created visual studio projects here that i can just open and build to create my executables okay but it might be different depending on your system and depending on the compiles you the on the compilers you're using and what build systems you have available for you so to build it we're simply going to write cmake build dodge and this will tell cmake to build whatever cache files are inside the current directory which is in our case is the build directory and this is what the dot means okay uh everything completed just fine so now because i'm on windows i should be able to find my executable under debug and simpleprogram.exe and this is the actual program that got generated from the command line build here with cmake so i hope you guys understood what happens uh when you open this project with an ide when you build the project with an id he essentially does everything that we've done here once you open the project it will run cmake to configure the project and then generate those cache files and when building here is going to run this command cmake build with some other flags input flags onto this command here okay so let's do just that right now let's let's actually delete the build folder because we don't really need it anymore as you're going to be running on ides and we don't really care about the terminal shells or the command lines anymore as well let's open this project with visual studio and see what happens as i said you should have in theory everything you need here to open this project with visual studio okay and what you got to do is once you open visual studio you click on open local folder select the directory which in my case is simple program it's already selected for me and you can see that visual studio did its thing if you want to see that if the cmake worked or not you can simply click here on the output tab on the output section and click on cmake and you should see the exact same output very similar to what we had previously when we when we run cmake to configure on the command line so that's that's what i did under the hood so what you can do now uh to run the program is you're going to have to select the target here simple program.exe which comes from the cmake file the cmakelists file and we can simply run it and you can see that it just run successfully because it exited code zero it means it runs successfully and it simply exited the program after that so it builds just fine okay it's is interesting as well because we can actually on the id edit all the source file that we have for example the the intermain and the c make lists uh we can do we can do it all on visual studio or c line if you're using c line as a nice to have if you guys want to say hello from your code you can do this and this will get your program to say hello world on the console and exit immediately and if you run that again you should be able to see the changes i'm not going to explain too much what these things are here because i'm going to get into them in the future in this video i just want to show you guys how to use ides with with cmake to view the project okay now on c line it's exactly the same thing once you open up c line you're going to open this simple program directory as we'll be able to see it here it actually opened automatically for me if you haven't actually opened c line before you're going to have to click on file open and you're going to navigate to the directory we just created open simple program and we're ready to go and it should be the exact same thing as visual studio they do very similar things you can see that the project opened just fine so if you click on the cmake tab you should see again the configuration cmake command here and to compile it simple simply select a simple program exe and run it and you should be able to see that it said hello world and the process finished with code zero meaning it was all successful and that is it for this video at least you know exactly what happens under the hood in the id is now in terms of getting cmake to generate the structure of your project for you and you can build your simple c plus plus program with an ide now if you have any questions if you have got an error somewhere that you can't fix please post in the comments and i will make sure that i can help you guys solve your issues okay thanks for watching and bye