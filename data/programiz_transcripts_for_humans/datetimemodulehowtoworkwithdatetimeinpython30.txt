With timestamps:

00:00 - as simple as date and time may seem in
00:01 - real life they can be challenging to
00:03 - implement in our code
00:04 - because we have to keep record of things
00:06 - such as different date and time formats
00:08 - different time zones and so on
00:10 - fortunately python provides a built-in
00:13 - date time module to simplify this task
00:15 - in this video we will use the datetime
00:17 - module to manipulate date and time in
00:18 - python
00:19 - with the help of examples so let's get
00:21 - started
00:25 - before we dig deeper into the daytime
00:27 - module let's first find the current
00:29 - local date
00:30 - so in my code editor i'll say import
00:34 - date time as dt and i can say current
00:38 - underscore date equals dt
00:42 - dot date dot today and let me print it
00:45 - so i'll say print
00:47 - current underscore date
00:50 - here i have used the today method of the
00:53 - date class
00:55 - of the datetime module which i have
00:57 - imported as dt
00:58 - to get the current local date let me
01:01 - open up my terminal
01:02 - and here i'll say python
01:06 - main dot pi and as you can see i get
01:09 - 27 january 2021 which is today's date
01:12 - in nepal similar to the date class
01:15 - the daytime module has many other useful
01:18 - classes to work with date and time
01:20 - some of the popular classes defined
01:22 - inside the date time module are
01:23 - the date class to work with date the
01:25 - time class to work with time
01:27 - and the date time class that is a
01:29 - combination of date and time classes
01:31 - now let's cover each of these classes in
01:33 - detail
01:36 - the date class of the datetime module is
01:38 - used to create date objects
01:39 - that can store year month and day let me
01:42 - create a date object
01:43 - so i'll go to my code editor and here
01:45 - i'll say import
01:47 - datetime as dt and in the next line
01:50 - i can say date1 equals
01:53 - date now the first parameter is the year
01:56 - so i'll say 20 21 and the second
01:58 - parameter
01:59 - is the month between 1 and 12 so let me
02:02 - say january
02:03 - similarly the third parameter is the day
02:06 - of the month
02:06 - so let me give an arbitrary number like
02:08 - 5
02:11 - because this needs to be between 1 and
02:12 - 31 so let me close this
02:15 - and let me print what i get so print
02:17 - date 1
02:19 - so i will save this code open up my
02:20 - terminal and say python
02:22 - main dot pi as you can see i got the
02:26 - date back as expected
02:28 - instead of creating date like this we
02:30 - can also get today's date as we have
02:32 - previously discussed
02:33 - let me get the current date again i'll
02:35 - remove this whole code
02:36 - and i'll say dt dot date dot
02:39 - today and let me print the date 1 again
02:43 - and when i run this code you can see
02:46 - that i get 27 january 2021
02:49 - which is today's date or the date of
02:51 - this video recording
02:53 - we can also access the year month and
02:55 - day attribute separately
02:56 - let me show you how i'll remove this old
02:59 - code
03:00 - that prints the date and instead i'll
03:02 - say print
03:04 - year and let me print date one dot year
03:09 - similarly to print the month i'll say
03:11 - print
03:12 - month and here i'll say date one
03:15 - dot month and similarly to print the day
03:18 - i'll say print day
03:22 - date 1 dot d now let me save this file
03:27 - run the code and you can see that the
03:30 - year
03:31 - month and day have been printed
03:33 - separately
03:37 - the time class of the daytime module is
03:39 - used to create time objects that can
03:41 - store time of day
03:42 - like hours minutes seconds and micro
03:45 - seconds
03:46 - let me create a time object so i'll go
03:48 - to my code editor and i'll remove this
03:50 - old code
03:50 - i can say time one equals
03:53 - dt dot time now the time class takes
03:56 - integer arguments which are zero by
03:58 - default
03:59 - the first argument is the number of
04:01 - hours between 0 and 24
04:03 - so here i'll say 10 the second argument
04:06 - is minutes from 0 to 60 so here i'll say
04:09 - 45
04:10 - the third argument is seconds from 0 to
04:12 - 60 so let me say something arbitrary
04:15 - like 30
04:16 - and the fourth argument is microseconds
04:18 - from 0 to 1 million
04:20 - so let me add in a number like 45667
04:23 - i'll close this bracket let me print the
04:25 - time one to see what i get
04:27 - i'll save this file let me go to my
04:29 - terminal
04:30 - i'll say python main dot pi and as you
04:33 - can see
04:34 - i got a time object that stored the same
04:37 - time that i had sent in as arguments to
04:40 - the time class
04:42 - and if you need we can also access each
04:44 - individual attribute
04:45 - like the hour and minute separately let
04:48 - me show you how
04:49 - so here i'll say print hour
04:53 - is time one dot hour
04:57 - similarly minute
05:02 - is time one dot minute and
05:06 - second is time one dot second
05:10 - let me save this i'll go to my terminal
05:13 - python main dot pi
05:14 - and as you can see i got the hour minute
05:17 - and second separately
05:19 - let's also do micro seconds so i'll say
05:21 - print
05:22 - micro seconds
05:27 - and then i can say time one dot micro
05:29 - seconds
05:31 - if i save this file run this code
05:34 - it says time one dot oh it's micro
05:36 - second
05:38 - and run this file and as you can see i
05:40 - can also get the micro seconds
05:43 - the date times time class provides us
05:45 - some of the basic time functionalities
05:47 - however if you want more control and
05:49 - functionalities related to time
05:51 - we suggest you to use the time module we
05:54 - already have an article on it on our
05:55 - programming website in case you want to
05:56 - check it out
05:57 - the link will be in the video
05:58 - description
06:02 - the date time module has the date class
06:04 - to work with dates and the time class to
06:06 - work with time
06:07 - and if you need to work with both date
06:08 - and time at once the daytime module has
06:11 - also
06:11 - a datetime class the datetime class of
06:14 - the datetime module
06:15 - is used to create objects that contain
06:17 - all the information from a date object
06:19 - as well as a time object let me create a
06:21 - daytime object
06:22 - so i'll say import datetime as
06:25 - dt now let me create a daytime object so
06:28 - i'll say datetime
06:30 - underscore obj equals
06:33 - dot datetime the datetime class takes in
06:35 - all the integer arguments
06:37 - that are used by the date and the time
06:38 - class one after the other
06:40 - so here i can say 2021 which is the year
06:44 - 11 the month november 28th
06:47 - so 28th of november then i can say the
06:49 - time is
06:50 - 23 or 11 pm 55
06:54 - so 11 55 pm and then 59 seconds
06:57 - so almost midnight let me close the
06:59 - bracket
07:00 - and i can say print date time underscore
07:03 - obj and let me see what i get so let me
07:06 - go to the terminal
07:07 - and say python main dot pi and as you
07:11 - can see
07:12 - i get a daytime object that represents
07:14 - the time based on the arguments that i
07:16 - passed here
07:18 - now if i only need to get the date from
07:19 - this daytime object
07:21 - i can always use the date method so let
07:23 - me hide the terminal
07:25 - and here i'll say print datetime
07:28 - underscore obj and i want to call the
07:30 - date method of this object
07:33 - so here let me save this file and i'll
07:35 - run python main dot pi
07:37 - and as you can see i got the date object
07:39 - separately
07:40 - similarly to get the time i can use the
07:42 - time method
07:44 - so here i'll say print
07:47 - date time underscore obj dot
07:50 - time let me save
07:54 - and run this code and as you can see
07:57 - i get the date time object then by using
08:00 - the date method
08:01 - i separate the date object and similarly
08:04 - by using the time method
08:06 - i separate the time object like with
08:09 - data and time objects
08:10 - we can also access individual attributes
08:12 - like year
08:13 - month and hour as we have previously
08:16 - discussed
08:18 - to get the current local date and time
08:20 - at once we can use the now method of the
08:22 - datetime object
08:24 - so i'll go to my code editor and i'll
08:25 - say import
08:27 - date time as dt now to get the current
08:31 - date time i can just say
08:32 - current underscore date time
08:35 - equals dt dot datetime.now now let me
08:40 - print this
08:40 - so i'll say print current underscore
08:44 - datetime and save this file go to my
08:46 - terminal
08:47 - say main.pie and as you can see i got
08:51 - the current
08:51 - date and time so it is 5 48 p.m
08:55 - on 27 january 2021 right now during the
08:58 - time of this recording
09:00 - by the way if you're finding these
09:01 - videos useful a sub to the channel would
09:04 - be much appreciated
09:05 - before moving to the next section of the
09:07 - video the programming team has created
09:09 - an app
09:09 - that allows you to learn python from
09:11 - your phone the app contains bit size
09:13 - lessons that are easier to understand
09:14 - a built-in interpreter so that you can
09:16 - run python on your phone
09:18 - quizzes and many more features the app
09:20 - is available on both ios and android
09:22 - the links are in the video description
09:27 - a time delta object represents the
09:29 - difference between two dates or times
09:31 - let me show you what i mean to
09:33 - demonstrate this i will find out the
09:34 - time difference between
09:36 - now and the next new year let me go back
09:38 - to my code editor and say import
09:40 - date time as dt now let me get the
09:43 - current time so i'll say current
09:45 - underscore
09:45 - time equals dt dot datetime.now we
09:49 - already
09:50 - know this now the next new year is next
09:53 - underscore new underscore year equals dt
09:57 - dot date time and the integers arguments
10:00 - are
10:00 - 2022 and january is 1
10:03 - and again 1st january is 1.
10:06 - now to calculate the time remaining i
10:08 - can say time underscore remaining
10:11 - equals next new
10:14 - year minus current underscore time
10:18 - let me print this and see what we get so
10:21 - i'll say print
10:22 - time remaining save this file
10:26 - go to my terminal run python main dot pi
10:30 - and as you can see it tells me that
10:31 - there are 330 days
10:33 - six hours nine minutes zero seconds
10:36 - and three three five five seven six
10:38 - micro seconds
10:39 - from now to the next new year
10:43 - now let me see what the type of the time
10:44 - remaining variable is
10:46 - so here i'll say print type time
10:49 - remaining
10:50 - and when i run this code you can see
10:53 - that it gives me class
10:54 - datetime.time delta that means the
10:58 - difference between two date times
11:00 - is a time delta object this time delta
11:03 - object can also be added to
11:05 - or subtracted from daytime objects to
11:07 - get new date time objects
11:12 - the strf time method returns a string
11:14 - representing date and time for the date
11:16 - time object
11:18 - we know that there are many formats to
11:19 - write the date and time depending on
11:21 - your location
11:22 - if you're in the us you probably use
11:24 - month day year format
11:26 - but if you're in the uk you will
11:27 - generally use the day month year format
11:30 - the strf time method allows us to
11:32 - display the date and time in a custom
11:34 - specific format
11:36 - let me show you what i mean i'll go to
11:37 - my text editor and i'll say import
11:41 - date time as dt let me get the current
11:44 - date time
11:46 - so i'll say dt dot date time
11:49 - dot now let me print the current date
11:53 - time so print
11:54 - current underscore date time i'll save
11:57 - this file
11:58 - go to my terminal and say python main.pi
12:01 - and as you can see
12:02 - this is the current date and time during
12:04 - the time of this recording
12:05 - in the standard format if i wanted to
12:08 - print the date in a different way
12:09 - i could convert this datetime object to
12:11 - a date string in a specific format
12:13 - let me show you how string underscore
12:16 - date
12:17 - equals current underscore
12:20 - datetime dot because i want to call the
12:23 - str
12:23 - f time method and inside this fta strf
12:26 - time method i'll pass an argument
12:28 - as percentage capital a comma
12:33 - percentage capital b space percentage d
12:37 - comma percentage capital y
12:40 - let me print this string underscore date
12:44 - i'll go to my terminal and say python
12:47 - mean dot pi
12:49 - and you can see wednesday comma january
12:52 - 27 comma 2021 is printed
12:55 - this date is now in a much more human
12:57 - readable format
12:59 - here i am taking the current underscore
13:01 - date time object and calling the strf
13:03 - time method on it
13:05 - to get the string in the date format
13:07 - here percentage a
13:09 - represents the weekday name that is
13:11 - wednesday
13:13 - similarly percentage b represents the
13:15 - month's full name
13:16 - which is january d represents the day of
13:20 - the month
13:21 - which is 27 since the time of this
13:23 - recording it's january 27th
13:26 - similarly percentage y is the year which
13:28 - is 2021.
13:30 - i could have also printed the date and
13:31 - time in a different format
13:33 - let me show you how that works so i'll
13:34 - remove the terminal and here
13:36 - let me change the format to something
13:38 - else i'll say
13:40 - percentage b space
13:44 - percentage dash d comma percentage
13:48 - i and percentage p now let me run this
13:51 - code
13:52 - so here i'll say python main dot pi
13:56 - and as you can see i have printed the
13:59 - same date in a different format
14:02 - here these are format codes that made it
14:05 - possible to transform our datetime
14:07 - object to a string in a certain format
14:09 - there are many such format codes
14:11 - available for us to use
14:13 - don't worry you don't need to memorize
14:15 - all these format codes you can visit our
14:17 - article on strf time to search among all
14:19 - the formatting directives
14:21 - as per your needs the link will be in
14:22 - the description below
14:25 - the strp time method is the opposite of
14:27 - the strf time method
14:28 - the sdrf time method converts datetime
14:31 - objects to strings
14:32 - whereas the strp time method converts
14:34 - strings to datetime objects
14:36 - let me show you what i mean and i'll say
14:38 - import datetime as
14:40 - dt then i can say date underscore string
14:43 - equals so let me pass in a date that
14:46 - looks like 21
14:47 - june 2021
14:50 - and then i can convert this to a date
14:52 - object by saying
14:54 - date underscore object equals
14:57 - dt dot date time dot
15:00 - str p time and the first argument
15:04 - is the date string so here i'll say date
15:07 - underscore string
15:08 - the second argument is as before the
15:10 - codes that represent
15:12 - the different parts of the date so i can
15:14 - say percentage d because 21 is the
15:16 - number of
15:17 - the day and then i can say percentage b
15:22 - comma similarly year in numeric format
15:25 - was percentage
15:26 - y and then end the code in the bracket
15:30 - now let me print what date object i get
15:33 - so let me say print
15:35 - date object and here i can say date
15:39 - underscore
15:40 - object let me go to my terminal say
15:43 - python
15:44 - main dot pi and as you can see i got the
15:47 - date object that i was looking for
15:50 - here i have passed both the string and
15:53 - the format in which
15:55 - the date is represented in the string as
15:57 - parameters to the strp time method
16:00 - of the datetime class of the datetime
16:02 - module
16:03 - and this gave me the datetime object
16:06 - as i said before percentage d represents
16:09 - the day of month similarly percentage b
16:13 - represents the month's name in full and
16:16 - percentage y
16:17 - represents the year it's also important
16:20 - for me to leave this comma
16:22 - and space here because it's the format
16:24 - that my date is in
16:26 - while using strp time the string and the
16:28 - format code must match
16:30 - exactly if the string and the format
16:32 - code don't match we will get the value
16:34 - error exception
16:35 - now that we know about strp time and
16:37 - strf time
16:38 - we can convert any date in any format to
16:41 - another
16:42 - for example if i have a date string in
16:44 - the uk format
16:45 - and need to convert it to the us format
16:47 - i can first convert the uk date string
16:50 - to a daytime object using the strp time
16:52 - and then convert this object back to a
16:54 - string in us format
16:56 - using strf time at this point we have
16:59 - covered all the basics of using the
17:00 - datetime module
17:01 - except one important topic handling time
17:03 - zones time zones can be especially
17:05 - tricky
17:06 - if you're working with them for the
17:07 - first time for example in nepal it's
17:10 - currently 6
17:10 - 05 pm which means it's 7 20 am in new
17:14 - york
17:14 - and 5 50 in india as this video is
17:17 - already long
17:18 - we will not cover this topic in this
17:19 - video if you want to learn how to
17:21 - handle time zone issues in python we
17:23 - suggest you to use the pi tz module
17:25 - it's the same module recommended by the
17:27 - official python documentation
17:29 - that's it for this video if you want to
17:30 - revise these concepts you can find all
17:32 - these programs in our github repository
17:34 - i'll also put this link in the video
17:36 - description and if you like this video
17:38 - hit that like button and subscribe to
17:40 - the channel and i'll see you in the next
17:41 - one
17:42 - happy programming
17:52 - you

Cleaned transcript:

as simple as date and time may seem in real life they can be challenging to implement in our code because we have to keep record of things such as different date and time formats different time zones and so on fortunately python provides a builtin date time module to simplify this task in this video we will use the datetime module to manipulate date and time in python with the help of examples so let's get started before we dig deeper into the daytime module let's first find the current local date so in my code editor i'll say import date time as dt and i can say current underscore date equals dt dot date dot today and let me print it so i'll say print current underscore date here i have used the today method of the date class of the datetime module which i have imported as dt to get the current local date let me open up my terminal and here i'll say python main dot pi and as you can see i get 27 january 2021 which is today's date in nepal similar to the date class the daytime module has many other useful classes to work with date and time some of the popular classes defined inside the date time module are the date class to work with date the time class to work with time and the date time class that is a combination of date and time classes now let's cover each of these classes in detail the date class of the datetime module is used to create date objects that can store year month and day let me create a date object so i'll go to my code editor and here i'll say import datetime as dt and in the next line i can say date1 equals date now the first parameter is the year so i'll say 20 21 and the second parameter is the month between 1 and 12 so let me say january similarly the third parameter is the day of the month so let me give an arbitrary number like 5 because this needs to be between 1 and 31 so let me close this and let me print what i get so print date 1 so i will save this code open up my terminal and say python main dot pi as you can see i got the date back as expected instead of creating date like this we can also get today's date as we have previously discussed let me get the current date again i'll remove this whole code and i'll say dt dot date dot today and let me print the date 1 again and when i run this code you can see that i get 27 january 2021 which is today's date or the date of this video recording we can also access the year month and day attribute separately let me show you how i'll remove this old code that prints the date and instead i'll say print year and let me print date one dot year similarly to print the month i'll say print month and here i'll say date one dot month and similarly to print the day i'll say print day date 1 dot d now let me save this file run the code and you can see that the year month and day have been printed separately the time class of the daytime module is used to create time objects that can store time of day like hours minutes seconds and micro seconds let me create a time object so i'll go to my code editor and i'll remove this old code i can say time one equals dt dot time now the time class takes integer arguments which are zero by default the first argument is the number of hours between 0 and 24 so here i'll say 10 the second argument is minutes from 0 to 60 so here i'll say 45 the third argument is seconds from 0 to 60 so let me say something arbitrary like 30 and the fourth argument is microseconds from 0 to 1 million so let me add in a number like 45667 i'll close this bracket let me print the time one to see what i get i'll save this file let me go to my terminal i'll say python main dot pi and as you can see i got a time object that stored the same time that i had sent in as arguments to the time class and if you need we can also access each individual attribute like the hour and minute separately let me show you how so here i'll say print hour is time one dot hour similarly minute is time one dot minute and second is time one dot second let me save this i'll go to my terminal python main dot pi and as you can see i got the hour minute and second separately let's also do micro seconds so i'll say print micro seconds and then i can say time one dot micro seconds if i save this file run this code it says time one dot oh it's micro second and run this file and as you can see i can also get the micro seconds the date times time class provides us some of the basic time functionalities however if you want more control and functionalities related to time we suggest you to use the time module we already have an article on it on our programming website in case you want to check it out the link will be in the video description the date time module has the date class to work with dates and the time class to work with time and if you need to work with both date and time at once the daytime module has also a datetime class the datetime class of the datetime module is used to create objects that contain all the information from a date object as well as a time object let me create a daytime object so i'll say import datetime as dt now let me create a daytime object so i'll say datetime underscore obj equals dot datetime the datetime class takes in all the integer arguments that are used by the date and the time class one after the other so here i can say 2021 which is the year 11 the month november 28th so 28th of november then i can say the time is 23 or 11 pm 55 so 11 55 pm and then 59 seconds so almost midnight let me close the bracket and i can say print date time underscore obj and let me see what i get so let me go to the terminal and say python main dot pi and as you can see i get a daytime object that represents the time based on the arguments that i passed here now if i only need to get the date from this daytime object i can always use the date method so let me hide the terminal and here i'll say print datetime underscore obj and i want to call the date method of this object so here let me save this file and i'll run python main dot pi and as you can see i got the date object separately similarly to get the time i can use the time method so here i'll say print date time underscore obj dot time let me save and run this code and as you can see i get the date time object then by using the date method i separate the date object and similarly by using the time method i separate the time object like with data and time objects we can also access individual attributes like year month and hour as we have previously discussed to get the current local date and time at once we can use the now method of the datetime object so i'll go to my code editor and i'll say import date time as dt now to get the current date time i can just say current underscore date time equals dt dot datetime.now now let me print this so i'll say print current underscore datetime and save this file go to my terminal say main.pie and as you can see i got the current date and time so it is 5 48 p.m on 27 january 2021 right now during the time of this recording by the way if you're finding these videos useful a sub to the channel would be much appreciated before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description a time delta object represents the difference between two dates or times let me show you what i mean to demonstrate this i will find out the time difference between now and the next new year let me go back to my code editor and say import date time as dt now let me get the current time so i'll say current underscore time equals dt dot datetime.now we already know this now the next new year is next underscore new underscore year equals dt dot date time and the integers arguments are 2022 and january is 1 and again 1st january is 1. now to calculate the time remaining i can say time underscore remaining equals next new year minus current underscore time let me print this and see what we get so i'll say print time remaining save this file go to my terminal run python main dot pi and as you can see it tells me that there are 330 days six hours nine minutes zero seconds and three three five five seven six micro seconds from now to the next new year now let me see what the type of the time remaining variable is so here i'll say print type time remaining and when i run this code you can see that it gives me class datetime.time delta that means the difference between two date times is a time delta object this time delta object can also be added to or subtracted from daytime objects to get new date time objects the strf time method returns a string representing date and time for the date time object we know that there are many formats to write the date and time depending on your location if you're in the us you probably use month day year format but if you're in the uk you will generally use the day month year format the strf time method allows us to display the date and time in a custom specific format let me show you what i mean i'll go to my text editor and i'll say import date time as dt let me get the current date time so i'll say dt dot date time dot now let me print the current date time so print current underscore date time i'll save this file go to my terminal and say python main.pi and as you can see this is the current date and time during the time of this recording in the standard format if i wanted to print the date in a different way i could convert this datetime object to a date string in a specific format let me show you how string underscore date equals current underscore datetime dot because i want to call the str f time method and inside this fta strf time method i'll pass an argument as percentage capital a comma percentage capital b space percentage d comma percentage capital y let me print this string underscore date i'll go to my terminal and say python mean dot pi and you can see wednesday comma january 27 comma 2021 is printed this date is now in a much more human readable format here i am taking the current underscore date time object and calling the strf time method on it to get the string in the date format here percentage a represents the weekday name that is wednesday similarly percentage b represents the month's full name which is january d represents the day of the month which is 27 since the time of this recording it's january 27th similarly percentage y is the year which is 2021. i could have also printed the date and time in a different format let me show you how that works so i'll remove the terminal and here let me change the format to something else i'll say percentage b space percentage dash d comma percentage i and percentage p now let me run this code so here i'll say python main dot pi and as you can see i have printed the same date in a different format here these are format codes that made it possible to transform our datetime object to a string in a certain format there are many such format codes available for us to use don't worry you don't need to memorize all these format codes you can visit our article on strf time to search among all the formatting directives as per your needs the link will be in the description below the strp time method is the opposite of the strf time method the sdrf time method converts datetime objects to strings whereas the strp time method converts strings to datetime objects let me show you what i mean and i'll say import datetime as dt then i can say date underscore string equals so let me pass in a date that looks like 21 june 2021 and then i can convert this to a date object by saying date underscore object equals dt dot date time dot str p time and the first argument is the date string so here i'll say date underscore string the second argument is as before the codes that represent the different parts of the date so i can say percentage d because 21 is the number of the day and then i can say percentage b comma similarly year in numeric format was percentage y and then end the code in the bracket now let me print what date object i get so let me say print date object and here i can say date underscore object let me go to my terminal say python main dot pi and as you can see i got the date object that i was looking for here i have passed both the string and the format in which the date is represented in the string as parameters to the strp time method of the datetime class of the datetime module and this gave me the datetime object as i said before percentage d represents the day of month similarly percentage b represents the month's name in full and percentage y represents the year it's also important for me to leave this comma and space here because it's the format that my date is in while using strp time the string and the format code must match exactly if the string and the format code don't match we will get the value error exception now that we know about strp time and strf time we can convert any date in any format to another for example if i have a date string in the uk format and need to convert it to the us format i can first convert the uk date string to a daytime object using the strp time and then convert this object back to a string in us format using strf time at this point we have covered all the basics of using the datetime module except one important topic handling time zones time zones can be especially tricky if you're working with them for the first time for example in nepal it's currently 6 05 pm which means it's 7 20 am in new york and 5 50 in india as this video is already long we will not cover this topic in this video if you want to learn how to handle time zone issues in python we suggest you to use the pi tz module it's the same module recommended by the official python documentation that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming you
