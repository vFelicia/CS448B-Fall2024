With timestamps:

00:00 - in this video i want to talk a little
00:01 - bit about how to think like a programmer
00:04 - now uh you many of you would be
00:06 - wondering you know is a programmer a
00:08 - different being from space
00:09 - that i i need to learn to think like a
00:11 - programmer that's not true
00:12 - a programmer mindset is a problem
00:14 - solvers mindset if you don't approach
00:16 - any problem with the right mindset then
00:18 - you know it will be
00:19 - your experience will be fulfilled with
00:21 - frustration and that is why today i
00:23 - wanted to list a few points
00:24 - point number one being understand the
00:27 - problem first i know many programmers
00:29 - who
00:29 - you know i will just give them the brief
00:31 - a tiny brief like i need to build a
00:33 - website
00:34 - and then they'll start the laptop and
00:35 - start coding that's uh that's a terrible
00:38 - approach first you need to understand
00:40 - what the problem really is
00:42 - what the client or the person who is
00:43 - asking you to solve the problem really
00:45 - wants or if it's your problem what do
00:46 - you want from the solution
00:49 - really you know map it out on a piece of
00:52 - paper
00:53 - there are tools like mind maps and
00:55 - flowcharts that can help you
00:57 - really define the problem better and if
01:00 - you
01:00 - think of a programming like a flow
01:04 - of data from you know one state to
01:05 - another then it will start opening up
01:08 - your mind towards
01:09 - really how do i solve this problem and
01:11 - instead if you think in terms of for
01:13 - loops and while loops and if statements
01:15 - then you know you might not really solve
01:17 - the problem and you might just
01:21 - fulfill your need to feel smart but
01:23 - that's not the right approach so
01:25 - spend some time understanding the
01:26 - problem spend some time understanding
01:28 - what uh you know what is the difference
01:31 - between have and want because that is
01:35 - what a problem is
01:36 - so really try to understand and design a
01:39 - solution to the problem
01:41 - now number two is related to number one
01:43 - it's divide problem into sub problems
01:45 - now i'm not just talking about you know
01:47 - programming uh
01:48 - like there's a big function and you
01:50 - break it down into smaller functions
01:52 - i'm also not talking about a more
01:54 - abstract concept
01:55 - for example if you are going to build uh
01:58 - some
01:59 - very simple automation then you know
02:02 - there's
02:03 - there's some form of data coming into
02:05 - the system some form of data going out
02:07 - then there must be authorization
02:09 - authentication who needs to be able to
02:11 - do what so there are these common
02:14 - sub problems in every problem and then
02:16 - if you
02:17 - again if you go back to number one
02:20 - understand these sub problems
02:22 - build flow charts mind maps for these
02:24 - sub problems and then look at the bigger
02:26 - picture again
02:27 - i think it will help you become a better
02:29 - programmer and that is the kind of
02:30 - mindset that you will need to become a
02:32 - professional programmer
02:33 - if you get stuck in you know just coding
02:36 - coding coding
02:37 - and not really focusing on dividing into
02:40 - sub problems and
02:42 - you know understanding the problem
02:44 - really asking questions and all that
02:46 - then you'll always be stuck in the
02:47 - beginners mindset but
02:49 - we want to grow and we want to become
02:51 - bigger
02:52 - so i suggest that start this habit of
02:55 - taking a big problem and then chunking
02:57 - it out into smaller problems
02:59 - and then tackling those smaller sub
03:02 - problems one by one
03:03 - number three is uh never give up now
03:06 - this might sound like a cliche but you
03:09 - know because programming is
03:11 - filled with errors and bugs and it's
03:14 - it's mostly you know
03:15 - like uh not really you don't spend a lot
03:17 - of time coding that that's such a huge
03:19 - myth if you if someone were to measure
03:22 - how much time someone spends really
03:23 - typing out code then
03:25 - they would we would find out that so
03:27 - much time is spent
03:28 - researching and learning how to fix bugs
03:32 - the whole process of programming
03:33 - involves fixing bugs and fixing errors
03:35 - and looking at error messages
03:37 - putting them on google or whatever
03:38 - search engine you prefer and finding out
03:41 - if someone else
03:42 - had the same problem reading up on
03:44 - documentation
03:46 - so this whole industry is built around
03:49 - error messages or the processes built
03:52 - around mistakes
03:53 - and that is also the joy of programming
03:56 - you know you get to learn so much you
03:57 - get to fix things but
04:00 - it can also be frustrating i personally
04:03 - have been stuck with one bug for
04:05 - you know there was there was this one
04:06 - issue when i was
04:08 - trying to connect some data in java to
04:11 - uh other data in a programming language
04:14 - called r
04:15 - and it was sort of uh
04:18 - a black box because i was using this
04:20 - library that was not very
04:22 - uh that did not have much documentation
04:25 - so going into source code
04:27 - really doing a lot of things myself and
04:29 - you know
04:30 - it took me a month a whole month to fix
04:32 - that bug
04:33 - but at the end i emerged victorious and
04:35 - i was able to deploy that system so
04:37 - the next thing you need to remember to
04:39 - build a programmer's mindset
04:40 - is to start asking for help so you don't
04:42 - have to do everything on your own if you
04:44 - get stuck
04:45 - you have other team members in your
04:47 - company or in your school or college
04:49 - who can help you out you know and two
04:51 - heads are better than one
04:52 - obviously sometimes you are just stuck
04:55 - somewhere and someone can come in and
04:57 - you know the the
04:58 - solution will be apparent to someone
05:00 - else or
05:01 - now getting help is not just about
05:03 - getting help from people you know
05:05 - there are wonderful people all over the
05:06 - internet who can help you go to
05:08 - communities go to uh
05:10 - stack overflow there are slack channels
05:12 - and discord channels filled with
05:14 - programmers who have
05:15 - uh achieved so many things of in their
05:17 - life and if you're working on say a
05:18 - framework like react or
05:20 - or django then there are specific niche
05:22 - communities for
05:23 - started by those people involved in
05:26 - those projects as well
05:27 - so if you get stuck there's always one
05:30 - community
05:31 - where you know there are other people
05:32 - who are willing to help last point about
05:34 - having the programmers mindset
05:35 - is to be patient and to practice and
05:38 - improve
05:39 - there's a lot of content out there that
05:41 - will say you know become a developer a
05:43 - web developer in three months or one
05:45 - month or six months
05:46 - but yes you know you can become an entry
05:49 - level web developer or a programmer in
05:51 - six months
05:52 - but there's so many aspects of
05:54 - programming that
05:55 - you will only learn after building
05:57 - different different different projects
05:59 - you know
05:59 - like one project will teach you one
06:01 - thing maybe it will teach you
06:02 - authorization and authentication
06:04 - another project will teach you something
06:06 - else another project will teach you how
06:08 - data
06:09 - flows from one state to another another
06:11 - might teach you functional programming
06:12 - another might teach you
06:14 - machine learning another might teach you
06:15 - the basics of data science
06:17 - or even smaller aspects of data science
06:19 - so
06:20 - really unless you do 10 or 20 or 30
06:23 - projects
06:24 - you will not have a big picture of how
06:26 - the industry works
06:27 - it takes a lot of practice and working
06:30 - with people from different fields to
06:31 - learn programming
06:32 - and if you want to develop a
06:34 - professional programmer's mindset
06:36 - then this is the one aspect that you
06:37 - need to remember it's going to take time
06:40 - don't don't read
06:43 - too many blogs around you know becoming
06:46 - a rockstar programming in three months
06:48 - or six months
06:49 - there are people running a business on
06:51 - promising you the world in few months
06:54 - but at program is we don't do that the
06:56 - reality is programming is hard
06:58 - it takes time but it's also fun realize
07:01 - that
07:01 - it's going to take time but again as i
07:03 - mentioned in the other points
07:05 - get help from people uh you know
07:08 - embrace errors and embrace the process
07:12 - if you start enjoying the process then
07:13 - it will be fun but if you
07:15 - just focus on oes you know six months
07:18 - down the line i'll be an amazing
07:19 - programmer and if you're not enjoying
07:20 - the process
07:21 - then you're not going to get there i
07:23 - hope this video was useful
07:24 - stay curious i'll see in the next one
07:35 - you

Cleaned transcript:

in this video i want to talk a little bit about how to think like a programmer now uh you many of you would be wondering you know is a programmer a different being from space that i i need to learn to think like a programmer that's not true a programmer mindset is a problem solvers mindset if you don't approach any problem with the right mindset then you know it will be your experience will be fulfilled with frustration and that is why today i wanted to list a few points point number one being understand the problem first i know many programmers who you know i will just give them the brief a tiny brief like i need to build a website and then they'll start the laptop and start coding that's uh that's a terrible approach first you need to understand what the problem really is what the client or the person who is asking you to solve the problem really wants or if it's your problem what do you want from the solution really you know map it out on a piece of paper there are tools like mind maps and flowcharts that can help you really define the problem better and if you think of a programming like a flow of data from you know one state to another then it will start opening up your mind towards really how do i solve this problem and instead if you think in terms of for loops and while loops and if statements then you know you might not really solve the problem and you might just fulfill your need to feel smart but that's not the right approach so spend some time understanding the problem spend some time understanding what uh you know what is the difference between have and want because that is what a problem is so really try to understand and design a solution to the problem now number two is related to number one it's divide problem into sub problems now i'm not just talking about you know programming uh like there's a big function and you break it down into smaller functions i'm also not talking about a more abstract concept for example if you are going to build uh some very simple automation then you know there's there's some form of data coming into the system some form of data going out then there must be authorization authentication who needs to be able to do what so there are these common sub problems in every problem and then if you again if you go back to number one understand these sub problems build flow charts mind maps for these sub problems and then look at the bigger picture again i think it will help you become a better programmer and that is the kind of mindset that you will need to become a professional programmer if you get stuck in you know just coding coding coding and not really focusing on dividing into sub problems and you know understanding the problem really asking questions and all that then you'll always be stuck in the beginners mindset but we want to grow and we want to become bigger so i suggest that start this habit of taking a big problem and then chunking it out into smaller problems and then tackling those smaller sub problems one by one number three is uh never give up now this might sound like a cliche but you know because programming is filled with errors and bugs and it's it's mostly you know like uh not really you don't spend a lot of time coding that that's such a huge myth if you if someone were to measure how much time someone spends really typing out code then they would we would find out that so much time is spent researching and learning how to fix bugs the whole process of programming involves fixing bugs and fixing errors and looking at error messages putting them on google or whatever search engine you prefer and finding out if someone else had the same problem reading up on documentation so this whole industry is built around error messages or the processes built around mistakes and that is also the joy of programming you know you get to learn so much you get to fix things but it can also be frustrating i personally have been stuck with one bug for you know there was there was this one issue when i was trying to connect some data in java to uh other data in a programming language called r and it was sort of uh a black box because i was using this library that was not very uh that did not have much documentation so going into source code really doing a lot of things myself and you know it took me a month a whole month to fix that bug but at the end i emerged victorious and i was able to deploy that system so the next thing you need to remember to build a programmer's mindset is to start asking for help so you don't have to do everything on your own if you get stuck you have other team members in your company or in your school or college who can help you out you know and two heads are better than one obviously sometimes you are just stuck somewhere and someone can come in and you know the the solution will be apparent to someone else or now getting help is not just about getting help from people you know there are wonderful people all over the internet who can help you go to communities go to uh stack overflow there are slack channels and discord channels filled with programmers who have uh achieved so many things of in their life and if you're working on say a framework like react or or django then there are specific niche communities for started by those people involved in those projects as well so if you get stuck there's always one community where you know there are other people who are willing to help last point about having the programmers mindset is to be patient and to practice and improve there's a lot of content out there that will say you know become a developer a web developer in three months or one month or six months but yes you know you can become an entry level web developer or a programmer in six months but there's so many aspects of programming that you will only learn after building different different different projects you know like one project will teach you one thing maybe it will teach you authorization and authentication another project will teach you something else another project will teach you how data flows from one state to another another might teach you functional programming another might teach you machine learning another might teach you the basics of data science or even smaller aspects of data science so really unless you do 10 or 20 or 30 projects you will not have a big picture of how the industry works it takes a lot of practice and working with people from different fields to learn programming and if you want to develop a professional programmer's mindset then this is the one aspect that you need to remember it's going to take time don't don't read too many blogs around you know becoming a rockstar programming in three months or six months there are people running a business on promising you the world in few months but at program is we don't do that the reality is programming is hard it takes time but it's also fun realize that it's going to take time but again as i mentioned in the other points get help from people uh you know embrace errors and embrace the process if you start enjoying the process then it will be fun but if you just focus on oes you know six months down the line i'll be an amazing programmer and if you're not enjoying the process then you're not going to get there i hope this video was useful stay curious i'll see in the next one you
