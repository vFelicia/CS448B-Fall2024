With timestamps:

00:00 - hey guys this is me padma from pragyamis
00:02 - and welcome back to this series on c
00:04 - programming in this video we'll learn
00:05 - about break and continue statement to
00:08 - alter the normal slow of loops in c
00:10 - programming so let's get started
00:16 - the break statement immediately
00:17 - terminates the loop when it is
00:19 - encountered before we move forward let's
00:21 - see the working of loop first here i
00:24 - have used for loop the loop starts from
00:26 - i is equals to 1 to i is equals to 5 and
00:30 - it prints the value of i
00:33 - so let me run this code
00:34 - as you can see we get the output from 1
00:37 - to 5.
00:39 - now let me use break statement inside
00:41 - the loop after the print statement and
00:44 - i'll run this code this time i only get
00:47 - one as output
00:48 - let's see what happened here
00:50 - during the first iteration the value of
00:52 - i is equals to 1 so when the loop runs
00:56 - the value 1 is printed now after the
00:58 - print statement the break statement is
01:01 - encountered and this break statement
01:03 - immediately terminates the loop
01:05 - for more clarity let me add another
01:08 - print statement after this break
01:09 - statement so printf
01:12 - and i'll enter the message
01:15 - after
01:17 - the
01:18 - break
01:20 - so let's run this
01:24 - as you can see we get the same output
01:26 - one
01:27 - this is because when the break statement
01:29 - is encountered the loop exit and no
01:32 - other code of the for loop is executed
01:35 - we generally use the break statement
01:37 - with the decision making statement like
01:39 - if else statement this is why we can
01:42 - break a loop under a certain condition
01:44 - let's see an example i'll use the same
01:46 - code from earlier here i'll remove this
01:49 - break statement and the print statement
01:51 - after that now suppose i want to end the
01:54 - loop when the value of i is equals to 3
01:56 - so i'll add if statement
01:59 - so
02:01 - if statement with the condition i is
02:03 - equals to 3
02:05 - and inside this if statement i'll use
02:08 - break
02:10 - now i'll run this code
02:12 - as you can see we get the output
02:15 - 1 and 2.
02:16 - here during the first iteration the
02:18 - value of i is equals to 1 so this if
02:22 - statement is false so we'll go to this
02:25 - print statement and 1 is printed on the
02:28 - screen
02:29 - now the value of i is increased to 2 and
02:32 - this statement
02:34 - is again false because the condition
02:36 - does not meet and again this print
02:38 - statement is executed and 2 is printed
02:41 - on the screen
02:43 - when the value of i is equals to 3 the
02:46 - if condition is true and this break
02:48 - statement is executed and the loop
02:51 - terminates hence we get the output one
02:54 - and two
02:55 - by the way if you are watching this
02:56 - there is a good chance you want to
02:58 - improve your skills in c programming
03:00 - lucky for you we have a mobile app that
03:02 - provides a well-structured c programming
03:04 - course with certification at the end and
03:06 - you can use the app alongside the video
03:08 - to practice on the built-in compiler our
03:10 - course is free so download now by
03:12 - scanning this qr code or click the link
03:14 - in the video description
03:18 - let's now use the brick statement with
03:20 - while loop i'll create a program that
03:22 - will ask input values from the user if
03:25 - the user inputs a positive value it will
03:27 - be printed however if the user input a
03:29 - negative value the while loop is
03:31 - terminated i'll use the same code from
03:33 - earlier i'll remove this for loop i'll
03:36 - create a while loop
03:38 - that is always true and i'll use one as
03:41 - a condition of while loop because we
03:43 - know that one represents true in c
03:45 - programming
03:47 - so this while loop is always true now
03:50 - inside while loop i'll declare a
03:51 - variable number so int number
03:55 - and i'll ask the input from the user
03:58 - and i'll ask the user to enter a number
04:07 - and i'll store it using scanf function
04:16 - since i want to break the loop only if
04:19 - the input value is negative i'll add if
04:21 - statement with the condition number
04:24 - is
04:25 - less than 0
04:27 - then
04:28 - we'll
04:29 - break the loop
04:31 - and if it is not negative we'll print
04:34 - the value of the variable so i'll use
04:37 - printf statement so percent d
04:41 - and name of the variable that is number
04:45 - now let me run this code
04:47 - and i'll enter 5 you can see 5 is
04:49 - printed and i'll enter 9
04:52 - and it is also printed so now let's
04:55 - enter some negative value
04:58 - you can see the loop terminated
05:01 - here you can see as long as we entered
05:03 - positive value the while loop executed
05:07 - repeatedly however when the input is
05:09 - negative
05:10 - then the if statement becomes true and
05:12 - the break statement is executed and it
05:15 - terminates the loop
05:20 - now let's move to the continue statement
05:22 - unlike break the continue statement
05:24 - skips the current iteration of the loop
05:26 - and starts the loop with the next
05:28 - iteration let's see an example
05:31 - in this code we have used break
05:33 - statement to terminate the loop when the
05:35 - value of i is equals to 3 now let me
05:38 - replace this break statement with
05:40 - continue statement so continue
05:44 - and i'll run this code now if you look
05:46 - into the output you can see the value 3
05:49 - is not printed
05:50 - let's see why this happens
05:53 - we know that the loop runs for 5 times
05:57 - from i is equals to 1 to i is equals to
06:00 - 5 and during the first and second
06:02 - iteration the value of i r 1 and 2
06:05 - respectively so if condition is false
06:08 - for both iteration hence the loop runs
06:10 - normally and
06:12 - 1 and 2 are printed during the third
06:15 - iteration the value of i is equals to 3
06:18 - this time if condition is true and
06:21 - continuous statement is executed
06:24 - now the continue statement skips the
06:26 - current iteration of the loop and start
06:28 - the next iteration so the program jumps
06:30 - to this update expression and increase
06:32 - the value of i to 4 and again for the
06:35 - value 4 and 5 the if condition is false
06:39 - and loop runs normally and 4 and 5 is
06:42 - printed on the screen
06:44 - in this way for value 3 the continuous
06:47 - statement skips the print statement
06:50 - okay guys we need your support to keep
06:52 - this type of content free for all users
06:55 - youtube really likes engagement on the
06:56 - video so leave a comment below press
06:58 - that like button and hit subscribe if
07:00 - you haven't already let's keep the
07:02 - engagement score high up so that more
07:04 - people can discover and enjoy these
07:06 - courses
07:09 - we now know the working of break and
07:11 - continue let's use them together in a
07:13 - single loop i'll create a program that
07:15 - takes the input values from the user
07:17 - however i want the user to input
07:19 - positive number only so if the user
07:21 - enters 0 or negative number i'll use the
07:24 - break statement to terminate the loop
07:26 - also to make the program more
07:28 - interesting i'll only print the even
07:30 - numbers so if the user inputs an odd
07:32 - number i'll use the continue statement
07:35 - to skip the loop so that odd numbers are
07:37 - not printed let's start now
07:40 - here the break statement is already
07:42 - implemented that ends the loop if the
07:44 - number is a negative number
07:47 - since we want to exit the loop if the
07:49 - number is either negative or 0 i'll
07:51 - change this less than operator to less
07:53 - than or equal to operator
07:55 - now i want to run the continue statement
07:58 - if the number is odd so i'll add if
08:00 - statement
08:02 - with the condition
08:03 - number
08:04 - modulo 2
08:06 - is
08:07 - not equal to
08:09 - 0.
08:10 - so inside if
08:12 - we'll add continuous statement
08:15 - here the modulo operator returns a
08:17 - remainder so for a number to be odd it
08:20 - shouldn't have a remainder 0 when it is
08:22 - divided by 2.
08:24 - so let's run this code
08:27 - i'll enter 4
08:31 - you can see 4 is printed because it is
08:34 - an even number
08:36 - now i'll add
08:38 - 7 and i'll enter
08:42 - i'll enter even number 32 and you can
08:44 - see this 32 is also printed
08:48 - now let's enter
08:50 - a negative value
08:52 - so minus 3 you can see the loop is
08:55 - terminated
08:57 - so as you can see when the input value
09:00 - is positive
09:01 - and
09:02 - odd number this condition becomes true
09:04 - so the continue statement skips the
09:06 - print statement for the odd input value
09:09 - however when the input values are
09:11 - positive even numbers both the condition
09:14 - becomes false so it is printed when it
09:17 - is an even number when the input value
09:20 - is negative this condition number less
09:22 - than or equal to 0 becomes true so the
09:24 - break statement terminates the loop
09:29 - now to revise what we have learned it is
09:32 - a programming tax for you can you write
09:34 - a program that takes an input from the
09:36 - user and print it if the value is a
09:38 - negative odd number however if the input
09:41 - value is positive in the loop with the
09:43 - message positive value and if the input
09:45 - value is negative even skip the value
09:48 - with the message negative even so our
09:51 - output will look like this
09:53 - go ahead and try the problem and share
09:55 - your code in the comment below you can
09:58 - find the answers to this question in the
10:00 - github repository and if you want to
10:01 - revise the concept all the program used
10:04 - in this video are also present in there
10:06 - now that we have reached the end of this
10:08 - video it's time for programming squeeze
10:10 - which of the following keyword is used
10:12 - to skip the current iteration of all
10:15 - loop
10:16 - comment your answer below see you in the
10:18 - next video happy programming
10:24 - [Music]

Cleaned transcript:

hey guys this is me padma from pragyamis and welcome back to this series on c programming in this video we'll learn about break and continue statement to alter the normal slow of loops in c programming so let's get started the break statement immediately terminates the loop when it is encountered before we move forward let's see the working of loop first here i have used for loop the loop starts from i is equals to 1 to i is equals to 5 and it prints the value of i so let me run this code as you can see we get the output from 1 to 5. now let me use break statement inside the loop after the print statement and i'll run this code this time i only get one as output let's see what happened here during the first iteration the value of i is equals to 1 so when the loop runs the value 1 is printed now after the print statement the break statement is encountered and this break statement immediately terminates the loop for more clarity let me add another print statement after this break statement so printf and i'll enter the message after the break so let's run this as you can see we get the same output one this is because when the break statement is encountered the loop exit and no other code of the for loop is executed we generally use the break statement with the decision making statement like if else statement this is why we can break a loop under a certain condition let's see an example i'll use the same code from earlier here i'll remove this break statement and the print statement after that now suppose i want to end the loop when the value of i is equals to 3 so i'll add if statement so if statement with the condition i is equals to 3 and inside this if statement i'll use break now i'll run this code as you can see we get the output 1 and 2. here during the first iteration the value of i is equals to 1 so this if statement is false so we'll go to this print statement and 1 is printed on the screen now the value of i is increased to 2 and this statement is again false because the condition does not meet and again this print statement is executed and 2 is printed on the screen when the value of i is equals to 3 the if condition is true and this break statement is executed and the loop terminates hence we get the output one and two by the way if you are watching this there is a good chance you want to improve your skills in c programming lucky for you we have a mobile app that provides a wellstructured c programming course with certification at the end and you can use the app alongside the video to practice on the builtin compiler our course is free so download now by scanning this qr code or click the link in the video description let's now use the brick statement with while loop i'll create a program that will ask input values from the user if the user inputs a positive value it will be printed however if the user input a negative value the while loop is terminated i'll use the same code from earlier i'll remove this for loop i'll create a while loop that is always true and i'll use one as a condition of while loop because we know that one represents true in c programming so this while loop is always true now inside while loop i'll declare a variable number so int number and i'll ask the input from the user and i'll ask the user to enter a number and i'll store it using scanf function since i want to break the loop only if the input value is negative i'll add if statement with the condition number is less than 0 then we'll break the loop and if it is not negative we'll print the value of the variable so i'll use printf statement so percent d and name of the variable that is number now let me run this code and i'll enter 5 you can see 5 is printed and i'll enter 9 and it is also printed so now let's enter some negative value you can see the loop terminated here you can see as long as we entered positive value the while loop executed repeatedly however when the input is negative then the if statement becomes true and the break statement is executed and it terminates the loop now let's move to the continue statement unlike break the continue statement skips the current iteration of the loop and starts the loop with the next iteration let's see an example in this code we have used break statement to terminate the loop when the value of i is equals to 3 now let me replace this break statement with continue statement so continue and i'll run this code now if you look into the output you can see the value 3 is not printed let's see why this happens we know that the loop runs for 5 times from i is equals to 1 to i is equals to 5 and during the first and second iteration the value of i r 1 and 2 respectively so if condition is false for both iteration hence the loop runs normally and 1 and 2 are printed during the third iteration the value of i is equals to 3 this time if condition is true and continuous statement is executed now the continue statement skips the current iteration of the loop and start the next iteration so the program jumps to this update expression and increase the value of i to 4 and again for the value 4 and 5 the if condition is false and loop runs normally and 4 and 5 is printed on the screen in this way for value 3 the continuous statement skips the print statement okay guys we need your support to keep this type of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's keep the engagement score high up so that more people can discover and enjoy these courses we now know the working of break and continue let's use them together in a single loop i'll create a program that takes the input values from the user however i want the user to input positive number only so if the user enters 0 or negative number i'll use the break statement to terminate the loop also to make the program more interesting i'll only print the even numbers so if the user inputs an odd number i'll use the continue statement to skip the loop so that odd numbers are not printed let's start now here the break statement is already implemented that ends the loop if the number is a negative number since we want to exit the loop if the number is either negative or 0 i'll change this less than operator to less than or equal to operator now i want to run the continue statement if the number is odd so i'll add if statement with the condition number modulo 2 is not equal to 0. so inside if we'll add continuous statement here the modulo operator returns a remainder so for a number to be odd it shouldn't have a remainder 0 when it is divided by 2. so let's run this code i'll enter 4 you can see 4 is printed because it is an even number now i'll add 7 and i'll enter i'll enter even number 32 and you can see this 32 is also printed now let's enter a negative value so minus 3 you can see the loop is terminated so as you can see when the input value is positive and odd number this condition becomes true so the continue statement skips the print statement for the odd input value however when the input values are positive even numbers both the condition becomes false so it is printed when it is an even number when the input value is negative this condition number less than or equal to 0 becomes true so the break statement terminates the loop now to revise what we have learned it is a programming tax for you can you write a program that takes an input from the user and print it if the value is a negative odd number however if the input value is positive in the loop with the message positive value and if the input value is negative even skip the value with the message negative even so our output will look like this go ahead and try the problem and share your code in the comment below you can find the answers to this question in the github repository and if you want to revise the concept all the program used in this video are also present in there now that we have reached the end of this video it's time for programming squeeze which of the following keyword is used to skip the current iteration of all loop comment your answer below see you in the next video happy programming
