With timestamps:

00:00 - hey guys this is me padma from
00:01 - programming and welcome back to this
00:03 - series on c programming in this video
00:05 - we'll learn about functions to divide
00:07 - our program into small blocks of code
00:09 - we'll also learn different types of
00:11 - function available in c programming so
00:13 - let's get started
00:18 - in programming a function is a group of
00:20 - related statement that perform a
00:22 - specific task they help us divide a
00:25 - large program into smaller chunks so
00:27 - that it is easier to understand and
00:29 - modify them
00:30 - suppose you need to create a program
00:32 - that draws a circle and a rectangle of
00:35 - different colors based on user input
00:38 - instead of creating one big chunk of
00:40 - statement to create this program we can
00:43 - create three functions a function to
00:45 - create a circle function to create a
00:48 - rectangle and a function to color the
00:50 - seed
00:51 - doing this help us divide the complexity
00:54 - of the program and help us focus on the
00:56 - specific part of the program at a time
00:58 - now that you know why we need a function
01:01 - let's see how we can create a function
01:03 - in c programming on your screen you can
01:06 - see the syntax of the function
01:08 - here the return type indicates the data
01:10 - type of the value that is returned by
01:12 - this function function name
01:15 - the function name is the name of the
01:17 - function and this dot inside the curly
01:19 - braces indicates the statement inside
01:22 - the function now let's use this syntax
01:25 - and create a simple function that prints
01:27 - good morning here you can see the basic
01:30 - structure of c program now i'll start
01:33 - with the return type first so
01:36 - here i don't want to return any value
01:38 - from the function so i'll use void as
01:40 - the return type
01:42 - remember that if a function does not
01:44 - return any value use the void as a
01:46 - return type now i will write
01:48 - greet
01:50 - as the name of my function
01:52 - and don't forget to use the parentheses
01:55 - these are needed to denote that this is
01:58 - a function
01:59 - now inside the function
02:02 - i'll print
02:04 - good morning
02:05 - so good
02:08 - morning
02:11 - now let me run this code
02:13 - as you can see nothing happened this is
02:15 - because to run a function we need to
02:18 - call it now to call a function we use
02:21 - function name with the parenthesis so
02:24 - we use the name of the function that is
02:26 - grid with the parenthesis
02:28 - and i'll run this code
02:31 - now this time you see the output good
02:33 - morning let's see how this program works
02:36 - like any other c program the execution
02:39 - start from main and when it encounters
02:42 - the function call the control of the
02:44 - program moves to the function definition
02:47 - now the code inside the function is
02:49 - executed and good morning is printed on
02:52 - the screen
02:53 - once the execution of function is
02:55 - completed the program of the control
02:57 - moves back to the next line after the
03:00 - function call
03:02 - now to verify this we can print
03:05 - the statement after the function call so
03:08 - i'll print
03:09 - after
03:11 - function
03:13 - call
03:15 - and
03:16 - before i run this i'll add here
03:17 - backspace n
03:19 - now let's run this
03:21 - as you can see first the code inside the
03:23 - function is executed now the control
03:26 - move back to the function call so the
03:28 - code after the function call is executed
03:31 - so we get the output good morning and
03:34 - after function call
03:35 - and as discussed earlier one of the good
03:38 - thing about the function is code
03:40 - reusability now once we create a
03:42 - function we can reuse it any number of
03:44 - times all we need to do is call it
03:47 - whenever we need now let me show you
03:50 - i'll remove this print statement
03:53 - and i'll add
03:54 - grit
03:56 - two more times
03:57 - so great
04:02 - and i'll run this
04:04 - so this time you can see good morning is
04:06 - printed three times
04:08 - before we move to the next section here
04:10 - is a quick tip for you it is a good
04:12 - practice to use descriptive names for
04:15 - function so that anyone reading the code
04:17 - will know what the function is doing by
04:19 - just reading the function name
04:21 - here we are greeting good morning so we
04:24 - are using greet as its function name we
04:27 - can also use wish morning or any other
04:30 - descriptive function name
04:32 - by the way if you are watching this
04:33 - there is a good chance you want to
04:35 - improve your skills in c programming
04:37 - lucky for you we have a mobile app that
04:39 - provides a well-structured c programming
04:41 - course with certification at the end and
04:44 - you can use the app alongside the video
04:46 - to practice on the built-in compiler our
04:48 - course is free so download now by
04:50 - scanning this qr code or click the link
04:52 - in the video description
04:56 - so far we have created function that
04:59 - just prints messes however sometimes we
05:02 - might want to create function that
05:04 - accepts some value and perform some
05:06 - action based on that value for example
05:08 - suppose we want to create a function
05:10 - that accept a number and computes the
05:13 - square of the number and print it we can
05:15 - do this in c programming with the help
05:17 - of function parameters a parameter is a
05:20 - value accepted by the function now let
05:22 - me show you how we can create function
05:25 - with the parameter so let me get back to
05:27 - my previous code i'll remove this grid
05:29 - function
05:31 - and i'll also remove this function call
05:34 - now i'll add another function
05:36 - call it
05:38 - calculate
05:40 - square
05:41 - so
05:42 - calculate square
05:44 - and inside parenthesis i'll add function
05:47 - parameter
05:48 - int number
05:50 - now inside the function i'll do
05:53 - int
05:54 - square
05:55 - is equals to
05:57 - number
05:58 - multiplied by number
06:01 - then i'll print the number and it's
06:03 - square like
06:05 - printf bracket inside quotation
06:09 - square
06:11 - of
06:12 - percent d
06:13 - is percent d
06:17 - that is
06:18 - after comma number
06:21 - sorry number
06:23 - comma
06:25 - square
06:27 - now here in the main function i'll call
06:29 - the function
06:31 - calculate
06:33 - square
06:37 - now let me run this code
06:39 - here we get an error
06:42 - this is because when we create a
06:44 - function with a parameter we need to
06:47 - pass the value
06:49 - while calling the function so in the
06:51 - function call i'll add 5
06:54 - inside the parenthesis now i'll run this
06:56 - code again
06:58 - this time you'll see the output the
07:00 - square of 5 is 25 now let me tell you
07:03 - what happened here the calculate square
07:06 - function accepts the parameter so we
07:09 - call the function by passing the value
07:11 - 5. now the parameter number is assigned
07:14 - with the value 5 so when we use number
07:18 - inside the function we are using the
07:20 - value 5. a function can also accept
07:23 - multiple parameters let's see an example
07:26 - here i'll change this function name from
07:28 - calculate square to add
07:32 - numbers
07:33 - inside the parentheses i'll change this
07:35 - number
07:36 - to int number one and i'll add
07:39 - comma
07:40 - and i'll add int
07:43 - number two now i'll remove these two
07:46 - line inside the function and i'll add
07:49 - int
07:50 - sum
07:51 - is equals to
07:53 - number one
07:55 - plus
07:56 - number 2
07:59 - and i'll add print statement after that
08:02 - to print the number and sum so i'll do
08:05 - printf
08:06 - bracket inside quotation
08:08 - sum
08:10 - of
08:11 - person d
08:13 - and
08:14 - percent
08:15 - d
08:17 - is
08:17 - person d
08:19 - that is
08:20 - number one
08:23 - comma number
08:25 - 2
08:26 - comma sum
08:29 - now i'll remove this
08:31 - earlier function called calculate square
08:33 - and i'll add
08:35 - add numbers
08:40 - the value 8 and 9 as its
08:44 - arguments
08:45 - so i'll run this
08:47 - as you can see we get the sum of 8 and 9
08:51 - that is 17 as output
08:53 - here the value 8 and 9 are assigned to
08:55 - the parameter number 1 and number 2
08:58 - respectively in programming values
09:01 - passed during the function call are also
09:03 - called function arguments 8 and 9 in
09:06 - this case are the function arguments
09:09 - many people use parameters and arguments
09:11 - interchangeably so don't worry about
09:14 - that however one thing you should
09:16 - remember is that the data type of
09:18 - parameter and argument should be the
09:20 - same in our case we have created in-type
09:23 - parameters so we pass into the values 8
09:26 - and 9 during the function call if we
09:28 - want our function to accept double or
09:30 - care type parameters we should call the
09:32 - function with double or care values
09:35 - respectively go ahead and write a
09:37 - function that accept double parameters
09:40 - and add them
09:43 - till now we have been using void as the
09:46 - return type of our function this is
09:48 - because our functions are not returning
09:50 - any value in c programming we can also
09:53 - create a function that returns a value
09:56 - suppose in our earlier program instead
09:58 - of printing the sum inside the function
10:01 - we want to return it let's see how we
10:03 - can do that
10:04 - here is the code from our earlier
10:06 - program first i'll remove
10:08 - this void
10:10 - and i'll add
10:11 - int
10:12 - i'm using int because i want to return
10:15 - the sum of two numbers and the data type
10:18 - of sum is in
10:20 - now i'll remove this print statement
10:24 - and
10:26 - i'll add return
10:28 - sum
10:29 - here the return statement
10:31 - that is used to return any value from
10:33 - the function since the function is
10:36 - returning some value this return value
10:38 - need to be stored somewhere so during
10:40 - the function call i'll assign the
10:41 - function call to an end variable say
10:44 - result so int
10:46 - result
10:48 - is equals to this
10:50 - function
10:52 - then i'll print the result using print
10:54 - statement so print
10:57 - f
10:58 - printf
10:59 - result is equals to percent d
11:04 - comma
11:06 - result
11:08 - now let me run this code
11:10 - as you can see we get the result 17
11:13 - which is 8 plus 9
11:15 - here the function add numbers add 2
11:18 - number
11:19 - that is 8 and 9
11:21 - and it returns the sum
11:23 - the return value now replaces this
11:25 - function call
11:26 - so this statement becomes
11:29 - end result is equals to returned value
11:33 - which is 17 hence we print the result
11:36 - and we get 17 as our output the data
11:40 - type of the return value and the data
11:43 - type of the variable where the return
11:46 - value is stored should be the same
11:48 - the return statement is the last
11:51 - statement of a function when a return
11:53 - statement is encountered
11:55 - the function exits
11:57 - we can verify this by adding print
12:00 - statement after the written statement so
12:02 - i'll add
12:03 - a print statement after the return
12:06 - statement and i'll
12:07 - write
12:08 - here after
12:11 - return
12:12 - statement
12:15 - so
12:16 - i'll
12:17 - run this
12:19 - you can see we get the same output the
12:22 - print statement
12:23 - after the return statement is not
12:26 - executed
12:27 - okay guys we need your support to keep
12:29 - these types of content free for all
12:31 - users youtube really likes engagement on
12:33 - the video so leave a comment below press
12:35 - that like button hit subscribe if you
12:37 - haven't already let's get the engagement
12:39 - score high up so that more people can
12:41 - discover and enjoy these courses
12:45 - in c programming a function prototype is
12:47 - a declaration of a function it provides
12:50 - information about the function name
12:52 - parameters and return types however it
12:54 - does not include the body let's see an
12:57 - example
12:58 - here i have the code from our earlier
13:00 - program if you have noticed i have put
13:02 - the code of add number function after
13:05 - the main function
13:07 - now let me add the function prototype
13:09 - for this add number function
13:12 - so i'll add
13:14 - int
13:15 - add
13:16 - numbers
13:18 - parenthesis
13:20 - int number
13:22 - one
13:23 - comma
13:24 - int
13:25 - number
13:28 - two
13:29 - as you can see
13:31 - the function prototype includes the
13:33 - function name
13:34 - and return type and the parameters
13:37 - inside the parenthesis now let me run
13:40 - this code
13:42 - as you can see the program runs without
13:44 - any issue in our program we are calling
13:47 - the function
13:48 - before defining the function
13:51 - in this type of situation
13:53 - the function prototype provides
13:55 - information about the function to the
13:57 - compiler now during the function call
14:00 - the compiler can now match the function
14:03 - call signature with the function
14:05 - prototype signature
14:07 - if we are defining the function before
14:09 - function call a function prototype is
14:11 - not needed that's why we haven't
14:14 - included any function prototype in our
14:16 - earlier program
14:20 - so far we have been creating our own
14:22 - function
14:24 - these types of function we write the
14:25 - function definition ourself are called
14:28 - user defined function and see there is
14:31 - another type of function called standard
14:33 - library function they are built in
14:34 - function that are already defined in the
14:36 - library files and we can directly use
14:39 - them in our program for example the
14:42 - printf function the printer function is
14:44 - a standard library function that allow
14:46 - us to print the output the printf
14:49 - function is defined inside the stdio.h
14:51 - header file that's why we need to
14:54 - include the file using include stdio.add
14:58 - similarly the sqrt is another standard
15:01 - library function that allow us to
15:03 - compute the square root of a number let
15:05 - me show you an example here you can see
15:07 - the basic c program first we need to
15:10 - include matte dot
15:12 - header file because sqrt is defined
15:16 - inside the map dot edge header file so
15:18 - i'll include
15:22 - math
15:23 - dot edge header file
15:25 - now inside main i'll use
15:27 - sqrt function the sqrt function returns
15:32 - the square root of number as a floating
15:34 - point value so i'll write
15:36 - float
15:37 - result
15:39 - is equals to sqrt and inside sqrt i'll
15:44 - write
15:45 - 25 and i'll end this with semicolon
15:48 - now i'll print this
15:51 - square
15:53 - root
15:55 - square root is percent f
16:00 - comma
16:01 - result
16:03 - now i'll run this code as you can see we
16:06 - get 5 as output which is the square root
16:09 - of 25
16:14 - in all of our program we have used main
16:17 - if we look into the syntax of main it
16:19 - looks similar to a function this is
16:21 - because main is also a function in c
16:23 - programming it is the first function
16:25 - that is executed by the compiler so
16:28 - every c program should include a main
16:30 - function
16:33 - now to revise what we have learned so
16:35 - far here is a programming tax for you
16:38 - can you create a program that takes two
16:41 - numbers perform the multiplication of
16:43 - two numbers returns the result
16:46 - you will find the answer to this
16:48 - question in our github repository and
16:50 - also if you want to revise this concept
16:52 - you can find all this program right
16:54 - there i'll put the link in the video
16:56 - description below now that we have
16:58 - reached the end of this video it's time
17:00 - for programming squeeze what is the
17:02 - correct way to call the following
17:04 - function
17:06 - comment your answer below see you in the
17:08 - next video happy programming
17:14 - [Music]
17:19 - you

Cleaned transcript:

hey guys this is me padma from programming and welcome back to this series on c programming in this video we'll learn about functions to divide our program into small blocks of code we'll also learn different types of function available in c programming so let's get started in programming a function is a group of related statement that perform a specific task they help us divide a large program into smaller chunks so that it is easier to understand and modify them suppose you need to create a program that draws a circle and a rectangle of different colors based on user input instead of creating one big chunk of statement to create this program we can create three functions a function to create a circle function to create a rectangle and a function to color the seed doing this help us divide the complexity of the program and help us focus on the specific part of the program at a time now that you know why we need a function let's see how we can create a function in c programming on your screen you can see the syntax of the function here the return type indicates the data type of the value that is returned by this function function name the function name is the name of the function and this dot inside the curly braces indicates the statement inside the function now let's use this syntax and create a simple function that prints good morning here you can see the basic structure of c program now i'll start with the return type first so here i don't want to return any value from the function so i'll use void as the return type remember that if a function does not return any value use the void as a return type now i will write greet as the name of my function and don't forget to use the parentheses these are needed to denote that this is a function now inside the function i'll print good morning so good morning now let me run this code as you can see nothing happened this is because to run a function we need to call it now to call a function we use function name with the parenthesis so we use the name of the function that is grid with the parenthesis and i'll run this code now this time you see the output good morning let's see how this program works like any other c program the execution start from main and when it encounters the function call the control of the program moves to the function definition now the code inside the function is executed and good morning is printed on the screen once the execution of function is completed the program of the control moves back to the next line after the function call now to verify this we can print the statement after the function call so i'll print after function call and before i run this i'll add here backspace n now let's run this as you can see first the code inside the function is executed now the control move back to the function call so the code after the function call is executed so we get the output good morning and after function call and as discussed earlier one of the good thing about the function is code reusability now once we create a function we can reuse it any number of times all we need to do is call it whenever we need now let me show you i'll remove this print statement and i'll add grit two more times so great and i'll run this so this time you can see good morning is printed three times before we move to the next section here is a quick tip for you it is a good practice to use descriptive names for function so that anyone reading the code will know what the function is doing by just reading the function name here we are greeting good morning so we are using greet as its function name we can also use wish morning or any other descriptive function name by the way if you are watching this there is a good chance you want to improve your skills in c programming lucky for you we have a mobile app that provides a wellstructured c programming course with certification at the end and you can use the app alongside the video to practice on the builtin compiler our course is free so download now by scanning this qr code or click the link in the video description so far we have created function that just prints messes however sometimes we might want to create function that accepts some value and perform some action based on that value for example suppose we want to create a function that accept a number and computes the square of the number and print it we can do this in c programming with the help of function parameters a parameter is a value accepted by the function now let me show you how we can create function with the parameter so let me get back to my previous code i'll remove this grid function and i'll also remove this function call now i'll add another function call it calculate square so calculate square and inside parenthesis i'll add function parameter int number now inside the function i'll do int square is equals to number multiplied by number then i'll print the number and it's square like printf bracket inside quotation square of percent d is percent d that is after comma number sorry number comma square now here in the main function i'll call the function calculate square now let me run this code here we get an error this is because when we create a function with a parameter we need to pass the value while calling the function so in the function call i'll add 5 inside the parenthesis now i'll run this code again this time you'll see the output the square of 5 is 25 now let me tell you what happened here the calculate square function accepts the parameter so we call the function by passing the value 5. now the parameter number is assigned with the value 5 so when we use number inside the function we are using the value 5. a function can also accept multiple parameters let's see an example here i'll change this function name from calculate square to add numbers inside the parentheses i'll change this number to int number one and i'll add comma and i'll add int number two now i'll remove these two line inside the function and i'll add int sum is equals to number one plus number 2 and i'll add print statement after that to print the number and sum so i'll do printf bracket inside quotation sum of person d and percent d is person d that is number one comma number 2 comma sum now i'll remove this earlier function called calculate square and i'll add add numbers the value 8 and 9 as its arguments so i'll run this as you can see we get the sum of 8 and 9 that is 17 as output here the value 8 and 9 are assigned to the parameter number 1 and number 2 respectively in programming values passed during the function call are also called function arguments 8 and 9 in this case are the function arguments many people use parameters and arguments interchangeably so don't worry about that however one thing you should remember is that the data type of parameter and argument should be the same in our case we have created intype parameters so we pass into the values 8 and 9 during the function call if we want our function to accept double or care type parameters we should call the function with double or care values respectively go ahead and write a function that accept double parameters and add them till now we have been using void as the return type of our function this is because our functions are not returning any value in c programming we can also create a function that returns a value suppose in our earlier program instead of printing the sum inside the function we want to return it let's see how we can do that here is the code from our earlier program first i'll remove this void and i'll add int i'm using int because i want to return the sum of two numbers and the data type of sum is in now i'll remove this print statement and i'll add return sum here the return statement that is used to return any value from the function since the function is returning some value this return value need to be stored somewhere so during the function call i'll assign the function call to an end variable say result so int result is equals to this function then i'll print the result using print statement so print f printf result is equals to percent d comma result now let me run this code as you can see we get the result 17 which is 8 plus 9 here the function add numbers add 2 number that is 8 and 9 and it returns the sum the return value now replaces this function call so this statement becomes end result is equals to returned value which is 17 hence we print the result and we get 17 as our output the data type of the return value and the data type of the variable where the return value is stored should be the same the return statement is the last statement of a function when a return statement is encountered the function exits we can verify this by adding print statement after the written statement so i'll add a print statement after the return statement and i'll write here after return statement so i'll run this you can see we get the same output the print statement after the return statement is not executed okay guys we need your support to keep these types of content free for all users youtube really likes engagement on the video so leave a comment below press that like button hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses in c programming a function prototype is a declaration of a function it provides information about the function name parameters and return types however it does not include the body let's see an example here i have the code from our earlier program if you have noticed i have put the code of add number function after the main function now let me add the function prototype for this add number function so i'll add int add numbers parenthesis int number one comma int number two as you can see the function prototype includes the function name and return type and the parameters inside the parenthesis now let me run this code as you can see the program runs without any issue in our program we are calling the function before defining the function in this type of situation the function prototype provides information about the function to the compiler now during the function call the compiler can now match the function call signature with the function prototype signature if we are defining the function before function call a function prototype is not needed that's why we haven't included any function prototype in our earlier program so far we have been creating our own function these types of function we write the function definition ourself are called user defined function and see there is another type of function called standard library function they are built in function that are already defined in the library files and we can directly use them in our program for example the printf function the printer function is a standard library function that allow us to print the output the printf function is defined inside the stdio.h header file that's why we need to include the file using include stdio.add similarly the sqrt is another standard library function that allow us to compute the square root of a number let me show you an example here you can see the basic c program first we need to include matte dot header file because sqrt is defined inside the map dot edge header file so i'll include math dot edge header file now inside main i'll use sqrt function the sqrt function returns the square root of number as a floating point value so i'll write float result is equals to sqrt and inside sqrt i'll write 25 and i'll end this with semicolon now i'll print this square root square root is percent f comma result now i'll run this code as you can see we get 5 as output which is the square root of 25 in all of our program we have used main if we look into the syntax of main it looks similar to a function this is because main is also a function in c programming it is the first function that is executed by the compiler so every c program should include a main function now to revise what we have learned so far here is a programming tax for you can you create a program that takes two numbers perform the multiplication of two numbers returns the result you will find the answer to this question in our github repository and also if you want to revise this concept you can find all this program right there i'll put the link in the video description below now that we have reached the end of this video it's time for programming squeeze what is the correct way to call the following function comment your answer below see you in the next video happy programming you
