With timestamps:

00:00 - today i want to talk a little bit about
00:01 - how i would learn programming or
00:03 - approach programming if i had to
00:04 - do it all over again uh this is because
00:07 - you know i
00:08 - feel that the way i learn programming
00:10 - was not the most efficient approach
00:12 - and in hindsight if i had to start over
00:15 - again i would do so many things
00:16 - differently
00:17 - the number one step is i would choose
00:20 - the programming language better
00:21 - because when i was learning to program
00:23 - first i learned the basics in c
00:26 - then i learned object-oriented
00:27 - programming in c plus plus
00:29 - then i learned java so you know it was
00:31 - really this
00:32 - mix of shifting from one programming
00:34 - language to another and
00:35 - because c did not have support for
00:37 - object oriented programming so
00:40 - instead if i had chosen something like
00:42 - javascript or python
00:43 - then you know i could have learned
00:44 - everything using one programming
00:46 - language
00:47 - so definitely if you're in 2021
00:50 - or you know if you're learning
00:51 - programming today you have a wider
00:53 - choice than i did before when i learned
00:55 - programming
00:56 - that that's why i definitely go for a
00:58 - programming language that supports all
01:00 - the programming constructs
01:01 - that you need to learn programming uh
01:03 - after choosing the programming language
01:05 - i would learn the very basics
01:07 - programming constructs
01:08 - variables if else statements you know
01:11 - stuff
01:12 - that is common to more every programming
01:14 - language or programming in general
01:16 - instead of focusing on you know learning
01:18 - the same things in different programming
01:19 - languages
01:20 - i would master all these concepts in one
01:22 - programming language
01:23 - be it python or javascript or java or c
01:26 - sharp
01:26 - any high level programming language will
01:28 - do then i would also
01:30 - solve five or six problems for each
01:33 - programming language
01:34 - now i don't know how it is elsewhere but
01:37 - but in india there's a certain obsession
01:40 - with a certain type of programs like
01:42 - uh programs that generate pyramids of
01:45 - stars or you know
01:46 - so there's this whole too much time
01:48 - spent on
01:49 - few things instead i would not solve
01:53 - you know more than five or six problems
01:54 - of one category say if else
01:56 - five or six problems for loops five or
01:59 - six problems
02:00 - exception handling or file handling five
02:02 - or six problems
02:03 - and then i would learn how to mix and
02:05 - match all these concepts to create small
02:07 - projects
02:08 - and not really get stuck with the same
02:10 - kind of problems again and again and
02:12 - again
02:13 - another thing that a lot of people miss
02:15 - out is
02:16 - they try to learn it but then you know
02:19 - they leave it at that
02:20 - i suggest an approach by richard feynman
02:23 - who is
02:24 - a noble laureate so what he used to say
02:26 - is if you want to understand the topic
02:28 - completely
02:29 - then try to explain it to a child so if
02:32 - you have learned
02:33 - how to use for loops then think about
02:35 - how you would approach
02:37 - explaining for loops to a little child
02:39 - because
02:40 - then it will help you dig in you know
02:42 - okay what exactly is a for loop
02:44 - how do i explain it to someone who does
02:45 - not have the background
02:47 - then it will clarify your concepts i've
02:49 - always found that trying to teach
02:51 - something
02:52 - it helps my learning as well another
02:55 - thing that i would do differently
02:56 - or you know if i had to start from
02:58 - scratch is build tiny personal projects
03:01 - what happened in my case was i spent a
03:04 - lot of
03:04 - time on theory and suddenly when you
03:07 - know the requirement for the minor and
03:08 - major projects in college started
03:10 - i started scrambling for ideas and there
03:13 - was this huge jump from
03:15 - learning variables and if statements to
03:16 - doing you know big projects
03:19 - so the learning curve was really huge
03:20 - and i i'm not very happy with the major
03:23 - and minor projects that i did
03:24 - in college now uh if i had to do that
03:27 - differently then i would build small
03:29 - projects like a tic-tac-toe game
03:31 - or you know a to-do list while i'm
03:34 - learning these variables and
03:36 - for loops so i would go projects and
03:39 - learning in tandem this time
03:41 - so that when i build those bigger
03:42 - projects if i'm interested in machine
03:44 - learning then i should have learned
03:46 - you know libraries like scipy or numpy
03:49 - before
03:49 - i would also do a lot of experimentation
03:51 - so maybe you know uh
03:53 - two or three months i would try
03:54 - competitive programming two or three
03:55 - months i would try
03:56 - web development using django and flask
03:59 - maybe the next few months i would try
04:01 - machine learning so
04:02 - i would learn about libraries like numpy
04:04 - pandas and scipy
04:06 - basically experiment with the different
04:08 - fields you know i would have built
04:10 - a portfolio website because i feel that
04:13 - that's something i still don't get time
04:15 - for and you know i feel that
04:18 - you should have a website of your own
04:20 - even it does not need to be fancy but
04:22 - really a home for you know all your
04:24 - little projects where you can
04:25 - demonstrate them to the world
04:27 - and that way you'll also learn to deploy
04:29 - projects i feel i wasted a lot of time
04:31 - or
04:32 - say you know the education system in
04:34 - which i learned programming wasted a lot
04:36 - of time
04:37 - uh c in first year of college then
04:40 - you know c plus plus in second year i
04:43 - really feel a lot of momentum was lost
04:45 - in the process
04:47 - don't let that happen to you momentum is
04:49 - everything when you learn to code
04:51 - so make sure that you know you start
04:53 - with the plan
04:54 - and execute that plan be disciplined
04:56 - something that i would have done
04:57 - differently or i would do if i was
05:00 - learning to code now is i would create a
05:02 - full curriculum for myself before
05:04 - i started to learn that is because you
05:07 - know
05:08 - we get stuck in analysis paralysis what
05:12 - should i learn
05:12 - next instead if you create right from
05:15 - day one
05:15 - do your research say day one d2 d3 day
05:18 - four have that discipline for 60 days or
05:20 - 90 days or 120 days
05:22 - then you know there's this something
05:24 - that you have to achieve every day
05:26 - and that will keep you in discipline and
05:28 - maybe we will publish
05:30 - this kind of syllabus from programming
05:33 - someday
05:33 - i hope that will be helpful and
05:36 - yes few things i've talked about in this
05:38 - video i hope
05:40 - they were helpful and i'll see you in
05:41 - the next one
05:52 - you

Cleaned transcript:

today i want to talk a little bit about how i would learn programming or approach programming if i had to do it all over again uh this is because you know i feel that the way i learn programming was not the most efficient approach and in hindsight if i had to start over again i would do so many things differently the number one step is i would choose the programming language better because when i was learning to program first i learned the basics in c then i learned objectoriented programming in c plus plus then i learned java so you know it was really this mix of shifting from one programming language to another and because c did not have support for object oriented programming so instead if i had chosen something like javascript or python then you know i could have learned everything using one programming language so definitely if you're in 2021 or you know if you're learning programming today you have a wider choice than i did before when i learned programming that that's why i definitely go for a programming language that supports all the programming constructs that you need to learn programming uh after choosing the programming language i would learn the very basics programming constructs variables if else statements you know stuff that is common to more every programming language or programming in general instead of focusing on you know learning the same things in different programming languages i would master all these concepts in one programming language be it python or javascript or java or c sharp any high level programming language will do then i would also solve five or six problems for each programming language now i don't know how it is elsewhere but but in india there's a certain obsession with a certain type of programs like uh programs that generate pyramids of stars or you know so there's this whole too much time spent on few things instead i would not solve you know more than five or six problems of one category say if else five or six problems for loops five or six problems exception handling or file handling five or six problems and then i would learn how to mix and match all these concepts to create small projects and not really get stuck with the same kind of problems again and again and again another thing that a lot of people miss out is they try to learn it but then you know they leave it at that i suggest an approach by richard feynman who is a noble laureate so what he used to say is if you want to understand the topic completely then try to explain it to a child so if you have learned how to use for loops then think about how you would approach explaining for loops to a little child because then it will help you dig in you know okay what exactly is a for loop how do i explain it to someone who does not have the background then it will clarify your concepts i've always found that trying to teach something it helps my learning as well another thing that i would do differently or you know if i had to start from scratch is build tiny personal projects what happened in my case was i spent a lot of time on theory and suddenly when you know the requirement for the minor and major projects in college started i started scrambling for ideas and there was this huge jump from learning variables and if statements to doing you know big projects so the learning curve was really huge and i i'm not very happy with the major and minor projects that i did in college now uh if i had to do that differently then i would build small projects like a tictactoe game or you know a todo list while i'm learning these variables and for loops so i would go projects and learning in tandem this time so that when i build those bigger projects if i'm interested in machine learning then i should have learned you know libraries like scipy or numpy before i would also do a lot of experimentation so maybe you know uh two or three months i would try competitive programming two or three months i would try web development using django and flask maybe the next few months i would try machine learning so i would learn about libraries like numpy pandas and scipy basically experiment with the different fields you know i would have built a portfolio website because i feel that that's something i still don't get time for and you know i feel that you should have a website of your own even it does not need to be fancy but really a home for you know all your little projects where you can demonstrate them to the world and that way you'll also learn to deploy projects i feel i wasted a lot of time or say you know the education system in which i learned programming wasted a lot of time uh c in first year of college then you know c plus plus in second year i really feel a lot of momentum was lost in the process don't let that happen to you momentum is everything when you learn to code so make sure that you know you start with the plan and execute that plan be disciplined something that i would have done differently or i would do if i was learning to code now is i would create a full curriculum for myself before i started to learn that is because you know we get stuck in analysis paralysis what should i learn next instead if you create right from day one do your research say day one d2 d3 day four have that discipline for 60 days or 90 days or 120 days then you know there's this something that you have to achieve every day and that will keep you in discipline and maybe we will publish this kind of syllabus from programming someday i hope that will be helpful and yes few things i've talked about in this video i hope they were helpful and i'll see you in the next one you
