With timestamps:

00:00 - what's up guys i'm puny from programmers
00:02 - and welcome back to this series on
00:03 - javascript in this video we will learn
00:05 - about the boolean data type which allows
00:07 - us to store true and false then we will
00:10 - learn about comparison and logical
00:11 - operators which are used in decision
00:13 - making in programming let's get started
00:22 - basically booleans are data types like
00:24 - numbers and strings one interesting
00:26 - thing about boolean is that it can be of
00:28 - two values either true or false let me
00:31 - give you a quick example
00:33 - in my code editor i'll create two
00:34 - variables value 1 and value 2 and assign
00:38 - them boolean values of true and false
00:39 - respectively so i can select value 1
00:42 - equals true and let value to equals
00:44 - false now let me print these variables
00:47 - so i'll say console.log
00:49 - value 1
00:51 - similarly console.log value 2.
00:55 - now when i press run
00:57 - you can see that values of true and
01:00 - false are printed respectively
01:02 - we can also verify the data type of
01:04 - these variables using the type of
01:06 - operator i'll wrap value 1 and value 2
01:09 - inside the type of operator and print
01:10 - them so in this i'll add console.log
01:15 - type of
01:17 - value 1
01:18 - similarly
01:19 - console.log
01:21 - type of value 2.
01:23 - now when i press run
01:25 - in addition to true and false
01:27 - i can see that the type of value 1 is
01:30 - boolean and the type of value 2 is also
01:32 - boolean
01:34 - one thing you should remember is that
01:36 - true and false should not be used inside
01:38 - codes because if we use quotes they will
01:41 - be considered as strings and not boolean
01:43 - let's see an example i'll put quotes
01:46 - before and after true
01:48 - and similarly let me try the single
01:50 - quote before and after false
01:53 - when i press run now
01:55 - i can see the data type of value 1 and
01:57 - value 2 a string this time
02:00 - let me clean this code and get our
02:02 - original code back
02:04 - so i'll remove this
02:09 - and let me also remove these
02:12 - another thing we need to remember is
02:14 - that javascript is a case sensitive
02:16 - language and we cannot use true and
02:18 - false with capital t and f
02:20 - let me show you let me replace the small
02:23 - t with capital t
02:24 - and this small
02:26 - false with capital f false
02:29 - now when i try to run the code
02:31 - you can see that it says reference error
02:34 - true is not defined this is because
02:37 - true with small t is different from true
02:40 - with a capital t
02:45 - now that we know about booleans let's
02:47 - learn about comparison and logical
02:49 - operators these operators are used to
02:51 - create expressions that result in
02:53 - boolean values let's start with
02:54 - comparison operators first i'll copy all
02:57 - the comparison operators in the code
02:59 - editor so that it's easier for us to see
03:01 - them in action i'll remove this old code
03:03 - and paste all the operators here
03:07 - now let's go through them one by one
03:13 - let's start with the greater than
03:14 - operator the greater than operator
03:16 - checks if a value is greater than
03:18 - another value let's see an example so
03:20 - i'll
03:21 - say
03:22 - console.log
03:24 - and then i can say 8 greater than 5.
03:28 - here i'm comparing two values and simply
03:31 - printing them i'm simply checking if 8
03:33 - is greater than 5
03:36 - since 8 is greater than 5 the greater
03:38 - than operator in this case will return
03:40 - true let me run this code and see the
03:42 - output
03:43 - and as expected it returns true
03:46 - now let's change the value of 8 to 3 and
03:48 - see what happens so here i'll say 3
03:51 - greater than 5 and when i press run this
03:54 - time i get false because 3 is not
03:57 - greater than 5.
04:00 - similarly we can use the less than
04:02 - operator to check if a value is less
04:04 - than another value
04:05 - in this code i will now change the
04:07 - greater than sign to less than so i can
04:10 - say 3
04:11 - less than 5 and this time when i press
04:13 - run
04:14 - i get true because 3 is indeed less than
04:17 - 5
04:19 - and let me replace this 3 by 5
04:22 - what do you think will be the result
04:23 - when i press run
04:25 - you must have guessed it by now when i
04:27 - press run i get false because 5 is not
04:30 - less than 5
04:34 - now let's see the greater than or equal
04:35 - to operator next as the name suggests
04:38 - the greater than or equal to operator
04:39 - returns true if a value is either
04:41 - greater than or equal to another value
04:43 - now let me change this less than 5 less
04:45 - than 5 to 5 greater than equals 5
04:48 - now when i press run
04:50 - i get true because although 5 greater
04:52 - than 5 is true 5 is equal to 5 and this
04:55 - is also included with the greater than
04:57 - or equal to sine
05:00 - similarly we can also use the less than
05:02 - or equal to operator let me flip this
05:04 - operator to 5 less than equals 5.
05:08 - again although 5 is less than 5 is
05:10 - untrue 5 is equal to 5 and when i press
05:13 - run i get true this time as well
05:18 - equal to operator returns true if both
05:20 - the compared values are equal i'll use
05:22 - the previous code and change the less
05:24 - than or equal to operator to the equal
05:26 - to operator so here i can say
05:29 - equal 5 equal equals 5.
05:32 - mind you this is different from the
05:33 - assignment operator which is the single
05:35 - equal so for the equality check we use
05:38 - double equal instead of single equal
05:40 - here since 5 is equal to 5 we should get
05:43 - true as the output let me verify and
05:45 - press run
05:47 - and as expected i get true
05:50 - let me change the value to 6
05:53 - and this time you must have guessed the
05:54 - output by now when i press run
05:56 - i get false
05:58 - now let's try something interesting i'll
06:01 - change the number 5 to a string
06:03 - so instead of 6 i can say
06:05 - 5
06:07 - and now i'm comparing the string 5 to
06:09 - number 5 let's run the code
06:14 - as you can see we get true as output
06:17 - this is because the equal to operator
06:19 - checks only the data and not the data
06:21 - type since both string 5 and number 5
06:24 - has the data 5 the equal to operator
06:26 - returns true similarly there is not
06:29 - equal to operator it does exactly
06:31 - opposite of what equal to operator does
06:33 - it checks if two values are not equal
06:36 - let me show you i'll change the previous
06:38 - code and i'll say
06:40 - 5
06:43 - not equals 5
06:44 - here i'm using the not equal to operator
06:47 - to compare 5 with 5
06:50 - let's run the code
06:53 - this time i get false because obviously
06:56 - 5 is equal to 5 and 5 not equals to 5
06:58 - will obviously be false
07:01 - now let me change one of the values to 6
07:03 - and when i press run this time i get
07:06 - true because 6 is not equal to 5 is true
07:09 - if you're enjoying this video please
07:11 - also check out programs pro where we
07:13 - provide tutorials along with quizzes and
07:15 - challenges which will help you practice
07:16 - and test your learning in real time also
07:19 - the course includes projects to give you
07:20 - an awesome experience of how programming
07:22 - works in the real world and for our
07:24 - youtube subscribers we are giving 50 off
07:26 - on the yearly plan sign up by scanning
07:28 - this qr code or use the link in the
07:29 - video description to claim your discount
07:34 - in javascript similar to equal operator
07:36 - there's another operator called strict
07:38 - equal to operator the strict equal to
07:40 - operator compares two values and the
07:42 - data types as well so unlike the equal
07:44 - to operator the strict equal to operator
07:46 - won't consider a string value and a
07:48 - numeric value equal even if they have
07:51 - the same data let me show you in this
07:53 - code
07:55 - before we saw that five string 5 equals
07:59 - equals 5 was true
08:01 - but this time let me put another equals
08:03 - to here changing this to the strict
08:05 - equal to operator
08:08 - now when i press run
08:11 - as you can see the output is false this
08:13 - is because the strict equal operator
08:15 - checks both the data and the data type
08:17 - while making the comparison
08:19 - and here although data 5 is the same the
08:21 - data type of one is string and another
08:23 - is number hence they are not strictly
08:26 - equal similarly the strict not equal to
08:28 - operator also considers the data type
08:30 - while making the comparison
08:32 - let me change the strict equal to
08:33 - operator to strict not equals to
08:35 - operator so here i can say 5 string five
08:39 - not equals equals five and when i press
08:42 - run i get the opposite result which is
08:44 - true
08:45 - because obviously string five is not
08:47 - equal to number five when you consider
08:49 - it the strict comparison
08:54 - till now we have used the comparison
08:56 - operators to compare two values however
08:58 - we can also use comparison operators to
09:00 - compare two variables let's see an
09:02 - example i will create two variables
09:04 - number one with value five so let me
09:06 - remove this old code i'll say const
09:09 - number 1
09:10 - equals 5 and i'll create another
09:13 - variable number 2
09:15 - with the value of 9
09:19 - now let me use a comparison operator
09:20 - with these variables so i can say const
09:22 - result equals
09:24 - number one
09:26 - less than number two
09:29 - here i'm checking if number one is less
09:31 - than number two
09:32 - let me print the result and see what i
09:34 - get so console.log
09:37 - result
09:38 - when i press run
09:40 - i get true because the value stored in
09:42 - number 1 which is 5 is less than the
09:44 - value stored in number 2 which is 9.
09:48 - we can also compare a variable and a
09:50 - value let me change the code i'll remove
09:52 - number two variable and directly compare
09:54 - the number one variable with nine so let
09:56 - me remove this
09:58 - and i'll say number one less than nine
10:00 - when i press run
10:02 - i get the same output as before
10:04 - these are all the comparison operators
10:06 - that are used in javascript they all
10:08 - return a boolean value and the
10:09 - expression where they are used are
10:11 - called boolean expressions in our
10:13 - previous example the code number one
10:15 - less than nine is a boolean expression
10:18 - boolean expressions are used to check a
10:19 - particular condition and perform actions
10:22 - based on the result of the condition we
10:24 - will see how to use comparison operators
10:26 - and boolean values to check conditions
10:28 - using if else in the next video
10:32 - now that we know about comparison
10:34 - operators let's learn about logical
10:36 - operators logical operators are used
10:38 - with boolean expressions to perform
10:40 - logical operations javascript has three
10:42 - logical operators and they are and or
10:45 - and not
10:46 - let's copy them in our code editor and
10:48 - see how we can use them
10:52 - let's start with the and operator the
10:53 - and operator returns true if both
10:55 - boolean expressions are true let's see
10:57 - an example let me create a variable age
11:00 - with value
11:02 - 18
11:04 - and i'll create a height variable with
11:06 - value
11:07 - 5.5
11:09 - now let's try using the greater than or
11:12 - equal to operator for age and greater
11:14 - than operator for height
11:16 - so i'll say let result
11:18 - equals
11:19 - age greater than equals 18
11:22 - and
11:23 - height
11:25 - greater than 5
11:27 - and now let me print the result variable
11:29 - so i'll say console.log
11:31 - result
11:33 - here we have used two billion
11:34 - expressions a is greater than equals 18
11:37 - and height greater than 5 and we have
11:39 - used the logical and operator between
11:41 - them so for the result variable to be
11:43 - true both of these expressions need to
11:46 - be true
11:48 - since age is equal to 18 a is greater
11:50 - than equals to 18 is true
11:53 - similarly since height is greater than 5
11:56 - this is also true hence the result of
11:58 - this and will be true
12:00 - let me run this
12:03 - and as expected we get true as the
12:04 - output
12:05 - now let me change the code to make one
12:07 - of the expressions false so i'll change
12:09 - height greater than 5 to height less
12:11 - than 5
12:13 - and now when i press run
12:15 - i get false because the second
12:17 - expression is false and the and operator
12:19 - requires both expressions to be true for
12:22 - the result to be true okay guys we need
12:24 - your support to keep this kind of
12:26 - content free for all users youtube
12:28 - really likes engagement on the video so
12:30 - leave a comment below press that like
12:31 - button and hit subscribe if you haven't
12:33 - already let's get the engagement score
12:35 - high up so that more people can discover
12:37 - and enjoy these courses
12:40 - now let's learn about logical or
12:42 - operators the or operator returns true
12:45 - if one of the boolean expressions is
12:47 - true let's see an example i'll use the
12:49 - previous code and change the and
12:51 - operator to or
12:56 - you must have already guessed the output
12:57 - of this program let me run it and see if
12:59 - you guessed it correctly i'll press run
13:02 - and you can see that i got true this is
13:04 - because although the second half of the
13:07 - expression which is height less than 5
13:08 - is false a is greater than equals to 18
13:11 - is still true and for the or operator to
13:13 - return true any one of the expressions
13:15 - can be true
13:20 - unlike logical and and logical or the
13:22 - logical not operator is used with only
13:24 - one boolean expression it simply
13:26 - reverses the result the boolean
13:28 - expression is true it returns false and
13:31 - if the boolean expression is false it
13:32 - returns true let's see an example i'll
13:35 - remove this old code and i'll say const
13:38 - height
13:39 - equals 5.5 now let me say cons result
13:43 - equals
13:44 - height less than 6
13:46 - now i can say console.log
13:49 - result and you must have guessed by now
13:51 - this will be true but let me put the not
13:54 - operator in front when i press run
13:57 - instead of true i get false because this
13:59 - expression is true the value of result
14:01 - is true but the not operator reverses
14:03 - that result and makes it false
14:06 - now let me change this expression
14:09 - by making this
14:10 - smaller than to greater than when i
14:13 - press run
14:14 - this time i get true because this
14:16 - expression is false and the not operator
14:18 - again reverses that to true
14:23 - boolean expressions are the very
14:24 - foundations of programming they're very
14:26 - useful in decision making and loops they
14:29 - are used to check particular conditions
14:31 - and based on the conditions we can make
14:33 - decisions in code suppose we want to
14:35 - check if a person is eligible to vote or
14:37 - not then we can use a boolean expression
14:39 - to check if the age of that person is
14:41 - greater than 18. if true the person is
14:43 - eligible to vote otherwise not eligible
14:46 - so boolean values and expressions are
14:48 - useful in programming this covers the
14:50 - basics of the booleans comparison and
14:52 - logical operators we will learn to use
14:54 - them in creating decision making
14:56 - statements in the next video
14:58 - now that we have reached the end of this
14:59 - video it's time for the programming quiz
15:02 - which of the following code returns true
15:07 - comment the answer below and if you want
15:09 - to revise these concepts you can find
15:11 - all the programs in our github
15:13 - repository i'll put the link in the
15:14 - video description below happy
15:16 - programming
15:20 - [Music]
15:26 - you

Cleaned transcript:

what's up guys i'm puny from programmers and welcome back to this series on javascript in this video we will learn about the boolean data type which allows us to store true and false then we will learn about comparison and logical operators which are used in decision making in programming let's get started basically booleans are data types like numbers and strings one interesting thing about boolean is that it can be of two values either true or false let me give you a quick example in my code editor i'll create two variables value 1 and value 2 and assign them boolean values of true and false respectively so i can select value 1 equals true and let value to equals false now let me print these variables so i'll say console.log value 1 similarly console.log value 2. now when i press run you can see that values of true and false are printed respectively we can also verify the data type of these variables using the type of operator i'll wrap value 1 and value 2 inside the type of operator and print them so in this i'll add console.log type of value 1 similarly console.log type of value 2. now when i press run in addition to true and false i can see that the type of value 1 is boolean and the type of value 2 is also boolean one thing you should remember is that true and false should not be used inside codes because if we use quotes they will be considered as strings and not boolean let's see an example i'll put quotes before and after true and similarly let me try the single quote before and after false when i press run now i can see the data type of value 1 and value 2 a string this time let me clean this code and get our original code back so i'll remove this and let me also remove these another thing we need to remember is that javascript is a case sensitive language and we cannot use true and false with capital t and f let me show you let me replace the small t with capital t and this small false with capital f false now when i try to run the code you can see that it says reference error true is not defined this is because true with small t is different from true with a capital t now that we know about booleans let's learn about comparison and logical operators these operators are used to create expressions that result in boolean values let's start with comparison operators first i'll copy all the comparison operators in the code editor so that it's easier for us to see them in action i'll remove this old code and paste all the operators here now let's go through them one by one let's start with the greater than operator the greater than operator checks if a value is greater than another value let's see an example so i'll say console.log and then i can say 8 greater than 5. here i'm comparing two values and simply printing them i'm simply checking if 8 is greater than 5 since 8 is greater than 5 the greater than operator in this case will return true let me run this code and see the output and as expected it returns true now let's change the value of 8 to 3 and see what happens so here i'll say 3 greater than 5 and when i press run this time i get false because 3 is not greater than 5. similarly we can use the less than operator to check if a value is less than another value in this code i will now change the greater than sign to less than so i can say 3 less than 5 and this time when i press run i get true because 3 is indeed less than 5 and let me replace this 3 by 5 what do you think will be the result when i press run you must have guessed it by now when i press run i get false because 5 is not less than 5 now let's see the greater than or equal to operator next as the name suggests the greater than or equal to operator returns true if a value is either greater than or equal to another value now let me change this less than 5 less than 5 to 5 greater than equals 5 now when i press run i get true because although 5 greater than 5 is true 5 is equal to 5 and this is also included with the greater than or equal to sine similarly we can also use the less than or equal to operator let me flip this operator to 5 less than equals 5. again although 5 is less than 5 is untrue 5 is equal to 5 and when i press run i get true this time as well equal to operator returns true if both the compared values are equal i'll use the previous code and change the less than or equal to operator to the equal to operator so here i can say equal 5 equal equals 5. mind you this is different from the assignment operator which is the single equal so for the equality check we use double equal instead of single equal here since 5 is equal to 5 we should get true as the output let me verify and press run and as expected i get true let me change the value to 6 and this time you must have guessed the output by now when i press run i get false now let's try something interesting i'll change the number 5 to a string so instead of 6 i can say 5 and now i'm comparing the string 5 to number 5 let's run the code as you can see we get true as output this is because the equal to operator checks only the data and not the data type since both string 5 and number 5 has the data 5 the equal to operator returns true similarly there is not equal to operator it does exactly opposite of what equal to operator does it checks if two values are not equal let me show you i'll change the previous code and i'll say 5 not equals 5 here i'm using the not equal to operator to compare 5 with 5 let's run the code this time i get false because obviously 5 is equal to 5 and 5 not equals to 5 will obviously be false now let me change one of the values to 6 and when i press run this time i get true because 6 is not equal to 5 is true if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount in javascript similar to equal operator there's another operator called strict equal to operator the strict equal to operator compares two values and the data types as well so unlike the equal to operator the strict equal to operator won't consider a string value and a numeric value equal even if they have the same data let me show you in this code before we saw that five string 5 equals equals 5 was true but this time let me put another equals to here changing this to the strict equal to operator now when i press run as you can see the output is false this is because the strict equal operator checks both the data and the data type while making the comparison and here although data 5 is the same the data type of one is string and another is number hence they are not strictly equal similarly the strict not equal to operator also considers the data type while making the comparison let me change the strict equal to operator to strict not equals to operator so here i can say 5 string five not equals equals five and when i press run i get the opposite result which is true because obviously string five is not equal to number five when you consider it the strict comparison till now we have used the comparison operators to compare two values however we can also use comparison operators to compare two variables let's see an example i will create two variables number one with value five so let me remove this old code i'll say const number 1 equals 5 and i'll create another variable number 2 with the value of 9 now let me use a comparison operator with these variables so i can say const result equals number one less than number two here i'm checking if number one is less than number two let me print the result and see what i get so console.log result when i press run i get true because the value stored in number 1 which is 5 is less than the value stored in number 2 which is 9. we can also compare a variable and a value let me change the code i'll remove number two variable and directly compare the number one variable with nine so let me remove this and i'll say number one less than nine when i press run i get the same output as before these are all the comparison operators that are used in javascript they all return a boolean value and the expression where they are used are called boolean expressions in our previous example the code number one less than nine is a boolean expression boolean expressions are used to check a particular condition and perform actions based on the result of the condition we will see how to use comparison operators and boolean values to check conditions using if else in the next video now that we know about comparison operators let's learn about logical operators logical operators are used with boolean expressions to perform logical operations javascript has three logical operators and they are and or and not let's copy them in our code editor and see how we can use them let's start with the and operator the and operator returns true if both boolean expressions are true let's see an example let me create a variable age with value 18 and i'll create a height variable with value 5.5 now let's try using the greater than or equal to operator for age and greater than operator for height so i'll say let result equals age greater than equals 18 and height greater than 5 and now let me print the result variable so i'll say console.log result here we have used two billion expressions a is greater than equals 18 and height greater than 5 and we have used the logical and operator between them so for the result variable to be true both of these expressions need to be true since age is equal to 18 a is greater than equals to 18 is true similarly since height is greater than 5 this is also true hence the result of this and will be true let me run this and as expected we get true as the output now let me change the code to make one of the expressions false so i'll change height greater than 5 to height less than 5 and now when i press run i get false because the second expression is false and the and operator requires both expressions to be true for the result to be true okay guys we need your support to keep this kind of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses now let's learn about logical or operators the or operator returns true if one of the boolean expressions is true let's see an example i'll use the previous code and change the and operator to or you must have already guessed the output of this program let me run it and see if you guessed it correctly i'll press run and you can see that i got true this is because although the second half of the expression which is height less than 5 is false a is greater than equals to 18 is still true and for the or operator to return true any one of the expressions can be true unlike logical and and logical or the logical not operator is used with only one boolean expression it simply reverses the result the boolean expression is true it returns false and if the boolean expression is false it returns true let's see an example i'll remove this old code and i'll say const height equals 5.5 now let me say cons result equals height less than 6 now i can say console.log result and you must have guessed by now this will be true but let me put the not operator in front when i press run instead of true i get false because this expression is true the value of result is true but the not operator reverses that result and makes it false now let me change this expression by making this smaller than to greater than when i press run this time i get true because this expression is false and the not operator again reverses that to true boolean expressions are the very foundations of programming they're very useful in decision making and loops they are used to check particular conditions and based on the conditions we can make decisions in code suppose we want to check if a person is eligible to vote or not then we can use a boolean expression to check if the age of that person is greater than 18. if true the person is eligible to vote otherwise not eligible so boolean values and expressions are useful in programming this covers the basics of the booleans comparison and logical operators we will learn to use them in creating decision making statements in the next video now that we have reached the end of this video it's time for the programming quiz which of the following code returns true comment the answer below and if you want to revise these concepts you can find all the programs in our github repository i'll put the link in the video description below happy programming you
