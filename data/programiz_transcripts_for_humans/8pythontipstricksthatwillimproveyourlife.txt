With timestamps:

00:00 - in this video we will look at eight
00:01 - python programming tips and tricks you
00:03 - might not have known about
00:05 - learning about these features will help
00:06 - you write more pythonic code and become
00:08 - a better python programmer so let's get
00:14 - started
00:16 - the number one trick is unpacking
00:19 - unpacking is an operation that can be
00:21 - used to assign the values of an iterable
00:23 - to a number of variables with a single
00:25 - assignment statement
00:26 - let me show you what i mean i'll go to
00:28 - my code editor and i'll say a
00:30 - comma b comma c equals
00:34 - 1 comma 2 comma 3 now let me print
00:37 - a print b and print c
00:41 - and when i press run then you can see
00:44 - that 1 was assigned to a
00:46 - 2 was assigned to b and 3 was assigned
00:49 - to c
00:50 - python assignment statements are
00:52 - evaluated from right to left
00:53 - so we can even use unpacking to swap the
00:56 - values of two variables in a single line
00:58 - and i'll remove this old code and define
01:00 - two variables as
01:01 - x equals 66 and y
01:05 - equals 44. i'll swap the values of
01:08 - variables x and y
01:09 - for that i can write something like x
01:12 - comma
01:12 - y equals y comma
01:16 - x and now print
01:19 - x equals
01:22 - and x similarly print y
01:26 - equals and y and when i press run
01:30 - you can see that access value is now 44
01:33 - and y's value is now
01:34 - 66 where the variables have been swapped
01:40 - the second tip is negative indexing
01:42 - python programming supports negative
01:43 - index values for iterables like lists
01:46 - strings and tuples using a negative
01:48 - index gives us items from the last
01:50 - so minus 1 gives us the last item -2
01:53 - gives us the second last item
01:55 - and so on i'll go back to my code editor
01:57 - remove this old code
01:59 - and i'll create a variable called
02:00 - numbers equals
02:02 - it'll be a list of the multiples of 5 so
02:05 - 5
02:06 - 10 15 20
02:09 - and 25 now let me print something like
02:12 - print numbers minus one
02:17 - when i run this program then you should
02:19 - be able to get
02:20 - the last element similarly i can do
02:24 - print numbers
02:27 - minus 3 and when i press run
02:30 - then you can see that i get the third
02:32 - element from the last
02:35 - by the way if you find this video useful
02:37 - a sub to the channel would be much
02:39 - appreciated
02:41 - the third trick i want to talk about
02:43 - today is slicing python supports the
02:45 - slice notation for sequential data types
02:47 - like lists
02:48 - strings and tuples slicing allows us to
02:51 - create a new sequence
02:52 - from an existing sequence let me give
02:54 - you an example
02:55 - i'll go to my code editor and suppose we
02:58 - have a list like this so let me remove
03:00 - or let me remove this code now let me
03:03 - create a new list
03:04 - containing the first three items of this
03:06 - list so for that i can say
03:09 - new numbers equals
03:15 - numbers column 0 comma
03:18 - 3 here 0 is the start index
03:22 - and 3 is the end index of the slice i
03:25 - want of this list
03:27 - now when i run this code oh i haven't
03:30 - printed it so i'll say print
03:32 - new underscore numbers and when i run
03:34 - this code
03:35 - then you can see that i got the first
03:37 - three elements of the list
03:39 - the thing you need to remember about
03:40 - slicing is that the first index
03:43 - is inclusive and the last index is
03:45 - exclusive
03:47 - that is why i got the indexes from 0
03:50 - 1 and 2 which were the element 1 2
03:53 - and 3 respectively but the element at
03:56 - index 3
03:57 - was skipped also we can skip the start
04:00 - and end index as well
04:01 - if we skip the start index then slicing
04:03 - starts from the zero index
04:05 - the first element and if we skip the
04:07 - last index the slicing ends at the last
04:09 - element
04:10 - in our code i can remove this zero
04:14 - and because anyways i wanted to start
04:15 - from the first index when i press run
04:18 - i get the same output as before the
04:20 - complete slicing notation syntax looks
04:22 - like this
04:23 - it has the start index the end index and
04:25 - step
04:27 - step determines the interval in which we
04:29 - want to get a new list
04:30 - if we skip it we get a list at an
04:32 - interval of 1 like in our previous
04:34 - examples
04:35 - let me now show you an example using a
04:37 - different value of step
04:39 - i'll remove this old code from my editor
04:41 - and i'll say numbers
04:43 - equals let's say 1 2 3
04:47 - 4 5 6
04:51 - 7 and 8. now
04:54 - i'll say print numbers
04:58 - 1 column 6 column 2
05:02 - here this code means creating a list
05:05 - starting from the second item
05:07 - or the item with index 1.
05:10 - up to the sixth item with a step size of
05:13 - two
05:15 - let me run this code
05:18 - as expected this code prints a list with
05:20 - second
05:21 - fourth and the sixth items now let me
05:24 - show you a neat hack to reverse a list
05:26 - in python
05:27 - here i'll say print
05:31 - numbers and colon column
05:35 - minus one when i run this code
05:38 - you get this list reversed
05:43 - the fourth trick i want to talk about
05:44 - today is list set and dictionary
05:46 - comprehension
05:47 - comprehensions allow us to create lists
05:49 - sets and dictionaries in a more elegant
05:51 - and pythonic way
05:52 - using a single line expression suppose
05:55 - we have to create a list of the first
05:57 - five powers of two
05:58 - for this we would normally use a for
06:00 - loop and append every item to the list
06:03 - let me run the code i have on the screen
06:07 - and you can see that we get the expected
06:09 - result now wouldn't it be neat if you
06:11 - could do this same task in a single line
06:13 - list comprehension allows us to do
06:15 - exactly that let me show you how
06:17 - i'll define the numbers list directly
06:20 - with the expression
06:21 - which is 2 to the power i in this case
06:24 - so here i'll say numbers equals 2
06:28 - to the power i now i'll add a for loop
06:31 - in the same line
06:32 - so i'll say for i in
06:36 - range of 1 2
06:39 - 6 and let me close the bracket now let
06:42 - me print
06:43 - numbers and when i press run
06:46 - i get the same output this code is much
06:49 - more simpler and elegant than before and
06:51 - it
06:51 - almost feels like you're reading english
06:54 - let me read this code out and you can
06:55 - decide for yourself why it works
06:57 - create a numbers list with elements in
07:00 - the form 2 to the power
07:02 - i where i takes values
07:05 - from 1 up to 6 that means 1 to 5.
07:09 - this results in the list of first 5
07:11 - powers of 2.
07:14 - the next trick i want to talk about is
07:16 - star args
07:17 - and star star kw args star args
07:21 - is used to accept a variable number of
07:23 - arguments it can be used in a function
07:25 - to take any arbitrary amount of
07:26 - arguments
07:27 - let me show you what i mean i will
07:29 - create a function called
07:30 - add and for the arguments i'll say
07:32 - starags
07:34 - so let me remove this old code and i'll
07:36 - say def
07:37 - add and instead of just a regular
07:40 - argument i'll say star
07:41 - args let me define total
07:44 - as 0 and then in a loop
07:48 - i'll say total plus equals
07:51 - n and outside the loop i'll say return
07:55 - total now let me call this i'll say
07:58 - print
07:59 - add first let me try with nothing
08:03 - let me try one more so i'll say print
08:05 - add one comma two
08:07 - and let me try one more with three
08:09 - variables so i'll say add
08:10 - or maybe five one two three four and
08:13 - five
08:15 - the name arcs is arbitrary but is used
08:17 - as the standard convention
08:19 - when i press run
08:22 - you can see that this function worked no
08:25 - matter how many
08:26 - arguments i gave it now let's talk about
08:29 - star star kw args
08:31 - similar to starags star star kwrx is
08:34 - used to accept an arbitrary number of
08:35 - key value pairs
08:37 - it can be used in a function when we do
08:39 - not know how many keyword arguments are
08:41 - being passed
08:42 - let me show you what i mean so i'll
08:44 - remove this old code
08:46 - let me create another function i'll say
08:48 - def
08:49 - printer and the keyword args now inside
08:54 - this i can say
08:55 - for x comma y in
08:58 - keyword args dot items
09:02 - i've used the unpacking i've talked
09:04 - about before
09:05 - and here i can say print
09:08 - f i just want to print the key
09:12 - and the value like this
09:16 - now let me put this to the test so i'll
09:20 - say printer
09:22 - language equals python
09:25 - with just one key value pair and the
09:27 - next one i can try with two
09:29 - so i can say printer let's say name
09:32 - equals bill gates
09:36 - and company equals
09:40 - microsoft and when i press run
09:43 - no matter how many keyword arguments i
09:45 - give the printer function
09:47 - is able to seamlessly handle them
09:50 - before moving to the next section of the
09:51 - video the programming team has created
09:54 - an app that allows you to learn python
09:55 - from your phone
09:56 - the app contains bit size lessons that
09:58 - are easier to understand
09:59 - a built-in interpreter so that you can
10:00 - run python on your phone quizzes
10:02 - and many more the app is available on
10:04 - both ios and android the links are in
10:06 - the video description below
10:12 - the next trick i want to talk about is
10:14 - sets and set operations
10:16 - sets in python are like sets in
10:18 - mathematics a set cannot contain
10:20 - duplicate items and these items are not
10:22 - in
10:22 - any particular order in python we can
10:25 - perform different mathematical set
10:26 - operations
10:27 - intuitively using various python
10:29 - operators let me show you what i mean
10:31 - so i'll remove this old code and create
10:33 - two sets
10:34 - so i can say a equals for instance
10:38 - 10 20
10:41 - 20 30
10:44 - and 40 and then let me create another
10:47 - set
10:48 - so 30 30
10:51 - 40 let's say 50
10:55 - 60 and 70. now
10:58 - if i want to find the difference between
11:00 - these two sets i can simply use the
11:02 - minus operator
11:04 - i can just say print a minus b
11:07 - and when i press run i get the
11:11 - difference of those two sets
11:13 - and if i want to find the union of these
11:15 - two sets i can simply use the or
11:16 - operator
11:17 - so here let me try print a
11:21 - pipe b pipe here is the or operator and
11:24 - when i press run
11:25 - then i get the union of these two sets
11:28 - similarly
11:29 - if i wanted the interest section i can
11:31 - say print
11:32 - a and b the and is the intersection
11:36 - operator
11:37 - and when i press run then i get the
11:39 - intersection of these two sets
11:43 - the seventh tip that i want to share
11:44 - with you is the chaining of comparison
11:46 - operators
11:47 - suppose we have to check if the age of a
11:49 - person is greater than 18
11:50 - but less than 60. for this we would
11:53 - normally check each condition
11:54 - and use the logical operator and let me
11:57 - show you what i mean
11:58 - so i'll remove this old code and i'll
12:00 - say
12:01 - age equals let me convert to integer
12:04 - and say enter age
12:08 - now i'll say if
12:11 - age greater than 18
12:15 - and age less than 60
12:21 - i want to accept the person
12:25 - else let me say print
12:28 - rejected i save a file
12:32 - now when i run this code
12:35 - and enter age as 30 then i get accepted
12:41 - let me make this accepted i'll run this
12:44 - again let's say 30
12:46 - and i get accepted as expected however
12:49 - in python there is a better way of
12:51 - writing this condition using operator
12:53 - chaining
12:54 - let me show you what i mean and i'll
12:55 - change this
12:57 - to say age sorry 18
13:01 - less than age less than 60.
13:06 - now when i run this code again it says
13:08 - enter age
13:09 - and i can say something like 30 and i
13:12 - get the same output as before
13:14 - but this code is much more readable than
13:16 - before
13:19 - the last tip i want to talk about is the
13:21 - ternary operator
13:22 - ternary operators allow us to make our
13:24 - code more concise
13:26 - by allowing us to write if conditionals
13:28 - in a single line expression
13:30 - let me show you what i mean suppose we
13:32 - have to create a program that checks if
13:34 - a number is odd or even
13:36 - for this we would normally say we'll
13:38 - accept a number
13:39 - so let me remove this and say number
13:42 - equals to
13:42 - enter a number now obviously i'll need
13:46 - an if statement
13:47 - so i will say if number modulus
13:50 - 2 equals equals 0
13:55 - print even and
13:58 - else oops i should have used modulus
14:02 - else i'll say print or
14:05 - let me run this code and i'll enter
14:09 - odd number like 31 and you can see that
14:12 - it prints odd
14:15 - using alternative operator we can
14:17 - shorten this program even more
14:19 - here i'll say result
14:22 - equals
14:25 - even if number modulus
14:30 - 2 equals equals 0 else
14:34 - odd now i'll print the result
14:38 - i'll say print parity
14:42 - is result now when i run this program
14:48 - it asks me to enter a number let me
14:49 - enter 31 again
14:51 - and this time i get parity is odd and
14:54 - you can see that this program also works
14:55 - like before
14:56 - but is much more concise that's it for
14:59 - this video
15:00 - if you want to revise these concepts you
15:02 - can find all these programs in our
15:03 - github repository
15:04 - i'll also put this link in the video
15:06 - description and if you like this video
15:08 - hit that like button and subscribe to
15:10 - the channel and i'll see you in the next
15:11 - one
15:12 - happy programming

Cleaned transcript:

in this video we will look at eight python programming tips and tricks you might not have known about learning about these features will help you write more pythonic code and become a better python programmer so let's get started the number one trick is unpacking unpacking is an operation that can be used to assign the values of an iterable to a number of variables with a single assignment statement let me show you what i mean i'll go to my code editor and i'll say a comma b comma c equals 1 comma 2 comma 3 now let me print a print b and print c and when i press run then you can see that 1 was assigned to a 2 was assigned to b and 3 was assigned to c python assignment statements are evaluated from right to left so we can even use unpacking to swap the values of two variables in a single line and i'll remove this old code and define two variables as x equals 66 and y equals 44. i'll swap the values of variables x and y for that i can write something like x comma y equals y comma x and now print x equals and x similarly print y equals and y and when i press run you can see that access value is now 44 and y's value is now 66 where the variables have been swapped the second tip is negative indexing python programming supports negative index values for iterables like lists strings and tuples using a negative index gives us items from the last so minus 1 gives us the last item 2 gives us the second last item and so on i'll go back to my code editor remove this old code and i'll create a variable called numbers equals it'll be a list of the multiples of 5 so 5 10 15 20 and 25 now let me print something like print numbers minus one when i run this program then you should be able to get the last element similarly i can do print numbers minus 3 and when i press run then you can see that i get the third element from the last by the way if you find this video useful a sub to the channel would be much appreciated the third trick i want to talk about today is slicing python supports the slice notation for sequential data types like lists strings and tuples slicing allows us to create a new sequence from an existing sequence let me give you an example i'll go to my code editor and suppose we have a list like this so let me remove or let me remove this code now let me create a new list containing the first three items of this list so for that i can say new numbers equals numbers column 0 comma 3 here 0 is the start index and 3 is the end index of the slice i want of this list now when i run this code oh i haven't printed it so i'll say print new underscore numbers and when i run this code then you can see that i got the first three elements of the list the thing you need to remember about slicing is that the first index is inclusive and the last index is exclusive that is why i got the indexes from 0 1 and 2 which were the element 1 2 and 3 respectively but the element at index 3 was skipped also we can skip the start and end index as well if we skip the start index then slicing starts from the zero index the first element and if we skip the last index the slicing ends at the last element in our code i can remove this zero and because anyways i wanted to start from the first index when i press run i get the same output as before the complete slicing notation syntax looks like this it has the start index the end index and step step determines the interval in which we want to get a new list if we skip it we get a list at an interval of 1 like in our previous examples let me now show you an example using a different value of step i'll remove this old code from my editor and i'll say numbers equals let's say 1 2 3 4 5 6 7 and 8. now i'll say print numbers 1 column 6 column 2 here this code means creating a list starting from the second item or the item with index 1. up to the sixth item with a step size of two let me run this code as expected this code prints a list with second fourth and the sixth items now let me show you a neat hack to reverse a list in python here i'll say print numbers and colon column minus one when i run this code you get this list reversed the fourth trick i want to talk about today is list set and dictionary comprehension comprehensions allow us to create lists sets and dictionaries in a more elegant and pythonic way using a single line expression suppose we have to create a list of the first five powers of two for this we would normally use a for loop and append every item to the list let me run the code i have on the screen and you can see that we get the expected result now wouldn't it be neat if you could do this same task in a single line list comprehension allows us to do exactly that let me show you how i'll define the numbers list directly with the expression which is 2 to the power i in this case so here i'll say numbers equals 2 to the power i now i'll add a for loop in the same line so i'll say for i in range of 1 2 6 and let me close the bracket now let me print numbers and when i press run i get the same output this code is much more simpler and elegant than before and it almost feels like you're reading english let me read this code out and you can decide for yourself why it works create a numbers list with elements in the form 2 to the power i where i takes values from 1 up to 6 that means 1 to 5. this results in the list of first 5 powers of 2. the next trick i want to talk about is star args and star star kw args star args is used to accept a variable number of arguments it can be used in a function to take any arbitrary amount of arguments let me show you what i mean i will create a function called add and for the arguments i'll say starags so let me remove this old code and i'll say def add and instead of just a regular argument i'll say star args let me define total as 0 and then in a loop i'll say total plus equals n and outside the loop i'll say return total now let me call this i'll say print add first let me try with nothing let me try one more so i'll say print add one comma two and let me try one more with three variables so i'll say add or maybe five one two three four and five the name arcs is arbitrary but is used as the standard convention when i press run you can see that this function worked no matter how many arguments i gave it now let's talk about star star kw args similar to starags star star kwrx is used to accept an arbitrary number of key value pairs it can be used in a function when we do not know how many keyword arguments are being passed let me show you what i mean so i'll remove this old code let me create another function i'll say def printer and the keyword args now inside this i can say for x comma y in keyword args dot items i've used the unpacking i've talked about before and here i can say print f i just want to print the key and the value like this now let me put this to the test so i'll say printer language equals python with just one key value pair and the next one i can try with two so i can say printer let's say name equals bill gates and company equals microsoft and when i press run no matter how many keyword arguments i give the printer function is able to seamlessly handle them before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more the app is available on both ios and android the links are in the video description below the next trick i want to talk about is sets and set operations sets in python are like sets in mathematics a set cannot contain duplicate items and these items are not in any particular order in python we can perform different mathematical set operations intuitively using various python operators let me show you what i mean so i'll remove this old code and create two sets so i can say a equals for instance 10 20 20 30 and 40 and then let me create another set so 30 30 40 let's say 50 60 and 70. now if i want to find the difference between these two sets i can simply use the minus operator i can just say print a minus b and when i press run i get the difference of those two sets and if i want to find the union of these two sets i can simply use the or operator so here let me try print a pipe b pipe here is the or operator and when i press run then i get the union of these two sets similarly if i wanted the interest section i can say print a and b the and is the intersection operator and when i press run then i get the intersection of these two sets the seventh tip that i want to share with you is the chaining of comparison operators suppose we have to check if the age of a person is greater than 18 but less than 60. for this we would normally check each condition and use the logical operator and let me show you what i mean so i'll remove this old code and i'll say age equals let me convert to integer and say enter age now i'll say if age greater than 18 and age less than 60 i want to accept the person else let me say print rejected i save a file now when i run this code and enter age as 30 then i get accepted let me make this accepted i'll run this again let's say 30 and i get accepted as expected however in python there is a better way of writing this condition using operator chaining let me show you what i mean and i'll change this to say age sorry 18 less than age less than 60. now when i run this code again it says enter age and i can say something like 30 and i get the same output as before but this code is much more readable than before the last tip i want to talk about is the ternary operator ternary operators allow us to make our code more concise by allowing us to write if conditionals in a single line expression let me show you what i mean suppose we have to create a program that checks if a number is odd or even for this we would normally say we'll accept a number so let me remove this and say number equals to enter a number now obviously i'll need an if statement so i will say if number modulus 2 equals equals 0 print even and else oops i should have used modulus else i'll say print or let me run this code and i'll enter odd number like 31 and you can see that it prints odd using alternative operator we can shorten this program even more here i'll say result equals even if number modulus 2 equals equals 0 else odd now i'll print the result i'll say print parity is result now when i run this program it asks me to enter a number let me enter 31 again and this time i get parity is odd and you can see that this program also works like before but is much more concise that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming
