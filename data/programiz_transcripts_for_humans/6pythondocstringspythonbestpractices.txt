With timestamps:

00:00 - python docs strings provide a convenient
00:01 - way of associating documentation
00:03 - with python modules functions classes
00:06 - and methods
00:07 - in this video we will learn to create
00:09 - docs strings and understand
00:10 - how and why they are used so let's get
00:14 - started
00:18 - dog strings are basically multi-line
00:19 - comments inside functions
00:21 - methods modules classes and so on
00:24 - so before we dig deeper into doctrines
00:26 - let's revise multi-line comments first
00:28 - as we know we can either use triple
00:31 - single quotes or triple double quotes to
00:33 - create multi-line comments
00:34 - let me give you an example so in my code
00:36 - editor i'll say
00:38 - quotation mark quotation mark quotation
00:39 - marks takes
00:41 - two parameters
00:46 - returns sum now let me end the comment
00:49 - by saying triple quotation mark again
00:52 - and then i can say def add numbers
00:55 - a b this will return the sum of
00:59 - a and b now i can say print
01:03 - add underscore numbers 5 comma
01:06 - 10 now i'll save this
01:10 - go to my terminal and say python main
01:14 - dot pi you can see that the expected
01:16 - output was returned
01:18 - here these lines are comments as they
01:20 - are inside triple quotation marks
01:22 - these lines are ignored by the python
01:24 - interpreter now we are ready to learn
01:26 - about docstrings i have this code from
01:30 - our last example on my screen
01:33 - let me modify this program a bit and put
01:35 - this comment inside the function
01:38 - definition
01:45 - now this comment code inside the
01:48 - function is a dog string
01:49 - for a multi-line comment to be a dog
01:51 - string it must be the first line of a
01:53 - function
01:54 - class module and so on now if i hover
01:58 - over the function call
02:00 - i can see the documentation on how to
02:02 - use this function
02:03 - this can be really helpful if you are
02:05 - working in a team and have to use other
02:07 - people's code
02:08 - if we want we can also print the docs
02:10 - string from our program
02:12 - using the doc attribute let me show you
02:14 - how
02:15 - so below this code i'll say print
02:19 - add underscore numbers dot
02:22 - underscore underscore doc underscore
02:24 - underscore
02:26 - now let me close this bracket save this
02:28 - program
02:29 - open up my terminal and i'll say python
02:32 - main dot pi
02:34 - something is wrong it does not have okay
02:36 - add underscore numbers dot
02:38 - there's an extra underscore here let me
02:40 - save let me run this program again
02:42 - and you can see that whatever i had
02:45 - typed inside
02:46 - this is printed here
02:50 - here this underscore underscore dock
02:52 - underscore underscore or dunder dock
02:54 - is a special attribute that prints the
02:56 - dock string if the docsing is not
02:58 - available
02:59 - it prints none you can use the dock
03:02 - attribute to also print the docs string
03:03 - on inbuilt functions
03:05 - modules and so on let me give you an
03:07 - example
03:08 - so let me first clear this terminal i'll
03:10 - remove this old code
03:12 - and then here let me hide the terminal
03:16 - and here i'll say import math
03:19 - and then i can say print math dot
03:22 - underscore underscore doc
03:23 - i'll just go underscore similarly i can
03:26 - say print
03:27 - math dot sqrt dot underscore underscore
03:30 - doc underscore underscore
03:32 - and let me save this open up my terminal
03:35 - and say python
03:37 - main dot pi and you can see that this
03:40 - model is always available it provides
03:41 - access to the mathematical functions
03:42 - defined by the c
03:43 - standard which means this is the dock
03:46 - for math module
03:47 - and similarly sqrtx returns the square
03:50 - root of x
03:51 - which is the documentation for the
03:53 - square root function of the math module
03:57 - if your code editor supports it you can
03:59 - see doc strings by hovering over modules
04:01 - so let me hover over math and hovering
04:04 - over functions and methods
04:06 - like this by the way
04:09 - if you find this video useful a sub to
04:12 - the channel would be much appreciated
04:13 - before moving to the next section of the
04:15 - video
04:15 - the programmers team has created an app
04:17 - that allows you to learn python from
04:19 - your phone
04:19 - the app contains bit size lessons that
04:21 - are easier to understand
04:22 - a built-in interpreter so that you can
04:24 - run python on your phone quizzes and
04:26 - many more features the app is available
04:28 - on both ios and android
04:30 - the links are in the video description
04:35 - writing docstring is pretty easy however
04:38 - there are a few things we should keep in
04:39 - mind while creating doc
04:41 - strings first a dog string must be the
04:43 - first statement in a module
04:45 - function or class otherwise it's not
04:48 - considered a doc string
04:51 - second we cannot use regular comments
04:53 - that start with the hash to create a doc
04:55 - string
04:56 - even though this comment is a first line
04:58 - inside the function
04:59 - it's not a dog string because it's not a
05:01 - multi-line comment
05:02 - and the last thing you need to remember
05:04 - is that dog string must not be
05:06 - descriptive
05:07 - rather they must follow do this return
05:09 - that structure
05:10 - for example just by looking at the
05:12 - source code we know that the add numbers
05:15 - function
05:16 - takes two arguments and returns their
05:18 - sum also
05:19 - it's a good habit of ending the dot
05:21 - string with a full stop
05:23 - that's it for this video if you want to
05:24 - revise these concepts
05:26 - you can find all these programs in our
05:27 - github repository i'll also put this
05:29 - link in the video description
05:31 - and if you like this video hit that like
05:33 - button and subscribe to the channel so
05:35 - that you get notified when we release
05:36 - the next video happy programming

Cleaned transcript:

python docs strings provide a convenient way of associating documentation with python modules functions classes and methods in this video we will learn to create docs strings and understand how and why they are used so let's get started dog strings are basically multiline comments inside functions methods modules classes and so on so before we dig deeper into doctrines let's revise multiline comments first as we know we can either use triple single quotes or triple double quotes to create multiline comments let me give you an example so in my code editor i'll say quotation mark quotation mark quotation marks takes two parameters returns sum now let me end the comment by saying triple quotation mark again and then i can say def add numbers a b this will return the sum of a and b now i can say print add underscore numbers 5 comma 10 now i'll save this go to my terminal and say python main dot pi you can see that the expected output was returned here these lines are comments as they are inside triple quotation marks these lines are ignored by the python interpreter now we are ready to learn about docstrings i have this code from our last example on my screen let me modify this program a bit and put this comment inside the function definition now this comment code inside the function is a dog string for a multiline comment to be a dog string it must be the first line of a function class module and so on now if i hover over the function call i can see the documentation on how to use this function this can be really helpful if you are working in a team and have to use other people's code if we want we can also print the docs string from our program using the doc attribute let me show you how so below this code i'll say print add underscore numbers dot underscore underscore doc underscore underscore now let me close this bracket save this program open up my terminal and i'll say python main dot pi something is wrong it does not have okay add underscore numbers dot there's an extra underscore here let me save let me run this program again and you can see that whatever i had typed inside this is printed here here this underscore underscore dock underscore underscore or dunder dock is a special attribute that prints the dock string if the docsing is not available it prints none you can use the dock attribute to also print the docs string on inbuilt functions modules and so on let me give you an example so let me first clear this terminal i'll remove this old code and then here let me hide the terminal and here i'll say import math and then i can say print math dot underscore underscore doc i'll just go underscore similarly i can say print math dot sqrt dot underscore underscore doc underscore underscore and let me save this open up my terminal and say python main dot pi and you can see that this model is always available it provides access to the mathematical functions defined by the c standard which means this is the dock for math module and similarly sqrtx returns the square root of x which is the documentation for the square root function of the math module if your code editor supports it you can see doc strings by hovering over modules so let me hover over math and hovering over functions and methods like this by the way if you find this video useful a sub to the channel would be much appreciated before moving to the next section of the video the programmers team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description writing docstring is pretty easy however there are a few things we should keep in mind while creating doc strings first a dog string must be the first statement in a module function or class otherwise it's not considered a doc string second we cannot use regular comments that start with the hash to create a doc string even though this comment is a first line inside the function it's not a dog string because it's not a multiline comment and the last thing you need to remember is that dog string must not be descriptive rather they must follow do this return that structure for example just by looking at the source code we know that the add numbers function takes two arguments and returns their sum also it's a good habit of ending the dot string with a full stop that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel so that you get notified when we release the next video happy programming
