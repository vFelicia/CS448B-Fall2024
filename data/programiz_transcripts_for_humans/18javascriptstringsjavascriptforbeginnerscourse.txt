With timestamps:

00:00 - what's up guys i'm punit from
00:01 - programmers and welcome back to the
00:03 - series on javascript in this video we
00:05 - will learn about strings which represent
00:07 - textual data in javascript we've already
00:10 - used strings numerous times in our
00:11 - programs before usually for the purpose
00:13 - of printing now we will cover strings in
00:16 - depth from the very beginning so let's
00:17 - get started
00:22 - in javascript we create strings by
00:24 - enclosing characters inside quotations
00:26 - like this so on my code editor i'll say
00:29 - const
00:30 - text equals and inside quotes i'll say
00:34 - javascript is fun
00:37 - now let me print the text
00:40 - and verify that this is indeed a string
00:43 - by using type of text
00:46 - the text javascript is fun is inside
00:49 - quotation marks
00:51 - and that's why it's a string we have
00:53 - assigned it to the text variable
00:55 - now let me run this code
00:57 - and you can see that i get javascript is
00:59 - fun
01:00 - and the type of this text variable is a
01:03 - string
01:04 - instead of double quotes we can also use
01:06 - single quotes like this
01:08 - so i'll change this double quotes to
01:10 - single quotes
01:12 - and when i press run
01:14 - i get the same output as before now
01:16 - while you can use either a single quote
01:18 - or double quote try to be consistent
01:20 - within your code if you're going to use
01:22 - a single quote then use single quotes
01:24 - throughout the program and if you're
01:25 - going to use double quotes use that
01:27 - throughout the program
01:29 - also you cannot mismatch the quotes for
01:31 - example starting a string with a single
01:33 - quote and ending it with a double quote
01:35 - is not allowed let me give you an
01:37 - example so let me change this ending
01:40 - code to double quote
01:42 - and now when i press run you can see
01:44 - that i got an error
01:46 - the es6 version of javascript introduced
01:48 - a new way to denote strings using
01:50 - template literals template literals use
01:53 - the tick mark instead of quotation marks
01:55 - now let's see how we can use tick marks
01:57 - in our code i'll replace this single
01:59 - quote with take and obviously this
02:01 - ending
02:02 - double quote with tick as well when i
02:05 - press run you can see that it's a
02:07 - substitute for single or double quotes
02:09 - as well but this does not end here the
02:11 - tick mark can be used to include
02:14 - variables inside a string let me show
02:16 - you i'll remove this old code
02:18 - and i'll say const age equals 25 now i
02:22 - can say const text equals
02:26 - tick
02:27 - i am
02:29 - dollar
02:30 - age years old
02:33 - now let me say console log text
02:37 - and
02:38 - here we have used the tick marks
02:40 - to create the string and we have
02:42 - included the age variable inside the
02:45 - string
02:46 - notice that we have used the dollar sign
02:48 - followed by the variable name inside
02:50 - curly braces to include the variable
02:53 - value inside the string
02:54 - let me run this code
02:56 - and you can see that i got i am 25 years
02:59 - old the value 25 was obtained from the
03:02 - variable age now we know that text is a
03:05 - string but let's verify this again by
03:07 - checking its type so i'll say cons oops
03:10 - i'll say console.log
03:13 - type
03:15 - of
03:16 - text
03:17 - and press run and i've just verified
03:19 - that yes text is indeed a string
03:22 - if you're enjoying this video please
03:24 - also check out program is pro where we
03:26 - provide tutorials along with quizzes and
03:28 - challenges which will help you practice
03:30 - and test your learning in real time also
03:32 - the course includes projects to give you
03:34 - an awesome experience of how programming
03:35 - works in the real world and for our
03:37 - youtube subscribers we are giving 50 off
03:39 - on the yearly plan sign up by scanning
03:41 - this qr code or use the link in the
03:43 - video description to claim your discount
03:47 - a javascript string is a sequence of
03:49 - characters so we can also access each
03:51 - character of the string now one way to
03:53 - access string characters is by treating
03:55 - a string as an array suppose we have a
03:57 - string like this so const text equals
04:01 - hello
04:03 - to access its characters we can treat
04:05 - this string as an array and use array
04:07 - indexes to access each character
04:09 - you can see each character is associated
04:11 - with an index number now we can use this
04:14 - index number to access the corresponding
04:15 - character
04:16 - let's access each character one by one
04:19 - so i'll go back to my code editor and
04:21 - i'll write
04:22 - console.log
04:25 - and text and just like with an array
04:27 - inside square brackets i'll say zero
04:31 - here i've used zero because the array
04:33 - indexing starts from zero let me run
04:35 - this code
04:37 - as you can see i got h which is the
04:39 - first character of the string
04:41 - similarly to access the second character
04:43 - i can use the index one
04:45 - so instead of zero or let me not remove
04:48 - this i'll say console.log
04:50 - text
04:51 - one
04:52 - let me also print
04:54 - log
04:55 - text
04:56 - 2
04:57 - and now when i press run
04:59 - you must have guessed the output by now
05:01 - i get the first character the second
05:03 - character and the third character in the
05:05 - string hello respectively
05:10 - we can also use the carat method to
05:12 - access each character of the string
05:14 - suppose we have the same string now
05:15 - let's use the carrot method to access
05:17 - the first second and third characters to
05:20 - access the first character
05:22 - i will need to say console log
05:24 - text dot care at a is capital always
05:28 - remember
05:29 - and this time instead of the square
05:32 - brackets i will use the small brackets
05:34 - or the regular parenthesis and 0.
05:37 - similarly to get the second character
05:39 - console.log
05:42 - text dot
05:43 - care at
05:44 - 1
05:46 - and
05:47 - console.log
05:48 - text dot
05:50 - care at
05:51 - 2
05:52 - let me press run
05:54 - and i should get the same output as
05:57 - before
05:59 - by now you must be very confident that
06:01 - if you know the index number you can
06:02 - always access the corresponding
06:04 - character at that index
06:08 - javascript provides a built-in property
06:10 - called length which is used to find the
06:12 - total number of characters present in a
06:14 - string let's see an example i'll remove
06:16 - this code and let me just say const
06:20 - result equals
06:21 - text dot
06:23 - length this time there's no parenthesis
06:25 - because this is a property we'll learn
06:27 - about that in detail later
06:29 - and then let me say console.log
06:32 - result
06:35 - now if i press run
06:38 - you can see that i got 5 which is the
06:40 - number of characters or the length of
06:42 - the string hello
06:44 - the length property is one of the most
06:46 - used properties of string so make sure
06:48 - you understand how it works
06:50 - okay guys we need your support to keep
06:51 - these kinds of content free for all
06:53 - users youtube really likes engagement on
06:55 - the video so leave a comment below press
06:57 - that like button and hit subscribe if
06:59 - you haven't already let's get the
07:00 - engagement score high up so that more
07:02 - people can discover and enjoy these
07:04 - courses
07:07 - in javascript strings are case sensitive
07:09 - that means
07:10 - capital hello and small case hello are
07:13 - two different strings and they are
07:15 - treated differently we can verify this
07:17 - by comparing the two strings using the
07:19 - strict equal to operator i'll first
07:21 - create two strings variables with the
07:23 - values capital case hello and small case
07:26 - hello so
07:28 - const str 1
07:31 - equals
07:33 - uppercase hello and
07:35 - const str2 equals
07:38 - lowercase hello
07:40 - now i'll say console.log
07:44 - str1 triple equals to str2
07:49 - and let me press run
07:51 - this time i get false even though both
07:54 - str1 and str2 were the word hello
07:57 - let me show you if this is small hello
08:00 - then when i press run
08:03 - this time i get true because both the
08:05 - content and the case are the same
08:10 - there may be a time when we have to use
08:12 - long strings in our program in such
08:14 - times in order to have some readability
08:16 - within our code it's better to display
08:18 - the strings in multiline on my code
08:21 - editor you can see that i have a message
08:23 - variable which contains a long string
08:25 - value now this will hinder the
08:27 - readability of the code it's better to
08:29 - display the string in multiline within
08:31 - the code so to use a multiline string we
08:33 - can use the backslash let me convert
08:36 - this into a multiline string using the
08:37 - backslash so
08:39 - i want a backslash here
08:42 - and let me put a backslash here
08:45 - and let me put a backslash here as well
08:50 - and you can see that my content is much
08:52 - more readable now let me console log
08:55 - this
09:00 - and now when i press run
09:02 - i get the same string and you can see
09:04 - that there are no new lines in the
09:05 - output that means
09:07 - the backslashes are only aesthetic to
09:10 - make sure that our long strings
09:12 - don't take up a lot of space and they
09:14 - are much more readable internally this
09:16 - is the same as the one without the
09:19 - slashes
09:21 - so if i remove the slashes
09:23 - i will get the same output as before
09:33 - now to practice what we've learned
09:35 - here's a programming task for you create
09:37 - a javascript string and find the first
09:39 - and last character of the string using
09:40 - the carat method and the length property
09:43 - you'll find the answer to this question
09:45 - in our github repository also if you
09:47 - want to revise these concepts you can
09:48 - find all these programs in our github
09:50 - repository as well i'll put the link in
09:52 - the video description below
09:54 - now that we've reached the end of this
09:55 - video it's time for the programming quiz
09:57 - what is the output of the following
09:59 - program
10:01 - comment answer below and happy
10:03 - programming
10:03 - [Music]

Cleaned transcript:

what's up guys i'm punit from programmers and welcome back to the series on javascript in this video we will learn about strings which represent textual data in javascript we've already used strings numerous times in our programs before usually for the purpose of printing now we will cover strings in depth from the very beginning so let's get started in javascript we create strings by enclosing characters inside quotations like this so on my code editor i'll say const text equals and inside quotes i'll say javascript is fun now let me print the text and verify that this is indeed a string by using type of text the text javascript is fun is inside quotation marks and that's why it's a string we have assigned it to the text variable now let me run this code and you can see that i get javascript is fun and the type of this text variable is a string instead of double quotes we can also use single quotes like this so i'll change this double quotes to single quotes and when i press run i get the same output as before now while you can use either a single quote or double quote try to be consistent within your code if you're going to use a single quote then use single quotes throughout the program and if you're going to use double quotes use that throughout the program also you cannot mismatch the quotes for example starting a string with a single quote and ending it with a double quote is not allowed let me give you an example so let me change this ending code to double quote and now when i press run you can see that i got an error the es6 version of javascript introduced a new way to denote strings using template literals template literals use the tick mark instead of quotation marks now let's see how we can use tick marks in our code i'll replace this single quote with take and obviously this ending double quote with tick as well when i press run you can see that it's a substitute for single or double quotes as well but this does not end here the tick mark can be used to include variables inside a string let me show you i'll remove this old code and i'll say const age equals 25 now i can say const text equals tick i am dollar age years old now let me say console log text and here we have used the tick marks to create the string and we have included the age variable inside the string notice that we have used the dollar sign followed by the variable name inside curly braces to include the variable value inside the string let me run this code and you can see that i got i am 25 years old the value 25 was obtained from the variable age now we know that text is a string but let's verify this again by checking its type so i'll say cons oops i'll say console.log type of text and press run and i've just verified that yes text is indeed a string if you're enjoying this video please also check out program is pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount a javascript string is a sequence of characters so we can also access each character of the string now one way to access string characters is by treating a string as an array suppose we have a string like this so const text equals hello to access its characters we can treat this string as an array and use array indexes to access each character you can see each character is associated with an index number now we can use this index number to access the corresponding character let's access each character one by one so i'll go back to my code editor and i'll write console.log and text and just like with an array inside square brackets i'll say zero here i've used zero because the array indexing starts from zero let me run this code as you can see i got h which is the first character of the string similarly to access the second character i can use the index one so instead of zero or let me not remove this i'll say console.log text one let me also print log text 2 and now when i press run you must have guessed the output by now i get the first character the second character and the third character in the string hello respectively we can also use the carat method to access each character of the string suppose we have the same string now let's use the carrot method to access the first second and third characters to access the first character i will need to say console log text dot care at a is capital always remember and this time instead of the square brackets i will use the small brackets or the regular parenthesis and 0. similarly to get the second character console.log text dot care at 1 and console.log text dot care at 2 let me press run and i should get the same output as before by now you must be very confident that if you know the index number you can always access the corresponding character at that index javascript provides a builtin property called length which is used to find the total number of characters present in a string let's see an example i'll remove this code and let me just say const result equals text dot length this time there's no parenthesis because this is a property we'll learn about that in detail later and then let me say console.log result now if i press run you can see that i got 5 which is the number of characters or the length of the string hello the length property is one of the most used properties of string so make sure you understand how it works okay guys we need your support to keep these kinds of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses in javascript strings are case sensitive that means capital hello and small case hello are two different strings and they are treated differently we can verify this by comparing the two strings using the strict equal to operator i'll first create two strings variables with the values capital case hello and small case hello so const str 1 equals uppercase hello and const str2 equals lowercase hello now i'll say console.log str1 triple equals to str2 and let me press run this time i get false even though both str1 and str2 were the word hello let me show you if this is small hello then when i press run this time i get true because both the content and the case are the same there may be a time when we have to use long strings in our program in such times in order to have some readability within our code it's better to display the strings in multiline on my code editor you can see that i have a message variable which contains a long string value now this will hinder the readability of the code it's better to display the string in multiline within the code so to use a multiline string we can use the backslash let me convert this into a multiline string using the backslash so i want a backslash here and let me put a backslash here and let me put a backslash here as well and you can see that my content is much more readable now let me console log this and now when i press run i get the same string and you can see that there are no new lines in the output that means the backslashes are only aesthetic to make sure that our long strings don't take up a lot of space and they are much more readable internally this is the same as the one without the slashes so if i remove the slashes i will get the same output as before now to practice what we've learned here's a programming task for you create a javascript string and find the first and last character of the string using the carat method and the length property you'll find the answer to this question in our github repository also if you want to revise these concepts you can find all these programs in our github repository as well i'll put the link in the video description below now that we've reached the end of this video it's time for the programming quiz what is the output of the following program comment answer below and happy programming
