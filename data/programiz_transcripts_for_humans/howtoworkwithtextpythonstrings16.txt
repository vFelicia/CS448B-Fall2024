With timestamps:

00:00 - what's up guys i'm purity from
00:01 - programmers and welcome back to this
00:03 - series on python
00:04 - in the last video we learned about two
00:06 - sequences lists and tuples
00:09 - they allowed us to store and work with
00:10 - multiple items at once
00:12 - in this video we will learn about
00:14 - another sequence type strings
00:16 - which is a sequence of characters we
00:18 - have already used strings numerous times
00:20 - in our programs before
00:22 - usually for the purpose of printing now
00:24 - we will cover strings in depth from the
00:26 - very beginning
00:27 - so let's get started
00:36 - in python we create strings by enclosing
00:38 - characters inside quotations like this
00:41 - this hello there inside single
00:44 - quotations is a string
00:45 - we have assigned it to a variable named
00:47 - text
00:49 - and in the next line we have printed the
00:50 - text variable when i run it
00:53 - as expected hello there is printed
00:57 - instead of single quotes we can also use
00:59 - double quotes like this
01:00 - so i can say text equals double quote
01:03 - hello there
01:04 - and then double quote again when i run
01:06 - it
01:07 - again hello there is printed however we
01:10 - can't use mismatching quotations like
01:12 - this so i cannot say single quotation
01:14 - hello there double quotation
01:16 - if i press run then python tells me that
01:18 - there's an error
01:20 - we can also use triple single quotes or
01:22 - triple double quotes to create a string
01:24 - like this
01:25 - so i can say text equals double quote
01:28 - double quote double quote hello there
01:30 - and then again double three double
01:32 - quotes in the end now when i press run
01:34 - i get hello there like before this is
01:37 - usually used for creating a string that
01:39 - spans multiple lines
01:41 - let me add another line inside triple
01:42 - quotation marks
01:44 - so here i'll say hello there how
01:47 - are you doing now when i press run
01:51 - then i get hello there how are you doing
01:52 - on separate lines
01:55 - now suppose we want to create a string
01:57 - like this he said
01:58 - what's there this string contains both
02:01 - single quotes
02:02 - and double quotes i'll run this code
02:06 - and as you can see we get an error this
02:09 - is because
02:10 - python thinks this part inside quotation
02:12 - marks is the string
02:13 - and whatever is outside of that or
02:15 - following that is regular python code
02:19 - to fix this we can escape characters
02:21 - like quotations by using a backslash
02:23 - before it
02:24 - so here i can say he said
02:27 - backslash what's there
02:32 - and now when i press run then i get the
02:34 - correct output
02:37 - now that we know how we can create
02:39 - strings in python let's see how we can
02:41 - access characters from a string
02:45 - as mentioned before a string is a
02:47 - sequence of characters
02:49 - and these characters are in order so we
02:51 - can access individual characters of a
02:53 - string
02:53 - using indices just like with lists and
02:55 - tuples
02:56 - suppose we have a string like this the
02:58 - index of the first character p
03:00 - is 0 the index of the second character y
03:03 - is 1
03:04 - the index of the third character t is 2
03:06 - and so on
03:07 - let's access the first character p from
03:09 - the string to access the first character
03:12 - after the name of the string we need to
03:14 - type square brackets and inside it
03:16 - i will provide the index since we are
03:18 - trying to get the first character
03:19 - we need to use index 0. so here i'll say
03:22 - print
03:23 - text square bracket 0 and when i press
03:26 - run
03:27 - then i get p which is the first
03:29 - character in the string
03:30 - now let's try to get the fourth
03:32 - character from the string to get this
03:34 - character
03:34 - we need to use index three inside square
03:36 - brackets so here instead of zero
03:38 - i'll say three and when i press run then
03:41 - i get
03:42 - h which is the fourth character in
03:43 - python string
03:46 - before moving to the next section of the
03:47 - video i'd like to mention that the
03:49 - program is team has created an app that
03:51 - allows you to learn python from your
03:53 - phone
03:54 - the app contains bit size lessons that
03:55 - are easy to understand
03:57 - a built-in interpreter so that you can
03:58 - run python on your phone
04:00 - quizzes and many more features the app
04:03 - is available on both ios and android
04:05 - the links are in the video description
04:06 - below
04:09 - python also supports negative indexing
04:11 - for all sequences
04:13 - including strings using a negative index
04:15 - makes it easier to access characters
04:17 - from the last
04:18 - the index of the last character in the
04:20 - string is -1 the index of the second
04:22 - last character is -2 and so on
04:24 - let's try negative indexing in action i
04:27 - have this program from our last example
04:28 - on my screen
04:30 - let me change the index to minus 1 so
04:32 - i'll say
04:33 - print text minus 1 and now when i press
04:36 - run
04:37 - and as you can see n which is the last
04:39 - character in the string
04:40 - is printed
04:44 - we can not only access a single
04:46 - character but we can also access a
04:47 - substring from the string
04:49 - using the slicing operator to get a
04:51 - portion of the string
04:52 - inside the square brackets i'll mention
04:54 - the start index colon
04:56 - then the end index so here i'll say give
04:58 - me text
05:00 - 1 colon 4 let me run the code
05:05 - here i get yth the thing you need to
05:08 - remember with slicing is that the first
05:10 - index
05:10 - is inclusive but the last index is
05:13 - exclusive
05:14 - that's why we got only yth and not
05:17 - o which is the fourth index
05:21 - now let me remove the start index from
05:23 - our code
05:26 - when i run it we get characters from
05:29 - start to the third index
05:32 - this is equivalent to saying text 0
05:35 - 4 when i run it i get the same output
05:38 - similarly if we do not mention the end
05:40 - index we get a string containing
05:42 - characters from the start index
05:44 - to the last character here i'll say
05:47 - give me all the characters from the
05:49 - second index
05:50 - up to the last and when i press run
05:53 - then i get t h o n that means start from
05:57 - the second index which is t
05:58 - and go to till the end
06:04 - strings in python are immutable and we
06:06 - cannot add or change characters of a
06:08 - string
06:09 - let's see what happens when we try to
06:10 - change characters of a string
06:12 - suppose i have the same text string we
06:14 - have been working with
06:16 - i'll try to modify the first character
06:18 - by saying text
06:19 - 0 equals small p
06:22 - and then let me try to print text
06:26 - here when i press run then python tells
06:29 - me
06:29 - there's a type error str object does not
06:32 - support item assignment
06:34 - this error message is telling us that we
06:36 - are trying to change characters of a
06:37 - string
06:38 - but it's not allowed however we can
06:40 - perform operations on strings
06:42 - without modifying the original string
06:44 - which we will see next
06:49 - strings are one of the most frequently
06:50 - used data types and we can perform
06:52 - various operations on them
06:54 - before we learn about different string
06:55 - methods let's see a couple of operations
06:57 - that we can perform with strings
06:59 - the first operation is string
07:01 - concatenation it means the joining of
07:03 - two strings
07:04 - into one to join two strings we can use
07:07 - the plus operator
07:08 - let me give you an example so here i'll
07:10 - say
07:11 - text one equals python
07:15 - and text 2 equals programming
07:19 - now i can say result equals
07:22 - text 1 plus text 2
07:26 - and let me print the result
07:29 - here we have created a new string by
07:31 - joining text 1
07:32 - and text 2 which is assigned to the
07:35 - result variable
07:36 - the important thing to note here is that
07:38 - we are not modifying python
07:40 - and we are not modifying programming we
07:42 - are actually creating a new string
07:44 - which is stored in the result variable
07:47 - let me run it
07:49 - and as you can see a new string called
07:51 - python programming is created and
07:52 - printed
07:54 - let me add a space between python and
07:56 - programming so that it looks a bit
07:57 - better
07:58 - so here i'll say text one plus space
08:02 - plus text two and now when i press run
08:04 - then you can see that there's a space in
08:06 - between
08:08 - we can also repeat a string a certain
08:10 - number of times very easily in python
08:12 - we use the asterisk operator for that so
08:15 - here i'll go back to my old code
08:16 - that says text equals python
08:20 - and then i can say new underscore text
08:23 - equals text asterisk
08:27 - 3 now when i print
08:30 - new underscore text and run the code
08:34 - then you can see python three times is
08:36 - printed
08:38 - python also has several string methods
08:40 - for common string tasks
08:42 - but before we check that let's see how
08:44 - we can iterate through a string
08:47 - the easiest way to iterate through
08:49 - characters of a string is by using a for
08:51 - loop
08:52 - let's take an example i'll go back to my
08:54 - old code that says text equals python
08:56 - then i'll say for character
08:59 - in text and inside the for loop i'll say
09:04 - print
09:06 - character when i run this code
09:10 - then you can see that each character is
09:12 - printed one by one
09:14 - this for loop iterates from the starting
09:17 - character
09:18 - p to the end character n
09:21 - in the first iteration the character
09:23 - variable holds
09:25 - p in the second iteration it holds y
09:28 - in the third iteration it holds t and so
09:30 - on
09:32 - and in each iteration we have printed
09:34 - the character variable
09:37 - this slope iterates six times because
09:39 - the size of the string
09:40 - python is six we can check this by using
09:45 - the len built in function
09:46 - it returns the length of any object in
09:48 - python so here i'll say
09:50 - print len text and now when i press run
09:55 - then then you can see that 6 is printed
09:58 - it's also pretty easy to check if a
10:00 - string is inside a string or not
10:02 - let me quickly give you an example so
10:04 - i'll delete this whole code
10:05 - and then i'll say print p
10:09 - in text now when i press run
10:14 - then since p is present in the word
10:17 - python
10:18 - i get true let's try something more
10:21 - interesting so instead of p
10:22 - i'll say y t h and when i press run
10:26 - then this time also i get true because y
10:28 - th
10:29 - is inside python now let me try
10:32 - something else i'll say
10:34 - o n t and when i press run this time i
10:37 - get false
10:38 - because o n t is not inside python in
10:41 - that order
10:45 - as i have mentioned before strings are
10:47 - probably the most frequently used data
10:49 - type
10:50 - to make working with strings easier
10:52 - python has numerous string methods
10:53 - readily available for us to use let's
10:56 - try some of the string methods now
10:58 - suppose i have a string like this i like
11:01 - python 3. let's say we want all
11:04 - characters in this string to be lower
11:06 - case
11:06 - now to do this we can use the lower
11:09 - method so here i can say
11:11 - result equals text dot
11:14 - lower and in the next line i'll say
11:17 - print
11:18 - result now when i press run then you can
11:21 - see
11:21 - i like python 3 with all characters in
11:24 - lowercase is stored in the result
11:25 - variable and printed
11:28 - similarly if you want all uppercase
11:30 - characters we can use the upper method
11:32 - so i'll replace lower with upper and
11:35 - when i press run
11:36 - then i get i like python 3 in uppercase
11:40 - now suppose we want to find the index of
11:42 - this python substring
11:45 - then we can use either find or index
11:47 - method
11:48 - i'll change this upper to find and
11:51 - inside it
11:52 - i'll mention what substring i want to
11:54 - find so here i'll say
11:56 - python and now when i press run
11:59 - i get 7 because 7 is the index of the
12:02 - first
12:03 - occurrence of python inside the string
12:06 - let's try one last example suppose we
12:08 - want to replace python
12:10 - 3 with java we can do that by using the
12:12 - replace method
12:13 - i'll use the replace method instead of
12:15 - find and inside it
12:16 - i need to pass two arguments the first
12:18 - argument is the substring we want to
12:20 - replace
12:21 - so i'll put python 3 so here i'll say
12:23 - text dot
12:24 - replace and then
12:27 - python 3 and in the second argument
12:30 - since we want to replace it with java
12:31 - i'll put java
12:35 - this code returns a new string with
12:37 - python 3 replaced with java
12:39 - i'll run the code and as you can see
12:43 - i like java is printed there are
12:45 - numerous other useful string methods in
12:47 - python
12:48 - you can find all the string methods
12:50 - their descriptions
12:51 - and working examples in our website
12:52 - programmings.com the link is in the
12:54 - video description
12:58 - before we end this video here's a little
13:00 - task for you
13:01 - can you guess the output of this program
13:03 - i'll give you a couple of seconds to
13:04 - pause the video
13:05 - as always you'll find the answer to this
13:07 - question in our github repository
13:09 - i'll also include this link in the
13:10 - description below we've covered a lot in
13:13 - this video
13:14 - let's have a quick recap of what we
13:16 - learned a string
13:17 - is a sequence of characters to create a
13:19 - string we use either single quotes or
13:22 - double quotes or triple quotes
13:24 - we can access the specified character
13:25 - from the string by using its
13:27 - index we can also get a substring from a
13:29 - string
13:30 - by using the slice notation since a
13:32 - string is a sequence
13:34 - we can iterate through characters of a
13:35 - string using a loop and finally
13:38 - we learned about different string
13:39 - methods that's it for this video
13:41 - i hope you learned something if you're
13:42 - just watching the video without writing
13:44 - any code
13:45 - i highly encourage you to try the
13:46 - programs in this video on your own
13:48 - the only way you can be a good
13:49 - programmer is by trying by the way
13:51 - you can find all the programs from this
13:53 - video on github i posted the link in the
13:55 - description below
13:56 - feel free to copy these programs and
13:58 - edit them as you please
13:59 - and if you have any questions and
14:01 - feedback use the comment section below
14:03 - in the next video we will learn about
14:05 - another collection data type
14:06 - dictionaries which allow us to store key
14:08 - value pairs join me in this video series
14:10 - and let's explore the exciting wall of
14:12 - programming together if you like this
14:14 - video
14:14 - hit the like button now and also don't
14:16 - forget to subscribe to our channel
14:18 - and ring that bell icon so that you
14:19 - don't miss the next video thanks for
14:21 - watching
14:21 - and i'll see you in the next one happy
14:23 - programming

Cleaned transcript:

what's up guys i'm purity from programmers and welcome back to this series on python in the last video we learned about two sequences lists and tuples they allowed us to store and work with multiple items at once in this video we will learn about another sequence type strings which is a sequence of characters we have already used strings numerous times in our programs before usually for the purpose of printing now we will cover strings in depth from the very beginning so let's get started in python we create strings by enclosing characters inside quotations like this this hello there inside single quotations is a string we have assigned it to a variable named text and in the next line we have printed the text variable when i run it as expected hello there is printed instead of single quotes we can also use double quotes like this so i can say text equals double quote hello there and then double quote again when i run it again hello there is printed however we can't use mismatching quotations like this so i cannot say single quotation hello there double quotation if i press run then python tells me that there's an error we can also use triple single quotes or triple double quotes to create a string like this so i can say text equals double quote double quote double quote hello there and then again double three double quotes in the end now when i press run i get hello there like before this is usually used for creating a string that spans multiple lines let me add another line inside triple quotation marks so here i'll say hello there how are you doing now when i press run then i get hello there how are you doing on separate lines now suppose we want to create a string like this he said what's there this string contains both single quotes and double quotes i'll run this code and as you can see we get an error this is because python thinks this part inside quotation marks is the string and whatever is outside of that or following that is regular python code to fix this we can escape characters like quotations by using a backslash before it so here i can say he said backslash what's there and now when i press run then i get the correct output now that we know how we can create strings in python let's see how we can access characters from a string as mentioned before a string is a sequence of characters and these characters are in order so we can access individual characters of a string using indices just like with lists and tuples suppose we have a string like this the index of the first character p is 0 the index of the second character y is 1 the index of the third character t is 2 and so on let's access the first character p from the string to access the first character after the name of the string we need to type square brackets and inside it i will provide the index since we are trying to get the first character we need to use index 0. so here i'll say print text square bracket 0 and when i press run then i get p which is the first character in the string now let's try to get the fourth character from the string to get this character we need to use index three inside square brackets so here instead of zero i'll say three and when i press run then i get h which is the fourth character in python string before moving to the next section of the video i'd like to mention that the program is team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easy to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description below python also supports negative indexing for all sequences including strings using a negative index makes it easier to access characters from the last the index of the last character in the string is 1 the index of the second last character is 2 and so on let's try negative indexing in action i have this program from our last example on my screen let me change the index to minus 1 so i'll say print text minus 1 and now when i press run and as you can see n which is the last character in the string is printed we can not only access a single character but we can also access a substring from the string using the slicing operator to get a portion of the string inside the square brackets i'll mention the start index colon then the end index so here i'll say give me text 1 colon 4 let me run the code here i get yth the thing you need to remember with slicing is that the first index is inclusive but the last index is exclusive that's why we got only yth and not o which is the fourth index now let me remove the start index from our code when i run it we get characters from start to the third index this is equivalent to saying text 0 4 when i run it i get the same output similarly if we do not mention the end index we get a string containing characters from the start index to the last character here i'll say give me all the characters from the second index up to the last and when i press run then i get t h o n that means start from the second index which is t and go to till the end strings in python are immutable and we cannot add or change characters of a string let's see what happens when we try to change characters of a string suppose i have the same text string we have been working with i'll try to modify the first character by saying text 0 equals small p and then let me try to print text here when i press run then python tells me there's a type error str object does not support item assignment this error message is telling us that we are trying to change characters of a string but it's not allowed however we can perform operations on strings without modifying the original string which we will see next strings are one of the most frequently used data types and we can perform various operations on them before we learn about different string methods let's see a couple of operations that we can perform with strings the first operation is string concatenation it means the joining of two strings into one to join two strings we can use the plus operator let me give you an example so here i'll say text one equals python and text 2 equals programming now i can say result equals text 1 plus text 2 and let me print the result here we have created a new string by joining text 1 and text 2 which is assigned to the result variable the important thing to note here is that we are not modifying python and we are not modifying programming we are actually creating a new string which is stored in the result variable let me run it and as you can see a new string called python programming is created and printed let me add a space between python and programming so that it looks a bit better so here i'll say text one plus space plus text two and now when i press run then you can see that there's a space in between we can also repeat a string a certain number of times very easily in python we use the asterisk operator for that so here i'll go back to my old code that says text equals python and then i can say new underscore text equals text asterisk 3 now when i print new underscore text and run the code then you can see python three times is printed python also has several string methods for common string tasks but before we check that let's see how we can iterate through a string the easiest way to iterate through characters of a string is by using a for loop let's take an example i'll go back to my old code that says text equals python then i'll say for character in text and inside the for loop i'll say print character when i run this code then you can see that each character is printed one by one this for loop iterates from the starting character p to the end character n in the first iteration the character variable holds p in the second iteration it holds y in the third iteration it holds t and so on and in each iteration we have printed the character variable this slope iterates six times because the size of the string python is six we can check this by using the len built in function it returns the length of any object in python so here i'll say print len text and now when i press run then then you can see that 6 is printed it's also pretty easy to check if a string is inside a string or not let me quickly give you an example so i'll delete this whole code and then i'll say print p in text now when i press run then since p is present in the word python i get true let's try something more interesting so instead of p i'll say y t h and when i press run then this time also i get true because y th is inside python now let me try something else i'll say o n t and when i press run this time i get false because o n t is not inside python in that order as i have mentioned before strings are probably the most frequently used data type to make working with strings easier python has numerous string methods readily available for us to use let's try some of the string methods now suppose i have a string like this i like python 3. let's say we want all characters in this string to be lower case now to do this we can use the lower method so here i can say result equals text dot lower and in the next line i'll say print result now when i press run then you can see i like python 3 with all characters in lowercase is stored in the result variable and printed similarly if you want all uppercase characters we can use the upper method so i'll replace lower with upper and when i press run then i get i like python 3 in uppercase now suppose we want to find the index of this python substring then we can use either find or index method i'll change this upper to find and inside it i'll mention what substring i want to find so here i'll say python and now when i press run i get 7 because 7 is the index of the first occurrence of python inside the string let's try one last example suppose we want to replace python 3 with java we can do that by using the replace method i'll use the replace method instead of find and inside it i need to pass two arguments the first argument is the substring we want to replace so i'll put python 3 so here i'll say text dot replace and then python 3 and in the second argument since we want to replace it with java i'll put java this code returns a new string with python 3 replaced with java i'll run the code and as you can see i like java is printed there are numerous other useful string methods in python you can find all the string methods their descriptions and working examples in our website programmings.com the link is in the video description before we end this video here's a little task for you can you guess the output of this program i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include this link in the description below we've covered a lot in this video let's have a quick recap of what we learned a string is a sequence of characters to create a string we use either single quotes or double quotes or triple quotes we can access the specified character from the string by using its index we can also get a substring from a string by using the slice notation since a string is a sequence we can iterate through characters of a string using a loop and finally we learned about different string methods that's it for this video i hope you learned something if you're just watching the video without writing any code i highly encourage you to try the programs in this video on your own the only way you can be a good programmer is by trying by the way you can find all the programs from this video on github i posted the link in the description below feel free to copy these programs and edit them as you please and if you have any questions and feedback use the comment section below in the next video we will learn about another collection data type dictionaries which allow us to store key value pairs join me in this video series and let's explore the exciting wall of programming together if you like this video hit the like button now and also don't forget to subscribe to our channel and ring that bell icon so that you don't miss the next video thanks for watching and i'll see you in the next one happy programming
