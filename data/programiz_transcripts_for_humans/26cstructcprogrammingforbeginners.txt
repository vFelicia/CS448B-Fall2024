With timestamps:

00:00 - hey guys this is me padma from
00:01 - programmies and welcome back to this
00:03 - series on c programming in this video we
00:06 - will learn about struct in c more
00:08 - specifically we will learn to store
00:10 - related data together under a single
00:12 - name using struct so let's get started
00:19 - a struct is a collection of variables
00:21 - under a single name the variables can be
00:23 - of different types suppose we want to
00:25 - store the name and a's of a person for
00:28 - this we can create two variables and
00:30 - store name and is however since both the
00:33 - data are of same person it would be
00:35 - better to create a single struct and put
00:37 - this data inside it remember struct is
00:41 - often termed as structure in c so don't
00:44 - get confused they are mostly used
00:46 - interchangeably let's now start with the
00:48 - syntax of creating a struct a struct in
00:51 - c starts with the struck keyword
00:53 - followed by the name of the struct
00:55 - the curly braces indicates the body of
00:57 - the struct and the variable inside the
01:00 - stroke are called members of the stroke
01:03 - when we define a struct we are basically
01:06 - creating a data type just like ind and
01:08 - double in this example the data type is
01:11 - struct person
01:13 - so we can create variables of this
01:15 - struck person type just like creating
01:18 - variables of int and double types now
01:20 - let's create a variable of struck
01:22 - percentile
01:24 - here if you look into the syntax you can
01:26 - see the syntax looks similar to creating
01:28 - regular variables
01:30 - where struct person represents data type
01:33 - and this person 1 represents the
01:35 - variable name now we can use these
01:37 - struct variables to access the members
01:39 - of struct now i'll add here
01:42 - person 1 dot is
01:45 - is equals to 25
01:48 - and
01:50 - person 1 dot salary
01:53 - is equals to 4321.78
01:59 - here i have used dot operator to
02:01 - initialize the struct members is
02:04 - with the value 25 and
02:06 - salary with the value
02:10 - 4321.78 for the person1 variable now
02:13 - let's print the value
02:15 - i'll use
02:16 - printf statement
02:18 - here
02:20 - is
02:21 - of person one
02:25 - is percent d and
02:28 - comma person
02:30 - one dot is
02:33 - and another print statement
02:35 - that prints the salary
02:39 - of person 1
02:42 - that is in double so point
02:44 - 2
02:45 - lf
02:47 - comma
02:48 - person
02:49 - one dot salary
02:52 - similarly the same dot operator is used
02:55 - to access the value of struck members is
02:58 - and salary for the person one variable
03:00 - now i'll complete this program here i'll
03:03 - add include
03:05 - stdio.h
03:08 - and add here
03:10 - struct
03:12 - person
03:14 - currently presses
03:16 - double
03:17 - sorry
03:18 - double
03:19 - salary
03:21 - and
03:23 - int
03:24 - is
03:26 - now i'll run this code
03:28 - here you can see we have successfully
03:30 - initialized and accessed the stock
03:33 - members for the person 1 variable
03:36 - in this way we can create as many stock
03:39 - variables as we want and all stock
03:41 - members can use the a's and salary
03:43 - members of the struct let me show you
03:46 - inside the main i'll add here
03:50 - struct
03:52 - person
03:53 - person2
03:55 - then we can initialize and access the
03:57 - struct members for person to variable as
04:00 - well so i'll initialize person2 variable
04:04 - is is equals to 31.
04:08 - person2.salary
04:11 - is equals to
04:13 - 78
04:14 - 943.2
04:19 - and i'll print this
04:22 - so
04:25 - is
04:26 - of person 2
04:30 - golden percent d
04:33 - comma
04:34 - person 2 dot is
04:38 - and
04:39 - print f
04:45 - salary
04:46 - of person 2
04:50 - is percent
04:51 - 0.2
04:53 - lf comma person 2 dot
04:57 - salary
04:59 - so
05:01 - i'll remove this space from here
05:04 - now let me run this code
05:09 - you can see we have successfully used
05:10 - the struct for person 2 as well
05:13 - by the way do you want to take your
05:15 - programming journey to the next level
05:17 - watching tutorials is fine but it has
05:19 - one limitation it's hard to learn and
05:21 - practice together at the same time lucky
05:24 - for you we recently launched programmies
05:26 - pro that provides tutorials along with
05:29 - quizzes and challenges which will help
05:31 - you practice and test your learning in
05:33 - real time also the course includes
05:35 - projects to give you an experience of
05:37 - how programming works in the real world
05:40 - sign up now visit the link which is also
05:42 - available in the video description below
05:45 - in this example we are creating the
05:47 - struct variables in one line and
05:49 - assigning member variable in another
05:52 - line
05:53 - instead
05:54 - we can simply create the struct
05:56 - variables and initialize members in the
05:58 - same line let me show you
06:00 - i'll remove this part of code
06:04 - so i'll remove this part as well
06:07 - i'll remove these two lines of code
06:11 - and
06:12 - so i'll simply write here
06:15 - struct
06:17 - person
06:19 - person one
06:21 - is equals to curly braces dot is
06:25 - is equals to 25 comma
06:28 - dot salary
06:31 - is equals to 4321.78
06:37 - and i'll close this curly braces
06:40 - and another struct
06:43 - person
06:44 - person two
06:48 - is equals to curly braces dot is is
06:51 - equals to 31 comma dot salary
06:56 - is equals to
06:58 - 78
07:00 - 943.2
07:02 - and let's close this
07:05 - now let me run this code here you can
07:07 - see we get the desired output also we
07:11 - can create stock variables while
07:12 - defining the struct let me show you in
07:15 - this previous code i'll remove this part
07:18 - of code
07:20 - and
07:20 - here i'll add these struct variables
07:24 - person
07:25 - 1
07:26 - comma person 2.
07:28 - now let me run this code
07:31 - you can see we get the same output
07:36 - while creating the struct variables we
07:39 - have to use both the struct keyword and
07:41 - the name of the struct
07:42 - which is too long instead we can use an
07:45 - alias the type def keyword allow us to
07:48 - use an alias for struct let's see an
07:50 - example
07:51 - here we have our code from our earlier
07:53 - example
07:55 - in this case instead of struck person we
07:58 - can use an alias with the help of
08:00 - typedef let me modify this code
08:04 - here i'll add here type def
08:07 - in the struct definition
08:09 - and
08:10 - person at the end
08:13 - now this
08:14 - person can be used as an alias to struct
08:18 - so we can now create a struct variable
08:20 - using person instead of stock person so
08:23 - i'll remove this and i'll write here
08:26 - person
08:27 - now let me run this code
08:30 - as you can see we get the desired output
08:34 - okay guys we need your support to keep
08:36 - these types of content free for all
08:38 - users youtube really likes engagement on
08:40 - the video so leave a comment below press
08:42 - that like button hit subscribe if you
08:44 - haven't already let's get the engagement
08:46 - score higher so that more people can
08:48 - discover and enjoy these courses
08:53 - let's see one practical example of
08:55 - struct we'll create a program to add two
08:57 - complex numbers
08:58 - we know that a complex number has two
09:00 - part real part and imaginary part so
09:03 - while performing addition between two
09:05 - complex numbers we always add the real
09:08 - part of complex number with the real
09:10 - part of another complex number and the
09:12 - imaginary part of complex number to the
09:14 - imaginary part of second complex number
09:18 - now you know the mechanism of the
09:19 - program let's start writing code first
09:22 - i'll create
09:24 - a struct type def
09:27 - struct
09:28 - complex
09:32 - and curly braces
09:33 - and it has members real and imaginary so
09:37 - double
09:39 - real
09:41 - and
09:41 - double
09:42 - imaginary
09:44 - so i'll just write imagine
09:47 - so this represents the real and
09:50 - imaginary part of complex number
09:52 - and we will add complex at the end of
09:55 - the struct so complex here
09:58 - and semicolon now let's create two
10:01 - complex variable whose sum is to be
10:03 - found
10:04 - so i'll write here
10:08 - complex
10:10 - c1 is equals to curly braces dot real is
10:15 - equals to
10:16 - 21.8 21.87
10:18 - and its imaginary value is
10:22 - imagine is equals to 30.
10:26 - and then
10:28 - we'll close this and another variable
10:30 - complex c2 with
10:33 - value
10:35 - real value is equals to
10:39 - 13.34
10:41 - and imaginary value
10:44 - dot imagine is equals to
10:47 - 112 point uh suppose this is
10:51 - 112.23
10:52 - and we'll close this
10:56 - remember we are assigning value while
10:58 - creating the complex variables
11:01 - now let's create another complex
11:04 - variable to store the sum of these two
11:06 - variables so i'll create here
11:09 - complex
11:11 - sum
11:13 - as mentioned earlier let's add the real
11:16 - and the imaginary value of these
11:19 - variables independently and assign the
11:22 - results to the real and the complex part
11:24 - of this sum variable
11:26 - so what i'll do is
11:28 - i'll add here
11:30 - sum dot real is equals to c1 dot real
11:36 - plus
11:38 - c2 dot real
11:41 - and then
11:42 - sum dot imagine
11:45 - is equals to c1 dot
11:47 - imagine
11:49 - plus
11:50 - c2 dot imagine
11:54 - now let's print this i'll use printf
11:56 - statement printf bracket
12:00 - inside quotation result
12:03 - is
12:05 - percent
12:08 - point lf as it is double so
12:12 - plus
12:13 - person dot 2 lf
12:16 - and we'll add here i
12:18 - for the complex number and sum that real
12:23 - comma sum dot imagine
12:27 - here i have formatted the output to make
12:29 - our result look better
12:31 - now let me run this code
12:34 - as you can see we get the sum of two
12:36 - complex numbers
12:40 - now to revise what you have learned in
12:42 - this program here is a programming task
12:44 - for you create a program to find the
12:46 - difference between three complex numbers
12:49 - to perform the subtraction between
12:51 - complex numbers you need to subtract the
12:53 - real part of one complex number from the
12:55 - real part of other complex numbers and
12:58 - the imaginary part of one complex number
13:00 - from other complex numbers you'll find
13:03 - the answer to this question in our
13:05 - github repository and also if you want
13:07 - to revise this concept all this program
13:10 - will be there as well i'll put the link
13:12 - in the video description below
13:13 - now that we have reached the end of this
13:15 - video it's time for programming quiz
13:18 - what is the name of the variable of the
13:20 - following struct
13:22 - comment your answer below see you in the
13:24 - next video happy programming
13:30 - [Music]
13:35 - you

Cleaned transcript:

hey guys this is me padma from programmies and welcome back to this series on c programming in this video we will learn about struct in c more specifically we will learn to store related data together under a single name using struct so let's get started a struct is a collection of variables under a single name the variables can be of different types suppose we want to store the name and a's of a person for this we can create two variables and store name and is however since both the data are of same person it would be better to create a single struct and put this data inside it remember struct is often termed as structure in c so don't get confused they are mostly used interchangeably let's now start with the syntax of creating a struct a struct in c starts with the struck keyword followed by the name of the struct the curly braces indicates the body of the struct and the variable inside the stroke are called members of the stroke when we define a struct we are basically creating a data type just like ind and double in this example the data type is struct person so we can create variables of this struck person type just like creating variables of int and double types now let's create a variable of struck percentile here if you look into the syntax you can see the syntax looks similar to creating regular variables where struct person represents data type and this person 1 represents the variable name now we can use these struct variables to access the members of struct now i'll add here person 1 dot is is equals to 25 and person 1 dot salary is equals to 4321.78 here i have used dot operator to initialize the struct members is with the value 25 and salary with the value 4321.78 for the person1 variable now let's print the value i'll use printf statement here is of person one is percent d and comma person one dot is and another print statement that prints the salary of person 1 that is in double so point 2 lf comma person one dot salary similarly the same dot operator is used to access the value of struck members is and salary for the person one variable now i'll complete this program here i'll add include stdio.h and add here struct person currently presses double sorry double salary and int is now i'll run this code here you can see we have successfully initialized and accessed the stock members for the person 1 variable in this way we can create as many stock variables as we want and all stock members can use the a's and salary members of the struct let me show you inside the main i'll add here struct person person2 then we can initialize and access the struct members for person to variable as well so i'll initialize person2 variable is is equals to 31. person2.salary is equals to 78 943.2 and i'll print this so is of person 2 golden percent d comma person 2 dot is and print f salary of person 2 is percent 0.2 lf comma person 2 dot salary so i'll remove this space from here now let me run this code you can see we have successfully used the struct for person 2 as well by the way do you want to take your programming journey to the next level watching tutorials is fine but it has one limitation it's hard to learn and practice together at the same time lucky for you we recently launched programmies pro that provides tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an experience of how programming works in the real world sign up now visit the link which is also available in the video description below in this example we are creating the struct variables in one line and assigning member variable in another line instead we can simply create the struct variables and initialize members in the same line let me show you i'll remove this part of code so i'll remove this part as well i'll remove these two lines of code and so i'll simply write here struct person person one is equals to curly braces dot is is equals to 25 comma dot salary is equals to 4321.78 and i'll close this curly braces and another struct person person two is equals to curly braces dot is is equals to 31 comma dot salary is equals to 78 943.2 and let's close this now let me run this code here you can see we get the desired output also we can create stock variables while defining the struct let me show you in this previous code i'll remove this part of code and here i'll add these struct variables person 1 comma person 2. now let me run this code you can see we get the same output while creating the struct variables we have to use both the struct keyword and the name of the struct which is too long instead we can use an alias the type def keyword allow us to use an alias for struct let's see an example here we have our code from our earlier example in this case instead of struck person we can use an alias with the help of typedef let me modify this code here i'll add here type def in the struct definition and person at the end now this person can be used as an alias to struct so we can now create a struct variable using person instead of stock person so i'll remove this and i'll write here person now let me run this code as you can see we get the desired output okay guys we need your support to keep these types of content free for all users youtube really likes engagement on the video so leave a comment below press that like button hit subscribe if you haven't already let's get the engagement score higher so that more people can discover and enjoy these courses let's see one practical example of struct we'll create a program to add two complex numbers we know that a complex number has two part real part and imaginary part so while performing addition between two complex numbers we always add the real part of complex number with the real part of another complex number and the imaginary part of complex number to the imaginary part of second complex number now you know the mechanism of the program let's start writing code first i'll create a struct type def struct complex and curly braces and it has members real and imaginary so double real and double imaginary so i'll just write imagine so this represents the real and imaginary part of complex number and we will add complex at the end of the struct so complex here and semicolon now let's create two complex variable whose sum is to be found so i'll write here complex c1 is equals to curly braces dot real is equals to 21.8 21.87 and its imaginary value is imagine is equals to 30. and then we'll close this and another variable complex c2 with value real value is equals to 13.34 and imaginary value dot imagine is equals to 112 point uh suppose this is 112.23 and we'll close this remember we are assigning value while creating the complex variables now let's create another complex variable to store the sum of these two variables so i'll create here complex sum as mentioned earlier let's add the real and the imaginary value of these variables independently and assign the results to the real and the complex part of this sum variable so what i'll do is i'll add here sum dot real is equals to c1 dot real plus c2 dot real and then sum dot imagine is equals to c1 dot imagine plus c2 dot imagine now let's print this i'll use printf statement printf bracket inside quotation result is percent point lf as it is double so plus person dot 2 lf and we'll add here i for the complex number and sum that real comma sum dot imagine here i have formatted the output to make our result look better now let me run this code as you can see we get the sum of two complex numbers now to revise what you have learned in this program here is a programming task for you create a program to find the difference between three complex numbers to perform the subtraction between complex numbers you need to subtract the real part of one complex number from the real part of other complex numbers and the imaginary part of one complex number from other complex numbers you'll find the answer to this question in our github repository and also if you want to revise this concept all this program will be there as well i'll put the link in the video description below now that we have reached the end of this video it's time for programming quiz what is the name of the variable of the following struct comment your answer below see you in the next video happy programming you
