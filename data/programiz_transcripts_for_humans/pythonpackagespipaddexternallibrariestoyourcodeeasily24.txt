With timestamps:

00:00 - let's talk about python packages a
00:02 - package is a directory containing
00:03 - multiple modules and other sub packages
00:06 - in this video we will learn about python
00:08 - packages with the help of examples
00:11 - then we will learn about pip the
00:13 - standard package manager python
00:15 - we got a lot to cover so let's get
00:17 - started
00:21 - before we learn to use packages let's
00:24 - see what problems it solves
00:26 - suppose we are developing a large
00:28 - program to simplify this program
00:30 - we can first divide it into modules if
00:33 - our program is very large
00:34 - there might be a lot of these modules so
00:37 - we further need to group
00:38 - related modules together so that
00:40 - everything is organized
00:42 - python packages allow us to do just that
00:45 - they help us to organize related modules
00:47 - together
00:48 - let's look at an example to understand
00:50 - this concept even more clearly
00:52 - suppose we are developing a game with
00:54 - multiple objects so it may have these
00:57 - different modules
00:58 - since these modules are in the same
01:00 - location they look cluttered right now
01:03 - we can structure them in this way
01:04 - instead
01:06 - here the similar player and boss modules
01:09 - are kept under the characters package
01:11 - also gun and knife modules are kept
01:14 - inside the weapons package
01:16 - then both characters and weapons
01:18 - packages are again kept inside the main
01:21 - game package
01:22 - as you can see our project looks much
01:25 - more organized
01:26 - and structured with the use of packages
01:28 - now let's try to implement this in our
01:30 - code
01:30 - to keep this video short and to the
01:32 - point i will only implement the
01:34 - characters package
01:35 - but you will soon see that the core
01:38 - concept will be the same for other
01:39 - packages as well
01:41 - i'll first create a package name game
01:43 - that will contain all our game
01:45 - components
01:46 - so let me go to my code editor and i'll
01:48 - create a directory named game
01:51 - then i'll create a file named init.pi
01:53 - inside it
01:54 - so i'll say underscore underscore init
01:56 - underscore underscore dot pi
01:59 - this is a special file which will tell
02:01 - python that this directory is a python
02:03 - package
02:04 - i'll leave this file empty for now now
02:06 - let me create a sub package
02:08 - inside this game package so here i'll
02:10 - create a new folder
02:12 - called characters
02:15 - since this will also be a package let's
02:17 - not forget to add the init.pi
02:19 - file inside the characters folder as
02:21 - well
02:24 - this will tell python that characters is
02:27 - also a package
02:28 - or it is a sub package of the game
02:30 - package now i'll create two modules
02:33 - inside this package so let me create the
02:35 - player.5 module first
02:37 - so here i'll say player dot pi
02:40 - and inside this file let me add a
02:44 - function
02:44 - so i'll say def get player
02:48 - info and inside this function let me
02:51 - just say print
02:53 - i am the main player
02:59 - so let me save this file and then i'll
03:02 - create another module
03:03 - called boss dot pi so i'll say boss dot
03:07 - pi
03:08 - and inside this boss dot file let me
03:10 - just add one function
03:12 - i'll say def get boss info
03:16 - and inside this function i'll just write
03:18 - print
03:20 - i am the enemy
03:24 - player and save this file
03:27 - here i have just used the simple
03:29 - function to illustrate python packages
03:31 - however while actually developing such
03:33 - large programs
03:35 - these modules might contain classes and
03:37 - multiple functions
03:38 - now let's try to import each of these
03:40 - components by using the import statement
03:43 - i'll create a new file outside the game
03:45 - package and i'll call it
03:46 - main dot pi so here i'll say main dot pi
03:50 - then i will say import game
03:54 - and use the dot notation to access the
03:56 - player module inside the characters
03:57 - package
03:58 - so i'll say import dot characters
04:01 - dot player now i can use all definitions
04:05 - inside the player module
04:06 - let's use the get player info function
04:08 - of the player module
04:09 - so i'll say game dot characters
04:13 - dot player dot get player
04:16 - info let me wrap this up so that you can
04:19 - see it
04:20 - okay i said info so i'll save this file
04:24 - and here on the terminal i'll say python
04:29 - main dot pi and as you can see the
04:32 - function was correctly called and i am
04:34 - the main player is printed
04:37 - we can also use the from import
04:39 - statement to import only certain modules
04:41 - from the package
04:42 - let me show you how to do this i'll
04:44 - first remove this old code
04:46 - and here i'll say from game dot
04:49 - characters import player
04:53 - here we have only imported the player
04:55 - module of the characters sub package
04:57 - so we can access the get player info
04:59 - function without using the game package
05:01 - so i'll only type player dot get
05:05 - player info i'll save this file
05:08 - run main dot pi again and you can see
05:11 - that i got the same result as before
05:13 - while writing lesser code we can also
05:17 - import
05:17 - only certain definitions from inside
05:19 - these modules as well
05:20 - i will now import only the get boss info
05:23 - of the boss module
05:25 - so here i'll say from game dot
05:28 - characters dot boss import
05:32 - get boss info now i can call the get
05:35 - boss info
05:36 - directly and if i save this file
05:41 - and run the code then you can see i am
05:43 - the nme player was also printed
05:46 - both functions work as expected a tip
05:48 - for you
05:49 - when you use packages always try to give
05:51 - descriptive names to functions and
05:53 - classes
05:54 - so that you don't get confused now we
05:57 - have created this init files
05:59 - without doing anything inside them
06:02 - the code inside this file runs
06:04 - automatically when we import the package
06:07 - let me add a line here inside the init
06:09 - file of the game package
06:11 - here i'll say print initializing
06:14 - the game
06:18 - now let me go back to my main dot pi
06:20 - file
06:21 - and if i run the code again so here i'll
06:24 - say
06:25 - python main dot pi
06:28 - and when i press enter you can see that
06:31 - initializing the game
06:32 - was also printed to the screen that
06:35 - means
06:35 - the code within the init file was
06:38 - executed
06:39 - when the package was imported and that
06:41 - is why initializing the game
06:43 - was printed here by the way
06:46 - if you're finding these videos useful i
06:48 - would appreciate if you could give a sub
06:50 - to the channel
06:51 - now that we have implemented the
06:53 - characters package i hope you have the
06:55 - basic idea of working with packages
06:57 - i highly encourage you to try and
06:59 - implement various functions for the
07:01 - weapons package by
07:02 - yourself before moving to the next
07:04 - section of the video
07:05 - the programmer's team has created an app
07:07 - that allows you to learn python from
07:08 - your phone
07:09 - the app contains bit size lessons that
07:11 - are easier to understand
07:13 - a built-in interpreter so that you can
07:14 - run python on your phone quizzes
07:16 - and many more features the app is
07:18 - available on both ios
07:20 - and android the links are in the video
07:22 - description
07:25 - in our previous example we looked at how
07:28 - to create a python package
07:30 - there are thousands of such useful
07:32 - packages tailored for specific tasks
07:34 - that are developed and maintained by the
07:35 - active python community
07:37 - when you start working on more advanced
07:39 - projects you will have to use these
07:41 - packages at some point
07:43 - rather than building everything from
07:44 - scratch for example
07:46 - if you're working with web development
07:48 - you will probably use packages like
07:50 - django or flask
07:52 - to use these packages we first need to
07:54 - install them
07:55 - this is where pip comes in pip is the
07:58 - standard package manager for python that
08:00 - helps to install
08:01 - and manage additional packages that are
08:03 - not available in the python standard
08:05 - library
08:06 - let's use pip to install a package
08:08 - called pandas it is a popular package
08:10 - for data analysis in python to install
08:12 - this package
08:13 - i'll say pip install
08:16 - pandas and when i press enter
08:20 - as you can see it's downloading the
08:22 - pandas package
08:23 - depending upon the size of the package
08:25 - it may take a while
08:26 - one cool thing about pip is that it also
08:29 - automatically installs
08:30 - all required dependencies to run pandas
08:32 - like numpy
08:33 - which is another popular package for
08:35 - scientific computing
08:37 - now that the process is complete i will
08:39 - open a new file
08:42 - and inside it i'll write
08:45 - from import pandas
08:49 - as pde now i just want to check if the
08:52 - partners module is working so here i'll
08:54 - just say print
08:55 - pd and save this file now here i'll say
08:59 - python main dot pi
09:04 - as you can see pandas is correctly
09:06 - installed and we can start using it in
09:08 - our code
09:10 - sometimes you may have to install a
09:12 - specific version of a certain package
09:14 - in that case you can specify the package
09:16 - version
09:17 - using the double equal syntax let me
09:19 - show you i'll go to my terminal
09:21 - and i'll type pip install requests
09:25 - equals equals 2.21.0
09:30 - and as you can see it is collecting and
09:32 - installing the specific version of
09:34 - request that i requested for
09:39 - if you want to list all the installed
09:41 - packages you can use the pip list
09:43 - command
09:43 - so in my terminal i'll clear this out
09:45 - and i'll say pip
09:47 - list as you can see it printed out all
09:50 - the packages that i have installed on my
09:52 - computer
09:54 - as you can see pip is a very useful tool
09:56 - that makes managing external packages a
09:59 - whole lot easier
10:00 - if you want to learn more about pip you
10:02 - can check out our article on it
10:04 - the link will be in the description
10:05 - below that's it for this video
10:07 - if you want to revise these concepts you
10:09 - can find all these programs in our
10:11 - github repository
10:12 - i'll also put this link in the video
10:14 - description and if you like this video
10:16 - hit the like button now and subscribe to
10:18 - the channel and i'll see you in the next
10:20 - one
10:21 - happy programming

Cleaned transcript:

let's talk about python packages a package is a directory containing multiple modules and other sub packages in this video we will learn about python packages with the help of examples then we will learn about pip the standard package manager python we got a lot to cover so let's get started before we learn to use packages let's see what problems it solves suppose we are developing a large program to simplify this program we can first divide it into modules if our program is very large there might be a lot of these modules so we further need to group related modules together so that everything is organized python packages allow us to do just that they help us to organize related modules together let's look at an example to understand this concept even more clearly suppose we are developing a game with multiple objects so it may have these different modules since these modules are in the same location they look cluttered right now we can structure them in this way instead here the similar player and boss modules are kept under the characters package also gun and knife modules are kept inside the weapons package then both characters and weapons packages are again kept inside the main game package as you can see our project looks much more organized and structured with the use of packages now let's try to implement this in our code to keep this video short and to the point i will only implement the characters package but you will soon see that the core concept will be the same for other packages as well i'll first create a package name game that will contain all our game components so let me go to my code editor and i'll create a directory named game then i'll create a file named init.pi inside it so i'll say underscore underscore init underscore underscore dot pi this is a special file which will tell python that this directory is a python package i'll leave this file empty for now now let me create a sub package inside this game package so here i'll create a new folder called characters since this will also be a package let's not forget to add the init.pi file inside the characters folder as well this will tell python that characters is also a package or it is a sub package of the game package now i'll create two modules inside this package so let me create the player.5 module first so here i'll say player dot pi and inside this file let me add a function so i'll say def get player info and inside this function let me just say print i am the main player so let me save this file and then i'll create another module called boss dot pi so i'll say boss dot pi and inside this boss dot file let me just add one function i'll say def get boss info and inside this function i'll just write print i am the enemy player and save this file here i have just used the simple function to illustrate python packages however while actually developing such large programs these modules might contain classes and multiple functions now let's try to import each of these components by using the import statement i'll create a new file outside the game package and i'll call it main dot pi so here i'll say main dot pi then i will say import game and use the dot notation to access the player module inside the characters package so i'll say import dot characters dot player now i can use all definitions inside the player module let's use the get player info function of the player module so i'll say game dot characters dot player dot get player info let me wrap this up so that you can see it okay i said info so i'll save this file and here on the terminal i'll say python main dot pi and as you can see the function was correctly called and i am the main player is printed we can also use the from import statement to import only certain modules from the package let me show you how to do this i'll first remove this old code and here i'll say from game dot characters import player here we have only imported the player module of the characters sub package so we can access the get player info function without using the game package so i'll only type player dot get player info i'll save this file run main dot pi again and you can see that i got the same result as before while writing lesser code we can also import only certain definitions from inside these modules as well i will now import only the get boss info of the boss module so here i'll say from game dot characters dot boss import get boss info now i can call the get boss info directly and if i save this file and run the code then you can see i am the nme player was also printed both functions work as expected a tip for you when you use packages always try to give descriptive names to functions and classes so that you don't get confused now we have created this init files without doing anything inside them the code inside this file runs automatically when we import the package let me add a line here inside the init file of the game package here i'll say print initializing the game now let me go back to my main dot pi file and if i run the code again so here i'll say python main dot pi and when i press enter you can see that initializing the game was also printed to the screen that means the code within the init file was executed when the package was imported and that is why initializing the game was printed here by the way if you're finding these videos useful i would appreciate if you could give a sub to the channel now that we have implemented the characters package i hope you have the basic idea of working with packages i highly encourage you to try and implement various functions for the weapons package by yourself before moving to the next section of the video the programmer's team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description in our previous example we looked at how to create a python package there are thousands of such useful packages tailored for specific tasks that are developed and maintained by the active python community when you start working on more advanced projects you will have to use these packages at some point rather than building everything from scratch for example if you're working with web development you will probably use packages like django or flask to use these packages we first need to install them this is where pip comes in pip is the standard package manager for python that helps to install and manage additional packages that are not available in the python standard library let's use pip to install a package called pandas it is a popular package for data analysis in python to install this package i'll say pip install pandas and when i press enter as you can see it's downloading the pandas package depending upon the size of the package it may take a while one cool thing about pip is that it also automatically installs all required dependencies to run pandas like numpy which is another popular package for scientific computing now that the process is complete i will open a new file and inside it i'll write from import pandas as pde now i just want to check if the partners module is working so here i'll just say print pd and save this file now here i'll say python main dot pi as you can see pandas is correctly installed and we can start using it in our code sometimes you may have to install a specific version of a certain package in that case you can specify the package version using the double equal syntax let me show you i'll go to my terminal and i'll type pip install requests equals equals 2.21.0 and as you can see it is collecting and installing the specific version of request that i requested for if you want to list all the installed packages you can use the pip list command so in my terminal i'll clear this out and i'll say pip list as you can see it printed out all the packages that i have installed on my computer as you can see pip is a very useful tool that makes managing external packages a whole lot easier if you want to learn more about pip you can check out our article on it the link will be in the description below that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit the like button now and subscribe to the channel and i'll see you in the next one happy programming
