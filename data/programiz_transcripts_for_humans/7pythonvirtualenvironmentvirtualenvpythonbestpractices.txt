With timestamps:

00:00 - virtual environments allow us to manage
00:01 - separate and isolated python
00:03 - environments
00:04 - for each of our python projects in this
00:06 - video you will learn what that actually
00:08 - means
00:08 - you will also learn to create and manage
00:11 - your own virtual environments for your
00:12 - python projects
00:13 - using a built-in module named virtual
00:15 - and v so let's get started
00:21 - before we learn to create virtual
00:22 - environments let's first understand what
00:24 - virtual environments are
00:26 - and why they are needed in the first
00:28 - place
00:30 - when you start working on larger python
00:32 - projects you'll have to use different
00:33 - packages and modules
00:35 - that don't come pre-installed with the
00:36 - standard python library
00:38 - these packages and modules are
00:40 - constantly being updated with every new
00:42 - release
00:43 - let's suppose that you worked on a web
00:45 - scraping project that uses a library
00:46 - called requests
00:48 - of specifically the version 1.1.0
00:51 - after a few months you then worked on
00:53 - another project that uses a different
00:55 - version of request
00:56 - say 2.0.0 now if you have to go back to
00:59 - working on your first project
01:01 - you will either need to change the
01:02 - entire code base of the project to make
01:04 - it compatible with
01:05 - request version 2.0.0 or you'll have to
01:09 - uninstall version 2.0.0
01:11 - and reinstall the old version 1.1.0
01:15 - more often that not your python projects
01:17 - will use different versions of
01:19 - many such packages or even an entirely
01:21 - different version of python
01:23 - that won't be compatible with one
01:24 - another virtual environments
01:26 - allow us to solve this problem instead
01:28 - of using a single
01:29 - and global python installation for all
01:31 - our projects we can create different
01:33 - virtual environments
01:34 - for different projects let's now
01:36 - understand what virtual environments are
01:41 - virtual environments allow us to create
01:42 - isolated environments
01:44 - for each of our python projects each
01:46 - virtual environment
01:47 - will be independent of one another due
01:49 - to this they can have different python
01:51 - versions
01:52 - and their own versions of packages and
01:54 - modules to resolve our earlier problem
01:56 - of conflicting versions of the request
01:58 - library
01:59 - we can have separate virtual
02:00 - environments for each project each of
02:02 - these virtual environments can then have
02:04 - their own separate packages
02:06 - of different versions
02:09 - in order to create a virtual environment
02:11 - we can use a built-in module named
02:13 - virtual env
02:15 - let's look at how we can create virtual
02:16 - environments i'll first create a
02:18 - directory called project1
02:20 - and i'll open the terminal in this
02:22 - workspace on my code editor i've already
02:24 - created a directory called project one
02:26 - and i've opened a terminal in this
02:28 - folder by default
02:30 - we are using the global python
02:31 - environment let me show you what i mean
02:34 - first let me clean this up so let me
02:35 - hide this
02:37 - and this and now on my terminal if i say
02:40 - which
02:40 - python we can see that python from the
02:44 - global installation is currently being
02:46 - used
02:47 - now i'll also pip list so let me say p i
02:51 - p
02:51 - l i s t and we can see that my global
02:55 - python environment currently has
02:57 - these libraries and modules installed
03:00 - now let's create an isolated python
03:02 - environment
03:04 - so to do that first let me clear up my
03:06 - terminal
03:07 - to create an isolated python environment
03:10 - i can say
03:10 - python dash m this dash m will allow me
03:14 - to run a specific module directly
03:16 - and then the module name which is
03:18 - virtual
03:19 - env then the next parameter is the name
03:23 - for our virtual environment let me call
03:25 - it v-e-n-v
03:26 - for now and now if i press enter
03:30 - then my new virtual environment has been
03:32 - created
03:33 - when i list the contents of project one
03:35 - now you can see that there's a folder
03:37 - called venv in this folder
03:41 - this vnb directory contains minimal
03:43 - python setup and
03:44 - executables for our python project by
03:46 - the way if you're finding this video
03:47 - useful
03:48 - a sub to the channel would be much
03:49 - appreciated before moving to the next
03:52 - section of the video
03:53 - the program is team has created an app
03:54 - that allows you to learn python from
03:56 - your phone
03:57 - the app contains bit size lessons that
03:58 - are easier to understand a built-in
04:00 - interpreter so that you can run python
04:02 - on your phone
04:02 - quizzes and many more features the app
04:05 - is available on both ios and android
04:07 - the links are in the video description
04:08 - below
04:13 - now that we have created a virtual
04:14 - environment let's activate it
04:16 - i'll go to my terminal and i'll say
04:18 - source
04:20 - v env which is the folder that was
04:22 - created slash bin
04:24 - slash activate if you're using a windows
04:27 - machine
04:28 - the command to activate a virtual
04:29 - environment is slightly different you
04:31 - can see it on the screen
04:32 - now when i press enter here you can see
04:35 - that there's this vanv
04:37 - in brackets in front of this metadata
04:40 - which means that the virtual and vanb
04:43 - has been activated
04:45 - let me now run the commands i previously
04:47 - ran before
04:48 - i'll say let me first clear the terminal
04:50 - i'll say which
04:52 - python here you can see that instead of
04:55 - the global python
04:57 - we are using python which is inside our
04:59 - virtual environment
05:02 - if i say pip list
05:08 - then you can see that i see a smaller
05:10 - list of packages
05:11 - which are inside this virtual
05:13 - environment
05:15 - none of the global packages and modules
05:17 - are available in this virtual
05:18 - environment
05:20 - let me now install a specific version of
05:22 - the request library in this virtual
05:23 - environment
05:24 - so i'll say pip install
05:28 - requests equals equals
05:34 - 1.1.0
05:35 - now when i press enter
05:39 - it says successfully install requests
05:43 - this version of request is now available
05:45 - only for this virtual environment
05:47 - it will not have any effect on our
05:48 - global python setup
05:53 - in order to deactivate a virtual
05:54 - environment we can simply use the
05:56 - deactivate command on our terminal
05:59 - you can see that currently the venv
06:01 - virtual environment is activated
06:03 - let me deactivate this virtual
06:04 - environment before i do that
06:07 - let me quickly upgrade my pip by copying
06:10 - the command here
06:11 - oops something went wrong
06:15 - okay i did not copy it correctly
06:19 - let's see let me paste this here
06:26 - and i have the latest version of pip now
06:28 - i'll say
06:29 - d activate and you can see that the v
06:34 - env in front is gone now if i do which
06:37 - python then again i am back to using the
06:41 - global installation of python
06:42 - let me also do pip list
06:46 - and you can see that i ca i am back to
06:48 - getting the
06:49 - global list of python modules and
06:52 - libraries
06:53 - let me set up one more virtual
06:55 - environment so i'll go back
06:57 - one folder and i can say mkdir
07:00 - project 2 cd project 2
07:04 - now i am inside this project 2 folder
07:07 - now i'll say
07:08 - python dash m virtual env
07:11 - v a and v just like before this will
07:14 - create another new virtual
07:16 - environment in this directory now i'll
07:17 - activate it so to do that
07:19 - i'll say source e v a n
07:22 - v slash bin slash activate you can see
07:26 - there's v
07:26 - n v inside brackets here i can install a
07:29 - different version of requests so let me
07:31 - say
07:32 - pip install request
07:35 - equals equals 2.25.0
07:39 - this will install that specific version
07:42 - of requests
07:42 - inside this virtual env now let me do
07:45 - pip
07:46 - list so pip list
07:49 - now you can see that the specific
07:51 - version of request 2.25.0
07:54 - is installed in this virtual environment
07:56 - for this project
07:57 - again this won't affect our previous
07:59 - virtual environment in any way
08:01 - now that we have learned about virtual
08:03 - environments i highly encourage you to
08:05 - use separate virtual environments
08:07 - for each of your python projects this
08:09 - will prove very useful
08:10 - once you start working on a number of
08:12 - projects with different requirements
08:14 - you can then put all these requirements
08:15 - in a requirements file
08:17 - this requirements file can then be used
08:19 - to set up the same type of virtual
08:21 - environment on any machine
08:23 - if you want to remove a virtual
08:24 - environment you can just delete the
08:26 - folder containing the virtual
08:27 - environment
08:28 - that's it for this video if you want to
08:30 - revise these concepts
08:31 - you can find all these programs in our
08:33 - github repository i'll also put this
08:35 - link in the video description
08:36 - and if you like this video hit that like
08:38 - button and subscribe to the channel
08:40 - and i'll see you in the next one happy
08:42 - [Music]
08:51 - programming

Cleaned transcript:

virtual environments allow us to manage separate and isolated python environments for each of our python projects in this video you will learn what that actually means you will also learn to create and manage your own virtual environments for your python projects using a builtin module named virtual and v so let's get started before we learn to create virtual environments let's first understand what virtual environments are and why they are needed in the first place when you start working on larger python projects you'll have to use different packages and modules that don't come preinstalled with the standard python library these packages and modules are constantly being updated with every new release let's suppose that you worked on a web scraping project that uses a library called requests of specifically the version 1.1.0 after a few months you then worked on another project that uses a different version of request say 2.0.0 now if you have to go back to working on your first project you will either need to change the entire code base of the project to make it compatible with request version 2.0.0 or you'll have to uninstall version 2.0.0 and reinstall the old version 1.1.0 more often that not your python projects will use different versions of many such packages or even an entirely different version of python that won't be compatible with one another virtual environments allow us to solve this problem instead of using a single and global python installation for all our projects we can create different virtual environments for different projects let's now understand what virtual environments are virtual environments allow us to create isolated environments for each of our python projects each virtual environment will be independent of one another due to this they can have different python versions and their own versions of packages and modules to resolve our earlier problem of conflicting versions of the request library we can have separate virtual environments for each project each of these virtual environments can then have their own separate packages of different versions in order to create a virtual environment we can use a builtin module named virtual env let's look at how we can create virtual environments i'll first create a directory called project1 and i'll open the terminal in this workspace on my code editor i've already created a directory called project one and i've opened a terminal in this folder by default we are using the global python environment let me show you what i mean first let me clean this up so let me hide this and this and now on my terminal if i say which python we can see that python from the global installation is currently being used now i'll also pip list so let me say p i p l i s t and we can see that my global python environment currently has these libraries and modules installed now let's create an isolated python environment so to do that first let me clear up my terminal to create an isolated python environment i can say python dash m this dash m will allow me to run a specific module directly and then the module name which is virtual env then the next parameter is the name for our virtual environment let me call it venv for now and now if i press enter then my new virtual environment has been created when i list the contents of project one now you can see that there's a folder called venv in this folder this vnb directory contains minimal python setup and executables for our python project by the way if you're finding this video useful a sub to the channel would be much appreciated before moving to the next section of the video the program is team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description below now that we have created a virtual environment let's activate it i'll go to my terminal and i'll say source v env which is the folder that was created slash bin slash activate if you're using a windows machine the command to activate a virtual environment is slightly different you can see it on the screen now when i press enter here you can see that there's this vanv in brackets in front of this metadata which means that the virtual and vanb has been activated let me now run the commands i previously ran before i'll say let me first clear the terminal i'll say which python here you can see that instead of the global python we are using python which is inside our virtual environment if i say pip list then you can see that i see a smaller list of packages which are inside this virtual environment none of the global packages and modules are available in this virtual environment let me now install a specific version of the request library in this virtual environment so i'll say pip install requests equals equals 1.1.0 now when i press enter it says successfully install requests this version of request is now available only for this virtual environment it will not have any effect on our global python setup in order to deactivate a virtual environment we can simply use the deactivate command on our terminal you can see that currently the venv virtual environment is activated let me deactivate this virtual environment before i do that let me quickly upgrade my pip by copying the command here oops something went wrong okay i did not copy it correctly let's see let me paste this here and i have the latest version of pip now i'll say d activate and you can see that the v env in front is gone now if i do which python then again i am back to using the global installation of python let me also do pip list and you can see that i ca i am back to getting the global list of python modules and libraries let me set up one more virtual environment so i'll go back one folder and i can say mkdir project 2 cd project 2 now i am inside this project 2 folder now i'll say python dash m virtual env v a and v just like before this will create another new virtual environment in this directory now i'll activate it so to do that i'll say source e v a n v slash bin slash activate you can see there's v n v inside brackets here i can install a different version of requests so let me say pip install request equals equals 2.25.0 this will install that specific version of requests inside this virtual env now let me do pip list so pip list now you can see that the specific version of request 2.25.0 is installed in this virtual environment for this project again this won't affect our previous virtual environment in any way now that we have learned about virtual environments i highly encourage you to use separate virtual environments for each of your python projects this will prove very useful once you start working on a number of projects with different requirements you can then put all these requirements in a requirements file this requirements file can then be used to set up the same type of virtual environment on any machine if you want to remove a virtual environment you can just delete the folder containing the virtual environment that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming
