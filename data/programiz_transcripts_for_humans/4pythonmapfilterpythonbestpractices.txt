With timestamps:

00:00 - the built-in functions like map and
00:01 - filter allow us to write simpler shorter
00:03 - and more pythonic code
00:05 - in place of using loops and branching in
00:07 - this video we will learn to use map and
00:09 - filter in python with the help of
00:11 - examples
00:12 - so let's get started
00:16 - before we learn about map and filter
00:18 - functions let's brush up on lambda
00:20 - functions which we discussed in the last
00:22 - video
00:22 - as these functions make extensive use of
00:24 - lambda
00:25 - lambda functions are single line
00:27 - functions defined without a name
00:29 - let's make a simple normal function that
00:31 - takes two arguments and returns the sum
00:33 - so here i'll say def add n1
00:36 - and n2 as arguments and it returns
00:40 - the sum of n1 and n2
00:44 - i can say print add 10 and 22 test this
00:48 - out
00:48 - when i press run you can see that it
00:51 - successfully returns 30 which is the sum
00:53 - of 10 and 20.
00:54 - now let's achieve the same result using
00:56 - a lambda function let me comment out
00:58 - this code first
01:00 - and then i'll say add
01:03 - equals lambda n1
01:06 - comma n2 colon and the return value is
01:10 - n1
01:10 - plus n2 remember i can put spaces before
01:14 - and after the column and it won't affect
01:16 - the working of the program
01:18 - when i press run then i get 30 as
01:21 - expected
01:22 - now we are finally ready to get started
01:24 - with map
01:27 - before we learn about the map function
01:29 - let me first show you why it might be
01:31 - useful
01:32 - suppose we have a list like this so i'll
01:34 - remove this whole code
01:35 - and say numbers equals 1 2
01:38 - 3 4 5 and we have to create a new list
01:41 - with all the squares of the numbers from
01:43 - this list for this
01:45 - we would normally use a for loop and
01:47 - apply the square to each item
01:49 - let me show you what i mean i'll first
01:50 - create an empty list called squared
01:52 - underscore nums
01:53 - so squared underscore nums is an empty
01:56 - list
01:57 - then i'll create a lambda function and
01:59 - assign it to a variable
02:00 - so here i'll say square equals
02:03 - lambda n that returns
02:07 - n to the power of 2 and now finally
02:10 - i'll loop through the items of the list
02:12 - and append the squares to this new list
02:14 - so here i'll say 4 n in
02:17 - numbers then i can say
02:21 - squared underscore nums dot
02:24 - append square of n
02:29 - let me print the squared underscore nums
02:30 - list and run this code
02:32 - so here i'll say print squared
02:36 - underscore nums and press run and you
02:39 - can see
02:40 - that squared underscore nums contains
02:42 - the square of the five numbers
02:46 - let me show you how we can achieve this
02:47 - same task in a more elegant way using
02:50 - map first let me remove this code
02:54 - now i'll use the map function to square
02:56 - each item of the list
02:57 - the map function applies a given
02:59 - function to each item of an iterable
03:01 - so i can say squared underscore nums
03:05 - equals map the map function takes two
03:08 - arguments
03:09 - a function and an iterable so the
03:11 - function is the lambda function
03:13 - that returns n to the power of 2 or n
03:16 - squared
03:17 - and the second will be the list itself
03:19 - which is an iterable of course
03:21 - here the lambda function takes an
03:23 - argument
03:25 - and returns the square of that argument
03:27 - or that number
03:29 - similarly we are applying this function
03:31 - to each element of the numbers list
03:33 - which is the iterable
03:34 - or the second parameter now let's print
03:36 - the squared underscore nums variable to
03:38 - see what we get
03:40 - so let me say print squared underscore
03:43 - nums
03:43 - and when i press run it says map
03:46 - object and there's a random sequence of
03:49 - letters here
03:50 - the map function returns an iterator
03:53 - object
03:54 - let's use the list function to convert
03:55 - this iterator back to a list
03:57 - so here let me wrap this function with a
04:00 - list function
04:02 - and now when i press run and i get the
04:05 - same output as before
04:06 - the squares of each element are added to
04:09 - this new list
04:10 - these two codes that you see on your
04:12 - screen perform the same exact task
04:14 - but using map and lambda makes our code
04:17 - look much
04:17 - cleaner and concise we can also pass
04:20 - multiple iterable arguments to map
04:22 - let me show you with an example so i'll
04:24 - remove this old code
04:26 - and i'll say num1 equals
04:29 - 4 comma 5 comma 6 similarly
04:32 - num2 is 5 comma 6 comma 7
04:37 - i will use the map function to create a
04:39 - new list with the sum of corresponding
04:41 - elements from these two lists
04:42 - so here i can say result equals map
04:46 - the lambda function takes two arguments
04:48 - n1 and n2
04:51 - and returns n1 plus n2
04:55 - similarly the two other arguments or the
04:57 - iterables on which this lambda function
04:59 - will operate
05:00 - are num1 and num2
05:03 - now let me print first let me convert
05:07 - this to a list and print
05:08 - list of result here n1 will take items
05:12 - from the num1 list
05:14 - n2 will take items from the num2 list
05:16 - and the lambda function
05:18 - will return for each element the sum of
05:21 - n1 and n2 and this will be saved in the
05:24 - result iterable
05:25 - which we convert to a list before
05:27 - printing now when i press run
05:30 - you can see that 4 plus 5 is 9 5 6 is 11
05:34 - and 6 plus 7 13 this new list contains
05:38 - exactly the sum of each element
05:42 - by the way if you're finding this video
05:44 - useful a sub to the channel would be
05:45 - much appreciated
05:47 - before moving to the next section of the
05:48 - video the program is team has created an
05:50 - app that allows you to learn python from
05:52 - your phone
05:53 - the app contains bit size lessons that
05:55 - are easier to understand
05:56 - a built-in interpreter so that you can
05:57 - run python on your phone quizzes and
05:59 - many more features
06:01 - the app is available on both ios and
06:03 - android the links are in the video
06:04 - description
06:08 - the syntax of the filter function is
06:10 - quite similar to that of the map
06:12 - function
06:12 - however instead of creating a new
06:14 - iterator by applying the given function
06:17 - filter filters out only the elements for
06:19 - which the function returns true
06:21 - let me show you what i mean with an
06:22 - example suppose we have a list of
06:24 - numbers like this
06:25 - and i want to filter out only the even
06:28 - numbers for this
06:29 - i would normally use the for loop and
06:31 - check if every item is even or not
06:33 - using the filter function however i can
06:35 - perform this task in a single expression
06:38 - let me define even underscore numbers
06:41 - it will take two arguments first let me
06:43 - put the filter function
06:45 - so filter the filter function will take
06:47 - two arguments the first one will be the
06:49 - lambda
06:50 - so i'll say lambda it will take n
06:53 - and then it will return n percentage or
06:56 - modulus
06:56 - 2 equals equals 0. similarly
07:00 - the second argument will be the numbers
07:02 - list itself
07:04 - this lambda function will take values
07:05 - from the numbers list
07:07 - one by one if the number is odd
07:10 - the lambda function returns false and
07:13 - then the filter function
07:14 - will remove those values from the list
07:16 - or not keep those values
07:17 - in the final iterable however if the
07:20 - number is even
07:21 - the lambda function returns true and
07:23 - those values are not filtered out
07:26 - since filter also returns an iterator
07:28 - i'll first need to convert
07:30 - it to a list before printing it so here
07:32 - i'll say list
07:34 - and now let me print even
07:38 - underscore numbers and now when i press
07:40 - run
07:41 - then you can see that even underscore
07:43 - numbers only contains the even numbers
07:45 - from the numbers list
07:48 - use map to apply a function to each
07:50 - element of an iterable
07:51 - for example if you have a list
07:53 - containing radius of dozens of circles
07:56 - and we need to find the corresponding
07:58 - areas we can achieve this by using the
08:00 - map function
08:01 - use filter to filter out values of an
08:03 - interval if they don't match the
08:05 - specified condition
08:06 - for example we can use filter to remove
08:09 - negative numbers from a list of numbers
08:11 - that's it for this video if you want to
08:13 - revise these concepts
08:14 - you can find all these programs in our
08:16 - github repository i'll also put this
08:18 - link in the video description
08:19 - and if you like this video hit that like
08:21 - button and subscribe to our channel
08:23 - and i'll see you in the next one happy
08:25 - programming

Cleaned transcript:

the builtin functions like map and filter allow us to write simpler shorter and more pythonic code in place of using loops and branching in this video we will learn to use map and filter in python with the help of examples so let's get started before we learn about map and filter functions let's brush up on lambda functions which we discussed in the last video as these functions make extensive use of lambda lambda functions are single line functions defined without a name let's make a simple normal function that takes two arguments and returns the sum so here i'll say def add n1 and n2 as arguments and it returns the sum of n1 and n2 i can say print add 10 and 22 test this out when i press run you can see that it successfully returns 30 which is the sum of 10 and 20. now let's achieve the same result using a lambda function let me comment out this code first and then i'll say add equals lambda n1 comma n2 colon and the return value is n1 plus n2 remember i can put spaces before and after the column and it won't affect the working of the program when i press run then i get 30 as expected now we are finally ready to get started with map before we learn about the map function let me first show you why it might be useful suppose we have a list like this so i'll remove this whole code and say numbers equals 1 2 3 4 5 and we have to create a new list with all the squares of the numbers from this list for this we would normally use a for loop and apply the square to each item let me show you what i mean i'll first create an empty list called squared underscore nums so squared underscore nums is an empty list then i'll create a lambda function and assign it to a variable so here i'll say square equals lambda n that returns n to the power of 2 and now finally i'll loop through the items of the list and append the squares to this new list so here i'll say 4 n in numbers then i can say squared underscore nums dot append square of n let me print the squared underscore nums list and run this code so here i'll say print squared underscore nums and press run and you can see that squared underscore nums contains the square of the five numbers let me show you how we can achieve this same task in a more elegant way using map first let me remove this code now i'll use the map function to square each item of the list the map function applies a given function to each item of an iterable so i can say squared underscore nums equals map the map function takes two arguments a function and an iterable so the function is the lambda function that returns n to the power of 2 or n squared and the second will be the list itself which is an iterable of course here the lambda function takes an argument and returns the square of that argument or that number similarly we are applying this function to each element of the numbers list which is the iterable or the second parameter now let's print the squared underscore nums variable to see what we get so let me say print squared underscore nums and when i press run it says map object and there's a random sequence of letters here the map function returns an iterator object let's use the list function to convert this iterator back to a list so here let me wrap this function with a list function and now when i press run and i get the same output as before the squares of each element are added to this new list these two codes that you see on your screen perform the same exact task but using map and lambda makes our code look much cleaner and concise we can also pass multiple iterable arguments to map let me show you with an example so i'll remove this old code and i'll say num1 equals 4 comma 5 comma 6 similarly num2 is 5 comma 6 comma 7 i will use the map function to create a new list with the sum of corresponding elements from these two lists so here i can say result equals map the lambda function takes two arguments n1 and n2 and returns n1 plus n2 similarly the two other arguments or the iterables on which this lambda function will operate are num1 and num2 now let me print first let me convert this to a list and print list of result here n1 will take items from the num1 list n2 will take items from the num2 list and the lambda function will return for each element the sum of n1 and n2 and this will be saved in the result iterable which we convert to a list before printing now when i press run you can see that 4 plus 5 is 9 5 6 is 11 and 6 plus 7 13 this new list contains exactly the sum of each element by the way if you're finding this video useful a sub to the channel would be much appreciated before moving to the next section of the video the program is team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description the syntax of the filter function is quite similar to that of the map function however instead of creating a new iterator by applying the given function filter filters out only the elements for which the function returns true let me show you what i mean with an example suppose we have a list of numbers like this and i want to filter out only the even numbers for this i would normally use the for loop and check if every item is even or not using the filter function however i can perform this task in a single expression let me define even underscore numbers it will take two arguments first let me put the filter function so filter the filter function will take two arguments the first one will be the lambda so i'll say lambda it will take n and then it will return n percentage or modulus 2 equals equals 0. similarly the second argument will be the numbers list itself this lambda function will take values from the numbers list one by one if the number is odd the lambda function returns false and then the filter function will remove those values from the list or not keep those values in the final iterable however if the number is even the lambda function returns true and those values are not filtered out since filter also returns an iterator i'll first need to convert it to a list before printing it so here i'll say list and now let me print even underscore numbers and now when i press run then you can see that even underscore numbers only contains the even numbers from the numbers list use map to apply a function to each element of an iterable for example if you have a list containing radius of dozens of circles and we need to find the corresponding areas we can achieve this by using the map function use filter to filter out values of an interval if they don't match the specified condition for example we can use filter to remove negative numbers from a list of numbers that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description and if you like this video hit that like button and subscribe to our channel and i'll see you in the next one happy programming
