With timestamps:

00:00 - in this video you will learn about the
00:01 - special dunder name or underscore
00:03 - underscore name underscore underscore
00:05 - attribute of a python file
00:06 - that can be used to run the file
00:08 - dynamically in different contexts
00:10 - so let's get started
00:18 - the dunder name variable is a special
00:20 - predefined variable
00:21 - that represents the name of a python
00:23 - file it has different values depending
00:25 - on how we execute the python file
00:28 - let's look at some examples
00:32 - when we run the file normally as a
00:34 - script the value of the dunder name
00:36 - variable is equal to dunder main
00:38 - let me show you what i mean i'll go to
00:40 - my code editor
00:41 - and create a new file so let me open up
00:44 - my file explorer click here
00:48 - and i'll call this first dot pi
00:52 - now i'll simply print the value of the
00:55 - dunder name variable
00:56 - so i'll say print underscore underscore
00:59 - name
00:59 - underscore underscore and close the
01:02 - bracket
01:03 - now let me hide this files explorer
01:06 - and open up my terminal and i'll say
01:09 - python
01:10 - main or first dot pi
01:13 - now when i press enter you can see that
01:15 - it printed out
01:16 - done domain remember that when we run a
01:20 - python file as a script
01:21 - the value of the dunder name variable
01:23 - for that file is
01:24 - always done domain however the value of
01:28 - the dunder name variable
01:29 - is different if we run it as a module
01:32 - let's look at that in the next section
01:36 - when we run a python file by importing
01:38 - it as a module
01:39 - inside another file the value of the
01:41 - dunder name variable
01:42 - is equal to the actual name of the file
01:45 - let me show you what i mean
01:46 - for this i'll create another file called
01:48 - second.pi
01:49 - let me hide my terminal open up my files
01:52 - explorer
01:53 - and say second dot pi now here
01:56 - i'll say just import first
02:00 - now let me run this code so i'll hide
02:02 - this file explorer open up my terminal
02:05 - and say python second
02:08 - and you can see that instead of done
02:10 - domain this time
02:12 - i got first remember that in the context
02:16 - of running a python file as a module
02:18 - the name of the module itself is
02:20 - assigned to the dunder name variable
02:23 - by the way if you're finding this video
02:24 - useful a sub to the channel would be
02:26 - much appreciated
02:28 - before moving to the next section of the
02:29 - video the programming team has created
02:32 - an app that allows you to learn python
02:33 - from your phone
02:34 - the app contains bit size lessons that
02:36 - are easier to understand a built-in
02:38 - interpreter so that you can run python
02:39 - on your phone
02:40 - quizzes and many more features the app
02:43 - is available on both ios and
02:44 - android the links are in the video
02:46 - description below
02:50 - now that we know about the dunder name
02:52 - variable let's understand its use cases
02:55 - on my screen you can see that i have a
02:58 - file named
02:59 - helloworld.pi that contains a greet
03:01 - function
03:02 - suppose we want to run this grid
03:04 - function directly while running hello
03:06 - world or pi
03:06 - as a script that is while running it
03:09 - from the terminal
03:10 - for this we can use the if statement and
03:12 - the dunder variable
03:14 - so here i'll say if dunder name
03:19 - is equal to dunder main
03:25 - then oops i forgot the dunder at the end
03:29 - i'll say run the greet function i'll
03:32 - save this program
03:34 - and then let me first create some space
03:37 - open up my terminal
03:38 - and this time when i run python hello
03:41 - world
03:42 - dot pi you can see that hello world was
03:45 - printed on the screen
03:47 - this means that the greet function got
03:49 - executed
03:50 - this is because the name variable in
03:53 - this case
03:54 - is equal to dunder main as we ran the
03:56 - file as a script
03:58 - now let me create a new file called
04:00 - greetings dot pi
04:01 - and inside it i will import the hello
04:03 - world file as a module
04:05 - so let me first hide this terminal open
04:07 - up the file explorer
04:09 - and create another file called greetings
04:12 - dot
04:12 - pi inside greetings dot pi i'll just say
04:15 - import
04:17 - hello world and now
04:21 - when i try to run python
04:25 - greetings dot pi you can see that
04:28 - nothing got printed on the screen
04:31 - this is because the dunder name variable
04:34 - inside the hello world pi
04:36 - is not equals to done domain when it is
04:38 - run as a module
04:40 - in this case only the contents outside
04:42 - this
04:43 - if statement or the definition of the
04:45 - grid function
04:46 - are imported but nothing gets executed
04:49 - i can still call it manually though
04:51 - because it has been imported
04:53 - so i'll go to the greetings.pi file and
04:55 - here i'll say
04:56 - hello world dot greet
04:59 - and i'll save this file go back to my
05:01 - terminal and run python greetings dot pi
05:04 - again
05:04 - and this time you can see that hello
05:07 - world was successfully printed on the
05:09 - screen
05:11 - this is a very useful feature as it
05:13 - allows you to run the same file
05:14 - differently in different scenarios
05:17 - you are sure to encounter this statement
05:19 - a lot while coding in python
05:21 - that's it for this video if you want to
05:22 - revise these concepts you can find all
05:24 - these programs in our github repository
05:26 - i've also put the link in the video
05:28 - description below and if you like this
05:30 - video
05:30 - hit that like button and subscribe to
05:32 - the channel and i'll see you in the next
05:33 - one
05:34 - happy programming
05:44 - you

Cleaned transcript:

in this video you will learn about the special dunder name or underscore underscore name underscore underscore attribute of a python file that can be used to run the file dynamically in different contexts so let's get started the dunder name variable is a special predefined variable that represents the name of a python file it has different values depending on how we execute the python file let's look at some examples when we run the file normally as a script the value of the dunder name variable is equal to dunder main let me show you what i mean i'll go to my code editor and create a new file so let me open up my file explorer click here and i'll call this first dot pi now i'll simply print the value of the dunder name variable so i'll say print underscore underscore name underscore underscore and close the bracket now let me hide this files explorer and open up my terminal and i'll say python main or first dot pi now when i press enter you can see that it printed out done domain remember that when we run a python file as a script the value of the dunder name variable for that file is always done domain however the value of the dunder name variable is different if we run it as a module let's look at that in the next section when we run a python file by importing it as a module inside another file the value of the dunder name variable is equal to the actual name of the file let me show you what i mean for this i'll create another file called second.pi let me hide my terminal open up my files explorer and say second dot pi now here i'll say just import first now let me run this code so i'll hide this file explorer open up my terminal and say python second and you can see that instead of done domain this time i got first remember that in the context of running a python file as a module the name of the module itself is assigned to the dunder name variable by the way if you're finding this video useful a sub to the channel would be much appreciated before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description below now that we know about the dunder name variable let's understand its use cases on my screen you can see that i have a file named helloworld.pi that contains a greet function suppose we want to run this grid function directly while running hello world or pi as a script that is while running it from the terminal for this we can use the if statement and the dunder variable so here i'll say if dunder name is equal to dunder main then oops i forgot the dunder at the end i'll say run the greet function i'll save this program and then let me first create some space open up my terminal and this time when i run python hello world dot pi you can see that hello world was printed on the screen this means that the greet function got executed this is because the name variable in this case is equal to dunder main as we ran the file as a script now let me create a new file called greetings dot pi and inside it i will import the hello world file as a module so let me first hide this terminal open up the file explorer and create another file called greetings dot pi inside greetings dot pi i'll just say import hello world and now when i try to run python greetings dot pi you can see that nothing got printed on the screen this is because the dunder name variable inside the hello world pi is not equals to done domain when it is run as a module in this case only the contents outside this if statement or the definition of the grid function are imported but nothing gets executed i can still call it manually though because it has been imported so i'll go to the greetings.pi file and here i'll say hello world dot greet and i'll save this file go back to my terminal and run python greetings dot pi again and this time you can see that hello world was successfully printed on the screen this is a very useful feature as it allows you to run the same file differently in different scenarios you are sure to encounter this statement a lot while coding in python that's it for this video if you want to revise these concepts you can find all these programs in our github repository i've also put the link in the video description below and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming you
