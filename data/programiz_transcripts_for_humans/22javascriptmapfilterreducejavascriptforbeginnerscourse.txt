With timestamps:

00:00 - what's up guys i'm punishment
00:01 - programmers and welcome back to this
00:02 - series on javascript in our last videos
00:04 - we have learnt about the working of a
00:06 - javascript array now we'll learn about
00:08 - the map filter and reduce methods that
00:11 - are very useful while performing various
00:12 - operations on an array so let's get
00:14 - started
00:18 - before we learn about these methods
00:20 - let's do a quick brush up on arrays in
00:23 - javascript we use an array to store
00:25 - multiple values together for example
00:28 - i'll go on my code editor and let me
00:30 - create
00:31 - an array called numbers that will store
00:34 - the numbers from 1
00:36 - to 5. so it's basically just a
00:39 - collection of numbers stored together in
00:41 - one variable
00:43 - now suppose we want to find the square
00:44 - number of each of these elements then we
00:47 - need to loop over the elements and
00:48 - perform the squaring functionality this
00:50 - means to perform any operation on an
00:52 - array we need to first access each
00:54 - element of the array one by one now to
00:57 - easily access each element of the array
00:59 - and perform a certain action we can use
01:01 - map filter and reduce let's start with
01:04 - the easiest the map method
01:08 - to understand the map method let's see
01:10 - an example first i have an array from
01:12 - before now i want to find the square of
01:15 - each element of this array i can use the
01:17 - map method like this now i want to find
01:19 - the square of each element of this array
01:21 - before i use the map method let me first
01:24 - write the equivalent for loop that will
01:26 - do this for me so
01:28 - i would start with a result array
01:32 - or let's call this squared so i'll say
01:35 - squared
01:36 - i would have to start with an empty
01:38 - array then
01:39 - for
01:40 - let i
01:42 - equals 0
01:43 - i
01:44 - less than
01:46 - numbers dot length so i want to go to
01:48 - the end of the array and i want to add
01:51 - one number to the index
01:52 - then i would say squared
01:56 - dot push
01:57 - numbers
01:59 - times
02:00 - numbers
02:01 - and let me just verify that this indeed
02:03 - works so i'll say console log
02:06 - squared so what i'm doing is i'm looping
02:09 - through all the elements in the array
02:12 - and i actually wanted to
02:15 - do not the array multiplication but so
02:18 - inside the for loop i am taking each
02:20 - element of the array one by one so i
02:22 - will be zero
02:23 - in the first iteration so i want to
02:25 - multiply number zero which is one
02:28 - with numbers zero again
02:30 - and squared array will now contain one
02:33 - times one which is one in the second
02:35 - iteration i will be 1
02:37 - so i less than numbers that length is 5
02:40 - so this is true so the loop will
02:42 - continue
02:43 - and
02:43 - square dot push so this will become 2
02:46 - and this will become 2.
02:49 - this goes on so i will be 3
02:52 - and this becomes 3.3 so squared should
02:56 - have
02:57 - an array of all the squared numbers in
03:00 - this array i'll press run just to verify
03:03 - and you can see that i got the array of
03:05 - squared numbers
03:07 - now let me simplify this code by using
03:09 - the map method
03:12 - i can instead of doing this what i can
03:14 - also do is i can say const result
03:18 - equals
03:20 - numbers dot map
03:23 - and
03:24 - inside this map i can send a function
03:28 - that will take each number one by one
03:32 - and just return
03:34 - number
03:35 - times
03:36 - number
03:37 - let me console log result just to show
03:40 - you that this works like before
03:42 - i'll press run
03:44 - so you can see that i got the same
03:46 - result as before
03:48 - now let's see what's happening here
03:50 - the map method takes each element from
03:54 - the numbers array
03:56 - so 1
03:57 - will be transferred to 1 here and
04:00 - imagine this as one times one so
04:02 - whatever value is returned from the
04:04 - function
04:06 - is pushed into the result array so think
04:08 - of this as so one by one we'll do this
04:10 - so numbers
04:12 - zero is 1
04:14 - 1 is passed to this function and the
04:16 - return value 1 times 1
04:18 - becomes result dot push
04:21 - 1 times 1.
04:22 - similarly in the next iteration we take
04:25 - 2 and put it inside here
04:28 - so the return value is 2 times 2
04:31 - and think of this as result dot push
04:36 - 2 times 2.
04:38 - in the third iteration this becomes
04:39 - result dot push three times three
04:43 - in the fourth iteration result dot push
04:45 - four times four
04:47 - and in the fifth iteration this becomes
04:49 - result dot push phi
04:51 - times phi
04:53 - so whatever transformation function you
04:55 - define inside
04:57 - will be used on every element of the
04:59 - numbers array one by one so we will
05:02 - always get an array of the same size as
05:05 - the initial array because we are
05:07 - applying the transformation function on
05:08 - each number or in or each element in
05:11 - this case this is a number
05:13 - i hope this was clear this will be more
05:15 - clear in the future videos or as we
05:17 - practice javascript even more now don't
05:19 - get confused
05:21 - so
05:23 - right now we wrote this or we can even
05:25 - give this function a name so square
05:28 - number
05:29 - and then we wrote return
05:31 - number
05:32 - times number now you can see variations
05:35 - of this everywhere so first of all let
05:38 - me first turn this
05:41 - into an arrow function
05:42 - so you will see this variation in many
05:45 - places as well always remember that this
05:47 - is just an arrow function and a
05:49 - different representation of a function
05:50 - and nothing more in fact you'll also see
05:53 - another representation a lot since there
05:56 - is only one line in my function i don't
05:59 - need the parenthesis and i can just say
06:01 - number
06:03 - arrow number times number you will see
06:05 - another variation where even these
06:08 - braces are removed or these parentheses
06:10 - are removed and this works because the
06:13 - function or an arrow function can work
06:16 - without the parenthesis around the
06:18 - parameters when there is only one
06:20 - parameter so you will see all of these
06:22 - variations and i recommend that you
06:24 - spend more time understanding arrow
06:26 - functions before you dig deep into map
06:29 - or filter or all of these methods
06:32 - all right now that's out of the way
06:34 - let's do another example to drive home
06:36 - the point remember that this is one of
06:38 - the most complex parts of javascript so
06:41 - spend time i'll take this one step at a
06:44 - time all right
06:45 - i'll remove this old code and let me say
06:49 - i have an array of names
06:52 - james
06:54 - murray
06:55 - and
06:57 - rosa all right an element an array with
07:00 - three elements suppose all these people
07:03 - belong to the same family and all of
07:05 - them have the same surname now if i want
07:07 - to provide surname to all of them i can
07:09 - simply use the map method i can say
07:12 - const full names equals
07:15 - names.map now remember that map takes a
07:18 - function that takes each element
07:21 - of this array one by one so for each
07:24 - name
07:25 - i want to return
07:26 - name plus their surname let's call it
07:29 - smith
07:30 - with a space in between so this is the
07:32 - concatenation operator
07:34 - and you must have guest output by now
07:37 - i if i say console.log
07:41 - full names
07:43 - and press run
07:45 - i will get an array with smith added to
07:48 - each element again just like before
07:51 - don't get confused if you see an arrow
07:54 - function like this
07:56 - or an arrow function since this function
07:58 - has only one line
08:00 - an arrow function like this
08:02 - or an arrow function like this these all
08:05 - mean the same thing and they will all
08:07 - work
08:08 - as you can see i've successfully added
08:10 - surnames to all of these names using the
08:12 - map method very simply without writing a
08:14 - lot of code
08:15 - if you're enjoying this video please
08:17 - also check out programs pro where we
08:19 - provide tutorials along with quizzes and
08:21 - challenges which will help you practice
08:23 - and test your learning in real time also
08:25 - the course includes projects to give you
08:26 - an awesome experience of how programming
08:28 - works in the real world and for our
08:30 - youtube subscribers we are giving 50 off
08:32 - on the yearly plan sign up by scanning
08:34 - this qr code or use the link in the
08:36 - video description to claim your discount
08:39 - let's move on to the filter method the
08:41 - filter method is used to filter out the
08:42 - array elements based on a particular
08:44 - condition let me give you an example
08:47 - suppose i'll go back to my old numbers
08:50 - array
08:51 - so numbers equals 1 2 3 4 and 5.
08:55 - let me just add spaces here
08:58 - doesn't make a difference but just looks
09:00 - nicer
09:02 - now if we only want those elements from
09:04 - the array that are less than 3 we can
09:06 - use the filter method but before that
09:09 - let me do this using the
09:10 - for loop so if i was going to do this
09:13 - with the for loop i would do let result
09:16 - i'd start with an empty array and then i
09:18 - would say for
09:19 - let i equals 0 i less than
09:24 - numbers dot length
09:27 - and i plus plus
09:31 - and inside i would say if so i would say
09:34 - const
09:35 - number equals numbers
09:38 - i
09:40 - and i would say if
09:42 - number
09:43 - less than
09:44 - 3
09:45 - only then i want you to add
09:49 - the number to the result
09:52 - array
09:53 - now
09:54 - outside if i say console.log
09:57 - result
09:58 - and press run
10:00 - you can see that i was successfully able
10:02 - to add only those numbers to the result
10:04 - array which satisfy my function or my
10:07 - condition number less than three now
10:10 - let's try to do the same thing using the
10:11 - filter function if you have understood
10:13 - the map function the filter function
10:15 - should seem really easy for you
10:17 - so i can just say
10:19 - const
10:21 - less
10:22 - than 3
10:24 - equals
10:25 - numbers dot filter
10:28 - and now let me add a function here just
10:31 - like map function takes each number
10:35 - as the parameter
10:37 - inside this function i'll just say if
10:40 - number
10:41 - less than 3
10:43 - return true
10:45 - and then
10:47 - else
10:48 - return
10:49 - false
10:51 - so compare this
10:53 - to this
10:54 - and you will be able to see
10:56 - that
10:58 - one by one
10:59 - the numbers will be sent to this
11:01 - function so let's do this all right i'll
11:03 - remove this
11:05 - because these are complex concepts i
11:07 - want to spend as much time simulating
11:09 - the output uh as i can alright so i'll
11:12 - just take one and put it here
11:15 - now is one less than three yes return
11:18 - true that means one gets to enter the
11:21 - less than three
11:22 - club
11:24 - so let's say one gets to enter all right
11:27 - now
11:28 - let's move on to the next element
11:30 - 2
11:31 - is 2 less than 3
11:33 - yes because this function returns true
11:36 - 2 gets to enter this club
11:38 - of less than 3.
11:40 - now let's go to 3 so we'll go to 3
11:44 - is 3 less than 3
11:46 - no
11:47 - this function returns false so 3 does
11:49 - not get to enter this club of less than
11:52 - 3
11:53 - array
11:53 - that means
11:54 - this filter function removes all the
11:58 - elements that don't satisfy my condition
12:01 - now i can write this more concisely by
12:03 - saying
12:05 - just in one line
12:07 - number
12:09 - arrow
12:10 - number
12:11 - less than 3
12:14 - why does this work because this is a
12:16 - boolean expression that will return true
12:18 - and false based on whether number is
12:21 - less than 3 or not and this is an arrow
12:24 - function that returns this boolean
12:27 - expression so a filter function as long
12:30 - as it returns true or false and that
12:32 - gives me you know whether should i
12:34 - whether i should send that number to
12:37 - this result array or not as long as it
12:39 - returns that
12:40 - true or false state then it works so let
12:43 - me just make sure that this works
12:45 - console log less than three
12:49 - and i'll press run
12:52 - and as you can see
12:54 - by writing a very small function a very
12:56 - very small function
12:58 - i can get the same result as a long for
13:02 - loop
13:04 - let's see one more example so that this
13:06 - is very clear to you
13:07 - let me change the function so that i
13:09 - filter out the odd elements now we
13:11 - already have this template here but
13:12 - still i'll remove this
13:14 - let me start so i'll even name the
13:17 - function so i can even give the function
13:18 - a name and i know that this function
13:21 - will receive
13:22 - each element of this array so i'll call
13:25 - the
13:26 - element number
13:27 - and i can just say return
13:30 - number
13:32 - modulo t2 equals equals 0 because i
13:36 - wanted to
13:37 - filter out the odd numbers that means i
13:39 - want only the even numbers
13:41 - which this condition gives me so
13:43 - let's again do the same exercise as
13:45 - before i will put 1 here return one
13:49 - percentage to equal sig zero this is
13:50 - false so
13:53 - less than three or let's call it even
13:55 - numbers
13:57 - so
13:59 - even numbers
14:01 - will not have 1 we go to 2
14:04 - put 2 here
14:06 - 2 modulus 2 or the remainder when 2 is
14:09 - divided by 2
14:10 - is in fact 0 so 2 gets to go in
14:14 - let's go with 3
14:16 - 3 modulo 3 2 is not 0 so this result is
14:20 - false and 3 does not get to go in and 4
14:24 - is allowed to go 5 is not allowed to go
14:26 - so once you start visualizing the filter
14:28 - function in this way you will be able to
14:30 - understand it and be writing filter
14:32 - functions in no time i'll again reduce
14:35 - this to a very small
14:37 - manageable
14:38 - function arrow function so i'll call it
14:40 - number
14:42 - and
14:43 - number
14:45 - modulo 2
14:46 - equals equals 0.
14:48 - this should also do the same thing as
14:50 - before
14:51 - so let me just check
14:54 - even numbers
14:55 - and when i press run
14:57 - you can see that i got an array of 2 and
14:59 - 4 which filter out
15:02 - all the odd numbers
15:04 - okay guys we need your support to keep
15:06 - these kinds of content free for all
15:07 - users youtube really likes engagement on
15:09 - the video so leave a comment below press
15:11 - that like button and hit subscribe if
15:12 - you haven't already let's get the
15:14 - engagement score high up so that more
15:16 - people can discover and enjoy these
15:17 - courses
15:20 - the reduce method is the most advanced
15:23 - of the three array methods that i'm
15:25 - going to talk about in this video we
15:26 - learned about the map and filter
15:28 - functions the reduce method is used to
15:30 - execute a certain function on each
15:32 - element of an array just like map and
15:34 - filter but it works a bit differently
15:36 - i'll show you with an example so i'll
15:39 - start
15:41 - with an array like this so numbers
15:43 - equals 1
15:45 - 1 2 3 4 5.
15:48 - now what if i wanted to find the sum of
15:51 - all these elements
15:52 - let me write a for loop as usual so i'll
15:54 - set
15:56 - sum of numbers equals 0
15:59 - and then for
16:01 - let i equals 0 i less than
16:06 - numbers dot length
16:09 - i plus plus
16:10 - and what i do is i'll say sum of numbers
16:14 - equals
16:15 - sum of numbers
16:17 - plus
16:19 - numbers i
16:21 - if you're having trouble understanding
16:22 - this for loop i suggest that you go back
16:24 - to our video on for loops and make sure
16:26 - that you understand this first because
16:27 - you will not understand reduce if you're
16:29 - not clear about this one all right so
16:32 - let me just confirm console log sum of
16:35 - numbers
16:37 - and press run
16:38 - and you get 15 which is the sum of these
16:40 - numbers now let's think about how this
16:42 - program works
16:43 - we start with a number called zero so
16:46 - this is sort of the base value and when
16:50 - i is 0 so sum of numbers is 0
16:53 - and again sum of numbers is 0
16:55 - and numbers i is 1
16:58 - so
16:59 - my sort of i can say sum of numbers is 0
17:03 - plus 1 that means the sum of numbers
17:05 - variable now contains 1.
17:08 - now in the second loop i go to 2 so
17:11 - numbers i becomes 2 and sum of numbers
17:14 - because it was initially 1
17:16 - now sum of number becomes 1 plus 2 which
17:18 - is 3 now you can see that sum of numbers
17:21 - is really like an accumulator that is
17:23 - accumulating the sum till now
17:27 - in each iteration of the of the for loop
17:30 - this concept is important when we
17:32 - try to use the reduce function so the
17:34 - reduced function
17:36 - is very similar but what we'll do is
17:38 - we'll say sum of numbers
17:41 - equals numbers dot reduce
17:43 - instead of
17:45 - so i know till now that i need to pass a
17:47 - function so let me just put an empty
17:49 - function here
17:51 - like map and filter i cannot just put
17:54 - number here
17:55 - instead
17:57 - the reduce function takes two parameters
17:59 - and accumulator
18:00 - and the current value
18:04 - so
18:05 - inside this function i need to pass
18:09 - the new value of the accumulator first
18:11 - before i do that
18:12 - remember the for loop that i wrote
18:14 - before so let me first copy this code
18:18 - go back
18:20 - and make sure
18:22 - that i have this loop somewhere all
18:24 - right i'll go down here
18:26 - and now
18:29 - let me call this sum of numbers one
18:32 - so remember our accumulator which are
18:34 - sum of numbers the initial value was
18:36 - zero so
18:37 - to the second parameter of the reduced
18:39 - function we pass the initial value of
18:42 - the accumulator
18:43 - now this function should return the new
18:46 - value of the accumulator on each
18:48 - iteration
18:49 - that means
18:50 - just like before what was the new value
18:52 - of the accumulator after each iteration
18:54 - it was the old value of the accumulator
18:57 - plus the current value or the current
19:00 - value of the numbers array which i was
19:02 - iterating through at that iteration so i
19:05 - can just say return
19:07 - accumulator
19:09 - current value
19:11 - and this will give me the sum of the
19:13 - numbers let's just check so console.log
19:16 - sum of numbers
19:18 - 1.
19:20 - this will be clear as we go through more
19:21 - examples
19:23 - and i'll press run
19:25 - you can see that i got 15. now let's try
19:28 - to see what happened here during the
19:30 - first iteration
19:31 - the accumulator
19:32 - is the value 0 because this is the
19:34 - default value that i have given so the
19:36 - accumulator is 0
19:38 - and the current value will be the first
19:40 - value which is 1
19:41 - so
19:42 - this will return
19:44 - 0 plus 1
19:46 - which is 1
19:48 - now for the next iteration
19:50 - this return value will be passed
19:53 - to the accumulator variable so this will
19:55 - be 1 and the current value which is 2
19:58 - will be passed to the current value
20:00 - now what will this function return it
20:02 - will return
20:03 - the
20:05 - value 1
20:06 - which is the current value of the
20:07 - accumulator plus
20:09 - the current value of the iteration or
20:12 - the numbers array which i'm iterating
20:14 - through all right now
20:16 - the
20:17 - accumulator becomes 1 plus 2 so this
20:20 - becomes 3
20:22 - and we move to the next element which is
20:24 - 3 this becomes the current value
20:30 - now i return
20:32 - 3 plus 3 which becomes the new value of
20:35 - the accumulator so this becomes 6 and
20:38 - the new value is 4 so the current value
20:40 - becomes 4
20:43 - and what do i return i return
20:45 - 6
20:47 - plus 4 which is 10
20:50 - now
20:50 - the accumulator is 10
20:53 - and the current value becomes 5 and
20:56 - finally i return 10 plus 5 which is 15
21:01 - and that is what i get in sum of numbers
21:03 - one now this was a bit complex but i
21:05 - will do one or two more examples so that
21:07 - you can understand what reduce really
21:09 - means
21:10 - let's go back to a map and filter
21:11 - function and do things
21:14 - with reduce that we did with map and
21:16 - filter so
21:17 - i will find the squares of all the
21:19 - numbers
21:20 - let's do the for loop that will do that
21:22 - so i'll say squares
21:25 - equals
21:27 - this and then let me uncomment this and
21:30 - we would do squares
21:33 - dot push
21:36 - numbers
21:37 - i
21:39 - times
21:40 - numbers
21:42 - i and i can console log the squares
21:47 - i'll
21:49 - do this and i hope this works all right
21:52 - you can see that by using a for loop i
21:54 - was able to calculate all the squares of
21:58 - each number and put them in a squares
22:00 - array now i can do this using a map
22:02 - function as we've learned but let me try
22:04 - to reduce use reduce instead because
22:06 - this is more challenging and more fun so
22:08 - everything you can do with a map you can
22:09 - also do with reduce
22:11 - all right
22:12 - now i'll remove this old code and i'll
22:14 - say
22:15 - const squares
22:19 - 1 equals
22:22 - numbers dot reduce
22:23 - as before remember that it needs an
22:26 - accumulator and a
22:29 - current value
22:31 - and the second parameter will be the
22:33 - default value
22:34 - of the accumulator which is an empty
22:36 - array in this case so let me put the
22:38 - empty array here
22:39 - now what should be the
22:41 - accumulated value at the end of each
22:43 - iteration it should be the original
22:47 - or i should say
22:49 - accumulator dot push i need to add a new
22:52 - element to the accumulator each time
22:54 - what do i need to push obviously the
22:56 - current value squared so current
23:00 - value times current value and don't
23:03 - forget i need to return the accumulator
23:05 - each time
23:08 - so
23:08 - what's going to happen here is the
23:10 - accumulator will be in the first
23:12 - iteration it will be an empty array
23:14 - and the current value will be 1 so
23:17 - accumulator dot push
23:19 - current value 1 times 1
23:21 - and the new accumulator becomes
23:23 - 1 an array containing just 1.
23:26 - now
23:27 - the current value becomes 2 so
23:29 - accumulator dot push 2 times 2 and
23:32 - because i'm returning this new array so
23:35 - this was an
23:37 - array containing just one one dot push 2
23:39 - times 2 so this becomes 1 comma 4 the
23:43 - current value now becomes 3
23:47 - so this becomes 3
23:48 - and this becomes 1 comma 4
23:52 - dot push
23:54 - 3 times 3 and so on and finally the
23:57 - accumulator will contain or the squares
23:58 - one will contain
24:00 - all the squares of the elements
24:02 - let's use reduce to simulate a filter
24:05 - function now
24:06 - remember that i only included the
24:08 - elements which were less than 3 let's do
24:10 - that here as well
24:11 - so
24:12 - less than 3 equals
24:15 - an empty array and i would typically do
24:18 - if
24:21 - numbers
24:23 - i or the current element less than 3
24:27 - then
24:28 - less than 3 dot push
24:31 - numbers
24:33 - i
24:34 - so this would give me all the elements
24:36 - that are less than three
24:37 - it works like this now always think
24:39 - about the accumulator as the initial
24:41 - value that you take so the initial value
24:43 - is okay now what do i need to change
24:45 - inside here
24:47 - this will be accumulator
24:51 - and this will be
24:53 - current value
24:54 - now i want to add to the accumulator
24:56 - only if
24:57 - the current value is less than three so
24:59 - if
25:00 - current value is less than three
25:03 - then
25:04 - accumulator dot push
25:07 - current value
25:09 - and there's an explicit else that you
25:12 - know don't do anything
25:13 - if the value is greater than 3 and at
25:15 - the end don't forget to return the
25:17 - accumulator so return
25:20 - accumulator
25:21 - and let me remove this for conciseness
25:24 - and this should give me the list of
25:27 - numbers
25:28 - that are less than three
25:32 - let me call it less than three three all
25:34 - right i'll remove this old code and
25:35 - let's simulate what happened here
25:38 - so numbers that reduce function the
25:40 - accumulator was initially this empty
25:42 - array so i'll put an empty array here
25:45 - and the current value was one
25:48 - the one
25:49 - is one less than three yes the
25:51 - accumulator gets
25:52 - pushed the current value so empty array
25:57 - dot push
25:59 - 1
26:00 - now my accumulator becomes an array with
26:02 - element 1
26:03 - now i go to the next element which is 2
26:05 - so is 2 less than 3 yes
26:08 - so 1
26:10 - dot push 2
26:12 - and now my accumulator becomes 1
26:15 - comma 2 now for the next element 3
26:18 - is 3 less than 3 no false so i just
26:22 - return
26:23 - the existing accumulator which is one
26:25 - comma two and that's why no other
26:27 - elements get added in the next
26:29 - iterations map filter and reduce are a
26:31 - bit complicated for beginners but once
26:33 - you start using them you will never go
26:35 - back to for loops that's my experience
26:38 - with map filter and reduce i really love
26:40 - writing these functions
26:43 - now to practice what you learned here's
26:44 - a programming task for you create an
26:46 - array named greet with values hello hi
26:49 - and welcome
26:50 - use the map method to add a new string
26:52 - word to each element of the array
26:54 - remember two words should be separated
26:56 - by a space from this new array filter
26:59 - out the element that have more than
27:01 - eight characters you'll find the answer
27:03 - to this question in our github
27:04 - repository also if you want to revise
27:06 - these concepts you can find all these
27:08 - programs there as well i'll put the link
27:10 - in the video description below
27:12 - now that we've reached the end of this
27:14 - video it's time for the programming quiz
27:16 - what is the output of this program you
27:18 - can see the options on the screen
27:20 - comment answer below and happy
27:22 - programming
27:27 - [Music]

Cleaned transcript:

what's up guys i'm punishment programmers and welcome back to this series on javascript in our last videos we have learnt about the working of a javascript array now we'll learn about the map filter and reduce methods that are very useful while performing various operations on an array so let's get started before we learn about these methods let's do a quick brush up on arrays in javascript we use an array to store multiple values together for example i'll go on my code editor and let me create an array called numbers that will store the numbers from 1 to 5. so it's basically just a collection of numbers stored together in one variable now suppose we want to find the square number of each of these elements then we need to loop over the elements and perform the squaring functionality this means to perform any operation on an array we need to first access each element of the array one by one now to easily access each element of the array and perform a certain action we can use map filter and reduce let's start with the easiest the map method to understand the map method let's see an example first i have an array from before now i want to find the square of each element of this array i can use the map method like this now i want to find the square of each element of this array before i use the map method let me first write the equivalent for loop that will do this for me so i would start with a result array or let's call this squared so i'll say squared i would have to start with an empty array then for let i equals 0 i less than numbers dot length so i want to go to the end of the array and i want to add one number to the index then i would say squared dot push numbers times numbers and let me just verify that this indeed works so i'll say console log squared so what i'm doing is i'm looping through all the elements in the array and i actually wanted to do not the array multiplication but so inside the for loop i am taking each element of the array one by one so i will be zero in the first iteration so i want to multiply number zero which is one with numbers zero again and squared array will now contain one times one which is one in the second iteration i will be 1 so i less than numbers that length is 5 so this is true so the loop will continue and square dot push so this will become 2 and this will become 2. this goes on so i will be 3 and this becomes 3.3 so squared should have an array of all the squared numbers in this array i'll press run just to verify and you can see that i got the array of squared numbers now let me simplify this code by using the map method i can instead of doing this what i can also do is i can say const result equals numbers dot map and inside this map i can send a function that will take each number one by one and just return number times number let me console log result just to show you that this works like before i'll press run so you can see that i got the same result as before now let's see what's happening here the map method takes each element from the numbers array so 1 will be transferred to 1 here and imagine this as one times one so whatever value is returned from the function is pushed into the result array so think of this as so one by one we'll do this so numbers zero is 1 1 is passed to this function and the return value 1 times 1 becomes result dot push 1 times 1. similarly in the next iteration we take 2 and put it inside here so the return value is 2 times 2 and think of this as result dot push 2 times 2. in the third iteration this becomes result dot push three times three in the fourth iteration result dot push four times four and in the fifth iteration this becomes result dot push phi times phi so whatever transformation function you define inside will be used on every element of the numbers array one by one so we will always get an array of the same size as the initial array because we are applying the transformation function on each number or in or each element in this case this is a number i hope this was clear this will be more clear in the future videos or as we practice javascript even more now don't get confused so right now we wrote this or we can even give this function a name so square number and then we wrote return number times number now you can see variations of this everywhere so first of all let me first turn this into an arrow function so you will see this variation in many places as well always remember that this is just an arrow function and a different representation of a function and nothing more in fact you'll also see another representation a lot since there is only one line in my function i don't need the parenthesis and i can just say number arrow number times number you will see another variation where even these braces are removed or these parentheses are removed and this works because the function or an arrow function can work without the parenthesis around the parameters when there is only one parameter so you will see all of these variations and i recommend that you spend more time understanding arrow functions before you dig deep into map or filter or all of these methods all right now that's out of the way let's do another example to drive home the point remember that this is one of the most complex parts of javascript so spend time i'll take this one step at a time all right i'll remove this old code and let me say i have an array of names james murray and rosa all right an element an array with three elements suppose all these people belong to the same family and all of them have the same surname now if i want to provide surname to all of them i can simply use the map method i can say const full names equals names.map now remember that map takes a function that takes each element of this array one by one so for each name i want to return name plus their surname let's call it smith with a space in between so this is the concatenation operator and you must have guest output by now i if i say console.log full names and press run i will get an array with smith added to each element again just like before don't get confused if you see an arrow function like this or an arrow function since this function has only one line an arrow function like this or an arrow function like this these all mean the same thing and they will all work as you can see i've successfully added surnames to all of these names using the map method very simply without writing a lot of code if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount let's move on to the filter method the filter method is used to filter out the array elements based on a particular condition let me give you an example suppose i'll go back to my old numbers array so numbers equals 1 2 3 4 and 5. let me just add spaces here doesn't make a difference but just looks nicer now if we only want those elements from the array that are less than 3 we can use the filter method but before that let me do this using the for loop so if i was going to do this with the for loop i would do let result i'd start with an empty array and then i would say for let i equals 0 i less than numbers dot length and i plus plus and inside i would say if so i would say const number equals numbers i and i would say if number less than 3 only then i want you to add the number to the result array now outside if i say console.log result and press run you can see that i was successfully able to add only those numbers to the result array which satisfy my function or my condition number less than three now let's try to do the same thing using the filter function if you have understood the map function the filter function should seem really easy for you so i can just say const less than 3 equals numbers dot filter and now let me add a function here just like map function takes each number as the parameter inside this function i'll just say if number less than 3 return true and then else return false so compare this to this and you will be able to see that one by one the numbers will be sent to this function so let's do this all right i'll remove this because these are complex concepts i want to spend as much time simulating the output uh as i can alright so i'll just take one and put it here now is one less than three yes return true that means one gets to enter the less than three club so let's say one gets to enter all right now let's move on to the next element 2 is 2 less than 3 yes because this function returns true 2 gets to enter this club of less than 3. now let's go to 3 so we'll go to 3 is 3 less than 3 no this function returns false so 3 does not get to enter this club of less than 3 array that means this filter function removes all the elements that don't satisfy my condition now i can write this more concisely by saying just in one line number arrow number less than 3 why does this work because this is a boolean expression that will return true and false based on whether number is less than 3 or not and this is an arrow function that returns this boolean expression so a filter function as long as it returns true or false and that gives me you know whether should i whether i should send that number to this result array or not as long as it returns that true or false state then it works so let me just make sure that this works console log less than three and i'll press run and as you can see by writing a very small function a very very small function i can get the same result as a long for loop let's see one more example so that this is very clear to you let me change the function so that i filter out the odd elements now we already have this template here but still i'll remove this let me start so i'll even name the function so i can even give the function a name and i know that this function will receive each element of this array so i'll call the element number and i can just say return number modulo t2 equals equals 0 because i wanted to filter out the odd numbers that means i want only the even numbers which this condition gives me so let's again do the same exercise as before i will put 1 here return one percentage to equal sig zero this is false so less than three or let's call it even numbers so even numbers will not have 1 we go to 2 put 2 here 2 modulus 2 or the remainder when 2 is divided by 2 is in fact 0 so 2 gets to go in let's go with 3 3 modulo 3 2 is not 0 so this result is false and 3 does not get to go in and 4 is allowed to go 5 is not allowed to go so once you start visualizing the filter function in this way you will be able to understand it and be writing filter functions in no time i'll again reduce this to a very small manageable function arrow function so i'll call it number and number modulo 2 equals equals 0. this should also do the same thing as before so let me just check even numbers and when i press run you can see that i got an array of 2 and 4 which filter out all the odd numbers okay guys we need your support to keep these kinds of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses the reduce method is the most advanced of the three array methods that i'm going to talk about in this video we learned about the map and filter functions the reduce method is used to execute a certain function on each element of an array just like map and filter but it works a bit differently i'll show you with an example so i'll start with an array like this so numbers equals 1 1 2 3 4 5. now what if i wanted to find the sum of all these elements let me write a for loop as usual so i'll set sum of numbers equals 0 and then for let i equals 0 i less than numbers dot length i plus plus and what i do is i'll say sum of numbers equals sum of numbers plus numbers i if you're having trouble understanding this for loop i suggest that you go back to our video on for loops and make sure that you understand this first because you will not understand reduce if you're not clear about this one all right so let me just confirm console log sum of numbers and press run and you get 15 which is the sum of these numbers now let's think about how this program works we start with a number called zero so this is sort of the base value and when i is 0 so sum of numbers is 0 and again sum of numbers is 0 and numbers i is 1 so my sort of i can say sum of numbers is 0 plus 1 that means the sum of numbers variable now contains 1. now in the second loop i go to 2 so numbers i becomes 2 and sum of numbers because it was initially 1 now sum of number becomes 1 plus 2 which is 3 now you can see that sum of numbers is really like an accumulator that is accumulating the sum till now in each iteration of the of the for loop this concept is important when we try to use the reduce function so the reduced function is very similar but what we'll do is we'll say sum of numbers equals numbers dot reduce instead of so i know till now that i need to pass a function so let me just put an empty function here like map and filter i cannot just put number here instead the reduce function takes two parameters and accumulator and the current value so inside this function i need to pass the new value of the accumulator first before i do that remember the for loop that i wrote before so let me first copy this code go back and make sure that i have this loop somewhere all right i'll go down here and now let me call this sum of numbers one so remember our accumulator which are sum of numbers the initial value was zero so to the second parameter of the reduced function we pass the initial value of the accumulator now this function should return the new value of the accumulator on each iteration that means just like before what was the new value of the accumulator after each iteration it was the old value of the accumulator plus the current value or the current value of the numbers array which i was iterating through at that iteration so i can just say return accumulator current value and this will give me the sum of the numbers let's just check so console.log sum of numbers 1. this will be clear as we go through more examples and i'll press run you can see that i got 15. now let's try to see what happened here during the first iteration the accumulator is the value 0 because this is the default value that i have given so the accumulator is 0 and the current value will be the first value which is 1 so this will return 0 plus 1 which is 1 now for the next iteration this return value will be passed to the accumulator variable so this will be 1 and the current value which is 2 will be passed to the current value now what will this function return it will return the value 1 which is the current value of the accumulator plus the current value of the iteration or the numbers array which i'm iterating through all right now the accumulator becomes 1 plus 2 so this becomes 3 and we move to the next element which is 3 this becomes the current value now i return 3 plus 3 which becomes the new value of the accumulator so this becomes 6 and the new value is 4 so the current value becomes 4 and what do i return i return 6 plus 4 which is 10 now the accumulator is 10 and the current value becomes 5 and finally i return 10 plus 5 which is 15 and that is what i get in sum of numbers one now this was a bit complex but i will do one or two more examples so that you can understand what reduce really means let's go back to a map and filter function and do things with reduce that we did with map and filter so i will find the squares of all the numbers let's do the for loop that will do that so i'll say squares equals this and then let me uncomment this and we would do squares dot push numbers i times numbers i and i can console log the squares i'll do this and i hope this works all right you can see that by using a for loop i was able to calculate all the squares of each number and put them in a squares array now i can do this using a map function as we've learned but let me try to reduce use reduce instead because this is more challenging and more fun so everything you can do with a map you can also do with reduce all right now i'll remove this old code and i'll say const squares 1 equals numbers dot reduce as before remember that it needs an accumulator and a current value and the second parameter will be the default value of the accumulator which is an empty array in this case so let me put the empty array here now what should be the accumulated value at the end of each iteration it should be the original or i should say accumulator dot push i need to add a new element to the accumulator each time what do i need to push obviously the current value squared so current value times current value and don't forget i need to return the accumulator each time so what's going to happen here is the accumulator will be in the first iteration it will be an empty array and the current value will be 1 so accumulator dot push current value 1 times 1 and the new accumulator becomes 1 an array containing just 1. now the current value becomes 2 so accumulator dot push 2 times 2 and because i'm returning this new array so this was an array containing just one one dot push 2 times 2 so this becomes 1 comma 4 the current value now becomes 3 so this becomes 3 and this becomes 1 comma 4 dot push 3 times 3 and so on and finally the accumulator will contain or the squares one will contain all the squares of the elements let's use reduce to simulate a filter function now remember that i only included the elements which were less than 3 let's do that here as well so less than 3 equals an empty array and i would typically do if numbers i or the current element less than 3 then less than 3 dot push numbers i so this would give me all the elements that are less than three it works like this now always think about the accumulator as the initial value that you take so the initial value is okay now what do i need to change inside here this will be accumulator and this will be current value now i want to add to the accumulator only if the current value is less than three so if current value is less than three then accumulator dot push current value and there's an explicit else that you know don't do anything if the value is greater than 3 and at the end don't forget to return the accumulator so return accumulator and let me remove this for conciseness and this should give me the list of numbers that are less than three let me call it less than three three all right i'll remove this old code and let's simulate what happened here so numbers that reduce function the accumulator was initially this empty array so i'll put an empty array here and the current value was one the one is one less than three yes the accumulator gets pushed the current value so empty array dot push 1 now my accumulator becomes an array with element 1 now i go to the next element which is 2 so is 2 less than 3 yes so 1 dot push 2 and now my accumulator becomes 1 comma 2 now for the next element 3 is 3 less than 3 no false so i just return the existing accumulator which is one comma two and that's why no other elements get added in the next iterations map filter and reduce are a bit complicated for beginners but once you start using them you will never go back to for loops that's my experience with map filter and reduce i really love writing these functions now to practice what you learned here's a programming task for you create an array named greet with values hello hi and welcome use the map method to add a new string word to each element of the array remember two words should be separated by a space from this new array filter out the element that have more than eight characters you'll find the answer to this question in our github repository also if you want to revise these concepts you can find all these programs there as well i'll put the link in the video description below now that we've reached the end of this video it's time for the programming quiz what is the output of this program you can see the options on the screen comment answer below and happy programming
