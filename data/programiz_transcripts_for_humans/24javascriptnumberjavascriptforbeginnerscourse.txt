With timestamps:

00:00 - what's up guys i'm puneet from
00:01 - programmers and welcome back to this
00:02 - series on javascript in this video we
00:05 - will learn about the numbers data type
00:06 - in javascript we've already used numbers
00:09 - numerous times in our programs before
00:11 - now we will cover numbers in depth more
00:13 - specifically we will learn about number
00:15 - as an object in javascript so let's get
00:17 - started
00:22 - let's start with the example of number
00:23 - variables which we have been using in
00:25 - our previous videos
00:27 - so
00:28 - you can say something like const a
00:29 - equals 3
00:30 - and const b equals 3.13
00:34 - here we have created number type
00:36 - variables by simply passing the numeric
00:38 - data 3 and 3.13 directly to variables
00:42 - during the initialization
00:44 - we can verify that these are of number
00:46 - type by printing the type of these
00:48 - variables using the type of operator so
00:50 - i can say console.log
00:53 - type
00:54 - of a
00:56 - and
00:57 - console log
00:59 - type of b
01:01 - let me run this code
01:02 - and you can see that a and b both are of
01:06 - the number data type
01:08 - that's because in javascript both
01:09 - integer values and floating point values
01:11 - are treated as numbers
01:16 - the number function allows us to create
01:17 - numbers from other data types let's see
01:19 - this with an example i'll remove this
01:21 - old code and let's see suppose we have
01:25 - a numeric string like 23 so number
01:28 - stored as a string this is a string
01:31 - because it is
01:32 - surrounded by quotation marks and now i
01:35 - want to convert this string to a number
01:37 - i can do that by passing it to the
01:39 - number function so i can say const num
01:43 - equals number str
01:46 - now
01:47 - i'll type the num and also to verify
01:49 - that this is now indeed a number
01:52 - let me say type of num
01:54 - let me also add another console log here
01:58 - to see the type of this variable before
02:00 - the conversion
02:02 - now when i press run
02:05 - you can see that the type of the number
02:08 - was string before the conversion and
02:10 - after passing it
02:12 - to a number function it became a number
02:15 - we can also convert boolean values to
02:17 - number using the number function
02:19 - for example i can say const bool equals
02:22 - true
02:23 - and const result equals number
02:27 - bool
02:28 - console log
02:30 - the result
02:31 - and when i press run
02:34 - i get the number one as output for false
02:37 - the output would obviously be zero
02:40 - if you're enjoying this video please
02:41 - also check out programs pro where we
02:43 - provide tutorials along with quizzes and
02:46 - challenges which will help you practice
02:47 - and test your learning in real time also
02:49 - the course includes projects to give you
02:51 - an awesome experience of how programming
02:53 - works in the real world and for our
02:55 - youtube subscribers we are giving 50 off
02:57 - on the yearly plan sign up by scanning
02:59 - this qr code or use the link in the
03:00 - video description to claim your discount
03:04 - in javascript nand stands for not a
03:06 - number this means that the value is not
03:08 - a number for example when we try to
03:11 - convert a non-numeric string using the
03:13 - number function we will get nan as
03:15 - output let me show you
03:17 - i'll start by initializing the
03:19 - string
03:20 - hello
03:22 - now you can see that this is not a
03:23 - numeric string it does not contain a
03:26 - number
03:26 - now let me try to convert this
03:30 - to a number by using the number as a
03:32 - function
03:33 - and let me console log the result
03:37 - when i press run
03:40 - you can see that i get nan as the output
03:43 - this is because the non-numeric string
03:45 - cannot be converted to a number
03:47 - we can also get nan output while
03:49 - performing arithmetic operations between
03:50 - a string and a number let me show you an
03:53 - example
03:54 - so let me try an operation like result
03:57 - equals 4 minus
04:00 - hello which obviously doesn't make any
04:02 - sense
04:03 - so
04:04 - if i try to console log this result
04:07 - press run
04:09 - this time also i get nan or not number
04:13 - this is because we are trying to
04:14 - subtract the string hello from the
04:16 - number 4 which is kind of impossible
04:19 - in javascript we can also check if a
04:21 - value is nan or not javascript provides
04:24 - an is nan method to check whether any
04:26 - value is nan or not let's see an example
04:30 - so i'll say const result equals
04:33 - is
04:34 - nan
04:35 - and let me pass a number to this so
04:38 - console log result
04:41 - when i press run
04:44 - i get false because 9 is a number so is
04:47 - nan is false
04:49 - now let me change the value from 9 to
04:51 - hello
04:52 - so
04:53 - i'll say hello
04:55 - and press run
04:57 - and this time i get true because indeed
05:01 - hello is not a number so is nan hello
05:03 - will return true
05:05 - okay guys we need your support to keep
05:06 - these kinds of content free for all
05:08 - users youtube really likes engagement on
05:10 - the video so leave a comment below press
05:12 - that like button and hit subscribe if
05:14 - you haven't already let's get the
05:16 - engagement score high up so that more
05:17 - people can discover and enjoy these
05:19 - courses
05:22 - to make working with numbers easier
05:24 - javascript provides various methods that
05:26 - can be used directly in our program
05:28 - let's learn about them one by one
05:32 - the is integer method checks whether a
05:34 - number is an integer or not if the
05:36 - number is an integer it returns true
05:38 - otherwise it returns false let's see an
05:40 - example so i can say something like
05:43 - const num equals 32
05:46 - and i can do cons result equals number
05:50 - dot is integer
05:52 - num
05:54 - and let me console log the result
05:59 - when i press run
06:01 - something is wrong okay this is supposed
06:03 - to be small i
06:05 - when i press run
06:07 - i get true
06:09 - this is because 32 is indeed an integer
06:12 - now you must have noticed i use the
06:14 - format like number dot is integer but
06:17 - last time i had used number as a
06:18 - function this is one of the
06:20 - peculiarities of javascript and you'll
06:21 - get used to it soon here number is used
06:24 - as an object
06:26 - and that's why since it has the is
06:28 - integer method i can use it like this
06:31 - now let's try it with something that is
06:33 - not an integer so something like 32.56
06:36 - and when i press run
06:38 - you can see that i got false
06:40 - because 32.56 is not an integer instead
06:43 - it's a floating point number
06:48 - the percent method converts a numeric
06:49 - string value to an integer so let me
06:52 - show you with an example i'll say const
06:54 - num
06:55 - equals something like string 5
06:58 - and i want to convert it to a number so
07:00 - i can say const result equals number dot
07:04 - pass int
07:06 - num
07:07 - and let me console log
07:10 - num
07:10 - oops not num i know it will be a string
07:13 - the result
07:14 - and also verify that this is indeed of
07:18 - the
07:19 - numeric data type
07:21 - so
07:22 - when i press run
07:23 - you can see that parsing converted this
07:26 - from a numeric string to a number that's
07:28 - why the type of result is number
07:31 - we can also convert a floating point
07:33 - number into an integer using the percent
07:35 - method let's see an example suppose we
07:38 - have a floating point number like
07:43 - eight 5.287 three whatever
07:45 - and let me make this a bit long
07:49 - now let's use the power synth method to
07:51 - convert this to an integer i'll say
07:53 - const result equals number dot
07:56 - pass int
07:58 - num
08:00 - now let me
08:02 - console log the result and this time
08:05 - i will also check if this is indeed an
08:07 - integer by using
08:09 - the is integer
08:12 - method that we learned about
08:15 - in the last few moments
08:18 - number dot is integer result
08:20 - this should work and when i press run
08:24 - you can see that 5 is returned that
08:26 - means the floating point number was
08:28 - converted to an integer
08:31 - and this is verified by the fact that
08:33 - number dot is integer result returns
08:35 - true
08:38 - similar to power synth we can also
08:40 - convert a numeric string that stores a
08:42 - floating point number to an actual
08:44 - floating point number let's see an
08:46 - example so a number can contain a
08:49 - numeric string that is a floating point
08:51 - like 5.36762
08:54 - and now i can use
08:57 - the
09:00 - number dot pass float method
09:03 - to convert this
09:05 - to an actual floating point number so
09:07 - i'll console log the result and let me
09:09 - also console log
09:12 - the type of result just to verify
09:15 - press run and you can see that this was
09:17 - now converted to a floating point number
09:19 - and i verified that this there is the
09:21 - type of result is indeed number
09:26 - while working with numbers sometimes we
09:28 - get data with multiple values after
09:30 - decimal point just like this
09:32 - in such cases it would be easier to work
09:34 - if the data only includes some specific
09:36 - value after the decimal for this the
09:38 - javascript number provides the two fixed
09:40 - method that is used to limit the value
09:43 - after certain decimal points let's see
09:45 - an example
09:46 - so i'll say const num equals five point
09:50 - eight seven two two two two two
09:53 - and now let's say i only want two
09:55 - decimal values then i can use the two
09:57 - fixed method so i can say const
10:00 - result equals num
10:02 - dot
10:03 - to fixed
10:04 - and now as a parameter i can pass two
10:06 - because i just want two decimal places
10:09 - let me console log the result
10:13 - now when i press run
10:15 - you can see that i got only the first
10:17 - two decimal places now if i wanted three
10:19 - decimal places i could do three
10:22 - and press run again
10:25 - and this time i got three decimal places
10:28 - and you can also notice that this was
10:30 - rounded off to the nearest tenths so
10:33 - because eight point seven three it's
10:35 - three seven so three seven becomes four
10:41 - now to practice what we've learned
10:42 - here's a programming task for you take a
10:44 - numeric string input from the user
10:46 - convert that input into number and if
10:48 - the input is successfully converted to a
10:50 - number multiply that number by 10 and
10:53 - display the output otherwise print the
10:56 - string is nan you'll find the answer to
10:58 - this question in our github repository
11:00 - also if you want to revise these
11:01 - concepts you can find all these programs
11:02 - there as well i'll put the link in the
11:04 - video description below now that we've
11:06 - reached the end of this video it's time
11:08 - for the programming quiz what is the
11:10 - output of the program
11:11 - you can see the options on your screen
11:13 - comment answer below happy programming
11:20 - [Music]

Cleaned transcript:

what's up guys i'm puneet from programmers and welcome back to this series on javascript in this video we will learn about the numbers data type in javascript we've already used numbers numerous times in our programs before now we will cover numbers in depth more specifically we will learn about number as an object in javascript so let's get started let's start with the example of number variables which we have been using in our previous videos so you can say something like const a equals 3 and const b equals 3.13 here we have created number type variables by simply passing the numeric data 3 and 3.13 directly to variables during the initialization we can verify that these are of number type by printing the type of these variables using the type of operator so i can say console.log type of a and console log type of b let me run this code and you can see that a and b both are of the number data type that's because in javascript both integer values and floating point values are treated as numbers the number function allows us to create numbers from other data types let's see this with an example i'll remove this old code and let's see suppose we have a numeric string like 23 so number stored as a string this is a string because it is surrounded by quotation marks and now i want to convert this string to a number i can do that by passing it to the number function so i can say const num equals number str now i'll type the num and also to verify that this is now indeed a number let me say type of num let me also add another console log here to see the type of this variable before the conversion now when i press run you can see that the type of the number was string before the conversion and after passing it to a number function it became a number we can also convert boolean values to number using the number function for example i can say const bool equals true and const result equals number bool console log the result and when i press run i get the number one as output for false the output would obviously be zero if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount in javascript nand stands for not a number this means that the value is not a number for example when we try to convert a nonnumeric string using the number function we will get nan as output let me show you i'll start by initializing the string hello now you can see that this is not a numeric string it does not contain a number now let me try to convert this to a number by using the number as a function and let me console log the result when i press run you can see that i get nan as the output this is because the nonnumeric string cannot be converted to a number we can also get nan output while performing arithmetic operations between a string and a number let me show you an example so let me try an operation like result equals 4 minus hello which obviously doesn't make any sense so if i try to console log this result press run this time also i get nan or not number this is because we are trying to subtract the string hello from the number 4 which is kind of impossible in javascript we can also check if a value is nan or not javascript provides an is nan method to check whether any value is nan or not let's see an example so i'll say const result equals is nan and let me pass a number to this so console log result when i press run i get false because 9 is a number so is nan is false now let me change the value from 9 to hello so i'll say hello and press run and this time i get true because indeed hello is not a number so is nan hello will return true okay guys we need your support to keep these kinds of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses to make working with numbers easier javascript provides various methods that can be used directly in our program let's learn about them one by one the is integer method checks whether a number is an integer or not if the number is an integer it returns true otherwise it returns false let's see an example so i can say something like const num equals 32 and i can do cons result equals number dot is integer num and let me console log the result when i press run something is wrong okay this is supposed to be small i when i press run i get true this is because 32 is indeed an integer now you must have noticed i use the format like number dot is integer but last time i had used number as a function this is one of the peculiarities of javascript and you'll get used to it soon here number is used as an object and that's why since it has the is integer method i can use it like this now let's try it with something that is not an integer so something like 32.56 and when i press run you can see that i got false because 32.56 is not an integer instead it's a floating point number the percent method converts a numeric string value to an integer so let me show you with an example i'll say const num equals something like string 5 and i want to convert it to a number so i can say const result equals number dot pass int num and let me console log num oops not num i know it will be a string the result and also verify that this is indeed of the numeric data type so when i press run you can see that parsing converted this from a numeric string to a number that's why the type of result is number we can also convert a floating point number into an integer using the percent method let's see an example suppose we have a floating point number like eight 5.287 three whatever and let me make this a bit long now let's use the power synth method to convert this to an integer i'll say const result equals number dot pass int num now let me console log the result and this time i will also check if this is indeed an integer by using the is integer method that we learned about in the last few moments number dot is integer result this should work and when i press run you can see that 5 is returned that means the floating point number was converted to an integer and this is verified by the fact that number dot is integer result returns true similar to power synth we can also convert a numeric string that stores a floating point number to an actual floating point number let's see an example so a number can contain a numeric string that is a floating point like 5.36762 and now i can use the number dot pass float method to convert this to an actual floating point number so i'll console log the result and let me also console log the type of result just to verify press run and you can see that this was now converted to a floating point number and i verified that this there is the type of result is indeed number while working with numbers sometimes we get data with multiple values after decimal point just like this in such cases it would be easier to work if the data only includes some specific value after the decimal for this the javascript number provides the two fixed method that is used to limit the value after certain decimal points let's see an example so i'll say const num equals five point eight seven two two two two two and now let's say i only want two decimal values then i can use the two fixed method so i can say const result equals num dot to fixed and now as a parameter i can pass two because i just want two decimal places let me console log the result now when i press run you can see that i got only the first two decimal places now if i wanted three decimal places i could do three and press run again and this time i got three decimal places and you can also notice that this was rounded off to the nearest tenths so because eight point seven three it's three seven so three seven becomes four now to practice what we've learned here's a programming task for you take a numeric string input from the user convert that input into number and if the input is successfully converted to a number multiply that number by 10 and display the output otherwise print the string is nan you'll find the answer to this question in our github repository also if you want to revise these concepts you can find all these programs there as well i'll put the link in the video description below now that we've reached the end of this video it's time for the programming quiz what is the output of the program you can see the options on your screen comment answer below happy programming
