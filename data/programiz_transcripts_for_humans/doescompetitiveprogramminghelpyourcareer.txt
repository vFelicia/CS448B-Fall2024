With timestamps:

00:00 - today i want to talk a little bit about
00:01 - uh competitive programming so
00:03 - competitive programming
00:04 - is uh an online sport where people from
00:07 - all across the world
00:08 - come together to solve challenging
00:09 - programming problems
00:11 - and there's multiple platforms where you
00:13 - can learn competitive programming so
00:15 - there's lead code there's code chef
00:17 - there's code forces hacker rank and in
00:20 - all of these platforms the good news is
00:22 - that
00:22 - it's not just for the advanced computer
00:25 - programmers so there's a spectrum of
00:27 - problems from easy to medium to hard
00:29 - and there is a level for everybody now
00:32 - why spend time uh you know competitive
00:35 - programming in the first place
00:37 - there's lots of advantages to being
00:39 - involved in competitive programming
00:41 - first one being obviously it makes you a
00:43 - better problem solver
00:44 - it makes you it increases your knowledge
00:47 - of data structures and algorithms
00:49 - it makes you a faster programmer and it
00:52 - will also help you land your next job or
00:54 - it might at least
00:56 - help you get through the first or second
00:58 - or you know first few rounds
00:59 - now why do i say that competitive
01:01 - programming helps you become a better
01:02 - problem solver
01:04 - well the problems in competitive
01:05 - programming have
01:07 - you know they're from beginner level to
01:09 - expert level so it challenges your mind
01:11 - to
01:12 - go from a problem that requires a
01:14 - certain level of complexity to a higher
01:16 - level of complexity
01:17 - and this progression from one problem to
01:19 - another to solving another problem to
01:21 - solving another problem
01:22 - keeps your you know uh your programming
01:25 - acts or your problem solving acts always
01:27 - sharp
01:28 - so it really keeps your mind engaged in
01:31 - solving new and new problems
01:32 - in competitive programming problems you
01:34 - need to engage your skills in not just
01:37 - programming
01:38 - but also your mathematical skills so in
01:40 - a particular problem
01:42 - you might use a data structure like a
01:44 - linked list or a queue
01:46 - from a programming site and you might
01:48 - also use
01:49 - permutations and combinations or in
01:51 - numeric analysis or any some other
01:53 - statistical method which comes from
01:54 - maths and stats
01:56 - so because you're using concepts from
01:58 - different fields and combining them
02:00 - it it's always a challenge to your mind
02:02 - and you're always
02:03 - engaged with learning something new so
02:06 - the areas of expertise that you need to
02:08 - gain
02:08 - and the variety of the problems from
02:11 - these areas
02:12 - of expertise makes competitive
02:14 - programming a vast landscape
02:16 - to learn from now another advantage of
02:18 - competitive programming is
02:19 - the mastery of data structures and
02:21 - algorithms that you will gain
02:22 - through competitive programming because
02:25 - without
02:26 - the solid knowledge of data structures
02:28 - you won't be able to solve
02:30 - competitive programming problems as a
02:32 - competitive programmer you will have to
02:34 - learn to manipulate
02:35 - common data structures like linked lists
02:37 - graphs trees
02:38 - and many more and not only just
02:41 - manipulate data structures you'll
02:42 - also sometimes have to make the choice
02:44 - of which data structure to use to solve
02:46 - a particular problem so
02:48 - this will give you the insight into you
02:50 - know how
02:51 - first number one being very comfortable
02:53 - manipulating data structures
02:55 - and number two also being used to
02:58 - using or choosing the right data
02:59 - structure for the problem
03:01 - now when you graduate to becoming a
03:03 - professional software developer
03:04 - then this skill can be very useful
03:07 - because
03:08 - you know more efficient algorithms and
03:11 - more efficient code means
03:13 - less resources that your program will
03:15 - consume and this
03:16 - in turn will lead to lots of cost
03:19 - savings when you know your code is
03:21 - deployed to a server in the cloud or
03:22 - when
03:23 - you are actually solving a business
03:25 - problem so this habit of
03:27 - always optimizing your solution and
03:29 - knowing and finding bottlenecks
03:32 - will definitely make you a better
03:34 - programmer in general
03:36 - now you you're a better problem solver
03:39 - and you also have a very good control of
03:42 - the data structures and algorithms that
03:44 - you need
03:45 - this will make you a faster programmer
03:47 - how how
03:48 - can i say that well imagine you're
03:51 - writing a piece of code and
03:53 - you know you already are habituated to
03:58 - similar patterns of code because of your
04:00 - competitive programming experience
04:01 - so instead of having to look for the
04:04 - solution every time
04:05 - online and looking for solutions that
04:06 - other people have posted
04:08 - you can just write the algorithm on your
04:10 - own because you've already experienced
04:13 - you know this similar pattern of problem
04:14 - before so this makes you a faster
04:16 - programmer and also
04:18 - because you will be exposing yourself to
04:22 - this
04:23 - timed environment where you have to
04:24 - solve problems within a certain time
04:26 - frame
04:27 - you will automatically learn to think
04:28 - quick and also type more quickly
04:30 - and also solve problems more quickly so
04:32 - it will definitely
04:34 - make you a faster programmer quick
04:36 - announcement guys we are doing a q a
04:37 - video next week
04:38 - so if you have any questions for the
04:40 - programming steam comment down below
04:41 - with the ask providence hashtag
04:43 - tomorrow is the last date for submission
04:45 - so hurry up back to the video
04:47 - another advantage of spending your time
04:50 - or investing your time in competitive
04:51 - programming is
04:52 - it will help you in job interviews
04:54 - because
04:56 - lots of companies in the world in fact
04:58 - most companies in the world
04:59 - still use data structures and algorithms
05:02 - and programming puzzles
05:03 - to rate developers on their skills if
05:06 - you are familiar
05:07 - to you know all these programming
05:08 - concepts and
05:10 - data structures and algorithms and the
05:12 - common patterns
05:14 - of that are used in competitive
05:15 - programming then you will be able to
05:17 - solve these problems with ease because
05:19 - many of these problems you'll have
05:20 - already seen before
05:21 - or if there's a problem that you have
05:23 - not seen before you will already have
05:25 - practiced
05:26 - a lot of similar problems so you will
05:28 - automatically be able to come up with
05:29 - the solution quicker
05:31 - so uh investing your time in competitive
05:34 - programming can
05:35 - definitely help you land your next job
05:37 - now let's talk a little bit about the
05:38 - other side of the story
05:40 - uh computer programming is great but if
05:42 - you want to really become a master
05:44 - competitive programmer
05:45 - then just you know practicing it is not
05:48 - enough
05:49 - you will also need to invest your time
05:51 - in learning high level mathematics
05:53 - now for some people it might
05:56 - feel like you know something that they
05:58 - don't want to get into or
05:59 - it's not worth their time personally i
06:02 - definitely recommend exploring
06:04 - a bit of competitive programming for all
06:06 - beginners because
06:07 - uh take it as a hobby you know like it
06:09 - might be some people watch netflix some
06:11 - people like playing video games
06:13 - so do it on the side explore it
06:16 - and learn some mathematics and
06:18 - statistics and
06:19 - data structures algorithms on the way
06:21 - now if you find that
06:23 - you know competitive programming is my
06:25 - calling i'm passionate about this
06:27 - then go to the next level invest more
06:30 - time in it
06:30 - otherwise you might find more interest
06:32 - in traditional
06:34 - software development or web development
06:35 - or mobile development so
06:37 - it's at the beginning of your career or
06:39 - when you're just learning programming
06:41 - i definitely suggest trying out
06:42 - competitive programming but again
06:44 - if you find that it does not interest
06:46 - you then you know
06:48 - there's no need to bang your head on the
06:51 - wall
06:52 - just because it does not interest you
06:54 - because i know a lot of
06:55 - programmers that have do have no
06:57 - background in
06:58 - competitive programming but then they
07:00 - are brilliant programmers
07:01 - so it's really a choice it's something
07:03 - that you should definitely explore
07:05 - and who knows you might be the next
07:07 - great competitive programmer
07:09 - stay curious and i'll see you in the
07:10 - next one
07:28 - you

Cleaned transcript:

today i want to talk a little bit about uh competitive programming so competitive programming is uh an online sport where people from all across the world come together to solve challenging programming problems and there's multiple platforms where you can learn competitive programming so there's lead code there's code chef there's code forces hacker rank and in all of these platforms the good news is that it's not just for the advanced computer programmers so there's a spectrum of problems from easy to medium to hard and there is a level for everybody now why spend time uh you know competitive programming in the first place there's lots of advantages to being involved in competitive programming first one being obviously it makes you a better problem solver it makes you it increases your knowledge of data structures and algorithms it makes you a faster programmer and it will also help you land your next job or it might at least help you get through the first or second or you know first few rounds now why do i say that competitive programming helps you become a better problem solver well the problems in competitive programming have you know they're from beginner level to expert level so it challenges your mind to go from a problem that requires a certain level of complexity to a higher level of complexity and this progression from one problem to another to solving another problem to solving another problem keeps your you know uh your programming acts or your problem solving acts always sharp so it really keeps your mind engaged in solving new and new problems in competitive programming problems you need to engage your skills in not just programming but also your mathematical skills so in a particular problem you might use a data structure like a linked list or a queue from a programming site and you might also use permutations and combinations or in numeric analysis or any some other statistical method which comes from maths and stats so because you're using concepts from different fields and combining them it it's always a challenge to your mind and you're always engaged with learning something new so the areas of expertise that you need to gain and the variety of the problems from these areas of expertise makes competitive programming a vast landscape to learn from now another advantage of competitive programming is the mastery of data structures and algorithms that you will gain through competitive programming because without the solid knowledge of data structures you won't be able to solve competitive programming problems as a competitive programmer you will have to learn to manipulate common data structures like linked lists graphs trees and many more and not only just manipulate data structures you'll also sometimes have to make the choice of which data structure to use to solve a particular problem so this will give you the insight into you know how first number one being very comfortable manipulating data structures and number two also being used to using or choosing the right data structure for the problem now when you graduate to becoming a professional software developer then this skill can be very useful because you know more efficient algorithms and more efficient code means less resources that your program will consume and this in turn will lead to lots of cost savings when you know your code is deployed to a server in the cloud or when you are actually solving a business problem so this habit of always optimizing your solution and knowing and finding bottlenecks will definitely make you a better programmer in general now you you're a better problem solver and you also have a very good control of the data structures and algorithms that you need this will make you a faster programmer how how can i say that well imagine you're writing a piece of code and you know you already are habituated to similar patterns of code because of your competitive programming experience so instead of having to look for the solution every time online and looking for solutions that other people have posted you can just write the algorithm on your own because you've already experienced you know this similar pattern of problem before so this makes you a faster programmer and also because you will be exposing yourself to this timed environment where you have to solve problems within a certain time frame you will automatically learn to think quick and also type more quickly and also solve problems more quickly so it will definitely make you a faster programmer quick announcement guys we are doing a q a video next week so if you have any questions for the programming steam comment down below with the ask providence hashtag tomorrow is the last date for submission so hurry up back to the video another advantage of spending your time or investing your time in competitive programming is it will help you in job interviews because lots of companies in the world in fact most companies in the world still use data structures and algorithms and programming puzzles to rate developers on their skills if you are familiar to you know all these programming concepts and data structures and algorithms and the common patterns of that are used in competitive programming then you will be able to solve these problems with ease because many of these problems you'll have already seen before or if there's a problem that you have not seen before you will already have practiced a lot of similar problems so you will automatically be able to come up with the solution quicker so uh investing your time in competitive programming can definitely help you land your next job now let's talk a little bit about the other side of the story uh computer programming is great but if you want to really become a master competitive programmer then just you know practicing it is not enough you will also need to invest your time in learning high level mathematics now for some people it might feel like you know something that they don't want to get into or it's not worth their time personally i definitely recommend exploring a bit of competitive programming for all beginners because uh take it as a hobby you know like it might be some people watch netflix some people like playing video games so do it on the side explore it and learn some mathematics and statistics and data structures algorithms on the way now if you find that you know competitive programming is my calling i'm passionate about this then go to the next level invest more time in it otherwise you might find more interest in traditional software development or web development or mobile development so it's at the beginning of your career or when you're just learning programming i definitely suggest trying out competitive programming but again if you find that it does not interest you then you know there's no need to bang your head on the wall just because it does not interest you because i know a lot of programmers that have do have no background in competitive programming but then they are brilliant programmers so it's really a choice it's something that you should definitely explore and who knows you might be the next great competitive programmer stay curious and i'll see you in the next one you
