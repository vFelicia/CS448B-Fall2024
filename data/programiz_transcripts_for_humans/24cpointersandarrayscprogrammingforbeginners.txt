With timestamps:

00:00 - hey guys welcome back to this series on
00:02 - c programming in the last video we
00:04 - learned about pointer sims here we
00:05 - learned about working with memory
00:07 - addresses now we will learn to use
00:09 - pointers to work with arrays so let's
00:11 - get started
00:16 - we know that an array is the collection
00:18 - of similar type of data you can see the
00:20 - example on the screen here numbers is an
00:23 - array that stores five elements and if
00:26 - we want to access these arrow elements
00:28 - we can use the array index that is to
00:31 - access the first element we use number
00:33 - bracket 0. similarly to access the
00:36 - second and third element we use number
00:38 - bracket 1 and number bracket 2. in this
00:41 - way we can access each element of the
00:44 - added
00:45 - now let's try to access these elements
00:47 - using pointers but first let's try to
00:50 - access the memory address where these
00:52 - array elements are stored so
00:55 - here we have our array of numbers and we
00:58 - are printing the array elements using
01:01 - printf statement
01:03 - inside the for loop
01:05 - now let's print the address of each
01:07 - element using the ampersand operator
01:09 - let's modify this print statement i'll
01:12 - add here percent
01:14 - b
01:16 - and here
01:17 - comma
01:19 - ampersand
01:20 - numbers
01:22 - bracket
01:24 - i
01:25 - i have used percent p format specifier
01:27 - to print the memory address
01:29 - and also i have used here ampersand
01:33 - number
01:34 - square bracket i to print the memory
01:36 - address of the ith element
01:38 - now let me run this code
01:41 - as you can see we get the corresponding
01:43 - address of each elements
01:46 - now let's see something interesting for
01:48 - that i'll print the address of array
01:51 - without any array index so i'll use
01:54 - printf statement
01:56 - print f
01:58 - here array
02:00 - address
02:04 - percent p
02:06 - comma
02:07 - numbers
02:10 - now let me run this code
02:13 - here if you look into the output you
02:15 - will notice two things
02:17 - first the difference between two memory
02:19 - addresses is four this is because the
02:21 - array is of integer type and size is of
02:24 - int is 4 byte
02:26 - second the memory address of the first
02:29 - array element and the address of the
02:32 - array is the same this is because the
02:34 - address of array always points to the
02:37 - first element of the array also here we
02:40 - have used only the name of the array
02:42 - without the ampersand sign this is
02:44 - because in most context array names are
02:47 - by default converted to pointers and we
02:50 - can directly use the name of the array
02:52 - so from now on if i use add name
02:54 - remember it's the pointer
02:57 - similarly we can use number plus 1
03:00 - to print the address of the second array
03:03 - element and we can use number plus 2 to
03:06 - print the address of third array element
03:11 - now let me show you that
03:13 - so what i'll do is i'll copy this and
03:15 - i'll paste it here
03:18 - and i'll modify this print statement to
03:20 - have a clear output so add a address of
03:24 - 1
03:26 - backspace n
03:29 - and i'll change this to numbers
03:32 - then add an address of
03:36 - 3
03:38 - here i'll add here
03:40 - backspace n
03:43 - and i'll change this to numbers plus 1
03:47 - and i'll change this to array address of
03:50 - 5
03:53 - and let's put this as it is
03:56 - now let me run this program
04:00 - as you can see this number gives the
04:02 - address of first element and numbers
04:05 - plus 1 gives the address of second
04:07 - element and numbers plus 2
04:10 - gives the address of third element
04:12 - in this way numbers plus i gives the
04:14 - address of ith element so we can
04:17 - implement this exact logic in a loop so
04:20 - i'll modify this code first i'll remove
04:23 - this print statement
04:25 - and in this print statement i'll modify
04:27 - this
04:28 - ampersand numbers
04:30 - bracket i to
04:32 - number plus i
04:34 - so
04:35 - number
04:37 - plus i
04:38 - now let me run this code
04:41 - as you can see we get the desired output
04:45 - by the way do you want to take your
04:46 - programming journey to the next level
04:49 - watching tutorials is fine but it has
04:51 - one limitation it is hard to learn and
04:53 - practice together at the same time lucky
04:56 - for you we have recently launched
04:57 - programmies pro that provides tutorials
05:00 - along with quizzes and challenges which
05:02 - will help you practice and test your
05:03 - learning in real time also the course
05:05 - includes projects to give you an
05:07 - experience of how programming works in
05:09 - real world sign up now visit this link
05:11 - which is also available in the video
05:13 - description below
05:16 - in our last example we saw that for an
05:19 - array numbers numbers is a pointer that
05:21 - gives the array of the first element
05:24 - similarly numbers plus i gives the
05:26 - address of the ith element now we can
05:28 - use this pointer to access the array
05:30 - elements to access the first element we
05:33 - can use asterix number similarly to
05:35 - access the eighth element we can use
05:38 - asterix parenthesis numbers plus i let
05:41 - me show you you can see the code from
05:43 - our earlier program
05:45 - here numbers plus i gives the address of
05:48 - the ith element since i want to use the
05:50 - pointer to access the element i'll
05:53 - remove this number bracket i from here
05:57 - instead i'll write asterisks parenthesis
06:01 - numbers
06:03 - plus
06:04 - i
06:05 - so this gives us the ith element now let
06:08 - me run this code as you can see number
06:10 - plus i gives the address of the id
06:12 - element and
06:14 - astrix parenthesis number plus i gives
06:17 - the value present at that number plus i
06:20 - address in this way we are able to
06:22 - access the address and value of an array
06:25 - using pointers okay guys we need your
06:27 - support to keep these types of content
06:30 - free for all users youtube really likes
06:32 - engagement on the video so leave a
06:33 - comment below press that like button hit
06:36 - subscribe if you haven't already let's
06:38 - get the engagement score higher so that
06:40 - more people can discover and enjoy these
06:42 - courses
06:45 - just like accessing the ad elements we
06:47 - can also change our elements using
06:49 - pointers all we have to do is assign a
06:52 - new value to the address let me show you
06:55 - here i have the code from our earlier
06:57 - program i'll remove this for loop
07:00 - now suppose i want to change
07:02 - the value of first element to 2 so i can
07:05 - simply write here asterix numbers is
07:08 - equals to 2.
07:10 - here astrix number represent the first
07:13 - element and i have assigned a new value
07:15 - to it also let's change the last value
07:18 - to 11 from 9 so that our array includes
07:21 - only prime number so i'll write here
07:25 - astrix
07:26 - parenthesis numbers
07:29 - plus
07:30 - here 0 1 2 3 4. so numbers plus 4 is
07:35 - equals to
07:37 - 11.
07:38 - here asterisks parenthesis
07:41 - numbers plus 4 represents the last
07:43 - element and i have assigned a new value
07:46 - to this address
07:48 - now to verify the value i changed or not
07:51 - let me print the first and last value so
07:53 - i'll use
07:54 - print statement
07:56 - here first
07:58 - element
08:00 - is percent
08:02 - d
08:03 - backspace n
08:04 - comma
08:06 - asterisk
08:07 - number
08:10 - and another print statement
08:12 - here it prints the last element
08:15 - here last element
08:18 - colon
08:20 - percent d
08:22 - comma
08:23 - asterisk
08:25 - parentheses
08:27 - numbers
08:28 - plus 4.
08:32 - now let me run this code
08:35 - as you can see the value of first and
08:37 - last elements are changed
08:42 - now to revise what you have learned in
08:44 - this program here is a programming tags
08:46 - for you create a program to find the
08:48 - largest element of an array first create
08:51 - an array with elements 34 12 21 54 and
08:54 - 48 then assign the first element to the
08:57 - array to a largest variable this time
08:59 - you should use a pointer instead run a
09:01 - loop to iterate through each add element
09:04 - in each iteration of the loop compare
09:06 - the largest variable with each element
09:08 - of the array using a pointer and if the
09:10 - largest element is smaller than the
09:12 - array element assign the an element to
09:14 - the largest variable again using
09:17 - pointers finally print the largest
09:19 - variable you'll find the answer to this
09:21 - question in our github repository and
09:23 - also if you want to revise this concept
09:26 - all these programs will be there as well
09:28 - i'll put the link in the video
09:29 - description below now that we have
09:31 - reached the end of this video it's time
09:33 - for programming squeeze in an array int
09:36 - as is bracket 5 what does aces represent
09:41 - comment your answer below see you in the
09:43 - next video happy programming
09:49 - [Music]
09:54 - you

Cleaned transcript:

hey guys welcome back to this series on c programming in the last video we learned about pointer sims here we learned about working with memory addresses now we will learn to use pointers to work with arrays so let's get started we know that an array is the collection of similar type of data you can see the example on the screen here numbers is an array that stores five elements and if we want to access these arrow elements we can use the array index that is to access the first element we use number bracket 0. similarly to access the second and third element we use number bracket 1 and number bracket 2. in this way we can access each element of the added now let's try to access these elements using pointers but first let's try to access the memory address where these array elements are stored so here we have our array of numbers and we are printing the array elements using printf statement inside the for loop now let's print the address of each element using the ampersand operator let's modify this print statement i'll add here percent b and here comma ampersand numbers bracket i i have used percent p format specifier to print the memory address and also i have used here ampersand number square bracket i to print the memory address of the ith element now let me run this code as you can see we get the corresponding address of each elements now let's see something interesting for that i'll print the address of array without any array index so i'll use printf statement print f here array address percent p comma numbers now let me run this code here if you look into the output you will notice two things first the difference between two memory addresses is four this is because the array is of integer type and size is of int is 4 byte second the memory address of the first array element and the address of the array is the same this is because the address of array always points to the first element of the array also here we have used only the name of the array without the ampersand sign this is because in most context array names are by default converted to pointers and we can directly use the name of the array so from now on if i use add name remember it's the pointer similarly we can use number plus 1 to print the address of the second array element and we can use number plus 2 to print the address of third array element now let me show you that so what i'll do is i'll copy this and i'll paste it here and i'll modify this print statement to have a clear output so add a address of 1 backspace n and i'll change this to numbers then add an address of 3 here i'll add here backspace n and i'll change this to numbers plus 1 and i'll change this to array address of 5 and let's put this as it is now let me run this program as you can see this number gives the address of first element and numbers plus 1 gives the address of second element and numbers plus 2 gives the address of third element in this way numbers plus i gives the address of ith element so we can implement this exact logic in a loop so i'll modify this code first i'll remove this print statement and in this print statement i'll modify this ampersand numbers bracket i to number plus i so number plus i now let me run this code as you can see we get the desired output by the way do you want to take your programming journey to the next level watching tutorials is fine but it has one limitation it is hard to learn and practice together at the same time lucky for you we have recently launched programmies pro that provides tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an experience of how programming works in real world sign up now visit this link which is also available in the video description below in our last example we saw that for an array numbers numbers is a pointer that gives the array of the first element similarly numbers plus i gives the address of the ith element now we can use this pointer to access the array elements to access the first element we can use asterix number similarly to access the eighth element we can use asterix parenthesis numbers plus i let me show you you can see the code from our earlier program here numbers plus i gives the address of the ith element since i want to use the pointer to access the element i'll remove this number bracket i from here instead i'll write asterisks parenthesis numbers plus i so this gives us the ith element now let me run this code as you can see number plus i gives the address of the id element and astrix parenthesis number plus i gives the value present at that number plus i address in this way we are able to access the address and value of an array using pointers okay guys we need your support to keep these types of content free for all users youtube really likes engagement on the video so leave a comment below press that like button hit subscribe if you haven't already let's get the engagement score higher so that more people can discover and enjoy these courses just like accessing the ad elements we can also change our elements using pointers all we have to do is assign a new value to the address let me show you here i have the code from our earlier program i'll remove this for loop now suppose i want to change the value of first element to 2 so i can simply write here asterix numbers is equals to 2. here astrix number represent the first element and i have assigned a new value to it also let's change the last value to 11 from 9 so that our array includes only prime number so i'll write here astrix parenthesis numbers plus here 0 1 2 3 4. so numbers plus 4 is equals to 11. here asterisks parenthesis numbers plus 4 represents the last element and i have assigned a new value to this address now to verify the value i changed or not let me print the first and last value so i'll use print statement here first element is percent d backspace n comma asterisk number and another print statement here it prints the last element here last element colon percent d comma asterisk parentheses numbers plus 4. now let me run this code as you can see the value of first and last elements are changed now to revise what you have learned in this program here is a programming tags for you create a program to find the largest element of an array first create an array with elements 34 12 21 54 and 48 then assign the first element to the array to a largest variable this time you should use a pointer instead run a loop to iterate through each add element in each iteration of the loop compare the largest variable with each element of the array using a pointer and if the largest element is smaller than the array element assign the an element to the largest variable again using pointers finally print the largest variable you'll find the answer to this question in our github repository and also if you want to revise this concept all these programs will be there as well i'll put the link in the video description below now that we have reached the end of this video it's time for programming squeeze in an array int as is bracket 5 what does aces represent comment your answer below see you in the next video happy programming you
