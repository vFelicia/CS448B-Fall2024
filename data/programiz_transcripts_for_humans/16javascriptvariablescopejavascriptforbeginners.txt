With timestamps:

00:00 - what's up guys i'm pony from programmers
00:01 - and welcome back to this series on
00:03 - javascript in this video we will learn
00:05 - about variable scope more specifically
00:07 - we will learn about the local and global
00:09 - scope so let's get started
00:14 - in computer programming variable scope
00:16 - defines availability of a variable in
00:18 - different regions of the program for
00:20 - example suppose we create a variable
00:23 - let number
00:25 - equals
00:26 - 5.
00:27 - now this variable is available anywhere
00:29 - in our program we can use it inside the
00:32 - console log like this so i can say
00:34 - console.log
00:36 - number
00:37 - and when i press run
00:39 - i get 5.
00:41 - as you can see the variable is
00:42 - accessible here the number variable is
00:45 - an example of a global variable in
00:47 - javascript a variable has two types of
00:49 - scope local scope and global scope let's
00:52 - learn about the local scope first
00:56 - to understand the working of local scope
00:58 - let's see an example of a function
01:00 - so i'll remove this old code and let me
01:02 - quickly create an add numbers function
01:05 - so n1 n2
01:07 - and let result equals i want to add n1
01:11 - and n2 and i want to
01:13 - for now console log the result
01:17 - now let me call the add numbers function
01:20 - with 4 and 9
01:23 - i'll quickly press run and check the
01:25 - output and i can see that it's working
01:28 - now let me print the result variable
01:29 - outside of the function
01:31 - so here i'll try to say console.log
01:34 - and result
01:35 - and let's see what happens when i press
01:37 - run
01:39 - you can see that i get a reference error
01:41 - result is not defined
01:44 - this is because the result variable is
01:46 - created inside of the function add
01:48 - numbers
01:49 - on line 2
01:50 - and that's why it has a local scope that
01:53 - means the result variable can only be
01:55 - used inside the add numbers function and
01:57 - not outside of it because it has no
01:59 - existence outside of the function
02:01 - now if i create a result variable
02:03 - outside of the function the print
02:05 - statement will take that variable value
02:07 - and not the one inside the function so
02:10 - let me say let
02:11 - result equals say random number like one
02:14 - two three and now when i press run
02:17 - this time i didn't get any error because
02:20 - here i've created a result variable with
02:22 - the value one two three
02:24 - now when i call the add numbers function
02:26 - the control goes to the function and
02:28 - again inside the scope the result local
02:30 - variable is created which is different
02:32 - from this result global variable now
02:35 - inside the function when i do
02:36 - console.log it gives me the sum of n1
02:38 - and n2 which is 13
02:40 - after that the control goes back to the
02:42 - program and when i do console.log result
02:45 - this result actually points to the
02:46 - global variable result which i have
02:48 - created here and that's what gets
02:50 - printed here
02:52 - if you're enjoying this video please
02:53 - also check out programs pro where we
02:55 - provide tutorials along with quizzes and
02:58 - challenges which will help you practice
02:59 - and test your learning in real time also
03:01 - the course includes projects to give you
03:03 - an awesome experience of how programming
03:05 - works in the real world and for our
03:06 - youtube subscribers we are giving 50 off
03:09 - on the yearly plan sign up by scanning
03:10 - this qr code or use the link in the
03:12 - video description to claim your discount
03:15 - as we saw earlier local variables cannot
03:18 - be accessed outside of a function on my
03:20 - screen i have code that we have seen
03:22 - before we know that this code will
03:24 - generate an error because result is a
03:26 - local variable and i am trying to access
03:29 - it in the global scope we can solve this
03:32 - problem by making the result variable
03:34 - global for this we can declare the
03:36 - result variable outside of the function
03:39 - so
03:40 - outside of the function i'll say let
03:42 - result
03:43 - and i'll remove this let
03:47 - and now if i run this code
03:49 - you can see that my code works
03:52 - this is because
03:53 - inside the function when i say result
03:55 - equals n1 plus n2 it changes the value
03:58 - of the global variable and the console
04:00 - log2 because it cannot find any local
04:02 - variable of the name result it looks in
04:04 - the global scope finds this variable and
04:07 - prints that value
04:08 - and after the function is over again
04:10 - console.log
04:12 - finds this global scope result variable
04:14 - and prints that once again that's why we
04:16 - have two 13s
04:18 - global variables are tricky because
04:20 - their values can be changed anywhere in
04:22 - the program i'll show you an example let
04:24 - me start by declaring a global variable
04:26 - message with the value hello so i can
04:28 - say let
04:30 - message equals
04:33 - hello
04:35 - now i'll create a function to change the
04:36 - value of the message to how are you so
04:39 - let me create change
04:41 - greeting
04:42 - and inside i'll say message equals
04:45 - how
04:47 - are you
04:48 - now to show that the value is indeed
04:50 - being changed let me print the value of
04:52 - the message variable before calling this
04:54 - change greeting function and after it
04:57 - so
04:58 - i'll say
05:00 - console.log
05:02 - message
05:04 - and then let me call the change greeting
05:07 - function and in the next line i can say
05:09 - console.log
05:11 - oops
05:12 - message again
05:14 - let me run this code and as you can see
05:17 - we get the output hello and how are you
05:19 - let's see what's happening in this code
05:21 - at first the value of the message
05:23 - variable
05:24 - is the string value hello then inside
05:26 - the change grading function we are
05:28 - reassigning its value to how are you
05:31 - when the first console log is reached
05:33 - this function hasn't been called yet and
05:35 - the message variable stores the value
05:37 - hello and that's what we get in the
05:39 - output
05:41 - now when the change greeting function is
05:43 - called inside this function i have
05:45 - changed the global value of the value of
05:47 - the global variable message to how are
05:49 - you
05:50 - and that's why when i called console log
05:52 - message again because now message
05:54 - contents how are you i get how are you
05:56 - here
05:57 - remember it's a good practice to avoid
05:59 - using global variables as much as you
06:01 - can because the value of a global
06:02 - variable can change in different areas
06:04 - in the program and it can introduce
06:06 - unknown results and create a lot of
06:08 - confusion
06:09 - okay guys we need your support to keep
06:11 - these kinds of content free for all
06:12 - users youtube really likes engagement on
06:14 - the video so leave a comment below press
06:16 - that like button and hit subscribe if
06:18 - you haven't already let's get the
06:19 - engagement score high up so that more
06:21 - people can discover and enjoy these
06:23 - courses
06:25 - besides global and local scope
06:27 - javascript also provides block scope the
06:29 - block scope restricts the variable to be
06:31 - accessed only inside a block let's see
06:34 - an example i'll go back to my previous
06:36 - code of adding two numbers so let me
06:39 - quickly create this time i'll use
06:41 - arrow functions which you have learned
06:42 - in the last lecture so n1
06:46 - n2
06:47 - and arrow
06:49 - and inside let me say let result equals
06:52 - n1 plus n2
06:55 - and then i'll say console.log
06:58 - result
07:00 - then let me call add numbers with 4 and
07:05 - 9. so this was my previous code
07:07 - now i will create an if statement with
07:09 - the condition that if the result is
07:11 - greater than 10 i will create another
07:13 - variable let's say result one and i'll
07:15 - try to print that variable so inside
07:18 - this code what i'll say is
07:20 - if
07:22 - result greater than 10
07:25 - then let
07:26 - result one equals
07:29 - positive
07:31 - and console.log
07:33 - result 1 to print it out
07:36 - now let me run this program
07:38 - as you can see the sum of the numbers is
07:40 - 13 which is obviously greater than 10
07:42 - and the value of the result one variable
07:44 - which is positive is displayed on the
07:46 - screen now let me try to access the
07:48 - result1 variable outside of the if block
07:51 - so
07:52 - i'll try to say console.log
07:56 - result1 and press run
08:01 - and you can see that i get the same old
08:03 - error reference error result one is not
08:05 - defined
08:06 - block scope variables are very useful
08:08 - since they allow us to create temporary
08:09 - variables which we only need to define
08:11 - and use inside a block and that makes
08:14 - our logic much more cleaner now that
08:16 - we've reached the end of this video it's
08:17 - time for the programming quiz what is
08:20 - the output of this program
08:23 - comment answer below and if you want to
08:25 - revise this lesson you can find all the
08:27 - programs in our github repository i'll
08:28 - also put the link in the video
08:30 - description below happy programming
08:32 - [Music]
08:41 - you

Cleaned transcript:

what's up guys i'm pony from programmers and welcome back to this series on javascript in this video we will learn about variable scope more specifically we will learn about the local and global scope so let's get started in computer programming variable scope defines availability of a variable in different regions of the program for example suppose we create a variable let number equals 5. now this variable is available anywhere in our program we can use it inside the console log like this so i can say console.log number and when i press run i get 5. as you can see the variable is accessible here the number variable is an example of a global variable in javascript a variable has two types of scope local scope and global scope let's learn about the local scope first to understand the working of local scope let's see an example of a function so i'll remove this old code and let me quickly create an add numbers function so n1 n2 and let result equals i want to add n1 and n2 and i want to for now console log the result now let me call the add numbers function with 4 and 9 i'll quickly press run and check the output and i can see that it's working now let me print the result variable outside of the function so here i'll try to say console.log and result and let's see what happens when i press run you can see that i get a reference error result is not defined this is because the result variable is created inside of the function add numbers on line 2 and that's why it has a local scope that means the result variable can only be used inside the add numbers function and not outside of it because it has no existence outside of the function now if i create a result variable outside of the function the print statement will take that variable value and not the one inside the function so let me say let result equals say random number like one two three and now when i press run this time i didn't get any error because here i've created a result variable with the value one two three now when i call the add numbers function the control goes to the function and again inside the scope the result local variable is created which is different from this result global variable now inside the function when i do console.log it gives me the sum of n1 and n2 which is 13 after that the control goes back to the program and when i do console.log result this result actually points to the global variable result which i have created here and that's what gets printed here if you're enjoying this video please also check out programs pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount as we saw earlier local variables cannot be accessed outside of a function on my screen i have code that we have seen before we know that this code will generate an error because result is a local variable and i am trying to access it in the global scope we can solve this problem by making the result variable global for this we can declare the result variable outside of the function so outside of the function i'll say let result and i'll remove this let and now if i run this code you can see that my code works this is because inside the function when i say result equals n1 plus n2 it changes the value of the global variable and the console log2 because it cannot find any local variable of the name result it looks in the global scope finds this variable and prints that value and after the function is over again console.log finds this global scope result variable and prints that once again that's why we have two 13s global variables are tricky because their values can be changed anywhere in the program i'll show you an example let me start by declaring a global variable message with the value hello so i can say let message equals hello now i'll create a function to change the value of the message to how are you so let me create change greeting and inside i'll say message equals how are you now to show that the value is indeed being changed let me print the value of the message variable before calling this change greeting function and after it so i'll say console.log message and then let me call the change greeting function and in the next line i can say console.log oops message again let me run this code and as you can see we get the output hello and how are you let's see what's happening in this code at first the value of the message variable is the string value hello then inside the change grading function we are reassigning its value to how are you when the first console log is reached this function hasn't been called yet and the message variable stores the value hello and that's what we get in the output now when the change greeting function is called inside this function i have changed the global value of the value of the global variable message to how are you and that's why when i called console log message again because now message contents how are you i get how are you here remember it's a good practice to avoid using global variables as much as you can because the value of a global variable can change in different areas in the program and it can introduce unknown results and create a lot of confusion okay guys we need your support to keep these kinds of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses besides global and local scope javascript also provides block scope the block scope restricts the variable to be accessed only inside a block let's see an example i'll go back to my previous code of adding two numbers so let me quickly create this time i'll use arrow functions which you have learned in the last lecture so n1 n2 and arrow and inside let me say let result equals n1 plus n2 and then i'll say console.log result then let me call add numbers with 4 and 9. so this was my previous code now i will create an if statement with the condition that if the result is greater than 10 i will create another variable let's say result one and i'll try to print that variable so inside this code what i'll say is if result greater than 10 then let result one equals positive and console.log result 1 to print it out now let me run this program as you can see the sum of the numbers is 13 which is obviously greater than 10 and the value of the result one variable which is positive is displayed on the screen now let me try to access the result1 variable outside of the if block so i'll try to say console.log result1 and press run and you can see that i get the same old error reference error result one is not defined block scope variables are very useful since they allow us to create temporary variables which we only need to define and use inside a block and that makes our logic much more cleaner now that we've reached the end of this video it's time for the programming quiz what is the output of this program comment answer below and if you want to revise this lesson you can find all the programs in our github repository i'll also put the link in the video description below happy programming you
