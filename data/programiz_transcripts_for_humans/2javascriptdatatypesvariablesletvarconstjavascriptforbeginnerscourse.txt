With timestamps:

00:00 - what's up guys welcome back to this
00:01 - series on javascript in this video we
00:03 - will learn about two different types of
00:05 - data text and numbers that are commonly
00:07 - used in programming we will first see
00:09 - how we can print these data then we will
00:12 - learn a concept called variables which
00:14 - allows us to store these data and work
00:15 - with them it's going to be an
00:17 - interesting video so let's get started
00:26 - let's talk about textual data first in
00:28 - programming texts are termed as strings
00:31 - strings represent the textual data and
00:33 - from now on when i say string remember
00:36 - that i am talking about text in
00:37 - javascript we use quotation marks to
00:39 - represent strings
00:41 - here i love javascript is a string
00:43 - similarly javascript is fun is also a
00:46 - string we can use either single quotes
00:49 - or double quotes to represent strings it
00:51 - doesn't really matter however we cannot
00:53 - mismatch codes like using double quotes
00:55 - at the beginning and single quotes at
00:57 - the end now let's see strings in
00:59 - javascript code i'm going to print
01:00 - strings using the console.log method so
01:03 - here on my compiler i'll say console.log
01:07 - i love
01:08 - javascript
01:10 - similarly on the next line i'll say
01:12 - console.log
01:15 - javascript
01:16 - is fun
01:19 - now let me run this code
01:23 - as you can see the text i love
01:24 - javascript
01:26 - and javascript is fun
01:29 - are printed to the screen
01:31 - in this program whatever is inside the
01:33 - codes either single or double is treated
01:36 - as a string but remember the code should
01:38 - be of the same type you cannot start the
01:40 - string with a double quote
01:42 - and end with a single code
01:45 - you also cannot start with a single
01:47 - quote and end with a double quote i'll
01:49 - show you when i try to run this program
01:52 - i get an error in 2015 a new version of
01:55 - javascript was introduced known as es6
01:58 - it introduced a new way to denote
02:00 - strings using template literals template
02:03 - literals use the tick mark let's see how
02:05 - we can use tick marks in a code so i'll
02:07 - remove this old code
02:10 - and i'll say console dot log
02:12 - and then instead of single quote or
02:14 - double quote i'll use this tick
02:16 - and i can say i love
02:18 - javascript
02:20 - let me do the second line console.log
02:23 - tick
02:24 - javascript
02:26 - is fun
02:28 - now when i press the run button
02:31 - i get the same output as before that
02:33 - means both of these are valid strings
02:38 - also one quick reminder the semicolon at
02:41 - the end of statements in javascript is
02:42 - optional you can decide to use it or
02:45 - omit it however follow a consistent
02:47 - pattern throughout the project if you're
02:49 - using semicolons use them throughout the
02:51 - program if not don't use them in your
02:53 - program
02:54 - so here i can remove both semicolons and
02:57 - when i press run my code will still run
03:04 - another data type that is commonly used
03:06 - in javascript is the numeric data and
03:09 - there are two commonly used numeric data
03:10 - types in javascript integers and floats
03:13 - the difference between integer and float
03:15 - is that integer is a whole number and
03:17 - float is a decimal
03:19 - we can use the same console.log method
03:21 - to print integers and floats as well
03:23 - let's see an example quickly so i'll
03:25 - remove the old code and i'll say
03:27 - console.log
03:29 - 8.
03:30 - similarly in the next line i'll say
03:32 - console.log
03:34 - 80.5
03:37 - and now when i press run
03:39 - you can see that 8 and 80.5 were printed
03:42 - on the screen
03:44 - notice that i have not used quotation
03:45 - marks with numbers
03:50 - this is because if you use quotations
03:52 - with number
03:53 - the number will actually be a string
03:56 - here i can surround these numbers with
03:58 - quotation marks
04:03 - and when i press run
04:04 - although i get the same visual output
04:07 - these are actually strings for
04:09 - javascript
04:10 - if you're enjoying this video please
04:12 - also check out programming pro where we
04:14 - provide tutorials along with quizzes and
04:16 - challenges which will help you practice
04:18 - and test your learning in real time also
04:20 - the course includes projects to give you
04:21 - an awesome experience of how programming
04:23 - works in the real world and for our
04:25 - youtube subscribers we are giving 50 off
04:27 - on the yearly plan sign up by scanning
04:29 - this qr code or use the link in the
04:30 - video description to claim your discount
04:35 - till now we learned about strings and
04:37 - numbers and how to print them
04:39 - in real case scenarios we may need to
04:41 - store and use this data in our program
04:43 - and not just print them to store data
04:46 - and use them later in our program we use
04:48 - something called variables before
04:50 - explaining more about variables let me
04:52 - first give you an example
04:54 - i'll remove this old code and i'll say
04:56 - let
04:57 - language equals
04:59 - javascript
05:03 - here we have used let
05:06 - to create a variable language and it has
05:09 - the string data javascript
05:12 - to store data in a variable we are using
05:14 - the equal operator or the assignment
05:16 - operator
05:17 - now instead of printing the string i can
05:19 - print the variable and get the string as
05:22 - output
05:23 - so here i'll say console.log
05:27 - and language semicolon
05:29 - now when i press run
05:31 - you can see that javascript got printed
05:34 - remember this when we print a variable
05:36 - inside console.log it shouldn't be
05:38 - enclosed inside the quotation marks
05:40 - because if we print the variable name
05:42 - inside the quotation marks it is printed
05:44 - as a string let me show you i will add
05:47 - quotation marks around this language
05:48 - variable and when i press run this time
05:52 - i got language which is the string
05:54 - language instead of javascript which is
05:56 - the value of the variable language
06:00 - we can also assign numeric data to
06:02 - variables in a similar way we assign
06:03 - strings to variables let's take a look
06:06 - i'll remove this old code and i'll say
06:08 - let number
06:10 - equals 5
06:12 - and then let me try to print it so
06:14 - console.log number semicolon and now
06:17 - when i press run
06:19 - you can see that the variable number has
06:21 - the value 5.
06:24 - another way to declare variables is
06:25 - using the keyword var let me show you so
06:28 - let me remove this old code i'll say
06:30 - where name
06:33 - jack
06:34 - similarly on the next line let me print
06:37 - out the name so i'll say console.log
06:39 - name
06:40 - and when i press run
06:43 - then the code runs without any error
06:45 - in modern javascript we rarely use where
06:48 - to declare variables however some
06:50 - browsers might still use wire so don't
06:52 - get confused if you see var somewhere in
06:54 - the code remember that it is a variable
06:56 - declaration we will discuss the
06:58 - advantages of using let overwear in
07:00 - later videos we now know that variables
07:03 - are used to store data but what if we
07:05 - want to store different data in the
07:07 - variable
07:08 - don't worry you can simply assign new
07:10 - data to the variable let me show you an
07:12 - example so i'll remove this old code and
07:14 - i'll say let name
07:16 - equals
07:17 - punit which is my name
07:19 - and in the next line i'll say
07:21 - console.log
07:22 - name
07:24 - here the name variable stores the string
07:26 - data punit
07:29 - and that's why when i run the code
07:31 - i get punit as the output
07:34 - now i'll assign a new value to the name
07:36 - variable
07:38 - so
07:38 - in the next line i'll say name equals
07:42 - james
07:43 - and let me
07:45 - say console.log name again
07:48 - i'll run this code
07:51 - and as you can see i get punit and james
07:54 - as output
07:55 - let's see what's happened here initially
07:57 - the value of name was punit
08:01 - and that's why this line console.log
08:03 - name printed punit
08:06 - later we change the value of name to
08:08 - james
08:09 - and that's why when the code reached
08:11 - line 5 when we tried to print name
08:14 - since the latest value of the name
08:15 - variable was james we got james as the
08:18 - output
08:19 - as you can see we can change the value
08:21 - of a variable which is why they are
08:22 - called variables hope that makes sense
08:25 - so far we saw that we can assign data
08:27 - directly to a variable however we can
08:30 - also assign a value of one variable to
08:32 - another let me show you an example so
08:34 - let me remove this old code and i'll
08:36 - select name
08:38 - equals
08:39 - punit
08:42 - let
08:43 - surname
08:44 - equals jazodia which is my surname
08:48 - here i have created two variables name
08:51 - which has the value punit
08:53 - and surname which has the value jazodia
08:57 - as you can see both the variables have
08:59 - different values
09:00 - now i'll assign the surname variable to
09:02 - the name variable and print the name
09:04 - variable
09:06 - so here on line four i can say name
09:08 - equals
09:10 - surname
09:11 - and let me try to print the value of
09:13 - name
09:16 - let me run this code
09:18 - and you can see that we got jajudi as
09:20 - output this is because in this line
09:23 - the value of name
09:26 - is assigned the value of surname which
09:28 - is jojoda
09:31 - so far we have learnt about let and
09:33 - where to create variables however there
09:35 - is also another way to create a variable
09:37 - and that is using const const is
09:40 - generally used to create variables whose
09:42 - values remain constant throughout the
09:44 - program
09:45 - consider a scenario where we want to
09:46 - create a variable that stores the
09:48 - passport number of a citizen
09:50 - since we know the passport number will
09:52 - remain the same all the time we can
09:54 - create the variable as const let's see
09:56 - how we can create variables using const
09:58 - i'll remove this old code and i'll say
10:01 - const
10:02 - passport number
10:04 - equals
10:07 - 39983 which is just random number that
10:09 - came across my mind and let me print
10:12 - that first
10:16 - here we have created a variable using
10:18 - const when we run this code
10:22 - we get 39983 as output
10:25 - you can see that creating a variable
10:26 - using const look quite similar to
10:28 - creating the variable using let however
10:31 - if you create variables using const we
10:33 - cannot change its value later in the
10:35 - program
10:36 - let's see what happens if we try to
10:38 - change the value of this const variable
10:40 - let me assign a new value to the
10:41 - passport number variable or at least try
10:43 - to do that
10:44 - so on next line i'll say passport number
10:49 - equals 44325
10:52 - oops it should be equals
10:54 - 44325
10:57 - and let me try to print out the new
10:58 - value of the passport number
11:04 - now let's run this code and see what
11:06 - will be the output
11:09 - you can see that it says type error
11:11 - assignment to constant variable
11:13 - this is because once you declare a
11:15 - variable using const you cannot change
11:17 - it
11:18 - okay guys we need your support to keep
11:20 - this kind of content free for all users
11:22 - youtube really likes engagement on the
11:24 - video so leave a comment below press
11:26 - that like button and hit subscribe if
11:28 - you haven't already let's get the
11:29 - engagement score high up so that more
11:31 - people can discover and enjoy these
11:33 - courses
11:36 - so far we have been assigning some value
11:38 - to a variable however if we declare a
11:41 - variable and don't provide any value
11:43 - then what will be the value of the
11:44 - variable
11:45 - let's try an example
11:47 - here on my compiler
11:50 - i will create a variable
11:52 - name
11:53 - and simply print the variable without
11:55 - assigning any value
11:56 - so i'll say console.log
11:59 - name
12:00 - and let me run the code
12:02 - here we can see undefined as the output
12:06 - whenever we create a variable without
12:07 - any value the variable is assigned with
12:10 - the value undefined
12:12 - however if we create a variable using
12:15 - const we need to provide some value to
12:17 - it we cannot use the const to declare
12:20 - the variable without assigning any value
12:22 - to it
12:23 - let's see what happens if you try to do
12:25 - that so i'll remove this old code i'll
12:27 - say const name and let me try to print
12:30 - the value of name
12:33 - if i press run
12:35 - then javascript throws an error it says
12:37 - missing initializer in const declaration
12:40 - which means that this is not allowed
12:43 - we can also explicitly assign undefined
12:45 - to a variable let's see an example i'll
12:48 - remove this old code and i'll say let
12:50 - name equals punit
12:54 - so let me first try to print it out
12:57 - now in the next line i'll say name
12:59 - equals
13:01 - undefined
13:03 - and in the next line let me try to see
13:05 - if that was successful or not
13:08 - you can see that the undefined does not
13:10 - have quotation marks before and after it
13:13 - that means it's not a string
13:15 - when i press run
13:16 - you can see that i have been successful
13:18 - in assigning the value undefined to the
13:20 - variable name
13:26 - previously we saw examples of printing
13:28 - variables and strings separately however
13:30 - we can also print them together in a
13:32 - single line let's see an example i'll
13:35 - first create a variable named city
13:37 - and give it the value new york so i can
13:40 - say let city
13:42 - equals
13:43 - new york
13:45 - now i'll use console.log to print the
13:47 - string city and the variable city
13:49 - together so i can say console.log
13:54 - city
13:57 - plus
13:58 - city
14:00 - let me run the code
14:02 - and you can see that city new york was
14:04 - printed
14:06 - here the plus operator
14:09 - joins the string city
14:11 - with the value of the variable city
14:13 - which is new york and that's why we got
14:15 - city new york here
14:18 - another way to print the string and
14:19 - variable together is using template
14:21 - literals let me modify this code i'll
14:24 - remove the second console.log statement
14:26 - and add the new print statement with
14:28 - template literals so i'll say
14:30 - console.log
14:33 - city
14:34 - and then i can say dollar
14:36 - curly braces
14:38 - city
14:40 - and now when i press run
14:41 - let me put a semicolon here just for
14:43 - consistency when i press run
14:45 - i get the same value as before
14:48 - let's see what's happening in this code
14:51 - here both the string and variable are
14:53 - stored inside the tick mark
14:55 - and instead of using the plus sign i
14:57 - have enclosed the variable inside dollar
15:00 - and curly braces
15:01 - you can also see that my compilers
15:05 - color coding clearly separated this out
15:07 - to show that this is a variable
15:10 - let's see another example i'll remove
15:12 - this old code
15:14 - in fact i'll only remove the console log
15:16 - and i'll say let kfc
15:19 - locations
15:21 - equals 10
15:23 - that means there's 10 kfcs in new york
15:26 - which i don't know is true or not it's
15:28 - just random guess so i'll say
15:30 - console.log
15:32 - city
15:34 - plus
15:35 - city
15:36 - plus
15:38 - comma
15:40 - plus
15:41 - k
15:43 - k fc
15:45 - locations
15:49 - plus kfc
15:50 - locations
15:52 - let me run this code
15:56 - and it says city new york kfc locations
15:58 - 10 i can make this format a bit better
16:01 - and let me add a comp space
16:04 - here as well okay when i press run you
16:06 - can see that city new york kfc locations
16:08 - 10 was printed here i have used plus to
16:11 - print strings and variables together
16:13 - let's use template literals now i'll
16:15 - start with the same code but i'll
16:16 - replace this console log with the new
16:18 - console.log statement using template
16:20 - string
16:21 - so here let me replace this with
16:24 - ticks at the end and in the beginning i
16:26 - don't need this i don't need this plus
16:28 - as well and since i want to print the
16:30 - value of the variable city i'll say
16:32 - dollar curly braces
16:34 - similarly i don't need all of this
16:37 - i can just put the comma
16:39 - and then kfc locations
16:45 - i want this so
16:48 - i will just put again because i want to
16:50 - print the value of the variable kfc
16:52 - locations here so i'll put this inside
16:55 - dollar and curly braces
16:57 - when i press run now
16:59 - i get the same output as before but you
17:02 - can see that this is much more readable
17:04 - than before in fact i just want to put a
17:06 - space here it's easy as this and when i
17:09 - press run
17:10 - the space is now here
17:16 - at this point we have covered all the
17:18 - basics of variables let's now talk about
17:20 - how to choose a good variable name
17:22 - if you have noticed in our programs we
17:24 - have used descriptive variable names
17:25 - like city and kfc locations
17:28 - we can give variable names like c
17:30 - instead of city
17:32 - and the program will still work
17:35 - and we can also use kl instead of kfc
17:38 - locations and the program will still
17:40 - work
17:44 - however it's hard to understand what c
17:46 - means just by looking at the code when
17:49 - we use good descriptive variable names
17:51 - it becomes easier to understand the code
17:53 - to make variable names descriptive we
17:56 - may need to use names having more than
17:57 - one word
17:58 - we will follow the camel case format
18:00 - while giving names to our variables in
18:02 - camel case the first word will be of
18:05 - small letters and the first letter of
18:06 - the second word will be of capital
18:08 - letter just like kfc locations in my
18:11 - code
18:11 - other examples of camel case variable
18:13 - names are first name second name my age
18:17 - total distance
18:19 - by the way there are some rules you need
18:21 - to know while creating a variable number
18:23 - one you cannot create variable names
18:25 - with space in between
18:27 - number two you cannot start variable
18:29 - names with numbers
18:31 - number three you cannot use certain
18:32 - words as variable names you cannot use
18:35 - if as a variable name because if is a
18:37 - keyword
18:38 - these keywords have special meaning in
18:40 - javascript and are part of the
18:42 - javascript syntax we will learn about
18:44 - these keywords as we progress through
18:46 - the course
18:47 - now that we've reached the end of the
18:48 - video it's time for the programming quiz
18:51 - the question for you is which of the
18:53 - following is a valid variable name
18:55 - number one switch number number two one
18:59 - switch number number three switch space
19:02 - number number four switch
19:05 - comment to answer below and if you want
19:07 - to revise these concepts you can find
19:09 - all the programs in our github
19:10 - repository i'll put the link in the
19:12 - video description below happy
19:13 - programming
19:17 - [Music]

Cleaned transcript:

what's up guys welcome back to this series on javascript in this video we will learn about two different types of data text and numbers that are commonly used in programming we will first see how we can print these data then we will learn a concept called variables which allows us to store these data and work with them it's going to be an interesting video so let's get started let's talk about textual data first in programming texts are termed as strings strings represent the textual data and from now on when i say string remember that i am talking about text in javascript we use quotation marks to represent strings here i love javascript is a string similarly javascript is fun is also a string we can use either single quotes or double quotes to represent strings it doesn't really matter however we cannot mismatch codes like using double quotes at the beginning and single quotes at the end now let's see strings in javascript code i'm going to print strings using the console.log method so here on my compiler i'll say console.log i love javascript similarly on the next line i'll say console.log javascript is fun now let me run this code as you can see the text i love javascript and javascript is fun are printed to the screen in this program whatever is inside the codes either single or double is treated as a string but remember the code should be of the same type you cannot start the string with a double quote and end with a single code you also cannot start with a single quote and end with a double quote i'll show you when i try to run this program i get an error in 2015 a new version of javascript was introduced known as es6 it introduced a new way to denote strings using template literals template literals use the tick mark let's see how we can use tick marks in a code so i'll remove this old code and i'll say console dot log and then instead of single quote or double quote i'll use this tick and i can say i love javascript let me do the second line console.log tick javascript is fun now when i press the run button i get the same output as before that means both of these are valid strings also one quick reminder the semicolon at the end of statements in javascript is optional you can decide to use it or omit it however follow a consistent pattern throughout the project if you're using semicolons use them throughout the program if not don't use them in your program so here i can remove both semicolons and when i press run my code will still run another data type that is commonly used in javascript is the numeric data and there are two commonly used numeric data types in javascript integers and floats the difference between integer and float is that integer is a whole number and float is a decimal we can use the same console.log method to print integers and floats as well let's see an example quickly so i'll remove the old code and i'll say console.log 8. similarly in the next line i'll say console.log 80.5 and now when i press run you can see that 8 and 80.5 were printed on the screen notice that i have not used quotation marks with numbers this is because if you use quotations with number the number will actually be a string here i can surround these numbers with quotation marks and when i press run although i get the same visual output these are actually strings for javascript if you're enjoying this video please also check out programming pro where we provide tutorials along with quizzes and challenges which will help you practice and test your learning in real time also the course includes projects to give you an awesome experience of how programming works in the real world and for our youtube subscribers we are giving 50 off on the yearly plan sign up by scanning this qr code or use the link in the video description to claim your discount till now we learned about strings and numbers and how to print them in real case scenarios we may need to store and use this data in our program and not just print them to store data and use them later in our program we use something called variables before explaining more about variables let me first give you an example i'll remove this old code and i'll say let language equals javascript here we have used let to create a variable language and it has the string data javascript to store data in a variable we are using the equal operator or the assignment operator now instead of printing the string i can print the variable and get the string as output so here i'll say console.log and language semicolon now when i press run you can see that javascript got printed remember this when we print a variable inside console.log it shouldn't be enclosed inside the quotation marks because if we print the variable name inside the quotation marks it is printed as a string let me show you i will add quotation marks around this language variable and when i press run this time i got language which is the string language instead of javascript which is the value of the variable language we can also assign numeric data to variables in a similar way we assign strings to variables let's take a look i'll remove this old code and i'll say let number equals 5 and then let me try to print it so console.log number semicolon and now when i press run you can see that the variable number has the value 5. another way to declare variables is using the keyword var let me show you so let me remove this old code i'll say where name jack similarly on the next line let me print out the name so i'll say console.log name and when i press run then the code runs without any error in modern javascript we rarely use where to declare variables however some browsers might still use wire so don't get confused if you see var somewhere in the code remember that it is a variable declaration we will discuss the advantages of using let overwear in later videos we now know that variables are used to store data but what if we want to store different data in the variable don't worry you can simply assign new data to the variable let me show you an example so i'll remove this old code and i'll say let name equals punit which is my name and in the next line i'll say console.log name here the name variable stores the string data punit and that's why when i run the code i get punit as the output now i'll assign a new value to the name variable so in the next line i'll say name equals james and let me say console.log name again i'll run this code and as you can see i get punit and james as output let's see what's happened here initially the value of name was punit and that's why this line console.log name printed punit later we change the value of name to james and that's why when the code reached line 5 when we tried to print name since the latest value of the name variable was james we got james as the output as you can see we can change the value of a variable which is why they are called variables hope that makes sense so far we saw that we can assign data directly to a variable however we can also assign a value of one variable to another let me show you an example so let me remove this old code and i'll select name equals punit let surname equals jazodia which is my surname here i have created two variables name which has the value punit and surname which has the value jazodia as you can see both the variables have different values now i'll assign the surname variable to the name variable and print the name variable so here on line four i can say name equals surname and let me try to print the value of name let me run this code and you can see that we got jajudi as output this is because in this line the value of name is assigned the value of surname which is jojoda so far we have learnt about let and where to create variables however there is also another way to create a variable and that is using const const is generally used to create variables whose values remain constant throughout the program consider a scenario where we want to create a variable that stores the passport number of a citizen since we know the passport number will remain the same all the time we can create the variable as const let's see how we can create variables using const i'll remove this old code and i'll say const passport number equals 39983 which is just random number that came across my mind and let me print that first here we have created a variable using const when we run this code we get 39983 as output you can see that creating a variable using const look quite similar to creating the variable using let however if you create variables using const we cannot change its value later in the program let's see what happens if we try to change the value of this const variable let me assign a new value to the passport number variable or at least try to do that so on next line i'll say passport number equals 44325 oops it should be equals 44325 and let me try to print out the new value of the passport number now let's run this code and see what will be the output you can see that it says type error assignment to constant variable this is because once you declare a variable using const you cannot change it okay guys we need your support to keep this kind of content free for all users youtube really likes engagement on the video so leave a comment below press that like button and hit subscribe if you haven't already let's get the engagement score high up so that more people can discover and enjoy these courses so far we have been assigning some value to a variable however if we declare a variable and don't provide any value then what will be the value of the variable let's try an example here on my compiler i will create a variable name and simply print the variable without assigning any value so i'll say console.log name and let me run the code here we can see undefined as the output whenever we create a variable without any value the variable is assigned with the value undefined however if we create a variable using const we need to provide some value to it we cannot use the const to declare the variable without assigning any value to it let's see what happens if you try to do that so i'll remove this old code i'll say const name and let me try to print the value of name if i press run then javascript throws an error it says missing initializer in const declaration which means that this is not allowed we can also explicitly assign undefined to a variable let's see an example i'll remove this old code and i'll say let name equals punit so let me first try to print it out now in the next line i'll say name equals undefined and in the next line let me try to see if that was successful or not you can see that the undefined does not have quotation marks before and after it that means it's not a string when i press run you can see that i have been successful in assigning the value undefined to the variable name previously we saw examples of printing variables and strings separately however we can also print them together in a single line let's see an example i'll first create a variable named city and give it the value new york so i can say let city equals new york now i'll use console.log to print the string city and the variable city together so i can say console.log city plus city let me run the code and you can see that city new york was printed here the plus operator joins the string city with the value of the variable city which is new york and that's why we got city new york here another way to print the string and variable together is using template literals let me modify this code i'll remove the second console.log statement and add the new print statement with template literals so i'll say console.log city and then i can say dollar curly braces city and now when i press run let me put a semicolon here just for consistency when i press run i get the same value as before let's see what's happening in this code here both the string and variable are stored inside the tick mark and instead of using the plus sign i have enclosed the variable inside dollar and curly braces you can also see that my compilers color coding clearly separated this out to show that this is a variable let's see another example i'll remove this old code in fact i'll only remove the console log and i'll say let kfc locations equals 10 that means there's 10 kfcs in new york which i don't know is true or not it's just random guess so i'll say console.log city plus city plus comma plus k k fc locations plus kfc locations let me run this code and it says city new york kfc locations 10 i can make this format a bit better and let me add a comp space here as well okay when i press run you can see that city new york kfc locations 10 was printed here i have used plus to print strings and variables together let's use template literals now i'll start with the same code but i'll replace this console log with the new console.log statement using template string so here let me replace this with ticks at the end and in the beginning i don't need this i don't need this plus as well and since i want to print the value of the variable city i'll say dollar curly braces similarly i don't need all of this i can just put the comma and then kfc locations i want this so i will just put again because i want to print the value of the variable kfc locations here so i'll put this inside dollar and curly braces when i press run now i get the same output as before but you can see that this is much more readable than before in fact i just want to put a space here it's easy as this and when i press run the space is now here at this point we have covered all the basics of variables let's now talk about how to choose a good variable name if you have noticed in our programs we have used descriptive variable names like city and kfc locations we can give variable names like c instead of city and the program will still work and we can also use kl instead of kfc locations and the program will still work however it's hard to understand what c means just by looking at the code when we use good descriptive variable names it becomes easier to understand the code to make variable names descriptive we may need to use names having more than one word we will follow the camel case format while giving names to our variables in camel case the first word will be of small letters and the first letter of the second word will be of capital letter just like kfc locations in my code other examples of camel case variable names are first name second name my age total distance by the way there are some rules you need to know while creating a variable number one you cannot create variable names with space in between number two you cannot start variable names with numbers number three you cannot use certain words as variable names you cannot use if as a variable name because if is a keyword these keywords have special meaning in javascript and are part of the javascript syntax we will learn about these keywords as we progress through the course now that we've reached the end of the video it's time for the programming quiz the question for you is which of the following is a valid variable name number one switch number number two one switch number number three switch space number number four switch comment to answer below and if you want to revise these concepts you can find all the programs in our github repository i'll put the link in the video description below happy programming
