With timestamps:

00:00 - one of the reasons that python is so
00:01 - popular is because it has many useful
00:03 - built-in functions
00:04 - that allow us to perform tasks in a
00:06 - straightforward way
00:07 - without writing many lines of code in
00:10 - this video we will look at seven
00:11 - different python built-in functions
00:13 - that will help you write more pythonic
00:15 - code so let's get started
00:22 - number one all and any the all function
00:25 - takes in an iterable like a list
00:26 - or a tuple and returns true if all the
00:29 - elements of the iterable
00:30 - are true else it returns false let me
00:33 - show you what i mean
00:34 - so let me create a list of booleans by
00:37 - saying boolean
00:38 - underscore list equals
00:42 - true and true now i'll say print
00:46 - all boolean underscore list
00:50 - let me run this code and we can see that
00:54 - we get true
00:55 - as all the elements are true if i change
00:59 - the second element to false
01:01 - and run the code again this time
01:04 - we get false similarly the any function
01:08 - takes in an iterable
01:09 - and returns true if any element of that
01:12 - iterable is true
01:13 - let me change this all to any and see
01:15 - what we get
01:16 - so here i'll say print any boolean
01:19 - underscore list
01:20 - and this time when i press run i get
01:23 - true
01:24 - because the first element is true and
01:26 - that is enough for any to be true
01:29 - these functions come in handy very often
01:31 - suppose we want to check if a list has
01:33 - all odd numbers we can do this task in
01:36 - just a single line using list
01:38 - comprehension and
01:39 - all let me show you what i mean let me
01:41 - first define a list
01:43 - so i'll remove this old code and i'll
01:45 - say numbers
01:47 - equals 1 comma 3 comma
01:50 - 5 comma 7 comma 9 then
01:54 - let me say all underscore odd
01:59 - equals all obviously i will have to fill
02:02 - in the expression
02:02 - inside inside this all i'll say
02:06 - list comprehension n modulus 2 or the
02:10 - remainder when n is divided by 2
02:12 - for n in numbers
02:15 - and then let me print out all
02:18 - underscore odd when i run this code
02:22 - i get true now let me replace one of the
02:25 - odd numbers by an even number
02:27 - and this time when i press run i get
02:29 - false as expected
02:32 - we can also use the any function in the
02:34 - similar way
02:38 - number two enumerate before learning
02:40 - about enumerate
02:41 - let's first understand where it is used
02:44 - suppose we have two lists
02:45 - called name underscore list and marks
02:47 - underscore list
02:48 - so let me remove this old code and here
02:51 - i'll say
02:52 - name underscore list equals
02:55 - mary anna
02:59 - and alexandra similarly
03:03 - their marks are stored in a list as
03:05 - marks underscore list
03:06 - equals 70 45
03:10 - and 96. here students in name underscore
03:15 - list have marks from the marks
03:16 - underscore list
03:17 - of the corresponding index so mary's
03:19 - marks is 70
03:20 - and as max is 45 and alexandra's marks
03:23 - is 96.
03:25 - suppose we are writing a program that
03:27 - searches for a name
03:28 - and displays the corresponding marks
03:30 - obtained by the student
03:31 - for this i can write a for loop so i
03:34 - will say for
03:35 - student in name underscore list
03:38 - and then because i am searching for say
03:40 - for example anna i can say
03:42 - if student equals equals
03:45 - anna and then i can write something here
03:49 - now let's print the marks for anna but
03:52 - notice that we can't do it directly
03:53 - as we have looped over the iterable and
03:55 - not a range so first
03:57 - i'll have to create a counter variable
03:59 - and increment it in each iteration
04:01 - so i'll start with counter equals 0
04:06 - and inside this if statement i'll say
04:09 - print
04:10 - marks underscore list and then i want
04:13 - the counter
04:15 - and if i get the marks then i want to
04:16 - break out of this loop
04:18 - and outside i need to increase the
04:20 - counter to
04:21 - counter plus equals 1. now when i run
04:24 - this code
04:25 - i get 45 which is the marks for anna as
04:28 - expected
04:29 - now we could have done this same task
04:31 - more easily using enumerate
04:33 - the enumerate function adds counter to
04:35 - an iterable and returns it
04:37 - due to this we don't have to implement
04:39 - and keep track of a counter variable
04:41 - ourselves
04:42 - first let me remove the counter variable
04:45 - so here i'll remove this and obviously i
04:49 - can remove this as well
04:51 - now i'll wrap the name underscore list
04:53 - list with an enumerate so i will say
04:55 - enumerate
04:58 - innovate returns an iterable with
05:00 - elements in the form of a tuple
05:02 - with counter variable and then the
05:03 - element itself
05:05 - so i can unpack these items instead of
05:07 - student i will now say
05:08 - counter comma student so counter comma
05:12 - student
05:12 - in enumerate name list now let me run
05:16 - this code
05:18 - and our program works exactly like
05:20 - before
05:21 - by the way if you are finding this video
05:22 - useful a sub to the channel would be
05:24 - much appreciated
05:28 - the third useful built-in function is
05:30 - zip the zip function takes in an
05:32 - arbitrary number of iterables
05:34 - with corresponding elements and
05:36 - aggregates them into tuples now that
05:38 - must have sounded really complicated
05:40 - so i will show you with an example
05:42 - suppose we have two
05:43 - lists so i can say number underscore
05:46 - list
05:47 - equals 1 comma
05:50 - 2 comma 3 and then the equivalent
05:53 - strings so i'll say str
05:55 - underscore list equals
05:58 - 1 2
06:02 - and 3. suppose we want to group the
06:04 - corresponding elements of the number
06:06 - list
06:06 - and string list for this we will use the
06:09 - zip function
06:10 - so here i'll say result
06:14 - equals zip number
06:18 - list comma string list
06:21 - now let me convert the return zip object
06:23 - into a list and print it
06:25 - so i'll say print list result
06:29 - now when i run this code i get a list of
06:33 - tuples
06:34 - as you can see the corresponding
06:36 - elements have been grouped together
06:39 - you can do this with any number of
06:41 - iterables let me now show you how we can
06:44 - use zip to solve a problem from the
06:45 - previous section
06:47 - i have this code from the previous
06:48 - section and let me replace enumerate by
06:51 - zip
06:52 - so i'll say zip here
06:56 - and along with name list i want to add
06:59 - marks underscore list in the arguments
07:03 - finally i will change counter comma
07:05 - student
07:06 - to student
07:10 - comma marks because the first list is
07:12 - the student
07:13 - and the second list is the marks and
07:16 - instead of
07:16 - accessing the list like this i can print
07:19 - the marks directly
07:21 - let me run this code and i get the same
07:25 - output as before
07:28 - the fourth useful python built-in
07:30 - function is dir
07:32 - the dir function returns all the
07:33 - attributes and methods of an object
07:35 - and all the definitions inside a module
07:37 - or a package
07:38 - let's try it out so i'll go to my code
07:40 - editor and say
07:42 - numbers underscore list equals
07:46 - 1 comma 2 and then i can say
07:49 - print dir numbers
07:52 - underscore list when i run this program
07:56 - i can see all the attributes and methods
07:58 - that are available in a list
08:00 - let's now list out all the definitions
08:02 - of the math module
08:04 - so i'll remove this old code and i'll
08:06 - say
08:07 - import math and then i can say print
08:10 - dir math
08:14 - now when around i can see all the
08:17 - attributes and methods that the math
08:19 - module
08:19 - makes available to me
08:24 - another useful built-in method is the
08:26 - eval method the eval method returns the
08:28 - string passed to it as a python
08:29 - expression
08:30 - within the program let me show you what
08:32 - i mean so on my code editor i'll say x
08:35 - equals 1 and then i can say print
08:39 - eval and then instead of saying x plus 1
08:42 - i will pass
08:43 - x plus 1 as a string let me run this
08:46 - code
08:48 - and you can see that 2 which is the
08:50 - expression
08:51 - x plus 1 evaluated is printed
08:55 - since this function allows us to execute
08:56 - any python expression as a string
08:58 - we can make very interesting programs by
09:00 - taking input from the user
09:02 - and passing them using eval let me
09:04 - demonstrate this to you
09:05 - i'll create a command line calculator in
09:07 - just two lines of python
09:09 - first i'll create an infinite while loop
09:11 - so let me remove this old code i'll say
09:13 - while
09:14 - true and inside this while loop let me
09:18 - take input from the user
09:19 - so i'll say input enter
09:23 - expression now
09:26 - let me pass this value to eval so i'll
09:29 - say
09:29 - eval input expression
09:33 - finally let me just print the value
09:35 - returned by eval
09:36 - so i'll say print eval
09:40 - input enter expression and now let me
09:43 - run this code
09:44 - now let's try a few expressions i'll say
09:46 - 4 plus 5
09:48 - and you can see that 9 has been printed
09:50 - let me try something more complex so
09:52 - i'll say 6
09:53 - to the power of 3 and voila you get 216.
09:59 - this calculator will work as long as our
10:01 - input is a valid python expression
10:04 - before moving to the next section of the
10:06 - video the programming team has created
10:08 - an app
10:08 - that allows you to learn python from
10:10 - your phone the app contains bit size
10:12 - lessons that are easier to understand
10:13 - a built-in interpreter so that you can
10:15 - run python on your phone quizzes
10:17 - and many more the app is available on
10:19 - both ios and android
10:20 - the links are in the video description
10:24 - another useful built-in function is the
10:26 - map function
10:27 - before we learn about the map function
10:29 - let me first show you why it might be
10:30 - useful
10:31 - suppose we have a list like this so i'll
10:33 - say numbers
10:35 - equals 1 2 3
10:39 - 4 and 5 and we have to create a new list
10:43 - with all the squares of the numbers from
10:44 - this list for this
10:46 - we would normally do it this way so i'll
10:48 - say
10:50 - squared underscore nums
10:53 - equals an empty list similarly i can say
10:56 - square
10:56 - equals let me define the lambda function
10:59 - i'll say
11:00 - lambda n colon n
11:03 - raised to the power of 2. now in a for
11:06 - loop
11:06 - i will append all the values to the
11:08 - squared numbers list so i'll say for
11:10 - num in numbers
11:14 - squared underscore nums dot
11:17 - append square of
11:21 - num let me go through this code once
11:23 - again
11:24 - first we started out with the list of
11:26 - numbers for which we wanted
11:28 - the squares then we defined an empty
11:30 - list
11:31 - that will contain the squared numbers
11:33 - next
11:34 - we defined a lambda function that would
11:36 - convert any number
11:37 - to its square finally we look through
11:40 - the list
11:41 - and append all the square numbers to the
11:43 - list called square underscore numbers
11:47 - let me show you how we can achieve this
11:49 - same task in a more elegant way using
11:51 - map
11:52 - the map function applies a given
11:54 - function to each item of an iterable
11:56 - let me show you how it works so i can
11:58 - remove all of this
12:01 - and i'll just write squared
12:04 - underscore nums equals
12:07 - map now map takes two arguments
12:11 - the first argument is the function that
12:13 - will convert
12:14 - each element of the list so here it will
12:17 - be
12:17 - obviously the lambda function we wrote
12:18 - before so lambda n
12:21 - that returns the square and the second
12:23 - argument will be the iterable itself
12:25 - in this case it is numbers
12:29 - here the lambda function takes an
12:31 - argument and returns its square
12:33 - and the map function applies this lambda
12:35 - function
12:36 - on each element of the numbers list let
12:39 - me first convert this map object to a
12:40 - list and print it
12:42 - so here i'll say print list
12:46 - squared underscore nums and when i press
12:49 - run
12:50 - i get the list of squared numbers
12:54 - the last useful built-in function that i
12:56 - want to talk about today is the filter
12:58 - function
12:58 - the syntax of the filter function is
13:00 - similar to that of the map function
13:02 - however instead of creating a new
13:04 - iterator by applying the given function
13:06 - the filter function filters out only the
13:08 - elements
13:09 - for which the function returns true i'm
13:11 - sure that sounded like a lot of mumbo
13:13 - jumbo to you
13:14 - so let me show you what i mean suppose
13:16 - we have a list of numbers like this
13:18 - i'll remove this old code and i'll say
13:20 - numbers
13:22 - equals 234
13:27 - 3245 i'm just typing out a list of
13:29 - random numbers here
13:31 - 690 550 and say
13:34 - 654 and i want to filter out only the
13:38 - even numbers
13:39 - for this i would normally use the for
13:41 - loop and check if every item
13:43 - is even or not using the filter function
13:46 - however
13:46 - i can perform this task in a single
13:48 - expression i'll define
13:50 - even numbers as a filter and i'll use a
13:53 - lambda function to check if it is even
13:56 - so here i can say even underscore
13:59 - numbers equals filter
14:04 - lambda n n
14:08 - modulus 2 is 0
14:11 - and then the second parameter just like
14:13 - with map is the list
14:16 - this lambda function takes an argument n
14:18 - and returns true if that number is even
14:21 - and false if that number is odd
14:24 - now this filter function runs this
14:26 - lambda function
14:27 - on all the numbers one by one and
14:30 - filters out
14:31 - only those values for which this lambda
14:34 - function returns true
14:36 - since filter also returns an iterator i
14:38 - will first convert it to a list
14:40 - so let me say print list
14:43 - even underscore numbers and when i press
14:46 - run
14:48 - i made a mistake where did i oh there is
14:50 - a extra column
14:51 - when i press run you can see that i get
14:55 - the list of
14:56 - only the even numbers in this list
15:00 - that's it for this video if you want to
15:02 - revise these concepts you can find all
15:04 - these programs in our github repository
15:06 - i'll also put this link in the video
15:07 - description below and if you like this
15:09 - video
15:10 - hit that like button and subscribe to
15:12 - the channel and i'll see you in the next
15:13 - one happy programming

Cleaned transcript:

one of the reasons that python is so popular is because it has many useful builtin functions that allow us to perform tasks in a straightforward way without writing many lines of code in this video we will look at seven different python builtin functions that will help you write more pythonic code so let's get started number one all and any the all function takes in an iterable like a list or a tuple and returns true if all the elements of the iterable are true else it returns false let me show you what i mean so let me create a list of booleans by saying boolean underscore list equals true and true now i'll say print all boolean underscore list let me run this code and we can see that we get true as all the elements are true if i change the second element to false and run the code again this time we get false similarly the any function takes in an iterable and returns true if any element of that iterable is true let me change this all to any and see what we get so here i'll say print any boolean underscore list and this time when i press run i get true because the first element is true and that is enough for any to be true these functions come in handy very often suppose we want to check if a list has all odd numbers we can do this task in just a single line using list comprehension and all let me show you what i mean let me first define a list so i'll remove this old code and i'll say numbers equals 1 comma 3 comma 5 comma 7 comma 9 then let me say all underscore odd equals all obviously i will have to fill in the expression inside inside this all i'll say list comprehension n modulus 2 or the remainder when n is divided by 2 for n in numbers and then let me print out all underscore odd when i run this code i get true now let me replace one of the odd numbers by an even number and this time when i press run i get false as expected we can also use the any function in the similar way number two enumerate before learning about enumerate let's first understand where it is used suppose we have two lists called name underscore list and marks underscore list so let me remove this old code and here i'll say name underscore list equals mary anna and alexandra similarly their marks are stored in a list as marks underscore list equals 70 45 and 96. here students in name underscore list have marks from the marks underscore list of the corresponding index so mary's marks is 70 and as max is 45 and alexandra's marks is 96. suppose we are writing a program that searches for a name and displays the corresponding marks obtained by the student for this i can write a for loop so i will say for student in name underscore list and then because i am searching for say for example anna i can say if student equals equals anna and then i can write something here now let's print the marks for anna but notice that we can't do it directly as we have looped over the iterable and not a range so first i'll have to create a counter variable and increment it in each iteration so i'll start with counter equals 0 and inside this if statement i'll say print marks underscore list and then i want the counter and if i get the marks then i want to break out of this loop and outside i need to increase the counter to counter plus equals 1. now when i run this code i get 45 which is the marks for anna as expected now we could have done this same task more easily using enumerate the enumerate function adds counter to an iterable and returns it due to this we don't have to implement and keep track of a counter variable ourselves first let me remove the counter variable so here i'll remove this and obviously i can remove this as well now i'll wrap the name underscore list list with an enumerate so i will say enumerate innovate returns an iterable with elements in the form of a tuple with counter variable and then the element itself so i can unpack these items instead of student i will now say counter comma student so counter comma student in enumerate name list now let me run this code and our program works exactly like before by the way if you are finding this video useful a sub to the channel would be much appreciated the third useful builtin function is zip the zip function takes in an arbitrary number of iterables with corresponding elements and aggregates them into tuples now that must have sounded really complicated so i will show you with an example suppose we have two lists so i can say number underscore list equals 1 comma 2 comma 3 and then the equivalent strings so i'll say str underscore list equals 1 2 and 3. suppose we want to group the corresponding elements of the number list and string list for this we will use the zip function so here i'll say result equals zip number list comma string list now let me convert the return zip object into a list and print it so i'll say print list result now when i run this code i get a list of tuples as you can see the corresponding elements have been grouped together you can do this with any number of iterables let me now show you how we can use zip to solve a problem from the previous section i have this code from the previous section and let me replace enumerate by zip so i'll say zip here and along with name list i want to add marks underscore list in the arguments finally i will change counter comma student to student comma marks because the first list is the student and the second list is the marks and instead of accessing the list like this i can print the marks directly let me run this code and i get the same output as before the fourth useful python builtin function is dir the dir function returns all the attributes and methods of an object and all the definitions inside a module or a package let's try it out so i'll go to my code editor and say numbers underscore list equals 1 comma 2 and then i can say print dir numbers underscore list when i run this program i can see all the attributes and methods that are available in a list let's now list out all the definitions of the math module so i'll remove this old code and i'll say import math and then i can say print dir math now when around i can see all the attributes and methods that the math module makes available to me another useful builtin method is the eval method the eval method returns the string passed to it as a python expression within the program let me show you what i mean so on my code editor i'll say x equals 1 and then i can say print eval and then instead of saying x plus 1 i will pass x plus 1 as a string let me run this code and you can see that 2 which is the expression x plus 1 evaluated is printed since this function allows us to execute any python expression as a string we can make very interesting programs by taking input from the user and passing them using eval let me demonstrate this to you i'll create a command line calculator in just two lines of python first i'll create an infinite while loop so let me remove this old code i'll say while true and inside this while loop let me take input from the user so i'll say input enter expression now let me pass this value to eval so i'll say eval input expression finally let me just print the value returned by eval so i'll say print eval input enter expression and now let me run this code now let's try a few expressions i'll say 4 plus 5 and you can see that 9 has been printed let me try something more complex so i'll say 6 to the power of 3 and voila you get 216. this calculator will work as long as our input is a valid python expression before moving to the next section of the video the programming team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easier to understand a builtin interpreter so that you can run python on your phone quizzes and many more the app is available on both ios and android the links are in the video description another useful builtin function is the map function before we learn about the map function let me first show you why it might be useful suppose we have a list like this so i'll say numbers equals 1 2 3 4 and 5 and we have to create a new list with all the squares of the numbers from this list for this we would normally do it this way so i'll say squared underscore nums equals an empty list similarly i can say square equals let me define the lambda function i'll say lambda n colon n raised to the power of 2. now in a for loop i will append all the values to the squared numbers list so i'll say for num in numbers squared underscore nums dot append square of num let me go through this code once again first we started out with the list of numbers for which we wanted the squares then we defined an empty list that will contain the squared numbers next we defined a lambda function that would convert any number to its square finally we look through the list and append all the square numbers to the list called square underscore numbers let me show you how we can achieve this same task in a more elegant way using map the map function applies a given function to each item of an iterable let me show you how it works so i can remove all of this and i'll just write squared underscore nums equals map now map takes two arguments the first argument is the function that will convert each element of the list so here it will be obviously the lambda function we wrote before so lambda n that returns the square and the second argument will be the iterable itself in this case it is numbers here the lambda function takes an argument and returns its square and the map function applies this lambda function on each element of the numbers list let me first convert this map object to a list and print it so here i'll say print list squared underscore nums and when i press run i get the list of squared numbers the last useful builtin function that i want to talk about today is the filter function the syntax of the filter function is similar to that of the map function however instead of creating a new iterator by applying the given function the filter function filters out only the elements for which the function returns true i'm sure that sounded like a lot of mumbo jumbo to you so let me show you what i mean suppose we have a list of numbers like this i'll remove this old code and i'll say numbers equals 234 3245 i'm just typing out a list of random numbers here 690 550 and say 654 and i want to filter out only the even numbers for this i would normally use the for loop and check if every item is even or not using the filter function however i can perform this task in a single expression i'll define even numbers as a filter and i'll use a lambda function to check if it is even so here i can say even underscore numbers equals filter lambda n n modulus 2 is 0 and then the second parameter just like with map is the list this lambda function takes an argument n and returns true if that number is even and false if that number is odd now this filter function runs this lambda function on all the numbers one by one and filters out only those values for which this lambda function returns true since filter also returns an iterator i will first convert it to a list so let me say print list even underscore numbers and when i press run i made a mistake where did i oh there is a extra column when i press run you can see that i get the list of only the even numbers in this list that's it for this video if you want to revise these concepts you can find all these programs in our github repository i'll also put this link in the video description below and if you like this video hit that like button and subscribe to the channel and i'll see you in the next one happy programming
