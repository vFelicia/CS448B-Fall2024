With timestamps:

00:00 - in the topic on malicious software we
00:03 - looked at some of the the software that
00:05 - can be used to create problems in
00:08 - computer systems viruses worms and
00:13 - sometimes we mentioned denial of service
00:16 - attacks and we may have given a brief
00:19 - explanation to say that to do something
00:22 - such that our computer system is not
00:24 - available for the normal purposes so if
00:26 - you remember back to the original topic
00:29 - the first topic I think in the first
00:33 - week we listed some some services that
00:37 - we want to provide like confidentiality
00:40 - authentication integrity access control
00:45 - non-repudiation and the sixth service
00:48 - was availability when we want to secure
00:52 - a computer system if we make that
00:54 - computer system available to our users a
00:57 - security attack would to make that
01:00 - computer system unavailable and such an
01:03 - attack denies the normal users use of
01:06 - the service so we call it a denial of
01:08 - service attack or breviary do s a DOS
01:11 - attack do s attack so what we're going
01:14 - to do in this topic is look at the basic
01:18 - concept of how denial of service attacks
01:21 - are performed to understand how they
01:26 - operate so that we can have techniques
01:29 - to try and prevent them or to minimize
01:33 - the chance that they can be successful
01:35 - to minimize the disruption of our
01:37 - network or computer system they can be
01:42 - quite complex attacked so we're going to
01:43 - use very start from very simple attacks
01:46 - which may no longer be used in practice
01:49 - today but the same concepts are used in
01:51 - real denial of service attacks and you
01:55 - hear about denial of service attacks in
01:57 - the news or in media because they
02:02 - performed a lot by attackers and they're
02:06 - generally easy to perform okay so it
02:09 - doesn't take much to start a denial of
02:11 - service attack
02:13 - so we'll see why that's the case but
02:16 - there are some measures that we can use
02:18 - to try and minimize the chance that
02:20 - they'll be successful so talk about what
02:27 - what they are and then we'll go through
02:28 - some classical denial of service service
02:31 - attacks some very basic ones and we'll
02:33 - use Linux and to demonstrate some I'll
02:36 - demonstrate some in the class and then
02:37 - you'll do a homework probably after the
02:40 - midterm where you do your own denial of
02:42 - service attack what do we mean by do s
02:47 - attack an action that prevents or
02:50 - impairs the authorized use of networks
02:52 - so we can't use the network systems the
02:56 - computer system or applications how does
02:59 - it do that by exhausting resources so
03:03 - the resources that we have available run
03:05 - out because of the attack
03:08 - so some action takes place such that my
03:10 - resource is like CPU my memory the
03:15 - network bandwidth or the disk runs out
03:17 - so it can no longer do the normal things
03:20 - on my computer or my network
03:28 - so a do s attack our tax resources so
03:33 - sometimes we can classify based upon
03:35 - what types of resources they attack what
03:38 - do they try to exhaust it could be
03:41 - network resources so if we're not
03:43 - looking at just a single computer but a
03:45 - network then an attacker can try to
03:48 - overload our network that may mean we
03:52 - have a link maybe we have a link that
03:54 - comes into our server web server or some
03:56 - other servers that we want others to
03:58 - access that link has some capacity maybe
04:03 - a hundred megabits per second is the
04:05 - capacity of that link if the attacker
04:07 - tries to send traffic onto that link
04:10 - that starts to approach that capacity
04:13 - 100 megabits per second then the normal
04:16 - data coming from the normal users may be
04:19 - delayed or may not be sent across that
04:21 - link so one aspect of exhausting the
04:24 - network resources is overloading the
04:26 - links sending so much so many packets
04:30 - such that the links cannot send all of
04:33 - them and that often happens if the link
04:40 - from an organization like your your
04:45 - organization your company your
04:47 - university that has a service on offer
04:50 - the link from the organization to their
04:52 - local Internet service provider is often
04:56 - slower than the links inside the
05:00 - internet service provider and we're
05:02 - trying to illustrate that with a diagram
05:03 - but the the bottleneck arises at the
05:07 - organization's link for example as IT is
05:11 - connected to an Internet service
05:12 - provider to get out outside Internet
05:14 - access let's say that link coming from
05:17 - our ISP that we pay for into si T is 100
05:22 - megabits per second that's the capacity
05:24 - of our link but within the ISPs network
05:27 - they probably have a much higher
05:29 - capacity because they need to support
05:31 - multiple users so if you think of
05:33 - traffic coming into si si T then the
05:37 - bottleneck link may often be that one
05:40 - coming into si T
05:41 - that 100 megabit per second leap so if
05:44 - that gets overloaded that link that is
05:48 - it's sending all the traffic from an
05:49 - attacker then the traffic of our normal
05:52 - users will not get sent through or be
05:54 - delayed significantly and if if there
06:01 - are many packets sent in and a link gets
06:04 - overloaded what happens eventually
06:06 - packets start to get dropped my capacity
06:10 - is 100 megabits per second but someone
06:13 - is sending at 200 megabits per second so
06:16 - where do the packets go well now and
06:19 - we'll show in a picture they'll get to a
06:21 - router and the draft router can only
06:22 - send out at 100 megabits per second it's
06:25 - getting 200 coming in so it must drop
06:28 - some and it will drop packets so packets
06:31 - from our normal users will not get to
06:34 - the server so that's an example of
06:38 - exhausting network resources other
06:42 - denial of service attacks will look at
06:44 - either applications or the system for
06:50 - example try to crash the the software
06:54 - that handles the forwarding of packets
06:57 - so there's been attacks where you say a
07:01 - router has software running on it that
07:04 - looks at the packet and then sends it on
07:06 - and then looks at the next packet and
07:09 - sends a lot sends it on if that software
07:12 - doesn't work operate work correctly then
07:14 - the router may take a lot of time to
07:17 - look at a packet before it sends it on
07:19 - slowing it down slowing down all the
07:22 - traffic and eventually getting packet
07:23 - drops so some denial of service attacks
07:27 - will try to exhaust the resources of the
07:30 - system that is forwarding the traffic
07:33 - usually using some bugs
07:35 - so bugs in network protocols or to
07:41 - exhaust the applications so for example
07:44 - a web server a web server is not just a
07:47 - computer but is an application software
07:50 - application running on a computer so
07:52 - the apache software is a web server and
07:58 - if we can make that application slow
08:01 - down then that can be considered a
08:04 - denial of service attack by consuming
08:06 - resources from that application for
08:08 - example getting the application to use a
08:10 - lot of RAM use up all the RAM on the
08:13 - computer such that nothing else can run
08:15 - on that computer or use up all the hard
08:18 - disk space many applications will have
08:21 - logs or have to have temporary use of
08:23 - the hard disk if the hard disk is full
08:25 - the applications may stop working so
08:30 - denial of service attacks will try to
08:31 - either exhaust the network resources
08:36 - exhaust usually the intermediate devices
08:38 - intermediate systems between leading up
08:43 - to their application and/or exhaust the
08:46 - application itself and once these are
08:48 - examples of that attacks on different
08:51 - resources
08:57 - so what we're going to do is go through
08:58 - two I think to two very basic denial of
09:02 - service attacks the first one quite
09:04 - quickly and then we'll go through the
09:05 - second one in a bit more depth and I
09:08 - would say that classic denial of service
09:10 - attacks that is some of the the most or
09:13 - the original ones which are popularized
09:15 - but in many networks today they're no
09:18 - longer successful because there are
09:21 - measures to try to stop them but they
09:24 - will show the principles of denial of
09:26 - service attacks
09:32 - and these attacks require some
09:36 - understanding of network protocols and I
09:42 - know everyone here is experts on our
09:45 - experts on network protocols remember
09:48 - your knowledge of TCP maybe TCP we know
09:54 - is a transport protocol okay we know
10:00 - that many applications today use TCP as
10:03 - a transport protocol web browsing email
10:07 - most applications which are not
10:09 - multimedia applications or maybe some
10:11 - gaming applications will use TCP to send
10:14 - data because TCP provides reliability
10:17 - and the way that TCP works is that
10:20 - before you send any data you connect you
10:24 - create a connection from client to
10:25 - server so for the example of a web
10:28 - server the web server is running on one
10:31 - computer your web browser on another
10:33 - computer before you can send a request
10:35 - to for a web page what happens is that
10:38 - your TCP software on your web browser
10:42 - computer tries to set up a connection to
10:44 - the server using TCP and that connection
10:49 - set up normally involves exchange of
10:51 - three messages it's called a three-way
10:54 - handshake we send a special message from
10:58 - the initiating computer in the picture
11:01 - computer a wants to initiate a
11:03 - connection to computer B so computer a
11:06 - sends a special message saying let's
11:08 - start a connection B when it gets that
11:12 - if everything goes fine
11:13 - we'll send back a response saying okay I
11:16 - acknowledge that and here are some
11:19 - information about me that's what B says
11:22 - and then finally a sends back a third
11:25 - message saying thank you for that
11:26 - information from then on we can transfer
11:29 - data this is called a three-way
11:33 - handshake we have three three messages
11:35 - involved the specific names of those
11:38 - messages we refer to them the first one
11:40 - as a syn message it's used to
11:43 - synchronize sequence numbers
11:45 - so when we transfer data we use sequence
11:48 - numbers to keep track of that data which
11:51 - number do we start at well those numbers
11:54 - are synchronized in these first messages
11:56 - so we say this is a syn segment saying
11:59 - from a I want to synchronize with you
12:02 - here's the value I choose B says okay it
12:08 - sent back an acknowledgment and in
12:11 - addition in that same segment B says I
12:14 - want to synchronize with you so we say
12:16 - that this second message is a contains
12:19 - both a synchronized message and an ACK
12:22 - message so we simply call it a syn ack
12:24 - and the last one is a saying thank you I
12:29 - acknowledge your initial values the
12:32 - final act so we'll often see syn syn ack
12:35 - ack as this three-way connection set up
12:41 - after that data is transferred and this
12:44 - happens with all clients want to connect
12:48 - to a server
12:57 - what happens when the client wants to
13:01 - connect to the server in addition to
13:03 - exchanging these messages the server in
13:06 - particular when a client wants to set up
13:09 - a connection the server will store some
13:11 - information about that connection the
13:14 - client says I want to start a connection
13:16 - with you the server will store when it
13:19 - gets our first message it will store
13:21 - some information saying who the client
13:23 - is the address the IP address and port
13:27 - number and maybe even allocate some
13:31 - memory in the upcoming for the upcoming
13:34 - data transfer some buffer space if it's
13:38 - going to use some flow control then it's
13:39 - going to need some buffer space so what
13:42 - it be does when it receives his first
13:44 - syn segment it says ok we're about to
13:47 - transfer data with a I'll send back an
13:50 - ACK and I'll allocate some memory inside
13:54 - the computer for this upcoming data
13:56 - transfer and that memory allocation is
14:02 - what leads to a denial of service attack
14:05 - what an attacker will try to do is to
14:09 - get the server to allocate memory for
14:11 - many connections and eventually consume
14:16 - all the memory of the server and
14:18 - therefore the server will not be able to
14:22 - accept any future connections
14:30 - let's just see the TCP three-way
14:33 - handshake and then try and illustrate
14:34 - that memory allocation
14:44 - first and I think you have this in your
14:47 - handouts this is the TCP segment if you
14:49 - go forward a few pages I've included the
14:52 - TCP segment we don't need to remember it
14:56 - but we do note that the segment includes
15:03 - a source port identifying the
15:06 - application that sent the segment
15:08 - destination port for example the source
15:12 - port would identify my web browser the
15:14 - destination port would identify a web
15:16 - server and the destination port for web
15:19 - server is everyone remembers the
15:22 - destination the port of a web server web
15:26 - server 80 ok port 80 for example for a
15:30 - web server the sequence numbers those
15:35 - who passed my data communications course
15:37 - who made it through to this semester
15:39 - remember that flow control and error
15:41 - control will use sequence numbers to
15:43 - keep track of what's been sent
15:45 - what have we received so sequence
15:47 - numbers and in addition acknowledgment
15:50 - numbers are included in the header and a
15:53 - number of other fields there's data and
15:55 - the flags indicates a type of message
15:58 - whether it's a normal message an ACK a
16:02 - syn message or some other special
16:04 - purpose like a fin message or a reset
16:06 - message so that's the general structure
16:09 - of the TCP segment
16:23 - what I've set up and I'll show you in a
16:25 - moment is a simple network using
16:29 - VirtualBox which looks like this we'll
16:32 - use this for some demos today we have
16:35 - three computers three nodes and you've
16:37 - used the nodes I think for homework the
16:42 - past homeworks and and the current Linux
16:44 - permissions homework so the VirtualBox
16:46 - nodes I've already set them up on my
16:48 - computer there are three inside the same
16:50 - land for a very simple example and node
16:54 - one has IP address 192.168.1.1 no two is
17:02 - dot twelve and no 3.13 okay so we can
17:05 - remember the IP addresses of nodes 1 2 &
17:08 - 3 11 12 and 13 let's just capture a TCP
17:18 - three-way handshake and in my computer
17:35 - node one is gonna be red you'll see in a
17:39 - moment node two is blue I think
17:49 - that's blue and node 3 is green so we
17:53 - can keep track of the different nodes so
17:59 - we have three nodes and we're going to
18:01 - run some experiments to see what first
18:04 - how each EP connection setup works and
18:07 - then later some other denial of service
18:08 - attacks so these are my three terminals
18:14 - although I've already started and logged
18:15 - into those three nodes will zoom in in a
18:17 - moment so node one I've logged into it
18:19 - it's running it's a Linux computer and
18:21 - simular node 2 and node 3 they are there
18:37 - in this one we're only going to need two
18:40 - of the nodes just to show what's going
18:41 - on I want to know - no - is running a
18:48 - web server okay it has a web server
18:51 - running I hope how do I see if a web
18:55 - server is running maybe we can try
19:00 - netstat
19:10 - netstat shows me the connections I'm
19:13 - listening to in this case with the minus
19:15 - L option it shows me something's
19:17 - listening on port 80 so we guessed that
19:20 - that's a web server there's a web server
19:22 - running on the blue node - which is
19:25 - waiting for people to connect to it so
19:28 - what I'm going to do is connect to it
19:29 - from node 1 and at the same time capture
19:32 - the packet so we can see the three-way
19:35 - handshake
19:47 - so I'm going to use TCP dump to capture
19:50 - the packets on node two it's recording
19:56 - everything it receives and then on node
19:58 - one what web browser am I going to use I
20:02 - don't have Firefox I don't have a
20:05 - graphical user interface so links
20:07 - text-based web browser 2 is 12 I'm just
20:15 - going to visit the web page and it works
20:19 - okay that's the default web page and I
20:21 - can quit this is the default for the web
20:24 - server quit yes and now I'll stop the
20:29 - CAPTCHA and we want to look at the
20:33 - packets just to see the connection setup
20:35 - I could look it on the screen but it's
20:37 - very hard to see so instead we'll try
20:40 - and open it in Wireshark
20:52 - and
20:54 - here the captured packets and let's just
21:00 - focus on the TCP packets and then see
21:02 - what happened so what can we observe
21:07 - here we can observe that all right these
21:15 - are packets sent between node 3 and node
21:17 - 2 why node 3 and node 2
21:28 - because I've got
21:42 - let's check check the IP addresses
21:53 - I've got the wrong file okay I've copied
21:56 - I've copied this file to my computer
21:58 - just before the lecture and I've got it
22:00 - the wrong one but I think we can still
22:02 - see what I want to show you at least
22:05 - here its node 3 and node 2 whereas what
22:09 - I did was just between node 1 and node 2
22:12 - so that's just the IP addresses are
22:14 - different but it's exactly the same
22:15 - trace it's one I did before what I
22:19 - wanted to show you here is a HTTP
22:24 - message sent by node 3 to node 2 and
22:28 - it's the web browser sending a message
22:33 - to the web server saying I want to get
22:34 - some webpage to notify the forward slash
22:37 - and then the response the web page comes
22:42 - back in this message so this is the data
22:47 - that's been transferred first from
22:50 - client to server and then from server
22:54 - back to client the web request and then
22:57 - the the web page coming back this was
23:01 - done using HTTP but the transport
23:03 - protocol was TCP and the first three
23:07 - messages these three other connections
23:11 - set up and there's a lot of detail there
23:14 - but the thing you should recognize the
23:17 - syn the cynic and the app client sends a
23:23 - syn message to the server that triggers
23:27 - the server to realize someone wants to
23:31 - connect to me
23:32 - and this summon is computer with IP
23:36 - address ending in 13 and a particular
23:39 - port number five seven 401 so what the
23:42 - server does assuming it's going to
23:44 - accept the connection because it's
23:45 - running a web server yes it a liqu AIT's
23:48 - some memory records those values and
23:52 - allocate some buffer space for the
23:55 - upcoming data transfer and sends back an
23:58 - ACK this see nak saying thank you let's
24:02 - let's continue and then the final act
24:06 - so that's the scenic taking place
24:14 - when we get this sin message memory is
24:17 - allocated
24:25 - let's see on our three-way handshake the
24:30 - memory is allocated I don't want that
24:32 - one this one what a denial-of-service
24:38 - attack does is as multiple such requests
24:44 - arrive then the idea is that if many syn
24:50 - packets arrive at the server that
24:52 - variant within a small amount of time
24:54 - memory is allocated for each one it
24:57 - receives and if you have a lot enough
25:00 - then the memory will fill up on the
25:02 - server and there'll be no more memory to
25:04 - be allocated for subsequent requests so
25:08 - the idea is to overflow the resources on
25:10 - the target web server and the way that
25:14 - the attacker does that is sends many syn
25:16 - packets to the server not just one not
25:21 - as one per second but send thousands
25:23 - millions per second of syn packets to
25:26 - the web server every one that the web
25:29 - server receives it must allocate a small
25:31 - amount of memory but as that builds up
25:34 - then the memory of the server may fill
25:37 - up and if the memory of the server is
25:40 - full then the next seen packet that
25:43 - comes in cannot be processed because we
25:47 - cannot allocate more memory now how does
25:52 - the attacker achieve this well using
25:54 - different approaches first for this to
25:58 - work the attacker must send lots of syn
26:00 - segments to the server and that's
26:04 - possible but to enhance that and that's
26:10 - what this picture shows what the
26:11 - attacker will try to do is to get other
26:13 - computers to send those syn segments on
26:16 - their behalf and we saw in the last
26:18 - topic if we have some malicious software
26:21 - installed on other computers computers
26:23 - already infected here they are called
26:26 - some slaves the attacker has infected
26:29 - these other ones and it triggers the
26:32 - malicious software on those computers to
26:34 - send the syn segments to the target web
26:37 - server
26:38 - so it's not the attackers computer
26:40 - that's sending the scene segments it's
26:42 - other computers on behalf of the
26:44 - attacker why maybe they've been affected
26:48 - with malicious software so that's how
26:51 - one way to increase the number of scene
26:53 - packets that come to the web server so
26:55 - you have many of these slave servers or
26:58 - we refer to them as bots in the previous
27:01 - topic sending packets then that
27:03 - increases the number of packets arriving
27:06 - at the target web server and makes it
27:09 - easier to overflow the memory at the
27:11 - target web server where does the scenic
27:18 - go to so with TCP 3-way handshake we saw
27:25 - when we receive a syn the web server
27:27 - sends back an ACK
27:28 - where does that go to the syn ACK
27:30 - message back to the ones who sent this
27:34 - in ok so the target web server receives
27:40 - a seen message ah someone wants to set
27:42 - up a connection so it sends back a syn
27:44 - ACK saying ok allocates memory the
27:47 - normal behavior for TCP s will allocate
27:49 - some memory with the expectation will
27:53 - receive the actual e the third message
27:56 - if we don't receive the ACK after some
27:59 - time will deallocate that memory and no
28:02 - longer store it but for a short period
28:04 - of time we will allocate that memory now
28:07 - in terms of the attacker they don't want
28:11 - to receive the syn ACK messages there's
28:13 - no need to because they're not going to
28:15 - respond with a third act there's no need
28:17 - for that
28:18 - it's just overloading with the send
28:20 - messages so a common technique again
28:23 - that's used by the attacker not just
28:24 - using many slave servers but setting a
28:28 - fake source address when they send that
28:31 - first scene message if the source
28:34 - address of the syn message is fake where
28:37 - does the syn ACK go to
28:41 - it goes to that fake address which is
28:44 - not the attackers computer and this will
28:46 - be a key technique which is used in
28:48 - other denial of service attacks when the
28:51 - attacker sends a message to the server
28:52 - the target don't include your real IP
28:55 - address as a source include a fake IP
28:59 - address so when the server responds with
29:01 - this syn ACK message it doesn't come
29:04 - back to these slaves it goes somewhere
29:05 - else it's not of concern to us as the
29:08 - attacker in this case so we need we'll
29:11 - see that using fake source addresses is
29:13 - a key part of many denial of service
29:15 - attacks and we'll show that in a moment
29:23 - so TTP this is called the TCP syn
29:27 - flooding attack it's very simple the
29:29 - attacker generates many syn segments
29:31 - going to the server it floods the server
29:34 - with syn segments every scene segment
29:38 - the server receives it allocates a small
29:40 - amount of memory and it allocates a
29:46 - small amount of memory and sends back
29:48 - and responds this syn ACK response but
29:51 - if the source address was a fake address
29:53 - that syn ack response goes to someone
29:55 - else and there's never going to be a
29:57 - final act coming back so what happens at
30:00 - the target web server or the target
30:02 - computer it comes over load of
30:04 - processing sins and storing connection
30:07 - information everyone who receives it
30:09 - allocates a little bit of memory and if
30:12 - it receives millions per second then it
30:14 - allocates a lot of memory and therefore
30:17 - no more memory will be allowed for the
30:20 - subsequent scene messages
30:27 - how to stop this it's not easy in some
30:31 - cases there are some techniques which
30:34 - are required really an upgrade of the
30:36 - TCP software so they wouldn't handle
30:40 - that and that upgrade is sometimes
30:41 - implemented as sim cookies so there's an
30:44 - extra check to make sure that this is
30:47 - really a true connection request from a
30:51 - client another way is to filter packets
30:56 - if we receive millions of seen packets
30:59 - from a particular source then then don't
31:02 - let them in but we'll see that there are
31:04 - problems for filtering packets so TCP
31:10 - syn flooding was one in there earlier or
31:12 - what they're on the main denial of
31:14 - service attacks in the early days it's
31:18 - not so common today because of the
31:20 - filtering and because of some of the
31:21 - countermeasures like sin cookies which
31:24 - are used there are limits on the number
31:27 - of syn messages received
31:35 - so this is an example of overloading the
31:38 - application it's not overloading the
31:41 - network there are only small packets
31:43 - that doesn't use many resources it's
31:45 - overloading the application on the
31:46 - target computer they're using up the RAM
31:50 - usually or the CPU let's look at a
31:57 - similar type of attack but it's
31:59 - overloading a different resource and
32:00 - it's called a ping flooding attack
32:02 - flooding means to fill something up - in
32:07 - this case for a network - to send many
32:09 - packets we'll go through and look at a
32:14 - similar type of attack called a ping
32:16 - flooding
32:24 - before we go through another reminder
32:27 - the IP address format the IP header
32:34 - format sorry so this at the bottom is
32:37 - the TCP header format and also as
32:42 - reference this is the IP header
32:45 - structure what are the two most
32:50 - important fields in the IP header what
32:54 - would you say if that was an exam
32:56 - question or if we have a quiz next
32:58 - Tuesday the two most important fields in
33:01 - the IP header from our course
33:04 - perspective or from what you know source
33:07 - and destination are two things that we
33:09 - always come across who's sending it
33:11 - who's receiving it right there are many
33:14 - fields here but from our perspective we
33:17 - often care about who's the source and
33:19 - who's the destination there are some
33:22 - other things about the length and and
33:25 - the type but that's important from a
33:30 - security perspective first it identifies
33:34 - computers the source address is in
33:38 - theory it's the address of the original
33:42 - sending computer and the destination is
33:45 - the final destination so when I send a
33:49 - packet from my laptop to the Facebook
33:51 - web server the source address of that
33:54 - packet would be that that identifies my
33:56 - computer and the destination address
33:59 - inside that IP header will be that that
34:02 - identifies the Facebook web server so IP
34:05 - addresses act as some identifier of the
34:08 - computers and that is some security
34:11 - issue in terms of privacy if someone can
34:15 - observe this header they can see who's
34:18 - communicating now there are some special
34:24 - cases or some other issues that arrive
34:27 - that make that not so easy to identify
34:30 - individual computers but generally it we
34:32 - assume that computers can be identified
34:34 - by the IP address
34:37 - from an attackers perspective that's bad
34:41 - because one of the ways to stop
34:43 - attackers is to identify who they are
34:45 - and maybe send the police around them
34:47 - and tell them to stop okay but to take
34:49 - actions outside of the the computer
34:52 - system so what an attacker would like to
34:55 - do is to hide its IP address and one way
35:00 - what quite simply is to send a fake IP
35:03 - address when you send print send fakes
35:08 - set fake source addresses as part of
35:11 - attacks but setting a fake source
35:14 - address also has other benefits so let's
35:20 - go through a ping flooding attack
35:27 - before we explain this network setup
35:29 - let's demonstrate ping
35:55 - zooming in a moment
36:09 - what does ping do ping very simply as an
36:12 - application triggers when I run the
36:14 - application triggers my computer to send
36:16 - a special message to the destination in
36:19 - this case from my computer node 1 to 192
36:24 - 168 1.12 in this case send repeat 5
36:28 - times and the protocol being used it's
36:32 - not TCP or UDP it's a special one called
36:34 - ICMP the internet control message
36:37 - protocol and the way that it works is my
36:41 - computer sends a ping request to the
36:44 - server to the destination not the server
36:46 - the destination computer winner receives
36:49 - the request in the normal case sends
36:51 - back a reply and when I get a reply my
36:55 - ping software prints a line on the
36:57 - screen saying some information about
36:58 - that reply it took 2 point 8 5
37:01 - milliseconds to get there and back and
37:03 - then in this case it does it again he
37:06 - repeats 5 times so ping involves sending
37:09 - a request to this destination and
37:11 - getting a response back sometimes we say
37:14 - an echo request and an echo reply how
37:20 - big are those messages approximately how
37:27 - big are the packets being sent across
37:28 - the network in this case
37:33 - megabytes gigabytes approximately how
37:38 - many bytes can anyone see the number up
37:43 - there 64 bytes right there may be some
37:45 - header and some other overheads but
37:47 - we're talking about hundred bytes or so
37:49 - because it says here there was a reply
37:54 - that we got 64 bytes from computer 12
37:58 - when I pinged from computer what 11 the
38:01 - red one - computer 12 64 bytes come back
38:04 - but we know that there may be some
38:06 - overhead due to headers like that IP
38:09 - header may be another 20 bytes the
38:11 - Ethernet header and so on so we're
38:13 - talking about messages in the order of a
38:15 - hundred bytes not very big quite small
38:18 - can we make them bigger how do we make
38:24 - them bigger
38:30 - yeah we can make them bigger as big as
38:33 - we like although there may be some
38:35 - limits we can set the size okay so we've
38:40 - got bigger packets so ping is very
38:43 - simple and ping is supported by most
38:45 - computers they'll respond to ping okay
38:50 - now let's see how ping can be used in a
38:57 - denial of service attack here's our
39:03 - example network structure we say there's
39:11 - the attacker
39:12 - maybe the attackers computer they have
39:16 - their local network there'd be a LAN and
39:19 - this is a router say the attacker owns a
39:21 - router at home or in their business and
39:24 - the attacker gets access to the internet
39:27 - via an Internet service provider tell me
39:30 - 3 Internet service providers you know of
39:33 - anyone who's an ISP in Thailand true AI
39:40 - yes DTAC you're talking about mobile
39:44 - phone providers yes they are internet
39:47 - providers also but yeah there are a
39:48 - number of ISPs if you look on maps of
39:51 - the internet there are tens of or even a
39:53 - hundred plus companies that provide
39:55 - Internet service inside Thailand so what
40:00 - we do isn't as an end user we pay the
40:02 - ISP for access and we can think of the
40:05 - network structure is that for my if I'm
40:08 - the attacker my router has a connection
40:10 - going into the ISPs network there's a
40:14 - cable coming into my home from the ISPs
40:16 - network or into my business and the
40:19 - internet service provider has some
40:21 - router then they connect to a larger ISP
40:24 - maybe a small one connects to a larger
40:27 - one and they connect out to other ISPs
40:30 - in other countries and that's what the
40:32 - internet is made up of now think of the
40:37 - target maybe some organization and the
40:40 - target may be all say
40:41 - in that organization maybe a web server
40:43 - the attacker wants to make make it so
40:47 - that others cannot access this web
40:49 - server so we can think of the targa
40:52 - computer and the similar structure the
40:54 - target has a network their own router
40:57 - and they connect to the internet via
40:59 - their ISP Internet service provider of
41:03 - the target and they connect out now
41:09 - let's assume that in terms of the links
41:16 - between the attacker and the target
41:18 - let's assume the slowest link across
41:22 - that path is this one leading into the
41:25 - targets network let's say that's what we
41:29 - call the bottleneck link the slowest one
41:31 - may be internal for the target's network
41:34 - they've got a fast land very fast there
41:37 - but when they pay for a connection to
41:40 - their ISP that's the most expensive part
41:43 - and therefore that's the slowest part of
41:45 - the network across the different ISP
41:49 - networks usually they have very high
41:50 - speed links so across throughs network
41:54 - across Quixote's network inside their
41:58 - network they have very high speed links
41:59 - but going to the end customer that's one
42:02 - of the slower links so let's assume
42:05 - that's the bottleneck link and that the
42:09 - attacker may also connect to an ISP but
42:12 - it's faster than the targets that may
42:15 - not be so realistic but we'll come back
42:17 - to that in a moment
42:18 - so this is the bottleneck link so what
42:21 - the attacker tries to do is to send
42:24 - enough packets to the target such that
42:29 - this bottleneck link is overloaded it
42:32 - has some capacity if we send enough
42:36 - packets in such that we start to reach
42:39 - that capacity then the the link is
42:43 - carrying packets from there the attacker
42:45 - and it cannot carry the packets from the
42:47 - normal users and normal users out on the
42:50 - internet that are trying to access that
42:52 - the target web server cannot access
42:55 - denied service that's the idea here how
43:01 - that is achieved is by the attacker
43:03 - sending enough packets such that the
43:06 - input to this router approaches the
43:08 - capacity of the link if we want to put
43:12 - some numbers to that
43:29 - let's say just for this initial case
43:32 - that this link supports say a hundred
43:38 - megabits per second or not right the
43:40 - units but in terms of capacity
43:45 - everything in megabits per second maybe
43:51 - this one supports 2 megabits per second
43:57 - this one's a hundred this one's 10 and
44:02 - every link inside here is is much faster
44:05 - than the others so by the bottleneck
44:07 - this is the smallest in the path so for
44:12 - a denial of service attack on the
44:14 - network resources in this case what we
44:16 - need is that the attacker sends packets
44:20 - at a rate such that coming in here
44:32 - exceeds two megabits per second that's
44:36 - the idea or the aim here well gets close
44:38 - to in most cases that is the attacker
44:41 - wants to send enough packets such that
44:43 - coming into this router is a greater
44:45 - than two megabits per second because the
44:48 - output is only two meters per second and
44:50 - what happens then is that as packets
44:54 - come in only two can come out the others
44:58 - are dropped so if there's three megabits
45:00 - per second coming in and only two going
45:03 - out then one megabit per second is going
45:04 - to be dropped and that will include
45:07 - packets from the normal users those that
45:10 - want to access the web server so the
45:14 - normal users are out
45:20 - on the internet and now trying to access
45:26 - the target web server as well say it's a
45:31 - website they try to visit the website
45:32 - when they send their packet to connect
45:35 - to that website the packet gets to this
45:38 - router and there's a high chance it will
45:41 - be dropped or at least delayed a long
45:44 - time because this router is handing the
45:46 - the many megabits per second coming in
45:49 - from the attacker so that's the idea
45:50 - that the normal users will have their
45:53 - packets dropped they won't be able to
45:55 - connect to the target server so this is
45:59 - an attack on the network resources in
46:02 - particular on this link the question is
46:05 - how do we generate so much traffic
46:08 - what's your idea how do we generate as
46:13 - the attacker so much traffic so that we
46:15 - overload this link multiple ways maybe
46:22 - multiple different sources what
46:24 - application what software could you use
46:26 - to attack you get all your friends to
46:31 - open their web browser and type in the
46:33 - URL and click on the link and press
46:34 - refresh many times okay you've got a
46:39 - hundred friends and you tell them it'll
46:40 - at 6:00 p.m. today refresh on this
46:43 - website so it sends many packets well
46:46 - the dimensions of these links are not in
46:48 - the order of two megabits per second
46:50 - they're usually much much larger such
46:52 - that manually it's very hard to overload
46:54 - like that okay you need maybe hundreds
46:57 - of thousands of people to be doing that
47:00 - so it's very hard to manually do that
47:02 - what we need is some automatic way to do
47:04 - that I think it wasn't last year this
47:10 - year or yes there was talk or late last
47:13 - year there was talk other people were
47:14 - doing that to try to bring down websites
47:16 - but generally it's not a very effective
47:18 - denial of service attack because it
47:20 - requires many people all right they're
47:22 - very hard
47:26 - right it depends upon the capacity here
47:30 - but for let's say very popular websites
47:33 - that have a lot of capacity here it
47:35 - wouldn't be 2 megabits per second it may
47:37 - be hundreds of megabits per second
47:40 - gigabits per second and in fact the
47:42 - website may be distributed across many
47:44 - different servers so you need a large
47:46 - amount of traffic to slow it down and
47:48 - for that you need to automate the
47:51 - sending of packets and the simple
47:53 - approach will look at is using ping
47:56 - because with ping the nice thing about
48:01 - ping is that most computers respond to
48:03 - ping ping or let it through with ping we
48:09 - can set the sending rate we can change
48:17 - the interval
48:30 - so with ping we can both set the size of
48:34 - the message and set the rate of which
48:36 - the source will send so here's two times
48:41 - per second can we set the rate lower ten
48:48 - times per second it says no but if we
48:52 - have administrator rights and we do as
48:55 - the attacker is our computer we can now
49:00 - send 10 times per second and in fact in
49:02 - general we can send as fast as our
49:04 - computer will handle so what the
49:07 - attacker will try to do is send these
49:09 - ping messages as fast as possible such
49:13 - that all of those add up and overload
49:16 - the bottleneck link into the targets
49:18 - network
49:26 - so that's the concept of the simple ping
49:29 - flooding attack the target bottleneck
49:35 - link receives many of these echo request
49:38 - packets from the attacker such that the
49:43 - link is overflowed the ones that do get
49:48 - through the target receives the echo
49:50 - request and with ping you send back an
49:52 - echo reply you send back the response so
49:55 - all the replies come back to the
49:57 - attacker so that's the simple attack
49:59 - you're the attacker what's wrong what do
50:05 - you do this attack he knows everything
50:13 - I'm looking for someone
50:15 - I'll ask him in a moment he doesn't have
50:20 - to see at the exam you do he's just here
50:25 - for fun yeah Mark's here for fun anyone
50:33 - else what's wrong from the attackers
50:36 - perspective
50:40 - all right we can't wait too long mark
50:42 - what's wrong the target knows the IP
50:48 - address of the attacker okay here's one
50:51 - problem Here I am the attacker I'm
50:53 - sending the message to the target inside
50:56 - the IP header is the source IP address
50:59 - so the target yes it's being attacked
51:02 - but it knows who's doing it and now they
51:05 - call up the police and send him around
51:07 - to my or they call up my internet
51:09 - service provider more likely and say
51:11 - you've got a customer that's doing a
51:13 - denial of service attack on me please
51:15 - stop them okay so there's the first
51:17 - problem here because the IP header and
51:23 - IP is the protocol being used to carry
51:25 - ICMP the IP header contains the source
51:28 - and destination address the target knows
51:31 - the source which is the attacker so the
51:34 - attacker is identified so that's a bad
51:36 - thing from the attackers perspective
51:38 - yeah what if the attacker uses some VPN
51:46 - to change their IP address so a VPN
51:52 - would involve and we'll cover in another
51:54 - topic in detail but basically the
51:56 - attacker sends to or gets and other
51:59 - computers send on their behalf right
52:02 - then what does the target identified
52:05 - identifies the VPN server okay now can I
52:10 - then trace it back to you it depends on
52:13 - whether you're paying for that VPN
52:14 - account the target comes to your VPN
52:17 - provider and says at this point in time
52:19 - someone was doing agile of service
52:21 - attack the VPN provider looks up their
52:23 - logs and say ah that's this customer
52:26 - I'll stop them from using my service ok
52:29 - so it's not hard to trace back if if
52:33 - they take the right means but we'll see
52:36 - there it can be hidden to some extent so
52:41 - that's one problem the IP address
52:43 - identifies the target identifies the
52:45 - attacker to the target what's another
52:48 - problem from the attacker even if we
52:52 - didn't worry about being identified
52:55 - I'm getting all the responses back
52:58 - that's a bit of a problem my network
53:01 - slows down - all right let's say I need
53:05 - to send it a hundred megabits per second
53:07 - and I'm getting all the responses back
53:09 - at a hundred megabits per second so that
53:11 - can be inconvenient for the attacker
53:16 - so the idea flood the server the
53:19 - attacker uses ping to send many ICMP
53:21 - requests to the target server it
53:24 - overloads the the link to the to the
53:27 - router of the target Network and that
53:30 - starts to drop the valid packets the
53:32 - packets of the normal users trying to
53:34 - access that website how do we stop that
53:41 - what are the countermeasures we have
53:43 - available we could get the internet
53:46 - service providers to block ping packets
53:49 - don't let them to be sent through our
53:51 - network well that's a possibility and
53:55 - some organizations may do that but it's
53:57 - a bit of a problem because ping packets
53:59 - have a legitimate usage they use for
54:02 - testing connectivity for measuring delay
54:05 - so if everyone blocks them and don't let
54:07 - them be sent then we lose some
54:10 - functionality and not many ISPs will
54:14 - block ping packets some do and you may
54:20 - find the SI T blocks ping packets going
54:22 - out so that's one way but has a drawback
54:26 - that now our normal application is no
54:29 - longer supported the other thing like we
54:33 - saw identify who started the attack
54:35 - identify the source based upon the IP
54:38 - address and take some action contact
54:41 - their ISP you can identify them from the
54:45 - IP address and say this person is doing
54:49 - an attack on me stop them or we'll take
54:52 - you to court or you take the customer to
54:54 - court or take legal action so that's
54:57 - another response and the other problem
55:00 - is that the attackers network is
55:04 - overflowed with all the responses so
55:05 - that's something we'd like to get around
55:07 - from the attackers perspective we'll see
55:11 - that in a moment
55:25 - so what we want to do from the attackers
55:28 - perspective the other problem the other
55:32 - problem is this this assumption the
55:36 - attacker has access to a high-capacity
55:37 - link let's say I want to attack a
55:41 - website and I know I found out that
55:43 - website has a a one gigabit per second
55:46 - link coming into it therefore I need to
55:49 - pay for a link which is at least one
55:51 - gigabit per second how much is one
55:53 - gigabit per second link into your home
55:57 - okay you probably can't buy one in many
55:59 - places all right so we assume that the
56:02 - attacker has access to a high-capacity
56:04 - link so there's maybe a high cost
56:06 - involved from the attackers perspective
56:08 - to do that because as though the web
56:10 - server is usually run by an organization
56:13 - and they have a lot of resources the
56:15 - attacker may not have so many so how can
56:18 - we get around that from the attackers
56:20 - perspective and the approach is to use
56:24 - multiple computers to do the attack
56:31 - so we'll go through the different things
56:33 - that the attacker can do to try and
56:35 - improve the success rate for the attack
56:39 - the first thing I don't want to be
56:41 - identified I don't want the target to
56:44 - know who did it
56:44 - use a fake source address it's called
56:48 - source of ref spoofing we have a fake or
56:51 - a spoofed source address and it's quite
56:53 - easy to do so this just repeats the IP
56:57 - packet header we assume that every
57:00 - packet sent the source addresses of the
57:03 - sending computer the destination is the
57:05 - target
57:06 - therefore the target can identify the
57:08 - attacker that's the problem but it
57:12 - doesn't have to be the targets or the
57:15 - attackers address in the header the
57:19 - attacker can change this address because
57:21 - it's their computer that creates this
57:23 - packet they can set it to anything that
57:24 - they like that's how they set a fake
57:28 - source address as a result the target
57:34 - won't know who performed the attack at
57:37 - least without some further investigation
57:40 - the other benefit from the attacker the
57:42 - responses are not sent back to the
57:43 - attacker the responses are sent to the
57:46 - fake address
57:47 - [Music]
57:51 - let's see
57:58 - we'll show you how to set a fake Saul's
58:00 - address and see a take place when we use
58:03 - a pink
58:48 - just ping see what happens when we ping
58:51 - computer 12
58:59 - we can quickly see what happened here
59:05 - when I ping computer 12 the ping packet
59:09 - we call an ICMP echo request zoom in one
59:20 - more here we sent from computer 11 to
59:24 - computer 12 an ICMP echo request
59:27 - computer 12 where the next line sends
59:29 - back a reply so this is just ping
59:32 - working 12 sends back a reply to
59:36 - computer 11 and then in this case I did
59:39 - it two times I had a count of 2 so
59:41 - that's ping working let's try with a
59:46 - fake address the red node I want to set
59:56 - as my attacker and our first set of fake
59:59 - address and there are different ways to
60:03 - set a fake source address in Linux one
60:05 - simple way is to use the firewall
60:08 - software called IP tables you don't need
60:11 - to remember this command at the moment
60:15 - we're gonna do a process called network
60:17 - address translation I'm going to
60:19 - translate my real address into a fake
60:21 - address do some translation what I'm
60:29 - going to do is after I send the packet
60:31 - or after our Creator to change the
60:33 - address so the Oh add a rule or a yeah
60:38 - rule that will change the address
60:44 - mr. letter using ICMP whenever use ICMP
60:50 - use a fake address and not trying to
60:55 - explain all of it do some what we call
60:58 - source network address translation as
61:02 - the attack I want to change my source
61:04 - address from my real one to a fake one
61:06 - I'm going to translate my source address
61:08 - and I want to translate it to
61:20 - I choose a fake address there's a
61:22 - mistake there okay so this is the
61:26 - command I'm going to use and I'm on node
61:29 - 1 the attackers computer and the idea is
61:32 - when I run this command every ping
61:34 - packet I send the source address will
61:37 - not be my computer address of dot 11 but
61:40 - it we dot 66
61:57 - we will capture on computer to zoom in
62:03 - in a moment
62:06 - now I'm going to ping computer to
62:21 - do I get a reply no so what's happening
62:27 - is when I run ping here and I can stop
62:29 - it because nothing's or it stops by
62:31 - itself when I run ping my computer we'll
62:39 - see in the trace sends out an echo
62:41 - request but the source address is dot 66
62:46 - the packet gets to computer 12 how do I
62:50 - know that may be hard for you to see but
62:54 - it's this line says computer with IP
62:58 - address 12 did receive an ICMP echo
63:01 - request it received the request and that
63:10 - request came from computer 66 so 12
63:14 - received a request from computer 66 and
63:17 - with ping what do you do when you
63:19 - receive a request you send back a reply
63:21 - who do you send the reply to 66 so what
63:27 - my computer does I sorry this is node 2
63:30 - does he wants to send a 66 but on a LAN
63:34 - you need to know the hardware address of
63:37 - computer 66 and the way to do that you
63:42 - use a protocol called ARP address
63:44 - resolution protocol saying who has the
63:47 - IP address 192 168 1.66
63:50 - if you do tell me and it's sending out a
63:54 - message to everyone who is number 66 and
63:57 - it's not going to get a reply because
63:58 - there is no 66 in the network it gets no
64:01 - reply and hence it will never send the
64:04 - echo reply back to anyone because it
64:09 - doesn't know who's 66 is so what's
64:11 - happened here when I set a fake source
64:14 - address to be some on it who doesn't
64:16 - exist the target still receive the
64:19 - packets but didn't send a reply back to
64:22 - me as the attacker and that's a good
64:24 - thing from the attackers perspective the
64:27 - target still got the echo requests but
64:30 - they didn't send back the replies so the
64:34 - attacker doesn't get the replies which
64:36 - is good and who did the attack from the
64:40 - targets perspective computer 66 not the
64:44 - real attacker yep what if we changed the
64:51 - source to the destination then I think
64:54 - the the destination would identify that
64:57 - as an error okay if I receive a message
65:00 - and I was then the source is the same
65:07 - then it would detect that that's
65:09 - something not to respond to we will not
65:13 - try it we'll try another one in a moment
65:15 - but there is another way to handle that
65:17 - so here's a fake source address very
65:19 - easy to implement you can do it on any
65:22 - computer what fake source address should
65:27 - we use here I used it just I chose the
65:33 - random 166 another thing we'll see later
65:37 - what if I choose someone else's address
65:40 - as the fake one what if I choose
65:45 - computer 3 as a source so in this case
65:52 - what's happened
66:09 - what happened in that very very simple
66:11 - case was my source my attacker sent a
66:21 - packet
66:26 - the echo request is sent to a computer
66:29 - going the wrong direction it sent a
66:32 - computer to in my case but the source
66:37 - address was set to the special 66 or
66:41 - that the 66 address the fake address the
66:43 - destination was 12 in the IP header this
66:49 - one receives the echo request and then
66:51 - it tries to find someone to reply to we
66:55 - couldn't find anyone using ARP another
66:59 - case we could do is set the source
67:02 - address to be computer threes IP address
67:05 - if it was source address of computer 13
67:10 - then it would reply to that computer and
67:13 - we'll see that's another feature that
67:15 - can be used in a denial of service
67:17 - attack it's called reflection we can
67:19 - bounce a message across another computer
67:24 - so
67:29 - what we could do from the attackers
67:32 - perspective let's say we want to attack
67:35 - computer - we could send to computer
67:42 - three first and then get them to send a
67:45 - computer to
67:55 - source equals 12
67:59 - destination equals 13 computer 3
68:04 - receives it where does it send the reply
68:09 - to the source of 12
68:20 - so that's the next way that we'll use
68:23 - the fake source address get another
68:27 - computer to send to the target on our
68:30 - behalf so in this case I still want to
68:33 - attack computer two but I send the
68:36 - message to computer three first and set
68:39 - the fake source address to be that of
68:41 - computer - so when computer three
68:44 - replies it goes to computer two so
68:49 - that's as the use of the fake source
68:51 - address not just hiding who the source
68:54 - is
68:55 - but also getting another computer
68:58 - involved to do the attacking so let's
69:06 - see that on our attack
69:17 - the idea is that our attacker now
69:20 - whenever it sends a ping packet it sets
69:23 - a fake source address and it changes
69:25 - that source address on a regular basis
69:27 - so what happens we send the ping packets
69:37 - to the target the target gets them and
69:40 - replies to some fake or some other
69:42 - computer the benefit the attacker
69:46 - doesn't get the response messages
69:48 - another benefit the target can't
69:51 - identify the attacker they see it as
69:54 - someone else so that's the use of the
69:56 - source address fake source addresses
70:11 - and the other approach is called
70:13 - reflection which is you set the
70:18 - destination to be one of the other
70:20 - computers and the source address to a
70:22 - fake address which is that of the target
70:25 - so the approach is I want to send to the
70:29 - target but what I do is I send the ping
70:31 - messages to these other selected maybe
70:33 - randomly selected computers ping them
70:36 - but with a fake source address where the
70:39 - source address is that of the target so
70:42 - this computer receives a echo request
70:44 - source is the target therefore I should
70:46 - send the reply to the target all the
70:49 - other computers receive echo requests
70:52 - and they all have as the source address
70:56 - in those requests the target IP address
70:58 - so they all send to the target so we
71:01 - bounce the messages off the normal
71:03 - computers and this can have the benefit
71:06 - because now the target is not receiving
71:09 - messages from all of the one address its
71:13 - receiving from many others and it can be
71:16 - used to bypass some some filtering
71:19 - techniques that some organizations will
71:22 - use so the source address is a very
71:26 - powerful technique to support denial of
71:29 - service attacks we can reflect the
71:33 - attack but the details I think we'll
71:37 - return to in the next lecture we'll go
71:39 - through and look at how can we what are
71:42 - the countermeasures for using fake
71:44 - source addresses and then how can we
71:47 - expand upon this attack to greatly
71:49 - increase the number of packets being
71:51 - sent so we talked about the capacity and
71:54 - how to overload the server so we'll do
71:57 - that next Tuesday

Cleaned transcript:

in the topic on malicious software we looked at some of the the software that can be used to create problems in computer systems viruses worms and sometimes we mentioned denial of service attacks and we may have given a brief explanation to say that to do something such that our computer system is not available for the normal purposes so if you remember back to the original topic the first topic I think in the first week we listed some some services that we want to provide like confidentiality authentication integrity access control nonrepudiation and the sixth service was availability when we want to secure a computer system if we make that computer system available to our users a security attack would to make that computer system unavailable and such an attack denies the normal users use of the service so we call it a denial of service attack or breviary do s a DOS attack do s attack so what we're going to do in this topic is look at the basic concept of how denial of service attacks are performed to understand how they operate so that we can have techniques to try and prevent them or to minimize the chance that they can be successful to minimize the disruption of our network or computer system they can be quite complex attacked so we're going to use very start from very simple attacks which may no longer be used in practice today but the same concepts are used in real denial of service attacks and you hear about denial of service attacks in the news or in media because they performed a lot by attackers and they're generally easy to perform okay so it doesn't take much to start a denial of service attack so we'll see why that's the case but there are some measures that we can use to try and minimize the chance that they'll be successful so talk about what what they are and then we'll go through some classical denial of service service attacks some very basic ones and we'll use Linux and to demonstrate some I'll demonstrate some in the class and then you'll do a homework probably after the midterm where you do your own denial of service attack what do we mean by do s attack an action that prevents or impairs the authorized use of networks so we can't use the network systems the computer system or applications how does it do that by exhausting resources so the resources that we have available run out because of the attack so some action takes place such that my resource is like CPU my memory the network bandwidth or the disk runs out so it can no longer do the normal things on my computer or my network so a do s attack our tax resources so sometimes we can classify based upon what types of resources they attack what do they try to exhaust it could be network resources so if we're not looking at just a single computer but a network then an attacker can try to overload our network that may mean we have a link maybe we have a link that comes into our server web server or some other servers that we want others to access that link has some capacity maybe a hundred megabits per second is the capacity of that link if the attacker tries to send traffic onto that link that starts to approach that capacity 100 megabits per second then the normal data coming from the normal users may be delayed or may not be sent across that link so one aspect of exhausting the network resources is overloading the links sending so much so many packets such that the links cannot send all of them and that often happens if the link from an organization like your your organization your company your university that has a service on offer the link from the organization to their local Internet service provider is often slower than the links inside the internet service provider and we're trying to illustrate that with a diagram but the the bottleneck arises at the organization's link for example as IT is connected to an Internet service provider to get out outside Internet access let's say that link coming from our ISP that we pay for into si T is 100 megabits per second that's the capacity of our link but within the ISPs network they probably have a much higher capacity because they need to support multiple users so if you think of traffic coming into si si T then the bottleneck link may often be that one coming into si T that 100 megabit per second leap so if that gets overloaded that link that is it's sending all the traffic from an attacker then the traffic of our normal users will not get sent through or be delayed significantly and if if there are many packets sent in and a link gets overloaded what happens eventually packets start to get dropped my capacity is 100 megabits per second but someone is sending at 200 megabits per second so where do the packets go well now and we'll show in a picture they'll get to a router and the draft router can only send out at 100 megabits per second it's getting 200 coming in so it must drop some and it will drop packets so packets from our normal users will not get to the server so that's an example of exhausting network resources other denial of service attacks will look at either applications or the system for example try to crash the the software that handles the forwarding of packets so there's been attacks where you say a router has software running on it that looks at the packet and then sends it on and then looks at the next packet and sends a lot sends it on if that software doesn't work operate work correctly then the router may take a lot of time to look at a packet before it sends it on slowing it down slowing down all the traffic and eventually getting packet drops so some denial of service attacks will try to exhaust the resources of the system that is forwarding the traffic usually using some bugs so bugs in network protocols or to exhaust the applications so for example a web server a web server is not just a computer but is an application software application running on a computer so the apache software is a web server and if we can make that application slow down then that can be considered a denial of service attack by consuming resources from that application for example getting the application to use a lot of RAM use up all the RAM on the computer such that nothing else can run on that computer or use up all the hard disk space many applications will have logs or have to have temporary use of the hard disk if the hard disk is full the applications may stop working so denial of service attacks will try to either exhaust the network resources exhaust usually the intermediate devices intermediate systems between leading up to their application and/or exhaust the application itself and once these are examples of that attacks on different resources so what we're going to do is go through two I think to two very basic denial of service attacks the first one quite quickly and then we'll go through the second one in a bit more depth and I would say that classic denial of service attacks that is some of the the most or the original ones which are popularized but in many networks today they're no longer successful because there are measures to try to stop them but they will show the principles of denial of service attacks and these attacks require some understanding of network protocols and I know everyone here is experts on our experts on network protocols remember your knowledge of TCP maybe TCP we know is a transport protocol okay we know that many applications today use TCP as a transport protocol web browsing email most applications which are not multimedia applications or maybe some gaming applications will use TCP to send data because TCP provides reliability and the way that TCP works is that before you send any data you connect you create a connection from client to server so for the example of a web server the web server is running on one computer your web browser on another computer before you can send a request to for a web page what happens is that your TCP software on your web browser computer tries to set up a connection to the server using TCP and that connection set up normally involves exchange of three messages it's called a threeway handshake we send a special message from the initiating computer in the picture computer a wants to initiate a connection to computer B so computer a sends a special message saying let's start a connection B when it gets that if everything goes fine we'll send back a response saying okay I acknowledge that and here are some information about me that's what B says and then finally a sends back a third message saying thank you for that information from then on we can transfer data this is called a threeway handshake we have three three messages involved the specific names of those messages we refer to them the first one as a syn message it's used to synchronize sequence numbers so when we transfer data we use sequence numbers to keep track of that data which number do we start at well those numbers are synchronized in these first messages so we say this is a syn segment saying from a I want to synchronize with you here's the value I choose B says okay it sent back an acknowledgment and in addition in that same segment B says I want to synchronize with you so we say that this second message is a contains both a synchronized message and an ACK message so we simply call it a syn ack and the last one is a saying thank you I acknowledge your initial values the final act so we'll often see syn syn ack ack as this threeway connection set up after that data is transferred and this happens with all clients want to connect to a server what happens when the client wants to connect to the server in addition to exchanging these messages the server in particular when a client wants to set up a connection the server will store some information about that connection the client says I want to start a connection with you the server will store when it gets our first message it will store some information saying who the client is the address the IP address and port number and maybe even allocate some memory in the upcoming for the upcoming data transfer some buffer space if it's going to use some flow control then it's going to need some buffer space so what it be does when it receives his first syn segment it says ok we're about to transfer data with a I'll send back an ACK and I'll allocate some memory inside the computer for this upcoming data transfer and that memory allocation is what leads to a denial of service attack what an attacker will try to do is to get the server to allocate memory for many connections and eventually consume all the memory of the server and therefore the server will not be able to accept any future connections let's just see the TCP threeway handshake and then try and illustrate that memory allocation first and I think you have this in your handouts this is the TCP segment if you go forward a few pages I've included the TCP segment we don't need to remember it but we do note that the segment includes a source port identifying the application that sent the segment destination port for example the source port would identify my web browser the destination port would identify a web server and the destination port for web server is everyone remembers the destination the port of a web server web server 80 ok port 80 for example for a web server the sequence numbers those who passed my data communications course who made it through to this semester remember that flow control and error control will use sequence numbers to keep track of what's been sent what have we received so sequence numbers and in addition acknowledgment numbers are included in the header and a number of other fields there's data and the flags indicates a type of message whether it's a normal message an ACK a syn message or some other special purpose like a fin message or a reset message so that's the general structure of the TCP segment what I've set up and I'll show you in a moment is a simple network using VirtualBox which looks like this we'll use this for some demos today we have three computers three nodes and you've used the nodes I think for homework the past homeworks and and the current Linux permissions homework so the VirtualBox nodes I've already set them up on my computer there are three inside the same land for a very simple example and node one has IP address 192.168.1.1 no two is dot twelve and no 3.13 okay so we can remember the IP addresses of nodes 1 2 & 3 11 12 and 13 let's just capture a TCP threeway handshake and in my computer node one is gonna be red you'll see in a moment node two is blue I think that's blue and node 3 is green so we can keep track of the different nodes so we have three nodes and we're going to run some experiments to see what first how each EP connection setup works and then later some other denial of service attacks so these are my three terminals although I've already started and logged into those three nodes will zoom in in a moment so node one I've logged into it it's running it's a Linux computer and simular node 2 and node 3 they are there in this one we're only going to need two of the nodes just to show what's going on I want to know no is running a web server okay it has a web server running I hope how do I see if a web server is running maybe we can try netstat netstat shows me the connections I'm listening to in this case with the minus L option it shows me something's listening on port 80 so we guessed that that's a web server there's a web server running on the blue node which is waiting for people to connect to it so what I'm going to do is connect to it from node 1 and at the same time capture the packet so we can see the threeway handshake so I'm going to use TCP dump to capture the packets on node two it's recording everything it receives and then on node one what web browser am I going to use I don't have Firefox I don't have a graphical user interface so links textbased web browser 2 is 12 I'm just going to visit the web page and it works okay that's the default web page and I can quit this is the default for the web server quit yes and now I'll stop the CAPTCHA and we want to look at the packets just to see the connection setup I could look it on the screen but it's very hard to see so instead we'll try and open it in Wireshark and here the captured packets and let's just focus on the TCP packets and then see what happened so what can we observe here we can observe that all right these are packets sent between node 3 and node 2 why node 3 and node 2 because I've got let's check check the IP addresses I've got the wrong file okay I've copied I've copied this file to my computer just before the lecture and I've got it the wrong one but I think we can still see what I want to show you at least here its node 3 and node 2 whereas what I did was just between node 1 and node 2 so that's just the IP addresses are different but it's exactly the same trace it's one I did before what I wanted to show you here is a HTTP message sent by node 3 to node 2 and it's the web browser sending a message to the web server saying I want to get some webpage to notify the forward slash and then the response the web page comes back in this message so this is the data that's been transferred first from client to server and then from server back to client the web request and then the the web page coming back this was done using HTTP but the transport protocol was TCP and the first three messages these three other connections set up and there's a lot of detail there but the thing you should recognize the syn the cynic and the app client sends a syn message to the server that triggers the server to realize someone wants to connect to me and this summon is computer with IP address ending in 13 and a particular port number five seven 401 so what the server does assuming it's going to accept the connection because it's running a web server yes it a liqu AIT's some memory records those values and allocate some buffer space for the upcoming data transfer and sends back an ACK this see nak saying thank you let's let's continue and then the final act so that's the scenic taking place when we get this sin message memory is allocated let's see on our threeway handshake the memory is allocated I don't want that one this one what a denialofservice attack does is as multiple such requests arrive then the idea is that if many syn packets arrive at the server that variant within a small amount of time memory is allocated for each one it receives and if you have a lot enough then the memory will fill up on the server and there'll be no more memory to be allocated for subsequent requests so the idea is to overflow the resources on the target web server and the way that the attacker does that is sends many syn packets to the server not just one not as one per second but send thousands millions per second of syn packets to the web server every one that the web server receives it must allocate a small amount of memory but as that builds up then the memory of the server may fill up and if the memory of the server is full then the next seen packet that comes in cannot be processed because we cannot allocate more memory now how does the attacker achieve this well using different approaches first for this to work the attacker must send lots of syn segments to the server and that's possible but to enhance that and that's what this picture shows what the attacker will try to do is to get other computers to send those syn segments on their behalf and we saw in the last topic if we have some malicious software installed on other computers computers already infected here they are called some slaves the attacker has infected these other ones and it triggers the malicious software on those computers to send the syn segments to the target web server so it's not the attackers computer that's sending the scene segments it's other computers on behalf of the attacker why maybe they've been affected with malicious software so that's how one way to increase the number of scene packets that come to the web server so you have many of these slave servers or we refer to them as bots in the previous topic sending packets then that increases the number of packets arriving at the target web server and makes it easier to overflow the memory at the target web server where does the scenic go to so with TCP 3way handshake we saw when we receive a syn the web server sends back an ACK where does that go to the syn ACK message back to the ones who sent this in ok so the target web server receives a seen message ah someone wants to set up a connection so it sends back a syn ACK saying ok allocates memory the normal behavior for TCP s will allocate some memory with the expectation will receive the actual e the third message if we don't receive the ACK after some time will deallocate that memory and no longer store it but for a short period of time we will allocate that memory now in terms of the attacker they don't want to receive the syn ACK messages there's no need to because they're not going to respond with a third act there's no need for that it's just overloading with the send messages so a common technique again that's used by the attacker not just using many slave servers but setting a fake source address when they send that first scene message if the source address of the syn message is fake where does the syn ACK go to it goes to that fake address which is not the attackers computer and this will be a key technique which is used in other denial of service attacks when the attacker sends a message to the server the target don't include your real IP address as a source include a fake IP address so when the server responds with this syn ACK message it doesn't come back to these slaves it goes somewhere else it's not of concern to us as the attacker in this case so we need we'll see that using fake source addresses is a key part of many denial of service attacks and we'll show that in a moment so TTP this is called the TCP syn flooding attack it's very simple the attacker generates many syn segments going to the server it floods the server with syn segments every scene segment the server receives it allocates a small amount of memory and it allocates a small amount of memory and sends back and responds this syn ACK response but if the source address was a fake address that syn ack response goes to someone else and there's never going to be a final act coming back so what happens at the target web server or the target computer it comes over load of processing sins and storing connection information everyone who receives it allocates a little bit of memory and if it receives millions per second then it allocates a lot of memory and therefore no more memory will be allowed for the subsequent scene messages how to stop this it's not easy in some cases there are some techniques which are required really an upgrade of the TCP software so they wouldn't handle that and that upgrade is sometimes implemented as sim cookies so there's an extra check to make sure that this is really a true connection request from a client another way is to filter packets if we receive millions of seen packets from a particular source then then don't let them in but we'll see that there are problems for filtering packets so TCP syn flooding was one in there earlier or what they're on the main denial of service attacks in the early days it's not so common today because of the filtering and because of some of the countermeasures like sin cookies which are used there are limits on the number of syn messages received so this is an example of overloading the application it's not overloading the network there are only small packets that doesn't use many resources it's overloading the application on the target computer they're using up the RAM usually or the CPU let's look at a similar type of attack but it's overloading a different resource and it's called a ping flooding attack flooding means to fill something up in this case for a network to send many packets we'll go through and look at a similar type of attack called a ping flooding before we go through another reminder the IP address format the IP header format sorry so this at the bottom is the TCP header format and also as reference this is the IP header structure what are the two most important fields in the IP header what would you say if that was an exam question or if we have a quiz next Tuesday the two most important fields in the IP header from our course perspective or from what you know source and destination are two things that we always come across who's sending it who's receiving it right there are many fields here but from our perspective we often care about who's the source and who's the destination there are some other things about the length and and the type but that's important from a security perspective first it identifies computers the source address is in theory it's the address of the original sending computer and the destination is the final destination so when I send a packet from my laptop to the Facebook web server the source address of that packet would be that that identifies my computer and the destination address inside that IP header will be that that identifies the Facebook web server so IP addresses act as some identifier of the computers and that is some security issue in terms of privacy if someone can observe this header they can see who's communicating now there are some special cases or some other issues that arrive that make that not so easy to identify individual computers but generally it we assume that computers can be identified by the IP address from an attackers perspective that's bad because one of the ways to stop attackers is to identify who they are and maybe send the police around them and tell them to stop okay but to take actions outside of the the computer system so what an attacker would like to do is to hide its IP address and one way what quite simply is to send a fake IP address when you send print send fakes set fake source addresses as part of attacks but setting a fake source address also has other benefits so let's go through a ping flooding attack before we explain this network setup let's demonstrate ping zooming in a moment what does ping do ping very simply as an application triggers when I run the application triggers my computer to send a special message to the destination in this case from my computer node 1 to 192 168 1.12 in this case send repeat 5 times and the protocol being used it's not TCP or UDP it's a special one called ICMP the internet control message protocol and the way that it works is my computer sends a ping request to the server to the destination not the server the destination computer winner receives the request in the normal case sends back a reply and when I get a reply my ping software prints a line on the screen saying some information about that reply it took 2 point 8 5 milliseconds to get there and back and then in this case it does it again he repeats 5 times so ping involves sending a request to this destination and getting a response back sometimes we say an echo request and an echo reply how big are those messages approximately how big are the packets being sent across the network in this case megabytes gigabytes approximately how many bytes can anyone see the number up there 64 bytes right there may be some header and some other overheads but we're talking about hundred bytes or so because it says here there was a reply that we got 64 bytes from computer 12 when I pinged from computer what 11 the red one computer 12 64 bytes come back but we know that there may be some overhead due to headers like that IP header may be another 20 bytes the Ethernet header and so on so we're talking about messages in the order of a hundred bytes not very big quite small can we make them bigger how do we make them bigger yeah we can make them bigger as big as we like although there may be some limits we can set the size okay so we've got bigger packets so ping is very simple and ping is supported by most computers they'll respond to ping okay now let's see how ping can be used in a denial of service attack here's our example network structure we say there's the attacker maybe the attackers computer they have their local network there'd be a LAN and this is a router say the attacker owns a router at home or in their business and the attacker gets access to the internet via an Internet service provider tell me 3 Internet service providers you know of anyone who's an ISP in Thailand true AI yes DTAC you're talking about mobile phone providers yes they are internet providers also but yeah there are a number of ISPs if you look on maps of the internet there are tens of or even a hundred plus companies that provide Internet service inside Thailand so what we do isn't as an end user we pay the ISP for access and we can think of the network structure is that for my if I'm the attacker my router has a connection going into the ISPs network there's a cable coming into my home from the ISPs network or into my business and the internet service provider has some router then they connect to a larger ISP maybe a small one connects to a larger one and they connect out to other ISPs in other countries and that's what the internet is made up of now think of the target maybe some organization and the target may be all say in that organization maybe a web server the attacker wants to make make it so that others cannot access this web server so we can think of the targa computer and the similar structure the target has a network their own router and they connect to the internet via their ISP Internet service provider of the target and they connect out now let's assume that in terms of the links between the attacker and the target let's assume the slowest link across that path is this one leading into the targets network let's say that's what we call the bottleneck link the slowest one may be internal for the target's network they've got a fast land very fast there but when they pay for a connection to their ISP that's the most expensive part and therefore that's the slowest part of the network across the different ISP networks usually they have very high speed links so across throughs network across Quixote's network inside their network they have very high speed links but going to the end customer that's one of the slower links so let's assume that's the bottleneck link and that the attacker may also connect to an ISP but it's faster than the targets that may not be so realistic but we'll come back to that in a moment so this is the bottleneck link so what the attacker tries to do is to send enough packets to the target such that this bottleneck link is overloaded it has some capacity if we send enough packets in such that we start to reach that capacity then the the link is carrying packets from there the attacker and it cannot carry the packets from the normal users and normal users out on the internet that are trying to access that the target web server cannot access denied service that's the idea here how that is achieved is by the attacker sending enough packets such that the input to this router approaches the capacity of the link if we want to put some numbers to that let's say just for this initial case that this link supports say a hundred megabits per second or not right the units but in terms of capacity everything in megabits per second maybe this one supports 2 megabits per second this one's a hundred this one's 10 and every link inside here is is much faster than the others so by the bottleneck this is the smallest in the path so for a denial of service attack on the network resources in this case what we need is that the attacker sends packets at a rate such that coming in here exceeds two megabits per second that's the idea or the aim here well gets close to in most cases that is the attacker wants to send enough packets such that coming into this router is a greater than two megabits per second because the output is only two meters per second and what happens then is that as packets come in only two can come out the others are dropped so if there's three megabits per second coming in and only two going out then one megabit per second is going to be dropped and that will include packets from the normal users those that want to access the web server so the normal users are out on the internet and now trying to access the target web server as well say it's a website they try to visit the website when they send their packet to connect to that website the packet gets to this router and there's a high chance it will be dropped or at least delayed a long time because this router is handing the the many megabits per second coming in from the attacker so that's the idea that the normal users will have their packets dropped they won't be able to connect to the target server so this is an attack on the network resources in particular on this link the question is how do we generate so much traffic what's your idea how do we generate as the attacker so much traffic so that we overload this link multiple ways maybe multiple different sources what application what software could you use to attack you get all your friends to open their web browser and type in the URL and click on the link and press refresh many times okay you've got a hundred friends and you tell them it'll at 600 p.m. today refresh on this website so it sends many packets well the dimensions of these links are not in the order of two megabits per second they're usually much much larger such that manually it's very hard to overload like that okay you need maybe hundreds of thousands of people to be doing that so it's very hard to manually do that what we need is some automatic way to do that I think it wasn't last year this year or yes there was talk or late last year there was talk other people were doing that to try to bring down websites but generally it's not a very effective denial of service attack because it requires many people all right they're very hard right it depends upon the capacity here but for let's say very popular websites that have a lot of capacity here it wouldn't be 2 megabits per second it may be hundreds of megabits per second gigabits per second and in fact the website may be distributed across many different servers so you need a large amount of traffic to slow it down and for that you need to automate the sending of packets and the simple approach will look at is using ping because with ping the nice thing about ping is that most computers respond to ping ping or let it through with ping we can set the sending rate we can change the interval so with ping we can both set the size of the message and set the rate of which the source will send so here's two times per second can we set the rate lower ten times per second it says no but if we have administrator rights and we do as the attacker is our computer we can now send 10 times per second and in fact in general we can send as fast as our computer will handle so what the attacker will try to do is send these ping messages as fast as possible such that all of those add up and overload the bottleneck link into the targets network so that's the concept of the simple ping flooding attack the target bottleneck link receives many of these echo request packets from the attacker such that the link is overflowed the ones that do get through the target receives the echo request and with ping you send back an echo reply you send back the response so all the replies come back to the attacker so that's the simple attack you're the attacker what's wrong what do you do this attack he knows everything I'm looking for someone I'll ask him in a moment he doesn't have to see at the exam you do he's just here for fun yeah Mark's here for fun anyone else what's wrong from the attackers perspective all right we can't wait too long mark what's wrong the target knows the IP address of the attacker okay here's one problem Here I am the attacker I'm sending the message to the target inside the IP header is the source IP address so the target yes it's being attacked but it knows who's doing it and now they call up the police and send him around to my or they call up my internet service provider more likely and say you've got a customer that's doing a denial of service attack on me please stop them okay so there's the first problem here because the IP header and IP is the protocol being used to carry ICMP the IP header contains the source and destination address the target knows the source which is the attacker so the attacker is identified so that's a bad thing from the attackers perspective yeah what if the attacker uses some VPN to change their IP address so a VPN would involve and we'll cover in another topic in detail but basically the attacker sends to or gets and other computers send on their behalf right then what does the target identified identifies the VPN server okay now can I then trace it back to you it depends on whether you're paying for that VPN account the target comes to your VPN provider and says at this point in time someone was doing agile of service attack the VPN provider looks up their logs and say ah that's this customer I'll stop them from using my service ok so it's not hard to trace back if if they take the right means but we'll see there it can be hidden to some extent so that's one problem the IP address identifies the target identifies the attacker to the target what's another problem from the attacker even if we didn't worry about being identified I'm getting all the responses back that's a bit of a problem my network slows down all right let's say I need to send it a hundred megabits per second and I'm getting all the responses back at a hundred megabits per second so that can be inconvenient for the attacker so the idea flood the server the attacker uses ping to send many ICMP requests to the target server it overloads the the link to the to the router of the target Network and that starts to drop the valid packets the packets of the normal users trying to access that website how do we stop that what are the countermeasures we have available we could get the internet service providers to block ping packets don't let them to be sent through our network well that's a possibility and some organizations may do that but it's a bit of a problem because ping packets have a legitimate usage they use for testing connectivity for measuring delay so if everyone blocks them and don't let them be sent then we lose some functionality and not many ISPs will block ping packets some do and you may find the SI T blocks ping packets going out so that's one way but has a drawback that now our normal application is no longer supported the other thing like we saw identify who started the attack identify the source based upon the IP address and take some action contact their ISP you can identify them from the IP address and say this person is doing an attack on me stop them or we'll take you to court or you take the customer to court or take legal action so that's another response and the other problem is that the attackers network is overflowed with all the responses so that's something we'd like to get around from the attackers perspective we'll see that in a moment so what we want to do from the attackers perspective the other problem the other problem is this this assumption the attacker has access to a highcapacity link let's say I want to attack a website and I know I found out that website has a a one gigabit per second link coming into it therefore I need to pay for a link which is at least one gigabit per second how much is one gigabit per second link into your home okay you probably can't buy one in many places all right so we assume that the attacker has access to a highcapacity link so there's maybe a high cost involved from the attackers perspective to do that because as though the web server is usually run by an organization and they have a lot of resources the attacker may not have so many so how can we get around that from the attackers perspective and the approach is to use multiple computers to do the attack so we'll go through the different things that the attacker can do to try and improve the success rate for the attack the first thing I don't want to be identified I don't want the target to know who did it use a fake source address it's called source of ref spoofing we have a fake or a spoofed source address and it's quite easy to do so this just repeats the IP packet header we assume that every packet sent the source addresses of the sending computer the destination is the target therefore the target can identify the attacker that's the problem but it doesn't have to be the targets or the attackers address in the header the attacker can change this address because it's their computer that creates this packet they can set it to anything that they like that's how they set a fake source address as a result the target won't know who performed the attack at least without some further investigation the other benefit from the attacker the responses are not sent back to the attacker the responses are sent to the fake address let's see we'll show you how to set a fake Saul's address and see a take place when we use a pink just ping see what happens when we ping computer 12 we can quickly see what happened here when I ping computer 12 the ping packet we call an ICMP echo request zoom in one more here we sent from computer 11 to computer 12 an ICMP echo request computer 12 where the next line sends back a reply so this is just ping working 12 sends back a reply to computer 11 and then in this case I did it two times I had a count of 2 so that's ping working let's try with a fake address the red node I want to set as my attacker and our first set of fake address and there are different ways to set a fake source address in Linux one simple way is to use the firewall software called IP tables you don't need to remember this command at the moment we're gonna do a process called network address translation I'm going to translate my real address into a fake address do some translation what I'm going to do is after I send the packet or after our Creator to change the address so the Oh add a rule or a yeah rule that will change the address mr. letter using ICMP whenever use ICMP use a fake address and not trying to explain all of it do some what we call source network address translation as the attack I want to change my source address from my real one to a fake one I'm going to translate my source address and I want to translate it to I choose a fake address there's a mistake there okay so this is the command I'm going to use and I'm on node 1 the attackers computer and the idea is when I run this command every ping packet I send the source address will not be my computer address of dot 11 but it we dot 66 we will capture on computer to zoom in in a moment now I'm going to ping computer to do I get a reply no so what's happening is when I run ping here and I can stop it because nothing's or it stops by itself when I run ping my computer we'll see in the trace sends out an echo request but the source address is dot 66 the packet gets to computer 12 how do I know that may be hard for you to see but it's this line says computer with IP address 12 did receive an ICMP echo request it received the request and that request came from computer 66 so 12 received a request from computer 66 and with ping what do you do when you receive a request you send back a reply who do you send the reply to 66 so what my computer does I sorry this is node 2 does he wants to send a 66 but on a LAN you need to know the hardware address of computer 66 and the way to do that you use a protocol called ARP address resolution protocol saying who has the IP address 192 168 1.66 if you do tell me and it's sending out a message to everyone who is number 66 and it's not going to get a reply because there is no 66 in the network it gets no reply and hence it will never send the echo reply back to anyone because it doesn't know who's 66 is so what's happened here when I set a fake source address to be some on it who doesn't exist the target still receive the packets but didn't send a reply back to me as the attacker and that's a good thing from the attackers perspective the target still got the echo requests but they didn't send back the replies so the attacker doesn't get the replies which is good and who did the attack from the targets perspective computer 66 not the real attacker yep what if we changed the source to the destination then I think the the destination would identify that as an error okay if I receive a message and I was then the source is the same then it would detect that that's something not to respond to we will not try it we'll try another one in a moment but there is another way to handle that so here's a fake source address very easy to implement you can do it on any computer what fake source address should we use here I used it just I chose the random 166 another thing we'll see later what if I choose someone else's address as the fake one what if I choose computer 3 as a source so in this case what's happened what happened in that very very simple case was my source my attacker sent a packet the echo request is sent to a computer going the wrong direction it sent a computer to in my case but the source address was set to the special 66 or that the 66 address the fake address the destination was 12 in the IP header this one receives the echo request and then it tries to find someone to reply to we couldn't find anyone using ARP another case we could do is set the source address to be computer threes IP address if it was source address of computer 13 then it would reply to that computer and we'll see that's another feature that can be used in a denial of service attack it's called reflection we can bounce a message across another computer so what we could do from the attackers perspective let's say we want to attack computer we could send to computer three first and then get them to send a computer to source equals 12 destination equals 13 computer 3 receives it where does it send the reply to the source of 12 so that's the next way that we'll use the fake source address get another computer to send to the target on our behalf so in this case I still want to attack computer two but I send the message to computer three first and set the fake source address to be that of computer so when computer three replies it goes to computer two so that's as the use of the fake source address not just hiding who the source is but also getting another computer involved to do the attacking so let's see that on our attack the idea is that our attacker now whenever it sends a ping packet it sets a fake source address and it changes that source address on a regular basis so what happens we send the ping packets to the target the target gets them and replies to some fake or some other computer the benefit the attacker doesn't get the response messages another benefit the target can't identify the attacker they see it as someone else so that's the use of the source address fake source addresses and the other approach is called reflection which is you set the destination to be one of the other computers and the source address to a fake address which is that of the target so the approach is I want to send to the target but what I do is I send the ping messages to these other selected maybe randomly selected computers ping them but with a fake source address where the source address is that of the target so this computer receives a echo request source is the target therefore I should send the reply to the target all the other computers receive echo requests and they all have as the source address in those requests the target IP address so they all send to the target so we bounce the messages off the normal computers and this can have the benefit because now the target is not receiving messages from all of the one address its receiving from many others and it can be used to bypass some some filtering techniques that some organizations will use so the source address is a very powerful technique to support denial of service attacks we can reflect the attack but the details I think we'll return to in the next lecture we'll go through and look at how can we what are the countermeasures for using fake source addresses and then how can we expand upon this attack to greatly increase the number of packets being sent so we talked about the capacity and how to overload the server so we'll do that next Tuesday
