With timestamps:

00:00 - everybody this is Brian and welcome to
00:02 - the first Python tutorial I wanted to do
00:06 - Python for a while
00:07 - I should dispel a few myths first
00:10 - everybody hears the word Python and I
00:12 - think this big evil monster snake and I
00:14 - mean even the icon for it is like these
00:16 - two snakes in a yin-yang symbol so
00:18 - everybody thinks of this little guy
00:19 - right here it's actually not the case
00:21 - pythons been around for a long long time
00:23 - and it was actually named after the
00:24 - Monty Python if you have no idea who
00:27 - Monty Python is I feel very sorry for
00:29 - you and you should google it because
00:30 - they're hilarious their comedy is
00:32 - actually timeless but it's the whimsical
00:34 - nature of Python it's the language is
00:36 - tried to emulate that so if you go to
00:38 - Python org we'll be working with the
00:41 - newest version Python 3.43 that may
00:45 - actually date this video at some point
00:46 - if they drastically changed Python but
00:49 - you'll see it's available for Windows
00:51 - Mac Linux and pretty much everything in
00:53 - between and it even comes with full
00:54 - source code some things you should know
00:57 - about Python before we get started is
00:58 - they they really say batteries include
01:01 - this kind of the the lingo here for
01:04 - Python and that's I've got to agree with
01:06 - it it's very powerful and it's not very
01:08 - chatty and what do I mean by chatty some
01:11 - programs you have to write hundreds of
01:13 - lines of code just to print something on
01:15 - the screen Python it's just dirt simple
01:17 - and if you're in a university a lot of
01:20 - universities are actually replacing Java
01:21 - with Python as the learning language so
01:25 - I've wanted to kind of get into it I
01:27 - have a heavy security background and
01:29 - pythons actually become the language of
01:31 - choice among hackers
01:33 - not all hackers but a vast majority of
01:35 - them love Python because it's just very
01:37 - easy to work with and very powerful
01:39 - Python does come with a built in IDE
01:42 - called idle which I personally cannot
01:45 - stand
01:46 - especially for teaching purposes so I'll
01:48 - be using jetbrains PyCharm if you've
01:52 - watched any of my tutorials you know
01:53 - that we just you know take the seatbelt
01:55 - off and just dive headfirst and and I'm
01:58 - going to kind of slow it down a little
01:59 - bit because I realized that being an
02:01 - introductory language especially being
02:03 - taught at universities and some of my
02:04 - videos are actually shown at
02:05 - universities I want to kind of dumb this
02:07 - down as if this was your first
02:08 - programming language now that disclaimer
02:11 - being said I am NOT going to hold your
02:14 - hand through this whole process we're
02:15 - gonna take our seat belts off and dive
02:17 - right in
02:17 - so let's just go to it maybe if I can
02:21 - find a charm there we go
02:25 - so we'll load up pycharm I'm using the
02:28 - Community Edition 4 which is absolutely
02:30 - free and I'm just going to kind of move
02:33 - the window out here I should note that
02:35 - you're gonna need Python installed
02:37 - before you do this and you'll know
02:39 - because if you go to create a new
02:40 - project and you don't get a Python
02:42 - version here then you need to do
02:45 - something about that and what you do is
02:46 - you go out to python org download the
02:49 - version that's right for you if you're
02:50 - on Windows it's just a normal installer
02:51 - you know click Next Next and you're done
02:54 - if you're on a Linux UNIX BSD Mac
02:57 - whatever derivative you're gonna
02:59 - actually have to compile it by doing you
03:02 - know slash configure and if you've done
03:04 - this before you've done this a million
03:05 - times you just go into the directory you
03:07 - do slash configure make make test make
03:10 - test on my machine actually failed but
03:13 - then you do sudo make install and that
03:15 - actually installs it as Python 3 so you
03:18 - can open a command line here and
03:20 - you'll notice if I just type Python it
03:23 - says python 276 which is the older
03:27 - version so I'm gonna control D out of
03:29 - there I'm gonna do Python 3 and there's
03:33 - 3 for 3 that's the version will be
03:35 - working with right here so just bear
03:37 - that in mind if you have the old version
03:39 - of Python you'll want the new version
03:41 - for these tutorials and when I say old
03:43 - and new I should really explain that
03:45 - when you go out there and let's actually
03:47 - just rewind here a minute when you go
03:50 - out to Python you go to downloads you'll
03:51 - see you get the option between 3/4 and
03:53 - 279
03:54 - the reason is back in I want to say
03:59 - somebody out there will correct me if
04:00 - I'm wrong because the Internet's full of
04:02 - experts but it's like python 2.5 they
04:05 - actually made a radical change to the
04:08 - Python libraries I shouldn't say radical
04:12 - radical enough that it broke legacy code
04:14 - so they've kind of branched it off here
04:16 - so they've got the old version of Python
04:18 - and the new version of Python and
04:21 - there's some gotchas so if you try to
04:23 - use my code with the old version it just
04:25 - simply won't work because it doesn't
04:26 - understand what you're trying to tell it
04:28 - so just bear that in mind you'll need
04:30 - the newest version why am i starting off
04:32 - with the newest version well eventually
04:34 - the old python will get phased out and
04:37 - render my tutorials useless so what's
04:39 - the point of wasting my time and yours
04:41 - alright so once you've got python set up
04:44 - if you're kind of like a little computer
04:46 - nerd like me you're gonna want to look
04:47 - and see what's in here you'll see
04:48 - there's the Python binary and there's
04:50 - all the little files that are created
04:52 - pretty awesome huh and if you go out to
04:55 - use your local Ben you will actually see
04:57 - there's the the symbolical link for
04:59 - python 3
05:01 - jumping back into pycharm here we're
05:04 - just going to pick the newest version
05:07 - we're going to call this videos why not
05:16 - and hit create and tada there's pycharm
05:20 - in all its glory I'm gonna resize this a
05:21 - little bit here now I know I'm probably
05:24 - gonna get a million messages saying why
05:25 - are using PyCharm there's better IDs out
05:27 - there you know I tried a few of them and
05:29 - I wasn't impressed with a couple of them
05:31 - so I just I really liked PyCharm I don't
05:34 - know what it is I'm not in any way
05:36 - affiliated with their company at all I
05:38 - haven't even bought the product I just
05:40 - really liked the ID all right so first
05:44 - thing we're gonna do is make a Python
05:46 - file and we're gonna call this hmm
05:50 - we need a descriptive name let's call it
05:53 - video one because this is our first
05:55 - video and you see this author root shell
05:59 - well that's my user name on my computer
06:01 - so I'm going to change that for future
06:02 - tutorials and it puts that in there
06:05 - automatically for you now we are going
06:10 - to do the obligatory HelloWorld program
06:13 - and what I mean by obligatory um in
06:15 - every language your first introductory
06:17 - program is hello world where you
06:19 - literally just print hello world on the
06:21 - screen and it's this big inspiring thing
06:24 - and there's harps and kittens and
06:25 - rainbows and don't expect fireworks it's
06:27 - actually pretty fast and this one
06:30 - I used to do parentheses and then quotes
06:34 - hello world and we are gonna actually
06:37 - right-click here and run video one and
06:40 - you'll see down here hello world and
06:44 - that's actually why I chose pycharm
06:46 - because it's very easy to see what's
06:48 - going on there's no magic behind the
06:49 - screen and you can see everything that's
06:51 - going on here and if there's an error
06:53 - it'll print it out you know pretty plain
06:55 - English here
06:56 - if you try this and you get an error
06:58 - message it's because you're running the
07:00 - old version of Python which is expecting
07:02 - something like this hello world which as
07:07 - you can see it's saying hey you know end
07:09 - of statement expected now if you don't
07:12 - know what a statement is or any of that
07:13 - you're very new to computers don't worry
07:14 - we're gonna cover all this in future
07:16 - tutorials that's it for this tutorial
07:19 - like I said painless no fuss no muss
07:22 - we're gonna dive into these headfirst
07:24 - and you really should go out to my web
07:28 - site void roms calm and click on
07:31 - tutorials and it's not there yet but I
07:34 - will add a Python folder in here and the
07:37 - source code for this and all the other
07:39 - tutorials I've done are out here also
07:41 - visit Facebook and join the void realms
07:44 - Facebook group there's like 200
07:46 - programmers in there so if you have
07:47 - questions instead of emailing me and
07:50 - waiting six months for me to find your
07:51 - email it's much easier just to say hey
07:53 - guys I got a question
07:54 - well thanks for watching I hope you
07:56 - found this educational and everybody
07:58 - this is Brian welcome to the second
08:00 - Python tutorial we're just gonna jump
08:03 - right back on in here if you watch video
08:05 - one we did the hello world program we're
08:08 - going to kind of continue on with that
08:10 - make any Python file here and we'll call
08:12 - it the very descriptive video too
08:15 - and like I said in the intro we're going
08:19 - to cover this as if you're very new to
08:21 - programming so if you're a veteran
08:22 - programmer you can probably fast-forward
08:24 - through a lot of this and just kind of
08:25 - pick up the highlights there are a
08:27 - couple little things and I'll try to
08:29 - point those out so in every program you
08:32 - need to leave comments and a comment is
08:37 - this just to comment it's you letting
08:41 - yourself know what you're doing at some
08:43 - point you're gonna get stuck you're
08:44 - gonna write some big long function and
08:47 - you're gonna want to write a comment
08:48 - saying hey this is what I did the
08:52 - comment is not processed by the Python
08:56 - processor if that makes any sense
08:58 - meaning is just a note for you the
09:01 - program doesn't care so you can type
09:02 - literally anything you want
09:04 - probably best to put a descriptive note
09:07 - comments are good so always keep that in
09:11 - mind
09:12 - we're gonna save this little guy here
09:15 - now the core of any program is a
09:20 - variable and I'm sure your instructors
09:22 - if you're in the university have said
09:24 - you know a variable is this sector of
09:26 - memory that a pointer points to and your
09:28 - eyes start glazing over and you start
09:30 - thinking about playing hockey or video
09:31 - games or call of duty or you know
09:33 - whatever all you need to know is a
09:35 - variable is something that'll change
09:37 - that's the actual literal scientific
09:39 - term for it a variable is something that
09:41 - will change in Python variables are very
09:44 - easy so we're just gonna say let's if I
09:47 - could actually spell first equal
09:51 - Brian's my first name we'll say last
09:54 - equal and Karen's is my last name and
09:58 - age oh boy I don't know if I want to put
10:00 - this out on the Internet
10:01 - I'm 40 years old and we're gonna
10:05 - actually make a comment here these are
10:09 - variables now if you try running this
10:16 - you'll see it does absolutely nothing it
10:19 - just says we ran and then whatever the
10:21 - name of the script is and finish with
10:23 - exit code zero hmm
10:27 - exit code zero does that mean it's an
10:29 - error no actually code zero means there
10:32 - was no error programs will return
10:34 - different codes and those codes are
10:35 - usually called error codes if you have
10:39 - windows and you've ever seen the
10:40 - infamous blue screen it's got some big
10:42 - garbling number that's the error code so
10:45 - exit codes here is a good thing what
10:49 - we're gonna do now is we're gonna learn
10:52 - how to print things out we already did
10:54 - the hello world
10:59 - we're going to say print in all its
11:01 - glory that's what this tutorial is all
11:02 - about is printing so we're gonna say
11:05 - print and we've done the hello world so
11:10 - that's nothing new you can also print
11:14 - and do single quotes hello world and
11:18 - what's really the difference here I mean
11:19 - if we let's just run this guy you can
11:23 - see it both prints hello world what's
11:25 - really the difference nothing actually
11:28 - it's just personal preference the single
11:30 - quotes make it easier to put a quote in
11:32 - the string and the double quotes make it
11:34 - easier to put a single quote in the
11:35 - string because let's say you want to say
11:41 - mmm David's cat notice how oh yeah
11:48 - suddenly now we got an error unresolved
11:50 - reference cat you'd have to put that
11:53 - inside of double quotes that way it
11:55 - doesn't process the single quote so if
11:57 - we run this again you should see David's
11:59 - cat so that's really all you need to
12:02 - know when it comes to that my personal
12:05 - style is they typically do double quotes
12:06 - you can change it however you want
12:11 - so what happens if we want to print out
12:14 - a variable well you may have already
12:16 - guessed the reason why I use pycharm
12:19 - here is it has this thing called
12:20 - intellisense you see this little pop-up
12:22 - that keeps appearing that tells you
12:24 - basic structure of what it's expecting
12:27 - you see print object separator and file
12:29 - flush well I won't really get into that
12:31 - in this tutorial you just know that what
12:33 - it's expecting is some object everything
12:36 - in Python is an object as an
12:38 - object-oriented language so we're gonna
12:40 - say first which is the name of this
12:43 - variable up here
12:49 - put the variable
12:54 - then you see there's Brian our variable
12:57 - now what happens if you want to print
12:59 - more than one variable at a time we'll
13:02 - say print and you can say oops first
13:08 - plus and plus last them you can do that
13:15 - and a lot of people do that exact same
13:19 - way and you see there's my name Brian
13:20 - Cairns but there's an easier and a more
13:24 - correct way string formatting and what
13:30 - you're going to do is a little bit of
13:31 - voodoo magic here but we'll explain this
13:33 - as we go
13:34 - we'll say print and you're just going to
13:38 - do your quotes and you're gonna say my
13:41 - name is and you're going to do a percent
13:46 - sign and an S which represents a string
13:50 - I am percent D for decimal years old
13:58 - now I'm gonna save this and run it just
14:01 - to show you what happens it says my name
14:04 - is % s I am % D years old that makes no
14:08 - sense what it's expecting is these are
14:10 - just placeholders and that's the format
14:13 - symbol or actually the percent symbol
14:15 - saying it's expecting a string it's
14:17 - expecting a decimal a string is just an
14:21 - assembly of characters like my name is a
14:23 - string a decimal is a number it could
14:26 - also be called an integer floating-point
14:28 - processor etc etc but basically it's
14:31 - expecting a decimal number now we need
14:35 - to do the percent sign to tell it it's
14:37 - expecting a format and we will need to
14:43 - give it what's called a tuple which will
14:47 - explain that in a future tutorial is
14:48 - like I said a little bit of black magic
14:49 - going on here I'll say Brian Cairns
14:56 - and 40
15:00 - run that and you see Oh what is this
15:04 - trace back most recent call line 21
15:07 - let's right-click here and get some line
15:10 - numbers so line 21 if you actually click
15:12 - that link it'll take you right to the
15:13 - line hmm a number is required not STR
15:23 - that's what's going on this is an error
15:25 - and I want to kind of walk you through
15:28 - this because when you're sitting at home
15:29 - and you're typing away on this you'll
15:32 - make errors and mistakes and it won't
15:33 - line up at the video and you're gonna go
15:35 - what I do different I kind of wanted to
15:36 - explain this trace back that basically
15:39 - means it's going to trace back in the
15:40 - code but the file is the file we're
15:43 - actually running the line is the line
15:45 - number line 21 and if your cursors up
15:48 - here in PyCharm you can actually click
15:49 - it it'll take you directly to the line
15:51 - and it'll say in module module something
15:54 - we haven't covered yet and it gives you
15:56 - the actual code print blah blah blah
15:58 - blah blah the type error percent the
16:01 - format so we're looking at this guy
16:02 - right here percent D is a number
16:05 - required you know a numbers required not
16:08 - a string so what is really expecting is
16:14 - a number
16:18 - now suddenly it runs my name is Brian
16:20 - I'm 40 years old a little mischievous on
16:23 - my part I apologize if that was a little
16:24 - bit confusing but I want to get you used
16:26 - to making mistakes part of learning is
16:29 - making mistakes and fixing them people
16:30 - get very frustrated when they make a
16:32 - mistake I want you to make mistakes all
16:35 - right so let's explain this code and
16:38 - let's really understand what this thing
16:39 - is doing we have a string
16:42 - you know just a collection of characters
16:44 - and inside that string we have some
16:46 - special things going on here we have
16:47 - these formatting characters the percent
16:50 - s and the percent D meaning it's
16:52 - expecting a string and a number then we
16:55 - have the percent sign saying hey we are
16:57 - formatting this string so it's going to
16:59 - look for the percent signs and we're
17:01 - handing a tupple which is a list
17:03 - basically or an array if you're used to
17:05 - other languages which is think of it
17:08 - like a collection of objects it can be
17:11 - numbers letters other objects things of
17:15 - that nature and we've got two of them in
17:17 - there Brian and age now we can actually
17:20 - substitute that with you guessed it
17:22 - variables first and age these are the
17:27 - variables that we declared up here first
17:31 - and age let's run that again you'll see
17:34 - sure enough and we can even modify this
17:37 - again
17:43 - so we've got first last in age is what
17:46 - we're passing to this my name is Brian
17:49 - Karen's I am 40 years old whoo that's a
17:53 - mouthful there so that in all its glory
17:56 - is string formatting and how to create
17:59 - and hopefully resolve and fix an error
18:03 - message a lot of this is pretty
18:05 - intuitive but let's say you just kind of
18:08 - like goofed something up like let's add
18:09 - a little you know something there you'll
18:11 - see the little red squiggly and maybe
18:13 - that's not the best one let's just add
18:17 - some garbage in there yeah you'll see
18:18 - the red squiggly so a lot of time you
18:20 - can just mouse over and it'll tell you
18:22 - what's going on unresolved reference to
18:24 - and you can click on a little more and
18:26 - it gives you a detailed explanation
18:28 - that's part of why I chose this IDE
18:31 - because I see a lot of people learning
18:33 - Python struggling with the built-in idle
18:35 - and it's really not meant for beginners
18:38 - I'm sorry it's just not alright so we've
18:43 - made a variable we've printed the
18:46 - variable and we've shown different ways
18:47 - of printing it one thing we really
18:50 - haven't covered is string processing
18:52 - which we're going to do in the next
18:53 - tutorial what do I mean by string
18:56 - processing I want to cover this in this
18:59 - tutorial cuz I want to solidify what we
19:01 - just learned about variables a variable
19:03 - is something that'll change
19:04 - python is an object-oriented language
19:06 - you hear that a lot but what does it
19:09 - really mean well an object is an
19:12 - instance of something meaning it's a
19:15 - variable everything in python goes down
19:18 - to what's called an object or a base
19:20 - object if you've learned Java you're
19:22 - familiar with this concept so just think
19:25 - of object it's like a widget it's just
19:27 - this thing that exists and everything
19:29 - grows upon that so
19:32 - the variables an object you're an object
19:35 - your cat's an object your dogs an object
19:37 - your computers an object everything's an
19:39 - object at some point so with objects you
19:43 - can actually manipulate those objects
19:45 - and change them and that's what we're
19:47 - going to do in the next tutorial string
19:48 - processing well hope you found this
19:51 - educational and entertaining please
19:53 - visit my website for the source code to
19:55 - this and all of their tutorials it's
19:57 - Lloyd Rome's comm and I can't stress it
19:59 - enough join the void realms Facebook
20:01 - group there's like 200 of us in there
20:03 - it's a lot faster and easier to ask you
20:06 - know 200 people for help than to email
20:08 - me and wait months years decades
20:11 - centuries for me to respond hey
20:15 - everybody this is Brian and welcome to
20:17 - the third tutorial with Python we're
20:20 - going to cover string processing so
20:22 - let's actually close these other
20:25 - tutorials that I've done this I think
20:28 - this is going to be the last one for
20:29 - tonight I had steak for dinner and I'm
20:30 - starting to go into a food coma here so
20:33 - video 3 is going to be the very
20:35 - descriptive name of this thing and we're
20:39 - just gonna call this super awesome time
20:42 - with strings
20:46 - so I'm just gonna make a variable and
20:50 - we're gonna say hello world and because
20:53 - I really detest the hello world
20:54 - tutorials we're gonna just chop this
20:56 - thing up and have all sorts of fun with
20:57 - it so we know what a variable is we
21:00 - understand that a variable something
21:02 - that'll change we understand that things
21:04 - in Python are objects and with objects
21:06 - we can do things and that's what this
21:08 - tutorial is really about is doing things
21:10 - with those objects that we create
21:12 - does that sound confusing it is kind of
21:15 - confusing and that's why I hated
21:16 - computer science classes but it's
21:18 - actually a very simple concept so the
21:21 - first thing we're going to do is we're
21:22 - going to print the length of a string
21:29 - and my super-awesome spelling ability
21:33 - all right print and we're going to say
21:38 - string is percent d bytes long and you
21:44 - remember this from our last tutorial now
21:47 - we're just gonna say Len well maybe Len
21:51 - STR and STR is our variable so we're
21:56 - getting we're calling the Len function
21:58 - will cover functions in future tutorials
22:00 - but a function is just a collection of
22:02 - code that runs inside of a scope super
22:05 - confusing I know but it'll be very clear
22:07 - once we get there and we're gonna just
22:10 - print this out so let's run this
22:14 - the string is 11 bytes long now if you
22:17 - want to pause this video and count that
22:19 - I can guarantee you it's going to be 11
22:21 - bytes don't include the quotes now we're
22:27 - going to make that uppercase
22:37 - oops
22:42 - now one thing you should know when I hit
22:45 - that dot or the period you'll see it
22:48 - gives us a list of things this is why an
22:50 - IDE is super helpful especially when
22:52 - you're learning because you don't know
22:54 - all these things and you don't want to
22:55 - spend hours memorizing the help document
22:58 - and stuff you can just you know hit the
22:59 - period and it says oh these are all the
23:02 - things you can do
23:02 - capitalize count and code ends with and
23:05 - a lot of times it'll have a very you
23:07 - know kind of descriptive identifier next
23:10 - to it so in this case we're just going
23:13 - to say upper and we're going to make it
23:20 - lower case we're going to say print
23:25 - lower now you know this this little self
23:28 - here what a self mean we're going to
23:30 - cover that in a future tutorial but a
23:32 - self is a reference to the object you're
23:35 - currently in if you're in a class
23:39 - we're not in a class so it just ignores
23:41 - it we're gonna run this you're gonna see
23:44 - sure enough the string is 11 bytes long
23:46 - HelloWorld capitalized HelloWorld lower
23:48 - case and we are going to hmm let's have
23:56 - some fun with this we're going to find
23:58 - the position of a letter
24:09 - well actually let's change that to index
24:11 - we're going to find the index of a
24:13 - letter now what do I mean by index think
24:16 - of this as a list there is 11 bytes in
24:20 - here
24:20 - the list is 0 base meaning this is
24:22 - position zero I don't know if this is
24:24 - going to show up on the video then 1 2 3
24:26 - 4 5 6 7 8 9 10 11 because it's 0 if we
24:32 - call 0 we're going to get the letter H
24:33 - if we call 1 we're going to get the
24:35 - letter e we don't know where that is and
24:38 - we want to find it so let's say we want
24:41 - to find the position of the first O so
24:47 - we're going to print
24:54 - the position of O is and we're gonna % D
24:58 - here because it's going to return a
25:00 - number and we're going to say STR index
25:09 - oh now what does that do
25:12 - let's run this and find out the position
25:15 - of oh is for well if we count this out
25:17 - zero one two three four
25:20 - that's where o is right there it's the
25:22 - fourth character I should say it's the
25:25 - you know the fifth character on the
25:27 - fourth position because the zero based
25:28 - index want to cover that one more time
25:31 - zero based index meaning everything
25:34 - starts with zero seems like a foreign
25:37 - concept you think the first one would be
25:38 - one but no it's actually zero super
25:41 - confusing it's one of those things you
25:43 - just got to learn to live with another
25:45 - thing you got to learn to live with is
25:46 - let's say you do a capital o and you run
25:52 - this you'll see you get an error trace
25:55 - back recent call blah blah blah the code
25:58 - value error substring not found it
26:01 - couldn't find o because it is you
26:05 - guessed it case sensitive so we're going
26:09 - to actually change this a little bit
26:14 - string that upper index and we're gonna
26:19 - say Oh
26:25 - what we're doing here is we're taking
26:26 - the string making it uppercase which
26:28 - we've already done and then finding the
26:30 - position of the letter O and this time
26:33 - we run and you guessed it set position
26:36 - for two very important concepts there
26:39 - zero-based and case-sensitive those are
26:42 - two things that I guarantee will trip
26:43 - you up as your career in a Python
26:45 - programming all right now we're going to
26:48 - count the number of ELLs yeah let's just
26:57 - put that in there that way it's more
26:58 - descriptive there are percent the letter
27:06 - L in the variable I will say in
27:17 - percent ass
27:21 - and all right this is what we're gonna
27:23 - do here we're going to make a tuple and
27:26 - we're going to say STR that upper dot
27:30 - count
27:36 - and you guessed it we also need to give
27:40 - it the variable because what we're doing
27:41 - here is we're gonna say there are
27:43 - however many letter ELLs in the and then
27:46 - we're just going to print out a string
27:49 - there are three letter ELLs in hello
27:51 - world this might look confusing and I
27:55 - want to explain this a little bit just
27:56 - in case you're sitting there scratching
27:57 - your head what we're doing is we're
28:00 - string formatting like we've done in the
28:01 - previous examples and we're making a
28:04 - double remember a tupple is just it's a
28:07 - list of objects tupple and lists are not
28:10 - used interchangeably we will cover this
28:12 - in a future tutorial the difference is a
28:14 - list can be modified a tuple cannot now
28:19 - the first item in the tupple think of it
28:22 - as like a book you're on page 1 the
28:25 - first thing is well we're taking the
28:28 - string making it uppercase because
28:30 - remember searching is case-sensitive and
28:32 - we're counting the number of letter else
28:34 - our number of letter LS boy I am tired
28:37 - we're counting the number of ELLs the
28:40 - second one in our tupple is just the
28:41 - variable itself because we're gonna
28:43 - print that out here that's how we get
28:45 - there are three letter LS in hello world
28:51 - now we're gonna do some slicing what is
28:58 - slicing think of this string as a loaf
29:02 - of bread and you want to slice this into
29:06 - certain chunks like you want half the
29:09 - loaf or a third of the loaf or just one
29:11 - little slice we're going to print ste R
29:17 - and then we're going to do these
29:19 - brackets here and we're gonna say 3
29:24 - looks very foreign to us what does this
29:26 - mean we're taking the string and then on
29:30 - position 3 we're gonna print that out
29:33 - which should be that L that first L so
29:36 - let's run this sure enough there's the L
29:39 - right there so we're taking a slice
29:42 - we're getting just one little slice and
29:45 - then we're going to just play around
29:47 - with this and just get really insane
29:49 - with it
29:51 - we're going to say we want one two four
29:58 - what this means is we're going to start
30:00 - the first position and we want four
30:02 - characters let's run that I'm sorry we
30:07 - want to go to the fourth position there
30:09 - nope yeah we did
30:10 - let's go to six just for more
30:12 - descriptive purposes
30:14 - yeah pretty simple pretty easy to
30:19 - understand
30:22 - now we're going to go print
30:28 - and we're gonna go let's go the zero
30:32 - position actually let's do this let's go
30:36 - one meaning we're going to start at the
30:38 - first remember this is zero base so
30:40 - we're skipping this H here we're
30:42 - starting at position one which is that E
30:45 - and we're gonna go to the length of the
30:51 - string
30:51 - so we're going to read the entire string
30:54 - now I'll let you pause the video and
30:56 - take a wild guess what this is going to
30:59 - do if you said it was gonna print the
31:03 - entire thing minus the first character
31:05 - give yourself a gold Stark that's
31:06 - exactly what it did now whoops we want
31:13 - to split this splitting a string is very
31:17 - handy like let's say someone gives you a
31:19 - name and you want to split it into two
31:21 - variables so we'll say name equal then
31:24 - we're gonna make a new variable here
31:26 - Brian Cairns and just you know type your
31:30 - name you don't have to use mine and
31:32 - we're going to print
31:34 - and we're gonna say Str split oops and
31:41 - we're going to split based on spaces so
31:44 - what this is gonna do is it's going to
31:46 - actually create a new object I believe
31:49 - it's going to create a list and it's
31:52 - going to use the space as a splitting
31:55 - point meaning if it's not a space it
31:57 - becomes its own unique object whoops
32:02 - help if I do the right variable
32:06 - there we go so you can see now we have a
32:09 - list with Brian and Karen's inside of it
32:12 - to kind of solidify that let's say my
32:16 - list equal main split we're going to
32:21 - split on the space and let's actually
32:24 - just print out my list it's gonna print
32:26 - the same thing but we're gonna say print
32:31 - we're gonna get just a little crazy here
32:34 - my first name is % s and my last name is
32:42 - you guessed it % us and we're going to
32:45 - format that
32:52 - actually let's I've never tried this
32:54 - this may explode drastically but let's
32:57 - try this and see what happens yeah
33:01 - not enough arguments so we're gonna
33:03 - actually do this
33:16 - so what we're doing here is we're
33:17 - creating this list which creates two
33:20 - unique variables because we're splitting
33:22 - the string into two different things
33:23 - remember the split point is the
33:25 - character we defined in this case it's a
33:27 - space we're going to print that out and
33:30 - then we're gonna print my first name is
33:33 - and then whatever the first item in the
33:36 - list is and my last name is whatever the
33:39 - second item in the list is remember this
33:42 - is zero base so the first one is always
33:43 - zero and the second one is always want
33:45 - super confusing I know drives people
33:47 - just insane and sure enough my first
33:51 - name is Brian my last name is Karen's
33:54 - whoo that is a lot of work and if we
33:57 - were doing a different language like say
33:58 - C++ or Java that would be probably about
34:01 - four or five different tutorials and
34:03 - we'd be about two hours and discussion
34:04 - this is what I mean by Python comes with
34:07 - batteries included it's very powerful
34:09 - and you can do some pretty complex
34:11 - things very quickly now don't beat
34:15 - yourself up if you're having a hard time
34:17 - wrapping your head around lists and
34:19 - things like that because we just simply
34:20 - haven't talked about them yet but we're
34:22 - gonna get to them very soon that's all
34:25 - for this tutorial thank you for watching
34:26 - I hope you found this educational
34:28 - entertaining the source code for this
34:31 - and other tutorials will be out on my
34:32 - website boy drums calm and I know I'm
34:35 - kind of beating a dead horse here but be
34:37 - sure to join the Facebook group called
34:40 - void realms there's like 200 programmers
34:42 - in there and I see a lot of people
34:44 - coordinating and helping each other out
34:46 - and it's a lot easier than trying to get
34:48 - a hold of me
34:49 - everybody its Brian this is the fourth
34:51 - Python tutorial we are going to go over
34:54 - a few different things here so first
34:57 - thing we're gonna do is make a new file
34:59 - and we're going to call this the very
35:00 - descriptive video lower now the first
35:07 - thing we're gonna cover is going to be
35:09 - less we've talked about lists and tuples
35:12 - and things like that and I keep saying
35:13 - we're gonna get to it we're gonna get to
35:14 - it well guess what we're getting to it
35:16 - so we're gonna talk about lists now what
35:19 - is the list if you're familiar with
35:22 - other languages a list is an array in
35:25 - short if you're not familiar with other
35:27 - languages well what is an array simply
35:30 - put think of it as a box and in that box
35:33 - you can place things like like so let's
35:35 - call this M list and you need these
35:42 - brackets here
35:44 - and we're just to say one two three four
35:47 - five that's a list so think of it as a
35:51 - box that you can place things in and in
35:54 - this box we have five things now you've
35:57 - heard me talk about zero-based that's
36:00 - your first indicator that it's an array
36:01 - most languages arrays are zero based you
36:05 - can pretty much use the term array and
36:07 - list interchangeably so if you hear
36:09 - somebody say oh I was working with an
36:10 - array they're working with a list if you
36:12 - serious somebody says I'm working with a
36:14 - list they're working with an array
36:15 - pretty much a similar concept obviously
36:18 - when you get into different languages
36:19 - they're treated differently but down in
36:21 - the nitty-gritty they're pretty much the
36:23 - same
36:23 - the cool thing however about Python is
36:26 - you can actually put things of different
36:29 - types in here so you can also say like
36:30 - let's see let's actually let's redo this
36:36 - whole thing I want to really get crazy
36:38 - with this say 5 2 1 4 3 and then we're
36:45 - gonna say dog cat
36:51 - and yeah why not bird because I can hear
36:54 - my girlfriend's bird the background
36:55 - squawking away I don't know can you guys
36:58 - hear that on the video it's like a super
37:00 - loud I can hear it through my headphones
37:02 - anyway so we're just going to print the
37:04 - list
37:10 - save that let's run it
37:14 - and you can see it just prints up pretty
37:16 - much what we just typed in that's
37:18 - exactly what it looks like in memory as
37:21 - far as python is concerned anyways I
37:23 - know the C++ people are like no that's
37:25 - not what it looks like but we're in
37:26 - Python land so when in Python land do as
37:29 - the pythons do or Romans do or whatever
37:31 - this thing is all right now
37:33 - why would you want to create a list
37:35 - you've got this box you've got things in
37:37 - it what can you really do with it well
37:39 - think of it in terms of like a line at a
37:42 - bank there's 10 people in line each one
37:45 - of those people is unique but you need
37:47 - to treat each one of those people as an
37:49 - individual and that's what you can do
37:50 - with a list you can actually do some
37:52 - pretty cool things like we're going to
37:54 - count the number of cats because I
37:58 - really like cats print and we're going
38:01 - to say there are % the cats
38:09 - and I've had a very long day but a very
38:12 - rich and rewarding day so I made make a
38:15 - few mistakes
38:17 - now remember from our previous tutorials
38:19 - this is case sensitive so if you do cat
38:22 - that's not going to find it remember
38:24 - everything is case sensitive so let's
38:27 - run this there are one cats because
38:32 - there's one cat in there now if we were
38:35 - to just you know through the magic of
38:38 - copy and paste let's just throw a cat in
38:40 - here somewhere
38:41 - I like saying that let's just throw a
38:43 - cat in there there you go there are two
38:46 - cats I mean some programming languages
38:48 - that are like trying to herd cats so
38:50 - anyways so you can count the number of
38:53 - specific objects in there you can also
38:55 - get the length
39:04 - oops
39:07 - in
39:15 - let's just do this
39:16 - we'll say whoops % Len and unless I'm
39:24 - pretty sure that's how that works
39:25 - yep there are eight objects unless you
39:27 - count those out there are eight of them
39:30 - now let's say we want to find the
39:32 - specific position of something like we
39:34 - want to find that pesky cap find the
39:39 - index of the cat now what is index well
39:44 - items in the list are indexed meaning
39:47 - they have a number in memory the first
39:50 - position is 0 then 1 2 3 4 and on and on
39:54 - and on so e0 base remember that it
39:56 - always starts with 0 so we want to find
39:58 - where is this what's the index what
40:01 - position is it in we're gonna say print
40:06 - the cat is at index and we're just going
40:12 - to do % D
40:15 - percent and we're gonna say and list
40:19 - index and we're going to find that cat
40:23 - all right to run this again the cat is
40:27 - at index six so if you count this out
40:29 - remembered zero base zero one two whoops
40:32 - zero one two three four five six so
40:38 - we're at the sixth base whoo all right
40:42 - we're not done yet let's actually have a
40:43 - lot to them so we're gonna actually
40:45 - insert an item into this list now if
40:52 - this tutorial gets too long I might
40:53 - break it up into a few videos I've been
40:55 - trying to keep them a little bit shorter
40:56 - I've had people tell me hey man I watch
40:59 - your videos on my cellphone and they get
41:00 - a little bit too lengthy so so insert
41:04 - and we're gonna insert at position two
41:06 - or I should say index dude we're going
41:08 - to insert a fish what was the last time
41:10 - you really wanted to insert a fish into
41:12 - anything really think about that all
41:16 - right so we're going to now print out
41:19 - the list and see what happens here and
41:21 - you can see it position two member zero
41:23 - base zero one two we now have a fish
41:30 - now we're going to append an item a pen
41:34 - just means add it to the end you'll hear
41:35 - that quite a bit where I'm going to pen
41:37 - the file or pendant index or a pendant
41:38 - array or whatever dependent object
41:42 - alright and list oops
41:47 - cannot type today a pen and we're going
41:51 - to add a snake
41:57 - and we're gonna print out the list here
42:01 - you know see sure enough now we have a
42:03 - snake at the end of our list now we want
42:07 - to remove the item because I'm not a big
42:08 - fan of fish I'm wearing a steak and
42:10 - potatoes kind of guy remove the fish and
42:15 - we're going to say and list remove a
42:18 - member case sensetive here
42:28 - and now the fish is not missing see now
42:32 - let's get a little crazy here let's say
42:35 - we want to reverse this and we're going
42:42 - to say we'll see here at endless reverse
42:49 - and then we're going to print it out
42:58 - so now the list is exactly reversed it's
43:01 - a mirror image of what it was
43:02 - notice how reverse actually took our
43:06 - existing list and modified it so if we
43:09 - were expecting you know cat to be at a
43:11 - certain index it is now at a different
43:13 - index and you can test that vise you
43:16 - know running that yourself saying what's
43:18 - the index of cat we can actually just
43:21 - copy and paste that there and running
43:22 - this again and we'll see the index of
43:24 - cat is now at 2:00 so you got to be a
43:27 - little careful when you do things like
43:28 - reverse so what we're gonna do next I'm
43:32 - just gonna add some space here is we're
43:35 - gonna slice and sort and this is going
43:37 - to be the end of our little list here
43:41 - remember a slice we're talking about
43:42 - like a loaf of bread you can take a
43:44 - chunk or a slice of the bread out of the
43:46 - loaf that's exactly what we're gonna do
43:47 - here so we're going to make a new list
43:50 - and we'll call it an list actually let's
43:54 - call it a new list that way it's not
43:56 - confusing and we're going to say n list
43:59 - dot copy and what we're gonna do here is
44:02 - we're gonna actually just make a
44:03 - complete copy of that a mirror image if
44:06 - you will I shouldn't say Marika's mares
44:08 - are reversed but you know I mean we're
44:09 - making a you know a clone of this thing
44:11 - now we're going to take the new list and
44:14 - we're going to reverse it back to the
44:16 - way we wanted it and we're just going to
44:18 - say new list equals and this is going to
44:24 - blow your mind a little bit here new
44:26 - list and we're going to actually slice
44:29 - this thing and we're going to say 0 to 5
44:35 - and then we're gonna sort it and you're
44:41 - probably gone what in the heck is he
44:43 - doing well we're gonna explain this here
44:44 - super quick so what we're doing is we're
44:48 - taking our existing list we're making a
44:50 - copy of it shoving it into memory as new
44:53 - lists we're taking new lists which is a
44:56 - copy of that and reversing it so it'll
44:58 - now be back to you this way right here
45:01 - we're then slicing we're saying from
45:03 - index 0 to 5 get another list now what
45:08 - we're doing is we're taking our new list
45:10 - slicing it and adding that new list into
45:13 - that memory what does that mean exactly
45:16 - it means we're overriding that variable
45:18 - remember a variable is something that
45:20 - will change you could very easily create
45:22 - an entire new variable called my new
45:24 - slice or something but I just wanted to
45:26 - show you that you can actually do that
45:27 - to variables now because we've gotten 0
45:31 - through 5 we're pretty much only gonna
45:33 - get these numbers then we're gonna call
45:35 - sort and it's going to print out the new
45:37 - list which is going to be 1 2 3 4 5
45:39 - fingers crossed let's see what it does
45:42 - yeah it worked there's our new list
45:45 - right there 1 2 3 4 5 now in case you're
45:48 - curious you cannot call sort on mixed
45:52 - types you will have to have some way and
45:55 - I believe we're going to do this in
45:56 - advanced tutorials of telling it how to
45:58 - sort but it's much more advanced than
46:00 - where we're at right now that's why I
46:03 - took out the bird the cat the dog the
46:04 - snake and etc etc etc because it would
46:06 - throw an error in there so let's let's
46:09 - just demonstrate that let's say new list
46:12 - append and we'll say kitty because I
46:16 - like kitties
46:18 - and let's try running us see what
46:19 - happens yeah see we get unsorted types
46:22 - there you go that's why I took that out
46:28 - so I think we're going to try and keep
46:31 - trudging along here we're doing pretty
46:33 - good on time I want to cover temples so
46:35 - let's just call this actually I probably
46:40 - just keep it all in the same file why
46:41 - not let's do this let's go so we know
46:46 - that we're switching up here now we've
46:49 - worked with tuples before and you
46:50 - probably want and the heck is a double
46:52 - well I'm going to copy and paste some
46:54 - stuff in here just to save time which I
46:58 - like that sound effect witchy
47:00 - anyways this is a multi-line comment
47:04 - it's just triple quotes a tupple and I
47:07 - actually got this from learn Python org
47:09 - and I don't think I could have worded
47:11 - this any better tuples are fixed size in
47:14 - nature whereas lists are dynamic meaning
47:16 - once you create a tuple it's not mutable
47:19 - meaning you cannot change it it's
47:21 - read-only yes I'm going to repeat that
47:24 - it's read-only meaning you cannot add
47:26 - elements you cannot remove elements you
47:28 - can however find elements since it
47:31 - doesn't change things you can also in
47:33 - the operator check to see if something
47:35 - exists
47:37 - now why would you want a tupple well in
47:40 - case you wanted to read only you'll
47:42 - notice a lot of the functions we've been
47:43 - passing things to our tuples we're
47:46 - passing read-only information we don't
47:48 - want that function to modify the
47:50 - information we're passing it so let's
47:53 - just make a couple here and we'll call
47:55 - it my Tuffle and the syntax for this is
47:58 - very scary are you ready we're just
48:00 - gonna go 1 2 3 4 5 notice that's the
48:04 - difference right there at list has the
48:06 - brackets tuples has parenthesis that's
48:10 - it that's all there is to it
48:11 - now we're going to print it out we're
48:16 - gonna print my topple just so you can
48:17 - see you at the very end 1 2 3 4 5 and
48:23 - let's just add
48:26 - to poll that way we know it's different
48:30 - there we go so that's our topple and you
48:33 - can even see in the little window here
48:36 - to list versus the tupple indicator so
48:39 - you can plainly see they're different
48:40 - now as you'd expect because this is not
48:43 - mutable meaning we can't change it when
48:47 - you hit the period after the variable
48:48 - name there's a lot less options here we
48:51 - can count and we can index which we've
48:53 - already done and lists and they're the
48:54 - exact same syntax but that's pretty much
48:56 - it I mean you can iterate over them but
48:59 - that's pretty much you can't really add
49:01 - or insert or anything like that so you
49:03 - can say you know let's do let's just
49:07 - let's do it print index of 3 is
49:25 - I got distracted sorry about that it's
49:27 - gonna happen from time to time
49:31 - let's run this so the index of three is
49:35 - actually two because remember this is
49:36 - zero based so pretty much everything
49:39 - you've learned with lists you can apply
49:41 - that to tuples - anything that's going
49:44 - to modify that list you can't add you
49:45 - can't remove you can't modify the item
49:48 - etc etc one thing I probably should back
49:52 - up here let's actually just do this
49:56 - modify an item in the list how would we
50:02 - do that so let's say new list we're back
50:05 - in list mode sorry we had to back up
50:07 - here for a second and you can access it
50:10 - by its index and this is why index comes
50:12 - important so we're gonna take that first
50:14 - item because it's zero base and we're
50:16 - gonna say lol why not just you know
50:19 - because it's been one of those days I
50:22 - hear my daughter's say that all the time
50:24 - lol lol and when we run this you'll see
50:28 - because we reverse it's our last list
50:30 - there's lol so that's how you would
50:32 - modify an existing item you call it by
50:34 - its index now if you try to do that with
50:36 - a tupple it's actually just through the
50:39 - magic of copy and paste here
50:42 - and will change my tupple and we're
50:45 - going to try and modify this tupple here
50:48 - what do you think's going to happen yep
50:50 - topo object does not a not support item
50:54 - assignment meaning we cannot modify this
50:57 - and I'm actually going to leave this in
50:59 - the file bad will not work and I comment
51:05 - this out here
51:09 - just to kind of solidify that a tupple
51:11 - cannot be changed who you think we're
51:15 - done nope we're not we're gonna cover
51:18 - dictionaries now what's a dictionary did
51:25 - I spell dictionary right we're gonna say
51:27 - that I did I had eye surgery so I know
51:30 - how I don't need glasses and sometimes
51:32 - things get really blurry and what if I
51:33 - stare at word too long it gets very
51:34 - blurry so forgive me if that's
51:36 - misspelled all right so what is a
51:38 - dictionary think of a dictionary as a
51:41 - list on steroids so we're gonna say ages
51:44 - and we're gonna say ages is and we've
51:46 - got yet another type of bracket I don't
51:48 - know what that's really called I'll call
51:50 - it a bracket why not Brian and then
51:54 - we're going to add a semicolon and we're
51:56 - going to say 40 and then a comma notice
51:59 - that comma separates things I say
52:01 - Heather which is my daughter and she's
52:04 - 22
52:06 - and we're going to print whoops
52:09 - print eye surgery I'm don't blame
52:12 - everything on the eye surgery from now
52:13 - on in case you're wondering eye surgery
52:16 - was expensive but it was well worth the
52:18 - money I actually did a video on it if
52:19 - you haven't seen it I recommend you go
52:20 - watch it all right let's run this and at
52:22 - the very end you'll see here is our
52:24 - dictionary now what's going on here this
52:27 - looks a little different we've got these
52:29 - brackets we've got a string and an
52:32 - integer separated by a semicolon
52:38 - well what's going on here is we're
52:40 - actually assigning our own indexes or
52:42 - keys as they're called to kind of
52:46 - solidify that we're just going to print
52:49 - pages dot keys
52:55 - so we're only going to print the keys
52:59 - notice how it returns a dictionary of
53:01 - keys Heather and Brian so what we're
53:05 - doing here is we're replacing the index
53:07 - which this guy right here the number
53:11 - we're replacing that with an actual
53:12 - object and it can be anything it can be
53:14 - it could be a class it could be a string
53:17 - it could be a number could be whatever
53:19 - so now we don't have to remember
53:21 - position zero we can do some pretty cool
53:24 - things let's actually just finish this
53:27 - up here print ages values we can also
53:32 - print the values out and we're going to
53:34 - print ages items just to give you an
53:40 - idea of what's really going on here so
53:42 - the keys are there the values are there
53:45 - and the items are well you guessed it
53:47 - now notice how these are tuples kind of
53:52 - neat huh but what you can do here is you
53:55 - can do things like let's say you want to
53:58 - print a specific item like let's say
54:01 - print ages Brian
54:08 - what do you think that's going to print
54:10 - well it's going to print the value at
54:12 - Brian's index or the key so it's going
54:16 - to print 40 sure enough there's 40 so
54:21 - that's how you can do that so you don't
54:22 - have to remember okay well this is at
54:24 - position this this is at position that
54:26 - no you can assign your own keys it's
54:28 - pretty sweet actually all right so we're
54:32 - going to now add an item actually let's
54:35 - delete sorry we're going to say del
54:44 - pages
54:46 - whoops Brian and remember these keys are
54:49 - case-sensitive
54:50 - everything's case sensitive you should
54:52 - also remember that and we can and I'm
54:55 - going to add a note behind here can use
54:58 - pop now what does that mean well deletes
55:02 - just going to delete this key with The
55:04 - Associated value and pop will delete it
55:07 - but also return it we don't want to
55:09 - return it so we just want to delete it
55:11 - kind of confusing all you really need to
55:13 - know is if you want to return it and
55:15 - delete it at the same time use pop
55:17 - otherwise just use delete and we're
55:20 - going to actually print this out what
55:22 - we're done why not
55:27 - and now you can see that the only thing
55:29 - in our dictionary is Heather well that's
55:32 - no good my daughter gets lonely so we're
55:34 - going to add an item back in and item
55:40 - and I can tell my eyes are getting tired
55:41 - that's one thing I didn't like about the
55:43 - eye surgeries now my eyes get like very
55:45 - tired very quickly makes video games
55:47 - kind of a challenge to add an item in
55:51 - you pretty much just call a key that
55:54 - doesn't exist in a sign at a value and
55:56 - then we're going to say print ages items
56:07 - and now Brian's back in our dictionary
56:11 - now
56:14 - modify a value let's say ages brien
56:23 - equal 99 why not I'm not that old but
56:29 - print ages what do you think's gonna
56:33 - happen here let's run it and find out
56:35 - brian is now 99 now you might be a
56:39 - little confused because when you print
56:40 - this out you'll see that it's a tupple
56:41 - and you're like now wait a minute you
56:43 - cannot modify top well you just explain
56:45 - this that's true what I've just given
56:49 - you is the dictionary items this is what
56:51 - it's going to return from the function
56:53 - but internally in memory it's a list
56:56 - it's actually two lists and then it
56:58 - manages what points to one so you can
57:00 - actually modify it who a mouthful well
57:04 - we learned quite a bit in this tutorial
57:06 - we've learned about lists worried about
57:08 - tuples and we've learned about
57:09 - dictionaries and we've learned how to
57:10 - use them pretty well I might add
57:12 - there's still a ton more out there to
57:14 - learn but that's all I'm going to cover
57:15 - to this tutorial just for the sake of
57:16 - time I'd encourage you to go out to
57:19 - Google and you know do a little research
57:20 - on your own also be sure to check out my
57:24 - rest of my youtube channel I've got
57:26 - tutorials for other languages as well
57:28 - and I've got whole my gosh almost 5
57:29 - million views I haven't looked at this
57:31 - in a while
57:33 - my website is run off donations so
57:36 - imagine if everybody will that viewed
57:38 - like donated $1 I would be retired
57:40 - anyways void roms calm you can I haven't
57:44 - put it up yet I've been really busy but
57:45 - you can find the source code for this
57:46 - and other tutorials and there is a void
57:49 - realms Facebook group with almost 200 of
57:51 - us in there I'm hoping to grow that
57:53 - because I see a lot of collaboration and
57:55 - people just helping each other out well
57:57 - that's it talk to you later everybody
58:00 - its Brian and welcome to the fifth
58:01 - Python tutorial before we begin I kinda
58:03 - wanted to point out on pythons website
58:05 - because I've already been getting
58:06 - questions there is a full set of
58:08 - documentation on their site they even
58:10 - have a beginner's guide a developer's
58:12 - guide and even non English documentation
58:14 - so if English isn't your primary
58:15 - language you can find a lot of good
58:17 - stuff out there and I mean I ate a lot
58:20 - of it I mean there's just tons and tons
58:21 - and tons so alright without further ado
58:24 - let's just jump into PyCharm and we're
58:28 - gonna make a new Python file the very
58:29 - descriptive video 5 it what we're gonna
58:32 - cover today is gonna branch off from
58:35 - what we've been learning we're gonna
58:36 - build upon everything we've learned so
58:38 - far everything we've learned has been a
58:40 - very simple one-liner you know print
58:42 - something well we're gonna embark on a
58:44 - journey if you will we're gonna learn
58:46 - about conditions
58:50 - usually when someone has a condition
58:53 - it's not a good thing but in programming
58:54 - and conditions a very good thing a
58:55 - condition is like an if statement if I'm
58:59 - hungry then go to the kitchen get
59:01 - something to eat you know that kind of
59:03 - thing
59:03 - so that's what we're gonna learn today
59:06 - before we start with conditions we have
59:08 - to learn about scope so what is scope
59:11 - and I'm going to say chavo well that was
59:15 - embarrassing can't spell Java in Java
59:17 - you'll have these brackets it's called a
59:21 - C style language and if you've tried
59:23 - these before you probably don't like the
59:25 - brackets i personally love them but the
59:29 - brackets are there for a reason you'll
59:32 - have your statement don't worry if you
59:33 - don't understand what that means you're
59:34 - just saying if and then you got start
59:36 - bracket in bracket now you're looking at
59:38 - this from a Python perspective that's a
59:40 - dictionary no it's not a dictionary
59:42 - that's scope what we're saying is scope
59:47 - one there's actually
59:51 - scope zero and there's actually three
59:55 - scopes in this little picture here so
59:59 - what is scope remember how we talked
60:02 - about variables and something that'll
60:03 - change well a variable is controlled by
60:07 - scope and what I mean by that is if you
60:10 - declare a variable here in scope zero
60:13 - it's available in scope zero let's go up
60:15 - 1 and scope three if you declare it and
60:19 - scope one it's pretty much only allowed
60:21 - in scope one that being said that's what
60:26 - these brackets do they tell you that hey
60:29 - this is scope there's something in here
60:31 - so you can have and let's actually just
60:34 - make another java if statement here it's
60:39 - gonna format this correctly so we see
60:41 - what's going on there's actually you
60:44 - know scope for so what you can do now is
60:49 - you can define a variable in scope zero
60:50 - and it's available in all the scopes you
60:54 - can define its scope one and it's only
60:55 - available in scope one you can define it
60:57 - in scope four and it's only available in
60:59 - scope for that keep things very what's
61:04 - the word I'm looking for encapsulated
61:05 - within your code now Python does away
61:09 - with these little brackets that people
61:12 - just seem to hate but you notice how
61:14 - things are indented here like actually
61:16 - let's Nestle an if statement in here
61:21 - this is about what it would look like
61:27 - so now we've got five scopes you're
61:32 - probably going why is he showing me Java
61:33 - this is a Python tutorial well I'm doing
61:35 - it simply because these brackets are
61:37 - very illustrative of what's going on
61:39 - you notice how things are indented and
61:41 - you get this little line in PyCharm that
61:43 - shows you the indentations Python does
61:46 - not have these brackets Python works
61:48 - with what's called white space uses
61:51 - white space specifically for scope for
61:55 - example let's get rid of these little
61:57 - brackets here and you begin to see what
62:03 - a Python program would look like
62:10 - you notice how things are indented that
62:14 - tells you right there that's your scope
62:16 - and PyCharm drawers this beautiful
62:18 - little line say hey here's the scope of
62:19 - this here's the scope of that here's the
62:21 - scope of this excetera cetera pretty
62:23 - neat huh well if you're coming from
62:26 - other languages that's going to be very
62:28 - confusing and that's why I wanted to
62:29 - really illustrate that so we're going to
62:32 - make an if statement a condition we're
62:37 - gonna really hammer out the if
62:38 - statements this tutorial we're going to
62:41 - say x equals y not 9 if x equals 9 :
62:55 - then we're going to print mine is here
63:02 - now there's some things you should be
63:04 - aware right off the bat notice how the
63:06 - double equal sign if you have a single
63:09 - equal sign you're actually assigning a
63:10 - value you're saying X is now nine we
63:14 - want double equals that's how we say if
63:17 - it is equal to we're not saying it is
63:19 - equal we're saying if it is equal to a
63:22 - little bit confusing but you understand
63:24 - that you need this calling here and then
63:28 - there's our print statement so what
63:30 - we're doing here is we're defining scope
63:40 - notice how my little cursor stays on the
63:43 - scope line Python uses this whitespace
63:47 - to determine scope keep that in mind at
63:50 - all times let's actually run this
63:54 - and so we've got nine is here and here
63:56 - all right pretty neat I'm actually gonna
64:00 - get rid of the end here just because
64:02 - it's bugging me and then we're going to
64:05 - show inequality somebody emailed me last
64:11 - night and said hey dude your keyboards
64:13 - like insanely loud I'm like yeah but I
64:15 - really like this keyboard once you get
64:17 - used to keyboard it's really hard to
64:18 - just go somewhere else if X and then
64:22 - we're going to say the not operator not
64:24 - equal to 9 don't forget that : at the
64:28 - end and 9 no more now remember that X is
64:38 - now 8 because we're assigning it and
64:41 - we're saying if it's not equal 9 then
64:44 - we're going to print something 9 no more
64:48 - some common mistakes you're gonna make
64:51 - you'll forget the colon and then you go
64:53 - to run this so that it's gonna go boom
64:54 - syntax error invalid syntax and then
64:58 - you're just sitting here going what just
65:00 - bear in mind pretty much rule of thumb
65:02 - anytime you're going to make a scope you
65:04 - need that colon in there
65:08 - now remember x equals 8
65:14 - actually just so I don't confuse you
65:16 - guys x equals 8 and we're going to get a
65:18 - little creative here we're going to say
65:21 - if X greater than 10
65:33 - and we're gonna say else
65:42 - now what's going on here some of you
65:44 - that are into other programming
65:45 - languages already know oh my gosh this
65:47 - is so boring
65:47 - I mean I apologize but we got to start
65:49 - somewhere we're saying if X is greater
65:51 - than 10 then run this scope else meaning
65:56 - if it's not greater than 10 run this
65:59 - scope and it is of course less than 10
66:04 - so we ran the scope but not this one
66:07 - that's where scope comes into play you
66:09 - make a condition you determine which
66:12 - chunk of code to run that's the basis of
66:14 - polymorphic algorithms you can decide
66:16 - based on a number what happens for
66:19 - example if we were to change this to x
66:24 - equals 3 no actually let's say 30
66:27 - because we want to show that it's
66:30 - greater than now suddenly it's greater
66:31 - then that's polymorphism right there
66:36 - now we're going to show boolean
66:38 - operators and we're going to say name
66:45 - equals H equal 40 I think my girlfriend
66:52 - just got home
66:53 - if name equals Brian and age equal 40
67:00 - remember the colon at the end whoops
67:03 - misspelled that
67:09 - there can be only one else whoops
67:25 - you are not Brian you don't have to use
67:28 - my name and age you use your own just
67:30 - for illustrative purposes here so what's
67:33 - going on here we're doing and and as a
67:37 - bowling operator we're anding in memory
67:39 - in other languages it looks like the
67:41 - double ampersand but in Python is just
67:44 - literally the word and so we're saying
67:46 - both of these have to be equal the name
67:47 - has to equal Brian and the H has to
67:49 - equal 40 in order for this scope to
67:52 - execute else this scope will execute
67:56 - let's run that there could be only one
67:59 - because sure enough Brian at 40 now if I
68:01 - change that to 41
68:03 - you are not Brian
68:08 - let's change that back
68:13 - now we're going to through the magic of
68:16 - copy and paste here
68:21 - we're going to say age equal 21
68:31 - and we're going to do the or operator
68:33 - here
68:39 - and we'll say you and I have something
68:42 - in common
68:47 - we're gonna say
68:50 - my mouse would quit acting up we have
68:55 - nothing income so we're gonna or here
68:58 - and in other languages it's this double
69:00 - bar but in Python is just the word or
69:03 - we're changing age to 21 so now it's not
69:06 - going to work with the an so you're
69:08 - gonna say either the name is Brian or
69:09 - the age is 40
69:10 - if so you and I have something in common
69:12 - otherwise we have nothing in common you
69:16 - and I have something in common because
69:17 - name's da'briyon
69:18 - now if I change this name
69:27 - you and I have nothing in common you can
69:29 - see how that kind of works
69:36 - and let's kind of dive into lists a
69:39 - little bit here we're gonna do a little
69:40 - list checking
69:47 - and we're going to say let's change that
69:51 - variable x2 dog can't fish
70:02 - maybe if I can do that right
70:09 - and we're gonna say if cat we're going
70:13 - to use the in operator
70:20 - print we have a cat
70:27 - else print no cats how sad
70:35 - why not because I really like cats
70:39 - sorry all you dog lovers out there I
70:40 - just really like cats so we have a cat
70:42 - because there is a cat in X the in
70:45 - operator will literally search that for
70:47 - you I'm pretty sure under the hood it's
70:49 - just calling index of and if the index
70:51 - of is not throwing exemption then it's
70:52 - doing something so we're gonna take that
70:54 - cat out of there and run this again no
70:56 - cats how sad so you can see how the in
70:59 - operator here works
71:05 - and
71:07 - we're going to do the is operator now
71:16 - this takes a little bit of explaining
71:19 - I'm going to make two lists here a equal
71:28 - and I'm gonna literally copy and paste
71:30 - this here
71:33 - so we have two variables with the exact
71:36 - same values and I'm going to say if a
71:40 - equal B and print they are the same else
71:52 - print they are not the same
72:00 - don't forget your scope there
72:04 - let's run this to find out what happens
72:06 - here they are the same now that's the
72:10 - equal sign
72:15 - we're going to do is
72:18 - the is operator is a little bit
72:21 - different than equality is determines if
72:23 - it's the exact same object
72:32 - and when we run this they are not the
72:35 - same object they're the same but they're
72:37 - not the same object what that really
72:39 - means is they have the same value but
72:43 - there are two different objects in
72:45 - memory so when you change a it's not
72:48 - going to change B now if you say a equal
72:53 - B guess what's going to happen there's
72:58 - still not the same object because what
72:59 - we've done is we've copied from one to
73:00 - the other so you can still
73:03 - interchangeably modify those in memory
73:06 - pretty crazy huh now just because I know
73:10 - I'm gonna get an email we're gonna say
73:11 - this little if statements how do you
73:15 - make a statement within a statement well
73:18 - usually you join an activist group and
73:20 - grow your hair out long and hand out
73:21 - pamphlets at the airport but we're gonna
73:23 - just stick with the F statement here so
73:26 - let's say let's make mmm
73:32 - I need some more variable names let's go
73:35 - name equal Brian age equal 40 well
73:43 - they're not new variables I just want to
73:44 - illustrate what's going on here and pet
73:47 - equal cat why not
73:51 - so we're going to say if name equals
73:56 - Brian notice I forgot that
74:00 - and what I typically like to do is just
74:02 - flush out my scope first that way I
74:06 - don't get confused what's going on
74:17 - and these don't have to be on the same
74:20 - lines you can space things out if page
74:24 - equal 40
74:46 - so that in a nutshell is what a nestled
74:49 - if statement looks like and you can keep
74:51 - going and going and going for example
75:01 - whoops if pet equal cat like that
75:07 - you you have a pet cat
75:18 - prince
75:20 - GoGet hey cat alright so what's going on
75:24 - here let's explain this nestled if
75:26 - statement this really demonstrates scope
75:30 - and Python remember how I started this
75:32 - whole conversation with the brackets
75:33 - well if we're in another language they
75:34 - be brackets all over the place
75:36 - Python does away with that we just have
75:38 - whitespace you can see that line showing
75:40 - hey here's the scope for this here's the
75:42 - scope for that just because they're on
75:44 - the same line does not mean they're the
75:46 - same scope for example that scope and
75:50 - that scope are different you have to
75:52 - really know where you're at now why does
75:54 - Python do this why does Python make this
75:56 - drastic change from other languages and
75:58 - not file file oh geez follow the
76:01 - brackets this C style well for a couple
76:04 - reasons first off it's a lot less you
76:06 - have to type also there's no hard fast
76:09 - rule another language is saying you have
76:11 - to indent I've seen people do things
76:13 - like X equal for something something do
76:20 - something
76:24 - you know blah blah blah blah and you can
76:27 - get some really just gnarly unreadable
76:29 - code and you got to look at this
76:30 - brackets gonna get that's that's go
76:32 - that's that scope that's calling this
76:35 - function and Python does away with all
76:38 - that and it says you know what it's
76:40 - going to be maintainable it's gonna be
76:41 - readable and it's going to be future
76:43 - proof now what does future proof means
76:44 - it means when you come back to this code
76:47 - six years from now and you don't
76:48 - remember what you wrote you can go oh
76:49 - well here's that scope and okay it just
76:51 - follows along your brain just follows it
76:54 - and you understand so we've got our
76:57 - nestled day of statements and this is a
76:59 - beautiful example of polymorphism at
77:01 - work we've got three variables named
77:04 - agent pet name equal Brian so it's gonna
77:07 - print hello Brian age is 40 it's gonna
77:09 - say you are 40 years old if not don't
77:10 - say you're not 40 or you're not Brian
77:13 - you know depending on what we've changed
77:14 - and then we've got our you know cat so
77:18 - let's run this hello Brian you're 40
77:20 - years old you have a pet cat so we'll
77:23 - say instead of cat I have a dog
77:27 - go get a cat because it's running this
77:30 - scope and not that one if we change this
77:32 - to let's say 30 hello Bryan you are not
77:38 - 40 years old so it just skips over this
77:40 - whole chunk flips this whole chunk
77:46 - and runs you are not 40 years old it's a
77:50 - pretty pretty good example of enough
77:53 - nestled if statements in polymorphism
77:56 - well that's all for this tutorial be
78:00 - sure to visit my website boy drums comm
78:02 - I actually did get a chance to go out
78:05 - and put the Python tutorials out here so
78:08 - I've got the source code for this in
78:09 - other languages out there as well this
78:12 - site is funded by your donations so if
78:14 - you're not hurting for money feel free
78:16 - to donate $1 to also join the void rums
78:19 - Facebook group there's 200 of us out
78:21 - there and we'd love to help each other
78:24 - hey everybody this is Brian and this is
78:27 - the sixth Python tutorial just had an
78:30 - earthquake it's kind of weird cuz I live
78:32 - in Michigan and we really don't have
78:33 - earthquakes here I think it's the second
78:36 - one I felt my whole life kind of weird
78:38 - so anyways I was right in the middle of
78:40 - doing a video when it happens so I have
78:43 - to start over which bothers me but so
78:46 - today we're going to discuss loops
78:48 - before we dive into loops I want to
78:50 - revisit scope let's actually just make a
78:54 - list here and we're going to make a
78:56 - blank list and we're going to say for
78:59 - and range and I'm going to say 10 the
79:04 - range command just makes a range of
79:06 - numbers and you're going to X append
79:09 - we've done this before where we're
79:11 - adding to a list and we're going to
79:13 - print X
79:17 - and I'm going to just run this just you
79:20 - can see what goes on we're making a list
79:24 - and each time it jumps into the loop
79:26 - it's expanding the list by adding C but
79:30 - before we really discuss it I want to
79:31 - discuss scope cuz the last tutorial we
79:33 - said this would be scope 1 we actually
79:37 - comment that out there which means this
79:40 - would be scope 2 and this would be scope
79:46 - 3 now I know some of you are actually
79:50 - sitting there going wait a minute
79:52 - scope 1 let's go up 3 or actually the
79:55 - sames go well you're right
79:56 - you're absolutely right I wanted to show
80:00 - the steps 1 2 3 4 illustrative purposes
80:03 - but the reality is they're the exact
80:05 - same scope there are some gotchas
80:07 - however you need to be aware of like
80:09 - let's say you want to print a variable
80:11 - called name and you know because it's
80:13 - the same scope you want to do it down
80:15 - here because a name equals Brian if you
80:18 - try to run this it says 8 name not
80:22 - defined you can see the little red
80:23 - squiggly line here so you have to define
80:26 - your variables before they can be used
80:31 - see there you go and that prints it out
80:35 - and because it's in the same scope you
80:39 - can actually let's actually put it under
80:40 - there so you can see you can see it
80:43 - still works now let's actually take this
80:46 - and move this into the second scope here
80:51 - notice how it still works even though
80:54 - it's not in the same scope the reason
80:57 - for that is twofold
80:59 - first we set the variable or we've
81:03 - declared it I should say before we've
81:04 - used it so that works and scope too is a
81:07 - sub scope of scope one meaning scope two
81:11 - actually lives inside of scope one so
81:13 - anything inside scope two is accessible
81:15 - to scope one same rule still applies
81:17 - though you have to declare the variable
81:20 - before you can use it C fails so I
81:25 - really wanted to clear any
81:26 - misconceptions you might have about
81:28 - scope before we really deep dive into
81:29 - looping all right so what is looping
81:33 - looping is like having a conversation
81:35 - with a six-year-old child that keeps
81:36 - asking why why is this guy blue why this
81:39 - why that why why why or an old person
81:41 - well what's this what's that what's this
81:43 - what's that you know not trying to
81:45 - disrespect young children or old people
81:48 - but it's an example of a real life loop
81:50 - that you've had to deal with a loop is
81:52 - just a segment or a scope of code that's
81:54 - going to repeat itself for I in range 10
81:58 - meaning we're saying from 0 to 9 because
82:00 - it's going to make a zero based index
82:03 - you're going to append X dot append the
82:07 - current number this is called an
82:10 - iteration whenever a loop jumps back to
82:13 - the beginning
82:13 - it's an iteration in some languages they
82:15 - actually used to have go-to statements
82:17 - but in Python simple iteration so let's
82:21 - run this and you can see the iterations
82:25 - we have 10 iterations and with each one
82:28 - our list is growing because we're
82:30 - appending to it pretty neat huh and if
82:35 - you wanted to not see the iterations but
82:37 - just see the finished product you would
82:39 - just take the print statement and throw
82:41 - it back into the first scope and there
82:44 - it is in all its glory our finished list
82:47 - and I actually bumped that back into the
82:50 - sub scope so that's a for loop a fours
82:55 - are very handy for going through a range
82:58 - or a list or a tuple or even in a
83:01 - dictionary now we're going to do a
83:04 - little bit of fun here we're gonna say
83:08 - for I in X meaning for each object in
83:15 - our list we're going to print
83:19 - index is set D and we're going to
83:25 - present the X and we're going to say I
83:28 - minus 1
83:35 - the index is 9 1 2 2 da da da da da what
83:40 - that does is we're going through our
83:43 - list that we built here and we're saying
83:46 - the current index is now notice how it's
83:49 - not sorted it's just whatever random
83:51 - order so sometimes you may actually want
83:54 - to sort that and make sure now I
83:57 - shouldn't really call that an index it's
83:59 - a position within the iteration it's a
84:01 - little bit different but it does kind of
84:04 - highlight that this is a zero-based
84:05 - array for example if you say I try
84:09 - running this now it actually works the
84:13 - way you'd expect it index is 0 through 9
84:18 - and let's say I minus 12 just to see
84:21 - what happens here notice how well we're
84:25 - out of range out of range is a very
84:28 - common error for looping really which
84:32 - you need to understand without of range
84:33 - is you've gone out of the bounds there
84:36 - is no I - 12 index
84:42 - now when you say I minus one what's
84:44 - going on here
84:48 - is another common misconception because
84:51 - it's a zero-based array you think oh I
84:53 - got to get the position minus zero now
84:55 - this is an iteration the iteration is
84:57 - automatically going to start at zero
84:59 - which is why this works correctly so
85:03 - those are some gotchas if you come from
85:04 - other languages so what we've learned so
85:07 - far is that the for loop will take in an
85:12 - array or a list or a tuple or even a
85:15 - dictionary and you can iterate through
85:17 - them and that's what we've really gone
85:20 - through here if that's not making sense
85:22 - at this point think of a for loop as a
85:25 - repetitive task you know you're a
85:27 - mailman and you have to deliver mail to
85:29 - 100 homes so for I in range 100 you know
85:33 - 100 homes deliver mail that's what
85:35 - you're really doing and that's actually
85:39 - to a dictionary why not
85:45 - today we're going to actually have to
85:46 - make a dictionary we call it ages
85:53 - that's one thing I really like about
85:55 - Python is once you've done it once it
85:56 - just kind of sticks it's really hard to
85:58 - describe you just kind of remember
86:00 - Python unlike most other languages is
86:03 - small enough to actually fit in your
86:04 - head meaning you're not constantly
86:06 - looking things up so we're going to
86:12 - let's actually space that out so we can
86:14 - see here
86:19 - we're ready to print
86:24 - say whoopsie % s is percent D years old
86:36 - mm hmm maybe there we go and we're gonna
86:40 - say name age so what we do is we've got
86:46 - our dictionary and now we're saying for
86:47 - name and age in ages dot items which
86:52 - makes an iteration list we run this
86:57 - Brian's 40 Heather's 22 now you see the
87:00 - real power of four loops you can take a
87:02 - complex data structures such as a
87:04 - dictionary and make it do something
87:06 - meaningful
87:13 - and now we're going to do the while loop
87:16 - now the bonus question for anybody out
87:19 - there wanting to score extra credit
87:20 - what's the difference between a while
87:22 - and a four anybody anybody four will
87:28 - always execute while may not execute
87:33 - well true maybe if they spell this got a
87:38 - lot going on tonight it's prom night we
87:40 - just had an earthquake I've got a couple
87:41 - new video games I just passed my PMP
87:44 - exam so it's been busy while true
87:56 - what's that going to do if we run this
87:58 - this is another common mistake I see
88:00 - people making in every programming
88:02 - language not just Python while true
88:05 - well that variable because that is a
88:08 - variable it's never going to change so
88:10 - it's just gonna keep going you've just
88:11 - created an infinite loop see it just
88:14 - says too much output to process and it's
88:18 - still running I have to stop it we have
88:20 - to interrupt it and it just I mean
88:23 - there's thousands and thousands and
88:24 - thousands and thousands and thousands of
88:26 - these things so if will say and plus
88:34 - equal 1 we're gonna increment n and
88:37 - we're going to actually just print out
88:39 - in see what happens here
88:45 - oops it's got to be on the same scope
88:47 - there we go and you see how that number
88:51 - just keeps going up and up and up and up
88:52 - eventually this program will crash
88:54 - because we're incrementing and it'll
88:56 - just go out of it'll go you know what's
88:59 - the it's a raincheck error that'll end
89:02 - up happening basically it goes into data
89:05 - types
89:07 - certain data types can only hold so much
89:09 - information and eventually it'll get so
89:11 - large it'll just stop or it actually may
89:15 - be wrong because in some languages it'll
89:17 - actually revert back to zero and start
89:18 - over again so we can say while and is
89:26 - greater than ten what's going to happen
89:30 - here well when we run this nothing
89:32 - happens because n is already zero so
89:35 - this already is false that's the
89:37 - difference between a for in a while a
89:38 - for is always going to have that range
89:41 - that it's beginning with where a while
89:43 - we'll evaluate the expression it may not
89:45 - actually execute so let's actually just
89:50 - go back to true our example of an
89:53 - infinite loop here and we're going to
89:57 - actually do some processing here
90:08 - and an infinite loop in case you're
90:10 - wondering why you would want that it's
90:12 - actually quite common if you're working
90:13 - with like say a network connection or a
90:15 - file or something and you want to
90:17 - monitor the bytes in yeah you just want
90:19 - to loop indefinitely until you have some
90:20 - sort of breaking point that's what we're
90:22 - gonna talk about next so if is greater
90:26 - than or equal to ten then we're gonna
90:29 - break Brik means it jumps out of the
90:32 - current loop it just literally stops and
90:34 - says nope I'm done and we're gonna
90:37 - actually execute that and we're gonna go
90:39 - print finished Wow I cannot spell
90:45 - finished looping
90:51 - let's run this and now you see it says
90:54 - finished looping and let's actually just
90:55 - print this out here we're gonna get a
91:00 - little crazy actually we're gonna say if
91:03 - and equals six whoops
91:10 - print
91:14 - six is awesome otherwise actually let's
91:21 - just continue and I'll explain what
91:23 - continue does in just a second
91:29 - all right so here's our program or run
91:32 - this you can see how it says one two
91:35 - three four five six seven eight nine but
91:37 - it says six is awesome and we finished
91:39 - looping so this is the while loop in all
91:42 - its glory we're incrementing our end and
91:44 - then we're saying if n is greater than
91:46 - 10 we're going to break which means it's
91:47 - going to break right out of the scope
91:49 - right out of this loop so it's gonna go
91:50 - all this it's gonna say I'm done with
91:53 - you I'm no longer iterating and it's
91:54 - gonna jump here to finish looping if
91:57 - however it's 6 we're gonna say 6 is
92:01 - awesome and we're gonna continue notice
92:04 - how it doesn't just print out the number
92:06 - 6 what continue does is it jumps back to
92:10 - the beginning of the iteration it just
92:11 - jumps right back so anything down here
92:13 - will not get processed once that
92:16 - continue statements they're very key
92:19 - concepts you should know our break and
92:20 - continue that's how you break and
92:22 - continue out of loops a break will exit
92:25 - the loop to continue we'll just start at
92:26 - the next iteration or the next step whoo
92:31 - that was a mouthful we've learned quite
92:33 - a bit some things you should bear in
92:35 - mind is range checking I mentioned
92:38 - earlier that if we just kept
92:39 - incrementing this eventually it would
92:40 - crash always check your ranges so if you
92:44 - have a defined range like a list or a
92:46 - dictionary tupple you should almost
92:48 - always use the for loop because it does
92:51 - the automatic range checking for you you
92:53 - don't have to say you know if it's
92:54 - greater than the list count exit da da
92:57 - da it's all done for you
92:59 - all right well that's it for this
93:01 - tutorial I hope you found this
93:03 - educational entertaining be sure to
93:05 - visit my website void roms calm
93:07 - I've got the source code for this and
93:09 - other tutorials out there and be sure to
93:12 - join the void rums Facebook group we
93:15 - have I think we're just about hit the
93:17 - two hundred some-odd mark of developers
93:20 - in there from all different languages
93:21 - not just Python so if you've got like a
93:23 - Java or C++ question or even like a Ruby
93:26 - or a scaler or something like that
93:27 - there's people in there that know this
93:28 - stuff and they can help hey everybody
93:31 - this is Brian welcome to the seventh
93:33 - Python tutorial
93:35 - alright we're gonna dive right in here
93:36 - maybe if my mouse will actually work
93:39 - with me again we're gonna make the video
93:42 - seven and we're gonna call this one on
93:46 - with functions catch I cannot spell
93:51 - alright so what is a function whether
93:56 - you know it or not you've probably
93:58 - worked with them before we're going to
94:02 - use the word def de F which is short for
94:04 - definition and we're going to say do
94:07 - some thing
94:14 - now inside of this definition we're just
94:19 - going to say print hello world and let's
94:25 - run this
94:28 - as you can see nothing happens the
94:31 - reason for that is simple a function or
94:33 - a definition in Python needs to be
94:36 - called meaning this has its own unique
94:38 - scope so if we actually for illustrative
94:43 - purposes here
94:49 - so start a program while we run this
94:51 - little guy you'll see start a program
94:54 - executes right here but this definition
94:57 - does not because we have to call this
95:00 - and to call that you literally just do
95:04 - this notice how you have to include
95:07 - these brackets here
95:11 - there's our hello world now if we take
95:13 - these brackets out what happens
95:18 - well it doesn't do it because we're not
95:20 - actually calling it at this point we're
95:22 - just declaring a empty variable using
95:24 - that name so you have to use those
95:27 - brackets now let's make a little bit
95:33 - more of a complex function is that even
95:35 - English a little bit more of a complex
95:37 - function it's been a long day and I just
95:40 - got out of the gym so bear with me here
95:42 - when I say get list and we're gonna say
95:45 - max and let's do this X equal let's see
95:54 - I almost type the word now you can tell
95:55 - I'm tired cause I was thinking in C++
95:57 - for a minute all right so we're going to
96:03 - make a new list with a range in there
96:05 - we're going to say for I in X and we're
96:11 - gonna say X I equals I times let's just
96:19 - just just pick a number here let's say
96:21 - five
96:23 - and then we're going to return X so what
96:28 - we're doing is we're actually returning
96:30 - a value meaning this function this
96:33 - definition here is going to run and it's
96:37 - going to return X meaning it's going to
96:40 - generate X and then it's going to return
96:42 - it I keep saying return but what does
96:44 - that really mean so what we can say here
96:46 - is oh say my list equal get list and
96:53 - we're going to say 20 and then we're
96:56 - just going to print my list notice how
97:01 - we're assigning the value what we're
97:04 - really assigning is X from here we're
97:07 - calling yet list and we're assigning the
97:10 - value let's run this ooh what have we
97:16 - done wrong oh yes we forgot our little
97:19 - little semicolon there here we go
97:21 - beautiful so there is our list right
97:25 - here now quick discussion on scope
97:32 - remember how we said in previous
97:34 - tutorials where you had to declare a
97:37 - variable before you can use it well the
97:38 - same thing applies with definitions and
97:40 - functions for example if we take this my
97:44 - list even though it's in this same scope
97:47 - and we try to do this first before the
97:51 - definitions been declared we get an
97:54 - error see get list is not defined it
97:57 - treats it like a variable
98:06 - pretty neat huh now this is an example
98:09 - of a single parameter that's what this
98:11 - little guy here is called a parameter
98:13 - we're going to do a multiple parameter
98:16 - and we're going to say def get animal
98:23 - let's not say get animal seat get person
98:27 - now say name age equal zero
98:37 - and we're just going to print
98:57 - that was not good you can tell them
99:00 - tired
99:01 - yeah we're just going to say print
99:15 - now there's a couple things going on
99:17 - here and get person first we've got
99:19 - multiple parameters separated by a comma
99:21 - you can have as many as you want
99:23 - and this can be pretty much any data
99:25 - type we could do a list dictionary and
99:27 - integer string whatever you want to do
99:29 - and we're saying the person is you know
99:33 - whatever you want and they are however
99:36 - many years old now you also notice age
99:38 - equals zero meaning we're actually
99:40 - setting a default value that does a few
99:44 - things here whoops if we say we're not
99:49 - we shouldn't call that get person we
99:50 - should call that print person because
99:52 - we're not actually returning anything so
99:57 - we're going to print person and we're
99:58 - gonna say Brian and I am 40 years old go
100:04 - ahead and run this the person is named
100:08 - Brian they are 40 years old now if we
100:10 - omit the age what's going to happen
100:16 - person's name Brian they are zero years
100:19 - old notice how it used ero because that
100:22 - is our default value for that parameter
100:26 - we could also do the same thing as name
100:33 - notice how if you supply the parameter
100:37 - it will use your supplied parameter if
100:40 - you omit it it will use the default
100:48 - now what happens if you don't use the
100:52 - default and you still am in it
100:56 - if you said runtime error you are
100:59 - absolutely correct
101:04 - so why would you use a definition or a
101:07 - function as it's called reason why you
101:10 - do this is you have chunks of code you
101:12 - want to run for example let's make it
101:14 - basic if-then statement
101:15 - so we'll say hmm I'll say I'll say H
101:20 - equal 8 why not if H is greater than 4
101:27 - then we're going to print person
101:38 - else we're going to prep person
101:45 - you know let's just supply some values
101:47 - here yeah she's 212 years old that's how
101:49 - tired I am all right yeah 40 so what
101:53 - we're doing here is we're saying we have
101:55 - a value or sorry a variable H which is 8
101:57 - if H is greater than 4 we're going to
101:59 - print person Brian otherwise we're going
102:01 - to print person Heather so that's Paula
102:04 - another example of polymorphism where
102:05 - you can call this chunk of code based
102:08 - off this value right here let's run that
102:13 - and sure enough it runs Brian let's set
102:15 - that to 2 just so we can see it change
102:19 - there we go
102:22 - some little-known issues you have to
102:25 - declare it before you can use it you
102:28 - should only add parameters that are
102:31 - necessary don't go crazy and have a
102:32 - function with 200 parameters no one's
102:34 - going to use it some other things make
102:38 - sure that name is descriptive what does
102:41 - it do does it get a list does it do
102:44 - something does it print a person don't
102:46 - name it you know my super-awesome
102:48 - function that does I don't know what
102:50 - yeah because no one's going to use it
102:52 - all right well that's all for this
102:54 - tutorial
102:55 - hope you found this educational and
102:56 - entertaining be sure to visit my website
102:58 - for the source code for this and other
103:01 - tutorials and if you're interested in
103:03 - other languages I have a whole bunch of
103:05 - other tutorials up there as well
103:08 - everybody this is Brian welcome to the
103:10 - eighth Python tutorial if you're new to
103:14 - programming this is going to blow your
103:16 - mind if you are an old programmer like
103:19 - me this is probably the tutorial you've
103:22 - really been waiting for classes and
103:25 - objects
103:27 - when we say a programming language like
103:30 - python is object-oriented what does that
103:33 - really mean
103:35 - what is an object an object is anything
103:42 - we've worked with objects with strings
103:44 - integers you could argue that an integer
103:47 - is an action object in Python but Python
103:49 - actually wraps it with an integer object
103:51 - similar to what Java does so we work
103:54 - with objects all the time wouldn't it be
103:56 - great if we could create our own objects
103:58 - while we can we can create a class and
104:03 - what is a class it's a blueprint so
104:10 - we're just going to say class animal and
104:14 - it's going to inherit which we'll
104:16 - discuss here just a second the object
104:19 - notice how I said this is an object
104:23 - because everything is an object you're
104:27 - an object you're cats an object I'm an
104:28 - object don't call your girlfriend or
104:31 - wife an object that's a conversation
104:32 - that won't end well so we're going to
104:36 - see def eat whoops and I'll explain what
104:41 - Soph means in just a second I just want
104:43 - to flesh this out a little bit so we can
104:44 - continue the conversation
104:47 - and through the magic of copy and paste
104:52 - we're going to
104:57 - make another function here
105:02 - all right so we have our animal class
105:05 - but we have a variable and we have some
105:08 - definitions or functions as they're
105:10 - called inside of there we covered that
105:11 - in a last tutorial
105:14 - what is inheritance everything has to
105:17 - inherit from a base object that's how
105:19 - everything is an object so what exactly
105:21 - is inheritance well we're going to make
105:25 - another class to illustrate that yeah if
105:31 - I could spell
105:34 - a mammal is an animal for example here
105:39 - are human which means you inherit from
105:40 - mammals which inherit from animals so
105:42 - you can have multiple inheritance in
105:43 - here not so much true multiple
105:46 - inheritance in the sense that some
105:47 - languages have but you can actually you
105:51 - know get pretty complex here
105:56 - as backbone equal true has hair you know
106:02 - just some definitions of what really
106:03 - makes a mammal a mammal deaf grow hair
106:11 - notice how it says self self is a
106:15 - reference to the current object and
106:18 - that's going to become pretty impaired
106:20 - n't here in just a second here and if
106:23 - you're bald like me you wish you could
106:25 - grow hair alright so now we've got two
106:31 - classes the mammal class inherits the
106:35 - animal class meaning it has all the
106:38 - properties of an animal for example I'm
106:41 - going to say cat yeah you knew that was
106:47 - coming
106:48 - equals new
106:53 - mammal
106:59 - well I shouldn't say that shouldn't say
107:02 - new sorry I was thinking for my C++ days
107:05 - I've had a really long day and we're
107:07 - gonna say dog equal mammal notice how
107:14 - they're both mammals we're gonna say cat
107:17 - dot name equal shakes my cats named
107:23 - Shakespeare and clump shakes for short
107:24 - dog dot name equal and I used to have a
107:28 - dog named Molly so these are two totally
107:36 - separate objects they are instances of
107:41 - the mammal class that's why I say class
107:43 - is a blueprint this is not written in
107:46 - stone meaning you can change it you also
107:48 - notice how even though it's a mammal
107:50 - we're accessing the name variable from
107:53 - the animal object that's what
107:56 - inheritance is mammal implicitly
107:58 - includes everything in the animal class
108:01 - because we're inheriting from it that's
108:03 - how we can access name and we can say
108:06 - you know cat eat dog that sleep
108:14 - and let's just run this why not
108:18 - so you can see the eating sleeping you'd
108:20 - probably be better if I put like the
108:22 - name okay let's actually do that just
108:25 - for illustrative purposes I know you
108:27 - guys are smart enough to know what's
108:29 - going on here but oops don't know why I
108:33 - keep doing that
108:39 - oops
108:43 - there we go
108:47 - hey let's just
108:49 - because I'm a huge fan of copy and paste
108:54 - we said we are going to discuss the self
108:57 - variable and this is where it really
108:59 - comes into play
109:00 - you can see how shakes is eating and
109:02 - Molly is sleeping we said cat eat dog
109:04 - sleep self is a reference to the current
109:07 - object that were accessing memory
109:09 - remember this is a blueprint so there's
109:12 - two animals in memory technically
109:15 - mammals each one of these has a
109:18 - different name one is shakes one is
109:20 - Molly so we have to access these self
109:23 - notice how we can't just say name that
109:26 - generates an error unresolved reference
109:28 - name if we try to run it you know bone
109:30 - the whole thing explodes so you have to
109:34 - access the current object and there are
109:36 - other ways around that but for sake of
109:38 - simplicity this is what we're really
109:39 - going to discuss whoo so how do you like
109:45 - that does that blow your mind or what it
109:47 - is just dead simple in Python to make
109:49 - classes and objects and to inherit so
109:53 - you can you can see how a class has its
109:56 - own scope similar to a definition and
110:00 - the definition is inside the class so
110:02 - it's part of the class scope now you may
110:06 - be asking the question well if it's in
110:08 - the same scope like here why do you have
110:10 - to use self dot name Python does that to
110:13 - protect itself when you have a lot of
110:17 - objects floating in memory you need to
110:19 - know where they go and where they belong
110:21 - so that's something you just need to
110:23 - bear in mind and to kind of solidify
110:25 - this let's actually make a snake
110:31 - you probably hear my cat in the
110:33 - background and mm-hmm
110:38 - I'll say through the magic of copy and
110:42 - paste here darn mouse I need to buy a
110:46 - new Mouse I really need to buy a new
110:48 - Mouse say it with me ladies and
110:50 - gentlemen buy a new Mouse Kitty go away
110:54 - last time she was in here whining we
110:56 - actually had an earthquake earthquakes
110:58 - are very rare in Michigan I live in
111:00 - Michigan in the United States and kitty
111:02 - go away it was a 4.0 in it this cat is
111:06 - deaf so she was like scared I felt
111:08 - really bad for all right so we're going
111:11 - to now cat that grow here dog doc grow
111:17 - here snake dot notice there's no girl
111:24 - hair because snake is animal and that is
111:26 - why you would use inheritance you don't
111:31 - want a snake to grow hair because that
111:32 - would just be creepy but a snake you
111:36 - know has eat has sleep has everything in
111:40 - the animal class but it has nothing in
111:42 - the mammal class so now you understand
111:45 - how inheritance works a mammal can
111:47 - inherit from an animal but we did not
111:50 - inherit a mammal in the animal class we
111:53 - inherited straight out of the object
111:56 - makes sense I hope so because that's
112:00 - about the best description I can give
112:01 - you that's all for this tutorial I hope
112:04 - you found this educational and
112:05 - entertaining there is more to come and
112:07 - there's a lot more to objects and
112:09 - classes than what meets the eye I really
112:11 - encourage you to do some research on
112:13 - your own some of the things we're going
112:15 - to discuss in future tutorials and this
112:17 - is really just to kind of whet your
112:18 - appetite so you can get used to working
112:21 - with classes and objects because that's
112:23 - really the power of an object oriented
112:25 - language
112:26 - be sure to visit my website for the
112:28 - source code for this and other tutorials
112:30 - under Python and join the Facebook void
112:35 - realms group I know I've been beating
112:37 - that you know just senseless sing join
112:39 - the group join the group but there's a
112:40 - reason for that there's 200 of us in
112:42 - there a lot of times it's really
112:44 - difficult to get a hold of me and then
112:47 - once you get a hold of me my attention
112:48 - spans like a goldfish because I've got
112:49 - so many other messages coming in whereas
112:52 - you have 200 other programmers some of
112:54 - them are more experienced than me that
112:56 - are willing to help everybody this is
113:00 - Brian welcome to the 9th Python tutorial
113:02 - but we're just flying through these
113:04 - little guys make a new Python file and
113:06 - call it video 9 alright and today we
113:15 - will be working with modules and
113:16 - packages so what is a module module is
113:23 - anything that ends in dot py we've been
113:24 - making these you've made nine of them if
113:27 - you've been following along my videos
113:35 - so why would you make a module well it's
113:37 - a pretty self-contained like here's
113:40 - video 5 you know there's some code in
113:41 - there you know you don't want to make
113:43 - one giant file you want to break things
113:45 - into different files so let's actually
113:48 - just make another file mm-hmm let's call
113:54 - this my module why not and here's my
114:00 - module right here it would say class
114:04 - mmm-hmm
114:05 - let's call this person here it's off of
114:08 - object and we're going to make a
114:13 - definition here actually no we're gonna
114:16 - make a variable name equal and then
114:20 - we're gonna make a def let's call it and
114:23 - say hello
114:29 - you know you've done this before hello
114:32 - my name is and then % s
114:39 - we're 6% self-named so this is nothing
114:44 - new but why am I doing this what's this
114:46 - have to do with the discussion well
114:48 - we've made a module like we've done in
114:50 - the past now we want to access this
114:52 - class and use it in a different module
114:58 - we're going to say from
115:01 - my module import
115:06 - person
115:11 - now we can actually use the person class
115:14 - will say I need a good name here let's
115:20 - call up person one well person did I not
115:27 - call that person one there we go
115:31 - personal one name equal Brian really
115:37 - help if I had quotes in here that was
115:39 - embarrassing can't even spell my own
115:40 - name
115:41 - all right first one say hello
115:49 - now when we got to run this hello my
115:53 - name is Brian so we have all the
115:55 - functionality of the person class which
115:56 - exists in the my module file in the same
115:59 - directory but we don't have to have all
116:02 - that code in here all of its included
116:05 - right here it was it's basically the
116:07 - exact same thing is taking this and just
116:10 - copying and pasting it right there
116:13 - without having it cluttering up your
116:15 - file but as you might have guessed when
116:18 - you go to deploy this file you also have
116:20 - to clewd
116:21 - anything that you're using its called a
116:23 - dependency so that's an example of a
116:27 - module and why you would want to use a
116:29 - module now let's talk about packages the
116:34 - package is a little bit different a
116:36 - package is a directory and we're gonna
116:39 - actually make one here Python package
116:41 - and let's call this the ever descriptive
116:45 - my package because I like working with
116:47 - my package now those of you in the back
116:49 - row that are snickering right now pay
116:51 - attention this is serious all right so
116:53 - my package is just a directory with a
116:56 - special file in it a special module
116:58 - called underscore underscore and MIT
117:00 - underscore underscore dot py and when
117:02 - you open that it just says author and
117:04 - then whatever because you know PyCharm
117:07 - put that in there and in here we're not
117:09 - going to really discuss too much in this
117:11 - video but in here you can put special
117:13 - commands that will tell what to include
117:15 - and what not to include what's public
117:17 - what's private and you know all sorts of
117:19 - neat stuff so if your structure of your
117:22 - program starts getting really unruly
117:24 - consider making a package and let's
117:26 - actually
117:27 - add another file in here and let's call
117:29 - this hmm
117:33 - Hannibal you know I'm sick of working
117:38 - with animals let's call it a car all
117:42 - right so we've got our car in here oh
117:43 - yeah we're gonna say deaf up not deaf
117:48 - jeez class car I am going to actually
117:55 - cheat a little bit here I'm going to
117:56 - just take this thing nice sound effect
118:00 - there right
118:02 - and we'll call this car
118:09 - speed up yeah let's call this let's call
118:16 - the set speed
118:23 - and
118:27 - girl
118:33 - going this fast
118:44 - my eyes got a little blurry for a minute
118:46 - I have eye surgery if you've been
118:47 - watching you already know that sometimes
118:49 - my eyes get blurry kind of bugs me a
118:51 - little bit don't really need a name for
118:53 - a car so nothing new there I mean we've
118:59 - just got a package with a module inside
119:01 - of it and we were just going to say I
119:06 - mean look at my notes super quick
119:15 - from my package that car import car so
119:22 - what you can actually do now is you can
119:24 - save from a specific package a specific
119:26 - module import a specific class
119:33 - and then we can say my car equal car and
119:40 - then my car set speed and we're gonna go
119:45 - a hundred why not let's run this and see
119:49 - what happens and hello my name is Brian
119:53 - and going this fast 100 now you might be
119:59 - asking how can I actually import from
120:03 - this module when I don't really know the
120:05 - name why I don't really care what the
120:06 - name is you know I want to just import
120:09 - everything in there so if there's
120:10 - multiple definitions in here so like we
120:12 - can say let's actually make a truck
120:18 - we're gonna call this truck trusk
120:21 - chuckle there we got a truck set speed
120:26 - so now we've got a truck and a car and
120:28 - I'm not really gonna check these out too
120:29 - much just cuz you know it would be
120:31 - whoopsy a waste of time there what have
120:35 - I done
120:35 - hmm well I got a little to click happy
120:40 - there all right so now we've imported
120:44 - that we can also say my truck equal
120:49 - truck notice how it's just automatically
120:53 - importing it we didn't have to
120:54 - specifically say truck and then we can
120:57 - say my truck set speed and we're gonna
121:01 - say nighty why not let's run this little
121:05 - guy hmm
121:11 - missing one require position argument
121:14 - what did I do wrong here
121:25 - okay now I feel very stupid I just
121:28 - simply forgot the parentheses alright so
121:31 - there we go so the car is going 100
121:33 - trucks going 90 so you can see how that
121:36 - works pretty pretty interesting huh now
121:41 - something that's really going to kind of
121:43 - blow your mind here is why am i showing
121:46 - you these other than you can just you
121:47 - know organize your code well you need to
121:49 - get used to importing from other sources
121:53 - other people write modules for example
121:56 - if we click on external libraries you'll
121:58 - see how there is a ton of stuff in
122:01 - Python 3 just expand 3.4 these are
122:05 - pretty much all the packages and modules
122:07 - that you can really access and there is
122:09 - just tons and tons and tons and tons and
122:12 - tons of them who has a lot of stuff in
122:16 - there and you kind of help with this I'm
122:22 - gonna actually post a link out here
122:25 - I'll put it in the top of the file for
122:27 - you we can go out there and you can go
122:30 - to the Python standard library if you're
122:34 - familiar with C++ you know what a
122:36 - standard library is but if not I'll
122:37 - explain it a standard library is all the
122:39 - functionality that comes with the
122:41 - language this is all built-in remember
122:43 - when I said pythons motto is batteries
122:46 - included this is why I mean it's got
122:48 - just a mega ton of stuff I mean just
122:51 - about anything you can imagine for
122:54 - example I mean you know even JSON
122:56 - encoding operating system XML euro
123:01 - writers input/output it even has a
123:04 - graphical user interface which we may
123:06 - cover in future tutorials I mean it the
123:09 - list just is immense I mean it's
123:11 - actually grown very impressively but
123:14 - believe it or not Python standard
123:16 - library is considered small compared to
123:18 - some languages such as Java the Java
123:20 - framework is just massive so I was going
123:23 - to actually do this in a different
123:24 - tutorial but why not let's just do it
123:26 - this one I mean we're on the subject so
123:28 - we're going to import and let's say sis
123:32 - this is a pretty standard package and
123:36 - we're going to you
123:41 - just say Prince whoops print sis that
123:46 - version so we want another system
123:50 - version and you can see the version is
123:53 - 3.40 which is the current version that
123:56 - python that we're running pretty
123:58 - interesting now let's say let's cover
124:04 - the dirt amman dirt man we don't cover
124:05 - that yet dirt will a iterate over pretty
124:09 - much anything so if i actually import to
124:11 - let's say operating system or OS what
124:18 - der will do
124:24 - is it'll just print out everything
124:26 - that's available in there and it's kinda
124:28 - kind of long as you can see it just
124:30 - keeps going and going and going and if
124:33 - you're in idle or if you're working with
124:35 - Python right on the command line it's
124:38 - actually much easier that's kind of what
124:40 - it's designed for so like let's actually
124:42 - run Python say Python 3 and let's just
124:48 - say import OS and we're going to do OS
124:54 - and you can see that's why it's there
124:57 - it's for working on the command line now
125:00 - let's say there's something specific you
125:02 - want to know about you can use what's
125:04 - called the help command you say help OS
125:07 - dot right and it says ok this is the
125:11 - built-in help for that module and what
125:14 - it'll do is it'll say you know right and
125:16 - then you give it a file definition and
125:18 - data and it'll output the bytes written
125:20 - and it says rights byte to a file
125:22 - descriptor so that if you're ever you
125:26 - know stuck working with idle is very
125:28 - very helpful but working with something
125:30 - like Python it's not that helpful at all
125:32 - so just wanted you to be aware of it
125:35 - that's pretty much it for this tutorial
125:37 - hope you found this educational
125:39 - entertaining be sure to go over the
125:42 - Python standard library many times if
125:45 - you're just kind of curious about
125:46 - something like read line
125:48 - it'll actually have maybe that was a bad
125:51 - example not paradise they'll have
125:52 - example code right in here so you don't
125:55 - have to go hunting in forums and Google
125:57 - and user groups it's right in the
125:58 - library so it's a really really awesome
126:00 - resource that you need to you know kind
126:02 - of go through make life a lot easier for
126:05 - you be sure to visit my website void
126:07 - roams comm for the source code for this
126:09 - and other tutorials and of course join
126:11 - the void realms Facebook group I think
126:14 - we just eclipsed 200 users a bunch of
126:17 - helpful people in there hey everybody
126:20 - this is Brian welcome to the 10th python
126:23 - tutorial man we are just hauling through
126:25 - these flat Python 10 and what I want to
126:31 - cover today is exemption handling or
126:33 - error handling obviously you've seen me
126:38 - make a few mistakes and I'm sure as
126:39 - you've been following along you've made
126:41 - a few mistakes so how do you handle
126:42 - those mistakes well we use what's called
126:45 - the kiss method which is keep it simple
126:49 - and stupid or simple slash stupid
126:57 - and what does that really mean it means
126:59 - don't complicate your life any harder
127:01 - than it has to be so we're just going to
127:02 - say deaf do something and let's say
127:10 - we're going to an equals zero x equals 5
127:16 - y equal mmm let's just get creative here
127:21 - X divided by n print the value of y you
127:27 - know just something generic here and
127:30 - then we're going to totally forgot our
127:35 - little brackets that always bites me for
127:37 - some reason
127:45 - just so we can see that we're starting
127:47 - the program and then we're gonna do
127:48 - something and let's run this and see
127:51 - what happens here oh no we have an error
127:55 - shocker
127:56 - we're dividing by zero well this is a
127:59 - standard error message in Python and I'm
128:01 - sure you've seen these before and this
128:03 - is called the trace back and what it
128:05 - does is it starts where the error
128:07 - originated so like if we just go line
128:09 - numbers line 13 in module which means in
128:13 - the current module if it was a different
128:14 - module it would give you this module
128:16 - name would be different all right so
128:19 - line 13 do something so we know
128:21 - instantly it's coming from do something
128:23 - but it goes a step further and says line
128:26 - 9 in do something and it gives you the
128:29 - actual code that's calling the error
128:30 - line 9 this guy right here it gives you
128:34 - a description zero division error
128:35 - division by zero if you've taken any
128:38 - sort of rudimentary math class you know
128:40 - you cannot divide by zero I am horrible
128:43 - with math and even I know you can't
128:44 - divide by zero it's just not possible
128:47 - you can't do it all right so how do we
128:51 - get around this like let's actually say
128:59 - number
129:02 - and let's let's give the user the
129:05 - ability to enter the number right so
129:12 - we're gonna run this what did we do
129:15 - again oh yeah
129:16 - dirt all right so we get one point one
129:22 - we can change this so we know our
129:23 - functions actually working two point
129:27 - five so we're going to take whatever /
129:31 - whatever now if the user enters zero or
129:36 - back to square one we're gonna have that
129:38 - same error again - we don't want that so
129:43 - we need some sort of exemption handling
129:45 - and it's in the form of a try exempt
129:49 - finally and we're gonna explain that say
129:51 - try and we're going to indent this code
129:59 - notice how it gives you a little
130:01 - squiggly when you use a try
130:03 - it's expecting and exempt or finally
130:07 - first thing we're gonna do is exempt
130:10 - except sorry
130:14 - and we're just going to accept exception
130:20 - as e and this is what's called a
130:25 - catch-all
130:30 - and let's make that a little prettier
130:36 - something
130:40 - went boom
130:52 - now what try and accept does is it'll
130:55 - try this code and if something bad
130:58 - happens like a division by a zero it'll
131:01 - run this code because this is a
131:02 - catch-all this will catch any exception
131:05 - out there so let's run this and you see
131:08 - now it says something went boom division
131:10 - by zero so we have a nice pretty you
131:12 - know something happened and E is
131:15 - actually an object so you can actually
131:16 - get into the args you can do the trace
131:18 - back you can do pretty much whatever you
131:19 - want you get the actual base memory on
131:26 - that so it makes it a lot easier to work
131:31 - with and notice how it didn't kill your
131:33 - program
131:42 - even though there was an error your
131:43 - program keeps chugging along happily
131:45 - because you encapsulated it within a try
131:48 - except so that's one way of doing that
131:51 - now if finally is a little bit different
132:01 - finally will always execute regardless
132:04 - of what happens up here notice how why
132:08 - never prints because we had a division
132:10 - by zero error but if we run this you'll
132:13 - see finally I get to run so even though
132:14 - there was error
132:15 - finally we'll run you don't necessarily
132:18 - need this code you can just do it
132:20 - finally you can do try finally you would
132:23 - do this for the example if you had a
132:25 - file or database or some resource you
132:28 - would open it and then when you're done
132:31 - in the finally block you would actually
132:33 - close that resource regardless of
132:34 - whether or not you had an error now as
132:38 - you might have guessed if you're with
132:40 - you know been working with other
132:41 - languages you can actually classify
132:44 - exemptions so we'll say zero division
132:47 - error
132:55 - we'll say we
132:59 - please do not divide by zero let's get
133:08 - rid of that
133:11 - now when we run this notice how it says
133:14 - please do not div by zero instead of the
133:18 - catch-all because we've actually
133:20 - specified we want to catch a zero
133:22 - division errors and do this block
133:26 - general rule of thumb catch halls are
133:29 - bad you want to know what sort of
133:31 - problems are rising in your application
133:35 - another thing you should never do is
133:38 - simply pass for example
133:47 - runtime error and we'll just say pass if
133:50 - we've never covered passed before what
133:52 - pass does is it just does nothing it
133:54 - just takes the execution context and
133:56 - jumps right out that'll create what's
133:58 - called a silent error yeah I actually
134:01 - had been a better example if I had just
134:03 - done it in the division by zero let's
134:06 - throw a pass in there
134:11 - let's comment that out there we go
134:13 - that's what some people will do they'll
134:15 - say if you divide by 0 just pass that
134:18 - creates what's called a silent error you
134:20 - never knew that happened you never never
134:23 - never never want to do that repeat after
134:25 - me
134:25 - never do that reason why is because you
134:29 - want to know that error occurred you
134:30 - want to do something with that error you
134:32 - want to either log it or correct the
134:34 - problem you know for example please do
134:37 - not dip by 0 you're telling the user hey
134:39 - choose a value greater than zero one
134:44 - thing you should really understand about
134:46 - error handling is that you don't want to
134:50 - go completely crazy as you can see the
134:54 - error handling actually is bigger than
134:57 - the algorithm that we wrote
134:58 - that's called defensive programming and
135:02 - it's good to do that but you don't want
135:04 - to make an exemption for every single
135:06 - type of runtime error that's possible
135:08 - and there's a lot of them so if we go
135:11 - out here
135:19 - I was wondering what was that Wow stocks
135:23 - nevermind if you go out here you can see
135:26 - that there are a bunch of exemptions and
135:30 - they just you don't want to make one for
135:32 - each and every one of these for example
135:33 - you don't want an OS error in that
135:37 - algorithm we just wrote because we're
135:38 - not dealing with the operating system
135:40 - you don't want a stop iteration error
135:42 - because we're not dealing with it so you
135:45 - kind of got to look at your code and say
135:48 - what really is going to happen here well
135:50 - division by zero is completely possible
135:53 - but I would always as a rule of thumb
135:55 - put the catch-all in here because if you
135:59 - don't and something else happens you're
136:02 - going to get a runtime error for example
136:04 - let's do that so let's just comment this
136:06 - out and let's actually do let's say
136:11 - let's say we just expect a runtime error
136:19 - we're gonna say print this may not be
136:21 - the best example actually it's not let's
136:23 - do oh s err
136:26 - there we go
136:31 - now let's run this you can see how now
136:34 - our program crashes because we never
136:36 - captured that division by zero either
136:38 - this way or with our catch-all so you're
136:41 - gonna want at a bare minimum a catch-all
136:44 - statement something went boom division
136:48 - by zero but it's always better to know
136:51 - what kind of errors you're getting into
136:53 - that way you can handle them
136:55 - appropriately that was a mouthful it's
136:59 - been a long day thank you for watching
137:01 - please feel free to visit my website for
137:04 - the e source code for this and other
137:05 - tutorials just go to Python and I'll
137:08 - upload I just did a bunch of videos and
137:10 - I could did like four or five videos
137:11 - right in a row so I'll upload all those
137:12 - before I go to bed tonight hey kitty
137:15 - daddy's recording yes I know you're
137:18 - hungry I'll visit Facebook and join the
137:22 - void realms Facebook group there's 200
137:24 - of us out there that are eager to help
137:25 - and if you do join be sure to offer help
137:29 - whenever you can nobody is an expert in
137:31 - any one thing but if you have
137:32 - information and somebody's asking for
137:34 - help just jump in there you know leave a
137:35 - quick comment everybody this is brian
137:39 - welcome to the 11th python tutorial
137:41 - today we're going to be discussing
137:42 - classes again with multiple heritance
137:45 - and constructors so let's make a class
137:49 - and let's call it animal which is going
137:52 - to inherit the object class maybe
137:57 - there we go and we're gonna say the
138:01 - animal has a name so default for that is
138:06 - going to be not named now in some older
138:10 - versions of Python I'm not sure if it
138:12 - applies to the newest but this would be
138:14 - a static or a static variable which is
138:19 - shared through all instances of the
138:21 - class that can get very dangerous
138:25 - depending on which specific version of
138:28 - Python if you make two animals and you
138:31 - change the name on one it would also
138:32 - change in the other one possibly not all
138:35 - the time but you'll see what I mean here
138:37 - in a minute and we're gonna also create
138:39 - a constructor and you notice how I do
138:43 - double underscore and we're gonna do an
138:46 - it self this is called a constructor a
138:51 - constructor is called every time an
138:53 - instance of the class is created
138:55 - remember a class is just a blueprint you
138:58 - can make multiple animals from this
139:00 - class the class itself is not an object
139:03 - the class is just a blueprint for the
139:05 - object we're going to create and when
139:08 - you don't include the constructor and
139:11 - one yeah a one a constructor is
139:14 - automatically created for you in memory
139:17 - and it's called the default constructor
139:18 - which literally looks like this
139:21 - it's just def in itself Pass which means
139:25 - it does absolutely nothing so why would
139:28 - you want to override that's what happens
139:30 - when you make a function that art exists
139:33 - you're overriding that function why
139:34 - would you want to override the
139:36 - initializer or the constructor well in
139:39 - this case it's because we want to
139:40 - actually do something when the class is
139:42 - created
139:48 - so when an instance of this class is
139:51 - created we want to do something so let's
139:53 - say my animal equal animal and let's run
140:03 - this you can see how it called the
140:07 - constructor animal constructed so you
140:10 - can put any sort of logic you want in
140:11 - here also on top of that even without an
140:18 - instance of the animal class we're just
140:20 - going to call the class directly or the
140:22 - blueprint directly you can see we can
140:27 - access that variable so we have this
140:28 - variable floating in memory but we have
140:30 - no class or no object I should say that
140:32 - goes with that instance of that class so
140:35 - that's why it's called a static variable
140:36 - now it's a little bit different some
140:39 - languages when you you know and some
140:40 - older versions of Python I believe when
140:42 - you changed it in one instance it would
140:43 - change across all the instances which is
140:46 - a bad thing you don't want to do that
140:48 - but in this case it's static meaning you
140:51 - don't even need an instance of the class
140:52 - in order to get it so let's get rid of
140:58 - that and let's make a couple classes
141:00 - here because I want to really you know
141:02 - build upon what we've learned we call
141:04 - this reptile and it's going to
141:09 - inherit the animal class and let's say
141:14 - reptile has scales
141:22 - and I'm just gonna leave that static
141:24 - keyword there so you know it's static
141:26 - and let's say reptile instructed we're
141:32 - just going to make a few of these like
141:33 - we're gonna make a mammal class which
141:39 - inherits animal mammal has hair
141:51 - and we're gonna make another class and
141:53 - let's call it class dragon which
141:57 - inherits both the reptile class and the
142:01 - mammal class because you know a dragon
142:04 - will have hair and scales just because
142:06 - dragons are awesome and we're going to
142:09 - say has wings equal true maybe if I can
142:12 - spell the word true this of course is a
142:15 - static variable
142:22 - and I'm just gonna copy and paste this
142:31 - that would be bad let's do that there we
142:33 - go sometimes the Python indentation
142:35 - doesn't really work well with me I'm not
142:37 - sure I've spent most of my life and C++
142:40 - and C sharp and other languages
142:42 - all right so let's actually flesh out
142:48 - this dragon class a little bit more and
142:51 - we're going to work with the D
142:53 - constructor
142:56 - maybe there we go my mouse was in a way
142:59 - Deconstructor is called automatically
143:01 - when the class is deconstructed so you
143:04 - have a constructor when it's made and a
143:06 - Deconstructor when it's destroyed we're
143:09 - going to say self
143:14 - class
143:17 - and let's go you get the class name here
143:26 - that way we can see exactly what's going
143:28 - on say print oops yeah print print
143:35 - that's good start and we're going to
143:38 - print finished and in between here we're
143:43 - going to actually do some work so we're
143:45 - gonna say my dragon cuz you know I've
143:47 - always wanted to dragon equal dragon it
143:53 - was say my dragon name equal let's call
143:58 - my dragon Sam you know why not just
144:00 - because it's a dragon now well we run
144:03 - this you see how the program starts
144:07 - dragon constructed meaning we've made an
144:10 - instance of that dragon class and we've
144:13 - set the name which you don't actually
144:15 - see anything for that and then dragged
144:17 - and destroyed after finished what
144:20 - happens is it gets here the Python
144:23 - interpreter sees that we are now done
144:25 - with this dragon object and it calls the
144:27 - D constructor and destroys it in memory
144:29 - that's called automatic memory cleanup
144:33 - some languages also use what's called
144:35 - garbage collection meaning that object
144:37 - will actually stay in memory but you
144:38 - can't really access it and then over
144:40 - time it'll do garbage collection and
144:42 - cleanup in the background it's I believe
144:46 - it's also called pointer counting and
144:47 - some languages so anyways I wanted you
144:50 - to be aware of static members remember
144:53 - you do not need you do not need it an
144:58 - instance of the class in order you use a
144:59 - static member so like let's let's just
145:02 - play around here let's say dragon name
145:05 - equal
145:08 - let's call it Heather my daughter's name
145:10 - she's always wanted to be a dragon I
145:11 - guess print my dragon that name let's
145:15 - just see what happens if we do this I'm
145:17 - not sure if it'll change it or not yep
145:19 - so now we've changed the name Heather or
145:24 - we've changed the name to Heather in all
145:26 - instances of that class so let's
145:27 - actually make another instance here
145:29 - called dragon one oops one and two so
145:34 - now we've got two instances we've got
145:37 - the static member that we're going to
145:39 - change and we're going to print dragon 1
145:44 - and dragon 2 and just kind of solidify
145:49 - this
145:58 - I need a good dragon name what's a good
146:00 - dragon name smock why not so we're
146:05 - studying dragon one to Sam Savin dragon
146:07 - two to Smaug and then we're saying the
146:09 - static name set the Heather what's gonna
146:14 - happen when we run this loop well it
146:20 - would help if I put the equal sign in
146:22 - there there we go
146:26 - you'll see now how it's calling Sam and
146:30 - Smaug it's printing it out instead of
146:32 - the default Heather what's happening
146:34 - there
146:35 - we noticed that if we don't set this
146:38 - right here
146:44 - they're both Heather so let's set it for
146:46 - one and not the other and then I'll
146:47 - explain what's going on you see one is
146:50 - Sam we actually set it Sam and what is
146:53 - Heather the one that's Heather is Dragan
146:57 - to this guy that we commented out
147:00 - because we're setting this static
147:02 - variable meaning that exists in all
147:04 - instances of that class so why does
147:07 - Dragan one still say Sam if we just set
147:09 - it because when you're calling that it
147:12 - will now treat that variable as a class
147:14 - variable instead of a static variable or
147:16 - a member variable if you will so we're
147:19 - gonna kind of wipe these out I don't
147:21 - like wiping out dragons but yeah it's
147:23 - got to be done somebody's got to do it
147:26 - all right now we are going to actually
147:31 - modify mammal here where as itself has
147:36 - backbone because mammals have backbones
147:39 - go true
147:43 - that's basically what it does it'll take
147:45 - the variable name in this case and it'll
147:47 - say self dot dot it out meaning it makes
147:49 - it specific to that class some older
147:52 - versions of Python don't do that it
147:55 - would change it across all of them so
147:56 - it's another gacho so now we have a
148:02 - static variable and a member variable
148:05 - inside of this class if we try to take
148:11 - my dragon and you can see it has all
148:14 - these things it even has the has
148:15 - background let's try and print that out
148:34 - let's do this for a few things here
148:37 - let's do like hair or wings or something
148:39 - let's do hair I don't not include the
148:43 - has in front we know what we're talking
148:44 - about
148:49 - so let's actually run this to see what
148:51 - happens you can see how here equals true
148:55 - but suddenly we have an error backbone
148:59 - object has no attribute has backbone
149:02 - what doesn't make any sense does it I
149:04 - mean when we put the period here
149:06 - intellisense says it exists so we know
149:09 - we're inheriting it but why don't we
149:12 - actually have access there's no
149:13 - attribute it's because we now need to
149:16 - initialize the classes we're inheriting
149:19 - from and that goes with the concept
149:21 - called the super it's a super class and
149:24 - by super I don't mean that it's like
149:26 - Superman or it's super kind of like you
149:29 - know super spectacular it just means
149:32 - that it's above it what's it inheriting
149:34 - from so we're going to say super and
149:38 - we're gonna say dragon because we need
149:41 - to know that we're currently passing the
149:42 - dragon class self
149:48 - in itself
149:51 - and I'm going to put a little comment
149:53 - here must and it's the super
150:02 - let's run this again
150:04 - has no element backbone hmm
150:09 - let's do the magic of copy and paste
150:11 - here
150:18 - mouses act enough I think I need new
150:20 - mouse
150:30 - mm-hmm
150:39 - and I'm not going to do it with animal
150:41 - even though we could because it really
150:42 - doesn't have a super it's super is
150:44 - object which is pretty much already
150:45 - initialized anyways now everything runs
150:49 - and you can see backbone equals true
150:52 - that's because we've now initialized the
150:55 - supers you got to go through the whole
150:57 - chain of what this thing's inheriting
151:00 - and that's a good example of multiple
151:02 - inheritance with constructors it can get
151:05 - kind of tricky here what's happening now
151:09 - is you have a dragon class in memory
151:13 - along with a reptile and a mammal but
151:15 - they're superimposed if you will over
151:17 - this dragon so now dragon has a member
151:21 - named has backbone you may be asking
151:25 - well why don't you just put it right in
151:27 - the dragon class like this and you can
151:32 - but now you see the backbone is false
151:35 - which is the opposite of the what we
151:37 - wanted with the mammal class what you're
151:40 - doing there is you're shadowing you're
151:42 - shadowing that variable you're saying
151:44 - that the inherited variable no longer
151:46 - exists and you're going to use the one
151:48 - you've implicitly declared that I hate
151:52 - that word anyways so just note that you
151:56 - have to initialize or call the
151:58 - constructor on your super classes in
152:00 - order to get their member variables
152:06 - well we've actually covered a lot of
152:08 - ground here one final thing I kind of
152:11 - want to cover is how to add variables in
152:15 - the Constructors so let's do this let's
152:19 - say we want to do to do we want to add
152:25 - age hair self age because Dragons age
152:28 - right and we're going to set that to
152:32 - zero initially but we're going to just
152:33 - say comma age now the first parameter in
152:39 - every constructor is the self object
152:41 - because it's creating an instance of it
152:43 - you can get self so while it's being
152:46 - called pythons actually creating an
152:49 - instance of the class and handing it to
152:50 - you in the form of the self variable
152:53 - you're now saying self that age meaning
152:55 - you're adding a variable to the instance
152:57 - called age and we're just going to say
152:59 - it's the age parameter
153:08 - and we're to say years old why not
153:13 - because you know dragons do age
153:20 - let's run this
153:23 - hmm it says missing one requirement it's
153:28 - because we never initialized it and
153:30 - that's because it's a mandatory
153:31 - parameter if we were to say zero equals
153:36 - zero I should say now we're setting the
153:39 - default value for that parameter and it
153:41 - would run like this and it would just
153:42 - say the dragon is constructed in a zero
153:44 - years old and if we add you know dragon
153:48 - ones now a hundred years old you'll see
153:51 - dragon whoops
153:52 - dragon is constructed and is a hundred
153:54 - years old let's rewind that because I
153:57 - know it's probably a little bit
153:58 - confusing if this is your first language
153:59 - what exactly is going on here well we're
154:03 - calling the constructor the self object
154:07 - is handed to us by the Python
154:09 - interpreter it's an instance of the
154:11 - dragon class that we're currently in age
154:15 - is a parameter for the constructor some
154:20 - people call default value the default
154:23 - value is actually the equals zero right
154:25 - here we're saying that it's an optional
154:28 - parameter you don't actually have to
154:29 - include it that's why this works if you
154:32 - do not include it it's going to equal
154:34 - the default value in this case is zero
154:36 - we could say every dragon is
154:38 - automatically 50 years old and if we run
154:42 - it again you'll see the one that we did
154:43 - not give an h2 is now 50 years old
154:47 - we're saying self that age equal age
154:50 - that's a bit confusing what does that
154:52 - mean well what we're saying is self
154:54 - meaning the current instance of this
154:56 - class we're going to add a variable
154:58 - named age and it's going to equal the
155:01 - parameter of age and you notice how
155:03 - PyCharm automatically highlights it
155:05 - because it knows exactly where that's
155:07 - coming from
155:09 - and you could name this something else
155:11 - you could call it just for illustrative
155:15 - purposes why not
155:18 - and then we'll name that there and let's
155:23 - run that again and you can see it does
155:25 - the same thing so just know that when
155:28 - that was named age self dot age and the
155:30 - age were two totally different variables
155:33 - in that we're just simply printing it
155:35 - out and you can of course now access
155:39 - that print
155:45 - and let's say let's say percent s is
155:53 - percent D years old just because we want
155:58 - to do this right I'll say
156:07 - name and
156:11 - really kind of solidify this concept
156:14 - here
156:22 - and we're gonna name my dragon to smoke
156:24 - why not well I think in the token books
156:31 - it's actually 2 G's but I'm just gonna
156:32 - use 1 G let's run this and you'll see
156:38 - how Sam is now a hundred years old this
156:41 - is what we're printing out
156:48 - now what's really going on under the
156:50 - hood and we're gonna kind of wrap this
156:52 - conversation up coming in short on time
156:53 - here is when we add the name parameter R
156:58 - in the name parameter geez when we
156:59 - modify the name variable it's no longer
157:01 - static it is a member variable and we're
157:06 - setting the age through the constructor
157:08 - and we're just simply printing that back
157:10 - out so if you follow it along here we're
157:14 - setting the name which is all the way up
157:16 - in the animal class and we're setting
157:18 - the age which is all the way down in the
157:20 - dragon constructor so questions comments
157:24 - concerns feel free to drop me a line or
157:26 - better yet join the Facebook void realms
157:29 - group there's we've just broken over 200
157:32 - members and it's usually faster to act
157:34 - ask them and get like 20 30 responses
157:36 - than to email me and wait six weeks for
157:40 - hey I don't know or did you try googling
157:42 - it so that's it I hope you found this
157:45 - educational and entertaining and thank
157:46 - you for watching everybody this Brian
157:49 - and welcome to the 12th Python tutorial
157:51 - we're just going to dive right in here
157:52 - today we're going to be talking about
157:54 - the path object so first thing we need
157:57 - to do is import OS or if you want to
158:02 - actually do it the correct way you do
158:04 - from OS import path now what's the
158:08 - difference between those two if you just
158:11 - do import OS you can then do OS dot
158:13 - whatever which in this case would be OS
158:16 - dot half and then whatever command you
158:18 - want but if you specifically import path
158:21 - from OS you can then say path that was
158:26 - embarrassing path dot whatever so that's
158:29 - really the difference between those two
158:30 - so we're just going to say throw it from
158:32 - OS import path
158:34 - and we're gonna actually get a path
158:39 - object here so we're going to say print
158:45 - and sent us whoops having troubles with
158:51 - my keyboard here we're going to get the
158:55 - current directory here
159:05 - now if we run this it's just going to
159:06 - print a little dot you know the current
159:08 - directory is dot and if you're not
159:11 - familiar with the dot notation basically
159:14 - dot is always your current directory and
159:16 - dot dot is the parent directory but we
159:19 - want to actually expand that and figure
159:21 - out what that really is so let's try
159:25 - this print and we're going to say
159:31 - ABB's path or absolute path is percent
159:35 - us and let's just go
159:46 - so we're just going to say path absolute
159:49 - path and then we're just going to give
159:50 - it the current directory that we're in
159:51 - and just see what it prints out here and
159:54 - we're currently in my home directory I'm
159:56 - on Linux so you see these slashes if
159:58 - your windows you'll see like C program
160:00 - files or C users or wherever you're at
160:04 - and that's kind of the beauty of Python
160:07 - is it's very much cross-platform now
160:12 - we're just going to get the name so
160:13 - we're going to say der name
160:18 - run that and you see the turn a Misbah
160:21 - like hmm that's not good so let's get
160:24 - the base name from this
160:35 - the base name is of course dot because
160:37 - that's our current directory so I just I
160:39 - don't want you get thrown off if you see
160:41 - you know perder
160:42 - is returning a dot now if we actually
160:46 - take this and make a variable let's say
160:53 - hey let's actually make a string literal
160:57 - here and to do that you put an R in
160:58 - front of it the reason why you would
161:00 - make a string literal is if you're like
161:03 - on Windows and you do this like see
161:04 - Program Files
161:06 - you know yada yada yada whatever blah
161:09 - blah blah each one of those slashes if
161:12 - it's not a string literal will be
161:14 - interpreted as what's called an escape
161:16 - character like slash P I don't remember
161:19 - what that is but if it was like slash T
161:22 - that'd be a tab slash R would be you
161:25 - know hard return newline the only way
161:27 - around that would be to double escape
161:29 - them where you do slash slash which you
161:32 - know gets kind of frustrating or you
161:35 - would just you know
161:42 - make it a string liberal by putting the
161:43 - r in front of it I'm analytics machine
161:46 - so don't really have to worry about it
161:48 - much but I'll do it anyways and we're
161:52 - just going to replace
161:56 - kurtter with this
162:00 - just so we can see the difference of
162:02 - what it's going to do
162:06 - you see now we have a base name a der
162:10 - name in an absolute path so that's
162:12 - really the difference between current
162:13 - directory and you know when you hard
162:15 - code a path sometimes kurtter is not
162:18 - your friend and I just wanted you to be
162:20 - aware of that we're going to really
162:22 - quickly finish up this tutorial we're
162:25 - going to do exist
162:26 - ister in this file so let's do
162:32 - so I don't know if there's any gamers
162:34 - out there but I bought skyrim legendary
162:36 - edition for like 15 bucks on Steam so
162:39 - I've been playing that it's a lot more
162:42 - than what I thought it was going to be
162:43 - it's actually pretty in-depth hey I'll
162:48 - say is file and what these commands are
162:53 - gonna do here they're pretty
162:54 - self-explanatory but I'll go over them
162:55 - real quick you got your absolute path
163:00 - let's actually run this okay you got
163:02 - your your absolute path which as you can
163:06 - see is that your Durr name which is just
163:08 - your directory name the directory or the
163:12 - parent directory I should say the base
163:13 - name is the name of the current file or
163:16 - directory that you're in yes it exists
163:18 - that's very handy when you get into file
163:20 - operations you want to make sure that
163:21 - file exists or doesn't exist and then
163:23 - determine if it's a directory or a file
163:25 - whoo well that's pretty much all for
163:28 - this tutorial
163:29 - pretty easy one but very important
163:31 - information that you should definitely
163:32 - understand for the source code for this
163:36 - and other tutorials visit my website
163:37 - void realms comm and we've got much more
163:39 - coming in the everybody's Brian welcome
163:41 - to the 13th Python tutorial we're going
163:43 - to be listing directory contents now we
163:46 - want to get everything in a directory
163:49 - sometimes this is handy and we can do
163:52 - that by let's first just my eyes are
163:55 - kind of bothering me today I have to
163:56 - apologize if I make some spelling
163:58 - mistakes I had my post-op I had woops I
164:02 - had a surgery so don't need to wear
164:03 - glasses anymore but my eyes are a little
164:06 - fuzzy because they put these numbing
164:07 - drops and stuff in there so we're going
164:10 - to print
164:11 - os Lister and let's call it s path I
164:17 - need to make a variable here I'm just
164:18 - going to use the Python folder just so
164:24 - I've got something to work with here
164:25 - that's a little interesting and what
164:29 - Lister is going to do is just give you a
164:30 - list of everything in there and the
164:32 - problem is you don't know what's a
164:34 - directory what's a file you know what's
164:36 - what's really going on so now we're
164:41 - gonna get everything split what do I
164:47 - mean by split well we want to split this
164:48 - up into routes directories and files
164:51 - routes is very handy if you're on a
164:53 - Windows system on Linux it's really not
164:55 - that handy is you really only have one
164:57 - route for Linux and everybody knows what
164:59 - it is
165:01 - let's call it routes ders files in OS
165:09 - walk
165:11 - now what walk is going to do is it going
165:14 - to literally walk that path at directory
165:17 - structure and it's going to determine
165:18 - what's a file
165:19 - what's a folder and what's a route just
165:22 - so you have something to work with here
165:24 - so we could you know very easily say for
165:30 - let's say file in files prints we're
165:38 - going to say file equal so we just want
165:45 - to put out the files we want to ignore
165:46 - the directories just for whatever reason
165:49 - name in files hmm well yep probably help
165:53 - if I spelled that right
165:54 - told you my eyes were bothering me a
165:56 - little bit there we go so there's all
165:59 - our files and we could actually you know
166:00 - through the magic of copy and paste here
166:12 - we could print out the directories so we
166:14 - could say the dirt all the dirt and dirt
166:16 - how many times you gonna say that in
166:18 - life my daughter is here she'd be
166:22 - cracking she's like dirt
166:23 - anyways let's run that and kind of whiz
166:27 - by real fast here but if we scroll up
166:32 - you can see there's directories in there
166:34 - so there's a pie caster and you know
166:37 - there's testers and things of that
166:39 - nature
166:42 - now as interesting as that is and that's
166:46 - probably done incorrectly somebody at
166:48 - home has probably already figured that
166:49 - out we're going to actually comment this
166:51 - out and I'll show you a much easier way
166:55 - to use the OS walk command we're going
167:00 - to get only the roots and we'll say
167:06 - let's call it roots equal when we use
167:11 - the next command we haven't really
167:13 - covered that what next will do is if
167:15 - you're in an iterator it will jump to
167:18 - the first version or the first iterator
167:20 - in that group
167:23 - sounds complex but it's actually very
167:24 - simple it just has a list and it jumps
167:26 - basically to the first position
167:28 - iterators are a little different than
167:30 - lists so it's gonna be a tutorial on its
167:32 - own and we're going to walk our s path
167:38 - and we want to get the first list that
167:42 - it's going to spit out there and we're
167:44 - gonna print routes equal and let's just
167:53 - not sure if that's gonna print us out
167:55 - right but we're going to find out
167:59 - on that yeah so there's our roots now
168:03 - the root is the root path that we're
168:05 - starting off with here and through the
168:10 - magic of copy and paste we're just going
168:12 - to very quickly go only the ders d first
168:16 - geez that was bad and only the ders and
168:20 - we're going to get the first one
168:30 - yeah this eye surgery I'm telling you I
168:32 - had the PRK not LASIK so the recovery
168:37 - time is like months and months I'm on
168:39 - one month in two weeks I think and I can
168:44 - drive and I can see and you wouldn't
168:46 - believe me by watching these tutorials
168:48 - but I can type but sometimes my eyes get
168:55 - a little weird and I got to stop and
168:56 - really like focus and figure out what
168:58 - I'm doing
168:58 - it makes video gaming and coding very
169:01 - interesting so as you guessed we're
169:04 - getting only the directories and only
169:06 - the files we're just gonna spit those
169:07 - out here so well you can see there's
169:10 - your directories in a nice neat list
169:12 - that you could iterate through and
169:13 - there's your files that you can iterate
169:14 - through from there you can actually you
169:17 - know get extra information like the file
169:20 - size using I think OS path and few other
169:22 - things but just wanted to make this a
169:24 - nice clean little tutorial on how to
169:26 - walk through a directory that's all for
169:29 - this tutorial if you found this
169:31 - educational entertaining be sure to
169:33 - visit my website void realms comm for
169:35 - the source code for this and other
169:36 - tutorials everybody's Bryant welcome to
169:40 - the 14th Python tutorial today we're
169:42 - going to be writing a file so you can
169:45 - see I have this beautiful test directory
169:47 - all set up with nothing in there and
169:49 - we're gonna actually make a file so
169:51 - we're gonna say import OS
169:54 - and we're going to just s path why not
169:58 - and I would need to actually set the
170:01 - path here
170:10 - and I'm just gonna make it a text file
170:12 - that way it'll open up in my text editor
170:17 - now what we need to do is do a bit of
170:20 - magic here if you will so we're going to
170:25 - make a function and we want to actually
170:31 - detect if that file already exists so if
170:51 - and we're doing this because I don't
170:54 - want you to accidentally like overwrite
170:55 - some important critical file like your
170:59 - vacation fold you know your vacation
171:01 - pictures or a resume or your homework or
171:04 - whatever it would not be good if you did
171:05 - that because once it's gone it's just
171:07 - gone it does not go to your your recycle
171:10 - bin or anything like that it's just gone
171:12 - alright so if it already exists then
171:15 - we're going to just return out and not
171:17 - do anything otherwise what we're going
171:19 - to do here is we're going to say F equal
171:21 - open and we're gonna give it the
171:24 - variable S file we're going to give it a
171:28 - w-4 write mode and we'll discuss modes
171:31 - here in a little bit in depth and we're
171:33 - going to say try
171:38 - we're gonna try writing to that file and
171:40 - we're just gonna say hello world RN and
171:46 - we're gonna say this is a new line
171:51 - that's something you'll get throughout
171:54 - your programming career you see the
171:55 - slash are slash n the slash is an escape
171:59 - character I think we talked about that
172:00 - in the previous tutorial where if you're
172:01 - doing on a Windows system like C colon
172:04 - slash it'll actually error out because
172:05 - it's going to escape the string now what
172:08 - it does is it actually takes this next
172:11 - little digit behind the slash and turns
172:14 - that into a special character like slash
172:16 - R is a return makes a new line and I'm
172:22 - sorry it's just a hard return and then n
172:24 - is a new line so whatever you do this on
172:26 - the keyboard you hit the enter key
172:27 - that's actually two characters in memory
172:29 - I think it's like 10 and 13 I might have
172:32 - this flipped around but / r / n carriage
172:35 - return line feed it's actually pretty
172:37 - common
172:40 - and we've done air handling before so we
172:44 - just want to print out if there's an
172:46 - error that way if you have a boo-boo you
172:47 - can try and figure out what's going on
172:49 - and finally this is a good example of
172:52 - why you have the finally block if F is
172:57 - not none none then Python is a special
173:00 - keyword that means it's not there
173:02 - there's just nothing to it it's never
173:04 - been assigned
173:10 - so that's a mouthful so what we got here
173:13 - let's kind of go through this is we have
173:15 - our function as a variable that we're
173:18 - going to pass to it which is going to be
173:19 - the file name if the file exists it's
173:22 - going to print out a message in return
173:23 - otherwise it's going to open the file
173:25 - which will then create a blank file on
173:27 - the hard drive then we'll try to write
173:29 - to it if there's an error we'll print
173:31 - out the error and then finally we will
173:33 - close the file
173:34 - one thing you should get in the habit of
173:36 - is called flushing and it does sadly
173:41 - exactly what it sounds it's just like
173:43 - flushing a toilet it flushes everything
173:45 - from memory down into the hard drive
173:48 - when you're creating a file literally
173:51 - what you're doing is you're creating
173:52 - data in memory and then taking that data
173:55 - and shoving it down into the actual hard
173:57 - drive the actual hardware so flush
174:00 - literally flushes from the memory to the
174:02 - hard drive so I wish they would have
174:05 - picked a better word for that but it is
174:07 - what it is so we're going to just write
174:10 - file that's path
174:14 - and let's run this bad boy and see what
174:16 - happens it says process finished exit
174:19 - code zero I probably should have put
174:20 - like a little hey we wrote the file in
174:22 - there but you can see there's our little
174:24 - test file and if I bring it out here you
174:27 - can see hello world this is a new line
174:29 - so that's our file now if I attempt to
174:33 - run this again
174:35 - file already exists so it's going to
174:38 - whoops I just bumped the mic sorry about
174:40 - that it's going to get here and then
174:42 - it's going to return out that'll keep
174:43 - you from accidentally overwriting a file
174:46 - now notice how if we just comment this
174:50 - out
174:55 - and run this again we're doing no no
175:00 - intrinsic checking to see if that file
175:02 - exists we're just going to overwrite it
175:05 - and whoops you can see in my little
175:09 - notepad editor it's saying well this
175:12 - files been changed
175:13 - what's going on and let me see if I can
175:15 - actually drag it over here yeah there we
175:17 - go
175:17 - the file on disk has been changed so not
175:21 - all text editors are smart enough to do
175:24 - this but fortunately the one in abouttwo
175:26 - is so we're just going to cancel that so
175:32 - it detected there was a change now when
175:34 - we go out to the actual file and reload
175:38 - this
175:45 - you see it's the exact same thing
175:47 - that's right mode right well completely
175:49 - delete the file and start over if you
175:52 - wanted to append the contents you'd use
175:54 - an A for append and now if we run this
175:57 - let's say a few times I'll click it
176:00 - three times why not let's run that
176:05 - you'll see that we have three distinct
176:09 - things now we didn't put the hard return
176:11 - in there so it's just going to start
176:12 - right where it left off if we would put
176:14 - the slash our slash and it would
176:15 - actually you know broken it out like
176:18 - this so that's the difference between a
176:21 - pendant right that's all for this
176:24 - tutorial I hope you found this
176:26 - educational and entertaining thank you
176:27 - for watching
176:28 - feel free to visit my website avoid
176:31 - realms comm whoopsy and that way you can
176:35 - actually get the source code for this
176:37 - and other tutorials and be sure to visit
176:39 - the Facebook void realms group there's
176:42 - over 200 programmers in there that can
176:43 - also help
176:45 - everybody's Brian welcome to the 15th
176:47 - Python tutorial today we're going to be
176:49 - discussing reading text files and this
176:51 - is actually a pretty common thing you're
176:54 - gonna have to do throughout your career
176:55 - as a programmer is read a text file or
176:57 - specifically read it one line at a time
176:59 - so we're going to show two techniques
177:01 - here one how to read the entire file and
177:06 - help if I spelled import correctly
177:15 - so to read the entire file we should
177:19 - probably actually you know do a little
177:21 - bit of error checking here and I'm not
177:22 - going to go through making a function
177:23 - with the Tri exempt finally because
177:25 - we've done that before
177:26 - I just want to very quickly do this and
177:27 - show you how it works so we're going to
177:29 - say if
177:39 - so we'll call it s path let's actually
177:41 - make my variable
177:46 - let me get my file name here the file
177:49 - we've been working with and you can use
177:51 - just pretty much any file but it should
177:53 - be a text file if you get a binary file
177:56 - then we'll be covering that in future
177:58 - tutorials but the difference between
178:00 - binary and text is a text has things
178:02 - that Yuman readable where a binary just
178:04 - has a bunch of numbers in it so like a
178:06 - program well like pycharm that we're
178:08 - working with would be a binary file
178:10 - where an email would be an example of a
178:12 - text file so if we're going to say if it
178:16 - exists say with open s path as f
178:28 - now what the whiff command does is this
178:30 - says take an object and with that object
178:32 - do something so we're saying with the
178:34 - open object or the F variable or in this
178:38 - case because we're returning something
178:40 - from that tip is it confusing let me
178:42 - explain a little better with an object
178:44 - we're going to do something so with and
178:47 - then this function is returning an
178:48 - object we're going to call F so with F
178:51 - we're going to do something should be a
178:54 - little clearer when I do this when we
178:59 - read the entire file we're just calling
179:02 - read and it's going to read everything
179:04 - into memory now that can be good and
179:07 - that can be bad it can be good if it's
179:08 - just a small file and you want the
179:10 - entire contents to it see there's the
179:12 - entire contents of this file it can be
179:15 - bad if you have multiple lines and you
179:16 - want to do something for each individual
179:18 - line
179:24 - and there's really you know with any
179:27 - language multiple ways to do this and
179:30 - we're going to just grab that make sure
179:34 - it exists otherwise if it doesn't it
179:36 - will give you an error message and what
179:40 - we're going to do here is we're going to
179:43 - get all of the lines so what we're going
179:47 - to say is F dot read lines now when we
179:55 - run this you'll see it returns this nice
179:59 - list the problem with this list is it's
180:03 - got these slash ends in there so it's
180:07 - got a new line in there and we'll have
180:08 - to actually strip those out and you
180:11 - would do that by
180:16 - let's actually call that line lines and
180:20 - let's back up here a little bit here
180:24 - liens equal F dot you know what let's
180:29 - just do it the easy way
180:38 - so for F and redline are for line in red
180:41 - lines we're going to print we're going
180:51 - to strip that line out we're going to
180:53 - strip out the escape character there
181:00 - and let's actually put something in here
181:04 - so we can see that we're doing something
181:05 - different there we go
181:12 - so we're gonna read the lines and you
181:14 - can see how we're stripping them out if
181:16 - we don't if we just print the line
181:18 - itself it's gonna look a little weird
181:21 - and let's let's demonstrate that you can
181:22 - see how it's got these new lines in
181:25 - there because we didn't strip out that
181:26 - newline character
181:29 - all right so and there's an even better
181:33 - way of doing this reading the actual
181:41 - lines one line at a time so what we're
181:46 - going to do here is we're going to say
181:49 - do this and we'll say line equal F dot
181:54 - read line and this is just going to read
181:57 - the one line out of there and we'll say
182:00 - wild line meaning while we have a line
182:03 - object remember everything in Python is
182:05 - an object so if it's nothing it's just
182:07 - not going to execute this code remember
182:09 - we've discussed the while loop in
182:11 - previous tutorials we're going to print
182:13 - this out we're gonna say line equals and
182:17 - then whatever processing we were going
182:20 - to do to this
182:24 - and let's actually throw that here we'll
182:26 - say line and we want to strip out any
182:30 - whitespace if there's you know like
182:32 - extra spaces before or after we want to
182:35 - strip those out just because and then of
182:39 - course we want to say a line equal have
182:41 - read line and what this will do is it'll
182:45 - advance to the next line so let's
182:48 - discuss this a little bit here actually
182:50 - first let's run it make sure it actually
182:51 - works yeah there's a problem okay
182:58 - indentation gotta love it all right
183:01 - there we go
183:03 - so we're reading the lines one line at a
183:05 - time and you can see on us this line
183:07 - equal and then it's got our line and
183:09 - we've stripped out any whitespace I know
183:12 - it doesn't look like it you see that
183:13 - little blank space that's actually added
183:15 - by PyCharm so what we're doing is we're
183:19 - saying if it exists with open as f
183:23 - meaning we're going to call the open
183:25 - function and return an object called f
183:28 - we're going to read a line if that line
183:32 - object exists because red line will
183:34 - return none if it's just nothing it will
183:38 - you know if we get that object then
183:39 - we're going to go this while loop while
183:42 - line is true basically we're going to
183:45 - print it out and then we're going to get
183:47 - the next line that's a mouthful so those
183:51 - are three handy ways to read a text file
183:53 - I typically get inundated with hey how
183:56 - do I read a file one line at a time well
183:58 - that's probably the best way to do it
184:00 - as with any programming languages
184:02 - there's multiple ways to do it but I
184:03 - think that's one of the more efficient
184:05 - ways you should know if there's really
184:07 - no error handling in here so you'd have
184:08 - to encapsulate this within the try block
184:11 - that's all for this tutorial hope you
184:14 - found this educational entertaining and
184:16 - feel free to visit my website void
184:18 - realms comm bring that up here void roms
184:21 - comm for the source code for this and
184:23 - other tutorials just go to tutorials and
184:25 - then Python
184:28 - and join the Facebook join realms group
184:30 - there's over 200 of us in there that are
184:32 - willing to help everybody this is Brian
184:34 - and welcome to the 16th Python tutorial
184:37 - today we're going to be covering binary
184:39 - files originally I was gonna split this
184:42 - up into two videos but I think I'm just
184:44 - gonna do one just to make it a little
184:45 - faster if you're wondering what a binary
184:48 - file is it's a computer file that is not
184:51 - a text file that's the very descriptive
184:54 - Wikipedia article right here what does
184:56 - that mean exactly well a text file is
184:58 - meant for humans to read and write I'm
185:00 - sure you've opened like gee edit or
185:02 - notepad or you know text on Mac or
185:05 - whatever and you've just written
185:06 - yourself quick not saved it well if you
185:09 - examine the contents of that file it
185:11 - looks exactly how you typed it
185:12 - that's a text file a binary file would
185:15 - be like well an image or a database or
185:18 - this web browser any executable or any
185:21 - type of file you can imagine and here's
185:23 - an example of what it might look like in
185:25 - a hex editor you can see their hex
185:27 - values and it gets pretty complicated
185:30 - and there's some computer classes you
185:32 - should probably take like you should
185:33 - learn like what a bit and what a byte is
185:35 - and what a nibble and all that stuff but
185:36 - we're not gonna really cover that
185:38 - because I don't want to bore you with
185:40 - the details and if you're watching this
185:41 - video you probably already know what
185:42 - they are so if not you can go out and
185:46 - just learn on your own Google is awesome
185:48 - like that we're gonna call this the very
185:50 - descriptive videos sixteen
185:54 - and we'll call this binary files so why
186:00 - would you want a binary file well let's
186:03 - say we have a list and in that list we
186:07 - have some numbers let's just say 12 30
186:10 - 34 oops
186:12 - 34 say 202 55 that's our list of numbers
186:18 - and we want to write those numbers to a
186:21 - file and we want to be able to read
186:23 - those numbers back exactly as they are
186:26 - well we're gonna make our string literal
186:33 - here and I know the path to my directory
186:44 - I'm gonna name this test dot txt now I
186:46 - know somebody out there is like whoa
186:47 - hold the phone here test dot t XD isn't
186:51 - that a text file actually no the
186:53 - extension does not denote what type of
186:55 - file it is it's just a name the contents
186:59 - of the file are well up to you typically
187:02 - you'll get what's called a header inside
187:04 - of a file and let's just for whatever
187:07 - reason say this is the header so if you
187:09 - ever open like a JPEG or a bitmap or
187:11 - something in in like notepad you'll
187:14 - actually see the header it'll say like
187:16 - you know image - jpg or whatever that
187:20 - denotes what type of file it is so
187:22 - anyways we're gonna make a buffer we'll
187:24 - call this we're gonna call the bytes
187:29 - function and what this does is it turns
187:31 - our list into well a list of bytes so we
187:35 - can actually print
187:41 - let's run this and see what happens here
187:45 - you can see our list looks nothing like
187:48 - what we have up here it's B and then
187:53 - this little guy and then /xo see what's
187:58 - going on here well what it's doing is
187:59 - converting it to bytes in memory hence
188:02 - the little B notation in front of our
188:03 - string that says this is a byte string
188:06 - instead of a literal string or a real
188:09 - string and this is hex if you don't know
188:12 - what hex is there's there's a whole
188:15 - science behind it I won't get into it
188:17 - but it's just a different way of
188:18 - displaying the number like xff that's
188:20 - 255 so you can see it gets kind of
188:24 - interesting now let's actually take this
188:29 - and we're going to write this to a file
188:32 - with we're gonna say open and we're
188:38 - gonna say binary right very important
188:44 - that you say binary right if you don't
188:45 - you may encounter an error now we're
188:49 - going to write that buffer out to the
188:50 - disk
188:52 - run this again process finish so let's
188:55 - go look at this little guy here
188:58 - and if I just drag it over here you see
189:00 - it's got this gobbly what is that
189:05 - well that is the in my case G edit your
189:08 - yours might look drastically different
189:10 - depending on what you're really looking
189:12 - at it's gonna based on character
189:14 - encoding well I was trying to get a
189:18 - change but it didn't but anyways it may
189:20 - display it differently it may show like
189:21 - a little happy face or like a little Y
189:23 - with two dots over it or whatever but
189:25 - that is an example of a binary file
189:26 - you're not meant to read this as a human
189:29 - being this is strictly for the computer
189:30 - so if you've never seen a binary file
189:33 - congratulations that's your first and
189:35 - now we're going to actually read it back
189:39 - and this is why I was saying I'm just
189:41 - going to do it in one video because this
189:43 - is originally going to be to two videos
189:44 - and what's the point so it's actually
189:46 - just print
189:56 - we're gonna read it back and let's say
190:01 - with
190:07 - and while I'm typing this I'm just gonna
190:11 - open this with binary read but well I'm
190:14 - typing this um be sure to check out the
190:15 - the void rums Facebook group there's
190:18 - over 200 of us in there and we just try
190:20 - to help each other out so let's go
190:26 - buffer
190:27 - equal oops
190:34 - and we want to read you can read all of
190:37 - it we're going to read a maximum of 16
190:39 - bytes if you just do read I think it's
190:42 - just going to read all of it but I just
190:43 - wanted to demonstrate that you can limit
190:45 - how much you're going to read back
190:51 - and now we're going to print
191:05 - woopsie not doing good today my brain is
191:09 - just not here
191:10 - and a pretty long day at work I'm sure
191:13 - you guys know how that is so we're going
191:15 - to take that buffer now you may be
191:18 - saying well don't you have buffer up
191:19 - here actually I do but I'm changing the
191:22 - variable because I'm reading it I'm
191:24 - replacing it in memory it's a not a
191:26 - popular programming style but it's
191:28 - actually a very common one for ion
191:34 - buffer now I'm just gonna loop and I'm
191:36 - going to print out and we're gonna do
191:41 - what's called a cast if you're not
191:43 - familiar with a cast I think we've
191:45 - covered it in other videos it's just
191:47 - converting one data type to another so
191:49 - we're just converting it into an integer
191:50 - and making sure that it's going to
191:52 - display correctly let's run this and see
191:54 - what happens so you see the length of
191:58 - the buffer is 4 we've read the file
191:59 - notice how we said read 16 if it was
192:02 - longer than 16 it would chop it off at
192:05 - 16 and you'd only get 16 so if that file
192:08 - had 300 bytes in it we'd only get 16
192:11 - because we said limit it and the length
192:14 - is 4 so we know we got 4 and sure enough
192:16 - our values are 1234 200 and 255 now why
192:22 - would you want to write a binary file
192:26 - simply put you can pack a lot of
192:29 - information into a binary file that you
192:32 - couldn't with a text file for example
192:34 - think of a picture you've got like a 600
192:37 - by 600 picture well you know take 600 by
192:41 - 600 that's how many pixels are in there
192:43 - takes even more bytes to represent that
192:45 - picture because you've got different
192:47 - color scales you've got the size of the
192:49 - image the header I mean all this
192:50 - information and it actually gets into
192:53 - what's called a structure which we're
192:55 - going to cover in the next tutorial
192:56 - which is a very common theme for binary
192:58 - files well that's it for this tutorial
193:01 - pretty painless be sure to visit my
193:03 - website void roams comm for the source
193:06 - code for this in other programs and go
193:09 - out to Facebook and visit the void
193:10 - realms Facebook group everybody its
193:15 - Brian welcome to the 17th Python
193:18 - tutorial that kind of screwed me up my
193:19 - notes are we smushed the last two
193:21 - together into one video so it kind of
193:23 - screwed me up a little bit here but
193:25 - today we're gonna be talking about
193:27 - binary files and structures and to kind
193:31 - of help me with that we're going to look
193:32 - up on Wikipedia the jpg file format
193:35 - you're all familiar with pictures out on
193:37 - the internet like this cute cat
193:38 - everybody knows I love cats so what
193:42 - really makes this file I mean how do we
193:44 - get that image on the screen well you
193:46 - use what's called a structure and I use
193:50 - jpe Gyan purpose because it's a very
193:52 - complex data structure and if you just
193:56 - kind of scroll down here you don't have
193:57 - to read all this but just understand
193:59 - remember how we talked about you know
194:00 - hex FF is 255 in the last tutorial
194:03 - that's the start of the image so you
194:05 - have this nice structure here to work
194:07 - with this is the common MPEG marker
194:11 - and what this is is just simply a data
194:13 - structure you hear this in different
194:14 - languages you'll hear it called a head a
194:18 - header a struct a structure in Python
194:21 - they're just Struck's but they're very
194:24 - easy to work with in Python and they're
194:28 - very painful to work with in some other
194:29 - languages now what would you use a
194:31 - struct for you can see how this is just
194:34 - denotes something it's like the the size
194:37 - that progressive whether it's got
194:39 - Huffman tables quantitative or quantity
194:42 - quantization tables define restart
194:45 - intervals scans I don't expect you to
194:47 - know any of this what I'm getting at
194:49 - here is JPEGs are actually very complex
194:51 - you'll have this 8x8 sub image that's
194:55 - right sub image meaning a picture can
194:58 - actually be made up of other pictures
194:59 - and those are structures that are read
195:02 - you got it from a binary file now you
195:05 - start to understand a little bit more
195:06 - about why binary files exist you can
195:11 - pack a lot of data into them
195:14 - I almost say like ten times the amount
195:16 - of data you could in a simple text file
195:17 - if you try to describe something and you
195:20 - can have these beautiful structures
195:21 - which are very easy to work with so
195:24 - we're going to actually not mess around
195:26 - with images because it's a little too
195:27 - complex for us right now but we're going
195:30 - to make our own structure so let's
195:32 - actually go in here go new
195:38 - it's not my video 18 I did
195:41 - this is video 17 my bad like I said my
195:44 - notes just totally video 17 there we go
195:50 - call the struct now first thing we want
195:53 - to do is I'm going to link link G's put
195:59 - a link in there for when you download my
196:01 - tutorial off my website that you can
196:03 - very quickly and go out and read about
196:04 - this but we're going to from struct
196:11 - import star what's that what that's
196:14 - really doing is where you're taking the
196:16 - struct and we're importing everything
196:18 - inside of it that struct package we've
196:20 - done this before so and we're going to
196:26 - make a string literal here which is of
196:28 - course the path to our file in years
196:31 - will be whatever you know see my
196:34 - documents etc etc little quick ramp it
196:39 - just bothers me I mean I used to love
196:41 - Windows and I got a Mac and I got into
196:45 - Linux and I just it just bothers me that
196:47 - Windows is different than everything
196:49 - else on the planet
196:51 - it's like why can't everything just be
196:53 - the same so with the structure we need a
196:59 - format what does that mean means you
197:04 - need to understand what you're putting
197:05 - into that structure you don't just
197:09 - willy-nilly start throwing bits in there
197:11 - I mean crazy things will happen right so
197:13 - with a structure you have two concepts
197:15 - packed and unpacked pack is when you're
197:18 - packing it down to store it into a file
197:20 - or link into a box think of it that way
197:22 - you're going to package it and unpack
197:24 - you well you guessed it you're pulling
197:25 - it back out of that file and you're
197:27 - going to do something with it
197:28 - so let's say packed equals pack and this
197:33 - is from the struct package
197:36 - now first thing you need is the format
197:45 - then you need some data you notice how
197:48 - there's a star there star values what
197:51 - that means is it accepts one or more we
197:53 - can just go infinity and beyond so if
197:56 - you ever see star values or star
197:57 - something you know that you can have
197:59 - multiple in there so we're just gonna
198:00 - say one two three
198:02 - why not 3.14 so that's our structure
198:07 - integer integer decimal that's how that
198:10 - reads so integer integer decimal that
198:14 - way the struct package particular this
198:18 - PAC function knows exactly what we're
198:20 - storing we're giving it a format to work
198:22 - with if we gave it the incorrect format
198:26 - it's going to start squawking you're
198:27 - gonna get all sorts of errors and it's
198:28 - gonna get ugly this is a pretty dumb
198:32 - down example of struct pack you can find
198:34 - some very complex examples out on the
198:36 - internet but I really wanted to dumb it
198:37 - down just so we understand what's going
198:39 - on here now we've got our packed
198:42 - structure here so let's just print this
198:45 - out just to see what it looks like I'm a
198:50 - big fan of Show and Tell and you can see
198:52 - there's our structure here holy moly
198:55 - look at that that is a whole lot what's
198:59 - going on there well if you paid
199:01 - attention during your computer class you
199:03 - know that an integer at least on my
199:05 - platform is 4 bytes so there's one
199:11 - to
199:13 - and 3.14 is right there so that's what's
199:20 - going on is the packed function turns
199:23 - this into a binary string that's you
199:25 - know essentially Python is going to push
199:26 - it down onto the disk so we're going to
199:29 - say print
199:34 - rating file
199:39 - let's get that out of there put that
199:41 - there just because I'm picky like that
199:44 - with open STR file and you guessed it
199:50 - we're going to binary right as f now
199:57 - what we're going to do here is we're
200:01 - gonna write this out and we're gonna say
200:04 - F dot write bytes because we need to
200:09 - convert this into you guessed it bytes
200:12 - packed I know what that does is it takes
200:15 - our binary string and converts it into
200:18 - you guessed it bytes and then writes it
200:21 - down to the desk now we're going to
200:25 - print reading the file whoopsie
200:31 - there we go reading the file or say with
200:34 - open
200:39 - and you guessed it we're going to binary
200:42 - read I'm going to Europe this summer so
200:46 - I'm kind of nervous about it I'm gonna
200:48 - go to France
200:50 - specifically Paris Italy Spain and I
200:56 - don't know where else we're going it's
200:57 - kind of surprised we'll find out but
200:59 - I'll be gone for two weeks so it's gonna
201:02 - be interesting so we're going to just
201:05 - read now you notice how from the last
201:09 - tour we put a 16 in here this time we're
201:11 - not doing that we're just gonna read
201:11 - everything the entire contents of the
201:13 - file in there now if you knew the length
201:16 - of your structure you would actually say
201:18 - only read a certain amount for this
201:22 - example I'm just going to read
201:23 - everything and we're going to say
201:26 - unpacked equal and you guessed it we're
201:30 - going to unpack that needs a format
201:39 - and we're going to give it the buffer
201:43 - and then we're just going to print
201:46 - probably help if I actually like did
201:48 - something with that there we go
201:54 - whoo let's see if this thing runs all
201:56 - right so we've written the file we're
201:59 - reading it back and we've sure enough we
202:01 - get you guessed it one two and three
202:03 - point one four dice let's see what that
202:07 - looks like out on the disk
202:13 - and there is our beautiful file in all
202:15 - its glory it may look different on your
202:16 - screen but that is the just of it all so
202:20 - that is a struct now you know the basics
202:24 - of why you would use a struct now you
202:26 - can think of certain projects that you
202:28 - would do like if you wanted to store
202:29 - like somebody's employee ID and their
202:32 - age or something like that you'd make a
202:34 - nice structure and you could you know
202:35 - pump these out to the file that's all
202:38 - for this tutorial I hope you found this
202:39 - educational entertaining thank you for
202:41 - watching and be sure to visit my website
202:44 - Boyd Rob's calm for the source code for
202:46 - this and other tutorials hey everybody
202:48 - it's Brian welcome to the 18th Python
202:51 - tutorial we are gonna do something
202:53 - that's going to blow your mind
202:55 - are you ready serialize objects tada
203:00 - what does that mean exactly well we've
203:04 - all done this before right where you
203:07 - made a class and let's just make a
203:09 - generic class here
203:13 - and I'll say age equals zero
203:18 - yeah we're we've done this before but
203:20 - I'm just gonna flesh this out a little
203:21 - bit here just because
203:29 - and let's name equal unknown unknown
203:39 - jeez can't spell
203:47 - and let's just make a function here so
203:51 - when I say we're gonna serialize an
203:54 - object what alright what am I talking
203:56 - about here we turn into a serial killer
203:58 - or something or we making some sort of
204:00 - hybrid robot out of our computer no
204:03 - actually you know you've made classes
204:05 - before and you've filled in the data and
204:09 - you've probably thought you know what
204:11 - how do I save this for later how do I
204:13 - take this class that I'm working with
204:15 - here and actually make it so that I can
204:19 - store it to disk and load it later
204:20 - that's what we're gonna do and if you've
204:23 - never heard of this before it's called
204:24 - object serialization and a lot of
204:27 - programs actually do this when you're
204:29 - like in a video game and you save your
204:30 - file that file is just a class or
204:33 - collection of classes and it gets
204:35 - serialized to the disk the benefit of
204:38 - that is you don't have to write a lot of
204:41 - code to load all this stuff back in you
204:43 - know you don't have to like you
204:45 - completely ignore the the previous
204:47 - videos on binary and text files that
204:50 - we've done you don't need them you can
204:52 - just simply serialize the object you do
204:53 - that by importing something called
204:56 - pickle now I have to pause because
205:00 - usually when you import a pickle that's
205:02 - kind of a weird thing and your friends
205:03 - look at you there's that awkward moment
205:05 - and then you have to really explain
205:06 - what's going on why they call it pickle
205:09 - I have no idea
205:11 - it's a funny name and it actually cracks
205:14 - me up every time I use it so we're going
205:16 - to test our object
205:19 - now what this will do behind the scenes
205:21 - here it will make the object and then it
205:28 - will convert all that into everything
205:31 - that you've learned in the previous
205:32 - tutorials about structs and packing and
205:34 - unpacking and reading and writing binary
205:36 - files it'll do all that for you so you
205:38 - don't have to worry about it we're just
205:43 - going to flesh out some things here
205:49 - my name is Brian I'm 40 years old
205:51 - sometimes I don't know if I want to say
205:53 - that but whatever wisdom comes with age
205:57 - so let's test this out let's actually
205:59 - make sure our little class here works
206:02 - hello my name is Brian alright so
206:09 - that's actually just because I'm picky
206:14 - like that I want to be able to see all
206:18 - the information actually you know what
206:20 - now I don't I'm gonna be less picky
206:23 - that's my goal for this year's be less
206:24 - picky anyway so we're just gonna be like
206:27 - this now we're going to write this to a
206:30 - file
206:44 - and test dot txt I had an interesting
206:48 - email somebody would they know I'm a
206:49 - security knight they're like don't you
206:50 - feel a little weird you know reading and
206:52 - writing files and throwing it up on
206:54 - YouTube and having everybody looking at
206:55 - your hard drive and I'm like oh not
206:57 - really I mean there's really nothing
206:59 - exciting on my hard drive
207:00 - and this is just my my little play box
207:04 - where I record videos and do nothing
207:06 - else so anyway so we're gonna open the
207:11 - file and you guessed it we're going to
207:14 - binary right now this is where pickle
207:21 - becomes beautiful you ever seen a
207:23 - beautiful pickle well you're about to
207:24 - pickle is going to take a dump I know
207:29 - some of you especially if you're
207:30 - watching this in like a high school
207:31 - classroom are probably laughing really
207:33 - hard but that's actually what it does
207:34 - pickle dumps the data to the desk so we
207:39 - will dump that out we're going to print
207:43 - Pikul let's say the pickle has landed
207:48 - just because I've had one of those days
207:51 - I need some humor now we're going to
207:53 - read that file back in and load it and
207:56 - actually create a new object in memory
207:58 - this is where your mind is just going to
208:01 - explode you're gonna go what just
208:03 - happened
208:04 - so with open file let's actually do the
208:10 - correct one we're gonna of course binary
208:13 - read F and we're just gonna say o equal
208:20 - pickle load now you need to do a few
208:28 - things here we need to take our current
208:32 - class that's in memory that P and we
208:35 - need to dump it to our file so what's
208:39 - going on if you're following along here
208:41 - is we have our class called person
208:43 - making an instance of that class in
208:45 - memory and just adding some variables
208:47 - and stuff like that and I tried not to
208:48 - be picky we're taking that and dumping
208:52 - it to a file pickles taking a dump
208:55 - probably help if I had the right version
208:57 - of dump here
209:02 - there we go
209:05 - and see it's taken pee and it's putting
209:09 - it in an F F is just the file so don't
209:11 - get confused P is the instance of our
209:13 - person F is the file so it's dumping the
209:16 - person into the file the pickle has
209:18 - landed will be printed now we're making
209:20 - a new variable and pickle is going to
209:23 - load that little guy in there and I
209:28 - actually did that wrong there we go
209:31 - pickle is going to load the file in here
209:35 - now some some interesting things are
209:37 - going to happen as soon as we do this
209:39 - let's actually say print o just so we
209:43 - can see what's going on let's run this
209:48 - now hello my name is Brian the pickle
209:51 - has landed now you see this underscore
209:53 - underscore main person object at what in
209:56 - the heck is all this it's actually going
209:59 - to look at this file this is our file
210:03 - out on the desk now it may look
210:05 - different on your screen depending on
210:06 - what you're looking at it I'm using G
210:08 - edit because I'm on Linux and this is
210:11 - trying to interpret the hex values this
210:13 - may come up as a blank document this may
210:15 - come up as a bunch of weird gobbling
210:17 - cookin smiley faces it just depends on
210:19 - what you're looking at right but this is
210:21 - you guessed it a binary file now you can
210:24 - see some things in there like you see my
210:26 - name so you know something's going on
210:31 - here and you see it says name so you
210:36 - know that it's actually doing things and
210:38 - there's age
210:39 - the tricky thing of what this is really
210:42 - doing here is python is a dynamic
210:47 - language meaning you don't have to
210:48 - declare a variable type it knows
210:50 - intrinsically what type of variable it
210:53 - is it does that by you guessed it
210:56 - putting a class type in their person
210:59 - which inherits object at and then this
211:02 - is the memory address of where this
211:03 - actually lives on my computer neat
211:08 - so let's actually continue with this
211:10 - here now if you try to work with that
211:13 - object like let's say o dot notice how
211:16 - intellisense does nothing for us
211:19 - that's because pi term isn't smart
211:21 - enough to know what type of object that
211:23 - is because it has no idea what's on that
211:25 - disk so you can do some things and I'm
211:29 - gonna actually put this link out here
211:32 - because I found this really awesome link
211:35 - if you're using pycharm otherwise just
211:37 - ignore the link but what it is it's it's
211:40 - type hinting in pycharm some simple ways
211:43 - you can get PyCharm to understand what
211:45 - type of information you're working with
211:47 - here so and this is all built into
211:49 - Python so you don't have to worry about
211:50 - learning some proprietary thing if is
211:53 - instance and you're gonna say oh and
211:56 - we're going to say the person class then
211:58 - we're going to print o dot name or
212:04 - actually we could say o dot call the
212:07 - function watch this
212:13 - hello my name is Brian none no idea
212:17 - where that nun came from
212:23 - it's actually do dot whoopsy I'll see
212:26 - the age make sure the age actually
212:28 - loaded there it is 40
212:37 - put the name in there so what you're
212:41 - really seeing here that's gonna kind of
212:43 - bug me I'm wondering where that nun came
212:44 - from that will be your homework class to
212:47 - tell me where that nun came from because
212:48 - I don't have time to look into it right
212:50 - now
212:50 - I've actually got a rush but then that's
212:54 - what's going on so you can create your
212:55 - classes fill them with information
212:57 - serialize or save them to the disk by
213:00 - making pickle take a dump and then later
213:04 - when the computer starts back up and the
213:06 - person starts your program you can load
213:08 - those back into memory exactly how they
213:09 - were before the beautiful part about
213:12 - pickle is it intrinsically works with
213:13 - all of the Python types so it knows it
213:18 - doesn't have to guess it just knows that
213:21 - was a pretty awesome tutorial sorry I
213:24 - fudged a little bit and I'm really
213:25 - wondering why we're that nun is coming
213:27 - from that's gonna be my homework to
213:30 - figure out what I did wrong here none
213:33 - hmm
213:34 - I will figure that out but if you figure
213:37 - out before me post it in my youtube
213:38 - channel in the meantime be sure to visit
213:41 - my website void roms comm for the source
213:43 - code for this and other tutorials and I
213:46 - know I've been beating it to death but
213:48 - be sure to join the Facebook void realms
213:51 - group there's 200 of us in there
213:54 - the reason being I'm not always
213:57 - available it can take days weeks months
214:01 - to get a hold of me my inbox is
214:03 - continually slammed so if you send me an
214:05 - email and you really want some feedback
214:07 - it's gonna take a while so join the void
214:09 - rums Facebook or ask you a question you
214:12 - know 10 people are gonna jump on it and
214:14 - instantly start giving you ideas so
214:16 - that's it

Cleaned transcript:

everybody this is Brian and welcome to the first Python tutorial I wanted to do Python for a while I should dispel a few myths first everybody hears the word Python and I think this big evil monster snake and I mean even the icon for it is like these two snakes in a yinyang symbol so everybody thinks of this little guy right here it's actually not the case pythons been around for a long long time and it was actually named after the Monty Python if you have no idea who Monty Python is I feel very sorry for you and you should google it because they're hilarious their comedy is actually timeless but it's the whimsical nature of Python it's the language is tried to emulate that so if you go to Python org we'll be working with the newest version Python 3.43 that may actually date this video at some point if they drastically changed Python but you'll see it's available for Windows Mac Linux and pretty much everything in between and it even comes with full source code some things you should know about Python before we get started is they they really say batteries include this kind of the the lingo here for Python and that's I've got to agree with it it's very powerful and it's not very chatty and what do I mean by chatty some programs you have to write hundreds of lines of code just to print something on the screen Python it's just dirt simple and if you're in a university a lot of universities are actually replacing Java with Python as the learning language so I've wanted to kind of get into it I have a heavy security background and pythons actually become the language of choice among hackers not all hackers but a vast majority of them love Python because it's just very easy to work with and very powerful Python does come with a built in IDE called idle which I personally cannot stand especially for teaching purposes so I'll be using jetbrains PyCharm if you've watched any of my tutorials you know that we just you know take the seatbelt off and just dive headfirst and and I'm going to kind of slow it down a little bit because I realized that being an introductory language especially being taught at universities and some of my videos are actually shown at universities I want to kind of dumb this down as if this was your first programming language now that disclaimer being said I am NOT going to hold your hand through this whole process we're gonna take our seat belts off and dive right in so let's just go to it maybe if I can find a charm there we go so we'll load up pycharm I'm using the Community Edition 4 which is absolutely free and I'm just going to kind of move the window out here I should note that you're gonna need Python installed before you do this and you'll know because if you go to create a new project and you don't get a Python version here then you need to do something about that and what you do is you go out to python org download the version that's right for you if you're on Windows it's just a normal installer you know click Next Next and you're done if you're on a Linux UNIX BSD Mac whatever derivative you're gonna actually have to compile it by doing you know slash configure and if you've done this before you've done this a million times you just go into the directory you do slash configure make make test make test on my machine actually failed but then you do sudo make install and that actually installs it as Python 3 so you can open a command line here and you'll notice if I just type Python it says python 276 which is the older version so I'm gonna control D out of there I'm gonna do Python 3 and there's 3 for 3 that's the version will be working with right here so just bear that in mind if you have the old version of Python you'll want the new version for these tutorials and when I say old and new I should really explain that when you go out there and let's actually just rewind here a minute when you go out to Python you go to downloads you'll see you get the option between 3/4 and 279 the reason is back in I want to say somebody out there will correct me if I'm wrong because the Internet's full of experts but it's like python 2.5 they actually made a radical change to the Python libraries I shouldn't say radical radical enough that it broke legacy code so they've kind of branched it off here so they've got the old version of Python and the new version of Python and there's some gotchas so if you try to use my code with the old version it just simply won't work because it doesn't understand what you're trying to tell it so just bear that in mind you'll need the newest version why am i starting off with the newest version well eventually the old python will get phased out and render my tutorials useless so what's the point of wasting my time and yours alright so once you've got python set up if you're kind of like a little computer nerd like me you're gonna want to look and see what's in here you'll see there's the Python binary and there's all the little files that are created pretty awesome huh and if you go out to use your local Ben you will actually see there's the the symbolical link for python 3 jumping back into pycharm here we're just going to pick the newest version we're going to call this videos why not and hit create and tada there's pycharm in all its glory I'm gonna resize this a little bit here now I know I'm probably gonna get a million messages saying why are using PyCharm there's better IDs out there you know I tried a few of them and I wasn't impressed with a couple of them so I just I really liked PyCharm I don't know what it is I'm not in any way affiliated with their company at all I haven't even bought the product I just really liked the ID all right so first thing we're gonna do is make a Python file and we're gonna call this hmm we need a descriptive name let's call it video one because this is our first video and you see this author root shell well that's my user name on my computer so I'm going to change that for future tutorials and it puts that in there automatically for you now we are going to do the obligatory HelloWorld program and what I mean by obligatory um in every language your first introductory program is hello world where you literally just print hello world on the screen and it's this big inspiring thing and there's harps and kittens and rainbows and don't expect fireworks it's actually pretty fast and this one I used to do parentheses and then quotes hello world and we are gonna actually rightclick here and run video one and you'll see down here hello world and that's actually why I chose pycharm because it's very easy to see what's going on there's no magic behind the screen and you can see everything that's going on here and if there's an error it'll print it out you know pretty plain English here if you try this and you get an error message it's because you're running the old version of Python which is expecting something like this hello world which as you can see it's saying hey you know end of statement expected now if you don't know what a statement is or any of that you're very new to computers don't worry we're gonna cover all this in future tutorials that's it for this tutorial like I said painless no fuss no muss we're gonna dive into these headfirst and you really should go out to my web site void roms calm and click on tutorials and it's not there yet but I will add a Python folder in here and the source code for this and all the other tutorials I've done are out here also visit Facebook and join the void realms Facebook group there's like 200 programmers in there so if you have questions instead of emailing me and waiting six months for me to find your email it's much easier just to say hey guys I got a question well thanks for watching I hope you found this educational and everybody this is Brian welcome to the second Python tutorial we're just gonna jump right back on in here if you watch video one we did the hello world program we're going to kind of continue on with that make any Python file here and we'll call it the very descriptive video too and like I said in the intro we're going to cover this as if you're very new to programming so if you're a veteran programmer you can probably fastforward through a lot of this and just kind of pick up the highlights there are a couple little things and I'll try to point those out so in every program you need to leave comments and a comment is this just to comment it's you letting yourself know what you're doing at some point you're gonna get stuck you're gonna write some big long function and you're gonna want to write a comment saying hey this is what I did the comment is not processed by the Python processor if that makes any sense meaning is just a note for you the program doesn't care so you can type literally anything you want probably best to put a descriptive note comments are good so always keep that in mind we're gonna save this little guy here now the core of any program is a variable and I'm sure your instructors if you're in the university have said you know a variable is this sector of memory that a pointer points to and your eyes start glazing over and you start thinking about playing hockey or video games or call of duty or you know whatever all you need to know is a variable is something that'll change that's the actual literal scientific term for it a variable is something that will change in Python variables are very easy so we're just gonna say let's if I could actually spell first equal Brian's my first name we'll say last equal and Karen's is my last name and age oh boy I don't know if I want to put this out on the Internet I'm 40 years old and we're gonna actually make a comment here these are variables now if you try running this you'll see it does absolutely nothing it just says we ran and then whatever the name of the script is and finish with exit code zero hmm exit code zero does that mean it's an error no actually code zero means there was no error programs will return different codes and those codes are usually called error codes if you have windows and you've ever seen the infamous blue screen it's got some big garbling number that's the error code so exit codes here is a good thing what we're gonna do now is we're gonna learn how to print things out we already did the hello world we're going to say print in all its glory that's what this tutorial is all about is printing so we're gonna say print and we've done the hello world so that's nothing new you can also print and do single quotes hello world and what's really the difference here I mean if we let's just run this guy you can see it both prints hello world what's really the difference nothing actually it's just personal preference the single quotes make it easier to put a quote in the string and the double quotes make it easier to put a single quote in the string because let's say you want to say mmm David's cat notice how oh yeah suddenly now we got an error unresolved reference cat you'd have to put that inside of double quotes that way it doesn't process the single quote so if we run this again you should see David's cat so that's really all you need to know when it comes to that my personal style is they typically do double quotes you can change it however you want so what happens if we want to print out a variable well you may have already guessed the reason why I use pycharm here is it has this thing called intellisense you see this little popup that keeps appearing that tells you basic structure of what it's expecting you see print object separator and file flush well I won't really get into that in this tutorial you just know that what it's expecting is some object everything in Python is an object as an objectoriented language so we're gonna say first which is the name of this variable up here put the variable then you see there's Brian our variable now what happens if you want to print more than one variable at a time we'll say print and you can say oops first plus and plus last them you can do that and a lot of people do that exact same way and you see there's my name Brian Cairns but there's an easier and a more correct way string formatting and what you're going to do is a little bit of voodoo magic here but we'll explain this as we go we'll say print and you're just going to do your quotes and you're gonna say my name is and you're going to do a percent sign and an S which represents a string I am percent D for decimal years old now I'm gonna save this and run it just to show you what happens it says my name is % s I am % D years old that makes no sense what it's expecting is these are just placeholders and that's the format symbol or actually the percent symbol saying it's expecting a string it's expecting a decimal a string is just an assembly of characters like my name is a string a decimal is a number it could also be called an integer floatingpoint processor etc etc but basically it's expecting a decimal number now we need to do the percent sign to tell it it's expecting a format and we will need to give it what's called a tuple which will explain that in a future tutorial is like I said a little bit of black magic going on here I'll say Brian Cairns and 40 run that and you see Oh what is this trace back most recent call line 21 let's rightclick here and get some line numbers so line 21 if you actually click that link it'll take you right to the line hmm a number is required not STR that's what's going on this is an error and I want to kind of walk you through this because when you're sitting at home and you're typing away on this you'll make errors and mistakes and it won't line up at the video and you're gonna go what I do different I kind of wanted to explain this trace back that basically means it's going to trace back in the code but the file is the file we're actually running the line is the line number line 21 and if your cursors up here in PyCharm you can actually click it it'll take you directly to the line and it'll say in module module something we haven't covered yet and it gives you the actual code print blah blah blah blah blah the type error percent the format so we're looking at this guy right here percent D is a number required you know a numbers required not a string so what is really expecting is a number now suddenly it runs my name is Brian I'm 40 years old a little mischievous on my part I apologize if that was a little bit confusing but I want to get you used to making mistakes part of learning is making mistakes and fixing them people get very frustrated when they make a mistake I want you to make mistakes all right so let's explain this code and let's really understand what this thing is doing we have a string you know just a collection of characters and inside that string we have some special things going on here we have these formatting characters the percent s and the percent D meaning it's expecting a string and a number then we have the percent sign saying hey we are formatting this string so it's going to look for the percent signs and we're handing a tupple which is a list basically or an array if you're used to other languages which is think of it like a collection of objects it can be numbers letters other objects things of that nature and we've got two of them in there Brian and age now we can actually substitute that with you guessed it variables first and age these are the variables that we declared up here first and age let's run that again you'll see sure enough and we can even modify this again so we've got first last in age is what we're passing to this my name is Brian Karen's I am 40 years old whoo that's a mouthful there so that in all its glory is string formatting and how to create and hopefully resolve and fix an error message a lot of this is pretty intuitive but let's say you just kind of like goofed something up like let's add a little you know something there you'll see the little red squiggly and maybe that's not the best one let's just add some garbage in there yeah you'll see the red squiggly so a lot of time you can just mouse over and it'll tell you what's going on unresolved reference to and you can click on a little more and it gives you a detailed explanation that's part of why I chose this IDE because I see a lot of people learning Python struggling with the builtin idle and it's really not meant for beginners I'm sorry it's just not alright so we've made a variable we've printed the variable and we've shown different ways of printing it one thing we really haven't covered is string processing which we're going to do in the next tutorial what do I mean by string processing I want to cover this in this tutorial cuz I want to solidify what we just learned about variables a variable is something that'll change python is an objectoriented language you hear that a lot but what does it really mean well an object is an instance of something meaning it's a variable everything in python goes down to what's called an object or a base object if you've learned Java you're familiar with this concept so just think of object it's like a widget it's just this thing that exists and everything grows upon that so the variables an object you're an object your cat's an object your dogs an object your computers an object everything's an object at some point so with objects you can actually manipulate those objects and change them and that's what we're going to do in the next tutorial string processing well hope you found this educational and entertaining please visit my website for the source code to this and all of their tutorials it's Lloyd Rome's comm and I can't stress it enough join the void realms Facebook group there's like 200 of us in there it's a lot faster and easier to ask you know 200 people for help than to email me and wait months years decades centuries for me to respond hey everybody this is Brian and welcome to the third tutorial with Python we're going to cover string processing so let's actually close these other tutorials that I've done this I think this is going to be the last one for tonight I had steak for dinner and I'm starting to go into a food coma here so video 3 is going to be the very descriptive name of this thing and we're just gonna call this super awesome time with strings so I'm just gonna make a variable and we're gonna say hello world and because I really detest the hello world tutorials we're gonna just chop this thing up and have all sorts of fun with it so we know what a variable is we understand that a variable something that'll change we understand that things in Python are objects and with objects we can do things and that's what this tutorial is really about is doing things with those objects that we create does that sound confusing it is kind of confusing and that's why I hated computer science classes but it's actually a very simple concept so the first thing we're going to do is we're going to print the length of a string and my superawesome spelling ability all right print and we're going to say string is percent d bytes long and you remember this from our last tutorial now we're just gonna say Len well maybe Len STR and STR is our variable so we're getting we're calling the Len function will cover functions in future tutorials but a function is just a collection of code that runs inside of a scope super confusing I know but it'll be very clear once we get there and we're gonna just print this out so let's run this the string is 11 bytes long now if you want to pause this video and count that I can guarantee you it's going to be 11 bytes don't include the quotes now we're going to make that uppercase oops now one thing you should know when I hit that dot or the period you'll see it gives us a list of things this is why an IDE is super helpful especially when you're learning because you don't know all these things and you don't want to spend hours memorizing the help document and stuff you can just you know hit the period and it says oh these are all the things you can do capitalize count and code ends with and a lot of times it'll have a very you know kind of descriptive identifier next to it so in this case we're just going to say upper and we're going to make it lower case we're going to say print lower now you know this this little self here what a self mean we're going to cover that in a future tutorial but a self is a reference to the object you're currently in if you're in a class we're not in a class so it just ignores it we're gonna run this you're gonna see sure enough the string is 11 bytes long HelloWorld capitalized HelloWorld lower case and we are going to hmm let's have some fun with this we're going to find the position of a letter well actually let's change that to index we're going to find the index of a letter now what do I mean by index think of this as a list there is 11 bytes in here the list is 0 base meaning this is position zero I don't know if this is going to show up on the video then 1 2 3 4 5 6 7 8 9 10 11 because it's 0 if we call 0 we're going to get the letter H if we call 1 we're going to get the letter e we don't know where that is and we want to find it so let's say we want to find the position of the first O so we're going to print the position of O is and we're gonna % D here because it's going to return a number and we're going to say STR index oh now what does that do let's run this and find out the position of oh is for well if we count this out zero one two three four that's where o is right there it's the fourth character I should say it's the you know the fifth character on the fourth position because the zero based index want to cover that one more time zero based index meaning everything starts with zero seems like a foreign concept you think the first one would be one but no it's actually zero super confusing it's one of those things you just got to learn to live with another thing you got to learn to live with is let's say you do a capital o and you run this you'll see you get an error trace back recent call blah blah blah the code value error substring not found it couldn't find o because it is you guessed it case sensitive so we're going to actually change this a little bit string that upper index and we're gonna say Oh what we're doing here is we're taking the string making it uppercase which we've already done and then finding the position of the letter O and this time we run and you guessed it set position for two very important concepts there zerobased and casesensitive those are two things that I guarantee will trip you up as your career in a Python programming all right now we're going to count the number of ELLs yeah let's just put that in there that way it's more descriptive there are percent the letter L in the variable I will say in percent ass and all right this is what we're gonna do here we're going to make a tuple and we're going to say STR that upper dot count and you guessed it we also need to give it the variable because what we're doing here is we're gonna say there are however many letter ELLs in the and then we're just going to print out a string there are three letter ELLs in hello world this might look confusing and I want to explain this a little bit just in case you're sitting there scratching your head what we're doing is we're string formatting like we've done in the previous examples and we're making a double remember a tupple is just it's a list of objects tupple and lists are not used interchangeably we will cover this in a future tutorial the difference is a list can be modified a tuple cannot now the first item in the tupple think of it as like a book you're on page 1 the first thing is well we're taking the string making it uppercase because remember searching is casesensitive and we're counting the number of letter else our number of letter LS boy I am tired we're counting the number of ELLs the second one in our tupple is just the variable itself because we're gonna print that out here that's how we get there are three letter LS in hello world now we're gonna do some slicing what is slicing think of this string as a loaf of bread and you want to slice this into certain chunks like you want half the loaf or a third of the loaf or just one little slice we're going to print ste R and then we're going to do these brackets here and we're gonna say 3 looks very foreign to us what does this mean we're taking the string and then on position 3 we're gonna print that out which should be that L that first L so let's run this sure enough there's the L right there so we're taking a slice we're getting just one little slice and then we're going to just play around with this and just get really insane with it we're going to say we want one two four what this means is we're going to start the first position and we want four characters let's run that I'm sorry we want to go to the fourth position there nope yeah we did let's go to six just for more descriptive purposes yeah pretty simple pretty easy to understand now we're going to go print and we're gonna go let's go the zero position actually let's do this let's go one meaning we're going to start at the first remember this is zero base so we're skipping this H here we're starting at position one which is that E and we're gonna go to the length of the string so we're going to read the entire string now I'll let you pause the video and take a wild guess what this is going to do if you said it was gonna print the entire thing minus the first character give yourself a gold Stark that's exactly what it did now whoops we want to split this splitting a string is very handy like let's say someone gives you a name and you want to split it into two variables so we'll say name equal then we're gonna make a new variable here Brian Cairns and just you know type your name you don't have to use mine and we're going to print and we're gonna say Str split oops and we're going to split based on spaces so what this is gonna do is it's going to actually create a new object I believe it's going to create a list and it's going to use the space as a splitting point meaning if it's not a space it becomes its own unique object whoops help if I do the right variable there we go so you can see now we have a list with Brian and Karen's inside of it to kind of solidify that let's say my list equal main split we're going to split on the space and let's actually just print out my list it's gonna print the same thing but we're gonna say print we're gonna get just a little crazy here my first name is % s and my last name is you guessed it % us and we're going to format that actually let's I've never tried this this may explode drastically but let's try this and see what happens yeah not enough arguments so we're gonna actually do this so what we're doing here is we're creating this list which creates two unique variables because we're splitting the string into two different things remember the split point is the character we defined in this case it's a space we're going to print that out and then we're gonna print my first name is and then whatever the first item in the list is and my last name is whatever the second item in the list is remember this is zero base so the first one is always zero and the second one is always want super confusing I know drives people just insane and sure enough my first name is Brian my last name is Karen's whoo that is a lot of work and if we were doing a different language like say C++ or Java that would be probably about four or five different tutorials and we'd be about two hours and discussion this is what I mean by Python comes with batteries included it's very powerful and you can do some pretty complex things very quickly now don't beat yourself up if you're having a hard time wrapping your head around lists and things like that because we just simply haven't talked about them yet but we're gonna get to them very soon that's all for this tutorial thank you for watching I hope you found this educational entertaining the source code for this and other tutorials will be out on my website boy drums calm and I know I'm kind of beating a dead horse here but be sure to join the Facebook group called void realms there's like 200 programmers in there and I see a lot of people coordinating and helping each other out and it's a lot easier than trying to get a hold of me everybody its Brian this is the fourth Python tutorial we are going to go over a few different things here so first thing we're gonna do is make a new file and we're going to call this the very descriptive video lower now the first thing we're gonna cover is going to be less we've talked about lists and tuples and things like that and I keep saying we're gonna get to it we're gonna get to it well guess what we're getting to it so we're gonna talk about lists now what is the list if you're familiar with other languages a list is an array in short if you're not familiar with other languages well what is an array simply put think of it as a box and in that box you can place things like like so let's call this M list and you need these brackets here and we're just to say one two three four five that's a list so think of it as a box that you can place things in and in this box we have five things now you've heard me talk about zerobased that's your first indicator that it's an array most languages arrays are zero based you can pretty much use the term array and list interchangeably so if you hear somebody say oh I was working with an array they're working with a list if you serious somebody says I'm working with a list they're working with an array pretty much a similar concept obviously when you get into different languages they're treated differently but down in the nittygritty they're pretty much the same the cool thing however about Python is you can actually put things of different types in here so you can also say like let's see let's actually let's redo this whole thing I want to really get crazy with this say 5 2 1 4 3 and then we're gonna say dog cat and yeah why not bird because I can hear my girlfriend's bird the background squawking away I don't know can you guys hear that on the video it's like a super loud I can hear it through my headphones anyway so we're just going to print the list save that let's run it and you can see it just prints up pretty much what we just typed in that's exactly what it looks like in memory as far as python is concerned anyways I know the C++ people are like no that's not what it looks like but we're in Python land so when in Python land do as the pythons do or Romans do or whatever this thing is all right now why would you want to create a list you've got this box you've got things in it what can you really do with it well think of it in terms of like a line at a bank there's 10 people in line each one of those people is unique but you need to treat each one of those people as an individual and that's what you can do with a list you can actually do some pretty cool things like we're going to count the number of cats because I really like cats print and we're going to say there are % the cats and I've had a very long day but a very rich and rewarding day so I made make a few mistakes now remember from our previous tutorials this is case sensitive so if you do cat that's not going to find it remember everything is case sensitive so let's run this there are one cats because there's one cat in there now if we were to just you know through the magic of copy and paste let's just throw a cat in here somewhere I like saying that let's just throw a cat in there there you go there are two cats I mean some programming languages that are like trying to herd cats so anyways so you can count the number of specific objects in there you can also get the length oops in let's just do this we'll say whoops % Len and unless I'm pretty sure that's how that works yep there are eight objects unless you count those out there are eight of them now let's say we want to find the specific position of something like we want to find that pesky cap find the index of the cat now what is index well items in the list are indexed meaning they have a number in memory the first position is 0 then 1 2 3 4 and on and on and on so e0 base remember that it always starts with 0 so we want to find where is this what's the index what position is it in we're gonna say print the cat is at index and we're just going to do % D percent and we're gonna say and list index and we're going to find that cat all right to run this again the cat is at index six so if you count this out remembered zero base zero one two whoops zero one two three four five six so we're at the sixth base whoo all right we're not done yet let's actually have a lot to them so we're gonna actually insert an item into this list now if this tutorial gets too long I might break it up into a few videos I've been trying to keep them a little bit shorter I've had people tell me hey man I watch your videos on my cellphone and they get a little bit too lengthy so so insert and we're gonna insert at position two or I should say index dude we're going to insert a fish what was the last time you really wanted to insert a fish into anything really think about that all right so we're going to now print out the list and see what happens here and you can see it position two member zero base zero one two we now have a fish now we're going to append an item a pen just means add it to the end you'll hear that quite a bit where I'm going to pen the file or pendant index or a pendant array or whatever dependent object alright and list oops cannot type today a pen and we're going to add a snake and we're gonna print out the list here you know see sure enough now we have a snake at the end of our list now we want to remove the item because I'm not a big fan of fish I'm wearing a steak and potatoes kind of guy remove the fish and we're going to say and list remove a member case sensetive here and now the fish is not missing see now let's get a little crazy here let's say we want to reverse this and we're going to say we'll see here at endless reverse and then we're going to print it out so now the list is exactly reversed it's a mirror image of what it was notice how reverse actually took our existing list and modified it so if we were expecting you know cat to be at a certain index it is now at a different index and you can test that vise you know running that yourself saying what's the index of cat we can actually just copy and paste that there and running this again and we'll see the index of cat is now at 200 so you got to be a little careful when you do things like reverse so what we're gonna do next I'm just gonna add some space here is we're gonna slice and sort and this is going to be the end of our little list here remember a slice we're talking about like a loaf of bread you can take a chunk or a slice of the bread out of the loaf that's exactly what we're gonna do here so we're going to make a new list and we'll call it an list actually let's call it a new list that way it's not confusing and we're going to say n list dot copy and what we're gonna do here is we're gonna actually just make a complete copy of that a mirror image if you will I shouldn't say Marika's mares are reversed but you know I mean we're making a you know a clone of this thing now we're going to take the new list and we're going to reverse it back to the way we wanted it and we're just going to say new list equals and this is going to blow your mind a little bit here new list and we're going to actually slice this thing and we're going to say 0 to 5 and then we're gonna sort it and you're probably gone what in the heck is he doing well we're gonna explain this here super quick so what we're doing is we're taking our existing list we're making a copy of it shoving it into memory as new lists we're taking new lists which is a copy of that and reversing it so it'll now be back to you this way right here we're then slicing we're saying from index 0 to 5 get another list now what we're doing is we're taking our new list slicing it and adding that new list into that memory what does that mean exactly it means we're overriding that variable remember a variable is something that will change you could very easily create an entire new variable called my new slice or something but I just wanted to show you that you can actually do that to variables now because we've gotten 0 through 5 we're pretty much only gonna get these numbers then we're gonna call sort and it's going to print out the new list which is going to be 1 2 3 4 5 fingers crossed let's see what it does yeah it worked there's our new list right there 1 2 3 4 5 now in case you're curious you cannot call sort on mixed types you will have to have some way and I believe we're going to do this in advanced tutorials of telling it how to sort but it's much more advanced than where we're at right now that's why I took out the bird the cat the dog the snake and etc etc etc because it would throw an error in there so let's let's just demonstrate that let's say new list append and we'll say kitty because I like kitties and let's try running us see what happens yeah see we get unsorted types there you go that's why I took that out so I think we're going to try and keep trudging along here we're doing pretty good on time I want to cover temples so let's just call this actually I probably just keep it all in the same file why not let's do this let's go so we know that we're switching up here now we've worked with tuples before and you probably want and the heck is a double well I'm going to copy and paste some stuff in here just to save time which I like that sound effect witchy anyways this is a multiline comment it's just triple quotes a tupple and I actually got this from learn Python org and I don't think I could have worded this any better tuples are fixed size in nature whereas lists are dynamic meaning once you create a tuple it's not mutable meaning you cannot change it it's readonly yes I'm going to repeat that it's readonly meaning you cannot add elements you cannot remove elements you can however find elements since it doesn't change things you can also in the operator check to see if something exists now why would you want a tupple well in case you wanted to read only you'll notice a lot of the functions we've been passing things to our tuples we're passing readonly information we don't want that function to modify the information we're passing it so let's just make a couple here and we'll call it my Tuffle and the syntax for this is very scary are you ready we're just gonna go 1 2 3 4 5 notice that's the difference right there at list has the brackets tuples has parenthesis that's it that's all there is to it now we're going to print it out we're gonna print my topple just so you can see you at the very end 1 2 3 4 5 and let's just add to poll that way we know it's different there we go so that's our topple and you can even see in the little window here to list versus the tupple indicator so you can plainly see they're different now as you'd expect because this is not mutable meaning we can't change it when you hit the period after the variable name there's a lot less options here we can count and we can index which we've already done and lists and they're the exact same syntax but that's pretty much it I mean you can iterate over them but that's pretty much you can't really add or insert or anything like that so you can say you know let's do let's just let's do it print index of 3 is I got distracted sorry about that it's gonna happen from time to time let's run this so the index of three is actually two because remember this is zero based so pretty much everything you've learned with lists you can apply that to tuples anything that's going to modify that list you can't add you can't remove you can't modify the item etc etc one thing I probably should back up here let's actually just do this modify an item in the list how would we do that so let's say new list we're back in list mode sorry we had to back up here for a second and you can access it by its index and this is why index comes important so we're gonna take that first item because it's zero base and we're gonna say lol why not just you know because it's been one of those days I hear my daughter's say that all the time lol lol and when we run this you'll see because we reverse it's our last list there's lol so that's how you would modify an existing item you call it by its index now if you try to do that with a tupple it's actually just through the magic of copy and paste here and will change my tupple and we're going to try and modify this tupple here what do you think's going to happen yep topo object does not a not support item assignment meaning we cannot modify this and I'm actually going to leave this in the file bad will not work and I comment this out here just to kind of solidify that a tupple cannot be changed who you think we're done nope we're not we're gonna cover dictionaries now what's a dictionary did I spell dictionary right we're gonna say that I did I had eye surgery so I know how I don't need glasses and sometimes things get really blurry and what if I stare at word too long it gets very blurry so forgive me if that's misspelled all right so what is a dictionary think of a dictionary as a list on steroids so we're gonna say ages and we're gonna say ages is and we've got yet another type of bracket I don't know what that's really called I'll call it a bracket why not Brian and then we're going to add a semicolon and we're going to say 40 and then a comma notice that comma separates things I say Heather which is my daughter and she's 22 and we're going to print whoops print eye surgery I'm don't blame everything on the eye surgery from now on in case you're wondering eye surgery was expensive but it was well worth the money I actually did a video on it if you haven't seen it I recommend you go watch it all right let's run this and at the very end you'll see here is our dictionary now what's going on here this looks a little different we've got these brackets we've got a string and an integer separated by a semicolon well what's going on here is we're actually assigning our own indexes or keys as they're called to kind of solidify that we're just going to print pages dot keys so we're only going to print the keys notice how it returns a dictionary of keys Heather and Brian so what we're doing here is we're replacing the index which this guy right here the number we're replacing that with an actual object and it can be anything it can be it could be a class it could be a string it could be a number could be whatever so now we don't have to remember position zero we can do some pretty cool things let's actually just finish this up here print ages values we can also print the values out and we're going to print ages items just to give you an idea of what's really going on here so the keys are there the values are there and the items are well you guessed it now notice how these are tuples kind of neat huh but what you can do here is you can do things like let's say you want to print a specific item like let's say print ages Brian what do you think that's going to print well it's going to print the value at Brian's index or the key so it's going to print 40 sure enough there's 40 so that's how you can do that so you don't have to remember okay well this is at position this this is at position that no you can assign your own keys it's pretty sweet actually all right so we're going to now add an item actually let's delete sorry we're going to say del pages whoops Brian and remember these keys are casesensitive everything's case sensitive you should also remember that and we can and I'm going to add a note behind here can use pop now what does that mean well deletes just going to delete this key with The Associated value and pop will delete it but also return it we don't want to return it so we just want to delete it kind of confusing all you really need to know is if you want to return it and delete it at the same time use pop otherwise just use delete and we're going to actually print this out what we're done why not and now you can see that the only thing in our dictionary is Heather well that's no good my daughter gets lonely so we're going to add an item back in and item and I can tell my eyes are getting tired that's one thing I didn't like about the eye surgeries now my eyes get like very tired very quickly makes video games kind of a challenge to add an item in you pretty much just call a key that doesn't exist in a sign at a value and then we're going to say print ages items and now Brian's back in our dictionary now modify a value let's say ages brien equal 99 why not I'm not that old but print ages what do you think's gonna happen here let's run it and find out brian is now 99 now you might be a little confused because when you print this out you'll see that it's a tupple and you're like now wait a minute you cannot modify top well you just explain this that's true what I've just given you is the dictionary items this is what it's going to return from the function but internally in memory it's a list it's actually two lists and then it manages what points to one so you can actually modify it who a mouthful well we learned quite a bit in this tutorial we've learned about lists worried about tuples and we've learned about dictionaries and we've learned how to use them pretty well I might add there's still a ton more out there to learn but that's all I'm going to cover to this tutorial just for the sake of time I'd encourage you to go out to Google and you know do a little research on your own also be sure to check out my rest of my youtube channel I've got tutorials for other languages as well and I've got whole my gosh almost 5 million views I haven't looked at this in a while my website is run off donations so imagine if everybody will that viewed like donated $1 I would be retired anyways void roms calm you can I haven't put it up yet I've been really busy but you can find the source code for this and other tutorials and there is a void realms Facebook group with almost 200 of us in there I'm hoping to grow that because I see a lot of collaboration and people just helping each other out well that's it talk to you later everybody its Brian and welcome to the fifth Python tutorial before we begin I kinda wanted to point out on pythons website because I've already been getting questions there is a full set of documentation on their site they even have a beginner's guide a developer's guide and even non English documentation so if English isn't your primary language you can find a lot of good stuff out there and I mean I ate a lot of it I mean there's just tons and tons and tons so alright without further ado let's just jump into PyCharm and we're gonna make a new Python file the very descriptive video 5 it what we're gonna cover today is gonna branch off from what we've been learning we're gonna build upon everything we've learned so far everything we've learned has been a very simple oneliner you know print something well we're gonna embark on a journey if you will we're gonna learn about conditions usually when someone has a condition it's not a good thing but in programming and conditions a very good thing a condition is like an if statement if I'm hungry then go to the kitchen get something to eat you know that kind of thing so that's what we're gonna learn today before we start with conditions we have to learn about scope so what is scope and I'm going to say chavo well that was embarrassing can't spell Java in Java you'll have these brackets it's called a C style language and if you've tried these before you probably don't like the brackets i personally love them but the brackets are there for a reason you'll have your statement don't worry if you don't understand what that means you're just saying if and then you got start bracket in bracket now you're looking at this from a Python perspective that's a dictionary no it's not a dictionary that's scope what we're saying is scope one there's actually scope zero and there's actually three scopes in this little picture here so what is scope remember how we talked about variables and something that'll change well a variable is controlled by scope and what I mean by that is if you declare a variable here in scope zero it's available in scope zero let's go up 1 and scope three if you declare it and scope one it's pretty much only allowed in scope one that being said that's what these brackets do they tell you that hey this is scope there's something in here so you can have and let's actually just make another java if statement here it's gonna format this correctly so we see what's going on there's actually you know scope for so what you can do now is you can define a variable in scope zero and it's available in all the scopes you can define its scope one and it's only available in scope one you can define it in scope four and it's only available in scope for that keep things very what's the word I'm looking for encapsulated within your code now Python does away with these little brackets that people just seem to hate but you notice how things are indented here like actually let's Nestle an if statement in here this is about what it would look like so now we've got five scopes you're probably going why is he showing me Java this is a Python tutorial well I'm doing it simply because these brackets are very illustrative of what's going on you notice how things are indented and you get this little line in PyCharm that shows you the indentations Python does not have these brackets Python works with what's called white space uses white space specifically for scope for example let's get rid of these little brackets here and you begin to see what a Python program would look like you notice how things are indented that tells you right there that's your scope and PyCharm drawers this beautiful little line say hey here's the scope of this here's the scope of that here's the scope of this excetera cetera pretty neat huh well if you're coming from other languages that's going to be very confusing and that's why I wanted to really illustrate that so we're going to make an if statement a condition we're gonna really hammer out the if statements this tutorial we're going to say x equals y not 9 if x equals 9 then we're going to print mine is here now there's some things you should be aware right off the bat notice how the double equal sign if you have a single equal sign you're actually assigning a value you're saying X is now nine we want double equals that's how we say if it is equal to we're not saying it is equal we're saying if it is equal to a little bit confusing but you understand that you need this calling here and then there's our print statement so what we're doing here is we're defining scope notice how my little cursor stays on the scope line Python uses this whitespace to determine scope keep that in mind at all times let's actually run this and so we've got nine is here and here all right pretty neat I'm actually gonna get rid of the end here just because it's bugging me and then we're going to show inequality somebody emailed me last night and said hey dude your keyboards like insanely loud I'm like yeah but I really like this keyboard once you get used to keyboard it's really hard to just go somewhere else if X and then we're going to say the not operator not equal to 9 don't forget that at the end and 9 no more now remember that X is now 8 because we're assigning it and we're saying if it's not equal 9 then we're going to print something 9 no more some common mistakes you're gonna make you'll forget the colon and then you go to run this so that it's gonna go boom syntax error invalid syntax and then you're just sitting here going what just bear in mind pretty much rule of thumb anytime you're going to make a scope you need that colon in there now remember x equals 8 actually just so I don't confuse you guys x equals 8 and we're going to get a little creative here we're going to say if X greater than 10 and we're gonna say else now what's going on here some of you that are into other programming languages already know oh my gosh this is so boring I mean I apologize but we got to start somewhere we're saying if X is greater than 10 then run this scope else meaning if it's not greater than 10 run this scope and it is of course less than 10 so we ran the scope but not this one that's where scope comes into play you make a condition you determine which chunk of code to run that's the basis of polymorphic algorithms you can decide based on a number what happens for example if we were to change this to x equals 3 no actually let's say 30 because we want to show that it's greater than now suddenly it's greater then that's polymorphism right there now we're going to show boolean operators and we're going to say name equals H equal 40 I think my girlfriend just got home if name equals Brian and age equal 40 remember the colon at the end whoops misspelled that there can be only one else whoops you are not Brian you don't have to use my name and age you use your own just for illustrative purposes here so what's going on here we're doing and and as a bowling operator we're anding in memory in other languages it looks like the double ampersand but in Python is just literally the word and so we're saying both of these have to be equal the name has to equal Brian and the H has to equal 40 in order for this scope to execute else this scope will execute let's run that there could be only one because sure enough Brian at 40 now if I change that to 41 you are not Brian let's change that back now we're going to through the magic of copy and paste here we're going to say age equal 21 and we're going to do the or operator here and we'll say you and I have something in common we're gonna say my mouse would quit acting up we have nothing income so we're gonna or here and in other languages it's this double bar but in Python is just the word or we're changing age to 21 so now it's not going to work with the an so you're gonna say either the name is Brian or the age is 40 if so you and I have something in common otherwise we have nothing in common you and I have something in common because name's da'briyon now if I change this name you and I have nothing in common you can see how that kind of works and let's kind of dive into lists a little bit here we're gonna do a little list checking and we're going to say let's change that variable x2 dog can't fish maybe if I can do that right and we're gonna say if cat we're going to use the in operator print we have a cat else print no cats how sad why not because I really like cats sorry all you dog lovers out there I just really like cats so we have a cat because there is a cat in X the in operator will literally search that for you I'm pretty sure under the hood it's just calling index of and if the index of is not throwing exemption then it's doing something so we're gonna take that cat out of there and run this again no cats how sad so you can see how the in operator here works and we're going to do the is operator now this takes a little bit of explaining I'm going to make two lists here a equal and I'm gonna literally copy and paste this here so we have two variables with the exact same values and I'm going to say if a equal B and print they are the same else print they are not the same don't forget your scope there let's run this to find out what happens here they are the same now that's the equal sign we're going to do is the is operator is a little bit different than equality is determines if it's the exact same object and when we run this they are not the same object they're the same but they're not the same object what that really means is they have the same value but there are two different objects in memory so when you change a it's not going to change B now if you say a equal B guess what's going to happen there's still not the same object because what we've done is we've copied from one to the other so you can still interchangeably modify those in memory pretty crazy huh now just because I know I'm gonna get an email we're gonna say this little if statements how do you make a statement within a statement well usually you join an activist group and grow your hair out long and hand out pamphlets at the airport but we're gonna just stick with the F statement here so let's say let's make mmm I need some more variable names let's go name equal Brian age equal 40 well they're not new variables I just want to illustrate what's going on here and pet equal cat why not so we're going to say if name equals Brian notice I forgot that and what I typically like to do is just flush out my scope first that way I don't get confused what's going on and these don't have to be on the same lines you can space things out if page equal 40 so that in a nutshell is what a nestled if statement looks like and you can keep going and going and going for example whoops if pet equal cat like that you you have a pet cat prince GoGet hey cat alright so what's going on here let's explain this nestled if statement this really demonstrates scope and Python remember how I started this whole conversation with the brackets well if we're in another language they be brackets all over the place Python does away with that we just have whitespace you can see that line showing hey here's the scope for this here's the scope for that just because they're on the same line does not mean they're the same scope for example that scope and that scope are different you have to really know where you're at now why does Python do this why does Python make this drastic change from other languages and not file file oh geez follow the brackets this C style well for a couple reasons first off it's a lot less you have to type also there's no hard fast rule another language is saying you have to indent I've seen people do things like X equal for something something do something you know blah blah blah blah and you can get some really just gnarly unreadable code and you got to look at this brackets gonna get that's that's go that's that scope that's calling this function and Python does away with all that and it says you know what it's going to be maintainable it's gonna be readable and it's going to be future proof now what does future proof means it means when you come back to this code six years from now and you don't remember what you wrote you can go oh well here's that scope and okay it just follows along your brain just follows it and you understand so we've got our nestled day of statements and this is a beautiful example of polymorphism at work we've got three variables named agent pet name equal Brian so it's gonna print hello Brian age is 40 it's gonna say you are 40 years old if not don't say you're not 40 or you're not Brian you know depending on what we've changed and then we've got our you know cat so let's run this hello Brian you're 40 years old you have a pet cat so we'll say instead of cat I have a dog go get a cat because it's running this scope and not that one if we change this to let's say 30 hello Bryan you are not 40 years old so it just skips over this whole chunk flips this whole chunk and runs you are not 40 years old it's a pretty pretty good example of enough nestled if statements in polymorphism well that's all for this tutorial be sure to visit my website boy drums comm I actually did get a chance to go out and put the Python tutorials out here so I've got the source code for this in other languages out there as well this site is funded by your donations so if you're not hurting for money feel free to donate $1 to also join the void rums Facebook group there's 200 of us out there and we'd love to help each other hey everybody this is Brian and this is the sixth Python tutorial just had an earthquake it's kind of weird cuz I live in Michigan and we really don't have earthquakes here I think it's the second one I felt my whole life kind of weird so anyways I was right in the middle of doing a video when it happens so I have to start over which bothers me but so today we're going to discuss loops before we dive into loops I want to revisit scope let's actually just make a list here and we're going to make a blank list and we're going to say for and range and I'm going to say 10 the range command just makes a range of numbers and you're going to X append we've done this before where we're adding to a list and we're going to print X and I'm going to just run this just you can see what goes on we're making a list and each time it jumps into the loop it's expanding the list by adding C but before we really discuss it I want to discuss scope cuz the last tutorial we said this would be scope 1 we actually comment that out there which means this would be scope 2 and this would be scope 3 now I know some of you are actually sitting there going wait a minute scope 1 let's go up 3 or actually the sames go well you're right you're absolutely right I wanted to show the steps 1 2 3 4 illustrative purposes but the reality is they're the exact same scope there are some gotchas however you need to be aware of like let's say you want to print a variable called name and you know because it's the same scope you want to do it down here because a name equals Brian if you try to run this it says 8 name not defined you can see the little red squiggly line here so you have to define your variables before they can be used see there you go and that prints it out and because it's in the same scope you can actually let's actually put it under there so you can see you can see it still works now let's actually take this and move this into the second scope here notice how it still works even though it's not in the same scope the reason for that is twofold first we set the variable or we've declared it I should say before we've used it so that works and scope too is a sub scope of scope one meaning scope two actually lives inside of scope one so anything inside scope two is accessible to scope one same rule still applies though you have to declare the variable before you can use it C fails so I really wanted to clear any misconceptions you might have about scope before we really deep dive into looping all right so what is looping looping is like having a conversation with a sixyearold child that keeps asking why why is this guy blue why this why that why why why or an old person well what's this what's that what's this what's that you know not trying to disrespect young children or old people but it's an example of a real life loop that you've had to deal with a loop is just a segment or a scope of code that's going to repeat itself for I in range 10 meaning we're saying from 0 to 9 because it's going to make a zero based index you're going to append X dot append the current number this is called an iteration whenever a loop jumps back to the beginning it's an iteration in some languages they actually used to have goto statements but in Python simple iteration so let's run this and you can see the iterations we have 10 iterations and with each one our list is growing because we're appending to it pretty neat huh and if you wanted to not see the iterations but just see the finished product you would just take the print statement and throw it back into the first scope and there it is in all its glory our finished list and I actually bumped that back into the sub scope so that's a for loop a fours are very handy for going through a range or a list or a tuple or even in a dictionary now we're going to do a little bit of fun here we're gonna say for I in X meaning for each object in our list we're going to print index is set D and we're going to present the X and we're going to say I minus 1 the index is 9 1 2 2 da da da da da what that does is we're going through our list that we built here and we're saying the current index is now notice how it's not sorted it's just whatever random order so sometimes you may actually want to sort that and make sure now I shouldn't really call that an index it's a position within the iteration it's a little bit different but it does kind of highlight that this is a zerobased array for example if you say I try running this now it actually works the way you'd expect it index is 0 through 9 and let's say I minus 12 just to see what happens here notice how well we're out of range out of range is a very common error for looping really which you need to understand without of range is you've gone out of the bounds there is no I 12 index now when you say I minus one what's going on here is another common misconception because it's a zerobased array you think oh I got to get the position minus zero now this is an iteration the iteration is automatically going to start at zero which is why this works correctly so those are some gotchas if you come from other languages so what we've learned so far is that the for loop will take in an array or a list or a tuple or even a dictionary and you can iterate through them and that's what we've really gone through here if that's not making sense at this point think of a for loop as a repetitive task you know you're a mailman and you have to deliver mail to 100 homes so for I in range 100 you know 100 homes deliver mail that's what you're really doing and that's actually to a dictionary why not today we're going to actually have to make a dictionary we call it ages that's one thing I really like about Python is once you've done it once it just kind of sticks it's really hard to describe you just kind of remember Python unlike most other languages is small enough to actually fit in your head meaning you're not constantly looking things up so we're going to let's actually space that out so we can see here we're ready to print say whoopsie % s is percent D years old mm hmm maybe there we go and we're gonna say name age so what we do is we've got our dictionary and now we're saying for name and age in ages dot items which makes an iteration list we run this Brian's 40 Heather's 22 now you see the real power of four loops you can take a complex data structures such as a dictionary and make it do something meaningful and now we're going to do the while loop now the bonus question for anybody out there wanting to score extra credit what's the difference between a while and a four anybody anybody four will always execute while may not execute well true maybe if they spell this got a lot going on tonight it's prom night we just had an earthquake I've got a couple new video games I just passed my PMP exam so it's been busy while true what's that going to do if we run this this is another common mistake I see people making in every programming language not just Python while true well that variable because that is a variable it's never going to change so it's just gonna keep going you've just created an infinite loop see it just says too much output to process and it's still running I have to stop it we have to interrupt it and it just I mean there's thousands and thousands and thousands and thousands and thousands of these things so if will say and plus equal 1 we're gonna increment n and we're going to actually just print out in see what happens here oops it's got to be on the same scope there we go and you see how that number just keeps going up and up and up and up eventually this program will crash because we're incrementing and it'll just go out of it'll go you know what's the it's a raincheck error that'll end up happening basically it goes into data types certain data types can only hold so much information and eventually it'll get so large it'll just stop or it actually may be wrong because in some languages it'll actually revert back to zero and start over again so we can say while and is greater than ten what's going to happen here well when we run this nothing happens because n is already zero so this already is false that's the difference between a for in a while a for is always going to have that range that it's beginning with where a while we'll evaluate the expression it may not actually execute so let's actually just go back to true our example of an infinite loop here and we're going to actually do some processing here and an infinite loop in case you're wondering why you would want that it's actually quite common if you're working with like say a network connection or a file or something and you want to monitor the bytes in yeah you just want to loop indefinitely until you have some sort of breaking point that's what we're gonna talk about next so if is greater than or equal to ten then we're gonna break Brik means it jumps out of the current loop it just literally stops and says nope I'm done and we're gonna actually execute that and we're gonna go print finished Wow I cannot spell finished looping let's run this and now you see it says finished looping and let's actually just print this out here we're gonna get a little crazy actually we're gonna say if and equals six whoops print six is awesome otherwise actually let's just continue and I'll explain what continue does in just a second all right so here's our program or run this you can see how it says one two three four five six seven eight nine but it says six is awesome and we finished looping so this is the while loop in all its glory we're incrementing our end and then we're saying if n is greater than 10 we're going to break which means it's going to break right out of the scope right out of this loop so it's gonna go all this it's gonna say I'm done with you I'm no longer iterating and it's gonna jump here to finish looping if however it's 6 we're gonna say 6 is awesome and we're gonna continue notice how it doesn't just print out the number 6 what continue does is it jumps back to the beginning of the iteration it just jumps right back so anything down here will not get processed once that continue statements they're very key concepts you should know our break and continue that's how you break and continue out of loops a break will exit the loop to continue we'll just start at the next iteration or the next step whoo that was a mouthful we've learned quite a bit some things you should bear in mind is range checking I mentioned earlier that if we just kept incrementing this eventually it would crash always check your ranges so if you have a defined range like a list or a dictionary tupple you should almost always use the for loop because it does the automatic range checking for you you don't have to say you know if it's greater than the list count exit da da da it's all done for you all right well that's it for this tutorial I hope you found this educational entertaining be sure to visit my website void roms calm I've got the source code for this and other tutorials out there and be sure to join the void rums Facebook group we have I think we're just about hit the two hundred someodd mark of developers in there from all different languages not just Python so if you've got like a Java or C++ question or even like a Ruby or a scaler or something like that there's people in there that know this stuff and they can help hey everybody this is Brian welcome to the seventh Python tutorial alright we're gonna dive right in here maybe if my mouse will actually work with me again we're gonna make the video seven and we're gonna call this one on with functions catch I cannot spell alright so what is a function whether you know it or not you've probably worked with them before we're going to use the word def de F which is short for definition and we're going to say do some thing now inside of this definition we're just going to say print hello world and let's run this as you can see nothing happens the reason for that is simple a function or a definition in Python needs to be called meaning this has its own unique scope so if we actually for illustrative purposes here so start a program while we run this little guy you'll see start a program executes right here but this definition does not because we have to call this and to call that you literally just do this notice how you have to include these brackets here there's our hello world now if we take these brackets out what happens well it doesn't do it because we're not actually calling it at this point we're just declaring a empty variable using that name so you have to use those brackets now let's make a little bit more of a complex function is that even English a little bit more of a complex function it's been a long day and I just got out of the gym so bear with me here when I say get list and we're gonna say max and let's do this X equal let's see I almost type the word now you can tell I'm tired cause I was thinking in C++ for a minute all right so we're going to make a new list with a range in there we're going to say for I in X and we're gonna say X I equals I times let's just just just pick a number here let's say five and then we're going to return X so what we're doing is we're actually returning a value meaning this function this definition here is going to run and it's going to return X meaning it's going to generate X and then it's going to return it I keep saying return but what does that really mean so what we can say here is oh say my list equal get list and we're going to say 20 and then we're just going to print my list notice how we're assigning the value what we're really assigning is X from here we're calling yet list and we're assigning the value let's run this ooh what have we done wrong oh yes we forgot our little little semicolon there here we go beautiful so there is our list right here now quick discussion on scope remember how we said in previous tutorials where you had to declare a variable before you can use it well the same thing applies with definitions and functions for example if we take this my list even though it's in this same scope and we try to do this first before the definitions been declared we get an error see get list is not defined it treats it like a variable pretty neat huh now this is an example of a single parameter that's what this little guy here is called a parameter we're going to do a multiple parameter and we're going to say def get animal let's not say get animal seat get person now say name age equal zero and we're just going to print that was not good you can tell them tired yeah we're just going to say print now there's a couple things going on here and get person first we've got multiple parameters separated by a comma you can have as many as you want and this can be pretty much any data type we could do a list dictionary and integer string whatever you want to do and we're saying the person is you know whatever you want and they are however many years old now you also notice age equals zero meaning we're actually setting a default value that does a few things here whoops if we say we're not we shouldn't call that get person we should call that print person because we're not actually returning anything so we're going to print person and we're gonna say Brian and I am 40 years old go ahead and run this the person is named Brian they are 40 years old now if we omit the age what's going to happen person's name Brian they are zero years old notice how it used ero because that is our default value for that parameter we could also do the same thing as name notice how if you supply the parameter it will use your supplied parameter if you omit it it will use the default now what happens if you don't use the default and you still am in it if you said runtime error you are absolutely correct so why would you use a definition or a function as it's called reason why you do this is you have chunks of code you want to run for example let's make it basic ifthen statement so we'll say hmm I'll say I'll say H equal 8 why not if H is greater than 4 then we're going to print person else we're going to prep person you know let's just supply some values here yeah she's 212 years old that's how tired I am all right yeah 40 so what we're doing here is we're saying we have a value or sorry a variable H which is 8 if H is greater than 4 we're going to print person Brian otherwise we're going to print person Heather so that's Paula another example of polymorphism where you can call this chunk of code based off this value right here let's run that and sure enough it runs Brian let's set that to 2 just so we can see it change there we go some littleknown issues you have to declare it before you can use it you should only add parameters that are necessary don't go crazy and have a function with 200 parameters no one's going to use it some other things make sure that name is descriptive what does it do does it get a list does it do something does it print a person don't name it you know my superawesome function that does I don't know what yeah because no one's going to use it all right well that's all for this tutorial hope you found this educational and entertaining be sure to visit my website for the source code for this and other tutorials and if you're interested in other languages I have a whole bunch of other tutorials up there as well everybody this is Brian welcome to the eighth Python tutorial if you're new to programming this is going to blow your mind if you are an old programmer like me this is probably the tutorial you've really been waiting for classes and objects when we say a programming language like python is objectoriented what does that really mean what is an object an object is anything we've worked with objects with strings integers you could argue that an integer is an action object in Python but Python actually wraps it with an integer object similar to what Java does so we work with objects all the time wouldn't it be great if we could create our own objects while we can we can create a class and what is a class it's a blueprint so we're just going to say class animal and it's going to inherit which we'll discuss here just a second the object notice how I said this is an object because everything is an object you're an object you're cats an object I'm an object don't call your girlfriend or wife an object that's a conversation that won't end well so we're going to see def eat whoops and I'll explain what Soph means in just a second I just want to flesh this out a little bit so we can continue the conversation and through the magic of copy and paste we're going to make another function here all right so we have our animal class but we have a variable and we have some definitions or functions as they're called inside of there we covered that in a last tutorial what is inheritance everything has to inherit from a base object that's how everything is an object so what exactly is inheritance well we're going to make another class to illustrate that yeah if I could spell a mammal is an animal for example here are human which means you inherit from mammals which inherit from animals so you can have multiple inheritance in here not so much true multiple inheritance in the sense that some languages have but you can actually you know get pretty complex here as backbone equal true has hair you know just some definitions of what really makes a mammal a mammal deaf grow hair notice how it says self self is a reference to the current object and that's going to become pretty impaired n't here in just a second here and if you're bald like me you wish you could grow hair alright so now we've got two classes the mammal class inherits the animal class meaning it has all the properties of an animal for example I'm going to say cat yeah you knew that was coming equals new mammal well I shouldn't say that shouldn't say new sorry I was thinking for my C++ days I've had a really long day and we're gonna say dog equal mammal notice how they're both mammals we're gonna say cat dot name equal shakes my cats named Shakespeare and clump shakes for short dog dot name equal and I used to have a dog named Molly so these are two totally separate objects they are instances of the mammal class that's why I say class is a blueprint this is not written in stone meaning you can change it you also notice how even though it's a mammal we're accessing the name variable from the animal object that's what inheritance is mammal implicitly includes everything in the animal class because we're inheriting from it that's how we can access name and we can say you know cat eat dog that sleep and let's just run this why not so you can see the eating sleeping you'd probably be better if I put like the name okay let's actually do that just for illustrative purposes I know you guys are smart enough to know what's going on here but oops don't know why I keep doing that oops there we go hey let's just because I'm a huge fan of copy and paste we said we are going to discuss the self variable and this is where it really comes into play you can see how shakes is eating and Molly is sleeping we said cat eat dog sleep self is a reference to the current object that were accessing memory remember this is a blueprint so there's two animals in memory technically mammals each one of these has a different name one is shakes one is Molly so we have to access these self notice how we can't just say name that generates an error unresolved reference name if we try to run it you know bone the whole thing explodes so you have to access the current object and there are other ways around that but for sake of simplicity this is what we're really going to discuss whoo so how do you like that does that blow your mind or what it is just dead simple in Python to make classes and objects and to inherit so you can you can see how a class has its own scope similar to a definition and the definition is inside the class so it's part of the class scope now you may be asking the question well if it's in the same scope like here why do you have to use self dot name Python does that to protect itself when you have a lot of objects floating in memory you need to know where they go and where they belong so that's something you just need to bear in mind and to kind of solidify this let's actually make a snake you probably hear my cat in the background and mmhmm I'll say through the magic of copy and paste here darn mouse I need to buy a new Mouse I really need to buy a new Mouse say it with me ladies and gentlemen buy a new Mouse Kitty go away last time she was in here whining we actually had an earthquake earthquakes are very rare in Michigan I live in Michigan in the United States and kitty go away it was a 4.0 in it this cat is deaf so she was like scared I felt really bad for all right so we're going to now cat that grow here dog doc grow here snake dot notice there's no girl hair because snake is animal and that is why you would use inheritance you don't want a snake to grow hair because that would just be creepy but a snake you know has eat has sleep has everything in the animal class but it has nothing in the mammal class so now you understand how inheritance works a mammal can inherit from an animal but we did not inherit a mammal in the animal class we inherited straight out of the object makes sense I hope so because that's about the best description I can give you that's all for this tutorial I hope you found this educational and entertaining there is more to come and there's a lot more to objects and classes than what meets the eye I really encourage you to do some research on your own some of the things we're going to discuss in future tutorials and this is really just to kind of whet your appetite so you can get used to working with classes and objects because that's really the power of an object oriented language be sure to visit my website for the source code for this and other tutorials under Python and join the Facebook void realms group I know I've been beating that you know just senseless sing join the group join the group but there's a reason for that there's 200 of us in there a lot of times it's really difficult to get a hold of me and then once you get a hold of me my attention spans like a goldfish because I've got so many other messages coming in whereas you have 200 other programmers some of them are more experienced than me that are willing to help everybody this is Brian welcome to the 9th Python tutorial but we're just flying through these little guys make a new Python file and call it video 9 alright and today we will be working with modules and packages so what is a module module is anything that ends in dot py we've been making these you've made nine of them if you've been following along my videos so why would you make a module well it's a pretty selfcontained like here's video 5 you know there's some code in there you know you don't want to make one giant file you want to break things into different files so let's actually just make another file mmhmm let's call this my module why not and here's my module right here it would say class mmmhmm let's call this person here it's off of object and we're going to make a definition here actually no we're gonna make a variable name equal and then we're gonna make a def let's call it and say hello you know you've done this before hello my name is and then % s we're 6% selfnamed so this is nothing new but why am I doing this what's this have to do with the discussion well we've made a module like we've done in the past now we want to access this class and use it in a different module we're going to say from my module import person now we can actually use the person class will say I need a good name here let's call up person one well person did I not call that person one there we go personal one name equal Brian really help if I had quotes in here that was embarrassing can't even spell my own name all right first one say hello now when we got to run this hello my name is Brian so we have all the functionality of the person class which exists in the my module file in the same directory but we don't have to have all that code in here all of its included right here it was it's basically the exact same thing is taking this and just copying and pasting it right there without having it cluttering up your file but as you might have guessed when you go to deploy this file you also have to clewd anything that you're using its called a dependency so that's an example of a module and why you would want to use a module now let's talk about packages the package is a little bit different a package is a directory and we're gonna actually make one here Python package and let's call this the ever descriptive my package because I like working with my package now those of you in the back row that are snickering right now pay attention this is serious all right so my package is just a directory with a special file in it a special module called underscore underscore and MIT underscore underscore dot py and when you open that it just says author and then whatever because you know PyCharm put that in there and in here we're not going to really discuss too much in this video but in here you can put special commands that will tell what to include and what not to include what's public what's private and you know all sorts of neat stuff so if your structure of your program starts getting really unruly consider making a package and let's actually add another file in here and let's call this hmm Hannibal you know I'm sick of working with animals let's call it a car all right so we've got our car in here oh yeah we're gonna say deaf up not deaf jeez class car I am going to actually cheat a little bit here I'm going to just take this thing nice sound effect there right and we'll call this car speed up yeah let's call this let's call the set speed and girl going this fast my eyes got a little blurry for a minute I have eye surgery if you've been watching you already know that sometimes my eyes get blurry kind of bugs me a little bit don't really need a name for a car so nothing new there I mean we've just got a package with a module inside of it and we were just going to say I mean look at my notes super quick from my package that car import car so what you can actually do now is you can save from a specific package a specific module import a specific class and then we can say my car equal car and then my car set speed and we're gonna go a hundred why not let's run this and see what happens and hello my name is Brian and going this fast 100 now you might be asking how can I actually import from this module when I don't really know the name why I don't really care what the name is you know I want to just import everything in there so if there's multiple definitions in here so like we can say let's actually make a truck we're gonna call this truck trusk chuckle there we got a truck set speed so now we've got a truck and a car and I'm not really gonna check these out too much just cuz you know it would be whoopsy a waste of time there what have I done hmm well I got a little to click happy there all right so now we've imported that we can also say my truck equal truck notice how it's just automatically importing it we didn't have to specifically say truck and then we can say my truck set speed and we're gonna say nighty why not let's run this little guy hmm missing one require position argument what did I do wrong here okay now I feel very stupid I just simply forgot the parentheses alright so there we go so the car is going 100 trucks going 90 so you can see how that works pretty pretty interesting huh now something that's really going to kind of blow your mind here is why am i showing you these other than you can just you know organize your code well you need to get used to importing from other sources other people write modules for example if we click on external libraries you'll see how there is a ton of stuff in Python 3 just expand 3.4 these are pretty much all the packages and modules that you can really access and there is just tons and tons and tons and tons and tons of them who has a lot of stuff in there and you kind of help with this I'm gonna actually post a link out here I'll put it in the top of the file for you we can go out there and you can go to the Python standard library if you're familiar with C++ you know what a standard library is but if not I'll explain it a standard library is all the functionality that comes with the language this is all builtin remember when I said pythons motto is batteries included this is why I mean it's got just a mega ton of stuff I mean just about anything you can imagine for example I mean you know even JSON encoding operating system XML euro writers input/output it even has a graphical user interface which we may cover in future tutorials I mean it the list just is immense I mean it's actually grown very impressively but believe it or not Python standard library is considered small compared to some languages such as Java the Java framework is just massive so I was going to actually do this in a different tutorial but why not let's just do it this one I mean we're on the subject so we're going to import and let's say sis this is a pretty standard package and we're going to you just say Prince whoops print sis that version so we want another system version and you can see the version is 3.40 which is the current version that python that we're running pretty interesting now let's say let's cover the dirt amman dirt man we don't cover that yet dirt will a iterate over pretty much anything so if i actually import to let's say operating system or OS what der will do is it'll just print out everything that's available in there and it's kinda kind of long as you can see it just keeps going and going and going and if you're in idle or if you're working with Python right on the command line it's actually much easier that's kind of what it's designed for so like let's actually run Python say Python 3 and let's just say import OS and we're going to do OS and you can see that's why it's there it's for working on the command line now let's say there's something specific you want to know about you can use what's called the help command you say help OS dot right and it says ok this is the builtin help for that module and what it'll do is it'll say you know right and then you give it a file definition and data and it'll output the bytes written and it says rights byte to a file descriptor so that if you're ever you know stuck working with idle is very very helpful but working with something like Python it's not that helpful at all so just wanted you to be aware of it that's pretty much it for this tutorial hope you found this educational entertaining be sure to go over the Python standard library many times if you're just kind of curious about something like read line it'll actually have maybe that was a bad example not paradise they'll have example code right in here so you don't have to go hunting in forums and Google and user groups it's right in the library so it's a really really awesome resource that you need to you know kind of go through make life a lot easier for you be sure to visit my website void roams comm for the source code for this and other tutorials and of course join the void realms Facebook group I think we just eclipsed 200 users a bunch of helpful people in there hey everybody this is Brian welcome to the 10th python tutorial man we are just hauling through these flat Python 10 and what I want to cover today is exemption handling or error handling obviously you've seen me make a few mistakes and I'm sure as you've been following along you've made a few mistakes so how do you handle those mistakes well we use what's called the kiss method which is keep it simple and stupid or simple slash stupid and what does that really mean it means don't complicate your life any harder than it has to be so we're just going to say deaf do something and let's say we're going to an equals zero x equals 5 y equal mmm let's just get creative here X divided by n print the value of y you know just something generic here and then we're going to totally forgot our little brackets that always bites me for some reason just so we can see that we're starting the program and then we're gonna do something and let's run this and see what happens here oh no we have an error shocker we're dividing by zero well this is a standard error message in Python and I'm sure you've seen these before and this is called the trace back and what it does is it starts where the error originated so like if we just go line numbers line 13 in module which means in the current module if it was a different module it would give you this module name would be different all right so line 13 do something so we know instantly it's coming from do something but it goes a step further and says line 9 in do something and it gives you the actual code that's calling the error line 9 this guy right here it gives you a description zero division error division by zero if you've taken any sort of rudimentary math class you know you cannot divide by zero I am horrible with math and even I know you can't divide by zero it's just not possible you can't do it all right so how do we get around this like let's actually say number and let's let's give the user the ability to enter the number right so we're gonna run this what did we do again oh yeah dirt all right so we get one point one we can change this so we know our functions actually working two point five so we're going to take whatever / whatever now if the user enters zero or back to square one we're gonna have that same error again we don't want that so we need some sort of exemption handling and it's in the form of a try exempt finally and we're gonna explain that say try and we're going to indent this code notice how it gives you a little squiggly when you use a try it's expecting and exempt or finally first thing we're gonna do is exempt except sorry and we're just going to accept exception as e and this is what's called a catchall and let's make that a little prettier something went boom now what try and accept does is it'll try this code and if something bad happens like a division by a zero it'll run this code because this is a catchall this will catch any exception out there so let's run this and you see now it says something went boom division by zero so we have a nice pretty you know something happened and E is actually an object so you can actually get into the args you can do the trace back you can do pretty much whatever you want you get the actual base memory on that so it makes it a lot easier to work with and notice how it didn't kill your program even though there was an error your program keeps chugging along happily because you encapsulated it within a try except so that's one way of doing that now if finally is a little bit different finally will always execute regardless of what happens up here notice how why never prints because we had a division by zero error but if we run this you'll see finally I get to run so even though there was error finally we'll run you don't necessarily need this code you can just do it finally you can do try finally you would do this for the example if you had a file or database or some resource you would open it and then when you're done in the finally block you would actually close that resource regardless of whether or not you had an error now as you might have guessed if you're with you know been working with other languages you can actually classify exemptions so we'll say zero division error we'll say we please do not divide by zero let's get rid of that now when we run this notice how it says please do not div by zero instead of the catchall because we've actually specified we want to catch a zero division errors and do this block general rule of thumb catch halls are bad you want to know what sort of problems are rising in your application another thing you should never do is simply pass for example runtime error and we'll just say pass if we've never covered passed before what pass does is it just does nothing it just takes the execution context and jumps right out that'll create what's called a silent error yeah I actually had been a better example if I had just done it in the division by zero let's throw a pass in there let's comment that out there we go that's what some people will do they'll say if you divide by 0 just pass that creates what's called a silent error you never knew that happened you never never never never want to do that repeat after me never do that reason why is because you want to know that error occurred you want to do something with that error you want to either log it or correct the problem you know for example please do not dip by 0 you're telling the user hey choose a value greater than zero one thing you should really understand about error handling is that you don't want to go completely crazy as you can see the error handling actually is bigger than the algorithm that we wrote that's called defensive programming and it's good to do that but you don't want to make an exemption for every single type of runtime error that's possible and there's a lot of them so if we go out here I was wondering what was that Wow stocks nevermind if you go out here you can see that there are a bunch of exemptions and they just you don't want to make one for each and every one of these for example you don't want an OS error in that algorithm we just wrote because we're not dealing with the operating system you don't want a stop iteration error because we're not dealing with it so you kind of got to look at your code and say what really is going to happen here well division by zero is completely possible but I would always as a rule of thumb put the catchall in here because if you don't and something else happens you're going to get a runtime error for example let's do that so let's just comment this out and let's actually do let's say let's say we just expect a runtime error we're gonna say print this may not be the best example actually it's not let's do oh s err there we go now let's run this you can see how now our program crashes because we never captured that division by zero either this way or with our catchall so you're gonna want at a bare minimum a catchall statement something went boom division by zero but it's always better to know what kind of errors you're getting into that way you can handle them appropriately that was a mouthful it's been a long day thank you for watching please feel free to visit my website for the e source code for this and other tutorials just go to Python and I'll upload I just did a bunch of videos and I could did like four or five videos right in a row so I'll upload all those before I go to bed tonight hey kitty daddy's recording yes I know you're hungry I'll visit Facebook and join the void realms Facebook group there's 200 of us out there that are eager to help and if you do join be sure to offer help whenever you can nobody is an expert in any one thing but if you have information and somebody's asking for help just jump in there you know leave a quick comment everybody this is brian welcome to the 11th python tutorial today we're going to be discussing classes again with multiple heritance and constructors so let's make a class and let's call it animal which is going to inherit the object class maybe there we go and we're gonna say the animal has a name so default for that is going to be not named now in some older versions of Python I'm not sure if it applies to the newest but this would be a static or a static variable which is shared through all instances of the class that can get very dangerous depending on which specific version of Python if you make two animals and you change the name on one it would also change in the other one possibly not all the time but you'll see what I mean here in a minute and we're gonna also create a constructor and you notice how I do double underscore and we're gonna do an it self this is called a constructor a constructor is called every time an instance of the class is created remember a class is just a blueprint you can make multiple animals from this class the class itself is not an object the class is just a blueprint for the object we're going to create and when you don't include the constructor and one yeah a one a constructor is automatically created for you in memory and it's called the default constructor which literally looks like this it's just def in itself Pass which means it does absolutely nothing so why would you want to override that's what happens when you make a function that art exists you're overriding that function why would you want to override the initializer or the constructor well in this case it's because we want to actually do something when the class is created so when an instance of this class is created we want to do something so let's say my animal equal animal and let's run this you can see how it called the constructor animal constructed so you can put any sort of logic you want in here also on top of that even without an instance of the animal class we're just going to call the class directly or the blueprint directly you can see we can access that variable so we have this variable floating in memory but we have no class or no object I should say that goes with that instance of that class so that's why it's called a static variable now it's a little bit different some languages when you you know and some older versions of Python I believe when you changed it in one instance it would change across all the instances which is a bad thing you don't want to do that but in this case it's static meaning you don't even need an instance of the class in order to get it so let's get rid of that and let's make a couple classes here because I want to really you know build upon what we've learned we call this reptile and it's going to inherit the animal class and let's say reptile has scales and I'm just gonna leave that static keyword there so you know it's static and let's say reptile instructed we're just going to make a few of these like we're gonna make a mammal class which inherits animal mammal has hair and we're gonna make another class and let's call it class dragon which inherits both the reptile class and the mammal class because you know a dragon will have hair and scales just because dragons are awesome and we're going to say has wings equal true maybe if I can spell the word true this of course is a static variable and I'm just gonna copy and paste this that would be bad let's do that there we go sometimes the Python indentation doesn't really work well with me I'm not sure I've spent most of my life and C++ and C sharp and other languages all right so let's actually flesh out this dragon class a little bit more and we're going to work with the D constructor maybe there we go my mouse was in a way Deconstructor is called automatically when the class is deconstructed so you have a constructor when it's made and a Deconstructor when it's destroyed we're going to say self class and let's go you get the class name here that way we can see exactly what's going on say print oops yeah print print that's good start and we're going to print finished and in between here we're going to actually do some work so we're gonna say my dragon cuz you know I've always wanted to dragon equal dragon it was say my dragon name equal let's call my dragon Sam you know why not just because it's a dragon now well we run this you see how the program starts dragon constructed meaning we've made an instance of that dragon class and we've set the name which you don't actually see anything for that and then dragged and destroyed after finished what happens is it gets here the Python interpreter sees that we are now done with this dragon object and it calls the D constructor and destroys it in memory that's called automatic memory cleanup some languages also use what's called garbage collection meaning that object will actually stay in memory but you can't really access it and then over time it'll do garbage collection and cleanup in the background it's I believe it's also called pointer counting and some languages so anyways I wanted you to be aware of static members remember you do not need you do not need it an instance of the class in order you use a static member so like let's let's just play around here let's say dragon name equal let's call it Heather my daughter's name she's always wanted to be a dragon I guess print my dragon that name let's just see what happens if we do this I'm not sure if it'll change it or not yep so now we've changed the name Heather or we've changed the name to Heather in all instances of that class so let's actually make another instance here called dragon one oops one and two so now we've got two instances we've got the static member that we're going to change and we're going to print dragon 1 and dragon 2 and just kind of solidify this I need a good dragon name what's a good dragon name smock why not so we're studying dragon one to Sam Savin dragon two to Smaug and then we're saying the static name set the Heather what's gonna happen when we run this loop well it would help if I put the equal sign in there there we go you'll see now how it's calling Sam and Smaug it's printing it out instead of the default Heather what's happening there we noticed that if we don't set this right here they're both Heather so let's set it for one and not the other and then I'll explain what's going on you see one is Sam we actually set it Sam and what is Heather the one that's Heather is Dragan to this guy that we commented out because we're setting this static variable meaning that exists in all instances of that class so why does Dragan one still say Sam if we just set it because when you're calling that it will now treat that variable as a class variable instead of a static variable or a member variable if you will so we're gonna kind of wipe these out I don't like wiping out dragons but yeah it's got to be done somebody's got to do it all right now we are going to actually modify mammal here where as itself has backbone because mammals have backbones go true that's basically what it does it'll take the variable name in this case and it'll say self dot dot it out meaning it makes it specific to that class some older versions of Python don't do that it would change it across all of them so it's another gacho so now we have a static variable and a member variable inside of this class if we try to take my dragon and you can see it has all these things it even has the has background let's try and print that out let's do this for a few things here let's do like hair or wings or something let's do hair I don't not include the has in front we know what we're talking about so let's actually run this to see what happens you can see how here equals true but suddenly we have an error backbone object has no attribute has backbone what doesn't make any sense does it I mean when we put the period here intellisense says it exists so we know we're inheriting it but why don't we actually have access there's no attribute it's because we now need to initialize the classes we're inheriting from and that goes with the concept called the super it's a super class and by super I don't mean that it's like Superman or it's super kind of like you know super spectacular it just means that it's above it what's it inheriting from so we're going to say super and we're gonna say dragon because we need to know that we're currently passing the dragon class self in itself and I'm going to put a little comment here must and it's the super let's run this again has no element backbone hmm let's do the magic of copy and paste here mouses act enough I think I need new mouse mmhmm and I'm not going to do it with animal even though we could because it really doesn't have a super it's super is object which is pretty much already initialized anyways now everything runs and you can see backbone equals true that's because we've now initialized the supers you got to go through the whole chain of what this thing's inheriting and that's a good example of multiple inheritance with constructors it can get kind of tricky here what's happening now is you have a dragon class in memory along with a reptile and a mammal but they're superimposed if you will over this dragon so now dragon has a member named has backbone you may be asking well why don't you just put it right in the dragon class like this and you can but now you see the backbone is false which is the opposite of the what we wanted with the mammal class what you're doing there is you're shadowing you're shadowing that variable you're saying that the inherited variable no longer exists and you're going to use the one you've implicitly declared that I hate that word anyways so just note that you have to initialize or call the constructor on your super classes in order to get their member variables well we've actually covered a lot of ground here one final thing I kind of want to cover is how to add variables in the Constructors so let's do this let's say we want to do to do we want to add age hair self age because Dragons age right and we're going to set that to zero initially but we're going to just say comma age now the first parameter in every constructor is the self object because it's creating an instance of it you can get self so while it's being called pythons actually creating an instance of the class and handing it to you in the form of the self variable you're now saying self that age meaning you're adding a variable to the instance called age and we're just going to say it's the age parameter and we're to say years old why not because you know dragons do age let's run this hmm it says missing one requirement it's because we never initialized it and that's because it's a mandatory parameter if we were to say zero equals zero I should say now we're setting the default value for that parameter and it would run like this and it would just say the dragon is constructed in a zero years old and if we add you know dragon ones now a hundred years old you'll see dragon whoops dragon is constructed and is a hundred years old let's rewind that because I know it's probably a little bit confusing if this is your first language what exactly is going on here well we're calling the constructor the self object is handed to us by the Python interpreter it's an instance of the dragon class that we're currently in age is a parameter for the constructor some people call default value the default value is actually the equals zero right here we're saying that it's an optional parameter you don't actually have to include it that's why this works if you do not include it it's going to equal the default value in this case is zero we could say every dragon is automatically 50 years old and if we run it again you'll see the one that we did not give an h2 is now 50 years old we're saying self that age equal age that's a bit confusing what does that mean well what we're saying is self meaning the current instance of this class we're going to add a variable named age and it's going to equal the parameter of age and you notice how PyCharm automatically highlights it because it knows exactly where that's coming from and you could name this something else you could call it just for illustrative purposes why not and then we'll name that there and let's run that again and you can see it does the same thing so just know that when that was named age self dot age and the age were two totally different variables in that we're just simply printing it out and you can of course now access that print and let's say let's say percent s is percent D years old just because we want to do this right I'll say name and really kind of solidify this concept here and we're gonna name my dragon to smoke why not well I think in the token books it's actually 2 G's but I'm just gonna use 1 G let's run this and you'll see how Sam is now a hundred years old this is what we're printing out now what's really going on under the hood and we're gonna kind of wrap this conversation up coming in short on time here is when we add the name parameter R in the name parameter geez when we modify the name variable it's no longer static it is a member variable and we're setting the age through the constructor and we're just simply printing that back out so if you follow it along here we're setting the name which is all the way up in the animal class and we're setting the age which is all the way down in the dragon constructor so questions comments concerns feel free to drop me a line or better yet join the Facebook void realms group there's we've just broken over 200 members and it's usually faster to act ask them and get like 20 30 responses than to email me and wait six weeks for hey I don't know or did you try googling it so that's it I hope you found this educational and entertaining and thank you for watching everybody this Brian and welcome to the 12th Python tutorial we're just going to dive right in here today we're going to be talking about the path object so first thing we need to do is import OS or if you want to actually do it the correct way you do from OS import path now what's the difference between those two if you just do import OS you can then do OS dot whatever which in this case would be OS dot half and then whatever command you want but if you specifically import path from OS you can then say path that was embarrassing path dot whatever so that's really the difference between those two so we're just going to say throw it from OS import path and we're gonna actually get a path object here so we're going to say print and sent us whoops having troubles with my keyboard here we're going to get the current directory here now if we run this it's just going to print a little dot you know the current directory is dot and if you're not familiar with the dot notation basically dot is always your current directory and dot dot is the parent directory but we want to actually expand that and figure out what that really is so let's try this print and we're going to say ABB's path or absolute path is percent us and let's just go so we're just going to say path absolute path and then we're just going to give it the current directory that we're in and just see what it prints out here and we're currently in my home directory I'm on Linux so you see these slashes if your windows you'll see like C program files or C users or wherever you're at and that's kind of the beauty of Python is it's very much crossplatform now we're just going to get the name so we're going to say der name run that and you see the turn a Misbah like hmm that's not good so let's get the base name from this the base name is of course dot because that's our current directory so I just I don't want you get thrown off if you see you know perder is returning a dot now if we actually take this and make a variable let's say hey let's actually make a string literal here and to do that you put an R in front of it the reason why you would make a string literal is if you're like on Windows and you do this like see Program Files you know yada yada yada whatever blah blah blah each one of those slashes if it's not a string literal will be interpreted as what's called an escape character like slash P I don't remember what that is but if it was like slash T that'd be a tab slash R would be you know hard return newline the only way around that would be to double escape them where you do slash slash which you know gets kind of frustrating or you would just you know make it a string liberal by putting the r in front of it I'm analytics machine so don't really have to worry about it much but I'll do it anyways and we're just going to replace kurtter with this just so we can see the difference of what it's going to do you see now we have a base name a der name in an absolute path so that's really the difference between current directory and you know when you hard code a path sometimes kurtter is not your friend and I just wanted you to be aware of that we're going to really quickly finish up this tutorial we're going to do exist ister in this file so let's do so I don't know if there's any gamers out there but I bought skyrim legendary edition for like 15 bucks on Steam so I've been playing that it's a lot more than what I thought it was going to be it's actually pretty indepth hey I'll say is file and what these commands are gonna do here they're pretty selfexplanatory but I'll go over them real quick you got your absolute path let's actually run this okay you got your your absolute path which as you can see is that your Durr name which is just your directory name the directory or the parent directory I should say the base name is the name of the current file or directory that you're in yes it exists that's very handy when you get into file operations you want to make sure that file exists or doesn't exist and then determine if it's a directory or a file whoo well that's pretty much all for this tutorial pretty easy one but very important information that you should definitely understand for the source code for this and other tutorials visit my website void realms comm and we've got much more coming in the everybody's Brian welcome to the 13th Python tutorial we're going to be listing directory contents now we want to get everything in a directory sometimes this is handy and we can do that by let's first just my eyes are kind of bothering me today I have to apologize if I make some spelling mistakes I had my postop I had woops I had a surgery so don't need to wear glasses anymore but my eyes are a little fuzzy because they put these numbing drops and stuff in there so we're going to print os Lister and let's call it s path I need to make a variable here I'm just going to use the Python folder just so I've got something to work with here that's a little interesting and what Lister is going to do is just give you a list of everything in there and the problem is you don't know what's a directory what's a file you know what's what's really going on so now we're gonna get everything split what do I mean by split well we want to split this up into routes directories and files routes is very handy if you're on a Windows system on Linux it's really not that handy is you really only have one route for Linux and everybody knows what it is let's call it routes ders files in OS walk now what walk is going to do is it going to literally walk that path at directory structure and it's going to determine what's a file what's a folder and what's a route just so you have something to work with here so we could you know very easily say for let's say file in files prints we're going to say file equal so we just want to put out the files we want to ignore the directories just for whatever reason name in files hmm well yep probably help if I spelled that right told you my eyes were bothering me a little bit there we go so there's all our files and we could actually you know through the magic of copy and paste here we could print out the directories so we could say the dirt all the dirt and dirt how many times you gonna say that in life my daughter is here she'd be cracking she's like dirt anyways let's run that and kind of whiz by real fast here but if we scroll up you can see there's directories in there so there's a pie caster and you know there's testers and things of that nature now as interesting as that is and that's probably done incorrectly somebody at home has probably already figured that out we're going to actually comment this out and I'll show you a much easier way to use the OS walk command we're going to get only the roots and we'll say let's call it roots equal when we use the next command we haven't really covered that what next will do is if you're in an iterator it will jump to the first version or the first iterator in that group sounds complex but it's actually very simple it just has a list and it jumps basically to the first position iterators are a little different than lists so it's gonna be a tutorial on its own and we're going to walk our s path and we want to get the first list that it's going to spit out there and we're gonna print routes equal and let's just not sure if that's gonna print us out right but we're going to find out on that yeah so there's our roots now the root is the root path that we're starting off with here and through the magic of copy and paste we're just going to very quickly go only the ders d first geez that was bad and only the ders and we're going to get the first one yeah this eye surgery I'm telling you I had the PRK not LASIK so the recovery time is like months and months I'm on one month in two weeks I think and I can drive and I can see and you wouldn't believe me by watching these tutorials but I can type but sometimes my eyes get a little weird and I got to stop and really like focus and figure out what I'm doing it makes video gaming and coding very interesting so as you guessed we're getting only the directories and only the files we're just gonna spit those out here so well you can see there's your directories in a nice neat list that you could iterate through and there's your files that you can iterate through from there you can actually you know get extra information like the file size using I think OS path and few other things but just wanted to make this a nice clean little tutorial on how to walk through a directory that's all for this tutorial if you found this educational entertaining be sure to visit my website void realms comm for the source code for this and other tutorials everybody's Bryant welcome to the 14th Python tutorial today we're going to be writing a file so you can see I have this beautiful test directory all set up with nothing in there and we're gonna actually make a file so we're gonna say import OS and we're going to just s path why not and I would need to actually set the path here and I'm just gonna make it a text file that way it'll open up in my text editor now what we need to do is do a bit of magic here if you will so we're going to make a function and we want to actually detect if that file already exists so if and we're doing this because I don't want you to accidentally like overwrite some important critical file like your vacation fold you know your vacation pictures or a resume or your homework or whatever it would not be good if you did that because once it's gone it's just gone it does not go to your your recycle bin or anything like that it's just gone alright so if it already exists then we're going to just return out and not do anything otherwise what we're going to do here is we're going to say F equal open and we're gonna give it the variable S file we're going to give it a w4 write mode and we'll discuss modes here in a little bit in depth and we're going to say try we're gonna try writing to that file and we're just gonna say hello world RN and we're gonna say this is a new line that's something you'll get throughout your programming career you see the slash are slash n the slash is an escape character I think we talked about that in the previous tutorial where if you're doing on a Windows system like C colon slash it'll actually error out because it's going to escape the string now what it does is it actually takes this next little digit behind the slash and turns that into a special character like slash R is a return makes a new line and I'm sorry it's just a hard return and then n is a new line so whatever you do this on the keyboard you hit the enter key that's actually two characters in memory I think it's like 10 and 13 I might have this flipped around but / r / n carriage return line feed it's actually pretty common and we've done air handling before so we just want to print out if there's an error that way if you have a booboo you can try and figure out what's going on and finally this is a good example of why you have the finally block if F is not none none then Python is a special keyword that means it's not there there's just nothing to it it's never been assigned so that's a mouthful so what we got here let's kind of go through this is we have our function as a variable that we're going to pass to it which is going to be the file name if the file exists it's going to print out a message in return otherwise it's going to open the file which will then create a blank file on the hard drive then we'll try to write to it if there's an error we'll print out the error and then finally we will close the file one thing you should get in the habit of is called flushing and it does sadly exactly what it sounds it's just like flushing a toilet it flushes everything from memory down into the hard drive when you're creating a file literally what you're doing is you're creating data in memory and then taking that data and shoving it down into the actual hard drive the actual hardware so flush literally flushes from the memory to the hard drive so I wish they would have picked a better word for that but it is what it is so we're going to just write file that's path and let's run this bad boy and see what happens it says process finished exit code zero I probably should have put like a little hey we wrote the file in there but you can see there's our little test file and if I bring it out here you can see hello world this is a new line so that's our file now if I attempt to run this again file already exists so it's going to whoops I just bumped the mic sorry about that it's going to get here and then it's going to return out that'll keep you from accidentally overwriting a file now notice how if we just comment this out and run this again we're doing no no intrinsic checking to see if that file exists we're just going to overwrite it and whoops you can see in my little notepad editor it's saying well this files been changed what's going on and let me see if I can actually drag it over here yeah there we go the file on disk has been changed so not all text editors are smart enough to do this but fortunately the one in abouttwo is so we're just going to cancel that so it detected there was a change now when we go out to the actual file and reload this you see it's the exact same thing that's right mode right well completely delete the file and start over if you wanted to append the contents you'd use an A for append and now if we run this let's say a few times I'll click it three times why not let's run that you'll see that we have three distinct things now we didn't put the hard return in there so it's just going to start right where it left off if we would put the slash our slash and it would actually you know broken it out like this so that's the difference between a pendant right that's all for this tutorial I hope you found this educational and entertaining thank you for watching feel free to visit my website avoid realms comm whoopsy and that way you can actually get the source code for this and other tutorials and be sure to visit the Facebook void realms group there's over 200 programmers in there that can also help everybody's Brian welcome to the 15th Python tutorial today we're going to be discussing reading text files and this is actually a pretty common thing you're gonna have to do throughout your career as a programmer is read a text file or specifically read it one line at a time so we're going to show two techniques here one how to read the entire file and help if I spelled import correctly so to read the entire file we should probably actually you know do a little bit of error checking here and I'm not going to go through making a function with the Tri exempt finally because we've done that before I just want to very quickly do this and show you how it works so we're going to say if so we'll call it s path let's actually make my variable let me get my file name here the file we've been working with and you can use just pretty much any file but it should be a text file if you get a binary file then we'll be covering that in future tutorials but the difference between binary and text is a text has things that Yuman readable where a binary just has a bunch of numbers in it so like a program well like pycharm that we're working with would be a binary file where an email would be an example of a text file so if we're going to say if it exists say with open s path as f now what the whiff command does is this says take an object and with that object do something so we're saying with the open object or the F variable or in this case because we're returning something from that tip is it confusing let me explain a little better with an object we're going to do something so with and then this function is returning an object we're going to call F so with F we're going to do something should be a little clearer when I do this when we read the entire file we're just calling read and it's going to read everything into memory now that can be good and that can be bad it can be good if it's just a small file and you want the entire contents to it see there's the entire contents of this file it can be bad if you have multiple lines and you want to do something for each individual line and there's really you know with any language multiple ways to do this and we're going to just grab that make sure it exists otherwise if it doesn't it will give you an error message and what we're going to do here is we're going to get all of the lines so what we're going to say is F dot read lines now when we run this you'll see it returns this nice list the problem with this list is it's got these slash ends in there so it's got a new line in there and we'll have to actually strip those out and you would do that by let's actually call that line lines and let's back up here a little bit here liens equal F dot you know what let's just do it the easy way so for F and redline are for line in red lines we're going to print we're going to strip that line out we're going to strip out the escape character there and let's actually put something in here so we can see that we're doing something different there we go so we're gonna read the lines and you can see how we're stripping them out if we don't if we just print the line itself it's gonna look a little weird and let's let's demonstrate that you can see how it's got these new lines in there because we didn't strip out that newline character all right so and there's an even better way of doing this reading the actual lines one line at a time so what we're going to do here is we're going to say do this and we'll say line equal F dot read line and this is just going to read the one line out of there and we'll say wild line meaning while we have a line object remember everything in Python is an object so if it's nothing it's just not going to execute this code remember we've discussed the while loop in previous tutorials we're going to print this out we're gonna say line equals and then whatever processing we were going to do to this and let's actually throw that here we'll say line and we want to strip out any whitespace if there's you know like extra spaces before or after we want to strip those out just because and then of course we want to say a line equal have read line and what this will do is it'll advance to the next line so let's discuss this a little bit here actually first let's run it make sure it actually works yeah there's a problem okay indentation gotta love it all right there we go so we're reading the lines one line at a time and you can see on us this line equal and then it's got our line and we've stripped out any whitespace I know it doesn't look like it you see that little blank space that's actually added by PyCharm so what we're doing is we're saying if it exists with open as f meaning we're going to call the open function and return an object called f we're going to read a line if that line object exists because red line will return none if it's just nothing it will you know if we get that object then we're going to go this while loop while line is true basically we're going to print it out and then we're going to get the next line that's a mouthful so those are three handy ways to read a text file I typically get inundated with hey how do I read a file one line at a time well that's probably the best way to do it as with any programming languages there's multiple ways to do it but I think that's one of the more efficient ways you should know if there's really no error handling in here so you'd have to encapsulate this within the try block that's all for this tutorial hope you found this educational entertaining and feel free to visit my website void realms comm bring that up here void roms comm for the source code for this and other tutorials just go to tutorials and then Python and join the Facebook join realms group there's over 200 of us in there that are willing to help everybody this is Brian and welcome to the 16th Python tutorial today we're going to be covering binary files originally I was gonna split this up into two videos but I think I'm just gonna do one just to make it a little faster if you're wondering what a binary file is it's a computer file that is not a text file that's the very descriptive Wikipedia article right here what does that mean exactly well a text file is meant for humans to read and write I'm sure you've opened like gee edit or notepad or you know text on Mac or whatever and you've just written yourself quick not saved it well if you examine the contents of that file it looks exactly how you typed it that's a text file a binary file would be like well an image or a database or this web browser any executable or any type of file you can imagine and here's an example of what it might look like in a hex editor you can see their hex values and it gets pretty complicated and there's some computer classes you should probably take like you should learn like what a bit and what a byte is and what a nibble and all that stuff but we're not gonna really cover that because I don't want to bore you with the details and if you're watching this video you probably already know what they are so if not you can go out and just learn on your own Google is awesome like that we're gonna call this the very descriptive videos sixteen and we'll call this binary files so why would you want a binary file well let's say we have a list and in that list we have some numbers let's just say 12 30 34 oops 34 say 202 55 that's our list of numbers and we want to write those numbers to a file and we want to be able to read those numbers back exactly as they are well we're gonna make our string literal here and I know the path to my directory I'm gonna name this test dot txt now I know somebody out there is like whoa hold the phone here test dot t XD isn't that a text file actually no the extension does not denote what type of file it is it's just a name the contents of the file are well up to you typically you'll get what's called a header inside of a file and let's just for whatever reason say this is the header so if you ever open like a JPEG or a bitmap or something in in like notepad you'll actually see the header it'll say like you know image jpg or whatever that denotes what type of file it is so anyways we're gonna make a buffer we'll call this we're gonna call the bytes function and what this does is it turns our list into well a list of bytes so we can actually print let's run this and see what happens here you can see our list looks nothing like what we have up here it's B and then this little guy and then /xo see what's going on here well what it's doing is converting it to bytes in memory hence the little B notation in front of our string that says this is a byte string instead of a literal string or a real string and this is hex if you don't know what hex is there's there's a whole science behind it I won't get into it but it's just a different way of displaying the number like xff that's 255 so you can see it gets kind of interesting now let's actually take this and we're going to write this to a file with we're gonna say open and we're gonna say binary right very important that you say binary right if you don't you may encounter an error now we're going to write that buffer out to the disk run this again process finish so let's go look at this little guy here and if I just drag it over here you see it's got this gobbly what is that well that is the in my case G edit your yours might look drastically different depending on what you're really looking at it's gonna based on character encoding well I was trying to get a change but it didn't but anyways it may display it differently it may show like a little happy face or like a little Y with two dots over it or whatever but that is an example of a binary file you're not meant to read this as a human being this is strictly for the computer so if you've never seen a binary file congratulations that's your first and now we're going to actually read it back and this is why I was saying I'm just going to do it in one video because this is originally going to be to two videos and what's the point so it's actually just print we're gonna read it back and let's say with and while I'm typing this I'm just gonna open this with binary read but well I'm typing this um be sure to check out the the void rums Facebook group there's over 200 of us in there and we just try to help each other out so let's go buffer equal oops and we want to read you can read all of it we're going to read a maximum of 16 bytes if you just do read I think it's just going to read all of it but I just wanted to demonstrate that you can limit how much you're going to read back and now we're going to print woopsie not doing good today my brain is just not here and a pretty long day at work I'm sure you guys know how that is so we're going to take that buffer now you may be saying well don't you have buffer up here actually I do but I'm changing the variable because I'm reading it I'm replacing it in memory it's a not a popular programming style but it's actually a very common one for ion buffer now I'm just gonna loop and I'm going to print out and we're gonna do what's called a cast if you're not familiar with a cast I think we've covered it in other videos it's just converting one data type to another so we're just converting it into an integer and making sure that it's going to display correctly let's run this and see what happens so you see the length of the buffer is 4 we've read the file notice how we said read 16 if it was longer than 16 it would chop it off at 16 and you'd only get 16 so if that file had 300 bytes in it we'd only get 16 because we said limit it and the length is 4 so we know we got 4 and sure enough our values are 1234 200 and 255 now why would you want to write a binary file simply put you can pack a lot of information into a binary file that you couldn't with a text file for example think of a picture you've got like a 600 by 600 picture well you know take 600 by 600 that's how many pixels are in there takes even more bytes to represent that picture because you've got different color scales you've got the size of the image the header I mean all this information and it actually gets into what's called a structure which we're going to cover in the next tutorial which is a very common theme for binary files well that's it for this tutorial pretty painless be sure to visit my website void roams comm for the source code for this in other programs and go out to Facebook and visit the void realms Facebook group everybody its Brian welcome to the 17th Python tutorial that kind of screwed me up my notes are we smushed the last two together into one video so it kind of screwed me up a little bit here but today we're gonna be talking about binary files and structures and to kind of help me with that we're going to look up on Wikipedia the jpg file format you're all familiar with pictures out on the internet like this cute cat everybody knows I love cats so what really makes this file I mean how do we get that image on the screen well you use what's called a structure and I use jpe Gyan purpose because it's a very complex data structure and if you just kind of scroll down here you don't have to read all this but just understand remember how we talked about you know hex FF is 255 in the last tutorial that's the start of the image so you have this nice structure here to work with this is the common MPEG marker and what this is is just simply a data structure you hear this in different languages you'll hear it called a head a header a struct a structure in Python they're just Struck's but they're very easy to work with in Python and they're very painful to work with in some other languages now what would you use a struct for you can see how this is just denotes something it's like the the size that progressive whether it's got Huffman tables quantitative or quantity quantization tables define restart intervals scans I don't expect you to know any of this what I'm getting at here is JPEGs are actually very complex you'll have this 8x8 sub image that's right sub image meaning a picture can actually be made up of other pictures and those are structures that are read you got it from a binary file now you start to understand a little bit more about why binary files exist you can pack a lot of data into them I almost say like ten times the amount of data you could in a simple text file if you try to describe something and you can have these beautiful structures which are very easy to work with so we're going to actually not mess around with images because it's a little too complex for us right now but we're going to make our own structure so let's actually go in here go new it's not my video 18 I did this is video 17 my bad like I said my notes just totally video 17 there we go call the struct now first thing we want to do is I'm going to link link G's put a link in there for when you download my tutorial off my website that you can very quickly and go out and read about this but we're going to from struct import star what's that what that's really doing is where you're taking the struct and we're importing everything inside of it that struct package we've done this before so and we're going to make a string literal here which is of course the path to our file in years will be whatever you know see my documents etc etc little quick ramp it just bothers me I mean I used to love Windows and I got a Mac and I got into Linux and I just it just bothers me that Windows is different than everything else on the planet it's like why can't everything just be the same so with the structure we need a format what does that mean means you need to understand what you're putting into that structure you don't just willynilly start throwing bits in there I mean crazy things will happen right so with a structure you have two concepts packed and unpacked pack is when you're packing it down to store it into a file or link into a box think of it that way you're going to package it and unpack you well you guessed it you're pulling it back out of that file and you're going to do something with it so let's say packed equals pack and this is from the struct package now first thing you need is the format then you need some data you notice how there's a star there star values what that means is it accepts one or more we can just go infinity and beyond so if you ever see star values or star something you know that you can have multiple in there so we're just gonna say one two three why not 3.14 so that's our structure integer integer decimal that's how that reads so integer integer decimal that way the struct package particular this PAC function knows exactly what we're storing we're giving it a format to work with if we gave it the incorrect format it's going to start squawking you're gonna get all sorts of errors and it's gonna get ugly this is a pretty dumb down example of struct pack you can find some very complex examples out on the internet but I really wanted to dumb it down just so we understand what's going on here now we've got our packed structure here so let's just print this out just to see what it looks like I'm a big fan of Show and Tell and you can see there's our structure here holy moly look at that that is a whole lot what's going on there well if you paid attention during your computer class you know that an integer at least on my platform is 4 bytes so there's one to and 3.14 is right there so that's what's going on is the packed function turns this into a binary string that's you know essentially Python is going to push it down onto the disk so we're going to say print rating file let's get that out of there put that there just because I'm picky like that with open STR file and you guessed it we're going to binary right as f now what we're going to do here is we're gonna write this out and we're gonna say F dot write bytes because we need to convert this into you guessed it bytes packed I know what that does is it takes our binary string and converts it into you guessed it bytes and then writes it down to the desk now we're going to print reading the file whoopsie there we go reading the file or say with open and you guessed it we're going to binary read I'm going to Europe this summer so I'm kind of nervous about it I'm gonna go to France specifically Paris Italy Spain and I don't know where else we're going it's kind of surprised we'll find out but I'll be gone for two weeks so it's gonna be interesting so we're going to just read now you notice how from the last tour we put a 16 in here this time we're not doing that we're just gonna read everything the entire contents of the file in there now if you knew the length of your structure you would actually say only read a certain amount for this example I'm just going to read everything and we're going to say unpacked equal and you guessed it we're going to unpack that needs a format and we're going to give it the buffer and then we're just going to print probably help if I actually like did something with that there we go whoo let's see if this thing runs all right so we've written the file we're reading it back and we've sure enough we get you guessed it one two and three point one four dice let's see what that looks like out on the disk and there is our beautiful file in all its glory it may look different on your screen but that is the just of it all so that is a struct now you know the basics of why you would use a struct now you can think of certain projects that you would do like if you wanted to store like somebody's employee ID and their age or something like that you'd make a nice structure and you could you know pump these out to the file that's all for this tutorial I hope you found this educational entertaining thank you for watching and be sure to visit my website Boyd Rob's calm for the source code for this and other tutorials hey everybody it's Brian welcome to the 18th Python tutorial we are gonna do something that's going to blow your mind are you ready serialize objects tada what does that mean exactly well we've all done this before right where you made a class and let's just make a generic class here and I'll say age equals zero yeah we're we've done this before but I'm just gonna flesh this out a little bit here just because and let's name equal unknown unknown jeez can't spell and let's just make a function here so when I say we're gonna serialize an object what alright what am I talking about here we turn into a serial killer or something or we making some sort of hybrid robot out of our computer no actually you know you've made classes before and you've filled in the data and you've probably thought you know what how do I save this for later how do I take this class that I'm working with here and actually make it so that I can store it to disk and load it later that's what we're gonna do and if you've never heard of this before it's called object serialization and a lot of programs actually do this when you're like in a video game and you save your file that file is just a class or collection of classes and it gets serialized to the disk the benefit of that is you don't have to write a lot of code to load all this stuff back in you know you don't have to like you completely ignore the the previous videos on binary and text files that we've done you don't need them you can just simply serialize the object you do that by importing something called pickle now I have to pause because usually when you import a pickle that's kind of a weird thing and your friends look at you there's that awkward moment and then you have to really explain what's going on why they call it pickle I have no idea it's a funny name and it actually cracks me up every time I use it so we're going to test our object now what this will do behind the scenes here it will make the object and then it will convert all that into everything that you've learned in the previous tutorials about structs and packing and unpacking and reading and writing binary files it'll do all that for you so you don't have to worry about it we're just going to flesh out some things here my name is Brian I'm 40 years old sometimes I don't know if I want to say that but whatever wisdom comes with age so let's test this out let's actually make sure our little class here works hello my name is Brian alright so that's actually just because I'm picky like that I want to be able to see all the information actually you know what now I don't I'm gonna be less picky that's my goal for this year's be less picky anyway so we're just gonna be like this now we're going to write this to a file and test dot txt I had an interesting email somebody would they know I'm a security knight they're like don't you feel a little weird you know reading and writing files and throwing it up on YouTube and having everybody looking at your hard drive and I'm like oh not really I mean there's really nothing exciting on my hard drive and this is just my my little play box where I record videos and do nothing else so anyway so we're gonna open the file and you guessed it we're going to binary right now this is where pickle becomes beautiful you ever seen a beautiful pickle well you're about to pickle is going to take a dump I know some of you especially if you're watching this in like a high school classroom are probably laughing really hard but that's actually what it does pickle dumps the data to the desk so we will dump that out we're going to print Pikul let's say the pickle has landed just because I've had one of those days I need some humor now we're going to read that file back in and load it and actually create a new object in memory this is where your mind is just going to explode you're gonna go what just happened so with open file let's actually do the correct one we're gonna of course binary read F and we're just gonna say o equal pickle load now you need to do a few things here we need to take our current class that's in memory that P and we need to dump it to our file so what's going on if you're following along here is we have our class called person making an instance of that class in memory and just adding some variables and stuff like that and I tried not to be picky we're taking that and dumping it to a file pickles taking a dump probably help if I had the right version of dump here there we go and see it's taken pee and it's putting it in an F F is just the file so don't get confused P is the instance of our person F is the file so it's dumping the person into the file the pickle has landed will be printed now we're making a new variable and pickle is going to load that little guy in there and I actually did that wrong there we go pickle is going to load the file in here now some some interesting things are going to happen as soon as we do this let's actually say print o just so we can see what's going on let's run this now hello my name is Brian the pickle has landed now you see this underscore underscore main person object at what in the heck is all this it's actually going to look at this file this is our file out on the desk now it may look different on your screen depending on what you're looking at it I'm using G edit because I'm on Linux and this is trying to interpret the hex values this may come up as a blank document this may come up as a bunch of weird gobbling cookin smiley faces it just depends on what you're looking at right but this is you guessed it a binary file now you can see some things in there like you see my name so you know something's going on here and you see it says name so you know that it's actually doing things and there's age the tricky thing of what this is really doing here is python is a dynamic language meaning you don't have to declare a variable type it knows intrinsically what type of variable it is it does that by you guessed it putting a class type in their person which inherits object at and then this is the memory address of where this actually lives on my computer neat so let's actually continue with this here now if you try to work with that object like let's say o dot notice how intellisense does nothing for us that's because pi term isn't smart enough to know what type of object that is because it has no idea what's on that disk so you can do some things and I'm gonna actually put this link out here because I found this really awesome link if you're using pycharm otherwise just ignore the link but what it is it's it's type hinting in pycharm some simple ways you can get PyCharm to understand what type of information you're working with here so and this is all built into Python so you don't have to worry about learning some proprietary thing if is instance and you're gonna say oh and we're going to say the person class then we're going to print o dot name or actually we could say o dot call the function watch this hello my name is Brian none no idea where that nun came from it's actually do dot whoopsy I'll see the age make sure the age actually loaded there it is 40 put the name in there so what you're really seeing here that's gonna kind of bug me I'm wondering where that nun came from that will be your homework class to tell me where that nun came from because I don't have time to look into it right now I've actually got a rush but then that's what's going on so you can create your classes fill them with information serialize or save them to the disk by making pickle take a dump and then later when the computer starts back up and the person starts your program you can load those back into memory exactly how they were before the beautiful part about pickle is it intrinsically works with all of the Python types so it knows it doesn't have to guess it just knows that was a pretty awesome tutorial sorry I fudged a little bit and I'm really wondering why we're that nun is coming from that's gonna be my homework to figure out what I did wrong here none hmm I will figure that out but if you figure out before me post it in my youtube channel in the meantime be sure to visit my website void roms comm for the source code for this and other tutorials and I know I've been beating it to death but be sure to join the Facebook void realms group there's 200 of us in there the reason being I'm not always available it can take days weeks months to get a hold of me my inbox is continually slammed so if you send me an email and you really want some feedback it's gonna take a while so join the void rums Facebook or ask you a question you know 10 people are gonna jump on it and instantly start giving you ideas so that's it
