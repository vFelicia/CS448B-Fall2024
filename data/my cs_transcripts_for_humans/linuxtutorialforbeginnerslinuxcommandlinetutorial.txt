With timestamps:

00:00 - we're going to use the the terminal to
00:06 - issue commands on issue commands to our
00:10 - operating system so that we can do
00:12 - different things and we want to do some
00:13 - very basic things to get started and
00:15 - that includes moving about the file
00:19 - system changing directories creating
00:22 - directories creating new files copying
00:25 - files deleting files and then looking at
00:28 - an editing file so just some very basic
00:30 - things we do on a computer I want to
00:33 - introduce you to the commands we use in
00:35 - Linux on the command line some of you
00:38 - may know them already so it should be
00:41 - easy the first thing to get started
00:45 - we're going to interact with our
00:46 - computer and what we see on the the
00:50 - window is the prompt this is referred to
00:52 - as the prompt is prompting me to issue a
00:55 - command it has some structure which
00:59 - we'll explain as we go through but then
01:01 - when I type something in then press
01:05 - Enter it runs a command on my computer
01:07 - and executes something now one thing
01:11 - that we need to know about is where is
01:13 - that command executed with respect to my
01:15 - computer and where means which directory
01:19 - or folder is executed in so we need to
01:23 - know something about the structure of
01:25 - the folders and directories I will use
01:27 - the word directory some people talk
01:29 - about folders but the directory and in
01:32 - fact the set of directories and files we
01:36 - refer to as the filesystem
01:40 - does anyone use Windows as their main
01:43 - operating system put your hand up it's
01:46 - ok I won't give you a lower grade right
01:50 - so Windows you you use folders and files
01:53 - what is that the topmost directory in
01:57 - windows again Program Files even above
02:03 - Program Files C Drive is if you think of
02:07 - Windows talks in terms of drives and
02:09 - maybe the topmost directory
02:12 - I don't know if it's still like that
02:14 - don't type this this is just a comment
02:16 - but because it's something like that or
02:19 - like that
02:20 - alright so C Drive we can think it's the
02:22 - topmost directory in our file system C
02:26 - is the drive there may be other drives
02:28 - and you can think that this backslash
02:31 - indicates the topmost directory because
02:33 - we have a hierarchy of directories
02:36 - underneath that our sub directories what
02:39 - are some of the sub directories someone
02:41 - said one in Windows program files I
02:46 - don't know I don't have Windows so
02:49 - please tell me what are some other sub
02:51 - directories of the top one in Windows
02:52 - program files user or user and settings
02:57 - or something and maybe system in the old
02:59 - days or Windows temp documents or
03:03 - whatever but that you know that there
03:05 - are some common directories from the
03:06 - topmost directory and under them a
03:09 - further directories so we say we have a
03:12 - hierarchy and there's the topmost
03:15 - directory and sub directories and so on
03:18 - in UNIX type operating systems UNIX type
03:23 - refers to the class included in Linux
03:25 - and UNIX operating systems there are
03:28 - many variations Mac OS X is a UNIX
03:33 - operating system Linux that were using
03:36 - is a UNIX type operating system in that
03:39 - there's also a hierarchy the topmost
03:42 - directory is represented by the
03:43 - character forward slash instead of back
03:46 - slash its forward slash the separator of
03:49 - directories is a forward slash this
03:53 - topmost directory we give a special name
03:55 - we refer to it as the root directory the
03:58 - root of our file system or the root of
04:00 - the tree and under that our sub
04:03 - directories and so on
04:05 - when we run a command on the command
04:07 - line it's run in some some directory
04:10 - which directory to find out we can check
04:15 - the present working directory so you can
04:18 - try the commands now follow along the
04:20 - present working directory PWD shows us
04:23 - what is what directory on Kara
04:26 - liyan and the answer from the from the
04:34 - root directory the forward slash there's
04:38 - a subdirectory called home and from that
04:42 - there's another subdirectory called
04:43 - student so we can think in that the
04:48 - hierarchy or in the file system I'm in
04:50 - the slash home slash student directory
04:52 - currently together this is called a path
04:56 - the path in the file system I think you
05:00 - know this already
05:01 - okay so syntax may be slightly different
05:03 - but you know the concepts but pwt tells
05:07 - you where you currently are the first
05:10 - thing we want to do is move between
05:12 - directories change directories we use CD
05:15 - to do that CD will change between
05:22 - directories where we usually provide
05:23 - where do we want to go maybe I want to
05:27 - go into the /home directory CD slash
05:34 - home what's rattling perfect thank you
05:43 - Sam CD slash home takes me into the
05:46 - /home directory you may guess that it
05:48 - worked there's a hint there but PWD
05:51 - tells me now I'm in the /home directory
05:52 - or CD into the root directory
05:58 - okay the forward slash on its own means
06:00 - the root directory we can't go any
06:03 - higher if we think of that the topmost
06:05 - level and we can go back to the slash
06:08 - home slash student so we can change
06:11 - directories when we specify a parameter
06:16 - here or the option to change a directory
06:18 - into which directory in all of these
06:21 - cases I started with a forward slash
06:25 - this means it's an absolute path
06:30 - absolute means in this case it's
06:32 - relative to the root directory but we
06:33 - don't need to start with a forward slash
06:36 - we can have a relative path
06:39 - let's see what I mean currently I'm in
06:41 - slash home slash student let's go into
06:47 - the root directory and I can change into
06:52 - the home directory
06:54 - I didn't start with a type it again I
06:59 - don't start with a forward slash and now
07:05 - I can change into the the student
07:07 - directory so when we pass a parameter to
07:14 - the CD command if it starts with a slash
07:16 - it means it's from the root directory if
07:20 - it doesn't start with a slash like CD
07:23 - student it means relative to the current
07:26 - directory we were in home we CD into the
07:30 - sub directory apart which is called
07:33 - student so we can move up and down in
07:39 - the hierarchy
07:40 - in fact an easier way to move up there's
07:44 - a special type which is dot dot CD dot
07:48 - dot moves up in the hierarchy I was in
07:52 - slash home slash student I moved up to
07:54 - slash home if I go up again
07:57 - I'm in the root directory so dot dot
08:04 - means upper level from where you
08:06 - currently are how do I go home you don't
08:17 - want to go home yet is that what you're
08:18 - saying oh alright good but if we want to
08:21 - get our home directory of course there
08:23 - are different ways we can type in the
08:24 - specific directory slash home slash
08:26 - student and we're in our home directory
08:32 - and it's common in in our operating
08:34 - system that our operating system
08:38 - supports multiple users one user is
08:41 - called the student user one is called
08:43 - instructor one is and there are some
08:46 - other users on this each computer and
08:49 - those users have their own
08:52 - private directory in the slash home
08:54 - directory so we are logged in as the
08:57 - student user our home is slash home
09:01 - slash student if I just briefly show you
09:13 - I'm currently in this window logged in
09:15 - as the instructor user my home is slash
09:18 - home slash instructor ok different users
09:20 - have different homes same as what is it
09:23 - users and settings or documents and
09:25 - settings or whatever it's called in
09:26 - Windows different users have different
09:28 - directories now as an example let's go
09:37 - back to the root directory a quick way
09:39 - to go home is just type CD with no
09:47 - arguments CD on its own will always take
09:51 - you home another shortcut for the home
09:59 - directory is the tilde character a
10:01 - squiggly line as an example go into the
10:09 - root directory CD tilde also takes me to
10:21 - the home directory so that the squiggly
10:24 - line the tilde character
10:26 - really means your home directory and
10:29 - that can be useful because we can talk
10:32 - about directories relative to our home
10:35 - we'll see in a moment that's a little
10:39 - bit about directories but more
10:41 - importantly what about files and what is
10:45 - inside directories so I'll go home make
10:49 - sure I am there yes we want to see
10:52 - what's inside a directory we want to
10:54 - list the contents of the directory we
10:56 - use LS LS returns what's inside this
11:02 - current directory and in my case it's
11:06 - there are four things code posters as
11:09 - vienen VM and as a hint when it's blue
11:14 - on your window it means those four
11:16 - things those things are a directory not
11:19 - a file normally we talk about files and
11:22 - directories and there are some other
11:25 - special types but we'll deal with files
11:28 - and directories because I've set this up
11:32 - I know that those four items code
11:34 - posters SBN and VM are directories
11:37 - inside your home directory so let's go
11:39 - into one of them maybe the posters
11:43 - directory and we can LS there and we see
11:51 - a set of files and you can guess that
11:54 - they're files right your extension PDF
11:56 - and the fact that they're not blue is
11:58 - that they're files not directories don't
12:04 - always rely on the color coding because
12:06 - different systems may have different
12:07 - colors and also some may be black and
12:12 - white or someone may be colorblind so
12:14 - there's another way to show what is a
12:18 - file and directory we'll see shortly
12:27 - actually we will see now so LS shows
12:31 - lists the contents of a directory we can
12:35 - pass arguments to LS we can not just
12:40 - list the current directory but list a
12:42 - specific directory LS slash lists the
12:47 - contents of the root directory and it
12:51 - shows the in the root directory there
12:52 - are some sub directories called bin home
12:56 - Lib root user and others and some
13:01 - special files that is the like the C
13:04 - Drive directory and some of those
13:07 - directories are common across many
13:08 - different unix-like operating systems
13:21 - here's an example of listing the
13:24 - contents of a directory VM relative to
13:27 - my home directory that tilde or squiggly
13:30 - line means slash home slash student so
13:34 - that's really the same as doing this the
13:43 - tool does just a shortcut there many
13:53 - commands so we've seen PWD CD LS we'll
13:58 - see more many commands have options
14:01 - extra features and I usually specifies
14:05 - using a dash as the option a dash
14:07 - followed by a letter so LS currently it
14:13 - shows the list of files in my directory
14:16 - I'd like to see the file sizes so I want
14:19 - to see the list of files and get the
14:23 - long output I'll use the minus L option
14:27 - LS minus L and now we see that same list
14:33 - of files but we see some more details
14:35 - about each of those files the same way
14:37 - in Windows that you can show the file
14:40 - list in the Explorer as icons or you can
14:42 - show the details I'm not going to
14:49 - explain all of this information today
14:51 - because some of it may be come up later
14:53 - or is not relevant just yet but going
14:57 - backwards say for the biography
14:59 - biographies dot PDF file there's the
15:02 - file name the date and time of the last
15:08 - modification of that file when it was
15:11 - last modified files actually have
15:15 - different time stamps associated with
15:17 - them not just when they were modify but
15:19 - when they were created this is the last
15:22 - modified time what this
15:26 - the size in what the units bytes this is
15:31 - the size in bytes so this file is about
15:35 - six megabytes this PDF the next two
15:40 - going backwards are something about who
15:42 - owns this file because we have multiple
15:45 - users on the computer each file has some
15:49 - ownership one particular user owns that
15:51 - file which user the student user owns
15:54 - the file there's also some ownership e
15:57 - with respect to groups of users not just
16:00 - the individual user but a group of users
16:02 - it turns out in this computer setup that
16:05 - there's also a group called student this
16:10 - number one not relevant it's about links
16:13 - to the file let's ignore it these 10
16:17 - characters the first character if it's a
16:21 - - it's a file if it's the letter D it's
16:26 - a directory we'll see another example in
16:29 - a moment the next ten the lakes nine
16:32 - characters about the permissions on the
16:35 - file
16:35 - can we read write and execute that file
16:37 - and that's related to the users we're
16:40 - not going to cover that today the
16:41 - permissions but just be aware to find
16:46 - the file size and the date and time even
16:49 - the owner use LS - L if I LS - L meaning
17:03 - upper directory we see that these are
17:07 - have the letter D meaning they had sub
17:10 - directories so that's how we really know
17:13 - it's a directory or file whether that
17:16 - output is a D or a -
17:23 - let's go home sometimes I may use clear
17:30 - just to clear out the screen so if
17:32 - things are at the top you don't need to
17:35 - you if you did you fail okay
17:39 - no it's alright I'll just do it so it's
17:43 - a bit clearer on the screen you don't
17:44 - need to because it's sometimes useful to
17:46 - see what you've just done LS there are
17:52 - four directories we know in our home
17:54 - directory
17:57 - in Windows you have hidden files and
17:59 - directories okay some files and
18:02 - directories are not displayed by default
18:04 - though of we refer to as hidden files
18:06 - and directories the same in our Linux
18:08 - operating system we can have hidden
18:10 - files and directories I know you all
18:14 - love security and cryptography and
18:16 - learning about security hidden files are
18:18 - not a security mechanism they hidden
18:20 - from a presentation perspective it's
18:23 - easy to see them to see them use LS - a
18:27 - to see all files this shows you the
18:32 - hidden files and directories and if you
18:36 - look closely you'll note that the hidden
18:38 - ones start with a dot so to create a
18:41 - hidden file or directory just create one
18:43 - that starts with a dot dot profile is a
18:48 - hidden file dot bash alias is another
18:52 - hidden file dot cache is a hidden
18:54 - directory in my home directory - a shows
18:59 - us all files - L gives the output in
19:03 - long format we can combine options sorry
19:12 - that was maybe some people didn't see it
19:16 - LS - a - L - you can do both or as a
19:20 - shortcut just LS - al in any order
19:25 - - al l a show me the long format output
19:31 - for all phones
19:37 - you can change into those hidden
19:40 - directories just the same as a normal
19:41 - directory I'm gonna keep going with a
19:48 - demo but make sure you ask that the TAS
19:50 - get their attention and ask some
19:53 - questions as we go we'll give some time
19:56 - to have a break a little bit later let's
20:07 - create some things we're in my home
20:13 - directory let's make a directory mkdir
20:17 - and then supply the name of this
20:21 - directory I want to make and let's
20:28 - change into that new directory and let's
20:37 - maybe make some others so mkdir makes a
21:00 - directory we'll make some files shortly
21:03 - we can change in directories doing
21:08 - things on the command line of course you
21:10 - realize we need to type a lot sometimes
21:12 - we'd like to speed things up so there
21:15 - are often keyboard shortcuts that we can
21:18 - take advantage of to speed things up one
21:21 - of them is the autocomplete feature so
21:24 - in my example I've got three sub
21:27 - directories security Steve and test I
21:32 - want to change I know I've got them
21:35 - there I want to change into the test
21:36 - directory so cd-rom and I type test but
21:43 - I am what I can do is I can type T and
21:47 - of typing the e I hit the tab key
21:51 - so the tab key hit that see what happens
21:54 - it autocompletes for me so if you start
22:00 - to use this autocomplete you can save on
22:02 - your typing and speed things up if I
22:08 - type cd' I want to go into the security
22:10 - directory I know it starts with an s CD
22:14 - s press tab nothing happens
22:17 - press it again because there are two
22:20 - possible directories that start with S
22:22 - it doesn't autocomplete one of them but
22:25 - if I press tab twice it shows me those
22:28 - two options security or Steve which one
22:30 - do you want I type II press tab again
22:33 - and there's only one unique directory
22:36 - that starts with se security it works on
22:41 - files and directories many things so the
22:45 - tab key on your keyboard is used for
22:48 - autocomplete we can remove directories
23:09 - rmdir RM for remove directory another
23:19 - keyboard shortcut if you want to run a
23:22 - command that you've previously run you
23:25 - can scroll through the previous commands
23:27 - using the arrow keys on your keyboard on
23:29 - your keyboard
23:31 - try the up and down arrow if I press up
23:35 - here Scrolls through the previous
23:37 - commands down takes me back I want to
23:42 - make the directory Steve again done the
23:46 - up and down keys the arrow keys
23:54 - [Music]
24:01 - back in my home directory let's remove
24:04 - this directory IT s35 - what happened
24:14 - it gave me an error message often when a
24:20 - command runs if it's successful it
24:22 - doesn't print anything on the screen
24:24 - unless there's some output like LS like
24:26 - but CD rmdir and so on here is printed
24:31 - something right I've tried to remove IT
24:36 - s35 - but it says that directory is not
24:39 - empty there's something in it
24:41 - rmdir by default will not you let you
24:45 - remove a directory if that directory has
24:47 - something in it so that's just a
24:50 - precaution there if I want to do it
24:53 - there are different ways but I couldn't
24:55 - remove the subdirectories first now so I
25:00 - could remove I will not do it I could
25:03 - remove the directory i TS 3 5 2 s slash
25:05 - security then remove the test directory
25:11 - what's in there let me check
25:14 - to make the example a bit of a little
25:17 - bit more fun I'll make Steve again you
25:22 - can name yours different but in my case
25:23 - I have security Steve and test I want to
25:28 - remove all of them then I can use rmdir
25:33 - now or I can to capture multiple values
25:39 - I can use some expression regular
25:41 - expression and simple ways to use star
25:44 - star means all values that match
25:46 - anything they're all gone
25:57 - I'll make mine again just to illustrate
26:01 - that I've got three directories security
26:08 - Steve and test maybe I just want to
26:10 - remove the s directories security and
26:13 - Steve rmdir s star remove everything
26:19 - that starts with an S we're left just
26:25 - with the test directory so the star this
26:33 - wildcard value can be used in many
26:36 - places where we use files and
26:38 - directories when we list LS when we make
26:45 - things edit files copy files we can use
26:48 - star where necessary before we move on
27:02 - to files one last special directory the
27:10 - current directory if I do LS - al notice
27:22 - LS - al there's a subdirectory called
27:26 - test it it shows me that there's a
27:30 - directory up so it's a bit strange but a
27:33 - keeps track that up there's a directory
27:35 - above my directories dot dot we know and
27:38 - it shows me dot means this directory dot
27:42 - is a special character that we used to
27:45 - refer to the current directory CD dot
27:50 - just takes you to the same directory
27:53 - that you're currently in though it's not
27:54 - useful there but we'll see in later
27:57 - users the dot refers to the current
28:00 - directory
28:07 - these commands are on the printed
28:11 - reference card in front of you the
28:13 - middle sheet treated on your desk is the
28:20 - commands on going through let me see if
28:24 - I've got it available on the course
28:33 - website the reference sheet you have in
28:41 - front of you printed and you have it in
28:42 - every quiz so you can use that in the
28:44 - quiz we've gone through directory
28:47 - operations special directories some
28:49 - other LS options will now go through
28:51 - some file operations I'm currently in my
29:19 - home directory I already have this IT
29:24 - s35 - directory let's go into that and
29:26 - make some files in there there's nothing
29:29 - in there
29:29 - actually there is there's still a test
29:31 - directory let's get rid of that IT s35 -
29:36 - in my case is empty
29:37 - doesn't have to be let's deal with files
29:40 - and a very basic thing let's create an
29:43 - empty file an empty file is there's
29:48 - think there's a placeholder for the file
29:49 - there's no content so we can use touch
29:53 - followed by a file name choose any file
29:57 - name touch creates an empty file empty
30:04 - means there's the file system has a
30:10 - record of the file but there no not no
30:12 - data in it and we can check by using LS
30:14 - - L
30:18 - the size of the file abc.txt that I
30:21 - created with touch is zero bytes right
30:25 - we don't commonly do that and in this
30:28 - lab but sometimes it's useful to create
30:30 - something for testing purposes we can
30:36 - create files with touch but a better
30:43 - thing to do is to create a text file and
30:45 - use a text editor what's your favorite
30:49 - text editor notepad nice selection
30:56 - notepad any others no pad + + okay any
31:03 - others TextEdit many there's many
31:07 - different text editors nowadays ok no
31:09 - pad comes standard on on Windows but
31:11 - very basic or same on on Ubuntu Linux
31:15 - there are different text editors
31:17 - installed and we can install others but
31:20 - on the command line - just to get
31:23 - started today we're going to use one
31:25 - called nano nano you type in Nano and it
31:30 - opens a text editor press Enter Nano and
31:47 - we can do our normal text editing down
31:55 - the bottom of the window are some menu
31:59 - items and the the hat character or the
32:03 - this character means the control key so
32:07 - down the bottom you see if you press
32:08 - ctrl-g you'll get the help control X
32:11 - will exit control o right out mean save
32:17 - write the file to disk ctrl o says
32:23 - what's the file name you want to write -
32:24 - let's give it a file name you can use a
32:28 - different one my file dot txt
32:30 - be present oh he wrote three line lines
32:34 - it saved three lines on disk so my file
32:36 - is saved there are other options one
32:41 - that we may use briefly today you want a
32:43 - copy and paste normally we don't have
32:46 - the mouse available no we're not rely on
32:50 - the mouse so let's try and do everything
32:52 - with a keyboard for now
32:53 - copy and paste well a simple or a quick
32:58 - way to do with it we can use ctrl K to
33:01 - cut control u to an cut and cut is like
33:07 - paste ctrl K and ctrl ctrl K cuts
33:17 - control U and cuts so that's a quick way
33:20 - and it works on lines there are other
33:22 - ways to do it on on selected text let's
33:32 - make a file which has lots of lines in
33:35 - it right just want a file so that we can
33:47 - use it for testing let's exit doesn't
33:55 - matter what's in your text file I want
33:57 - something with lots of lines in it so
33:58 - that we can use it with some other
34:00 - programs ctrl X to exit it prompts me to
34:05 - save because I've modified the file yes
34:09 - I want to save Y for yes what filename
34:11 - just press Enter I don't want to change
34:13 - the file name now I have a file of 711
34:26 - bytes
34:39 - let's find a few more statistics about
34:42 - the file we can count the words in my
34:45 - file WC word count it's more than just
34:50 - the words it says there are 42 lines 145
34:54 - words and 711 characters if I just want
34:59 - to know the number of lines minus L is
35:02 - an option word count minus L my file
35:06 - 42 lines in my file for today if you
35:16 - can't remember the commands then use the
35:18 - reference card printed in front of you
35:20 - over time as you use them you'll start
35:22 - to memorize them but sometimes
35:26 - remembering the options minus L is there
35:30 - a way to show just the number of
35:31 - characters or a number of words well
35:35 - sometimes it's hard to remember that all
35:37 - the detailed options so we can try some
35:42 - help and usually commands have their own
35:45 - manual and we can access the manual
35:48 - using the man can make command the
35:51 - manual page or the man page followed by
35:54 - the command is like showing the help for
35:57 - that command try it man WC this is the
36:06 - help page for the WC command and you can
36:09 - scroll up and down with your keyboard up
36:12 - and down arrows if I want to print the
36:15 - bytes only - see the characters - M the
36:20 - new lines that is the lines - L the
36:24 - words - W so I now learn a bunch of
36:27 - options for WC we can scroll up and down
36:34 - press Q to quit this is a special type
36:37 - of text editor to get out of it press Q
36:45 - this is the man page most commands have
36:48 - a have their own man page man LS all the
36:55 - options for the LS command - a has many
36:58 - options sometimes I'll ask a quiz
37:04 - question oh say how to do this
37:07 - particular thing where you've used the
37:08 - command but you need to go and find the
37:10 - option to get the very special case read
37:14 - the man page cue to quit
37:31 - let's do some more things on our text
37:34 - files we've created a text file with did
37:39 - a word count let me just clear and show
37:43 - what I have I've got two files one of
37:45 - them is empty my file contains some some
37:48 - content instead of using a text editor
37:51 - to display the file there are some other
37:53 - commands to display a very simple one is
37:56 - called cat cat is not an animal but it
38:00 - is a program that shows the contents of
38:02 - a file it's short for concatenate it
38:06 - simply prints off the contents of the
38:09 - file on the screen cat followed by the
38:16 - file name prints it on the screen you
38:20 - may have noticed in my case because
38:21 - there are lots of lines on that file
38:23 - when I did the cat I missed the first
38:26 - lines so instead of using cat sometimes
38:29 - we can use less less again shows the
38:35 - contents of the file on the screen but
38:37 - page by page and now I can scroll up and
38:41 - down with my arrow keys so it's got the
38:44 - top lines and I scroll down and I get to
38:47 - the bottom of the phone so less is us is
38:50 - slightly more advanced than cat cat just
38:53 - shows it less Joseph but but has paid
38:56 - breaks
38:57 - Q to quit less like the man page Q to
39:01 - quit you wanted to see the start of a
39:07 - file the head of the file head by
39:14 - default shows the first ten lines of the
39:16 - file or the end the tail tail shows the
39:22 - last 10 lines of the file you want to
39:27 - just get the first three lines of the
39:29 - file ed - entry mo file or the last five
39:38 - lines you can actually do minus five as
39:41 - a shortcut
39:43 - - n3 or simply minus three shows that
39:49 - selection of or that number of lines are
39:52 - the head or tail cat shows the full file
39:56 - less shows the file page-by-page
39:59 - head shows the first n lines tail shows
40:03 - the last n lines the reason we have all
40:08 - these commands on files is because many
40:12 - programs in Linux and UNIX systems are
40:16 - configured via files the operating
40:19 - system configuration is not done in a
40:21 - registry or a separate database but in
40:23 - plain text files and similar for many
40:27 - applications and many programs on the
40:31 - command line use text files to do
40:33 - processing so it's useful to be able to
40:37 - process those text files let's copy some
40:44 - files CP to copy copy my file dot txt -
40:58 - new dot txt and we now have a copy of
41:07 - that file copy doesn't have to go to the
41:12 - same directory I can copy my file back a
41:18 - directory and change it the name to
41:23 - another file and if we look in the
41:29 - higher directory we see that new file so
41:33 - copy uses a source and destination the
41:36 - source and destination can you include
41:38 - the the path the directory of the farm
41:55 - what if I want to copy another dot txt
42:00 - into my current directory how would I do
42:05 - that
42:05 - I mean I TS 3-5-2 in the higher
42:11 - directory there's a file called another
42:13 - dot txt and i want to copy it into this
42:15 - directory copy another dot txt from the
42:22 - higher directory what's the destination
42:25 - the destination is this directory the
42:28 - shortcut for this directory is dot copy
42:32 - another dot txt from the higher
42:34 - directory into this directory and we now
42:39 - have a copy so be careful or make note
42:46 - that I use the dot there when you redo a
42:48 - copy we must always specify source and
42:51 - destination sometimes we can use the dot
42:54 - to represent this current directory
42:58 - move is similar to copy move new dot txt
43:08 - upper level new dot text is gone from
43:14 - this directory it's now in the higher
43:16 - level directory move moves the file we
43:24 - can move it back I moved from the higher
43:38 - directory new txt into this directory
43:43 - moving the file there's also the same as
43:45 - renaming a file you want to change the
43:48 - name here I simply rename you txt to XYZ
44:03 - dot txt so we can use move to rename
44:13 - note that we can rename files and the
44:21 - names of files in Linux the extension
44:25 - doesn't matter in the examples I've used
44:30 - I've used dot txt because we we knew
44:32 - there were txt files but the extension
44:34 - is not important if I change the name
44:37 - you use a different extension it doesn't
44:39 - change the format of the file X Y Zed is
44:46 - still the same text file as before
44:50 - contain some text I can move X Y Z to X
44:57 - Y Z dot dot it's not a Microsoft Word
45:03 - document is still just a text file
45:05 - extensions are not necessary and are not
45:09 - necessarily interpreted
45:11 - so we can use any extension but it's
45:13 - common sense to or common practice to
45:16 - use an extension that is informative to
45:18 - the user and the last thing we can
45:25 - remove files are M followed by the file
45:32 - name well let's remove all of our text
45:35 - files star dot txt
45:39 - [Music]
45:40 - when I say text files I mean those would
45:43 - I've given the extension dot txt RM
45:48 - removes or deletes files there is no
45:54 - recycle bin there is no trash on the
45:57 - command line if you delete a file it's
45:59 - gone so you need to be careful in the
46:05 - graphical interface there is a trash bin
46:07 - but we're not using that when you delete
46:10 - a file here it's no longer available so
46:12 - be careful when you remove files
46:14 - especially if you use a wild card like
46:17 - star RM star delete everything if you
46:21 - have a thousand files in that directory
46:22 - they're all gone sometimes the
46:36 - permissions on directories mean you
46:38 - can't delete everything but you can do
46:40 - some damage if you can delete delete
46:42 - your own files accidentally
46:50 - before we have a break let's do the last
46:53 - few things on files let's find some
46:59 - files on our file system I'll go home
47:11 - clear I'm in my home directory often we
47:18 - want to search for files that is
47:19 - somewhere on my hard drive there's a
47:21 - file that I'm looking for I know the
47:23 - name or the the structure of the name
47:26 - there are different ways to locate files
47:28 - one is using locate locate followed by a
47:32 - file name maybe Wireshark
47:36 - I know there should be some files about
47:38 - Wireshark Wireshark is installed locate
47:42 - may tell me about those and it tells me
47:46 - all the files that have the name
47:50 - Wireshark you know and you you can
47:53 - scroll up and down I will not but it
47:55 - returns a whole set of files the
47:57 - complete path the sub directory and the
48:01 - file name that refers to Wireshark so
48:03 - locate okay if there's no file then it
48:11 - will return nothing then locate I had x1
48:18 - what IDs 3 5 to locate X Y Z dot dot
48:25 - this is interesting I have a directory
48:31 - called IDs 3 5 2 and I inside that I
48:34 - have a file called X Y Z dot doc if I
48:37 - try to locate X Y Z dot doc it doesn't
48:41 - return an answer locate is a very well
48:45 - locate uses a database of files to find
48:50 - the answer it's very fast to find the
48:52 - answer but the way that it works is that
48:54 - oh maybe the past hour or so the
48:57 - operating system has done a search for
48:59 - all the files and put them in a database
49:01 - but as
49:02 - not up to date recently I've created Xyz
49:06 - dog if I try to locate it it's not
49:10 - currently in the database so locate
49:13 - cannot find that so locate is very quick
49:16 - but doesn't cover all the files so a
49:20 - more powerful command to find files is
49:24 - using find it's more powerful but
49:28 - slightly more complex find the pattern
49:33 - we'll use find specify the directory we
49:35 - want to search in and then the option -
49:40 - name because we want to find based upon
49:43 - the name star dot docx so there's three
49:51 - arguments to this find command the
49:54 - directory I want to search in including
49:57 - the sub directories then I say I want to
50:00 - search based upon the file name because
50:02 - actually you can search on other
50:03 - criteria file size creation date
50:06 - permissions and I want to find anything
50:09 - that ends with a dot dot and that finds
50:14 - X Y Zed dot dot so it does an actual
50:20 - search if I want to search for my
50:27 - current directory it's good practice to
50:33 - include the double quotes especially
50:36 - when you use a wild-card there and the
50:37 - star character fine searching through my
50:40 - current directory files with name the
50:44 - end with dot PDF and it shows me all the
50:47 - PDF files what if I want to find all the
50:55 - PDF files on the hard disk fine
50:59 - / - name star dot PDF that is search
51:07 - from the root directory and end
51:09 - including all sub directories and you
51:14 - say it may see many results you may
51:16 - also see some errors permission denied
51:18 - Arabs so it searched through the entire
51:23 - hard-disk returns all the PDFs but some
51:26 - directories the student user is not
51:28 - allowed to access to do the search
51:30 - through so you'll often see permission
51:32 - denied in there but you have many
51:35 - results we can locate files although it
51:41 - doesn't get the most recent files more
51:43 - powerfully we can find files you think
51:46 - the command find the last way that we've
51:50 - commonly used to search for files is to
51:54 - search for application files or
51:57 - executables before we search for
51:59 - Wireshark and it returned many
52:02 - directories files related to Wireshark
52:08 - but I want to find where is the
52:11 - application Wireshark so there must be a
52:14 - program and executable on my computer
52:17 - that is Wireshark
52:18 - we can use which it's in slash user
52:25 - slash bin LS is also an application it's
52:30 - in slash bin nano is an application so
52:37 - these are the executables the things
52:39 - that are executed when we type the
52:40 - command it's in slash user slash bin bin
52:44 - is short for binary and it's usually it
52:47 - really means the application the program
52:49 - there executable which searches for
52:56 - programs locate and find search for any
52:58 - type of files so I'm back into my home
53:08 - directory let's go into my IT s35 -
53:14 - directory what's in there my XYZ dot doc
53:17 - make sure you have a file with a few
53:19 - lines in it doesn't matter what's in it
53:22 - I'll just check my own X Y Zed my file
53:26 - has some text in there
53:33 - one thing that we need to know is how to
53:38 - process text files so we've seen some
53:40 - commands for dealing with text files
53:42 - displaying showing the head the tail
53:44 - word count it's very powerful if on a
53:49 - command line if we can automatically
53:52 - process text files to help configuring
53:54 - our computer so the next thing we're
53:57 - going to do is first search through a
53:58 - text file and one way to search through
54:02 - a text file is called a program called
54:04 - grep and a simple way to use a grep then
54:08 - you specify a pattern what do you want
54:10 - to search for maybe you want to search
54:11 - for the word example in my file and grep
54:16 - will return all of the lines in that
54:18 - file that match that pattern in my file
54:22 - yours may be different so maybe your
54:25 - word you search for can be different
54:28 - depends on what's in your file mine
54:30 - returns three lines inside the file
54:33 - which contain the word example so very
54:35 - simple search through the file return
54:39 - all the lines which contain that pattern
54:46 - we can use wildcards there if we want
54:58 - what did i do there that's a bad example
55:03 - don't use a wild-card there let's avoid
55:06 - that one the grep so what I did there
55:11 - was a mistake for what we want to do
55:13 - grep has a number of options where we
55:16 - can specify regular expressions and use
55:19 - wildcards and other special characters
55:21 - to match different patterns but we will
55:24 - not deal with those right now it's takes
55:28 - some time to look at the syntax so let's
55:32 - simpli-stik was searching through four
55:35 - particular words in a file for now so
55:39 - grep can search through files we can do
55:43 - an inverted search find all the lines
55:47 - that don't match that word again all the
55:55 - lines the minus v4 inverted is all the
55:59 - lines that don't have that word and it
56:04 - shouldn't show the ones with example so
56:14 - a very quick use of grep to search for a
56:17 - file we'll see some other examples later
56:26 - next thing up until now all of the
56:30 - programs who have been running we've
56:32 - interacted with with those programs by
56:35 - running it and then they usually show
56:37 - something on the screen so grep for
56:41 - example printed out the answer on the
56:44 - screen the screen is how we get the
56:50 - output of this program but in fact we
56:53 - don't have to print it on the screen we
56:55 - can put it inside a file so we're going
56:58 - to look at how we can put the output of
56:59 - a program in a file rather than printing
57:02 - it on the screen and it's quite easy in
57:06 - fact do that again grep I want to search
57:12 - for all the lines in my file which don't
57:15 - contain the word lines if I do that
57:20 - those lines are printed on the screen
57:23 - what I can do is redirect the output of
57:26 - that program using the greater than sign
57:29 - into a file
57:31 - I can name it what I like my output txt
57:37 - ran it see what happens it doesn't print
57:42 - anything on the screen the grep program
57:45 - rum runs but the output of that program
57:49 - is redirected from the screen which is
57:53 - called the standard output the standard
57:55 - location to put the output and is
57:58 - instead sent to into a file now let's
58:01 - look inside our file my out we can use
58:04 - less look inside your file see what you
58:09 - get you see the output of grip so this
58:17 - concept is called redirection we
58:21 - redirect the output of a command to some
58:24 - other location and the very common way
58:27 - we do it is redirect the output of the
58:29 - command from the screen to a file LS we
58:39 - know has LS - L as an option so the long
58:42 - output we can LS a particular directory
58:45 - LS - L from the root directory we can
58:54 - also recursively LS a recursive LS means
58:59 - show me the contents of that directory
59:01 - and its sub directories and their sub
59:04 - directories and their sub directories it
59:06 - keeps going that's what the - uppercase
59:09 - R does with LS let's list all the files
59:13 - on our hard disk
59:18 - it may take some time to list them you
59:21 - see it's going through the hard disk
59:23 - listing all of the files to stop that
59:27 - because I'm too impatient you can try
59:29 - ctrl c ctrl c kills or cancels the the
59:34 - program from running
59:37 - that was LS - L - are up against our /
59:44 - maybe I want to know all the files on
59:48 - the hard disk instead of showing on the
59:50 - screen put them inside a file now what's
60:05 - happening here are some errors being
60:07 - displayed the files themselves are not
60:10 - being displayed but the error messages
60:13 - are what's happened when a program runs
60:26 - that program produces two types of
60:30 - output the program produces output the
60:35 - standard output from the program that
60:37 - normal output it it it produces when
60:41 - there's no problems but if there are
60:44 - error messages they are also printed on
60:46 - the screen but the error messages are
60:49 - considered separate from the standard
60:51 - output what you see on the screen now
60:55 - are the set of error messages from the
60:57 - command a run with redirection and the
61:02 - greater than sign it only just shows the
61:05 - normal output and puts it into this file
61:07 - the error messages are still printed on
61:09 - the screen the concept and it's on one
61:17 - of the slides on the website
61:30 - the concept is with any command when we
61:34 - run a command there are in fact three
61:35 - ways three interfaces to that command
61:39 - there's the input to the command some
61:41 - commands take you or accept input from
61:44 - you we haven't seen any yet
61:46 - we may see some later some commands we
61:49 - can supply input it's called the
61:51 - standard input then the command runs and
61:54 - the command does something and it
61:57 - produces two type of output the normal
61:59 - output the standard output which is the
62:02 - expected output LS shows a list of files
62:07 - grep shows a list of lines that match
62:10 - some criteria but if there's errors it
62:13 - may also print error messages there's it
62:16 - goes my mouse and that's referred as the
62:20 - standard error so there are three
62:25 - interactions to a command the standard
62:27 - input the standard output and the
62:29 - standard error normally the standard
62:33 - import comes from what we type both the
62:36 - standard output and standard error are
62:38 - printed on the screen after when the
62:40 - command runs that's what normally
62:41 - happens with redirection using the
62:47 - greater than sign the standard input is
62:51 - normal that doesn't change the error
62:53 - messages are still displayed on the
62:55 - terminal
62:56 - but with redirection with a greater than
62:59 - sign these standard output is saved in a
63:01 - file okay so instead of printing on the
63:05 - terminal it prints it into a file so we
63:07 - can look at it later it's very useful to
63:09 - get a record of what's happened you
63:12 - don't want to look at it as it goes you
63:13 - want to look at it later redirect into a
63:15 - file there are different options you can
63:20 - redirect both the standard output and
63:22 - the standard error into a farm
63:24 - note the difference here's the ampersand
63:27 - character and the grade of n with just
63:31 - greater at greater than the standard
63:33 - output is saved to a file but not the
63:36 - arrows with this one both
63:39 - the output and errors are saved into a
63:41 - file and there are other variations one
63:46 - of them the common one we'll use is this
63:50 - just greater than sign run a command
63:52 - don't print the output on the screen
63:54 - print it into a file another one which I
63:58 - don't have on the slides if you use two
64:00 - greater than signs it appends to the
64:03 - file one greater than sign over writes
64:06 - the contents of the file to ads to the
64:10 - end of the existence of the file if it
64:12 - exists so let's try those two commands
64:15 - again the others with the ampersand will
64:17 - not try I think will not use let's try a
64:20 - couple more redirections two files just
64:29 - check that command I run all files dot
64:33 - txt it's only 30 megabytes in size that
64:39 - if we have a quick look at it not all of
64:43 - it of course it's the list of all files
64:47 - and directories on my hard disk except
64:51 - for those which I didn't have permission
64:53 - to look at I'm going to delete that if
64:57 - you create a one delete it so you don't
64:59 - take up space we'll do a few more simple
65:06 - redirections and to do them let's
65:10 - introduce some other commands who are
65:13 - you logged in as if you forget who you
65:17 - are then ask the computer computer Who
65:20 - am I ok Hugh Who am I
65:24 - tells you the current user you're logged
65:26 - in as in my other terminal I'm logged in
65:35 - as the instructor ok there are different
65:37 - users on here
65:46 - we can redirect the output of Who am I
65:49 - into a file
65:54 - all right so instead of printing on the
65:57 - screen it just goes inside that file
66:00 - another command echo echo echoes that
66:06 - string onto this the terminal very
66:08 - simple whatever we type after the echo
66:11 - is printed does nothing other than print
66:14 - on the screen it's like a printf
66:16 - statement in a you know programming
66:18 - language or a print statement so we can
66:21 - echo into a file and if we want to
66:30 - append to a file instead of instead of
66:32 - overwrite it use 2 greater than science
66:37 - name already contained student and now
66:42 - I'm going to append to the end of that
66:45 - hello to greater than signs echoes one
66:51 - of them over writes just to confirm that
66:57 - if you just use a single greater than
67:00 - sign you'll delete what was in the file
67:03 - before so the greater than sign the two
67:17 - greater than Xand there are some other
67:18 - variations are called redirection
67:20 - redirect especially the output to a file
67:30 - next and another new concept is that
67:33 - when we run commands often we'd like to
67:37 - do more complex things than what we've
67:39 - done so far and we can do that by
67:41 - running multiple multiple commands not
67:45 - just one after the other
67:46 - but run a command take the output of
67:49 - that command and use it as input to the
67:52 - next command and this is called a pipe
67:55 - combine multiple commands together using
67:58 - a pipe
67:59 - let's see some examples what's my IP
68:05 - address I told you at the start 10 10.16
68:11 - dot 201 what's yours do you know the
68:15 - command to find her Who am I tells you
68:20 - who your login is your IP address is
68:23 - which is not the topic for today I think
68:25 - we're may have seen it last semester you
68:27 - may have seen me use I have confident
68:33 - you don't need to remember that yet but
68:36 - it's useful for the example ifconfig
68:40 - shows you details about your interfaces
68:43 - and if you scroll up you'll see your IP
68:46 - address somewhere which interface does
68:54 - it has an IP address for you I don't
69:05 - have scroll on my terminal so I just
69:07 - scroll up here I have conflict I know
69:10 - ETH 0:10 10.16 dot 201 and I know that's
69:17 - the Internet address I net address I
69:20 - don't want all this other information
69:22 - I just want my IP address so what we can
69:27 - do is maybe try Grip run ifconfig and
69:34 - take the output of i of config and then
69:38 - use that as an input to grip searching
69:42 - for eye net address try that where the
69:47 - way to combine the two commands is this
69:50 - vertical bar which is shift back
69:56 - back thoughts backspace what's that
69:59 - backslash backslash is the key shift
70:02 - backslash this is called the pipe
70:06 - character it means take the output of
70:09 - the first command and use it as input to
70:11 - the next and it returns all lines which
70:14 - were output from ifconfig which match
70:16 - inet addr
70:18 - and we see two there can we improve upon
70:26 - that what if I just want the IP address
70:29 - now let's run I have config again but we
70:34 - can run I have config with a sub option
70:37 - with the specific interface I want this
70:40 - is a little bit outside of the scope
70:41 - today we'll cover later but with I of
70:44 - config at shows I have 88 0 1 2 and ello
70:49 - I'm looking just for eth0
70:56 - so I have config 88 0 and now grip into
71:00 - I net a DDR the internet address and I
71:05 - get a single line which includes my IP
71:10 - address plus my broadcast address and a
71:13 - network mask I just want that IP address
71:17 - so let's try and do some operations on
71:20 - that single line there's different ways
71:21 - to do it we can take that output and
71:24 - pipe it into another command this other
71:27 - command we can use one is called cut cut
71:32 - takes a string of text and splits it
71:36 - into chunks where we can specify the
71:39 - delimiter and say is the colon character
71:48 - that is the chunks are separated by that
71:51 - character and the chunks actually called
71:54 - fields this is going to take this line
72:01 - of text and cut it up into fields
72:04 - separated by the call on character so
72:06 - this would be field 1
72:09 - field2 field3 I want field to that's
72:16 - what the minus F does what do we get can
72:22 - we do another cut and just get their IP
72:24 - address let's pipe that into another cut
72:27 - the delimiter what is a space maybe
72:30 - field one now I've extracted my IP
72:36 - address from ifconfig annex and removed
72:40 - all other information there may be
72:44 - better ways to do that but and it's may
72:50 - only work in certain cases but it's an
72:52 - illustration that we can combine
72:53 - multiple commands together using the
72:56 - pipe operator that vertical bar and in
73:03 - doing that I've introduced this new
73:05 - command of text processing called cut
73:07 - and the a simple way used to use cut we
73:12 - specify the thing that separates the
73:15 - fields the delimiter and it can only be
73:18 - a single character and then we specify
73:20 - the fields that we want and cut is given
73:25 - on the Linux reference sheet as well
73:35 - many commands can be combined using the
73:38 - pipe operator as long as one produces
73:42 - output and the other takes some input
73:50 - what's the port number used for a web
73:53 - server remember remember a common quiz
73:59 - question not this week
74:01 - later weeks the port number for web
74:04 - server not 50 stars with an 880
74:10 - different applications have different
74:13 - port numbers some we won't remember on a
74:16 - Linux operating system there's a file
74:18 - that lists the set of port numbers
74:22 - it's in the EDC directory and the file
74:25 - is called services again this is outside
74:29 - of the scope for today but we'll use it
74:31 - as the example we can see the port
74:43 - numbers of different services secure
74:45 - shell servers use port 22 HTTP if you
74:52 - scroll down uses port 80 and others
75:05 - queue to quit
75:07 - maybe we can search through rather than
75:15 - having to browse through let's look for
75:17 - all the lines that contain HTTP and we
75:28 - get well we get a few extra lines that
75:30 - we don't really want here if we want to
75:43 - filter out we can actually specify this
75:45 - specific word of HTTP a gets rid of some
75:54 - and then we could actually we don't even
75:59 - need the word we could type that into a
76:03 - a cut and get rid of the comments for
76:07 - example separate the fields by the hash
76:14 - character grabbing only the first field
76:26 - maybe you want to sort them so all I'm
76:30 - doing is building up one larger command
76:32 - by combining them a smaller ones with
76:34 - pipe operations sort the output HDTV -
76:42 - all becomes before HTTP maybe we just
76:47 - want to cut and get rid of everything
76:49 - before the after the slash so just
77:06 - another example of building up and
77:07 - getting information from a text file
77:10 - especially using pipe grep cut sort and
77:14 - some of the other text operation
77:17 - commands can be used in the same manner
77:32 - last week we introduced some some basic
77:35 - commands to get around on the in the
77:38 - Linux operating system so we'll continue
77:40 - today and look at some different things
77:43 - look up running processes connecting to
77:46 - other computers and a little bit about
77:49 - permissions who can do what on a on a
77:51 - computer the first thing we'll look at
77:54 - is processes and when we run a command
77:58 - LS for example LS is actually a program
78:03 - on this computer we know that if we use
78:06 - which LS LS is actually an executable
78:10 - installed on the computer in the bin
78:11 - directory so when i type LS that is the
78:15 - program is executed it does something
78:17 - that is at this the the files or the
78:20 - directories and then it stops executing
78:22 - so that's common with most commands it
78:25 - starts the application it does something
78:28 - and it stops we talk about that it
78:31 - starts a software process a process runs
78:34 - does something and then
78:38 - so we want to look at that in a terminal
78:42 - normally we just ran one process at a
78:44 - time I type ls' I press Enter
78:48 - LS execute the process runs stops then I
78:52 - do another command
78:53 - so just sequential we can do more
78:56 - complex than that we can run some
78:59 - processes leave them running and then
79:03 - run some other processes so we'll
79:06 - introduce how to do that the concept is
79:08 - that we can have one process that we can
79:11 - run and interact with by typing things
79:14 - in and then other processes we say are
79:18 - running in the background they're
79:20 - running but we don't interact with them
79:22 - so let's see how we do that and give
79:24 - some examples of why it's useful first
79:37 - let's see
79:40 - one of our commands we did we did last
79:44 - week
79:44 - LS if we want to list all of our files
79:47 - on our hard disk LS - l showed us in the
79:50 - long format and there's a minus r option
79:54 - recursive and we want to list everything
79:58 - on the hard disk so let's list all files
80:00 - in long format recursively starting from
80:04 - the root directory recursively means
80:07 - list the files in that directory and
80:10 - then all of its sub directories and all
80:12 - of its sub directories and so on
80:14 - so essentially lists everything on the
80:16 - hard disk run it see what happens
80:23 - so LS - L - uppercase R /to mean lists
80:30 - in the root directory and when we run it
80:34 - you see it prints all the files on the
80:37 - hard is there some we can't can't see I
80:39 - want to stop so the process is running
80:41 - all right
80:42 - I can't interact with the terminal I
80:45 - can't run other processes while this
80:46 - one's running it stopped okay now I can
80:50 - run other commands for the next command
80:52 - so that process took a long time or some
80:56 - things we may want to do maybe I run it
80:59 - and I realize I'm not so patient so I
81:02 - run it again how do I stop it before it
81:06 - finishes one way is ctrl C so you don't
81:11 - see the command oppressed but note down
81:13 - here it showed I press control C
81:17 - character there know the two keys so
81:20 - that stops it but that's what we say you
81:24 - stops or cancels or process
81:29 - and sometimes we say we kill the process
81:32 - so we talked about the process was
81:33 - running to stop it before it completes
81:35 - normally control-c will do that could
81:38 - cancel the process so that's useful when
81:41 - you have something that you cease going
81:44 - to run for a long time and you realize
81:46 - you don't want to wait for the end or if
81:49 - you've done something wrong or done
81:51 - typed in the wrong command and it's
81:54 - sitting there waiting for input you've
81:56 - got nothing no idea what to do then ctrl
82:00 - C will cancel or kill that process and
82:02 - you can return to the terminal you need
82:03 - to interact just to show that because
82:10 - doing that that to demonstrate that we
82:13 - need a process that will run a long time
82:15 - the LS minus LR does run for a long time
82:18 - let's find another process just for the
82:20 - demonstration I'll just clear that try
82:28 - yes what does yes do
82:36 - yes Prince Weis forever this process
82:40 - will run for a long time it will run
82:41 - until the computer shuts down so it's
82:46 - just for testing all right so just
82:49 - Prince Weis forever so how how do we
82:52 - stop it
82:52 - well we can control CD to cancel or kill
82:55 - the process so we'll just use yes just
82:58 - as an easy demo of manipulating
83:02 - processes we can so when the program
83:09 - runs when I run yes it's running I can
83:13 - kill or cancel the process with control
83:15 - C and it and the operating system stops
83:19 - the process and deletes any information
83:21 - about it but we can also pause the
83:24 - process or suspend the process put it to
83:27 - sleep and to put a process to sleep
83:30 - suspend control Z control see kills
83:37 - control Zed suspends or puts it to sleep
83:41 - that is the operating system still has
83:43 - some information about this process in
83:45 - memory it's just not executing at this
83:49 - stage it stopped it says on that command
83:51 - line it's not running it but note with
83:59 - it suspended we can still interact with
84:00 - the terminal we would like to us maybe
84:04 - if it's pause to restart to resume so
84:07 - what we can do to see the set of
84:09 - processes that are stopped or paused
84:14 - from this bash shell they referred to as
84:18 - jobs what jobs are paused if we type
84:21 - jobs
84:21 - it says the jobs that are proposed or
84:24 - suspended or stopped at this stage yes
84:28 - he's stopped and it's job number one
84:33 - so that's a paused process we can bring
84:37 - it back and start it again and we say
84:41 - that there's always one process that can
84:44 - run it with interactivity with the
84:46 - terminal and we say that process is in
84:47 - the foreground so to bring that process
84:50 - back we can say foreground followed by
84:53 - the job number is job number one fg1 or
84:58 - if you just type FG on its own it will
85:00 - still work because it brings the most
85:02 - recent one pause back but FG one will
85:05 - bring our process yes back to the
85:09 - foreground that is it's running again
85:13 - control-z
85:14 - we'll stop it again and we see it's
85:18 - listed as the jobs foreground we'll
85:22 - bring it back
85:23 - FG followed by the number or if you want
85:25 - the most recent one just FG it's now in
85:28 - the foreground a process in the
85:31 - foreground when I do something on the
85:35 - terminal I'm interacting with that
85:36 - process in the foreground alright
85:39 - there's nothing to interact with this
85:40 - program it just prints on the screen so
85:42 - I can't run other programs at the moment
85:46 - we can control seed kill the process
85:52 - there's no jobs suspended now
85:58 - so jobs list those that have been
86:00 - suspended or stopped FGM brings can you
86:03 - be used to bring one that was suspended
86:06 - back to foreground and have it running
86:08 - again so that's useful if we want to
86:11 - pause something and then go do something
86:13 - else in the meantime then come back to
86:15 - that process let's try that in some
86:21 - different ways let's run yes and let's
86:23 - output that to a file
86:26 - remember redirection from last week the
86:28 - greater than sign says instead of print
86:31 - the output of yes on the screen print it
86:34 - inside a file try that then it doesn't
86:39 - take up the screen it's running the
86:43 - process isn't in the foreground I can't
86:45 - do anything I can't issue commands you
86:47 - can try and type but I can't run
86:49 - anything it's running we can suspend it
86:55 - control Z it's stopped just check the
86:59 - file how big is it
87:04 - one of the options for LS if you want
87:07 - human-friendly h human-friendly gives
87:11 - the the prefixes its 2.1 gigabytes mine
87:14 - note that what yes does is just prints
87:17 - wise to a file and does as fast as
87:19 - possible so it filled up two gigabytes
87:21 - in those 10 or 20 seconds when I ran it
87:24 - note that it's not getting any bigger
87:27 - that process is suspended it's not
87:30 - running there's some state information
87:33 - about it but it's not running if we want
87:36 - to start it again bring it back to the
87:38 - foreground just check the jobs there's
87:42 - only one I can do FG 1 to bring job
87:46 - number 1 back to the foreground and it's
87:49 - running again I'll suspend it again and
87:52 - look at the file size mine's now up to 2
87:55 - point 6 gigabytes okay so that just
87:57 - illustrates that something was added to
88:00 - the file then it started again it's
88:07 - suspended so it's not doing anything at
88:09 - this stage and we says it's stopped
88:12 - what we can do is take that process
88:14 - instead of having a paused have it run
88:18 - but have it run in the background we say
88:20 - have it run such that it's executing but
88:23 - we can still interact with the terminal
88:25 - and to put a process into the background
88:29 - we use bheegi bheegi followed by the
88:33 - process number or simply BG because
88:36 - there's only 1 to 1 job to deal with BG
88:41 - puts that process into the background
88:44 - let's check the jobs so now that job yes
88:48 - redirect to the app dot txt file is
88:51 - running and let's check our file size
88:55 - mine's 4.7 gigabytes
88:59 - if I check again it's now five point two
89:01 - gigabytes all right so just to
89:04 - illustrate that it is running now but I
89:06 - can still interact with the terminal
89:08 - because that process we say is in the
89:09 - background and we can have as many
89:12 - processes as we like running in the
89:14 - background how do I stop it I'm gonna
89:22 - fill up the hard disk soon so how do I
89:24 - stop my my yes process we could bring it
89:31 - back to the foreground it's in the
89:33 - background from running to bring it back
89:35 - to the foreground simply FG or FG
89:38 - followed by the number there's only one
89:39 - so f G's fun it's running again and now
89:43 - it's in the foreground and I can
89:46 - interact with it by the terminal the
89:48 - commands I issue affect that process so
89:51 - I can control C to kill the process look
89:58 - at the files eyes there's no jobs
90:02 - running now and that that process is
90:04 - stopped the files not getting any better
90:06 - it's gone
90:10 - so really three states of our process
90:15 - the process is in the foreground it's
90:19 - running and in the foreground means that
90:21 - when we interact with it via the
90:23 - terminal when we issue commands it's
90:26 - interacting with that process in the
90:27 - foreground the process can be paused or
90:30 - suspended with control-z means it's not
90:35 - running but there's still some the
90:37 - operating system stores some information
90:39 - about the process so we can resume if we
90:41 - like and the third state is the
90:44 - processes in the background it is
90:45 - running but we cannot interact with it
90:48 - via the terminal it's running in the
90:50 - background we say let's delete that file
90:56 - so I don't fill up my hard disk and I
90:59 - suggest you do the same
91:04 - let's do similar again but we'll
91:07 - introduce different ways to do that
91:17 - yes redirect to our file it's running
91:25 - I'll control Z just pause it
91:28 - BG puts it into the background so it's
91:31 - running again it's a gigabyte
91:38 - it's 1.5 gigabytes it's 2 gigabytes so
91:44 - it's running there in the background so
91:46 - that's common if you start a process
91:48 - normally and then you realize let's put
91:51 - it in the background let's have it
91:53 - running but but in the background then a
91:55 - quick way to do that controls it
91:57 - suspends and then BG puts it into the
92:01 - background so it's still running
92:03 - you want to back foreground and it's
92:06 - back
92:10 - back to the background
92:12 - control-z DPG so we usually combine
92:15 - those two controls edge followed by BG
92:17 - puts it into the background it's getting
92:22 - big the file we said to stop the process
92:27 - to kill it or cancel we use control-c
92:29 - but there's another way so we see the
92:32 - jobs that yes program is running we can
92:36 - also see the processes PS lists the
92:42 - processes a little bit more detail it's
92:44 - the processes that you you're running in
92:47 - this terminal and there are three listed
92:51 - so this program PS runs a process that
92:56 - tells us what processes are running
92:58 - which processes did it list it listed
93:01 - itself that is when it runs it records
93:05 - it eat itself is a process running PS
93:08 - yes is a process that our operating
93:10 - system is running the program that we've
93:12 - got running and bash bash is the
93:15 - software that interprets your commands
93:17 - on the command line that's the shell
93:20 - software we call it the bourne-again
93:22 - shell it's the it handles the the
93:26 - commands that we can issue so you always
93:29 - see bash there as the output you almost
93:32 - always see PS and you may see other
93:34 - processes that you've got running in the
93:36 - background like yes in this case it
93:38 - tells us something about how long it's
93:40 - running and more importantly or useful
93:42 - for now is the process ID the operating
93:45 - system assigns a process ID we know yes
93:48 - has the process ID five five seven five
93:51 - how BIG's my file only 19 gig so we
93:56 - better stop it
93:56 - rather than bring it back to the
93:58 - foreground we can kill the process
94:00 - without ctrl C but using Q followed by
94:05 - the process ID so that's why we use PS
94:08 - there to learn the process ID and now q
94:11 - five five seven five
94:14 - make sure you choose the correct process
94:16 - ID yours will be different than mine
94:21 - PS shows that yes is not there we also
94:25 - got a nice information saying that yes
94:28 - has been terminal terminated sorry I did
94:37 - a mistake there what do I do when I get
94:39 - a mistake what's happened here it's
94:44 - waiting for more input I hit the wrong
94:46 - key I hit the backslash key ctrl C will
94:49 - get me out of that what I want is this
94:54 - so another way to kill the process is if
94:58 - you know the process ID issue the kill
95:00 - command ctrl C is the keyboard shortcut
95:04 - the kill command will do it based on
95:08 - process ID let me delete the file so
95:18 - different ways to interact with
95:19 - processes try them you know useful
95:28 - let's say I want to run my yes command
95:32 - and I know I want to run it in the
95:35 - background I don't want to have it in
95:37 - the foreground I don't want to have to
95:38 - suspend and type BG if you want to run a
95:41 - process immediately in the background
95:43 - then add the ampersand character at the
95:46 - end this means run the process and
95:48 - immediately put it into the background
95:50 - so we don't have to control zbg just add
95:54 - the ampersand character and it's running
95:57 - in the background already jobs this it's
96:01 - running PS shows it's running process ID
96:05 - u5 606 the file is 2 gig
96:13 - 2.5 gig and so on so it's getting larger
96:17 - the process is running and we run it in
96:19 - the background using the ampersand
96:21 - character and you can do this for any
96:22 - command
96:23 - all right we're using yes as a simple
96:25 - demo you know since I know the process
96:29 - ID I can kill that now when we run kill
96:35 - it tries to what we say gracefully shut
96:38 - down the process tries to end it
96:40 - normally and it's terminated
96:50 - let's delete the file just to clean up
96:55 - so Q tries to stop the process like if
97:00 - thinkof say we in Windows you try to
97:04 - close a program and it will try and save
97:06 - the file before exits
97:08 - that's what kill does a graceful
97:09 - shutdown but sometimes we can't do that
97:12 - maybe something's not responding so
97:15 - maybe in Windows you try and close a
97:17 - program and it says it's not responding
97:20 - do you want to force a shutdown or
97:22 - stopping so we can do that with kill if
97:27 - we run our process again in the
97:29 - background process five six one eight if
97:33 - something will not stop using Q then you
97:38 - can try even harder using minus nine
97:41 - that really means even if you can't save
97:46 - any information just just stop the
97:48 - process for sure all right so this is
97:50 - just used if if something's not
97:52 - responding even with a normal kill
97:54 - that's not responding kill - no means
97:56 - really try hard to kill it and it
98:00 - usually works so that's useful if
98:02 - something's hung
98:06 - so that killed the process is slightly
98:10 - different than terminating slightly
98:13 - worse than terminating a process so we
98:17 - can interact we saw PS list the
98:20 - processes and only by default shows the
98:24 - processes in my this terminal running by
98:28 - me bash and PS so there's not much
98:30 - interesting there if you want to see
98:32 - more because our operating system is
98:34 - running processes for different users if
98:37 - you want to see them all PS - II will
98:41 - show lots of processes and I'll pipe it
98:42 - into less remember the grip the the
98:44 - vertical bar means take the output of PS
98:47 - - e and send that into the program less
98:52 - and less just shows me the output page
98:54 - by page so it shows me all the processes
98:58 - running on my operating system starting
99:01 - with process ID 1 the initialization
99:03 - process that it starts everything and
99:06 - many operating system processes for
99:10 - starting networking all the different
99:12 - tasks and we scroll down we may see some
99:15 - we recognize there's a MySQL server
99:18 - running Apache web servers running
99:21 - there's processes for that and if we
99:24 - scroll down we get to them you may see
99:26 - Firefox running secure shell server is
99:28 - running on my computer because all of
99:31 - you have logged into my computer so
99:33 - there's a process handling the login and
99:36 - to view the demo we're using software
99:38 - called Tmax so that's running on my
99:41 - computer yours will be different and if
99:44 - we get to the bottom alright PS and
99:46 - lesser running so PS - e shows all
99:51 - processes quit that or if you want even
99:55 - more details PS - f uppercase a there
99:59 - are other ways as well to show
100:01 - pS has many options this shows all the
100:05 - processes but also gives things like who
100:07 - is the user that was running that
100:09 - process the user ID the student user is
100:16 - running these processes the root user is
100:20 - running the instructor user on my
100:22 - computer is running some processes as
100:26 - I'm logged in as the instructor the root
100:28 - user is running some processes there the
100:29 - core operating system PS shows us
100:36 - process information one last way to see
100:40 - process information we can see a
100:41 - real-time feedback is to use top to show
100:44 - the top processes try top this gives us
100:53 - every one second an updated list of the
100:56 - processes plus the top the first five
100:59 - lines show us some summary statistics
101:02 - about the processes on our operating
101:04 - system those that are running or the
101:06 - total number of processes there's one
101:09 - running and there's many sleeping
101:12 - something about the CPU utilization the
101:15 - amount of memory we have 16 gigabytes
101:18 - how much is used the amount a swap space
101:21 - and so on and then the list of processes
101:25 - and usually it's well by default it's
101:27 - sorted by the amount of CPU they're
101:29 - using yours will be slightly different
101:32 - from mine because I'm running some
101:34 - software in the background I'm recording
101:36 - the video and audio and the process
101:38 - sorry it doesn't show here but on yours
101:41 - you will see on the the right side then
101:43 - process name mine's running some
101:45 - recording software so there are many
101:49 - options with top you can change which
101:51 - items you sort by but will not go
101:53 - through them if you want to see the
101:54 - processes interactively use top in
101:58 - Windows this is like what in Windows the
102:03 - task manager you can bring up the task
102:05 - manager and see a similar output
102:09 - q to quit so I'm just showing you how to
102:13 - find this information so that's the main
102:19 - commands we use to interact with
102:20 - processes there are others but that's
102:24 - the most common ones we can we can do
102:32 - this also with processes which start
102:35 - graphical programs so we're doing
102:37 - everything on the command line but from
102:40 - the command line we can start GUI based
102:42 - programs we know that we have Firefox
102:47 - installed the the PDF viewer so we don't
102:53 - have Acrobat it's called events I know
102:55 - that events is the a program that opens
102:57 - PDFs so they are two programs that open
103:01 - up a separate graphical window we can
103:04 - interact with them as processes as well
103:07 - to demonstrate this I need to switch to
103:10 - another window where I'm logged in as
103:11 - instructor on my computer so let's do
103:14 - that
103:21 - I'll just close my instance of Firefox
103:24 - and then we'll start on the command line
103:26 - and to start Firefox we type the command
103:29 - Firefox and opens up the the web browser
103:34 - and note that that process is in the
103:38 - foreground from our terminals
103:40 - perspective we can no longer issue
103:42 - commands Firefox is the process running
103:44 - the foreground I can't do other things
103:47 - while far Firefox is running so that
103:49 - process is in the foreground but I would
103:52 - like to do other things I'd like to have
103:53 - both windows open well we can close it
103:57 - we could interact with it same with any
104:00 - other process I'll control C kills
104:03 - Firefox
104:08 - we can run it in the background by
104:11 - adding ampersand and there was a bit of
104:14 - an error or warning in my case but it is
104:17 - running just to show I can do LS now so
104:20 - I can now run commands on the terminal
104:24 - and at the same time use Firefox okay so
104:31 - this is useful when we have graphical
104:33 - programs started from the terminal we
104:35 - start them in the background so that we
104:37 - actually have both of them running we
104:39 - can bring it back to the foreground and
104:42 - Firefox is still running but I can't
104:46 - interact with it in the shell in the
104:48 - terminal I can suspend it
104:50 - control Z I can now run commands can I
104:55 - use Firefox the process is there but
104:59 - it's suspended or paused and the window
105:03 - manager has shown that it's grayed out
105:05 - because I can't do anything on Firefox
105:07 - now because it's not running it's paused
105:09 - so I can't do anything I'd have to put
105:13 - it into the background if I want to use
105:14 - it at the same time now I can do
105:18 - something
105:22 - so remember the foreground means that
105:25 - the process is running and it's it's got
105:28 - control of the terminal paused or
105:31 - suspended means it's not running but
105:34 - there's some state information stored
105:36 - about it so we can resume later
105:37 - background means it's running but we
105:40 - don't have control of it via the
105:42 - terminal we can run other commands
105:48 - Firefox is running it's also started
105:51 - another process for maybe some plugin
105:53 - for plugins on firefox if we kill the
105:58 - Firefox process ID
106:04 - it kills Firefox it produces some error
106:09 - but let's ignore that it kills its
106:12 - children as well so when we killed
106:14 - Firefox process the children process of
106:17 - Firefox were also killed so we lost that
106:22 - plug-in container as well so we can
106:28 - interact with processes using control C
106:31 - control Z there are some other ones as
106:33 - well F gbg foreground and background
106:37 - jobs PS and the ampersand character to
106:41 - start a process in the background let's
106:48 - look at users on their system Who am I
106:54 - remember Who am I returns the current
106:57 - logged in user the user for this
106:58 - terminal if I run it in a different
107:05 - terminal I'm a different person I'm
107:08 - instructor on this terminal Who am I for
107:10 - this terminal and logged in as the
107:12 - instructor and here the student user so
107:15 - Who am I returns the user what users are
107:21 - on this computer so we know we're logged
107:26 - in a student you can guess as an
107:29 - instructor user which other users are
107:31 - have accounts on these computers
107:35 - can anyone tell me what other users are
107:40 - there well when you have the quiz
107:44 - question how you're going to find the
107:45 - users well there's different ways
107:50 - remember think about your home directory
107:52 - the normal case is each user has a home
107:54 - directory I'm currently in slash home
107:59 - slash student the student users home
108:01 - directory is slash home slash student so
108:04 - we'd expect other users would have slash
108:07 - home slash user name let's look in the
108:10 - slash home directory LS slash home and
108:17 - see what other directories are there and
108:19 - that may tell us about some of the other
108:20 - users and I'll use less because I know
108:24 - there's a long list there and we see
108:30 - there a bunch of users and we guess that
108:33 - these are users because they have home
108:35 - directories and you recognize some other
108:37 - names so that's a quick way to see
108:45 - something about users maybe a more
108:49 - precise way is that the operating system
108:52 - stores a list of users and when a user
108:55 - logs in the operating system needs to
108:58 - check the user name and password so when
109:02 - you log in you use apply your username
109:05 - and password and the operating system
109:07 - checks what you supplied against who's
109:10 - already had a account created so the
109:14 - operating system stores the list of
109:16 - users in a file let's have a look at
109:19 - that for Linux it's common that
109:23 - configuration files for the operating
109:25 - system are stored in the e.t.c directory
109:28 - etc but it's a common place to store
109:31 - config files so use less to look at
109:34 - there's a txt file in there to list the
109:37 - txt file that stores the list of users
109:39 - on this system is passwd short for
109:43 - password because the the usernames
109:45 - usually have passwords associated with
109:48 - so this is a text file that lists all
109:50 - the users and some information about
109:52 - them have a look at it the format is one
110:01 - user per line and on each line for each
110:04 - user will there's some fields separated
110:06 - by the colon character and we'll go
110:11 - through one of the examples the details
110:14 - first we know there are many users here
110:16 - the root user daemon user bin user sis
110:20 - user the root user is the admin so you
110:24 - you can log in as the root user they
110:27 - have a home directory a special home
110:29 - directory it's actually slash root you
110:31 - can do things as of the root user if you
110:33 - know the password the daemon user and
110:38 - many of these others are what we call
110:40 - system users and they're not real or
110:43 - normal users that can login they used to
110:46 - run operating system programs or
110:48 - applications servers usually so normally
110:52 - we don't use these users they're not
110:55 - something we can login as and you may
110:58 - note at the end it says something about
111:00 - no login so it's a special type of
111:01 - system user if we scroll through so
111:10 - system users are for special operating
111:12 - system tasks I think somewhere you'll
111:18 - see MySQL there's a for example there's
111:20 - a system user for running the MySQL
111:22 - database server we don't log in as that
111:24 - user normally it is just for running the
111:27 - server so we want to focus on the normal
111:30 - users there's a root user system users
111:33 - the normal users there is instructor you
111:37 - scroll down you see some they start to
111:40 - recognize ta student and then what I've
111:44 - done as you notice I've set up users for
111:47 - each of us or each of you based upon
111:50 - your name so just some some fake user or
111:52 - user accounts that we can use for
111:53 - testing let's look at the student user
111:57 - the structure of this file is for every
112:00 - line the
112:01 - first field is the username the second
112:04 - field is the password the third field is
112:09 - the user number so we have a name and a
112:11 - number
112:12 - so a unique number users belong to
112:15 - groups and they must be in one group so
112:18 - this is the default group there in the
112:20 - but the group number this information is
112:23 - some human friendly information about
112:27 - the user may be their full name so note
112:29 - well what's different here the s
112:31 - uppercase s this may be displayed on the
112:34 - graphical login when you see your name
112:37 - there note for the named users I haven't
112:40 - given the full name I've just repeated
112:43 - the user name but you could see the full
112:45 - name here the email address the phone
112:48 - number and so on this is the home
112:52 - directory alright slash home slash
112:54 - student and you see most of them are
112:56 - slash home slash username that's the
112:58 - default setup and this is the software
113:01 - that runs when this user logs in and
113:03 - we've said before Bash is the software
113:06 - that interprets the commands on the
113:08 - command line it it understands what you
113:10 - type so that's the normal set up we care
113:15 - about the username and the password well
113:21 - you notice that the password for all the
113:23 - users is X it's not the actual password
113:26 - that X here means the password
113:29 - information is stored in another file
113:31 - all right so it's not actually stored in
113:33 - this file this is the operating system
113:36 - list of users where is the password
113:38 - information stored it's in another file
113:41 - it's called in a shadow file so let's
113:43 - have a look at that quit cue to quit
113:49 - open up the shadow file that stores the
113:55 - password information for those users
113:57 - include the user names and then
113:59 - information about all their passwords
114:02 - and you can see the password of all the
114:06 - other users well no you can alright so
114:11 - the normal user cannot see the password
114:13 - of other users by default the
114:14 - permissions are set up so that you
114:16 - cannot look at this file it is a text
114:19 - file I'll show you later but the normal
114:22 - user the student user in this case
114:24 - cannot look inside this file they can
114:26 - see the set of users in the passwd file
114:29 - but they cannot see the password
114:31 - information in the shadow file that's
114:34 - the security measure to do some access
114:37 - control we can change between users all
114:47 - right so we we do everything as the
114:50 - student user but you may have realized
114:52 - that I've created a separate user
114:54 - account based on your name it's your
114:55 - first name followed by the first letter
114:57 - of your last name and you can log in as
115:01 - that user just for doing some small
115:04 - tasks or demos so to change users we can
115:07 - switch between users using su and I'll
115:20 - just choose a random user from from the
115:23 - list you you switched to you okay type
115:26 - in your name su switches users switches
115:31 - to that user and you need the password
115:33 - for that user and for this I've setup
115:35 - it's the same as your username so I'm
115:43 - now logged in as a different user if I
115:49 - go home
115:50 - CD I'm now in Maya the home directory of
115:54 - this is second use I'm logged in as so
115:56 - now everything I do it I do it as as
115:58 - this named user not as the student user
116:01 - su switches users very simple just note
116:07 - the password was the same as the
116:08 - username just so we can easily switch
116:11 - between different users some of the
116:14 - tasks today I will say use your name
116:16 - and user that is switched to the name
116:19 - the user based on your name not the
116:21 - student user if you want to exit and go
116:27 - back to the other user use exit and now
116:31 - I'm back as the student user so su
116:33 - switches to the name user exit comes
116:36 - back I can switch to the root user or if
116:41 - I just use su switch user on itself it
116:45 - by default goes to the root user the
116:47 - other meaning of su is super user super
116:50 - user is like admin or root user so su
116:53 - and on its own we sometime thinks means
116:55 - switch to super user and our login is
117:04 - the super user which is actually named
117:06 - the root user
117:10 - omi root CD note their home directory
117:14 - slightly different their home directory
117:15 - is just slash root of course you need
117:20 - the password to switch to other users
117:22 - and you don't have the root password so
117:24 - you can't switch to the root user
117:27 - probably wouldn't be too hard to guess
117:29 - it but there's no need for and as the
117:35 - root user I can do anything including
117:39 - looking the shadow file so the shadow
117:44 - file was the one we said stores the
117:46 - password information and we see it's
117:50 - similar as a username and then some
117:52 - information about the password let's go
117:54 - down to our student user and look at the
117:58 - password information the password
118:02 - information is this long field the
118:05 - numbers at the end are something like
118:07 - when you last change your password when
118:09 - you need to read change your password in
118:13 - the future but this is the long field
118:15 - which is the password information you
118:18 - notice it's not the password we know the
118:21 - password for student is student this is
118:22 - not the password we don't in fact we
118:26 - don't encrypt that the password we do
118:29 - something which has
118:30 - similar purpose we calculate the hash of
118:33 - the password and we'll cover this in the
118:35 - security and cryptography course what we
118:37 - do is we take the password we attach
118:40 - another usually random number this value
118:44 - here between the two dollar signs it's
118:48 - called the salt we take the password we
118:52 - give us some salt to make it more tasty
118:54 - and then we hash that salted password we
118:58 - use a hash algorithm hash algorithm
118:59 - number six and the hash takes that input
119:03 - and generates a basically a random
119:05 - output that is for that particular input
119:08 - and that random hash value is here so
119:12 - the idea is the password information the
119:16 - password itself is not stored but a hash
119:18 - of the password is stored such that even
119:22 - though we can see this file now you
119:23 - can't see the password and to find the
119:27 - password given this hash value is
119:29 - practically impossible because the
119:31 - cryptographic nature of the hash
119:33 - algorithm is that if you have the hash
119:35 - value as output it's practically
119:38 - impossible to take a find the original
119:39 - input okay so that's a security measure
119:43 - so that no one can see the actual
119:45 - password even if they can see this file
119:47 - the other security measure is that the
119:49 - normal users can't even see this file
119:53 - when a student logs in they supply their
119:56 - password the system calculates the hash
119:59 - of the password and compares against
120:01 - this value and again another property of
120:04 - the hash function the hash of two inputs
120:07 - which are the same will produce the same
120:08 - output if they match the user logs in we
120:12 - will see the details of that in
120:13 - authentication in security and crypto so
120:18 - you can see the hash be can't see the
120:19 - password Q to quit exit out
120:31 - last last command when we talk about
120:34 - users and permissions so we saw that
120:36 - some users cannot do some things that is
120:39 - the the student user couldn't look at
120:41 - the shadow file will return later after
120:43 - the break about permissions on files but
120:48 - similarly some users cannot run programs
120:51 - right some programs are protected
120:54 - especially programs that give you
120:56 - special privileges or need special
120:58 - privileges on the operating system like
120:59 - network type programs
121:01 - I'll just switched my other terminal
121:04 - because I need to be logged in as the
121:05 - instructor or and not to a different
121:09 - user but you can do it as the student
121:12 - user there's a program called IP traffic
121:16 - it shows us the Internet Protocol
121:20 - traffic IP traffic it's a networking
121:22 - program while using later labs just it
121:24 - shows their packets being sent and
121:26 - received most networking programs or
121:31 - some of them are protected not any user
121:33 - can run them so when I try to run IP
121:35 - trap
121:37 - it says this program can only be run by
121:40 - the system admin we don't have
121:42 - permissions to run it but I would like
121:45 - to allow everyone to run it so that we
121:47 - can actually see the network traffic so
121:51 - the common way to do that is to set up
121:53 - the computer so that some programs the
121:57 - student user and the instructor user can
121:59 - run these special programs and I've set
122:01 - that up what we want to do is we want to
122:04 - run this program as the system
122:07 - administrator the other name of the
122:09 - system administrator is root or another
122:12 - name is the super user so we'd like to
122:16 - do this program as the super user do IP
122:20 - TRAF
122:21 - as a super user super user do IP TRAF
122:26 - and you've heard of sudo i think before
122:30 - the idea to do this program run this
122:33 - program as a different user as a super
122:36 - user by default we can actually switch
122:38 - to a different user if we want and that
122:40 - tries to run this program as the super
122:42 - user and our
122:44 - set up these computers so that you're
122:46 - allowed to do that it asks for your
122:48 - password you should be doing this as
122:52 - student not as your named user I'm doing
122:56 - it his instructor I type in my
122:57 - instructor password and I see that it
123:00 - returns an error in my case because I've
123:02 - zoomed in too far
123:03 - try it again okay so sudo followed by
123:08 - the command tries to execute that
123:10 - command as the super user now it needs
123:14 - to be set up in advance as to which
123:16 - commands you can try you can't do
123:18 - anything with sudo you can try it will
123:20 - return an error if you try other things
123:21 - and just to demonstrate IP trapping just
123:26 - shows some statistics about packets
123:28 - being sent and received there's not much
123:30 - happening on my computer just shows
123:38 - packets being sent and received on my
123:39 - computer so sudo allows us to run a
123:44 - command as the super user as the the
123:46 - root user when it's protected command
123:49 - we'll use that later in some some
123:51 - networking commands if it doesn't if you
123:54 - don't have permissions try sudo first X
123:57 - to exit so we can switch users we can
124:11 - run commands as super user using sudo
124:13 - we've seen a little bit about where
124:14 - passwords and user information is stored
124:17 - later we'll see permissions on files
124:26 - we've seen already that some things that
124:29 - we we can't access some files we can't
124:32 - access the student user couldn't see the
124:34 - shadow file that said permission denied
124:35 - if we try to run some programs that may
124:38 - be permission denied so there are some
124:40 - permissions on files in general every
124:43 - file and a directory is a special case
124:46 - of a file every file has some ownership
124:49 - the person who owns it and some
124:52 - permissions what are you allowed to do
124:54 - with it so that's what we want to look
124:56 - at briefly here
125:02 - I'll login as a named user and I suggest
125:05 - you do that too so whereas one of our
125:07 - name users note that when you log in
125:19 - you're in the student directory but
125:22 - that's not my home I've logged in as a
125:24 - name user so I want to go home CD and
125:27 - now I'm in my home so let's create a
125:32 - file just to demonstrate here echo some
125:37 - something into my file and just be to
125:45 - make a clear Who am I and let's look at
125:50 - the details of this file so I have
125:58 - created a file abc.txt when we see the
126:01 - details we see the file name the date
126:03 - and time and that this column tells us
126:08 - the user that owns the file right every
126:12 - file has a user that owns it belongs to
126:14 - one person so by default when you're
126:18 - logged in as a user when you create a
126:19 - file you own that file we'll see later
126:22 - we can change who owns it but by default
126:25 - we own that file the second column and
126:28 - yours are we different the second column
126:31 - shows the group that owns the file so in
126:34 - fact each file has a user an individual
126:37 - user that owns it as well as a group
126:40 - that owns it and a group as you may
126:44 - guess contains a set of users one or
126:47 - more users and when we say the group
126:50 - owns it it means anyone in that group
126:52 - can do some things some special things
126:54 - with it
126:55 - so with respect to this file we say
126:58 - there's one user that owns it there's
127:01 - one group of users that own it and then
127:05 - there's all the the rest of the world
127:07 - everyone else the others so on our
127:10 - computers we saw
127:11 - there are what hundred plus users for
127:15 - this file one of those users owns it
127:17 - some users are in the group blue one
127:20 - that own it and then as there all the
127:22 - other users the other 99 users or
127:25 - however many there are
127:26 - so we'll distinguish between three sets
127:29 - of users the user that owns the group
127:33 - that owns and others others are not the
127:36 - user that owns and not in the group user
127:39 - group others yugioh we'll come back to
127:43 - those letters so the ownership for those
127:49 - three sets of users user group others
127:53 - they can do different things potentially
127:56 - with the file what things can they do
127:58 - with a file well there are three main
128:00 - operations in Linux we can read a file
128:04 - means opener and look at the contents we
128:07 - can write to the file which means modify
128:10 - the contents delete modifying deleting
128:14 - is just the same as modify so write to a
128:17 - file means change or edit and in some
128:20 - cases we may want to execute files if
128:23 - it's a program we make it executable so
128:27 - we can read write and execute and the
128:29 - three letters are W and X X for execute
128:34 - so what can our user do with this file
128:38 - how do we know these nine characters
128:41 - tell us have a look the first character
128:45 - tells us if it's a file or directory'
128:47 - this dash here says this is a file not a
128:49 - directory the next nine we split them
128:53 - into three groups of three so let's look
128:56 - at them these three characters just zoom
129:04 - in so everyone can see W dash the three
129:11 - characters in the order of read write
129:13 - execute read write execute so these
129:16 - three characters belong as specified the
129:18 - permissions of the user that owns a file
129:20 - so the use of the owns the file what can
129:24 - they do with it
129:25 - they can read it because there's an R
129:27 - there they can write to it because of
129:30 - the W they cannot execute because
129:33 - there's no X if they're if they're
129:35 - allowed to execute there'll be an X
129:37 - there not an a - so our user can read
129:40 - and write the file but they cannot
129:42 - execute that's what this tells us the
129:45 - next three characters are what the group
129:48 - can do with the file
129:49 - anyone in the group blue one is allowed
129:54 - to read the file write the file but not
129:56 - execute the last three characters are
130:00 - what others can do with it others in
130:04 - this case cannot do anything they cannot
130:06 - read write or execute so that's how to
130:10 - read the permissions you may see an R
130:15 - here I think in your case write the
130:19 - default in your case may be an art that
130:21 - is others can read it let's try zoom out
130:42 - here this example the reason I had
130:45 - didn't have an R here's because that
130:48 - fire was already created and modified
130:49 - before the file X Y Zed read and write
130:53 - the user can read and write the group
130:55 - can read and write the others can read
130:57 - only meaning the others can look inside
130:59 - the file but they can't modify it they
131:02 - can't write it no one can execute so
131:05 - that's how to read those 9 characters if
131:11 - you can't remember they're on the
131:13 - reference card in front of you ok it
131:14 - takes some time to practice and remember
131:16 - them so we'll have some practice now
131:19 - what we'd like to do is to change the
131:21 - values so let's try Who am I
131:29 - first what groups am I in type groups
131:32 - this tells me the groups I'm in
131:36 - so we see I'm in a group that is based
131:39 - on my username that's usually the
131:41 - default group everyone's usually in a
131:43 - group which has the same name as their
131:45 - username and in these computers I've set
131:47 - up so that this user is in blue one
131:49 - group you will see hopefully if you've
131:52 - logged in as your user you're in a
131:54 - colored group as well the color based
131:56 - upon the desk and probably the color
131:59 - followed by the number five section five
132:02 - so these are the groups I'm in if you
132:06 - want to see what people are in different
132:09 - groups there's a file in the e.t.c
132:13 - directory called group and you can look
132:21 - in that and at least all the groups on
132:31 - the system and you scroll down and you
132:34 - see who's in red blue one and at least
132:37 - the the users in that group so there's
132:40 - one way to see who's in a particular
132:41 - group that's similar the passwd file it
132:47 - shows the but this shows information
132:49 - about the groups not the individual
132:51 - users EDC slash group the command group
132:55 - shows what you're in so our file X Y Z
133:05 - dot txt I would like to be able to
133:07 - change I would like to be able to change
133:12 - who owns the file the user their owns
133:16 - and the group that owns let's change the
133:20 - group there are different ways to do it
133:24 - CH own chain that change the ownership
133:28 - CH own change ownership and we take two
133:31 - inputs the the user name the user name
133:34 - that we want to own call on followed by
133:39 - the group don't copy mine use it for
133:43 - yours so maybe you can change it so that
133:46 - previously it was owned by this user I
133:49 - don't want to change that I
133:50 - want the user to be the same but the
133:52 - group was this one I want to change to
133:54 - blue one in my case maybe you change
133:58 - your file to be in your colored group
134:00 - and the file name change the ownership
134:06 - of this file can you see the the group
134:11 - has now changed from the original group
134:13 - to blue one so in fact that changed the
134:16 - group only you could also change the
134:19 - user as well but there may be some
134:20 - restrictions on which users you can
134:22 - change to there's a short way to change
134:29 - groups chgrp change group I've just
134:41 - changed it back to the original group so
134:43 - CH own change the user and the group
134:47 - chgrp change just the group so you can
134:50 - use either let me change it back to blue
135:01 - one in my case so we can change the
135:07 - ownership of files we can also change
135:12 - the permissions on those files and
135:16 - sometimes it's not called permissions
135:19 - it's it's the the modes of which we can
135:21 - access that file there are three modes
135:23 - read write and execute so we can change
135:25 - the mode for the file so the to change
135:28 - the mode CH mo d change chmod and this
135:36 - is a little bit complex but if you
135:38 - remember there are three sets of users
135:41 - the user the owns you the group that
135:45 - owns G others oh and there are three
135:50 - types of modes or permissions
135:52 - read/write/execute rwx so we can add and
135:57 - subtract permissions plus or minus our
136:01 - current file the others can read
136:04 - to file let's change the permissions so
136:07 - others cannot read Oh subtract or revoke
136:12 - the permission to read that file so the
136:16 - syntax here is specify the the set of
136:19 - users and they know either plus or minus
136:22 - usually plus gives the permission
136:25 - - revokes the permission and then what
136:28 - permission in this case read the R's
136:34 - gone I subtracted the ass meaning for
136:40 - the others meaning other people can no
136:41 - longer read this file if you're the user
136:44 - you can read it if you're in the group
136:46 - you can read it but if yours anyone else
136:48 - you cannot read it and you can have
137:02 - other combinations chmod the group
137:04 - don't let the group edit the file group
137:11 - subtract the right permissions now the W
137:17 - has gone here all right so the group can
137:23 - only the group users can only read they
137:25 - cannot write if you want to change that
137:26 - back you can grant permissions or add
137:29 - permissions plus give them a permission
137:35 - to do that and now the W is back CH own
137:42 - changes the user and the group that owns
137:44 - the file chgrp just changes the group
137:49 - chmod changes the permissions and you
137:54 - can set combinations based upon user
137:57 - group and others grant or revoke plus or
138:02 - minus read write execute and with that
138:05 - you can set up what you aim to do to
138:08 - secure the files so this needs practice
138:14 - so what I'll do is just put up a couple
138:15 - of tasks that you can try very simple
138:18 - and just learn some of the syntax for
138:21 - chmod and CH own try some different
138:23 - things do this as your your named user
138:27 - not a student and to test that the
138:31 - permissions do what you expect and the
138:34 - way to test is to get your friend to log
138:36 - into your computer and see if they can
138:38 - read the file so try to set up some
138:41 - permissions so that it protects some of
138:43 - the files to get started what can you do
139:07 - to show the groups you're in your run
139:10 - groups I'll just leave that up there to
139:13 - change the mode chmod to change the
139:15 - owner CH own you can also use CH GRP and
139:19 - some tasks and just so it shows on the
139:23 - screen very easy task but try some
139:28 - others as well and get your friend to
139:30 - test by see if they can access those
139:32 - files get different friends to test one
139:36 - that's in the group and one that's not
139:37 - in your group and see if you can set
139:39 - different things up

Cleaned transcript:

we're going to use the the terminal to issue commands on issue commands to our operating system so that we can do different things and we want to do some very basic things to get started and that includes moving about the file system changing directories creating directories creating new files copying files deleting files and then looking at an editing file so just some very basic things we do on a computer I want to introduce you to the commands we use in Linux on the command line some of you may know them already so it should be easy the first thing to get started we're going to interact with our computer and what we see on the the window is the prompt this is referred to as the prompt is prompting me to issue a command it has some structure which we'll explain as we go through but then when I type something in then press Enter it runs a command on my computer and executes something now one thing that we need to know about is where is that command executed with respect to my computer and where means which directory or folder is executed in so we need to know something about the structure of the folders and directories I will use the word directory some people talk about folders but the directory and in fact the set of directories and files we refer to as the filesystem does anyone use Windows as their main operating system put your hand up it's ok I won't give you a lower grade right so Windows you you use folders and files what is that the topmost directory in windows again Program Files even above Program Files C Drive is if you think of Windows talks in terms of drives and maybe the topmost directory I don't know if it's still like that don't type this this is just a comment but because it's something like that or like that alright so C Drive we can think it's the topmost directory in our file system C is the drive there may be other drives and you can think that this backslash indicates the topmost directory because we have a hierarchy of directories underneath that our sub directories what are some of the sub directories someone said one in Windows program files I don't know I don't have Windows so please tell me what are some other sub directories of the top one in Windows program files user or user and settings or something and maybe system in the old days or Windows temp documents or whatever but that you know that there are some common directories from the topmost directory and under them a further directories so we say we have a hierarchy and there's the topmost directory and sub directories and so on in UNIX type operating systems UNIX type refers to the class included in Linux and UNIX operating systems there are many variations Mac OS X is a UNIX operating system Linux that were using is a UNIX type operating system in that there's also a hierarchy the topmost directory is represented by the character forward slash instead of back slash its forward slash the separator of directories is a forward slash this topmost directory we give a special name we refer to it as the root directory the root of our file system or the root of the tree and under that our sub directories and so on when we run a command on the command line it's run in some some directory which directory to find out we can check the present working directory so you can try the commands now follow along the present working directory PWD shows us what is what directory on Kara liyan and the answer from the from the root directory the forward slash there's a subdirectory called home and from that there's another subdirectory called student so we can think in that the hierarchy or in the file system I'm in the slash home slash student directory currently together this is called a path the path in the file system I think you know this already okay so syntax may be slightly different but you know the concepts but pwt tells you where you currently are the first thing we want to do is move between directories change directories we use CD to do that CD will change between directories where we usually provide where do we want to go maybe I want to go into the /home directory CD slash home what's rattling perfect thank you Sam CD slash home takes me into the /home directory you may guess that it worked there's a hint there but PWD tells me now I'm in the /home directory or CD into the root directory okay the forward slash on its own means the root directory we can't go any higher if we think of that the topmost level and we can go back to the slash home slash student so we can change directories when we specify a parameter here or the option to change a directory into which directory in all of these cases I started with a forward slash this means it's an absolute path absolute means in this case it's relative to the root directory but we don't need to start with a forward slash we can have a relative path let's see what I mean currently I'm in slash home slash student let's go into the root directory and I can change into the home directory I didn't start with a type it again I don't start with a forward slash and now I can change into the the student directory so when we pass a parameter to the CD command if it starts with a slash it means it's from the root directory if it doesn't start with a slash like CD student it means relative to the current directory we were in home we CD into the sub directory apart which is called student so we can move up and down in the hierarchy in fact an easier way to move up there's a special type which is dot dot CD dot dot moves up in the hierarchy I was in slash home slash student I moved up to slash home if I go up again I'm in the root directory so dot dot means upper level from where you currently are how do I go home you don't want to go home yet is that what you're saying oh alright good but if we want to get our home directory of course there are different ways we can type in the specific directory slash home slash student and we're in our home directory and it's common in in our operating system that our operating system supports multiple users one user is called the student user one is called instructor one is and there are some other users on this each computer and those users have their own private directory in the slash home directory so we are logged in as the student user our home is slash home slash student if I just briefly show you I'm currently in this window logged in as the instructor user my home is slash home slash instructor ok different users have different homes same as what is it users and settings or documents and settings or whatever it's called in Windows different users have different directories now as an example let's go back to the root directory a quick way to go home is just type CD with no arguments CD on its own will always take you home another shortcut for the home directory is the tilde character a squiggly line as an example go into the root directory CD tilde also takes me to the home directory so that the squiggly line the tilde character really means your home directory and that can be useful because we can talk about directories relative to our home we'll see in a moment that's a little bit about directories but more importantly what about files and what is inside directories so I'll go home make sure I am there yes we want to see what's inside a directory we want to list the contents of the directory we use LS LS returns what's inside this current directory and in my case it's there are four things code posters as vienen VM and as a hint when it's blue on your window it means those four things those things are a directory not a file normally we talk about files and directories and there are some other special types but we'll deal with files and directories because I've set this up I know that those four items code posters SBN and VM are directories inside your home directory so let's go into one of them maybe the posters directory and we can LS there and we see a set of files and you can guess that they're files right your extension PDF and the fact that they're not blue is that they're files not directories don't always rely on the color coding because different systems may have different colors and also some may be black and white or someone may be colorblind so there's another way to show what is a file and directory we'll see shortly actually we will see now so LS shows lists the contents of a directory we can pass arguments to LS we can not just list the current directory but list a specific directory LS slash lists the contents of the root directory and it shows the in the root directory there are some sub directories called bin home Lib root user and others and some special files that is the like the C Drive directory and some of those directories are common across many different unixlike operating systems here's an example of listing the contents of a directory VM relative to my home directory that tilde or squiggly line means slash home slash student so that's really the same as doing this the tool does just a shortcut there many commands so we've seen PWD CD LS we'll see more many commands have options extra features and I usually specifies using a dash as the option a dash followed by a letter so LS currently it shows the list of files in my directory I'd like to see the file sizes so I want to see the list of files and get the long output I'll use the minus L option LS minus L and now we see that same list of files but we see some more details about each of those files the same way in Windows that you can show the file list in the Explorer as icons or you can show the details I'm not going to explain all of this information today because some of it may be come up later or is not relevant just yet but going backwards say for the biography biographies dot PDF file there's the file name the date and time of the last modification of that file when it was last modified files actually have different time stamps associated with them not just when they were modify but when they were created this is the last modified time what this the size in what the units bytes this is the size in bytes so this file is about six megabytes this PDF the next two going backwards are something about who owns this file because we have multiple users on the computer each file has some ownership one particular user owns that file which user the student user owns the file there's also some ownership e with respect to groups of users not just the individual user but a group of users it turns out in this computer setup that there's also a group called student this number one not relevant it's about links to the file let's ignore it these 10 characters the first character if it's a it's a file if it's the letter D it's a directory we'll see another example in a moment the next ten the lakes nine characters about the permissions on the file can we read write and execute that file and that's related to the users we're not going to cover that today the permissions but just be aware to find the file size and the date and time even the owner use LS L if I LS L meaning upper directory we see that these are have the letter D meaning they had sub directories so that's how we really know it's a directory or file whether that output is a D or a let's go home sometimes I may use clear just to clear out the screen so if things are at the top you don't need to you if you did you fail okay no it's alright I'll just do it so it's a bit clearer on the screen you don't need to because it's sometimes useful to see what you've just done LS there are four directories we know in our home directory in Windows you have hidden files and directories okay some files and directories are not displayed by default though of we refer to as hidden files and directories the same in our Linux operating system we can have hidden files and directories I know you all love security and cryptography and learning about security hidden files are not a security mechanism they hidden from a presentation perspective it's easy to see them to see them use LS a to see all files this shows you the hidden files and directories and if you look closely you'll note that the hidden ones start with a dot so to create a hidden file or directory just create one that starts with a dot dot profile is a hidden file dot bash alias is another hidden file dot cache is a hidden directory in my home directory a shows us all files L gives the output in long format we can combine options sorry that was maybe some people didn't see it LS a L you can do both or as a shortcut just LS al in any order al l a show me the long format output for all phones you can change into those hidden directories just the same as a normal directory I'm gonna keep going with a demo but make sure you ask that the TAS get their attention and ask some questions as we go we'll give some time to have a break a little bit later let's create some things we're in my home directory let's make a directory mkdir and then supply the name of this directory I want to make and let's change into that new directory and let's maybe make some others so mkdir makes a directory we'll make some files shortly we can change in directories doing things on the command line of course you realize we need to type a lot sometimes we'd like to speed things up so there are often keyboard shortcuts that we can take advantage of to speed things up one of them is the autocomplete feature so in my example I've got three sub directories security Steve and test I want to change I know I've got them there I want to change into the test directory so cdrom and I type test but I am what I can do is I can type T and of typing the e I hit the tab key so the tab key hit that see what happens it autocompletes for me so if you start to use this autocomplete you can save on your typing and speed things up if I type cd' I want to go into the security directory I know it starts with an s CD s press tab nothing happens press it again because there are two possible directories that start with S it doesn't autocomplete one of them but if I press tab twice it shows me those two options security or Steve which one do you want I type II press tab again and there's only one unique directory that starts with se security it works on files and directories many things so the tab key on your keyboard is used for autocomplete we can remove directories rmdir RM for remove directory another keyboard shortcut if you want to run a command that you've previously run you can scroll through the previous commands using the arrow keys on your keyboard on your keyboard try the up and down arrow if I press up here Scrolls through the previous commands down takes me back I want to make the directory Steve again done the up and down keys the arrow keys back in my home directory let's remove this directory IT s35 what happened it gave me an error message often when a command runs if it's successful it doesn't print anything on the screen unless there's some output like LS like but CD rmdir and so on here is printed something right I've tried to remove IT s35 but it says that directory is not empty there's something in it rmdir by default will not you let you remove a directory if that directory has something in it so that's just a precaution there if I want to do it there are different ways but I couldn't remove the subdirectories first now so I could remove I will not do it I could remove the directory i TS 3 5 2 s slash security then remove the test directory what's in there let me check to make the example a bit of a little bit more fun I'll make Steve again you can name yours different but in my case I have security Steve and test I want to remove all of them then I can use rmdir now or I can to capture multiple values I can use some expression regular expression and simple ways to use star star means all values that match anything they're all gone I'll make mine again just to illustrate that I've got three directories security Steve and test maybe I just want to remove the s directories security and Steve rmdir s star remove everything that starts with an S we're left just with the test directory so the star this wildcard value can be used in many places where we use files and directories when we list LS when we make things edit files copy files we can use star where necessary before we move on to files one last special directory the current directory if I do LS al notice LS al there's a subdirectory called test it it shows me that there's a directory up so it's a bit strange but a keeps track that up there's a directory above my directories dot dot we know and it shows me dot means this directory dot is a special character that we used to refer to the current directory CD dot just takes you to the same directory that you're currently in though it's not useful there but we'll see in later users the dot refers to the current directory these commands are on the printed reference card in front of you the middle sheet treated on your desk is the commands on going through let me see if I've got it available on the course website the reference sheet you have in front of you printed and you have it in every quiz so you can use that in the quiz we've gone through directory operations special directories some other LS options will now go through some file operations I'm currently in my home directory I already have this IT s35 directory let's go into that and make some files in there there's nothing in there actually there is there's still a test directory let's get rid of that IT s35 in my case is empty doesn't have to be let's deal with files and a very basic thing let's create an empty file an empty file is there's think there's a placeholder for the file there's no content so we can use touch followed by a file name choose any file name touch creates an empty file empty means there's the file system has a record of the file but there no not no data in it and we can check by using LS L the size of the file abc.txt that I created with touch is zero bytes right we don't commonly do that and in this lab but sometimes it's useful to create something for testing purposes we can create files with touch but a better thing to do is to create a text file and use a text editor what's your favorite text editor notepad nice selection notepad any others no pad + + okay any others TextEdit many there's many different text editors nowadays ok no pad comes standard on on Windows but very basic or same on on Ubuntu Linux there are different text editors installed and we can install others but on the command line just to get started today we're going to use one called nano nano you type in Nano and it opens a text editor press Enter Nano and we can do our normal text editing down the bottom of the window are some menu items and the the hat character or the this character means the control key so down the bottom you see if you press ctrlg you'll get the help control X will exit control o right out mean save write the file to disk ctrl o says what's the file name you want to write let's give it a file name you can use a different one my file dot txt be present oh he wrote three line lines it saved three lines on disk so my file is saved there are other options one that we may use briefly today you want a copy and paste normally we don't have the mouse available no we're not rely on the mouse so let's try and do everything with a keyboard for now copy and paste well a simple or a quick way to do with it we can use ctrl K to cut control u to an cut and cut is like paste ctrl K and ctrl ctrl K cuts control U and cuts so that's a quick way and it works on lines there are other ways to do it on on selected text let's make a file which has lots of lines in it right just want a file so that we can use it for testing let's exit doesn't matter what's in your text file I want something with lots of lines in it so that we can use it with some other programs ctrl X to exit it prompts me to save because I've modified the file yes I want to save Y for yes what filename just press Enter I don't want to change the file name now I have a file of 711 bytes let's find a few more statistics about the file we can count the words in my file WC word count it's more than just the words it says there are 42 lines 145 words and 711 characters if I just want to know the number of lines minus L is an option word count minus L my file 42 lines in my file for today if you can't remember the commands then use the reference card printed in front of you over time as you use them you'll start to memorize them but sometimes remembering the options minus L is there a way to show just the number of characters or a number of words well sometimes it's hard to remember that all the detailed options so we can try some help and usually commands have their own manual and we can access the manual using the man can make command the manual page or the man page followed by the command is like showing the help for that command try it man WC this is the help page for the WC command and you can scroll up and down with your keyboard up and down arrows if I want to print the bytes only see the characters M the new lines that is the lines L the words W so I now learn a bunch of options for WC we can scroll up and down press Q to quit this is a special type of text editor to get out of it press Q this is the man page most commands have a have their own man page man LS all the options for the LS command a has many options sometimes I'll ask a quiz question oh say how to do this particular thing where you've used the command but you need to go and find the option to get the very special case read the man page cue to quit let's do some more things on our text files we've created a text file with did a word count let me just clear and show what I have I've got two files one of them is empty my file contains some some content instead of using a text editor to display the file there are some other commands to display a very simple one is called cat cat is not an animal but it is a program that shows the contents of a file it's short for concatenate it simply prints off the contents of the file on the screen cat followed by the file name prints it on the screen you may have noticed in my case because there are lots of lines on that file when I did the cat I missed the first lines so instead of using cat sometimes we can use less less again shows the contents of the file on the screen but page by page and now I can scroll up and down with my arrow keys so it's got the top lines and I scroll down and I get to the bottom of the phone so less is us is slightly more advanced than cat cat just shows it less Joseph but but has paid breaks Q to quit less like the man page Q to quit you wanted to see the start of a file the head of the file head by default shows the first ten lines of the file or the end the tail tail shows the last 10 lines of the file you want to just get the first three lines of the file ed entry mo file or the last five lines you can actually do minus five as a shortcut n3 or simply minus three shows that selection of or that number of lines are the head or tail cat shows the full file less shows the file pagebypage head shows the first n lines tail shows the last n lines the reason we have all these commands on files is because many programs in Linux and UNIX systems are configured via files the operating system configuration is not done in a registry or a separate database but in plain text files and similar for many applications and many programs on the command line use text files to do processing so it's useful to be able to process those text files let's copy some files CP to copy copy my file dot txt new dot txt and we now have a copy of that file copy doesn't have to go to the same directory I can copy my file back a directory and change it the name to another file and if we look in the higher directory we see that new file so copy uses a source and destination the source and destination can you include the the path the directory of the farm what if I want to copy another dot txt into my current directory how would I do that I mean I TS 352 in the higher directory there's a file called another dot txt and i want to copy it into this directory copy another dot txt from the higher directory what's the destination the destination is this directory the shortcut for this directory is dot copy another dot txt from the higher directory into this directory and we now have a copy so be careful or make note that I use the dot there when you redo a copy we must always specify source and destination sometimes we can use the dot to represent this current directory move is similar to copy move new dot txt upper level new dot text is gone from this directory it's now in the higher level directory move moves the file we can move it back I moved from the higher directory new txt into this directory moving the file there's also the same as renaming a file you want to change the name here I simply rename you txt to XYZ dot txt so we can use move to rename note that we can rename files and the names of files in Linux the extension doesn't matter in the examples I've used I've used dot txt because we we knew there were txt files but the extension is not important if I change the name you use a different extension it doesn't change the format of the file X Y Zed is still the same text file as before contain some text I can move X Y Z to X Y Z dot dot it's not a Microsoft Word document is still just a text file extensions are not necessary and are not necessarily interpreted so we can use any extension but it's common sense to or common practice to use an extension that is informative to the user and the last thing we can remove files are M followed by the file name well let's remove all of our text files star dot txt when I say text files I mean those would I've given the extension dot txt RM removes or deletes files there is no recycle bin there is no trash on the command line if you delete a file it's gone so you need to be careful in the graphical interface there is a trash bin but we're not using that when you delete a file here it's no longer available so be careful when you remove files especially if you use a wild card like star RM star delete everything if you have a thousand files in that directory they're all gone sometimes the permissions on directories mean you can't delete everything but you can do some damage if you can delete delete your own files accidentally before we have a break let's do the last few things on files let's find some files on our file system I'll go home clear I'm in my home directory often we want to search for files that is somewhere on my hard drive there's a file that I'm looking for I know the name or the the structure of the name there are different ways to locate files one is using locate locate followed by a file name maybe Wireshark I know there should be some files about Wireshark Wireshark is installed locate may tell me about those and it tells me all the files that have the name Wireshark you know and you you can scroll up and down I will not but it returns a whole set of files the complete path the sub directory and the file name that refers to Wireshark so locate okay if there's no file then it will return nothing then locate I had x1 what IDs 3 5 to locate X Y Z dot dot this is interesting I have a directory called IDs 3 5 2 and I inside that I have a file called X Y Z dot doc if I try to locate X Y Z dot doc it doesn't return an answer locate is a very well locate uses a database of files to find the answer it's very fast to find the answer but the way that it works is that oh maybe the past hour or so the operating system has done a search for all the files and put them in a database but as not up to date recently I've created Xyz dog if I try to locate it it's not currently in the database so locate cannot find that so locate is very quick but doesn't cover all the files so a more powerful command to find files is using find it's more powerful but slightly more complex find the pattern we'll use find specify the directory we want to search in and then the option name because we want to find based upon the name star dot docx so there's three arguments to this find command the directory I want to search in including the sub directories then I say I want to search based upon the file name because actually you can search on other criteria file size creation date permissions and I want to find anything that ends with a dot dot and that finds X Y Zed dot dot so it does an actual search if I want to search for my current directory it's good practice to include the double quotes especially when you use a wildcard there and the star character fine searching through my current directory files with name the end with dot PDF and it shows me all the PDF files what if I want to find all the PDF files on the hard disk fine / name star dot PDF that is search from the root directory and end including all sub directories and you say it may see many results you may also see some errors permission denied Arabs so it searched through the entire harddisk returns all the PDFs but some directories the student user is not allowed to access to do the search through so you'll often see permission denied in there but you have many results we can locate files although it doesn't get the most recent files more powerfully we can find files you think the command find the last way that we've commonly used to search for files is to search for application files or executables before we search for Wireshark and it returned many directories files related to Wireshark but I want to find where is the application Wireshark so there must be a program and executable on my computer that is Wireshark we can use which it's in slash user slash bin LS is also an application it's in slash bin nano is an application so these are the executables the things that are executed when we type the command it's in slash user slash bin bin is short for binary and it's usually it really means the application the program there executable which searches for programs locate and find search for any type of files so I'm back into my home directory let's go into my IT s35 directory what's in there my XYZ dot doc make sure you have a file with a few lines in it doesn't matter what's in it I'll just check my own X Y Zed my file has some text in there one thing that we need to know is how to process text files so we've seen some commands for dealing with text files displaying showing the head the tail word count it's very powerful if on a command line if we can automatically process text files to help configuring our computer so the next thing we're going to do is first search through a text file and one way to search through a text file is called a program called grep and a simple way to use a grep then you specify a pattern what do you want to search for maybe you want to search for the word example in my file and grep will return all of the lines in that file that match that pattern in my file yours may be different so maybe your word you search for can be different depends on what's in your file mine returns three lines inside the file which contain the word example so very simple search through the file return all the lines which contain that pattern we can use wildcards there if we want what did i do there that's a bad example don't use a wildcard there let's avoid that one the grep so what I did there was a mistake for what we want to do grep has a number of options where we can specify regular expressions and use wildcards and other special characters to match different patterns but we will not deal with those right now it's takes some time to look at the syntax so let's simplistik was searching through four particular words in a file for now so grep can search through files we can do an inverted search find all the lines that don't match that word again all the lines the minus v4 inverted is all the lines that don't have that word and it shouldn't show the ones with example so a very quick use of grep to search for a file we'll see some other examples later next thing up until now all of the programs who have been running we've interacted with with those programs by running it and then they usually show something on the screen so grep for example printed out the answer on the screen the screen is how we get the output of this program but in fact we don't have to print it on the screen we can put it inside a file so we're going to look at how we can put the output of a program in a file rather than printing it on the screen and it's quite easy in fact do that again grep I want to search for all the lines in my file which don't contain the word lines if I do that those lines are printed on the screen what I can do is redirect the output of that program using the greater than sign into a file I can name it what I like my output txt ran it see what happens it doesn't print anything on the screen the grep program rum runs but the output of that program is redirected from the screen which is called the standard output the standard location to put the output and is instead sent to into a file now let's look inside our file my out we can use less look inside your file see what you get you see the output of grip so this concept is called redirection we redirect the output of a command to some other location and the very common way we do it is redirect the output of the command from the screen to a file LS we know has LS L as an option so the long output we can LS a particular directory LS L from the root directory we can also recursively LS a recursive LS means show me the contents of that directory and its sub directories and their sub directories and their sub directories it keeps going that's what the uppercase R does with LS let's list all the files on our hard disk it may take some time to list them you see it's going through the hard disk listing all of the files to stop that because I'm too impatient you can try ctrl c ctrl c kills or cancels the the program from running that was LS L are up against our / maybe I want to know all the files on the hard disk instead of showing on the screen put them inside a file now what's happening here are some errors being displayed the files themselves are not being displayed but the error messages are what's happened when a program runs that program produces two types of output the program produces output the standard output from the program that normal output it it it produces when there's no problems but if there are error messages they are also printed on the screen but the error messages are considered separate from the standard output what you see on the screen now are the set of error messages from the command a run with redirection and the greater than sign it only just shows the normal output and puts it into this file the error messages are still printed on the screen the concept and it's on one of the slides on the website the concept is with any command when we run a command there are in fact three ways three interfaces to that command there's the input to the command some commands take you or accept input from you we haven't seen any yet we may see some later some commands we can supply input it's called the standard input then the command runs and the command does something and it produces two type of output the normal output the standard output which is the expected output LS shows a list of files grep shows a list of lines that match some criteria but if there's errors it may also print error messages there's it goes my mouse and that's referred as the standard error so there are three interactions to a command the standard input the standard output and the standard error normally the standard import comes from what we type both the standard output and standard error are printed on the screen after when the command runs that's what normally happens with redirection using the greater than sign the standard input is normal that doesn't change the error messages are still displayed on the terminal but with redirection with a greater than sign these standard output is saved in a file okay so instead of printing on the terminal it prints it into a file so we can look at it later it's very useful to get a record of what's happened you don't want to look at it as it goes you want to look at it later redirect into a file there are different options you can redirect both the standard output and the standard error into a farm note the difference here's the ampersand character and the grade of n with just greater at greater than the standard output is saved to a file but not the arrows with this one both the output and errors are saved into a file and there are other variations one of them the common one we'll use is this just greater than sign run a command don't print the output on the screen print it into a file another one which I don't have on the slides if you use two greater than signs it appends to the file one greater than sign over writes the contents of the file to ads to the end of the existence of the file if it exists so let's try those two commands again the others with the ampersand will not try I think will not use let's try a couple more redirections two files just check that command I run all files dot txt it's only 30 megabytes in size that if we have a quick look at it not all of it of course it's the list of all files and directories on my hard disk except for those which I didn't have permission to look at I'm going to delete that if you create a one delete it so you don't take up space we'll do a few more simple redirections and to do them let's introduce some other commands who are you logged in as if you forget who you are then ask the computer computer Who am I ok Hugh Who am I tells you the current user you're logged in as in my other terminal I'm logged in as the instructor ok there are different users on here we can redirect the output of Who am I into a file all right so instead of printing on the screen it just goes inside that file another command echo echo echoes that string onto this the terminal very simple whatever we type after the echo is printed does nothing other than print on the screen it's like a printf statement in a you know programming language or a print statement so we can echo into a file and if we want to append to a file instead of instead of overwrite it use 2 greater than science name already contained student and now I'm going to append to the end of that hello to greater than signs echoes one of them over writes just to confirm that if you just use a single greater than sign you'll delete what was in the file before so the greater than sign the two greater than Xand there are some other variations are called redirection redirect especially the output to a file next and another new concept is that when we run commands often we'd like to do more complex things than what we've done so far and we can do that by running multiple multiple commands not just one after the other but run a command take the output of that command and use it as input to the next command and this is called a pipe combine multiple commands together using a pipe let's see some examples what's my IP address I told you at the start 10 10.16 dot 201 what's yours do you know the command to find her Who am I tells you who your login is your IP address is which is not the topic for today I think we're may have seen it last semester you may have seen me use I have confident you don't need to remember that yet but it's useful for the example ifconfig shows you details about your interfaces and if you scroll up you'll see your IP address somewhere which interface does it has an IP address for you I don't have scroll on my terminal so I just scroll up here I have conflict I know ETH 010 10.16 dot 201 and I know that's the Internet address I net address I don't want all this other information I just want my IP address so what we can do is maybe try Grip run ifconfig and take the output of i of config and then use that as an input to grip searching for eye net address try that where the way to combine the two commands is this vertical bar which is shift back back thoughts backspace what's that backslash backslash is the key shift backslash this is called the pipe character it means take the output of the first command and use it as input to the next and it returns all lines which were output from ifconfig which match inet addr and we see two there can we improve upon that what if I just want the IP address now let's run I have config again but we can run I have config with a sub option with the specific interface I want this is a little bit outside of the scope today we'll cover later but with I of config at shows I have 88 0 1 2 and ello I'm looking just for eth0 so I have config 88 0 and now grip into I net a DDR the internet address and I get a single line which includes my IP address plus my broadcast address and a network mask I just want that IP address so let's try and do some operations on that single line there's different ways to do it we can take that output and pipe it into another command this other command we can use one is called cut cut takes a string of text and splits it into chunks where we can specify the delimiter and say is the colon character that is the chunks are separated by that character and the chunks actually called fields this is going to take this line of text and cut it up into fields separated by the call on character so this would be field 1 field2 field3 I want field to that's what the minus F does what do we get can we do another cut and just get their IP address let's pipe that into another cut the delimiter what is a space maybe field one now I've extracted my IP address from ifconfig annex and removed all other information there may be better ways to do that but and it's may only work in certain cases but it's an illustration that we can combine multiple commands together using the pipe operator that vertical bar and in doing that I've introduced this new command of text processing called cut and the a simple way used to use cut we specify the thing that separates the fields the delimiter and it can only be a single character and then we specify the fields that we want and cut is given on the Linux reference sheet as well many commands can be combined using the pipe operator as long as one produces output and the other takes some input what's the port number used for a web server remember remember a common quiz question not this week later weeks the port number for web server not 50 stars with an 880 different applications have different port numbers some we won't remember on a Linux operating system there's a file that lists the set of port numbers it's in the EDC directory and the file is called services again this is outside of the scope for today but we'll use it as the example we can see the port numbers of different services secure shell servers use port 22 HTTP if you scroll down uses port 80 and others queue to quit maybe we can search through rather than having to browse through let's look for all the lines that contain HTTP and we get well we get a few extra lines that we don't really want here if we want to filter out we can actually specify this specific word of HTTP a gets rid of some and then we could actually we don't even need the word we could type that into a a cut and get rid of the comments for example separate the fields by the hash character grabbing only the first field maybe you want to sort them so all I'm doing is building up one larger command by combining them a smaller ones with pipe operations sort the output HDTV all becomes before HTTP maybe we just want to cut and get rid of everything before the after the slash so just another example of building up and getting information from a text file especially using pipe grep cut sort and some of the other text operation commands can be used in the same manner last week we introduced some some basic commands to get around on the in the Linux operating system so we'll continue today and look at some different things look up running processes connecting to other computers and a little bit about permissions who can do what on a on a computer the first thing we'll look at is processes and when we run a command LS for example LS is actually a program on this computer we know that if we use which LS LS is actually an executable installed on the computer in the bin directory so when i type LS that is the program is executed it does something that is at this the the files or the directories and then it stops executing so that's common with most commands it starts the application it does something and it stops we talk about that it starts a software process a process runs does something and then so we want to look at that in a terminal normally we just ran one process at a time I type ls' I press Enter LS execute the process runs stops then I do another command so just sequential we can do more complex than that we can run some processes leave them running and then run some other processes so we'll introduce how to do that the concept is that we can have one process that we can run and interact with by typing things in and then other processes we say are running in the background they're running but we don't interact with them so let's see how we do that and give some examples of why it's useful first let's see one of our commands we did we did last week LS if we want to list all of our files on our hard disk LS l showed us in the long format and there's a minus r option recursive and we want to list everything on the hard disk so let's list all files in long format recursively starting from the root directory recursively means list the files in that directory and then all of its sub directories and all of its sub directories and so on so essentially lists everything on the hard disk run it see what happens so LS L uppercase R /to mean lists in the root directory and when we run it you see it prints all the files on the hard is there some we can't can't see I want to stop so the process is running all right I can't interact with the terminal I can't run other processes while this one's running it stopped okay now I can run other commands for the next command so that process took a long time or some things we may want to do maybe I run it and I realize I'm not so patient so I run it again how do I stop it before it finishes one way is ctrl C so you don't see the command oppressed but note down here it showed I press control C character there know the two keys so that stops it but that's what we say you stops or cancels or process and sometimes we say we kill the process so we talked about the process was running to stop it before it completes normally controlc will do that could cancel the process so that's useful when you have something that you cease going to run for a long time and you realize you don't want to wait for the end or if you've done something wrong or done typed in the wrong command and it's sitting there waiting for input you've got nothing no idea what to do then ctrl C will cancel or kill that process and you can return to the terminal you need to interact just to show that because doing that that to demonstrate that we need a process that will run a long time the LS minus LR does run for a long time let's find another process just for the demonstration I'll just clear that try yes what does yes do yes Prince Weis forever this process will run for a long time it will run until the computer shuts down so it's just for testing all right so just Prince Weis forever so how how do we stop it well we can control CD to cancel or kill the process so we'll just use yes just as an easy demo of manipulating processes we can so when the program runs when I run yes it's running I can kill or cancel the process with control C and it and the operating system stops the process and deletes any information about it but we can also pause the process or suspend the process put it to sleep and to put a process to sleep suspend control Z control see kills control Zed suspends or puts it to sleep that is the operating system still has some information about this process in memory it's just not executing at this stage it stopped it says on that command line it's not running it but note with it suspended we can still interact with the terminal we would like to us maybe if it's pause to restart to resume so what we can do to see the set of processes that are stopped or paused from this bash shell they referred to as jobs what jobs are paused if we type jobs it says the jobs that are proposed or suspended or stopped at this stage yes he's stopped and it's job number one so that's a paused process we can bring it back and start it again and we say that there's always one process that can run it with interactivity with the terminal and we say that process is in the foreground so to bring that process back we can say foreground followed by the job number is job number one fg1 or if you just type FG on its own it will still work because it brings the most recent one pause back but FG one will bring our process yes back to the foreground that is it's running again controlz we'll stop it again and we see it's listed as the jobs foreground we'll bring it back FG followed by the number or if you want the most recent one just FG it's now in the foreground a process in the foreground when I do something on the terminal I'm interacting with that process in the foreground alright there's nothing to interact with this program it just prints on the screen so I can't run other programs at the moment we can control seed kill the process there's no jobs suspended now so jobs list those that have been suspended or stopped FGM brings can you be used to bring one that was suspended back to foreground and have it running again so that's useful if we want to pause something and then go do something else in the meantime then come back to that process let's try that in some different ways let's run yes and let's output that to a file remember redirection from last week the greater than sign says instead of print the output of yes on the screen print it inside a file try that then it doesn't take up the screen it's running the process isn't in the foreground I can't do anything I can't issue commands you can try and type but I can't run anything it's running we can suspend it control Z it's stopped just check the file how big is it one of the options for LS if you want humanfriendly h humanfriendly gives the the prefixes its 2.1 gigabytes mine note that what yes does is just prints wise to a file and does as fast as possible so it filled up two gigabytes in those 10 or 20 seconds when I ran it note that it's not getting any bigger that process is suspended it's not running there's some state information about it but it's not running if we want to start it again bring it back to the foreground just check the jobs there's only one I can do FG 1 to bring job number 1 back to the foreground and it's running again I'll suspend it again and look at the file size mine's now up to 2 point 6 gigabytes okay so that just illustrates that something was added to the file then it started again it's suspended so it's not doing anything at this stage and we says it's stopped what we can do is take that process instead of having a paused have it run but have it run in the background we say have it run such that it's executing but we can still interact with the terminal and to put a process into the background we use bheegi bheegi followed by the process number or simply BG because there's only 1 to 1 job to deal with BG puts that process into the background let's check the jobs so now that job yes redirect to the app dot txt file is running and let's check our file size mine's 4.7 gigabytes if I check again it's now five point two gigabytes all right so just to illustrate that it is running now but I can still interact with the terminal because that process we say is in the background and we can have as many processes as we like running in the background how do I stop it I'm gonna fill up the hard disk soon so how do I stop my my yes process we could bring it back to the foreground it's in the background from running to bring it back to the foreground simply FG or FG followed by the number there's only one so f G's fun it's running again and now it's in the foreground and I can interact with it by the terminal the commands I issue affect that process so I can control C to kill the process look at the files eyes there's no jobs running now and that that process is stopped the files not getting any better it's gone so really three states of our process the process is in the foreground it's running and in the foreground means that when we interact with it via the terminal when we issue commands it's interacting with that process in the foreground the process can be paused or suspended with controlz means it's not running but there's still some the operating system stores some information about the process so we can resume if we like and the third state is the processes in the background it is running but we cannot interact with it via the terminal it's running in the background we say let's delete that file so I don't fill up my hard disk and I suggest you do the same let's do similar again but we'll introduce different ways to do that yes redirect to our file it's running I'll control Z just pause it BG puts it into the background so it's running again it's a gigabyte it's 1.5 gigabytes it's 2 gigabytes so it's running there in the background so that's common if you start a process normally and then you realize let's put it in the background let's have it running but but in the background then a quick way to do that controls it suspends and then BG puts it into the background so it's still running you want to back foreground and it's back back to the background controlz DPG so we usually combine those two controls edge followed by BG puts it into the background it's getting big the file we said to stop the process to kill it or cancel we use controlc but there's another way so we see the jobs that yes program is running we can also see the processes PS lists the processes a little bit more detail it's the processes that you you're running in this terminal and there are three listed so this program PS runs a process that tells us what processes are running which processes did it list it listed itself that is when it runs it records it eat itself is a process running PS yes is a process that our operating system is running the program that we've got running and bash bash is the software that interprets your commands on the command line that's the shell software we call it the bourneagain shell it's the it handles the the commands that we can issue so you always see bash there as the output you almost always see PS and you may see other processes that you've got running in the background like yes in this case it tells us something about how long it's running and more importantly or useful for now is the process ID the operating system assigns a process ID we know yes has the process ID five five seven five how BIG's my file only 19 gig so we better stop it rather than bring it back to the foreground we can kill the process without ctrl C but using Q followed by the process ID so that's why we use PS there to learn the process ID and now q five five seven five make sure you choose the correct process ID yours will be different than mine PS shows that yes is not there we also got a nice information saying that yes has been terminal terminated sorry I did a mistake there what do I do when I get a mistake what's happened here it's waiting for more input I hit the wrong key I hit the backslash key ctrl C will get me out of that what I want is this so another way to kill the process is if you know the process ID issue the kill command ctrl C is the keyboard shortcut the kill command will do it based on process ID let me delete the file so different ways to interact with processes try them you know useful let's say I want to run my yes command and I know I want to run it in the background I don't want to have it in the foreground I don't want to have to suspend and type BG if you want to run a process immediately in the background then add the ampersand character at the end this means run the process and immediately put it into the background so we don't have to control zbg just add the ampersand character and it's running in the background already jobs this it's running PS shows it's running process ID u5 606 the file is 2 gig 2.5 gig and so on so it's getting larger the process is running and we run it in the background using the ampersand character and you can do this for any command all right we're using yes as a simple demo you know since I know the process ID I can kill that now when we run kill it tries to what we say gracefully shut down the process tries to end it normally and it's terminated let's delete the file just to clean up so Q tries to stop the process like if thinkof say we in Windows you try to close a program and it will try and save the file before exits that's what kill does a graceful shutdown but sometimes we can't do that maybe something's not responding so maybe in Windows you try and close a program and it says it's not responding do you want to force a shutdown or stopping so we can do that with kill if we run our process again in the background process five six one eight if something will not stop using Q then you can try even harder using minus nine that really means even if you can't save any information just just stop the process for sure all right so this is just used if if something's not responding even with a normal kill that's not responding kill no means really try hard to kill it and it usually works so that's useful if something's hung so that killed the process is slightly different than terminating slightly worse than terminating a process so we can interact we saw PS list the processes and only by default shows the processes in my this terminal running by me bash and PS so there's not much interesting there if you want to see more because our operating system is running processes for different users if you want to see them all PS II will show lots of processes and I'll pipe it into less remember the grip the the vertical bar means take the output of PS e and send that into the program less and less just shows me the output page by page so it shows me all the processes running on my operating system starting with process ID 1 the initialization process that it starts everything and many operating system processes for starting networking all the different tasks and we scroll down we may see some we recognize there's a MySQL server running Apache web servers running there's processes for that and if we scroll down we get to them you may see Firefox running secure shell server is running on my computer because all of you have logged into my computer so there's a process handling the login and to view the demo we're using software called Tmax so that's running on my computer yours will be different and if we get to the bottom alright PS and lesser running so PS e shows all processes quit that or if you want even more details PS f uppercase a there are other ways as well to show pS has many options this shows all the processes but also gives things like who is the user that was running that process the user ID the student user is running these processes the root user is running the instructor user on my computer is running some processes as I'm logged in as the instructor the root user is running some processes there the core operating system PS shows us process information one last way to see process information we can see a realtime feedback is to use top to show the top processes try top this gives us every one second an updated list of the processes plus the top the first five lines show us some summary statistics about the processes on our operating system those that are running or the total number of processes there's one running and there's many sleeping something about the CPU utilization the amount of memory we have 16 gigabytes how much is used the amount a swap space and so on and then the list of processes and usually it's well by default it's sorted by the amount of CPU they're using yours will be slightly different from mine because I'm running some software in the background I'm recording the video and audio and the process sorry it doesn't show here but on yours you will see on the the right side then process name mine's running some recording software so there are many options with top you can change which items you sort by but will not go through them if you want to see the processes interactively use top in Windows this is like what in Windows the task manager you can bring up the task manager and see a similar output q to quit so I'm just showing you how to find this information so that's the main commands we use to interact with processes there are others but that's the most common ones we can we can do this also with processes which start graphical programs so we're doing everything on the command line but from the command line we can start GUI based programs we know that we have Firefox installed the the PDF viewer so we don't have Acrobat it's called events I know that events is the a program that opens PDFs so they are two programs that open up a separate graphical window we can interact with them as processes as well to demonstrate this I need to switch to another window where I'm logged in as instructor on my computer so let's do that I'll just close my instance of Firefox and then we'll start on the command line and to start Firefox we type the command Firefox and opens up the the web browser and note that that process is in the foreground from our terminals perspective we can no longer issue commands Firefox is the process running the foreground I can't do other things while far Firefox is running so that process is in the foreground but I would like to do other things I'd like to have both windows open well we can close it we could interact with it same with any other process I'll control C kills Firefox we can run it in the background by adding ampersand and there was a bit of an error or warning in my case but it is running just to show I can do LS now so I can now run commands on the terminal and at the same time use Firefox okay so this is useful when we have graphical programs started from the terminal we start them in the background so that we actually have both of them running we can bring it back to the foreground and Firefox is still running but I can't interact with it in the shell in the terminal I can suspend it control Z I can now run commands can I use Firefox the process is there but it's suspended or paused and the window manager has shown that it's grayed out because I can't do anything on Firefox now because it's not running it's paused so I can't do anything I'd have to put it into the background if I want to use it at the same time now I can do something so remember the foreground means that the process is running and it's it's got control of the terminal paused or suspended means it's not running but there's some state information stored about it so we can resume later background means it's running but we don't have control of it via the terminal we can run other commands Firefox is running it's also started another process for maybe some plugin for plugins on firefox if we kill the Firefox process ID it kills Firefox it produces some error but let's ignore that it kills its children as well so when we killed Firefox process the children process of Firefox were also killed so we lost that plugin container as well so we can interact with processes using control C control Z there are some other ones as well F gbg foreground and background jobs PS and the ampersand character to start a process in the background let's look at users on their system Who am I remember Who am I returns the current logged in user the user for this terminal if I run it in a different terminal I'm a different person I'm instructor on this terminal Who am I for this terminal and logged in as the instructor and here the student user so Who am I returns the user what users are on this computer so we know we're logged in a student you can guess as an instructor user which other users are have accounts on these computers can anyone tell me what other users are there well when you have the quiz question how you're going to find the users well there's different ways remember think about your home directory the normal case is each user has a home directory I'm currently in slash home slash student the student users home directory is slash home slash student so we'd expect other users would have slash home slash user name let's look in the slash home directory LS slash home and see what other directories are there and that may tell us about some of the other users and I'll use less because I know there's a long list there and we see there a bunch of users and we guess that these are users because they have home directories and you recognize some other names so that's a quick way to see something about users maybe a more precise way is that the operating system stores a list of users and when a user logs in the operating system needs to check the user name and password so when you log in you use apply your username and password and the operating system checks what you supplied against who's already had a account created so the operating system stores the list of users in a file let's have a look at that for Linux it's common that configuration files for the operating system are stored in the e.t.c directory etc but it's a common place to store config files so use less to look at there's a txt file in there to list the txt file that stores the list of users on this system is passwd short for password because the the usernames usually have passwords associated with so this is a text file that lists all the users and some information about them have a look at it the format is one user per line and on each line for each user will there's some fields separated by the colon character and we'll go through one of the examples the details first we know there are many users here the root user daemon user bin user sis user the root user is the admin so you you can log in as the root user they have a home directory a special home directory it's actually slash root you can do things as of the root user if you know the password the daemon user and many of these others are what we call system users and they're not real or normal users that can login they used to run operating system programs or applications servers usually so normally we don't use these users they're not something we can login as and you may note at the end it says something about no login so it's a special type of system user if we scroll through so system users are for special operating system tasks I think somewhere you'll see MySQL there's a for example there's a system user for running the MySQL database server we don't log in as that user normally it is just for running the server so we want to focus on the normal users there's a root user system users the normal users there is instructor you scroll down you see some they start to recognize ta student and then what I've done as you notice I've set up users for each of us or each of you based upon your name so just some some fake user or user accounts that we can use for testing let's look at the student user the structure of this file is for every line the first field is the username the second field is the password the third field is the user number so we have a name and a number so a unique number users belong to groups and they must be in one group so this is the default group there in the but the group number this information is some human friendly information about the user may be their full name so note well what's different here the s uppercase s this may be displayed on the graphical login when you see your name there note for the named users I haven't given the full name I've just repeated the user name but you could see the full name here the email address the phone number and so on this is the home directory alright slash home slash student and you see most of them are slash home slash username that's the default setup and this is the software that runs when this user logs in and we've said before Bash is the software that interprets the commands on the command line it it understands what you type so that's the normal set up we care about the username and the password well you notice that the password for all the users is X it's not the actual password that X here means the password information is stored in another file all right so it's not actually stored in this file this is the operating system list of users where is the password information stored it's in another file it's called in a shadow file so let's have a look at that quit cue to quit open up the shadow file that stores the password information for those users include the user names and then information about all their passwords and you can see the password of all the other users well no you can alright so the normal user cannot see the password of other users by default the permissions are set up so that you cannot look at this file it is a text file I'll show you later but the normal user the student user in this case cannot look inside this file they can see the set of users in the passwd file but they cannot see the password information in the shadow file that's the security measure to do some access control we can change between users all right so we we do everything as the student user but you may have realized that I've created a separate user account based on your name it's your first name followed by the first letter of your last name and you can log in as that user just for doing some small tasks or demos so to change users we can switch between users using su and I'll just choose a random user from from the list you you switched to you okay type in your name su switches users switches to that user and you need the password for that user and for this I've setup it's the same as your username so I'm now logged in as a different user if I go home CD I'm now in Maya the home directory of this is second use I'm logged in as so now everything I do it I do it as as this named user not as the student user su switches users very simple just note the password was the same as the username just so we can easily switch between different users some of the tasks today I will say use your name and user that is switched to the name the user based on your name not the student user if you want to exit and go back to the other user use exit and now I'm back as the student user so su switches to the name user exit comes back I can switch to the root user or if I just use su switch user on itself it by default goes to the root user the other meaning of su is super user super user is like admin or root user so su and on its own we sometime thinks means switch to super user and our login is the super user which is actually named the root user omi root CD note their home directory slightly different their home directory is just slash root of course you need the password to switch to other users and you don't have the root password so you can't switch to the root user probably wouldn't be too hard to guess it but there's no need for and as the root user I can do anything including looking the shadow file so the shadow file was the one we said stores the password information and we see it's similar as a username and then some information about the password let's go down to our student user and look at the password information the password information is this long field the numbers at the end are something like when you last change your password when you need to read change your password in the future but this is the long field which is the password information you notice it's not the password we know the password for student is student this is not the password we don't in fact we don't encrypt that the password we do something which has similar purpose we calculate the hash of the password and we'll cover this in the security and cryptography course what we do is we take the password we attach another usually random number this value here between the two dollar signs it's called the salt we take the password we give us some salt to make it more tasty and then we hash that salted password we use a hash algorithm hash algorithm number six and the hash takes that input and generates a basically a random output that is for that particular input and that random hash value is here so the idea is the password information the password itself is not stored but a hash of the password is stored such that even though we can see this file now you can't see the password and to find the password given this hash value is practically impossible because the cryptographic nature of the hash algorithm is that if you have the hash value as output it's practically impossible to take a find the original input okay so that's a security measure so that no one can see the actual password even if they can see this file the other security measure is that the normal users can't even see this file when a student logs in they supply their password the system calculates the hash of the password and compares against this value and again another property of the hash function the hash of two inputs which are the same will produce the same output if they match the user logs in we will see the details of that in authentication in security and crypto so you can see the hash be can't see the password Q to quit exit out last last command when we talk about users and permissions so we saw that some users cannot do some things that is the the student user couldn't look at the shadow file will return later after the break about permissions on files but similarly some users cannot run programs right some programs are protected especially programs that give you special privileges or need special privileges on the operating system like network type programs I'll just switched my other terminal because I need to be logged in as the instructor or and not to a different user but you can do it as the student user there's a program called IP traffic it shows us the Internet Protocol traffic IP traffic it's a networking program while using later labs just it shows their packets being sent and received most networking programs or some of them are protected not any user can run them so when I try to run IP trap it says this program can only be run by the system admin we don't have permissions to run it but I would like to allow everyone to run it so that we can actually see the network traffic so the common way to do that is to set up the computer so that some programs the student user and the instructor user can run these special programs and I've set that up what we want to do is we want to run this program as the system administrator the other name of the system administrator is root or another name is the super user so we'd like to do this program as the super user do IP TRAF as a super user super user do IP TRAF and you've heard of sudo i think before the idea to do this program run this program as a different user as a super user by default we can actually switch to a different user if we want and that tries to run this program as the super user and our set up these computers so that you're allowed to do that it asks for your password you should be doing this as student not as your named user I'm doing it his instructor I type in my instructor password and I see that it returns an error in my case because I've zoomed in too far try it again okay so sudo followed by the command tries to execute that command as the super user now it needs to be set up in advance as to which commands you can try you can't do anything with sudo you can try it will return an error if you try other things and just to demonstrate IP trapping just shows some statistics about packets being sent and received there's not much happening on my computer just shows packets being sent and received on my computer so sudo allows us to run a command as the super user as the the root user when it's protected command we'll use that later in some some networking commands if it doesn't if you don't have permissions try sudo first X to exit so we can switch users we can run commands as super user using sudo we've seen a little bit about where passwords and user information is stored later we'll see permissions on files we've seen already that some things that we we can't access some files we can't access the student user couldn't see the shadow file that said permission denied if we try to run some programs that may be permission denied so there are some permissions on files in general every file and a directory is a special case of a file every file has some ownership the person who owns it and some permissions what are you allowed to do with it so that's what we want to look at briefly here I'll login as a named user and I suggest you do that too so whereas one of our name users note that when you log in you're in the student directory but that's not my home I've logged in as a name user so I want to go home CD and now I'm in my home so let's create a file just to demonstrate here echo some something into my file and just be to make a clear Who am I and let's look at the details of this file so I have created a file abc.txt when we see the details we see the file name the date and time and that this column tells us the user that owns the file right every file has a user that owns it belongs to one person so by default when you're logged in as a user when you create a file you own that file we'll see later we can change who owns it but by default we own that file the second column and yours are we different the second column shows the group that owns the file so in fact each file has a user an individual user that owns it as well as a group that owns it and a group as you may guess contains a set of users one or more users and when we say the group owns it it means anyone in that group can do some things some special things with it so with respect to this file we say there's one user that owns it there's one group of users that own it and then there's all the the rest of the world everyone else the others so on our computers we saw there are what hundred plus users for this file one of those users owns it some users are in the group blue one that own it and then as there all the other users the other 99 users or however many there are so we'll distinguish between three sets of users the user that owns the group that owns and others others are not the user that owns and not in the group user group others yugioh we'll come back to those letters so the ownership for those three sets of users user group others they can do different things potentially with the file what things can they do with a file well there are three main operations in Linux we can read a file means opener and look at the contents we can write to the file which means modify the contents delete modifying deleting is just the same as modify so write to a file means change or edit and in some cases we may want to execute files if it's a program we make it executable so we can read write and execute and the three letters are W and X X for execute so what can our user do with this file how do we know these nine characters tell us have a look the first character tells us if it's a file or directory' this dash here says this is a file not a directory the next nine we split them into three groups of three so let's look at them these three characters just zoom in so everyone can see W dash the three characters in the order of read write execute read write execute so these three characters belong as specified the permissions of the user that owns a file so the use of the owns the file what can they do with it they can read it because there's an R there they can write to it because of the W they cannot execute because there's no X if they're if they're allowed to execute there'll be an X there not an a so our user can read and write the file but they cannot execute that's what this tells us the next three characters are what the group can do with the file anyone in the group blue one is allowed to read the file write the file but not execute the last three characters are what others can do with it others in this case cannot do anything they cannot read write or execute so that's how to read the permissions you may see an R here I think in your case write the default in your case may be an art that is others can read it let's try zoom out here this example the reason I had didn't have an R here's because that fire was already created and modified before the file X Y Zed read and write the user can read and write the group can read and write the others can read only meaning the others can look inside the file but they can't modify it they can't write it no one can execute so that's how to read those 9 characters if you can't remember they're on the reference card in front of you ok it takes some time to practice and remember them so we'll have some practice now what we'd like to do is to change the values so let's try Who am I first what groups am I in type groups this tells me the groups I'm in so we see I'm in a group that is based on my username that's usually the default group everyone's usually in a group which has the same name as their username and in these computers I've set up so that this user is in blue one group you will see hopefully if you've logged in as your user you're in a colored group as well the color based upon the desk and probably the color followed by the number five section five so these are the groups I'm in if you want to see what people are in different groups there's a file in the e.t.c directory called group and you can look in that and at least all the groups on the system and you scroll down and you see who's in red blue one and at least the the users in that group so there's one way to see who's in a particular group that's similar the passwd file it shows the but this shows information about the groups not the individual users EDC slash group the command group shows what you're in so our file X Y Z dot txt I would like to be able to change I would like to be able to change who owns the file the user their owns and the group that owns let's change the group there are different ways to do it CH own chain that change the ownership CH own change ownership and we take two inputs the the user name the user name that we want to own call on followed by the group don't copy mine use it for yours so maybe you can change it so that previously it was owned by this user I don't want to change that I want the user to be the same but the group was this one I want to change to blue one in my case maybe you change your file to be in your colored group and the file name change the ownership of this file can you see the the group has now changed from the original group to blue one so in fact that changed the group only you could also change the user as well but there may be some restrictions on which users you can change to there's a short way to change groups chgrp change group I've just changed it back to the original group so CH own change the user and the group chgrp change just the group so you can use either let me change it back to blue one in my case so we can change the ownership of files we can also change the permissions on those files and sometimes it's not called permissions it's it's the the modes of which we can access that file there are three modes read write and execute so we can change the mode for the file so the to change the mode CH mo d change chmod and this is a little bit complex but if you remember there are three sets of users the user the owns you the group that owns G others oh and there are three types of modes or permissions read/write/execute rwx so we can add and subtract permissions plus or minus our current file the others can read to file let's change the permissions so others cannot read Oh subtract or revoke the permission to read that file so the syntax here is specify the the set of users and they know either plus or minus usually plus gives the permission revokes the permission and then what permission in this case read the R's gone I subtracted the ass meaning for the others meaning other people can no longer read this file if you're the user you can read it if you're in the group you can read it but if yours anyone else you cannot read it and you can have other combinations chmod the group don't let the group edit the file group subtract the right permissions now the W has gone here all right so the group can only the group users can only read they cannot write if you want to change that back you can grant permissions or add permissions plus give them a permission to do that and now the W is back CH own changes the user and the group that owns the file chgrp just changes the group chmod changes the permissions and you can set combinations based upon user group and others grant or revoke plus or minus read write execute and with that you can set up what you aim to do to secure the files so this needs practice so what I'll do is just put up a couple of tasks that you can try very simple and just learn some of the syntax for chmod and CH own try some different things do this as your your named user not a student and to test that the permissions do what you expect and the way to test is to get your friend to log into your computer and see if they can read the file so try to set up some permissions so that it protects some of the files to get started what can you do to show the groups you're in your run groups I'll just leave that up there to change the mode chmod to change the owner CH own you can also use CH GRP and some tasks and just so it shows on the screen very easy task but try some others as well and get your friend to test by see if they can access those files get different friends to test one that's in the group and one that's not in your group and see if you can set different things up
