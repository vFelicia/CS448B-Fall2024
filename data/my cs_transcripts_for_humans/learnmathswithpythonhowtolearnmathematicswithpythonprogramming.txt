With timestamps:

00:03 - hello everyone good morning we'd like to
00:06 - welcome you to Pike on a youth all right
00:11 - so we're going to start this morning
00:14 - with Python teaching math very sorry
00:16 - yeah Python meeting teaching math with
00:20 - Python but it's welcome Liam Calloway hi
00:28 - everyone thanks for coming out to my
00:30 - talk today for the first talk of this
00:32 - session so first a little bit a little
00:35 - bit about me who is this guy
00:37 - so hi my name is Liam Calloway I
00:40 - recently graduated from the University
00:42 - of Tasmania I am currently a software
00:45 - developer at wise tech global and in the
00:48 - past I've been a tutor at in CSS the
00:50 - national computer summit computer
00:52 - science Summer School and the University
00:54 - of Tasmania this is my second PyCon and
00:57 - it's my first time ever giving a talk so
01:00 - go easy on me so first of all just
01:03 - that's a bit about me about you show of
01:06 - hands who in this room is currently a
01:08 - student University High School cool and
01:11 - who's a teacher well nice alright so
01:16 - hopefully you find this interesting so
01:19 - I'm gonna start this talk with a brief
01:21 - anecdote as a lot of talks tend to so
01:24 - last year at the University of Tasmania
01:26 - I treated a course called computational
01:28 - science but this course was a bit
01:31 - different because it was actually
01:32 - offered under two separate unit codes
01:34 - with two different titles the other
01:36 - being to scream mathematics with
01:37 - applications so this course covered a
01:41 - lot of sort of first-year maths concepts
01:43 - with set theory camana Toric's number
01:45 - theory but it was also supplemented with
01:48 - practical implement practical
01:49 - implementations taught in Python and the
01:53 - content was exactly the same for both
01:54 - unit codes so this meant that students
01:57 - studying a programming degree were doing
02:00 - the same assessments as students
02:02 - studying a mathematics degree they had
02:04 - lectures for both maths and programming
02:06 - assignments for both maths and
02:08 - programming and tutorials for both maths
02:10 - and programming
02:12 - so I was taking the tutorials and the
02:14 - lab sessions for the programming content
02:16 - but I got to interact with students from
02:18 - both streams and I would get this
02:21 - question a lot from the programming
02:22 - students do I have to learn maths I want
02:26 - to be a programmer maths is hard why do
02:29 - I need to do this maybe not always quite
02:32 - negatively sometimes these questions
02:33 - were genuine coming from like I am
02:36 - scared is this something that I'm gonna
02:38 - need to be good at to be good at my job
02:41 - but then from the math students do I
02:43 - have to learn programming a lot of these
02:45 - mathematic students were taking a
02:47 - programming course for the first time
02:49 - and this was all completely new to them
02:51 - so they answer these questions I would
02:54 - usually say no you don't need to learn
02:56 - these things B should and this course is
03:01 - a pretty good way to get started with it
03:03 - so python is pretty great right we're
03:06 - all here at PyCon I don't think I'm
03:08 - gonna have to try too hard to convince
03:09 - you of that
03:09 - there's lots of really good reasons that
03:11 - Python is a useful language it's very
03:14 - clean and expressive because it's
03:15 - interpreted it makes it highly
03:17 - interactive and it's batteries included
03:19 - we have a lot of useful tools through
03:22 - the standard library and in fact you
03:25 - might be familiar with something called
03:27 - the Zen of Python these are some design
03:29 - principles that Python is built around
03:30 - if you open up a Python interpreter and
03:32 - type import this we get a whole list of
03:35 - these and I've pulled out a few here we
03:37 - have things like beautiful is better
03:39 - than ugly sparse is better than tense
03:41 - but readability counts but the reason
03:44 - why I've selected these here is because
03:46 - I think that these are some good
03:48 - examples for mathematics as well if
03:50 - we're doing a proof we want it to be
03:53 - beautiful and simple
03:54 - rather than ugly and going on for pages
03:56 - and pages but then at the same time we
03:58 - don't want to make things too dense
04:00 - because readability counts also I
04:03 - actually started at an applied
04:04 - mathematics degree rather than pure
04:06 - maths so that last one in practicality
04:08 - beats purity
04:11 - so this leads me to the conjecture that
04:13 - getting hands-on with Python is a great
04:15 - way to learn some maths but also getting
04:19 - hands-on with maps is a great way to
04:21 - learn some Python so for the rest of
04:24 - this talk I'm going to run through some
04:26 - examples that I think illustrate this
04:28 - concept how we can introduce some
04:30 - mathematical concepts alongside
04:32 - programming concepts and use this bridge
04:35 - to sort of extend both topics so first
04:39 - let's talk a little bit about set theory
04:44 - yes this talk will feature memes so what
04:50 - is the set I said is a collection of
04:52 - objects that belong to some group
04:54 - they're defined by certain property or
04:56 - attribute the elements of a set of
04:58 - unordered and we don't care about
04:59 - repetitions within a set in maths we
05:03 - have a few ways of notating out a set we
05:06 - have something called list format where
05:07 - we simply list the values but more
05:10 - commonly we use something called
05:11 - defining property format where we have
05:13 - some function which defines our set and
05:16 - then some range of values that our set
05:19 - can take so that's all well and good how
05:22 - do we do this in Python
05:24 - well Python also gives us a few
05:26 - different ways of defining a set again
05:29 - we can simply list the values using
05:31 - what's called a set literal with the
05:33 - curly braces but we also have something
05:35 - called a set comprehension which just
05:38 - like defining property format allows us
05:40 - to create a set using some generating
05:43 - function and some range of values for
05:45 - that to take so this is a concept that
05:48 - students that maybe have a bit of
05:50 - programming experience before but a new
05:52 - to Python might take them a little bit
05:54 - to wrap their head around they used to
05:55 - the sort of traditional looping
05:56 - structure but for mathematics students
05:59 - they're already used to this kind of
06:00 - notation and we actually found that a
06:02 - lot of them pick up this idea a lot
06:04 - quicker so that's quite neat it also in
06:08 - Python if you want to create an empty
06:09 - set unfortunately you can't just use the
06:11 - empty set literal like that because
06:13 - Python is going to interpret that as a
06:14 - dictionary so you have to use this set
06:17 - constructor instead so now that we've
06:20 - got some sets what can we do with them
06:21 - well this brings us to set operation
06:24 - and insert operations are really just
06:26 - about allowing us to answer specific
06:28 - questions about groups of things so we
06:31 - could use set operations to see who has
06:34 - attended either plaque on a U or Linux
06:36 - comp or even things like how many people
06:38 - came to the keynote this morning but
06:40 - forgot to bring a coffee so I'm going to
06:44 - run through some of these set operations
06:46 - really quickly first of all we have set
06:47 - Union this is the elements that are in
06:50 - either set a or set B and we denote it
06:53 - with this little u symbol conversely we
06:58 - have set intersections so this is the
06:59 - set of elements that are in a and B and
07:01 - this is notated with the update upside
07:03 - down new symbol and set difference the
07:06 - set of elements that are in a but not in
07:08 - B so now that we've seen that how do we
07:14 - do this in Python well - gives us this
07:16 - nice clean readable function notation we
07:19 - have two sets here a and B and we simply
07:22 - call the corresponding function on one
07:24 - set and pass it the other one and you
07:26 - can see these results here so it's
07:29 - really obvious what we're actually doing
07:30 - here a union B a difference but II but
07:35 - Python also gives us another way that we
07:36 - can do this using what's called the
07:38 - operator notation where we replace those
07:40 - functions with single character
07:42 - operators surfy Union we have the
07:44 - vertical bar character intersection has
07:46 - an ampersand and difference is
07:48 - subtraction so at first glance you might
07:51 - think that this is actually less
07:52 - readable it's not as clear what's going
07:55 - on here but this is still useful to know
07:58 - because this operator syntax is actually
08:01 - closer to what we're going to be doing
08:03 - in mathematics in maths we're used to
08:05 - this idea of having two objects with an
08:07 - operator in the middle of them but
08:09 - what's more this actually suggests a
08:11 - really useful conceptual link to other
08:13 - topics like boolean algebra and logic
08:15 - you saw that for a union we use the
08:17 - vertical bar character well in boolean
08:20 - logic that's an or symbol and the union
08:22 - of two sets is the element in a or b so
08:25 - that we can start extending some of
08:27 - these ideas and linking them to other
08:28 - topics and then on top of that we can
08:31 - also start looking at some more advanced
08:33 - computer science topics talking about
08:35 - things like operator overloading how is
08:37 - actually made possible an in Platinum's
08:39 - case that's using the double underscore
08:41 - meffert's there's a bunch of others
08:44 - Python set operators as well that are
08:46 - built in things like subsets and
08:47 - supersets or symmetric difference which
08:50 - is the equivalent of a set X or another
08:55 - useful thing we might want to do with
08:56 - sets is dues membership testing we want
08:59 - to determine if an element belongs to a
09:02 - set or not so in Python we just use the
09:06 - in keyword we've got a nice readable way
09:09 - of doing this as well we can say is the
09:11 - element for in set a so this is really
09:15 - simple Python makes it nice and clean
09:17 - and readable but again there's
09:19 - opportunities for further discussion and
09:22 - exploring these topics how long does
09:24 - this take to run what if this set is
09:27 - really large well then we can start
09:29 - talking about things like linear search
09:31 - or binary search but of course these are
09:33 - a set so these are actually going to be
09:36 - backed by hash sets which were more
09:38 - complicated data structure but these
09:41 - have interesting properties because
09:43 - they're storing the elements not in the
09:44 - order that they're added but based on
09:46 - their hash values and now our Python
09:49 - sets have a lot of the same properties
09:51 - as the mathematical definition of a set
09:53 - the elements are now unordered and we
09:55 - can't have duplicates but now we can
09:57 - also start talking about how sets give
09:59 - us instant look up with Oh 101 runtime
10:02 - complexity and what does that actually
10:04 - mean what is Big O notation so that's a
10:09 - crash course in sets
10:10 - next up combinatorics
10:16 - this one's bothered me for ages
10:19 - permutation lock clearly all right
10:23 - what's combinatorics comment focus is
10:25 - all about different ways elements of a
10:27 - collection can be combined
10:28 - hence combinatorics we have many
10:31 - intuitive real-world examples for
10:33 - combinatoric switch makes this a lot
10:35 - easier to sort of talk about and explain
10:37 - but it's also highly relevant to a
10:39 - number of important computer science
10:41 - problems a lot of these have ongoing
10:43 - research and like lots of fields of
10:45 - mathematics it actually builds upon a
10:47 - links to lots of other disciplines
10:49 - so the bread-and-butter of combinatorics
10:51 - are permutations and combinations so
10:54 - given a collection of items how many
10:56 - ways can we select a subset of them and
10:59 - does the automatic if we care about how
11:01 - we're going to order them its
11:02 - permutations otherwise combinations so
11:07 - permutations often conceptualizes how
11:09 - many ways can we arrange in n items so
11:13 - this could be something like the books
11:14 - on our bookshelf or classes in our time
11:17 - table or the numbers in our pin code now
11:21 - there's a formula given for calculating
11:23 - the number of permutations we have this
11:25 - n factorial over n minus K factorial now
11:28 - I'm not going to sit here and talk about
11:30 - equations or talk but this is going to
11:32 - come back later so just keep that in
11:34 - mind now combinations otherwise
11:37 - conceptualizes how many ways can we
11:39 - choose n items so now we don't care
11:41 - about how we order them we're just
11:42 - selecting them so for example which
11:44 - books would be featuring a catalog or
11:46 - maybe picking out our lottery numbers
11:48 - though gambling is bad so then don't do
11:51 - that and again we have a similar similar
11:54 - formula for the number of combinations
11:56 - you'll see here that this actually has
11:58 - an extra K factorial term on the bottom
12:00 - here of the fraction and what this tells
12:02 - us is that the number of combinations is
12:05 - always going to be a lot less than the
12:06 - number of permutations because we don't
12:08 - have the option of rearranging them and
12:10 - to generate extra permutations so in
12:15 - Python we're going to be using the Ida
12:17 - tools module now Ida tools has a bunch
12:20 - of different tools for efficient
12:22 - iteration but in particular for our case
12:24 - it has built-in functions for
12:26 - calculating permutations and
12:27 - combinations
12:29 - so if we're teaching this to a student
12:32 - we might give them an example like this
12:33 - or they need to do is import
12:35 - permutations they create some collection
12:37 - of things they want to permutate in this
12:39 - case subjects maybe for a timetable and
12:41 - they run this permutations function and
12:45 - they go great that's worked let's print
12:46 - out the result and we get this ila tools
12:49 - dot permutation object so many questions
12:56 - what is this what is going on wide in my
12:59 - program work well it did but clearly
13:02 - something more complicated is going on
13:03 - here and I'm a tutor I have a class of
13:06 - twenty kids I kind of have to tell them
13:10 - well for the moment we'll come back to
13:12 - this later but just convert to a list
13:14 - and then you can print it out and we'll
13:16 - see all the values this is going to bite
13:19 - me later and similarly for combinations
13:23 - just instead of importing permutations
13:25 - we import combinations so you can see
13:27 - here we have a different collection of
13:28 - fruits how many what two different
13:31 - fruits could I take maybe from morning
13:33 - tea before so you can see we have an
13:34 - apple and a banana but not a banana and
13:37 - an apple because they're the same
13:38 - combination so let's run through a
13:41 - practical example of the question that a
13:43 - student might get on an assignment how
13:45 - many eight character passwords are
13:47 - possible using only the lowercase
13:49 - alphabet without repeating a character
13:51 - all right so we need to think is this
13:54 - permutations or combinations the autumn
13:57 - matters for a password so it must be
13:58 - permutations so the students seen some
14:01 - examples they might start out with some
14:04 - code we give them the lowercase alphabet
14:06 - they get the permutations function
14:08 - lowercase letters how many ways can we
14:10 - pick eight of them and then we need to
14:13 - see how many so we use the Len function
14:15 - and we get another error objective type
14:18 - Ida tools permutation has no Len why why
14:23 - won't it work well some of you in the
14:25 - room probably know exactly why it's not
14:27 - going to work but the student didn't but
14:29 - the student who did pay attention in
14:31 - class remember that I told them to just
14:33 - convert it to a list now this is
14:38 - actually like this code is running so I
14:40 - have to comment this out otherwise my
14:42 - talk would end here nothing that sadness
14:46 - awaits
14:47 - so why didn't it work well remember this
14:51 - is our formula for calculating the
14:53 - number of permutations in factorial over
14:55 - N minus K factorial so let's substitute
14:58 - in our values for N and K we have 26
15:01 - letters selecting eight of them let's
15:03 - evaluate some of these permutations we
15:06 - see we have six point three times ten to
15:08 - the ten that's 63 billion possible
15:11 - passwords quite a lot to deal with so
15:16 - what do we learn from this well clearly
15:18 - factorials get really big really quickly
15:21 - and again now we can start talking about
15:23 - run time complexity and also in this
15:26 - case memory usage and why these two
15:28 - things matter now we had that idea tools
15:31 - permutation object before well that was
15:33 - a generator and generators are a really
15:35 - cool interesting concept and you know we
15:38 - can start talking about these and the
15:40 - problems that they solve and how we can
15:42 - use these tools to get around things but
15:44 - we don't actually always need to rely on
15:46 - generators to solve these sorts of
15:48 - problems sometimes we should just go
15:50 - back to the basics so let's take another
15:52 - look at that question how many a
15:54 - character passwords are possible it
15:57 - didn't ask us to generate those
15:59 - passwords and are definitely don't ask
16:00 - us to store them in memory okay once you
16:03 - give students this tool of being how to
16:05 - generate generate these permutations and
16:08 - show them how they're going to want to
16:09 - do that but you don't actually need to
16:12 - do that for every question sometimes
16:14 - it's just a matter of doing the maths
16:16 - now of course calculating 26 factorial
16:19 - or whatever by hand is a bit tedious
16:21 - maybe you don't have a scientific
16:23 - calculator on you so we can just use
16:25 - Python again unfortunately the path
16:27 - Python doesn't have a built-in factorial
16:29 - function but we can import one from side
16:31 - PI put in our values for N and K and we
16:34 - see our 63 billion passwords we're a
16:37 - little bit of floating point error but
16:38 - you know don't worry about that okay
16:41 - next up linear algebra so I contemplated
16:47 - whether or not leaving this section in
16:49 - because it's actually really hard to
16:51 - talk about linear algebra in a few
16:53 - minutes in a talk but the reason I left
16:55 - it in is because I think it's a really
16:57 - good example of how we can start
16:58 - thinking about algorithms so linear
17:03 - algebra matrices what is a matrix matrix
17:06 - is a two-dimensional array of elements
17:08 - here the positioning within a matrix
17:10 - does matter and matrices are actually a
17:14 - different type of mathematical object so
17:16 - you have standard operations defined but
17:18 - they might work a little bit different
17:19 - to what you're expecting now if we're
17:22 - going to do anything with matrices in
17:24 - Python chances are we're going to be
17:25 - using numpy because it's a really cool
17:27 - library for scientific computing
17:30 - it has amongst a bunch of other tools a
17:33 - really high-performance n dimensional
17:35 - array object that we can use for doing
17:38 - matrix operations so let's start playing
17:41 - around with numpy if we want to
17:42 - construct some matrices we just import
17:44 - the matrix constructor we pass it a list
17:47 - of lists and we get these two matrix
17:49 - objects out let's do some addition and
17:53 - subtraction on them so for addition and
17:55 - subtraction of two matrices you simply
17:57 - add up the elements in the corresponding
17:59 - positions so this means the two major
18:01 - disease need to have the same size you
18:04 - can see for addition we have in matrix a
18:06 - in this position too and in matrix B
18:08 - this position three and our result is
18:11 - five but if we were subtract them a
18:13 - result is minus money all good so far
18:16 - what about matrix multiplication well
18:19 - clearly it wasn't gonna last something
18:21 - different is happening here to multiply
18:24 - by three definitely isn't 9 last time I
18:26 - checked but also you'll see that the
18:29 - results for this is actually different
18:30 - if we flip the order because matrix
18:33 - multiplication is actually defined
18:35 - differently to addition and subtraction
18:39 - so this is where I try and teach your
18:41 - matrix multiplication in 30 seconds no
18:45 - that's not going to happen ok so this is
18:47 - how we might teach it to a mathematics
18:48 - student we've got some nice formula for
18:49 - how to define matrix multiplication but
18:52 - if you're a first-year computing student
18:54 - who doesn't really like maths they're so
18:57 - scary right what's this thing this is
19:00 - like a Samos 11
19:02 - how about an algorithm all right we like
19:05 - algorithms algorithms are fun they tell
19:07 - us what we need to do there a recipe
19:09 - turns out actually writing matrix
19:11 - multiplication in an algorithm is also
19:13 - harder than I thought it was going to be
19:14 - but this is my attempt at it
19:16 - so if we're multiplying two matrices
19:18 - together C equals a times B we iterate
19:22 - over the rows and columns of C and what
19:24 - we actually do is we get the
19:26 - corresponding row from one matrix and
19:28 - the corresponding column from another
19:30 - matrix and we multiply each element
19:32 - pairwise and sum them all up like this
19:35 - so for this position we're using this
19:37 - row in this column and for this position
19:39 - we're using this row and this column all
19:42 - right that's my thirty second
19:44 - explanation of matrix multiplication but
19:46 - we've got this algorithm so now let's do
19:50 - it in Python and you can see that the
19:53 - code for doing this in Python is pretty
19:55 - much just that algorithm that we had
19:57 - before hint I wrote the Python first and
20:00 - then yeah okay so the only extra thing
20:05 - we need to do is sort of calculate what
20:06 - our values for the rows and columns are
20:08 - and sort of initialize our matrix with a
20:10 - bunch of zeros to start with and then we
20:12 - can sum them up there's a bunch of
20:14 - different ways to do this there's better
20:15 - ways to do this but this is one way and
20:17 - now we can do matrix multiplication with
20:20 - just two lists of Lists we don't
20:22 - actually need the numpy matrix
20:23 - constructor and we can see that we get
20:25 - the same results that we had before
20:26 - admittedly they're not formatted as
20:28 - nicely so why why Liam you just told us
20:34 - you can do this with numpy numpy is
20:35 - going to do a better job why not just
20:37 - use numpy well this gives us a better
20:39 - understanding of how matrix
20:41 - multiplication actually works because
20:44 - remember the students that are studying
20:45 - this also are going to have to do this
20:47 - on written maths assignments okay and if
20:51 - you're a programming student who's new
20:53 - to this getting any sort of practice of
20:55 - sort of conceptualizing this idea and
20:58 - the steps that you need to do is really
21:00 - useful and this gives us practice in
21:02 - doing that and we're breaking down a
21:03 - process and actually implementing an
21:05 - iterative algorithm and again this also
21:08 - gives us a sense of why matrix
21:09 - multiplication is a really
21:11 - computationally expensive task even
21:13 - though it's so important you saw we had
21:15 - those three
21:16 - nested for-loops before so we have a
21:18 - classic example of a nolan cubed
21:20 - algorithm so what does that mean and
21:22 - there are there ways that we could maybe
21:24 - do it better
21:25 - turns out kinda but not really and we
21:29 - can make a similar case for matrix
21:31 - determinant this is another calculation
21:33 - you can do on a matrix which sort of
21:36 - reduces down to a really simple
21:38 - recursive algorithm
21:39 - well moderately simple recursive
21:41 - algorithm so now that we've done this
21:45 - made from matrix multiplication let's
21:46 - take it further let's practice some oip
21:49 - so we can actually create our own matrix
21:52 - class like this and using the double
21:54 - underscore mul method for overloading
21:56 - matrix multiplication we can just insert
21:59 - our code from before we can also do the
22:01 - same for an add method and a subtract
22:03 - method etc and we can create our own
22:06 - matrix class and do some of those
22:08 - operations that we saw none by doing
22:10 - ourselves so now we've got an
22:12 - introduction in 200p all right my last
22:17 - set of examples are all about
22:18 - visualization and data so digital K did
22:23 - a talk yesterday in the education tract
22:25 - and she had a bunch of great examples
22:27 - for this so I was like really impressed
22:29 - to see those as well so some of these
22:32 - might be a little bit familiar but I'm
22:34 - going to go through them really quickly
22:35 - if you're interested in this stuff I'd
22:38 - really recommend watching her talk it
22:39 - was fantastic so first I just want to
22:43 - talk briefly about Jupiter or as it used
22:46 - to be known I - so Jupiter is a
22:48 - web-based notebook which allows students
22:51 - to present to prepare documents which
22:54 - contain both live code snippets and rich
22:57 - text to annotate them so this is really
23:00 - useful if a student is preparing some
23:02 - sort of report or presentation and they
23:04 - need to include code in it and that code
23:07 - is actually runnable now what you might
23:10 - be surprised to learn as well as that
23:11 - these slides that I've prepared today
23:13 - were actually all written in a Jupiter
23:15 - notebook as well and then it's a little
23:17 - simple extension to convert them into
23:18 - slides so this can be a really useful
23:21 - tool in some of these sort of situations
23:22 - so my next few examples about how we can
23:27 - sort of do some visualization and plot
23:30 - with python or use the matplotlib
23:32 - library now in these cases the code
23:36 - itself is not particularly interesting
23:38 - or relevant to the talk so don't get too
23:41 - bogged down in what's happening there
23:42 - how this is useful is that a student or
23:44 - a tutor can prepare this sort of
23:47 - boilerplate code and provide it to
23:48 - students to allow them to experiment so
23:52 - I've got five minutes left so I'm gonna
23:53 - rush through these we can plot functions
23:56 - really simply we just create our x-axis
23:59 - and a y-axis using MATLAB and numpy and
24:02 - we can simply show a nice beautiful sine
24:05 - wave there similarly we can do the same
24:10 - with charts and graphs we just get our
24:12 - x-axis and some Y points here and we can
24:15 - see a nice bar chart so maybe we've done
24:17 - some data collection in class and we
24:19 - want to plot that into a bar chart let's
24:23 - get a little bit more fancy let's do a
24:25 - linear regression so here we've got a
24:28 - bit more boilerplate here I've got a
24:29 - function to calculate a line of best fit
24:31 - now of course I'm not doing that myself
24:33 - I'm using the stats function the starts
24:36 - module from side play and then we can
24:39 - just do a linear regression plot like
24:41 - this so you can see here now I've got
24:44 - some X&Y data points and I just call
24:47 - that function and we get our nice blue
24:49 - data points with our line of best fit
24:52 - through the middle let's get even more
24:55 - fancy 3d surfaces these are really cool
24:58 - so you saw before with the function plot
25:00 - we had of a function with one variable y
25:04 - equals x well if we add another
25:05 - dimension to that we have something like
25:07 - Z is a function of Y and X now we take
25:10 - it into 3d so again a little bit of
25:14 - boilerplate here we have this apply
25:16 - function which is going to map a
25:18 - function onto that 3d space and then do
25:22 - our plotting here again not too
25:25 - important don't worry too much about
25:26 - this code I can show you later but what
25:30 - we can do is define some functions so I
25:33 - have one here called a saddle otherwise
25:36 - known as a hyperbolic paraboloid I think
25:39 - it just looks like a Pringle
25:42 - and we can plot that with some X&Y
25:44 - ranges here we can see I have another
25:46 - function here which is a little bit more
25:48 - complicated called a sinc function and I
25:52 - can just change this here run that
25:54 - obviously we get another 3d plot there
25:59 - all right so summing up pun intended
26:05 - look I said at the start I like bad
26:08 - jokes all right so I really think based
26:12 - on these examples we can see that
26:13 - learning programming alongside
26:14 - mathematics can be used to sort of help
26:17 - bridge these related concepts if we have
26:19 - students familiar with one stream or
26:21 - another they can sort of use that as an
26:23 - entry point in to start exploring the
26:26 - converse both of these fields contain a
26:30 - lot of opportunities for further
26:32 - extension and inquiry once we get
26:34 - started it's easy to use these tools to
26:37 - sort of start stepping through some more
26:38 - complicated ideas and clearly Python is
26:42 - a fantastic tool for introducing these
26:44 - concepts to new students as you've seen
26:47 - all these built-in libraries provide
26:49 - plenty of useful tools because as
26:51 - interpreted we're dealing with a lot of
26:53 - interactivity and this allows students
26:55 - to really experiment you saw I could
26:57 - easily change that example of a 3d
26:59 - surface plot before and of course
27:02 - pythons simple clean and readable syntax
27:04 - it's really going to lower some of those
27:06 - barriers to programming there's been
27:08 - lots of talks about this some already in
27:10 - the education track but where I find
27:13 - this is useful is that it allows
27:15 - students and tutors and teachers to
27:17 - focus more on the important concepts
27:19 - that they're trying to convey we're not
27:21 - getting too bogged down in syntax and
27:23 - other things like that instead we can
27:26 - actually start talking about things like
27:28 - you know calculating permutations and
27:31 - runtime complexity or using hash sets
27:33 - things like that so thank you very much
27:37 - for listening to my talk the slides are
27:39 - available online through this tiny link
27:41 - they're on github you'll actually see
27:43 - that Jupiter notebook so you can also
27:45 - look at all the code snippets there do
27:48 - we have time for questions No okay so
27:50 - thank you very much if you're interested
27:53 - in this
27:54 - any questions I'll be milling around
27:56 - feel free to come up and talk to me I'd
27:57 - also love to hear if you have any
27:59 - comments about anything I've said
28:00 - because these are just my opinions as
28:03 - students teachers or other developers
28:05 - I'm curious to see what you have to say
28:07 - otherwise
28:08 - thank you alright so as he said we would
28:20 - ask that if you have questions for Liam
28:22 - you take it up to the hall as we have
28:23 - ten minutes until our neck

Cleaned transcript:

hello everyone good morning we'd like to welcome you to Pike on a youth all right so we're going to start this morning with Python teaching math very sorry yeah Python meeting teaching math with Python but it's welcome Liam Calloway hi everyone thanks for coming out to my talk today for the first talk of this session so first a little bit a little bit about me who is this guy so hi my name is Liam Calloway I recently graduated from the University of Tasmania I am currently a software developer at wise tech global and in the past I've been a tutor at in CSS the national computer summit computer science Summer School and the University of Tasmania this is my second PyCon and it's my first time ever giving a talk so go easy on me so first of all just that's a bit about me about you show of hands who in this room is currently a student University High School cool and who's a teacher well nice alright so hopefully you find this interesting so I'm gonna start this talk with a brief anecdote as a lot of talks tend to so last year at the University of Tasmania I treated a course called computational science but this course was a bit different because it was actually offered under two separate unit codes with two different titles the other being to scream mathematics with applications so this course covered a lot of sort of firstyear maths concepts with set theory camana Toric's number theory but it was also supplemented with practical implement practical implementations taught in Python and the content was exactly the same for both unit codes so this meant that students studying a programming degree were doing the same assessments as students studying a mathematics degree they had lectures for both maths and programming assignments for both maths and programming and tutorials for both maths and programming so I was taking the tutorials and the lab sessions for the programming content but I got to interact with students from both streams and I would get this question a lot from the programming students do I have to learn maths I want to be a programmer maths is hard why do I need to do this maybe not always quite negatively sometimes these questions were genuine coming from like I am scared is this something that I'm gonna need to be good at to be good at my job but then from the math students do I have to learn programming a lot of these mathematic students were taking a programming course for the first time and this was all completely new to them so they answer these questions I would usually say no you don't need to learn these things B should and this course is a pretty good way to get started with it so python is pretty great right we're all here at PyCon I don't think I'm gonna have to try too hard to convince you of that there's lots of really good reasons that Python is a useful language it's very clean and expressive because it's interpreted it makes it highly interactive and it's batteries included we have a lot of useful tools through the standard library and in fact you might be familiar with something called the Zen of Python these are some design principles that Python is built around if you open up a Python interpreter and type import this we get a whole list of these and I've pulled out a few here we have things like beautiful is better than ugly sparse is better than tense but readability counts but the reason why I've selected these here is because I think that these are some good examples for mathematics as well if we're doing a proof we want it to be beautiful and simple rather than ugly and going on for pages and pages but then at the same time we don't want to make things too dense because readability counts also I actually started at an applied mathematics degree rather than pure maths so that last one in practicality beats purity so this leads me to the conjecture that getting handson with Python is a great way to learn some maths but also getting handson with maps is a great way to learn some Python so for the rest of this talk I'm going to run through some examples that I think illustrate this concept how we can introduce some mathematical concepts alongside programming concepts and use this bridge to sort of extend both topics so first let's talk a little bit about set theory yes this talk will feature memes so what is the set I said is a collection of objects that belong to some group they're defined by certain property or attribute the elements of a set of unordered and we don't care about repetitions within a set in maths we have a few ways of notating out a set we have something called list format where we simply list the values but more commonly we use something called defining property format where we have some function which defines our set and then some range of values that our set can take so that's all well and good how do we do this in Python well Python also gives us a few different ways of defining a set again we can simply list the values using what's called a set literal with the curly braces but we also have something called a set comprehension which just like defining property format allows us to create a set using some generating function and some range of values for that to take so this is a concept that students that maybe have a bit of programming experience before but a new to Python might take them a little bit to wrap their head around they used to the sort of traditional looping structure but for mathematics students they're already used to this kind of notation and we actually found that a lot of them pick up this idea a lot quicker so that's quite neat it also in Python if you want to create an empty set unfortunately you can't just use the empty set literal like that because Python is going to interpret that as a dictionary so you have to use this set constructor instead so now that we've got some sets what can we do with them well this brings us to set operation and insert operations are really just about allowing us to answer specific questions about groups of things so we could use set operations to see who has attended either plaque on a U or Linux comp or even things like how many people came to the keynote this morning but forgot to bring a coffee so I'm going to run through some of these set operations really quickly first of all we have set Union this is the elements that are in either set a or set B and we denote it with this little u symbol conversely we have set intersections so this is the set of elements that are in a and B and this is notated with the update upside down new symbol and set difference the set of elements that are in a but not in B so now that we've seen that how do we do this in Python well gives us this nice clean readable function notation we have two sets here a and B and we simply call the corresponding function on one set and pass it the other one and you can see these results here so it's really obvious what we're actually doing here a union B a difference but II but Python also gives us another way that we can do this using what's called the operator notation where we replace those functions with single character operators surfy Union we have the vertical bar character intersection has an ampersand and difference is subtraction so at first glance you might think that this is actually less readable it's not as clear what's going on here but this is still useful to know because this operator syntax is actually closer to what we're going to be doing in mathematics in maths we're used to this idea of having two objects with an operator in the middle of them but what's more this actually suggests a really useful conceptual link to other topics like boolean algebra and logic you saw that for a union we use the vertical bar character well in boolean logic that's an or symbol and the union of two sets is the element in a or b so that we can start extending some of these ideas and linking them to other topics and then on top of that we can also start looking at some more advanced computer science topics talking about things like operator overloading how is actually made possible an in Platinum's case that's using the double underscore meffert's there's a bunch of others Python set operators as well that are built in things like subsets and supersets or symmetric difference which is the equivalent of a set X or another useful thing we might want to do with sets is dues membership testing we want to determine if an element belongs to a set or not so in Python we just use the in keyword we've got a nice readable way of doing this as well we can say is the element for in set a so this is really simple Python makes it nice and clean and readable but again there's opportunities for further discussion and exploring these topics how long does this take to run what if this set is really large well then we can start talking about things like linear search or binary search but of course these are a set so these are actually going to be backed by hash sets which were more complicated data structure but these have interesting properties because they're storing the elements not in the order that they're added but based on their hash values and now our Python sets have a lot of the same properties as the mathematical definition of a set the elements are now unordered and we can't have duplicates but now we can also start talking about how sets give us instant look up with Oh 101 runtime complexity and what does that actually mean what is Big O notation so that's a crash course in sets next up combinatorics this one's bothered me for ages permutation lock clearly all right what's combinatorics comment focus is all about different ways elements of a collection can be combined hence combinatorics we have many intuitive realworld examples for combinatoric switch makes this a lot easier to sort of talk about and explain but it's also highly relevant to a number of important computer science problems a lot of these have ongoing research and like lots of fields of mathematics it actually builds upon a links to lots of other disciplines so the breadandbutter of combinatorics are permutations and combinations so given a collection of items how many ways can we select a subset of them and does the automatic if we care about how we're going to order them its permutations otherwise combinations so permutations often conceptualizes how many ways can we arrange in n items so this could be something like the books on our bookshelf or classes in our time table or the numbers in our pin code now there's a formula given for calculating the number of permutations we have this n factorial over n minus K factorial now I'm not going to sit here and talk about equations or talk but this is going to come back later so just keep that in mind now combinations otherwise conceptualizes how many ways can we choose n items so now we don't care about how we order them we're just selecting them so for example which books would be featuring a catalog or maybe picking out our lottery numbers though gambling is bad so then don't do that and again we have a similar similar formula for the number of combinations you'll see here that this actually has an extra K factorial term on the bottom here of the fraction and what this tells us is that the number of combinations is always going to be a lot less than the number of permutations because we don't have the option of rearranging them and to generate extra permutations so in Python we're going to be using the Ida tools module now Ida tools has a bunch of different tools for efficient iteration but in particular for our case it has builtin functions for calculating permutations and combinations so if we're teaching this to a student we might give them an example like this or they need to do is import permutations they create some collection of things they want to permutate in this case subjects maybe for a timetable and they run this permutations function and they go great that's worked let's print out the result and we get this ila tools dot permutation object so many questions what is this what is going on wide in my program work well it did but clearly something more complicated is going on here and I'm a tutor I have a class of twenty kids I kind of have to tell them well for the moment we'll come back to this later but just convert to a list and then you can print it out and we'll see all the values this is going to bite me later and similarly for combinations just instead of importing permutations we import combinations so you can see here we have a different collection of fruits how many what two different fruits could I take maybe from morning tea before so you can see we have an apple and a banana but not a banana and an apple because they're the same combination so let's run through a practical example of the question that a student might get on an assignment how many eight character passwords are possible using only the lowercase alphabet without repeating a character all right so we need to think is this permutations or combinations the autumn matters for a password so it must be permutations so the students seen some examples they might start out with some code we give them the lowercase alphabet they get the permutations function lowercase letters how many ways can we pick eight of them and then we need to see how many so we use the Len function and we get another error objective type Ida tools permutation has no Len why why won't it work well some of you in the room probably know exactly why it's not going to work but the student didn't but the student who did pay attention in class remember that I told them to just convert it to a list now this is actually like this code is running so I have to comment this out otherwise my talk would end here nothing that sadness awaits so why didn't it work well remember this is our formula for calculating the number of permutations in factorial over N minus K factorial so let's substitute in our values for N and K we have 26 letters selecting eight of them let's evaluate some of these permutations we see we have six point three times ten to the ten that's 63 billion possible passwords quite a lot to deal with so what do we learn from this well clearly factorials get really big really quickly and again now we can start talking about run time complexity and also in this case memory usage and why these two things matter now we had that idea tools permutation object before well that was a generator and generators are a really cool interesting concept and you know we can start talking about these and the problems that they solve and how we can use these tools to get around things but we don't actually always need to rely on generators to solve these sorts of problems sometimes we should just go back to the basics so let's take another look at that question how many a character passwords are possible it didn't ask us to generate those passwords and are definitely don't ask us to store them in memory okay once you give students this tool of being how to generate generate these permutations and show them how they're going to want to do that but you don't actually need to do that for every question sometimes it's just a matter of doing the maths now of course calculating 26 factorial or whatever by hand is a bit tedious maybe you don't have a scientific calculator on you so we can just use Python again unfortunately the path Python doesn't have a builtin factorial function but we can import one from side PI put in our values for N and K and we see our 63 billion passwords we're a little bit of floating point error but you know don't worry about that okay next up linear algebra so I contemplated whether or not leaving this section in because it's actually really hard to talk about linear algebra in a few minutes in a talk but the reason I left it in is because I think it's a really good example of how we can start thinking about algorithms so linear algebra matrices what is a matrix matrix is a twodimensional array of elements here the positioning within a matrix does matter and matrices are actually a different type of mathematical object so you have standard operations defined but they might work a little bit different to what you're expecting now if we're going to do anything with matrices in Python chances are we're going to be using numpy because it's a really cool library for scientific computing it has amongst a bunch of other tools a really highperformance n dimensional array object that we can use for doing matrix operations so let's start playing around with numpy if we want to construct some matrices we just import the matrix constructor we pass it a list of lists and we get these two matrix objects out let's do some addition and subtraction on them so for addition and subtraction of two matrices you simply add up the elements in the corresponding positions so this means the two major disease need to have the same size you can see for addition we have in matrix a in this position too and in matrix B this position three and our result is five but if we were subtract them a result is minus money all good so far what about matrix multiplication well clearly it wasn't gonna last something different is happening here to multiply by three definitely isn't 9 last time I checked but also you'll see that the results for this is actually different if we flip the order because matrix multiplication is actually defined differently to addition and subtraction so this is where I try and teach your matrix multiplication in 30 seconds no that's not going to happen ok so this is how we might teach it to a mathematics student we've got some nice formula for how to define matrix multiplication but if you're a firstyear computing student who doesn't really like maths they're so scary right what's this thing this is like a Samos 11 how about an algorithm all right we like algorithms algorithms are fun they tell us what we need to do there a recipe turns out actually writing matrix multiplication in an algorithm is also harder than I thought it was going to be but this is my attempt at it so if we're multiplying two matrices together C equals a times B we iterate over the rows and columns of C and what we actually do is we get the corresponding row from one matrix and the corresponding column from another matrix and we multiply each element pairwise and sum them all up like this so for this position we're using this row in this column and for this position we're using this row and this column all right that's my thirty second explanation of matrix multiplication but we've got this algorithm so now let's do it in Python and you can see that the code for doing this in Python is pretty much just that algorithm that we had before hint I wrote the Python first and then yeah okay so the only extra thing we need to do is sort of calculate what our values for the rows and columns are and sort of initialize our matrix with a bunch of zeros to start with and then we can sum them up there's a bunch of different ways to do this there's better ways to do this but this is one way and now we can do matrix multiplication with just two lists of Lists we don't actually need the numpy matrix constructor and we can see that we get the same results that we had before admittedly they're not formatted as nicely so why why Liam you just told us you can do this with numpy numpy is going to do a better job why not just use numpy well this gives us a better understanding of how matrix multiplication actually works because remember the students that are studying this also are going to have to do this on written maths assignments okay and if you're a programming student who's new to this getting any sort of practice of sort of conceptualizing this idea and the steps that you need to do is really useful and this gives us practice in doing that and we're breaking down a process and actually implementing an iterative algorithm and again this also gives us a sense of why matrix multiplication is a really computationally expensive task even though it's so important you saw we had those three nested forloops before so we have a classic example of a nolan cubed algorithm so what does that mean and there are there ways that we could maybe do it better turns out kinda but not really and we can make a similar case for matrix determinant this is another calculation you can do on a matrix which sort of reduces down to a really simple recursive algorithm well moderately simple recursive algorithm so now that we've done this made from matrix multiplication let's take it further let's practice some oip so we can actually create our own matrix class like this and using the double underscore mul method for overloading matrix multiplication we can just insert our code from before we can also do the same for an add method and a subtract method etc and we can create our own matrix class and do some of those operations that we saw none by doing ourselves so now we've got an introduction in 200p all right my last set of examples are all about visualization and data so digital K did a talk yesterday in the education tract and she had a bunch of great examples for this so I was like really impressed to see those as well so some of these might be a little bit familiar but I'm going to go through them really quickly if you're interested in this stuff I'd really recommend watching her talk it was fantastic so first I just want to talk briefly about Jupiter or as it used to be known I so Jupiter is a webbased notebook which allows students to present to prepare documents which contain both live code snippets and rich text to annotate them so this is really useful if a student is preparing some sort of report or presentation and they need to include code in it and that code is actually runnable now what you might be surprised to learn as well as that these slides that I've prepared today were actually all written in a Jupiter notebook as well and then it's a little simple extension to convert them into slides so this can be a really useful tool in some of these sort of situations so my next few examples about how we can sort of do some visualization and plot with python or use the matplotlib library now in these cases the code itself is not particularly interesting or relevant to the talk so don't get too bogged down in what's happening there how this is useful is that a student or a tutor can prepare this sort of boilerplate code and provide it to students to allow them to experiment so I've got five minutes left so I'm gonna rush through these we can plot functions really simply we just create our xaxis and a yaxis using MATLAB and numpy and we can simply show a nice beautiful sine wave there similarly we can do the same with charts and graphs we just get our xaxis and some Y points here and we can see a nice bar chart so maybe we've done some data collection in class and we want to plot that into a bar chart let's get a little bit more fancy let's do a linear regression so here we've got a bit more boilerplate here I've got a function to calculate a line of best fit now of course I'm not doing that myself I'm using the stats function the starts module from side play and then we can just do a linear regression plot like this so you can see here now I've got some X&Y data points and I just call that function and we get our nice blue data points with our line of best fit through the middle let's get even more fancy 3d surfaces these are really cool so you saw before with the function plot we had of a function with one variable y equals x well if we add another dimension to that we have something like Z is a function of Y and X now we take it into 3d so again a little bit of boilerplate here we have this apply function which is going to map a function onto that 3d space and then do our plotting here again not too important don't worry too much about this code I can show you later but what we can do is define some functions so I have one here called a saddle otherwise known as a hyperbolic paraboloid I think it just looks like a Pringle and we can plot that with some X&Y ranges here we can see I have another function here which is a little bit more complicated called a sinc function and I can just change this here run that obviously we get another 3d plot there all right so summing up pun intended look I said at the start I like bad jokes all right so I really think based on these examples we can see that learning programming alongside mathematics can be used to sort of help bridge these related concepts if we have students familiar with one stream or another they can sort of use that as an entry point in to start exploring the converse both of these fields contain a lot of opportunities for further extension and inquiry once we get started it's easy to use these tools to sort of start stepping through some more complicated ideas and clearly Python is a fantastic tool for introducing these concepts to new students as you've seen all these builtin libraries provide plenty of useful tools because as interpreted we're dealing with a lot of interactivity and this allows students to really experiment you saw I could easily change that example of a 3d surface plot before and of course pythons simple clean and readable syntax it's really going to lower some of those barriers to programming there's been lots of talks about this some already in the education track but where I find this is useful is that it allows students and tutors and teachers to focus more on the important concepts that they're trying to convey we're not getting too bogged down in syntax and other things like that instead we can actually start talking about things like you know calculating permutations and runtime complexity or using hash sets things like that so thank you very much for listening to my talk the slides are available online through this tiny link they're on github you'll actually see that Jupiter notebook so you can also look at all the code snippets there do we have time for questions No okay so thank you very much if you're interested in this any questions I'll be milling around feel free to come up and talk to me I'd also love to hear if you have any comments about anything I've said because these are just my opinions as students teachers or other developers I'm curious to see what you have to say otherwise thank you alright so as he said we would ask that if you have questions for Liam you take it up to the hall as we have ten minutes until our neck
