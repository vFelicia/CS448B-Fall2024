With timestamps:

00:00 - foreign
00:04 - welcome to the beginning of my Unix
00:07 - tutorial series uh fabianis
00:11 - now assumingly if you've clicked this
00:12 - video you know what Unix is
00:15 - but if you haven't and you just dumbed
00:18 - along curiosity well Unix is an
00:20 - operating system from the 1960s which uh
00:24 - we can still find uh today in our modern
00:27 - operating systems
00:29 - and it's operating systems like Mac OS X
00:33 - or Linux which I'm using now
00:37 - you can even find it on things like an
00:39 - iPhone or an Android smartphone
00:43 - but anyway you can't actually find it on
00:46 - a Microsoft's Windows which I'm sure
00:49 - most of you are running
00:51 - most of the population at least
00:54 - but there is a way of actually getting
00:55 - Unix onto it which I actually might make
00:58 - a video on
01:00 - later
01:01 - but anyway
01:02 - now when I say it this is a Unix system
01:05 - I don't mean all this like all this
01:07 - graphical stuff
01:09 - I mean what you get in the terminal or
01:12 - the shell
01:13 - and you get there by going to the
01:16 - terminal application or
01:18 - at least it's terminal in my case on a
01:21 - Mac it's called terminal I know that but
01:23 - on your system it might be called
01:25 - console or shell or something like that
01:28 - anyway
01:30 - S I mean what you get here in this
01:32 - little application
01:34 - the text so when I type stuff in
01:39 - commands and stuff you get output that's
01:41 - what I mean by Unix the shell
01:44 - okay so I'm going to go back to my
01:46 - special terminal with a large font for
01:49 - you guys
01:50 - okay so I must say this what I have now
01:53 - isn't actually Unix from the 60s
01:57 - uh 20 or 30 years ago whatever it was
02:00 - Rewritten
02:03 - and what I have now is called gnu well
02:07 - it's not actually called canoe but well
02:08 - it's from the gnu Foundation
02:12 - and the interesting thing about canoe
02:14 - GNU is it stands for gnu
02:17 - is not Unix
02:20 - that's the acronym
02:22 - and basically what it is is it's
02:25 - a clone of it really it's
02:28 - Unix Rewritten to be open source or at
02:31 - least open we found uh legal
02:33 - restrictions because the original one
02:36 - Unix was
02:37 - proprietary
02:40 - which meant it was had a private owner
02:43 - had legal restrictions on it well the
02:47 - new one the one I'm running now run most
02:50 - if not everyone's running is a
02:53 - open which means it's got no real
02:56 - restrictions on it
02:59 - now back to the Shell okay so the Unix
03:02 - shell is a command Central thing
03:05 - you only open it if you want to do
03:07 - something
03:08 - and you can only do something with
03:10 - commands
03:12 - for example uh this will print out some
03:15 - stuff and so
03:17 - and so will this
03:19 - and this will print out the username of
03:21 - this logged in
03:25 - okay
03:26 - so one of the main things you anyone
03:29 - will really want to do on Unix well the
03:31 - shell I'm gonna prefer to announce it
03:33 - from now on as this shell
03:35 - one of the main things anyone wants to
03:37 - do with the shell
03:39 - is navigate the file system so make move
03:42 - delete file so it's you know Etc
03:45 - rename them yeah things like that
03:48 - and I'm going to show you that in this
03:51 - video
03:53 - okay
03:54 - so
03:55 - I'll never gain the fastest you're going
03:58 - to need to know a few key commands which
04:01 - are probably the most the main commands
04:04 - you'll need in Unix
04:05 - or the shell
04:07 - and the main one will probably be LS
04:11 - and LS stands for a list
04:14 - the designers for it being you know
04:16 - smart to take out the um
04:19 - unimportant characters from The Words
04:22 - the verbs
04:23 - and just make it really short two
04:26 - letters LS
04:28 - to list files in the directory
04:31 - and that's fine I guess it's a bit
04:34 - confusing at first but once you get used
04:35 - to it Alice is better you can type it
04:38 - quicker it's shorter
04:40 - yeah so Ellis use LS to um
04:44 - to
04:46 - view the um
04:47 - files and they're directly to list them
04:50 - in a ascending order from A to Z
04:55 - okay so LS list the um files
05:01 - in a directory
05:03 - and you can see which directory you're
05:05 - in
05:06 - and when I say directory I mean like the
05:08 - path the file system path of like where
05:11 - you are so in terms of Windows you have
05:13 - the C drive you can have your my
05:15 - documents folder
05:17 - in Linux I have my home folder which I'm
05:19 - currently in on Mac it's the same so and
05:23 - you can see what current director you're
05:24 - in on the Unix shell
05:27 - by typing the PWD command and this
05:30 - basically stands for personal
05:33 - work directory
05:36 - so the current directory you're working
05:38 - in
05:39 - so let's quickly that so I'll type in
05:41 - PWD and it tells me I'm in home Michael
05:44 - and that's a directory the first folder
05:47 - is called home
05:49 - and in the home folder I'm in Michael
05:52 - and this is directory I'm in
05:55 - so let's say I want to change
05:56 - directories
05:58 - so I want to change the current place
06:00 - I'm in so
06:02 - well I have to go somewhere so I'll
06:05 - quickly hit LS to see where I can go
06:08 - and I guess I'll go to this workspace
06:10 - folder I can tell it's a directory
06:13 - because it's in blue or green
06:15 - outside of the blue in this case that's
06:17 - because it's
06:18 - one of the
06:20 - attributes of it but anyway
06:23 - uh so I type in CD
06:26 - and this is another new command CD well
06:30 - CD stands for change directory
06:34 - and this command you can change the
06:36 - current directory
06:37 - you're into another so I'm going to type
06:39 - CD and then the name of the directory I
06:41 - want to go to
06:45 - now you notice there's nothing before it
06:47 - you know no path before this workspace
06:49 - name and that's because
06:51 - well I'm in this home folder which
06:54 - contains
06:56 - the workspace folder so
06:59 - CD workspace will hit enter and
07:04 - type in PWD
07:06 - and look my work direct directory has
07:08 - changed to workspace so I'll type in LS
07:12 - and Ellis tells me that there's four
07:15 - folders in this workspace folder
07:19 - is four
07:20 - so let's CD again to quadratic
07:25 - one and sell us
07:27 - okay and I can see more files I can see
07:29 - the program I wrote for Android
07:32 - okay
07:33 - so let's say I want I have a file here
07:36 - called my file
07:38 - right so I can have a look at what's in
07:40 - this my file
07:41 - this is cat command I'll explain it
07:43 - later
07:44 - and I say it's a text file which has
07:46 - this gibberish in it okay well let's say
07:51 - this my file that I've made is in the
07:54 - wrong place I don't want it in this
07:57 - quadratic factorizer folder I want it in
08:00 - the bin folder
08:02 - this here
08:04 - so
08:05 - what I want to do is move this file into
08:07 - here
08:08 - analytics to do this use a the move
08:12 - command or it's typed MV so MV is just
08:17 - move
08:20 - and we type MV and then the file we want
08:24 - to move which is called my file in this
08:26 - case and in directory why you want to
08:29 - move it to so bin
08:33 - bin okay and then we'll type LS again
08:35 - and we see there's no my file anymore in
08:37 - this um
08:39 - directory and we'll type LS bin
08:41 - and you see what I'm doing here
08:44 - before I haven't really typed anything
08:45 - after LS
08:47 - but I'm typing bin after LS now
08:50 - so what this is going to do is it's
08:51 - going to look in the bin folder
08:54 - and list the files in that it's not
08:56 - actually going to list the files in the
08:58 - current one rather the one I've typed
09:01 - okay so you can specify which directory
09:03 - to list files and
09:05 - all right so I hit enter and I see that
09:08 - my file is in the right one
09:12 - so for the sake of this I'm going to set
09:14 - it into the bin
09:15 - okay now I'm in it
09:18 - Okay so
09:20 - let's say I accidentally misspelled my
09:22 - file
09:23 - let's say I want to call it something
09:25 - different like your file
09:27 - so
09:29 - I'm going to use the same command I've
09:30 - already told you it's called move
09:33 - okay so this is the rename command
09:35 - realistically
09:37 - you're essentially moving this my file
09:39 - to a new file
09:41 - see what I mean
09:43 - with a different name
09:45 - because well when you move something you
09:47 - don't actually copy it over and delete
09:48 - you just move it
09:50 - you're not really copying
09:52 - so this is the same for renaming you're
09:54 - not actually copying it over and then
09:57 - renaming it no you're just renaming it
10:00 - so that makes sense to you sorry by
10:04 - accident if you type MV and the original
10:06 - file
10:08 - and then their new files
10:12 - and type LS to see what's done and look
10:15 - no more my file but this is your file
10:18 - and we can count it again so that's
10:20 - still the same thing
10:22 - and yep it's still the same thing
10:25 - all right let's just say now that we
10:27 - don't want this file at all it's
10:28 - absolutely useless we want to delete it
10:30 - well to delete a file in Unix we type
10:33 - the
10:34 - remove command and it's referred to as
10:38 - RM
10:39 - RM stands for remove of course
10:42 - so we'll type ROM your file
10:46 - and we'll type LS and it's completely
10:48 - gone it's deleted it's no longer on my
10:51 - file system
10:53 - and
10:54 - now here's a quick shortcut that
10:56 - you may find useful
10:59 - uh let's say I want to go back I'm in
11:01 - this crazy directory I want to go back
11:04 - to my home folder
11:06 - well to go back here without
11:08 - um typing CD
11:10 - hi I'm Michael I don't want to type this
11:12 - is too long I just type in CD then tilde
11:15 - the squigglyman
11:18 - in
11:19 - Unix or the shell
11:22 - that's I told her as a shortcut
11:25 - for
11:26 - in for the home Direction so if I type
11:30 - you'll see that um
11:32 - the tilde is uh
11:34 - the Home Path and you're up for the sake
11:37 - of it Echo the echo command Echoes
11:40 - whatever you just um right to the
11:44 - command line so hello
11:46 - and it's gonna go back
11:49 - all right so anyway I'm going to CD
11:52 - tilde which is the equivalent of CD home
11:56 - Michael
11:58 - and I'm going to see my work directory
12:00 - and it's in home
12:03 - let's type LS here okay
12:06 - now what I've showed you is actually
12:08 - rather simplistic
12:10 - it's really simple commands
12:13 - and command arguments as well
12:15 - but let's say
12:17 - I'll show you some more advanced
12:20 - examples now actually I'll show you some
12:22 - now
12:25 - well actually now I'll show you how to
12:26 - find the disk space of file users so
12:29 - let's say I have this Linux Mint
12:31 - 10 gnome CD ISO this disk image in my
12:35 - home directory
12:36 - and I've really recently noticed my disk
12:40 - is running out of hard disk space and I
12:42 - want to see how much space this ISO is
12:45 - using
12:46 - to do this I'll type in d u
12:50 - and what du stands for is disk usage
12:54 - so I'll type in Du
12:56 - and Linux Mint 10 you're going to see
12:59 - the ISO
13:00 - and it gives me this line
13:02 - seven one six zero six zero and the file
13:06 - name
13:08 - this is how much this space
13:10 - um this file is taking on the hard drive
13:13 - and this is in kilobytes so this is six
13:16 - hundred seven thousand seven hundred
13:18 - thousand
13:19 - 6 768 000 sorry kilobytes which is 716
13:24 - megabytes
13:26 - of disk space which yep it's reasonable
13:29 - I'm not going to delete it
13:31 - um
13:33 - what I've just done here is I've cleared
13:34 - the screen so let's say I've got a lot
13:36 - of garbage types up yep
13:39 - okay so now I want to clear it it's all
13:42 - messy I can have a type clear
13:45 - or
13:46 - I can do a quick shortcut
13:50 - and type control
13:53 - and L
13:57 - yep so control L will clear the screen
14:00 - and leave the current line also will
14:03 - clear
14:04 - all right
14:06 - so let's get on to the more advanced
14:08 - ones
14:09 - so let's say I'm in this folder the root
14:12 - it's called The Root folder which is the
14:15 - top directory where the entire file
14:18 - system lives and we can see the home
14:20 - folder that um all my files live in
14:23 - okay so let's say I want to
14:27 - um
14:30 - CD
14:34 - I want to move this file
14:39 - uh one folder no no I'm CD into another
14:43 - folder
14:45 - let's go to workspace
14:49 - so go back to quad
14:51 - okay let's say I want to move
14:53 - yeah I'll make a new one Echo
14:57 - pay no attention to this it's just just
14:58 - to make an example
15:02 - okay
15:03 - so let's say I want to move this my file
15:06 - into my home folder
15:09 - from
15:10 - uh
15:12 - the
15:14 - root folder so I'm here and I want this
15:17 - my file
15:18 - into my home directory well to do this
15:21 - I'd use the move command wouldn't I yep
15:22 - so I'll type move
15:24 - and ultimately I'm gonna have to type
15:26 - all this
15:31 - you'll notice I'm typing forward slash
15:34 - well you know what tilde is that's a
15:36 - that's the equivalent of this yes is it
15:38 - not
15:39 - or the equivalent of your username
15:43 - so on top tilde but I'm typing also a
15:46 - forward slash
15:47 - and the forward slash is what you use to
15:49 - represent a folder so a folder path so
15:52 - in this case bin
15:55 - oh no and it'll tell me it's a directory
15:59 - all right so I'm
16:01 - if I type then
16:03 - you know
16:04 - yeah see
16:06 - I need the forward slash so it's a
16:08 - directory so anyway what what was I I
16:11 - was I was doing
16:15 - uh
16:17 - that's right moving the my file to my
16:20 - home directory so I type MV tilde which
16:23 - is the same as home Michael
16:25 - forward slash and wolves it was
16:28 - workspace was it not
16:31 - and it was quadratic factorizer and it
16:35 - was my file yes and now space so
16:40 - new parameter
16:44 - or yeah I'm just gonna write her Michael
16:48 - normally I wouldn't write this I just
16:50 - write tilde but anyway
16:51 - enter
16:53 - so I'm gonna look in my home directory
16:56 - and
16:59 - well you see I can scroll in this but on
17:03 - some computers where it's completely a
17:05 - terminal you can't scroll
17:08 - yep so
17:11 - those people they need more to see more
17:15 - uh information on the screen but they
17:17 - don't have to scroll
17:18 - so
17:21 - in order to see my my file folder which
17:23 - I've moved here I'm gonna have to type
17:25 - in a second command so
17:28 - and
17:30 - it's a button under the
17:33 - backspace with a shift so hold shift and
17:35 - the button under the backspace and you
17:37 - get this straight line
17:38 - and I'm going to type in less
17:41 - so it's going to shorten the amount uh
17:43 - print on the screen I'll explain uh this
17:46 - thing here later and how this works in a
17:50 - different video
17:51 - one of the advanced Parts obviously next
17:53 - bit and knowing that and this is going
17:56 - to list all the files in the directory
17:59 - part by part so as I hit return the
18:03 - enter key is going to keep displaying it
18:06 - every other line line by line so I'll
18:08 - keep going down to M see if the my file
18:10 - is there
18:12 - and what do you know it's there
18:15 - so I've successfully moved it
18:18 - way so I've seen all I wanted to see so
18:21 - I'll just hit the queue button
18:23 - to get out of the less and there we go
18:26 - back to the Shell so I can still so I
18:28 - know that my file is in this folder
18:32 - right so I've showed moving files I've
18:34 - showed renaming uh let's see
18:38 - let's get on to
18:42 - paths all right so let's say I'm in here
18:45 - and I want to quickly get to the home
18:47 - directory
18:49 - well that's one up
18:51 - so I type in CD
18:54 - I could type in this or alternatively
18:58 - what you could do as a shortcut is Type
19:01 - in Dot
19:03 - and Dot will um
19:09 - sorry not DOT my bad dot dot
19:12 - and Dot well the dot will um
19:16 - represents the current directory you're
19:18 - in it's a current folder that you're
19:20 - currently in but dot dot is its parent
19:23 - folder it's it's
19:25 - the folder that contains it so
19:28 - CD dot dot will give me up one and I'll
19:31 - type in
19:32 - and I'll see I'm in home
19:35 - so let's see this talk okay so let's get
19:38 - on to the DOT
19:41 - CD Michael
19:45 - let's say I want to type a command and
19:48 - it's going to be deleting that my file
19:51 - well I would have to type dot my file
19:56 - oops sorry my bad
19:59 - RM dot slash my file
20:04 - so this is the current
20:06 - uh directory
20:08 - so these two represent the current
20:10 - directory plus the my file folder
20:13 - well actually you don't actually need
20:15 - this but for some commands
20:17 - uh you do
20:19 - but anyway you're right yeah
20:22 - and it's deleted the my file
20:26 - alternatively you could have that it's
20:27 - equivalent it's okay
20:31 - why I showed you this dot slash is
20:33 - because some commands need it
20:36 - and you'll know what as you time
20:39 - progresses
20:40 - an example will be probably this one
20:43 - ASCII print I don't know I don't even
20:46 - know what this is but anyway
20:47 - let's just say I have python
20:52 - yo actually never mind I won't even
20:54 - bother with that
20:55 - I have no idea what that is okay so
21:00 - the main reason why anyone would use
21:02 - Unix is because it's a lot faster than
21:06 - a typical file manager I mean I could
21:09 - open up one right now
21:12 - and I could see all the files I've been
21:15 - editing
21:17 - perhaps see I can see the workspace
21:19 - folder I can see quadratic it's all the
21:21 - stuff I could do it all here
21:23 - but let's uh
21:25 - but it's faster because you can do lots
21:27 - of fingers at once so I can see there's
21:29 - a lot of dot C files so C code that I've
21:34 - written
21:35 - over the time and let's say I want to
21:37 - organize my directory I want to move all
21:39 - the C files into another folder let's
21:42 - call it C all right so
21:44 - I'll go back to the Shell because this
21:46 - is
21:47 - um video on Unix after on type control L
21:50 - clear the screen
21:51 - and I want to move all the C files
21:55 - into a directory
22:00 - in home called C so the first thing I'm
22:04 - going to have to do
22:05 - is create a directory and to make a
22:08 - directory in the Shell you type mkdir
22:15 - and what this stands for is quite
22:17 - obvious make directory
22:20 - all right so we type MK Dr C and this
22:23 - will make a c directory in the current
22:26 - directory which is
22:28 - home Zoom so I'm going to type make
22:31 - directory C
22:33 - now if I type LS
22:35 - and then C
22:39 - whoops oh crazy stuff crazy stuff
22:43 - uh LS star C
22:49 - foreign
22:54 - whoops I'll type in LS
22:57 - LS and we'll see there's a c folder
23:00 - right here
23:02 - oh it's apparently two folders
23:06 - okay so I'll type in CD now I'm going to
23:08 - go to the C folder I made
23:12 - have a look at it
23:13 - nothing's in it it's a plank
23:16 - folder Okay so
23:18 - I'm gonna go back
23:21 - to home and I want to move all these dot
23:24 - C files into this C folder well
23:27 - obviously I would use a c commands
23:29 - and the move command sorry
23:31 - and now here's something new I'm going
23:34 - to type in Asterix
23:36 - and what this asterisk is is it's a wild
23:38 - card well what's referred as a wild card
23:41 - and basically
23:43 - the star references represents every
23:47 - possible text you could make
23:49 - for example
23:51 - you could write my name Michael as star
23:54 - l
23:56 - these are equivalent
23:59 - or Mike star l or Mike star
24:05 - ail
24:06 - but it wouldn't be
24:09 - um Mike star l a l star
24:16 - this would not be equivalent
24:19 - the equivalent all right but these two
24:22 - are
24:23 - so you see what I mean in this case the
24:26 - star represents AE
24:29 - or in this case it represents my cat
24:33 - so the staff character represents text
24:36 - that you don't actually know
24:40 - okay so I'm gonna type move and Then
24:43 - star character dot C
24:46 - so in this case it's going to reference
24:48 - every possible
24:50 - file name in this directory so it's
24:53 - going to represents Echo then yeah but
24:56 - this dot C well that's going to pinpoint
24:59 - it down to a few
25:00 - so it will only reference these
25:04 - it won't reference this because it's got
25:06 - some text after it
25:07 - so it will only reference
25:10 - this file
25:14 - this file
25:17 - and this file
25:18 - but it won't reference any other really
25:22 - because they're not DOT C and they're
25:24 - just finished lovingly I mean in this
25:25 - case there's some text after it so you
25:29 - won't reference it
25:30 - nice we're moving all the star.c's to
25:34 - the C directory
25:36 - the Arts write it as dot C
25:39 - okay
25:40 - and hit enter it's done it all let's
25:43 - have a look at it
25:46 - there we go all of our DOT C code is
25:50 - moved into
25:51 - this C folder
25:55 - just like that
25:57 - so
25:58 - and in one command relatively simple
26:03 - I've moved all my saved folders files
26:05 - into this folder
26:08 - easy right
26:10 - okay
26:14 - now let's say I want to
26:16 - copy all those files that I've just
26:19 - moved
26:23 - all these files I want just moved into
26:25 - my
26:28 - into a new folder okay I'll make a new
26:30 - folder right now
26:38 - so I want a clone of it so I want all
26:40 - these files again in this new folder
26:42 - because currently
26:44 - there's nothing in it so I'll go back a
26:46 - bit LS see that I mean my
26:51 - RC folder
26:53 - so what I type in is CP
26:56 - wherever I strategy CP
26:58 - well if I haven't CP stands for copy
27:01 - and what it does is it copies files okay
27:04 - so CP
27:05 - I'm just going to use star so that's
27:07 - every single possible file in this
27:09 - directory
27:11 - so it's going to move absolutely
27:12 - everything into new folder
27:20 - hit enter
27:29 - and there we go
27:32 - what do you know it's decided to skip
27:34 - emitting directory van that's basically
27:37 - jargon for skipping this directory not
27:40 - going to copy it okay so that's how you
27:42 - copy files with the asterisks
27:46 - then so let's say I want to find the
27:49 - files
27:50 - I'm at my shell
27:52 - I've been working on some code and now
27:55 - I've lost it I want to find it I forgot
27:57 - the directories in so I type the find
27:58 - command now it's not called fnd it's not
28:02 - called
28:03 - Finn it's called find okay you can't
28:06 - really short on it
28:09 - if the it could be FD but it's
28:11 - got no it's just fine okay so
28:16 - now this find command has parameters on
28:18 - it
28:19 - as actually has a lot and I can't
28:21 - actually sit here and explain every
28:23 - single one of them to you because that
28:24 - would take a ridiculous amount of time
28:27 - so what you do is you type dash dash
28:30 - help
28:32 - and this is the parameter to basically
28:34 - every Unix command
28:36 - and hitting enter is going to print out
28:38 - a bunch of information
28:41 - so
28:42 - I can see now that there's more
28:43 - information that can fit in my screen so
28:45 - I'm going to use less
28:47 - or I basically just did there is I hit
28:49 - the upper button and that's a shortcut
28:52 - to get into what you've just typed what
28:54 - you've just entered
28:56 - so here I can browse through all the
28:59 - commands I've typed today or in a period
29:02 - of time
29:03 - okay so I'm going to hit up once help
29:07 - straight line less
29:09 - there now I'm going to see all the
29:10 - output that the help command gives you
29:13 - like so
29:16 - okay
29:17 - so I'm gonna look at this what what do I
29:20 - need
29:22 - what do I need
29:25 - it's all crazy this doesn't make any
29:28 - sense to me so in order to use this I'm
29:30 - going to type man find
29:33 - now man is a very useful uh command and
29:37 - what it basically stands for is manual
29:39 - so man will give you the manual for find
29:42 - man will not work for actually
29:44 - everything a lot of commands won't have
29:46 - a man manual
29:48 - but basically all unix commands do but
29:51 - once you download the internet they
29:53 - probably won't have one
29:54 - they could but they probably won't so
29:56 - man finds is going to give us a manual
29:59 - it gives us help here on the bottom
30:02 - we can have a press h for help more help
30:06 - all here we can use our keys to navigate
30:11 - and this gives us a brilliant
30:13 - description of the man find command
30:16 - which is absolutely excellent you can
30:19 - become an expert and find with this
30:21 - here's a parameters you can
30:24 - all the information all this text
30:26 - describing just about everything
30:31 - descriptions of every little parameter
30:33 - you have see if we can have one to turn
30:35 - off warning messages
30:37 - here
30:38 - well I'm already quite familiar with
30:40 - find
30:41 - and so I'm going to type find I name so
30:45 - it's going to find all files with this
30:46 - name
30:48 - and I'm going to type star dot C all my
30:51 - C files
30:52 - type I want to I don't really want files
30:55 - so type f
30:57 - and that's all I realistically need okay
31:02 - enter
31:04 - and it's going to go and find print
31:06 - every single C file in my directory
31:10 - simple enough y'all type it again for a
31:12 - different type I'll call it APK
31:16 - and this prints every single APK file I
31:19 - have in my home folder or at least my
31:21 - current directory
31:23 - and you see these dot these file paths
31:26 - well these are actual file paths
31:27 - relative to what directory you're in now
31:30 - so
31:32 - if it's like this here if I were to do
31:35 - it in this command
31:40 - now what's happening now is it's a touch
31:42 - searching my entire file system
31:45 - for APK files
31:49 - looking looking
31:52 - I literally have tens of thousands of
31:54 - files in this Hardware will take ages to
31:57 - the search and so a quick shortcut
31:59 - there this third parameter
32:02 - so it makes it so it only searches the
32:04 - home folder
32:06 - path must proceed home
32:13 - oh that's right you have to type it here
32:16 - I think
32:18 - whoops
32:22 - and there we go and we see this path is
32:26 - different to this path
32:30 - because they're relative they're
32:31 - relative to what directory you're in
32:34 - okay
32:36 - so let's see
32:38 - want to
32:41 - to do clear the screen
32:45 - once I've covered quite a bit
32:47 - I've probably gone longer than I should
32:50 - have but
32:52 - hey it's it's Unix
32:54 - it's a lot to cover
32:57 - oh man so
32:59 - basically every command I've said
33:00 - there's a manual for
33:04 - you can get a good description about
33:06 - everything
33:08 - normally I don't actually go on the
33:09 - manual I just type in uh dash dash help
33:13 - and this will give me a help for
33:15 - everything
33:16 - so it gives you a brief description I
33:19 - want to copy files by force I want to
33:21 - copy a directory you know this directory
33:26 - and yeah things like that
33:30 - so yeah I'll do an example I want to
33:32 - copy directory so let's see what do I
33:34 - have now
33:35 - um in my root folder so I'll go to the
33:37 - home
33:39 - LS
33:41 - okay let's move this C folder to
33:45 - workspace okay so to do this I'm going
33:48 - to type you know not move let's copy it
33:50 - okay so copy so I'll type CP
33:54 - you know I'm just going to show an
33:55 - example of what a typical person
33:57 - who's trying to copy would do so C and
34:01 - then workspace this is probably what you
34:03 - do right so let's hit enter
34:05 - and it tells me it's a directory it's
34:07 - not going to copy the directory
34:10 - so in order to make to do it let's look
34:12 - at the help all right so
34:14 - this is what you'd probably should do
34:16 - when trying to do this and it doesn't
34:17 - work look at the help page
34:20 - okay and we see that
34:22 - if um
34:25 - we need to
34:28 - read these
34:35 - keep going down down
34:37 - here we go
34:38 - look at this one ah recursive copy
34:42 - directory copy of directories
34:45 - recursively
34:47 - I think that's one we're missing
34:50 - ah here we go
34:52 - V verbose this actually doesn't really
34:55 - affect anything it just um
34:58 - tells the command to print what it's
35:00 - doing I always like to do it when um
35:04 - doing it okay so I'm going to type CP
35:07 - Dash
35:09 - R for recursive
35:12 - Dash V
35:15 - now these dashes these are what you um
35:17 - type in order to give a parameters to CP
35:21 - and a quick hint is you don't actually
35:23 - have to type this second Dash you could
35:24 - just type RV
35:26 - but this is only for some application so
35:29 - generally I just hope I've seen like
35:31 - this and then we'll type c and then
35:33 - workspace
35:36 - now you see it's printed up a ton of
35:39 - stuff just a ton of information too much
35:41 - information this is because I typed V
35:44 - verbose so it verbosely told me
35:47 - everything that's happening so let's
35:49 - have a look at workspace
35:51 - and we see there's a C file so let's
35:54 - let's see what's in C and it's all this
35:57 - stuff
35:58 - okay
36:02 - so let's say
36:06 - I have a command
36:08 - I've written out my own command because
36:10 - I'm a programmer so let's say I have one
36:14 - quickly compile this code
36:16 - don't really pay attention to this
36:18 - okay
36:20 - and I have my command called gcd
36:24 - let's say I want to execute this command
36:26 - in this directory what you'd guess I
36:29 - typed GCV right this is what your tune
36:31 - would happen well if I hit enter
36:33 - it's not going to work
36:36 - this is because when you type gcd it
36:39 - searches the bin folder
36:42 - of the root directory so
36:46 - this folder and
36:48 - this folder and
36:50 - this folder
36:52 - it searches these three directories
36:55 - for uh gcd
36:57 - and it doesn't find it so it tells me
36:59 - command not found
37:01 - well
37:02 - obviously it's not found because the
37:04 - executables in this directory it's not
37:07 - in any of those three
37:09 - so in order to execute this command I'm
37:10 - gonna have to
37:11 - specify the command is an instructor of
37:14 - the dot slash remember this well anyway
37:17 - Dot gcd
37:19 - hitting enter and the command is
37:22 - executing this is the
37:25 - program I wrote
37:27 - and we'll yeah
37:30 - and yeah so that's basically it
37:34 - yeah I have no idea how long this video
37:36 - is going for but I think it's enough to
37:39 - cover uh
37:41 - file moving and stuff it's just probably
37:45 - too long actually
37:46 - let me just look at this
37:49 - you see here there's a Unix shell as
37:51 - well that's what I'm using to record
37:53 - my R screen
37:55 - looking here it tells me
37:58 - it's a whole gigabyte wow
38:01 - doesn't actually tell me how long it is
38:02 - but I hear you
38:04 - 35 minutes wow
38:07 - long video I'm gonna end it now okay
38:09 - goodbye I'll make another a few more
38:13 - videos on Unix
38:14 - see you in those videos bye
38:19 - okay so hello and welcome to my uh
38:22 - second video on our Unix
38:25 - and just watching over the first one I
38:27 - noticed a few factual errors in uh the
38:30 - video
38:32 - and so a quick Google search why notice
38:35 - them after I did a quick Google search
38:36 - on Unix and I got to this site
38:38 - excellent site wonderful site free
38:41 - engineers.org forward slash Learn remix
38:43 - yeah blah blah I'll put in the
38:45 - description box below
38:47 - and it's basically got all this like
38:49 - factual information you know just syntax
38:52 - and stuff for unix commands
38:54 - and it's just great so it's condensed
38:56 - into one quick little page
38:59 - and you can probably go through in well
39:01 - 10 minutes
39:03 - and I do recommend you get on here
39:05 - because
39:06 - not everything I say is maybe the best
39:08 - way it's uh done
39:10 - and you're probably the best teacher for
39:13 - yourself because well yeah
39:16 - and seeing a few things I got wrong or
39:18 - not as correct would be like CD doesn't
39:23 - stand for current direct change
39:25 - directory stands for change current
39:27 - directory which I thought was somewhat
39:29 - odd CCD yeah
39:33 - and PWD stands for present work
39:36 - directory
39:37 - which makes a lot more sense
39:40 - you know what I said
39:42 - and also looking at this you can just
39:44 - type CD to get to your home directory so
39:46 - for example
39:47 - I'm here in my home directory now but
39:49 - I'll go to my documents
39:51 - and instead of typing this
39:54 - I could just type this
39:56 - I honestly didn't know that until well
39:58 - that quick Google search
40:00 - so yeah you should actually go out and
40:03 - try find information on Unix yourself as
40:05 - well
40:06 - not everything people tell you is the
40:09 - perfect way
40:11 - okay so I'm looking at this I'm going to
40:14 - use this as a guide now to uh
40:16 - to explain uh let's see um I think today
40:19 - I'm going to cover
40:21 - permissions file permissions and uh
40:26 - let's see and maybe this as well moving
40:30 - renaming and copying files
40:33 - okay so permissions permissions here we
40:35 - go
40:37 - in our Unix well we have
40:40 - it's just like every other wheel
40:42 - file system
40:44 - whatever we have our permissions for
40:47 - files so for example if we like download
40:50 - a file off the internet we might not
40:52 - want it to be executable we don't we
40:55 - might not want the uh
40:56 - person to actually physically be able to
40:59 - execute the file because well it might
41:01 - be dangerous it might be a virus it
41:03 - might be malware something like that so
41:07 - there's an executable permission which
41:09 - this x represents
41:12 - and
41:13 - what I think the X represents and yeah I
41:16 - do believe
41:18 - and uh
41:19 - you may also want to keep files private
41:22 - for example there's multiple users on
41:23 - your computer you might just want
41:26 - the cliff user to be able to read it
41:30 - rather than the whole system
41:34 - so any user on the phone asks this one
41:37 - so
41:39 - permissions also you might only want a
41:41 - file to be read only you might not want
41:43 - anyone to write to the file
41:46 - foreign
41:47 - if it's like a some sort of special
41:52 - I don't know whatever so
41:55 - let's see
41:57 - let's do examples shall we so I'm in my
41:59 - home directory you can see that
42:02 - and let's say I have a new file let's
42:06 - yeah I'll make a new one
42:08 - and I want
42:10 - whoops we've got a CD to test okay so
42:13 - let's clear that
42:14 - so I don't have any files in here
42:18 - you know I think I'll I'll do this one
42:20 - first
42:21 - moving renaming copying no not sorry
42:23 - editing viewing
42:26 - files so with this I'll create some
42:28 - files and then I'll modify the
42:30 - permissions on them
42:31 - all right so let's see here
42:35 - in Unix you can do uh
42:40 - needs to be a editor called Pico
42:42 - which I was proprietary
42:45 - it had a private
42:48 - oh no oh entity whatever
42:50 - so we couldn't actually be included in
42:53 - the uh the public gnu one so that's a
42:57 - make a clone of it and they made a clone
42:58 - called Nano so you might get the uh the
43:02 - naming convention
43:03 - here so with Nano we just type Nano plus
43:08 - the file name that you want to edit so
43:11 - I'm going to call it a file okay so Nano
43:13 - a file and it'll bring me to this little
43:15 - editor so
43:18 - here I can just write text just updates
43:21 - live
43:22 - and you can do multiple lines whatever
43:25 - you can hit enter and
43:27 - behaves just like a normal text editor
43:30 - would except without a mouse
43:32 - but that's fine because you have the
43:33 - arrow keys to navigate and
43:35 - well this is all right
43:37 - and now let's quickly get out of it I
43:39 - hit Ctrl X in the menu below and that
43:42 - gives you what you can do
43:43 - and this little up thing stands for
43:45 - control so control X bring you to a new
43:48 - menu do I want to save
43:50 - yes I want to save the buffer so I hit Y
43:53 - what file do I want to call it name
43:56 - hey files fine there now hitting LS I
43:59 - see that a file
44:01 - is there okay
44:04 - and let's just say I just CD to this
44:07 - directory I see there's a file called a
44:09 - file let's pretend I don't know what's
44:11 - in it I want to see what's in it well
44:12 - there's a command called cat
44:14 - now cat like this file thing says
44:18 - we'll dump a file to the screen in ASCII
44:22 - so that means is it'll print out what's
44:24 - in the file in the ASCII uh
44:28 - it's just our standard
44:31 - so
44:32 - cat a file now this is written in nasty
44:35 - text which means like the 128 letters
44:39 - numbers in the table I don't know how to
44:41 - scramble
44:42 - and we see exactly what's in the file
44:45 - this is what I wrote down in uh and Cat
44:48 - will print it out to the screen
44:51 - now alternatively let's say the file's
44:53 - really long
44:55 - so let's make a new one
44:58 - see here where can I go okay I'll just
45:01 - go here
45:03 - uh
45:05 - so I got this file
45:08 - and you see just a whole
45:10 - bunch of information has come out onto
45:13 - the screen just print it out
45:16 - but let's say I want to see the
45:19 - beginning of it I don't want to have to
45:20 - retype it and and do this
45:23 - no I only want to see this beginning
45:25 - part of it
45:28 - well you can do that and as a file the
45:31 - command called Head
45:33 - and hit will give you what's referred to
45:35 - as the head of the file and by that I
45:38 - mean the beginning of it so head file
45:40 - log.txt will print out the beginning bit
45:43 - of text
45:47 - oh it's actually quite a lot
45:51 - oh no no it's not it's just this part
45:52 - okay
45:54 - so it's printed out the beginning part
45:56 - of it and there is a
45:58 - another command that's just like this
46:00 - it's called tail
46:01 - and we'll do the opposite it prints to
46:03 - the end of it so I'll just quickly type
46:06 - that
46:07 - and it gives me the end
46:09 - the last few lines to the file
46:13 - and let's see the help we might be able
46:15 - to select how much lines we want
46:19 - yeah here we go hitting n we can uh
46:21 - specify how much lines the default's 10.
46:25 - okay
46:28 - all right
46:29 - so let's see here
46:32 - let's see what else is there anyone else
46:35 - okay so pinned up yeah see look n would
46:39 - give us the amount of numbers
46:42 - all right
46:43 - uh yeah you could use these are the
46:46 - other editors
46:48 - VI and uh emacs
46:51 - and VI is just a crazy editor
46:55 - it's just really I've no idea how to use
46:58 - it I mean I couldn't care less about it
47:00 - actually
47:01 - I'm sure if you don't do a quick Google
47:03 - search or a YouTube search you'll find a
47:05 - tutorial on it I'm not even going to go
47:07 - on this it's just honestly the point
47:10 - it's ancient
47:11 - emacs uh well I could say the same but I
47:15 - do see quite a lot of people still using
47:16 - it
47:19 - I don't even have emacs on my system
47:21 - okay I'm sure I have VI I think everyone
47:23 - has VI and you can just see from this I
47:26 - don't even know what's going on
47:30 - I don't know what to say about it just
47:32 - get out of it
47:35 - I don't even know how to get out of it
47:37 - okay
47:38 - that's terrible there we go had to force
47:42 - close it
47:43 - all right same
47:46 - basically if I ever want an advanced
47:48 - editor I wouldn't go VI I'd just get
47:50 - like a graphical one like really
47:53 - all right so we'll say
47:56 - less yes you can write less and instead
47:58 - of using it like this
48:02 - like uh whatever and they're doing that
48:04 - you could just write less and then the
48:06 - file name so
48:08 - far log and we can do that and it's the
48:12 - same thing as before we hit Q again to
48:14 - leave it
48:15 - okay
48:16 - so that's editing
48:18 - viewing and editing files so to view
48:21 - your type cat
48:22 - to edit use an Editor to um
48:27 - too well uh what's it called
48:29 - edit the file so let's go back to our
48:31 - test directory
48:34 - all right so if you're seeing this
48:36 - all right so if you're seeing this
48:38 - uh what's it called I've decided that
48:40 - after just doing the permissions file uh
48:44 - part of the video
48:45 - he got way too complicated I didn't do
48:48 - it very well so I'm gonna
48:50 - cut the permissions part out of this
48:53 - tutorial there you go sorry getting long
48:55 - enough anyway
48:56 - I'll come back to file permissions
48:59 - in another video okay so
49:02 - random
49:04 - see you then

Cleaned transcript:

foreign welcome to the beginning of my Unix tutorial series uh fabianis now assumingly if you've clicked this video you know what Unix is but if you haven't and you just dumbed along curiosity well Unix is an operating system from the 1960s which uh we can still find uh today in our modern operating systems and it's operating systems like Mac OS X or Linux which I'm using now you can even find it on things like an iPhone or an Android smartphone but anyway you can't actually find it on a Microsoft's Windows which I'm sure most of you are running most of the population at least but there is a way of actually getting Unix onto it which I actually might make a video on later but anyway now when I say it this is a Unix system I don't mean all this like all this graphical stuff I mean what you get in the terminal or the shell and you get there by going to the terminal application or at least it's terminal in my case on a Mac it's called terminal I know that but on your system it might be called console or shell or something like that anyway S I mean what you get here in this little application the text so when I type stuff in commands and stuff you get output that's what I mean by Unix the shell okay so I'm going to go back to my special terminal with a large font for you guys okay so I must say this what I have now isn't actually Unix from the 60s uh 20 or 30 years ago whatever it was Rewritten and what I have now is called gnu well it's not actually called canoe but well it's from the gnu Foundation and the interesting thing about canoe GNU is it stands for gnu is not Unix that's the acronym and basically what it is is it's a clone of it really it's Unix Rewritten to be open source or at least open we found uh legal restrictions because the original one Unix was proprietary which meant it was had a private owner had legal restrictions on it well the new one the one I'm running now run most if not everyone's running is a open which means it's got no real restrictions on it now back to the Shell okay so the Unix shell is a command Central thing you only open it if you want to do something and you can only do something with commands for example uh this will print out some stuff and so and so will this and this will print out the username of this logged in okay so one of the main things you anyone will really want to do on Unix well the shell I'm gonna prefer to announce it from now on as this shell one of the main things anyone wants to do with the shell is navigate the file system so make move delete file so it's you know Etc rename them yeah things like that and I'm going to show you that in this video okay so I'll never gain the fastest you're going to need to know a few key commands which are probably the most the main commands you'll need in Unix or the shell and the main one will probably be LS and LS stands for a list the designers for it being you know smart to take out the um unimportant characters from The Words the verbs and just make it really short two letters LS to list files in the directory and that's fine I guess it's a bit confusing at first but once you get used to it Alice is better you can type it quicker it's shorter yeah so Ellis use LS to um to view the um files and they're directly to list them in a ascending order from A to Z okay so LS list the um files in a directory and you can see which directory you're in and when I say directory I mean like the path the file system path of like where you are so in terms of Windows you have the C drive you can have your my documents folder in Linux I have my home folder which I'm currently in on Mac it's the same so and you can see what current director you're in on the Unix shell by typing the PWD command and this basically stands for personal work directory so the current directory you're working in so let's quickly that so I'll type in PWD and it tells me I'm in home Michael and that's a directory the first folder is called home and in the home folder I'm in Michael and this is directory I'm in so let's say I want to change directories so I want to change the current place I'm in so well I have to go somewhere so I'll quickly hit LS to see where I can go and I guess I'll go to this workspace folder I can tell it's a directory because it's in blue or green outside of the blue in this case that's because it's one of the attributes of it but anyway uh so I type in CD and this is another new command CD well CD stands for change directory and this command you can change the current directory you're into another so I'm going to type CD and then the name of the directory I want to go to now you notice there's nothing before it you know no path before this workspace name and that's because well I'm in this home folder which contains the workspace folder so CD workspace will hit enter and type in PWD and look my work direct directory has changed to workspace so I'll type in LS and Ellis tells me that there's four folders in this workspace folder is four so let's CD again to quadratic one and sell us okay and I can see more files I can see the program I wrote for Android okay so let's say I want I have a file here called my file right so I can have a look at what's in this my file this is cat command I'll explain it later and I say it's a text file which has this gibberish in it okay well let's say this my file that I've made is in the wrong place I don't want it in this quadratic factorizer folder I want it in the bin folder this here so what I want to do is move this file into here analytics to do this use a the move command or it's typed MV so MV is just move and we type MV and then the file we want to move which is called my file in this case and in directory why you want to move it to so bin bin okay and then we'll type LS again and we see there's no my file anymore in this um directory and we'll type LS bin and you see what I'm doing here before I haven't really typed anything after LS but I'm typing bin after LS now so what this is going to do is it's going to look in the bin folder and list the files in that it's not actually going to list the files in the current one rather the one I've typed okay so you can specify which directory to list files and all right so I hit enter and I see that my file is in the right one so for the sake of this I'm going to set it into the bin okay now I'm in it Okay so let's say I accidentally misspelled my file let's say I want to call it something different like your file so I'm going to use the same command I've already told you it's called move okay so this is the rename command realistically you're essentially moving this my file to a new file see what I mean with a different name because well when you move something you don't actually copy it over and delete you just move it you're not really copying so this is the same for renaming you're not actually copying it over and then renaming it no you're just renaming it so that makes sense to you sorry by accident if you type MV and the original file and then their new files and type LS to see what's done and look no more my file but this is your file and we can count it again so that's still the same thing and yep it's still the same thing all right let's just say now that we don't want this file at all it's absolutely useless we want to delete it well to delete a file in Unix we type the remove command and it's referred to as RM RM stands for remove of course so we'll type ROM your file and we'll type LS and it's completely gone it's deleted it's no longer on my file system and now here's a quick shortcut that you may find useful uh let's say I want to go back I'm in this crazy directory I want to go back to my home folder well to go back here without um typing CD hi I'm Michael I don't want to type this is too long I just type in CD then tilde the squigglyman in Unix or the shell that's I told her as a shortcut for in for the home Direction so if I type you'll see that um the tilde is uh the Home Path and you're up for the sake of it Echo the echo command Echoes whatever you just um right to the command line so hello and it's gonna go back all right so anyway I'm going to CD tilde which is the equivalent of CD home Michael and I'm going to see my work directory and it's in home let's type LS here okay now what I've showed you is actually rather simplistic it's really simple commands and command arguments as well but let's say I'll show you some more advanced examples now actually I'll show you some now well actually now I'll show you how to find the disk space of file users so let's say I have this Linux Mint 10 gnome CD ISO this disk image in my home directory and I've really recently noticed my disk is running out of hard disk space and I want to see how much space this ISO is using to do this I'll type in d u and what du stands for is disk usage so I'll type in Du and Linux Mint 10 you're going to see the ISO and it gives me this line seven one six zero six zero and the file name this is how much this space um this file is taking on the hard drive and this is in kilobytes so this is six hundred seven thousand seven hundred thousand 6 768 000 sorry kilobytes which is 716 megabytes of disk space which yep it's reasonable I'm not going to delete it um what I've just done here is I've cleared the screen so let's say I've got a lot of garbage types up yep okay so now I want to clear it it's all messy I can have a type clear or I can do a quick shortcut and type control and L yep so control L will clear the screen and leave the current line also will clear all right so let's get on to the more advanced ones so let's say I'm in this folder the root it's called The Root folder which is the top directory where the entire file system lives and we can see the home folder that um all my files live in okay so let's say I want to um CD I want to move this file uh one folder no no I'm CD into another folder let's go to workspace so go back to quad okay let's say I want to move yeah I'll make a new one Echo pay no attention to this it's just just to make an example okay so let's say I want to move this my file into my home folder from uh the root folder so I'm here and I want this my file into my home directory well to do this I'd use the move command wouldn't I yep so I'll type move and ultimately I'm gonna have to type all this you'll notice I'm typing forward slash well you know what tilde is that's a that's the equivalent of this yes is it not or the equivalent of your username so on top tilde but I'm typing also a forward slash and the forward slash is what you use to represent a folder so a folder path so in this case bin oh no and it'll tell me it's a directory all right so I'm if I type then you know yeah see I need the forward slash so it's a directory so anyway what what was I I was I was doing uh that's right moving the my file to my home directory so I type MV tilde which is the same as home Michael forward slash and wolves it was workspace was it not and it was quadratic factorizer and it was my file yes and now space so new parameter or yeah I'm just gonna write her Michael normally I wouldn't write this I just write tilde but anyway enter so I'm gonna look in my home directory and well you see I can scroll in this but on some computers where it's completely a terminal you can't scroll yep so those people they need more to see more uh information on the screen but they don't have to scroll so in order to see my my file folder which I've moved here I'm gonna have to type in a second command so and it's a button under the backspace with a shift so hold shift and the button under the backspace and you get this straight line and I'm going to type in less so it's going to shorten the amount uh print on the screen I'll explain uh this thing here later and how this works in a different video one of the advanced Parts obviously next bit and knowing that and this is going to list all the files in the directory part by part so as I hit return the enter key is going to keep displaying it every other line line by line so I'll keep going down to M see if the my file is there and what do you know it's there so I've successfully moved it way so I've seen all I wanted to see so I'll just hit the queue button to get out of the less and there we go back to the Shell so I can still so I know that my file is in this folder right so I've showed moving files I've showed renaming uh let's see let's get on to paths all right so let's say I'm in here and I want to quickly get to the home directory well that's one up so I type in CD I could type in this or alternatively what you could do as a shortcut is Type in Dot and Dot will um sorry not DOT my bad dot dot and Dot well the dot will um represents the current directory you're in it's a current folder that you're currently in but dot dot is its parent folder it's it's the folder that contains it so CD dot dot will give me up one and I'll type in and I'll see I'm in home so let's see this talk okay so let's get on to the DOT CD Michael let's say I want to type a command and it's going to be deleting that my file well I would have to type dot my file oops sorry my bad RM dot slash my file so this is the current uh directory so these two represent the current directory plus the my file folder well actually you don't actually need this but for some commands uh you do but anyway you're right yeah and it's deleted the my file alternatively you could have that it's equivalent it's okay why I showed you this dot slash is because some commands need it and you'll know what as you time progresses an example will be probably this one ASCII print I don't know I don't even know what this is but anyway let's just say I have python yo actually never mind I won't even bother with that I have no idea what that is okay so the main reason why anyone would use Unix is because it's a lot faster than a typical file manager I mean I could open up one right now and I could see all the files I've been editing perhaps see I can see the workspace folder I can see quadratic it's all the stuff I could do it all here but let's uh but it's faster because you can do lots of fingers at once so I can see there's a lot of dot C files so C code that I've written over the time and let's say I want to organize my directory I want to move all the C files into another folder let's call it C all right so I'll go back to the Shell because this is um video on Unix after on type control L clear the screen and I want to move all the C files into a directory in home called C so the first thing I'm going to have to do is create a directory and to make a directory in the Shell you type mkdir and what this stands for is quite obvious make directory all right so we type MK Dr C and this will make a c directory in the current directory which is home Zoom so I'm going to type make directory C now if I type LS and then C whoops oh crazy stuff crazy stuff uh LS star C foreign whoops I'll type in LS LS and we'll see there's a c folder right here oh it's apparently two folders okay so I'll type in CD now I'm going to go to the C folder I made have a look at it nothing's in it it's a plank folder Okay so I'm gonna go back to home and I want to move all these dot C files into this C folder well obviously I would use a c commands and the move command sorry and now here's something new I'm going to type in Asterix and what this asterisk is is it's a wild card well what's referred as a wild card and basically the star references represents every possible text you could make for example you could write my name Michael as star l these are equivalent or Mike star l or Mike star ail but it wouldn't be um Mike star l a l star this would not be equivalent the equivalent all right but these two are so you see what I mean in this case the star represents AE or in this case it represents my cat so the staff character represents text that you don't actually know okay so I'm gonna type move and Then star character dot C so in this case it's going to reference every possible file name in this directory so it's going to represents Echo then yeah but this dot C well that's going to pinpoint it down to a few so it will only reference these it won't reference this because it's got some text after it so it will only reference this file this file and this file but it won't reference any other really because they're not DOT C and they're just finished lovingly I mean in this case there's some text after it so you won't reference it nice we're moving all the star.c's to the C directory the Arts write it as dot C okay and hit enter it's done it all let's have a look at it there we go all of our DOT C code is moved into this C folder just like that so and in one command relatively simple I've moved all my saved folders files into this folder easy right okay now let's say I want to copy all those files that I've just moved all these files I want just moved into my into a new folder okay I'll make a new folder right now so I want a clone of it so I want all these files again in this new folder because currently there's nothing in it so I'll go back a bit LS see that I mean my RC folder so what I type in is CP wherever I strategy CP well if I haven't CP stands for copy and what it does is it copies files okay so CP I'm just going to use star so that's every single possible file in this directory so it's going to move absolutely everything into new folder hit enter and there we go what do you know it's decided to skip emitting directory van that's basically jargon for skipping this directory not going to copy it okay so that's how you copy files with the asterisks then so let's say I want to find the files I'm at my shell I've been working on some code and now I've lost it I want to find it I forgot the directories in so I type the find command now it's not called fnd it's not called Finn it's called find okay you can't really short on it if the it could be FD but it's got no it's just fine okay so now this find command has parameters on it as actually has a lot and I can't actually sit here and explain every single one of them to you because that would take a ridiculous amount of time so what you do is you type dash dash help and this is the parameter to basically every Unix command and hitting enter is going to print out a bunch of information so I can see now that there's more information that can fit in my screen so I'm going to use less or I basically just did there is I hit the upper button and that's a shortcut to get into what you've just typed what you've just entered so here I can browse through all the commands I've typed today or in a period of time okay so I'm going to hit up once help straight line less there now I'm going to see all the output that the help command gives you like so okay so I'm gonna look at this what what do I need what do I need it's all crazy this doesn't make any sense to me so in order to use this I'm going to type man find now man is a very useful uh command and what it basically stands for is manual so man will give you the manual for find man will not work for actually everything a lot of commands won't have a man manual but basically all unix commands do but once you download the internet they probably won't have one they could but they probably won't so man finds is going to give us a manual it gives us help here on the bottom we can have a press h for help more help all here we can use our keys to navigate and this gives us a brilliant description of the man find command which is absolutely excellent you can become an expert and find with this here's a parameters you can all the information all this text describing just about everything descriptions of every little parameter you have see if we can have one to turn off warning messages here well I'm already quite familiar with find and so I'm going to type find I name so it's going to find all files with this name and I'm going to type star dot C all my C files type I want to I don't really want files so type f and that's all I realistically need okay enter and it's going to go and find print every single C file in my directory simple enough y'all type it again for a different type I'll call it APK and this prints every single APK file I have in my home folder or at least my current directory and you see these dot these file paths well these are actual file paths relative to what directory you're in now so if it's like this here if I were to do it in this command now what's happening now is it's a touch searching my entire file system for APK files looking looking I literally have tens of thousands of files in this Hardware will take ages to the search and so a quick shortcut there this third parameter so it makes it so it only searches the home folder path must proceed home oh that's right you have to type it here I think whoops and there we go and we see this path is different to this path because they're relative they're relative to what directory you're in okay so let's see want to to do clear the screen once I've covered quite a bit I've probably gone longer than I should have but hey it's it's Unix it's a lot to cover oh man so basically every command I've said there's a manual for you can get a good description about everything normally I don't actually go on the manual I just type in uh dash dash help and this will give me a help for everything so it gives you a brief description I want to copy files by force I want to copy a directory you know this directory and yeah things like that so yeah I'll do an example I want to copy directory so let's see what do I have now um in my root folder so I'll go to the home LS okay let's move this C folder to workspace okay so to do this I'm going to type you know not move let's copy it okay so copy so I'll type CP you know I'm just going to show an example of what a typical person who's trying to copy would do so C and then workspace this is probably what you do right so let's hit enter and it tells me it's a directory it's not going to copy the directory so in order to make to do it let's look at the help all right so this is what you'd probably should do when trying to do this and it doesn't work look at the help page okay and we see that if um we need to read these keep going down down here we go look at this one ah recursive copy directory copy of directories recursively I think that's one we're missing ah here we go V verbose this actually doesn't really affect anything it just um tells the command to print what it's doing I always like to do it when um doing it okay so I'm going to type CP Dash R for recursive Dash V now these dashes these are what you um type in order to give a parameters to CP and a quick hint is you don't actually have to type this second Dash you could just type RV but this is only for some application so generally I just hope I've seen like this and then we'll type c and then workspace now you see it's printed up a ton of stuff just a ton of information too much information this is because I typed V verbose so it verbosely told me everything that's happening so let's have a look at workspace and we see there's a C file so let's let's see what's in C and it's all this stuff okay so let's say I have a command I've written out my own command because I'm a programmer so let's say I have one quickly compile this code don't really pay attention to this okay and I have my command called gcd let's say I want to execute this command in this directory what you'd guess I typed GCV right this is what your tune would happen well if I hit enter it's not going to work this is because when you type gcd it searches the bin folder of the root directory so this folder and this folder and this folder it searches these three directories for uh gcd and it doesn't find it so it tells me command not found well obviously it's not found because the executables in this directory it's not in any of those three so in order to execute this command I'm gonna have to specify the command is an instructor of the dot slash remember this well anyway Dot gcd hitting enter and the command is executing this is the program I wrote and we'll yeah and yeah so that's basically it yeah I have no idea how long this video is going for but I think it's enough to cover uh file moving and stuff it's just probably too long actually let me just look at this you see here there's a Unix shell as well that's what I'm using to record my R screen looking here it tells me it's a whole gigabyte wow doesn't actually tell me how long it is but I hear you 35 minutes wow long video I'm gonna end it now okay goodbye I'll make another a few more videos on Unix see you in those videos bye okay so hello and welcome to my uh second video on our Unix and just watching over the first one I noticed a few factual errors in uh the video and so a quick Google search why notice them after I did a quick Google search on Unix and I got to this site excellent site wonderful site free engineers.org forward slash Learn remix yeah blah blah I'll put in the description box below and it's basically got all this like factual information you know just syntax and stuff for unix commands and it's just great so it's condensed into one quick little page and you can probably go through in well 10 minutes and I do recommend you get on here because not everything I say is maybe the best way it's uh done and you're probably the best teacher for yourself because well yeah and seeing a few things I got wrong or not as correct would be like CD doesn't stand for current direct change directory stands for change current directory which I thought was somewhat odd CCD yeah and PWD stands for present work directory which makes a lot more sense you know what I said and also looking at this you can just type CD to get to your home directory so for example I'm here in my home directory now but I'll go to my documents and instead of typing this I could just type this I honestly didn't know that until well that quick Google search so yeah you should actually go out and try find information on Unix yourself as well not everything people tell you is the perfect way okay so I'm looking at this I'm going to use this as a guide now to uh to explain uh let's see um I think today I'm going to cover permissions file permissions and uh let's see and maybe this as well moving renaming and copying files okay so permissions permissions here we go in our Unix well we have it's just like every other wheel file system whatever we have our permissions for files so for example if we like download a file off the internet we might not want it to be executable we don't we might not want the uh person to actually physically be able to execute the file because well it might be dangerous it might be a virus it might be malware something like that so there's an executable permission which this x represents and what I think the X represents and yeah I do believe and uh you may also want to keep files private for example there's multiple users on your computer you might just want the cliff user to be able to read it rather than the whole system so any user on the phone asks this one so permissions also you might only want a file to be read only you might not want anyone to write to the file foreign if it's like a some sort of special I don't know whatever so let's see let's do examples shall we so I'm in my home directory you can see that and let's say I have a new file let's yeah I'll make a new one and I want whoops we've got a CD to test okay so let's clear that so I don't have any files in here you know I think I'll I'll do this one first moving renaming copying no not sorry editing viewing files so with this I'll create some files and then I'll modify the permissions on them all right so let's see here in Unix you can do uh needs to be a editor called Pico which I was proprietary it had a private oh no oh entity whatever so we couldn't actually be included in the uh the public gnu one so that's a make a clone of it and they made a clone called Nano so you might get the uh the naming convention here so with Nano we just type Nano plus the file name that you want to edit so I'm going to call it a file okay so Nano a file and it'll bring me to this little editor so here I can just write text just updates live and you can do multiple lines whatever you can hit enter and behaves just like a normal text editor would except without a mouse but that's fine because you have the arrow keys to navigate and well this is all right and now let's quickly get out of it I hit Ctrl X in the menu below and that gives you what you can do and this little up thing stands for control so control X bring you to a new menu do I want to save yes I want to save the buffer so I hit Y what file do I want to call it name hey files fine there now hitting LS I see that a file is there okay and let's just say I just CD to this directory I see there's a file called a file let's pretend I don't know what's in it I want to see what's in it well there's a command called cat now cat like this file thing says we'll dump a file to the screen in ASCII so that means is it'll print out what's in the file in the ASCII uh it's just our standard so cat a file now this is written in nasty text which means like the 128 letters numbers in the table I don't know how to scramble and we see exactly what's in the file this is what I wrote down in uh and Cat will print it out to the screen now alternatively let's say the file's really long so let's make a new one see here where can I go okay I'll just go here uh so I got this file and you see just a whole bunch of information has come out onto the screen just print it out but let's say I want to see the beginning of it I don't want to have to retype it and and do this no I only want to see this beginning part of it well you can do that and as a file the command called Head and hit will give you what's referred to as the head of the file and by that I mean the beginning of it so head file log.txt will print out the beginning bit of text oh it's actually quite a lot oh no no it's not it's just this part okay so it's printed out the beginning part of it and there is a another command that's just like this it's called tail and we'll do the opposite it prints to the end of it so I'll just quickly type that and it gives me the end the last few lines to the file and let's see the help we might be able to select how much lines we want yeah here we go hitting n we can uh specify how much lines the default's 10. okay all right so let's see here let's see what else is there anyone else okay so pinned up yeah see look n would give us the amount of numbers all right uh yeah you could use these are the other editors VI and uh emacs and VI is just a crazy editor it's just really I've no idea how to use it I mean I couldn't care less about it actually I'm sure if you don't do a quick Google search or a YouTube search you'll find a tutorial on it I'm not even going to go on this it's just honestly the point it's ancient emacs uh well I could say the same but I do see quite a lot of people still using it I don't even have emacs on my system okay I'm sure I have VI I think everyone has VI and you can just see from this I don't even know what's going on I don't know what to say about it just get out of it I don't even know how to get out of it okay that's terrible there we go had to force close it all right same basically if I ever want an advanced editor I wouldn't go VI I'd just get like a graphical one like really all right so we'll say less yes you can write less and instead of using it like this like uh whatever and they're doing that you could just write less and then the file name so far log and we can do that and it's the same thing as before we hit Q again to leave it okay so that's editing viewing and editing files so to view your type cat to edit use an Editor to um too well uh what's it called edit the file so let's go back to our test directory all right so if you're seeing this all right so if you're seeing this uh what's it called I've decided that after just doing the permissions file uh part of the video he got way too complicated I didn't do it very well so I'm gonna cut the permissions part out of this tutorial there you go sorry getting long enough anyway I'll come back to file permissions in another video okay so random see you then
