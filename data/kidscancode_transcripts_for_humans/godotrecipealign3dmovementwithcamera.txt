With timestamps:

00:00 - got a really quick one for you today
00:02 - about aligning the direction
00:04 - of an object's movement with the
00:06 - direction of the camera
00:07 - in a recent video i showed how to make a
00:10 - rolling cube
00:12 - that moves around in the four cardinal
00:15 - directions
00:17 - and i'm pressing w a s and d to move
00:20 - the problem is that when you rotate the
00:23 - camera
00:24 - right now i'm still pressing w but now
00:27 - forward for this cube is not the same as
00:29 - forward for the camera
00:30 - and if i turn the camera all the way
00:31 - around you know i've reversed everything
00:34 - and what we'd really like is for w to go
00:37 - forward
00:38 - this way and w to go forward this way
00:40 - and w to go right in whatever direction
00:42 - the camera is facing that's
00:43 - our forward and that's what we're going
00:45 - to do right now
00:47 - all right and you can look at the other
00:48 - video for the details of how
00:51 - the cube moves using this roll function
00:54 - but what matters right now is this part
00:56 - where we're getting the input and right
00:57 - now
00:58 - we've defined forward to be the global
01:01 - forward vector and then up and down move
01:05 - forward and the opposite and right and
01:07 - left are
01:08 - at 90 degree angles to that and so what
01:11 - we want to do is we want to change this
01:13 - to
01:14 - be relative to the camera so i'm going
01:16 - to add a
01:18 - node path export so that we can get the
01:20 - camera path let me just go over here and
01:22 - that lets us assign
01:23 - the camera wherever it is in the scene
01:26 - and then
01:27 - what we could do and this is not quite
01:30 - going to be the solution but we could
01:33 - try and say something like this right if
01:35 - there's a camera
01:37 - then use the cameras forward
01:40 - as our new forward but the problem with
01:44 - that is going to be of course that the
01:45 - camera
01:46 - can rotate to any angle not just 90
01:49 - degrees so while this works
01:51 - and if i rotate over to here that works
01:53 - the camera's at an angle
01:55 - now my cube is starting to do some weird
01:58 - things
01:58 - because i can go in any direction and
02:02 - what i really want to do is
02:04 - snap that camera forward to the closest
02:08 - 90 degree angle okay so instead of
02:12 - assigning the forward to that what we're
02:14 - going to do is we're going to assign it
02:15 - to
02:17 - zero to begin with so we have all three
02:19 - axes set to zero
02:21 - and then we're going to get
02:24 - what the camera's forward is so
02:31 - so the camera forward is going to be
02:33 - that value that we were just getting
02:35 - right and i want to find which axis
02:39 - it's mostly pointing along is it mostly
02:41 - pointing along the z-axis is it mostly
02:42 - pointing along the x-axis positive or
02:44 - negative
02:45 - that kind of thing and we can do that by
02:48 - using
02:53 - first dot abs to just get rid of the
02:55 - positive and negatives and then doing
02:57 - max
02:57 - axis and that's going to get whichever
02:59 - axis of
03:01 - the forward vector is the largest
03:05 - and so that's going to give us since our
03:07 - camera rotates
03:08 - around the y axis it's going to be
03:10 - pointing along
03:12 - x and z so it's going to get us the x or
03:13 - z axis and then we can set our forward
03:16 - max cam axis so whichever axis that was
03:21 - in our camera that's the one we want to
03:22 - use for our forward
03:24 - and we'll set that equal to the sine of
03:27 - the
03:28 - cam forward cam
03:31 - axis okay so now what we've done is we
03:34 - figured out
03:35 - which direction is the closest
03:38 - x or z that the camera's pointing in and
03:41 - we've set our forward
03:42 - to that and if we run this now
03:48 - i've added a little uh print debug print
03:51 - up here at the top so you can see right
03:52 - now
03:53 - the camera forward is along the negative
03:56 - z axis which is what we expect
03:58 - now if i rotate this a little bit notice
04:00 - that hasn't changed i'm still going to
04:01 - go forward but if i rotate far enough
04:04 - now you can see it's snapped to negative
04:06 - x and now i'm still pressing w i'm only
04:08 - going to press w
04:10 - and we rotate far enough this way w will
04:13 - now point
04:14 - that way w points this way right so
04:18 - so now we can just by turning the camera
04:21 - change which direction is our
04:25 - forward and that's going to keep you
04:26 - from getting disoriented
04:28 - as you move the camera around all right
04:30 - and that's it i hope that was
04:32 - a helpful tip for you that max axis
04:36 - function of vector 3 is quite a useful
04:38 - one
04:39 - thanks for watching i'll see you in the
04:41 - next video

Cleaned transcript:

got a really quick one for you today about aligning the direction of an object's movement with the direction of the camera in a recent video i showed how to make a rolling cube that moves around in the four cardinal directions and i'm pressing w a s and d to move the problem is that when you rotate the camera right now i'm still pressing w but now forward for this cube is not the same as forward for the camera and if i turn the camera all the way around you know i've reversed everything and what we'd really like is for w to go forward this way and w to go forward this way and w to go right in whatever direction the camera is facing that's our forward and that's what we're going to do right now all right and you can look at the other video for the details of how the cube moves using this roll function but what matters right now is this part where we're getting the input and right now we've defined forward to be the global forward vector and then up and down move forward and the opposite and right and left are at 90 degree angles to that and so what we want to do is we want to change this to be relative to the camera so i'm going to add a node path export so that we can get the camera path let me just go over here and that lets us assign the camera wherever it is in the scene and then what we could do and this is not quite going to be the solution but we could try and say something like this right if there's a camera then use the cameras forward as our new forward but the problem with that is going to be of course that the camera can rotate to any angle not just 90 degrees so while this works and if i rotate over to here that works the camera's at an angle now my cube is starting to do some weird things because i can go in any direction and what i really want to do is snap that camera forward to the closest 90 degree angle okay so instead of assigning the forward to that what we're going to do is we're going to assign it to zero to begin with so we have all three axes set to zero and then we're going to get what the camera's forward is so so the camera forward is going to be that value that we were just getting right and i want to find which axis it's mostly pointing along is it mostly pointing along the zaxis is it mostly pointing along the xaxis positive or negative that kind of thing and we can do that by using first dot abs to just get rid of the positive and negatives and then doing max axis and that's going to get whichever axis of the forward vector is the largest and so that's going to give us since our camera rotates around the y axis it's going to be pointing along x and z so it's going to get us the x or z axis and then we can set our forward max cam axis so whichever axis that was in our camera that's the one we want to use for our forward and we'll set that equal to the sine of the cam forward cam axis okay so now what we've done is we figured out which direction is the closest x or z that the camera's pointing in and we've set our forward to that and if we run this now i've added a little uh print debug print up here at the top so you can see right now the camera forward is along the negative z axis which is what we expect now if i rotate this a little bit notice that hasn't changed i'm still going to go forward but if i rotate far enough now you can see it's snapped to negative x and now i'm still pressing w i'm only going to press w and we rotate far enough this way w will now point that way w points this way right so so now we can just by turning the camera change which direction is our forward and that's going to keep you from getting disoriented as you move the camera around all right and that's it i hope that was a helpful tip for you that max axis function of vector 3 is quite a useful one thanks for watching i'll see you in the next video
