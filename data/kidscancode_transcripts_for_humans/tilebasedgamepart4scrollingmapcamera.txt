With timestamps:

00:00 - welcome back to game development with
00:02 - pame this is part four of our tile based
00:04 - game project and in this video and this
00:07 - is a big one we're going to be
00:09 - introducing the concept of a scrolling
00:11 - map and the idea of a camera that
00:13 - follows the
00:15 - player ready let's get
00:18 - started all right the first thing we
00:20 - want to do is we want
00:22 - to make our map loading a little bit
00:24 - more flexible down the road we're
00:26 - probably going to want to load uh
00:28 - multiple Maps um have different layouts
00:31 - to our game World things like that so
00:33 - I'm going to take
00:35 - this code right here where we load the
00:38 - map file and I've made a new file called
00:41 - til map.
00:45 - py and I'm going to define a class
00:48 - called
00:50 - map and we initialize that just by
00:52 - telling it the file name that we want to
00:55 - load and in there we're going to put
00:57 - that that code and instead of
01:01 - loading map. map data we're just going
01:04 - to name that data so the maps data is
01:06 - that list where we put all of
01:11 - the map tiles and then this will be the
01:15 - F name so we load the file name send it
01:18 - the file name it opens the file reads it
01:20 - all in puts it in self.
01:22 - dat but then I also want to add a couple
01:25 - of properties okay so that we can keep
01:27 - track of how big our map is I'm going to
01:30 - call this the tile width and that's how
01:33 - many tiles wide is the map well that's
01:35 - just the length
01:38 - of uh one of the lines so if I
01:42 - take line zero that's how many tiles
01:46 - wide my map is the tile height is just
01:50 - going to be the length of the list as a
01:53 - whole right because the list is a list
01:54 - of lines so how many lines is it long
01:57 - that's the height we'll also have we
02:01 - also we'll probably want to know and
02:03 - it'll be useful to know the pixel width
02:06 - of the map and that's just going to be
02:08 - the tile width
02:12 - times however big our tiles actually are
02:16 - and height will be the
02:20 - same and then won't know what tile size
02:24 - is unless
02:28 - we
02:30 - import
02:38 - settings all
02:40 - right there we go that's our
02:43 - new uh map object to finded so over here
02:48 - all we have to do instead of
02:51 - this is we'll open we'll take this file
02:55 - name and we're just going to say self.
02:58 - map equals
03:01 - map with that file name so we created a
03:04 - new map so we need to import
03:09 - that and then here where we go through
03:11 - and read we're just going to read
03:12 - whatever the maps. DAT
03:16 - is and now we
03:18 - are what did we
03:25 - do we did not indent properly there we
03:29 - go
03:31 - all right so now we're back to where we
03:33 - were we're loading our map and we're a
03:35 - little more
03:39 - flexible all right but what if we want
03:41 - to have a map that's bigger than the
03:42 - screen right so that we can walk around
03:45 - larger area well I've made a quick
03:48 - little map two where I just made a much
03:52 - bigger map and if in my program I loaded
03:57 - that map 2 then we only be able to
04:01 - see the corner of it right I can't get
04:05 - down to the rest of the map so what we
04:07 - want to do is we want the screen we want
04:10 - to scroll when we move across this
04:13 - map or another way to look at it is we
04:15 - want the camera to follow the player and
04:19 - move along with him now technically we
04:22 - don't really have a
04:24 - camera all we have is a game window
04:26 - where we're drawing pixels right but
04:28 - it's very convenient to
04:30 - use the term camera to refer to the
04:33 - portion of the map that you're
04:37 - seeing so that's what we want to do and
04:40 - so we're going to define a camera object
04:44 - over
04:46 - here okay now this camera how is this
04:50 - camera going to work well let's look at
04:52 - a little
04:55 - example so here's a little demo I mocked
04:59 - up the red rectangle is our screen
05:01 - that's how big our game window is and
05:04 - there's our little player in the middle
05:05 - of it but our
05:07 - map is quite a bit bigger it's twice as
05:10 - wide and twice as tall as the screen
05:13 - is and you can see here our player right
05:16 - now is at tile position 16 12 so he's 16
05:20 - tiles over and 12 tiles
05:22 - down so what do we want to do when we
05:25 - move if I move to the right I basically
05:28 - want the map to shift to the
05:30 - left like that and as I move further
05:34 - it's shifting
05:35 - further so you can
05:38 - see how that looks if I move up same
05:42 - same
05:43 - idea but we don't want to actually
05:46 - change the coordinates of all these
05:49 - tiles right so move down a little bit
05:51 - this tile right here at the edge of the
05:53 - map is at tile position 0 0 on the map I
05:57 - don't want that to move or I don't want
05:59 - that to change it's still in the same
06:01 - place on the map all I really want to do
06:03 - is I just want to draw the map shifted
06:07 - by some
06:08 - offset so see as I move to the side I'm
06:11 - just drawing the map six tiles shifted
06:14 - to the left the player you can see
06:19 - stays mapped to a coordinate on the
06:22 - map so as he gets down he's getting
06:25 - to the bottom right of the map his tile
06:29 - position gets it's
06:30 - bigger but on the screen his actual
06:35 - location on the screen hasn't changed
06:36 - he's still centered on the screen he's
06:38 - still you know being drawn at those
06:41 - pixels so to keep everything consistent
06:44 - the easiest way to do this and and trust
06:46 - me there are lots of ways to
06:49 - do scrolling cameras but we're going to
06:52 - try and stick to a the simple simplest
06:55 - but most flexible one that we can do um
06:59 - in our situation and that's going to be
07:01 - to just keep track of an offset that
07:04 - will be how far to the left or right up
07:07 - and down do we want to draw all the
07:11 - objects on the map and that'll include
07:14 - any mobs we have running around on it
07:17 - anything like that as well we just want
07:19 - to shift our drawing
07:21 - over okay hopefully that explanation
07:24 - made a little bit of sense and you'll
07:26 - see how it works when we start
07:28 - implementing it so so our
07:35 - camera we're going to just tell it how
07:37 - wide and how tall it needs to
07:41 - be okay
07:46 - so and we're just going to use a
07:48 - rectangle to track
07:53 - this okay we're just going to use a
07:55 - rectangle to track it and I'm also going
07:58 - to name those
08:01 - just so they're easy to refer
08:04 - to we have our camera okay now our
08:07 - camera is going to need to do two
08:10 - things it's going to need
08:12 - to shift the drawing rectangle of
08:16 - anything we try and draw and it's also
08:18 - going to need to update itself to track
08:21 - where the player is whenever the player
08:23 - moves it needs to update whatever that
08:26 - offset is and that offset is going to be
08:28 - tracked in the this rectangle this
08:31 - rectangle is just going to keep track of
08:33 - how far to the left or right up and down
08:35 - do we need to shift all the
08:39 - drawing so the apply portion so applying
08:43 - it to an object we're just going to send
08:45 - it and I'm going to call this an entity
08:47 - because we might sh send it you know a
08:50 - Sprite that's running around the screen
08:51 - a mob a wall whatever okay and all it's
08:54 - going to do is it's going to
08:57 - return that
09:00 - entity that entity will have a rectangle
09:02 - right because it's a Sprite and it's
09:04 - going to move that
09:06 - rectangle by whatever our
09:10 - camera coordinates
09:13 - are this move command when you apply it
09:15 - to a rect gives you a new rectangle
09:18 - that's shifted by this
09:21 - amount so in our example so in our
09:24 - example
09:25 - program open up again when I have moved
09:29 - moved
09:30 - one square to the right the offset is
09:34 - now
09:35 - minus1 multiply that by 32 and that's
09:38 - how many pixels we're going to shift so
09:40 - this will be minus
09:42 - 32 so it will move that rectangles or
09:45 - that entity's rectangle 32 pixels to the
09:49 - left for for it to know where to draw
09:52 - okay and now for our for
09:56 - our
09:58 - update
10:00 - uh what we're going to do is we're going
10:01 - to have it follow a
10:05 - Sprite right which is going to be the
10:07 - player we want to update ourselves to
10:09 - follow that Sprite so that means we need
10:13 - to adjust where
10:17 - the X and Y of
10:20 - our where the X and Y of our camera are
10:24 - going to shift
10:25 - to okay so we want to shift remember
10:28 - we're going in the we need to go in the
10:29 - opposite direction of the player the
10:30 - player moves to the right so the offset
10:32 - moves to the left so we're going to take
10:35 - the minus of the Target w.x and we're
10:40 - going to
10:41 - add half the screen size because we want
10:44 - to keep the the player centered uh
10:46 - centered on the screen right and the
10:48 - same thing with the
10:50 - other
10:53 - direction hyp over
10:55 - two and then we just adjust what our
10:58 - camera
10:59 - rectangle
11:02 - is oops pd. rect the rectangle is now
11:06 - going to be that X and
11:08 - Y it stays the same
11:11 - size okay so there's our
11:13 - camera that's all we need so now we need
11:17 - to adjust
11:18 - our game Loop to use that camera so in
11:24 - Def new I'm going to spawn the camera so
11:27 - we'll call it camera
11:30 - and it's going to use the
11:33 - map
11:35 - width and map
11:37 - height so we know how big our total play
11:41 - area is that the camera can
11:45 - occupy and then we're going to go down
11:47 - to our update section and in the update
11:50 - section we need to make sure
11:54 - that the camera
11:56 - updates so we use our update function
12:00 - and we're going to track the
12:03 - player and then the last but not least
12:05 - we need to go down here to draw now
12:07 - right now we're saying all Sprites do
12:09 - draw but we need to change that and in
12:12 - fact all the all Sprites do draw command
12:15 - does is this it says for sprite in
12:21 - all in all
12:27 - Sprites screen
12:30 - blit sprite. image sprite. R that's
12:35 - that's exactly the same thing this is a
12:38 - this is what all Sprites do draw is a
12:39 - shortcut for looping through every
12:42 - Sprite in the group and blitting it on
12:43 - the screen in the location it's supposed
12:46 - to
12:47 - be so what we want to do now is
12:51 - instead of blitting it at this location
12:54 - where the rectangle thinks it is right
12:56 - where the Sprite thinks it is we want
12:58 - the Sprite to continue thinking it's
13:00 - where it is because it's it's tracking
13:02 - where it is on the map and that's fine
13:05 - but what we want to do is we want to
13:06 - change this to
13:08 - camera.
13:11 - apply right and so we take the camera
13:14 - and we apply it to that
13:18 - Sprite okay so now we're ready to test
13:22 - it out and I just noticed that I made a
13:24 - typo here our s. camera is a camera
13:30 - problems of talking while you're typing
13:32 - so we spawn our camera we update it
13:36 - every Loop and then we're going to draw
13:38 - things using the
13:40 - camera so let's see what
13:43 - happens okay there we are now if I move
13:47 - down look my map is scrolling and I can
13:50 - see all the edges I'm still colliding
13:53 - because the Collision code and the
13:57 - Sprite movement code and everything
13:59 - doesn't even know about any of this
14:01 - scrolling right we didn't change it at
14:03 - all the coordinates of the
14:07 - rectangles are
14:09 - just they just keep increasing as I move
14:12 - to the right and they and as I move to
14:13 - the left
14:15 - and they think they're still drawn in
14:17 - the original location they were they
14:19 - don't care but I can run around anywhere
14:22 - on the map
14:24 - and all the walls will still be working
14:28 - correctly
14:30 - and that's
14:31 - great but what about this what about all
14:35 - this area out here I'm at the edge of
14:38 - the map now and so we don't have
14:41 - anything here so what would we draw here
14:43 - we don't want just a big chunk of empty
14:46 - space right what we'd really like to do
14:48 - is have it stop scrolling when you know
14:52 - I reach this little thing is in the way
14:55 - let's try a different corner I want it
14:56 - to stop scrolling when I reach
14:59 - you know about right here right so I can
15:03 - see the edge of my map but if I keep
15:05 - going to the right my player should just
15:07 - move until he hits this wall but the map
15:09 - doesn't scroll anymore so we need to set
15:11 - some limits on the scrolling based on
15:14 - the width of the total width of the
15:19 - map so to do that let's look at our demo
15:21 - again for a second
15:24 - so here I am scrolling around now let's
15:27 - let's let's talk about the left hand
15:29 - side right so as I move to the left the
15:32 - offset is getting closer and closer to
15:35 - zero right when I'm right here the
15:37 - offset is the X offset is zero so we're
15:40 - just looking at the X right now and if I
15:42 - take a step to the left the offset
15:46 - becomes positive one right which is 32
15:50 - pixels right and it keeps getting bigger
15:54 - so what I want is when I'm over
15:57 - here I want the offsite to keep changing
16:00 - but when I get here I want it to stop so
16:02 - that means the offset the maximum value
16:05 - the offset can have is zero right I
16:08 - never wanted to go into the positive
16:10 - numbers to do the left hand
16:13 - side so I can do that by we will going
16:17 - to give a little Gap here and this is
16:20 - going to be limit scrolling to Map size
16:24 - okay so we need to set of we need to
16:26 - make sure X is never bigger than zero
16:29 - we use that we do that by using the Min
16:32 - function so we're just going to say x is
16:36 - the minimum of whatever zero or X are so
16:39 - if x is one right so if we calculated
16:42 - that we should be shifted by one zero is
16:44 - smaller than one so X will stay zero and
16:48 - we can see that that'll just work for
16:49 - that left hand side now see I didn't
16:52 - scroll I can scroll to the right and the
16:54 - other walls still go past like they were
16:57 - doing before
17:00 - but now as I'm scrolling to the left
17:02 - when I when the offset reaches zero it
17:05 - can't go any bigger and I can't go off
17:08 - there okay now on the right hand
17:11 - side or we can do let's do the same
17:14 - thing with the bottom since the bottom
17:15 - will be nice and simple okay so this
17:18 - does the
17:20 - left
17:23 - right and we do the same thing for uh y
17:28 - to do to
17:29 - the top okay that'll take care of
17:34 - our left and top those are easy okay but
17:39 - let's talk about
17:41 - the right and the
17:44 - bottom so if we look at our demo one
17:46 - more
17:50 - time as I scroll to the
17:53 - right the offset is getting more and
17:55 - more and more negative and when I reach
17:57 - right here which is where I want to stop
17:59 - my offset is minus
18:01 - 32 that's 32 tiles and we know 32 * 32
18:06 - is
18:07 - 1024 so my offset is now netive
18:10 - 1,24 and I don't want it to get
18:13 - any smaller than that so the
18:18 - minimum that the offset can
18:20 - be is negative
18:24 - 1,24 or in other words
18:27 - negative the difference
18:31 - between the width of the whole map and
18:34 - the width of the camera or sorry the
18:36 - width of the
18:38 - screen so to do that we're going to go
18:41 - oops we're going to go back over here
18:42 - and we're going to set the maximums to
18:45 - these
18:46 - things the
18:49 - maximum and remember on that example we
18:51 - just saw it was negative so we're going
18:52 - to say negative whatever the width of
18:55 - the camera is that's 248 at the moment
18:58 - minus the width of the screen which is
19:03 - 1,24 comma X and the same thing with Y
19:08 - where we're going to say the height
19:11 - minus the height of the
19:13 - screen
19:15 - Y and this one does the right and this
19:21 - one does the
19:25 - bottom okay and that will do all four
19:29 - sides so let's go and try it
19:33 - [Music]
19:35 - out now if I scroll down I'm going to
19:39 - stop when I reach the bottom and if I
19:41 - scroll
19:43 - right I'm going to stop when I reach the
19:47 - right uh but there's a little Gap there
19:50 - and I'm going to talk about why that is
19:51 - in just a second but go ahead
19:54 - and try this out so we scrolling in
19:57 - every direction we've got limit
19:59 - to all four sides and that all looks
20:07 - great now why did I get that extra line
20:11 - on the right hand side why was that Gap
20:14 - there well clearly the map thinks it is
20:18 - one tile wider than we think it is right
20:21 - we drew this and it's 64 tiles wide
20:25 - there's no extra space over here and
20:29 - why does that work well first time I
20:32 - ever did something like this I'm
20:34 - embarrassed to say it took me forever to
20:36 - figure it out it's one of those things
20:38 - where you rack your brain for a while
20:39 - and then when you figure out what it is
20:41 - um you feel kind of dumb because it
20:44 - should have been obvious from the start
20:46 - well I'm going to go ahead and tell you
20:48 - um if you have already figured it out
20:50 - well good for you because it took me a
20:53 - while um but that's one of those things
20:56 - where you do more programming you get
20:57 - more experienced and you remember to
20:59 - look for things like this what's
21:01 - happening is when we read the file we're
21:03 - reading in each line of the file right
21:07 - and looking at each
21:08 - line well each line in a text
21:11 - file you can't see it but actually has
21:14 - at the end of it one of those that is a
21:18 - new line
21:19 - character that is what tells the
21:22 - computer that when it reads the uh text
21:24 - file the the next line doesn't the next
21:26 - characters don't continue off to the
21:28 - side like this there's a there's a
21:30 - basically an invisible new line
21:32 - character there but when we
21:35 - read the text file we read that as well
21:38 - so we're reading an extra character here
21:41 - that doesn't count I might as well have
21:44 - a bunch of dots there right
21:47 - so what we need to do is when we read
21:51 - our uh data file we need to strip out
21:57 - those new lines and python has a command
22:02 - to do that called
22:03 - strip and that will take the line strip
22:06 - away any slash ends or back SL end
22:10 - characters new line characters and they
22:11 - won't be there when it looks
22:15 - at the file and that
22:18 - is why we have that Gap there so now
22:20 - that we strip away those ends it's not
22:23 - thinking those are characters that it
22:24 - needs to look
22:25 - at and now our map scrolling is complete
22:29 - so
22:31 - hopefully you understood all that
22:33 - explanation it might be a little
22:35 - abstract the first time around so um I'm
22:37 - going to I'll go through it one more
22:39 - time just to
22:40 - review uh we have a camera object and
22:43 - what that camera object does is it keeps
22:45 - track of how big the whole view area is
22:49 - the size of the whole
22:50 - map and whenever the player moves it
22:55 - calculates an offset for how much
22:59 - the player has shifted right in the
23:01 - opposite direction that the player has
23:02 - gone so if the player moves to the right
23:03 - a certain amount it's offset to the left
23:06 - by that same amount and we use that to
23:10 - draw everything on the
23:13 - screen right when we draw our objects we
23:16 - draw them shifted by that
23:18 - amount it's important to keep in mind
23:22 - that we do not change any of the
23:24 - properties of the objects right so these
23:26 - wall objects when they're spawn they
23:28 - know where they are and what their
23:30 - coordinates are in pixels we never
23:33 - change those so a wall object that is uh
23:37 - in the lower right hand side of the
23:39 - screen is you know 2,000
23:42 - pixels by you know 1500 pixels and those
23:47 - never change it always thinks it's
23:48 - staying in the same spot we're just
23:51 - drawing it in a different spot than it
23:53 - thinks it is and so that all stays the
23:56 - same and same thing with the player the
23:59 - player's coordinates are getting bigger
24:01 - and bigger and bigger as it moves right
24:03 - and down uh but its pixel coordinates on
24:07 - the screen are what we keep the same
24:11 - right so it stays in the middle um
24:14 - except when it gets towards the edge but
24:16 - the pixel coordinates where we draw it
24:18 - are not the same as the pixel
24:19 - coordinates where it thinks it is right
24:21 - it thinks it's getting all the way down
24:23 - to the end and so it's nice to have the
24:26 - camera be totally independent of the
24:28 - object on the you know in the game they
24:30 - don't have to know the concept of the
24:33 - camera they just need to know the
24:34 - concept of the map that they're walking
24:35 - around
24:36 - on the other great thing that this style
24:39 - of camera allows us to do is when we
24:42 - update the camera to figure out what
24:43 - it's offset is we're using the player
24:47 - but we don't have to use the
24:49 - player say the player shot an arrow we
24:52 - could update the camera using that Arrow
24:54 - Sprite and the camera is going to
24:57 - follow the Arrow all the way to where it
24:59 - flies to and not follow the player we
25:02 - can put any Sprite we want in here and
25:04 - the camera will track that
25:07 - Sprite and it also means that we're
25:09 - really flexible in where we spawn the
25:11 - player right if we spawn the player at
25:14 - the beginning of the game you know down
25:16 - here then capital P then that's where
25:20 - the camera will be when we start the
25:23 - game the player starts out down here and
25:26 - then you can go
25:29 - wherever he wants to in this
25:31 - direction so it's very nice it's very
25:33 - flexible it's a great way to do uh a
25:37 - scrolling camera whether you're doing
25:39 - a tile based game like this you're doing
25:42 - some kind of platformer anything like
25:44 - that so I recommend you take the time to
25:48 - understand how it works um if you have
25:50 - any questions post them in the comments
25:53 - below and as always please press the
25:56 - like button and subscribe so you can see
25:58 - the next video when it comes out and I
26:01 - will see you next
26:14 - time

Cleaned transcript:

welcome back to game development with pame this is part four of our tile based game project and in this video and this is a big one we're going to be introducing the concept of a scrolling map and the idea of a camera that follows the player ready let's get started all right the first thing we want to do is we want to make our map loading a little bit more flexible down the road we're probably going to want to load uh multiple Maps um have different layouts to our game World things like that so I'm going to take this code right here where we load the map file and I've made a new file called til map. py and I'm going to define a class called map and we initialize that just by telling it the file name that we want to load and in there we're going to put that that code and instead of loading map. map data we're just going to name that data so the maps data is that list where we put all of the map tiles and then this will be the F name so we load the file name send it the file name it opens the file reads it all in puts it in self. dat but then I also want to add a couple of properties okay so that we can keep track of how big our map is I'm going to call this the tile width and that's how many tiles wide is the map well that's just the length of uh one of the lines so if I take line zero that's how many tiles wide my map is the tile height is just going to be the length of the list as a whole right because the list is a list of lines so how many lines is it long that's the height we'll also have we also we'll probably want to know and it'll be useful to know the pixel width of the map and that's just going to be the tile width times however big our tiles actually are and height will be the same and then won't know what tile size is unless we import settings all right there we go that's our new uh map object to finded so over here all we have to do instead of this is we'll open we'll take this file name and we're just going to say self. map equals map with that file name so we created a new map so we need to import that and then here where we go through and read we're just going to read whatever the maps. DAT is and now we are what did we do we did not indent properly there we go all right so now we're back to where we were we're loading our map and we're a little more flexible all right but what if we want to have a map that's bigger than the screen right so that we can walk around larger area well I've made a quick little map two where I just made a much bigger map and if in my program I loaded that map 2 then we only be able to see the corner of it right I can't get down to the rest of the map so what we want to do is we want the screen we want to scroll when we move across this map or another way to look at it is we want the camera to follow the player and move along with him now technically we don't really have a camera all we have is a game window where we're drawing pixels right but it's very convenient to use the term camera to refer to the portion of the map that you're seeing so that's what we want to do and so we're going to define a camera object over here okay now this camera how is this camera going to work well let's look at a little example so here's a little demo I mocked up the red rectangle is our screen that's how big our game window is and there's our little player in the middle of it but our map is quite a bit bigger it's twice as wide and twice as tall as the screen is and you can see here our player right now is at tile position 16 12 so he's 16 tiles over and 12 tiles down so what do we want to do when we move if I move to the right I basically want the map to shift to the left like that and as I move further it's shifting further so you can see how that looks if I move up same same idea but we don't want to actually change the coordinates of all these tiles right so move down a little bit this tile right here at the edge of the map is at tile position 0 0 on the map I don't want that to move or I don't want that to change it's still in the same place on the map all I really want to do is I just want to draw the map shifted by some offset so see as I move to the side I'm just drawing the map six tiles shifted to the left the player you can see stays mapped to a coordinate on the map so as he gets down he's getting to the bottom right of the map his tile position gets it's bigger but on the screen his actual location on the screen hasn't changed he's still centered on the screen he's still you know being drawn at those pixels so to keep everything consistent the easiest way to do this and and trust me there are lots of ways to do scrolling cameras but we're going to try and stick to a the simple simplest but most flexible one that we can do um in our situation and that's going to be to just keep track of an offset that will be how far to the left or right up and down do we want to draw all the objects on the map and that'll include any mobs we have running around on it anything like that as well we just want to shift our drawing over okay hopefully that explanation made a little bit of sense and you'll see how it works when we start implementing it so so our camera we're going to just tell it how wide and how tall it needs to be okay so and we're just going to use a rectangle to track this okay we're just going to use a rectangle to track it and I'm also going to name those just so they're easy to refer to we have our camera okay now our camera is going to need to do two things it's going to need to shift the drawing rectangle of anything we try and draw and it's also going to need to update itself to track where the player is whenever the player moves it needs to update whatever that offset is and that offset is going to be tracked in the this rectangle this rectangle is just going to keep track of how far to the left or right up and down do we need to shift all the drawing so the apply portion so applying it to an object we're just going to send it and I'm going to call this an entity because we might sh send it you know a Sprite that's running around the screen a mob a wall whatever okay and all it's going to do is it's going to return that entity that entity will have a rectangle right because it's a Sprite and it's going to move that rectangle by whatever our camera coordinates are this move command when you apply it to a rect gives you a new rectangle that's shifted by this amount so in our example so in our example program open up again when I have moved moved one square to the right the offset is now minus1 multiply that by 32 and that's how many pixels we're going to shift so this will be minus 32 so it will move that rectangles or that entity's rectangle 32 pixels to the left for for it to know where to draw okay and now for our for our update uh what we're going to do is we're going to have it follow a Sprite right which is going to be the player we want to update ourselves to follow that Sprite so that means we need to adjust where the X and Y of our where the X and Y of our camera are going to shift to okay so we want to shift remember we're going in the we need to go in the opposite direction of the player the player moves to the right so the offset moves to the left so we're going to take the minus of the Target w.x and we're going to add half the screen size because we want to keep the the player centered uh centered on the screen right and the same thing with the other direction hyp over two and then we just adjust what our camera rectangle is oops pd. rect the rectangle is now going to be that X and Y it stays the same size okay so there's our camera that's all we need so now we need to adjust our game Loop to use that camera so in Def new I'm going to spawn the camera so we'll call it camera and it's going to use the map width and map height so we know how big our total play area is that the camera can occupy and then we're going to go down to our update section and in the update section we need to make sure that the camera updates so we use our update function and we're going to track the player and then the last but not least we need to go down here to draw now right now we're saying all Sprites do draw but we need to change that and in fact all the all Sprites do draw command does is this it says for sprite in all in all Sprites screen blit sprite. image sprite. R that's that's exactly the same thing this is a this is what all Sprites do draw is a shortcut for looping through every Sprite in the group and blitting it on the screen in the location it's supposed to be so what we want to do now is instead of blitting it at this location where the rectangle thinks it is right where the Sprite thinks it is we want the Sprite to continue thinking it's where it is because it's it's tracking where it is on the map and that's fine but what we want to do is we want to change this to camera. apply right and so we take the camera and we apply it to that Sprite okay so now we're ready to test it out and I just noticed that I made a typo here our s. camera is a camera problems of talking while you're typing so we spawn our camera we update it every Loop and then we're going to draw things using the camera so let's see what happens okay there we are now if I move down look my map is scrolling and I can see all the edges I'm still colliding because the Collision code and the Sprite movement code and everything doesn't even know about any of this scrolling right we didn't change it at all the coordinates of the rectangles are just they just keep increasing as I move to the right and they and as I move to the left and they think they're still drawn in the original location they were they don't care but I can run around anywhere on the map and all the walls will still be working correctly and that's great but what about this what about all this area out here I'm at the edge of the map now and so we don't have anything here so what would we draw here we don't want just a big chunk of empty space right what we'd really like to do is have it stop scrolling when you know I reach this little thing is in the way let's try a different corner I want it to stop scrolling when I reach you know about right here right so I can see the edge of my map but if I keep going to the right my player should just move until he hits this wall but the map doesn't scroll anymore so we need to set some limits on the scrolling based on the width of the total width of the map so to do that let's look at our demo again for a second so here I am scrolling around now let's let's let's talk about the left hand side right so as I move to the left the offset is getting closer and closer to zero right when I'm right here the offset is the X offset is zero so we're just looking at the X right now and if I take a step to the left the offset becomes positive one right which is 32 pixels right and it keeps getting bigger so what I want is when I'm over here I want the offsite to keep changing but when I get here I want it to stop so that means the offset the maximum value the offset can have is zero right I never wanted to go into the positive numbers to do the left hand side so I can do that by we will going to give a little Gap here and this is going to be limit scrolling to Map size okay so we need to set of we need to make sure X is never bigger than zero we use that we do that by using the Min function so we're just going to say x is the minimum of whatever zero or X are so if x is one right so if we calculated that we should be shifted by one zero is smaller than one so X will stay zero and we can see that that'll just work for that left hand side now see I didn't scroll I can scroll to the right and the other walls still go past like they were doing before but now as I'm scrolling to the left when I when the offset reaches zero it can't go any bigger and I can't go off there okay now on the right hand side or we can do let's do the same thing with the bottom since the bottom will be nice and simple okay so this does the left right and we do the same thing for uh y to do to the top okay that'll take care of our left and top those are easy okay but let's talk about the right and the bottom so if we look at our demo one more time as I scroll to the right the offset is getting more and more and more negative and when I reach right here which is where I want to stop my offset is minus 32 that's 32 tiles and we know 32 * 32 is 1024 so my offset is now netive 1,24 and I don't want it to get any smaller than that so the minimum that the offset can be is negative 1,24 or in other words negative the difference between the width of the whole map and the width of the camera or sorry the width of the screen so to do that we're going to go oops we're going to go back over here and we're going to set the maximums to these things the maximum and remember on that example we just saw it was negative so we're going to say negative whatever the width of the camera is that's 248 at the moment minus the width of the screen which is 1,24 comma X and the same thing with Y where we're going to say the height minus the height of the screen Y and this one does the right and this one does the bottom okay and that will do all four sides so let's go and try it out now if I scroll down I'm going to stop when I reach the bottom and if I scroll right I'm going to stop when I reach the right uh but there's a little Gap there and I'm going to talk about why that is in just a second but go ahead and try this out so we scrolling in every direction we've got limit to all four sides and that all looks great now why did I get that extra line on the right hand side why was that Gap there well clearly the map thinks it is one tile wider than we think it is right we drew this and it's 64 tiles wide there's no extra space over here and why does that work well first time I ever did something like this I'm embarrassed to say it took me forever to figure it out it's one of those things where you rack your brain for a while and then when you figure out what it is um you feel kind of dumb because it should have been obvious from the start well I'm going to go ahead and tell you um if you have already figured it out well good for you because it took me a while um but that's one of those things where you do more programming you get more experienced and you remember to look for things like this what's happening is when we read the file we're reading in each line of the file right and looking at each line well each line in a text file you can't see it but actually has at the end of it one of those that is a new line character that is what tells the computer that when it reads the uh text file the the next line doesn't the next characters don't continue off to the side like this there's a there's a basically an invisible new line character there but when we read the text file we read that as well so we're reading an extra character here that doesn't count I might as well have a bunch of dots there right so what we need to do is when we read our uh data file we need to strip out those new lines and python has a command to do that called strip and that will take the line strip away any slash ends or back SL end characters new line characters and they won't be there when it looks at the file and that is why we have that Gap there so now that we strip away those ends it's not thinking those are characters that it needs to look at and now our map scrolling is complete so hopefully you understood all that explanation it might be a little abstract the first time around so um I'm going to I'll go through it one more time just to review uh we have a camera object and what that camera object does is it keeps track of how big the whole view area is the size of the whole map and whenever the player moves it calculates an offset for how much the player has shifted right in the opposite direction that the player has gone so if the player moves to the right a certain amount it's offset to the left by that same amount and we use that to draw everything on the screen right when we draw our objects we draw them shifted by that amount it's important to keep in mind that we do not change any of the properties of the objects right so these wall objects when they're spawn they know where they are and what their coordinates are in pixels we never change those so a wall object that is uh in the lower right hand side of the screen is you know 2,000 pixels by you know 1500 pixels and those never change it always thinks it's staying in the same spot we're just drawing it in a different spot than it thinks it is and so that all stays the same and same thing with the player the player's coordinates are getting bigger and bigger and bigger as it moves right and down uh but its pixel coordinates on the screen are what we keep the same right so it stays in the middle um except when it gets towards the edge but the pixel coordinates where we draw it are not the same as the pixel coordinates where it thinks it is right it thinks it's getting all the way down to the end and so it's nice to have the camera be totally independent of the object on the you know in the game they don't have to know the concept of the camera they just need to know the concept of the map that they're walking around on the other great thing that this style of camera allows us to do is when we update the camera to figure out what it's offset is we're using the player but we don't have to use the player say the player shot an arrow we could update the camera using that Arrow Sprite and the camera is going to follow the Arrow all the way to where it flies to and not follow the player we can put any Sprite we want in here and the camera will track that Sprite and it also means that we're really flexible in where we spawn the player right if we spawn the player at the beginning of the game you know down here then capital P then that's where the camera will be when we start the game the player starts out down here and then you can go wherever he wants to in this direction so it's very nice it's very flexible it's a great way to do uh a scrolling camera whether you're doing a tile based game like this you're doing some kind of platformer anything like that so I recommend you take the time to understand how it works um if you have any questions post them in the comments below and as always please press the like button and subscribe so you can see the next video when it comes out and I will see you next time
