With timestamps:

00:00 - welcome back this is part three of our
00:03 - table based game project and in this
00:05 - video we're going to talk about making
00:07 - our movement smoother and how that
00:11 - impacts our wall collisions in our last
00:15 - video we had our player moving around
00:18 - and we had our map loading and our wall
00:21 - is placed where we want to wanted them
00:23 - to be but the way we did our movement
00:26 - was the simplest way possible which is
00:28 - one step at a time every time you press
00:31 - the arrow key the player takes one step
00:34 - to that direction and always is on one
00:38 - square so this is really perfect for if
00:41 - you want to do a turn-based game
00:45 - something like a classic roguelike where
00:49 - when I press write and my character
00:52 - takes a step that's when the enemies
00:54 - will take a step towards me everything
00:57 - will change you know as I take a turn
01:00 - and that's fine if that's the direction
01:02 - you're going in but we want to build
01:05 - something a little bit more action II so
01:08 - we're gonna improve our movement and
01:10 - make us give us a little more freedom to
01:13 - move around in real time without having
01:16 - to take one step at a time okay so the
01:20 - first thing I'm gonna do is I'm gonna go
01:21 - over here and I'm gonna make some player
01:24 - settings in our settings file we're
01:28 - gonna set up player speed and now that
01:34 - can be whatever we want it to be I'm
01:37 - just going to put a number in here sort
01:40 - of at random just to see what it comes
01:42 - out as and as we start playing around
01:44 - with it we'll modify this to be speed we
01:48 - like okay and now over to our sprites so
01:54 - actually in our main we're gonna take
01:56 - out all of this key movement Cubase move
02:02 - it this is what's making us take a step
02:04 - every time we press a key we're gonna
02:06 - get rid of that because what we're gonna
02:09 - do is we're gonna go over to our sprite
02:11 - and I want my sprite to move
02:12 - as long as I have the key held down it's
02:15 - going to move and when I let go it's
02:17 - going to stop okay
02:21 - so let's give our player we're going to
02:25 - use for our position we're going to have
02:27 - a velocity so let's give ourselves a VX
02:30 - and a V why
02:33 - okay and those are both going to be zero
02:36 - to start with and let's go ahead and
02:38 - define what our keys are going to do if
02:41 - we make this in our own little method
02:46 - then it'll make it easier to modify
02:48 - later if we want to change how the keys
02:50 - behave okay so what we're going to do is
02:54 - we're gonna check get keys every frame
02:57 - and it's gonna set VX and V Y to zero
03:02 - unless one of the keys is pressed so
03:06 - we're gonna do sorry key get pressed
03:13 - okay that's going to let us see which
03:17 - keys are currently held down and what
03:21 - we're gonna do is we're going to say if
03:23 - it's okay left and here's where we can
03:31 - go ahead and be friendly to those who
03:35 - like the WASD keys we'll make it work
03:40 - with left or a so you press left or a
03:43 - then then your VX is going to be equal
03:48 - to negative player speed right we're
03:52 - going to the to the left that means
03:54 - needs to be a negative number and then
03:58 - we're gonna say L if and I'm just going
04:02 - to go ahead and copy and paste to make
04:06 - this a little quicker and then we will
04:10 - duplicate that two more times okay so if
04:15 - we press write or D then our VX is going
04:23 - to be our player speed and if we pray
04:26 - up or W then rvy it's going to be
04:33 - negative player speed and if we press
04:37 - down or s then we get our V Y will be a
04:45 - positive of our player speed all right
04:49 - let's get rid of well I'm not gonna get
04:54 - rid of it but we're going to change this
04:55 - def move and the collide with walls
04:57 - those are going to have to change for
05:00 - right now and our update lets you do get
05:02 - keys and our rectangles x and y are
05:08 - going to be equal to our games are self
05:14 - dot VX looks light plus equals times the
05:22 - time step of the game remember over here
05:25 - in our game we are in our update all
05:29 - right sorry I main loop we are getting
05:30 - the Delta T of the previous frame so
05:34 - that we will be sure to move at a
05:37 - consistent speed not based on our frame
05:40 - rate independent of our frame rate
05:43 - there's if you're unclear on how that
05:45 - works I have a little video explaining
05:48 - that which I'll link to below and you
05:51 - can review how the frame independent
05:55 - movement works and then we're gonna make
05:59 - these B this is the X and the y that
06:02 - we're changing here not the rectangle
06:05 - because this number is going to be a
06:10 - fraction because we're multiplying by
06:12 - some decimal and so we're going to be
06:16 - moving at a value that is not
06:20 - necessarily an integer and rectangles
06:24 - they got to be integers so we will be
06:27 - losing information if we add that we're
06:31 - going to keep these to be our position
06:32 - and then we can just set our rectangle
06:38 - and now which part of our rectangle we
06:41 - use that's another option we can talk
06:44 - about once we get this all completed and
06:49 - have some graphics and talk about how we
06:52 - want our character to look and interact
06:54 - with the walls and and all that kind of
06:56 - stuff so we'll go over to our mean and
07:00 - run this and now we should see that we
07:04 - can move in the four directions not
07:08 - particularly fast because we put a
07:13 - hundred here that's a hundred pixels per
07:16 - second
07:17 - and since our screen is a thousand
07:19 - across that means it takes ten seconds
07:22 - to cross the screen which if you noticed
07:24 - how fast our guy was moving that's
07:27 - probably about right it's taking about
07:29 - ten seconds to run across the screen
07:30 - which is a little bit too slow so let's
07:34 - increase that speed a little bit let's
07:38 - try five hundred yeah whoa that's super
07:44 - fast okay
07:46 - that might be a little too fast so we'll
07:52 - go over here and we'll split the
07:54 - difference and we'll try three hundred
07:58 - yeah okay that's comfortable at least
08:03 - for now so now we need to make our
08:08 - sprite collide with the walls and you
08:12 - might have noticed which I just did
08:13 - we're not spawning in the right spot
08:15 - which is because we're telling it what
08:19 - row and column to spawn in from our map
08:23 - and in our sprite we just need to make
08:26 - that convert that to the X&Y which is x
08:30 - tile size okay all right
08:34 - so we spawn where we're supposed to
08:36 - spawn now I want to be able to collide
08:38 - with the walls now there's a few
08:40 - different ways we can do this it's also
08:43 - going to make a difference whether we
08:45 - decided we want to allow diagonal
08:47 - movement or not right now we can only
08:49 - move in for two
08:50 - affections we might want to allow
08:54 - diagonal diagonal is pretty easy to add
08:58 - in fact we can just go over here toward
09:03 - get keys and we can change those elif's
09:09 - to ifs and that's really all you have to
09:12 - do except for the fact that we need to
09:16 - change a little bit so that our
09:18 - diagonals aren't faster than our
09:20 - horizontal and vertical right the
09:24 - diagonal problem which I've talked about
09:25 - before and even have a little video on
09:28 - which you can see below as well so real
09:33 - quick we will say if oops left out my
09:42 - zero there so if if both VX and V Y are
09:45 - not 0 then we need to take VX and V Y
09:51 - and multiply them by 707 one which is
09:58 - the square root of 2 I'm sorry 1 over
10:00 - the square root of 2 which is explained
10:06 - in that video it comes from the
10:07 - Pythagorean theorem ok so we are now
10:11 - moving diagonally and we need to talk
10:18 - about clogging with the walls now what
10:20 - we could do is how we did it last time
10:22 - was if we're moving you know any frame
10:26 - where we try to move we're gonna check
10:29 - to see if we collide with a wall if we
10:31 - collide with a wall then we don't let
10:33 - the sprite make that move okay and we
10:37 - could do that so let's try that right
10:41 - here we move ourselves so let's just do
10:46 - a collision so and for this we can use
10:51 - the sprite collide any command the
10:56 - sprite collide any is a bit faster it
11:00 - checks between a sprite and a group
11:04 - which would be gamed walls and it just
11:09 - tells you it just gives you a true or
11:11 - false if this sprite hit anything in
11:15 - this group it doesn't tell you which one
11:17 - it hit but we don't care if we hit a
11:20 - wall we can't move so that means we need
11:23 - to basically undo this movement so if we
11:28 - put that we can just put - right so we
11:31 - undo the movement we move back the same
11:33 - amount of pixels we moved forward and
11:36 - what that's gonna do is a couple of
11:39 - things one is it's not gonna let us go
11:41 - through the walls anymore but you're
11:44 - gonna notice that sometimes like here
11:46 - I'm pushing up I can be against the wall
11:48 - but other times like there I can't get
11:53 - right against the wall always because so
11:58 - sometimes the wall has this weird little
12:01 - space where I can't move any closer like
12:07 - that and the reason for that is let's
12:11 - say when I'm right here and I press left
12:14 - my sprite tries to move 10 pixels but
12:17 - I'm only 4 pixels away from the wall so
12:19 - it doesn't let me move so I'm not able
12:22 - to move that 4 pixels and what gets
12:26 - worse is when I go diagonally I just
12:30 - stick against the wall now most of the
12:33 - time and again it depends on how you
12:36 - want your movement to work in your game
12:38 - but most of the time if we hit a wall
12:40 - diagonally like this I want to keep
12:43 - sliding downwards right if I'm going
12:45 - diagonally I'll go over here and go
12:48 - diagonally to the down in to the right
12:50 - when I hit that wall at the bottom I
12:52 - would like to keep moving to the right
12:54 - and not have to press again to make it
12:57 - go to the right all right I want to
12:59 - slide along the walls and the only way
13:04 - to do that and we also need and to fix
13:07 - that little gap problem is going to be
13:13 - to make our collisions a little bit more
13:15 - sophisticated and what I mean by that
13:18 - is the sprite collide will tell us that
13:21 - our that our sprite hit a wall sprite
13:25 - and it can even tell us which sprite it
13:27 - hit so it's going to tell us we hit this
13:30 - one here at the end of the wall this
13:31 - bottom one on the wall we hit it but
13:34 - that's true no matter what direction we
13:36 - hit it from right if I'm moving this way
13:39 - I want to stop against the wall there if
13:42 - I'm moving this way I want to stop
13:44 - against the wall there and if I was
13:46 - moving up and so on so the way to solve
13:50 - that is you have to break down your
13:52 - movement into x and y directions and
13:58 - check your collisions twice so we're
14:03 - gonna move our sprite in however many
14:06 - pixels it's supposed to move in X and
14:07 - we're gonna see if we hit a wall if we
14:09 - hit a wall we're gonna stick our selves
14:11 - to the side of it depending on which
14:13 - side we hit and then if we're and then
14:16 - we're going to move our sprite in the
14:17 - y-direction however much it needs to
14:19 - move that way and if we hit a wall we
14:22 - stick against the wall that way and what
14:24 - that'll allow us to do is if I'm moving
14:26 - diagonally when I move in X I'll hit the
14:30 - wall and stop but when I move in why I'm
14:32 - free to keep going so that's gonna let
14:34 - me slide along the wall okay so let's
14:37 - try that out all right so we're gonna
14:40 - throw this away that's not the way we
14:43 - want to do our wall collision and what
14:46 - we're going to do is this x and y are
14:49 - calculating what our new position needs
14:51 - to be so we're gonna move our rectangles
14:55 - we're going to set our rectangles X
14:57 - equal to that equal to that X so that we
15:02 - can check if we need to collide with the
15:04 - walls okay now we're gonna go collide
15:08 - with walls and we're gonna say we're
15:10 - going to collide with walls in the
15:11 - x-direction then we're going to set our
15:13 - rectangles Y where it's supposed to be
15:16 - and we're gonna collide with walls again
15:20 - in the y-direction
15:22 - so two collision checks one for each
15:25 - axis
15:27 - so that means we need to change this
15:30 - collide with walls and you know I'm
15:31 - gonna go ahead and delete this
15:33 - definitely that is out of date and
15:35 - doesn't work right anymore so colliding
15:39 - with the walls and we're just going to
15:41 - put that we need to specify the
15:42 - direction so if if we're checking an ex
15:50 - collision then we need to do this bright
15:54 - collide between ourself and the walls
16:03 - group false because with the walls don't
16:06 - get deleted if we hit something I don't
16:10 - really care how many walls I hit because
16:13 - if I come in right in between two walls
16:15 - and hit them at the same time it's still
16:18 - the same result I need to stop moving in
16:20 - that direction so if I hit something
16:23 - then we have two choices either I hit it
16:26 - from the right side and I need to press
16:28 - up against its right side or I hit it
16:30 - from the left side and I need to be
16:31 - against its left side so we need to
16:34 - check to see what was our velocity and
16:36 - so I mean VX so if a VX was greater than
16:40 - zero that means our sprite was moving to
16:43 - the right when it collided with the wall
16:45 - so we need to put ourselves against the
16:48 - right edge of the wall so our self dot X
16:52 - is going to be whatever the thing was
16:56 - that we hit dot wrecked left
17:00 - - however wide we are so that will put
17:06 - us right against it on its left-hand
17:10 - side because we are moving to the right
17:11 - now in the opposite direction if we were
17:15 - if our speed was less than zero then we
17:17 - were moving to the left and we need to
17:19 - hit against the right-hand side of the
17:22 - wall block so we're gonna put ourselves
17:25 - against the wrecked up right and
17:29 - regardless of which direction we hit in
17:31 - we're gonna set our VX to zero because
17:33 - we shouldn't move anymore we ran into a
17:35 - wall and we'll put our rectangle at that
17:39 - new position
17:40 - we decided we should be at and we can go
17:46 - over to our game and even try it out our
17:50 - ex collisions should work our why
17:53 - collisions are not going to work but you
17:56 - can see I can slide along that y is not
18:00 - going to work because we need to do the
18:03 - same process for y so I'm just going to
18:06 - actually take this whole thing and I'm
18:09 - going to duplicate it it's almost the
18:11 - same we got some indenting Auto
18:14 - indenting happening to change that
18:16 - setting it's almost the same thing
18:18 - what's going to change is when we move
18:21 - in the Y we're going to check the
18:24 - collision and then we're going to check
18:26 - if our V Y was greater or less than zero
18:30 - right if are a few Y was greater than
18:32 - zero we were moving down so that means
18:35 - we hit the top of the block so we need
18:39 - to be at the top
18:40 - - whatever our height is and if we were
18:45 - moving up we need to be at the bottom
18:49 - and we set our V Y to zero and we set
18:55 - our rectangles Y and now we have both
18:59 - X's working and I should be able to run
19:03 - around and I can slide along the blocks
19:07 - no problem no getting stuck right I get
19:14 - to slide along it diagonally and
19:20 - everything looks good okay that video
19:28 - went a little bit long hopefully it made
19:31 - sense and you have your player moving
19:36 - around the way you want them to move in
19:38 - your map that you built and in the next
19:41 - video we'll talk a little bit more about
19:45 - wrapping up our movement and then talk
19:48 - about a little bit more about what kind
19:50 - of game we might make
19:54 - if you have some guesses post them in
19:56 - the comments below maybe we can see
19:58 - who's closest to guessing the right
20:00 - direction that I'm thinking of taking
20:02 - this project in as always thank you so
20:06 - much for watching please press that like
20:09 - button below and subscribe if you
20:13 - haven't already so that you'll get the
20:15 - next video
20:16 - when it comes out very soon see you next
20:20 - time
20:27 - you

Cleaned transcript:

welcome back this is part three of our table based game project and in this video we're going to talk about making our movement smoother and how that impacts our wall collisions in our last video we had our player moving around and we had our map loading and our wall is placed where we want to wanted them to be but the way we did our movement was the simplest way possible which is one step at a time every time you press the arrow key the player takes one step to that direction and always is on one square so this is really perfect for if you want to do a turnbased game something like a classic roguelike where when I press write and my character takes a step that's when the enemies will take a step towards me everything will change you know as I take a turn and that's fine if that's the direction you're going in but we want to build something a little bit more action II so we're gonna improve our movement and make us give us a little more freedom to move around in real time without having to take one step at a time okay so the first thing I'm gonna do is I'm gonna go over here and I'm gonna make some player settings in our settings file we're gonna set up player speed and now that can be whatever we want it to be I'm just going to put a number in here sort of at random just to see what it comes out as and as we start playing around with it we'll modify this to be speed we like okay and now over to our sprites so actually in our main we're gonna take out all of this key movement Cubase move it this is what's making us take a step every time we press a key we're gonna get rid of that because what we're gonna do is we're gonna go over to our sprite and I want my sprite to move as long as I have the key held down it's going to move and when I let go it's going to stop okay so let's give our player we're going to use for our position we're going to have a velocity so let's give ourselves a VX and a V why okay and those are both going to be zero to start with and let's go ahead and define what our keys are going to do if we make this in our own little method then it'll make it easier to modify later if we want to change how the keys behave okay so what we're going to do is we're gonna check get keys every frame and it's gonna set VX and V Y to zero unless one of the keys is pressed so we're gonna do sorry key get pressed okay that's going to let us see which keys are currently held down and what we're gonna do is we're going to say if it's okay left and here's where we can go ahead and be friendly to those who like the WASD keys we'll make it work with left or a so you press left or a then then your VX is going to be equal to negative player speed right we're going to the to the left that means needs to be a negative number and then we're gonna say L if and I'm just going to go ahead and copy and paste to make this a little quicker and then we will duplicate that two more times okay so if we press write or D then our VX is going to be our player speed and if we pray up or W then rvy it's going to be negative player speed and if we press down or s then we get our V Y will be a positive of our player speed all right let's get rid of well I'm not gonna get rid of it but we're going to change this def move and the collide with walls those are going to have to change for right now and our update lets you do get keys and our rectangles x and y are going to be equal to our games are self dot VX looks light plus equals times the time step of the game remember over here in our game we are in our update all right sorry I main loop we are getting the Delta T of the previous frame so that we will be sure to move at a consistent speed not based on our frame rate independent of our frame rate there's if you're unclear on how that works I have a little video explaining that which I'll link to below and you can review how the frame independent movement works and then we're gonna make these B this is the X and the y that we're changing here not the rectangle because this number is going to be a fraction because we're multiplying by some decimal and so we're going to be moving at a value that is not necessarily an integer and rectangles they got to be integers so we will be losing information if we add that we're going to keep these to be our position and then we can just set our rectangle and now which part of our rectangle we use that's another option we can talk about once we get this all completed and have some graphics and talk about how we want our character to look and interact with the walls and and all that kind of stuff so we'll go over to our mean and run this and now we should see that we can move in the four directions not particularly fast because we put a hundred here that's a hundred pixels per second and since our screen is a thousand across that means it takes ten seconds to cross the screen which if you noticed how fast our guy was moving that's probably about right it's taking about ten seconds to run across the screen which is a little bit too slow so let's increase that speed a little bit let's try five hundred yeah whoa that's super fast okay that might be a little too fast so we'll go over here and we'll split the difference and we'll try three hundred yeah okay that's comfortable at least for now so now we need to make our sprite collide with the walls and you might have noticed which I just did we're not spawning in the right spot which is because we're telling it what row and column to spawn in from our map and in our sprite we just need to make that convert that to the X&Y which is x tile size okay all right so we spawn where we're supposed to spawn now I want to be able to collide with the walls now there's a few different ways we can do this it's also going to make a difference whether we decided we want to allow diagonal movement or not right now we can only move in for two affections we might want to allow diagonal diagonal is pretty easy to add in fact we can just go over here toward get keys and we can change those elif's to ifs and that's really all you have to do except for the fact that we need to change a little bit so that our diagonals aren't faster than our horizontal and vertical right the diagonal problem which I've talked about before and even have a little video on which you can see below as well so real quick we will say if oops left out my zero there so if if both VX and V Y are not 0 then we need to take VX and V Y and multiply them by 707 one which is the square root of 2 I'm sorry 1 over the square root of 2 which is explained in that video it comes from the Pythagorean theorem ok so we are now moving diagonally and we need to talk about clogging with the walls now what we could do is how we did it last time was if we're moving you know any frame where we try to move we're gonna check to see if we collide with a wall if we collide with a wall then we don't let the sprite make that move okay and we could do that so let's try that right here we move ourselves so let's just do a collision so and for this we can use the sprite collide any command the sprite collide any is a bit faster it checks between a sprite and a group which would be gamed walls and it just tells you it just gives you a true or false if this sprite hit anything in this group it doesn't tell you which one it hit but we don't care if we hit a wall we can't move so that means we need to basically undo this movement so if we put that we can just put right so we undo the movement we move back the same amount of pixels we moved forward and what that's gonna do is a couple of things one is it's not gonna let us go through the walls anymore but you're gonna notice that sometimes like here I'm pushing up I can be against the wall but other times like there I can't get right against the wall always because so sometimes the wall has this weird little space where I can't move any closer like that and the reason for that is let's say when I'm right here and I press left my sprite tries to move 10 pixels but I'm only 4 pixels away from the wall so it doesn't let me move so I'm not able to move that 4 pixels and what gets worse is when I go diagonally I just stick against the wall now most of the time and again it depends on how you want your movement to work in your game but most of the time if we hit a wall diagonally like this I want to keep sliding downwards right if I'm going diagonally I'll go over here and go diagonally to the down in to the right when I hit that wall at the bottom I would like to keep moving to the right and not have to press again to make it go to the right all right I want to slide along the walls and the only way to do that and we also need and to fix that little gap problem is going to be to make our collisions a little bit more sophisticated and what I mean by that is the sprite collide will tell us that our that our sprite hit a wall sprite and it can even tell us which sprite it hit so it's going to tell us we hit this one here at the end of the wall this bottom one on the wall we hit it but that's true no matter what direction we hit it from right if I'm moving this way I want to stop against the wall there if I'm moving this way I want to stop against the wall there and if I was moving up and so on so the way to solve that is you have to break down your movement into x and y directions and check your collisions twice so we're gonna move our sprite in however many pixels it's supposed to move in X and we're gonna see if we hit a wall if we hit a wall we're gonna stick our selves to the side of it depending on which side we hit and then if we're and then we're going to move our sprite in the ydirection however much it needs to move that way and if we hit a wall we stick against the wall that way and what that'll allow us to do is if I'm moving diagonally when I move in X I'll hit the wall and stop but when I move in why I'm free to keep going so that's gonna let me slide along the wall okay so let's try that out all right so we're gonna throw this away that's not the way we want to do our wall collision and what we're going to do is this x and y are calculating what our new position needs to be so we're gonna move our rectangles we're going to set our rectangles X equal to that equal to that X so that we can check if we need to collide with the walls okay now we're gonna go collide with walls and we're gonna say we're going to collide with walls in the xdirection then we're going to set our rectangles Y where it's supposed to be and we're gonna collide with walls again in the ydirection so two collision checks one for each axis so that means we need to change this collide with walls and you know I'm gonna go ahead and delete this definitely that is out of date and doesn't work right anymore so colliding with the walls and we're just going to put that we need to specify the direction so if if we're checking an ex collision then we need to do this bright collide between ourself and the walls group false because with the walls don't get deleted if we hit something I don't really care how many walls I hit because if I come in right in between two walls and hit them at the same time it's still the same result I need to stop moving in that direction so if I hit something then we have two choices either I hit it from the right side and I need to press up against its right side or I hit it from the left side and I need to be against its left side so we need to check to see what was our velocity and so I mean VX so if a VX was greater than zero that means our sprite was moving to the right when it collided with the wall so we need to put ourselves against the right edge of the wall so our self dot X is going to be whatever the thing was that we hit dot wrecked left however wide we are so that will put us right against it on its lefthand side because we are moving to the right now in the opposite direction if we were if our speed was less than zero then we were moving to the left and we need to hit against the righthand side of the wall block so we're gonna put ourselves against the wrecked up right and regardless of which direction we hit in we're gonna set our VX to zero because we shouldn't move anymore we ran into a wall and we'll put our rectangle at that new position we decided we should be at and we can go over to our game and even try it out our ex collisions should work our why collisions are not going to work but you can see I can slide along that y is not going to work because we need to do the same process for y so I'm just going to actually take this whole thing and I'm going to duplicate it it's almost the same we got some indenting Auto indenting happening to change that setting it's almost the same thing what's going to change is when we move in the Y we're going to check the collision and then we're going to check if our V Y was greater or less than zero right if are a few Y was greater than zero we were moving down so that means we hit the top of the block so we need to be at the top whatever our height is and if we were moving up we need to be at the bottom and we set our V Y to zero and we set our rectangles Y and now we have both X's working and I should be able to run around and I can slide along the blocks no problem no getting stuck right I get to slide along it diagonally and everything looks good okay that video went a little bit long hopefully it made sense and you have your player moving around the way you want them to move in your map that you built and in the next video we'll talk a little bit more about wrapping up our movement and then talk about a little bit more about what kind of game we might make if you have some guesses post them in the comments below maybe we can see who's closest to guessing the right direction that I'm thinking of taking this project in as always thank you so much for watching please press that like button below and subscribe if you haven't already so that you'll get the next video when it comes out very soon see you next time you
