With timestamps:

00:00 - welcome to part 5 of winning Godot we're
00:02 - in the homestretch in the previous parts
00:05 - we created the different components of
00:07 - the game and now we're gonna finish
00:08 - tying them together and completing the
00:11 - game we have our main scene we have our
00:13 - player we have our mob spawning the
00:16 - piece we need to tie it all together is
00:17 - a UI UI stands for user interface and
00:21 - it's the thing that's going to display
00:22 - what your score is it's gonna show a
00:25 - game over message when the game ends and
00:27 - it's gonna have a restart button so you
00:28 - can play again start by creating a new
00:30 - scene and its root node is going to be a
00:34 - canvas layer and we're going to name
00:37 - this the HUD HUD that stands for
00:40 - heads-up display because this canvas
00:43 - layer is going to display on top of the
00:45 - rest of the game the UI isn't overlapped
00:49 - by the game elements it rests on top
00:52 - base node for all the UI elements in
00:55 - Godot is called control to create our UI
00:57 - we're gonna use two different types of
00:59 - control nodes the label and the button
01:01 - the label is for displaying information
01:03 - and a button is for clicking on so let's
01:06 - add some child nodes here we're going to
01:08 - add a label and we're going to name that
01:14 - the score label we're going to make
01:19 - another label and we're gonna name that
01:22 - one the message label and then we're
01:26 - gonna add a button and that button is
01:31 - going to be called the start button and
01:34 - then we're gonna add a timer and that's
01:40 - going to be called the message timer so
01:47 - the score label is going to display your
01:48 - score how many points you have the
01:50 - message label will show things like game
01:53 - over get ready the start button will
01:57 - appear when the game is over so that you
01:59 - can click it to play again and the
02:01 - message timer will let us show these
02:03 - messages like get ready and have them
02:05 - disappear again after a certain amount
02:06 - of time now we need to arrange these
02:09 - nodes on the screen and to do that we're
02:11 - going to use the layout menu
02:13 - starting with the score label we're
02:15 - gonna set the anchor to Center top and
02:20 - if you were to manually resize this by
02:23 - dragging it around you can go over here
02:25 - and hit Center top again and it'll make
02:27 - sure it stays centered we're gonna use
02:29 - the margin setting to do this so that we
02:33 - can control it exactly we're gonna set
02:35 - this to minus 100 left 100 right and 100
02:43 - bottom and that's going to be the size
02:45 - for our score label we're gonna align it
02:49 - we want the text to be aligned Center in
02:54 - the horizontal and vertical and we can
02:56 - test it out in here by adding some text
02:58 - to it we'll make it zero now the default
03:00 - font is very small and not very
03:03 - good-looking but we're gonna change that
03:04 - sin first let's finish the layout here
03:07 - let's take the message label and we're
03:09 - gonna put it centered on the screen so
03:12 - we want to fix Center and the margins we
03:16 - want to use our minus 200 and 200 for
03:22 - left and right top is gonna be minus 150
03:26 - and bottom is gonna be 27 so that'll
03:31 - give us enough room to put various
03:32 - messages in there we also want the text
03:36 - to be aligned Center and we're going to
03:42 - put some sample text in here dodge the
03:47 - creeps
03:48 - so that we can see what it's going to
03:49 - look like and finally the start button
03:53 - we're going to put that one at the
03:55 - bottom Center and set its margins to
04:04 - minus 100 and 100 for the left and right
04:10 - and top is gonna be minus 200 bottom
04:14 - will be minus 100 so I have a nice large
04:17 - size button there the text we're just
04:21 - going to put start
04:24 - and we're gonna Center it make sure it
04:27 - stays Center and that's our basic layout
04:30 - now to fix the font we want to go and
04:34 - scroll down to where it says custom
04:37 - fonts and we're going to load a new
04:39 - dynamic thought click on that and under
04:45 - font you can load from the fonts folder
04:50 - our font that we want to use open that
04:52 - up and in the settings you can set the
04:56 - size 64 nice size on the message label I
05:04 - recommend you edit the text and make
05:09 - this on two lines because when you make
05:13 - the font really big it's gonna expand
05:15 - out past the size of the screen so do
05:19 - the same thing with the font on this one
05:21 - and then finally do it for the button as
05:24 - well and for the start button I made the
05:27 - font size 48 a little bit smaller now
05:30 - we're ready to add a script to the HUD
05:34 - and this is going to have a signal
05:41 - called start game that it's going to
05:44 - emit when we push the start button we're
05:48 - gonna have a show message function that
05:56 - will call whenever we want to show a
05:58 - different message on the screen
05:59 - so we take our message label and set its
06:02 - text equal to that value we take the
06:06 - message label and we show it because we
06:08 - might be hiding it sometimes after
06:09 - things go away and then we take the
06:12 - message timer and we start it the
06:16 - message timer itself we're going to set
06:18 - the wait time to two we're going to set
06:22 - one shot to on now we're going to add
06:26 - another function called game over that
06:31 - we're gonna call whenever the player
06:32 - dies and we're going to show the game
06:36 - over a message
06:37 - and then we're gonna wait for the
06:41 - message timer to end so we do that using
06:44 - a command called yield and in GT script
06:49 - what yield does is it let you let's you
06:51 - name a object the message timer and one
06:55 - of its signals the timeout is what we
06:57 - care about and it will stop execution of
07:02 - this function until this signal appears
07:05 - so we show the message game over the
07:07 - message timer starts and not until that
07:10 - two seconds has gone by will we do the
07:12 - next thing which is show the start
07:16 - button set the message labeled text to
07:22 - the game title this is how we do two
07:32 - lines the backslash n stands for newline
07:33 - and then we need to show the message
07:36 - label so this means whenever you die
07:42 - you'll see game over for two seconds and
07:44 - then it'll go away and the button will
07:46 - show up so you can play again we're
07:49 - going to add an update score function
07:53 - that's just going to it we're going to
07:54 - send the score over and tell it to
07:55 - update the score label text to whatever
08:01 - that is and then we need to connect the
08:05 - timeout of the message timer
08:13 - and when that times out we're going to
08:15 - hide the message label and then we're
08:22 - going to connect the pressed signal of
08:25 - the button so that whenever they press
08:28 - the button we're going to hide the start
08:32 - button and we're going to omit that
08:38 - start game signal
08:44 - we're almost there we just need to
08:46 - connect our HUD with our main scene so
08:48 - if we go to the main scene we can click
08:52 - on the main node and instance the HUD
08:55 - inside it now we can see our HUD showing
08:59 - up here in our main scene we're gonna
09:01 - take the HUD start game signal and we're
09:04 - going to connect it to mains new game
09:12 - function that we already made so we
09:14 - don't need to make the function it's now
09:17 - here in main new game is gonna run when
09:21 - the HUD sends that signal in new game
09:25 - will say dollar sign HUD show message
09:32 - get ready and since we've set the square
09:35 - root of zero we want to update the score
09:38 - to that value in the game over function
09:43 - we just need to call the same function
09:46 - in HUD so it does its code over there
09:52 - for the game over state and then in here
09:57 - where the score timer times out we need
09:59 - to make sure we update the score with
10:04 - that value so let's give it a try
10:06 - we're on our main scene we're gonna hit
10:08 - play and we're gonna see our start
10:13 - screen here we're gonna start and
10:15 - there's our player here come the baddies
10:19 - and if the one hits me the game is over
10:22 - and I go back to ready to start again
10:25 - and now that we have everything working
10:31 - when we hit the main play button it says
10:34 - that no main scene has been defined so
10:36 - we can select our main scene and make
10:40 - that our default scene that runs when
10:43 - the game plays so now anytime you hit
10:46 - this play button it's gonna play the
10:48 - main scene so congratulations you've
10:49 - finished your first game in goodell now
10:53 - I'm gonna make one more video in this
10:56 - series the final video we'll go over a
10:58 - few
10:58 - Editions you can make to spice up the
11:00 - game a little bit things like sound and
11:03 - a background and some other little
11:06 - effects that'll make the game look a
11:08 - little nicer these are purely optional
11:10 - and hopefully will give you some ideas
11:11 - of other things you could add to spice
11:13 - this game up or to use in your own game
11:16 - projects on Godot

Cleaned transcript:

welcome to part 5 of winning Godot we're in the homestretch in the previous parts we created the different components of the game and now we're gonna finish tying them together and completing the game we have our main scene we have our player we have our mob spawning the piece we need to tie it all together is a UI UI stands for user interface and it's the thing that's going to display what your score is it's gonna show a game over message when the game ends and it's gonna have a restart button so you can play again start by creating a new scene and its root node is going to be a canvas layer and we're going to name this the HUD HUD that stands for headsup display because this canvas layer is going to display on top of the rest of the game the UI isn't overlapped by the game elements it rests on top base node for all the UI elements in Godot is called control to create our UI we're gonna use two different types of control nodes the label and the button the label is for displaying information and a button is for clicking on so let's add some child nodes here we're going to add a label and we're going to name that the score label we're going to make another label and we're gonna name that one the message label and then we're gonna add a button and that button is going to be called the start button and then we're gonna add a timer and that's going to be called the message timer so the score label is going to display your score how many points you have the message label will show things like game over get ready the start button will appear when the game is over so that you can click it to play again and the message timer will let us show these messages like get ready and have them disappear again after a certain amount of time now we need to arrange these nodes on the screen and to do that we're going to use the layout menu starting with the score label we're gonna set the anchor to Center top and if you were to manually resize this by dragging it around you can go over here and hit Center top again and it'll make sure it stays centered we're gonna use the margin setting to do this so that we can control it exactly we're gonna set this to minus 100 left 100 right and 100 bottom and that's going to be the size for our score label we're gonna align it we want the text to be aligned Center in the horizontal and vertical and we can test it out in here by adding some text to it we'll make it zero now the default font is very small and not very goodlooking but we're gonna change that sin first let's finish the layout here let's take the message label and we're gonna put it centered on the screen so we want to fix Center and the margins we want to use our minus 200 and 200 for left and right top is gonna be minus 150 and bottom is gonna be 27 so that'll give us enough room to put various messages in there we also want the text to be aligned Center and we're going to put some sample text in here dodge the creeps so that we can see what it's going to look like and finally the start button we're going to put that one at the bottom Center and set its margins to minus 100 and 100 for the left and right and top is gonna be minus 200 bottom will be minus 100 so I have a nice large size button there the text we're just going to put start and we're gonna Center it make sure it stays Center and that's our basic layout now to fix the font we want to go and scroll down to where it says custom fonts and we're going to load a new dynamic thought click on that and under font you can load from the fonts folder our font that we want to use open that up and in the settings you can set the size 64 nice size on the message label I recommend you edit the text and make this on two lines because when you make the font really big it's gonna expand out past the size of the screen so do the same thing with the font on this one and then finally do it for the button as well and for the start button I made the font size 48 a little bit smaller now we're ready to add a script to the HUD and this is going to have a signal called start game that it's going to emit when we push the start button we're gonna have a show message function that will call whenever we want to show a different message on the screen so we take our message label and set its text equal to that value we take the message label and we show it because we might be hiding it sometimes after things go away and then we take the message timer and we start it the message timer itself we're going to set the wait time to two we're going to set one shot to on now we're going to add another function called game over that we're gonna call whenever the player dies and we're going to show the game over a message and then we're gonna wait for the message timer to end so we do that using a command called yield and in GT script what yield does is it let you let's you name a object the message timer and one of its signals the timeout is what we care about and it will stop execution of this function until this signal appears so we show the message game over the message timer starts and not until that two seconds has gone by will we do the next thing which is show the start button set the message labeled text to the game title this is how we do two lines the backslash n stands for newline and then we need to show the message label so this means whenever you die you'll see game over for two seconds and then it'll go away and the button will show up so you can play again we're going to add an update score function that's just going to it we're going to send the score over and tell it to update the score label text to whatever that is and then we need to connect the timeout of the message timer and when that times out we're going to hide the message label and then we're going to connect the pressed signal of the button so that whenever they press the button we're going to hide the start button and we're going to omit that start game signal we're almost there we just need to connect our HUD with our main scene so if we go to the main scene we can click on the main node and instance the HUD inside it now we can see our HUD showing up here in our main scene we're gonna take the HUD start game signal and we're going to connect it to mains new game function that we already made so we don't need to make the function it's now here in main new game is gonna run when the HUD sends that signal in new game will say dollar sign HUD show message get ready and since we've set the square root of zero we want to update the score to that value in the game over function we just need to call the same function in HUD so it does its code over there for the game over state and then in here where the score timer times out we need to make sure we update the score with that value so let's give it a try we're on our main scene we're gonna hit play and we're gonna see our start screen here we're gonna start and there's our player here come the baddies and if the one hits me the game is over and I go back to ready to start again and now that we have everything working when we hit the main play button it says that no main scene has been defined so we can select our main scene and make that our default scene that runs when the game plays so now anytime you hit this play button it's gonna play the main scene so congratulations you've finished your first game in goodell now I'm gonna make one more video in this series the final video we'll go over a few Editions you can make to spice up the game a little bit things like sound and a background and some other little effects that'll make the game look a little nicer these are purely optional and hopefully will give you some ideas of other things you could add to spice this game up or to use in your own game projects on Godot
