With timestamps:

00:00 - here's the situation you have a bunch of
00:03 - animations on your game character but
00:04 - it's hard to manage the transitions
00:06 - between them you've been writing tons of
00:08 - if statements and every time you change
00:09 - something it all breaks you'll solve
00:11 - this with godot's animation state
00:13 - machine so we're starting out with this
00:15 - sprite sheet which you can get in the
00:17 - link below and I've already made a
00:19 - character and created the animations in
00:23 - the animation player for all of these
00:25 - different animations we have run we have
00:29 - some attacks and all of them are set up
00:33 - and ready to go and in our script I have
00:36 - some generic movement kinematic body and
00:41 - movement so if we were to play this
00:43 - scene you know the character can move
00:47 - around and we are reversing directions
00:51 - so they face in the direction we want
00:53 - them to face but we want to play the
00:57 - animations at the right time so assuming
01:00 - you have all that you at you're going to
01:02 - want to add an animation tree and in
01:06 - this animation tree we're going to go
01:10 - over here to the tree root we're gonna
01:12 - select a new animation node state
01:16 - machine and then for the animation
01:19 - player property we're going to click a
01:21 - sign and choose our animation player
01:23 - node so that it will be able to pull all
01:27 - the animations from that node and now in
01:31 - here we can start adding our animations
01:34 - if I right-click I can do the animation
01:36 - and here I see all the ones that I had
01:38 - right so I can choose my idle animation
01:40 - and I'm going to go ahead and I'm going
01:43 - to add the rest of them
01:50 - now notice the message down here if we
01:53 - click active on now this is active and
01:56 - it will do the animations when we click
01:58 - on them so running idle run attack and
02:03 - now that we have the animations in here
02:06 - we can make connections between them
02:08 - let's say we wanted to connect our
02:09 - attack to our idle this button here
02:13 - connects nodes so if I click that I can
02:16 - draw and connect a line between idle and
02:19 - attack now let's let's add the other one
02:23 - over here and so now I have a line
02:27 - between idle and attack check one goes
02:29 - there Tech 2 and then a Tech 3 goes back
02:33 - to idle so what happens when I click
02:35 - attack 1 well it plays right in a tech 2
02:38 - place but if I'm on idle and I click
02:42 - attack too we just see a tech 2 and
02:45 - that's because these transitions by
02:48 - default are mixed a little lighter
02:51 - immediate the switch mode on the
02:54 - connections if I were to change this one
02:58 - the switch mode to at end which I could
03:04 - also do with this one now what happens
03:07 - is if we're in the idle State and we
03:10 - want to transition to a tech - it's
03:12 - going to play a tech one first complete
03:15 - then play a tech 2 let's see that again
03:18 - a tech one attack - but now we stopped
03:23 - because the tech - of course doesn't
03:24 - loop so when it reaches the end of the
03:27 - animation
03:28 - it goes no further well this one we can
03:32 - set to auto advanced so that means at
03:34 - the end of attack - it's going to go
03:37 - back to idle watch if I click attack -
03:40 - I'm back to idle so let's connect up all
03:44 - the other animations
03:53 - you
04:03 - so here our connections all made up and
04:07 - so now we can transition from whatever
04:09 - state to whatever state so when we're in
04:11 - idle we can go to run along this
04:14 - connection run goes right back to idle
04:17 - if you attack you're going to come right
04:21 - back to idle if you're hurt you're gonna
04:23 - come right back to idle then we have the
04:25 - die animation just not going to have a
04:30 - return we get there it's the end and we
04:32 - can mark that using this button right
04:35 - here as the end animation and we can
04:42 - also mark idle here as the start
04:44 - animation that way it'll automatically
04:47 - be playing this one when the game starts
04:49 - I just show you can double up these
04:53 - things we make a little more room here
04:55 - we can also add another copy of the
04:59 - attack one in that tag too to make a to
05:03 - make a double attack which we could do
05:07 - like that set these two at end
05:11 - auto-advance now we have a way for us to
05:14 - do a double attack as well as the
05:17 - individual single ones now how would we
05:20 - control this in code when we move let's
05:23 - go over to our adventurers script here
05:26 - and we're going to add some code to call
05:29 - those state transitions in our for our
05:34 - animation tree and we're going to start
05:36 - by getting a variable that will hold
05:41 - that reference to the animation state
05:44 - machine and in our ready we need to get
05:51 - that reference so state machine equals
05:54 - animation tree get and there's a
05:58 - parameter that we have to get parameters
06:01 - playback is the parameter we want now we
06:05 - have a reference to that and that's
06:07 - going to get us this root node this
06:11 - animation node state machine know
06:16 - which has all of the functions for
06:19 - calling the individual animations and
06:22 - making those transitions so for example
06:29 - let's start with the simpler ones let's
06:31 - say we we want to be able to play the
06:34 - hurt animation when the player gets hurt
06:37 - so whatever item is damaging the player
06:41 - could call the players hurt function
06:42 - which is going to tell the state machine
06:44 - to travel to the hurt animation what
06:52 - travel does is find the shortest path
06:54 - between current node and the one you're
06:58 - going to so if we're in idle and we said
07:00 - travel - attack - it has to go through
07:03 - attack 1 that's how travel works and
07:09 - then we could have the same thing with
07:10 - die when the players health runs out you
07:14 - can tell it to travel to die and we
07:19 - could also set physics process to false
07:22 - so that we can't even move anymore now
07:26 - we want to handle some of the movement
07:30 - animations so in our get input we're
07:33 - gonna check the current and get the
07:35 - current animation state which comes from
07:37 - state machine diet current note that'll
07:43 - tell us what note is currently running
07:45 - like idle or run and then once we check
07:53 - our inputs and get our velocity we can
07:56 - we can put here if velocity that length
08:01 - equals zero then we want to be in the
08:05 - idle state so we're going to say travel
08:07 - to idle and then if our velocity length
08:18 - length is greater than zero
08:24 - then we're going to travel to the run
08:29 - animation we can also check for our
08:32 - attack in input here so after we set the
08:36 - speed to zero we can check if his action
08:43 - just pressed and we'll check for the
08:46 - attack action and if we did then we're
08:51 - going to travel to attack one and I'll
09:04 - copy this here
09:06 - and then I also have an input called big
09:10 - attack that lets us call the attack
09:15 - we're going to call a tech to number two
09:18 - I haven't changed the names here so I'm
09:20 - just using the defaults so we want big
09:22 - attack to travel to attack to two now if
09:26 - we go to attack one let's say we're in
09:29 - this state say we're going to here but
09:32 - we call idle or run we're gonna jump
09:36 - back so I'm also going to return if I'm
09:45 - attacking so I don't check the other
09:47 - inputs and set this in try and set the
09:50 - state yet so let's try that out so here
09:56 - I am running around I'm in run when I'm
09:58 - moving I'm an idle when I'm not if I
10:01 - press attack attack happens if i press
10:04 - if i press big attack I get the double
10:08 - attack and if I attack while I'm moving
10:11 - I can still do that
10:14 - this tutorial is part of my nugudo
10:16 - recipes website the goal is to collect
10:19 - all the best tips and lessons to help
10:20 - make you a better go to a developer if
10:22 - you like this video I hope you'll go and
10:24 - check out the site and make sure to hit
10:26 - subscribe so you'll be notified whenever
10:27 - I release new videos thanks for watching

Cleaned transcript:

here's the situation you have a bunch of animations on your game character but it's hard to manage the transitions between them you've been writing tons of if statements and every time you change something it all breaks you'll solve this with godot's animation state machine so we're starting out with this sprite sheet which you can get in the link below and I've already made a character and created the animations in the animation player for all of these different animations we have run we have some attacks and all of them are set up and ready to go and in our script I have some generic movement kinematic body and movement so if we were to play this scene you know the character can move around and we are reversing directions so they face in the direction we want them to face but we want to play the animations at the right time so assuming you have all that you at you're going to want to add an animation tree and in this animation tree we're going to go over here to the tree root we're gonna select a new animation node state machine and then for the animation player property we're going to click a sign and choose our animation player node so that it will be able to pull all the animations from that node and now in here we can start adding our animations if I rightclick I can do the animation and here I see all the ones that I had right so I can choose my idle animation and I'm going to go ahead and I'm going to add the rest of them now notice the message down here if we click active on now this is active and it will do the animations when we click on them so running idle run attack and now that we have the animations in here we can make connections between them let's say we wanted to connect our attack to our idle this button here connects nodes so if I click that I can draw and connect a line between idle and attack now let's let's add the other one over here and so now I have a line between idle and attack check one goes there Tech 2 and then a Tech 3 goes back to idle so what happens when I click attack 1 well it plays right in a tech 2 place but if I'm on idle and I click attack too we just see a tech 2 and that's because these transitions by default are mixed a little lighter immediate the switch mode on the connections if I were to change this one the switch mode to at end which I could also do with this one now what happens is if we're in the idle State and we want to transition to a tech it's going to play a tech one first complete then play a tech 2 let's see that again a tech one attack but now we stopped because the tech of course doesn't loop so when it reaches the end of the animation it goes no further well this one we can set to auto advanced so that means at the end of attack it's going to go back to idle watch if I click attack I'm back to idle so let's connect up all the other animations you so here our connections all made up and so now we can transition from whatever state to whatever state so when we're in idle we can go to run along this connection run goes right back to idle if you attack you're going to come right back to idle if you're hurt you're gonna come right back to idle then we have the die animation just not going to have a return we get there it's the end and we can mark that using this button right here as the end animation and we can also mark idle here as the start animation that way it'll automatically be playing this one when the game starts I just show you can double up these things we make a little more room here we can also add another copy of the attack one in that tag too to make a to make a double attack which we could do like that set these two at end autoadvance now we have a way for us to do a double attack as well as the individual single ones now how would we control this in code when we move let's go over to our adventurers script here and we're going to add some code to call those state transitions in our for our animation tree and we're going to start by getting a variable that will hold that reference to the animation state machine and in our ready we need to get that reference so state machine equals animation tree get and there's a parameter that we have to get parameters playback is the parameter we want now we have a reference to that and that's going to get us this root node this animation node state machine know which has all of the functions for calling the individual animations and making those transitions so for example let's start with the simpler ones let's say we we want to be able to play the hurt animation when the player gets hurt so whatever item is damaging the player could call the players hurt function which is going to tell the state machine to travel to the hurt animation what travel does is find the shortest path between current node and the one you're going to so if we're in idle and we said travel attack it has to go through attack 1 that's how travel works and then we could have the same thing with die when the players health runs out you can tell it to travel to die and we could also set physics process to false so that we can't even move anymore now we want to handle some of the movement animations so in our get input we're gonna check the current and get the current animation state which comes from state machine diet current note that'll tell us what note is currently running like idle or run and then once we check our inputs and get our velocity we can we can put here if velocity that length equals zero then we want to be in the idle state so we're going to say travel to idle and then if our velocity length length is greater than zero then we're going to travel to the run animation we can also check for our attack in input here so after we set the speed to zero we can check if his action just pressed and we'll check for the attack action and if we did then we're going to travel to attack one and I'll copy this here and then I also have an input called big attack that lets us call the attack we're going to call a tech to number two I haven't changed the names here so I'm just using the defaults so we want big attack to travel to attack to two now if we go to attack one let's say we're in this state say we're going to here but we call idle or run we're gonna jump back so I'm also going to return if I'm attacking so I don't check the other inputs and set this in try and set the state yet so let's try that out so here I am running around I'm in run when I'm moving I'm an idle when I'm not if I press attack attack happens if i press if i press big attack I get the double attack and if I attack while I'm moving I can still do that this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better go to a developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching
