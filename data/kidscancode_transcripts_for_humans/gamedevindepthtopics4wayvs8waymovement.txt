With timestamps:

00:00 - welcome to the first video on our new
00:01 - series which I'm calling in depth topics
00:03 - the purpose of these videos will be to
00:06 - explain or explore a little more deeply
00:08 - into certain game development techniques
00:10 - that may be a little more difficult to
00:11 - grasp for beginners most of them will be
00:14 - math related but they may also cover
00:16 - other things that come up or that
00:17 - viewers ask for one other thing I'll be
00:21 - using Python and PI game for these
00:22 - videos but the subjects themselves will
00:24 - apply to any language you might be
00:26 - working in so hopefully hopefully
00:28 - they'll help out anyone who wants to
00:30 - understand a little bit more about game
00:32 - development okay in this video I want to
00:36 - talk about movement so I've made a brief
00:40 - PI game program here which is going to
00:42 - pop up a little sprite so this yellow
00:45 - square is going to be our player and we
00:47 - want to talk about how to make it move
00:49 - around the screen and there's a lot of
00:52 - different ways you can do this and part
00:55 - of it will depend on what kind of game
00:56 - you're making but there are some
00:58 - Universal things you have to take into
01:00 - account so to start with let's talk
01:04 - about the simplest kind of movement I
01:05 - want to use the arrow keys to move in
01:08 - the four directions so that means that
01:13 - in my update portion of my or my update
01:18 - method of my sprite I want to set the V
01:22 - X and the V Y so the speed to zero okay
01:26 - so it's not going to be moving unless I
01:29 - press a key so I'm gonna get the key
01:32 - state this is get pressed that tells me
01:37 - which keys are pressed down and now I'm
01:40 - going to tell it what to change
01:42 - depending on which key I press so for
01:44 - example if the up key is pressed then I
01:50 - want my V Y to be negative and I'm going
01:55 - to use v for this and we'll talk about
01:57 - how you pick a speed in a little bit but
02:01 - we'll just stick with five is a good
02:02 - number to start with now I also want to
02:05 - do the other four or sorry the other
02:08 - three arrow keys so I'm gonna just copy
02:12 - and paste this
02:13 - and what we want to change is I want to
02:18 - only move in the four direction so I
02:19 - only want one of these to be the case so
02:23 - I'm gonna change these two elif's
02:25 - and now if we press the down arrow key
02:31 - then our V Y needs to be positive if we
02:34 - press the left then our V Y needs to be
02:39 - our sorry IV X needs to be negative and
02:42 - if we press the right arrow key we press
02:47 - the right arrow key then our V X would
02:50 - be positive size and then we just tell
02:54 - it that we want the rectangle the
02:58 - sprites bounding box just to move at
03:02 - that speed so we just add the velocity
03:07 - to the position so we start out in the
03:11 - middle of the screen if I press the down
03:13 - arrow key Y will increase by five pixels
03:18 - these are pixels and I'll move down so
03:21 - what that will look like is this let's
03:25 - see as I press the keys I can move in
03:27 - one of the four directions so this is
03:31 - your simplest form of movement called
03:32 - four-way movement which if you've ever
03:35 - played pac-man or anything like that
03:37 - looks very familiar to you now 4-way
03:42 - movement is great if your game is based
03:45 - on a grid and it's something like
03:47 - pac-man or snake or something like that
03:48 - where you only want the player to move
03:52 - in the four directions but what about if
03:54 - you want to go diagonally well we could
03:57 - very simply just take these elif's and
04:00 - turn them back into ifs now if I hold
04:04 - down up and left at the same time then
04:08 - my VX in my V Y are both going to be set
04:10 - and this is what's called eight-way
04:13 - movement and it allows you to move
04:14 - diagonally let's see what that looks
04:16 - like okay so I'm going to pull down to
04:18 - and you can see I'm moving diagonally
04:20 - but now we run into our first snag
04:26 - and this is a mathematical problem watch
04:29 - what happens when I start moving to the
04:30 - right and then I'm going to press up do
04:33 - you see how I'm moving faster
04:36 - the problem with diagonal movement on a
04:38 - grid and since our screen is a grid of
04:42 - pixels we're always moving on a grid is
04:44 - that diagonals will be faster than
04:48 - horizontal and vertical movement the way
04:51 - we're doing it and the reason for that
04:53 - has to do with Pythagoras so let's look
04:58 - at a picture here so if we're trying to
05:02 - move one pixel in the X and one pixel in
05:06 - the Y then really what we've done is we
05:08 - moved from this point to this point and
05:10 - how far is that
05:12 - well the Pythagorean theorem tells us
05:15 - that the distance or the length of the
05:18 - diagonal is the square root of the sum
05:21 - of the other two sides squared which
05:23 - comes out to be 8 a square root of 2 or
05:26 - about 1.4 so instead of moving one pixel
05:29 - we moved effectively 1.4 pixels in
05:32 - distance and that's why it looks like
05:36 - we're moving faster and in our example
05:40 - where our speed is 5 you can see the
05:45 - answer comes out to be 5 times the
05:47 - square root of 2 that's how far we moved
05:49 - somewhere around 7 but what we really
05:52 - want is we want to move a distance of
05:55 - five even if we're going diagonal which
05:59 - means we're going to need to divide by
06:00 - the square root of 2 whatever our speed
06:03 - is if we divide by the square root of 2
06:05 - we'll keep it at the same length so to
06:11 - fix this all we need to do is before we
06:12 - move make sure we adjust our VX and V Y
06:18 - if we're going diagonal so if both of
06:24 - them are not 0
06:27 - right we only want to do this if we're
06:29 - going diagonal so if both of them are
06:30 - not zero then I just want to take them
06:33 - both and divide by the square root of
06:35 - two I'm just going to use one point four
06:41 - one four sometimes you may see
06:47 - programmers do it this way instead of
06:50 - dividing by the square root of two they
06:51 - multiply by 0.707 one which is the exact
06:58 - same thing you can do it whichever way
07:00 - you prefer but we are just dividing by
07:05 - the square root of two and getting our
07:07 - diagonal fixed so now if I run it you'll
07:10 - see that whatever direction we go in the
07:14 - speed is the same and that is proper
07:20 - fixed eight-way movement in the next
07:27 - video we'll talk about some of the
07:29 - issues you can run into with pixel based
07:32 - movement like this mainly that pixel
07:37 - positions are whole numbers so you can't
07:39 - move half a pixel and that limits that
07:42 - can limit your movement quite a bit and
07:43 - cause some strange things to happen that
07:45 - you don't expect and we'll talk about
07:48 - how you can deal with those problems as
07:50 - well so thanks for watching if you like
07:54 - these videos and you find them helpful
07:55 - please give them a thumbs up that really
07:57 - helps other people find them if you're
07:59 - not subscribed please do so so you don't
08:01 - miss any new videos as they come out see
08:03 - you next time
08:11 - you

Cleaned transcript:

welcome to the first video on our new series which I'm calling in depth topics the purpose of these videos will be to explain or explore a little more deeply into certain game development techniques that may be a little more difficult to grasp for beginners most of them will be math related but they may also cover other things that come up or that viewers ask for one other thing I'll be using Python and PI game for these videos but the subjects themselves will apply to any language you might be working in so hopefully hopefully they'll help out anyone who wants to understand a little bit more about game development okay in this video I want to talk about movement so I've made a brief PI game program here which is going to pop up a little sprite so this yellow square is going to be our player and we want to talk about how to make it move around the screen and there's a lot of different ways you can do this and part of it will depend on what kind of game you're making but there are some Universal things you have to take into account so to start with let's talk about the simplest kind of movement I want to use the arrow keys to move in the four directions so that means that in my update portion of my or my update method of my sprite I want to set the V X and the V Y so the speed to zero okay so it's not going to be moving unless I press a key so I'm gonna get the key state this is get pressed that tells me which keys are pressed down and now I'm going to tell it what to change depending on which key I press so for example if the up key is pressed then I want my V Y to be negative and I'm going to use v for this and we'll talk about how you pick a speed in a little bit but we'll just stick with five is a good number to start with now I also want to do the other four or sorry the other three arrow keys so I'm gonna just copy and paste this and what we want to change is I want to only move in the four direction so I only want one of these to be the case so I'm gonna change these two elif's and now if we press the down arrow key then our V Y needs to be positive if we press the left then our V Y needs to be our sorry IV X needs to be negative and if we press the right arrow key we press the right arrow key then our V X would be positive size and then we just tell it that we want the rectangle the sprites bounding box just to move at that speed so we just add the velocity to the position so we start out in the middle of the screen if I press the down arrow key Y will increase by five pixels these are pixels and I'll move down so what that will look like is this let's see as I press the keys I can move in one of the four directions so this is your simplest form of movement called fourway movement which if you've ever played pacman or anything like that looks very familiar to you now 4way movement is great if your game is based on a grid and it's something like pacman or snake or something like that where you only want the player to move in the four directions but what about if you want to go diagonally well we could very simply just take these elif's and turn them back into ifs now if I hold down up and left at the same time then my VX in my V Y are both going to be set and this is what's called eightway movement and it allows you to move diagonally let's see what that looks like okay so I'm going to pull down to and you can see I'm moving diagonally but now we run into our first snag and this is a mathematical problem watch what happens when I start moving to the right and then I'm going to press up do you see how I'm moving faster the problem with diagonal movement on a grid and since our screen is a grid of pixels we're always moving on a grid is that diagonals will be faster than horizontal and vertical movement the way we're doing it and the reason for that has to do with Pythagoras so let's look at a picture here so if we're trying to move one pixel in the X and one pixel in the Y then really what we've done is we moved from this point to this point and how far is that well the Pythagorean theorem tells us that the distance or the length of the diagonal is the square root of the sum of the other two sides squared which comes out to be 8 a square root of 2 or about 1.4 so instead of moving one pixel we moved effectively 1.4 pixels in distance and that's why it looks like we're moving faster and in our example where our speed is 5 you can see the answer comes out to be 5 times the square root of 2 that's how far we moved somewhere around 7 but what we really want is we want to move a distance of five even if we're going diagonal which means we're going to need to divide by the square root of 2 whatever our speed is if we divide by the square root of 2 we'll keep it at the same length so to fix this all we need to do is before we move make sure we adjust our VX and V Y if we're going diagonal so if both of them are not 0 right we only want to do this if we're going diagonal so if both of them are not zero then I just want to take them both and divide by the square root of two I'm just going to use one point four one four sometimes you may see programmers do it this way instead of dividing by the square root of two they multiply by 0.707 one which is the exact same thing you can do it whichever way you prefer but we are just dividing by the square root of two and getting our diagonal fixed so now if I run it you'll see that whatever direction we go in the speed is the same and that is proper fixed eightway movement in the next video we'll talk about some of the issues you can run into with pixel based movement like this mainly that pixel positions are whole numbers so you can't move half a pixel and that limits that can limit your movement quite a bit and cause some strange things to happen that you don't expect and we'll talk about how you can deal with those problems as well so thanks for watching if you like these videos and you find them helpful please give them a thumbs up that really helps other people find them if you're not subscribed please do so so you don't miss any new videos as they come out see you next time you
