With timestamps:

00:00 - welcome back for another in-depth topic
00:02 - on game development in this video we're
00:05 - going to talk about steering behaviors
00:07 - which is a simple way to add realistic
00:10 - and complex seeming movement to the
00:14 - computer-controlled sprites in your game
00:16 - for this first video we're going to be
00:18 - looking at the seek behavior which is
00:20 - how you make a sprite chase a target
00:22 - there are lots of other steering
00:25 - behaviors which we'll cover in later
00:28 - videos for reference if you want to
00:30 - learn more about steering behaviors a
00:32 - really great resource is this website
00:35 - for the book called the nature of code
00:38 - by daniel Schiffman especially chapter 6
00:40 - chapter 6 is all about all sorts of
00:43 - steering behaviors and ways you can get
00:46 - sprites to do intelligent looking things
00:49 - like following lines following the
00:54 - leader avoiding obstacles all that kind
00:58 - of thing and you know for example here's
01:01 - some examples of line following where
01:08 - the sprites will try and stay on a line
01:11 - and and follow that okay to start out
01:15 - I've just made a little program here
01:17 - that's going to spawn a mob sprite and
01:20 - this fob sprite is going to have three
01:24 - vectors associated with it a position
01:27 - vector that represents where the sprite
01:30 - is located on the screen and it's going
01:33 - to pick a random X and a random y when
01:35 - it spawns so it's going to spawn
01:36 - somewhere randomly on the screen and
01:38 - then it's gonna have a velocity vector
01:41 - and that represents how much the sprite
01:45 - will move every frame how many pixels it
01:48 - will move and in what direction and I'm
01:51 - going to make that equal to the max
01:52 - speed which I set to 5 so 5 will be its
01:57 - maximum speed and I'm just making a
02:00 - vector with that pointing to the right
02:02 - but then I'm rotating it I'm applying
02:04 - the rotation to it of a random number
02:07 - between 0 and 360 so it'll point in a
02:10 - random directions be turned
02:12 - differently each time we spawn it and
02:14 - then it's going to have an acceleration
02:17 - vector an acceleration vector represents
02:19 - how much the velocity is changing each
02:22 - frame and that's going to be set to a
02:25 - zero vector so it's not going to change
02:27 - so it's velocity will be steady so when
02:31 - we spawn this sprite will spawn randomly
02:33 - on the screen somewhere moving in a
02:35 - random direction and every frame it's
02:40 - just going to update by we take our
02:43 - velocity and we add the acceleration
02:45 - right because the acceleration is how
02:46 - much the velocity changes if and I have
02:49 - this little this little if here just to
02:52 - make sure that our velocity never gets
02:54 - bigger than our maximum speed so we
02:56 - check the length of the velocity vector
02:58 - and if that's greater than five then
03:01 - we're gonna scale the length of the
03:04 - vector to be five and that way we won't
03:06 - ever go faster than five and then we
03:10 - take the position and we add the
03:12 - velocity to it and now we have our new
03:13 - position and then I have some ifs here
03:15 - just making the sprite wrap around the
03:17 - screen okay so when we run it we get a
03:20 - random sprite on the screen going in a
03:22 - random direction and if I hit the V key
03:25 - I've turned on I've had a little thing
03:29 - to show us - show the vectors here so
03:30 - this green line is the sprites velocity
03:33 - vector and you can see it's it's
03:36 - supposed to be five I'm drawing it
03:38 - bigger just so you can see it on the
03:39 - screen because five pixels would be kind
03:41 - of short but you can see that the
03:43 - velocity vector is pointing in the
03:45 - direction it's going and this bright has
03:48 - no acceleration so it's velocity is
03:51 - never changing always stays the same now
03:57 - let's say we wanted to have the mob
04:00 - chase the mouse around the screen so I
04:02 - won't always want the mob to try and
04:05 - move towards the mouse so I can make a
04:08 - little method here called follow Mouse
04:10 - and what I'm going to do is get find out
04:16 - what the position of the mouse is
04:20 - we get the mouse's position all right
04:22 - and that's going to be an XY pair which
04:26 - we can think of as a vector representing
04:30 - the mouse's position and we already have
04:33 - a vector representing the mobs position
04:36 - so how do we find the vector that points
04:39 - from the mob to the mouse well let's
04:44 - look at some vector math for a second
04:48 - okay so let's say I'll have two vectors
04:50 - V 1 and V 2 and these are the values of
04:55 - them well adding two vectors together
04:58 - means you just add their X's and you add
05:01 - their Y's so V 1 plus V 2 is 50 plus 10
05:05 - which is 60 and 30 plus 20 which is 50
05:09 - now another way to look at that is if
05:12 - you add two vectors it's like putting
05:14 - the second one on the tip of the first
05:17 - one and you get the vector that points
05:19 - all the way to the end all right so
05:22 - that's that this vector is 60 comma 50
05:25 - this blue vector and subtraction is
05:31 - pretty much works pretty much the same
05:33 - way if you take v1 minus v2 that's the
05:38 - same as adding v1 plus the negative of
05:42 - v2 just like when you use numbers adding
05:44 - subtracting a number is the same as
05:46 - adding a negative number so the negative
05:49 - v2 is just V 2 pointing in the opposite
05:52 - direction all right it's going to be
05:53 - negative 10 negative 20 and that's what
05:56 - this little vector here is so if we add
05:59 - those together we get this vector which
06:03 - is 50 minus 10 and 30 minus 20 well
06:07 - another way of looking at that is if v2
06:10 - and v1 both represent positions for
06:13 - where an object is all right this is
06:16 - where this is where the mouse is v1 and
06:19 - v2 is where the mob is then this vector
06:24 - is pointing from v2 to v1 so if you if
06:31 - you take V 1 and subtract v2 you get a
06:34 - vector
06:34 - pointing from v2 to v1 if we did it the
06:39 - other way around if we said v2 minus v1
06:41 - we would get the same vector point but
06:43 - pointing in the opposite direction we
06:45 - would get the vector from v1 to v2 okay
06:49 - so when you subtract two vectors you get
06:51 - the vector pointing from the second to
06:54 - the first and that's all we're gonna do
06:58 - to get the vector pointing at the mouse
07:01 - and we want that to be our acceleration
07:04 - because we want to accelerate towards
07:06 - the mouse so we're gonna take the mouse
07:09 - position and we're gonna subtract the
07:13 - mob's position and now we have a vector
07:17 - now we have the vector pointing from the
07:19 - mob to the mouse but the mouse might be
07:23 - far away or it might be nearby we don't
07:26 - want to accelerate ridiculously fast
07:28 - when the mouse is on the opposite side
07:30 - of the screen I want to always
07:32 - accelerate at a at a steady speed so
07:36 - that means I want to take this vector
07:38 - that I just got and I want to normalize
07:41 - it and all normalised means when you're
07:44 - talking about vectors is you're making
07:46 - the length one so this takes the vector
07:50 - it keeps pointing in the same direction
07:51 - the length just becomes one instead of
07:54 - whatever the length was before and even
07:58 - this is call also called a unit vector
08:00 - and unit vectors are super useful
08:02 - because they help you figure out
08:03 - directions right they tell you what
08:05 - direction something's going in but they
08:06 - don't worry about the distance or the
08:08 - length or the speed or any of those
08:10 - things right they just worry about the
08:12 - direction and if we have the direction
08:14 - of something we can always scale that
08:17 - vector to whatever size we want so let's
08:19 - multiply that by 0.5 so now our
08:23 - acceleration is going to be 0.5 in
08:27 - whatever direction the mouse is so in
08:31 - our update we will just now use that
08:32 - follow mouse so we follow the mouse
08:38 - and now what you'll see is that the mob
08:41 - is going to accelerate towards the mouse
08:43 - and I turn the vectors back on you'll
08:45 - see that the velocity is changing to go
08:49 - towards the mouse and that's pretty good
08:55 - but I'll turn the vector back off here
08:59 - it's not quite natural all right the the
09:02 - the mob kind of turns on a dime and it
09:07 - looks kind of robotic and artificial and
09:09 - so we can do better we can make this
09:12 - look much more realistic and smooth and
09:15 - that's what the purpose of these videos
09:18 - is talk about steering behaviors and
09:21 - steering refers to ways to make your
09:26 - movement look natural and there are all
09:29 - sorts of steering behaviors that we'll
09:31 - be talking about in later videos but in
09:33 - this one we want to talk about the seek
09:36 - behavior and we're just going to give it
09:40 - a target so this this function will
09:44 - calculate what the seek vector will be
09:51 - towards some target so what do we mean
09:55 - by seek behavior well let's look at
09:58 - another diagram okay so here we have our
10:02 - mob and this blue vector represents its
10:07 - current velocity it's currently
10:08 - traveling in this direction and then
10:12 - here's our target over here the mouse
10:14 - pointer so this red vector represents
10:19 - our desired velocity the the mob wants
10:23 - to go towards the target so it wants its
10:26 - velocity to be this and the length of
10:29 - this will be the max speed right which
10:31 - we set to five right so this is what it
10:34 - wants this is what it currently is if we
10:37 - instantly just set its speed to the
10:40 - desired then it would look really
10:42 - artificial so what we want is we want
10:45 - some steering
10:49 - this is the steering vector so we just
10:51 - take the desired minus the velocity we
10:55 - get the vector pointing from velocity to
10:59 - desired right and so this is the
11:04 - steering force this is the direction or
11:08 - the the force we want to apply to move
11:11 - our velocity to the desired now if we
11:15 - used it at the full length then it would
11:17 - instantly change from velocity to
11:19 - desired so we're gonna scale this and
11:21 - how much we scale this depends on what
11:24 - type of object our mob is is it a
11:29 - cheetah that can turn really fast so the
11:32 - steering force should be large or is it
11:35 - a slow lumbering elephant in which case
11:38 - it should be really short and should
11:39 - take it a while to pull its velocity
11:41 - over to the desired so we can control
11:44 - that by how long we make our steering
11:48 - force vector okay so now we can go over
11:53 - here to our seek and set it up so we
11:56 - want to set what our desired is now we
12:00 - don't really need this to be a a class
12:04 - variable self dot desired but I'm doing
12:07 - that so that I can draw it and you'll
12:10 - see later I'm going to have it draw its
12:12 - vector so the desired is going to be
12:17 - target - pause dot normalize times the
12:30 - max speed right so that gets us our that
12:33 - desired vector the vector pointing from
12:37 - the mob to the target and its length
12:40 - will be max speed that's the direction
12:42 - we want to go and then our steering I'm
12:47 - just gonna call it steer is just desired
12:51 - - velocity right just like we saw in the
12:54 - diagram now we need to just scale it to
12:59 - the right length so I'm going to make a
13:03 - variable here called steer what's called
13:07 - the seek force and that's going to be
13:11 - the maximum number that it could be
13:13 - let's set that to zero point one so if
13:20 - the length of our steer vector is
13:23 - greater than the steer force or sorry
13:27 - the seek force then we take the steer
13:32 - and we scale it to the length of the
13:36 - seek force and that's and then we return
13:44 - steer so now our seek force will give us
13:47 - back our seek method will give us back
13:49 - whatever the steer force should be okay
13:53 - and so now on our update we're gonna get
13:55 - rid of following the mouse we're not
13:58 - gonna follow the mouse anymore we're
14:01 - gonna do our acceleration so what we
14:03 - want to do is we just want to say our
14:06 - acceleration is equal to seek self dot
14:10 - seek and then the target is going to be
14:16 - get pause for the mouse right so we're
14:21 - seeking towards the mouse and then I
14:25 - want to draw the I'm going to add to my
14:30 - draw function down here at my Beck where
14:34 - I draw my vectors I'm just going to add
14:37 - and I'm just gonna copy and paste this
14:41 - to real quick just so that we can see
14:43 - what the desired is as well so we're
14:45 - gonna see the current velocity and the
14:47 - desired velocity okay
14:49 - so let's see what that seek behavior
14:53 - looks like okay so there is my mouth or
14:56 - my sprite see it's following the mouse
14:59 - that's good but turn on the vectors you
15:01 - can see see how the desired is always
15:05 - pointing towards the mouse and it's
15:08 - always the same length that's always the
15:10 - max speed but it takes a little bit of
15:13 - time for
15:14 - that velocity vector to move around and
15:18 - be equal to the desired and so this is
15:22 - with our seek force set to zero point
15:28 - one right so you can see if you wanted
15:33 - to see what a slower thing would be
15:35 - let's make it half of that let's say it
15:38 - was only 0.5 then you'll be able to see
15:42 - that it takes a lot longer for the
15:47 - sprite to change its velocity and get it
15:52 - all the way around to there
15:53 - all right so this is a big a big object
15:57 - with you know a lot of mass or something
15:59 - it doesn't turn on a dime and if our
16:04 - seek force was a lot higher then you're
16:09 - gonna see it can change really fast now
16:20 - one other thing you've got to take into
16:22 - account when you're doing the seek
16:24 - behavior is that when you what what do
16:28 - you do when the sprite reaches the
16:31 - target right see right now what happens
16:34 - is we get this wobbling effect and if we
16:37 - turn on this you'll see why it's because
16:40 - desired is always set to the maximum
16:43 - speed so as soon as we get past the
16:45 - target we want to go full speed in the
16:48 - other direction and then as soon as we
16:49 - have as we want to go full speed in the
16:51 - other direction so there's no way to
16:53 - actually stop when you reach your target
16:56 - now if you're if this is a an enemy
16:59 - that's chasing you and is going to hit
17:01 - you when it runs into you that doesn't
17:03 - really matter but sometimes you want the
17:05 - sprite to reach the target and stop
17:07 - there so what you want to do to adjust
17:12 - this is you want to use something called
17:14 - an approach strategy and so what the
17:18 - approach strategy is is that when you
17:20 - get as you get closer to the target you
17:24 - slow down so let's just copy
17:28 - I'm gonna duplicate this and I'm gonna
17:31 - call this seek with approach okay and
17:36 - this is just going to let us know or
17:41 - this is going to check to see if we've
17:43 - gotten close to the target and if it is
17:44 - if we are then we're gonna slow down now
17:48 - you could do this in a couple of ways
17:51 - the most flexible ways to basically
17:54 - define a radius around the target and if
17:58 - you're outside of that radius you run
17:59 - full speed towards the target but as
18:02 - soon as you cross that line and get
18:05 - close enough to the target you start
18:07 - slowing down and so we'll set an
18:10 - approach radius capitalize this and
18:18 - that's how far away we're gonna look to
18:22 - slow down okay and I'm gonna set that to
18:25 - a hundred and fifty okay
18:28 - and so now what we want to do is we want
18:32 - to figure out how far away we are okay
18:37 - so so before we normalize this this is
18:42 - going to tell us the distance from the
18:45 - target to the position right or the the
18:47 - vector from the target from the position
18:51 - to the target and so the distance is
18:54 - just going to be the length of that okay
19:00 - and then we can normalize the desired
19:05 - and there's a handy version of normalize
19:08 - is called normalize in place and we
19:14 - don't necessarily want it to always be
19:15 - back speed so we're going to rid of that
19:16 - so normalize in place just says take
19:19 - take this vector and normalize it but
19:25 - keep the variable name the same right we
19:26 - don't have to set it equal to anything
19:27 - it just normalizes it as it is okay so
19:32 - now we know what our desired direction
19:35 - is going to be we need to figure out
19:36 - what our speed should be depending on
19:37 - where we are so if our distance is less
19:40 - than the
19:41 - approach radius then our within we need
19:46 - to take our desired and we need to
19:48 - multiply it by some fraction of the max
19:53 - speed so we take our distance and we
19:57 - divide by the approach rate radius then
19:59 - we have and we know how close we are to
20:01 - the center right if we're halfway from
20:06 - the edge of the circle to the to the mob
20:09 - then we're halfway there
20:10 - right and what so we should go at half
20:11 - speed so we're gonna multiply that by
20:13 - max speed okay otherwise we're gonna go
20:19 - max speed okay so we if we're outside
20:26 - the circle
20:27 - we're gonna go max speed if we're inside
20:29 - the circle then the closer we get the
20:31 - slower we go okay so now our steer is
20:35 - the same the stuff stays the same our
20:38 - steer force is still going to be the
20:39 - same we're still trying to pull over
20:41 - towards our new desired vector and so
20:44 - let's just change this to using seek
20:47 - with approach and what I'll also do is
20:52 - just so that we can see the circle I'm
20:57 - going to add to the drawing here that
21:00 - we're gonna draw a circle at the mouse
21:02 - position so that we can see it okay so
21:06 - there's my acting just the same way as
21:08 - it was before actually let me go back
21:11 - over here I'm gonna put this back to the
21:13 - point one because that was a good medium
21:15 - value okay so there's our mob behaving
21:19 - as it was before but when it gets close
21:21 - it slows down and stops at the target
21:24 - and if I turn on the vectors you can see
21:26 - there's my approach radius circle and as
21:31 - soon as I get inside it my desired
21:34 - vector gets smaller so the steering
21:38 - force pulls it towards that smaller
21:41 - value not towards the maximum and
21:47 - depending on what you set your approach
21:49 - radius to you can have the object stop
21:53 - quickly ER or
21:55 - or take a little time and that is
21:58 - another thing you can adjust to make
22:00 - this behavior look all sorts of
22:04 - different ways right you can adjust that
22:06 - depending on how you want your mob to
22:08 - behave so that's the sikh behavior in
22:13 - future videos we'll talk about all sorts
22:15 - of other steering behaviors that you can
22:18 - implement to get a lot of different
22:22 - effects into how your mobs and other
22:26 - computer-controlled
22:28 - agents on the screen behave one example
22:32 - I'll give you before that you can try on
22:34 - your own is the flee behavior is
22:37 - basically the opposite of seek so you
22:41 - would just reverse this write your
22:43 - desired is going to be the opposite
22:46 - directions always pointing away from the
22:47 - target and then you'll always flee
22:51 - experiment with that you might want to
22:53 - do some kind of distance so you only
22:56 - flee when the target gets too close to
23:00 - you but I'll let you experiment with
23:02 - that on your own see if you can get that
23:04 - to work and we'll talk about that in a
23:05 - later video ok thanks for watching and
23:08 - hopefully this was helpful to you I'd
23:11 - appreciate it if you could like the
23:13 - video subscribe if you're not already
23:15 - and I will see you in the next in-depth
23:19 - video
23:27 - you

Cleaned transcript:

welcome back for another indepth topic on game development in this video we're going to talk about steering behaviors which is a simple way to add realistic and complex seeming movement to the computercontrolled sprites in your game for this first video we're going to be looking at the seek behavior which is how you make a sprite chase a target there are lots of other steering behaviors which we'll cover in later videos for reference if you want to learn more about steering behaviors a really great resource is this website for the book called the nature of code by daniel Schiffman especially chapter 6 chapter 6 is all about all sorts of steering behaviors and ways you can get sprites to do intelligent looking things like following lines following the leader avoiding obstacles all that kind of thing and you know for example here's some examples of line following where the sprites will try and stay on a line and and follow that okay to start out I've just made a little program here that's going to spawn a mob sprite and this fob sprite is going to have three vectors associated with it a position vector that represents where the sprite is located on the screen and it's going to pick a random X and a random y when it spawns so it's going to spawn somewhere randomly on the screen and then it's gonna have a velocity vector and that represents how much the sprite will move every frame how many pixels it will move and in what direction and I'm going to make that equal to the max speed which I set to 5 so 5 will be its maximum speed and I'm just making a vector with that pointing to the right but then I'm rotating it I'm applying the rotation to it of a random number between 0 and 360 so it'll point in a random directions be turned differently each time we spawn it and then it's going to have an acceleration vector an acceleration vector represents how much the velocity is changing each frame and that's going to be set to a zero vector so it's not going to change so it's velocity will be steady so when we spawn this sprite will spawn randomly on the screen somewhere moving in a random direction and every frame it's just going to update by we take our velocity and we add the acceleration right because the acceleration is how much the velocity changes if and I have this little this little if here just to make sure that our velocity never gets bigger than our maximum speed so we check the length of the velocity vector and if that's greater than five then we're gonna scale the length of the vector to be five and that way we won't ever go faster than five and then we take the position and we add the velocity to it and now we have our new position and then I have some ifs here just making the sprite wrap around the screen okay so when we run it we get a random sprite on the screen going in a random direction and if I hit the V key I've turned on I've had a little thing to show us show the vectors here so this green line is the sprites velocity vector and you can see it's it's supposed to be five I'm drawing it bigger just so you can see it on the screen because five pixels would be kind of short but you can see that the velocity vector is pointing in the direction it's going and this bright has no acceleration so it's velocity is never changing always stays the same now let's say we wanted to have the mob chase the mouse around the screen so I won't always want the mob to try and move towards the mouse so I can make a little method here called follow Mouse and what I'm going to do is get find out what the position of the mouse is we get the mouse's position all right and that's going to be an XY pair which we can think of as a vector representing the mouse's position and we already have a vector representing the mobs position so how do we find the vector that points from the mob to the mouse well let's look at some vector math for a second okay so let's say I'll have two vectors V 1 and V 2 and these are the values of them well adding two vectors together means you just add their X's and you add their Y's so V 1 plus V 2 is 50 plus 10 which is 60 and 30 plus 20 which is 50 now another way to look at that is if you add two vectors it's like putting the second one on the tip of the first one and you get the vector that points all the way to the end all right so that's that this vector is 60 comma 50 this blue vector and subtraction is pretty much works pretty much the same way if you take v1 minus v2 that's the same as adding v1 plus the negative of v2 just like when you use numbers adding subtracting a number is the same as adding a negative number so the negative v2 is just V 2 pointing in the opposite direction all right it's going to be negative 10 negative 20 and that's what this little vector here is so if we add those together we get this vector which is 50 minus 10 and 30 minus 20 well another way of looking at that is if v2 and v1 both represent positions for where an object is all right this is where this is where the mouse is v1 and v2 is where the mob is then this vector is pointing from v2 to v1 so if you if you take V 1 and subtract v2 you get a vector pointing from v2 to v1 if we did it the other way around if we said v2 minus v1 we would get the same vector point but pointing in the opposite direction we would get the vector from v1 to v2 okay so when you subtract two vectors you get the vector pointing from the second to the first and that's all we're gonna do to get the vector pointing at the mouse and we want that to be our acceleration because we want to accelerate towards the mouse so we're gonna take the mouse position and we're gonna subtract the mob's position and now we have a vector now we have the vector pointing from the mob to the mouse but the mouse might be far away or it might be nearby we don't want to accelerate ridiculously fast when the mouse is on the opposite side of the screen I want to always accelerate at a at a steady speed so that means I want to take this vector that I just got and I want to normalize it and all normalised means when you're talking about vectors is you're making the length one so this takes the vector it keeps pointing in the same direction the length just becomes one instead of whatever the length was before and even this is call also called a unit vector and unit vectors are super useful because they help you figure out directions right they tell you what direction something's going in but they don't worry about the distance or the length or the speed or any of those things right they just worry about the direction and if we have the direction of something we can always scale that vector to whatever size we want so let's multiply that by 0.5 so now our acceleration is going to be 0.5 in whatever direction the mouse is so in our update we will just now use that follow mouse so we follow the mouse and now what you'll see is that the mob is going to accelerate towards the mouse and I turn the vectors back on you'll see that the velocity is changing to go towards the mouse and that's pretty good but I'll turn the vector back off here it's not quite natural all right the the the mob kind of turns on a dime and it looks kind of robotic and artificial and so we can do better we can make this look much more realistic and smooth and that's what the purpose of these videos is talk about steering behaviors and steering refers to ways to make your movement look natural and there are all sorts of steering behaviors that we'll be talking about in later videos but in this one we want to talk about the seek behavior and we're just going to give it a target so this this function will calculate what the seek vector will be towards some target so what do we mean by seek behavior well let's look at another diagram okay so here we have our mob and this blue vector represents its current velocity it's currently traveling in this direction and then here's our target over here the mouse pointer so this red vector represents our desired velocity the the mob wants to go towards the target so it wants its velocity to be this and the length of this will be the max speed right which we set to five right so this is what it wants this is what it currently is if we instantly just set its speed to the desired then it would look really artificial so what we want is we want some steering this is the steering vector so we just take the desired minus the velocity we get the vector pointing from velocity to desired right and so this is the steering force this is the direction or the the force we want to apply to move our velocity to the desired now if we used it at the full length then it would instantly change from velocity to desired so we're gonna scale this and how much we scale this depends on what type of object our mob is is it a cheetah that can turn really fast so the steering force should be large or is it a slow lumbering elephant in which case it should be really short and should take it a while to pull its velocity over to the desired so we can control that by how long we make our steering force vector okay so now we can go over here to our seek and set it up so we want to set what our desired is now we don't really need this to be a a class variable self dot desired but I'm doing that so that I can draw it and you'll see later I'm going to have it draw its vector so the desired is going to be target pause dot normalize times the max speed right so that gets us our that desired vector the vector pointing from the mob to the target and its length will be max speed that's the direction we want to go and then our steering I'm just gonna call it steer is just desired velocity right just like we saw in the diagram now we need to just scale it to the right length so I'm going to make a variable here called steer what's called the seek force and that's going to be the maximum number that it could be let's set that to zero point one so if the length of our steer vector is greater than the steer force or sorry the seek force then we take the steer and we scale it to the length of the seek force and that's and then we return steer so now our seek force will give us back our seek method will give us back whatever the steer force should be okay and so now on our update we're gonna get rid of following the mouse we're not gonna follow the mouse anymore we're gonna do our acceleration so what we want to do is we just want to say our acceleration is equal to seek self dot seek and then the target is going to be get pause for the mouse right so we're seeking towards the mouse and then I want to draw the I'm going to add to my draw function down here at my Beck where I draw my vectors I'm just going to add and I'm just gonna copy and paste this to real quick just so that we can see what the desired is as well so we're gonna see the current velocity and the desired velocity okay so let's see what that seek behavior looks like okay so there is my mouth or my sprite see it's following the mouse that's good but turn on the vectors you can see see how the desired is always pointing towards the mouse and it's always the same length that's always the max speed but it takes a little bit of time for that velocity vector to move around and be equal to the desired and so this is with our seek force set to zero point one right so you can see if you wanted to see what a slower thing would be let's make it half of that let's say it was only 0.5 then you'll be able to see that it takes a lot longer for the sprite to change its velocity and get it all the way around to there all right so this is a big a big object with you know a lot of mass or something it doesn't turn on a dime and if our seek force was a lot higher then you're gonna see it can change really fast now one other thing you've got to take into account when you're doing the seek behavior is that when you what what do you do when the sprite reaches the target right see right now what happens is we get this wobbling effect and if we turn on this you'll see why it's because desired is always set to the maximum speed so as soon as we get past the target we want to go full speed in the other direction and then as soon as we have as we want to go full speed in the other direction so there's no way to actually stop when you reach your target now if you're if this is a an enemy that's chasing you and is going to hit you when it runs into you that doesn't really matter but sometimes you want the sprite to reach the target and stop there so what you want to do to adjust this is you want to use something called an approach strategy and so what the approach strategy is is that when you get as you get closer to the target you slow down so let's just copy I'm gonna duplicate this and I'm gonna call this seek with approach okay and this is just going to let us know or this is going to check to see if we've gotten close to the target and if it is if we are then we're gonna slow down now you could do this in a couple of ways the most flexible ways to basically define a radius around the target and if you're outside of that radius you run full speed towards the target but as soon as you cross that line and get close enough to the target you start slowing down and so we'll set an approach radius capitalize this and that's how far away we're gonna look to slow down okay and I'm gonna set that to a hundred and fifty okay and so now what we want to do is we want to figure out how far away we are okay so so before we normalize this this is going to tell us the distance from the target to the position right or the the vector from the target from the position to the target and so the distance is just going to be the length of that okay and then we can normalize the desired and there's a handy version of normalize is called normalize in place and we don't necessarily want it to always be back speed so we're going to rid of that so normalize in place just says take take this vector and normalize it but keep the variable name the same right we don't have to set it equal to anything it just normalizes it as it is okay so now we know what our desired direction is going to be we need to figure out what our speed should be depending on where we are so if our distance is less than the approach radius then our within we need to take our desired and we need to multiply it by some fraction of the max speed so we take our distance and we divide by the approach rate radius then we have and we know how close we are to the center right if we're halfway from the edge of the circle to the to the mob then we're halfway there right and what so we should go at half speed so we're gonna multiply that by max speed okay otherwise we're gonna go max speed okay so we if we're outside the circle we're gonna go max speed if we're inside the circle then the closer we get the slower we go okay so now our steer is the same the stuff stays the same our steer force is still going to be the same we're still trying to pull over towards our new desired vector and so let's just change this to using seek with approach and what I'll also do is just so that we can see the circle I'm going to add to the drawing here that we're gonna draw a circle at the mouse position so that we can see it okay so there's my acting just the same way as it was before actually let me go back over here I'm gonna put this back to the point one because that was a good medium value okay so there's our mob behaving as it was before but when it gets close it slows down and stops at the target and if I turn on the vectors you can see there's my approach radius circle and as soon as I get inside it my desired vector gets smaller so the steering force pulls it towards that smaller value not towards the maximum and depending on what you set your approach radius to you can have the object stop quickly ER or or take a little time and that is another thing you can adjust to make this behavior look all sorts of different ways right you can adjust that depending on how you want your mob to behave so that's the sikh behavior in future videos we'll talk about all sorts of other steering behaviors that you can implement to get a lot of different effects into how your mobs and other computercontrolled agents on the screen behave one example I'll give you before that you can try on your own is the flee behavior is basically the opposite of seek so you would just reverse this write your desired is going to be the opposite directions always pointing away from the target and then you'll always flee experiment with that you might want to do some kind of distance so you only flee when the target gets too close to you but I'll let you experiment with that on your own see if you can get that to work and we'll talk about that in a later video ok thanks for watching and hopefully this was helpful to you I'd appreciate it if you could like the video subscribe if you're not already and I will see you in the next indepth video you
