With timestamps:

00:00 - welcome back this is a brief Godot 3
00:02 - tutorial on making draggable windows
00:04 - using good O's UI notes so recently I
00:07 - was helping a student try and get
00:09 - something working and is very similar to
00:10 - this and I thought it might be useful to
00:12 - everyone out there so here's a quick
00:14 - video on how to make draggable windows
00:17 - that behave the way you would expect
00:19 - them to if you click on them and drag
00:21 - them around so to start here I've got a
00:24 - texture rect that's a control node
00:26 - that's that I'm using to simulate my
00:28 - window and I've just taken a screenshot
00:31 - of a go to a website to be the window
00:32 - and so when the game runs we want to be
00:36 - able to click and drag and move this
00:38 - window like you would do in the
00:39 - operating system so I'm calling this
00:41 - window it's gonna represent one window
00:44 - in my main scene which might have any
00:46 - number of windows in it and we're using
00:50 - a texture rect because it's a control
00:51 - node and control nodes are really
00:53 - designed for handling user input you
00:57 - could do this with a sprite instead to
00:59 - display the texture but handling the
01:01 - click and drag events is gonna be a
01:03 - little bit more cumbersome with a sprite
01:05 - so the texture rect we're gonna add a
01:09 - script to it and I've started out by
01:11 - just adding a tooltip to it so that when
01:14 - we hover over it when the game is
01:16 - running it'll display the name of the
01:18 - node and that way when we have multiple
01:20 - windows we'll be able to see their names
01:23 - so to detect the dragging we need to
01:26 - keep track of whether we're in the
01:27 - dragging state or not and we're going to
01:30 - do that with a variable so I'm going to
01:33 - call this drag position and it's going
01:37 - to represent the location where I
01:39 - clicked when I started dragging so if
01:42 - it's null I am NOT in the dragging state
01:44 - and we're gonna detect that click using
01:49 - the Windows GUI input signal which is a
01:55 - signal that all control nodes have and
01:57 - so we're going to connect that signal
02:00 - and what we want to do when this event
02:02 - comes in and I'm going to rename this to
02:04 - event so that we are clear on what that
02:07 - is is if it's a mouse button click then
02:12 - we want to say if the event
02:13 - is input event mouse button and I'm just
02:21 - going to leave it at that right now so
02:22 - we'll use whatever bounce button and you
02:24 - clicks you can use right mouse left
02:26 - Mouse so either it's pressed or it's
02:29 - released
02:30 - so if event DUP pressed then we want to
02:35 - start the dragging so this is start
02:38 - dragging and we're going to set the drag
02:42 - position equal to the relative position
02:46 - of the mouse in the window because we
02:50 - want that's what we want to we want the
02:52 - window to stick to the mouse where you
02:54 - clicked it so the relative position is
02:57 - the global Mouse position minus the rect
03:02 - global position which is the location of
03:06 - the top left corner of the control since
03:10 - that lines a little bit long I'm you go
03:11 - into distraction-free mode here so you
03:13 - can see the whole window so now our drag
03:17 - position is the point in the window
03:19 - where we clicked and then we're going to
03:23 - say if we didn't click the button we let
03:26 - go of it then we want to end we want to
03:29 - end the dragging and we're going to do
03:32 - that by setting the drag position back
03:34 - to null and then the other mouse event
03:39 - that we want to handle is when you move
03:42 - the mouse while you're dragging so this
03:44 - this time if we get a mouse motion event
03:48 - and drag position has a value it's not
03:53 - null then we are dragging so we want to
03:56 - update the position of the rectangle so
03:59 - we want to take the global position and
04:02 - set it equal to the reverse basically
04:05 - we're going to take the global mouse
04:08 - position and we're going to subtract the
04:12 - drag position
04:15 - and that's it so if we were to run this
04:18 - scene we would have a window that we can
04:20 - click and drag now there's just one
04:25 - other thing we need to do we go over to
04:27 - our main scene here and we're gonna
04:29 - instance the window in there I'm gonna
04:31 - call this window one and then I'm going
04:35 - to duplicate it and add two more and I'm
04:40 - gonna change the texture on these
04:44 - because I've captured a couple of
04:45 - different windows just so we have a
04:46 - little bit of variety and we have a
04:48 - terminal window and a foul
04:50 - you know Finder window and a and one for
04:54 - the browser so now when we run this each
04:58 - of the windows will drag when we click
05:01 - on it but now our problem is that we
05:06 - want whichever one we click on to rise
05:10 - to the front right we don't want to be
05:12 - dragging behind so I want to be able to
05:13 - change which one is on top so there's a
05:16 - couple different ways to do that if I
05:18 - want window one to be on top it needs to
05:20 - be drawn last so it needs to be at the
05:22 - bottom of the tree so so we want to be
05:27 - able to change this order whenever we
05:29 - click so if we go back over into our
05:33 - script we're gonna add a signal called
05:39 - move to top we're going to omit that
05:42 - signal whenever we click so right here
05:45 - when we clicked on the window and
05:46 - started dragging we're gonna omit the
05:49 - signal move to top along with a
05:54 - reference to the note itself because
05:57 - main needs to know which window to move
06:01 - to top I just want to have one function
06:03 - that's gonna handle this signal and
06:06 - it'll move whichever window tells it to
06:09 - to move it to the top so if we go back
06:11 - over to our main scene now get back out
06:14 - of the zoom window go back over to our
06:18 - main scene and we're gonna add a script
06:20 - and in here we want to do we just want
06:26 - to handle that sick
06:28 - and I want to kiss ani to connect the
06:31 - signals from each of these two main and
06:33 - I could do that in the Dewey but if you
06:34 - have a bunch of if you have a whole
06:36 - bunch of windows added here you don't
06:37 - want to have to click on each one one
06:39 - after another so in the ready we're
06:41 - going to connect them in code so we're
06:48 - going to say get children and for each
06:51 - of those windows we're going to connect
06:53 - so we're going to connect the move to
06:56 - top signal to a function and our self
06:59 - called move window to top okay and so
07:09 - when we take that I forgot my quote mark
07:11 - there so we take this and we're going to
07:13 - define this function takes a node right
07:21 - we're going to be passed a node to it
07:23 - and so I want that to move we just want
07:27 - to move the child that we clicked on to
07:31 - the bottom of the tree so get child
07:36 - count minus one and that's that means
07:41 - which position we want to put it in so
07:44 - get child count is three this is
07:46 - position zero one and two so we want to
07:48 - move if I click on window one I wanted
07:50 - to move to position two so let's see
07:53 - what that looks like so now this one's
07:56 - on top I click on this one it moves to
07:59 - top and if I click on the browser it
08:02 - moves to top you can see that happening
08:05 - if we look at the remote tree while
08:07 - we're moving things around as you can
08:10 - see the window order change there see
08:15 - this is window three that's window one
08:18 - over there I click on edit moves to the
08:20 - bottom so that's it I hope you found
08:24 - this tutorial useful hopefully it'll
08:25 - help you when you get to the point where
08:27 - you need to make draggable windows in
08:28 - your games UI if you found it useful
08:30 - please click Subscribe below and I'll
08:32 - see you in the next video
08:41 - you

Cleaned transcript:

welcome back this is a brief Godot 3 tutorial on making draggable windows using good O's UI notes so recently I was helping a student try and get something working and is very similar to this and I thought it might be useful to everyone out there so here's a quick video on how to make draggable windows that behave the way you would expect them to if you click on them and drag them around so to start here I've got a texture rect that's a control node that's that I'm using to simulate my window and I've just taken a screenshot of a go to a website to be the window and so when the game runs we want to be able to click and drag and move this window like you would do in the operating system so I'm calling this window it's gonna represent one window in my main scene which might have any number of windows in it and we're using a texture rect because it's a control node and control nodes are really designed for handling user input you could do this with a sprite instead to display the texture but handling the click and drag events is gonna be a little bit more cumbersome with a sprite so the texture rect we're gonna add a script to it and I've started out by just adding a tooltip to it so that when we hover over it when the game is running it'll display the name of the node and that way when we have multiple windows we'll be able to see their names so to detect the dragging we need to keep track of whether we're in the dragging state or not and we're going to do that with a variable so I'm going to call this drag position and it's going to represent the location where I clicked when I started dragging so if it's null I am NOT in the dragging state and we're gonna detect that click using the Windows GUI input signal which is a signal that all control nodes have and so we're going to connect that signal and what we want to do when this event comes in and I'm going to rename this to event so that we are clear on what that is is if it's a mouse button click then we want to say if the event is input event mouse button and I'm just going to leave it at that right now so we'll use whatever bounce button and you clicks you can use right mouse left Mouse so either it's pressed or it's released so if event DUP pressed then we want to start the dragging so this is start dragging and we're going to set the drag position equal to the relative position of the mouse in the window because we want that's what we want to we want the window to stick to the mouse where you clicked it so the relative position is the global Mouse position minus the rect global position which is the location of the top left corner of the control since that lines a little bit long I'm you go into distractionfree mode here so you can see the whole window so now our drag position is the point in the window where we clicked and then we're going to say if we didn't click the button we let go of it then we want to end we want to end the dragging and we're going to do that by setting the drag position back to null and then the other mouse event that we want to handle is when you move the mouse while you're dragging so this this time if we get a mouse motion event and drag position has a value it's not null then we are dragging so we want to update the position of the rectangle so we want to take the global position and set it equal to the reverse basically we're going to take the global mouse position and we're going to subtract the drag position and that's it so if we were to run this scene we would have a window that we can click and drag now there's just one other thing we need to do we go over to our main scene here and we're gonna instance the window in there I'm gonna call this window one and then I'm going to duplicate it and add two more and I'm gonna change the texture on these because I've captured a couple of different windows just so we have a little bit of variety and we have a terminal window and a foul you know Finder window and a and one for the browser so now when we run this each of the windows will drag when we click on it but now our problem is that we want whichever one we click on to rise to the front right we don't want to be dragging behind so I want to be able to change which one is on top so there's a couple different ways to do that if I want window one to be on top it needs to be drawn last so it needs to be at the bottom of the tree so so we want to be able to change this order whenever we click so if we go back over into our script we're gonna add a signal called move to top we're going to omit that signal whenever we click so right here when we clicked on the window and started dragging we're gonna omit the signal move to top along with a reference to the note itself because main needs to know which window to move to top I just want to have one function that's gonna handle this signal and it'll move whichever window tells it to to move it to the top so if we go back over to our main scene now get back out of the zoom window go back over to our main scene and we're gonna add a script and in here we want to do we just want to handle that sick and I want to kiss ani to connect the signals from each of these two main and I could do that in the Dewey but if you have a bunch of if you have a whole bunch of windows added here you don't want to have to click on each one one after another so in the ready we're going to connect them in code so we're going to say get children and for each of those windows we're going to connect so we're going to connect the move to top signal to a function and our self called move window to top okay and so when we take that I forgot my quote mark there so we take this and we're going to define this function takes a node right we're going to be passed a node to it and so I want that to move we just want to move the child that we clicked on to the bottom of the tree so get child count minus one and that's that means which position we want to put it in so get child count is three this is position zero one and two so we want to move if I click on window one I wanted to move to position two so let's see what that looks like so now this one's on top I click on this one it moves to top and if I click on the browser it moves to top you can see that happening if we look at the remote tree while we're moving things around as you can see the window order change there see this is window three that's window one over there I click on edit moves to the bottom so that's it I hope you found this tutorial useful hopefully it'll help you when you get to the point where you need to make draggable windows in your games UI if you found it useful please click Subscribe below and I'll see you in the next video you
