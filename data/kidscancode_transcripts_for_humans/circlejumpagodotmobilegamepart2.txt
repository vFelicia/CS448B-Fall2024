With timestamps:

00:00 - I'm gonna part two of the circle jump
00:02 - game development video series in this
00:06 - part we're going to construct the basic
00:10 - gameplay where our player can jump from
00:12 - circle to circle in a continuous line
00:14 - and we'll also add a few beginning
00:18 - visual effects to spice up the
00:21 - appearance a little bit alright let's
00:23 - get started
00:23 - so let's start by adding a couple more
00:25 - nodes to our main scene I'm going to add
00:27 - a position to D this is gonna be my
00:31 - start position and let's see we're gonna
00:37 - start down here somewhere
00:38 - towards the bottom of the screen and I'm
00:41 - gonna add a camera and this camera is
00:45 - going to basically follow right it's
00:48 - gonna walk on to the circle when the
00:50 - players on it and when you jump to
00:52 - another so code will jump to that one
00:53 - alright so it doesn't really matter
00:54 - where we put it right now and then I'm
00:56 - gonna delete these instances because
00:58 - that was just to test the capturing
01:01 - we're gonna instance this stuff in code
01:06 - so let's see oh and then on the camera
01:09 - right like for example if it's down here
01:12 - I don't care about this face below the
01:15 - camera I want to see more above it so
01:17 - I'm gonna set the y offset to about
01:22 - minus 200 that way now when the camera
01:25 - is fixed on something we can see more of
01:29 - the screen above us will always be
01:31 - towards the bottom of the screen when
01:32 - we're on the camera and let's see let's
01:37 - make a current on and that should do
01:41 - that okay so let's add some things here
01:44 - on my jumper I'm gonna add a captured
01:49 - signal that we can emit when we are
01:53 - captured so on area entered here we're
01:57 - going to emit the signal here and we're
02:02 - going to include we're going to pass
02:04 - along the area that we hit and then on
02:10 - the circle
02:13 - I want to change this to also when I
02:16 - initialize the circle I want to pass the
02:19 - position as well so that we will set
02:25 - that when the circle is initiated so
02:28 - that every time we create an instance we
02:30 - can pass it something and we don't even
02:32 - need this ready anymore now we can add a
02:36 - script to our main scene here and first
02:41 - thing we're going to need is we're going
02:42 - to need a reference to our scenes our
02:45 - save scene so we can instance them so
02:49 - we're gonna grab the circle scene and
02:54 - the jumper will preload the jumper we'll
03:08 - have a variable to store our player in
03:10 - and then in the ready we're gonna say
03:14 - randomize and new game now this is
03:18 - temporary because we're gonna eventually
03:19 - have a UI where we click a button to
03:21 - start a new game but we'll define that
03:24 - now and we'll just call it by default so
03:27 - when we start a new game
03:29 - we need to Center the camera we're going
03:33 - to put the camera to these position to
03:36 - the start position and we need to spawn
03:41 - our player so a player we make a jump
03:45 - jumper instance we set the player's
03:49 - position equal to the start position
03:54 - we've got an add child and then we need
04:00 - to connect we're gonna connect that
04:04 - captured signal to a function here that
04:09 - will call on jumper captured I like to
04:13 - keep just follow the same naming scheme
04:16 - that the engine uses and then we're
04:18 - going to spawn a circle which is
04:21 - something that we will have to define
04:25 - but we want to start it at
04:27 - start position so what is spawn circle
04:32 - do well it takes a position or not if we
04:40 - pass it a position it's going to use
04:41 - that position but if we don't then we
04:44 - will be randomly picking positions but
04:47 - we want to make a circle instance and
04:50 - then if we don't have a position right
04:54 - if we weren't past a position for where
04:55 - to spawn then we're gonna pick a random
04:57 - one and I'm just going to use some
05:01 - guesstimate numbers right now based on
05:06 - the previous circle over on so maybe 150
05:10 - pixels to the right or left and the Y is
05:15 - gonna be somewhere between 400 and 500
05:19 - pixels above where the current one is
05:22 - and so we'll set the position to the
05:25 - current circle which is player target
05:32 - position Plus that X&Y that we've just
05:35 - calculated so now we have a we've picked
05:38 - a random position so we'll add the Chad
05:42 - the circle as a child and then we will
05:43 - call init with position on the child and
05:47 - pass it that position so it knows what
05:50 - to do and then we need our function for
05:54 - capturing that signal so on jumper
05:59 - captured we're passing it something
06:06 - right now it's an area but maybe might
06:08 - be something else later we're gonna take
06:10 - the camera to D and we're going to set
06:13 - its position equal to that new object
06:16 - that we just did so the camera will jump
06:18 - and then we need to spawn another circle
06:21 - but now if I call spawn circle here like
06:23 - this right because I want a random
06:25 - circle I'm gonna get an error message
06:28 - from the engine because this on captured
06:31 - is getting signaled right the signals
06:34 - getting emitted when we're in the middle
06:37 - of area entered processing so we're in
06:39 - the middle of physics
06:40 - when that happens and Godot doesn't like
06:43 - you to change the physics state during
06:48 - physics processing like this because
06:52 - adding another area could could change
06:56 - around things could change things that
06:58 - are currently being processed
06:59 - so spawn circle is going to give us an
07:02 - error telling us that we can't do this
07:04 - during this stage but we can solve that
07:07 - vibe just deferring the call and this
07:10 - says do this at the end call this
07:14 - function at the end of physics
07:16 - processing alright let's try this out
07:20 - we run main there we are we're on a
07:23 - circle there's another circle and when I
07:26 - jump to it
07:27 - the camera just teleports right and
07:29 - that's really jarring I'm it's
07:31 - discontinuous I get kind of lost I don't
07:33 - know where I am we can fix that by
07:37 - turning on smoothing and the speed I
07:41 - think a good speed is probably somewhere
07:42 - between five and ten let's let's go
07:47 - ahead and make me in our main scene and
07:51 - now you see the the camera interpolates
07:54 - its position to the new one so we don't
07:56 - lose track of where we are that's pretty
08:00 - good so now we have an infinite series
08:03 - of circles one after another that we can
08:07 - keep going until we go off the screen so
08:12 - something else you may have noticed I
08:13 - bring it up here is the circles pivot
08:15 - point is is always rotating so we don't
08:18 - know where it is so when we hit the
08:20 - circle see we jumped over to there
08:22 - because we place the jumper where the
08:26 - pivot point is and that might be on the
08:28 - opposite side of the circle from where
08:30 - we hit which looks really jarring as
08:32 - well so we want to go into the jumper
08:36 - code in here and on jumper area entered
08:40 - we're gonna say target dot get node
08:45 - pivot right we want to get that pivot
08:47 - node and change its rotation to
08:54 - the vector between them angle and that
08:57 - will snap it to where it is or where we
09:02 - are when we hit see where that looks
09:04 - like now do another quick test and see
09:09 - now I started there I start rotating
09:12 - from the spot I hit that looks a lot
09:14 - less jarring okay and then we also are
09:22 - always rotating clockwise and I'd like
09:27 - it to randomly choose between clockwise
09:29 - and counterclockwise so at least there's
09:30 - some variety there and we can do that by
09:33 - on the init on the circle right we can
09:39 - we can pick our rotation speed our
09:42 - rotation speed right now is set to PI we
09:45 - might change that later but rotation
09:47 - speed whatever it is I want to multiply
09:51 - it by randomly 1 or negative 1 the
09:56 - easiest way to get a 1 or a negative 1
09:59 - is to raise negative 1 to the 0 or 1
10:06 - power write negative 1 to the 1 is
10:08 - negative 1 negative 1 to the 0 is
10:11 - positive 1 so now we can know that it's
10:15 - gonna randomly choose a direction
10:16 - whenever we hit ok the next thing I
10:19 - wanted to add is some some things to the
10:22 - circle to make them a little more
10:23 - interesting we're gonna add some
10:25 - animations so an animation player and
10:31 - this first animation we're gonna call
10:35 - implode this is going to be the
10:39 - animation that plays when we jump off
10:41 - the circle I wanted to shrink into
10:43 - nothing and disappear since we've left
10:46 - it you can't jump back to it all right
10:48 - we don't want that
10:49 - so the implode animation we're gonna
10:52 - take the circle and we're going to use
10:58 - its scale they'll keyframe that let's
11:02 - see how long do I want this to last
11:05 - not very long let's try 0.4 we'll see
11:09 - how that goes
11:12 - let's sit this over to there and then I
11:15 - want this scale to be zero zero and
11:20 - we'll keyframe that so that's the
11:24 - animation right it just shrinks down and
11:27 - maybe we'll animate the visibility as
11:30 - well so I'm going to take the modulate
11:34 - and we'll key that and then we'll fade
11:38 - it down to then we'll take the modulate
11:41 - outside down to zero now look you frame
11:44 - that and then it just sort of fades out
11:47 - a little bit that's good
11:48 - over on the circle I'm gonna make an
11:51 - implode function which we're gonna call
11:54 - when we implode and I'm just gonna say
11:58 - animation player it up play implode then
12:05 - we're going to yield for the animation
12:09 - player animation finished so that we let
12:12 - it finish and then we're gonna cue free
12:14 - and then that way when we jump from our
12:18 - jumper we can tell our target to implode
12:25 - right jumping off you you should go away
12:27 - let's play this now when I jump off the
12:33 - circle shrinks away now for the other
12:38 - animation which is going to play when we
12:41 - get captured on a circle I'm going to
12:44 - duplicate this sprite and I'm just going
12:46 - to call this the sprite effect and I'm
12:51 - going to set it to invisible and then on
12:57 - the animation player we're going to make
12:59 - an animation called capture and let's
13:04 - see the capture animation we're gonna
13:07 - make that about half a second long
13:14 - sometimes like to change this to snap
13:16 - 2.01 so I have a little more resolution
13:19 - for moving the keyframes around this one
13:22 - I think I'm just going to start off with
13:24 - it rudimentary we're probably going to
13:26 - change it around a lot as we go I don't
13:29 - expect to get it perfect the first time
13:30 - around but we are going to set its
13:34 - visibility to on so we want to key frame
13:38 - that we're going to set its scale at the
13:48 - beginning of this to a larger value so
13:52 - let's set that to like three three and
14:02 - at the very end I want it to scale all
14:07 - the way down to zero zero all right so
14:13 - just sort of the idea that's going to
14:16 - shrink in like that
14:17 - but we also want some visibility changes
14:23 - as well so I'm going to go to the
14:26 - modulate and I think we're going to
14:28 - start it out at an alpha of zero so
14:37 - we'll keyframe that and then as it comes
14:41 - in
14:45 - let's go all the way to the end at the
14:47 - end I want it to be maybe let's see what
14:54 - it looks like if we have it on full here
15:01 - yeah I think maybe what we'll do is fade
15:04 - it down towards somewhere more in the
15:10 - half range that's something like that
15:16 - that's a that's the first pass not
15:19 - trying to get it looking perfect yet but
15:21 - I just want some effect that I can play
15:23 - when it's captured so now on the circle
15:27 - script where else is going to add a
15:30 - capture function that's going to call
15:34 - that animation player and play the
15:37 - capture animation and we will call that
15:41 - on our main when it hears the signal so
15:48 - on our main script when the jumper is
15:53 - captured we're gonna call object up
15:58 - capture which only plays the animation
16:01 - right now but again just leaving room
16:04 - for us to add more things later on so
16:09 - now when we hit the circle we get that
16:12 - little zooming in ring and that's okay
16:17 - for right now that's good enough for us
16:18 - to it's good enough starting point for
16:21 - us
16:22 - one last thing I want to add this time
16:24 - around is on the jumper I want to give
16:28 - it a trail that sort of streams up
16:30 - behind it let's add a we're going to add
16:37 - a node and then we're going to add a
16:46 - line to D reason I'm using the node here
16:50 - is for the trail is I don't want the
16:53 - line to D to use local coordinate so I'm
16:55 - gonna use global coordinates so we're
16:58 - going to pump our coordinates into that
16:59 - line to D so it will leave a line behind
17:02 - us I'm going to call these the points of
17:04 - the line so trail points and let's make
17:10 - our let's make our jumper
17:14 - and make it a red color and then I make
17:17 - an orange trail it doesn't really matter
17:19 - at this point but I want something that
17:22 - will look good so on the trail points
17:26 - what we want to do is we want to fill
17:27 - this with a gradient and we want the
17:30 - starting point of the gradient to be
17:33 - whatever color we're going to do with an
17:37 - alpha of zero and then we want the end
17:43 - one to be whatever color we're gonna do
17:47 - with an alpha that's full and then we
17:51 - get a nice trail I like to leave the end
17:57 - and beginning caps round that should do
18:02 - it so in the script what we want to do
18:06 - is I'm going to add a reference to the
18:14 - node 2d so I have to call that all the
18:16 - time and I'm going to add a VAR trail
18:18 - length how long I want to trail to be
18:21 - how many points it will have and then in
18:25 - the physics process what we can do is
18:28 - just check if the size of the list of
18:37 - points is greater than trail length then
18:40 - we're going to remove one we're going to
18:44 - say remove point zero remove the first
18:45 - point that was in there and then we'll
18:47 - always add point where we are right now
18:53 - so now our trail the only problem is our
18:58 - trails coming out from C it's being
19:01 - drawn on top of the jumper so we also
19:03 - need to take this and set it Z index
19:07 - lower so that it'll be coming out from
19:12 - the jumper not above it
19:19 - so that'll do it for this time I think
19:21 - we've made some more progress we're
19:24 - getting closer to having an actual game
19:27 - keep leaving your questions and
19:29 - suggestions in the comments below and
19:31 - I'll see you for the next part where we
19:33 - will start working on the UI and I'm
19:36 - also interested in making color schemes
19:39 - where we can we can control what color
19:41 - everything is and make appealing color
19:43 - schemes that the user can choose from
19:44 - when they're playing the game thanks for
19:47 - watching and I'll see you next time
19:55 - you

Cleaned transcript:

I'm gonna part two of the circle jump game development video series in this part we're going to construct the basic gameplay where our player can jump from circle to circle in a continuous line and we'll also add a few beginning visual effects to spice up the appearance a little bit alright let's get started so let's start by adding a couple more nodes to our main scene I'm going to add a position to D this is gonna be my start position and let's see we're gonna start down here somewhere towards the bottom of the screen and I'm gonna add a camera and this camera is going to basically follow right it's gonna walk on to the circle when the players on it and when you jump to another so code will jump to that one alright so it doesn't really matter where we put it right now and then I'm gonna delete these instances because that was just to test the capturing we're gonna instance this stuff in code so let's see oh and then on the camera right like for example if it's down here I don't care about this face below the camera I want to see more above it so I'm gonna set the y offset to about minus 200 that way now when the camera is fixed on something we can see more of the screen above us will always be towards the bottom of the screen when we're on the camera and let's see let's make a current on and that should do that okay so let's add some things here on my jumper I'm gonna add a captured signal that we can emit when we are captured so on area entered here we're going to emit the signal here and we're going to include we're going to pass along the area that we hit and then on the circle I want to change this to also when I initialize the circle I want to pass the position as well so that we will set that when the circle is initiated so that every time we create an instance we can pass it something and we don't even need this ready anymore now we can add a script to our main scene here and first thing we're going to need is we're going to need a reference to our scenes our save scene so we can instance them so we're gonna grab the circle scene and the jumper will preload the jumper we'll have a variable to store our player in and then in the ready we're gonna say randomize and new game now this is temporary because we're gonna eventually have a UI where we click a button to start a new game but we'll define that now and we'll just call it by default so when we start a new game we need to Center the camera we're going to put the camera to these position to the start position and we need to spawn our player so a player we make a jump jumper instance we set the player's position equal to the start position we've got an add child and then we need to connect we're gonna connect that captured signal to a function here that will call on jumper captured I like to keep just follow the same naming scheme that the engine uses and then we're going to spawn a circle which is something that we will have to define but we want to start it at start position so what is spawn circle do well it takes a position or not if we pass it a position it's going to use that position but if we don't then we will be randomly picking positions but we want to make a circle instance and then if we don't have a position right if we weren't past a position for where to spawn then we're gonna pick a random one and I'm just going to use some guesstimate numbers right now based on the previous circle over on so maybe 150 pixels to the right or left and the Y is gonna be somewhere between 400 and 500 pixels above where the current one is and so we'll set the position to the current circle which is player target position Plus that X&Y that we've just calculated so now we have a we've picked a random position so we'll add the Chad the circle as a child and then we will call init with position on the child and pass it that position so it knows what to do and then we need our function for capturing that signal so on jumper captured we're passing it something right now it's an area but maybe might be something else later we're gonna take the camera to D and we're going to set its position equal to that new object that we just did so the camera will jump and then we need to spawn another circle but now if I call spawn circle here like this right because I want a random circle I'm gonna get an error message from the engine because this on captured is getting signaled right the signals getting emitted when we're in the middle of area entered processing so we're in the middle of physics when that happens and Godot doesn't like you to change the physics state during physics processing like this because adding another area could could change around things could change things that are currently being processed so spawn circle is going to give us an error telling us that we can't do this during this stage but we can solve that vibe just deferring the call and this says do this at the end call this function at the end of physics processing alright let's try this out we run main there we are we're on a circle there's another circle and when I jump to it the camera just teleports right and that's really jarring I'm it's discontinuous I get kind of lost I don't know where I am we can fix that by turning on smoothing and the speed I think a good speed is probably somewhere between five and ten let's let's go ahead and make me in our main scene and now you see the the camera interpolates its position to the new one so we don't lose track of where we are that's pretty good so now we have an infinite series of circles one after another that we can keep going until we go off the screen so something else you may have noticed I bring it up here is the circles pivot point is is always rotating so we don't know where it is so when we hit the circle see we jumped over to there because we place the jumper where the pivot point is and that might be on the opposite side of the circle from where we hit which looks really jarring as well so we want to go into the jumper code in here and on jumper area entered we're gonna say target dot get node pivot right we want to get that pivot node and change its rotation to the vector between them angle and that will snap it to where it is or where we are when we hit see where that looks like now do another quick test and see now I started there I start rotating from the spot I hit that looks a lot less jarring okay and then we also are always rotating clockwise and I'd like it to randomly choose between clockwise and counterclockwise so at least there's some variety there and we can do that by on the init on the circle right we can we can pick our rotation speed our rotation speed right now is set to PI we might change that later but rotation speed whatever it is I want to multiply it by randomly 1 or negative 1 the easiest way to get a 1 or a negative 1 is to raise negative 1 to the 0 or 1 power write negative 1 to the 1 is negative 1 negative 1 to the 0 is positive 1 so now we can know that it's gonna randomly choose a direction whenever we hit ok the next thing I wanted to add is some some things to the circle to make them a little more interesting we're gonna add some animations so an animation player and this first animation we're gonna call implode this is going to be the animation that plays when we jump off the circle I wanted to shrink into nothing and disappear since we've left it you can't jump back to it all right we don't want that so the implode animation we're gonna take the circle and we're going to use its scale they'll keyframe that let's see how long do I want this to last not very long let's try 0.4 we'll see how that goes let's sit this over to there and then I want this scale to be zero zero and we'll keyframe that so that's the animation right it just shrinks down and maybe we'll animate the visibility as well so I'm going to take the modulate and we'll key that and then we'll fade it down to then we'll take the modulate outside down to zero now look you frame that and then it just sort of fades out a little bit that's good over on the circle I'm gonna make an implode function which we're gonna call when we implode and I'm just gonna say animation player it up play implode then we're going to yield for the animation player animation finished so that we let it finish and then we're gonna cue free and then that way when we jump from our jumper we can tell our target to implode right jumping off you you should go away let's play this now when I jump off the circle shrinks away now for the other animation which is going to play when we get captured on a circle I'm going to duplicate this sprite and I'm just going to call this the sprite effect and I'm going to set it to invisible and then on the animation player we're going to make an animation called capture and let's see the capture animation we're gonna make that about half a second long sometimes like to change this to snap 2.01 so I have a little more resolution for moving the keyframes around this one I think I'm just going to start off with it rudimentary we're probably going to change it around a lot as we go I don't expect to get it perfect the first time around but we are going to set its visibility to on so we want to key frame that we're going to set its scale at the beginning of this to a larger value so let's set that to like three three and at the very end I want it to scale all the way down to zero zero all right so just sort of the idea that's going to shrink in like that but we also want some visibility changes as well so I'm going to go to the modulate and I think we're going to start it out at an alpha of zero so we'll keyframe that and then as it comes in let's go all the way to the end at the end I want it to be maybe let's see what it looks like if we have it on full here yeah I think maybe what we'll do is fade it down towards somewhere more in the half range that's something like that that's a that's the first pass not trying to get it looking perfect yet but I just want some effect that I can play when it's captured so now on the circle script where else is going to add a capture function that's going to call that animation player and play the capture animation and we will call that on our main when it hears the signal so on our main script when the jumper is captured we're gonna call object up capture which only plays the animation right now but again just leaving room for us to add more things later on so now when we hit the circle we get that little zooming in ring and that's okay for right now that's good enough for us to it's good enough starting point for us one last thing I want to add this time around is on the jumper I want to give it a trail that sort of streams up behind it let's add a we're going to add a node and then we're going to add a line to D reason I'm using the node here is for the trail is I don't want the line to D to use local coordinate so I'm gonna use global coordinates so we're going to pump our coordinates into that line to D so it will leave a line behind us I'm going to call these the points of the line so trail points and let's make our let's make our jumper and make it a red color and then I make an orange trail it doesn't really matter at this point but I want something that will look good so on the trail points what we want to do is we want to fill this with a gradient and we want the starting point of the gradient to be whatever color we're going to do with an alpha of zero and then we want the end one to be whatever color we're gonna do with an alpha that's full and then we get a nice trail I like to leave the end and beginning caps round that should do it so in the script what we want to do is I'm going to add a reference to the node 2d so I have to call that all the time and I'm going to add a VAR trail length how long I want to trail to be how many points it will have and then in the physics process what we can do is just check if the size of the list of points is greater than trail length then we're going to remove one we're going to say remove point zero remove the first point that was in there and then we'll always add point where we are right now so now our trail the only problem is our trails coming out from C it's being drawn on top of the jumper so we also need to take this and set it Z index lower so that it'll be coming out from the jumper not above it so that'll do it for this time I think we've made some more progress we're getting closer to having an actual game keep leaving your questions and suggestions in the comments below and I'll see you for the next part where we will start working on the UI and I'm also interested in making color schemes where we can we can control what color everything is and make appealing color schemes that the user can choose from when they're playing the game thanks for watching and I'll see you next time you
