With timestamps:

00:00 - welcome back to the Godot top-down tank
00:03 - battle game series this is part 9 and
00:07 - this time around we're gonna be adding
00:09 - obstacles and talking about how we can
00:11 - add all these different sandbags and
00:13 - fences and trees and things like that
00:16 - they're gonna be on the level and be
00:18 - obstacles that the player can't pass
00:20 - through and we're gonna try and do it in
00:22 - a smart way
00:23 - that'll make it flexible and easy for us
00:25 - to design our level just the way we want
00:28 - to alright let's get started so I've
00:31 - added a couple of small things that I'll
00:33 - go over really quick before we get into
00:34 - the main part of the video which is I
00:37 - added this machine gun turret all this
00:40 - is is another enemy tank I extended the
00:42 - tank scene and on this gun turret the
00:46 - only difference it has a turret it has a
00:48 - body as a collision shape detect radius
00:50 - all that stuff just like the enemy tank
00:53 - does but we did set the we just make
00:56 - sure we spent to set the speed to zero
00:58 - so it's not gonna be able to move and
00:59 - it's not parented to a path so it
01:01 - doesn't follow a path so it's just gonna
01:03 - sit still but it's still going to turn
01:06 - its turret and track the player when the
01:07 - player comes inside its area and that
01:11 - looks like this so there we go
01:18 - so I also made a smaller enemy bullet so
01:21 - I have two different enemy bullets now a
01:23 - small and a large one so that I can use
01:26 - whichever one I want I think this one
01:28 - looks a little better with the machine
01:29 - gun turret now the other thing that I
01:34 - changed was when the player does run out
01:36 - of health we're going to just restart
01:39 - the scene for right now since we don't
01:42 - have a game over screen or anything like
01:44 - that yet on the players script I'm sorry
01:49 - on the map script I just said that when
01:52 - the player is dead we reload the current
01:54 - scene one small change I needed to make
01:58 - to the tank script for the sorry the
02:01 - enemy tank script for the machine gun
02:04 - turret is I needed to make sure and only
02:08 - check the look-ahead ray casts if you're
02:12 - on a parent
02:13 - parent of a path follow 2d that way the
02:16 - machine gun turret that sits still
02:18 - doesn't need to have a you know look
02:21 - ahead raycast
02:22 - on it since it's not moving we don't
02:24 - need to add it but so it won't check it
02:27 - so the main thing I wanted to talk about
02:28 - for this video was adding obstacles to
02:32 - the map and the art pack has all these
02:36 - great obstacles there's Road barriers
02:37 - and hedgehogs and sandbags and trees and
02:42 - barrels and all sorts of different
02:44 - things all of them are different sizes
02:46 - and shapes so they're gonna have
02:47 - different collision areas and they're
02:50 - not all the same size as the tiles of
02:52 - our tile map and that's gonna be so
02:55 - that's gonna be a problem with adding
02:57 - them to a tile map so what we really
02:59 - want to do actually the other problem
03:03 - with adding them into a tile map is I
03:05 - want to be able to you know rotate them
03:07 - and have them point at an angle and if I
03:10 - were using these in a tile map I would
03:14 - only be able to you know put them at 90
03:18 - degree rotations like that and like that
03:20 - I wouldn't be able to have a you know
03:22 - barrier like that or have a sandbag
03:24 - angle angled like this which if you want
03:26 - to have a row of sandbags kind of
03:27 - protecting something you want to be able
03:29 - to turn them so I don't want to do these
03:32 - obstacles in a tile map but I do want to
03:37 - not have to have you know 30 different
03:40 - objects that I have to place and I want
03:44 - to be able to design my level without a
03:46 - whole lot of effort and so eventually
03:50 - you know that maybe this will grow into
03:52 - more of a level level design tool but
03:55 - we're gonna start by making one
03:58 - collision object that can take on any of
04:00 - these forms so here is my obstacle scene
04:05 - I've created a static body to D with a
04:08 - sprite in a collision shape I called it
04:10 - obstacle and I saved it in an
04:12 - environment folder for later other
04:15 - environment objects we can place in here
04:17 - so I want this two sprite to use the
04:23 - same asset sheet we've been using so we
04:26 - drop that in there
04:27 - we want region to be on and we want to
04:31 - be able to select all these different
04:33 - obstacles you know whichever ones we
04:35 - want which are spread out all over the
04:37 - tile sheet and you could go in here and
04:40 - you could draw you know around each one
04:42 - and get the one you want pixel snap here
04:46 - get the one you want but that's gonna be
04:48 - tedious for to do and very repetitive to
04:52 - do for all these different obstacles I
04:54 - want the yellow barrier and the red
04:55 - barrier I want the different colored
04:57 - trees I want all the different sandbags
04:59 - there's white ones and tan ones there's
05:03 - there are all these barrels there's the
05:06 - hedgehogs there's a metal one there's a
05:09 - lot of obstacles and I don't want to
05:11 - have to go and draw them all out
05:13 - separately so we're gonna take a
05:14 - shortcut so when you download the art
05:17 - pack from Kinney
05:18 - it includes this XML file which has a
05:22 - list inside of it of all of the
05:25 - individual sprites and their texture
05:29 - locations in the sprite sheet so you can
05:31 - go and find a particular one like the
05:33 - sandbag and find the x and y and the
05:37 - width and height of that sprite so you
05:39 - can pull it out of the sprite sheet and
05:41 - that's all fine and good we could use we
05:44 - could parse this information to find the
05:46 - obstacles we want and in fact what I've
05:49 - done is I put this you know I deleted
05:53 - all the ones I don't want and made a
05:55 - made a copy of this XML file that just
05:57 - has the sprites that I want for the
05:59 - obstacles I don't want all the other
06:01 - ones so these are the obstacle sprites
06:04 - but we have a small problem these
06:07 - coordinates will not work anymore
06:08 - because I rotated the sprite sheet back
06:13 - in the first video I talked about how
06:14 - this is the original form of the sprite
06:17 - sheet with all the sprites facing
06:19 - downwards and since we didn't want to
06:22 - have to rotate every sprite when we
06:24 - added it I saved a rotated version of
06:28 - this where I rotated this 90 degrees
06:30 - counterclockwise so everything's
06:33 - pointing to the right and that's the
06:34 - sprite sheet we've been using everywhere
06:36 - but that means that these coordinates no
06:38 - longer work right this brown tree is
06:41 - gonna be down in this corner right
06:43 - instead so we need to so we can't use
06:48 - those coordinates but we can do a little
06:50 - bit of math and have it calculate what
06:53 - the new coordinates would be after
06:54 - rotating 90 degrees and so I made a
06:57 - little tool to do that fortunately I
06:59 - already had a Python script that parses
07:02 - this XML for some other projects that
07:05 - I've worked on so I just used that you
07:08 - can grab this from the project files
07:10 - below so here's how this works if you've
07:12 - never done this kind of calculation
07:13 - before so we take this sprite sheet the
07:16 - original one and this is what we are
07:18 - using so we rotated it 90 degrees
07:21 - counterclockwise so that means this
07:25 - point a that was up here in the corner
07:27 - becomes this point here when it rotated
07:31 - and since we rotate it around the center
07:33 - that means that this offset here from
07:36 - here to here is the same as from here to
07:40 - here so what we need to do is take a
07:44 - which is zero zero right now and re and
07:47 - offset it as a calculation for how far
07:50 - it is from the center so it's actually
07:52 - minus half the width minus half the
07:54 - height and then over here we're going to
07:57 - add half the width and half the height
07:59 - to get back to the center and we'll have
08:01 - the right coordinates for that and the
08:04 - way that works is pretty simple you
08:07 - actually just swap the X and y becomes Y
08:09 - and negative x so if this was let's just
08:14 - call this a thousand by a thousand if
08:16 - this was - 500 - 500 when you rotate it
08:21 - over here it becomes minus 500 positive
08:25 - 500 right and then we swap the width and
08:28 - the height since things that are of the
08:31 - of the sprite itself right because like
08:33 - this sandbag was wider than it is tall
08:36 - but when it comes over here it's now
08:37 - gonna be taller than it is wide so this
08:40 - calculation right here will give us what
08:42 - this point is but then the only thing we
08:44 - have left to do is rectangles in most
08:49 - programs and definitely in Godot we
08:51 - expect the coordinate to represent the
08:54 - top-left corner
08:55 - not the bottom-left corner so we need to
08:57 - also take this and subtract the height
09:00 - of the sprite from it and that'll give
09:02 - us that point there then we'll have that
09:04 - point we'll have the width of the height
09:05 - that's what we need so now we just need
09:08 - to apply that process to every one of
09:11 - these coordinates in the XML file and
09:15 - I'm doing it this way because I already
09:17 - had actually some Python code that
09:20 - parses this XML as it is so and Python
09:25 - is really my preferred language for
09:27 - these quick little one-off tool scripts
09:29 - and so I used Python to write this so
09:33 - here is the Python file for this so we
09:38 - are going to give it the filename and
09:42 - the size of the sprite sheet and then
09:46 - this enum name I'll explain in a minute
09:48 - we have some code that parses that XML
09:51 - goes through and finds each name and
09:53 - creates a dictionary with that name as
09:56 - the key and the four values of X Y width
10:00 - and height as its as an array of its
10:02 - values and then down here we have a loop
10:06 - that goes through each one of those and
10:08 - applies that transform that we just
10:11 - described and the rest of this is to
10:15 - print out some Gd script code so that we
10:18 - can copy and paste this into our
10:20 - obstacle script so it's going to create
10:22 - an enum and it's going to print out all
10:25 - of the values and let's look at what it
10:27 - looks like when it runs so we have an
10:29 - enum that is a list of all of the names
10:33 - and then we have a dictionary called
10:35 - regions that has each one of those enum
10:39 - values as the key and the new rectangle
10:42 - that we calculated as its value and you
10:45 - can just copy and paste that right into
10:47 - your obstacle script like this so here's
10:50 - my new obstacle script that I added I
10:52 - have that enum and I have the regions
10:57 - for all of the obstacles that we care
11:01 - about now why did we do it this way we
11:05 - did it this way for two reasons one
11:06 - because I want to be able to
11:08 - to choose that the obstacle type from
11:13 - over here in the end the inspector as an
11:15 - exported variable so we're going to say
11:19 - export items that's the name of the enum
11:23 - bar type and that's going to call an
11:29 - update function that's going to change
11:32 - the sprite so what does that update
11:36 - function going to do it's going to take
11:38 - whatever type you chose and change that
11:43 - variable variables value to it it's
11:47 - going to take the sprite and set its
11:51 - region rect equal to the value from this
11:57 - dictionary that we calculated and it's
12:04 - going to create a rectangle collision
12:08 - shape now direct to rectangle shape 2d
12:15 - so that we have a collision shape that
12:18 - fits the object so we set the extents
12:22 - equal to the sprites region rect the
12:27 - thing we just set size / - that's
12:32 - because remember extents are measured
12:34 - from the center but the rectangle size
12:37 - is the full size and then we set the
12:40 - collision shape shape equal to that okay
12:43 - so this means whenever I choose over
12:48 - here in the inspector it's going to try
12:53 - and update this but that doesn't work
12:55 - when we're not running the program so
12:58 - what we want to do is actually make this
13:00 - a tool script so you put tool up here at
13:04 - the top that means that this script will
13:06 - run when you're in the editor so if we
13:11 - go over here to the 2d mode here
13:17 - you're gonna see that I can go over here
13:20 - and choose red barrel and it makes a red
13:24 - barrel with a collision shape I can
13:26 - choose the large tree I can choose the
13:30 - red fence
13:31 - okay and it created that collision shape
13:34 - that fits the size of the object and
13:38 - that means that in our map we can go
13:41 - over here and we can add obstacles I'm
13:44 - gonna add a container node to D just to
13:50 - hold all of these obstacles and this is
13:54 - mainly for hierarchy reasons so here
13:57 - when this starts getting really long I
13:59 - can you know collapse these and I can
14:01 - collapse the obstacles just makes a
14:04 - little easier to keep track of where
14:05 - things are oops and then we're gonna add
14:06 - an obstacle in here and let's put it
14:12 - let's start let's put some obstacles in
14:15 - here so I can put this obstacle and I
14:17 - can go I want this obstacle to be a
14:20 - yellow fence barrier and I'm going to
14:23 - rotate it probably want to put it there
14:27 - or the enemy tanks gonna run into it on
14:30 - a blockage path but I can put that I can
14:33 - duplicate this and make the next one be
14:37 - a large tree which I can put over here
14:43 - right you can so we can start getting
14:46 - really fancy with how we place all of
14:50 - our obstacles and I'm just gonna do
14:51 - those two just get started with now what
14:55 - happens when we run the game well when
14:56 - we run the game we're gonna get an error
15:00 - okay it has a problem saying it can't
15:03 - set a region wrecked because the nodes
15:06 - sprite wasn't found well what does that
15:09 - mean
15:09 - well that's because on our obstacle we
15:13 - have this set get running so when you
15:16 - hit run on your project this set get
15:19 - updates but it updates immediately even
15:23 - though the these nodes haven't been
15:25 - added to the tree yet so they're not
15:28 - ready and because they're not ready they
15:30 - can
15:31 - to be found with get node so there's two
15:36 - ways we can solve this but the one that
15:39 - I like the best is just to let it know
15:41 - that if when you're running in the
15:43 - editor it all works fine right we can it
15:45 - updates when it updates but when you're
15:47 - running in the game you want to wait for
15:49 - this you want this to wait until you're
15:51 - in the tree
15:52 - so there is a engine singleton that has
15:58 - an editor hint property and that editor
16:00 - hint property is true or false whether
16:02 - the script is running in the editor so
16:05 - if we're not running in the editor I
16:06 - want to yield for this script or sorry
16:12 - for this node to get the tree entered
16:15 - signal so that just means that that
16:19 - initial run will not it'll wait to try
16:23 - and set the sprite until obstacle is
16:25 - ready an obstacle will be ready after
16:27 - it's children because that's the order
16:29 - that Godot processes the nodes so
16:31 - that'll solve our problem with getting
16:34 - that error message so now when we run it
16:36 - we get no error and if we drive over
16:38 - here to where the where we place the
16:41 - obstacles there they are there's that
16:44 - yellow fence which I can't walk through
16:45 - and the bullets can't go through and
16:47 - there's the tree so that's it now you
16:55 - can start decorating your level with
16:57 - some obstacles and create some areas
17:01 - that you've got to go around to get into
17:03 - this will give us a lot of options for
17:05 - how we can design our path through the
17:07 - level and the the various goals and
17:12 - enemies in the way as we're trying to
17:15 - get through the whole level but I will
17:19 - do that outside of the video so thanks
17:22 - for watching and I'll see you next time
17:32 - you

Cleaned transcript:

welcome back to the Godot topdown tank battle game series this is part 9 and this time around we're gonna be adding obstacles and talking about how we can add all these different sandbags and fences and trees and things like that they're gonna be on the level and be obstacles that the player can't pass through and we're gonna try and do it in a smart way that'll make it flexible and easy for us to design our level just the way we want to alright let's get started so I've added a couple of small things that I'll go over really quick before we get into the main part of the video which is I added this machine gun turret all this is is another enemy tank I extended the tank scene and on this gun turret the only difference it has a turret it has a body as a collision shape detect radius all that stuff just like the enemy tank does but we did set the we just make sure we spent to set the speed to zero so it's not gonna be able to move and it's not parented to a path so it doesn't follow a path so it's just gonna sit still but it's still going to turn its turret and track the player when the player comes inside its area and that looks like this so there we go so I also made a smaller enemy bullet so I have two different enemy bullets now a small and a large one so that I can use whichever one I want I think this one looks a little better with the machine gun turret now the other thing that I changed was when the player does run out of health we're going to just restart the scene for right now since we don't have a game over screen or anything like that yet on the players script I'm sorry on the map script I just said that when the player is dead we reload the current scene one small change I needed to make to the tank script for the sorry the enemy tank script for the machine gun turret is I needed to make sure and only check the lookahead ray casts if you're on a parent parent of a path follow 2d that way the machine gun turret that sits still doesn't need to have a you know look ahead raycast on it since it's not moving we don't need to add it but so it won't check it so the main thing I wanted to talk about for this video was adding obstacles to the map and the art pack has all these great obstacles there's Road barriers and hedgehogs and sandbags and trees and barrels and all sorts of different things all of them are different sizes and shapes so they're gonna have different collision areas and they're not all the same size as the tiles of our tile map and that's gonna be so that's gonna be a problem with adding them to a tile map so what we really want to do actually the other problem with adding them into a tile map is I want to be able to you know rotate them and have them point at an angle and if I were using these in a tile map I would only be able to you know put them at 90 degree rotations like that and like that I wouldn't be able to have a you know barrier like that or have a sandbag angle angled like this which if you want to have a row of sandbags kind of protecting something you want to be able to turn them so I don't want to do these obstacles in a tile map but I do want to not have to have you know 30 different objects that I have to place and I want to be able to design my level without a whole lot of effort and so eventually you know that maybe this will grow into more of a level level design tool but we're gonna start by making one collision object that can take on any of these forms so here is my obstacle scene I've created a static body to D with a sprite in a collision shape I called it obstacle and I saved it in an environment folder for later other environment objects we can place in here so I want this two sprite to use the same asset sheet we've been using so we drop that in there we want region to be on and we want to be able to select all these different obstacles you know whichever ones we want which are spread out all over the tile sheet and you could go in here and you could draw you know around each one and get the one you want pixel snap here get the one you want but that's gonna be tedious for to do and very repetitive to do for all these different obstacles I want the yellow barrier and the red barrier I want the different colored trees I want all the different sandbags there's white ones and tan ones there's there are all these barrels there's the hedgehogs there's a metal one there's a lot of obstacles and I don't want to have to go and draw them all out separately so we're gonna take a shortcut so when you download the art pack from Kinney it includes this XML file which has a list inside of it of all of the individual sprites and their texture locations in the sprite sheet so you can go and find a particular one like the sandbag and find the x and y and the width and height of that sprite so you can pull it out of the sprite sheet and that's all fine and good we could use we could parse this information to find the obstacles we want and in fact what I've done is I put this you know I deleted all the ones I don't want and made a made a copy of this XML file that just has the sprites that I want for the obstacles I don't want all the other ones so these are the obstacle sprites but we have a small problem these coordinates will not work anymore because I rotated the sprite sheet back in the first video I talked about how this is the original form of the sprite sheet with all the sprites facing downwards and since we didn't want to have to rotate every sprite when we added it I saved a rotated version of this where I rotated this 90 degrees counterclockwise so everything's pointing to the right and that's the sprite sheet we've been using everywhere but that means that these coordinates no longer work right this brown tree is gonna be down in this corner right instead so we need to so we can't use those coordinates but we can do a little bit of math and have it calculate what the new coordinates would be after rotating 90 degrees and so I made a little tool to do that fortunately I already had a Python script that parses this XML for some other projects that I've worked on so I just used that you can grab this from the project files below so here's how this works if you've never done this kind of calculation before so we take this sprite sheet the original one and this is what we are using so we rotated it 90 degrees counterclockwise so that means this point a that was up here in the corner becomes this point here when it rotated and since we rotate it around the center that means that this offset here from here to here is the same as from here to here so what we need to do is take a which is zero zero right now and re and offset it as a calculation for how far it is from the center so it's actually minus half the width minus half the height and then over here we're going to add half the width and half the height to get back to the center and we'll have the right coordinates for that and the way that works is pretty simple you actually just swap the X and y becomes Y and negative x so if this was let's just call this a thousand by a thousand if this was 500 500 when you rotate it over here it becomes minus 500 positive 500 right and then we swap the width and the height since things that are of the of the sprite itself right because like this sandbag was wider than it is tall but when it comes over here it's now gonna be taller than it is wide so this calculation right here will give us what this point is but then the only thing we have left to do is rectangles in most programs and definitely in Godot we expect the coordinate to represent the topleft corner not the bottomleft corner so we need to also take this and subtract the height of the sprite from it and that'll give us that point there then we'll have that point we'll have the width of the height that's what we need so now we just need to apply that process to every one of these coordinates in the XML file and I'm doing it this way because I already had actually some Python code that parses this XML as it is so and Python is really my preferred language for these quick little oneoff tool scripts and so I used Python to write this so here is the Python file for this so we are going to give it the filename and the size of the sprite sheet and then this enum name I'll explain in a minute we have some code that parses that XML goes through and finds each name and creates a dictionary with that name as the key and the four values of X Y width and height as its as an array of its values and then down here we have a loop that goes through each one of those and applies that transform that we just described and the rest of this is to print out some Gd script code so that we can copy and paste this into our obstacle script so it's going to create an enum and it's going to print out all of the values and let's look at what it looks like when it runs so we have an enum that is a list of all of the names and then we have a dictionary called regions that has each one of those enum values as the key and the new rectangle that we calculated as its value and you can just copy and paste that right into your obstacle script like this so here's my new obstacle script that I added I have that enum and I have the regions for all of the obstacles that we care about now why did we do it this way we did it this way for two reasons one because I want to be able to to choose that the obstacle type from over here in the end the inspector as an exported variable so we're going to say export items that's the name of the enum bar type and that's going to call an update function that's going to change the sprite so what does that update function going to do it's going to take whatever type you chose and change that variable variables value to it it's going to take the sprite and set its region rect equal to the value from this dictionary that we calculated and it's going to create a rectangle collision shape now direct to rectangle shape 2d so that we have a collision shape that fits the object so we set the extents equal to the sprites region rect the thing we just set size / that's because remember extents are measured from the center but the rectangle size is the full size and then we set the collision shape shape equal to that okay so this means whenever I choose over here in the inspector it's going to try and update this but that doesn't work when we're not running the program so what we want to do is actually make this a tool script so you put tool up here at the top that means that this script will run when you're in the editor so if we go over here to the 2d mode here you're gonna see that I can go over here and choose red barrel and it makes a red barrel with a collision shape I can choose the large tree I can choose the red fence okay and it created that collision shape that fits the size of the object and that means that in our map we can go over here and we can add obstacles I'm gonna add a container node to D just to hold all of these obstacles and this is mainly for hierarchy reasons so here when this starts getting really long I can you know collapse these and I can collapse the obstacles just makes a little easier to keep track of where things are oops and then we're gonna add an obstacle in here and let's put it let's start let's put some obstacles in here so I can put this obstacle and I can go I want this obstacle to be a yellow fence barrier and I'm going to rotate it probably want to put it there or the enemy tanks gonna run into it on a blockage path but I can put that I can duplicate this and make the next one be a large tree which I can put over here right you can so we can start getting really fancy with how we place all of our obstacles and I'm just gonna do those two just get started with now what happens when we run the game well when we run the game we're gonna get an error okay it has a problem saying it can't set a region wrecked because the nodes sprite wasn't found well what does that mean well that's because on our obstacle we have this set get running so when you hit run on your project this set get updates but it updates immediately even though the these nodes haven't been added to the tree yet so they're not ready and because they're not ready they can to be found with get node so there's two ways we can solve this but the one that I like the best is just to let it know that if when you're running in the editor it all works fine right we can it updates when it updates but when you're running in the game you want to wait for this you want this to wait until you're in the tree so there is a engine singleton that has an editor hint property and that editor hint property is true or false whether the script is running in the editor so if we're not running in the editor I want to yield for this script or sorry for this node to get the tree entered signal so that just means that that initial run will not it'll wait to try and set the sprite until obstacle is ready an obstacle will be ready after it's children because that's the order that Godot processes the nodes so that'll solve our problem with getting that error message so now when we run it we get no error and if we drive over here to where the where we place the obstacles there they are there's that yellow fence which I can't walk through and the bullets can't go through and there's the tree so that's it now you can start decorating your level with some obstacles and create some areas that you've got to go around to get into this will give us a lot of options for how we can design our path through the level and the the various goals and enemies in the way as we're trying to get through the whole level but I will do that outside of the video so thanks for watching and I'll see you next time you
