With timestamps:

00:00 - welcome back to goodd 101 in the
00:02 - previous video we looked at the rigid
00:04 - body 2D and how you make one and how it
00:07 - can be used and in this video we're
00:09 - going to look a little deeper in how you
00:10 - work with it and make it behave the way
00:13 - you want it to all right let's get
00:16 - started for this demo I'm starting out
00:18 - with a simple rigid body 2D with a
00:20 - Sprite and a collision shape and my
00:24 - little uh debug draw node which just
00:28 - will draw some vectors on there for us
00:30 - to troubleshoot with Now by default when
00:33 - we run this scene the ship is going to
00:36 - fall and we can see its velocity Vector
00:38 - in the yellow increasing because by
00:41 - default the scene will have gravity on
00:44 - it and we can change that by going into
00:47 - the project settings to the physics
00:50 - 2D Tab and in here is where you can
00:53 - customize what you want the default
00:56 - gravity default physics and all that to
00:57 - be so since we're going to be working in
01:00 - space I'm going to set the default
01:03 - gravity to zero and then there's also a
01:06 - couple of settings for the default
01:08 - linear and angular
01:10 - damping so by default there is a little
01:13 - bit of linear damp well in space there
01:16 - shouldn't be any of that so there's no
01:18 - friction so we're going to set that to
01:19 - zero and the angular damp is the same
01:21 - thing that's how quickly rotating bodies
01:23 - will stop rotating so we're going to set
01:25 - those to zero too and so now that's
01:28 - going to be our
01:31 - ship scene and if we run it our ship is
01:34 - not moving at all there's no gravity
01:35 - acting on it and so we will be moving
01:37 - this ship using
01:39 - Code so here we are looking at the rigid
01:41 - body 2D documentation and all the
01:45 - different methods that we can use on it
01:47 - which we're going to be able to use in
01:48 - our script but something you'll notice
01:50 - right away is there is no
01:53 - position
01:55 - related functions you can only work with
01:59 - with forces and
02:02 - velocities and even the velocity if you
02:05 - click on it there's a big warning can be
02:08 - used sporadically but don't set this in
02:10 - every frame because you're going to mess
02:11 - with the physics if you keep changing an
02:13 - object's velocity and we'll talk about
02:15 - how we can deal with that but you never
02:18 - are going to be setting the
02:20 - position of your rigid body 2D manually
02:23 - you only apply forces based on what you
02:26 - want it to
02:27 - do so let's look at the ship's script
02:31 - now normally in previous lessons you've
02:34 - seen we've used the uh fixed process
02:37 - function to do any of our physics-based
02:40 - per
02:42 - frame
02:44 - code and you can do that with the
02:47 - physics body too but the physics body or
02:50 - sorry the rigid body 2D has something
02:52 - called the integrate forces function and
02:56 - what this one does you can see in the
02:58 - the description here is allows you to
03:00 - read and safely modify the simulation
03:03 - state so if you're going to make changes
03:06 - to the forces
03:09 - and movement of the rigid body you want
03:13 - to do it in this part of the loop not in
03:16 - the fixed
03:18 - process so that's what we're going to do
03:20 - we're going to use the integrate
03:24 - forces function and in here we're going
03:27 - to check to see if you have the up Arrow
03:30 - key pressed and if you do we're going to
03:32 - apply a force to the body so the first
03:35 - thing we're going to do is we're going
03:36 - to Define our
03:37 - thrust uh and thrust is going to be a
03:40 - vector pointing in the direction that we
03:43 - want our ship to move so we're going to
03:46 - make that I'm going to make this small
03:47 - to start with so we can see it acting so
03:50 - this is going to be a vector pointing
03:52 - downwards and then uh if we're pressing
03:56 - the key
04:00 - is action
04:01 - pressed UI
04:04 - up then we want to set the applied force
04:09 - to the
04:10 - thrust and if we're not then we set the
04:13 - applied
04:14 - force to
04:17 - nothing right so only while we're
04:19 - holding down are we going to apply
04:20 - thrust so if we run this so I'm going to
04:24 - turn on the the debug code here so you
04:27 - can see you're going to see a red vector
04:29 - that's the applied force and you're
04:31 - going to see a yellow Vector that's our
04:32 - velocity and so see if I tap it whenever
04:35 - I tap it we're applying force and our
04:37 - velocity is getting longer and longer as
04:39 - we
04:41 - go let's look at that one more time if I
04:43 - just tap it briefly see our my velocity
04:47 - is low I have no applied forces right
04:49 - now so with no applied forces the body
04:51 - just keeps
04:52 - moving at a constant
04:55 - speed but if I apply some more Force I
04:57 - will speed up
04:59 - so there our engine
05:02 - thrusting but now we want to be able to
05:04 - rotate and rotating means we need to
05:06 - apply torque to the body here's how we
05:10 - do that so we set a value for what our
05:13 - torque quantity is and then we're just
05:17 - getting whether we have the right or
05:19 - left arrow down so it's going to give us
05:22 - a a one a zero or a negative 1 and we
05:26 - just multiply that by the torque and set
05:28 - it on the bot body now what this is
05:31 - going to do is if I hold down the right
05:33 - arrow key you know I'm going to rotate
05:35 - to the
05:37 - right and when I let go of the key I'm
05:39 - going to keep rotating because I've
05:40 - applied that torque to it if I keep
05:43 - holding it down it's going to torque
05:45 - apply more and more and more and I have
05:48 - to apply in the opposite direction to
05:49 - slow it
05:50 - down or go the other
05:53 - way so something we could do is use the
05:57 - damping to slow it back to zero so if we
06:00 - go to the ship
06:02 - here a body can have an override on the
06:07 - damping that the space has in it so
06:09 - remember we set the default damping to
06:11 - zero so this space that we're in has
06:13 - zero angular damp but we can add it to
06:18 - our ship
06:20 - here and let's set that to
06:23 - five okay and now what you'll see is
06:26 - that when we apply the torque
06:29 - and let go it's going to stop again but
06:32 - it's now it's rotating really slow
06:33 - because I I'm holding the arrow key down
06:35 - now and now that damping is canceling
06:39 - out a lot of the torque so that means we
06:42 - need to increase our torque
06:46 - amount and that should give us a
06:49 - good right when I press it I rotate and
06:52 - then I come to a stop pretty quickly
06:54 - when I let go okay so now we're applying
06:57 - torque to the body
06:59 - and when we apply thrust it still goes
07:02 - downwards because that's
07:05 - the way we Define thrust so we just need
07:08 - to rotate our
07:12 - thrust by however much the body is
07:16 - rotated and that way it will point in
07:18 - the right
07:19 - direction so now if we look at our Force
07:23 - our applied force is going to be in
07:25 - whatever direction we are pointing
07:30 - and we can see it changing our
07:33 - velocity the way we want it to and let's
07:37 - go ahead and increase that thrust so
07:38 - that our ship isn't so
07:41 - slow and now we can see we've got a
07:47 - little we've got a good little asteroid
07:50 - style ship control
07:55 - now all right now to show a little bit
07:57 - more about how this works I've taken in
07:59 - the ship and added it to a scene with
08:02 - another rigid body 2D that's this little
08:05 - asteroid that's just going to travel in
08:08 - a spa straight line so you can see when
08:10 - we start it that there's the The Rock
08:14 - and if I thrust there's my ship and if
08:17 - they Collide right they're going to
08:18 - bounce off of each other and you can
08:21 - actually push things around by pushing
08:24 - against them which is a little bit
08:26 - unrealistic for a big rock so what you
08:29 - can do is change the mass of the body
08:32 - and that's going to affect how they
08:33 - Collide so for example if I set the mass
08:36 - of this asteroid to a very large
08:41 - number then the ship is going to no
08:43 - longer be able to really affect its
08:45 - gravity or I'm sorry affect its velocity
08:47 - very much you can see it's I'm pushing
08:49 - against it and its velocity is very
08:52 - slowly changing As I push up against it
09:02 - okay and another thing you can do is
09:05 - I've added
09:08 - a planet here this is an area
09:11 - 2D okay and what area 2DS allow you to
09:14 - do is override inside of their area any
09:18 - of the global physics properties so for
09:22 - example I've taken this circular area
09:27 - 2D and I've set it to
09:30 - its override mode is combined meaning it
09:32 - adds its properties to whatever the
09:34 - global properties are and I've said I
09:38 - want gravity to be a point so it's going
09:40 - to make gravity point to the center of
09:43 - the area and then I've set
09:46 - a value for what I want gravity to be a
09:50 - strength okay and what that means is
09:53 - when the ship enters this area it's
09:56 - going to feel the pull of gravity
09:58 - towards the center of that
10:00 - area so if we thrust over in that
10:03 - direction you will see that gravity will
10:05 - grab a hold of us and pull us
10:08 - towards that
10:11 - object but then I can thrust away and I
10:13 - just thrust away from it right I just
10:15 - got away without any kind of escape
10:17 - velocity or anything because what's
10:19 - happening is we're
10:21 - ignoring the gravity when we apply our
10:24 - Force right our applied force is just
10:28 - the thrust of our engine and it's so
10:31 - it's removing the gravity and so we want
10:33 - the gravity to still apply and to do
10:35 - that we need to use the physics state so
10:38 - when we use integrate forces we get the
10:40 - body's State and if you look at that
10:43 - that's got a lot of information about
10:46 - all the
10:47 - current state of the body and the one we
10:50 - are interested in is What's the total
10:53 - gravity Vector that is currently being
10:55 - applied to the
10:57 - body so if we go over here we just want
10:59 - to add
11:01 - state. getet total gravity to our
11:06 - thrust and we also want to add that
11:12 - to the force when we are not thrusting
11:18 - okay so our gravity will always apply
11:20 - and that is going to let us have a much
11:23 - more realistic chance of getting into a
11:27 - stable orbit around this object because
11:30 - our thrust will be canceling out part of
11:31 - the gravity depending on the strength of
11:35 - your engines and now I'm in a
11:38 - little orbit around this that I could
11:41 - try and circularize if I can point in
11:44 - the right
11:46 - direction there we go okay so now I'm in
11:49 - a little orbit around the
11:51 - planet and if I thrust hard enough I can
11:55 - maybe cancel out part of the gravity but
11:58 - to depending on how you slingshot out
12:01 - you can get outside of that area and so
12:04 - it's up to you to set how big you want
12:06 - your you know your area to be how far
12:08 - out you want the gravity to reach this
12:10 - is not going to
12:12 - be a fullon you know orbital simulation
12:15 - you'd have to do some more calculations
12:16 - for that but it's pretty good and does
12:20 - illustrate how you can use areas to
12:24 - override the physic state of the rest of
12:28 - the space
12:29 - that will do it for this video if you
12:31 - have any questions about rigid body 2DS
12:34 - and how to use them post them in the
12:36 - comments
12:37 - below and I do want to stress here that
12:40 - most of the time if you think you need a
12:43 - rigid body 2D you probably don't games
12:47 - are not about precise realistic physics
12:50 - simulation games are about fun so if
12:53 - you're making a Mario game some kind of
12:56 - platformer if you're making asteroids
12:58 - things like that you don't don't need or
13:00 - want realistic physics you want fun
13:04 - precise controls and a lot of times a
13:07 - rigid body a using a realistic physics
13:10 - engine is the wrong solution for that
13:13 - you're going to wind up fighting against
13:15 - what the physics engine wants to do to
13:18 - get it to do what you want it to do so
13:21 - think about that when you're planning a
13:23 - new project you're thinking about what
13:24 - what you're going to do uh start you
13:26 - probably want to start with using a
13:28 - kinematic body 2D unless you're making
13:31 - Angry Birds or something like that where
13:33 - you really really need actual re looking
13:38 - physics all right I hope that clears
13:41 - that up why you would use one body over
13:43 - another and I will see you in the next
13:45 - video

Cleaned transcript:

welcome back to goodd 101 in the previous video we looked at the rigid body 2D and how you make one and how it can be used and in this video we're going to look a little deeper in how you work with it and make it behave the way you want it to all right let's get started for this demo I'm starting out with a simple rigid body 2D with a Sprite and a collision shape and my little uh debug draw node which just will draw some vectors on there for us to troubleshoot with Now by default when we run this scene the ship is going to fall and we can see its velocity Vector in the yellow increasing because by default the scene will have gravity on it and we can change that by going into the project settings to the physics 2D Tab and in here is where you can customize what you want the default gravity default physics and all that to be so since we're going to be working in space I'm going to set the default gravity to zero and then there's also a couple of settings for the default linear and angular damping so by default there is a little bit of linear damp well in space there shouldn't be any of that so there's no friction so we're going to set that to zero and the angular damp is the same thing that's how quickly rotating bodies will stop rotating so we're going to set those to zero too and so now that's going to be our ship scene and if we run it our ship is not moving at all there's no gravity acting on it and so we will be moving this ship using Code so here we are looking at the rigid body 2D documentation and all the different methods that we can use on it which we're going to be able to use in our script but something you'll notice right away is there is no position related functions you can only work with with forces and velocities and even the velocity if you click on it there's a big warning can be used sporadically but don't set this in every frame because you're going to mess with the physics if you keep changing an object's velocity and we'll talk about how we can deal with that but you never are going to be setting the position of your rigid body 2D manually you only apply forces based on what you want it to do so let's look at the ship's script now normally in previous lessons you've seen we've used the uh fixed process function to do any of our physicsbased per frame code and you can do that with the physics body too but the physics body or sorry the rigid body 2D has something called the integrate forces function and what this one does you can see in the the description here is allows you to read and safely modify the simulation state so if you're going to make changes to the forces and movement of the rigid body you want to do it in this part of the loop not in the fixed process so that's what we're going to do we're going to use the integrate forces function and in here we're going to check to see if you have the up Arrow key pressed and if you do we're going to apply a force to the body so the first thing we're going to do is we're going to Define our thrust uh and thrust is going to be a vector pointing in the direction that we want our ship to move so we're going to make that I'm going to make this small to start with so we can see it acting so this is going to be a vector pointing downwards and then uh if we're pressing the key is action pressed UI up then we want to set the applied force to the thrust and if we're not then we set the applied force to nothing right so only while we're holding down are we going to apply thrust so if we run this so I'm going to turn on the the debug code here so you can see you're going to see a red vector that's the applied force and you're going to see a yellow Vector that's our velocity and so see if I tap it whenever I tap it we're applying force and our velocity is getting longer and longer as we go let's look at that one more time if I just tap it briefly see our my velocity is low I have no applied forces right now so with no applied forces the body just keeps moving at a constant speed but if I apply some more Force I will speed up so there our engine thrusting but now we want to be able to rotate and rotating means we need to apply torque to the body here's how we do that so we set a value for what our torque quantity is and then we're just getting whether we have the right or left arrow down so it's going to give us a a one a zero or a negative 1 and we just multiply that by the torque and set it on the bot body now what this is going to do is if I hold down the right arrow key you know I'm going to rotate to the right and when I let go of the key I'm going to keep rotating because I've applied that torque to it if I keep holding it down it's going to torque apply more and more and more and I have to apply in the opposite direction to slow it down or go the other way so something we could do is use the damping to slow it back to zero so if we go to the ship here a body can have an override on the damping that the space has in it so remember we set the default damping to zero so this space that we're in has zero angular damp but we can add it to our ship here and let's set that to five okay and now what you'll see is that when we apply the torque and let go it's going to stop again but it's now it's rotating really slow because I I'm holding the arrow key down now and now that damping is canceling out a lot of the torque so that means we need to increase our torque amount and that should give us a good right when I press it I rotate and then I come to a stop pretty quickly when I let go okay so now we're applying torque to the body and when we apply thrust it still goes downwards because that's the way we Define thrust so we just need to rotate our thrust by however much the body is rotated and that way it will point in the right direction so now if we look at our Force our applied force is going to be in whatever direction we are pointing and we can see it changing our velocity the way we want it to and let's go ahead and increase that thrust so that our ship isn't so slow and now we can see we've got a little we've got a good little asteroid style ship control now all right now to show a little bit more about how this works I've taken in the ship and added it to a scene with another rigid body 2D that's this little asteroid that's just going to travel in a spa straight line so you can see when we start it that there's the The Rock and if I thrust there's my ship and if they Collide right they're going to bounce off of each other and you can actually push things around by pushing against them which is a little bit unrealistic for a big rock so what you can do is change the mass of the body and that's going to affect how they Collide so for example if I set the mass of this asteroid to a very large number then the ship is going to no longer be able to really affect its gravity or I'm sorry affect its velocity very much you can see it's I'm pushing against it and its velocity is very slowly changing As I push up against it okay and another thing you can do is I've added a planet here this is an area 2D okay and what area 2DS allow you to do is override inside of their area any of the global physics properties so for example I've taken this circular area 2D and I've set it to its override mode is combined meaning it adds its properties to whatever the global properties are and I've said I want gravity to be a point so it's going to make gravity point to the center of the area and then I've set a value for what I want gravity to be a strength okay and what that means is when the ship enters this area it's going to feel the pull of gravity towards the center of that area so if we thrust over in that direction you will see that gravity will grab a hold of us and pull us towards that object but then I can thrust away and I just thrust away from it right I just got away without any kind of escape velocity or anything because what's happening is we're ignoring the gravity when we apply our Force right our applied force is just the thrust of our engine and it's so it's removing the gravity and so we want the gravity to still apply and to do that we need to use the physics state so when we use integrate forces we get the body's State and if you look at that that's got a lot of information about all the current state of the body and the one we are interested in is What's the total gravity Vector that is currently being applied to the body so if we go over here we just want to add state. getet total gravity to our thrust and we also want to add that to the force when we are not thrusting okay so our gravity will always apply and that is going to let us have a much more realistic chance of getting into a stable orbit around this object because our thrust will be canceling out part of the gravity depending on the strength of your engines and now I'm in a little orbit around this that I could try and circularize if I can point in the right direction there we go okay so now I'm in a little orbit around the planet and if I thrust hard enough I can maybe cancel out part of the gravity but to depending on how you slingshot out you can get outside of that area and so it's up to you to set how big you want your you know your area to be how far out you want the gravity to reach this is not going to be a fullon you know orbital simulation you'd have to do some more calculations for that but it's pretty good and does illustrate how you can use areas to override the physic state of the rest of the space that will do it for this video if you have any questions about rigid body 2DS and how to use them post them in the comments below and I do want to stress here that most of the time if you think you need a rigid body 2D you probably don't games are not about precise realistic physics simulation games are about fun so if you're making a Mario game some kind of platformer if you're making asteroids things like that you don't don't need or want realistic physics you want fun precise controls and a lot of times a rigid body a using a realistic physics engine is the wrong solution for that you're going to wind up fighting against what the physics engine wants to do to get it to do what you want it to do so think about that when you're planning a new project you're thinking about what what you're going to do uh start you probably want to start with using a kinematic body 2D unless you're making Angry Birds or something like that where you really really need actual re looking physics all right I hope that clears that up why you would use one body over another and I will see you in the next video
