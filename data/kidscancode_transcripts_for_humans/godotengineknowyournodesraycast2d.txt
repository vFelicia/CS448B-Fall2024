With timestamps:

00:00 - welcome back to know your node this
00:01 - series of Godot game engine videos where
00:04 - we take a single node type from the
00:05 - engine and show how it's used in this
00:08 - video we will be talking about the
00:10 - raycast 2d node so what is array cast if
00:16 - you've done much reading about game
00:17 - development you've probably come across
00:19 - the term because Ray's and ray casting
00:21 - are very useful for solving a lot of
00:23 - different problems in games at its most
00:26 - basic array just like you learned in
00:27 - geometry is a line segment projecting
00:30 - out from a start point projecting this
00:32 - array is called casting and its purpose
00:35 - is to tell you if and where it hits
00:37 - something as you can see the ray cast
00:40 - 2d node in Godot has a bunch of
00:42 - different methods having to do with
00:43 - collisions and we're going to look at
00:45 - how to use them as I said there's lots
00:47 - of uses but for this video I'm going to
00:50 - demonstrate two of them ground detection
00:52 - and high-speed projectiles for this demo
00:55 - I've made a simple top-down shooter
00:57 - style scene with a player that can walk
01:00 - around and walls that are static body
01:04 - 2ds so that we have collisions and what
01:09 - we want to do is implement shooting now
01:12 - one way that you can do this is that you
01:14 - can have sprites that are instance at
01:20 - the tip of the barrel of the gun and
01:21 - travel in a straight line until they hit
01:24 - something but where this breaks down is
01:26 - if you want to have your projectiles be
01:28 - very fast-moving if you create a node
01:32 - and animate it moving extremely fast
01:35 - then you're going to have your physics
01:38 - breakdown if you have an object that is
01:41 - relatively narrow and the speed of your
01:45 - projectile is really fast then it's
01:47 - possible that between frames it will
01:50 - move from one side to the next
01:52 - and you won't detect that collision and
01:54 - you have to start doing a lot more
01:57 - expensive calculations to make sure that
02:01 - you don't you don't have that tunneling
02:04 - effect which is what it's called so
02:07 - instead what we want to do is say you're
02:09 - firing a bullet from a gun that bullet
02:11 - travels really really fast
02:13 - and all we care about is what does that
02:14 - bullet hit so if I shoot the gun right
02:17 - now it should hit the wall over here and
02:20 - that's where I should see the hit and I
02:24 - don't really care about animating it
02:26 - travelling along that distance because
02:28 - it moves too fast for you to see right
02:30 - it's just going to hit what it hits and
02:31 - that's what we're going to use a ray
02:33 - cast for we're going to cast array from
02:35 - the gun in a straight line and detect
02:39 - where it hits so here's our players
02:41 - scene we have a kinematic body to D with
02:44 - a sprite and a collision shape attached
02:46 - to it and a script that's handling all
02:49 - of the character controls rotation and
02:53 - movement and wall collision and so we
02:56 - want to now do the shooting and so we
02:59 - want to add raycast 2d to this so we're
03:02 - going to go to play we're going to add a
03:04 - ray cast to D and there we go and see
03:08 - it's drawn in the editor as a blue arrow
03:11 - and now we just want to change a couple
03:14 - of the parameters first of all any time
03:17 - you add a new ray cast to D it is
03:19 - disabled by default so if you want to
03:22 - use it you need to make sure to turn it
03:25 - on and of course you can do that in code
03:27 - as well and first of all we want this to
03:31 - come out of the barrel of the gun not
03:33 - out of the player's forehead so we're
03:36 - going to adjust the position and the
03:40 - barrel of the gun is about 30 in X and
03:43 - 10 and Y all right so we're going to put
03:46 - that at the tip of the gun barrel and
03:49 - forecast to which is this parameter
03:53 - right here this is set to zero comma 50
03:56 - which is why it's pointing down so we
03:59 - want this ray to come out of the gun
04:00 - which is pointing in the X direction and
04:03 - we're going to put a large number here
04:05 - we're going to put a thousand and we're
04:07 - set the Y to 0 and so this ray is going
04:11 - to come out of the gun and go a long
04:13 - distance because what we want to know is
04:16 - does this hit anything as far as the
04:18 - bullet travels and we can see this in
04:20 - action if we turn on the visible
04:23 - collision shapes and run our main scene
04:27 - you will see that ray coming out of the
04:29 - player right and showing what direction
04:33 - our imaginary bullet is going to travel
04:36 - when we shoot it and so now we just want
04:39 - to query that ray cast and see where it
04:45 - hits all right and we're going to get
04:47 - this point right here okay so let's go
04:52 - to the script and let's rename this to
04:54 - the shoot ray and I'm going to copy this
04:59 - as well because what I want to do is in
05:02 - the player script I'm going to load a
05:06 - variable for it
05:08 - shoot ray is equal to get node shoot ray
05:13 - so now we have that to refer to and
05:17 - we're going to set process input to true
05:22 - so that we can have whenever we press
05:25 - the spacebar we're going to shoot a
05:29 - bullet so on our input method we're
05:34 - going to just say if event dot is action
05:40 - pressed UI select which is the spacebar
05:44 - by default then we're going to shoot
05:47 - whatever shoot means well let's define
05:50 - that
05:50 - so the shoot function could do a lot of
05:55 - different things but what we really care
05:57 - about is we're going to test if the
06:00 - shoot ray is colliding and if the shoot
06:06 - ray is colliding what should we do well
06:10 - we need some sort of visual feedback
06:13 - that we've hit something and so on the
06:17 - map on the 2d map again on the wall
06:20 - somewhere we want to see a puff of we're
06:23 - going to see a puff of smoke so we can
06:25 - see that the bullet hit there so what
06:29 - we're going to do is we're going to emit
06:31 - a signal I'm going to define that signal
06:34 - up here I'm just going to call it I'm
06:38 - just going to call it hit
06:39 - and then we're going to emit signal hit
06:44 - and and then we're going to pass along
06:47 - the location of the hit which is shoot
06:53 - ray get collision point and that's going
06:59 - to be the location of where it hit you
07:02 - can also get collision normal you can
07:05 - get Collider or Collider shape if you
07:09 - want to know what thing you hit or what
07:12 - part of a thing you hit but we care
07:15 - about the point where we hit because
07:17 - that's where we want to spawn the little
07:18 - puff of smoke so that's our play so
07:22 - whenever we hit space we're going to
07:24 - emit that signal if the Ray collides
07:27 - with something now to do that I've just
07:30 - made a quick little particle 2d scene
07:34 - that just does a little puff of smoke
07:37 - like this and that's what we want to
07:39 - instant at the hit location so in our
07:43 - main scene in the script we have our
07:45 - player instance and we're just going to
07:48 - connect that signal so player dot
07:51 - connect the signal is hit and the method
07:57 - we want to call is show hit we pass in
08:02 - the hit location and we just instance
08:04 - one of those puffs of smoke at that
08:07 - location and that's going to look like
08:10 - this let's turn off the collision shapes
08:18 - for a moment so you can see now whenever
08:23 - I press the spacebar I get a hit at
08:27 - whatever place on the wall that
08:31 - projectile hit so
08:36 - fit and so just to add a little bit more
08:39 - visual appeal I'm not going to go into
08:42 - this in too much detail but I just added
08:43 - a quick little trail so that when we
08:47 - emit the signal we emit the barrel
08:50 - location which is the players location
08:52 - plus the offset which was 30 comma 10 as
08:56 - well as the collision point and in the
09:00 - main script when we get those two
09:03 - locations
09:03 - I am instancing this little this little
09:06 - trail which is just an animated sprite
09:09 - that it stayed and so that just makes us
09:13 - look a little bit nicer like we have a
09:20 - little path where you can see where the
09:22 - bullet went and just this is a quick and
09:24 - dirty one obviously you could make it
09:26 - look a lot better but for the purposes
09:28 - of this demo I just wanted you to be
09:30 - able to see the path of the bullet as
09:32 - well as where it hits I hope that was
09:36 - helpful
09:37 - now let's look at one other application
09:39 - of the raycast
09:40 - 2d and this one is even simpler so we've
09:44 - got a simple platformer here where we
09:45 - have a character and a platform and
09:49 - [Music]
09:51 - using the standard kinematic body 2d we
09:55 - get the collision so the player Falls
09:57 - stands on the platform and run back and
09:59 - forth but we want to do jumping and
10:03 - right now what I have is if the up arrow
10:07 - is pressed we set the velocity to a
10:10 - negative value which makes them go up
10:13 - but the problem with that is I can keep
10:16 - pressing the up arrow whenever I want
10:19 - and I get a negative velocity every
10:23 - single time and I don't want that I only
10:26 - want the player to be allowed to jump
10:27 - when they're standing on the ground and
10:30 - that is another perfect use for a
10:33 - raycast 2d in fact we can do a very very
10:36 - simple one so first we open our players
10:40 - scene and we're going to add the raycast
10:44 - 2d now
10:48 - we want this we want this raycast to
10:51 - needed to detect the ground which means
10:53 - we want it to be sticking down below
10:55 - because right now what are we going to
10:58 - get we're going to get a collision
11:01 - constantly because this raycast 2d is
11:04 - colliding with the player and so we want
11:09 - to do a couple things let's name this
11:10 - ground ray let's enable it remember
11:14 - always remember to do that we want to
11:17 - cast our sorry first we want to move it
11:20 - let's move it downwards all right I
11:23 - wanted to come out from the bottom of
11:25 - the player and let's also make it a
11:29 - little bit shorter because it doesn't
11:31 - need doesn't really matter but it
11:34 - doesn't need to stick down that far
11:36 - below we just need it to come below the
11:40 - player's feet to where we want to detect
11:43 - the ground so let's just go into the
11:45 - script and we'll add a reference here to
11:52 - it to the ground ray so that we can
11:55 - refer to it in our code and here in the
12:03 - jumping now we're going to say if you
12:04 - press the up arrow key and ground ray is
12:12 - colliding so if you're pressing up arrow
12:16 - key and the ground ray is colliding will
12:19 - let you set your velocity and that's all
12:22 - we have to do so if we run the scene
12:24 - you'll see that I press the up arrow I
12:28 - jump if I tap it a bunch of times
12:29 - nothing happens when I'm already in the
12:32 - air and that's as easy as it gets if you
12:38 - have more complicated shapes you
12:40 - sometimes will have problems with your
12:42 - collision detection happening you know
12:45 - the ray actually collides with the
12:47 - player and you can solve that in a
12:50 - couple of ways the raycast 2d has an ad
12:54 - exception
12:56 - method which lets you name an object for
12:59 - it to ignore and so if you put the if
13:02 - you put the player object in there then
13:04 - the array would never detect a collision
13:06 - with that object you can also as with
13:10 - any other collision object in Godot use
13:13 - the layer use the collision layers and
13:15 - the collision masks to set the array on
13:19 - a different layer and have it ignore the
13:21 - player that way and this is also a good
13:25 - method for doing wall jumps you give the
13:28 - player some rays that are sticking out
13:31 - to the left and right and those can tell
13:33 - you whether you're against a wall or not
13:34 - to allow the player to wall jump that's
13:37 - another really common use of raycast so
13:40 - that'll do it for this video I hope that
13:42 - you found the examples useful so the
13:45 - source code for this project will be
13:46 - linked in the description below feel
13:49 - free to download it and take a look and
13:51 - play with it yourself and use rake apps
13:55 - whenever you can now see you in the next
13:57 - video
14:06 - you

Cleaned transcript:

welcome back to know your node this series of Godot game engine videos where we take a single node type from the engine and show how it's used in this video we will be talking about the raycast 2d node so what is array cast if you've done much reading about game development you've probably come across the term because Ray's and ray casting are very useful for solving a lot of different problems in games at its most basic array just like you learned in geometry is a line segment projecting out from a start point projecting this array is called casting and its purpose is to tell you if and where it hits something as you can see the ray cast 2d node in Godot has a bunch of different methods having to do with collisions and we're going to look at how to use them as I said there's lots of uses but for this video I'm going to demonstrate two of them ground detection and highspeed projectiles for this demo I've made a simple topdown shooter style scene with a player that can walk around and walls that are static body 2ds so that we have collisions and what we want to do is implement shooting now one way that you can do this is that you can have sprites that are instance at the tip of the barrel of the gun and travel in a straight line until they hit something but where this breaks down is if you want to have your projectiles be very fastmoving if you create a node and animate it moving extremely fast then you're going to have your physics breakdown if you have an object that is relatively narrow and the speed of your projectile is really fast then it's possible that between frames it will move from one side to the next and you won't detect that collision and you have to start doing a lot more expensive calculations to make sure that you don't you don't have that tunneling effect which is what it's called so instead what we want to do is say you're firing a bullet from a gun that bullet travels really really fast and all we care about is what does that bullet hit so if I shoot the gun right now it should hit the wall over here and that's where I should see the hit and I don't really care about animating it travelling along that distance because it moves too fast for you to see right it's just going to hit what it hits and that's what we're going to use a ray cast for we're going to cast array from the gun in a straight line and detect where it hits so here's our players scene we have a kinematic body to D with a sprite and a collision shape attached to it and a script that's handling all of the character controls rotation and movement and wall collision and so we want to now do the shooting and so we want to add raycast 2d to this so we're going to go to play we're going to add a ray cast to D and there we go and see it's drawn in the editor as a blue arrow and now we just want to change a couple of the parameters first of all any time you add a new ray cast to D it is disabled by default so if you want to use it you need to make sure to turn it on and of course you can do that in code as well and first of all we want this to come out of the barrel of the gun not out of the player's forehead so we're going to adjust the position and the barrel of the gun is about 30 in X and 10 and Y all right so we're going to put that at the tip of the gun barrel and forecast to which is this parameter right here this is set to zero comma 50 which is why it's pointing down so we want this ray to come out of the gun which is pointing in the X direction and we're going to put a large number here we're going to put a thousand and we're set the Y to 0 and so this ray is going to come out of the gun and go a long distance because what we want to know is does this hit anything as far as the bullet travels and we can see this in action if we turn on the visible collision shapes and run our main scene you will see that ray coming out of the player right and showing what direction our imaginary bullet is going to travel when we shoot it and so now we just want to query that ray cast and see where it hits all right and we're going to get this point right here okay so let's go to the script and let's rename this to the shoot ray and I'm going to copy this as well because what I want to do is in the player script I'm going to load a variable for it shoot ray is equal to get node shoot ray so now we have that to refer to and we're going to set process input to true so that we can have whenever we press the spacebar we're going to shoot a bullet so on our input method we're going to just say if event dot is action pressed UI select which is the spacebar by default then we're going to shoot whatever shoot means well let's define that so the shoot function could do a lot of different things but what we really care about is we're going to test if the shoot ray is colliding and if the shoot ray is colliding what should we do well we need some sort of visual feedback that we've hit something and so on the map on the 2d map again on the wall somewhere we want to see a puff of we're going to see a puff of smoke so we can see that the bullet hit there so what we're going to do is we're going to emit a signal I'm going to define that signal up here I'm just going to call it I'm just going to call it hit and then we're going to emit signal hit and and then we're going to pass along the location of the hit which is shoot ray get collision point and that's going to be the location of where it hit you can also get collision normal you can get Collider or Collider shape if you want to know what thing you hit or what part of a thing you hit but we care about the point where we hit because that's where we want to spawn the little puff of smoke so that's our play so whenever we hit space we're going to emit that signal if the Ray collides with something now to do that I've just made a quick little particle 2d scene that just does a little puff of smoke like this and that's what we want to instant at the hit location so in our main scene in the script we have our player instance and we're just going to connect that signal so player dot connect the signal is hit and the method we want to call is show hit we pass in the hit location and we just instance one of those puffs of smoke at that location and that's going to look like this let's turn off the collision shapes for a moment so you can see now whenever I press the spacebar I get a hit at whatever place on the wall that projectile hit so fit and so just to add a little bit more visual appeal I'm not going to go into this in too much detail but I just added a quick little trail so that when we emit the signal we emit the barrel location which is the players location plus the offset which was 30 comma 10 as well as the collision point and in the main script when we get those two locations I am instancing this little this little trail which is just an animated sprite that it stayed and so that just makes us look a little bit nicer like we have a little path where you can see where the bullet went and just this is a quick and dirty one obviously you could make it look a lot better but for the purposes of this demo I just wanted you to be able to see the path of the bullet as well as where it hits I hope that was helpful now let's look at one other application of the raycast 2d and this one is even simpler so we've got a simple platformer here where we have a character and a platform and using the standard kinematic body 2d we get the collision so the player Falls stands on the platform and run back and forth but we want to do jumping and right now what I have is if the up arrow is pressed we set the velocity to a negative value which makes them go up but the problem with that is I can keep pressing the up arrow whenever I want and I get a negative velocity every single time and I don't want that I only want the player to be allowed to jump when they're standing on the ground and that is another perfect use for a raycast 2d in fact we can do a very very simple one so first we open our players scene and we're going to add the raycast 2d now we want this we want this raycast to needed to detect the ground which means we want it to be sticking down below because right now what are we going to get we're going to get a collision constantly because this raycast 2d is colliding with the player and so we want to do a couple things let's name this ground ray let's enable it remember always remember to do that we want to cast our sorry first we want to move it let's move it downwards all right I wanted to come out from the bottom of the player and let's also make it a little bit shorter because it doesn't need doesn't really matter but it doesn't need to stick down that far below we just need it to come below the player's feet to where we want to detect the ground so let's just go into the script and we'll add a reference here to it to the ground ray so that we can refer to it in our code and here in the jumping now we're going to say if you press the up arrow key and ground ray is colliding so if you're pressing up arrow key and the ground ray is colliding will let you set your velocity and that's all we have to do so if we run the scene you'll see that I press the up arrow I jump if I tap it a bunch of times nothing happens when I'm already in the air and that's as easy as it gets if you have more complicated shapes you sometimes will have problems with your collision detection happening you know the ray actually collides with the player and you can solve that in a couple of ways the raycast 2d has an ad exception method which lets you name an object for it to ignore and so if you put the if you put the player object in there then the array would never detect a collision with that object you can also as with any other collision object in Godot use the layer use the collision layers and the collision masks to set the array on a different layer and have it ignore the player that way and this is also a good method for doing wall jumps you give the player some rays that are sticking out to the left and right and those can tell you whether you're against a wall or not to allow the player to wall jump that's another really common use of raycast so that'll do it for this video I hope that you found the examples useful so the source code for this project will be linked in the description below feel free to download it and take a look and play with it yourself and use rake apps whenever you can now see you in the next video you
