With timestamps:

00:05 - alright last time we learned how to
00:07 - create a sprite and make it move across
00:09 - the screen and this is where we ended up
00:11 - we had a sprite moving across the screen
00:14 - and wrapping around the edges so that it
00:17 - never gets lost now if you're following
00:23 - along you can get the code for the last
00:27 - lesson in the link below ok so what we'd
00:31 - like to do is look at how we can replace
00:34 - that little green square with some nice
00:37 - graphics that look like a character that
00:39 - would be moving around on the screen
00:42 - these little rectangles are really
00:44 - useful to use as sprites when you're
00:46 - getting stuff working and I usually
00:48 - recommend you start that way and once
00:50 - you have everything working then you can
00:52 - replace it with the graphics that you
00:53 - want to use so the question is if you're
00:57 - not very artistically talented yourself
01:00 - in which case you could draw the
01:02 - characters you want to use is where do
01:04 - you get art to use in your projects it's
01:08 - very important to remember that you
01:11 - shouldn't use art that you don't have
01:13 - the rights to use you know you can go
01:16 - online and you can search up a picture
01:18 - of Mario and/or a Pokemon and you can
01:21 - use that in your game but because you
01:23 - don't own that picture you will get in
01:26 - trouble if you try and put your game
01:28 - online and let other people see it so to
01:31 - be safe it's a good idea to stick with
01:33 - art that you have permission to use
01:36 - fortunately there is a really cool
01:38 - website called open game art org if you
01:43 - go there it is full of all sorts of art
01:47 - and sound and music that artists have
01:50 - created for you to be able to use and
01:54 - you can use it however you like in your
01:57 - games I recommend you go over here to
02:01 - the search box and you type in Kenny ke
02:04 - and n ey Kenny is a very well known
02:08 - artist who has created all kinds of
02:11 - really great graphics packs to use for
02:15 - making different kinds of games
02:17 - and they're really good-looking if you
02:20 - scroll down here you can see there's one
02:22 - called platformer art complete pack and
02:25 - this is what we're going to use today
02:27 - now you can go to open game art and
02:30 - download download this or you can just
02:32 - download the particular images we're
02:33 - going to use in the link below the video
02:36 - but this art pack looks really nice it
02:39 - has all sorts of stuff to make as you
02:42 - can see all kinds of different games it
02:44 - has characters enemies platforms items
02:51 - lots more than we'll ever be able to use
02:54 - to customize your game and make it look
02:56 - however you like okay so in order to use
03:03 - the graphics in our game we're going to
03:05 - need to have the graphics file and we're
03:07 - going to need to tell our game to load
03:08 - it so the first question is where do we
03:10 - put our files so I'm using a folder
03:15 - called tutorials and that's where I'm
03:17 - creating all of these programs that
03:19 - we're working on in this series and I've
03:22 - made a folder called IMG short for image
03:26 - and in that image folder I have placed
03:30 - this little graphic v1 jump again if you
03:37 - click on the link below in the video you
03:38 - can download this image or you can find
03:42 - it in that graphics pack if you download
03:45 - the whole pack from open game art okay
03:47 - but now we have this one grab it called
03:50 - p1 underscore jump dot PNG to load this
03:58 - graphic into our program we need to tell
04:01 - the program where that file actually is
04:04 - on the computer's hard drive and
04:07 - depending on what kind of computer
04:09 - you're using a Windows computer a
04:12 - Macintosh computer or even a Linux
04:15 - computer the WAV the files are organized
04:18 - might be different so we want to be
04:20 - careful that we do this the right way so
04:23 - that this program will run on any kind
04:26 - of computer and it'll know just to look
04:29 - in that IMG folder
04:31 - and find the file the first thing we
04:35 - need to do is we need to import OS up
04:39 - here this will give us some commands to
04:41 - help us set up the folder and point to
04:45 - the right place now since we're
04:49 - eventually going to load different
04:52 - graphics and maybe even sounds we want
04:55 - to set up some folders for this so let's
04:57 - just set up where folders are so the
05:00 - game knows where the folders are that
05:01 - needs to look okay so set up and I'm
05:06 - going to call these assets assets are
05:08 - the game development term for the art
05:11 - and sound that goes into your game so
05:15 - we're going to set up those folders the
05:18 - first one is going to be the game folder
05:19 - that's that's where is this file the
05:23 - sexual Python file that we're running
05:27 - where is it located
05:29 - well the command to find that out is OS
05:32 - dot path dot der name file ok so this
05:38 - this variable file with the double
05:41 - underscores under it is a special
05:43 - variable that python keeps track of
05:45 - where it knows the name of the file
05:49 - itself and see that pop up there that's
05:51 - the full location on my computer of
05:53 - where this file is that's going to look
05:57 - different on yours because yours might
05:58 - be in a different place for example if
06:02 - you are on a Windows computer it might
06:05 - look like this have a seat : at the
06:09 - beginning or maybe a different letter
06:10 - back slash and then it could be you know
06:14 - some name like that but on
06:19 - so that's on Windows and on a Mac it
06:24 - might be more like this like that so
06:33 - these are two different ways that the
06:35 - two different computers list where
06:39 - folders are the Documents folder is
06:41 - inside the Cris folder which is inside
06:43 - the users folder
06:45 - okay and this Durr name will just give
06:49 - us that directory which is another name
06:51 - for folder so it tells us what folder
06:53 - that is now we also want to tell it that
06:56 - the images are going to be in a folder
06:59 - underneath that so the image folder is
07:02 - going to be OSF join which is a command
07:07 - to join two paths together so it's game
07:10 - folder comma IMG and what that will do
07:16 - is join those two together by putting
07:20 - either the backslash if you're on a
07:23 - Windows computer or the forward slash if
07:26 - you're on a Mac or Linux computer so
07:29 - they should look like that so that's
07:35 - just a little extra work we have to do
07:36 - to make sure that this will work on any
07:39 - computer we might be running the program
07:41 - on but now we have this image folder
07:43 - defined and we can use that to load the
07:46 - graphics so we're going to go down here
07:48 - to our player sprite and now we don't
07:50 - want to use just a plain green rectangle
07:53 - anymore so we're going to change this
07:55 - self dot image into something new and
07:58 - what we're going to do is we're going to
08:00 - say PI game image dot load and that says
08:05 - I want to load a graphics file off of
08:07 - the hard drive and it's going to be
08:11 - located right in this image folder but
08:16 - then it needs to be at the end so for
08:18 - example you know the actual p1
08:22 - underscore jump dot PNG name needs to go
08:26 - at the end like that so we have to use
08:30 - that join command one more time
08:32 - OS path join and we just want to join
08:37 - our image folder and the name of the
08:40 - file we want which is p1 underscore jump
08:43 - dot PNG and then when you load an image
08:49 - in pygame it's very important that you
08:52 - put dot convert at the end of loading it
08:56 - what that will do is it
08:58 - we'll load the image and then convert it
09:01 - into a form that pygame can manipulate
09:03 - easily if you leave out this step your
09:05 - game will be slower okay now right here
09:09 - we don't want to fill that image with
09:10 - green anymore because we now have a
09:14 - cool-looking image we don't need to
09:17 - change the rect here because the get
09:18 - rekt command will look at that image and
09:20 - find the right rectangle so now let's
09:23 - try running it and see what happens
09:24 - there we go now we have our sprite using
09:28 - that little graphic but we have one
09:36 - other small problem look what happens if
09:39 - we go down here to our draw part of our
09:42 - loop and we say instead we're going to
09:45 - fill the screen with blue instead of
09:47 - black yeah blue up here already so now I
09:51 - should have a blue background but let's
09:53 - see what it looks like there we go can
09:56 - you see that black rectangle around our
09:59 - sprite well that's the problem when a
10:05 - computer loads an image file that file
10:08 - is always a rectangle the computer can
10:11 - only store things in rectangles even
10:13 - though the shape might be drawn in some
10:15 - crazy curved shape it still has a
10:17 - rectangle around it and we want to tell
10:20 - the computer that the stuff around that
10:23 - rectangle that part we saw in black
10:25 - should be transparent or in other words
10:28 - it shouldn't be drawn so that way if the
10:30 - sprite is being drawn on top of a
10:32 - background or another image we should
10:34 - just see what's back there so we have to
10:36 - tell it to ignore that portion of the
10:39 - sprite and we can do that by adding
10:42 - right here self-taught image set color
10:46 - key and this command just says tell me
10:49 - what color you want me to ignore or make
10:53 - transparent so we're going to say make
10:55 - black transparent because that's what we
10:58 - saw on the image and now our sprite has
11:02 - no weird rectangle around it
11:10 - okay it's not about wraps it up for this
11:12 - lesson we took our sprite and we changed
11:16 - it into an image here and now it's
11:21 - moving across the screen but before we
11:23 - go let's just add one more fun little
11:25 - thing to our update section let's also
11:29 - make this bright move up and down so I'm
11:32 - going to add a Y speed of five and
11:38 - whenever the sprite moves its rectangle
11:42 - Y is going to get that Y speed added to
11:47 - it that means it's going downwards right
11:49 - because Y gets bigger as you go down so
11:53 - I don't want it to go off the screen so
11:56 - we're going to say if the rectangles
11:58 - bottom ever gets below getting bigger
12:03 - height minus 200 say so 200 pixels up
12:09 - from the bottom if we pass that line
12:11 - then we're going to reverse direction
12:12 - and start going upward so we need to
12:15 - change the Y speed to be negative five
12:18 - and we also need to do the opposite when
12:24 - it gets up towards the top so if the top
12:28 - of the rectangle is ever less than 200
12:32 - then we'll change the Y speed back to
12:36 - five okay now our little guy looks like
12:43 - he's jumping across the screen
12:49 - all right try that out play with it see
12:51 - what else you can do in the update
12:53 - section anything you do in here
12:54 - remember happens every frame of the
12:56 - animation so the bigger numbers the
12:59 - speeds are that's how many pixels that
13:01 - character is going to move thanks for
13:04 - watching and I'll see you next time
13:14 - you

Cleaned transcript:

alright last time we learned how to create a sprite and make it move across the screen and this is where we ended up we had a sprite moving across the screen and wrapping around the edges so that it never gets lost now if you're following along you can get the code for the last lesson in the link below ok so what we'd like to do is look at how we can replace that little green square with some nice graphics that look like a character that would be moving around on the screen these little rectangles are really useful to use as sprites when you're getting stuff working and I usually recommend you start that way and once you have everything working then you can replace it with the graphics that you want to use so the question is if you're not very artistically talented yourself in which case you could draw the characters you want to use is where do you get art to use in your projects it's very important to remember that you shouldn't use art that you don't have the rights to use you know you can go online and you can search up a picture of Mario and/or a Pokemon and you can use that in your game but because you don't own that picture you will get in trouble if you try and put your game online and let other people see it so to be safe it's a good idea to stick with art that you have permission to use fortunately there is a really cool website called open game art org if you go there it is full of all sorts of art and sound and music that artists have created for you to be able to use and you can use it however you like in your games I recommend you go over here to the search box and you type in Kenny ke and n ey Kenny is a very well known artist who has created all kinds of really great graphics packs to use for making different kinds of games and they're really goodlooking if you scroll down here you can see there's one called platformer art complete pack and this is what we're going to use today now you can go to open game art and download download this or you can just download the particular images we're going to use in the link below the video but this art pack looks really nice it has all sorts of stuff to make as you can see all kinds of different games it has characters enemies platforms items lots more than we'll ever be able to use to customize your game and make it look however you like okay so in order to use the graphics in our game we're going to need to have the graphics file and we're going to need to tell our game to load it so the first question is where do we put our files so I'm using a folder called tutorials and that's where I'm creating all of these programs that we're working on in this series and I've made a folder called IMG short for image and in that image folder I have placed this little graphic v1 jump again if you click on the link below in the video you can download this image or you can find it in that graphics pack if you download the whole pack from open game art okay but now we have this one grab it called p1 underscore jump dot PNG to load this graphic into our program we need to tell the program where that file actually is on the computer's hard drive and depending on what kind of computer you're using a Windows computer a Macintosh computer or even a Linux computer the WAV the files are organized might be different so we want to be careful that we do this the right way so that this program will run on any kind of computer and it'll know just to look in that IMG folder and find the file the first thing we need to do is we need to import OS up here this will give us some commands to help us set up the folder and point to the right place now since we're eventually going to load different graphics and maybe even sounds we want to set up some folders for this so let's just set up where folders are so the game knows where the folders are that needs to look okay so set up and I'm going to call these assets assets are the game development term for the art and sound that goes into your game so we're going to set up those folders the first one is going to be the game folder that's that's where is this file the sexual Python file that we're running where is it located well the command to find that out is OS dot path dot der name file ok so this this variable file with the double underscores under it is a special variable that python keeps track of where it knows the name of the file itself and see that pop up there that's the full location on my computer of where this file is that's going to look different on yours because yours might be in a different place for example if you are on a Windows computer it might look like this have a seat at the beginning or maybe a different letter back slash and then it could be you know some name like that but on so that's on Windows and on a Mac it might be more like this like that so these are two different ways that the two different computers list where folders are the Documents folder is inside the Cris folder which is inside the users folder okay and this Durr name will just give us that directory which is another name for folder so it tells us what folder that is now we also want to tell it that the images are going to be in a folder underneath that so the image folder is going to be OSF join which is a command to join two paths together so it's game folder comma IMG and what that will do is join those two together by putting either the backslash if you're on a Windows computer or the forward slash if you're on a Mac or Linux computer so they should look like that so that's just a little extra work we have to do to make sure that this will work on any computer we might be running the program on but now we have this image folder defined and we can use that to load the graphics so we're going to go down here to our player sprite and now we don't want to use just a plain green rectangle anymore so we're going to change this self dot image into something new and what we're going to do is we're going to say PI game image dot load and that says I want to load a graphics file off of the hard drive and it's going to be located right in this image folder but then it needs to be at the end so for example you know the actual p1 underscore jump dot PNG name needs to go at the end like that so we have to use that join command one more time OS path join and we just want to join our image folder and the name of the file we want which is p1 underscore jump dot PNG and then when you load an image in pygame it's very important that you put dot convert at the end of loading it what that will do is it we'll load the image and then convert it into a form that pygame can manipulate easily if you leave out this step your game will be slower okay now right here we don't want to fill that image with green anymore because we now have a coollooking image we don't need to change the rect here because the get rekt command will look at that image and find the right rectangle so now let's try running it and see what happens there we go now we have our sprite using that little graphic but we have one other small problem look what happens if we go down here to our draw part of our loop and we say instead we're going to fill the screen with blue instead of black yeah blue up here already so now I should have a blue background but let's see what it looks like there we go can you see that black rectangle around our sprite well that's the problem when a computer loads an image file that file is always a rectangle the computer can only store things in rectangles even though the shape might be drawn in some crazy curved shape it still has a rectangle around it and we want to tell the computer that the stuff around that rectangle that part we saw in black should be transparent or in other words it shouldn't be drawn so that way if the sprite is being drawn on top of a background or another image we should just see what's back there so we have to tell it to ignore that portion of the sprite and we can do that by adding right here selftaught image set color key and this command just says tell me what color you want me to ignore or make transparent so we're going to say make black transparent because that's what we saw on the image and now our sprite has no weird rectangle around it okay it's not about wraps it up for this lesson we took our sprite and we changed it into an image here and now it's moving across the screen but before we go let's just add one more fun little thing to our update section let's also make this bright move up and down so I'm going to add a Y speed of five and whenever the sprite moves its rectangle Y is going to get that Y speed added to it that means it's going downwards right because Y gets bigger as you go down so I don't want it to go off the screen so we're going to say if the rectangles bottom ever gets below getting bigger height minus 200 say so 200 pixels up from the bottom if we pass that line then we're going to reverse direction and start going upward so we need to change the Y speed to be negative five and we also need to do the opposite when it gets up towards the top so if the top of the rectangle is ever less than 200 then we'll change the Y speed back to five okay now our little guy looks like he's jumping across the screen all right try that out play with it see what else you can do in the update section anything you do in here remember happens every frame of the animation so the bigger numbers the speeds are that's how many pixels that character is going to move thanks for watching and I'll see you next time you
