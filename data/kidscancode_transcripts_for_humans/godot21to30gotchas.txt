With timestamps:

00:00 - hello this video is a brief overview of
00:02 - some of the main things you need to know
00:03 - if you're moving from Godot 2.1 to 3.0
00:06 - this is not a comprehensive overview of
00:09 - the new engine features that would take
00:11 - much too long instead it's a quick look
00:14 - at the main gotchas where I've seen
00:16 - people get stuck or confused by some of
00:18 - the changes the first thing you'll
00:21 - notice is that the UI has changed a
00:22 - little bit some of the buttons have been
00:24 - moved around the play buttons for
00:26 - example or over here on the right now
00:27 - and the theme has changed a little bit
00:31 - the color schemes a little different
00:32 - something else new is in the editor
00:34 - settings you can even go in here and
00:36 - change to a different theme the preset
00:40 - theme is the one you're seeing there's
00:41 - even a light one if you want to try that
00:44 - out you can have a light theme well
00:46 - although personally I think it looks a
00:48 - little strange some other UI changes
00:50 - your project settings are now under the
00:52 - project menu and they've been
00:55 - reorganized a bit set to in a few
00:59 - different categories one that I really
01:03 - like in here is that your 2d render and
01:06 - physics layers can be named so if you're
01:09 - using a lot of different physics masks
01:13 - for your different types of objects so
01:16 - you can go into layer 1 and rename this
01:18 - two enemies and then it will appear as
01:21 - enemies in all of the settings dialogues
01:24 - in another place I see a lot of people
01:26 - getting confused in 3.0 is when
01:29 - importing assets Godot 3 will
01:33 - automatically import any assets that you
01:35 - place in the project folder you don't
01:37 - have to do it manually so I have this
01:40 - art folder that I've added to the
01:42 - project and it's got a bunch of textures
01:44 - and and sounds in it and they were
01:46 - automatically imported when I opened the
01:49 - when I open the window that actually
01:51 - does it in real time but if you want to
01:54 - change the properties for example this
01:56 - image here this texture I want to change
01:58 - its import settings the import tab is
02:00 - over here on the right and here you have
02:02 - all of your settings for how you want it
02:05 - to be imported and you can do this with
02:07 - multiple images at once if I select all
02:09 - of these I can apply the same setting to
02:12 - them for example if I want
02:14 - caps on for all of them and maybe I want
02:16 - filter on then I can say rien port and
02:19 - it will do that I can also go to some
02:25 - type of asset and set whatever settings
02:28 - I want as the default for that type so
02:30 - that the textures will always be
02:32 - imported with filter off or however you
02:34 - want to do it and there are some presets
02:36 - here as well so it's a little bit more
02:39 - it's a little different from the way it
02:41 - worked before I think you'll probably
02:42 - find it's more convenient over time but
02:45 - at the beginning it does tend to trip
02:46 - people up a little bit so let's look at
02:49 - some of the scripting changes if you add
02:52 - a script you'll notice now that you have
02:54 - some language options we're going to
02:56 - stick to GD script for now and something
02:59 - very convenient if you're used to using
03:01 - Godot is the template the default
03:04 - template is going to be the one you're
03:05 - used to seeing where if you add it it's
03:07 - going to have all the comments in it but
03:13 - if we close this one and we were to go
03:16 - back over to the node TV and let's add
03:18 - another script and choose you can choose
03:21 - empty which will do a completely empty
03:24 - script or you can have no comments which
03:27 - will remove all those comments that you
03:28 - have gotten used to always deleting the
03:31 - first time you make the script so we'll
03:33 - we'll go to with the no comments version
03:35 - so here's our empty script now the first
03:38 - thing you'll probably encounter writing
03:41 - scripts in 3.0 is that in the previous
03:45 - versions when you wanted to use the
03:47 - input function or you wanted to use
03:50 - process or you wanted to use the physics
03:55 - callback which is called physics process
03:58 - now it used to be called fixed process
04:00 - so that one got a rename if you want to
04:04 - use these callbacks in 2.1 you had to
04:07 - enable them you had to set processing to
04:09 - true in your ready function but now in
04:13 - 3.0 if you include these functions they
04:16 - will automatically get processed so you
04:19 - only need to use that set process so for
04:23 - example if I want a set process to false
04:25 - at the beginning of my
04:27 - script I can put that in there ready and
04:29 - then set it to true at some other time
04:31 - but you don't have to set them to true
04:34 - by default if you want to use them just
04:36 - include them and they will work now this
04:39 - next one is one of my absolute favorites
04:41 - so I've added an animated sprite child
04:43 - to this node 2d so imagine we we had
04:46 - some animations in there and we want to
04:48 - be able to in our script start and stop
04:51 - them things like that now in 2.1 what
04:54 - you had to do was you would have to say
04:56 - get node and then the name dot play or
05:01 - whatever you wanted to do with that note
05:03 - and so that meant your if you have a lot
05:06 - of different child nodes that you're
05:08 - accessing your script could get kind of
05:10 - messy and have so many of these get
05:11 - nodes with you know the path to the node
05:14 - which could be you know two or three
05:16 - children deep and so the way that the
05:19 - standard way that everybody addressed
05:21 - that was they would make a variable
05:27 - and assign that to the get node right so
05:31 - they would put you know those put this
05:33 - up there and they would make that
05:37 - variable a reference to the animated
05:42 - sprite and so your 2.1 scripts would be
05:46 - full of these on ready calls at the top
05:49 - and then the variable being used
05:50 - throughout your script and so this is a
05:54 - lot more convenient now in 3.0 when you
06:00 - want to talk to the or when you want to
06:02 - reference the animated sprite use a
06:03 - dollar sign dollar sign is a shortcut
06:06 - basically for get node so if I start
06:09 - typing a you're gonna see I get auto
06:10 - completion it knows what the children
06:13 - are and I can just say animated strike
06:16 - the sprite play and this works with
06:18 - grandchildren nodes you know if
06:21 - underneath the animated sprite there's a
06:23 - I don't know particle 2d and I rename
06:28 - that the trail or something just as an
06:32 - example then when I want to reference
06:36 - that it will find it like this animated
06:42 - sprite slash trail and I want to set
06:46 - that emitting property to true and so
06:50 - it's just a lot more convenient in your
06:53 - script to explicitly see what node
06:56 - you're referencing without having to
06:58 - look at the variable name and then look
07:01 - up above and see which get node that was
07:04 - a reference to which brings us to one of
07:06 - the other big scripting changes or
07:09 - changes to the API in general which is
07:11 - accessing properties directly without
07:14 - having to use the set and get functions
07:17 - so we look at the class help for the
07:21 - particle 2d you'll see that it has a
07:25 - list of members now and so these are
07:28 - properties that you can access directly
07:30 - so instead of saying set emitting true
07:33 - and get emitting you can just use the
07:35 - emitting property
07:37 - and just about all of the nodes have had
07:41 - these member variables enabled on them
07:44 - and it makes for makes things a lot more
07:46 - convenient for example moving this node
07:49 - let's say I have in my well let's make
07:53 - our process function and let's say in
07:56 - here I want to move my node to D I've
07:59 - got a velocity that's a vector - I just
08:07 - want to move it
08:08 - ten ten by ten pixels right so I want to
08:11 - move that a little bit each frame and so
08:15 - normally what you would have had to do
08:17 - in 2.1 was you would have to say set
08:21 - pause
08:22 - get pause plus velocity right and this
08:30 - was a very common construction that you
08:32 - would see and so what's changed now is
08:35 - that first these abbreviations are gone
08:38 - so its position not pause and it's
08:41 - rotation not rot anymore but you can
08:45 - also set these directly with the
08:47 - position property so the position
08:49 - property contains the node two these
08:53 - position so if i want to change it by
08:56 - adding the velocity i can just add the
08:59 - velocity like that and this is a lot
09:02 - more concise and clear and makes for
09:05 - much cleaner code when you are changing
09:09 - properties of a node another big change
09:12 - that will get you if you're not prepared
09:14 - for it is the rotation direction has
09:17 - changed so in two point one if I took
09:21 - this sprite and I rotated it by ten
09:24 - degrees it would rotate counterclockwise
09:28 - but now if I rotate ten degrees I'm
09:30 - going to rotate clockwise so positive is
09:34 - now clockwise it also means that in a
09:38 - situation like this the red vector is
09:40 - now now has an angle of zero zero points
09:44 - along the x axis so the green arrow here
09:48 - the green vector would have an angle of
09:50 - negative
09:50 - ninety in two point one this green arrow
09:54 - would have been the zero angle and we
09:57 - would have gotten positive in the other
09:59 - direction and so it's everything is
10:01 - completely reversed from the way you did
10:03 - it before but probably more like you're
10:07 - used to doing it in other programs where
10:09 - the x-axis is the zero direction and
10:12 - clockwise is positive there are lots and
10:16 - lots of changes to individual node types
10:18 - way more than I could get into in this
10:21 - video for example kinematic body 2d has
10:24 - changed quite a bit there is no longer a
10:26 - move function which is been tripping up
10:30 - a lot of people I've noticed on the
10:32 - discord so move is now called move and
10:36 - collide basically works the same as move
10:38 - did and then you have additionally a
10:40 - moving slide which will take care of
10:42 - your sliding along obstacles when you
10:45 - hit them and so I encourage you as
10:49 - you're starting out with 3.0 or if
10:52 - you're trying to convert things over to
10:54 - 3.0 from your older projects read the
10:58 - API reference the docs have all the
11:01 - changes in them the API reference for
11:04 - 3.0 is far far more complete than two
11:08 - point one's was so if you're used to
11:09 - looking in there and not finding
11:12 - information we are significantly more
11:16 - complete and well documented then we
11:19 - used to be thanks to the efforts of lots
11:21 - and lots of people on the documentation
11:23 - team and pull requests that have been
11:25 - coming in over the last couple of months
11:28 - and they're continuing to improve so
11:31 - keep an eye on the docs and that's your
11:34 - place to look first when you're trying
11:35 - to find out what has changed so coming
11:38 - up you'll see from me some more videos
11:40 - on individual components of 3.0 and how
11:44 - to use them I've already done one on
11:45 - particles 2d that you can see linked
11:47 - below so please subscribe and look for
11:50 - those coming soon thanks for watching
11:59 - you

Cleaned transcript:

hello this video is a brief overview of some of the main things you need to know if you're moving from Godot 2.1 to 3.0 this is not a comprehensive overview of the new engine features that would take much too long instead it's a quick look at the main gotchas where I've seen people get stuck or confused by some of the changes the first thing you'll notice is that the UI has changed a little bit some of the buttons have been moved around the play buttons for example or over here on the right now and the theme has changed a little bit the color schemes a little different something else new is in the editor settings you can even go in here and change to a different theme the preset theme is the one you're seeing there's even a light one if you want to try that out you can have a light theme well although personally I think it looks a little strange some other UI changes your project settings are now under the project menu and they've been reorganized a bit set to in a few different categories one that I really like in here is that your 2d render and physics layers can be named so if you're using a lot of different physics masks for your different types of objects so you can go into layer 1 and rename this two enemies and then it will appear as enemies in all of the settings dialogues in another place I see a lot of people getting confused in 3.0 is when importing assets Godot 3 will automatically import any assets that you place in the project folder you don't have to do it manually so I have this art folder that I've added to the project and it's got a bunch of textures and and sounds in it and they were automatically imported when I opened the when I open the window that actually does it in real time but if you want to change the properties for example this image here this texture I want to change its import settings the import tab is over here on the right and here you have all of your settings for how you want it to be imported and you can do this with multiple images at once if I select all of these I can apply the same setting to them for example if I want caps on for all of them and maybe I want filter on then I can say rien port and it will do that I can also go to some type of asset and set whatever settings I want as the default for that type so that the textures will always be imported with filter off or however you want to do it and there are some presets here as well so it's a little bit more it's a little different from the way it worked before I think you'll probably find it's more convenient over time but at the beginning it does tend to trip people up a little bit so let's look at some of the scripting changes if you add a script you'll notice now that you have some language options we're going to stick to GD script for now and something very convenient if you're used to using Godot is the template the default template is going to be the one you're used to seeing where if you add it it's going to have all the comments in it but if we close this one and we were to go back over to the node TV and let's add another script and choose you can choose empty which will do a completely empty script or you can have no comments which will remove all those comments that you have gotten used to always deleting the first time you make the script so we'll we'll go to with the no comments version so here's our empty script now the first thing you'll probably encounter writing scripts in 3.0 is that in the previous versions when you wanted to use the input function or you wanted to use process or you wanted to use the physics callback which is called physics process now it used to be called fixed process so that one got a rename if you want to use these callbacks in 2.1 you had to enable them you had to set processing to true in your ready function but now in 3.0 if you include these functions they will automatically get processed so you only need to use that set process so for example if I want a set process to false at the beginning of my script I can put that in there ready and then set it to true at some other time but you don't have to set them to true by default if you want to use them just include them and they will work now this next one is one of my absolute favorites so I've added an animated sprite child to this node 2d so imagine we we had some animations in there and we want to be able to in our script start and stop them things like that now in 2.1 what you had to do was you would have to say get node and then the name dot play or whatever you wanted to do with that note and so that meant your if you have a lot of different child nodes that you're accessing your script could get kind of messy and have so many of these get nodes with you know the path to the node which could be you know two or three children deep and so the way that the standard way that everybody addressed that was they would make a variable and assign that to the get node right so they would put you know those put this up there and they would make that variable a reference to the animated sprite and so your 2.1 scripts would be full of these on ready calls at the top and then the variable being used throughout your script and so this is a lot more convenient now in 3.0 when you want to talk to the or when you want to reference the animated sprite use a dollar sign dollar sign is a shortcut basically for get node so if I start typing a you're gonna see I get auto completion it knows what the children are and I can just say animated strike the sprite play and this works with grandchildren nodes you know if underneath the animated sprite there's a I don't know particle 2d and I rename that the trail or something just as an example then when I want to reference that it will find it like this animated sprite slash trail and I want to set that emitting property to true and so it's just a lot more convenient in your script to explicitly see what node you're referencing without having to look at the variable name and then look up above and see which get node that was a reference to which brings us to one of the other big scripting changes or changes to the API in general which is accessing properties directly without having to use the set and get functions so we look at the class help for the particle 2d you'll see that it has a list of members now and so these are properties that you can access directly so instead of saying set emitting true and get emitting you can just use the emitting property and just about all of the nodes have had these member variables enabled on them and it makes for makes things a lot more convenient for example moving this node let's say I have in my well let's make our process function and let's say in here I want to move my node to D I've got a velocity that's a vector I just want to move it ten ten by ten pixels right so I want to move that a little bit each frame and so normally what you would have had to do in 2.1 was you would have to say set pause get pause plus velocity right and this was a very common construction that you would see and so what's changed now is that first these abbreviations are gone so its position not pause and it's rotation not rot anymore but you can also set these directly with the position property so the position property contains the node two these position so if i want to change it by adding the velocity i can just add the velocity like that and this is a lot more concise and clear and makes for much cleaner code when you are changing properties of a node another big change that will get you if you're not prepared for it is the rotation direction has changed so in two point one if I took this sprite and I rotated it by ten degrees it would rotate counterclockwise but now if I rotate ten degrees I'm going to rotate clockwise so positive is now clockwise it also means that in a situation like this the red vector is now now has an angle of zero zero points along the x axis so the green arrow here the green vector would have an angle of negative ninety in two point one this green arrow would have been the zero angle and we would have gotten positive in the other direction and so it's everything is completely reversed from the way you did it before but probably more like you're used to doing it in other programs where the xaxis is the zero direction and clockwise is positive there are lots and lots of changes to individual node types way more than I could get into in this video for example kinematic body 2d has changed quite a bit there is no longer a move function which is been tripping up a lot of people I've noticed on the discord so move is now called move and collide basically works the same as move did and then you have additionally a moving slide which will take care of your sliding along obstacles when you hit them and so I encourage you as you're starting out with 3.0 or if you're trying to convert things over to 3.0 from your older projects read the API reference the docs have all the changes in them the API reference for 3.0 is far far more complete than two point one's was so if you're used to looking in there and not finding information we are significantly more complete and well documented then we used to be thanks to the efforts of lots and lots of people on the documentation team and pull requests that have been coming in over the last couple of months and they're continuing to improve so keep an eye on the docs and that's your place to look first when you're trying to find out what has changed so coming up you'll see from me some more videos on individual components of 3.0 and how to use them I've already done one on particles 2d that you can see linked below so please subscribe and look for those coming soon thanks for watching you
