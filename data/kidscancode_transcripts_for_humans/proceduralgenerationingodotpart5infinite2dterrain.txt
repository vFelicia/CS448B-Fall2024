With timestamps:

00:00 - welcome back to procedural generation
00:02 - with Godot in this part we're gonna look
00:06 - at creating an infinite 2d terrain of
00:09 - smooth rolling hills ready let's get
00:13 - started
00:13 - to start making my terrain I'm going to
00:16 - add a line to D this will be the visible
00:21 - terrain on our screen that'll show the
00:23 - the hills that we're making and then
00:26 - we're gonna attach a script to this main
00:29 - node and we're going to start by
00:35 - defining some of our variables we're
00:38 - going to have a number of hills is how
00:43 - many hills we were gonna generate at a
00:45 - time forgot the word bar I mean it how
00:50 - many pills we'll generate at a time
00:54 - slice is going to be how much we slice
00:59 - them up how many increments we divide
01:03 - the hill up into and then he'll range is
01:10 - going to be how much they vary the
01:12 - vertical variance when we create them
01:17 - screen size we're going to need to
01:20 - capture when we run so that we can tell
01:23 - when we're drawing off the screen or on
01:25 - the screen we're going to make use an
01:33 - array to hold all of the points that
01:35 - we're generating using the algorithm in
01:38 - our ready function we're going to
01:41 - initialize the random number generator
01:44 - we're going to initialize the terrain
01:48 - just to make sure it is empty
01:51 - and we need to pick our starting point
01:56 - the starting point for the terrain which
01:59 - is going to be on the left hand side of
02:00 - the screen so the X is going to be 0 but
02:02 - we want the Y to be random so we're
02:04 - gonna pick just a start y-value it's
02:08 - going to be
02:12 - the screen size the why screen size
02:15 - which we need to capture to didn't even
02:17 - got to do that screen size is going to
02:20 - be get viewport get visible wrapped it
02:24 - up size then we want the Y screen size
02:27 - and I'm going to start it around 3/4 of
02:30 - the way from the top it's just a
02:33 - arbitrary choice we we want the terrain
02:36 - to mostly be the bottom section of the
02:39 - screen so we leave some room up above we
02:40 - don't want to be going off the top so
02:43 - we're gonna go 3/4 of the way down and
02:45 - then we're gonna add plus or minus 100
02:49 - 100 being our hill range so we want to
02:53 - go down by a hundred plus R and I
02:59 - percent hill range times two and that's
03:03 - going to add add some number between 0
03:09 - and 200 but since we subtracted 100 it's
03:13 - basically minus 102 plus 100 and now we
03:16 - have a starting point so that will be
03:18 - our first item in the terrain we append
03:24 - 0 start why that's where our hills will
03:30 - start on the left hand side then what
03:38 - we're gonna do is run our ad add Hills
03:42 - function which which is going to be the
03:44 - code that actually implements the
03:46 - algorithm add Hills so what is this
03:52 - gonna do so we're gonna start by room
03:57 - here we're going to start by making a
04:00 - variable to calculate how wide our Hills
04:05 - are going to be that's screen size X
04:08 - divided by the number of hills I wrote
04:13 - is e there and then we need to figure
04:16 - out how big the individual slices are
04:18 - going to be and that's just gonna be
04:21 - that with Hill width divided by a slice
04:24 - - slice X
04:26 - and then we need to figure out what our
04:29 - starting point is so our starting point
04:31 - is going to be the last point in the
04:36 - terrain which when we first start we
04:38 - only have one point in the terrain right
04:40 - that's our starting point on the
04:41 - left-hand side but we want to be able to
04:43 - add keep adding more Hills as we go to
04:47 - have our terrain continue and we just
04:49 - want to stick it on the end of the last
04:51 - hill that we made so they'll be
04:53 - continuous and there won't be any jumps
04:56 - so now we just need to iterate through
04:58 - the hills and make the hill so we're
05:00 - gonna say for I in range numb so for
05:05 - each Hill we need to do this so first we
05:08 - need to figure out what the height of
05:09 - the hill is going to be that's going to
05:11 - be a random value using the hill range
05:20 - pick our start dot Y and subtract that
05:23 - height we just calculated so that's how
05:26 - high up we're going to go and now we
05:30 - need to do the cutting apart into slices
05:33 - for J and range we want to go from 0 to
05:37 - [Music]
05:40 - whatever the hill slices size is and
05:44 - we're gonna do a point at each of these
05:51 - slice width so this is where the map
05:55 - comes in so we're gonna this is gonna be
05:57 - a vector 2 and I'm gonna do this on
06:01 - separate lines just because it starts to
06:03 - get really it just starts to get really
06:05 - long you could easily do this on one
06:06 - line but he'll point the X point is
06:10 - going to be start the start X + J times
06:15 - slice that's how far over it goes plus
06:21 - he'll he'll width so wit times I that's
06:30 - how far we move and then the hill or we
06:35 - move to the right and then the hill
06:36 - point dot y is
06:39 - going to be the start dot y plus the
06:42 - height times and I'm going to use the
06:46 - cosine function in this case you can try
06:49 - other functions to get different
06:51 - patterns but the cosine gives you a nice
06:54 - smooth flowing hill multiply that by
06:59 - hill slices times J see what I mean
07:03 - about the lines getting long in fact I
07:05 - could probably zoom in here a bit so
07:07 - they'll all fit on the screen and then
07:11 - oops I won too many parentheses there so
07:15 - now we have our two points being set and
07:19 - we can add that to our line add point
07:27 - fails point and then when this loop
07:33 - completes and we've done the two hills
07:37 - then we take the start y and we add
07:42 - height to it so we can do the next hill
07:47 - and let's run this now and see how it
07:52 - works there we go there's our two Hills
07:53 - so we start here is our start point it
07:56 - generated the first hill with that
07:57 - random height and then it generated the
08:01 - second hill and when we run it you
08:04 - should see we get a different a pretty
08:06 - wide variety of yeah see there we first
08:10 - Hill was a little taller run it one more
08:13 - time here nope that one we got a really
08:15 - tall hill now to make our terrain be
08:22 - solids that we can walk on it we're
08:24 - going to need a we're needed collision
08:27 - body so I'm going to add a static body
08:29 - 2d there as well so we have something to
08:33 - land on when we when we place our
08:37 - character in the game and so the
08:41 - polygons there the the collision shape
08:44 - of this static body is going to be
08:45 - generated by the by the terrain code so
08:49 - we're going to add that now into our
08:51 - code so we have
08:54 - here we're gonna make when we start out
08:58 - we're gonna start calculating what the
09:01 - polygon is so we'll set a pool vector to
09:05 - array and then whenever we add a hill
09:09 - point a point to the line we're also
09:11 - going to append it to the polygon and
09:18 - then after we have finished so right
09:23 - here then we can make a new shape
09:27 - collision polygon 2d dot new and then we
09:35 - set the shape the shape of that to it so
09:39 - static body 2d dot add child shape will
09:57 - add some we need to add two more points
10:01 - to make it a closed curve because we
10:02 - have the we have the curve of the line
10:04 - on top we need two more to make it
10:05 - closed so we'll add a couple of vectors
10:09 - projector two is here to get the end
10:12 - point so the last point in our terrain
10:15 - is that one and screen size dot y and
10:23 - then we also need the opposite corner
10:28 - which is the start X the screen size dot
10:33 - Y so we're just adding those two and
10:36 - then shape duct polygon equals poly
10:42 - now that should make us and actually
10:45 - here we can go over here and turn on
10:46 - visible collision shapes and we should
10:48 - see if it makes it alright so there's
10:51 - our collision shape being made when we
10:55 - generate
11:01 - excellent okay so now what I have is in
11:06 - the starting project I have a scene
11:09 - called Runner and this is a small
11:13 - kinematic body 2d with left and right
11:17 - arrow controls for it to move so if we
11:20 - take our terrain and instance that
11:22 - runner in here we should be able to land
11:27 - on the polygon and move and there we go
11:34 - and we can you know run along the run
11:37 - along the hills pretty good and then of
11:41 - course we fall off the end so now we
11:43 - have a camera attached to this runner as
11:45 - well that's following it as it moves
11:47 - along so we want to be able to generate
11:49 - some more hills whenever we get to them
11:52 - so that we could keep exploring and
11:54 - never find the end so what we can do is
11:57 - add a check and we can do that in
12:01 - process to see if the runner has
12:06 - traveled far enough that we need to
12:08 - generate new hills and so we're gonna
12:12 - say if the last this is the last point
12:17 - in the Train
12:18 - so the x-coordinate of the last point in
12:20 - the terrain is less than the runner
12:24 - runners exposition plus the screen size
12:27 - the screen width divided by two
12:30 - so we're if this is gonna be if we're
12:33 - within half a screen width of the last
12:37 - point and the terrain then we need to
12:38 - add more hills and let's run that and
12:42 - see what happens
12:43 - oh whoops we are generating all of the
12:47 - hills and the same point why is that oh
12:50 - I see why yeah so we skipped a line here
12:52 - we need to keep adding the terrain here
12:57 - this terrain array is what's keeping our
13:01 - list of coordinates it's how we're
13:03 - finding where our next start point is so
13:06 - we weren't appending it we're just using
13:08 - the line 2d to do the drawing because
13:11 - we're gonna get rid of it in a few
13:11 - minutes
13:12 - and that should do it okay so there we
13:17 - are we travel some more now we've got a
13:20 - continuous line of hills going nice and
13:25 - smooth and this will just keep going as
13:30 - long as we care to do it now I did put
13:32 - some zoom out on the camera just so you
13:34 - can see right we could see how they're
13:38 - getting generated when we get close
13:41 - enough but of course if we're zoomed in
13:45 - the right amount we can't see that far
13:47 - away and we wouldn't see them popping
13:49 - into existence all right so the last
13:51 - thing we're gonna do is we're gonna make
13:53 - those hills look a little nicer by
13:55 - getting rid of the line and using a
13:57 - texture okay so at the top here we're
14:02 - going to load our texture let's have a
14:07 - grass PNG and we're going to use a
14:12 - polygon 2d to display this so down here
14:16 - we can get rid of the line and you could
14:20 - actually go and even remove the node now
14:21 - we're not going to use it but I'll leave
14:23 - it there and here we're we are making
14:26 - our collision polygon we're also going
14:30 - to make I'll call it ground a polygon 2d
14:36 - to display everything and so the polygon
14:40 - 2d the ground ground dot polygon we set
14:45 - it the same way that we set the
14:47 - occlusion shape and then we set its
14:49 - texture equal to our texture and then we
14:54 - just added as a child and we'll be able
15:01 - to see it oops
15:06 - oh and then we got to make sure that
15:07 - when we import the grass we enable
15:11 - repeat and we turn off filter there we
15:16 - go now it will repeat you know basically
15:19 - tile that texture on the hills and we
15:21 - have a nice nice-looking grass rolling
15:25 - hills that we can
15:26 - and frolic along and thanks for watching
15:30 - I hope this was helpful to you and you
15:34 - find ways to use it in your own projects
15:36 - I'll see you in the next video thanks
15:40 - again
15:48 - you

Cleaned transcript:

welcome back to procedural generation with Godot in this part we're gonna look at creating an infinite 2d terrain of smooth rolling hills ready let's get started to start making my terrain I'm going to add a line to D this will be the visible terrain on our screen that'll show the the hills that we're making and then we're gonna attach a script to this main node and we're going to start by defining some of our variables we're going to have a number of hills is how many hills we were gonna generate at a time forgot the word bar I mean it how many pills we'll generate at a time slice is going to be how much we slice them up how many increments we divide the hill up into and then he'll range is going to be how much they vary the vertical variance when we create them screen size we're going to need to capture when we run so that we can tell when we're drawing off the screen or on the screen we're going to make use an array to hold all of the points that we're generating using the algorithm in our ready function we're going to initialize the random number generator we're going to initialize the terrain just to make sure it is empty and we need to pick our starting point the starting point for the terrain which is going to be on the left hand side of the screen so the X is going to be 0 but we want the Y to be random so we're gonna pick just a start yvalue it's going to be the screen size the why screen size which we need to capture to didn't even got to do that screen size is going to be get viewport get visible wrapped it up size then we want the Y screen size and I'm going to start it around 3/4 of the way from the top it's just a arbitrary choice we we want the terrain to mostly be the bottom section of the screen so we leave some room up above we don't want to be going off the top so we're gonna go 3/4 of the way down and then we're gonna add plus or minus 100 100 being our hill range so we want to go down by a hundred plus R and I percent hill range times two and that's going to add add some number between 0 and 200 but since we subtracted 100 it's basically minus 102 plus 100 and now we have a starting point so that will be our first item in the terrain we append 0 start why that's where our hills will start on the left hand side then what we're gonna do is run our ad add Hills function which which is going to be the code that actually implements the algorithm add Hills so what is this gonna do so we're gonna start by room here we're going to start by making a variable to calculate how wide our Hills are going to be that's screen size X divided by the number of hills I wrote is e there and then we need to figure out how big the individual slices are going to be and that's just gonna be that with Hill width divided by a slice slice X and then we need to figure out what our starting point is so our starting point is going to be the last point in the terrain which when we first start we only have one point in the terrain right that's our starting point on the lefthand side but we want to be able to add keep adding more Hills as we go to have our terrain continue and we just want to stick it on the end of the last hill that we made so they'll be continuous and there won't be any jumps so now we just need to iterate through the hills and make the hill so we're gonna say for I in range numb so for each Hill we need to do this so first we need to figure out what the height of the hill is going to be that's going to be a random value using the hill range pick our start dot Y and subtract that height we just calculated so that's how high up we're going to go and now we need to do the cutting apart into slices for J and range we want to go from 0 to whatever the hill slices size is and we're gonna do a point at each of these slice width so this is where the map comes in so we're gonna this is gonna be a vector 2 and I'm gonna do this on separate lines just because it starts to get really it just starts to get really long you could easily do this on one line but he'll point the X point is going to be start the start X + J times slice that's how far over it goes plus he'll he'll width so wit times I that's how far we move and then the hill or we move to the right and then the hill point dot y is going to be the start dot y plus the height times and I'm going to use the cosine function in this case you can try other functions to get different patterns but the cosine gives you a nice smooth flowing hill multiply that by hill slices times J see what I mean about the lines getting long in fact I could probably zoom in here a bit so they'll all fit on the screen and then oops I won too many parentheses there so now we have our two points being set and we can add that to our line add point fails point and then when this loop completes and we've done the two hills then we take the start y and we add height to it so we can do the next hill and let's run this now and see how it works there we go there's our two Hills so we start here is our start point it generated the first hill with that random height and then it generated the second hill and when we run it you should see we get a different a pretty wide variety of yeah see there we first Hill was a little taller run it one more time here nope that one we got a really tall hill now to make our terrain be solids that we can walk on it we're going to need a we're needed collision body so I'm going to add a static body 2d there as well so we have something to land on when we when we place our character in the game and so the polygons there the the collision shape of this static body is going to be generated by the by the terrain code so we're going to add that now into our code so we have here we're gonna make when we start out we're gonna start calculating what the polygon is so we'll set a pool vector to array and then whenever we add a hill point a point to the line we're also going to append it to the polygon and then after we have finished so right here then we can make a new shape collision polygon 2d dot new and then we set the shape the shape of that to it so static body 2d dot add child shape will add some we need to add two more points to make it a closed curve because we have the we have the curve of the line on top we need two more to make it closed so we'll add a couple of vectors projector two is here to get the end point so the last point in our terrain is that one and screen size dot y and then we also need the opposite corner which is the start X the screen size dot Y so we're just adding those two and then shape duct polygon equals poly now that should make us and actually here we can go over here and turn on visible collision shapes and we should see if it makes it alright so there's our collision shape being made when we generate excellent okay so now what I have is in the starting project I have a scene called Runner and this is a small kinematic body 2d with left and right arrow controls for it to move so if we take our terrain and instance that runner in here we should be able to land on the polygon and move and there we go and we can you know run along the run along the hills pretty good and then of course we fall off the end so now we have a camera attached to this runner as well that's following it as it moves along so we want to be able to generate some more hills whenever we get to them so that we could keep exploring and never find the end so what we can do is add a check and we can do that in process to see if the runner has traveled far enough that we need to generate new hills and so we're gonna say if the last this is the last point in the Train so the xcoordinate of the last point in the terrain is less than the runner runners exposition plus the screen size the screen width divided by two so we're if this is gonna be if we're within half a screen width of the last point and the terrain then we need to add more hills and let's run that and see what happens oh whoops we are generating all of the hills and the same point why is that oh I see why yeah so we skipped a line here we need to keep adding the terrain here this terrain array is what's keeping our list of coordinates it's how we're finding where our next start point is so we weren't appending it we're just using the line 2d to do the drawing because we're gonna get rid of it in a few minutes and that should do it okay so there we are we travel some more now we've got a continuous line of hills going nice and smooth and this will just keep going as long as we care to do it now I did put some zoom out on the camera just so you can see right we could see how they're getting generated when we get close enough but of course if we're zoomed in the right amount we can't see that far away and we wouldn't see them popping into existence all right so the last thing we're gonna do is we're gonna make those hills look a little nicer by getting rid of the line and using a texture okay so at the top here we're going to load our texture let's have a grass PNG and we're going to use a polygon 2d to display this so down here we can get rid of the line and you could actually go and even remove the node now we're not going to use it but I'll leave it there and here we're we are making our collision polygon we're also going to make I'll call it ground a polygon 2d to display everything and so the polygon 2d the ground ground dot polygon we set it the same way that we set the occlusion shape and then we set its texture equal to our texture and then we just added as a child and we'll be able to see it oops oh and then we got to make sure that when we import the grass we enable repeat and we turn off filter there we go now it will repeat you know basically tile that texture on the hills and we have a nice nicelooking grass rolling hills that we can and frolic along and thanks for watching I hope this was helpful to you and you find ways to use it in your own projects I'll see you in the next video thanks again you
