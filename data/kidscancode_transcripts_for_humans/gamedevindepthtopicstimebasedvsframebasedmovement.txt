With timestamps:

00:00 - welcome back to another video on in
00:02 - depth topics in game dev this is a
00:05 - series where we talk about certain
00:08 - subjects that students may find a little
00:10 - bit confusing the first time around or
00:13 - haven't quite found the right
00:16 - explanation for this time we're gonna be
00:19 - talking about time based versus frame
00:22 - based movement which is how you ensure
00:25 - that the animation that's happening in
00:27 - your game happens at a consistent speed
00:30 - even if you start to experience lag as
00:35 - always these videos will be coded in
00:36 - Python but this is a totally
00:40 - language-independent topic and whatever
00:43 - whatever language you're coding in or
00:45 - whatever game framework you're using
00:47 - this this lesson will apply just as well
00:50 - so in this video I want to talk a little
00:52 - bit about timing especially how it
00:54 - relates to movement so I've made a
00:56 - little program here where we have a
00:58 - sprite and the sprites gonna spawn on
01:00 - the left-hand edge of the screen and now
01:04 - I want to make this sprite move I want
01:06 - this sprite to just move to the right
01:08 - across the screen and I want it to take
01:11 - exactly 5 seconds to make that trip so
01:16 - how would I do that well if we look at a
01:20 - quick calculation here the screen is 600
01:25 - pixels wide and I want the sprite to
01:29 - take 5 seconds so that means I wanted to
01:32 - move a hundred and 20 pixels every
01:34 - second but we don't just move 120 pixels
01:37 - wait a second and then move on to
01:39 - another hundred and twenty right we're
01:40 - moving we want to smooth animation so we
01:43 - want to move every frame and if we're
01:46 - running at 60 frames per second and we
01:49 - want to move 120 pixels every second
01:51 - that means we're gonna move two pixels
01:53 - every frame and if we move it exactly
01:56 - that speed it will take 5 seconds to
01:59 - cross the screen
02:02 - so that's easy enough to do we will give
02:05 - our sprite a velocity of two and we will
02:11 - just update it by moving the X by that
02:16 - velocity and that will make our sprite
02:20 - move so now our sprite is moving and
02:22 - it's taking five seconds to cross the
02:25 - screen and that's great although real
02:28 - quick I think for the purposes of our
02:30 - testing I'm gonna go ahead and make it
02:32 - wrap around the screen so that we can
02:34 - see it keep going so if the rectangle is
02:38 - right actually let's let it move all the
02:40 - way off let's say if the left is greater
02:43 - than width then right equals zero okay
02:49 - so so we have our sprite moving and it's
02:52 - moving at the speed we want because it's
02:55 - moving a certain amount every frame but
02:58 - the problem is what happens if our frame
03:01 - rate changes imagine we have a really
03:04 - busy game with lots of sprites on the
03:06 - screen lots of activity going on and we
03:08 - start to get some lag in fact let's
03:12 - imagine we got a lot of leg and our
03:15 - frame our frame rate dropped to 30
03:18 - frames per second so that means we're
03:20 - still gonna be moving to pixels every
03:22 - frame but we're only moving 30 times per
03:26 - second and not 60 and now all of a
03:29 - sudden our speed is half of what it was
03:32 - we're taking ten seconds to cross the
03:34 - screen so if this was a bullet or it was
03:38 - a you know a rocket flying across the
03:40 - screen now suddenly it's traveling
03:42 - slower and it's taking longer to travel
03:44 - the same distance and this is not very
03:48 - good we want our objects in the world to
03:54 - travel at the speed we want and not be
03:57 - tied to the frame rate we want them to
03:59 - be independent of the frame rate and we
04:03 - can accomplish this by looking at how
04:05 - long the frame is taking now most game
04:08 - frameworks provide you some way of
04:11 - finding this out in the case of tie game
04:13 - when we do
04:16 - RFPs when we tick the clock to keep our
04:20 - timing of our loop to the FPS we wanted
04:24 - it returns us back a value and that
04:27 - value which we're gonna call DT or delta
04:30 - T which is what most game frameworks
04:32 - will call it is how much time the
04:35 - previous frame took all right if we're
04:37 - running at 60 frames per second that
04:39 - will be one sixtieth but if we start to
04:42 - get lag this number will change and in
04:45 - PI game this number is given to you in
04:48 - milliseconds so I'm gonna go ahead and
04:50 - just divide by a thousand so that we
04:54 - have it in seconds instead so now we
04:58 - have a delta time for how long the
05:03 - previous frame took and if we look back
05:07 - at our calculation that we did a minute
05:09 - ago we know that we wanted to travel at
05:13 - 120 pixels per second that's the speed
05:16 - we actually want our sprite to move at
05:18 - and notice this has nothing to do with
05:19 - frame it's just how many pixels to
05:21 - travel in one real second of time so
05:26 - that's what we want to set our speed to
05:28 - so when we update our sprite we're gonna
05:30 - pass it the DT from the game so it
05:34 - receives the DEET the delta time okay
05:38 - and Delta just stands for change if you
05:40 - haven't heard that term before Delta is
05:44 - the Greek symbol that looks like a
05:46 - little triangle and you just ants
05:48 - further change so this is the change in
05:49 - time since the last frame so we're gonna
05:52 - change our VX here and we're gonna make
05:53 - our VX be 120 right since that's what we
05:58 - want our speed to be and then we're
06:00 - gonna move at 120 times whatever the
06:07 - change in time was so again if this was
06:11 - if we're right now if we're going in at
06:14 - 60 frames per second then we're gonna
06:18 - see the same calculation we're gonna
06:19 - take that 120 and it's gonna be
06:22 - multiplied our mean sorry divided by or
06:24 - x 160th right it's gonna be multiplied
06:27 - by one sixtieth and get s2 so if we're
06:29 - running at 60
06:29 - frames-per-second will still be moving
06:31 - to pixels every frame but as soon as
06:33 - this number changes then the number of
06:37 - pixels per frame is going to change and
06:39 - we won't have to recalculate it the
06:41 - computer is going to do it for us
06:43 - so right now if we set this back to 60
06:46 - you'll see that we're taking five
06:49 - seconds to cross the screen same as we
06:53 - were before but now if we start
06:57 - experiencing lag and we drop to 30
06:59 - frames per second our sprite still takes
07:04 - five seconds to cross the screen and in
07:08 - fact if something really horrible
07:10 - happened and we dropped to ten frames
07:14 - per second still we're gonna take five
07:18 - seconds to cross now obviously the
07:20 - animation isn't as smooth anymore but
07:23 - that's okay if you're running a tenth
07:26 - frame ten frames per second this is
07:28 - what's going to happen but at least our
07:30 - sprite isn't now taking what six times
07:34 - five is thirty seconds across the screen
07:35 - right which would be a ridiculously slow
07:38 - bullet if this was a bullet so now we've
07:41 - made our movement of our sprite
07:43 - independent of the framerate so that's
07:49 - all there is to time-based vs. frame
07:52 - based movement you just keep track of
07:54 - how long it's been since the last frame
07:58 - happened and again most game frame works
08:01 - in one way or another we'll give you
08:04 - that amount of time and you use that to
08:07 - figure out how many pixels you should
08:10 - move for that particular frame and then
08:14 - everything will stay consistent you just
08:16 - set your speeds in pixels per second and
08:20 - everything will remain consistent so I
08:24 - hope this video was helpful and that if
08:25 - you were struggling to understand time
08:28 - based versus frame based movement
08:30 - sometimes the documentation out there
08:32 - can be a little hard to get the first
08:35 - time through but you should in most
08:38 - cases you want to use this in your games
08:41 - that you
08:42 - making if you liked this video please
08:45 - press the like button below and help
08:47 - others find it and if you haven't
08:49 - already think about going over to our
08:51 - patreon page and contributing a few
08:54 - dollars a month that would really help
08:56 - in producing the videos and keeping this
09:00 - channel going the videos will always be
09:03 - free and it's not required but it would
09:06 - of course be greatly appreciated
09:08 - thanks and I'll see you in the next
09:10 - video
09:18 - you

Cleaned transcript:

welcome back to another video on in depth topics in game dev this is a series where we talk about certain subjects that students may find a little bit confusing the first time around or haven't quite found the right explanation for this time we're gonna be talking about time based versus frame based movement which is how you ensure that the animation that's happening in your game happens at a consistent speed even if you start to experience lag as always these videos will be coded in Python but this is a totally languageindependent topic and whatever whatever language you're coding in or whatever game framework you're using this this lesson will apply just as well so in this video I want to talk a little bit about timing especially how it relates to movement so I've made a little program here where we have a sprite and the sprites gonna spawn on the lefthand edge of the screen and now I want to make this sprite move I want this sprite to just move to the right across the screen and I want it to take exactly 5 seconds to make that trip so how would I do that well if we look at a quick calculation here the screen is 600 pixels wide and I want the sprite to take 5 seconds so that means I wanted to move a hundred and 20 pixels every second but we don't just move 120 pixels wait a second and then move on to another hundred and twenty right we're moving we want to smooth animation so we want to move every frame and if we're running at 60 frames per second and we want to move 120 pixels every second that means we're gonna move two pixels every frame and if we move it exactly that speed it will take 5 seconds to cross the screen so that's easy enough to do we will give our sprite a velocity of two and we will just update it by moving the X by that velocity and that will make our sprite move so now our sprite is moving and it's taking five seconds to cross the screen and that's great although real quick I think for the purposes of our testing I'm gonna go ahead and make it wrap around the screen so that we can see it keep going so if the rectangle is right actually let's let it move all the way off let's say if the left is greater than width then right equals zero okay so so we have our sprite moving and it's moving at the speed we want because it's moving a certain amount every frame but the problem is what happens if our frame rate changes imagine we have a really busy game with lots of sprites on the screen lots of activity going on and we start to get some lag in fact let's imagine we got a lot of leg and our frame our frame rate dropped to 30 frames per second so that means we're still gonna be moving to pixels every frame but we're only moving 30 times per second and not 60 and now all of a sudden our speed is half of what it was we're taking ten seconds to cross the screen so if this was a bullet or it was a you know a rocket flying across the screen now suddenly it's traveling slower and it's taking longer to travel the same distance and this is not very good we want our objects in the world to travel at the speed we want and not be tied to the frame rate we want them to be independent of the frame rate and we can accomplish this by looking at how long the frame is taking now most game frameworks provide you some way of finding this out in the case of tie game when we do RFPs when we tick the clock to keep our timing of our loop to the FPS we wanted it returns us back a value and that value which we're gonna call DT or delta T which is what most game frameworks will call it is how much time the previous frame took all right if we're running at 60 frames per second that will be one sixtieth but if we start to get lag this number will change and in PI game this number is given to you in milliseconds so I'm gonna go ahead and just divide by a thousand so that we have it in seconds instead so now we have a delta time for how long the previous frame took and if we look back at our calculation that we did a minute ago we know that we wanted to travel at 120 pixels per second that's the speed we actually want our sprite to move at and notice this has nothing to do with frame it's just how many pixels to travel in one real second of time so that's what we want to set our speed to so when we update our sprite we're gonna pass it the DT from the game so it receives the DEET the delta time okay and Delta just stands for change if you haven't heard that term before Delta is the Greek symbol that looks like a little triangle and you just ants further change so this is the change in time since the last frame so we're gonna change our VX here and we're gonna make our VX be 120 right since that's what we want our speed to be and then we're gonna move at 120 times whatever the change in time was so again if this was if we're right now if we're going in at 60 frames per second then we're gonna see the same calculation we're gonna take that 120 and it's gonna be multiplied our mean sorry divided by or x 160th right it's gonna be multiplied by one sixtieth and get s2 so if we're running at 60 framespersecond will still be moving to pixels every frame but as soon as this number changes then the number of pixels per frame is going to change and we won't have to recalculate it the computer is going to do it for us so right now if we set this back to 60 you'll see that we're taking five seconds to cross the screen same as we were before but now if we start experiencing lag and we drop to 30 frames per second our sprite still takes five seconds to cross the screen and in fact if something really horrible happened and we dropped to ten frames per second still we're gonna take five seconds to cross now obviously the animation isn't as smooth anymore but that's okay if you're running a tenth frame ten frames per second this is what's going to happen but at least our sprite isn't now taking what six times five is thirty seconds across the screen right which would be a ridiculously slow bullet if this was a bullet so now we've made our movement of our sprite independent of the framerate so that's all there is to timebased vs. frame based movement you just keep track of how long it's been since the last frame happened and again most game frame works in one way or another we'll give you that amount of time and you use that to figure out how many pixels you should move for that particular frame and then everything will stay consistent you just set your speeds in pixels per second and everything will remain consistent so I hope this video was helpful and that if you were struggling to understand time based versus frame based movement sometimes the documentation out there can be a little hard to get the first time through but you should in most cases you want to use this in your games that you making if you liked this video please press the like button below and help others find it and if you haven't already think about going over to our patreon page and contributing a few dollars a month that would really help in producing the videos and keeping this channel going the videos will always be free and it's not required but it would of course be greatly appreciated thanks and I'll see you in the next video you
