With timestamps:

00:00 - welcome back to learning to code with
00:02 - Python today we'll learn about how to
00:05 - create simple animation in the last
00:10 - video we learned how to draw simple
00:11 - shapes on the canvas that we created in
00:14 - our window these four lines of code
00:16 - create the window that we're going to
00:18 - draw in the important settings here are
00:20 - the width and the height of the window
00:22 - that you want to create and then we
00:25 - learned how to draw simple shapes like
00:26 - ovals and rectangles and so on today
00:30 - let's look at how easy it is to make
00:32 - those shapes animated to start with
00:37 - let's draw a circle on the screen so
00:40 - we'll go back to our canvas create oval
00:42 - command right and let's draw it will
00:45 - draw it up in the corner 10 10 - 60 60
00:51 - so it will be 50 pixels wide and 50
00:53 - pixels tall and let's go ahead and fill
00:56 - it with a color so it looks a little bit
00:58 - more interesting okay now instead of
01:01 - just drawing that oval I'm actually
01:03 - going to assign it to a variable so once
01:07 - we create the oval this variable will
01:10 - point to that oval and we can do things
01:13 - with the variable alright let's try and
01:15 - make the ball move so we're going to use
01:17 - the canvas dot move command and that
01:21 - command needs three arguments three
01:23 - things need to go in the parentheses the
01:25 - first one is which object you want to
01:27 - move then a number for how many pixels
01:31 - in the X direction in the horizontal
01:33 - direction we'll put one and then the
01:37 - last one is how many pixels in the Y
01:39 - direction in the vertical direction
01:40 - we'll put zero okay so that should move
01:42 - the ball one pixel to the right now
01:47 - moving one pixel is going to be really
01:48 - hard to see so why don't we do it a
01:51 - bunch of times so we'll make a loop and
01:54 - we'll just count to 400 that's our
01:58 - window is 500 pixels wide moving 400
02:01 - pixels should be fine so this should
02:03 - move the ball one pixel at a time 400
02:06 - times
02:10 - so let's run it and see what happens
02:13 - there's nothing in my window and then
02:16 - the ball just jumped all the way to the
02:18 - right so why did that happen well
02:20 - anytime you use the Move command you
02:24 - need to tell the computer to re draw the
02:26 - things on the screen to update the
02:28 - pixels on the screen that we're looking
02:30 - at and you do that with the TK dot
02:32 - update command
02:33 - so this says after the ball moves draw
02:37 - the pixels in the new position and then
02:39 - and do it again and do it again so
02:41 - here's what that looks like now we have
02:44 - a nice smooth movement one pixel at a
02:47 - time now this may or may not look so
02:52 - smooth on your computer that's because
02:56 - it depends on how fast your computer is
02:58 - and all sorts of things about how your
03:00 - computer is set up this loop the
03:02 - computer is trying to do it as fast as
03:03 - it possibly can and different computers
03:07 - that might be a different amount of time
03:08 - so usually what we want to do is slow it
03:12 - down a little bit and sort of take a
03:15 - break in between each update of the
03:18 - screen you can think of it like a
03:20 - cartoon or a flip book if you've ever
03:22 - drawn one of those you draw a different
03:25 - picture on each page and then you flip
03:28 - the pages faster you flip the pages the
03:30 - faster the animation goes but that's
03:32 - speed how fast you're flipping the pages
03:34 - is called the frame rate and the best
03:38 - way for us to slow it down a little bit
03:41 - and make it consistent is to use the
03:44 - time dot sleep command and the time dot
03:47 - sleep command is just how many seconds
03:48 - to pause in between each frame of the
03:51 - animation we'll just put one 100th of a
03:54 - second small number just something to
03:56 - make it consistent and we do need to go
03:59 - up here and we need to import time okay
04:02 - now when you run it should look pretty
04:05 - similar might have smoothed out on your
04:08 - computer if you were seeing it move way
04:10 - too fast or kind of jerky
04:15 - now let's make our ball do something
04:16 - more interesting than just move a little
04:19 - bit to the right and then stop we'd like
04:23 - to make a ball that will bounce around
04:24 - the screen and just keep going
04:27 - alright so instead of a counting loop
04:28 - here what we really want to use is a
04:32 - forever loop a while loop so let's
04:35 - change this into while true and let's
04:40 - also go ahead and set some variables for
04:43 - how fast we want our ball to go okay so
04:46 - we can set an X speed and a Y speed and
04:53 - those will be what we'll use in the Move
04:56 - command okay
05:04 - so right now that's just going to move
05:08 - the ball at a diagonal like that and of
05:12 - course when it moves off the screen it's
05:15 - still going the Y is getting bigger and
05:17 - bigger and bigger and bigger so we need
05:19 - to tell the computer that we don't want
05:21 - it to go past the edge of the screen
05:22 - we'd like to see it bounce off the
05:24 - bottom before we do that let's talk a
05:28 - little bit about how things behave on
05:29 - the screen every object on the screen
05:33 - for example our ball has an imaginary
05:36 - box around it and you can think of it
05:39 - like this and that box has two important
05:43 - coordinates the upper left-hand corner
05:45 - and the bottom right-hand corner and
05:47 - these sort of tell where the box is on
05:52 - the screen and where the object is
05:54 - inside it so this would be an x one y
06:00 - one right and then this one over here
06:02 - would be X 2 comma Y 2 all right you
06:08 - could also think of it as the X 1 is the
06:11 - left-hand edge the Y 1 is the top the X
06:16 - 2 is the right-hand edge and the Y 2 is
06:20 - the bottom so if you think about that
06:24 - now we can see what we need to keep
06:27 - track of to tell the computer wins
06:29 - we want the ball to bounce so if the
06:31 - ball is moving in this direction and
06:33 - this is the edge of the screen we want
06:36 - the ball to stop when this right-hand
06:39 - edge is the same as the width of the
06:45 - screen all right when it gets to here we
06:48 - want to stop moving this way and we want
06:50 - to bounce and go back that way and we
06:53 - want to do the same thing with the other
06:55 - three sides of the window and here's an
07:00 - example of that so I have my ball and
07:02 - you see as it's moving around those four
07:06 - coordinates keep changing as I'm moving
07:09 - to the right the right hand coordinate
07:11 - is getting bigger and bigger and bigger
07:13 - and bigger and the width of my window is
07:16 - 800 so I want to bounce when that right
07:18 - hand coordinate
07:19 - hits 800 so this would be when I want to
07:23 - change speed and go back this way and if
07:25 - I was going down then I want the bottom
07:28 - and the bottom reaches the height I want
07:31 - to bounce or when the ball is moving up
07:34 - when it reaches zero the other top is
07:37 - equal to zero so that's what we want to
07:39 - do we want to ask the computer where is
07:42 - the ball check the four edges if it's
07:46 - reached in any of those four edges
07:47 - reverse direction okay so what we're
07:54 - going to do is after we move the ball
07:56 - we're going to check the coordinates and
07:58 - the command for that is canvas co-worker
08:04 - coordinates and then what do you want to
08:07 - know the coordinates of we want to know
08:08 - the coordinates of the ball and then I'm
08:10 - going to save that in this pause
08:12 - variable so now the pause variable looks
08:15 - like this it has these four coordinates
08:18 - in a list so since we start out moving
08:26 - to the right and down we're going to hit
08:30 - the bottom edge first so why don't we
08:32 - start with the bottom edge if pause now
08:36 - which one do we want to look at the
08:39 - bottom edge is this last one so this
08:42 - would be
08:43 - number zero one two three so we want to
08:47 - look at position three
08:49 - if position three is greater than or
08:54 - equal to the height of the window which
08:56 - is 400 then I want to stop moving down
09:00 - so I want my wide speed to become
09:03 - negative I want my Y to get smaller and
09:05 - smaller so I want to change the sign of
09:07 - Y speed so I can just say Y speed equals
09:11 - minus y speed and we just reverse
09:15 - direction so let's see what that does so
09:20 - we should bounce off the bottom edge now
09:21 - and then we're going to hit the top edge
09:25 - and not stop but we want to do the same
09:28 - thing if we hit the top edge we want to
09:30 - bounce on the top edge whoo go back to
09:33 - that list is position 1 and if that ever
09:38 - reaches 0 the top of the screen we also
09:40 - want to bounce so that should take care
09:44 - of the top and the bottom
09:53 - now we just need to do the same thing
09:55 - for the left and the right and you see
09:59 - the left is position zero and the right
10:02 - is position two
10:04 - so we will say if position 2 is ever
10:11 - greater than equal to the width of the
10:13 - screen which is 500 in this case or
10:16 - pause zero is less than or equal to zero
10:19 - then we want the x-direction to reverse
10:24 - and that should take care of all of the
10:32 - four walls
10:44 - and that should all work fine if we
10:46 - change the speeds so let's say we wanted
10:48 - to go a little bit faster and we'll make
10:52 - this one five so now we're removing more
11:00 - pixels in each move so it looks like our
11:03 - ball is going faster but we're still
11:05 - going to bounce on all the edges alright
11:10 - we're just about out of time but I want
11:12 - to cover one more thing and that is what
11:14 - if we decide we want to make our window
11:16 - bigger let's say I wanted to make my
11:18 - window 800 pixels wide and 600 pixels
11:22 - tall watch what happens to my ball so
11:28 - we're still bouncing when the
11:29 - x-coordinate reaches 500 so if I change
11:35 - the width and height I've got to go down
11:36 - here and change this one to 600 and this
11:41 - one to 800 and then the next time I
11:44 - change I have to change it in both
11:45 - places it's kind of annoying to have to
11:47 - change it over and over again well what
11:49 - program is do to solve that problem is
11:52 - create something called a constant we're
11:56 - going to make a constant called width
11:57 - that's 800 and we're going to make a
11:59 - constant called height that's 600 okay
12:03 - so these are just special variables that
12:05 - we put in all caps to indicate that
12:07 - they're constants they're not things
12:09 - that we're going to change over time but
12:12 - it's something we want to use in more
12:13 - than one place so now instead of saying
12:15 - I want my width to be 800 I want my
12:17 - width to be whatever width is set to and
12:19 - I want my height to be set to whatever
12:22 - height is set to and I want the ball to
12:25 - bounce at those same values okay so that
12:34 - way if I ever want to change how big my
12:36 - window is I can change it in one place
12:37 - up here at the top and everywhere else
12:40 - it will use that value correctly so now
12:45 - I have the right behavior okay
12:51 - next time what I'd like you to think
12:53 - about is what if we wanted to add a
12:55 - second ball to the screen what would we
12:59 - have to do think about it give it a try
13:02 - and next time we'll talk about the hard
13:06 - way to do it and then we'll go over an
13:09 - easier way to do it good luck see you
13:14 - next time

Cleaned transcript:

welcome back to learning to code with Python today we'll learn about how to create simple animation in the last video we learned how to draw simple shapes on the canvas that we created in our window these four lines of code create the window that we're going to draw in the important settings here are the width and the height of the window that you want to create and then we learned how to draw simple shapes like ovals and rectangles and so on today let's look at how easy it is to make those shapes animated to start with let's draw a circle on the screen so we'll go back to our canvas create oval command right and let's draw it will draw it up in the corner 10 10 60 60 so it will be 50 pixels wide and 50 pixels tall and let's go ahead and fill it with a color so it looks a little bit more interesting okay now instead of just drawing that oval I'm actually going to assign it to a variable so once we create the oval this variable will point to that oval and we can do things with the variable alright let's try and make the ball move so we're going to use the canvas dot move command and that command needs three arguments three things need to go in the parentheses the first one is which object you want to move then a number for how many pixels in the X direction in the horizontal direction we'll put one and then the last one is how many pixels in the Y direction in the vertical direction we'll put zero okay so that should move the ball one pixel to the right now moving one pixel is going to be really hard to see so why don't we do it a bunch of times so we'll make a loop and we'll just count to 400 that's our window is 500 pixels wide moving 400 pixels should be fine so this should move the ball one pixel at a time 400 times so let's run it and see what happens there's nothing in my window and then the ball just jumped all the way to the right so why did that happen well anytime you use the Move command you need to tell the computer to re draw the things on the screen to update the pixels on the screen that we're looking at and you do that with the TK dot update command so this says after the ball moves draw the pixels in the new position and then and do it again and do it again so here's what that looks like now we have a nice smooth movement one pixel at a time now this may or may not look so smooth on your computer that's because it depends on how fast your computer is and all sorts of things about how your computer is set up this loop the computer is trying to do it as fast as it possibly can and different computers that might be a different amount of time so usually what we want to do is slow it down a little bit and sort of take a break in between each update of the screen you can think of it like a cartoon or a flip book if you've ever drawn one of those you draw a different picture on each page and then you flip the pages faster you flip the pages the faster the animation goes but that's speed how fast you're flipping the pages is called the frame rate and the best way for us to slow it down a little bit and make it consistent is to use the time dot sleep command and the time dot sleep command is just how many seconds to pause in between each frame of the animation we'll just put one 100th of a second small number just something to make it consistent and we do need to go up here and we need to import time okay now when you run it should look pretty similar might have smoothed out on your computer if you were seeing it move way too fast or kind of jerky now let's make our ball do something more interesting than just move a little bit to the right and then stop we'd like to make a ball that will bounce around the screen and just keep going alright so instead of a counting loop here what we really want to use is a forever loop a while loop so let's change this into while true and let's also go ahead and set some variables for how fast we want our ball to go okay so we can set an X speed and a Y speed and those will be what we'll use in the Move command okay so right now that's just going to move the ball at a diagonal like that and of course when it moves off the screen it's still going the Y is getting bigger and bigger and bigger and bigger so we need to tell the computer that we don't want it to go past the edge of the screen we'd like to see it bounce off the bottom before we do that let's talk a little bit about how things behave on the screen every object on the screen for example our ball has an imaginary box around it and you can think of it like this and that box has two important coordinates the upper lefthand corner and the bottom righthand corner and these sort of tell where the box is on the screen and where the object is inside it so this would be an x one y one right and then this one over here would be X 2 comma Y 2 all right you could also think of it as the X 1 is the lefthand edge the Y 1 is the top the X 2 is the righthand edge and the Y 2 is the bottom so if you think about that now we can see what we need to keep track of to tell the computer wins we want the ball to bounce so if the ball is moving in this direction and this is the edge of the screen we want the ball to stop when this righthand edge is the same as the width of the screen all right when it gets to here we want to stop moving this way and we want to bounce and go back that way and we want to do the same thing with the other three sides of the window and here's an example of that so I have my ball and you see as it's moving around those four coordinates keep changing as I'm moving to the right the right hand coordinate is getting bigger and bigger and bigger and bigger and the width of my window is 800 so I want to bounce when that right hand coordinate hits 800 so this would be when I want to change speed and go back this way and if I was going down then I want the bottom and the bottom reaches the height I want to bounce or when the ball is moving up when it reaches zero the other top is equal to zero so that's what we want to do we want to ask the computer where is the ball check the four edges if it's reached in any of those four edges reverse direction okay so what we're going to do is after we move the ball we're going to check the coordinates and the command for that is canvas coworker coordinates and then what do you want to know the coordinates of we want to know the coordinates of the ball and then I'm going to save that in this pause variable so now the pause variable looks like this it has these four coordinates in a list so since we start out moving to the right and down we're going to hit the bottom edge first so why don't we start with the bottom edge if pause now which one do we want to look at the bottom edge is this last one so this would be number zero one two three so we want to look at position three if position three is greater than or equal to the height of the window which is 400 then I want to stop moving down so I want my wide speed to become negative I want my Y to get smaller and smaller so I want to change the sign of Y speed so I can just say Y speed equals minus y speed and we just reverse direction so let's see what that does so we should bounce off the bottom edge now and then we're going to hit the top edge and not stop but we want to do the same thing if we hit the top edge we want to bounce on the top edge whoo go back to that list is position 1 and if that ever reaches 0 the top of the screen we also want to bounce so that should take care of the top and the bottom now we just need to do the same thing for the left and the right and you see the left is position zero and the right is position two so we will say if position 2 is ever greater than equal to the width of the screen which is 500 in this case or pause zero is less than or equal to zero then we want the xdirection to reverse and that should take care of all of the four walls and that should all work fine if we change the speeds so let's say we wanted to go a little bit faster and we'll make this one five so now we're removing more pixels in each move so it looks like our ball is going faster but we're still going to bounce on all the edges alright we're just about out of time but I want to cover one more thing and that is what if we decide we want to make our window bigger let's say I wanted to make my window 800 pixels wide and 600 pixels tall watch what happens to my ball so we're still bouncing when the xcoordinate reaches 500 so if I change the width and height I've got to go down here and change this one to 600 and this one to 800 and then the next time I change I have to change it in both places it's kind of annoying to have to change it over and over again well what program is do to solve that problem is create something called a constant we're going to make a constant called width that's 800 and we're going to make a constant called height that's 600 okay so these are just special variables that we put in all caps to indicate that they're constants they're not things that we're going to change over time but it's something we want to use in more than one place so now instead of saying I want my width to be 800 I want my width to be whatever width is set to and I want my height to be set to whatever height is set to and I want the ball to bounce at those same values okay so that way if I ever want to change how big my window is I can change it in one place up here at the top and everywhere else it will use that value correctly so now I have the right behavior okay next time what I'd like you to think about is what if we wanted to add a second ball to the screen what would we have to do think about it give it a try and next time we'll talk about the hard way to do it and then we'll go over an easier way to do it good luck see you next time
