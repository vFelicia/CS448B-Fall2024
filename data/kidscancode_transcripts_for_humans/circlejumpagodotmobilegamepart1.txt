With timestamps:

00:00 - welcome this is a nugudo game
00:02 - development series where we're making a
00:04 - small mobile game from end to end I'm
00:07 - calling the game circle jump for now
00:09 - we'll see if the name changes by the
00:11 - time we finish it up and put it up on
00:14 - the Play Store but regardless we can go
00:16 - ahead and get started right now in this
00:18 - series we're gonna be making a small
00:19 - mobile game demonstrating some of the
00:21 - things you need to do for that how to
00:23 - export it and so on
00:25 - here I'm showing you a prototype that I
00:27 - made up when I was testing the idea out
00:30 - and so the idea is when you play you
00:33 - start by being attached to these circles
00:36 - and when you tap the screen you fly out
00:39 - and you try and like jump on the next
00:41 - one and if you miss you die if you want
00:43 - to follow along go ahead and download
00:45 - the assets from the link below in the
00:47 - description you can also find a text
00:50 - version of this tutorial there and
00:52 - create yourself a new Godot project and
00:55 - we'll get started so let's start with
00:58 - our project settings we're gonna go to
01:00 - the window settings and we want to set
01:04 - the width and height I'm going to use
01:07 - 480 by 854 which is maybe a cellphone
01:13 - proportion obviously there's lots of
01:15 - phone screens out there so we're going
01:17 - to need to be able to scale we're going
01:20 - to set the orientation to portrait so
01:24 - it'll know to be in that direction when
01:25 - we're on a mobile device and the stretch
01:28 - mode I'm gonna set to 2d with an aspect
01:31 - keep and we'll see how that comes into
01:34 - play later it doesn't really have a lot
01:37 - of impact right now but the other thing
01:39 - we want to do is in the pointing section
01:42 - we want to make sure we check emulate
01:45 - touch from Mouse our game is going to be
01:48 - controlled by touching on the screen so
01:50 - this way when we're playing on the PC or
01:53 - in the editor we can click the mouse and
01:56 - that'll send a touch event to the game
01:59 - so we can process it the same way we
02:01 - don't have to write different code for a
02:02 - mouse in touch the first game object
02:04 - we're going to start with is the player
02:06 - the jumper the thing that'll go from
02:08 - circle to circle and we're gonna use an
02:11 - area 2d for this
02:12 - we just need to detect when it runs into
02:15 - a circle and we're going to add a sprite
02:19 - to that we're gonna add a collision
02:23 - shape 2d to that and we're also going to
02:27 - add a visibility notifier because
02:30 - that'll do is let us know when it X is
02:34 - the screen because you missed all right
02:36 - that'll be the GAMEOVER trigger now in
02:40 - the assets folder we've got some images
02:42 - I'm gonna use jumper dot PNG so throw
02:46 - that into the sprite and it's drawn
02:50 - pointing up so I'm gonna rotate the
02:53 - sprite by 90 degrees so that my zero
02:58 - angle will match up before I save it
03:02 - let's name this jumper and I'm gonna put
03:06 - it in the objects folder okay now you'll
03:11 - notice that the image is just a flat
03:15 - white and this is true of all the other
03:17 - images as well we're going to use a
03:19 - shader to set the colors so that we can
03:23 - have color schemes and changing colors
03:26 - and things like that very easily by just
03:28 - replacing the white pixels with a
03:30 - whatever color we want so we'll come
03:32 - back to that in a few but let's do
03:35 - collision shape actually since it's a
03:37 - triangle I'm gonna change this I'm going
03:40 - to use a collision polygon be a little
03:43 - easier to draw because I can just click
03:46 - click click and click and get a
03:51 - triangular collision shape all right so
03:56 - now we've got our player pretty much
04:01 - configured let's add a script to it and
04:05 - we'll start adding some code we're gonna
04:08 - have a velocity that's gonna be how fast
04:14 - it moves when you're moving in between
04:16 - circles I'm gonna put just a 100 here
04:19 - for testing at the beginning this isn't
04:23 - gonna matter later
04:23 - but for right now and then the jump
04:26 - speed is gonna be what we how fast we go
04:29 - when we hit the jump button and then
04:33 - target equals no target is going to be
04:37 - the circle that we're attached to okay
04:40 - we want to jump when we touch the screen
04:43 - so we're gonna capture unhandled into it
04:46 - and if we have a target we can only jump
04:50 - when we're on a circle and if the event
04:53 - is input event screen touch and event
04:59 - dot pressed because we only care about
05:05 - the touch not the release if it is then
05:08 - we'll call our jump method and now our
05:12 - jump method is going to set our target
05:17 - to know we've left the circle we're no
05:19 - longer attached to one and let's set our
05:22 - velocity equal to the transform X which
05:27 - is the direction that we're pointing in
05:30 - time's the jump speed and then the other
05:36 - thing we need to do is we need to detect
05:38 - when we contact a circle so we're going
05:40 - to connect the area entered signal
05:45 - connect that up and now when we enter an
05:51 - area the target will become that area
05:53 - and the velocity will become zero
05:59 - because we are not going to be moving on
06:03 - our own anymore and that should do it
06:05 - for the code one more thing when we're
06:10 - on the circle we want to be rotating so
06:13 - I'm gonna add in our process that if we
06:17 - have a target then our transform should
06:23 - be set equal to the circles rotating
06:26 - position the circles gonna have an orbit
06:28 - position on it so the targets four bit
06:31 - position
06:34 - dot global transform so we want to be
06:37 - matching that otherwise if we are not
06:41 - attached to a circle then we have a
06:43 - velocity so we should velocity times
06:50 - Delta all right so now let's add that
06:54 - color shader to the sprite so that we
06:57 - can affect its color I hide the
06:59 - collision shape so we can see it and so
07:01 - what we're going to do is we're going to
07:03 - add a material onto our sprite a new
07:07 - shader material we click on that expands
07:11 - the panel and we add a new shader we
07:14 - click on that and now we've got our
07:16 - empty shader editor and the shader code
07:19 - here is gonna be pretty pretty short
07:22 - pretty straightforward
07:23 - we always have to start with what
07:25 - declaring what type of shader it is so
07:28 - this is a canvas item that's for 2d
07:31 - shaders and we want to pass in a color
07:35 - and you do that by declaring a uniform
07:38 - so this is going to be a vector I'll
07:44 - just name it color and we want it to
07:46 - hint with a color chooser and what that
07:50 - will do is you see over here shader pram
07:52 - just appeared and now I have a color
07:54 - chooser where I can set the value of
07:57 - that variable
07:59 - and so now we want to take that value
08:02 - and add it to our fragment shader
08:09 - fragment shader is going to run on every
08:12 - pixel in the texture so we want to set
08:16 - its color RGB equal to the color RGB so
08:24 - I take the color we've chosen but if we
08:26 - just did that you can see it just
08:28 - updated it changes the entire sprites
08:29 - texture to that color we want to
08:32 - preserve the transparency so the a of
08:36 - the color the Alpha value should be
08:39 - pulled from the texture that's passed in
08:46 - UV which is the coordinates dot a and
08:50 - now we'll have a nice change to our
08:54 - texture and we can go in here and we can
08:57 - change whatever color we want our
09:00 - triangle to be now this is a useful
09:02 - shader that we're going to want to reuse
09:04 - on our other objects so over here in the
09:07 - shader drop-down let's choose save and
09:09 - we'll put that in the objects folder and
09:12 - we'll call this color shader and that
09:16 - way we can reuse that easily without
09:17 - having to type it back in all right now
09:19 - let's start making our circle we're also
09:21 - going to use an area 2d for this it's
09:25 - gonna be our circle object we're gonna
09:30 - add a sprite we're going to add a
09:32 - collision shape we're going to also add
09:38 - a node 2d and this node 2d is going to
09:45 - be our pivot for the rotation and
09:51 - underneath it is going to be our this is
09:55 - the orbit position and so let's see how
10:00 - that works so down here I'm going to use
10:02 - the circle shape here there's our circle
10:05 - and the collision shape is going to be a
10:10 - circular collision shape we
10:13 - my match now doesn't really matter at
10:16 - this point because we ROCK actually
10:17 - encode going to allow this circle to be
10:22 - scaled so we're gonna scale the texture
10:24 - and make the collision shape you know
10:27 - the right size to match so that doesn't
10:28 - really matter right now and then our
10:30 - pivot is there in our orbit position
10:32 - also is going to be set by code based on
10:35 - how big the circle is so right now just
10:38 - as an example if the position was 100
10:42 - actually for this size probably 150 so
10:46 - if that's the orbit position now when
10:48 - the pivot rotates you know the orbit
10:51 - position just circles around the edge
10:53 - and that's going to be where our player
10:56 - jumper gets stuck while it's on the
10:59 - circle is just going to constantly
11:01 - rotate around ok let's save this in the
11:07 - objects folder as well or two objects
11:10 - that we have and we're going to add the
11:14 - shader to our sprite so our sprite needs
11:17 - a material shader material as well and
11:20 - we will just say load and choose that
11:24 - color shader that we picked and now in
11:27 - the shader program we can pick whatever
11:29 - color we want for our circle ok let's
11:33 - add our script to this circle and what
11:36 - we want the circle to do is I'm going to
11:40 - make a variable for orbit position it's
11:45 - more convenient than typing in that long
11:48 - name and we're also going to have a
11:51 - radius this is how big we want the
11:54 - circle to be and we're also going to
11:57 - have a rotation speed which for now we
12:01 - will set to PI and this is in radians of
12:03 - course and in ready I'm going to call
12:07 - our init function so we can test we'll
12:09 - get rid of this part later so when we
12:12 - initialize the circle we can pass it a
12:17 - radius optionally if we don't we'll use
12:20 - the already declared radius
12:24 - and so we use that we use that to set
12:31 - our radius and now that we have that we
12:34 - can take our collision shape to these
12:37 - shape and duplicate it right because we
12:44 - don't want to set the collision size on
12:48 - every circle on the screen at the same
12:49 - time right only we want it to be unique
12:51 - to each one this is equivalent to
12:54 - choosing make unique in the inspector
12:57 - and then we're gonna set that collision
13:00 - shapes radius equal to the radius we
13:04 - chose now we need to scale the sprite as
13:07 - well so right now the image we can get
13:10 - the image size from the sprite its size
13:15 - I'm just gonna use dot X its square so
13:18 - it doesn't really matter and divided by
13:20 - two that's half the size and then we'll
13:23 - set the sprites scale by using 1 1 is
13:32 - the unscaled value and we want to just
13:35 - scale it by the ratio of radius to image
13:39 - size and then the last thing we need to
13:42 - do is we need to set the orbit position
13:44 - X equal to position X equal to the
13:50 - radius plus some margin I'm going to
13:56 - just use 25 for right now we're gonna
13:57 - see how that works and then we'll tweak
14:00 - that and the other only other thing that
14:02 - the circle needs to do is it needs to
14:04 - rotate so in the process function we're
14:07 - going to tell the pivot rotation to
14:11 - increase by rotation speed times Delta
14:15 - so it will be rotating so that whenever
14:17 - the player gets attached it will rotate
14:19 - with it all right so let's test this out
14:22 - real quick we'll turn on visible
14:24 - collision shapes so we can make sure our
14:26 - shape is being set and there's the size
14:30 - of our circle and our collision shape
14:32 - looks like it matches we can just test
14:34 - this out real quick by trying a
14:35 - different number scale it to 5
14:38 - and you can see the collision shapes
14:40 - scaled as well if we went really small
14:45 - I'm gonna have a tiny little circle up
14:48 - here in the corner
14:48 - okay so that's gonna be it for our
14:52 - circle and now we're ready to try it out
14:55 - by making a main scene that's going to
14:58 - combine the two so I'm just gonna use a
15:00 - plane node for this it just needs to be
15:02 - a container it's gonna hold everything
15:04 - else and I want this in the main folder
15:10 - and let's imp let's instance a jumper
15:13 - and let's instance a circle
15:16 - now let's I'm still on rotate mode all
15:21 - right let's put the circle over here and
15:24 - put the jumper right here and when we
15:26 - run it we should see our jumper get onto
15:32 - the circle and when we click the screen
15:34 - we fly off perfect that's where we want
15:37 - to be for our first part we have the
15:40 - main components put together and in the
15:43 - next part we can start making multiple
15:45 - circles and doing the jumping from
15:47 - circle to circle and so on thanks for
15:50 - watching and I'll see you next time
15:58 - you

Cleaned transcript:

welcome this is a nugudo game development series where we're making a small mobile game from end to end I'm calling the game circle jump for now we'll see if the name changes by the time we finish it up and put it up on the Play Store but regardless we can go ahead and get started right now in this series we're gonna be making a small mobile game demonstrating some of the things you need to do for that how to export it and so on here I'm showing you a prototype that I made up when I was testing the idea out and so the idea is when you play you start by being attached to these circles and when you tap the screen you fly out and you try and like jump on the next one and if you miss you die if you want to follow along go ahead and download the assets from the link below in the description you can also find a text version of this tutorial there and create yourself a new Godot project and we'll get started so let's start with our project settings we're gonna go to the window settings and we want to set the width and height I'm going to use 480 by 854 which is maybe a cellphone proportion obviously there's lots of phone screens out there so we're going to need to be able to scale we're going to set the orientation to portrait so it'll know to be in that direction when we're on a mobile device and the stretch mode I'm gonna set to 2d with an aspect keep and we'll see how that comes into play later it doesn't really have a lot of impact right now but the other thing we want to do is in the pointing section we want to make sure we check emulate touch from Mouse our game is going to be controlled by touching on the screen so this way when we're playing on the PC or in the editor we can click the mouse and that'll send a touch event to the game so we can process it the same way we don't have to write different code for a mouse in touch the first game object we're going to start with is the player the jumper the thing that'll go from circle to circle and we're gonna use an area 2d for this we just need to detect when it runs into a circle and we're going to add a sprite to that we're gonna add a collision shape 2d to that and we're also going to add a visibility notifier because that'll do is let us know when it X is the screen because you missed all right that'll be the GAMEOVER trigger now in the assets folder we've got some images I'm gonna use jumper dot PNG so throw that into the sprite and it's drawn pointing up so I'm gonna rotate the sprite by 90 degrees so that my zero angle will match up before I save it let's name this jumper and I'm gonna put it in the objects folder okay now you'll notice that the image is just a flat white and this is true of all the other images as well we're going to use a shader to set the colors so that we can have color schemes and changing colors and things like that very easily by just replacing the white pixels with a whatever color we want so we'll come back to that in a few but let's do collision shape actually since it's a triangle I'm gonna change this I'm going to use a collision polygon be a little easier to draw because I can just click click click and click and get a triangular collision shape all right so now we've got our player pretty much configured let's add a script to it and we'll start adding some code we're gonna have a velocity that's gonna be how fast it moves when you're moving in between circles I'm gonna put just a 100 here for testing at the beginning this isn't gonna matter later but for right now and then the jump speed is gonna be what we how fast we go when we hit the jump button and then target equals no target is going to be the circle that we're attached to okay we want to jump when we touch the screen so we're gonna capture unhandled into it and if we have a target we can only jump when we're on a circle and if the event is input event screen touch and event dot pressed because we only care about the touch not the release if it is then we'll call our jump method and now our jump method is going to set our target to know we've left the circle we're no longer attached to one and let's set our velocity equal to the transform X which is the direction that we're pointing in time's the jump speed and then the other thing we need to do is we need to detect when we contact a circle so we're going to connect the area entered signal connect that up and now when we enter an area the target will become that area and the velocity will become zero because we are not going to be moving on our own anymore and that should do it for the code one more thing when we're on the circle we want to be rotating so I'm gonna add in our process that if we have a target then our transform should be set equal to the circles rotating position the circles gonna have an orbit position on it so the targets four bit position dot global transform so we want to be matching that otherwise if we are not attached to a circle then we have a velocity so we should velocity times Delta all right so now let's add that color shader to the sprite so that we can affect its color I hide the collision shape so we can see it and so what we're going to do is we're going to add a material onto our sprite a new shader material we click on that expands the panel and we add a new shader we click on that and now we've got our empty shader editor and the shader code here is gonna be pretty pretty short pretty straightforward we always have to start with what declaring what type of shader it is so this is a canvas item that's for 2d shaders and we want to pass in a color and you do that by declaring a uniform so this is going to be a vector I'll just name it color and we want it to hint with a color chooser and what that will do is you see over here shader pram just appeared and now I have a color chooser where I can set the value of that variable and so now we want to take that value and add it to our fragment shader fragment shader is going to run on every pixel in the texture so we want to set its color RGB equal to the color RGB so I take the color we've chosen but if we just did that you can see it just updated it changes the entire sprites texture to that color we want to preserve the transparency so the a of the color the Alpha value should be pulled from the texture that's passed in UV which is the coordinates dot a and now we'll have a nice change to our texture and we can go in here and we can change whatever color we want our triangle to be now this is a useful shader that we're going to want to reuse on our other objects so over here in the shader dropdown let's choose save and we'll put that in the objects folder and we'll call this color shader and that way we can reuse that easily without having to type it back in all right now let's start making our circle we're also going to use an area 2d for this it's gonna be our circle object we're gonna add a sprite we're going to add a collision shape we're going to also add a node 2d and this node 2d is going to be our pivot for the rotation and underneath it is going to be our this is the orbit position and so let's see how that works so down here I'm going to use the circle shape here there's our circle and the collision shape is going to be a circular collision shape we my match now doesn't really matter at this point because we ROCK actually encode going to allow this circle to be scaled so we're gonna scale the texture and make the collision shape you know the right size to match so that doesn't really matter right now and then our pivot is there in our orbit position also is going to be set by code based on how big the circle is so right now just as an example if the position was 100 actually for this size probably 150 so if that's the orbit position now when the pivot rotates you know the orbit position just circles around the edge and that's going to be where our player jumper gets stuck while it's on the circle is just going to constantly rotate around ok let's save this in the objects folder as well or two objects that we have and we're going to add the shader to our sprite so our sprite needs a material shader material as well and we will just say load and choose that color shader that we picked and now in the shader program we can pick whatever color we want for our circle ok let's add our script to this circle and what we want the circle to do is I'm going to make a variable for orbit position it's more convenient than typing in that long name and we're also going to have a radius this is how big we want the circle to be and we're also going to have a rotation speed which for now we will set to PI and this is in radians of course and in ready I'm going to call our init function so we can test we'll get rid of this part later so when we initialize the circle we can pass it a radius optionally if we don't we'll use the already declared radius and so we use that we use that to set our radius and now that we have that we can take our collision shape to these shape and duplicate it right because we don't want to set the collision size on every circle on the screen at the same time right only we want it to be unique to each one this is equivalent to choosing make unique in the inspector and then we're gonna set that collision shapes radius equal to the radius we chose now we need to scale the sprite as well so right now the image we can get the image size from the sprite its size I'm just gonna use dot X its square so it doesn't really matter and divided by two that's half the size and then we'll set the sprites scale by using 1 1 is the unscaled value and we want to just scale it by the ratio of radius to image size and then the last thing we need to do is we need to set the orbit position X equal to position X equal to the radius plus some margin I'm going to just use 25 for right now we're gonna see how that works and then we'll tweak that and the other only other thing that the circle needs to do is it needs to rotate so in the process function we're going to tell the pivot rotation to increase by rotation speed times Delta so it will be rotating so that whenever the player gets attached it will rotate with it all right so let's test this out real quick we'll turn on visible collision shapes so we can make sure our shape is being set and there's the size of our circle and our collision shape looks like it matches we can just test this out real quick by trying a different number scale it to 5 and you can see the collision shapes scaled as well if we went really small I'm gonna have a tiny little circle up here in the corner okay so that's gonna be it for our circle and now we're ready to try it out by making a main scene that's going to combine the two so I'm just gonna use a plane node for this it just needs to be a container it's gonna hold everything else and I want this in the main folder and let's imp let's instance a jumper and let's instance a circle now let's I'm still on rotate mode all right let's put the circle over here and put the jumper right here and when we run it we should see our jumper get onto the circle and when we click the screen we fly off perfect that's where we want to be for our first part we have the main components put together and in the next part we can start making multiple circles and doing the jumping from circle to circle and so on thanks for watching and I'll see you next time you
