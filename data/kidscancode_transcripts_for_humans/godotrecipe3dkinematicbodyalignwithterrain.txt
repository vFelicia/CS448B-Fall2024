With timestamps:

00:00 - welcome back to another good recipe in
00:02 - this video we're going to take the
00:04 - three-d kinematic body that we did in a
00:08 - previous recipe which you can see the
00:10 - link for below and we're gonna learn how
00:12 - to align it with a surface so that can
00:15 - climb up hills and drive over terrain
00:18 - smoothly to create my terrain I've
00:22 - downloaded the modular terrain pack
00:24 - which you can find on hgo again I'll put
00:27 - the link below and this is a path has
00:30 - all sorts of terrain models in it for a
00:34 - lot of different things I'm not gonna be
00:36 - using most of this for this demo but you
00:39 - know it lets you create a lot of a lot
00:42 - of different environments and they're
00:44 - modular so it's basically broken up into
00:46 - pieces that you kind of snap together
00:48 - like Legos so so I drop those into my
00:53 - project and I've used them to create a
00:56 - little bit of terrain and so I want my
00:58 - tank to be able to drive you know climb
01:01 - up this hill and drive around just like
01:04 - it does on the flat surface okay so if
01:07 - we try it out with our tank as it exists
01:10 - with the code to drive around you'll see
01:13 - they'll be a few problems one is when we
01:15 - climb up the slopes our tank doesn't
01:18 - rotate so it looks like it is floating
01:21 - in air if you're off the side right on a
01:25 - corner like this or something right the
01:27 - other problem we have or another problem
01:30 - we have is that if you stop moving on
01:33 - your way up a slope you get a little
01:35 - bounce if you can see that and because
01:40 - the the Y velocity remains and lifts us
01:45 - up off the slope like that and then the
01:49 - last one is that if I remain still with
01:51 - no input I'm slowly sliding down the
01:55 - slope so these are the things we need to
01:57 - address to get the tank movement to look
02:02 - better when dealing with terrain so to
02:06 - begin with we could add the
02:11 - stop on the slope parameter here to move
02:13 - in slide that's not going to stop our
02:16 - bouncing for that we're going to need to
02:19 - change to move and slide with snap and
02:22 - what that'll let us do is snap to the
02:24 - surface we've got to change the
02:26 - parameters a little bit we give it our
02:27 - velocity then we need to give it the
02:29 - snap vector and we're gonna use vector
02:31 - three dot down and we'll multiply it by
02:36 - two to make it two units long and then
02:39 - vector three dot up is still our up
02:42 - vector and then true for stop on slope
02:44 - so now that'll take care of some of that
02:48 - incorrect movement all right when I stop
02:52 - on the slope
02:53 - I don't bounce and when I let go of it
02:56 - I'm not sliding down the slope okay so
03:01 - that takes care of the keeping the body
03:05 - attached to the slope so in order to
03:08 - orient our tank with the terrain we need
03:11 - to consider the surface normal and what
03:15 - that means is on every mesh there are
03:18 - faces and since this is low poly terrain
03:21 - meaning low number of polygons we can
03:24 - easily see the faces this will work on
03:26 - high poly terrain as well but this makes
03:29 - it easier for us to see a little bit so
03:31 - you see on this slope there's one face
03:33 - here there's one face here there's a
03:35 - small face here and then there's the
03:37 - flat one on the top right and each face
03:40 - of a mesh has a normal which is a vector
03:44 - a normal vector and a unit vector or the
03:47 - same thing so it's a unit length one
03:51 - length
03:51 - vector that's pointing perpendicularly
03:54 - out of the surface and it helps you
03:57 - understand which way the surface is
03:59 - facing right so this one's gonna have
04:00 - one pointing out diagonally like this
04:02 - this one will be at a steeper angle the
04:05 - one on the ground points straight up
04:07 - right and so when you collide with the
04:10 - collision mesh of this terrain you can
04:13 - get the normal of the mesh where you
04:17 - collided and we want to take that normal
04:20 - and use that to set our tanks
04:22 - direction as well now our tank has a
04:28 - make sure we're in local mode right our
04:31 - tank has a local transform and that
04:34 - controls its orientation right and the
04:37 - normal of the slope where we hit is what
04:40 - we want the tanks Y basis to be all
04:44 - right so if it's going up a hill it
04:47 - needs to I'm rotating the head if it
04:50 - hits if it hits a hill and starts going
04:52 - over we need to rotate this Y vector so
04:56 - that the Y vector matches the normal of
04:58 - the slope and if it's going to the side
05:01 - you know it'll be tilted and so on so in
05:04 - order to do this we're going to need to
05:06 - understand a vector operation called the
05:09 - cross product so here I have two vectors
05:11 - that are located in space and I want to
05:15 - take the cross product of these two
05:16 - vectors and when I do I get this alright
05:20 - so the cross product of two vectors is a
05:23 - third vector that is perpendicular to
05:26 - both of them and it's length is actually
05:30 - proportional to the angle between them
05:32 - so you see if I rotate the X vector as
05:36 - it gets closer and closer to the green
05:39 - vector the cross product gets shorter as
05:42 - it gets farther away again see I'm on
05:45 - the other side it's now extending in the
05:47 - opposite direction and and so on so a
05:52 - cross product with what you really need
05:54 - to remember is a cross product gives you
05:56 - a vector that's perpendicular to the two
06:00 - vectors that you crossed now we're gonna
06:03 - use that to get our new orientation of
06:06 - three perpendicular axes for our tank
06:10 - okay
06:10 - so here's another example so we have our
06:13 - tank with its transform basis of the
06:18 - three vectors as it's sitting flat on
06:21 - the ground and we've collided with a
06:24 - slope and this gray vector represents
06:26 - the normal of that slope so we need to
06:30 - rotate this tank so that this green
06:32 - arrow is pointing
06:35 - along the gray arrow and that the blue
06:38 - and red arrows rotate along with it
06:40 - right these three things stay
06:42 - perpendicular so the first thing we
06:44 - could do is we could just set the basis
06:46 - dot y equal to the gray vector which
06:50 - would move the green arrow there I'm
06:53 - leaving a dimmed version of the original
06:56 - axis you can see where they started so
06:59 - now our Y axis is pointing this way but
07:02 - this is a problem because now they're
07:03 - not orthogonal right they're not all
07:05 - perpendicular to each other so the
07:08 - engine will try and orthonormal eyes or
07:12 - make them perpendicular and the result
07:15 - you get is that now these are
07:17 - perpendicular again now but all we've
07:20 - done is we've rotated this portion to
07:24 - point upwards but we haven't rotated to
07:27 - the side so we need to get our we're
07:31 - going to need to change our X as well
07:32 - and the way we're going to figure out
07:34 - what the new X needs to be is we're
07:36 - going to take the cross product of this
07:39 - normal with the Z and when we do that we
07:44 - get a new X which you see the new X now
07:47 - points that direction we orthonormalized
07:50 - one more time and now the Y matches so
07:54 - now we have completed our transformation
07:58 - we've rotated the Y to point along the
08:02 - new normals vector and the X and Z have
08:07 - changed and notice too that the Z has
08:09 - only changed vertically it hasn't
08:12 - changed left and right so our tank will
08:14 - still be pointing in the same direction
08:15 - right because the negative Z is our
08:18 - forward direction but we will have
08:20 - changed orientation and we'll do a quick
08:22 - transform here so you can see that right
08:25 - that's what the new tanks orientation
08:28 - will be and so that's we're going to
08:31 - write some code to do that it's
08:32 - basically three steps as you saw change
08:36 - the Y change the X and then you get the
08:40 - result so here's our tank code and we're
08:42 - going to write a function to do those
08:44 - steps that I'm going to call a line with
08:48 - why and you pass it a transform and you
08:51 - pass it a new Y vector in our case that
08:56 - new Y will be the normal of the slope so
08:59 - we take our transform and we set its
09:01 - basis dot y equal to the new Y which is
09:06 - what we did we set the transforms basis
09:10 - X equal to the negative Z crossed with
09:19 - the new Y and that was the second step
09:23 - that we saw and then the last thing we
09:26 - have to do is orthonormal eyes it and
09:32 - there's a command for that basis dot
09:35 - orthonormalized and then we just return
09:38 - that new transform and so this is our
09:42 - handy little function to take any
09:43 - transform and align it with some new up
09:47 - vector now note that there is a function
09:52 - built-in to the spatial node called look
09:57 - look at the problem with look at is look
10:00 - at will rotate a body to align its
10:03 - negative Z with some vector so we would
10:08 - have had to calculate what the new Z
10:10 - would be and it wouldn't have saved us
10:12 - any time actually would have been a
10:13 - little bit more difficult so this is
10:16 - gonna make it pretty easy so now we need
10:18 - to check if we collided right so after
10:21 - we move so we have to say get slide
10:26 - count
10:28 - [Music]
10:29 - get slide collision all right so we get
10:35 - the collision we get the slide collision
10:37 - that occurred and that's going to have a
10:40 - normal in it so we're gonna then set our
10:43 - global transform equal to a line with Y
10:47 - the global transform comma occlusion dot
10:52 - normal okay and so that'll line our
10:55 - tanks why let's see how that looks okay
11:01 - here we go we're gonna go climb up the
11:03 - hill okay now some problems right see
11:07 - that it is changing orientation but it's
11:12 - very there we go it's a little bit of a
11:16 - problem right the problem is happening
11:18 - have you figured it out because we've
11:20 - got we're touching more than one slope
11:23 - at the same time so it's trying to align
11:26 - with both of them and that is a big
11:29 - problem right we don't want that what we
11:33 - really want is to align with whatever
11:35 - one face is right under us see if we're
11:38 - only touching one face we're aligned
11:39 - correctly but as soon as we're touching
11:41 - more than one it's a problem so what
11:45 - we're gonna do to fix that is on our
11:48 - tank we're gonna add a ray cast and
11:53 - we're just going to make sure that Ray
11:55 - Ray cast is enabled and we're gonna
11:57 - point it downwards negative two and it's
12:01 - just pointing straight down from the
12:03 - center of the tank and we'll use that to
12:05 - get our normal so that it doesn't matter
12:08 - if the treads are touching more than one
12:10 - slope will basically get the average
12:13 - we'll get the one that's in between
12:14 - we'll get the one face that's directly
12:16 - beneath the tank all right back over to
12:19 - our code we can get rid of the slide
12:21 - stuff we're not going to use the we're
12:24 - not going to use the Kennebec body
12:26 - collision to get our normal we're gonna
12:27 - use the ray cast
12:28 - so we're gonna say the normal is the
12:32 - raycast
12:33 - get collision normal
12:37 - and then we will use that in our align
12:41 - with why to align just with the normal
12:47 - of the raycast C's so let's see how that
12:50 - looks okay so here we go
12:55 - now as I go up the slopes I am NOT going
13:00 - to stutter when I'm hitting more than
13:02 - one but we are still getting some
13:05 - snapping right because as soon as I
13:07 - cross from one to another I snap to that
13:11 - face which looks very awkward right I'm
13:16 - not getting the chittering back and
13:18 - forth between multiple faces but it is
13:21 - very jerky because the transitions
13:24 - between the phases are very sudden but
13:27 - we can fix that with a little bit of
13:29 - interpolation so instead of taking the
13:33 - global transform and assigning it right
13:34 - away we're going to we're going to take
13:38 - this align with why that returns a a
13:42 - transform right so let's just get the
13:45 - one that was returned and then we're
13:48 - gonna tell our global transform we're
13:50 - gonna set that equal to its self
13:55 - interpolated with the new transform and
14:00 - by how much depends on you
14:04 - I found 0.2 to be a pretty good value
14:08 - right but this is just like any other
14:10 - kind of interpolation this is how much
14:13 - to interpolate this transform towards
14:16 - this one so we're doing about 20%
14:20 - smaller numbers will make it go more
14:24 - slowly but what you'll see when is the
14:28 - result is that everything is a lot more
14:30 - smooth right our tank is very smooth at
14:35 - going over the faces and it
14:38 - transitioning between them because we're
14:40 - not snapping it all the way to the new
14:43 - face in one frame
14:47 - all right and that's it that's how you
14:50 - get a body that will align itself with a
14:55 - surface and this will work if your this
14:58 - work just as well if you're on a sphere
15:00 - or any other kind of mesh that has a lot
15:05 - more normals than this low poly terrain
15:07 - but I think it looks pretty good
15:10 - driving over this rough surface all
15:15 - right I hope this was a helpful tutorial
15:17 - to get your 3d projects going leave your
15:21 - comments and questions in the comment
15:25 - section below and I will see you in a
15:27 - future
15:28 - good-o recipe thanks for watching this
15:31 - tutorial is part of my nugudo recipes
15:33 - website the goal is to collect all the
15:36 - best tips and lessons to help make you a
15:37 - better go to a developer if you like
15:39 - this video I hope you'll go and check
15:41 - out the site and make sure to hit
15:42 - subscribe so you'll be notified whenever
15:44 - I release new videos thanks for watching

Cleaned transcript:

welcome back to another good recipe in this video we're going to take the threed kinematic body that we did in a previous recipe which you can see the link for below and we're gonna learn how to align it with a surface so that can climb up hills and drive over terrain smoothly to create my terrain I've downloaded the modular terrain pack which you can find on hgo again I'll put the link below and this is a path has all sorts of terrain models in it for a lot of different things I'm not gonna be using most of this for this demo but you know it lets you create a lot of a lot of different environments and they're modular so it's basically broken up into pieces that you kind of snap together like Legos so so I drop those into my project and I've used them to create a little bit of terrain and so I want my tank to be able to drive you know climb up this hill and drive around just like it does on the flat surface okay so if we try it out with our tank as it exists with the code to drive around you'll see they'll be a few problems one is when we climb up the slopes our tank doesn't rotate so it looks like it is floating in air if you're off the side right on a corner like this or something right the other problem we have or another problem we have is that if you stop moving on your way up a slope you get a little bounce if you can see that and because the the Y velocity remains and lifts us up off the slope like that and then the last one is that if I remain still with no input I'm slowly sliding down the slope so these are the things we need to address to get the tank movement to look better when dealing with terrain so to begin with we could add the stop on the slope parameter here to move in slide that's not going to stop our bouncing for that we're going to need to change to move and slide with snap and what that'll let us do is snap to the surface we've got to change the parameters a little bit we give it our velocity then we need to give it the snap vector and we're gonna use vector three dot down and we'll multiply it by two to make it two units long and then vector three dot up is still our up vector and then true for stop on slope so now that'll take care of some of that incorrect movement all right when I stop on the slope I don't bounce and when I let go of it I'm not sliding down the slope okay so that takes care of the keeping the body attached to the slope so in order to orient our tank with the terrain we need to consider the surface normal and what that means is on every mesh there are faces and since this is low poly terrain meaning low number of polygons we can easily see the faces this will work on high poly terrain as well but this makes it easier for us to see a little bit so you see on this slope there's one face here there's one face here there's a small face here and then there's the flat one on the top right and each face of a mesh has a normal which is a vector a normal vector and a unit vector or the same thing so it's a unit length one length vector that's pointing perpendicularly out of the surface and it helps you understand which way the surface is facing right so this one's gonna have one pointing out diagonally like this this one will be at a steeper angle the one on the ground points straight up right and so when you collide with the collision mesh of this terrain you can get the normal of the mesh where you collided and we want to take that normal and use that to set our tanks direction as well now our tank has a make sure we're in local mode right our tank has a local transform and that controls its orientation right and the normal of the slope where we hit is what we want the tanks Y basis to be all right so if it's going up a hill it needs to I'm rotating the head if it hits if it hits a hill and starts going over we need to rotate this Y vector so that the Y vector matches the normal of the slope and if it's going to the side you know it'll be tilted and so on so in order to do this we're going to need to understand a vector operation called the cross product so here I have two vectors that are located in space and I want to take the cross product of these two vectors and when I do I get this alright so the cross product of two vectors is a third vector that is perpendicular to both of them and it's length is actually proportional to the angle between them so you see if I rotate the X vector as it gets closer and closer to the green vector the cross product gets shorter as it gets farther away again see I'm on the other side it's now extending in the opposite direction and and so on so a cross product with what you really need to remember is a cross product gives you a vector that's perpendicular to the two vectors that you crossed now we're gonna use that to get our new orientation of three perpendicular axes for our tank okay so here's another example so we have our tank with its transform basis of the three vectors as it's sitting flat on the ground and we've collided with a slope and this gray vector represents the normal of that slope so we need to rotate this tank so that this green arrow is pointing along the gray arrow and that the blue and red arrows rotate along with it right these three things stay perpendicular so the first thing we could do is we could just set the basis dot y equal to the gray vector which would move the green arrow there I'm leaving a dimmed version of the original axis you can see where they started so now our Y axis is pointing this way but this is a problem because now they're not orthogonal right they're not all perpendicular to each other so the engine will try and orthonormal eyes or make them perpendicular and the result you get is that now these are perpendicular again now but all we've done is we've rotated this portion to point upwards but we haven't rotated to the side so we need to get our we're going to need to change our X as well and the way we're going to figure out what the new X needs to be is we're going to take the cross product of this normal with the Z and when we do that we get a new X which you see the new X now points that direction we orthonormalized one more time and now the Y matches so now we have completed our transformation we've rotated the Y to point along the new normals vector and the X and Z have changed and notice too that the Z has only changed vertically it hasn't changed left and right so our tank will still be pointing in the same direction right because the negative Z is our forward direction but we will have changed orientation and we'll do a quick transform here so you can see that right that's what the new tanks orientation will be and so that's we're going to write some code to do that it's basically three steps as you saw change the Y change the X and then you get the result so here's our tank code and we're going to write a function to do those steps that I'm going to call a line with why and you pass it a transform and you pass it a new Y vector in our case that new Y will be the normal of the slope so we take our transform and we set its basis dot y equal to the new Y which is what we did we set the transforms basis X equal to the negative Z crossed with the new Y and that was the second step that we saw and then the last thing we have to do is orthonormal eyes it and there's a command for that basis dot orthonormalized and then we just return that new transform and so this is our handy little function to take any transform and align it with some new up vector now note that there is a function builtin to the spatial node called look look at the problem with look at is look at will rotate a body to align its negative Z with some vector so we would have had to calculate what the new Z would be and it wouldn't have saved us any time actually would have been a little bit more difficult so this is gonna make it pretty easy so now we need to check if we collided right so after we move so we have to say get slide count get slide collision all right so we get the collision we get the slide collision that occurred and that's going to have a normal in it so we're gonna then set our global transform equal to a line with Y the global transform comma occlusion dot normal okay and so that'll line our tanks why let's see how that looks okay here we go we're gonna go climb up the hill okay now some problems right see that it is changing orientation but it's very there we go it's a little bit of a problem right the problem is happening have you figured it out because we've got we're touching more than one slope at the same time so it's trying to align with both of them and that is a big problem right we don't want that what we really want is to align with whatever one face is right under us see if we're only touching one face we're aligned correctly but as soon as we're touching more than one it's a problem so what we're gonna do to fix that is on our tank we're gonna add a ray cast and we're just going to make sure that Ray Ray cast is enabled and we're gonna point it downwards negative two and it's just pointing straight down from the center of the tank and we'll use that to get our normal so that it doesn't matter if the treads are touching more than one slope will basically get the average we'll get the one that's in between we'll get the one face that's directly beneath the tank all right back over to our code we can get rid of the slide stuff we're not going to use the we're not going to use the Kennebec body collision to get our normal we're gonna use the ray cast so we're gonna say the normal is the raycast get collision normal and then we will use that in our align with why to align just with the normal of the raycast C's so let's see how that looks okay so here we go now as I go up the slopes I am NOT going to stutter when I'm hitting more than one but we are still getting some snapping right because as soon as I cross from one to another I snap to that face which looks very awkward right I'm not getting the chittering back and forth between multiple faces but it is very jerky because the transitions between the phases are very sudden but we can fix that with a little bit of interpolation so instead of taking the global transform and assigning it right away we're going to we're going to take this align with why that returns a a transform right so let's just get the one that was returned and then we're gonna tell our global transform we're gonna set that equal to its self interpolated with the new transform and by how much depends on you I found 0.2 to be a pretty good value right but this is just like any other kind of interpolation this is how much to interpolate this transform towards this one so we're doing about 20% smaller numbers will make it go more slowly but what you'll see when is the result is that everything is a lot more smooth right our tank is very smooth at going over the faces and it transitioning between them because we're not snapping it all the way to the new face in one frame all right and that's it that's how you get a body that will align itself with a surface and this will work if your this work just as well if you're on a sphere or any other kind of mesh that has a lot more normals than this low poly terrain but I think it looks pretty good driving over this rough surface all right I hope this was a helpful tutorial to get your 3d projects going leave your comments and questions in the comment section below and I will see you in a future goodo recipe thanks for watching this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better go to a developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching
