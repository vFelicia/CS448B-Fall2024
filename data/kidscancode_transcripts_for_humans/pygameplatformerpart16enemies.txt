With timestamps:

00:00 - welcome back to game development with
00:02 - pygame this is part 16 of the platformer
00:05 - game and in this video we will be adding
00:08 - enemies so we're gonna make the game a
00:12 - little more challenging now by adding a
00:14 - mob sprite that we'll have to avoid so
00:18 - I'm gonna copy some of this stuff from
00:20 - the powerup sprite to save a little time
00:24 - we're gonna make a class mob and this is
00:28 - going to go into the alt sprites and the
00:32 - mobs group we've got our game reference
00:39 - and then we are going to start setting
00:43 - up how we want the mob to behave now
00:46 - first of all what we want the sprite or
00:50 - the mob to look like there's a bunch of
00:52 - different or a few different mob types
00:54 - in the sprite sheet if we go over and
00:59 - look at it you know there's a the little
01:01 - red guy with the spike on his head
01:03 - there's a little springy guy there's a
01:07 - flying guy and there's the little
01:09 - propeller guy and so I thought I would
01:12 - take the propeller guy and we're gonna
01:16 - use him and what we're gonna want to do
01:20 - is I want him to win he flies across the
01:24 - screen did not just go in a boring
01:26 - straight line but kind of look like he's
01:28 - bouncing a little bit so he's kind of
01:30 - hovering you know hovering effect so
01:33 - we're gonna switch between these two
01:34 - different sprites where his feet are
01:36 - going in the opposite direction so this
01:38 - is when he's flying upwards and this is
01:39 - when he's dropping downwards okay and
01:43 - then so we'll just alternate between
01:45 - those as he bounces across the screen
01:49 - and if you look at your XML file you can
01:55 - find him here it's the fly man and we're
01:58 - gonna want the fly and the jump frames
02:04 - so what we're going to do is we're going
02:07 - to call that we're going to load those
02:10 - two different images and actually I
02:12 - already copied and
02:13 - all those numbers to save a little time
02:17 - there we go we're gonna use the image up
02:19 - and the image down so the image for
02:23 - winning is moving up and the image for
02:24 - Lang is moving down and we'll set our
02:26 - image to start with just to image up
02:30 - doesn't really matter we'll get our rect
02:35 - and then we need to figure out where to
02:40 - spawn him now I want the mobs to
02:42 - sometimes spawn on the left and come
02:45 - across this way and sometimes fall on
02:46 - the right and come across this way so so
02:48 - they should start off the screen on one
02:52 - of the sides so we're just going to pick
02:56 - a random location between minus 100
03:02 - which would be off the screen to the
03:04 - left and with oops width plus 100 which
03:09 - would be off the screen to the right
03:12 - then we're going to pick a random speed
03:15 - so that sometimes they'll be moving fast
03:18 - and sometimes slow and that's just going
03:21 - to be between 1 and 4 now that's a
03:24 - positive number so that means it'll move
03:26 - to the right and that's fine if we
03:27 - started out off to the left but if our
03:33 - if our sprite spawned off the screen to
03:38 - the right then I just want those to be
03:41 - negative so that the velocity will move
03:44 - it to the right then we can pick where
03:48 - we want it to spawn in the y-direction
03:51 - and that's just going to be I want it to
03:54 - be somewhere in the top half of the
03:56 - screen so top half not down in the
03:59 - bottom half okay and then our self dot V
04:04 - Y is going to be zero and what we want
04:07 - to do is we want our V Y so the the VX
04:10 - will be constant so it'll move across
04:11 - the screen at a constant speed but the V
04:13 - Y is going to alternate between moving
04:15 - upwards and moving downwards and then
04:18 - moving upwards and then moving downwards
04:19 - but I don't want it to be very jerky I
04:21 - want it to be smooth so what we want to
04:22 - use is some acceleration where we speed
04:26 - up to the top and
04:27 - slow down and then speed down towards
04:29 - the bottom and slow down so we make a
04:31 - nice curve so I'm gonna make a set a
04:35 - variable called dy for that and that's
04:39 - going to be one half okay so our update
04:46 - well our x speed is constant so we can
04:50 - just move in the x-direction but now we
04:55 - need to do the y-direction
04:56 - so we're going to take our V Y and we're
05:00 - gonna add the dy to it alright so in the
05:04 - first frame our V Y is zero so we
05:06 - wouldn't move at all if we were if it
05:08 - was just ero but we're gonna add point
05:10 - five to its then we'll move it point
05:11 - five next frame we'll be moving our V Y
05:13 - we'll get another point five added to it
05:15 - will be one then it'll be one point five
05:17 - etc so we're gonna keep making our V Y
05:20 - bigger which would accelerate us upward
05:23 - but at a certain point we want that to
05:25 - stop and turn around so so what we're
05:28 - gonna do is say if the V Y gets to be
05:32 - greater than three or less than -3 then
05:36 - I want my dy just to reverse so x equals
05:42 - negative one okay so that way we'll have
05:51 - that nice smooth curve now so now we
05:54 - figured out how to move now we need to
05:56 - figure out which image to use do we do
05:57 - we use the up one or the down one well
06:01 - first first we're gonna track where our
06:05 - center is because these two sprites if
06:07 - you notice are slightly different sizes
06:08 - just a few pixels but enough that it
06:11 - would be could introduce a little bit of
06:13 - jerkiness so we're going to track where
06:17 - the center of our sprite is and if our D
06:21 - Y is less than zero then we're moving
06:24 - upwards so we're gonna use the or use
06:30 - the up image otherwise we'll use the
06:36 - down image
06:39 - we get our new rect from that based on
06:47 - that image we set our Center equal to
06:52 - the old center or the same center so it
06:56 - stays the same and then we can finally
07:00 - move our Y by whatever IV Y is and now
07:08 - we'll have our nice smooth movement and
07:10 - then the last thing we need to do is if
07:13 - it's moved all the way off the screen
07:15 - come all the way across we need to kill
07:17 - it so if the left is greater than width
07:21 - plus 100 or the right is less than
07:27 - negative 100 so if it's moved all the
07:29 - way off the screen
07:31 - then we'll delete okay so that'll be our
07:36 - class mob now we just need to make it
07:42 - start spawning so we'll go over to our
07:47 - main and we need to do a couple of
07:51 - things we need to we need to make a mobs
07:56 - group and then we need to decide how
08:03 - often are we gonna spawn mobs so what
08:08 - I'm gonna do is I'm gonna add a setting
08:10 - in here for mob frequency and I'm gonna
08:16 - put 5,000 that's milliseconds so five
08:20 - seconds as kind of the baseline that's
08:23 - gonna be the average time between each
08:26 - mob spawning and we'll use some
08:27 - randomness to vary it but that will be
08:30 - how frequently they spawn so now in our
08:33 - game loop in our updates section we can
08:37 - decide whether we want to spawn them up
08:42 - or not
08:42 - so spawn a mob question mark
08:47 - so we need to figure out what time it is
08:49 - now oh right and then I also forgot
08:56 - we're gonna need our mob timer and
08:59 - that's just gonna be keeping track of
09:04 - when the last time we spawned one so we
09:06 - know whether it's time to spawn one
09:08 - again all right so we get what time it
09:12 - is now get ticks and if now - mob timer
09:21 - is greater than 5,000 now if I just did
09:24 - that it would they would spawn every
09:27 - 5,000 milliseconds exactly every 5
09:30 - seconds exactly
09:31 - but we're gonna vary that a little bit
09:34 - now I could do something like this right
09:38 - if I let's say I wanted to be between 4
09:41 - and 6 seconds I could do that right pick
09:44 - a random number between here and then
09:46 - sometimes it would be as low as 4,000
09:48 - sometimes it would be as high as 6,000
09:51 - but the problem is there's there's way
09:53 - too many increments in here this is
09:55 - 2,000 integers all the way across this
09:59 - range sometimes it'll be 837 sometimes
10:02 - it'll be 834 and what difference does it
10:05 - make if it's 2 milliseconds different
10:07 - instead what we can do is just do some
10:13 - discrete values just to vary it some and
10:19 - I'm gonna put minus 1000 minus 500 0 500
10:26 - and a thousand so that way we have
10:30 - either either four seconds four and a
10:32 - half seconds five seconds five and a
10:35 - half seconds or six seconds and if that
10:39 - happens then we will spawn a mob so
10:42 - we'll set the mob timer to now and we
10:45 - will spawn a mob oops and the mob it
10:49 - wants a plat that's not right I think I
10:52 - left something when I copied and pasted
10:54 - I did don't want that in there
11:01 - okay so let's see how this looks so far
11:09 - there's a mob okay he's going across oh
11:13 - there's another one so we should see
11:18 - they're all going to the right at the
11:19 - moment we should see one going in the
11:21 - other direction sooner or later there's
11:25 - one yeah so you can see we've got the
11:27 - animation is working it looks like it's
11:29 - bouncing up and down we've got different
11:34 - speeds and now this might seem a little
11:39 - too frequent to you like there's a lot
11:42 - of mobs to navigate between but remember
11:44 - once we start moving they're gonna be
11:46 - dropping off the bottom of the screen as
11:47 - we go past them which reminds me of
11:50 - something we do have to take into
11:51 - account you guys see that he's not it
11:55 - looks like he's chasing us because we
11:58 - are not when we scroll the screen we are
12:01 - not scrolling the screen - or we're not
12:04 - moving the mobs along with the camera so
12:07 - they are not moving the way the rest of
12:11 - things on the screen are so here on the
12:14 - when we reach the top quarter of the
12:16 - screen I'm just going to do the same
12:18 - thing I'm doing with the platforms with
12:22 - the mops so I'm gonna say for Bob in
12:29 - Bob's mom's we just want to move them
12:35 - downwards that should let us zoom right
12:40 - past them there we go today we can sort
12:44 - of leave him behind
12:45 - as we get past him
12:49 - there's no collisions happening yet so
12:51 - that doesn't really matter but I think
12:56 - that's a pretty good start for how we
12:57 - want our mob to behave and we can do the
13:04 - collisions although there is one other
13:06 - thing there we go see how the mob goes
13:08 - behind the sprite sometimes and
13:10 - sometimes in front of it well that has
13:13 - to do with that draw order problem again
13:15 - you remember we went down to our in
13:21 - order to fix that with our player
13:23 - we went down here to our draw section
13:25 - and we are bleeding the player after
13:30 - drawing all the sprites so that we make
13:32 - sure it's always on top and that's fine
13:34 - if you just have one one thing you want
13:37 - to draw but now we've got the mobs - it
13:40 - could start to get messy we're going to
13:42 - blit all our different sprites
13:43 - separately so pygame has a good solution
13:47 - for that and the solution is if we go
13:51 - over here when we make our sprite our
13:52 - all sprites group we're gonna use a
13:55 - different type of group called layered
13:59 - updates and this sprite group type
14:04 - allows you to specify what order you
14:09 - want things drawn in by giving each
14:11 - sprite a layer value a number for what
14:15 - layer it is the lower layers will get
14:18 - drawn first so we just need to assign a
14:21 - layer to each of the sprites and they
14:23 - will all get drawn in the right order so
14:26 - we'll go over here and we'll do that
14:28 - here - okay so we're gonna set the
14:31 - player layer and I'm gonna make that -
14:38 - I'm gonna set the platform layer to one
14:43 - we can set the pal layer and that can be
14:48 - one as well they're right on top of the
14:49 - platforms and the mob layer and we'll
14:54 - put the mobs on the same layer as the
14:55 - player since they're gonna run into each
14:57 - other we're not gonna see them overlap
14:58 - anyway okay so now we have these layers
15:01 - designed
15:02 - then in our sprites we can tell our
15:04 - sprites what layer we want them to be on
15:06 - and there's two different ways you can
15:10 - do that you can do that when you when
15:12 - you add them to the group which remember
15:15 - we're not doing that anymore we got rid
15:16 - of the all sprites dot add you can put
15:19 - the parameter in there and say layer
15:21 - equals two or whatever but since we're
15:23 - spawning the play the sprites with all
15:26 - their properties in the sprite
15:28 - definition it makes sense to put that in
15:30 - here so we just need to say we need to
15:32 - give it a another property call and we
15:34 - need to do it again we need to do it
15:36 - before the sprite in it and it needs to
15:41 - be called underscore layer okay and so
15:46 - this is going to be the player layer on
15:50 - the player and on the platform we're
15:53 - gonna set the underscore layer to
15:57 - platform platform list platform layer
16:03 - and we're gonna set the cows to tell
16:12 - where and we're gonna set the mobs to a
16:20 - mob layer okay so let's take a look and
16:25 - then oh and then down here in our draw
16:29 - we don't need this line anymore we don't
16:32 - need to blitt this i duplicated it
16:35 - instead of deleting it okay so we're
16:40 - just gonna draw all sprites and the all
16:42 - sprites group will now take care of all
16:45 - the layers so let's take a look at how
16:47 - that looks okay so see the you can see
16:55 - the mob in front of the platforms the
16:57 - player is still the player is still
17:00 - always in front of the platforms
17:10 - and the player and the and the mobs
17:13 - could be either cuz they're on the same
17:15 - layer but that's okay because we're
17:16 - gonna do collisions in a second but you
17:21 - can see when you've got a lot of
17:22 - different Speights sprites on the screen
17:24 - they layered the layered drawing is a
17:28 - lot easier to do with that layered
17:29 - updates sprite group alright and already
17:35 - we're getting kind of long so we're
17:36 - gonna do a quick collision here we're
17:41 - just going to say we're just going to
17:44 - use our usual PI game sprite
17:50 - that's right collide function between
17:56 - the player and the mobs and it doesn't
18:00 - really matter whether we put true or
18:01 - false because if we hit the mob playing
18:09 - equals false game over all right so
18:12 - let's just make sure we see how that
18:14 - works and then we can in this video okay
18:21 - there we go
18:21 - now there is gonna be one thing you'll
18:25 - notice a nice a string of boosts there
18:30 - okay so
18:32 - let's see if this little not quite I'm
18:37 - trying to get a collision to happen
18:44 - close by just so you guys can see there
18:49 - we go you see that collision so because
18:54 - we're using the rectangles you might
18:57 - remember from our shmoop game that it
19:01 - can really be bad if the player thinks
19:03 - that they dodged something but they died
19:06 - anyway just because the rectangles
19:08 - overlap so that doesn't look good at all
19:11 - and so in the next video we'll improve
19:14 - the collisions by using something called
19:16 - pixel perfect collision but as always
19:21 - please like and subscribe if you enjoy
19:23 - these videos and help other people find
19:25 - them and if you have any questions or
19:27 - comments please post them in the
19:29 - discussion area below and I will see you
19:31 - all in the next video
19:42 - you

Cleaned transcript:

welcome back to game development with pygame this is part 16 of the platformer game and in this video we will be adding enemies so we're gonna make the game a little more challenging now by adding a mob sprite that we'll have to avoid so I'm gonna copy some of this stuff from the powerup sprite to save a little time we're gonna make a class mob and this is going to go into the alt sprites and the mobs group we've got our game reference and then we are going to start setting up how we want the mob to behave now first of all what we want the sprite or the mob to look like there's a bunch of different or a few different mob types in the sprite sheet if we go over and look at it you know there's a the little red guy with the spike on his head there's a little springy guy there's a flying guy and there's the little propeller guy and so I thought I would take the propeller guy and we're gonna use him and what we're gonna want to do is I want him to win he flies across the screen did not just go in a boring straight line but kind of look like he's bouncing a little bit so he's kind of hovering you know hovering effect so we're gonna switch between these two different sprites where his feet are going in the opposite direction so this is when he's flying upwards and this is when he's dropping downwards okay and then so we'll just alternate between those as he bounces across the screen and if you look at your XML file you can find him here it's the fly man and we're gonna want the fly and the jump frames so what we're going to do is we're going to call that we're going to load those two different images and actually I already copied and all those numbers to save a little time there we go we're gonna use the image up and the image down so the image for winning is moving up and the image for Lang is moving down and we'll set our image to start with just to image up doesn't really matter we'll get our rect and then we need to figure out where to spawn him now I want the mobs to sometimes spawn on the left and come across this way and sometimes fall on the right and come across this way so so they should start off the screen on one of the sides so we're just going to pick a random location between minus 100 which would be off the screen to the left and with oops width plus 100 which would be off the screen to the right then we're going to pick a random speed so that sometimes they'll be moving fast and sometimes slow and that's just going to be between 1 and 4 now that's a positive number so that means it'll move to the right and that's fine if we started out off to the left but if our if our sprite spawned off the screen to the right then I just want those to be negative so that the velocity will move it to the right then we can pick where we want it to spawn in the ydirection and that's just going to be I want it to be somewhere in the top half of the screen so top half not down in the bottom half okay and then our self dot V Y is going to be zero and what we want to do is we want our V Y so the the VX will be constant so it'll move across the screen at a constant speed but the V Y is going to alternate between moving upwards and moving downwards and then moving upwards and then moving downwards but I don't want it to be very jerky I want it to be smooth so what we want to use is some acceleration where we speed up to the top and slow down and then speed down towards the bottom and slow down so we make a nice curve so I'm gonna make a set a variable called dy for that and that's going to be one half okay so our update well our x speed is constant so we can just move in the xdirection but now we need to do the ydirection so we're going to take our V Y and we're gonna add the dy to it alright so in the first frame our V Y is zero so we wouldn't move at all if we were if it was just ero but we're gonna add point five to its then we'll move it point five next frame we'll be moving our V Y we'll get another point five added to it will be one then it'll be one point five etc so we're gonna keep making our V Y bigger which would accelerate us upward but at a certain point we want that to stop and turn around so so what we're gonna do is say if the V Y gets to be greater than three or less than 3 then I want my dy just to reverse so x equals negative one okay so that way we'll have that nice smooth curve now so now we figured out how to move now we need to figure out which image to use do we do we use the up one or the down one well first first we're gonna track where our center is because these two sprites if you notice are slightly different sizes just a few pixels but enough that it would be could introduce a little bit of jerkiness so we're going to track where the center of our sprite is and if our D Y is less than zero then we're moving upwards so we're gonna use the or use the up image otherwise we'll use the down image we get our new rect from that based on that image we set our Center equal to the old center or the same center so it stays the same and then we can finally move our Y by whatever IV Y is and now we'll have our nice smooth movement and then the last thing we need to do is if it's moved all the way off the screen come all the way across we need to kill it so if the left is greater than width plus 100 or the right is less than negative 100 so if it's moved all the way off the screen then we'll delete okay so that'll be our class mob now we just need to make it start spawning so we'll go over to our main and we need to do a couple of things we need to we need to make a mobs group and then we need to decide how often are we gonna spawn mobs so what I'm gonna do is I'm gonna add a setting in here for mob frequency and I'm gonna put 5,000 that's milliseconds so five seconds as kind of the baseline that's gonna be the average time between each mob spawning and we'll use some randomness to vary it but that will be how frequently they spawn so now in our game loop in our updates section we can decide whether we want to spawn them up or not so spawn a mob question mark so we need to figure out what time it is now oh right and then I also forgot we're gonna need our mob timer and that's just gonna be keeping track of when the last time we spawned one so we know whether it's time to spawn one again all right so we get what time it is now get ticks and if now mob timer is greater than 5,000 now if I just did that it would they would spawn every 5,000 milliseconds exactly every 5 seconds exactly but we're gonna vary that a little bit now I could do something like this right if I let's say I wanted to be between 4 and 6 seconds I could do that right pick a random number between here and then sometimes it would be as low as 4,000 sometimes it would be as high as 6,000 but the problem is there's there's way too many increments in here this is 2,000 integers all the way across this range sometimes it'll be 837 sometimes it'll be 834 and what difference does it make if it's 2 milliseconds different instead what we can do is just do some discrete values just to vary it some and I'm gonna put minus 1000 minus 500 0 500 and a thousand so that way we have either either four seconds four and a half seconds five seconds five and a half seconds or six seconds and if that happens then we will spawn a mob so we'll set the mob timer to now and we will spawn a mob oops and the mob it wants a plat that's not right I think I left something when I copied and pasted I did don't want that in there okay so let's see how this looks so far there's a mob okay he's going across oh there's another one so we should see they're all going to the right at the moment we should see one going in the other direction sooner or later there's one yeah so you can see we've got the animation is working it looks like it's bouncing up and down we've got different speeds and now this might seem a little too frequent to you like there's a lot of mobs to navigate between but remember once we start moving they're gonna be dropping off the bottom of the screen as we go past them which reminds me of something we do have to take into account you guys see that he's not it looks like he's chasing us because we are not when we scroll the screen we are not scrolling the screen or we're not moving the mobs along with the camera so they are not moving the way the rest of things on the screen are so here on the when we reach the top quarter of the screen I'm just going to do the same thing I'm doing with the platforms with the mops so I'm gonna say for Bob in Bob's mom's we just want to move them downwards that should let us zoom right past them there we go today we can sort of leave him behind as we get past him there's no collisions happening yet so that doesn't really matter but I think that's a pretty good start for how we want our mob to behave and we can do the collisions although there is one other thing there we go see how the mob goes behind the sprite sometimes and sometimes in front of it well that has to do with that draw order problem again you remember we went down to our in order to fix that with our player we went down here to our draw section and we are bleeding the player after drawing all the sprites so that we make sure it's always on top and that's fine if you just have one one thing you want to draw but now we've got the mobs it could start to get messy we're going to blit all our different sprites separately so pygame has a good solution for that and the solution is if we go over here when we make our sprite our all sprites group we're gonna use a different type of group called layered updates and this sprite group type allows you to specify what order you want things drawn in by giving each sprite a layer value a number for what layer it is the lower layers will get drawn first so we just need to assign a layer to each of the sprites and they will all get drawn in the right order so we'll go over here and we'll do that here okay so we're gonna set the player layer and I'm gonna make that I'm gonna set the platform layer to one we can set the pal layer and that can be one as well they're right on top of the platforms and the mob layer and we'll put the mobs on the same layer as the player since they're gonna run into each other we're not gonna see them overlap anyway okay so now we have these layers designed then in our sprites we can tell our sprites what layer we want them to be on and there's two different ways you can do that you can do that when you when you add them to the group which remember we're not doing that anymore we got rid of the all sprites dot add you can put the parameter in there and say layer equals two or whatever but since we're spawning the play the sprites with all their properties in the sprite definition it makes sense to put that in here so we just need to say we need to give it a another property call and we need to do it again we need to do it before the sprite in it and it needs to be called underscore layer okay and so this is going to be the player layer on the player and on the platform we're gonna set the underscore layer to platform platform list platform layer and we're gonna set the cows to tell where and we're gonna set the mobs to a mob layer okay so let's take a look and then oh and then down here in our draw we don't need this line anymore we don't need to blitt this i duplicated it instead of deleting it okay so we're just gonna draw all sprites and the all sprites group will now take care of all the layers so let's take a look at how that looks okay so see the you can see the mob in front of the platforms the player is still the player is still always in front of the platforms and the player and the and the mobs could be either cuz they're on the same layer but that's okay because we're gonna do collisions in a second but you can see when you've got a lot of different Speights sprites on the screen they layered the layered drawing is a lot easier to do with that layered updates sprite group alright and already we're getting kind of long so we're gonna do a quick collision here we're just going to say we're just going to use our usual PI game sprite that's right collide function between the player and the mobs and it doesn't really matter whether we put true or false because if we hit the mob playing equals false game over all right so let's just make sure we see how that works and then we can in this video okay there we go now there is gonna be one thing you'll notice a nice a string of boosts there okay so let's see if this little not quite I'm trying to get a collision to happen close by just so you guys can see there we go you see that collision so because we're using the rectangles you might remember from our shmoop game that it can really be bad if the player thinks that they dodged something but they died anyway just because the rectangles overlap so that doesn't look good at all and so in the next video we'll improve the collisions by using something called pixel perfect collision but as always please like and subscribe if you enjoy these videos and help other people find them and if you have any questions or comments please post them in the discussion area below and I will see you all in the next video you
