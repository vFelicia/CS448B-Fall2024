With timestamps:

00:00 - welcome back to a game dev in depth in
00:03 - this video we're gonna be talking about
00:04 - something that can be a huge source of
00:06 - confusion for beginner programmers it
00:09 - has to do with the idea of real numbers
00:11 - which are fractions or decimals versus
00:14 - integers or whole numbers a lot of times
00:17 - when we're calculating movement we might
00:19 - come up with a non integer number like
00:21 - 2.5 however there are a fixed number of
00:24 - pixels on the screen and you can't draw
00:27 - something that's a 2.5 pixels it has to
00:29 - be an integer this can cause a number of
00:32 - confusing and hard to solve problems in
00:35 - your movement or animation code okay to
00:38 - see some of those problems let's look
00:41 - first at our simple 8 way movement
00:44 - example we did and I'm gonna focus only
00:48 - on the X Direction for this example so
00:51 - when we press the right or the left key
00:53 - we're setting our velocity to 5 which is
00:56 - 5 pixels per frame and then we're
00:59 - telling the rectangle to add that amount
01:03 - you know to move that amount so we move
01:06 - 5 pixels to the right or 5 pixels to the
01:08 - left or we change the rectangles
01:10 - x-coordinate by 5 right and we move left
01:14 - and right well let's I'm gonna change
01:17 - these to 1 just to keep things very
01:19 - simple but let's say there was some
01:24 - reason you wanted the movement to the
01:26 - right to be faster than the left by a
01:29 - little bit let's say you wanted it to be
01:32 - 1.5 so now I should move faster to the
01:36 - right than to the left well turns out
01:40 - when I do it
01:41 - there's moving to the left there is
01:44 - moving to the right can you see a
01:45 - difference no in fact there is no
01:48 - difference what's happening is the
01:53 - rectangles in pygame are based on pixels
01:56 - and you can't have a fraction of a pixel
01:59 - so all of the properties of the
02:01 - rectangle must be integers or whole
02:06 - numbers so when this happens and we say
02:10 - take the X and add 1.5 to it
02:14 - Python changes this 1.5 which is a real
02:19 - number into a an integer and it does
02:24 - that not by rounding but by truncating
02:27 - so that 1.5 just becomes 1 so there's no
02:32 - difference between 1 and 1.9 for example
02:36 - anything it's going to be the same so
02:40 - that means you can only have whole
02:42 - number speeds right well not exactly but
02:49 - before I go into how we fix this I also
02:51 - want to show you another thing that is
02:54 - might be unexpected and definitely trips
02:56 - up a lot of students when they're
02:59 - starting out what if I was to put 1.5
03:02 - here so I want to move to the left right
03:05 - I want to subtract 1.5 well you would
03:08 - think you would see the same problem but
03:10 - instead what we get is there's moving to
03:12 - the right there is moving to the left
03:15 - that it's twice as fast what's happening
03:19 - is this is actually getting converted to
03:22 - negative 2 what happens is when python
03:27 - converts a real number to an integer is
03:29 - it takes the number and does what's
03:33 - called a floor operation on it it rounds
03:35 - it down to the next lowest integer so
03:39 - the next lowest integer from 1.5 is one
03:41 - but the next lowest integer from 1.5 our
03:45 - negative 1 25 is negative 2 so that's
03:49 - why we moved faster to the left than the
03:51 - right we were basically saying do this
03:56 - so let's look at another example of this
03:59 - problem in our time step example that we
04:01 - did in a previous video we are trying to
04:05 - move our rectangle at 120 pixels per
04:09 - second so we take that hundred and 20
04:12 - and we multiply it by whatever the
04:14 - duration of the frame is right and since
04:18 - we're going since we're right now going
04:21 - at 60 frames per second then if we pop
04:24 - up the calculator here then I'm going to
04:27 - put
04:27 - and 1/60 and there we go that's how many
04:32 - seconds long our frame is so that's not
04:36 - a nice clean integer is it so if we have
04:40 - a hundred and twenty we say we want to
04:42 - move 120 pixels times let's just put
04:44 - point on one seven for this illustration
04:47 - I get two point O four so I'm saying
04:53 - move to 0.04 pixels but we can't so that
04:57 - gets truncated
04:58 - 2.04 gets truncated to two and that's
05:03 - fine but what about if once 25 frames
05:08 - have gone by well if we multiply that by
05:11 - 25 then it's gonna say after 25 pixels
05:14 - we should have moved 51 pixels after 2
05:16 - sorry after 25 frames we should have
05:18 - moved 51 pixels but instead if we only
05:21 - move to 2 times 25 of course is 50 so
05:24 - after 25 frames or so we've lost one
05:28 - pixel in movement so you'll see this
05:30 - crop up in all sorts of ways as your
05:33 - programs get more advanced and you want
05:35 - to do different kinds of movement you
05:37 - want to do collisions you want to do one
05:39 - thing moving towards something else this
05:42 - rounding issue can cause a lot of
05:45 - strange errors that are really hard to
05:47 - figure out if you don't know what you're
05:49 - doing
05:50 - so now let's talk about how we prevent
05:55 - this problem or avoid this problem so to
05:57 - illustrate this I've just made another
05:58 - copy of our little frame based movement
06:01 - example where we're trying to move 120
06:04 - pixels per second but this is going to
06:06 - come out to a 2.04 or sum or something
06:10 - like that right a non-integer mil and
06:13 - the way that you prevent this rounding
06:15 - problem is you store your price sprites
06:19 - position or you track your spiced
06:20 - position separately from the rectangle
06:23 - so for example since we're moving in the
06:27 - X direction I'm gonna make a px variable
06:29 - this is position X and I'm gonna set it
06:32 - equal to 0 because we're gonna start on
06:34 - the left hand side of the screen and now
06:37 - instead of
06:39 - increasing my rectangles X by the
06:42 - velocity I'm going to increase px so now
06:48 - P X will become 2.04 and then 4.08
06:51 - and so on and it doesn't get rounded and
06:55 - we'll take the will use the PX to
06:59 - determine whether we need to wrap around
07:03 - the screen and then once we've
07:05 - calculated what our px should be we set
07:10 - our rectangle to be equal to that to
07:15 - that position right now obviously if px
07:19 - is 4.5 or something then the rectangle
07:24 - will be put to 4 but as soon as this
07:28 - gets to the next it gets passed the next
07:31 - integer the rectangle will move there
07:34 - but we're still keeping the right count
07:36 - of how our position is changing and if
07:41 - you look at this it will be a lot
07:43 - smoother there's none of those little
07:45 - stutters that we saw before when it
07:49 - would have when it was rounding to the
07:52 - next pixel in fact we're not losing the
07:56 - every 25 frames we're not losing the 1
07:59 - pixel and dropping from 51 to 50 where
08:01 - you're actually moving 51 pixels
08:04 - after 21 frames so that's it to avoid
08:10 - the rounding problems you just keep
08:13 - track of your sprites position in a
08:16 - separate variable that can stay being a
08:19 - real number do your calculations on it
08:22 - and then just draw your rectangle at the
08:25 - pixel that's closest to where it's
08:28 - supposed to be and then everything will
08:31 - will look fine of course in this example
08:34 - we only were moving horizontally so if
08:37 - you have vertical movement and then you
08:39 - also need to keep track of it V Y and a
08:41 - position Y so you have two variables for
08:45 - each thing if you have acceleration
08:48 - happening because of gravity or anything
08:51 - like that
08:52 - you have to have an acceleration X&Y so
08:57 - you can start to see the number of
08:59 - variables is starting to increase and
09:01 - there's a lot more to keep track out and
09:02 - have it separately keep track of VX and
09:05 - V Y and all those kind of things is
09:07 - another problem and in the next video
09:10 - we'll talk about how you can solve that
09:12 - problem and simplify the number of
09:15 - variables that you have to keep track of
09:17 - thanks for watching I hope this video
09:20 - was useful for you and helps you avoid
09:22 - some of those rounding integer vs. real
09:27 - problems that a lot of new programmers
09:31 - run into and wind up scratching their
09:33 - heads about as always if you enjoyed
09:36 - this lesson please press the like button
09:38 - below and if you haven't already
09:40 - subscribed please do so so you can find
09:43 - out about the next video as soon as it's
09:45 - released thanks and I'll see you next
09:47 - time
09:55 - you

Cleaned transcript:

welcome back to a game dev in depth in this video we're gonna be talking about something that can be a huge source of confusion for beginner programmers it has to do with the idea of real numbers which are fractions or decimals versus integers or whole numbers a lot of times when we're calculating movement we might come up with a non integer number like 2.5 however there are a fixed number of pixels on the screen and you can't draw something that's a 2.5 pixels it has to be an integer this can cause a number of confusing and hard to solve problems in your movement or animation code okay to see some of those problems let's look first at our simple 8 way movement example we did and I'm gonna focus only on the X Direction for this example so when we press the right or the left key we're setting our velocity to 5 which is 5 pixels per frame and then we're telling the rectangle to add that amount you know to move that amount so we move 5 pixels to the right or 5 pixels to the left or we change the rectangles xcoordinate by 5 right and we move left and right well let's I'm gonna change these to 1 just to keep things very simple but let's say there was some reason you wanted the movement to the right to be faster than the left by a little bit let's say you wanted it to be 1.5 so now I should move faster to the right than to the left well turns out when I do it there's moving to the left there is moving to the right can you see a difference no in fact there is no difference what's happening is the rectangles in pygame are based on pixels and you can't have a fraction of a pixel so all of the properties of the rectangle must be integers or whole numbers so when this happens and we say take the X and add 1.5 to it Python changes this 1.5 which is a real number into a an integer and it does that not by rounding but by truncating so that 1.5 just becomes 1 so there's no difference between 1 and 1.9 for example anything it's going to be the same so that means you can only have whole number speeds right well not exactly but before I go into how we fix this I also want to show you another thing that is might be unexpected and definitely trips up a lot of students when they're starting out what if I was to put 1.5 here so I want to move to the left right I want to subtract 1.5 well you would think you would see the same problem but instead what we get is there's moving to the right there is moving to the left that it's twice as fast what's happening is this is actually getting converted to negative 2 what happens is when python converts a real number to an integer is it takes the number and does what's called a floor operation on it it rounds it down to the next lowest integer so the next lowest integer from 1.5 is one but the next lowest integer from 1.5 our negative 1 25 is negative 2 so that's why we moved faster to the left than the right we were basically saying do this so let's look at another example of this problem in our time step example that we did in a previous video we are trying to move our rectangle at 120 pixels per second so we take that hundred and 20 and we multiply it by whatever the duration of the frame is right and since we're going since we're right now going at 60 frames per second then if we pop up the calculator here then I'm going to put and 1/60 and there we go that's how many seconds long our frame is so that's not a nice clean integer is it so if we have a hundred and twenty we say we want to move 120 pixels times let's just put point on one seven for this illustration I get two point O four so I'm saying move to 0.04 pixels but we can't so that gets truncated 2.04 gets truncated to two and that's fine but what about if once 25 frames have gone by well if we multiply that by 25 then it's gonna say after 25 pixels we should have moved 51 pixels after 2 sorry after 25 frames we should have moved 51 pixels but instead if we only move to 2 times 25 of course is 50 so after 25 frames or so we've lost one pixel in movement so you'll see this crop up in all sorts of ways as your programs get more advanced and you want to do different kinds of movement you want to do collisions you want to do one thing moving towards something else this rounding issue can cause a lot of strange errors that are really hard to figure out if you don't know what you're doing so now let's talk about how we prevent this problem or avoid this problem so to illustrate this I've just made another copy of our little frame based movement example where we're trying to move 120 pixels per second but this is going to come out to a 2.04 or sum or something like that right a noninteger mil and the way that you prevent this rounding problem is you store your price sprites position or you track your spiced position separately from the rectangle so for example since we're moving in the X direction I'm gonna make a px variable this is position X and I'm gonna set it equal to 0 because we're gonna start on the left hand side of the screen and now instead of increasing my rectangles X by the velocity I'm going to increase px so now P X will become 2.04 and then 4.08 and so on and it doesn't get rounded and we'll take the will use the PX to determine whether we need to wrap around the screen and then once we've calculated what our px should be we set our rectangle to be equal to that to that position right now obviously if px is 4.5 or something then the rectangle will be put to 4 but as soon as this gets to the next it gets passed the next integer the rectangle will move there but we're still keeping the right count of how our position is changing and if you look at this it will be a lot smoother there's none of those little stutters that we saw before when it would have when it was rounding to the next pixel in fact we're not losing the every 25 frames we're not losing the 1 pixel and dropping from 51 to 50 where you're actually moving 51 pixels after 21 frames so that's it to avoid the rounding problems you just keep track of your sprites position in a separate variable that can stay being a real number do your calculations on it and then just draw your rectangle at the pixel that's closest to where it's supposed to be and then everything will will look fine of course in this example we only were moving horizontally so if you have vertical movement and then you also need to keep track of it V Y and a position Y so you have two variables for each thing if you have acceleration happening because of gravity or anything like that you have to have an acceleration X&Y so you can start to see the number of variables is starting to increase and there's a lot more to keep track out and have it separately keep track of VX and V Y and all those kind of things is another problem and in the next video we'll talk about how you can solve that problem and simplify the number of variables that you have to keep track of thanks for watching I hope this video was useful for you and helps you avoid some of those rounding integer vs. real problems that a lot of new programmers run into and wind up scratching their heads about as always if you enjoyed this lesson please press the like button below and if you haven't already subscribed please do so so you can find out about the next video as soon as it's released thanks and I'll see you next time you
