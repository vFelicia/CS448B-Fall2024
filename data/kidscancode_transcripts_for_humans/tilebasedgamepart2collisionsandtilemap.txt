With timestamps:

00:00 - welcome back to game development with
00:02 - pame this is part two of our tile based
00:04 - game project and in this video we'll be
00:07 - talking about uh wall collisions and
00:11 - tile
00:12 - maps in our last video we created a
00:15 - simple grid of tiles with a Sprite that
00:18 - we could move around on that grid with
00:22 - by pressing the arrow keys in the four
00:24 - directions and then we created a wall
00:27 - which is just a object that occupies one
00:30 - square so I made a line of squares here
00:32 - that that's going to represent the wall
00:35 - and now what we need to do is we make
00:37 - need to make it so that our Sprite
00:38 - cannot move through those wall
00:42 - tiles we're going to do that by going
00:45 - over to our
00:47 - Sprite and we're going to make it so
00:49 - that right here when we move this tells
00:52 - us what Square we're going to move into
00:54 - well we're only going to allow the
00:56 - Sprite to move into that square if it's
00:59 - empty so so we need to check to see if
01:01 - something is in this square at dxdy that
01:04 - we want to move
01:06 - into so we're going to define a command
01:09 - called collide with
01:15 - walls and that's going to we're going to
01:17 - pass it the DX and the
01:19 - Dy of where we want to check and I'm
01:22 - going to make give those default values
01:23 - of zero so that we
01:26 - can check any direction we want and if
01:29 - we we want we can only pass it one one
01:32 - of those values and it'll use the the
01:34 - zero for the other value so this just
01:37 - means we need to do a little Loop and we
01:39 - need to go
01:41 - through uh each of the walls
01:45 - in The Walls
01:47 - Group okay for each of those walls we're
01:50 - going to check and see if the walls X
01:53 - and Y match
01:56 - the x of the and Y of the player Plus
01:59 - the move that we want to make so if the
02:02 - space we're going to move into is equal
02:05 - to the walls X and the walls
02:12 - y right if both of those things are true
02:15 - then we must have tried to move into a
02:17 - square that has a wall in it so we're
02:19 - not going to allow that square we're
02:20 - going to return true and say we did
02:23 - Collide and then if not then we will
02:26 - return false so collide with walls is
02:29 - going to tell us true if we tried to
02:30 - move into a square that where a wall is
02:32 - false if we did not so here this move
02:36 - we're not going to allow the player to
02:39 - CH to change their X and Y unless
02:42 - Collide walls is false so we're going to
02:44 - say if
02:46 - not collide with
02:50 - walls and just use the DX and Dy that
02:53 - we're using and we'll indent these and
02:57 - that should do it so we'll go over to
02:58 - our main and we will run
03:01 - it and now I am no longer able to move
03:05 - through this wall from any
03:08 - direction I'm holding the arrow key down
03:11 - just not letting me move into that space
03:12 - so the the move command doesn't even
03:14 - happen because
03:17 - it sees that that space is
03:21 - occupied okay so now we have walls that
03:24 - work and we can spawn walls at any
03:26 - location we
03:28 - want um and and they'll all work as long
03:31 - as you know we are in The Walls Group
03:34 - which all the walls are are it's going
03:36 - to not allow us to move into spaces that
03:38 - are occupied by these objects but what
03:41 - if we want to lay
03:42 - out a level a maze or a dungeon or some
03:47 - other kind
03:48 - of world for us to walk around
03:51 - in adding all these little squares and
03:54 - figuring out the coordinates of each
03:56 - Square um is going to be really tedious
04:00 - and cover
04:01 - some and so the solution for that is to
04:05 - use something called a map file and
04:07 - there's a lot of different ways to do
04:09 - this uh to begin with we're going to use
04:12 - kind of the simplest version possible uh
04:15 - for doing this which is just a little
04:18 - text file that's going to be a map of
04:20 - our level and then our game is going to
04:22 - load that map and create walls wherever
04:24 - the map says wall should be okay so if
04:27 - we remember from last
04:30 - time this is our width and height and
04:33 - our tile size so we know that we have 32
04:37 - tiles across and 24 tiles
04:42 - down so if I make a new
04:45 - file and I'm going to save this and I'm
04:48 - going to call
04:49 - this I'm going to call this
04:51 - file map.
04:55 - txt this is not going to be a Python
04:57 - program this is just going to be a text
04:58 - file and and I'm going to up the font a
05:00 - little bit so I know I need this to be
05:05 - 32 across so I'm going to hold down the
05:08 - dot until I see myself get to column
05:12 - number 32 okay so now I know that's 32
05:17 - dots
05:19 - across and then I'm going to duplicate
05:21 - that line until I have 24 of
05:26 - them there we go let's make my window a
05:28 - little bit taller
05:30 - so we can see them all one more I'm
05:32 - pressing command shift and D on a on
05:35 - Windows you would press control shift d
05:38 - that duplicates a line so now I have a
05:40 - grid here of 32 by
05:45 - 24 uh little dots I just used a period
05:49 - these are going to represent the squares
05:52 - in our grid so what I could do is
05:55 - anywhere I wanted there to be a wall
05:58 - like for example let's say I wanted a
06:00 - wall all the way across the
06:02 - top right I'm going to type ones here
06:05 - anywhere that I'm going to type ones
06:07 - anywhere I want there to be a
06:10 - wall and then I'll do the same thing I
06:13 - will just copy that and make that the
06:15 - last line too so now I have I'll have
06:17 - walls along the top and bottom of my
06:20 - screen and we could even add walls along
06:23 - the side if we just put a one there and
06:27 - I will delete all these blank ones
06:30 - and we will just duplicate that
06:34 - instead okay so this is going to be my
06:38 - map right now I just have oh let's throw
06:41 - a few in the middle just so we have
06:44 - something okay so here I've got
06:47 - some walls going all the way around the
06:49 - edges of my screen and then a little
06:52 - line of walls in the middle so this is
06:55 - my map file so now I want my program to
06:58 - load this file look through it and
07:03 - anywhere any box where it finds a one
07:06 - it's going to generate a wall at that X
07:09 - and
07:10 - Y so we're going to do that in our load
07:12 - data here and we need to import the path
07:17 - command to handle all of our file
07:21 - location stuff depending on whether
07:23 - we're on Windows or Os 10 or whatever
07:25 - and make sure we can locate where this
07:28 - file is when we run our
07:31 - program so we're going to put that our
07:33 - game folder is path.
07:37 - durame
07:39 - file that's the location where our game
07:44 - this main.py where our game is running
07:46 - from so we know what our folder is so
07:48 - now we can open up the map.
07:53 - text and we talked about opening files
07:57 - and reading from them uh back in our
08:01 - schmu game project when we were talking
08:03 - about saving and loading the high score
08:05 - so I'll link to that below if you want a
08:08 - refresher of how the open command works
08:11 - and how you get it to read from
08:14 - files so we're just going to say path.
08:17 - jooin game folder map.
08:22 - dxt and we need to say that we're doing
08:26 - that in a read we're opening that file
08:28 - to read
08:32 - okay and all we're going to do is we're
08:34 - just going to say for each line in F we
08:37 - want to stick that in
08:39 - a list so before our Loop let's make a
08:45 - variable called map data and it's just
08:48 - going to be a list an empty list and for
08:50 - each line we're just going to say map
08:52 - data.
08:53 - append the line so at the end of this
08:56 - loop I will have read in
09:01 - line by line each line of this file one
09:04 - after another and each line will just
09:06 - get appended to that list so we'll have
09:08 - a list of
09:09 - 24 lines and each line will be a string
09:13 - containing 32
09:16 - characters and we have our map
09:18 - data in our program
09:23 - now so now we need to read or or sorry
09:26 - we need to Loop through that map data
09:28 - and
09:30 - any location we find A1 we're going to
09:32 - spawn a wall and I suppose technically
09:36 - we should do that in our new right where
09:39 - we spawn walls so let's take this map
09:42 - data variable and let's rename or let's
09:45 - call that self. map data so
09:48 - it's one of our games properties and
09:51 - down here in
09:53 - New we're going to do the wall spawning
09:55 - so I'm going to erase this because we
09:57 - don't want to do it this man manual way
10:00 - anymore and now we're going to Loop
10:02 - through our map
10:04 - data list so I'm going to say for row so
10:09 - each of the items in the list is a
10:12 - row row comma tiles in
10:15 - enumerate map
10:18 - data and so real quick let's take a step
10:22 - to the side and talk about what
10:24 - enumerate
10:28 - does so if we go over here and open a
10:32 - python
10:33 - shell we've worked with lists plenty of
10:36 - times right all the time we work with
10:38 - lists and let's just make a quick list
10:40 - here that has four items in it a b c and
10:43 - d and we know those will be indexed 0 1
10:46 - 2 and three right and we know that we
10:48 - can refer
10:50 - to index number zero is the a we know
10:54 - that
10:56 - for item in L you can say print item and
11:00 - that just Loops through the list and
11:02 - looks at each item at a
11:04 - time and that's all stuff you've seen
11:07 - before but sometimes in your loop as you
11:11 - go through you want the
11:14 - item and you want its index number and
11:17 - so that's what enumerate is for so if I
11:20 - say
11:22 - for item or sorry for
11:26 - index item in a new
11:30 - numerate l so what this is going to do
11:33 - is each time through the list it's going
11:35 - to give me both variables it's going to
11:37 - give me the index this first one will be
11:40 - the index of the item and this will be
11:43 - the value so I will get zero and a and
11:47 - then here I'll will get one and B so
11:50 - I'll just print them out real quick so
11:51 - you can see print the index print the
11:54 - item and you see I get zero and a zero
11:57 - and b or sorry one and B and so
12:00 - on and that's what we want to do here
12:02 - because each
12:05 - row in this map file this is row this
12:07 - will be row
12:08 - zero so that's the that's going to be
12:11 - the Y value of all of these is because
12:14 - they're going to be on row zero these
12:16 - are going to be on Row one or y equals 1
12:20 - and so on so I want all this data but I
12:22 - also want to know what index it is so I
12:25 - know what row that is so row is going to
12:27 - be equal to the index value
12:29 - and tiles is going to be equal to that
12:31 - string of all the
12:33 - characters well now we need to do the
12:35 - same thing through that
12:38 - string and we're going to say
12:42 - enumerate tiles so what we're going to
12:44 - do is we're going to do an enumerate on
12:47 - this
12:48 - string and so index number zero will be
12:51 - a one one will be a one but that index
12:54 - number will be the x value of the tile
12:57 - so when I get to this tile
12:59 - I'll have a row of zero and a column of
13:04 - 14 and so this will be the X and the Y
13:07 - of where to put that
13:08 - wall so now I'll have the value and I'll
13:12 - have the row and the column so all I
13:14 - need to do now is just see
13:17 - if the tile is equal to
13:20 - A1 right if I found a one and not a dot
13:24 - in that location then I can spawn a wall
13:27 - and the wall is going to be
13:30 - at the correct column and the correct
13:37 - row okay and that is all except I left
13:41 - out the word in
13:43 - here that red dot telling me I have an
13:45 - error message and let's run our program
13:48 - and see what happens so there we go
13:50 - there are my walls and you can see I
13:51 - can't go through
13:53 - them but it looks like I was one off on
13:56 - the
13:57 - size
14:01 - yep it turns out I went back and I
14:02 - counted I had counted 31 uh dots across
14:06 - not 32 so I was off by one so I've added
14:09 - one
14:09 - more column here on
14:12 - each row and now I have the right number
14:16 - of tiles and you see I'm spawning a wall
14:20 - everywhere I wanted there to be a
14:22 - wall now you can see the easy thing now
14:25 - to change things is if I want to go in
14:27 - here and make a change
14:30 - because I want a wall I just have to
14:32 - change the map file and I run my program
14:35 - again it reads that mop file now I have
14:38 - a a wall where I wanted there to be a
14:46 - wall and here I've pasted in a map I
14:49 - made before that's just a little bit
14:51 - fancier it looks a little nicer that I'm
14:53 - going to use for my kind of default map
14:55 - here that's got some walls that you got
14:58 - to walk around
15:01 - okay and so that's a good start one
15:03 - problem we have now though
15:06 - is when we run
15:08 - this my player spawns right here right
15:12 - well what if there was a wall there we
15:13 - don't want our player to spawn inside a
15:17 - wall so that means we can add to our map
15:21 - a player spawn location so I can say
15:24 - like for example if I want my player to
15:25 - spawn in the lower left I can add a p
15:30 - and now in my code I can just say when I
15:34 - find instead of spawning the player at
15:36 - 1010 I'm going to say if the tile was a
15:40 - p then I'm going to paste in
15:44 - that player spawning command and I'm
15:47 - just going to change this to use the
15:50 - column and the row where we just found
15:55 - the player and there we go now the
15:57 - player spawns at the spot I want him to
15:59 - spawn
16:03 - in so that'll do it for this video uh
16:07 - we've gone a little bit long this time
16:08 - around um go ahead and play around with
16:10 - the map create your create your own uh
16:14 - lay it out the way you like it and in
16:16 - the next video we'll talk about um some
16:19 - other ways we could make our Player move
16:21 - more smoothly around the map and also
16:23 - what kind of game this could turn
16:26 - into as always please press the like
16:29 - button and subscribe for the next video
16:32 - thanks for
16:44 - watching

Cleaned transcript:

welcome back to game development with pame this is part two of our tile based game project and in this video we'll be talking about uh wall collisions and tile maps in our last video we created a simple grid of tiles with a Sprite that we could move around on that grid with by pressing the arrow keys in the four directions and then we created a wall which is just a object that occupies one square so I made a line of squares here that that's going to represent the wall and now what we need to do is we make need to make it so that our Sprite cannot move through those wall tiles we're going to do that by going over to our Sprite and we're going to make it so that right here when we move this tells us what Square we're going to move into well we're only going to allow the Sprite to move into that square if it's empty so so we need to check to see if something is in this square at dxdy that we want to move into so we're going to define a command called collide with walls and that's going to we're going to pass it the DX and the Dy of where we want to check and I'm going to make give those default values of zero so that we can check any direction we want and if we we want we can only pass it one one of those values and it'll use the the zero for the other value so this just means we need to do a little Loop and we need to go through uh each of the walls in The Walls Group okay for each of those walls we're going to check and see if the walls X and Y match the x of the and Y of the player Plus the move that we want to make so if the space we're going to move into is equal to the walls X and the walls y right if both of those things are true then we must have tried to move into a square that has a wall in it so we're not going to allow that square we're going to return true and say we did Collide and then if not then we will return false so collide with walls is going to tell us true if we tried to move into a square that where a wall is false if we did not so here this move we're not going to allow the player to CH to change their X and Y unless Collide walls is false so we're going to say if not collide with walls and just use the DX and Dy that we're using and we'll indent these and that should do it so we'll go over to our main and we will run it and now I am no longer able to move through this wall from any direction I'm holding the arrow key down just not letting me move into that space so the the move command doesn't even happen because it sees that that space is occupied okay so now we have walls that work and we can spawn walls at any location we want um and and they'll all work as long as you know we are in The Walls Group which all the walls are are it's going to not allow us to move into spaces that are occupied by these objects but what if we want to lay out a level a maze or a dungeon or some other kind of world for us to walk around in adding all these little squares and figuring out the coordinates of each Square um is going to be really tedious and cover some and so the solution for that is to use something called a map file and there's a lot of different ways to do this uh to begin with we're going to use kind of the simplest version possible uh for doing this which is just a little text file that's going to be a map of our level and then our game is going to load that map and create walls wherever the map says wall should be okay so if we remember from last time this is our width and height and our tile size so we know that we have 32 tiles across and 24 tiles down so if I make a new file and I'm going to save this and I'm going to call this I'm going to call this file map. txt this is not going to be a Python program this is just going to be a text file and and I'm going to up the font a little bit so I know I need this to be 32 across so I'm going to hold down the dot until I see myself get to column number 32 okay so now I know that's 32 dots across and then I'm going to duplicate that line until I have 24 of them there we go let's make my window a little bit taller so we can see them all one more I'm pressing command shift and D on a on Windows you would press control shift d that duplicates a line so now I have a grid here of 32 by 24 uh little dots I just used a period these are going to represent the squares in our grid so what I could do is anywhere I wanted there to be a wall like for example let's say I wanted a wall all the way across the top right I'm going to type ones here anywhere that I'm going to type ones anywhere I want there to be a wall and then I'll do the same thing I will just copy that and make that the last line too so now I have I'll have walls along the top and bottom of my screen and we could even add walls along the side if we just put a one there and I will delete all these blank ones and we will just duplicate that instead okay so this is going to be my map right now I just have oh let's throw a few in the middle just so we have something okay so here I've got some walls going all the way around the edges of my screen and then a little line of walls in the middle so this is my map file so now I want my program to load this file look through it and anywhere any box where it finds a one it's going to generate a wall at that X and Y so we're going to do that in our load data here and we need to import the path command to handle all of our file location stuff depending on whether we're on Windows or Os 10 or whatever and make sure we can locate where this file is when we run our program so we're going to put that our game folder is path. durame file that's the location where our game this main.py where our game is running from so we know what our folder is so now we can open up the map. text and we talked about opening files and reading from them uh back in our schmu game project when we were talking about saving and loading the high score so I'll link to that below if you want a refresher of how the open command works and how you get it to read from files so we're just going to say path. jooin game folder map. dxt and we need to say that we're doing that in a read we're opening that file to read okay and all we're going to do is we're just going to say for each line in F we want to stick that in a list so before our Loop let's make a variable called map data and it's just going to be a list an empty list and for each line we're just going to say map data. append the line so at the end of this loop I will have read in line by line each line of this file one after another and each line will just get appended to that list so we'll have a list of 24 lines and each line will be a string containing 32 characters and we have our map data in our program now so now we need to read or or sorry we need to Loop through that map data and any location we find A1 we're going to spawn a wall and I suppose technically we should do that in our new right where we spawn walls so let's take this map data variable and let's rename or let's call that self. map data so it's one of our games properties and down here in New we're going to do the wall spawning so I'm going to erase this because we don't want to do it this man manual way anymore and now we're going to Loop through our map data list so I'm going to say for row so each of the items in the list is a row row comma tiles in enumerate map data and so real quick let's take a step to the side and talk about what enumerate does so if we go over here and open a python shell we've worked with lists plenty of times right all the time we work with lists and let's just make a quick list here that has four items in it a b c and d and we know those will be indexed 0 1 2 and three right and we know that we can refer to index number zero is the a we know that for item in L you can say print item and that just Loops through the list and looks at each item at a time and that's all stuff you've seen before but sometimes in your loop as you go through you want the item and you want its index number and so that's what enumerate is for so if I say for item or sorry for index item in a new numerate l so what this is going to do is each time through the list it's going to give me both variables it's going to give me the index this first one will be the index of the item and this will be the value so I will get zero and a and then here I'll will get one and B so I'll just print them out real quick so you can see print the index print the item and you see I get zero and a zero and b or sorry one and B and so on and that's what we want to do here because each row in this map file this is row this will be row zero so that's the that's going to be the Y value of all of these is because they're going to be on row zero these are going to be on Row one or y equals 1 and so on so I want all this data but I also want to know what index it is so I know what row that is so row is going to be equal to the index value and tiles is going to be equal to that string of all the characters well now we need to do the same thing through that string and we're going to say enumerate tiles so what we're going to do is we're going to do an enumerate on this string and so index number zero will be a one one will be a one but that index number will be the x value of the tile so when I get to this tile I'll have a row of zero and a column of 14 and so this will be the X and the Y of where to put that wall so now I'll have the value and I'll have the row and the column so all I need to do now is just see if the tile is equal to A1 right if I found a one and not a dot in that location then I can spawn a wall and the wall is going to be at the correct column and the correct row okay and that is all except I left out the word in here that red dot telling me I have an error message and let's run our program and see what happens so there we go there are my walls and you can see I can't go through them but it looks like I was one off on the size yep it turns out I went back and I counted I had counted 31 uh dots across not 32 so I was off by one so I've added one more column here on each row and now I have the right number of tiles and you see I'm spawning a wall everywhere I wanted there to be a wall now you can see the easy thing now to change things is if I want to go in here and make a change because I want a wall I just have to change the map file and I run my program again it reads that mop file now I have a a wall where I wanted there to be a wall and here I've pasted in a map I made before that's just a little bit fancier it looks a little nicer that I'm going to use for my kind of default map here that's got some walls that you got to walk around okay and so that's a good start one problem we have now though is when we run this my player spawns right here right well what if there was a wall there we don't want our player to spawn inside a wall so that means we can add to our map a player spawn location so I can say like for example if I want my player to spawn in the lower left I can add a p and now in my code I can just say when I find instead of spawning the player at 1010 I'm going to say if the tile was a p then I'm going to paste in that player spawning command and I'm just going to change this to use the column and the row where we just found the player and there we go now the player spawns at the spot I want him to spawn in so that'll do it for this video uh we've gone a little bit long this time around um go ahead and play around with the map create your create your own uh lay it out the way you like it and in the next video we'll talk about um some other ways we could make our Player move more smoothly around the map and also what kind of game this could turn into as always please press the like button and subscribe for the next video thanks for watching
