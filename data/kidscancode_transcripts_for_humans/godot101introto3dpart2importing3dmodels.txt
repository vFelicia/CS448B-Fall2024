With timestamps:

00:00 - welcome to Godot 101 this is the intro
00:03 - to 3d series part 2 in the previous
00:06 - tutorial we started a 3d project and we
00:08 - looked at how to navigate and create 3d
00:10 - objects in this part you'll learn how to
00:12 - import existing 3d objects that you've
00:14 - made or downloaded and how to use more
00:16 - of godot's 3d nodes so besides using the
00:20 - built in primitive shapes how do we get
00:22 - 3d objects into our game well if you're
00:24 - familiar with 3d modeling software such
00:27 - as blender you can make your own models
00:29 - but if not there are many sources where
00:31 - you can download objects or even
00:32 - collections of objects for particular
00:34 - game types one of my favourite makers of
00:36 - free game art is Kenny you can find them
00:39 - at Ken ul and if you've watched them at
00:42 - my other tutorials we used a lot of his
00:44 - assets in our 2d projects so for this
00:48 - demo we're gonna be using this
00:50 - collection the Kenny platformer kit and
00:53 - it includes lots and lots of three
00:55 - models for making 3d platformer scenes
00:59 - like this including the platforms things
01:03 - like crates and barrels keys and coins
01:06 - all sorts of fun stuff like that so I'll
01:10 - include the link in the description
01:11 - below go ahead and download the asset
01:16 - pack like this and open it up now when
01:19 - you unzip this asset pack you're going
01:20 - to find that the models are available in
01:22 - a variety of different formats and some
01:25 - of these formats can be read by Godot
01:28 - and some can't the ones that are most
01:30 - common are obj obj you're gonna see very
01:34 - often if you go and download 3d models
01:37 - from various places obj is sort of an
01:39 - older format Dae is known as the
01:42 - Coolatta format and a lot of Godot
01:46 - tutorials will have you use the Colada
01:49 - exporter to generate daes if you're
01:52 - using blender and then there's GL TF
01:56 - which is a more it's a newer format with
02:00 - a lot more features and Godot supports
02:04 - it out of the box too and since we've
02:06 - got it that's the one we're going to use
02:07 - so just drag this folder into your
02:10 - project folder for Godot
02:13 - so I've dragged that folder into my
02:15 - Godot project folder and I renamed it to
02:17 - Kinney platformer kit and you can see
02:20 - this has got all these different model
02:25 - files in here so when we switch back
02:26 - over to the Godot editor you're going to
02:28 - see a progress bar while it goes through
02:31 - and imports all of those models
02:36 - so let's go over to our this folder and
02:38 - see what's going on so here we see I'm
02:41 - going to scroll down to the crate that's
02:43 - the one I want to start with the crate
02:45 - now if I click the import tab you'll see
02:48 - the options you have for importing and
02:51 - what's going to happen is Godot is going
02:53 - to make this model into a scene just
02:56 - like you would do if you were creating a
02:57 - new scene to put your object in and so
03:00 - we can tell it what type of node we want
03:03 - the route to be I'm gonna click this and
03:06 - I'm going to change it to a rigidbody so
03:10 - I want my crate to be a rigidbody and
03:13 - the root name is what it's going to be
03:16 - called when we open it I'm going to go
03:17 - ahead and change that to crate and I'm
03:20 - going to click on re-import now when I
03:23 - double click on the create file to open
03:25 - it it's gonna tell me that this file was
03:31 - automatically imported right and so you
03:34 - can't modify that this is the original
03:35 - file so what we what it's gonna do is
03:39 - create a new inherited scene based on
03:41 - that file and that's what we want so
03:43 - click new inherited and there we see our
03:45 - crate in our 3d space and it's a
03:49 - rigidbody and the mesh is a child of it
03:53 - and now we do have one small problem and
03:55 - it appears that when Kenny exported
03:57 - these models that he left in a bit of an
04:01 - offset and that's going to cause a
04:02 - problem because our crate is offset from
04:05 - our parent rigidbody and so when the
04:09 - rigid body rotates it's going to rotate
04:10 - around its center which means it's going
04:12 - to do this instead of rotating the way
04:15 - it should so we need to fix that by
04:17 - offsetting the mesh back over to the
04:21 - origin so click on the mesh and we're
04:26 - going to set its transform we're going
04:29 - to set the X to minus 0.5 we're going to
04:33 - set the Y to minus 0.25 and we're going
04:38 - to set the z to 0.5 so that it's
04:41 - centered back on the origin and so now
04:44 - when the rigid body rotates right the
04:48 - crate goes along with it
04:50 - now we also need a collision shape for
04:52 - this body so let's add one of those and
04:58 - the shape we want to give it is a box
05:01 - shape and so you can scale the box shape
05:05 - using these handles right to scale it to
05:09 - the size you want or you can click on
05:12 - box shape here and set the extents to
05:14 - the size you want
05:16 - now extents represent the distance from
05:18 - the center and since the crate is 0.5
05:22 - units across then our extent should be
05:27 - 0.25 in all directions and then we get a
05:31 - collision shape that perfectly fits the
05:34 - mesh so let's save our crate save that
05:39 - scene and let's see how we can use it
05:42 - I'm gonna make a new scene and I'm just
05:44 - gonna give it a plain spatial as a route
05:47 - and this is where we're going to bring
05:52 - our crate in but it creates a rigid body
05:54 - which means gravity acts on it so if we
05:55 - put this in into the scene and run it
05:58 - the creature is gonna fall away so we
06:00 - need something to be the ground and to
06:03 - do that we're just we're gonna add a
06:05 - static body
06:06 - static bodies are physics objects that
06:08 - don't move rename that to ground and
06:11 - then we're gonna add a mesh instance to
06:14 - it I'm going to use a plain mesh so a
06:21 - plain is a flat plain with only one side
06:23 - if you look from the underneath it's not
06:25 - there right it's a it's a flat surface
06:28 - one sided surface now this mesh is 2x2
06:32 - click here we can make it bigger I'm
06:35 - going to expand this to 10 by 10 so we
06:39 - have a nice large surface for our crates
06:45 - to stand on now another thing about
06:48 - meshes is the color of a primitive mesh
06:52 - is white by default so if you want it to
06:55 - be a different color we need to go into
06:57 - the material so you see here the mesh
07:00 - has a material property and we can
07:02 - assign it a new spatial
07:03 - material click on that and you'll see a
07:09 - whole list of properties we're gonna get
07:14 - into the details of materials a bit
07:16 - later but for right now the one you need
07:18 - to know is that the albedo property is
07:23 - the one that sets the color so I'm gonna
07:26 - click that so I'm gonna click that and
07:30 - I'm gonna give my create a nice dark
07:34 - green color for the ground now this mesh
07:39 - is not going to stop the crates from
07:42 - falling because it doesn't have a
07:43 - collision shape so we needed a collision
07:46 - shape with it as well now there's two
07:48 - ways to add collision shapes two meshes
07:51 - you saw the first way when we did the
07:53 - crate we added a collision shape and
07:55 - gave it a shape another way to do it is
07:58 - to click on the mesh and then here in
08:00 - this menu we can add a collision shape
08:03 - to it by choosing create convex
08:08 - collision sibling that will make a
08:11 - collision shape
08:12 - it's a sibling of the mesh which is what
08:14 - we want so it's a child of ground and it
08:17 - automatically calculates one that fits
08:19 - this object now let's instance a few of
08:25 - the crates in the scene and kind of
08:30 - arrange them in a stack
08:40 - okay so I have a nice wobbly stack of
08:43 - crates let's add a camera to the scene
08:46 - so we'll be able to see it and I'm just
08:50 - going to take that camera and move it up
08:53 - and angle it down at the scene and run
08:58 - it there we go our crates tumble to the
09:08 - ground now let's make this scene a
09:10 - little more dynamic than making the
09:12 - camera move I want the camera to orbit
09:14 - around and just look at this from all
09:17 - directions as its as its running now
09:19 - moving the camera in a circular motion
09:22 - could take a lot of math but there's no
09:26 - reason to do that
09:27 - all we need to do is add a new spatial
09:29 - node that's at the origin and make the
09:32 - camera a child of it because I'm gonna
09:36 - call this camera hub because now if we
09:40 - rotate that spatial the camera is
09:43 - attached to it so it will rotate along
09:46 - with it always pointing at the center so
09:49 - all we need to do is write a little code
09:51 - to make that camera hub rotate so let's
09:54 - add a script to our scene and we're
10:00 - going to just in the process function
10:04 - we're gonna tell the camera hub to
10:07 - rotate around the y-axis and I'm just
10:12 - gonna give it a small value in radians
10:17 - and now when we run that scene our
10:22 - camera is smoothly rotating around the
10:26 - scene one more thing we can add to our
10:31 - scene to make it look a little nicer is
10:33 - some light and in Godot there are a
10:35 - number of different light nodes you can
10:37 - choose from we're gonna use the
10:40 - directional light so we add that and I'm
10:43 - gonna pull this up in the air a bit so
10:46 - we can see it and what a directional
10:48 - light does is it simulates light from a
10:50 - distant source like the Sun
10:52 - so in practice what you get is parallel
10:57 - rays of light coming down from an
10:59 - infinite distance and hitting everything
11:02 - at the same angle and really it makes no
11:06 - difference where you put this node all
11:08 - that matters is what direction you have
11:10 - it aiming so if we want the light to
11:12 - point straight down we would do that all
11:15 - right and so you can see the effect of
11:19 - the light on the objects getting
11:21 - brighter and smaller as I brighten and
11:23 - dimmer as I rotate it back and forth so
11:26 - we put it at an angle so we have some
11:30 - sunlight streaming down actually maybe I
11:33 - will tilt it this way a little bit too
11:35 - but there's no shadows shadows are
11:38 - something you have to turn on if you go
11:39 - over into the the light properties there
11:42 - is a shadow option and that will get
11:46 - some shadows to our objects now let's
11:49 - run it and see what this scene looks
11:50 - like very nice all right so that will do
11:58 - it for this tutorial in this installment
12:01 - you learned how to import 3d models and
12:04 - turn them into objects in your game how
12:07 - to create a scene and add some lighting
12:11 - in the next video we'll go a little more
12:14 - into depth in creating a more complex
12:17 - scene and creating a user controlled
12:19 - character thanks for watching and I'll
12:21 - see you next time
12:29 - you

Cleaned transcript:

welcome to Godot 101 this is the intro to 3d series part 2 in the previous tutorial we started a 3d project and we looked at how to navigate and create 3d objects in this part you'll learn how to import existing 3d objects that you've made or downloaded and how to use more of godot's 3d nodes so besides using the built in primitive shapes how do we get 3d objects into our game well if you're familiar with 3d modeling software such as blender you can make your own models but if not there are many sources where you can download objects or even collections of objects for particular game types one of my favourite makers of free game art is Kenny you can find them at Ken ul and if you've watched them at my other tutorials we used a lot of his assets in our 2d projects so for this demo we're gonna be using this collection the Kenny platformer kit and it includes lots and lots of three models for making 3d platformer scenes like this including the platforms things like crates and barrels keys and coins all sorts of fun stuff like that so I'll include the link in the description below go ahead and download the asset pack like this and open it up now when you unzip this asset pack you're going to find that the models are available in a variety of different formats and some of these formats can be read by Godot and some can't the ones that are most common are obj obj you're gonna see very often if you go and download 3d models from various places obj is sort of an older format Dae is known as the Coolatta format and a lot of Godot tutorials will have you use the Colada exporter to generate daes if you're using blender and then there's GL TF which is a more it's a newer format with a lot more features and Godot supports it out of the box too and since we've got it that's the one we're going to use so just drag this folder into your project folder for Godot so I've dragged that folder into my Godot project folder and I renamed it to Kinney platformer kit and you can see this has got all these different model files in here so when we switch back over to the Godot editor you're going to see a progress bar while it goes through and imports all of those models so let's go over to our this folder and see what's going on so here we see I'm going to scroll down to the crate that's the one I want to start with the crate now if I click the import tab you'll see the options you have for importing and what's going to happen is Godot is going to make this model into a scene just like you would do if you were creating a new scene to put your object in and so we can tell it what type of node we want the route to be I'm gonna click this and I'm going to change it to a rigidbody so I want my crate to be a rigidbody and the root name is what it's going to be called when we open it I'm going to go ahead and change that to crate and I'm going to click on reimport now when I double click on the create file to open it it's gonna tell me that this file was automatically imported right and so you can't modify that this is the original file so what we what it's gonna do is create a new inherited scene based on that file and that's what we want so click new inherited and there we see our crate in our 3d space and it's a rigidbody and the mesh is a child of it and now we do have one small problem and it appears that when Kenny exported these models that he left in a bit of an offset and that's going to cause a problem because our crate is offset from our parent rigidbody and so when the rigid body rotates it's going to rotate around its center which means it's going to do this instead of rotating the way it should so we need to fix that by offsetting the mesh back over to the origin so click on the mesh and we're going to set its transform we're going to set the X to minus 0.5 we're going to set the Y to minus 0.25 and we're going to set the z to 0.5 so that it's centered back on the origin and so now when the rigid body rotates right the crate goes along with it now we also need a collision shape for this body so let's add one of those and the shape we want to give it is a box shape and so you can scale the box shape using these handles right to scale it to the size you want or you can click on box shape here and set the extents to the size you want now extents represent the distance from the center and since the crate is 0.5 units across then our extent should be 0.25 in all directions and then we get a collision shape that perfectly fits the mesh so let's save our crate save that scene and let's see how we can use it I'm gonna make a new scene and I'm just gonna give it a plain spatial as a route and this is where we're going to bring our crate in but it creates a rigid body which means gravity acts on it so if we put this in into the scene and run it the creature is gonna fall away so we need something to be the ground and to do that we're just we're gonna add a static body static bodies are physics objects that don't move rename that to ground and then we're gonna add a mesh instance to it I'm going to use a plain mesh so a plain is a flat plain with only one side if you look from the underneath it's not there right it's a it's a flat surface one sided surface now this mesh is 2x2 click here we can make it bigger I'm going to expand this to 10 by 10 so we have a nice large surface for our crates to stand on now another thing about meshes is the color of a primitive mesh is white by default so if you want it to be a different color we need to go into the material so you see here the mesh has a material property and we can assign it a new spatial material click on that and you'll see a whole list of properties we're gonna get into the details of materials a bit later but for right now the one you need to know is that the albedo property is the one that sets the color so I'm gonna click that so I'm gonna click that and I'm gonna give my create a nice dark green color for the ground now this mesh is not going to stop the crates from falling because it doesn't have a collision shape so we needed a collision shape with it as well now there's two ways to add collision shapes two meshes you saw the first way when we did the crate we added a collision shape and gave it a shape another way to do it is to click on the mesh and then here in this menu we can add a collision shape to it by choosing create convex collision sibling that will make a collision shape it's a sibling of the mesh which is what we want so it's a child of ground and it automatically calculates one that fits this object now let's instance a few of the crates in the scene and kind of arrange them in a stack okay so I have a nice wobbly stack of crates let's add a camera to the scene so we'll be able to see it and I'm just going to take that camera and move it up and angle it down at the scene and run it there we go our crates tumble to the ground now let's make this scene a little more dynamic than making the camera move I want the camera to orbit around and just look at this from all directions as its as its running now moving the camera in a circular motion could take a lot of math but there's no reason to do that all we need to do is add a new spatial node that's at the origin and make the camera a child of it because I'm gonna call this camera hub because now if we rotate that spatial the camera is attached to it so it will rotate along with it always pointing at the center so all we need to do is write a little code to make that camera hub rotate so let's add a script to our scene and we're going to just in the process function we're gonna tell the camera hub to rotate around the yaxis and I'm just gonna give it a small value in radians and now when we run that scene our camera is smoothly rotating around the scene one more thing we can add to our scene to make it look a little nicer is some light and in Godot there are a number of different light nodes you can choose from we're gonna use the directional light so we add that and I'm gonna pull this up in the air a bit so we can see it and what a directional light does is it simulates light from a distant source like the Sun so in practice what you get is parallel rays of light coming down from an infinite distance and hitting everything at the same angle and really it makes no difference where you put this node all that matters is what direction you have it aiming so if we want the light to point straight down we would do that all right and so you can see the effect of the light on the objects getting brighter and smaller as I brighten and dimmer as I rotate it back and forth so we put it at an angle so we have some sunlight streaming down actually maybe I will tilt it this way a little bit too but there's no shadows shadows are something you have to turn on if you go over into the the light properties there is a shadow option and that will get some shadows to our objects now let's run it and see what this scene looks like very nice all right so that will do it for this tutorial in this installment you learned how to import 3d models and turn them into objects in your game how to create a scene and add some lighting in the next video we'll go a little more into depth in creating a more complex scene and creating a user controlled character thanks for watching and I'll see you next time you
