With timestamps:

00:00 - welcome back to a game development with
00:01 - pygame we are continuing to build our
00:04 - shmoop game and this is part seven where
00:08 - we will add a score to the game and also
00:11 - discuss how you draw text on the screen
00:16 - okay so we're going to add a score to
00:18 - the game then all we need to do is down
00:22 - here before the game loop we should
00:25 - initialize our score variable to be
00:28 - starting out at zero and then we want to
00:31 - give ourselves some points right here
00:34 - every time a bullet hits a mob so now we
00:38 - could say in here just something simple
00:40 - like hits and just add one to it you get
00:45 - a point for every for every mob you blow
00:48 - up but that's a little boring because we
00:51 - have big ones and small ones and it'd be
00:53 - nice if the you know the smaller meteors
00:57 - were worth more much more points because
00:59 - they're harder to hit so if we looked at
01:04 - our our images we have our big meteor
01:08 - which is about a hundred pixels wide and
01:11 - we have our tiny meteor which is only
01:15 - about twenty pixels wide so what I want
01:19 - is for this tiny one to be worth more
01:21 - than the other well if this meteor is a
01:24 - hundred pixels wide if we look back what
01:28 - we did was we set the radius here to be
01:33 - equal to the width of the rectangle
01:35 - times 0.85 divided by 2 so the radius on
01:40 - this on the big meteor is going to be
01:45 - about 42 43 pixels but on the small one
01:49 - it's going to be about only 8 pixels so
01:55 - if we want that radius of 8 to be worth
01:58 - more points than the radius of 43 then
02:03 - what we can do is make the score add 50
02:07 - minus the radius of whatever we hit so
02:13 - that way for the
02:13 - big meteors that are 43 we'll get seven
02:17 - points and for the little tiny ones
02:19 - we're gonna get 50 minus eight which is
02:21 - forty two point so we're gonna get a lot
02:23 - more points for heating the tiny ones
02:24 - and we can adjust that make it a little
02:27 - more fancy later but that's gonna be
02:30 - good enough for now so now we have a
02:33 - score and the score is being tracked but
02:35 - we have to draw it on the screen where
02:37 - we can see it and that's where things
02:40 - get a little tricky drawing text on the
02:43 - screen and PI game is a little involved
02:47 - and it takes several steps and if you're
02:51 - gonna draw the text more than one time
02:53 - then that means you're going to have to
02:55 - do those steps over and over again so it
02:59 - makes a lot of sense to define a
03:01 - function to handle just drawing text on
03:04 - the screen and then you can reuse that
03:07 - whenever you need it
03:09 - so what we're gonna do is up here at the
03:13 - top here will define we're going to
03:14 - define a a new command called draw text
03:21 - okay and the parameters of that are
03:24 - going to be a surface that we're gonna
03:26 - that we want that text drawn on the
03:29 - actual text which will be a string that
03:32 - we want it to for what we want it to say
03:35 - we'll put a size for how big we want the
03:38 - the font to be and then an x and a y for
03:42 - the location of that text okay so the
03:50 - first thing we need is we need a font
03:52 - now fonts can get tricky because not
03:55 - every computer necessarily has the same
03:58 - fonts on it so if you try to use a font
04:00 - that exists on your computer and then
04:02 - you take that program and try and run it
04:05 - on your friend's computer and they don't
04:07 - have that font then things might not
04:10 - work the way you expect so it's usually
04:12 - a good idea to use a very generically
04:17 - named font and you can do that the
04:22 - easiest way to do that is I'm gonna make
04:24 - a quick variable name here go to font
04:26 - name
04:27 - and I'm gonna use the PI game font match
04:31 - font command and what that match font
04:34 - command does is instead of having to
04:36 - know the exact name of the font my game
04:40 - will search through the list of fonts on
04:43 - your computer and find the closest match
04:47 - to that name so that way you don't have
04:49 - to worry about whether it's Arial bold
04:52 - or Arial TTFN or some other name you can
04:55 - just put a name there and and as long as
04:59 - you stick to something generic like
05:00 - Arial or Times or one of those you're
05:02 - gonna be fine on just about every
05:04 - computer otherwise you're going to need
05:06 - to include a font file along with your
05:10 - game that's specific to your computer
05:12 - and that works great if you want you
05:15 - know really custom looking text on your
05:19 - game but we'll get to that a little
05:21 - later for now I just want to talk about
05:23 - drawing a generic text okay so we have
05:26 - our so we have our font okay so we're
05:29 - going to create a font object that's
05:33 - pygame font dot font using the font name
05:37 - and the size okay so now we have a font
05:41 - object that can create text and what we
05:45 - mean by creating text is pygame
05:47 - everything Piegan does is in pixels so
05:50 - it needs to figure out exactly what
05:51 - pixels it needs to use to draw the text
05:55 - in that particular font so we're going
05:59 - to create a surface for it to render
06:02 - those pixels on to and we just say font
06:06 - render whatever the text we had true to
06:12 - talk about in a second and then a color
06:14 - that we want it to be rendered in okay
06:18 - what this true here means is this can be
06:21 - set to true or false and this tells
06:23 - python whether you want the text to be
06:27 - anti-aliased or not and what that means
06:30 - is here's a picture of course when
06:34 - you're trying to have curved lines made
06:35 - out of pixels you're gonna get these
06:37 - little jagged lines and so this is
06:40 - called
06:41 - it's called aliasing what that's called
06:43 - when you get the jagged lines
06:46 - anti-aliasing means taking the font and
06:48 - instead of just drawing it in all black
06:51 - pixels it puts these gray and lighter
06:54 - gray almost to white fuzzy pixels around
06:58 - it so that you know when it's sumed in
07:01 - you can see this but when you zoom out
07:02 - it looks nice and smooth you can see the
07:05 - difference between this a-here and the
07:07 - word alias and this aid down here in a
07:12 - second example it looks a lot smoother
07:14 - and nicer to read so we've set this to
07:18 - true so that our font will look nice
07:22 - okay now we need to figure out the
07:25 - rectangle of that text surface so that
07:32 - we can place it and we're gonna set that
07:37 - rectangles some point on that rectangle
07:43 - to the X&Y now we have a decision here
07:45 - to make to just remember when we place
07:47 - when we place some text like say we're
07:50 - drawing a word Pi game here and this box
07:52 - is around it
07:53 - do we want to Center it on the XY that
07:55 - we give do we want the XY to be this
07:57 - corner you know there's a lot of options
08:00 - for how we can locate things I'm just
08:04 - for now gonna make this be the mid top
08:06 - which means if this is the box this is
08:10 - the rectangle we're gonna put x and y is
08:13 - gonna X comma Y is gonna be this point
08:15 - here at the middle top of the rectangle
08:18 - so put that's gonna be XY and then we
08:23 - just need to take that text surface that
08:25 - we've created that has the nice
08:28 - anti-aliased drawn text and we want to
08:32 - flip that on to our whatever surface we
08:36 - were aiming at which is usually going to
08:37 - be our screen but whatever surface we
08:40 - specified we're gonna blip that on to
08:43 - this screen so we've lit the text
08:46 - surface at the location of the text
08:51 - rectangle okay now we have our nice draw
08:54 - text
08:54 - and anytime we want to draw some text we
08:56 - can just tell it what we want it to draw
08:59 - and it'll go do all the stuff to get it
09:01 - out of the screen so let's do that down
09:04 - at the bottom in our game loops draw
09:07 - section we can add a little bit to draw
09:11 - the text so you can decide what order to
09:17 - do these in if we draw it after the
09:18 - sprites then the text will be above the
09:20 - sprites so it'll look like the meteors
09:21 - are flying behind the score which will
09:25 - look pretty good so we're just gonna say
09:28 - draw text okay screen is the surface we
09:32 - want to draw on the text that we want is
09:36 - a string of the score the font size that
09:41 - we want is obviously optional I'm gonna
09:46 - put 18 there I think it'll be a good
09:48 - size to read and then the x and the y so
09:50 - we're gonna say with over two so it's
09:53 - gonna be centered horizontally and then
09:56 - I'm gonna say 10 so it's just 10 pixels
09:59 - down from the top of the screen okay now
10:03 - let's see what that looks like so see I
10:04 - have that zero up there looks like I
10:11 - made a little typo up here just be
10:15 - adding to score did any of you catch
10:17 - that before cuz I sure hope you did I
10:20 - didn't try running my program and pay
10:22 - attention to the fact that I was
10:24 - supposed to be adding the points to the
10:26 - score hopefully you noticed that if you
10:29 - didn't
10:29 - now you will so now you can see so I
10:32 - have 204 points let's shoot a big one
10:34 - see now I have 212 so if I shoot this
10:38 - small one there's a tiny one lastly
10:41 - there I got a nice big score for sure
10:42 - that tiny one okay our bullets are kind
10:46 - of big we might want to make those a
10:48 - little smaller to make it a little more
10:49 - challenging to hit that tiny target it's
10:54 - pretty easy right now do these tiny ones
10:57 - but anyway now I can score away to my
11:01 - heart's content

Cleaned transcript:

welcome back to a game development with pygame we are continuing to build our shmoop game and this is part seven where we will add a score to the game and also discuss how you draw text on the screen okay so we're going to add a score to the game then all we need to do is down here before the game loop we should initialize our score variable to be starting out at zero and then we want to give ourselves some points right here every time a bullet hits a mob so now we could say in here just something simple like hits and just add one to it you get a point for every for every mob you blow up but that's a little boring because we have big ones and small ones and it'd be nice if the you know the smaller meteors were worth more much more points because they're harder to hit so if we looked at our our images we have our big meteor which is about a hundred pixels wide and we have our tiny meteor which is only about twenty pixels wide so what I want is for this tiny one to be worth more than the other well if this meteor is a hundred pixels wide if we look back what we did was we set the radius here to be equal to the width of the rectangle times 0.85 divided by 2 so the radius on this on the big meteor is going to be about 42 43 pixels but on the small one it's going to be about only 8 pixels so if we want that radius of 8 to be worth more points than the radius of 43 then what we can do is make the score add 50 minus the radius of whatever we hit so that way for the big meteors that are 43 we'll get seven points and for the little tiny ones we're gonna get 50 minus eight which is forty two point so we're gonna get a lot more points for heating the tiny ones and we can adjust that make it a little more fancy later but that's gonna be good enough for now so now we have a score and the score is being tracked but we have to draw it on the screen where we can see it and that's where things get a little tricky drawing text on the screen and PI game is a little involved and it takes several steps and if you're gonna draw the text more than one time then that means you're going to have to do those steps over and over again so it makes a lot of sense to define a function to handle just drawing text on the screen and then you can reuse that whenever you need it so what we're gonna do is up here at the top here will define we're going to define a a new command called draw text okay and the parameters of that are going to be a surface that we're gonna that we want that text drawn on the actual text which will be a string that we want it to for what we want it to say we'll put a size for how big we want the the font to be and then an x and a y for the location of that text okay so the first thing we need is we need a font now fonts can get tricky because not every computer necessarily has the same fonts on it so if you try to use a font that exists on your computer and then you take that program and try and run it on your friend's computer and they don't have that font then things might not work the way you expect so it's usually a good idea to use a very generically named font and you can do that the easiest way to do that is I'm gonna make a quick variable name here go to font name and I'm gonna use the PI game font match font command and what that match font command does is instead of having to know the exact name of the font my game will search through the list of fonts on your computer and find the closest match to that name so that way you don't have to worry about whether it's Arial bold or Arial TTFN or some other name you can just put a name there and and as long as you stick to something generic like Arial or Times or one of those you're gonna be fine on just about every computer otherwise you're going to need to include a font file along with your game that's specific to your computer and that works great if you want you know really custom looking text on your game but we'll get to that a little later for now I just want to talk about drawing a generic text okay so we have our so we have our font okay so we're going to create a font object that's pygame font dot font using the font name and the size okay so now we have a font object that can create text and what we mean by creating text is pygame everything Piegan does is in pixels so it needs to figure out exactly what pixels it needs to use to draw the text in that particular font so we're going to create a surface for it to render those pixels on to and we just say font render whatever the text we had true to talk about in a second and then a color that we want it to be rendered in okay what this true here means is this can be set to true or false and this tells python whether you want the text to be antialiased or not and what that means is here's a picture of course when you're trying to have curved lines made out of pixels you're gonna get these little jagged lines and so this is called it's called aliasing what that's called when you get the jagged lines antialiasing means taking the font and instead of just drawing it in all black pixels it puts these gray and lighter gray almost to white fuzzy pixels around it so that you know when it's sumed in you can see this but when you zoom out it looks nice and smooth you can see the difference between this ahere and the word alias and this aid down here in a second example it looks a lot smoother and nicer to read so we've set this to true so that our font will look nice okay now we need to figure out the rectangle of that text surface so that we can place it and we're gonna set that rectangles some point on that rectangle to the X&Y now we have a decision here to make to just remember when we place when we place some text like say we're drawing a word Pi game here and this box is around it do we want to Center it on the XY that we give do we want the XY to be this corner you know there's a lot of options for how we can locate things I'm just for now gonna make this be the mid top which means if this is the box this is the rectangle we're gonna put x and y is gonna X comma Y is gonna be this point here at the middle top of the rectangle so put that's gonna be XY and then we just need to take that text surface that we've created that has the nice antialiased drawn text and we want to flip that on to our whatever surface we were aiming at which is usually going to be our screen but whatever surface we specified we're gonna blip that on to this screen so we've lit the text surface at the location of the text rectangle okay now we have our nice draw text and anytime we want to draw some text we can just tell it what we want it to draw and it'll go do all the stuff to get it out of the screen so let's do that down at the bottom in our game loops draw section we can add a little bit to draw the text so you can decide what order to do these in if we draw it after the sprites then the text will be above the sprites so it'll look like the meteors are flying behind the score which will look pretty good so we're just gonna say draw text okay screen is the surface we want to draw on the text that we want is a string of the score the font size that we want is obviously optional I'm gonna put 18 there I think it'll be a good size to read and then the x and the y so we're gonna say with over two so it's gonna be centered horizontally and then I'm gonna say 10 so it's just 10 pixels down from the top of the screen okay now let's see what that looks like so see I have that zero up there looks like I made a little typo up here just be adding to score did any of you catch that before cuz I sure hope you did I didn't try running my program and pay attention to the fact that I was supposed to be adding the points to the score hopefully you noticed that if you didn't now you will so now you can see so I have 204 points let's shoot a big one see now I have 212 so if I shoot this small one there's a tiny one lastly there I got a nice big score for sure that tiny one okay our bullets are kind of big we might want to make those a little smaller to make it a little more challenging to hit that tiny target it's pretty easy right now do these tiny ones but anyway now I can score away to my heart's content
