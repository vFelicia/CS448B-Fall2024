With timestamps:

00:01 - hi everyone welcome to the second video
00:04 - in the series game development with py
00:06 - game please make sure that you've done
00:09 - lesson one already because in that
00:12 - lesson we explained the basics of py
00:15 - game how it works and we built a
00:18 - template for py game a skeleton of the
00:21 - code that we're going to need in every
00:24 - pame project we
00:27 - do in this lesson we're going to be
00:29 - talking about Sprites which are how you
00:30 - make objects that move around the
00:35 - screen okay to begin with I have my pame
00:38 - template which we made in lesson one and
00:42 - if you remember that all it does when we
00:44 - run it is create a nice blank black
00:49 - window that does nothing but we can
00:53 - close
00:54 - it and that's all there is to
00:56 - it so for this lesson we want to talk
01:01 - about Sprites and a Sprite is a computer
01:04 - Graphics term for just an object on the
01:07 - screen that can move around that's all
01:10 - that really means you played Mario
01:12 - everything you see on the screen is a
01:14 - Sprite Mario is a Sprite the coins are
01:16 - Sprites the mushrooms are Sprites so on
01:20 - the Sprites are super useful in gaming
01:22 - because you often want to have a lot of
01:24 - different objects moving around on the
01:26 - screen and pame has a lot of tools built
01:28 - into it that makes it very easy to work
01:30 - with
01:33 - Sprites now before we start making a
01:35 - Sprite let's talk real quick about the
01:38 - update and draw portions of our game
01:41 - Loop now the update section is where
01:44 - we're going to tell each Sprite or
01:45 - figure out what each Sprite needs to do
01:47 - does it need to move does it need to
01:49 - animate what needs to change about it
01:52 - and then obviously in the draw section
01:54 - we needed to tell the program to draw
01:57 - that Sprite onto the screen
02:00 - you can imagine if you start having a
02:02 - whole lot of Sprites on the screen that
02:04 - can start to get kind of messy your
02:06 - update section is going to be really
02:08 - long with drawing every Sprite and your
02:10 - draw section VI going to be really long
02:11 - with drawing every
02:12 - Sprite so to solve that problem pame has
02:18 - something called a Sprite group and a
02:21 - group is just a collection of Sprites so
02:25 - if you have a group it can make your
02:27 - update and draw section A lot easier so
02:29 - let's go ahead and make a group so
02:32 - before the game Loop starts we're going
02:33 - to make a group called all Sprites and
02:36 - it's just going to be a
02:39 - Sprite
02:41 - group okay and so this command creates a
02:44 - new group that's empty and we'll name it
02:47 - all Sprites because we're going to put
02:49 - every Sprite we make into that
02:52 - group and the reason is that we can now
02:55 - come down here to our update and all our
02:57 - update has to say is all
03:00 - Sprites do
03:02 - update and then whatever each Sprites
03:05 - rules are for how it
03:07 - updates each Sprite will update like
03:11 - it's supposed to and then in our draw
03:14 - section we can also say all Sprites do
03:19 - draw and then the draw
03:21 - command just needs you to tell it what
03:24 - place to draw it and we only have one
03:25 - place the screen so now it will draw
03:28 - every Sprite that's in the Sprite group
03:31 - so now as we make Sprites as long as we
03:33 - make sure to put them into the group and
03:35 - I'll show you how to do that then we
03:38 - won't have to add anything to our update
03:40 - or our draw section it'll automatically
03:43 - happen and that makes life a lot
03:47 - easier okay now I don't want to add any
03:50 - more code to my template here because
03:54 - again we want to use this as the
03:55 - skeleton and as the beginning for any
03:57 - new pame projects we do so I want it to
04:00 - stay like this so that when I start
04:03 - working on game number two or game
04:05 - number three I can come in here and I
04:06 - can um and I can just use this as the
04:09 - starting point so I'm going to make a
04:13 - new so I'm going to make a new file and
04:17 - I'm just going to take all of this and
04:19 - copy and paste it into there okay and
04:23 - I'm going to save this and I'm just
04:25 - going to call it Sprite example okay
04:27 - because that's what we're going to do
04:29 - right now is figure out how to make
04:30 - Sprites
04:34 - work okay so let's start creating a
04:36 - Sprite now Sprite is going to be an
04:40 - object use
04:41 - class and then we can name it so let's
04:44 - just name this uh the player because
04:47 - eventually this will be the player of
04:48 - the game um and it is a pame Sprite
04:53 - object so py game already has a Sprite a
04:56 - basic Sprite framework set up so we're
04:59 - going to make make player be a
05:02 - Sprite so this will be the Sprite for
05:05 - the
05:07 - player
05:09 - okay now just like when we did objects
05:13 - before um the first thing you need in
05:16 - your OB in your object is your init
05:19 - function right which is the the code
05:22 - that will get run whenever a new object
05:25 - of this type gets made so whenever we
05:28 - start and create the player object uh
05:31 - what code do we want to have happen well
05:34 - there's a few things that we're going to
05:35 - put in here but the first one is that's
05:36 - important is you have to do this is you
05:39 - have
05:40 - to for py game Run the
05:44 - init of its Sprite and this is kind of
05:47 - an ugly
05:49 - command uh but it's required if you
05:52 - don't include this line the Sprite won't
05:54 - function
05:56 - properly uh but then we can start
05:58 - talking about what we need now every
06:00 - Sprite can have all sorts of different
06:03 - properties for whatever you want
06:05 - depending on what you want it to do but
06:07 - there are a couple that are required
06:09 - every Sprite has to have an IM a self do
06:12 - image that's going to be what the Sprite
06:15 - looks
06:15 - like and everyone has to have a self Dot
06:19 - wct and that rect is the rectangle that
06:24 - encloses the Sprite and that's going to
06:26 - be really useful for moving the Sprite
06:28 - around figuring out where it is on the
06:30 - screen and seeing if that Sprite ran
06:33 - into anything else so we'll talk about
06:35 - that in a second let's start with the
06:37 - image so the image of this
06:40 - Sprite uh in this case we're just going
06:42 - to make it be a green rectangle okay to
06:45 - start with so we're just going to make a
06:48 - py game. surface that's a thing that you
06:51 - can draw on in pame um and it's just
06:55 - going to be let's say 50 pixels by 50
06:58 - pixels
07:01 - okay and then I'm going to say self.
07:03 - image. fill green remember I have green
07:06 - defined up here in my colors so I just
07:08 - want to fill that little surface with
07:10 - just some green so we have a green
07:14 - block now let's talk about the wct
07:17 - property of the Sprite rect stands for
07:19 - rectangle and every object on the screen
07:21 - has a rectangle around it that helps the
07:23 - computer keep track of where it is how
07:25 - big it is and so on for example these
07:28 - Sprites have rect re angles around them
07:30 - they Define how wide and how tall the
07:33 - Sprite object is and also allow you to
07:37 - tell where it is or where you want it to
07:39 - be for example if we had our
07:42 - player Sprite and it had a rectangle
07:45 - around
07:46 - it in pame you have all these different
07:49 - locations on the rect for how you can
07:51 - specify where you want the rectangle to
07:53 - be for example if we wanted our player
07:56 - to stand on the ground we have some
07:58 - coordinate for where the ground is we
08:00 - could say put the Y of the Sprite at the
08:06 - ground minus 50 because our Sprite is 50
08:10 - pixels
08:11 - tall but it's even easier in P game
08:14 - because you have that bottom handle and
08:16 - you could say put the bottom of the
08:18 - rectangle at the ground level and our
08:21 - player would be standing on the ground
08:23 - so rects are really useful in P game and
08:26 - you'll see as we start using them how
08:28 - useful they are
08:30 - and creating one is actually really easy
08:32 - too we just want to take the
08:35 - image and run the git rect command on it
08:39 - and it just looks at that image figures
08:41 - out what the rectangle needs to
08:45 - be and then we could tell let's have the
08:48 - player start in the center of the screen
08:51 - okay so let's set the self. re. center
08:54 - remember Center was the one of those
08:57 - handles I showed you in that picture let
08:59 - let's set the center of the rectangle to
09:02 - width over two oops
09:07 - and height over two and that will put it
09:11 - at the
09:13 - center okay so for now we're done with
09:16 - the basic properties of our player
09:18 - Sprite so now we want to get it to show
09:20 - up on the screen right because we've
09:21 - decid defined this class player but we
09:24 - haven't actually created one of these
09:27 - objects so let's go down here for our
09:29 - game Loop and let's make a player object
09:33 - appear and remember what I said about
09:36 - adding it to the group right so we want
09:38 - to take that all Sprites group and we
09:41 - want to add the player and if we do that
09:45 - we will be good because the player will
09:48 - get updated which doesn't do anything
09:50 - yet and the player will get drawn which
09:52 - means we can see it so let's run our
09:55 - program and see what happens there we go
09:58 - I have a green Block in the center of my
10:03 - window now our window is kind of small
10:06 - and since the next step is we want to
10:09 - make the player start moving around I'm
10:11 - going to go over here and I'm going to
10:12 - [Music]
10:13 - change this to a nice big
10:16 - size so that I have a large window to
10:20 - appear in and if I run that now I've got
10:23 - a nice big window for
10:25 - my little green square to move around in
10:30 - okay let's finish up this lesson by
10:33 - learning how to make the Sprite move
10:35 - around the
10:39 - screen so remember down in our update
10:42 - section we're telling all the Sprites to
10:45 - do whatever their update rule is so all
10:48 - we need to do is on our player Sprite
10:50 - add an update so let's call this
10:54 - update and all we're going to tell this
10:57 - Sprite to do is move
11:03 - the
11:04 - x +
11:06 - 5 so every time the game Loop repeats
11:12 - and does the update section the
11:14 - rectangle will move five pixels to the
11:18 - right and that's all we have to
11:26 - do now let's just make sure we don't
11:28 - have it run off the screen because
11:30 - that's kind of annoying and that'll show
11:33 - you how we use those different handles
11:35 - on the rectangle so if the
11:39 - rectangle's left side is greater than
11:43 - the width meaning it's gone off the side
11:46 - then we're going to change the re's
11:50 - right to be equal to
11:56 - zero and that'll make it look like it
11:58 - goes off the screen and comes back
12:08 - on all right so we'll stop there and in
12:12 - the next lesson we'll talk about some
12:14 - more things we can do with Sprites

Cleaned transcript:

hi everyone welcome to the second video in the series game development with py game please make sure that you've done lesson one already because in that lesson we explained the basics of py game how it works and we built a template for py game a skeleton of the code that we're going to need in every pame project we do in this lesson we're going to be talking about Sprites which are how you make objects that move around the screen okay to begin with I have my pame template which we made in lesson one and if you remember that all it does when we run it is create a nice blank black window that does nothing but we can close it and that's all there is to it so for this lesson we want to talk about Sprites and a Sprite is a computer Graphics term for just an object on the screen that can move around that's all that really means you played Mario everything you see on the screen is a Sprite Mario is a Sprite the coins are Sprites the mushrooms are Sprites so on the Sprites are super useful in gaming because you often want to have a lot of different objects moving around on the screen and pame has a lot of tools built into it that makes it very easy to work with Sprites now before we start making a Sprite let's talk real quick about the update and draw portions of our game Loop now the update section is where we're going to tell each Sprite or figure out what each Sprite needs to do does it need to move does it need to animate what needs to change about it and then obviously in the draw section we needed to tell the program to draw that Sprite onto the screen you can imagine if you start having a whole lot of Sprites on the screen that can start to get kind of messy your update section is going to be really long with drawing every Sprite and your draw section VI going to be really long with drawing every Sprite so to solve that problem pame has something called a Sprite group and a group is just a collection of Sprites so if you have a group it can make your update and draw section A lot easier so let's go ahead and make a group so before the game Loop starts we're going to make a group called all Sprites and it's just going to be a Sprite group okay and so this command creates a new group that's empty and we'll name it all Sprites because we're going to put every Sprite we make into that group and the reason is that we can now come down here to our update and all our update has to say is all Sprites do update and then whatever each Sprites rules are for how it updates each Sprite will update like it's supposed to and then in our draw section we can also say all Sprites do draw and then the draw command just needs you to tell it what place to draw it and we only have one place the screen so now it will draw every Sprite that's in the Sprite group so now as we make Sprites as long as we make sure to put them into the group and I'll show you how to do that then we won't have to add anything to our update or our draw section it'll automatically happen and that makes life a lot easier okay now I don't want to add any more code to my template here because again we want to use this as the skeleton and as the beginning for any new pame projects we do so I want it to stay like this so that when I start working on game number two or game number three I can come in here and I can um and I can just use this as the starting point so I'm going to make a new so I'm going to make a new file and I'm just going to take all of this and copy and paste it into there okay and I'm going to save this and I'm just going to call it Sprite example okay because that's what we're going to do right now is figure out how to make Sprites work okay so let's start creating a Sprite now Sprite is going to be an object use class and then we can name it so let's just name this uh the player because eventually this will be the player of the game um and it is a pame Sprite object so py game already has a Sprite a basic Sprite framework set up so we're going to make make player be a Sprite so this will be the Sprite for the player okay now just like when we did objects before um the first thing you need in your OB in your object is your init function right which is the the code that will get run whenever a new object of this type gets made so whenever we start and create the player object uh what code do we want to have happen well there's a few things that we're going to put in here but the first one is that's important is you have to do this is you have to for py game Run the init of its Sprite and this is kind of an ugly command uh but it's required if you don't include this line the Sprite won't function properly uh but then we can start talking about what we need now every Sprite can have all sorts of different properties for whatever you want depending on what you want it to do but there are a couple that are required every Sprite has to have an IM a self do image that's going to be what the Sprite looks like and everyone has to have a self Dot wct and that rect is the rectangle that encloses the Sprite and that's going to be really useful for moving the Sprite around figuring out where it is on the screen and seeing if that Sprite ran into anything else so we'll talk about that in a second let's start with the image so the image of this Sprite uh in this case we're just going to make it be a green rectangle okay to start with so we're just going to make a py game. surface that's a thing that you can draw on in pame um and it's just going to be let's say 50 pixels by 50 pixels okay and then I'm going to say self. image. fill green remember I have green defined up here in my colors so I just want to fill that little surface with just some green so we have a green block now let's talk about the wct property of the Sprite rect stands for rectangle and every object on the screen has a rectangle around it that helps the computer keep track of where it is how big it is and so on for example these Sprites have rect re angles around them they Define how wide and how tall the Sprite object is and also allow you to tell where it is or where you want it to be for example if we had our player Sprite and it had a rectangle around it in pame you have all these different locations on the rect for how you can specify where you want the rectangle to be for example if we wanted our player to stand on the ground we have some coordinate for where the ground is we could say put the Y of the Sprite at the ground minus 50 because our Sprite is 50 pixels tall but it's even easier in P game because you have that bottom handle and you could say put the bottom of the rectangle at the ground level and our player would be standing on the ground so rects are really useful in P game and you'll see as we start using them how useful they are and creating one is actually really easy too we just want to take the image and run the git rect command on it and it just looks at that image figures out what the rectangle needs to be and then we could tell let's have the player start in the center of the screen okay so let's set the self. re. center remember Center was the one of those handles I showed you in that picture let let's set the center of the rectangle to width over two oops and height over two and that will put it at the center okay so for now we're done with the basic properties of our player Sprite so now we want to get it to show up on the screen right because we've decid defined this class player but we haven't actually created one of these objects so let's go down here for our game Loop and let's make a player object appear and remember what I said about adding it to the group right so we want to take that all Sprites group and we want to add the player and if we do that we will be good because the player will get updated which doesn't do anything yet and the player will get drawn which means we can see it so let's run our program and see what happens there we go I have a green Block in the center of my window now our window is kind of small and since the next step is we want to make the player start moving around I'm going to go over here and I'm going to change this to a nice big size so that I have a large window to appear in and if I run that now I've got a nice big window for my little green square to move around in okay let's finish up this lesson by learning how to make the Sprite move around the screen so remember down in our update section we're telling all the Sprites to do whatever their update rule is so all we need to do is on our player Sprite add an update so let's call this update and all we're going to tell this Sprite to do is move the x + 5 so every time the game Loop repeats and does the update section the rectangle will move five pixels to the right and that's all we have to do now let's just make sure we don't have it run off the screen because that's kind of annoying and that'll show you how we use those different handles on the rectangle so if the rectangle's left side is greater than the width meaning it's gone off the side then we're going to change the re's right to be equal to zero and that'll make it look like it goes off the screen and comes back on all right so we'll stop there and in the next lesson we'll talk about some more things we can do with Sprites
