With timestamps:

00:00 - welcome back to zero 101 this is part 7
00:02 - and we're going to talk about using
00:05 - custom signals to communicate from one
00:08 - node to another alright let's get
00:10 - started so in the last video we made the
00:16 - player able to run around and pick up
00:19 - these gems and now we want something to
00:23 - happen when those gems pick up are
00:25 - picked up we want to increase the
00:26 - player's score and you might want to do
00:30 - some other things but as I said at the
00:33 - end of the last video that means we want
00:36 - the gem when it detects that it's been
00:41 - when it's been touched here when the
00:45 - area enter and it's used the player we
00:48 - want the gem to tell the main scene
00:51 - something but the main script is running
00:53 - over here on the main node and the gem
00:57 - is way over here in this tree and it's
01:02 - being instants inside the game gem
01:04 - container so there's two ways of going
01:09 - about this and one of them is the one
01:11 - that a lot of beginners tend to take so
01:16 - if you see a lot of beginner code in
01:19 - Godot you'll see this happening a lot
01:20 - and here's what they do is they go well
01:23 - we need to talk to the main node and if
01:26 - the gym is going to be inside the gem
01:28 - container that means I need to go up one
01:30 - to the level so I need to find this node
01:33 - in the tree and so they will do
01:36 - something like get node dot dot slash
01:43 - dot right go to levels up and on that
01:47 - node run let's just make a command
01:49 - called will make a function called gym
01:51 - grabbed and then over on the main you go
01:56 - and you add that function so we add gem
02:02 - grabbed and we'll just have that take
02:06 - we'll just have that add to the player's
02:08 - score and we'll just print it out for
02:10 - now just to see that it's working
02:12 - and so this is going to work and see
02:16 - when we grab it there it's printing out
02:18 - the score you know that's fine now our
02:21 - gem is talking to our main node but the
02:27 - problem is that this is very brittle and
02:30 - easy to break because what happens if I
02:32 - decide to change the structure of the
02:36 - tree of the main tree here then maybe
02:39 - it's three levels up or it's changed it
02:43 - also means that when you run remember we
02:46 - can run the gem seen as its own scene
02:48 - right we can run this scene but when you
02:51 - run this scene by itself the gem is the
02:55 - root node so there's no there's no node
02:57 - two levels up so if you have any code
03:00 - that does things like this it's going to
03:03 - break if you try and run the scene by
03:06 - itself and for a lot of things you want
03:08 - to be able to do that right when we were
03:10 - testing the player we just ran the scene
03:12 - by itself so we could see if we could
03:14 - move around so you want to be able to
03:16 - you don't want to break the individual
03:19 - scene functionality and so you want to
03:22 - do this a little differently and the way
03:25 - to do that in Godot is using something
03:26 - called signals so the gym here is a
03:30 - perfect example of how to do this so on
03:32 - the gem what we're going to do and get
03:35 - rid of this calling of the node above
03:37 - and what we're going to do is just like
03:40 - we were able to use the signals over
03:42 - here that are built into the area 2d we
03:45 - can actually define our own signals so
03:47 - we're going to define a signal called
03:49 - gem grabbed just using the signal
03:52 - keyword and when the gem gets wrapped
03:56 - we're going to emit that signal okay now
04:02 - whenever a gem gets grabbed it's going
04:04 - to emit that signal and then we can tell
04:09 - our main script to watch for that signal
04:13 - so what we can do is when we spawn the
04:16 - gem we're going to take the gem that we
04:20 - spawned and we're going to say G dot
04:26 - next we want to connect this gems gem
04:31 - grab signal to to a function on the mane
04:41 - and that function we're going to call it
04:43 - on gem grabbed just sticking with the
04:48 - standard sudo naming scheme of the on
04:54 - for responding to signal so we change
04:57 - this to being called on gem grab I'm Jim
05:02 - grab and then now we can run this and we
05:06 - will have the same kind of functionality
05:08 - there but now it's a lot more flexible
05:13 - because we're using the node signal to
05:18 - define what we want to do when that note
05:21 - tells us something so we can respond to
05:24 - this to the gem signal and this is a
05:26 - much more flexible and robust way of
05:31 - doing that functionality and you should
05:35 - try and use signals whenever you need to
05:38 - whenever you need to communicate from
05:40 - one scene to another especially
05:43 - especially if you ever find yourself
05:45 - doing that yet node dot dot find
05:49 - yourself doing that you're probably
05:53 - going to get yourself in trouble later
05:55 - on and you want to find a way to do it
05:56 - with a signal instead okay well now we
05:59 - have our score increasing and we want to
06:02 - display that on the screen now I don't
06:04 - want to be printing it in the console so
06:08 - let's add a going to add a control node
06:12 - and this control node is going to be
06:15 - called HUD heads-up display this control
06:18 - is going to contain all of our all of
06:22 - our displays of information score game
06:26 - over anything like that stuff that we
06:29 - want it laid on top of the screen
06:31 - basically and we're going to use that to
06:34 - put those things in
06:37 - now I want this HUD to be the size of
06:40 - the screen so I'm going to have the
06:42 - control now working with control nodes
06:46 - they have anchor points anchor points
06:50 - are what part of the parent node you
06:53 - want to attach that side of the control
06:58 - node to so you need to change this to
07:00 - begin begin and end so so whatever so
07:06 - whatever coordinates I put those sides
07:08 - that are going to be relative to those
07:10 - ends beginning in it and so if I go down
07:14 - here to margins do the top the left of
07:18 - zero the top of zero if I change the
07:19 - right to zero and the bottom to zero
07:23 - now it's the same size as the parent
07:28 - node and we don't actually grab that and
07:30 - drag it around
07:31 - so let's lock that okay so the only
07:34 - thing we want to show in the HUD right
07:36 - now is the score so we're going to add a
07:39 - label node and we're going to call that
07:43 - score label and a label node is very
07:46 - simple it's just a nose it can display
07:48 - text and so you can type here in the
07:51 - detect property is the one that shows
07:54 - contains what you want to see on the
07:56 - screen so there you can see some text in
08:00 - pretty small font and grabbing the label
08:03 - and resizing it doesn't change the font
08:07 - size of the text to do that you have to
08:10 - either go down here and change the scale
08:13 - we could scale this node up and have
08:16 - bigger figure text on it or we could use
08:23 - a specific font you can go in here and
08:27 - load a specific spot how many slots
08:29 - ready we're going to stick with the
08:30 - default font for now we just want to see
08:32 - this score showing up on the screen so
08:37 - let's just set that starting text to
08:39 - zero that's our score at first and then
08:44 - an R script we're going to update the
08:48 - score label whenever
08:50 - to score changes so we will grab the
08:55 - score label so on ready square label is
09:01 - get node and this is under the HUD score
09:10 - label okay and then here we just do
09:18 - score label dot set text and we want
09:22 - that to be the score and that should be
09:27 - that so now if we play you can see our
09:32 - score going up all right that'll do it
09:37 - for the climb around I hope you enjoyed
09:39 - it and I will see you in the next video
09:48 - you

Cleaned transcript:

welcome back to zero 101 this is part 7 and we're going to talk about using custom signals to communicate from one node to another alright let's get started so in the last video we made the player able to run around and pick up these gems and now we want something to happen when those gems pick up are picked up we want to increase the player's score and you might want to do some other things but as I said at the end of the last video that means we want the gem when it detects that it's been when it's been touched here when the area enter and it's used the player we want the gem to tell the main scene something but the main script is running over here on the main node and the gem is way over here in this tree and it's being instants inside the game gem container so there's two ways of going about this and one of them is the one that a lot of beginners tend to take so if you see a lot of beginner code in Godot you'll see this happening a lot and here's what they do is they go well we need to talk to the main node and if the gym is going to be inside the gem container that means I need to go up one to the level so I need to find this node in the tree and so they will do something like get node dot dot slash dot right go to levels up and on that node run let's just make a command called will make a function called gym grabbed and then over on the main you go and you add that function so we add gem grabbed and we'll just have that take we'll just have that add to the player's score and we'll just print it out for now just to see that it's working and so this is going to work and see when we grab it there it's printing out the score you know that's fine now our gem is talking to our main node but the problem is that this is very brittle and easy to break because what happens if I decide to change the structure of the tree of the main tree here then maybe it's three levels up or it's changed it also means that when you run remember we can run the gem seen as its own scene right we can run this scene but when you run this scene by itself the gem is the root node so there's no there's no node two levels up so if you have any code that does things like this it's going to break if you try and run the scene by itself and for a lot of things you want to be able to do that right when we were testing the player we just ran the scene by itself so we could see if we could move around so you want to be able to you don't want to break the individual scene functionality and so you want to do this a little differently and the way to do that in Godot is using something called signals so the gym here is a perfect example of how to do this so on the gem what we're going to do and get rid of this calling of the node above and what we're going to do is just like we were able to use the signals over here that are built into the area 2d we can actually define our own signals so we're going to define a signal called gem grabbed just using the signal keyword and when the gem gets wrapped we're going to emit that signal okay now whenever a gem gets grabbed it's going to emit that signal and then we can tell our main script to watch for that signal so what we can do is when we spawn the gem we're going to take the gem that we spawned and we're going to say G dot next we want to connect this gems gem grab signal to to a function on the mane and that function we're going to call it on gem grabbed just sticking with the standard sudo naming scheme of the on for responding to signal so we change this to being called on gem grab I'm Jim grab and then now we can run this and we will have the same kind of functionality there but now it's a lot more flexible because we're using the node signal to define what we want to do when that note tells us something so we can respond to this to the gem signal and this is a much more flexible and robust way of doing that functionality and you should try and use signals whenever you need to whenever you need to communicate from one scene to another especially especially if you ever find yourself doing that yet node dot dot find yourself doing that you're probably going to get yourself in trouble later on and you want to find a way to do it with a signal instead okay well now we have our score increasing and we want to display that on the screen now I don't want to be printing it in the console so let's add a going to add a control node and this control node is going to be called HUD headsup display this control is going to contain all of our all of our displays of information score game over anything like that stuff that we want it laid on top of the screen basically and we're going to use that to put those things in now I want this HUD to be the size of the screen so I'm going to have the control now working with control nodes they have anchor points anchor points are what part of the parent node you want to attach that side of the control node to so you need to change this to begin begin and end so so whatever so whatever coordinates I put those sides that are going to be relative to those ends beginning in it and so if I go down here to margins do the top the left of zero the top of zero if I change the right to zero and the bottom to zero now it's the same size as the parent node and we don't actually grab that and drag it around so let's lock that okay so the only thing we want to show in the HUD right now is the score so we're going to add a label node and we're going to call that score label and a label node is very simple it's just a nose it can display text and so you can type here in the detect property is the one that shows contains what you want to see on the screen so there you can see some text in pretty small font and grabbing the label and resizing it doesn't change the font size of the text to do that you have to either go down here and change the scale we could scale this node up and have bigger figure text on it or we could use a specific font you can go in here and load a specific spot how many slots ready we're going to stick with the default font for now we just want to see this score showing up on the screen so let's just set that starting text to zero that's our score at first and then an R script we're going to update the score label whenever to score changes so we will grab the score label so on ready square label is get node and this is under the HUD score label okay and then here we just do score label dot set text and we want that to be the score and that should be that so now if we play you can see our score going up all right that'll do it for the climb around I hope you enjoyed it and I will see you in the next video you
