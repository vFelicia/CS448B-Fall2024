With timestamps:

00:00 - welcome back to learning to code with
00:02 - Python lesson 9 today we're gonna walk
00:05 - through how we would make another simple
00:06 - game but one that's a bit more
00:08 - interesting than guessing numbers
00:10 - rock-paper-scissors
00:12 - alright let's go to the blackboard and
00:14 - write down what we need to do well we
00:17 - have two players right we have the human
00:19 - and we have the computer so what are the
00:26 - steps of the game well first we can ask
00:29 - the player to choose a move okay and
00:32 - then what I'm gonna do is I'm going to
00:35 - define the moves to be
00:39 - rock-paper-scissors so we'll just use
00:41 - our P and s that way the player doesn't
00:44 - have to type out the word scissors when
00:45 - they make their move okay next we can
00:49 - get the computers move and that should
00:53 - just be a random choice out of the moves
00:55 - list all right so that's pretty
00:59 - straightforward but now we need to
01:01 - compare the two moves to see what the
01:03 - result of the game is well let's think
01:06 - about the possibilities we can write out
01:10 - all the possible outcomes like this will
01:12 - write the player's moves across the top
01:15 - like this so this is player 1 and then
01:19 - along the side we'll write out the
01:21 - computers moves so what happens well if
01:26 - they're the same then we know that's a
01:28 - tie right paper versus rock means the
01:32 - player wins scissors vs. rock the player
01:35 - loses Rock vs paper scissors vs. paper
01:40 - Rock vs. scissors and paper vs. scissors
01:46 - so we have nine possible outcomes for
01:50 - the game three wins three losses and
01:53 - three ties so for the third step in our
01:57 - game where we compare the moves we have
02:00 - a similar situation to our number
02:02 - guessing game where we had three
02:04 - possible outcomes you guess too high you
02:06 - guess too low or you guessed right so
02:09 - let's tell the computer what it needs to
02:10 - do to compare well first let's do the
02:12 - easiest one
02:14 - tie was it a tie well we can just check
02:16 - and see did the player pick the same one
02:19 - as the computer for step two let's find
02:23 - out did we did the player win how are we
02:26 - gonna tell that well the player won if
02:28 - it was one of these combinations so we
02:34 - can say the player wins if it's one of
02:41 - these choices P versus R s versus P or R
02:50 - versus s right because we're just
02:53 - writing player 1 first and player 2
02:56 - second if it wasn't one of those and it
03:00 - wasn't a tie then the only thing left is
03:04 - they lost
03:07 - so let's write some code ok so first
03:13 - let's go ahead and import random so
03:16 - we're gonna want the computer to be able
03:17 - to make a random move so we'll need that
03:19 - and then let's go ahead and define those
03:23 - moves that we talked about so the moves
03:26 - that you can make are either R P or s
03:30 - and while we're defining lists why don't
03:34 - we make a list out of these player wins
03:37 - and we'll just call it player wins the
03:41 - player wins is PR s P RS okay so that's
03:49 - good enough for setup what's the first
03:51 - step of our game remember here we had
03:53 - player move so we need to get the
03:55 - players move well we can use the input
03:57 - command for that player move equals
04:00 - input your move step two is to get the
04:08 - computer move and we want the computer
04:10 - to move to be a random choice out of the
04:13 - list the command for that random dot
04:17 - choice just like when we were doing
04:18 - random colors random choice of moves
04:23 - okay now we have a player move and a
04:25 - computer move and we can start on the
04:27 - compare part of the game if we look back
04:30 - over here in our sketch the first thing
04:32 - we wanted to try was to see if it was a
04:34 - tie well to compare the two moves we
04:37 - just want to say if player move equals
04:40 - computer move and don't forget we need
04:44 - to use these double equals because one
04:46 - equals means define a variable right
04:50 - take some bit of data and store it in
04:53 - the variable that's named on the left
04:56 - two equals means compare these two
04:58 - things and tell me true or false are
05:00 - they the same well if they are the same
05:03 - then let's go ahead and print tie this
05:09 - is probably a good time to try running
05:11 - our program just so we can make sure we
05:13 - haven't made any mistakes so far so I'm
05:16 - gonna run this program I'm gonna try
05:17 - choosing rock ah what happened well
05:22 - obviously we didn't get a tie because it
05:24 - didn't print out tie but we don't know
05:26 - what happened so we've kind of spotted a
05:28 - problem in our program we left out a
05:31 - step we should probably print out what
05:33 - the moves are before we tell the result
05:36 - let's add some print statements so we
05:39 - can see what's going on
05:41 - so we'll say the player move and we'll
05:45 - say the computer move and the computer
05:49 - can call itself me since it's the one
05:51 - that's doing the talking let's try that
05:54 - and see how that looks
05:56 - so I'll take her are okay so it wasn't a
06:00 - tie but at least we know the computer
06:03 - picked scissors this time
06:08 - want to check the second option did the
06:11 - player win so we want to know did we get
06:15 - one of these combinations so over here
06:21 - I'm just going to show you a little
06:22 - example remember if we picked our and
06:25 - the computer picked s then adding two
06:29 - strings together just gives you a string
06:31 - where they're stuck together so we
06:33 - should just add the player move to the
06:34 - computer move so that we get a single
06:37 - string and then we can check and see if
06:39 - it's one of these so let's say player
06:44 - move plus computer move now how do we
06:50 - tell if it's one of these well Python
06:53 - has a handy little command called in so
06:58 - if we say the player wins
07:01 - so if we say add these two together and
07:04 - tell me if it's in this list so in this
07:08 - example if we chose our and the computer
07:11 - chose s then our plus s is our s and is
07:14 - our s in this list well yes it is so it
07:19 - should print you win and last but not
07:25 - least if it wasn't a tie and it wasn't a
07:28 - win then we can just print out you lose
07:33 - or we could say I win but either way you
07:37 - can even if you want make the computer a
07:39 - little mean and have it say things like
07:41 - you lose sucker things like that I'll
07:44 - leave that up to you let's just go ahead
07:46 - and make sure that our program is
07:48 - working all right
07:49 - I'm gonna pick scissors for a change
07:51 - this time we tied now we're done the
07:56 - program ended all right so if we want to
07:58 - play again we actually have to run it
08:02 - again
08:02 - I keep getting ties let's try again Wow
08:10 - three ties in a row what are the odds
08:17 - there we go I picked paper he picked
08:20 - Rock Iowa okay
08:25 - just like our number guessing program
08:26 - we'd like to be able to play more than
08:29 - once in fact I'd like to be able to play
08:31 - until I decided I'm finished so I really
08:35 - want all of this stuff to be in a loop
08:39 - right I want this to go over and over
08:42 - again until I want it to stop well to
08:45 - start with let's just make it repeat
08:47 - then we'll worry about stopping it after
08:49 - that remember we have the while loop
08:51 - like we used in our number guessing game
08:53 - but I want this loop to go forever
08:56 - I just wanted to never stop just keep
08:58 - going so I can just say while true
09:02 - remember the while loop continues as
09:04 - long as whatever comes after the while
09:06 - is true and true will always be true so
09:09 - this is what's called an infinite loop
09:11 - I'm gonna indent this so that it's part
09:14 - of the loop
09:14 - remember we highlight everything in
09:16 - press tab so now while true do this
09:19 - forever we'll run it now we can play
09:30 - over and over again so if we have an
09:36 - infinite loop how do we stop it well
09:38 - let's give the player a way to quit
09:41 - let's add after player move here that if
09:44 - the player move if they choose queue for
09:50 - quit then that's when we want this while
09:54 - loop to stop but we can use a new
09:57 - command for that we can say break break
10:00 - is a special Python command that says
10:01 - whatever loop you're inside of and it no
10:04 - matter what else is going on just stop
10:06 - the loop so queue will let us play as
10:09 - long as we want
10:10 - until we type it and then it will stop
10:13 - the loop let's see how that looks all
10:18 - right I'm gonna pick rock a bunch of
10:21 - times and then when I decided I'm done I
10:23 - pick queue and the program ends
10:28 - are a few more things we could add to
10:30 - this program but I'm gonna leave that
10:31 - for you to figure out one is we could
10:34 - add a score just like we did in our
10:36 - number guessing game right but this time
10:38 - you need two variables because you need
10:41 - a score for the player and you need a
10:42 - score for the computer and make sure you
10:46 - start them out at zero and you're gonna
10:49 - give them a point at the appropriate
10:52 - spot so when the player wins
10:54 - you should write after you say you win
10:56 - you should add a point to the players
10:57 - score and when the computer wins you
11:00 - should add a point to the computer score
11:02 - and don't forget at the end after the
11:05 - loop has ended so down here somewhere
11:07 - you can print out what the final scores
11:09 - were so the players can see who did the
11:11 - best another thing that you could add is
11:15 - you could make the computer a little
11:17 - more challenging right now the computer
11:19 - is purely random it's just randomly
11:21 - picking one of these moves if you really
11:26 - wanted to be mean
11:27 - instead of making a random choice here
11:30 - you could say if player move equals our
11:34 - computer move equals P then whenever the
11:38 - player picks Rock the computer will
11:40 - always take paper now I might take the
11:43 - player a few times playing before they
11:46 - figure that out and then they'll be
11:48 - angry with you but until then your
11:50 - computer will somehow always win you can
11:53 - try that one out on your parents well
11:56 - that's about it for our
11:57 - rock-paper-scissors game thanks for
11:59 - watching and I'll see you next time
12:08 - you

Cleaned transcript:

welcome back to learning to code with Python lesson 9 today we're gonna walk through how we would make another simple game but one that's a bit more interesting than guessing numbers rockpaperscissors alright let's go to the blackboard and write down what we need to do well we have two players right we have the human and we have the computer so what are the steps of the game well first we can ask the player to choose a move okay and then what I'm gonna do is I'm going to define the moves to be rockpaperscissors so we'll just use our P and s that way the player doesn't have to type out the word scissors when they make their move okay next we can get the computers move and that should just be a random choice out of the moves list all right so that's pretty straightforward but now we need to compare the two moves to see what the result of the game is well let's think about the possibilities we can write out all the possible outcomes like this will write the player's moves across the top like this so this is player 1 and then along the side we'll write out the computers moves so what happens well if they're the same then we know that's a tie right paper versus rock means the player wins scissors vs. rock the player loses Rock vs paper scissors vs. paper Rock vs. scissors and paper vs. scissors so we have nine possible outcomes for the game three wins three losses and three ties so for the third step in our game where we compare the moves we have a similar situation to our number guessing game where we had three possible outcomes you guess too high you guess too low or you guessed right so let's tell the computer what it needs to do to compare well first let's do the easiest one tie was it a tie well we can just check and see did the player pick the same one as the computer for step two let's find out did we did the player win how are we gonna tell that well the player won if it was one of these combinations so we can say the player wins if it's one of these choices P versus R s versus P or R versus s right because we're just writing player 1 first and player 2 second if it wasn't one of those and it wasn't a tie then the only thing left is they lost so let's write some code ok so first let's go ahead and import random so we're gonna want the computer to be able to make a random move so we'll need that and then let's go ahead and define those moves that we talked about so the moves that you can make are either R P or s and while we're defining lists why don't we make a list out of these player wins and we'll just call it player wins the player wins is PR s P RS okay so that's good enough for setup what's the first step of our game remember here we had player move so we need to get the players move well we can use the input command for that player move equals input your move step two is to get the computer move and we want the computer to move to be a random choice out of the list the command for that random dot choice just like when we were doing random colors random choice of moves okay now we have a player move and a computer move and we can start on the compare part of the game if we look back over here in our sketch the first thing we wanted to try was to see if it was a tie well to compare the two moves we just want to say if player move equals computer move and don't forget we need to use these double equals because one equals means define a variable right take some bit of data and store it in the variable that's named on the left two equals means compare these two things and tell me true or false are they the same well if they are the same then let's go ahead and print tie this is probably a good time to try running our program just so we can make sure we haven't made any mistakes so far so I'm gonna run this program I'm gonna try choosing rock ah what happened well obviously we didn't get a tie because it didn't print out tie but we don't know what happened so we've kind of spotted a problem in our program we left out a step we should probably print out what the moves are before we tell the result let's add some print statements so we can see what's going on so we'll say the player move and we'll say the computer move and the computer can call itself me since it's the one that's doing the talking let's try that and see how that looks so I'll take her are okay so it wasn't a tie but at least we know the computer picked scissors this time want to check the second option did the player win so we want to know did we get one of these combinations so over here I'm just going to show you a little example remember if we picked our and the computer picked s then adding two strings together just gives you a string where they're stuck together so we should just add the player move to the computer move so that we get a single string and then we can check and see if it's one of these so let's say player move plus computer move now how do we tell if it's one of these well Python has a handy little command called in so if we say the player wins so if we say add these two together and tell me if it's in this list so in this example if we chose our and the computer chose s then our plus s is our s and is our s in this list well yes it is so it should print you win and last but not least if it wasn't a tie and it wasn't a win then we can just print out you lose or we could say I win but either way you can even if you want make the computer a little mean and have it say things like you lose sucker things like that I'll leave that up to you let's just go ahead and make sure that our program is working all right I'm gonna pick scissors for a change this time we tied now we're done the program ended all right so if we want to play again we actually have to run it again I keep getting ties let's try again Wow three ties in a row what are the odds there we go I picked paper he picked Rock Iowa okay just like our number guessing program we'd like to be able to play more than once in fact I'd like to be able to play until I decided I'm finished so I really want all of this stuff to be in a loop right I want this to go over and over again until I want it to stop well to start with let's just make it repeat then we'll worry about stopping it after that remember we have the while loop like we used in our number guessing game but I want this loop to go forever I just wanted to never stop just keep going so I can just say while true remember the while loop continues as long as whatever comes after the while is true and true will always be true so this is what's called an infinite loop I'm gonna indent this so that it's part of the loop remember we highlight everything in press tab so now while true do this forever we'll run it now we can play over and over again so if we have an infinite loop how do we stop it well let's give the player a way to quit let's add after player move here that if the player move if they choose queue for quit then that's when we want this while loop to stop but we can use a new command for that we can say break break is a special Python command that says whatever loop you're inside of and it no matter what else is going on just stop the loop so queue will let us play as long as we want until we type it and then it will stop the loop let's see how that looks all right I'm gonna pick rock a bunch of times and then when I decided I'm done I pick queue and the program ends are a few more things we could add to this program but I'm gonna leave that for you to figure out one is we could add a score just like we did in our number guessing game right but this time you need two variables because you need a score for the player and you need a score for the computer and make sure you start them out at zero and you're gonna give them a point at the appropriate spot so when the player wins you should write after you say you win you should add a point to the players score and when the computer wins you should add a point to the computer score and don't forget at the end after the loop has ended so down here somewhere you can print out what the final scores were so the players can see who did the best another thing that you could add is you could make the computer a little more challenging right now the computer is purely random it's just randomly picking one of these moves if you really wanted to be mean instead of making a random choice here you could say if player move equals our computer move equals P then whenever the player picks Rock the computer will always take paper now I might take the player a few times playing before they figure that out and then they'll be angry with you but until then your computer will somehow always win you can try that one out on your parents well that's about it for our rockpaperscissors game thanks for watching and I'll see you next time you
