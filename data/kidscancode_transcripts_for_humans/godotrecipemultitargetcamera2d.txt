With timestamps:

00:03 - welcome to another goodo recipe
00:05 - this time we'll be making a dynamic
00:08 - multi-target camera
00:09 - that will work for multiplayer games or
00:12 - other
00:13 - games where you have multiple things
00:15 - that you want to be on camera at once
00:17 - let's take a look so we have here a two
00:19 - player game with two characters that can
00:20 - move around
00:22 - and you're probably used to using the 2d
00:24 - camera by attaching it
00:26 - to your player but when you have two
00:28 - players that's a problem because if the
00:29 - camera is attached to one
00:31 - you can no longer see the other
00:34 - character and so we need a dynamic
00:36 - camera that's going to
00:38 - track both of these players and make
00:40 - sure they're on the screen at the same
00:41 - time
00:42 - you know it needs to zoom out when
00:43 - they're far apart and it can zoom in
00:45 - when they're close together and it needs
00:48 - to change position so that
00:49 - if one goes you know up on the ledges up
00:52 - here
00:53 - we'll still see both of them
00:56 - so we want our camera to do two things
00:58 - we want to be able to add and remove
01:00 - targets so that we could have multiple
01:03 - players or
01:04 - enemies or however many we we want
01:07 - um entities that we want the camera to
01:09 - keep
01:10 - focus on we want to have the camera keep
01:13 - its position
01:14 - centered among those targets
01:17 - and then we want to have it adjust the
01:19 - zoom so that they'll all stay
01:21 - on the screen so we're going to make a
01:23 - new camera object for this
01:24 - so make a new scene with a camera 2d
01:29 - and this is where we're going to attach
01:31 - our script
01:33 - i'm just going to save this and attach a
01:36 - script to it
01:38 - okay here's the start of our script
01:39 - these are the variables we're gonna use
01:41 - we're gonna have a move speed and that's
01:43 - how quickly the camera will
01:45 - change position if there's a sudden
01:47 - change in where it needs to be
01:49 - we're gonna interpolate that move to
01:51 - make it smooth
01:52 - and this is how fast it'll move to get
01:55 - to that position
01:56 - and then zoom speed is the same thing
01:58 - but with the zoom factor so it gives us
02:00 - some control over how quickly
02:02 - the camera will zoom to new values
02:07 - then we have a minimum and maximum zoom
02:09 - amount and this is going to
02:11 - really depend on the resolution and
02:14 - scale of your
02:15 - of your game but you can set those to
02:18 - to not allow the camera to zoom in any
02:20 - closer than a certain amount or farther
02:22 - out than a certain amount
02:23 - and then margin is going to be a little
02:26 - bit
02:26 - of buffer space around the
02:30 - objects that you are zooming in and out
02:32 - of and you'll see what that looks like
02:33 - when we do it but it just makes it so
02:35 - that
02:36 - when the two players are far apart for
02:39 - example the camera doesn't zoom out and
02:40 - put them both
02:41 - on the opposite edges of the screen
02:43 - it'll include some area
02:45 - to the sides of them and then we have a
02:49 - we have an array where we're going to
02:50 - keep track of our targets that we
02:52 - are tracking and then lastly we have a
02:55 - screen size variable that we're going to
02:57 - set
02:57 - so that we can and we're going to use
02:59 - that to calculate our
03:01 - zoom the next thing we're going to add
03:04 - is
03:05 - two functions to let us add and remove
03:06 - targets from the camera
03:08 - and this lets you keep it dynamic so
03:10 - that for example if a
03:11 - you know third player joins the game you
03:13 - can add them to the camera and they'll
03:15 - get included
03:16 - if they leave the game you can remove
03:17 - them this also lets you
03:19 - and you know when bosses spawn in or
03:21 - anything like that you can
03:23 - you can control what targets the camera
03:25 - is tracking
03:26 - and which one it's not so most of the
03:29 - action is going to happen in the process
03:31 - function
03:32 - and first we'll talk about how we're
03:34 - going to do the movement portion keeping
03:36 - the camera centered
03:37 - so if we don't have any targets we don't
03:39 - need to do anything but
03:41 - if we do have targets what we're going
03:43 - to do is loop through
03:45 - each of the targets and basically find
03:47 - the average position
03:49 - that's going to be the center point
03:51 - between the
03:52 - positions of the various targets and
03:54 - then we just take our camera's position
03:56 - and we alert it to that new position we
03:59 - found
04:00 - using our move speed to lurp us at that
04:04 - speed and that's going to keep the
04:05 - camera centered where it needs to be
04:09 - okay and now our last part is here is to
04:11 - find the zoom
04:12 - so we're going to we need to find a
04:13 - rectangle that encloses
04:15 - all of the targets and then
04:18 - set our zoom to inclu you know to
04:21 - display that entire rectangle
04:23 - so we're gonna make ourselves a a
04:25 - starting rectangle here that's just
04:27 - centered at the position
04:28 - located at the position and it has a
04:31 - size of
04:32 - of one because it doesn't matter right
04:33 - now we're going to expand it
04:35 - we go through each each target and we
04:37 - expand that rectangle
04:39 - to include the target's position so that
04:42 - rectangle will keep growing and then
04:44 - we're gonna
04:45 - additionally once we've expanded it and
04:47 - it has all the targets inside of it
04:49 - we're gonna grow it a little bit more
04:51 - based on those margins that we set up
04:52 - above
04:53 - that gives us the extra buffer space
04:55 - around
04:56 - the different targets and then we're
04:59 - going to figure out which one is the
05:01 - maximum dimension
05:02 - the the x or the y is it a wide
05:05 - rectangle or a tall rectangle
05:08 - so if the x size is bigger
05:12 - right compared to the screen aspect
05:13 - ratio screen aspect ratio is what's
05:16 - going to determine
05:17 - how much we need to zoom then we're
05:19 - going to clamp
05:21 - our zoom the zoom we want is going to be
05:24 - the size of the rectangle divided by the
05:27 - screen
05:29 - the size of the screen and we're going
05:31 - to clamp that between the min and max
05:34 - otherwise if the if the y was bigger we
05:37 - just do that with y
05:38 - and then we learn blurp our zoom to that
05:41 - zoom value
05:42 - right it might be 1.5 it might be three
05:44 - whatever
05:46 - and use our zoom speed so let's take a
05:49 - look at how it
05:50 - works in practice okay so i've added my
05:54 - multi-target camera to my main scene
05:57 - which is
05:57 - happens to be my tile map for this
05:59 - example
06:00 - and in the timeout script i've added
06:04 - both of the two characters as targets to
06:06 - the camera
06:07 - so now it'll be tracking both of those
06:09 - i've also set the camera's limits so
06:12 - that it doesn't
06:13 - uh scroll past the left or right edges
06:15 - of the tile map
06:16 - that's of course totally optional and
06:17 - you could add the top and bottom depends
06:19 - on how you have your
06:20 - levels laid out okay but let's take a
06:22 - look at what it looks like
06:27 - so i have added a debug
06:31 - drawing here this is drawing the
06:33 - rectangle that we're calculating
06:35 - and so you can see the players are
06:37 - really close together but we're zoomed
06:39 - in
06:39 - the maximum amount at 1.5 but as they
06:42 - get farther away
06:43 - you see as that rectangle starts to
06:45 - reach the edge of the screen
06:47 - we're starting to zoom out right and
06:50 - that
06:50 - this is that buffer area to the right
06:53 - and left
06:55 - of the two characters that's that that's
06:56 - that margin that we added
06:58 - in the code so how big you want that
06:59 - margin to be is entirely up to you and i
07:02 - made it a little smaller
07:03 - in the vertical than i did in the
07:05 - horizontal but now you can see as we
07:07 - move away we're zooming farther and
07:09 - farther out
07:11 - right it doesn't matter whether we're
07:13 - above or below
07:15 - but we're moving farther and farther
07:16 - away
07:18 - until we reach the edge and this is the
07:20 - maximum zoom i set
07:23 - but you can see that as the two
07:26 - characters move around
07:27 - that rectangle is keeping track of how
07:30 - far apart they are
07:32 - and making sure that our zoom level
07:33 - never
07:37 - makes any either of them go off the
07:38 - screen
07:40 - right and that's it that's your
07:43 - multi-target
07:45 - dynamic camera and i'll show you one
07:47 - other example we can add one of these uh
07:49 - mobs in as another track to target and
07:52 - you can see how it works with three
08:02 - okay so now what we're doing is we have
08:05 - three targets
08:05 - that purple mob up there is also one of
08:08 - the targets
08:09 - so you can see as it's moving our center
08:11 - point
08:12 - is staying centered between the three of
08:15 - them
08:15 - and the zoom is making sure that no
08:18 - matter where they go
08:20 - everybody is staying on screen so you
08:22 - can do this really with any number of
08:25 - targets obviously depending on how your
08:28 - game is set up
08:31 - hopefully that helps if you have any
08:32 - questions please post them in the
08:34 - comments below
08:35 - and i'll include a link in the
08:36 - description where you can download this
08:38 - demo
08:39 - project as well and experiment with it
08:41 - yourself
08:45 - you can find this recipe and lots more
08:47 - on the godot recipes
08:48 - website at godotrecipes.com
08:51 - here you can find a wide variety of
08:54 - recipes
08:55 - for creating the game system you need
08:57 - some help on how to get started with
08:59 - godot in the basics section
09:01 - and lots more i recommend you go over
09:03 - there and explore and
09:04 - let me know if there's something you're
09:06 - looking for that you'd like me
09:08 - to add as i'm always adding more recipes
09:10 - over time
09:12 - thanks for watching and i'll see you in
09:13 - a future video

Cleaned transcript:

welcome to another goodo recipe this time we'll be making a dynamic multitarget camera that will work for multiplayer games or other games where you have multiple things that you want to be on camera at once let's take a look so we have here a two player game with two characters that can move around and you're probably used to using the 2d camera by attaching it to your player but when you have two players that's a problem because if the camera is attached to one you can no longer see the other character and so we need a dynamic camera that's going to track both of these players and make sure they're on the screen at the same time you know it needs to zoom out when they're far apart and it can zoom in when they're close together and it needs to change position so that if one goes you know up on the ledges up here we'll still see both of them so we want our camera to do two things we want to be able to add and remove targets so that we could have multiple players or enemies or however many we we want um entities that we want the camera to keep focus on we want to have the camera keep its position centered among those targets and then we want to have it adjust the zoom so that they'll all stay on the screen so we're going to make a new camera object for this so make a new scene with a camera 2d and this is where we're going to attach our script i'm just going to save this and attach a script to it okay here's the start of our script these are the variables we're gonna use we're gonna have a move speed and that's how quickly the camera will change position if there's a sudden change in where it needs to be we're gonna interpolate that move to make it smooth and this is how fast it'll move to get to that position and then zoom speed is the same thing but with the zoom factor so it gives us some control over how quickly the camera will zoom to new values then we have a minimum and maximum zoom amount and this is going to really depend on the resolution and scale of your of your game but you can set those to to not allow the camera to zoom in any closer than a certain amount or farther out than a certain amount and then margin is going to be a little bit of buffer space around the objects that you are zooming in and out of and you'll see what that looks like when we do it but it just makes it so that when the two players are far apart for example the camera doesn't zoom out and put them both on the opposite edges of the screen it'll include some area to the sides of them and then we have a we have an array where we're going to keep track of our targets that we are tracking and then lastly we have a screen size variable that we're going to set so that we can and we're going to use that to calculate our zoom the next thing we're going to add is two functions to let us add and remove targets from the camera and this lets you keep it dynamic so that for example if a you know third player joins the game you can add them to the camera and they'll get included if they leave the game you can remove them this also lets you and you know when bosses spawn in or anything like that you can you can control what targets the camera is tracking and which one it's not so most of the action is going to happen in the process function and first we'll talk about how we're going to do the movement portion keeping the camera centered so if we don't have any targets we don't need to do anything but if we do have targets what we're going to do is loop through each of the targets and basically find the average position that's going to be the center point between the positions of the various targets and then we just take our camera's position and we alert it to that new position we found using our move speed to lurp us at that speed and that's going to keep the camera centered where it needs to be okay and now our last part is here is to find the zoom so we're going to we need to find a rectangle that encloses all of the targets and then set our zoom to inclu you know to display that entire rectangle so we're gonna make ourselves a a starting rectangle here that's just centered at the position located at the position and it has a size of of one because it doesn't matter right now we're going to expand it we go through each each target and we expand that rectangle to include the target's position so that rectangle will keep growing and then we're gonna additionally once we've expanded it and it has all the targets inside of it we're gonna grow it a little bit more based on those margins that we set up above that gives us the extra buffer space around the different targets and then we're going to figure out which one is the maximum dimension the the x or the y is it a wide rectangle or a tall rectangle so if the x size is bigger right compared to the screen aspect ratio screen aspect ratio is what's going to determine how much we need to zoom then we're going to clamp our zoom the zoom we want is going to be the size of the rectangle divided by the screen the size of the screen and we're going to clamp that between the min and max otherwise if the if the y was bigger we just do that with y and then we learn blurp our zoom to that zoom value right it might be 1.5 it might be three whatever and use our zoom speed so let's take a look at how it works in practice okay so i've added my multitarget camera to my main scene which is happens to be my tile map for this example and in the timeout script i've added both of the two characters as targets to the camera so now it'll be tracking both of those i've also set the camera's limits so that it doesn't uh scroll past the left or right edges of the tile map that's of course totally optional and you could add the top and bottom depends on how you have your levels laid out okay but let's take a look at what it looks like so i have added a debug drawing here this is drawing the rectangle that we're calculating and so you can see the players are really close together but we're zoomed in the maximum amount at 1.5 but as they get farther away you see as that rectangle starts to reach the edge of the screen we're starting to zoom out right and that this is that buffer area to the right and left of the two characters that's that that's that margin that we added in the code so how big you want that margin to be is entirely up to you and i made it a little smaller in the vertical than i did in the horizontal but now you can see as we move away we're zooming farther and farther out right it doesn't matter whether we're above or below but we're moving farther and farther away until we reach the edge and this is the maximum zoom i set but you can see that as the two characters move around that rectangle is keeping track of how far apart they are and making sure that our zoom level never makes any either of them go off the screen right and that's it that's your multitarget dynamic camera and i'll show you one other example we can add one of these uh mobs in as another track to target and you can see how it works with three okay so now what we're doing is we have three targets that purple mob up there is also one of the targets so you can see as it's moving our center point is staying centered between the three of them and the zoom is making sure that no matter where they go everybody is staying on screen so you can do this really with any number of targets obviously depending on how your game is set up hopefully that helps if you have any questions please post them in the comments below and i'll include a link in the description where you can download this demo project as well and experiment with it yourself you can find this recipe and lots more on the godot recipes website at godotrecipes.com here you can find a wide variety of recipes for creating the game system you need some help on how to get started with godot in the basics section and lots more i recommend you go over there and explore and let me know if there's something you're looking for that you'd like me to add as i'm always adding more recipes over time thanks for watching and i'll see you in a future video
