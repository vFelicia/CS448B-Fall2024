With timestamps:

00:00 - okay welcome back to Godot 101 this is
00:03 - part three where we're going to continue
00:05 - talking about scripting and how you can
00:07 - use scripts to make your nodes behave
00:09 - the way you want if you haven't watched
00:11 - the previous videos please do go back
00:14 - and start there because we cover a lot
00:15 - of the basic concepts in those and I
00:18 - don't want you to get lost
00:20 - all right so let's get started all right
00:22 - when we left off we had our sprite
00:25 - animating by moving across the screen
00:27 - and spinning but it just goes off the
00:31 - edge when it reaches the edge we want to
00:33 - make it out so we need to detect when
00:35 - we've reached the edges of the screen
00:37 - and reverse the horizontal or vertical
00:41 - component of the velocity when we do so
00:44 - so we're going to go back over to our
00:46 - script here and in our script write that
00:51 - GD script that's the one that's attached
00:53 - to down here attached to the sprite node
00:59 - so in the script we need to know what
01:03 - screen sizes and the screen size is
01:06 - something you set over here in the
01:09 - project settings so if you click on
01:11 - scene project settings there's all sorts
01:15 - of information in here and under display
01:17 - you have your width and height of your
01:20 - game screen and it's set up right now
01:23 - for me to 1024 by 600 but I can change
01:26 - that and it'll change how big the game
01:27 - window is so I'm going to I'm going to
01:29 - keep that for now but I want my code to
01:31 - be able to know that and know how big
01:33 - the screen size is so I'm going to make
01:36 - a new I'm going to clear a new variable
01:39 - called screen size and in the ready when
01:43 - that gets launched to me to get rid of
01:46 - this print here I want to get that
01:48 - screen size and so the command to get
01:51 - that is get viewport wrecked see the
01:55 - autosuggest finding it dot size so if
02:01 - you ever need to know what a function
02:03 - does in judo you can highlight it like
02:05 - this and if you click on help contextual
02:09 - help shift f1 is the shortcut we'll go
02:12 - and look up
02:13 - at function you got to remove the
02:17 - parentheses there we go
02:18 - and you can go and see that it's going
02:22 - to give you the viewports boundaries as
02:24 - a wreck to then erect to is an object
02:27 - that describes the rectangular bounding
02:30 - box and has all these properties
02:33 - including a position a size and and and
02:37 - the size is a vector so it's going to
02:39 - have a width nice - there's two values
02:42 - okay so that's what we're that's what
02:44 - we're going for here so now we'll have
02:46 - this screen size variable we'll have a
02:50 - width of 1024 and a height of 600 and
02:53 - iris we're going to need to detect when
02:58 - we reach those extents whether the
03:00 - position has reached at so to make
03:02 - things a little easier to track we're
03:06 - going to have a position variable as
03:08 - well okay and so what I'm going to do
03:14 - with that position is at the beginning
03:17 - here I'm going to set position equal to
03:19 - screen size divided by 2 so that will
03:23 - divide both of them the with the night
03:25 - by 2 so it's going to make our sprite
03:27 - start at the center of the screen no
03:29 - matter what size the screen is our
03:31 - position is gonna be set to the center
03:32 - of it and then what we want to do is we
03:37 - just want to set our position to that
03:41 - variable and that variable will change
03:45 - by adding lots of these time cells okay
03:50 - so all that's going to change so far is
03:53 - that we're just going to start at the
03:54 - center and still spin off okay so what
03:59 - we can do here is we can just say if the
04:00 - position X is greater than or equal to
04:05 - screen size width for the position X is
04:10 - less than or equal to 0 then we're going
04:14 - to take the velocity X and we're going
04:17 - to multiply by negative 1 and then we're
04:21 - going to do the same thing with the y
04:24 - I will just simply take this and change
04:32 - these two wives
04:33 - and this is going to be hight velocity
04:40 - what now when we run it we're going to
04:43 - see the sprite jump off the wall but one
04:48 - problem we still have is it's going to
04:50 - go you know it's going halfway off the
04:53 - wall first and that's because in our
04:55 - sprite settings see where this button
04:56 - here marked checked force entered that
04:59 - means that the position property is
05:02 - linked to the center of the sprite
05:05 - okay if we were to uncheck that
05:07 - collectible 2d view here then see it
05:12 - shift like that the anchor point is here
05:14 - so we'd be using that centered is fine
05:17 - but we want to bounce when the edges hit
05:19 - so we need to bounce before the center
05:22 - hits the wall we need to know how big
05:25 - our sprite is and so we can do that in
05:28 - our script as well
05:30 - with a variable I'm going to call this
05:32 - the extents that's we this is going to
05:36 - be the half of the width of the sprite
05:39 - and half of the height of the sprite
05:42 - it's going to be of another vector too
05:43 - cause I only care about half the width
05:45 - and half the height and how far the
05:47 - center is from the edge so the extent is
05:51 - going to be get texture dot get size
05:58 - divided by two and these are both
06:01 - functions that the sprite node has in it
06:05 - and so for example if we go to the
06:10 - textual help again right there's lots of
06:14 - places where you can use get texture but
06:16 - the sprite that gets texture is one we
06:18 - care about gives you back the texture
06:21 - and it gives you back a texture object
06:23 - next your object has get size and get
06:28 - size gives us back a vector to my a
06:30 - two-dimensional vector and then I'm
06:34 - going to divide it by two so I only
06:36 - really care about height
06:37 - this texture that we're using is a 64 by
06:40 - 64 icon so our extents are going to be
06:43 - 32 by 32 so now down here we can bounce
06:47 - we're going to have to split this up now
06:49 - and do the floor walls separately so
06:51 - starting with we'll start with this one
06:55 - so if we reach screen size dot with -
07:01 - extent that width then we're going to
07:06 - bounce change the velocity multiplied by
07:10 - negative one okay and to avoid getting
07:15 - stuck on the wall in the case where you
07:19 - move you know a little bit past the edge
07:23 - because of rounding errors or infraction
07:26 - we also want to make sure we put the
07:29 - edge against yet so we're going to say
07:31 - position X equals this value
07:37 - and we do the same thing here with less
07:41 - than instead of less than 0 is less than
07:44 - X 10.6 and then we also set paws X to
07:54 - extend stuff ok and then we have to do
07:58 - the same thing again with the Y okay so
08:04 - to try this out let's increase our speed
08:06 - a bit because I want to be a little
08:09 - faster so I can see it hit the edges now
08:13 - we should be staying in the screen nice
08:19 - so the last thing I want to do here is I
08:22 - want to randomize this velocity instead
08:25 - of having it be always the same so we
08:30 - could do that here by setting in the
08:34 - ready our velocity to a random value all
08:39 - right and so there's a lot of ways we
08:42 - could do this we could take two random
08:44 - numbers but what I'm going to do is I'm
08:46 - going to pick a speed and that speed is
08:51 - going to be a R and range so you pick a
08:53 - random number to R and range and then
08:55 - you see it's going to give you back a
08:57 - floating-point number between any two
09:01 - floating point numbers so let's just say
09:04 - between 100 and 300 comma 0 so we're
09:10 - picking a random value in the positive
09:14 - x-direction so a random speed straight
09:17 - to the right and I'm just going to
09:20 - rotate that so with a vector you can
09:23 - rotate it by picking a angle let's go
09:29 - look at it
09:31 - sector 2 dot rotated so what rotated
09:36 - does is it wants a angle in radians we
09:42 - need to pick a random number in radians
09:44 - let me say R and range from 0 to 2 times
09:49 - pi PI is a constant
09:51 - is built into it oh so we don't have to
09:55 - tell it what it is all right so I pick a
09:57 - random value between 0 and 2pi which is
09:59 - 360 degrees so our velocity will be in
10:01 - any random direction and so every time
10:07 - we play it it's going to fly off in a
10:12 - different way but wait that didn't look
10:14 - different did it no it's not and the
10:17 - reason is that the in gadot the R and
10:21 - range functions will produce the same
10:25 - values every time which doesn't sound
10:28 - like very good randomization but it is
10:30 - useful for testing sometimes you want to
10:33 - test things and get the same results
10:34 - every time if you really if you want the
10:37 - random numbers to be different every
10:39 - time you can call randomized randomized
10:43 - basically seed the random number
10:46 - generator is a unpredictable value so
10:50 - you don't know what your sequence of
10:53 - random numbers is going to be so like
10:55 - that time it went up that time it went
10:58 - to the left
11:01 - ok that's ok so now we're getting random
11:05 - directions and I'm going to add one more
11:09 - in because I'm going to say spin is
11:15 - going to be a random R and range from
11:18 - negative pi to pi and that is just going
11:22 - to be skin is going to be how fast we
11:27 - rotate so that way I can get some
11:30 - different looking sense and spinning to
11:35 - the right that time this climate is
11:39 - let's see this time the spin is very
11:41 - small barely turning close to zero this
11:47 - one is a little bit higher okay so
11:50 - that'll do it for this time around and
11:53 - in the next video we're going to talk
11:55 - about how we can take this single sprite
11:59 - scene that we've made and use it to
12:02 - spawn multiple sprites
12:05 - using something called instancing I hope
12:09 - you're enjoying following along if you
12:12 - are please try and make sure you're
12:14 - always typing the code yourself even if
12:17 - you're following along if you're doing
12:18 - the work yourself it definitely helps
12:20 - everything get locked into your brain
12:23 - and helps you understand what's
12:25 - happening but if you do need the code
12:27 - I've linked to the code for this step in
12:29 - the comments below and you can download
12:31 - the Godot project and I will see you in
12:34 - the next video thanks for watching

Cleaned transcript:

okay welcome back to Godot 101 this is part three where we're going to continue talking about scripting and how you can use scripts to make your nodes behave the way you want if you haven't watched the previous videos please do go back and start there because we cover a lot of the basic concepts in those and I don't want you to get lost all right so let's get started all right when we left off we had our sprite animating by moving across the screen and spinning but it just goes off the edge when it reaches the edge we want to make it out so we need to detect when we've reached the edges of the screen and reverse the horizontal or vertical component of the velocity when we do so so we're going to go back over to our script here and in our script write that GD script that's the one that's attached to down here attached to the sprite node so in the script we need to know what screen sizes and the screen size is something you set over here in the project settings so if you click on scene project settings there's all sorts of information in here and under display you have your width and height of your game screen and it's set up right now for me to 1024 by 600 but I can change that and it'll change how big the game window is so I'm going to I'm going to keep that for now but I want my code to be able to know that and know how big the screen size is so I'm going to make a new I'm going to clear a new variable called screen size and in the ready when that gets launched to me to get rid of this print here I want to get that screen size and so the command to get that is get viewport wrecked see the autosuggest finding it dot size so if you ever need to know what a function does in judo you can highlight it like this and if you click on help contextual help shift f1 is the shortcut we'll go and look up at function you got to remove the parentheses there we go and you can go and see that it's going to give you the viewports boundaries as a wreck to then erect to is an object that describes the rectangular bounding box and has all these properties including a position a size and and and the size is a vector so it's going to have a width nice there's two values okay so that's what we're that's what we're going for here so now we'll have this screen size variable we'll have a width of 1024 and a height of 600 and iris we're going to need to detect when we reach those extents whether the position has reached at so to make things a little easier to track we're going to have a position variable as well okay and so what I'm going to do with that position is at the beginning here I'm going to set position equal to screen size divided by 2 so that will divide both of them the with the night by 2 so it's going to make our sprite start at the center of the screen no matter what size the screen is our position is gonna be set to the center of it and then what we want to do is we just want to set our position to that variable and that variable will change by adding lots of these time cells okay so all that's going to change so far is that we're just going to start at the center and still spin off okay so what we can do here is we can just say if the position X is greater than or equal to screen size width for the position X is less than or equal to 0 then we're going to take the velocity X and we're going to multiply by negative 1 and then we're going to do the same thing with the y I will just simply take this and change these two wives and this is going to be hight velocity what now when we run it we're going to see the sprite jump off the wall but one problem we still have is it's going to go you know it's going halfway off the wall first and that's because in our sprite settings see where this button here marked checked force entered that means that the position property is linked to the center of the sprite okay if we were to uncheck that collectible 2d view here then see it shift like that the anchor point is here so we'd be using that centered is fine but we want to bounce when the edges hit so we need to bounce before the center hits the wall we need to know how big our sprite is and so we can do that in our script as well with a variable I'm going to call this the extents that's we this is going to be the half of the width of the sprite and half of the height of the sprite it's going to be of another vector too cause I only care about half the width and half the height and how far the center is from the edge so the extent is going to be get texture dot get size divided by two and these are both functions that the sprite node has in it and so for example if we go to the textual help again right there's lots of places where you can use get texture but the sprite that gets texture is one we care about gives you back the texture and it gives you back a texture object next your object has get size and get size gives us back a vector to my a twodimensional vector and then I'm going to divide it by two so I only really care about height this texture that we're using is a 64 by 64 icon so our extents are going to be 32 by 32 so now down here we can bounce we're going to have to split this up now and do the floor walls separately so starting with we'll start with this one so if we reach screen size dot with extent that width then we're going to bounce change the velocity multiplied by negative one okay and to avoid getting stuck on the wall in the case where you move you know a little bit past the edge because of rounding errors or infraction we also want to make sure we put the edge against yet so we're going to say position X equals this value and we do the same thing here with less than instead of less than 0 is less than X 10.6 and then we also set paws X to extend stuff ok and then we have to do the same thing again with the Y okay so to try this out let's increase our speed a bit because I want to be a little faster so I can see it hit the edges now we should be staying in the screen nice so the last thing I want to do here is I want to randomize this velocity instead of having it be always the same so we could do that here by setting in the ready our velocity to a random value all right and so there's a lot of ways we could do this we could take two random numbers but what I'm going to do is I'm going to pick a speed and that speed is going to be a R and range so you pick a random number to R and range and then you see it's going to give you back a floatingpoint number between any two floating point numbers so let's just say between 100 and 300 comma 0 so we're picking a random value in the positive xdirection so a random speed straight to the right and I'm just going to rotate that so with a vector you can rotate it by picking a angle let's go look at it sector 2 dot rotated so what rotated does is it wants a angle in radians we need to pick a random number in radians let me say R and range from 0 to 2 times pi PI is a constant is built into it oh so we don't have to tell it what it is all right so I pick a random value between 0 and 2pi which is 360 degrees so our velocity will be in any random direction and so every time we play it it's going to fly off in a different way but wait that didn't look different did it no it's not and the reason is that the in gadot the R and range functions will produce the same values every time which doesn't sound like very good randomization but it is useful for testing sometimes you want to test things and get the same results every time if you really if you want the random numbers to be different every time you can call randomized randomized basically seed the random number generator is a unpredictable value so you don't know what your sequence of random numbers is going to be so like that time it went up that time it went to the left ok that's ok so now we're getting random directions and I'm going to add one more in because I'm going to say spin is going to be a random R and range from negative pi to pi and that is just going to be skin is going to be how fast we rotate so that way I can get some different looking sense and spinning to the right that time this climate is let's see this time the spin is very small barely turning close to zero this one is a little bit higher okay so that'll do it for this time around and in the next video we're going to talk about how we can take this single sprite scene that we've made and use it to spawn multiple sprites using something called instancing I hope you're enjoying following along if you are please try and make sure you're always typing the code yourself even if you're following along if you're doing the work yourself it definitely helps everything get locked into your brain and helps you understand what's happening but if you do need the code I've linked to the code for this step in the comments below and you can download the Godot project and I will see you in the next video thanks for watching
