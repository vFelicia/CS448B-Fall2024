With timestamps:

00:01 - welcome back to learning to code with
00:02 - Python in this lesson we're gonna do
00:05 - some more animation and we're gonna
00:07 - learn about a new programming concept
00:09 - called objects and that allows lesson we
00:15 - created an animated ball that bounced
00:17 - around the screen and at the end of the
00:20 - video I asked you to think about what
00:22 - you would need to do if you wanted to
00:24 - have two different balls bouncing around
00:26 - the screen well the obvious answer would
00:31 - be to make a second ball alright we
00:35 - could call it ball 2 and we could maybe
00:38 - make it a different color but now that
00:42 - second ball is going to need its own X
00:44 - beat and Y speed so we probably have to
00:48 - copy and paste this and call these X
00:52 - speed to and X&Y speed to and maybe make
00:56 - them different values now we get to our
01:02 - animation and here's where we're moving
01:05 - the ball finding its coordinates and
01:07 - telling it whether it needs to bounce
01:08 - off the wall or not well we have to do
01:10 - all those things again for the second
01:14 - ball so we would have to paste
01:16 - everything in here make this ball to
01:20 - this canvas dot move has to be for ball
01:23 - 2 at X speed 2 and Y speed 2 and then we
01:28 - need to make sure we bounce the ball
01:34 - with its speed as well so if we run this
01:37 - you'll see that well that works and we
01:40 - have two different balls moving in two
01:42 - different speeds and that's fine
01:50 - if we wanted to add a third one well we
01:51 - have to go through that whole process
01:52 - again four five six balls you'd see this
01:56 - would start to get really long every
02:01 - time we paste in we have to make those
02:04 - changes there's so many opportunities to
02:05 - make mistakes and forget to fix
02:07 - something and then you have to go
02:08 - through you imagine if you had a bunch
02:10 - of these trying to go through here and
02:12 - find where your mistake that you have to
02:14 - fix is would be really difficult as a
02:18 - general rule in programming if you see
02:20 - yourself repeating the same kind of code
02:22 - over and over again or copying and
02:24 - pasting a big chunk of code to use it
02:26 - again it usually means that you're doing
02:28 - something wrong or if not wrong you're
02:31 - doing something the hard way that could
02:33 - be done a better way that better way is
02:38 - by using something called an object an
02:42 - object is just a way in programming to
02:45 - create an item in your program that may
02:50 - have a whole bunch of different
02:51 - properties and behaviors collected in it
02:55 - for example we want to make a ball
02:58 - object that ball object is going to have
03:01 - some properties it's gonna have its its
03:03 - shape and size and color it's gonna have
03:06 - its X speed and its Y speed these are
03:08 - all properties that each ball will have
03:11 - it'll be different for each ball but
03:13 - each ball will have those properties and
03:14 - each ball is going to have a behavior
03:17 - the behavior is that it moves and it
03:20 - checks its coordinates and bounces off
03:22 - the wall and every ball should know how
03:24 - to do that so if we create a ball object
03:30 - what we're doing is we're defining a
03:31 - generic ball and all the properties and
03:34 - behaviors that generic ball should have
03:37 - and then we could create as many balls
03:39 - as we want as long as they all follow
03:42 - and are one of those generic balls then
03:45 - they will have all those properties
03:48 - don't worry if this is confusing at
03:51 - first this is a concept that takes a
03:54 - little bit of practice to get used to
03:56 - and after we've gone through it a few
03:58 - times you'll see it'll start to make
04:00 - sense so how do we start well we need to
04:03 - define
04:04 - what that generic ball is okay and the
04:07 - way you define an object is using the
04:11 - class keyword so we'll call it ball now
04:16 - typically in Python the general rule is
04:20 - that we use capital letters
04:22 - when we're naming classes we keep
04:26 - variables as lowercase because they're
04:29 - easier to type and read but when we're
04:31 - defining the class we use the capital B
04:33 - to sort of set it apart and indicate
04:35 - that we're making we're defining a class
04:37 - here and the capital B ball will be the
04:40 - generic ball that defines what
04:43 - properties all balls should have so I'm
04:49 - gonna go ahead real quick and I'm going
04:51 - to delete all this ball 2 stuff just to
04:55 - keep things a little cleaner so that we
04:59 - can see what's going on so what do we
05:01 - need to do in our definition of the ball
05:04 - well first we need to define all of
05:07 - those properties or the shape and the
05:10 - size and the color and the speeds and
05:12 - all those things and the way you do that
05:16 - is since we want those things to be set
05:18 - up when the ball is created what you can
05:22 - do in Python is you create a special
05:24 - function we define a special function
05:27 - called init it has those double
05:30 - underlines under it because it's a
05:32 - special one that every object can have
05:34 - so the Python knows to look for this
05:39 - function called init and if it exists
05:42 - whenever the object is created it's
05:45 - gonna do whatever it says to do in there
05:47 - so we're just gonna fill in a little bit
05:50 - more code and then I'm gonna explain
05:52 - what it's doing so what we want to do is
05:55 - we want to create we want these commands
05:58 - to happen when the ball is created right
06:01 - but we need to name things a little
06:03 - differently because each object is gonna
06:06 - have its own properties its own speed
06:09 - its own shape its own color etc then
06:14 - these variables need to be named you
06:17 - nicholae we can't just say xspeed
06:19 - because every ball will have its own X
06:21 - speed and that's what this little self
06:25 - name is for so if we call this self dot
06:28 - shape then each ball is gonna have its
06:30 - own shape that belongs to it and each
06:34 - speed is gonna have its own I'm sorry
06:38 - each ball is gonna have its own expeed
06:39 - and why speed that belongs to it so if I
06:44 - make a ball named Joe it's gonna have
06:46 - Joe's shape and Joe's Datuk speed and
06:48 - Joe's my speed so that will set those
06:52 - properties whenever the ball is created
06:54 - and here's how you would create a ball
06:58 - so let's say we want to call it new ball
07:04 - well we're gonna say that new ball is a
07:07 - capital D ball and now when this code
07:12 - gets run this capital B ball is gonna
07:16 - say go ahead and make new ball one of
07:18 - these and give new ball a shape it's an
07:22 - oval of this size filled with orange and
07:25 - give new ball and EXPEED in a Y speed of
07:27 - four and five okay I'm not gonna run
07:31 - this yet because we're gonna get some
07:32 - errors from this code still because we
07:34 - have to clean this up as well because
07:36 - the ball needs to also know how to move
07:38 - around the screen we want all of these
07:40 - commands to be part of the balls
07:42 - definition as well so what we're gonna
07:44 - do is we're also going to find something
07:46 - called
07:47 - move we're gonna say here's how you move
07:49 - yourself okay and that's what all of
07:53 - these things are going to be so I'm
07:55 - gonna cut these out and I'm gonna paste
07:57 - them in over here and then that a little
08:01 - bit there we go okay now we need to just
08:04 - make sure that what we're moving is our
08:05 - self dot shape and we're moving at our
08:08 - self deck speed our self dot Y speed
08:13 - we're checking the coordinates of our
08:17 - shape and then we're updating our self
08:24 - dot wide speed and our self X speed to
08:28 - tell us how to
08:31 - bounced off the walls okay there's our
08:36 - class ball now new ball will have a
08:40 - shape and X feet and my speed and new
08:43 - ball will also have a command called
08:45 - move that'll tell it how to move so that
08:48 - means in our while loop here we can just
08:50 - say new ball dot move and now every time
08:56 - we go through our animation it's gonna
08:58 - say take the new ball and do whatever
09:00 - moves says to do well move says to
09:02 - actually move it with the canvas move
09:05 - command check its coordinates bounce off
09:07 - the wall so if we run this we've now got
09:12 - an orange ball that bounces off the
09:13 - walls again so your first question is
09:17 - probably why did we do all that work to
09:20 - change this around and we still have the
09:23 - same thing well now it's a whole lot
09:27 - easier to create multiple balls so if I
09:31 - want to say new ball - that's also a
09:34 - ball and then I only have to say new
09:37 - ball to move in my animation loop and
09:42 - then they will both be there ah where
09:46 - are they well the problem we have is
09:50 - that both balls are the same size and
09:52 - have the same speed so they're just
09:55 - right on top of each other so it would
09:58 - probably be good if instead of the speed
10:00 - always being it speed always being four
10:03 - and the Y speed always being five we
10:06 - instead made these random let's put some
10:09 - random numbers in here so that every
10:13 - time a new ball gets created its speed
10:17 - will be different from the others and
10:21 - that way we'll be able to see them
10:24 - separately good
10:34 - now you may have noticed when we created
10:39 - the new ball here we put these
10:40 - parentheses after the capital B ball
10:45 - class definition well the reason for
10:48 - that is that we can pass in values to
10:53 - the ball to specify certain things that
10:56 - we want to specify so for example let's
10:59 - say that we wanted to be able to say
11:00 - ball I want this one to be red and I
11:04 - want this one to be green we we want to
11:08 - be able to put a color in here and have
11:10 - that going here and instead of filling
11:12 - with orange
11:13 - it'll fill with whatever color we said
11:15 - well that becomes a argument to our init
11:21 - function so after self here we can say
11:23 - color and let's fill with color so now
11:29 - when we create a new ball this value
11:34 - that we give here red gets called color
11:36 - and then in our init function we use it
11:39 - here to call it color and now when we
11:42 - run each ball will be its own different
11:46 - color and we will also be nice to be
11:52 - able to specify the size right now we're
11:54 - always drawing the same size
11:57 - we're always drawing the same size ball
11:59 - so we could also add a number after here
12:04 - for how big we want the ball to be and
12:08 - call that size and then instead of
12:11 - putting the 60 there we'll put the size
12:19 - so we'll draw from 10 10 to sighs sighs
12:21 - and now those two balls will be
12:25 - different sizes and notice we don't have
12:29 - to do anything about the bouncing off
12:32 - the walls for the different size balls
12:34 - because it doesn't matter and close that
12:37 - it doesn't matter how big it is it's
12:41 - just bouncing off when it's coordinates
12:43 - say it's touched
12:44 - all this video has already gotten pretty
12:48 - long so we're gonna stop there and I'm
12:50 - gonna let you experiment with this you
12:53 - can see that if you want to make another
12:55 - ball it's as simple as creating the
13:00 - creating the ball object and making sure
13:06 - that you make sure to tell it to move in
13:10 - your animation loop okay
13:13 - so if you wanted to make multiple balls
13:16 - you can now my question for next time is
13:21 - what if I want to make a hundred of
13:25 - these to bounce around the screen how
13:26 - would I do that think about that and
13:30 - we'll talk about that next time
13:32 - thanks for watching
13:41 - you

Cleaned transcript:

welcome back to learning to code with Python in this lesson we're gonna do some more animation and we're gonna learn about a new programming concept called objects and that allows lesson we created an animated ball that bounced around the screen and at the end of the video I asked you to think about what you would need to do if you wanted to have two different balls bouncing around the screen well the obvious answer would be to make a second ball alright we could call it ball 2 and we could maybe make it a different color but now that second ball is going to need its own X beat and Y speed so we probably have to copy and paste this and call these X speed to and X&Y speed to and maybe make them different values now we get to our animation and here's where we're moving the ball finding its coordinates and telling it whether it needs to bounce off the wall or not well we have to do all those things again for the second ball so we would have to paste everything in here make this ball to this canvas dot move has to be for ball 2 at X speed 2 and Y speed 2 and then we need to make sure we bounce the ball with its speed as well so if we run this you'll see that well that works and we have two different balls moving in two different speeds and that's fine if we wanted to add a third one well we have to go through that whole process again four five six balls you'd see this would start to get really long every time we paste in we have to make those changes there's so many opportunities to make mistakes and forget to fix something and then you have to go through you imagine if you had a bunch of these trying to go through here and find where your mistake that you have to fix is would be really difficult as a general rule in programming if you see yourself repeating the same kind of code over and over again or copying and pasting a big chunk of code to use it again it usually means that you're doing something wrong or if not wrong you're doing something the hard way that could be done a better way that better way is by using something called an object an object is just a way in programming to create an item in your program that may have a whole bunch of different properties and behaviors collected in it for example we want to make a ball object that ball object is going to have some properties it's gonna have its its shape and size and color it's gonna have its X speed and its Y speed these are all properties that each ball will have it'll be different for each ball but each ball will have those properties and each ball is going to have a behavior the behavior is that it moves and it checks its coordinates and bounces off the wall and every ball should know how to do that so if we create a ball object what we're doing is we're defining a generic ball and all the properties and behaviors that generic ball should have and then we could create as many balls as we want as long as they all follow and are one of those generic balls then they will have all those properties don't worry if this is confusing at first this is a concept that takes a little bit of practice to get used to and after we've gone through it a few times you'll see it'll start to make sense so how do we start well we need to define what that generic ball is okay and the way you define an object is using the class keyword so we'll call it ball now typically in Python the general rule is that we use capital letters when we're naming classes we keep variables as lowercase because they're easier to type and read but when we're defining the class we use the capital B to sort of set it apart and indicate that we're making we're defining a class here and the capital B ball will be the generic ball that defines what properties all balls should have so I'm gonna go ahead real quick and I'm going to delete all this ball 2 stuff just to keep things a little cleaner so that we can see what's going on so what do we need to do in our definition of the ball well first we need to define all of those properties or the shape and the size and the color and the speeds and all those things and the way you do that is since we want those things to be set up when the ball is created what you can do in Python is you create a special function we define a special function called init it has those double underlines under it because it's a special one that every object can have so the Python knows to look for this function called init and if it exists whenever the object is created it's gonna do whatever it says to do in there so we're just gonna fill in a little bit more code and then I'm gonna explain what it's doing so what we want to do is we want to create we want these commands to happen when the ball is created right but we need to name things a little differently because each object is gonna have its own properties its own speed its own shape its own color etc then these variables need to be named you nicholae we can't just say xspeed because every ball will have its own X speed and that's what this little self name is for so if we call this self dot shape then each ball is gonna have its own shape that belongs to it and each speed is gonna have its own I'm sorry each ball is gonna have its own expeed and why speed that belongs to it so if I make a ball named Joe it's gonna have Joe's shape and Joe's Datuk speed and Joe's my speed so that will set those properties whenever the ball is created and here's how you would create a ball so let's say we want to call it new ball well we're gonna say that new ball is a capital D ball and now when this code gets run this capital B ball is gonna say go ahead and make new ball one of these and give new ball a shape it's an oval of this size filled with orange and give new ball and EXPEED in a Y speed of four and five okay I'm not gonna run this yet because we're gonna get some errors from this code still because we have to clean this up as well because the ball needs to also know how to move around the screen we want all of these commands to be part of the balls definition as well so what we're gonna do is we're also going to find something called move we're gonna say here's how you move yourself okay and that's what all of these things are going to be so I'm gonna cut these out and I'm gonna paste them in over here and then that a little bit there we go okay now we need to just make sure that what we're moving is our self dot shape and we're moving at our self deck speed our self dot Y speed we're checking the coordinates of our shape and then we're updating our self dot wide speed and our self X speed to tell us how to bounced off the walls okay there's our class ball now new ball will have a shape and X feet and my speed and new ball will also have a command called move that'll tell it how to move so that means in our while loop here we can just say new ball dot move and now every time we go through our animation it's gonna say take the new ball and do whatever moves says to do well move says to actually move it with the canvas move command check its coordinates bounce off the wall so if we run this we've now got an orange ball that bounces off the walls again so your first question is probably why did we do all that work to change this around and we still have the same thing well now it's a whole lot easier to create multiple balls so if I want to say new ball that's also a ball and then I only have to say new ball to move in my animation loop and then they will both be there ah where are they well the problem we have is that both balls are the same size and have the same speed so they're just right on top of each other so it would probably be good if instead of the speed always being it speed always being four and the Y speed always being five we instead made these random let's put some random numbers in here so that every time a new ball gets created its speed will be different from the others and that way we'll be able to see them separately good now you may have noticed when we created the new ball here we put these parentheses after the capital B ball class definition well the reason for that is that we can pass in values to the ball to specify certain things that we want to specify so for example let's say that we wanted to be able to say ball I want this one to be red and I want this one to be green we we want to be able to put a color in here and have that going here and instead of filling with orange it'll fill with whatever color we said well that becomes a argument to our init function so after self here we can say color and let's fill with color so now when we create a new ball this value that we give here red gets called color and then in our init function we use it here to call it color and now when we run each ball will be its own different color and we will also be nice to be able to specify the size right now we're always drawing the same size we're always drawing the same size ball so we could also add a number after here for how big we want the ball to be and call that size and then instead of putting the 60 there we'll put the size so we'll draw from 10 10 to sighs sighs and now those two balls will be different sizes and notice we don't have to do anything about the bouncing off the walls for the different size balls because it doesn't matter and close that it doesn't matter how big it is it's just bouncing off when it's coordinates say it's touched all this video has already gotten pretty long so we're gonna stop there and I'm gonna let you experiment with this you can see that if you want to make another ball it's as simple as creating the creating the ball object and making sure that you make sure to tell it to move in your animation loop okay so if you wanted to make multiple balls you can now my question for next time is what if I want to make a hundred of these to bounce around the screen how would I do that think about that and we'll talk about that next time thanks for watching you
