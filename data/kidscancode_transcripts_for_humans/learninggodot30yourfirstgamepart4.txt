With timestamps:

00:00 - welcome to part 4 of learning Godot in
00:03 - part 3 we created the main scene for our
00:05 - game and now it's time to tackle the
00:08 - scripting side so that we can start
00:10 - spawning mobs so in this main node we're
00:13 - going to want to spawn mobs randomly
00:16 - around the borders of the screen and to
00:20 - choose a random spot along that path
00:22 - we're going to use a path 2d so add that
00:27 - and we're gonna call this mob path and
00:32 - now we want to draw the path around
00:35 - there and so make sure you go over here
00:38 - and you have snap to grid enabled so
00:41 - that your lines will be straight and
00:43 - then you're gonna click this button
00:45 - right here the one with the little green
00:46 - plus on it if you hover that says add a
00:49 - point so it's gonna add a point along
00:51 - our curve and we're gonna start in the
00:53 - upper left hand corner and we're gonna
00:55 - draw the path clockwise around the
00:57 - screen make sure you go clockwise if you
00:59 - go counterclockwise your path will be
01:02 - pointing outwards in your mobs will
01:03 - spawn and go away from the screen and
01:05 - that's not good so we're gonna add the
01:07 - first point right here at the corner
01:09 - second point at this corner then this
01:13 - one and then last this one then we're
01:17 - gonna click this last button here that
01:20 - is close curve and that will just make
01:22 - the bottom left-hand corner connect to
01:26 - the top one again so now we have a
01:27 - closed curve that just traces all the
01:29 - way around the borders of the screen and
01:31 - now that the path is defined we want to
01:34 - add a path follow 2d node as a child of
01:37 - the path and what that does is it's a 2d
01:41 - node that can move anywhere along a path
01:44 - and so by choosing a random point along
01:47 - the path that'll give us our mobs spawn
01:49 - location so we're gonna name that mob
01:52 - spawn location now let's add a script to
01:56 - our main and at the top we're gonna
02:00 - create a variable to choose what mob
02:02 - scene to use so we're gonna export
02:06 - packed scene that's the type of object I
02:11 - saved scene is we're going to call that
02:14 - mob
02:14 - okay and then over here when we see mob
02:18 - we can just take our mob scene and drop
02:23 - that right into that spot we're going to
02:26 - add a variable for score and then in the
02:30 - ready we're going to use randomize and
02:37 - what this will do is if we don't do this
02:40 - then every time we run the program we're
02:42 - gonna get the same sequence of so-called
02:46 - random numbers and that's can be useful
02:49 - for testing so that you can make sure
02:50 - you get the same sequence every time but
02:52 - this will allow us to make sure that it
02:54 - is it's random every time and it's
02:56 - unpredictable we don't need the process
03:00 - function but we are going to make a new
03:03 - game function and what that new game
03:06 - function is going to do is set the score
03:07 - equal to zero it's going to take the
03:10 - player and set its start to the start
03:18 - position position all right so we we
03:21 - call the start function on our player
03:23 - remember over here on the player we made
03:24 - the start function and we pass in the
03:27 - position so we're going to use the
03:29 - position of that start position note
03:31 - that we have and then we're going to
03:33 - start the start timer we also need to
03:39 - know when the game ends so we're going
03:41 - to take our click on our player instance
03:44 - click on node and connect our hit signal
03:49 - to the main and we're gonna this time
03:52 - change the name here of the method we
03:54 - want we're going to change we're going
03:55 - to use the game over function that it's
03:59 - going to make and in the game over
04:01 - function what we want to do is take the
04:06 - score timer and stop it game has ended
04:09 - that can stop and we're also going to
04:12 - take the mob timer and stop that because
04:16 - we don't want to keep generating mobs
04:17 - when the game is over now we need to
04:19 - start connecting up these timers the
04:23 - start timer is going to start the other
04:26 - two so
04:27 - we take the start timer and connect its
04:29 - timeout signal what it's going to do is
04:35 - it's going to start the mob timer and
04:41 - it's going to start the score timer the
04:47 - score timer connect its timeout and
04:51 - every time that happens we're going to
04:54 - just increase the score by 1 every time
04:59 - a second goes by you get one point now
05:03 - in the mob timer timeout this is going
05:06 - to spawn mobs so we connect that up and
05:09 - we're gonna have a little bit more to do
05:11 - inside of this function so in here we're
05:15 - gonna create an instance of the mob
05:17 - we're going to pick a random starting
05:19 - point along the path to D and then we're
05:22 - going to set the mob in motion now the
05:24 - path follow to D node one of its
05:27 - properties is that it will rotate
05:31 - automatically as it goes around so as it
05:33 - goes around it's going to turn and we
05:36 - can use that to set the direction of our
05:38 - mobs as well so first we'll choose that
05:41 - random location along the path so we
05:43 - take our mob spawn location and we set
05:47 - its offset and we're going to set that
05:51 - to a random number and since the path is
05:54 - looped it will just spin around until it
05:57 - finds a random spot and then we need to
06:00 - create our mob instance so we're going
06:03 - to make a temporary variable to hold it
06:06 - it's an instance of the mob we have to
06:09 - add it as a child because the node won't
06:13 - be executed until it becomes part of the
06:16 - scene tree so we need to add it as a
06:17 - child of main so it's part of the scene
06:20 - and then we're going to use a temporary
06:23 - variable here to get the direction of
06:26 - that path follow node so we take again
06:31 - our mob spawn location and we're going
06:35 - to get its rotation we're going to set
06:40 - the mobs position
06:42 - equal to the position of that node so we
06:45 - take the spawn locations position and
06:49 - then we want to use that direction to
06:53 - set which way the mob is facing and
06:56 - which way of the mob is moving but we're
06:59 - going to give it a little bit of
07:01 - randomness so they're not all moving
07:03 - just up down left and right
07:04 - so we're going to add a little bit of
07:07 - random value to this I want to add plus
07:09 - or minus 45 degrees but GT script most
07:13 - of its angle functions use radians not
07:16 - degrees so 45 degrees would be PI over 4
07:19 - so we're going to do between positive
07:22 - and negative PI over 4 to add plus or
07:25 - minus 45 degrees to the direction so now
07:28 - we know which way we're going we'll turn
07:31 - our mobs rotation to match that and then
07:35 - we need to set our mobs linear velocity
07:39 - this is a property of rigidbody 2d that
07:42 - controls the velocity of the object and
07:45 - we want to set this to a vector - and
07:49 - I'm gonna fill in those parentheses in a
07:51 - second but we want to take that vector -
07:53 - and we want to rotate it by the
07:56 - direction so it goes in the direction we
07:59 - want now what we want the vector to be
08:02 - is its Y can be 0 so it's going to be
08:06 - pointing to the right but its X is going
08:08 - to be a random number and it's between
08:11 - the min speed sorry the mob's min speed
08:15 - which we set over when we coded the mob
08:19 - and its max speed so somewhere between
08:25 - there and in the next video we'll be
08:29 - able to wrap this up by adding our UI
08:31 - our user interface to the main scene

Cleaned transcript:

welcome to part 4 of learning Godot in part 3 we created the main scene for our game and now it's time to tackle the scripting side so that we can start spawning mobs so in this main node we're going to want to spawn mobs randomly around the borders of the screen and to choose a random spot along that path we're going to use a path 2d so add that and we're gonna call this mob path and now we want to draw the path around there and so make sure you go over here and you have snap to grid enabled so that your lines will be straight and then you're gonna click this button right here the one with the little green plus on it if you hover that says add a point so it's gonna add a point along our curve and we're gonna start in the upper left hand corner and we're gonna draw the path clockwise around the screen make sure you go clockwise if you go counterclockwise your path will be pointing outwards in your mobs will spawn and go away from the screen and that's not good so we're gonna add the first point right here at the corner second point at this corner then this one and then last this one then we're gonna click this last button here that is close curve and that will just make the bottom lefthand corner connect to the top one again so now we have a closed curve that just traces all the way around the borders of the screen and now that the path is defined we want to add a path follow 2d node as a child of the path and what that does is it's a 2d node that can move anywhere along a path and so by choosing a random point along the path that'll give us our mobs spawn location so we're gonna name that mob spawn location now let's add a script to our main and at the top we're gonna create a variable to choose what mob scene to use so we're gonna export packed scene that's the type of object I saved scene is we're going to call that mob okay and then over here when we see mob we can just take our mob scene and drop that right into that spot we're going to add a variable for score and then in the ready we're going to use randomize and what this will do is if we don't do this then every time we run the program we're gonna get the same sequence of socalled random numbers and that's can be useful for testing so that you can make sure you get the same sequence every time but this will allow us to make sure that it is it's random every time and it's unpredictable we don't need the process function but we are going to make a new game function and what that new game function is going to do is set the score equal to zero it's going to take the player and set its start to the start position position all right so we we call the start function on our player remember over here on the player we made the start function and we pass in the position so we're going to use the position of that start position note that we have and then we're going to start the start timer we also need to know when the game ends so we're going to take our click on our player instance click on node and connect our hit signal to the main and we're gonna this time change the name here of the method we want we're going to change we're going to use the game over function that it's going to make and in the game over function what we want to do is take the score timer and stop it game has ended that can stop and we're also going to take the mob timer and stop that because we don't want to keep generating mobs when the game is over now we need to start connecting up these timers the start timer is going to start the other two so we take the start timer and connect its timeout signal what it's going to do is it's going to start the mob timer and it's going to start the score timer the score timer connect its timeout and every time that happens we're going to just increase the score by 1 every time a second goes by you get one point now in the mob timer timeout this is going to spawn mobs so we connect that up and we're gonna have a little bit more to do inside of this function so in here we're gonna create an instance of the mob we're going to pick a random starting point along the path to D and then we're going to set the mob in motion now the path follow to D node one of its properties is that it will rotate automatically as it goes around so as it goes around it's going to turn and we can use that to set the direction of our mobs as well so first we'll choose that random location along the path so we take our mob spawn location and we set its offset and we're going to set that to a random number and since the path is looped it will just spin around until it finds a random spot and then we need to create our mob instance so we're going to make a temporary variable to hold it it's an instance of the mob we have to add it as a child because the node won't be executed until it becomes part of the scene tree so we need to add it as a child of main so it's part of the scene and then we're going to use a temporary variable here to get the direction of that path follow node so we take again our mob spawn location and we're going to get its rotation we're going to set the mobs position equal to the position of that node so we take the spawn locations position and then we want to use that direction to set which way the mob is facing and which way of the mob is moving but we're going to give it a little bit of randomness so they're not all moving just up down left and right so we're going to add a little bit of random value to this I want to add plus or minus 45 degrees but GT script most of its angle functions use radians not degrees so 45 degrees would be PI over 4 so we're going to do between positive and negative PI over 4 to add plus or minus 45 degrees to the direction so now we know which way we're going we'll turn our mobs rotation to match that and then we need to set our mobs linear velocity this is a property of rigidbody 2d that controls the velocity of the object and we want to set this to a vector and I'm gonna fill in those parentheses in a second but we want to take that vector and we want to rotate it by the direction so it goes in the direction we want now what we want the vector to be is its Y can be 0 so it's going to be pointing to the right but its X is going to be a random number and it's between the min speed sorry the mob's min speed which we set over when we coded the mob and its max speed so somewhere between there and in the next video we'll be able to wrap this up by adding our UI our user interface to the main scene
