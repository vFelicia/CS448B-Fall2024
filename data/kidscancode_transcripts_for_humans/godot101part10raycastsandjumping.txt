With timestamps:

00:00 - welcome back to judo 101 this is part 10
00:03 - and in this video we're going to
00:05 - continue talking about physics and
00:08 - collisions and using a new node called
00:11 - the raycast alright let's get started
00:14 - you have our player and we can run
00:17 - around and the next logical step would
00:19 - be to make them able to jump but there's
00:23 - a few things you've got to take into
00:24 - account when you're going to implement
00:25 - jumping and it may not be obvious right
00:28 - away so let's take a look at it now we
00:31 - could add a jump speed define a jump
00:35 - speed here to be let's make this try
00:39 - negative 1500 right so that's going to
00:41 - be negative you want to be upwards and
00:44 - we could just go down here and just like
00:46 - we're doing with the UI right and you I
00:49 - left we could add a check there to see
00:53 - if we want to jump upwards Frank we
00:56 - could say something like if is action
01:01 - pressed UI up and we just set the
01:05 - velocity equal to jump speed but they're
01:09 - going to be a couple of issues with that
01:11 - so let's take a look all right time I'm
01:13 - going to tap the up key I jumped up
01:16 - right but if I hold down the up key I'm
01:21 - going to keep jumping constantly right
01:24 - my velocity is always going to be
01:25 - playing upwards until I let go of the
01:29 - key and if you're trying to do a flappy
01:32 - bird style game you know that might be
01:34 - what you want to do so you can keep
01:37 - jumping in midair but you only want to
01:39 - be able to jump if we're standing on the
01:42 - ground we also don't want the jump to
01:44 - continue to happen every time where as
01:47 - long as we're holding it down right we
01:49 - want to only jump once when we tap it
01:50 - once so first let's talk about only
01:54 - allowing jumping when you're standing on
01:56 - a platform there's two main approaches
01:59 - to this one really common one is to have
02:03 - a flag something like can jump right and
02:09 - that can be a boolean
02:12 - and you go down here and when you're
02:15 - when you collide with the ground you set
02:18 - can jump to true and when you press the
02:21 - key you only allow it
02:24 - it can jump is true when you do jump you
02:27 - set it to false so now you can't jump
02:28 - again until you hit the ground and it
02:30 - goes back to true and that's that's one
02:33 - common way to approach it we're not
02:34 - going to do it that way we're going to
02:37 - use a node go over to my player here and
02:42 - we're going to add a new node to this
02:46 - called a ray cast to be and I'm just
02:51 - going to call this I'm going to name
02:53 - this the let's call it the ground ray
02:59 - and it might be a little hard to see I'm
03:02 - going to hide the collision there so you
03:07 - can see it so you can see now we have a
03:09 - equal blue arrow pointing downwards and
03:14 - that is a ray cast in it the purpose of
03:17 - a ray cast is it'll tell you if it
03:19 - collides with something so it's
03:20 - basically an extended like a collision
03:23 - shape except it just tells you if I get
03:25 - something and it only points in one
03:27 - certain direction so pointing downwards
03:32 - is what we want but we do want to move
03:34 - it a little bit right we want to make it
03:37 - lower down so let's shift it down about
03:42 - 50 pixels and then we also want it to
03:48 - it's right here cast to is how long it
03:52 - is I don't need it to be that long so
03:54 - we're going to put a 20 and so just
03:59 - project below their feet so when you're
04:02 - standing on the ground this Ray Kappe
04:05 - node is going to detect a collision when
04:08 - you're in the air it will not because
04:11 - there's nothing there and these are
04:14 - super useful little nodes you know you
04:18 - can definitely want to enable it here
04:21 - don't forget to do that you can set it
04:24 - to only detect certain
04:25 - types of nodes so it'll only detect you
04:28 - know static bodies in that way you work
04:33 - fine on platforms but not on other
04:36 - characters or whatever things like that
04:38 - and we're also going to talk about what
04:41 - the glare mask thing means just a little
04:44 - bit so let's just check this out and get
04:46 - it working okay over to our script we
04:49 - are first going to give ourselves a
04:54 - reference to that ground rain node you
04:58 - don't have to type it know it all the
04:59 - time and then to make this a little
05:03 - easier to see I'm going to set my jump
05:05 - speed to a lot a lot smaller so we don't
05:07 - jump nearly as high just when we can see
05:10 - the effect better then we're going to go
05:13 - here to where we check for the input and
05:16 - we're going to say it's action pressed
05:19 - and the ground ray gives collide then
05:27 - we'll set the jumps team so let's take a
05:29 - look at that now when I press the arrow
05:33 - key I jump up but if I hold it down you
05:36 - can see I don't jump again until I hit
05:39 - the ground again and that collision is
05:42 - happening that's pretty good but I don't
05:46 - like the repeated jumping when I hold
05:48 - the arrow down right I want to have to
05:50 - press the key again to get another jump
05:53 - well to do that we need to do this input
05:57 - detection a little difference right now
05:59 - what's happening is we're in the fix
06:01 - process function so this is happening
06:04 - every frame so every frame it checks
06:07 - this and it does it but instead we want
06:11 - to use a different function so we're
06:13 - going to set process input to true and
06:18 - that means we can define a function
06:20 - called input 1 and
06:27 - this function will trigger every time an
06:29 - event happens and it will pass the event
06:31 - into it so we're going to take that yes
06:35 - I'm going to put that in here and
06:39 - instead of saying input we're going to
06:41 - put use it so it's the event that
06:44 - happens that triggers this function is
06:46 - that then we will do it and you can see
06:52 - that will solve our repeated jumping
06:55 - problems I'm holding the arrow key down
06:56 - now if I let go and tap it again
06:59 - I will jump again so I can do it as
07:01 - often as I want but I have to press the
07:04 - key again to get another job okay so
07:08 - let's crank that jump speed back up
07:11 - again you not quite as high and let's
07:15 - look at our main scene we have our
07:17 - platform here right I'm going to
07:19 - duplicate that and add another platform
07:23 - over about there that's totally them I
07:28 - just want to make sure we have room to
07:30 - sit and you can see we should be able to
07:33 - jump up and get on that plus one just as
07:38 - well all right if we're underneath you
07:41 - can't jump we're going to fall to our
07:43 - head what if we wanted it to work a
07:48 - little differently and have our player
07:51 - jump up through the platform and then
07:53 - land on the top all right let's go over
07:56 - to our platform and over here this is X
08:00 - body 2d section you see the one-way
08:04 - equalizer options and here is where we
08:08 - want to set these properties direction
08:10 - is what direction you want to make the
08:14 - collisions happen so we want to happen
08:15 - you want to hit the top of the platform
08:17 - that means when bodies are moving
08:20 - downwards so that means we want to put
08:23 - this a direction a direction vector
08:25 - pointing downwards and then we have max
08:28 - depth that is how far the body can
08:32 - penetrate into this before it snaps up
08:38 - to the top right and counts as a
08:40 - on the top and that let's just set this
08:45 - to 16 we right now have a 32 height here
08:49 - so that would be half height so if we
08:53 - run our code now we should see you jump
08:57 - up and we land on top perfect except you
09:04 - might notice that we are going behind
09:06 - the platform so let's just go to the
09:10 - player and if we go to its the property
09:16 - we just put that to one and that will
09:18 - make sure that the player gets drawn on
09:20 - top of the platform that's better and
09:31 - one last thing we can do is jump is we
09:34 - can set a minimum jumping speed and what
09:40 - that is going to let us do notice that
09:43 - that's about the same - 500
09:45 - and what that going to let us do is if
09:48 - you hold the jump key down you're going
09:51 - to get a full jump if you just tap it
09:53 - and let go quickly you're going to jump
09:56 - a shorter distance so in our input you
10:01 - want to look for the event these action
10:04 - released also on UI up if that happened
10:10 - we need to check what our Y velocity is
10:14 - if it's less than min jump then we're
10:19 - going to set it equal to and jump and
10:23 - what's that that's going to allow us to
10:25 - do is give a little tap and see I can do
10:28 - a short jump if I hold it down I'll do
10:31 - the full jump up
10:36 - and if you want to do this a different
10:39 - way you could also get the same effect
10:42 - by using the clamp function and clamping
10:46 - the Y velocity to as a min jump or
10:52 - whatever it is and that will give you
10:55 - the same effect that's going to do it
11:01 - for this lesson
11:02 - hopefully you can see how useful these
11:05 - Ray casts are you can imagine if you're
11:09 - doing you want to do wall detection you
11:12 - could have them pointing out in front or
11:15 - behind of the player they can be used
11:18 - for bullets if you're doing a shooter
11:21 - game where you want really high speed
11:24 - bullets you really just project one of
11:26 - these outwards from the player and if it
11:29 - hits something and you hit it with the
11:30 - bullet and you know you can point even
11:33 - whatever direction and get all sorts of
11:35 - different effects of them they're super
11:37 - useful and you'll see we're going to use
11:39 - them for other things as time goes on
11:42 - thanks for watching and I'll see you
11:44 - next time
11:51 - you

Cleaned transcript:

welcome back to judo 101 this is part 10 and in this video we're going to continue talking about physics and collisions and using a new node called the raycast alright let's get started you have our player and we can run around and the next logical step would be to make them able to jump but there's a few things you've got to take into account when you're going to implement jumping and it may not be obvious right away so let's take a look at it now we could add a jump speed define a jump speed here to be let's make this try negative 1500 right so that's going to be negative you want to be upwards and we could just go down here and just like we're doing with the UI right and you I left we could add a check there to see if we want to jump upwards Frank we could say something like if is action pressed UI up and we just set the velocity equal to jump speed but they're going to be a couple of issues with that so let's take a look all right time I'm going to tap the up key I jumped up right but if I hold down the up key I'm going to keep jumping constantly right my velocity is always going to be playing upwards until I let go of the key and if you're trying to do a flappy bird style game you know that might be what you want to do so you can keep jumping in midair but you only want to be able to jump if we're standing on the ground we also don't want the jump to continue to happen every time where as long as we're holding it down right we want to only jump once when we tap it once so first let's talk about only allowing jumping when you're standing on a platform there's two main approaches to this one really common one is to have a flag something like can jump right and that can be a boolean and you go down here and when you're when you collide with the ground you set can jump to true and when you press the key you only allow it it can jump is true when you do jump you set it to false so now you can't jump again until you hit the ground and it goes back to true and that's that's one common way to approach it we're not going to do it that way we're going to use a node go over to my player here and we're going to add a new node to this called a ray cast to be and I'm just going to call this I'm going to name this the let's call it the ground ray and it might be a little hard to see I'm going to hide the collision there so you can see it so you can see now we have a equal blue arrow pointing downwards and that is a ray cast in it the purpose of a ray cast is it'll tell you if it collides with something so it's basically an extended like a collision shape except it just tells you if I get something and it only points in one certain direction so pointing downwards is what we want but we do want to move it a little bit right we want to make it lower down so let's shift it down about 50 pixels and then we also want it to it's right here cast to is how long it is I don't need it to be that long so we're going to put a 20 and so just project below their feet so when you're standing on the ground this Ray Kappe node is going to detect a collision when you're in the air it will not because there's nothing there and these are super useful little nodes you know you can definitely want to enable it here don't forget to do that you can set it to only detect certain types of nodes so it'll only detect you know static bodies in that way you work fine on platforms but not on other characters or whatever things like that and we're also going to talk about what the glare mask thing means just a little bit so let's just check this out and get it working okay over to our script we are first going to give ourselves a reference to that ground rain node you don't have to type it know it all the time and then to make this a little easier to see I'm going to set my jump speed to a lot a lot smaller so we don't jump nearly as high just when we can see the effect better then we're going to go here to where we check for the input and we're going to say it's action pressed and the ground ray gives collide then we'll set the jumps team so let's take a look at that now when I press the arrow key I jump up but if I hold it down you can see I don't jump again until I hit the ground again and that collision is happening that's pretty good but I don't like the repeated jumping when I hold the arrow down right I want to have to press the key again to get another jump well to do that we need to do this input detection a little difference right now what's happening is we're in the fix process function so this is happening every frame so every frame it checks this and it does it but instead we want to use a different function so we're going to set process input to true and that means we can define a function called input 1 and this function will trigger every time an event happens and it will pass the event into it so we're going to take that yes I'm going to put that in here and instead of saying input we're going to put use it so it's the event that happens that triggers this function is that then we will do it and you can see that will solve our repeated jumping problems I'm holding the arrow key down now if I let go and tap it again I will jump again so I can do it as often as I want but I have to press the key again to get another job okay so let's crank that jump speed back up again you not quite as high and let's look at our main scene we have our platform here right I'm going to duplicate that and add another platform over about there that's totally them I just want to make sure we have room to sit and you can see we should be able to jump up and get on that plus one just as well all right if we're underneath you can't jump we're going to fall to our head what if we wanted it to work a little differently and have our player jump up through the platform and then land on the top all right let's go over to our platform and over here this is X body 2d section you see the oneway equalizer options and here is where we want to set these properties direction is what direction you want to make the collisions happen so we want to happen you want to hit the top of the platform that means when bodies are moving downwards so that means we want to put this a direction a direction vector pointing downwards and then we have max depth that is how far the body can penetrate into this before it snaps up to the top right and counts as a on the top and that let's just set this to 16 we right now have a 32 height here so that would be half height so if we run our code now we should see you jump up and we land on top perfect except you might notice that we are going behind the platform so let's just go to the player and if we go to its the property we just put that to one and that will make sure that the player gets drawn on top of the platform that's better and one last thing we can do is jump is we can set a minimum jumping speed and what that is going to let us do notice that that's about the same 500 and what that going to let us do is if you hold the jump key down you're going to get a full jump if you just tap it and let go quickly you're going to jump a shorter distance so in our input you want to look for the event these action released also on UI up if that happened we need to check what our Y velocity is if it's less than min jump then we're going to set it equal to and jump and what's that that's going to allow us to do is give a little tap and see I can do a short jump if I hold it down I'll do the full jump up and if you want to do this a different way you could also get the same effect by using the clamp function and clamping the Y velocity to as a min jump or whatever it is and that will give you the same effect that's going to do it for this lesson hopefully you can see how useful these Ray casts are you can imagine if you're doing you want to do wall detection you could have them pointing out in front or behind of the player they can be used for bullets if you're doing a shooter game where you want really high speed bullets you really just project one of these outwards from the player and if it hits something and you hit it with the bullet and you know you can point even whatever direction and get all sorts of different effects of them they're super useful and you'll see we're going to use them for other things as time goes on thanks for watching and I'll see you next time you
