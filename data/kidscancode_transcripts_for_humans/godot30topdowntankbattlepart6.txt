With timestamps:

00:00 - welcome to part 6 of the top-down tank
00:01 - battle tutorial in Godot 3.0 last time
00:04 - we made our tanks shoot and this time
00:07 - we'll be talking about how to make them
00:08 - take damage alright let's get started so
00:11 - now that we have the tanks shooting at
00:14 - each other we need to make these bullets
00:16 - do some damage so we're gonna go into
00:19 - the tank script this is the generic tank
00:23 - script that both of the tank types
00:25 - inherit from and we're gonna make it so
00:27 - that they can take some damage and what
00:29 - that means is we want to add a method
00:31 - that lets any object that deals damage
00:35 - deal its damage to the tank so we've
00:38 - already created a signal that we're
00:41 - going to emit when the health changes
00:43 - we've created a variable to hold the
00:45 - health and actually this one I'm going
00:47 - to change this to max health so the
00:50 - variable that we export variable that we
00:52 - set on each tank will be what its
00:57 - maximum health is its fully healed and
00:59 - then we're gonna have a we're just gonna
01:02 - have a health variable that then it's
01:05 - the one that can change and when it
01:07 - takes damage and then in the ready we
01:10 - want to set our health to the max health
01:12 - value and will emit the signal at that
01:17 - point so that whatever UI we have which
01:20 - we haven't made yet will know to show to
01:23 - display the right value when it sees
01:27 - this so we're gonna omit the health
01:28 - changed and we want to tell it what
01:30 - value to display and since the max
01:33 - health can be changed to you know any
01:36 - value we want and we might have
01:38 - different amounts of damage happening
01:39 - we're just going to use the percentage
01:40 - so I'm going to say health times 100
01:42 - over max health so that we just pass in
01:46 - to the bar to display a percentage of
01:50 - whatever our health is and then down
01:54 - here we're going to add a take damage
01:57 - method as well and that is gonna be what
02:03 - handles all the damage so I'll say take
02:06 - damage and it's gonna you're gonna pass
02:11 - in an amount
02:13 - of damage to take so we subtract that
02:16 - from the health we're gonna emit the
02:20 - signal will emit the same signal again
02:22 - so I'm just going to stick that right in
02:25 - there as well and then if our health is
02:28 - less than or equal to zero we're going
02:31 - to explode and what is explode mean well
02:35 - eventually we're gonna play some
02:36 - animation and stuff like that but for
02:38 - right now explode just means Q free so
02:46 - that when the health runs out the tank
02:48 - will be destroyed so now our tank can
02:52 - take damage we need to look at our
02:54 - bullet and see how to deal that damage
02:56 - so we've already added on the bullet
02:58 - script that if it hits a body that has
03:01 - that take damage method it's going to
03:04 - call it so we should be able to see our
03:07 - stuff working let's check real quick and
03:09 - see here so I have the players max
03:11 - health set to a hundred I have the enemy
03:13 - tanks set to fifty and then I have both
03:16 - bullets I believe that yeah to do ten
03:19 - damage so we should be able to run it
03:23 - and see our bullets destroying the enemy
03:25 - tank if we hit it enough times so we'll
03:30 - have a head over here and start trading
03:32 - damage yeah there we go
03:37 - okay so now we are dealing the damage
03:41 - now we need a way to see the that health
03:45 - value on the screen I've started making
03:49 - the HUD here so this is a canvas layer
03:51 - and it's children are a margin container
03:55 - which is going to just keep everything
03:56 - from getting too close to the edges of
03:58 - the screen I have an H box container
04:01 - that's going to organize whatever
04:05 - control nodes you put inside of it are
04:07 - automatically organized in a horizontal
04:10 - line and so you don't have to do any
04:13 - management of the anchors and everything
04:16 - like that it'll automatically space them
04:18 - out I have a texture wreck and a texture
04:21 - progress so this texture progress is
04:24 - going to be the health bar
04:25 - that's going to display the a colored
04:29 - bar showing how much health you have or
04:31 - what percentage of your health you have
04:33 - the text direct is just going to be an
04:35 - icon so we know that that's showing our
04:37 - armor or our health whatever we want to
04:39 - call it and I'm just gonna rename these
04:42 - a little bit to make them a little more
04:48 - manageable okay so now I've saved these
04:53 - in a a UI folder where we're gonna put
04:56 - all of our UI scenes you I related
04:59 - scenes okay so let's set up these nodes
05:02 - the margin container I've set it to full
05:05 - rect means covers the whole viewable
05:09 - area of the screen and then I've set the
05:11 - custom constants down here for the four
05:14 - margin values to 20 so it will keep a 20
05:18 - pixel border around all the sides the
05:23 - container we don't really need to do
05:25 - anything to the texture rect we're gonna
05:30 - stick a texture in there and in the
05:31 - assets folder we've got a little shield
05:35 - image it's gonna look like that and then
05:39 - for the texture progress the way these
05:42 - nodes work is that you assign them a
05:44 - texture and it displays as much of that
05:47 - texture as your value you set on the bar
05:50 - so we're gonna go into the UI section of
05:53 - the assets and I'm gonna grab this
05:55 - horizontal green bar I'm gonna drop that
05:58 - in the progress texture that's the one
06:01 - that shows the values so for example if
06:04 - I go down here and set the value see the
06:05 - minimum zero maximum is 100 that's good
06:08 - because we're doing percentages and
06:09 - let's say our value was 75% then we see
06:13 - 75% of the green bar and we can make
06:17 - that look a little nicer by using this
06:19 - over texture because that's what texture
06:22 - will be laid over on top of it and in
06:24 - the UI folder also there are some glass
06:27 - panels and there's one that's that size
06:29 - too so we'll stick that over so then
06:32 - it's on top and so it looks like the bar
06:35 - is filling a portion of it
06:39 - and as you can see from the horizontal
06:41 - or H box container our things are nicely
06:44 - spaced out there and we don't have to do
06:47 - anything really in the way of layout so
06:52 - let's add a script to this HUD later we
06:55 - might have other things but we'll add up
06:57 - here like score and things like that but
06:59 - we'll come back and do that later when
07:00 - we figured out how we want to do that
07:01 - so we're going to add a script here and
07:03 - just worry about updating the health bar
07:06 - so we're gonna add a function called
07:08 - update health bar and we pass it a value
07:13 - and that means we're gonna take the
07:16 - health bars value instead equal to that
07:20 - value we passed in and that's all we
07:23 - really need to do and now we want to
07:26 - connect that signal so whenever the
07:27 - player's health changes we want to send
07:30 - a signal or connect its signal to the
07:32 - HUD so that it will update the health
07:34 - bar with that value so we go back over
07:38 - to our main we're gonna put an instance
07:41 - of the HUD UI in there so that when we
07:46 - run it we'll see our our HUD up there
07:50 - and it's in a canvas layer so that it
07:52 - does not scroll with the camera and it
07:55 - stays independent of the camera now what
07:58 - we want to do is take the player's
08:01 - health change signal and we want to
08:04 - connect that to the HUDs update health
08:10 - bar and that's all we need to do so now
08:15 - we should see it be at a hundred percent
08:18 - to when we started and when I get over
08:21 - here and start taking some hits we can
08:23 - see it go down by ten percent each time
08:26 - and now the player is dead no notice
08:30 - what we removed the player from the tree
08:33 - so that means our camera doesn't have
08:36 - anywhere to go now and it just snapped
08:37 - back up to the corner because it doesn't
08:38 - have any scrolling location anymore so
08:43 - that's our health bar working but it's
08:45 - kind of boring so let's we're gonna
08:47 - spice it up a little bit by adding some
08:49 - color to it so we're right now using
08:52 - this green
08:53 - bar but we also have a red in yellow one
08:55 - and I've already pre typed these things
08:58 - but if you want to if you want to know a
09:01 - shortcut you can go over here and when
09:02 - you're like say I want the green bar if
09:05 - I right-click on it I can say copy path
09:07 - and then when I go over here into the UI
09:09 - I can paste it in there that's a quick
09:12 - way to type these out you don't have to
09:13 - type these file paths out but we're
09:16 - gonna load all three bars the red green
09:18 - and the yellow and then when the health
09:20 - bar changes we're gonna check its value
09:23 - and see which one we want to display so
09:27 - as your health gets lower it'll turn
09:29 - yellow and then red so we're gonna set
09:31 - the bar texture equal to bar green by
09:35 - default so normally you'd use green but
09:38 - if the value is less than 60 then we're
09:42 - going to change to yellow so we're going
09:44 - to set bar texture to eat to bar yellow
09:47 - and then if the value is less than 25
09:52 - then we're gonna set the bar texture to
09:56 - bar red and then we just have to set the
10:03 - right value there so we take the health
10:08 - bar and we set its texture underscore or
10:11 - progress equal to bar texture now we
10:16 - should see our nice green bar and then
10:20 - when we start taking some damage it will
10:23 - change color all right so yeah we turned
10:28 - yellow there now we're red okay so
10:32 - that's nice but another nice thing we
10:34 - could do is animate that change so
10:37 - instead of the bar just jumping from 100
10:41 - to 90 we can make it look like more like
10:44 - it's draining down instead of just
10:47 - jumping from one value to the next and
10:50 - we'll do that with a tween node so I've
10:53 - added a tween node here to the health
10:54 - bar and I made it a child of the health
10:56 - bar because just planning ahead and
10:59 - thinking what other things we might add
11:01 - here we might have different tweens
11:03 - animating different UI components
11:06 - so we're gonna make it a child here so
11:09 - when we update the health bar we want to
11:12 - set that tween to interpolate the value
11:15 - from the current value to the
11:18 - destination value and do it over a
11:20 - certain amount of time and so the way
11:24 - that looks is instead of setting the
11:27 - value directly right here what we're
11:29 - going to do is set the tween and so
11:32 - these tween method calls can be pretty
11:36 - long because there's a lot of options
11:37 - that go into them so you're almost
11:39 - always going to have to spread this over
11:41 - multiple lines so we want to interpolate
11:43 - a property of the health bar and then
11:47 - I'm going to go down to the next line
11:48 - here we want to interpret we want to
11:50 - interpolate its value we want to start
11:53 - with its current value whatever it
11:56 - currently is and we want to go to the
11:59 - destination value that we passed in for
12:02 - the amount of time I'm going to put now
12:05 - you could get hit pretty rapidly so you
12:08 - might not see this these transitions
12:10 - happening if we do it over too long a
12:13 - time so I'm going to do it over a short
12:15 - amount of time and then I'm just going
12:18 - to use the linear transition type and
12:22 - the in/out technically doesn't matter
12:25 - when you're doing linear and so now it's
12:28 - now that Weena's been configured and we
12:31 - can say we can tell it to start and then
12:37 - that means we don't need this line
12:39 - anymore because now when the tween
12:41 - finishes the value property will be set
12:45 - to the destination value so let's take a
12:48 - look at that and see how that looks when
12:51 - we take a hit now this would be even
12:55 - more apparent if we were taking a large
12:57 - amount of damage but see how it's
13:00 - sliding down now and that looks a little
13:04 - better I think while we're at it let's
13:06 - add one more effect to the hutt I'm
13:08 - going to add an animation player and
13:11 - what we're gonna use this for is to make
13:14 - the bar flash white and red just very
13:17 - briefly when you take a hit so
13:20 - there's some visual feedback that you've
13:23 - been hit and so we're gonna make a new
13:25 - animation here called health bar flash
13:29 - and so the configuration of this if you
13:34 - haven't used the animation player before
13:36 - I recommend I'll put some links in the
13:40 - description below to where you can go
13:41 - and look at some more beginner examples
13:45 - for it so I'm not gonna go into all the
13:46 - details but I'm gonna set the length of
13:49 - this animation to 0.2 again that's a
13:52 - nice short amount of time and I'm gonna
13:56 - set the steps to 0.05 and what we're
14:00 - going to have this do is animate the
14:03 - texture so I'm gonna go to the texture
14:07 - rect and we're going to set the texture
14:12 - progress looks about that one the
14:14 - texture progress we're going to set it
14:16 - to red and then white red and then white
14:18 - just really quickly to make a flashing
14:20 - effect so I'm going to add those
14:22 - keyframes and I'll be right back okay so
14:25 - I've just made keyframes here with the
14:27 - texture progress set to red and then
14:30 - white and then red and then white and
14:32 - then red and so when I hit play you see
14:35 - we get a nice very brief visual flash
14:39 - and so we're gonna play that animation
14:42 - when we take a hit so we'll go down here
14:45 - and we start the tween and then we're
14:47 - also going to play the animation so
14:51 - we'll say animation player DUP play
14:56 - health bar flash now the only issue with
15:00 - this is when we finish with the health
15:02 - bar flash our bar texture is going to be
15:06 - red because that's what it was left at
15:09 - at the end so one thing we can do to
15:13 - resolve that is when the animation
15:15 - player finishes we're going to get an
15:18 - animation finished signal so we can
15:21 - connect that and this will tell us that
15:25 - an animation finished and which one
15:28 - finished is in the anime anime so if
15:31 - anime
15:33 - equals health bar flash then we're going
15:38 - to set the texture progress back to what
15:41 - it's supposed to be so now if we go over
15:52 - here and hit run let's see how it looks
15:54 - now when we take a hit now we get a nice
16:02 - visual effect whenever we get hit with
16:06 - that flashing all right that'll do it
16:10 - for this time we in the next video we'll
16:13 - do something similar for the enemy tanks
16:17 - by giving them a health bar as well
16:19 - thanks for watching and I'll see you
16:21 - next time
16:29 - you

Cleaned transcript:

welcome to part 6 of the topdown tank battle tutorial in Godot 3.0 last time we made our tanks shoot and this time we'll be talking about how to make them take damage alright let's get started so now that we have the tanks shooting at each other we need to make these bullets do some damage so we're gonna go into the tank script this is the generic tank script that both of the tank types inherit from and we're gonna make it so that they can take some damage and what that means is we want to add a method that lets any object that deals damage deal its damage to the tank so we've already created a signal that we're going to emit when the health changes we've created a variable to hold the health and actually this one I'm going to change this to max health so the variable that we export variable that we set on each tank will be what its maximum health is its fully healed and then we're gonna have a we're just gonna have a health variable that then it's the one that can change and when it takes damage and then in the ready we want to set our health to the max health value and will emit the signal at that point so that whatever UI we have which we haven't made yet will know to show to display the right value when it sees this so we're gonna omit the health changed and we want to tell it what value to display and since the max health can be changed to you know any value we want and we might have different amounts of damage happening we're just going to use the percentage so I'm going to say health times 100 over max health so that we just pass in to the bar to display a percentage of whatever our health is and then down here we're going to add a take damage method as well and that is gonna be what handles all the damage so I'll say take damage and it's gonna you're gonna pass in an amount of damage to take so we subtract that from the health we're gonna emit the signal will emit the same signal again so I'm just going to stick that right in there as well and then if our health is less than or equal to zero we're going to explode and what is explode mean well eventually we're gonna play some animation and stuff like that but for right now explode just means Q free so that when the health runs out the tank will be destroyed so now our tank can take damage we need to look at our bullet and see how to deal that damage so we've already added on the bullet script that if it hits a body that has that take damage method it's going to call it so we should be able to see our stuff working let's check real quick and see here so I have the players max health set to a hundred I have the enemy tanks set to fifty and then I have both bullets I believe that yeah to do ten damage so we should be able to run it and see our bullets destroying the enemy tank if we hit it enough times so we'll have a head over here and start trading damage yeah there we go okay so now we are dealing the damage now we need a way to see the that health value on the screen I've started making the HUD here so this is a canvas layer and it's children are a margin container which is going to just keep everything from getting too close to the edges of the screen I have an H box container that's going to organize whatever control nodes you put inside of it are automatically organized in a horizontal line and so you don't have to do any management of the anchors and everything like that it'll automatically space them out I have a texture wreck and a texture progress so this texture progress is going to be the health bar that's going to display the a colored bar showing how much health you have or what percentage of your health you have the text direct is just going to be an icon so we know that that's showing our armor or our health whatever we want to call it and I'm just gonna rename these a little bit to make them a little more manageable okay so now I've saved these in a a UI folder where we're gonna put all of our UI scenes you I related scenes okay so let's set up these nodes the margin container I've set it to full rect means covers the whole viewable area of the screen and then I've set the custom constants down here for the four margin values to 20 so it will keep a 20 pixel border around all the sides the container we don't really need to do anything to the texture rect we're gonna stick a texture in there and in the assets folder we've got a little shield image it's gonna look like that and then for the texture progress the way these nodes work is that you assign them a texture and it displays as much of that texture as your value you set on the bar so we're gonna go into the UI section of the assets and I'm gonna grab this horizontal green bar I'm gonna drop that in the progress texture that's the one that shows the values so for example if I go down here and set the value see the minimum zero maximum is 100 that's good because we're doing percentages and let's say our value was 75% then we see 75% of the green bar and we can make that look a little nicer by using this over texture because that's what texture will be laid over on top of it and in the UI folder also there are some glass panels and there's one that's that size too so we'll stick that over so then it's on top and so it looks like the bar is filling a portion of it and as you can see from the horizontal or H box container our things are nicely spaced out there and we don't have to do anything really in the way of layout so let's add a script to this HUD later we might have other things but we'll add up here like score and things like that but we'll come back and do that later when we figured out how we want to do that so we're going to add a script here and just worry about updating the health bar so we're gonna add a function called update health bar and we pass it a value and that means we're gonna take the health bars value instead equal to that value we passed in and that's all we really need to do and now we want to connect that signal so whenever the player's health changes we want to send a signal or connect its signal to the HUD so that it will update the health bar with that value so we go back over to our main we're gonna put an instance of the HUD UI in there so that when we run it we'll see our our HUD up there and it's in a canvas layer so that it does not scroll with the camera and it stays independent of the camera now what we want to do is take the player's health change signal and we want to connect that to the HUDs update health bar and that's all we need to do so now we should see it be at a hundred percent to when we started and when I get over here and start taking some hits we can see it go down by ten percent each time and now the player is dead no notice what we removed the player from the tree so that means our camera doesn't have anywhere to go now and it just snapped back up to the corner because it doesn't have any scrolling location anymore so that's our health bar working but it's kind of boring so let's we're gonna spice it up a little bit by adding some color to it so we're right now using this green bar but we also have a red in yellow one and I've already pre typed these things but if you want to if you want to know a shortcut you can go over here and when you're like say I want the green bar if I rightclick on it I can say copy path and then when I go over here into the UI I can paste it in there that's a quick way to type these out you don't have to type these file paths out but we're gonna load all three bars the red green and the yellow and then when the health bar changes we're gonna check its value and see which one we want to display so as your health gets lower it'll turn yellow and then red so we're gonna set the bar texture equal to bar green by default so normally you'd use green but if the value is less than 60 then we're going to change to yellow so we're going to set bar texture to eat to bar yellow and then if the value is less than 25 then we're gonna set the bar texture to bar red and then we just have to set the right value there so we take the health bar and we set its texture underscore or progress equal to bar texture now we should see our nice green bar and then when we start taking some damage it will change color all right so yeah we turned yellow there now we're red okay so that's nice but another nice thing we could do is animate that change so instead of the bar just jumping from 100 to 90 we can make it look like more like it's draining down instead of just jumping from one value to the next and we'll do that with a tween node so I've added a tween node here to the health bar and I made it a child of the health bar because just planning ahead and thinking what other things we might add here we might have different tweens animating different UI components so we're gonna make it a child here so when we update the health bar we want to set that tween to interpolate the value from the current value to the destination value and do it over a certain amount of time and so the way that looks is instead of setting the value directly right here what we're going to do is set the tween and so these tween method calls can be pretty long because there's a lot of options that go into them so you're almost always going to have to spread this over multiple lines so we want to interpolate a property of the health bar and then I'm going to go down to the next line here we want to interpret we want to interpolate its value we want to start with its current value whatever it currently is and we want to go to the destination value that we passed in for the amount of time I'm going to put now you could get hit pretty rapidly so you might not see this these transitions happening if we do it over too long a time so I'm going to do it over a short amount of time and then I'm just going to use the linear transition type and the in/out technically doesn't matter when you're doing linear and so now it's now that Weena's been configured and we can say we can tell it to start and then that means we don't need this line anymore because now when the tween finishes the value property will be set to the destination value so let's take a look at that and see how that looks when we take a hit now this would be even more apparent if we were taking a large amount of damage but see how it's sliding down now and that looks a little better I think while we're at it let's add one more effect to the hutt I'm going to add an animation player and what we're gonna use this for is to make the bar flash white and red just very briefly when you take a hit so there's some visual feedback that you've been hit and so we're gonna make a new animation here called health bar flash and so the configuration of this if you haven't used the animation player before I recommend I'll put some links in the description below to where you can go and look at some more beginner examples for it so I'm not gonna go into all the details but I'm gonna set the length of this animation to 0.2 again that's a nice short amount of time and I'm gonna set the steps to 0.05 and what we're going to have this do is animate the texture so I'm gonna go to the texture rect and we're going to set the texture progress looks about that one the texture progress we're going to set it to red and then white red and then white just really quickly to make a flashing effect so I'm going to add those keyframes and I'll be right back okay so I've just made keyframes here with the texture progress set to red and then white and then red and then white and then red and so when I hit play you see we get a nice very brief visual flash and so we're gonna play that animation when we take a hit so we'll go down here and we start the tween and then we're also going to play the animation so we'll say animation player DUP play health bar flash now the only issue with this is when we finish with the health bar flash our bar texture is going to be red because that's what it was left at at the end so one thing we can do to resolve that is when the animation player finishes we're going to get an animation finished signal so we can connect that and this will tell us that an animation finished and which one finished is in the anime anime so if anime equals health bar flash then we're going to set the texture progress back to what it's supposed to be so now if we go over here and hit run let's see how it looks now when we take a hit now we get a nice visual effect whenever we get hit with that flashing all right that'll do it for this time we in the next video we'll do something similar for the enemy tanks by giving them a health bar as well thanks for watching and I'll see you next time you
