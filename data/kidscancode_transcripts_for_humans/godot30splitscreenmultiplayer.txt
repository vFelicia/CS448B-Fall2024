With timestamps:

00:00 - in this tutorial we're going to
00:01 - demonstrate the use of viewports to make
00:03 - a split screen multiplayer game here we
00:06 - have two players the red player on the
00:08 - right and the blue player on the left
00:10 - both of which are moving around in the
00:13 - same world but have a separate view
00:15 - centered on where they are at all times
00:19 - let's start by looking at how the world
00:22 - is set up so I have a character scene
00:24 - here which is just a sprite using a
00:26 - kinematic body 2d and it's script looks
00:31 - like this we're using eight-way movement
00:34 - right left up and down but I have
00:37 - created two sets of input actions in the
00:42 - project settings right one and right to
00:45 - left one and left two and so on so that
00:49 - the player one will use arrow keys and
00:51 - player two will use WASD and because I
00:54 - name them this way I can have the script
00:57 - just use whatever ID the character is
01:00 - set to and map that to the actions that
01:05 - belong to it so that way I can use the
01:07 - same script on both players so from this
01:10 - we're gonna create two players player 1
01:13 - and player 2 which are inherited scenes
01:15 - and all I've changed on the player scene
01:19 - is that I have set the name I've set the
01:22 - ID here so this is player 1 player 2
01:25 - will have an ID of 2 and I changed the
01:27 - module 8 just to quickly make them two
01:30 - different colors and next we have a
01:33 - world scene which is the tile map I'm
01:36 - just using two different kinds of tiles
01:38 - here the grass for the move tiles you
01:42 - can move through and the stone one for
01:44 - the walls which has a collision shape
01:46 - attached to it and inside the Vista map
01:50 - I have instanced the two players so if
01:53 - you run this scene everything works fine
01:55 - you have the tile map your players can
01:58 - move around everything's fine except for
02:01 - the fact that the tile map is much much
02:05 - bigger than the display window so the
02:09 - characters would go off the screen now
02:11 - if this was a single player game
02:13 - you would attach a camera to the player
02:15 - and just have that camera follow them
02:17 - around as they moved around the map but
02:20 - that won't work with two players because
02:22 - you need a camera following each player
02:24 - and you need those cameras to display
02:26 - separately so that's why we're gonna use
02:28 - viewports now I want to point out that
02:32 - notice we have made the game work on its
02:35 - own even though we haven't done these
02:38 - viewports yet to display the players we
02:40 - have all of the game features working
02:43 - the way we want and if you set things up
02:45 - that way it makes things a lot easier if
02:47 - you try to combine the split-screen view
02:52 - with your game logic things start to get
02:55 - messy really fast so now that we have a
02:59 - working game that does everything we
03:00 - want it to do the only thing we have to
03:03 - worry about is just what we display on
03:05 - the screen so we're gonna do that by
03:08 - creating a new scene main scene I'm
03:10 - using a plane node as the root of this
03:14 - scene because it just needs to contain
03:15 - the other ones and so on this screen we
03:19 - want to show two viewports next to each
03:21 - other and to keep them aligned we're
03:24 - going to use a view H box container and
03:28 - H box container is a node that organizes
03:31 - controls in a horizontal row and so if
03:36 - we make this the full rectangle and we
03:40 - set the alignment to Center then
03:43 - anything we place in it will get
03:46 - arranged horizontally starting from the
03:49 - center and we're gonna put two things in
03:50 - it so they'll be side by side and I'm
03:53 - going to name this container viewports
03:55 - because it's gonna hold the viewports
03:57 - and the things we're gonna put in here
03:59 - our viewport containers because a
04:01 - viewport by itself is just a texture
04:06 - basically that's being displayed it
04:08 - doesn't have any position or size
04:11 - properties of its own and so it needs to
04:13 - be placed inside of a container if we
04:16 - want to display it in 2d so we're going
04:18 - to add a viewport container to hold our
04:23 - viewport and let's call this
04:26 - container one and then we will duplicate
04:30 - that so that we have two now I'm
04:34 - actually going to arrange them this way
04:36 - because I'm gonna put player 1 in
04:38 - container 1 and player 2 in container 2
04:41 - but I want player 1 on the right because
04:43 - I use the arrow keys for the four player
04:46 - one so they should be on the right and
04:48 - the WASD player should be on the left
04:50 - now both of these viewport containers
04:52 - are empty so they are just they have no
04:56 - width or anything so we're gonna go in
04:58 - and we're gonna change the properties of
05:00 - these to stretch we're going to turn
05:02 - stretch on that will make the viewport
05:06 - that's inside the container be sized to
05:09 - match the container so we don't do
05:11 - manually set it so we're trying to turn
05:13 - that on both of them and then to set the
05:16 - size of the viewport container we're
05:18 - gonna use the size flags and set the
05:21 - horizontal to expand now notice that
05:23 - made new per container to fill the whole
05:26 - thing until we go over here and set it
05:28 - on container 1 and now they're both
05:34 - equal sized taking up half of the screen
05:38 - and you can even in the H box container
05:41 - put a little separation between them if
05:43 - you want using the custom constants like
05:46 - if you put five here you'll have a
05:47 - little 5 pixel gap in between each
05:51 - container now let's put a viewport
05:54 - inside each of these containers so we'll
05:57 - go add a viewport to each of these and
06:02 - let's also name these viewport two and
06:06 - viewport 1 so that we encode we'll know
06:10 - which one we're referring to now for a
06:14 - viewport to display anything it's going
06:16 - to need a camera 2d which is going to
06:19 - render on to the viewport so each of
06:21 - these viewports needs a camera 2d
06:22 - attached to it so do that on each of
06:27 - them and don't forget on the camera 2d
06:31 - to check the current property now
06:36 - normally if you've used cameras before
06:37 - you
06:38 - you know that only one camera can be
06:41 - current at a time but that means only
06:44 - one camera can be current for its
06:45 - viewport so each of these will be
06:47 - current for its individual viewport we
06:53 - can also zoom a little bit because of
06:56 - the scale of everything if we set the
06:59 - zoom to 0.75 on these cameras they will
07:02 - display a little bit more of the area
07:04 - around the player which is going to look
07:06 - a little better so here is your node
07:12 - setup for our viewports we have the
07:14 - viewport the H box container holding the
07:17 - two keeping them organized side by side
07:19 - to viewport containers each of which has
07:22 - a viewport inside of it and each
07:24 - viewport has a camera 2d now of course
07:26 - if we run it and we won't see anything
07:28 - because there's nothing for these
07:29 - viewports to render so let's add to
07:35 - viewport one I'm going to add the an
07:38 - instance of the world scene so the world
07:43 - remember contains the map and the
07:45 - players so now when we run it we will
07:50 - see the world over here in the viewport
07:52 - one and the players are still moving
07:55 - like they were before the cameras are
07:58 - not following yet and the other viewport
08:00 - isn't working but you see how the world
08:01 - is rendered in there now you may notice
08:05 - that on your screen you're not seeing
08:08 - the world rendered in the viewport in
08:10 - the editor there is a small bug with
08:14 - control nodes so they don't always
08:16 - update on the screen and the way you can
08:19 - refresh them is you switch to a
08:21 - different scene and then switch back
08:22 - you'll see the you'll see it properly
08:26 - what happened is the viewports are now
08:28 - getting resized so see how the viewports
08:30 - size is now 510 by 600 because it's
08:33 - being automatically scaled by the
08:36 - viewport container to be that size and
08:38 - this little blue rectangle is
08:41 - representing the camera's view right
08:44 - because we're zoomed out now if you
08:47 - change something with a layout or
08:50 - something like that with any
08:52 - control nodes typically refreshing the
08:54 - window like that will will redraw it the
08:56 - way it's supposed to be all right so we
08:59 - see our world inside viewport one we
09:03 - want to see the same world inside
09:05 - viewport two but obviously we don't want
09:07 - to have a whole nother instance of the
09:08 - world or we'd have two player ones and
09:10 - two player two's we want the viewport
09:13 - twos world to be set the same as
09:16 - viewport ones two we want it to render
09:18 - the same environment and we can do that
09:20 - in code so I've added a script here and
09:23 - this is what the script looks like so up
09:26 - here I've created some variables to use
09:28 - as references to the various nodes that
09:31 - we're going to use so viewport one and
09:34 - two camera one and two and the world
09:36 - itself and remember that when you're
09:39 - typing these you know you can either
09:41 - when you type the dollar sign you'll see
09:44 - the auto suggestion pop-up and you can
09:47 - go and pick the one you want you can
09:49 - also if you ever have a node over here
09:53 - in the tree if you grab it with the
09:55 - mouse and drag it into the text editor
09:58 - window it will drop the path in there
10:00 - now it always puts quotes around it
10:02 - which you only need if the names have
10:04 - spaces in them so I'm going to go ahead
10:06 - and delete those quotes but so now I
10:08 - have these references to the different
10:10 - worlds or sorry to the different nodes
10:12 - and then the ready I'm going to set
10:14 - viewport twos world equal to viewport
10:18 - ones world and that way when we run it
10:21 - now both of them will be displaying the
10:23 - map and again the players are not
10:26 - anywhere we can see them because we
10:30 - haven't set the cameras to follow the
10:31 - players so there's you know they're
10:34 - starting off the screen somewhere but
10:36 - both viewports are now rendering the
10:39 - world so now we need those cameras to
10:43 - follow their assigned players so to each
10:47 - of the camera 2ds attach this script
10:50 - this lets us set a target for the camera
10:54 - and if we've set a target it will follow
10:57 - the position of that target that's all
11:00 - we need the cameras to do is just follow
11:02 - their target so you might also I think
11:05 - it looks a little better
11:06 - on the cameras if you disable the drag
11:08 - margin which means the player will stay
11:11 - centered exactly in the center of its
11:13 - viewport as it moves around so now each
11:17 - of these cameras can be assigned a
11:19 - target so in the main that's where we
11:22 - will do that so here in Maine and the
11:24 - ready I have assigned camera one its
11:28 - target to player one and camera two to
11:31 - player two now when we run it
11:33 - everything's going to work the way we
11:34 - want so there we see the players
11:36 - centered on their viewports and when you
11:39 - move player two the camera follows and
11:43 - when you move player one the camera
11:44 - follows and that's it now we have our
11:50 - split-screen working the way we want now
11:54 - let's just add a couple of refinements
11:56 - so in the main I'm gonna set the camera
11:59 - limits so what I have here the function
12:02 - called set camera limits that gets the
12:04 - size of the world you have that tile map
12:08 - and goes through each of the cameras and
12:12 - sets their left right top and bottom
12:15 - limits to those coordinates so what that
12:19 - does is it makes it so that when you run
12:21 - the player can't go off of the maps and
12:25 - if I get all the way up here to the end
12:27 - see how the camera stops scrolling when
12:28 - I reach the edge of the map and we don't
12:31 - see any of that blank space out there
12:35 - that's not part of the world okay this
12:39 - is a useful thing to use whenever you're
12:41 - using tile maps and have a scrolling
12:43 - camera all right we're almost finished
12:46 - but I want to add one more feature which
12:48 - is a common use of viewports and that is
12:51 - to create a mini map a tiny view of the
12:54 - whole world where we can see the entire
12:56 - map and where we are in it so I'm going
12:59 - to add another viewport container but
13:00 - not inside the H box this time it's
13:03 - going to be it's going to be a separate
13:04 - one that's gonna float on top of the
13:06 - rest of the scene so we had a viewport
13:08 - container I'm going to call this
13:11 - mini-map and we're gonna set that to
13:16 - stretch and inside of it we're gonna put
13:18 - a viewport
13:19 - and inside of that we're gonna put a
13:21 - camera to D don't forget to set the
13:24 - current camera to D to current and for
13:29 - this we want the camera zoomed way out
13:30 - so I'm going to try 9 by 9 I think that
13:33 - should be pretty good so that we zoom
13:35 - way out and show the whole map and to
13:39 - size the mini-map we're just gonna do
13:41 - this we're gonna eyeball it we're gonna
13:43 - set this to something like about that
13:47 - and then let's put Center bottom on the
13:51 - layout so that it will Center it so our
13:55 - we want our mini map to show the same
13:56 - world as the rest of them so we'll set
13:59 - that in the script we've just put here
14:02 - that set the mini maps viewport world 2d
14:05 - to the same world 2d we're using 4
14:09 - viewport 1 now if we run this we're
14:12 - gonna see the map there but it's
14:15 - off-center and we can fix that by
14:18 - setting the position of the camera so
14:21 - I'm going to go over again set the
14:22 - cameras position to be centered on the
14:24 - screen which is 512 by 300 and that's
14:30 - going to Center the camera on the
14:33 - mini-map but now we have this grey area
14:36 - around the edges and that's empty space
14:40 - right outside of the map so we could try
14:44 - and adjust and get the size just right
14:46 - but what we can do is a viewport has a
14:50 - property called transparent background
14:53 - and if we turn that on it will not draw
14:56 - any of that grey space so now when we
14:59 - run it will see our mini-map down there
15:01 - on the screen and you can see yourself
15:05 - in it as you move around both players
15:09 - independently and we have our working
15:12 - mini-map all right that'll do it for
15:15 - this demo I hope this helps you when you
15:17 - need to use viewports in your project
15:19 - please leave comments below if you have
15:22 - any questions and you can also download
15:25 - the full project for this from the link
15:28 - that I'll paste in the comments below
15:31 - thanks for watching and I'll see you
15:33 - next time
15:41 - you

Cleaned transcript:

in this tutorial we're going to demonstrate the use of viewports to make a split screen multiplayer game here we have two players the red player on the right and the blue player on the left both of which are moving around in the same world but have a separate view centered on where they are at all times let's start by looking at how the world is set up so I have a character scene here which is just a sprite using a kinematic body 2d and it's script looks like this we're using eightway movement right left up and down but I have created two sets of input actions in the project settings right one and right to left one and left two and so on so that the player one will use arrow keys and player two will use WASD and because I name them this way I can have the script just use whatever ID the character is set to and map that to the actions that belong to it so that way I can use the same script on both players so from this we're gonna create two players player 1 and player 2 which are inherited scenes and all I've changed on the player scene is that I have set the name I've set the ID here so this is player 1 player 2 will have an ID of 2 and I changed the module 8 just to quickly make them two different colors and next we have a world scene which is the tile map I'm just using two different kinds of tiles here the grass for the move tiles you can move through and the stone one for the walls which has a collision shape attached to it and inside the Vista map I have instanced the two players so if you run this scene everything works fine you have the tile map your players can move around everything's fine except for the fact that the tile map is much much bigger than the display window so the characters would go off the screen now if this was a single player game you would attach a camera to the player and just have that camera follow them around as they moved around the map but that won't work with two players because you need a camera following each player and you need those cameras to display separately so that's why we're gonna use viewports now I want to point out that notice we have made the game work on its own even though we haven't done these viewports yet to display the players we have all of the game features working the way we want and if you set things up that way it makes things a lot easier if you try to combine the splitscreen view with your game logic things start to get messy really fast so now that we have a working game that does everything we want it to do the only thing we have to worry about is just what we display on the screen so we're gonna do that by creating a new scene main scene I'm using a plane node as the root of this scene because it just needs to contain the other ones and so on this screen we want to show two viewports next to each other and to keep them aligned we're going to use a view H box container and H box container is a node that organizes controls in a horizontal row and so if we make this the full rectangle and we set the alignment to Center then anything we place in it will get arranged horizontally starting from the center and we're gonna put two things in it so they'll be side by side and I'm going to name this container viewports because it's gonna hold the viewports and the things we're gonna put in here our viewport containers because a viewport by itself is just a texture basically that's being displayed it doesn't have any position or size properties of its own and so it needs to be placed inside of a container if we want to display it in 2d so we're going to add a viewport container to hold our viewport and let's call this container one and then we will duplicate that so that we have two now I'm actually going to arrange them this way because I'm gonna put player 1 in container 1 and player 2 in container 2 but I want player 1 on the right because I use the arrow keys for the four player one so they should be on the right and the WASD player should be on the left now both of these viewport containers are empty so they are just they have no width or anything so we're gonna go in and we're gonna change the properties of these to stretch we're going to turn stretch on that will make the viewport that's inside the container be sized to match the container so we don't do manually set it so we're trying to turn that on both of them and then to set the size of the viewport container we're gonna use the size flags and set the horizontal to expand now notice that made new per container to fill the whole thing until we go over here and set it on container 1 and now they're both equal sized taking up half of the screen and you can even in the H box container put a little separation between them if you want using the custom constants like if you put five here you'll have a little 5 pixel gap in between each container now let's put a viewport inside each of these containers so we'll go add a viewport to each of these and let's also name these viewport two and viewport 1 so that we encode we'll know which one we're referring to now for a viewport to display anything it's going to need a camera 2d which is going to render on to the viewport so each of these viewports needs a camera 2d attached to it so do that on each of them and don't forget on the camera 2d to check the current property now normally if you've used cameras before you you know that only one camera can be current at a time but that means only one camera can be current for its viewport so each of these will be current for its individual viewport we can also zoom a little bit because of the scale of everything if we set the zoom to 0.75 on these cameras they will display a little bit more of the area around the player which is going to look a little better so here is your node setup for our viewports we have the viewport the H box container holding the two keeping them organized side by side to viewport containers each of which has a viewport inside of it and each viewport has a camera 2d now of course if we run it and we won't see anything because there's nothing for these viewports to render so let's add to viewport one I'm going to add the an instance of the world scene so the world remember contains the map and the players so now when we run it we will see the world over here in the viewport one and the players are still moving like they were before the cameras are not following yet and the other viewport isn't working but you see how the world is rendered in there now you may notice that on your screen you're not seeing the world rendered in the viewport in the editor there is a small bug with control nodes so they don't always update on the screen and the way you can refresh them is you switch to a different scene and then switch back you'll see the you'll see it properly what happened is the viewports are now getting resized so see how the viewports size is now 510 by 600 because it's being automatically scaled by the viewport container to be that size and this little blue rectangle is representing the camera's view right because we're zoomed out now if you change something with a layout or something like that with any control nodes typically refreshing the window like that will will redraw it the way it's supposed to be all right so we see our world inside viewport one we want to see the same world inside viewport two but obviously we don't want to have a whole nother instance of the world or we'd have two player ones and two player two's we want the viewport twos world to be set the same as viewport ones two we want it to render the same environment and we can do that in code so I've added a script here and this is what the script looks like so up here I've created some variables to use as references to the various nodes that we're going to use so viewport one and two camera one and two and the world itself and remember that when you're typing these you know you can either when you type the dollar sign you'll see the auto suggestion popup and you can go and pick the one you want you can also if you ever have a node over here in the tree if you grab it with the mouse and drag it into the text editor window it will drop the path in there now it always puts quotes around it which you only need if the names have spaces in them so I'm going to go ahead and delete those quotes but so now I have these references to the different worlds or sorry to the different nodes and then the ready I'm going to set viewport twos world equal to viewport ones world and that way when we run it now both of them will be displaying the map and again the players are not anywhere we can see them because we haven't set the cameras to follow the players so there's you know they're starting off the screen somewhere but both viewports are now rendering the world so now we need those cameras to follow their assigned players so to each of the camera 2ds attach this script this lets us set a target for the camera and if we've set a target it will follow the position of that target that's all we need the cameras to do is just follow their target so you might also I think it looks a little better on the cameras if you disable the drag margin which means the player will stay centered exactly in the center of its viewport as it moves around so now each of these cameras can be assigned a target so in the main that's where we will do that so here in Maine and the ready I have assigned camera one its target to player one and camera two to player two now when we run it everything's going to work the way we want so there we see the players centered on their viewports and when you move player two the camera follows and when you move player one the camera follows and that's it now we have our splitscreen working the way we want now let's just add a couple of refinements so in the main I'm gonna set the camera limits so what I have here the function called set camera limits that gets the size of the world you have that tile map and goes through each of the cameras and sets their left right top and bottom limits to those coordinates so what that does is it makes it so that when you run the player can't go off of the maps and if I get all the way up here to the end see how the camera stops scrolling when I reach the edge of the map and we don't see any of that blank space out there that's not part of the world okay this is a useful thing to use whenever you're using tile maps and have a scrolling camera all right we're almost finished but I want to add one more feature which is a common use of viewports and that is to create a mini map a tiny view of the whole world where we can see the entire map and where we are in it so I'm going to add another viewport container but not inside the H box this time it's going to be it's going to be a separate one that's gonna float on top of the rest of the scene so we had a viewport container I'm going to call this minimap and we're gonna set that to stretch and inside of it we're gonna put a viewport and inside of that we're gonna put a camera to D don't forget to set the current camera to D to current and for this we want the camera zoomed way out so I'm going to try 9 by 9 I think that should be pretty good so that we zoom way out and show the whole map and to size the minimap we're just gonna do this we're gonna eyeball it we're gonna set this to something like about that and then let's put Center bottom on the layout so that it will Center it so our we want our mini map to show the same world as the rest of them so we'll set that in the script we've just put here that set the mini maps viewport world 2d to the same world 2d we're using 4 viewport 1 now if we run this we're gonna see the map there but it's offcenter and we can fix that by setting the position of the camera so I'm going to go over again set the cameras position to be centered on the screen which is 512 by 300 and that's going to Center the camera on the minimap but now we have this grey area around the edges and that's empty space right outside of the map so we could try and adjust and get the size just right but what we can do is a viewport has a property called transparent background and if we turn that on it will not draw any of that grey space so now when we run it will see our minimap down there on the screen and you can see yourself in it as you move around both players independently and we have our working minimap all right that'll do it for this demo I hope this helps you when you need to use viewports in your project please leave comments below if you have any questions and you can also download the full project for this from the link that I'll paste in the comments below thanks for watching and I'll see you next time you
