With timestamps:

00:02 - welcome back to game development with
00:03 - pygame we're continuing to work on our
00:06 - shmup game
00:07 - and in this video we're going to improve
00:09 - our collisions so that they feel
00:12 - a little bit better when you're playing
00:15 - so in the last video we added graphics
00:17 - to our games that we have a nice looking
00:20 - ship and we have a nice looking meteor
00:22 - and so on but our problem is that
00:26 - and i'll find a slow one so you can see
00:28 - it
00:30 - let's get a slow one to come at me there
00:32 - i see a slow one on the right hand side
00:33 - so watch what happens when this slow
00:36 - meteor gets close to my ship do you see
00:38 - that so it collided or told me i was
00:41 - dead even though it didn't really look
00:43 - like those two things touched
00:45 - so what's going on
00:47 - so let's look at this diagram when we do
00:50 - collisions normally
00:51 - we're using rectangles
00:54 - the technical term for that is an axis
00:57 - aligned bounding box so each
01:00 - image has a rectangle that outlines
01:04 - the space that it fills
01:06 - and it's a collision if
01:08 - those two triangles overlap so in this
01:11 - picture
01:12 - the
01:13 - meteor counts as hitting the ship even
01:16 - though
01:18 - to your eye if you can't see those
01:19 - rectangles it looks like the
01:22 - meteor is still pretty far away from the
01:23 - ship
01:24 - so that tends to make players frustrated
01:28 - um now one solution you can do is you
01:30 - can make the
01:32 - collisions use a smaller rectangle right
01:35 - so you
01:36 - have it you draw you figure out a
01:38 - smaller rectangle that would cover part
01:41 - of the spaceship and you use that okay
01:44 - another option and it sort of depends on
01:47 - the shape of your of your object is you
01:49 - can use a circular bounding box now this
01:52 - example i've drawn over here the circle
01:54 - works really well for the meteor
01:57 - right it almost exactly outlines it
01:59 - and depending on what size we pick for
02:02 - the circle
02:04 - we can make it so that they get pretty
02:06 - close right the very tips of the wings
02:09 - of the spaceship and the nose of the
02:11 - spaceship are sticking out but in
02:13 - general everything moves
02:14 - fast enough that you're not going to see
02:16 - the difference of those few pixels and
02:18 - in fact it will make the game seem
02:20 - really
02:21 - more fun if the player sees the meteor
02:24 - go
02:24 - super close to them and thinks oh it's
02:26 - going to hit my wing oh somehow i dodged
02:28 - it i must be i must be really really
02:30 - good right it gives them a good feeling
02:32 - as opposed to
02:33 - what happened over there on the left
02:34 - which is i thought i missed it and it
02:36 - still killed me now i'm upset
02:41 - now there are trade-offs for which of
02:43 - these kind of systems you use
02:46 - the access line bounding box is
02:49 - the fastest meaning the computer can
02:51 - calculate whether two rectangles overlap
02:55 - really really fast so if you have lots
02:57 - and lots of them happening
02:59 - it's never going to slow you down it can
03:00 - do it really fast
03:02 - the circular bounding box
03:04 - is
03:05 - not that much slower it's a little bit
03:07 - slower what the computer has to figure
03:09 - out is
03:10 - if the radius of the circle of one
03:14 - and the radius of the circle the other
03:16 - you know what those are and and are they
03:18 - touching you know so are the edges of
03:19 - those circles touching
03:21 - and for in for our cases um it's gonna
03:25 - be fine we're not gonna have thousands
03:27 - and thousands of things on the screen at
03:28 - the time at a time we're gonna have
03:30 - dozens so
03:31 - it won't really slow us down very much
03:34 - one other option that
03:36 - that we're not going to do but i'll go
03:37 - ahead and tell you about it is something
03:39 - called pixel perfect collision
03:41 - and that means that the computer looks
03:43 - at the pixels of the meteor and the
03:46 - pixels of the
03:48 - ship
03:49 - and checks every pixel to see did any of
03:51 - those pixels touch
03:54 - now that
03:55 - absolutely perfectly tells you whether
03:57 - the shapes touched but it also is
04:00 - very expensive in time for the computer
04:03 - to do
04:04 - and the amount of
04:07 - accuracy you get or the the effect you
04:10 - get is not really that much better than
04:12 - the circular than the circular bounding
04:14 - box
04:15 - while making the computer a lot slower
04:17 - or the game a lot slower so
04:20 - rather than
04:22 - do that there's most cases
04:24 - programmers will choose one of these
04:25 - because it's very rare that you need to
04:26 - do pixel perfect collision
04:29 - so we're not going to do that in ours
04:30 - either
04:33 - so pie game makes it pretty easy to do
04:35 - the different kinds of collisions and so
04:37 - we want to do the circular
04:39 - style of collision
04:41 - so that means
04:42 - that we want to set one more thing on
04:45 - our player sprite and our meteor sprite
04:49 - and that is you need to give it a
04:52 - radius so as long as the sprite has a
04:55 - property called radius
04:58 - then it will know how big of a circle
05:01 - to look at
05:02 - but then the question is well how big a
05:04 - radius should we do i know my my
05:07 - spaceship is 50 pixels wide and only 38
05:11 - pixels tall
05:12 - so how do i decide how big to make it
05:14 - well there's a little bit of
05:16 - experimentation you can do but let's say
05:18 - we decided to make it
05:20 - half so the radius is 25 so that means
05:22 - the circle will be 50 pixels across
05:25 - well you can do this
05:28 - this little command is
05:29 - pygame.draw.circle
05:31 - is going to draw a circle so we're going
05:33 - to draw a circle on top of our spaceship
05:34 - just so that we can see
05:36 - how big our radius is okay so we're
05:39 - going to draw it on top of the image
05:41 - in red
05:43 - and we're going to put the center
05:46 - of the
05:47 - circle at the center of the sprite
05:50 - and we're going to draw the circle's
05:51 - radius is going to be the radius
05:54 - okay and now we can see what that looks
05:56 - like and we can adjust this value
05:59 - until we have it the way we like it
06:01 - okay so let's do that on the meteor as
06:04 - well while we're at it and then we'll
06:06 - make sure that we
06:09 - have everything right
06:11 - okay
06:12 - so
06:13 - let's set the radius on the meteor
06:19 - and another way you can do this is if
06:21 - you're using a different size meteor for
06:23 - example you might be using a different
06:25 - size one than me
06:26 - so instead we could make the radius be
06:29 - calculated by the size so if we say
06:31 - what's the rect what's the width of the
06:34 - rectangle
06:35 - okay and then we just
06:38 - divide that by two
06:41 - and then it will be the size of the
06:43 - rectangle i mean the size of the of the
06:45 - image
06:46 - and then let's do the same thing again
06:48 - where we're going to take this uh
06:51 - circle drawing command
06:53 - i'm going to copy that and paste it here
06:55 - so that both of my shapes will have
06:57 - big ugly red circles drawn on top of
06:59 - them so i can see the radius of their
07:02 - circles so let's see what that looks
07:04 - like when we run it
07:06 - okay
07:08 - so
07:09 - now you can see on the meteors there's
07:11 - not really any meteor corners sticking
07:13 - outside of those much a little bit on
07:16 - the right hand side
07:18 - but on the player you can see how it see
07:20 - how it's chopped off at the top and the
07:21 - bottom because the circle is bigger
07:23 - than the size of the ship
07:25 - and if we wanted to look more like that
07:27 - diagram we made we probably want to make
07:29 - the radius a little bit smaller
07:33 - so i'm going to go back to the ship here
07:35 - and i'm going to try making the radius
07:37 - about 21 and then
07:39 - actually let's try 20 and see what that
07:41 - looks like and maybe we'll make it a
07:42 - little bit bigger
07:44 - okay so with the radius of 20
07:47 - now you can see the edges of the wings
07:50 - sticking out there and that's fine
07:52 - again you're not going to notice that
07:54 - much
07:56 - when we do the collisions that those
07:58 - stick out and it's going to give it that
08:00 - fun close action feel
08:02 - so that's probably a pretty good
08:05 - size
08:06 - the
08:07 - meteors i think need to be a little
08:08 - smaller too because we want a little bit
08:11 - of wiggle room on those too
08:14 - so instead of being the width
08:16 - i'm going to multiply the width times
08:19 - about 0.9 so we're going to just make it
08:22 - 90 percent of the width
08:25 - which makes it a little bit smaller
08:26 - let's see how that looks
08:28 - yeah see how you can see a little bit of
08:30 - the corners of the meteor sticking out
08:32 - that's totally fine
08:35 - might even be okay with 85
08:38 - let's try and see
08:42 - so 85 percent would be 0.85
08:48 - yeah that's gonna be fine there's a
08:50 - little extra sticking out on the side
08:52 - because it's an irregular shape but
08:54 - again you might be using a different
08:55 - meteor and it's a slightly different
08:57 - shape too
08:58 - so all together this is going to be fine
09:01 - and
09:02 - we'll work with the changes we make down
09:04 - the road
09:09 - so now that we have the radius set
09:11 - we're able to do the circular collision
09:14 - which means we just have to go down here
09:16 - to our
09:18 - sprite collide command
09:20 - where we're checking to see if the
09:22 - player hit the mob
09:24 - and by default that's using the
09:26 - rectangles so instead we just need to
09:29 - add in here as the last option
09:32 - pygame dot sprite dot collide
09:35 - underscore circle
09:37 - so instead of so this is
09:39 - specifying what type of collision we
09:41 - want to use and
09:43 - if you leave it blank it uses rectangle
09:45 - so if you add in collide circle here it
09:47 - will use circle
09:49 - if you were to be doing something like
09:50 - that perfect pixel collision i was
09:52 - talking about this is where you would
09:54 - put that as well although there's a lot
09:55 - of extra stuff you have to do to make
09:58 - that work
09:59 - so now we should be colliding only if
10:01 - the circles touch
10:03 - now if you're very careful you could
10:05 - probably get
10:06 - yeah see how that passed right through
10:08 - my wing but if i run straight into it
10:11 - the circles touched
10:13 - we are good
10:16 - now let's get rid of those ugly red
10:18 - circles i'm just going to comment
10:21 - these lines out
10:23 - they're useful to sort of keep there in
10:24 - case you ever want to adjust things
10:27 - change the way you're doing the circle
10:28 - you can uncomment that and see the
10:31 - circle again and make everything
10:34 - just the way you want it so now
10:36 - we are good and we have cl circle
10:40 - collisions see how the
10:42 - it looked like the meteor actually hit
10:44 - my ship when i
10:45 - did that that's going to look great when
10:47 - we start to have explosions
10:52 - now we don't need to do anything really
10:54 - with the bullet the bullet since it's
10:57 - long and narrow
10:59 - is working fine with a rectangle around
11:01 - it a circle would actually make the
11:03 - bullet collisions work
11:05 - less effectively so that would be not as
11:08 - good so we're not going to change
11:10 - the
11:11 - way the bullets and the
11:14 - mobs collide
11:16 - and in fact since the bullets move
11:17 - faster too it's even less likely that
11:20 - you'll notice anything unusual about the
11:22 - rectangles
11:24 - so we're just fine there
11:37 - you

Cleaned transcript:

welcome back to game development with pygame we're continuing to work on our shmup game and in this video we're going to improve our collisions so that they feel a little bit better when you're playing so in the last video we added graphics to our games that we have a nice looking ship and we have a nice looking meteor and so on but our problem is that and i'll find a slow one so you can see it let's get a slow one to come at me there i see a slow one on the right hand side so watch what happens when this slow meteor gets close to my ship do you see that so it collided or told me i was dead even though it didn't really look like those two things touched so what's going on so let's look at this diagram when we do collisions normally we're using rectangles the technical term for that is an axis aligned bounding box so each image has a rectangle that outlines the space that it fills and it's a collision if those two triangles overlap so in this picture the meteor counts as hitting the ship even though to your eye if you can't see those rectangles it looks like the meteor is still pretty far away from the ship so that tends to make players frustrated um now one solution you can do is you can make the collisions use a smaller rectangle right so you have it you draw you figure out a smaller rectangle that would cover part of the spaceship and you use that okay another option and it sort of depends on the shape of your of your object is you can use a circular bounding box now this example i've drawn over here the circle works really well for the meteor right it almost exactly outlines it and depending on what size we pick for the circle we can make it so that they get pretty close right the very tips of the wings of the spaceship and the nose of the spaceship are sticking out but in general everything moves fast enough that you're not going to see the difference of those few pixels and in fact it will make the game seem really more fun if the player sees the meteor go super close to them and thinks oh it's going to hit my wing oh somehow i dodged it i must be i must be really really good right it gives them a good feeling as opposed to what happened over there on the left which is i thought i missed it and it still killed me now i'm upset now there are tradeoffs for which of these kind of systems you use the access line bounding box is the fastest meaning the computer can calculate whether two rectangles overlap really really fast so if you have lots and lots of them happening it's never going to slow you down it can do it really fast the circular bounding box is not that much slower it's a little bit slower what the computer has to figure out is if the radius of the circle of one and the radius of the circle the other you know what those are and and are they touching you know so are the edges of those circles touching and for in for our cases um it's gonna be fine we're not gonna have thousands and thousands of things on the screen at the time at a time we're gonna have dozens so it won't really slow us down very much one other option that that we're not going to do but i'll go ahead and tell you about it is something called pixel perfect collision and that means that the computer looks at the pixels of the meteor and the pixels of the ship and checks every pixel to see did any of those pixels touch now that absolutely perfectly tells you whether the shapes touched but it also is very expensive in time for the computer to do and the amount of accuracy you get or the the effect you get is not really that much better than the circular than the circular bounding box while making the computer a lot slower or the game a lot slower so rather than do that there's most cases programmers will choose one of these because it's very rare that you need to do pixel perfect collision so we're not going to do that in ours either so pie game makes it pretty easy to do the different kinds of collisions and so we want to do the circular style of collision so that means that we want to set one more thing on our player sprite and our meteor sprite and that is you need to give it a radius so as long as the sprite has a property called radius then it will know how big of a circle to look at but then the question is well how big a radius should we do i know my my spaceship is 50 pixels wide and only 38 pixels tall so how do i decide how big to make it well there's a little bit of experimentation you can do but let's say we decided to make it half so the radius is 25 so that means the circle will be 50 pixels across well you can do this this little command is pygame.draw.circle is going to draw a circle so we're going to draw a circle on top of our spaceship just so that we can see how big our radius is okay so we're going to draw it on top of the image in red and we're going to put the center of the circle at the center of the sprite and we're going to draw the circle's radius is going to be the radius okay and now we can see what that looks like and we can adjust this value until we have it the way we like it okay so let's do that on the meteor as well while we're at it and then we'll make sure that we have everything right okay so let's set the radius on the meteor and another way you can do this is if you're using a different size meteor for example you might be using a different size one than me so instead we could make the radius be calculated by the size so if we say what's the rect what's the width of the rectangle okay and then we just divide that by two and then it will be the size of the rectangle i mean the size of the of the image and then let's do the same thing again where we're going to take this uh circle drawing command i'm going to copy that and paste it here so that both of my shapes will have big ugly red circles drawn on top of them so i can see the radius of their circles so let's see what that looks like when we run it okay so now you can see on the meteors there's not really any meteor corners sticking outside of those much a little bit on the right hand side but on the player you can see how it see how it's chopped off at the top and the bottom because the circle is bigger than the size of the ship and if we wanted to look more like that diagram we made we probably want to make the radius a little bit smaller so i'm going to go back to the ship here and i'm going to try making the radius about 21 and then actually let's try 20 and see what that looks like and maybe we'll make it a little bit bigger okay so with the radius of 20 now you can see the edges of the wings sticking out there and that's fine again you're not going to notice that much when we do the collisions that those stick out and it's going to give it that fun close action feel so that's probably a pretty good size the meteors i think need to be a little smaller too because we want a little bit of wiggle room on those too so instead of being the width i'm going to multiply the width times about 0.9 so we're going to just make it 90 percent of the width which makes it a little bit smaller let's see how that looks yeah see how you can see a little bit of the corners of the meteor sticking out that's totally fine might even be okay with 85 let's try and see so 85 percent would be 0.85 yeah that's gonna be fine there's a little extra sticking out on the side because it's an irregular shape but again you might be using a different meteor and it's a slightly different shape too so all together this is going to be fine and we'll work with the changes we make down the road so now that we have the radius set we're able to do the circular collision which means we just have to go down here to our sprite collide command where we're checking to see if the player hit the mob and by default that's using the rectangles so instead we just need to add in here as the last option pygame dot sprite dot collide underscore circle so instead of so this is specifying what type of collision we want to use and if you leave it blank it uses rectangle so if you add in collide circle here it will use circle if you were to be doing something like that perfect pixel collision i was talking about this is where you would put that as well although there's a lot of extra stuff you have to do to make that work so now we should be colliding only if the circles touch now if you're very careful you could probably get yeah see how that passed right through my wing but if i run straight into it the circles touched we are good now let's get rid of those ugly red circles i'm just going to comment these lines out they're useful to sort of keep there in case you ever want to adjust things change the way you're doing the circle you can uncomment that and see the circle again and make everything just the way you want it so now we are good and we have cl circle collisions see how the it looked like the meteor actually hit my ship when i did that that's going to look great when we start to have explosions now we don't need to do anything really with the bullet the bullet since it's long and narrow is working fine with a rectangle around it a circle would actually make the bullet collisions work less effectively so that would be not as good so we're not going to change the way the bullets and the mobs collide and in fact since the bullets move faster too it's even less likely that you'll notice anything unusual about the rectangles so we're just fine there you
