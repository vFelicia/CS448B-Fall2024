With timestamps:

00:00 - in this Godot recipe we'll look at how
00:01 - to make a 2d top-down car controller so
00:05 - here's our car and we want it to move in
00:08 - a somewhat realistic manner so let's
00:12 - start first by talking about what not to
00:14 - do a lot of beginners when they first
00:16 - start working on a car will rotate the
00:18 - car around its center like this so when
00:21 - you try and turn car rotates around its
00:23 - center but that's not how cars work
00:25 - right if you did this then the back
00:27 - wheels would be sliding sideways along
00:30 - the ground the way a car works is that
00:33 - the front wheels are the only ones that
00:35 - turn and the rear just sort of follows
00:38 - along so instead of this motion which
00:42 - when you move forward would make you go
00:43 - that way what we want to do if you're
00:46 - turning is you should go that way now
00:49 - there are a lot of approaches to coating
00:52 - your car physics and they mainly depend
00:56 - on how realistic you want them to be how
00:58 - much detail you want to include for this
01:00 - solution we're gonna go for more of an
01:02 - arcade level of realism so we're not
01:04 - going to worry about a lot of the fiddly
01:07 - little details we just want a fun
01:09 - steerable car that we can drive around
01:11 - the track and so we're gonna prioritize
01:14 - the action over the realism but that
01:19 - doesn't mean we can't incorporate a
01:21 - little bit of real-world physics in our
01:23 - simulation so the approach we're going
01:25 - to take is following this article on
01:28 - engineering net which I highly recommend
01:31 - reading it's very short
01:32 - it literally is six lines of code to
01:36 - handle your car steering and the way it
01:39 - works is you basically simulate the
01:43 - wheels but we only need to simulate two
01:45 - wheels and so it's called a bicycle
01:49 - simulation so instead of doing all four
01:51 - wheels we're just going to have one
01:53 - front wheel and one rear wheel and the
01:55 - front wheel can turn the realreal cannot
01:57 - and they will both move forward in the
02:00 - direction they're pointing so back over
02:02 - to our car what that is going to look
02:05 - like is this so this is this would be
02:07 - the wheel locations and when you turn
02:11 - the front wheel will turn or not and
02:14 - that will guide the car in the direction
02:16 - that it's supposed to go all right
02:18 - here's our car scene I've got a sprite
02:21 - here of the car I've got a collision
02:24 - shape I'm going to use a capsule shape
02:25 - because that will allow the front to be
02:28 - a little bit curved and so if you run up
02:30 - against a wall you'll be able to kind of
02:33 - turn along it and not get stuck by a
02:35 - sharp corner and then we're also going
02:38 - to add a camera so that the camera will
02:40 - follow the car as we drive around and we
02:43 - can also put a little bit of zoom on
02:45 - here I'm going to put - to zoom out a
02:48 - little bit and give us a view of the
02:50 - course ahead of us so let's start
02:53 - talking about how we're going to script
02:55 - this and I'm going to break this down
02:56 - into multiple steps so we're gonna do
02:59 - this one part at a time and each of
03:02 - these parts is somewhat optional and you
03:05 - can mix and match to get the kind of car
03:07 - behavior you want but we need to start
03:10 - with movement so a couple things we need
03:12 - to define one is the wheelbase that's
03:16 - how far apart of the two wheels are
03:18 - right what's the distance between the
03:20 - two wheels and this is gonna be based on
03:21 - your sprite and then there's the
03:24 - steering angle that's how far does your
03:27 - front wheel turn when you turn when you
03:30 - press the turn button now we're going to
03:33 - be doing keyboard controls here so
03:35 - you're either turning or you're not so
03:37 - you push the right arrow or the D button
03:41 - and your wheel turns to the right and
03:43 - this is how far it's going to turn if
03:45 - you're using an analog stick you can
03:48 - have this vary based on how far you push
03:52 - the stick but that will be something for
03:55 - another video so this is going to be
03:57 - we're going to call this 15 degrees then
04:00 - we're going to have our velocity vector
04:05 - and we're going to have our steering
04:10 - Direction what direction are we turning
04:11 - in
04:13 - and this could be in this case zero
04:18 - positive 15 or negative 15 for turning
04:22 - left or right
04:23 - that'll be calculated based on our input
04:25 - and so then we're gonna have our physics
04:29 - process in the physics process we want
04:34 - to get our input which will write a
04:36 - separate function for we're gonna
04:38 - calculate our steering which will also
04:42 - write a function for and then we'll use
04:45 - that to set the velocity and then we'll
04:48 - call move and slide with that velocity
04:53 - so let's start with get input the way
04:59 - that get input is going to work is we
05:01 - need to determine whether we're turning
05:02 - or not so we might be going forward if
05:06 - we're not pressing any key turn is going
05:09 - to be zero and then if we press the keys
05:12 - now I'm going to use I've set up actions
05:14 - for these and they are steer left and
05:20 - steer right and I've mapped them to the
05:23 - arrow keys and the WASD keys so that you
05:26 - can use whichever one you want so we do
05:29 - that and then we'll do the same thing
05:32 - for steering left steering left is going
05:42 - to be negative one and then now we know
05:46 - our steer angle I'm sorry our steer
05:49 - direction is that value times the
05:55 - steering angle so we'll have a plus
05:57 - fifteen or minus fifteen based on which
06:00 - key we press and our velocity we also
06:04 - need to set to zero to determine whether
06:09 - we're moving or not and if we've pressed
06:16 - accelerate which is our forward button
06:21 - then we'll set the velocity equal to
06:23 - transform X which is our forward vector
06:27 - times whatever speed I'm just gonna put
06:30 - 500 here because we're gonna come back
06:32 - and change this in a few minutes I just
06:34 - want to put something there temporarily
06:36 - to test it out and make sure that we can
06:39 - turn now we'll talk about calculating
06:43 - the steering and this is the algorithm
06:46 - from that website which is linked below
06:49 - as well if you want to go read the
06:50 - details so the first thing we need to do
06:52 - is figure out what's the location of the
06:55 - front and rear wheels well the rear rear
07:00 - wheel is at our position whatever the
07:03 - position of the car is minus transformed
07:06 - x times wheelbase over to right half the
07:12 - wheelbase it's half the wheelbase behind
07:14 - the cars position cars position is the
07:17 - center of the sprite and then the front
07:19 - wheel is just the opposite all right so
07:24 - right now that's where the wheels are
07:25 - located and then they're gonna move by
07:29 - moving forward at the velocity so rear
07:31 - wheel we add our velocity times Delta
07:35 - that's how far the rear wheel moved
07:37 - forward this frame and then the front
07:41 - wheel we need to pass in Delta through
07:47 - this
07:48 - so when we call calculate steering when
07:52 - you press pass in Delta so that we can
07:54 - calculate the frame movement now the
07:58 - front wheel goes forward by the velocity
08:01 - but needs to be rotated by the steer
08:05 - direction times Delta R so whilst there
08:10 - so now we know that how far the rear
08:13 - wheel moved forward and how far the
08:14 - front wheel moved forward and now
08:16 - they're gonna be in different places
08:19 - right so they have now become offset so
08:23 - we have a new heading a new direction
08:25 - that we're facing
08:27 - and that new heading is just the front
08:31 - wheel - the rear wheel location and I'm
08:36 - going to normalize it so that's our new
08:38 - direction that we're pointing and our
08:41 - velocity should now be changed to that
08:44 - so we take our new heading keep the
08:48 - length and then we want to rotate the
08:51 - sprite as well - to point in the same
08:54 - direction so let's try this out I've
08:56 - created a world scene here which is a
08:58 - tile map that's got some a course laid
09:01 - out here with a big open area and some
09:03 - tracks for us to drive along and I've
09:05 - added the car to it so let's try this
09:08 - out and now if I press forward the car
09:12 - moves forward if I press turn the car
09:14 - turns now we're turning really sharply
09:17 - ah I know why so over here we got a
09:20 - mistake here I put steering angle 15
09:23 - degrees since this is a human-readable
09:26 - angle it's useful to use degrees but the
09:30 - car in the code is going to use radians
09:34 - so this needs to be dug to read there we
09:39 - go
09:39 - and that's gonna be a little better yeah
09:43 - so now you see we're turning we have a
09:46 - turning radius and then when I let go we
09:52 - just instantly stop and that's because
09:55 - we have not implemented any kind of
09:57 - acceleration so our speed is constant
10:00 - and that will be the next part all right
10:06 - so let's add a new setting variable up
10:09 - here called engine power and that will
10:14 - let us make cars accelerate quickly or
10:16 - slowly and then we'll need a variable to
10:19 - track that and get our acceleration and
10:21 - that's also a vector - and now we're
10:25 - going to use that acceleration when we
10:28 - calculate our movement so in our physics
10:31 - process we're going to set acceleration
10:33 - equal to zero each frame before we
10:35 - calculate it in our get input
10:39 - I'm going to be doing velocity anymore
10:41 - we're gonna be doing acceleration and
10:44 - we're setting that equal to whatever the
10:46 - engine power is and then in our physics
10:51 - process now we've calculated steering
10:53 - we've got what our acceleration is we
10:55 - can set our velocity based on that at
11:01 - our acceleration to our velocity and we
11:04 - should be good so let's take a look at
11:06 - that so now you can see I come up to
11:10 - speed but now I'm gonna continue to get
11:14 - faster and faster
11:15 - I'm not accelerating I'm not holding the
11:17 - accelerate button anymore because we
11:20 - don't have anything slowing us down we
11:22 - need some kind of friction force to slow
11:25 - us down so cars experience two kinds of
11:29 - friction or two kinds of negative forces
11:33 - that slow them down there's friction
11:35 - which is the force against the ground so
11:38 - if you're driving on sand friction is
11:41 - high if you're driving on ice fiction is
11:43 - low but then there's also drag and drag
11:46 - is the wind resistance and that's based
11:48 - on the cross section of the car right a
11:50 - big square truck has a higher drag than
11:54 - a sleek racing car and so we're gonna do
11:58 - both of those and the other thing that
11:59 - those bias is those are gonna also give
12:02 - us a maximum speed they're gonna give us
12:04 - a point where the engine power can't
12:06 - accelerate anymore against the force of
12:09 - the friction so we're gonna have a
12:11 - friction force and the friction is gonna
12:14 - be the amount that we're slowed down by
12:16 - the ground so I'm gonna set that to 0.9
12:17 - and it's negative because it's in the
12:19 - going to be in the reverse direction
12:20 - that we're going and drag and drag is
12:24 - going to be a very small number and the
12:26 - reason drag is a very small number is
12:28 - that friction is based on your velocity
12:30 - the faster you're going the higher the
12:33 - friction force drag is based on the
12:35 - square of your velocity so when you're
12:39 - moving in a slow speed friction is going
12:41 - to be more significant but when you're
12:43 - moving at a high speed
12:44 - drag quickly becomes more significant
12:47 - than friction
12:48 - and that's going to really be what
12:50 - determines your maximum speed so in our
12:53 - physics process after we get input we
12:56 - can apply friction and we will write our
13:02 - function for that and this is not too
13:06 - complicated what we have to do is first
13:10 - friction is going to be slowing us down
13:12 - right and that means that when we get to
13:16 - a really low speed it's just going to
13:18 - continually be decelerating it so we
13:21 - could be moving at a very very slow
13:23 - speed and we don't want that at a
13:26 - certain point you have to just stop so
13:28 - if our velocity length is less than five
13:34 - five is a pretty small number then
13:36 - velocity dot should be equal to vector
13:39 - 2.0 and that's just so that we don't
13:43 - have a speed oh you know 0.0001 and then
13:45 - oh oh one and so forth and friction
13:49 - force yeah we're gonna calculate now is
13:53 - equal to velocity times friction right
13:58 - friction is negative so it's gonna be a
14:00 - force opposite the direction we're going
14:01 - and then the drag force similarly is
14:06 - velocity but we also need to multiply
14:09 - the velocity by the velocity length
14:12 - because it's that'll give us a force
14:16 - proportional to the velocity squared
14:18 - times what if our drag factor is and
14:21 - then we set our acceleration based on
14:24 - that acceleration we add the drag force
14:27 - and we add the friction force and that
14:34 - should do it so let's try that out here
14:38 - and now you can see me coming up to
14:41 - speed and then when I let go I coast to
14:43 - a stop and I'm gonna hold down
14:45 - accelerate and you can see I've reached
14:47 - a maximum speed now I can't go any
14:49 - faster than I'm going right now
14:56 - now we're going to talk about brakes
14:59 - applying the brakes so we can slow down
15:01 - and also so that we can reverse and
15:04 - we're going to set braking that's the
15:09 - kind of like engine power that's how
15:12 - quickly the brakes will reduce your
15:15 - speed so it's a deceleration and then
15:18 - I'm also going to set a max speed
15:21 - reverse that is not as high as the
15:25 - forward speed is going to be so we
15:27 - shouldn't be able to go maximum speed in
15:29 - Reverse and so now we have those we're
15:33 - going to in our get input we're going to
15:35 - check for that input as well so if if
15:43 - we've pressing the brake input and our
15:49 - acceleration needs to be transformed got
15:54 - x times braking and then that will slow
15:59 - us down but it's not gonna let us go in
16:01 - Reverse which you'll see if we try here
16:04 - if I press the brakes yeah came to a
16:05 - stop really fast but I'm holding down
16:07 - brake and I'm only kind of creeping
16:10 - backwards and that's not great because
16:14 - it's still trying to decelerate us but
16:16 - we wanted to move us backwards so here
16:21 - in our calculate steering we're figuring
16:22 - out our new heading and our new heading
16:25 - is a vector pointing forward and when
16:27 - we're accelerating those two vectors in
16:29 - the same direction but when we're going
16:31 - in Reverse we want to go opposite the
16:33 - direction of the heading and so to fix
16:36 - that we need to figure out whether we're
16:39 - trying to go opposite or the same
16:41 - direction as our new heading and we can
16:43 - do that with the dot product the dot
16:45 - product of our new heading with our
16:49 - velocity is going to give us a value
16:55 - between 1 and negative 1 a value greater
16:58 - than zero is a vector pointing in the
17:02 - same direction so if V is greater than
17:05 - zero then we're going forward that's
17:07 - what we're doing
17:09 - but if we get a value of D that's less
17:12 - than zero that means we're trying to go
17:13 - in Reverse so we want our velocity to be
17:17 - opposite the new heading and we multiple
17:21 - gonna multiply that by the minimum of
17:23 - velocity that length max speed reverse
17:27 - and so that way we can go faster than
17:29 - the reverse speed and so that should let
17:32 - us go in Reverse so now if I press
17:34 - reverse I'm going backwards and that'll
17:39 - let us get out of those situations where
17:41 - we run into the wall and we can reverse
17:43 - out so one last thing we want to do here
17:46 - I know this is getting to be a little
17:48 - bit long is we want to talk about
17:49 - drifting or sliding and so the way it
17:52 - works right now is that we when we turn
17:55 - we are instantaneously changing our
17:57 - velocity to the new heading
17:59 - but above a certain speed we want that
18:03 - to take longer there needs to be some
18:05 - sliding happening to till we can reach
18:08 - our new turning velocity and so we're
18:12 - gonna set that up here we're gonna set a
18:14 - couple variables one called
18:15 - slip speed this is the speed above which
18:18 - you start sliding and then we're gonna
18:22 - have attraction fast which is how
18:28 - slippery it is when you're above that
18:30 - speed and attraction slow which is what
18:34 - it is when you're below it so when
18:37 - you're going slowly right if either of
18:39 - these are 1.0 then it's gonna be what we
18:43 - have right now and so we could set this
18:45 - you know to two different values based
18:49 - on your speed and so down here what
18:52 - we're going to do is we're gonna set
18:54 - that attraction to the attraction slow
19:00 - unless we're above a certain speed so
19:03 - but if velocity dot length is greater
19:07 - than slip speed then traction should be
19:10 - traction fast and then what that means
19:14 - is here we're going to change this
19:18 - so that our velocity is now going to
19:21 - linear interpolate to that new heading
19:25 - based on our traction and let's take a
19:30 - look at what that looks like when we run
19:32 - it so now when I get going to ice
19:36 - because you see how I'm sliding around
19:38 - but when I get to a low speed I'm
19:43 - turning a little more
19:45 - I'm turning consistently but when I get
19:47 - up to that high speed I start sliding so
19:49 - that about does it for the car steering
19:51 - I hope this was helpful to you there are
19:53 - a lot of settings to adjust with all the
19:55 - traction and the friction and so on so
19:57 - if you download the attached project I
20:00 - have added a control panel which you can
20:04 - enable with tab which will let you
20:06 - adjust all of these settings so you can
20:09 - see as I'm driving around I can change
20:11 - the traction and be no sliding or lots
20:15 - of sliding and you can you know you can
20:18 - change all these different values
20:20 - increase the engine power decrease the
20:22 - engine power and so on and hopefully
20:24 - that will help you find whatever
20:26 - settings you need for your particular
20:28 - style of game thanks for watching please
20:30 - ask your questions in the comment
20:32 - section below don't forget to Like and
20:35 - subscribe and I will see you in a future
20:37 - video
20:37 - this tutorial is part of my nugudo
20:40 - recipes website the goal is to collect
20:42 - all the best tips and lessons to help
20:44 - make you a better at Godot developer if
20:46 - you liked this video I hope you'll go
20:47 - and check out the site and make sure to
20:49 - hit subscribe so you'll be notified
20:50 - whenever I release new videos thanks for
20:53 - watching

Cleaned transcript:

in this Godot recipe we'll look at how to make a 2d topdown car controller so here's our car and we want it to move in a somewhat realistic manner so let's start first by talking about what not to do a lot of beginners when they first start working on a car will rotate the car around its center like this so when you try and turn car rotates around its center but that's not how cars work right if you did this then the back wheels would be sliding sideways along the ground the way a car works is that the front wheels are the only ones that turn and the rear just sort of follows along so instead of this motion which when you move forward would make you go that way what we want to do if you're turning is you should go that way now there are a lot of approaches to coating your car physics and they mainly depend on how realistic you want them to be how much detail you want to include for this solution we're gonna go for more of an arcade level of realism so we're not going to worry about a lot of the fiddly little details we just want a fun steerable car that we can drive around the track and so we're gonna prioritize the action over the realism but that doesn't mean we can't incorporate a little bit of realworld physics in our simulation so the approach we're going to take is following this article on engineering net which I highly recommend reading it's very short it literally is six lines of code to handle your car steering and the way it works is you basically simulate the wheels but we only need to simulate two wheels and so it's called a bicycle simulation so instead of doing all four wheels we're just going to have one front wheel and one rear wheel and the front wheel can turn the realreal cannot and they will both move forward in the direction they're pointing so back over to our car what that is going to look like is this so this is this would be the wheel locations and when you turn the front wheel will turn or not and that will guide the car in the direction that it's supposed to go all right here's our car scene I've got a sprite here of the car I've got a collision shape I'm going to use a capsule shape because that will allow the front to be a little bit curved and so if you run up against a wall you'll be able to kind of turn along it and not get stuck by a sharp corner and then we're also going to add a camera so that the camera will follow the car as we drive around and we can also put a little bit of zoom on here I'm going to put to zoom out a little bit and give us a view of the course ahead of us so let's start talking about how we're going to script this and I'm going to break this down into multiple steps so we're gonna do this one part at a time and each of these parts is somewhat optional and you can mix and match to get the kind of car behavior you want but we need to start with movement so a couple things we need to define one is the wheelbase that's how far apart of the two wheels are right what's the distance between the two wheels and this is gonna be based on your sprite and then there's the steering angle that's how far does your front wheel turn when you turn when you press the turn button now we're going to be doing keyboard controls here so you're either turning or you're not so you push the right arrow or the D button and your wheel turns to the right and this is how far it's going to turn if you're using an analog stick you can have this vary based on how far you push the stick but that will be something for another video so this is going to be we're going to call this 15 degrees then we're going to have our velocity vector and we're going to have our steering Direction what direction are we turning in and this could be in this case zero positive 15 or negative 15 for turning left or right that'll be calculated based on our input and so then we're gonna have our physics process in the physics process we want to get our input which will write a separate function for we're gonna calculate our steering which will also write a function for and then we'll use that to set the velocity and then we'll call move and slide with that velocity so let's start with get input the way that get input is going to work is we need to determine whether we're turning or not so we might be going forward if we're not pressing any key turn is going to be zero and then if we press the keys now I'm going to use I've set up actions for these and they are steer left and steer right and I've mapped them to the arrow keys and the WASD keys so that you can use whichever one you want so we do that and then we'll do the same thing for steering left steering left is going to be negative one and then now we know our steer angle I'm sorry our steer direction is that value times the steering angle so we'll have a plus fifteen or minus fifteen based on which key we press and our velocity we also need to set to zero to determine whether we're moving or not and if we've pressed accelerate which is our forward button then we'll set the velocity equal to transform X which is our forward vector times whatever speed I'm just gonna put 500 here because we're gonna come back and change this in a few minutes I just want to put something there temporarily to test it out and make sure that we can turn now we'll talk about calculating the steering and this is the algorithm from that website which is linked below as well if you want to go read the details so the first thing we need to do is figure out what's the location of the front and rear wheels well the rear rear wheel is at our position whatever the position of the car is minus transformed x times wheelbase over to right half the wheelbase it's half the wheelbase behind the cars position cars position is the center of the sprite and then the front wheel is just the opposite all right so right now that's where the wheels are located and then they're gonna move by moving forward at the velocity so rear wheel we add our velocity times Delta that's how far the rear wheel moved forward this frame and then the front wheel we need to pass in Delta through this so when we call calculate steering when you press pass in Delta so that we can calculate the frame movement now the front wheel goes forward by the velocity but needs to be rotated by the steer direction times Delta R so whilst there so now we know that how far the rear wheel moved forward and how far the front wheel moved forward and now they're gonna be in different places right so they have now become offset so we have a new heading a new direction that we're facing and that new heading is just the front wheel the rear wheel location and I'm going to normalize it so that's our new direction that we're pointing and our velocity should now be changed to that so we take our new heading keep the length and then we want to rotate the sprite as well to point in the same direction so let's try this out I've created a world scene here which is a tile map that's got some a course laid out here with a big open area and some tracks for us to drive along and I've added the car to it so let's try this out and now if I press forward the car moves forward if I press turn the car turns now we're turning really sharply ah I know why so over here we got a mistake here I put steering angle 15 degrees since this is a humanreadable angle it's useful to use degrees but the car in the code is going to use radians so this needs to be dug to read there we go and that's gonna be a little better yeah so now you see we're turning we have a turning radius and then when I let go we just instantly stop and that's because we have not implemented any kind of acceleration so our speed is constant and that will be the next part all right so let's add a new setting variable up here called engine power and that will let us make cars accelerate quickly or slowly and then we'll need a variable to track that and get our acceleration and that's also a vector and now we're going to use that acceleration when we calculate our movement so in our physics process we're going to set acceleration equal to zero each frame before we calculate it in our get input I'm going to be doing velocity anymore we're gonna be doing acceleration and we're setting that equal to whatever the engine power is and then in our physics process now we've calculated steering we've got what our acceleration is we can set our velocity based on that at our acceleration to our velocity and we should be good so let's take a look at that so now you can see I come up to speed but now I'm gonna continue to get faster and faster I'm not accelerating I'm not holding the accelerate button anymore because we don't have anything slowing us down we need some kind of friction force to slow us down so cars experience two kinds of friction or two kinds of negative forces that slow them down there's friction which is the force against the ground so if you're driving on sand friction is high if you're driving on ice fiction is low but then there's also drag and drag is the wind resistance and that's based on the cross section of the car right a big square truck has a higher drag than a sleek racing car and so we're gonna do both of those and the other thing that those bias is those are gonna also give us a maximum speed they're gonna give us a point where the engine power can't accelerate anymore against the force of the friction so we're gonna have a friction force and the friction is gonna be the amount that we're slowed down by the ground so I'm gonna set that to 0.9 and it's negative because it's in the going to be in the reverse direction that we're going and drag and drag is going to be a very small number and the reason drag is a very small number is that friction is based on your velocity the faster you're going the higher the friction force drag is based on the square of your velocity so when you're moving in a slow speed friction is going to be more significant but when you're moving at a high speed drag quickly becomes more significant than friction and that's going to really be what determines your maximum speed so in our physics process after we get input we can apply friction and we will write our function for that and this is not too complicated what we have to do is first friction is going to be slowing us down right and that means that when we get to a really low speed it's just going to continually be decelerating it so we could be moving at a very very slow speed and we don't want that at a certain point you have to just stop so if our velocity length is less than five five is a pretty small number then velocity dot should be equal to vector 2.0 and that's just so that we don't have a speed oh you know 0.0001 and then oh oh one and so forth and friction force yeah we're gonna calculate now is equal to velocity times friction right friction is negative so it's gonna be a force opposite the direction we're going and then the drag force similarly is velocity but we also need to multiply the velocity by the velocity length because it's that'll give us a force proportional to the velocity squared times what if our drag factor is and then we set our acceleration based on that acceleration we add the drag force and we add the friction force and that should do it so let's try that out here and now you can see me coming up to speed and then when I let go I coast to a stop and I'm gonna hold down accelerate and you can see I've reached a maximum speed now I can't go any faster than I'm going right now now we're going to talk about brakes applying the brakes so we can slow down and also so that we can reverse and we're going to set braking that's the kind of like engine power that's how quickly the brakes will reduce your speed so it's a deceleration and then I'm also going to set a max speed reverse that is not as high as the forward speed is going to be so we shouldn't be able to go maximum speed in Reverse and so now we have those we're going to in our get input we're going to check for that input as well so if if we've pressing the brake input and our acceleration needs to be transformed got x times braking and then that will slow us down but it's not gonna let us go in Reverse which you'll see if we try here if I press the brakes yeah came to a stop really fast but I'm holding down brake and I'm only kind of creeping backwards and that's not great because it's still trying to decelerate us but we wanted to move us backwards so here in our calculate steering we're figuring out our new heading and our new heading is a vector pointing forward and when we're accelerating those two vectors in the same direction but when we're going in Reverse we want to go opposite the direction of the heading and so to fix that we need to figure out whether we're trying to go opposite or the same direction as our new heading and we can do that with the dot product the dot product of our new heading with our velocity is going to give us a value between 1 and negative 1 a value greater than zero is a vector pointing in the same direction so if V is greater than zero then we're going forward that's what we're doing but if we get a value of D that's less than zero that means we're trying to go in Reverse so we want our velocity to be opposite the new heading and we multiple gonna multiply that by the minimum of velocity that length max speed reverse and so that way we can go faster than the reverse speed and so that should let us go in Reverse so now if I press reverse I'm going backwards and that'll let us get out of those situations where we run into the wall and we can reverse out so one last thing we want to do here I know this is getting to be a little bit long is we want to talk about drifting or sliding and so the way it works right now is that we when we turn we are instantaneously changing our velocity to the new heading but above a certain speed we want that to take longer there needs to be some sliding happening to till we can reach our new turning velocity and so we're gonna set that up here we're gonna set a couple variables one called slip speed this is the speed above which you start sliding and then we're gonna have attraction fast which is how slippery it is when you're above that speed and attraction slow which is what it is when you're below it so when you're going slowly right if either of these are 1.0 then it's gonna be what we have right now and so we could set this you know to two different values based on your speed and so down here what we're going to do is we're gonna set that attraction to the attraction slow unless we're above a certain speed so but if velocity dot length is greater than slip speed then traction should be traction fast and then what that means is here we're going to change this so that our velocity is now going to linear interpolate to that new heading based on our traction and let's take a look at what that looks like when we run it so now when I get going to ice because you see how I'm sliding around but when I get to a low speed I'm turning a little more I'm turning consistently but when I get up to that high speed I start sliding so that about does it for the car steering I hope this was helpful to you there are a lot of settings to adjust with all the traction and the friction and so on so if you download the attached project I have added a control panel which you can enable with tab which will let you adjust all of these settings so you can see as I'm driving around I can change the traction and be no sliding or lots of sliding and you can you know you can change all these different values increase the engine power decrease the engine power and so on and hopefully that will help you find whatever settings you need for your particular style of game thanks for watching please ask your questions in the comment section below don't forget to Like and subscribe and I will see you in a future video this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better at Godot developer if you liked this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching
