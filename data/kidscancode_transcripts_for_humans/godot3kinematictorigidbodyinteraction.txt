With timestamps:

00:00 - welcome back to another Godot recipes
00:02 - video I decided to make this video after
00:04 - seeing a lot of questions in the
00:06 - community about how to handle kinematic
00:10 - body is interacting with rigid bodies it
00:12 - can definitely be tricky if you don't
00:14 - know what you're doing and you might see
00:16 - some surprising behavior so let's get
00:18 - started and see what we can do so here
00:20 - we have a very generic kinematic body
00:23 - platformer character with moving and
00:26 - jumping using move n slide to execute
00:30 - the movement and then I've added this
00:32 - ball and these blocks are rigidbody to
00:35 - DS and everything is left at its default
00:39 - settings right now so if I move against
00:42 - the ball I'll push it and the same with
00:47 - the blocks and you might think well
00:49 - that's looking okay now but the problem
00:51 - will happen if for example I try and
00:53 - jump on top of the blocks or if I try
00:56 - and push them into the corner you will
00:59 - see that things are not behaving the way
01:03 - you would think that they should we get
01:05 - tunneling and we get overlapping and
01:07 - these bodies are not behaving correctly
01:13 - so how do we fix this if we look at the
01:16 - code we're getting the user input and
01:20 - then we're applying gravity and we're
01:22 - using move n slide passing it the floor
01:25 - normal so that we know what the floor is
01:29 - and we can use its own floor to process
01:31 - our jump and this is very common this is
01:34 - what you'll see in most tutorials and
01:36 - it's a great way to get a basic
01:39 - kinematic body a character working but
01:42 - if we go and look at the documentation
01:45 - for moving slide you'll see that there
01:47 - are a lot more parameters especially
01:49 - this one right here
01:51 - infinite inertia is true by default and
01:53 - that's what's doing the pushing when we
01:55 - run into a rigidbody 2d it's telling the
01:59 - rigidbody that an infinite mass object
02:03 - has run into it so it should just it
02:05 - should just move no matter what and
02:06 - that's what's causing the strange
02:09 - behavior you're seeing it also means
02:11 - that the mass of the rigid body is
02:13 - getting ignored
02:14 - if I made that circular rigid body have
02:17 - a much much higher mass it would still
02:20 - move exactly the same when my kinematic
02:22 - body pushed it so we're ignoring the
02:24 - rigid body physics when we push it which
02:26 - is what's causing our problem so we want
02:28 - to set that value to false so here I've
02:32 - added the other parameters and since GED
02:36 - script doesn't have named parameters we
02:37 - do have to include them all since we
02:39 - want to go to the last one so I'm just
02:41 - using the defaults that were already
02:43 - there for the other parameters this is
02:45 - just what they are - by default and I
02:48 - but I've set infinite inertia it to
02:51 - false so let's see what happens when we
02:53 - run so now when I move I can't push
02:58 - these at all my kinematic body just
03:00 - stops when I hit the rigid body as if it
03:05 - was a static body all right and now I
03:07 - have no way to move these so that solved
03:11 - part of the problem but now I can't push
03:14 - them at all and the way we fix that is
03:17 - going to be when we detect a collision
03:19 - with a rigid body we want to apply an
03:22 - impulse to it so we're going to add a
03:25 - new parameter up here to our kinematic
03:28 - body and this is going to be our this is
03:33 - gonna represent our inertia I'm just
03:36 - gonna call we'll call this inertia and
03:38 - I'm gonna set this equal to 100 this is
03:42 - gonna help us calculate the force with
03:43 - which will push the rigid body and so
03:48 - now down here after the movement slide
03:50 - is when we need to check to see if we
03:54 - have collided so we'll stick this down
03:57 - here at the end and with slide
04:00 - collisions you can have multiple
04:01 - collision so we have to loop through
04:05 - them using get slide count in case there
04:10 - was more than one and then if there was
04:13 - then the collision object the kinematic
04:18 - collision 2d object we get with get
04:20 - slide collision
04:23 - and on that index so now we have our
04:28 - collision and then I'm going to put all
04:32 - of my rigid bodies in a group you can
04:35 - also test if it's a rigid body but I'm
04:38 - gonna say if collision dot Collider is
04:41 - in group and I just called it bodies so
04:47 - if I've hit one of the objects
04:49 - identified as a body then I want to
04:51 - apply an impulse an impulse is like a
04:53 - kick like when you hit a baseball with a
04:56 - bat or when you kick a soccer ball so
04:59 - collision Collider apply central impulse
05:07 - and let's zoom out a little bit so you
05:10 - can see everything so we're going to use
05:12 - the collision normal and I'm going to
05:17 - reverse it I'm going to put a negative
05:18 - sign and to invert it because the normal
05:21 - points out of the body I want it
05:23 - pointing into the body and I'm going to
05:25 - multiply by that inertia that we added
05:28 - and now I should have a nice push on
05:34 - this body when I push up against it so
05:39 - see I can push the blocks the blocks do
05:41 - not tunnel through each other and if I
05:47 - jump on top I can just stand on top so
05:52 - already you can see a huge improvement
05:55 - in the behavior from here there are lots
06:01 - of things you can do to tweak and adjust
06:04 - exactly how it works to get it to work
06:06 - the way you want it in your game
06:08 - adjusting the physics properties of the
06:11 - rigid bodies and adjusting the inertia
06:15 - value up here to different values to see
06:17 - how that works and get it working the
06:20 - way you want but hopefully this helps
06:21 - you in solving your kinematic body to
06:25 - rigid body interactions thanks for
06:27 - watching and I'll see you in the next
06:29 - video this tutorial is part of my nugudo
06:32 - recipes website the goal is to collect
06:34 - all the best tips and lessons to help
06:36 - make you a better
06:37 - Oh developer if you like this video I
06:39 - hope you'll go and check out the site
06:40 - and make sure to hit subscribe so you'll
06:42 - be notified whenever I release new
06:43 - videos thanks for watching

Cleaned transcript:

welcome back to another Godot recipes video I decided to make this video after seeing a lot of questions in the community about how to handle kinematic body is interacting with rigid bodies it can definitely be tricky if you don't know what you're doing and you might see some surprising behavior so let's get started and see what we can do so here we have a very generic kinematic body platformer character with moving and jumping using move n slide to execute the movement and then I've added this ball and these blocks are rigidbody to DS and everything is left at its default settings right now so if I move against the ball I'll push it and the same with the blocks and you might think well that's looking okay now but the problem will happen if for example I try and jump on top of the blocks or if I try and push them into the corner you will see that things are not behaving the way you would think that they should we get tunneling and we get overlapping and these bodies are not behaving correctly so how do we fix this if we look at the code we're getting the user input and then we're applying gravity and we're using move n slide passing it the floor normal so that we know what the floor is and we can use its own floor to process our jump and this is very common this is what you'll see in most tutorials and it's a great way to get a basic kinematic body a character working but if we go and look at the documentation for moving slide you'll see that there are a lot more parameters especially this one right here infinite inertia is true by default and that's what's doing the pushing when we run into a rigidbody 2d it's telling the rigidbody that an infinite mass object has run into it so it should just it should just move no matter what and that's what's causing the strange behavior you're seeing it also means that the mass of the rigid body is getting ignored if I made that circular rigid body have a much much higher mass it would still move exactly the same when my kinematic body pushed it so we're ignoring the rigid body physics when we push it which is what's causing our problem so we want to set that value to false so here I've added the other parameters and since GED script doesn't have named parameters we do have to include them all since we want to go to the last one so I'm just using the defaults that were already there for the other parameters this is just what they are by default and I but I've set infinite inertia it to false so let's see what happens when we run so now when I move I can't push these at all my kinematic body just stops when I hit the rigid body as if it was a static body all right and now I have no way to move these so that solved part of the problem but now I can't push them at all and the way we fix that is going to be when we detect a collision with a rigid body we want to apply an impulse to it so we're going to add a new parameter up here to our kinematic body and this is going to be our this is gonna represent our inertia I'm just gonna call we'll call this inertia and I'm gonna set this equal to 100 this is gonna help us calculate the force with which will push the rigid body and so now down here after the movement slide is when we need to check to see if we have collided so we'll stick this down here at the end and with slide collisions you can have multiple collision so we have to loop through them using get slide count in case there was more than one and then if there was then the collision object the kinematic collision 2d object we get with get slide collision and on that index so now we have our collision and then I'm going to put all of my rigid bodies in a group you can also test if it's a rigid body but I'm gonna say if collision dot Collider is in group and I just called it bodies so if I've hit one of the objects identified as a body then I want to apply an impulse an impulse is like a kick like when you hit a baseball with a bat or when you kick a soccer ball so collision Collider apply central impulse and let's zoom out a little bit so you can see everything so we're going to use the collision normal and I'm going to reverse it I'm going to put a negative sign and to invert it because the normal points out of the body I want it pointing into the body and I'm going to multiply by that inertia that we added and now I should have a nice push on this body when I push up against it so see I can push the blocks the blocks do not tunnel through each other and if I jump on top I can just stand on top so already you can see a huge improvement in the behavior from here there are lots of things you can do to tweak and adjust exactly how it works to get it to work the way you want it in your game adjusting the physics properties of the rigid bodies and adjusting the inertia value up here to different values to see how that works and get it working the way you want but hopefully this helps you in solving your kinematic body to rigid body interactions thanks for watching and I'll see you in the next video this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better Oh developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching
