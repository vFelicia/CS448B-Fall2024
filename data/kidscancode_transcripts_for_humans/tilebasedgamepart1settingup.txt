With timestamps:

00:00 - welcome back to game development with
00:01 - pame this is going to be part one of our
00:04 - series on tile based games in this video
00:08 - we'll be getting started with our
00:10 - project talking about what we're going
00:12 - to be doing and what is a tile-based
00:16 - game so tile based games are really
00:19 - common Dungeon Crawlers Legend of Zelda
00:22 - style RPGs uh strategy games even
00:25 - sidescrolling Platformers like Mega Man
00:28 - are all tile-based games sometimes the
00:30 - tiles are obvious like in
00:33 - Civilization uh but sometimes they're
00:35 - not even visible at all but what we mean
00:37 - or what game designers mean when they're
00:39 - talking about tile based games is that
00:41 - we're using a grid of tiles to lay out
00:43 - our game World the graphics the map the
00:46 - movement of the Sprites everything is
00:47 - based on an underlying grid and there's
00:50 - a lot of advantages to this it helps in
00:53 - organizing the data in your code it
00:56 - helps in designing the graphics of your
00:59 - level levels and you'll see how it all
01:01 - goes together in this series we're going
01:04 - to start out with the very simplest
01:06 - possible grid of tiles and slowly build
01:09 - up to more advanced features like Maps
01:12 - level design fancier graphics and so
01:15 - on so for this project we're going to
01:17 - start out with a basic game Loop
01:19 - structure and you can click on the link
01:22 - on the screen if you need a refresher in
01:24 - how we created this basic structure uh
01:27 - in the previous project and over here in
01:31 - the settings the main thing we're going
01:32 - to be concerned with is this tile size
01:36 - variable this is how big the tiles in
01:39 - our map grid are going to be and a lot
01:43 - of times that can vary quite a bit um
01:46 - typically you might find them in powers
01:49 - of two 16 or 32 or 64 are popular sizes
01:54 - uh but really it all boils down to your
01:56 - preferences and and the art that you
01:58 - have uh what size the artist has created
02:00 - the tiles in so I'm going to use a tile
02:02 - size of 32 pixels so every Square on the
02:04 - grid will be
02:05 - 32 and I've chosen a width and a height
02:08 - here for my game
02:10 - window that are values that are evenly
02:13 - divisible by uh 64 or 32 or 16 um so
02:18 - that I will have a whole number of
02:20 - squares across and down and no no
02:23 - partial squares showing on the screen
02:25 - and finally I have these two variables
02:27 - here grid width and grid height that are
02:29 - just going to be the width divided by
02:31 - the tile size so in the since we have 32
02:34 - here uh grid width will be 32 and grid
02:38 - height will be 24 so that's how many
02:39 - squares fit uh on my screen it'll be 32
02:43 - squares by 24
02:46 - squares so the first thing let's do
02:48 - while we're getting set up is let's just
02:51 - draw that grid on the screen so we can
02:53 - visualize our squares and know what our
02:55 - grid looks like uh as we're getting
02:57 - everything working um so I'm I'm going
02:59 - to add here to the def draw here I'm
03:02 - going to say draw grid and then I'm
03:06 - going to Define that and to draw the
03:08 - grid we're just going to want to make a
03:10 - couple of uh
03:13 - Loops so I'm going to make two gri two
03:16 - Loops one Loop to draw the horizontal
03:19 - lines and one Loop to draw the vertical
03:21 - lines so if I count
03:25 - X's from zero all the way to the width
03:29 - of the screen
03:30 - and the increment I want to count by is
03:33 - tile size right I want to count by
03:36 - 32s so I'm going to count from 0er to
03:40 - 1024 by 32s and each place I will draw a
03:44 - line and that
03:47 - line for the pame do draw line command
03:50 - we just tell it the screen I'm going to
03:52 - use this light gray
03:54 - color and the end points of the line
03:56 - will be X comma
03:57 - 0 and x comma height so I want to draw a
04:02 - line at whatever X I'm at going from the
04:04 - top of the screen down to the bottom and
04:06 - that will draw my vertical lines and I'm
04:08 - just going to do the same thing for my
04:11 - vertical lines I'm just going to draw
04:13 - I'm going to count y's uh to the
04:17 - height and that's going to go those are
04:20 - going to go from 0 comma
04:23 - y to width comma
04:27 - Y and that should give us our uh grid
04:31 - oops that should give us our
04:35 - grid okay so now we have our grid we can
04:37 - see the
04:39 - lines of our grid on the
04:43 - screen so now let's add a player now I
04:46 - have my Sprites here and I started out
04:48 - by just defining a really basic uh
04:50 - player
04:51 - Sprite it's just a square that's the
04:54 - size of one of the
04:56 - tiles and I just tell it an X and A y
04:59 - for where I want it to
05:01 - spawn okay and that's going to look like
05:04 - this we'll do that in the new here we're
05:07 - just going to say uh oops self.
05:11 - player player we pass it a copy of the
05:15 - game and we pass it the X and the Y
05:16 - where we want it to spawn now these are
05:18 - not the X and Y pixel coordinates these
05:20 - are the grid coordinates so which Square
05:22 - so the upper left hand Square will be 0
05:24 - 0 so if I put 0 0 here 0 0 here then the
05:29 - player will spawn up there in the upper
05:32 - leftand corner and so I can just tell it
05:34 - what Square I want it to spawn in so
05:37 - let's move
05:39 - him out a bit so he's out here in the
05:42 - middle so we're going to that's going to
05:43 - be our spawn
05:44 - spot and so you can see I tell it this
05:49 - is self.x and self.y are keeping track
05:51 - of what grid coordinate we are on and
05:53 - then in our update we just put our
05:55 - rectangle so we draw our rectangle at
05:58 - the pixel
06:01 - that matches that so we're M multiplying
06:02 - the x times tile size so if we're on
06:04 - square number three that's 3 * 32 and
06:08 - that's where the upper left hand corner
06:09 - of the square will actually be drawn in
06:12 - pixel
06:14 - coordinates so let's talk about how we
06:16 - would move our player around so we're
06:18 - going to use the four arrow keys and
06:21 - we're going to
06:22 - do four directional movement and in fact
06:25 - we're just going to do um steps right
06:28 - now we're going to say you you you have
06:29 - to stand in a square so if you press up
06:31 - you will move one square up so like a
06:35 - like a chest piece on the
06:37 - chessboard and we can do that very
06:39 - easily by we're going to define a method
06:43 - called move okay for the player and
06:46 - that's going to let you move in two
06:47 - different directions X or Y okay so the
06:51 - DX and the
06:53 - Dy so how much should X Change how much
06:55 - should y change now normally those will
06:57 - be either a a positive one or a negative
07:00 - 1 but I'm putting explicitly right here
07:03 - that DX will be Zer and Dy will be Zer
07:06 - by default so if I call the move command
07:09 - and I tell it to move X by one but I
07:11 - don't tell it the Y then the Y is going
07:13 - to be Zero by default okay and so what
07:17 - we want to do is we just want to say
07:19 - self.x plus equals
07:21 - DX and self.y plus equals Dy so we just
07:28 - move our x coordinate in our
07:29 - y-coordinate by the amount we were
07:31 - supposed to
07:32 - change right and then we can just map
07:34 - those to the keys so over here in our
07:37 - events section we're going to add some
07:40 - more key down
07:42 - events so if the key
07:46 - was pg. K
07:49 - left then our we should just tell our
07:53 - Player move DX =
07:57 - -1 right and D1 y we can leave out
08:00 - because it'll be zero so left will make
08:03 - the X Change by
08:04 - one uh negative 1 sorry and so we can
08:08 - just uh duplicate this a couple more
08:10 - times to get the other directions right
08:14 - right is going to be X by positive
08:17 - 1 up we'll be changing the Dy by
08:22 - negative 1
08:23 - and down we'll be changing the
08:27 - Dy by positive one
08:30 - and that's all there is to it now our
08:32 - arrow keys let us move
08:34 - around but you do have to press the key
08:37 - over and over again right so a quick and
08:40 - easy way to let you move by holding the
08:45 - key down would be just to do the uh to
08:49 - use the key keyboard repeat function so
08:52 - here in the init section we're just
08:54 - going to
08:55 - set the uh repeat rate and you do that
09:00 - by just saying uh how long should it
09:02 - wait before it starts repeating so we're
09:03 - gonna say If We Hold It Down for half a
09:06 - second right 500 milliseconds then start
09:09 - repeating and repeat every tenth of a
09:12 - second and what that will let us do is
09:14 - if I hold down the right arrow
09:16 - key I can just step right along by
09:20 - holding the arrow key
09:21 - down okay and we're going to do some
09:24 - more advanced movement later on in this
09:27 - project this is just our very simple
09:29 - first steps just to get something on the
09:31 - screen moving so don't worry if you
09:33 - start to think this is kind of
09:37 - limiting okay let's just add one more
09:40 - Sprite now for our wall and our wall is
09:44 - just going to also be a
09:52 - square right so is a square it's going
09:54 - to be the size of one square and if we
09:57 - want a long wall we just have a row of
09:59 - those uh all next to each other lined
10:03 - up uh so what we're going to do is we're
10:06 - going to pass it of course a copy of the
10:08 - game and also an X and A Y for where we
10:11 - want that wall to
10:14 - spawn we're going to make it a member of
10:17 - the all Sprites group so it gets drawn
10:20 - and we're going to make it a member of
10:22 - The Walls Group which we're going to
10:24 - create to hold all of the wall
10:28 - objects
10:31 - so we'll just initialize it with those
10:36 - two groups oops
10:39 - self
10:47 - groups and I'm just going to
10:50 - make again just like we did in the
10:54 - player we're just going to make a
10:55 - surface of tile size by tile size
11:01 - and I'm going to fill that with
11:05 - green that'll just be the color of my
11:07 - walls and
11:14 - we to find our
11:17 - rectangle and we just need to set
11:21 - the X and Y just like we did in the
11:27 - player and we're going to set the
11:30 - rectangle to that location as
11:37 - well okay so there's our wall simple
11:41 - wall and over in
11:45 - our game we just need to make sure that
11:48 - we
11:49 - have created a Walls
11:52 - Group to hold them
11:55 - all now to spawn a wall all we really
11:58 - need to to do is just make
12:01 - a is call a wall and give it two
12:04 - coordinates to tell it where to be so
12:06 - I'm actually going to spawn a few of
12:07 - them so let's just Spawn
12:11 - from 10 to 20 say uh I'm just going to
12:15 - spawn a long wall right here so I just
12:19 - create a wall
12:21 - object at that X and with a Y of say
12:26 - five and that should create
12:29 - oops if I type the word
12:34 - in okay and there's our
12:37 - wall okay so we have 10 10 squares
12:40 - filled in so now I have everything on my
12:43 - screen to get started talking about how
12:46 - my map is going to work and in the next
12:49 - video we will add collisions and talk
12:53 - about how we can add more walls and add
12:56 - them in a more intelligent way
13:00 - thanks for watching please press that
13:01 - like button below and subscribe for the
13:04 - next video see you next
13:17 - time

Cleaned transcript:

welcome back to game development with pame this is going to be part one of our series on tile based games in this video we'll be getting started with our project talking about what we're going to be doing and what is a tilebased game so tile based games are really common Dungeon Crawlers Legend of Zelda style RPGs uh strategy games even sidescrolling Platformers like Mega Man are all tilebased games sometimes the tiles are obvious like in Civilization uh but sometimes they're not even visible at all but what we mean or what game designers mean when they're talking about tile based games is that we're using a grid of tiles to lay out our game World the graphics the map the movement of the Sprites everything is based on an underlying grid and there's a lot of advantages to this it helps in organizing the data in your code it helps in designing the graphics of your level levels and you'll see how it all goes together in this series we're going to start out with the very simplest possible grid of tiles and slowly build up to more advanced features like Maps level design fancier graphics and so on so for this project we're going to start out with a basic game Loop structure and you can click on the link on the screen if you need a refresher in how we created this basic structure uh in the previous project and over here in the settings the main thing we're going to be concerned with is this tile size variable this is how big the tiles in our map grid are going to be and a lot of times that can vary quite a bit um typically you might find them in powers of two 16 or 32 or 64 are popular sizes uh but really it all boils down to your preferences and and the art that you have uh what size the artist has created the tiles in so I'm going to use a tile size of 32 pixels so every Square on the grid will be 32 and I've chosen a width and a height here for my game window that are values that are evenly divisible by uh 64 or 32 or 16 um so that I will have a whole number of squares across and down and no no partial squares showing on the screen and finally I have these two variables here grid width and grid height that are just going to be the width divided by the tile size so in the since we have 32 here uh grid width will be 32 and grid height will be 24 so that's how many squares fit uh on my screen it'll be 32 squares by 24 squares so the first thing let's do while we're getting set up is let's just draw that grid on the screen so we can visualize our squares and know what our grid looks like uh as we're getting everything working um so I'm I'm going to add here to the def draw here I'm going to say draw grid and then I'm going to Define that and to draw the grid we're just going to want to make a couple of uh Loops so I'm going to make two gri two Loops one Loop to draw the horizontal lines and one Loop to draw the vertical lines so if I count X's from zero all the way to the width of the screen and the increment I want to count by is tile size right I want to count by 32s so I'm going to count from 0er to 1024 by 32s and each place I will draw a line and that line for the pame do draw line command we just tell it the screen I'm going to use this light gray color and the end points of the line will be X comma 0 and x comma height so I want to draw a line at whatever X I'm at going from the top of the screen down to the bottom and that will draw my vertical lines and I'm just going to do the same thing for my vertical lines I'm just going to draw I'm going to count y's uh to the height and that's going to go those are going to go from 0 comma y to width comma Y and that should give us our uh grid oops that should give us our grid okay so now we have our grid we can see the lines of our grid on the screen so now let's add a player now I have my Sprites here and I started out by just defining a really basic uh player Sprite it's just a square that's the size of one of the tiles and I just tell it an X and A y for where I want it to spawn okay and that's going to look like this we'll do that in the new here we're just going to say uh oops self. player player we pass it a copy of the game and we pass it the X and the Y where we want it to spawn now these are not the X and Y pixel coordinates these are the grid coordinates so which Square so the upper left hand Square will be 0 0 so if I put 0 0 here 0 0 here then the player will spawn up there in the upper leftand corner and so I can just tell it what Square I want it to spawn in so let's move him out a bit so he's out here in the middle so we're going to that's going to be our spawn spot and so you can see I tell it this is self.x and self.y are keeping track of what grid coordinate we are on and then in our update we just put our rectangle so we draw our rectangle at the pixel that matches that so we're M multiplying the x times tile size so if we're on square number three that's 3 * 32 and that's where the upper left hand corner of the square will actually be drawn in pixel coordinates so let's talk about how we would move our player around so we're going to use the four arrow keys and we're going to do four directional movement and in fact we're just going to do um steps right now we're going to say you you you have to stand in a square so if you press up you will move one square up so like a like a chest piece on the chessboard and we can do that very easily by we're going to define a method called move okay for the player and that's going to let you move in two different directions X or Y okay so the DX and the Dy so how much should X Change how much should y change now normally those will be either a a positive one or a negative 1 but I'm putting explicitly right here that DX will be Zer and Dy will be Zer by default so if I call the move command and I tell it to move X by one but I don't tell it the Y then the Y is going to be Zero by default okay and so what we want to do is we just want to say self.x plus equals DX and self.y plus equals Dy so we just move our x coordinate in our ycoordinate by the amount we were supposed to change right and then we can just map those to the keys so over here in our events section we're going to add some more key down events so if the key was pg. K left then our we should just tell our Player move DX = 1 right and D1 y we can leave out because it'll be zero so left will make the X Change by one uh negative 1 sorry and so we can just uh duplicate this a couple more times to get the other directions right right is going to be X by positive 1 up we'll be changing the Dy by negative 1 and down we'll be changing the Dy by positive one and that's all there is to it now our arrow keys let us move around but you do have to press the key over and over again right so a quick and easy way to let you move by holding the key down would be just to do the uh to use the key keyboard repeat function so here in the init section we're just going to set the uh repeat rate and you do that by just saying uh how long should it wait before it starts repeating so we're gonna say If We Hold It Down for half a second right 500 milliseconds then start repeating and repeat every tenth of a second and what that will let us do is if I hold down the right arrow key I can just step right along by holding the arrow key down okay and we're going to do some more advanced movement later on in this project this is just our very simple first steps just to get something on the screen moving so don't worry if you start to think this is kind of limiting okay let's just add one more Sprite now for our wall and our wall is just going to also be a square right so is a square it's going to be the size of one square and if we want a long wall we just have a row of those uh all next to each other lined up uh so what we're going to do is we're going to pass it of course a copy of the game and also an X and A Y for where we want that wall to spawn we're going to make it a member of the all Sprites group so it gets drawn and we're going to make it a member of The Walls Group which we're going to create to hold all of the wall objects so we'll just initialize it with those two groups oops self groups and I'm just going to make again just like we did in the player we're just going to make a surface of tile size by tile size and I'm going to fill that with green that'll just be the color of my walls and we to find our rectangle and we just need to set the X and Y just like we did in the player and we're going to set the rectangle to that location as well okay so there's our wall simple wall and over in our game we just need to make sure that we have created a Walls Group to hold them all now to spawn a wall all we really need to to do is just make a is call a wall and give it two coordinates to tell it where to be so I'm actually going to spawn a few of them so let's just Spawn from 10 to 20 say uh I'm just going to spawn a long wall right here so I just create a wall object at that X and with a Y of say five and that should create oops if I type the word in okay and there's our wall okay so we have 10 10 squares filled in so now I have everything on my screen to get started talking about how my map is going to work and in the next video we will add collisions and talk about how we can add more walls and add them in a more intelligent way thanks for watching please press that like button below and subscribe for the next video see you next time
