With timestamps:

00:00 - welcome back to circle jump this is part
00:01 - three we're gonna start adding some
00:04 - behavior to these circles different
00:06 - modes that will increase the difficulty
00:09 - the first one we're going to do is a
00:11 - limited circle one that's going to run
00:13 - out and not let you orbit it over and
00:16 - over again you've got to jump off of it
00:17 - before the time runs out
00:19 - let's start by adding a label node to
00:22 - the circle that's going to show our
00:25 - remaining number of orbits on the circle
00:28 - so we'll go over here I'm going to put a
00:31 - little bit of text in there so we can
00:33 - see it we're going to set the font and
00:37 - we're gonna make a new dynamic font and
00:39 - the font we want is in the assets folder
00:43 - and the size we're gonna use 64 all
00:55 - right we'll set this to make sure
00:57 - everything is centered and we'll set the
01:00 - layout to Center okay in the script here
01:04 - we're going to add an enum for our modes
01:08 - and I'm gonna I like to do my enums and
01:14 - all caps they're constants essentially
01:16 - so to start with right now we have
01:19 - static and limited static is the ones
01:21 - we've already made where the ring just
01:23 - sits there but if the circle has a
01:26 - limited number of orbits that's what
01:28 - limited means and now the so that means
01:34 - we're gonna need some more variables we
01:36 - need a mode variable to track what this
01:39 - circles mode is and we can even make it
01:43 - start out being static by default and
01:47 - then we're going to need a num orbits
01:52 - that's how many orbits does the does
01:56 - this circle allow and then also current
02:00 - orbits is how many you've completed all
02:06 - right and when current orbits is equal
02:08 - to num orbits you are done
02:12 - and then we're also going to mark the
02:15 - orbit start position because we want to
02:19 - be able to count when we've gone a full
02:21 - circle so that's basically going to be
02:22 - where on the circle you started and
02:25 - every time we reach that point that's
02:27 - one orbit complete okay so let's add a
02:30 - function here for setting our mode we'll
02:35 - pass it the node we want to set our mode
02:38 - to and then depending on which mode that
02:41 - is we will do different things so if we
02:44 - have static I want to hide the label if
02:51 - we're on limited I want to show the
02:56 - label but I also want to set its text
02:58 - we're going to set its text to current
03:04 - orbits right which is we have started
03:07 - with three we have three remaining right
03:08 - that will tick down to two and then one
03:10 - and so on make sure we show the label it
03:14 - was hidden and that's all we need there
03:17 - right now and we should probably set
03:20 - that mode in the init now these modes
03:25 - are gonna get more and more difficult so
03:29 - these are things we're gonna want to
03:30 - show later in the game right when you
03:32 - first start you're probably gonna only
03:33 - have static rings and then when you get
03:36 - to higher levels some of these limited
03:39 - ones will start showing up
03:40 - so the circle doesn't need to know
03:42 - anything about what level it is or
03:44 - anything it just needs to be told
03:46 - you should be mode whatever
03:49 - so we'll DIF will default it to static
03:55 - but will let you set it to something
03:57 - else if you want and actually I'm gonna
03:58 - default it to limited for this test
04:03 - because we want to test out the limited
04:05 - ring if we have that then we will set
04:11 - mode will call set mode on there
04:17 - all right so we're gonna want to set
04:20 - that orbits start position when we're
04:24 - captured now right now that's getting
04:27 - set right here when the jumper gets
04:30 - captured it's setting the pivot rotation
04:33 - and I think I was doing this to avoid
04:41 - having the ring have a reference to the
04:43 - jumper but I think that it's probably
04:46 - going to be necessary anyway for some
04:49 - other stuff we're going to do so we're
04:52 - gonna take this line out of here it's
04:57 - gonna cut that and then in the circle
05:01 - we're gonna add a variable to track the
05:07 - jumper that's attached to this to the
05:10 - circle that way when we capture we can
05:14 - set that right so we can set the pivot
05:18 - change this to a dollar sign notation
05:21 - pivot rotation is gonna be our position
05:25 - all right same thing actually we wanted
05:28 - the opposite we're going in the opposite
05:30 - direction
05:31 - target position minus position dot angle
05:37 - but then we need to know what target is
05:41 - or jumper is I should say but that needs
05:47 - to be set when we capture it so when we
05:51 - capture it we're going to have to pass
05:53 - it a target and we'll assign jumper
05:55 - let's target so in the main when we say
06:02 - object capture we pass it the player and
06:05 - now the circle gets the jumpers position
06:11 - it can set the orbit start equal to that
06:16 - position that we just set so now we know
06:23 - where the orbit start rotation is or
06:26 - start position and we can start
06:29 - subtracting one from it ever
06:31 - time we complete a full circuit so we
06:34 - know how to do that in process if if
06:36 - we're in limited mode right we don't we
06:39 - only care if we're in limited mode do we
06:45 - want to subtract and there needs to be a
06:48 - jumper so if we have a jumper on the
06:52 - ring on the circle and it's in limited
06:55 - mode then we want to check check our
07:00 - orbit so I'm going to make a function
07:01 - for that what this one does is it's
07:07 - going to see if we've gone on a full
07:09 - circle and we could be going in
07:12 - clockwise or counterclockwise so let's
07:14 - just take the absolute value here pivot
07:17 - rotation - orbit start if that's greater
07:23 - than 2 pi 2 pi is a full circle then we
07:29 - want to take current orbits and subtract
07:32 - by one update the label text and then we
07:39 - want to update that orbit position so
07:42 - let's do this again alright so let's try
07:47 - it out let's just go ahead and set num
07:48 - orbits equal to like 3 to start with and
07:52 - then current orbits should be set equal
07:54 - to that when we start in limited mode
08:01 - and let's just try that out and see how
08:04 - it looks all right we got three two one
08:09 - we jump over this one the start point
08:11 - was there to one it's gonna go to zero
08:17 - because we didn't tell it not to but
08:19 - yeah now it's it's counting down and
08:21 - it's counting a full rotation like we
08:24 - wanted okay so when the orbits run out
08:27 - so here when we got to zero then we're
08:33 - gonna say if current orbits then we want
08:38 - to tell the jumper to die which we
08:42 - haven't told it how to do that yet well
08:46 - remove our jumper reference and we will
08:50 - call the implode so that'll be fine
08:54 - except now we're going to get an error
08:55 - message on jumper dot die so jumper dot
09:00 - die is going to be pretty simple to
09:05 - start with right now all we want to do
09:07 - is Q free the it's a target equal null
09:13 - and Q free and then while we're at it
09:21 - since we're over here something we
09:24 - didn't do on the jumper yet was
09:26 - connected visibility notifier screen
09:29 - exited on the visibility notifier should
09:33 - also call die all right let's see what
09:40 - happens now when we run out of orbits
09:47 - yeah there we go the circle disappears
09:49 - so does the player something else I
09:53 - wanted to do with the limited mode was
09:54 - draw a visual indication that your that
10:00 - your orbits are running out that the
10:01 - circle is filling up let's say and so as
10:06 - a first pass at that what I thought I
10:08 - would do was used from the docks we can
10:11 - steal this draw circle arc poly method
10:15 - which draws a pie shape and we can
10:17 - animate that going around and filling up
10:20 - so I'm going to steal that and paste
10:23 - that right in here in the circle script
10:26 - so that we can use that the only thing
10:29 - we have to change is the example and the
10:30 - dots is written to work with degrees and
10:32 - we are using radians so we need to
10:35 - change this to not convert and 90
10:39 - becomes PI over 2 okay so now our circle
10:43 - arc poly function is ready we need to
10:47 - write our draw method right which will
10:50 - be called to do the drawing now since
10:53 - draw will get called once in ready and
10:55 - then later whenever you call update we
10:57 - need to make sure there
10:58 - is a jumper or we don't try and draw
11:01 - anything and then we need to figure out
11:03 - our radius what radius we want to draw
11:05 - this circle PI piece at and I'm going to
11:09 - use the radius of the circle itself with
11:13 - some padding which we'll play around
11:17 - with I'm just gonna use 50 as a nice
11:20 - round number right now divided by the
11:22 - num orbits and then we're going to I
11:27 - want that to grow as the number of
11:30 - orbits decreases so we're also gonna
11:33 - just take note the difference in orbits
11:36 - minus current orbits and multiplied by
11:39 - that and that'll make it grow then we
11:43 - can call our draw circle arc Poly
11:46 - function and we want it centered so
11:49 - we're gonna do vector 2.0 the radius
11:53 - again we probably need to might need a
11:55 - little padding here to adjust it so
11:57 - that's what we're gonna use to tweak
11:59 - that we want the arc to start at the
12:02 - orbit start we want it to end I'll go to
12:09 - the next line here at the pivot rotation
12:12 - and we want it to be the color we want
12:15 - is for now I'm just gonna do red we're
12:21 - going to come back and be more
12:22 - intelligent about how we do colors in a
12:26 - later part so now this will draw that
12:29 - circle and we just need to call update
12:33 - in our process function to make it show
12:36 - so let's see what that looks like okay
12:39 - so there's my circle you can see it
12:42 - filling up and growing but you can also
12:43 - see that it's off right it's 90 degrees
12:46 - off and that's because we need to add
12:51 - let's apply over to to that and we need
12:54 - to add plus PI over 2 to that so that
13:00 - it'll match where our actual circle is
13:03 - and there you go you see it filling up
13:05 - jump up to this one filling up and then
13:08 - growing as it starts to fill up that's
13:11 - pretty good
13:12 - like how that looks we got a little bug
13:15 - there looks like our screen exited
13:18 - killed our player at the same time as we
13:21 - hit the circle so I think what we could
13:25 - do to fix that is go over here and if
13:30 - there's no target and you go off the
13:33 - screen then die because that way if
13:37 - you're on a circle that's near the edge
13:40 - you could sort of go off as you go
13:42 - around it I don't want that to kill you
13:43 - so that should fix that
13:52 - you

Cleaned transcript:

welcome back to circle jump this is part three we're gonna start adding some behavior to these circles different modes that will increase the difficulty the first one we're going to do is a limited circle one that's going to run out and not let you orbit it over and over again you've got to jump off of it before the time runs out let's start by adding a label node to the circle that's going to show our remaining number of orbits on the circle so we'll go over here I'm going to put a little bit of text in there so we can see it we're going to set the font and we're gonna make a new dynamic font and the font we want is in the assets folder and the size we're gonna use 64 all right we'll set this to make sure everything is centered and we'll set the layout to Center okay in the script here we're going to add an enum for our modes and I'm gonna I like to do my enums and all caps they're constants essentially so to start with right now we have static and limited static is the ones we've already made where the ring just sits there but if the circle has a limited number of orbits that's what limited means and now the so that means we're gonna need some more variables we need a mode variable to track what this circles mode is and we can even make it start out being static by default and then we're going to need a num orbits that's how many orbits does the does this circle allow and then also current orbits is how many you've completed all right and when current orbits is equal to num orbits you are done and then we're also going to mark the orbit start position because we want to be able to count when we've gone a full circle so that's basically going to be where on the circle you started and every time we reach that point that's one orbit complete okay so let's add a function here for setting our mode we'll pass it the node we want to set our mode to and then depending on which mode that is we will do different things so if we have static I want to hide the label if we're on limited I want to show the label but I also want to set its text we're going to set its text to current orbits right which is we have started with three we have three remaining right that will tick down to two and then one and so on make sure we show the label it was hidden and that's all we need there right now and we should probably set that mode in the init now these modes are gonna get more and more difficult so these are things we're gonna want to show later in the game right when you first start you're probably gonna only have static rings and then when you get to higher levels some of these limited ones will start showing up so the circle doesn't need to know anything about what level it is or anything it just needs to be told you should be mode whatever so we'll DIF will default it to static but will let you set it to something else if you want and actually I'm gonna default it to limited for this test because we want to test out the limited ring if we have that then we will set mode will call set mode on there all right so we're gonna want to set that orbits start position when we're captured now right now that's getting set right here when the jumper gets captured it's setting the pivot rotation and I think I was doing this to avoid having the ring have a reference to the jumper but I think that it's probably going to be necessary anyway for some other stuff we're going to do so we're gonna take this line out of here it's gonna cut that and then in the circle we're gonna add a variable to track the jumper that's attached to this to the circle that way when we capture we can set that right so we can set the pivot change this to a dollar sign notation pivot rotation is gonna be our position all right same thing actually we wanted the opposite we're going in the opposite direction target position minus position dot angle but then we need to know what target is or jumper is I should say but that needs to be set when we capture it so when we capture it we're going to have to pass it a target and we'll assign jumper let's target so in the main when we say object capture we pass it the player and now the circle gets the jumpers position it can set the orbit start equal to that position that we just set so now we know where the orbit start rotation is or start position and we can start subtracting one from it ever time we complete a full circuit so we know how to do that in process if if we're in limited mode right we don't we only care if we're in limited mode do we want to subtract and there needs to be a jumper so if we have a jumper on the ring on the circle and it's in limited mode then we want to check check our orbit so I'm going to make a function for that what this one does is it's going to see if we've gone on a full circle and we could be going in clockwise or counterclockwise so let's just take the absolute value here pivot rotation orbit start if that's greater than 2 pi 2 pi is a full circle then we want to take current orbits and subtract by one update the label text and then we want to update that orbit position so let's do this again alright so let's try it out let's just go ahead and set num orbits equal to like 3 to start with and then current orbits should be set equal to that when we start in limited mode and let's just try that out and see how it looks all right we got three two one we jump over this one the start point was there to one it's gonna go to zero because we didn't tell it not to but yeah now it's it's counting down and it's counting a full rotation like we wanted okay so when the orbits run out so here when we got to zero then we're gonna say if current orbits then we want to tell the jumper to die which we haven't told it how to do that yet well remove our jumper reference and we will call the implode so that'll be fine except now we're going to get an error message on jumper dot die so jumper dot die is going to be pretty simple to start with right now all we want to do is Q free the it's a target equal null and Q free and then while we're at it since we're over here something we didn't do on the jumper yet was connected visibility notifier screen exited on the visibility notifier should also call die all right let's see what happens now when we run out of orbits yeah there we go the circle disappears so does the player something else I wanted to do with the limited mode was draw a visual indication that your that your orbits are running out that the circle is filling up let's say and so as a first pass at that what I thought I would do was used from the docks we can steal this draw circle arc poly method which draws a pie shape and we can animate that going around and filling up so I'm going to steal that and paste that right in here in the circle script so that we can use that the only thing we have to change is the example and the dots is written to work with degrees and we are using radians so we need to change this to not convert and 90 becomes PI over 2 okay so now our circle arc poly function is ready we need to write our draw method right which will be called to do the drawing now since draw will get called once in ready and then later whenever you call update we need to make sure there is a jumper or we don't try and draw anything and then we need to figure out our radius what radius we want to draw this circle PI piece at and I'm going to use the radius of the circle itself with some padding which we'll play around with I'm just gonna use 50 as a nice round number right now divided by the num orbits and then we're going to I want that to grow as the number of orbits decreases so we're also gonna just take note the difference in orbits minus current orbits and multiplied by that and that'll make it grow then we can call our draw circle arc Poly function and we want it centered so we're gonna do vector 2.0 the radius again we probably need to might need a little padding here to adjust it so that's what we're gonna use to tweak that we want the arc to start at the orbit start we want it to end I'll go to the next line here at the pivot rotation and we want it to be the color we want is for now I'm just gonna do red we're going to come back and be more intelligent about how we do colors in a later part so now this will draw that circle and we just need to call update in our process function to make it show so let's see what that looks like okay so there's my circle you can see it filling up and growing but you can also see that it's off right it's 90 degrees off and that's because we need to add let's apply over to to that and we need to add plus PI over 2 to that so that it'll match where our actual circle is and there you go you see it filling up jump up to this one filling up and then growing as it starts to fill up that's pretty good like how that looks we got a little bug there looks like our screen exited killed our player at the same time as we hit the circle so I think what we could do to fix that is go over here and if there's no target and you go off the screen then die because that way if you're on a circle that's near the edge you could sort of go off as you go around it I don't want that to kill you so that should fix that you
