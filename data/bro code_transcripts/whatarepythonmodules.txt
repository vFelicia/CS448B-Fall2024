00:00 - Hello friends it's me again today I'm
00:02 - going to explain modules a module is
00:04 - just a python file containing code you
00:07 - want to include in your program you use
00:09 - the import keyword to include a module
00:11 - you can use built-in modules or create
00:13 - your own sometimes it's useful to break
00:16 - up a large program into reusable
00:18 - separate files for a list of all the
00:20 - modules found within the standard python
00:22 - Library you can use the help function
00:24 - pass in the word modules and then we
00:26 - would need to print this
00:32 - here are many of the different modules
00:34 - available to you a few you may recognize
00:36 - would be math string time one of my
00:39 - favorite names of a module is the pickle
00:41 - module unfortunately it doesn't have
00:43 - anything to do with Pickles it's used
00:45 - for serialization to list all of the
00:47 - different variables and functions found
00:48 - within a module you can place that name
00:50 - of the module within the help function
00:54 - for example with the math module here
00:56 - are a few different variables we would
00:58 - have access to and a few different
00:59 - functions
01:02 - to include a module we would type import
01:04 - the name of the module for example math
01:07 - I now have access to everything found
01:09 - within the math module including those
01:11 - variables and functions to access those
01:13 - variables and functions I would normally
01:15 - type the name of the module dot the name
01:18 - of the variable or function such as Pi
01:21 - then let's print this
01:23 - PI from the math module
01:26 - is 3.14 and some change another way to
01:29 - import is to type import the name of the
01:33 - module as you can give your module a
01:36 - nickname an alias whatever you think of
01:38 - such as m m short for math we would no
01:42 - longer refer to this module as math we
01:44 - would refer to it as our Alias m
01:50 - using an alias would reduce some of the
01:52 - typing you have to use if you have a
01:54 - very long module name another way to
01:56 - import is to use from the name of the
01:58 - module import something specific Pi for
02:02 - instance
02:03 - you would no longer need the module name
02:07 - from math import Pi Pi would be included
02:10 - within our namespace however I tend to
02:13 - not use from import as much just because
02:15 - it's possible there could be name
02:16 - conflicts here's an example let's say
02:19 - from math import e e is an exponential
02:23 - constant
02:25 - e is 2.71 what if I was to create a
02:29 - program where we have four variables
02:31 - named a b c d a equals one b equals two
02:36 - C equals three D equals four then I'm
02:40 - going to print
02:41 - E from the math module
02:44 - to the power of a
02:47 - that would give me 2.71
02:49 - then let's do this with b c and d
02:53 - e to the power of b e to the power of c
02:56 - e to the power of d
02:58 - here are the results let's say we have a
03:01 - different variable e
03:03 - e will be five
03:05 - then I will print
03:08 - e to the power of E
03:11 - we have imported E from the math module
03:13 - when we have declared all of these
03:15 - variables I have unintentionally
03:17 - reassigned E from the math module
03:19 - without realizing it
03:21 - all my results are now different and
03:23 - it's possible you may not realize it I
03:25 - like to be more explicit I'm going to
03:28 - import math if I'm using a variable or
03:30 - function from a module I much prefer to
03:33 - prefix that variable name or function
03:35 - with the name of the module in which
03:37 - it's from math.e to the power of a to
03:41 - the power of B to the power of C to the
03:43 - power of D math dot e to the power of
03:47 - our variable e
03:49 - and these results are to be expected Now
03:52 - to create a module
03:54 - what we're going to do is right click on
03:56 - our project folder go to new python file
03:59 - think of a module name maybe example
04:03 - then click python file
04:06 - we now have two tabs
04:07 - Main and example declare whatever you
04:10 - would like within this module let's
04:12 - create our own variable Pi Pi equals
04:15 - 3.14159 then a few functions let's
04:19 - create a function to square an argument
04:21 - that's passed in Define Square we will
04:25 - accept an argument which we will name X
04:28 - then return x to the power of 2.
04:32 - let's define a cube function we will
04:35 - accept one argument then return x to the
04:39 - power of three
04:41 - maybe a circumference function
04:43 - Define circumference
04:45 - we will accept a radius
04:48 - then return 2 times pi times radius then
04:54 - an area function to calculate the area
04:56 - of a circle
04:58 - we will accept a radius as an argument
05:01 - then return pi times radius to the power
05:05 - of 2.
05:07 - all right here is our example module
05:10 - within our main Python program let's
05:12 - import the name of our module which we
05:15 - named example we now have access to
05:17 - everything within this module
05:20 - I'm going to declare a variable result
05:22 - and set it to the name of my module dot
05:26 - Pi then I will print the result
05:30 - which is 3.14159
05:34 - let's utilize the square function result
05:36 - equals example dot Square let's Square
05:41 - three
05:43 - which is nine
05:45 - let's use the cube function
05:49 - that would be 27
05:51 - circumference
05:56 - that would give me 18.8
06:00 - then area
06:03 - that would be 28.2
06:05 - that's how to create your own module it
06:08 - can be useful at times to separate your
06:09 - program into individual files alright
06:12 - everybody in conclusion a module is just
06:14 - a file containing code you want to
06:16 - include in your program you use import
06:18 - to include a module you can use built-in
06:21 - modules or create your own if you do
06:23 - need a list of the modules available to
06:24 - you again you can use the help function
06:26 - then pass in the word modules and well
06:29 - everybody that's how to get started with
06:30 - modules in Python