00:02 - oh yeah
00:03 - the return keyword now the return
00:05 - keyword returns data back to the place
00:07 - where a method is invoked
00:09 - so let's create a method to multiply two
00:12 - numbers together something simple
00:13 - so when we declare a method we'll have
00:15 - to make sure that we do it outside of
00:17 - our main method
00:18 - so right here so we will say static
00:21 - void and we will name this method
00:24 - multiply and we'll need to pass
00:27 - in two numbers as arguments let's say
00:30 - that the data type will be double
00:32 - double x and double y
00:35 - okay now we would like to multiply these
00:38 - two numbers together
00:40 - and we will store them within double
00:42 - variable z
00:43 - double z equals x times y
00:47 - now to return data back to the place
00:49 - where it's invoked
00:50 - we can use this return keyword and what
00:53 - kind of data would we like to return
00:55 - let's return whatever z is now there's
00:57 - one change that we need to make
00:59 - we need to replace this void keyword
01:02 - with the data type
01:03 - of what we're returning exactly so since
01:06 - we're returning a double
01:07 - we'll change void to double if you're
01:10 - not returning anything
01:11 - you can just keep that keyword as void
01:13 - now we can use this multiply method
01:15 - to well multiply two numbers together so
01:17 - let's write a program where we will ask
01:19 - a user for some user input
01:21 - multiply two numbers together then
01:23 - return the result and display it
01:25 - so let's accept some user input and
01:27 - first we should probably declare the
01:28 - variables that we'll need
01:30 - double x double y and
01:33 - double let's call this result and we
01:35 - will ask the user to enter
01:37 - in number one
01:42 - and then assign x equal and we'll need
01:45 - to convert the user's input to
01:47 - a double because it's always a string
01:49 - when we accept user input
01:51 - x equals convert dot
01:54 - to double
01:58 - then out of side of parenthesis within
02:00 - the parenthesis console
02:01 - dot read line
02:05 - and we'll do the same thing for variable
02:07 - y
02:08 - enter in number two and then change
02:11 - x to y now if we need to assign
02:15 - results a value we can use this multiply
02:18 - method
02:19 - so type multiply add a set of
02:21 - parentheses to invoke it
02:22 - but we'll need to pass two matching
02:24 - arguments because we have
02:26 - two parameters set up we need to pass in
02:29 - two
02:29 - double values or variables so we will
02:32 - pass
02:32 - x and y as arguments to this method
02:35 - multiply
02:36 - so this return keyword will return
02:39 - whatever z
02:40 - is back to the spot in where this method
02:42 - is invoked
02:43 - and we will store the result within this
02:45 - variable named result
02:47 - and then we should probably display it
02:49 - let's display
02:51 - result and well that's it let's try it
02:54 - enter in number one have you always
02:57 - wondered what
02:58 - pi times 420 is well we're about to find
03:01 - out
03:01 - it is 1 318
03:05 - so yeah that is the return keyword it
03:06 - returns data back to the place where a
03:08 - method is invoked
03:10 - and if you would like you can actually
03:11 - shorten this even further we don't
03:13 - necessarily need to
03:14 - store the result within you know a new
03:16 - variable we could just say return
03:18 - x times y and that would work the same
03:21 - too
03:21 - that is the return keyword it returns
03:23 - data back to the place where
03:25 - a method is invoked if you're able to
03:27 - give this video a thumbs up
03:29 - leave a random comment down below and
03:30 - well yeah that's the return keyword
03:32 - in c sharp