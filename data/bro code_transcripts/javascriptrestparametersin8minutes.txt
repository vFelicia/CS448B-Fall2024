00:00 - hey hey hey what's going on everybody
00:01 - today I'm going to explain rest
00:02 - parameters in JavaScript rest parameters
00:05 - is a parameter prefixed with three dots
00:08 - they allow a function to work with a
00:10 - variable number of arguments by bundling
00:13 - them into an array it's very similar to
00:16 - the spread operator which we talked
00:17 - about in the last video the spread
00:19 - operator expands an array into separate
00:21 - elements rest parameters do the opposite
00:24 - they bundle separate elements into an
00:26 - array spread will spread an array into
00:28 - separate elements rest parameters will
00:30 - bundle separate elements into an array
00:32 - it effectively does the opposite how
00:34 - could rest parameters be useful let me
00:36 - give you an example say we have a bunch
00:38 - of different
00:40 - food const food one food one equals
00:44 - Pizza we'll create a few different food
00:48 - variables let's start with four food one
00:51 - food two food three food four we have
00:54 - pizza
00:57 - hamburger hot dog and sushi
01:00 - I'm going to create a function that uses
01:02 - rest parameters it's going to Output all
01:04 - food that I send
01:06 - it we'll pretend that we're opening a
01:09 - fridge imagine that all of this food is
01:11 - in a fridge open fridge fridge short for
01:16 - refrigerator to use rest parameters I
01:18 - need three dots we're going to stick all
01:20 - of this food into an array but what
01:22 - should the array name be let's say Foods
01:25 - that's descriptive then I'm going to
01:28 - console.log
01:30 - my array of
01:32 - foods now I'm going to call this
01:34 - function open fridge I will send this
01:38 - function a variable number of arguments
01:41 - this method is going to display an
01:43 - array we have food one
01:46 - pizza food 2 hamburger hamburger is also
01:51 - within our array food three hot dog food
01:55 - for sushi let me add one more food let's
01:59 - add Ramen food five will be
02:02 - Ramen then I will add food
02:07 - five you can see that I can send this
02:09 - function any number of arguments that I
02:11 - would like this function is designed to
02:13 - accept any number of arguments I could
02:16 - combine this function with the spread
02:17 - operator when I'm displaying my Foods
02:20 - array all of these elements are in an
02:21 - array but I could separate them back
02:23 - into separate Elements by using the
02:25 - spread operator which is the same three
02:28 - dots as the rest print parameters rest
02:30 - parameters are used as parameters the
02:33 - spread operator is used whenever you
02:34 - have an array or any sort of collection
02:36 - of something so now when I combine the
02:39 - rest parameters and the spread
02:41 - operator I can display all of my
02:43 - separate
02:44 - elements you can even use rest
02:46 - parameters to stick all elements within
02:49 - an array so this time I'm going to
02:51 - create a separate
02:52 - function to get
02:57 - food we will use rest parameters
03:00 - our array name will be Foods all we're
03:04 - going to do is return
03:07 - Foods take all of these separate
03:09 - elements stick them within an array then
03:12 - return that
03:13 - array so I'm going to create a new array
03:16 - const
03:18 - Foods
03:20 - equals call our get food method pass in
03:24 - a variable amount of arguments let's
03:26 - pass in food
03:27 - one food two
03:30 - food three food four and food
03:35 - five and then we got to display
03:38 - it
03:40 - console.log my array
03:42 - Foods so that's how the rest parameters
03:44 - can be used to combine elements and
03:46 - bundle them into an array then if you
03:49 - want you can return the array or do
03:50 - whatever you want with it let's go over
03:52 - a second example we'll create a method
03:55 - to sum a bunch of numbers together
03:58 - function sum
04:00 - sum we will use rest parameter so we can
04:03 - accept any number of arguments our array
04:06 - name will be numbers what we'll do
04:08 - within this method is have a result
04:11 - result equals z we'll keep track of the
04:15 - current sum within our result I'll
04:17 - create a for Loop to iterate over our
04:19 - array for every let number of
04:26 - numbers take our result Plus plus equals
04:31 - the current
04:32 - number and then we are going to return
04:35 - our
04:36 - result now we'll have const total equals
04:42 - invoke our sum function pass in as many
04:45 - numbers as we would
04:46 - like let's start with one oh then I
04:49 - should probably display the total
04:52 - console.log I'll use a template literal
04:55 - your total is I'll add a place
05:00 - holder
05:02 - total your total is $1 let's add a few
05:05 - more
05:06 - arguments two the total is now $3 three
05:12 - $6 four is 10 5 is
05:16 - 15 let's create a function to calculate
05:19 - an
05:20 - average let's copy our sum
05:25 - function let's name this function get
05:28 - Average all we have to do when returning
05:31 - our result to get the average is divide
05:33 - our result by the length of our numbers
05:36 - array divided by numbers. length
05:39 - property that will give you the average
05:42 - so now const total equals get the
05:47 - average maybe these are test scores one
05:50 - student got a 75 another got 100 another
05:54 - student has
05:56 - 85 90 and a 50
06:00 - let's
06:02 - console.log the
06:04 - total the average is
06:07 - 80 let's go over example three you can
06:10 - use the rest parameters to combine
06:12 - strings together we will create a
06:14 - function to combine
06:18 - strings we'll send in a title like Mis a
06:21 - first name such as
06:24 - SpongeBob a last
06:27 - name Square Pants
06:31 - he's the
06:33 - third we still need to make this
06:35 - function though but const full name
06:39 - equals whatever string is
06:42 - returned all right let's work on this
06:44 - function function combine string let's
06:49 - make this plural
06:54 - strings we need to use rest parameters
06:58 - let's name our array
07:00 - strings an easy way to do this is to
07:03 - return our array of strings and use the
07:07 - built-in join method to join all of the
07:10 - strings
07:11 - together but we'll add a space between
07:13 - each string all right we should now have
07:17 - a full name variable that's all of the
07:19 - strings combined so let's
07:22 - console.log our full
07:27 - name Mr sponge Bob SquarePants the third
07:31 - that's one way in which you could use
07:33 - the rest parameters to combine a bunch
07:35 - of strings into one such as if you're
07:37 - creating a full name all right everybody
07:40 - so those are rest parameters they allow
07:42 - a function to work with a variable
07:44 - number of arguments by bundling them
07:47 - into an array it's the opposite of the
07:49 - spread operator the spread operator
07:51 - expands an array into separate elements
07:53 - the rest parameters bundle separate
07:55 - elements into an array and well
07:58 - everybody those are rest parameters in
08:04 - JavaScript