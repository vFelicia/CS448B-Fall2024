00:00 - yeah it's me again and in today's video
00:02 - I need to explain what indexes are in
00:04 - MySQL and index is a type of data
00:07 - structure they are used to find values
00:09 - within a specific column more quickly
00:12 - it's technically a b tree data structure
00:14 - if you're familiar with what that is but
00:16 - if you don't don't worry about it MySQL
00:19 - normally performs searches sequentially
00:21 - through a column if I'm looking for some
00:24 - specific value just scan each value on
00:26 - the way down to see if those values
00:28 - match depending on what I'm looking for
00:29 - it doesn't really take much time if you
00:32 - have a small data set like I do but
00:34 - imagine if you have millions of
00:35 - transactions searching each transaction
00:38 - one by one is going to take a long time
00:40 - we can speed up that process by using an
00:43 - index by applying an index to a column
00:46 - selecting or searching takes less time
00:49 - however updating takes a lot more time
00:51 - so there's some pros and cons with using
00:54 - an index it really depends on the table
00:56 - if I'm working with a table of
00:58 - transactions transaction are being
01:00 - updated all the time people are
01:02 - constantly making purchases I don't
01:04 - think our transactions table would be a
01:06 - good candidate for an index we'll be
01:08 - doing a lot of updating but not a lot of
01:10 - searching however with our customers
01:12 - table I think our customers table could
01:14 - benefit we don't update our customers
01:16 - table very often only a new customer
01:19 - comes in every once in a while let's
01:21 - reduce the time it takes to search for a
01:23 - customer with creating an index how
01:26 - exactly do we want to find the customer
01:28 - believe it or not we do have an index
01:30 - with our customer ID already a customer
01:32 - may give you their last name and or
01:35 - first name let's create an index for
01:37 - these we'll start with last name though
01:39 - to show the current indexes of a table
01:41 - you would type show indexes from the
01:46 - name of the table
01:48 - here are the current indexes for our
01:51 - customers table we do have one already
01:53 - and that's for our customer ID that is
01:55 - the primary key we can search for a
01:57 - customer by their customer ID fairly
02:00 - quickly but not so much by their last
02:02 - name or their first name let's apply an
02:04 - index to those columns
02:06 - to create an index you would type create
02:09 - index
02:11 - then a name I will apply an index to our
02:14 - last name column I will name this index
02:16 - last name idx meaning index
02:20 - on the table customers in this case
02:25 - then list a column I will apply an index
02:28 - to our last name
02:30 - we will be doing a lot of searching by a
02:32 - customer's last name so I might as well
02:33 - apply an index
02:35 - so let's execute the statement let's
02:38 - show our indexes again
02:40 - show indexes from customers
02:45 - and here is our new index last name
02:48 - index it's applied to our column last
02:51 - name if I were to search for a customer
02:53 - by last name that process will be sped
02:56 - up now
02:57 - select all from
03:00 - customers where
03:02 - last name is equal to puff
03:08 - so my data set is already very small to
03:10 - begin with there's not going to be a
03:12 - noticeable difference in this example
03:13 - but if I'm working with a million
03:15 - customers using an index would be a lot
03:17 - faster if I were to search by first name
03:20 - instead where first name equals Poppy
03:23 - uh I spelled copy wrong well we don't
03:26 - have an index applied to our first name
03:28 - as of now it would be slower to search
03:30 - for a customer by their first name
03:32 - compared to their last name that first
03:34 - name doesn't have an index realistically
03:37 - we wouldn't search for a customer just
03:39 - by their first name we would do a last
03:41 - name or a last name and a first name
03:43 - that's where multi-column indexes come
03:46 - in
03:47 - to create a multi-column index you would
03:50 - type create
03:52 - index a unique name let's say last name
03:56 - first name
03:59 - idx
04:01 - on our table customers
04:04 - then list the columns in order the order
04:07 - is very important MySQL has what's known
04:10 - as a leftmost prefix with indexes so we
04:14 - will search by last name
04:17 - then first name
04:22 - let's execute the statement show our
04:24 - indexes show indexes from
04:28 - customers
04:30 - here's our last name first name index
04:33 - there's a sequence where telling MySQL
04:36 - to search by a last name however if
04:39 - there's also a first name include that
04:41 - too there needs to be a last name to
04:43 - utilize this index if I want to I can
04:45 - get rid of this last name index because
04:48 - our last name first name index would do
04:50 - the same thing we can search for a last
04:52 - name as well as a first name if we would
04:55 - like to drop an index you would type
04:57 - alter table the name of the table
05:01 - drop index the name of the index
05:04 - last name index
05:08 - then I'm going to go ahead and show
05:10 - indexes from customers
05:15 - and the last name index is gone
05:18 - now if I was to search for a customer
05:20 - select all from customers
05:24 - where if I were to search for a last
05:26 - name
05:30 - we would benefit by using this
05:31 - multi-column index if I looked for a
05:34 - last name
05:35 - and a first name
05:39 - we would also benefit there's a sequence
05:41 - we would search through any last names
05:43 - first because that's first in the
05:46 - sequence but if I was to search for just
05:48 - a first name we would not utilize this
05:51 - index
05:52 - well everybody that's an index it's a
05:54 - type of data structure that is used to
05:56 - find values more quickly within a
05:59 - specific column MySQL normally searches
06:02 - through a column sequentially the longer
06:04 - the column the more expensive the
06:06 - operation is going to be if you were to
06:08 - apply an index to a column searching and
06:11 - selecting a value takes less time but
06:13 - updating that table takes longer use it
06:15 - if you think a table is a good candidate
06:17 - where you don't update it very often and
06:19 - well yeah those are indexes in MySQL