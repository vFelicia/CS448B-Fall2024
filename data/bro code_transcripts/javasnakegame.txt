00:00 - what's going on everybody it's bro here
hope you're doing well and in this video
00:03 - I'm going to be teaching you guys how we
can create a game of snake using Java so
00:08 - let's get into it if you find this video
helpful please remember to Like comment
00:15 - and subscribe
your support will help keep this channel
00:19 - running alright guys so snake let's do
it let's create a new project go to file
00:25 - new Java project I'll call this project
named snake click finish
00:30 - don't create and then let's create three
separate classes within our source
00:35 - folder so file new class this class will
contain the main method I'll call this
00:40 - snake game and then check public static
void main finish and let's create
00:48 - another class file new class and this
will be called game frame it will extend
00:54 - the jframe class so game frame extends J
frame and we'll also need this import
01:03 - and let's create the last class file new
class and this will be called game panel
01:11 - and game panel will extends J panel and
it will also implements the action
01:19 - listener interface so we'll need to add
these imports as well and if you want
01:27 - you can add unimplemented methods at
this point but we'll return to this
01:30 - later so let's create the constructors
for these classes we don't need to do so
01:35 - within our snake game class because we
have the main method let's create the
01:39 - constructor for the game frame class so
game frame and then the same thing for
01:44 - our game panel class game panel then
let's go to our snake game class we're
01:51 - going to create an instance of our game
frame class so I'm going to show you
01:56 - guys a shortcut so in past lessons what
we've done is type in the name of the
02:00 - class such as game frame and then I
usually name this something such as
02:04 - frame equals new game frame so one
shortcut is if you don't plan on using
02:11 - this named
instance of another class like game
02:15 - frame you don't actually or necessarily
need this portion of this line of code
02:20 - so I don't really plan on using this
frame for anything else so what we could
02:25 - do is just say new game frame and this
will still create an instance of our
02:29 - game frame so from now on I'm going to
show you guys a few shortcuts here or
02:33 - there so let's head to our game frame
class and let's do something similar
02:38 - with our game panel like what we did
with our game frame so what we've done
02:43 - before is say something such as game
panel panel equals new game panel and
02:50 - then we would take this dot add panel so
instead what we could do is that I'm
02:58 - just going to copy this portion get rid
of this named instance and then place
03:04 - this dot add new game panel and this
would work the same so that's another
03:10 - shortcut you guys might be interested in
all right so let's finish constructing
03:14 - this frame so this and we'll add a title
so set title I'll call this snake this
03:25 - dot set default close operation jframe
dot exit on close this dot set resizable
03:36 - false this dot pack so if we add
components to AJ frame this PAC function
03:47 - is actually going to take our j frame
and fit it snugly around all of the
03:52 - components that we add to the frame and
this dot set visible true and if we want
04:03 - this window to appear in the middle of
our computer screen we can use this
04:07 - method this dot set location relative to
and then pass in no so right now we
04:15 - won't really see anything but this is
going to appear in the middle of our
04:19 - computer so that is it for the game
frame class we're going to finish
04:23 - everything else within the game panel
class we have our
04:27 - let's declare all of the methods that
we'll need so after our constructor
04:31 - let's create a method called start game
so public void start game and then
04:43 - another method called paint component so
public void paint component and then as
04:52 - a parameter we're going to set up
graphics G and then we'll have a draw
05:00 - method so public void draw and we will
also need a parameter graphics G all
05:14 - right just a few more so we'll need a
move function why is this giving us a
05:19 - problem okay so make sure to get those
imports as well so after the draw
05:24 - function let's add a move function so
public void move so with snake according
05:36 - to the rules at least I guess the snake
eats apples so that's basically how you
05:40 - score a point so we'll have a method
called public void check Apple I don't
05:50 - know why they called it Apple but okay
whatever and we'll want to check for any
05:55 - collisions so public void check
collisions and then we'll want a game
06:06 - over method so public void game over and
we're going to set up a parameter of
06:14 - graphics G then we have our action
performed method and lastly we're going
06:21 - to create an inner class so public class
my key adapter and this will extends key
06:36 - adapter
and this will just have one method so
06:44 - let's add a note that we're overriding a
method so an override and the method is
06:50 - public void key pressed and the
parameter is key event and we'll just
07:01 - call this B and add all the imports
actually we should take care of that
07:09 - next so at the top of your program for
this class at least make sure you get
07:16 - everything related to java.awt as well
as Java dot aw t dot event so we can
07:23 - take out a few of these and let me check
to see what else we would need so we'll
07:29 - also need Java X dot swing and then Oh
swing not sing and then lastly import
07:45 - Java dot util dot random and we are good
all right so here are all the methods
07:56 - that we'll need the constructor for our
game panel start game pink component
08:01 - draw move check Apple check collisions
game over action performed and inner
08:06 - class called Mikey adapter or whatever
else you want to call this with one
08:10 - method called key pressed so if you have
everything we're good to go then so
08:15 - before the constructor we're going to
declare everything that we're going to
08:18 - need for this program so let's begin
with the screen wit so I'm going to make
08:23 - this static final int screen underscore
width and I'll set this to 600 let's do
08:33 - the same thing for a screen Hayate so
static final int screen height
08:42 - all right so with snake we kind of have
these things called units I would say
08:48 - we're going to have some sort of matrix
like how big do we want the objects in
08:53 - our game so I'm going to call this unit
size and it'll make more sense when we
08:59 - actually create a visible game panel but
for now let's just type in static final
09:05 - int unit size so how big do we want the
objects in this game and then we'll want
09:14 - to calculate how many objects we can
actually fit on the screen so static
09:19 - final int and we'll call this game
underscore units and what we'll do is
09:26 - set this equal to screen underscore
width times screen underscore height and
09:39 - then just divide this by the size of the
units so unit underscore size then let's
09:49 - create a delay for our timer that we're
going to implement later so static final
09:55 - int delay and when I tested this 75 was
fairly quick so the higher the number
10:03 - for your delay the slower the game is
and vice-versa so for this next part
10:08 - we're going to create two arrays an
array called X and another called Y
10:12 - these arrays are going to hold all of
the coordinates for all the body parts
10:16 - of our snake including the head of the
snake so let's create two arrays final
10:21 - int x equals new int and for the size of
this array I'm just going to set this to
10:30 - whatever our game units is because the
snake isn't really going to be bigger
10:35 - than the game itself and then let's
create another array called Y so this
10:42 - array is going to hold all of the x
coordinates of the body parts including
10:46 - the head of our snake and this one is
going to hold all of the y coordinates
10:51 - and let's set the initial amount of body
parts we want
10:55 - for the snake so inte body parts and
maybe let's set this to six so we'll
11:03 - begin with six body parts on the snake
and let's create well declare an integer
11:09 - called apples Gaytan and this will
initially be zero int Apple X this will
11:18 - be the x-coordinate of where the Apple
is located and it's going to appear
11:23 - randomly each time that the snake eats
an apple and int Apple Y for the Y
11:29 - positioning then we'll want a direction
we can easily do this with a character
11:34 - value so char direction and we can
initialize this to something or set this
11:42 - to something so let's have the snake
begin going right when we start the game
11:47 - so we'll have our for right L for left
you for up or D for down so I'm just
11:54 - going to have the snake begin by going
right and then we'll want a boolean
12:00 - value called
running and we'll set this to false to
12:04 - begin with let's declare a timer called
timer and an instance of the random
12:11 - class called random and that is
everything that we need to declare
12:14 - before the constructor so let's go to
the constructor next and the first thing
12:19 - we'll do is finish creating this
instance of the random class so random
12:23 - equals new random and we're going to set
the preferred size for this game panel
12:32 - so this dot set preferred size and we're
going to pass in a dimension but we'll
12:40 - just say new dimension and then within
the parentheses of new dimension we can
12:47 - pass in some arguments such as the
screen width and the screen height so
12:53 - screen width and screen height let's set
the background color so this set
13:01 - background let's say black color black
13:08 - and we'll want to set the focus ability
so this dot set focusable true we're
13:17 - going to add a key listener so this dot
add key listener and we're going to
13:24 - create a new my key adapter alright so
when we finish constructing this game
13:36 - panel we're going to call the start game
method so start game and we'll head to
13:43 - the start game method next I forgot to
add a method so let's do that I'll add
13:48 - this after the draw method so we'll want
to populate the game with an apple so we
13:54 - can actually score a point so let's
create a method called
13:59 - public void and we'll call this new
apple all right so that should be all
14:07 - the methods that we need but yeah I did
forget about this one so when we start
14:11 - this game what we're going to do first
is call the new apple method to create a
14:19 - new apple on the screen for us let's
take our boolean called running and set
14:25 - this equal to true because it's false to
begin with and then we'll finish
14:30 - creating this instance of our timer so
timer equals new timer we're going to
14:36 - pass in our delay value so this will
dictate how fast the game is running so
14:41 - 75 is somewhat brisk and we're going to
pass in this because we're using the
14:48 - action listener interface and then
lastly we're just going to take our
14:52 - timer and use the start function and
that is it for the start game method so
14:59 - let's go to paint component and we're
going to type in super dot paint
15:06 - component and pass in G so there's one
thing I want to explain to you guys
15:12 - let's just run this once so here are the
dimensions for our game it's 600 by 600
15:18 - and each item in this game is going to
have a dimension or dimensions of 25
15:24 - pixels for the width and the height so
that's a little difficult to actually
15:28 - see on this game so what I'm going to do
is turn this into a matrix or grid just
15:35 - to help us visualize things so this part
is completely optional but I'm just
15:39 - going to turn this into a grid so it's
easier for us to see things so I'm just
15:44 - going to create a for loop within the
draw method for int I equals 0 and I'm
15:53 - going to continue this as long as I is
less than our screen underscore height
15:59 - divided by the unit underscore size I'm
basically going to be using this for
16:04 - loop to draw lines across our game panel
so it becomes some sort of grid and then
16:11 - I'm going to increment I by 1 each time
16:15 - so we're going to draw lines across the
x-axis and then y-axis so we'll use the
16:22 - G dot draw line method and we're going
to pass in some starting coordinates and
16:28 - ending coordinates so since we have this
in a for loop we're going to utilize
16:33 - this index of I so for the x position I
times unit underscore size for y2 we're
16:43 - going to set this to 0 for X 2 we're
going to type I times unit underscore
16:52 - size and then y2 the screen height so
let's take a look at this so here are
17:03 - all of these spaces along the x-axis so
let's do the same thing for the y-axis
17:09 - so it's a similar process G draw a line
but we're going to change a few things
17:15 - around so for this first argument this
will be 0 then I times unit size for the
17:23 - second the third is going to be screen
underscore width and the fourth argument
17:34 - is
i times unit underscore size so let's
17:40 - take a look so here is our grid so each
item in this game is going to take up
17:45 - one of these spaces so if we were to
increase the unit size let's say 50 well
17:53 - all of the items in this game are going
to be larger than so that's what the
17:58 - purpose of the unit size is how big do
we want the items in this game so for
18:03 - now I'm just going to keep in this for
loop just to help us develop this game
18:07 - but by the end we'll probably take out
this grid or you can keep it in doesn't
18:11 - matter so let's work on generating the
coordinates of the apple within the new
18:16 - apple method the purpose of the new
apple method is to generate the
18:20 - coordinates of a new apple for us
whenever this method is called so
18:24 - anytime we begin the game or score a
point or eat an apple basically so let's
18:29 - take our variable Apple X so this is the
x coordinate of our Apple equals random
18:37 - dot next int so we're going to have this
Apple appear someplace along the x-axis
18:45 - so the range is going to be our screen
underscore with however we're going to
18:53 - divide this by the unit underscore size
so it's as if we're going to get one of
18:59 - these positions so this will be one two
three four and then we'll just continue
19:04 - on like that but let's also cast this as
an integer just to be safe so it doesn't
19:10 - break this program and then we're going
to multiply this at the end by our unit
19:18 - underscore size and then let's do the
same thing for y so apple y equals
19:30 - random dot next int then we're casting
screen underscore height this time
19:36 - divided by unit size and then after this
is complete multiply this by the unit
19:43 - size because we want this Apple to be
placed evenly within
19:49 - one of these item spots I would say
alright so then let's draw this Apple on
19:55 - the screen and it's going to appear
randomly every time we actually draw
19:59 - this so let's head back to the draw
method and we're going to draw the Apple
20:04 - so first let's set the color so G dot
set color and we'll set this to red I
20:12 - guess it could also be like a green
apple too but let's set it to red for
20:17 - now because I want the snick to be green
so g dot set color and then let's use g
20:25 - dot fill oval for a circle so we're
going to pass in the coordinates Apple X
20:33 - Apple Y the width and the height and
we're going to pass in the unit size so
20:41 - this is how large the Apple is so let's
run this so here's that Apple it should
20:47 - fit within one of these grid spaces and
be aligned up perfectly within it and
20:51 - every time we run this it will most
likely appear in a different spot so we
20:56 - know that the Apple is working done and
if you were to go back and change the
21:00 - item size let's say back to 50 well all
of the grid spaces will be larger same
21:05 - thing with the items such as the Apple
and the body parts of the snake as well
21:10 - but I'll just keep this at 25 but I
wanted a visual demonstration of how the
21:15 - unit size kind of plays into this
program so let's work on creating the
21:19 - move method of this game panel class so
we're going to be moving the snake with
21:25 - this method first we're going to create
a for loop to iterate through all the
21:29 - body parts of the snake so we'll have
int I 4 index and stuff that's equal to
21:34 - the amount of body parts that we have
for our snake so I equals body parts
21:39 - we'll continue this as long as I is
greater than 0 and then we'll decrement
21:44 - I by 1 after each iteration of this for
loop so what we're going to be doing is
21:48 - actually shifting the body parts of our
snake around so we'll take X array X at
21:56 - index I and we're going to set this
equal to our ax at index I minus
22:03 - one so basically we're shifting all the
coordinates in this array over by one
22:08 - spot basically and let's do the same
thing for y so Y at index I equals Y at
22:15 - index I minus one so let's also create a
switch that will change the direction of
22:20 - where our snake is headed so we'll
create a switch and we're going to
22:25 - examine our direction variable and
direction is a character value so we'll
22:31 - have this store the letter R for right L
for left you for up and D for down so
22:36 - we're going to create a case for each of
these possible directions so we'll have
22:41 - a case you for up and what we're going
to do for this case is take our array Y
22:47 - at index 0 this is the y-coordinate of
the head of our snake and we're going to
22:53 - set this to y 0 minus our unit
underscore size so it's going to go to
23:00 - the next position and then we will break
and then let's do the same for each of
23:06 - the cases and make a few changes so case
D will equal Y at index 0 equals Y at
23:14 - index 0 plus the unit size and let's
create one for L for left so we're going
23:24 - to take our x array at index 0 equals
our ax at index 0 minus the unit size so
23:34 - this will make us go to the left and
then case our for right X at 0 equals x
23:44 - at 0 plus the unit size and that is it
for the move method so we just need to
23:51 - draw the snake we need to draw the head
and we need to draw the body so let's go
23:56 - to our draw method and fill in these
things so let's draw the head of the
24:00 - snake and the body so we're going to
create a for loop to iterate through all
24:04 - of the body parts of the snake
so for int I the index and we'll set
24:10 - this equal to 0 we'll continue this for
loop as long as I is less than the
24:15 - amount of body parts that we
have and then we're going to increment
24:18 - our index by one after each iteration so
if I is equal to zero then we're dealing
24:27 - with the head of our snake we can either
draw this the same color or we can draw
24:31 - it a different color so if I is equal to
zero let's take G and set the color to
24:40 - color green and then let's take G and
use the fill rect for rectangle method
24:52 - and we're going to set X to our array X
at index I and then our coordinate Y
25:02 - will be our array Y at index I as well
and the width and height are going to be
25:09 - our unit size so I'm going to copy this
and we're going to change width and
25:14 - height to unit size so if I does not
equal zero we're dealing with the body
25:21 - of our snake so else let's take G again
and set the color for the body but I'll
25:28 - pick a different shade of green so
instead of saying color dot green or so
25:33 - I'll just say new color and type in an
RGB value so I already picked one out
25:39 - one that was decent was 45 and 180 and
zero and then we just need to use G that
25:48 - fill rect and we can keep that the same
so let's run this and take a look at
25:55 - what we have so far here so here is the
head of our snake but we cannot yet see
26:00 - the body so we'll actually need to call
the move function so we're actually
26:05 - going to call that within the where is
it the actionperformed method so we're
26:12 - going to fill in a few things within
this method next so we're going to check
26:16 - if our game is running so if it is
running this is going to be true
26:22 - the first thing we'll want to do is move
our snake and then we're going to check
26:27 - to see
if we ran into the Apple so check Apple
26:32 - then check collisions and if this game
is no longer running we're going to call
26:44 - the repaint method okay let's try this
so here's our snake it's actually moving
26:51 - pretty fast but it's just going to go
off the screen so let's set up the
26:55 - collisions next we're first going to
check to see if the head of our snake
26:59 - collides with its body at all so we need
to iterate through all of the body parts
27:04 - of the snake so we're going to do this
with a for loop so we'll take int I
27:08 - equals the amount of body parts that we
have and we're going to continue this as
27:14 - long as I is greater than zero then we
are going to decrement I by one after
27:21 - each iteration so what we're going to
check is if and you might have to put
27:28 - this within double parenthesis X at
index zero that's the head of our snake
27:34 - is equal to X at our end x and y at
index zero is equal to Y at index I so
27:56 - if this is the case that means the head
collided with the body so we're going to
28:00 - take our running bullion value and set
this to false so basically this is going
28:05 - to trigger a GAMEOVER method for us
later on so let's also check to see if
28:11 - the head of the snake touches any of the
borders so that will also cause a game
28:16 - over so I'm just going to add a comment
here just to help us separate things so
28:21 - this checks if head collides with body
and this next portion will check if head
28:35 - touches left border so all this is is if
X at zero is less than zero then all we
28:49 - do is set running to equal false now
let's check to see if head touches right
28:59 - border so I'm going to copy this and
we're going to check to see if X at
29:06 - index zero is greater than our screen
underscore width and then we'll have
29:14 - running become false then so let's check
to see if head touches top border so
29:28 - we're going to examine the y-coordinate
this time Y at index zero is less than
29:37 - zero and then check if head touches
bottom border so if y at index zero is
29:54 - greater than our screen height and then
lastly we should stop the timer so if
30:06 - running is false timer stopped and that
is everything for the check collisions
30:16 - method so let's run this so the snake
should stop after it reaches this border
30:21 - which it did so if the head of the snake
passes over one of these four borders or
30:26 - if the head of the snake touches any of
its body parts at least then the game is
30:30 - going to be over basically it so let's
actually control the snake so we're
30:35 - going to fill in a few things within the
inner class of Mikey adapter so head to
30:41 - the key pressed method and we're going
to create a switch that's going to
30:45 - examine the e key event and we're going
to get key code
30:55 - so within the switch we're going to have
four cases one for each of the arrow
30:59 - keys so let's begin with the left arrow
key so case key event dot VK underscore
31:09 - left and we don't want the user to be
able to turn 180 degrees in the opposite
31:15 - direction otherwise they might get a
game over because they're going directly
31:19 - into themselves basically so we want to
limit the user to only 90 degree turns
31:24 - so we're going to check to see if the
direction but I misspelled it
31:31 - if Direction does not equal
r4 right then we'll let them go left
31:39 - Direction equals L and let's make a few
other cases oh and we should break
31:48 - afterwards do don't forget about that so
case key event VK ripe if direction does
31:58 - not equal left we'll change the
direction to right so R and then case
32:05 - key event VK underscore up if direction
does not equal D for down will change
32:13 - direction to you for up and lastly VK
underscore down if the direction does
32:21 - not equal you for up we'll set the
direction to D for down so with this we
32:26 - should be able to control the snake now
let's give it a try so I'm going down
32:31 - left up right cool
so if I touch any of the borders the
32:37 - game is over let's work on actually
grabbing the Apple next so let's work on
32:43 - that method so that is within the where
is it the check Apple method there's not
32:50 - much to write here we're going to
examine the coordinates of the snake and
32:53 - the coordinates of the Apple so we're
going to use an if statement and I'm
32:58 - using double parenthesis for this
portion if X at index 0 this is the x
33:03 - position of the head of our snake is
equal to
33:07 - Apple X that's the exposition of the
Apple and we'll do the same thing for
33:16 - the Y coordinates so change X to Y for
this next portion and within the body of
33:25 - this if statement we're going to
increase the amount of body parts that
33:28 - we have so we're going to increment this
by one you can just type in body parts
33:32 - plus plus we'll take our apples eaten
variable and increase this by one so
33:39 - this will function as the score
basically and then we're going to call
33:43 - the new Apple method to generate a new
Apple for us so let's test this now just
33:48 - to be sure that this is working fine so
the body should increase by one it was a
33:55 - little difficult to see yeah it looks
like it's increasing by one body part
33:59 - after one Apple is eaten cool
so that is working fine so let's work on
34:06 - the game over screen next now within the
draw method we're going to surround all
34:12 - of this within an if statement so before
this I'll add if running so if our game
34:19 - is running do all of this however I
think I'm going to indent everything
34:24 - just so it's a little easier to read so
give me one moment all right let's see
34:33 - where this ends got it so
if the game is running do all this else
34:44 - we're going to call the game over method
so else game over and we're going to
34:51 - pass in G and G is our graphics that
we're receiving with this parameter so
34:57 - let's go to the game over method and
we're going to write some text on the
35:02 - screen and we are receiving graphics
Jeep so let's set up the game over text
35:13 - so let's set the color G dot set color
to maybe red so color dot red and the
35:23 - font is well so g dot set font and we
will pass in a font instance so new font
35:32 - and pick a style I will pick in curry
but choose whatever style you like
35:39 - that's available font bold because I
want this bold and a size so maybe 75 so
35:47 - there's these things called font metrics
which are useful for aligning up text in
35:52 - the center of the screen so we're going
to create an instance of font metrics so
35:57 - font metrics and we'll call this maybe
metrics equals get font metrics and then
36:13 - we're passing in G dot get font that
looks good so this next part is a little
36:23 - tricky we're going to use G draw string
so as arguments we need to pass in a
36:30 - string x-coordinate and y-coordinate so
the string is going to be game over and
36:37 - for X I'm just going to paste this and
we can take a closer look we're going to
36:42 - take our screen with minus the metrics
of the string with game over divided by
36:49 - 2 so these are the metrics and basically
this is going to
36:54 - this within the very center of the
screen width and then for why this is a
37:00 - little more simple we're just going to
take our screen underscore height divide
37:06 - it by two so this will give us the
string game over in the center of the
37:11 - screen we're at least close to it yep
there we are
37:15 - let's also place the score at the top of
the program so maybe we'll place it
37:21 - right up here somewhere
and just a save time I'm going to copy
37:26 - all of this code from the game over
method and reapply it so I'm going to
37:31 - paste all of this within the draw method
and we're going to add this after we
37:36 - draw all the body parts of the snake so
we're going to use these lines of code
37:41 - to draw the current score so I'll keep
the color is red red for apples I will
37:46 - change the font size down slightly to
maybe 40
37:50 - we'll keep the metrics the same however
we'll change the string so let's display
37:55 - score colon space plus our apples eaten
variable and then we'll take this this
38:07 - text and place it within metrics dot
string width so place this within the
38:12 - parentheses so score plus apples eaten
and then we'll want to move this more to
38:18 - the top of the screen so let's take I'll
replace this first and take G dot get
38:26 - font and we're going to get size so this
should now display the score of our game
38:40 - so let's run it so it says score 0 and
it goes up by one every time we eat an
38:45 - apple I would also like to display the
score on the game over screen so I'm
38:52 - actually going to copy all of this code
that we just pasted here after the
38:58 - changes and I'm going to paste this
within the game over method so this will
39:04 - display the score
however we might have to rename metrics
39:10 - so I'll have this as metrics 1 and
metrics 2 so the score should be
39:17 - displayed now at the game over screen
which it does cool alright so let's go
39:23 - over some artistic stuff so we can
actually get rid of these grid lines if
39:29 - you want so we actually did that near
the beginning of the draw method I'll
39:33 - just turn this into a comment that was
more or less just a tool to help us
39:39 - visualize the item size so this should
remove the gridlines if you do not like
39:45 - them cool and one other fun thing I
realize that you can do is that you can
39:50 - actually have the color of the snake
change randomly so this is totally
39:56 - optional though but I thought it was
kind of fun to add this line in so what
39:59 - I'm going to do is take G dot set color
to new color then we can pass in three
40:10 - RGB values and it's on a scale from 0 to
255 so I'm going to take random dot next
40:17 - int and pass in 255 so we'll get a
random number so let's do that with each
40:25 - of these values alright so this is what
ends up happening it's not necessary but
40:33 - I thought it was kind of cool to have
like a multicolored snake so you can
40:37 - either keep that in or you know take it
out if you don't like it there's just
40:41 - something I wanted to mention because I
thought it was pretty cool alright so
40:45 - that's everything let's run this one
last time
42:42 - so that's the end of this video if you
would like a copy of all this code I'll
42:46 - post all of this in the comments down
below but yeah that's how you can create
42:50 - a simple game of snake using Java hey
you yeah I'm talking to you if you learn
42:58 - something new then you can help me help
you in three easy steps
43:02 - by smashing that like button drop a
comment down below and subscribe if
43:07 - you'd like to become a fellow bro
43:23 - you