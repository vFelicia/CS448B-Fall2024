00:02 - well well well welcome back so enums
00:04 - short for enumerations they are a
00:07 - user-defined type of named integer
00:10 - identifiers a benefit is that they help
00:13 - make a program more readable either for
00:16 - us or for somebody else that's looking
00:18 - over our code so here's how to create
00:20 - some enums you can either declare these
00:21 - within the main function or outside of
00:23 - the main function let's do so outside of
00:25 - the main function so to create some
00:27 - enums type the keyword enum followed by
00:30 - a unique identifier let's say we're
00:32 - working with days of the week so let's
00:34 - say day
00:36 - curly braces and then end this with a
00:38 - semicolon so enums are constants and
00:41 - let's declare some constant names let's
00:43 - say the seven days of the week so
00:45 - separate each constant with a comma and
00:47 - we will just go through the days of the
00:49 - week
00:53 - here are the enumerations that we
00:55 - declared the days sunday through
00:57 - saturday the days of the week now each
00:59 - of these constants has an associated
01:02 - integer so beginning with your first
01:04 - constant this will have a value of zero
01:07 - then the next will have one
01:09 - then two then three then you continue on
01:12 - in that pattern but you can give these a
01:14 - unique value let's change it sunday to
01:16 - one because it's the first day of the
01:18 - week then monday will be two and then we
01:20 - will just continue with these
01:24 - now to use one of these enums we would
01:25 - type enum then our identifier name day
01:29 - it's kind of like a data type
01:31 - and then some variable name let's say
01:33 - today and then you can set this equal to
01:35 - one of these constant names let's say
01:36 - that today is sunday so an important
01:39 - note with these enumerations they're
01:41 - treated as integers and not strings if i
01:44 - need to work with one of these enums
01:46 - we're going to treat them as if they
01:47 - were an integer so just for an example
01:50 - i'm going to print the value contained
01:52 - within today so this is going to be an
01:54 - integer so we will use the d format
01:56 - specifier and we will display today so
02:00 - since today is equal to sunday this has
02:03 - an associated integer value of one and
02:06 - if i display that
02:07 - this will print the number one if i
02:09 - change this to saturday well then it
02:12 - will print the number seven
02:15 - so an important note is that enums are
02:17 - not strings but they can be treated as
02:20 - integers now how does this make a
02:22 - program more readable so let's write an
02:24 - if else statement that's going to check
02:26 - what today is
02:28 - first we'll begin with using the
02:30 - associated integer value so if today
02:33 - is equal to one
02:35 - or
02:36 - today
02:37 - is equal to seven
02:39 - then that means it's either sunday or
02:41 - saturday and let's print a message
02:44 - let's say it's the weekend
02:47 - party time
02:49 - else we will print something else
02:52 - i have to work today
02:56 - so today is set to saturday that means
02:58 - that saturday has an associated integer
03:01 - of seven
03:02 - so if today is equal to one or seven
03:06 - well then we will execute this if
03:08 - statement
03:09 - it's the weekend party time i think i'm
03:11 - just going to add a new line real quick
03:14 - now if i set this to a different day of
03:16 - the week let's say monday well then i
03:19 - have to work today so the way that this
03:21 - is written now
03:22 - it's not too readable so instead of
03:25 - using an integer value let's use the
03:27 - associated name with each of these
03:29 - constants
03:30 - so let's replace one with sunday
03:34 - and seven with saturday and i'll change
03:37 - this to maybe sunday
03:38 - so this is a lot more readable
03:40 - especially if somebody else is reviewing
03:42 - your code they may not understand why
03:45 - today is equal to one or today is equal
03:47 - to seven but this makes a lot more sense
03:50 - oh
03:51 - so if today is equal to sunday or if
03:54 - today is equal to saturday then we print
03:57 - it's the weekend party time so that's a
04:00 - huge benefit with enums is that they
04:03 - help make a program more readable so to
04:06 - declare enums you type enum then an
04:08 - identifier and then you can list as many
04:11 - constants as you would like and you can
04:13 - give them an associated integer value
04:15 - too so yeah those are enums if you'd
04:18 - like a copy of this code i'll post this
04:20 - to the comment section down below and
04:22 - well yeah those are enums in c