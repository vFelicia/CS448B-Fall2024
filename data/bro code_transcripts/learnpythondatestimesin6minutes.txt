00:00 - hey what's going on everybody so in
00:01 - today's video I'm going to show you how
00:03 - we can work with dates and times using
00:05 - python we will import the date time
00:09 - module this allows us to work with dates
00:11 - and times using our system clock our
00:13 - computer's clock this video serves as
00:16 - more of an introduction to create a date
00:18 - object we will assign an object of date
00:21 - let me zoom in a little
00:23 - bit we will access the datetime module
00:27 - called the date method within the date
00:29 - method we will pass in the following
00:31 - arguments a year of our choosing so for
00:34 - me I'll say 2025 a month one corresponds
00:38 - to January these are numeric months and
00:41 - a day a day of the month I will say the
00:45 - second if I was to print the state
00:48 - object here's what it
00:51 - outputs the year is 2025 January
00:55 - 2nd to get the date right now let's say
00:59 - today this will return a date object
01:02 - that represents
01:03 - today access the date time
01:06 - module access the class of date then
01:10 - call the today method to return the date
01:13 - of today let's print today currently I'm
01:17 - recording this video July 14th
01:20 - 2024 for me that is the result of my
01:23 - today object when I print it now we'll
01:26 - work with time I will create a Time
01:28 - object Act access the date time
01:31 - module call the time method we have to
01:35 - pass in hours minutes and then seconds
01:38 - so for the hour let's say 12 30 and 0
01:43 - seconds I will print the current time it
01:47 - is
01:48 - 12:30 now to get the time right now on
01:52 - our system clock I will create a
01:54 - datetime object of now equals access the
01:59 - date time module now within the datetime
02:01 - module there is a date time class we
02:04 - have to access we will access that I
02:07 - know it looks kind of silly date time.
02:10 - dat time doth now method so we're
02:14 - accessing the datetime module there's a
02:17 - built-in datetime class we have to
02:18 - access then within that class there's a
02:21 - now
02:22 - method what is the time right now
02:25 - according to my system
02:27 - clock this returns a date and a Time
02:31 - July 14th 2024 it is just after 9:00
02:35 - a.m. we can format the appearance of the
02:38 - string here's
02:40 - how I'm going to reassign our datetime
02:43 - object of
02:45 - now our datetime object has a string
02:49 - format time method stf time we're going
02:54 - to pass in a string and include some
02:57 - format specifiers let's say I would
02:59 - would like to display the hour first I'm
03:02 - going to add a percent these format
03:04 - specifiers you can find according to the
03:07 - datetime documentation
03:08 - online so I will display the hours that
03:12 - would be percent
03:15 - H percent M for
03:18 - minutes percent s for seconds let's see
03:22 - what we're working
03:24 - with we have the hours the minutes and
03:27 - the seconds I will separate each of
03:29 - these with the
03:33 - colon that's
03:35 - better now I'll add the date I'll start
03:38 - with the month I will add a format
03:40 - specifier of lowercase
03:43 - M then the day a format specifier of D
03:48 - then the year format specifier capital Y
03:53 - here's the
03:54 - result we have the month the day and the
03:58 - year I'll add a dash to separate
04:03 - these that's better or if you prefer the
04:06 - day first rather than the month we can
04:09 - switch this
04:10 - around it depends on how you read dates
04:13 - in your country now we're going to cover
04:15 - an exercise we're going to see if the
04:17 - current date and time has passed a
04:20 - Target date and time so we are going to
04:23 - create a Target date time
04:27 - equals access the date time mod
04:30 - module we will create a new date
04:33 - time so now we have to pass in a date
04:37 - and a
04:38 - time for my date time let's say it's
04:41 - something far into the future like the
04:42 - year
04:43 - 2030 January
04:45 - 2nd for the hour it will be 12 30 and 1
04:51 - second I'm going to get the time right
04:54 - now which I will name current date time
05:00 - equals access the datetime
05:03 - module access the datetime class call
05:06 - the now method to return the current
05:08 - date and time right
05:11 - now using an if statement I will see if
05:14 - our Target date
05:17 - time is less than the current date
05:21 - time have we already pass this date if
05:25 - our Target date is less than the current
05:28 - date that means this date and time has
05:30 - already passed I will print the
05:33 - following if that's the
05:34 - case Target date has
05:40 - passed else I will
05:45 - print Target
05:48 - date has not
05:51 - passed here's the
05:53 - result Target date has not passed what
05:57 - if I set the target date to the year
05:59 - year
06:01 - 2020 well then the target date has
06:04 - passed so that's how we can check to see
06:06 - if a date and time has already passed
06:09 - has it
06:10 - elapsed all right everybody so that is
06:12 - an introduction to working with dates
06:14 - and times using python