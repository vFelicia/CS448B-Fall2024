00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to show you
00:04 - all how we can sort iterables in python
00:07 - so
00:07 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like
00:15 - comment and subscribe your support will
00:18 - help keep this channel running
00:20 - well well well welcome back everybody in
00:22 - this video i'm going to show you all how
00:23 - we can sort data using python we'll
00:25 - begin with the sort method which is used
00:27 - with lists and the sort function which
00:28 - is used with
00:29 - iterables and that would include lists
00:31 - let's start with something very basic
00:33 - and then we'll crank up the difficulty
00:34 - one step at a time
00:36 - i have a list named students and i have
00:38 - a bunch of student names within this
00:40 - list
00:40 - we have squidward sandy patrick
00:42 - spongebob mr krabs
00:44 - let's say that all of these students are
00:46 - taking a college course
00:48 - perhaps on marine biology what i would
00:50 - like to do is to sort this list in
00:51 - alphabetical order
00:52 - and to do that we have a method that is
00:54 - built in with lists
00:56 - so type the name of your list students
00:58 - dot
00:59 - sort and it's easy as that and to
01:01 - display this list i think i'll use a for
01:03 - loop
01:03 - for i in students
01:07 - print i
01:11 - and there you go that's how to sort a
01:12 - list starting with the top we have mr
01:15 - krabs
01:15 - then patrick sandy spongebob and
01:17 - squidward the sort method
01:19 - of lists can accept keyword arguments
01:21 - there are two optional keyword arguments
01:23 - that we can pass in we can pass
01:25 - in key and or reverse we'll cover key a
01:28 - little bit later
01:29 - if we set reverse to true then our list
01:32 - will be sorted by
01:34 - reverse alphabetical order beginning
01:36 - with squidward
01:37 - spongebob sandy patrick then mr krabs
01:40 - now the sort method does not work with
01:42 - other iterables it's a
01:44 - built-in method for lists if our list of
01:46 - students
01:47 - was instead let's say a tuple well then
01:50 - the sort method is not going to work
01:52 - you can see here that we have an
01:53 - attribute error tuple object has no
01:55 - attribute of sort
01:57 - that's where the sort function would
01:58 - come in because that's useful for other
02:01 - iterables
02:01 - you can also use this for a list two i
02:03 - suppose the sort function will return a
02:05 - sorted list so let's use the sort
02:08 - function this time
02:10 - and we'll assign the result to a list
02:13 - called sorted students
02:16 - equals sorted and then we need to pass
02:20 - in
02:20 - an iterable and we have the option of
02:22 - passing in a key
02:24 - and or reverse the iterable that we'll
02:26 - pass in as an argument is our tuple
02:29 - named students
02:30 - so this line will be sorted students
02:32 - equals
02:33 - sorted students sorted students is a
02:36 - list the sorted function will return a
02:38 - list
02:38 - but it accepts an iterable as an
02:40 - argument and to display this we should
02:42 - change
02:43 - 4i and students to 4i in
02:46 - sorted students and now this function
02:49 - will accept our iterable our tuple
02:51 - and create a sorted list and all of
02:53 - these are in alphabetical order
02:55 - and to reverse this we can pass in the
02:58 - keyword argument of
02:59 - reverse equals true and now our list
03:02 - is sorted in reverse alphabetical order
03:05 - all right we're going to take it up a
03:06 - level
03:07 - welcome to level 2. sometimes data isn't
03:09 - always as simple
03:10 - here we have a list of tuples each tuple
03:14 - has a corresponding student record
03:16 - we have a name a letter grade for their
03:18 - college course
03:19 - and the student's age now how can we
03:21 - sort this
03:22 - list of tuples by either the student's
03:25 - name
03:26 - their grade or their age well that's
03:28 - where the key keyword argument is going
03:30 - to come in with sorting
03:32 - if you take a look at this list of
03:33 - tuples it somewhat resembles a
03:35 - spreadsheet
03:36 - there's rows and then there's columns
03:38 - the first column corresponds to student
03:40 - names
03:41 - the second column are grades and the
03:43 - third column are all the ages of the
03:45 - students
03:46 - so by default sorting by the first
03:48 - column is actually really easy that's
03:50 - the default
03:51 - so if we need to sort alphabetically
03:53 - that would be the same process as before
03:55 - we would type
03:56 - the name of the list students dot sort
03:59 - but if we were to print this iterable
04:02 - for i
04:03 - in students instead of just the
04:06 - individual student names
04:08 - we're going to get each tuple that we
04:10 - have
04:11 - so now all of these tuples are arranged
04:13 - in alphabetical order starting with
04:15 - the first column that we have which are
04:17 - all the student names
04:19 - now how can we sort these iterables by
04:21 - their second column
04:22 - for this case it would be student grades
04:24 - or even the third column which would be
04:26 - the student ages well that's where the
04:29 - key keyword argument is going to come in
04:31 - this is a keyword argument
04:33 - and we set key equal to a function
04:35 - that's going to return
04:36 - the index of that specific column that
04:39 - we have
04:40 - so let's say key equals grid grade is
04:43 - going to be a
04:44 - function object grade equals
04:47 - and we can easily use a lambda
04:49 - expression for this
04:50 - lambda let's say grades
04:54 - colon grades and we
04:57 - will set an index of one now the first
05:00 - index
05:00 - is zero that's the first column because
05:03 - computers always start with zero
05:05 - column two would have an index of one
05:07 - and then
05:08 - column three would have an index of two
05:11 - so grade equals lambda grids
05:14 - colon grids index one you can also
05:17 - rename these if you want
05:18 - so students.sort we're setting the key
05:22 - equal to grid and grade is a function
05:24 - object
05:25 - via a lambda function and now all of
05:28 - these students
05:28 - will be sorted by their grades starting
05:31 - with sandy
05:32 - then spongebob mr krabs patrick then
05:34 - squidward
05:35 - if this needs to be in reverse order we
05:38 - can pass in that other keyword argument
05:39 - of reverse
05:40 - equals true and for practice if you
05:44 - wanted to sort all of this data by each
05:46 - student's age
05:47 - then we would change grade to let's say
05:49 - age age equals lambda
05:51 - we'll change grades to maybe ages colon
05:54 - ages and the index would then be two
05:57 - because the first column here is zero
06:00 - then one
06:01 - then two and change key to our function
06:04 - object
06:04 - of age now each student is
06:08 - sorted numerically beginning with the
06:10 - smallest edge
06:11 - well the youngest person starting with
06:13 - spongebob sandy patrick squidward that
06:15 - mr krabs
06:16 - and like i said before if you want your
06:19 - data arranged
06:20 - in reverse order you can set that
06:21 - keyword argument of reverse
06:23 - to true within the sort method and all
06:26 - of our student data is sorted beginning
06:28 - with the eldest student which is
06:30 - mr krabs then squidward patrick sandy
06:33 - and then spongebob
06:34 - and for the last part of this video
06:36 - let's say that we're working with
06:37 - some other iterable let's say we have a
06:40 - tuple of tuples instead
06:42 - well we can no longer use this sort
06:44 - method because that only belongs to
06:46 - lists
06:47 - you can also use the sort function with
06:48 - lists and it will generate a
06:50 - new sorted list without changing the
06:52 - placement of the original
06:53 - so let's say we have a tuple of tuples
06:56 - and this will create a new
06:57 - sorted list let's call this list sorted
07:01 - students equals then we'll use the
07:04 - sorted function we need to pass in an
07:06 - iterable and we can pass in
07:09 - both a key and or the reverse keyword
07:12 - argument
07:12 - so the iterable would be students
07:16 - and let's set the key equal to edge
07:19 - and i will not reverse it we can keep it
07:21 - as it is but let's change
07:23 - for i in students to sorted students
07:27 - and that's how to use the sorted
07:29 - function to sort
07:30 - an iterable including a list well
07:33 - alright everyone
07:34 - that's how to sort iterables in python
07:36 - if you would like a copy of all this
07:38 - code i will post all of this to the
07:39 - comments section down below
07:41 - but yeah that's a basic way to sort
07:43 - iterables in python
07:46 - hey you yeah i'm talking to you if you
07:48 - learned something new
07:49 - then help me help you in three easy
07:52 - steps
07:52 - by smashing that like button drop a
07:54 - comment down below
07:56 - and subscribe if you'd like to become a
07:57 - fellow bro
08:12 - [Music]
08:20 - you