00:00 - hey everybody so today I got to talk
00:02 - about iterables in Python and iterable
00:05 - it's a category any object or collection
00:08 - that can return its elements one at a
00:10 - time is considered an iterable if an
00:13 - object or a collection is considered an
00:15 - iterable then it can be iterated over in
00:17 - a loop for example let's create a list
00:20 - of
00:21 - numbers numbers equals a list I'll add
00:24 - the numbers 1 through 5 to keep it
00:26 - simple lists are considered iterable we
00:30 - use them within a for Loop in the
00:32 - context of a for loop we're going to be
00:34 - given each element one at a
00:37 - time each element that we're working
00:39 - with we can give a temporary nickname
00:42 - let's say number for every number in my
00:46 - iterable of numbers let's just print
00:49 - each
00:52 - number this will give us 1 through
00:56 - 5 the name of the current element in our
00:58 - iterable should should be descriptive of
01:01 - what we're iterating over for example I
01:03 - don't want to rename the current number
01:05 - that we're working with as something
01:06 - like blah blah
01:08 - blah you know this would work but other
01:11 - people looking over your code might not
01:13 - understand what a blah blah blah is and
01:15 - I don't blame them each element that
01:17 - we're given from our iterable the name
01:20 - should be descriptive of what we're
01:22 - given or you might see item for every
01:26 - item in numbers print each item that's
01:29 - also a good
01:30 - choice now you could even iterate
01:33 - backwards by enclosing our iterable
01:35 - within the Reversed
01:38 - function so take our iterable of numbers
01:41 - and reverse it then we get the numbers 5
01:44 - 4 3 2 1 if you would rather not print
01:48 - each element on a new line we can
01:50 - replace the new line character at the
01:52 - end of print statements with something
01:53 - else print is a function we can pass in
01:56 - a keyword argument of end rather than
01:59 - end each line with a new line character
02:02 - let's end with a
02:03 - space this will space out each of the
02:05 - elements or we could replace it with
02:07 - something else or what about a
02:11 - dash after each element append a dash
02:15 - character we could even add multiple
02:17 - characters such as a space a dash and a
02:20 - space if we so
02:21 - choose it's up to
02:24 - you tles are also
02:26 - iterable let's convert our list to a
02:29 - tupple by enclosing our numbers within a
02:30 - set of
02:33 - parentheses and I no longer want this
02:35 - reversed for every number in my iterable
02:39 - of numbers print each number then again
02:42 - we get the numbers one through
02:45 - five let's cover
02:47 - sets I will create a set of fruit which
02:51 - I will name
02:52 - fruits for a set enclose any values
02:54 - within a set of curly braces let's add a
02:57 - string of Apple a string of orange a
03:02 - string of
03:03 - banana and a string of
03:07 - coconut so with our for Loop let's say
03:10 - for every fruit in my iterable of fruits
03:15 - I will print each
03:17 - fruit that would give me apple banana
03:20 - orange
03:21 - coconut now sets they're actually not
03:24 - reversible I will attempt to enclose our
03:27 - iterable of fruits within the Reversed
03:29 - function
03:31 - here's what happens we have a type error
03:34 - set object is not
03:36 - reversible sets you can't
03:39 - reverse let's cover strings I will
03:42 - create a string of name type in your
03:44 - full name I'll use my YouTube channel
03:47 - name for every character in my iterable
03:52 - of name I would like to print each
03:55 - character
04:00 - maybe I would rather not have each
04:01 - character end with a new line I will set
04:04 - the keyword argument of end to be a
04:09 - space last we have dictionaries which
04:11 - are the most
04:13 - complicated let's name this dictionary
04:15 - my
04:17 - dictionary dictionaries you enclose with
04:19 - a set of krly braces kind of like a set
04:22 - but each element is a key value pair I
04:25 - will add a key of A with an Associated
04:28 - value of one
04:30 - a key of B which has a value of two a
04:35 - key of C which has a value of
04:38 - three if you iterate over a dictionary
04:41 - the dictionary is going to return all
04:43 - the keys but not the values we'll test
04:46 - that for every key in my iterable of my
04:52 - dictionary let's print each
04:54 - key this would give me the keys of a b
04:58 - and c but none of the values 1 2 or
05:02 - three if you need the values we're going
05:05 - to follow this iterable of my dictionary
05:08 - use the built-in values
05:11 - method this will return all the values
05:14 - of your dictionary as an iterable but
05:17 - let's rename a key as value because now
05:20 - we're working with the
05:22 - values then we're given all the values 1
05:26 - 2 and three if you need both the keys
05:29 - and the values you're going to use the
05:31 - items
05:34 - method we'll be given both a key and a
05:37 - value make sure that the value and the
05:40 - key is separated with the
05:42 - comma let's print each key followed by
05:45 - the
05:46 - value we get the key of A with its value
05:50 - of 1 b 2 c
05:54 - 3 we can reformat the output however we
05:57 - want let's use an F string I I will add
06:00 - two placeholders let's print each key
06:03 - equals then the
06:06 - value a = 1 b = 2 c =
06:11 - 3 okay everybody so those are iterables
06:14 - an object or collection that can return
06:16 - its elements one at a time is considered
06:19 - an iterable meaning that object or
06:21 - collection can be iterated over using a
06:24 - loop and well everybody those are
06:27 - iterables in Python