00:00 - hey people so in today's video I'm going
00:02 - to explain error objects in JavaScript
00:04 - and how to handle them and error is an
00:06 - object that is created to represent a
00:09 - problem that occurs errors occur often
00:12 - usually when we accept user input or
00:14 - establish a connection it's an object
00:16 - that's created to represent a problem so
00:19 - for example I am going to
00:21 - console.log the word hello and then
00:25 - afterwards I'm going to display a
00:27 - message to indicate that we have reached
00:29 - the end of the program
00:30 - you have reached the end this runs as it
00:35 - should right let's say I misspell log as
00:39 - leg well we encounter an uncaught type
00:42 - error there's many different types of
00:44 - Errors console. leg is not a function
00:47 - type errors tend to happen when we try
00:49 - and access something within an object
00:51 - that doesn't exist one big issue that we
00:53 - run into is that we prematurely exit the
00:57 - program it never finishes executing we
00:59 - have not reached the end errors when
01:02 - they're uncaught interrupt the normal
01:04 - flow of our program another example of
01:06 - an error would be a reference error I
01:09 - will console.log X but X isn't defined
01:13 - we have an uncaught reference error X is
01:15 - not defined and again it interrupts our
01:18 - program we never reach the end errors
01:20 - can be generated for all sorts of issues
01:23 - such as network issues promise rejection
01:26 - which we still need to talk about and
01:28 - security errors when we ENC a problem
01:30 - when doing one of these things an error
01:32 - object will be generated and it
01:34 - interrupts our program there's a
01:36 - solution though and that is to handle
01:39 - these errors when they occur we can do
01:41 - that with try catch and finally blocks
01:45 - with the try block we can enclose any
01:47 - code that might potentially cause an
01:49 - error such as if we're trying to
01:52 - establish a connection to something if
01:54 - that connection fails an error can occur
01:56 - if we don't handle it it's going to
01:58 - interrupt our program so so all of this
02:00 - code I will place within a tri block we
02:03 - will try all of this
02:07 - code but we need a catch block
02:10 - too the catch block has one parameter it
02:13 - will catch an error
02:16 - object then let's
02:19 - console.log the error object to see what
02:21 - it is so let's run this we have a
02:25 - reference error X is not defined see now
02:29 - we are reaching the of the program the
02:31 - program is not being interrupted we have
02:33 - gracefully handled this error before it
02:36 - was uncaught but now it's caught for
02:38 - catching errors I wouldn't recommend
02:40 - using
02:41 - console.log rather I would use console.
02:44 - error this will highlight any errors
02:46 - that occur and still handle them it's
02:49 - good for debugging we can clearly see
02:51 - the error reference error X is not
02:53 - defined and again it doesn't interrupt
02:56 - our program we still reach the end now
02:59 - optionally you can add a finally block
03:02 - the finally block always executes
03:04 - regardless if an error comes up the
03:06 - finally block is usually used for
03:09 - closing files closing connections or
03:11 - releasing resources usually when you
03:14 - open something or establish a connection
03:16 - you need to close it afterwards you
03:18 - don't want to leave it open that's where
03:20 - the finally block comes in do any
03:22 - cleanup at the end whether or not an
03:24 - error occurs so just to test this I'm
03:27 - going to
03:28 - console.log
03:31 - this always
03:35 - executes I'm going to console.log X we
03:39 - have a reference error it is caught so
03:41 - it doesn't interrupt anything we're
03:43 - still executing the final block and we
03:46 - reach the end of our program if we don't
03:48 - run into any errors I'm going to
03:50 - console.log
03:52 - hello there are no errors that occur we
03:55 - don't end up catching anything this
03:57 - always executes the finally block and we
03:59 - we reach the end of our program so any
04:02 - code that is considered dangerous where
04:04 - it could cause an error you'll want to
04:05 - surround with a tri block and then catch
04:07 - them in the future if you ever open any
04:10 - files or establish a connection you'll
04:12 - want to finally block to close those
04:14 - connections but we haven't discussed
04:15 - that yet errors can also occur when
04:18 - accepting user input because we don't
04:20 - know what the user is going to type in
04:21 - in a worst case scenario a user could
04:24 - type in a malicious script in this next
04:26 - example I'm going to create a constant
04:29 - for a a dividend and a diviser const
04:32 - dividend equals window.
04:37 - prompt enter a
04:42 - dividend with division a dividend is the
04:45 - number that is being divided and we need
04:48 - a
04:50 - diviser a divisor is the number we're
04:52 - dividing by enter a
04:56 - divisor then I'm going to create a
04:58 - constant result result equals our
05:03 - dividend divided by our
05:07 - diviser
05:10 - console.log the
05:12 - result what is 1 / 2
05:16 - 0.5 now mathematically speaking we can't
05:20 - divide a number by zero if you attempt
05:22 - to do this in JavaScript I will divide 1
05:25 - by
05:26 - 0o you end up with infinity we can
05:29 - intentionally cause errors then handle
05:32 - them with try catch and optionally
05:34 - finally blocks so this code is
05:37 - considered dangerous I'll place it
05:39 - within a tri
05:43 - block we need to catch any
05:46 - errors catch an error object if it
05:49 - occurs then console.
05:53 - error the error
05:55 - object so just to test this instead of
05:58 - console.log log I'll misspell log as
06:02 - leg I should probably add a message just
06:05 - to confirm that we have reached the
06:07 - end you have reached the
06:11 - end 1
06:14 - /0 type error console. leg is not a
06:16 - function but we still reach the end our
06:19 - program isn't interrupted within a tri
06:22 - Block in certain situations we can
06:25 - intentionally cause an error I'm going
06:28 - to use an if statement
06:30 - if our
06:32 - divisor is equal to
06:35 - zero then I will throw a new error
06:40 - object we're calling the error
06:42 - Constructor to construct a new error
06:44 - object within the Constructor we have
06:47 - one argument we can pass in a message
06:49 - what is the error going to say you can't
06:53 - divide by
06:55 - zero okay let's try this enter dividend
06:59 - 1 enter diviser I'll typee in zero then
07:02 - press
07:03 - okay we have a caught error you can't
07:06 - divide by zero our program isn't
07:09 - interrupted we still reach the end let's
07:12 - change console. leg back to log cuz I
07:14 - forgot to do that what if somebody
07:16 - attempts to type in something that's not
07:18 - a number enter a dividend one enter a
07:21 - divisor I'll type in the word
07:23 - Pizza not a number you have reached the
07:25 - end I would like to throw a new error
07:28 - when somebody doesn't type in a number
07:30 - what I can do is that with our prompt I
07:33 - will typ cast it as a
07:37 - number if somebody enters in some
07:39 - non-numeric characters for either the
07:41 - dividend or the diviser we will store
07:44 - within there not a number so let's check
07:46 - that with an if statement if is not a
07:52 - number if our dividend is not a number
07:56 - or our divisor is not a
08:01 - number let's throw a new error throw new
08:08 - error values must be a
08:13 - number I will divide one by the word
08:16 - Pizza error values must be a number we
08:20 - still reach the end of our program with
08:22 - error objects you can even create your
08:24 - own in certain situations and then you
08:26 - can handle them however you want all
08:28 - right everybody body so those are error
08:30 - objects and how to handle them and error
08:32 - is an object that is created to
08:34 - represent a problem that occurs they
08:37 - occur often with user input or
08:39 - establishing some sort of connection to
08:42 - handle them you can use try catch and
08:44 - optionally finally blocks which are
08:47 - mostly used for cleanup if there's any
08:49 - code that can cause an error place it
08:51 - within a tri block and catch any errors
08:53 - that happen and well everybody that is
08:55 - how to handle errors in
08:58 - JavaScript