00:00 - hey well it looks like we're on
00:03 - exceptions today
00:04 - an exception is an error that occurs
00:06 - during execution
00:08 - so here's an example i have a small
00:09 - program where we will ask a user to type
00:12 - in two numbers divide those numbers
00:14 - then display the result so what if i
00:16 - type in something that's not a number
00:18 - i would like to divide the number 5 by
00:20 - the word pizza
00:22 - we'll encounter an exception and this
00:23 - interrupts our program we encountered a
00:26 - format exception input string was not in
00:28 - a correct format
00:30 - so any code that is considered dangerous
00:32 - where it might cause an exception
00:34 - we can surround with a try block so i
00:37 - would consider this code to be dangerous
00:39 - so type try then a set of curly braces
00:42 - surround any code that is considered
00:43 - dangerous with the set of curly braces
00:46 - now if we have a try block we also need
00:48 - a catch block
00:49 - so after the try block add catch and the
00:51 - catch block catches and handles
00:53 - exceptions when they occur
00:55 - but we need to specify what kinds of
00:57 - exceptions we would like to catch and
00:58 - handle
00:59 - so catch parentheses curly braces and
01:02 - this is kind of like a parameter so i
01:04 - would like to catch and handle
01:06 - any format exceptions
01:09 - then add e so if we encounter that same
01:13 - exception again
01:14 - instead of our program being interrupted
01:16 - we can do something else instead so
01:17 - let's write a message and let the user
01:19 - know to type in only numbers
01:21 - enter only numbers
01:25 - please and let's try that again
01:28 - enter number one five enter number two
01:31 - pizza enter only numbers please and this
01:34 - did not interrupt our program
01:36 - that's the important thing now these try
01:38 - and catch blocks
01:39 - they will only catch and handle format
01:41 - exceptions what if somebody
01:43 - accidentally divides by zero or
01:44 - intentionally does so
01:46 - so we do not have a catch block set up
01:48 - for that we can add multiple catch
01:50 - blocks
01:51 - so let's catch any divide by zero
01:54 - exceptions so catch parentheses curly
01:56 - braces
01:57 - and the exception we would like to catch
01:58 - is divide by zero exception
02:01 - then add e so if somebody attempts to
02:03 - divide by zero
02:04 - let's display a message you can't divide
02:08 - by zero idiot but this only occurs with
02:12 - integer division so let's turn our
02:15 - doubles
02:16 - x and y into integers and we'll have to
02:19 - change
02:20 - this cast as well so change two double
02:23 - two and thirty two
02:28 - so if we attempt to divide a number by
02:30 - zero which we can't mathematically do
02:32 - this is what happens enter number one
02:34 - five enter number two
02:36 - zero you can't divide by zero idiot and
02:38 - this will not interrupt our program
02:41 - now you can add a catch block that just
02:43 - catches everything but it's not
02:44 - considered good practice to add by
02:46 - itself
02:46 - so sometimes i'll add a like catch all
02:48 - block just in case if there's any
02:50 - exceptions i do not anticipate
02:52 - so at the end we can add exception e but
02:55 - it's difficult to let the user know what
02:57 - went wrong exactly because it'll just
02:59 - print when any exception occurs
03:01 - something went wrong so this will catch
03:04 - everything
03:05 - let's remove the first two catch blocks
03:08 - so let's take
03:09 - five divided by the word pizza something
03:12 - went wrong
03:12 - now catch exception e does catch
03:14 - everything but it's considered poor
03:16 - practice to have this by itself
03:18 - because basically you're shrugging when
03:20 - something goes wrong
03:21 - you should let the user know exactly
03:23 - what went wrong so it's better practice
03:26 - to catch specific exceptions first then
03:29 - at the end you can add you know
03:30 - exception e in case there's anything you
03:32 - don't anticipate
03:33 - by the way i changed x and y back to
03:35 - doubles now
03:36 - the last thing we need to talk about is
03:38 - the finally block
03:40 - the finally block is optional it always
03:42 - executes regardless if an exception is
03:44 - caught or not so at the end
03:46 - let's create a finally block type
03:48 - finally curly braces
03:50 - if there's anything you'd like to do
03:51 - after you're trying catch block
03:53 - regardless if an exception occurs or not
03:56 - you can place that here what people
03:57 - typically use the finally block for is
04:00 - to close any open files
04:02 - if they need to reset anything but for
04:05 - this example let's just print something
04:07 - so let's display a thank you message
04:09 - thanks
04:10 - for visiting if we do not encounter any
04:13 - exceptions
04:14 - this finally block will still execute
04:16 - five divided by one
04:18 - is five thanks for visiting now if we do
04:21 - encounter and catch an exception well
04:24 - that finally block is still going to
04:26 - execute as well thanks for visiting
04:29 - so yeah those are exceptions they are
04:31 - errors that occur during execution
04:33 - they interrupt the normal flow of our
04:35 - program any code that is considered
04:37 - dangerous
04:38 - we should surround with a try block and
04:40 - catch any exceptions when they occur
04:42 - and finally can be added and it will
04:45 - execute regardless if an exception is
04:47 - caught or not
04:48 - so yeah those are exceptions i will post
04:50 - this code in the comment section down
04:52 - below
04:52 - if you can smash that like button drop a
04:54 - random comment down below
04:56 - and well yeah those are exceptions in c
04:59 - sharp