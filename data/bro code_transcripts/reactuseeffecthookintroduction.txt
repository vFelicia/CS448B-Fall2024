00:00 - hey everybody we have an important topic
00:02 - to discuss today and that is the use
00:04 - effect react hook use effect is a react
00:07 - hook basically speaking use effect tells
00:10 - react to do some code when then pick one
00:14 - of the following do some code when this
00:16 - component rerenders or do this code when
00:20 - the component mounts when you mount a
00:22 - component that's when you create and
00:24 - append it to the domum that is known as
00:26 - mounting or do some code when the state
00:30 - of a value changes think of an effect as
00:33 - some side code you would like to perform
00:35 - I don't really think use effect is a
00:37 - great name if I could rename use effect
00:39 - I feel like a more appropriate name
00:41 - would be use side side code but that's
00:43 - just my opinion so think of an effect SM
00:46 - side code you'll write your side code
00:49 - within a function this can be a callback
00:52 - an anonymous function or an arrow
00:54 - function and optionally for the second
00:57 - argument you can pass in an array of
01:00 - dependencies if we would like to run our
01:02 - side effect on every render of the
01:04 - component we would just need to pass in
01:06 - a function such as an arrow function do
01:10 - this code every time the component
01:12 - reenders if you would like to perform
01:14 - some side code only when the component
01:16 - mounts and not during every render you
01:20 - would pass in an empty array of
01:22 - dependencies that tells react perform
01:25 - this code only once when the component
01:27 - mounts within your rave dependencies if
01:30 - you were to pass in a value this code
01:32 - would run when the component mounts plus
01:35 - when this value changes use effect has a
01:38 - bunch of different uses you'll see use
01:40 - effect with event listeners do
01:43 - manipulation subscriptions to realtime
01:46 - updates fetching data from an API and
01:48 - cleanup when a component unmounts
01:51 - unmounting is when you remove a
01:52 - component from the Dom whereas in
01:54 - mounting is adding a component to the
01:56 - Dom okay let me give you a few examples
01:59 - if in order for us to use use effect we
02:01 - have to import it from the react Library
02:04 - we have use State as well as use effect
02:08 - in this example we're going to create a
02:10 - count State
02:11 - variable const count and a Setter for
02:16 - count set count equals use State the
02:22 - initial state of count will be zero and
02:25 - we'll display our count within our
02:26 - return
02:27 - statement let's create one paragraph
02:31 - element that has text of count as well
02:35 - as our state variable of count and a
02:39 - button let's create a button element
02:42 - that has text of add when we click on
02:45 - ADD we will add one to our count we'll
02:48 - need a function to work with I will set
02:51 - the onclick event handler equal to a
02:54 - JavaScript function let's name this
02:57 - function add count then we just need to
03:01 - declare this
03:02 - function function add
03:07 - count all we'll do is use our Setter for
03:11 - count take the previous state of count
03:14 - as a parameter Arrow do this take the
03:18 - previous state of count add one every
03:21 - time I press the button we will add one
03:24 - to
03:25 - count now let's use use effect I can run
03:28 - some side code at every time this
03:30 - component rerenders I would just have to
03:32 - place that code within a function that
03:34 - will pass to use effect every time this
03:37 - component rerenders I will change the
03:40 - title of the document we'll need to use
03:43 - use effect be sure to place use effect
03:46 - near the top of your component we will
03:48 - call use effect there are two arguments
03:53 - a function and an array of
03:57 - dependencies I would like to perform
03:59 - some code every time the component
04:01 - reeners I do not need that second
04:05 - argument now we just need a function
04:07 - this can be a callback an anonymous
04:09 - function or an arrow
04:12 - function we're going to be using an
04:13 - arrow function every time this component
04:16 - rerenders what would we like to do let's
04:19 - access our document access the title set
04:23 - it equal to be a template string of
04:28 - count and insert our state variable of
04:31 - count Let me
04:33 - refresh every time this component
04:36 - renders including initially when we
04:38 - Mount the component we will perform this
04:41 - code where we update the title every
04:43 - time I press the added button the title
04:45 - is going to
04:49 - update if you would like your side code
04:52 - to run only when the component mounts
04:54 - when we create and add it to the Dom
04:56 - initially you'll pass in as a second
04:58 - argument an empty array an empty array
05:02 - of dependencies so if I were to run this
05:05 - again and press add well our title only
05:09 - updates
05:11 - once and no other time after that for
05:14 - example I might want to set my title to
05:16 - be my counter
05:20 - program I only need to update this title
05:22 - once I don't need to update it every
05:24 - time the component
05:26 - rerenders it's a oneandone effect in
05:29 - this case case I would like to add an
05:31 - empty array of dependencies because if I
05:33 - didn't well we would update this title
05:36 - every time the component
05:38 - rerenders when we really don't need to
05:41 - in this specific example it doesn't
05:43 - benefit us to update the title every
05:45 - time we add one to
05:47 - count let's revert those changes
05:50 - back you could pass in a value to your
05:53 - array of dependencies within your array
05:55 - of dependencies you can add a value
05:58 - let's add our count State variable what
06:00 - we're telling react is that when our
06:03 - component mounts plus when this value
06:06 - changes of count then do the side code
06:09 - so with what I have written currently
06:11 - every time I press the button the title
06:14 - is going to
06:16 - update if our count State variable
06:19 - updates perform our side code this is
06:23 - very similar to us not having that
06:24 - dependency array you know this will work
06:27 - too however since we don't have any
06:30 - dependencies this code is going to run
06:33 - for any reason that this component
06:34 - rerenders even for something completely
06:37 - unrelated by adding an array of
06:39 - dependencies and placing a value within
06:42 - do this code only when this value
06:45 - updates now to demonstrate we'll create
06:47 - another button to
06:50 - subtract the text will be
06:53 - subtract we'll create a function to
06:57 - subtract count
07:00 - we can copy this function paste it
07:04 - change the name to subtract count take
07:07 - the previous state of count minus one so
07:11 - if our count changes whether we add one
07:14 - or minus one the title of our document
07:17 - is still going to
07:19 - change if the value of count changes for
07:22 - any reason do the side code let's add
07:25 - another value to our dependency array we
07:28 - will create a state variable for
07:30 - color color and set
07:34 - color equals use State the initial state
07:39 - for my color will be green we'll flip
07:43 - between green and red green means go red
07:46 - means stop after our subtract button I
07:49 - will add a break and button two change
07:52 - the
07:53 - color change
07:56 - color the onclick event handler will
07:59 - equal this function of change
08:04 - color and we just need to Define this
08:06 - function
08:08 - function change
08:12 - color we will use the setter for set
08:17 - color we will use the previous state of
08:21 - color is the previous state of
08:24 - color strictly equal to
08:27 - Green trar operator is this true if it
08:31 - is return Red otherwise return
08:35 - green then we will take our paragraph of
08:38 - count access the style attribute set it
08:42 - equal to embed some JavaScript we need a
08:45 - JavaScript object so we need another set
08:47 - of curly braces take the color property
08:51 - set it equal to our color State
08:55 - variable so now the count is green with
08:58 - our title let's also add the
09:02 - color so I'm not going to add our color
09:05 - to our dependency array quite yet we can
09:08 - add the title updates we can subtract
09:12 - the title still updates but if we change
09:14 - the color the color changes of this
09:17 - paragraph element but not the title
09:19 - we're executing this code only when the
09:22 - count changes so even though I'm
09:24 - flipping between red and green the title
09:27 - is still staying the same if I were to
09:29 - add our color to our dependency array
09:32 - anytime the count or the color changes
09:35 - update the title so let's try this again
09:38 - the title updates when I add or
09:41 - subtract or change the color now the
09:44 - title is count one red count one green
09:48 - count one red count one green so that's
09:51 - where your dependency array comes in
09:53 - anytime one of these values change
09:56 - perform the side code now you may have
09:58 - noticed noed if you remove use
10:03 - effect well your title is still going to
10:08 - update so why would you need use effect
10:11 - there are a couple benefits of using use
10:13 - effect the first benefit is that by
10:15 - using use effect it keeps your code more
10:18 - organized if you were to look over some
10:20 - react code and look within the use
10:22 - effect hook you could tell when exactly
10:25 - this code runs does it run during every
10:28 - render
10:30 - only when the component mounts or when
10:32 - one of these values change if you didn't
10:35 - use use
10:36 - effect well then this code would run
10:39 - every single time regardless every time
10:41 - the component rerenders which you may
10:43 - not always want but not only that but
10:45 - with more advanced features such as
10:47 - event listeners or subscriptions you may
10:50 - want to remove or free up those
10:52 - resources you can return a cleanup
10:54 - function if you were to return a
10:56 - function when this component unmounts
10:59 - when we remove it from the Dom or before
11:02 - the next render you can perform some
11:05 - cleanup
11:06 - code for example if we were to add an
11:08 - event listener when the component mounts
11:11 - we would like to remove it before
11:12 - unmounting if we don't it may lead to
11:15 - unexpected Behavior so that's another
11:17 - benefit of using use effect perform some
11:20 - code only in certain situations and you
11:22 - do have the option to do some cleanup
11:24 - code before the next render or when you
11:27 - unmount the component discuss the return
11:29 - statement in this next demonstration and
11:31 - how it can be useful in this next
11:34 - example we're going to create a width
11:36 - and a height what the width and the
11:39 - height of our window is every time we
11:42 - adjust the size of the window the width
11:43 - and the height displayed is going to
11:45 - change we'll need two State variables to
11:47 - work with a
11:50 - width set
11:53 - width we will be using U
11:56 - state so the initial state of the width
11:59 - of the window access our window give me
12:03 - the inner width property then let's do
12:06 - this with
12:08 - height const height set height window do
12:15 - inner
12:17 - height within our return statement we
12:20 - will create a paragraph element that has
12:22 - text of window width we will display our
12:28 - width statement variable then add pixels
12:31 - for a unit of measurement then let's do
12:33 - this with height
12:36 - window height display our height State
12:40 - variable so we have window width and
12:43 - window height if I were to adjust this
12:45 - window nothing
12:47 - happens there's no change let's create a
12:50 - function to handle
12:53 - resize
12:55 - function
12:57 - handle resize
13:00 - no parameters we're going to set our
13:04 - width to be the inner width property of
13:08 - our
13:09 - window and set height H should be
13:14 - Capital set
13:16 - height take our inner height of our
13:19 - window and reset it so now we need to
13:22 - add an event listener because this still
13:24 - doesn't change we're going to add an
13:26 - event listener that will listen for a
13:28 - resize event whenever we resize our
13:31 - window if we attempt to use this without
13:33 - use effect but within the body of our
13:35 - component we will take our window add an
13:39 - event
13:42 - listener we need an
13:44 - event and a function to do something the
13:48 - event is going to be a resize event when
13:51 - the window is resized perform this code
13:55 - we will pass in a call back to handle
13:57 - resize and then for demonstration
14:00 - purposes I'm going to
14:03 - console.log
14:05 - event
14:07 - listener
14:08 - added we only need one event listener to
14:11 - make this program work now if I were to
14:14 - resize my window this does work our
14:18 - width State variable changes same thing
14:20 - goes with the
14:22 - height now let's take a look at our
14:25 - console there's an
14:27 - issue we only need one event listener to
14:30 - make this program
14:32 - work however every time the component
14:34 - rerenders we're adding a new event
14:37 - listener we've added over 1,000 event
14:40 - listeners that's really not good how
14:43 - about this only when our component
14:45 - mounts when we append it to the Dom we
14:48 - will add one event listener and that's
14:50 - it so guess what we're going to place
14:53 - our code within use
14:56 - effect we will pass in a function
15:00 - and an array of dependencies when would
15:03 - we like to add an event listener let's
15:05 - add an event listener only when the
15:08 - component mounts so we need to add an
15:10 - empty array of dependencies let's try
15:13 - that again I'm going to resize our
15:18 - window that should be good go to
15:23 - inspect yeah you can ignore all this
15:27 - garbage so if you have strict mode on
15:30 - which I do use effect is going to run
15:33 - twice it will run a development only
15:35 - setup and then a cleanup cycle so this
15:38 - is normal so we didn't add thousands of
15:41 - event listeners besides the first
15:43 - cleanup cycle because I have strict mode
15:45 - on we're only adding one event listener
15:47 - because that's all we need we don't need
15:50 - thousands of event listeners if you ever
15:52 - need to unmount the component meaning
15:54 - remove it from the Dom use effect has
15:57 - another use and that is is adding a
15:59 - return
16:00 - statement to do any cleanup you will
16:03 - return a function do this code either
16:07 - before the next reender or when the
16:09 - component unmounts if we add an event
16:12 - listener then we unmount the component
16:15 - it would be good practice to remove that
16:17 - same event listener if you don't that
16:19 - can lead to unexpected behavior when we
16:22 - unmount our component we will take our
16:26 - window then remove
16:30 - event
16:32 - listener we will remove the event of
16:36 - resize and a call back to handle
16:40 - resize when we are done with this
16:42 - component free up any resources so that
16:45 - it doesn't lead to unexpected Behavior
16:48 - let me add one more line of code too
16:50 - let's
16:53 - console.log event listener
16:57 - removed let's refresh resize our window
17:00 - a few
17:02 - times go to
17:05 - inspect
17:06 - console okay let's take a look since I
17:09 - am in strict mode we'll run our use once
17:12 - during the development cycle and then
17:14 - clean it up right away then we will add
17:17 - that event listener only once we didn't
17:20 - unmount this component yet so we didn't
17:22 - remove it so by adding a return
17:24 - statement you can do any cleanup either
17:27 - before the next Reen
17:29 - or when you unmount the
17:30 - component within a component you can add
17:33 - more than one use effect hook we're
17:35 - going to add a second use effect hook if
17:38 - the width or the height changes we're
17:40 - going to update the title of our
17:42 - document to display the width and the
17:44 - height so let's add another use effect
17:47 - hook use
17:50 - effect what code would we like to
17:54 - perform let's access our document take
17:57 - the title set it equal to be let's use a
18:01 - template string let's say size
18:05 - placeholder width x
18:11 - height when would we like to use this
18:14 - effect let's use this effect when the
18:17 - width and the height update we will need
18:19 - that dependency array we will list the
18:23 - width and the height State
18:25 - variables so on Mount we'll get the size
18:29 - right away 227 by
18:32 - 396 now every time the width and the
18:34 - height changes the title is going to
18:47 - update so you can have more than one use
18:50 - effect hook within your component all
18:53 - right everybody so that is the use
18:54 - effect hook it's a react hook that tells
18:57 - react to do the code when either the
19:00 - component rerenders this component
19:02 - mounts or the state of a value changes
19:06 - there are two arguments a function that
19:08 - contains the code you would like to
19:10 - perform and optionally an array of
19:13 - dependencies based on what you pass in
19:15 - to use effect you'll either run this
19:18 - code after every rerender run only when
19:21 - the component mounts or run when the
19:24 - component initially mounts plus when the
19:26 - value changes use effect is great with
19:29 - event listeners Dom manipulation
19:32 - subscriptions to real-time updates
19:34 - fetching data from an API or clean up
19:36 - when a component unmounts we will have
19:38 - more practice with use effect in the
19:40 - next video where we will create a
19:42 - digital clock and well everybody that is
19:44 - an introduction to use effect in
19:50 - react