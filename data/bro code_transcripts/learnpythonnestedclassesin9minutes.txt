00:00 - hey what's going on everybody so in
00:01 - today's video I got to talk about nested
00:03 - classes in Python a nested class is a
00:06 - class defined inside of another class
00:09 - this has a few benefits we can logically
00:11 - group classes that are closely related
00:14 - we can encapsulate private details that
00:17 - aren't relevant outside of the outer
00:18 - class and also it helps keep our
00:20 - namespace clean it reduces the
00:23 - possibility of naming conflicts so for
00:25 - example let's say we have two classes
00:28 - both named employee
00:31 - within this class I'm just going to
00:33 - print
00:34 - something this is the first
00:38 - class then let's copy our employee class
00:41 - paste it
00:42 - again this is the second
00:46 - class we have a naming conflict we have
00:48 - two classes with the same name if I were
00:51 - to run this program we will execute both
00:54 - this is the first class this is the
00:56 - second class it is fairly noticeable
00:58 - that we have two classes with the same
00:59 - name name but with python we do a lot of
01:02 - importing and exporting of large files
01:04 - we may not realize there's a name
01:06 - conflict one concept that'll help us
01:09 - avoid naming conflicts is the use of
01:11 - nested classes let's say we have
01:13 - employees for a company and another set
01:15 - of employees for a nonprofit
01:17 - organization I could write something
01:19 - like this we'll create a class of
01:23 - company within this class of company we
01:26 - will have an inner class of employee
01:28 - with our second employee class we will
01:30 - create an outer class of
01:37 - nonprofit this is perfectly fine we can
01:40 - have two classes with the same name as
01:43 - long as they're within different
01:44 - Scopes these two employee classes might
01:47 - have different attributes depending on
01:49 - who they work for if they work for a
01:51 - company they might have one set of
01:53 - attributes if they work for a nonprofit
01:55 - they might have a different set of
01:56 - attributes so by using nested classes
01:59 - this helps keep the namespace clean we
02:01 - can reuse this employee class because
02:03 - they have different Scopes now what
02:05 - we're going to do in this
02:07 - example what we'll do in this example is
02:09 - create some employee objects that belong
02:11 - to a company object as a placeholder for
02:14 - now I'll write pass within the employee
02:16 - class with our class of company let's
02:19 - define a Constructor do pay attention to
02:21 - the indentation we are within the
02:23 - company class but not the employee class
02:27 - this Constructor is for the company the
02:28 - company object we're going to
02:31 - create if we construct a company object
02:34 - we need a company name such as the
02:37 - Crusty
02:39 - Krab I will assign self. compan name
02:44 - equals the company name that we
02:46 - receive we are also going to declare an
02:49 - attribute of
02:51 - employees this attribute will be an
02:53 - empty list we will append employee
02:56 - objects to our list of
02:58 - employees then and we will create a
03:00 - method to add
03:04 - employee we will need a name meaning
03:07 - name of the employee and a position
03:10 - what's their job for now I'll write pass
03:14 - we'll get back to this
03:16 - later and I will Define a method of list
03:23 - employees and again I'll write pass okay
03:26 - let's be sure that our company name
03:28 - works
03:31 - I'm going to create a company object
03:34 - company equals company but I have to
03:36 - pass in a company
03:38 - name I will pick the Crusty
03:42 - Crab then just to be sure that this
03:44 - works I will display our company's
03:48 - company name
03:51 - attribute that would give me the Crusty
03:54 - Crab so we know that that
03:58 - works within our employee class let's
04:00 - define a Constructor Define
04:04 - init we need a name and a
04:09 - position self. name equals
04:13 - name
04:16 - self.pos equals
04:18 - position let's create one more method of
04:22 - Define get details we will return the
04:27 - details of an employee all we're going
04:30 - to do is return an FST string add two
04:34 - placeholders we will return self.
04:37 - name and
04:41 - self.pos all right now within our ad
04:43 - employee
04:44 - method we will construct a new employee
04:49 - object equals now if we're going to
04:52 - access this inner class of employee
04:55 - we're going to prefix
04:57 - self self meaning this company object
04:59 - that we're currently working
05:01 - with we need the class of employee then
05:05 - we'll call The Constructor but we have
05:07 - to pass in a name and a position when we
05:10 - receive a name and a position we will
05:13 - pass that to the employee
05:15 - Constructor once we have our new
05:17 - employee object we're going to take our
05:19 - list of
05:21 - employees self.
05:24 - employees use the append method of lists
05:28 - then add our object of new employee to
05:31 - this empty
05:33 - list let's create a few employee objects
05:36 - we'll take our company use the ad
05:39 - employee method that we have created we
05:42 - need a name and a
05:45 - position I will pick Eugene for Eugene
05:49 - Krabs his position is that he is the
05:52 - manager let's create two more take our
05:55 - company object use the ad employee
05:58 - method that we have defined find I will
06:01 - pass in a name of this employee as
06:03 - SpongeBob his position is that he is a
06:06 - cook then we have Squidward company. add
06:11 - employee method first name
06:16 - Squidward his position is that he is a
06:19 - cashier so this should run with no
06:22 - problems now I would like to list all of
06:25 - the employees at this company we'll need
06:28 - to rely on this get details me
06:30 - method so when we list our employees we
06:34 - will return a list
06:36 - comprehension for every
06:39 - employee in self.
06:43 - employees this is an attribute it's a
06:46 - list of employee objects it is
06:50 - iterable take each employee that we're
06:54 - iterating through call the get details
06:58 - method and return
07:01 - it now if I was to take my company then
07:04 - call the list employees
07:09 - method whoops I forgot to print
07:14 - it we will print each employees name and
07:18 - their
07:19 - position however I think this would look
07:21 - better if we were to use a for
07:23 - Loop for
07:26 - every
07:27 - employee in
07:30 - take our
07:31 - company call the list employees
07:35 - method during each
07:37 - iteration we will print each
07:47 - employee we have Eugene that's Mr Krabs
07:50 - the manager SpongeBob The Cook and
07:53 - Squidward the cashier to demonstrate the
07:56 - reusability of classes let's create a
07:58 - second company object
08:00 - that has its own
08:01 - employees let's rename company as
08:04 - company
08:05 - one then we will create Company
08:11 - 2 Company 2 equals call the company
08:14 - Constructor my second company will be
08:17 - the Chum
08:19 - Bucket we'll take Company 2 then add two
08:22 - employees company 2. add
08:27 - employee we will pick
08:31 - Sheldon Sheldon is the
08:38 - manager company
08:40 - 2. add
08:44 - employee Karen will be the
08:49 - assistant for every employee in Company
08:52 - 2 list the employees during each
08:55 - iteration print the current employee
08:59 - we have Sheldon that's Plankton's first
09:02 - name he's the manager and Karen is his
09:05 - assistant all right everybody so those
09:07 - are nested classes it's a class defined
09:10 - inside of another class you have an
09:12 - inner class and an outer Class A few of
09:15 - the benefits is that we can logically
09:16 - group classes that are closely related
09:19 - such as having employee objects within a
09:22 - company object we can encapsulate
09:24 - private details that aren't relevant
09:26 - outside of the other class we may have
09:28 - no need to create employee objects
09:30 - outside of this class and by using
09:32 - nested classes it helps keep the name
09:34 - space clean it reduces the possibility
09:37 - of naming conflicts with another type of
09:40 - organization we could create another
09:42 - inner employee class and well everybody
09:44 - those are nested classes in Python