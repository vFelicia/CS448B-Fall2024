00:00 - hey y'all everybody so let's talk about
00:02 - tree traversal tree traversal is the
00:04 - process of visiting all the nodes of a
00:06 - tree we don't have random access so we
00:08 - begin at the root node and follow a
00:10 - certain procedure to visit all of the
00:12 - nodes of a tree and there's three that
00:14 - we're going to talk about in order post
00:16 - order and pre-order traversal in this
00:19 - example we will be working with a binary
00:21 - tree not a binary search tree because
00:24 - these values are not in binary search
00:26 - tree order so each node has at most two
00:30 - children a left node and a right node
00:33 - let's begin with an in-order traversal
00:35 - here's a recursive method that will
00:37 - navigate a tree in order using recursion
00:41 - we visit as many left nodes as we can
00:44 - followed by the root node and then any
00:46 - right nodes the entry point is always
00:48 - the root and using recursion we will go
00:51 - as far left as we can so we go from a to
00:54 - b to d
00:56 - so we will mark this node as visited
00:59 - then visit the root node next
01:01 - and then the right node since we can't
01:03 - go left anymore we're going to visit the
01:05 - root node
01:07 - a
01:07 - all that's left is to go right so we
01:09 - will go to c
01:11 - however we can go left so we will visit
01:13 - f first
01:15 - then c
01:16 - then g
01:17 - so this is in order traversal when used
01:20 - in the context of a binary search tree
01:22 - we will visit all of these nodes in
01:24 - non-decreasing order so again that was
01:28 - d
01:29 - b
01:30 - e
01:32 - a
01:33 - f
01:34 - c
01:34 - g
01:36 - we go left root right and here's that
01:39 - method again
01:40 - and here's post order traversal it's
01:43 - used to delete a tree from leaf to root
01:46 - and we follow this pattern left right
01:49 - root
01:49 - we will use recursion to visit the left
01:52 - children then the right children then
01:54 - the root
01:55 - so a is our entry point we are going as
01:58 - far left as we can go from a to b to d
02:02 - mark d is visited then we go right using
02:05 - recursion go from d
02:07 - to e
02:08 - then root
02:09 - left right root so we go back up go as
02:14 - far right as we can unless we encounter
02:16 - a left child which we did so we will
02:18 - mark f as visited then g
02:21 - right
02:22 - root
02:23 - left right root
02:25 - and all that's left is the root node
02:28 - so that is post order traversal it's
02:31 - used to delete a tree from leaf to root
02:34 - and lastly we have pre-order traversal
02:37 - pre-order traversal is used to create a
02:40 - copy of a tree we visit any root nodes
02:42 - first then left then right
02:45 - so we will mark a as visited our entry
02:48 - point then visit the left child and we
02:51 - will continue to go left
02:53 - then go right
02:54 - so we can't go left anymore we're going
02:56 - to go right
02:57 - mark the root as visited
02:59 - then left then right
03:01 - this is used to create a copy of a tree
03:04 - but in order to create a copy of a tree
03:06 - you need to create a root node and a
03:07 - branch node to hold the leaves
03:10 - so again that's
03:11 - root
03:12 - left we're still going left
03:15 - right
03:16 - root
03:17 - left
03:18 - right
03:19 - a b d
03:21 - e
03:22 - c f g
03:24 - that is pre-order traversal it's used to
03:26 - create a copy of a tree well okay then
03:29 - everybody that is a few ways in which we
03:31 - can traverse a tree like i said normally
03:34 - we don't have random access so the entry
03:36 - point is the root node and you can
03:38 - either follow an in order post order or
03:41 - pre-order traversal depending on what
03:43 - you need to do with this tree so that's
03:45 - tree traversal and computer science if
03:47 - you liked this video please be sure to
03:49 - give it a thumbs up leave a random
03:51 - comment down below and subscribe if
03:53 - you'd like to become a fellow bro