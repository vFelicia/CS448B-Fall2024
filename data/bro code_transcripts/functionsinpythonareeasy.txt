00:00 - hey everybody today I need to explain
00:01 - functions think of a function as a block
00:04 - of reusable code to invoke a function
00:07 - you place a set of parentheses after the
00:09 - function name to invoke it here's a
00:12 - scenario I need to sing Happy Birthday
00:14 - three times I know it's a weird example
00:16 - but it makes a lot of sense just trust
00:18 - me on this if I need to sing Happy
00:20 - Birthday three times I would write
00:22 - something like this I'm going to create
00:24 - my own version of the Happy Birthday
00:26 - song
00:27 - thank you
00:32 - this is one verse if I need to repeat
00:35 - this code three times without using
00:37 - functions I could either repeat this
00:40 - code
00:41 - or maybe place it within a loop
00:44 - so here's my Happy Birthday song three
00:46 - times but there's a better way of
00:48 - handling this that doesn't involve
00:50 - repeating our code or using Loops what
00:52 - if I could write this code once then
00:55 - reuse it whenever I need to that's where
00:57 - functions come in to define a function
01:00 - you would type def then a unique
01:03 - function name let's name this function
01:05 - the happy birthday function add a set of
01:08 - parentheses a colon any code that
01:11 - belongs to the function you'll want to
01:13 - indent underneath then to invoke this
01:16 - function I would type the name of the
01:18 - function happy birthday add a set of
01:21 - parentheses
01:22 - and that's it
01:24 - when you invoke this function you will
01:27 - execute this code once if I need to
01:29 - execute this code three times I would
01:32 - just call it two more times
01:34 - happy birthday happy birthday happy
01:35 - birthday to invoke a function you type
01:38 - the function name then add a set of
01:39 - parentheses I like to think of the
01:41 - parentheses as a pair of telephones
01:43 - talking to each other you call a
01:45 - function to invoke it hey happy birthday
01:47 - function execute your code with
01:50 - functions you are able to send data
01:52 - directly to a function using what are
01:54 - known as arguments you can send values
01:57 - or variables directly to a function
01:59 - place any data within the set of
02:01 - parentheses I'll send my function a
02:03 - first name any data you send a function
02:05 - are known as arguments but you need a
02:08 - matching set of parameters that are in
02:10 - order what exactly is the data we're
02:13 - sending in well it's a name I will add
02:15 - one parameter to my happy birthday
02:17 - function I will name this data name a
02:20 - parameter is kind of like a temporary
02:22 - variable that's used within a function
02:24 - I'm going to replace this instance of U
02:27 - with a name I will use an F string
02:31 - replace you with the placeholder I will
02:34 - add my parameter name
02:36 - so happy birthday to bro
02:39 - we could pass in some other names
02:42 - what about
02:43 - Steve
02:45 - and
02:47 - Joe
02:49 - here we are happy birthday to bro happy
02:52 - birthday to Steve happy birthday to Joe
02:55 - when you invoke a function you can send
02:57 - more than one argument let's send an age
02:59 - this time
03:01 - I'll send 20
03:03 - 30.
03:04 - and 40.
03:06 - but when I run this we have an error
03:09 - we're passing in two arguments but our
03:12 - function is set up only to take one I
03:14 - would need a matching number of
03:16 - arguments to invoke this function we
03:18 - will need two parameters we have a name
03:21 - and we have an age
03:24 - then let's use this age you are let's
03:27 - make this line enough string
03:31 - age years old let's try that again
03:37 - happy birthday to bro you are 20 years
03:40 - old happy birthday to Steve you are 30
03:43 - years old happy birthday to Joe you are
03:45 - 40 years old when you invoke a function
03:47 - you can pass in some data those are
03:50 - known as arguments but you'll need a
03:52 - matching set of parameters the order
03:54 - does matter let's see what happens when
03:56 - I switch these two parameters age then
03:59 - name
04:02 - happy birthday 220 you are bro years old
04:05 - happy birthday 230 you are Steve years
04:08 - old happy birthday 240 you are Joe years
04:12 - old so the position of the parameters
04:14 - does matter same thing goes with the
04:16 - arguments you also could name these
04:19 - parameters something unique maybe X and
04:22 - Y happy birthday to X you are y years
04:25 - old
04:27 - that's also valid let's try another
04:29 - example I'm going to create a function
04:31 - to display an invoice
04:36 - there will be three parameters a
04:38 - username
04:40 - and amount and a due date
04:46 - let's print
04:47 - hello
04:49 - I should make this an F string
04:52 - username
04:56 - we'll use another F string
05:00 - your bill of
05:04 - amount
05:07 - let's precede this placeholder with the
05:09 - unit of currency
05:10 - I will also add a format specifier
05:13 - 0.2 f
05:15 - is do
05:18 - on our due date
05:20 - whatever that parameter is
05:22 - to invoke this function we will type the
05:24 - function's name add a set of parentheses
05:26 - a username and a mount and a due date
05:31 - let's make up some username
05:33 - and amount I guess 42.50 I'm just making
05:37 - up a number here
05:39 - then a due date the first of January I
05:43 - guess
05:44 - here is my invoice hello bro code here
05:46 - bill of 42.50 is due on January 1st
05:50 - let's change these arguments
05:52 - Joe schmoe is the username he owes 100
05:56 - and one penny due on the first of
06:00 - February or January 2nd depending on how
06:03 - you read dates in your region
06:05 - hello Joe schmoe your bill of 100 and
06:08 - one cent is due on one slash two that's
06:11 - another example now we need to explain
06:13 - the return statement return is a
06:15 - statement that is used to end a function
06:18 - and send a result back to the caller
06:21 - here's an example we have a variable z z
06:24 - will equal will invoke a function to add
06:27 - two numbers together such as the numbers
06:30 - one and two when we invoke a function we
06:34 - can send some data back after adding one
06:36 - and two we will send the result which
06:39 - would be three then this value can be
06:42 - assigned to a variable
06:43 - then we can print whatever Z is so let's
06:46 - create some functions let's create a
06:49 - function to add two numbers together
06:51 - the parameters will be X and Y
06:55 - let's say Z equals
06:58 - X Plus y then we will return
07:03 - our value Z
07:05 - so I'm not going to print Z directly
07:07 - right now
07:09 - let's subtract X and Y
07:12 - subtract Z equals x minus y return Z
07:18 - multiply
07:22 - times y
07:26 - then divide
07:32 - x divided by y return Z let's invoke our
07:36 - add function pass in two numbers one and
07:39 - two
07:40 - then I'm going to print the result
07:44 - after adding these two numbers together
07:46 - the result is three
07:49 - what about subtract
07:51 - subtract one and two the result is
07:54 - negative one
07:57 - multiply
08:01 - the result is 2.
08:03 - then divide
08:06 - 1 divided by 2 is 0.5 after we resolve
08:10 - this function a value is returned just
08:13 - imagine that after we finish this
08:15 - function this function becomes whatever
08:17 - is returned three this function becomes
08:20 - negative one
08:21 - this function becomes two this function
08:24 - becomes
08:26 - 0.5
08:28 - let's write something a little more
08:29 - complex
08:30 - we will create a function to create a
08:33 - full name
08:34 - create
08:36 - name we'll need two parameters for a
08:39 - first name and a last name I'll name
08:41 - these first and last
08:43 - what do we want to do within this
08:45 - function let's capitalize the user's
08:48 - first name first equals first dot
08:51 - capitalize method
08:54 - then do the same thing with the last
08:55 - name
08:57 - last equals last dot capitalize
09:02 - then I'm going to return the user's
09:04 - first name plus their last name
09:07 - then I'll add a space in between their
09:09 - first and last name
09:11 - this is also valid
09:13 - outside of the function let's create a
09:15 - full name variable that invoke the
09:18 - create name function so this function is
09:21 - going to capitalize the first and last
09:23 - name for us
09:24 - I'll type in my first name
09:26 - all lowercase same thing with my last
09:29 - name
09:30 - then let's print our full name
09:35 - and here is my full name variable we
09:38 - sent our function some arguments we have
09:40 - some parameters set up we took those
09:42 - values made them uppercase then
09:45 - concatenated these strings together then
09:47 - returned them as a single string let's
09:49 - try this with a different name
09:51 - SpongeBob
09:53 - SquarePants
09:57 - SpongeBob now has a full name the first
10:00 - and last names are now capitalized using
10:02 - the return statement you can return some
10:04 - data back to the place in which you call
10:07 - a function well everybody that's a
10:09 - function it's a section of reusable code
10:12 - to call a function you type the
10:14 - function's name add a set of parentheses
10:16 - you can send a function some data which
10:19 - are known as arguments but you'll need a
10:22 - matching set of parameters you also do
10:24 - have the option of returning some data
10:26 - back to the place in which you invoke a
10:28 - function we'll be using functions a lot
10:30 - in the future but we will get more
10:32 - practice with them and those are
10:34 - functions in Python