00:02 - hey guys i'm gonna explain what
00:04 - variables are a variable you probably
00:06 - remember from middle school math class a
00:08 - variable is a representation of some
00:11 - number or value there are two steps to
00:13 - creating and using a variable
00:14 - declaration and assignment we'll begin
00:17 - with declaration to declare a variable
00:19 - we need to list the data type of what
00:21 - we're storing exactly in programming you
00:24 - can store more than just numbers you can
00:25 - store characters even whole sentences
00:28 - etc let's work with whole numbers to
00:31 - store a whole number we will type int
00:33 - for integer then we need a unique
00:35 - identifier for this variable for now
00:38 - let's just say x we're used to working
00:40 - with like x and y in math class right we
00:42 - will end the statement with a semicolon
00:45 - this step is declaration
00:48 - now to assign a variable you take the
00:51 - variable's name that unique identifier
00:53 - then we will set this equal to
00:56 - some number since we declared this
00:57 - variable as an int it will store an
01:00 - integer maybe like five now this
01:03 - variable behaves as if it was the value
01:05 - that it contains it will behave as if it
01:08 - was the number five then to display a
01:10 - variable we can use standard output
01:13 - std
01:14 - c out
01:16 - we will display
01:18 - x
01:19 - and let's see what we have
01:24 - there's our value five this first step
01:26 - is declaration the second step is
01:29 - assignment the nice thing about doing
01:30 - this in two steps is that you can later
01:33 - assign your variable a value if you know
01:35 - what value you would like to give your
01:36 - variable right away you can do that at
01:38 - the beginning of your program you could
01:40 - combine both of those steps
01:42 - int x equals 5 and that would do the
01:44 - same thing in cases where you don't know
01:46 - what value you would like to give a
01:48 - variable you could assign it later such
01:50 - as when you accept user input you don't
01:52 - know what the user is going to type so
01:53 - let's create another
01:55 - int
01:56 - y
01:57 - equals 6
01:58 - then let's display whatever y is
02:00 - i'll add a new line
02:03 - let's copy this paste it
02:06 - okay x is five y is six we could even do
02:10 - something like this let's say int
02:13 - sum
02:14 - equals x plus y
02:17 - then we'll display whatever our sum
02:19 - variable is
02:20 - c out sum
02:22 - the sum of x plus y is 11. now there's
02:26 - different data types depending on what
02:27 - you need to store within a variable
02:29 - exactly the int data type stores a whole
02:32 - integer let's think of a few examples of
02:34 - whole integers what about an age
02:37 - that's typically a whole number
02:40 - inch age equals 21. let's think of two
02:43 - more examples
02:45 - what about a year
02:46 - int year equals
02:49 - 20 23. how about days int days equals
02:55 - seven the int data type can only store a
02:57 - whole number
02:59 - with days what if we assign this a value
03:01 - of 7.5 let me show you what happens
03:07 - all right i will display days
03:15 - all right that decimal portion is
03:16 - truncated when i display days and we
03:19 - attempt to assign 7.5
03:21 - well this variable can't store that
03:23 - decimal so it's truncated if you need a
03:26 - number that includes a decimal portion
03:28 - there's a different data type for that
03:30 - and that is a double
03:35 - this is a number
03:37 - including
03:39 - decimal a few examples of a double would
03:41 - be maybe a price there's dollars and
03:44 - cents
03:45 - double
03:47 - price
03:48 - equals
03:49 - 10.99
03:52 - what about a gpa a grade point average
03:55 - that includes a decimal
03:57 - double gpa equals 2.5
04:03 - then maybe a temperature
04:06 - double
04:08 - temperature
04:10 - equals
04:12 - 25.1 guess this could be in either
04:15 - celsius or fahrenheit then let's display
04:17 - maybe price
04:20 - price
04:24 - yeah and that decimal portion is not
04:26 - truncated much like what you see with
04:29 - whole integers if you need a number that
04:31 - includes a decimal portion use a double
04:33 - now we have the char data type that
04:35 - stores a single character
04:38 - type char
04:40 - maybe we're working with student grades
04:42 - i'll name this variable grade
04:46 - equals
04:47 - then to store a single character you use
04:49 - single quotes
04:50 - this student has an a
04:53 - two more examples what about an initial
04:57 - singular not initials
04:59 - char
05:01 - initial
05:02 - uh what about b
05:05 - so i'm going to display initial
05:11 - initial
05:14 - okay
05:15 - we have our single character of b
05:18 - now check this out what if i attempt to
05:19 - store more than one character i'll add c
05:23 - we have a warning we have an overflow in
05:25 - conversion from int to char
05:27 - so what's displayed is the last
05:29 - character just c so chars can only store
05:33 - a single character here's one more
05:35 - example of a char data type what if
05:37 - we're working with currency what type of
05:39 - currency will we work with
05:41 - char
05:43 - currency
05:44 - equals
05:46 - maybe a dollar sign
05:48 - if we're working with a different type
05:49 - of currency we could change this to a
05:51 - different symbol yeah that's the char
05:54 - data type it stores a single character
05:56 - next on our list is booleans
06:00 - boolean a variable that's boolean has
06:03 - only two states
06:04 - true or false to create a boolean
06:08 - variable you type bull
06:10 - then a variable name so these are
06:12 - applicable to anything that has two
06:14 - states what if somebody is a student
06:17 - they're either a student or not a
06:18 - student
06:20 - bool student
06:22 - equals true
06:24 - if they're not enrolled in classes or
06:26 - they graduated you could set this to be
06:28 - false think of a light switch the light
06:30 - switch can either be on or off you could
06:33 - say a light switch is boolean there's
06:35 - only two states true or false how about
06:38 - bull power is something powered on or
06:40 - not
06:42 - power equals true if it's turned off
06:44 - that could be false maybe we have a
06:46 - store and we need to mark if something
06:49 - is for sale or not like is it available
06:52 - bool
06:53 - for sale
06:55 - equals true
06:57 - if an item in our store isn't for sale
06:59 - like it's not available we could set
07:00 - this to be false so that's the idea
07:02 - behind boolean values it has two states
07:05 - true or false the last data type i'll
07:08 - cover is strings a string is technically
07:11 - an object that represents a sequence of
07:14 - text think of it as the char data type
07:17 - but we can store more than one character
07:19 - even whole sentences like a name or an
07:22 - address strings are provided from the
07:24 - standard namespace to declare a string
07:27 - we would type standard
07:30 - string
07:31 - then a variable name
07:33 - what about just name like restoring a
07:35 - user's name
07:36 - place your text within a set of double
07:38 - quotes then why don't you type your
07:40 - first name
07:41 - then we will store that within this
07:43 - variable name
07:44 - then to test it let's display it
07:47 - standard output we will display name
07:53 - and there is your first name
07:55 - let's create a couple more examples
07:57 - what about a day of the week
08:00 - standard
08:01 - string
08:02 - day
08:04 - then pick a day i like friday
08:07 - what about food
08:09 - standard string
08:11 - food
08:12 - i like pizza
08:14 - i'll store this series of text as a
08:16 - string
08:18 - then maybe an address standard
08:21 - string
08:23 - address
08:25 - equals make up some address
08:27 - one two three fake street
08:30 - basically speaking a string is a type of
08:33 - object that represents a sequence of
08:36 - text such as a name
08:39 - a day an address etc
08:42 - now i'm going to show you how we can
08:43 - display a variable along with some text
08:46 - i would like to display hello then
08:49 - whatever your name is i will type what
08:51 - is known as a string literal we're
08:53 - literally printing a string
08:55 - hello
08:57 - follow this string of text with a
08:59 - variable
09:01 - my variable name is good
09:03 - then let's display it
09:08 - hello then whatever your first name is
09:10 - but you do have to pay attention to
09:11 - spacing
09:13 - after my word hello i'm going to add a
09:15 - space
09:17 - there hello
09:19 - bro
09:20 - then let's display our age
09:24 - so i'm going to add a new line character
09:31 - standard output we will display
09:34 - u are
09:36 - age
09:39 - years old
09:45 - there hello bro you are 21 years old uh
09:48 - make sure to pay attention to the
09:49 - spacing as well because it's easy to
09:51 - mess that up
09:53 - all right so those are variables we
09:55 - covered a few of the basic data types
09:57 - but there's more advanced data types
09:58 - once we gain a little bit more
10:00 - experience with this that i'll cover we
10:02 - have integers which store a whole number
10:04 - doubles which are numbers that include a
10:07 - decimal portion
10:08 - chars are single characters booleans are
10:11 - either true or false then strings
10:14 - represent a sequence of text an
10:16 - important note with strings is that you
10:18 - can include numbers but they're treated
10:20 - differently so yeah those are variables
10:23 - in c plus plus your assignment is to in
10:26 - the comment section post a integer
10:28 - variable a double
10:30 - a character boolean and a string think
10:33 - of some examples preferably some
10:35 - examples that i may have not covered
10:37 - already that would be good practice well
10:39 - yeah and that's an introduction to
10:41 - variables in c plus plus