00:00 - hey everybody in today's video I'm going
00:01 - to show you how we can create a digital
00:03 - clock using react so sit back relax and
00:07 - enjoy the show okay let's get started
00:09 - everybody if you would like a background
00:10 - image for your app place that image
00:12 - within your assets folder here's the
00:14 - image that I'm going to use I found it
00:16 - online we will create a digital clock
00:19 - component within our source
00:21 - folder digital clock.
00:25 - jsx we will need to import two hooks
00:29 - import from react use object
00:32 - destructuring to get the use State hook
00:36 - as well as the use effect Hook from its
00:40 - location of
00:42 - react we're going to create a function
00:45 - based component of
00:47 - digital clock no parameters then be sure
00:51 - to export it at the end export
00:55 - default defaulty default digital clock
01:01 - we do need to return something for the
01:03 - time being we are going to return a
01:07 - fragment just so that everything runs
01:10 - back within our app component we need to
01:14 - import our digital clock component from
01:18 - its
01:20 - locationd digital clock.
01:23 - jsx we will include one digital clock
01:28 - component with our digital clock
01:30 - component we'll create the following
01:33 - HTML we will create a div element to
01:36 - contain
01:40 - everything this outer div element is
01:42 - going to have a class
01:44 - name of
01:46 - clock
01:48 - container within this development we
01:50 - will create a nested development this
01:53 - development will have a class
01:56 - name of
01:58 - clock we have a clock within a clock
02:01 - container within this inter div element
02:03 - we will create a span element to display
02:06 - a time until we get the time working
02:09 - let's display a bunch of zeros for the
02:11 - hours minutes and seconds and here's our
02:16 - time but it's a little small I'm zoomed
02:19 - in currently okay let's go to our CSS
02:22 - stylesheet we will select the following
02:25 - the body of our
02:27 - document our clock container class
02:32 - and our class of
02:34 - clock if you would like to add a
02:36 - background image here's what you can do
02:39 - within the body of your document we will
02:42 - set the background image
02:45 - property to be we will use the URL
02:49 - function within this function we will
02:51 - pass in a relative or absolute file path
02:54 - to your image from the index file we'll
02:57 - have to access the assets folder
03:00 - assets the name of the image my image is
03:03 - named background and this is a
03:06 - JPEG okay here's my
03:10 - image but it's a little big then we will
03:13 - take our
03:14 - background position property set it to
03:18 - be Center to Center the image now it
03:21 - does
03:23 - repeat we'll set the background repeat
03:27 - property to be no
03:31 - repeat we'll set the background size to
03:33 - cover to cover this develop the outer
03:38 - development background size cover now
03:43 - we'll take the
03:44 - background attachment property set it to
03:48 - be
03:49 - fixed as we adjust the size of the
03:52 - window the image is going to adjust
03:55 - accordingly and maintain its aspect
03:58 - ratio
04:01 - we do have a little bit of margin around
04:02 - the body of our document I'm going to
04:04 - remove that margin
04:07 - zero next we have to work on the clock
04:10 - itself it's a little small within the
04:13 - clock class I will set a color of
04:17 - white I'll increase the font size
04:20 - because we can barely see it to 6 RM
04:23 - that should be a decent
04:25 - size and a font weight of bold
04:30 - pick a font
04:32 - family I will pick monospace I think
04:35 - that'll look good for a
04:37 - clock I will also add a text Shadow
04:41 - effect with a horizontal and vertical
04:44 - offset of three pixels each and a blur
04:47 - of five pixels pick a color I'll pick
04:50 - black but I'll lower the alpha to 75% or
04:57 - so then I will Center Aline align my
05:00 - text text align
05:05 - Center our clock is centered
05:07 - horizontally but not vertically within
05:09 - the window if you would like the clock
05:12 - in the exact middle of the window here
05:14 - are some following optional CSS
05:16 - properties you can add these are
05:21 - optional we'll use flex box display Flex
05:24 - to display all the
05:27 - elements justify
05:30 - content
05:32 - Center to Center this clock vertically
05:35 - within the middle of our window we have
05:37 - to set the maximum height of the body to
05:39 - be 100% of the viewport height We'll add
05:43 - this following property set the minimum
05:46 - height of the body to be 100 VH for the
05:51 - viewport height 100% of the viewport
05:55 - height then use the Align items property
05:59 - set it to be Center to vertically align
06:02 - it and I think that looks pretty good
06:04 - now we'll select our clock container for
06:07 - the background of the clock container I
06:09 - would like it so it looks like we're
06:10 - looking through glass here's how to do
06:12 - that we will use the backdrop filter
06:17 - property use a function of blur pass in
06:21 - a number in an amount of pixels the
06:24 - greater the number the greater the blur
06:27 - here's five pixels here's 50 what's 500
06:31 - look
06:32 - like okay let's go with 5 pixels we have
06:35 - a little bit of a blur effect if you
06:38 - would like the clock container to take
06:40 - up 100% of the viewport width you can
06:43 - add the following
06:45 - property set the width of the clock
06:48 - container to be 100 VW for viewport
06:52 - width so now the clock container takes
06:55 - up 100% of the width of the
06:58 - window
07:00 - then I'll add a little bit of padding to
07:01 - the top and bottom but not the sides
07:04 - padding 10 pixels for the top and bottom
07:07 - zero for the sides we should get a
07:09 - little bit of padding on the top and
07:11 - bottom I like that I think that looks
07:13 - pretty good okay we can save everything
07:15 - we no longer need our CSS
07:17 - stylesheet and now we will be working
07:19 - within the digital clock
07:22 - component we'll be using the UST State
07:24 - hook we will create a state variable of
07:27 - time const time and a Setter for time
07:32 - named set time equals the use State hook
07:36 - for the initial state of the US state
07:38 - hook we will pass in a new date object
07:42 - whatever the current date and time
07:43 - currently is that's what the initial
07:45 - state of time is going to be it will be
07:48 - an
07:49 - object we will also use the use effect
07:53 - hook we can perform some code during
07:56 - each render or when we Mount or anytime
07:59 - time some sort of value updates when
08:02 - this component mounts we'll start an
08:04 - interval to move the clock forward
08:06 - there's two parameters within use effect
08:08 - a function to do
08:10 - something and an array of
08:14 - dependencies for our function we'll use
08:16 - an arrow function parameters Arrow do
08:21 - this and for our dependencies based on
08:24 - the last video we're just going to set
08:26 - an empty array I would like to start a
08:28 - timer
08:29 - only when we Mount the component we
08:32 - don't need to start a new timer every
08:33 - time the component renders what would we
08:36 - like to do once when our component
08:38 - mounts we will create a constant of
08:41 - interval ID equals set
08:47 - interval with set interval we can pass
08:50 - in a call back and a time in
08:53 - milliseconds to repeat this call back
08:55 - let's do some code every 1,000
08:58 - milliseconds meaning every 1 second
09:01 - let's do the following we'll write an
09:03 - arrow function to do this every 1,000
09:08 - milliseconds we will update the state of
09:10 - time using our Setter of set time we
09:14 - will pass in a new date
09:17 - object and that's all we need so after
09:21 - every second we will update the state of
09:23 - time with the new current date and time
09:27 - now if we do unmount this component
09:29 - it would be good practice if we were to
09:31 - clear our timer if we don't it may lead
09:34 - to unexpected Behavior we will add a
09:37 - cleanup function when this component
09:39 - unmounts we will return the
09:42 - following do this function we will call
09:46 - the function to clear interval and pass
09:49 - in that interval
09:51 - ID to stop this interval if we ever
09:54 - unmount our digital clock we don't want
09:56 - it to continue running we want to free
09:58 - up any
09:59 - resources if we don't that may lead to
10:02 - unexpected Behavior so that is all we
10:04 - need with use effect when we Mount and
10:07 - that's it create an interval that
10:09 - updates once every second when we
10:12 - unmount the component clear that
10:14 - interval and that's it now we will also
10:18 - need a function to format time function
10:22 - format time there are no
10:25 - parameters we need to get the hours
10:28 - minutes and seconds
10:29 - of our time the state variable of time
10:33 - that's pretty simple though we will
10:35 - declare using let let hours equals our
10:39 - time State
10:41 - variable use the method of get
10:44 - hours let's do this with
10:47 - minutes let minutes actually let's
10:51 - declare this as const const
10:55 - minutes
10:57 - time.get minutes
10:59 - and
11:00 - seconds const seconds equals
11:05 - time.get
11:08 - seconds we will also find what the
11:10 - meridium is is it AM or PM we'll have to
11:14 - write the following
11:16 - const meridium equals let's examine our
11:21 - hours is our hours greater than or equal
11:24 - to 12 our time in hours is going to be
11:27 - in military time I believe that's 0
11:30 - through 23 technically if ours is
11:33 - greater than or equal to 12 tary
11:36 - operator if this is true meridium will
11:40 - be
11:41 - PM otherwise meridium will be
11:47 - am with hours we're going to reassign it
11:51 - let's say that it is 1 p.m. so hours
11:55 - will be 13 1 hour after 12 if I don't
11:59 - want to display my time in military time
12:01 - I'm going to reassign hours we'll take
12:04 - hours modulus 12 modulus gives you the
12:08 - remainder of any division for example if
12:10 - ours is 13 13 modul 12 has a remainder
12:14 - of 1 so that's how you can convert from
12:16 - military time use modulus 12 what if
12:20 - hours is 12 12 modulus 12 is zero if
12:24 - it's 12:00 we don't want to display zero
12:26 - we can add the following use the or
12:29 - logical operator or return 12 if this
12:33 - equation is zero that is equivalent to
12:36 - false so using the or logical operator
12:40 - hours would instead equal
12:42 - 12 then within format time we're going
12:46 - to return one long template
12:49 - string we will display a placeholder
12:53 - with hours colon a placeholder with
12:57 - minutes colon a placeholder with
13:02 - seconds space placeholder our
13:07 - meridium then within our span element we
13:09 - will display embed some
13:12 - JavaScript called The Format time
13:15 - function here's the current time for me
13:18 - it is 7:52 at night p.m. and the time is
13:23 - updating now we have a problem if one of
13:26 - our units of time is a single digit we
13:29 - don't have any leading zeros so let's
13:31 - fix that we will declare a function
13:35 - function pad
13:39 - Z there's one parameter we have to pass
13:42 - in a
13:43 - number with ours minutes and seconds we
13:46 - will pass each of these units of time to
13:49 - the pad zero function so we will enclose
13:52 - each of these within the pad zero
13:54 - function then return a result so let's
13:57 - pad our hours with zero pad our minutes
14:02 - with
14:04 - zero and Pad seconds with
14:12 - zero okay we have undefined undefined
14:15 - undefined that's okay so within pad zero
14:19 - we have to return something we need to
14:21 - check to see if our number is a single
14:24 - digit we can do that with checking to
14:26 - see if number is less than 10
14:29 - if it is it's a single digit we'll use
14:31 - the tary operator is our number a single
14:35 - digit is it less than 10 if that's true
14:38 - we're going to return a string of zero
14:42 - if not we don't have to do anything
14:43 - we'll return an empty string we will
14:46 - take all of this and close it within a
14:48 - set of
14:49 - parentheses return either zero or an
14:51 - empty string plus the original
14:55 - number for example if our number was one
14:58 - one is less than 10 that is true we'll
15:01 - return a string of zero then new string
15:04 - catenation and add our original number
15:06 - of one so we would return 0 1 if our
15:11 - number was 12 well this condition is
15:13 - false we would return an empty string
15:16 - plus the original number of 12 which
15:19 - would give me a string of 12 so here's
15:22 - the
15:23 - result we have each unit of time with
15:26 - the leading zero if it needs it and we
15:29 - have successfully created a digital
15:31 - clock component and the cool thing about
15:33 - doing this in react is that we can reuse
15:35 - this component whenever we want we can
15:38 - create one digital clock component or
15:41 - another or another or another and Let me
15:45 - refresh these to synchronize them these
15:48 - are all individual components running
15:50 - their own code all right everybody so
15:53 - that is how to create a digital clock
15:55 - component using
15:57 - react