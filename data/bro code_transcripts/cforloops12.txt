00:00 - it's you bro hope you're doing well and
00:02 - in this video we're going to be
00:03 - discussing for loops in C++
00:05 - let's get into it
00:08 - for loops are fairly similar to while
00:11 - loops which we covered in the last
00:12 - lesson and at first it might be
00:14 - difficult to understand the differences
00:16 - between the two so for loops are used to
00:18 - repeat some code only a limited amount
00:21 - of times compared to while loops where
00:24 - it can be repeated infinitely so the
00:26 - advantage of for loops is that we know
00:29 - how many times that a for loop is going
00:31 - to iterate before it even begins for
00:34 - example we could create a for loop that
00:35 - can count down from 10 and once we reach
00:38 - 0
00:39 - perhaps we can display a message such as
00:41 - Happy New Year but first let me give you
00:44 - the basic syntax of a for loop so this
00:47 - is the basic structure for a for loop we
00:49 - have the word for a set of parentheses
00:51 - and then a code block for this plural
00:53 - loop and we'll put whatever code we want
00:56 - within the code block and we'll have
00:57 - that repeat so many times now within the
01:00 - parentheses of the for loop there's
01:02 - going to be three statements and each of
01:05 - these is going to have a specific
01:06 - function and each statement is going to
01:08 - be separated with a semicolon so let's
01:11 - create a for loop sounds good right
01:13 - let's create a program that will begin
01:15 - by counting up to ten and then display a
01:17 - message and then after that we'll do the
01:19 - reverse and count down from ten so we'll
01:21 - need to add that structure that I showed
01:24 - in that last slide so we need the word
01:26 - for a set of parentheses and then a set
01:28 - of curly brackets for the sub set of
01:30 - code for the for loop now there were
01:33 - three statements to fill within the
01:35 - parentheses of the for loop the first is
01:37 - some sort of index or counter and you
01:40 - can declare a counter like variable in
01:43 - here you can name this whatever like
01:45 - index or maybe counter or maybe even X
01:50 - commonly you'll see people declare a
01:53 - variable named type as like index and
01:56 - then we can set this equal to a number
01:58 - perhaps just one so this is our first
02:01 - statement we're setting up a counter for
02:03 - this for loop to track how many times
02:05 - this for loop has repeated next we'll
02:08 - need some sort of condition when do we
02:10 - want this for loop to stop let's say
02:12 - that we want to count up to 10 so we'll
02:15 - continue this for loop as long as I is
02:18 - less than or equal to 10 that's our
02:21 - second statement
02:22 - and next week an increment or decrement
02:24 - our counter and we could just say I plus
02:26 - plus for shorthand so one key feature
02:29 - with for loops is that we know how many
02:31 - times that this for loop is going to
02:33 - repeat before we actually get this even
02:36 - started so if I is one and we're going
02:40 - to continue this for loop as long as I
02:43 - is less than or equal to ten we're going
02:45 - to be repeating this for a loop ten
02:47 - times compared to while loops we don't
02:49 - know how many times we'll be repeating a
02:50 - while loop that's as long as some
02:52 - condition is true so what do we want to
02:54 - do during each iteration of our for loop
02:56 - let's just display whatever our counter
02:59 - I is so see out I then end line and then
03:05 - after we exit the for loop we can
03:08 - display a message such as you can count
03:14 - to ten so this program is simply just
03:19 - going to count to ten and display this
03:20 - message
03:21 - that's basically it but let's test it
03:23 - out then we'll make a more sophisticated
03:25 - program involving four loops okay so
03:30 - this went by fairly quickly because we
03:33 - weren't adding any pauses or anything
03:34 - but you can see that it repeated the for
03:37 - loop ten times and it's just counting
03:39 - how many times it repeated and then once
03:41 - we exited the for loop it continued with
03:43 - the rest of the program and it displayed
03:45 - that message you can count to ten this
03:48 - time we're going to count down from ten
03:50 - so for our counter I let's set this
03:53 - equal to ten and for our condition we'll
03:56 - continue this for loop as long as I is
03:59 - greater than or equal to zero now we're
04:03 - not going to increment I we're going to
04:06 - decrement it so we're going to type in I
04:08 - then minus minus so after each iteration
04:11 - of this for loop we're going to subtract
04:13 - one from our counter and then we're
04:16 - going to display whatever our counter
04:18 - currently is and then once we exit the
04:20 - for loop we will display a different
04:22 - custom message happy new year
04:26 - all right so same process as before
04:28 - let's run this
04:33 - all right so let me expand this window
04:36 - we started from 10 after each iteration
04:39 - of the for loop we're counting down by 1
04:41 - once we hit 0 then we exit the for loop
04:44 - and it displays our custom message and
04:46 - with this third statement where you can
04:49 - increment or decrement your counter you
04:51 - can also increment it or decremented by
04:54 - a certain amount let's say that we want
04:56 - to count down by 2 well we could say I
04:58 - minus equals 2 so we will then count
05:02 - down by 2 starting from 10 yep you can
05:07 - see that here we're counting down by 2
05:08 - each time likewise you can do the
05:10 - opposite where you can add as well so if
05:14 - you want to count up by 2 you would just
05:16 - say I plus equal to and it's not limited
05:19 - to just one or two you could do like 3 4
05:22 - doesn't really matter but commonly
05:24 - people will increment their decrement by
05:27 - 1 and an alternative way of writing this
05:29 - is that you don't necessarily need this
05:32 - third statement within the parentheses
05:33 - you could add this increment or
05:36 - decrement counter at the end of your for
05:38 - loop and this would work just the same
05:40 - too but commonly you'll see people put
05:42 - it within the parentheses so yeah you
05:45 - can see that this worked just the same
05:47 - but there's an alternative way of
05:49 - writing these for loops too but commonly
05:51 - you'll see people have all three
05:53 - statements together for their 4 loops so
05:55 - the main difference between a while loop
05:57 - and a for loop is that a for loop will
06:00 - execute a limited amount of times and we
06:03 - already know how many times the for loop
06:05 - is going to iterate before the loop even
06:07 - begins and with while loops we do not
06:10 - know how many times the while loop will
06:12 - iterate necessarily it's as long as some
06:15 - condition remains true it could be
06:17 - infinite so here's an example of the
06:19 - differences between a for loop and a
06:21 - while loop so imagine we're in the
06:23 - military and our drill sergeant is
06:25 - instructing us to do push-ups and he
06:28 - says drop and give me 20 this is a
06:30 - perfect example of a for loop because we
06:33 - already know how many iterations how
06:35 - many pushups were going to be doing
06:37 - we're going to do 20 push-ups and then
06:39 - we're going to stop an example of a
06:41 - while loop would be a drill sergeant
06:43 - telling us that we need to do push-ups
06:46 - until
06:46 - he says we're done so we're going to
06:49 - start doing push-ups until the drill
06:51 - sergeant says we're done then and it
06:53 - could be forever who knows it could be
06:55 - 20 it could be less it could be more its
06:57 - while some condition remains true
06:59 - basically so that's the main difference
07:01 - between a for-loop and a while loop we
07:03 - already know how many we're going to do
07:05 - with while loops
07:06 - we don't really know let's create
07:08 - another program involving a for loop
07:10 - this program is going to ask for a word
07:13 - from a user and then it's going to use a
07:15 - for loop to spell out each individual
07:18 - character in the word that we give as
07:20 - user input so this is what we're going
07:23 - to do we'll create a string variable
07:25 - perhaps named word and then we will
07:29 - create a prompt to have the user enter
07:32 - in enter the word to spell then we'll
07:39 - use cin or get line whatever the word is
07:45 - we'll create a for loop so for a set of
07:48 - parentheses and then a set of curly
07:49 - brackets then we'll need to place the
07:52 - three statements within the parentheses
07:54 - of the for loop and we'll have to add
07:56 - the three statements to this for loop
07:58 - the first is the index or counter so
08:01 - we're going to declare a variable named
08:04 - eye and set this equal to zero and the
08:07 - reason that we're setting this to zero
08:08 - is because with strings the first
08:10 - position is always zero and then the
08:13 - next position is one then two and then
08:16 - three so on and so forth next for our
08:18 - condition what we're going to type here
08:20 - is I is less than our word dot then
08:26 - we're going to use the length function
08:28 - so this is going to return the length of
08:31 - whatever word we type in so this might
08:34 - change every time we pick a new word to
08:36 - enter in and for the last statement
08:38 - we're going to increment our counter by
08:40 - one every time we iterate through this
08:42 - for loop now within the code block for
08:45 - the for loop what we're going to type is
08:47 - C out then we're going to type in the
08:52 - word our word variable dot and we're
08:55 - going to use the app function all right
08:58 - and then do you remember in the previous
09:00 - lesson on string functions if we wanted
09:03 - the first character of a string we would
09:06 - put zero within here if we wanted the
09:08 - second character we would put one what
09:10 - we're actually going to do for this for
09:11 - loop is place our counter I within here
09:14 - so during the first iteration I is going
09:17 - to equal zero so we're going to display
09:20 - whatever the first character is then
09:22 - after we complete one cycle the for loop
09:25 - our counter I is going to increase by
09:27 - one so then when we reach this statement
09:30 - for the second time it's going to
09:32 - display the second letter after the next
09:34 - iteration it's going to increment by one
09:36 - again and then it'll display the third
09:38 - letter so it's going to display all the
09:41 - letters of the word that we type in and
09:43 - I think I'll just add a space between
09:46 - each letter there's just one thing I
09:48 - have to fix before we run this program
09:50 - I'm just gonna add a colon at a space to
09:52 - our prompt okay let's test this enter
09:59 - the word to spell I'm going to type in
10:01 - the word pizza and our program will
10:04 - display each letter of the word that we
10:07 - type in so basically a for loop only
10:11 - iterates a limited amount of times and
10:13 - we know how many times it's going to
10:15 - iterate before the loop actually begins
10:18 - so that's basically this lesson on for
10:20 - loops if you would like a copy of the
10:22 - code that we worked on today I'll post
10:24 - it in the comments down below and pin it
10:26 - to the top if you would like additional
10:28 - practice or a project to work on why
10:31 - don't you create your own program that
10:32 - includes a for loop and post it in the
10:34 - comments down below but yeah that is how
10:37 - for loops work in C++ hey you if you
10:41 - enjoyed this lesson then you can help me
10:43 - help you in 3 easy steps by smashing
10:47 - that like button drop a comment down
10:49 - below and subscribe if you'd like to
10:51 - become a fellow bro
10:52 - [Music]