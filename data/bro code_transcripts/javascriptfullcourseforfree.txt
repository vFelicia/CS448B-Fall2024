00:00 - hey guys in this video i'm gonna teach
00:01 - you everything you need to know to get
00:03 - started writing code in javascript so
00:06 - sit back relax and enjoy the show
00:10 - if you wouldn't mind please leave a like
00:12 - comment and subscribe one like equals
00:15 - one prayer for the youtube algorithm
00:18 - all right let's get started everybody
00:20 - what the heck is javascript javascript
00:22 - is a web-based interpreted programming
00:25 - language that's used to
00:27 - add interactive behavior to web pages
00:29 - build web and mobile applications to
00:31 - create command line tools and for game
00:34 - development i like games here are some
00:36 - important notes before we get started
00:38 - javascript is not the same as java even
00:41 - though they share the same name both
00:42 - languages were developed around the same
00:44 - time now knowing html and css is helpful
00:48 - but not necessary at least until we near
00:50 - the end of this series where we begin
00:52 - working extensively with the dom the
00:54 - document object model hey if you're
00:56 - interested i do have a one hour full
00:58 - course on both of those subjects what
01:00 - you'll need you'll need a web browser
01:02 - and a text editor you'll need a web
01:04 - browser well because javascript runs in
01:07 - a web browser i recommend using the
01:08 - latest version of chrome firefox safari
01:12 - opera whatever please do not use
01:14 - internet explorer i also recommend a
01:16 - text editor a few popular text editors
01:19 - include but are not limited to visual
01:21 - studio code sublime text replit which is
01:24 - an online text editor or notepad if you
01:27 - want to torture yourself in this series
01:29 - i'll be using google chrome as my web
01:31 - browser and visual studio code for my
01:33 - text editor if you would like to
01:34 - download visual studio code i'll show
01:36 - you how to download visual studio code
01:39 - head to this url
01:42 - code.visualstudio.com
01:45 - look for this blue drop down menu then
01:47 - download the latest stable version for
01:49 - your operating system i'm running
01:52 - windows i will install this for windows
01:54 - then your download should start
01:55 - automatically if it doesn't you can hit
01:57 - this big blue button
01:59 - then i'm just going to go ahead and open
02:00 - this
02:02 - accept the license agreement yes i
02:04 - actually did read it that fast
02:07 - if you would like you can create a
02:08 - desktop icon
02:10 - next
02:11 - install
02:15 - we might as well go ahead and launch vs
02:17 - code now
02:20 - within vs code the first thing i
02:22 - recommend doing is downloading the live
02:24 - server extension
02:26 - let's go over to the left navigation bar
02:28 - go to extensions
02:30 - then look up
02:32 - live
02:33 - server
02:36 - then we're gonna click on this
02:38 - let's pretend that this wasn't already
02:40 - installed
02:41 - then click install
02:44 - what live server does is that every time
02:46 - that you save your javascript file
02:48 - it will update your current web browser
02:50 - right away to reflect any changes it's a
02:52 - helpful development tool
02:56 - we're going to create a new folder to
02:58 - hold all of our files i'm going to go to
03:00 - open folder
03:02 - i'm going to create a new folder on my
03:03 - desktop i'm going to right click go to
03:06 - new folder i'll name this website click
03:10 - website select folder
03:12 - there we go now let's create a new
03:14 - javascript file go to new file i'll name
03:17 - this file
03:19 - index.js be sure to get that extension
03:21 - js because well that's a javascript file
03:24 - i'm also going to create an html file
03:28 - index.html
03:30 - on a website this would be the landing
03:31 - page
03:32 - then a css style sheet which i will name
03:35 - style dot css
03:38 - okay we have our three files
03:41 - index.javascript file our index.html
03:44 - file
03:45 - then our css stylesheet
03:47 - we'll need html skeleton code to work
03:49 - with so within your html file if you
03:52 - type exclamation point then hit tab
03:55 - that will generate some sample text to
03:57 - be used to create a webpage
03:59 - we'll want to take care of this early
04:01 - let's link our css style sheet within
04:04 - the head tags of my html document
04:07 - i'm going to create a link tag
04:09 - link
04:10 - take the rel attribute set the sql to
04:14 - style sheet
04:16 - the next attribute is href
04:18 - set the sql to
04:20 - your css stylesheet
04:23 - style.css
04:25 - so our stylesheet is now linked to our
04:27 - html file
04:28 - then we need to link our javascript file
04:30 - to our html file
04:32 - within the body of my html document i'm
04:34 - going to create a pair of script tags
04:37 - script that's the opening tag
04:39 - then forward slash script to close it
04:43 - within the opening script tag
04:46 - i will set the source attribute equal to
04:49 - the name of my javascript file mine is
04:52 - index.js
04:54 - then be sure to save everything to save
04:56 - myself from potential future headaches i
04:58 - tend to save all three files
05:00 - to display output from our javascript
05:02 - file we'll need to open up a web browser
05:04 - an easy way to do that would be to go to
05:07 - explore
05:08 - right click on your html file open with
05:11 - live server i now have this window to
05:13 - work with this window is a
05:14 - representation of my html file when
05:17 - coding with javascript i like to place
05:19 - my browser window and vs code right next
05:21 - to each other kind of like this to
05:23 - access our console which we can use to
05:25 - display output i'm going to right click
05:27 - within my window go to inspect
05:32 - click on these arrows then go to console
05:35 - and then just save
05:37 - any output within my javascript file
05:39 - will go to my console to display some
05:42 - output we can type
05:44 - console.log
05:46 - then a set of parentheses
05:48 - typically with programming you end a
05:50 - statement with a semicolon it's like the
05:53 - punctuation at the end of a sentence
05:55 - it's optional to add a semicolon to the
05:57 - end of a statement but in nearly all
05:59 - programming languages besides python to
06:02 - add a statement you need a semicolon i
06:04 - type it in just as a force of habit but
06:06 - it would still work regardless now let's
06:08 - type something let's type some output to
06:10 - the console window this can be either
06:12 - within single quotes or double quotes
06:16 - let's say something i like some food you
06:19 - like pizza
06:21 - i do have that live server extension set
06:23 - up when i save that will update my web
06:25 - browser within my console we have the
06:28 - statement that i made i like pizza if i
06:31 - would like to print another statement i
06:33 - can again
06:34 - type
06:35 - console.log
06:37 - then within either single quotes or
06:39 - double quotes i can say something else
06:43 - it's really
06:45 - good
06:46 - i like pizza it's really good you can
06:49 - also create an alert box by typing
06:52 - window dot alert
06:55 - within the parentheses
06:56 - within a set of quotes what would we
06:58 - like to say
07:00 - i
07:01 - really love pizza
07:03 - alert will create a pop-up
07:06 - i really love pizza
07:08 - there's also comments to create a
07:10 - comment you use two forward slashes
07:12 - comments are ignored by the interpreter
07:16 - this is a
07:17 - comment
07:19 - usually comments are used for notes for
07:22 - yourself or for other developers
07:24 - you could also write a multi-line
07:26 - comment by typing forward slash asterisk
07:29 - wherever you would like your comment to
07:31 - end you would type asterisk forward
07:34 - slash again
07:35 - this
07:36 - is
07:37 - a
07:39 - multi-line
07:42 - comment all right everybody that is a
07:45 - quick introduction to javascript and in
07:48 - the next topic we'll discuss variables
07:50 - all right everybody that's a quick
07:52 - introduction to javascript hey if you
07:54 - enjoyed this video let me know by
07:55 - smashing that like button leave a random
07:57 - comment down below and subscribe if
07:59 - you'd like to become a fellow bro
08:03 - all right everybody variables so a
08:05 - variable is a container for storing data
08:08 - it's a representation of some value
08:10 - think back to middle school algebra
08:12 - class where you had to solve an equation
08:14 - you have to solve for x and x is some
08:16 - representation of a value it's basically
08:19 - no different in programming a variable
08:21 - behaves as if it was the value that it
08:23 - contains there's two steps to creating a
08:25 - variable declaration and assignment to
08:28 - declare a variable we use one of three
08:30 - keywords either var let or const we'll
08:33 - discuss const in a future video but for
08:36 - now we can either use var or let but
08:38 - using let is best practice due to
08:40 - something called variable scope but that
08:42 - won't make too much sense until we reach
08:44 - the video on functions so for now for
08:46 - best practice to create a variable let's
08:48 - use the keyword let we precede the
08:51 - variable with let and now we need a
08:53 - unique descriptive name of this variable
08:56 - so if you're thinking of algebra you
08:58 - might think of a variable such as maybe
09:00 - x or y like they are some number but in
09:03 - programming you want a variable to be
09:05 - descriptive of what it contains let's
09:07 - assign a number to this variable maybe
09:10 - in this example we need to store a
09:12 - student's age so age would be a
09:14 - descriptive name for this variable and
09:16 - that is step one we have declared a
09:19 - unique variable named age but it doesn't
09:21 - yet contain a value that's where
09:22 - assignment comes in that's step two so
09:25 - let's try and use this variable
09:27 - console.log
09:29 - and i'm just going to display age and
09:31 - then let's see what happens if you
09:33 - declare a variable but do not assign it
09:34 - a value it's undefined so we haven't
09:36 - reached step two yet we've only declared
09:38 - a variable when you display a variable
09:40 - make sure it's not within quotes
09:42 - because then we're literally printing
09:44 - the word edge instead of the value
09:47 - contained within age the variable now
09:49 - step two is assignment we take the
09:51 - variable name and use the assignment
09:54 - operator which is an equal sign and set
09:56 - this equal to some value let's say that
09:59 - i'm 21 years old not anymore but i like
10:01 - to think that i still am now when i
10:03 - display this variable age it displays
10:05 - the number 21. so age is a variable it
10:08 - behaves as if it was the value that it
10:11 - contains now with creating a variable
10:13 - you can do this in two steps or you can
10:15 - combine them both together so instead of
10:17 - taking two lines of code we could
10:19 - combine them both together like this and
10:21 - this would do the same thing but there
10:23 - may be times when you need to declare a
10:25 - variable and then assign a value later
10:27 - on like maybe you're accepting some user
10:28 - input so in that case it would be better
10:31 - to do that in two steps different
10:32 - variables have different data types 21
10:35 - is a number data type we can use this
10:38 - variable in some arithmetic expressions
10:40 - maybe it's my birthday and i need to add
10:42 - one to my age i can easily change that
10:45 - by setting age equal to age plus one and
10:49 - my age is now 22 so this is a number
10:52 - data type another data type is a string
10:55 - a string is a series of characters let's
10:58 - create a variable to hold a student's
11:00 - name
11:01 - so we will use that let keyword
11:04 - and i'll create a variable name named
11:07 - first name then i could assign a value
11:10 - later or right away i'll do so right
11:12 - away so i will set first name equal to
11:16 - then to create a string we can use a set
11:19 - of quotes either double quotes or single
11:22 - quotes
11:23 - and i can add a series of characters so
11:25 - why don't you enter in your first name
11:27 - and now i can use this variable and it
11:29 - contains a series of characters let's
11:31 - display this within our console
11:33 - console.log
11:35 - first
11:36 - name so this displays bro 21 another
11:39 - data type is a boolean a boolean is only
11:42 - one of two values true or false
11:45 - this time let's say that we have a
11:47 - boolean variable named
11:50 - maybe student if a person is currently
11:52 - enrolled we could set student to equal
11:55 - true if they're not enrolled or maybe
11:57 - they graduated this could be false so a
12:00 - boolean is one of two values true or
12:03 - false then let's display this within our
12:05 - console
12:06 - console
12:08 - dot log
12:10 - student
12:11 - and this displays false or if i was a
12:14 - student this could be true so these are
12:17 - three common data types strings which
12:19 - are a series of characters
12:22 - numbers
12:24 - and booleans
12:26 - as a beginner it's actually really easy
12:28 - to mix up strings and numbers numbers we
12:31 - can use with arithmetic expressions
12:33 - strings we cannot let's use that
12:35 - previous example of incrementing my age
12:37 - by one because it's my birthday
12:40 - age
12:41 - equals age plus one we can use numbers
12:44 - in arithmetic expressions see my age is
12:46 - now 22 but if this was a string i'll put
12:50 - this within quotes
12:51 - string
12:52 - well when we add one to age it's going
12:55 - to concatenate one to the end of the
12:58 - string i am not 211 years old it's
13:01 - treating age as a series of characters
13:03 - and we're adding an additional character
13:06 - to age so as a beginner you really have
13:08 - to pay attention to data types it is
13:10 - really easy to put things within quotes
13:12 - when you don't mean to when you display
13:14 - a variable within the console or the dom
13:17 - you can display it along with some other
13:18 - text so along with my first name i'm
13:21 - going to display hello
13:24 - hello
13:25 - then after i finish the string i will
13:27 - add comma so hello bro with my second
13:30 - log method i'll print another message
13:33 - perhaps you
13:35 - are
13:37 - age
13:39 - years old
13:41 - hello bro you are 21 years old and what
13:45 - can we do with student um let's say
13:47 - maybe enrolled
13:50 - so this will display true if i'm
13:52 - currently enrolled
13:54 - or false if i'm no longer a student if
13:56 - you need to display a variable within
13:58 - your dom here's one thing that we can do
14:00 - so within our html document let's create
14:03 - maybe some paragraph tags i'll create
14:06 - three
14:07 - so we need an opening paragraph tag and
14:09 - a closing paragraph tag
14:11 - i will set a unique id of p1
14:14 - copy this paste it two times
14:17 - the second one will be p2 and the third
14:19 - will be p3 so within our dom we have
14:22 - three paragraph tags each with a unique
14:25 - id if i need to change the inner html of
14:28 - these paragraph tags i can do so using
14:30 - this statement
14:32 - document
14:33 - dot get
14:35 - element
14:37 - by
14:38 - id
14:39 - parentheses
14:40 - and then within a set of quotes i will
14:42 - list the id of the html tag i would like
14:45 - to change
14:46 - let's begin with p1 and then i will
14:48 - follow the statement with dot
14:51 - inner
14:52 - html and set the sequel to
14:55 - so let's display hello then to display a
14:58 - variable we will use some string
14:59 - concatenation so we will use plus
15:03 - a variable name let's say first name
15:06 - hello bro okay let's do the same thing
15:08 - with p2
15:09 - u
15:10 - r so when using string concatenation you
15:14 - do have to pay attention to spaces
15:15 - within strings
15:18 - you are age
15:20 - plus
15:21 - years old
15:23 - you are 21 years old and lastly p3
15:28 - uh let's say
15:31 - enrolled
15:32 - colon space
15:34 - student
15:36 - enrolled true and then you know you can
15:39 - change any one of these values
15:41 - well yeah everybody those are variables
15:43 - a variable is just a container for
15:46 - storing data it's a representation of
15:48 - some value a variable behaves as if it
15:51 - was the value that it contains there's
15:53 - two steps declaration and assignment you
15:56 - can do these both together or separate
15:59 - and variables have different data types
16:01 - three that we discussed are strings
16:03 - which are a series of characters
16:06 - numbers and booleans which are either
16:08 - true or false you can display variables
16:11 - along with text within your console or
16:13 - you could use string concatenation to
16:15 - display a variable's value along with
16:17 - some text in your dom so yeah those are
16:20 - variables everybody if you would like a
16:21 - copy of all this code i'll post this in
16:23 - the comments section down below if you
16:25 - enjoyed this video let me know by
16:26 - smashing that like button leave random
16:28 - comment down below and subscribe if
16:30 - you'd like to become a fellow bro
16:34 - hey everybody i have a super quick video
16:36 - on arithmetic expressions an arithmetic
16:38 - expression is a combination of operands
16:41 - and operators operands are values
16:44 - variables etc operators are well the
16:48 - addition sign subtraction multiplication
16:50 - division and modulus which we'll talk
16:52 - about a little bit later an arithmetic
16:54 - expression can be evaluated to a value
16:57 - for example y equals x plus five x and
17:01 - five would be operands and the addition
17:03 - sign would be the operator just really
17:05 - quick let's cover a few maybe we have a
17:08 - variable named students we're a teacher
17:10 - and we have a whole class of students to
17:12 - keep track of i need to add one student
17:14 - i could take our students variable and
17:17 - set the sequel to if i need to increment
17:19 - students by one i can set the sequel to
17:22 - students currently it's 20
17:25 - plus one and then let's display this
17:28 - console.log
17:30 - students
17:31 - and this should be 21. so we also have
17:34 - subtraction
17:36 - students equals students minus 1
17:39 - and now we have 19. for multiplication
17:41 - you use an asterisk maybe we're
17:43 - combining two classes students equal
17:45 - students times two
17:47 - and now there's forty students perhaps
17:49 - we're dividing a class in half
17:53 - students divided by two and you use a
17:55 - forward slash
17:56 - and now there's ten now this one's a
17:58 - little bit strange we will discuss
18:00 - modulus the modulus operator is a
18:03 - percent sign it gives you the remainder
18:05 - of any division we have a class of 20
18:07 - students and we need to divide this
18:08 - class into groups of three but 20
18:11 - doesn't divide by three evenly i can
18:13 - store the remainder within a separate
18:15 - variable
18:16 - i'll create a new variable called extra
18:19 - students
18:21 - and we will take students
18:23 - modulus 3
18:25 - and let's display the extra students
18:28 - that we have so we have two extra
18:30 - students but if this was 21 well 21
18:33 - divides by three evenly so the remainder
18:36 - is zero we have zero extra students so
18:38 - that is the modulus operator one popular
18:41 - use of the modulus operator is that you
18:43 - can find if a number is even or odd by
18:46 - taking a value or variable modulus 2. if
18:49 - extra students is 1 that means we have
18:52 - an odd number if it's 0 that means we
18:54 - have an even number so that is the
18:57 - modulus operator it can be somewhat
18:59 - tedious to write these long expressions
19:01 - out so there is a shortcut instead of
19:03 - saying students equal students plus one
19:05 - you could just write
19:06 - students plus equals one this is also
19:09 - known as an augmented assignment
19:11 - operator it's kind of like a shortcut so
19:13 - students is now 21. then we have
19:16 - students minus equals one students is
19:19 - 19.
19:21 - students
19:22 - times equals 2.
19:24 - there are 40 students now
19:26 - students
19:28 - divide equals 2. and there are 10
19:31 - students with augmented assignment
19:33 - operators you can use these if you're
19:34 - reassigning the same variable like i
19:37 - couldn't say let
19:39 - extra students
19:41 - modulus equals three right
19:44 - and then if we were to display this we
19:46 - would have a syntax error so augmented
19:48 - assignment operators are kind of like a
19:50 - shortcut you can do if you're
19:52 - reassigning the same variable another
19:54 - thing to consider with arithmetic
19:55 - expressions is that there's operator
19:57 - precedence maybe we have this equation
20:00 - let result equals 1 plus 2
20:05 - times
20:06 - three plus four
20:09 - and then i'm just going to display
20:11 - whatever the result is
20:14 - so the result is 15. the order in which
20:16 - you solve this is that you begin at the
20:18 - left and work your way towards the right
20:20 - you solve anything within parentheses
20:22 - first then exponents then multiplication
20:25 - and division then lastly addition and
20:27 - subtraction starting on the left and
20:29 - working our way towards the right we
20:31 - would solve anything with parentheses
20:32 - first three plus four is seven then we
20:36 - solve any exponents there aren't any
20:38 - multiplication and division we can
20:40 - either resolve one plus two or two times
20:43 - seven so multiplication has precedence
20:45 - over addition we would solve this first
20:47 - then it's just 1 plus 14 which is 15.
20:50 - now by adding a set of parentheses you
20:52 - can force operator precedence this time
20:55 - i would like to resolve 1 plus 2 first
20:58 - and now we have a new result the result
21:00 - is 21. so yeah that's a super quick
21:02 - video on arithmetic expressions it's a
21:04 - little dull but it's kind of necessary
21:06 - to cover hey if this video helped you
21:08 - out help me out by smashing that like
21:09 - button leave a random comment down below
21:11 - and subscribe if you'd like to become a
21:13 - fellow bro
21:16 - hey everyone in this video i'm going to
21:17 - show you how we can accept some user
21:19 - input in javascript i'll demonstrate two
21:22 - ways the easy way with a simple window
21:24 - prompt and the difficult way with an
21:27 - html text box let's begin with the easy
21:30 - way i'm going to create a variable named
21:32 - username and the user will type in a
21:34 - name for themselves let username
21:37 - equals and to create a window prompt we
21:40 - type window
21:42 - dot
21:42 - prompt parentheses and within the
21:45 - parentheses we can add a message
21:48 - what's your name after a user types in
21:52 - some user input we will assign whatever
21:54 - they type into a variable so i'm going
21:56 - to display this
21:59 - console.log user name what's your name
22:03 - type in your name press ok and this will
22:06 - display the value that you typed in the
22:08 - difficult way although it's more
22:10 - practical is to use some html elements
22:12 - within our html file let's create a
22:15 - prompt a label
22:18 - enter your name and then maybe i'll add
22:21 - a line break
22:23 - and an input box
22:26 - input
22:27 - this is a self-closing tag
22:30 - a line break with my input tag let's set
22:33 - the type
22:34 - equal to text it's a text box and i'll
22:38 - give this an id of
22:40 - my
22:41 - text okay so save we have our label and
22:44 - a text box let's create a submit button
22:48 - we'll need a pair of button tags
22:51 - type
22:51 - will be button and the id will be my
22:57 - button
22:58 - you can add some text to the button
23:00 - between the button tags just write
23:01 - something submit okay make sure to save
23:04 - your html document then we'll head back
23:06 - to our javascript file what i'm about to
23:08 - show you is a little advanced but you
23:10 - can always just copy this and save it
23:12 - for the future after clicking our submit
23:14 - button whatever text is within our text
23:16 - box we'll assign it to a variable we'll
23:18 - type document
23:20 - dot
23:21 - get
23:22 - element
23:23 - by id
23:26 - then type my
23:28 - button follow this with dot
23:31 - on
23:32 - click
23:33 - and we will set this equal to function
23:36 - parenthesis then a set of curly braces
23:40 - at the top of my program i'm going to
23:42 - declare my variable but not yet assign
23:44 - it and within my function the set of
23:46 - parentheses i will take username and set
23:50 - this equal to
23:52 - document
23:54 - dot get
23:56 - element
23:57 - by
23:58 - id
23:59 - parentheses then within quotes
24:02 - my text that's the id of the text box
24:06 - dot value
24:07 - so when we click on this button take
24:09 - whatever text is within our text box and
24:12 - assign it to user name then afterwards
24:14 - let's display whatever our username is
24:17 - within our console
24:18 - or if you want we can change maybe this
24:20 - label console.log
24:24 - user name type in your first and last
24:27 - name
24:28 - press submit
24:30 - and this will display your name let's
24:32 - change this label but i'm going to give
24:34 - this label a unique id
24:36 - id equals my label so save go back to
24:40 - your javascript file i'm going to edit
24:43 - the inner html of this label document
24:46 - dot get
24:48 - element by id
24:51 - my
24:52 - label
24:53 - dot inner html
24:57 - set the sequel to user name okay so
25:00 - again type in your first and last name
25:02 - press submit and this should change that
25:05 - label maybe i'll add
25:07 - hello
25:08 - plus username this time
25:11 - hello bro code so yeah those are two
25:14 - different ways to accept user input you
25:17 - can go the easy way with a simple window
25:19 - prompt or you can take the difficult
25:21 - approach with an html text box although
25:24 - it's more practical but it's above our
25:26 - current level of understanding at this
25:28 - point in time so yeah those are two ways
25:30 - to accept user input in javascript if
25:33 - this video helped you out you can help
25:35 - me out by smashing that like button
25:37 - leave random comments down below and
25:38 - subscribe if you'd like to become a
25:40 - fellow bro
25:42 - hey guys in this video i'm going to
25:44 - explain type conversion type conversion
25:46 - is the ability to change the data type
25:49 - of a value to another and i'll explain
25:51 - how to do this with strings numbers and
25:53 - booleans here's one issue when accepting
25:56 - some user input let's say we have
25:57 - variable age and i'll create a window
26:00 - prompt to ask a user to enter in their
26:02 - age how old are you once we accept some
26:05 - user input i'm going to increment age by
26:08 - one because let's say it's the user's
26:10 - birthday then let's display the user's
26:12 - age
26:13 - console.log
26:16 - happy birthday
26:19 - u
26:20 - r
26:21 - our age variable
26:24 - years
26:25 - old how old are you let's say that i'm
26:28 - 21 i press ok happy birthday you are 211
26:32 - years old when we accept user input it's
26:35 - of a string data type we can't normally
26:37 - use strings for any sort of arithmetic
26:39 - expressions what i intended was to add
26:42 - our edge 21 plus 1. that would give me
26:45 - 22. if you add a number to a string you
26:47 - just concatenate that number to the end
26:49 - of the string because a string is just a
26:52 - series of characters if i need to take
26:54 - some user input and use it with some
26:55 - sort of arithmetic expression i'll want
26:57 - to convert that string to a number and
27:00 - one way i can do that is to use the
27:02 - number constructor so i'm going to set
27:05 - age
27:05 - equal to then type number
27:08 - make sure it's capital
27:10 - parentheses and then pass in age this
27:13 - will convert a string to a number how
27:15 - old are you 21 press ok happy birthday
27:18 - you are now 22 years old if you ever
27:20 - need to get the data type of a variable
27:23 - there is a type of keyword
27:25 - let's display it type
27:27 - of
27:28 - age so before we convert our age
27:31 - variable it's a string then let's
27:33 - display the data type of age after we
27:35 - convert it
27:36 - at first it's a string we convert it and
27:39 - now it's a number and then we can use it
27:40 - in arithmetic expressions here's a few
27:43 - other examples we have three variables x
27:46 - y and z
27:48 - i'm going to set x to equal and we will
27:51 - use the number constructor and we will
27:53 - convert the string 3.14 into a number
27:58 - and then i will display
28:00 - whatever x is as well as the data type
28:04 - type of x remember we're converting a
28:07 - string into a number
28:10 - so 3.14 is now a number let's convert a
28:14 - number into a string y equals and we can
28:17 - use the string constructor
28:19 - and we will convert the number 3.14 into
28:23 - a string
28:24 - console.log
28:27 - y
28:28 - and type of y 3.14 is now a string
28:32 - and to convert something to a boolean
28:34 - you can use the boolean constructor
28:37 - so if you pass in an empty string just a
28:39 - set of quotes this will give you false
28:43 - console.log
28:45 - variable z and the type of z
28:48 - so converting an empty string to a
28:50 - boolean will result in false and this is
28:53 - of the boolean data type but if you type
28:55 - in anything else it will give you true
28:58 - so maybe
28:59 - i try and convert the word pizza when
29:01 - you convert a string to a boolean that's
29:03 - not empty this will give you true if
29:06 - it's an empty string just a set of
29:07 - quotes it results in false this would be
29:10 - useful if you need to accept some user
29:12 - input or user types in their name if
29:14 - they skip that step and using an if
29:16 - statement which we'll talk about later
29:18 - you can check to see if a user typed in
29:20 - something or not based on if that
29:21 - boolean is true or false but we'll get
29:24 - into that later so yeah those are a few
29:26 - basic ways of type conversion you can
29:28 - change the data type of one value to
29:30 - another if you need to get the data type
29:32 - of a variable just precede that variable
29:35 - with the type of keyword and to convert
29:37 - a value or variable into another data
29:39 - type you can surround that value or
29:42 - variable with a given constructor the
29:44 - number constructor the string
29:46 - constructor or the boolean constructor
29:48 - oh one fun fact too if you try and
29:50 - convert something into a number that
29:52 - normally shouldn't be a number
29:54 - like the word pizza well then this will
29:56 - result in n-a-n not a number that's just
30:00 - a fun fact so yeah that is type
30:02 - conversion in javascript if this video
30:05 - helped you out you can help me out by
30:06 - smashing that like button leave a random
30:08 - comment down below and subscribe if
30:10 - you'd like to become a fellow bro
30:13 - hey everybody in this video i'm going to
30:15 - explain constants a constant is a
30:17 - variable that can't be changed it adds
30:19 - some security to our code to declare a
30:21 - constant you use the const keyword in
30:24 - place of var or let in this example
30:26 - we're going to create a sample program
30:28 - to calculate the circumference of a
30:30 - circle which has this formula
30:32 - circumference equals 2 times pi times
30:35 - radius let's declare all of the
30:36 - variables that we'll need we're going to
30:38 - write this program without constants and
30:40 - then later with constants and i can show
30:42 - you their usefulness we'll create three
30:44 - variables let pi
30:46 - equal
30:48 - 3.14159 just the first few digits of pi
30:52 - let radius and let
30:55 - circumference we're going to accept some
30:58 - user input we will assign radius equal
31:01 - to
31:01 - window
31:03 - dot prompt
31:06 - enter the radius
31:09 - of a circle
31:10 - then when we accept user input it's a
31:12 - string we'll need to convert that to a
31:14 - number radius equals
31:17 - and use some type conversion and convert
31:19 - our radius into a number to calculate
31:21 - the circumference of a circle we will
31:23 - set circumference equal to and follow
31:26 - that formula 2 times pi
31:30 - times radius and with the radius the
31:32 - user will type that in
31:34 - at the end of our program we will
31:36 - display our result
31:38 - the circumference
31:41 - is
31:42 - circumference
31:44 - let's run this
31:45 - enter the radius of a circle if the
31:48 - radius is 9 i press ok the circumference
31:51 - is 56.54 now here's why constants are
31:54 - useful let's say that somebody changes
31:57 - our code
31:58 - pi now equals
32:00 - 420 69. now when we run this program and
32:03 - we type in 9 for the radius
32:06 - while the circumference is now
32:08 - 7572 we can prevent a variable from
32:11 - being changed if we assign it as a
32:14 - constant in place of let use the const
32:17 - keyword and our variable pi is now a
32:20 - constant and a common naming convention
32:22 - for constants is that you make all of
32:24 - the letters uppercase it's not necessary
32:27 - but it's good practice then we are going
32:29 - to change that here too
32:31 - enter the radius of a circle i'll type 9
32:34 - the same as before
32:35 - and we encountered a type error
32:37 - assignment to constant variable so once
32:40 - we declare a constant we can't change it
32:42 - so if i were to get rid of this line run
32:44 - this again 9 the circumference is 56.54
32:48 - you'll want to use constants as often as
32:50 - possible if you have a variable that you
32:53 - know will not be changed later we're not
32:55 - going to assign radius and circumference
32:57 - as constants because we'll need to
32:58 - update them later in our program so yeah
33:01 - those are constants it's basically just
33:02 - a variable that can't be changed it adds
33:05 - a little bit of data security if you
33:06 - found this video helpful you can help me
33:08 - out by smashing that like button leave a
33:10 - random comment down below and subscribe
33:11 - if you'd like to become a fellow bro
33:15 - all right everybody let's talk about
33:16 - javascript math math is an intrinsic
33:19 - object that provides basic mathematics
33:22 - functionality and constants there's a
33:24 - lot of functions i think that you would
33:26 - find useful in this example we have a
33:28 - variable x and x equals 3.14 feel free
33:33 - to choose any number that you want maybe
33:35 - i need to round this variable well
33:36 - there's a built-in function of math that
33:38 - can do that for us i could just type x
33:42 - equals then type math
33:44 - dot
33:45 - and then i have access to a bunch of
33:47 - different functions i would like to
33:49 - round x so add a set of parentheses and
33:52 - pass in a value or a variable that you
33:55 - would like to round and then if i was to
33:57 - display the value of x with console.log
34:01 - this would display my value or variable
34:04 - rounded whatever's within the set of
34:06 - parentheses of this function and x
34:08 - rounded is 3. let's cover a few more
34:12 - the floor function will always round a
34:15 - number down if this variable was 3.99
34:18 - the floor function will always round
34:20 - down x is still three if you need to
34:23 - round up there is the ceiling function
34:26 - which is shortened to c e i l
34:30 - if x is 3.14
34:32 - seal will round up
34:34 - x is now four you can raise a value to a
34:37 - given power
34:39 - x equals math dot pow in the parentheses
34:42 - you'll give a base and an exponent each
34:45 - is separated with a comma
34:47 - x to the power of 2 is 9.8
34:50 - x to the power of 3
34:52 - is 30.9 their square root x equals math
34:56 - dot square root
34:58 - sqrt for short
35:00 - the square root of x
35:02 - is 1.77
35:04 - to find an absolute value you can use
35:07 - the absolute value function x equals
35:10 - math.abs the absolute value is the
35:13 - distance away from zero if x was
35:15 - negative three point one four the
35:17 - distance away from zero would result in
35:19 - a positive number positive three point
35:22 - one four this time we have a couple
35:24 - variables and we need to find the
35:25 - maximum and the minimum we'll create two
35:27 - more variables let y equal
35:30 - i don't know what about five
35:33 - let z
35:34 - equal nine i'll declare a maximum and a
35:37 - minimum
35:39 - let maximum
35:40 - lat minimum
35:42 - i will assign maximum equal to
35:46 - math.max function
35:48 - and pass in x y and z
35:51 - this will return the maximum and assign
35:53 - it
35:54 - so the maximum between x y and z
35:57 - is nine then there's also minimum
36:01 - so minimum equals math.min
36:06 - the minimum between x y and z is x 3.14
36:11 - there's also some built-in constants too
36:13 - with x i assigned 3.14 i would like to
36:16 - assign pi with more digits well there is
36:20 - a built-in constant of math
36:22 - x equals math.pi and when i display x x
36:27 - is three point one four one five nine
36:29 - two six five three five eight nine seven
36:31 - nine three so math is an intrinsic
36:33 - object that provides basic mathematics
36:36 - functionality and constants there's a
36:38 - lot more functions and constants than
36:40 - what we covered but here's a few of the
36:42 - basics so yeah that is javascript math
36:44 - if you found this video helpful you can
36:46 - help me out by smashing that like button
36:48 - leave a random comment down below and
36:49 - subscribe if you'd like to become a
36:51 - fellow bro
36:53 - hey welcome back everybody in this video
36:55 - we're going to create a practice program
36:57 - to find the hypotenuse of a right angled
37:00 - triangle and the formula to solve that
37:02 - is c equals the square root of a squared
37:06 - plus b squared we'll create two
37:07 - variations of this program first we'll
37:09 - accept some user input via some prompts
37:12 - then later on we'll adjust this program
37:14 - and accept some user input through some
37:16 - html text boxes let's begin let's
37:19 - declare three variables each for side a
37:21 - b and c
37:22 - let a
37:24 - let b
37:25 - and let's see we'll accept some user
37:27 - input for sides a and b
37:30 - a equals window dot prompt
37:34 - and the prompt will be enter side a
37:38 - when we accept user input it's a string
37:40 - we'll need to convert that to a number a
37:43 - equals number pass in a
37:46 - let's do the same thing for side b
37:48 - let's copy and paste what we have but
37:50 - change a to b
37:54 - and the formula to calculate the
37:55 - hypotenuse goes a little something like
37:57 - this
37:58 - c
37:59 - equals we'll need to square sides a and
38:02 - b and add them together we can use
38:04 - javascript math dot
38:07 - power function
38:09 - a to the power of two
38:12 - plus
38:13 - copy this paste it
38:15 - b to the power of two then we need to
38:18 - square all of this and that equals c
38:20 - so in the next step we could set c equal
38:23 - to
38:24 - math dot square root
38:28 - and pass in c
38:29 - if you would like to do this in less
38:31 - steps you could copy all of this
38:34 - cut this line
38:35 - and paste what we just copied so this
38:37 - would only take one line of code then at
38:39 - the end we will display side c
38:42 - side c
38:45 - c okay let's run this
38:48 - enter side a
38:50 - a is three
38:52 - b is four side c equals five okay now
38:55 - let's make a more advanced version of
38:57 - this program we'll accept some user
38:59 - input via some html text boxes so let's
39:02 - head to our html file and add a couple
39:05 - elements we'll create three labels
39:09 - label the first will have an id
39:12 - equal to maybe a
39:14 - label then close this tag and i'll add a
39:17 - line break
39:18 - then i'll copy this paste it
39:21 - will have a b label and a c label i'll
39:24 - change the text to side a colon
39:29 - side b
39:31 - and side c
39:33 - okay and this is what we have so far
39:35 - i'll add two text boxes right underneath
39:38 - a and b and then a button later we'll
39:41 - create a self-closing input tag
39:44 - then i'll add a line break at the end
39:45 - before i forget
39:47 - set the type
39:48 - equal to
39:50 - text because it's a text box
39:52 - and i will give this a unique id of a
39:56 - text box
39:59 - okay let's copy this
40:01 - then underneath b label and give this
40:03 - text box an id of b text box okay this
40:06 - is what we have so far
40:08 - then i'll create a button underneath
40:10 - this second text box so right here
40:14 - so we'll create a pair of button tags
40:17 - and a line break i'll set the type equal
40:20 - to button
40:22 - and an id of what about submit
40:27 - button then i should probably add some
40:28 - text
40:29 - so between the button tags
40:31 - submit so let's save then heading back
40:33 - to our javascript file this is what we
40:36 - have to type this will be a little bit
40:38 - advanced for us because we haven't
40:39 - discussed functions yet when we click on
40:41 - this button we need to do something to
40:43 - select this button we will type document
40:46 - dot
40:47 - get
40:48 - element by
40:50 - id within the parentheses we will list a
40:54 - unique id
40:56 - i would like the id of my submit button
41:00 - then follow this with dot
41:02 - on click when we click on this button we
41:05 - would like to do something we would like
41:06 - to perform a function function
41:09 - parentheses curly braces within the
41:12 - curly braces we will execute some code
41:14 - and actually we can copy a lot of what
41:16 - we have here so let's copy our previous
41:18 - code and paste it but we need to change
41:21 - a couple things around we would not like
41:22 - window prompts so let's change this line
41:25 - to a
41:26 - equals
41:28 - document
41:30 - dot get
41:32 - element by id
41:35 - and i would like to get the value of
41:37 - this text box which has a unique id of a
41:41 - text box
41:44 - follow this with dot value we're taking
41:47 - the value of this text box and assigning
41:49 - it to variable a when we accept user
41:51 - input it's normally a string we're going
41:53 - to convert it to a number
41:55 - let's do the same thing with b so copy
41:58 - that line paste it
42:00 - change a to b here and here as well
42:04 - then convert it to a number
42:07 - we can keep this line of code the logic
42:08 - is still the same and lastly we can
42:11 - update this label i'm going to change
42:13 - this around real quick
42:15 - i don't want to display anything but
42:16 - we'll still keep the label i'm going to
42:18 - change the inner html of this label c
42:21 - label
42:24 - document dot get
42:26 - element
42:27 - by
42:28 - id we are selecting
42:31 - c label and i'm going to change the
42:34 - inner html
42:36 - and set this equal to
42:38 - side c
42:40 - colon space
42:41 - plus c
42:43 - okay so make sure you save both your
42:45 - html document and your javascript file
42:47 - and let's run this
42:49 - so side a is three side b is four let's
42:52 - press submit and side c is five so yeah
42:56 - everybody that is a practice program to
42:58 - find the hypotenuse of a right angled
43:00 - triangle if you would like a copy of all
43:02 - this code i'll post this in the comments
43:04 - section down below if this video helped
43:06 - you out feel free to help me out by
43:07 - smashing that like button leave random
43:09 - comment down below and subscribe if
43:11 - you'd like to become a fellow bro hey
43:13 - yeah everybody in this video we're going
43:15 - to create a simple counter program using
43:17 - javascript so sit back relax and enjoy
43:20 - the show
43:22 - let's begin everybody so head to your
43:24 - html document we will create one label
43:26 - and three buttons
43:29 - label use a closing tag add a line break
43:33 - the id of this label will be count label
43:36 - count
43:37 - label
43:38 - the text will set to be zero to begin
43:40 - with
43:42 - we'll need three buttons
43:45 - button
43:47 - close it the first button will have an
43:49 - id of decrease button
43:52 - decrease
43:54 - button
43:55 - and the text will be decrease
43:59 - okay let's copy this button paste it two
44:01 - additional times
44:03 - the second button will be a reset button
44:06 - text reset and the third button will be
44:09 - increase
44:10 - increase button
44:12 - increase
44:13 - i would like to change the font size as
44:15 - well as the positioning of my count
44:17 - label i'll link an external css style
44:20 - sheet
44:21 - so i will create a new file
44:23 - style dot css
44:26 - within the head of my html document i
44:28 - need to link the style sheet use the
44:31 - link tag
44:32 - we'll set the relationship attribute set
44:34 - the sequel to style sheet and set the
44:38 - href attribute to the name of your style
44:41 - sheet style dot css we'll need this
44:44 - count label id
44:46 - i would like to change the css
44:48 - properties of my count label so add a
44:50 - set of curly braces we'll center this
44:52 - label and increase the font size
44:56 - display
44:57 - block
44:59 - text align
45:02 - center font size 50 should be fine 50
45:07 - pixels
45:08 - save your style sheet
45:10 - save your html file
45:12 - and head to your javascript file we'll
45:15 - declare and assign a count variable let
45:17 - count equal zero when we click on one of
45:20 - these three buttons we would like to
45:21 - perform some function
45:24 - let's select the decrease button
45:26 - document.getelementbyid
45:31 - decrease
45:32 - button
45:34 - dot on
45:36 - click
45:37 - let me close out of this equals a
45:40 - function parenthesis curly braces
45:43 - so copy this
45:45 - paste it two additional times
45:48 - we have reset button
45:50 - and increase button when i select the
45:53 - decrease button i will take our count
45:55 - variable minus equals
45:57 - one and we will change the inner html of
46:00 - this label
46:02 - document.getelementbyid
46:06 - count
46:07 - label
46:09 - dot inner
46:10 - html set the sql to our count
46:14 - copy these two lines of code
46:18 - paste it within each of these functions
46:20 - for the reset button we will set count
46:22 - to equal zero and the increase button
46:25 - count plus equals one let's save
46:29 - when i click the increase button it
46:31 - increases my label decrease decreases my
46:34 - label
46:35 - and the reset button resets my label so
46:38 - yeah everybody that is a simple counter
46:40 - program in javascript i'll post the code
46:43 - for this program in the comment section
46:44 - down below hey if this video helped you
46:46 - out help me out by smashing that like
46:48 - button leave random comments down below
46:50 - and subscribe if you'd like to become a
46:51 - fellow bro
46:54 - hey everybody just so you know that this
46:56 - topic is completely optional if you're
46:58 - ever interested in making any sort of
47:00 - games with javascript then this video is
47:02 - a must let's begin to create a random
47:03 - number let's declare a variable and we
47:05 - will set the sequel to type math dot and
47:09 - there is a random method then let's
47:11 - display whatever x is console.log
47:14 - x the random method of math will
47:17 - generate a random decimal number between
47:19 - 0 and 1. but we can actually use that
47:22 - maybe we're rolling a dice how do i
47:23 - generate a random number between one and
47:26 - six so to do this i'm going to take math
47:29 - dot random and multiply this by six
47:33 - this gives us a random decimal number
47:35 - between zero and five technically to
47:38 - truncate the decimal portion we can
47:40 - round down i will surround this with a
47:41 - set of parenthesis
47:43 - and we will use math dot floor
47:46 - and this will round down this generates
47:49 - a random number between 0 and five
47:51 - because computers always start with zero
47:53 - if i need a one through six i can add an
47:55 - offset i'll just add plus one this
47:57 - generates a random number between one
48:00 - and six as if we were rolling a dice now
48:02 - i like to play a lot of dungeons and
48:04 - dragons and there's different sized dice
48:06 - there's eight sided dice 10 sided dice
48:08 - 20 sided dice etc if i'm simulating
48:11 - rolling a 20-sided dice i would multiply
48:14 - math.random method times 20 plus 1. so
48:18 - this generates a random number between 1
48:20 - and 20. maybe i need to roll a couple
48:22 - dice i'll copy this line of code
48:25 - we'll create variables y and z
48:28 - then display them
48:31 - console.log x y and z this would be as
48:35 - if we're rolling three dice we get three
48:38 - random numbers between one and six just
48:40 - for fun let's create some labels and
48:42 - generate some random numbers within our
48:44 - dom so within the body of my html
48:46 - document i'll create a couple labels
48:49 - label id this will be x label then close
48:53 - this label add a line break i'll add two
48:56 - more
48:58 - y label
49:00 - and z label then i'll create a button
49:03 - close the tag
49:05 - type equals button
49:08 - id equals roll
49:11 - button
49:12 - then i will add some text to the button
49:14 - roll make sure to save heading back to
49:17 - our javascript file
49:20 - when we click on this button we will
49:21 - execute a function
49:23 - so we need to select our button document
49:26 - dot get
49:28 - element by id the name of our button is
49:32 - roll button
49:35 - dot on click
49:37 - equals set the sql to a function
49:40 - parentheses curly
49:42 - braces let's copy these lines of code
49:48 - we don't need to declare these again
49:51 - let's get rid of this text
49:53 - we'll declare the variables at the top
49:55 - so after rolling three random numbers
49:57 - between one and six i will update our
50:00 - labels
50:01 - x label y label and z label we need to
50:04 - select each of these labels
50:06 - document.getelementbyid
50:11 - label dot inner
50:13 - html set the sql to
50:16 - x
50:18 - then do the same thing with y and z
50:21 - make sure to change the labels to y
50:23 - label
50:24 - equals y
50:26 - z label equals z
50:29 - so make sure to save both of your files
50:31 - oh i'm forgetting z there okay
50:34 - so now when i press this button we will
50:36 - roll three dice and we end up with three
50:39 - random numbers between one and six
50:41 - so yeah that's how to generate some
50:43 - random numbers in javascript if this
50:46 - video helped you out you can help me out
50:47 - by smashing that like button leave a
50:49 - random comment down below and subscribe
50:51 - if you'd like to become a fellow bro
50:54 - hey welcome back everybody so let's talk
50:56 - about some useful string properties and
50:58 - methods i have a variable user name and
51:02 - assign this whatever your first and last
51:04 - name is if we type this variable and add
51:07 - a dot we have access to a bunch of
51:09 - different properties and methods of this
51:11 - string one of which is the length
51:13 - property this will give us the length of
51:15 - a string how many characters are within
51:17 - the string we could assign this to a
51:19 - variable name length equal username dot
51:23 - length or we could display it i'm going
51:26 - to display this with a console.log
51:28 - statement
51:29 - console.log username.length the length
51:32 - of my name is eight characters but yours
51:35 - will likely be something different let's
51:37 - cover a few more we can get the
51:39 - character of a string at a given index
51:42 - type the name of the string variable dot
51:45 - char
51:46 - at add a set of parentheses whatever
51:49 - character you would like to return you
51:50 - will add the index of that character
51:52 - computers always start with zero so the
51:54 - first character in the string would have
51:57 - an index of zero so maybe i would like
52:00 - to assign this to a variable let
52:02 - first letter equal username dot char at
52:08 - index zero or you know i could display
52:10 - it with console.log
52:12 - and then just add this variable and
52:14 - method within the parentheses the
52:16 - character at index 0 of my string is b
52:20 - then index 1 would be r
52:23 - 2
52:24 - would be o that is the char at method
52:27 - you can find the index of the first
52:29 - occurrence of a letter type the variable
52:31 - name user name dot
52:35 - index
52:37 - of then pass in a character you would
52:39 - like to find the first index of how
52:41 - about o and then i will display this
52:43 - with
52:44 - console.log the index of the first
52:47 - occurrence of the character o is at
52:49 - index 2
52:50 - 0 1 2. there's also last index of
52:56 - last
52:58 - index of and we'll keep that as o
53:01 - the last occurrence of o
53:03 - has an index of five
53:05 - zero one two
53:07 - three four five we can also trim spaces
53:10 - before and after a string
53:12 - so i'm going to display this as it is
53:16 - and i'll turn these into comments
53:18 - okay console.log username
53:22 - and we have all the space that we would
53:23 - like to get rid of
53:25 - so to do that we will reassign username
53:28 - with user name dot trim
53:32 - this gets rid of any empty spaces before
53:34 - and after any other characters we could
53:36 - make our string all uppercase username
53:39 - equals username dot to uppercase
53:45 - and my name is all uppercase there is
53:47 - also lowercase
53:49 - to
53:50 - lowercase and all the characters are now
53:53 - lowercase okay here's another replace
53:55 - all but this time let's create a phone
53:57 - number
53:59 - let phone number
54:01 - equal then within a set of quotes make
54:03 - up some phone number with dashes
54:05 - 123-456-7890
54:11 - okay using the replace all method i can
54:14 - replace all given characters with
54:15 - another one so phone number
54:19 - equals
54:20 - phone number
54:23 - dot replace
54:26 - all
54:27 - so this has two arguments the character
54:30 - we would like to replace
54:32 - add a comma
54:33 - the second character is what we'll be
54:35 - replacing all of these dashes with how
54:38 - about a forward slash and we will
54:40 - display phone number
54:42 - so here's my phone number
54:44 - if you would like to eliminate these
54:45 - dashes then just don't type in anything
54:48 - and those dashes are gone so yeah those
54:51 - are a few useful string properties and
54:53 - methods if you have a string variable
54:55 - add a dot and you have access to a bunch
54:58 - of different properties and methods a
54:59 - lot of which we didn't cover but these
55:01 - are just a few of the basics so yeah
55:03 - those are some useful string properties
55:05 - and methods if this video helped you out
55:07 - you can help me out by smashing that
55:09 - like button leave a random comment down
55:10 - below and subscribe if you'd like to
55:12 - become a fellow bro
55:15 - sup everybody let's talk about the slice
55:17 - method the slice method extracts a
55:20 - section of a string and returns it as a
55:22 - new string without modifying the
55:24 - original string how is this useful maybe
55:27 - we have a variable full name set the
55:30 - sequel to whatever your full name is
55:33 - what i would like to do is extract
55:36 - certain portions of this full name to
55:38 - create a first name and a last name
55:40 - without changing the full name i'll
55:42 - declare two additional variables but not
55:44 - assign them yet
55:46 - first name as well as last name
55:50 - i can create an entirely new string from
55:52 - an existing string via the slice method
55:55 - let's extract this last name and assign
55:58 - it to this last name variable last name
56:01 - equals
56:03 - then type
56:04 - the original string full name dot slice
56:08 - within the parentheses there's up to two
56:10 - values that we can add the starting
56:13 - index and the ending index if i need my
56:15 - last name that would be at index 0 1 2 3
56:20 - 4. so 4 would be the last value if you
56:23 - don't add a second value it's assumed to
56:25 - copy everything until the end of the
56:27 - string i would like the entire rest of
56:29 - the string after index 4 and then we'll
56:32 - assign it to this new variable last name
56:34 - let's display it to test it
56:36 - console.log
56:38 - last name and this should display my
56:40 - last name yep what if i need the first
56:43 - name you can place up to two indices so
56:45 - first name equals
56:48 - type the original string full name
56:51 - dot slice the starting index will be
56:54 - zero and the ending index will be in my
56:57 - example 0 1 2 3. this doesn't include
57:01 - the last character all right then let's
57:03 - display my first name
57:07 - and there's my first name even though
57:09 - this does work it wouldn't be realistic
57:11 - to do this by hand manually every time
57:13 - we would like to create a first name and
57:15 - a last name from a full name right so
57:17 - why don't we use the string index of
57:19 - method to search for any spaces and
57:21 - return it index so let's try this again
57:23 - let's begin with last name
57:25 - last name equals full name
57:29 - dot slice
57:30 - and we only need one index we need the
57:33 - starting position of where to begin so
57:35 - we would like to begin where there's any
57:37 - spaces plus one so we need to begin at
57:40 - this character in my example but it
57:41 - might be different depending on what
57:43 - your full name is so i would like to
57:45 - search for any spaces and i can do that
57:47 - by taking my string full name dot and
57:50 - use the index of operator and we will
57:54 - search for the index of any spaces
57:56 - so let me hide my first name here
57:59 - oh pay attention to capitalization there
58:02 - however i need to get rid of the space
58:04 - because the first value is inclusive so
58:07 - i will add plus one
58:09 - everything after the first space
58:11 - slice it and create a new string so
58:13 - there's my last name then let's do this
58:15 - with our first name
58:17 - first
58:18 - name
58:19 - equals
58:20 - full name
58:22 - dot slice
58:24 - then we'll need two indices
58:26 - zero the beginning
58:29 - and we will end wherever there's a space
58:34 - so there's my first name and my last
58:36 - name let's try a different name just to
58:37 - be sure that it's working right how
58:39 - about snoop dogg
58:42 - yep snoop dogg all right everybody that
58:46 - is the slice method it extracts a
58:48 - section of a string and returns it as a
58:50 - new string without modifying the
58:52 - original string in our example we
58:54 - created a first name and a last name
58:57 - from a user's full name and that is the
58:59 - string method if you found this video
59:01 - helpful you can help me out by smashing
59:03 - that like button leave random comment
59:05 - down below and subscribe if you'd like
59:06 - to become a fellow bro
59:09 - hey everybody we're talking about method
59:11 - chaining method chaining is a
59:13 - programming technique where you call one
59:15 - method after another in one continuous
59:18 - line of code here's an example of where
59:20 - it could be useful let's say we have a
59:22 - username
59:25 - and assign this whatever your first name
59:26 - is but i'm going to make this all
59:28 - lowercase in this example what i would
59:30 - like to do is take the first character
59:33 - of the string and make it uppercase
59:35 - without using method chaining we could
59:37 - do something like this
59:39 - we'll create a temporary variable to
59:41 - store a letter and i will return the
59:43 - first letter in the string
59:46 - user name dot and i will use the char at
59:50 - method
59:51 - and the first letter has an index of
59:53 - zero letter is now b but now i would
59:56 - like to make it uppercase i will need to
59:58 - reassign my letter variable equals
60:02 - letter dot
60:03 - to
60:04 - uppercase
60:07 - and then we can display this
60:10 - console.log letter this should display
60:13 - the letter capital b to write this code
60:16 - a little more elegantly we could use
60:18 - method chaining after calling one method
60:21 - we can call subsequent methods i'll
60:23 - eliminate this line and follow the char
60:26 - at method with
60:29 - two
60:30 - uppercase
60:31 - then add that set of parentheses this
60:33 - single line of code will do the exact
60:35 - same thing and it's easier to read and
60:37 - understand you can follow one method
60:40 - call it with another if i would like to
60:42 - invoke another method i don't know like
60:44 - trim i could just add that to the end
60:46 - you have the capability of calling one
60:48 - method after another in one continuous
60:51 - line of code it makes your code cleaner
60:53 - and more readable so yeah that's method
60:55 - chaining if you found this video helpful
60:56 - feel free to help me out by smashing
60:58 - that like button leave a random comment
61:00 - down below and subscribe if you'd like
61:01 - to become a fellow bro
61:04 - sup guys in this video i'm going to
61:06 - explain if statements an if statement is
61:09 - a basic form of decision making if a
61:11 - condition is true then we do something
61:14 - we execute some subset of code if not
61:17 - then we don't do it in this example i
61:20 - have variable age and i'll set the
61:22 - sequel to maybe 21. if somebody's age is
61:25 - over 18 i would like to display a
61:27 - message that says you're an adult if
61:29 - they're under 18 it doesn't display
61:31 - anything so to create an if statement
61:33 - type if a set of parentheses for a
61:35 - condition and then a set of curly braces
61:38 - if some condition that we check is true
61:41 - we will execute any code within these
61:43 - curly braces i would like to check to
61:45 - see if age is greater than or equal to
61:49 - 18. if it is then we'll execute whatever
61:52 - code is within these curly braces and
61:54 - i'll display a message
61:57 - you are an adult
62:01 - my current age is 21 the if statement
62:03 - checks this condition
62:05 - it's true so we do this if it's not true
62:08 - like i'm 12 it will skip over anything
62:10 - within these curly braces entirely this
62:13 - gives us a lot of options if statements
62:15 - are a basic form of decision making now
62:18 - in place of just skipping this code
62:19 - entirely we could do something else if
62:22 - you would like to take a different
62:23 - course of action you could add an else
62:25 - statement else let's print a different
62:27 - message
62:30 - you are a child
62:33 - now when i run the same code we will
62:35 - check this if statement if it's false
62:38 - then we skip everything within the curly
62:39 - braces if there's an else statement we
62:42 - instead do this
62:44 - you are a child if there's any other
62:46 - conditions you would like to check
62:48 - before reaching the else statement you
62:49 - can add an else if statement
62:52 - else
62:53 - if maybe i'll check to see if age is
62:57 - less than zero and we'll display
62:59 - something else
63:01 - console.log
63:03 - you haven't
63:04 - been born yet
63:07 - currently my age is 12
63:09 - this condition isn't true we skip it
63:12 - this condition isn't true we skip it and
63:14 - we move on to the else statement kind of
63:16 - like a last resort now if this condition
63:19 - is true
63:20 - age is less than zero maybe i'm negative
63:22 - five years old well then
63:25 - this statement is false but this one is
63:27 - true and you can add as many else if
63:29 - statements as you want now check this
63:31 - out let's check to see if somebody is a
63:33 - senior if they're 65 or older
63:36 - else if age is greater than or equal to
63:39 - 65.
63:43 - you are a senior
63:45 - citizen
63:47 - so let's change our age to 65.
63:50 - now check this out
63:52 - so it displays the message you are an
63:54 - adult still that's because this if
63:57 - statement is still true our age is
63:59 - greater than or equal to 18. so the
64:01 - order of your if statements does matter
64:04 - if i would like to check this condition
64:06 - first i should probably move this to the
64:07 - top and make it an if statement so let's
64:10 - make this statement if and the second
64:12 - one else if
64:15 - there
64:15 - you are a senior citizen if you need to
64:18 - check a boolean value that's actually
64:20 - really easy to do with if statements
64:22 - so i'm going to turn all of these into
64:24 - comments and here's another example
64:28 - maybe we have a variable
64:30 - online if somebody's online
64:32 - this is true if they're offline this is
64:35 - false if you need to check a boolean
64:37 - value using an if statement you could
64:40 - just place the boolean variable within
64:42 - here if online so if a user is online
64:47 - let's display
64:49 - you are online
64:51 - else
64:54 - you are offline
64:57 - okay online is set to true you are
64:59 - online if this was false
65:02 - you are offline so yeah everybody those
65:04 - are if statements it's a basic form of
65:07 - decision making
65:08 - if a condition is true then do something
65:12 - if not then don't do it so yeah those
65:14 - are if statements in javascript hey if
65:17 - this video helped you out you can help
65:18 - me out by smashing that like button
65:20 - leave a random comment down below and
65:22 - subscribe if you'd like to become a
65:23 - fellow bro
65:25 - hey guys in this video i'm going to
65:27 - explain the checked property of check
65:30 - boxes and radio buttons all the checked
65:32 - property does is let us know if a check
65:34 - box or a radio button is selected
65:37 - accessing the checked property will give
65:38 - us a boolean value true or false heading
65:41 - to our html document let's create a
65:43 - checkbox
65:45 - input
65:46 - the type will equal
65:49 - check box
65:51 - give this check box a unique id
65:54 - my check box is good
65:57 - there's our check box but we should
65:58 - probably add a label because we don't
66:00 - know what it's for
66:03 - label for
66:05 - equals
66:06 - copy your id
66:07 - paste it
66:10 - close the label
66:11 - let's add some text
66:13 - perhaps this is a subscribe button
66:16 - we can check either the check box itself
66:19 - or click on the label to check that
66:21 - then we will add a button this will be a
66:23 - submit button
66:25 - button id equals my button
66:29 - let's close it add some text
66:32 - submit
66:34 - i think i'll add this on a new line i'll
66:36 - add a line break
66:38 - and that should be good for now
66:40 - heading to our javascript file when we
66:42 - click on this button we would like to do
66:44 - something
66:45 - first we will select this button by
66:47 - typing document dot
66:50 - get
66:51 - element
66:52 - by id
66:54 - the id of that button was
66:56 - my button
66:57 - set the on click event attribute equal
67:01 - to a function
67:03 - when we click on this button what would
67:05 - we like to do i would like to see if
67:07 - this checkbox is checked or not
67:09 - i'll use an if else statement
67:12 - if that checkbox is checked we'll do
67:13 - something if not we'll do something else
67:16 - within the parentheses we'll select this
67:19 - checkbox
67:21 - document dot
67:22 - get
67:23 - element by id
67:26 - the id of that checkbox was
67:29 - my checkbox
67:31 - follow this with the checked property
67:34 - we can check to see if this is true by
67:36 - using the comparison operator which is
67:38 - two equal signs true
67:41 - this is optional but you don't
67:42 - necessarily need to write that
67:44 - if document.getelementbyid
67:47 - my checkbox is checked what are we going
67:50 - to do
67:51 - let's let the user know that they're
67:52 - subscribed
67:54 - console.log
67:57 - you are subscribed
68:01 - else if this checkbox is not checked
68:04 - then you are
68:07 - not subscribed
68:09 - okay let's try it i'll just press submit
68:12 - you are not subscribed i'll reload the
68:14 - page check that checkbox again press
68:16 - submit you are subscribed
68:19 - now this can be a little difficult to
68:20 - read what i like to do is store elements
68:23 - within a variable for readability i'm
68:25 - going to copy this section
68:28 - then assign it to a variable maybe a
68:30 - constant const my
68:32 - checkbox
68:34 - equals
68:37 - by document.getelementbyid my check box
68:40 - we can refer to this element by this
68:41 - variable name
68:43 - if my check box is checked
68:46 - this would do the same thing i find it
68:48 - easier to read
68:50 - okay level two let's do this again but
68:52 - with radio buttons
68:54 - heading back to our html file we'll
68:56 - create three radio buttons
68:59 - input
69:00 - type equals radio
69:04 - these will all have the same name
69:07 - perhaps this will be card for payment
69:10 - what kind of card are you going to use
69:13 - the id of the first button will be a
69:15 - visa button
69:16 - if they're paying with a visa card
69:18 - okay let's copy this paste it two times
69:23 - a mastercard button
69:26 - then what about paypal button
69:32 - i'm gonna add a line break at the end
69:36 - then let's add some labels
69:40 - label close it
69:43 - the four attribute will be the same as
69:45 - the
69:46 - id the text will be visa
69:51 - then mastercard
69:55 - master card
69:59 - lastly paypal
70:05 - paypal
70:07 - okay we have our three payment options
70:10 - since these three radio buttons are
70:11 - within the same group we can only select
70:13 - one be sure to save everything heading
70:16 - back to our javascript file let's get
70:18 - all of the buttons and store them within
70:20 - a variable
70:22 - const
70:24 - visa button
70:26 - equals document.getelementbyid
70:29 - the id was visa button
70:37 - then we have
70:38 - mastercard
70:40 - button
70:44 - then paypal button
70:53 - okay we have our buttons
70:55 - using if else statements we'll check to
70:57 - see which of these buttons is selected
71:00 - first we'll check our visa button if
71:03 - visa button dot checked
71:07 - then we'll display a message
71:11 - you are paying
71:13 - with a visa
71:18 - else if
71:19 - mastercard button is checked you are
71:22 - paying with a
71:23 - mastercard
71:27 - else if
71:30 - paypal button is checked
71:32 - you are paying with
71:34 - paypal
71:36 - else no radio button must be selected
71:43 - you must select a payment type
71:48 - let's try this
71:50 - i'll select visa press submit you are
71:52 - paying with the visa
71:54 - mastercard submit you are paying with
71:57 - the mastercard paypal submit
71:59 - you are paying with paypal i'll refresh
72:02 - the page not select anything that will
72:04 - execute the else statement
72:07 - you must select a payment type so yeah
72:10 - everybody that is the checked property
72:12 - they're typically found within check
72:14 - boxes and radio buttons you can access
72:16 - this property by following a check box
72:19 - or a radio button with dot checked this
72:22 - value will be true or false if it's true
72:25 - you can do something if not you can do
72:27 - something else so yeah that's the
72:29 - checked property everybody if you would
72:31 - like a copy of all this code i'll post
72:33 - all of this in the comment section down
72:34 - below and well yeah that's the checked
72:36 - property in javascript
72:41 - hey guys in this video i'm going to
72:43 - explain switches a switch is a statement
72:45 - that examines a value against many case
72:49 - clauses it's more efficient than using
72:52 - many else if statements in this example
72:54 - i have a letter grade what i would like
72:56 - to do is examine this letter grade if
72:58 - our grade equals a then we will display
73:01 - you did great else if grade equals b you
73:04 - did good c you did okay d
73:08 - you passed barely f you failed and there
73:11 - is an else statement if something is not
73:13 - one of these letter grades maybe the
73:15 - word pizza pizza is not a letter grade
73:18 - it's not normally good practice to use a
73:20 - whole bunch of else if statements if you
73:22 - find that you're using a lot of else if
73:24 - statements it may be better to instead
73:26 - create a switch let's write the same
73:29 - program but use a switch instead to
73:31 - create a switch we type switch a set of
73:34 - parentheses and then a set of curly
73:36 - braces within the parentheses we're
73:38 - going to examine a value or variable i'm
73:41 - going to examine our grade and we will
73:43 - compare our grade against many case
73:45 - clauses
73:46 - and see if there's a match to create a
73:48 - case clause you type case and then some
73:50 - value that you would like to examine to
73:52 - see if there's a match
73:54 - case a we're checking to see if grade is
73:57 - equal to a if they match then we do
74:00 - something so add a colon then type
74:02 - whatever you would like to do
74:04 - console.log
74:07 - you did great then at the end of your
74:09 - case make sure to add the word break
74:12 - this is our case if grade is equal to a
74:15 - so what if grade is equal to b
74:17 - case
74:18 - b
74:19 - you did
74:20 - good case c
74:24 - you did
74:26 - okay
74:27 - case d
74:31 - you
74:32 - passed
74:35 - barely
74:36 - case f
74:40 - you failed now if there's no matching
74:43 - cases you can add a default clause
74:46 - default
74:47 - let's display
74:49 - grade
74:52 - is not a letter grade
74:56 - this will do the same thing except it's
74:57 - more efficient our grade is a you did
75:00 - great
75:01 - b you did good
75:02 - c you did okay d you passed barely
75:06 - f you failed
75:08 - let's make up something pizza
75:10 - pizza is not a letter grade so that's a
75:13 - switch statement now with your cases you
75:15 - could put a condition instead of letter
75:18 - grades what if we were working with
75:20 - number grades like 95 is an a so another
75:23 - way of writing the switch is that if
75:25 - we're checking conditions we could pass
75:27 - true within the switch we'll examine
75:30 - true against some matching conditions
75:32 - case
75:33 - grade
75:34 - is greater than or equal to 90 so that
75:37 - would be an a
75:38 - case grade is greater than or equal to
75:41 - 80. that would be a b grade is greater
75:44 - than or equal to 70 that's a c grade is
75:47 - greater than or equal to 60 that's a d
75:50 - grade is less than 60 so that would be
75:53 - an f now this way you can compare a
75:56 - value or variable against many matching
75:58 - conditions so that would be another way
76:01 - of writing a switch so yeah everybody
76:03 - that is a switch statement it examines a
76:05 - value for a matching case against many
76:08 - case clauses it's more efficient than
76:10 - using many else if statements using an
76:13 - elsif statement isn't bad but you don't
76:15 - want like you know 10 of them so yeah
76:17 - that's a switch everybody if you found
76:19 - this video helpful you can help me out
76:20 - by smashing that like button leave
76:22 - random comments down below and subscribe
76:24 - if you'd like to become a fellow bro
76:27 - well alright then everybody we are on
76:30 - the and as well as or logical operators
76:33 - they give us the ability to check more
76:35 - than one condition concurrently how is
76:38 - this useful here's an example
76:40 - we have a variable temp temp short for
76:43 - temperature i would like to check to see
76:45 - if my temperature falls within a certain
76:47 - range using an if statement is 15
76:49 - degrees celsius that's not a bad
76:51 - temperature within the condition of an
76:53 - if statement i would like to check if my
76:55 - temperature is greater than 0 and less
76:58 - than 30 so within the
77:00 - parentheses let's check if temp is
77:04 - greater than zero
77:06 - and to check another condition
77:08 - concurrently we can use
77:10 - and which is two ampersands
77:13 - and i would like to check if temp is
77:15 - less than 30.
77:17 - if my temperature falls within this
77:19 - range between 0 and 30 then we execute
77:23 - whatever's within this if statement
77:27 - let's display
77:29 - the weather
77:30 - is good
77:31 - else
77:35 - the weather is bad
77:38 - our temp is currently 15 15 degrees
77:40 - celsius
77:41 - the weather is good this condition is
77:43 - true
77:44 - and this condition is true with the and
77:47 - logical operator both conditions must be
77:50 - true in order for us to execute this if
77:52 - statement if one of them is false then
77:54 - we don't
77:56 - what if our temperature was negative 10
77:58 - this condition is false but this one is
78:00 - true
78:01 - and using the and logical operator both
78:04 - conditions must be true which they're
78:06 - not in this example so we skip this if
78:08 - statement and execute the else statement
78:11 - the weather is bad maybe our temperature
78:13 - is 50 degrees celsius this time this
78:16 - condition is true but this one is false
78:19 - therefore we skip this if statement the
78:21 - weather is bad that's one use of the and
78:23 - logical operator you can check more than
78:25 - one condition and it's useful if you
78:27 - need to find if something is within a
78:29 - certain range like a range of
78:31 - temperatures let's talk about the or
78:33 - logical operator using the or logical
78:35 - operator either condition can be true in
78:38 - order to execute this if statement
78:40 - so let's rewrite this this time let's
78:42 - check to see if temp is less than or
78:44 - equal to zero
78:46 - or
78:47 - which is represented by two vertical
78:49 - bars
78:51 - or temp
78:53 - is greater than or equal to 30. if at
78:56 - least one of these conditions is true
78:58 - then we execute this if statement but
79:00 - the weather will be bad else the weather
79:03 - is good our temperature is currently 50
79:06 - the weather is bad what if our
79:08 - temperature was negative 10. the weather
79:11 - is still bad how about 15
79:13 - well the weather is good
79:15 - using the or logical operator either one
79:18 - of these conditions can be true if one
79:20 - is false and the other is true that's
79:22 - completely fine now you can add more
79:24 - than one logical operator let's head
79:26 - back to our previous example i'm just
79:28 - going to undo everything
79:30 - let's throw in another variable let
79:33 - sunny sunny will be a boolean value
79:35 - sunny will equal true if it's sunny
79:37 - outside if it's cloudy outside well then
79:40 - sunny will be false so in order for the
79:42 - weather to be good the temperature needs
79:43 - to be above zero
79:45 - and under 30
79:47 - and sunny needs to be equal to true
79:50 - but if you're working with a boolean
79:52 - value you don't need to say equals true
79:55 - you can just add that boolean variable
79:57 - so our temperature is 15
80:00 - and sunny is true all three of these
80:02 - conditions are true therefore the
80:04 - weather is good if the temperature is 15
80:07 - but it's not sunny outside that's false
80:10 - well then the weather is bad you can
80:12 - link more than one condition using these
80:14 - logical operators so yeah that's the and
80:17 - as well as the or logical operators you
80:20 - can check more than one condition
80:21 - concurrently hey if this video helped
80:23 - you out you can help me out by smashing
80:25 - that like button leave a random comment
80:26 - down below and subscribe if you'd like
80:28 - to become a fellow bro
80:31 - hey everybody let's talk about the nut
80:33 - logical operator which is represented by
80:35 - an exclamation point within a condition
80:37 - it's typically used to reverse a
80:39 - condition's boolean value a condition
80:42 - that is true that's preceded with the
80:44 - not logical operator becomes false if
80:46 - it's false originally it becomes true it
80:49 - gives us a few additional ways to write
80:51 - code here's an example we have variable
80:53 - temperature temp for short and i'll set
80:56 - this to 15 degrees celsius if i would
80:58 - like to check to see if it's warm or
81:00 - cold outside normally i could write an
81:02 - if else statement
81:04 - if temp is greater than zero then it's
81:06 - warm outside
81:09 - it's warm outside
81:12 - else it's cold outside
81:15 - currently our temperature is 15 degrees
81:17 - celsius it's warm outside if it was
81:20 - negative 15 it's cold outside using the
81:23 - not logical operator we can write this
81:25 - code a different way if we choose to we
81:27 - can check to see if the temperature is
81:29 - not greater than zero so to do so we
81:32 - will surround this condition with a set
81:33 - of parentheses and precede this
81:35 - condition with the not logical operator
81:37 - an exclamation point in plain english
81:40 - we're checking to see if our temperature
81:43 - is not greater than zero so that would
81:46 - mean it's cold outside right
81:48 - else it's warm outside
81:50 - so taking our same temp of negative 15
81:54 - it's cold outside
81:55 - if it's 15 it's warm outside now let's
81:58 - do this with a boolean variable
82:01 - let
82:02 - sunny equal true
82:04 - if
82:05 - with a boolean variable if you would
82:07 - like to place it within a condition all
82:09 - you have to do to check if it's true is
82:11 - just write the name of the boolean
82:12 - variable if sunny
82:14 - so you don't necessarily need if sunny
82:16 - equals true
82:18 - if sunny
82:19 - if sunny is true
82:21 - then it's sunny outside else
82:27 - it's cloudy outside
82:30 - currently sunny is true
82:32 - therefore it's sunny outside if i would
82:34 - like to check if it's not sunny outside
82:37 - i can precede this boolean variable with
82:39 - the not logical operator and you don't
82:42 - necessarily need to surround it with
82:43 - those parentheses if it's a boolean
82:45 - variable if it's not sunny well then
82:48 - it's cloudy outside else it's sunny
82:52 - outside sunny is true it's sunny outside
82:55 - if it's false it's cloudy outside so by
82:58 - using the not logical operator it gives
83:01 - us a few additional ways in which we
83:02 - could write code more versatility is a
83:05 - good thing so yeah that's the not
83:06 - logical operator it's typically used to
83:09 - reverse a condition's boolean value if a
83:12 - condition is true it's now false if it's
83:14 - originally false it's now true and that
83:17 - is the not logical operator hey if you
83:19 - found this video helpful be sure to
83:21 - smash that like button leave a random
83:22 - comment down below and subscribe if
83:24 - you'd like to become a fellow bro
83:27 - well sup everybody i have to explain
83:29 - what a while loop is a while loop is
83:31 - like an if statement except it repeats
83:34 - some code while some condition is true
83:37 - it could potentially repeat an infinite
83:39 - amount of times here's an example let's
83:41 - say we need to get some user input we
83:43 - would like a user to type in their
83:45 - username let's create a variable user
83:48 - name and i will set the sequel to just
83:50 - an empty string for this example to
83:52 - create a while loop we type while set a
83:55 - parenthesis set of curly braces we will
83:58 - continue this code while the condition
84:00 - remains true let's check to see if our
84:03 - username is equal to an empty string
84:06 - that means the user didn't type in
84:08 - anything so within the curly braces
84:10 - let's create a window prompt username
84:13 - equals window dot prompt
84:16 - enter your name then at the end let's
84:20 - display
84:21 - console.log
84:23 - hello
84:25 - user name and to your name i'm just
84:28 - going to press ok when we reach the end
84:30 - of a while loop we check the condition
84:32 - again if it's still true we repeat this
84:34 - code for another iteration and then
84:36 - check again i'm hitting ok but i can't
84:38 - exit this window prompt until i enter in
84:41 - my name i'll type in my first name hit
84:43 - enter hello bro my username although in
84:46 - this example i'm hitting ok but you
84:48 - could hit cancel to exit let's add
84:50 - another condition
84:53 - or
84:54 - username is equal to null that means
84:57 - there's no value to exit i simply can't
84:59 - press ok
85:01 - or cancel i need to type in something
85:04 - because we're stuck in a while loop i'll
85:05 - type in my first name again and then we
85:07 - can exit once i typed in something for
85:09 - my username both of these conditions
85:12 - were no longer true then we could escape
85:14 - the while loop and continue on with the
85:16 - rest of the program now when you create
85:18 - a while loop you should write some sort
85:19 - of way to escape the while loop from
85:21 - within it otherwise you'll encounter
85:23 - what's called an infinite loop like this
85:26 - while
85:27 - and our condition is while one is equal
85:30 - to one there's no way we can escape it
85:33 - console.log
85:36 - help
85:37 - i'm stuck in an infinite loop
85:42 - so this code will just repeat forever
85:44 - you can see that the counter here is
85:46 - going up i think my web browser froze so
85:49 - yeah that's a while loop everybody it
85:51 - repeats some section of code while some
85:53 - condition is true
85:55 - once you reach the end of that section
85:57 - of code you check the condition again if
85:59 - it's still true you repeat the code
86:01 - again and this could potentially repeat
86:03 - an infinite amount of times so that's a
86:05 - while loop in javascript if you found
86:07 - this video helpful be sure to help me
86:09 - out by smashing that like button leave a
86:11 - random comment down below and subscribe
86:13 - if you'd like to become a fellow bro
86:16 - all right guys i have to explain a
86:18 - variation of the while loop it's called
86:20 - a do while loop how this works is that
86:22 - you do something then you check the
86:24 - condition then you repeat if the
86:26 - condition is true so going back to the
86:28 - previous topic on while loops i have a
86:31 - while loop we're checking if our
86:32 - username is an empty string which it is
86:34 - originally while this condition is true
86:37 - we will prompt the user to enter their
86:39 - name if i run this program and press ok
86:41 - without typing anything i can't escape
86:43 - this prompt once i type in my name hit
86:46 - enter or ok we escape the while loop and
86:48 - move on with the rest of our program
86:50 - which displays hello whatever your
86:52 - username is what i would like to do is
86:54 - not assign my username right away i'll
86:57 - declare this variable but not yet assign
86:58 - it anything now when i run this program
87:00 - here's the problem we don't get that
87:02 - window prompt to type in our name we
87:04 - skip the while loop and continue on with
87:06 - the rest of the program and this
87:07 - displays hello undefined we're using a
87:10 - variable we declared but not yet
87:11 - assigned once we reached our while loop
87:13 - this condition was false from the get go
87:16 - so we skip over the while loop entirely
87:18 - what if i would like to run this code at
87:20 - least once and then prompt again if the
87:22 - username is equal to an empty string one
87:24 - way although i wouldn't recommend it is
87:26 - that we can copy this line of code and
87:29 - paste it before the while loop that
87:30 - prompt comes up i'll skip it and then we
87:33 - enter the while loop and we're stuck
87:34 - within it until we type in something i
87:36 - don't like to repeat code if i don't
87:38 - have to so there's a better way of
87:40 - writing this let's convert this while
87:41 - loop to a do while loop let's copy the
87:44 - while keyword and the condition and
87:46 - we're going to move it to the end of our
87:47 - curly braces and preceding the opening
87:50 - curly brace we will write do instead of
87:52 - checking the condition first we check
87:54 - the condition last we will do all of
87:57 - this code and then check the condition
87:59 - now if i run this program we encounter
88:01 - that window prompt i'll press ok and try
88:04 - and skip this prompt i can't i'll type
88:06 - in my name and we escape the while loop
88:08 - so a do while loop is a variation of the
88:11 - while loop you do something first and
88:13 - then check the condition with a standard
88:15 - while loop you check the condition and
88:17 - then do something if that condition is
88:19 - true with a standard while loop you may
88:21 - skip some code entirely if the condition
88:24 - is false from the beginning with a do
88:26 - while loop you do it at least once and
88:28 - then check the condition so yeah that's
88:31 - a super quick video on do while loops in
88:34 - the next topic we'll move on to for
88:36 - loops
88:38 - well i should probably explain four
88:40 - loops a for loop repeats some code a
88:42 - certain amount of times there's a lot of
88:44 - similarities between what for loops and
88:47 - while loops can do there are a few
88:48 - discrepancies though you tend to use for
88:50 - loops when you want to repeat code a
88:52 - limited amount of times a while loop is
88:54 - better suited to something that could
88:56 - execute an infinite amount of times
88:58 - possibly in this example we'll create a
88:59 - program to count to ten we'll start at
89:01 - one count to ten and we can do that with
89:03 - a for loop so type four
89:05 - parentheses curly braces
89:07 - what would we like to do within our
89:08 - curly braces let's display a variable
89:12 - console.log
89:13 - let's call this counter now within the
89:15 - for loop there's three statements that
89:17 - we can add the first is that we can
89:19 - declare and assign a counter or some
89:22 - other variable the first statement we
89:23 - will type let
89:26 - counter
89:27 - and i'll set the sql to 1.
89:29 - then make sure to add a semicolon at the
89:31 - end to terminate the first statement
89:33 - second is our condition we'll continue
89:35 - this statement as long as this condition
89:37 - is true i will continue this for loop as
89:39 - long as our counter variable is less
89:41 - than or equal to 10
89:43 - then add a semicolon and the third
89:45 - statement is that we can increment our
89:47 - counter
89:49 - counter
89:50 - plus equals one after each iteration we
89:53 - increment our counter variable by one
89:55 - after running this program we begin at
89:57 - one and count to ten if i need to count
89:59 - to 100 i can just change this condition
90:02 - counter is less than or equal to 100 and
90:05 - we have counted from 1 to 100 if i need
90:08 - to begin at a different number i could
90:09 - just set my counter to a different
90:11 - number like i don't know
90:13 - 50. now we have begun at 50 and counted
90:16 - to 100 so this variable counter it's
90:18 - known as a local variable it doesn't
90:21 - exist outside of this for loop what a
90:23 - lot of programmers do if they need some
90:24 - sort of temporary variable within a for
90:27 - loop to keep track of what iteration
90:28 - they're on they'll simply just use i
90:31 - that's a common convention so let's
90:32 - change counter to i
90:35 - so let i
90:37 - equal let's change this back to 1
90:39 - we'll count to 10 and increment i by one
90:42 - after each iteration
90:44 - now we could begin at 10 and count down
90:46 - if we were to take that approach we'll
90:48 - set our variable i to 10 we'll continue
90:50 - this for loop as long as i is greater
90:52 - than zero and we will decrement i by one
90:55 - we could pretend that this is a
90:57 - countdown to new year's day this time
90:59 - when we escape the for loop let's print
91:01 - happy new year
91:03 - console.log
91:05 - happy new year okay we begin at 10 count
91:08 - down to one once this condition is no
91:11 - longer true we escape the for loop and
91:13 - print happy new year so this simulates a
91:16 - countdown so for loops are fairly
91:18 - flexible we can increment or decrement
91:20 - our counter i we're counting down by one
91:22 - currently but we could count down by two
91:24 - if we would like let's change i minus
91:26 - equals one to two and now we will count
91:29 - down by two ten eight six four two happy
91:32 - new year or even three ten seven four
91:35 - one happy new year so yeah that's
91:37 - basically a for loop we repeat some code
91:39 - a certain amount of times there's a lot
91:41 - of overlap where you could use either a
91:43 - while loop or a for loop a while loop
91:45 - tends to be better in certain situations
91:47 - where you may potentially need to repeat
91:49 - some code an infinite amount of times
91:51 - for loops are more suitable for code
91:53 - where you only need to repeat it a
91:55 - certain or given amount of times so yeah
91:57 - those are for loops hey if this video
91:59 - helped you out you can help me out by
92:00 - smashing that like button leave random
92:02 - comments down below and subscribe if
92:04 - you'd like to become a fellow bro
92:07 - hey guys i have a super quick video on
92:09 - the break and the continue statements
92:12 - let's begin with the break statement the
92:14 - break statement breaks out of a loop
92:16 - entirely in this example i'm going to
92:18 - create a for loop we will count the
92:20 - numbers 1 through 20. however once we
92:22 - reach 13 i would like to exit this loop
92:25 - because 13 is considered an unlucky
92:27 - number i know it's a weird example so
92:29 - let's define our counter i i equals one
92:33 - and i will continue this as long as i is
92:36 - less than or equal to 20 then increment
92:40 - i by one
92:41 - for the time being let's display
92:42 - whatever i is this will display the
92:44 - numbers 1 through 20. if i would like to
92:47 - break out of this loop entirely if we
92:49 - reach the number 13 i can add a break
92:52 - statement so let's check to see if
92:56 - i
92:57 - is equal to 13
92:59 - if it is then we'll break
93:02 - okay we have the numbers 1 through 12
93:04 - then we break there's also the continue
93:06 - statement it will skip an iteration of a
93:09 - loop if we replace break with continue
93:13 - we will skip that specific iteration and
93:16 - continue on
93:17 - so we have 1 through 20 but the number
93:20 - 13 is not here so that's the main
93:23 - difference between break and continue
93:25 - break will break out of a loop entirely
93:27 - continue will skip only that iteration
93:30 - so yeah those are the differences
93:32 - between the break and continue
93:33 - statements
93:36 - hey guys in this topic i'll be
93:37 - explaining nested loops a nested loop is
93:40 - just a loop inside of another loop
93:42 - here's an example so i'll create an
93:44 - outer loop that will count i don't know
93:46 - to three
93:47 - let i
93:48 - equal one continue this as long as i is
93:52 - less than or equal to three increment i
93:54 - by one
93:56 - during each iteration i will display the
93:58 - value of i
94:00 - console.log i this counts up to three
94:03 - what if i would like to repeat this
94:04 - entire for loop so many times well i
94:07 - could put a for loop inside of a for
94:09 - loop
94:10 - so let me copy this
94:12 - get rid of this line
94:14 - and paste another for loop within the
94:16 - curly braces of the outer for loop we
94:18 - have a nested loop it's a loop inside of
94:21 - another loop now one thing with nested
94:23 - loops is that you'll want another
94:25 - counter besides i because we don't want
94:27 - to reuse the same counter a common
94:29 - convention of the counter of nested
94:31 - loops is that they'll use a counter of j
94:34 - because j comes after in the alphabet
94:37 - so let's replace i with j
94:39 - and do so with our console.log statement
94:42 - so if i was to run this program we would
94:45 - count the numbers one through three
94:47 - three times once we complete all of our
94:49 - iterations of the nested loop we then
94:52 - complete one iteration of the outer loop
94:55 - if i change this outer loop to continue
94:57 - as long as i is less than or equal to
95:00 - two well then we will repeat this inner
95:02 - loop a total of two times here's a
95:05 - different example let's use nested loops
95:07 - to draw a rectangle within our dom and
95:09 - we'll accept some user input the outer
95:12 - loop will be in charge of the rows the
95:14 - inner loop will be in charge of the
95:16 - columns we'll declare two variables let
95:19 - rows equal window
95:22 - dot prompt
95:24 - enter number of rows
95:27 - then let
95:29 - columns equal number of columns
95:33 - the outer for loop i will continue as
95:35 - long as i is less than or equal to rows
95:38 - and the inner for loop will continue as
95:40 - long as j is less than or equal to
95:43 - columns
95:44 - we'll need an html element to work with
95:46 - so within your html file let's create a
95:49 - label
95:51 - label
95:52 - close it
95:53 - and i will give this an id of my
95:56 - rectangle
95:58 - make sure to save
96:00 - then heading back to our javascript file
96:02 - let's change the inner html of our label
96:06 - i will select our label
96:09 - element document.getelementby id
96:12 - my rectangle
96:14 - i will set the inner
96:16 - html before we draw a rectangle let's
96:19 - print some of these numbers
96:21 - i would like to append the inner html i
96:24 - will set this to plus
96:26 - equals
96:28 - our counter j
96:30 - the inner for loop will print one row
96:33 - then to go down to the next row we can
96:35 - add a break line
96:37 - document
96:38 - dot get element by id
96:42 - my rectangle
96:45 - dot inner html and i'm going to append a
96:50 - line break
96:53 - okay so let's try this for now we'll
96:55 - just print some numbers what about three
96:57 - rows and nine columns
97:00 - so we have three rows and nine columns
97:03 - of our index j let's replace these
97:05 - numbers with maybe a symbol so it's an
97:07 - actual graphical rectangle
97:10 - let's
97:12 - symbol
97:13 - window dot prompt
97:17 - enter a symbol to use
97:21 - and replace j with our symbol
97:25 - enter a symbol to use what about a
97:26 - dollar sign press ok
97:29 - number of rows maybe
97:32 - four rows five columns
97:35 - and we have a graphical rectangle let's
97:37 - try it again what about an asterisk
97:40 - three rows
97:42 - nine columns
97:44 - sweet
97:45 - so yeah everybody that's a nested loop
97:47 - it's a loop inside of another loop when
97:49 - you encounter them it's kind of
97:50 - situational in this video we used a
97:53 - nested loop to help us print a rectangle
97:55 - so yeah that's a nested loop everybody
97:57 - hey if you found this video helpful be
97:59 - sure to help me out by smashing that
98:00 - like button leave random comments down
98:02 - below and subscribe if you'd like to
98:04 - become a fellow bro
98:06 - hey everybody we are moving on to
98:08 - functions with a function you define
98:11 - code once and then use it many times
98:13 - whenever you need to perform some code
98:16 - you simply call the function name in
98:18 - this scenario i need to sing happy
98:20 - birthday like three separate times so
98:22 - without using a function i could write
98:24 - something like this
98:37 - this will be one iteration so when i run
98:39 - this we sing happy birthday once if i
98:42 - need to sing two additional times well i
98:44 - would have to copy this code and paste
98:46 - it two additional times to sing three
98:48 - verses of my happy birthday song so we
98:51 - don't like to repeat code if we don't
98:52 - have to wouldn't it be nice if we could
98:54 - write this code once and reuse it
98:56 - whenever we need well we can do that
98:58 - with a function so to create a function
99:00 - we will type
99:02 - function and then a unique function name
99:04 - let's name this function happy birthday
99:08 - add a set of parenthesis and a set of
99:09 - curly braces any code you would like to
99:11 - repeat simply place within the curly
99:13 - braces
99:16 - if i need to sing one verse of happy
99:17 - birthday i take the function name and
99:20 - add a set of parentheses this will
99:22 - invoke otherwise known as call the
99:24 - function so you type the function name
99:26 - add a set of parentheses i like to think
99:28 - of the parentheses as a pair of
99:30 - telephones that are talking to each
99:32 - other that's how you call a function if
99:34 - i need to use this code again i can
99:36 - simply call the function again so that's
99:38 - 2 times and three times
99:40 - so we have accomplished our task of
99:42 - singing three verses of my happy
99:45 - birthday song what if we have some
99:46 - variables
99:47 - let user name equal your first name
99:52 - and let age equal some age within my
99:55 - happy birthday song i'm going to insert
99:57 - my username
99:59 - as well as my age
100:03 - so within my happy birthday song
100:05 - we have my username and my age functions
100:08 - have access to global variables a global
100:11 - variable is basically a variable that's
100:13 - declared outside of any functions or any
100:15 - set of curly braces for example we may
100:18 - have a function to start our program
100:23 - and we will place this code within here
100:26 - i will call the start program function
100:29 - to begin my program
100:30 - but we have one issue uncaught reference
100:32 - error username is not defined variables
100:35 - when declared with the let keyword
100:37 - aren't recognized outside of the
100:39 - immediate set of curly braces so my
100:41 - happy birthday function has no idea what
100:44 - username or age is these variables only
100:47 - exist within the immediate set of curly
100:49 - braces what i could do is that when we
100:52 - invoke the happy birthday function from
100:54 - within the start program function we can
100:57 - send some information to this happy
100:59 - birthday function so that it will
101:01 - recognize my username and my age to pass
101:03 - some values or variables to a function
101:06 - when you invoke that function within the
101:08 - set of parentheses just list whatever
101:10 - you would like to send over i would like
101:12 - to send over my username and my age
101:15 - these are known as arguments however you
101:18 - need a matching set of parameters within
101:21 - the declaration of my happy birthday
101:23 - function i need a matching set of
101:25 - parameters
101:26 - you can just copy the arguments over and
101:28 - then paste them within the happy
101:30 - birthday function these are known as
101:32 - parameters you need to send over a
101:34 - username and an age so now this should
101:37 - work
101:37 - so here's my username and my age
101:40 - if i invoke this function without
101:42 - passing my arguments well then this
101:44 - function doesn't know what my username
101:46 - and age is and with your parameters they
101:48 - don't necessarily need to be the same
101:50 - name you can rename these values when
101:52 - you receive them within the function
101:54 - i'll rename username as a and age as b
101:58 - and i'll change that here and here
102:01 - this would also work but make sure you
102:02 - get the orders of the arguments and the
102:04 - parameters right so if i switch these
102:06 - around happy birthday dear 21 you are
102:09 - bro years old so the order of the
102:12 - arguments and the parameters does matter
102:14 - so yeah everybody that's a function you
102:16 - define code once and then you can use it
102:18 - many times to perform some subroutine of
102:21 - code you just call the function name
102:23 - this is useful because we don't have to
102:25 - repeat code more than once if you find
102:27 - that you're going to repeat code more
102:28 - than once you could write it within a
102:30 - function so yeah those are functions
102:32 - everybody in the next video we'll
102:34 - discuss return statements hey if this
102:36 - video helped you out you can help me out
102:37 - by smashing that like button leave
102:39 - random comments down below and subscribe
102:41 - if you'd like to become a fellow bro
102:44 - well alright everybody i need to discuss
102:46 - the return statement the return
102:48 - statement is used within a function to
102:50 - return a value back to the spot in which
102:53 - you invoked a function when you call a
102:55 - function you can return some information
102:57 - to demonstrate this we're going to
102:58 - create a program to calculate the area
103:01 - of a rectangle using a function and then
103:03 - return the value so to create this
103:05 - program let's declare a few variables
103:07 - let area
103:09 - let
103:10 - with
103:11 - and let height we'll accept some user
103:14 - input
103:15 - width
103:16 - equals window
103:18 - dot
103:19 - prompt
103:21 - enter
103:22 - width copy this line paste it change
103:25 - width to height
103:28 - here and here at the bottom of our
103:30 - program let's create a function to
103:32 - calculate the area of a rectangle so to
103:35 - create a function type function
103:37 - let's name this get
103:39 - area parentheses curly braces
103:42 - when we use this function to calculate
103:44 - the area of a rectangle we'll need to
103:46 - set up some parameters in order to do so
103:48 - we'll need a width
103:50 - and a height when we invoke this
103:52 - function we will pass these variables as
103:54 - arguments when we assign our area
103:56 - variable let's set this equal to then
103:59 - invoke the get
104:01 - area function
104:03 - but we need to pass in a matching set of
104:05 - arguments
104:06 - our width
104:08 - and our height
104:11 - let's fill in this get area function i
104:13 - will declare a temporary variable let
104:16 - result
104:17 - equals and to calculate the area of a
104:19 - rectangle it's simply width times height
104:22 - if i need to send a value back to the
104:25 - spot in which we called a function we
104:27 - can use the return keyword i would like
104:29 - to return the result
104:30 - then at the end of our program but
104:32 - before our function let's display the
104:34 - result just to be sure that it works
104:36 - fine
104:37 - console.log
104:38 - the area
104:40 - is
104:42 - area okay let's try it okay enter the
104:45 - width
104:46 - maybe five height six the area is thirty
104:49 - let's try it one more time how about the
104:51 - width is six and the height is nine the
104:54 - area is 54. so when we returned the
104:56 - result once this function was completed
104:59 - just imagine that we're replacing this
105:01 - function call with 54. we're returning a
105:04 - value back to the spot we invoked a
105:06 - function we assigned 54 to our variable
105:09 - area you could shorten this code as well
105:10 - you don't necessarily need a temporary
105:12 - variable we could eliminate this line
105:14 - and return width times height and that
105:18 - would do the same thing 6 times 9 is 54.
105:22 - so yeah everybody that is the return
105:23 - statement it returns a value back to the
105:26 - place where you invoked a function so
105:28 - yeah that's the return statement hey if
105:30 - you found this video helpful be sure to
105:31 - smash that like button leave a random
105:33 - comment down below and subscribe if
105:35 - you'd like to become a fellow bro
105:38 - hey guys in this video i'm going to
105:40 - explain the ternary operator it's a
105:42 - shortcut for an if-else statement it's
105:44 - represented by a question mark there's
105:46 - three parts we write some condition
105:48 - follow the condition with a question
105:50 - mark as if we're asking a question if
105:52 - that condition is true we perform an
105:54 - expression if that condition is false we
105:56 - perform a different expression and
105:58 - separate each expression with a colon
106:00 - here's an example let's create a
106:01 - function that will check a user's age
106:04 - initially we'll use an if else statement
106:05 - and then later write it using the
106:07 - ternary operator maybe we have a boolean
106:09 - variable let adult and we will invoke a
106:13 - check age function and pass in some age
106:15 - let's define this function
106:17 - function
106:18 - check
106:19 - age
106:20 - there is one argument let's name this
106:22 - age i need to check to see if age is
106:24 - greater than or equal to 18 i could
106:26 - write
106:28 - with an if statement
106:30 - if age is greater than or equal to 18
106:33 - let's return a boolean value of true
106:36 - else
106:38 - return
106:39 - false let's display whatever our adult
106:42 - boolean variable is
106:43 - console.log
106:47 - adult i passed the number 21 as an
106:49 - argument check age returns true if i was
106:52 - 12 well then check age returns false
106:55 - there's another way of writing this and
106:57 - i think it's a lot easier lot less
106:58 - syntax this function will return a value
107:01 - so i'm going to precede our tenary
107:03 - operator with the return statement to
107:05 - use the ternary operator we write a
107:07 - condition followed with a question mark
107:09 - as if we're asking a question
107:11 - age is greater than or equal to 18
107:14 - question mark second is an expression if
107:16 - that condition is true we're returning
107:18 - something let's return true and the
107:21 - second expression if that condition is
107:23 - false after a colon write some
107:25 - expression or some value
107:27 - false so this will do the same thing
107:29 - currently i'm 12 this returns false if
107:31 - i'm 21 well then it's true we have three
107:34 - parts a condition with a question mark
107:37 - an expression if that condition is true
107:39 - colon and expression if that condition
107:41 - is false here's another example maybe
107:44 - we're playing a game and we have to
107:45 - check to see if somebody won the game
107:48 - i'll declare a check winner function
107:50 - function
107:51 - check
107:52 - winner
107:53 - let's declare a parameter of when this
107:56 - will be a boolean value we're not
107:58 - returning anything we don't need that
108:00 - return keyword if we're examining a
108:02 - boolean variable or parameter all we
108:04 - need to do is type the name win question
108:07 - mark if when is true what do we do
108:10 - let's display a message this time
108:12 - console.log
108:14 - you win
108:15 - colon then some expression if win is
108:18 - false
108:20 - you lose
108:21 - then let's invoke this function
108:24 - check
108:25 - winner
108:26 - then we can pass in a boolean value or
108:28 - variable
108:30 - like true
108:31 - you win
108:32 - or false
108:34 - you lose so that's the ternary operator
108:37 - it's a shortcut for an if else statement
108:40 - you write some condition followed by a
108:41 - question mark if that condition is true
108:44 - you do something if not you do something
108:46 - else it's a shortcut basically so yeah
108:48 - that's the ternary operator if you would
108:51 - like a copy of this code i'll post it to
108:53 - the comment section down below and well
108:54 - yeah that's the ternary operator in
108:57 - javascript
108:59 - guys in this video i'm going to explain
109:01 - some of the differences between the let
109:03 - and var keywords when declaring
109:05 - variables variable scope is where a
109:07 - variable is accessible any variable
109:09 - declared with the let keyword is limited
109:11 - to a block scope it doesn't exist
109:13 - outside any sets of curly braces any
109:16 - variable declared with the var keyword
109:18 - is limited to a function here's an
109:20 - example let's create a for loop
109:22 - we'll count up to three
109:24 - we will declare a counter of i set this
109:27 - equal to one will continue as long as i
109:30 - is less than or equal to three then
109:32 - increment i by one so within my for loop
109:35 - i will display whatever value i is
109:37 - console.log i
109:38 - our results are one two three what if i
109:41 - attempt to access this variable i
109:43 - outside of this for loop
109:45 - console.log
109:48 - hi what would happen exactly we have an
109:50 - uncaught reference error i is not
109:52 - defined that's because any variable
109:55 - declared with the let keyword is limited
109:57 - to a block scope it doesn't exist
109:59 - outside of the set of curly braces
110:01 - that's why my interpreter doesn't know
110:03 - what the heck this is if we instead used
110:05 - the var keyword to declare a variable
110:07 - well then this variable i can exist
110:10 - outside of curly braces and that could
110:12 - be a problem so now if i attempt to
110:14 - display whatever i is it's now 4. so if
110:17 - i would like to reuse this counter i but
110:19 - we declared it with var since it already
110:21 - has a value it's going to potentially
110:23 - mess with my program and cause problems
110:25 - however any variable declared with the
110:27 - var keyword doesn't exist outside of any
110:29 - functions if it's within one let's
110:31 - create a function
110:32 - function do
110:34 - something
110:35 - i don't really care what it does
110:37 - so let's copy this for loop place it
110:39 - within the function and invoke this
110:41 - function do
110:43 - something
110:44 - now when i display i after it's been
110:46 - declared with the var keyword we have
110:48 - that uncaught reference error i is not
110:51 - defined a variable declared with the var
110:53 - keyword can escape a set of curly braces
110:56 - but it can't escape a function if it's
110:58 - contained within one and that's where we
111:00 - need to discuss global variables a
111:02 - global variable is declared outside of
111:04 - any functions so we have our function if
111:07 - i was to declare let
111:09 - name equal
111:11 - some name since this variable is outside
111:14 - of any functions it's considered a
111:16 - global variable my entire program has
111:18 - access to it and recognizes what it is
111:20 - if you use the var keyword when
111:22 - declaring a global variable that can be
111:24 - problematic because if a variable
111:26 - declared with var is global it can and
111:30 - will change the browser's window
111:31 - properties here's an example for a
111:33 - demonstration within my console i'm
111:35 - going to access my browser's window
111:37 - object i will type window
111:40 - select it hit enter we haven't discussed
111:43 - objects yet we will in a future video
111:45 - but windows have properties and my
111:47 - browser window has one property of name
111:50 - and currently it's just an empty string
111:52 - let's say that i'm a beginner programmer
111:54 - and i would like to declare a name
111:55 - variable to hold a username
111:58 - so if i was to use the var keyword and i
112:00 - create a variable name and set the
112:03 - sequel to whatever my name is
112:05 - behind the scenes i will unintentionally
112:07 - change this window property of name so
112:10 - i'm going to save and run this let's
112:12 - access our window again
112:15 - and let's find name there so i have
112:18 - unintentionally changed this windows
112:21 - property of name and i didn't even
112:23 - realize it and that could happen to any
112:24 - of these properties and that could of
112:26 - course possibly mess with your program
112:28 - and cause problems now this time i'm
112:30 - going to use the let keyword and you may
112:33 - need to open this again with live server
112:35 - this time i'm using the let keyword
112:37 - i will type window again
112:40 - select it hit enter and let's find that
112:42 - name property again there by using the
112:45 - let keyword i was able to declare this
112:47 - variable name without changing this
112:49 - windows property of name so yeah those
112:51 - are some of the differences between the
112:53 - var and the let keywords a variable
112:55 - declared with let is limited to a block
112:58 - scope a variable declared with var is
113:00 - limited to a function scope if you
113:02 - declare a global variable with var it
113:05 - can potentially mess with your browser's
113:07 - window properties let will avoid that
113:09 - problem so it's considered good practice
113:11 - to use let over var but you should still
113:13 - know that var exists so yeah everybody
113:16 - those are a few of the differences
113:17 - between var and let hey if you found
113:19 - this video helpful please be sure to
113:21 - smash that like button leave random
113:22 - comments down below and subscribe if
113:24 - you'd like to become a fellow bro
113:27 - hey guys in this topic i'm going to be
113:29 - discussing template literals they're
113:31 - delimited with backticks instead of
113:33 - double or single quotes they allow for
113:35 - embedded variables and expressions maybe
113:37 - we're working on a page for an online
113:39 - store let's create three variables let
113:42 - username make up some username
113:45 - let items for the number of items that
113:47 - we have our cart has maybe three items
113:50 - in it let
113:52 - total
113:53 - and make up some total price 75
113:56 - okay so normally if i would like to
113:58 - display these variables along with some
114:00 - strings with console.log i would write
114:02 - something like this
114:04 - hello
114:06 - username
114:10 - you have
114:13 - items
114:16 - items
114:17 - in your cart
114:22 - your total is
114:25 - dollar sign
114:27 - total hello bro you have three items in
114:29 - your cart your total is 75 dollars
114:32 - another way of writing this which i like
114:34 - to use is to use template literals in
114:37 - place of singular double quotes for
114:39 - strings we will use these backticks so
114:42 - i'm going to copy these three lines of
114:43 - code turn these into comments
114:51 - so when using backticks we can embed a
114:53 - variable or expression within a string
114:55 - for this first string let's type
114:58 - hello and to embed a variable or
115:00 - expression use a dollar sign followed by
115:03 - a set of curly braces
115:05 - and we can embed a value variable or
115:07 - expression i would like to embed my
115:09 - username
115:11 - so currently this is what we have hello
115:14 - your username let's try this again
115:17 - you have i would like to embed items
115:21 - so that's dollar sign curly braces type
115:24 - the variable name
115:25 - items
115:27 - the word items
115:28 - in your cart
115:31 - you have three items in your cart
115:35 - your total is
115:38 - dollar sign curly braces total
115:41 - so if you need that dollar sign i could
115:44 - just precede this with another dollar
115:45 - sign
115:46 - your total is 75
115:48 - i find using template literals a lot
115:50 - easier to work with here's a scenario
115:52 - what if we would like to display one
115:54 - very long string here's what we can do
115:57 - let's assign a new variable let
116:00 - text equals
116:02 - and i will copy what we've placed within
116:04 - these log statements
116:10 - make sure it begins and ends with that
116:11 - backtick character
116:13 - so we have assigned this entire string
116:16 - template to a variable text
116:18 - if i need to display all of this
116:20 - i can simply just use this text variable
116:23 - console.log text
116:26 - hello bro you have three items in your
116:27 - cart your total is 75
116:30 - where this is really helpful is if we
116:32 - need to update an html element with some
116:34 - text
116:35 - especially if it takes up several lines
116:37 - let's head to our html file i'll create
116:39 - a new label
116:41 - label
116:43 - add a closing tag
116:44 - i'll give this an id of
116:46 - my
116:47 - label
116:48 - in place of displaying this to my
116:50 - console i'm going to update this label
116:53 - to select that label i will type
116:54 - document dot
116:56 - get
116:57 - element by id the id was my label
117:02 - change the inner
117:03 - html equal to text
117:08 - and this is what we have currently
117:10 - except i'm going to add some line breaks
117:13 - i'll add that here
117:16 - here and maybe here
117:21 - so there you go
117:22 - hello bro you have three items in your
117:24 - cart your total is 75 dollars by using
117:27 - template literals they allow for
117:29 - embedded variables and expressions it's
117:31 - a more flexible way to write some output
117:34 - i'll be using these a lot more in the
117:35 - future because well i like them so yeah
117:37 - those are template literals everybody if
117:40 - you would like a copy of this code i'll
117:41 - post this in the comment section down
117:42 - below and well yeah those are template
117:45 - literals in javascript
117:48 - hey what's going on everybody so in this
117:50 - video i'm going to explain the two
117:52 - locale string method of numbers what
117:54 - this does is that it returns a string
117:57 - with a language sensitive representation
118:00 - of this number it's fantastic if you
118:02 - need to format a number as some currency
118:04 - we have a number with numbers there's a
118:06 - built-in method named to locale string
118:09 - and a few arguments the first is locale
118:12 - locale specifies the language if you
118:15 - pass in undefined well then you'll use
118:17 - the default set in your browser next is
118:20 - options options is an object with
118:22 - formatting options we can specify if
118:24 - this number is currency a unit of
118:26 - measurement a percent let's begin let's
118:29 - create a number let my num
118:32 - equals make up a number i'll just pick
118:34 - one two three four five six point seven
118:37 - eight nine
118:39 - so i'm going to reassign my num
118:41 - equals my num dot to
118:45 - locale
118:46 - string
118:47 - the first argument is locale this is a
118:50 - string then we'll pass in a language
118:52 - united states english that would be en
118:55 - us
118:56 - then let's display my num
118:58 - console.log
119:01 - num
119:02 - so when i run this this number is
119:04 - formatted with a comma for every
119:06 - thousands place so that is us english
119:10 - okay next let's try hindi
119:13 - so let's copy this paste it hindi is
119:17 - h i dash
119:20 - i n
119:21 - so there's a different number formatting
119:23 - system
119:24 - that is hindi let's try one more what
119:27 - about standard german
119:30 - standard german is d e
119:32 - dash
119:33 - d e
119:35 - there's a different number formatting
119:37 - system
119:38 - standard
119:40 - german
119:42 - whatever language you need you just have
119:43 - to look up the format code then pass
119:45 - that as a string but those are a few
119:48 - this time let's format some currency we
119:50 - would set that within options
119:52 - i'll pick us english
119:55 - to add some options we'll use curly
119:57 - braces
119:59 - set the style
120:01 - to
120:02 - currency
120:05 - then currency
120:07 - colon
120:10 - then a unit
120:11 - usd is us dollars
120:13 - so this number is now in us dollars and
120:16 - you can see too that this number is
120:18 - rounded to dollars and cents
120:20 - originally we had three decimal places
120:22 - okay let's try another
120:24 - what about rupees
120:27 - let's copy this paste it
120:29 - h i
120:30 - i n
120:32 - currency
120:33 - rupees have a currency code of i n r
120:37 - there then let's try
120:38 - euros let's set the language to german d
120:42 - e dash d e the currency code is e u r
120:46 - for euros
120:47 - now there's other styles besides
120:49 - currency this time let's try a percent
120:52 - mynum
120:53 - equals
120:54 - mynum
120:56 - to
120:57 - locale
120:58 - string
121:01 - this time i will set the first argument
121:03 - in place of a language to be undefined
121:08 - but i will set the style
121:10 - to be
121:12 - percent
121:13 - this number as a percent is
121:16 - 12 million percent so let's change that
121:19 - 100 would be ten thousand percent point
121:23 - five is fifty percent
121:24 - point zero one is one percent that's how
121:27 - to format your number as a percent
121:30 - then let's go to units
121:32 - my num equals my mynum.2 locale string
121:38 - we can set the first argument to be
121:40 - undefined
121:43 - then under options set the style to be
121:47 - unit a unit of measurement what kind of
121:49 - unit would we like i will separate that
121:51 - with a comma
121:53 - unit colon space what about celsius
121:57 - celsius
122:00 - so currently my number is
122:02 - 100 make sure it's lower case
122:05 - there 100 degrees celsius
122:08 - you have a couple different units to
122:09 - choose from celsius kilometers miles
122:13 - kilograms whatever you need
122:15 - well okay then everybody that is an
122:16 - introduction to the two locale string
122:19 - method it returns a string with a
122:22 - language sensitive representation of a
122:24 - number you can set the locale which
122:26 - specifies the language by passing in
122:29 - undefined as an argument that will use
122:31 - the default set in the browser then you
122:33 - can pass in formatting options would you
122:35 - like to set the style to currency
122:37 - percent a unit of measurement etc so
122:40 - yeah everybody that is the two locale
122:43 - string method in javascript
122:48 - hey guys in this video we're going to
122:50 - create a very basic number guessing game
122:52 - in javascript so heading to our html
122:54 - file let's create some html elements
122:56 - i'll need a title for this game i'll use
122:58 - an h1 take we'll add some text number
123:02 - guessing
123:03 - game let's save that i'll add a
123:05 - paragraph right underneath pick a number
123:08 - between
123:10 - 1
123:11 - through 10
123:13 - and i'll add a label
123:16 - label close it
123:20 - enter a guess
123:23 - we'll need some input
123:25 - this will be a text box input id equals
123:31 - guess
123:32 - field
123:34 - and a submit button
123:36 - input
123:37 - type
123:38 - equals
123:40 - submit the id will be submit
123:45 - button
123:47 - and those are the html elements that
123:49 - we'll need now heading back to our
123:50 - javascript file we'll need a random
123:53 - number
123:54 - i'll make this a constant
123:56 - and it will be answer
123:58 - answer will be a random number between 1
124:00 - and 10.
124:02 - so we will use math.random
124:07 - times 10.
124:08 - this will give us a random number
124:10 - between zero and nine so let's add one
124:13 - for numbers one through ten
124:15 - then we will surround this with
124:17 - math.floor to round it
124:20 - math.floor and i will surround this code
124:22 - with math.floor
124:26 - math.floor we'll keep track of our
124:29 - guesses
124:31 - let
124:32 - guesses equal zero
124:36 - so when we click on this button we would
124:38 - like to do something but we need to
124:39 - select this button
124:41 - and the id was submit button
124:44 - document dot get
124:47 - element by id
124:51 - the id is submit button
124:53 - and set the on click event attribute
124:56 - equal to a function
124:59 - what would we like to do well there's a
125:01 - lot of stuff we have to do we'll need to
125:03 - get the value from this text box
125:05 - so document.getelementbyid
125:09 - the id is
125:12 - guest field
125:17 - dot value and we will assign this to
125:19 - guess so let's declare that and assign
125:22 - it whenever we make a guess we should
125:24 - increment guesses by 1 to keep track of
125:26 - it guesses plus equals 1.
125:28 - we'll first check to see if our guess is
125:31 - equal to our answer
125:33 - if guess is equal to our answer
125:36 - let's create an alert message
125:39 - alert
125:42 - i'll use a template literal
125:46 - answer
125:48 - is the number
125:53 - it
125:53 - took you
125:58 - guesses
126:00 - guesses
126:02 - else if
126:06 - our guess is less than answer
126:10 - we will alert the user
126:15 - too small
126:18 - else
126:19 - alert
126:22 - too large
126:25 - okay make sure you save everything and
126:28 - let's run it enter a number i'll pick
126:30 - something right in the middle five
126:32 - too small
126:34 - what about seven
126:36 - two small
126:37 - nine
126:39 - nine is the number it took you three
126:41 - guesses
126:42 - so yeah that is a very basic number
126:45 - guessing game everybody
126:47 - if you would like a copy of this code
126:48 - i'll post this in the comment section
126:50 - down below and well yeah that's a very
126:53 - basic number guessing game in javascript
126:55 - hey everybody in this video we're going
126:57 - to create a practice program in
126:59 - javascript to convert some temperatures
127:01 - using some html elements so sit back
127:04 - relax and enjoy the show
127:08 - okay let's begin everybody before we add
127:10 - html elements to our dom let's work on
127:13 - the logic behind the functions let's
127:15 - declare and assign variable temperature
127:18 - and set the sequel to some temperature
127:20 - doesn't matter if it's fahrenheit or
127:21 - celsius yet and at the end of our
127:23 - program let's declare two functions
127:26 - function
127:27 - to
127:29 - celsius
127:31 - and there will be one parameter
127:33 - temperature and function two
127:37 - fahrenheit the formula to convert a
127:40 - temperature in fahrenheit to celsius is
127:43 - our temperature
127:45 - minus 32
127:47 - times
127:48 - five divided by nine
127:50 - the formula to convert celsius to
127:52 - fahrenheit is return
127:55 - temp
127:57 - times 9 divided by 5
127:59 - plus 32
128:01 - let's say that our temperature is
128:03 - currently in fahrenheit and i need to
128:05 - convert this to celsius i will reassign
128:08 - temp
128:08 - equal to and i will invoke the 2 celsius
128:12 - function
128:13 - and pass in my temperature then at the
128:15 - end we will display whatever our
128:17 - temperature is console.log
128:19 - temp so the temperature should be zero
128:22 - zero degrees celsius if we're converting
128:24 - this to fahrenheit then 32 degrees
128:27 - celsius converted to fahrenheit
128:29 - is 89.6 degrees now that we have the
128:32 - logic behind these functions completed
128:34 - let's add some html elements heading to
128:37 - our html file within the body tags we
128:40 - will create a label
128:44 - then close it and i'll add a line break
128:47 - for some text let's add
128:49 - enter
128:50 - a
128:51 - temperature
128:54 - then we'll create a text box
128:57 - so use a self-closing input tag i'll
128:59 - create a line break
129:03 - the type
129:05 - is text
129:07 - the id
129:09 - let's say is text box
129:12 - let's create a second label
129:14 - label
129:17 - close it
129:18 - add a line break we will add the text
129:21 - convert to colon we'll create two radio
129:25 - buttons
129:26 - input
129:27 - type
129:29 - equals radio so with a radio button if
129:32 - they're in the same group you can only
129:33 - select one
129:36 - this first radio button will be for
129:38 - celsius
129:39 - we'll give this a unique id of c button
129:42 - for celsius
129:45 - name
129:46 - unit
129:47 - let's save there's one radio button and
129:50 - we'll add a label next to this radio
129:51 - button
129:53 - label
129:54 - close it
129:56 - add a line break
129:58 - and the label will be
130:00 - celsius
130:03 - okay let's copy these two lines
130:06 - and paste them and make a few changes
130:10 - this will be the fahrenheit radio button
130:13 - we'll give this an id of f button the
130:15 - name will be unit
130:17 - and change the label
130:20 - fair and height
130:23 - since these radio buttons are within the
130:24 - same group they have the same name
130:27 - we can only select one of them
130:29 - if they had a different name
130:32 - like c or f
130:34 - well then you can select both of them
130:35 - because they're in different groups
130:37 - so these will have the same name unit
130:40 - let's create a submit button right at
130:41 - the end
130:42 - so button
130:44 - let's close it
130:45 - add a line break
130:49 - the type will be button
130:53 - and the id is maybe submit
130:57 - button
130:58 - let's add some text to this button
131:00 - submit
131:03 - i'm going to close that at the very
131:05 - bottom of our dom let's add a label that
131:07 - will display the temperature
131:10 - use a pair of label tags i'll give this
131:13 - an id of
131:15 - temp
131:16 - label and those are all the html
131:18 - elements that we'll need
131:20 - let's save head back to our javascript
131:22 - file when we click on the submit button
131:24 - there's a lot of things that we need to
131:26 - do at the very top of my program i'm
131:28 - going to type
131:29 - document dot get element by id
131:34 - the id of this button is submit button
131:39 - dot on click
131:41 - and i will set the sequel to a function
131:43 - parentheses curly braces
131:46 - there's a lot of lines of code that
131:47 - we're going to add between these curly
131:49 - braces so let's get rid of these three
131:51 - lines of code we don't need them any
131:52 - longer i'm going to declare a local
131:54 - variable within this function let
131:57 - temp
131:58 - so when we click on our button let's
132:00 - check to see if one of these radio
132:02 - buttons is selected
132:04 - let's begin with the celsius button
132:06 - if
132:08 - document dot get
132:10 - element by id
132:13 - and the id of the celsius button is c
132:16 - button
132:19 - we need to check to see if this radio
132:21 - button is checked or not
132:23 - so add dot
132:24 - checked
132:26 - if this
132:27 - equals true
132:28 - but since this is a boolean value you
132:31 - don't need to necessarily add equals
132:33 - true
132:35 - document.getelementbyid c button dot
132:37 - checked
132:38 - that's fine as a condition
132:40 - if our celsius button is selected do
132:42 - something
132:44 - else if
132:47 - our fahrenheit button is selected do
132:49 - something else
132:50 - let's copy our condition paste it
132:54 - this time we are checking the fahrenheit
132:56 - button that is f button
132:59 - and lastly else else means we didn't
133:02 - select anything let's work on the else
133:04 - statement first that's fairly easy so i
133:06 - would like to change our label that's
133:08 - down here at the bottom temp label
133:12 - so type document dot get element by id
133:17 - temp label and i will change the inner
133:20 - html i'll set the sequel to
133:24 - select a unit
133:26 - if i were to click on the submit button
133:28 - it should change the text of my label to
133:30 - select unit we know that it's working if
133:33 - we enter in a temperature press the
133:35 - celsius radio button
133:37 - then click submit
133:38 - what would we like to do
133:40 - let's extract the temperature from this
133:42 - text box
133:43 - so we will take our temperature variable
133:46 - set the sequel to
133:48 - document dot get element by id
133:52 - and the id of this text box is text box
133:58 - dot value
133:59 - when we accept user input from a text
134:01 - box it's of a string data type we'll
134:04 - need to convert that to a number so
134:06 - let's reassign temp equal to
134:09 - use the number constructor and pass in
134:11 - our temperature
134:13 - it's assumed to be in fahrenheit if we
134:14 - would like to convert to celsius let's
134:17 - invoke the 2 celsius function
134:19 - i'll reassign temp equal to
134:23 - the 2 celsius function invoke it and
134:26 - then we need to pass in our temperature
134:28 - after the temperature is converted we
134:30 - need to change our label
134:32 - so copy this line of code paste it
134:35 - and i will set the sql to
134:39 - temp plus
134:41 - if you're writing this code on a pc if
134:43 - you need the degree symbol one shortcut
134:45 - is to hold alt
134:47 - and on the numpad press
134:49 - zero one seven six
134:51 - if you're on a mac then do this
134:53 - i'll post it on the screen right now so
134:55 - this temperature is in celsius
134:58 - okay let's test this
134:59 - 32 degrees
135:01 - converted to celsius
135:03 - is 0 degrees celsius
135:05 - if this was 50 degrees fahrenheit
135:08 - converted to celsius
135:09 - that would be at 10 degrees celsius
135:12 - now with the fahrenheit radio button
135:14 - let's copy everything we have within
135:16 - this if statement
135:18 - paste it
135:19 - and we will invoke the 2 fahrenheit
135:21 - function instead of the two celsius
135:23 - function
135:25 - and change the temperature from c to f
135:30 - okay let's try this
135:31 - zero degrees
135:33 - in celsius converted to fahrenheit is 32
135:36 - degrees fahrenheit so yeah that was a
135:39 - practice project to convert temperatures
135:41 - using javascript hey if you found this
135:43 - video helpful please be sure to smash
135:45 - that like button leave a random comment
135:46 - down below and subscribe if you'd like
135:48 - to become a fellow bro
135:50 - well well well we've finally made it to
135:53 - a raise think of an array as a variable
135:56 - that can store multiple values it's a
135:59 - little more complex than that but that's
136:01 - an easy way of thinking about them in
136:02 - this example i have a variable fruit
136:05 - fruit contains some string
136:07 - representation of a fruit like an apple
136:09 - i can store multiple names of fruits
136:12 - within this variable if i convert it to
136:14 - an array so to change this variable into
136:16 - an array surround all of your values
136:19 - with a set of square brackets and
136:21 - separate each value with a comma maybe i
136:24 - don't want just an apple maybe i would
136:26 - also like
136:27 - an orange
136:28 - and a banana just so it's more obvious
136:31 - that this contains multiple values i'm
136:33 - going to change this variable name from
136:35 - fruit to fruits well i guess in the
136:37 - english language fruit would also be
136:39 - plural but it's just not obvious so we
136:41 - have an array fruits now look what
136:43 - happens when i display this array using
136:45 - console.log
136:47 - if i display my array fruits it will
136:50 - display all of this junk you can see the
136:52 - different values within this array apple
136:54 - orange banana each value within an array
136:57 - is also known as an element if i would
137:00 - like to access a particular element
137:02 - within this array when i use the array
137:04 - name i will add a set of square brackets
137:07 - then i need to list an index number of
137:09 - the element i would like to access
137:11 - computers they always start with zero so
137:13 - the first element in my array has an
137:15 - index of zero if i was to display fruits
137:19 - at index of zero then we have access to
137:21 - the first element which contains an
137:23 - apple
137:24 - the next element which has an index of
137:26 - one is my orange at index 2 there's the
137:30 - banana if i attempt to access an element
137:32 - that doesn't exist such as index 3 well
137:35 - then it's undefined
137:36 - you can also update and change the
137:38 - elements of an array
137:40 - so to do that type the name of the array
137:42 - followed by an index number
137:44 - maybe fruits at index of zero is now a
137:48 - coconut
137:50 - and then let's display fruits
137:52 - so we have a coconut orange and banana
137:54 - if i change this to one we have an apple
137:57 - coconut banana
137:59 - two
138:00 - apple orange coconut so to access an
138:02 - element from an array you type the array
138:04 - name followed by a set of square
138:06 - brackets and then an index number you
138:09 - can later on add an element
138:11 - to do that use the push method
138:13 - type the array name
138:15 - dot push parenthesis
138:17 - then add a value
138:19 - like a lemon
138:20 - we have an apple an orange a banana and
138:23 - a lemon this will add an element
138:26 - we can remove the last element
138:28 - fruits dot pop
138:31 - okay that lemon is no longer there apple
138:33 - orange banana
138:35 - removes last
138:37 - element
138:39 - we have the capability to add an element
138:41 - to the beginning of an array type the
138:43 - array name dot on
138:46 - shift
138:47 - method
138:49 - and add a value
138:50 - maybe a mango
138:53 - mango apple orange banana
138:56 - this method will add
138:58 - element to the beginning
139:00 - and the shift method will remove the
139:02 - beginning element
139:04 - fruits
139:05 - dot shift
139:07 - apple orange banana that mango is gone
139:10 - because i ate it so the shift method
139:13 - removes element from
139:16 - beginning
139:17 - you can access the length property of an
139:19 - array i'll store this within a variable
139:21 - let
139:22 - length
139:23 - equal fruits
139:25 - dot
139:26 - length
139:28 - and the length of my array
139:30 - is three we have three elements an apple
139:32 - an orange and a banana you can find the
139:34 - index of an element
139:36 - let
139:37 - index equal the array name
139:40 - dot
139:41 - index of method i would like to find the
139:44 - index of our apple value
139:47 - and i will display this
139:49 - so again computers always start with
139:50 - zero
139:51 - the index of my apple value was found at
139:54 - index zero the beginning
139:57 - orange would be at one
139:59 - banana is at two if you search for an
140:02 - index of an element that doesn't exist
140:04 - such as
140:06 - how about a kiwi well then this will
140:08 - return an index of negative one that
140:11 - means it was not found
140:12 - so yeah everybody that's an array think
140:14 - of it as a variable that can store
140:17 - multiple values it's a little more
140:19 - complex than that but that's an easy way
140:21 - to think about it so yeah this is the
140:23 - beginning on a small series on arrays
140:26 - hey if this video helped you out you can
140:28 - help me out by smashing that like button
140:30 - leave a random comment down below and
140:31 - subscribe if you'd like to become a
140:32 - fellow bro
140:35 - hey guys in this video i'm going to show
140:36 - you how we can loop through the elements
140:38 - of an array maybe we have an array of
140:40 - prices and i will set this equal to and
140:43 - just make up some prices it doesn't
140:45 - really matter five dollars ten dollars
140:47 - fifteen dollars twenty dollars good
140:49 - enough two popular ways to iterate over
140:52 - an array is one to use a standard for
140:54 - loop and the other is a for of statement
140:57 - let's begin with a standard for loop so
140:59 - type four parentheses curly braces we'll
141:02 - need to create a counter let i set this
141:05 - equal to zero i would like to continue
141:07 - this while i is less than the length
141:10 - property of our array prices prices dot
141:14 - length then i will increment i by one i
141:17 - plus equals one during each iteration i
141:20 - will display my array prices but we
141:23 - gotta list an index so that index is i
141:27 - prices at index of i during the first
141:30 - iteration i will be zero during the next
141:32 - iteration it would be one then two then
141:35 - three so on and so forth so after
141:37 - running this program this will iterate
141:40 - and display the elements of my array 5
141:42 - 10 15 20 and it will adjust according to
141:45 - the size of the array and my for loop
141:47 - will iterate over that price as well now
141:49 - if you would like to iterate backwards
141:51 - over this for loop here's how to do that
141:53 - so i'm going to set my counter equal to
141:57 - prices dot length minus 1. i would like
142:00 - to continue this as long as i is greater
142:03 - than or equal to 0 and then lastly we
142:06 - will decrement i by 1. this allows me to
142:10 - iterate over my array backwards we're
142:12 - beginning at the end 25 20 15 10 5. so
142:16 - that's how to use a standard for loop to
142:18 - iterate over the elements of an array an
142:20 - additional option is a for up statement
142:23 - we'll type four parentheses curly braces
142:26 - we'll declare a counter
142:28 - let
142:29 - i
142:30 - of
142:31 - our array prices
142:34 - console.log
142:37 - just i and this will also iterate over
142:39 - our array but a better way of writing
142:41 - this in place of our counter i let's use
142:44 - a word that's more descriptive of what's
142:46 - within our array our array is named
142:49 - prices
142:50 - an element of this array prices would be
142:53 - price so let's change this to price
142:55 - because it's more descriptive
142:57 - console.log price and i think people
143:00 - would understand that more there 5 10 15
143:03 - 20 25. so yeah everybody those are a
143:05 - couple different ways to iterate over
143:07 - the elements of an array hey if this
143:09 - video helped you out you can help me out
143:11 - by smashing that like button leave a
143:12 - random comment down below and subscribe
143:14 - if you'd like to become a fellow bro
143:18 - hey everybody in this video i'm going to
143:20 - show you how we can sort an array of
143:22 - strings in javascript let's create an
143:24 - array of fruits because i'm hungry and
143:27 - add some various names of fruits make
143:29 - sure that they're not in order
143:30 - banana
143:32 - apple
143:35 - orange
143:38 - and a mango to display my array of
143:40 - strings i can use a for of statement
143:44 - we'll create a for loop and the
143:45 - statement within the for loop is let
143:48 - fruit of fruits
143:52 - console.log
143:55 - fruit
143:56 - singular
143:58 - and here is my array of fruits
144:01 - to sort this array there is a built-in
144:03 - method of arrays called sort but i'm
144:05 - going to reassign this to the same array
144:08 - fruits equals fruits and use the sort
144:12 - method
144:13 - and my fruits are now sorted in
144:15 - alphabetical order if you need this in
144:17 - reverse alphabetical order this is what
144:19 - you can do
144:20 - i'm going to turn that line into a
144:22 - comment copy it paste it we're going to
144:24 - do some method chaining add dot reverse
144:29 - parentheses
144:31 - and my array of strings is now sorted in
144:33 - reverse alphabetical order so yeah
144:35 - that's a super quick video on how to
144:37 - sort an array of strings in alphabetical
144:40 - order and reverse alphabetical order if
144:42 - you would like a copy of this code i'll
144:43 - post this in the comment section down
144:45 - below and well yeah that's how to sort
144:47 - an array of strings in javascript
144:51 - hey guys in this video i'm going to
144:53 - discuss 2d arrays also known as
144:55 - multi-dimensional arrays it's an array
144:58 - made up of arrays so in this example
145:00 - we'll create a grocery shopping list and
145:03 - that grocery shopping list will be made
145:05 - up of separate individual lists a list
145:08 - for fruit vegetables and meat let's
145:10 - begin by creating three individual
145:12 - arrays and then add them all to one
145:14 - array to contain them let's begin with
145:16 - an array named fruit or fruits
145:20 - let fruits equal and think of some fruit
145:23 - i'm thinking apples
145:26 - oranges
145:27 - bananas this is our first array let's
145:30 - create another i'll name this vegetables
145:35 - what about carrots
145:38 - onions
145:41 - and potatoes and lastly meat
145:44 - or meats
145:47 - eggs
145:49 - chicken
145:52 - fish we have three individual arrays if
145:55 - we wanted to we could add these
145:57 - individual arrays into another array i'm
146:00 - going to create another array this will
146:01 - be our two-dimensional array named
146:04 - grocery list
146:07 - equals and add the names of the arrays
146:10 - that you would like to add
146:11 - fruits
146:13 - vegetables
146:15 - and meats
146:16 - so grocery list is our two dimensional
146:18 - array how can we iterate over the
146:20 - elements of this two-dimensional array
146:22 - we can use nested loops i'll use nested
146:25 - four of loops
146:27 - the outer loop will be in charge of
146:29 - managing each list
146:31 - let
146:32 - let's name each item maybe list
146:35 - let list
146:36 - of
146:38 - grocery list
146:40 - so right now if i display list it's
146:42 - going to display all of the individual
146:43 - arrays i'm just going to test that
146:46 - console.log
146:48 - list this for loop will iterate three
146:50 - times one for each array within our
146:53 - grocery list and it displays details of
146:55 - each list to access the individual
146:57 - elements within each list each array i'm
147:00 - going to create a nested loop we'll use
147:02 - a for of loop again
147:04 - let
147:05 - how about food
147:07 - like each food item
147:09 - of
147:10 - list
147:12 - and i will display console.log
147:15 - each food item each element food so this
147:18 - will display all the elements of my
147:20 - two-dimensional array apples oranges
147:23 - bananas carrots onions potatoes eggs
147:24 - chicken fish what if you need to change
147:26 - one of these elements within your
147:27 - two-dimensional array with a
147:29 - two-dimensional array there are two
147:31 - indices to access one of these elements
147:33 - within a two-dimensional array
147:35 - type the name of the two-dimensional
147:37 - array and there's two indices so if we
147:40 - take a look at the way that all of these
147:41 - elements are set up
147:43 - it kind of resembles a grid there's rows
147:46 - and columns picturing a grid the first
147:49 - index would be the row the second index
147:52 - is the column i would like to replace
147:54 - apples with mangoes i need to find the
147:56 - row number and the column number so
147:58 - computers they always start with zero
148:00 - the first row would be row zero
148:04 - and the first column would be column
148:06 - zero
148:07 - so the indices are zero zero and i will
148:10 - set the sql to
148:11 - mangoes i think that's how you spell
148:13 - mangoes
148:15 - yeah after refreshing we have mangoes
148:17 - oranges bananas
148:19 - let's replace bananas
148:21 - that is row zero column two
148:24 - zero one two so change the second index
148:28 - to two
148:29 - apples orange's main goes let's replace
148:32 - eggs with steak
148:34 - that would be row zero one two
148:38 - column zero
148:42 - steak chicken fish for my last example
148:44 - let's replace fish with steak that is
148:47 - row zero one two column zero one two
148:52 - two two eggs chicken steak yeah
148:55 - everybody that's basically a 2d array
148:57 - it's an array of arrays it's useful if
149:00 - you ever need some sort of grid of
149:02 - information we probably won't be using
149:04 - 2d arrays too much in the future so yeah
149:06 - those are 2d arrays hey if you found
149:08 - this video helpful please be sure to
149:10 - smash that like button leave random
149:11 - comments down below and subscribe if
149:13 - you'd like to become a fellow bro
149:16 - hey y'all everybody in this video i'm
149:18 - going to explain the spread operator it
149:20 - allows an iterable such as an array or
149:23 - string to be expanded in place where
149:25 - zero or more arguments are expected
149:28 - basically speaking when used with an
149:30 - array it unpacks the elements in too
149:32 - many individual pieces let me give you a
149:35 - demonstration we have an array of
149:36 - numbers let numbers equals
149:39 - make up some numbers put them within
149:41 - this array one two three four five six
149:44 - seven eight
149:45 - nine
149:46 - using console.log if i was to display
149:49 - this array directly
149:51 - console.log numbers
149:53 - this will display the details of this
149:55 - array this array object
149:57 - now if i was to precede my array with
150:00 - the spread operator
150:02 - which is three dots it would expand the
150:05 - elements of this array we have the
150:07 - elements one through nine actually you
150:09 - can do this with a string too i'll give
150:10 - you a demonstration
150:12 - let
150:13 - user name equal your first and last name
150:19 - so i will use the spread operator
150:22 - a string
150:25 - and this will spread the string into
150:26 - individual characters how could this be
150:28 - useful let's say we need to find the
150:30 - maximum value within this array well we
150:33 - could use the
150:34 - math.max method but with the max method
150:37 - it accepts a varying number of arguments
150:40 - we could pass in a value a variable like
150:44 - x y z whatever the maximum is we would
150:47 - return it and we can store that within a
150:49 - variable let
150:50 - maximum
150:52 - equal math.max so what if we stick an
150:55 - array in here
150:56 - math.max numbers and then display it
150:59 - console.log
151:01 - maximum what happens exactly
151:04 - uh so this returns not a number in place
151:07 - of passing this array directly to a
151:09 - method we could expand it by using the
151:12 - spread operator so this will unpack
151:14 - these elements into individual arguments
151:17 - now when i run this we have our maximum
151:19 - value of 9. if i added another like 10
151:23 - well then it returns 10. so it's
151:25 - fantastic if you need to pass in a
151:28 - varying amount of arguments to a
151:30 - function or method here's another
151:32 - example we're a teacher and we have two
151:33 - classes each represented by an array of
151:36 - student names i need to merge these two
151:38 - classes into one we'll create class 1
151:41 - let class 1 equal some student names we
151:45 - have spongebob
151:48 - patrick
151:50 - and sandy class 2 has these students
151:53 - class 2 equals
151:57 - squidward
151:59 - mr krabs
152:02 - and plankton
152:03 - to add an element to an array you type
152:06 - the array name
152:08 - followed by the push method
152:11 - and pass in an element if i would like
152:13 - to add all of these students you would
152:15 - think that i passed the array name as an
152:17 - argument
152:18 - class1.push class2
152:21 - so let me show you what happens
152:23 - console.log
152:25 - class 1
152:27 - so we have three students and an array
152:30 - so we have an entire array as an element
152:33 - which i didn't want to do so in place of
152:35 - adding this class directly as an element
152:38 - let's spread it into individual
152:39 - arguments by using the spread operator
152:42 - now when i display this array we have
152:44 - six students spongebob patrick sandy
152:47 - squidward mr krabs and plankton another
152:49 - way to display this is to use the spread
152:51 - operator
152:53 - i will precede class 1 with the spread
152:55 - operator
152:56 - class 1 is divided into individual
152:58 - elements spongebob patrick sandy
153:00 - squidward mr krabs plankton
153:03 - so the spread operator allows an
153:05 - iterable such as an array or string to
153:08 - be expanded in place where zero or more
153:11 - arguments are expected by preceding an
153:13 - array with the spread operator you
153:16 - unpack the elements it's kind of like
153:18 - you're opening a box and taking out
153:19 - whatever's inside so that's the spread
153:22 - operator if you would like a copy of
153:23 - this code i'll post this in the comments
153:25 - section down below don't be afraid to
153:27 - smash that like button leave random
153:29 - comments down below and subscribe if
153:30 - you'd like to become a fellow bro
153:34 - everybody in this video i'm going to
153:35 - explain rest parameters rest parameters
153:38 - represents an indefinite number of
153:41 - parameters it packs arguments into an
153:43 - array when you pass arguments to a
153:45 - function here's how using rest
153:47 - parameters would be useful i have five
153:49 - different variables
153:55 - i would like to sum a varying amount of
153:57 - these variables
153:59 - using console.log
154:01 - i will invoke a sum function which we
154:04 - will need to declare let's pass in
154:06 - variables a and b to begin with i need a
154:08 - matching function that is named sum that
154:10 - accepts two arguments
154:13 - function sum
154:15 - arguments a and b we will simply return
154:18 - a plus b so this returns three variables
154:22 - a and b are arguments what if i would
154:23 - like to add another argument
154:25 - like c this specific sum function isn't
154:28 - suitable for three arguments i would
154:30 - need a sum function that accepts three
154:33 - arguments this time
154:34 - a b c
154:37 - return a plus b plus c
154:39 - then i could accept three arguments but
154:41 - wait what if i have to pass in another
154:43 - argument like d
154:46 - well this function no longer is suitable
154:48 - i would need to create another function
154:50 - that accepts four arguments
154:52 - a b c
154:54 - d return a plus b plus c plus d you can
154:57 - kind of see where i'm going with this we
155:00 - have three different sum functions if
155:02 - this time we need to pass in two again
155:04 - two arguments
155:06 - we receive not a number we would need to
155:08 - give each of these functions a unique
155:10 - name like sum2
155:12 - sum3 sum4
155:14 - but this isn't practical
155:16 - wouldn't it be better if we had a
155:18 - function that could accept an indefinite
155:20 - number of parameters while we can with
155:22 - the rest parameters
155:24 - so let's get rid of all this code we
155:26 - will declare a function that will accept
155:27 - any number of arguments
155:30 - function
155:32 - sum
155:34 - the rest parameters will pack these
155:36 - arguments into an array
155:38 - so we will use the three dots for the
155:40 - rest parameters then we need a name for
155:42 - this array like numbers
155:45 - if our elements are within an array we
155:47 - would just need some way to access those
155:49 - elements there's a couple different ways
155:50 - you could do this i'm going to create a
155:52 - total let total equal zero and we will
155:55 - iterate over our array
155:57 - for
155:58 - let
155:59 - number
156:00 - of our array numbers
156:02 - we will take our total incremented by
156:06 - our number and then at the end return
156:10 - total
156:11 - this time we can pass two arguments to
156:13 - this function
156:15 - or three
156:17 - or four
156:19 - five
156:21 - doesn't matter so that's the benefit of
156:23 - using rest parameters they represent an
156:25 - indefinite number of parameters when you
156:28 - call a function that has rest parameters
156:30 - it will pack the individual arguments
156:32 - into an array then you would just need
156:34 - some way to access the elements of that
156:36 - array you can mix and match the
156:37 - parameters for example you could say x
156:40 - and y
156:41 - if i was to write it this way these
156:43 - first two arguments will be x and y
156:45 - respectively and any arguments
156:47 - afterwards would be packed into this
156:49 - array if you're mixing and matching rest
156:51 - parameters along with some named
156:53 - parameters make sure that the rest
156:54 - parameters take up the last parameter
156:56 - within this function so yeah that's rest
156:59 - parameters if you would like a copy of
157:00 - this code i'll post this to the comment
157:02 - section down below if you haven't
157:03 - already smash that like button leave
157:05 - random comments down below and subscribe
157:07 - if you'd like to become a fellow bro
157:10 - hey guys in this video i'm going to
157:12 - discuss callbacks a callback is a
157:14 - function passed as an argument to
157:17 - another function
157:18 - using callbacks is a popular programming
157:20 - technique because it ensures that a
157:22 - function is not going to run before a
157:24 - task is completed here's an example of
157:26 - where a callback would be useful let's
157:28 - say we need to add two numbers together
157:30 - let
157:31 - total equal sum
157:33 - pass two numbers as arguments
157:36 - maybe two and three i'll create a
157:37 - function to add these numbers together
157:39 - and return something we will declare a
157:42 - function sum to add these two numbers
157:44 - together
157:45 - and set up some matching parameters to
157:46 - these arguments let's name these x and y
157:50 - let result equal x plus y
157:54 - return result
157:56 - then afterwards i would like to display
157:58 - my result one function to display the
158:00 - results to the console and the other to
158:02 - the dom function
158:05 - display
158:06 - console
158:08 - i'll name this argument
158:10 - output
158:13 - console.log
158:17 - output
158:18 - after finding a total we will invoke the
158:20 - display console function and we will
158:22 - pass our total as an argument this
158:24 - displays the number 5 to the console now
158:27 - let's create a function to display some
158:28 - output to the dom
158:30 - function
158:31 - display
158:32 - dom
158:33 - we'll keep output as the argument
158:35 - however we will change the inner html of
158:37 - an element
158:38 - so heading to our html file let's create
158:41 - a label
158:44 - close it
158:45 - i'll give this an id of
158:48 - my
158:49 - label
158:50 - save head back to your javascript file
158:53 - and i would like to select my label
158:56 - document.getelementbyid
159:00 - the id of that label was my label
159:03 - and i will set the
159:05 - inner
159:05 - html equal to the output that i receive
159:09 - i will instead invoke the display dom
159:12 - function display dom pass in total as an
159:14 - argument and we have the number five
159:17 - another way of writing this is that we
159:18 - could use a callback we can pass a
159:21 - function as an argument to another
159:23 - function let's get rid of these lines we
159:25 - won't need them anymore but we will keep
159:27 - these two functions this time i'm going
159:29 - to invoke a sum function
159:32 - pass in my arguments
159:33 - 2 and 3
159:35 - and also the name of a function i would
159:37 - like to execute once we finish this
159:39 - function
159:40 - let's invoke the display console
159:41 - function once we finish the sum function
159:44 - so we will pass the name of this
159:46 - function as an argument just be sure not
159:48 - to add that set of parentheses after
159:50 - because then you would be invoking that
159:52 - function just the name of the function
159:54 - next i need to set up this sum function
159:57 - this specific function will have three
159:59 - parameters the first two are the numbers
160:01 - we would like to add together and the
160:03 - third is a callback so let's define a
160:06 - sum function function sum and there's
160:09 - three parameters we'll name these x
160:12 - y
160:13 - and for the callback you can really name
160:14 - it anything
160:15 - i'll just name it callback and again
160:17 - make sure not to add that extra set of
160:19 - parentheses afterwards
160:21 - so call back we'll add these two numbers
160:23 - together let result
160:26 - equal x plus y and then we will invoke
160:29 - our callback so at the end of the
160:31 - function type
160:32 - callback remember that it stores a
160:34 - function kind of like a variable then
160:36 - add a set of parentheses then we'll be
160:38 - invoking this function and if there's
160:40 - any arguments
160:42 - we have one parameter output make sure
160:44 - to pass that in
160:45 - so pass in result execute my callback
160:48 - pass result as an argument
160:50 - and this display is my output if i would
160:52 - like to pivot and instead display my
160:54 - output to the dom
160:56 - i'll just pass in a different callback
160:58 - display dom so we'll pivot and execute a
161:00 - different function and our output is
161:02 - displayed to the dom so you don't
161:04 - necessarily need to name this parameter
161:06 - callback
161:07 - we could name this maybe
161:09 - do something
161:11 - at the end of the function do something
161:13 - do some other function
161:14 - or maybe my funk this would be valid too
161:18 - so remember you can rename parameters so
161:21 - using callbacks is an additional way in
161:23 - which we can write code it ensures that
161:25 - a function is not going to run before a
161:27 - task is completed it helps us develop
161:29 - asynchronous code when one function has
161:31 - to wait for another function it helps us
161:34 - avoid errors and potential problems for
161:36 - example we could wait for a file to load
161:38 - once the file loads then we do something
161:41 - we'll have more practice with callbacks
161:42 - in future videos so yeah that's a
161:44 - callback everybody you can pass a
161:46 - function as an argument to another
161:48 - function and then execute it later hey
161:51 - if this video helped you out you can
161:52 - help me out by smashing that like button
161:54 - leave a random comment down below and
161:55 - subscribe if you'd like to become a
161:57 - fellow bro
161:59 - hey guys in this video i'm going to
162:00 - discuss the for each method of arrays
162:03 - the for each method executes a provided
162:06 - callback function once for each array
162:08 - element we have an array of students let
162:12 - students
162:13 - equals and make up some student names in
162:15 - this example let's make all of the
162:16 - letters lowercase we'll create a
162:18 - function that will capitalize the first
162:20 - letter of each student name so i'm going
162:22 - to write spongebob all lowercase
162:25 - patrick
162:26 - and squidward
162:28 - let's define a function that will
162:30 - capitalize the first letter of each
162:32 - string function
162:34 - capital lies
162:37 - now with the for each method there's up
162:40 - to three arguments that are provided
162:42 - automatically behind the scenes that we
162:44 - have access to
162:46 - an element
162:47 - an index
162:49 - and the array we don't necessarily need
162:51 - to use any of these but they're provided
162:54 - for us but in this function we will to
162:56 - capitalize the first letter of each
162:58 - string this is what we can write i would
163:01 - like to access my array parameter at
163:04 - index
163:05 - of index
163:07 - equals
163:09 - our element
163:11 - at index of zero
163:13 - this will select the first character of
163:16 - every string dot
163:18 - follow this with the
163:19 - two
163:21 - uppercase method
163:24 - plus
163:25 - element
163:26 - dot
163:27 - sub string method
163:29 - pass in
163:30 - one this line right here will capitalize
163:34 - the first letter of each string then i
163:36 - will print one of these elements
163:38 - console.log students at index of zero
163:42 - now to use the for each method we will
163:44 - type the name of the array
163:46 - students dot for
163:49 - each
163:50 - then pass in a callback as an argument
163:53 - we will apply this callback to every
163:55 - element in an array the callback is the
163:58 - name of the function capitalize make
164:00 - sure to not add an additional set of
164:02 - parentheses that will call the function
164:04 - we're only passing the name of the
164:06 - function as an argument this will
164:07 - display the first student spongebob and
164:10 - the first letter of his name is capital
164:13 - let's do this again but create an
164:15 - additional function to print each
164:17 - student that's within my array
164:19 - function
164:21 - print
164:22 - up to three arguments are provided for
164:24 - us an element an index and an array we
164:27 - don't necessarily need to use all three
164:29 - i would just like to use element
164:31 - and remember you can rename these two
164:33 - such as x y or z but i would do
164:37 - something that's descriptive but this
164:39 - time we only need element
164:40 - using
164:42 - console.log
164:43 - i am going to display each element and
164:46 - again we will use the for each method
164:49 - students dot for
164:51 - each passing our callback of print
164:54 - and here we go
164:56 - yeah spongebob patrick squidward alright
164:59 - everybody that is the for each method of
165:02 - arrays it executes a provided callback
165:05 - function once for each array element so
165:08 - yeah everybody that is the for each
165:10 - method of arrays if you would like a
165:11 - copy of this code i'll post this in the
165:13 - comment section down below and well yeah
165:15 - that's the for each method of arrays in
165:18 - javascript
165:20 - hey everybody in this video we're going
165:23 - to discuss the map method of arrays the
165:25 - map method executes a provided callback
165:28 - function once for each array element and
165:31 - creates a new array here's an example
165:34 - let's create an array of numbers
165:36 - let
165:36 - numbers
165:37 - equal
165:39 - one two three 4 5.
165:43 - we're going to use the map method of
165:45 - this array at numbers and the map method
165:48 - will square each element in this array
165:51 - and create a new array let's define a
165:53 - square function
165:55 - function
165:56 - square
165:58 - we need at least one parameter element
166:00 - we will return
166:02 - math
166:03 - use the power method
166:05 - pass in our element as a base raised to
166:08 - the power of 2.
166:10 - this is our square function
166:12 - we will pass the name of this function
166:13 - square as a callback to the map method
166:16 - and this will create a new array so
166:18 - let's define a new array
166:20 - let
166:21 - squares
166:22 - equal to then i would like to invoke the
166:26 - map method of my numbers array
166:29 - numbers
166:30 - dot map
166:31 - pass in my callback of square and then i
166:34 - would like to display the elements of
166:35 - squares i'll do that with a print
166:37 - function
166:38 - function
166:40 - print
166:42 - element
166:44 - console.log
166:47 - element
166:49 - and i will use the for each method of my
166:51 - squares array squares
166:54 - for each method pass in a callback of
166:57 - print
166:59 - let's take a look at the elements of
167:00 - squares
167:02 - yeah each element from my numbers array
167:04 - was squared and added to a new array
167:07 - squares
167:08 - 1 4 9 16 25. hey for fun let's create a
167:12 - cube function
167:14 - function
167:16 - cube
167:18 - we need at least an element parameter
167:21 - copy this line
167:23 - but change two to three
167:25 - element to the power of three
167:30 - let
167:31 - cubes
167:32 - equals
167:33 - numbers dot map
167:35 - cube
167:36 - cubes
167:38 - for each method pass in print as a
167:40 - callback
167:41 - and all of my original numbers are now
167:43 - cubed and stored in a new array cubes 1
167:46 - 8 27 64 125 so yeah everybody that is
167:50 - the map method of arrays it executes a
167:53 - provided callback function once for each
167:56 - array element and it creates an entirely
167:59 - new array so yeah that's the map method
168:01 - of arrays if you would like a copy of
168:03 - this code i'll post this in the comments
168:04 - section down below and well yeah that's
168:07 - the map method of arrays in javascript
168:11 - all right let's talk about the filter
168:13 - method the filter method creates a new
168:15 - array with all elements that pass a test
168:18 - provided by a function we can filter out
168:21 - elements from an array and create a new
168:22 - one based on certain criteria let's
168:24 - create an array of student ages
168:28 - let
168:29 - ages
168:30 - equals
168:32 - make up some student ages
168:34 - 18
168:35 - 16
168:37 - 21
168:38 - 17
168:40 - 19
168:41 - 90. i'm going to create a new array of
168:43 - anybody that's 18 or older so i will
168:46 - create a function to check age function
168:50 - check
168:51 - age
168:52 - and there is one parameter
168:54 - element this will create a new array we
168:56 - will return and now we need some tests
168:58 - to filter out any elements that don't
169:00 - meet the criteria
169:02 - our test will be
169:04 - element is greater than or equal to 18.
169:08 - so we will use this check age function
169:10 - as a callback within the filter method
169:12 - this will create a new array so let's
169:14 - define that let
169:17 - adults
169:18 - equal
169:20 - ages the original array
169:22 - dot
169:23 - filter
169:24 - pass in the check age function as a
169:27 - callback and then we just need to
169:29 - display all of the elements of this
169:30 - array
169:32 - adults dot for
169:34 - each
169:36 - pass in a callback to
169:38 - a print function which we'll define
169:39 - momentarily
169:41 - function print
169:45 - element
169:46 - console.log
169:49 - element
169:51 - so the elements in our new array are 18
169:54 - 21 1990 so yeah that's basically the
169:57 - filter method it creates an entirely new
170:00 - array with all the elements that pass a
170:03 - test provided by a function and this
170:05 - will leave the original array alone but
170:07 - it creates an entirely new array of
170:09 - elements that pass a test so yeah that's
170:12 - the filter method everybody if you would
170:14 - like a copy of this code i'll post this
170:15 - in the comment section down below and
170:17 - well yeah that's the filter method of
170:19 - arrays in javascript
170:23 - hey guys in this video i'm going to
170:25 - explain the reduced method of arrays the
170:27 - reduce method reduces an array to a
170:29 - single value a very good use of the
170:32 - reduce method would be to sum up all the
170:35 - values of an array imagine we have an
170:37 - online store and somebody has a bunch of
170:39 - items in their cart we could sum up the
170:41 - prices of all the items and create a
170:43 - total let's create an array of prices
170:46 - let prices equals make up some prices
170:50 - five dollars ten dollars fifteen twenty
170:52 - twenty five that's fine and i will
170:54 - create a function that we will use as a
170:56 - callback function
170:58 - checkout
170:59 - we'll call this function when we would
171:00 - like to check out and make a purchase so
171:02 - there are at least two parameters that
171:04 - we need total this parameter will hold
171:07 - the accumulated value as well as the
171:10 - current element that we're working with
171:12 - we will return
171:14 - if we're trying to create a sum of all
171:16 - the elements
171:17 - total plus
171:19 - element so when we return a value we
171:22 - will reuse it as an argument for the
171:24 - next iteration this is how we can reduce
171:26 - all the elements of an array to a single
171:28 - value let's create a total variable and
171:31 - this will hold the final price that the
171:33 - user has to pay to reduce all of these
171:35 - prices to a single value we type the
171:38 - name of the array use the built in
171:40 - reduce method
171:42 - and pass in the callback checkout
171:46 - then i will just display what our total
171:48 - is console.log
171:50 - i'll use a template literal for this i
171:52 - will use a set of backticks
171:54 - the total
171:56 - is
171:59 - total
172:00 - okay
172:01 - so the total price is 75
172:05 - let's add something else something that
172:07 - is 30
172:08 - now the total is 105
172:11 - so that's the reduced method of arrays
172:13 - it reduces an array to a single value a
172:16 - fantastic use of the reduce method is to
172:19 - sum up an array of values like items in
172:22 - a shopping cart and create a total
172:23 - that's the reduced method of arrays if
172:25 - you would like a copy of this code i'll
172:27 - post this in the comments section down
172:28 - below and well yeah that's the reduced
172:30 - method of arrays in javascript
172:35 - hey guys in this video i'm going to show
172:36 - you how we can sort an array of numbers
172:38 - in javascript let's imagine that we're a
172:41 - teacher and we have a student grade book
172:43 - our task is to sort our students grades
172:46 - in either ascending order or descending
172:48 - order let's begin let's create an array
172:50 - named grades
172:52 - and make up some student grades i'm
172:54 - thinking 100
172:56 - 50
172:58 - 90
172:59 - 60
173:00 - 80
173:01 - 70. let's create a function that will be
173:03 - used as a callback to sort these numbers
173:05 - in descending order so the greatest
173:07 - number will be first the lowest number
173:09 - will be last
173:10 - function
173:13 - let's name this
173:14 - descending
173:16 - sort
173:19 - there's two parameters x and y all we
173:22 - have to do is return
173:25 - y minus x this will compare two values
173:28 - at a time to sort this array and use
173:30 - this callback function i will reassign
173:33 - grades equal to grades
173:36 - dot sort method and pass in a callback
173:39 - descending sort and then we just need to
173:42 - display our grades grades
173:44 - i'll use the built-in for each method
173:47 - and i will pass a callback of print then
173:50 - we just need to define this function
173:53 - function
173:54 - print
173:55 - there is one parameter
173:57 - of element
173:59 - console.log
174:02 - element
174:04 - now after running this
174:06 - our grades are in descending order let's
174:09 - create a callback function for ascending
174:11 - order
174:12 - so let's copy this paste it change
174:15 - descending to
174:16 - ascending return
174:18 - x minus y
174:21 - and for the callback we will pass the
174:23 - argument ascending order
174:26 - and our grades are now in ascending
174:28 - order the lowest is first the highest is
174:30 - last so yeah that's how to sort an array
174:33 - of numbers if you would like a copy of
174:34 - this code i'll post this in the comment
174:36 - section down below and well yeah that's
174:38 - how to sort an array of numbers in
174:40 - javascript
174:43 - hey guys in this video i'm going to
174:44 - explain function expressions a function
174:47 - expression is a function without a name
174:49 - also known as an anonymous function a
174:52 - benefit is that function expressions
174:54 - help us to avoid polluting the global
174:56 - scope with random function names we can
174:59 - write a function and then forget about
175:00 - it if i need to create a function to
175:02 - display a greeting message using a
175:04 - function declaration i would need to
175:06 - think of a unique function name such as
175:09 - function how about the say
175:12 - hello function
175:14 - console.log hello then to invoke this
175:17 - function i just type the function name
175:19 - followed by a set of parentheses boom we
175:21 - have our function so it can get somewhat
175:23 - tedious and annoying to think of unique
175:25 - function names especially if the rest of
175:27 - your program is not going to use it
175:29 - another way that we could write this is
175:30 - to use a function expression and we will
175:32 - store that within a variable i will use
175:34 - the const keyword this time const is
175:37 - just a variable that you can't change
175:38 - the value of later const
175:41 - greeting
175:42 - and i will set the sequel to a function
175:44 - expression we will type function
175:47 - parentheses curly braces and we do not
175:50 - need to think of a unique function name
175:52 - what would we like to do
175:54 - console.log
175:58 - hello then to invoke the function stored
176:00 - within this variable i just type the
176:02 - variable name followed by a set of
176:04 - parentheses to invoke it
176:07 - hello so there is no need to think of a
176:09 - unique function name we can assign an
176:12 - anonymous function to a variable or some
176:14 - other entity which we'll discuss in the
176:16 - future here's another example we'll
176:18 - create a counter using two buttons we
176:20 - can increase or decrease our counter
176:22 - heading to our html file let's create a
176:24 - label and two buttons
176:26 - we'll need an opening label tag close it
176:29 - add a line break
176:30 - i will set the id of this label to my
176:34 - label
176:35 - i'll add some text
176:37 - just zero
176:39 - we'll need two buttons
176:41 - button
176:42 - close it
176:45 - the idea of this first button will be
176:48 - decrease
176:49 - button
176:51 - the text will be decreased
176:54 - and we'll need an increase button
176:56 - copy this paste it change decrease to
176:59 - increase
177:02 - and we have our two buttons
177:04 - if we were using function declarations
177:06 - we would need to think of two unique
177:08 - names to link to these two buttons using
177:11 - function declarations we would probably
177:13 - say something like
177:15 - function
177:17 - increase
177:18 - count
177:20 - and we need a count variable let count
177:23 - equal zero
177:25 - we will increment count by one count
177:27 - plus equals one
177:29 - and change the text of this label so we
177:32 - need to select it document dot
177:35 - get element by id
177:39 - we are selecting my label
177:42 - change the inner html equal
177:46 - to count
177:47 - then we will create a decrease count
177:49 - function
177:50 - function decrease count count minus
177:54 - equals one
177:56 - lastly we just need to link these
177:58 - buttons to these functions there is an
178:01 - on click event attribute beginning with
178:03 - the decrease button
178:04 - take the on click attribute set the
178:07 - sequel to the appropriate function
178:10 - decrease count
178:12 - add a set of parentheses
178:14 - copy this
178:15 - paste it for increase button and we will
178:18 - select the increase count function
178:20 - let's save and run this
178:23 - so with this label we can increase it
178:25 - and decrease it however i think this
178:28 - would be better with function
178:29 - expressions we don't need to declare two
178:32 - functions such as increase count and
178:34 - decrease count we can assign some
178:36 - function expressions to these buttons
178:38 - and then simply forget about them i'm
178:40 - going to get rid of both of these
178:41 - functions and we will create some
178:43 - function expressions let's select this
178:45 - increase button
178:47 - i'll just copy what we have here
178:52 - increase
178:53 - button
178:55 - dot
178:56 - on
178:57 - click
178:58 - set the sequel to a function expression
179:01 - what would we like to do
179:03 - these two lines of code
179:06 - increase count by one and change our
179:08 - label
179:09 - let's copy this function expression
179:11 - paste it
179:12 - do the same thing but with the decrease
179:14 - button decrease button
179:17 - decrement count by one and change our
179:19 - label
179:20 - we can get rid of this previous code
179:22 - let's save heading back to our html file
179:25 - we can also get rid of these on click
179:27 - event attributes
179:29 - okay save everything and this should
179:31 - work we can increase our label and
179:34 - decrease it and there is no need to
179:36 - create two unique function names we were
179:39 - able to assign function expressions to
179:41 - the event attribute of an html element
179:44 - so those are function expressions if you
179:46 - would like a copy of this code i'll post
179:48 - this in the comments section down below
179:49 - don't be afraid to smash that like
179:51 - button leave a random comment down below
179:53 - and subscribe if you'd like to become a
179:55 - fellow bro
179:57 - hey guys in this video i'm going to
179:58 - explain arrow function expressions which
180:01 - are represented by well and arrow it's a
180:03 - compact alternative to a traditional
180:06 - function expression i'll give you a
180:08 - whole bunch of examples of where this
180:10 - could be useful let's create a
180:11 - traditional function expression which we
180:13 - learned about in the last topic
180:15 - i'll create a constant
180:18 - greeting
180:19 - and i will set the sequel to a function
180:21 - expression
180:22 - function we have an argument
180:25 - maybe username
180:28 - console.log
180:30 - will display a message i'll use a
180:32 - template literal
180:34 - hello
180:36 - then my placeholder user name
180:40 - so to invoke this function i type the
180:42 - function name a set of parentheses and i
180:45 - have one argument a username i'll type
180:47 - in my first name run this
180:49 - and this displays hello whatever your
180:52 - username is
180:53 - a compact alternative to this function
180:55 - expression is that we could convert it
180:57 - to an arrow function expression
181:00 - we will eliminate these things
181:02 - eliminate the function keyword after
181:04 - your arguments add an arrow
181:07 - and we can eliminate these curly braces
181:10 - looks good to me does this still work
181:13 - yes it does
181:14 - so depending on what arguments you have
181:16 - if you have no arguments you need just a
181:19 - set of parentheses
181:20 - if you have one argument you don't
181:22 - necessarily need to enclose this in a
181:24 - set of parentheses
181:26 - if you have two or more arguments you do
181:28 - need a set of parentheses
181:30 - that is one example of the arrow
181:32 - function
181:33 - let's try a different example the second
181:35 - example will have two arguments it will
181:38 - calculate a percentage
181:40 - first let's write a function expression
181:43 - const
181:44 - percent
181:45 - equals a function expression there are
181:48 - two arguments
181:49 - x and y
181:51 - x will be the denominator y will be the
181:53 - denominator and i would like to return x
181:56 - divided by y
181:58 - times 100.
182:00 - let's use console.log
182:03 - i'll use a template literal for this i
182:05 - would like to display here's my
182:07 - placeholder
182:08 - i'll invoke this function
182:10 - percent
182:11 - pass in two arguments
182:13 - a nominator and a denominator
182:16 - what is 75
182:19 - over 100
182:21 - then let's add percent to the end
182:24 - so 75
182:25 - over 100 is 75
182:28 - what about 80 over 150
182:33 - 53.3 repeating percent in place of a
182:36 - function expression let's use the arrow
182:38 - function
182:39 - so we eliminate the function keyword
182:42 - keep the arguments add an arrow
182:45 - and we can eliminate these curly braces
182:48 - and we don't necessarily need this
182:50 - return statement
182:52 - and this still works the same
182:54 - what about 45 over 50 that is 90
182:57 - here's one last exercise
182:59 - we'll reuse the code on the video on
183:02 - sorting an array of integers in that
183:04 - example we had an array of student
183:06 - grades
183:08 - and these are integers one student has
183:10 - 100
183:11 - another has 50
183:13 - 90
183:14 - 60
183:16 - 80
183:16 - 70.
183:18 - if i was using standard functions i
183:20 - would write something like this
183:22 - function
183:24 - descending
183:28 - there are two arguments x and y
183:32 - return y minus x
183:36 - and i will also create a print function
183:39 - function
183:40 - print
183:42 - we have one argument an element
183:45 - console.log
183:49 - element
183:50 - to sort and display each of these
183:52 - elements i will use two separate
183:53 - functions
183:55 - grades dot sort
183:57 - pass in a callback descending
184:01 - and i would also like to print
184:03 - grades for each
184:06 - pass in a callback to print
184:08 - so all of these grades are in descending
184:10 - order if we were writing the same code
184:12 - using function expressions i could stick
184:15 - a function expression within each of
184:17 - these methods let's turn this first
184:19 - function into a function expression
184:21 - cut it
184:22 - and paste it within the sort method
184:25 - and we will do the same thing with print
184:27 - get rid of the name
184:29 - cut this
184:31 - and paste it
184:33 - and that does the same thing but it uses
184:35 - function expressions in place of
184:37 - function expressions let's now use the
184:39 - arrow function we get rid of the
184:41 - function keyword
184:44 - add an arrow after the arguments
184:47 - and we can eliminate these curly braces
184:52 - and we don't need the return keyword
184:54 - either let's do the same thing with the
184:56 - for each method to display each element
184:58 - get rid of the function keyword
185:01 - add an arrow after the arguments we can
185:04 - eliminate the curly braces
185:06 - and that semicolon
185:08 - all right let's see if this works
185:10 - i can't believe it it actually worked in
185:13 - place of function expressions we were
185:14 - able to instead use arrow function
185:17 - expressions it's a compact alternative
185:19 - to a traditional function expression
185:22 - it makes your code a lot more readable
185:24 - so yeah those were a few examples of us
185:26 - using the arrow function you have your
185:28 - arguments on one side arrow then some
185:31 - code you would like to perform so yeah
185:33 - that's the arrow function everybody if
185:35 - you found this video helpful please be
185:36 - sure to smash that like button leave a
185:38 - random comment down below and subscribe
185:40 - if you'd like to become a fellow bro
185:43 - hey guys in this video i'm going to show
185:45 - you how we can shuffle the elements of
185:47 - an array this would work perfect for a
185:49 - card game let's say we have an array of
185:52 - cards
185:53 - let cards equal
185:56 - these will be string representations of
185:58 - cards we have an ace
186:01 - a two
186:02 - i'm not worried about the suit but you
186:05 - can feel free to add a suit if you would
186:06 - like i'm just gonna fill in this array
186:11 - then we have a
186:12 - jack a queen
186:15 - and a king so this is our array of cards
186:19 - to shuffle this array i can create a
186:21 - function to do that for me
186:22 - function
186:23 - shuffle
186:24 - and there will be one parameter an array
186:28 - when we invoke this function we need to
186:30 - pass an array as an argument
186:32 - shuffle our array cards now to shuffle
186:35 - this we'll begin at the end i need this
186:38 - array's length and i will store that
186:40 - within a variable that we will name
186:43 - current
186:44 - index and set this equal to the arrays
186:46 - length we will begin at the end
186:50 - and we'll need a while loop
186:52 - our condition is while
186:54 - current index does not equal zero now
186:57 - we'll need a random number between the
186:59 - beginning of this array up to the length
187:02 - of the array let's declare random
187:05 - index
187:06 - set the sql to
187:08 - math math.random
187:11 - times
187:12 - the arrays length property
187:15 - then surround this with math.floor
187:19 - math.floor decrement our current index
187:23 - by one current index minus equals one so
187:26 - i'm going to maximize this
187:29 - we will begin at the end we will swap
187:31 - this element with another one during the
187:34 - next iteration
187:35 - the previous element will be the current
187:37 - index we will swap this element with
187:40 - another one chosen randomly we'll
187:42 - continue this process until we reach the
187:45 - end of our array then stop then it's a
187:47 - matter of swapping two elements but
187:48 - we'll need some temporary storage
187:51 - let
187:52 - temp
187:53 - equal array
187:55 - at our current index
187:59 - array
188:00 - at our current index
188:04 - equals array at our random index
188:11 - array
188:12 - at our random index equals temp
188:16 - at the end of this function you can
188:17 - return the array if you like if you
188:19 - would like to reassign it
188:21 - i'm going to display all of the cards
188:24 - the array itself
188:26 - console.log
188:28 - cards
188:30 - so here's our array
188:33 - every time i run this program these
188:34 - elements are being shuffled
188:37 - if you would like the top element that
188:38 - would have an index of zero
188:40 - the top card in my deck currently is an
188:42 - eight
188:44 - now it's a king
188:45 - one trick if you would like to deal all
188:47 - the cards is that you can use the for
188:50 - each method of arrays
188:52 - cards dot for each method we can pass in
188:56 - a callback a function expression or an
188:58 - arrow function expression
189:00 - i'll use an arrow function expression we
189:02 - have one argument let's name this card
189:05 - arrow
189:07 - i would like to display that card
189:09 - console.log card
189:11 - this will deal all of the cards in my
189:13 - deck
189:14 - and every time i run it it's shuffled
189:17 - so yeah everybody that's one way in
189:19 - which we can shuffle the elements of an
189:21 - array if you would like a copy of this
189:23 - code i'll post this in the comment
189:24 - section down below and well yeah that's
189:27 - how to shuffle the elements of an array
189:29 - in javascript
189:32 - hey yeah everybody in this video i'm
189:34 - going to explain nested functions it's a
189:36 - function inside of another function
189:38 - think of the topic on nested loops it's
189:41 - a loop inside of another loop outer
189:43 - functions have access to inner functions
189:46 - inner functions are hidden from outside
189:49 - the outer function they add data
189:51 - security and they're used in closures
189:53 - which is a future video topic
189:55 - so let's begin we'll use traditional
189:57 - functions and then create some nested
189:59 - functions i have two variables let
190:02 - username equal some username
190:05 - and a variable to hold the amount of
190:07 - messages that i have like an inbox let
190:10 - user inbox
190:12 - equal
190:13 - zero or some other number i'm going to
190:15 - create a message to log in like we're
190:17 - logging into our email
190:19 - function
190:20 - login i'll create a function to display
190:22 - our username
190:24 - function display
190:26 - user
190:28 - name
190:30 - and another function to display our
190:32 - inbox
190:34 - user
190:36 - inbox when i display my username let's
190:39 - use console.log
190:41 - i'll use a template literal
190:44 - welcome
190:45 - i'll add a placeholder
190:47 - user name with the display user inbox
190:51 - function
190:52 - we will display how many messages we
190:54 - have you
190:56 - have
190:57 - add a placeholder
190:59 - user inbox
191:02 - new
191:03 - messages
191:04 - after logging in i would like to invoke
191:06 - these two functions display username
191:09 - and display user inbox
191:12 - and we need to invoke the login function
191:14 - as if we were logging in welcome bro you
191:16 - have zero new messages
191:18 - now a problem with this we have access
191:20 - to the display username function as well
191:23 - as the display user inbox function from
191:25 - outside of the login function meaning
191:28 - that we don't need to log in in order to
191:30 - display our username and our inbox so i
191:32 - can invoke these functions directly
191:35 - display username
191:36 - display user inbox and there's no need
191:38 - to even log in
191:40 - welcome bro you have zero new messages
191:42 - to add a little bit of data security i
191:45 - could place these functions within
191:47 - another function
191:48 - so in order to access the display
191:50 - username function i need to first log in
191:55 - and the same thing goes with the display
191:57 - user inbox function
192:00 - if i attempt to invoke these functions
192:03 - when they're nested
192:04 - i don't have access to them it adds some
192:06 - security in order to invoke these
192:08 - functions i first need to login
192:11 - so we'll invoke the login function
192:14 - and then we have access to the display
192:16 - username function and the display user
192:18 - inbox function so yeah those are nested
192:21 - functions they're functions inside of
192:23 - other functions the outer function has
192:25 - access to inner functions
192:28 - inner functions are hidden from outside
192:30 - the outer function it adds some data
192:32 - security and they're also used in
192:34 - closures which is a future video topic
192:37 - so yeah those are nested functions if
192:40 - you would like a copy of this code i'll
192:41 - post this in the comments section down
192:43 - below and well yeah those are nested
192:45 - functions in javascript
192:49 - hey guys in this video i'm going to
192:50 - explain what a map is a map is an object
192:53 - that holds key value pairs of any data
192:56 - type here's an example we have an online
192:59 - store we can associate prices with items
193:02 - constant
193:04 - store
193:05 - equals new
193:07 - map
193:08 - add a set of parenthesis
193:11 - a set of square brackets
193:14 - and within the square brackets we can
193:16 - create key value pairs add each key
193:19 - value pair to a set of square brackets
193:21 - and separate each pair with a comma the
193:23 - first value is the key the first key
193:26 - value pair is a t-shirt and the
193:28 - associated value is twenty for twenty
193:30 - dollars this is one pair in my map
193:33 - object let's create another my second
193:35 - pair
193:36 - are jeans
193:38 - they go for about thirty dollars maybe
193:40 - the third pair in my map are socks
193:44 - i'll sell them for ten dollars and what
193:46 - about underwear they're expensive
193:48 - they're fifty dollars they're very good
193:50 - underwear okay here is my map object
193:53 - it's named store to iterate over the
193:55 - pairs in my map i can easily do this
193:57 - using the for each method so type my map
194:01 - name dot for
194:03 - each
194:04 - i can pass in a callback a function
194:07 - expression or an arrow function
194:09 - expression i'll use an arrow function
194:11 - expression we have two parameters a
194:14 - value
194:15 - and a key
194:16 - arrow
194:18 - i would like to display my key value
194:19 - pairs
194:20 - console.log i'll use a template literal
194:24 - i'll add a placeholder
194:26 - key
194:27 - and each value
194:30 - value
194:31 - and i'll add a dollar sign
194:33 - so this is what i have currently
194:35 - this line will iterate and display each
194:38 - pair of my map and here is each pair
194:40 - it's kind of like i'm listing all the
194:42 - items in my store if i need to get one
194:44 - of these items like i would like to make
194:45 - a purchase there is a get method i'll
194:48 - create a variable to store the prices
194:50 - that are going to add up let shopping
194:53 - cart i'll set the sequel to zero if i
194:56 - would like to buy one of these items
194:57 - there is an associated price and i just
194:59 - need to access this value so i will take
195:02 - shopping cart and increment it to access
195:05 - one of these values i will type the name
195:07 - of the map store get
195:10 - and then a key i would like to buy a
195:11 - t-shirt
195:13 - so i will get
195:14 - my t-shirt and let's display our
195:16 - shopping cart console.log
195:19 - shopping cart
195:20 - currently our shopping cart is twenty we
195:22 - have to pay twenty dollars i would like
195:24 - to add another item
195:26 - i want some of that fancy underwear
195:28 - store dot get underwear my total is now
195:31 - seventy dollars
195:32 - twenty dollars plus fifty so that is the
195:35 - get method here's a few other methods
195:38 - there's a set method we can add a pair
195:40 - to our map
195:42 - store
195:43 - dot set i would like to add a hat
195:46 - and the price is 40. it's an expensive
195:49 - hat it's gucci now when we iterate over
195:52 - this map we have a t-shirt jeans socks
195:54 - underwear and a hat that is the set
195:56 - method we can delete a pair
195:59 - store dot delete type in the key
196:03 - hat
196:04 - and our hat is gone we can check if
196:06 - there's a key within our map type the
196:08 - map name
196:10 - has
196:11 - and pass in a key do we have any hats
196:14 - this will return a boolean value so i'm
196:16 - just going to place this within a
196:17 - console.log statement
196:20 - do we have any hats store has hat
196:23 - false
196:24 - store has underwear
196:27 - that's true
196:28 - that is the haz method and the last one
196:30 - i'll show you is the size property type
196:33 - the map name store dot size
196:36 - i'll put this within console.log
196:41 - and the amount of pairs within our map
196:43 - is four so yeah that's a map everybody
196:46 - it's an object that holds key value
196:48 - pairs of any data type you can associate
196:50 - a key with the value one example that we
196:53 - covered is if we had an online store we
196:55 - could associate products with prices so
196:58 - those are maps everybody hey if you
197:00 - found this video helpful please be sure
197:01 - to help me and smash that like button
197:03 - leave a random comment down below and
197:05 - subscribe if you'd like to become a
197:06 - fellow bro
197:08 - alright guys we have finally made it to
197:11 - object-oriented programming an object is
197:13 - a group of properties and methods
197:16 - properties are what an object has like a
197:19 - name a color a year methods are what an
197:23 - object can do for example if we're
197:25 - creating a car object two possible
197:27 - methods could be drive and break so
197:29 - let's create some car objects to begin
197:31 - with i'll create a constant constant car
197:35 - and this is how we can create an object
197:37 - within a set of curly braces we can
197:39 - create some properties which are kind of
197:41 - like variables this car has a model
197:44 - property
197:45 - and we can assign a value
197:47 - this car is a mustang
197:49 - separate each property with a comma
197:53 - let's create a color property the color
197:55 - could be red
197:56 - and a year
197:58 - the year is 20 23.
198:01 - we can also add some functions too i'll
198:03 - create a drive function so create a
198:06 - function name
198:07 - colon
198:09 - function parentheses curly braces
198:12 - when we invoke the drive function we can
198:14 - do something
198:15 - i'll display a message
198:17 - console.log
198:19 - you drive the car let's create another
198:22 - function
198:23 - this will be the
198:25 - break method so function parenthesis
198:29 - curly braces
198:30 - you step on the brakes
198:35 - and there we go we have a car object
198:37 - within a set of curly braces you can
198:39 - assign properties and methods and then
198:42 - at the end make sure you don't have a
198:44 - comma an object can have properties what
198:46 - an object has like a model a color and a
198:50 - year
198:51 - and methods what an object can do this
198:54 - car can drive and it can break to access
198:56 - an object's properties and methods
198:58 - follow the object name with a dot if i
199:00 - need access to the model of this car i
199:02 - would type the object name
199:05 - car
199:06 - dot
199:07 - model
199:08 - and i will display this within
199:10 - console.log but you can assign it change
199:12 - it do whatever you want with it this
199:14 - statement displays mustang
199:17 - if i need the color property i would
199:19 - type the object name
199:21 - dot color
199:23 - which is red
199:25 - car dot year
199:27 - is 20 23 if i would like to invoke one
199:30 - of these methods found within my car
199:31 - object i would type the object's name
199:34 - followed by the method i would like to
199:36 - perform
199:37 - car dot drive add a set of parenthesis
199:40 - to invoke it
199:41 - you drive the car
199:43 - then we have car dot break
199:46 - you step on the brakes we can create
199:48 - multiple objects each with different
199:50 - properties and methods one way to do
199:53 - this we haven't discussed classes or
199:54 - constructors yet we can just create a
199:56 - new name and we'll rename car as car 1
199:59 - so we have two different car objects but
200:01 - i'll change the properties of card too
200:03 - we'll keep drive and break the same
200:06 - this will be a corvette
200:08 - the color is blue and the year is 20 24.
200:12 - so this car is named car 2. in order to
200:15 - access this car's model i would type the
200:17 - name of the object
200:18 - car 2
200:19 - car 2. model
200:21 - car 2.color car 2.ear
200:24 - car 2 dot drive car 2 dot break
200:27 - we have a corvette the color is blue
200:30 - the year is 20 24.
200:32 - when we invoke the drive method you
200:34 - drive the car the brake method
200:37 - displays
200:38 - you step on the brakes so yeah those are
200:40 - objects it's a group of properties and
200:43 - methods that have a name properties are
200:45 - what an object has methods are what an
200:48 - object can do they're functions that
200:50 - belong to an object to access properties
200:52 - and methods of an object you use a dot
200:55 - following the object name so those are
200:57 - objects if you would like a copy of this
200:59 - code i'll post this to the comment
201:00 - section down below if you haven't
201:02 - already please be sure to smash that
201:04 - like button leave random comments down
201:05 - below and subscribe if you'd like to
201:07 - become a fellow bro
201:10 - hey yeah everybody in this video i'm
201:12 - going to explain the this keyword all it
201:15 - is is a reference to a particular object
201:18 - but it depends on the immediate context
201:20 - where you use the this keyword here's an
201:22 - example i have two objects car one and
201:26 - car two car one is a red mustang car two
201:29 - is a blue corvette each has a similar
201:32 - drive function
201:33 - you drive the car
201:34 - in place of the word car why don't we
201:36 - replace the word car with the model of
201:39 - each car object i'm currently using a
201:41 - template literal i could insert the
201:43 - model of my car will create a
201:45 - placeholder
201:47 - this is what happens if i just type
201:49 - model you think this would work because
201:51 - this is like a variable right and let's
201:53 - do the same thing with cartoon i will
201:55 - invoke these two methods
201:57 - car one dot drive
202:00 - and cartoon.drive
202:02 - okay we ran into an error model is not
202:05 - defined at object drive within an object
202:08 - if i would like to use one of these
202:09 - properties i would need to precede this
202:12 - property with the this keyword in place
202:15 - of model i would type this dot model and
202:19 - do the same thing with cartoon this
202:22 - dot model
202:23 - let's run this again you drive the
202:25 - mustang you drive the corvette this
202:27 - refers to the object that we're
202:29 - currently working with the immediate
202:31 - context within this object the immediate
202:34 - context of this is car1 in this other
202:37 - object the immediate context of this is
202:40 - car two within an object when using the
202:43 - this keyword just imagine that we're
202:45 - replacing this with the object name
202:48 - car1.model and cartoo.model
202:51 - this will do the same thing so this is
202:54 - just a reference to the object we're
202:55 - working with let me show you what
202:57 - happens if i use the this keyword
202:59 - outside of any objects i will
203:01 - console.log
203:04 - this so what the heck is this we're
203:07 - actually within the context of a window
203:10 - object if you use the this keyword
203:12 - outside of any objects that you declared
203:14 - well then this refers to instead the
203:16 - window object because that is the
203:18 - immediate context and i can change one
203:20 - of these properties if i wanted to let's
203:22 - change this name property i would type
203:25 - this
203:27 - dot name
203:28 - equals my
203:31 - cool window
203:33 - so i can run this
203:36 - let's find that property
203:38 - there's my name property my cool window
203:41 - if i would like to access this property
203:43 - directly i would follow this with dot
203:47 - name
203:49 - my cool window
203:50 - so that's the this keyword everybody
203:52 - it's a reference to a particular object
203:55 - just imagine that we're replacing the
203:57 - keyword this with the name of an object
204:00 - hey if you found this video helpful
204:02 - please be sure to smash that like button
204:04 - leave a random comment down below and
204:06 - subscribe if you'd like to become a
204:07 - fellow bro
204:09 - hey everybody in this video i'm going to
204:11 - explain classes a class is a blueprint
204:14 - for creating objects within a class we
204:17 - can define what properties and methods
204:19 - that type of object should have and they
204:21 - typically contain a constructor to
204:24 - assign some unique properties but we're
204:26 - going to focus on constructors in the
204:27 - next video i had some trouble
204:29 - brainstorming some possible class ideas
204:31 - that wouldn't utilize a constructor but
204:33 - one that i thought of could be a player
204:36 - we can create a player class as a
204:37 - blueprint and create some player objects
204:40 - so to create a class we will type class
204:43 - player
204:45 - curly braces and we can define a
204:47 - properties and methods that all player
204:49 - objects will have its blueprint maybe
204:52 - each player has their own individual
204:54 - score and i will set this to zero each
204:56 - player will start at zero each player
204:58 - has a pause method now when you declare
205:01 - a method within a class you don't
205:03 - necessarily need that function keyword
205:05 - when a player pauses we will display a
205:07 - message console.log
205:10 - you paused
205:12 - the game and maybe an exit method
205:17 - console.log
205:19 - you
205:19 - exited the game now to utilize this
205:22 - class to create an object we would need
205:24 - an object name let's say constant
205:28 - player1 this will be the first player
205:30 - that joins now to utilize this class to
205:32 - create a player object we use the new
205:35 - keyword followed by the name of the
205:37 - class
205:37 - player
205:38 - add a set of parentheses and a semicolon
205:41 - we have created player one player one
205:43 - has a score property and two methods
205:46 - pause and exit let's display what player
205:48 - one score is
205:51 - console.log
205:52 - player1.score
205:55 - and that is currently zero but you can
205:56 - adjust its score player one dot score
206:00 - plus equals one he scored a point player
206:02 - one now has one point player one dot
206:05 - pause method
206:07 - you pause the game and player one
206:09 - connects it player one dot exit
206:13 - you exited the game we can reuse this
206:15 - class to create multiple players i'll
206:18 - create player two constant player two
206:21 - equals new player i'll display player
206:24 - two score
206:26 - and we will have player two exit the
206:27 - game
206:29 - player one has one point player two has
206:30 - zero points player one invoked the pause
206:33 - method player two invoked the exited
206:35 - method you can keep on reusing this
206:37 - class as much as you would like this
206:39 - time i would like four players so same
206:41 - process as before declare a unique
206:44 - object name set the sql to use the new
206:47 - keyword the name of the class that's a
206:49 - class it's basically a blueprint for
206:51 - creating objects we can create as many
206:53 - objects as we want and within this class
206:55 - we define what properties and methods
206:58 - that each object created from this class
207:00 - should have and in the next video we're
207:02 - going to discuss constructors so we can
207:04 - assign some unique properties to each
207:06 - object so those are classes hey if you
207:08 - liked this video let me know by smashing
207:10 - that like button leave a random comment
207:11 - down below and subscribe if you'd like
207:13 - to become a fellow bro
207:16 - all right everybody constructors a
207:19 - constructor is a special method of a
207:21 - class its job is to accept arguments and
207:24 - assign properties or anything else you
207:26 - would like to do when you instantiate an
207:28 - object let's create a student class
207:30 - class
207:31 - student to create a constructor we will
207:34 - type
207:35 - constructor
207:36 - parentheses curly braces now when we
207:39 - create an object a student object in
207:41 - this example we can assign some
207:42 - properties each student has a name an
207:46 - age and a gpa within the constructor we
207:49 - can assign some of these arguments to
207:51 - properties of this class we can state
207:53 - this
207:54 - dot
207:55 - name
207:56 - equals name
207:58 - this dot age equals age
208:01 - this dot gpa equals gpa
208:05 - there we go there's our constructor you
208:07 - can also add additional properties or
208:09 - methods outside the constructor let's
208:11 - add a study method
208:14 - study
208:17 - let's display
208:18 - i'll use a template literal
208:21 - this dot name
208:23 - is studying
208:26 - okay let's create some student objects
208:29 - we can use var let or const i'll use
208:31 - const
208:32 - student one
208:34 - equals new
208:36 - student
208:37 - within our constructor we have three
208:39 - parameters that means that we need to
208:40 - pass three arguments a name an age and a
208:44 - gpa so that we can assign these
208:45 - properties the first student will be
208:48 - spongebob that's his name his age he'll
208:50 - be 30 and his gpa he has a 3.2 gpa and i
208:55 - can display these console.log
209:00 - student1 dot name
209:03 - his name is spongebob
209:06 - age and a gpa spongebob his age is 30
209:09 - his gpa is 3.2 and for fun let's invoke
209:13 - the study method
209:16 - student one dot study
209:20 - spongebob is studying
209:22 - now we can reuse this class as a
209:24 - template to create other students and
209:26 - pass some unique arguments to assign to
209:28 - its properties
209:29 - let's create student 2
209:32 - student 2 equals new student the
209:34 - student's name will be patrick
209:36 - he will be 35 years old his gpa is 1.5
209:42 - and we have access to student two's
209:44 - properties and methods
209:46 - student two dot name age gpa
209:50 - and he has his own study method
209:52 - okay patrick is 35 his gpa is 1.5 and
209:56 - patrick is studying we can reuse this
209:58 - class to create as many students as we
210:00 - like
210:02 - so lastly let's create one last student
210:05 - student 3
210:06 - student 3 will have a name of sandy
210:09 - sandy will be 27
210:12 - and sandy's gpa is of course a 4.0
210:15 - student 3 has its own unique properties
210:17 - and methods
210:18 - a name age gpa
210:21 - and study method we have sandy she's 27
210:25 - her gpa is 4 well 4.0
210:28 - and she has her own study method sandy
210:30 - is studying so that's a constructor it's
210:32 - a special type of method within a class
210:35 - it accepts arguments and assigns
210:37 - properties when you construct an object
210:39 - so those are constructors hey if you
210:41 - haven't already please be sure you smash
210:43 - that like button leave random comments
210:45 - down below and subscribe if you'd like
210:47 - to become a fellow bro
210:49 - hey guys in this video i'm going to
210:51 - explain the static keyword a member that
210:54 - is static whether it's a property or a
210:56 - method belongs to a class and not any
210:59 - objects created from that class in this
211:01 - example i have a class car and a
211:02 - constructor when we create a car object
211:05 - we can pass in a model of a car so i
211:07 - have three car objects suppose i would
211:09 - like to keep track of how many cars i
211:12 - have created we're entering some cars
211:13 - into a race well we could create a
211:15 - property to keep track of how many cars
211:17 - that we have instantiated let me show
211:18 - you why we would want to make this
211:20 - static so we have a property
211:22 - number
211:24 - of cars and i will set this equal to
211:26 - zero within the constructor we can add
211:28 - additional code every time we create a
211:30 - car let's increment cars by one number
211:33 - of cars plus equals one now i will
211:35 - precede number of cars with the this
211:38 - keyword so what happens when we display
211:39 - number of cars for each car
211:42 - console.log
211:44 - car one dot number of cars
211:46 - car two car three
211:49 - so the total number of cars within our
211:51 - race is one i guess so the reason why
211:53 - number of cars is in three is because
211:56 - each car object has their own number of
211:58 - cars variable each car object can share
212:01 - the same property or method and we would
212:03 - precede that property or method with the
212:06 - static keyword instead of each car
212:08 - having their own copy the car class
212:10 - itself has the only copy then to
212:13 - increment number of cars by one in place
212:16 - of the this keyword i will use the name
212:17 - of the class car the car classes number
212:20 - of cars will be incremented by one every
212:23 - time we call the car constructor there's
212:25 - a problem here i'm accessing the number
212:27 - of cars property but no one object from
212:29 - this class has ownership of this
212:31 - variable to access the static property
212:34 - of number of cars i will use the name of
212:37 - the class car
212:38 - car dot number of cars how many cars
212:41 - have we created we have created three
212:43 - cars and i could create another
212:46 - car for
212:47 - is a
212:49 - ferrari
212:50 - now we have four cars
212:52 - or even
212:54 - five cars
212:55 - a static property is useful for caches
212:57 - or anything with a fixed configuration
212:59 - we also have the capability to make
213:01 - methods static it's more or less useful
213:03 - for utility functions now we would like
213:06 - to start our fictional race we could
213:07 - create a start race method
213:10 - start
213:11 - race
213:14 - console.log
213:15 - three
213:16 - two
213:18 - one
213:19 - go so currently this is not static so
213:22 - any one of these cars can begin the race
213:24 - on their own terms
213:26 - car one wants to begin the race start
213:29 - race
213:30 - three two one go so i'm going to make
213:32 - this a static method it's more or less a
213:34 - utility function
213:36 - so precede the method name with static
213:39 - now to invoke this start race method
213:41 - type the name of the class car car dot
213:44 - start race three two one go
213:46 - basically that's the static keyword
213:48 - anything that's static belongs to the
213:50 - class and not the objects one place
213:52 - where we do see static methods is within
213:54 - the math class say i need to round
213:57 - math the name of the class dot round
213:59 - method
214:00 - i wouldn't need to create a math object
214:02 - such as const math1 equals new math that
214:07 - would be silly to access the round
214:09 - method i would just type the name of the
214:10 - class
214:12 - dot round it's a static method that's
214:14 - the static keyword everybody if you
214:15 - would like a copy of this code i'll post
214:17 - this to the comment section down below
214:19 - and well yeah that's the static keyword
214:21 - in javascript
214:24 - hey y'all everybody in this video i'm
214:26 - going to explain inheritance inheritance
214:28 - is when a child class can inherit all
214:30 - the methods and properties from another
214:33 - class how is this useful let me give you
214:35 - a demonstration our job is to create
214:37 - three classes a class for rabbits fish
214:41 - and hawks three specific kinds of
214:43 - animals so we have class
214:46 - rabbit
214:47 - each rabbit will have a boolean variable
214:50 - called alive and i will set this to true
214:52 - if you're a rabbit object you're alive
214:55 - and a name equal to rabbit
214:58 - each rabbit should be able to eat
215:02 - console.log
215:05 - i'll use a template literal
215:08 - this at a place holder
215:11 - this dot name
215:13 - is eating and all rabbits should be able
215:16 - to sleep
215:18 - sleep this
215:20 - this dot name
215:22 - is
215:23 - sleeping
215:24 - and one more how about run
215:26 - run this this dot name
215:29 - is
215:30 - running this is our rabbit object so
215:32 - let's copy this class paste it
215:35 - and convert the second class to fish
215:39 - alive will remain true name will be fish
215:42 - eat and sleep will remain the same but
215:44 - fish they don't run well because they
215:46 - don't have legs they will instead have a
215:49 - swim method
215:50 - this this dot name is swimming
215:54 - copy all this code
215:56 - and we will create a hawk class this
215:58 - will be the last class class
216:01 - puck name is hawk
216:04 - hawks will be able to eat and sleep in
216:06 - place of a swim method they will have a
216:08 - fly method
216:09 - this this dot name
216:11 - is
216:12 - flying we have three separate classes
216:15 - rabbit fish and hawk but with
216:17 - programming we don't like to repeat code
216:19 - and we're repeating quite a lot of code
216:21 - within each of these classes each class
216:23 - has an identical eat and sleep method as
216:26 - well as in a live boolean variable so to
216:29 - eliminate the need for us to repeat some
216:31 - of this code we can simply create a
216:32 - class and all of these individual animal
216:34 - classes can inherit some properties and
216:36 - methods from that one class so what do
216:39 - all of these classes have in common and
216:41 - a live boolean variable and an eat and
216:43 - sleep method so why don't we create a
216:44 - separate class and each of these classes
216:46 - will inherit from that one class this
216:48 - will be a parent class rabbit fish and
216:51 - hawk will be children classes
216:53 - so let's create class
216:55 - animal that's descriptive of what they
216:57 - all have in common class rabbit will
217:00 - extends the animal class rabbit is the
217:03 - child class animal is the parent class
217:06 - do the same thing with fish
217:09 - and hawk
217:10 - any properties or methods that all of
217:12 - these classes have in common we can put
217:14 - within the parent class they each have
217:16 - an alive property set to true we can
217:19 - eliminate that for each class and stick
217:21 - it within the parent class there's no
217:23 - need to repeat this variable each time
217:25 - they each have the same eat and sleep
217:27 - methods
217:29 - we can copy those
217:31 - paste it within the animal class
217:33 - and then eliminate each of these methods
217:34 - within the children classes
217:37 - so any properties or methods that are
217:39 - unique to these children classes you
217:42 - should keep within the children classes
217:43 - rabbit inherits these properties and
217:45 - methods from the animal class
217:47 - fish does the same as well as well as
217:49 - hawk and you can see that we eliminated
217:51 - a lot of lines of code there was no need
217:53 - for us to repeat ourselves let's create
217:54 - some animal objects
217:56 - const rabbit equals new rabbit
218:02 - fish equals new
218:05 - fish
218:07 - hawk equals new hawk let's test to make
218:10 - sure that each of these children classes
218:12 - does in fact have access to these
218:13 - properties and methods rabbits should
218:15 - have in a live boolean variable
218:18 - if you're a rabbit you're alive
218:20 - congratulations console.log rabbit.alive
218:23 - that is true
218:25 - even though within the rabbit class we
218:27 - didn't write in a live boolean variable
218:29 - within the rabbit class itself it
218:31 - inherited one from its parent and i bet
218:33 - rabbits can also
218:34 - eat
218:37 - i bet they can sleep
218:40 - and they can run
218:45 - yep the rabbit is eating sleeping
218:47 - running so let's test this with fish
218:51 - fish not alive fish.eat fish.sleep what
218:54 - would happen exactly if i attempt to
218:56 - invoke the run method of fish fish.run
218:59 - is not a function so this run method
219:02 - belongs to the rabbit class fish don't
219:04 - have a run method but what they have in
219:05 - common are those eat and sleep methods
219:08 - fish do have a swim method so the fish
219:11 - is eating the fish is sleeping the fish
219:12 - is swimming and let's test hawk
219:14 - hawk dot alive hawk.e hawk.sleep
219:18 - hawk.fly
219:20 - okay true this hawk is eating this hawk
219:22 - is sleeping this hawk is flying so
219:24 - that's inheritance everybody a child
219:26 - class can inherit all of the properties
219:28 - and methods from a parrot class if you
219:30 - have multiple classes that all have the
219:33 - same properties and methods you could
219:35 - stick those properties and methods
219:36 - within a parent class and there's no
219:39 - need to repeat those properties and
219:40 - methods if they're identical not only
219:42 - does this eliminate repetition when
219:44 - you're coding but if you need to make
219:45 - any changes to one of these methods it's
219:48 - all in one place if my boss says i need
219:50 - to change the eat method to
219:52 - this this dot name is eating to
219:55 - hunting i just have to make this change
219:57 - in one place if we had an eat method
219:59 - within each of these classes i would
220:01 - have to go to each individual class and
220:03 - make that change manually it's not bad
220:05 - if there's three classes but imagine if
220:06 - you had hundreds that would be a lot of
220:08 - unnecessary work when you could just
220:09 - make that change in one place so that's
220:11 - inheritance everybody if you would like
220:13 - a copy of this code i'll post this in
220:15 - the comments section down below if you
220:16 - haven't already please be sure you've
220:18 - smashed that like button leave random
220:19 - comments down below and subscribe if
220:21 - you'd like to become a fellow bro
220:24 - hey guys in this video i'm going to
220:26 - explain the super key word the super
220:28 - keyword when using inheritance refers to
220:31 - the parent class
220:32 - it's commonly used to invoke the
220:34 - constructor of a parent class here's an
220:36 - example i have three children classes
220:39 - rabbit fish and hawk they all inherit
220:42 - from the animal parent class suppose we
220:44 - have a constructor within each of these
220:46 - child classes
220:49 - constructor rabbits will have these
220:52 - three properties
220:53 - a name
220:54 - an age and a run
220:57 - speed
220:57 - so to assign these properties when we
220:59 - instantiate a rabbit object we could
221:02 - assign this dot name equals name
221:05 - this dot age
221:07 - equals age and this dot run speed
221:11 - equals run speed
221:13 - i'll copy this constructor
221:15 - paste it within the fish child class
221:18 - fish well they don't have a run speed
221:19 - but they will have a swim speed property
221:22 - swim speed
221:24 - this
221:25 - swim speed equals swim speed let's copy
221:28 - our constructor paste it within hawk
221:30 - change swim speed to fly speed
221:34 - this fly speed equals fly speed let's
221:37 - create some of these objects
221:39 - const rabbit equals new
221:42 - rabbit we have to pass in three
221:44 - properties a name
221:46 - an age and a run speed for the name
221:49 - we'll say rabbit
221:52 - age one one for one year old
221:55 - and a run speed of 40 kilometers per
221:57 - hour i don't know if that's accurate i
221:59 - just made up a number
222:00 - okay let's create a fish object
222:03 - fish equals new
222:05 - fish
222:06 - the name is fish the age will be
222:09 - i guess two
222:11 - swim speed 80 kilometers per hour okay
222:14 - then we have
222:16 - hawk equals new hawk
222:19 - pass in a name
222:20 - hawk
222:21 - and age maybe three and a fly speed
222:24 - 200 kilometers per hour
222:27 - just to test everything i'm going to
222:29 - display my rabbit's name
222:31 - age and run speed
222:34 - rabbit dot
222:36 - name rabbit dot age
222:40 - and rabbit dot
222:42 - run
222:43 - speed
222:44 - okay let's take a look
222:46 - what the heck so we encountered an
222:48 - uncaught reference error must call super
222:51 - constructor in derived class before
222:53 - accessing this so if we have any
222:55 - children classes and those children
222:57 - classes have constructors we would want
222:59 - to invoke the constructor of a parent
223:02 - class one of the reasons why this would
223:04 - be useful is that within each of these
223:06 - constructors we're repeating some code
223:08 - this dot name equals name and this dot
223:10 - age equals edge but the run speed swim
223:12 - speed and fly speed are all unique to
223:14 - each of these classes to promote code
223:16 - reusability we can call the constructor
223:19 - of a parent class to assign the name and
223:21 - age properties so within the animal
223:23 - class i will create a constructor
223:26 - we will have a name and age property and
223:28 - then we'll assign them
223:30 - this dot name equals name
223:34 - this dot age equals age
223:38 - we can eliminate these two lines
223:40 - and when we construct a new rabbit
223:42 - object we will first invoke the
223:44 - superconstructor so you type super
223:47 - then pass your arguments to the
223:48 - superconstructor we will pass our name
223:51 - and age and we can do this with the
223:53 - other constructors
223:55 - this eliminates some code repetition
223:58 - and this should work so we have our
223:59 - rabbit we have our name rabbit age is
224:02 - one year old and the speed is 40
224:04 - kilometers per hour let's try this with
224:06 - fish fish dot name fish dot age fish dot
224:10 - swim speed
224:12 - the name of this fish is fish this fish
224:14 - is two years old swim speed of 80. and
224:17 - in our last example we have hawk
224:19 - hawk.name hawk.h hawk.flyspeed
224:22 - the name is hawk
224:24 - this hawk is 3 years old and has a fly
224:26 - speed of 200 kilometers per hour so the
224:28 - super keyword refers to a parent class
224:30 - it's commonly used to invoke the
224:32 - constructor of a parent class it helps
224:34 - with code reusability we could write
224:36 - this code once and simply reuse it by
224:38 - invoking the superconstructor of the
224:40 - parent class then if any class has any
224:42 - unique properties you can assign those
224:45 - unique properties within the constructor
224:47 - of each of these child classes so that
224:49 - is the super keyword it just refers to
224:51 - the parent class if you would like a
224:52 - copy of this code i'll post this to the
224:54 - comments section down below and well
224:56 - yeah that's the super keyword in
224:58 - javascript
225:00 - hey yeah everybody in this video i'm
225:02 - going to explain getters and setters
225:04 - let's begin with getters to create a
225:06 - getter you use the get keyword its job
225:09 - is to bind an object property to a
225:11 - function when that property is accessed
225:13 - here's an example let's create a class
225:15 - car class
225:16 - car
225:18 - i'll create a constructor constructor
225:21 - we'll have one parameter power this will
225:23 - be in
225:24 - horsepower this dot power equals power
225:29 - when i create a car object let car equal
225:32 - new car i will pass in a unit for power
225:35 - this will be in horsepower 400
225:37 - horsepower is good
225:39 - then i will display this console.log
225:42 - car.power
225:44 - my car has 400 horsepower one thing i
225:47 - don't like about how my code is written
225:49 - is that when i'm displaying the car's
225:50 - horsepower there's no unit of
225:52 - measurement when i display this property
225:54 - i could add on
225:55 - car.power plus
225:57 - hp for horsepower but i have a better
226:00 - idea let's use a getter when we get this
226:02 - property we can add some additional
226:04 - logic i will type get the name of the
226:07 - property power
226:09 - parentheses curly braces when we access
226:13 - this property we will instead invoke a
226:15 - function we will return
226:17 - this dot power
226:19 - now there's a couple issues with this
226:20 - when i run this first we have a type
226:23 - error cannot set property power of car
226:26 - the property name and the getter cannot
226:28 - have the same name a common naming
226:30 - convention with properties of objects if
226:32 - you have getters and setters set up is
226:34 - that you take the property name and
226:36 - precede it with an underscore this lets
226:38 - other developers know that this is a
226:40 - protected property and you probably
226:42 - shouldn't mess with it now if i run this
226:43 - we have another issue
226:46 - uncaught range error maximum call stack
226:49 - size exceeded that's because when we
226:51 - invoke this getter we're returning this
226:53 - dot power again we're invoking the
226:56 - getter method from inside of it we will
226:58 - instead return this dot underscore power
227:01 - underscore power is the protected
227:03 - property now when i run this it displays
227:06 - my number 400 by associating a protected
227:09 - property with only a getter this
227:11 - protected property is read-only and not
227:13 - writable if i was to take car.power and
227:17 - set this to like a gajillion and i
227:19 - display my car's power well it's still
227:21 - at 400 we do not have direct access to
227:24 - this property i mean theoretically you
227:26 - could set car dot underscore power to a
227:29 - kajillion but developers know that if
227:31 - you see underscore than a property name
227:33 - that means it's protected and you
227:35 - shouldn't mess with it at all another
227:36 - thing that we can do with getters is
227:38 - that we can add some additional logic
227:40 - instead of just returning this.power
227:43 - let's add horsepower to the end
227:45 - i'll place this within a template
227:46 - literal
227:50 - and add hp for horsepower
227:53 - so when i display my car's power
227:55 - it's 400 horsepower so that's a few
227:58 - benefits of getters is that one it
228:00 - increases data security and two you can
228:02 - perform some additional logic when you
228:04 - access a property directly to use a
228:06 - getter you type the object name followed
228:08 - by the getter name it appears to be no
228:10 - different from accessing that property
228:12 - directly we don't need to invoke a power
228:14 - method you just type power as if it's a
228:16 - property let's create a protected
228:18 - property for gas
228:20 - within my constructor i'll set this
228:23 - dot underscore gas
228:25 - to some amount of gas in liters perhaps
228:28 - we're selling cars and each car will
228:30 - have 25 liters of gas to start with then
228:33 - to display my gas i can use a getter
228:36 - get
228:37 - gas
228:38 - return this dot underscore gas
228:42 - the unit of measurement will be liters
228:44 - let's display my car's power
228:47 - and its gas
228:49 - 25 liters let's add some additional
228:51 - logic along with the gas level i would
228:53 - like to display the percentage of what
228:55 - my tank is at so zero percent would be
228:58 - empty 100 would be full i'll return a
229:01 - template literal
229:03 - what about
229:04 - this dot
229:06 - underscore gas
229:08 - divided by maybe some max tank size like
229:11 - 50 liters
229:13 - times 100
229:15 - percent
229:16 - if my guess level is at 25 well then my
229:19 - tank is half full and i can change this
229:22 - to a different number like 50. now my
229:24 - tank is completely full
229:26 - or it's empty
229:28 - now let's work on setters setters bind
229:30 - an object property to a function when
229:32 - that property is assigned a value with
229:35 - my power property i don't want anybody
229:37 - to mess with that that's why i only have
229:39 - a getter but with the gas level i would
229:41 - encourage people to change the gas level
229:43 - they would want to be able to fill their
229:45 - tank i'll create a setter set
229:48 - gas
229:50 - we'll need some argument i'll name this
229:52 - value to fill my car with gas i can take
229:55 - this dot
229:56 - gas property equals value since gas has
230:00 - a setter that means it's writable i'll
230:02 - take my car's gas property and set the
230:05 - sql to some value as if i'm filling the
230:07 - tank currently there's no additional
230:09 - logic within this gas setter a user
230:11 - could theoretically add like a kajillion
230:14 - liters of gas
230:15 - now my gas is like 2 billion percent
230:18 - full i might want to limit that i'll
230:20 - check to see if our value that we
230:22 - receive
230:23 - is greater than maybe 50. so that will
230:26 - be the max tank size if the value is
230:29 - greater than 50 then let's set value
230:31 - equal to 50 to limit it
230:34 - if we attempt to add over a billion
230:36 - liters of gas
230:37 - it will be capped at 50. or possibly
230:40 - somebody will set this to a negative
230:41 - number negative 100 liters
230:44 - else if value
230:46 - is less than zero
230:50 - value
230:51 - now equals zero
230:54 - there now our tank is empty so yeah
230:56 - everybody those are getters and setters
230:59 - they bind an object's property to a
231:00 - function when that property is accessed
231:03 - in the case of a getter or assigned a
231:05 - value in the case of setters so those
231:07 - are getters and setters everybody if you
231:10 - would like a copy of my code i'll post
231:12 - this in the comment section down below
231:13 - and well yeah those are getters and
231:16 - setters in javascript
231:19 - hey guys in this video i'm going to show
231:21 - you how we can pass objects to a
231:22 - function as an argument i have a class
231:24 - car and we have three car objects each
231:27 - car has a model year and color how could
231:29 - passing objects to a function be useful
231:32 - i need a function to display all of the
231:34 - information for each car so let's create
231:36 - a function
231:37 - function
231:38 - and we could name this display
231:41 - info if we're accepting an object as an
231:43 - argument we need a matching set of
231:45 - parameters i think we should just name
231:47 - it simply car all lowercase remember
231:49 - when you pass an object to a function
231:51 - the parameter name is kind of like a
231:53 - nickname that you're giving it
231:54 - temporarily then to invoke this function
231:57 - i will type the function name display
231:59 - info and pass a car object as an
232:01 - argument i would like to display car
232:03 - one's info within this function let's
232:06 - display this car's model year and color
232:09 - car
232:11 - model
232:15 - year
232:16 - and color
232:17 - okay let's see if it works yeah
232:20 - with this car object the model is a
232:22 - mustang the year is 20 23 the color is
232:24 - red we can pass a different object as an
232:26 - argument this time how about car two
232:28 - display info card two
232:30 - car two is a corvette the year is 2024
232:34 - and the color is blue
232:35 - then car three
232:37 - is a lambo the year is 2022 and the
232:40 - color is yellow let's create another
232:41 - function to maybe change the color of a
232:44 - car and we will have two parameters
232:46 - function
232:47 - change color
232:50 - we will accept a car object
232:53 - and a color we will take
232:55 - car
232:56 - dot color set is equal to
232:59 - whatever color we receive as an argument
233:01 - let's change the color of our lambo so i
233:04 - will invoke the change color function
233:06 - and i will pass in two arguments a car
233:09 - and a color
233:10 - car three
233:12 - and let's change the color to gold and
233:14 - then display it and the color of our
233:17 - lambo is now gold and not yellow that's
233:19 - how to pass an object to a function when
233:21 - you invoke a function just pass the name
233:24 - of an object as an argument and with the
233:26 - parameter name just find a name of
233:28 - what's descriptive of what you're
233:29 - accepting as an argument so that's how
233:31 - to pass objects as arguments if you
233:34 - would like a copy of this code i'll post
233:35 - this in the comment section down below
233:37 - if you haven't already please be sure to
233:39 - smash that like button leave a random
233:40 - comment down below and subscribe if
233:42 - you'd like to become a fellow bro
233:45 - hey guys in this video i'm going to show
233:47 - you how we can create an array of
233:49 - objects in javascript i have a class car
233:51 - and we have three car objects car one
233:53 - cartoon car three each car has a model
233:56 - year and color as well as a drive method
233:59 - let's come up with a descriptive name of
234:01 - this array
234:02 - what about cars
234:04 - then with creating arrays you use a pair
234:06 - of straight brackets what would we like
234:08 - to add to this raised elements well the
234:10 - names of our objects car 1
234:13 - card 2
234:14 - and car 3. let me show you what happens
234:16 - when we display one of these elements
234:18 - console.log type the name of the array
234:21 - followed by an element number the first
234:23 - element has an index of zero because
234:25 - computers always start with zero and we
234:27 - have our car object but if you need one
234:29 - of these properties or methods you would
234:31 - follow the array name and the index
234:33 - number dot and then a property or method
234:36 - so at index 0 of our array cards i would
234:38 - like to access the model property the
234:41 - first element of this array has a model
234:44 - property of mustang if i were to repeat
234:46 - the process for cars at index of one and
234:49 - two those respective models are a
234:51 - corvette and a lambo if you need to
234:53 - access a property or method of an object
234:55 - that's within an array you type the
234:57 - array name and index number followed by
234:59 - dot then a given property or method just
235:02 - for practice let's invoke the drive
235:04 - method of each of these cars so i would
235:06 - type the array name and index number
235:08 - follow it with a dot then a property or
235:10 - method i would like the element at index
235:13 - zero within this array to use the drive
235:15 - method let me get rid of these lines
235:17 - okay you drive the mustang let's do that
235:19 - with the other elements one and two
235:22 - you drive the mustang you drive the
235:24 - corvette you drive the lambo just as a
235:26 - challenge let's create a function that
235:28 - will loop over the elements of this
235:29 - array and invoke the drive method of
235:31 - each element we're going to have a race
235:33 - we need a function to start our race and
235:35 - have every car use its drive method so i
235:38 - will create a function let's name this
235:40 - start
235:41 - race
235:43 - say that we need to pass our array of
235:44 - objects as an argument we'll need a
235:46 - matching set of parameters i will name
235:48 - this parameter cars and i would need to
235:51 - loop through all of the elements within
235:52 - this array i can use a4 loop for that
235:55 - let's say const
235:57 - car of cars car is the current element i
236:01 - need each car to use its drive method
236:03 - then we need to invoke this function
236:05 - start race then we can pass in our array
236:08 - of objects cars
236:10 - you drive the mustang you drive the
236:11 - corvette you drive the lambo hey let's
236:13 - add another car
236:16 - car 4
236:17 - is a ferrari
236:19 - the year is 2025.
236:22 - the color is
236:24 - white so let's add this object to our
236:26 - array
236:27 - car four
236:29 - now we have four cars in our race
236:32 - you drive the ferrari so yeah that's an
236:34 - example of an array of objects it's a
236:36 - useful programming technique because you
236:38 - can keep all objects organized within an
236:40 - array so that's an array of objects if
236:42 - you would like a copy of this code i'll
236:44 - post this in the comments section down
236:45 - below if you haven't already please be
236:47 - sure you smash that like button leave
236:48 - random comment down below and subscribe
236:50 - if you'd like to become a fellow bro
236:53 - hey guys in this video i'm going to
236:55 - explain anonymous objects they are
236:57 - objects without a name a benefit is that
236:59 - using anonymous objects requires less
237:02 - syntax and there's no need for unique
237:04 - names however a downside is that we do
237:06 - not have direct access to one of these
237:08 - objects so here's an example we're going
237:11 - to create an array of cards each card
237:13 - will be an object which we'll create
237:14 - with a class
237:16 - class
237:17 - card
237:19 - i'll add a constructor
237:23 - each card will have both a value and a
237:27 - suit
237:27 - this dot value equals value
237:32 - this dot suit equals suit
237:35 - suppose i would like to make a card
237:37 - normally if we're using names not
237:39 - anonymous objects i would declare a
237:41 - unique name like let card one
237:45 - equal new then the name of the class to
237:47 - instantiate an object card for this
237:50 - object i need to pass in a value and a
237:53 - suit this card will be the ace of hearts
237:56 - a
237:57 - the second argument will be
237:59 - hearts
238:00 - i'll create a couple other cards
238:03 - card two will be named well card two
238:06 - card two will be the ace of spades
238:11 - card three
238:13 - ace of
238:15 - diamonds
238:17 - card four will be ace of clubs
238:21 - i'll just create four more cards i'll
238:23 - copy all this
238:25 - paste it
238:27 - we have cards five
238:29 - six seven eight
238:31 - these cards will be two of hearts two of
238:33 - spades two of diamonds and two of clubs
238:36 - i'll just stick with eight cards for
238:38 - this example i don't need a whole deck
238:39 - of 52 cards to explain this so we have
238:42 - eight cards i'm going to add them to an
238:44 - array
238:45 - let
238:46 - cards equal
238:49 - we'll add card one
238:51 - card two
238:52 - and the others
238:58 - that's good enough to access one of
239:00 - these properties of one of these cards i
239:02 - can either do so directly by the object
239:04 - name or by an array element
239:07 - so if i were to display console.log
239:12 - one
239:13 - dot value
239:16 - plus card one dot suit
239:19 - this would display ace of hearts
239:22 - or i could access this object indirectly
239:25 - via the array
239:27 - that would be my array cards
239:29 - at index of zero dot value plus
239:34 - cards at index of zero
239:37 - dot suit
239:38 - this would do the same thing
239:40 - with this first statement we're
239:42 - accessing this object directly by its
239:44 - name in the second statement we're
239:46 - accessing this object indirectly via an
239:49 - array index you know this does in fact
239:51 - work and all but i would write this a
239:53 - different way there's no need to create
239:54 - all of these unique names that's a lot
239:56 - of work if we were to rewrite this using
239:58 - some anonymous objects this is what we
240:00 - can do we'll get rid of everything
240:02 - before the new keyword
240:09 - we've created eight cards but we have no
240:11 - way to reference them in place of adding
240:13 - some object names directly to our array
240:15 - when we instantiate a card object we can
240:18 - actually place that within the array
240:20 - we'll add a new card
240:22 - with these properties
240:24 - and that will be the first element
240:26 - then let's add the others
240:29 - i'll speed up the footage
240:45 - this would do the same thing however we
240:48 - have a reference error card 1 is not
240:50 - defined so there is no card 1 anymore my
240:53 - interpreter doesn't know what the heck
240:55 - card 1 is that's because we never
240:57 - declared it so using anonymous objects
241:00 - we have no way to directly access these
241:02 - objects by a name because well they
241:05 - don't have one in order to access the
241:07 - properties of an object i would need to
241:09 - do so indirectly
241:11 - since these objects are within an array
241:13 - i can reference them by an index number
241:15 - cards at index 0 would be the ace of
241:18 - hearts
241:19 - cards at index of 1
241:22 - is my ace of spades
241:24 - and then 7
241:26 - is my two of clubs so you can see that
241:29 - this still works and it's a lot less
241:30 - syntax sometimes it would be impractical
241:33 - to give an object a name if you're never
241:35 - ever going to reference it directly for
241:37 - fun let's display all of the cards
241:39 - within this deck using the for each
241:41 - method
241:42 - cards dot for each
241:46 - we will take card as an argument arrow
241:49 - function
241:50 - console
241:51 - dot log
241:53 - i'll use a template literal
241:56 - let's take card
241:58 - dot value
242:01 - and also display
242:04 - card dot suit
242:07 - there here are all the cards in my deck
242:09 - displayed so yeah everybody those are
242:11 - anonymous objects they're just objects
242:14 - without a name you don't need to declare
242:16 - a name to create an object names are
242:18 - just used as a reference as storage the
242:21 - downside is that you don't have direct
242:23 - access to an anonymous object you would
242:25 - typically store them within something
242:27 - like an array and some benefits is that
242:29 - there's less syntax it reduces the size
242:32 - of your code and there's no need to
242:33 - create some unique names so those are
242:35 - anonymous objects everybody if you would
242:37 - like a copy of this code i'll post this
242:39 - in the comments section down below and
242:41 - well yeah those are anonymous objects in
242:43 - javascript
242:46 - hey guys in this video i'm going to
242:47 - explain error handling errors are
242:50 - objects with a description of something
242:52 - that went wrong encountering an error
242:54 - will halt the execution of your program
242:56 - we would like some way to gracefully
242:58 - handle these errors without interrupting
243:00 - our program errors can happen for one of
243:02 - a few reasons a few examples would be
243:04 - you can't open a file you lose
243:06 - connection to a device a user types in
243:08 - some incorrect user input or a type
243:11 - error one example of type error is that
243:13 - we mistype something instead of saying
243:15 - console.log maybe we misspell log as leg
243:19 - console.leg well we encountered an
243:21 - uncaught type error console.lag is not a
243:24 - function if an error happens while your
243:26 - program is running it can cause your
243:28 - program to stop we would like to
243:30 - gracefully handle these errors and one
243:32 - way to do that is to surround any
243:33 - dangerous code with a try block code
243:36 - that could cause an error is considered
243:37 - dangerous accepting user input is almost
243:40 - always dangerous because you don't know
243:41 - what they're going to type in so let's
243:42 - create a try block and add some
243:44 - dangerous code now if you have a try
243:46 - block you need to follow this with a
243:48 - catch block
243:49 - and there's one argument an error if
243:51 - something goes wrong we will do
243:53 - something else
243:54 - in fact i will display whatever our
243:56 - error is console.log
243:59 - error again if i type console.leg
244:02 - while this won't interrupt my program it
244:05 - will simply just display the error type
244:07 - air console.lag is not a function so we
244:10 - don't get that big nasty red error
244:12 - message sometimes in your program
244:14 - something will go wrong but it won't
244:15 - generate an error here's an example
244:17 - let's accept some user input we'll ask a
244:19 - user to type in a number let's declare
244:21 - variable x x equals window dot prompt
244:28 - enter a number when we accept user input
244:31 - it's of a string data type we'll need to
244:33 - convert that to a number
244:35 - okay at the end let's display a message
244:38 - console.log
244:39 - i'll use a template literal
244:43 - x is a number
244:46 - okay let's run this enter a number well
244:48 - pizza is my favorite number i'll enter
244:50 - that in so even though this didn't cause
244:53 - any errors it's definitely going to
244:55 - cause problems for me in my program
244:57 - something is going to go wrong using
244:59 - this throw keyword i can execute a
245:01 - user-defined error but we'll need to
245:03 - know when to use it i'll add an if
245:05 - statement if and the condition is is
245:08 - not a number
245:11 - pass in x if this is true then we will
245:14 - throw an error or an argument to be used
245:18 - as an error so we're just displaying a
245:20 - message in this example
245:21 - that wasn't a number
245:25 - so now when i run this again i'll enter
245:27 - pizza in
245:29 - that wasn't a number what if the user
245:31 - doesn't type in anything they just press
245:32 - the ok button
245:34 - 0 isn't a number so that means they
245:36 - didn't type in anything we can throw a
245:38 - user defined error we'll need another if
245:41 - statement
245:42 - if
245:42 - x is equal to an empty string
245:45 - then throw
245:48 - that was
245:50 - empty
245:51 - let's try this again i'll just press ok
245:54 - that was empty so an error is an object
245:57 - with a description of something that
245:58 - went wrong there may be times when
246:00 - something will go wrong in your program
246:02 - but it doesn't raise an error like
246:04 - somebody types in something that you
246:05 - didn't anticipate you can use this throw
246:07 - keyword to execute a user defined error
246:10 - now there's one more statement that we
246:12 - can add to this you can add a finally
246:14 - block finally we'll always execute
246:17 - doesn't matter if your code is
246:18 - successful or unsuccessful if there's an
246:20 - error here's one use of the finally
246:22 - block let's say we open a file after we
246:25 - open the file and are done with it we
246:26 - would like to close it but if we open
246:28 - the file and cause an error we would
246:30 - still like to close it so the finally
246:32 - block is good for any sort of cleanup
246:34 - but we're not going to be working on
246:35 - opening files let's just display a
246:37 - message
246:38 - console.log this always executes
246:44 - let's run this again i'll enter in a
246:45 - number 123. 123 is a number this always
246:49 - executes so even if our code is
246:50 - successful we will still execute the
246:52 - finally block let's enter in something
246:54 - that's not a number like the word pizza
246:57 - that wasn't a number this always
246:58 - executes so yeah everybody those are a
247:01 - few ways to handle errors and error is
247:03 - an object with a description of
247:05 - something that went wrong sometimes
247:07 - things will go wrong and they don't
247:09 - cause errors if that's the case you
247:11 - would want to use this throw keyword and
247:13 - it will execute a user defined error or
247:16 - a message or value that can be used in
247:18 - an error so that's some basic error
247:20 - handling if you would like a copy of
247:21 - this code i'll post this to the comment
247:23 - section down below and well yeah that's
247:25 - error handling in javascript
247:28 - hey yeah everybody in this video i'm
247:30 - going to explain the set timeout method
247:32 - it invokes a function after a number of
247:35 - milliseconds it's an asynchronous
247:38 - function meaning that it doesn't pause
247:40 - the execution of your program for my
247:42 - example we're going to be annoying we're
247:44 - going to spam some alert messages after
247:46 - a given amount of milliseconds let's
247:48 - create a few functions
247:51 - function
247:52 - will display three messages this will be
247:54 - the first message
247:55 - first
247:56 - message i'll create an alert
247:59 - alert
248:00 - i'll use a template literal
248:04 - buy this course for
248:07 - five hundred dollars okay let's create
248:10 - two more messages
248:12 - second message
248:14 - third message for the second message
248:17 - let's say that this is not a scam the
248:21 - third message will be
248:23 - do it
248:24 - i would like to invoke these functions
248:26 - after a given amount of time i will use
248:29 - the
248:30 - set timeout
248:33 - method
248:34 - so we pass in a callback a function
248:37 - expression
248:38 - or an arrow function expression just to
248:41 - keep things simple i'm going to pass a
248:43 - callback let's begin with the first
248:45 - message that's the first argument the
248:47 - callback is the first argument
248:49 - and then a given amount of milliseconds
248:52 - we would like this function to execute
248:54 - after three thousand milliseconds three
248:57 - seconds we will alert the user to buy
249:00 - this course for five hundred dollars it
249:02 - is possible to have multiple set timeout
249:05 - methods executing concurrently let's
249:07 - invoke the set timeout method two
249:09 - additional times
249:11 - after about
249:12 - maybe six seconds we will invoke the
249:16 - second message function
249:17 - then we will invoke the third message
249:20 - function after nine seconds
249:22 - okay let's try
249:27 - buy this course for five hundred dollars
249:31 - this is not a scam
249:34 - do it if at any time you ever need to
249:36 - clear or cancel your set timeout method
249:39 - you can use the clear timeout method
249:42 - but i'm going to link this to a button
249:44 - let's create a button within our html
249:46 - document
249:48 - button
249:50 - id of my button
249:53 - and the text will be by if we want to
249:56 - buy that fictional course that we're
249:58 - selling
249:59 - i need to select this button by its id
250:03 - document
250:04 - dot
250:05 - get
250:06 - element by id
250:08 - the id was my button set the on click
250:13 - attribute equal to a function
250:17 - i will invoke the clear
250:19 - timeout method
250:20 - but we need to pass in the id of a timer
250:23 - when you invoke the set timeout method
250:25 - it will return an id so let's store that
250:28 - within a variable
250:30 - let
250:31 - timer 1
250:33 - equal set timeout
250:35 - then let's create timer two
250:38 - and timer three
250:40 - so we will pass these variables as
250:43 - arguments to the clear timeout method
250:47 - so copy and paste timers one two and
250:50 - three let's alert the user so if they
250:52 - click on this buy button they buy our
250:55 - fictional course
250:57 - thanks for buying
251:01 - buy this course for five hundred dollars
251:03 - i'll click buy
251:04 - thanks for buying that will cancel and
251:06 - clear the set timeout methods
251:09 - if you need to pass arguments to a
251:10 - function you can list those after the
251:12 - milliseconds argument let's create
251:14 - variable item
251:16 - we would like to sell
251:18 - how about a crypto currency this time
251:23 - we will list a price let
251:26 - price equals 420 69. so i'm going to
251:30 - pass these two variables as arguments
251:32 - item
251:33 - and price when i invoke the first
251:35 - message function but we need parameters
251:37 - item and price
251:40 - let's actually use these buy
251:42 - this
251:44 - item
251:45 - for
251:48 - price
251:48 - buy this cryptocurrency for 4 20 69. so
251:52 - yeah everybody that is the set timeout
251:54 - method it invokes a function after a
251:57 - number of milliseconds it's an
251:58 - asynchronous function it doesn't pause
252:00 - the execution of the rest of your
252:02 - program if you need to perform a task
252:04 - after a given amount of time you can
252:06 - invoke the set timeout method hey if you
252:09 - found this video helpful please be sure
252:10 - to smash that like button leave a random
252:12 - comment down below and subscribe if
252:14 - you'd like to become a fellow bro
252:17 - hey guys in this video i'm going to
252:19 - explain the set interval method the set
252:22 - interval method much like the set
252:24 - timeout method it invokes a function
252:26 - repeatedly after a number of
252:28 - milliseconds it's an asynchronous
252:30 - function it doesn't pause the execution
252:32 - of your program let's create a count up
252:34 - timer i will declare a counter let
252:37 - count set the sql to zero and we will
252:39 - accept some user input let max equals
252:43 - window
252:44 - dot prompt
252:47 - count up to what number i'll need to
252:51 - convert the user input to a number
252:53 - because it's normally of the string data
252:55 - type when we accept user input now let's
252:57 - invoke the set interval method
252:59 - set
253:00 - interval
253:02 - we can pass in a callback a function
253:04 - expression an arrow function expression
253:06 - let's just pass a callback to keep
253:08 - things simple count
253:10 - up after how many milliseconds would we
253:12 - like to repeat this function maybe one
253:14 - thousand for one second let's declare
253:16 - this function
253:18 - function
253:19 - count up
253:21 - i will increment count by one this will
253:23 - be our counter and we will display
253:25 - whatever count is
253:26 - console.log
253:29 - count let's stop if
253:32 - count
253:33 - is greater than or equal to
253:36 - max the number that we enter in the user
253:39 - input to stop the set interval method we
253:42 - can use the clear interval method
253:46 - however as an argument we need to pass
253:47 - in the id of the set interval method so
253:50 - we can actually assign that
253:52 - constant
253:53 - let's name this my timer equals set
253:56 - interval my timer is storing the id of
253:59 - the set interval method i'll pass that
254:01 - as an argument to the clear interval
254:03 - method and when i run this we should
254:05 - count up to a number that we set count
254:08 - up to what let's count up to ten
254:10 - press okay
254:12 - okay we begin at one two three four
254:17 - and we should stop at ten
254:21 - yeah if you ever need to pass arguments
254:23 - to a function a callback maybe a lot of
254:26 - these variables are within a function so
254:28 - if i need to pass max i can add that as
254:30 - an argument then make sure to have a
254:32 - matching set of parameters so that is
254:34 - the set interval method everybody it
254:36 - invokes a function repeatedly after a
254:39 - number of milliseconds if this video
254:41 - helped you out please be sure to smash
254:43 - that like button leave a random comment
254:44 - down below and subscribe if you'd like
254:46 - to become a fellow bro
254:49 - hey guys in this video i'm gonna discuss
254:51 - date objects date objects are used to
254:54 - work with dates and times to create a
254:56 - date object we just call the date
254:58 - constructor let
254:59 - date equal new date
255:02 - and then we can display the date
255:04 - console dialogue
255:06 - date and here's the current date and
255:08 - time including time zone although it's
255:10 - not that readable we can actually change
255:12 - that i will set the date equal to date
255:16 - dot
255:17 - 2
255:18 - locale
255:19 - string method
255:20 - and that is a lot more readable hey for
255:22 - fun within our dom let's create a label
255:24 - and update the label with the current
255:26 - date and time so within my html file i'm
255:29 - going to create a new
255:31 - close it
255:34 - i'll give this a unique id my label is
255:36 - fine
255:38 - and i will change the inner html of my
255:40 - label
255:42 - document dot
255:44 - get
255:45 - element by
255:47 - id
255:48 - pass in a unique id my label change the
255:52 - inner html equal to
255:55 - date
255:57 - yeah it's pretty cool right now with the
255:59 - day constructor if you don't pass in any
256:01 - arguments date will equal the current
256:03 - date and time however if we pass zero as
256:05 - an argument zero is a reference point
256:07 - for us this is known as the epic it will
256:10 - be some date around the year 1969.
256:12 - imagine this is the date where time
256:14 - began not really but just imagine it
256:17 - this is a reference point for us within
256:19 - the day constructor we can pass an
256:21 - amount of milliseconds as an argument so
256:23 - if i pass in i don't know how many
256:25 - milliseconds that is this will create a
256:27 - new date 10 million milliseconds after
256:31 - this date the starting point so 10
256:33 - million milliseconds after our epic is
256:36 - the same day but 8 o'clock at night so
256:39 - i'm just gonna pass in some random
256:40 - numbers and see what dates we get
256:43 - this number equates to the date
256:45 - september 8th 2001
256:47 - 8pm and let's see what this is
256:50 - okay now we're in the year 33 000. so
256:52 - you can pass an amount of milliseconds
256:54 - to the date constructor but zero is a
256:56 - reference point there are additional
256:58 - arguments you can pass too the first
257:00 - argument is a year let's pick the year
257:02 - 2023 the next argument is the month zero
257:05 - corresponds with january february
257:07 - corresponds with one then you just
257:09 - follow that pattern i'll pick uh let's
257:12 - say january so zero the next arguments
257:14 - for the day
257:15 - the hour
257:17 - minutes
257:18 - seconds
257:19 - and even milliseconds so after passing
257:22 - how many arguments do we have here i
257:24 - think seven
257:25 - the current date and time is january 1st
257:29 - 2023 about two in the morning if it's
257:31 - easier for you you can even pass in a
257:33 - string representation of a date and time
257:36 - how about january
257:38 - 1st
257:40 - 2023
257:44 - midnight
257:46 - that's another option available to you
257:47 - too you can even get properties from a
257:50 - current date if you need the year we
257:52 - could assign that to a variable let year
257:54 - equal
257:55 - date dot get
257:57 - full year
257:59 - and let's display this
258:02 - so the current year is 2022
258:05 - day of the month
258:06 - day of month
258:08 - the corresponding method is get
258:11 - date
258:13 - let's display day of month
258:15 - and it is the seventh currently
258:21 - day of week
258:23 - get
258:24 - day
258:27 - sunday is zero monday is one tuesday is
258:30 - two you just follow that pattern since
258:32 - day of week is one that means it's
258:34 - monday we have access to the month
258:37 - get month
258:40 - the month is currently one january is
258:42 - zero february is one march is two you
258:45 - follow that pattern we have access to
258:47 - hours
258:49 - get
258:51 - hours
258:52 - the current hour is 10
258:54 - this is in military time so the possible
258:57 - hours are between 0 and 23
259:00 - minutes
259:03 - get minutes
259:05 - so the current time for me is six
259:07 - minutes after 10
259:08 - seconds
259:10 - get seconds
259:11 - every time i refresh this page you can
259:13 - see that the seconds is going up and
259:15 - even milliseconds let's name this
259:18 - variable ms for short
259:20 - get
259:21 - milliseconds
259:24 - and this is pretty much updating every
259:26 - time i refresh the page so if you need
259:28 - one of these properties of a date you
259:30 - can use an associated method you can
259:32 - also set these properties too i would
259:34 - like to set the year of my date date
259:37 - set full year i'll pass in the year 2024
259:42 - and let's display our date
259:44 - so for me i'm recording this on february
259:46 - 7th but the year is changed to 2024
259:50 - there's also set month
259:52 - date dot set month i'll change the month
259:55 - to december so that would be 11 december
259:58 - 7th 2024 you can set the day of the
260:01 - month
260:02 - date dot set date i'll change this to 31
260:07 - december 31st 2024 we have set hours
260:11 - date dot set hours let's move this to 12
260:15 - that would be 12 p.m and 23 would be 11
260:18 - p.m same thing applies four minutes set
260:21 - minutes what about one seconds set
260:24 - seconds
260:25 - i don't know 30 and even milliseconds
260:27 - although we're not displaying it
260:28 - currently date dot set milliseconds and
260:30 - pass in some amount of milliseconds so
260:32 - those are various set methods you can
260:35 - set a property of a date we can even
260:37 - create our own custom functions to
260:38 - format a date and time so i'm going to
260:40 - get rid of this line let's create a
260:42 - function to format the date first
260:45 - function
260:46 - format date
260:48 - we will accept a date as an argument
260:51 - let's create a few variables for the
260:53 - year month and day
260:55 - let year equal and we can get the year
260:59 - date dot get
261:01 - full year
261:03 - let month
261:04 - equal date dot get month
261:08 - and let day
261:11 - equal date
261:13 - dot
261:13 - get
261:14 - date so let's return a string
261:17 - representation of the year month and day
261:20 - return i'll use a template literal so if
261:23 - you would like the month first like
261:24 - what's displayed in my web browser we
261:26 - can put the month first
261:28 - then the day next
261:33 - end of the year
261:35 - when i update my label i will invoke the
261:37 - format date function that i created and
261:39 - pass in our date
261:41 - there we go remember though that january
261:44 - is zero and february is one but
261:46 - whoever's using this program probably
261:48 - won't know that let's add one to our
261:50 - month
261:51 - there now it's february and for some
261:53 - additional practice let's create a
261:55 - format time function
261:57 - function
261:58 - format time
262:00 - we have one parameter a date
262:02 - let hours equal date dot get hours
262:07 - let minutes
262:09 - equal date dot get minutes
262:13 - let seconds
262:15 - equal date dot get seconds
262:19 - let's return a string representation of
262:21 - the hours minutes and seconds i'll use a
262:24 - template literal
262:27 - hours
262:32 - minutes
262:36 - seconds
262:38 - let's invoke the format time function
262:40 - that we created
262:44 - yeah and that's my current time but it's
262:46 - currently in military time let's change
262:48 - it to standard let's add am or pm let i
262:52 - don't know what to name this variable am
262:54 - or
262:55 - pm i guess
262:57 - equals and i'll use the ternary operator
263:00 - our condition is we'll check if hours
263:03 - is greater than or equal to 12
263:06 - question mark if that's true we will
263:08 - return pm if it's false we'll return am
263:13 - and i will display
263:15 - my variable am
263:17 - or pm
263:19 - and it is currently am the hours are
263:22 - still currently in military time so to
263:24 - convert that to standard this is one way
263:26 - in which we can do that let's reassign
263:28 - hours equal to we'll write hours
263:32 - modulus 12. modulus finds the remainder
263:35 - of any division then i'll use the
263:37 - bitwise or operator
263:40 - 12. we're taking hours modulus 12. if
263:42 - ours is currently 12 this expression
263:45 - would evaluate to be zero then using the
263:47 - orbit wise operator we would instead use
263:50 - 12. so this line will convert your hours
263:52 - from military to standard so yeah
263:55 - everybody that's a few things we can do
263:57 - with date objects they're used to work
263:59 - with dates and times if you would like a
264:01 - copy of this code i'll post all of this
264:03 - in the comment section down below and
264:05 - well yeah those are date objects in
264:08 - javascript hey everybody in this video
264:11 - we're going to create a practice program
264:13 - to create a clock that will update every
264:15 - second let's begin by going to our html
264:17 - file and i will add a label we'll use a
264:20 - pair of label tags and i will set the id
264:23 - equal to
264:25 - my
264:25 - label
264:26 - save head back to your html document
264:29 - i'll assign that variable to a label
264:30 - constant my label
264:33 - equals
264:34 - document dot get element by id
264:40 - the id was my label
264:42 - and we'll create an update function
264:45 - function
264:47 - update
264:48 - and we will get the current date and
264:50 - time
264:51 - let
264:52 - date equal new
264:54 - date
264:55 - let's update this label just to test it
264:58 - my label dot inner html equals date
265:03 - and then we should invoke this function
265:05 - update
265:07 - so that's the current date and time but
265:09 - i would like to format this within our
265:11 - update function let's create a nested
265:13 - function to format the time
265:16 - function
265:17 - format time
265:20 - let's get the hours let hours equal date
265:24 - dot get hours
265:27 - the minutes
265:30 - let minutes date dot get minutes
265:35 - and seconds
265:38 - seconds date dot get seconds
265:41 - let's return a template literal
265:47 - hours
265:51 - minutes
265:55 - seconds
265:57 - make sure you spell return right let's
265:58 - invoke the format time function
266:01 - and we should probably pass a date
266:03 - so set up a date as an argument and a
266:05 - parameter
266:07 - this time is in military time so let's
266:09 - set this to standard we'll need am or pm
266:12 - let am or
266:15 - pm
266:16 - equal i'll use a ternary operator
266:20 - we'll check if hours is greater than or
266:22 - equal to 12 question mark if that's true
266:24 - return pm
266:26 - otherwise return am
266:29 - let's add our variable am or pm
266:33 - my current time is 12 22 pm the hours is
266:36 - still in military time although you
266:38 - can't tell from my example to convert
266:40 - that between 1 and 12 i can set hours
266:43 - equal to
266:45 - hours modulus 12
266:48 - bitwise operator 12.
266:51 - modulus gives you the remainder of any
266:52 - division if hours is 12
266:55 - then the remainder of 12 divided by 12
266:57 - is 0
266:58 - then we would instead use 12 in place of
267:01 - 0 using the or bitwise operator since
267:04 - i'm filming this at 12 pm there's no
267:06 - change i would like this clock to update
267:08 - every second after we invoke the update
267:10 - function let's invoke the set
267:13 - interval method of our window object the
267:16 - first argument is a callback
267:18 - we'll pass our update function as a
267:20 - callback and then a delay every 1000
267:23 - milliseconds i would like to update our
267:25 - clock
267:26 - there it's updating currently
267:29 - now if one of these variables is a
267:31 - single digit we don't have any leading
267:33 - zeros
267:34 - i'd like to change that if we have a
267:35 - single digit i would like a leading zero
267:37 - before the actual time unit so let's
267:40 - create another nested function
267:43 - function
267:44 - let's call this format
267:47 - zeros
267:50 - we'll accept a time let's set our time
267:53 - parameter equal to
267:55 - time
267:56 - dot to string this will convert a number
267:59 - to a string then we will use some string
268:02 - concatenation
268:04 - and return
268:05 - we'll use the ternary operator let's
268:08 - check the times length property
268:11 - if it's less than two that means it's a
268:13 - single digit
268:15 - if our time length is a single digit
268:17 - then we will precede
268:19 - our time with zero if it's false we'll
268:23 - just return time back so then we just
268:25 - need to invoke and reassign hours
268:27 - minutes and seconds we'll invoke our
268:29 - format zeros function
268:32 - pass in our hours
268:35 - and do the same thing with minutes and
268:37 - seconds
268:41 - and we now have some leading zeros
268:43 - so yeah i thought that would be a fun
268:45 - practice project we have a clock that
268:47 - will update every second if you would
268:49 - like a copy of this code i'll post this
268:51 - to the comment section down below and
268:53 - well yeah that's a simple clock program
268:55 - in javascript
268:58 - hey guys for this topic i will explain
269:00 - the differences between synchronous and
269:02 - asynchronous code in a span of a few
269:04 - minutes synchronous code isn't an
269:06 - ordered sequence they are step-by-step
269:08 - linear instructions you start some
269:10 - process now and you finish now the rest
269:12 - of your program has to wait for a
269:13 - synchronous process just a quick
269:15 - demonstration let's display something
269:17 - start
269:20 - this step is
269:23 - synchronous
269:25 - and then
269:26 - end
269:27 - so these are step-by-step instructions
269:30 - in order to move on to the second step
269:31 - we first need to complete the first step
269:33 - no matter how long the statement will
269:35 - take our next step has to wait for the
269:36 - first step to finish so our results are
269:39 - start this step is synchronous and end
269:41 - now asynchronous code can be out of
269:43 - sequence these may be tasks such as
269:45 - accessing a database fetching a file
269:48 - basically tasks that take time they'll
269:50 - take an indeterminate amount of time you
269:52 - don't want the rest of your program to
269:54 - wait around for some process to finish
269:55 - you start now finish sometime later and
269:58 - the rest of your program can carry on
269:59 - with whatever it was doing an example of
270:01 - some asynchronous code would be the set
270:04 - timeout method so i'm going to replace
270:06 - the second line with set
270:08 - time out just to keep things simple i'll
270:11 - pass in an arrow function expression and
270:14 - we will display a message
270:16 - console.log
270:19 - this is
270:20 - asynchronous
270:23 - and we'll wait maybe five seconds
270:26 - okay we have start and end and that
270:29 - asynchronous code should kick in right
270:30 - about now so you can see that this step
270:33 - is out of order it's asynchronous it's
270:36 - out of sequence it's running in the
270:37 - background step three in my program
270:39 - doesn't need to wait for step two to
270:41 - finish step two will start now finish
270:44 - sometime later when it's ready that's
270:45 - the main differences between synchronous
270:47 - and asynchronous code synchronous code
270:50 - has to be in order it's a set of linear
270:51 - instructions you start now and finish
270:54 - now such as a console.log statement
270:57 - asynchronous code is out of sequence it
270:59 - takes an indeterminate amount of time
271:01 - like accessing a database fetching a
271:03 - file etc start now finish sometime later
271:06 - and it doesn't pause your program it
271:08 - will continue on with the rest of the
271:10 - instructions so that is a quick
271:12 - description of the differences between
271:13 - synchronous and asynchronous code in
271:15 - javascript
271:18 - hey guys here's a super quick video on
271:21 - the time method of the console object i
271:24 - think you would find this fairly useful
271:26 - it's a great utility method its job is
271:28 - to start a timer that you can use to
271:31 - track how long an operation takes
271:33 - and you can give each timer a unique
271:35 - name to track how much time has elapsed
271:37 - for a given operation i can use
271:40 - console.time
271:42 - to give this timer a unique name i can
271:44 - pass that as a string argument
271:47 - let's see how long it takes for a user
271:49 - to click a button
271:50 - i'll name this timer response
271:54 - time
271:55 - so this is the start
271:58 - to end this timer
271:59 - i can use time end at the end of my
272:02 - program i will invoke console.time
272:06 - end
272:07 - and pass the same name as an argument
272:10 - response time
272:12 - so this is the end if i run this
272:14 - currently the time end method will print
272:17 - the elapsed time in my console this
272:20 - program took
272:21 - .0019 milliseconds to complete
272:24 - let's actually do something
272:26 - i'll create an alert
272:28 - alert
272:31 - click the ok button
272:35 - and let's see how much time elapses
272:38 - okay click the ok button i will press ok
272:42 - and the response time for me to click on
272:43 - that button was 4 86 milliseconds so
272:47 - about 4 seconds
272:49 - if you ever need to track how long an
272:51 - operation takes you can use the time
272:53 - method of the console object however if
272:55 - you have an asynchronous process
272:57 - well the time end method isn't going to
272:59 - wait around for it
273:01 - so what if we have set timeout set
273:04 - time out
273:06 - we'll just display a message we need a
273:08 - callback i'll simply just pass in an
273:10 - arrow function
273:12 - console.log
273:15 - hello
273:17 - i would like this to execute after three
273:19 - thousand milliseconds so three seconds
273:21 - so when i run this
273:23 - we have already completed our program
273:25 - and then the set timeout function kicks
273:27 - in
273:28 - so the time method and the time end
273:30 - method will track how long a synchronous
273:33 - operation takes so yeah i thought that
273:35 - would be a very useful utility method
273:37 - that you might be interested in if you
273:39 - would like a copy of this code i'll post
273:41 - this in the comment section down below
273:42 - and well yeah that's the time method of
273:44 - the console object
273:48 - hey everybody we have a big topic today
273:51 - that is promises promises are an object
273:54 - that encapsulate the result of an
273:56 - asynchronous operation
273:58 - a benefit is that they let asynchronous
274:01 - methods return values like they were
274:03 - synchronous it's a promise to return
274:06 - something in the future for this topic
274:08 - let's pretend that we're fetching a file
274:10 - i haven't talked about the fetch api yet
274:12 - but we'll do so in the future for the
274:14 - time being we'll just pretend that we're
274:15 - loading a file
274:16 - let file loaded this will be a boolean
274:20 - value true or false i'll set this to
274:22 - true loading a file is an asynchronous
274:25 - process we could encapsulate this
274:27 - asynchronous process with a promise when
274:31 - this process is finished the promise can
274:33 - return a value or catch any exceptions
274:36 - if there's any problems like we can't
274:38 - find the file so this is how to create a
274:39 - promise
274:42 - let's declare one const
274:44 - promise
274:46 - equals new
274:48 - promise
274:51 - within the promise we can list a
274:52 - callback a function expression or an
274:55 - arrow function expression i'll use an
274:57 - arrow function expression
275:01 - there's two arguments
275:03 - resolve
275:04 - and reject
275:07 - if our asynchronous process is
275:09 - successful we will invoke this resolve
275:11 - callback if not we'll invoke reject
275:15 - so what would we like to do within this
275:17 - promise we can place any asynchronous
275:19 - code within this promise
275:22 - then let's check to see if our file is
275:24 - loaded if
275:26 - file loaded
275:28 - we will invoke this callback of resolve
275:32 - if you have any arguments for this
275:34 - callback you can place those here i'll
275:36 - add some text
275:38 - file loaded
275:40 - else
275:41 - we will invoke reject
275:44 - place any arguments within this callback
275:47 - file not loaded
275:51 - that's step one of our promise
275:53 - promises have a state
275:55 - they're pending then they're fulfilled
275:57 - or rejected and the result is what can
276:01 - be returned
276:02 - there's two parts to a promise the
276:04 - producing code which is this portion and
276:07 - the consuming code if this promise is
276:10 - resolved what do we want to do we'll
276:12 - handle that with the consuming code
276:15 - we will take our promise
276:17 - follow the promise with invoking the
276:20 - then method
276:21 - if our promise is resolved then we can
276:23 - perform some function
276:25 - this can be a callback to a function
276:27 - a function expression
276:30 - or an arrow function expression
276:33 - i'll stick with an arrow function
276:34 - expression
276:35 - if we have any arguments we can list
276:37 - them here we're returning one value just
276:39 - some text
276:41 - value
276:42 - arrow
276:43 - then let's do something
276:46 - console.log
276:48 - whatever my value is
276:51 - okay let's try this
276:53 - after creating this promise my file
276:55 - loads that's set to true
276:57 - file loaded
276:59 - what would happen if we couldn't locate
277:00 - a file this value is false
277:05 - well we have an uncaught exception
277:07 - because we invoked this reject callback
277:10 - to catch any exceptions we can follow
277:12 - then with
277:13 - catch
277:15 - and i'll place this on a new line
277:17 - just so it's easier to read
277:19 - we have one argument so let's set up one
277:22 - parameter this is the argument we will
277:24 - name this parameter error
277:27 - arrow what would we like to do
277:30 - console.log
277:31 - whatever my error is
277:34 - when i run this again
277:36 - we have caught this exception
277:38 - file not loaded so that's kind of the
277:40 - basics of a promise
277:42 - it's a promise to return something in
277:44 - the future the state is pending then
277:46 - it's either fulfilled or rejected now
277:49 - you don't necessarily need to reject a
277:51 - promise
277:52 - this would still work too
277:56 - it doesn't do anything
277:57 - here's another example
277:59 - let's create a separate promise we'll
278:01 - wait for five seconds then display a
278:03 - message
278:05 - const
278:07 - promise
278:09 - equals
278:11 - new
278:12 - promise
278:14 - i'll write an arrow function expression
278:16 - this time we will only resolve
278:19 - arrow
278:21 - and then maybe some curly braces okay
278:24 - what are we gonna do within this promise
278:27 - let's set timeout for five seconds
278:31 - set timeout
278:34 - resolve
278:35 - after five
278:36 - seconds that's 5000 milliseconds
278:40 - then i will take
278:41 - the name of my promise
278:43 - follow it with then
278:45 - then pass in a function
278:47 - so you don't necessarily need to return
278:49 - a value when resolving
278:51 - so this function will have no arguments
278:54 - arrow
278:56 - will display message console.log
279:00 - thanks for waiting
279:03 - after five seconds this should display
279:04 - my message
279:11 - thanks for waiting
279:13 - what if you would like to pass an
279:14 - argument to a promise let's rename this
279:16 - promise object as something else
279:18 - something that's more descriptive
279:20 - like wait
279:23 - wait is now a promise
279:25 - when we create this promise we can pass
279:27 - an argument how about an amount of
279:29 - milliseconds let's wait for three
279:31 - seconds that's three thousand
279:33 - milliseconds
279:34 - i'll precede this promise with an arrow
279:36 - function
279:38 - and list any arguments before the arrow
279:41 - maybe time
279:43 - time will be this value whatever we're
279:45 - passing in
279:46 - we'll wait for some amount of time
279:49 - 3000 milliseconds
279:51 - let's run this again
279:54 - one two three thanks for waiting so yeah
279:58 - those are promises
280:00 - they're objects that encapsulate the
280:02 - result of an asynchronous operation
280:05 - they let asynchronous methods return
280:07 - values as if they were synchronous it's
280:10 - a promise to return something in the
280:11 - future so those are promises if you
280:14 - would like a copy of the code we worked
280:15 - on today i'll post that in the comments
280:17 - section down below and well yeah that's
280:19 - an introduction to promises in
280:21 - javascript
280:24 - hey guys in this topic i'm going to
280:26 - explain the async keyword it makes a
280:29 - function return a promise in this
280:31 - example i have a promise there's a
280:33 - callback with two arguments a callback
280:35 - for resolve and a callback for reject
280:38 - all we're doing is we're checking to see
280:40 - if a file loaded not really but we're
280:42 - pretending we are because i haven't
280:43 - taught about loading files yet so we
280:45 - have a boolean variable file loaded it's
280:47 - set to true if our file didn't load we
280:49 - can set this to false if file loaded we
280:51 - will invoke this callback of resolve if
280:54 - not we'll invoke this other callback of
280:56 - reject so currently my file loaded if i
280:58 - switch this to false my file is not
281:00 - loaded an easier way of writing this is
281:02 - that we can stick this code within an
281:04 - async function and it will return a
281:06 - promise so let's create an async
281:08 - function use the keyword async
281:11 - function and what's a descriptive name
281:13 - of this function how about load
281:15 - file
281:16 - that's an asynchronous process i'll copy
281:19 - this code
281:20 - cut it
281:21 - i'll delete this promise
281:23 - and paste my code within this async
281:25 - function there's no need to use this
281:27 - resolve or reject callback if my
281:29 - asynchronous process is successful i
281:32 - will simply return a value
281:35 - return file loaded this will be an
281:37 - argument if my asynchronous process is
281:40 - not successful i could instead use the
281:42 - throw keyword
281:45 - this will raise an error and we can
281:47 - catch it so this is my error message
281:49 - right here now to invoke this function
281:51 - in place of a promise i will invoke the
281:54 - function that contains my asynchronous
281:56 - process
281:57 - load file so let's check to see if this
281:59 - works file loaded is set to true file
282:02 - loaded
282:03 - i'll set this to false file not loaded
282:05 - when using the then and catch methods in
282:08 - place of adding these methods after a
282:10 - promise object we would invoke a
282:12 - function and a promise is going to be
282:15 - returned back to this place in which you
282:18 - invoke the function another way of
282:19 - writing this that's a little more clear
282:21 - but it's a lot more syntax is if we were
282:23 - not using the async function we would
282:25 - return a promise i'll eliminate this
282:27 - async keyword just for a demonstration
282:29 - so we're returning a promise object
282:32 - promise dot resolve
282:35 - and i will pass this text as an argument
282:38 - else
282:39 - return
282:42 - promise dot reject
282:45 - this would do the same thing but it's
282:46 - more syntax file loaded
282:50 - file not loaded when we invoke this
282:52 - function we're returning a promise back
282:54 - to the spot in which we invoked this
282:56 - function but i like using the sync
282:58 - keyword it's a lot less text so yeah
283:00 - that's the async keyword everybody it
283:02 - makes a function return a promise and it
283:05 - pairs very well with the await keyword
283:07 - which we'll discuss in the next topic in
283:09 - about three two one go
283:13 - hey guys in this topic i'm going to
283:15 - explain the await keyword it makes an
283:18 - async function wait for a promise in
283:21 - this example i have an async function
283:24 - that is named load file
283:26 - we're pretending to load a file that
283:28 - would be an asynchronous process
283:30 - if our file loads we will return a
283:32 - promise with this text as an argument
283:35 - file loaded
283:36 - if for some reason we can't load our
283:38 - file we will throw an error and catch it
283:41 - and display this error message another
283:43 - way of writing this without using these
283:45 - two lines of code invoking an async
283:47 - function followed with then and catch is
283:50 - that we could use the await keyword so
283:52 - we will type await then invoke an async
283:55 - function
283:56 - await load file
283:58 - we're waiting for a promise awaiting an
284:01 - async function in this example will
284:03 - return some text file loaded or file not
284:06 - loaded so i'm going to store that text
284:08 - within a temporary variable let's say
284:11 - let
284:12 - message
284:13 - equal await load file then i'll simply
284:16 - display that message console.log
284:20 - message and i can eliminate these two
284:22 - lines
284:24 - so after running this
284:25 - we have an uncaught syntax error a
284:28 - weight is only valid in async functions
284:31 - so in order to use this await keyword we
284:34 - need to place it within another async
284:36 - function so maybe we're beginning the
284:38 - process of loading a file usually that
284:41 - takes more than one asynchronous process
284:43 - you have to first locate the file open
284:45 - it then close it so i'm going to declare
284:47 - an async function
284:49 - async function
284:51 - start
284:52 - process
284:54 - and i will stick these two lines within
284:56 - that function you can only use the await
284:59 - keyword within an async function
285:01 - and then we need to invoke this function
285:03 - to begin the process
285:05 - start process
285:07 - file loaded there was no need to invoke
285:09 - this async function followed with
285:12 - then and catch we can eliminate that
285:15 - all you need is a weight but it does
285:17 - have to be within an async function
285:19 - now check this out what if our file
285:21 - doesn't load this will throw an error
285:25 - uncaught in promise file not loaded we
285:28 - would need some way to catch this error
285:30 - when it's thrown
285:32 - one way in which we can do that is to
285:33 - surround any dangerous code with a try
285:36 - block
285:36 - see the topic on the series in error
285:38 - handling where i'll discuss this more in
285:41 - depth
285:41 - so try this code if there are any errors
285:45 - we will catch them so catch there is one
285:48 - argument of error
285:49 - and i will simply display our error
285:52 - catch
285:53 - console.log
285:55 - error
285:56 - so let's run this again
285:57 - file not loaded so this is very helpful
286:00 - if we have to wait for more than one
286:02 - asynchronous function we'll discuss this
286:04 - in the next topic maybe not only do we
286:06 - have to load a file but we first need to
286:08 - locate it and we have to close it in the
286:10 - next topic we'll have to wait for
286:11 - multiple asynchronous functions we might
286:13 - have locate file
286:16 - and close file
286:19 - so when we begin a process we're waiting
286:21 - for multiple asynchronous functions but
286:23 - we'll discuss that in the next topic so
286:25 - yeah that's the await keyword everybody
286:27 - it makes an asynchronous function wait
286:30 - for a promise when using the await
286:32 - keyword you don't need to invoke a
286:33 - function then follow it with the then
286:36 - method and catch
286:38 - there's no need for that so yeah
286:40 - everybody that's the await keyword we'll
286:41 - practice this more in the next topic
286:45 - hey guys in this video i'm going to
286:47 - explain es6 modules the idea behind a
286:49 - module is that it's a file of reusable
286:52 - code we can import sections of
286:55 - pre-written code to use whenever we want
286:57 - they're great for any general utility
286:59 - values and functions they help to make
287:01 - your code more reusable and maintainable
287:04 - think of modules as separate chapters of
287:06 - a book each javascript file could be its
287:08 - own individual chapter to begin working
287:10 - with modules within the opening script
287:12 - tag of your html document add this
287:15 - attribute
287:16 - type equals module
287:19 - then we'll create a new javascript file
287:22 - i'll name this
287:24 - math underscore util
287:26 - dot js
287:28 - this file will contain some general map
287:30 - utility functions such as get the
287:32 - circumference of a circle or the area so
287:35 - let's begin i'll create a constant as
287:36 - well const pi
287:39 - i'll set the sequel to 3.14159
287:42 - and maybe some functions
287:45 - function
287:47 - get
287:48 - circumference
287:50 - will accept a radius
287:54 - and we'll return
287:56 - two
287:57 - times pi
287:58 - times radius
288:01 - then let's create a get area function
288:05 - get
288:06 - area
288:07 - will return
288:09 - pi
288:10 - times radius
288:12 - times radius
288:15 - to export any variables or functions i
288:17 - will precede them with the export
288:20 - keyword
288:21 - i like to do this inline
288:24 - then save
288:25 - heading back to our main javascript file
288:27 - we can import everything from this
288:29 - javascript file to do that we will type
288:32 - import
288:33 - then within curly braces then list all
288:35 - of the variables or functions we would
288:37 - like to import
288:39 - i would like to import pi
288:42 - get circumference
288:45 - and get area
288:49 - add from
288:51 - then an absolute or relative file path
288:54 - i'll use a relative file path because
288:56 - these files are right next to each other
288:59 - so that would be dot forward slash the
289:02 - name of the file math underscore util
289:05 - dot js
289:07 - and that's it so we can use these
289:09 - variables and functions as if they were
289:11 - in the same file
289:13 - to test this i will use console.log
289:16 - pi
289:17 - and that value is 3.14159
289:21 - we have access to this variable even
289:23 - though it's not written within this file
289:25 - we've imported that variable from the
289:27 - separate javascript file let's calculate
289:29 - the circumference of a circle
289:31 - let
289:32 - circumference
289:34 - equal
289:35 - get circumference
289:38 - pass in a radius maybe 10.
289:40 - then let's display our circumference
289:43 - console.log
289:44 - circumference
289:46 - if we pass in 10 as a radius the
289:48 - circumference is 62.83 we also have get
289:52 - area 2.
289:54 - let area equals
289:57 - get area
290:00 - the area would be
290:02 - 314.159 even though all of this code is
290:05 - written in a separate file we can access
290:07 - it from another file by importing it
290:10 - make sure that anything you want to
290:11 - export is preceded with this export
290:13 - keyword there is another way to import
290:15 - this too
290:17 - i'm going to copy all of this
290:22 - and paste it
290:23 - if there's a lot to import we can simply
290:26 - import everything by using an asterisk
290:28 - but we'll give all of these imports an
290:30 - alias that's like a nickname import
290:32 - asterisk as
290:34 - your nickname should be descriptive of
290:36 - the file that you're importing this is
290:38 - as if we're creating a separate
290:39 - namespace
290:41 - maybe
290:42 - math
290:42 - util now in order to use these variables
290:45 - or functions i would need to precede
290:47 - them with that namespace mathutil
290:51 - dot pi
290:52 - mathutil dot get circumference
290:55 - mathutil dot get area then this would
290:58 - work when i'm using math util dot pi
291:01 - that's kind of similar to math.pi it's
291:03 - kind of the same concept except we
291:05 - ourselves created the separate
291:06 - javascript file so yeah those are
291:08 - modules they're files of pre-written
291:10 - code that we can import and use whenever
291:12 - we need to if you would like a copy of
291:14 - this code i'll post this in the comment
291:16 - section down below and well yeah that's
291:18 - an introduction to modules in javascript
291:22 - hey guys in this video i'm going to
291:24 - quickly explain the dom it's an acronym
291:27 - for document object model technically
291:29 - it's an api an application programming
291:32 - interface it's an interface that's used
291:35 - for changing the content of a page and
291:37 - it's arranged in a hierarchical tree our
291:40 - dom is a representation of an html
291:42 - document and this tree contains nodes
291:45 - the first child of our document is the
291:48 - html root element so our html tags
291:51 - enclose all of this content including
291:53 - the head and the body elements
291:55 - which are here
291:57 - and here the head can contain a title
291:59 - and some text which you see right here
292:01 - and the body can contain some various
292:03 - html elements like a div tag by
292:06 - interacting with this dom we can change
292:08 - the elements of a web page document is
292:11 - the entry point of our dom if i typed
292:14 - console.log
292:16 - document this would display my dom and
292:18 - everything within it so we have document
292:21 - our html node
292:23 - the head
292:24 - and the body and a bunch of stuff within
292:26 - those nodes too now if you were to type
292:28 - console.dir
292:30 - then pass document as an argument this
292:32 - will list all of the properties of your
292:34 - dom if i need access to the title of my
292:37 - document i can access that by typing
292:39 - document dot title property and then
292:42 - i'll display this console.log
292:45 - document.title and the title of my
292:48 - document is well document or i could get
292:50 - the url console.log document.url
292:56 - so this is my url and you can change
292:59 - these properties too i can change the
293:01 - title of my webpage document.title
293:05 - set the sql to something
293:07 - title goes here and taking a look at
293:09 - this tab of my web browser you can see
293:12 - that it says title goes here i can even
293:14 - change the location
293:17 - document.location
293:18 - i'll set the sequel to google
293:21 - so http colon two forward slashes
293:24 - www.google.com
293:27 - then when i save this it takes me to
293:29 - google
293:30 - by accessing the dom i have access to my
293:33 - body element and i can change something
293:35 - about the body of my document if i would
293:36 - like to change the background color i
293:38 - would type document
293:41 - dot the name of the node body in this
293:43 - case
293:44 - and i will set the style
293:47 - background color
293:49 - sky blue
293:50 - and this will change the background
293:52 - color of the body of my document if i
293:55 - need to change some html element like
293:57 - this div tag i could type
294:00 - document
294:01 - dot get
294:03 - element by id
294:05 - and we will search for an id within our
294:07 - dom
294:08 - like my div and i can set the inner html
294:13 - equal to some text like hello
294:17 - hello
294:18 - that's a quick summary of what the dom
294:20 - is it's an api an application
294:22 - programming interface it's an interface
294:25 - for changing the content of a page we
294:27 - can change content without having to
294:29 - reload the page to reflect any changes
294:32 - document is the access point each node
294:34 - can contain an object this tree is a
294:36 - model so it's a document object model a
294:40 - dom and in the next few topics i'll
294:42 - demonstrate how we can search for given
294:44 - elements and traverse nodes so that is a
294:47 - quick overview of what the dom is
294:51 - hey guys in this video i'm going to show
294:53 - you a few different ways we can select
294:55 - elements in a web page let's begin with
294:57 - something very basic i'm going to create
294:59 - an h1 header tag we'll create a menu for
295:01 - a restaurant this is the menu and i will
295:05 - give this h1 element a unique id
295:08 - my
295:09 - title to select this element i can type
295:12 - document dot get
295:15 - element by id
295:18 - and the id was my title and i will store
295:21 - this within a variable
295:23 - let
295:24 - element equal document.getelementbyid
295:28 - and what should we do with this element
295:30 - let's change the background color
295:33 - so type element
295:35 - dot style
295:36 - dot background
295:38 - color i'll set this to
295:41 - light green that's a good color
295:45 - so yeah you can select an element by its
295:47 - id but you probably knew that already we
295:49 - have a little bit of experience with
295:51 - this method
295:52 - let's select elements by their name the
295:54 - name attribute is useful if you have
295:56 - more than one elements in some sort of
295:58 - group like radio buttons let's create
296:00 - some radio buttons
296:02 - input
296:03 - type equals radio
296:06 - and i will give this a name of fruits
296:08 - the first will have a value of apple
296:11 - then i'll create a label for this
296:13 - label
296:14 - for
296:15 - equals
296:17 - apple
296:18 - close the label i'll add a line
296:21 - and i will type apple okay two more
296:24 - fruits
296:25 - what about an orange
296:27 - for orange
296:29 - the text will be orange
296:31 - and a banana
296:32 - value
296:34 - banana
296:35 - for banana and the text will be banana
296:39 - so each of these three radio buttons has
296:41 - the same name fruits to select all of
296:43 - these radio buttons within my document i
296:45 - can type document dot get
296:48 - elements that's plural with an s
296:51 - by name
296:53 - then pass a name as an argument fruits
296:56 - this method returns a node list
296:59 - it's similar to an array
297:01 - so i will store that within
297:03 - let's say fruits
297:05 - let fruits equal document dot get
297:08 - elements by name fruits so what would i
297:11 - like to do with this node list of fruits
297:13 - if i were to use console.log and display
297:16 - fruits well we have a node list with our
297:19 - three elements a radio button for apple
297:22 - orange and banana if i add an index
297:24 - number only that element is displayed so
297:27 - we have our apple at index one would be
297:30 - our orange
297:31 - and two is our banana
297:33 - maybe i would like to change the
297:34 - background color of each of these
297:36 - elements what's one way we can check to
297:38 - see if one of these elements is selected
297:40 - i'm going to add an attribute
297:42 - with the apple radio tag let's add this
297:45 - attribute
297:47 - checked equals checked
297:49 - by default this will already be selected
297:52 - i would like to print whatever radio
297:54 - button is checked we've already selected
297:56 - our elements by their name fruits so i
297:59 - will use the for each method of this
298:01 - node list fruits for each i will cycle
298:05 - through this node list of elements and
298:08 - find whatever element is checked and
298:10 - display it so we have our parameters
298:12 - fruit
298:13 - arrow function
298:16 - let's check to see if our fruit
298:19 - is checked fruit dot checked
298:22 - then we will
298:24 - console.log
298:25 - whatever our fruit is
298:27 - then add dot value
298:30 - so our apple is selected
298:33 - let's change the checked attribute of
298:35 - our orange this time
298:37 - so we have orange now
298:42 - and banana
298:44 - so that is get elements by name now we
298:47 - have get elements by tag name heading to
298:50 - our html file let's create an unordered
298:52 - list
298:54 - ul for unordered list
298:56 - close it
298:57 - we will add some list items
299:02 - perhaps these are vegetables
299:05 - carrots
299:09 - potatoes
299:12 - and onions
299:14 - we can select elements by a given tag
299:16 - name like list item let's store our
299:19 - elements within vegetables let
299:22 - vegetables
299:23 - equal
299:25 - document dot get
299:27 - elements by tag name
299:31 - and the tag name was
299:33 - li for list items this method returns
299:36 - technically an html collection it
299:39 - behaves similarly to an array let's take
299:41 - vegetables at index of zero
299:44 - that would be our carrots i'm going to
299:46 - access the style the background color
299:49 - property
299:52 - set the sequel to light green
299:56 - the second element would have an index
299:58 - of one
299:59 - and the next element would be two
300:01 - so that is get elements by tag name find
300:05 - tags that you would like to select and
300:06 - then just pass that as an argument to
300:08 - this method
300:09 - okay we have get elements by class name
300:12 - i think this time i'll create some div
300:14 - elements
300:15 - div close it
300:17 - and i will give this a class of desserts
300:21 - desserts
300:23 - first we'll have ice cream
300:28 - cake and maybe pie
300:32 - each of these three developments has the
300:34 - same class name desserts
300:36 - i'll store elements within
300:38 - let
300:40 - desserts
300:42 - equals
300:43 - document dot get
300:45 - elements plural with an s
300:48 - by
300:49 - class
300:50 - name
300:52 - and the class name was desserts
300:55 - desserts is technically an array-like
300:58 - object but it behaves similarly to an
301:00 - array again
301:01 - so i'm going to change the background
301:03 - color let's start with element zero
301:07 - so that is the first element index zero
301:10 - index one
301:12 - and index two
301:13 - that is the get elements by classname
301:16 - method now we have query selector query
301:19 - selector tends to be fairly popular we
301:21 - can select an element by either an id
301:24 - a class name
301:25 - a tag
301:26 - or an attribute let's create variable
301:29 - element
301:30 - equal
301:32 - document
301:33 - dot
301:35 - query selector
301:39 - then pass in an id a class name a tag
301:42 - name or an attribute let's begin with an
301:44 - id let's select id my title
301:49 - if you're selecting an id be sure to
301:50 - precede the name with a hashtag i will
301:53 - change the background color of this
301:55 - element to light green again
301:58 - there so using query selector we've
302:00 - selected an element by a unique id
302:03 - we can also do so by a class name
302:06 - so class desserts
302:08 - with a class name you're going to
302:09 - precede the class name with a dot
302:12 - so class desserts now with quarry
302:15 - selector it selects the first element of
302:18 - any group if you need all of the
302:19 - elements you'll need to use query
302:21 - selector all which we'll cover in just a
302:23 - little bit you can also select by a tag
302:25 - name like list item the first list item
302:28 - within my document will be selected or
302:30 - you could even use an attribute so maybe
302:32 - the first element that has the four
302:34 - attribute i would like to select
302:36 - i will use a set of square brackets and
302:38 - type four the first element with the
302:41 - four attribute is selected if you need
302:43 - all elements you can use query selector
302:46 - all
302:47 - so let's copy this paste it
302:49 - let elements query selector all i would
302:53 - like to select all list items and change
302:56 - the background color but we'll need to
302:57 - iterate over each of the elements
303:00 - i'll use a for each loop
303:05 - elements for each
303:07 - element
303:09 - i will change the background color of
303:11 - each element there each list item was
303:13 - selected how about anything with the
303:16 - desserts class name
303:19 - or anything with the v4 attribute
303:23 - so yeah those are a few different ways
303:25 - in which we can select html elements if
303:27 - you would like a copy of this code i'll
303:29 - post all of this in the comments section
303:31 - down below and well yeah that's how to
303:33 - select elements using javascript
303:37 - hey guys for this topic i'm going to
303:38 - show you a few different dom traversal
303:41 - techniques but before we do that i need
303:43 - to explain some family relationships
303:45 - between elements say we select our body
303:48 - element within my html document i have
303:51 - three unordered lists a list for fruit
303:54 - vegetables and dessert they are arranged
303:57 - in a hierarchy a family tree if we
303:59 - select our body these three lists since
304:02 - they're contained within the body
304:04 - they would be considered children my
304:06 - list of fruit is a child same with
304:08 - vegetables
304:10 - and dessert
304:11 - since my list of fruit appears first
304:13 - within my body the fruit list would be
304:16 - considered the first child kind of like
304:19 - it's the firstborn
304:20 - dessert is last that would be the last
304:23 - child
304:24 - it's the last born if we select this
304:27 - middle list of vegetables
304:30 - then my body element is considered the
304:33 - parent of this list the body element is
304:36 - the parent
304:37 - the two other lists would be considered
304:39 - siblings
304:41 - sibling
304:43 - and sibling
304:46 - since fruit appears before vegetables
304:48 - fruit would be considered the previous
304:52 - sibling
304:53 - dessert would be considered the next
304:56 - sibling
304:58 - my unordered list does have children too
305:00 - each of these list items would be
305:02 - children of my unordered list yeah
305:05 - that's a quick overview of the family
305:07 - relationships between elements with that
305:10 - out of the way here's my html document
305:12 - within the body i have three unordered
305:14 - lists
305:15 - each has a unique id fruit vegetables
305:18 - and dessert
305:20 - suppose i would like to select the body
305:22 - of my document i'll store that within a
305:24 - variable let
305:26 - element
305:27 - equal
305:28 - document
305:29 - dot body
305:31 - to select the first child that would be
305:33 - the first unordered list
305:35 - i'll store that within another variable
305:37 - let child equal
305:40 - element dot
305:42 - first element child
305:46 - let's color the background of this child
305:47 - element green child
305:50 - dot
305:50 - background color
305:53 - equals
305:54 - light
305:55 - green
305:57 - this entire unordered list is now green
306:00 - let me show you what happens when i
306:02 - select the last element child of my body
306:06 - so nothing appears to change
306:08 - let's take a look at this child using
306:10 - console.log console.log
306:14 - child
306:15 - so when i selected the last element of
306:17 - my body we selected the script element
306:20 - this element is the last child of my
306:23 - body so that's something you need to pay
306:25 - attention to
306:26 - let's select our vegetable list
306:29 - document dot
306:31 - query
306:32 - selector
306:34 - i will select
306:36 - vegetables
306:38 - we will select the
306:40 - parent element
306:42 - i'll rename this as parent
306:46 - the parent of this list would be the
306:48 - entire body of my document that's why
306:50 - the entire background color is now green
306:53 - we can choose the next element sibling
306:57 - sibling
306:59 - sibling
307:00 - if we select our list of vegetables the
307:03 - next sibling would be my list of dessert
307:07 - and the previous element sibling
307:09 - is my list of fruit
307:11 - what if you need one of these list items
307:13 - i'll select my list of fruit
307:16 - then select one of these elements
307:19 - first element child
307:25 - that would be the apple list item
307:28 - last element child is the banana
307:31 - another way to access the children of an
307:33 - element is via an index
307:36 - this time i will follow element with
307:38 - children and list an index number
307:41 - 0 is the beginning
307:43 - and we will change the first element at
307:46 - index
307:46 - 0. one would be the second element
307:49 - orange
307:51 - two is the next element banana
307:53 - if you need all the elements you can
307:55 - simply use children this will return a
307:57 - collection we would need to convert that
307:59 - to an array this collection doesn't have
308:02 - the for each method
308:04 - i will surround
308:05 - element.children with
308:08 - array
308:09 - dot from method
308:12 - and we can iterate over the elements of
308:14 - this array
308:15 - let's rename child as children
308:18 - children
308:20 - dot
308:20 - for
308:21 - each method
308:23 - we have our parameters child arrow
308:26 - function
308:28 - we'll change the style of each of the
308:29 - children of this list
308:33 - now each child is green
308:36 - we could select a different list like
308:38 - vegetables
308:42 - or
308:42 - dessert
308:44 - so yeah those are a few dom traversal
308:46 - techniques elements are arranged in a
308:48 - family tree whatever element you select
308:51 - that element can have a parent maybe
308:54 - some children or siblings
308:56 - so yeah those are a few basic dom
308:58 - traversal techniques in javascript
309:02 - hey guys for this topic i'm going to
309:04 - show you how we can add and change html
309:06 - elements i need to create an h1 header
309:08 - tag to do that i will type document dot
309:12 - create
309:14 - element
309:16 - within the create element method and
309:18 - within quotes i can list a tag that i
309:20 - would like to create i would like to
309:22 - create an h1 header tag i'll assign this
309:24 - to a variable
309:26 - constant maybe name tag we'll store our
309:29 - name name tag is an h1 header tag
309:31 - however it doesn't contain any text
309:33 - that's where changing html elements
309:35 - comes in two ways in which i could add
309:37 - some text to this h1 header tag is to
309:40 - either use inner html or text content
309:43 - text content is the preferred way
309:44 - because inner html is vulnerable to
309:47 - something called cross site scripting
309:49 - attacks i'll give you a demonstration
309:50 - momentarily if we were using inner html
309:53 - i would take my tag dot
309:56 - inner
309:56 - html
309:58 - set the sql to some text maybe your
310:00 - first name then to add this element i
310:02 - would need to declare where i would like
310:04 - to add this tag specifically the body of
310:06 - my document would be a good place
310:08 - document dot
310:10 - body and i will use the append method
310:14 - and place my tag within the append
310:16 - method as an argument this will create
310:18 - an h1 header tag then add it to the body
310:21 - of my document what if we accept some
310:22 - user input instead
310:24 - window
310:25 - dot prompt
310:28 - enter your name
310:30 - enter your name type in your first name
310:32 - press ok and there's your h1 header tag
310:35 - now here's the problem with using
310:36 - innerhtml we could also assign some tags
310:39 - along with some text if i was to run
310:41 - this again i could place a malicious
310:43 - script within the user input this would
310:46 - be an example of a cross site script
310:48 - attack i'm going to blur this section
310:50 - just because i don't want to give you
310:51 - guys any ideas then if i were to press
310:53 - ok this would activate my script this
310:55 - script that i wrote just has a pop-up
310:57 - that says virus the preferred way of
311:00 - adding some text to an element is to set
311:02 - the text content when i run this program
311:05 - again and enter my malicious script this
311:08 - script will be instead parsed as text
311:11 - setting text content is a much safer
311:13 - approach than using innerhtml this time
311:16 - we're going to add a list item to an
311:17 - unordered list heading to our html
311:19 - document we'll create an unordered list
311:23 - i'll give this list an id of fruit
311:27 - then we will add some list items
311:33 - apple
311:37 - orange
311:40 - banana
311:43 - okay here's my list
311:45 - to append an item to my list well i need
311:48 - to know what my list is
311:49 - i'll store that within a variable
311:51 - constant
311:52 - my list
311:54 - and i would need to select this list
311:57 - i can do that with document dot query
312:00 - selector
312:02 - pass in an id
312:04 - the id was
312:06 - fruit
312:09 - then i can create a list item element
312:12 - construct list
312:14 - item equals document
312:18 - dot create
312:20 - element
312:21 - what kind of element would we like to
312:23 - create let's create a list item element
312:25 - to set the text of this list item
312:27 - element i will take my list item then
312:29 - set the text content property equal to
312:33 - whatever i want i feel like a main go
312:35 - then we just need to add this list item
312:37 - to my list my list use the append method
312:41 - then pass in my list item
312:43 - there we have added a mango if you would
312:45 - like this list item at the beginning of
312:47 - your list you can use prepend
312:49 - pre-penned
312:51 - now we have mango apple orange banana
312:54 - otherwise if you need to place an item
312:56 - somewhere within the middle of the list
312:58 - it's a little more complex but here's
313:00 - how take your parent element my list in
313:02 - this example
313:04 - dot
313:05 - insert
313:06 - before method
313:07 - pass in what's to be inserted our list
313:10 - item then we need to get all of the
313:12 - elements we can do that by taking my
313:14 - list again
313:16 - dot
313:17 - get
313:18 - elements
313:19 - by tag name
313:21 - we would like to select all list item
313:23 - elements
313:25 - then an index number to insert main go
313:28 - before orange
313:29 - the index would be 1. following the get
313:31 - elements by tagname method i will add
313:33 - the index of where i would like to
313:35 - insert this list item so 1. now we have
313:38 - apple mango orange banana
313:41 - two would be
313:42 - apple orange mango banana
313:44 - and then three would be the end so yeah
313:47 - everybody that's a beginner's way to add
313:49 - and change html elements if you would
313:51 - like a copy of this code i'll post all
313:53 - of this in the comment section down
313:54 - below and well yeah that's how to add
313:56 - and change html elements using
313:58 - javascript
314:02 - hey what's up guys in this video i'm
314:04 - going to show you how we can change some
314:05 - css properties of elements heading to
314:08 - our index.html file let's create a
314:10 - simple h1 header tag
314:13 - i'll give this header tag a unique id of
314:17 - my title
314:19 - then add some text
314:21 - this is my title
314:24 - then save
314:25 - in order to change the css properties of
314:27 - this element we first need to select
314:30 - this element i'll declare this as a
314:32 - constant
314:33 - const
314:34 - title
314:35 - equals then to select an element you
314:37 - type
314:38 - document
314:39 - dot
314:41 - get
314:42 - element
314:43 - by id
314:44 - within the parentheses and within quotes
314:46 - we will list the id of our element we
314:49 - would like to select
314:51 - getelementbyid is a very basic way of
314:53 - selecting an element in the future we'll
314:55 - cover more advanced methods but for now
314:58 - we'll stick with getelementbyid so we're
315:00 - storing this within a variable title and
315:03 - now we can do stuff with it
315:05 - to change css properties of some element
315:07 - such as my title i will follow the name
315:10 - of this element title then access the
315:13 - style attribute
315:15 - dot then a css property
315:17 - maybe i would like to change the
315:18 - background color so i will list that
315:21 - property
315:22 - background
315:23 - color
315:24 - when accessing a css property through
315:26 - javascript the format is in camel case
315:29 - normally with css there's a dash between
315:31 - words such as background dash color but
315:34 - if you're using javascript you use
315:36 - camelcase
315:37 - the first letter of the first word is
315:39 - not capital then the first letter of any
315:41 - word after the first is capital
315:44 - background color and set the sequel to a
315:46 - color you can pick a color name maybe
315:49 - blue
315:51 - you can select rgb values rgb within the
315:54 - parenthesis you have three numbers each
315:56 - corresponds to the amount of red green
315:58 - and blue
316:00 - uh so maybe 50 200 250 i don't know what
316:04 - this color is going to be
316:05 - oh i kind of like that color or you
316:08 - could use hexadecimal values
316:10 - what's 2 two two two two two
316:14 - okay that is a dark gray you have a
316:16 - couple options when it comes to colors
316:18 - let's change the font of my title what
316:21 - element would we like we would like
316:22 - title we'll access the style then a
316:25 - property color
316:28 - uh let's use rgb this time rgb
316:33 - 5200
316:35 - 250
316:38 - there and we have that color again so
316:40 - again you can use color names rgb values
316:43 - or hexadecimal values and if you don't
316:45 - know any you can always google hex color
316:48 - picker
316:49 - and pick a color that you like
316:51 - here are the rgb values or the
316:53 - hexadecimal values okay let's change a
316:55 - few other properties
316:57 - we're selecting our title
316:58 - accessing the style attribute
317:00 - then let's change the font family
317:03 - property i will set the sequel to
317:06 - pick a font i like this font
317:10 - and there we go we have a new font i
317:12 - would like to text align center this
317:14 - element
317:16 - title dot style
317:18 - dot
317:20 - text
317:21 - align equals center
317:24 - then add a border
317:26 - title dot style
317:28 - dot border
317:30 - equals 2 pixels solid is good
317:36 - yeah and we have a border
317:38 - to hide an element we can access the
317:40 - display property
317:42 - title dot style
317:44 - dot
317:45 - display
317:46 - equals none
317:49 - this will hide this element or we could
317:51 - set this to block to display it
317:53 - so yeah everybody that is a very basic
317:56 - way to change css properties you would
317:58 - first need to select an element or
318:00 - elements follow that element with dot
318:03 - the style attribute dot
318:05 - the css property and you can set it
318:08 - equal to a new value that is how to add
318:10 - and change css properties using
318:12 - javascript if you would like a copy of
318:14 - all this code i'll post this in the
318:15 - comments section down below be sure to
318:17 - look underneath the original video in
318:19 - the 100 video playlist and well yeah
318:22 - that's how to change some css properties
318:24 - using javascript
318:27 - hey guys in this video i'm going to
318:29 - explain events an event is some action
318:32 - that the user or the browser does many
318:34 - html elements contain event attributes
318:37 - for example let's create a button
318:40 - i'll give this button an id of my button
318:45 - for the text let's just say button
318:48 - buttons have an on click event attribute
318:51 - on click
318:52 - i can set this equal to the name of a
318:54 - function and invoke it
318:56 - let's create a function that will do
318:57 - something i'll cleverly name this
319:00 - function do
319:01 - something
319:04 - all we'll do is create an alert alert
319:08 - you
319:08 - did
319:10 - something
319:11 - i will set the on click attribute equal
319:14 - to the name of my function do
319:16 - something
319:17 - then invoke it
319:19 - when i click on this button my on click
319:21 - event attribute will invoke this
319:23 - function do something
319:25 - you did something in place of setting
319:27 - event attributes directly within your
319:28 - html elements you could do so within
319:31 - your javascript file
319:33 - i would first need to select my element
319:36 - constant
319:37 - element equals
319:39 - document dot get element by id
319:44 - the id was my button
319:47 - i will take this element
319:49 - and set the on click event attribute
319:51 - equal to some function
319:53 - do
319:54 - something be sure not to invoke it this
319:57 - is a callback
319:58 - save everything then when i click this
320:00 - button we activate the on click event
320:02 - attribute so that's one event attribute
320:05 - on click another event attribute is on
320:08 - load when the web browser loads it does
320:10 - something this time i'm going to select
320:12 - the body of my document
320:14 - constant element equals document.body
320:19 - i will take this element and set the on
320:23 - load attribute equal to some function
320:25 - do
320:26 - something
320:28 - when the body of my document loads it
320:30 - activates the onload event attribute
320:33 - another option is that within the
320:35 - opening body tag of your html file you
320:38 - can directly set that attribute
320:41 - do something and this would work too
320:44 - that is the onload event attribute when
320:46 - an element loads it does something
320:49 - next we have the on change event
320:51 - attribute
320:53 - element dot
320:54 - on
320:55 - change equals
320:57 - do something
320:59 - when an element has been changed it
321:02 - activates the on change event attribute
321:04 - heading to our html document let's
321:06 - create a text box
321:09 - input
321:10 - id equals my text
321:14 - get rid of this
321:16 - we will select our text box constant
321:18 - element equals
321:20 - document dot get element by id
321:26 - we are selecting
321:27 - my text
321:29 - now when we make changes to this text
321:31 - box
321:32 - and then leave
321:34 - it activates my on change event
321:36 - attribute if used with a text box
321:39 - you could format some text once you
321:40 - leave
321:41 - okay this next one is going to be fun
321:43 - let's create a div tag
321:46 - div
321:46 - id equals my div
321:49 - close it
321:50 - then heading to our css style sheet
321:53 - let's select my div
321:56 - we'll change the background color
321:59 - to light green
322:03 - and the width to 100
322:05 - 100 pixels
322:07 - and the height to be 100 as well
322:11 - let's save we'll select this id my div
322:16 - constant element equals document dot get
322:20 - element by id
322:23 - the id was my div
322:26 - when we move our cursor over this div
322:28 - tag we'll change the background color we
322:30 - will take our element
322:32 - and use the on
322:34 - mouse over event attribute
322:37 - set the sql to a function
322:39 - do something
322:44 - change the background color element dot
322:46 - style dot
322:48 - background
322:49 - color
322:50 - equals how about red
322:53 - when i hover my cursor over this div tag
322:56 - it's gonna change the color when you
322:58 - leave an element
322:59 - you can set the on mouse out event
323:02 - attribute
323:05 - element dot on mouse out we'll create a
323:09 - function to do something else let's copy
323:12 - this paste it
323:14 - do something else
323:16 - we'll change the background color to
323:18 - light green again
323:20 - so when i enter
323:22 - the color is red when i leave it's green
323:24 - red green red green red green so that is
323:27 - on mouse over and on mouse out
323:30 - okay we're on the last two on mouse down
323:35 - element dot
323:36 - on mouse down
323:39 - equals do something
323:42 - so when i click down when i click on
323:44 - this element
323:45 - it activates the on mouse event
323:47 - attribute
323:48 - by itself it's basically no different
323:50 - from the on click event attribute but it
323:53 - pairs very well with the on mouse up
323:55 - event attribute
323:58 - on mouse up
324:00 - when we let go of our mouse
324:02 - we can perform another function do
324:05 - something else
324:06 - when i click and hold down it's red when
324:08 - i let go it's green red green red green
324:11 - red green all right everybody so those
324:13 - are a few events on click on load on
324:16 - change on mouse over on mouse out on
324:19 - mouse down on mouse up and in the next
324:21 - topic we'll look at event handlers if
324:24 - you would like a copy of all this code
324:25 - i'll post all of this in the comments
324:27 - section down below and well yeah those
324:29 - are a few javascript events
324:33 - hey guys in this video i'm going to
324:34 - explain the add event listener method we
324:37 - can link an event and a function to an
324:39 - html element using the add event
324:42 - listener method is the preferred way of
324:44 - handling events a benefit is that one
324:46 - element can have several event listeners
324:49 - even the same event can invoke different
324:51 - functions within my html document i'm
324:53 - going to create a div
324:56 - div
324:58 - close it
324:59 - i'll give this a unique id of inner div
325:03 - eventually we'll create an outer div
325:06 - then within my css style sheet i'll
325:08 - select
325:09 - inner
325:10 - div
325:12 - i'll give this a background color of
325:15 - light
325:16 - green light green
325:20 - a width
325:22 - of 100
325:24 - a height of 100
325:28 - and a border
325:30 - one pixel solid is good
325:33 - save everything and here's our div
325:36 - element using the add event listener
325:38 - method
325:39 - this development can listen for multiple
325:41 - events we'll need to select an element
325:44 - i'll name this const
325:47 - inner div
325:49 - equals
325:50 - document
325:51 - dot get
325:53 - element by id
325:55 - we're selecting inner div
326:00 - to add an event listener you take your
326:01 - element inner div in this case
326:03 - then invoke the add event listener
326:05 - method
326:07 - the first argument is an event
326:09 - let's add mouse over
326:11 - mouse
326:13 - over
326:14 - then a function
326:15 - let's create a function to change the
326:18 - color red
326:19 - this will be a callback change red
326:22 - let's define this function
326:25 - function
326:27 - change red
326:30 - let's take our inner div
326:33 - take the style
326:35 - set the background color property
326:38 - equal to red
326:40 - when i hover my cursor over this div
326:42 - element it changes red a benefit of
326:45 - using the add event listener method is
326:47 - that it's easy to wait for multiple
326:49 - events
326:51 - so to wait for another event
326:53 - we can simply invoke the add event
326:54 - listener method again
326:56 - this time we'll also listen for the
326:58 - event of mouse out
327:02 - let's create a function to change
327:04 - green
327:07 - function change green
327:10 - background color equals light
327:13 - green
327:14 - this development is listening for two
327:16 - events mouse over and mouse out
327:19 - using the ad event listener method it's
327:21 - really easy to wait for multiple events
327:23 - there's one more argument within the ad
327:25 - event listener method
327:27 - that is the use capture argument
327:30 - suppose we have an element within
327:31 - another element
327:33 - i'll surround this inner development
327:35 - with another div
327:37 - div the id will be
327:40 - outer div
327:42 - be sure to enclose your inner div
327:46 - i'll change the style of outer div
327:54 - i'll get rid of the border
327:56 - the width and the height will be 200.
327:59 - save everything
328:01 - so we have an outer div and an inner div
328:04 - the inner development is inside of the
328:06 - outer div element what would happen
328:08 - exactly if both of these elements are
328:09 - waiting for the same event mouse over
328:12 - which event would be handled first the
328:14 - inner element or the outer element well
328:16 - we can set that with the third argument
328:18 - the use capture argument let's add an
328:21 - event to the outer div i'll store this
328:23 - within a variable
328:26 - outer div
328:27 - the id is outer div i'll eliminate all
328:30 - of this
328:32 - i'll add an event listener to the inner
328:34 - div
328:35 - add event
328:37 - listener
328:39 - the event this time will be click
328:43 - the function will be change
328:46 - blue this time
328:47 - we'll add the same event to the outer
328:49 - div
328:50 - outer
328:51 - div
328:53 - add event listener click change blue
328:55 - let's define this function change blue
328:58 - function change blue
329:01 - we will take this
329:03 - dot style dot background color
329:08 - equals
329:09 - light
329:10 - blue
329:12 - both of these div elements are doing the
329:13 - same thing
329:15 - but there's some overlap
329:16 - the inner div element and the outer
329:18 - development are within the same space so
329:20 - when i click on the inner div element
329:22 - we're also clicking on the outer div
329:23 - element at the same time which element
329:26 - handles its event first the inner
329:27 - element or the outer element just to
329:29 - test this within the change blue
329:31 - function let's create an alert just to
329:33 - slow things down
329:36 - you
329:36 - selected
329:38 - then let's display the id of the element
329:40 - that is being handled
329:42 - this dot id
329:44 - okay so when i click on this element
329:47 - we're handling the inner div first
329:49 - before the outer div
329:51 - but with the outer element if you pass
329:53 - in another argument true for use capture
329:57 - well then we will handle the outer
329:59 - element first before the inner element
330:02 - so that's what that third argument is
330:04 - use capture if two elements are taking
330:06 - the same space and they're listening for
330:08 - the same event you could specify which
330:10 - one has preference yeah that's the add
330:12 - event listener method it's the preferred
330:14 - way of having an element listen for
330:16 - events as arguments you can pass in an
330:18 - event a function to be executed and a
330:21 - preference if you would like an outer
330:23 - element to be handled first so yeah
330:25 - that's the add event listener method
330:27 - everybody
330:29 - hey everybody in this video i'm gonna
330:31 - demonstrate how we can show and hide
330:33 - html elements for this demonstration i
330:36 - recommend downloading a picture here's a
330:38 - picture of a card that i found place it
330:39 - within the same folder as your
330:41 - javascript file when i click on a button
330:43 - i would like to toggle between showing
330:45 - and hiding that image heading to my html
330:48 - file let's create a button
330:50 - button
330:51 - id equals my button
330:54 - i'll add some text toggle is fine
330:57 - we will add our image
330:59 - image id equals my image
331:04 - set the source equal to where your file
331:06 - is located this image is in the same
331:08 - folder as my html file i just need the
331:11 - file name my file name is card.jpg but
331:14 - it's probably going to be something
331:15 - different for you
331:16 - car dot jpeg let's change the size it's
331:19 - a little
331:20 - massive heading to my style sheet i will
331:23 - select
331:24 - my image
331:26 - set the width to something reasonable
331:28 - like 300 pixels
331:30 - that's a lot better at the bottom i'll
331:32 - add some text a paragraph element is
331:34 - fine
331:36 - press the button
331:38 - heading to my javascript file i'll
331:40 - select my button and my image
331:43 - const my
331:45 - button
331:46 - equals document dot
331:49 - query
331:50 - selector
331:52 - i'm selecting
331:54 - my button
331:56 - do the same thing with image
332:01 - my image
332:05 - next i'll add an event listener to this
332:07 - button
332:08 - my button dot add
332:10 - event listener
332:13 - when we click on this button we're going
332:15 - to perform a function i'll use an arrow
332:17 - function expression
332:20 - what we'll do is check the display
332:21 - property of this image
332:23 - i'll use an if statement
332:26 - if
332:27 - my image
332:28 - dot style
332:30 - dot display is equal to none
332:35 - none means that this image is hidden
332:37 - if it's block that means it's being
332:39 - displayed if this image is hidden my
332:42 - image dot style dot display
332:45 - equals block
332:47 - this will display my image
332:49 - else let's hide our image
332:52 - my image dot style dot display
332:55 - equals
332:56 - none
332:58 - when i click on this button it hides my
333:00 - image when i click on it again it
333:02 - displays my image now it's hidden now
333:04 - it's showing hidden showing hidden
333:06 - showing there's one issue with this
333:08 - though perhaps i would like this image
333:10 - to be hidden from the beginning then we
333:12 - display it to do that we can go to our
333:15 - style sheet then set the display
333:17 - property to none
333:20 - now check this out when i click on this
333:22 - button the first time it doesn't do
333:25 - anything until i click on it a second
333:27 - time then it performs normally the
333:29 - reason that this is happening is that
333:31 - the style from our style sheet is not
333:33 - ready yet to demonstrate that i'm going
333:35 - to console.log the display of my image
333:40 - when i click on this button well there's
333:42 - no value within my display
333:45 - if the display of my image is equal to
333:48 - the property none then we show the image
333:51 - but this is technically null and not the
333:53 - property none therefore we will hide
333:55 - this image which it already is a quick
333:58 - fix for that is that we can add some
334:00 - inline styling to this element i'll add
334:02 - this display property inline instead of
334:04 - externally find your image tag set the
334:07 - style attribute equal to that css
334:10 - property
334:12 - this should work now i will click once
334:14 - to display my image then hide it display
334:18 - hide it another option is that we can
334:19 - set the visibility of this image when we
334:22 - toggle the display property all the
334:24 - elements that are underneath are going
334:25 - to shift downwards but if we were to use
334:27 - visibility this space will be reserved
334:30 - let's replace display with visibility
334:36 - in place of none we will check hidden
334:42 - in place of block this will be visible
334:46 - within the inline styling let's set
334:49 - display to
334:51 - visibility
334:53 - our visibility will be hidden
334:56 - make sure to save everything
334:59 - all of the space is reserved for that
335:01 - image you can see that my text down at
335:03 - the bottom is way down here when i show
335:06 - and hide this image there's no shifting
335:08 - of elements this space is reserved so
335:11 - that's another option too you can always
335:13 - toggle the visibility of an element so
335:15 - yeah everybody that is how to show and
335:17 - hide html elements if you would like a
335:20 - copy of this code i'll post all of this
335:22 - in the comment section down below and
335:23 - well yeah that's how to show and hide
335:25 - html elements using javascript
335:29 - hey yeah everybody in this video i'm
335:31 - going to show you how we can detect key
335:32 - presses to do that we can add an event
335:34 - listener to our window
335:36 - window dot add
335:39 - event
335:40 - listener
335:42 - the first argument is the attribute
335:44 - let's detect any key down events
335:47 - second is a callback a function
335:50 - expression or an arrow function
335:52 - expression let's use an arrow function
335:54 - expression there is one argument
335:56 - event
335:58 - arrow then what would we like to do when
336:00 - we press down on a key let's display
336:02 - what key was pressed
336:04 - console.log
336:07 - event
336:08 - dot key and that's it let's test it
336:12 - press some random keys
336:13 - q w e r t y a s d
336:18 - enter backspace one two three the arrow
336:22 - keys would be up down left right okay we
336:25 - know that that works let's have some fun
336:27 - with this let's create a box within our
336:29 - window and we can move the box with key
336:31 - events heading to our html file let's
336:33 - create a div tag pretend this wasn't
336:35 - here
336:36 - div id equals my div
336:40 - close it
336:41 - let's style it
336:43 - my div
336:45 - will set the background color
336:48 - to whatever color you would like
336:51 - set a width
336:52 - 100 pixels is good
336:55 - a height
336:57 - 100
336:58 - you could add a border if you would like
337:00 - border one pixel solid
337:03 - and we'll want to set a position
337:06 - position
337:09 - either absolute or relative
337:12 - we'll move our box relative to the body
337:15 - that it's in okay save everything
337:18 - i'm going to select our development
337:21 - const
337:22 - my div
337:23 - equals document dot
337:26 - get
337:27 - element by id
337:30 - my div
337:32 - and we'll add an event listener to our
337:34 - window
337:36 - in place of an arrow function expression
337:38 - let's pass a callback as an argument
337:41 - let's pass a callback to a move function
337:44 - and we'll need to define that function
337:47 - move
337:48 - there's going to be one argument that's
337:50 - provided for us within the parameters of
337:52 - the move function let's add event this
337:55 - argument is provided for us i think the
337:58 - best way to detect certain keystrokes
338:00 - would be with a switch let's detect
338:02 - arrow down up left right switch
338:05 - we're examining event dot key for any
338:08 - matching cases
338:10 - the first case will be arrow down
338:13 - arrow
338:14 - down
338:15 - we'll have to keep track of some
338:17 - coordinates of where our div element
338:18 - currently is let's create variables x
338:21 - and y
338:22 - let x equal zero
338:25 - let y equal zero as well whenever we
338:28 - press down let's move y by maybe five
338:31 - pixels down y
338:33 - plus equals five then we will take my
338:37 - div
338:38 - take the style
338:40 - access the top property
338:43 - and set the sequel to whatever y is
338:46 - plus pixels
338:49 - then at the end of our case let's break
338:51 - so when we save
338:53 - by pressing down we should be able to
338:55 - move down
338:56 - yeah there we go let's do the same thing
338:59 - with the other arrow keys
339:02 - arrow up we will decrement y
339:06 - so we should be able to move down
339:09 - and up
339:13 - arrow right
339:18 - x plus equals five
339:20 - my div dot style dot left
339:24 - equals x plus pixels
339:26 - now we should be able to go right
339:32 - arrow
339:33 - left
339:35 - x
339:36 - minus equals five
339:38 - now we can go right
339:40 - down
339:42 - left
339:43 - and up
339:45 - then you could add a default case too if
339:47 - you would like default
339:50 - break
339:52 - so yeah that's how to detect key presses
339:54 - everybody you can add an event listener
339:56 - to your window the event attribute is
339:58 - key down you could also switch this to
340:00 - key up when you let go of a key then it
340:03 - triggers the event the second argument
340:05 - is a callback a function expression or
340:07 - an arrow function expression so yeah
340:09 - that's one way to detect key presses if
340:12 - you would like a copy of this code i'll
340:13 - post this in the comments section down
340:15 - below and well yeah that's a very basic
340:18 - way to detect key presses in javascript
340:22 - hey guys in this video i'm going to show
340:24 - you how we can create a few simple
340:26 - animations using javascript we'll create
340:28 - a button and a development heading to
340:29 - our html file let's create a button
340:32 - i'll give this an id of
340:35 - my button
340:37 - i'll add text begin
340:39 - this button will begin the animation
340:42 - i'll create a development
340:44 - id equals my div
340:47 - let's style our development
340:49 - my div
340:51 - choose a background color
340:56 - i'll pick light green
340:58 - but choose whatever color you like
341:01 - a width of 100 is good
341:04 - a height of 100 is good as well
341:07 - then set the position property to
341:10 - relative
341:12 - we'll position this element relative to
341:14 - the container that it's in the body of
341:15 - our document
341:17 - okay save everything in our javascript
341:19 - file let's store our button element
341:22 - constant my button equals document dot
341:26 - get element by id
341:30 - my button
341:31 - then let's get our development
341:33 - i'll name this my animation
341:37 - get element by id
341:39 - my
341:40 - div
341:41 - when we press on the button we'll begin
341:43 - an animation
341:44 - we'll want to add an event listener to
341:46 - the button
341:47 - my button dot
341:50 - add event listener
341:55 - the event will be click
341:58 - then we will pass a call back begin
342:01 - let's define this function
342:03 - function
342:04 - begin
342:06 - what would we like to do i'm going to
342:08 - declare a timer id we'll use the set
342:10 - interval method
342:12 - let
342:13 - timer id i'll set the sequel to null for
342:16 - now we'll need some coordinates to keep
342:18 - track of our position of our div element
342:20 - let x i'll set this equal to zero
342:23 - let y
342:25 - equal zero as well
342:26 - we will use the set interval method
342:30 - passing a callback to a function
342:32 - we'll name this frame
342:34 - after how many milliseconds would we
342:36 - like to invoke this function
342:38 - what about every five milliseconds
342:40 - that's a good speed
342:42 - set interval returns an id of the timer
342:44 - that we're using
342:45 - so let's assign this to timer id
342:48 - we will use this timer id to stop the
342:50 - animation when it's completed we're
342:52 - going to create an inner function
342:54 - function frame
342:57 - this inner frame function will be in
342:59 - charge of updating our div
343:01 - every five milliseconds
343:03 - but when would we like to stop let's
343:05 - slide our div element to maybe like 300
343:08 - pixels out so i'm going to write an if
343:10 - statement
343:12 - if
343:13 - x
343:14 - is greater than or equal to
343:16 - 200
343:18 - then we will stop set interval we can do
343:21 - that by using the clear
343:23 - interval method
343:25 - pass in our timer id
343:27 - this will stop the animation
343:29 - else if we would like to advance one
343:31 - frame
343:32 - let's increment x by one
343:34 - x plus
343:36 - equals one then we just need to adjust
343:38 - the left property of this development
343:42 - we'll take myanimation
343:45 - access the style
343:46 - access the left property
343:48 - set the sql to whatever x is currently
343:51 - then add
343:52 - pixels
343:54 - so when we begin this animation it
343:56 - should slide to the right
343:59 - and stop right about here now let's move
344:01 - this animation down instead of right
344:03 - if y is greater than or equal to 200
344:07 - y plus equals one
344:09 - myanimation.style
344:11 - dot top equals y plus pixels
344:15 - now this animation moves down
344:18 - we could combine them both if x is
344:20 - greater than or equal to 200
344:23 - or
344:24 - y is greater than or equal to 200
344:27 - then we will increment both x and y by
344:30 - one x plus equals one
344:33 - my animation dot style dot left equals x
344:37 - plus pixels
344:40 - now this animation moves diagonally
344:42 - that's a simple slide animation let's
344:45 - make this element rotate i think that
344:47 - would be cool let's eliminate some of
344:48 - these lines of code
344:50 - i'll post all of this in the notes so
344:52 - don't worry about that
344:56 - okay we'll need a variable degrees
345:00 - set this equal to zero
345:02 - let's perform a full 360 degree rotation
345:06 - if
345:07 - degrees is greater than or equal to 360.
345:11 - then we will stop our timer
345:13 - else we will rotate by increasing
345:15 - degrees by one or a different number if
345:17 - you would like this to be faster
345:20 - take my animation
345:23 - dot style
345:25 - dot transform
345:28 - set the sequel to this string is going
345:30 - to be a little bit awkward
345:32 - let's rotate
345:34 - x
345:36 - parentheses we'll need to insert our
345:38 - degrees within quotes
345:42 - plus degrees
345:44 - plus
345:46 - d e g
345:48 - okay and that should be it
345:49 - so this will rotate my element on the
345:52 - x-axis
345:54 - and it does a full 360 degree turn
345:57 - okay rotate on the y-axis
346:02 - pretty cool right
346:03 - or z
346:08 - hey just for fun let's rotate this
346:10 - element and have it move diagonally
346:12 - across the screen this will just be
346:14 - practice
346:15 - let x equal zero
346:17 - let y equal zero
346:21 - we'll continue this as long as x is
346:23 - greater than or equal to two hundred
346:27 - or y is greater than or equal to two
346:30 - hundred
346:33 - increment x by one
346:36 - increment y by one
346:41 - my animation dot style
346:44 - dot left equals x plus pixels
346:52 - myanimation.style.top equals y plus
346:54 - pixels
346:56 - okay this should move diagonally and
346:58 - rotate
347:00 - okay let's make the spin a little bit
347:02 - faster i'll increase degrees by two
347:06 - or three
347:09 - or a higher number like five
347:13 - okay last one we can scale the size of
347:15 - an image
347:17 - so let's get rid of what we have written
347:18 - currently
347:23 - okay let's create two new variables
347:26 - let scale x
347:28 - equal
347:29 - one one means one hundred percent
347:33 - let
347:34 - scale y
347:35 - equal one as well
347:38 - let's scale this image twice as big our
347:40 - condition to stop is
347:42 - if
347:43 - scale x
347:45 - is greater than or equal to two
347:48 - else
347:49 - scale
347:50 - x plus equals
347:52 - maybe 0.01
347:55 - this would be one percent then we will
347:57 - take my
347:58 - animation
348:00 - dot style dot transform
348:03 - set the sequel to
348:06 - scale
348:08 - then within parenthesis
348:10 - we'll need to insert scale x and scale y
348:14 - plus
348:16 - scale x
348:17 - plus
348:20 - comma
348:20 - plus scale y
348:23 - plus
348:25 - and that should be good if we're only
348:27 - scaling x upwards then this element will
348:30 - expand horizontally
348:32 - if we stop where scale x is three it
348:34 - would expand to be three hundred percent
348:36 - on the x-axis okay let's do this with y
348:39 - scale y
348:44 - y plus equals 0.01 this element will
348:47 - expand on the y-axis
348:50 - then let's do both if
348:52 - scale x
348:54 - is greater than or equal to 2
348:57 - or scale y is greater than or equal to 2
349:00 - then increase both scale x and scale y
349:03 - then this element will expand in both
349:05 - directions or we could shrink an element
349:07 - by scaling down scale x is less than or
349:10 - equal to what about 0.1
349:13 - do the same thing with scale y
349:17 - less than or equal to
349:19 - 0.1
349:21 - then let's decrement scale x and scale y
349:24 - this will cause an image to shrink
349:28 - so yeah those are a few simple
349:30 - animations you can do with javascript if
349:32 - you would like the code that i've
349:33 - written here i'll post this in the
349:34 - comments section down below and well
349:36 - yeah those are a few simple animations
349:38 - with javascript
349:41 - hey guys in this video we're going to
349:43 - draw some simple shapes using the canvas
349:46 - api it's a means for drawing graphics
349:49 - it's useful for animations games and
349:51 - data visualization heading to our html
349:53 - document we'll need to create a canvas
349:55 - element
349:57 - canvas
349:58 - close it
349:59 - i'll give this an id
350:02 - my canvas
350:03 - and we should probably set a width and a
350:05 - height
350:07 - width equals maybe 500
350:10 - and height equals 500 as well
350:13 - let's save there's no apparent change
350:15 - but we do have a canvas here to better
350:17 - visualize it heading to our css file
350:20 - make sure that you link it within your
350:22 - html file
350:23 - we can begin styling the canvas i will
350:25 - select my canvas
350:28 - i'll add a border
350:31 - border one pixel
350:33 - solid
350:34 - black
350:36 - yeah and there's our canvas
350:38 - you can also change the background color
350:40 - too
350:41 - background
350:43 - color
350:44 - and pick a color
350:46 - maybe sky blue
350:48 - that's pretty nice so this is our canvas
350:51 - but just for demonstration purposes i'm
350:53 - going to turn this line into a comment
350:56 - we can begin drawing some shapes
350:58 - let's head to our javascript file
351:00 - i'm going to store my canvas within a
351:02 - workable variable
351:04 - let canvas
351:06 - equal
351:07 - document dot get
351:10 - element by id the id is mycanvas
351:15 - to draw on the canvas we need to get the
351:17 - context
351:18 - and i will store that within another
351:20 - variable let context
351:24 - equal
351:25 - canvas dot get
351:28 - context
351:30 - and there's one argument
351:32 - 2d
351:33 - imagine that context is a painting
351:36 - within a picture frame and the canvas is
351:38 - the picture and the frame together
351:41 - that's how i imagine it at least to draw
351:43 - on the canvas we need to draw on the
351:44 - context the painting itself and not the
351:46 - frame let's begin with a simple line i
351:49 - would like to draw on the context to
351:51 - begin drawing a line i will use the
351:53 - begin
351:54 - path method then we need starting
351:56 - coordinates we'll begin in the top left
351:58 - corner type context dot
352:01 - move
352:02 - 2
352:04 - then pass in a pair of coordinates the
352:06 - top left corner of our canvas is zero
352:08 - zero think of the move to method as if
352:10 - we're placing our brush on the canvas
352:12 - we're picking a starting position to
352:15 - draw a line we have to use the line two
352:17 - method
352:19 - context
352:20 - dot line two
352:23 - then pass in another set of coordinates
352:25 - so the bottom right corner over here
352:27 - would be five hundred five hundred
352:30 - then we will follow this with the stroke
352:32 - method
352:33 - context dot stroke
352:37 - there and there's our line let's pick a
352:39 - different set of coordinates what about
352:40 - right in the middle so 250
352:43 - 250
352:45 - you can continue this line in a
352:46 - different direction just invoke the line
352:48 - two method again
352:50 - i'll take this line from the middle of
352:52 - our canvas to the bottom now i'll follow
352:54 - line two with another line two method
352:57 - if i need to connect the line down here
352:59 - i'll follow line two with two fifty
353:02 - five 500
353:04 - there so we have drawn two lines i would
353:06 - like to draw a line from the top right
353:08 - corner to the middle my brush is
353:10 - currently down here i need to move this
353:12 - brush to the top right corner
353:14 - i will invoke the move two method
353:17 - and the top right corner of my canvas
353:19 - would have coordinates of
353:21 - 500 0.
353:23 - then again invoke the line 2 method
353:27 - and the middle is 250 250.
353:32 - cool we have drawn some lines
353:34 - we can set a line width currently the
353:36 - width is one pixel
353:38 - context dot line
353:41 - width
353:42 - equals what about 10
353:45 - so we have some extra thick lines
353:48 - you can also change the stroke color
353:51 - context dot stroke
353:54 - style
353:55 - equals and pick a color this can be a
353:57 - color name rgb values or hexadecimal
354:00 - values
354:01 - i'll say just purple
354:03 - i like purple
354:04 - we have some purple lines now that's how
354:06 - to draw some lines on our canvas draw
354:09 - lines this time we're going to create a
354:11 - triangle to create a triangle we have to
354:13 - use the line two method
354:16 - we'll type context dot begin path
354:21 - and end this with context dot stroke
354:25 - we'll need to place our brush somewhere
354:27 - maybe the top middle
354:29 - to place our brush down we will use the
354:31 - move to method context
354:33 - move
354:34 - two
354:36 - so the coordinates of the top middle
354:37 - would be
354:39 - 250
354:40 - zero let's draw a line to the middle of
354:43 - the left border
354:45 - context
354:47 - line
354:48 - two
354:49 - that would be
354:51 - zero two fifty
354:54 - let's draw another line
354:57 - line two
354:58 - maybe the opposite side
355:00 - that would be 500
355:02 - 250
355:04 - and another line
355:06 - let's bring it back to the top
355:09 - is 250
355:11 - 0.
355:13 - there we have a triangle there is a fill
355:15 - method to fill this triangle
355:18 - in place of stroke you can use fill you
355:20 - can pick a fill color
355:22 - maybe you want more options than just
355:24 - black
355:25 - so that would be context
355:28 - dot fill
355:30 - style and pick a color
355:32 - maybe yellow
355:36 - if you need a border you can use the
355:38 - stroke method along with the fill method
355:41 - there we have a border around our
355:42 - triangle
355:44 - we can increase the border width
355:46 - technically that's the stroke width
355:49 - context dot line
355:52 - width
355:53 - equals maybe five
355:57 - let's change that to maybe ten
356:00 - there that's better to change the color
356:02 - of the border all you have to do is set
356:04 - the stroke style context dot stroke
356:08 - style
356:10 - equals
356:11 - currently it's black maybe we can pick i
356:13 - don't know gray
356:15 - there we have a gray border
356:17 - so that's how to draw a triangle next
356:19 - we'll move to rectangles
356:21 - to draw an empty rectangle we will use
356:23 - the stroke rect method
356:26 - context dot
356:27 - stroke
356:28 - rect
356:30 - we'll need starting coordinates maybe
356:31 - the top left corner that is 0 0
356:35 - followed by a width and a height
356:38 - so for the width 250 and the height 250
356:40 - as well
356:41 - there
356:42 - we have a rectangle to change the stroke
356:45 - style we can set the stroke style
356:47 - property
356:48 - context dot stroke
356:52 - style
356:53 - equals let's pick i don't know red
356:56 - there so we have a red border
356:58 - i think i'll change that to black though
357:00 - if you need a filled rectangle
357:02 - use the fill rect method so i'm going to
357:05 - copy this paste it
357:08 - and this would be
357:09 - fill rect
357:11 - so this will fill our rectangle if you
357:13 - need to change the fill color we can set
357:16 - the fill style property
357:18 - context dot
357:20 - fill
357:21 - style
357:23 - and pick a color maybe red again
357:26 - there we have a red rectangle with a
357:28 - black border to change the border
357:30 - thickness you just have to change the
357:32 - line width property
357:35 - i'll keep that as it originally was
357:38 - okay let's create another rectangle
357:41 - so i'll copy this
357:43 - paste it
357:44 - i'll make the original one black let's
357:47 - place the second rectangle directly
357:48 - underneath the first
357:50 - so the starting position would be
357:52 - 0
357:54 - 250
357:55 - and the stroke would be 0 250 as well
357:58 - there let's create another this will be
358:00 - a
358:01 - green square and the starting corner
358:03 - will be 250 250 same thing with the
358:06 - stroke okay last one let's fill in this
358:08 - empty space
358:10 - a blue square
358:12 - and this will begin at this point
358:15 - that is
358:17 - 250 0
358:19 - for the coordinates
358:22 - so yeah we have successfully drawn four
358:24 - squares okay this time we're going to
358:26 - draw a circle
358:28 - context
358:29 - dot
358:30 - begin
358:31 - path
358:33 - and we will end the section with context
358:36 - dot stroke
358:38 - to draw a circle we will use the arc
358:40 - method
358:41 - context.arc
358:44 - and there's a few arguments
358:46 - starting coordinates for the center of
358:47 - our circle
358:48 - if i place the starting coordinates at 0
358:50 - 0
358:51 - the center of my circle will begin in
358:53 - the top left corner of my canvas
358:56 - then a radius what about 100
358:59 - for the next two arguments we need a
359:01 - starting angle and ending angle in
359:03 - radians
359:04 - for a full circle that would be zero 2
359:08 - then multiply 2 by
359:10 - math dot pi
359:13 - there well it's a part of a circle
359:16 - but the center is starting the top left
359:18 - corner i'll set the x and y coordinates
359:20 - to 100
359:23 - there that's much better
359:25 - what about the middle 250
359:28 - 250
359:30 - i'll increase the radius to maybe 200.
359:34 - the starting angle and ending angle are
359:36 - in radians
359:38 - so you can change these for an
359:39 - incomplete circle
359:41 - if you ever need to reverse these
359:43 - pass in true for the last argument
359:47 - this would probably be helpful to you if
359:48 - you have a pie chart to work on
359:51 - okay let's fill the circle
359:53 - context dot fill
359:58 - let's change the color
359:59 - that would be fill style context
360:03 - fill style
360:05 - i'll set this to maybe light blue let's
360:07 - try draw bubble
360:09 - and i'll give this a thicker stroke for
360:11 - the border
360:14 - context dot line with property equals
360:19 - maybe 10.
360:21 - i'll change the color as well
360:24 - context dot stroke
360:26 - style
360:28 - equals
360:30 - maybe dark blue
360:33 - sweet
360:34 - so yeah that's how to draw a circle
360:36 - and for this last section we'll draw
360:38 - some text
360:40 - draw
360:41 - text
360:43 - to draw some text you would type context
360:47 - dot
360:48 - fill
360:49 - text
360:50 - what's some text we would like to add
360:52 - maybe you win
360:55 - then we need some coordinates let's
360:57 - begin at zero zero
360:59 - you can't really see it right now it's
361:01 - above the top left corner let's bring it
361:03 - down a little bit 100 100
361:07 - there although it's very small let's
361:09 - change the font
361:11 - context
361:12 - dot font property equals and pick a font
361:16 - maybe 50 pixels and the font style will
361:19 - be you know pick whatever you want but i
361:21 - like mv bully
361:24 - that's better
361:25 - we can change the fill style that's the
361:28 - font color
361:30 - context dot
361:32 - fill
361:33 - style
361:34 - equals maybe gray
361:38 - now if you need to center some text
361:40 - within a canvas this is what you can do
361:43 - we'll need to calculate half of our
361:45 - canvas's width
361:47 - so as the second argument within the
361:48 - fill text method type canvas dot width
361:53 - divided by two do the same thing with
361:55 - the height
361:59 - canvas dot height divided by 2.
362:02 - we're almost there
362:04 - we will need to set the text align
362:05 - property to center
362:07 - preceding our fill text method
362:10 - context dot
362:12 - text
362:13 - align
362:14 - equals center
362:17 - and that's how to center some text
362:19 - so yeah everybody those are a few simple
362:22 - shapes along with text that you can draw
362:24 - on a canvas
362:25 - if you would like a copy of this code
362:27 - i'll post this in the comments section
362:28 - down below and well yeah that's an
362:31 - introduction to the canvas api in
362:33 - javascript
362:35 - hey guys in this video i'm going to
362:37 - explain the window object it's an
362:39 - interface used to talk with the web
362:41 - browser and actually the dom the
362:43 - document object model is a property of
362:45 - the window let's examine this window
362:47 - object i will use console.dir
362:51 - and pass our window as an argument
362:54 - here's our window object
362:56 - it has its own properties and methods
362:59 - one of which is document the document
363:01 - object model by interacting with the
363:03 - properties and methods of our window we
363:05 - can change the behavior of our web
363:07 - browser let's cover a few
363:09 - i need the width and height of this
363:12 - inner window to do that i would type
363:13 - window dot inner width
363:16 - and window dot inner height
363:20 - i'll place these within console.log to
363:22 - display it console.log
363:27 - the inner width of this window is 383
363:30 - pixels and the height is 263 but we
363:33 - could change these
363:35 - now the width is 488 and the height is
363:38 - 208 there's also outer width and outer
363:41 - height
363:44 - so these are now respectively 871 and
363:46 - 984 another is scroll x and scroll y but
363:50 - we'll need some scroll bars within our
363:52 - window i'll create a very large
363:54 - development div
363:56 - id equals my
363:59 - div
364:00 - i'll close it
364:02 - and add these properties a width of 1000
364:05 - a height of 1000 and a background color
364:08 - so we have these scroll bars now within
364:10 - our window
364:11 - i can get the scroll x and scroll y
364:13 - properties to shown how far that we have
364:15 - scrolled console.log
364:18 - window dot scroll x
364:22 - and scroll
364:24 - y
364:27 - scroll x is this value 631 and scroll y
364:31 - is this value 758. if i were to place
364:34 - these back in their original positions
364:36 - well then these values are both zero
364:38 - that is scroll x and scroll y i'll get
364:40 - rid of this div element
364:43 - we can change the href property of this
364:45 - window so that it redirects somewhere
364:47 - else i'll display that
364:50 - console.log
364:51 - window now href is found within location
364:57 - dot window.location.href
364:58 - the current href property has this
365:00 - address it's basically my web address
365:03 - but we could redirect it somewhere else
365:06 - window.location.href equals pick a
365:09 - website maybe google https
365:12 - colon2forwardslashes google.com
365:15 - this should redirect me to google
365:17 - yeah
365:18 - hey if you need the host name that would
365:20 - be
365:21 - window dot location dot host name here's
365:26 - my host name it's just a local ip
365:28 - address
365:30 - 127.0.0.1 if you need the path name that
365:33 - would be
365:34 - window dot
365:36 - location dot
365:38 - path name
365:39 - and my path name is forward slash
365:42 - index.html for me this would be the
365:44 - landing page here's a few useful methods
365:47 - we're going to create a button though
365:50 - button id equals my button
365:55 - let's close it
365:57 - i'll add some text just buttons fine
366:00 - i'm going to select this button constant
366:02 - my button
366:04 - equals document
366:06 - dot i'll use query selector this time
366:08 - query selector
366:11 - the id was my button
366:14 - and let's add some event listeners
366:17 - when i click on this button i would like
366:18 - to open a new window
366:20 - i'll take my button invoke the add event
366:24 - listener method
366:28 - when we click
366:29 - i will perform a function i'll use an
366:32 - arrow function expression
366:34 - and i will invoke the windows open
366:37 - method
366:38 - when we click on this button it opens a
366:40 - new window
366:41 - you could pass the url within the open
366:44 - method
366:46 - i'll place this address for google as an
366:48 - argument
366:49 - then when i click on the button it takes
366:51 - me to that website
366:52 - another is close
366:54 - window dot close
366:57 - this will close the current window when
366:59 - i click on this button it closes the
367:02 - window okay another method is print
367:05 - window dot print
367:07 - and we can print the current page so
367:09 - when i click this button
367:12 - we initiate the process of printing this
367:14 - page
367:15 - we do have a few pop-ups too
367:17 - window dot alert
367:22 - i'll just display the message hello
367:24 - hello
367:25 - there's also window.confirm we can have
367:28 - a user confirm something
367:32 - press ok to continue
367:36 - press ok to continue
367:39 - window.prompt is another
367:42 - window dot
367:44 - prompt enter your age
367:49 - let's store this within a variable
367:51 - let age equal
367:53 - window dot prompt
367:56 - if age is less than 18
368:00 - let's create an alert
368:02 - window dot alert
368:05 - you must be 18 plus to visit this site
368:11 - then we will close the window window dot
368:14 - close
368:15 - okay enter your age let's say that i'm
368:17 - 12 i press ok
368:19 - you must be 18 plus to visit the site
368:21 - then it closes the window
368:24 - well okay then everybody that is the
368:26 - window object it's an interface used to
368:28 - talk with the web browser there's a lot
368:30 - of useful properties and methods related
368:32 - to the window object if you would like a
368:34 - copy of all my code i'll post all of
368:36 - this in the comments section down below
368:38 - and well yeah that's an introduction to
368:40 - the window object using javascript
368:45 - hey guys in this video i'm going to
368:46 - explain cookies a cookie is a small text
368:50 - file that is stored on your computer
368:52 - it's used to remember information about
368:53 - a user data within a cookie is saved in
368:57 - name value pairs in order to check to
368:59 - see if we have cookies enabled within
369:01 - console.log i can type navigator dot
369:06 - cookie
369:07 - enabled
369:08 - for me that's true i have cookies
369:10 - enabled to add a cookie we would type
369:13 - document.cookie
369:16 - we will set the sequel to a string but
369:18 - the string has certain components first
369:20 - is a name value pair i would like to
369:22 - create a cookie to store a user's first
369:25 - name the name of this pair will be let's
369:27 - say first name set the sequel to some
369:30 - value the value that i will pick is
369:33 - spongebob
369:34 - then end it with a semicolon now you can
369:36 - add an expiration date when the current
369:38 - time has passed a certain expiration
369:40 - date well then this cookie will be
369:42 - deleted to set an expiration date set
369:44 - expires equal to then pick a date i'll
369:48 - pick sunday
369:50 - first january
369:53 - maybe a date that's really far out like
369:55 - 20 30.
369:56 - at midnight
369:59 - utc
370:01 - then semicolon we're also able to set a
370:03 - path for this cookie i'll use the
370:05 - default path that would be path equals
370:07 - forward slash okay let's take a look at
370:10 - this cookie
370:11 - console.log
370:13 - document dot cookie even though this
370:16 - appears to be a string it's actually an
370:18 - object the expiration date and the path
370:21 - aren't displayed all that's displayed is
370:23 - the name and the value you can add more
370:25 - than one cookie so again we will type
370:27 - document.cookie
370:29 - let's copy this text
370:31 - paste it
370:33 - last
370:34 - name
370:35 - last name equals square
370:39 - pants
370:40 - then let's take a look at our cookie
370:42 - again
370:43 - the cookie property of our document can
370:45 - hold more than one cookie but to access
370:48 - it you would just type cookie to
370:49 - overwrite a cookie you would just change
370:51 - the value of a name value pair if i
370:54 - overwrite the first name and the last
370:55 - name they'll change this time let's set
370:58 - first name to patrick
371:00 - last name star there we go first name
371:03 - patrick last name star if we change the
371:05 - expiration date to a date that has
371:07 - already passed that will delete this
371:09 - cookie it'll expire so maybe the last
371:12 - name expired in the year 2000
371:15 - that last name portion of my cookie is
371:17 - no longer there so that's how to expire
371:19 - a cookie at this point we're going to
371:21 - create a function to create a cookie
371:23 - instead of doing so manually
371:26 - function set
371:28 - cookie we'll need a few things
371:31 - a name because these are a name value
371:33 - pairs
371:35 - a value
371:36 - and an expiration date although that's
371:38 - optional for the third argument let's
371:40 - name this parameter days to live as an
371:44 - argument you'll pass a number of days
371:46 - that you would like this cookie to be
371:47 - set to expire 365 would be one year
371:50 - let's create a date object
371:52 - const
371:53 - date equals new date i will set the time
371:57 - of this date date
371:59 - dot set
372:00 - time method within the parentheses we
372:03 - will take date dot get time
372:06 - this will return the current time in
372:08 - milliseconds then add the amount of days
372:10 - to live converted to milliseconds
372:13 - days to live
372:15 - times 24 hours
372:18 - times
372:19 - 60 minutes
372:21 - times 60 seconds
372:24 - times 1000 for 1000 milliseconds our
372:27 - future date is currently in milliseconds
372:30 - we'll convert that to utc string date
372:34 - to
372:35 - utc
372:36 - string method i'll assign this to a
372:38 - variable
372:40 - let
372:41 - expires
372:43 - equals
372:44 - and then we'll use some string
372:45 - concatenation we'll need to set this
372:48 - expires value
372:49 - so within quotes expires
372:52 - equals plus
372:55 - our future date converted to a utc
372:57 - string then we can assign our cookie
373:00 - document.cookie equals i'll use a
373:03 - template literal
373:05 - we're inserting our name that we pass in
373:07 - equals
373:09 - our value
373:12 - add a semicolon to finish this section
373:15 - then the expire section
373:18 - expires
373:20 - then you could also add a path if you
373:21 - would like
373:22 - path equals forward slash that's the
373:25 - default path okay now let's create some
373:27 - cookies i will invoke our set cookie
373:30 - function
373:31 - pass in a name value pair and the amount
373:34 - of days i would like this cookie active
373:36 - what about an email address
373:38 - email
373:40 - make up some email address
373:42 - sponge
373:44 - gmail.com
373:46 - i would like this cookie to live for 365
373:48 - days then let's display our cookies
373:52 - console.log
373:54 - document dot
373:56 - cookie
373:58 - and here's our cookies we still have our
374:01 - first name and last name because we
374:02 - never deleted them but we do have an
374:04 - email now email equals sponge gmail.com
374:08 - how can we delete a cookie all we have
374:10 - to do is set the expiration date to a
374:12 - pass date here's one easy way to do that
374:15 - let's create function
374:17 - delete
374:18 - cookie
374:20 - all we'll need is a name
374:22 - what we'll do is invoke set cookie
374:26 - pass our name as an argument
374:29 - null for the value and null for the days
374:31 - to live if i was to invoke the delete
374:33 - cookie method and pass in the name email
374:36 - well that email cookie is no longer in
374:38 - here so it's gone let's delete the other
374:40 - cookies too
374:42 - delete
374:43 - first name
374:44 - delete last name
374:47 - and those three cookies are cleared
374:49 - let's create a function to get the value
374:51 - of a cookie by a name let's declare this
374:54 - function function
374:56 - get
374:57 - cookie
374:59 - we'll accept a name as an argument what
375:02 - we'll need to do is decode our cookie
375:04 - i'll store this within a constant
375:06 - constant
375:07 - c for cookie
375:09 - decoded
375:11 - equals
375:12 - decode
375:14 - uri
375:16 - component
375:18 - then pass in
375:20 - document.cookie
375:22 - let's take a look at this
375:24 - console.log
375:28 - c decoded let's make sure we have at
375:30 - least two cookies
375:32 - set cookie
375:35 - first name
375:38 - spongebob
375:40 - 365 days to live
375:45 - set cookie last name
375:48 - squarepants
375:51 - then i will invoke the getcookie method
375:56 - then pass in a name first name is fine
375:59 - okay let's see what we have this is
376:01 - what's stored within c decoded we have
376:03 - our name value pairs what we'll need to
376:05 - do is split each of these name value
376:08 - pairs at each of these semicolons that's
376:10 - how to separate them so after this first
376:13 - statement we'll take
376:14 - c decoded
376:16 - and split at each semicolon semicolon
376:19 - space this will return an array we'll
376:22 - store that within const
376:24 - c
376:25 - array
376:26 - cookie array let's display cookie array
376:31 - console.log cookie array each of those
376:34 - name value pairs is now within separate
376:36 - elements what we're going to do is for
376:38 - each element we'll check to see if
376:40 - there's a match between each of these
376:41 - element names and the name that we're
376:43 - looking for let's take our cookie array
376:46 - c array
376:47 - and use the for
376:49 - each method
376:50 - i'll use an arrow function expression
376:52 - there is one parameter element arrow
376:56 - what would we like to do for each
376:57 - element
376:59 - i'll use an if statement
377:01 - let's check to see if
377:03 - our element
377:04 - at index of
377:07 - the name that we're looking for
377:09 - is equal to zero say that we're looking
377:12 - for last name we'll iterate over each
377:14 - element of our array and see if there's
377:17 - a match we check the first element these
377:19 - don't match but this one does if there's
377:22 - a match then let's return the result
377:24 - results
377:26 - equals
377:27 - and we'll create a substring
377:29 - element.substring
377:34 - name dot length plus one the length of
377:38 - the name plus one will create a
377:40 - substring and return this text so let's
377:42 - declare
377:44 - let result
377:46 - at the end
377:48 - return
377:49 - result
377:50 - actually i'm going to set result to null
377:53 - okay let's see if this works
377:55 - so we have two cookies
377:57 - and i'm going to console.log
378:00 - getcookie
378:01 - pass in my first name
378:03 - and that first name is spongebob
378:07 - let's get last name
378:08 - last name
378:10 - spongebob and squarepants okay yeah
378:13 - that's how to set delete and get cookies
378:16 - let's take this a step further let's
378:17 - create some text fields a submit button
378:20 - and a get cookies button heading to our
378:22 - html file let's create some text fields
378:25 - and some labels
378:27 - label
378:28 - for
378:29 - equals
378:31 - first text
378:35 - first name colon
378:38 - close the label
378:41 - input
378:42 - id equals first text
378:46 - i'll add a line break
378:49 - let's do the same thing with last name
378:52 - last text
378:55 - last name
378:57 - id is last text
379:00 - i'll create a submit button
379:03 - button id equals
379:06 - submit
379:07 - now let's name this btn for short submit
379:09 - button
379:12 - will be
379:15 - submit
379:17 - then a get cookies button
379:21 - cookies btn for button the text will be
379:25 - get
379:27 - cookies
379:29 - okay heading back to our javascript file
379:32 - let's select these elements
379:34 - const
379:36 - first text
379:38 - equals document
379:40 - dot
379:41 - query selector
379:44 - we're selecting the id of first text
379:51 - let's do the same thing with last text
380:01 - our submit button
380:03 - submit button
380:09 - then cookie button
380:13 - cookie
380:14 - button
380:19 - i'm going to add an event listener to
380:20 - our submit button
380:22 - submit button dot add
380:25 - event
380:26 - listener
380:29 - the event attribute will be click
380:32 - when we click we're going to perform an
380:34 - arrow function expression
380:37 - we will set the cookies according to
380:39 - what these values are within these text
380:41 - boxes we will invoke the set cookie
380:44 - function
380:46 - the name will be first name
380:49 - the value will be whatever's within our
380:51 - text boxes
380:53 - first text
380:55 - dot value
380:57 - and days to live i'll set this to be a
380:59 - year
381:00 - 365 days
381:02 - let's do the same thing with our last
381:05 - name
381:06 - set cookie last name
381:09 - last text.value
381:12 - let's add an event listener to our
381:13 - cookie button that will populate the
381:15 - fields that function will search for any
381:17 - cookies and return a value okay we have
381:20 - cookie button add event listener
381:23 - click
381:26 - first text
381:28 - dot value
381:30 - equals
381:31 - get
381:32 - cookie
381:35 - then the name of the cookie first name
381:38 - do the same thing with last text last
381:41 - text
381:42 - value gut cookie
381:44 - last name
381:51 - whoops looks like i misspelt this id
381:53 - cookie button now before we run this i'm
381:55 - just going to delete our cookies
381:58 - delete cookie
382:00 - first name
382:03 - delete cookie last name
382:08 - then save and run it
382:11 - so when i press get cookies well we
382:13 - don't have any first name or last name
382:15 - cookies there's nothing to populate
382:17 - these text fields so i'm going to type
382:19 - in a first name and a last name
382:21 - spongebob
382:23 - squarepants
382:25 - press submit
382:27 - this first name and last name are stored
382:28 - as cookies now so i'm going to refresh
382:31 - this page press that get cookies button
382:33 - again that will populate these text
382:35 - fields with the cookies i have so yeah
382:38 - everybody that's an introduction to
382:39 - cookies their small text files stored on
382:42 - your computer they're used to remember
382:44 - information about the user and they're
382:46 - saved in name value pairs if you would
382:48 - like a copy of all this code i know
382:50 - there's a lot here i'll post all of this
382:52 - in the comment section down below and
382:53 - well yeah that's an introduction to
382:55 - cookies using javascript
382:58 - hey what's going on everybody it's you
382:59 - bro hope you're doing well and in this
383:01 - video we're going to create an
383:02 - interactive stopwatch using javascript
383:05 - so sit back relax and enjoy the show
383:09 - sup guys let's create a stopwatch head
383:12 - to your html file then we will create a
383:14 - container to hold our stopwatch
383:17 - div
383:18 - id equals i'll name this time
383:21 - container
383:22 - then we're gonna close it within our
383:24 - time container let's add a div for the
383:27 - time display
383:29 - id equals time display i'll add a time
383:34 - zero zero
383:35 - colon zero zero colon zero zero hours
383:38 - minutes and seconds
383:40 - let's close that div section we'll add
383:42 - three buttons start pause and restart
383:46 - button id equals
383:49 - start button
383:51 - i'll put this within a class class
383:53 - equals
383:55 - timer button
383:57 - let's close the button add some text
384:00 - the text will be start
384:02 - let's copy this button
384:04 - paste it two times
384:06 - the second button is a pause button
384:10 - the text will be pause
384:13 - next will be a reset button reset the
384:16 - text is reset
384:19 - that is everything for our html file
384:20 - let's head to our css file let's begin
384:23 - by adding some properties to the timer
384:26 - button class
384:27 - i'll set a width
384:29 - of 80 pixels
384:33 - a height
384:34 - of 30 pixels
384:38 - a border
384:40 - 3 pixels solid is good
384:45 - a border radius of
384:49 - 12 pixels
384:51 - a background color
384:55 - uh let's select a hexadecimal value pick
384:58 - whatever color you want i'm going to
385:00 - pick a dark gray color you can always
385:02 - use a color picker to select the color
385:04 - i'll set the color to be white
385:08 - i'll set the cursor to be a pointer
385:11 - when we hover our cursor over that
385:13 - button then we have a cursor pointer
385:16 - then i'll change the font family font
385:19 - family
385:20 - i'll pick this font
385:22 - with the backup of monospace
385:26 - yeah cool
385:27 - let's change the time display right here
385:30 - this is an id
385:32 - time display
385:36 - i'll edit the font size font dash size
385:40 - this will be 75 pixels
385:44 - i'll select a color
385:46 - uh go ahead and pick a color
385:48 - i'll select maybe
385:51 - that that looks good
385:58 - sweet i'll change the font family
386:02 - then let's add a background color and
386:04 - center everything
386:06 - this will be our time container
386:10 - text align
386:12 - center
386:15 - i'll add a border
386:17 - 3 pixel solid
386:20 - border
386:21 - radius of 25 pixels
386:25 - background
386:27 - color
386:29 - of this is a dark gray color six twos
386:33 - yeah there we go so there's our css
386:35 - styling our css styling is done our html
386:39 - file is done let's head to our
386:40 - javascript file
386:42 - let's select all the elements that we'll
386:43 - need first is the time display let's get
386:46 - that id
386:47 - time display i'll store this as a
386:50 - constant const time display equals
386:54 - document
386:55 - dot
386:56 - query
386:57 - selector
387:00 - we're selecting an id
387:02 - the id is time display
387:06 - next is our start button let's copy this
387:09 - paste it
387:11 - start
387:12 - button
387:15 - start
387:16 - button
387:19 - then our pause
387:20 - button pause button
387:24 - pause button
387:26 - then reset button
387:28 - reset button
387:31 - the id is reset button
387:34 - here's the variables we'll need
387:36 - let
387:37 - start time
387:39 - i'll go ahead and set this to zero right
387:40 - away
387:42 - let
387:43 - elapsed time
387:45 - equal zero
387:47 - let
387:49 - current time
387:50 - equal zero
387:52 - let paused this will be a boolean
387:55 - variable
387:56 - if our timer is currently paused we'll
387:58 - set this to be true false if it's
388:00 - running
388:02 - let
388:03 - interval id
388:05 - let hours hrs is fine
388:08 - equals zero
388:10 - let
388:11 - mins for minutes equals zero
388:14 - let then sec four seconds
388:17 - equals zero here's what we're going to
388:19 - do we're going to add event listeners to
388:20 - each of our buttons
388:22 - start pause and reset
388:25 - add
388:26 - event
388:28 - listener
388:31 - i'll fill these in momentarily
388:36 - pause button
388:37 - then reset button
388:39 - then we'll declare a function to update
388:41 - our time
388:43 - function
388:44 - update time
388:47 - let's fill in these event listeners
388:48 - these will each be
388:50 - click
388:51 - we'll use an arrow function expression
388:55 - i'll just copy this and paste it
389:00 - okay let's begin with our start button
389:04 - we'll check to see if paused is true
389:08 - if
389:09 - paused
389:13 - we'll take paused
389:15 - set it to false
389:19 - calculate the start time
389:21 - start time equals date dot now method
389:26 - the now method of date will give you the
389:28 - current date and time in milliseconds
389:31 - minus elapsed
389:34 - time which will initially be zero to
389:36 - begin with
389:37 - then we'll begin our timer
389:40 - interval id
389:43 - equals set
389:45 - interval
389:47 - we'll need a callback the callback will
389:49 - be update time
389:51 - let's invoke this function every maybe
389:54 - 75 milliseconds that should be good
389:56 - enough
389:58 - let's fill in the update time function
390:01 - we'll calculate how much time is passed
390:04 - elapsed time
390:06 - equals
390:07 - whatever time it is right now date.now
390:10 - method
390:12 - minus the original start time
390:14 - this will be a time in milliseconds
390:17 - we'll have to format it so that we can
390:19 - display it within our timer
390:22 - let's take our seconds
390:24 - set the sql to
390:26 - math.floor method
390:30 - we will pass in our elapsed time
390:34 - divided by 1000 because it's normally in
390:36 - milliseconds modulus 60.
390:41 - i'm going to put these within
390:42 - parentheses
390:44 - it's a similar process for minutes
390:48 - except this section is 1000
390:51 - times 60.
390:52 - that will be 60 000 milliseconds in
390:55 - every minute
390:56 - let's calculate the hours
391:03 - hours
391:05 - 1000 times 60
391:08 - times 60.
391:10 - then we'll need to update our display
391:13 - that is time display
391:17 - dot text
391:19 - content
391:20 - equals i'll use a template literal
391:23 - will display the hours
391:26 - colon
391:28 - the minutes
391:31 - then the seconds
391:33 - let's take a look to see what we have so
391:35 - far
391:36 - we'll have one issue
391:38 - let's press start
391:40 - you can see that it's currently running
391:42 - but when we display zeros i would like
391:44 - two zeros let's add a zero as padding
391:46 - for any single digit numbers
391:48 - i'll create an inner function
391:51 - function
391:52 - pad
391:53 - will accept a unit
391:57 - we will return
392:00 - this will be a ternary operator
392:04 - it might be a little difficult to
392:05 - understand
392:06 - so we're going to add a zero to the
392:08 - front of our unit whatever we pass in
392:11 - hours minutes and seconds
392:13 - we'll access the length property
392:16 - if we add a zero to our unit
392:19 - what's the length is that length greater
392:22 - than two question mark
392:24 - if it is
392:25 - we'll simply return unit
392:28 - otherwise
392:30 - we'll prepend a zero plus unit
392:35 - then we'll invoke the pad function
392:39 - our seconds equals invoke pad
392:43 - pass in our seconds
392:45 - do the same thing with minutes and hours
392:50 - minutes
392:55 - hours
392:56 - then let's move this line down
393:00 - right about here
393:02 - okay we should have some zeros as
393:04 - padding now
393:06 - yeah there we go one two three
393:09 - so we have no way to pause this timer
393:11 - let's work on that next
393:13 - let's head to our pause button
393:16 - we'll check to see if
393:19 - not
393:20 - paused
393:23 - then we will set paused equal to true
393:28 - we'll calculate the elapsed time
393:32 - equals date dot now
393:35 - minus our start time
393:39 - this will save how much time has passed
393:41 - in milliseconds
393:43 - then clear our set interval method
393:47 - clear
393:48 - interval
393:50 - we'll pass our id as an argument
393:53 - okay now we should be able to start our
393:54 - timer
393:56 - one
393:57 - two
393:58 - three and pause
394:01 - and you can see that it's paused
394:03 - lastly reset this one's kind of easy
394:05 - head to our reset button
394:09 - we'll take paused
394:10 - set that to true
394:13 - clear our timer
394:16 - take start elapsed and current time
394:18 - set them all to zero
394:22 - take hours minutes and seconds
394:24 - set them to zero
394:28 - then lastly change our time display to
394:30 - all zeros
394:32 - time
394:34 - display
394:35 - dot text
394:37 - content
394:38 - equals
394:39 - zero zero colon zero zero colon zero
394:42 - zero
394:43 - oh then make sure you don't add this let
394:45 - keyword then we're creating a local
394:47 - variable
394:50 - this should work now
394:53 - one two three we can pause
394:56 - we can reset we can start again
395:00 - and reset all right everybody that is a
395:02 - simple timer if you'd like to make a
395:04 - more advanced version you could add
395:06 - milliseconds and well yeah that's a
395:08 - basic stopwatch using javascript
395:11 - hey guys in this video we're going to
395:13 - create a game of rock paper scissors
395:15 - using javascript so sit back relax and
395:18 - enjoy the show
395:20 - all right then everybody in this video
395:22 - we're going to be creating a game of
395:24 - rock paper scissors we'll be using html
395:27 - elements javascript code and styling
395:29 - with css
395:31 - let's head to our html document
395:33 - i'll create a div section to contain our
395:35 - game
395:36 - div
395:38 - id equals i'll name this game
395:42 - div
395:43 - we'll close it
395:48 - i'll create three labels one for the
395:50 - player the computer and the result who
395:52 - won
395:54 - these will be h1 header tags
396:01 - i'll give each of these header tags a
396:03 - class
396:04 - class equals
396:06 - game
396:07 - text
396:12 - i'll give the first h1 header tag a
396:14 - unique id of player text
396:18 - the second header tag will be computer
396:21 - text
396:23 - third will be
396:26 - result text
396:30 - the first h1 header tag will have this
396:32 - initial text
396:34 - player colon space
396:37 - then
396:38 - computer
396:39 - colon space
396:42 - result colon space
396:45 - let's add three buttons
396:47 - for rock paper scissors
396:53 - button close it
396:56 - each of these buttons will have a class
396:58 - class
396:59 - equals
397:01 - choice
397:03 - button
397:06 - we'll need three buttons
397:08 - add some text
397:11 - rock
397:14 - paper
397:17 - scissors
397:19 - that's everything for now
397:21 - let's head to our javascript file
397:24 - let's select all of the elements that
397:25 - we'll need
397:27 - we'll begin with the player text
397:30 - const
397:31 - player text
397:32 - equals document dot
397:35 - query
397:37 - selector
397:38 - we are selecting
397:40 - an id that id was player text
397:45 - we'll select the computer text
397:48 - const
397:50 - computer text the id was computer text
397:56 - we'll select the result text
398:00 - const
398:02 - result text the id was result text
398:07 - then we will select all of the buttons
398:11 - const
398:12 - choice
398:14 - buttons
398:16 - equals
398:18 - document dot
398:20 - query
398:21 - selector
398:23 - all
398:25 - we are selecting the choice button class
398:30 - we'll create three variables let player
398:33 - to store the player's choice
398:35 - let computer
398:36 - for the computer's random choice
398:39 - let result
398:41 - to display who won
398:43 - we'll iterate over our choice buttons
398:45 - using the for each method
398:47 - choice buttons
398:49 - for each
398:51 - we'll use an arrow function expression
398:55 - for each button within our choice
398:57 - buttons array
398:59 - we will use an arrow function i'm going
399:02 - to add an event listener to each of
399:03 - these buttons within the arrow function
399:05 - expression
399:07 - button
399:08 - dot
399:09 - add
399:10 - event
399:11 - listener
399:14 - the event is
399:15 - click
399:16 - when we click on a button we're going to
399:18 - do something
399:20 - within the ad event listener we'll add a
399:22 - second arrow function expression
399:24 - there are no arguments
399:26 - arrow
399:30 - we're gonna do a bunch of stuff
399:31 - so let's expand this
399:33 - when we click on a button what are we
399:35 - going to do
399:36 - let's take our player
399:38 - this is our player's choice
399:40 - set the sequel to
399:42 - whatever button we select
399:45 - and get the text content
399:49 - if we click on this rock button then our
399:51 - player variable contains the string rock
399:54 - same thing goes with paper and scissors
399:56 - if we select those then we will invoke
399:59 - the computer's turn
400:01 - computer
400:02 - turn
400:04 - function
400:05 - we'll need to declare this function
400:08 - outside of our for each method let's
400:10 - declare this computer turn function
400:12 - function computer turn
400:16 - we'll select a random number between one
400:18 - and three
400:21 - const brand number
400:25 - equals
400:26 - math.floor
400:29 - we'll need a random number
400:32 - math.random method
400:35 - there's only three choices we'll
400:36 - multiply this by three
400:40 - then add one
400:41 - this will give us a random number
400:43 - between one and three
400:45 - we can examine this random number with a
400:46 - switch
400:48 - switch
400:50 - rand number
400:53 - we'll find any matching cases
400:56 - case one
400:58 - computer
401:00 - will equal the string
401:02 - rock
401:04 - then break
401:09 - case two computer equals paper
401:16 - case three computer equals scissors
401:21 - and that's it for the computer turn
401:23 - function
401:24 - the player variable will be assigned a
401:26 - string as well as the computer
401:28 - next what we'll need to do is set the
401:29 - text with our choices
401:32 - player text dot text
401:35 - content
401:36 - equals i'll use a template literal
401:40 - player colon space
401:43 - i'll add a placeholder
401:45 - player
401:47 - let's do the same thing with computer
401:52 - computer text
401:53 - text content
401:55 - computer
401:58 - computer
402:00 - then the results text
402:06 - result text dot text content
402:09 - we will set the sql to
402:12 - invoke a check winner function
402:16 - we'll need to define this function
402:18 - let's do that after the computer turn
402:21 - function
402:23 - function
402:24 - check winner
402:28 - first we'll compare if our player and
402:30 - computer strings are the same
402:32 - if player
402:33 - is equal to computer
402:36 - we will return a value
402:38 - this will be a string
402:40 - draw it's a tie
402:44 - else if
402:47 - computer
402:49 - is equal to
402:51 - rock
402:55 - i'm going to return
402:56 - then use the ternary operator our
402:59 - condition is if
403:01 - player
403:02 - is equal to paper
403:04 - question mark
403:07 - if the computer is equal to rock
403:09 - is the player equal to paper
403:11 - if so then we will return a string
403:15 - you
403:16 - win
403:18 - if this condition is false we'll return
403:20 - a different string
403:22 - you
403:23 - lose
403:25 - okay let's create another elsif
403:26 - statement else if computer is equal to
403:30 - paper
403:31 - and the player is equal to
403:34 - scissors
403:38 - add another else if statement
403:41 - else if the computer is equal to
403:44 - scissors and the player is equal to rock
403:49 - and that should be it let's test it
403:52 - okay rock
403:54 - it's a draw paper you lose
403:58 - scissors you win
404:00 - alright so that is the logic of our game
404:03 - hey for fun let's style this using css
404:09 - let's begin with our game development
404:11 - that surrounds our game
404:13 - let's take this id we will style game
404:16 - div it's an id
404:18 - i'll set the font
404:20 - family
404:21 - to
404:24 - brush
404:25 - script
404:27 - mt
404:29 - if my web browser can't display this
404:31 - font i'll have a fallback of cursive
404:36 - i'll add a border
404:38 - three pixels solid
404:42 - i'll round the corners
404:45 - border
404:47 - radius
404:48 - 25 pixels
404:51 - that's better but let's add some padding
404:54 - padding
404:56 - 10 pixels is good
404:58 - i'll add a background color
405:01 - background dash color
405:03 - maybe light gray
405:07 - i'll align the text in the center
405:10 - text
405:11 - align
405:12 - center
405:14 - okay we're getting somewhere
405:17 - let's select these buttons they all have
405:19 - the same class
405:21 - that class is choice button
405:24 - i like to add classes at the top
405:27 - choice button class
405:29 - let's change the line
405:31 - height to
405:33 - 30 pixels
405:37 - then set a width because all of these
405:39 - buttons have different widths to
405:41 - accommodate the text
405:42 - i would like them all to be uniform
405:44 - width
405:46 - of
405:47 - pixels is good
405:49 - uh let's expand this a little bit
405:52 - there let's select our player text
405:55 - id player text
405:59 - i'll change the color of the text color
406:03 - pick a color
406:04 - i'll be blue
406:07 - let's do the same thing with computer
406:09 - text
406:12 - id computer text
406:14 - i think the computer should be red
406:17 - okay let's try this one last time
406:20 - rock
406:21 - paper
406:22 - scissors
406:24 - well alright everybody that is a basic
406:26 - game of rock paper scissors for
406:28 - beginners
406:29 - if you would like a copy of my
406:30 - javascript code as well as the html and
406:33 - the css markup i'll post all of this in
406:35 - the comments section down below and pin
406:37 - it to the top be sure to check
406:39 - underneath the original video in the
406:40 - playlist but yeah that is a basic game
406:43 - of rock paper scissors using javascript
406:46 - hey what's going on everybody it's you
406:48 - bro hope you're doing well and in this
406:49 - video we're going to create a game of
406:51 - tic-tac-toe using javascript so sit back
406:54 - relax and enjoy the show
406:58 - well all right everybody let's create a
406:59 - game of tic-tac-toe let's create a div
407:02 - element to contain our game
407:04 - div
407:05 - this will have an id of what about game
407:10 - container
407:13 - let's close it
407:17 - i'll add a title
407:19 - this will be an h1 header tag
407:21 - the title will be
407:23 - tick
407:23 - tack
407:24 - toe we'll create a div section for a
407:27 - grid
407:29 - div id equals
407:32 - let's name this cell
407:34 - container
407:35 - it will contain nine cells for each of
407:37 - the spaces
407:39 - then let's close it
407:42 - within our cell container div we're
407:44 - going to create nine div tags
407:46 - div
407:48 - we'll create an attribute named
407:50 - cell
407:51 - index
407:52 - i'll set the first equal to zero
407:55 - add them to a class the class will be
407:57 - cell
407:59 - then close the div tag
408:01 - let's copy this development and paste it
408:04 - eight additional times so we should have
408:06 - a total of nine
408:11 - we have cell index zero one
408:14 - two three four
408:16 - five
408:17 - six
408:18 - seven
408:19 - eight
408:20 - outside of our cell container that ends
408:22 - right here it looks like
408:24 - we'll create an h2 header tag to display
408:27 - some messages like whose turn it is who
408:30 - won
408:31 - so let's close this h2 header tag i will
408:34 - give this an id of what about status
408:38 - text
408:40 - then we'll need a button
408:44 - button
408:47 - the id will be restart button
408:51 - add some text
408:52 - restart
408:54 - okay that should be everything within
408:55 - our html file let's head to our css
408:58 - style sheet be sure to save everything
409:00 - let's begin with the cell class
409:02 - this is a class so use dot the name of
409:04 - the class cell
409:06 - i'll set a width of 75 pixels
409:10 - a height
409:11 - of 75 pixels
409:15 - i'll add a
409:16 - border 2 pixel solid is good
409:22 - okay here's our div elements so far but
409:25 - we got to put them in a grid they're all
409:27 - in a single column
409:28 - i'll select our cell container
409:31 - we're selecting this by an id cell
409:33 - container
409:36 - the display
409:37 - will be grid
409:40 - grid
409:42 - template
409:44 - columns
409:46 - repeat
409:48 - three
409:49 - auto
409:52 - then we gotta set a width
409:54 - width
409:55 - 225 pixels
409:59 - margin
410:00 - auto
410:02 - yeah
410:03 - let's head back to our cell class
410:05 - let's add a box shadow
410:07 - box
410:08 - shadow
410:10 - zero zero zero two pixels
410:14 - all of these lines should have an even
410:16 - thickness
410:17 - i'll add a line height
410:20 - of 75 pixels
410:24 - just to test the x's and o's i'm going
410:27 - to add an x like right here and an o
410:30 - here
410:31 - let's edit the font
410:34 - font
410:35 - size
410:37 - 50 pixels
410:39 - when i move my cursor over these cells i
410:41 - would like my cursor to be a pointer to
410:43 - indicate that we can click on something
410:45 - so cursor
410:46 - pointer let's test that yeah there's our
410:49 - pointer okay let's select our game
410:51 - container i'm going to center everything
410:53 - and change the font
410:55 - game
410:56 - container
410:58 - i'll add a font
411:00 - family
411:02 - i'll select
411:03 - permanent
411:06 - marker i like that font
411:08 - and a backup of cursive
411:12 - then we just got to center everything
411:13 - within this container
411:15 - text align
411:17 - center
411:19 - yeah and that's our css style sheet
411:22 - so let's get rid of this exyno that we
411:23 - have i was just writing that there to
411:25 - test it
411:27 - okay so our html file is done our css
411:30 - file is done let's head to our
411:31 - javascript file
411:34 - okay now we're within our javascript
411:36 - file let's declare all of the variables
411:38 - that we'll need
411:40 - const
411:41 - cells
411:42 - equals
411:43 - document dot
411:45 - query
411:47 - selector
411:48 - all
411:50 - we're selecting a class the cell class
411:53 - dot cell
411:55 - then let's select status text const
411:58 - status text
412:00 - document dot query selector
412:03 - not query selector all
412:05 - we are selecting
412:08 - status
412:10 - text
412:12 - then our restart button
412:15 - const
412:17 - restart
412:19 - button id
412:21 - restart button
412:23 - we need a constant of all of our win
412:25 - conditions
412:27 - const win
412:29 - conditions
412:31 - win conditions will be a two-dimensional
412:33 - array of indices
412:35 - if three cells all have the same
412:37 - character we would need to check that
412:39 - but we'll have to know what cells to
412:40 - check
412:41 - let's begin with the first row these
412:43 - would have indices of 0 1 2 so let's add
412:47 - that
412:48 - zero one two
412:51 - then the second row
412:53 - three four five
412:59 - six seven eight
413:03 - then columns
413:05 - zero three six
413:13 - one four seven
413:20 - two five eight
413:25 - then the diagonals
413:28 - zero four eight
413:34 - two four six
413:40 - and that's it
413:41 - we'll need an array of placeholders i'll
413:43 - name this options let options equals
413:47 - options will be originally
413:49 - an array of empty strings
413:52 - we'll need nine of them
413:54 - one for each cell
414:01 - okay let's make sure we have nine
414:03 - one two three four five six seven eight
414:06 - nine
414:08 - we'll need to keep track of the current
414:10 - player
414:10 - let's current
414:13 - player equal x
414:17 - then we'll need a boolean variable to
414:18 - keep track if our game is running
414:20 - let running equals
414:23 - false
414:24 - we'll switch this to true when we
414:25 - initialize our game
414:27 - let's create all of the different
414:28 - functions that we'll need
414:30 - function
414:32 - initialize
414:35 - game
414:39 - function
414:41 - cell clicked
414:47 - function
414:49 - update cell
414:51 - there will be two parameters cell as
414:53 - well as index
414:57 - function
414:59 - change player
415:04 - function
415:05 - check
415:06 - winner
415:10 - function
415:12 - restart game
415:16 - okay and that's the functions
415:18 - when we begin our game let's initialize
415:20 - the game
415:23 - we'll use this function initialize game
415:25 - to take care of any setup before we need
415:27 - to start
415:28 - we'll have to add some event listeners
415:30 - to our cells
415:32 - take our cells
415:35 - then use the for
415:37 - each method
415:39 - we'll use an arrow function expression
415:41 - for each cell
415:44 - we will take our cell
415:47 - add event
415:49 - listener
415:51 - the event will be click
415:54 - we will add a callback of cell clicked
415:59 - the second line will add an event
416:00 - listener to our restart button
416:02 - restart button
416:05 - dot add event
416:07 - listener
416:09 - when we click
416:12 - we are going to invoke the restart game
416:15 - function
416:18 - for the third line let's update our
416:20 - status text
416:23 - status text dot text
416:27 - content
416:29 - set the sequel to i'll use the template
416:31 - literal
416:33 - current
416:34 - player
416:36 - it's their turn
416:39 - okay looks like we have one problem
416:43 - looks like i accidentally capitalized
416:45 - that l in current player okay let's work
416:47 - on the cell clicked function
416:50 - when we click on a cell what are we
416:51 - going to do
416:52 - i'll create a local variable
416:55 - const
416:56 - cell
416:57 - index
416:58 - i will set the sequel to
417:00 - this
417:02 - this refers to whatever cell that we
417:04 - click on
417:05 - we will get an attribute get
417:08 - attribute
417:10 - the attribute that we're getting is cell
417:13 - index
417:18 - we have an index number what we would
417:20 - like to check to see is if that index
417:23 - number within our options our
417:25 - placeholders
417:26 - are not empty we'll only want to update
417:29 - a cell if there's nothing there
417:32 - if
417:33 - our options
417:35 - at index of cell index
417:38 - does not equal an empty space or if the
417:43 - game is not
417:45 - running
417:48 - then we will return not do anything
417:51 - otherwise
417:53 - we will invoke the
417:54 - update cell function
417:57 - pass in this as an argument as well as
418:00 - cell index
418:03 - followed by
418:04 - check
418:05 - winner
418:06 - function
418:08 - okay let's head to the update cell
418:10 - function
418:12 - take
418:13 - options
418:14 - at index of the index parameter
418:18 - set the sequel to the current player
418:23 - so we're updating our placeholders
418:26 - then change the text content of one of
418:29 - these cells
418:30 - whatever cell that we click on
418:31 - originally
418:32 - cell dot text
418:34 - content
418:36 - equals current player
418:38 - now we should be able to click on at
418:40 - least one of these cells
418:43 - oh i forgot one thing when we initialize
418:45 - our game we have to set running to true
418:48 - running equals true
418:51 - there
418:52 - so we can click on one of these spaces
418:55 - x
418:56 - x x x
418:58 - then we just need to change the player
419:01 - take our current player
419:04 - then we will set the sequel to then use
419:06 - the ternary operator our condition is if
419:10 - change player
419:12 - is equal to x
419:14 - if current player is equal to x we will
419:16 - reassign our current player with
419:19 - o
419:21 - otherwise
419:22 - x
419:25 - then take status
419:27 - text
419:29 - dot
419:29 - text
419:31 - content
419:33 - set the sequel to i'll use the template
419:34 - literal
419:37 - current player
419:39 - it's their
419:41 - turn
419:42 - yeah just temporarily i'm going to
419:43 - invoke this function after updating a
419:45 - cell
419:47 - now we should be able to alternate
419:48 - between x's and o's
419:50 - x o x o x o yeah we're good i'm going to
419:54 - remove this i was just testing it to
419:56 - make sure it works okay then head to our
419:58 - check winner function we have a lot to
420:00 - do here we'll create a temporary
420:02 - variable of round one
420:06 - i will set the sequel to false if
420:08 - somebody wins we'll flip this to be true
420:11 - we'll use a for loop we haven't used
420:13 - those for a while
420:14 - we will iterate over all of the win
420:17 - conditions within our two-dimensional
420:19 - array the first statement will be let i
420:22 - equal zero
420:23 - we'll continue this as long as i is less
420:26 - than
420:27 - our win
420:28 - conditions dot length property
420:32 - increment i by one we will iterate over
420:35 - each inner array within win conditions
420:38 - but let's store each of these arrays
420:40 - within a temporary variable const
420:44 - condition
420:46 - equals
420:47 - when condition
420:49 - at our current index of i
420:52 - each row has three indices
420:55 - const cell a equals
420:59 - our options
421:00 - but at what index
421:02 - while the index is going to be our
421:04 - condition
421:05 - at index 0 then we have cell b
421:10 - cell b condition at one
421:16 - cell c
421:18 - condition index of two let me explain
421:20 - how this is gonna work
421:21 - let's head to the top we're iterating
421:24 - over all of these inner arrays we'll
421:26 - begin with the first we have three
421:28 - indices zero one two we're going to
421:31 - check within our options at these three
421:33 - indices
421:34 - zero one two at least that row to begin
421:37 - with
421:38 - if these three are not spaces and
421:41 - they're all the same that means somebody
421:43 - won if there is no winner we'll check
421:45 - the next set of win conditions three
421:47 - four and five
421:48 - these are indices within our option at
421:51 - these three indices
421:52 - three four and five
421:54 - if there are no spaces and they're all
421:56 - the same character that means somebody
421:58 - won we'll repeat this process for each
422:01 - set of win conditions
422:02 - so heading back down to our check winner
422:05 - function we'll need to check if there's
422:06 - any empty spaces
422:08 - if
422:09 - cell a
422:11 - is equal to an empty space
422:13 - or
422:14 - cell b
422:16 - is equal to an empty space
422:18 - or
422:19 - cell c
422:20 - is equal to an empty space if there's an
422:23 - empty space
422:24 - we'll continue and skip this iteration
422:27 - so if there are no empty spaces that
422:29 - means all the spaces are full let's make
422:31 - sure they're all the same character
422:34 - if
422:35 - cell a
422:36 - is equal to
422:37 - cell b
422:40 - and
422:41 - cell b
422:42 - is equal to
422:44 - cell c
422:45 - that means we have a winner we'll take
422:48 - our local variable of round one set the
422:51 - sql to true
422:53 - then break we don't need to continue
422:54 - this for loop anymore we can break out
422:56 - of it
422:57 - outside of our for loop
422:59 - if
423:01 - round one is equal to true
423:04 - let's update our status text right here
423:08 - status
423:09 - text dot text
423:12 - content
423:13 - is equal to i'll use a template literal
423:17 - current
423:18 - player
423:21 - wins
423:23 - running equals false the game is over
423:27 - else if
423:29 - so if there's no spaces left it's a draw
423:32 - we could check that with this condition
423:34 - take our options
423:36 - then use the includes method
423:39 - we'll check for any spaces
423:41 - does our array include any spaces
423:43 - precede this with the not logical
423:45 - operator
423:46 - if our options does not include any
423:48 - spaces if this is true then we will
423:51 - update our status text
423:55 - to equal
423:57 - draw
423:58 - running equals false
424:01 - else
424:02 - we can change player change
424:05 - player
424:07 - okay let's try this
424:10 - x o x o
424:12 - x o
424:14 - uh we should have a winner here yeah x
424:16 - wins let's work on this restart button
424:19 - to restart the game
424:20 - we'll take current
424:23 - player
424:24 - set the sequel to x
424:28 - take our options
424:30 - i'll just copy this we're going to reset
424:32 - them
424:34 - so they're all empty spaces
424:37 - status text
424:39 - dot
424:40 - text content
424:43 - equals
424:44 - i'll use a template literal
424:48 - current players
424:50 - turn
424:51 - we'll have to clear each cell
424:54 - take
424:55 - our cells
424:56 - use the for
424:58 - each method
424:59 - use an arrow function expression
425:02 - for each cell
425:03 - we will take that cell
425:05 - update the text
425:07 - content
425:08 - equal to an empty space
425:12 - then set running equal to true
425:16 - okay let me make sure the game's a draw
425:18 - first
425:23 - okay draw i'm going to restart and we
425:25 - have a new game
425:27 - so yeah everybody that is a basic game
425:29 - of tic-tac-toe if you would like a copy
425:32 - of all this code i'll post this in the
425:33 - comment section down below underneath
425:35 - the original video in this playlist and
425:37 - well yeah that's a basic game of
425:40 - tic-tac-toe using javascript
425:43 - hey what's going on everybody it's your
425:45 - bro hope you're doing well and in this
425:46 - video we're going to create a game of
425:48 - snake using javascript so sit back relax
425:51 - and enjoy the show
425:54 - hey what is up everybody in this video
425:56 - we're going to create a game of snake
425:58 - let's head to our html file i'll create
426:01 - a div as a container
426:03 - div id equals game
426:07 - container
426:09 - let's close it
426:11 - we'll be using a canvas to draw our
426:13 - components
426:15 - canvas the id will be
426:18 - game
426:19 - board
426:20 - i'm gonna go ahead and set the width and
426:22 - the height attributes right away
426:26 - 500 for the width
426:27 - the height will be 500 as well
426:31 - then close the canvas
426:33 - i'll add a score
426:36 - div
426:37 - id equals score
426:40 - let's close the div section the initial
426:43 - score will be set to zero
426:45 - then we'll need a reset button
426:47 - button
426:48 - close it
426:50 - id equals
426:52 - reset button the text is reset
426:56 - okay let's work on our css styling
426:58 - that's everything for our html file
427:01 - let's select our game board
427:03 - game
427:04 - board
427:05 - this is an id i'll add a border
427:08 - border
427:10 - 3 pixel solid is good
427:12 - let's enter everything within our game
427:14 - container
427:19 - game container
427:21 - text align
427:23 - center
427:25 - i'll change the font of the score you
427:26 - can barely see it
427:31 - font
427:32 - family
427:34 - pick whatever font you like
427:36 - one font that i like is permanent marker
427:40 - permanent
427:41 - marker
427:42 - then a backup of cursive
427:45 - let's change the font size font size 100
427:48 - pixels
427:50 - then let's work on our button next
427:53 - reset button
427:56 - i'll pick the same font family
427:59 - the font size will be 22 pixels
428:04 - a width of 100 pixels
428:08 - a height of 50 pixels
428:13 - border
428:14 - 4 pixels solid
428:18 - border radius to round the corners
428:22 - 15 pixels
428:25 - then cursor
428:27 - pointer when we hover our cursor over
428:29 - this button okay that is our css style
428:32 - sheet and our index.html file let's head
428:35 - to our javascript file
428:37 - we have a lot of variables to declare
428:39 - let's begin with the constants
428:41 - const
428:43 - game board
428:44 - equals document dot
428:47 - query
428:48 - selector
428:50 - we are selecting an id
428:52 - that id is game board
428:55 - that's our canvas
428:57 - with a canvas to paint on the canvas we
428:59 - have to get the context
429:02 - const
429:03 - ctx for context
429:06 - equals game board
429:08 - dot get
429:11 - context
429:13 - then pass in 2d
429:16 - we'll store our score text as a variable
429:19 - const
429:20 - score text
429:23 - equals document dot
429:26 - query selector
429:30 - we're selecting an id the id is
429:32 - score
429:34 - let's change this id to score text we're
429:36 - already going to have a score variable
429:39 - hey this is future bro so i forgot to
429:41 - change that within my css style sheet
429:43 - make sure you make that change here as
429:44 - well
429:45 - let's select our reset button
429:48 - const
429:49 - reset button
429:51 - equals document dot
429:54 - query selector
429:56 - we are selecting our reset button
430:00 - i'm going to create a variable to hold
430:02 - the width of our game board
430:05 - const
430:06 - game width
430:08 - equals
430:10 - game board dot width
430:13 - then game height
430:14 - const game height
430:18 - equals game board dot height
430:21 - width and height are the attributes that
430:22 - we assigned within our canvas
430:25 - initially when we run this javascript
430:27 - file if we would have declared those
430:28 - within the css file they wouldn't have
430:30 - been available to us right away that's
430:32 - why i assigned these attributes within
430:34 - the element itself inline we're going to
430:37 - assign some colors the first is for the
430:39 - board background
430:41 - const
430:43 - board
430:44 - background
430:46 - equals pick a color i'll just pick white
430:48 - pick a color for your snake
430:51 - const
430:52 - snake color
430:54 - i'll pick light green
430:57 - but feel free to pick a different color
430:59 - i'll add a black border around the snake
431:02 - snake
431:03 - border equals black
431:06 - then we'll need some color for the food
431:08 - const food color
431:11 - equals
431:13 - red it's an apple okay then a unit size
431:16 - what's the size of everything within our
431:18 - game
431:19 - const
431:20 - unit size
431:22 - equals i'll pick 25 pixels now we'll
431:24 - create a couple more variables
431:26 - let
431:27 - running equal false
431:30 - we'll examine running to see if our game
431:32 - is currently running or not
431:33 - let
431:34 - x
431:35 - velocity x velocity will be how far we
431:38 - move on the x-axis every single game
431:42 - tick i will set this to be the unit size
431:45 - we'll be moving 25 pixels on the x-axis
431:48 - every game tick if x-velocity is a
431:51 - positive number we'll move to the right
431:53 - if it's negative we'll move to the left
431:55 - then we have y velocity
431:57 - let y
431:59 - velocity equal zero that means we're not
432:02 - moving up or down if we would like to
432:04 - move down we would set this to unit size
432:07 - if we would like to move up we would set
432:09 - that to negative unit size to move up up
432:11 - or down one space one unit but to begin
432:14 - we'll just be moving to the right we'll
432:15 - need the coordinates of our food
432:17 - let
432:18 - food x coordinate
432:21 - let
432:22 - food
432:23 - why
432:25 - we'll calculate these randomly later
432:27 - within a function
432:29 - let
432:30 - score
432:31 - equal zero
432:33 - then we need our snake our snake is
432:34 - going to be an array of objects an array
432:37 - of parts
432:40 - let
432:41 - snake
432:42 - equal
432:44 - straight brackets it's an array
432:46 - and we will create objects an object for
432:48 - each body part each body part will have
432:51 - an x and a y coordinate
432:54 - let's begin with the tail
432:55 - the tail will begin in the top left
432:57 - corner so i will set those coordinates
433:00 - 0 0 is the top left corner
433:02 - initially let's create 5 body parts to
433:05 - the snake but after it eats its food
433:07 - it's going to increase by one
433:10 - let's add a second body part this is a
433:13 - separate object separated with a comma
433:16 - but i don't want this in the same space
433:18 - i'll place this next body part to the
433:20 - right of the first one so let's say x is
433:24 - unit size
433:26 - times one or just unit size i suppose
433:29 - okay let's add another body part
433:32 - unit size times two
433:35 - so we'll have three squares
433:38 - okay two more body parts unit size times
433:41 - three
433:42 - unit size times four
433:44 - and that's our snake
433:46 - it's an array of objects
433:48 - body parts each object is a body part of
433:51 - the snake they each have their own x and
433:54 - y coordinates
433:56 - let's add an event listener to our
433:57 - window to listen for key events
434:00 - window dot add
434:02 - event
434:04 - listener
434:05 - the event is key down
434:08 - we'll pass in a callback to a change
434:11 - direction function
434:13 - then we'll add an event listener to our
434:15 - reset button to restart the game
434:18 - reset
434:19 - button
434:20 - dot add
434:22 - event
434:23 - listener
434:24 - when we click
434:27 - we will invoke the reset game function
434:30 - which we still need to declare
434:32 - then we will invoke game start
434:35 - let's declare the functions that we'll
434:36 - need
434:37 - let's begin with the first
434:39 - function
434:40 - game start
434:45 - function
434:46 - next tick
434:51 - function
434:52 - clear
434:53 - board
434:54 - clear board is going to be in charge of
434:56 - repainting the board
434:58 - function
435:00 - create food
435:03 - the create food function will find a
435:05 - random place within our game board to
435:06 - place a food item
435:09 - function
435:10 - draw food
435:13 - we'll need to paint the food within our
435:15 - game board
435:16 - function
435:18 - move
435:18 - snake
435:22 - function
435:24 - draw snake
435:29 - function
435:30 - change direction
435:34 - function
435:36 - check
435:37 - game over
435:42 - function
435:44 - display game over
435:48 - then lastly
435:49 - function
435:50 - reset game
435:53 - those are the functions
435:56 - let's begin with the create food
435:58 - function
435:59 - we'll create an inner function
436:02 - function
436:04 - random food
436:06 - there will be two parameters min
436:09 - then max
436:11 - within this function we'll return a
436:13 - random number
436:14 - return
436:15 - rand
436:16 - number
436:17 - so to calculate this number we'll store
436:19 - this within const rand
436:22 - num
436:23 - set the sequel to math
436:26 - dot round
436:28 - math
436:29 - dot random
436:32 - we will multiply this by
436:36 - max
436:37 - minus min
436:39 - plus the minimum if there is one i think
436:41 - i'm going to expand this
436:43 - all right just to demonstrate this i'm
436:45 - going to invoke the random food function
436:48 - and store this within food x
436:52 - food x equals random food
436:54 - we'll pass the minimum zero
436:57 - then the max
436:58 - game
436:59 - with
437:00 - minus our unit size
437:04 - temporarily i'm just going to display
437:06 - whatever food x is i have to explain
437:08 - something
437:10 - then we will invoke this create food
437:12 - function temporarily
437:14 - i gotta explain something
437:15 - currently when we're generating a random
437:17 - number that random number is between
437:19 - zero then our game width minus our unit
437:22 - size every time i run this i have a
437:24 - random number between that range however
437:26 - i would like to divide the width and the
437:28 - height of my game in two spaces
437:31 - i will take this part of this expression
437:34 - divided by
437:36 - unit
437:37 - size
437:39 - now we'll receive a random space between
437:41 - 0 and 24 because 500 divided by 25
437:46 - our unit size
437:47 - is 25 available spaces
437:51 - to accurately place the food in the top
437:54 - left corner of one of these spaces
437:56 - i will multiply all of this by unit size
438:01 - so every time i refresh this you can see
438:04 - that all of these numbers are divisible
438:06 - by 25
438:08 - and that's what we're looking for let's
438:10 - create food why
438:13 - food y
438:14 - equals the same thing
438:16 - okay that is our create food function
438:19 - let's move on to the draw food function
438:22 - this is fairly easy we'll take our
438:24 - context
438:25 - set the fill
438:27 - style
438:28 - equal to our food
438:30 - color
438:32 - take our context
438:34 - fill
438:35 - rect to fill a rectangle
438:38 - we need a pair of coordinates
438:40 - food x
438:41 - food y
438:43 - we need a width and a height
438:45 - they are both going to be unit size
438:50 - now if i were to invoke the draw food
438:53 - function
438:54 - after the create food function
438:56 - this will draw a random food item every
438:58 - time we refresh the page
439:00 - that's what we're looking for that
439:02 - completes the create food function and
439:04 - the draw food function i'm going to
439:06 - eliminate these two function calls
439:09 - we're going to fill in the game start
439:11 - function
439:12 - we will set running equal to true our
439:15 - game is currently running
439:17 - we'll update the score
439:19 - text
439:21 - text
439:22 - content to equal
439:25 - whatever our score is initially it's
439:27 - going to be zero
439:28 - we'll invoke the create food function
439:32 - then the draw food function
439:35 - then lastly next tick
439:38 - next tick is what we want to do every
439:40 - round every time we update the clock
439:42 - okay every time i refresh this an apple
439:45 - should appear randomly within your game
439:46 - board let's close the game start
439:49 - function we'll work on the next tick
439:51 - function we'll check to see if our game
439:54 - is currently running
439:55 - if
439:56 - running
439:59 - let's invoke the set timeout method
440:02 - set timeout we'll use an arrow function
440:05 - expression
440:08 - there's a lot we have to do
440:09 - we'll list an order of steps first we'll
440:12 - clear the board clear board function
440:16 - followed by
440:17 - draw
440:18 - food
440:20 - move snake
440:23 - draw snake
440:27 - check game over
440:29 - then invoke next tick again
440:34 - so after the right curly brace
440:37 - how often do we want a game tick to
440:39 - occur
440:40 - maybe 75 milliseconds that's a good
440:42 - speed if you would like a slower speed
440:45 - you can increase the number or decrease
440:47 - the number for a faster speed i'll just
440:49 - pick 75.
440:51 - then we'll add an else statement
440:53 - else
440:55 - display
440:56 - game over
440:58 - if our game currently isn't running that
441:01 - means the game's over
441:03 - so that is the next tick function
441:06 - let's work on clear board
441:08 - this is fairly simple
441:10 - we'll take our context
441:12 - set the fill
441:14 - style we'll take our fill style set the
441:16 - sequel to board
441:18 - background
441:20 - this is a color that we picked
441:22 - take our context
441:25 - fill
441:26 - wrecked
441:27 - will begin in the top left corner zero
441:30 - zero
441:32 - will end in the bottom right corner
441:34 - we will take our game width
441:37 - for the width game height for the height
441:40 - that's it for this function
441:42 - let's work on draw snake
441:45 - we'll need to change the fill style
441:48 - context dot
441:51 - fill
441:52 - style
441:53 - equals
441:54 - snake
441:55 - color
441:56 - for my snake i picked green
441:59 - if you have a border we can set the
442:00 - stroke style context dot stroke
442:05 - style
442:06 - equals snake
442:09 - border
442:10 - we'll take our snake it's an array of
442:12 - objects
442:13 - so there is a for
442:16 - each method
442:18 - i'll use an arrow function expression
442:20 - the argument is snake part
442:25 - for every snake part
442:28 - then within curly braces
442:30 - i will take our context
442:33 - fill
442:34 - rectangle
442:37 - snake
442:38 - part each snake part has an x coordinate
442:41 - and a y coordinate so we'll begin
442:43 - painting wherever that snake part
442:45 - currently is on the x-axis
442:48 - and the y-axis
442:51 - what's the width and the height of the
442:53 - snake part well our unit size 25 pixels
442:58 - and the height is 25 as well unit size
443:01 - hey if you have a border we can fill
443:02 - that in
443:06 - let's copy this paste it
443:11 - stroke
443:12 - wrecked
443:13 - looks like i misspelt something clear
443:15 - board phil
443:17 - rhett
443:18 - not rexed okay and that will draw our
443:20 - snake so now how do we move our snake
443:23 - let's go to the move snake function
443:26 - to move the snake we're going to create
443:28 - a new head of the snake in the direction
443:30 - that we're moving then eliminate the
443:32 - tail
443:33 - const
443:34 - head
443:35 - equals
443:37 - then within curly braces
443:39 - the x-coordinate will be r snake's
443:42 - current head so that has an index of
443:44 - zero take the x-coordinate of that
443:47 - plus
443:48 - our x velocity
443:51 - how far are we moving on the x-axis this
443:54 - will be a positive number if we're going
443:56 - right a negative number if we're going
443:57 - left okay then do the same thing with y
444:00 - y equals snake
444:02 - at index of zero
444:05 - dot y
444:06 - plus the y
444:08 - velocity
444:10 - then to add this new head to our snake
444:12 - we can use the unshift method
444:15 - snake dot on
444:17 - shift
444:18 - head
444:20 - okay so our snake is just expanding now
444:23 - we need to eliminate the tail
444:24 - after each move i'll use an if else
444:26 - statement
444:30 - if
444:32 - else
444:34 - else will be snake dot pop
444:37 - that will eliminate the tail every time
444:39 - that we move
444:40 - uh but i gotta fill in something for now
444:42 - i'm just going to set this to be false
444:45 - just temporarily
444:47 - okay our snake should move now
444:49 - within this if statement we'll check to
444:50 - see if the food was eaten
444:53 - if
444:54 - food is eaten so that's a comment if the
444:58 - head of our snake snake
445:00 - at index zero
445:02 - take the x-coordinate we will use the
445:05 - comparison operator
445:06 - is the x-coordinate of our snake
445:09 - equal to the x-coordinate of our food
445:12 - food x
445:14 - and
445:16 - let's copy this portion
445:18 - the y coordinate of the head of the
445:19 - snake is equal to
445:21 - food y
445:23 - if the head of the snake and the food
445:25 - are overlapping
445:26 - well then the snake has eaten the apple
445:29 - let's increment the player score by one
445:32 - score plus equals one
445:34 - change the score text
445:36 - score
445:37 - text
445:38 - dot text
445:40 - content equals the new score
445:44 - then create a new food object
445:47 - create
445:48 - food
445:49 - we have no way to test this until we can
445:50 - control our snake let's close out of
445:53 - this function
445:54 - then go to the change direction function
445:57 - the change direction function should
445:59 - have one parameter event we invoke this
446:02 - function every time we press a key our
446:04 - window is currently looking for the key
446:06 - down event we'll store this within const
446:09 - key
446:10 - pressed set the sql to event
446:13 - dot
446:14 - key
446:15 - code
446:16 - so i'm going to display whatever key
446:18 - pressed is currently with console.log
446:21 - i'm going to click on my window and
446:23 - press
446:24 - up
446:25 - down left right
446:28 - each of those four arrow keys has a key
446:30 - number that's what we're looking for
446:32 - in fact i'm going to store those
446:35 - let's say const
446:37 - left
446:38 - equals 37
446:41 - const
446:42 - right equals 39
446:46 - const
446:47 - up
446:48 - equals 38
446:51 - const
446:52 - down
446:53 - equals 40.
446:55 - actually i'm gonna rearrange these so
446:57 - that they're all in numeric order
446:59 - much better this is how to determine
447:01 - which way our snake is headed
447:03 - i'll store these within some constants
447:06 - const
447:07 - going up
447:09 - equals
447:10 - we'll write a condition
447:12 - is the y velocity of our snake
447:16 - equal to
447:18 - negative
447:19 - unit size
447:21 - so our unit size is currently 25. if the
447:24 - y velocity of the snake is negative 25
447:26 - that means we're moving up so let's do
447:28 - the same with the other directions
447:31 - going up
447:33 - going
447:35 - down
447:36 - going
447:37 - right going left
447:41 - going down is going to be y velocity is
447:44 - equal to
447:45 - unit size positive then x velocity is
447:49 - equal to
447:50 - positive unit size
447:52 - going left is x velocity is equal to
447:55 - negative unit size
447:58 - so these will be boolean variables
448:00 - i'm going to write a switch
448:03 - switch
448:05 - will examine true against many matching
448:07 - cases
448:09 - the first case will be
448:12 - key
448:14 - pressed
448:16 - is equal to left
448:19 - and
448:20 - we are not
448:22 - going
448:23 - right
448:24 - we don't want to be able to move like to
448:26 - the left then immediately to the right
448:28 - because according to the rules of snake
448:30 - if any body parts touch then we lose the
448:32 - game we don't want to accidentally go
448:34 - back into any body parts so if we're
448:36 - going left we can continue to go left
448:39 - otherwise up or down but not right
448:42 - because then we lose the game if we
448:43 - would like to go left then let's set the
448:46 - x
448:47 - velocity equal to
448:49 - negative
448:50 - unit size
448:52 - take our y velocity
448:55 - set that equal to zero we're no longer
448:57 - going up or down
448:59 - then break
449:00 - let's add another case keypressed equals
449:04 - up and we are not
449:06 - going down
449:08 - x velocity equals zero y velocity equals
449:12 - negative unit size
449:15 - we need another case
449:16 - key pressed equals
449:19 - right and we are not going left
449:22 - x velocity equals unit size y velocity
449:26 - equals zero
449:28 - okay last one
449:30 - key pressed equals down
449:33 - and we are not going up
449:37 - x velocity equals zero y velocity
449:40 - equals unit size
449:44 - okay we should be able to control our
449:45 - snake now yeah there we go we can go up
449:48 - left down right
449:50 - so let's eat the apple and we should
449:52 - expand and our score increases now let's
449:55 - work on getting a game over because we
449:57 - can go off the screen currently which we
449:59 - should not be able to do
450:01 - okay let's close out of this function
450:04 - check game over
450:06 - if we pass one of these borders then we
450:08 - have a game over i'll write a switch to
450:10 - check that
450:11 - switch
450:12 - will examine true
450:14 - against many matching cases
450:16 - the first case will be
450:19 - is the head of our snake
450:21 - snake at index zero
450:23 - take the x coordinate
450:25 - is that less than zero
450:27 - that means we went over the left border
450:30 - if this case evaluates to be true well
450:32 - we have a matching case so let's take
450:35 - running set the sequel to false
450:38 - then break
450:40 - so if i go over the left border the game
450:42 - stops running okay let's add another
450:44 - case
450:45 - if the x coordinate of the head of our
450:47 - snake
450:48 - is greater than or equal to the game
450:51 - width
450:53 - now if we go over the right border
450:56 - the game ends
450:58 - take the y coordinate of the head of our
451:00 - snake
451:01 - check to see if it's
451:03 - less
451:04 - than zero that means we go over the top
451:07 - the game's over then the last one is
451:11 - case
451:12 - y is greater than or equal to
451:16 - game
451:17 - height we shouldn't be able to go over
451:19 - the bottom border yeah
451:21 - awesome there is another game over
451:23 - condition two if any body parts of the
451:25 - snake overlap to check that i'm going to
451:27 - use a for loop to iterate over the body
451:29 - parts
451:32 - four
451:33 - then our index is going to be i we don't
451:36 - want to begin at the head
451:39 - let i equal one that's why i'm not using
451:41 - the for each method our condition to
451:44 - continue is i is less than snake dot
451:48 - length property
451:49 - increment i by one
451:51 - we'll write an if statement
451:54 - if
451:55 - our snake
451:57 - at index of i that's going to be one of
451:59 - the body parts besides the head because
452:01 - we're starting at one
452:03 - if the x coordinate of that body part
452:06 - is equal to
452:07 - snake at index of zero
452:10 - take that x coordinate
452:12 - and let's copy this
452:15 - paste it
452:17 - change x to y
452:20 - if the head of our snake is equal to one
452:23 - of the body parts that means the game's
452:25 - over
452:26 - running equals false okay let's test
452:29 - that
452:31 - yeah the game just ended now we'll want
452:33 - to display game over let's close out of
452:35 - the check game over function then head
452:37 - to display game over i'll take the
452:39 - context
452:41 - access the font set the sql to a font of
452:44 - your choosing i'll pick 50 pixels
452:47 - mv
452:48 - bully
452:49 - context dot fill
452:52 - style
452:54 - pick a color i'll just pick black
452:56 - i'll center the text context
453:00 - text align
453:02 - equals
453:03 - center
453:04 - to draw some text on a canvas we'll type
453:06 - context dot fill
453:10 - text
453:11 - add a string of text
453:13 - game over
453:15 - then your placement
453:17 - i'll put this right in the middle
453:18 - game
453:19 - width divided by two
453:22 - comma
453:23 - game
453:24 - height
453:25 - divided by two
453:27 - then set running
453:29 - equal to false
453:32 - okay so when we hit a border
453:34 - it's game over
453:35 - then when the head of our snake runs
453:36 - into a body part it's also game over
453:39 - the last thing we need to do is set up
453:41 - the reset game function
453:43 - we'll take our score set that back to
453:45 - zero
453:47 - take the x velocity
453:50 - set that equal to unit size
453:54 - take our y velocity
453:56 - set that equal to zero
453:58 - we'll recreate our snake
454:02 - copy that
454:03 - paste it but we're not going to use the
454:06 - let keyword
454:07 - then invoke the game start function
454:12 - so after we get game over we should be
454:14 - able to reset our game
454:16 - yeah sweet well okay then everybody that
454:18 - is a game of snake using javascript if
454:21 - you would like a copy of all this code
454:23 - i'll post this in the comments section
454:25 - down below be sure to check the original
454:27 - playlist and well yeah that's how to
454:29 - create a game of snake using javascript
454:32 - hey what's going on everybody it's you
454:34 - bro hope you're doing well and in this
454:35 - video we're going to create a game of
454:37 - pong using javascript so sit back relax
454:40 - and enjoy the show
454:42 - all right let's begin everybody let's
454:44 - create a div section to contain our game
454:48 - div
454:49 - close it
454:50 - the id will be game
454:53 - container
454:56 - we'll add a canvas
454:58 - canvas
454:59 - close it
455:00 - the id will be
455:02 - game
455:03 - board
455:05 - i'll set a width and a height in line
455:07 - the width will be 500
455:09 - the height will be 500 we'll add a score
455:12 - this will be another div section
455:16 - id equals score
455:18 - text
455:20 - the initial text will be 0
455:22 - colon 0
455:24 - then a reset button
455:26 - button
455:27 - close it
455:29 - the id is reset button
455:33 - the text is reset
455:35 - cool that's our html file let's head to
455:38 - our css style sheet
455:39 - id game board
455:42 - border
455:43 - 3 pixel solid
455:45 - let's change our score text next
455:49 - score text
455:51 - pick a font family font
455:54 - family
455:55 - pick a font that you like
455:59 - then i'll add a backup
456:01 - i'll change the font size to 100 pixels
456:05 - that should be readable
456:06 - okay let's work on the button
456:09 - reset button
456:10 - i'll set a font of permanent marker
456:15 - then a backup of cursive
456:19 - font
456:20 - size
456:22 - 22 pixels
456:24 - a width of 100 pixels
456:29 - a height
456:30 - of 50 pixels
456:33 - border 4 pixels solid
456:37 - border
456:38 - radius
456:40 - 15 pixels
456:43 - then cursor
456:45 - pointer
456:46 - when we hover our cursor over this
456:48 - button the cursor is now a pointer then
456:51 - let's enter everything i will select our
456:53 - game container
456:58 - text align
457:00 - center
457:01 - all right there we go so that's our css
457:04 - style sheet and our html file let's head
457:06 - to our javascript file
457:08 - let's declare all the constants first
457:11 - const game board
457:13 - equals document dot
457:16 - query selector
457:19 - we are selecting our game board
457:25 - const
457:26 - context
457:28 - equals game board
457:31 - dot get
457:33 - context
457:36 - 2d
457:38 - context is what we draw on
457:41 - const score text
457:44 - equals document dot
457:46 - query selector
457:51 - we are selecting the score text
457:55 - i'm just going to copy this
457:58 - then we have our reset button
458:02 - id is reset button
458:05 - let's store the game with within a
458:07 - variable what's the size of our canvas
458:11 - const
458:13 - game with
458:14 - equals
458:16 - game board dot width attribute
458:19 - then we have height
458:21 - game
458:23 - height
458:26 - equals game board dot height i'm only
458:29 - storing them within a variable so that
458:31 - they're accessible let's select some
458:32 - colors
458:34 - const
458:35 - board
458:37 - background
458:38 - what color
458:40 - i'll select forest green kind of like
458:42 - it's a tennis court
458:44 - const paddle one color
458:48 - what color would you like the first
458:49 - player to be i'll pick light blue
458:54 - then paddle two
458:56 - paddle two color
458:59 - player two will be red
459:01 - if you want you can add a border
459:03 - const
459:04 - paddle border
459:06 - equals black
459:08 - const ball color
459:10 - i'll make this yellow like it's a tennis
459:12 - ball
459:14 - const
459:15 - ball
459:16 - border
459:17 - color
459:18 - i'll pick black
459:21 - so what do we want the size of the ball
459:22 - to be i'll store that as a constant
459:25 - const
459:26 - ball
459:27 - radius
459:29 - i'll set this to be
459:30 - 12.5
459:32 - then the full diameter is 25 then our
459:35 - paddle speed how far do we want our
459:37 - paddles to move when we press down on a
459:39 - button
459:40 - paddle speed
459:43 - equals 50. that's good enough
459:46 - feel free to change this number if you'd
459:47 - like now we have let
459:50 - interval
459:51 - id
459:54 - let
459:55 - ball speed
459:57 - i'll set this to be one that will be the
459:59 - lowest speed
460:01 - then ball x and ball wide they will be
460:03 - coordinates let ball x
460:06 - equal initially i'll place the ball
460:08 - right in the center of our game board
460:11 - i will take game
460:13 - width divided by two
460:15 - then ball y is going to be
460:18 - game height divided by two
460:21 - let
460:22 - ball x direction
460:25 - i'll set that to be zero ball x
460:27 - direction will be the direction in which
460:29 - the ball is headed on the x axis
460:32 - then ball
460:34 - y direction
460:37 - let player one score equal
460:41 - zero
460:43 - let player two score equal zero
460:47 - we'll define two paddle objects
460:49 - let paddle one
460:51 - equal
460:52 - this paddle will have a width property
460:55 - of 25
460:58 - a height
461:00 - of 100
461:02 - these are in pixels the starting x
461:04 - coordinate will be zero all the way at
461:06 - the left border
461:08 - then y zero
461:10 - so this petal will be in the top left
461:12 - corner initially
461:14 - so let's copy this paste it
461:16 - change paddle one to paddle two
461:19 - the width and the height will be the
461:20 - same i would like paddle 2 to be on the
461:22 - other side of my canvas
461:24 - i will set x to equal game
461:27 - width then i'm going to subtract
461:29 - negative 25 whatever the width is if i
461:32 - set x to be game with the left border is
461:34 - going to be lined up with the right
461:36 - border of my game board so i'm just
461:38 - going to shift it over by the width 25
461:41 - pixels so that you can actually see it
461:43 - then y is game height
461:46 - minus the height of our paddle
461:48 - and those are the two paddles
461:50 - let's add an event listener to the
461:51 - window to listen for key down events
461:54 - window dot add
461:56 - event
461:57 - listener
461:59 - we will listen for
462:00 - key down
462:03 - then we will invoke a change direction
462:06 - function
462:08 - let's add an event listener to our reset
462:09 - button
462:11 - reset
462:12 - button
462:13 - dot add event listener
462:17 - we are waiting for click
462:19 - then invoke the reset game function
462:23 - we'll still need to declare these two
462:25 - functions when we would like to start
462:27 - our game we'll invoke the game start
462:29 - function then we'll need to declare
462:31 - these functions the first function is
462:34 - function
462:35 - game start
462:38 - we'll fill these in momentarily
462:40 - function next
462:42 - tick function
462:45 - clear board
462:48 - function
462:49 - draw paddles
462:51 - function create ball
462:55 - function
462:56 - move ball
462:58 - function
463:00 - draw ball
463:03 - function
463:04 - check
463:05 - collision
463:08 - function
463:09 - change
463:10 - direction function
463:13 - update score
463:16 - function
463:17 - reset game
463:20 - okay those are all the functions
463:22 - why don't we begin by drawing the
463:23 - paddles we'll start with the easy stuff
463:25 - so we will take our context
463:28 - set the stroke
463:30 - style equal to the paddle
463:33 - border
463:35 - let's begin by drawing paddle one
463:37 - context
463:39 - dot fill
463:41 - style
463:42 - equals
463:43 - paddle
463:44 - one
463:46 - color
463:47 - context
463:49 - fill
463:50 - rectangle
463:52 - the first two arguments are the x and
463:54 - the y coordinate of the top left corner
463:57 - of the rectangle
463:59 - that will be
464:00 - paddle one dot x
464:02 - then paddle
464:04 - one dot y
464:06 - the next two arguments are the width and
464:08 - the height of this rectangle
464:10 - the width will be paddle one dot width
464:13 - then paddle one dot height
464:16 - to test this i'm going to invoke draw
464:18 - paddles right after game start
464:20 - temporarily okay there's our first
464:22 - paddle but let's add a border we can
464:24 - just copy this
464:27 - paste it
464:29 - change fill rect to stroke
464:32 - rat
464:33 - okay there is our first paddle let's
464:36 - copy these three lines of code
464:38 - paste it
464:40 - change paddle one to paddle two
464:47 - and there's our second paddle i'll
464:49 - eliminate this function call
464:52 - let's fill in game start when we begin
464:54 - the game what are we going to do first
464:56 - we'll create a ball
464:58 - then invoke the next tick function
465:01 - let's fill in the next tick function
465:06 - we will take our set interval id
465:10 - set this equal to
465:12 - set
465:13 - timeout method
465:15 - we'll pass in a callback
465:19 - then we'll add a routine what are all
465:20 - the things that we're gonna do first we
465:23 - will clear and redraw our board
465:25 - clear
465:26 - board
465:28 - then draw
465:30 - paddles
465:32 - move
465:33 - ball
465:36 - draw ball
465:38 - draw ball is going to have two arguments
465:42 - ball x
465:44 - ball y
465:45 - and we should probably fill that in
465:47 - within the parameters
465:49 - there
465:50 - then we will check collision
465:55 - then invoke next tick
465:57 - for another round i would like to repeat
465:59 - this routine every 10 milliseconds
466:02 - that is the next tick function let's
466:04 - fill in the clear board function
466:07 - all we're doing is redrawing our board
466:09 - let's take our context
466:11 - set the fill
466:13 - style equal to the board
466:17 - background
466:18 - context dot
466:20 - fill
466:21 - rect
466:22 - will begin in the top left corner 0 0
466:26 - the width will be game width
466:28 - the height will be game height
466:31 - and that's our background
466:33 - so that is the clear board function
466:36 - we're redrawing our canvas
466:38 - let's head to the change direction
466:39 - function this will be in charge of
466:41 - moving the paddles
466:43 - but we'll need to know what key that we
466:45 - pressed i'll store that as a constant
466:47 - key
466:48 - pressed
466:50 - equals our event dot
466:53 - key code
466:55 - uh so we do have one parameter that's
466:57 - event so fill that in let's display
466:59 - whatever key pressed is
467:01 - console.log key pressed
467:04 - w has a key code of 87
467:07 - s is 83.
467:08 - the up arrow key is 38
467:11 - the down arrow key is 40. so we can use
467:13 - that for something
467:16 - const paddle 1
467:18 - up
467:19 - equals 87
467:22 - const paddle 1
467:25 - down
467:26 - equals 83
467:29 - const paddle 2 up
467:32 - is 38
467:33 - const paddle 2 down
467:36 - is 40. let's write a switch to look at
467:38 - key pressed
467:41 - switch we're examining key pressed
467:43 - against many matching cases
467:46 - the first case is
467:48 - paddle one up
467:51 - if we press up we will take
467:54 - paddle one
467:55 - axis the y property
467:58 - minus equals our paddle
468:01 - speed
468:02 - you could also think of paddle speed as
468:04 - paddle distance how far we're going to
468:06 - move then break
468:08 - so we should be able to move up
468:10 - but we can't move down
468:13 - paddle one
468:15 - down
468:16 - the y property of paddle one
468:18 - plus equals paddle speed
468:21 - by pressing s we can move down by
468:23 - pressing w we can move up but currently
468:25 - we're exiting the game board let's write
468:28 - an if statement to check that
468:30 - if
468:31 - paddle 1 dot y is greater than zero
468:36 - then we will move
468:39 - then within the second case paddle one
468:41 - down we'll write another if statement
468:43 - if the y property of paddle one is
468:47 - greater than
468:49 - game
468:50 - height
468:52 - okay now check this out so we can't go
468:54 - above the border
468:56 - but we can go below the border up to a
468:58 - certain point from game height we need
469:00 - to subtract the height of our paddle
469:02 - game height
469:04 - minus
469:05 - paddle
469:06 - one
469:07 - axis the height property we cannot go
469:10 - above the game board
469:12 - or below okay let's work on paddle two
469:19 - case paddle 2 up
469:24 - we'll check to see if paddle 2's y
469:27 - property
469:29 - is greater than zero
469:34 - then we will take the y property of
469:36 - paddle two
469:37 - minus equals the paddle speed
469:40 - so we cannot move paddle two above the
469:42 - game board then our last case is paddle
469:45 - two down
469:47 - okay let's copy what we have here
469:50 - within paddle one down
469:53 - paste it but change paddle one to paddle
469:56 - two
469:57 - y property of paddle 2 plus equals the
470:00 - paddle speed with paddle 2 we shouldn't
470:02 - be able to go below or above the game
470:04 - board these paddles are complete let's
470:07 - close out of the change direction
470:09 - function let's work on the draw drawball
470:11 - function
470:12 - we'll take the context
470:14 - set the fill
470:16 - style equal to the ball color
470:19 - context dot stroke style
470:23 - equals ball border
470:26 - color
470:28 - we can set a line width if we'd like
470:30 - context dot line with
470:33 - equals to
470:35 - context
470:36 - begin
470:37 - path
470:39 - context
470:40 - arc to draw a circle
470:43 - ball x
470:45 - ball y
470:46 - then the radius ball radius
470:49 - zero this is for radians
470:52 - two times math dot pi
470:56 - context dot stroke method
470:59 - context dot fill method
471:02 - and there's our ball okay that is the
471:05 - draw ball function let's head to the
471:07 - create ball function when we create a
471:09 - new ball let's set the ball
471:12 - speed equal to one let's begin with the
471:15 - x-axis
471:17 - if
471:19 - math
471:20 - dot round
471:22 - math
471:23 - dot random
471:25 - is equal to one
471:27 - this part of the condition will give us
471:29 - a random number between zero and one
471:32 - if that number is one let's move to the
471:35 - right if not let's move to the left so
471:38 - if we would like to move to the right
471:39 - let's set ball
471:41 - x direction
471:43 - equal to one
471:46 - else
471:47 - ball x direction
471:49 - equals negative one we're moving to the
471:51 - left okay let's copy these if else
471:54 - statements
471:56 - then change ball x to ball y
471:59 - then when we create a new ball we'll set
472:01 - it to be right in the middle set the
472:03 - ball x coordinate equal to game width
472:07 - divided by two
472:09 - set the ball y coordinate to game
472:13 - height divided by two
472:15 - then invoke the draw ball function
472:19 - pass in as arguments ball x ball y
472:24 - that's the create ball function then we
472:26 - need to move the ball
472:27 - ball x plus equals
472:31 - the ball's speed
472:33 - times
472:35 - the ball's direction ball x direction
472:40 - then do the same thing with y
472:43 - ball y plus equals ball speed times ball
472:48 - y direction
472:49 - so our ball should move in a random
472:51 - direction
472:52 - let's just test that by refreshing the
472:54 - page
472:56 - so let's close out of the move ball
472:58 - function
473:00 - now we'll need to check collisions
473:02 - let's check to see if we hit the top
473:04 - border if so then we'll bounce off of it
473:07 - if
473:09 - ball y
473:10 - is greater than or equal to zero
473:14 - plus
473:15 - the ball radius remember the center of
473:18 - the ball is where we place the x and y
473:20 - coordinates so that's why we're adding
473:22 - the ball radius to account for that if
473:25 - we touch the top border let's change the
473:28 - y direction
473:29 - ball
473:30 - y
473:31 - direction
473:33 - times equals negative one that will
473:36 - reverse the direction
473:38 - i'm just going to test that so we should
473:40 - bounce off the top yeah let's check to
473:42 - see if we hit the bottom border if ball
473:45 - y
473:46 - is greater than or equal to
473:48 - game
473:49 - height
473:50 - minus ball radius
473:53 - then we will change direction
473:57 - okay let's check that
473:58 - yep we just bounced off the bottom
474:01 - what if we touch the left border
474:04 - if
474:05 - ball x is less than or equal to zero
474:10 - let's update player two score
474:12 - player two score
474:14 - plus equals one
474:16 - we'll update the score
474:20 - create a new ball
474:24 - then return
474:25 - once we hit the left border that should
474:27 - create a new ball yep there it is okay
474:30 - let's copy this if statement
474:33 - if ball x
474:34 - is greater than or equal to
474:37 - game
474:38 - width
474:39 - then we will update player one score
474:42 - when we hit the right border
474:43 - that creates a new ball
474:45 - okay now this is the tough part we're
474:47 - going to bounce off the paddles
474:48 - i'm going to maximize the screen
474:52 - if
474:53 - ball x is less than or equal to this is
474:57 - for paddle one
474:59 - paddle one
475:01 - take the x property
475:03 - plus
475:05 - paddle one
475:07 - axis the width property
475:10 - plus the ball radius
475:13 - on the x-axis if so let's check the
475:16 - y-axis
475:17 - if
475:18 - ball y
475:20 - is greater than
475:22 - paddle one
475:24 - take the y property
475:26 - and
475:27 - ball
475:28 - y
475:29 - is less than
475:31 - paddle one
475:32 - dot y
475:34 - plus paddle one
475:36 - dot height
475:38 - that means there's a collision
475:40 - we'll take ball x
475:42 - direction
475:44 - multiply this by negative one
475:46 - hey if you want for fun you can increase
475:48 - the ball speed ball speed
475:51 - plus equals one
475:55 - okay we should be able to bounce off
475:57 - this paddle yeah there we go okay let's
475:59 - do the same thing with the right paddle
476:02 - so i'm going to copy this section
476:04 - paste it
476:05 - is greater than or equal to
476:08 - the x property of paddle 2
476:11 - minus the ball radius
476:14 - if ball y is greater than the y property
476:18 - of paddle two
476:19 - and
476:20 - ball y is greater than the y property of
476:24 - paddle two
476:25 - plus paddle two's height
476:29 - so we should be able to bounce off these
476:31 - paddles now
476:34 - then the ball speeds up
476:39 - so we do have one situation where the
476:41 - ball might get stuck
476:43 - kind of like this
476:46 - if that happens i'm just going to push
476:48 - the ball out of the way
476:49 - and move it forward
476:51 - ball x equals
476:56 - paddle one
476:58 - take the x property
477:01 - plus
477:02 - paddle
477:04 - one dot width plus
477:06 - ball radius
477:08 - this is if ball gets stuck
477:12 - this line of code helps prevent the ball
477:14 - from getting stuck within the paddle
477:16 - this statement will be ball x equals
477:19 - paddle two dot x
477:20 - minus the ball radius
477:23 - okay now let's update the score
477:26 - update score
477:28 - this one's easy
477:29 - score text
477:32 - dot text content
477:35 - equals i'll use the template literal
477:39 - player
477:40 - one score
477:42 - colon
477:45 - player
477:46 - two score
477:50 - so we should be able to keep track of
477:51 - the score
477:54 - okay that's one
477:56 - and one
477:59 - lastly we have the reset button
478:03 - reset game
478:07 - player one
478:08 - score equals zero
478:11 - player two score equals zero
478:15 - let's reset these paddles i'll just copy
478:16 - them
478:18 - paste them get rid of the let
478:20 - keyword by setting the x and the y
478:23 - coordinates that will put them in their
478:24 - original positions
478:26 - to demonstrate i'll press reset and they
478:28 - go back to their respective corners
478:31 - ball x equals zero
478:34 - ball y equals zero
478:37 - ball x
478:39 - direction
478:40 - equals zero
478:42 - ball y direction
478:45 - equals zero
478:47 - will update the score
478:51 - we'll invoke the clear
478:54 - interval method pass in our interval id
478:58 - then invoke game start again
479:01 - okay we should be able to restart this
479:02 - game
479:04 - yeah there we go well okay then
479:06 - everybody that is a game of pong using
479:09 - javascript if you would like a copy of
479:11 - this code i'll post this in the comment
479:13 - section down below be sure to check the
479:15 - original playlist and well yeah that's a
479:17 - game of pong using javascript
479:59 - you