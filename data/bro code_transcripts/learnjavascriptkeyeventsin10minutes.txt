00:00 - hey what's going on everybody in today's
00:01 - video I'm going to give you an
00:02 - introduction to key events in JavaScript
00:05 - so sit back relax and enjoy the show so
00:09 - what we've discussed in the previous
00:10 - topic is event listeners an event
00:12 - listener can be added to an HTML element
00:15 - they will listen for specific events to
00:17 - create interactive web pages we'll be
00:20 - discussing key down and key up there is
00:22 - a third type of key event called key
00:25 - press however according to the official
00:27 - documentation this event is incompatible
00:30 - with all web browsers so you should
00:31 - avoid using key press a key down event
00:34 - occurs when you press down on a key a
00:36 - key up event occurs when you release a
00:38 - key by adding an event listener to the
00:40 - Dom document we can detect when we press
00:43 - down or release a key here's how we will
00:46 - access our Dom then add an event
00:49 - listener add event
00:52 - listener we have two arguments the event
00:55 - type and a call back when we press down
00:58 - on a key let's do something
01:01 - doesn't matter what key it is any key
01:03 - for this next argument I can either pass
01:05 - in a call back an anonymous function or
01:07 - an arrow function I like Arrow functions
01:09 - so I'm going to use an arrow function
01:11 - we're provided with an event parameter
01:13 - when something happens within our web
01:15 - browser an event object is created we
01:18 - can access it so I'm going to
01:21 - console.log this event object and we'll
01:23 - see the details of it be sure to select
01:25 - your web browser I'm going to press the
01:28 - q key
01:30 - then let's go to
01:31 - inspect
01:33 - console and here's that
01:36 - event the web browser provided us with a
01:39 - keyboard
01:40 - event the key pressed was Q there's a
01:44 - relevant key code of 81 and there's
01:46 - other properties too like was the ALT
01:49 - key being held down at the time it
01:51 - wasn't same thing with the shift key and
01:53 - the target which is the body of our
01:56 - document I'm going to Output the key
01:59 - prop property of the event we'll press a
02:02 - different
02:05 - key I'm going to hold down the F
02:07 - key I'm not releasing it I'm holding it
02:10 - down we're going to consistently fire
02:13 - key down
02:14 - events I would like to detect when I
02:16 - release a key I will use the key up
02:18 - event so let's copy this paste it the
02:21 - event is going to be key up I'll display
02:25 - something else I'm going to use a
02:27 - template
02:27 - string I will display key down equals
02:32 - then I will display this events key
02:35 - let's do this with key up too I'll just
02:38 - copy
02:39 - this key up equals event.
02:43 - key let's go back to our
02:46 - console I'm going to hold down the S
02:49 - key then when I release it we'll have a
02:53 - key up event key up equals
02:56 - s oh one more important thing the arrow
03:00 - keys we have Arrow up arrow down arrow
03:04 - left and arrow right if you ever would
03:07 - like to make some sort of game the arrow
03:09 - keys are also accessible now what we'll
03:12 - do on key down and key up is change an
03:14 - HTML element so to make this simple
03:17 - within our HTML document I'm going to
03:19 - create a div element this div element
03:21 - will have an ID of my box I'll add some
03:25 - text an
03:28 - emoji all right all right let's add a
03:30 - little bit of
03:31 - CSS we will select my
03:35 - box I will set the background
03:38 - color to be light blue we haven't picked
03:41 - light blue
03:43 - yet I will set a width of 200
03:47 - pixels a height of 200
03:50 - pixels a font
03:52 - size of 7.5
03:56 - RM I'll use flex box display Flex
04:01 - justify content
04:06 - Center aine item
04:11 - Center this part is important for the
04:13 - next exercise we are going to set the
04:15 - position to
04:18 - relative for relative positioning I'll
04:21 - set the body of my document to have no
04:23 - margin margin zero all right we are
04:28 - ready we are going to select the ID of
04:31 - my
04:32 - box const my box equals document. getet
04:38 - element by ID the ID that I'm going to
04:41 - select is my
04:45 - box when I press a key down I'm going to
04:49 - change the text content of my box mybox
04:53 - do text content equals I'll pick a
04:56 - different
04:57 - Emoji let's do that one
05:00 - and I'll change the
05:02 - CSS my box.
05:05 - style do background color equals
05:10 - tomato or some other color of you're
05:13 - choosing so when I press down on any key
05:16 - the HTML and CSS is going to change I'm
05:19 - going to release that key but we don't
05:21 - revert back to normal our HTML element
05:24 - stays that way what we'll do is that
05:25 - when we release a key we'll revert these
05:27 - changes by going back to the origin
05:30 - so let's take my box change the text
05:34 - content to equal an emoji because I like
05:38 - emojis we'll use the original
05:40 - one then I will set the background color
05:43 - to be light
05:45 - blue now if I were to hold down a button
05:48 - the HTML and CSS is going to change
05:51 - until I release that button which I am
05:53 - about to now in 3 2 1 go I'm going to
05:58 - try and press the space bars fast fast
05:59 - as I can seizure
06:01 - warning let's
06:04 - go okay it's about time we move on what
06:07 - we're going to do now is using the arrow
06:09 - keys move this element we're going to
06:12 - create a const of move amount when
06:16 - pressing an arrow key how far do we want
06:18 - to move this element let's say 10 for 10
06:22 - pixels I will create a variable for X
06:25 - think of these as coordinates I will set
06:27 - that to be zero and y y will also be
06:31 - zero X for any horizontal movement and Y
06:35 - for any vertical movement document.
06:39 - addevent
06:41 - listener when we have a key down event I
06:45 - would like to do something I'll write an
06:47 - arrow function we're provided with an
06:49 - event do all this code I only want to do
06:52 - something if a user uses an arrow key so
06:56 - if I was to console.log my event
07:00 - then access the key property let's go to
07:03 - inspect console select your document I
07:07 - would like to do something only if the
07:09 - key pressed is Arrow up arrow down arrow
07:12 - left or Arrow right I don't want any of
07:14 - the other keys I can write this if
07:18 - statement if access our event access its
07:23 - key follow this with the starts with
07:26 - method does this key start with arrow
07:31 - we'll only enter the SI statement if the
07:34 - key of the event is Arrow up arrow down
07:36 - arrow left or Arrow right then we'll
07:39 - write a switch we haven't written any
07:41 - switches for a while we will examine the
07:45 - key of our event with switches we
07:48 - examine a value against matching cases
07:52 - if we have a case of Arrow
07:55 - up if the key of our event matches the
07:58 - case of of Arrow up then do this we'll
08:02 - take our
08:03 - y-coordinate subtract our movement
08:05 - amount which is
08:06 - 10 Yus equals the movement amount and
08:11 - then be sure to break to break out of
08:13 - the switch then we need a case for arrow
08:18 - down arrow
08:21 - down y + equals our movement amount
08:25 - Arrow
08:28 - left
08:31 - Arrow
08:32 - left X for the horizontal axis minus
08:36 - equals the movement
08:38 - amount and then Arrow
08:41 - right arrow
08:44 - right X plus equals the movement
08:48 - amount then outside of the switch but
08:50 - within our if statement we're going to
08:53 - access my
08:55 - box access the
08:57 - style access the top property set it
09:00 - equal to a template
09:03 - string we're going to take our variable
09:05 - of Y for the y coordinate then add
09:09 - pixels take the top property of my box
09:12 - set it equal to the y-coordinate we're
09:15 - going to copy this and do this with the
09:17 - left
09:18 - property set it equal to X in pixels be
09:23 - sure to select the body of your document
09:25 - we can move right with the right arrow
09:27 - key down
09:32 - left and
09:34 - up or diagonal if I hit two keys at
09:39 - once the arrow keys have a default
09:41 - Behavior to scroll you can see that if
09:43 - we go down too far we have a scroll bar
09:45 - on the right hand
09:46 - side we can prevent the default behavior
09:49 - of a key we just have to add this line
09:51 - of code take our event then follow it
09:54 - with the prevent default method
09:59 - so when my element Scrolls off
10:02 - screen it'll disappear we're not going
10:04 - to scroll with
10:08 - it to increase the distance in which
10:10 - this element moves we can increase the
10:12 - move amount let's set it to be 100 now
10:15 - we're moving a lot further with each key
10:19 - press hey this is bro from the future
10:22 - there's one more thing I would like to
10:23 - add to this project when pressing down
10:25 - on a key let's change the text content
10:27 - and the background color much like what
10:29 - we did with the first exercise then when
10:32 - we release a key we'll revert the HTML
10:34 - and the CSS back to normal we're
10:36 - combining the first exercise and the
10:38 - second one and this is the result when I
10:40 - move the arrow keys this guy is going to
10:42 - freak out until I Let
10:48 - Go pretty exciting all right everybody
10:51 - so that is an introduction to key events
10:53 - in JavaScript you're going to add an
10:55 - event listener to the document when you
10:58 - select your document and press a key
11:00 - when the key is pressed down that will
11:02 - create a key down event when you release
11:04 - a key that creates a key up event and
11:07 - well everybody that is an introduction
11:09 - to key events in
11:14 - JavaScript