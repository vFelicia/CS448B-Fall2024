00:00 - hey what's going on people so in today's
00:01 - video I'm going to explain the time
00:03 - method of console the time method is a
00:05 - tool that allows you to measure the time
00:07 - it takes for a section of code or
00:10 - process to execute it's great for
00:12 - identifying performance bottlenecks to
00:14 - start the time method you'll want to
00:16 - pass in a label this will be a unique
00:18 - identifier to stop keeping track of time
00:20 - you can follow the time method with the
00:23 - time end method then pass in that same
00:25 - label that unique identifier by using a
00:28 - combination of these two methods you can
00:30 - to see how long some process takes for
00:32 - example I will create a for Loop that's
00:35 - going to Loop 1 million times let I
00:39 - equals z continue this as long as I is
00:43 - less than 1
00:46 - million then i++ it doesn't really
00:49 - matter what we do here do some code here
00:53 - we're just going to Loop a million times
00:55 - so I can see how long this process takes
00:58 - wherever I would like to start this
01:00 - timer I will use
01:03 - console.time I will want to pass in some
01:05 - sort of label some unique identifier
01:07 - let's say test wherever I would like to
01:10 - stop the timer I will again use console
01:14 - but instead use the time end method and
01:17 - pass in that same
01:19 - label within our console it's going to
01:21 - show us how long this process is going
01:23 - to take between when we start and when
01:25 - we end to get from here to here it took
01:29 - 0 9 milliseconds if I were to increase
01:32 - the amount of iterations this time is
01:34 - going to go up for me to Loop 10 million
01:37 - times that took 3.8 milliseconds 100
01:40 - million is 34 milliseconds let's try a
01:45 - billion 338
01:48 - milliseconds using the time method could
01:50 - be useful within a function we will
01:53 - create a function to load some
01:56 - data we're just going to pretend to load
01:58 - some data but don't actually do it again
02:01 - I will use a for loop we're just
02:04 - pretending to load data let I equal Z
02:08 - we'll iterate this Loop like a billion
02:12 - times then
02:15 - i++ pretend to load some data if I would
02:20 - like to measure how long this function
02:22 - takes in order to identify any
02:24 - bottlenecks I will use the time method
02:26 - of console
02:28 - console.time I'll need a unique label
02:32 - I'll use the name of the function within
02:33 - quotes as a unique
02:35 - identifier then when this function ends
02:38 - I will follow this with the time and
02:41 - method of console and pass in that same
02:45 - label then we'll need to execute this
02:48 - function let's pretend that our program
02:50 - is running really slow for some reason I
02:53 - can test each part of my program one
02:55 - function at a time let's see how long
02:58 - the loaded data function takes
03:00 - 338 milliseconds that could be a little
03:03 - or a lot depending on what you're doing
03:06 - but here we're just pretending to load
03:07 - some
03:08 - data let's create a function to process
03:11 - some data function process
03:17 - data we are just going to pretend to
03:20 - process some
03:22 - data let I equals
03:25 - z let's Loop through I 1 million times
03:30 - then
03:33 - i++ pretend to process some data if I
03:38 - would like to measure how long this
03:40 - function takes I will use
03:43 - console.time pass in a unique
03:45 - label for example the function name as a
03:49 - string then we will end this timer
03:53 - console.time and pass in that same label
03:58 - then we will execute this function
04:01 - all right let's see how long these
04:02 - functions
04:03 - take if I'm looking at both of these
04:06 - functions and trying to identify any
04:08 - bottlenecks it looks like the load data
04:10 - function is taking a lot longer than the
04:12 - process data function in our make belief
04:15 - scenario we've noticed that our load
04:17 - data function is taken quite a bit of
04:18 - time that's where the time method could
04:20 - be helpful all right everybody that is
04:22 - the time method it's a tool that allows
04:25 - you to measure the time it takes for a
04:27 - section of code or process to execute
04:29 - it's great for identifying performance
04:31 - bottlenecks and well everybody that is
04:33 - the time method in
04:38 - JavaScript