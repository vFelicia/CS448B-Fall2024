00:01 - hey everybody in this topic i'm going to
00:03 - show you how we can sort an array first
00:05 - i'll explain the logic behind it then
00:07 - we'll write a c plus program to actually
00:09 - handle it we'll use a standard bubble
00:11 - sort it's an easy sorting algorithm to
00:13 - write although there are more efficient
00:15 - sorting algorithms we're still learning
00:16 - so let's stick with a bubble sort so
00:18 - with the bubble sort we begin at index 0
00:21 - the beginning of our array we'll examine
00:23 - the element directly to the right if the
00:25 - element on the left is larger than the
00:27 - element on the right we need to swap
00:29 - these two elements i will take this
00:31 - element move it within some temporary
00:33 - storage like a temporary variable take
00:36 - the element on the right
00:38 - move it to the left
00:40 - take whatever's within temp
00:42 - place it within that opening again we
00:44 - take our value examine the element to
00:46 - the right if it's larger we swap them
00:51 - then we would just repeat this until we
00:53 - reach the end
01:12 - so that would be one element we would
01:14 - repeat this process with the rest of the
01:16 - elements now for the next iteration one
01:18 - is not greater than nine so we leave it
01:20 - alone then we check the next element
01:22 - nine is greater than two we would swap
01:24 - these two values
01:27 - i'll speed up the footage
01:43 - so
02:14 - that is a quick demonstration of a
02:17 - bubble sort so let's actually write this
02:19 - in code now
02:20 - okay let's create an array
02:23 - this will be an array of integers
02:26 - make up some numbers make sure they're
02:28 - not in order
02:33 - let's calculate the size of the array
02:35 - and size equals
02:38 - size of
02:39 - our array
02:41 - divided by the size of one of the
02:43 - elements
02:47 - at the end of our program we will
02:48 - iterate over our array i'll use a for
02:51 - each loop
02:52 - int
02:53 - element in array
02:56 - i will display using standard output
03:00 - every element then i think i'll separate
03:02 - each with a space okay and here's our
03:04 - array obviously unsorted so let's change
03:07 - that i'll create a sort function
03:10 - void sort
03:13 - there will be two parameters
03:15 - an integer array
03:18 - int
03:19 - size
03:20 - let's add a function declaration at the
03:22 - top of our program
03:25 - before we print our array let's invoke
03:27 - the sort function that we just created
03:30 - pass in our array as well as the size
03:33 - there we go okay so let's head to our
03:35 - sort function what we'll need to do is
03:37 - iterate over our array once for every
03:40 - element that's within the array we'll
03:41 - need the help of a temporary variable to
03:44 - swap some values then we'll need nested
03:46 - loops
03:48 - four
03:49 - and i
03:50 - equals zero
03:51 - we'll continue this as long as i is less
03:54 - than the size of our array
03:57 - minus one the reason that the condition
04:00 - is size minus one is because we don't
04:02 - need to compare the last element to
04:03 - anything the larger values will
04:05 - naturally gravitate towards the end of
04:07 - the array increment i by one
04:09 - then we'll need a nested for loop
04:15 - let's use index j because i is already
04:17 - taken
04:20 - now our condition is going to be size
04:22 - minus i minus one once we place the
04:25 - larger elements all the way to the right
04:27 - they should already be in order we don't
04:28 - need to sort any elements that are
04:30 - already sorted then what we have to do
04:32 - is use an if statement to check to see
04:34 - if the current element that we're on
04:37 - array
04:38 - at index of j
04:40 - is greater than the element on the right
04:43 - array at index of j
04:47 - plus one if the element on the left is
04:50 - larger than the element on the right we
04:52 - just have to swap those two values
04:54 - we'll take temp which we declared up
04:57 - here
04:58 - equals array
05:00 - at index of j
05:02 - array at index of j
05:05 - equals array
05:07 - at index of j
05:09 - plus one
05:10 - then lastly
05:11 - array
05:12 - at index of j
05:15 - plus one equals whatever's within temp
05:18 - and that should be it let's run this
05:22 - yeah and our array is now sorted in
05:24 - ascending order so if you need
05:26 - descending order within this if
05:28 - statement use less than
05:31 - and now this array is in descending
05:33 - order well okay then everybody that's
05:35 - one way in which you can sort an array
05:37 - we used what's known as a bubble sort
05:40 - it's easy to write but it's not as
05:41 - efficient as some other algorithms that
05:43 - are out there this is a good one for
05:45 - beginners if you would like a copy of
05:46 - this code i'll post this in the comment
05:48 - section down below and well yeah that's
05:50 - how to sort an array using c plus plus