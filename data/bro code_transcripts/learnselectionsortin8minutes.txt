00:00 - hey everyone it's me again and in this
00:02 - video i'm going to explain
00:03 - the selection sort algorithm and
00:04 - computer science as always
00:06 - sit back relax and enjoy the show
00:11 - okay everybody selection sort selection
00:14 - sword is an
00:15 - in-place comparison sorting algorithm
00:17 - that keeps track of the minimum value
00:19 - during each iteration
00:20 - and at the end of each iteration all we
00:22 - do is swap variables
00:24 - how i like to imagine this is that let's
00:26 - say that our array
00:27 - is a bunch of different closed boxes and
00:30 - each box contains a number
00:32 - and they're all out of order so what
00:33 - we'll do is we have a flashlight too
00:35 - because we're in the attic and it's
00:36 - really dark
00:37 - so we have a flashlight we will open
00:39 - each box beginning with the beginning of
00:41 - our array and we'll take a look at the
00:43 - value
00:43 - inside okay 9 is a fairly small number i
00:46 - guess right
00:47 - so we will move this value to some
00:50 - temporary storage we'll keep track of
00:52 - the index of the minimum value
00:54 - 9 is the new minimum let's open the next
00:56 - box and holy crap
00:58 - it's a one one is a really small number
01:00 - so that will be the new minimum
01:02 - then we'll open the next box which is an
01:04 - eight one is still less than eight let's
01:06 - move on
01:07 - the next box is two seven three six
01:10 - four and five one was the minimum value
01:13 - during
01:14 - this iteration and we need to move this
01:16 - value to the place that we started
01:18 - during this iteration
01:19 - index 0 so we'll have to do some good
01:22 - all variable swapping
01:23 - so we will take 9 place it within some
01:26 - temporary storage
01:28 - then take 1 and place it where 9 was
01:32 - then take 9 and place it where 1 was
01:37 - and that is the first iteration let's
01:39 - move on to iteration two
01:41 - and we'll clear min and temp okay so
01:44 - this portion
01:45 - is done now we're not worried about it
01:47 - this is the new beginning of the next
01:49 - iteration
01:50 - and well nine is a low number i guess
01:52 - we'll move that to min
01:54 - but eight is even lower than nine so
01:57 - we'll move that to min
01:58 - holy crap it's a two two is the new min
02:01 - for sure
02:02 - and then we just repeat this process
02:04 - over and over again
02:05 - two is the current minimum of this
02:07 - iteration one was the minimum of the
02:10 - first iteration but we're not concerned
02:11 - with that it's already sorted
02:13 - so we need to move two to where we began
02:16 - this iteration
02:17 - at index one and currently there's a
02:19 - nine in there so we're going to evict
02:21 - this nine
02:22 - place it within some temporary shelter
02:24 - take two
02:25 - place it within where we started at
02:27 - index one
02:30 - then take nine place it where two was
02:32 - and that is the second iteration
02:34 - now that we kind of know how this
02:36 - process works i'll speed up the rest of
02:37 - the video for this demonstration
02:39 - so let's begin at index 2.
02:50 - [Music]
03:08 - [Music]
03:16 - [Music]
03:25 - [Music]
03:33 - [Music]
03:53 - [Music]
04:00 - [Music]
04:08 - and that is the selection sort algorithm
04:10 - the selection sort algorithm has a
04:12 - runtime complexity of big o of n squared
04:15 - the larger the data set
04:17 - the more and more inefficient that using
04:19 - the selection sort algorithm is going to
04:20 - be
04:21 - although it's okay with smaller data
04:23 - sets now let's create our own selection
04:25 - sort algorithm
04:26 - okay let's implement a selection sort
04:29 - we'll need an array or
04:30 - other collection to work with let's
04:32 - create an array of integers because
04:33 - i want to make this as easy as possible
04:36 - so integer
04:37 - array and make up some random numbers
04:39 - make sure that they're not in order
04:40 - what about eight seven
04:44 - nine two three one
04:47 - five four six i guess
04:50 - then let's use a for each loop to
04:52 - iterate over the elements of this array
04:55 - for and i in array we will display each
04:59 - element with
05:00 - a print statement system.out.print
05:04 - i and let's run this once just to be
05:07 - sure that everything is working fine
05:08 - so 879
05:12 - everything is working as it should so
05:14 - before we display the elements of our
05:16 - array
05:16 - let's invoke a selection sort function
05:19 - which we still need to declare
05:21 - so selection sort and we will pass
05:24 - our array as an argument because well
05:26 - that's what we want to sort right
05:28 - so selection sort and we'll need to
05:31 - create this method i will cheat and use
05:33 - the shortcut
05:34 - so outside of our main method let's
05:36 - declare private static
05:38 - void selection sort there is one
05:40 - parameter an array of integers
05:42 - we'll need a pair of nested loops to
05:44 - iterate over our array
05:45 - so let's work on the outer loop for and
05:48 - i
05:49 - equals zero we will continue this as
05:51 - long as i
05:52 - is less than array's length property
05:55 - minus 1 then increment i by 1 during
05:58 - each iteration
06:00 - then there is a nested loop within here
06:02 - change i
06:03 - to j so j equals
06:07 - i plus one j
06:10 - is less than array length and
06:13 - j plus plus so we'll need to keep track
06:16 - of the minimum
06:18 - so we'll do that outside of our nested
06:20 - loop int
06:21 - min equals i so that is the
06:25 - current minimum and within the nested
06:28 - for loop
06:29 - we will check to see if our array
06:33 - at index of min is
06:36 - greater than array at index
06:40 - of j if it is we will change our min
06:43 - to equal j then outside of our nested
06:47 - loop
06:48 - but within the outer loop we will do
06:50 - some good old variable swapping
06:52 - so int temp equals array
06:56 - at index of i to store this element
07:00 - array at index of i
07:03 - equals array at index
07:06 - of min then lastly array
07:10 - at index of min equals
07:14 - temp and that's all there is to it so
07:17 - after running this program
07:19 - our array is now sorted via the
07:22 - selection sort
07:23 - algorithm then of course if you need
07:25 - your array or collection
07:26 - sorted in descending order currently
07:28 - it's in ascending order
07:30 - all we do is swap this greater than sign
07:32 - with a
07:33 - less than sign and this will now be
07:36 - sorted in
07:36 - descending order depending on what you
07:38 - need well okay then everybody that
07:40 - is the selection sort algorithm it will
07:44 - search through an array and keep track
07:46 - of the minimum value during each
07:48 - iteration
07:49 - at the end of each iteration we swap
07:51 - variables and that's all there is to it
07:53 - it runs in quadratic time big o of n
07:56 - squared
07:57 - it's okay with small data sets even more
07:59 - so than bubble sort
08:00 - and it's pretty terrible with large data
08:02 - sets the larger the data set
08:04 - then more and more inefficient that this
08:06 - selection sort algorithm is going to be
08:08 - so that is the selection sort algorithm
08:10 - if you learned something new
08:12 - give this video a big fat thumbs up drop
08:14 - a random comment down below and well
08:16 - that is the selection sort algorithm and
08:18 - i guess computer science