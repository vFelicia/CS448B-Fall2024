00:00 - hey how's it going everybody it's bro
00:02 - here hope you're doing well and in this
00:03 - video I'm going to be teaching you guys
00:05 - how we can make a login system using
00:08 - Java so let's get into it
00:13 - before you reach the end of this video
00:15 - make sure to LIKE comment and subscribe
00:17 - so that we together can challenge and
00:20 - defeat the mighty YouTube algorithm
00:23 - everyone so with this project we are not
00:26 - going to be connecting to and querying
00:28 - any databases are only going to be using
00:30 - what we've learned so far in this
00:31 - tutorial series to build a login system
00:33 - so what I'm planning is that we can
00:35 - store all of our user IDs and passwords
00:37 - within a hashmap within our project
00:39 - folder and then pull the ID and password
00:41 - combinations from that hash map well lay
00:44 - down the foundation for a login system
00:45 - and someday you can improve upon this
00:47 - project if you would like to store the
00:49 - ID and passwords within a file on your
00:51 - computer or query a database whatever
00:54 - you want to do we'll lay down the
00:55 - foundation at least but for now we're
00:57 - only going to use what we've learned so
00:59 - far in this series so if that sounds
01:01 - good to you let's get started so if
01:02 - you're using eclipse you can go to file
01:04 - new Java project and let's call this
01:06 - project name login system and click
01:10 - finish so we're going to have a total of
01:13 - four different classes within our login
01:15 - system so go to your source folder and
01:17 - go to file new class we're going to
01:20 - create a main class and then check this
01:22 - public static void main check box and
01:25 - click finish go back to your source
01:26 - folder we're going to create another
01:28 - file so file new class and we're going
01:31 - to call this ID and passwords and this
01:35 - is going to contain a hash map of all
01:37 - the user ID and password combinations
01:39 - okay then source folder again file new
01:43 - class we'll create a class called logon
01:46 - page where we will sign in okay one more
01:51 - so source file new class and this will
01:55 - be our welcome page which appears after
01:57 - we login and click finish okay so we
02:01 - should have four classes a main class an
02:03 - ID and passwords class a login page and
02:06 - a welcome page now let's go to our main
02:09 - method here within our main class and
02:11 - we're going to create an instance of
02:13 - our ID and passwords class so we need to
02:15 - type in the name of our class to
02:17 - instantiate an object so ID and
02:19 - passwords and let's call this instance
02:22 - maybe just ID and passwords with a
02:26 - lowercase i've equals new ID and
02:29 - passwords parentheses semicolon okay so
02:33 - we now have an instance of our ID and
02:36 - passwords class so let's head here and
02:38 - then we're going to create a hash map
02:40 - and a hash map would work perfect for
02:42 - this project because they store key
02:44 - value pairs the key could be the
02:46 - username and the value could be our
02:49 - password so we'll create a hash map and
02:51 - in order to do that we're going to
02:53 - instantiate a hash map so hash map angle
02:56 - brackets now we need to list the data
02:58 - types of what we're storing within this
03:00 - hash map we're storing two strings a ID
03:03 - and a password so we're going to list
03:05 - two strings within here and then we need
03:08 - a name for this hash map so maybe we can
03:09 - call this login info equals new hash map
03:18 - then we need to list the data types
03:20 - again so two strings then a set of
03:23 - parenthesis and a semicolon now we just
03:26 - need to import this package in order to
03:28 - use hash maps now we're going to create
03:30 - a constructor for our ID and passwords
03:33 - class so we'll do that after our hash
03:36 - map so ID and passwords parentheses
03:41 - curly braces so in order to put some key
03:46 - value pairs within our hash map here we
03:48 - need to type in the name of our hash map
03:51 - dot and we're going to use the put
03:53 - function oops
03:56 - alright and then we're going to list a
03:59 - user ID and a password so maybe we'll
04:02 - type in pro for a user name and this
04:04 - will have an associated password of
04:06 - maybe pizza because I like pizza now
04:10 - let's do the same thing let's add maybe
04:11 - a total of three user ID password
04:14 - combinations so maybe the second will be
04:16 - Prometheus who has a very secure
04:19 - password of password all caps then maybe
04:23 - for a third user ID bro code with
04:26 - a password of abc123
04:30 - all right now with this hash map we want
04:33 - to send this to any class that requests
04:35 - it so we're going to create a getter
04:37 - method for this hash map so we'll type
04:40 - in get then login info parentheses curly
04:46 - braces and we're going to return our
04:48 - hash map which is named login info so if
04:52 - anybody calls this method we will send
04:54 - them the login info and we need to list
04:57 - the return type which is a hash map now
05:00 - let's also give this get login info
05:02 - method a privacy status of protected so
05:05 - not just anybody can call this method
05:08 - then since this contains user IDs and
05:10 - passwords so let's head back to our main
05:13 - class and what we're going to do here is
05:15 - create an instance of our login page so
05:18 - we need to type in the name of the class
05:19 - to create an instance of this login page
05:22 - let's call this instance login page with
05:26 - a lowercase L equals new login page
05:30 - parenthesis semicolon now what we're
05:34 - gonna do here is that we're going to
05:35 - send our login info as an argument to
05:38 - our login page so normally if you need
05:41 - to retrieve something from another class
05:43 - you can type in the name of the instance
05:46 - of that class like ID and passwords and
05:48 - we're going to use the get login info
05:51 - function that we made so now what we're
05:53 - gonna do with this is actually place
05:55 - this all within the constructor for the
05:58 - login page and send this as an argument
06:00 - because this is going to return our hash
06:03 - map and then we're just going to send it
06:05 - to our login page alright so then we
06:07 - also need to set up the constructor for
06:09 - our login page so that the parameters
06:11 - are set up to receive a hash map so
06:14 - that's everything for the main class and
06:16 - the ID and passwords class we're going
06:18 - to do a few things within our login page
06:20 - so let's have there and set up the
06:22 - constructor for our login page so at the
06:25 - top login page parentheses curly braces
06:28 - and we need to set up the parameters
06:30 - here so that this will accept a hashmap
06:32 - also make sure you have this import as
06:34 - well all right so then we need to type
06:37 - in the datatype hash
06:39 - and then this has a hashmap of two
06:42 - datatypes
06:43 - both our strings and we will call this
06:46 - hash map that we're receiving a
06:48 - different name
06:49 - maybe login info original now what we're
06:55 - going to be doing with this login info
06:57 - original is actually making a copy of it
07:00 - and we want this to be the copy at least
07:03 - to be globally available to all methods
07:06 - within our login page so we're going to
07:08 - create a copy of this login info so
07:10 - let's create a new hash map so hash map
07:12 - then angle brackets it has a data type
07:16 - of two strings and let's call this login
07:19 - info equals new hash map then two
07:25 - strings again alright so we have this
07:32 - hash map login info and we're going to
07:34 - say login info equals login info
07:37 - original so then we have a copy of our
07:41 - hash map that is globally available to
07:43 - our login page so that other methods can
07:46 - actually use this then alright now with
07:49 - this class we want this to implement the
07:51 - action listener interface so we're going
07:53 - to type that in implements action
07:57 - listener and then we'll need to import
08:01 - this and then add unimplemented methods
08:05 - so that we have an action performed
08:07 - method so we can handle events then
08:10 - alright so we're going to instantiate a
08:12 - few things before our constructor we
08:14 - already have a hash map now of all the
08:16 - IDs and passwords so let's create our
08:19 - jframe so starting from the top will
08:23 - instantiate that so jframe frame equals
08:27 - new jframe there we go and then I'll
08:35 - just import things along the way just to
08:37 - save time we'll also need a login button
08:40 - so we'll create a J button J button will
08:43 - call this login button equals new J
08:48 - button and let's add text to this right
08:50 - away so we'll add the word login
08:53 - let's also create a reset button so this
08:59 - will be called reset button and we will
09:02 - set the text to be reset and we'll also
09:05 - import these as well ok we'll also need
09:10 - a user ID field so somebody can type
09:13 - that end so AJ text field would work for
09:15 - that J text field and this will be
09:18 - called user ID field equals new J text
09:26 - field
09:28 - we'll also create a password field so J
09:33 - password field and we'll call this user
09:41 - pass word I can't spell today user
09:48 - password field equals new J password
09:54 - field and then we'll import these as
09:58 - well alright let's add a label that says
10:04 - user ID and then password right next to
10:07 - the fields then so these will be J
10:10 - labels jlabel user ID label that will be
10:17 - the name equals new J label and then we
10:22 - will set the text right away so we can
10:24 - do that within the parentheses and we
10:27 - will just type in user ID we're also
10:30 - going to create a user password label so
10:35 - actually I'm just going to copy this to
10:37 - save some time so we're going to change
10:39 - ID to password and this will say
10:44 - password is the text and then we also
10:49 - want to create some sort of message
10:51 - label to let the user know that either
10:53 - login was failed or login was successful
10:56 - so we'll make AJ a label for that
10:59 - so J label will call this message label
11:03 - equals new J
11:06 - label and that ruler should be
11:09 - everything that we need to instantiate
11:10 - so let's go to our constructor and start
11:13 - designing some things within here
11:15 - so let's start with the jframe and let's
11:17 - do that last so we'll add that at the
11:19 - end so for our J frame we're going to
11:23 - type in the name frame dot set default
11:26 - close operation so this will close when
11:29 - we exit out of it
11:31 - so J frame dot exit on close and then we
11:37 - need to set the size so frame dot set
11:40 - size and I usually pick for 20 by for 20
11:43 - for the size and we do not want a layout
11:48 - manager so set layout no and then we
11:55 - want our frame to be set visible true so
11:58 - we can actually see it okay let's add
12:02 - some components so let's begin with the
12:05 - user ID labels and the password labels
12:08 - so we're going to do that before our J
12:10 - frame because we usually like to do this
12:12 - last alright so user ID label dot set
12:19 - bounce where do we want to place this so
12:22 - I actually picked a spot for this
12:24 - already where X is 50 where Y is 100 is
12:28 - pretty decent then we'll make this 75
12:30 - pixels long for the width and 25 for the
12:33 - height and let's do the same thing for
12:37 - our password label so I'm just going to
12:40 - copy this paste it make a few changes
12:41 - user password label and we will change
12:47 - where Y is 100 to 150 then we'll keep
12:52 - the other dimensions the same alright
12:54 - then let's add these just to test them
12:56 - so frame dot add user ID label and we'll
13:06 - do the same thing for password user
13:12 - password label okay let's see what we
13:15 - have so far okay not bad we're going to
13:18 - add some text boxes here fairly soon
13:21 - let's also add the message label before
13:26 - I forget about that so message label dot
13:30 - set bounce will place this where X is
13:35 - 125 where Y is 250 this will be 250
13:41 - pixels for the width and the height 35
13:44 - pixels and let's set the font as well so
13:47 - message label dot set font within
13:53 - parentheses a new font and we don't
14:00 - really care about a font type we'll just
14:02 - set it to null for now and we will set
14:05 - this to maybe italic so font dot italic
14:12 - and maybe a font size of 25 then we need
14:16 - to import this as well all right so
14:20 - let's actually add some text to this to
14:22 - test it so this is a test
14:28 - oh we also have to add it to our frame
14:32 - that's very easy to forget so frame dot
14:36 - add message label okay we should be able
14:41 - to see it now okay that's decent but
14:45 - let's actually get rid of this text
14:46 - because we probably don't want to see
14:48 - that all right so we have our user ID
14:53 - label password label message label let's
14:57 - also create the user ID field and
14:59 - password field so user ID field
15:04 - so this is where somebody's gonna type
15:06 - in their user ID and we'll set the
15:08 - bounds where X is 125 Y is 100 this will
15:16 - be 200 pixels long for the width and 25
15:19 - for the height and let's do the same
15:23 - thing for our password and I'm just
15:24 - going to copy the
15:25 - so user password field will set the
15:30 - bounds to be 125 and 150 and will keep
15:36 - the other two fields the same and then
15:37 - let's add these to our frame so frame
15:39 - dot add user ID field and then the same
15:46 - thing for our password field okay let's
15:52 - try it now not too bad not too bad we
15:55 - can actually type some type in some
15:57 - stuff here now with the password if you
15:59 - were to type something in it's actually
16:01 - hidden so everything is bulleted all
16:04 - right next let's create the login button
16:08 - so this will submit some information
16:10 - when we click on this button so that was
16:13 - a login button we'll set the bounds to
16:18 - be where X is 225 actually that's wrong
16:22 - 125 Y is 200 this will be 100 pixels
16:27 - long and 25 for the height and then we
16:32 - need to add an action listener to this
16:34 - button so log in button dot add action
16:39 - listener within parenthesis this and
16:43 - let's copy this and make a reset button
16:46 - so we'll change login to reset and we're
16:52 - going to set the bounds for our reset
16:54 - button
16:54 - so we'll just change the positioning the
16:58 - X positioning to 225 and then we need to
17:01 - add these to our frames so frame dot add
17:04 - login button and the same thing for our
17:09 - reset button
17:14 - ok let's try it now all right so
17:19 - currently they don't do anything so
17:20 - we'll do that oh you know what I'm going
17:23 - to set focusable false because I don't
17:25 - like that little box that's around the
17:27 - words so let's add that you can keep it
17:30 - in if you want
17:31 - so login button set focusable false
17:39 - we'll do the same thing for reset okay
17:47 - that's better let's head down to our
17:49 - actionperformed method and then let's
17:52 - work on the reset button so if e dot get
17:56 - source is equal to the reset button what
18:01 - do we want our program to do so with our
18:04 - user ID field we're going to set text to
18:12 - just a set of double quotes basically so
18:16 - as if we're clearing it and then we're
18:18 - going to do the same thing for our user
18:20 - password field so user password field
18:26 - dot set text to just a blank set of
18:30 - double quotes
18:30 - alright let's actually try this okay so
18:34 - I'm going to type in a username and then
18:36 - type in a password then we're going to
18:38 - click reset and everything is cleared
18:40 - out which is pretty sweet let's work on
18:42 - this login info button next so make sure
18:46 - to write this outside of your if
18:48 - statement and this is what we're gonna
18:50 - type if e dot get source parenthesis is
18:57 - equal to login button ok we have a few
19:05 - things to fill out within here so the
19:07 - first thing that we're going to do is
19:08 - we're going to create a string variable
19:12 - and we'll call this string user ID
19:16 - equals user ID field dot and then we're
19:23 - gonna get text
19:25 - we'll use the get text method here then
19:29 - we're going to do the same thing for
19:30 - password except we have a slightly
19:33 - different variation of this so string
19:36 - password and since we're using AJ
19:40 - password field instead of a text field
19:42 - there is something else that we have to
19:44 - do so what we're gonna do here is string
19:47 - dot value of parentheses oops
19:55 - parentheses and then within the
19:57 - parentheses what we're gonna type is
20:00 - user password field dot get password so
20:10 - it's going to retrieve the password that
20:12 - we type in convert it to a string and
20:14 - then store it within a string called
20:16 - password and then we're actually going
20:17 - to verify the user ID and password so
20:21 - we'll add that to the next line all
20:24 - right so then we're going to check this
20:27 - info that we have so if then we're going
20:30 - to refer to our hash map so if login
20:34 - info which is the name of our hash map
20:36 - dot contains key so the key is our user
20:42 - ID so we're going to place that here if
20:44 - our user ID is within our login info we
20:48 - also we at that point want to verify if
20:51 - the password is correct so we'll put
20:53 - this within an if statement and what
20:55 - we'll type here is if login info the
21:01 - name of the hashmap
21:02 - dot get user ID dot equals
21:18 - password all right so if we get the user
21:27 - ID and The Associated password is equal
21:30 - that means their credentials are
21:33 - verified then so I'm thinking what we'll
21:35 - do is just add a message label for now
21:38 - or we'll change the message label and
21:40 - we'll set the foreground to maybe green
21:45 - so color green and we will also set the
21:53 - text so message label dot set text and
21:59 - we will just display some text such as
22:02 - login successful and we also need to
22:09 - import the colors all right and then
22:12 - we're going to launch an instance of our
22:14 - welcome page but we'll have to work on
22:16 - that later on so we're going to create
22:19 - an instance of our welcome page because
22:21 - that's the next page we want to go to
22:23 - after this and we'll call this welcome
22:25 - page equals new welcome page okay let's
22:34 - test this out for now so just as a
22:36 - reminder here's all the IDs and
22:38 - passwords that we have we're going to
22:40 - run the program so I'm going to type in
22:43 - bro for a username and I'm just going to
22:44 - make up a random password and see what
22:46 - happens so we're going to click login
22:48 - and nothing appears to happen so that's
22:49 - good alright so this time I'll type in
22:52 - the right password which is pizza and
22:54 - then click login and it says login it's
22:57 - successful however this doesn't yet open
23:00 - the Welcome page yet because we still
23:02 - have to design that this will work on
23:04 - that later but we at least know that
23:06 - this is registering as a successful
23:08 - login which is pretty cool now let's
23:11 - head back to our login page so if the
23:14 - password equals the user ID and password
23:16 - that we type in what if the password is
23:19 - not equal so we're going to create an L
23:22 - statement and let's copy the message
23:25 - label set foreground and set text method
23:28 - and let's change maybe the color to red
23:30 - and we will change the text to let's see
23:35 - wrong password and let's try this again
23:40 - so I'll type in bro and make up a random
23:43 - password and then click login and it
23:46 - says wrong password okay so what if
23:49 - there is a user ID that we do not locate
23:53 - so what we'll do here is that outside of
23:57 - our if statement for if login info
24:01 - contains the user ID we'll make an else
24:04 - statement
24:05 - and what we'll type in here is maybe
24:09 - message label will set this to red and
24:11 - then we will set the text to be username
24:15 - not found alright then let's try this
24:22 - again so I'm going to make up a random
24:26 - username so I'll type in I'm a hacker
24:30 - one two three and I'll make up a random
24:33 - password and then click login and it
24:35 - says username not found which is good
24:37 - then but if there is a username that we
24:40 - found like bro code but if I type in the
24:43 - wrong password it's going to say a wrong
24:46 - password but then if I type in the right
24:48 - password and for this user ID it's
24:51 - abc123
24:52 - click login and it says login it's
24:54 - successful alright so that's pretty much
24:57 - everything we have to do with our login
24:58 - page let's work on our welcome page next
25:01 - so this is what we're gonna type here
25:03 - we're going to create a jframe we'll
25:06 - call this frame equals new jframe
25:09 - parenthesis semicolon and we'll create a
25:13 - jlabel maybe like a welcome label so J
25:16 - label welcome label equals new J label
25:24 - and we will say maybe hello then we'll
25:31 - create a constructor for this welcome
25:33 - page but I want to import a few things
25:35 - first okay let's work on the constructor
25:37 - next so welcome page and what we will
25:42 - type within this constructor
25:45 - is that we will add the frame so frame
25:47 - dot oops
25:50 - set default close operation so J frame
25:55 - dot exit on close and then frame dot set
26:02 - size and I will make this for 20 by 420
26:08 - and then set the layout frame dot set
26:12 - layout to no because I don't want a
26:15 - layout manager then we need to set the
26:18 - visibility so frame dot set visible to
26:24 - true okay let's add our welcome label so
26:29 - welcome label dot set bounds well place
26:35 - this maybe in the top left corner so 0 0
26:38 - will make this 200 pixels for the width
26:41 - and 35 for the height and then let's
26:45 - also set the font so welcome label dot
26:48 - set font new font but let me fix that
26:55 - I'll put a null for the first field
26:58 - because I don't care for a font style
27:00 - maybe will have this be plain and then a
27:04 - font size of 25 then we need to import
27:09 - this font and then add this welcome
27:12 - label to our frame so frame dot add
27:16 - welcome label ok this should work then
27:22 - let's try it now
27:25 - ok so I'm going to type in brill this
27:29 - user ID has a password of pizza I'm
27:32 - going to click login so it says log and
27:34 - successful and it opens a new window for
27:36 - us now let's say that you want to get
27:38 - rid of this login page here so what
27:41 - we're going to type within our login
27:42 - page is that we're actually going to go
27:44 - to the actionperformed method and we're
27:49 - going to go to within this if statement
27:50 - so if logins get user ID equals password
27:55 - so before we launch the page we're going
27:57 - to take our frame
27:58 - and use the dispose method so it
28:02 - actually gets rid of our frame then okay
28:04 - let's try it now
28:06 - okay so user ID I'm going to type in
28:09 - brill it has a password of Pizza
28:11 - I'm going to click login it disposes of
28:13 - our frame and it adds our new frame our
28:16 - new window which is welcome page and all
28:18 - we have here it just says hello
28:20 - basically now let me show you one more
28:22 - trick that you can do we can actually
28:24 - send our username to our welcome page so
28:27 - it can say hello then whatever you're
28:29 - you know user ideas so we'll actually
28:32 - send that within our welcome page
28:33 - constructor so when we create an
28:35 - instance of our welcome page we're going
28:37 - to pass in user ID as an argument and
28:41 - then we also need to set up our welcome
28:43 - page to accept this so welcome page this
28:47 - will accept a string called user ID and
28:50 - then for our welcome label we're going
28:53 - to set the text so welcome label dot set
28:57 - text to hello oops
29:06 - plus user ID okay let's try it now so
29:17 - this time I'm going to type in bro code
29:20 - and bro code had a password of abc123
29:25 - I'll click login login was successful
29:27 - and it says hello bro code in a new
29:30 - window so that's one of a few ways in
29:34 - which you can create a login page in
29:36 - Java and then someday as you become a
29:38 - more advanced Java developer you can
29:40 - always change this program where you
29:42 - could query a database or a locate user
29:45 - IDs and passwords on a file somewhere
29:47 - but this is only using what we've
29:49 - learned so far and I would say it's
29:51 - pretty successful so if you'd like a
29:53 - copy of all this code I'll post it in
29:55 - the comments down below and well yeah
29:57 - that's how to create a login page using
30:00 - Java hey you yeah I'm talking to you if
30:03 - you learn something new then you can
30:05 - help me help you in three easy steps
30:09 - by smashing that like button
30:11 - drop a comment down below and subscribe
30:12 - if you'd like to become a fellow bro
30:16 - [Music]
30:27 - [Music]