00:00 - hey what's going on people so in today's
00:02 - video I'm going to explain the set
00:03 - timeout function in JavaScript the set
00:06 - timeout function allows you to schedule
00:08 - the execution of a function after an
00:10 - amount of time in milliseconds the times
00:13 - are approximate they vary based on the
00:15 - workload of your JavaScript runtime
00:17 - environment I wouldn't recommend using
00:19 - set timeout for anything precise like a
00:21 - stopwatch it's an approximation to use
00:24 - the set timeout function you pass in a
00:26 - call back to a function and a delay in
00:28 - milliseconds here's an example Le I will
00:31 - create a function to say
00:34 - hello all we're going to do is window.
00:38 - alert the word
00:43 - hello I will use the set timeout
00:47 - function pass in a call
00:49 - back we'll pass in a call back to say
00:52 - hello then execute it after 3,000
00:55 - milliseconds so 3 seconds let's see if
00:58 - this works 1 2 3 hello an anonymous
01:05 - function works too so instead of a
01:07 - callback we'll use an anonymous
01:09 - function function parenthesis curly
01:14 - braces window.
01:17 - alert the word
01:20 - hello 1 1000 2 1000 3 1000 hello or even
01:26 - an arrow function we have parameters
01:30 - Arrow what are we going to do window.
01:34 - alert the word
01:38 - hello 1 1000 2 1000 3 1,000 hello you
01:44 - can use the clear timeout function to
01:46 - cancel a timeout before it triggers but
01:49 - we have to pass in a Timeout ID so what
01:53 - we'll do with this set timeout function
01:56 - is assign it to an ID stored within a
01:58 - variable or constant
02:01 - const time out
02:05 - ID equals our set timeout function
02:09 - that'll display the word hello I can
02:11 - clear this timeout with the clear
02:14 - timeout function but I have to pass in
02:16 - that ID as an
02:18 - argument immediately after calling the
02:20 - set timeout function we will cancel it
02:24 - let's try it 1 1000 2 1000 3 1000 yeah
02:30 - nothing's happening we canceled it all
02:32 - right what we'll do this time is create
02:34 - a button using HTML when we click on the
02:37 - button we'll set a timeout to display
02:39 - the word
02:40 - hello
02:43 - so let's clear all of this go to our
02:46 - HTML file we'll create a
02:50 - button the button will have text of
02:54 - start and I'm going to zoom
02:57 - in I will set the onclick attribute to
03:02 - equal a function we will start a timer
03:06 - then add a set of
03:08 - parentheses when we click on the button
03:10 - do this function So within our
03:13 - Javascript file we will create a start
03:16 - timer
03:18 - function function start
03:22 - timer we will set time
03:26 - out I'll use an arrow function
03:31 - let's
03:32 - window. alert the word we will display
03:36 - the word hello after 3,000
03:39 - milliseconds all right so nothing's
03:41 - going to happen until I click the button
03:44 - I'm going to click it now 1 1,000 2
03:47 - 1,000 3 1,000
03:50 - hello let's create a second button to
03:53 - clear the timeout if we need to stop it
03:56 - let's copy our first button paste it
04:01 - change the text of the button to be
04:03 - clear we will clear the timeout but
04:05 - we'll need another
04:07 - function clear
04:12 - timer so there's our second button we'll
04:15 - need a timeout ID so outside of this
04:18 - function I will declare a variable of
04:21 - let time out
04:25 - ID when we start our timer we will
04:28 - assign the set time out function an ID
04:32 - of timeout
04:33 - ID then we can stop it using this
04:36 - ID we will create a function to clear
04:40 - the
04:42 - timer we're going to use the clear
04:44 - timeout function clear time
04:48 - out we need to pass out a timeout ID as
04:51 - an argument which we will do and then
04:55 - just to be sure that everything works
04:56 - within both these functions let's
04:58 - console.log something let's say the word
05:02 - started within our start timer and
05:05 - within our clear timer let's display the
05:07 - word cleared just so we know that these
05:10 - functions were called so I'm going to
05:13 - save
05:14 - everything I'm going to start the timer
05:16 - but not clear it let's start now 1 1000
05:21 - 2 1000 3 1000 hello let's go to our
05:26 - console and it says that we started well
05:29 - starter I clearly can't spell today
05:32 - started we're going to start then
05:36 - cancel start 1 1000 2 1000
05:40 - clear and nothing happened let's go to
05:43 - our console inspect console we started
05:46 - set timeout and then we cleared
05:49 - it all right everybody that is the set
05:51 - timeout function it's a function in
05:53 - JavaScript that allows you to schedule
05:56 - the execution of a function after an
05:58 - amount of time in milliseconds
06:00 - execution time may vary based on the
06:01 - workload of the JavaScript runtime
06:03 - environment and well everybody that is
06:06 - the set timeout function in
06:11 - JavaScript