00:00 - hey what's up everybody so in today's
00:02 - video I got to explain inheritance
00:04 - inheritance allows a new class to
00:06 - inherit properties and methods from an
00:08 - existing class these two classes have a
00:11 - parent child relationship a child will
00:13 - inherit properties and methods from a
00:15 - parent it's kind of like a family tree a
00:18 - child will inherit genes from a parent
00:20 - inheritance helps with code reusability
00:22 - because we don't need to keep on
00:24 - repeating the same properties and
00:25 - methods if all the children share them
00:27 - here's an example we'll create an animal
00:29 - class
00:31 - class animal will have a property of
00:35 - alive if you're an animal you start off
00:37 - being alive all animals should be able
00:40 - to eat and sleep we'll create methods
00:42 - for
00:43 - those we'll have an eat method all we're
00:46 - going to do is
00:48 - console.log I'll use a template
00:51 - string this now I'll add a
00:55 - placeholder
00:58 - this.name is
01:01 - eating and a Sleep
01:05 - Method
01:07 - sleep this this. name is
01:12 - sleeping animal will be the parent class
01:15 - we'll create children classes that
01:16 - inherit these properties and methods
01:19 - let's create a few children classes
01:21 - class rabbit our rabbit class will
01:25 - inherit all the properties and methods
01:26 - of the animal class to declare a parent
01:29 - child relationship ship the child will
01:32 - extends the parent
01:35 - animal for the rabbit I'm going to give
01:38 - this class a name name equals rabbit
01:42 - this will be a property if you're
01:44 - familiar with the static keyword you can
01:46 - make the static now we'll create a fish
01:49 - class that also extends animal class
01:53 - fish extends
01:56 - animal fish will have one property name
02:00 - equals
02:01 - fish and a hawk class class Hawk
02:07 - extends
02:09 - animal will have one name
02:13 - property
02:15 - Hawk all right let's see if this works
02:17 - if we create a rabbit fish and Hawk
02:19 - object they should have access to these
02:21 - properties and
02:25 - methods let's create const rabbit equals
02:29 - new
02:32 - rabbit
02:33 - const fish equals new
02:40 - Fish const Hawk equals New
02:45 - Hawk all right let's see if our rabbit
02:48 - has an A Life
02:50 - Property
02:53 - console.log take the name of the object
02:56 - rabbit do access a property or method
02:59 - aot Al that's our property the rabbit is
03:02 - alive but what if the hawk swoops in and
03:05 - kills the rabbit let's change the alive
03:08 - property of the
03:09 - rabbit rabbit. alive equals false the
03:13 - rabbit is no longer
03:15 - alive now let's see if our rabbit has
03:18 - access to a eat and Sleep
03:22 - Method rabbit.
03:26 - eat this rabbit is eating and sleep
03:30 - rabbit.
03:33 - sleep the rabbit is sleeping Let's test
03:36 - this with
03:37 - fish fish. alive fish. eat method fish.
03:41 - Sleep
03:42 - Method the fish is alive the fish is
03:44 - eating the fish is
03:46 - sleeping and Hawk hawk. alive hawk. eat
03:50 - method hawk. Sleep Method the hawk Is
03:54 - Alive the hawk is eating the hawk is
03:56 - sleeping our children classes of rabbit
03:59 - fish and ha all inherited the properties
04:01 - and methods of the parent animal class
04:04 - this helps with code reusability because
04:06 - I don't need to declare all of these
04:08 - properties and methods within each of
04:10 - the children classes like
04:14 - this we're saving a lot of lines of code
04:17 - it's not that apparent with just a few
04:19 - child classes but imagine if you had
04:21 - hundreds of different child classes well
04:23 - by using inheritance you would be saving
04:25 - a lot of time but not only that the
04:28 - children can have their own unique
04:29 - properties and methods too for example
04:32 - rabbits will be able to run but fish and
04:35 - Hawks can't run that's a method that
04:38 - only belongs to rabbits within our
04:40 - rabbit class let's create a new method a
04:42 - run
04:45 - method will
04:48 - console.log I'll use a template
04:50 - string
04:52 - this add a
04:54 - placeholder
04:56 - this.name is
04:58 - running
05:00 - within our fish class let's create a
05:02 - swim
05:04 - method
05:05 - swim this this do name is
05:10 - swimming and Hawks will be able to
05:14 - fly we'll create a fly method this this.
05:18 - name is
05:20 - flying let's minimize these
05:24 - classes let's take our rabbit object
05:27 - display the alive property the eat
05:30 - method the Sleep Method and the run
05:32 - method rabbit. run method the rabbit is
05:36 - eating the rabbit is sleeping the rabbit
05:38 - is running now let's do this with fish
05:41 - fish. alive fish. eat method fish. Sleep
05:45 - Method now does the fish have a run
05:47 - method it does not fish. run is not a
05:51 - function run is a method that belongs to
05:54 - the rabbit class fish can't run because
05:56 - well they don't have legs we did not
05:58 - give our fish class a run method they
06:00 - can swim though but they can't run fish.
06:04 - swim
06:05 - method the fish is swimming let's do
06:08 - this with
06:12 - Hawk our Hawk cannot swim but it can fly
06:16 - we'll use the fly
06:18 - method the hawk is eating the hawk is
06:20 - sleeping the hawk is flying and of
06:22 - course our rabbit can't fly or
06:26 - Swim does our rabbit have a fly method
06:29 - it does not rabbit. fly is not a
06:31 - function all right everybody so that's
06:33 - inheritance it allows a new class to
06:36 - inherit properties and methods from an
06:38 - existing Class A Child inherits
06:40 - properties and methods from a parent it
06:42 - helps with code reusability I don't need
06:45 - to declare all of these properties and
06:46 - methods for each of these classes I can
06:48 - simply reuse it that helps us follow the
06:51 - dry principle don't repeat
06:53 - yourself and well everybody that is an
06:56 - introduction to inheritance in
06:58 - JavaScript