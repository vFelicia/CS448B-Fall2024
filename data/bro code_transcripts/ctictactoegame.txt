00:00 - oh yeah what's going on everybody it's
00:02 - you bro hope you're doing well and in
00:03 - this video we're going to create a game
00:05 - of tic-tac-toe so sit back relax and
00:08 - enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like comment and subscribe
00:16 - your support will help keep this channel
00:18 - running all right let's begin so the
00:20 - first thing that you're going to need is
00:22 - to include these files at the top of
00:24 - your c program and we will create seven
00:27 - different function prototypes so the
00:29 - return type of this first function is
00:31 - void and the name of this function will
00:34 - be reset board our board is going to be
00:36 - a 2d character array and our second
00:39 - function is void print board
00:42 - which will print our 2d character array
00:44 - then with this next function this has a
00:47 - return type event and this will check
00:50 - free spaces
00:53 - if after invoking this function this
00:55 - function returns zero that means the
00:58 - game is over there's no more places to
00:59 - move and we will need void player move
01:03 - when it's the player's turn to move
01:06 - void computer move when it's the
01:08 - computer's turn to move
01:10 - char
01:11 - check winner
01:13 - so we have a few different win
01:15 - conditions to check and void print
01:18 - winner
01:19 - and there is one parameter a single
01:22 - character soap char so these are
01:24 - function prototypes we tend to declare
01:26 - these before the main function because
01:28 - they help with readability after the
01:30 - main function we will give each of these
01:32 - a body
01:34 - so copy and paste those functions and
01:37 - then give each a body
01:43 - and with the parameter for print winner
01:46 - the parameter is char
01:48 - winner now let's head back to the top of
01:50 - our program and there's a few global
01:52 - variables that we're going to declare
01:54 - we could declare these as local
01:56 - variables within the main function but
01:57 - this program is going to get really
01:59 - complicated then if we have to pass
02:00 - around pointers to a two-dimensional
02:03 - array so just to keep this simple i'm
02:05 - going to create some global variables
02:07 - there are some downsides to global
02:09 - variables so i tend to not to like to
02:10 - use these so we have a 2d array of
02:13 - characters named board it's our game
02:15 - board and let's create two constants
02:18 - constant char player a naming convention
02:21 - for constance is to make all of the
02:23 - letters uppercase
02:24 - and i will set this to a character of my
02:26 - choice i could be oh or i could be x or
02:29 - something else maybe i could be a dollar
02:31 - sign whatever i'll set myself to be an x
02:34 - and then let's create a constant for the
02:36 - computer constant char
02:39 - computer and computers will be o so
02:43 - within the main function we will declare
02:45 - a local variable char
02:48 - winner and i'll go ahead and set this to
02:51 - an empty space
02:52 - so if our winner is in empty space that
02:54 - means there currently is no winner if
02:57 - player wins then that would be an x if
03:00 - computer wins that's a no within our
03:02 - main function this is acting as a driver
03:04 - for our code so the first thing we'll do
03:07 - is reset our board
03:10 - so we are going to initialize all of the
03:12 - different characters within our
03:13 - two-dimensional board so let's head to
03:16 - this
03:16 - function so with our reset board
03:19 - function we need nested loops
03:23 - the outer for loop is for the rows the
03:26 - inner for loop will be for the columns
03:28 - int i set this equal to zero and i need
03:31 - to iterate this for loop three times one
03:33 - for each row that we have
03:35 - and then we need an inner for loop
03:39 - so change the index to j
03:43 - and for each index within our 2d array
03:46 - at index of i
03:48 - and j i will set the sequel to an empty
03:51 - space
03:52 - so when we call the reset board function
03:55 - each element within this 2d array of
03:57 - characters will be an empty space
04:00 - effectively clearing it
04:02 - so back within the main function after
04:04 - resetting our board let's print our
04:06 - board
04:08 - and fill in this function
04:11 - so you can get creative with this
04:13 - here's one thing that i'll use
04:16 - so i'm going to print
04:18 - a space
04:20 - a character a space
04:22 - a vertical bar
04:23 - space
04:25 - character space vertical bar space
04:29 - character
04:30 - these three format specifiers are
04:32 - placeholders the first character i'm
04:34 - going to display is our board at index
04:38 - of zero zero that is row zero column
04:41 - zero followed by board index zero
04:45 - one
04:46 - then board zero two
04:50 - and with the next printf statement let's
04:52 - display something like this
04:54 - a new line
04:55 - three dashes
04:57 - a vertical bar
04:58 - three dashes another vertical bar
05:01 - three dashes then a new line
05:04 - okay so let's copy these paste it once
05:08 - and we need to change these indices
05:11 - so with this third printf statement
05:13 - these indices will be one zero one one
05:17 - one two
05:19 - and then do this again so copy paste
05:23 - 2 0
05:24 - 2 1
05:26 - 2 2.
05:28 - then at the end i'll add a new line
05:30 - printf
05:32 - new line
05:34 - oh let me fix one thing
05:39 - okay so this is what it should be all
05:41 - right now back within our main function
05:43 - we're going to create a while loop and
05:45 - we'll surround our print board function
05:47 - within this while loop
05:52 - so our condition is if winner
05:56 - is equal to an empty space
05:59 - that means there currently is no winner
06:02 - and after invoking the check free spaces
06:06 - function
06:07 - the value returned does not equal zero
06:11 - so let's fill in this check free spaces
06:13 - function
06:14 - within the check free spaces function
06:16 - let's declare a local variable int free
06:20 - spaces and i'll initially set this to
06:22 - nine
06:23 - then we need a nested for loops
06:28 - and i equals zero we will continue this
06:31 - as long as i is less than three i plus
06:34 - plus
06:36 - then create an inner for loop
06:38 - change the index from i to j
06:42 - and within the inner for loop we're
06:44 - going to write an if statement
06:46 - and we are checking to see if our 2d
06:49 - array of characters board
06:51 - at index of i and j does not equal an
06:55 - empty space
06:56 - if whatever spot we're on is currently
06:58 - occupied we will take our free spaces
07:02 - local variable and decrement it by one
07:05 - then outside of our for loops we will
07:07 - return
07:09 - free spaces
07:11 - if we return zero that means the game is
07:14 - over there's no more places a player can
07:16 - move
07:17 - so heading back to our main function
07:20 - it will be let's say the player's turn
07:22 - to move first
07:23 - so invoke the player move function
07:26 - and we'll need to fill this in
07:29 - with the player move function we will
07:30 - declare two local variables intex and y
07:35 - and we will ask a user to enter in a row
07:37 - number and a column number of where they
07:39 - would like to move to
07:41 - so using a printf statement
07:43 - we will enter
07:45 - row
07:46 - number
07:47 - one through three
07:50 - and then use the scan f function to
07:53 - accept some user input so this will be
07:55 - an integer
07:56 - and use the address of operator x
08:00 - so a user is going to enter in numbers
08:03 - one through three for which row that
08:04 - they need but with arrays they always
08:07 - begin with zero but a user is not going
08:09 - to know that so with whatever the user
08:11 - types in we will decrement x by one
08:14 - so this gives us rows zero through two
08:17 - technically
08:18 - then do the same thing with our columns
08:21 - enter column number one through three
08:25 - address of operator y then decrement y
08:29 - we will check to see if the coordinates
08:31 - that the user gave are occupied or not
08:34 - so using an if statement
08:36 - we will check to see if our board
08:39 - at index of x
08:41 - and y
08:42 - does not equal an empty space
08:45 - that means that this spot is currently
08:47 - occupied by another character
08:49 - so let's print something to let a user
08:51 - know
08:53 - invalid move
08:56 - else that spot is open
08:59 - so take our board
09:02 - at index of x
09:04 - and y
09:05 - set the sequel to our player character
09:08 - so we're going to take all of this code
09:10 - and place it within a do while loop so
09:12 - write do
09:14 - while
09:15 - place your code that you just wrote
09:17 - within there
09:21 - and our condition
09:23 - is if our board
09:25 - at index of x
09:27 - and y does not equal an empty space
09:30 - if the spot that the player would like
09:32 - to place their character is currently
09:34 - occupied then we will ask them again to
09:37 - enter some coordinates uh then within
09:39 - our else statement we need to break out
09:42 - of this while loop okay so that is
09:44 - everything for the player move function
09:47 - so then heading back to the main
09:49 - function
09:50 - after the player moves we will check to
09:52 - see if there's a winner
09:54 - winner equals then invoke the check
09:57 - winner function
09:59 - and we will fill in this function next
10:02 - so find the check winner function and we
10:05 - need to check all of the different win
10:06 - conditions
10:08 - so first we will check each row using a
10:11 - for loop so this section of code we will
10:13 - check our rows we'll need a for loop to
10:16 - iterate three times one for each row
10:19 - int i
10:21 - equals zero continue this as long as i
10:23 - is less than three
10:25 - increment i by one so this if statement
10:28 - is going to get a little bit funky we
10:30 - need to check each set of horizontal
10:32 - elements
10:34 - so let's begin with board
10:36 - at index of i
10:39 - and zero
10:40 - so that would be the top left element
10:43 - and we are checking to see if the
10:45 - character here is equal to this
10:47 - character
10:48 - so bored at index i
10:51 - and one
10:54 - and we're checking to see if board at
10:57 - index of i and zero is equal to board at
11:01 - index of i and 2. so here we're checking
11:04 - to see if this element is equal to this
11:06 - element and this element is equal to
11:09 - this element if they're all consistent
11:12 - we have a winner so we will return
11:14 - whatever character is within one of
11:16 - these elements let's say this one
11:18 - so return board at index of i index of
11:22 - zero return whatever character is within
11:24 - here this section of code will check all
11:26 - of the win conditions for each row but
11:29 - now we need columns so check
11:32 - columns
11:33 - and we can copy most of this so copy it
11:36 - and paste it
11:38 - then we just need to change these
11:39 - indices around
11:41 - so if board at index zero
11:44 - i
11:45 - is equal to board at index of one
11:49 - i
11:50 - and board at index of zero
11:54 - i
11:55 - is equal to
11:56 - board at index of two i then we will
12:00 - return whatever character is within
12:02 - board index of zero index of one so this
12:06 - section of code will check for any
12:08 - column when conditions then next we have
12:11 - diagonals there's only two
12:13 - check
12:14 - diagonals
12:17 - so let's copy this section of code
12:19 - paste it so our indices are zero zero is
12:24 - equal to
12:25 - one
12:26 - one one one is in the middle and board
12:29 - at index of zero zero
12:31 - is equal to board at index of two two
12:35 - if so then return zero
12:38 - zero
12:39 - then we have one more diagonal so copy
12:42 - this
12:43 - paste it
12:44 - and here are the elements if board at
12:47 - zero two is equal to board at one one so
12:52 - zero two is the bottom left one one is
12:55 - the middle
12:56 - and board at zero zero equals board at
13:00 - two zero that is the top right corner
13:03 - right here so if we have a diagonal we
13:05 - have a winner so return board at zero
13:09 - two let's say if after checking all of
13:12 - these different win conditions there is
13:13 - no winner
13:15 - then let's return an empty character
13:17 - that means there currently is no winner
13:20 - so then head back to the main function
13:22 - after invoking the check winner function
13:24 - let's write an if statement to see if
13:26 - the game is over
13:28 - so our condition is if winner does not
13:31 - equal an empty space that means there is
13:34 - a winner
13:35 - or after invoking the check free spaces
13:39 - function and the value returned is zero
13:42 - then we will break out of this while
13:44 - loop this is everything done for the
13:46 - player now we need to create a section
13:48 - of code within our while loop for the
13:50 - computer
13:51 - so copy this section of code
13:53 - and paste it and this time it will be
13:56 - the computer's move
13:58 - invoke the computer move function and we
14:01 - will need to fill in the computer move
14:03 - function
14:04 - within the computer move function the
14:06 - computer's move will be randomly
14:08 - generated and to generate some random
14:10 - numbers we'll need a seed
14:14 - so to create a seed to generate random
14:16 - numbers
14:18 - invoke the s rand function
14:21 - pass in time
14:23 - invoke it pass in zero
14:26 - and we will declare intex and int y we
14:29 - will generate two random numbers between
14:32 - zero and two now before we generate some
14:34 - random numbers let's check to see if we
14:36 - even have any free spaces available
14:39 - so our if statement is going to be
14:41 - check free spaces invoke it then if this
14:45 - is greater than zero then we will
14:47 - generate some random numbers
14:49 - and we'll do so within a do while loop
14:53 - so within this do-while loop we will
14:55 - generate two random numbers between zero
14:58 - and two
14:59 - x equals invoke the rand function
15:02 - modulus three
15:05 - then y equals invoke the rand function
15:08 - modulus three with our condition let's
15:11 - check to see if the spot generated is
15:13 - even open
15:14 - so board at index of x
15:17 - and y
15:18 - does not equal an empty space so we will
15:21 - keep on generating random numbers until
15:24 - there is an open space then escape this
15:26 - while loop so if we find an open space
15:29 - let's take our board
15:31 - at index of x and y
15:34 - set the sequel to our computer player
15:36 - this is all within an if statement
15:39 - else if there are no more spaces
15:41 - available
15:42 - we will invoke the print winner function
15:47 - and pass in an empty space
15:49 - this means that there is no winner it's
15:51 - a draw
15:52 - now let's fill in this print winner
15:54 - function this function is fairly easy
15:58 - if winner is equal to player
16:02 - then we will print
16:05 - you
16:06 - win
16:08 - else if
16:10 - winner is equal to computer
16:14 - then we will print
16:18 - you lose
16:21 - else if there is no winner then it's a
16:23 - tie it's a draw
16:29 - it's a tie
16:30 - within the main function we just have a
16:32 - few more things to add so outside of our
16:35 - while loop we will print our board and
16:38 - print the winner
16:40 - print
16:41 - board
16:42 - and print
16:44 - winner
16:45 - there is one argument whoever the winner
16:48 - is
16:49 - so let's run this once
16:51 - enter row numbers one through three uh
16:53 - let's say one
16:55 - and one
16:57 - so i moved here and the computer moved
16:59 - to row three column two
17:01 - uh let's say row three column three
17:04 - okay so i moved here and the computer is
17:06 - up here so i moved to row three column
17:09 - three and our computer is at row one
17:12 - column three
17:13 - uh then i'll move to the middle two
17:16 - two
17:16 - and it looks like i won this round so
17:19 - let's try this again and we will
17:20 - intentionally lose
17:22 - so one one two one
17:26 - one two
17:27 - two two
17:29 - and unfortunately it looks like i lost
17:32 - this time let's attempt to tie
17:38 - and it looks like it's a tie so looks
17:40 - like this game is working so what if we
17:42 - would like to ask the user if they would
17:44 - like to play again we can easily place
17:46 - our code within a do while loop so
17:48 - within our main function
17:49 - let's create char
17:51 - response
17:52 - and we will create a do while loop
17:55 - so take all of this code after the do
17:57 - while loop beginning with reset board
18:01 - copy it
18:02 - delete it
18:04 - and then paste it within the do while
18:05 - loop
18:09 - at the top of our do while loop let's
18:11 - reset winner and response
18:15 - winner equals an empty space
18:18 - and response equals an empty space
18:22 - then heading to the bottom of our do
18:24 - while loop let's ask if the user would
18:26 - like to play again
18:27 - so after displaying the winner let's
18:30 - create a prompt printf
18:33 - would you like to play again
18:38 - y for yes and for no
18:43 - and i'm just going to clear our buffer
18:45 - by using scanf and accepting a character
18:48 - just in case there is a new line
18:49 - character within our buffer then we will
18:51 - use the scanf function and accept a
18:54 - character after clearing our buffer
18:57 - and we will use the address of operator
19:00 - response
19:01 - now just in case somebody types in
19:03 - lowercase y i would still like to count
19:05 - that as yes so i'm going to take our
19:07 - response
19:08 - set this equal to invoke the to
19:12 - upper function
19:14 - pass in response
19:17 - and with this condition we will continue
19:19 - playing while our response is equal to
19:22 - the character y
19:25 - and at the end let's print
19:27 - thanks for playing
19:28 - okay let's run this one last time
19:34 - all right i win would you like to play
19:36 - again i'll type in y for yes
19:39 - and we have a new game
19:43 - all right it looks like i win so this
19:45 - time i will exit by typing n
19:48 - thanks for playing
19:50 - so yeah everybody that is a game of
19:52 - tic-tac-toe if you would like a copy of
19:55 - this code i'll post this to the comment
19:56 - section down below hey if you found this
19:59 - video helpful you can help me out by
20:00 - smashing that like button leave a random
20:02 - comment down below and subscribe if
20:04 - you'd like to become a fellow bro