00:02 - hey everybody so now that we know how
00:04 - functions work i thought this would be a
00:05 - good opportunity for us to learn about
00:07 - some useful string functions so there's
00:10 - a lot of string functions that are
00:11 - already written for us just include this
00:14 - header file at the top include string.h
00:17 - so create two strings one named string1
00:20 - and the other named string2
00:22 - string1 will be your first name string2
00:24 - will be your last name and then at the
00:26 - end of this program i am just printing
00:28 - string1 using a printf statement so
00:30 - let's begin the first useful string
00:33 - function is string lower so whatever
00:36 - string you pass in as an argument this
00:38 - function will convert a string to
00:40 - lowercase so the first letter in my name
00:43 - is uppercase it's capitalized so after
00:46 - passing in string1 into this function
00:48 - my name is all now lowercase
00:51 - otherwise there's string upper that will
00:54 - convert a string to uppercase
00:57 - and my name is uppercase
00:59 - stringcat will concatenate as in append
01:03 - string2 to the end of string1 so we will
01:06 - append the second argument to the first
01:08 - argument so if i pass in string1 then
01:11 - string two this will append my last name
01:14 - to my first name and these strings are
01:16 - now combined or i could append a given
01:18 - amount of characters from string two to
01:21 - string one so the third argument is a
01:23 - number if i append one character from
01:26 - string two to string one then this will
01:28 - take the c from my last name and append
01:31 - it to the end of my first name so that
01:33 - is the string and catch function
01:36 - there's also string copy and this one is
01:38 - actually fairly common
01:40 - so this will copy string two to string
01:42 - one if i print string one well it now
01:45 - displays code instead of bro this will
01:48 - remove the contents from string one and
01:50 - replace them with string two or you
01:52 - could copy a given amount of characters
01:54 - from string two to string one uh let's
01:56 - say that i'm going to copy the first
01:58 - character over so i'm copying the first
02:00 - character from my last name to my first
02:03 - name
02:04 - and my first name is now crow or i could
02:07 - set this to two
02:09 - and this will copy the first two letters
02:11 - over
02:13 - coo all right here's a few more so
02:15 - string set will set all characters of a
02:18 - string to a given character i'm going to
02:21 - set all of the characters from string 1
02:23 - to a question mark all of the characters
02:26 - within my name are all question marks
02:29 - and a string and set will set the first
02:32 - and characters of a string to a given
02:34 - character so i'm going to set the first
02:36 - character of my first name to an x
02:39 - so my name is now x bro and string
02:42 - reverse will reverse a string so if i
02:44 - reverse string one
02:47 - my first name is now orb so this next
02:49 - set of functions will return an integer
02:52 - so i'm going to declare a variable int
02:55 - result and this function is really
02:57 - common string length this returns the
03:00 - string length as an integer if i pass in
03:03 - string one this string has a length of
03:06 - three characters and then i'm going to
03:08 - print my result and this is an integer
03:12 - so the length of my first name
03:14 - is three characters this is a fairly
03:17 - common function
03:19 - the string compare function will compare
03:22 - all of the characters within two strings
03:24 - if they're the same they will return
03:27 - zero
03:28 - if they're different they will return a
03:30 - number beside zero so here's an if
03:32 - statement
03:33 - if result is equal to zero we will print
03:37 - these strings are the same else these
03:39 - strings are not the same
03:41 - so my first name is not equal to my last
03:44 - name these characters are different so
03:46 - this code will print
03:48 - these strings are not the same and let
03:50 - me get rid of that printf statement
03:52 - okay now if i make the strings the same
03:56 - then result is going to be zero
03:59 - these strings are the same and you can
04:02 - compare a given amount of characters too
04:04 - so currently i have these strings set to
04:07 - be the same characters so this will
04:09 - compare only the first character
04:11 - these strings are the same even if i
04:13 - change the other characters the first
04:15 - characters will still be the same
04:17 - so this function will return zero there
04:20 - are two additional versions of string
04:22 - compare and string and compare they are
04:25 - string compare i and string n i compare
04:30 - so these will do the exact same things
04:32 - except they ignore case sensitivity so
04:35 - yeah everybody those are just a few
04:37 - useful string functions there's still a
04:39 - lot more located within this header file
04:42 - but we would need to understand how
04:43 - things like pointers work which we have
04:45 - not discussed yet but i thought i would
04:47 - at least cover some of the basics so
04:49 - yeah those are a few useful string
04:52 - functions in c if you would like a copy
04:54 - of all these notes i'll post them to the
04:55 - comment section down below and well yeah
04:58 - those are a few useful string functions
05:00 - in c