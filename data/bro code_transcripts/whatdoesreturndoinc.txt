00:02 - all right everybody we are on the return
00:04 - keyword the return keyword will return a
00:07 - value back to the spot where you called
00:09 - to the encompassing function the return
00:11 - keyword is commonly found at the end of
00:14 - a function much like the main function
00:16 - when we invoke a function we can return
00:18 - some value back
00:19 - here's an example
00:21 - i'll create a function that will
00:22 - calculate the area of a square but we'll
00:25 - need to pass in a length the length of
00:27 - one side
00:28 - this will be a double length assign some
00:31 - value 5.0 is good
00:34 - then we'll need to declare and define a
00:35 - function
00:36 - at the top of my program i'll add a
00:39 - function declaration
00:40 - for the time being we'll write void but
00:42 - that will change soon
00:44 - void i'll name this function square we
00:47 - will square a length list any parameters
00:49 - we will accept a double value
00:52 - which we will name length
00:55 - then i'll need a function definition
00:57 - i'll add that after the main function
01:00 - void square
01:02 - i'm going to create a temporary variable
01:05 - named result it will be of the double
01:07 - data type we will take
01:10 - length times length to calculate the
01:13 - area
01:14 - then i will use that return keyword
01:16 - return what are we returning we're
01:19 - returning our result if we're returning
01:21 - a value we need to change this keyword
01:23 - void to match the data type of what
01:26 - we're returning we're returning a double
01:29 - so i will change void to double and then
01:31 - make sure you change that within the
01:33 - function declaration as well
01:35 - double square you could do this in one
01:38 - line of code you don't necessarily need
01:40 - to we could simply just return
01:43 - length times length that is also valid
01:45 - that's probably how i would write it we
01:47 - now have this function that will
01:49 - calculate the area of a square once we
01:51 - pass in a length i'm going to create a
01:54 - new variable called
01:55 - area
01:56 - it will be of the double data type and i
01:58 - will set the sequel to
02:00 - then let's invoke the square function
02:03 - pass in our length variable as an
02:05 - argument
02:07 - at this point of the program area should
02:09 - be assigned a value let's display it
02:12 - standard output
02:14 - area
02:16 - i'll add my area variable
02:19 - then add centimeters squared then new
02:22 - line
02:23 - the area of our square is 25 centimeters
02:26 - squared
02:27 - and i could change this to a different
02:28 - number like six
02:30 - the area is now 36 centimeters squared
02:33 - let's create another function this
02:35 - function will find the volume of a cube
02:37 - if we know the length of a side we'll
02:40 - return a value of the double data type
02:42 - but i will name this cube
02:44 - we will still accept the length of the
02:46 - double data type
02:49 - let's copy this paste it
02:52 - change square to cube
02:54 - return
02:56 - length times length times length
03:01 - double
03:02 - volume equals we'll invoke our cube
03:06 - function
03:07 - pass in our length
03:10 - then i will display whatever the volume
03:12 - is
03:16 - volume my volume variable centimeters
03:20 - cubed
03:23 - if the side of a square is 6 centimeters
03:26 - the area would be 36
03:28 - if it was a cube the volume would be 216
03:32 - centimeters
03:33 - if you need to return a value back to
03:35 - the spot in which you invoked a function
03:37 - be sure to list the data type of what
03:40 - you're returning
03:41 - let's try another example involving
03:43 - strings
03:44 - i'll create a function that will add a
03:46 - user's first name their last name and
03:49 - create a new string called full name
03:51 - let's declare our variables
03:53 - standard string
03:56 - first
03:57 - name
03:58 - equals add your first name
04:01 - standard string
04:04 - last name
04:05 - equals
04:06 - add your last name then i'll create a
04:09 - function to concatenate two strings
04:11 - together we're returning a string i will
04:14 - list the data type as standard string
04:17 - i'll name this function
04:19 - concat
04:21 - strings
04:24 - we will have two arguments two standard
04:26 - strings standard string
04:29 - i'll name the first string string one
04:33 - standard string
04:36 - string
04:37 - misspelled string string two so we have
04:40 - our function declaration now we just
04:42 - need to define it
04:44 - i'm going to return
04:46 - string one
04:48 - plus i'll add a space between the first
04:50 - name and the last name
04:52 - plus string two
04:55 - i'll create a third variable
04:57 - standard string
05:00 - full name
05:01 - equals
05:02 - i will invoke my concat strings function
05:06 - then i need to pass in two strings as
05:08 - arguments i'll pass in my first name
05:12 - and my last name
05:14 - then let's display the full name
05:16 - standard output
05:22 - hello the user's full name
05:28 - hello bro code or whatever your first
05:30 - and last name is so yeah everybody that
05:33 - is the return keyword wherever you
05:35 - invoke a function you can return a value
05:38 - back to that spot in which you invoked
05:40 - that function if you're returning a
05:42 - value just be sure that you change the
05:45 - return type of that function to match
05:47 - the data type of the value being
05:49 - returned
05:50 - in this example i returned a string a
05:52 - standard string so the return type of
05:54 - this function would be a standard string
05:57 - so that's the return keyword everybody
05:59 - your assignment is in the comment
06:01 - section to post a function that returns
06:04 - some value so yeah that is the return
06:06 - keyword in c plus