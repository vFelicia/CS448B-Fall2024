00:00 - hey how's it going everybody it's you
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how the mouse listener interface works
00:06 - in java so
00:07 - sit back relax and enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like
00:14 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - okay let's get started people i have two
00:21 - classes i have a class called main
00:24 - and it contains an instance of my other
00:26 - class that is called
00:27 - my frame my frame extends jframe and
00:30 - within the constructor for my frame i
00:32 - have
00:33 - four lines of code this dot set default
00:35 - close operation
00:36 - j frame x and on close i have a size of
00:39 - 500 by 500
00:41 - i am using no layout manager this dot
00:44 - set layout is set to null
00:46 - and lastly this dot set visible is set
00:48 - to true
00:49 - one of the few ways in which we can use
00:51 - a mouse listener interface
00:53 - is to have the definition of your class
00:56 - implements
00:57 - the mouse listener interface
01:01 - so according to the description for the
01:02 - mouse listener interface
01:04 - this listener interface is used for
01:06 - receiving interesting mouse events
01:09 - such as a press release click enter
01:12 - and exit on a component so since we're
01:15 - implementing
01:16 - an interface we need to add any
01:18 - unimplemented methods
01:20 - and for mouse listeners there are five
01:22 - methods
01:23 - mouse clicked mouse pressed mouse
01:25 - released mouse entered and mouse
01:27 - exited so let me give you a quick
01:29 - description for each of these
01:31 - i've added a short description for each
01:33 - of these methods
01:34 - let's begin with mouse pressed mouse
01:36 - pressed is invoked when a mouse button
01:38 - has been
01:39 - pressed on a component so if you hold
01:41 - down a mouse button
01:43 - it's going to execute mouse pressed
01:46 - mouse released
01:46 - is invoked when a mouse button has been
01:48 - released over a component
01:50 - mouse clicked is invoked when the mouse
01:52 - button has been clicked
01:54 - pressed and released on a component
01:56 - mouse entered
01:57 - is invoked when the mouse enters the
01:59 - area of a component
02:01 - and mouse exited is invoked when the
02:03 - mouse exits
02:04 - the area of a component so let's apply a
02:07 - mouse listener
02:08 - to a label so we will create a jlabel
02:12 - jlabel label we'll declare it outside of
02:14 - the constructor
02:15 - and instantiate it within the
02:17 - constructor so let's create a label
02:20 - label equals new j
02:23 - label and since we're using
02:27 - no layout manager let's set the balance
02:29 - for the label
02:30 - label dot set bounds we'll place this in
02:33 - the
02:33 - top left corner and we'll make the width
02:36 - 100 and the height 100
02:39 - and let's color this red so label
02:42 - dot set background
02:45 - color dot red
02:49 - and in order for the background to
02:51 - actually appear we have to
02:52 - label dot set opaque and set this to
02:55 - true
02:57 - and lastly we need to add this label to
02:59 - the frame
03:00 - this dot add label
03:05 - and now we should have a red square
03:09 - at the top left corner of our frame now
03:11 - we're going to apply a mouse listener
03:14 - to this component to our label so we
03:17 - type in the name of the component
03:19 - that we want to add a mouse listener to
03:21 - label dot
03:22 - add mouse listener and since we're
03:25 - implementing the mouse listener
03:27 - interface we can just
03:28 - pass in this now this label can respond
03:31 - to
03:32 - different mouse events so let's do a
03:34 - simple print line
03:36 - so let's begin with mouse clicked
03:39 - system.out.printline
03:41 - you clicked the mouse
03:47 - now i'm clicking within the frame but we
03:50 - did not apply the mouse listener to the
03:52 - frame we applied it to the label
03:53 - if i begin clicking within the label it
03:56 - performs
03:56 - it invokes our mouse clicked method
04:00 - now we have mouse pressed that is if we
04:03 - hold down
04:03 - one of the mouse buttons so i'm going to
04:06 - system that out to print line
04:08 - you pressed the mouse
04:13 - this time i'm going to hold down the
04:14 - left mouse button
04:16 - you pressed the mouse and then it
04:18 - doesn't do anything if you release
04:20 - so this also applies to the right mouse
04:22 - button and to the
04:23 - center mouse button if you have one the
04:25 - scroll wheel
04:27 - all right we're going to print line
04:30 - you released the mouse this is only
04:34 - invoked
04:34 - once you release one of the buttons so
04:37 - i'm going to
04:38 - hold down the left mouse button then i'm
04:40 - going to release in
04:41 - three two one go you release the mouse
04:45 - and then we also have entered and exited
04:50 - you entered let's say the component
04:57 - so i'm not going to click i'm just going
04:59 - to enter
05:00 - the component and then it says you
05:02 - entered the component
05:04 - and then we have exited
05:09 - you exited the component
05:14 - so i'm going to enter and then leave
05:17 - enter
05:17 - and then leave again so you can see that
05:20 - there are different mouse events
05:22 - let's make one more change to this label
05:24 - let's change the color of the label
05:26 - after we perform
05:27 - one of these methods so let's begin with
05:29 - mouse pressed
05:30 - let's say after you press on this
05:33 - component you press the mouse over the
05:35 - component
05:36 - will set the background to a different
05:38 - color
05:39 - and for this color let's say yellow
05:41 - color dot yellow
05:47 - so i'm going to press and then the
05:49 - background color is now yellow
05:52 - and let's say when we release we'll have
05:53 - this become a different color
05:55 - like green
06:00 - so i'm going to hold down it's currently
06:02 - yellow and then when i release it's
06:04 - going to be green
06:05 - and we'll have mouse entered let's
06:07 - change this to blue
06:12 - and then when we exit we'll change it
06:13 - back to red i suppose
06:15 - color dot red
06:18 - now i'm going to enter the area it's
06:20 - blue and then leave
06:22 - enter again it's blue again and now it's
06:24 - red again if i were to click
06:26 - and release it's green and then when i
06:27 - exit it goes back to red
06:29 - here's a what if situation what if we
06:32 - applied our mouse listener to the frame
06:35 - instead of just the label
06:37 - so let's replace label with this and see
06:40 - what happens
06:43 - now if we were to enter the area of the
06:45 - frame itself
06:46 - now this responds to our mouse events
06:49 - that happen
06:50 - and you can see that the color of the
06:51 - label is changing too and if i were to
06:53 - click within the frame
06:54 - it's going to change the color of our
06:56 - label as well
06:58 - so where you apply or where you add the
07:00 - mouse listener too
07:01 - actually makes a big difference if you
07:03 - were to apply the mouse listener to the
07:05 - entire frame
07:06 - then the entire frame is going to
07:07 - respond to these separate mouse events
07:10 - so that's just something to keep in mind
07:12 - so here's a small project that i thought
07:14 - we could work on
07:15 - we're going to apply a label or set the
07:18 - icon of the label
07:19 - to one of a few images depending on
07:21 - which mouse event occurs
07:23 - i have four images this one is called
07:25 - smile
07:26 - this one is nervous pain and dizzy
07:29 - the icon is going to change for the
07:31 - label depending on
07:32 - which mouse event occurs which method is
07:35 - called
07:36 - so if you need some images feel free to
07:38 - pause the video to download some
07:39 - so i have four images smile nervous pain
07:43 - and dizzy
07:44 - i'm going to declare these outside the
07:46 - constructor and within the constructor
07:48 - i'm going to instantiate these
07:49 - i made a few changes to our frame that
07:51 - you should be aware of
07:52 - for the layout i'm using a new flow
07:54 - layout followed by
07:56 - this dot pack and this dot set location
07:59 - relative
07:59 - to null this will have your frame appear
08:02 - in the middle of your computer screen
08:03 - it's not crucial but it's helpful and i
08:06 - sometimes forget to add this
08:08 - so we need to instantiate these image
08:10 - icons
08:12 - so we have smile equals new
08:16 - image icon and we can list the file path
08:19 - or the file name
08:20 - if it's within your project folder since
08:22 - these are within my project folder i can
08:24 - just
08:24 - list the file name so for smile this is
08:27 - smile.png
08:29 - and then i have nervous pain and dizzy
08:32 - so i'm going to follow the same steps
08:33 - for those as well
08:35 - so we have nervous
08:38 - equals new image icon nervous.png
08:41 - followed by pain
08:47 - and lastly dizzy
08:55 - now for our label i'm going to set the
08:57 - icon to smile right away so that will be
09:00 - basically the default label dot set
09:03 - icon and i'm going to set this to smile
09:08 - and we need to add this label to the
09:11 - frame
09:13 - this dot add what are we adding we're
09:17 - adding
09:17 - our label but before we compile and run
09:21 - this i need to instantiate my label
09:23 - because i forgot to do so
09:25 - label equals new j label
09:28 - and then we also need to add a mouse
09:30 - listener and let's add the mouse
09:32 - listener to the label
09:33 - label dot add mouse
09:36 - listener i suppose you can do the frame
09:39 - too that would work
09:40 - label dot add mouse listener and now we
09:43 - should have
09:44 - our smiley face which we do
09:48 - now we're going to change the icon of
09:49 - the label based on
09:51 - which mouse event occurs so we can
09:54 - actually copy this line of code where we
09:56 - set the icon
09:57 - and let's say when we enter the area of
10:00 - the label
10:00 - this is going to change or be set to our
10:04 - nervous image because we're in our faces
10:08 - personal space he's kind of nervous and
10:10 - then if we were to exit
10:12 - he'll go back to smiling so let's try it
10:16 - so he's fine right now but if we enter
10:18 - his personal space he's getting really
10:20 - nervous and cautious of us
10:21 - but if we were to leave and move the
10:23 - cursor outside of the label he's just
10:25 - fine
10:26 - now let's do pressed and released so if
10:29 - we were to click on him he's going to be
10:31 - in pain kind of like we hurt him and if
10:34 - we release the mouse
10:35 - we'll say he's dizzy
10:38 - because he doesn't know what just
10:40 - happened all right we're going to
10:42 - enter the area he's nervous now he's
10:45 - smiling now he's nervous again
10:46 - we're going to click and hold down the
10:48 - mouse and he's in pain
10:50 - because we're hurting him and then if we
10:52 - were to release he's just dizzy
10:54 - but if we were to leave this area he
10:55 - goes back to smiling
10:57 - all right everybody well that's the
10:59 - basics of the mouse listener interface
11:01 - in java if you want a copy of all this
11:03 - code i'll post all of this in the
11:05 - comments down below
11:06 - but yeah that's how the mouse listener
11:08 - interface works in java
11:11 - hey you yeah i'm talking to you if you
11:14 - learn something new
11:15 - then you can help me help you in three
11:18 - easy steps
11:19 - by smashing that like button drop a
11:21 - comment down below
11:22 - and subscribe if you'd like to become a
11:24 - fellow bro
11:30 - [Music]
11:45 - you