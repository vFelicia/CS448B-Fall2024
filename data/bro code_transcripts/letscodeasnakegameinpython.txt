00:00 - hey what's going on everybody it's your
00:02 - bro hope you're doing well
00:03 - and in this video we're going to create
00:04 - a game of snake using python so
00:07 - sit back relax and enjoy the show
00:11 - first thing we should do is import from
00:13 - tkinter as well as the random module
00:16 - and let's define all of the different
00:18 - classes and functions that we'll need
00:20 - so let's create a class for our snake
00:23 - object
00:24 - as well as our food object so for the
00:27 - time being i'm just going to write pass
00:28 - for my classes we'll fill these in later
00:31 - so we have class snake and class
00:33 - food and let's define all of the
00:37 - different functions that we'll need
00:38 - so let's say we have a function named
00:40 - next turn
00:45 - change direction
00:53 - check collisions
00:57 - and lastly game over
01:04 - okay for change direction i'm going to
01:07 - have one parameter
01:08 - a new direction
01:12 - now when i create a game i like to place
01:14 - a bunch of constants at the top of my
01:16 - game
01:17 - constants are variables that you do not
01:19 - want to change
01:20 - later they're kind of like the settings
01:22 - however in python there are no constants
01:25 - compared to
01:26 - other programming languages so we're
01:28 - just going to create a bunch of
01:29 - variables that will behave like them
01:31 - so constants are values we do not want
01:33 - to change and they're kind of like the
01:34 - game settings
01:35 - and i placed them at the top for
01:37 - convenience and the naming convention
01:39 - for a constant is that
01:40 - all the letters are uppercase so these
01:42 - will be settings like
01:44 - the game width the speed etc
01:47 - so let's say the width of our game will
01:49 - be 700
01:50 - but feel free to take the liberty to
01:52 - pick whatever size you want
01:54 - so we have game width game height
01:57 - i'll set this to 700 as well so it's a
01:59 - square
02:01 - let's say we have a speed the speed of
02:03 - the snake how often will our canvas
02:05 - update
02:06 - so let's say 50 but the lower the number
02:08 - the faster the game
02:10 - and a space size how large are the items
02:13 - in our game
02:13 - like the food and body parts of the
02:16 - snake
02:17 - so i'm going to pick 50 but you can
02:19 - change this
02:21 - and body parts how many body parts does
02:24 - our snake have when we begin a game
02:27 - let's say three how about a snake
02:30 - color you can pick a color name
02:33 - you can use rgb values or you can use a
02:36 - hexadecimal value
02:37 - so i'm going to pick green zero zero
02:40 - ff00 but you can pick any color you want
02:44 - how about food color
02:48 - equals red
02:51 - and that is ff000
02:55 - and what about a background color for
02:57 - the canvas background
02:59 - color i'll pick black so that is
03:03 - six cereals
03:06 - feel free to mess with some of these
03:07 - colors too so we have a green snake
03:10 - our food is going to be red and our
03:12 - background is going to be black
03:14 - so that is all of the constants for our
03:16 - game but you can feel free to adjust
03:18 - them if you like
03:19 - let's head down to the bottom and make
03:21 - our window so we have
03:22 - window equals tk and at the very end we
03:26 - should have
03:26 - window dot main loop
03:32 - let's set a title for this window window
03:36 - dot title
03:39 - snack game okay fine i'll spell it right
03:43 - snake game and if you do not want your
03:47 - window to be resizable
03:49 - you can use resizable
03:52 - and then you have to pass in false twice
03:55 - it's kind of strange but it's how it is
03:58 - okay we should have a small window and
04:01 - we cannot resize this even if we tried
04:05 - okay let's create a score label
04:08 - but we probably need a score first so
04:10 - let's say a score equals zero
04:12 - and an initial direction direction
04:16 - equals let's say down
04:20 - now let's create a score label so let's
04:22 - say label
04:24 - equals label we're adding our
04:27 - label to our window let's set the text
04:30 - equal to score
04:34 - colon then i'm going to use the format
04:37 - method
04:39 - and we will pass in our score whatever
04:42 - it is
04:44 - and i'll set a font pick whatever font
04:47 - you prefer
04:52 - and 40 is a decent size
04:56 - and then i'm going to pack this label
05:00 - let's test it okay we're getting
05:02 - somewhere
05:04 - we'll need to create a canvas canvas
05:08 - equals canvas we're adding it to our
05:11 - window
05:12 - i'm going to set the background color
05:14 - equal to our background
05:16 - constant
05:20 - i'm going to set our height equal to the
05:22 - game
05:23 - height and the width equal
05:27 - to the game width
05:30 - that we set and we need to pack this
05:33 - canvas
05:33 - dot pack
05:36 - and we should have a game board
05:41 - i'm going to try and center this window
05:42 - when it appears
05:44 - so we can do that using a few lines of
05:46 - code the first thing we'll do is update
05:48 - our window so that it renders
05:51 - and then we need to find some dimensions
05:53 - so let's say
05:54 - the window width
05:57 - equals window dot w
06:01 - info width
06:06 - and window height
06:10 - equals window
06:13 - dot w info height
06:18 - we'll need our screen width
06:23 - equals window
06:28 - dot screen width
06:31 - and screen height
06:35 - equals window dot
06:38 - w info screen height
06:42 - where is it there it is
06:48 - okay then we need to see how much we're
06:50 - going to adjust the position of our
06:52 - window
06:53 - so let's say x equals
06:58 - screen width divided by two
07:03 - minus window
07:07 - width divided by two
07:11 - and do the same thing for y
07:15 - except this will be screen height
07:20 - and window height
07:23 - and that will be why
07:27 - okay then we need to set the geometry
07:30 - window
07:31 - dot geometry
07:35 - we're going to use an f string
07:39 - so let's set the window
07:42 - width times
07:47 - window height
07:52 - and then add plus
07:56 - x plus y
07:59 - so when we pass in x and y
08:02 - these cannot be floats they have to be
08:04 - whole integers
08:05 - so let's add a cast around x and y
08:13 - okay now this should be fairly close to
08:15 - the center
08:17 - yeah that's not too bad now when we
08:18 - begin a new game we should create a
08:20 - snake object as well as a food object
08:23 - snake equals snake and called the snake
08:26 - constructor
08:27 - and food equals food
08:30 - okay let's fill in our food class first
08:33 - because i think that'll be easier than
08:35 - our snake class
08:36 - so let's head to the food class
08:39 - now let's create an init method so
08:42 - def init this will construct a food
08:46 - object for us
08:47 - and we need to place our food object
08:49 - randomly
08:50 - so for the x coordinate let's say x
08:53 - equals
08:54 - random dot rand int and we need a range
08:58 - the range is going to be zero comma now
09:01 - with our game board i view it like a
09:04 - chess board
09:04 - there's a given amount of spaces so 700
09:08 - divided by
09:10 - our space size is 14
09:13 - possible spots on the x-axis and then
09:16 - 14 possible spots on the y-axis so i
09:20 - need to pick
09:21 - one of these spots randomly
09:24 - so let's say game
09:28 - width divided by our space
09:31 - size so we'll get a random number
09:33 - between 0 and 14
09:35 - however this should be exclusive so
09:37 - let's say -1
09:40 - and for good measure i'm just going to
09:41 - add a set of parentheses around this
09:44 - okay and then we'll convert this to
09:46 - pixels
09:47 - so let's multiply all of this by our
09:49 - space
09:51 - size the size of each item in the game
09:54 - and we'll do the same thing for y
09:56 - but change game width to height
10:05 - okay we should be good
10:10 - all right now let's set the coordinates
10:12 - let's say self
10:13 - dot coordinates
10:16 - equals a list of x and y
10:19 - and that's it uh but make sure you spell
10:22 - coordinates right
10:25 - now we need to draw our food object on
10:27 - our canvas
10:29 - canvas dot create
10:33 - oval you can pick a square 2 if you like
10:36 - we need a starting corner that will be
10:38 - where x
10:40 - and y is and an ending coordinate
10:43 - so that will be x and y plus
10:46 - our space size the size of an object in
10:48 - our game
10:50 - so x plus space
10:54 - size y plus
10:57 - space size
11:00 - and you can set a fill color too
11:04 - fill will be our food color that we
11:07 - declared
11:09 - and i recommend adding a tag as well
11:12 - that'll make it easy to delete
11:14 - this object so tag will equal
11:18 - the string food now let's just test this
11:21 - so we should have a random circle or a
11:23 - square if you picked a square up here
11:25 - someplace at some spot on my game board
11:29 - cool seems like it's working let's work
11:32 - on the snake class next
11:34 - our snake class will need a constructor
11:41 - and we will set a body size
11:45 - equal to our body parts
11:51 - we'll need a list of coordinates
11:58 - we'll fill this in later and a list
12:02 - of square graphics
12:05 - so that will be a list okay so we need
12:09 - to create
12:10 - a list of coordinates we can use a for
12:13 - loop for that
12:14 - so let's say for i in range
12:18 - zero through body parts
12:25 - we will take self dot coordinates
12:29 - and append a new list
12:34 - and the coordinates for each body part
12:36 - at the start of the game will be
12:38 - zero zero so that our snake will appear
12:40 - in the top left corner
12:44 - now we'll need to create some squares
12:46 - okay so
12:47 - for x y in
12:51 - self dot coordinates and remember that
12:54 - we have a
12:55 - list of lists so that's why we're using
12:57 - x y
12:59 - in self coordinates we'll create
13:02 - a square equals
13:06 - canvas dot create
13:10 - rectangle
13:13 - so we need a starting corner that will
13:15 - be x and y then
13:20 - x plus our space size
13:24 - the size of each object in the game
13:28 - let me use the constant though space
13:32 - size y plus
13:35 - space size
13:41 - and let's set a fill color equal to
13:44 - our snake color
13:49 - all right and let's set a tag
13:53 - for convenience tag equals
13:56 - a string of snake okay so we have a
14:00 - list of squares and we can append each
14:02 - square into our list
14:06 - self dot squares
14:11 - dot append and pass in whatever square
14:14 - that you create
14:17 - so we have a snake that has a body size
14:21 - a list of coordinates and a list of
14:24 - square graphics
14:25 - now after testing this we should have
14:27 - the head of our snake in the top left
14:29 - corner
14:30 - and now we just need the snake to move
14:32 - in a given direction every turn
14:34 - so the initial direction is down but
14:36 - we'll be able to change that later
14:38 - so let's head to the next turn function
14:41 - and there's actually two things we'll
14:43 - need as parameters that i forgot to fill
14:45 - in
14:46 - snake as well as food and we will call
14:49 - this function when we begin our game
14:51 - so let's unpack the head of the snake so
14:54 - that's
14:55 - x comma y equals
14:58 - snake dot coordinates
15:01 - at index of zero so that's the head of
15:05 - the snake
15:06 - the coordinates will be stored in x and
15:08 - y
15:10 - so let's check to see if our direction
15:13 - our initial direction equals
15:17 - up and we'll need some else if
15:20 - statements
15:21 - we'll fill this in in just a moment
15:27 - else if our direction equals
15:30 - down
15:35 - then left
15:41 - and then right
15:46 - okay if our direction is up
15:49 - then let's take our y coordinate for the
15:52 - head of our snake minus
15:54 - equals our space size so that we move
15:58 - one space up
16:01 - and then down is plus equals
16:04 - space size left is
16:09 - x minus equals space size
16:12 - and lastly right is x
16:15 - plus equals space size
16:20 - okay then we need to call the next turn
16:22 - function again
16:23 - for the next turn so we can use window
16:27 - dot after we need the time
16:31 - so let's say our game speed
16:34 - we're going to call the next turn
16:36 - function and we need to pass in our
16:38 - arguments of snake and food
16:43 - snake food
16:46 - oh and make sure you're not actually
16:48 - calling the next turn function inside of
16:50 - the after method you just have to write
16:52 - the function name of next turn without
16:54 - the parentheses
16:55 - okay so let's update the coordinates for
16:58 - the head of the snake
16:59 - and write that before we move on to the
17:01 - next turn
17:03 - so snake dot coordinates
17:09 - and we will insert a new set of
17:11 - coordinates
17:12 - after updating one of them
17:16 - so zero will be the index the head of
17:19 - the snake
17:20 - and we will insert x and y coordinates
17:23 - at
17:23 - this new location now we're going to
17:27 - create a new graphic
17:28 - for the head of the snake square equals
17:31 - canvas
17:32 - dot create rectangle
17:36 - pass in x and y for the starting corner
17:40 - of our rectangle and the ending corner
17:42 - will be
17:43 - x plus our space size
17:47 - y plus our space
17:51 - size then i will add a fill color
17:54 - of snake
17:58 - color and then we need to update
18:01 - our snakes list of squares
18:04 - so that will be snake dot squares
18:10 - and insert at index
18:14 - zero a new square that we create
18:18 - okay let's test this one last thing that
18:21 - we'll need to get this program to run
18:23 - is that after you create your snake and
18:25 - food object we should call the
18:27 - next turn function and pass in our snake
18:30 - and food object so we should be able to
18:32 - test this
18:34 - so our snake is going to move but we
18:36 - need to delete the
18:37 - last body part in our snake within the
18:40 - next turn function but before we
18:43 - update to the next turn let's delete the
18:46 - last body part of our snake so delete
18:49 - snake dot coordinates
18:53 - at negative index of one that is the
18:56 - last
18:57 - set of coordinates we will update our
19:00 - canvas
19:01 - canvas dot delete
19:06 - snake dot squares
19:11 - an index of negative one
19:15 - and lastly delete snake
19:20 - the list of squares
19:24 - at index of negative one
19:27 - so it should appear that our snake is
19:29 - moving cool
19:31 - we need some controls for our snake so
19:34 - at the bottom of our program
19:36 - let's bind some keys let's do that here
19:41 - so window dot bind
19:45 - let's bind the left arrow key
19:50 - and we will use a lambda
19:54 - the argument is event and we will call
19:58 - the
19:58 - change direction function and pass in
20:02 - the word left
20:06 - okay then we have to do the same thing
20:08 - for the other directions
20:15 - so we have right
20:18 - pass in right
20:23 - up pass and up
20:28 - down pass in down
20:34 - let's head to the change direction
20:36 - function
20:38 - we need to access our direction global
20:42 - direction this is the old direction
20:47 - if our new direction that is passed in
20:51 - is equal to left
20:57 - and if our old direction just direction
21:00 - does not equal right because we do not
21:03 - want to go backwards and do a 180 degree
21:06 - turn
21:09 - then we will set our direction
21:12 - equal to our new
21:15 - direction and we just need to repeat
21:17 - this for the
21:18 - other directions for new direction
21:23 - and i'm going to change this to else if
21:27 - else if new direction is right
21:31 - and our direction is not already
21:34 - left
21:40 - then we have up
21:44 - our direction is not down
21:51 - and down if our
21:54 - direction is not up okay
21:58 - so we should be able to change the
21:59 - direction of our snake
22:03 - sweet okay we need to eat that pesky
22:06 - apple next
22:07 - so let's work on that there's nothing
22:09 - else that we need to change within the
22:11 - change direction function so i'm going
22:13 - to minimize
22:14 - this function and head to the
22:17 - next turn function
22:22 - we'll place an if statement here if
22:25 - x remember that we unpacked the
22:28 - coordinates for the head of the snake
22:31 - if x the x coordinate for the head of
22:34 - the snake
22:35 - is equal to our food objects
22:40 - coordinates at index
22:44 - of zero that's the x-coordinate for our
22:47 - food object
22:49 - and y is equal to
22:54 - food coordinates at index
22:57 - of one that means they're overlapping
23:02 - let's take our score
23:06 - and increment it by one
23:11 - and change our label label.config
23:19 - the text will equal
23:23 - score
23:27 - and then i'm going to use the format
23:28 - method
23:30 - and pass in my new score
23:36 - let's delete our food object
23:39 - and we gave our food object a tag so we
23:42 - can just use the name of the tag
23:44 - to delete it and create a new food
23:48 - object
23:51 - then i'm going to write this part of our
23:53 - program within an else statement
23:58 - we will only delete the last body part
24:01 - of our snake
24:02 - if we did not eat a food object
24:06 - okay let's test it again
24:10 - so i have three body parts now i have
24:13 - four
24:16 - five
24:18 - six seven eight nine
24:22 - ten you can see that the score is going
24:23 - up too
24:26 - okay let's work on collisions next
24:28 - because i should not be able to go off
24:30 - screen like this there's one thing that
24:32 - we're going to change
24:34 - so let's add an if statement that will
24:37 - check
24:38 - collisions this will return true or
24:41 - false if we detect a collision
24:43 - and pass in our snake object
24:48 - if there is a collision we'll call the
24:50 - game over function
24:55 - else we will update to the next turn
25:00 - okay let's fill in the check collisions
25:03 - function and we no longer need our
25:05 - function of next turn
25:07 - actually we don't need these classes
25:08 - either so i'll minimize them
25:11 - okay check collisions so it looks like
25:13 - we will need a parameter of snake
25:16 - so be sure to set that
25:19 - let's unpack the head of the snake x
25:22 - y equals snake dot coordinates
25:26 - at index of zero
25:32 - and let's check to see if we cross the
25:34 - left or right border of the game
25:37 - if x is less than zero
25:41 - or x is greater than or equal to
25:46 - our game width
25:50 - then return true i think for testing
25:54 - purposes i'm going to print something to
25:56 - the console window
25:59 - game over let's test it
26:04 - okay i'm going to go over to the right
26:05 - border game over
26:07 - and our game stopped let's go over the
26:10 - left
26:11 - game over cool so we know that it's
26:12 - working
26:14 - okay let's do the same thing for y
26:18 - we can use else if here
26:22 - if y is less than zero or
26:25 - y is greater than or equal to our
26:28 - game height let's
26:31 - print game over and return true
26:35 - and we should probably test it
26:38 - okay i'm going up game over and let's go
26:42 - down
26:43 - game over
26:47 - so what if our snake touches its tail or
26:50 - another body part
26:52 - so let's say for i actually i
26:55 - isn't too descriptive let's say for
26:57 - every body part
27:00 - in snake dot coordinates
27:08 - so we're going to set this to everything
27:12 - after the head of the snake
27:15 - we're going to check to see if any of
27:16 - the coordinates are matching
27:20 - if x is equal to
27:23 - body part at index
27:27 - 0 and
27:30 - y is equal to body
27:34 - part at index 1
27:38 - then return true
27:42 - and i'll print game over to test it
27:45 - print game over
27:50 - otherwise we can return false there are
27:53 - no collisions
27:55 - i think i'm going to change the size of
27:57 - the snake
27:59 - to 10. okay let's run into each other
28:03 - cool game over
28:06 - the last thing that we need to do is to
28:08 - fill in the game over function
28:10 - because it looks like everything else is
28:12 - fine so head to the game over function
28:16 - take your canvas and delete
28:19 - all
28:24 - and we'll create some game over text
28:26 - canvas
28:28 - create text
28:32 - i would like this in the center of my
28:34 - canvas
28:35 - i'll take canvas w info
28:39 - width divided by two comma
28:43 - canvas w info height
28:47 - divided by two i'm going to put some of
28:49 - this on the next line
28:51 - for readability i'll set a font
28:54 - pick whatever font that you want
29:01 - we'll need some text
29:05 - text equals game over
29:11 - pick a color red's decent
29:15 - i'll add a tag too for convenience game
29:19 - over and that should be it for the game
29:22 - over function
29:24 - i'm going to change the body parts of
29:26 - the snake back to what it was originally
29:28 - and we should probably test that game
29:30 - over screen
29:33 - all right it appeared okay so let's
29:35 - change
29:36 - some of these settings around you can
29:38 - create a larger game board
29:40 - let's say 1000 by 700
29:46 - that still works you can slow down the
29:49 - speed or speed it up
29:51 - so 100 will be about half as fast
29:54 - it's going pretty slow now but what if
29:57 - we set it to 20.
30:03 - you can change the space size
30:07 - so everything is a lot smaller now
30:10 - including the food object
30:15 - you can change the body parts what about
30:17 - 20 to begin with
30:21 - that's fairly excessive
30:25 - i'll change that back to three you can
30:28 - change the snake color
30:29 - let's say we would like a blue snake
30:32 - so that is for a hex color
30:36 - four zeros and then two f's
30:40 - you can change the food color so let's
30:42 - say we would like a yellow food object
30:45 - so that would be four f's and then two
30:47 - zeros
30:48 - kind of resembles the python logo that
30:51 - color scheme
30:55 - you can change the background color too
30:57 - so let's say all white
30:59 - that would be six f's
31:04 - do not like that go back delete delete
31:06 - delete
31:07 - all right well that should be everything
31:09 - let's run this game
31:10 - one last time
31:21 - [Music]
31:49 - [Music]
32:18 - well everybody that is a very basic game
32:21 - of snake for beginners i will post all
32:23 - of this code to the comment section down
32:25 - below but yeah
32:26 - that's a basic game of snake using
32:29 - python
32:31 - hey you yeah i'm talking to you if you
32:33 - learned something new
32:34 - then help me help you in three easy
32:36 - steps
32:37 - by smashing that like button drop a
32:39 - comment down below
32:40 - and subscribe if you'd like to become a
32:42 - fellow bro
32:56 - [Music]
33:04 - you