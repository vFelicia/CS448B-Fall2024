00:00 - all right what's going on everybody it's
00:02 - you bro hope you're doing well and in
00:03 - this video i'm going to explain how we
00:05 - can get started writing code in
00:07 - c so sit back relax and enjoy the show
00:12 - if you wouldn't mind please like comment
00:15 - and subscribe
00:16 - one like equals one prayer for the
00:18 - youtube algorithm
00:20 - i'm going to tell you why you need to
00:22 - learn c c
00:23 - is a middle level language that
00:25 - originated in the 1970s
00:28 - and it is one of the most widely used
00:30 - programming languages
00:31 - to date on a spectrum of high-level
00:34 - languages
00:34 - to low-level languages c is a middle
00:38 - level language low-level languages are
00:40 - efficient
00:41 - they work closely with machine
00:43 - architecture they consume less memory
00:45 - and they're fast as however they're
00:48 - difficult to understand
00:49 - and it takes more time to write code
00:51 - that's in a low level format
00:53 - high-level languages are easier to work
00:56 - with easier to understand
00:57 - they allow for more abstraction but
00:59 - they're slower they use more memory
01:01 - and they're abstract so it's difficult
01:03 - to work with low level hardware and
01:06 - systems
01:07 - a major advantage of middle level
01:09 - languages
01:10 - is that they can act as a bridge between
01:12 - high-level software and applications
01:15 - as well as low-level hardware and
01:17 - embedded systems
01:18 - most compilers kernels and operating
01:21 - systems are written
01:23 - in c nearly all programming languages
01:26 - are
01:26 - influenced by c in some way c is what
01:29 - provided many of the original
01:31 - programming concepts
01:33 - such as variables data types loops
01:36 - arrays functions etc in fact the python
01:40 - language is written with c the default
01:42 - implementation
01:43 - is known as c python if you're already
01:46 - familiar with the programming language
01:48 - learning c will give you an even deeper
01:50 - understanding of how those operate
01:52 - c is literally everywhere from databases
01:56 - to
01:56 - self-driving cars operating systems to
01:59 - embedded systems
02:00 - it's been around for so long and used
02:02 - for so many purposes
02:04 - here are some important notes before we
02:06 - get started c is not an object-oriented
02:09 - language
02:09 - it's procedural not abstract c plus plus
02:13 - is an object-oriented extension of c
02:16 - if you know c you already know some c
02:18 - plus plus
02:19 - however c is a difficult language for
02:22 - beginners
02:23 - don't get discouraged you can do it so
02:25 - what you'll need you'll need an ide
02:27 - an integrated development environment
02:30 - which is basically
02:31 - a fancy text editor to help us write c
02:34 - code as well as a gnu compiler
02:38 - collection
02:38 - which we abbreviate to simply gcc
02:42 - this compiles or otherwise converts c
02:45 - code to machine code you know
02:47 - all those ones and zeros that a machine
02:49 - can read let's begin by downloading
02:51 - an ide i recommend vs code it's flexible
02:54 - and you can use vs code for more than
02:56 - just c all right what you're gonna do
02:59 - is head to code.visualstudio.com
03:02 - and then look for this drop down menu to
03:04 - install for your operating system i'm
03:06 - running windows i'm going to install for
03:08 - windows
03:09 - and then i will simply just open when
03:11 - done
03:12 - okay accept the license agreement next
03:16 - you can create a desktop icon and add to
03:18 - path
03:19 - next then install
03:22 - and then give it a second or a couple
03:24 - minutes
03:26 - then you can launch this if you prefer i
03:28 - think i will okay we are now within
03:30 - visual studio head to the left hand menu
03:32 - for extensions we're going to install
03:34 - two extensions
03:35 - c c plus plus that contains intellisense
03:39 - and a couple other useful things
03:41 - so install that and then next we will
03:44 - install code runner code runner
03:47 - install after installing these
03:49 - extensions you may need to restart vs
03:51 - code
03:54 - okay then we are going to add a new
03:56 - folder go to the left hand menu
03:58 - add folder i'll create a new folder on
04:00 - my desktop so i'll right click
04:02 - go to new folder
04:06 - i'll name this c files
04:09 - then add i think you might have to click
04:12 - within the folder
04:14 - okay we now have a folder named c files
04:17 - then to create a new c file go to new
04:20 - file after clicking this folder
04:22 - i'll name this hello world and make sure
04:24 - that it ends with
04:25 - the c extension hello world dot c
04:28 - and we now have a c file that we can
04:30 - work with and on this tab at the top
04:33 - this says hello world dot c now the next
04:36 - thing that we'll need is that gcc
04:38 - compiler to convert c
04:40 - code to machine code now if you're
04:42 - running windows this is how to check to
04:44 - see if you have a gcc compiler already
04:46 - installed
04:47 - so you're going to open command prompt
04:51 - and enter this command g plus plus
04:54 - dash dash version i already have a gcc
04:57 - compiler already installed
04:59 - if you're getting an error then you'll
05:00 - probably have to download one here's an
05:02 - interruption from future bro
05:04 - i traveled from the future to the past
05:06 - to deliver you this message
05:08 - so if you need to install gcc on a mac
05:11 - operating system
05:12 - what you're going to do within a
05:14 - terminal window is enter the following
05:16 - command
05:17 - c lang dash dash version if c
05:20 - lang isn't installed enter the following
05:22 - command
05:23 - xcode dash select dash dash install
05:26 - and that's all there is to it if you
05:28 - need additional assistance you can
05:29 - always visit this webpage
05:32 - code.visualstudio.com docs
05:34 - slash cpp and if you're running on linux
05:38 - within a terminal window you'll enter
05:40 - this command instead
05:41 - gcc dash v if gcc
05:45 - isn't installed run this command sudo
05:48 - apt-get update and then next type in
05:51 - this
05:52 - long command and if you need any
05:53 - additional assistance or documentation
05:55 - you can always visit this webpage
05:57 - so google this min gw dash
06:00 - w64 dash install exe and the first link
06:04 - is for sourceforge so
06:05 - click on that then you can find this
06:08 - underneath
06:08 - home browse development compilers
06:12 - mingw64 for 32 and 64-bit windows
06:16 - and the download should start
06:17 - automatically so click next
06:21 - change the architecture to x8664
06:26 - next and then copy this path for the
06:28 - destination folder it's going to be
06:30 - relevant later
06:32 - then next next and finish now what we're
06:35 - going to do
06:36 - is add our path to our gcc underneath
06:39 - environment variables
06:40 - so open up control panel
06:45 - then go to system and security then
06:48 - system
06:50 - scroll down to advanced system settings
06:54 - underneath the advanced tab go to
06:56 - environment variables
06:58 - underneath path we are going to edit i
07:01 - already have this path configured so i'm
07:03 - going to delete this
07:04 - you probably won't have this setup and
07:07 - then new
07:08 - paste that file path to the gcc compiler
07:12 - then add slash min 64 slash bin
07:16 - then okay okay and then you can close
07:20 - out of everything
07:23 - and now we need to configure our build
07:25 - task so go to a terminal
07:28 - configure default build task if nothing
07:31 - appears within the search box you may
07:32 - need to restart vs code i think i do
07:35 - so i'm going to restart it and then
07:39 - let's try that again
07:40 - terminal configure default build task
07:42 - and there it is i will select that
07:45 - this creates a json file that tells vs
07:47 - code how to compile the program
07:49 - and with that out of the way we can
07:51 - begin coding now before we do start
07:53 - coding anything
07:54 - i'm going to increase the font size
07:56 - because as you can see this
07:58 - font size is really small so within vs
08:00 - code to change the font size go to
08:03 - file preferences settings and you can
08:06 - change that here
08:07 - let's try maybe 20. you can also change
08:10 - the font family too if you want and
08:11 - everything
08:12 - uh but let's close out of that and try
08:14 - that again okay that isn't too bad
08:16 - i'll stick with this font size for now i
08:18 - also recommend enabling autosave that's
08:21 - going to save you a lot of headaches
08:22 - later in the future
08:23 - so go to file auto save
08:26 - okay the first thing that we're going to
08:28 - include within our c program is the word
08:31 - hashtag include so this is a
08:33 - preprocessor command
08:35 - that tells the compiler to include the
08:38 - contents of a file and the file that we
08:40 - would like to include
08:42 - is within angle brackets std for
08:45 - standard
08:46 - io input output dot h
08:49 - this file contains some useful functions
08:51 - related to input and output so we'll
08:53 - need that
08:54 - now the entry point of our program is
08:57 - the main function
08:58 - type int main parentheses curly braces
09:02 - anything within our main function is
09:04 - read procedurally
09:05 - starting from the top and working its
09:07 - way down so anything within this set of
09:09 - curly braces is within
09:11 - the main function and at the end of our
09:12 - main function we're going to add
09:14 - the statement return 0 semicolon
09:17 - a semicolon is used to terminate
09:19 - statements kind of like a period at the
09:21 - end of a sentence
09:22 - at the end of our main function we have
09:24 - this return zero statement
09:26 - this returns the exit status of our
09:28 - program we return a zero
09:30 - if our program runs successfully with no
09:33 - errors
09:33 - if there is an error then we'll return a
09:36 - 1. so now we can add anything that we
09:38 - want within
09:39 - this main function but we'll need return
09:41 - 0 at the end to check for any errors
09:44 - so let's print something to our console
09:46 - as output so to display something we're
09:48 - going to type
09:49 - print f parentheses semicolon because we
09:52 - end our statements with a semicolon
09:54 - and within the parentheses add a set of
09:56 - double quotes because we would like to
09:59 - literally print something and you can
10:00 - type in whatever you want let's say
10:02 - i like pizza then to run this code you
10:06 - can either right click
10:07 - then go to run code alternatively there
10:10 - is a
10:10 - run code button in the top right corner
10:12 - of the s code
10:13 - so after running this code this displays
10:16 - my output
10:17 - i like pizza so what if i would like to
10:19 - add a second line
10:20 - well i would just follow these steps
10:22 - again so i need another printf statement
10:25 - print f parentheses semicolon
10:28 - any text i would like to display i'll
10:30 - place that within a set of double quotes
10:32 - this time let's add a second line i like
10:35 - pizza
10:36 - it's really good and then save
10:40 - all right and this is what this looks
10:42 - like
10:44 - i like pizza it's really good so this is
10:47 - all
10:48 - one long line what if i would like my
10:50 - second line of text on the next line
10:52 - well i can add an escape sequence for a
10:55 - new line character
10:56 - so at the end of my printf statement
10:58 - within the double quotes
11:00 - i'll add backslash n for a new line
11:03 - character
11:04 - and let's try that again so i'm going to
11:06 - clear my output
11:08 - make sure i save and then run this again
11:11 - i like pizza it's really good and then
11:14 - we have that extra space at the bottom
11:15 - because we added an additional new line
11:17 - character which is optional
11:19 - also take notice too that we have this
11:21 - message exited with
11:23 - code equal zero so if there are no
11:25 - errors and your program runs
11:27 - successfully
11:28 - this function will return a zero if
11:30 - there is an error well then
11:32 - this will return one so let's misspell
11:34 - something let's say instead of
11:36 - printf we just have print so save and
11:39 - then run this again
11:42 - okay it looks like we have an error
11:43 - exited with code equals one
11:46 - all right people well that's your first
11:48 - c program in the next video we'll cover
11:50 - escape sequences and comments
11:52 - i'll post this code to the comment
11:54 - section down below and pin it to the top
11:56 - if you would like a copy for yourself
11:58 - but yeah that is your first c program
12:02 - hey you yeah i'm talking to you if you
12:04 - learned something new
12:05 - then help me help you in three easy
12:08 - steps
12:08 - by smashing that like button drop a
12:10 - comment down below
12:12 - and subscribe if you'd like to become a
12:13 - fellow bro
12:26 - [Music]
12:36 - you