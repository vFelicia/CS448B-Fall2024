00:01 - hey everyone two-dimensional arrays it's
00:04 - an array where each element is an entire
00:07 - array it's useful if you need a matrix
00:10 - grid or table of data let's begin by
00:13 - creating a simple one-dimensional array
00:15 - of maybe some numbers so the data type
00:18 - is int
00:19 - the array name will be numbers and let's
00:21 - initialize this array with a few numbers
00:24 - one two and three something simple so if
00:27 - i would like to store a grid or matrix
00:29 - of data these elements will be the first
00:32 - row and i can add a second row
00:35 - so separate each row with a comma then
00:37 - another set of curly braces and then you
00:39 - can add more values so let's say four
00:42 - five and six and we'll stop here with
00:45 - these separate arrays we will surround
00:47 - with a set of curly braces
00:49 - and preceding the first set of straight
00:52 - brackets we will add a second set of
00:54 - straight brackets so this is now a two
00:56 - dimensional array however with a
00:58 - two-dimensional array we have to specify
01:01 - a maximum size of elements within each
01:04 - of these arrays let's say that each of
01:06 - these arrays will have a maximum size of
01:09 - three elements a piece so within the
01:12 - second set of straight brackets i will
01:14 - list three and you can although it's not
01:16 - necessary set a maximum amount of arrays
01:19 - within your two-dimensional array
01:22 - so let's say two because we have two
01:24 - separate arrays within our
01:26 - two-dimensional array now to better
01:28 - visualize how this is more or less a
01:30 - table of data i'm going to rearrange
01:32 - these
01:36 - so this may be a better visualization
01:38 - this first set of straight brackets is
01:40 - for the number of rows and the second
01:42 - set of straight brackets is for the
01:44 - number of columns so we have two rows
01:47 - and three columns within our
01:48 - two-dimensional array now you can
01:50 - declare a two-dimensional array but not
01:52 - assigned values quite yet but you'll
01:54 - need to set a maximum size so right now
01:57 - i'm just going to turn this into one
01:58 - giant comment
02:00 - and let's declare a two dimensional
02:02 - array with two rows and three columns
02:06 - and here's how to assign some values we
02:09 - will type the name of the array followed
02:11 - by two sets of straight brackets we need
02:13 - a row number and a column number so the
02:16 - first column within the first row is
02:18 - going to be zero zero because computers
02:21 - always start with zero
02:22 - and let's assign this a value of one the
02:25 - second column within the first row
02:28 - would be
02:29 - zero one and let's assign two there
02:33 - then zero two and that will be number
02:35 - three so the first column within the
02:38 - second row would be numbers one zero and
02:42 - this will be four then we will follow
02:44 - the same pattern so where five was that
02:46 - would be one one
02:50 - and six is one two
02:54 - so this is another way to initialize an
02:56 - array you can set a maximum size and
02:58 - then assign some values later or you
03:00 - could assign all of the values right
03:02 - from the beginning if you know what they
03:03 - are okay now how can we display the
03:05 - elements of a two-dimensional array
03:08 - we'll have to use nested loops
03:10 - so let's create a for loop and i will
03:12 - declare an index of i
03:14 - set the sql to zero and for the time
03:17 - being i'm going to say i
03:18 - is less than the number of rows that we
03:21 - have so right now we have two rows but
03:23 - we're going to change this value later
03:25 - to something that's more flexible that
03:27 - will calculate the amount of rows that
03:29 - we have and then i will increment i by
03:31 - one now let's create a nested loop
03:33 - that's in charge of keeping track of the
03:35 - columns
03:37 - and let's use an index of j because we
03:40 - do not want to reuse i
03:42 - so set j equal to zero we will continue
03:45 - this as long as j
03:47 - is less than however many columns we
03:50 - have three a maximum of three and then
03:53 - increment j by one so during each
03:55 - iteration of the inner for loop let's
03:57 - display one of these elements so we will
04:00 - use the format specifier for an integer
04:02 - d is fine
04:04 - followed by our array numbers and then
04:07 - we have two indices so the row is going
04:10 - to be i
04:11 - and this will begin at zero and the
04:14 - columns is j this will also begin at
04:16 - zero so after each iteration of the
04:20 - inner for loop we will increase j when
04:22 - we finish the inner for loop we will
04:24 - increment i by one so by using nested
04:27 - for loops we can iterate over all of the
04:29 - elements of this array so i'm just going
04:31 - to add a space after our number and we
04:34 - should probably add a new line after
04:36 - each row so i'll add a new line let's
04:38 - test this
04:40 - here we go we have our table of two rows
04:44 - and three columns now there's one
04:46 - situation that we may run into what if
04:48 - we change the amount of rows and columns
04:50 - that we have so let's say that we add
04:53 - one more row our 2d array of numbers
04:55 - will have three rows and three columns
04:59 - row two column zero equals seven
05:02 - row two column one will equal eight
05:05 - and row two column two will equal nine
05:09 - so if i were to run this again well this
05:11 - last row is not going to be displayed so
05:13 - it would be better if we can calculate
05:15 - how many rows and columns are within our
05:17 - two-dimensional array and here's one way
05:20 - to do so i'm going to declare two new
05:22 - variables int rows
05:24 - and into columns and i will set the
05:26 - condition of the outer for loop to be as
05:29 - long as i is less than rows and the
05:32 - inner for loop will be j is less than
05:35 - columns
05:36 - now we just need to calculate what these
05:38 - numbers are going to be to calculate
05:40 - rows we can use the size of operator and
05:43 - then pass in the entire size of our
05:45 - two-dimensional array and we're going to
05:47 - divide this by the size of one of our
05:50 - rows they're all going to have the same
05:52 - size so we can pass in our rain numbers
05:55 - and then specify one of the rows let's
05:57 - say the first row they're all going to
05:58 - be the same okay so that's how we can
06:00 - calculate the number of rows that we
06:02 - have now to find the number of columns
06:04 - we can copy what we have here and then
06:06 - just make a few changes
06:08 - so we will say
06:09 - the size of the first row row 0
06:12 - divided by the size of one of the
06:14 - elements found within the first row
06:18 - so we can say zero zero and let's print
06:21 - the amount of rows and columns that we
06:22 - have just to test it
06:27 - so we have rows
06:30 - and columns
06:33 - i'm just going to add a new line
06:34 - character real quick
06:39 - okay so we have three rows three columns
06:41 - and here's our table three rows with
06:44 - three columns a piece so yeah that's
06:46 - basically a two-dimensional array it's
06:48 - an array of arrays where each element is
06:51 - an entire array it's useful if you need
06:53 - a matrix grid or table of data and in
06:56 - this example we made a table of integers
06:59 - just the numbers one through nine so
07:01 - there's a couple different ways in which
07:02 - you can initialize a two-dimensional
07:04 - array but you'll need two sets of
07:06 - straight brackets it's optional to set a
07:09 - maximum number of rows but it is
07:11 - necessary to set a maximum number of
07:14 - elements within each row and then to
07:16 - access one of the elements you use two
07:18 - indices one for the row one for the
07:20 - column so yeah those are two dimensional
07:22 - arrays if you would like a copy of this
07:24 - code i'll post this to the comment
07:26 - section down below and well yeah those
07:28 - are two-dimensional arrays in c