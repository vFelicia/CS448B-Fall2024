00:00 - hey how's it going everybody it's bro
00:01 - here hope you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys how we can create some very simple
00:06 - 2d animations in java so sit back relax
00:09 - and enjoy the show
00:13 - if you find this video helpful please
00:14 - remember to like
00:16 - comment and subscribe your support will
00:18 - help keep this channel running
00:20 - let's get started people so with this
00:22 - video we're only going to be moving an
00:24 - image around on the x-axis
00:26 - and the y-axis we're just going to be
00:28 - covering some very simple animations by
00:30 - use of a timer so
00:32 - it's not going to be anything that
00:33 - sophisticated now before we begin here's
00:36 - my setup that i have
00:37 - i have three classes a class called main
00:40 - a class called my frame
00:41 - that extends jframe and a class called
00:44 - my panel which extends
00:45 - jpanel within the main class i have an
00:49 - instance of
00:50 - my frame within my frame i have an
00:53 - instance of my panel
00:54 - called panel and within the constructor
00:56 - for my frame
00:57 - i instantiated this panel for this my
01:00 - frame i have
01:01 - this dot set default close operation
01:03 - jframe exit on close
01:04 - we're going to add this panel to the
01:07 - frame and we're going to be painting
01:09 - on the panel itself followed by this dot
01:12 - pack
01:12 - this dot set location relative to null
01:15 - this will allow the frame to appear in
01:17 - the middle of your computer screen
01:18 - and lastly this dot set visible is set
01:20 - to true we're going to be
01:22 - finishing everything else within this my
01:24 - panel class
01:25 - so we have a constructor from my panel
01:28 - we're going to
01:29 - declare a few things outside of this
01:31 - constructor
01:32 - so let's begin with the panel width and
01:35 - the panel height
01:36 - because we'll want to know what the
01:38 - limitations are of the
01:40 - image that we're moving we'll want to
01:41 - know the balance that we have
01:43 - so i'm actually going to make this a
01:45 - final
01:46 - integer for the width and the height so
01:48 - let's say final
01:49 - and panel underscore
01:52 - width and let's set this to 500
01:56 - and we'll do the same thing for height
01:59 - panel height and we'll make this 500 as
02:03 - well so this will be a square
02:05 - so we're going to need an image image
02:08 - we'll call this image
02:11 - actually better yet let's call this
02:12 - enemy because i'm going to be moving
02:16 - this enemy icon around within the panel
02:18 - so let's call this
02:19 - enemy instead just so it's
02:23 - easier to differentiate i'm also going
02:26 - to use
02:26 - the space background as my background
02:32 - so i'm going to make an image called
02:33 - image background
02:36 - image and we'll do this last oh that's
02:39 - all one word though
02:41 - we're going to need a timer so timer
02:45 - timer int
02:48 - x velocity so we can adjust how far
02:52 - or how many pixels this image is moving
02:54 - on the x-axis
02:56 - let's set this to one to begin with and
02:58 - we'll do the same thing for
02:59 - y velocity
03:04 - and we'll have a starting x position and
03:07 - we'll set this to zero
03:09 - and the same thing with y
03:12 - int y and that should be it for now
03:15 - now within the constructor we're going
03:17 - to finish instantiating a few things
03:19 - let's begin by setting the size of this
03:21 - panel
03:22 - since we're using the pack function
03:24 - we'll want to set preferred
03:26 - size so this dot
03:29 - set preferred size and we pass
03:32 - in a new dimension
03:38 - and we can use a panel width and panel
03:40 - height for that
03:42 - so let's pass in panel width and panel
03:45 - height
03:50 - and this should appear yep here's our
03:53 - panel
03:54 - that's added to our frame and we're
03:56 - going to be drawing
03:57 - on this panel so the next thing that we
04:00 - should do let's set the background color
04:02 - just because we can
04:03 - this dot set background color
04:06 - eventually if you have an image we'll
04:09 - replace the background color with the
04:11 - image that you have
04:12 - if you have one let's set this to color
04:15 - dot black
04:20 - and let's finish instantiating this
04:22 - image and it's called
04:23 - enemy enemy equals
04:27 - image icon
04:31 - and then we list the file path or the
04:33 - file name and this is
04:35 - enemy dot png and then to create an
04:38 - image we're going to method chain this
04:40 - by adding
04:41 - dot get image this will make an
04:45 - image out of our image icon
04:49 - now we need to create a timer we haven't
04:51 - done that for a while
04:52 - so we'll finish instantiating this timer
04:56 - timer equals new timer
05:01 - and there are two arguments to pass in
05:02 - for a timer
05:04 - so we need an integer for the
05:08 - delay of how often this timer fires and
05:11 - does something
05:12 - as well as an action listener so let's
05:15 - say we want this to perform an
05:17 - action every one second so this is in
05:19 - milliseconds the delay
05:21 - so we'll perform an action every 1000
05:24 - milliseconds
05:24 - one second we also need an action
05:27 - listener
05:28 - so we'll have this jpanel implements
05:32 - action listener there are better ways of
05:36 - doing this but since we're beginners
05:37 - right now
05:38 - that will be in future videos so we'll
05:41 - need
05:42 - to add any unimplemented methods and we
05:45 - have an action performed method
05:47 - we'll return to our action performed
05:49 - method later we need to define
05:51 - our paint method and the paint method is
05:54 - called behind the scenes when we
05:55 - instantiate our panel
05:57 - because our jpanel is a subclass of the
06:00 - component class
06:01 - so let's say public void paint
06:04 - and this has one parameter of graphics
06:07 - graphics g and the first thing we're
06:10 - going to do within this paint method
06:12 - is cast our graphics g object as a 2d
06:16 - graphic
06:17 - because there's more options available
06:18 - to us with graphics 2d objects
06:21 - so graphics 2d we'll call this g2d
06:26 - equals g and then we need to cast this
06:30 - graphics to d
06:34 - and if we want to draw any graphics we
06:37 - type in
06:38 - g2d dot and then drop
06:41 - fill whatever you want we want draw
06:44 - image because we want to draw our enemy
06:47 - image
06:48 - and there are a few different images
06:50 - that take various amounts of
06:52 - arguments so let's stick with this one
06:55 - for now
06:56 - this takes an image some coordinates and
06:59 - then
06:59 - an observer so with the observer we have
07:02 - not covered those yet so we're going to
07:03 - set this to null
07:05 - and we have to set an x and y
07:08 - position luckily we already declared
07:11 - what we want these to be
07:12 - x is zero and y is zero so we can keep
07:14 - these the same
07:16 - and this image is called enemy so this
07:18 - will draw our enemy
07:20 - on our panel
07:23 - and right now it's in the top left
07:24 - corner so notice that
07:27 - with this background we set this to
07:28 - black now to
07:30 - actually paint the background we need to
07:32 - use the
07:34 - paint method of the parent class also
07:37 - known as the
07:38 - super class so before we actually cast
07:41 - this graphic
07:42 - we're going to call super dot paint
07:45 - and we pass in our graphics g
07:48 - so this will paint the background for us
07:51 - and you can see that it's black so this
07:55 - will paint background
07:59 - well we have our image drawn but how do
08:01 - we get this image to move
08:03 - let's say we want to move this image on
08:05 - the x-axis
08:06 - across the screen well we can use our
08:08 - timer to help us do that
08:10 - so after every 1000 milliseconds one
08:13 - second
08:14 - it's going to perform our action
08:16 - performed method
08:17 - now with our timer when we instantiate
08:20 - it we need a delay
08:21 - which we have and an action listener
08:23 - since we're implementing the action
08:25 - listener interface
08:26 - we can pass in this and then we need to
08:30 - start this timer by saying timer dot
08:33 - start
08:34 - so this will start our timer right when
08:36 - we instantiate this panel
08:38 - so after every one second we can perform
08:41 - some sort of action
08:42 - anything within the action performed
08:44 - method will occur
08:45 - so let's move the coordinates of our
08:48 - enemy that we have
08:50 - so we have x equals zero and y equals
08:52 - zero let's say we want
08:54 - to move our image on the x axis so we'll
08:57 - say within the action performed method
08:59 - x equals x plus our
09:02 - x velocity for our enemy
09:08 - now when we run this pay attention it
09:10 - doesn't appear to move
09:12 - but it actually is behind the scenes i'm
09:15 - going to resize this window slightly
09:17 - and you'll see that our image just
09:19 - jumped that's because we are not
09:21 - currently repainting
09:23 - our window that we have our panel so we
09:25 - need to actually
09:26 - call this paint method again every time
09:29 - we update
09:30 - the position of our enemy or any
09:32 - components that it contains
09:33 - and let's look at this paint method
09:36 - according to the description it says
09:37 - that applications
09:38 - should not invoke paint directly but
09:41 - should instead use the
09:43 - repaint method to schedule the component
09:45 - for redrawing
09:46 - what we're trying to do is that after we
09:49 - update the position
09:50 - of our enemy we're attempting to call
09:52 - paint
09:53 - again to redraw the enemy in its new
09:56 - position
09:57 - however we instead need to use repaint
10:01 - according to the description repaint in
10:04 - a
10:04 - roundabout indirect way will call paint
10:07 - for us to
10:08 - redraw all of the graphics that we have
10:10 - so now
10:11 - this will actually repaint our enemy
10:15 - without us having to resize the window
10:18 - because when you resize the window
10:20 - it will repaint everything but now it
10:22 - just does it for us
10:23 - okay now this enemy is moving very
10:26 - slowly
10:27 - so let's have our action performed
10:29 - method
10:31 - be called every 100 milliseconds instead
10:33 - of every 1000 milliseconds
10:36 - so the position of our enemy is updating
10:38 - every 100 milliseconds
10:40 - but why stop there let's set this to
10:42 - maybe 10.
10:43 - that should be a decent speed so after
10:46 - every
10:47 - 10 milliseconds this enemy is moving on
10:50 - the
10:51 - x-axis by one pixel however it's not
10:54 - going to stop it'll just keep on going
10:55 - into the void
10:57 - so we'll want to set some bounds let's
11:00 - say that when this enemy touches the
11:01 - right border we want it to go
11:03 - left instead of continuing right so
11:06 - we'll write an if statement within the
11:08 - action performed method to check to see
11:10 - if x is greater than or equal to our
11:13 - panel width
11:14 - so we'll write that first if
11:17 - x is greater than or equal to
11:20 - our panel width and we declared that up
11:22 - here and it's 500
11:27 - if it is we want to change direction and
11:29 - one way in which we can do that
11:31 - is to flip the x velocity so currently
11:33 - it's a positive number
11:35 - but if we were to set this to a negative
11:37 - number it's going to go in the opposite
11:39 - direction
11:40 - so we can say x velocity equals x
11:42 - velocity
11:43 - times negative one so when we want this
11:46 - to change direction it's going to
11:48 - multiply whatever
11:49 - x velocity is times negative one so one
11:52 - times negative one
11:53 - equals negative one and then when we run
11:56 - this
11:56 - we'll have to give it a second to reach
11:58 - the border it's going to eventually go
12:01 - to the left
12:02 - however it measures where this enemy is
12:04 - located in the top
12:05 - left corner so we'll want to take that
12:08 - into account
12:10 - we're going to add one thing after panel
12:13 - with panel with
12:14 - minus enemy dot
12:18 - get width
12:21 - and then if we have an image observer we
12:23 - pass that in but we don't have one so
12:25 - we're going to set this to null
12:26 - so we're checking to see if x is greater
12:29 - than or equal to
12:30 - panel width minus the width of the enemy
12:34 - image that we have and
12:37 - now once this enemy touches the right
12:40 - border it's going to flip direction
12:42 - which it just did however now it's going
12:44 - to continue into the void on the left
12:46 - hand side
12:48 - so we'll also need to check to see if
12:51 - our enemy is going to touch the
12:52 - left border and we can do that using an
12:55 - or operator so if x
12:58 - is greater than or equal to panel
13:01 - underscore with
13:02 - minus enemy.get width or
13:05 - x is less than zero
13:09 - then we're going to flip our velocity
13:13 - and now it should just go back and forth
13:14 - forever and let's test it
13:20 - man i hate awkward silences all right so
13:24 - yeah it's just going back and forth
13:25 - forever
13:26 - so when it reaches one of the borders
13:27 - it's going to flip the velocity to
13:30 - either a positive number or a negative
13:32 - number
13:33 - now let's do the same thing with the
13:34 - y-axis so this will go up and down
13:37 - it's kind of the same process that we
13:39 - have before i'm just going to turn all
13:41 - of this into a comment
13:44 - and then copy and paste it
13:48 - so make sure to write this before the
13:50 - repaint
13:52 - method that we have replace all
13:54 - instances of
13:55 - x with y
13:59 - make sure to do the same for the y
14:02 - velocity as well
14:03 - x velocity and y velocity and y equals
14:06 - y plus y velocity replace with
14:10 - with height
14:15 - do the same thing for get with as well
14:23 - okay that should be good
14:26 - and this will just go up and down
14:28 - forever but
14:30 - let's check just to be sure
14:35 - all right we're good and then if you
14:37 - were to mix these two
14:42 - this will now go diagonal right across
14:44 - the screen
14:45 - and when it hits the corner it's going
14:46 - to bounce back and you always have the
14:49 - option of messing with the x velocity
14:51 - and the y velocity
14:52 - let's set x velocity to 2
14:56 - and this will now travel in a different
14:58 - direction and bounce off the borders
15:01 - let's finish this video by adding a
15:03 - background image because right now it's
15:05 - just a plain black
15:07 - background so i'm going to use this
15:09 - image that i downloaded
15:11 - of space but feel free to use any image
15:13 - that you want to use
15:14 - so this is within my project folder and
15:17 - it is called space.png
15:19 - i have already declared an image that
15:21 - i'm calling background image
15:22 - and i'm going to finish instantiating
15:24 - this within the constructor
15:27 - background image equals new
15:30 - image icon and within the constructor
15:34 - for the image icon we list
15:36 - the file path or the file name since
15:38 - this file is within my project folder
15:41 - i can list just the file name space
15:44 - dot png i want to create an image out of
15:48 - this
15:48 - i'm going to method chain by adding dot
15:51 - get image to the end of this
15:53 - and now i can use my background image as
15:55 - an actual image and not just an image
15:57 - icon
15:58 - i want to draw this image before i draw
16:00 - the enemy
16:02 - and i'm going to copy this line and make
16:05 - a few changes
16:07 - i'm going to draw the background image
16:10 - and i'm going to place the coordinates
16:11 - for this image in the top left corner
16:13 - so that is where x is 0 and y is 0
16:16 - and we do not have an image observer so
16:19 - we're going to leave this as null
16:21 - and now for the moment of truth the
16:23 - background image that i have
16:24 - is now applied to the background of my
16:27 - graphic
16:28 - so that's the basics of creating some
16:30 - very simple animations in java
16:33 - if you want a copy of all this code i'll
16:35 - post all of this in the comments down
16:36 - below
16:37 - but yeah that's the basics of simple
16:39 - animations in java
16:42 - hey you yeah i'm talking to you if you
16:45 - learn something new
16:46 - then you can help me help you in three
16:49 - easy steps
16:50 - by smashing that like button drop a
16:52 - comment down below
16:53 - and subscribe if you'd like to become a
16:55 - fellow bro
17:06 - [Music]
17:16 - you