00:00 - how's it going everybody it's bro here
00:02 - hope you're doing well and in this video
00:03 - i'm going to teach you guys the basics
00:05 - of
00:05 - serialization in java so sit back relax
00:08 - and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - all right everybody let's talk about
00:21 - serialization so what this is
00:23 - is that it's the process of converting
00:25 - an object
00:26 - into a byte stream so the benefit of
00:29 - this
00:30 - is that an object persists it saves
00:33 - the state of the object after the
00:35 - program exits
00:36 - and the reverse process of serialization
00:39 - is
00:39 - deserialization that's kind of a tongue
00:41 - twister to say
00:42 - so deserialization is the reverse
00:45 - process
00:46 - of converting a byte stream back into an
00:48 - object
00:49 - so think of serialization as you're
00:51 - saving a
00:52 - file with the object's information and
00:55 - deserialization
00:57 - is as if you're loading a saved file so
01:00 - serialization is taking an object and
01:03 - saving it to a byte stream
01:05 - deserialization is taking a byte stream
01:07 - and loading it back into an
01:08 - object so this byte stream can be saved
01:11 - as a file or
01:12 - sent over a network and it can even be
01:14 - sent to a different machine
01:16 - so this byte stream can be saved as a
01:19 - file and it usually ends with a
01:21 - dot ser file extension which is platform
01:24 - independent
01:25 - so this is some very basic info on
01:27 - serialization let's do some practice on
01:30 - this
01:30 - so let's create a new project file new
01:33 - java project
01:34 - i will call this serializer
01:38 - and finish don't create
01:41 - go to your project folder create a new
01:44 - class file
01:45 - new class name this whatever you want
01:47 - i'll name this main
01:48 - check public static void main and then
01:51 - let's create another class
01:53 - maybe a class based on users
01:57 - so file new class and i will call this
02:00 - user so what i would like to do
02:03 - is to save the state of a user that we
02:07 - create
02:08 - so what should all users have let's just
02:11 - have maybe two variables
02:13 - a name and a password
02:17 - let's create a method too uh but this
02:20 - has to be uppercase there
02:22 - all right so let's create a method as
02:24 - well public void we'll call this
02:27 - say hello all this will do
02:31 - is system.out.printline hello
02:36 - name then let's go back to our main
02:40 - class and create an instance of this
02:41 - class so
02:42 - user we'll call this user equals new
02:45 - user
02:49 - and then let's assign these variables so
02:51 - we need a name and a password
02:53 - so user dot name and these are public
02:56 - so we can actually access these from our
02:59 - main class so user name
03:01 - equals bro and then
03:04 - user dot password
03:07 - equals i
03:11 - heart pizza
03:14 - and then at the end let's just call the
03:17 - say hello
03:18 - method so user dot say
03:22 - hello
03:26 - all right simple enough we have an
03:28 - instance of the user class called user
03:30 - so now i would like to save the state of
03:33 - this object
03:34 - so i've listed the steps to serialize an
03:36 - object so step one
03:37 - your object class should implement the
03:40 - serializable interface
03:42 - so let's go to our user class and we're
03:44 - going to
03:46 - implement serializable
03:50 - step two add this import
03:54 - java.io.serializable
03:55 - and we can simply just hover over this
03:57 - and add this import
03:59 - so i'm also going to add this to our
04:01 - main class because we'll probably need
04:03 - it here as well eventually
04:05 - so step three is that we need to add
04:07 - this line of code
04:08 - so file output stream we need a name for
04:10 - this file outworks
04:12 - equals new file output stream and then
04:15 - the file name or the file path
04:16 - so let's add that i'm actually going to
04:19 - get rid of this say hello method because
04:21 - we won't really need it
04:22 - so step three is right here we're going
04:25 - to add
04:26 - file out put stream
04:30 - file out equals new
04:34 - file output stream
04:38 - and then let's add a name uh or a file
04:41 - path here
04:42 - so i will name this file maybe user
04:46 - info dot
04:49 - s-e-r
04:51 - [Music]
04:52 - so we'll also need to add this import
04:55 - actually i'll just import everything
04:57 - related to java.io so then we have our
05:00 - bases covered
05:03 - all right so we will eventually need to
05:05 - surround this with a
05:06 - try and catch block or add a throws
05:08 - declaration but we'll do that later
05:10 - so step four add object output stream
05:13 - we'll name this out equals new object
05:16 - output stream and the name of our
05:18 - file output stream so object
05:23 - out put stream
05:26 - we'll name this out equals new
05:29 - object output stream
05:33 - then within parentheses we're going to
05:34 - place our
05:36 - file output stream instance within the
05:38 - parentheses
05:41 - all right so then we're going to write
05:44 - out
05:45 - dot write object and then the object
05:47 - name
05:49 - so out dot write
05:52 - object and our object name is user
05:59 - and then lastly we're going to close
06:01 - everything that we've opened
06:02 - so we're going to take out
06:06 - dot close as well as
06:09 - file out dot close
06:15 - so most of this is underlined red so we
06:17 - either need to
06:18 - surround everything with a try and catch
06:20 - block or add throws declaration
06:22 - but just for simplicity i'm going to add
06:24 - throws declaration just to keep things
06:26 - kind of simple
06:27 - all right and then let's display a
06:29 - message at the end so we'll say
06:31 - something such as object info
06:35 - saved and then let's run this
06:42 - so object info saved so if you go to
06:44 - your project folder
06:46 - it really depends on where you place the
06:48 - file path
06:49 - so this is going to end up within my
06:51 - project folder you could
06:53 - place the file path for your desktop or
06:55 - something too if you want
06:56 - so i'm going to refresh my project
06:58 - folder and here
06:59 - is that file user userinfo.ser
07:03 - let's open this and take a look at it so
07:05 - this is all
07:06 - java byte code so this file saves the
07:09 - state of this object you can see here
07:11 - that it says
07:12 - i love pizza and a few other things that
07:15 - might be recognizable but it's all in
07:16 - byte code though
07:18 - so we can actually send this byte stream
07:21 - over a network or save it as a file and
07:23 - send it to a different machine
07:25 - so what we're going to do in this
07:27 - project is that we're going to
07:29 - create another project another project
07:32 - folder called
07:33 - deserialize and we're going to open this
07:36 - file
07:37 - and deserialize it and turn it back into
07:39 - an object
07:40 - so let's do that so i'm going to create
07:42 - a new project folder so
07:44 - new java project and we'll call this d
07:48 - serializer finish
07:52 - don't create then let's go to this
07:55 - project folder
07:57 - and let's create another main class so
08:00 - name main or whatever else you want to
08:02 - call this check public static void main
08:04 - click finish and then we're going to
08:07 - create an identical copy
08:09 - of this user class within our serializer
08:12 - folder so i'm going to copy this and
08:15 - then let's go back to our d
08:17 - serializer project folder and i'm going
08:19 - to
08:20 - file new class and i will call this user
08:24 - as well so it matches
08:26 - and then i'm going to copy everything
08:28 - within the user class from the
08:30 - serializer
08:32 - project folder so these should match
08:34 - then which they do
08:36 - okay so i'm going to close out of
08:38 - everything related to the serializer
08:40 - project folder and then we are now
08:44 - within
08:44 - our d serializer project so here's the
08:47 - steps to
08:48 - deserialize a byte stream back into an
08:50 - object
08:51 - it's really the reverse process of
08:53 - serialization
08:54 - but there's one extra step though so
08:57 - step one is that we're going to
08:59 - declare our object but not instantiate
09:01 - it
09:02 - so we're going to say user user
09:05 - equals and instead of saying something
09:07 - such as new user
09:09 - this creates a new user so we're instead
09:12 - just going to say
09:12 - null for now alright so step two
09:16 - your class should implement the
09:18 - serializable interface
09:20 - and we just copied this over from our
09:23 - serializer project folder so
09:25 - make sure you have implements
09:27 - serializable
09:29 - then make sure you have this import but
09:32 - i'm also going to
09:33 - import this here as well for our main
09:35 - class
09:38 - and i'll just import everything related
09:40 - to java.io
09:42 - all right step four we need to add this
09:44 - line of code so when we serialized
09:47 - our object we had file output stream but
09:50 - this time it's
09:51 - file input stream because we're
09:53 - importing something
09:54 - so file input stream
09:58 - file in equals new
10:02 - file input stream
10:05 - and then we need the file name if it's
10:07 - local or the file path
10:09 - so let's actually take a look to see
10:11 - where this is located
10:12 - so this is within my serializer project
10:16 - folder i'm just going to look at the
10:17 - properties of it
10:18 - and this is the location so i'm just
10:20 - going to copy this file path
10:22 - and then paste it within the parenthesis
10:26 - and then i need to surround this with a
10:28 - set of double quotes
10:30 - and then all of these backslashes need
10:33 - to be
10:34 - uh double because that's the escape
10:37 - character
10:40 - step five object input stream in equals
10:43 - new
10:44 - object input stream and then the file in
10:46 - instance
10:47 - so let's add that object
10:51 - input stream we'll call this in
10:54 - equals new object
10:58 - input i really cannot spell today i'm
11:02 - sorry
11:03 - new object input stream
11:06 - file in
11:10 - uh okay so that should be good then
11:13 - object name
11:16 - equals in dot read object and then we're
11:19 - going to cast this as the data type
11:21 - of our class so
11:24 - object name uh that is actually
11:29 - user so make sure it's whatever
11:32 - this object name is so user equals then
11:35 - we're going to cast this
11:37 - as our user data type
11:41 - in dot read object
11:47 - and then we just need to close
11:48 - everything so in
11:50 - dot close file n
11:54 - dot close then we need to surround
11:57 - everything with either a try and catch
11:59 - block or add throws declaration
12:08 - then let's display some of the values
12:10 - from our user object that we're going to
12:12 - deserialize so we'll system that
12:15 - out.printline
12:17 - the user's name
12:20 - as well as the password
12:24 - user dot password
12:28 - and then let's also call the user dot
12:30 - say hello method
12:34 - and then let's run this so remember
12:38 - for this class i did not actually assign
12:40 - any of these values we're actually going
12:42 - to be converting that byte stream
12:44 - back into an object and that's how we
12:46 - get these values
12:48 - so let's run this boom there we go
12:51 - bro is the name password is i heart
12:54 - pizza
12:55 - and it calls the hello method so now if
12:58 - we went back to
12:59 - our serializer class our main class
13:02 - where we assign these values and we were
13:05 - to actually change these
13:07 - and run the program again so let's say
13:08 - we're going to update the name to
13:10 - grow code and the password to something
13:12 - secure such as
13:14 - password123 compile and run this
13:18 - so this will overwrite our ser file
13:21 - we go back to our d serializer class
13:25 - run this and we have some new values for
13:28 - this object
13:29 - so when you serialize it saves the state
13:32 - of the object as a
13:33 - byte stream and deserialize is to take
13:36 - that byte stream and rebuild it as an
13:38 - object
13:44 - next here's some important notes related
13:46 - to serialization that we should be aware
13:48 - of
13:49 - so number one is that any children
13:50 - classes of a parent class that
13:52 - implements the serializable interface
13:54 - will do so as well
13:56 - number two any static fields are not
13:59 - serialized that's because
14:00 - they belong to the class itself and not
14:03 - any one individual object
14:05 - and when we use serialization we're
14:07 - really just
14:08 - taking the values of that object and
14:11 - we're saving them we're having them
14:12 - persist so we can load it later
14:14 - so any static field is really the
14:17 - property of the class and not any one
14:20 - object
14:21 - so number three the classes definition
14:23 - is not recorded when we deserialize
14:26 - so we need to cast it as the specific
14:28 - data type of that object
14:30 - so you can see that in this line so
14:32 - we're taking our user and we need to
14:34 - cast it as of this data type when we
14:37 - read this object
14:38 - and if i were to remove this cast it
14:40 - will cause a problem and it says
14:42 - type mismatch cannot convert from object
14:45 - to user
14:46 - so that's why we cast in this line of
14:48 - code back into
14:49 - our data type of our object so number
14:53 - four
14:53 - is that any fields declared as transient
14:56 - aren't serialized they're ignored
14:58 - so let's actually practice this so let's
15:00 - go back to our
15:01 - serializer class the user class for this
15:04 - and we're going to use this transient
15:07 - keyword for the password let's say that
15:08 - we
15:09 - don't want to send the password over so
15:11 - we're going to type in
15:13 - transient and then let's go back to the
15:16 - deserializer
15:17 - user class and we're going to make sure
15:20 - this is transient as well because we
15:21 - want to make sure that these two
15:24 - classes match exactly so let's take
15:27 - the serializer main class run this
15:31 - so object info saved let's go back to
15:34 - the main class for
15:35 - our d serializer run this you can see
15:38 - here that we have the name but we have
15:40 - no for the password that's because we
15:42 - marked
15:43 - this property this value as transient so
15:46 - this value is ignored anything that has
15:49 - the transient keyword is not
15:50 - serialized it's ignored number five so
15:53 - this one's kind of a big one
15:55 - so there's this value called the serial
15:58 - version
15:58 - uid and it's a unique version id for a
16:02 - class that is
16:03 - serializable so let's dive more into
16:05 - this so here's what i found on the
16:07 - serial
16:08 - version uid it's a unique id
16:11 - that functions much like a version
16:13 - number and it verifies that the sender
16:16 - and the receiver of a serialized object
16:19 - have
16:19 - loaded classes for that object that
16:22 - match exactly
16:23 - and it ensures that the object will be
16:25 - compatible between machines
16:27 - it ensures that these two classes
16:30 - match exactly it's like a secret code it
16:33 - functions much like a hash where it's
16:35 - calculated based on the classes
16:37 - properties
16:38 - members and a few other things we can
16:41 - actually take a look to see
16:43 - what this serial version uid value is
16:45 - going to be
16:46 - so here i am within the main class of my
16:49 - serializer project folder
16:51 - so we can actually declare and assign
16:53 - this serial version uid
16:55 - and it's of the long data type a long is
16:58 - really just
16:59 - a 64-bit integer so it can hold a very
17:02 - very large number so it's of the long
17:05 - data type
17:06 - serial version i misspelled that
17:09 - serial version u
17:13 - i d equals and these are the steps to
17:17 - actually
17:17 - retrieve what the current version is
17:19 - going to be
17:20 - so we're going to type object stream
17:24 - class
17:27 - dot look up
17:32 - and then within the parenthesis we're
17:34 - going to type user
17:36 - dot get class
17:39 - and then at the end of this dot get
17:42 - serial version
17:44 - uid and then we can simply just display
17:47 - this
17:50 - let's take a look to see what this is
17:52 - going to be so this
17:54 - long number here is our serial version
17:56 - uid
17:58 - it is actually calculated for us based
18:00 - on certain aspects of
18:02 - this class much like a hash so
18:05 - this example just so happens to begin
18:08 - with negative
18:09 - 764 and i'm actually going to copy this
18:12 - and paste this within the main class
18:14 - of our d serializer class and then we
18:17 - can take a look at what this number is
18:19 - going to be
18:20 - so since these two user classes match
18:23 - for our serializer and d serializer
18:26 - these both have the same exact number
18:28 - for the serial version uid
18:31 - so right now i'm actually going to go to
18:33 - the user class
18:34 - of our serializer class and let's just
18:37 - change
18:38 - one aspect of this class let's say that
18:40 - we're going to rename
18:41 - say hello as instead greeting
18:45 - and then we're going to run and compile
18:47 - this now for
18:48 - our serial version uid a completely
18:51 - different number is calculated
18:53 - so now this is technically a different
18:56 - version
18:56 - of our user class compared to i our uh d
18:59 - serializer
19:00 - so what happens if we were to actually
19:03 - attempt to
19:04 - deserialize this new byte stream that
19:06 - has a different
19:08 - serial version uid so now we get this
19:11 - thing called a
19:12 - invalid class exception and this is what
19:15 - happens
19:16 - when you attempt to deserialize a byte
19:18 - stream that has a different
19:20 - serial version uid so you need to make
19:23 - sure that
19:24 - these serial version uids in fact match
19:27 - and you can actually explicitly state
19:29 - what you want these numbers to be
19:31 - i'm going to head back to the user class
19:34 - of our
19:34 - serializer class and i'm going to change
19:36 - this back to say hello instead of
19:38 - greeting
19:39 - so if you were to take a look at the
19:41 - class name there's actually a warning
19:44 - and it says the serializable class user
19:46 - does not declare a static
19:48 - final serial version uid field of type
19:52 - long so we can actually and it's
19:54 - actually recommended to do this
19:56 - add a default or a generated serial
19:59 - version id
20:00 - so let's add a default one and we can
20:03 - actually
20:03 - assign this to something so let's say
20:05 - that we're working on
20:07 - version one of this class and then if we
20:09 - want to update this to version two we
20:11 - can just simply change this number
20:13 - so i'm going to assign this user a
20:17 - serial version uid of one and then
20:20 - let's run this so now when it prints
20:23 - the serial version uid this is now one
20:26 - well that's the basics of serialization
20:29 - if you'd like a copy of all this code
20:31 - i'll post all of this in the comments
20:32 - down below but yeah that's the basics of
20:35 - serialization in java hey you
20:39 - yeah i'm talking to you if you learn
20:41 - something new then you can help me
20:43 - help you in three easy steps by smashing
20:47 - that like button
20:48 - drop a comment down below and subscribe
20:50 - if you'd like to become a fellow bro
21:02 - [Music]
21:12 - you