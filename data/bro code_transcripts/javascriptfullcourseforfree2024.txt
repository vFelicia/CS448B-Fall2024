00:00 - hey everybody today I decided I'm going
00:02 - to teach you everything you need to know
00:03 - to get started working with JavaScript
00:05 - throughout this course we'll be working
00:07 - on a few projects you could add to your
00:08 - portfolio which include but are not
00:10 - limited to a digital clock a
00:14 - stopwatch a functioning calculator a
00:17 - game of rock paper scissors an image
00:20 - slider and our final project will be a
00:22 - weather app that fetches data from an
00:24 - API if that sounds good to you I
00:26 - encourage you to sit back relax and
00:29 - enjoy the show hey if you don't mind
00:32 - please give this video a like post a
00:34 - random comment down below and subscribe
00:36 - if you'd like to be a fellow bro it
00:37 - doesn't cost you anything thank
00:41 - you JavaScript is a programming language
00:44 - used to create Dynamic and interactive
00:46 - web pages JavaScript runs on a web
00:48 - browser such as Google Chrome Safari
00:51 - Edge whatever you use to browse the
00:53 - internet basically by using JavaScript
00:55 - we can respond to user actions and
00:57 - transform user input whenever somebody
00:59 - interacts with our site in this example
01:01 - I have a calculator written with HTML
01:04 - it's not very pretty and it doesn't
01:05 - function we have the framework that we
01:07 - need at least though by applying CSS we
01:10 - can add color and style to this
01:12 - calculator but unfortunately it still
01:14 - doesn't function by including JavaScript
01:16 - code this calculator can perform actions
01:19 - and is well useful so in this video I'm
01:21 - going to show you everything you need to
01:23 - know to get started working with
01:24 - JavaScript I would recommend knowing
01:26 - HTML and CSS before starting the series
01:29 - I do have a full free course on my
01:31 - channel if you're interested in learning
01:33 - those or if you need a refresher if you
01:35 - don't know either you could probably
01:37 - still get by watching this video I'll
01:39 - walk you through both as we go along
01:41 - throughout the series now before we do
01:43 - begin you will need a text editor one
01:46 - text editor that I recommend is VSS code
01:48 - which you can download from code. visual
01:51 - studio.com for a step-by-step
01:53 - instruction of how to install it feel
01:55 - free to check out the HTML and CSS
01:57 - series with that out of the way let's
01:59 - Dive Right In
02:00 - so what we'll need to do is create a new
02:02 - project folder in vs code you can go to
02:05 - the left toolbar go to explore we will
02:08 - open a folder I'll place this folder on
02:10 - my desktop just for convenience I will
02:13 - create a new folder which I will name
02:15 - website to contain my website files
02:18 - let's select this
02:21 - folder and we are now within our website
02:23 - folder we'll need three files an HTML
02:27 - file CSS file and JavaScript file we'll
02:30 - begin with the HTML file we can close
02:33 - out of this welcome window I will name
02:36 - my HTML file
02:38 - index.html in a website the index.html
02:41 - file is typically used as the
02:44 - homepage we have our HTML file next
02:47 - comes the CSS file mine will be named
02:51 - style.css the CSS stylesheet is in
02:54 - charge of the overall appearance of the
02:56 - web page this can include fonts colors
02:59 - positioning stuff like that then lastly
03:01 - we have the JavaScript file which I will
03:03 - name
03:05 - index.js the Javascript file is in
03:07 - charge of the interactivity of a web
03:09 - page so alt together we have structure
03:12 - style and actions so rearrange these
03:15 - tabs however you like I switch back and
03:18 - forth between the JavaScript and HTML
03:20 - file quite often so I tend to put them
03:21 - right next to each other but do whatever
03:23 - is most convenient for you so to
03:25 - generate the necessary text to create a
03:28 - web page in your HTML file in vs code
03:30 - you can type exclamation point then hit
03:33 - tab so here you can change the title of
03:35 - your web page if you want I'll change my
03:37 - title to be
03:39 - my
03:40 - website and that's all we'll need for
03:42 - now now we'll need to link the
03:44 - stylesheet to the HTML file now we are
03:48 - going to create a link tag we can link
03:50 - an external stylesheet to our HTML file
03:53 - within the link tag there is a
03:55 - relationship attribute shortened to re
03:59 - the relationship ship will be stylesheet
04:01 - we are linking a stylesheet then the
04:03 - next attribute we need is the hre
04:06 - attribute where is the CSS file located
04:09 - well it's right next to each other we
04:11 - only need the file name so we are
04:13 - linking the CSS Styles sheet now our CSS
04:17 - stylesheet is linked to our HTML file
04:20 - now we need to link the Javascript file
04:22 - to our HTML file we can do that by
04:25 - adding a pair of script
04:28 - tags we will set The Source attribute to
04:30 - be the name of the JavaScript file
04:35 - index.js all right everything should now
04:37 - be linked together the last thing we'll
04:39 - need is the live server extension in VSS
04:42 - code go to
04:44 - extensions we will search for live
04:49 - server it should be this one we are
04:53 - going to install this
04:55 - extension so whenever we save any
04:58 - changes to our files the web page should
05:00 - refresh
05:02 - automatically so now let's test this you
05:04 - can go to file save or use the
05:08 - shortcut I'm just going to save
05:11 - everything I'm going to rightclick on
05:13 - our HTML file then open with live
05:16 - server and here is our web page but it
05:19 - currently doesn't have anything uh let
05:21 - me just minimize this I will readjust
05:25 - this window throughout this course I'll
05:27 - have VSS code alongside a web browser
05:30 - with our HTML file we can add elements
05:32 - such as an H1 element these are
05:34 - typically used as headers I'm going to
05:36 - say hello then save and that should
05:39 - update automatically or you can press
05:41 - the refresh button but since we have
05:43 - live server installed we shouldn't need
05:46 - to then paragraphs are typically used
05:49 - for a paragraph a text in vs code to
05:52 - generate a random paragraph of text you
05:54 - can type lauram then hit tab now we
05:57 - should have a random paragraph I believe
05:59 - it's Latin at least it looks like it to
06:02 - change the style of our web page we can
06:04 - go to our stylesheet to change the style
06:07 - of the body of our document we will
06:08 - select body I'll change the font family
06:12 - to something else font family how about
06:16 - verdana there we now have a different
06:19 - font to increase the font size you can
06:21 - set the font size property to be either
06:25 - in pixels or em personally I'm a fan of
06:28 - using em 2 em means
06:31 - 200% where 3 em is 300% but that's a
06:35 - little too big let's stick with 2 em all
06:39 - right and that is everything we need to
06:40 - get started oh important note you do
06:43 - want your script element at the bottom
06:45 - of the body of your document just in
06:47 - case there's an error with your
06:48 - Javascript file you do want all of the
06:51 - HTML elements to at least render first
06:53 - before running any JavaScript code all
06:56 - right so let's delete our H1 elements
06:58 - and our paragraph element we no longer
07:00 - need them for
07:01 - now be sure to save everything we'll
07:04 - work with some basic output I'm going to
07:06 - zoom in a little bit to Output some text
07:09 - you can type
07:12 - console.log add a set of parenthesis
07:14 - then a semicolon at the end within the
07:16 - set of parentheses to Output some text
07:18 - you can either use double quotes single
07:21 - quotes or back ticks personally I'm a
07:25 - fan of using these back ticks this is
07:27 - known as a template literal they're
07:29 - helpful with inserting variables which
07:31 - we will discuss in the next lesson using
07:33 - either double quotes or single quotes or
07:35 - back ticks we can output some text let's
07:38 - say the word hello be sure to save I'm
07:41 - holding contrl s on Windows there's no
07:44 - apparent output we have to go to Dev
07:46 - tools so right click on your web page go
07:49 - to
07:49 - inspect then console and here's our
07:52 - basic output hello for an additional
07:55 - line of output we can console.log again
07:58 - let's print print a different message I
08:01 - like
08:03 - pizza let's save and here's my second
08:06 - line of text I like
08:08 - pizza and I'm just going to move these
08:10 - windows a little bit that's better
08:13 - throughout much of the series we will be
08:15 - working with this window again you have
08:16 - to right click on your web page go to
08:18 - inspect then go to
08:21 - console now within our web page to
08:23 - create an alert box you can type window.
08:27 - alert at a set of parentheses semicolon
08:30 - to the end we'll use a template literal
08:33 - we'll need a set of back
08:35 - ticks this is an alert this should
08:39 - create a pop-up
08:41 - window this is an
08:44 - alert let's create
08:47 - another let's copy what we have paste
08:50 - it I like
08:53 - pizza let's
08:55 - save this is an alert okay I like pizza
08:59 - not sure why we need to tell a user that
09:01 - but we can now we have comments to
09:04 - create a comment you type two forward
09:06 - slashes comments aren't used for output
09:09 - they're used as notes for yourself or
09:11 - for other
09:12 - developers this is a comment so when I
09:16 - run this program then if we were to go
09:18 - to our Dev tools we don't see this
09:20 - comment at all they're not displayed as
09:23 - output they're either used for notes for
09:25 - yourself or for other people for a
09:27 - multi-line comment you can type a slash
09:30 - asterisk anything that comes after will
09:32 - be a
09:34 - comment this is a comment you can see
09:39 - that the text is green that means it's a
09:43 - comment again we should not be able to
09:45 - see these comments they're hidden I'm
09:48 - going to turn this JavaScript code into
09:50 - comments just for the next part because
09:52 - these window alerts are kind of annoying
09:54 - to be
09:55 - honest all right now what we're going to
09:57 - do is populate our web page page with
09:59 - some text within our HTML file I will
10:02 - create an H1
10:05 - element H1s are usually used for headers
10:08 - or titles there will be no text content
10:10 - yet but I will set an
10:12 - ID I will give this H1 element a unique
10:16 - ID of my H1 feel free to pick a
10:19 - different ID something you'll
10:21 - remember I will also create a paragraph
10:24 - element I will set the ID to equal my P
10:29 - meaning my paragraph so remember there
10:31 - is no text content currently using
10:34 - JavaScript we will add some text content
10:36 - first we need to select these elements
10:38 - by their ID my H1 and my
10:42 - p uh let's do that here we will type
10:46 - document meaning the document of our web
10:49 - page do get element by ID do pay
10:54 - attention to the
10:56 - capitalization what id are we getting
10:59 - let's start with my H1 so copy the ID
11:03 - paste it within the set of parentheses
11:05 - be sure you're including quotes as well
11:07 - follow this with DOT text content we
11:12 - will set this equal to how about the
11:15 - word
11:16 - hello let me zoom out a little again
11:19 - this can be back ticks single quotes or
11:23 - double quotes all right let's type the
11:25 - word hello now when I save and and
11:29 - refresh the page that H1 element should
11:32 - display the word hello now this time
11:35 - let's get our paragraph element with the
11:38 - ID of my P my
11:40 - paragraph document. getet element by ID
11:46 - the ID that we're getting is my P will
11:49 - change the text content equal to uh what
11:54 - can we say I like
11:57 - pizza
12:00 - there we go hello I like pizza all right
12:03 - everybody so that's the basics of
12:05 - JavaScript when working with basic
12:07 - output you can use console.log which we
12:10 - will be using a lot to create an alert
12:12 - you can use window. alert to change the
12:15 - text content of an HTML element you
12:17 - first have to select that element then
12:19 - change the text content then set it
12:22 - equal to some text of you're choosing
12:24 - all right everybody so that is the very
12:26 - basics of JavaScript and in the next
12:28 - topic we will cover
12:31 - variables all right well it's time that
12:33 - we discuss variables do you remember
12:36 - from middle school or elementary school
12:38 - when you learned algebra you had to
12:39 - solve for what the value of x was X was
12:42 - some representation of a value well
12:44 - that's kind of what a variable is in
12:45 - programming it's a container that stores
12:48 - a value the variable behaves as if it
12:50 - were the value it contains there's two
12:53 - steps to creating a variable declaration
12:55 - and assignment to use a variable we have
12:58 - to first declare it it we'll use the let
13:00 - keyword then a unique variable name like
13:03 - X then a semicolon so what we've done is
13:06 - declaration each variable name needs to
13:09 - be unique if I were to declare another
13:11 - variable named X we would run into an
13:14 - error a syntax error identifier X has
13:17 - already been declared so your variable
13:19 - names need to be unique I can declare
13:21 - two variables X and Y and they both have
13:24 - different names that is fine but they
13:26 - can't have the same name the next step
13:28 - to create a variable is to assign it a
13:30 - value once you declare your variable you
13:32 - don't need to declare it again so I'm
13:34 - going to assign X to equal some number
13:37 - like 100 we can use this variable X and
13:40 - it will behave as if it was the value
13:43 - 100 let me demonstrate so if I was to
13:47 - console.log
13:49 - X well then it's going to display 100 if
13:52 - I were to change this value to 123 well
13:55 - X is now
13:57 - 123 you you can do both declaration and
14:00 - assignment together that would look
14:02 - something like
14:03 - this let x equal
14:06 - 123 this is both declaration and
14:09 - assignment if you're creating a program
14:11 - and you know what your value should be
14:13 - you can assign them a value right away
14:15 - sometimes you may want to accept some
14:16 - user input so then you might do
14:19 - assignment later in two steps it's
14:21 - really up to how you write your program
14:23 - there's a few different data types in
14:25 - JavaScript the first is number like 123
14:29 - let's create a descriptive name for our
14:31 - variable like age we will store a user's
14:33 - age according to my analytics in YouTube
14:36 - the average age of my viewers is 25 so
14:39 - let's say that my age is
14:42 - 25 then if I was to
14:45 - console.log my age variable it would
14:48 - behave as if it were the number 25 let's
14:51 - create a few more variables another
14:53 - example of a number could be price let
14:56 - price equal 10 .99 maybe it's
15:01 - $110.99 or some other unit of currency
15:03 - of you're choosing then we will
15:06 - console.log price
15:09 - $10.99 what about a GPA a grade point
15:12 - average my grade point average is a
15:15 - solid 2.1 it's not great but C's get
15:19 - degrees console.log GPA
15:23 - 2.1 using a template literal we can
15:26 - insert a variable using a placeholder
15:28 - within console.log I will use back ticks
15:31 - let's write a sentence you are then to
15:35 - insert a variable use dollar sign curly
15:38 - braces place your variable name within
15:40 - the curly braces then we can continue
15:43 - our sentence you are variable age years
15:47 - old let's create another sentence using
15:54 - console.log the price is dollar sign
15:58 - curly
15:59 - braces
16:01 - price the price is
16:04 - $10.99 I'm going to insert a dollar sign
16:07 - before our
16:09 - price and that looks better feel free to
16:12 - choose some other unit of currency okay
16:14 - let's add a sentence to display our GPA
16:20 - console.log your GPA is colon space
16:26 - we're inserting a variable we need
16:27 - dollar sign curly braces we're
16:29 - displaying our
16:31 - GPA your GPA is 2.1 now if you need to
16:35 - display the data type of a variable you
16:39 - can use
16:40 - console.log then preedee the variable
16:43 - with the type of keyword what is the
16:46 - type of age age is a number
16:50 - type price is also a number type same
16:54 - thing with GPA they're all numbers let's
16:57 - go over a different data
17:02 - type let's go over strings a string is a
17:05 - series of characters let's say we have a
17:08 - user's first
17:10 - name to create a string you can either
17:13 - use double quotes or single quotes
17:16 - personally I like double quotes then you
17:19 - can type in some characters like a first
17:21 - name let's say my first name is bro feel
17:24 - free to pick your own first name I will
17:27 - display the type
17:29 - of my first name variable and it says
17:31 - it's a string a series of
17:34 - characters then I will display my name
17:38 - console.log first
17:40 - name and it is bro or whatever your
17:43 - first name is whatever you put here
17:46 - let's include our variable within a
17:48 - template
17:52 - literal your name is add a placeholder
17:56 - first name your name is bro what are
18:00 - some other examples of string maybe
18:03 - somebody's favorite food
18:06 - favorite food my favorite food is
18:10 - pizza type in your favorite
18:14 - food
18:18 - console.log you like at our
18:24 - placeholder favorite
18:27 - food you like pizza maybe if I like
18:31 - something else like sushi well you like
18:34 - sushi okay another example of a string
18:36 - could be an email let email equals then
18:40 - type in your
18:42 - email I'm just going to make one
18:44 - up bro
18:49 - gmail.com
18:52 - console.log your email
18:56 - is email
18:59 - your email is bro gmail.com let me make
19:02 - the G lowercase now an important thing
19:05 - with strings is that strings can contain
19:08 - numbers after bro I'll add 1 two 3 so a
19:12 - string is a series of characters they
19:14 - can include numbers but we can't use
19:17 - these numbers for any sort of math
19:19 - strings have a different behavior from
19:21 - numbers numbers we can use in arithmetic
19:23 - Expressions strings not so much all
19:26 - right let's turn these lines into
19:27 - comment
19:28 - then I will discuss
19:30 - booleans okay booleans are either true
19:33 - or false typically they're used as Flags
19:35 - in your
19:36 - program let online equal true booleans
19:41 - are either true or false is somebody
19:43 - online or are they offline this is
19:46 - either true or
19:47 - false I will display the type of my
19:50 - variable online console.log type of
19:55 - online so online is a Boolean
19:59 - variable let's display our variable
20:01 - within a template
20:03 - literal type in whatever your first name
20:05 - is bro is
20:08 - online then I will insert a
20:11 - placeholder add my Boolean variable of
20:14 - online bro is online that is true if I
20:17 - were to change this to false bro is
20:20 - online is false booleans are typically
20:23 - used as a sort of flag so another
20:27 - example could be
20:28 - for sale is something for sale or not
20:32 - let's say that we are
20:34 - selling I don't know
20:36 - cars is this car for sale I could set
20:40 - this to be true or
20:42 - false let's
20:45 - console.log is this car for
20:49 - sale then I will add my Boolean variable
20:53 - for
20:54 - sale is this car for sale that is true
20:58 - another example let's say that somebody
21:00 - is enrolled in school like in college
21:02 - courses we could say let is student is
21:07 - somebody a student are they enrolled
21:09 - this can be true or
21:12 - false
21:15 - console.log
21:18 - enrolled colon
21:20 - space is
21:24 - student is the student enrolled in
21:26 - classes that is true
21:28 - so those are booleans they're either
21:30 - true or false typically we don't use
21:33 - them as direct output like you see here
21:35 - we usually use them with if statements
21:37 - to check something like if somebody's
21:39 - online do this if not do something else
21:42 - is a car for sale if that's true then
21:45 - display the car if it's not then hide it
21:47 - we'll have more practice with booleans
21:49 - when we reach if statements all right
21:52 - now what we're going to do is we will
21:53 - close out a Dev tools we'll display some
21:56 - variables within our web page so let's
21:58 - delete everything we
22:00 - have I'll create three variables let
22:05 - full name equals type in your full
22:09 - name feel free to add a space between
22:12 - your first name and last name let age
22:15 - type in your
22:18 - age and
22:20 - let
22:22 - student equals if you're a student type
22:24 - true if you're not in school type false
22:28 - I am not in school anymore so I will
22:30 - type false we will go to our HTML
22:33 - file then add some HTML
22:36 - elements I will add three paragraph
22:38 - elements so that's one 2 3 I will give
22:44 - my first paragraph an ID of
22:47 - P1 then let's do the same with the other
22:50 - two paragraphs let's rename the second
22:52 - as P2 and the third as
22:56 - P3 so to change the text content of an
23:00 - HTML element we're going to type
23:03 - document meaning the document of our web
23:06 - page then we will get our element by its
23:11 - ID get element by ID then within a set
23:16 - of parentheses within a set of quotes we
23:19 - will select the ID that we need let's
23:21 - start with P1 then add do text content
23:26 - to change the text content
23:29 - then we will set this equal to a
23:31 - variable or a template literal let's
23:34 - begin with a variable so full
23:39 - name our P1 element should display your
23:42 - full name let's do this with
23:46 - P2 I'm going to zoom out a little
23:48 - bit P2 textcontent equals age it says
23:53 - that I'm
23:55 - 25 and then P3 let's display student or
24:00 - better yet is student let's change that
24:03 - is
24:04 - student false I am not a student but you
24:07 - might be though that might be true then
24:10 - let's display our variables along with
24:12 - some text using a template
24:14 - literal let's copy our full
24:18 - name your name is add a placeholder
24:22 - place our variable name your name is Bro
24:25 - Code or whatever your name is
24:29 - let's cut our age
24:30 - variable you
24:33 - are variable age years old you are 25
24:38 - years
24:39 - old and then let's cut is
24:42 - student add a template
24:45 - literal let's say enrolled are you
24:48 - enrolled in
24:50 - school add a placeholder paste our
24:53 - variable enrolled that is false I am not
24:57 - in school anymore more all right
24:58 - everybody so those are variables it's a
25:00 - container that stores a value the
25:02 - variable behaves as if it were the value
25:04 - it contains there's a couple different
25:06 - basic data types you have strings which
25:09 - is a series of text numbers and booleans
25:12 - there's more advanced data types but
25:14 - we'll cover that later and well those
25:16 - are variables in
25:19 - JavaScript yeah what's going on
25:21 - everybody so today I need to explain
25:23 - arithmetic operators because well
25:25 - programming can sometimes involve a lot
25:27 - of M operand are values variables Etc in
25:31 - this equation 11 x and 5 are all operand
25:36 - operators they can include but are not
25:38 - limited to addition subtraction
25:41 - multiplication and division in this
25:43 - equation the addition sign would be the
25:45 - operator so there's a few things you
25:47 - should know regarding arithmetic
25:49 - operators in JavaScript so let's begin
25:52 - let's pretend that in the scenario we
25:54 - are a teacher we have a group of
25:56 - students let students equals what's a
25:59 - good class size maybe 30 students then I
26:03 - will
26:05 - console.log my students
26:10 - variable and it should be 30 let's say
26:13 - that a new student joins the class and I
26:15 - need to change this variable to increase
26:18 - students by one I can say students
26:21 - equals this will reassign my variable
26:24 - equals the current value of students + 1
26:28 - now we have 31 students now for
26:31 - subtraction that is the minus sign to
26:34 - subtract a student we can reassign our
26:36 - variable students equals students minus
26:40 - one now we have
26:43 - 29 then we have multiplication which is
26:46 - represented by an
26:47 - asterisk we will double the number of
26:50 - students we have students equals
26:52 - students as Risk 2 to multiply by two we
26:57 - have 6
26:59 - students division is a forward slash we
27:03 - will split our class of students into
27:06 - two students divided two we now have
27:10 - 15 all right then we have
27:12 - exponents exponents is represented by
27:15 - double
27:17 - asterisks what is students to the power
27:21 - of
27:22 - two 900 students that is a very large
27:26 - class maybe it's a lecture or something
27:28 - in a college so students to the power of
27:30 - three that would be students to the
27:33 - power of three would be
27:37 - 27,000 double asterisks is the exponent
27:41 - operator here's another helpful one it
27:44 - is the modulus operator it gives you the
27:47 - remainder of any division so let's say
27:50 - we are going to divide our class into
27:52 - two so modulus which is represented as a
27:56 - percent sign two
27:58 - well 30 divides by two evenly so the
28:01 - remainder is zero if we had a class of
28:03 - 31 students well there's one remainder
28:06 - one
28:08 - student students modulus 3 would divide
28:11 - my class of 31 students into three we
28:14 - would still have one student remaining
28:17 - since we're reassigning students we
28:19 - would be replacing 31 students with the
28:22 - value of one if you're using the modulus
28:24 - operator I would recommend creating a
28:26 - separate variable entit ly let extra
28:30 - students equal our students modulus 3 we
28:35 - have one extra student just one okay
28:39 - that is the modulus
28:41 - operator there is a shortcut for writing
28:43 - these Expressions because it can be kind
28:45 - of tedious to write the variable name
28:46 - twice so let's set students back to 30 I
28:50 - will console.log students we'll use what
28:54 - is known as augmented assignment
28:56 - operators to increase students by a
28:59 - number if we're reassigning it we can
29:01 - say students plus equals 1 or some other
29:05 - number students is now 31 if I were to
29:08 - change one to be2 it's now 32 and
29:13 - 33 let's do the same thing with
29:15 - subtraction students minus equals
29:19 - 1 we now have 29
29:22 - students multiplication
29:25 - students times equals 2 that would give
29:29 - us 60
29:33 - students students divided by equals 2 we
29:37 - have 15
29:40 - students all right then
29:42 - exponents students to the power of
29:47 - equals 2 900
29:51 - students then
29:54 - modulus students modulus equals
29:59 - 2 we have no remaining students 30
30:02 - divides by 2 evenly so another place
30:04 - where modulus could be helpful is if
30:06 - you're determining if a number is even
30:08 - or odd 30 is an even number divided by
30:10 - two the remainder is zero 31 is odd the
30:14 - remainder is one there's also the
30:16 - increment and decrement operator there's
30:18 - a couple different ways to add one to a
30:20 - variable but you should be aware of all
30:22 - of them to increase a variable by only
30:25 - one you can take the name of the
30:26 - variable then add Plus+ Plus+ is the
30:30 - increment operator 30 incremented by 1
30:34 - is 31 then there is the decrement
30:36 - operator which is minus
30:39 - minus 30 decremented by 1 is 29 all
30:43 - right then lastly we're going to cover
30:45 - operator
30:46 - precedence this is pretty important
30:49 - given a very complex equation such as
30:52 - this example in which order do you solve
30:55 - each part of this equation so with
30:57 - operator precedence beginning with the
30:59 - left working our way to the right you
31:01 - would solve anything with parentheses
31:03 - then exponents multiplication and
31:06 - division and modulo otherwise known as
31:08 - modulus then lastly addition and
31:11 - subtraction let's go through the step by
31:13 - step let's see what the result variable
31:15 - is I will
31:18 - console.log result so the result is
31:22 - 23 so if we were to walk through this
31:24 - step by step let's solve anything with
31:26 - parentheses es starting from the left
31:29 - and then working our way to the right
31:30 - there are no parentheses we can skip
31:32 - this step next is exponents there is one
31:35 - exponent here so we would solve 4 to ^
31:38 - of 2 which is
31:40 - 16 then we will solve multiplication and
31:44 - division and modulus that's addition we
31:47 - skip that we have multiplication 2 * 3
31:50 - is
31:51 - 6 there is no more multiplication
31:54 - division or
31:55 - modulus then lastly addition and
31:58 - subtraction 1 + 6 is 7 7 + 16 is our
32:03 - result of 23 all right I'll give you a
32:05 - few more
32:07 - exercises how about this
32:09 - equation the result is going to be six
32:12 - so there's no parenthesis no
32:15 - exponents we do have a modulus operator
32:17 - here so we solve that first 12 modulus 5
32:21 - gives us a remainder of
32:24 - two we have some division we would solve
32:26 - that next 8 divid 2 is four then
32:29 - addition and subtraction the result is
32:32 - six all right here's a challenge
32:35 - round the result is going to be
32:38 - 0468 we solve anything with parenthesis
32:41 - first 2 + 5 that is
32:44 - 7 then exponents 2 the^ of 7 I might
32:49 - need a calculator 2 * 2 3 4 5 6 7 that's
32:56 - 128
32:58 - then we have 6 / 128 then we have 6 /
33:03 - 128 which is 046
33:09 - 875 and that is our result all right
33:12 - everybody so that is everything you need
33:14 - to know about arithmetic operators you
33:16 - have operand which are values and
33:18 - variables and arithmetic expression and
33:21 - operators there's also augmented
33:23 - assignment operators which is a shortcut
33:25 - to writing these equations if you're
33:27 - you're going to reassign a variable then
33:28 - you have increment and decrement
33:30 - operators to increase a variable by one
33:32 - or decrease it by one then with operator
33:35 - precedence if you're solving a complex
33:37 - equation you solve each part of the
33:39 - equation following this order and well
33:41 - that is everything you need to know
33:42 - regarding arithmetic operators and
33:46 - JavaScript yeah what's going on people
33:49 - so uh today I'm going to show you how we
33:51 - can accept some user input in JavaScript
33:54 - generally there's two good ways of doing
33:56 - this the easy way is to create a window
33:58 - prompt the professional way is to create
34:01 - an html text box of some sort and you'll
34:04 - likely need a button to submit the user
34:06 - input let's begin with the easy way
34:08 - we'll create a window prompt the first
34:10 - thing we should do is declare all of the
34:12 - variables we're going to use let's
34:14 - create a variable named username we'll
34:17 - declare it but not yet assign it then
34:20 - when we assign it we can set username
34:22 - equal to then to create a window prompt
34:25 - we can type
34:27 - window.
34:29 - prompt
34:31 - parentheses then within the parentheses
34:33 - our window prompt can contain some text
34:36 - let's ask what's your
34:39 - username okay let's run this and see
34:42 - what
34:43 - happens what's your username I will type
34:45 - in my username press
34:48 - okay we have this variable username it
34:51 - will have a value but we should do
34:52 - something with it let's
34:55 - console.log
34:59 - our
35:00 - username let's try that
35:02 - again what's your username I'll type in
35:05 - my username feel free to type in
35:08 - yours let's check our Dev
35:11 - tools and here is my
35:14 - username so that's the easy way to
35:16 - accept user input with this window
35:18 - prompt you could assign declaration and
35:20 - assignment together if you want to you
35:23 - know that would also work now we will
35:25 - accept user input the Prof profal Way by
35:27 - creating an html text box we will
35:31 - navigate to our HTML
35:33 - file okay let's create an H1 element
35:36 - that says
35:39 - welcome we'll need a text box we'll use
35:42 - a self-closing input
35:45 - tag I will set the ID of this text box
35:48 - to be my
35:50 - text I'll create a label for this text
35:53 - box too because if we're a user we don't
35:55 - know what we're supposed to to type in
35:58 - here I will create a
36:02 - label the text within the label will be
36:07 - username then a submit
36:10 - button
36:12 - button the text will be
36:15 - submit I'll put this on a new line I'll
36:17 - add a Break
36:19 - Tag maybe two to make it look nice for
36:23 - the ID of the button I'll set the ID to
36:27 - be my submit let's see if this
36:31 - works this is a little Advanced when we
36:34 - click on this button we're going to
36:36 - execute a function but we need to select
36:39 - this button we will access the document
36:42 - of our web
36:43 - page get element by
36:47 - ID the ID that we're getting is the ID
36:50 - of the button my
36:52 - submit So within quotes type the name of
36:55 - the ID follow this with DOT
37:00 - onclick
37:02 - equals here we'll write everything we're
37:04 - going to do after clicking the button we
37:07 - need a function function parenthesis
37:10 - curly braces everything between this set
37:13 - of curly braces is everything we'll do
37:16 - when we click on the button so first we
37:19 - need a username variable outside of the
37:23 - function when we click on the button get
37:26 - the text from this text box we will
37:29 - reassign our username then set this
37:31 - equal to the text from the text
37:34 - box we'll use document. getet element by
37:38 - ID the ID that we're getting this time
37:42 - is my
37:46 - text we need the value of the text box
37:49 - so follow this with DOT
37:52 - value all right then to test this let's
37:55 - console
37:57 - log the
38:00 - username all right let's type in our
38:03 - username press submit then check Dev
38:07 - tools yeah there it
38:10 - is okay let's replace
38:12 - console.log we'll change the text
38:15 - content of our H1
38:16 - element I will give this H1 element a
38:19 - unique ID let's say my
38:23 - H1 we need to select my H1 ele El
38:27 - document. getet element by ID the ID was
38:31 - my
38:33 - H1 we are changing the
38:36 - text content equal to let's use a
38:41 - template literal
38:43 - hello
38:45 - username all right let's try this again
38:47 - type in your username press submit and
38:51 - that should change the H1 element hello
38:54 - whatever your name is all right
38:56 - everybody so those are two different
38:57 - ways to accept user input you can use a
39:00 - window prompt or you can use an html
39:02 - text boox and that is how to accept user
39:05 - input in
39:08 - JavaScript all right so uh yeah type
39:11 - conversion type conversion is the
39:12 - process of changing the data type of a
39:15 - value to another data type for example
39:17 - we can convert strings to numbers
39:19 - numbers to booleans booleans to Strings
39:22 - numbers to strings booleans to numbers I
39:24 - think you get the idea why might we want
39:26 - to do this well when we accept user
39:28 - input the data type of that input is a
39:30 - string if we need to use it for any sort
39:32 - of math we need to convert it to a
39:34 - number here's an example let's say we
39:36 - have variable age I will create a window
39:39 - prompt window.
39:42 - prompt we will ask a user how old are
39:46 - you I'm going to add one to our age age
39:50 - plus equals 1 then
39:54 - console.log age
39:57 - how old are you let's say I'm 25 press
39:59 - okay let's inspect our page go to
40:02 - console it shows that age is
40:05 - 251 when we accept user input it's a
40:08 - string data type a series of characters
40:11 - by adding one we appended one to the end
40:13 - of our string we're not increasing our
40:15 - age by one we're doing string conation
40:19 - we are going to convert our user input
40:21 - into a number and this is how so after
40:24 - accepting our user input and before
40:27 - making any changes to it let's reassign
40:29 - age equal to and this is a function the
40:33 - number function it will convert another
40:35 - data type such as a string or Boolean
40:37 - into a number then we'll place our age
40:40 - variable within that
40:42 - function so now this should work how old
40:45 - are you let's say I'm 25 press okay
40:48 - 26 so that's the reason you may want to
40:51 - type convert because different data
40:53 - types behave differently along with my
40:55 - age variable I'm going to display the
40:59 - type of age what's the data type how old
41:02 - are you 25 press okay 26 and it shows
41:06 - that the data type of age is number if
41:09 - we removed this type conversion and then
41:12 - run this
41:13 - again it shows that our age is
41:16 - 251 and it's a string which is not
41:19 - exactly what we would like that's a
41:21 - reason why type conversion is important
41:23 - let me give you another example let's
41:25 - create three variables
41:27 - let X let Y and let Z I'll show you what
41:32 - happens when we convert different values
41:34 - into different data types let's say x is
41:38 - the word
41:39 - Pizza same thing with Y and
41:43 - Z I will typ Cast X as a
41:47 - number then we need to place X within
41:50 - the number function I kind of want to
41:52 - see what happens when we try and convert
41:54 - pizza into a number it's probably not
41:57 - going to go well let's convert Y into a
42:02 - string then Z will be a
42:09 - Boolean let's
42:13 - console.log X as well as the type of
42:19 - X let's do the same thing with y and
42:25 - z
42:28 - all right what's going to
42:30 - happen if you attempt to convert
42:32 - alphabetical characters into a number
42:35 - that variable will be Nan which means
42:38 - not a number the data type is still
42:40 - number though as you can see the word
42:42 - Pizza is already a string so converting
42:45 - it into a string really doesn't do
42:46 - anything that's why for this line the
42:49 - value is still pizza and the data type
42:51 - is still a string if you convert a
42:54 - string into a Boolean booleans again are
42:56 - either true or false converting the word
42:59 - pizza into a Boolean returns true and
43:02 - the data type is Boolean so basically as
43:04 - long as there's some value here and you
43:06 - convert it into a Boolean it will always
43:08 - be true let's replace pizza with
43:13 - zero what will
43:15 - happen we can convert zero into a number
43:19 - it doesn't contain any alphabetical
43:21 - characters X contains zero it's a
43:24 - number Y is zero but it's treated as a
43:27 - string Z contains true and it's a
43:31 - Boolean what about empty strings just a
43:35 - set of quotes typ casting an empty
43:37 - string as a number is still zero we have
43:40 - an empty string for y then with our
43:43 - Boolean it's false why might you want to
43:46 - typ cast a string as a Boolean that's
43:48 - one way in which you can check to see if
43:50 - user input is empty like did somebody
43:53 - type something in if a user skipped user
43:55 - input it's it's most likely going to be
43:57 - an empty string then you can check to
43:58 - see like if this is false then the user
44:01 - didn't type in anything and you can let
44:03 - them know what about a variable that's
44:05 - declared but not assigned a
44:09 - value converting an undefined variable
44:11 - to a number results in not a number our
44:14 - string is
44:16 - undefined and our Boolean variable
44:18 - returns false so that's the basics of
44:21 - type conversion it's the process of
44:22 - changing the data type of a value to
44:24 - another it's pretty important when you
44:26 - accept user input because when you
44:28 - accept user input it's a string data
44:30 - type at times you may want to convert it
44:31 - to a number if you need to include that
44:34 - number with any sort of arithmetic
44:35 - expressions or a Boolean if you're
44:37 - checking to see if that user input was
44:40 - completed we'll have more practice with
44:42 - this in the future and well that is type
44:44 - conversion in
44:48 - JavaScript why hello so today I need to
44:51 - explain const const short for constants
44:54 - are variables that can't be changed
44:55 - changed once you assign them in this
44:57 - example we're going to create a program
44:59 - to calculate the circumference of a
45:01 - circle given a radius let's define our
45:03 - variables first we have Pi we'll begin
45:06 - with using let then I'll show you the
45:08 - benefit of using const so let pi equals
45:13 - I'll use the first few digits of pi
45:18 - 3.14159 then we have let radius which we
45:21 - will assign later we'll ask for user
45:23 - input then let
45:26 - circumference I think I spelled that
45:28 - right I can never spell
45:30 - circumference all right now we need to
45:32 - ask the user what the radius is I will
45:35 - just use a window prompt radius equals
45:39 - window.
45:42 - prompt enter the radius of a
45:50 - circle then once we have our radius when
45:53 - we accept user input it's a string data
45:56 - type we need to convert our radius into
45:58 - a number by using the number
46:02 - function then once we have our radius we
46:05 - can calculate the circumference by
46:07 - setting circumference equal to and
46:10 - here's the Formula 2 * pi * our radius
46:14 - that the user enters in then once we
46:16 - have our circumference let's
46:19 - console.log our
46:22 - circumference let's see if this works
46:27 - enter the radius of a circle I'll enter
46:29 - 10 press okay their circumference is
46:34 - 62.8 so why might you want to use a
46:36 - const in this program you may
46:38 - accidentally or somebody else may
46:41 - maliciously change the value of a
46:43 - variable so that the program doesn't
46:45 - behave as intended for example somewhere
46:48 - within my program I will set pi to be a
46:51 - new number pi equal 420.69
46:56 - let's run this program again enter the
46:58 - radius of a circle I'll enter 10 press
47:00 - okay and my circumference is
47:04 - 8,413 I may not realize that this is the
47:07 - incorrect answer just for an extra
47:10 - security measure I can turn any
47:12 - variables that shouldn't change to be a
47:15 - const a constant replace let with const
47:20 - and it is a good practice if you have
47:21 - any constants to make all of the letters
47:24 - in the variable name uppercase so Pi is
47:26 - now Capital Pi hey this is bro from the
47:29 - future there's one thing I needed to
47:31 - clarify that I forgot to mention
47:33 - capitalizing your constants is usually
47:35 - only done with primitive data types such
47:37 - as numbers in booleans reference data
47:40 - types such as strings don't normally
47:42 - followed this convention you'll see this
47:44 - in the next few upcoming videos Pi is a
47:46 - constant and we're assigning a number
47:48 - that's why I'm making it all uppercase
47:50 - but if this was a string normally we
47:51 - wouldn't that is all let's try and
47:54 - change that variable again Pi = 420.69
48:00 - so we have an uncaught type error
48:03 - assignment to constant variable so
48:06 - JavaScript won't let us reassign
48:09 - constants once they are assigned once we
48:12 - can't make any changes to it once you
48:14 - declare a constant you can't change the
48:16 - value and that's pretty helpful in a lot
48:18 - of circumstances it's an extra security
48:20 - measure what we'll do this time is
48:22 - within our web page we will accept some
48:24 - user input via a text box we'll rewrite
48:28 - the same
48:29 - program let's create an H1
48:31 - element I will set the ID of the H1
48:34 - element to be my
48:37 - H1 and the text will be enter the radius
48:42 - of a
48:46 - circle I'll create a text box
48:49 - input I'll set the type equal to text
48:53 - the ID equal to my
48:58 - text I'll create a label for this input
49:01 - text
49:06 - box let's say
49:09 - radius I'll add a
49:15 - button the button will say
49:19 - submit the ID will be my
49:22 - submit then I'll add to break
49:27 - right after the text box to make it look
49:30 - nice let's get rid of
49:33 - console.log when we click on the submit
49:35 - button we will execute a function we
49:38 - need to select the
49:39 - button let's take our
49:41 - document get element by
49:46 - ID the ID is my
49:51 - submit follow this with DOT onclick
49:57 - equals a function parentheses curly
50:00 - braces when we click on the button we'll
50:03 - execute any code within the curly braces
50:05 - we can eliminate our window
50:09 - prompt we need to get the value from the
50:11 - text box again we can use document.
50:14 - getet element by ID but the ID is going
50:17 - to be my text the text from the text
50:21 - box dot value get the value from the
50:25 - text box box and we will assign that to
50:30 - radius then we will typ cast our input
50:33 - as a
50:36 - number then we will calculate the
50:40 - circumference but since Pi is a constant
50:44 - make sure that the letters are uppercase
50:46 - uppercase
50:47 - Pi once we have our circumference let's
50:50 - change an H3 element so let's add that
50:53 - as
50:54 - well
50:56 - H3 the ID will be my H3 there will be no
51:01 - text
51:03 - content then again we will get element
51:06 - by
51:07 - ID the ID will be my
51:10 - H3 change the text content of this
51:15 - element to equal our
51:20 - circumference okay let's try this the
51:22 - radius is 10 press submit and here is
51:25 - our circumference maybe this will be in
51:29 - centimet so let me change that I'll use
51:32 - string concatenation and just add plus
51:36 - CM so 10 submit 62.83 CM if I attempt to
51:43 - change the value of
51:45 - pi maybe I'll do that here pi equal
51:49 - 420.69
51:51 - rerun the program 10
51:54 - submit there doesn't appear to be a
51:56 - result so if we go to Dev tools go to
52:00 - console we have that uncaught type error
52:03 - assignment to constant variable so again
52:06 - we can't change the value of a constant
52:08 - there are more graceful ways of handling
52:10 - this we'll learn about that when we get
52:12 - to exception handling however this is
52:15 - what we wanted we do not want to be able
52:17 - to change the value of a constant all
52:19 - right everybody so those are constants
52:21 - it's just a variable that can't be
52:22 - changed once you assign it a value and
52:25 - well those are constants in
52:29 - JavaScript hey what's going on everybody
52:31 - so in today's video we're going to
52:33 - create a counter program using
52:35 - JavaScript HTML and CSS so sit back
52:39 - relax and enjoy the show all right let's
52:42 - begin everybody so what we're going to
52:44 - do is start with our index.html file
52:48 - We'll add any necessary elements then we
52:50 - will style those elements with our CSS
52:53 - file then lastly we will add
52:55 - functionality via JavaScript so let's
52:58 - begin with our HTML file within the body
53:02 - of our document I will create a label to
53:05 - store the count so I will create a
53:09 - label with an
53:12 - ID of count label the text will be zero
53:18 - it's a little small but that's okay
53:20 - we'll increase the font size with
53:22 - CSS I'll add a break afterward
53:26 - with the Break Tag we'll need three
53:28 - buttons decrease reset and
53:33 - increase so we have button one let's
53:37 - copy this button paste it two additional
53:40 - times the ID for the first button will
53:45 - be
53:47 - decrease btn4
53:50 - button the text will be
53:54 - decrease
53:58 - then for the second button the ID will
54:00 - be reset button the text will be
54:05 - reset then increase
54:09 - ID
54:11 - increase
54:12 - button the text will be
54:17 - increase what I'm also going to do is
54:19 - place our buttons within a div
54:23 - section let's let's cut our
54:27 - buttons then place the buttons within
54:29 - the
54:30 - div I will give the div a unique
54:34 - ID of button
54:38 - container we'll Center align our button
54:41 - container so it's in the middle of the
54:42 - window okay that is everything we need
54:45 - with our HTML file let's move to our CSS
54:49 - file let's style the count label it's a
54:52 - little small right now I will select the
54:56 - ID count
55:00 - label I will display the
55:03 - label as a block level
55:06 - element I will text align Center so it's
55:10 - in the center of our
55:13 - screen let's increase the font
55:16 - size I tend to like to use the EM unit
55:20 - of
55:21 - measurement the text will be 10 times
55:23 - the size
55:25 - then let's change the font
55:27 - family pick a font of your choosing for
55:30 - this example I'll use
55:37 - helvetica let's Center the button
55:40 - container that should surround all three
55:43 - buttons as you can see
55:46 - here the ID was Button
55:52 - container text align
55:56 - Center okay the buttons should be in the
56:00 - middle one thing I forgot to do uh let's
56:03 - actually add a class to our buttons
56:06 - too class
56:09 - equals
56:15 - buttons
56:16 - there all right we will select the
56:19 - buttons
56:21 - class I'll add some
56:23 - padding padding
56:25 - 10 pixels and 20
56:30 - pixels let's increase the font size font
56:33 - size 1.5 em that translates to
56:39 - 150% let's pick a font color I'll just
56:42 - pick
56:44 - white then a background color for the
56:47 - buttons background-
56:49 - color I'll use hsl
56:53 - values
56:57 - how's
56:58 - that not feeling
57:00 - it that's pretty
57:06 - good let's round the corners with border
57:09 - radius five
57:13 - pixels I'll change the cursor into a
57:16 - pointer when we hover over a
57:18 - button
57:21 - cursor
57:23 - pointer then we'll add a transition
57:29 - animation
57:33 - transition
57:37 - background-color after 0.25
57:41 - seconds then we'll apply the hover sudo
57:43 - class when we hover over one of the
57:46 - buttons take our buttons
57:48 - class use the hover PSE sudo
57:52 - class we will change the back ground
57:55 - color after a quarter of a second then
57:58 - change the background color to something
58:00 - slightly
58:07 - darker yeah that looks good there should
58:11 - be a delay when you hover over one of
58:12 - the
58:13 - buttons our HTML file is done same with
58:16 - our CSS now we need to add functionality
58:19 - because well these buttons don't do
58:21 - anything I will individually assign all
58:24 - of these buttons so that each is stored
58:26 - within a
58:28 - constant so
58:30 - const
58:32 - decrease button equals then we need to
58:35 - select each button by accessing our
58:38 - document. getet element by
58:43 - ID what's the id we're selecting we will
58:46 - begin with our decrease
58:50 - button all right then we need our reset
58:54 - button
58:56 - reset button the ID is reset
59:00 - button then increase
59:04 - button increase button the ID is
59:08 - increase
59:11 - button we need our count
59:14 - label okay then we will set
59:19 - const count label equals then we need to
59:24 - get the of our count
59:26 - label so document. getet element by ID
59:30 - count
59:34 - label then we will use let
59:39 - count equal
59:42 - zero we'll be reassigning count we'll be
59:45 - incrementing and decrementing count with
59:47 - our HTML elements we do not plan on
59:50 - reassigning them so we can set them as
59:52 - constants now we need a few functions
59:55 - three
59:56 - functions one for each of these buttons
59:58 - decrease reset increase let's begin with
60:02 - increase so we are taking our increase
60:05 - button that we
60:07 - assigned with the onclick attribute of
60:10 - this button set this equal to a
60:13 - function what's it going to do when we
60:16 - want to increase this value of our count
60:19 - label let's increment count by one count
60:23 - Plus+ then we will set the text content
60:26 - of our
60:27 - label count
60:29 - label. text content equals whatever the
60:34 - count currently is let's see if this
60:38 - works it looks like I misspelled on
60:41 - click all right let's see if this
60:44 - works yep every time we press the button
60:47 - our counter label increases by
60:50 - one okay let's work on
60:52 - decrease really we can just copy this
60:54 - function
60:56 - paste it let's change increase to
61:00 - decrease count minus
61:04 - minus save
61:06 - everything and we should be able to
61:08 - increase and
61:10 - decrease then the reset
61:13 - button let's copy one of these
61:16 - functions change decrease button to
61:19 - reset button when we want to reset we
61:22 - will set count back to zero
61:25 - then update our count label with the
61:27 - current count which should be zero we
61:30 - can
61:30 - increase we can decrease and we can
61:34 - reset then increase and decrease again
61:37 - all right everybody so that is a counter
61:40 - program with JavaScript HTML and
61:45 - CSS hey what's going on everybody so
61:48 - today I'm going to explain math math is
61:50 - a built-in JavaScript object that
61:53 - provides a collection of math related
61:55 - properties and methods for example if
61:57 - you ever need the value of pi you would
61:59 - type math with a capital
62:02 - m.p then let's console.log this
62:07 - console.log
62:11 - math.pi Pi is 3.14 and the rest of the
62:15 - digits if you need e e is known as ul's
62:20 - number it's used for the base of natural
62:22 - logarithms we won't really using e in
62:25 - the series but if you ever need it it's
62:27 - there math does give you access to a lot
62:29 - of useful math related methods let's
62:32 - create a few variables let X =
62:38 - 3.21 let y equal to and let Z will be
62:44 - undefined if you need to round a number
62:46 - let's say Z equals you can type
62:51 - math.round method Place whatever value
62:53 - or Vari variable you would like to round
62:55 - within the round method let's round X
62:59 - store the result within Z then display z
63:04 - console.log z so 3.21 rounded is three
63:09 - even there's also floor floor will
63:12 - always round
63:13 - down let's change 3.21 to
63:17 - 3.99 let's copy this
63:21 - line paste it change round to floor
63:25 - floor always rounds down so 3.99 rounded
63:28 - down is again three to always round up
63:32 - you can use seal as in sealing the
63:36 - opposite of
63:38 - floor c
63:41 - l let's change 3.99 to 3.21 3.21 rounded
63:46 - up is four then there's
63:53 - truncate trunk short for truncate will
63:56 - eliminate any decimal portion 3.21
64:00 - truncated is three another way to raise
64:03 - a base to a given power is to use the
64:05 - pow method
64:08 - P let's raise 3 to the power of 2 so x
64:13 - to the power of Y which would be
64:17 - 9 y to the power of X would be
64:21 - 8 there's a square root function
64:27 - sqrt let's find the square root of how
64:31 - about 81 the square root of 81 is 9 if
64:36 - you ever need to find the natural
64:37 - logarithm of a number you can use the
64:39 - log function math.log let's set X to be
64:44 - 10 the natural logarithm of 10 is
64:47 - 2.3 if you need to do anything with
64:50 - trigonometry there's s cosine and
64:52 - tangent functions
64:54 - let's begin with sign s n within this
64:58 - function you will place radians I'll set
65:01 - X to be
65:02 - 45 so Z is going to be
65:05 - 0.85 so that's
65:08 - s let's do cosine which is
65:12 - cosos
65:14 - 0.52 then
65:17 - tangent
65:20 - T and that is
65:22 - 1.61 let's change X to
65:26 - be 3.21
65:28 - again to find the absolute value of a
65:31 - number you can use the absolute value
65:34 - function
65:35 - math.abs
65:37 - it's basically going to give you the
65:39 - same number but it's going to be
65:41 - positive the absolute value of - 3.21 is
65:46 - 3.21 basically we're eliminating the
65:48 - negative
65:49 - sign to find the sign of a number you
65:52 - can use the sign function
65:54 - s i g
65:56 - n so the sign of -
65:59 - 3.21 is1 If This Were a positive number
66:03 - it would be one if it's
66:05 - zero then the sign is zero here's a
66:08 - pretty helpful method we can find the
66:11 - maximum or minimum value from a set of
66:14 - values or variables let's set Z to be
66:18 - one y will stay as two and X will be
66:22 - three I will create a new variable named
66:25 - Max it will store the maximum value from
66:28 - these three
66:29 - variables math.
66:33 - Max comma separate each of the variables
66:36 - x y z then display the maximum within
66:39 - our console.log method the maximum value
66:43 - from these three variables is three then
66:46 - there's Min for the
66:49 - minimum let
66:51 - Min do min so the minimum of these three
66:56 - variables is one all right everybody so
66:59 - that's math it's a built-in JavaScript
67:02 - object that provides a collection of
67:05 - properties which was pi and d and
67:08 - methods such as round truncate power
67:12 - methods related to trigonometry and Max
67:15 - and Min methods they're pretty helpful
67:17 - if you ever need them and well that is
67:19 - what math is in
67:22 - JavaScript hey hey what's going on
67:24 - everybody so in today's video we're
67:26 - going to create a random number
67:27 - generator but first I need to explain
67:29 - how to create a random number in
67:31 - JavaScript let's store our random number
67:33 - within a variable which we will name
67:36 - random num to create a random number in
67:39 - JavaScript we can use the random method
67:42 - of math math. random method this will
67:46 - generate a random number between zero
67:49 - and one uh but it looks like we forgot
67:51 - to Output our random number so let's do
67:53 - do that with
67:55 - console.log console.log random num this
67:58 - will generate a random number between
68:00 - zero and one it will give us a number
68:03 - with a long decimal portion most likely
68:05 - let's say we would like to roll a
68:07 - six-sided dice I need a random number
68:09 - between 1 and six not including the
68:12 - decimal portion so the first step is
68:15 - that we will multiply math. random *
68:19 - 6 what this will do is give us a random
68:21 - number between 0 and 6 exclusive now I
68:25 - don't want the decimal portion I would
68:27 - like a whole integer we'll enclose this
68:29 - equation with the floor method of math
68:33 - math. floor then we will enclose our
68:37 - equation so now we have oops it looks
68:40 - like I misspelled math it should be
68:41 - Capital there so far a random number is
68:44 - going to be between zero and five so
68:47 - there's
68:48 - zero and there's
68:51 - five but I need one through six well we
68:54 - can increase the minimum by adding plus
68:56 - one or whatever you want the minimum to
68:58 - be so now that should give us a random
69:01 - number between one and
69:03 - six there's
69:06 - six and there's one for a random number
69:09 - between 1 and 100 I can set the maximum
69:12 - to be 100 math. random * 100 + 1 so now
69:17 - the number is going to be between 1 and
69:20 - 100 if you're looking for a random
69:22 - number between a certain range let's say
69:25 - 50 and 100 well we're going to change
69:27 - our
69:28 - equation just to make this easier to
69:30 - read I'm going to set two constants
69:33 - const Min what's the minimum let's say
69:35 - 50 and the max const max will be 100
69:41 - let's replace 100 with our maximum and
69:44 - one with our minimum there's one
69:47 - additional change we need to make for
69:49 - example our random number is
69:52 - 139 we're multiplying math. random times
69:56 - 100 our maximum then adding an
69:59 - additional 50 to it so one change we're
70:02 - going to make is that we will subtract
70:04 - our minimum from our maximum then I will
70:07 - surround this portion of our equation
70:09 - with the set of parentheses just to
70:10 - force operator precedence now the random
70:13 - number should be between 50 and 100 so
70:16 - depending on the range of numbers you're
70:17 - looking for you can change the minimum
70:19 - and the maximum all right now with that
70:22 - out of the way let's create our random
70:23 - number generator let's go to our HTML
70:26 - file I will create a
70:30 - button the ID will be my button the text
70:35 - on the button will be roll we will roll
70:37 - a six-sided dice within our CSS
70:41 - stylesheet I will set the text of the
70:44 - body of our document the font family I
70:47 - will set to be verdana cuz I like that
70:52 - font two to Center align everything to
70:55 - make this easy I will set text align
70:58 - Center all right we're getting somewhere
71:01 - let's work on the button I will select
71:03 - the ID of my button I will change the
71:07 - font size of the button to be three em
71:10 - meaning
71:11 - 300% I'll add a little bit of padding
71:14 - within our button 5 pixels by 25
71:17 - pixels and I will set the Border radius
71:21 - to be 5 pixels
71:25 - just to smooth the
71:26 - corners we're also going to need a label
71:28 - so let's go back to our HTML file I will
71:32 - add a
71:33 - label with an ID of my
71:38 - label within our CSS stylesheet I will
71:41 - select the ID of my label then change
71:45 - the font size to be 3 em so be sure to
71:49 - save your CSS file save your HTML file
71:54 - then within our JavaScript file we will
71:57 - need to get our button and the label
72:00 - we'll store those within some
72:02 - constants const my button equals
72:07 - document. getet element by ID the ID of
72:12 - the element we're getting is my
72:17 - button then we will need to get my label
72:22 - my label
72:24 - the ID is my
72:27 - label let's set a minimum const Min
72:32 - equals I'll set that to be one as if
72:34 - we're rolling a six-sided dice const Max
72:38 - equals
72:39 - 6 then let random num we'll declare a
72:44 - random number variable but not assign it
72:46 - quite yet okay when we click on the
72:48 - button we'll execute a function we will
72:52 - take my button
72:54 - with the unclick attribute I will set
72:57 - this equal to a function what's the
73:00 - function going to do it's going to roll
73:02 - a random number random num equals math.
73:07 - random times our
73:12 - maximum we'll enclose this equation with
73:15 - math. floor to round it math.
73:19 - floor then add our
73:22 - minimum then we will change the text
73:24 - content of my label to display it my
73:28 - label. text content equals our random
73:33 - num when we click on the button it
73:35 - should roll a random number uh what are
73:38 - we missing not a
73:40 - number oh okay it looks like I made a
73:42 - mistake I forgot to add a set of print
73:44 - this is after
73:45 - random there we go I'm going to put the
73:48 - number on a new line so within our HTML
73:51 - file I'm just going to add a Break Tag
73:54 - there we go let's save everything roll
73:56 - again so I roll a 6 3 1 2 5 3 let's say
74:01 - we would like to roll three dice not
74:03 - just one we'll make a few
74:06 - changes I will replace my label with
74:09 - label one for the
74:11 - ID then I'm going to add a break after
74:14 - okay let's copy our label paste it two
74:17 - times we'll need labels two and
74:21 - three I'll also give the labels a class
74:24 - of my
74:27 - labels we can apply CSS styling to an
74:30 - entire class to make it easy all right
74:33 - within our CSS stylesheet let's replace
74:35 - the ID of my label with the class of my
74:41 - labels be sure to save all of your files
74:44 - then within our Javascript file let's
74:47 - replace my label with label one the ID
74:52 - is label one
74:54 - copy this line of code then we need
74:56 - labels two and three label two label
75:02 - three let's rename random num as random
75:05 - num
75:07 - one copy it paste it two times then we
75:10 - need random number two random number
75:14 - three within our function for our button
75:17 - change random num to be random num one
75:20 - copy this line paste it two times then
75:23 - we need random number two random number
75:26 - three we'll change the text content of
75:29 - my label to be label
75:31 - one equals random num one copy this line
75:36 - paste it two times change one to
75:38 - B2 then for the third line change one to
75:42 - be three what we'll do now is generate
75:44 - three random numbers between 1 and six
75:47 - as if we're rolling three dice 232 361
75:52 - 225 all right everybody that's how to
75:54 - create a random number generator in
75:58 - JavaScript Hey so uh what's going on
76:01 - everybody today I got to explain if
76:03 - statements so in JavaScript if a
76:06 - condition of our choosing is true we can
76:08 - execute some code if it's not true we
76:11 - can do something else that's how to put
76:13 - it simply for example let's say we have
76:15 - a user's age let age equals
76:21 - 25 to write an if statement we can type
76:23 - if a set of parentheses then a set of
76:26 - curly braces within the set of
76:28 - parenthesis we can check a condition
76:30 - let's check to see if our age variable
76:34 - is greater than or equal to 18 if this
76:38 - condition is true we can execute
76:40 - whatever code is within the set of curly
76:42 - braces if this condition is true let's
76:46 - console.log a
76:48 - message you are old enough to enter
76:53 - enter this site my age is 25 this
76:57 - condition is true we will execute this
76:59 - code within the curly braces you are old
77:02 - enough to enter this site what if my age
77:05 - was
77:07 - 13 well if this condition is true we
77:11 - don't do this we don't execute it we
77:13 - skip over it if you would rather take a
77:16 - different course of action if you would
77:18 - rather do something else you can write
77:20 - an else
77:22 - clause
77:23 - if this is not true we will do whatever
77:26 - is within the else Clause let's display
77:28 - a different
77:30 - message
77:31 - you must be 18 plus to enter this site
77:39 - my age is
77:40 - 13 we will end up displaying you must be
77:43 - 18 plus to enter this site basically
77:46 - speaking if this condition is true do
77:49 - this else if not do this instead
77:53 - it's kind of like a fork in the road
77:56 - which path are we going to take here's
77:57 - another example let's say we have
78:00 - variable time time will be in hours in
78:03 - military time if our time is 9 as in 9
78:09 - a.m. let's write an if
78:12 - statement if
78:15 - time is less than 12 as in noon then
78:21 - console.log
78:25 - good
78:27 - morning else if it's after 12 that means
78:30 - it's at least the
78:32 - afternoon
78:36 - console.log good
78:40 - afternoon the time is 9: as in 9:00 a.m.
78:43 - good morning what if our time was 14
78:47 - like 1400 in military time well then we
78:50 - will display good afternoon
78:54 - conditions also work very well with
78:56 - Boolean variables let's create a Boolean
79:00 - variable is
79:03 - student if you're a student say true if
79:06 - not then
79:08 - false now with a Boolean variable if you
79:10 - need to check the value with an if
79:13 - statement you can just place the Boolean
79:15 - variable within the condition
79:18 - itself the condition either evaluates to
79:21 - be true or false
79:23 - if is student is true then
79:30 - console.log you are a
79:33 - student
79:35 - else
79:39 - console.log you are not a
79:43 - student is student equals false we will
79:47 - execute the else Clause you are not a
79:50 - student If This Were true will execute
79:53 - the if Clause you are a
79:57 - student you can even create nested if
80:00 - statements this time we will have two
80:02 - variables let age equals some age and
80:07 - let has license as in a driver's
80:10 - license uh that's how to spell
80:13 - license has license will either be true
80:16 - or false so in the United States you
80:20 - need to be at least 16 years old to have
80:22 - your Li
80:24 - we'll check that
80:26 - first if age is greater than or equal to
80:31 - 16 let's
80:35 - console.log you are old enough to
80:41 - drive
80:43 - else
80:49 - console.log you must be 6 plus to have a
80:57 - license if I changed my age to
81:02 - 15 well I'm not old enough to have a
81:05 - license at least in the United States it
81:08 - might vary depending on your country let
81:09 - me know in the comments section how old
81:11 - you have to be to get a driver's license
81:13 - I'm kind of curious you can use another
81:15 - if statement within an if statement
81:18 - after we check to see if somebody is old
81:20 - enough to have a license let's check to
81:22 - see if they do have a license or
81:24 - not so I will add another if statement
81:27 - within our if statement pay attention to
81:30 - the
81:32 - indentation
81:34 - if has
81:36 - license since we're checking a Boolean
81:39 - variable that is going to be the
81:41 - condition itself it evaluates to be true
81:43 - or false if has license
81:49 - console.log you have your
81:55 - license else again pay attention to the
81:59 - indentation
82:03 - console.log you do not have your license
82:09 - yet my age is 15 I don't have a license
82:13 - this is the
82:14 - result you must be 16 plus to have your
82:17 - license since this condition is false we
82:20 - skip over everything within curly Braes
82:23 - entirely if I set my age to be
82:27 - 18 you are old enough to drive but I
82:30 - don't have a license that's set to false
82:33 - you do not have your license yet so we
82:36 - execute this condition so we enter
82:38 - anything within this set of curly braces
82:41 - we display this message then check this
82:43 - if statement my condition is false then
82:47 - we will execute the else
82:48 - Clause if I set has license to be true
82:53 - well then you are old enough to drive
82:55 - you have your
82:56 - license all right now I need to discuss
82:58 - else if
83:00 - statements we will keep our age variable
83:03 - we have our if
83:05 - statement if age is greater than or
83:08 - equal to 18 then we will
83:13 - console.log you are old enough to enter
83:18 - this
83:20 - site else
83:25 - console.log you must be 18 plus to
83:30 - enter this site my age is 18 I can enter
83:34 - this site if my age was 12 I can't enter
83:37 - the site if there's any other conditions
83:40 - you want to check before reaching your
83:42 - else statement you can add an else if
83:46 - Clause then you can check another
83:48 - condition let's check to see if
83:50 - somebody's age is less than zero your
83:54 - age can't be below zero let's let the
83:56 - user know
83:59 - console.log your age can't
84:02 - be below
84:05 - zero I will set my age to
84:09 - be1 that's not
84:11 - possible your age can't be below zero
84:15 - since this condition is false we skip
84:17 - over this Clause then move on to the
84:19 - next condition else if this condition is
84:22 - true execute this clause which it was
84:26 - then it's not necessary to go to the
84:27 - else statement because we already
84:29 - executed one of these Clauses you can
84:31 - add as many else if statements as you
84:33 - would like let's add another else if
84:37 - let's check to see if somebody is over
84:39 - 100 years
84:41 - old age is greater than or equal to
84:46 - 100
84:50 - console.log you are too old to enter
84:54 - this
84:56 - site okay now pay attention to this it's
84:59 - really important my age will be
85:03 - 101 you are old enough to enter this
85:06 - site so why didn't we execute this
85:09 - Clause our age is greater than or equal
85:11 - to 100 the order of our Clauses does
85:14 - matter we start at the top and work our
85:17 - way down and check all the conditions on
85:19 - the way down so with our first statement
85:21 - this if state
85:23 - age is greater than or equal to 18 101
85:27 - is greater than or equal to 18 we will
85:29 - execute this clause and skip over
85:32 - everything else that comes after even
85:34 - though this response is more appropriate
85:36 - for what we're looking for we still skip
85:38 - over it even though this is true because
85:40 - we executed this one first so I would
85:42 - recommend that we move this Clause to
85:45 - the beginning and change it to an if
85:47 - statement first let's check to see if
85:50 - age is greater than or equal to
85:52 - 100 else if age is greater than or equal
85:56 - to 18 so this should work as intended
85:59 - our age is 101 you are too old to enter
86:03 - the site let's add another lsif Clause
86:07 - so to check to see if two values are
86:09 - equal you got to use the comparison
86:11 - operator which is two equal signs let me
86:13 - give you a
86:15 - demonstration else
86:17 - if let's check to see if somebody's age
86:21 - is directly equal to zero so be sure
86:25 - you're using two equal signs for a
86:26 - comparison not one one equal sign is the
86:29 - assignment operator you want two equal
86:32 - signs to see if two values are
86:34 - equal if somebody's age is exactly zero
86:38 - will display a custom
86:40 - message you can't enter you were just
86:46 - born if somebody's age is zero they're a
86:49 - baby or an infant so let's set our our
86:52 - age to be
86:54 - zero you can't enter you were just born
86:58 - this condition is false we skip this
87:00 - Clause this condition was true we
87:02 - execute this clause and Skip everything
87:04 - else that comes after using all this
87:07 - code let's work on an exercise we're
87:09 - going to create a text box and a button
87:11 - so somebody can submit their age then
87:13 - depending on what they enter we will
87:14 - display a message so within our HTML
87:17 - file we'll create a few things let's
87:20 - create a label the text on the label
87:23 - will be enter your
87:26 - age let's add a break after then a text
87:31 - box the label will be input the type
87:34 - will be
87:36 - text the ID will be my
87:41 - text I'll add a
87:43 - break we'll create a submit
87:46 - button button type equals
87:51 - submit
87:52 - the ID will be my
87:55 - submit the text on the button will be
88:00 - submit I will also create a paragraph
88:03 - element the ID let's say is
88:08 - result element to display a result all
88:12 - right that is everything we'll need so
88:14 - we can't see the paragraph element quite
88:16 - yet the text content of the result
88:19 - element will be one of these lines of
88:21 - text so let's go back to our index file
88:25 - we'll create our elements I will set
88:27 - them to be
88:28 - constants
88:30 - const my
88:33 - text equals document. getet element by
88:39 - ID the ID is going to be my
88:44 - text and
88:46 - const my submit that's the submit button
88:50 - document. getet element by ID the ID is
88:54 - going to be my
88:56 - submit then
88:58 - lastly result
89:01 - element
89:02 - const result element equals document.
89:06 - getet element by ID the ID is result
89:10 - element let's scoot these if statements
89:13 - down when I click on the button we will
89:15 - execute a function the button is named
89:18 - my
89:20 - submit my submit onclick attribute
89:24 - equals a function when we click on the
89:27 - button what are we going to do let's
89:29 - take all of our if else if and else
89:32 - Clauses cut them then paste them within
89:36 - the function for the button when we
89:38 - click on the button then we will check
89:40 - our age let's set this variable to be
89:44 - undefined then we will get our age from
89:47 - the text box age
89:50 - equals my
89:52 - text. value get the value from the text
89:56 - box and assign it to age but remember
89:59 - when we get text from a text box it's a
90:01 - string data type we need to typ cast it
90:03 - to a number so we will set age to
90:07 - equal then use the number function to
90:10 - convert it to a number then we can check
90:13 - our age we'll replace console.log with
90:16 - the text content of the result element
90:19 - result element. text
90:22 - content equals our message I'll use a
90:26 - template literal so I'll use back
90:29 - ticks let's copy our text paste it
90:32 - within the template literal then I will
90:35 - delete the console.log message so we'll
90:38 - just follow this pattern result element.
90:41 - textcontent
90:42 - equals our
90:50 - message
91:10 - all right let's see if this works so we
91:13 - will type in our age let's say I'm 25
91:15 - press
91:16 - submit and we have one problem let's see
91:19 - what's going
91:20 - on oops okay so I forgot to add a set of
91:22 - parentheses after the function let's add
91:26 - that let's say I'm 25 press submit you
91:29 - are old enough to enter the site let's
91:32 - say I'm 12 you must be 18 plus to enter
91:35 - the site what if I'm
91:37 - 101 you are too old to enter the site
91:40 - what if I'm zero you can't enter you
91:42 - were just
91:43 - born I'm negative 1 your age can't be
91:47 - below zero all right everybody so that
91:50 - is everything you need to know to to get
91:52 - started working with if statements in
91:56 - JavaScript hey uh so today I'm going to
91:58 - explain the checked property in
92:00 - JavaScript the checked property
92:02 - determines the checked state of an HTML
92:05 - checkbox or a radio button element by
92:08 - examining this property we can determine
92:10 - if a check boox is checked or a radio
92:13 - button is selected in this program if I
92:15 - were to not select any of these buttons
92:17 - we have a different result within our
92:20 - HTML file we will create an input
92:23 - element the type is going to equal
92:28 - checkbox then for the ID I will set this
92:32 - equal to my
92:35 - checkbox and here is our checkbox we
92:39 - should probably add a label so that
92:40 - people know what this is
92:43 - for so the
92:45 - label I will set the four attribute to
92:48 - be my
92:50 - checkbox
92:52 - what's the label going to say let's say
92:55 - subscribe like a subscribe button
92:58 - utilizing the four attribute if the four
93:00 - attribute is the same as the ID when we
93:03 - click on the label it should still
93:05 - select the
93:07 - checkbox all right let's add a break
93:10 - then we will create some radio
93:12 - buttons we will again need an input
93:15 - element the type this time will not be a
93:19 - checkbox it will be radio for the ID
93:24 - this will be a Visa button I'm going to
93:27 - abbreviate button to BTN so pay
93:30 - attention to
93:32 - that then I will create a label for this
93:35 - radio
93:36 - button we will set the four attribute to
93:39 - be the same as the
93:42 - ID then the text will be
93:46 - Visa I'm going to add a
93:50 - break okay let's copy this radio button
93:53 - paste it two
93:54 - times we'll change the second visa to be
93:59 - MasterCard let's change the ID first
94:02 - Master
94:04 - Card let's copy the ID paste it within
94:07 - the four attribute of the second
94:10 - label then change the text Master
94:15 - Card then the third ID will be PayPal
94:20 - button
94:22 - then change the four
94:23 - attribute and the text
94:26 - PayPal so with radio buttons they should
94:29 - all be within the same group currently
94:31 - they're not so I can select all of them
94:33 - if I would like we should only be able
94:36 - to select one from any group we will
94:38 - group these radio buttons by their name
94:40 - attribute they should all have the same
94:42 - name the name let's say is card so let's
94:46 - copy this attribute and paste it within
94:49 - the other input elements now we should
94:51 - only be able to select one and that
94:54 - appears to work lastly let's create a
94:57 - submit
94:58 - button we are creating a button the text
95:01 - will be
95:04 - submit the type is
95:06 - submit and for the ID the ID will be my
95:11 - submit I will create a paragraph element
95:15 - will populate it with some text
95:17 - depending if subscribe is checked or not
95:19 - same thing goes with our r
95:22 - buttons I will create two paragraphs
95:24 - after our
95:25 - button the ID on the first
95:28 - paragraph let's name sub result there
95:32 - will be no text content to begin with
95:35 - we'll change the text content of our sub
95:37 - result paragraph with some text that
95:40 - states if the user is subscribed or not
95:42 - we'll create another paragraph for the
95:44 - radio buttons again there's going to be
95:46 - no text content I'll set the idea this
95:50 - paragraph to be payment
95:52 - result now before we move to our
95:54 - JavaScript file I'm just going to edit
95:56 - the CSS on the button to make it a
95:58 - little bit bigger so you guys can read
95:59 - it so the ID of that button was my
96:03 - submit we are selecting an ID my submit
96:07 - I will set the font size to be 1
96:12 - em and that's probably good enough uh
96:15 - maybe I'll add one more break after the
96:18 - Subscribe button and the PayPal radio
96:20 - button
96:22 - just so that it's not as
96:26 - cramped that's decent enough okay so be
96:30 - sure to save your CSS file your HTML
96:33 - file then we are now within our
96:35 - Javascript file what we're going to do
96:37 - now is get these elements by their ID
96:40 - and store them within constants so
96:42 - they're easier to work with okay let's
96:44 - start with our checkbox so the checkbox
96:46 - had an ID of my
96:49 - checkbox const my check checkbox be sure
96:52 - to pay attention to the capitalization
96:55 - feel free to change that if you would
96:57 - like just be sure it's consistent with
96:59 - what you have currently with your HTML
97:00 - elements we are accessing the document
97:03 - of our web page get element by
97:07 - ID the ID is going to be my
97:12 - checkbox and that's it so let's get the
97:14 - other elements we have my
97:17 - checkbox then we have our Visa button
97:22 - const Visa button get element by ID Visa
97:27 - button then let's repeat this with our
97:29 - MasterCard button again pay attention to
97:32 - the capitalization it's pretty
97:36 - important then we have our PayPal
97:41 - button we need our submit button
97:45 - next my
97:49 - submit then our paragraph
97:51 - elements sub
97:58 - result then payment
98:02 - result all right here are all the
98:04 - constants that we'll need so when we
98:06 - click on the submit button we will
98:09 - execute a function so we are taking my
98:12 - submit that's the name of the button dot
98:15 - on click I keep on spelling on lick on
98:19 - click equ equal a function parentheses
98:23 - curly braces when we click on the button
98:26 - what are we going to do we recently
98:29 - learned about if statements we will
98:30 - first check the checked property of the
98:33 - Subscribe button we'll place it within
98:34 - an if
98:36 - statement so to create an if statement
98:38 - it's if parenthesis krly braces we are
98:41 - examining my checkbox that's the
98:44 - Subscribe button dot checked property
98:48 - this will evaluate to be true or false
98:52 - if this is true we will execute this
98:54 - code if not we do something else if
98:57 - somebody is subscribed let's change the
99:00 - text content of our sub resultes
99:02 - paragraph So sub result we are accessing
99:06 - the
99:07 - text content to equal maybe I'll use a
99:12 - template
99:14 - literal you are
99:20 - subscribed
99:22 - else the user is not
99:25 - subscribed let's copy this line paste
99:28 - it you are not subscribed Let's test
99:33 - this if I click on the check boox then
99:36 - press the submit button it states that I
99:38 - am subscribed you are subscribed if I
99:41 - were to refresh the page I don't click
99:43 - the Subscribe button press submit you
99:46 - are not subscribed all right we know
99:48 - that that works let's move on to the
99:50 - radio button
99:52 - first we will check to see if somebody
99:54 - selected
99:55 - Visa we are accessing the Visa radio
99:59 - button if Visa
100:01 - button. checked if this is
100:04 - true we are changing the text of the
100:07 - payment result paragraph payment result.
100:11 - text content
100:14 - equals you are paying with
100:19 - Visa
100:24 - let's see if that works I'll select Visa
100:27 - press submit you are paying with
100:31 - Visa all right let's
100:33 - add else
100:36 - if the next radio button is Mastercard
100:38 - button if this is checked MasterCard
100:42 - button.
100:44 - checked then we will change the text
100:46 - content of the payment result to be you
100:49 - are paying with
100:54 - MasterCard you are paying with
100:57 - MasterCard let's add another else if
100:59 - statement else
101:01 - if this time we are examining the PayPal
101:05 - button PayPal button. checked if this is
101:10 - true change the text content of the
101:12 - payment result to be you are paying with
101:18 - PayPal you are paying with PayPal
101:22 - else if none of these radio buttons are
101:25 - checked we will change the text content
101:28 - of the payment result to
101:32 - be you must select a payment
101:39 - type I will press submit without
101:41 - selecting a payment type you must select
101:44 - a payment
101:45 - type all right everybody so that is the
101:47 - checked property by examining the
101:49 - checked property of of an HTML checkbox
101:52 - or a radio button element we can
101:54 - determine if those elements are checked
101:56 - or not and well that is the checked
101:59 - property in
102:02 - JavaScript hey y welcome back so today
102:05 - I'm going to explain the trary operator
102:08 - in JavaScript you write a condition then
102:10 - add a little question mark kind of like
102:12 - you're asking a question how is this
102:14 - useful well it's a shortcut to if and
102:17 - else statements it helps to assign a
102:20 - variable based on a condition you write
102:22 - a condition then use the tary operator
102:25 - as if you're asking a question you can
102:27 - write some code if that condition is
102:29 - true what would you like to do then add
102:32 - a colon then some code if that condition
102:35 - is false here's an example let's say we
102:38 - have a user's age age equals
102:42 - 21 I would like to check to see if
102:44 - somebody's age is greater than or equal
102:46 - to 18 age greater than equal to 18 then
102:52 - I will use the tary operator kind of
102:54 - like I'm asking a question is age
102:57 - greater than or equal to 18 if this
103:00 - condition is true we can write some code
103:03 - I'll create a string your and
103:07 - adult then what if the condition is
103:09 - false I'll add a
103:12 - colon then I will execute this code if
103:14 - the condition is false you're a
103:19 - minor
103:22 - this is helpful if you need to assign a
103:24 - variable based on a
103:26 - condition so I'll create a new variable
103:29 - let message
103:32 - equals then we write our condition so if
103:35 - age is greater than or equal to
103:37 - 18 if that's true we will assign this
103:41 - string to this variable this message if
103:44 - it's false instead we will assign this
103:46 - one it's an alternative to writing
103:49 - something like this
104:00 - so with programming we try not to repeat
104:03 - ourselves if we don't have to here we're
104:06 - assigning message to be either this
104:08 - string or this one our trary operator is
104:12 - more condensed and I feel like it's
104:14 - easier to read than that if else
104:17 - statement it's a shortcut if you choose
104:19 - to use it I tend use it a lot then just
104:22 - to test it let's console.log our message
104:25 - just to be sure that it works fine
104:27 - console.log our
104:30 - message our age is 21 you're an adult if
104:33 - my age was 12 you're a minor let's go
104:37 - over a few more
104:39 - exercises this time we will have let
104:42 - time time will be between 1 and 24 like
104:46 - a 24-hour clock I will set time to be 6
104:51 - 16 16 I think would be 400
104:54 - p.m. we will assign a
104:57 - greeting equals then we'll write a
105:00 - condition is time less than
105:03 - 12 then tary operator like we're asking
105:06 - a question if the time is less than 12
105:10 - it's the morning good
105:12 - morning we'll use a colon then write
105:15 - some code if it's
105:17 - false if it's not the morning it's at
105:19 - least the afternoon
105:21 - good
105:23 - afternoon then let's
105:25 - console.log our
105:29 - greeting good afternoon because it's 400
105:32 - p.m. what if it was 99 good morning all
105:35 - right I have a few more
105:39 - examples what if somebody's a student
105:42 - let is student this will be true or
105:46 - false if you're a
105:48 - student let message message equals now
105:53 - with the Boolean variable you can just
105:55 - write the Boolean variable
105:57 - itself is student question mark are you
106:00 - a student if so you are a student if not
106:07 - you are not a
106:13 - student then let's
106:16 - console.log our
106:19 - message
106:20 - we are a student you are a student let's
106:23 - set this to be false you are not a
106:26 - student it's very easy to read with
106:28 - Boolean variables you write the Boolean
106:31 - variable then add a question
106:33 - mark here's a challenge round we will
106:36 - have a purchase amount as if somebody's
106:39 - buying something if somebody's purchase
106:41 - amount is over
106:43 - $100 they get a 10% discount so
106:47 - let purchase amount equal let's say
106:52 - $125 or some other unit of currency of
106:54 - you're
106:56 - choosing
106:58 - let
107:00 - discount equals then the condition is
107:04 - we're checking if purchase amount is
107:07 - greater than or equal to $100
107:10 - $100 question
107:12 - mark is somebody's purchase amount
107:15 - greater than
107:16 - $100 if so they will get a 10%
107:21 - discount
107:23 - colon if that's false they get no
107:25 - discount
107:28 - zero so then let's display the total
107:33 - console.log I'll use a template
107:36 - literal your total is I need a dollar
107:40 - sign for our unit of currency then I
107:42 - need a placeholder so I need another
107:44 - dollar
107:45 - sign the purchase
107:49 - amount minus
107:51 - us the purchase
107:54 - amount multiplied by let me scoot over a
107:59 - little the
108:02 - discount divided by
108:05 - 100 so the total since we get a
108:09 - discount is
108:12 - $112.50 if our purchase amount was
108:16 - $99 well we don't get that discount your
108:18 - total is 99
108:20 - all right everybody so that's the trary
108:22 - operator it's a shortcut to an if else
108:25 - statement it helps to assign a variable
108:27 - based on a condition you write a
108:29 - condition add a question mark as if
108:31 - you're asking a question do this code if
108:34 - that condition is true else do this code
108:37 - if that condition is false I'll be using
108:39 - the tary operator a lot just because I
108:41 - feel like it's helpful and well that is
108:44 - the tary operator in
108:48 - JavaScript hey what's going on everybody
108:50 - so today I'm going to explain switches a
108:52 - switch can be an efficient replacement
108:55 - to using many else if statements here's
108:57 - an example of a program I wrote without
108:59 - using a switch we have a day day will
109:02 - normally be the number 1 through 7 if
109:05 - day equals 1 will console.log it is
109:08 - Monday which you can see here if day was
109:10 - two well then it's Tuesday all the way
109:12 - up to 7 which is Sunday I do have an lse
109:16 - statement that states our day variable
109:18 - is not a day for for example if I set
109:21 - day to be I don't know like a string of
109:23 - pizza well then Pizza is not a day but
109:26 - it really should be if you find yourself
109:29 - using a lot of else if statements I
109:31 - would instead recommend creating a
109:33 - switch here's how to create one we'll
109:36 - keep our day variable I'll set that to
109:39 - be one to create a switch we will type
109:41 - switch parentheses curly braces within
109:45 - the parenthesis of the switch we will
109:47 - place a variable or a value what are we
109:50 - examining let's examine our day
109:54 - variable we examine a value against
109:57 - matching cases to create a case type
110:00 - case then a value or a condition we will
110:03 - see if day equals 1 so day case one are
110:09 - these two values equal if they are then
110:11 - we can do something we can execute some
110:13 - code so add a colon then any code
110:17 - underneath this case will be executed if
110:19 - there's a match between our value or
110:22 - variable day and this value so let's
110:28 - console.log it is
110:31 - Monday then be sure to add a break I'll
110:34 - demonstrate why you need break later so
110:37 - day is
110:39 - one it is Monday let's add another case
110:42 - for case two in case day equals 2 so
110:46 - let's copy and paste what we
110:49 - have case 2 it is
110:52 - Tuesday let's change day to B2 it is
110:56 - Tuesday all right let's do this all the
110:58 - way up to case
111:18 - seven
111:22 - all right we have cases 1 through 7 if I
111:25 - change day to be seven well then it is
111:29 - Sunday you can also add a default case
111:32 - in case there are no
111:34 - matches now what if we set day to be
111:37 - Pizza which doesn't make sense well
111:40 - there are no matching cases once we
111:43 - review all of the cases and there's no
111:45 - matches we exit the switch you also have
111:48 - the capability to add a default case in
111:51 - case there are no
111:53 - matches what's the default behavior of
111:56 - the switch if there's no matching cases
111:59 - let's
112:02 - console.log I should probably use a
112:04 - template literal for this if we're
112:05 - inserting a
112:06 - variable our day
112:09 - variable is not a day so now we should
112:13 - execute this default case Pizza is not a
112:17 - day all right now the reason that that
112:20 - we have these break statements is to
112:21 - break out of the switch once we have a
112:23 - matching case I'll demonstrate what
112:26 - happens if we remove
112:31 - these all right let's set day to be two
112:35 - as in Tuesday it is Tuesday it is
112:38 - Wednesday it is Thursday it is Friday it
112:39 - is Saturday it is Sunday two is not a
112:41 - day so the reason that we have these
112:43 - breaks is to break out of the switch if
112:46 - we don't have them once we have a
112:47 - matching case we will execute the code
112:50 - found within that space then Cascade
112:53 - down and execute any code that follows
112:55 - after including code within different
112:57 - cases so that's why you want these break
113:00 - statements after each case to break out
113:02 - of the switch let's go over a more
113:05 - complex
113:06 - example let's say we have a test score
113:09 - variable between 0 and 100 my score will
113:13 - be 92
113:15 - 92% I will also create a letter grade
113:18 - variable
113:20 - which we will declare but not aign I'm
113:23 - going to examine our test score so
113:26 - another way in which you can write a
113:27 - switch is something like
113:29 - this I'm going to examine the value of
113:33 - true against matching cases which
113:35 - contain a condition so case then I'll
113:39 - write a
113:40 - condition is test score greater than or
113:43 - equal to 90 as in
113:47 - 90% this condition will eval valuate to
113:50 - be true or false if true is equal to
113:53 - true we will do some code if this is
113:56 - false we skip over it if our test score
113:59 - is greater than or equal to 90 let's
114:01 - assign our letter grade variable to
114:03 - equal an a then be sure to
114:08 - break then I'm going to test this with
114:12 - console.log we will display our letter
114:16 - grade we have an A let's do this for
114:19 - anything greater than 80 the user will
114:21 - receive a
114:22 - B test score greater than or equal to 80
114:26 - letter grade will equal
114:28 - B let's change our test score to be 85
114:32 - the user receives a
114:33 - b let's follow this pattern 70 will be a
114:41 - c yep
114:44 - C 60 will be a
114:48 - d
114:55 - 60 is D then for the default
114:59 - case I will set letter grade to be
115:04 - F letter grade equals
115:08 - F if I set my test score to be 33% so
115:13 - with the test score of 33 the letter
115:15 - grade is f all right everybody so that's
115:17 - a switch if you find you're using a a
115:19 - lot of lse if statements I would
115:21 - recommend using a switch instead it's
115:23 - not bad if you have a few but if you
115:25 - have many I would use a switch instead
115:27 - and well everybody those are switches in
115:32 - JavaScript hey it's me again so today
115:35 - I'm going to explain string Methods in
115:37 - JavaScript string Methods allow you to
115:39 - manipulate and work with text also known
115:42 - as strings in this example I have a
115:45 - username username equals a string of
115:48 - text why don't don't you go ahead and
115:50 - create a username variable and set it
115:52 - equal to either your username if you
115:54 - have one or your full name strings have
115:57 - different built-in methods where we can
115:59 - manipulate this text one way or another
116:02 - here's a few examples suppose I would
116:04 - like to get the first character of the
116:06 - string I can use the Char at method type
116:10 - a string or a variable containing a
116:12 - string then follow this with DOT by
116:15 - adding a DOT we are accessing any
116:18 - Properties or methods that the string
116:20 - has follow this with Char at then list
116:24 - an index the first character is zero the
116:28 - second character would be one so get the
116:31 - character at index zero that should be a
116:34 - b however if I were to run this let's go
116:36 - to our Dev
116:38 - tools uh nothing appears to happen
116:40 - because it's going to return a single
116:42 - character let's place that within
116:44 - console.log just so that we can see
116:47 - it cut this code and and paste it within
116:50 - console.log so the first character in my
116:53 - string is B but depending on what you
116:56 - wrote it might be different for you the
116:59 - character at index one would be R then
117:03 - two is O so that is the Char at
117:07 - method the index of method will return
117:10 - the index of the first occurrence of a
117:13 - character let's find the first
117:15 - occurrence of n o it will return an
117:17 - index and then again I have to
117:21 - console.log whatever is
117:24 - returned so let's place this method
117:27 - within
117:28 - console.log what is the index of the
117:30 - first occurrence of an o that would be
117:33 - two 0 1 2 otherwise for the last index
117:39 - let's change the method to be last index
117:42 - of which would be four 0 1 2 3
117:48 - 4 so the length property this isn't a
117:51 - method to get the length of a string
117:54 - type the string or a variable containing
117:56 - the
117:57 - string dot length this isn't a method
118:01 - but it's very similar so the length of
118:04 - my username is seven characters 1 2 3 4
118:09 - 5 6 7 so that's how to get the length of
118:12 - a
118:13 - string now we are going to trim the
118:16 - string maybe there's a bunch of white
118:18 - spaces after or
118:20 - before I will reassign username equal to
118:25 - let's take our username variable Dot and
118:28 - use the trim method to trim any Whit
118:30 - space then I will
118:34 - console.log my
118:37 - username there's my name and there's no
118:39 - wh space
118:41 - after let's add some wh space before our
118:44 - name yep and there's no white
118:46 - space to make my name I'll uppercase
118:49 - I can use the two uppercase
118:53 - method now my string is all
118:55 - uppercase then there's two lowercase to
118:58 - make all of the characters
119:01 - lowercase there's repeat to repeat a
119:05 - string within the parenthesis of the
119:07 - method how many times do you want to
119:09 - repeat the string if I were to type
119:11 - three we'll repeat the string three
119:14 - times to determine if a string starts
119:17 - with a given character we can use the
119:19 - starts with method this will return a
119:22 - Boolean I will store that within a
119:24 - result
119:25 - variable username
119:28 - dot starts with
119:32 - method we will check to see if the
119:34 - string starts with an empty
119:37 - space then let's
119:40 - console.log the
119:42 - result that is false my username does
119:45 - not begin with the space but what if it
119:47 - did I'll add one then that returns true
119:51 - this could be useful within an if
119:54 - statement if
119:57 - result if the string starts with a whit
119:59 - space let's
120:03 - console.log your
120:05 - username can't begin
120:09 - with an empty
120:12 - space else let's
120:18 - console.log the
120:20 - username my username has a whit space in
120:23 - the beginning your username can't begin
120:25 - with Whit
120:27 - space if that were false then we will
120:29 - display my username so that is the
120:32 - starts with method there's also ends
120:38 - withth does my username end with the
120:41 - Whit
120:42 - space it does not but what if it
120:45 - did your username can't end with an
120:50 - empty
120:51 - space next is the includes method does
120:54 - the string contain an empty
120:57 - space I'll split my username into two
121:00 - your first and last name would work as
121:02 - well your username
121:04 - can't include an empty space currently
121:08 - it does your username can't include an
121:11 - empty space if it didn't then we pass
121:14 - the test we will display the
121:16 - username all right now this time we will
121:19 - create a phone number let phone number
121:23 - equals make up some phone number
121:25 - including dashes 2 3 4 5 6
121:30 - 7890 so this phone number is a string
121:33 - even though it contains numbers because
121:35 - strings can contain numbers but we treat
121:37 - them as
121:38 - characters let's eliminate all the
121:40 - dashes in our phone number here's one
121:43 - way in which we can do that let's
121:45 - reassign our phone number equals our
121:49 - phone number we will use the replace all
121:53 - method which character are we replacing
121:56 - let's replace any dashes comma then the
122:00 - character to replace the dashes with or
122:02 - whatever you put for the first
122:04 - character we will replace all dashes
122:07 - with no
122:08 - characters then let's
122:10 - console.log our phone number and that
122:14 - should eliminate all of the
122:16 - dashes or otherwise you could replace it
122:19 - with a different character let's do a
122:20 - forward slash so 1 2
122:22 - 3456 SL
122:26 - 7890 there's also the pad start method.
122:30 - pad
122:32 - start the first value within the pad
122:35 - start method is a specified length how
122:38 - many characters should the string be I
122:41 - would like the string to be 15
122:43 - characters long then for the second
122:45 - value make sure to comma separate it we
122:48 - can pad the start of the string with a
122:50 - given character let's say
122:53 - zero so the result is a couple zeros
122:56 - than our phone
122:58 - number pad this string with zeros until
123:01 - it's 15 characters long if I were to set
123:04 - this to 20 then we would have more zeros
123:07 - there's more
123:08 - padding then there's pad
123:12 - end pad the end of the string with this
123:15 - character until the string is 15
123:17 - characters long
123:19 - all right everybody so those are string
123:21 - Methods they allow you to manipulate and
123:23 - work with text also known as strings
123:26 - we'll have more practice with these in
123:28 - the future and well those are a few
123:30 - useful string Methods in
123:35 - JavaScript hey everybody so today I'm
123:37 - going to explain string slicing in
123:39 - JavaScript string slicing is the process
123:42 - of creating a substring from a portion
123:45 - of another string this won't alter the
123:47 - original string just just to demonstrate
123:49 - let's create a constant for our full
123:52 - name go ahead and type in your full name
123:56 - or you can copy me I'm going to extract
123:59 - the first name from my full name and
124:01 - create a new string out of it so I'll
124:03 - declare this let first name equals Now
124:08 - to create a substring we can follow this
124:10 - formula we take our string in this case
124:13 - our full name dot then use the built-in
124:17 - slice method
124:19 - slice then we can list a starting and
124:22 - ending index where would we like to
124:24 - begin so the first character has an
124:27 - index of zero we'll start at the
124:29 - beginning index0 comma where are we
124:33 - going to end 0 1 2 this isn't
124:37 - necessarily going to work and let me
124:39 - demonstrate so let's
124:42 - console.log our first name so my first
124:46 - name is BR so the ending index index is
124:49 - actually exclusive in my full name we're
124:51 - ending at o but we don't include it
124:53 - within our substring because the ending
124:55 - index is exclusive I'll increase the
124:58 - ending index to three that should
125:00 - include one more character which it does
125:03 - now let's get the last name let last
125:06 - name equals again following this formula
125:10 - take our original string use the
125:13 - built-in slice method State the
125:15 - beginning index 0 1 2 3 4 mine will be
125:20 - four yours may be different depending on
125:22 - what your name is and the ending index
125:26 - four 5 6 7 and remember that the last
125:29 - index is exclusive so I'm going to
125:31 - increase that to be eight then we'll
125:34 - display our last name
125:36 - console.log last
125:38 - name and there's my last name so the
125:42 - reason that I set the beginning index to
125:44 - be four and not three is because we'll
125:46 - include that space within the result as
125:48 - you can see here if you're going to be
125:51 - creating a substring from some position
125:53 - all the way to the end you don't
125:54 - necessarily need an ending index I'm
125:57 - going to remove the ending index and
125:59 - this should work the
126:01 - same all right what if I need the first
126:04 - character in the
126:05 - string let first Char meaning character
126:10 - equals take our string we will use the
126:13 - slice method for the first character you
126:16 - can use 0 comma 1
126:19 - then let's display our first
126:22 - character and in my example mine is B
126:26 - for the last character let last
126:31 - character full name do
126:35 - slice we can use a negative index even
126:38 - if you're using a negative index you'll
126:40 - begin at the end then by decreasing the
126:43 - number you'll work your way towards the
126:45 - beginning so the last character in my
126:47 - name is is
126:49 - e -2 would be
126:53 - de 3 is o four is c for code negative
126:58 - indices work as well with these specific
127:01 - numbers that I've listed they're only
127:03 - going to work if my name is exactly this
127:06 - what if I were to change my first name
127:07 - to be instead of bro broseph like
127:12 - Joseph then let's display our first name
127:15 - then our last
127:17 - name
127:20 - first name bro last name f which is not
127:24 - correct to make this program more
127:27 - Dynamic we can combine string slicing
127:29 - with the index of method we'll search
127:32 - the string for the first instance of a
127:34 - space then depending on where that space
127:37 - is we'll take the first part of our full
127:39 - name and create a substring for the
127:40 - first name anything after the space will
127:43 - be our last name so let's turn these
127:45 - lines into comments we don't need them
127:47 - anymore
127:50 - let first name equals again take our
127:55 - full
127:56 - name do
127:59 - slice we'll begin at the beginning index
128:02 - zero now where do we end we're not going
128:04 - to count the number of characters this
128:06 - time we're going to calculate it the
128:08 - ending index will be take our full
128:12 - name dot then use the index of
128:16 - method where's the first index of a
128:21 - space so that is the ending position
128:24 - wherever there's a space then we'll
128:26 - display our first
128:29 - name uh let me get rid of our last name
128:32 - there
128:35 - brosive now for the last
128:37 - name let last name
128:40 - equals let's copy this line of code
128:43 - paste
128:44 - it the beginning index will be f full
128:48 - name. index of
128:51 - space you can list an ending index but
128:53 - we don't need to we would like to
128:55 - extract every character that comes after
128:57 - this position so we don't need an ending
129:00 - index all right let's see if this
129:02 - works brosi space code we're including
129:07 - that space so to remedy this I can add
129:10 - plus one find the first index of a space
129:14 - then start in the position after that's
129:16 - why we're adding plus one then give me
129:18 - every letter that comes after and that
129:20 - works just fine broi code all right
129:25 - let's go over an
129:27 - exercise this time we will list an
129:30 - email const email equals why don't you
129:33 - go ahead and type in your email I'll
129:35 - make one up for me bro 1@gmail.com
129:40 - I'll extract the first part of my email
129:43 - to be stored as a
129:45 - username let username
129:48 - equals again we're going to take our
129:51 - string email do use the slice method
129:55 - where are we going to begin we'll begin
129:57 - at index zero that's the beginning of a
129:59 - string where will we end we'll end
130:02 - wherever the at symbol is but we need to
130:04 - search for it we'll use the built-in
130:07 - index of method of a string email. index
130:12 - of what are we searching for we are
130:14 - searching for the at
130:17 - symbol
130:19 - and let's see if this works
130:23 - console.log our
130:25 - username yep bro
130:28 - one then let's get the
130:32 - extension let extension equals we can
130:37 - copy this line of code paste it make a
130:39 - few
130:41 - changes this substring will begin where
130:44 - the last one
130:47 - ended then again
130:50 - console.log the
130:53 - extension at
130:55 - gmail.com again like I said before I
130:57 - would like to begin after this
131:00 - index I will add plus
131:03 - one my username is br1 my extension is
131:07 - gmail.com all right everybody so that's
131:09 - string slicing it's the process of
131:11 - creating a substring from a portion of
131:14 - another string when you create a
131:15 - substring you won't alter the original
131:19 - and I've proven that by setting this
131:20 - string to be a constant you can't change
131:22 - a constant to create a substring you
131:24 - take the string use the built-in slice
131:26 - method then you can list starting or
131:29 - ending indices and well everybody that
131:31 - is string slicing in
131:36 - JavaScript what's up everybody so in
131:38 - today's video I got explained the
131:40 - concept of method chaining in JavaScript
131:43 - method chaining is a programming
131:44 - technique it's where you call one method
131:47 - after another in one continuous line of
131:49 - code I'll give you two examples of the
131:51 - same program one that uses no method
131:53 - chaining and another that does then
131:55 - we'll be able to see some of the
131:57 - benefits of method chaining what we'll
131:58 - do in the first version of this program
132:00 - is create a variable for a username and
132:03 - I will ask the user for some input using
132:06 - window.
132:07 - prompt the text will be enter your
132:13 - username after typing in some
132:16 - username I would like to to trim any
132:18 - white space around the username take the
132:21 - first character make it uppercase take
132:23 - all of the other characters make them
132:25 - all lowercase and then display the
132:28 - output so this program will have a few
132:30 - steps let's reassign our username equal
132:34 - to
132:35 - username use the trim method to remove
132:37 - any wh space before or after the name
132:40 - then I will get the first character of
132:42 - my username to capitalize it we'll
132:44 - create a variable of let letter
132:48 - equals our username follow this with the
132:52 - Char at method the character at index
132:55 - zero letter is going to be a variable it
132:58 - will hold the first letter of my
132:59 - username to make my letter uppercase I
133:02 - will reassign it letter equals letter
133:06 - use the two uppercase method to make
133:10 - that letter uppercase now with the rest
133:12 - of the characters I would like to make
133:14 - them lowercase anything besides the
133:16 - first character
133:18 - I will create a separate variable for
133:20 - extra characters let's say extra chars
133:23 - short for characters equals take our
133:27 - original
133:28 - username use the slice method we will
133:31 - slice our username everything after the
133:33 - first character if my name was bro code
133:36 - and I created a slice of everything but
133:38 - the first character extra characters
133:40 - would be R code without the B so then
133:43 - let's take our extra characters make
133:45 - them all lowercase extra characters
133:47 - equals extra characters followed with
133:50 - the two lowercase
133:52 - method then we will combine the first
133:54 - letter which is uppercase and the extra
133:57 - characters which are lowercase then
133:59 - store them within our username username
134:02 - equals our
134:04 - letter plus the extra
134:07 - characters then we will display our
134:09 - username
134:11 - console.log our
134:13 - username so this program does have a lot
134:15 - of steps we will run this program
134:18 - enter your
134:19 - username I will enter a few whites
134:22 - spaces type in my name but I'll mix up
134:25 - the
134:29 - capitalization press okay and there's my
134:32 - username the first letter is uppercase
134:35 - the rest of the letters are lowercase so
134:37 - this program does work but it is a lot
134:39 - to write now with method chaining we can
134:42 - combine some of these steps together and
134:44 - avoid creating variables that we don't
134:46 - need such as letter and extra
134:49 - characters so with method training what
134:51 - we'll
134:52 - do is start to combine some of these
134:54 - steps after getting our username we will
134:57 - take our username equals take our
135:00 - username again use the trim method we're
135:03 - not going to end this method with a
135:04 - semicolon we're going to end it with a
135:06 - DOT to write another method after
135:08 - trimming the username get the character
135:11 - at index zero and then why sto there
135:13 - let's method chain again make that
135:16 - letter uppercase following the two
135:18 - uppercase method so this will work it's
135:21 - kind of like in a video game how you can
135:22 - have a combo well this is a three hit
135:24 - combo boom boom boom take our username
135:27 - trim it get the first character and then
135:30 - make an uppercase all in one line of
135:32 - code not only that let's use some string
135:34 - concatenation we need to take the rest
135:36 - of the characters of my username make
135:38 - them all lowercase then combine them
135:40 - together again let's take our username
135:43 - use the trim method method chain the
135:46 - slice method slice the string after the
135:50 - first character then method chain again
135:53 - use the two lowercase
135:57 - method and that should
135:59 - work
136:01 - console.log my
136:04 - username we're using a lot less lines of
136:07 - code and I'll zoom out just so you can
136:09 - see
136:10 - everything Ander your username I'll
136:12 - throw in some white spaces then mix up
136:15 - the
136:16 - capitalization
136:20 - and that has appeared to work so that's
136:22 - method chaining it's a programming
136:24 - technique where you can call one method
136:26 - right after another in one continuous
136:28 - line of code it's like a video game
136:31 - combo so to say so in this case trim our
136:34 - username give me the first character and
136:36 - then make it uppercase we did method
136:38 - chaining here here and then we combined
136:41 - the results using string catenation
136:43 - which is something separate entirely by
136:46 - using method chaining this help helps
136:47 - you avoid creating named variables but
136:49 - if your method chain is too long it can
136:52 - become difficult to read like here I am
136:54 - kind of pushing the limits and well
136:56 - everybody that is Method chaining in
137:02 - JavaScript hey yeah it's a me so today
137:05 - I'm going to explain logical operators
137:07 - there's three of them and or not they're
137:11 - used to combine or manipulate Boolean
137:14 - values Boolean values if you remember
137:17 - are true true or false let's create a
137:19 - program const temp meaning temperature
137:23 - what I would like to do is see if my
137:25 - temperature Falls within a certain range
137:28 - this will be in Celsius let's say the
137:29 - temperature is 20°
137:32 - C without using any logical operators
137:36 - let's write this if our temp is greater
137:41 - than
137:42 - zero then we will
137:46 - console.log
137:48 - the weather is
137:51 - good else
137:54 - if the temperature is less than or equal
137:59 - to 30 30° C we will also output the
138:04 - weather is
138:07 - good
138:10 - else the weather is bad currently my
138:14 - temperature is 20° C the weather is good
138:18 - what if I were to change this to
138:19 - something ridiculous like 200° C well
138:24 - the weather is obviously not good Earth
138:26 - probably got hit by an asteroid or
138:28 - something or if I were to change my
138:30 - temperature to like 100° C well the
138:35 - weather isn't good either I don't know
138:37 - maybe the sun disappeared so what I want
138:39 - to do is output the weather is good only
138:43 - if my temperature Falls between the
138:45 - range of zero and 30 so we're going to
138:49 - change this program if our temperature
138:51 - is greater than
138:54 - zero and we'll check another condition
138:58 - and our temperature is greater than or
139:00 - equal to 30 then we can eliminate this
139:02 - elif
139:03 - Clause now let's check the temperature
139:06 - our temperature is -100° C well the
139:10 - weather is bad if our temperature was
139:12 - 200° C the weather is also bad in order
139:17 - for us to execute this if statement both
139:20 - these conditions need to be true this
139:22 - one and this one to join two conditions
139:26 - you use double and per and meaning and
139:29 - if our temperature was 25 well that
139:32 - falls within our range the weather is
139:35 - good this is true and this is true so we
139:39 - will execute this code if one of these
139:42 - was false we don't execute it at all
139:45 - we'll skip over it so that that is the
139:47 - and logical operator you can check more
139:50 - than one condition you can check one
139:53 - thing and something else now there's or
139:58 - which is double straight
140:00 - bars with the or logical operator at
140:03 - least one of these conditions needs to
140:05 - be true this has to be true or that has
140:08 - to be true if I were to run the same
140:10 - program well then the weather is good
140:13 - let's change the temperature to
140:15 - 250 the weather is good but it's not it
140:18 - shouldn't be so let's rewrite this
140:20 - program if our temp is less than or
140:25 - equal to zero or the
140:28 - temperature is greater than 30 then the
140:31 - weather is bad else the weather is good
140:36 - our temperature is 250 the weather is
140:39 - bad netive -250 the weather is also bad
140:44 - so with the orological operator we're
140:46 - checking more than one condition is this
140:49 - true yes it is -250 is less than zero or
140:54 - is this condition true this one is false
140:58 - but since at least one of these is true
141:00 - we will execute this code then we will
141:02 - cover the not logical operator let's
141:05 - create a new
141:06 - program const is sunny is it sunny
141:10 - outside this will be true or
141:13 - false we will create an if
141:16 - statement our condition will be is sunny
141:20 - is this true if it is we will
141:25 - console.log it is
141:29 - sunny else we will
141:33 - console.log it
141:36 - is
141:37 - cloudy is sunny is set to true it is
141:40 - sunny If This Were false then it is
141:44 - cloudy using the not logical operator we
141:47 - can flip a Boolean from True to false or
141:50 - false to
141:51 - true I will precede this Boolean with
141:54 - the not logical operator which is an
141:56 - exclamation point now we're checking if
141:59 - it's not
142:00 - Sunny then we will console. log it is
142:05 - cloudy else it is sunny is it not sunny
142:10 - outside it is cloudy let's change this
142:13 - to be true it is sunny so basic basally
142:17 - the not logical operator it'll change
142:20 - true to be false and false to be true
142:22 - all right everybody so that's a short
142:23 - topic today logical operators they're
142:26 - used to combine or manipulate Boolean
142:28 - values use and to check to see if at
142:31 - least two conditions are true with or at
142:33 - least one condition needs to be true and
142:35 - with not not we'll do the opposite and
142:38 - well that is an introduction to logical
142:40 - operators and
142:43 - JavaScript so uh yeah it's me again so
142:47 - today I'm going to explain the strict
142:49 - equality operator which is represented
142:51 - by three equal signs before we dive in
142:54 - let me make a few important distinctions
142:56 - a single equal sign is the assignment
142:58 - operator you usually see it when you
143:00 - assign a value to a variable the
143:02 - comparison operator two equal signs is
143:05 - used to compare two values to see if
143:07 - they're equal now the strict equality
143:09 - operator has a whopping three equal
143:11 - signs it not only Compares if two values
143:13 - are equal but if they have the same data
143:15 - type as well let me give you a
143:17 - demonstration suppose we have a constant
143:20 - named Pi Pi equal
143:24 - 3.14 pi in my example has a data type of
143:27 - number I'll create an if statement we
143:31 - will check if
143:33 - Pi is equal to the string
143:38 - 3.14 if it is let's
143:43 - console.log that is pi
143:48 - else we will
143:50 - console.log that is not Pi is the number
143:54 - 3.14 equal to the string
143:57 - 3.14 well according to JavaScript that
144:00 - is pi that's because we're using the
144:02 - comparison operator we don't care about
144:04 - the data type we only care about the
144:06 - value are the values equal now if I was
144:10 - using the strict equality operator which
144:12 - is three equal
144:14 - signs well then JavaScript tells me that
144:17 - this is not Pi because with the strict
144:20 - equality operator not only do we compare
144:23 - the values but we also compare the data
144:25 - types as well these values are both
144:28 - 3.14 but this one is a number data type
144:31 - and we're comparing it to a string so
144:33 - they don't match technically if we were
144:36 - strictly comparing the number 3.14 to
144:39 - the number 3.14 well then we have a
144:42 - match that is pi one case where this is
144:45 - pretty helpful is when you accept user
144:47 - input because user input tends to be a
144:50 - string data type and then just as an
144:52 - extra measure you can use the strict
144:54 - equality operator and then be sure that
144:56 - the value is a number data type there's
144:59 - also the inequality operator it will
145:02 - return true if two values are not equal
145:05 - so let's
145:07 - take shut up this time we will examine
145:10 - if Pi does not equal the string
145:15 - 3.14 if these are not equal this
145:19 - condition will evaluate to be true so
145:22 - this is not Pi else this is pi is the
145:27 - number
145:28 - 3.14 not equal to the string
145:31 - 3.14 well that is Pi still using the
145:35 - inequality operator these values are
145:38 - still the same the inequality operator
145:40 - will return false then there's the
145:43 - strict inequality operator an
145:45 - exclamation point and two equal signs
145:48 - are the values or the data type
145:51 - different so in this example that is not
145:55 - Pi they have the same values but the
145:58 - data type is different if I turned my
146:01 - variable Pi into a
146:03 - string well that is pi now the string
146:07 - 3.14 stored within Pi does equal the
146:11 - string 3.14 so this condition turns out
146:14 - to be false so we execute the L state
146:17 - it might take you a little bit of time
146:19 - to get used to this and that's okay it
146:21 - is a little odd but just in case you see
146:24 - these in the future you'll at least be
146:26 - familiar with them from now on we will
146:28 - try and use the strict equality operator
146:30 - if we can and well everybody that is the
146:33 - strict equality operator and I guess
146:34 - well the inequality operator and strict
146:36 - inequality operator in
146:40 - JavaScript hey what's going on everybody
146:43 - so today I'm going to explain while
146:44 - Loops in JavaScript a while loop Loop
146:47 - will repeat some code while some
146:50 - condition is true take this program for
146:52 - example we have a variable username if
146:55 - our username is equal to an empty string
146:59 - then we will console.log you didn't
147:01 - enter your name else console.log hello
147:05 - username if I run this program then
147:07 - check within our console well we didn't
147:10 - enter our username now if I were to
147:12 - change this program to a while loop
147:15 - while our usern name is equal to an
147:17 - empty string repeat this line of code
147:19 - Forever Until this condition is no
147:22 - longer true then when we escape the
147:24 - while loop we can print the message
147:27 - hello username this is what happens when
147:29 - I run the
147:31 - program we just print this line of code
147:34 - forever and my computer is probably
147:36 - going to
147:39 - crash I can't seem to
147:42 - stop help okay I think it broke a while
147:46 - loop will continue some code infinitely
147:49 - while this condition is true if it no
147:51 - longer is true then we can escape the
147:53 - while loop if I were to set my username
147:56 - to be something other than an empty
148:00 - string well we never actually enter the
148:03 - while loop we skip over it entirely and
148:06 - go straight to console.log at the end so
148:09 - what we do first is check the condition
148:11 - if it's true then we get sucked into the
148:14 - wild Loop and execute this forever you
148:16 - usually want some sort of way to exit
148:18 - the while loop while you're in it
148:20 - otherwise you get what is known as an
148:22 - infinite Loop so let's rewrite this
148:24 - program let username equal an empty
148:28 - string while our username is strictly
148:30 - equal to an empty
148:32 - string let's ask the user to enter in
148:35 - their name username equals I'll use a
148:38 - window
148:44 - prompt enter your name
148:47 - name okay let's try this again enter
148:50 - your name I'll press okay we can't seem
148:53 - to close this window until we type in
148:55 - something you can see I'm clicking on
148:57 - okay nothing's happening I will type in
149:00 - my name press okay then our console
149:04 - displays hello whatever your name is so
149:07 - that's a benefit of a wild Loop repeat
149:09 - some code until this condition is no
149:12 - longer true since we populated our
149:14 - username our username was not not equal
149:17 - to an empty string we filled username
149:19 - with some
149:20 - characters what if I instead press
149:22 - cancel hello null null means no value
149:26 - username will equal null if I press the
149:29 - cancel button let's append to this
149:31 - condition or username is strictly equal
149:36 - to
149:37 - null now I shouldn't be able to continue
149:40 - until I type in
149:44 - something and I can escape if I hit canc
149:47 - cancel while one of these conditions is
149:50 - true execute this code forever let's
149:54 - type in our name
149:56 - again and now we can escape the while
149:58 - loop there's also another variation of a
150:01 - while loop it's known as a do while loop
150:04 - how that works is that you can move
150:05 - while and the condition to the
150:08 - end so we'll place it here then preedee
150:12 - the set of curly braces with do so we
150:14 - will always execute this code at least
150:17 - once then check the condition at the end
150:20 - using a do while loop I don't
150:22 - necessarily need to set the username I
150:24 - can set it to be
150:28 - undefined if I set my username to be
150:30 - undefined then use a standard while
150:35 - loop we never execute the while loop our
150:39 - username equals undefined it doesn't
150:41 - equal an empty string or the value null
150:44 - so we skip over the while loop entirely
150:47 - so a do while loop is another variation
150:49 - of a while loop do the code first then
150:52 - check the condition at the end so
150:54 - there's a few different ways you can
150:55 - write the same
150:56 - program all right let's go over another
151:00 - example we'll create three variables let
151:03 - logged in logged in will be false to
151:07 - begin
151:08 - with to log in we have to type in a
151:11 - matching
151:13 - username I will declare a username but
151:15 - not a sign it and a
151:19 - password so let's create a while loop
151:23 - how do we escape the while loop let's
151:25 - say while not I'll use the not logical
151:29 - operator while not loged in once we're
151:34 - logged in once this is true we escape
151:37 - the while loop we will ask a user for
151:39 - their username username equals
151:42 - window.
151:45 - prompt
151:47 - enter your
151:50 - username let's ask for a password as
151:55 - well password equals enter your
152:02 - password I'll add an if statement within
152:04 - the wild Loop we'll check to see if our
152:08 - username is strictly equal to then make
152:11 - up some
152:13 - username my
152:15 - user
152:20 - name and if our
152:23 - password is strictly equal to some
152:26 - password like my
152:29 - password if our username and password
152:32 - both match these values then we can log
152:35 - in so logged in will equal
152:40 - true then I'll console.log a
152:42 - confirmation
152:44 - message you are logged
152:50 - in else let's console.log another
152:55 - message invalid
153:00 - credentials please try again all right
153:05 - let's see if this
153:06 - works enter your
153:09 - username I am just going to press okay
153:12 - enter your password I'll type in
153:15 - something legitimate so I'll type in my
153:17 - password uh invalid credentials please
153:20 - try again that's because I didn't type
153:22 - in a
153:23 - username I'll type in my username be
153:27 - sure it matches my
153:30 - username my
153:32 - password and we are now logged
153:35 - in so since we set logged in to be true
153:39 - when we go back to the beginning of our
153:40 - while loop this condition is no longer
153:43 - true while not logged in but since we're
153:46 - logged in we escape the while loop now
153:49 - another variation of this is the do
153:51 - while loop let's cut the condition along
153:54 - with while add it to the end then add do
153:58 - to the
153:59 - beginning so we'll check to see if we're
154:01 - logged in at the end it pretty much does
154:04 - the same thing but with one exception in
154:07 - this program how this is different is
154:09 - that I can set logged in to be true to
154:11 - begin with we still receive that prompt
154:14 - I'll type in my username type in my
154:16 - password we are currently logged in so
154:18 - we do not continue the wild Loop if we
154:21 - used a standard while
154:23 - loop and We Begin by being logged in
154:27 - well we never ask for any of this we
154:28 - never enter the while loop while not
154:31 - logged in do all of this but since we
154:34 - are logged in we don't do any of it all
154:36 - right everybody so that's while Loops
154:38 - repeat some code while some condition is
154:41 - true while some condition remains true
154:44 - execute this code forever and until it's
154:46 - no longer true and well everybody that's
154:49 - while Loops in
154:52 - JavaScript all right what's going on
154:54 - people so today I'm going to discuss for
154:56 - Loops a for Loop will repeat some code a
154:59 - limited amount of times with the while
155:01 - loop a y Loop can repeat some code
155:03 - infinitely with the for Loop we can do
155:05 - something a certain or limited amount of
155:08 - times here's an example let's say we
155:10 - would like to display the word hello
155:12 - three times with the for Loop we can
155:14 - write something like this now to create
155:16 - a for Loop type four parenthesis curly
155:18 - braces within the set of parenthesis we
155:21 - have up to three statements the first is
155:23 - that we can create a temporary counter
155:26 - much like we're assigning a variable
155:28 - let's create a counter named I let I I
155:31 - is a common naming convention for
155:33 - counters within a loop I meaning index
155:36 - so let I equal what number would we like
155:39 - to start at let's start at zero then
155:42 - semicolon this is the first statement
155:45 - we'll create a counter to keep track of
155:47 - the number of iterations the next
155:49 - statement is the condition in which we
155:51 - continue the for Loop we will continue
155:53 - this for loop as long as I is less than
155:56 - or equal to two that's if we're going to
155:59 - execute this for loop three times 0 1 2
156:03 - that would be a total of three then the
156:05 - third statement we can increment or
156:07 - decrement our counter I so let's
156:09 - increment our counter by one during each
156:11 - iteration by typing
156:13 - i++ and that's a for Loop I is set to
156:17 - zero will continue as long as I is less
156:19 - than or equal to two then during each
156:21 - iteration we will increment I by 1 that
156:24 - means we will execute this for loop
156:26 - three times what are we going to do when
156:28 - we execute each
156:30 - iteration let's
156:32 - console.log
156:35 - hello so this should display the word
156:37 - hello three times yep hello three now if
156:41 - I were to instead console.log I we can
156:44 - see what I is
156:46 - so during the first iteration I our
156:49 - counter is zero then one then two if I
156:53 - wanted to count up to 10 I could change
156:55 - my condition to be this I is less than
156:59 - 10 so we begin at zero then we count up
157:03 - to 9 so if I need 1 through 10 I'll set
157:07 - I in the beginning to be 1 then continue
157:10 - as long as I is less than or equal to 10
157:14 - there so we have numbers 1 through 10
157:16 - using a for Loop we can even increment
157:19 - by a different number instead of
157:20 - incrementing our counter by one let's
157:23 - increment by two so I + = 2 so then we
157:28 - should count up by twos 1 3 5 7 9 if I
157:34 - want to start at two I can change our
157:36 - counter to start at two count from 2 to
157:38 - 10 but increment by two 2 4 6 8 10 if we
157:44 - would like to count down let's start at
157:46 - 10 then count down to
157:48 - zero let I equal 10 will continue as
157:52 - long as I is greater than
157:55 - zero then iusus to
157:59 - decrement hey for fun after we escape
158:01 - the for Loop let's console.log happy New
158:05 - Year it's as if we're counting down to
158:08 - midnight on New Year's
158:09 - Eve 10 9 8 7 6 5 4 3 2 1 Happy New Year
158:15 - or we could count down by two i - =
158:20 - 2 10
158:22 - 8642 or three or whatever number 10741
158:27 - happy New Year or whatever number you
158:29 - want now I'm going to cover continue and
158:32 - break this time we will count to
158:35 - 20 we need a for Loop we'll create a
158:38 - counter let I equal I'll set I to be
158:42 - 1 that's our first statement our
158:45 - condition is is we'll continue as long
158:47 - as I is less than or equal to 20 then
158:51 - increment I by One during each
158:54 - iteration so to test this let's
158:58 - console.log
158:59 - I so we have the numbers 1 through
159:04 - 20 so with continue we can skip an
159:08 - iteration I'm going to write an if
159:13 - statement if I is equal to now there is
159:17 - a Superstition that 13 is an unlucky
159:20 - number let's say if I is equal to 13 we
159:23 - will skip that iteration I know it's a
159:25 - weird example so if I is equal to
159:29 - 13 let's continue continue will skip
159:32 - this iteration of the
159:34 - loop else we will
159:37 - console.log whatever I
159:39 - is so now when I run this program when I
159:42 - run this program we skip over 13 we jump
159:45 - from from 12 to 14 so if you ever need
159:48 - to skip an iteration you can use the
159:51 - continue
159:52 - keyword now there's break break will
159:55 - break out of the loop entirely we've
159:57 - seen this keyword in switches to break
159:59 - out of the switch if I equals 13 then
160:02 - just exit the for Loop entirely so in
160:05 - this example we count up to 12 but since
160:08 - I now equals 13 we break out of the loop
160:11 - entirely we don't continue the rest of
160:13 - the iterations all right everybody so
160:16 - those are four Loops you can repeat some
160:18 - code a limited amount of times there's
160:21 - up to three statements we can write we
160:23 - can create a temporary variable that
160:25 - serves as a counter a condition in which
160:28 - we should continue then we can increment
160:30 - or decrement our counter and those are
160:33 - four Loops in
160:36 - JavaScript hey what's going on everybody
160:39 - in this video we're going to create a
160:40 - number guessing game using JavaScript so
160:43 - why don't you go ahead and sit back
160:44 - relax and and enjoy the show all right
160:47 - let's get started everybody so the first
160:48 - thing that we're going to need is to set
160:50 - the minimum and the maximum numbers in
160:52 - our number guessing game so we'll create
160:54 - two constants const minum for the
160:59 - minimum I will set my minimum to be one
161:02 - but feel free to pick a different number
161:03 - if you would like then a maximum const
161:06 - Max num I will set my maximum to be 100
161:10 - so what we got to do is generate a
161:12 - random number between our minimum and
161:14 - our maximum
161:16 - inclusively so let's create another
161:18 - constant const answer then we'll
161:22 - generate a random number between 1 and
161:24 - 100 our minimum and our maximum to do
161:26 - that we can type math.
161:29 - random the random method of math will
161:32 - generate a random number between zero
161:34 - and 1 we will multiply this by within a
161:37 - set of parentheses the range between our
161:40 - maximum minus our
161:42 - minimum then add plus one
161:46 - let's see what we have so far just to
161:48 - test everything I'm going to
161:51 - console.log our
161:54 - answer okay let's inspect go to console
161:57 - here's my answer currently 56 point and
162:00 - then a bunch of decimal places after I
162:03 - will round our answer by enclosing this
162:05 - equation with math. floor to round
162:09 - down okay let's see what we get again 39
162:13 - 89 20 7 71 27 177 46 okay that seems
162:18 - like it's working what if we have a
162:21 - higher minimum let's say between 50 and
162:27 - 100 well I have 7 22 43 numbers that are
162:31 - below our minimum so if we have a
162:34 - minimum besides one I will add to the
162:37 - end of this equation our minimum
162:40 - again okay let's see if that works so if
162:43 - I need a random number between 50 and
162:44 - 100 this equation should work 97 80 79
162:50 - 52 all right that seems like it's
162:52 - working so this is the equation you'll
162:54 - need to generate a random number between
162:56 - your minimum that you set and your
162:58 - maximum but let's change our minimum
163:00 - back to one and make sure our maximum is
163:02 - 100 all right let's move on to step two
163:06 - we'll create a variable named attempts
163:08 - to keep track of the attempts it takes a
163:10 - user I will set attempts to be zero and
163:14 - let guess
163:16 - I will declare this variable but not
163:18 - assign it quite yet we'll take care of
163:19 - that later I will also create a Boolean
163:22 - variable named running and I will set
163:25 - this to be
163:26 - true the reason that we have the Boolean
163:28 - variable running is so that we can exit
163:31 - the game when it's over we'll set
163:33 - running to equal false so to keep the
163:35 - game running we'll use a while loop
163:38 - while running equals true now if this is
163:42 - a Boolean variable you don't necessarily
163:44 - need this portion equals true you can
163:47 - just set this to be while
163:49 - running while this Boolean is true keep
163:52 - the game going then when we want to exit
163:55 - the game we will set running to equal
163:59 - false so that will be at the
164:01 - end now we need to accept some user
164:04 - input I'll do this with the window
164:06 - prompt we will set our guest to equal
164:11 - window.
164:13 - prompt I'll use a template
164:16 - literal guess a
164:19 - number
164:21 - between I'll add a
164:23 - placeholder our
164:25 - minimum through add another placeholder
164:29 - our
164:30 - maximum all right to test this I'm going
164:33 - to
164:37 - console.log the type of
164:40 - guess as well as what guess is there's
164:42 - something I need to show you guess a
164:44 - number between one and 100 I'll guess
164:46 - something right in the middle 50 let's
164:49 - inspect go to console so my user input
164:52 - of 50 is a string data type we'll need
164:54 - to convert it to a number for
164:58 - comparisons so after we get our guess
165:01 - let's reassign it and typ cast it as a
165:04 - number
165:06 - type let's try that again guess a number
165:08 - between 1 and 100 I'll type 50 okay
165:12 - inspect console we have our guess of 50
165:15 - and it's a number data type what if you
165:17 - were to type in something that wasn't a
165:19 - number like a string of characters such
165:22 - as
165:23 - Pizza here's the
165:26 - result if you type cast some characters
165:28 - that are non-numeric you know the number
165:30 - Z through n you'll end up with not a
165:33 - number Pizza can't be converted to a
165:35 - number
165:36 - unfortunately I will delete this line of
165:38 - code we no longer need it I'll add an if
165:41 - statement there's a function to check to
165:43 - see if something is not a number
165:45 - is not a number
165:48 - function if our guess is not a number if
165:52 - this evaluates to be true let's add an
165:55 - alert window.
165:59 - alert please enter a valid
166:04 - number guess a number between 1 and 100
166:07 - what if I type
166:08 - pizza please enter a valid number now
166:11 - what if somebody types in a guess that's
166:13 - below our minimum or above our maximum
166:16 - I'll add an else if
166:18 - statement else if our guess is below our
166:23 - minimum or our guess is above our
166:30 - maximum will window. alert please enter
166:33 - a valid number again guess a number
166:36 - between 1 and 100 what if I type in 150
166:39 - that's above our maximum please enter a
166:42 - valid number please enter a number
166:44 - between 1 in 100 netive -1 please enter
166:48 - a valid number if the user's guess is a
166:51 - number and it's between our range
166:53 - between the minimum and the
166:57 - maximum we'll execute an L statement if
167:00 - they reach the L statement that means
167:01 - they have a valid number we'll increase
167:04 - our attempts variable by one attempts
167:07 - Plus+ to increment
167:10 - it if the
167:13 - guess if the yes is less than the answer
167:18 - then will window.
167:22 - alert too low try
167:29 - again else if the guess is greater than
167:34 - the
167:35 - answer will window.
167:39 - alert to high try again if the guess
167:43 - isn't lower than the answer and the
167:45 - guess isn't higher than the answer that
167:47 - means the guess must equal the answer
167:50 - within an else
167:52 - statement we'll congratulate the user
167:54 - they have the right answer
167:56 - window.
168:00 - alert
168:03 - correct the
168:05 - answer was and I should probably use a
168:09 - template literal for this if we're
168:10 - inserting
168:12 - variables the answer
168:16 - we'll let the user know how many
168:18 - attempts it took it took
168:22 - you the variable
168:24 - attempts then the word
168:30 - attempts at the end of our lse statement
168:32 - we'll move running equals false to
168:34 - within the lse statement at the end to
168:36 - exit the game we no longer want to play
168:39 - once we have the correct answer all
168:41 - right and this should work let's try it
168:44 - guess or not number between 1 and 100
168:46 - I'll guess something right in the middle
168:48 - 50 too low try again okay so the answer
168:51 - is between 50 and 100 75 too high so
168:56 - it's between 50 and
168:58 - 75
168:59 - 62 two
169:02 - low
169:04 - 68 two high so it's between 62 and
169:09 - 68
169:11 - 65 too
169:13 - high 6 three to
169:16 - low
169:18 - 64 yeah correct the answer was 64 it
169:21 - took you seven attempts and we can exit
169:25 - all right everybody so that is a number
169:27 - guessing game in
169:30 - JavaScript hey welcome back so today I
169:32 - got to explain functions in JavaScript a
169:35 - function is a section of reusable code
169:39 - you declare that code once and you can
169:40 - use it whenever you want all you have to
169:42 - do is call the function to execute that
169:45 - code here's an example we'll create a
169:47 - function to sing Happy Birthday whenever
169:50 - we call this function it's going to sing
169:51 - Happy Birthday so to declare a function
169:54 - you type function a unique function name
169:57 - let's name our function happy birthday
170:01 - because it's well the happy birthday
170:03 - function then you add a set of
170:05 - parentheses then you add a set of curly
170:06 - braces any code we write between this
170:09 - set of curly braces we can reuse
170:11 - whenever we want so what do we want to
170:13 - do exactly with this function I'll
170:15 - create the lyrics to my own happy
170:17 - birthday
170:18 - song
170:23 - console.log
170:24 - happy birthday to you let's repeat that
170:29 - again happy birthday dear
170:32 - you happy birthday to
170:35 - you trust me I'm going somewhere with
170:37 - this so we have a function when we run
170:40 - the program it currently doesn't do
170:42 - anything to execute this code within the
170:44 - function function we have to call the
170:46 - function by its name happy birthday then
170:49 - add a set of parenthesis so now we
170:52 - should execute this code yep happy
170:54 - birthday to you happy birthday to you
170:56 - happy birthday dear you happy birthday
170:57 - to you so to call a function you type
171:00 - the function name then you add a set of
171:02 - parentheses I like to think of the
171:04 - parentheses as two telephones talking to
171:06 - each other that's how I remember it so
171:09 - if I were to call this function again
171:11 - what do you think's going to happen well
171:14 - we're going to execute this function
171:16 - twice three times we'll execute it three
171:19 - times as many times as I want in fact
171:22 - that's what a function is it's a section
171:24 - of reusable code reuse it whenever you
171:27 - want you just have to call it you can
171:29 - send a function some values or variables
171:32 - let's change our happy birthday function
171:35 - I will turn this line into a template
171:37 - literal let's replace you with the
171:40 - placeholder then we'll add a
171:42 - username I'll add one one more
171:47 - line we'll use a template
171:50 - literal you are insert a
171:54 - placeholder age years
171:59 - old so when I run this program we have
172:02 - an uncaught reference error username is
172:04 - not defined at happy birthday so our
172:07 - happy birthday function doesn't know
172:09 - what our username is or the age so we
172:12 - can send some information to the
172:14 - function when we call it so within the
172:17 - set of parentheses what would we like to
172:19 - send this function let's send our
172:25 - name so whatever values you place within
172:27 - the function be sure to comma separate
172:29 - them so why don't you go ahead and send
172:32 - the happy birthday function a name and
172:35 - an age but there's one step missing
172:38 - these are known as arguments they're
172:41 - data that you send a function but you
172:43 - need a matching set of parameters within
172:46 - the parentheses of the Declaration in a
172:49 - way we can Define some temporary
172:51 - variables and they're all comma
172:53 - separated we will Define a username
172:55 - parameter as well as age now this
172:58 - function should work properly happy
173:00 - birthday dear bro code you are 25 years
173:03 - old so these are parameters and what you
173:06 - send to the function are arguments let's
173:10 - call the function but send different
173:13 - information happy
173:16 - birthday uh how about
173:18 - SpongeBob SpongeBob will be I don't know
173:21 - how old he is according to SpongeBob
173:22 - lore but let's say he's 30 years old
173:26 - happy birthday dear SpongeBob you are 30
173:28 - years
173:29 - old how about Patrick this time it's his
173:32 - birthday everybody gets a
173:36 - birthday Patrick will be
173:40 - 37 happy birthday dear Patrick you are
173:43 - 37 years old so that's a benefit of
173:46 - passing arguments to a function when the
173:49 - function receives this data it can do
173:51 - something with it now the order of the
173:53 - parameters does matter if I were to
173:55 - switch age and username here's what
174:00 - happens happy birthday dear 37 you are
174:04 - Patrick years old with the arguments
174:06 - that you're passing to your function
174:08 - you'll want to be sure that the
174:09 - parameters match up all right now I'm
174:12 - going to cover the return keyword we'll
174:14 - create a few other function examples
174:17 - we'll create a function to add two
174:18 - numbers function
174:21 - add then we'll need two arguments which
174:24 - we will name X and Y so when we invoke
174:28 - this function I would like to add X and
174:30 - Y together I'll create a temporary
174:33 - variable named result just to store the
174:36 - result result = x +
174:40 - y so I'm going to add two numbers
174:43 - together
174:45 - let's add two and three together and
174:47 - let's see what
174:49 - happens well nothing appears to happen
174:52 - well we can send some data back to the
174:54 - place in which we call a function but we
174:57 - need to use this return keyword let's
175:00 - return the result so 2 + 3 should be 5
175:04 - after this function resolves think of
175:07 - this function becoming the value five so
175:10 - we'll probably want to do something with
175:11 - that value I'll store that with within a
175:15 - variable let answer equal add 2 and
175:21 - three then let's
175:23 - console.log the
175:26 - answer which should be five when you
175:29 - return something from a function after
175:31 - you resolve the function think of it as
175:33 - becoming whatever is returned in this
175:36 - case it's our
175:38 - result or otherwise I can place this
175:41 - function within
175:42 - console.log if we don't plan to to store
175:44 - it at
175:46 - all so add two and three then display
175:50 - the result which is five there is a
175:52 - shortcut too you don't necessarily need
175:54 - to declare a variable within this
175:56 - function we could shorten this
175:59 - to return x + y that is also valid so
176:04 - that should return five okay let's
176:07 - create a subtract
176:10 - function function
176:13 - subtract
176:14 - will return x -
176:17 - y but we need a matching set of
176:20 - parameters because I forgot that okay
176:23 - let's see what happens when we subtract
176:25 - 3 from 2 that'll give us 1 Let's
176:29 - multiply
176:31 - function
176:33 - multiply we'll multiply X and Y
176:37 - together return x * y we will multiply 2
176:42 - * 3 which is 6
176:49 - divide we need parameters X and
176:52 - Y then return x /
176:56 - y then we will invoke the divide
176:58 - function pass into two and three and the
177:01 - result is 0.666 repeating let's go over
177:05 - a more complex example we'll create a
177:07 - function to determine if a number is
177:09 - even or
177:11 - odd here's the function
177:15 - function is
177:18 - even we have one parameter a number so
177:22 - when we invoke the function we'll have
177:23 - to pass in a number so when we receive a
177:26 - number how do we check to see if this
177:28 - number is even here's one solution we'll
177:31 - use an if
177:33 - statement if our
177:37 - number modulus 2 modulus gives you the
177:40 - remainder of any Division if this number
177:43 - divides by by two evenly if this is
177:46 - equal to zero and yes I'm using the
177:49 - strict equality operator I'm trying to
177:51 - use that more often if our number is
177:53 - divisible by two then let's
177:56 - return the Boolean value
177:59 - true else will return false
178:04 - okay let's
178:07 - console.log let's check to see if a
178:09 - number is even let's start with 10 is 10
178:13 - even that is true how about 11 that is
178:17 - false 12 12 is even so that's kind of
178:22 - cool if you would like a shortcut for
178:24 - this you can use the trary operator that
178:26 - would look something like this we are
178:29 - going to return then a condition what
178:31 - are we checking is our
178:34 - number modulus
178:36 - 2 strictly equal to zero question mark
178:40 - so that is the tary operator the
178:42 - question mark
178:44 - if it is true then we will return a
178:47 - Boolean value of true colon false if
178:51 - it's false is 12 even that is true is 13
178:56 - Even no it's not it's odd how about 14
179:00 - that is true all right last example I
179:03 - think we're probably getting the hang of
179:04 - this now we'll create a function to see
179:07 - if an email is
179:09 - valid function is valid email
179:15 - what kind of information are we going to
179:16 - send we'll set that up as a parameter we
179:20 - will need an email we'll invoke the is
179:23 - valid email function and pass in an
179:26 - email why don't you type in your email
179:28 - I'll just make one up bro
179:31 - fake.com so when we invoke this function
179:34 - this string of text will become our
179:37 - email we'll check to see if our email
179:40 - contains the at
179:42 - character we'll use an if
179:45 - statement if email and there's a
179:48 - built-in method for this the includes
179:51 - method if our email
179:55 - includes the at
179:58 - character then we will return true that
180:01 - is a valid email they have the ad
180:04 - character else we will return
180:08 - false is my email valid that is true
180:13 - let's remove the at character brof
180:16 - fake.com maybe it's a website or
180:19 - something that is false let's try
180:22 - another
180:23 - email again we're going to invoke the
180:25 - function is valid
180:27 - email
180:30 - elonmusk.com don't actually go there I
180:34 - don't know what's going to pop up uh
180:36 - that is not a valid
180:37 - email all right how
180:40 - about Zucker
180:42 - Borg
180:44 - ata.com
180:45 - that is a valid email it contains an at
180:49 - character and for something like this if
180:51 - we're returning either true or false we
180:53 - can use the tary
180:56 - operator
180:57 - return then our condition is we're going
180:59 - to check if our email includes the at
181:05 - character then add the tary operator if
181:08 - this is true return true else we will
181:12 - return false so these should be the same
181:15 - which they are all right everybody so
181:17 - that's an introduction to functions it's
181:20 - a section of reusable code you declare
181:23 - some code once and use it whenever you
181:25 - want you call the function to execute
181:27 - that code if you need to send your
181:29 - function some data you'll need a
181:31 - matching set of arguments and parameters
181:34 - and you can return something too with
181:35 - the return keyword we'll have more
181:37 - practice with this in the future don't
181:38 - worry and that is an introduction to
181:40 - functions in
181:42 - JavaScript
181:44 - hey what's going on everybody so today
181:46 - I'm going to explain variable scope in
181:48 - JavaScript variable scope is where a
181:51 - variable is recognized and accessible in
181:53 - this beginner's tutorial we'll be
181:55 - discussing the differences between a
181:56 - local scope and a global scope suppose
181:59 - we have a variable let X = 1 each
182:03 - variable name needs to be unique within
182:05 - that scope I couldn't declare another
182:07 - variable named X where I set X to equal
182:11 - 2 if I were to run this we have a syntax
182:13 - error
182:14 - identifier X has already been declared
182:16 - you can reuse the same variable names in
182:18 - your program as long as they're within
182:20 - different Scopes to demonstrate let's
182:23 - create two functions function Function
182:26 - One within function one we will declare
182:28 - a variable x x = 1 then we will
182:33 - console.log whatever X
182:35 - is then let's create function two by
182:38 - copying function one and then paste it
182:41 - function 2 x will equal 2 console.log
182:47 - x if I were to invoke Function
182:50 - One X = 1 if I were to invoke function 2
182:55 - well x =
182:57 - 2 so we have two variables with the same
183:00 - name in our program that's legal as long
183:03 - as they have different Scopes any
183:05 - variable declared inside of a function
183:08 - has a local scope or anytime you declare
183:10 - a variable within a set of curly braces
183:13 - there's no naming conflicts because
183:15 - they're within different Scopes that way
183:17 - you can declare variables with the same
183:19 - name which we've done with X now
183:22 - functions can't see inside of other
183:24 - functions within function two we will
183:26 - declare variable y equal 2 then
183:30 - console.log X within function one we
183:34 - will console.log
183:36 - y if I were to invoke function one we
183:39 - have an uncaught reference error why is
183:42 - not defined at Function One
183:44 - one functions can't see inside of other
183:46 - functions function one has no idea what
183:50 - Y is we've declared that within another
183:52 - function it's kind of like functions are
183:54 - neighboring houses you can't necessarily
183:57 - see inside of your neighbor's house
183:59 - function one has no idea what variable Y
184:02 - is likewise function two if I were to
184:04 - invoke it function two has no idea what
184:07 - X's each of these variables are declared
184:10 - inside of a function so they have a
184:12 - local scope
184:14 - a global scope for a variable is any
184:16 - variable declared outside of a function
184:18 - with Function One let's get rid of
184:22 - X and we will console.log X function two
184:26 - we will get rid of y console.log
184:29 - x if I were to declare a variable
184:32 - outside of these functions let x equal 3
184:35 - I'll invoke function one we'll display x
184:39 - x is three let's invoke function two x
184:42 - is three any variable declared outside
184:45 - of a function has a global scope it's
184:48 - available through the whole program a
184:50 - global variable is recognized and
184:52 - accessible from anywhere hey this is bro
184:55 - from the future I was editing this video
184:57 - and I thought of a really good analogy
184:59 - for Global variables let's say that a
185:02 - function is a house we live in function
185:04 - one and our neighbor lives in function
185:06 - two we can see inside of function one
185:09 - but we can't see inside of our
185:11 - neighbor's house at function two any
185:13 - anything that's declared in the global
185:14 - scope isn't found within any houses it's
185:17 - outside everybody can plainly see it
185:20 - it's kind of like a creepy stalker
185:22 - that's under a street light at 3:00 in
185:23 - the morning everybody while inside of
185:25 - their house can still see everything
185:27 - outside that's an analogy I thought was
185:29 - kind of accurate to describe a global
185:30 - scope however it's not recommended to
185:33 - declare Global variables in a large
185:35 - program just because you can have naming
185:37 - conflicts in a large program I might
185:40 - accidentally reuse the variable X or
185:42 - change it somewhere X is a very common
185:44 - name for a variable so in a large
185:46 - program I would stick with local
185:48 - variables but in a small program like
185:50 - this it's fine when inside of a function
185:53 - we'll use any local instance of a
185:55 - variable first if it's not found we'll
185:58 - look at the global scope So within
186:00 - Function One let's declare X to be
186:03 - one within function two we'll declare X
186:06 - to be
186:08 - 2 and then within the global scope we
186:11 - have xal 3 if I were to declare function
186:14 - one do you think X will equal 1 or 3
186:18 - well it's one if we have two variables
186:21 - with the same name and they're in
186:23 - different Scopes we'll use the local
186:25 - version first that's why X is one and
186:28 - not three if I were to invoke function 2
186:31 - well xal 2 if these local variables
186:34 - weren't
186:35 - available we would use the global
186:38 - version instead where x equals 3 all
186:42 - right everybody so that is variable
186:44 - scope it's where a variable is
186:46 - recognized and accessible you have a
186:48 - local scope that's anytime a variable is
186:50 - declared within a set of krly braces
186:53 - that variable is then only accessible to
186:55 - anything within that set of krly braces
186:58 - and a global scope is where a variable
187:00 - is declared outside of any functions
187:02 - it's available throughout the whole
187:03 - program and well everybody that is
187:06 - variable scope in
187:09 - JavaScript hey what's going on everybody
187:11 - in today's video we're going to create a
187:13 - temperature conversion program using
187:15 - HTML CSS and JavaScript so sit back
187:18 - relax and enjoy the show all right let's
187:21 - begin everybody we will begin within our
187:23 - HTML file make sure you've linked a
187:25 - script to your Javascript file which
187:27 - we'll fill in later so within the body
187:30 - of our document we will create a form
187:33 - element within our form we will create
187:35 - an H1 heading for the title of this
187:38 - program which we will name
187:42 - temperature
187:44 - conversion is
187:46 - good after our H1 element we'll create
187:49 - an input
187:52 - element this is a self-closing tag it's
187:55 - a text box since we're going to be
187:57 - converting temperatures I will set the
187:59 - type to be number so that should give us
188:03 - some arrows to increase or decrease the
188:05 - number or type one in if we need to I'm
188:08 - going to give this text box an ID of
188:12 - textbox we'll be referring to this text
188:14 - box by its ID later I'm also going to go
188:18 - ahead and set an initial value of zero
188:20 - then we can increase or decrease the
188:22 - number like I said before it is a little
188:24 - small but with CSS we will increase the
188:26 - size what I'm going to do now is create
188:29 - two radio buttons along with
188:32 - labels so we have input input is a
188:35 - self-closing tag the type will be
188:39 - radio and for the
188:41 - ID this will will be a radio button to
188:44 - convert to
188:47 - Fahrenheit I can never spell Fahrenheit
188:50 - we'll want the radio buttons in the same
188:51 - group I will set the name of the group
188:54 - to be
188:55 - unit oh looks like I misspelled type
188:59 - there we go so I'm going to place our
189:00 - radio button on a new line so within our
189:03 - first input element I will add a line
189:05 - break all right so after our first radio
189:08 - button I'll create a label for
189:10 - it label this lab will be
189:14 - 4 2
189:18 - fah and the text will be Celsius to
189:25 - Fahrenheit or if you prefer you could
189:27 - create like an
189:29 - arrow I don't really like the look of
189:31 - that let me use an emoji instead so on
189:33 - Windows to create an emoji you can hold
189:35 - windows and
189:36 - semicolon is there an
189:39 - arrow that'll work so when you click on
189:42 - the label you should also be able to
189:44 - select the radio button that's because
189:46 - the four attribute is the same as the ID
189:48 - attribute of the radio button okay let's
189:51 - copy both the first radio button and the
189:53 - label then paste it but change
189:56 - Fahrenheit to
189:59 - Celsius let's switch these
190:03 - around Fahrenheit to
190:09 - Celsius to Celsius I'm also going to add
190:13 - a line break after our first
190:15 - label so right
190:18 - here as well as here Google wants to
190:21 - translate my web page from German to
190:23 - English it's probably because of the
190:25 - word fahrenheit I'm guessing now I'll
190:27 - create a
190:32 - button the type will be button the text
190:36 - will be submit there is an onclick
190:39 - attribute for
190:40 - buttons
190:41 - onclick
190:43 - when we click on this button we can
190:45 - execute a JavaScript
190:46 - function eventually we'll be creating a
190:49 - function named convert actually let's
190:51 - take care of that now before we forget
190:53 - So within our Javascript file function
190:56 - convert we'll fill this in
190:59 - later so when we click on the button we
191:01 - will execute the convert
191:04 - function then lastly we're going to
191:06 - display a result whatever the new
191:08 - temperature is we'll use a paragraph
191:11 - element the ID will be result and just
191:17 - as a placeholder for now I'm going to
191:18 - type select a
191:22 - unit all right so far so good let's
191:25 - style this program with CSS now be sure
191:27 - to save your HTML file we'll move on to
191:30 - CSS we will first change the body of our
191:33 - document let's change the font family of
191:36 - the body of our document I'll pick aiel
191:40 - with a backup of son serif
191:46 - I'll change the background color too
191:48 - background- color I like using hsl
191:53 - values let's type a color such as black
191:56 - we will change the color to be hsl I'll
191:59 - go with a very light gray color like
192:04 - 95% so the background is going to be
192:07 - slightly light gray we'll fill in the
192:09 - form section to be Pure White we will
192:12 - select our one element that's going to
192:13 - be the header I'll pick a color again
192:17 - I'll be using hsl
192:19 - values let's go with I don't know blue
192:22 - feel free to pick a different color if
192:23 - you would like that's not
192:26 - bad then we'll fill in the form our form
192:30 - contains pretty much all of these
192:32 - elements so let's select our
192:35 - form I will change the background color
192:39 - I'll just copy this line and paste
192:41 - it but I'll I'll make this Pure
192:46 - White I'll text align Center everything
192:49 - within this
192:50 - form so everything should be
192:52 - centered I'll set a Max width of the
192:55 - form because right now it's taking up
192:56 - 100% of the width of the web browser so
193:00 - max width will be how about 350
193:05 - pixels we would like this form to be
193:08 - within the middle aligned horizontally
193:10 - we can set margin to be
193:14 - Auto to automatically Center that I'll
193:17 - add a little bit of padding around the
193:19 - elements within our
193:20 - form
193:22 - padding let's do 25
193:25 - pixels I'll smooth the corners of the
193:28 - form using border
193:29 - radius border
193:31 - radius 10
193:34 - pixels then I'll add a box
193:37 - shadow box Shadow the first value is the
193:41 - horizontal off offset let's set that to
193:44 - be 5
193:45 - pixels then the vertical offset I will
193:48 - set that to be 5 pixels the third value
193:51 - is the blur radius because right now
193:53 - it's fairly concentrated let's stick
193:56 - with 15 pixels not bad you can also
193:59 - select a color again I'm going to use
194:01 - hsl
194:03 - values you can also change the
194:06 - transparency I'll set mine to be
194:09 - 30% or approximately 30%
194:14 - 0.3 not bad so that's my box Shadow now
194:18 - we're going to change the text box so
194:20 - this text box does have an ID text box
194:25 - let's select this element by its
194:27 - ID I'll set the width to be
194:30 - 50% it's going to take up 50% of the
194:32 - width
194:34 - available let's text align
194:38 - Center the number is going to be right
194:40 - in the middle let's change the font
194:44 - size let's do 2 em for
194:48 - 200% I'll add a
194:51 - border to pixel
194:55 - solid then I'll pick some hsl values for
194:58 - the
195:00 - color I'll make it a little
195:02 - transparent maybe like
195:06 - 80% let's select a border
195:10 - radius for pixels to smooth the
195:14 - corners I'll add a little bit of margin
195:17 - below the text
195:19 - box
195:23 - margin-bottom 15 pixels is
195:25 - good that's going to push the radio
195:27 - buttons down further just to give this
195:29 - text box more space let's work on the
195:31 - radio buttons next so we are selecting
195:35 - the
195:36 - labels so let's take every
195:39 - label I'll change the font size so it's
195:42 - a little a little bigger 1.5 em for
195:46 - 150% I'll make the font weight to bold
195:49 - just to bold
195:51 - it there let's select our
195:54 - button we are selecting our button I'll
195:57 - add a little bit of margin above the
195:59 - button margin-top 15
196:03 - pixels let's change the background color
196:06 - of the button pick a color I'll pick red
196:10 - and again I'm going to use hsl values
196:12 - because I like
196:15 - them Ah that's
196:17 - decent I'll change the font size of the
196:20 - button 1.5 em for
196:24 - 150% I'll remove the border border
196:29 - none I'll add some
196:33 - padding 10 pixels for the top and bottom
196:35 - of the button 15 for the
196:38 - sides I'll round the corners with border
196:41 - radius border radius 5
196:45 - pixels I'm going to change the font
196:47 - color color
196:50 - white then when I hover my cursor over
196:53 - the button I will change the cursor to
196:55 - be a
196:56 - pointer and that appears to work
196:59 - now so when I hover over the button I'll
197:02 - use the hover PSE sudo class to change
197:04 - the background color of the button we
197:07 - are selecting our button then select the
197:10 - hover sudo class we'll make the
197:12 - background color just a little bit
197:14 - darker we'll change the lightness of our
197:16 - hsl value to be like 10% darker so I
197:20 - have 60% I'll change that to be 50 so
197:23 - now the background should change when I
197:24 - hover over the button lastly let's
197:26 - change the CSS properties of the
197:29 - result so this should have an ID of
197:34 - result
197:36 - result I'll make the font size a little
197:38 - bit bigger font size 1.75 em is
197:43 - good and I'll make the font weight bold
197:47 - font weight bold all right and that is
197:51 - all the CSS we need be sure to save
197:53 - everything and then we will move on to
197:55 - our Javascript file all right so what I
197:58 - like to do is at the top of my
197:59 - JavaScript program I will declare all of
198:02 - the constants and variables that I'll
198:03 - need so let's get our text box I'll set
198:06 - this to be a constant const text box
198:11 - equals
198:12 - document. getet element by
198:16 - ID the ID that we're selecting is our
198:19 - text
198:23 - box we'll need the two Fahrenheit radio
198:27 - button let's copy this line paste it get
198:31 - the ID of two
198:33 - Fahrenheit const 2 Fahrenheit get
198:36 - element by ID 2
198:39 - Fahrenheit then 2
198:41 - Celsius
198:42 - 2
198:44 - Celsius const 2 Celsius the ID is 2
198:48 - Celsius so that will be this radio
198:51 - button copy this line paste it then we
198:55 - need the result to display the
198:57 - result result get element by ID
199:02 - result within our HTML file we don't
199:04 - necessarily need to select a unit
199:06 - anymore We'll add that later if somebody
199:09 - presses submit without selecting a radio
199:11 - button
199:12 - then we need let temp for the
199:16 - temperature when we click on the submit
199:18 - button we will execute this function
199:21 - convert so what are we going to do
199:23 - within this function we'll begin with an
199:25 - if statement we'll check to see if our
199:29 - two Fahrenheit radio button is selected
199:32 - so take two
199:33 - Fahrenheit we'll use the checked
199:36 - property if this radio button is checked
199:39 - it's going to return true if it's not
199:42 - it's going to be
199:43 - false else if 2 Celsius is
199:49 - checked to celsius. checked we'll
199:52 - perform some different
199:54 - actions else let's change the content of
199:58 - our
199:59 - result so here result. text content
200:05 - equals select a unit let's see if this
200:09 - works be sure to save everything
200:13 - I am not going to select a radio button
200:14 - I'm just going to submit and that's
200:16 - correct select a unit we didn't select
200:18 - one let's be sure that these two radio
200:20 - buttons are working just temporarily I'm
200:23 - going to change the result within the if
200:26 - and else if
200:27 - statement you
200:30 - selected two
200:34 - Fahrenheit and you selected 2
200:40 - Celsius I just want to be sure that
200:42 - these radio buttons are working so let's
200:44 - convert 2 Fahrenheit submit you selected
200:47 - 2
200:48 - Fahrenheit we'll select to the second
200:50 - radio button you selected 2 Celsius okay
200:53 - we know that this program is reading
200:55 - these radio buttons successfully so we
200:57 - no longer need these two lines of
201:00 - code we're going to get the number from
201:02 - our text box we'll store that within
201:05 - temp temp for temperature temp equals
201:09 - take our text box
201:12 - access the value
201:15 - within so when we accept user input it's
201:18 - of the string data type I'm going to typ
201:21 - cast the value as a number so we can use
201:23 - it with
201:24 - math okay then we're going to take our
201:26 - temperature and convert it to Fahrenheit
201:29 - here's the formula temp equals
201:33 - temp * 9 / 5 +
201:39 - 32 then we're going to update the text
201:42 - content of the
201:43 - result result. text content equals our
201:49 - temperature then I'm going to add plus
201:52 - Fahrenheit so to add the degree symbol
201:55 - on Windows you can hold alt then type
201:58 - 0176 on the
202:00 - numpad so this will be
202:03 - Fahrenheit let's type 100 De Celsius to
202:07 - Fahrenheit that gives us 212° fah 10
202:12 - would be 50 1° c would be
202:16 - 33.8 0 is 32° F if you would like to add
202:21 - some Precision following our temperature
202:24 - there's a built-in method to
202:27 - fixed We'll add one point of precision
202:30 - this will give us one digit past the
202:32 - decimal place 0° cus converted to
202:35 - Fahrenheit is 32.0 De
202:38 - F 10° C is 50° F let's copy these three
202:45 - lines then paste them within the else if
202:49 - statement we'll keep this line the same
202:52 - but we'll change the
202:53 - formula temp equals within parentheses
202:57 - temp -
203:00 - 32 * 5 / 9 then change fit to
203:07 - Celsius so what is 32° fah converted to
203:11 - Celsius
203:12 - that is
203:13 - zero 100 is
203:17 - 37.8 all right everybody so that is a
203:20 - simple temperature conversion program
203:22 - using JavaScript HTML and
203:27 - CSS hey what's going on everybody so
203:29 - today I'm going to explain arrays in
203:31 - JavaScript think of an array as a
203:33 - variable like structure that can hold
203:36 - more than one value for example let's
203:38 - say we had a variable named fruit go
203:41 - ahead and pick pick a fruit I'll pick an
203:43 - apple our variable can store one value
203:46 - but we can turn a variable into an array
203:49 - and it can store more than one value and
203:51 - we can do so by enclosing all values
203:53 - with a set of straight brackets now my
203:56 - variable of fruit is now an array it can
203:58 - store more than one value just be sure
204:00 - that each value is comma separated this
204:03 - time I'll add an
204:05 - orange and a banana just to make it more
204:08 - obvious that this is an array I'm going
204:10 - to add an s so that my variable name is
204:13 - plural it's not mandatory but it helps
204:15 - with readability I now have an array of
204:18 - fruits but let me show you something if
204:20 - I were to
204:22 - console.log my array of
204:25 - fruits well JavaScript is going to print
204:28 - out all of the elements in this array
204:30 - each item each value is known as an
204:32 - element we have three elements if you
204:35 - need to access an individual element
204:37 - following the array you have to add an
204:39 - index number enclosed in straight
204:41 - brackets if I would like the element at
204:43 - the first position that would have an
204:45 - index of zero that would give me an
204:48 - Apple fruits at index of one would be
204:51 - orange fruits at index of
204:54 - two is banana if I were to attempt to
204:58 - access the element at index 3 well it's
205:01 - undefined we only have three elements
205:03 - within our array 0 1 2 arrays always
205:07 - begin with zero you can even change one
205:09 - of these elements by accessing that
205:11 - array at a given
205:13 - element let's access our array fruits at
205:17 - index zero I will set the equal to be a
205:22 - coconut so now we have coconut orange
205:25 - banana let's change fruits at index one
205:28 - to be a coconut Apple coconut banana
205:31 - index 2 will be a coconut Apple orange
205:34 - coconut if I set fruits at index 3 to be
205:37 - a coconut let me console that log that
205:39 - too fruits at index 3
205:42 - we can add a new element to that array
205:44 - otherwise to add an element there's a
205:46 - built-in method of arrays fruits do push
205:51 - to push an element to the end I will add
205:53 - a coconut to the end of my array Apple
205:56 - orange banana
205:58 - coconut then we have
206:00 - pop pop is going to remove the last
206:06 - element Apple orange undefined the
206:09 - unshift method will add an El m to the
206:12 - beginning take our array use the unshift
206:16 - method
206:17 - unshift I will add a mango to the
206:20 - beginning of my array mango Apple orange
206:24 - banana then we have shift to remove an
206:27 - element from the beginning fruits.
206:30 - shift now we have an orange banana and
206:33 - my last two elements are undefined to
206:36 - get the length of an array there's a
206:37 - length property let's create a new
206:39 - variable let num of fruits to store the
206:45 - number of fruits that we
206:47 - have type the array name do
206:51 - length then let's
206:54 - console.log the number of fruits we have
206:57 - we have three fruits I'll add another
206:59 - I'll add a coconut to the
207:01 - end and we have four so that's how to
207:04 - get the length of an array there's a
207:05 - length property type the array name do
207:09 - length we can find the index of an
207:11 - element if there's a match let index
207:16 - equals let's search for an apple fruits.
207:21 - index of method what are we searching
207:24 - for let's search for an apple then I
207:26 - will display the index so our apple is
207:30 - located at index zero let's search for
207:33 - an orange that's index one banana that's
207:38 - two coconut three what if we search for
207:41 - an element that doesn't exist like a
207:44 - Maino well this method will return ne1
207:48 - that could be helpful within an if
207:49 - statement you can check to see if this
207:50 - method returns negative 1 then if it
207:53 - does that means the element wasn't found
207:54 - and you can let the user know if index
207:57 - equals -1 display that element wasn't
208:00 - found now if you would like to Loop
208:02 - through the elements and display them
208:04 - there's an easier way to do that you can
208:06 - use a for
208:08 - Loop so four there's up to three
208:11 - statements we'll need a counter or some
208:13 - sort of index let I equal Z that's the
208:17 - first
208:17 - statement we'll continue this as long as
208:20 - I is less than our fruits array do
208:24 - length property then we will increment I
208:27 - by One if we have four elements we
208:30 - should execute this Loop four times
208:32 - during each iteration I will
208:36 - console.log our fruits array but the
208:39 - index instead of being like Z 0 1 2 3 a
208:43 - hard number we'll use our counter our
208:45 - index of
208:47 - I and let's get rid of that line now we
208:50 - should Loop through all of the elements
208:51 - of this array and print them out
208:53 - individually using a for Loop we can
208:55 - even increment by different number like
208:57 - two i+ equals 2 so here we're only
209:01 - displaying the apple and the banana if I
209:04 - set index to be one then increment by
209:07 - two will display orange then coconut so
209:10 - using a for Loop there's a few different
209:12 - ways in which you can display the
209:14 - elements of an array if you need to
209:16 - display the order of this array in
209:17 - Reverse we can change this around we
209:20 - will set our counter I to be the length
209:22 - of our array then we'll continue as long
209:25 - as I is greater than or equal to zero
209:29 - then
209:30 - iusus there's one change I'm going to
209:33 - make we have undefined coconut banana
209:36 - orange Apple so the length of my array
209:38 - is four but if I were to access our
209:41 - array fruits at index 4 where would that
209:44 - be 0 1 2 3 that's out of bounds I'm
209:48 - going to set our index to be fruits.
209:50 - length minus one 0 1 2 3 our length is 4
209:55 - minus 1 is a total of three now we're
209:58 - printing our array in Reverse coconut
210:00 - banana orange Apple there's also an
210:03 - enhanced for loop it's a shortcut to
210:05 - displaying the elements of an array you
210:07 - can write something like
210:08 - this let fruit
210:12 - of array
210:13 - fruits really this variable can be
210:16 - anything but I like to write a singular
210:18 - version of my array name then during
210:21 - each iteration I will display each fruit
210:25 - apple orange banana coconut this is an
210:28 - enhanced for loop it's kind of like a
210:29 - shortcut to displaying the elements of
210:31 - an array if this array name were I don't
210:33 - know like meets you could say let meat
210:37 - of
210:38 - meats and then display each meat
210:42 - but of course they're still fruit that's
210:44 - a shortcut you can use now to sort an
210:47 - array you can use the sort method
210:49 - fruits.
210:51 - sort and that should sort the elements
210:53 - in alphabetical order apple banana
210:56 - coconut orange to sort them in reverse
210:59 - order you can tack on the reverse method
211:02 - to the end fruits. sort method. reverse
211:05 - method now they're all backwards in
211:08 - Reverse alphabetical order orange
211:10 - coconut banana apple all right everybody
211:13 - so that's an introduction to arrays
211:15 - we'll have a lot of practice with this
211:16 - in the future so if you don't remember
211:18 - everything that's okay an array is a
211:20 - variable like structure that can hold
211:23 - more than one value a variable can hold
211:25 - one value an array can hold many and
211:28 - well everybody those are arrays in
211:32 - JavaScript hey everybody today I'm going
211:34 - to explain the spread operator in
211:36 - JavaScript the spread operator is
211:38 - represented by three dots the spread
211:40 - operator allows an iterable such as an
211:43 - array or string to be expanded in two
211:46 - separate elements what this does is
211:48 - unpack the elements here's an example
211:50 - let's create an array of
211:53 - numbers pick some numbers I'll just pick
211:55 - 1 through five one 2 3 4 5 then just to
212:01 - test this let's
212:03 - console.log my array
212:05 - numbers in this array what if I would
212:07 - like to find the greatest value well one
212:10 - way which I could do that is let's
212:12 - declare a maximum let maximum this is
212:16 - going to be a variable equals I will use
212:19 - the max method of math what would happen
212:22 - if I place our array within this
212:25 - method then I will display our
212:28 - maximum so we have not a number using
212:31 - the max method we can't place an array
212:33 - directly within this method however by
212:36 - utilizing the spread operator we can
212:38 - spread this array into different
212:40 - elements so we will preedee this array
212:42 - with the spread operator we are going to
212:45 - unpack the elements now if I run this
212:48 - program again we have our result of five
212:50 - when you use the spread operator imagine
212:53 - that you're opening a box and taking out
212:55 - all the contents inside like you're
212:56 - unpacking something let's find the
212:58 - minimum this time let minimum equals
213:05 - math.min we will pass our array of
213:08 - numbers then use the operator to spread
213:12 - our array into different elements what
213:14 - is the minimum value from this array
213:17 - that would be one you can also do this
213:19 - with strings too you can separate a
213:21 - string into different
213:23 - characters let let's create a username
213:27 - equals type your name first name and
213:30 - last name I will create an array named
213:33 - letters letters
213:36 - equals we'll create a new array let's
213:39 - take our username it's a string and use
213:42 - the spread
213:43 - operator then I will display our letters
213:47 - console.log
213:50 - letters and here's my name divided into
213:53 - different characters what we have is an
213:55 - array of characters with my array of
213:57 - characters I can join them back together
213:59 - and insert characters between each
214:01 - element I will method chain the join
214:04 - method after our
214:06 - array We'll add a dash between each
214:09 - character
214:11 - so now my username is all one string but
214:14 - there's a dash between each character
214:16 - okay now this time we're going to create
214:18 - an array of fruits we'll make a shallow
214:20 - copy of an array using the spread
214:23 - operator add some fruits I'll add an
214:26 - apple an
214:28 - orange and a
214:30 - banana then I will
214:34 - console.log my
214:37 - fruits I can create a shallow copy of
214:39 - this array using the spread operator a
214:42 - shallow copy means it's a different data
214:44 - structure but it contains identical
214:46 - values I'll create a copy of fruits
214:50 - named new fruits
214:53 - equals an
214:55 - array let's take our fruits array then
214:59 - use the spread
215:00 - operator let's display new fruits and it
215:03 - should be an identical copy yep there's
215:06 - no apparent change we have two different
215:09 - arrays but they contain identical
215:12 - elements we can combine two or more
215:14 - arrays using the spread
215:16 - operator let's create an array of
215:22 - vegetables let's add some
215:24 - carrots
215:27 - celery
215:29 - potatoes I'll rename new fruits as
215:33 - Foods let's add our array of fruits
215:36 - we're spreading
215:37 - it comma then we will spread sprad our
215:41 - vegetables
215:43 - array then we will display our array
215:45 - Foods this array contains all of the
215:48 - elements from these two arrays fruits
215:50 - and vegetables we can use the spread
215:52 - operator to combine arrays we even have
215:55 - the capability to append separate
215:57 - elements along with unpacking these
215:59 - arrays I will also add eggs and
216:05 - milk we have all of the elements from
216:07 - our two arrays plus a few extras egg and
216:11 - milk all right everybody so that's the
216:13 - spread operator it's three dots it
216:15 - allows an iterable such as an array or
216:17 - string to be expanded into separate
216:20 - elements and well everybody that is the
216:22 - spread operator in
216:26 - JavaScript hey hey hey what's going on
216:28 - everybody today I'm going to explain
216:30 - rest parameters in JavaScript rest
216:32 - parameters is a parameter prefixed with
216:35 - three dots they allow a function to work
216:37 - with a variable number of arguments by
216:40 - bundling them into an array it's very
216:42 - similar to the spread operator which we
216:44 - talked about in the last video the
216:46 - spread operator expands an array into
216:48 - separate elements rest parameters do the
216:51 - opposite they bundle separate elements
216:53 - into an array spread will spread an
216:55 - array into separate elements rest
216:57 - parameters will bundle separate elements
216:59 - into an array it effectively does the
217:01 - opposite how could rest parameters be
217:03 - useful let me give you an example say we
217:05 - have a bunch of different
217:07 - food const food one food one equals
217:12 - Pizza we'll create a few different food
217:15 - variables let's start with four food one
217:18 - food two food three food four we have
217:22 - pizza
217:24 - hamburger hot dog and sushi I'm going to
217:28 - create a function that uses rest
217:30 - parameters it's going to Output all food
217:32 - that I send
217:34 - it we'll pretend that we're opening a
217:36 - fridge imagine that all of this food is
217:38 - in a fridge oh open fridge fridge short
217:42 - for
217:43 - refrigerator to use rest parameters I
217:45 - need three dots we're going to stick all
217:48 - of this food into an array but what
217:50 - should the array name be let's say Foods
217:53 - that's descriptive then I'm going to
217:57 - console.log my array of
218:00 - foods now I'm going to call this
218:02 - function open fridge I will send this
218:05 - function a variable number of arguments
218:09 - this method is going to display an
218:11 - array we have food one
218:14 - pizza food 2 hamburger hamburger is also
218:18 - within our array food three hot dog food
218:23 - four Sushi let me add one more food
218:27 - let's add Ramen food five will be
218:30 - Ramen then I will add food
218:34 - five you can see that I can send this
218:36 - function any number of arguments that I
218:38 - would like this function is is designed
218:40 - to accept any number of arguments I
218:43 - could combine this function with the
218:45 - spread operator when I'm displaying my
218:47 - Foods array all of these elements are in
218:49 - an array but I could separate them back
218:51 - into separate Elements by using the
218:53 - spread operator which is the same three
218:56 - dots as the rest parameters rest
218:58 - parameters are used as parameters the
219:00 - spread operator is used whenever you
219:02 - have an array or any sort of collection
219:04 - of something so now when I combine the
219:06 - rest parameters and the spread
219:09 - operator I can display all of my
219:11 - separate
219:12 - elements you can even use rest
219:14 - parameters to stick all elements within
219:16 - an array so this time I'm going to
219:18 - create a separate
219:20 - function to get
219:24 - food we will use rest
219:27 - parameters our array name will be Foods
219:31 - all we're going to do is return
219:35 - Foods take all of these separate
219:37 - elements stick them within an array then
219:39 - return that
219:41 - array so I'm going to create a new array
219:44 - const
219:46 - Foods
219:47 - equals call our get food method pass in
219:51 - a variable amount of arguments let's
219:54 - pass in food
219:55 - one food two food three food four and
220:01 - food
220:02 - five and then we got to display
220:05 - it
220:07 - console.log my array Foods
220:10 - so that's how the rest parameters can be
220:12 - used to combine elements and bundle them
220:15 - into an array then if you want you can
220:17 - return the array or do whatever you want
220:18 - with it let's go over a second example
220:22 - we'll create a method to sum a bunch of
220:24 - numbers together function
220:27 - sum we will use rest parameter so we can
220:30 - accept any number of arguments our array
220:33 - name will be numbers what we'll do
220:36 - within this method is have a result
220:39 - result equals equal 0 we'll keep track
220:42 - of the current sum within our result
220:44 - I'll create a for Loop to iterate over
220:46 - our
220:47 - array for every let number of
220:53 - numbers take our
220:56 - result plus equals the current
220:59 - number and then we are going to return
221:02 - our
221:04 - result now we'll have const total equals
221:09 - in our some function pass in as many
221:12 - numbers as we would
221:14 - like let's start with one oh then I
221:17 - should probably display the total
221:20 - console.log I'll use a template literal
221:23 - your total is I'll add a
221:27 - placeholder
221:29 - total your total is $1 let's add a few
221:32 - more
221:33 - arguments two the total is now $3 three
221:39 - $6
221:40 - 4 is 10 5 is
221:44 - 15 let's create a function to calculate
221:46 - an
221:48 - average let's copy our sum
221:53 - function let's name this function get
221:56 - average all we have to do when returning
221:58 - our result to get the average is divide
222:01 - our result by the length of our numbers
222:03 - array divided by numbers. length
222:06 - property that will give you the average
222:09 - so now const total equals get the
222:15 - average maybe these are test scores one
222:18 - student got a 75 another got a 100
222:22 - another student has
222:23 - 85 90 and a 50 let's
222:29 - console.log the
222:32 - total the average is
222:34 - 80 let's go over example three you can
222:37 - use the rest parameters to combine
222:39 - strings together we will create a
222:41 - function to combine
222:45 - strings we'll send in a title like
222:48 - Mister a first name such as
222:51 - SpongeBob a last
222:55 - name Square
222:58 - Pants he's the
223:01 - third we still need to make this
223:03 - function though but const full name
223:07 - equals whatever string is returned
223:10 - all right let's work on this
223:12 - function function combine string let's
223:17 - make this plural
223:22 - strings we need to use rest
223:24 - parameters let's name our array
223:27 - strings an easy way to do this is to
223:30 - return our array of strings and use the
223:34 - built-in join method to join all of the
223:37 - strings together but but we'll add a
223:40 - space between each string all right we
223:43 - should now have a full name variable
223:46 - that's all of the strings combined so
223:48 - let's
223:49 - console.log our full
223:55 - name Mr SpongeBob SquarePants the third
223:59 - that's one way in which you could use
224:01 - the rest parameters to combine a bunch
224:02 - of strings into one such as if you're
224:05 - creating a full name all right everybody
224:07 - so those are rest parameters they allow
224:10 - a function to work with a variable
224:12 - number of arguments by bundling them
224:14 - into an array it's the opposite of the
224:16 - spread operator the spread operator
224:19 - expands an array into separate elements
224:21 - the rest parameters bundle separate
224:23 - elements into an array and well
224:25 - everybody those are rest parameters in
224:31 - JavaScript hey everybody so in today's
224:34 - video we're going to use JavaScript HTML
224:37 - and CSS to create a dice roller program
224:40 - this is an optional project you will
224:42 - need some images of dice to work with if
224:44 - you're able to find some images of dice
224:46 - I would save them somewhere maybe on
224:48 - your desktop once you have images of
224:50 - your dice we're going to create a new
224:52 - folder new folder I'll name my folder
224:56 - diore
224:58 - images then take all of your dice images
225:01 - move them to that
225:03 - folder and now we are ready to begin
225:06 - we'll create all of the HTML elements
225:08 - that we'll need I will create a div
225:10 - section this div will have an ID of
225:13 - container to contain our
225:16 - program I'll include an H1
225:19 - heading with text of dice
225:24 - roller after this H1 element I'll create
225:27 - a
225:29 - label the label will have text of number
225:33 - of
225:35 - dice afterwards I'll use an input
225:38 - element I'm going to zoom in a little
225:40 - bit
225:42 - temporarily with this input element I'll
225:45 - type in a number of dice I would like
225:47 - such as 1 2 3 however I can type in
225:50 - characters which I would like to avoid I
225:53 - will set the type attribute of the input
225:56 - element to be number we're indicating to
226:00 - the user to select a number and not type
226:02 - in anything although there are ways to
226:05 - circumvent this this will be good enough
226:07 - for now for the input element we can set
226:09 - a default value I will set the value
226:12 - attribute to equal one for the
226:15 - default we can go below zero I'll set a
226:18 - minimum with the Min attribute Min
226:22 - equals
226:23 - 1 we can't go below one but we can
226:26 - select any number one or
226:29 - above now we'll create a
226:33 - button the button will have text of roll
226:38 - dice
226:40 - the button will have its onclick
226:42 - attribute I keep on spelling on lick
226:44 - onclick attribute set to a JavaScript
226:47 - function let's say roll dice we'll still
226:51 - need to Define this function in
226:53 - JavaScript after our button I'll create
226:56 - two div
226:58 - sections the first will have an ID of
227:01 - dice result this will display some text
227:05 - the numbers of the dice we roll the
227:07 - second development will be for the
227:10 - images ID dice
227:14 - images and that is all the HTML that
227:16 - we'll need let's head to our CSS file
227:19 - and I'll Zoom back to
227:21 - 100% let's select our ID of container #
227:27 - container I will change the font family
227:31 - to a sance s font such as Arial with a
227:35 - backup of s
227:37 - serif I will text Al line
227:41 - Center increase the font
227:44 - size in this project I'm going to use RM
227:48 - instead of em because we'll be working
227:50 - with a lot of different font sizes em is
227:53 - the font size relative to the parent RM
227:56 - is for the root for this specific
227:58 - project I'll stick with
228:00 - RM and I will set the font weight to be
228:05 - bold let's style our button
228:08 - next we are SEL cting our button I'll
228:11 - increase the font size of the button to
228:12 - be 1.5
228:15 - RM I'll add a little bit of padding 10
228:19 - pixels by 15
228:21 - pixels I will set the Border radius to
228:24 - round the
228:26 - corners 10
228:29 - pixels remove the Border because it's
228:32 - ugly border
228:35 - none pick background color for the
228:38 - button
228:41 - I'll pick something blue but I like
228:43 - using hsl
228:48 - values something like that looks good I
228:51 - will change the font color to be
228:54 - white and I will set the font weight to
228:58 - be
228:59 - bold not bad when I hover my cursor over
229:03 - the button I will change the cursor to
229:06 - be a
229:08 - pointer
229:10 - let's change the background color of the
229:12 - button when we hover over it we are
229:14 - selecting the hover suda class of the
229:18 - button let's take our background color
229:22 - I'll increase the lightness by
229:25 - 10% so that should change when we hover
229:27 - over the button now when I click on the
229:29 - button I'll increase the lightness even
229:31 - more to show that it's active with our
229:34 - button we will select the active pseudo
229:37 - class I'll set the lightness to be 70
229:39 - % so when we click on the button it
229:42 - should flash momentarily which it is
229:45 - let's style the input element cuz I can
229:47 - barely see
229:48 - it with our input element I need to
229:51 - scroll
229:53 - down let's increase the font size to two
230:00 - RM I'll set a width of50
230:04 - pixels text align
230:08 - Center
230:11 - and font
230:13 - weight
230:16 - bold with our HTML file we do have two
230:19 - empty div elements currently we'll style
230:22 - these at the end once we get our images
230:24 - to populate we'll style that last with
230:26 - the onclick attribute of the button we
230:29 - set a function of r dice now we need to
230:31 - Define it within our Javascript file we
230:34 - will Define a function to roll dice we
230:37 - have a lot of constants to declare
230:39 - I'll create a constant for the number of
230:41 - dice we would like what's the value of
230:44 - this input element I will
230:46 - Define const num of dice what is the
230:52 - number of dice we need to roll
230:54 - equals document. getet element by ID the
231:00 - ID of this input element is I actually
231:04 - forgot what was it oh we didn't set an
231:06 - ID okay let's do that okay so for input
231:09 - element the ID will
231:12 - be num of
231:18 - dice num of
231:21 - dice but I would just like the value I
231:24 - will access the value of whatever this
231:27 - input element is for the next constant
231:30 - we're going to get the dice result this
231:33 - empty div
231:35 - section const dice result equals let's
231:39 - copy this line of
231:41 - code but we don't need the
231:43 - value we just need that ID dice
231:48 - result then let's do this with dice
231:52 - images so we can copy this paste it
231:56 - const dice
231:58 - images the ID was dice
232:02 - images I'll create two empty arrays
232:06 - const values this will be an empty array
232:10 - we'll store all of the dice rolls the
232:13 - numbers then we'll need an array of
232:15 - images const images this will be for the
232:19 - images of the dice at this point in time
232:23 - we're going to create a for Loop that
232:24 - will Loop once for every dice that we
232:26 - roll we have to generate a random number
232:29 - between one and six for each dice we're
232:31 - rolling if I'm rolling three dice I need
232:33 - a for Loop to iterate three times let's
232:36 - create a for
232:37 - Loop let I equal 0 continue this as long
232:42 - as I is less than the number of dice
232:46 - then increment I by One during each
232:49 - iteration I need to generate a random
232:51 - number between 1 and six I'll store that
232:54 - within a constant const value that will
232:57 - be the random number
233:00 - equals math. random method this
233:03 - generates a random number between 0 and
233:05 - 1 but I'm going to multiply it by six to
233:09 - give us a random number between 0 and 5
233:12 - it's not going to be a whole number
233:13 - though so I'm going to round it using
233:15 - math.
233:17 - floor then enclose this part of our
233:20 - equation now we should get a random
233:22 - number between zero and five but I need
233:25 - a random number between 1 and six so
233:27 - I'll add one to the End plus one so now
233:31 - we'll get a random number between 1 and
233:33 - six just to be sure that this all works
233:37 - temporarily I'm going to con console.
233:39 - log our value if I roll one dice we
233:43 - should get one random
233:45 - number one let's try three
233:50 - dice
233:52 - 546
233:54 - 324 all right we don't need this
233:56 - console. log statement anymore we know
233:57 - that it's
233:58 - working with these values I'm going to
234:01 - push them into our array of values take
234:05 - our array of values use the push method
234:09 - add our value that we randomly generate
234:12 - during each iteration and let's see if
234:14 - this
234:15 - works I'm going to
234:18 - console.log my array of values just to
234:21 - be sure that there's some numbers in
234:22 - there let's roll for dice
234:26 - inspect
234:27 - console I have an array of four elements
234:30 - the number
234:32 - 6326 so that does
234:35 - work all right here's the tricky part I
234:38 - need to take my array of images use the
234:41 - push method I will create a string
234:44 - representation of an HTML element I need
234:47 - to get one of the images found within
234:49 - the SCE images
234:50 - folder using angle brackets I will
234:53 - create an image
234:55 - element I will set the source equal to
234:59 - that folder name so my folder name was
235:02 - dice uncore
235:04 - images dice uncore Images slash
235:09 - so with my images it might be different
235:11 - for you mine are labeled appropriately
235:14 - you know for one two for two three for
235:16 - three so on and so forth I will use a
235:20 - placeholder add our value this number
235:25 - then follow this with the file extension
235:26 - of the images my images are PNG images
235:30 - do pay attention to that after we exit
235:32 - this for Loop we should have an array of
235:35 - HTML images then we're going to take our
235:38 - dice result
235:40 - constant change the text content to
235:44 - equal all of the values all use a
235:47 - template string I will display the word
235:49 - dice at a placeholder I'm going to join
235:53 - all of the elements together all of the
235:55 - values to do that you can take your
235:57 - array of values use the built-in join
236:01 - method and I will join them all by a
236:03 - certain character or characters I will
236:06 - join all of these numbers by a common
236:09 - and a space let's see if this works I'm
236:12 - going to roll one dice yep dice I rolled
236:16 - a
236:16 - one I rolled a four I rolled a three
236:20 - let's roll two dice I have 2 comma 5
236:23 - four comma 6 2 comma 2 comma 3 6 comma 3
236:28 - comma 2 then we have to get the images
236:32 - let's take our dice images constant
236:35 - access the inner HTML set this equal to
236:40 - take our array of images use the
236:42 - built-in join
236:44 - method I'm not going to join them by any
236:46 - character I'll join them by an empty
236:49 - string and let's see if this works I
236:51 - would like one dice yeah there it is two
236:56 - and three now for some reason if your
236:58 - dice isn't displaying with our image
237:01 - element I will set the alt attribute to
237:04 - equal a string of dice space add a
237:10 - placeholder
237:12 - value let's say I get the folder name
237:14 - wrong I will rename this as dice image
237:18 - I'll attempt to display one dice dice
237:20 - three dice four dice three so in case
237:24 - our image can't display for some reason
237:26 - will at least display the alternative
237:28 - text this is good for troubleshooting
237:30 - and for screen readers for accessibility
237:32 - let me correct the name of the folder
237:35 - again so with our dice images at least
237:37 - for me they kind of big and I'd like to
237:40 - space them out a little bit our last
237:42 - step is we're going to go back to our
237:43 - CSS
237:44 - stylesheet I will select the ID of dice
237:49 - result that's going to be for this title
237:52 - right here I'll add some margin around
237:54 - this text right now it's kind of
237:56 - compressed I will set margin of 25
238:00 - pixels then with our dice images ID dice
238:05 - images with my ID of dice images is take
238:09 - each child
238:11 - image set a width of 150 pixels should
238:16 - be
238:18 - good yeah they're a lot smaller now I'll
238:20 - add a little bit of margin
238:22 - too margin 5
238:26 - pixels yeah that's not a bad looking
238:29 - program all right everybody so that was
238:32 - a dice roller program you can make using
238:34 - JavaScript HTML and CSS impress your
238:38 - friends
238:39 - and that's pretty much
238:43 - it hey what's going on everybody so in
238:45 - today's lesson we're going to create a
238:48 - project where we Generate random
238:49 - passwords this will help us solidify our
238:52 - understanding of functions and random
238:54 - numbers this will be an exercise for
238:56 - beginners by setting different options
238:58 - we can change the format of the password
239:00 - and well let's begin everybody all right
239:02 - let's begin we'll need to let our
239:04 - program know what the length of our
239:05 - password is going to be let's create a
239:07 - constant to store that const password
239:12 - length set this equal to maybe 12 but we
239:15 - can adjust that accordingly we'll create
239:17 - a Boolean to specify if our generated
239:20 - password is going to contain lowercase
239:21 - characters we'll create a
239:24 - constant include
239:28 - lowercase do we want to include
239:30 - lowercase characters we can set this to
239:32 - be true or false we will set this to be
239:36 - true do we want to include uppercase
239:39 - characters
239:41 - include
239:42 - uppercase I will again set this to be
239:45 - true do we want to include numbers const
239:49 - include
239:51 - numbers I will set that to be true do we
239:54 - want to include
239:56 - symbols const include
240:01 - symbols we'll Define a function at the
240:04 - top of our
240:05 - program function to generate
240:09 - password we have a lot of parameters to
240:12 - set up we're going to pass in all of
240:14 - these constants as arguments so we have
240:18 - a
240:19 - length include
240:21 - lowercase include
240:24 - uppercase include
240:27 - numbers and include
240:29 - symbols when we call this function we
240:32 - have to pass in all of these arguments
240:35 - so we will call our generate password
240:38 - function pass in our password
240:41 - length include
240:44 - lowercase include
240:46 - uppercase include
240:49 - numbers and include
240:51 - symbols at the bottom of our function we
240:54 - will be returning a password but for now
240:57 - I'm just going to write an empty string
240:58 - because we still need to determine what
241:00 - that password is going to be after
241:02 - finishing the generate password function
241:04 - this will return a string a string
241:06 - password we will store that within const
241:10 - password equals whatever is returned
241:13 - from the generate password function and
241:16 - just so that this is more readable
241:18 - although not necessary I'm going to
241:20 - place each of these arguments on a new
241:22 - line because I'm OCD about things being
241:24 - an
241:26 - alignment and then at the very end of
241:28 - this program I will display a template
241:32 - string of generated
241:36 - password I'll add a a placeholder then
241:39 - we'll display our password that we
241:42 - generate so right now it's not going to
241:45 - display anything we're returning an
241:47 - empty string but that is everything we
241:50 - need outside of this function to
241:51 - generate our password basically we're
241:54 - passing in options when we generate our
241:56 - password do we want to include lowercase
241:58 - characters uppercase characters numbers
242:00 - and or symbols we have a
242:03 - number and a bunch of Boolean values
242:06 - within our password we're going to
242:08 - create a few constants within this
242:09 - generate password function we will
242:11 - create one long string of all of the
242:14 - lowercase characters
242:17 - chars equals I'm going to go through the
242:20 - alphabet we will have one long string of
242:23 - alphabetical
242:30 - characters and I think I got all of them
242:33 - so there should be 26 now we're going to
242:36 - do this with uppercase characters
242:38 - const
242:40 - uppercase chars
242:43 - equals I'm going to turn on caps
242:46 - lock go through the
242:55 - alphabet we'll create a constant of
242:57 - number characters number chars
243:03 - equals 0 through
243:06 - 9 and
243:09 - symbols const symbol
243:14 - chars which symbols would you like to
243:16 - include I'll just add a
243:22 - bunch that's probably good enough for
243:25 - now feel free to add more or
243:27 - less we will create a variable for
243:31 - allowed chars meaning
243:36 - characters and an empty pth
243:38 - password let password equal an empty
243:45 - string if some of these constants are
243:48 - true we would like to take that
243:50 - corresponding set of characters and
243:53 - concatenate it to the allowed Char
243:55 - string so what we'll do is take our
243:57 - allowed characters variable use string
244:00 - concatenation by using plus equals we'll
244:04 - check to see if include lowercase is
244:07 - true or false
244:09 - we can use theary operator for that if
244:12 - we would like to include lowercase
244:14 - characters we will string concatenate
244:17 - our lowercase chars our lowercase
244:19 - characters otherwise we'll concatenate
244:22 - an empty
244:23 - string let's do this with uppercase
244:26 - characters with our allowed characters
244:29 - let's string concatenate and check if
244:32 - we're including uppercase characters
244:34 - question mark if this is true we will
244:36 - concatenate all of the uppercase
244:39 - characters we've declared otherwise
244:41 - we'll concatenate an empty string so we
244:44 - don't include them let's do this with
244:46 - number
244:48 - chars include numbers are we including
244:51 - numbers within our password if so we
244:54 - will return our number Char
244:57 - string and then
245:01 - symbols are we including symbols within
245:03 - our password if so concatenate our
245:06 - string of symbol character
245:09 - all right just to test everything
245:11 - afterwards I'm going to
245:13 - console.log our allowed
245:16 - characters so right now I'm going to
245:19 - switch all of these constants to be
245:23 - false so right now we're not including
245:27 - any characters if I were to set include
245:29 - lowercase to be true we would include
245:32 - all of the lowercase characters that's
245:34 - one long string Let's test uppercase yep
245:38 - we are including all of the uppercase
245:40 - characters include numbers yes that
245:43 - works and include symbols that also
245:47 - works at this point in the program we're
245:49 - going to have one gigantic string of all
245:52 - of the possible characters before we
245:54 - move on with the program I do want to
245:56 - run some checks using some if statements
245:59 - first let's check to see if the password
246:01 - length is zero or less than zero right
246:04 - now it's set to
246:05 - 12 using an if statement
246:08 - if the length the length of the password
246:11 - is less than or equal to zero we need to
246:14 - let the user know that the password
246:16 - length must be at least one we will
246:18 - return a
246:22 - string password length must be at least
246:27 - one right now we're not generating a
246:29 - password we're returning an empty string
246:32 - if I set the password length to be zero
246:35 - we will generate this message pass
246:37 - password length must be at least one or
246:40 - even a negative number
246:42 - like1 password length must be at least
246:45 - one let's set that back to be 12 what if
246:49 - we don't select any options what if all
246:51 - of these character options were
246:57 - false we can check the length of our
247:00 - loud characters variable so
247:04 - if our loud characters length property
247:08 - is strictly equal to zero this will only
247:12 - be possible if all of these options are
247:14 - set to false we will return a template
247:20 - string at least one set of
247:24 - characters needs to be
247:28 - selected and let's see if this works yes
247:31 - it does at least one set of characters
247:34 - needs to be selected I can select any
247:36 - options that I would like like I will
247:39 - set these all to be
247:43 - true now here's the hard part for as
247:46 - many iterations as our password is we
247:48 - will select a random character from all
247:51 - of the different
247:52 - possibilities we will use a for
247:56 - Loop we will let I be our index our
248:00 - counter we will continue this for loop
248:03 - as long as I is less than the length the
248:06 - password length then increment I by One
248:09 - during each iteration if our password
248:11 - length is 12 we will execute this for
248:14 - Loop a total of 12 times now we will
248:16 - generate a random index const random
248:20 - index equals we will use the random
248:25 - method of
248:26 - math this generates a random number
248:28 - between 0o and one I can multiply this
248:31 - number that's randomly generated by the
248:34 - length of our allowed
248:36 - characters let's say we're including
248:38 - only lowercase characters well this is a
248:41 - total of 26 characters in the
248:44 - alphabet if I'm taking math.random * 26
248:48 - I'll be given a random number between 0
248:51 - and 25 but I will need to round it down
248:54 - let's enclose this equation with the
248:56 - floor method of math to round down math.
249:03 - floor we'll use string concatenation
249:05 - with our password Cur our password is an
249:08 - empty string but we will use string
249:11 - concatenation we will string concatenate
249:14 - a randomly chosen character from our
249:16 - string of allowed characters password
249:20 - plus equals our allowed characters at
249:23 - the index of random
249:25 - index then at the end of this program we
249:28 - will return our
249:30 - password and let's see if this works
249:34 - let's close out of this function we
249:35 - don't need it anymore
249:38 - and let's see if this works yeah there's
249:40 - our password so every time I run the
249:43 - program I get a new random password and
249:46 - I can turn these options on and off
249:48 - let's set all of these options to be
249:49 - false to begin
249:53 - with and I will set the length to be
249:56 - zero let's see what happens password
249:59 - length must be at least one all right
250:01 - how about a password of 10 10 characters
250:04 - long at least one set of characters
250:06 - needs to be selected let's select only
250:08 - lowercase
250:09 - characters yep we only have lowercase
250:12 - characters let's allow uppercase
250:14 - characters
250:15 - now let's allow
250:18 - numbers I didn't get any of that time
250:20 - let's do it
250:22 - again okay there's a number I guess
250:24 - numbers don't come up very frequently
250:27 - and let's include
250:28 - symbols and there's a few symbols in
250:31 - there all right everybody so that was an
250:33 - exercise to Generate random passwords it
250:36 - should give you some practice with
250:37 - functions and working with random
250:39 - numbers and well everybody that was a
250:42 - random password generator in
250:48 - JavaScript hey welcome back everybody so
250:50 - today I got to explain callbacks in
250:52 - JavaScript a callback is a function that
250:55 - is passed as an argument to another
250:57 - function they are used to handle
250:59 - asynchronous operations such as reading
251:02 - a file Network requests or interacting
251:04 - with databases these activities take
251:07 - some time to complete now with
251:08 - JavaScript we don't necessarily wait for
251:10 - a process to finish before continuing
251:13 - with the rest of the program for example
251:15 - if we were to read a file if it takes a
251:17 - long time to read that file JavaScript
251:19 - might continue on with the rest of the
251:21 - program we might attempt to display the
251:23 - contents of that file before we're
251:24 - finished reading it that's where
251:25 - callbacks come in we're telling
251:27 - JavaScript hey when you're done call
251:30 - this next when you're done reading the
251:32 - file then display the contents only
251:35 - after that process is complete I'll I'll
251:37 - give you a few examples of the syntax of
251:39 - a call back we'll start with something
251:41 - really simple we'll create a function to
251:43 - display the word hello this will be the
251:46 - hello
251:47 - function then I will
251:50 - console.log the
251:52 - word
251:54 - hello so I can invoke this function
251:57 - hello to execute
252:01 - it hello what if we were to create a
252:04 - function for goodbye function
252:08 - goodbye we will
252:11 - console.log
252:13 - goodbye okay after hello let's invoke
252:16 - goodbye we have hello then goodbye what
252:20 - if my hello function takes a lot of time
252:22 - to process well JavaScript isn't
252:25 - necessarily going to wait around before
252:27 - executing the goodbye function I'm going
252:29 - to add a few lines of code you don't
252:31 - need to copy this these few lines of
252:33 - code are going to make us wait for 3
252:35 - seconds you don't need to write this
252:37 - this down but do pay attention we will
252:40 - execute the hello function followed by
252:41 - the goodbye function but we're going to
252:43 - pretend that our hello function takes a
252:45 - little bit of time to
252:47 - process so now we have goodbye already
252:50 - executed followed by hello but it should
252:53 - be the other way around I would like to
252:55 - guarantee that the goodbye function
252:57 - follows after the hello function well I
253:00 - can do that by adding a call back to the
253:03 - goodbye function after the hello
253:05 - function is complete we'll get rid of
253:07 - the this goodbye function
253:08 - invocation to use a call back you pass a
253:11 - function as an argument to another
253:13 - function we will pass the goodbye
253:16 - function as an argument to the hello
253:19 - function So within the set of
253:20 - parentheses type the name of the
253:22 - function goodbye now be sure you don't
253:24 - add a set of parentheses after the
253:26 - function name you'll call it right away
253:28 - we are passing the name of the function
253:30 - as an argument but we need a matching
253:33 - parameter I will name this parameter
253:36 - callback and after everything within
253:38 - this function is
253:39 - complete let's take our call back then
253:42 - invoke it by adding a set of parentheses
253:45 - invoke meaning call all right now let's
253:48 - see what
253:49 - happens we have our hello function
253:52 - followed by the goodbye function in that
253:54 - order let's create another
253:56 - function what about a leave function
253:59 - we'll tell somebody to
254:01 - leave
254:04 - console.log leave I will pass pass the
254:07 - name of this function as an argument to
254:09 - the hello function leave is now our call
254:12 - back after executing the hello function
254:15 - we will execute our call back and in
254:17 - this case it's the leave function let's
254:20 - create another function for wait
254:22 - function
254:25 - waight
254:27 - console.log wait we'll pass the name of
254:30 - the function as an argument to the hello
254:32 - function wait is now our call back we
254:35 - will execute the hello function followed
254:37 - by the weight function so by using
254:40 - callbacks we are guaranteeing that the
254:42 - function passed in will execute next you
254:45 - can pass callbacks as well as other
254:47 - arguments to a function let's go over a
254:50 - second
254:50 - example I will create a function to sum
254:54 - two numbers
254:55 - together X comma y I'll also add a call
255:00 - back call back X comma y we have three
255:03 - parameters total within the sum function
255:06 - we will create a local variable of
255:09 - result add x +
255:12 - y and then I will call my callback then
255:16 - I'll pass the result as an argument to
255:18 - the Callback function then I will create
255:21 - a function to display the result to my
255:24 - console display console there is one
255:28 - parameter we have a result argument
255:30 - we're
255:31 - receiving then
255:34 - console.log my result
255:37 - all right now we will invoke the sum
255:40 - function but we have three arguments
255:42 - that we need to pass in a call back a
255:46 - value for x and a value for y let's
255:48 - invoke the display console function as a
255:50 - call back again be sure to not add a set
255:53 - a parentheses after the name because
255:54 - then you'll invoke it right
255:55 - away X will be 1 y will be two and let's
256:00 - see the
256:01 - result the result is three So within our
256:04 - sum function calculate the result first
256:07 - then after that process is finished then
256:10 - display the result to the console let's
256:13 - create a separate function to display
256:14 - the result to our document object window
256:17 - our web page basically uh let's pretend
256:20 - that this wasn't
256:21 - here I'll create an H1 element with an
256:25 - ID of my
256:30 - H1 I will create a separate
256:33 - function
256:35 - display page
256:37 - to display on the web page I think
256:39 - display Dom would be more appropriate
256:41 - but I haven't explained what the
256:43 - document object model is yet so let's
256:45 - just work with display
256:48 - page we will accept a result I will
256:52 - change the text content of the my H1
256:55 - element document. getet element by ID
257:00 - the ID was my H1 we will change the text
257:05 - content
257:07 - to equal our result that we receive as a
257:11 - callback we will use the display page
257:13 - function display
257:15 - page there and the result is three after
257:19 - this calculation processes execute the
257:21 - call back and this time we are passing
257:24 - it to the display page function that we
257:25 - created all right everybody so that's a
257:27 - call back it's a function that is passed
257:29 - as an argument to another function
257:31 - they're used to handle asynchronous
257:33 - operations operations that may take a
257:36 - variable amount of time such as reading
257:38 - a file Network requests or interacting
257:40 - with databases we're not exactly sure
257:42 - when these processes are going to
257:44 - complete by using a callback we can
257:46 - ensure that a function executes after
257:48 - these processes are complete and not
257:50 - before accidentally all we're doing is
257:52 - saying hey when you're done call this
257:55 - next we'll have more practice with
257:57 - callbacks especially in the upcoming
257:59 - topics and while everybody those are
258:01 - callbacks in
258:04 - JavaScript hey it's me again today I'm
258:06 - going to explain the for each method in
258:08 - JavaScript the for each method is used
258:11 - to iterate meaning Loop through the
258:13 - elements of an array and apply a
258:15 - specified function to each element you
258:17 - have an array we can use the built-in
258:19 - for each method of arrays and send each
258:22 - element through a call back to a
258:23 - function here's an example I'll create
258:26 - an array of numbers let numbers equals
258:29 - 1-
258:34 - 5 then I'm going to create a function to
258:37 - display each
258:38 - element function
258:41 - display there will be one
258:44 - parameter an element we will
258:47 - individually display each element within
258:49 - this array
258:52 - console.log each
258:55 - element I can display each element of
258:58 - this array by using the for each
259:00 - method we will take our
259:03 - array dot use the built-in for each
259:07 - method then pass a call back as an
259:09 - argument we will pass our display
259:12 - function as an argument so this should
259:15 - display all of the elements in my array
259:16 - to the console 1 2 3 4 5 believe it or
259:20 - not the element argument is provided for
259:22 - us with the for each method behind the
259:24 - scenes the for each method will provide
259:27 - to a callback an element index and array
259:30 - argument an element for the current
259:32 - element that we're on when looping
259:34 - through this array an index that keeps
259:36 - track of the current index number and
259:38 - the location of the array itself in this
259:40 - case it would be numbers that's why when
259:42 - we pass the display function as a call
259:44 - back we're already provided with an
259:46 - element argument behind the scenes so
259:48 - we're using the for each method to
259:50 - display all of the elements of this
259:51 - array let's use the for each method
259:53 - again to double each element before
259:55 - displaying it I will create a new
259:58 - function function double to double the
260:01 - value of each
260:03 - element element index and array are
260:06 - provided for us
260:07 - automatically for each element what are
260:09 - we going to do let's take our array at
260:14 - index of index index keeps track of the
260:18 - current index number so during each
260:20 - iteration it's going to increment by one
260:22 - starting with zero we will take our
260:26 - element multiply it by
260:29 - two all right so let's take our numbers
260:32 - array use the for each method then pass
260:35 - a call back to our double
260:37 - function so now all of these elements
260:40 - should be doubled let's triple them now
260:43 - we'll create a function for triple
260:46 - function triple we will set the
260:48 - parameters to be the same but we will
260:50 - multiply each element by three then
260:53 - passing a call back for
260:55 - triple so now we have 3 6 9 12 15
260:59 - they're all tripled let's Square each
261:02 - element function
261:05 - Square again the element index and array
261:07 - arguments are provided for us take our
261:11 - array that we receive at index of the
261:14 - current index number set this equal to
261:18 - to square a number we can use the power
261:20 - method of math then raise a base to a
261:23 - given power we are raising our base of
261:27 - element to the power of two if I pass
261:30 - our Square function as a call back to
261:32 - for each we will now Square each number
261:34 - before displaying it 1
261:38 - 49625 then this time let's create a cube
261:43 - function function
261:45 - Cube raise our element to the power of
261:49 - three pass our Cube function as a call
261:52 - back to the for each
261:53 - method and now each number is cubed 1 8
261:57 - 27 64
261:59 - 125 let's create a more practical
262:03 - example I will create an array of fruits
262:07 - let fruits equals some fruit we have an
262:11 - apple we have an
262:13 - orange a
262:15 - banana and a coconut we'll create a
262:18 - function to display each
262:20 - element function display it's kind of
262:24 - like what we did
262:26 - before an element argument is going to
262:29 - be provided to us during each
262:32 - iteration let's console.log each element
262:37 - and then we will use the built-in for
262:40 - each method of our array fruits fruits.
262:43 - for each we will pass our function as a
262:47 - call back to display each element of
262:49 - this array Apple orange banana coconut
262:52 - let's create a function to make all of
262:54 - these strings
262:56 - uppercase
262:58 - function
263:01 - uppercase we'll need an element index
263:04 - and
263:05 - array element index array during each
263:09 - iteration let's take our array that we
263:13 - receive at the index of our index equals
263:18 - take the element that we receive use the
263:21 - two uppercase method so we have an
263:26 - uppercase function that utilizes the two
263:29 - uppercase method remember that a method
263:31 - usually belongs to something this method
263:34 - belongs to the element that we receive
263:36 - functions are Standalone before
263:39 - displaying each element within my array
263:40 - of fruits let's take our fruits array
263:43 - use the for each method then apply a
263:46 - call back to uppercase to make all of
263:48 - the elements uppercase before displaying
263:51 - them what I'm going to do is copy all of
263:53 - these elements so they will begin
264:00 - uppercase I'll create a lowercase
264:03 - function function lowercase
264:06 - we have our element index and array with
264:09 - this line of code we will use the two
264:12 - lowercase method within the for each
264:15 - method we will pass our lowercase
264:17 - function as a callback to make all of
264:20 - the elements
264:21 - lowercase let's set the elements of our
264:23 - array to be all lowercase
264:26 - again this will be a challenge
264:28 - round we will capitalize the first
264:31 - letter in each element of this
264:34 - array we will create a function
264:37 - function
264:43 - capitalize the element index and array
264:45 - arguments are going to be provided to us
264:48 - take our array that we receive at the
264:51 - current index set this equal to we're
264:54 - going to get the first character in each
264:56 - element we will take our
264:58 - element get the first character Char at
265:03 - index of zero method
265:07 - to
265:08 - uppercase to make this letter
265:11 - uppercase then we will strink
265:14 - catenate our
265:16 - element use the slice
265:18 - method we'll create a substring begin at
265:21 - index one this portion is going to
265:24 - create a substring of every character
265:27 - besides the first the first character
265:29 - we're going to make
265:31 - uppercase so now this should work so
265:33 - let's take our capitalize function pass
265:36 - it to the for each method and now the
265:39 - first character in each element is all
265:41 - uppercase all right everybody so that is
265:44 - the for each method it's used to iterate
265:46 - over the elements of an array and apply
265:49 - a specified function as a callback to
265:51 - each element you take your array use the
265:53 - for each method then pass a call back as
265:56 - an argument it's really useful if you
265:58 - need to apply a function to each element
266:00 - of this array and well everybody that is
266:02 - the for each method in
266:05 - JavaScript
266:07 - hey it's me again today I got to explain
266:09 - the map method in JavaScript the map
266:11 - method accepts a callback and applies
266:14 - that function to each element of an
266:16 - array it's very similar to the for each
266:19 - method however it returns a new array
266:22 - that's a key difference for example
266:24 - let's create an array of constants I'm
266:26 - picking constants just to demonstrate
266:28 - that we're not changing any elements in
266:30 - this array we have const numbers I'll
266:33 - select the numbers 1 through 5 to keep
266:35 - it simple
266:36 - I will create a function to square each
266:39 - number function
266:42 - Square we have one parameter we have an
266:45 - element all I'm going to do is return
266:51 - math.pow this will raise a base to a
266:53 - given power we are raising our element
266:56 - to the power of two then returning it
266:59 - we're going to take our array of numbers
267:02 - use the built-in map method then pass in
267:05 - our function as a call back the map
267:08 - method will return a new array we will
267:10 - create a new array to store the values
267:12 - that are returned so I will create
267:15 - const
267:18 - squares equals numbers. map and then
267:22 - let's display our squares I'll use
267:24 - console.log for now
267:26 - console.log our squares here are all the
267:30 - numbers squared 1 4 9 16 25 let's create
267:34 - a function to cube these these numbers
267:36 - now we'll copy and paste our Square
267:39 - function but change it to cube we'll
267:42 - raise our element to the power of
267:45 - three const cubes equals take our
267:50 - original array numbers dot use the map
267:53 - method pass in a call back to the
267:55 - function we would like to use
267:58 - Cube then we will console.log R array of
268:02 - cubes and we have some new numbers 1 8
268:05 - 27 64 125 the map method is very similar
268:10 - to four each but after completion the
268:12 - map method returns a new array we still
268:15 - have our original numbers whereas in
268:17 - four each we'll change them that's a key
268:20 - difference let's go over a new example
268:22 - we'll create an array of
268:24 - students const students
268:28 - equals for my first student I will pick
268:32 - SpongeBob then
268:34 - Patrick
268:38 - Squidward Sandy that's good enough I
268:41 - will create a function to make all of
268:43 - these strings
268:45 - uppercase
268:47 - function
268:49 - uppercase there is a single element
268:52 - remember the element is going to be
268:54 - provided for us with the map method
268:56 - element index and array but we only need
268:59 - element in this case I will return our
269:03 - element dot to uppercase method and
269:08 - that's it we'll create a new
269:11 - array students what can we name this uh
269:15 - students upper I suppose we will take
269:19 - our array of students use the map method
269:23 - pass in the function we would like to
269:25 - apply as a
269:26 - callback then I will
269:30 - console.log students
269:33 - upper within my array all of the
269:36 - students names are all uppercase let's
269:39 - create a function for
269:41 - lowercase function
269:43 - lowercase to lowercase I will create a
269:47 - new array const
269:50 - students lower equals the name of the
269:54 - array
269:55 - students map pass in our function as a
269:58 - call back then display the array of
270:01 - students lower now all of the names are
270:04 - now lowercase all right third example
270:08 - this one is more practical we'll create
270:10 - an array of dates const dates
270:15 - equals certain regions will order their
270:17 - dates differently for example you might
270:20 - have the year followed by a month then a
270:23 - day we're going to rearrange the order
270:26 - of these dates using the map method so
270:29 - come up with a few dates I picked 2024
270:32 - January 10th 2025
270:36 - February
270:39 - 20th
270:42 - 2026 March 30th feel free to rearrange
270:46 - these however you want I will create a
270:49 - function to
270:50 - format
270:53 - dates we have one parameter a single
270:56 - element within this function I will
270:58 - create a temporary array named Parts
271:02 - we're going to split each date into
271:04 - parts and it within an array within this
271:07 - function const Parts equals
271:12 - element. split we are going to split
271:15 - each element but where we are going to
271:18 - split at each dash for example with my
271:21 - first element we'll split this date into
271:24 - 2024 that will be the first element 1
271:28 - and 10 then we'll reformat these parts I
271:31 - will return a template string so I'm
271:34 - going to need some placeholders
271:36 - ERS so dollar sign curly braces let's
271:40 - take our array of parts at index of one
271:45 - that will be the month I live in the
271:47 - United States we arrange our dates with
271:50 - month then day then year I will place my
271:53 - month first forward slash let's include
271:57 - another
271:59 - placeholder Parts at index of two that
272:02 - will be the day of the month slash
272:07 - Parts at
272:10 - index0 that will be the year we will
272:13 - create a new
272:14 - array
272:16 - const
272:18 - formatted dates equals take our original
272:22 - array dates use the map
272:25 - method then pass the function name as a
272:28 - call back then after I will
272:31 - console.log our formatted
272:34 - dates and and here they are for me the
272:37 - dates are now January 10th 2024 February
272:40 - 2nd 2025 March 30th 2026 feel free to
272:44 - arrange these however you like all right
272:47 - everybody that is the map method it's
272:49 - very similar to the for each method the
272:51 - math method accepts a call back and
272:53 - applies that function to each element of
272:55 - an array however it returns a new array
272:57 - when it's finished that's nice if you
272:59 - need to preserve the original array that
273:01 - the elements came from and well
273:03 - everybody that is the map method in
273:05 - Javas
273:07 - script hey again everybody it's me big
273:10 - surprise there today I'm going to
273:11 - explain the filter method in JavaScript
273:13 - the filter method creates a new array by
273:16 - filtering out elements in this example
273:19 - we'll create an array of
273:22 - numbers we will filter out any numbers
273:25 - that are odd let's add the numbers 1
273:27 - through
273:30 - 7 now we need a
273:32 - function
273:34 - function is even we have one parameter
273:37 - we have an element that's going to be
273:39 - provided to us by the filter method we
273:42 - are going to return then write a
273:45 - condition we will take our element
273:48 - modulus 2 the modulus operator gives you
273:51 - the remainder of any division you can
273:53 - use modulus 2 to check to see if a
273:55 - number is even if this condition is zero
273:58 - strictly equal to zero then we will
274:02 - return true we will be returning a
274:04 - Boolean true or false the filter method
274:08 - will take any values that return true
274:10 - and stick them within a new array which
274:12 - will effectively filter out any elements
274:14 - we don't need that don't return true
274:16 - let's see if this works I will create a
274:18 - new array even nums equals take our
274:23 - original array use the filter method
274:26 - pass in a call back is even we will
274:31 - display
274:33 - console.log our new new array even
274:36 - numbers and there we are 2 4 6 let's do
274:41 - this with odd
274:42 - numbers function is
274:46 - odd take our element modulus 2 is this
274:51 - strictly not equal to zero that means
274:54 - the number is
274:55 - odd let's create a new array let odd
275:00 - nums equals our original array numbers
275:04 - do use the filter method passing a call
275:06 - back is odd let's check out our new
275:10 - array odd
275:12 - nums there we are we have the numbers 1
275:16 - 3 5 7 any numbers that are odd let's go
275:19 - over another
275:20 - example I will create an array of Ages
275:23 - I'll use const this time instead of let
275:26 - const ages Pretend We're teaching a
275:29 - college class we might have some
275:31 - students still in high school let's say
275:33 - a student is 16 another is 17 two or
275:37 - 18 19 20 and then we have somebody
275:41 - that's just a little bit older they're
275:43 - um 60 we'll use the filter method to
275:45 - filter out anybody that is under 18 we
275:48 - will find all of the adults we will need
275:51 - a function function is adult we have one
275:56 - element as a parameter that's going to
275:58 - be provided to us we will return a
276:03 - condition return
276:05 - check our element is it greater than or
276:08 - equal to
276:10 - 18 so that's our function let's create a
276:14 - new array of adults equals take our
276:18 - original array dot use the filter method
276:22 - pass in a call back is adult then
276:26 - display our new array
276:29 - console.log
276:31 - adults we have five elements the age of
276:34 - the students is 18 18 19 20 and 60 let's
276:38 - do this with is children to find anybody
276:41 - that's under
276:42 - 18 is child
276:45 - function return element less than 18
276:51 - we'll create a new array const children
276:55 - equals take our original array use the
276:58 - filter method passing a call back is
277:02 - child then display the new array we have
277:05 - two students that are children one is 16
277:08 - the other is 17 last example we'll
277:11 - create an array of words const
277:15 - words add some words I think I'll add
277:18 - some fruit I'll add an
277:21 - apple
277:23 - orange
277:25 - banana
277:28 - kiwi
277:32 - pomegranate and a coconut
277:36 - I will filter out any words where the
277:38 - length of that word is above six so we
277:41 - will create a function
277:44 - function get short
277:47 - words we have an element as a
277:51 - parameter we will return a condition we
277:54 - will check if our element access the
277:58 - length property of that element they're
277:59 - strings so they all have a length
278:01 - property how many characters are they
278:03 - long that's the length check to see if
278:06 - the length of this element is less than
278:08 - or equal to
278:09 - six if it is return true if not return
278:13 - false we will create a new array let's
278:16 - call this array short words equals take
278:21 - our array use the built-in filter method
278:24 - pass in a call back get short words then
278:28 - we will console. log the new array short
278:31 - words in our array there are four
278:34 - elements with the length of the
278:35 - characters of each string is six or
278:37 - under Apple orange banana kiwi then to
278:41 - finish this off let's get any long words
278:44 - we'll create a new
278:45 - function get long words check the length
278:50 - of the element to see if it's above six
278:53 - then we will create a new array const
278:56 - long words equals take our original
278:59 - array use the filter method pass in a
279:03 - call back get long words
279:05 - then we will display our new array long
279:08 - words within our original array there's
279:11 - two words that are considered long
279:12 - pomegranate and coconut these words each
279:15 - have more than six characters coconut is
279:18 - seven pomegranate is 11 all right
279:22 - everybody that is the filter method it
279:24 - creates a new array by filtering out
279:26 - elements your callback is likely going
279:28 - to checking condition does each element
279:30 - pass this condition and well everybody
279:33 - that is the filter method in Javas
279:36 - script what's going on everybody so in
279:39 - today's video I got to explain the
279:41 - reduced method in JavaScript the reduce
279:43 - method reduces the elements of an array
279:46 - to a single value in this example we'll
279:49 - create an array of prices as if it was a
279:51 - shopping cart we'll sum all of the
279:53 - prices within our shopping cart and
279:55 - return a total we'll need an array to
279:57 - work with const prices equals an array
280:02 - think of some prices type in anything as
280:04 - as long as it's a number I'll keep this
280:06 - simple and use whole numbers I'll add
280:09 - something that is $5 another that is 30
280:13 - 10
280:14 - 25 15 and 20 we will create a variable
280:19 - for a total const total equals take our
280:23 - array of prices we will use the built-in
280:26 - reduce method of arrays but we do need
280:29 - to pass in a call back to a
280:31 - function we need to create a function
280:33 - that will sum all of these
280:36 - values let's create a function to
280:40 - sum our sum function will have two
280:43 - parameters the first will be an
280:46 - accumulator the second will be the next
280:49 - element all we're going to do is return
280:53 - our
280:54 - accumulator plus our element I'll
280:57 - explain how this works momentarily I
280:59 - just want to be sure that everything
281:00 - runs fine first within the reduce method
281:02 - we'll pass in a call back to the sum
281:04 - function that will return a single value
281:08 - a total in this case let's see what our
281:10 - total is
281:12 - console.log I'll use a template string
281:15 - pick a unit of currency I'll pick
281:17 - American dollars add a placeholder let's
281:20 - display our total so my total is
281:25 - $15 if you would like to add cents to
281:27 - the end of that you can follow this with
281:29 - the two fixed method then add two
281:33 - decimal places for sense all right so
281:37 - how does this work exactly we have two
281:39 - parameters accumulator and element it
281:42 - might be easier if I were to rename
281:44 - these parameters you can rename
281:46 - parameters let's say accumulator is the
281:49 - previous
281:50 - element element is the next element
281:54 - we're returning the previous element
281:57 - plus the next element during the first
281:59 - iteration we'll have 0 and five well 0 +
282:05 - 5 would give us 5 five is returned to
282:08 - the accumulator whatever value is
282:11 - returned becomes the accumulator during
282:13 - the next iteration so now our
282:16 - accumulator is five the next element is
282:19 - 30 then we are going to return the
282:22 - accumulator + 30 which is 35 we'll
282:28 - return this to the accumulator during
282:30 - the next iteration the accumulator is
282:32 - now 35 the next El element is
282:35 - 10 35 + 10 would give us
282:40 - 45 return that to the accumulator and
282:43 - add the next element
282:45 - 25 so you just follow that
282:50 - pattern all right let's go over another
282:53 - example we'll create an array of grades
282:56 - const grades equals these will be some
283:00 - number grades 75 50 90 80 65 and 95
283:09 - we'll find the maximum value from this
283:11 - array we'll create a constant to hold
283:14 - the maximum value what is the maximum
283:17 - score const maximum equals take our
283:20 - grades array use the built-in reduce
283:23 - method then we need to pass in a call
283:25 - back to the reduce method we need a
283:28 - function to get
283:30 - Max there's two parameters an
283:33 - accumulator
283:36 - and the next element like I said feel
283:38 - free to rename them we will return the
283:42 - max method of math math. Max pass in
283:47 - these two parameters accumulator and the
283:50 - next
283:52 - element within the reduce method we'll
283:54 - pass in a call back to get
283:56 - Max the value returned will be the
283:59 - maximum grid from this array so let's
284:03 - console.log whatever the maximum is the
284:07 - maximum score from this array is
284:10 - 95 let's do this with the
284:13 - minimum let's copy this function change
284:16 - any instance of Max to
284:19 - Min get Min math.
284:23 - Min let's create a new constant const
284:27 - minimum equals our array of grades use
284:31 - the reduce method to return a single
284:33 - value then passing a call back to get
284:36 - min let's
284:39 - console.log the
284:42 - minimum the minimum score from this
284:44 - array is
284:46 - 50 all right everybody that is the
284:48 - reduce method it's a built-in method of
284:50 - arrays to reduce the elements of an
284:52 - array to a single value you can use it
284:55 - to sum the elements of an array another
284:58 - possibility is to find the minimum or
285:00 - maximum value from an array and well
285:02 - everybody that is the reduced method in
285:06 - JavaScript hey everyone so today I'm
285:09 - going to explain function expressions in
285:11 - JavaScript a function expression is a
285:13 - way to define functions as a value or a
285:16 - variable not to be confused with
285:18 - function declarations where you define a
285:21 - block of reusable code that performs a
285:23 - specific task we're already familiar
285:25 - with function declarations such as this
285:29 - function then you create a function name
285:31 - such as hello in this example let's
285:35 - console.log the
285:37 - word hello with the function expression
285:40 - we can assign a function to a variable
285:43 - or pass it as a value to another
285:44 - function so this time we're going to
285:47 - write a function expression I will
285:49 - create a constant named
285:51 - hello equals a function parentheses
285:55 - curly braces we'll do the same thing we
285:58 - will console.log hello and if I were to
286:02 - run this the identifier hello has
286:04 - already been declared so for now I'm
286:06 - just going to remove this function
286:08 - declaration all we're doing is assigning
286:10 - a function to a variable to use the
286:12 - function that's stored within we have to
286:14 - take our variable name and add a set of
286:16 - parentheses to invoke it kind of like
286:18 - it's a pair of telephones talking to
286:20 - each other hello using JavaScript we
286:23 - also have the capability of passing a
286:25 - function as a value I will introduce the
286:29 - set timeout
286:31 - function there's going to be two
286:33 - parameters
286:34 - a call back to a function and an amount
286:37 - of time we're going to wait then execute
286:40 - this function this will be in Mills
286:42 - 3,000 milliseconds translates to 3
286:45 - seconds let me put this function back
286:48 - after 3,000 milliseconds I will execute
286:52 - the hello
286:53 - function 1 2 3 hello instead of using a
286:58 - function declaration we are going to
287:01 - pass a function expression as an
287:03 - argument to the set timeout function
287:05 - instead of a call back we will create a
287:07 - function we will pass an entire function
287:10 - as an argument what are we going to do
287:13 - we will after 3 seconds
287:16 - console.log thee word hello and let's
287:20 - see if this works just to prove that I'm
287:22 - not a
287:23 - liar 1 2 3 hello in JavaScript it is
287:29 - legal to pass an entire function as an
287:31 - argument or treat it as a value
287:34 - we'll use previous examples of the map
287:36 - filter and reduce methods of arrays I
287:39 - will create an array const
287:42 - numbers equals the numbers 1 through six
287:46 - 1 2 3 4 5
287:49 - 6 I would like to square each of these
287:52 - numbers what we've done in a previous
287:54 - lesson is declare a function function
287:58 - Square we had one parameter in that
288:00 - example we had an
288:02 - element what we did is we
288:05 - returned
288:07 - math.pow to raise a base to a given
288:10 - power we're raising our element to the
288:12 - power of two the map method will return
288:16 - a new
288:17 - array const squares
288:21 - equals
288:23 - numbers. map we're passing in a call
288:26 - back to
288:28 - square then
288:31 - console.log squares
288:34 - this works we are using a function
288:38 - declaration but this time we will now
288:40 - use a function
288:42 - expression we will treat this function
288:44 - as a value let's cut this
288:47 - function replace the call
288:49 - back then paste it within the map method
288:53 - then we just need to remove the name we
288:55 - don't need a name and this is still
288:57 - going to
288:59 - work yeah it still does we don't
289:02 - necessarily need to think of a function
289:04 - name one of the benefits of doing this
289:05 - is that we're not polluting the global
289:07 - Nam space with function names we're only
289:09 - going to be using this function once
289:11 - there's no need to declare a function
289:13 - let's create a function expression to
289:15 - cube these numbers now as a beginner it
289:17 - might be helpful to write out your
289:18 - functions as a declaration first then
289:21 - transform it into a function
289:23 - expression function
289:26 - Cube we have our element as a
289:29 - parameter I'm going to copy this return
289:32 - math.pow element to the power of three
289:37 - we will create a new array const cubes
289:42 - equals
289:44 - numbers. map we don't need to pass in a
289:47 - call back we will cut this entire
289:50 - function paste it within the map method
289:53 - then we don't need the
289:54 - name then console.log cubes there are
289:58 - all the original numbers cubed all right
290:01 - I think we're starting to get the hang
290:02 - of this let's quickly use the filter
290:04 - method to filter out any even or odd
290:07 - numbers I will create const even nums
290:12 - equals take our array numbers we will
290:14 - use the filter
290:16 - method then we will pass a function
290:19 - expression as an
290:21 - argument there's one parameter an
290:25 - element we are going to
290:27 - return element modulus 2 to see if it's
290:31 - divisible by zero is is the result
290:34 - strictly equal to zero let's see if this
290:38 - works console.log even nums there they
290:41 - are we have 2
290:43 - 46 let's do this with odd
290:46 - numbers odd nums use the filter method
290:50 - again all we're going to change is
290:52 - strictly not equal to
290:54 - zero return any odd
290:57 - numbers
290:59 - 135 then lastly reduce we will sum all
291:02 - of the elements of the
291:06 - array const total equals our
291:11 - numbers do
291:14 - reduce pass in a function
291:18 - expression we have two parameters an
291:22 - accumulator and an
291:24 - element we will
291:26 - return
291:28 - accumulator plus our
291:30 - element return the total which is
291:35 - 21 we already do have some practice with
291:38 - map filter and reduce instead of using
291:40 - function declarations than passing a
291:42 - call back we can pass an entire function
291:45 - expression as an argument to these
291:47 - methods in the next topic I'll discuss
291:49 - Arrow functions which shortens the
291:51 - syntax even further you'll like Arrow
291:53 - functions all right everybody so those
291:55 - are function Expressions they are a way
291:58 - to define functions as a value or a
292:00 - variable we've both defined a function
292:03 - expression as a variable we stored that
292:05 - within this hello variable we've also
292:07 - passed entire functions as an argument
292:10 - which you can do with JavaScript there's
292:11 - a few benefits of function Expressions
292:13 - one of which is you don't need to keep
292:15 - on thinking of function names you can
292:17 - perform a function once then just forget
292:19 - about it they're also used in callbacks
292:21 - and asynchronous operations higher order
292:24 - functions closures and event listeners
292:26 - these are topics we still need to
292:28 - discuss but we will be using function
292:30 - Expressions a lot don't worry we will
292:32 - have more practice and well everybody
292:34 - those are function expressions in
292:38 - JavaScript hey hello there so today I'm
292:41 - going to explain Arrow functions in
292:42 - JavaScript an arrow function is a
292:45 - concise way to write a function
292:46 - expression it's good for simple
292:49 - functions that you only use once here's
292:51 - the formula you have your parameters
292:53 - Arrow then some code you would like to
292:55 - perform here's an example suppose I have
292:58 - a function declaration I have the hello
293:02 - function I'll work going to do is
293:05 - console.log the word hello to use this
293:09 - function I need to call it by its name
293:11 - add a set of parenthesis this will
293:13 - display the word hello a concise way to
293:15 - write the same function is to use an
293:17 - arrow function we'll begin with a
293:19 - function expression then convert it to
293:21 - an arrow function just so we understand
293:23 - the differences this time I will create
293:25 - a constant hello hello is going to be a
293:29 - constant that stores our function
293:31 - expression if I were using a a function
293:34 - expression we would say function
293:36 - parenthesis curly braces then the code
293:39 - we want to perform console.log the
293:43 - word hello this would do the same thing
293:48 - hello a more concise way to write this
293:50 - function expression would be to use an
293:52 - arrow
293:54 - function following this formula we list
293:57 - our parameters we don't have any we need
293:59 - a set of parenthesis Arrow then some
294:02 - code we would like to perform I'm going
294:04 - to console.log the word
294:08 - hello and that
294:10 - works we're sticking an arrow function
294:12 - within a variable or named constant to
294:15 - invoke the arrow function within we just
294:17 - follow that constant or variable with
294:19 - the set of parentheses like we're
294:20 - calling it as if it's a pair of
294:22 - telephones talking to each other you can
294:24 - send some arguments to an arrow function
294:27 - we'll need to set up the parameters I
294:29 - will have a name parameter within our
294:31 - code let's console.log
294:34 - I'll use a template string hello add a
294:37 - placeholder add my name
294:40 - parameter now I need to pass in an
294:42 - argument because right now it's hello
294:45 - undefined pass in your first name as an
294:48 - argument hello bro within your code if
294:52 - you need to include more than one
294:54 - statement you'll need to enclose all of
294:56 - that code within a set of cly
294:58 - braces let's add a new
295:01 - line console
295:04 - log you are
295:07 - old hello bro you are
295:09 - old okay let's set up another parameter
295:12 - this time we will accept an age
295:16 - argument let's transform our second
295:19 - console.log to be you are at a
295:24 - placeholder our parameter
295:26 - age years
295:29 - old now we'll pass in a second argument
295:32 - for age
295:33 - hello bro you are 25 years old so that's
295:37 - the basics of an arrow function you have
295:38 - your parameters Arrow then some code you
295:41 - would like to perform there's no need to
295:43 - create a function
295:44 - declaration let's go over another
295:47 - example we have the set timeout
295:50 - function this function accepts a call
295:53 - back then a given amount of time we are
295:56 - then going to execute this code this
295:58 - callback after 3 seconds 3,000
296:02 - milliseconds I will execute whatever
296:04 - this call back is let's create a
296:06 - function to say hello again function
296:11 - hello we will
296:13 - console.log the word hello I will pass
296:17 - in a call back after 3 seconds we
296:22 - say hello in place of a callback I could
296:25 - use a function expression let's cut our
296:31 - function remove this argument then paste
296:34 - our function expression remember we
296:37 - don't need the name for a function
296:38 - expression this works as
296:41 - well hello or otherwise we can use a
296:45 - more concise Arrow function we will pass
296:48 - that as an argument we have our
296:50 - parameters we don't have any Arrow then
296:53 - some code
296:55 - console.log the word hello after 3
296:59 - seconds we display the
297:01 - word hello
297:04 - now we'll use Arrow functions with map
297:05 - filter and
297:07 - reduce we have an array of numbers const
297:11 - numbers equals the numbers 1 through
297:17 - six let's start with using the map
297:20 - filter to square each of these numbers
297:23 - but we will use Arrow
297:25 - functions const
297:30 - squares equals our original array number
297:33 - numbers. map normally we would pass in a
297:36 - callback as an argument but we're not
297:39 - going to do that we'll use an arrow
297:41 - function we have one
297:45 - parameter an
297:47 - element
297:49 - arrow take each element use
297:53 - math.pow to raise our element to a given
297:57 - power then let's console.log our
298:00 - squares console.log squares
298:04 - there they are here are all the original
298:06 - num squared 1 4 9 16 25
298:10 - 36 let's Cube each
298:14 - number const
298:17 - cubes raise our element to the power of
298:20 - three console.log are
298:22 - cubes there are all the numbers
298:26 - cubed we'll use the filter method to
298:28 - filter out any numbers that are odd
298:31 - const even nums equals rray
298:36 - numbers we will use the filter method we
298:40 - can pass in a call back but we don't
298:41 - need to we will pass in an arrow
298:45 - function we have our element as a
298:48 - parameter
298:50 - Arrow we don't necessarily need a return
298:52 - statement if we have only one line of
298:56 - code take our element modulus 2 is it
299:00 - divisible by two and does the strictly
299:03 - equal Z if it does it's an even number
299:07 - let's console.log our even numbers 2 46
299:11 - let's do this with odd
299:14 - numbers odd
299:17 - nums take our element modulus 2 is it
299:21 - strictly not equal to
299:23 - zero display our odd nums 1
299:27 - 35 and lastly let's do reduce we will
299:31 - get a total by summing all all the
299:33 - elements of this array const total
299:36 - equals our original array reduce pass in
299:41 - a call back or an arrow function this
299:44 - time we have two arguments an
299:47 - accumulator and an
299:50 - element we have an
299:53 - Arrow return our accumulator plus our
299:58 - element then display the
300:01 - total our our total is
300:04 - 21 all right everybody so those are
300:06 - Arrow functions they're a concise way to
300:08 - write a function expression they're good
300:10 - for simple functions that you only use
300:13 - once you list your parameters within a
300:15 - set of parentheses an arrow then some
300:18 - code you would like to perform in this
300:21 - example we've written a more concise way
300:23 - to use the map filter and reduce methods
300:25 - normally we can pass in a call back as
300:27 - an argument a function expression or an
300:30 - arrow function and well everybody those
300:32 - are Arrow functions in
300:39 - JavaScript hey what's going on everybody
300:41 - in today's video I'm going to discuss
300:43 - objects in JavaScript an object is a
300:46 - collection of related properties and or
300:49 - methods properties are things that an
300:51 - object has such as a first name or an
300:54 - age a method is a function that belongs
300:57 - to an object for example I have a person
301:00 - object our person can say hello and they
301:03 - can say by methods are just functions
301:05 - that belong to an object what can this
301:07 - object do objects can represent Real
301:10 - World objects such as people products or
301:13 - places in this example we'll be creating
301:15 - some people objects people from the show
301:18 - SpongeBob we'll start from scratch
301:20 - though we'll create a person object I'll
301:23 - use a constant although it's not
301:25 - necessary const person equals then add a
301:29 - set of curly
301:30 - braces we'll start with any property
301:32 - properties you can add as many
301:34 - properties as you would like they're in
301:36 - key value pairs this person will have a
301:39 - first name key colon then some value
301:43 - this person's first name will be
301:46 - SpongeBob separate each key value pair
301:48 - with a comma let's include a last name
301:51 - property last name colon space will be
301:55 - Square Pants add a comma when you're
301:57 - done with this key value pair We'll add
302:00 - an age property of 30 age has a
302:03 - different data type it's a number the
302:05 - first two in my example were both
302:07 - strings SpongeBob and Square Pants let's
302:10 - add a Boolean is
302:14 - employed col in space I will set that to
302:17 - be true he has a job at the Crusty Crab
302:20 - okay that's good enough for now I would
302:22 - like to access these properties let's
302:26 - console.log if I need one of these
302:28 - properties take the object you're
302:30 - referring to in this case person dot the
302:33 - name of the property let's do first name
302:36 - person. first name property that would
302:38 - give me SpongeBob let's do this with
302:41 - last name take the object name dot the
302:44 - name of the property person. last name
302:47 - is
302:48 - SquarePants let's do this with age
302:51 - person. AG is
302:54 - 30 person. is
302:57 - employed is set to true all right let's
303:01 - create another object we'll create an
303:03 - object for
303:05 - Patrick const person now objects can't
303:08 - have the same name objects need
303:11 - different names for example I can't have
303:13 - two person objects they can't have the
303:15 - same name syntax error identifier person
303:18 - has already been declared I will rename
303:20 - our first person as person one our
303:23 - second person will be person two then
303:26 - any place in which I'm referencing
303:28 - person will now need to be person
303:31 - one
303:33 - let's reuse these same key value pairs
303:36 - person two's first name will be
303:38 - Patrick his last name will be star
303:42 - Patrick will be I don't know how old he
303:44 - is according to the TV series let's say
303:46 - he's
303:47 - 42 is Patrick employed no he just
303:51 - watches TV all day now I would like to
303:54 - access person 2's
303:57 - properties okay well
303:59 - console.log person 2's first name person
304:02 - 2's last name Person 2's age person two
304:06 - is
304:07 - employed okay for person two we have
304:09 - Patrick Star 42
304:13 - false so those are properties of an
304:15 - object they're key value pairs add as
304:18 - many as you would like in this example
304:20 - these properties mimic real world
304:22 - attributes that a person might have like
304:24 - a first name last name age whatever you
304:27 - can think of but not only that objects
304:29 - can have dedicated functions that we
304:31 - refer to as methods what sorts of
304:34 - actions can these objects perform for
304:36 - example a person could eat they could
304:38 - drink they could sleep what sorts of
304:41 - things do people do so just to keep this
304:43 - simple I am going to create a function
304:46 - to say hello we'll start with person
304:49 - one say
304:51 - hello col in space this will be a
304:55 - function
304:56 - expression what are we going to do when
304:59 - we invoke this function let's
305:01 - console.log
305:04 - what would SpongeBob say if he's
305:06 - greeting somebody hi I'm
305:10 - SpongeBob be sure you're not including a
305:12 - semicolon at the end that should work
305:15 - let's test
305:18 - it I'm going to have person one invoke
305:22 - their say hello
305:25 - method hi I'm SpongeBob let's add a say
305:28 - hello method to Patrick person
305:31 - two
305:33 - we'll change the output if say hello
305:35 - what would Patrick
305:37 - say
305:40 - hey I'm Patrick dot dot dot now we'll
305:44 - have person two use their say hello
305:47 - method hey I'm Patrick you can add as
305:50 - many methods as you would like so with
305:52 - these functions we're using a function
305:54 - expression if you prefer you could even
305:56 - use an arrow
305:58 - function list your
306:00 - arguments Arrow then the code you would
306:03 - like to perform this would work
306:06 - too let's add an eat method eat
306:12 - function we'll use a function expression
306:14 - for
306:16 - SpongeBob let's console.
306:19 - log what is SpongeBob eating I am eating
306:23 - a crabby
306:26 - patty we'll include an eat function for
306:28 - Patrick as
306:29 - well what's Patrick going to eat Patrick
306:33 - is
306:34 - eating I'm
306:36 - eating roast
306:38 - beef chicken and
306:41 - pizza and if you would like you can use
306:44 - an arrow function for this
306:45 - example list your parameters Arrow then
306:49 - the code you would like to
306:52 - perform it's not necessary but I do like
306:54 - Arrow functions person one SpongeBob
306:57 - will use his eat method same thing goes
307:00 - with Patrick person two
307:03 - so SpongeBob is eating a crabby patty
307:05 - Patrick is eating roast beef chicken and
307:09 - Pizza all right everybody so JavaScript
307:11 - objects are a collection of related
307:13 - properties and or methods properties are
307:17 - what an object has methods are functions
307:20 - that an object can perform they can
307:23 - represent Real World objects such as
307:25 - people products or places properties are
307:28 - key value pairs methods are functions
307:31 - that belong to another object and well
307:33 - everybody that is an introduction to
307:35 - object-oriented programming in
307:39 - JavaScript hey so we got to talk about
307:42 - this this is a keyword it's a reference
307:45 - to the object where this is used the
307:48 - object depends on the immediate context
307:51 - if we had a person object and we're
307:53 - accessing their name property we could
307:55 - replace person with this as long as
307:58 - we're within the context of that person
308:00 - object we'll create an object
308:02 - const person
308:05 - one let's add a property for name the
308:08 - name will be
308:11 - SpongeBob and a favorite food property
308:14 - fave food SpongeBob likes hamburgers
308:18 - more specifically Krabby
308:20 - Patties I will give SpongeBob a say
308:23 - hello method this will be a
308:26 - function all we're going to do is
308:30 - console.log I'll use a template
308:33 - string hi I am I'll use a placeholder
308:37 - let's attempt to use person one's name
308:41 - let's see what
308:42 - happens let's take our object of person
308:45 - one I will invoke their say hello method
308:50 - let's see what happens hello I am and
308:54 - there's nothing here for the name inside
308:56 - of this object of person one if I would
308:59 - like to access one of these properties
309:01 - I'm going toe received the property with
309:04 - this this do the name of the property
309:07 - and that should work hi I'm
309:10 - SpongeBob we're using this within the
309:13 - context of person one it would be like
309:15 - us saying person one. name there would
309:19 - be no difference this is a reference to
309:22 - the object we're within if I said this
309:25 - do favorite food well favorite food for
309:28 - short hi I am hamburgers it would be
309:32 - like like us saying person one. fave
309:35 - food let's add another method I will add
309:38 - an eat
309:43 - method let's
309:46 - console.log I'll use another template
309:49 - string add a
309:51 - placeholder
309:54 - this.name is eating add another
309:58 - placeholder this. fave food
310:03 - let's have person one use their eat
310:06 - method SpongeBob is eating hamburgers
310:09 - the cool thing about the this keyword is
310:12 - that if we create a new object with
310:14 - these same methods we'll use the second
310:16 - object's properties let's copy person
310:20 - one paste change person one to person
310:23 - two the name for person two will be
310:26 - Patrick favorite food will be
310:29 - Pizza let's have person two use their
310:32 - eat
310:34 - method SpongeBob is eating hamburgers
310:37 - Patrick is eating pizza since we're in
310:39 - the context of person two now imagine
310:41 - we're replacing this with person
310:44 - two person 2.n name Person 2. fave
310:49 - food if you were to use this outside of
310:52 - any objects I'm going to console.log
310:57 - this what we're returned with is a
310:59 - window object basically we're returning
311:02 - the window to see our website
311:05 - technically we're inside of an object
311:06 - already our window object and we have
311:10 - all of these
311:11 - properties but since we're using the
311:14 - this keyword inside the context of
311:15 - person one and person two we'll instead
311:18 - make a reference to those objects hey
311:21 - one thing I forgot to mention the this
311:23 - keyword doesn't work with arrow
311:24 - functions for example with person two
311:27 - let's convert this to an arrow
311:30 - function
311:35 - blank is eating undefined when you use
311:39 - this within an arrow function it's
311:41 - making a reference to that window object
311:43 - still our window object does have a name
311:45 - that's why it's appearing empty but fave
311:47 - food is undefined because our window
311:49 - object doesn't have a favorite food
311:51 - property all right everybody so that is
311:53 - the this keyword we will be using this
311:56 - keyword a lot all it is is a reference a
311:59 - reference to the object where this is
312:01 - used and that is the this keyword in
312:06 - JavaScript what's up people so today I
312:08 - got to explain Constructors in
312:10 - JavaScript a Constructor is a special
312:13 - method for defining the properties and
312:15 - methods of objects in Prior videos we've
312:18 - constructed objects like this we would
312:20 - declare an object assign it some
312:22 - properties and some methods you know
312:24 - this works but what if we have to create
312:26 - a lot of objects here I'm manually
312:28 - creating three different car objects
312:31 - that can be a lot lot of work what we
312:33 - could do instead is use a Constructor to
312:35 - construct these objects automatically
312:38 - all we have to do to construct these
312:39 - objects is passing some unique data to
312:41 - the Constructor to construct these
312:43 - objects here's an example we are going
312:46 - to create a function
312:48 - car do pay attention to the
312:52 - capitalization we'll need to set up some
312:54 - parameters what sorts of properties will
312:56 - we accept when we construct a car object
312:59 - how about a make model
313:02 - year and
313:04 - color these are arguments we'll receive
313:07 - when we construct a car object to assign
313:09 - these properties we're going to use the
313:12 - this keyword doake equals the make that
313:16 - we
313:17 - receive let's do this with model this
313:20 - dood model equals the model we
313:24 - receive this doe equals year this do
313:29 - color equals color
313:32 - that's good enough for now our car
313:34 - Constructor is a reusable method where
313:37 - we can define the properties and methods
313:39 - of objects we create to use this
313:41 - Constructor I will create an instance of
313:43 - an
313:44 - object I will use const car1 will be our
313:47 - first object equals we'll need to use
313:50 - the new keyword type the name of the
313:52 - Constructor car car is a special method
313:56 - we'll need to pass in some arguments
313:58 - we'll need a make model year and color
314:00 - in that order my first car feel free to
314:03 - send some different data to the
314:04 - Constructor but for me my first car will
314:07 - be a
314:09 - Ford make sure each value is comma
314:12 - separated Mustang the year will be
314:15 - 2024 and the color will be
314:19 - red we should now have a car object with
314:21 - the name of car one and I'm going to
314:24 - console. log car 1's properties car 1.
314:29 - make Ford let's do this with the other
314:32 - properties we have
314:33 - model
314:37 - Mustang
314:38 - year
314:42 - 2024 and color red now this method is
314:47 - reusable we can reuse it to create other
314:49 - car
314:50 - objects let's create const Car 2 equals
314:55 - new car we'll pass in different data
314:57 - this time the make will be Chevrolet
315:04 - I will pick a
315:05 - Camaro the year
315:07 - 2025 and the color will be blue now I
315:11 - can display car 2's
315:13 - properties let's select car 2make car 2.
315:17 - model car 2. year car 2.c color we have
315:20 - a Chevy Camaro year 2025 the color is
315:23 - blue let's create one more car same
315:26 - process as before const car 3 equals new
315:33 - car I'll go with a
315:36 - Dodge
315:38 - Charger the year
315:40 - 2026 and the color will be
315:45 - silver let's access K 3's properties car
315:48 - 3. make car 3. model car 3. year car
315:52 - 3.ol Dodge Charger 2026 the color is
315:55 - silver another thing with these
315:57 - parameters too you can name these
315:58 - parameters anything when we assign these
316:01 - properties it can be kind of confusing
316:03 - like this. make equals make really we
316:05 - write our Constructors this way just for
316:07 - readability technically this would work
316:09 - if we renamed our parameters for example
316:12 - make will be parameter a model will be B
316:15 - year is C color is D then be sure to
316:18 - change these when we assign them A B C D
316:23 - this would still work however this
316:25 - Constructor isn't as readable like what
316:28 - the heck is a b c and d it would be good
316:30 - practice to clear clearly Define our
316:32 - parameters for readability purposes all
316:36 - right now let's add a
316:37 - method we'll take this.
316:41 - Drive equals a
316:47 - function we
316:49 - console.log I'll use a template string
316:53 - you drive the I'll add a
316:57 - placeholder this do
317:00 - model
317:01 - With Cars 1 through three let's use the
317:04 - drive method car 1.
317:07 - drive you drive the
317:11 - Mustang car 2. drive you drive the
317:14 - Camaro and car 3.
317:17 - drive you drive the charger all right
317:20 - everybody so that's a Constructor it's a
317:22 - special method for defining the
317:24 - properties and methods of objects it
317:26 - helps with code reusability we can reuse
317:28 - it to create many objects instead of
317:31 - having to type them all out manually and
317:33 - well everybody those are Constructors in
317:37 - JavaScript all right let's do this thing
317:40 - so I got to talk about classes and
317:41 - JavaScript classes are an es6 feature
317:45 - that provides a more structured and
317:46 - cleaner way to work with objects
317:49 - compared to the traditional Constructor
317:51 - functions that we're normally used to
317:53 - classes are going to be really helpful
317:55 - when we reach future topics such as the
317:57 - static keyword encapsulation and
318:00 - inheritance in this example I have a
318:02 - Constructor for a product our product
318:05 - needs a name and a price for example we
318:07 - have a shirt and the price is 1999
318:10 - instead of using a Constructor method
318:12 - we're instead going to use a class our
318:15 - class will include a
318:17 - Constructor so let's start from the
318:19 - beginning to create a class you type
318:21 - class then the name of the object so our
318:24 - class is going to serve as a blueprint
318:27 - our objects will be products then add a
318:30 - set of curly BRAC
318:32 - to use a Constructor we can use the
318:34 - Constructor keyword within our
318:36 - class list any parameters we will have a
318:39 - name and a price for each product we
318:43 - will assign the properties of this.name
318:46 - equals the name parameter that we
318:49 - receive this. price equals
318:53 - price I will also create a
318:55 - function our function will be display
319:00 - product now in inside of a class you
319:02 - don't need to use the function
319:04 - keyword when we would like to display
319:06 - this product we will
319:10 - console.log product colon space I'll
319:13 - include a
319:14 - placeholder
319:18 - this.name let's also output the
319:21 - price price pick a unit of currency I'll
319:24 - use American
319:26 - dollars this do price let's create some
319:30 - product object
319:31 - objects const product one equals to
319:36 - create a new object we have to use that
319:38 - new keyword the name of the class
319:41 - product The Constructor is going to be
319:43 - called automatically but we do need to
319:45 - pass in a name and a price as
319:48 - arguments we will pass in a shirt the
319:52 - price will be
319:55 - $19.99 just to be sure that everything
319:57 - works let's invoke the display product
320:00 - method product one do display product
320:04 - method here are the details of our
320:07 - product object product shirt priced
320:11 - $19.99 let's create a few more so this
320:14 - class is
320:17 - reusable product
320:19 - two will be
320:22 - pants I'll pick 2250 for the
320:26 - price let's display product two product
320:30 - two and we will use use the display
320:31 - product method of our
320:33 - class product pants the price is
320:37 - $22.50 uh looks like I only have one
320:39 - decimal point I'm going to make one
320:41 - change after the price I will use the
320:44 - two fixed method and set this to be two
320:48 - decimals there
320:50 - 2250 all right product three const
320:54 - product 3 equals new
320:57 - product our third product is going to be
321:00 - underwear
321:02 - this underwear is really expensive it's
321:04 - $100 it's really good underwear guys
321:08 - product 3. display product product
321:11 - underwear price
321:13 - $100 here's a challenge round I'm going
321:16 - to add another method this method will
321:18 - have one parameter sales tax we'll
321:21 - create a method to calculate a total
321:23 - including tax so let's create a new
321:25 - method inside of a class we don't need
321:27 - the function keyword calculate total
321:31 - there will be one parameter sales
321:35 - tax all we're going to do is return
321:39 - this. Price Plus to calculate the sales
321:43 - tax we'll take this. price times the
321:47 - sales tax assuming it's a
321:51 - percentage okay let's display product
321:53 - one product one. display product I'm
321:56 - also going to create a constant for the
321:58 - sales tax that's not going to change
322:01 - const sales tax let's say the sales tax
322:05 - is 5%
322:08 - 0.05 I will create a variable const
322:12 - total equals let's take product one use
322:17 - the calculate total method but we have
322:19 - to pass in sales tax we can either pass
322:22 - in this number or this
322:25 - variable once we have our total let's
322:28 - display it console.log
322:32 - I'll use a template
322:34 - string total price in parentheses with
322:41 - tax I'll add a
322:43 - placeholder display the total pick a
322:46 - unit of currency I'll use American
322:48 - dollars then I'll add two fixed two to
322:51 - set it to two decimal
322:54 - places all right our product is a shirt
322:56 - price is $1 199.99 total price with tax
322:59 - is $20.99 9 let's do this with product
323:03 - two product two. display product product
323:06 - two. calulate
323:08 - total pants 2250 total price
323:12 - 2363 let's check out our really
323:14 - expensive underwear product 3. display
323:17 - product product 3. calculate total our
323:21 - underwear is $100 including sales tax
323:24 - it's
323:25 - $115 all right everybody so those are
323:27 - classes they're an es6 feature that
323:30 - provide a more structured and cleaner
323:32 - way to work with objects compared to the
323:35 - traditional Constructor functions that
323:37 - we learned about in the last video
323:39 - classes are going to be really helpful
323:40 - with a few upcoming topics and well
323:42 - everybody those are classes in
323:46 - JavaScript hey people let's do this
323:48 - thing so the static keyword static is a
323:51 - keyword that defines Properties or
323:53 - methods that belong to a class itself
323:56 - rather than the objects created from
323:58 - that class in summary a class own own
324:01 - anything static not the objects so what
324:03 - we're going to do is create a class for
324:05 - math
324:06 - utilities class math util for
324:11 - short we'll create our own version of Pi
324:14 - we'll use the static keyword the name
324:17 - will be Pi Pi will equal
324:21 - 3.14159 just the first few digits I'm
324:24 - going to zoom in a little if I would
324:27 - like the static property I have to
324:29 - access it by its class so let's
324:32 - console
324:34 - llog the name of the class math util dot
324:39 - the name of the property Pi our static
324:42 - property is
324:45 - 3.14159 I don't need to create an object
324:47 - in order to use this property I don't
324:50 - have to type const math UIL one equals
324:55 - new math
324:58 - youtil I would have to type math util
325:00 - one that's the name of this object in
325:02 - order to access Pi all I have to do is
325:04 - type the name of the
325:06 - class and that's pretty convenient
325:08 - anything declared as static belongs to
325:11 - the class itself and not any object
325:13 - created from that class so now we're
325:15 - going to create a static
325:17 - method we'll use the static keyword
325:21 - we'll get a diameter once we pass in a
325:22 - radius as an argument get
325:26 - diameter we have one parameter a radius
325:31 - all we're going to do is return
325:34 - radius time
325:36 - 2 okay let's
325:38 - console do log again we have to type the
325:42 - name of the class Matthew till dot the
325:45 - name of the method get
325:47 - diameter we have to pass in a radius
325:50 - though let's pass in
325:52 - 10 our diameter is 20 let's create a new
325:56 - static method for get
325:58 - circumference get
326:03 - circumference the formula is going to be
326:06 - we will be returning 2
326:10 - times this meaning Matthew
326:14 - till.
326:17 - pi times the radius we
326:20 - receive let's
326:24 - console.log let me make the C Capital
326:28 - the name of the class Matthew till dot
326:31 - get
326:32 - circumference pass in a
326:36 - radius the circumference is
326:39 - 62.83 let's create one more for get
326:42 - area static get area we need a
326:49 - radius we will
326:52 - return this
326:55 - Pi time
326:57 - radius time radius so that's Rus
327:04 - squared
327:06 - console.log Matthew till the name of the
327:08 - class get area pass in 10 and the area
327:12 - is
327:15 - 31415 in the next example we'll have a
327:18 - mix of regular properties and methods
327:20 - and static properties and methods this
327:23 - will be example
327:24 - two we'll create a class of users class
327:29 - user
327:32 - we'll create a static variable to keep
327:34 - track of the amount of users we
327:36 - create user count I will set that equal
327:40 - to
327:41 - zero I'll include a
327:44 - Constructor let me just space this out a
327:47 - little our Constructor is going to be
327:50 - automatically called when we instantiate
327:52 - a new object we need one argument though
327:54 - when we create a new user we need a
327:57 - username once we have our username we
328:00 - will assign this do username equals
328:05 - username not only that but when we
328:07 - create a new user I'm going to increase
328:10 - our user count by one just so we can
328:13 - keep track of how many users we create
328:16 - so inside of the Constructor you can
328:17 - write additional code it's not only for
328:19 - assigning
328:20 - properties let's take
328:23 - user do user
328:26 - count Plus+ to increment
328:29 - it let's create some user
328:33 - objects const user one equals new user
328:38 - pass in a username I'll pass in
328:43 - SpongeBob then let's
328:46 - console.log user one's
328:49 - username which is
328:52 - SpongeBob let's attempt to access user
328:55 - one's user
328:57 - count with user one's user count we get
329:01 - undefined that's because our user
329:03 - doesn't have user count as a property
329:06 - it's static that means it belongs to the
329:08 - class not any objects created from the
329:10 - class to access user count we have to
329:13 - type the name of the
329:15 - class user in this case we have one
329:19 - user let's see what happens when I
329:21 - create a new user
329:23 - object user 2 will
329:26 - equal
329:28 - Patrick our user count is now two
329:31 - let's display user 2's
329:32 - name yep we have SpongeBob and Patrick
329:35 - the total user count is
329:37 - two let's create a third
329:40 - user user three will be
329:44 - Sandy
329:46 - console.log user 3.
329:50 - username our user count is now
329:52 - three we have a static property that's
329:55 - keeping track of the amount of users we
329:57 - create let's create a method the first
330:01 - one will not be static say
330:04 - hello all we're going to do is
330:09 - console.log I'll use a template
330:11 - string hello my
330:15 - username is I'll add a
330:17 - placeholder this do
330:23 - username let's have user one use there
330:27 - say hello
330:29 - method
330:31 - same thing with user two and user
330:35 - three hello my username is
330:38 - SpongeBob Patrick and Sandy now we'll
330:41 - create a static method we'll get the
330:44 - user
330:45 - count get user
330:50 - count
330:54 - console.log I'll use a template
330:57 - string there are
331:00 - I'll add a
331:02 - placeholder
331:04 - user. user
331:08 - count users
331:11 - online now in order to access this
331:13 - method I have to type the name of the
331:16 - class user. getet user
331:21 - count oops and I can't conso that log
331:24 - that user. getet user
331:28 - count there are three users online all
331:31 - right everybody so that is the static
331:32 - keyword it defines properties and
331:34 - methods that belong to a class itself
331:37 - rather than any objects created from
331:39 - that class in summary the class owns
331:42 - anything static not the objects and well
331:45 - that is the static keyword in
331:49 - JavaScript hey what's up everybody so in
331:52 - today's video I got to explain
331:53 - inheritance inheritance allows a new
331:56 - class to inherit properties and methods
331:58 - from an existing class these two classes
332:01 - have a parent child relationship a child
332:03 - will inherit properties and methods from
332:05 - a parent it's kind of like a family tree
332:08 - a child will inherit genes from a parent
332:11 - inheritance helps with code reusability
332:13 - because we don't need to keep on
332:14 - repeating the same properties and
332:15 - methods if all the children share them
332:18 - here's an example we'll create an animal
332:20 - class class
332:23 - animal will have a property of alive if
332:26 - you're an animal you start off being
332:28 - alive all animals should be able to eat
332:31 - and sleep we'll create methods for
332:33 - those we'll have an eat method all we're
332:37 - going to do is
332:39 - console.log I'll use a template
332:42 - string this now I'll add a
332:46 - placeholder this do
332:49 - name is
332:52 - eating and a Sleep
332:56 - Method
332:57 - sleep this this.net name is
333:02 - sleeping animal will be the parent class
333:05 - we'll create children classes that
333:07 - inherit these properties and methods
333:09 - let's create a few children classes
333:12 - class rabbit our rabbit class will
333:15 - inherit all the properties and methods
333:17 - of the animal class to declare a parent
333:19 - child relationship the child will
333:23 - extends the parent
333:26 - animal for the rabbit I'm going to give
333:28 - this class A Name
333:30 - name equals rabbit this will be a
333:33 - property if you're familiar with the
333:35 - static keyword you can make the static
333:38 - now we'll create a fish class that also
333:40 - extends animal class fish
333:45 - extends
333:46 - animal fish will have one property name
333:50 - equals
333:52 - fish and a hawk class class Hawk
333:58 - extends animal
334:01 - will have one name
334:03 - property
334:05 - Hawk all right let's see if this works
334:08 - if we create a rabbit fish and Hawk
334:10 - object they should have access to these
334:12 - properties and
334:15 - methods let's create const rabbit equals
334:20 - new
334:22 - rabbit
334:24 - const fish equals new
334:28 - fish
334:31 - const Hawk equals New
334:35 - Hawk all right let's see if our rabbit
334:38 - has an A Life
334:41 - Property
334:44 - console.log take the name of the object
334:46 - rabbit do access a property or method
334:49 - alive that's our property the rabbit is
334:52 - alive but what if the hawk swoops in and
334:56 - kills the rabbit let's change the alive
334:58 - property of the rabbit
335:01 - rabbit. alive equals false the rabbit is
335:04 - no longer
335:05 - alive now let's see if our rabbit has
335:08 - access to a eat and Sleep
335:13 - Method rabbit.
335:16 - eat this rabbit is eating and sleep
335:21 - rabbit.
335:23 - sleep the rabbit is sleeping Let's test
335:26 - this with
335:27 - fish fish. alive fish. eat method fish.
335:31 - SLE
335:32 - method the fish is alive the fish is
335:35 - eating the fish is
335:36 - sleeping and Hawk hawk. alive hawk. eat
335:41 - method hawk. SLE method the hawk Is
335:44 - Alive the hawk is eating the hawk is
335:46 - sleeping our children classes of rabbit
335:49 - fish and Hawk all inherited the
335:51 - properties and methods of the parent
335:53 - animal class this helps with code
335:56 - reusability because I don't need to
335:57 - declare all of these properties and
335:59 - methods within each of the children
336:01 - classes like
336:04 - this we're saving a lot of lines of code
336:07 - it's not that apparent with just a few
336:09 - child classes but imagine if you had
336:11 - hundreds of different child classes well
336:14 - by using inheritance you would be saving
336:16 - a lot of time but not only that the
336:18 - children can have their own unique
336:20 - properties and methods too for example
336:22 - rabbits will be able to run but fish and
336:25 - Hawks can't run that's a method that
336:28 - only belongs to rabbits within our
336:30 - rabbit class let's create a new method a
336:33 - run
336:35 - method we'll
336:38 - console.log I'll use a template
336:40 - string
336:42 - this add a
336:44 - placeholder
336:46 - this.name is
336:49 - running within our fish class let's
336:52 - create a swim
336:54 - method
336:56 - swim this this.n name is swimming
337:01 - and Hawks will be able to
337:04 - fly we'll create a fly method this this
337:08 - do name is
337:10 - flying let's minimize these
337:15 - classes let's take our rabbit object
337:18 - display the alive property the eat
337:20 - method the Sleep Method and the run
337:23 - method rabbit. run method the rabbit is
337:27 - eating the rabbit is sleeping the rabbit
337:28 - is running
337:30 - now let's do this with fish fish. alive
337:33 - fish. eat method fish. SLE method now
337:36 - does the fish have a run method it does
337:39 - not fish. run is not a function run is a
337:43 - method that belongs to the rabbit class
337:46 - fish can't run because well they don't
337:47 - have legs we did not give our fish class
337:49 - a run method they can swim though but
337:52 - they can't run fish. swim
337:55 - method the fish is swimming let's do
337:58 - this with Hawk
338:03 - our Hawk cannot swim but it can fly
338:07 - we'll use the fly
338:08 - method the hawk is eating the hawk is
338:10 - sleeping the hawk is flying and of
338:13 - course our rabbit can't fly or
338:17 - Swim does our rabbit have a fly method
338:19 - it does not rabbit. fly is not a
338:22 - function all right everybody so that's
338:24 - inheritance it allows a new class to
338:27 - inherit properties and methods from an
338:29 - existing Class A Child inherits
338:31 - properties and methods from a parent it
338:33 - helps with code reusability I don't need
338:35 - to declare all of these properties and
338:37 - methods for each of these classes I can
338:39 - simply reuse it that helps us follow the
338:41 - dry principle don't repeat
338:44 - yourself and well everybody that is an
338:46 - introduction to inheritance in
338:52 - JavaScript yo what's going on everybody
338:55 - so in today's video I'm going to explain
338:57 - the super keyword in JavaScript super is
339:00 - a keyword that's used in classes to call
339:02 - the Constructor or access the properties
339:04 - and methods of a parent the parent is
339:07 - also known as the super class it's very
339:09 - similar to the this keyword this refers
339:12 - to this object super refers to the
339:15 - parent of that object here's an example
339:17 - we'll use inheritance to create a parent
339:20 - class of animal class animal our animal
339:24 - class will have three children also
339:26 - known as sub
339:27 - classes class rabbit extends
339:35 - animal class fish extends animal class
339:40 - Hawk extends
339:42 - animal we'll add an empty Constructor
339:44 - for now for the animal
339:47 - class then we need a Constructor for the
339:50 - rabbit
339:54 - class so rabbits they'll have a name
339:58 - property a
340:00 - and a run speed we'll assign these
340:03 - properties within the Constructor
340:05 - this.name equals the name that we
340:07 - receive this. AG equals age this. runp
340:12 - speed equals run
340:15 - speed let's copy this Constructor now
340:19 - with fish fish don't have a run speed
340:21 - but they'll have a swim
340:23 - speed let's replace run speed with swim
340:26 - speed copy The Constructor again paste
340:29 - it Hawks in this example won't have a
340:32 - swim speed they'll have a fly speed
340:34 - though replace swim speed with fly speed
340:38 - now let's attempt to create some of
340:39 - these objects const rabbit equals new
340:44 - rabbit we need a name for this rabbit
340:47 - you could just say rabbit or if you want
340:49 - to be creative you could say something
340:50 - like Bugs
340:52 - Bunny uh but let's just stick with
340:54 - rabbit to keep it simple our rabbit will
340:57 - be Oney old and has a run speed of 25
341:01 - mph if you use kilm feel free to use
341:04 - kilom let's do this with
341:07 - fish const fish equals new
341:11 - fish the name of our fish will be fish
341:14 - our fish is 2 years old and has a swim
341:17 - speed of 12 mil
341:19 - hour then with Hawk const Hawk equals
341:23 - New Hawk our Hawk will have a name of
341:27 - Hawk our Hawk will be 3 years years old
341:30 - and has a fly speed of 50
341:32 - mph so when I run this program we have
341:34 - an uncaught reference error must call
341:37 - Super Constructor in derived class
341:39 - before accessing the this keyword so
341:42 - what JavaScript is telling us is that
341:44 - before we can use the this keyword we
341:46 - have to call the Constructor of the
341:48 - parent the super class within each of
341:50 - these respective Constructors we will
341:53 - invoke the Constructor of the parent the
341:55 - super class with the super keyword so
341:58 - let's do that for for each of these
342:01 - Constructors now our program actually
342:03 - runs now so one of the benefits of using
342:06 - Constructors is that if there's any
342:08 - properties that the children all share
342:10 - in common we can send them to the
342:12 - Constructor of the parent as you can see
342:14 - we're repeating ourselves a lot each of
342:16 - these children classes has a name and
342:18 - age property that we're assigning to
342:20 - each we would like to follow the dry
342:22 - principle don't repeat yourself so why
342:25 - don't we write this code once and reuse
342:27 - it so within the Constructor of the
342:29 - parent will accept a name and age
342:33 - property we'll assign this.name equals
342:37 - name and this. AG equals age now we can
342:40 - remove that within each of the child
342:42 - classes so we don't repeat
342:45 - ourselves there's less code to right now
342:48 - but we do need to pass in these
342:49 - arguments to the parent Constructor name
342:52 - and age for
342:58 - each
342:59 - and that's all there is to it in this
343:01 - example when we construct an object
343:03 - either a rabbit a fish or a hawk we'll
343:06 - accept three arguments a name age and
343:09 - either a run speed a swim speed or a fly
343:11 - speed depending on the animal that we're
343:13 - creating any properties they share in
343:15 - common we can send to the parent
343:17 - Constructor it helps with code
343:18 - reusability and there's a lot less to
343:20 - write it's not that evident with three
343:23 - children classes but imagine if you had
343:24 - hundreds of different classes like what
343:26 - if this was Pokémon there's like what a,
343:29 - Pokémon now we would have to copy and
343:31 - paste those properties like a thousand
343:33 - times for each if we're constructing
343:35 - individual Pokémon but since all of them
343:37 - share those same properties we can write
343:39 - it in one place and make any changes
343:42 - only in one place so let's test this to
343:45 - see if it works let's
343:49 - console.log our rabbit's
343:52 - name which is named rabbit let's
343:55 - console.log the rabbit's age the rabbit
343:58 - is Oney old
344:00 - and let's see if the rabbit has a run
344:01 - speed 25 as in 25 mph let's do this with
344:06 - fish fish. name fish. AG let's see if
344:09 - the fish has a run
344:10 - speed name is fish Age Two run speed is
344:14 - undefined because fish can't run because
344:16 - they don't have legs but they do have a
344:17 - swim speed though swim speed 12
344:21 - milph then Hawk hawk. name hawk. AG
344:25 - hawk. flyp speed name is Hawk age 3 the
344:29 - hawk has a fly speed of 50
344:32 - mph so that's how you can use the super
344:34 - keyword in a class to call the
344:36 - Constructor of the parent it helps with
344:38 - code reusability any properties that the
344:40 - children share in common in this case a
344:42 - name and Age The Constructor of the
344:45 - parent can take care of that we don't
344:47 - have to repeat the set of code every
344:48 - single time for each child we write it
344:50 - in one place and reuse it another thing
344:53 - you can do too with the super keyword is
344:55 - extend a method from the parent so what
344:57 - we're going to do within the animal par
344:59 - class is create a move
345:01 - method within this method we will
345:04 - console.log the following
345:07 - message the at a placeholder
345:13 - this.name moves at a speed of add a
345:19 - placeholder speed mph for miles per hour
345:23 - or if you prefer you can use kilometers
345:26 - our move method will have one parameter
345:28 - a speed that we need to pass in to use
345:31 - So within each of these children classes
345:34 - we'll write a method that also extends
345:36 - the move method of the
345:38 - parent rabbits will have a run
345:42 - method we'll output the following
345:44 - message
345:46 - console.log I'll use a template
345:49 - string this add a
345:52 - placeholder
345:54 - this.name can
345:56 - run let's copy our run me method paste
346:00 - it for fish but change swim to run
346:02 - because fish can't run this this.name
346:06 - can
346:08 - swim then with Hawks they'll have a fly
346:11 - method fly this this. name can
346:18 - fly with our rabbit object let's invoke
346:21 - the run
346:23 - method this rabbit can run let's do this
346:27 - with fish fish. swim this fish can swim
346:32 - and hawkfly Method this Hawk can fly
346:36 - within each of these children classes
346:38 - we're going to extend the move method of
346:40 - the parent animal within the run method
346:43 - of our rabbit class not only are we
346:45 - going to Output this
346:47 - message we'll also extend the move
346:49 - method of the parent and display that
346:52 - message as well to refer to the parent
346:54 - class we use the super keyword it's very
346:56 - similar to this but it means the parent
346:59 - use the parents move method but we do
347:03 - have to send a speed argument let's send
347:06 - the Run speed of the rabbit this.
347:09 - runspeed let's do this with our fish
347:12 - class we'll extend the move method
347:15 - super. move send in this. swim speed and
347:20 - Hawk super. move this. flype
347:24 - speed now let's take our rabbit use the
347:27 - run method and we should extend the move
347:30 - method this rabbit can run the rabbit
347:33 - moves at a speed of 25
347:36 - mph let's do this with fish fish. swim
347:40 - the fish can swim the fish moves at a
347:42 - speed of 12 mph and hawk hawk. fly
347:47 - method this Hawk can fly the hawk moves
347:49 - at a speed of 50
347:51 - mph so that's how you can use the super
347:53 - keyword to extend a method of apparent
347:57 - all right everybody so that's the Super
347:58 - Key word it's a reference to a parent it
348:01 - can be used to call the Constructor of a
348:02 - parent and or access the properties and
348:05 - methods of a parent and well everybody
348:08 - that is the super keyword in
348:14 - JavaScript hey hello so uh today I'm
348:17 - going to explain Getters and Setters in
348:19 - JavaScript Getters are special methods
348:22 - that make a property readable Setters
348:24 - are special methods that make a property
348:27 - writable we can use use Getters and
348:29 - Setters to validate and modify a value
348:31 - when reading or writing a property it
348:33 - helps with validation when creating an
348:35 - object or updating one of its properties
348:38 - here's an example we will create a class
348:41 - of
348:43 - rectangle we need a
348:46 - Constructor we will have two parameters
348:50 - a width and a
348:52 - height we will assign this. width equals
348:57 - width
348:59 - this.
349:01 - height equals
349:04 - height now let's create a rectangle
349:06 - object const rectangle equals a new
349:13 - rectangle for the width let's say -1
349:17 - million something
349:19 - ridiculous and for the height I want the
349:22 - height to be Pizza the word
349:24 - pizza then let's
349:27 - console.log
349:29 - our
349:30 - rectangles width and the rectangle
349:36 - height we have created a rectangle
349:39 - object with the width of 1 million and a
349:42 - height of pizza which doesn't make any
349:44 - sense we could use some validation when
349:46 - creating an object we don't want people
349:48 - to enter in garbage values like negative
349:50 - a million or string when we're expecting
349:53 - a positive number for the width or
349:54 - height that's where Getters and Setters
349:56 - come in we'll begin with set letters
349:59 - when setting one of these properties
350:01 - either initially through a Constructor
350:03 - or updating one of them later such as
350:05 - setting the width or height equal to
350:07 - some value we can go through a Setter
350:11 - first outside of our Constructor we will
350:13 - set a property we'll begin with
350:18 - width this will be a special type of
350:20 - method the parameter will be new width
350:25 - what do we want to check before
350:27 - assigning this property using an if
350:29 - statement let's check to see if the new
350:31 - width that the user sends us is greater
350:35 - than zero if it is we will assign this
350:39 - doore
350:41 - width using an underscore prefix it
350:44 - tells other developers that this is a
350:47 - private property you shouldn't touch it
350:48 - at all you could say that this private
350:51 - property of width is different than our
350:53 - standard width property we will assign
350:56 - the private property of width equal to
350:59 - the new width we
351:02 - receive else let's
351:05 - console. error not log we'll use error
351:08 - this
351:09 - time width must be a positive
351:15 - number all right let's see what
351:18 - happens width must be a positive number
351:21 - and our width is currently undefined
351:23 - which is good okay let's do this with
351:25 - height let's copy our Setter for width
351:28 - paste it but change every instance of
351:31 - width to be height set height New
351:37 - Height be sure to use that Camel case
351:40 - naming
351:41 - convention if new height is greater than
351:43 - zero assign the private property of
351:47 - height equal to the new height else
351:51 - console.
351:52 - error height must be a positive
351:56 - number and there we go that worked width
351:59 - must be a positive number and height
352:02 - must be a positive number our width and
352:04 - height are currently
352:05 - undefined in order to set the width and
352:08 - height we have to pass in a positive
352:10 - number for the width I will say three
352:13 - for the width four now when we access
352:16 - width and height those numbers still
352:18 - aren't showing up that's because these
352:21 - properties are writable via Setters but
352:24 - they're not readable that's where
352:26 - Getters come
352:27 - in we'll create two Getters one for
352:31 - width we'll need to use the get keyword
352:34 - get
352:35 - width this will be another type of
352:37 - method all we're going to do is return
352:41 - this private
352:43 - width and that appeared to work we have
352:46 - three for the
352:47 - width let's do so with the
352:50 - height we will return this private
352:56 - height we have three and
352:59 - four Now by using Setters we can even
353:02 - update those values later let's take our
353:06 - rectangles width set that equal to be
353:09 - five take the
353:12 - height set it equal to be six and that
353:15 - also appears to work but again if I try
353:18 - and update those values to some garbage
353:20 - values like negative a million and the
353:22 - word
353:24 - Pizza we get those errors again and our
353:28 - our object retains its initial values
353:30 - that we previously assigned it three and
353:32 - four with Getters we can even use the
353:35 - property accessor that dot to access a
353:38 - property that doesn't necessarily exist
353:41 - for example we will get
353:44 - area we'll perform a
353:46 - calculation we will return this private
353:51 - width times this private
353:57 - height
353:59 - so now we can access area as if it was a
354:04 - property we have three for the width
354:06 - height four our width times our height
354:08 - gives us an area of 12 our area isn't a
354:12 - property technically it's not found
354:13 - within our
354:14 - Constructor but we can access it as if
354:17 - it was a property with a getter with
354:19 - Getters you can even add additional
354:20 - logic I would like to preserve the
354:22 - initial values of our width and height
354:25 - when I return their value I will use the
354:28 - two fixed method to give each of these a
354:31 - Precision of
354:33 - one let's do that with the width the
354:36 - height and the area but that's going to
354:39 - be a little more complex we'll enclose
354:42 - width time height then add to fixed
354:46 - one and why stop there I'll add
354:48 - centimeters to the end of each I'll use
354:50 - a template
354:52 - string add a
354:55 - placeholder then add CM for
354:58 - M 3.0
355:05 - cm and the
355:12 - area 12.0 CM let's make that centimet
355:16 - squared because it's area Technically
355:19 - when you're assigning values even when
355:21 - you're initially creating an object you
355:23 - can go through the Setters for input
355:25 - validation when you retrieve values and
355:27 - try and read them you can add additional
355:29 - logic too let's go over a second example
355:33 - we will create a class of person we need
355:37 - a
355:38 - Constructor we will accept a first
355:43 - name last
355:45 - name and an
355:46 - age this. first
355:50 - name equals first
355:54 - name this. last name equals last
355:59 - name this. AG equals
356:04 - age let's construct a person
356:07 - const person equals new
356:11 - person let's enter in some values that
356:13 - don't make sense the person's first name
356:15 - will be the number 420 their last name
356:18 - is the number 69 their age is the word
356:22 - Pizza let's
356:26 - console.log our person objects first
356:29 - name which is the number
356:33 - 420 their last name 69 and their
356:39 - age the word Pizza we need to validate
356:43 - this input before assigning the
356:45 - properties that's why we need Setters we
356:48 - will set the first name property this is
356:51 - a special type of method the parameter
356:54 - is going to be a new first name
356:58 - we need to be sure that this value
356:59 - passed in is a string and the length is
357:03 - greater than zero we could write
357:05 - something like this we need an if
357:07 - statement let's check the type of our
357:11 - new first name is it strictly equal to a
357:16 - string and is our new first nam's length
357:20 - property greater than
357:23 - zero if all of that checks out we will
357:26 - assign this this private first name
357:31 - equal to the new first name we
357:34 - receive else let's console.
357:42 - error first name must be a
357:49 - nonempty string let's see if this worked
357:52 - I'm going to save first name must be a
357:55 - non-empty string and currently our first
357:57 - name is undefined okay that worked let's
358:00 - copy our Setter for our first name paste
358:03 - it change every instance of first name
358:05 - to last
358:08 - name new last
358:11 - name check if the type of our last name
358:15 - is equal to a string and if our new last
358:19 - name the length of it is greater than
358:21 - zero if it is assign the private last
358:26 - name property equal to the new last name
358:29 - else last name must be a non-empty
358:32 - string that also worked our first name
358:35 - and last name are undefined let's do
358:37 - this with
358:38 - age set our
358:41 - age the parameter is going to be new
358:46 - age using an if statement is the type of
358:51 - new age strictly equal to a data type of
358:55 - number and is our new age greater than
359:00 - or equal to zero if it is take this
359:05 - private age equals our new
359:10 - age else we're going to console.
359:17 - error age must be a non negative number
359:24 - we can no longer assign pizza for our
359:26 - age unfortunately
359:28 - all right we have our setter set up now
359:30 - let's work on the Getters let's assign
359:33 - some legitimate values for the first
359:35 - name SpongeBob last name
359:38 - SquarePants age 30 we don't have those
359:42 - errors anymore that means they're set
359:45 - but those properties aren't readable
359:47 - that's why we need Getters let's get the
359:49 - first name get first
359:53 - name return this private first
359:58 - name there's SpongeBob his first
360:01 - name get last
360:05 - name return this private last name
360:10 - there's his last name let's create a
360:12 - getter for a full name
360:14 - too let's
360:16 - console.log a full name even though we
360:19 - have no property for that that's
360:21 - undefined we'll use a getter to mimic a
360:23 - full name property by just combining the
360:25 - first name and the last name properties
360:28 - get full
360:31 - name return I'm going to use some string
360:35 - cination this private first name
360:40 - plus a space
360:42 - character this private last
360:47 - name and there's his full name SpongeBob
360:50 - SquarePants and the age get age return
360:57 - this
360:58 - private
360:59 - age and SpongeBob is
361:02 - 30 all right everybody those are Getters
361:04 - and Setters Getters are special methods
361:07 - that make a property readable Setters
361:10 - are special methods that make a property
361:12 - writable by using a combination of both
361:15 - we can validate and modify a value when
361:18 - reading or writing a property and well
361:20 - everybody those are Getters and Setters
361:22 - in
361:26 - JavaScript
361:28 - hey what's good everybody so in today's
361:30 - video I'm going to give you a lesson in
361:31 - destructuring in JavaScript
361:33 - destructuring allows us to extract
361:36 - values from arrays and objects then
361:38 - assign them to variables in a convenient
361:40 - way we can use straight brackets to
361:42 - perform array destructuring or curly
361:45 - braces to perform object destructuring
361:47 - I'll give you five different examples
361:49 - example one swap the value of two
361:52 - variables we'll have let a equal 1 let B
361:57 - equal to to use array D structuring we
362:00 - need a set of straight
362:03 - brackets add the variables a comma B
362:07 - this will equal we're creating a new
362:09 - array on the right hand side B comma a
362:13 - on the Le hand side of our equals we're
362:15 - using destructuring on the right hand
362:17 - side we're creating an array let's see
362:20 - what's within variables A and B
362:23 - console.log variable a then variable B
362:28 - so if these values are swapped we should
362:30 - have two then one not one and two that's
362:34 - example one we can use destructuring to
362:36 - swap the value of two
362:39 - variables example two we can swap two
362:41 - elements in an array let's create an
362:44 - array of
362:45 - colors const colors equals an array pick
362:50 - some colors I'll go with RGB so that
362:53 - would be red
362:56 - green
362:57 - blue let's add black and
363:02 - white suppose I would like to swap the
363:05 - position of the first element and the
363:07 - last element this first element has an
363:09 - index of zero this particular last
363:12 - element has an index of four again we're
363:14 - going to use array to structuring we
363:16 - need a set of straight brackets we'll
363:18 - take our array colors at index of
363:23 - zero comma rray at index of four we want
363:28 - to swap red with white 0 1 2 3 4 that's
363:33 - the fourth index equals we're creating a
363:36 - new array by using Straight brackets
363:39 - colors at index
363:40 - 4 comma colors at index zero then let's
363:45 - print our
363:47 - array
363:49 - console.log R array of
363:52 - colors there we go we have white green
363:56 - blue black red
363:58 - that's how we can use destructuring to
363:59 - swap two elements in an
364:01 - array example three we can assign array
364:04 - elements to variables we'll declare a
364:06 - bunch of variables const we'll use
364:08 - destructuring we're destructuring an
364:10 - array we need a set of straight brackets
364:12 - we'll create some variable names first
364:16 - color Second
364:19 - Color third
364:22 - color I will assign this equal to our
364:26 - array
364:28 - Colors Let's print these
364:30 - variables
364:32 - console.log our first color we have
364:36 - red second
364:38 - color
364:41 - green third color blue you could combine
364:45 - array D structuring with rest parameters
364:48 - we have two colors left let's assign
364:51 - that to a new array we'll use rest
364:54 - parameters I will name this array extra
364:59 - colors then we will
365:03 - console.log extra colors and that should
365:06 - be a new array that has the remaining
365:08 - colors black and white that's how to
365:12 - assign array elements to variables using
365:15 - destructuring example for extract values
365:18 - from objects we'll create two people
365:21 - objects const person
365:25 - one person one will have a few few
365:27 - properties first name will be
365:32 - SpongeBob last name will be
365:38 - SquarePants age will be 30 and a job
365:42 - meaning
365:43 - occupation not John
365:46 - job his job is that he is a fry
365:49 - cook all right let's copy person one
365:52 - looks like that n should be capital in
365:54 - last name all right let's copy person
365:57 - one paste it change person one to person
366:01 - two the first name of person two will be
366:04 - Patrick last name star age will be
366:09 - 34 person two is not going to have a job
366:12 - property he's
366:13 - unemployed using destructuring I can
366:16 - extract values from these
366:18 - objects we'll create a few variables
366:21 - const we'll use object destructuring we
366:23 - need a set of curly braces this time
366:26 - we'll create these VAR variables first
366:29 - name last name age and
366:34 - job now this equals let's start with
366:37 - person
366:39 - one let's display these variables
366:44 - console.log first name is
366:50 - SpongeBob last name
366:54 - SquarePants age 30
367:00 - job fry cook let's do this with person
367:04 - two Patrick Star his age is 34 person
367:08 - two does not have a job property person
367:10 - one does though our job variable is
367:13 - undefined as you can see here you can
367:16 - set default values when using
367:18 - destructuring if somebody doesn't have a
367:20 - job property we'll set job to equal
367:25 - unemployed let's see if that works yep
367:29 - Patrick Star age 34 his job is he's
367:33 - unemployed that's how you can extract
367:35 - values from objects values extracted can
367:37 - even have default
367:39 - values all right last example we can
367:41 - destructure in function parameters we
367:44 - can pass an object to a function and
367:47 - destructure it when it's passed in let's
367:50 - create a function we will create a
367:52 - function to display a person
367:58 - with the parameters we'll use
368:00 - destructuring we're destructuring an
368:01 - object we need a set of curly braces
368:04 - we'll receive an object such as this I'm
368:08 - going to invoke display person we'll
368:11 - pass in person one as an argument when
368:15 - we receive person one as an argument
368:17 - we'll destructure that object right away
368:19 - we will create a first name parameter
368:22 - last
368:23 - name age and job
368:27 - all we'll do is print a few lines using
368:30 - console.log I'll use a template string
368:33 - let's say Name colon space I'll add a
368:37 - placeholder first
368:39 - name and last
368:43 - name let's add a new
368:48 - line age call in space add a placeholder
368:53 - age then lastly job
368:57 - job colon space add a placeholder
369:00 - job we're passing in person one and D
369:03 - structuring it we should display name
369:06 - SpongeBob SquarePants age 30 job fry
369:09 - cook let's pass in person two as an
369:13 - argument name Patrick Star age 34 job is
369:18 - undefined again we can set a default
369:20 - value when destructuring if an object
369:22 - doesn't have a job property we will set
369:25 - that equal to be
369:28 - unemployed Patrick Star age 34 job
369:31 - unemployed then if we pass in person one
369:34 - again his job should not be unemployed
369:37 - he's a fry cook there is a job property
369:40 - so we do not use the default value all
369:42 - right everybody so those are a few
369:44 - examples of destructuring there's a lot
369:46 - you can do with destructuring you use a
369:48 - set of straight brackets to perform
369:50 - array destructuring or curly braces for
369:52 - object destructuring they allow you to
369:55 - extract values from aray and objects
369:57 - then assign them to variables in a
369:59 - convenient way and well that is
370:02 - destructuring in
370:07 - JavaScript so uh yeah we're doing a
370:09 - thing today today I got to explain
370:11 - nested objects in JavaScript nested
370:13 - objects are objects inside of other
370:16 - objects they allow you to represent more
370:19 - complex data structures a child object
370:22 - is enclosed by a parent object by using
370:25 - nested objects we have the cap
370:26 - capability of creating some very complex
370:28 - data structures for example a person
370:31 - object could contain an address object
370:34 - as well as a contact info object or a
370:36 - shopping cart object each item in your
370:38 - shopping cart is an individual object
370:40 - such as a keyboard a mouse or a monitor
370:44 - each of these child objects would have
370:45 - their own properties and methods for
370:47 - example a price a name specifications on
370:50 - the item a shipping method nested
370:53 - objects are just objects inside of other
370:55 - objects let me give you a basic example
370:58 - we'll create a person object const
371:01 - person equals an object we need to set a
371:04 - curly BRAC a person might have a full
371:07 - name
371:08 - property I will set that to be SpongeBob
371:10 - in this example SpongeBob
371:14 - SquarePants an age of
371:18 - 30 is SpongeBob a student is student
371:22 - he's in boting school so let's say
371:23 - that's true objects can also contain
371:26 - array
371:27 - we'll create an array of
371:29 - hobbies to declare an array you need a
371:31 - set of straight brackets what sorts of
371:33 - hobbies does SpongeBob have he knows
371:37 - karate he does
371:40 - jellyfishing I need one more uh let's
371:43 - say that he enjoys
371:46 - cooking now we're going to create a
371:48 - nested object this person object will
371:51 - have an address
371:53 - object so we need a set of curly braces
371:57 - a few of the properties of the inner
371:59 - address object could be a street
372:02 - SpongeBob has an address of 124 con
372:07 - Street his City will be bikini
372:12 - bottom and a country we won't do a full
372:15 - address but I think this is good enough
372:17 - for this example so SpongeBob lives in
372:19 - the ocean let's say that his country is
372:22 - international waters I'll just
372:24 - abbreviate International our person
372:27 - object has a nested address object
372:29 - inside of it to access some of these
372:31 - properties of our person
372:33 - object we would type the name of the
372:35 - object use the property accessor which
372:37 - is dot then the name of the property
372:40 - full name SpongeBob
372:44 - SquarePants let's print his
372:47 - age
372:49 - 30 is SpongeBob a student that is true
372:53 - I'm going to display the array of hob
372:57 - person. Hobbies this will give you an
373:00 - array but if you need individual
373:02 - elements you have to list an index
373:04 - number so Hobbies at index zero would be
373:07 - karate one is
373:09 - jellyfishing index two is cooking let's
373:15 - console.log our person
373:17 - object dot the address
373:21 - object this would return an entire
373:23 - object if you need one of the properties
373:26 - within this object that's within the
373:28 - person object you would have to follow
373:30 - the inner object with the property
373:32 - accessor again that dot person. address.
373:37 - Street which would give you 124 con
373:41 - Street the city person. address. city
373:45 - Bikini
373:46 - Bottom person. address. country
373:49 - international waters so when accessing a
373:52 - property within a nested object you have
373:54 - to use the property accessor t
373:56 - that dot if you would like to Loop
373:59 - through the properties of a nested
374:00 - object you can write a for Loop like
374:04 - this for const
374:08 - property in person.
374:13 - address
374:16 - console.log take our person object
374:19 - access the nested object address then
374:22 - use the index of operator the straight
374:25 - brackets give me the current
374:29 - property and there we are all right
374:32 - let's make something a little more
374:34 - complicated we're going to create a
374:36 - class that utilizes nested objects so we
374:39 - will begin with
374:40 - class
374:44 - address our class will have a
374:48 - Constructor for an address we need these
374:50 - three things feel free to add more if
374:52 - you would like a street City and
374:59 - Country then we'll assign these
375:01 - properties this. Street equals
375:05 - Street this. City equals
375:09 - City this. Country equals
375:14 - country now we'll create a person
375:17 - class class
375:20 - person our person class will also have a
375:25 - Constructor
375:27 - we'll need a name age and an address for
375:31 - the address I'm going to use rest
375:35 - parameters we can pass in different
375:37 - parts of an address and store it within
375:38 - an array when we create a person object
375:41 - we will assign this.name equals name
375:45 - this. AG equals age now for the address
375:49 - we're going to construct an address
375:51 - object this. address equals a new
375:56 - address we're going to call the
375:58 - Constructor of our address class and
376:01 - pass in our
376:02 - address I'm going to utilize the spread
376:05 - operator to spread our
376:08 - address we'll send our address object a
376:11 - street City and Country all right let's
376:14 - construct some of these person
376:16 - objects const person one equals a new
376:21 - person this will call the Constructor
376:23 - but we have to pass in arguments to
376:25 - match the parameter
376:27 - a name we'll just do a first name to
376:29 - keep it short an age SpongeBob will be
376:32 - 30 we also need an address a street City
376:36 - and
376:38 - Country
376:40 - 124 con
376:42 - Street City will be Bikini
376:46 - Bottom his country will be international
376:52 - waters and just for readability I'm
376:54 - going to put the address on a new line
377:01 - let's create person
377:04 - two person two will be
377:08 - Patrick age
377:11 - 37 Patrick will live on 128 con Street
377:16 - he'll have the same city and the same
377:18 - country then let's make person
377:24 - three person three will be
377:28 - Squidward age
377:31 - 45 Squidward will live on 126
377:38 - constr all right let's see if this all
377:41 - worked
377:43 - console.log let's start with person one
377:46 - person one. name which is
377:49 - SpongeBob age 30 let's get his
377:52 - address address and this returns an
377:55 - object which is good that's what we
377:57 - wanted we have a nested object an
377:59 - address object for some of the
378:01 - properties within that address object we
378:03 - have a street City and Country we use
378:06 - the property accessor again of dot give
378:09 - me the street 124 con Street the city
378:14 - bikini bottom and the
378:16 - country international waters all right
378:19 - let's confirm this with person 3 just to
378:22 - be sure it all works person 3 give me
378:25 - the name
378:27 - Squidward age
378:30 - 45 address gives me an object we'll use
378:33 - the property accessor again give me the
378:37 - street 126 con Street the city beini
378:42 - bottom and the country international
378:45 - waters this will also all work for
378:48 - person two if it worked with person one
378:50 - and three all right everybody so those
378:52 - are nested objects they're objects
378:54 - inside of other objects
378:56 - they allow you to represent more complex
378:58 - data structures a child object is
379:01 - enclosed by a parent object in this
379:04 - example our address is the child object
379:08 - of the person object we're creating a
379:10 - new object within our person object and
379:13 - well everybody those are nested objects
379:15 - in
379:20 - JavaScript hey what's up everybody so in
379:22 - today's video I'm going to show you how
379:24 - we can work with an array of objects in
379:26 - JavaScript what we'll do is create an
379:28 - array of fruit objects we'll create five
379:31 - fruit objects to create an object you
379:34 - need a set of krly braces each object
379:36 - will be comma
379:39 - separated just for my own readability
379:41 - I'm going to place each object on a new
379:45 - line objects can have their own unique
379:47 - properties and methods our first fruit
379:50 - object will have a name of
379:53 - Apple a color
379:56 - of
379:57 - red and calories meaning calories per
380:01 - serving of
380:03 - 95 this is our first object let's copy
380:07 - these properties paste them for object
380:09 - two change name to be orange color will
380:13 - also be
380:15 - orange calories
380:17 - 45 object three name will be banana
380:21 - color yellow calories 105
380:27 - object
380:28 - 4 coconut color white calories
380:35 - 159 then our last object will be
380:39 - pineapple color yellow calories
380:45 - 37 all right and here is our array of
380:47 - objects there's a lot we can do with
380:49 - this if you ever need a property within
380:52 - one of these objects of your array you
380:54 - would take the array in this cas
380:56 - fruits add an index number dot the name
380:59 - of the property for example name I need
381:02 - the name property of the first object
381:05 - which would be Apple so let's test that
381:10 - console.log what is the name property of
381:13 - our aray fruits at index zero that would
381:16 - be apple one is orange two is
381:19 - banana three is coconut four pineapple
381:24 - let's select a different property
381:26 - let's go with the
381:29 - calories
381:31 - 95
381:32 - 45 105 159 37 that's how to access a
381:38 - property within an array of objects to
381:41 - add a new object you can use the push
381:43 - method let's take our array of fruits
381:46 - use the push method we will push a new
381:49 - object into our
381:51 - array the name will be
381:54 - grapes
381:57 - Color
382:00 - Purple
382:02 - calories
382:04 - 62 then let's console.log R
382:09 - array console.log fruits so we have six
382:14 - Apple orange banana coconut pineapple
382:16 - and grapes uh which I misspelled
382:20 - grap you can use the pop method to
382:22 - remove an
382:23 - element fruits
382:26 - pop this should remove
382:29 - pineapple Apple orange banana coconut no
382:32 - pineapple or splice splice will remove
382:35 - elements at certain indices fruits.
382:41 - splice let's select indices 1 through
382:45 - two all we're left with is Apple coconut
382:49 - pineapple you can use the for each
382:51 - method to Loop through the elements of
382:52 - your array let's display each object's
382:55 - name
382:57 - fruits. for each we need a call back a
383:00 - function expression or an arrow function
383:03 - let's use an arrow function for every
383:05 - fruit do this
383:09 - console.log each fruit this will return
383:12 - entire
383:13 - objects for one of the properties we'll
383:16 - select dot the property name we have all
383:21 - the fruit
383:22 - names let's go with the colors and the
383:27 - calories there we
383:29 - are there's also the map method the map
383:32 - method will run each element through a
383:34 - function and return a new array let's
383:37 - create an array of fruit names const
383:39 - fruit names equals take our array of
383:43 - fruits use the built-in map method we'll
383:46 - use an arrow function for every
383:49 - fruit
383:50 - Arrow return the fruits
383:54 - name then we will
383:58 - console.log our array of fruit
384:02 - names and here's our array of fruit
384:04 - names let's do this with
384:07 - colors fruit
384:11 - colors return every color property of
384:14 - each
384:15 - fruit then console.log our fruit
384:19 - colors red orange yellow white yellow
384:22 - let's do this with
384:24 - calories
384:26 - fruit
384:27 - calories return each calories
384:31 - property console. log our fruit calories
384:36 - array so the map method we'll return a
384:38 - new array let's cover filter filter will
384:42 - return a new array after using each
384:44 - element and checking a condition let's
384:47 - return a new array where the color of
384:49 - each fruit is yellow there's two const
384:53 - yellow fruits
384:56 - equals take our array of
384:58 - fruits use the filter method we have one
385:02 - parameter a fruit Arrow then a condition
385:06 - we'll return this fruit if the fruit's
385:10 - color property is strictly equal to
385:15 - Yellow then
385:18 - console.log our array of yellow fruits
385:21 - and there's two bananas and pineapples
385:24 - they color are both yellow let's create
385:27 - a new array of any fruits that are low
385:29 - in calories where the calories are below
385:33 - 100 const low cal fruits take AR array
385:38 - of fruits use the built-in filter method
385:42 - for every
385:43 - fruit Arrow check the calories of each
385:48 - fruit is it less than 100 if it is put
385:51 - it within this new
385:53 - array and here we are we have three
385:55 - fruits that are low in
385:57 - calories Apple orange pineapple the
386:00 - calories are 95 45 37 they're all less
386:04 - than
386:05 - 100 let's find any high calorie
386:09 - fruits change our rate to be high Cal
386:13 - fruits where the calories of each fruit
386:16 - is greater than or equal to 100
386:18 - console.log AR array of high Cal fruits
386:22 - there are
386:23 - two banana and coconuts the calories are
386:27 - 105 and
386:29 - 159 let's use the reduce method now I'll
386:32 - admit this is going to be a little
386:34 - tricky but I'll try my best to walk you
386:35 - through it the reduce method will return
386:38 - a single value in this case an object
386:41 - one of these objects let's return the
386:43 - object with the greatest amount of
386:46 - calories we'll store that within a
386:48 - constant const Max
386:51 - fruit equals take array of fruits
386:56 - use the reduce method there's going to
386:58 - be two
386:59 - parameters an
387:02 - accumulator which keeps track of the
387:04 - greatest value during each iteration and
387:07 - the next element but I think we should
387:09 - rename these let's rename our
387:12 - accumulator as Max it's going to be the
387:15 - current record holder of the object with
387:17 - the greatest amount of calories element
387:20 - will be fruit meaning the next fruit
387:23 - here are the two parameters
387:26 - Arrow what are we going to check is our
387:29 - fruit the next fruit in line are the
387:33 - calories
387:34 - greater than our current record holders
387:37 - calories max.
387:40 - calories just for readability I'm going
387:42 - to put this on a new
387:45 - line we're going to use the trary
387:47 - operator is this true does the next
387:50 - fruit have more calories than our record
387:53 - holder if it does will return our fruit
387:58 - meaning the next fruit colon meaning
388:01 - otherwise return the max again let's see
388:04 - if this works let's
388:07 - console.log our fruit with the maximum
388:10 - amount of calories which is our coconut
388:13 - with 159 calories if you just need the
388:17 - calories you would type dot calories
388:20 - that will just give you the calories but
388:23 - in this case we're returning an entire
388:24 - object object let's find the fruit with
388:27 - the least amount of calories let's copy
388:29 - our code paste
388:33 - it and make a few
388:36 - changes Min
388:38 - fruit change Max to be
388:43 - Min the condition will be is the
388:46 - calories of the next fruit less than the
388:50 - calories of the minimum record
388:53 - holder then console.log our Min fruit
388:58 - which is our pineapple with 37
389:01 - calories all right everybody so those
389:03 - are a few ways in which you can work
389:04 - with an array of objects there's a lot
389:06 - you can do with them you can map you can
389:09 - filter you can reduce you can splice you
389:11 - can pop you can push all sorts of things
389:14 - and well that is an example of an array
389:16 - of objects in
389:21 - JavaScript yo so uh what's up today I'm
389:24 - going to be talking about about the sort
389:25 - method in JavaScript the sort method is
389:28 - used to sort elements of an array in
389:30 - place however with the sort method we
389:33 - sort elements as strings in
389:35 - lexicographic order not alphabetical if
389:38 - I could summarize what lexicographic
389:40 - means it means alphabet Plus numbers
389:42 - plus symbols as strings let me give you
389:45 - an example with just alphabetical
389:46 - characters I have an array of fruits to
389:49 - sort this array I can take the array
389:51 - name fruits use the built-in sort method
389:55 - then
389:57 - console.log my array of fruits let me
390:01 - expand this and here's my array all
390:04 - sorted when sorting we treat any
390:07 - elements as strings what if my array
390:09 - were numbers I'll add the numbers 1
390:11 - through 10 in a somewhat random
390:19 - order let's change our array to be
390:22 - numbers numbers. sort con cons. log
390:25 - numbers here's the result we have one
390:30 - then 10 then the rest seem to be in
390:32 - order we're not sorting this array
390:34 - numerically we're sorting this array
390:37 - lexicographically we're treating each of
390:39 - these numbers as strings that's why we
390:41 - have one then 10 10 isn't at the end
390:44 - where we expect it would be there's a
390:46 - couple extra steps we need to do
390:47 - involving sorting
390:49 - numbers inside of the sort method we
390:51 - have to write a custom comparison
390:53 - function this is normally a call back
390:55 - but you can write a function expression
390:57 - or even better yet an arrow function
391:00 - we'll write an arrow function in this
391:01 - case let me zoom in with an arrow
391:04 - function we first need
391:06 - parameters we'll have parameters A and B
391:10 - we'll examine two contiguous elements 1
391:13 - then 10 10 then two 2 then 9 9 and three
391:17 - so on and so forth then we need an
391:21 - arrow then we'll write a minus B
391:25 - our function a minus B will return
391:28 - either a negative zero or positive value
391:31 - depending on what values we're examining
391:33 - the sort method will sort those values
391:35 - into place depending on what the value
391:37 - returned is our array should be sorted
391:41 - you can see that 10 is at the end
391:43 - instead of right after one for reverse
391:45 - order you could say B minus
391:51 - a now we're starting with 10 and ending
391:53 - with one
391:55 - you can even sort objects by a given
391:57 - property let's go over that
392:00 - example we will create an array of
392:02 - people const people equals this will be
392:07 - an array will include four objects all
392:10 - comma
392:12 - separated the first will have a name
392:15 - property of
392:20 - SpongeBob age 30 and a GPA
392:26 - GPA
392:28 - 3.0 I'm going to zoom out for the next
392:32 - object just going to put that on a new
392:34 - line let's copy all these properties
392:37 - change name to be Patrick age will be
392:41 - 37 GPA
392:45 - 1.5 again for the next
392:47 - object we will have
392:51 - Squidward age
392:53 - 51
392:55 - GPA
392:58 - 2.5 then lastly we'll have Sandy name
393:03 - Sandy let's make Sandy
393:07 - 27 GPA of course it's going to be a
393:10 - 4.0 I would like to sort this array of
393:13 - objects by each person's age we'll take
393:16 - our array of objects that's stored
393:18 - within
393:21 - people use the built-in sort method use
393:25 - our Arrow
393:26 - function a comma B
393:30 - Arrow we'll take parameter a that's
393:33 - person one do access their age property
393:37 - minus parameter B access their age
393:41 - property and that's all you got to do
393:44 - now let's
393:46 - console.log R
393:53 - people
393:55 - there we are we have Sandy who's the
393:57 - youngest then SpongeBob Patrick
394:00 - Squidward for reverse order you'll just
394:03 - change a to be B and B to be
394:09 - a Squidward Patrick SpongeBob Sandy or
394:13 - we can sort by a different property
394:14 - let's do GPA this
394:17 - time a. GPA b.
394:23 - GPA
394:25 - we have Patrick with the lowest GPA
394:27 - followed by Squidward SpongeBob Sandy
394:30 - then reverse order would be b. GPA minus
394:34 - a.
394:35 - GPA Sandy SpongeBob Squidward Patrick
394:39 - let's try sorting by the name property
394:41 - and see what happens
394:43 - a.name minus b.n
394:49 - name we have SpongeBob Patrick Squidward
394:51 - Sandy but that doesn't seem to make
394:53 - sense these aren't in alphabetical order
394:56 - if you need to sort by a property that
394:58 - contains a string within an object
395:00 - there's a different
395:02 - formula we will take
395:05 - a.name do use the buil-in
395:09 - local compare
395:11 - method compare to b.
395:15 - name this method will examine two
395:17 - strings for lexicographic
395:20 - order now these are all arranged
395:23 - lexicographically
395:25 - starting with Patrick then Sandy
395:27 - SpongeBob Squidward for reverse
395:29 - lexicographic order we would take b.n
395:32 - name. local compare then examine
395:36 - a.name I've just now realized that
395:38 - there's a lot of SpongeBob characters
395:40 - whose first name starts with an S like
395:42 - we have three right here Squidward
395:43 - SpongeBob Sandy Patrick all right
395:46 - everybody so that is the sort method
395:48 - it's used to sort elements of an array
395:50 - in place it sorts elements as strings in
395:53 - lexicographic order not alphabetical and
395:56 - well everybody that is the sort method
395:58 - in
396:02 - JavaScript hey everybody in today's
396:05 - video I'm going to show you how we can
396:06 - Shuffle the elements of an array using
396:08 - JavaScript this is an optional video you
396:10 - might find this topic helpful if you're
396:12 - interested in making a game using
396:13 - JavaScript or any sort of application
396:15 - where you need some Randomness in this
396:17 - example we'll create a deck of cards our
396:19 - deck of cards will be an array we have
396:21 - an a for Ace the numbers 2 through 10
396:24 - let me finish typing those
396:26 - in J for
396:28 - Jack Q for Queen k for King I'm not
396:32 - going to include any suits for these
396:34 - cards such as Ace of Hearts Ace of clubs
396:37 - that might be overkill for this example
396:39 - one method you might see floating around
396:41 - online to shuffle the elements of an
396:43 - array is to use the sort method then
396:46 - pass in an arrow function where you take
396:48 - math. randomus 0.5 I would not recommend
396:52 - using this method just because the
396:53 - results of this method aren't perfectly
396:56 - uniform let me console.log cards this
396:59 - array appears shuffled but it's not that
397:01 - uniform but not only that the larger the
397:04 - array becomes this method becomes
397:06 - increasingly more inefficient I would
397:08 - not recommend using the sort method to
397:10 - shuffle an array instead I would
397:12 - recommend using the fer Yates algorithm
397:15 - we'll create a dedicated function for
397:17 - this so we will Define a function to
397:21 - shuffle there will be one parameter and
397:24 - a
397:25 - array then to invoke this function we'll
397:27 - type the function name pass in our array
397:30 - of
397:31 - cards so what do we want to do exactly
397:34 - we're first going to Loop through the
397:35 - elements of this array we'll start at
397:37 - the end and work our way towards the
397:39 - beginning we'll use a for Loop to
397:41 - decrement So within our Shuffle function
397:44 - we'll create a for Loop we will declare
397:48 - index of I let I equal R array do length
397:55 - then minus one that's the first
397:57 - statement our array has 13 elements but
398:00 - the last index is 12 because array start
398:02 - with zero if the array's length is 13 we
398:05 - need to subtract 1 to get 12 which would
398:07 - give us the ending index of 12 we'll
398:10 - continue this loop as long as I is
398:13 - greater than
398:14 - zero then iusus to decrement now we have
398:18 - to generate a random number between the
398:20 - end and the beginning somewhere within
398:23 - this range
398:24 - we'll create const random random will
398:27 - store a random number take math. random
398:31 - method
398:33 - times I our index + one we'll need to
398:38 - round this number we're now going to
398:40 - enclose this equation with math. floor
398:43 - to round down math. floor and enclose
398:47 - this equation all right during the first
398:50 - iteration of this Loop we should
398:52 - generate a random number between the end
398:55 - and the beginning we'll swap our king
398:58 - with a random element within this array
399:01 - so to swap two elements of this array we
399:03 - can use destructuring in this context to
399:05 - use destructuring we'll take our
399:07 - original position array at index of I
399:11 - during our first iteration that will be
399:12 - the king we'll swap our King with our
399:16 - array at a random index the one that
399:19 - will be randomly
399:20 - generated equals our array at index IND
399:24 - of random comma array at index of
399:28 - I then to finish using destructuring we
399:31 - need to enclose both sides of this
399:32 - equation with an
399:35 - array there and that will swap two
399:37 - elements of your
399:38 - array now if I run this program this
399:41 - will Shuffle the elements of my array I
399:44 - would recommend using a dedicated
399:45 - Shuffle function because in a game it's
399:48 - likely you're going to shuffle something
399:49 - more than once throughout that game like
399:52 - I said this isn't a necessary topic to
399:54 - continue on with the series but if
399:56 - you're ever interested in making a game
399:57 - using JavaScript or need some element of
399:59 - Randomness well then this function would
400:01 - work great and that is how to shuffle
400:03 - the elements of an array using
400:07 - JavaScript what's up everybody so in
400:10 - today's video I'm going to explain date
400:12 - objects in JavaScript date objects are
400:14 - objects that contain values that
400:16 - represent dates and times these date
400:19 - objects can be changed and formatted to
400:21 - suit our needs here's an example
400:24 - we will create a date object that
400:26 - contains the current date and time to do
400:28 - so let's create a constant named date
400:31 - date will be an object we will call the
400:34 - date Constructor with the new keyword
400:37 - date then pass in no arguments for the
400:39 - current date and time so I'm going to
400:43 - console.log my date object which gives
400:46 - me my current date and time as of right
400:49 - now I'm filming this video on a Thursday
400:52 - November 9th the year 2020 23 at about
400:55 - 7: in the morning so depending on when
400:57 - you're watching this video the date and
400:59 - time is going to be different if you
401:01 - would like to create your own custom
401:02 - date and time object you'll have to pass
401:04 - in some arguments you can follow this
401:07 - order for the date Constructor the first
401:09 - argument corresponds to a year then
401:11 - month day hour minute second and
401:14 - milliseconds even so for the year let's
401:17 - say
401:18 - 2024 the month zero corresponds to
401:21 - January one is February then that means
401:24 - a month of 11 is December let's say
401:27 - January so that will be zero for the day
401:30 - one for the 1 for the hour uh 2 2 in the
401:34 - morning this is in Military Time by the
401:36 - way for the minute 3 minutes after the
401:39 - hour for the seconds 4 seconds after the
401:42 - minute we can even add milliseconds if
401:45 - we would like so for the milliseconds
401:47 - let's say five and here's my new date
401:49 - object Monday January 1st 2024 about 2
401:53 - in the morning passing in a string
401:56 - representation of time to the date
401:58 - Constructor is also valid let's say the
402:00 - year is
402:01 - 2024 January 2nd for the time you're
402:04 - going to type t for
402:06 - time 12 noon then add Z for UTC time and
402:13 - there's my new date again Tuesday
402:15 - January 2nd 2024 6: in the morning
402:18 - another format you can use is within the
402:20 - date Constructor pass in a given amount
402:23 - of time in milliseconds since epic if I
402:26 - could describe epic I would describe it
402:28 - as when the date your computer thinks
402:30 - time began if you were to pass in zero
402:32 - to the date Constructor you'll be given
402:34 - a date and time around December 31st
402:38 - 1969 So within the date Constructor you
402:40 - can pass in a given amount of
402:42 - milliseconds since this date so if I was
402:45 - to pass in 1.7 billion
402:52 - milliseconds
402:54 - what I'm telling the day Constructor is
402:56 - give me the date and time that's 1.7
403:00 - billion milliseconds since that epic
403:02 - date when I pass in 1.7 billion
403:06 - milliseconds the date that I'm given is
403:08 - Tuesday November 14th 2023 about 400
403:12 - p.m. passing in milliseconds would be
403:14 - good for some sort of timer now let's
403:16 - use the current date and time I will
403:18 - pass in no arguments you can extract
403:21 - individual values from a date object I
403:24 - would like the year const year equals
403:27 - take our date object I will use the get
403:31 - full year method to get the year then I
403:34 - will
403:36 - console.log the year and this will be a
403:39 - number
403:40 - 2023 let's get the
403:43 - month const month equals our date object
403:48 - use the built-in get month method then I
403:52 - will console without log the
403:55 - month currently for me it's November not
403:59 - October so remember January is zero
404:02 - December is 11 let's get the day const
404:07 - day equals date get date not day if you
404:13 - get the day that will give you the day
404:14 - of the week like Sunday Monday Tuesday
404:16 - that sort of thing let's
404:19 - console.log the
404:21 - day so for me it's the the 9th let's get
404:25 - the hour const hour equals date get
404:31 - hours
404:33 - plural
404:35 - console.log the hour for me it's 7 in
404:38 - the
404:39 - morning let's get
404:42 - minutes const minutes equals get
404:49 - minutes console.log the
404:52 - minutes it is 7:45 in the
404:56 - morning get
405:01 - seconds get
405:07 - seconds console.log the
405:11 - seconds so
405:13 - 745 21 seconds after the minute now if
405:16 - you need the day of the week here's what
405:18 - you can do const day of week equal
405:23 - equals date get day that will give you
405:27 - the day of the
405:28 - week
405:31 - console.log day of week for me that is
405:34 - for Sunday is zero Monday is one so that
405:37 - means it is Thursday now with the date
405:40 - object you can even set the date with a
405:43 - method let's
405:46 - console.log the
405:50 - date I'm GNA set the Year date set full
405:55 - year I will set the year to be
405:58 - 2024 yep Saturday November 9th
406:01 - 2024 let's set the
406:05 - month set
406:07 - month I will set the month to be January
406:10 - so I will pass in zero Tuesday January
406:14 - 9th let's set the
406:17 - day that would be with set date not day
406:21 - I will set it to be the first January
406:23 - jary
406:25 - 1st the hours with set
406:29 - hours let's go with two for two in the
406:32 - morning set
406:36 - minutes 3 minutes past the
406:39 - hour set
406:44 - seconds 4 seconds past the minute you
406:47 - can even compare dates as well let's
406:50 - create two date objects const date one
406:53 - equals a new date I'll pass in a string
406:57 - representation of a date we won't
406:59 - include the time though for the year
407:01 - let's say
407:02 - 2023 December that would be 12 31st New
407:06 - Year's Eve
407:07 - basically and for date
407:10 - two let's say date two is New Year's Day
407:14 - 2024 January
407:18 - 1st using an if statement let's compare
407:22 - to see if
407:24 - date 2 is greater than date
407:27 - 1 if it is then let's
407:31 - console.log happy New
407:34 - Year so date two is greater than date
407:37 - one we'll print happy New Year let's
407:41 - change date two to be
407:44 - 2023 December
407:47 - 30th well nothing happens then but
407:49 - that's to be
407:50 - expected all right everybody so those
407:52 - are date objects they're objects that
407:55 - contain values that represent dates and
407:57 - times these date objects can be changed
408:00 - and formatted to suit our needs and well
408:02 - everybody those are date objects in
408:08 - JavaScript hey what's going on everybody
408:10 - so in today's video I got to explain
408:12 - closures in JavaScript a closure is a
408:15 - function defined inside of another
408:18 - function the inner function has access
408:21 - to the variables and scope of the outer
408:23 - function by using closures they allow
408:26 - for private variables and state
408:28 - maintenance JS libraries and Frameworks
408:31 - such as react View and angular use
408:33 - closures all of the time you'll see
408:35 - closures fairly often with
408:37 - function-based components you have
408:39 - functions inside of other functions let
408:42 - me give you a very basic example we'll
408:44 - have an outer function named
408:48 - outer within the outer function we'll
408:50 - have a function named inner
408:55 - the inner function has access to
408:57 - everything within the outer function
409:00 - this scope if I was to create a variable
409:03 - let message equal the word
409:08 - hello within my inner function I can use
409:11 - this message
409:13 - variable
409:15 - console.log my message now if I invoke
409:18 - the outer function nothing appears to
409:21 - happen when we call the outer function
409:24 - we're now within the scope but then what
409:27 - there's one of a few things we could do
409:29 - if I would like to call the inner
409:31 - function from within the outer function
409:33 - I would need to call it somewhere here
409:36 - let's call the inner function at the end
409:38 - there we go we have displayed the word
409:41 - hello everything within the outer
409:43 - function is part of a closure we have a
409:46 - function defined inside of a function
409:48 - this inner function has access to
409:50 - everything within that scope includ
409:53 - cluding this message variable one
409:55 - benefit of using closures is that any
409:57 - variables are considered private outside
410:00 - of the outer function I will attempt to
410:02 - update our message message equals
410:06 - goodbye now this doesn't work as you can
410:08 - see this message variable is in a
410:11 - different scope it's kind of like it's
410:13 - in another dimension what we've done
410:15 - here is we have created a different
410:17 - message variable in a different scope
410:20 - outside of the outer scope I have no way
410:22 - of accessing the message M variable so
410:24 - that's one of the benefits of closures
410:26 - you can encapsulate variables and make
410:28 - them private let me give you another
410:30 - example a closure can maintain the state
410:33 - of a variable we'll create a counter
410:36 - program so I'm going to create a
410:38 - function to
410:41 - increment within the increment function
410:44 - I will set a count variable equal to 0o
410:48 - I will increment our count by one then
410:51 - console.log
410:54 - I'll use a template
410:55 - string count increased to I'll add a
411:00 - placeholder we'll display our count
411:03 - variable now anytime I attempt to call
411:06 - the increment function it'll increase
411:08 - our count by one but if I was to execute
411:11 - this function again well we're
411:13 - redeclaring this variable of count we're
411:16 - resetting it every time we call this
411:18 - function I can't get the count to go
411:21 - past one because we we keep on resetting
411:23 - it but by using a closure we can have
411:27 - state maintenance we can maintain the
411:29 - state of this variable and remember
411:31 - where this variable was previously I
411:33 - mean I could take this variable and
411:36 - declare it outside of the function but
411:38 - then we don't have any security for that
411:40 - variable I will set the count equal to a
411:44 - million we're maintaining the state of
411:46 - that variable but it's not private
411:49 - anybody and anything can access and
411:50 - change that variable a closure maintains
411:53 - the state of a variable and makes it
411:55 - private what we'll do is enclose all of
411:58 - this code within another
412:01 - function we'll create a function to
412:05 - create a
412:14 - counter how do we access the scope
412:16 - within the create counter function
412:18 - here's another
412:19 - possibility we will return an object we
412:24 - will need a set of curly
412:25 - braces our object will have a property
412:29 - of increment and its Associated value
412:32 - will be a reference to increment there
412:35 - is a shorthand version of this you can
412:38 - just use the function name as a property
412:40 - we're returning an object with the
412:42 - method of
412:44 - increment so now I'm going to create an
412:46 - object named counter counter equals
412:51 - invoke the create counter
412:53 - function this will return an object that
412:56 - has an increment
412:58 - method so I'm going to take our counter
413:00 - object use the increment
413:04 - method count increase to one not only do
413:07 - we have an increment method we have a
413:09 - count variable as well you could say
413:11 - that what we've done with this outer
413:12 - function it's very similar to creating a
413:14 - class we can use classes to instantiate
413:18 - objects in this case we used a function
413:21 - to return an object so if I was to take
413:23 - my counter and increment it again our
413:27 - closure should maintain the state of
413:29 - that variable count count increase to
413:31 - two it's not resetting every time we
413:33 - call the method count increase to
413:36 - three let's attempt to access our count
413:40 - variable counter. count equals
413:45 - z then I will
413:48 - console.log our
413:51 - count reference ER count is not
413:55 - defined let's attempt to display our
413:57 - count
413:58 - variable
414:00 - console.log take our counter object
414:03 - access the account
414:05 - variable it is undefined we don't know
414:08 - what it is it's hidden your closure can
414:12 - have more than one
414:14 - function so what we'll do is create a
414:17 - get count function we'll use the get
414:19 - count function to return our count if we
414:21 - need access to it
414:24 - function get
414:26 - count we will return our count
414:30 - variable within the return statement
414:33 - we're returning an object we will add
414:35 - another property of a reference to the
414:38 - get count
414:40 - function so now within our counter we
414:43 - have a method to get the count variable
414:46 - let's
414:48 - console.log I'll use a template string
414:51 - the Curve current count is I'll add a
414:55 - placeholder take our counter object use
414:59 - the get count method the current count
415:04 - is three if I was to increment our
415:07 - counter again well that increased to
415:09 - four all right last
415:12 - example we're going to create a closure
415:14 - for a game where we keep track of points
415:17 - we have a score let score equal Z we'll
415:21 - Define the function
415:25 - function increase
415:27 - score we'll have one parameter points in
415:31 - order to score some points we have to
415:33 - pass in some points as an
415:35 - argument take our score plus equals R
415:40 - Points then let's
415:44 - console.log I'll use a template string
415:47 - plus add a placeholder R
415:51 - Points then I'll add pts meaning points
415:54 - it's
415:55 - shortened let's create a function for
415:57 - decrease
415:59 - score change increase to
416:02 - decrease score minus equals
416:05 - points minus points and then let's get
416:09 - our
416:10 - score function get
416:15 - score
416:17 - return the
416:19 - score if I need to increase the score I
416:23 - will invoke The increased score function
416:26 - but I have to pass in points we scored
416:28 - five points let's do this
416:31 - again we scored six points let's
416:35 - decrease the
416:37 - score I will subtract three
416:42 - points minus three points let's get the
416:45 - current
416:46 - score
416:47 - console.
416:49 - log I'll use a template string the final
416:53 - score is add a
416:56 - placeholder get
417:00 - score the final score is eight I'm going
417:02 - to add points after that eight points
417:07 - all right problem with this is that we
417:09 - can take our score and set it to
417:12 - anything you scored like a kajillion
417:15 - points so for some security let's
417:18 - enclose all of this code within a
417:21 - closure I'll create an outer
417:23 - function function create game this will
417:28 - return an
417:29 - object let's cut all of this
417:32 - code paste it within the outer function
417:35 - of create
417:36 - game and then at the end we will return
417:40 - an object that has references to these
417:44 - functions return an object we need curly
417:47 - braces for that a reference to increase
417:51 - score
417:53 - decrease
417:55 - score and get
417:58 - score so
418:00 - now I will use the create game function
418:04 - to return an
418:06 - object const game game will be our
418:10 - object we will invoke the create game
418:13 - function and return an
418:16 - object so now if I want to increase the
418:18 - score decrease it or get the score I
418:22 - have to use the methods of this object
418:25 - game. increase
418:27 - score game. decrease score and game.get
418:33 - score we have five points six points
418:37 - minus three points and then we have the
418:39 - final score of eight points well
418:41 - everybody those are closures think of
418:43 - them as a function defined inside of
418:45 - another function the inner function has
418:48 - access to the variables and scope of the
418:50 - outer function these are used frequently
418:53 - with JS libraries and Frameworks such as
418:55 - react View and angular especially when
418:58 - you work with function based components
419:00 - and well everybody those are closures in
419:06 - JavaScript hey what's going on people so
419:09 - in today's video I'm going to explain
419:10 - the set timeout function in JavaScript
419:13 - the set timeout function allows you to
419:15 - schedule the execution of a function
419:17 - after an amount of time in milliseconds
419:20 - the times are approximate they vary
419:22 - based on the workload of your JavaScript
419:24 - runtime environment I wouldn't recommend
419:26 - using set timeout for anything precise
419:28 - like a stopwatch it's an approximation
419:31 - to use the set timeout function you pass
419:33 - in a call back to a function and a delay
419:35 - in milliseconds here's an example I will
419:38 - create a function to say
419:42 - hello all we're going to do is window.
419:46 - alert the word
419:51 - hello I will use the set timeout
419:54 - function pass in a call
419:57 - back we'll pass in a call back to say
419:59 - hello then execute it after 3,000
420:02 - milliseconds so 3 seconds let's see if
420:06 - this
420:06 - works 1 2 3 hello an anonymous function
420:12 - works too so instead of a call back
420:15 - we'll use an anonymous
420:17 - function function parenthesis curly
420:21 - braces
420:22 - window.
420:25 - alert the word
420:27 - hello 1 1000 2 1000 3 1000 hello or even
420:34 - an arrow function we have parameters
420:37 - Arrow what are we going to do window.
420:41 - alert the word
420:45 - hello 1 1,000 2 1,000 3 1,000 hello you
420:51 - can use the clear timeout function to
420:54 - cancel a timeout before it triggers but
420:56 - we have to pass in a time out ID so what
421:00 - we'll do with this set timeout function
421:03 - is assign it to an ID stored within a
421:06 - variable or constant
421:09 - const time out
421:12 - ID equals our set timeout function
421:16 - that'll display the word hello I can
421:19 - clear this time out with the clear time
421:22 - out function but I have to pass in that
421:24 - ID as an
421:25 - argument immediately after calling the
421:28 - set timeout function we will cancel it
421:31 - let's try it 1 1000 2 1000 3
421:36 - 1000 yeah nothing's happening we
421:38 - canceled it all right what we'll do this
421:41 - time is create a button using HTML when
421:44 - we click on the button we'll set a
421:46 - timeout to display the word
421:48 - hello
421:50 - so let's clear all of this go to our
421:53 - HTML file we'll create a
421:57 - button the button will have text of
422:02 - start and I'm going to zoom
422:05 - in I will set the onclick attribute to
422:10 - equal a function we will start a timer
422:14 - then add a set of
422:15 - parentheses when we click on the button
422:18 - do this function So within our
422:20 - Javascript file we will create a start
422:24 - timer
422:25 - function function start
422:29 - timer we will set time
422:34 - out I'll use an arrow
422:37 - function let's
422:39 - window. alert the word we will display
422:43 - the word hello after 3,000
422:47 - milliseconds all right so nothing's
422:49 - going to happen until I click the button
422:51 - I'm going to click it now 1 1,000 2
422:55 - 1,000 3 1000
422:58 - hello let's create a second button to
423:00 - clear the timeout if we need to stop it
423:04 - let's copy our first button paste
423:07 - it change the text of the button to be
423:10 - clear we will clear the timeout but
423:13 - we'll need another
423:15 - function clear
423:19 - timer so there's our second button
423:22 - we'll need a timeout ID so outside of
423:25 - this function I will declare a variable
423:28 - of let
423:30 - timeout
423:33 - ID when we start our timer we will
423:35 - assign the set timeout function an ID of
423:40 - timeout ID then we can stop it using
423:43 - this
423:44 - ID we will create a function to clear
423:47 - the
423:49 - timer we're going to use the clear
423:51 - timeout function clear time
423:55 - out we need to pass out a timeout ID as
423:59 - an argument which we will do and then
424:02 - just to be sure that everything works
424:04 - within both these functions let's
424:06 - console.log something let's say the word
424:09 - started within our start timer and
424:12 - within our clear timer let's display the
424:15 - word cleared just so we know that these
424:18 - functions were called so I'm going to
424:20 - save everything
424:22 - I'm going to start the timer but not
424:24 - clear it let's start now 1 1,00 21000 3
424:30 - 1,000 hello let's go to our
424:34 - console and it says that we started well
424:37 - starter I clearly can't spell today
424:40 - started we're going to start then
424:43 - cancel start 1 1,000 to 1,000
424:48 - clear and nothing happened let's go to
424:50 - our console and expect console we
424:53 - started set timeout and then we cleared
424:56 - it all right everybody that is the set
424:59 - timeout function it's a function in
425:01 - JavaScript that allows you to schedule
425:03 - the execution of a function after an
425:05 - amount of time in milliseconds execution
425:08 - time may vary based on the workload of
425:10 - the JavaScript runtime environment and
425:12 - well everybody that is the set timeout
425:14 - function in
425:19 - JavaScript hey what's going on people so
425:21 - in today's video we're going to create a
425:23 - digital clock using JavaScript HTML and
425:26 - CSS so let's get started the HTML for
425:30 - this project is going to be very minimal
425:32 - I will create a develop the ID of the
425:35 - development will be clock Dash container
425:39 - within this development we'll have a
425:41 - nested development with an ID of clock
425:46 - we have a clock within a clock container
425:48 - as a placeholder temporarily the text on
425:51 - the clock will be 0 0 colon 0 0 colon 0
425:56 - 0
425:57 - 000000000000 0 and I'm just going to
426:00 - zoom in
426:01 - temporarily and that is all the HTML
426:04 - that we need let's head to our CSS
426:07 - stylesheet let's begin with the
426:10 - body I will set all margin to be zero
426:14 - originally let's select our clock
426:17 - container ID clock container
426:22 - I'll use flex box for the clock
426:24 - container display
426:28 - Flex I will justify content in the
426:31 - center justify content
426:36 - Center if you would also like to
426:38 - vertically align you'll need to add the
426:40 - following two lines of code I will
426:44 - align items
426:46 - Center this CSS property will vertically
426:49 - align any elements but the clock
426:51 - container itself is kind of small for
426:53 - example I'll add a border of two pixel
426:58 - solid the elements within the clock
427:00 - container are aligned both horizontally
427:02 - and vertically but the container itself
427:04 - is kind of small to vertically align
427:06 - this element within the window itself
427:08 - we'll have to increase the height of the
427:10 - clock container I will add height of 100
427:15 - VH for the viewport height and we can
427:18 - remove the
427:19 - Border yep the clock is now within the
427:22 - middle of the container both
427:23 - horizontally and vertically but if you
427:26 - prefer it to be at the top you can
427:27 - eliminate these last two lines it's up
427:29 - to you let's style the clock itself we
427:33 - are selecting the ID of
427:36 - clock I will change the font family to
427:40 - be
427:43 - monospace this is the normal size when
427:45 - I'm zoomed in to 100% I will set the
427:49 - font size to be
427:52 - 6.5
427:54 - RM then set the font weight to be
427:59 - bold and text align
428:03 - Center if you would like a background
428:05 - image for the body of your document I
428:08 - just so happen to have one right here
428:10 - it's a picture of Central Park in New
428:11 - York this is optional but if you would
428:14 - like to include a background image of
428:15 - this project within your CSS stylesheet
428:19 - you'll add the following CSS properties
428:22 - I will set the background image property
428:25 - to be a
428:27 - URL so what is the name of that image
428:31 - I'm going to copy the name of it and
428:34 - paste it within this URL
428:36 - function I'll set the background
428:38 - position to be the center right now
428:40 - we're seeing the top left of the image
428:43 - instead of the
428:45 - center
428:47 - background Position will be Center
428:53 - if you're using a small image your image
428:55 - might be repeating itself to take up all
428:58 - the available space to prevent that you
429:00 - can set the
429:02 - background repeat
429:05 - property to be no
429:10 - repeat mine already wasn't repeating
429:12 - though but yours might be then we'll set
429:15 - the
429:17 - background size to cover
429:21 - by adding this property this image will
429:24 - cover the entire window and maintain its
429:27 - aspect ratio if you do have additional
429:29 - content besides this clock you can keep
429:32 - the background in place when you scroll
429:34 - down by adding this
429:36 - property
429:38 - background
429:40 - attachment to be
429:43 - fixed this property isn't going to be
429:46 - apparent because we don't have a scroll
429:47 - bar but if you did have a scroll bar the
429:50 - background will stay in place at least
429:52 - let's head back to our clock element I
429:55 - will change the color the font color to
429:57 - be
429:58 - white if you would like a background
430:01 - blur effect you'll add this property
430:04 - we'll set the backdrop filter property
430:08 - to be a blur
430:10 - function the greater the number the more
430:12 - blur effect you're going to have so this
430:15 - is five pixels if I were to increase
430:17 - this to
430:18 - 50 well there's a lot of blur then I'll
430:21 - set my blur to be five I would just like
430:23 - a little bit as if we're looking through
430:25 - glass I'll increase the width to be 100%
430:29 - to take up 100% of the width of the web
430:32 - browser width
430:36 - 100% to give this glass look a foggy
430:38 - appearance we can add a background color
430:41 - that's slightly
430:43 - gray background-
430:47 - color let's select gray but I like using
430:49 - hsl values
430:52 - so for the lightness I'll set it to be
430:54 - 100% but I'm going to lower the alpha
430:57 - down to like
431:01 - 10% now the background has a foggy glass
431:05 - appearance if you were to increase the
431:07 - amount of
431:08 - alpha that'll increase the
431:10 - lightness I'll keep mine as 10% 0.1 for
431:14 - the
431:15 - alpha all right now we just need to get
431:17 - this clock to run so let's save
431:19 - everything go to our JavaScript
431:22 - file we will create a function to update
431:26 - our
431:29 - clock immediately when we begin this
431:31 - program we will update our clock once
431:35 - immediately now we need to get the
431:36 - current time let's declare a constant of
431:40 - now what is the time right now this will
431:43 - be a new date
431:45 - object to get the hour we will say const
431:50 - hours equals use the
431:53 - builtin get hours method then let's do
431:57 - this with minutes con minutes equals
432:01 - now. get minutes
432:05 - method and seconds const seconds equals
432:10 - now. get
432:14 - seconds I'm going to change the text
432:16 - content of the clock to be a time string
432:19 - it will be a template string how do we
432:21 - want to arrange our
432:23 - numbers const time string equals a
432:28 - template
432:30 - string first We'll add a placeholder for
432:33 - our hours
432:36 - colon
432:37 - minutes
432:39 - colon
432:41 - seconds then we will select the ID of
432:45 - clock document. getet element by ID the
432:51 - ID that we're getting is our
432:53 - clock change the text content to equal
432:59 - our time string when we save the time on
433:02 - the clock should update currently for me
433:05 - it's 8:00 for each of these placeholders
433:08 - for hours minutes and seconds I would
433:10 - like each to take up two digits We'll
433:13 - add some zeros for padding for example
433:15 - this time will be
433:19 - 08006 there's a built-in string method
433:21 - for that so with hours minutes and
433:23 - seconds we will convert these to
433:26 - Strings we'll use method chaining then
433:29 - add to string do this for hours minutes
433:32 - and
433:33 - seconds with strings there's a pad start
433:39 - method for the first two
433:42 - characters pad them with a
433:44 - zero let's copy this method and paste it
433:47 - for minutes and seconds now when I save
433:50 - an up the time we have zero padding 08
433:54 - 01 54 in this case to get this clock to
433:58 - update every second will follow update
434:00 - clock with the set interval function set
434:06 - interval works like set timeout except
434:08 - it will call a function repeatedly not
434:10 - just once but we need a call back the
434:13 - call back will be update clock call this
434:16 - function after every 1,000 milliseconds
434:20 - and now our our clock should
434:23 - run currently this clock is in military
434:26 - time although I'm recording this at 8 in
434:28 - the morning if you would like this clock
434:30 - to be a 12-hour clock then add am or p.m
434:33 - here's the following changes we're going
434:35 - to make we'll declare hours with let
434:38 - instead of const so we can change it and
434:40 - reassign it we'll create a new constant
434:43 - of
434:44 - meridium 400 a.m. or
434:47 - p.m. this will equal hours is ours
434:51 - greater than or equal to 12 we'll use
434:54 - the erary operator to check this if ours
434:57 - is greater than or equal to 12 meridium
435:00 - will be PM otherwise it will be
435:06 - am then after our
435:08 - meridium we'll reassign hours hours
435:12 - equals
435:14 - hours modulus modulus gives you the
435:16 - remainder of any division ours modulus
435:19 - 12 if this is zero we'll use the or
435:23 - logical operator or 12 after seconds
435:27 - We'll add a placeholder for our
435:31 - meridium currently we lost our padding
435:34 - for the hours so we're going to cut this
435:37 - part of our code to convert ours to a
435:39 - string and Pad
435:41 - it we'll take ours equals hours to
435:45 - reassign it follow hours with converting
435:48 - it to a string using the two string
435:50 - method and Pad it before displaying
435:53 - it all right and that has appeared to
435:56 - work all right everybody so that is a
435:58 - digital clock program you can make using
436:00 - HTML CSS and
436:06 - JavaScript hey what's going on everybody
436:08 - in today's video I'm going to show you
436:10 - how we can create a stopwatch program
436:12 - using JavaScript HTML and CSS so sit
436:16 - back relax and enjoy the show all right
436:18 - let's get started everybody we will
436:20 - create an H1 heading with textt of
436:24 - stopwatch and I will give this H1
436:26 - element a unique ID of my
436:29 - H1 then we'll create a container for our
436:32 - stopwatch this will be a div
436:34 - element this div element will have an ID
436:38 - of container to contain everything our
436:41 - container is going to have two sections
436:43 - two
436:49 - developments the First Development is
436:51 - going to be for our display ID
436:55 - display I'll give this development some
436:57 - initial text as a placeholder we'll have
437:00 - zeros for hours minutes seconds and
437:04 - milliseconds then our next development
437:06 - will have an ID of controls for all the
437:09 - control buttons within this development
437:12 - of controls we'll create three
437:15 - buttons the first button will be start
437:19 - the ID of this button will will be start
437:22 - button BTN short for button then I will
437:25 - set the onclick event handler equal to a
437:28 - JavaScript function we will eventually
437:31 - create a start function we still need to
437:33 - Define it let's copy this button paste
437:36 - it
437:37 - twice the second button will be for stop
437:41 - the ID will be stop button the onclick
437:44 - attribute will be for a stop function
437:47 - the text on the button will be stop and
437:51 - then we have a reset
437:52 - button the ID is reset
437:55 - button the onclick attribute will be for
437:58 - a reset function the text on the button
438:01 - will be
438:03 - reset all right and that is all the HTML
438:05 - that we need let's go to our CSS
438:09 - stylesheet I will first select the body
438:11 - of our document we'll use flexbox to
438:14 - display everything because I like
438:16 - flexbox display Flex the flex Direction
438:21 - will be a
438:23 - column then I will align items
438:28 - Center I'll set the background color of
438:31 - this
438:33 - application
438:35 - background-color pick a color again I
438:38 - like using hsl
438:40 - values I'll set the lightness to
438:43 - 90% our container is going to be a
438:45 - lighter color we will select the ID of
438:48 - my H1 that's going to be the heading I
438:52 - will set the font
438:53 - size to be 4
438:56 - RM the font
438:58 - family I will pick
439:02 - Ariel with a backup of s's
439:06 - serif for the font color I will set the
439:09 - color property to be pick a
439:13 - color I'll pick black but set the
439:15 - lightness to
439:17 - 25% all right now we are going to select
439:20 - the container that contains everything
439:22 - besides the
439:23 - heading this
439:25 - area we will select the ID of
439:29 - container I will use flex box within the
439:32 - container display
439:35 - Flex the flex direction will be a
439:41 - column and aligned item
439:47 - Center let's add a border a border
439:50 - around the container 5 pixel
439:55 - solid and I will round the corners
439:58 - border
439:59 - radius let's do 50
440:03 - pixels and I'll add a little bit of
440:07 - padding padding 30
440:10 - pixels and I will set the background
440:12 - color to be white background
440:16 - color
440:18 - white we'll work on the time display
440:22 - next select the ID of
440:26 - display I will set the font
440:28 - size to be 5
440:31 - RM for the font
440:34 - family I'm going to set it to be
440:38 - monospace and the font weight I will set
440:42 - to be
440:43 - bold I'll change the
440:49 - color I'll set the lightness to
440:51 - 30% I'll give a text Shadow to the
440:54 - display so it looks like it's somewhat
440:56 - 3D like it's popping out so text
441:00 - Shadow two pixels and two pixels for the
441:03 - vertical and horizontal offset and a
441:06 - blur of two
441:07 - pixels now for the color I'm going to
441:11 - lower the
441:12 - alpha to 75% or
441:18 - so that's not bad bad then I'll add a
441:22 - little bit of margin to the bottom
441:24 - margin bottom 25
441:27 - pixels now we have to style the buttons
441:30 - we will select the ID of controls but I
441:34 - would like the button elements within
441:35 - the controls after selecting the ID of
441:38 - controls select any buttons within that
441:42 - element we'll increase the font size of
441:44 - the buttons font size 1.5 RM I will set
441:49 - the font weight of the buttons to be
441:53 - bold I'll add a little bit of padding 10
441:57 - pixels by 20
441:59 - pixels I'll add some margin around the
442:02 - buttons 5
442:05 - pixels I'll set a minimum width of the
442:08 - buttons to be 125
442:12 - pixels let me scroll
442:14 - down I'll remove the border border
442:19 - none set the Border radius of the
442:21 - buttons to be 10
442:24 - pixels change our cursor to be a pointer
442:28 - when we hover over the buttons let's see
442:31 - if that works yes it
442:33 - does then set the font color of the
442:35 - buttons to be
442:37 - white now let's color the start button
442:40 - we will select the ID of start
442:43 - button set the background
442:45 - color pick a color I'll start with
442:48 - something green
442:52 - pick whichever color you would
442:58 - like I'll pick this shade of green here
443:01 - are the values when we hover over the
443:03 - start button we will access the hover
443:07 - sudo class of our start
443:08 - button I'll decrease the lightness by
443:13 - 10% let's copy the markup that we have
443:15 - for the start button paste it
443:18 - twice we'll add color to the stop
443:23 - button and the reset
443:28 - button I'll set the stop button to be
443:33 - red here are the hsl values that I
443:36 - picked when I hover over this button
443:39 - I'll set the lightness to be 10%
443:43 - darker for the reset button I'll set
443:45 - that to be
443:48 - blue when we hover our cursor over the
443:51 - reset button I will set the lightness to
443:53 - be 10%
443:55 - darker not bad for all of the buttons
443:59 - I'm going to add a transition
444:02 - effect
444:04 - transition select the background color
444:08 - we will create an ease
444:09 - transition after 0.5 seconds we will
444:15 - ease so when you hover your cursor over
444:18 - the buttons there's going to be a slow
444:20 - transition when we
444:24 - hover okay and that is all the CSS that
444:27 - we need we will now go to the Javascript
444:29 - file to add some functionality let's
444:32 - declare all the variables we'll need
444:34 - we'll get the ID of the display and
444:36 - store a reference to it const display
444:41 - equals document. getet element by ID the
444:45 - ID that I'm selecting is
444:48 - display this
444:51 - ID we will create a timer let timer
444:55 - equals
444:57 - null timer is going to hold the ID of
445:01 - set interval so we can keep track of it
445:03 - and stop it if we need to then we need a
445:06 - start time let start time equal zero let
445:11 - elapsed
445:12 - time equal
445:15 - zero let is running this will be a
445:19 - Boolean which I will set to be
445:21 - false if the stopwatch is currently
445:23 - running we will flip this to be true and
445:26 - flip it to be false to stop it what are
445:29 - the functions that we need we have a
445:32 - start stop and reset
445:36 - function function
445:40 - start function
445:44 - stop function
445:48 - reset We'll add one more function of
445:50 - update to update the
445:53 - display function
445:56 - update we'll begin with the start method
445:58 - we'll enclose everything within our
446:00 - function within an if statement we need
446:03 - to check to see if our stopwatch isn't
446:06 - running if our stopwatch isn't currently
446:08 - running if not running then start the
446:12 - stopwatch we need to set the start time
446:15 - the start time equals we will get the
446:18 - current date date do now minus the
446:22 - elapse time which will be zero
446:26 - initially so just to demonstrate what
446:28 - the start time is I'm going to
446:31 - console.log my start
446:37 - time so the start time is going to be in
446:40 - milliseconds since epic epic basically
446:43 - speaking is when your computer thinks
446:44 - time
446:48 - began
446:50 - we will set our timer equal to the set
446:54 - interval
446:56 - function we will call the update
446:58 - function every 10
447:02 - milliseconds so if I was to display my
447:04 - timer console.log
447:07 - timer this is what it
447:11 - is our timer stores a unique ID to work
447:15 - with this function if we ever need to
447:17 - stop
447:18 - it
447:22 - we'll take the Boolean variable of is
447:24 - running set it to be true because our
447:26 - stopwatch is not running now we need to
447:29 - go to the update function to actually
447:30 - get it
447:31 - working we need to get the current
447:34 - time
447:36 - const current time equals access our
447:41 - date use the now method what is the date
447:45 - right now we will calculate the elapse
447:48 - time
447:51 - equals the current time minus our start
447:56 - time whatever that was when we initially
447:58 - pressed the start
448:00 - button so the current time minus our
448:03 - original start time gives us the elapse
448:05 - time and this is going to be in
448:08 - milliseconds we need to convert the
448:10 - elapse time into a readable format using
448:13 - hours minutes seconds and milliseconds
448:15 - we'll begin with
448:17 - hours let hours
448:20 - equals take our lapse time divided by to
448:25 - convert milliseconds to hours we can
448:27 - follow this formula elapse time divided
448:30 - by 1,000 milliseconds * 60 seconds times
448:36 - 60
448:37 - minutes we don't want any decimal
448:39 - portions with our hours we will enclose
448:41 - all of this with the floor method of
448:47 - math now we're going to do something
448:49 - similar with minutes let minutes equals
448:54 - take our lapse
448:55 - time we need to convert milliseconds to
448:59 - minutes divided by 1,000 milliseconds in
449:03 - a
449:04 - second times 60 seconds in a minute then
449:09 - modulus
449:10 - 60 modulus gives you the remainder of
449:12 - any division we don't want our minutes
449:14 - display to hit 60 or go above 60 once we
449:17 - hit 60 it'll reset back to zero enclose
449:21 - this formula with math. floor to round
449:24 - it math.
449:27 - floor okay then we have to take care of
449:29 - seconds let seconds equals take our
449:34 - lapse
449:36 - time divided 1,000 to convert
449:39 - milliseconds to
449:41 - seconds modulus
449:43 - 60 and close all of this with math.
449:46 - floor to round
449:48 - it
449:52 - now for milliseconds let
449:55 - milliseconds equals take the elapse time
449:59 - which is already in
450:00 - milliseconds modulus 1000 milliseconds
450:04 - is normally four digits we're going to
450:06 - divide it by 10 we only want the first
450:08 - two
450:10 - digits divided by 10 en close all of
450:13 - this with math.
450:15 - floor math.
450:18 - floor
450:20 - then let's change the
450:22 - display we'll access our
450:26 - display access the text content of the
450:29 - display set it equal to a template
450:32 - string if you would like to display the
450:34 - hours it's optional we will add a
450:36 - placeholder for hours colon placeholder
450:42 - minutes colon placeholder seconds if you
450:46 - would like to display the milliseconds
450:48 - we can add a placeholder for that colon
450:51 - placeholder
450:54 - milliseconds let's see what we have so
450:56 - far I'm going to hit the start button
450:59 - and here's what we
451:01 - got so the stopwatch is running but we
451:04 - should add some zeros for padding so I'm
451:06 - going to refresh to stop
451:08 - it we'll convert hours minutes seconds
451:11 - and milliseconds into a string then add
451:13 - some padding of zeros to it if the
451:15 - number is only one digit not two we will
451:18 - convert our hours minutes seconds and
451:20 - milliseconds into a string before
451:22 - displaying it so let's take hours equals
451:26 - hours I will typ cast it as a
451:31 - string follow this with the pad start
451:37 - method for the first two
451:39 - digits at a zero let's do this for
451:43 - minutes seconds and
451:45 - milliseconds
451:47 - minutes seconds
451:50 - and
451:52 - milliseconds we should have some zeros
451:54 - for padding to make each display two
451:57 - digits and that does appear to work
452:00 - nice now we just need to get the
452:02 - stopwatch to actually stop right now
452:04 - there's no
452:06 - functionality going to our stop function
452:08 - we need to check to see if our program
452:10 - is running is this variable is running
452:16 - true if is running if that that's true
452:20 - then stop the
452:21 - stopwatch we will use the clear interval
452:25 - function we need to pass in that unique
452:27 - ID for the
452:30 - timer this will stop the stopwatch from
452:32 - running then we will calculate the
452:34 - elapse time elapsed time equals the date
452:40 - right now date. now method minus the
452:44 - original start
452:46 - time then set is running
452:50 - equal to false because the stopwatch is
452:53 - stopped it's not running
452:55 - anymore now we can start the
452:58 - stopwatch and we can stop it we can
453:01 - start it and we can stop it the last
453:04 - thing we need to do is reset the
453:06 - stopwatch we can really just copy
453:08 - everything that we have when we
453:09 - initially assign these
453:12 - variables we need to clear the timer
453:16 - clear interval p pass in our variable
453:20 - timer that contains the ID of the set
453:22 - interval
453:24 - function the start time will be zero the
453:27 - elapse time will be
453:29 - zero is running will be
453:32 - false change the text content equal to
453:38 - all
453:39 - zeros this is for the hours minutes
453:44 - seconds and
453:46 - milliseconds all right let's see if
453:47 - everything works just fine we can
453:51 - start we can
453:53 - stop we can start we can stop we can
453:58 - reset we can start and we can stop all
454:02 - right everybody so that is how you can
454:04 - create a stopwatch program using
454:06 - JavaScript HTML and
454:12 - CSS hey what's going on everybody so
454:14 - today I'm going to explain es6 modules
454:16 - in JavaScript a module is an external
454:20 - file that contains reusable code that
454:22 - can be imported into other JavaScript
454:24 - files let's say you write a really
454:27 - difficult program well any part of that
454:29 - program you can import into a different
454:31 - application if you don't feel like
454:33 - rewriting it modules can contain
454:35 - variables classes functions and more es6
454:38 - modules were introduced as part of the
454:40 - ecmascript 2015 update using modules we
454:43 - can create some reusable code that can
454:45 - be used in different programs different
454:47 - JavaScript files
454:49 - so what we'll do in this example we will
454:51 - create a new
454:53 - file I'll create a module for some math
454:56 - utility functions this file will be math
455:01 - u.j it's a separate Javascript
455:04 - file from our index file we will import
455:08 - this module mathu till. JS but in order
455:11 - to do so within our HTML file we have to
455:15 - set the type
455:16 - attribute equal to
455:19 - module we'll now treat our index file as
455:22 - a module we can Import and Export other
455:25 - modules freely but we have to be sure to
455:27 - include this attribute and set it equal
455:29 - to
455:30 - module So within our math util module we
455:34 - can write some reusable code for other
455:36 - programs so let's define what Pi is Pi
455:41 - equal
455:44 - 3.14159 we'll create a function to get
455:47 - circumference you have to pass in a
455:48 - radius though that's going to be the
455:50 - parameter function get
455:56 - circumference we need a
455:59 - radius we will
456:01 - return 2 * pi time
456:08 - radius then we'll create a function to
456:10 - get
456:12 - area get area we still need a
456:17 - radius we will turn Pi * radius *
456:24 - radius then get volume to get the volume
456:27 - of a
456:27 - sphere function get
456:31 - volume again we need a
456:34 - radius we will
456:36 - return 4 * < * radius *
456:43 - radius I can reuse these variables and
456:45 - functions for any JavaScript program
456:47 - that I have I can import them in order
456:49 - to do so though we need to be sure that
456:51 - we prefix each variable function or
456:53 - class or anything else with the export
456:57 - keyword so that we can import it
456:59 - elsewhere so let's be sure we do
457:04 - that all right be sure to save
457:06 - everything we can close out of this
457:08 - module then from our index CSS file I
457:11 - will
457:13 - import then we're going to use object
457:15 - destructuring we need a set of curly
457:17 - braces
457:19 - from the location of that module so
457:22 - these files are right next to each other
457:25 - relatively speaking the right next to
457:27 - each other I would need slash the name
457:30 - of that file math util and this is a
457:34 - Javascript
457:35 - file now anything I would like to import
457:38 - I'll place within the set of curly
457:40 - braces we're going to be using object
457:42 - destructuring from this JavaScript
457:44 - module I would like Pi comma separate
457:49 - each entity then I would like get
457:54 - circumference get area get
457:59 - volume I can now use these variables and
458:02 - functions as if they were already part
458:04 - of my Javascript file for example I'm
458:07 - going to
458:09 - console.log Pi and Pi does have a value
458:13 - because we imported it let's get the
458:16 - circumference but we do need to pass in
458:18 - a radius
458:19 - this is a function that we have imported
458:21 - from that mathutils module I will store
458:25 - the result within a
458:30 - variable const circumference equals
458:33 - we'll invoke the get circumference
458:36 - function from that module I'll pass in
458:38 - 10 then we're going to display the
458:40 - circumference I'll use console.
458:43 - log I'll use a template string include a
458:46 - placeholder display the circumference
458:49 - plus a unit of measurement like
458:51 - cenm 62.83 one8 CM this isn't necessary
458:56 - but I'm going to round this number to
458:58 - two decimal places using the two fixed
459:01 - method of numbers let's round to two
459:04 - decimal places let's create an area
459:06 - variable const area equals get area I'll
459:12 - pass in 10 for the
459:14 - radius let's copy this line and paste it
459:17 - because I'm lazy let's display our area
459:20 - variable with cm
459:23 - cubed
459:25 - 31416 cenm cubed then we'll create a
459:29 - volume variable const volume equals get
459:34 - volume I will pass in
459:37 - 10 and then we will display the
459:42 - volume volume cm cubed and our volume if
459:47 - we pass in a radius of 10 would be
459:50 - 1,256 64 cm cubed all right everybody so
459:54 - those are modules they external files
459:57 - that contain reusable code that can be
459:59 - imported into other JavaScript files you
460:02 - can write variables classes functions
460:04 - and more that can be reused in other
460:06 - programs you just have to be sure to
460:08 - import them and well everybody those are
460:10 - es6 modules in
460:16 - JavaScript yo what's going on on people
460:19 - so in today's video I got to explain
460:20 - what asynchronous code is in JavaScript
460:23 - synchronous is code that executes line
460:26 - by line consecutively in a sequential
460:28 - manner synchronous code waits for an
460:31 - operation to complete for example if I
460:33 - were to use
460:35 - console.log Let's Pretend We're
460:37 - performing some task it doesn't matter
460:39 - what the task is we will pretend that
460:41 - task one is complete then we'll move on
460:44 - to task two then task three all this
460:47 - code is synchronous
460:48 - we're executing this code line by line
460:51 - we can't move on to task two until we
460:54 - complete task one there is an order of
460:56 - events that we need to follow it's code
460:59 - that waits for an operation to complete
461:02 - now on the other hand asynchronous code
461:04 - allows multiple operations to be
461:06 - performed concurrently without waiting
461:10 - asynchronous code doesn't block the
461:12 - execution flow and allows the program to
461:15 - continue imagine that asynchronous code
461:17 - is kind of like a time traveler a time
461:20 - traveler can move out of the flow of
461:22 - time but the rest of the world continues
461:24 - time resumes normally asynchronous code
461:27 - doesn't block the execution flow time
461:29 - moves on with or without it asynchronous
461:32 - code is typically found with input
461:34 - output operations Network requests and
461:37 - fetching data anything that could take
461:39 - an indeterminate amount of time so for
461:42 - example I will use the set timeout
461:47 - function after after 3 seconds I will
461:50 - execute a
461:51 - function let's
461:53 - console.log let's say task one we'll
461:57 - change these three lines to be task 2
462:00 - task three task 4 I will finish Task 1
462:04 - after 3,000 milliseconds now check this
462:08 - out we've already completed task 2 3 and
462:11 - four but task one finished last that's
462:14 - because set timeout is one of many
462:17 - asynchronous functions s the rest of the
462:20 - program isn't going to wait around for
462:21 - it to complete it runs concurrently with
462:24 - the rest of my code that's why task one
462:27 - was completed at the end and not at the
462:29 - beginning there's different ways to
462:31 - handle a synchronous code we're already
462:33 - familiar with callbacks but there's also
462:35 - promises as well as a sync and a wait we
462:39 - still need to discuss these topics in
462:40 - the future but we're already familiar
462:42 - with callbacks if it's crucial that task
462:45 - 2 through 4 finishes after task one
462:48 - we can use a callback we don't
462:50 - necessarily know how long this
462:52 - asynchronous function is going to take
462:54 - what we could do in this example is
462:56 - create a function function Funk one
462:59 - meaning function
463:01 - one I will execute this code within
463:03 - function
463:05 - one then we will accept a callback as an
463:09 - argument then we'll have function Funk 2
463:16 - to do some synchronous code
463:19 - function two will have tasks 2 through
463:23 - 4 after task one is complete I will
463:26 - invoke my call back to function two so
463:29 - with an arrow function I have more than
463:31 - one line of code I need to add a set of
463:33 - curly
463:34 - braces after task
463:37 - one I will invoke that call
463:42 - back so then if I call function
463:46 - one I have to pass a call back to
463:49 - function
463:51 - two so Now function one is
463:54 - asynchronous but I need this synchronous
463:57 - code to execute after task one is
464:00 - complete and now that should
464:02 - work one 2 3 there it is we have task
464:07 - one which is asynchronous followed by
464:10 - task two task three and task four so by
464:14 - using callbacks that's one way in which
464:16 - we can handle asynchronous code
464:18 - but we still need to discuss promises a
464:21 - sync and a wait which are future topics
464:24 - all right everybody so that is what a
464:26 - synchronous code is synchronous code
464:28 - executes line by line consecutively in a
464:31 - sequential manner asynchronous code
464:34 - allows multiple operations to be
464:36 - performed concurrently without waiting
464:39 - asynchronous code doesn't block the
464:42 - execution flow and allows the rest of
464:44 - the program to continue asynchronous
464:46 - code is commonly found with input output
464:49 - operations Network requests and fetching
464:52 - data usually anything that takes an
464:54 - indeterminate amount of time and well
464:56 - everybody that's what asynchronous code
464:58 - is in
465:03 - JavaScript hey people so in today's
465:05 - video I'm going to explain error objects
465:07 - in JavaScript and how to handle them an
465:10 - error is an object that is created to
465:12 - represent a problem that occurs errors
465:15 - occur often usually when we accept user
465:17 - input or establish a connection it's an
465:20 - object that's created to represent a
465:22 - problem so for example I am going to
465:26 - console.log the word hello and then
465:29 - afterwards I'm going to display a
465:31 - message to indicate that we have reached
465:33 - the end of the program you have reached
465:37 - the end this runs as it should right
465:41 - let's say I misspell log as leg well we
465:44 - encounter an uncaught type error there's
465:47 - many different types of Errors console.
465:50 - leg is not a function type errors tend
465:52 - to happen when we try and access
465:54 - something within an object that doesn't
465:56 - exist one big issue that we run into is
465:59 - that we prematurely exit the program it
466:02 - never finishes executing we have not
466:04 - reached the end errors when they're
466:06 - uncaught interrupt the normal flow of
466:09 - our program another example of an error
466:11 - would be a reference error I will
466:14 - console.log X but X isn't defined we
466:17 - have an uncaught reference error X is
466:20 - not defined and again it interrupts our
466:22 - program we never reach the end errors
466:25 - can be generated for all sorts of issues
466:27 - such as network issues promise rejection
466:30 - which we still need to talk about and
466:32 - security errors when we encounter a
466:34 - problem when doing one of these things
466:36 - an error object will be generated and it
466:38 - interrupts our program there's a
466:41 - solution though and that is to handle
466:43 - these errors when they occur we can do
466:45 - that with try catch and find blocks with
466:49 - the tri block we can enclose any code
466:52 - that might potentially cause an error
466:55 - such as if we're trying to establish a
466:56 - connection to something if that
466:58 - connection fails an error can occur if
467:01 - we don't handle it it's going to
467:02 - interrupt our program so all of this
467:04 - code I will place within a tri block we
467:07 - will try all of this
467:11 - code but we need a catch block
467:14 - too the catch block has one parameter it
467:18 - will catch an error
467:20 - object then let's
467:23 - console.log the error object to see what
467:25 - it is so let's run this we have a
467:29 - reference error a is not defined see now
467:33 - we are reaching the end of the program
467:35 - the program is not being interrupted we
467:37 - have gracefully handled this error
467:40 - before it was uncaught but now it's
467:42 - caught for catching errors I wouldn't
467:44 - recommend using
467:45 - console.log rather I would use console .
467:48 - error this will highlight any errors
467:50 - that occur and still handle them it's
467:53 - good for debugging we can clearly see
467:55 - the error reference error X is not
467:58 - defined and again it doesn't interrupt
468:00 - our program we still reach the end now
468:03 - optionally you can add a finally block
468:06 - the finally block always executes
468:09 - regardless if an error comes up the
468:11 - finally block is usually used for
468:13 - closing files closing connections or
468:16 - releasing resources usually when you
468:18 - open something or establish a connection
468:20 - you need to close it afterwards you
468:22 - don't want to leave it open that's where
468:24 - the finally block comes in do any
468:26 - cleanup at the end whether or not an
468:28 - error occurs so just to test this I'm
468:31 - going to
468:34 - console.log this always
468:39 - executes I'm going to console.log X we
468:43 - have a reference error it is caught so
468:45 - it doesn't interrupt anything we're
468:47 - still executing the finally block and we
468:50 - reach the end of our program if we don't
468:52 - run into any errors I'm going to
468:54 - console.log
468:56 - hello there are no errors that occur we
468:59 - don't end up catching anything this
469:01 - always executes the finally block and we
469:04 - reach the end of our program so any code
469:06 - that is considered dangerous where it
469:08 - could cause an error you'll want to
469:10 - surround with a tri block and then catch
469:12 - them in the future if you ever open any
469:14 - files or establish a connection you'll
469:16 - want to finally block two close those
469:18 - connections but we haven't discussed
469:20 - that yet errors can also occur when
469:22 - accepting user input because we don't
469:24 - know what the user is going to type in
469:26 - in a worst case scenario a user could
469:28 - type in a malicious script in this next
469:31 - example I'm going to create a constant
469:33 - for a dividend and a advisor const
469:36 - dividend equals window.
469:42 - prompt enter a
469:46 - dividend with division a dividend is the
469:49 - number that is being divided and we need
469:52 - a
469:55 - diviser a divisor is the number we're
469:57 - dividing by enter a
470:00 - divisor then I'm going to create a
470:03 - constant result result equals our
470:08 - dividend divided by our
470:11 - diviser
470:14 - console.log the
470:16 - result
470:18 - what is 1 / 2
470:21 - 0.5 now mathematically speaking we can't
470:24 - divide a number by 0 if you attempt to
470:27 - do this in JavaScript I will divide 1 by
470:30 - zero you end up with infinity we can
470:33 - intentionally cause errors then handle
470:36 - them with try catch and optionally
470:38 - finally blocks so this code is
470:41 - considered dangerous I'll place it
470:43 - within a tri
470:46 - block
470:48 - we need to catch any
470:50 - errors catch an error object if it
470:54 - occurs then console.
470:57 - error the error
470:59 - object so just to test this instead of
471:02 - console. log I'll misspell log as
471:06 - leg I should probably add a message just
471:09 - to confirm that we have reached the
471:11 - end you have reached the
471:15 - end 1 / 0
471:19 - type error console. leg is not a
471:21 - function but we still reach the end our
471:23 - program isn't interrupted within a tri
471:26 - Block in certain situations we can
471:29 - intentionally cause an error I'm going
471:32 - to use an if
471:34 - statement if our
471:36 - divisor is equal to
471:39 - zero then I will throw a new error
471:44 - object we're calling the error
471:46 - Constructor to constru conu a new error
471:48 - object within the Constructor we have
471:51 - one argument we can pass in a message
471:53 - what is the error going to say you can't
471:57 - divide by
471:59 - zero okay let's try this enter a
472:02 - dividend one enter divisor I'll type in
472:05 - zero then press
472:07 - okay we have a caught error you can't
472:10 - divide by zero our program isn't
472:13 - interrupted we still reach the end let's
472:16 - change console. Le back to log cuz I
472:18 - forgot to do that what if somebody
472:20 - attempts to type in something that's not
472:22 - a number enter a dividend one enter a
472:25 - divisor I'll type in the word
472:27 - Pizza not a number you have reached the
472:29 - end I would like to throw a new error
472:32 - when somebody doesn't type in a number
472:34 - what I can do is that with our prompt I
472:37 - will typ cast it as a
472:41 - number if somebody enters in some
472:43 - non-numeric characters for either the
472:46 - dividend or the diviser we will store
472:48 - within there not a number so let's check
472:51 - that with an if statement if is not a
472:56 - number if our dividend is not a number
473:01 - or our divisor is not a
473:05 - number let's throw a new error throw new
473:12 - error values must be a number
473:18 - I will divide one by the word
473:21 - Pizza error values must be a number we
473:24 - still reach the end of our program with
473:26 - error objects you can even create your
473:28 - own in certain situations and then you
473:31 - can handle them however you want all
473:33 - right everybody so those are error
473:34 - objects and how to handle them an error
473:36 - is an object that is created to
473:39 - represent a problem that occurs they
473:41 - occur often with user input or
473:44 - establishing some sort of connection to
473:46 - handle them you can use try catch and
473:49 - optionally finally blocks which are
473:51 - mostly used for cleanup if there's any
473:53 - code that can cause an error place it
473:55 - within a tri block and catch any errors
473:58 - that happen and well everybody that is
474:00 - how to handle errors in
474:05 - JavaScript hey what's going on everybody
474:07 - in today's video we're going to create a
474:09 - calculator program using HTML CSS and
474:12 - JavaScript so let's get started all
474:15 - right let's do this thing everybody we
474:17 - have a lot of buttons to create but
474:19 - we'll need a container I will create a
474:21 - div element the div element will have an
474:24 - ID of
474:26 - calculator within the div element we'll
474:29 - create an input
474:31 - element the input element will have an
474:34 - ID of
474:36 - display to display the numbers that we
474:38 - type in I don't want somebody to enter
474:40 - in some text for the
474:42 - display I would like this display to be
474:45 - readon I will add the read only property
474:49 - so we can't type in anything even though
474:51 - I'm trying I will create a nested div
474:55 - element that has an ID of keys for all
474:59 - of the keys we need to add a lot of
475:01 - buttons we'll begin with the first I
475:04 - will create a button element the text on
475:07 - the button will be plus I will set the
475:10 - on click attribute of this button to be
475:14 - a JavaScript function we still need to
475:16 - Define this fun function eventually
475:18 - we'll create a append to display
475:23 - function we have one argument to pass
475:25 - into this JavaScript function a
475:28 - character of
475:30 - plus that's our first button let's copy
475:34 - this button and paste it 13 additional
475:37 - times if I counted
475:45 - right okay the second button will be
475:48 - seven the character we're passing in is
475:51 - seven followed by
475:53 - 8
475:56 - 9
475:59 - minus
476:01 - 4
476:03 - 5
476:06 - six asterisk for
476:11 - multiplication
476:12 - 1
476:14 - 2
476:16 - 3
476:17 - forward slash for
476:19 - division then
476:23 - zero and here are the new buttons I
476:26 - miscounted we need to add one
476:28 - more a DOT for a
476:31 - decimal now we need an equals button
476:34 - we're going to arrange that a little
476:35 - different let's create a
476:37 - button with the text of
476:41 - equals the onclick attribute of this
476:44 - specific button is going to be
476:48 - calculate then we need a button to clear
476:51 - our
476:54 - screen the text on this button will be
476:57 - capital c for clear the onclick
477:00 - attribute of this button is going to be
477:04 - clear
477:06 - display and that is all the buttons
477:08 - we'll
477:09 - need so let's save everything and let's
477:12 - go to our CSS
477:14 - stylesheet I'm going to zoom back to 100
477:17 - % first let's style all these buttons I
477:21 - will select all
477:23 - buttons for each button I will set the
477:25 - width to be 100
477:28 - pixels the height to be 100 pixels so
477:32 - they're
477:33 - even I would like rounded buttons I will
477:36 - set the Border radius property to be 50
477:40 - pixels so they're
477:42 - circles let's remove the
477:45 - border border
477:48 - none I'll change the background color of
477:51 - the buttons background-
477:54 - color I'll use hsl values I'll set the
477:58 - lightness to be 30% so they're darker
478:02 - for the text of the button I will set
478:04 - the color to be
478:06 - white for the font
478:09 - size I will set that to be 3
478:14 - RM set the font weight to be
478:18 - bold then when I hover my cursor over
478:21 - one of the buttons I would like my
478:23 - cursor to be a
478:25 - pointer
478:26 - cursor
478:29 - pointer now we have to arrange these
478:32 - buttons
478:33 - properly let's select the ID of keys
478:37 - keys is a development that's containing
478:39 - all of the
478:41 - buttons this
478:42 - element all of the buttons are
478:45 - within
478:47 - to arrange these buttons in a grid we
478:50 - can set the display
478:51 - property to be a
478:55 - grid for this calculator I would like
478:58 - four columns to do that I will set the
479:02 - grid template columns property to be
479:07 - we'll use the repeat function of
479:09 - CSS I would like four columns then to
479:13 - arrange these buttons evenly you can use
479:15 - one f r f FR stands for fractional unit
479:20 - one F FR indicates that each column
479:23 - should take up an even amount of space
479:25 - so now we have Columns of four if I were
479:28 - to set this to three we would have
479:29 - Columns of three but I'm going to use
479:32 - Columns of four because I would like all
479:34 - of the operators on the left hand side
479:37 - I'll set the Gap to be 10
479:42 - pixels that is the gap between each of
479:44 - the
479:45 - rows then I'll add some padding of 25
479:50 - pixels that's padding around the
479:53 - keys let's select the ID of
479:56 - calculator I'll add that to the top to
479:58 - keep everything
480:01 - organized with our calculator I will
480:03 - select a font family of aiel with a
480:08 - backup of s
480:11 - serif let's pick a background color for
480:13 - the
480:15 - calculator I will select something
480:18 - darker I'll set the lightness to be
480:23 - 15% I'll round the corners of the
480:27 - calculator border radius 15
480:32 - pixels the corners of the calculator are
480:34 - smooth
480:35 - now then I will set a Max width of the
480:39 - calculator to be 500
480:42 - pixels if any elements overflow I will
480:46 - set that to be
480:47 - hidden this is mostly for our display if
480:50 - we have a very long equation all right
480:53 - next let's select the display right now
480:55 - it's kind of
480:57 - small we are selecting our ID of
481:01 - display let's set the width to be
481:07 - 100% I'll add some padding of 20
481:11 - pixels for the text of the display I
481:14 - will set the font size to be
481:18 - 5
481:21 - RM let's text a line
481:26 - left I'll remove the border border
481:31 - none and I'll change the background
481:33 - color I'll just copy this property
481:35 - because I'm lazy let's increase the
481:38 - lightness to
481:43 - 20% then we'll select the body of our
481:45 - document
481:51 - I will remove all margin margin
481:54 - zero I would like the calculator to be
481:56 - in the middle of my window right now
481:59 - it's in the top left corner if you would
482:01 - prefer it up here you can leave it as
482:03 - is I will set the display to be Flex for
482:07 - Flex
482:09 - box
482:10 - justify
482:12 - content in the center for a horizontal
482:16 - alignment M for vertical alignment we
482:19 - can set
482:21 - align items to be Center but we do need
482:25 - to increase the height of the body of
482:27 - the document so it's
482:29 - 100% I will set the height to be 100 VH
482:34 - for 100% of the viewport height that
482:37 - should place the calculator in the
482:38 - middle of the body of our document both
482:40 - horizontally and vertically for the
482:43 - background color I'm going to decrease
482:45 - the lightness slightly
482:48 - for the background color I will set the
482:49 - lightness to be like
482:53 - 95% okay let's go to the bottom of our
482:55 - CSS
482:56 - stylesheet when I hover over one of
482:59 - these buttons I would like to increase
483:01 - the lightness so with all
483:05 - buttons with the hover sudo
483:07 - class change the background color so the
483:11 - lightness is 40% instead of
483:14 - 30 now these buttons light up when we
483:17 - hover our cursor over one of the
483:19 - buttons now when I click on one of the
483:21 - buttons I'll increase the lightness
483:23 - further so it
483:25 - flashes we are selecting the active
483:27 - pseudo class
483:29 - now let's take our background color
483:31 - property increase the lightness to
483:34 - 50% when we hover over a button it
483:37 - lights up when we click on it it flashes
483:42 - momentarily so with all of these
483:44 - operators I would like all of these op
483:46 - buttons to be a different color I'll
483:48 - pick orange we're going to give each of
483:50 - these buttons a new class let's head
483:52 - back to our HTML file beginning with the
483:55 - plus button I will set the class equal
484:00 - to operator Das BTN for
484:05 - button so let's copy this class paste it
484:09 - for our minus
484:10 - button multiply
484:13 - button divide button and the clear
484:20 - button now we will select the class of
484:24 - operator BTN for
484:27 - button let's change the background
484:31 - color I'm going to set the background
484:33 - color to be
484:35 - orange I've already pre-picked a
484:41 - color when I hover my cursor over one of
484:43 - the operator buttons I would like the
484:45 - color to be a lighter orangee instead of
484:49 - gray let's take our operator button
484:52 - access the hover sudo class I'll
484:55 - increase the lightness to
485:00 - 65% then when I click on one of these
485:02 - buttons I would like the lightness to
485:04 - increase further with the operator
485:06 - button
485:08 - class with the active pseudo class
485:10 - increase the lightness to
485:13 - 75% so when I click on one of the
485:15 - operator but buttons it's going to flash
485:18 - momentarily all right and that is all
485:20 - the HTML and CSS that we need now we
485:23 - just need to add functionality let's go
485:25 - to our Javascript
485:27 - file for our Javascript file there's not
485:29 - a lot we have to write first we need to
485:32 - get the display element so what was that
485:35 - ID
485:37 - display const display equals document.
485:43 - getet element by ID get the ID of
485:48 - display we have three functions to
485:51 - create a function for append to display
485:54 - calculate and clear display these three
485:59 - functions function append
486:03 - to
486:06 - display there is one parameter
486:09 - input because we were passing in a
486:11 - character when we call this
486:14 - function then we have a function
486:17 - to clear
486:20 - display then a function to
486:28 - calculate we'll begin with a pen to
486:31 - display all we're going to do is take
486:33 - our display this element access its
486:36 - value append it with plus equals our
486:41 - input and let's see if this works seven
486:46 - I forgot to change the font color of the
486:48 - display so let's do that within our
486:51 - display element let's set the color to
486:54 - be white okay that's much
486:57 - better
487:02 - 7.13 + 5 equals okay we know that that
487:08 - works when I click on the clear button I
487:10 - would like to clear this
487:12 - display let's access our display element
487:15 - at access the value property set it
487:18 - equal to an empty string
487:23 - 3.14159 when I hit clear it should clear
487:26 - the
487:27 - display lastly we have
487:30 - calculate let's take our display
487:32 - elements value property set it equal to
487:37 - now we're going to use the eval
487:39 - function the eval function takes an
487:42 - expression such as 1 + 2 + 3 and
487:45 - evaluates it and gives a result it's
487:48 - kind of like it's its own built-in
487:49 - calculator so to say evaluate the value
487:53 - within our
487:55 - display display.
487:57 - value so if I add
488:02 - 3.14 plus
488:06 - 1.01 I'm given a result of
488:10 - 4.15 now for some reason if we get an
488:12 - error for example 7 + equal
488:17 - well we have a problem let's go to our
488:19 - console we've encountered an uncaught
488:22 - syntax error because we never finished
488:24 - our equation in the last lesson we
488:27 - learned about error handling this is
488:29 - dangerous code it can cause an error
488:32 - let's surround this code with a try
488:35 - block we will try this code and catch
488:38 - any errors that
488:40 - happen so we need a catch block now
488:44 - catch any errors
488:47 - we will change the value of the display
488:50 - to equal some text of
488:54 - error all right and that should work
489:00 - 3.14 times equals that results in an
489:03 - error we can clear it and then start
489:07 - over what's 1 + 2 + 3 + 4 that would be
489:13 - 10 all right everybody so that is is a
489:16 - calculator program you can make using
489:18 - JavaScript HTML and CSS impress your
489:25 - friends all right what's going on people
489:27 - so today I got to explain what the Dom
489:29 - is in JavaScript the Dom is the document
489:32 - object model it's a JavaScript object
489:35 - that represents the page you see in the
489:37 - web browser and it provides you with an
489:39 - API to interact with it the web browser
489:42 - constructs the Dom when it loads an HTML
489:44 - document and structures all of the
489:46 - elements in a tree like representation
489:49 - within my HTML document we have our HTML
489:52 - element as the root element the HTML
489:54 - element contains a head element and a
489:56 - body element and many various elements
489:59 - can be found within each of these
490:00 - they're arranged in a tree likee data
490:02 - structure but we access this tree like
490:04 - data structure from the document object
490:07 - in past lessons in order to select an
490:09 - element by its ID we would type document
490:12 - dot then follow it with a method like
490:15 - get l element by ID and then we would
490:18 - select an element by its ID our document
490:21 - is an object it contains properties and
490:24 - methods and other nested objects if I
490:26 - was to
490:28 - console.log the
490:32 - document well then it's going to display
490:34 - my HTML
490:36 - document now you can also use dur
490:38 - meaning directory this will list all of
490:41 - the properties of this
490:44 - object so here's my document object and
490:48 - all of the different properties it
490:49 - contains it's one gigantic object for
490:53 - example we have a title the title of the
490:55 - web
490:56 - page that would be found right here near
490:59 - the bottom document but you can change
491:02 - it I will access our document as if it
491:05 - was an object because it is access the
491:08 - title property change it to something
491:10 - else like my
491:12 - website now if I display the title
491:17 - that property has changed it's now my
491:19 - website dynamically after the page loads
491:22 - I would like to change the background
491:23 - color of my document later on in the
491:25 - series we're going to create a toggle
491:27 - button to toggle between light and dark
491:29 - mode just to give you an example if I
491:31 - need to change my theme to be dark mode
491:34 - I could access the document object
491:37 - access the
491:38 - body access the style then change the
491:43 - background color property to some
491:46 - color let's stick with black for
491:49 - now I'll use
491:51 - hsl the Hue will be zero saturation will
491:55 - be 0% and the lightness will be
492:00 - 15% even though we have no CSS we're
492:03 - still able to dynamically change the
492:04 - background color let me give you another
492:09 - example we'll create an H1
492:12 - element this H1 element will say welcome
492:16 - I will give this element an ID
492:19 - ID
492:20 - welcome- MSG meaning
492:26 - message and I'm just going to zoom in a
492:28 - little I will create a constant of
492:32 - username type in your username or your
492:35 - full
492:37 - name I'm going to conditionally change
492:40 - the content of this HTML document I will
492:43 - get this element by its ID our welcome
492:46 - message const welcome message I'm using
492:51 - camel case naming convention for this so
492:54 - I will access my document use the get
492:57 - element by ID method that ID was
493:02 - welcome- message MSG for short I would
493:06 - like to update the text content of this
493:08 - element I'll take my welcome
493:11 - message access the text content of it
493:15 - then appen some text using stringy
493:18 - catnation I'll use the tary operator to
493:20 - see if my username is strictly equal to
493:24 - an empty string is our username empty
493:27 - did somebody not type it
493:29 - in question mark If username is empty I
493:34 - will append our welcome message with
493:36 - guest otherwise our
493:39 - username my username has a name it's not
493:42 - empty it will display my name welcome
493:45 - Thro code if it was empty if somebody
493:47 - didn't type it in it will display
493:50 - welcome guest so that's an introduction
493:52 - to the document object model the
493:55 - document object model is a JavaScript
493:57 - object that represents the page you see
493:59 - in the web browser and it provides you
494:01 - with an API to interact with it the web
494:03 - browser constructs the Dom when it loads
494:05 - an HTML document and structures all of
494:08 - the elements in a tree likee
494:09 - representation by using JavaScript we
494:12 - can access the Dom dynamically after the
494:14 - page loads and change the content
494:17 - structure and style of a web page and
494:19 - well everybody that is an introduction
494:21 - to the document object model in
494:25 - JavaScript hey it's me again so today I
494:28 - got to explain element selectors in
494:31 - JavaScript element selectors are methods
494:34 - used to Target and manipulate HTML
494:36 - Elements by using these methods they
494:39 - allow you to select one or more multiple
494:41 - HTML elements from the Dom the document
494:44 - object model these methods are built-in
494:47 - methods of document the Dom we can
494:49 - select Elements by an ID a Class A tag
494:53 - name and then there's query selector and
494:55 - query selector all these methods return
494:58 - something different either an element an
495:00 - HTML collection or a node list one
495:03 - method you're probably already familiar
495:05 - with is get element by ID so in this
495:08 - example within our HTML document we will
495:10 - create an H1 element I will create a
495:13 - heading for my sample web page I'm
495:16 - hungry so I'm going to talk about food
495:18 - my heading is going to be food are us
495:22 - it's like Toys R Us but it's with food
495:25 - I'm going to give this H1 element an ID
495:28 - of my Dash
495:31 - heading so going back to our Javascript
495:34 - file I can select this element by its ID
495:38 - I'll store a reference to it const my
495:42 - heading equals we're accessing the Dom
495:45 - with
495:46 - document. get element by ID that ID was
495:52 - my heading I can access this element
495:55 - this H1 element using this reference so
495:59 - let's take my
496:01 - heading access its
496:03 - style access its background
496:07 - color so with CSS properties in
496:10 - JavaScript if you're accessing them
496:12 - through the Dom they have a camel case
496:14 - nameing convention if you're selecting
496:16 - these properties with
496:18 - CSS they have a hyphenated naming
496:20 - convention so do pay attention to that
496:23 - so with the background color I will set
496:25 - it to be yellow as if we're highlighting
496:28 - it you could also apply different CSS
496:31 - properties let's take my heading access
496:34 - its style access the text align property
496:39 - and set it to be
496:41 - Center and it's now centered now if I
496:45 - was to
496:47 - console.log this element of my heading
496:50 - this is what we would
496:54 - see it displays my HTML element
496:58 - including its style if it has style for
497:01 - some reason if this ID doesn't exist for
497:03 - example I'll misspell heading as heading
497:06 - with an extra G well this returns null
497:10 - if I were to eliminate these two lines
497:12 - of code you can see that null get
497:16 - element by ID returns a single element
497:19 - if it finds it or null if it doesn't the
497:22 - next method is get Elements by class
497:25 - name this returns an HTML collection
497:28 - it's similar to an array but it's
497:29 - limited in the built-in methods that it
497:31 - has So within our HTML document I will
497:35 - create three separate div
497:37 - sections this first development will
497:39 - have a class of
497:42 - fruits my first fruit will be apple
497:45 - so let's copy this development paste it
497:47 - two times I'll change the second to be
497:51 - orange then
497:54 - banana all right going back to our
497:56 - Javascript file I will use this method
497:59 - of get Elements by class name this will
498:01 - return an HTML collection it's similar
498:04 - to an array but it's not technically the
498:07 - same so const fruits this will be the
498:11 - name of my HTML collection equals docu
498:15 - doent we're accessing the Dom get
498:18 - Elements by class
498:21 - name what is the class name that we're
498:24 - getting
498:28 - fruits let's console. log fruits just to
498:33 - see what it is what are we working
498:38 - with so fruits is an HTML collection my
498:42 - collection contains these three elements
498:45 - we have three objects within this HTML
498:47 - collection if I was to take a look at
498:49 - some of these properties we should have
498:51 - text content so for the first element we
498:54 - have text content of Apple for the next
498:57 - div element which has an index of one
499:01 - the text content is orange we can assume
499:03 - that the next element has text content
499:05 - of banana to change something about one
499:07 - of these elements let's begin with the
499:09 - first element we have an HTML collection
499:12 - of fruits to select one of these
499:15 - elements you'll use an index so let's
499:18 - take our HTML collection of fruits at
499:21 - index zero that's going to return the
499:23 - first element our div element of Apple I
499:26 - will access its style access its
499:29 - background
499:31 - color set it equal to be yellow as if
499:33 - we're highlighting
499:35 - it there we are Apple it's highlighted
499:38 - for the next element I will increase the
499:40 - index to one that will select our orange
499:43 - and then two would be banana if I would
499:46 - like to iterate over all of these
499:48 - elements I can use an enhanced for
499:52 - Loop we'll say let fruit of
499:57 - fruits HTML collections are iterable we
500:01 - can iterate them with an enhanced for
500:02 - Loop let's take each fruit access its
500:07 - style access its background
500:11 - color then set it to be
500:13 - yellow and that should highlight all of
500:16 - them now HTML collections don't have a
500:20 - built-in for each method HTML
500:22 - collections do allow for live updates
500:24 - but unfortunately they have a limited
500:26 - amount of utility
500:28 - methods if I attempt to use our HTML
500:30 - collection of fruits then attempt to use
500:34 - a for each
500:35 - method here's what
500:38 - happens we have a type error fruits. 4
500:42 - each is not a function HTML collections
500:45 - don't have a for each method we're not
500:48 - able to use that what we could do is typ
500:51 - cast our HTML collection as an array
500:55 - let's access the class of array then use
500:58 - the from
501:01 - method this will return a new array of
501:03 - fruits we'll typ cast our HTML
501:06 - collection as an array then you could
501:09 - follow this with the for each method if
501:11 - you so choose for each element within
501:13 - our array after type casting it let's
501:16 - take each fruit I'll use an arrow
501:18 - function what would we like to do let's
501:22 - take each fruit access its
501:25 - style access its background
501:28 - color then set it to be yellow as if
501:31 - we're highlighting
501:33 - it and that does work get Elements by
501:36 - class name will return an HTML
501:39 - collection of all matching elements that
501:41 - share this class if you would like to
501:44 - use array method me with this HTML
501:46 - collection you would want to typ cast it
501:48 - to an array all right now we have get
501:51 - Elements by tag name within our HTML
501:54 - document we'll create two unordered
501:57 - lists I will create an H4 heading of
502:02 - root
502:04 - vegetables let me scroll
502:07 - down I will create an unordered
502:10 - list with a few list items three should
502:12 - be good for my first list item that will
502:16 - be beets beets are a root
502:19 - vegetable
502:24 - carrots and
502:26 - potatoes let's copy our unordered list
502:29 - and our H4 heading paste it change the
502:33 - second H4 heading to be nonroot
502:36 - vegetables my first list item within
502:39 - this other list will be
502:43 - broccoli celer
502:48 - and onions I just picked three
502:50 - vegetables kind of at
502:52 - random with our next method of get
502:54 - Elements by tag name I can select one of
502:57 - these elements by their tag name H4
502:59 - unordered list list items take all
503:02 - matches within our HTML document stick
503:06 - them all within an HTML collection I
503:08 - will create const const H4 elements
503:14 - equal alss we're accessing the Dom use
503:18 - the get Elements by tag name
503:22 - method let's select all H4
503:26 - elements then I will
503:29 - console.log my HTML collection of H4
503:33 - elements let's see what it
503:35 - is so it looks like this HTML collection
503:38 - has two
503:39 - elements two H4 elements the text
503:43 - content of the first element is root
503:45 - vegetables then we can assume that the
503:47 - other element is non-root vegetables yes
503:50 - it is non-root
503:53 - vegetables we can access individual
503:55 - elements of this HTML collection by an
503:58 - index let's take this reference of H4
504:01 - elements access the first
504:04 - index access the style access the
504:07 - background
504:08 - color set it to be yellow as if we're
504:11 - highlighting it and that should
504:13 - highlight root vegetables the next index
504:17 - of one would be non-root vegetables to
504:20 - apply CSS properties to all of the
504:22 - elements I can use an enhanced for
504:25 - Loop for let H4 element singular of H4
504:33 - elements plural take each H4 element
504:37 - access its style access its background
504:40 - color set it to be
504:42 - yellow and that will highlight all of
504:44 - the H4
504:46 - elements let's create another HTML
504:48 - collection of all the list item elements
504:50 - we'll create another reference to all
504:52 - list item elements so that'll be beets
504:56 - carrots potatoes broccoli celery and
504:58 - onions const Li elements equals
505:04 - document. getet Elements by tag
505:09 - name the tag that we're selecting is all
505:12 - list item elements
505:15 - so using a for Loop let's iterate
505:16 - through
505:17 - them let Li element singular of Li
505:24 - elements plural for each list item
505:28 - element access the style access the
505:31 - background color then set it to be a
505:34 - different color let's say light
505:37 - green and now all list item elements
505:41 - will be a light green color and again
505:43 - since the these are HTML collections not
505:46 - arrays they don't have any array methods
505:49 - but we can typ cast them so that they do
505:52 - if I wanted to change the background
505:53 - color of these with the for each method
505:55 - of
505:56 - arrays I'm going to typ cast our HTML
505:59 - collection of H4 elements as an
506:01 - array I will access the class of array
506:05 - use the from
506:06 - method pass our HTML collection of H4
506:09 - elements as an argument if I wanted to
506:12 - use the for each loop I can method
506:14 - change
506:15 - follow this with for each what do we
506:18 - want to do for each of these elements
506:20 - take each H4 element use an arrow
506:23 - function do this take each H4 element
506:28 - access its style access its background
506:31 - color set it to be
506:35 - yellow and that does work so let's do
506:38 - this with our list item elements I'll
506:41 - just copy this because I'm lazy we'll
506:43 - type cast our list item elements HTML
506:46 - collection for each list item element
506:50 - take each list item element access its
506:53 - style access its background color set it
506:56 - to be light green and that does work to
507:01 - that is the get Elements by tag name
507:03 - selector it will select all elements
507:06 - with a matching tag name throughout your
507:07 - document it returns an HTML
507:10 - collection now we're going to talk about
507:12 - query selector query selector will
507:15 - return the first matching element or
507:18 - null if it doesn't find any matches I
507:20 - will create a const of element equals
507:26 - document. query
507:29 - selector query selector will return the
507:31 - first match to select an element by a
507:34 - class name we'll use dot the name of the
507:37 - class these three elements have a class
507:40 - of fruits let's select that dot fruits
507:45 - if I was to take this element access its
507:48 - style access its background color set it
507:51 - to be yellow which element do you think
507:54 - is going to be selected the first Apple
507:58 - it's the first matching element Cory
508:01 - selector only returns a single element
508:03 - the first match if I selected a tag name
508:07 - of H4 that would select root vegetables
508:11 - even though we have two H4 elements the
508:13 - first matches selected if I selected the
508:16 - first list item element that would
508:19 - select beats that is the first list item
508:22 - element on my web page if I changed this
508:25 - to UL meaning unordered list it would
508:28 - select the first unordered list if I
508:31 - attempt to select something that doesn't
508:33 - exist like any ordered
508:35 - lists well they don't exist there's no
508:38 - matches if I was to
508:41 - console.log my element
508:47 - it would return n there's no matches so
508:50 - query selector selects the first
508:53 - matching element or null you can select
508:56 - a class or a tag
508:59 - name then the last method we'll discuss
509:02 - is query selector all this returns a
509:04 - node list a node list is similar to an
509:08 - HTML collection except it has built-in
509:11 - methods similar to arrays however no
509:14 - lists are static HTML collections are
509:17 - live since node lists are static they do
509:20 - not update automatically in the Dom HTML
509:23 - collections are live they will I'm going
509:26 - to select all elements that have a class
509:28 - of fruits I'll create a reference to
509:30 - this const fruits equals
509:36 - document. query selector
509:40 - all we are getting a class of fruits
509:45 - I can access this node list by an index
509:48 - number let's select the first element
509:51 - access the style access the background
509:54 - color set it to be
509:59 - yellow and that will select Apple let's
510:02 - select the next element that's orange
510:06 - the next would be
510:08 - banana let's select all list item
510:11 - elements I'm going to rename this though
510:14 - let's rename fruits as
510:17 - Foods let's select the first element
510:20 - that would be
510:21 - beets the next element would be carrots
510:24 - then
510:25 - potatoes broccoli
510:28 - celery
510:30 - onions so if I was to
510:34 - console.log
510:38 - Foods this would give me a node list
510:40 - with six
510:41 - elements node lists do have a built-in
510:44 - for each method let's use that we don't
510:47 - need to typ cast it as an
510:49 - array take our node list of foods use
510:52 - the built-in for each method what do we
510:55 - want to do take each food use an arrow
510:59 - function do this take each food access
511:03 - its style access its background color
511:06 - set it to be
511:09 - yellow this will take all list item
511:12 - elements change the background color to
511:14 - Yellow as if we're highlighting them all
511:16 - right everybody so those are different
511:18 - element selectors get element by ID get
511:21 - Elements by class name get Elements by
511:23 - tag name query selector and query
511:25 - selector all there is a lot of overlap
511:27 - where you could select any number of
511:29 - these to select something but they each
511:31 - return something different personally I
511:33 - like using a combination of get element
511:35 - by ID and query select all but that's
511:39 - just my personal preference in
511:41 - conclusion element selectors are methods
511:44 - used to Target and manipulate HTML
511:46 - elements they allow you to select one or
511:48 - more multiple HTML elements from the Dom
511:51 - once you select your element or elements
511:53 - you can make any sort of changes that
511:55 - you would like and well everybody those
511:57 - are element selectors in
512:03 - JavaScript yo what's going on people so
512:06 - today I got to explain Dom navigation in
512:08 - JavaScript Dom navigation is the process
512:11 - of navigating through the structure of
512:13 - an H HTML document using JavaScript HTML
512:17 - elements include but are not limited to
512:20 - the following properties for D
512:21 - navigation we can get the first child
512:24 - the last child the next sibling the
512:25 - previous sibling a parent or all the
512:28 - children of an element so for this
512:30 - exercise within our HTML document we're
512:33 - going to create a few unordered lists of
512:35 - course these unordered lists are going
512:37 - to be for food because I like food the
512:40 - first unorder list will have an ID of
512:43 - fruits let's create a few list item
512:46 - elements an
512:49 - apple an
512:52 - orange and a
512:55 - banana we'll need a few unordered lists
512:57 - to work with let's copy this unordered
513:00 - list and paste it twice the second list
513:03 - will be for
513:05 - vegetables pick some vegetables I'll
513:08 - pick
513:09 - carrots
513:11 - onions potatoes
513:14 - the third unordered list will be for
513:18 - desserts I'll pick
513:21 - cake
513:24 - pie ice
513:26 - cream that is good enough for now
513:29 - heading back to our Javascript file I
513:31 - will now discuss the property of first
513:34 - element child our unordered lists are
513:37 - elements they each have their own
513:40 - children a child element is any element
513:43 - found within this element our unordered
513:45 - list of fruits has three children Apple
513:49 - orange banana vegetables has three
513:52 - children carrots onions potatoes
513:54 - desserts has three children as well cake
513:57 - pie and ice cream let's say that our
514:00 - unordered list of fruits is a parent
514:02 - well Apple would be the firstborn orange
514:05 - would be the middle child and banana
514:07 - would be the last born if these were
514:09 - actual children so think of it that way
514:13 - so so I'm going to create a constant of
514:15 - element I'll be using this as a
514:18 - reference document. getet element by ID
514:23 - I will get that unordered list of
514:26 - fruits I'm storing this unordered list
514:29 - within this
514:30 - element I will create a reference for
514:32 - the first child equals take our element
514:37 - access the first element
514:41 - child if I was to take this element
514:45 - change its style access its background
514:48 - color set it to be
514:51 - yellow which element is going to be
514:54 - highlighted Apple if I selected a
514:57 - different element like my Ida vegetables
515:01 - the first child would be carrots then
515:04 - desserts the first element child of
515:07 - desserts is cake they are the firstborn
515:11 - children they're at the top Within These
515:13 - un ordered lists if you used query
515:16 - selector all I'll give you a
515:18 - demonstration I will select all
515:20 - unordered lists const UL
515:24 - elements equals
515:27 - document dot query selector all select
515:33 - all unordered
515:36 - lists this will return a node list node
515:40 - lists do have their own built-in for
515:41 - each method take all UL elements use the
515:45 - built-in for each method what do we want
515:48 - to do iterate over every unordered list
515:53 - element do this let's create a reference
515:58 - to the first
516:00 - child
516:02 - equals take our unordered list
516:06 - element access its first element child
516:11 - then store it as a reference
516:14 - let's take our first
516:15 - child access its style access its
516:19 - background color
516:20 - property set it to be
516:24 - yellow that will highlight all of the
516:26 - first element children of all the
516:29 - unordered lists so that's how you can
516:31 - use Query selector all to select all of
516:34 - the first children of all matching
516:36 - elements now we're going to access last
516:39 - element child with our unordered lists
516:42 - if we're select ing our elements of
516:44 - fruits vegetables and desserts this
516:47 - would return the last child banana
516:50 - potatoes or ice cream depending on what
516:52 - we're selecting if these were actual
516:54 - children these three elements are the
516:58 - last born they're the youngest I'm going
517:00 - to create a reference to an element
517:03 - equals access the Dom get element by ID
517:08 - I will get my ID of
517:11 - fruits I will create a reference refence
517:13 - to the last child
517:17 - equals take our
517:19 - element get the last element
517:24 - child take our last child
517:28 - element access its style access its
517:31 - background color set it to be
517:34 - yellow so that will highlight banano if
517:38 - I change the selected element to
517:41 - vegetables that would select potato es
517:44 - if I selected desserts that would select
517:47 - ice cream they are the last element
517:50 - children found within each of these
517:52 - elements if I were to use Query selector
517:55 - all to select all unordered lists let's
517:58 - create const UL
518:00 - elements equals
518:03 - document. query selector all select all
518:09 - unordered
518:10 - elements this returns a node list
518:14 - they have their own built-in for each
518:16 - method take our node list of unordered
518:19 - elements use the built-in for each
518:22 - method take each unordered list
518:26 - element use an arrow function to do this
518:29 - I will create a reference to the last
518:32 - child
518:34 - equals take each unordered list
518:37 - element access the last element
518:41 - child take the last child during each
518:45 - iteration access its style access its
518:48 - background color set it to be yellow and
518:51 - that will select banana potatoes and ice
518:55 - cream select all unordered lists take
518:59 - each of their last children change the
519:01 - background color to be yellow so that is
519:03 - the last element child property in this
519:07 - next example I'll demonstrate next
519:09 - element sibling but we're going to make
519:11 - a few changes going back to our h HTML
519:13 - file we will give each of these list
519:15 - items a unique ID so let's start with
519:18 - the first the ID will be Apple for the
519:21 - first list item element I'll copy this
519:24 - ID for each of these elements and then
519:26 - change them in a
519:31 - moment so we have apple followed by
519:33 - orange banana carrots onions potatoes
519:39 - cake pie then ice cream
519:45 - if I'm selecting my unordered list of
519:47 - fruits Apple orange banana or the
519:49 - children they are all siblings to each
519:52 - other if I were to select Apple then get
519:54 - the next sibling that would be orange if
519:57 - I select carrots the next sibling would
519:59 - be onions if I selected cake the next
520:02 - sibling would be pie so let's create a
520:05 - constant of element equals document.
520:10 - getet element by ID the ID that I'm
520:13 - going to select is
520:16 - Apple I will create a reference to the
520:18 - next sibling equals take our element
520:23 - access its next element
520:28 - sibling take our next
520:30 - sibling access its style access its
520:33 - background
520:35 - color set it to be
520:38 - yellow if I'm selecting Apple the next
520:41 - sibling to that would be orange
520:43 - if I were to select orange the next
520:45 - sibling would be banana if I were to
520:48 - select banana well banana doesn't have a
520:50 - next sibling it's the last in line we
520:53 - wouldn't be selecting anything there is
520:55 - no next sibling for banana if I were to
520:58 - select carrots the next sibling is
521:00 - onions if I selected onions the next
521:03 - sibling is potatoes if I selected cake
521:06 - the next sibling is pie if I selected
521:09 - pie the next sibling is ice cream what
521:12 - if I SEL selected fruits vegetables or
521:15 - desserts what would be highlighted I
521:17 - will select the ID of fruits that would
521:21 - highlight my unordered list of
521:24 - fruits these three unordered lists of
521:26 - fruits vegetables and desserts they're
521:29 - all children of the body they're all
521:32 - siblings to one
521:33 - another it's kind of like if the list
521:36 - item elements of Apple through ice cream
521:38 - are all children the unordered lists of
521:40 - fruits vegetables and desserts are the
521:42 - parents
521:43 - and the body is the grandparent if I
521:46 - select the unordered list of fruits the
521:48 - next sibling would be
521:51 - vegetables by accessing the next element
521:53 - sibling of my unordered list of fruits
521:56 - that selects my unordered list of
521:59 - vegetables if I selected vegetables then
522:02 - get its next sibling that would give me
522:04 - this unordered list of
522:07 - desserts all right then we have previous
522:09 - element sibling if I select an element
522:12 - we'll get the the previous element
522:14 - sibling so if I were to select orange
522:16 - that would give me Apple if I selected
522:18 - banana that would give me orange if I
522:20 - selected onions that would give me
522:22 - carrots I will create a constant for
522:25 - element equals document. getet element
522:29 - by ID I will select
522:33 - orange const prev meaning previous
522:39 - sibling equals take our element access
522:42 - the the previous element sibling if I
522:47 - were to take my previous sibling access
522:50 - it style access its background color set
522:53 - it to be
522:55 - yellow the previous sibling of orange is
522:58 - Apple the previous sibling of
523:01 - banana is
523:03 - orange if I selected onions the previous
523:07 - sibling is
523:08 - carrots the previous sibling of
523:11 - potatoes
523:14 - is
523:15 - onions the previous sibling of pie is
523:18 - cake the previous sibling of ice
523:22 - cream is pi if I selected the first
523:26 - sibling then attempt to get the previous
523:30 - sibling well we don't select anything
523:33 - the previous sibling of a first child
523:35 - doesn't exist if I selected the previous
523:37 - sibling of my unordered list of
523:41 - vegetables that would select my
523:44 - unordered list of fruits if I selected
523:47 - the unordered list of desserts that
523:50 - would give me
523:52 - vegetables now we have the parent
523:54 - element property whichever element I
523:56 - select will get the parent the parent is
524:00 - the element that contains
524:02 - it const element equals document. getet
524:09 - element by ID I will select
524:14 - Apple const
524:16 - parent equals access our
524:20 - element access the parent element let's
524:25 - take our parent access its style access
524:28 - its background color set it to be yellow
524:32 - that will highlight my unordered list of
524:35 - fruits if I selected orange well that
524:38 - wouldn't change the parent is still
524:40 - fruits same thing goes with banana
524:43 - if I selected carrots well the parent is
524:47 - vegetables that unordered list if I
524:49 - selected ice cream while the parent is
524:53 - desserts so that's how to get the parent
524:55 - of an element you can access the parent
524:58 - element
524:59 - property the last property we'll discuss
525:01 - is children we can return all of the
525:04 - children of a selected element I will
525:07 - create a const element equals
525:10 - document. getet El element by ID I will
525:15 - select my ID of
525:16 - fruits I would like all children of this
525:20 - element I'll create a reference to
525:22 - Children equals take our element access
525:26 - the children property if I was to
525:30 - console.log
525:31 - Children this is what we're working
525:35 - with by accessing the children of an
525:38 - element that returns an HTML
525:40 - collection this HTML collection has
525:43 - three list item
525:45 - elements HTML collections don't have a
525:48 - built-in for each method I would need to
525:50 - typ cast it as an array using the from
525:52 - method of arrays let's take all of our
525:55 - children convert it to an array then
525:59 - method chain the for each
526:01 - method let's take each child from
526:06 - children then do this take each child
526:09 - during each iteration access its Style
526:13 - access its background color set it to be
526:17 - yellow so this will highlight all
526:20 - children of a selected element Apple
526:23 - orange then banana if I selected
526:27 - vegetables that would highlight carrots
526:29 - onions
526:31 - potatoes if I selected desserts that
526:34 - would highlight cake pie then ice cream
526:37 - you can even access these children by an
526:39 - index
526:41 - number
526:44 - let's say you would like to highlight a
526:45 - middle sibling orange onions or pie
526:49 - let's take our children it's an HTML
526:52 - collection access it by an index number
526:55 - so let's access children at index one of
526:58 - desserts that would highlight
527:00 - pie let's select vegetables that would
527:03 - highlight onions then fruits would
527:06 - highlight
527:08 - orange all right everybody so that is an
527:10 - introduction to Dom navigation it's the
527:13 - process of navigating through the
527:14 - structure of an HTML document using
527:17 - JavaScript there are several different
527:19 - properties that you can use to navigate
527:20 - through HTML elements and well everybody
527:23 - that is an introduction to Dom
527:25 - navigation in
527:30 - JavaScript hey everybody in today's
527:32 - video I'm going to show you how we can
527:33 - add and change HTML elements using
527:36 - JavaScript so sit back relax and enjoy
527:39 - the show I'll break down creating an
527:41 - appending element El to the Dom in three
527:43 - simple steps we'll create the element
527:46 - add any necessary attributes or
527:47 - properties and then append the element
527:49 - to the Dom will be the final step but
527:52 - before we do begin within our HTML file
527:55 - we'll create a few boxes for this
527:56 - exercise these will be
527:59 - developments with an inner paragraph the
528:02 - first will have text of box one with
528:05 - this development I will give it an ID of
528:07 - box one and a class of
528:11 - box
528:13 - let's copy the div element paste it
528:15 - three times for a total of four boxes
528:18 - we'll create box
528:19 - two box
528:22 - three and box
528:26 - four I'll apply the following CSS
528:29 - properties we're selecting the Box class
528:32 - add a border 3 pixel solid set a width
528:35 - to be 100% and a height of 125
528:39 - pixels and we are ready to begin step
528:42 - one we need to create the element in
528:44 - order to work with it right I will
528:46 - create a constant of new H1 H1 equals we
528:50 - will select our document use the create
528:54 - element method then as a string pass in
528:58 - the type of the element we would like to
529:00 - create we'll create an H1 element we now
529:03 - have an H1 element to work with which
529:05 - we're referencing as new H1 let's add
529:08 - some attributes and CSS properties let's
529:11 - do one for now now I will take my new H1
529:15 - element access its text content set it
529:20 - equal to I like
529:24 - pizza and then we just have to append
529:27 - this element to the
529:28 - Dom to do that we will access our Dom
529:31 - with
529:32 - document what element would we like to
529:35 - select let's select the body element of
529:37 - our
529:38 - document and then we will use the append
529:41 - method pass in our HTML element as an
529:44 - argument and there we go there's our H1
529:47 - element when you append an element to a
529:50 - parent this new element is the last
529:53 - child you could prepend if you would
529:55 - like it to be the first child so let's
529:58 - use the prepend method change aend to
530:03 - prepend and it's now at the
530:05 - beginning let's add an additional
530:07 - attribute we will take our new H1
530:09 - element set the ID attribute equal to my
530:15 - H1 and let's see if that worked I will
530:18 - rightclick on this element inspect
530:21 - it here's our H1 element it's the first
530:24 - child because we're prepending it this
530:27 - H1 element has an ID attribute set to my
530:31 - H1 let's change the CSS properties of
530:34 - this element I will access new H1 access
530:38 - its style access its color the f
530:42 - color let's set it to be
530:45 - red but better yet let's set the color
530:47 - to be tomato because I like tomatoes I
530:50 - think that's a better looking shade of
530:52 - red let's also Center the text new H1
530:56 - access its style access the text align
531:00 - property set it to be
531:03 - Center and the text is now centered when
531:07 - I append this element I would like to
531:09 - append it to within box one I will
531:11 - select box one as the parent rather than
531:14 - the
531:16 - body we will access our document we need
531:19 - to select an element we will select box
531:22 - one we could use document. getet element
531:27 - by ID the ID that I'm going to select is
531:31 - box
531:33 - one I will then follow this with append
531:37 - append our new H1
531:40 - element so our H1 element is now within
531:43 - box one and not outside of it like it
531:45 - was previously I could append this H1
531:48 - element to box two but I would have to
531:50 - select it we will get element by ID
531:54 - select box two to put it within box two
531:57 - box 3 and box
532:00 - four when I'm appending this element to
532:02 - box one it is the last child of box one
532:06 - if there are any child elements within
532:08 - this box which there is we have a
532:10 - paragraph element
532:12 - that H1 element will come after and not
532:15 - before so if you would like this H1
532:18 - element to be the first child we can
532:20 - prepend it I'm going to copy this
532:22 - because I don't want to rewrite
532:26 - it we will
532:29 - prepend prepend my new H1 element take
532:32 - box one prepend the new H1 element so my
532:36 - H1 element is now at the top it's the
532:38 - first child the paragraph element comes
532:40 - after let's do this with box two box 3
532:46 - and box four what if we would like to
532:48 - take our H1 element and sandwich it
532:50 - between box one and box two I could
532:53 - select box two and insert that new H1
532:56 - element before it here's how I will
532:59 - create a reference to box
533:02 - 2
533:04 - equals
533:06 - document. get element by
533:10 - ID we will select the ID of box two
533:14 - access our document access the body
533:18 - because box two is a child element of
533:20 - the body use the insert before method
533:25 - there's two arguments the new
533:28 - element and the current
533:31 - element the new element is going to be
533:34 - new H1 that's what we're trying to add
533:37 - the current element is the target we're
533:39 - selecting box two in insert the new H1
533:43 - element before box two and this is what
533:46 - that looks like this H1 element is now
533:49 - between box one and box two take the new
533:51 - H1 element insert it before box two if
533:55 - we were to do this with box one well
533:57 - then it's going to be before box one
534:00 - let's try this with box
534:03 - three our H1 element is before box three
534:07 - and box
534:10 - four what if these elements don't have
534:17 - IDs how do we select them then here's
534:20 - how we will use Query selector all to
534:23 - select everything that has the Box class
534:26 - I will create a constant of boxes this
534:29 - will be a node list access our document
534:33 - use Query selector all select everything
534:38 - that has a box class we will use the the
534:42 - insert before method access our document
534:45 - access the
534:47 - body insert
534:50 - before we have the new element to add
534:54 - and the current element the new element
534:57 - is new H1 the current element is our
535:01 - node list of boxes we can access a
535:04 - specific element from this node list
535:06 - with an index if I accessed boxes at
535:09 - index zero that would give me box one
535:13 - boxes at index one that's referring to
535:15 - box
535:16 - two box three and box four so you could
535:21 - use Query selector to select many
535:23 - elements store it within a node list
535:26 - then select those specific elements with
535:28 - an index
535:30 - number this is optional but at any time
535:33 - if you need to remove an HTML element
535:35 - here's how let's append our new H1
535:38 - element we need to select the location
535:40 - in which we can find that element it's
535:42 - within the body of our
535:45 - document
535:49 - document.body use the remove child
535:52 - method we will remove our new H1 element
535:57 - and it's gone what if this H1 element
536:00 - was within box one all right I will
536:03 - append our new H1 element to box one and
536:06 - we need to add the IDS back to these
536:08 - boxes because I forgot to do that we're
536:10 - pending our new h one element to box one
536:13 - when I try and remove it it doesn't work
536:16 - it's still there we need to select box
536:19 - one and not the body of our document
536:21 - because box one is the direct parent of
536:24 - our H1 element not the body the body in
536:26 - this case could be like the
536:28 - grandparent instead of selecting our
536:30 - body we will get the ID of box one or
536:34 - some other element selector to get box
536:36 - one I'll use get element by ID because
536:39 - it's
536:40 - easy get element by ID the ID that I'm
536:45 - selecting is box one remove the new H1
536:48 - element that's found within it and it's
536:51 - gone if at any time you need to remove
536:53 - an element select the parent of that
536:56 - element then follow it with the remove
536:58 - child method pass in the element you're
537:00 - trying to remove as an
537:02 - argument in this last example we're
537:04 - going to work with ordered lists so
537:07 - going to our HTML file we will create an
537:10 - ordered list with a pair of of O tags I
537:13 - will give this ordered list an ID of
537:16 - fruits we'll add a few list items the
537:19 - first list item will be for an
537:22 - apple the ID will be
537:26 - apple we'll create a list item element
537:29 - for an orange ID will be
537:32 - orange and a
537:36 - banana ID
537:39 - banana I'll add a little bit of CSS
537:41 - styling going to the CSS stylesheet I
537:44 - will select the ID of fruits I'll add a
537:49 - border of three pixel solid for this
537:53 - demonstration and increase the font
537:56 - size to 2
537:59 - RM all right and that's what we need to
538:01 - work
538:02 - with we'll now be creating a list item
538:05 - element I will create a constant of new
538:09 - list item equals
538:13 - document. create
538:16 - element what is the type of element
538:18 - we're trying to create a list item
538:21 - element let's set any attributes or
538:23 - properties that's step two let's take
538:26 - our new list item set the text content
538:30 - to equal
538:34 - coconut we'll append this element if I
538:37 - were to append this new list item to the
538:40 - body of my document
538:41 - it's the last child of the body we're
538:44 - not adding it to this ordered list now
538:47 - that we can see it I'm going to add a
538:48 - few more attributes and properties let's
538:51 - take our new list item access its ID
538:55 - attribute set it to be
538:58 - coconut let's change the font
539:01 - weight new list item access the
539:05 - style access the font
539:08 - weight set it to be
539:10 - bold
539:12 - and the background color access the
539:15 - style access the background
539:19 - color I'll set the background color to
539:21 - be light
539:25 - green we have our list item element if I
539:29 - append it to the body it's now the last
539:31 - child of the body of my document not
539:34 - this ordered list found within the body
539:37 - if I were to prepend it this is what
539:39 - would happen prepend the new list
539:42 - item it's now the first
539:46 - child now we'll select our ordered list
539:48 - of
539:50 - fruits get element by ID fruits append
539:54 - the new list item and it's now at the
539:57 - end at number
539:58 - four let's prepend to the ordered
540:03 - list get element by ID fruits prepend
540:07 - our new list item our coconut is now at
540:10 - number one
540:13 - how can we insert our coconut between
540:15 - Apple and Orange here's how since these
540:18 - list item elements have an ID I could
540:20 - use
540:22 - that let's get the ID of orange const
540:27 - orange get element by ID
540:31 - orange instead of selecting the body
540:33 - we're going to select the ordered list
540:36 - that has an ID of fruits document. getet
540:40 - element by ID the ID that I'm selecting
540:44 - is fruits select the ordered list of
540:47 - fruits insert the new list item before
540:51 - the orange our coconut is now at number
540:54 - two let's insert the coconut before the
540:58 - banana the ID was
541:00 - banana const banana insert the new list
541:05 - item before the
541:06 - banana our coconut is now at number
541:09 - three you could insert before Apple too
541:13 - I will get the ID of apple const
541:17 - apple insert the new list item before
541:19 - the
541:20 - apple and it's back at the
541:23 - beginning what if these list items don't
541:25 - have IDs let's eliminate
541:31 - those we would need to use Query
541:33 - selector to select all list items from
541:36 - the ordered list of
541:40 - fruits
541:42 - so I'm going to use Query selector all
541:45 - select the ID of fruits then select any
541:49 - list item descendants within this ID
541:53 - this will return a node list that stores
541:55 - all of the current list items within
541:58 - this ordered list we need to select our
542:01 - ordered list of fruits not the body
542:04 - document. getet element by
542:07 - ID I will
542:09 - select our order ordered list of
542:12 - fruits insert the new list item before
542:16 - list items at index
542:19 - zero now will'll insert the coconut
542:22 - before the Apple let's increment our
542:24 - index to one our coconut is now before
542:28 - the
542:29 - orange now it's before the banana and
542:32 - now it's after the banana if I need to
542:35 - remove this list item I would need to
542:36 - select it first so let's append the new
542:39 - list item to fruit
542:42 - I will get the ID of the ordered list of
542:46 - fruits remove the child of new list item
542:50 - and it's now
542:52 - gone all right everybody so that is how
542:54 - we can add change and remove HTML
542:57 - elements using
543:02 - JavaScript hey everybody in today's
543:04 - video I got to explain Mouse events in
543:06 - JavaScript so sit back relax and enjoy
543:10 - the show the first thing I need to
543:11 - discuss is event listeners an event
543:13 - listener listens for specific events to
543:16 - create interactive web pages a few types
543:19 - of events we'll discuss are click events
543:21 - when we click on something Mouse over is
543:23 - when we hover over something and mouse
543:25 - out is when we're hovering over
543:26 - something and then leave that element to
543:29 - add an event listener you'll use the add
543:31 - event listener method pass in an event
543:33 - type including but not limited to this
543:36 - could be clicking on something hovering
543:38 - over something or leaving the confines
543:40 - of an element and then a call back to a
543:42 - function what do you want to do when you
543:44 - interact with something for example I
543:46 - could use the click event and then
543:49 - change the color of something when I
543:51 - click on it going to our HTML file I
543:53 - will create a development for a box the
543:56 - ID of this development will be my box
544:00 - the text on the box will be click me
544:04 - then for fun I'll add an emoji because I
544:06 - like emojis let's apply some CSS styling
544:10 - because it's kind of small
544:11 - let's select the ID of my box change the
544:15 - background
544:16 - color to light green or some other color
544:19 - of you're choosing set a width of 300
544:24 - pixels a height of 300
544:27 - pixels I'll increase the font size to
544:31 - something large like 4.5
544:34 - RM I'll set the font weight to be
544:38 - bold I'll use flex box
544:41 - display
544:42 - Flex align items in the
544:47 - center and text align
544:51 - center that is good enough for now be
544:53 - sure to save everything we're going to
544:56 - select the ID of my box we'll store that
544:59 - as a constant const my box equals we'll
545:03 - need to select it by accessing the Dom
545:06 - document. getet element by ID I will
545:10 - select select the ID of my box and then
545:14 - we can work with it easily we'll take my
545:17 - box add an event listener that's a
545:19 - built-in method my box.
545:23 - addevent
545:25 - listener we need to pass in an event
545:27 - type and a call back to a function I
545:30 - want to do something when I click on
545:32 - this box the event type is going to be
545:35 - click and now we need to call back to a
545:37 - function we'll Define a function to
545:40 - change the background
545:41 - color function change color there's
545:46 - going to be one parameter an event then
545:49 - we will pass in a call back to change
545:51 - color now the event parameter event is
545:54 - an object it's provided to us
545:56 - automatically by the web browser when
545:58 - something happens when an event occurs
546:01 - like when I click on something event is
546:03 - an object that contains information
546:05 - about something that happens that event
546:07 - for this demonstration temporarily I'm
546:10 - going to to console.log my event so
546:14 - let's click on the box then go to
546:17 - inspect console and here's my event when
546:21 - we clicked on that box the web browser
546:23 - provided us with an event object it's a
546:26 - pointer event this object contains
546:28 - details about what happened
546:31 - exactly for example we have the target
546:34 - what did we click on WE clicked on the
546:36 - div element with an ID of my box and
546:39 - here are all the properties and methods
546:40 - of that box that's the target we have a
546:43 - time stamp of when the click occurred
546:45 - the type of the event click which
546:48 - matches up with the event type and
546:50 - coordinates of where we clicked on the
546:52 - screen event is an object that's going
546:55 - to be provided to us through the web
546:57 - browser automatically we don't need to
546:59 - explicitly pass in an event object with
547:01 - this call back it's provided to us
547:03 - behind the
547:04 - scenes I'm going to change the
547:06 - background color of our box when we
547:08 - click on it we will access our event op
547:10 - object that's provided to us access the
547:13 - target the target is what we clicked on
547:16 - there's information about our Target
547:17 - within the event object then I will take
547:20 - the style of the target set the
547:23 - background color property to be a
547:25 - different color I will set it to be red
547:28 - but I prefer the shade of tomato because
547:30 - I like that color now when I click on
547:33 - the box the background color
547:35 - changes but why stop there let's also
547:38 - change the text content I'll add one
547:41 - more statement to the change color
547:42 - function again we will access our event
547:45 - access its Target access the text
547:49 - content of the target to be
547:53 - ouch and then I'll add an
547:57 - emoji that's a good
547:59 - one when I click on this box not only
548:02 - does the color change but the text too
548:06 - now you don't necessarily need to pass
548:08 - in a call back you can also pass in an
548:10 - anonymous function or even an arrow
548:12 - function so let's copy these two lines
548:15 - of code we'll reuse it later we no
548:18 - longer need to define a
548:19 - function within the event listener
548:22 - instead of passing in a call back we'll
548:24 - pass in an anonymous
548:27 - function we have one parameter and event
548:30 - that's going to be provided to us when
548:33 - we click on my box do this change the
548:36 - background color and the text now we
548:39 - could even use an eror function I have a
548:41 - preference for Arrow functions because
548:43 - they're concise with their syntax with
548:45 - an arrow function we have one parameter
548:47 - an event if you have a single parameter
548:50 - you don't need to enclose it within a
548:51 - set of
548:53 - parentheses we have one parameter of
548:55 - event then do this do all this code and
548:59 - that should still work when I click on
549:01 - the box the color changes as well as the
549:04 - text so when you add an event listener
549:06 - you can pass in a call back or an
549:09 - anonymous function
549:12 - or an arrow function it depends on what
549:15 - your preferences are personally I like
549:17 - Arrow functions we have a few other
549:19 - Mouse events to discuss Mouse over and
549:22 - mouse out Mouse over is when you hover
549:24 - your cursor over something so let's take
549:27 - my
549:28 - box add a new event listener an element
549:31 - can have more than one event
549:33 - listener add event
549:36 - listener we have an event and a call
549:39 - back as arguments the event is going to
549:42 - be Mouse over for the call back I'll use
549:47 - an arrow
549:48 - function we have one parameter of event
549:52 - Arrow do this let's copy these two lines
549:56 - of code I'll change the background color
549:59 - to be yellow like it's a warning and the
550:02 - text content to be don't do
550:07 - it that's a good face when I hover my
550:10 - cursor over this element the background
550:12 - color and the text is going to change
550:15 - the event that occurred is mouse over
550:17 - it's when you hover your cursor over
550:19 - something Mouse out is when you leave a
550:21 - specified element so when I leave the
550:24 - box I would like to change back the
550:26 - background color and the text content
550:28 - We'll add an additional event listener
550:31 - my box add event
550:36 - listener the event type is going to be
550:38 - Mouse out
550:41 - then I'll write an arrow function we're
550:43 - provided with an event Arrow do this
550:47 - let's change the background color and
550:48 - the text content I will revert the
550:51 - background color to be light
550:53 - green and the text to be click
550:57 - me whatever the text content originally
551:00 - was when I hover my cursor over this
551:02 - element we get that Mouse over event but
551:05 - when I leave we get the mouse out
551:08 - event when I click on the this box we
551:11 - get the click event when I leave the Box
551:14 - we get the mouse out event again to
551:16 - reset it essentially for the last part
551:18 - of this demonstration we're going to
551:19 - create a button when we click or
551:22 - interact with the button then we'll
551:24 - change a separate element this box so
551:27 - within our HTML file let's create a
551:30 - button with text of Click
551:34 - me I will give this button a unique ID
551:37 - of my
551:38 - button and I'll increase the font size
551:41 - with CSS we will select my
551:44 - button I will increase the font size to
551:48 - be 3
551:50 - RM just so it's not so
551:53 - small let's select the ID of my
551:56 - button const my button equals document.
552:01 - getet element by ID my button I'll add
552:06 - the event listener to my button not my
552:09 - box
552:11 - if I was to interact with this button
552:13 - with the way it is now when I hover over
552:15 - the button we've created a mouseover
552:17 - event and the button changes when I
552:19 - click on the button we're changing the
552:22 - HTML and CSS of the button because the
552:24 - button is what has the event listener
552:26 - we're selecting the target of the event
552:28 - to change which is the button that is
552:30 - what we interacted with when we interact
552:32 - with our box it doesn't do anything it
552:34 - doesn't have any event listeners the
552:35 - button does though we're going to
552:37 - replace the event Target with my box
552:40 - when we interact with the button change
552:43 - the background color and the text
552:44 - content of my
552:49 - box so then when I hover over the button
552:52 - the Box changes when I leave it reverts
552:55 - back to normal when I click on the
552:57 - button then we've created a click event
552:59 - all right everybody so that is an
553:01 - introduction to Mouse related events
553:03 - you'll need to add an event listener an
553:05 - event listener listens for specific
553:07 - events to create interactive web pages a
553:10 - few events we've covered include click
553:12 - Mouse over and mouse out to add an event
553:15 - listener take an element use the
553:17 - built-in add event listener method pass
553:19 - in an event type and a call back
553:22 - Anonymous function or an arrow function
553:24 - to do something and well everybody those
553:26 - are Mouse related events in
553:32 - JavaScript hey what's going on everybody
553:34 - in today's video I'm going to give you
553:35 - an introduction to key events in
553:37 - JavaScript so sit back relax and enjoy
553:41 - the show so what we've discussed in the
553:43 - previous topic is event listeners an
553:45 - event listener can be added to an HTML
553:47 - element they will listen for specific
553:50 - events to create interactive web pages
553:52 - we'll be discussing key down and key up
553:55 - there is a third type of key event
553:57 - called key press however according to
553:59 - the official documentation this event
554:02 - isn't compatible with all web browsers
554:04 - so you should avoid using key press a
554:06 - key down event occurs when you press
554:08 - down on a key a key event occurs when
554:11 - you release a key by adding an event
554:13 - listener to the Dom document we can
554:15 - detect when we press down or release a
554:18 - key here's how we will access our Dom
554:21 - then add an event listener add event
554:25 - listener we have two arguments the event
554:28 - type and a call back when we press down
554:31 - on a key let's do something doesn't
554:34 - matter what key it is any key for this
554:37 - next argument I can either pass in a
554:38 - call back an anonymous function or an
554:40 - arrow function I like Arrow functions so
554:43 - I'm going to use an arrow function we're
554:45 - provided with an event parameter when
554:47 - something happens within our web browser
554:49 - an event object is created we can access
554:51 - it so I'm going to
554:54 - console.log this event object and we'll
554:56 - see the details of it be sure to select
554:59 - your web browser I'm going to press the
555:01 - q
555:02 - key then let's go to
555:05 - inspect
555:06 - console and here's that event
555:10 - the web browser provided us with a
555:12 - keyboard
555:13 - event the key pressed was Q there's a
555:17 - relevant key code of 81 and there's
555:20 - other properties too like was the ALT
555:22 - key being held down at the time it
555:24 - wasn't same thing with the shift key and
555:27 - the target which is the body of our
555:30 - document I'm going to Output the key
555:32 - property of the event we'll press a
555:35 - different
555:38 - key I'm going to hold down the F
555:40 - key I'm not releasing it I'm holding it
555:43 - down we're going to consistently fire
555:46 - key down
555:47 - events I would like to detect when I
555:49 - release a key I will use the key up
555:51 - event so let's copy this paste it the
555:54 - event is going to be key up I'll display
555:58 - something else I'm going to use a
556:00 - template
556:01 - string I will display key down equals
556:06 - then I will display this events key
556:09 - let's do this with key key up too I'll
556:11 - just copy
556:13 - this key up equals event.
556:17 - key let's go back to our
556:19 - console I'm going to hold down the S
556:23 - key then when I release it we'll have a
556:26 - key up event key up equals
556:30 - s oh one more important thing the arrow
556:33 - keys we have Arrow up arrow down arrow
556:37 - left and arrow right if you ever would
556:40 - like to make some sort of game the arrow
556:42 - keys are also accessible now what we'll
556:45 - do on key down and key up is change an
556:47 - HTML element so to make this simple
556:50 - within our HTML document I'm going to
556:52 - create a div element this div element
556:55 - will have an ID of my box I'll add some
556:58 - text an
557:01 - emoji all right let's add a little bit
557:03 - of
557:04 - CSS we will select my
557:08 - box I will set the background
557:11 - color to be light blue we haven't picked
557:14 - light blue
557:16 - yet I will set a width of 200
557:20 - pixels a height of 200
557:23 - pixels a font
557:26 - size of 7.5
557:29 - RM I'll use flex box display
557:33 - Flex justify content
557:38 - Center
557:41 - aine item
557:44 - Center this part is important for the
557:46 - next exercise we are going to set the
557:48 - position to
557:51 - relative for relative positioning I'll
557:54 - set the body of my document to have no
557:57 - margin margin zero all right we are
558:01 - ready we are going to select the ID of
558:04 - my
558:05 - box const my box equals document . getet
558:11 - element by ID the ID that I'm going to
558:14 - select is my
558:18 - box when I press a key down I'm going to
558:22 - change the text content of my box mybox
558:26 - do textcontent
558:28 - equals I'll pick a different
558:30 - Emoji let's do that
558:33 - one and I'll change the
558:35 - CSS mybox
558:38 - dostyle do background color equals
558:44 - tomato or some other color of you're
558:46 - choosing so when I press down on any key
558:49 - the HTML and CSS is going to change I'm
558:52 - going to release that key but we don't
558:54 - revert back to normal our HTML element
558:57 - stays that way what we'll do is that
558:59 - when we release a key we'll revert these
559:01 - changes by going back to the original so
559:03 - let's take my box change the text
559:07 - content to equal an emoji because I like
559:11 - emojis we'll use the original
559:14 - one then I will set the background color
559:17 - to be light
559:19 - blue now if I were to hold down a button
559:22 - the HTML and CSS is going to change
559:24 - until I release that button which I am
559:26 - about to now in 3 2 1 go I'm going to
559:31 - try and press the space bar as fast as I
559:33 - can seizure
559:35 - warning let's
559:37 - go okay it's about time we move on what
559:40 - we're going to do now is using the arrow
559:42 - keys move this element we're going to
559:45 - create a const of move amount when
559:50 - pressing an arrow key how far do we want
559:51 - to move this element let's say 10 for 10
559:55 - pixels I will create a variable for X
559:58 - think of these as coordinates I will set
560:00 - that to be zero and y y will also be
560:04 - zero X for any horizontal movement and Y
560:08 - for any vertical movement
560:10 - document.
560:12 - addevent
560:15 - listener when we have a key down event I
560:18 - would like to do something I'll write an
560:20 - arrow function we're provided with an
560:22 - event do all this code I only want to do
560:26 - something if a user uses an arrow key so
560:29 - if I was to console.log my
560:32 - event then access the key property let's
560:36 - go to inspect console select your
560:39 - document I would like to do something
560:41 - only if the key pressed is Arrow up
560:44 - arrow down arrow left or Arrow right I
560:47 - don't want any of the other keys I can
560:50 - write the if
560:52 - statement if access our event access its
560:56 - key follow this with the starts with
560:59 - method does this key start with arrow
561:04 - will only enter the SI statement if the
561:07 - key of the event is Arrow up Arrow down
561:09 - arrow left or Arrow right then we'll
561:12 - write a switch we haven't written any
561:15 - switches for a while we will examine the
561:18 - key of our event with switches we
561:21 - examine a value against matching cases
561:25 - if we have a case of Arrow
561:28 - up if the key of our event matches the
561:32 - case of Arrow up then do this we'll take
561:35 - our
561:36 - y-coordinate subtract our movement
561:38 - amount which is
561:40 - 10 Yus equals the movement amount and
561:44 - then be sure to break to break out of
561:46 - the switch then we need a case for arrow
561:51 - down arrow
561:54 - down y+ equals our movement amount Arrow
562:03 - left Arrow
562:05 - left X for the horizontal axis minus
562:10 - equals the movement
562:11 - amount and then Arrow
562:15 - right arrow right X plus equals the
562:19 - movement
562:21 - amount then outside of the switch but
562:23 - within our if statement we're going to
562:26 - access my
562:28 - box access the
562:30 - style access the top property set it
562:33 - equal to a template
562:36 - string we're going to take our variable
562:39 - of Y for the y-coordinate then add
562:42 - pixels take the top property of my box
562:46 - set it equal to the y coordinate we're
562:48 - going to copy this and do this with the
562:50 - left
562:51 - property set it equal to X in pixels be
562:56 - sure to select the body of your document
562:58 - we can move right with the right arrow
563:00 - key
563:03 - down
563:05 - left and
563:08 - up or diagonal if I hit two keys at
563:12 - once the arrow keys have a default
563:14 - Behavior to scroll you can see that if
563:16 - we go down too far we have a scroll bar
563:18 - on the right hand
563:19 - side we can prevent the default behavior
563:22 - of a key we just have to add this line
563:24 - of code take our event then follow it
563:28 - with the prevent default
563:32 - method so when my element Scrolls off
563:35 - screen it'll disappear we're not going
563:38 - to scroll with it
563:42 - to increase the distance in which this
563:44 - element moves we can increase the move
563:45 - amount let's set it to be 100 now we're
563:49 - moving a lot further with each key
563:53 - press hey this is bro from the future
563:55 - there's one more thing I would like to
563:56 - add to this project when pressing down
563:58 - on a key let's change the text content
564:00 - and the background color much like what
564:03 - we did with the first exercise then when
564:05 - we release a key we'll revert the HTML
564:07 - and the CSS back to normal we're
564:09 - combining the first exercise and the
564:11 - second one and this is the result when I
564:14 - move the arrow keys this guy's going to
564:15 - freak out until I Let
564:21 - Go pretty exciting all right everybody
564:25 - so that is an introduction to key events
564:26 - in JavaScript you're going to add an
564:28 - event listener to the document when you
564:31 - select your document and press a key
564:33 - when the key is pressed down that will
564:35 - create a key down event when you release
564:37 - a key that creates key up event and well
564:41 - everybody that is an introduction to key
564:43 - events in
564:48 - JavaScript hey everybody in today's
564:50 - video I'm going to show you how we can
564:51 - show and hide an HTML element using
564:54 - JavaScript in this video you'll need an
564:56 - image to work with once you find your
564:59 - image add it to your website folder then
565:01 - we are ready to begin we're going to
565:04 - create a button and an image element
565:06 - let's start with the button the text on
565:09 - the button will be initially hide to
565:12 - hide an element I will give this button
565:14 - a unique
565:15 - ID of my
565:18 - button I'll add a break then we'll
565:21 - create an image
565:22 - element this is a self-closing tag with
565:25 - this image I will set the source equal
565:28 - to either the relative file path or the
565:31 - file
565:33 - name so my file is car.jpg
565:38 - it's a little too big I'll set the width
565:40 - attribute to be like 400 pixels that's a
565:44 - decent size I will give this image a
565:47 - unique ID of my image my IMG and just so
565:53 - we can see this button I'm going to
565:54 - apply a little bit of CSS to the button
565:57 - let's select the ID of my button take
566:00 - the font size I will set it to be 2
566:04 - RM that's decent enough all right let's
566:08 - go to our J Javascript file I'm going to
566:11 - create a reference to my button and my
566:13 - image let's start with the button const
566:16 - my button equals document. getet element
566:22 - by ID the ID that I'm selecting is my
566:27 - button let's create a reference to my
566:30 - image as well my IMG the ID was my
566:36 - IMG when I click on this button I would
566:39 - like to do something we will take my
566:41 - button and add an event
566:44 - listener add event
566:47 - listener there are two arguments an
566:50 - event type and a call back to a
566:53 - function the event type is going to be
566:55 - click when we click on the button we're
566:58 - going to do something for the call back
567:00 - we'll write an arrow function we are
567:03 - provided with an event parameter by the
567:05 - web browser Arrow do this when when we
567:09 - click on the button what code do we want
567:11 - to perform we're going to take my image
567:14 - access its style access its display
567:17 - property set it to be a string of none
567:21 - so when you click on the button it's
567:23 - going to hide the image the display
567:25 - property is set to none not only that
567:28 - let's change the text on the button
567:30 - after we hide the element let's take my
567:34 - button change the text content equal to
567:39 - be show because now I want to show the
567:42 - element so hide become
567:45 - show when we click on the button a
567:47 - second time nothing
567:49 - happens we would like to toggle between
567:52 - hiding and displaying this element we'll
567:54 - write an if statement let's check to see
567:57 - if the display of my image is strictly
568:01 - equal to
568:02 - none is the display of my image
568:05 - currently none if so we're going to set
568:07 - the display to Black block because it's
568:09 - a block level element take my image
568:13 - access its style access its display
568:16 - property set it to be
568:20 - block then within an lse
568:22 - statement place these two lines of
568:29 - code and we will change the text content
568:32 - of my button to be
568:35 - hide now when clicking the button we can
568:38 - toggle between hiding and showing this
568:40 - element the
568:42 - image now let me demonstrate something
568:45 - if we were to take my button then add it
568:48 - after the
568:49 - image here's what would
568:52 - happen let me add a break
568:56 - too so by setting the display To None we
569:00 - don't Reserve any space for that image
569:02 - my button moves up near the top of the
569:04 - window until I show it again another
569:07 - option if we would like to reserve some
569:09 - space for the image is to toggle the
569:12 - visibility not the display property
569:15 - replace display with
569:20 - visibility we're going to check if the
569:23 - visibility is
569:26 - hidden set the visibility equal to be
569:30 - hidden if we would like to show the
569:32 - image the visibility is going to be set
569:34 - to
569:36 - visible when we toggle the VIS ility of
569:39 - this image we at least reserve the space
569:41 - for it the elements that come after
569:44 - aren't going to shift near the top of
569:45 - the window you can use visibility or
569:48 - display depending on the project you're
569:50 - creating all right everybody so that is
569:52 - how to show and hide HTML elements using
569:59 - JavaScript so uh yeah I should probably
570:01 - talk about nod lists today a no list in
570:04 - JavaScript is a static collection of
570:06 - HTML elements they can be created by
570:09 - using query selector all we can select
570:11 - Elements by an ID a class or an element
570:14 - type nod lists are similar to an array
570:17 - but they don't have a built-in map
570:18 - filter or reduce method they do have a
570:20 - for each method at least though an
570:22 - important thing to note with node lists
570:24 - is that they won't update automatically
570:26 - to reflect changes to the Dom for
570:28 - example if you were to remove an element
570:30 - from the Dom and it's within a node list
570:32 - you would also have to separately remove
570:34 - that element from the node list so what
570:36 - we'll do in this example is create four
570:38 - buttons they'll all have the same
570:41 - class we'll have button
570:43 - one with a class of I don't know what's
570:46 - a good name my buttons the class all
570:50 - right let's copy this button paste it
570:52 - three additional times we'll have button
570:55 - two button three button four and I'm
570:58 - going to add a little bit of CSS to
571:00 - these buttons let's select the class of
571:03 - my buttons I'll increase the font size
571:06 - so you can see it font size for
571:10 - RM add a little bit of margin 10
571:14 - pixels remove the border border
571:17 - none smooth the corners with border
571:20 - radius 5
571:22 - pixels add some padding 10 pixels by 15
571:27 - pixels I'll change the background color
571:30 - to something
571:31 - blue background color blue but I'll
571:34 - select hsl
571:37 - values I'll turn the lightness to like
571:41 - 60 okay that's decent and the font color
571:44 - will be
571:46 - white okay that's good enough for now
571:49 - one way in which we can create a node
571:51 - list is by using query selector all
571:53 - we've talked about this in a previous
571:55 - video but I'll show you a few more
571:56 - advanced things we can do with node
571:58 - lists we can select Elements by an ID a
572:01 - class or an element type we will create
572:03 - a node list of let
572:06 - buttons equals
572:09 - document. query selector
572:13 - all let's select all elements by a class
572:16 - we need to use dot then the class name
572:19 - my
572:20 - buttons we could select Elements by an
572:22 - element type if I would like to select
572:24 - all buttons I would just type in button
572:27 - the element type but I would like to
572:29 - select only elements by this class now
572:32 - that we have our node list I am going to
572:35 - console.log my node list of buttons and
572:37 - we'll take a look at
572:41 - it here's my node list it contains four
572:44 - elements button one button two button
572:47 - three button four we do have a length
572:50 - property a few methods entries for each
572:54 - item Keys these are all different
572:57 - methods for each is what we're going to
572:59 - be using a lot here's how we can change
573:02 - the HTML and CSS properties of all
573:04 - elements within a node list we can use
573:07 - the for each method of a node list and
573:09 - iterate through all of the elements so
573:11 - we will take our node list of buttons
573:14 - use the built-in for each method then
573:16 - write an arrow function we are provided
573:19 - with an element Arrow do something but
573:22 - I'm going to rename element as button
573:25 - just so it's more easily understandable
573:27 - during each iteration we're provided
573:29 - with a current button what would we like
573:31 - to do to that button well let's change
573:34 - the background color button. style do
573:38 - background
573:39 - color I'll set it to be
573:42 - green that should update the color of
573:44 - all the buttons not just one of them
573:47 - we're iterating through all of the
573:48 - buttons within this no list change all
573:51 - of their background colors to be green
573:53 - let's change the text content too take
573:56 - each button access the text content I
574:00 - will set it equal to be I don't know an
574:02 - emoji or
574:03 - something let's do that the text content
574:07 - and all the buttons is is going to
574:08 - change maybe let's append an emoji not
574:11 - replace the text
574:13 - content that's better that is how you
574:16 - can add and change HTML and CSS
574:18 - properties with a node list use the for
574:20 - each method then write an arrow function
574:22 - to do something in a similar way we're
574:25 - going to add an event listener to each
574:27 - button that will listen for a click so
574:29 - again we're going to take our node list
574:31 - of buttons use the buil-in for each
574:35 - method for each button Arrow do
574:39 - this we need to add an event listener to
574:41 - each button we will take the parameter
574:44 - of button add an event
574:48 - listener within our event listener we
574:50 - have an event
574:51 - type and a call back to do
574:55 - something the event type is going to be
574:59 - click instead of a call back we'll write
575:01 - an arrow function we are provided with
575:03 - an event Arrow do this event is proved
575:08 - provided to us through the web browser
575:10 - when something happens we will access
575:12 - the event objects Target meaning the
575:15 - button that we click on that's going to
575:17 - be our
575:18 - Target access the
575:20 - style access the background color
575:24 - property let's set it to be red or
575:27 - better yet tomato because I like
575:29 - tomatoes each button has an event
575:31 - listener it will listen for click events
575:35 - when we click on a button the background
575:37 - color is going to change
575:40 - we're going to add an event listener for
575:42 - Mouse over and mouse out let's begin
575:44 - with mouse over again take our node list
575:46 - of buttons use the for each
575:50 - method for each button Arrow do this
575:56 - take that button add an event
576:01 - listener with event listeners we have an
576:04 - event type and a call back the event
576:07 - type Tye is going to be Mouse
576:10 - over when we hover our cursor over
576:13 - something what would we like to do we
576:16 - will write an arrow function event Arrow
576:19 - do this let's access the events Target
576:23 - that should equal our button that we
576:25 - click on access the style access the
576:28 - background
576:30 - color so with the current color I'm
576:32 - going to go back to my CSS I will copy
576:35 - this color paste it but make the
576:38 - lightness 10% darker now when we hover
576:41 - over one of the buttons the background
576:43 - color is going to
576:45 - change I'll set the lightness to like
576:47 - 40% to make it much more apparent there
576:50 - that's better now when I leave one of
576:52 - these buttons I need to revert that
576:54 - color back to the original really we can
576:56 - just copy all this
576:58 - code replace Mouse over with mouse
577:01 - out and set the background color back to
577:04 - the
577:07 - original
577:11 - each button now has a mouse over and
577:13 - mouse out event
577:16 - listener here's how you can add an
577:18 - element to a node list I will create a
577:21 - new button const new button equals
577:26 - document. create element what element
577:30 - are we creating a
577:33 - button so with creating an appending
577:35 - HTML elements there's three steps this
577:38 - is step one we need to create that
577:40 - element
577:43 - first step two is to add any necessary
577:46 - attributes or css properties so let's
577:49 - take our new button change the text
577:53 - content of the button equal to be button
577:58 - 5 I would like to give my new button a
578:01 - class of my buttons we're going to
578:04 - access the class list
578:06 - property new button. class list when
578:11 - working with an element's class we work
578:12 - with class list not
578:15 - class so the class list equals the class
578:19 - of my
578:22 - buttons then we have step three now we
578:25 - have to append this element to the Dom
578:28 - what is the parent element of this new
578:29 - button going to be well in this case
578:32 - it's going to be the body of my
578:34 - document we're going to be adding a new
578:36 - button right here the parent the
578:38 - enclosing element is the body in this
578:40 - case access our document select the body
578:45 - append Child new
578:48 - button and there's button five since we
578:52 - added our class of my buttons that's why
578:54 - it has all these CSS properties if I
578:56 - were to remove this line of code we get
578:59 - the default appearance for a
579:01 - button I'll talk more about class lists
579:03 - in the next video there's a lot you can
579:05 - do with them now if I was to
579:08 - console.log my node list of buttons
579:11 - here's what we have we have five buttons
579:13 - within our Dom but within our node list
579:17 - we have four
579:20 - buttons button one 2 3 four button five
579:25 - isn't within this no
579:27 - list no lists are a static collection
579:30 - they won't update automatically to
579:32 - reflect changes to the Dom even though
579:34 - button five is within the Dom we would
579:36 - need to manually add it to our no list
579:39 - if we want to work with it so to do that
579:42 - we can just use Query selector again and
579:44 - select all elements by the class so
579:47 - let's reassign buttons since we're
579:50 - reassigning buttons that's why I
579:51 - declared buttons with let instead of
579:53 - const so we're able to reassign it
579:55 - because if this was a constant we
579:57 - couldn't change the elements within it
580:00 - so buttons equals
580:03 - document. query selector all select All
580:08 - Elements by a class class my
580:12 - buttons and then again let's
580:15 - console.log my node list of
580:18 - buttons inspect console and there we go
580:23 - our node list has five elements button 1
580:26 - 2 3 4
580:29 - 5 even if you were to add an element to
580:31 - the Dom that same element isn't going to
580:34 - be automatically added to your node list
580:36 - I would recommend using query selector
580:38 - all again just to update it here's how
580:40 - to remove an element from a node list
580:42 - when you click on it we'll have to give
580:44 - all of these buttons an event listener
580:46 - they will listen for a click event when
580:48 - we click on one of these elements remove
580:50 - it from the Dom and the node list here's
580:53 - how again we will take our node list of
580:56 - buttons use the built-in for each method
580:59 - for each button within our node list do
581:03 - this take each button add an event
581:06 - listener
581:09 - we are provided with an event type and a
581:11 - call back to a
581:12 - function the event type that we're
581:14 - listening for is
581:16 - click the call back is going to be an
581:19 - arrow function we're provided with an
581:21 - event Arrow do this to remove an element
581:25 - from the Dom when you click on it we
581:27 - will access our event object access the
581:30 - target use the built-in remove method to
581:33 - remove it so let's see if this works
581:36 - currently let's remove button 2 1 4 3 so
581:41 - those buttons are gone but let me show
581:43 - you something I'm going to
581:46 - console.log my node list of buttons
581:49 - after each
581:55 - click even if I were to remove these
581:57 - buttons from the
581:59 - Dom they're still within the node list
582:02 - even after all the buttons are gone our
582:03 - node list still has four buttons so we
582:06 - do have to update that manually here's
582:09 - an easy way how to do
582:11 - that we're going to use Query selector
582:13 - all again we'll reassign
582:16 - buttons equals
582:18 - document. query selector
582:22 - all select all elements from the Dom
582:25 - that have a class of my
582:28 - buttons then just to see if this works
582:30 - let's
582:31 - console.log my node list of
582:36 - buttons
582:39 - now when we click on a button it should
582:41 - be removed from the Dom and the node
582:45 - list when I remove all the buttons our
582:48 - no list is then
582:49 - empty all right everybody so that is an
582:51 - introduction to node lists they're a
582:54 - static collection of HTML elements they
582:57 - can be created by using query selector
582:59 - all we can select Elements by an ID a
583:01 - class or an element type they're similar
583:04 - to an array but there's no map filter or
583:06 - reduce method
583:08 - and do remember that nod list won't
583:09 - update automatically to reflect changes
583:12 - to the Dom and well everybody that is an
583:14 - introduction to node lists in
583:20 - JavaScript hey everybody so in today's
583:23 - video I got to explain class lists in
583:25 - JavaScript class list is an element
583:28 - property it's used to interact with an
583:29 - elements list of classes meaning CSS
583:32 - classes by accessing the class list
583:35 - property of an element we can make
583:36 - reusable classes for many elements
583:39 - across your web page if I have a CSS
583:41 - class I can dynamically add remove
583:45 - toggle replace or check to see if an
583:47 - element contains a certain class so what
583:50 - we'll do in this example in our HTML
583:52 - document is create a button the button
583:54 - will have text of my button the ID of
583:58 - this button will be my button we'll
584:01 - apply a little bit of CSS
584:04 - initially let's select the ID of my
584:07 - button
584:08 - we'll be applying just a few properties
584:10 - let's increase the font
584:12 - size to for
584:15 - RM oh not 43 four go back go back go
584:19 - back I'll add a little bit of margin of
584:21 - 10 pixels remove the border with border
584:25 - none border radius to smooth the corners
584:29 - 5
584:30 - pixels and add a little bit of
584:34 - padding 10 pixels by 15 pixels
584:37 - that's good enough for now we're going
584:39 - to create a CSS class of
584:43 - enabled we won't apply it right away
584:45 - though we'll apply this class to this
584:47 - button using JavaScript if an element is
584:50 - enabled let's change the background
584:52 - color to be something
584:55 - blue I'm going to use hsl values
585:00 - though and I will set the font color to
585:03 - be
585:04 - white so this button doesn't doesn't
585:07 - have this class yet we'll add that in
585:09 - dynamically using JavaScript we'll
585:12 - create a reference to this button const
585:14 - my button will be the name then we need
585:17 - to select it document. getet element by
585:22 - ID the ID that I'm selecting is my
585:26 - button to add a class to an element take
585:29 - that element my button access the class
585:33 - list property follow this with the add
585:35 - method we will add the name name of the
585:37 - class enabled and now my button is
585:41 - enabled we have appended the CSS
585:44 - properties
585:45 - dynamically so if I were to inspect this
585:47 - element I'll rightclick
585:51 - inspect we have added that class of
585:54 - enabled to the element so my button has
585:57 - an ID and a class of enabled to remove a
586:00 - class again take that element of my
586:03 - button access the class list we will use
586:06 - the remove method method we will remove
586:08 - the class of
586:10 - enabled and it's gone let's right click
586:13 - on the element
586:15 - inspect so our class list is empty we
586:18 - have added and then removed that class
586:20 - of enabled we're going to create a new
586:22 - class now of hover when we hover over an
586:26 - element apply these CSS properties it's
586:29 - kind of like we're using the hover sudo
586:31 - class but we're using it a little bit
586:33 - different we can add or remove this
586:35 - class dynamically at will if we apply
586:38 - this class let's set a box Shadow to
586:41 - give the element a 3D pop effect for a
586:43 - horizontal and vertical offset let's set
586:45 - those to be zero each let's add 10
586:48 - pixels for the blur effect and I will
586:50 - set the color to be I don't know let's
586:53 - set it to be black but set the alpha
586:56 - down to like
586:58 - 20% and then when I hover I would also
587:01 - like to set the font weight of that
587:03 - element to be
587:06 - bold
587:08 - let's add the hover
587:10 - class so the appearance of this button
587:13 - changed I would like to apply this class
587:15 - of hover only when I hover my cursor
587:17 - over the element We'll add a mouse over
587:19 - event
587:20 - listener we will take my
587:23 - button add event
587:27 - listener we have an event type and a
587:30 - call back to a function the event type
587:32 - will be Mouse over when we Mouse over
587:36 - this element
587:38 - we are provided with an element object
587:40 - event Arrow do this we will access our
587:44 - event objects Target meaning the button
587:47 - take our class
587:49 - list and add the class of
587:54 - hover and let's see if this works if I
587:56 - hover my cursor over the button we apply
587:59 - the hover class now when I leave the
588:01 - button I would like to remove it really
588:03 - we can just copy the code for the event
588:05 - listener paste it replace Mouse over
588:08 - with mouse out then we will remove that
588:12 - class so now we can apply that class and
588:16 - then remove it with mouse over and mouse
588:19 - out there's also toggle if we toggle a
588:22 - class we'll remove it if that class is
588:25 - present add that class if it's not so
588:28 - let's replace add with
588:31 - toggle do this for both Mouse over and
588:33 - mouse out and that should work the same
588:36 - when we hover our cursor over the button
588:38 - we will toggle the class of hover if we
588:40 - have a mouse out event we will toggle it
588:43 - again to remove
588:46 - it now we're going to use the replace
588:49 - method to replace one class with another
588:51 - we'll create a new class of
588:55 - disabled we'll be replacing the enabled
588:58 - class with the disabled class when we
589:00 - click on the button so with the
589:02 - background color of the disabled class
589:04 - let's set the background color to be
589:06 - Gray
589:07 - again I like using hsl for the colors
589:10 - I'll set the lightness to be like
589:13 - 60% I'm trying to get a faded appearance
589:16 - and for the
589:17 - color let's pick a light shade of gray
589:21 - using hsl
589:24 - values I'll set the lightness to be
589:28 - 80% going back to our Javascript file
589:31 - let's add the class of
589:32 - enabled my button access the class list
589:37 - use the add method we will add the class
589:39 - of
589:41 - enabled then we'll add an event listener
589:43 - to the button we will take my button add
589:46 - an event
589:48 - listener we have an event and a call
589:51 - back the event is going to be click I
589:55 - would like to do something when we click
589:56 - on the button we will receive an event
589:59 - Arrow do this take our events
590:03 - Target access the class list we will
590:06 - will use the replace method replace the
590:09 - old class with the new class replace the
590:12 - enabled class with the disabled class
590:15 - there's two
590:16 - arguments the old class and the new
590:19 - class replace the old class with the new
590:21 - class then when we click on this button
590:24 - we'll replace the enabled class with the
590:27 - disabled class then we have the contains
590:30 - method if an element contains a class
590:33 - this will return true and if it doesn't
590:35 - it returns false So within our event
590:37 - listener let's add an if
590:40 - statement and an else
590:44 - statement we'll check to see if our
590:47 - events Target access the class list we
590:52 - will use the contains
590:54 - method if we click on the button and the
590:56 - class contains disabled what do we want
590:59 - to
591:00 - do does the class list contain disabled
591:04 - let's change the text content take our
591:06 - vents Target access the text content
591:11 - I'll append an
591:14 - emoji what's a good one that
591:19 - one else replace enabled with
591:24 - disabled let's click on the button we'll
591:26 - replace the enabled class with the
591:28 - disabled class our button is now
591:30 - disabled if I were to inspect this
591:33 - element the class is now
591:35 - disabled if I were to click on this
591:37 - button again well our class contains
591:40 - disabled that was true so we end up
591:43 - doing this code where we append to the
591:45 - text content of the button now the nice
591:47 - thing about using class lists HTML
591:49 - elements have a class list property we
591:52 - can reuse CSS classes amongst many HTML
591:55 - elements we'll create an H1 element
591:59 - now the text of this element will be
592:03 - hello I will give this element a unique
592:05 - ID of my H1 I'll increase the font size
592:10 - so we can see
592:12 - it select the ID of my H1 I'll increase
592:16 - the font size let's try five
592:21 - RM let's create a reference to my
592:25 - H1 const myh1 equals document. getet
592:30 - element by
592:32 - ID the ID that I'm selecting is my H1
592:36 - we'll add the enabled class to myh1 myh1
592:40 - do
592:41 - classlist do add not ass
592:46 - add
592:49 - enabled and there we go we have added
592:52 - these CSS properties to this
592:55 - element and because I'm lazy I'm going
592:57 - to copy all this code where we add an
592:59 - event listener to my
593:01 - H1 so let's replace my button with my
593:05 - H1
593:07 - now when we click on this H1 element we
593:10 - can disable it we'll replace the enabled
593:12 - class with the disabled class and if you
593:14 - don't believe me let's take a look the
593:17 - class of my H1 is now
593:20 - disabled if I were to click on this
593:22 - element again while the class list
593:24 - contains disabled so we execute this if
593:26 - statement where we change the text
593:28 - content of that
593:30 - Target now here's a challenge round
593:32 - we're going to create four buttons and
593:35 - store all of those buttons with then a
593:36 - node list so let's create a button with
593:40 - the text of the first button being
593:41 - button one I will give this button a
593:44 - class of my
593:47 - buttons let's copy this button paste it
593:49 - three
593:52 - times button one button two button three
593:55 - button
593:57 - four let's remove the CSS from my H1
594:00 - select the class of my
594:04 - buttons keep these three classes of
594:06 - enable hover and
594:10 - disabled okay let's eliminate all this
594:13 - code we'll create a node list to contain
594:15 - all these buttons we can use const if we
594:18 - don't plan on adding or removing buttons
594:20 - or let if we do let buttons equals
594:26 - document. query selector
594:29 - all select all elements that have a
594:32 - class of my buttons we'll apply our
594:35 - enabled class to all the
594:37 - buttons so we will take our node list of
594:40 - buttons use the for each method for each
594:44 - button within our node list do
594:48 - this take each button access each
594:52 - button's class list property I will add
594:55 - a
594:55 - class of
594:58 - enabled and we have applied that class
595:00 - to all the buttons If you need to remove
595:02 - a class you can do the same but replace
595:05 - add with remove
595:09 - move now when we hover a cursor over one
595:12 - of these buttons we will toggle the
595:14 - hover class we need to iterate through
595:17 - our node list of buttons take buttons
595:20 - use the built-in for each
595:22 - method for each button within our node
595:25 - list do
595:27 - this take each button add an event
595:32 - listener the event listener has an event
595:34 - type and a call back to a function
595:37 - the event type will be Mouse over when
595:40 - we hover a cursor over
595:42 - it we will be provided with an event
595:45 - argument Arrow do this access the event
595:49 - object access the target meaning the
595:52 - button that we hover over access the
595:54 - class list property we will
595:58 - toggle the hover class so when we hover
596:02 - our cursor over one of these elements we
596:04 - will apply the hover class
596:09 - now when our cursor leaves one of these
596:10 - elements we would like to toggle that
596:12 - class again let's copy everything we
596:15 - have here paste it replace Mouse over
596:18 - with mouse
596:20 - out when we leave one of these elements
596:22 - toggle the hover class again to remove
596:25 - that
596:28 - class now when we click on one of the
596:30 - buttons we're going to replace the
596:32 - enabled class with the disabled
596:35 - class
596:37 - take our node list of buttons use the
596:40 - for each
596:41 - method with each button Arrow do this
596:46 - take each button add an event
596:51 - listener we need to select the event
596:54 - type and a call back to a function the
596:57 - event type is going to be
596:59 - click the parameter is event Arrow do
597:03 - this when we click on one of these
597:05 - buttons
597:06 - we'll replace the enabled class with the
597:08 - disabled class take our event object
597:11 - access its Target access the class list
597:15 - property we will
597:17 - replace replace the old class with the
597:20 - new class replace the enabled
597:24 - class with the disabled
597:28 - class and let's see if this works when I
597:31 - click on a button we'll replace the
597:32 - enabled class with the disabled class
597:38 - the last thing we'll do is that when we
597:40 - click on a button that's disabled we'll
597:42 - change the text content we'll have to
597:44 - use the contains method So within our
597:47 - event listener I'll add an if
597:49 - statement if access our event access its
597:53 - Target access the class list property
597:56 - use the contains
597:58 - method does the class list contain the
598:01 - class of disabled if it does we'll
598:04 - access our event access the target of
598:07 - that event change the text content of
598:10 - that element I'll append an
598:13 - emoji that one I like that emoji if the
598:17 - class list of that element isn't
598:19 - disabled it doesn't contain the class of
598:21 - disabled we'll execute an L statement
598:23 - where we disable it by replacing the
598:26 - enabled class with the disabled class we
598:29 - have three event listeners Mouse over
598:32 - Mouse out and click we're utilizing all
598:35 - three of these custom classes enabled
598:37 - hover and
598:38 - disabled we can hover over these
598:41 - elements then we'll have Mouse over and
598:43 - mouse out events then when I click on
598:45 - one of these buttons we can apply that
598:47 - disabled class within our click event
598:50 - listener we have an if statement if we
598:53 - click on an element that's already
598:54 - disabled append the text
598:59 - content all right everybody so that is
599:01 - the class list property it's used to
599:04 - interact with an elements list of
599:05 - classes
599:06 - their CSS classes they allow you to make
599:09 - reusable classes for many elements
599:11 - across your web page and well everybody
599:13 - that is the class list property in
599:20 - JavaScript hey what's going on everybody
599:22 - in today's video we're going to create a
599:23 - game of rock paper scissors using
599:25 - JavaScript so sit back relax and enjoy
599:28 - the show all right let's do this thing
599:31 - we're going to create an H1 heading with
599:33 - text of rock paper
599:36 - scissors for a
599:38 - title we'll create three buttons the
599:41 - first one will be for rock you can add
599:44 - some text of rock but you know what I
599:47 - like using emojis I'm going to use an
599:49 - emoji instead I would like an emoji of a
599:53 - fist and I'm going to zoom in until we
599:55 - add some CSS let's create a button for
600:00 - paper that'll
600:04 - work and scissors
600:07 - maybe a p
600:09 - sign with each of these buttons I will
600:11 - set the onclick event handler equal to a
600:15 - JavaScript function we'll name the
600:17 - function play game now with these
600:19 - functions we're going to pass in an
600:21 - argument the first will be a string of
600:24 - rock now if you use double quotes HTML
600:27 - is going to be confused where this event
600:29 - handler ends our argument is going to be
600:31 - a string but it's going to be within
600:33 - single quotes because we're already
600:34 - using double quotes
600:36 - let's copy this attribute cuz I don't
600:38 - feel like typing it again the second
600:40 - argument will be for a string of
600:42 - paper and then
600:47 - scissors let's enclose our buttons
600:49 - within a div
600:52 - element this div element will have an ID
600:56 - of
600:57 - choices let's cut our buttons and paste
601:01 - them within the div element outside of
601:03 - the div element we'll create create
601:06 - another div element we will display the
601:08 - Player's
601:09 - Choice player colon
601:13 - space the ID of this development will be
601:17 - player display this will display the
601:20 - word rock paper or scissors depending on
601:22 - which button we
601:23 - pick let's do this for
601:26 - computer text will be
601:28 - computer ID computer
601:32 - display we should display a result who
601:35 - won
601:38 - the ID will be result
601:41 - display just for some temporary text I'm
601:44 - going to add it's a tie when we style
601:49 - this with CSS I would like to be able to
601:51 - see the updates we'll get rid of this
601:53 - pretty soon eventually we'll add in a
601:55 - score tracker but we'll do that after
601:57 - our game is at least working okay let's
602:00 - head to our CSS
602:01 - stylesheet I'm going to zoom back to
602:04 - 100%
602:07 - let's select the body of our document I
602:10 - will set the font family to be aial with
602:14 - the backup of s
602:16 - serif let's set the font weight to be
602:18 - bold throughout this
602:22 - application I will set any margin to be
602:25 - zero around the
602:26 - body use flex box to display the
602:29 - elements display
602:31 - Flex the flex direction will be a
602:34 - column
602:38 - and align items
602:43 - Center let's select our H1 element I
602:46 - need to increase the font
602:48 - size font size 3.5
602:53 - RM for a color pick a
602:59 - color for me I'll set the lightness to
603:04 - 20%
603:06 - now we're going to select our
603:07 - development of choices actually let's
603:10 - make this a class class
603:14 - choices select the class of
603:17 - choices add
603:20 - margin
603:21 - bottom of 30
603:26 - pixels within this development we need
603:29 - to select all the
603:30 - buttons we will select the class of
603:33 - choices select all buttons within this
603:36 - class we increase the font
603:39 - size to 7.5 RM these buttons need to be
603:44 - big I will set a minimum
603:47 - width of 160
603:50 - pixels at a little bit of margin between
603:52 - each
603:54 - button zero pixels on the top and bottom
603:57 - 10 pixels on the sides for the buttons I
604:01 - would like rounded Corners I would like
604:03 - these buttons to be a
604:04 - circle I can set the Border radius to
604:07 - something massive like 250 pixels that
604:11 - will give us some rounded buttons and
604:13 - pick a background color background
604:18 - color I want something
604:21 - blue I've already pre-picked a color so
604:23 - I'm going to use
604:27 - this now when I hover my cursor over one
604:30 - of the buttons I would like my cursor to
604:33 - change into a pointer and that does work
604:37 - let's also add a transition
604:39 - effect let's change the background color
604:43 - to e after half a
604:47 - second let's access the hover sudo class
604:50 - of all the buttons of
604:54 - choices take the background color I'll
604:57 - set the lightness to be 20%
604:59 - lighter each button is going to light up
605:02 - when you hover your cursor over the
605:03 - button then we'll work on the display
605:05 - displays next we're going to select the
605:07 - player display and the computer display
605:10 - these are
605:11 - ideas player
605:14 - display and computer
605:19 - display let's set the font size to be a
605:22 - 2.5
605:24 - RM and for the result display where it
605:27 - says it's a
605:28 - tie that's the ID of result
605:33 - display set the font size
605:37 - to be 5
605:40 - R and I'll add some margin to the top
605:42 - and bottom 30 pixels to the top and
605:45 - bottom zero on the
605:47 - sides okay that is good enough for
605:50 - now so we no longer need this
605:52 - placeholder for the result display let's
605:54 - add some
605:55 - functionality we have a lot of constants
605:57 - to declare const choices choices will be
606:01 - an array of strings we'll have
606:04 - Rock
606:06 - paper and
606:08 - scissors we need to get the player
606:10 - display and the computer display so we
606:12 - can update them const
606:15 - player display equals document. getet
606:21 - element by ID the ID that I'm selecting
606:25 - is player
606:28 - display then we have computer
606:32 - display computer display
606:37 - and a result display this one it's empty
606:41 - currently const result display equals
606:46 - document. getet element by ID result
606:51 - display we'll factor in scoring later we
606:54 - need a function of play game that
606:57 - accepts one argument the Player's
607:00 - Choice
607:02 - function play game we have one
607:06 - parameter player
607:09 - choice when we play a new game we have
607:12 - to pick a choice for the computer
607:14 - between rock paper or scissors what we
607:16 - could do is generate a random number
607:18 - between zero and two rock is index zero
607:20 - paper is index one scissors is index 2
607:23 - we'll create a constant within play game
607:26 - of computer Choice I'm declaring it
607:30 - within the function so we can update it
607:32 - every time we play a new game equals
607:35 - take our array of
607:37 - choices at index for the index we'll
607:41 - generate that random number using the
607:44 - random method of math math. random
607:47 - method * 3 then we need to round it
607:50 - because it's not going to be a whole
607:52 - number math. floor to round it
607:57 - down so the computer's choice will be a
608:00 - random index between 0 through two which
608:03 - will give us randomly either rock paper
608:05 - or scissors hey this is bro from the
608:08 - future one thing that would be good for
608:09 - us to do is along the way use
608:12 - console.log just to be sure that what
608:14 - we've been writing has been working so
608:16 - within our computer's Choice let's
608:18 - console.log whatever that
608:21 - is so if this does work after clicking
608:24 - one of these buttons the computer is
608:26 - either going to pick rock paper or
608:28 - scissors the computer picked scissors
608:30 - just now scissors scissors it really
608:33 - like scissors apparently so yeah the
608:35 - Player's Choice is being populated with
608:37 - the string of rock paper or scissors I
608:40 - just wanted to confirm
608:42 - that and we need a result what are we
608:45 - going to display to the
608:46 - screen result will be an empty string
608:49 - for now first let's check to see if the
608:51 - Player's Choice is equal to the
608:53 - computer's choice that means it's a
608:56 - tie if Player's
608:58 - Choice is strictly equal to the
609:01 - computer's Choice maybe we both pick
609:04 - rock well well then we'll take our
609:06 - result to be displayed and set it equal
609:08 - to
609:09 - be it's a
609:12 - tie else somebody is going to
609:15 - win let's add an else
609:18 - statement we can use a
609:20 - switch we can examine a value against
609:23 - matching cases we'll examine the
609:25 - Player's
609:28 - Choice does the Player's Choice match
609:31 - the case of
609:33 - rock do these two Val use match if so
609:37 - we'll use the tary
609:41 - operator we'll check the condition of if
609:44 - our computer's
609:46 - choice is strictly equal to
609:51 - scissors if so question mark That's the
609:55 - tary operator if we pick Rock and the
609:58 - computer picks scissors we will return U
610:02 - win otherwise if this condition is false
610:05 - well that means the computer picked
610:07 - paper if our choices already don't match
610:10 - and we picked rock that means they
610:11 - either picked scissors or paper if they
610:14 - didn't pick scissors that means they
610:15 - picked paper so they win that means we
610:19 - lose you
610:21 - lose whatever string is returned we're
610:24 - going to assign it to result result
610:27 - equals whatever is returned either you
610:30 - win or you lose then we should add a
610:33 - break after this case
610:37 - all right let's copy this case and
610:38 - everything within
610:40 - it let's paste it if the Player's Choice
610:44 - matches the case of paper and the
610:47 - computer's choice is strictly equal to
610:50 - rock that means if that's true you win
610:54 - else you lose let's copy this case and
610:58 - everything within
611:02 - it case scissors
611:06 - if the computer's Choice equals
611:08 - paper then you win otherwise you lose
611:13 - after we move beyond the IFL statements
611:15 - we need to update the text on the screen
611:18 - so we will take the players
611:23 - display set the text content to equal a
611:29 - template string of player col in space
611:33 - add a placeholder
611:35 - the Player's Choice did we pick rock
611:38 - paper or scissors then let's do this
611:41 - with the computer's
611:42 - Choice select the text content of the
611:45 - computer
611:47 - display the text will be
611:50 - computer we will display the variable of
611:53 - computer Choice the one that was picked
611:57 - randomly and take our result
612:00 - display which has no text content
612:03 - currently
612:06 - set it equal to be
612:09 - result okay let's see what we have
612:11 - currently let's pick Rock it's a tie
612:15 - paper you win scissors you lose what
612:19 - we'll work on next depending on the
612:21 - result that's displayed if we win I
612:24 - would like the text to be green if we
612:26 - lose I want the text to be red going to
612:29 - our CSS stylesheet we're going to add
612:31 - three
612:32 - classes green text
612:37 - red
612:39 - text pick a font
612:43 - color pick something
612:50 - green and for the red text pick a red
612:54 - font
612:56 - color if we win or lose we're going to
612:59 - add one of these classes to the class
613:01 - list of our result display so going back
613:04 - to to our Javascript file after we
613:07 - display the result now we're going to
613:09 - add a
613:11 - switch we're going to examine our
613:15 - result we will add a case of you
613:19 - win if our value matches this case let's
613:23 - take our result display access the class
613:27 - list use the add method add the class of
613:32 - green text
613:35 - then
613:36 - break let's copy this
613:39 - case paste
613:41 - it we will add a case for you
613:46 - lose add the class of red text if we
613:50 - lose let's see what we have
613:54 - currently if we win you get green text
613:57 - if you lose you get red text but now if
614:00 - it's a tie we have red text with each
614:03 - new game we should reset the color back
614:06 - to the
614:06 - original so before updating the color
614:09 - and displaying it let's take our result
614:12 - display access the class list use the
614:16 - remove method remove any class of green
614:20 - text and red
614:22 - text let's see if this works you lose
614:27 - it's a tie that's black you lose you win
614:31 - the colors seem to be working all right
614:34 - now let's add scoring mechanism we'll
614:36 - have to head back to our HTML
614:38 - file after our result
614:41 - display we're going to create a div
614:44 - element the first div El will have a
614:46 - class of score
614:50 - display the text for the score display
614:53 - will be player
614:56 - score colon
614:59 - space then we'll add a span element
615:02 - within with text of zero row I will give
615:06 - the span element a unique ID of player
615:09 - score
615:11 - display the reason I'm putting this
615:13 - number within a span element I'm going
615:15 - to style this number different from the
615:17 - rest of the div element the player
615:19 - score okay let's copy this div element
615:22 - and paste it we need another for
615:24 - computer computer
615:27 - score the ID of the span element will be
615:30 - computer score
615:32 - display going back to our c a stylesheet
615:35 - we'll add the following after our result
615:38 - display we will select the class of
615:40 - score
615:42 - display increase the font
615:45 - size font size will be 2
615:49 - R for the actual numbers I'm going to
615:52 - change the color with the CSS property
615:54 - where the font color is green I'll add
615:56 - an additional selector let's select the
615:59 - ID of player score display I would also
616:04 - like that to be that shade of green and
616:06 - for the red text let's select the ID of
616:11 - computer score
616:13 - display so the computer score that
616:16 - number will be red okay now we just need
616:19 - to add functionality to the scoring
616:21 - mechanism so back to the
616:24 - top we're going to select the ID of
616:28 - player score
616:29 - display const player score display
616:33 - equals doc min. getet element by
616:36 - ID player score
616:39 - display and we need the same thing for
616:41 - the
616:47 - computer computer score
616:52 - display and we need a score value a
616:55 - number so we can work with it let player
616:59 - score equals zero let computer score
617:04 - equals
617:06 - z going to the bottom of this function
617:09 - within our switch within our case of you
617:11 - win we're going to increment our player
617:14 - score player score
617:17 - Plus+ then take our player score
617:20 - display and update
617:24 - it access the text
617:27 - content set it equal to whatever the
617:30 - player score
617:31 - is then let's do this with our computer
617:36 - computer score
617:39 - Plus+ that's if we
617:41 - lose and computer score
617:44 - display equals the computer
617:47 - score and that should be everything
617:49 - let's see if this program
617:51 - works you lose you win you win it's a
617:57 - tie you win you win you lose the player
618:02 - score is four the computer score is two
618:05 - all right everybody so that is a game of
618:06 - rock paper scissors you can make using
618:13 - JavaScript hey what's going on everybody
618:15 - so in today's video I'm going to show
618:17 - you how we can create an image slider
618:18 - program using JavaScript you will need
618:20 - some images to work with I would
618:22 - recommend finding three or more somewhat
618:25 - related images to whatever you would
618:26 - like to create an image slider for once
618:28 - you find your images put them within
618:30 - your website folder and we are ready to
618:32 - begin okay let's do this thing everybody
618:35 - so we will create a development to
618:36 - contain everything this development will
618:39 - have a class of
618:41 - slider within this development we will
618:43 - create another
618:45 - development this development will have a
618:47 - class of slides to contain our images
618:51 - within this inner div element we will
618:53 - create three image elements the first
618:56 - image will have a class of
618:59 - slide with this image element I will set
619:01 - the source attribute to be a relative or
619:04 - absolute file path let's begin with
619:07 - image one whatever you currently have
619:09 - I'll copy the name of this image
619:10 - including the
619:12 - extension so my image has a name of
619:15 - image 1.jpg and for some reason if this
619:18 - image can't display I'll add some
619:19 - alternative text with the alt attribute
619:22 - let's say image number
619:26 - one and there is my image I will copy
619:30 - this image element paste it twice or
619:33 - once for every image that you have then
619:35 - I have image two and image three let me
619:38 - change those we have image two and image
619:42 - three so you should have three or more
619:45 - images depending on what pictures you're
619:47 - using and how many then we're going to
619:49 - add some Arrow buttons for the time
619:51 - being that will be down at the
619:53 - bottom so we will create a button
619:56 - element now you could use a left angle
619:58 - bracket let me zoom
620:00 - in but I think there's a better option
620:03 - there's a unic code character for a left
620:05 - pointing angle bracket which looks like
620:07 - this we will use the Unicode character
620:10 - of Ampersand #
620:14 - 100094 I think that looks better but you
620:17 - do you all right then let's create a
620:19 - right angle bracket with another button
620:22 - the number is 1
620:25 - 95 so that will create a button with an
620:28 - arrow that points to the right for the
620:30 - previous button the left one I will
620:32 - assign a class
620:34 - of prev meaning
620:36 - previous and the next button will have a
620:38 - class of
620:40 - next when we click on these buttons
620:43 - we'll call a JavaScript function we need
620:45 - to set the onclick vent Handler equal to
620:48 - a JavaScript function for the previous
620:50 - button we'll call a function of prev
620:53 - slide meaning
620:55 - previous and for the next button we will
620:58 - call a function of next slide to go to
621:02 - the next slide
621:05 - okay and that is all the HTML that we
621:07 - need for now let's go to our CSS
621:10 - stylesheet we will select our class of
621:13 - slider that contains everything class
621:16 - slider we're going to use relative
621:20 - positioning these elements will move
621:22 - relative to their normal position using
621:25 - relative so we have position relative I
621:29 - will set a width of
621:31 - 100% as well as margin Auto to to Center
621:34 - everything
621:35 - horizontally now just in case if our
621:37 - images are really big I will set the
621:39 - Overflow property to be hidden so take
621:42 - our class of slider select all the
621:45 - images with these images I will set
621:48 - their width to be
621:50 - 100% and for now I will set the display
621:52 - property to be none we don't want to
621:55 - display all the images right away so
621:57 - they should
621:58 - disappear let's add a little bit of
622:00 - functionality before continuing let's go
622:02 - to our Javascript file
622:04 - I'm going to create a node list of all
622:06 - the images within our class of slides so
622:10 - I will create a constant of slides which
622:13 - will be a node list equals
622:16 - document. query selector all we will
622:21 - select all elements within the class of
622:24 - slides that are images image elements we
622:28 - will also declare an index of the
622:29 - current slide let slide index so this
622:33 - will be zero initially to start at the
622:36 - first slide we'll be using the set
622:38 - interval function set interval will
622:41 - return an ID that we can work with so we
622:43 - will declare a variable to hold to that
622:46 - let
622:48 - interval ID for now I'll set it to be
622:51 - null meaning no
622:53 - value okay let's declare our functions
622:56 - we will have a function to
622:59 - initialize our
623:01 - slider this will populate our web
623:03 - browser with the first image when we
623:05 - call this function then we need a
623:07 - function for show Slide there will be
623:11 - one parameter an
623:14 - index an index of the next slide we
623:16 - would like to go
623:18 - to a function for the previous slide
623:21 - prev slide and a function for next slide
623:26 - function next
623:29 - slide within our function of initialized
623:32 - slider we will take our node list of
623:35 - slides at index of our current slide
623:38 - index which will be zero initially I
623:41 - will access the class list and add a
623:46 - class of display slide which we still
623:50 - need to work with and then we will call
623:53 - this function right
623:55 - away okay we need to build this class
623:58 - still display
623:59 - slide we will select all image elements
624:02 - that have a class within their class
624:04 - list of display
624:08 - slide if an image has this class we will
624:11 - set their display property to display as
624:14 - a block we should get our first
624:17 - image if you would like although it's
624:20 - not necessary we could display this
624:23 - image after all of the Dom content loads
624:26 - by using an event listener here's how if
624:28 - you would prefer to wait for all the Dom
624:30 - content to load we can take our document
624:34 - add an event
624:36 - listener we will wait for the event of
624:40 - Dom content
624:43 - loaded once all of the Dom content loads
624:47 - pass in a call back to initialize slider
624:49 - so this would work too and I would say
624:51 - it's the preferred way rather than just
624:53 - calling this function initially wait for
624:55 - all the Dom content to load then display
624:58 - our first image by calling this function
625:00 - within the initialized slider function
625:03 - we will use the set interval
625:07 - function we will call the next slide
625:09 - function after a given amount of seconds
625:12 - let's say after 5 seconds I would like
625:15 - to go to the next slide and display the
625:16 - next image whatever is next within our
625:19 - node list in order for us to work with
625:21 - this interval this function is going to
625:23 - return an interval ID so we can clear it
625:26 - later if we need to we will take our
625:28 - interval ID set it equal to the set
625:31 - interval
625:32 - function so I am going to
625:36 - console.log my interval ID just to see
625:38 - what it is so let's save and run
625:42 - everything go to console so this
625:45 - interval has an ID of one if I need to
625:48 - clear this set interval function I can
625:50 - access it by its ID which is currently
625:53 - one and we can get rid of this
625:55 - line to avoid displaying an image if we
625:58 - don't have one we can wrap these two
626:00 - lines of code within an if
626:02 - statement we will check if our node list
626:06 - of slides its length property is greater
626:10 - than zero if we do have slides then
626:14 - display it and use the set interval
626:16 - function if there's no slides no images
626:20 - then don't do
626:22 - this okay then we're going to go to the
626:24 - next slide
626:25 - function we're going to increment slide
626:28 - index by one slide index
626:31 - Plus+ and then we will will call the
626:34 - show slide function pass in our slide
626:36 - index after incrementing it and that is
626:39 - all we need for next slide then we have
626:41 - the show slide function within our show
626:43 - slide function we will access our node
626:46 - list of
626:48 - slides use the for each method to
626:51 - iterate through all of them I would like
626:53 - to take each slide Arrow do this take
626:58 - each slide access its class
627:01 - list then remove a class from the class
627:04 - list we will remove the class of display
627:09 - slide if it's time to move to the next
627:11 - slide we don't want to display the
627:13 - current slide anymore we'll remove
627:15 - display slide so that it's no longer
627:18 - displaying as a block remove these
627:21 - properties then outside of this for each
627:23 - method we will add display slide to the
627:25 - next slide then we will take our slides
627:29 - at index of slide
627:32 - index access the class list of the next
627:36 - slide then we will add a new class add
627:40 - the class of display
627:43 - slide so that it displays as a
627:46 - block and let's see if this works after
627:50 - 5 Seconds we should move to the next
627:53 - slide and that does in fact work let's
627:57 - wait again for the next
627:58 - slide and that has worked
628:01 - too we need to reset our slide index
628:04 - because right now we're going out of
628:05 - bounds we only have three slides in this
628:07 - example within our show slide function
628:10 - We'll add an if
628:11 - statement and an lse if
628:17 - statement if we reach the end of our
628:20 - slides we need to reset the slide index
628:22 - and set it back to be zero if our index
628:25 - that's passed
628:26 - in is greater than or equal to our node
628:31 - list of slides length property if we
628:34 - reach the end we need to take our slide
628:36 - index and reset it to be
628:38 - zero now if we go backwards with the
628:41 - previous button if our index is less
628:44 - than
628:46 - zero we will take the slide
628:48 - index set it equal to our slides length
628:53 - property minus one to set it to the end
628:56 - if we're on the first slide and we hit
628:58 - the previous button that will bring us
629:00 - to the last slide these images should
629:02 - Loop let's see see if that does
629:10 - work so we're on our green car and we
629:12 - should go to our blue car next and that
629:14 - does work our initialized slider
629:17 - function is done if we click on the next
629:19 - button we should be able to go to the
629:20 - next slide right
629:24 - away now we have to work on the previous
629:26 - button and add some functionality to
629:28 - that within the previous slide function
629:32 - we will take our slide index and
629:34 - decrement it with minus minus then call
629:37 - the show slide function pass in the
629:39 - current index now we should be able to
629:42 - move forward and
629:45 - back now if we hit the previous button
629:48 - CU we want to look at an image the timer
629:50 - is still going we'll still go to the
629:51 - next slide if we would like to take some
629:53 - time to admire one of these images we
629:56 - can clear the set interval function by
629:58 - using its interval ID so if somebody
630:01 - were to hit the previous button let's
630:02 - clear the timer we will use the clear
630:06 - interval function we will pass in that
630:08 - interval
630:11 - ID our set interval function is still
630:13 - going to move the slides forward but if
630:15 - I were to hit the previous
630:17 - button that interval is going to
630:20 - stop we are done with all of our
630:22 - JavaScript functionality we're going to
630:24 - apply some CSS styling to the buttons
630:27 - and even add a transition animation to
630:28 - the next
630:30 - image we will style our buttons next
630:34 - within our class of slider select all
630:37 - buttons I will set the position property
630:40 - to be
630:43 - absolute positions an element relative
630:46 - to its parent meaning the slider
630:50 - element with absolute positioning I will
630:53 - set the top property to be
630:56 - 50% these buttons will then be
630:58 - positioned on the Y AIS at 50% meaning
631:01 - the middle then I will use the transform
631:06 - property I will translate them on the Y
631:09 - AIS by minus
631:12 - %. Translate Y is a function we're
631:15 - moving these buttons up by 50% of the
631:18 - element's height that will put this
631:20 - button right in the middle take 50% of
631:22 - the height of the button Move It Up by
631:24 - that amount I'll increase the font size
631:28 - font size 25 pixels or better yet let's
631:31 - do like 2 RM
631:34 - okay now for the background
631:36 - color I'll set it to be black but I'm
631:39 - going to lower the alpha on it so it's
631:43 - transparent I'll set the alpha to be
631:47 - 50% and for the font color color I'll
631:50 - set that to be
631:51 - white okay you can see our two buttons
631:54 - are overlapping currently I'm going to
631:56 - remove the border around the buttons
631:58 - order
631:59 - none and change our cursor to be a a
632:03 - pointer if we hover over one of the
632:05 - buttons so these buttons each have a
632:08 - class previous and next let's select the
632:12 - previous
632:13 - class I will set the left property to be
632:16 - zero to left align it and with the next
632:20 - class that's the next button I will set
632:24 - the right property to be zero to align
632:26 - it to the
632:27 - right I'm also going to add a little bit
632:29 - of padding too around the buttons let's
632:32 - add some padding
632:34 - here
632:36 - padding 10 pixels by 15
632:39 - pixels that looks pretty good we are
632:42 - going to add an animation at Key frames
632:47 - we need an animation name we will name
632:49 - this animation fade for a fade
632:52 - effect from this property of
632:57 - opacity I can't spell today 0.5 meaning
633:01 - 50% two this property
633:06 - opacity one for 100% when a new image is
633:10 - displayed the opacity is going to be 50%
633:13 - so it's transparent then after the
633:15 - animation is complete set it to be one
633:17 - for 100% now we just have to utilize
633:20 - this animation of fade all images that
633:23 - have the display slide class we will set
633:26 - their animation name when that image is
633:29 - displayed to be fade how long do we want
633:32 - this animation to take
633:33 - we will set the animation duration to be
633:37 - about 1.5
633:39 - seconds okay let's see if this works we
633:42 - should get a fade animation when each
633:44 - new slide
633:47 - appears we can move
633:49 - forward and we can move
633:52 - back all right everybody so that is an
633:54 - image slider that you can create using
633:56 - JavaScript HTML and
634:01 - CSS hey everybody in today's video I got
634:04 - to introduce to you the wonderful world
634:06 - of callback hell callback hell is a
634:09 - situation in JavaScript where callbacks
634:11 - are nested within other callbacks to the
634:14 - degree where the code is difficult to
634:16 - read if you Nest too many callbacks
634:17 - within other callbacks your code starts
634:20 - to form a pyramid and it's really
634:22 - difficult to work with callback hell is
634:24 - an old pattern to handle asynchronous
634:26 - functions in Java Script nowadays we
634:28 - have promises as well as a sync and a
634:30 - wait to avoid callback hell which we'll
634:32 - discuss pretty soon to help us avoid
634:34 - callback hell we should be familiar with
634:36 - what it is I'm going to create four
634:38 - tasks these will be functions function
634:41 - task
634:43 - one these will be synchronous functions
634:46 - we don't need to use callbacks for
634:47 - synchronous functions then we'll change
634:49 - these to be asyrus functions within task
634:52 - one we will
634:54 - console.log task one
634:56 - complete okay let's copy task one paste
634:59 - it three times for a total of four
635:01 - tasks
635:03 - we'll have task
635:05 - two task three and task
635:09 - four in order from the top down we will
635:12 - execute task one followed by task
635:16 - two task
635:19 - three and task four when all four tasks
635:23 - are complete we will
635:27 - console.log all tasks
635:30 - complete these functions work
635:32 - synchronously they're all in order task
635:34 - one is complete then two 3 then four
635:38 - then we get the final message of all
635:39 - tasks complete but what if these were
635:41 - asynchronous functions they're not going
635:43 - to follow this order from the top down
635:45 - so to make these functions asynchronous
635:47 - one thing we could do we can enclose
635:49 - this code within the set timeout
635:51 - function set
635:53 - timeout set timeout takes two arguments
635:56 - a call back and a time in milliseconds
635:59 - in which to complete this code for the
636:01 - call back this could be a call back an
636:03 - anonymous function or an arrow function
636:05 - I'll write an arrow function parameters
636:08 - Arrow do
636:09 - this say the task is complete after
636:14 - 2,000 milliseconds let's do this with
636:16 - the other tasks
636:20 - too so task two will be complete after 1
636:24 - second 1,000
636:26 - milliseconds task three will be complete
636:29 - after 3,000
636:31 - milliseconds now task 4 task 4 will be
636:34 - complete after
636:36 - 1,500 milliseconds okay let's try this
636:39 - again I need these tasks to be completed
636:42 - in order starting from one all the way
636:44 - to
636:45 - four it says that the tasks are already
636:48 - complete then the tasks are completed in
636:50 - this order task 2 task 4 Task 1 and task
636:54 - three so that's the problem with
636:55 - asynchronous code asynchronous functions
636:58 - can complete at any time the rest of our
637:00 - program doesn't wait around for them to
637:02 - finish if I absolutely need these tasks
637:05 - to complete an order starting with 1
637:07 - then 2 3 4 each of these functions can
637:10 - accept a call back so we need to set up
637:12 - that
637:13 - parameter after we say that that task is
637:16 - complete we will execute the call back
637:18 - to the next function so let's do this
637:20 - with the rest of the
637:31 - tasks
637:37 - if we need these tasks to complete an
637:38 - order starting with one we would take
637:41 - one and there's one parameter a call
637:44 - back we'll pass in a call back to task
637:46 - two we can pass in a call back and
637:48 - Anonymous function or an arrow function
637:50 - I like Arrow functions though parameters
637:53 - Arrow do this what are we going to do
637:56 - when task one is complete we'll call
637:58 - task two task two also accepts a call
638:01 - back again this can be a call back an
638:04 - anonymous function or an arrow function
638:06 - this will be an arrow function
638:08 - parameters Arrow do this what do we want
638:10 - to do when task two is complete call
638:13 - task three task three also accepts a
638:15 - call back we'll use an arrow function
638:18 - parameters Arrow do this now when task
638:21 - three is complete guess what we're going
638:22 - to do call task
638:25 - four task four task 4 accepts a call
638:28 - back we'll do this parameters Arrow then
638:32 - would like to
638:34 - console.log all tasks complete all tasks
638:40 - complete this should work
638:44 - now task one complete task two
638:47 - complete task three complete task 4
638:50 - complete all tasks complete so what
638:53 - we've done is use callback hell it's
638:55 - where you're nesting callbacks inside of
638:57 - other callbacks if you have a lot of
638:59 - tasks to complete an order it can become
639:01 - very unman manageable hey this is bro
639:04 - from the future one thing that I wanted
639:05 - to mention is that four levels of
639:08 - callbacks isn't too unreasonable but
639:10 - when you add additional levels on top of
639:12 - that that's when you're starting to
639:13 - approach the levels of callback hell
639:15 - where the code can become unmanageable
639:17 - and really difficult to read what I've
639:19 - written in this video isn't too
639:20 - unreasonable but hopefully you can see
639:22 - how we've come to start that pyramid
639:24 - pattern that is all all right everybody
639:26 - so that is callback hell it's a
639:28 - situation in JavaScript where callbacks
639:30 - are nested with other callback where the
639:32 - code is difficult to read it's an old
639:34 - pattern to handle asynchronous functions
639:37 - in some upcoming videos we'll be
639:38 - discussing promises as well as a sync
639:40 - and a wait to avoid callback hell and
639:43 - well everybody that is callback hell and
639:45 - why you should avoid it in
639:49 - JavaScript what's going on everybody so
639:52 - in today's video I got to talk about
639:53 - promises in JavaScript A promise is an
639:56 - object an object that manages
639:58 - asynchronous operations such as querying
640:01 - a database space fetching a file
640:03 - Gathering resources those you could
640:05 - consider asynchronous operations they
640:07 - can take an indeterminate amount of time
640:09 - you can wrap a promise object around
640:12 - some asynchronous code the promise
640:14 - object promises to return a value that
640:16 - promise object will be pending then
640:19 - either that promise will be resolved if
640:21 - the task completed successfully or
640:23 - rejected if it failed for some reason
640:25 - maybe the promise couldn't fetch that
640:26 - file resolved if it did A promise is an
640:29 - object will create a new promise object
640:31 - with new prom
640:32 - then pass into a function usually you
640:34 - see this is an arrow function there's
640:36 - two parameters resolve and reject Arrow
640:40 - then do some asynchronous code so in
640:42 - this demonstration we're going to be
640:44 - doing some chores if you live with your
640:45 - parents maybe your mom asked you to do
640:47 - these chores or with the roommate these
640:49 - are the tasks you need to do or your
640:51 - significant other wants you to do these
640:52 - tasks anyways we have some chores to do
640:55 - we have to walk the dog clean the
640:57 - kitchen and take out the trash I'll
640:59 - create functions for each of these
641:01 - chores first we'll start by using
641:03 - callbacks then I'll demonstrate the use
641:05 - of promises and how they're helpful so
641:07 - let's create a function to walk dog to
641:12 - make this asynchronous I'm going to add
641:13 - a set timeout
641:16 - function this takes a call back and an
641:19 - amount of time in milliseconds to
641:20 - complete this code let's say walking the
641:22 - dog takes 1,500 milliseconds what code
641:26 - would we'd like to perform let's write
641:28 - an arrow function to keep it
641:30 - simple parameters Arrow do this let's
641:35 - console.log after completing this chore
641:38 - you walk the
641:43 - dog okay that'll be the first function
641:46 - let's create a function to clean the
641:48 - kitchen function clean kitchen this will
641:52 - take a long time 2,500 milliseconds
641:55 - let's say when we complete this task we
641:58 - will print you clean the kitchen
642:06 - and a third
642:07 - function take out
642:12 - trash you take out the
642:20 - trash taking out the trash it's really
642:23 - quick it takes half a second 500
642:27 - milliseconds if I need to do these
642:29 - chores in order I would need to use some
642:31 - callbacks after walking the dog we will
642:34 - call a call back to clean kitchen after
642:36 - we clean the kitchen we will take out
642:38 - the trash we need to modify these
642:40 - functions so that they accept some call
642:42 - backs after our code is complete we will
642:46 - invoke the call back call the Callback
642:49 - so let's add that parameter to each of
642:51 - these
642:56 - functions now if we want to call all
642:58 - these functions in order we would have
643:00 - to start using call back hell which we
643:01 - learned about out in the last video so
643:03 - first I would like to walk the dog I
643:05 - will call that function pass and a call
643:07 - back but we'll use an arrow
643:09 - function then we will clean the kitchen
643:13 - pass in a call back I'll use an arrow
643:16 - function take out
643:20 - trash and we'll pass in a call back to
643:22 - do this when we complete all the
643:24 - chores
643:27 - console.log you finished all the chores
643:32 - okay let's see if this
643:34 - works you walk the
643:37 - dog you clean the kitchen you take out
643:39 - the trash you finished all the
643:41 - chores if we have a lot of callbacks to
643:44 - work with we'll end up going to call
643:46 - back hell you don't want to go to call
643:47 - back hell so what we'll use instead are
643:50 - promises with all of this asynchronous
643:52 - code we'll wrap it within a promise by
643:55 - using a promise we don't need callbacks
643:57 - instead of using callbacks we'll use
643:59 - method chaining we'll method chain our
644:01 - Pro promises here's how how we'll modify
644:04 - these functions is that at the end of
644:06 - each function we will return an object
644:09 - return a new promise return a new
644:13 - promise object and follow this formula
644:15 - we have two parameters resolve and
644:19 - reject resolve
644:22 - reject Arrow do this asynchronous code
644:26 - within an arrow function take all of the
644:28 - asynchronous code cut it place it within
644:32 - the promise our promise promises to
644:35 - return a value it's either going to be
644:37 - resolved or rejected we're going to
644:39 - modify this function we don't need to
644:41 - work with call backs anymore we can get
644:42 - rid of those get rid of the parameter
644:45 - and the portion of the code where we
644:46 - call the call back if we would like to
644:48 - display a message when the promise
644:50 - resolves when it finishes successfully
644:52 - we will instead call the resolve
644:55 - parameter it's a function this message
644:58 - is the value the argument that we're
645:00 - passing in after you finish walking the
645:03 - dog here's your completion message when
645:05 - the promise resolves let's modify the
645:08 - rest of the functions so that they use
645:09 - promises we will return a new
645:13 - promise two parameters
645:16 - resolve
645:18 - reject Arrow do this asynchronous code
645:22 - let's cut our current asynchronous
645:25 - code paste it remove the call back
645:28 - parameter we don't need it anymore and
645:30 - we don't need to call the call back
645:32 - when this promise
645:34 - resolves pass along this message you
645:37 - clean the
645:38 - kitchen let's do this with take out
645:40 - trash we will return a new
645:44 - promise two parameters resolve reject
645:48 - Arrow do this cut the asynchronous code
645:53 - paste it within the promise remove the
645:55 - call back and where we call the call
645:58 - back when we resolve this promise pass
646:01 - along this message we no longer need to
646:04 - use callback hell instead we're going to
646:06 - use method chaining first we're going to
646:09 - walk the dog clean the kitchen and then
646:10 - take out the trash in that order we will
646:13 - call the walk dog
646:16 - function and then we're going to Method
646:18 - chain follow this with the then
646:22 - method walk the dog then what is what
646:24 - we're saying the walk dog function does
646:27 - provide a value parameter this message
646:30 - we can use that message for something
646:32 - that's going to be stored within value
646:34 - that's going to be the parameter that's
646:36 - provided to us take the value let's
646:39 - print it console.log my value so when I
646:43 - run this program we should only be
646:45 - walking the
646:47 - dog you walk the dog and nothing else
646:51 - looks like I misspelled resolve as
646:52 - resolves there after walking the dog I
646:56 - would like to clean the kitchen so I
646:58 - need to call that function next within
647:00 - our Arrow function we'll write more than
647:02 - one statement we need to enclose this
647:04 - within a set of curly braces print our
647:07 - value and then do this function
647:10 - return clean kitchen and then call
647:15 - it we'll add another then
647:18 - method then take the value provided by
647:21 - clean
647:22 - kitchen that will be this
647:25 - one take that value
647:28 - arrow
647:30 - console.log that value
647:35 - you walk the
647:37 - dog you clean the kitchen then we'll
647:40 - take out the trash at the
647:41 - end we'll add another statement to this
647:44 - then
647:46 - method we will return take out
647:51 - trash invoke this
647:54 - method then we will take the value
647:57 - provided to us when it resolves this
648:00 - value
648:02 - do this
648:03 - code
648:05 - console.log that
648:10 - value you walk the
648:12 - dog you clean the kitchen you take out
648:15 - the trash so after taking out the trash
648:18 - that's our last chore let's add another
648:20 - line of
648:23 - code after displaying you take out the
648:25 - trash let's
648:29 - console.log you finish
648:32 - all the
648:36 - chores you walk the dog you clean the
648:39 - kitchen you take out the trash you
648:41 - finished all the
648:43 - chores by Method chaining then methods
648:45 - it's a lot easier to write than nesting
648:47 - call backs now sometimes with
648:50 - asynchronous functions depending on the
648:51 - task the task May Fail let's say we're
648:54 - trying to locate a resource a file if we
648:57 - can't locate that file and we're using
648:59 - promises we don't want to resolve that
649:01 - promise
649:02 - because we couldn't locate that file
649:04 - instead we want to reject that's what
649:06 - happens when an asynchronous function
649:07 - fails to do something when inside a
649:09 - promise so let's change our functions
649:11 - around within set timeout let's create a
649:15 - variable const dog walked did we
649:19 - accomplish this this will be true or
649:22 - false we'll use an if statement if dog
649:26 - walked then we will resolve it if we
649:29 - walked the dog
649:33 - else we will
649:35 - reject we'll pass in a different
649:37 - value you didn't walk the
649:42 - dog okay let's do this with the other
649:46 - functions let's create a constant of
649:50 - kitchen cleaned equals
649:55 - true if our kitchen is cleaned if that
649:58 - is true we will resolve this promise
650:03 - you clean the
650:05 - kitchen else let's reject pass along
650:08 - this
650:09 - message you
650:12 - didn't clean the
650:15 - kitchen and lastly take out
650:20 - trash const trash taken out let's set
650:26 - that to be
650:28 - true if the trash is taken out
650:32 - resolve the
650:37 - promise else we will
650:42 - reject you
650:44 - didn't take out the
650:47 - trash if a promise might reject there's
650:51 - one more method we need to add to the
650:53 - end of this chain we need to add a catch
650:56 - method to catch any
650:57 - errors this will catch any Rejects this
651:01 - is similar to error handling we'll be
651:04 - provided with one value an error Arrow
651:07 - do this let's
651:09 - console.log or even console.
651:13 - error the message provided to us with
651:15 - reject that's what the error is going to
651:18 - be we'll successfully walk the dog that
651:21 - will be true and cleaning the kitchen
651:24 - will be true but taking the trash out
651:26 - will be false we weren't able to
651:29 - complete this chore these are the
651:30 - results
651:33 - you walk the
651:35 - dog you clean the kitchen you didn't
651:37 - take out the trash how dare you we'll
651:40 - keep on completing these tasks until we
651:42 - fail at one of
651:43 - them so if walking the dog was false
651:47 - that was our first
651:51 - task this first promise was rejected we
651:54 - don't even attempt to resolve these
651:56 - other promises all right everybody so
651:59 - those are promises they're an object
652:01 - that manages asynchronous operations you
652:03 - can wrap a promise object around some
652:05 - asynchronous code these promise objects
652:08 - promise to return a value they will be
652:10 - pending until they complete then they'll
652:12 - either be resolved if that task
652:14 - completed successfully or rejected if it
652:17 - failed for some reason and well
652:19 - everybody those are promises in
652:23 - JavaScript hey everybody so today I got
652:26 - to talk about a sync and a weight in
652:28 - JavaScript a sync and a waight are two
652:30 - keywords by using these two keywords
652:32 - together they allow you to write
652:34 - asynchronous code in a synchronous
652:36 - manner a sync makes a function return a
652:39 - promise a wait makes an async function
652:42 - wait for a promise we'll discuss async
652:44 - first in this sample program from the
652:46 - last topic we have some chores to do we
652:49 - have to walk the dog clean the kitchen
652:51 - and take out the trash each of these
652:53 - functions returns a promise a promise
652:55 - that can either resolve or reject based
652:58 - on the code that's written if the dog is
653:00 - walked if if that's true resolve if it's
653:03 - false reject a function can be declared
653:06 - with a sync a function declared with a
653:08 - sync will return a promise however that
653:11 - promise that's returned doesn't resolve
653:13 - or reject in a way you could say it's an
653:16 - empty promise if I were to run this code
653:18 - this is what
653:21 - happens uncaught reference error resolve
653:24 - is not defined if an asynchronous
653:26 - function returns a promise that either
653:28 - needs to resolve or reject adding a sync
653:31 - to it really doesn't benefit us a sync
653:34 - works together with a weight by using
653:36 - these two keywords together when calling
653:38 - all of these asynchronous functions in
653:40 - order we don't need to Method chain then
653:42 - statements there's a more synchronous
653:44 - manner in which we can write the same
653:46 - code but we'll need to contain it all
653:48 - within an async function async function
653:52 - we'll create a function to do
653:55 - chores then we will need to call this
653:58 - function somewhere let's do so right
654:00 - here
654:02 - first we need to walk the dog walk the
654:04 - dog returns a
654:06 - promise that's where the await keyword
654:08 - comes in a wait makes an async function
654:11 - wait for a promise before continuing
654:14 - we're going to create a constant of walk
654:17 - dog result equals use the await
654:22 - keyword await walk
654:25 - dog then we will
654:29 - console.log the walk dog
654:32 - result you walk the dog now let's do
654:35 - this with clean kitchen we're going to
654:37 - be writing this code in a synchronous
654:39 - manner line by line
654:42 - linearly we will create a constant for
654:44 - clean kitchen result equals await the
654:48 - next promise await clean
654:51 - kitchen then
654:54 - console.log clean kitchen result let me
654:57 - close
654:59 - this you walk the dog
655:02 - you clean the
655:03 - kitchen and last we have take out
655:06 - trash const takeout trash result equals
655:11 - a wait take out the
655:14 - trash then
655:17 - console.log the
655:20 - result you walk the
655:23 - dog you clean the kitchen you take out
655:25 - the trash let's add one more line when
655:27 - we finish everything one more line of
655:29 - code you you finished all the chores you
655:34 - walk the dog you clean the kitchen you
655:37 - take out the trash you finished all the
655:39 - chores let me show you what happens if
655:41 - we attempt to use a weight within a
655:43 - function not declared with a
655:45 - sync uncaught syntax error a weight is
655:49 - only valid in async functions that's why
655:52 - a weight depends on async a weight makes
655:54 - an async function wait for a promise
655:57 - before continuing now if your promises
656:00 - can reject let's say that dog walked is
656:07 - false uncaught in promise you didn't
656:10 - walk the dog we'll surround all of this
656:13 - code within a tri block then catch any
656:22 - errors catch one parameter of
656:26 - error we can
656:29 - console.log or console .
656:32 - error the
656:34 - error you didn't walk the
656:36 - dog all right everybody so that is a
656:39 - sync and a wait a sync makes a function
656:42 - return a promise a wait makes an async
656:45 - function wait for a promise by using
656:48 - these two keywords together we can write
656:51 - asynchronous code in a synchronous
656:54 - Manner and well everybody that is a sync
656:57 - and a wait in
656:59 - JavaScript what's up everybody so today
657:02 - I got to talk about Json files using
657:05 - JavaScript Json means JavaScript object
657:08 - notation it's a data interchange format
657:11 - most of the time it's used for
657:13 - exchanging data between a server and a
657:15 - web application they can have a few
657:17 - different formats usually you'll see a
657:19 - Json file as an object an object made up
657:23 - of key value pairs or you may see them
657:26 - as an array an array of values or some
657:28 - combination of both you can have an
657:30 - object where one of the values is an
657:32 - array and or you could have an array of
657:35 - objects like this just to understand the
657:38 - format we'll create a new Json file
657:41 - let's go to our website folder create a
657:43 - new file we'll create an array of names
657:46 - the file extension is
657:48 - Json we'll Begin by writing an array
657:51 - with a set of straight brackets let's
657:53 - add a few names just some first names
657:56 - SpongeBob
657:59 - Patrick Squidward
658:03 - Sandy this is a valid Json format let's
658:07 - create a new Json file just for a single
658:09 - person this will be an object new file
658:13 - person.
658:16 - Json this time we will create a single
658:19 - object this object will have key value
658:21 - pairs we will have a name key and a
658:25 - value of
658:28 - SpongeBob each key value pair is going
658:31 - to be comma separated SpongeBob will
658:34 - have an age
658:35 - key of
658:38 - 30 and a Boolean of is employed is
658:42 - SpongeBob currently employed that will
658:45 - be
658:45 - true this is also a valid format our
658:48 - Json file contains one object an object
658:52 - made up of key value pairs objects can
658:54 - even have arrays as one of their values
658:57 - we will create an array of
658:59 - hobbies what what does SpongeBob like to
659:01 - do this will be an
659:03 - array
659:07 - jellyfishing
659:09 - karate and
659:11 - cooking let's create one more Json
659:15 - file we will create a Json file for
659:17 - people this will be an array of objects
659:20 - people.
659:22 - Json we're going to create an array of
659:24 - objects within this array we'll create
659:27 - one
659:27 - object what key value pairs should this
659:30 - object have we'll just reuse what we
659:32 - have for SpongeBob excluding the array
659:34 - to keep it
659:37 - simple okay that will be the first
659:39 - object let's create another object we
659:42 - need another set of curly
659:44 - braces the second object will have a
659:46 - name property of Patrick age 34 is
659:50 - employed will be
659:52 - false the next object this will be for
659:57 - Squidward age
659:59 - 50 is a employed true he works at the
660:02 - Crusty
660:03 - Crab one last object name Sandy age
660:09 - 27 is employed false Sandy is
660:13 - self-employed all right we have an array
660:15 - of objects each object can have its own
660:18 - unique key value pairs so let's close
660:21 - out of these Json files but we'll hold
660:23 - on to
660:24 - them so Json formats they're one long
660:27 - string to represent that object or array
660:30 - using the stringify method of Json we
660:33 - can convert a JavaScript object or an
660:35 - array into a Json string so let's copy
660:39 - what we have for
660:41 - names I will create a constant of names
660:45 - equals that array we'll convert it to a
660:49 - Json
660:50 - string const Json string equals access
660:56 - Json Json is a built-in object that's
660:59 - provided to us to work with Json files
661:02 - we will use the stringify method then
661:05 - pass in our array or our
661:07 - object currently if I were to
661:10 - console.log my names before stringifying
661:12 - it here's the
661:14 - result we have an array of strings to
661:16 - work with after using the stringify
661:19 - method on names we'll be given one long
661:22 - string to represent this array if I was
661:25 - to use this on an object let's copy what
661:27 - we have for person
661:32 - I will create a const of person this
661:35 - will be an object I'll just paste what I
661:37 - have for SpongeBob first let's
661:40 - console.log person here's my person
661:44 - object then let's stringify it and
661:47 - display the Json
661:48 - string Json files work with one long
661:51 - string that represents an object or an
661:54 - array let's stringify our people it's an
661:58 - array of objects
662:03 - const people equals paste what we have
662:07 - let me show you what happens when I
662:09 - console.log people before stringifying
662:12 - it we have an array of
662:15 - objects each object has its own key
662:18 - value
662:19 - pairs then if I was to stringify it
662:22 - here's the
662:25 - result one extremely long
662:28 - string now we'll use parse parse
662:31 - converts a Json string to a JavaScript
662:33 - object so let me reformat
662:44 - these to convert these objects or arrays
662:46 - into a string we can surround them with
662:48 - a pair of back
662:58 - ticks so let's rename these let's say
663:03 - Json
663:05 - names Json
663:08 - person then Json
663:15 - people these objects and arrays are all
663:17 - in a Json format to convert them to
663:20 - their original form we can use the parse
663:22 - method of Json I will create a constant
663:26 - of par data equals Json
663:32 - parse pass in our data of Json
663:37 - names and then let's
663:39 - console.log let me show you Json names
663:41 - first before parsing it we have a string
663:44 - representation of an array but after
663:46 - parsing it it becomes a JavaScript array
663:50 - let's do this with our string
663:51 - representation of an object Json person
663:55 - normally it looks like this and then
663:57 - after parsing it we have a JavaScript
663:59 - object
664:01 - and then Json people it's an array of
664:03 - objects then we'll parse
664:06 - it and here's the result an array of
664:10 - objects now I'm going to show you how we
664:12 - can fetch a Json file we'll talk about
664:15 - fetch more in the next topic fetch is a
664:18 - function as an argument we can pass in a
664:20 - relative or absolute file path or a URL
664:24 - we'll discuss that in the next
664:25 - topic I would like to get my Json file
664:28 - of let's go with
664:31 - person so I will list the relative file
664:34 - path these files are right next to each
664:36 - other I just need to type person. Json
664:40 - fetch returns a promise we will follow
664:43 - this with the then method then do this
664:47 - we'll be provided with a response
664:50 - object take our response Arrow do this
664:54 - we will take our response object convert
664:57 - it to a Json format using the Json
664:59 - method then let's display what we have
665:02 - currently then take the value arrow
665:07 - console.log that
665:09 - value let's see what we have yep there's
665:13 - SpongeBob we have successfully fetched a
665:16 - Json file let's do this with our array
665:19 - of
665:20 - names we have an array of strings of
665:23 - first names and people people.
665:27 - Json we have an array of objects
665:31 - one object for each
665:33 - person if you would like to iterate
665:35 - through all the objects let's rename
665:37 - value as values we'll use the built-in
665:40 - for each method of arrays values. for
665:45 - each take each value Arrow do this
665:50 - console.log each
665:53 - value now we're iterating through and
665:56 - printing each object if you would like
665:58 - some of the specific properties like
666:00 - make name follow the value with name
666:04 - SpongeBob Patrick Squidward Sandy or
666:08 - age or is
666:12 - employed oh and another thing that I'm
666:14 - forgetting be sure to add a catch method
666:16 - to catch any errors just in case we
666:18 - can't fetch this Json file for some
666:21 - reason console.log or console. error the
666:26 - error
666:27 - message we'll talk about fetch more in
666:30 - the next topic all right everybody so
666:32 - those are Json files Json means
666:34 - JavaScript object notation it's a data
666:37 - interchange format it's mostly used for
666:39 - exchanging data between a server and a
666:42 - web application Json files are usually
666:44 - objects or an array or some combination
666:47 - of both to convert a Json object to a
666:49 - string you can use the stringify method
666:51 - to convert a Json string to an object
666:54 - you can use the parse method to fetch a
666:56 - Json file you can use the fetch function
666:58 - which we'll talk about next and get more
667:00 - in depth with and well everybody those
667:02 - are Json files using
667:06 - JavaScript well it's going on everybody
667:08 - so in today's video I'm going to show
667:10 - you how we can fetch data from an API
667:12 - using JavaScript and at the end of this
667:14 - video we're going to create a project
667:15 - where we can fetch some images of
667:17 - Pokémon depending on what Pokemon you
667:19 - type in so sit back relax and enjoy the
667:22 - show all right people so we got to talk
667:24 - about fetch fetch in JavaScript is a
667:26 - function it's used for making HTTP
667:29 - requests to fetch resources including
667:32 - but not limited to Json styled data
667:35 - images files resources of that nature
667:38 - the fetch function simplifies
667:40 - asynchronous data fetching it's used for
667:42 - interacting with apis to retrieve and
667:45 - send data asynchronously over the web
667:48 - fetch has two arguments a URL of the
667:52 - resource and an object an object of
667:54 - options I won't be talking about options
667:57 - in this video that's more advanced
667:58 - JavaScript one of what you may see is a
668:01 - method property the default is get to
668:04 - get a resource you can use post to send
668:07 - some data put to replace some data and
668:10 - delete to delete some data so the
668:13 - default is get but we don't need to
668:15 - explicitly state that we'll just be
668:18 - focusing on getting data with only a URL
668:21 - to fetch something we have to use the
668:23 - fetch function and pass in a URL what I
668:26 - thought we could do for this video is
668:28 - fetch some Pokemon data from the Pokémon
668:30 - API if you want to follow along you can
668:32 - go to this URL I would like to fetch
668:35 - some data on
668:37 - Pikachu because everybody knows about
668:41 - Pikachu and here's some of the data on
668:43 - Pikachu this resource is one gigantic
668:47 - object Pikachu has a name an ID number a
668:52 - type Pikachu's an electric type there's
668:54 - stats such as his attack power HP
668:58 - there's even image Sprite which we'll
669:00 - work with later we will copy this
669:04 - URL and paste it within the fetch
669:06 - function we will pass in a string
669:08 - representation of this URL the fetch
669:11 - function is promise-based it's either
669:13 - going to resolve or reject so we should
669:16 - add a
669:17 - then and a catch method to catch any
669:20 - errors error Arrow do this let's console
669:25 - the error if there's an error once the
669:29 - promise resolves will be provided with
669:31 - an object a response object take our
669:34 - response object Arrow do this for the
669:38 - time being let's
669:40 - console.log our response just to see
669:43 - what it is
669:45 - exactly so here's our response
669:49 - object the body contains the data we're
669:51 - looking for for Pikachu this response
669:55 - object has a status code of 200 that
669:58 - means it's okay here's where you may see
670:00 - that status code of 404 if you can't
670:02 - locate a resource it has an okay
670:05 - property if fetching this resource was
670:07 - okay this is going to be true if not
670:09 - it's false there's also a URL here too
670:12 - now our next step is to convert it to a
670:14 - readable format there's a few different
670:16 - methods there's array buffer blob text
670:21 - and Json these are all methods we're
670:24 - interested in the Json method in this
670:26 - example so our next step is to take our
670:29 - response object convert it to Json using
670:32 - the Json
670:33 - method this is also promise based once
670:37 - this promise resolves let's follow this
670:39 - with a then method then take the data
670:42 - our Json data that's going to be
670:44 - returned to
670:45 - us Arrow do this let's console.log my
670:49 - data just to see what it is so after
670:52 - fetching data on Pikachu convert the
670:55 - response object to a Json
670:58 - format and here's my data for Pikachu we
671:02 - have a name an ID Pikachu stats such as
671:06 - his HP and attack and wait and many more
671:10 - things with this Json data you can
671:13 - access one of the properties I would
671:15 - like just Pikachu's name data. name
671:18 - Pikachu data dot weight how much does
671:23 - Pikachu way 60 60 units of something
671:27 - whatever unit of measurement they use in
671:29 - Anto what is Pikachu's ID 25 near the
671:33 - end of this video we're going to fetch
671:34 - the Sprites of the Pokémon now for some
671:37 - reason if we try and access a Pokemon
671:38 - that doesn't exist as of the filming of
671:41 - this video SpongeBob is still not a
671:46 - Pokemon we get a status code of 404
671:50 - meaning we could not find this resource
671:52 - SpongeBob is not a Pokemon unfortunately
671:55 - so even if we can't locate a resource
671:57 - our promise is still going to resolve
671:59 - it's not going to reject we need to
672:01 - check to see if our response is not okay
672:04 - let me demonstrate I will console.log my
672:07 - response
672:09 - object here's my response object it is
672:12 - not okay your response will be okay if
672:15 - the status is within the 200 range since
672:17 - we have a status of 404 we couldn't
672:19 - locate this resource okay is false we're
672:22 - going to throw an error if our property
672:25 - of okay is false within our first then
672:28 - method we'll write a few statements we
672:30 - need a set of angle brackets before
672:34 - continuing let's check to see if our
672:38 - response access the okay property then
672:41 - use the not logical operator if our
672:44 - response is not okay if it's false we're
672:48 - going to throw a new
672:51 - error and then catch it using the catch
672:53 - method we can write a custom message
672:56 - let's say something like could not fetch
673:01 - resource if our resource is okay we
673:04 - won't execute this code otherwise we
673:07 - will return our response object in a
673:12 - Json
673:13 - format let's try and retrieve Pokemon
673:15 - data on
673:17 - SpongeBob okay we have an error but we
673:19 - have caught this error using the catch
673:21 - method error could not fetch resource
673:25 - then let's get data on Pikachu
673:27 - again and there Pikachu and his ID
673:34 - number if you would prefer to use a sync
673:36 - and a weight here's how let's delete all
673:40 - this we will create an async function so
673:44 - that we can use a weight within it I
673:46 - will declare a function to fetch data no
673:50 - parameters do all
673:52 - this we will create a try and catch
673:56 - block try and catch
674:00 - catch has one parameter an error if we
674:04 - receive an error let's console. error
674:07 - the
674:09 - error within our Tri block we will
674:12 - create a constant of
674:14 - response the fetch function is going to
674:17 - return an object a response object we
674:20 - will
674:21 - await our promise that's returned by
674:24 - fetch then we need to get that URL
674:27 - again let's get data on a different
674:30 - Pokémon another Pokemon that I like is
674:34 - tyion honestly I think tyion is my
674:36 - favorite
674:38 - Pokemon all right here's the stats for
674:41 - tyion I'm going to copy this
674:44 - URL pass it to the fetch function as a
674:48 - string once the promise for fetch
674:51 - resolves we have to see if the response
674:53 - is okay we'll use an if
674:57 - statement if our response
675:00 - object is the okay property not okay if
675:05 - our response is not okay if we can't
675:08 - locate this
675:10 - resource then we will throw a new
675:14 - error let's say could not fetch
675:19 - resource if our response is okay we will
675:22 - create a constant for our
675:25 - data equals await take our response and
675:29 - convert it to
675:30 - Json this also returns a promise that's
675:33 - why we're using a wait then we will
675:37 - console.log our
675:40 - data and then we have to call the fetch
675:42 - data function because I forgot to do
675:44 - that call fetch
675:47 - data and here's the stats for tyion Name
675:53 - tyion ID 157 tyion is a fire
675:58 - type that's how to use a sync and a
676:00 - weight to fetch a
676:02 - resource now that we know what we're
676:04 - doing we're going to create a text box
676:06 - and a button to search a Pokemon and
676:08 - pull up a Sprite of that Pokemon and
676:10 - display it so going to our HTML file we
676:15 - will create an input
676:16 - element with the type attribute of text
676:20 - because it's a text
676:22 - box I will set the ID of this input
676:25 - element to be Pokemon name
676:29 - it's a little small right now we haven't
676:31 - applied any
676:33 - CSS I will add a
676:35 - placeholder of enter Pokemon
676:40 - name then we need a button I will create
676:43 - a button
676:44 - element with text of
676:47 - fetch
676:49 - Pokemon I will set the onclick event
676:52 - handler equal to a JavaScript function
676:56 - let's call that function a fetch data
677:02 - then I will add a
677:04 - break after fetching some Pokemon data
677:07 - we have an image to work with I will set
677:10 - the source currently to be an empty
677:12 - string I will display some alternative
677:14 - text if we can't display the image of
677:18 - Pokemon
677:20 - Sprite and I will give this element an
677:23 - ID of Pokemon
677:27 - Sprite to not display the image
677:29 - currently we can access the style access
677:33 - the display property and set it to be
677:36 - none then if we do want to display it we
677:39 - can set display to be a block let's go
677:41 - to our Javascript
677:43 - file within our Tri block we will create
677:47 - a constant of Pokemon name
677:51 - equals
677:53 - document. getet element by ID the ID
677:58 - that I'm selecting
678:00 - is Pokemon
678:02 - name access the value of this input
678:06 - element now if somebody types an
678:08 - uppercase
678:10 - characters I'll take the value make all
678:13 - the letters lowercase I will method
678:15 - chain the two lowercase method two
678:20 - lowercase
678:25 - method with our fetch function we're
678:28 - going to use a template string with a
678:30 - pair of back ticks for the Pokémon's
678:33 - name we will use a placeholder and pass
678:36 - in our Pokemon name
678:39 - variable so now when I type in a
678:41 - Pokemon's name like
678:44 - Bulbasaur we should get data on that
678:46 - Pokemon if it exists so let's go to
678:49 - inspect console and here's data on
678:53 - Bulbasaur Bulbasaur's ID is
678:56 - one Bulbasaur is a grass type
679:00 - and I think he's a poison type too if
679:01 - I'm not
679:03 - mistaken this Json data also has Sprites
679:06 - images of each Pokemon we're going to
679:09 - fetch the front
679:11 - default so we don't need console.log
679:15 - anymore we'll create a
679:17 - constant of Pokemon Sprite to get that
679:21 - image equals take our
679:24 - data access the Sprites
679:27 - property get the front default
679:33 - Sprite then we will get our image
679:35 - element this one that has an ID of
679:37 - Pokemon
679:39 - Sprite const image
679:42 - element equals document. getet element
679:47 - by ID the ID that I'm getting is Pokemon
679:53 - Sprite we will change the CSS of this
679:56 - element take our image element
680:00 - access its source attribute right now
680:02 - it's currently empty our source is an
680:04 - empty
680:05 - string set the source equal to our
680:09 - Pokemon Sprite this is a
680:11 - constant then we will take our image
680:15 - element access the style attribute
680:18 - access the display
680:19 - property and set it equal to be a block
680:23 - because right now it's
680:25 - none now when I type in a Pokémon's name
680:28 - like Charizard and fetch that Pokémon we
680:32 - get the image of that Pokémon it is a
680:34 - little small however it is a
680:37 - Sprite Sprites tend to be very
680:40 - small or we can get
680:43 - meww or whatever other Pokemon you can
680:45 - think of I think there's like over a
680:47 - thousand Now where's
680:50 - tyion there's tyion all right everybody
680:54 - so that is how to fetch data from an API
680:56 - you got to use the fetch function it's
680:58 - is used for making HTTP requests to
681:01 - fetch resources you can fetch Json style
681:04 - data images files the fetch function
681:07 - simplifies asynchronous data fetching
681:09 - it's used for interacting with apis to
681:12 - retrieve and send data asynchronously
681:14 - over the web and well everybody that is
681:16 - how to fetch data from an API using
681:21 - JavaScript hey everybody so in today's
681:23 - video we're going to create a weather
681:25 - app that fetches data from an API you
681:27 - can look up any didn't get the weather
681:29 - if that sounds good to you then sit back
681:31 - relax and enjoy the show if you would
681:34 - like to follow along you will need your
681:36 - own API key the API that we'll be using
681:39 - is openweathermap.org you do need to
681:42 - sign up for an account though it is free
681:44 - to sign up for an account you can go to
681:46 - sign in if you're currently not
681:48 - registered you can create an account for
681:51 - free once you're signed in you'll need
681:54 - an API key go to my API Keys it may take
681:58 - you some time to get an API key
682:00 - generated for you mine took about 15
682:02 - minutes and once you get it make sure
682:05 - it's active we will need that API key
682:08 - about 20 minutes into this topic
682:10 - hopefully for you by then it'll be
682:13 - generated okay let's do this everybody
682:15 - we will Begin by creating a form element
682:18 - the form element will have a
682:20 - class of weather form our form element
682:24 - is going to have an input element and a
682:26 - button within this input element we'll
682:29 - type in the name of the city we would
682:30 - like to retrieve the weather data
682:32 - 4 so the type of this input element is
682:35 - going to be text for some
682:38 - text the class will be City input so a
682:43 - user can type in the city and we'll add
682:45 - a placeholder let me zoom in a little so
682:47 - you can see
682:48 - it the placeholder will
682:51 - equal enter
682:54 - City then we'll need a button let's
682:57 - create a button element with text of get
683:02 - weather the type of this button will be
683:06 - submit it's the submit button for our
683:09 - form after retrieving the weather data
683:12 - we'll display the weather data in a card
683:14 - format like a Pokemon or Yu-Gi-Oh card
683:18 - so we will create a div
683:20 - elopement with a class of
683:23 - card but before applying some CSS we
683:26 - should at least add some placeholder
683:28 - elements so we can style them and see
683:30 - the changes for the time being let's
683:33 - create an H1 element we will be deleting
683:35 - these elements later so don't get too
683:37 - attached I will set the class of this
683:39 - element to be City
683:43 - display We'll add a sample City let's
683:46 - say Miami or pick a city if you're
683:48 - choosing then I will create a paragraph
683:51 - element the class will be temp display
683:54 - meaning temperature let's say the
683:57 - temperature is 90° fah or pick something
684:00 - in celsius if you're on Windows to add a
684:02 - degree symbol you can hold alt then type
684:05 - 0176 Miami is going to be 90°
684:09 - F then we'll create a paragraph element
684:12 - for the
684:13 - humidity class
684:16 - equals
684:17 - humidity
684:20 - display for the text let's say humidity
684:24 - colon space then a percentage
684:27 - 75%
684:28 - then we need a description of the
684:30 - weather this will be another paragraph
684:32 - element the class will equal description
684:36 - display desk meaning description for the
684:40 - description let's say clear
684:42 - skies I'll also display an emoji
684:45 - depending on what the weather
684:47 - is the class will be weather
684:54 - Emoji I'll use a
684:57 - sun
684:59 - for some reason if we can't display the
685:00 - weather data such as if we can't locate
685:02 - a city let's add the following
685:05 - paragraph the class of this element will
685:07 - be error
685:11 - display We'll add the text of please
685:16 - enter a
685:18 - city that is all the HTML that we need
685:20 - for now we're going to apply some CSS
685:22 - styling next so now let's head to our
685:25 - CSS stylesheet we are going to select
685:27 - the body of
685:28 - document select a font family I will
685:31 - pick Ariel with a backup of s
685:35 - serif I'll change the background color
685:38 - of the body background color pick a
685:41 - color I'm going to use hsl
685:44 - values I will set the lightness to be
685:48 - 95% so it's a light gray color I will
685:51 - set all margin around the body to be
685:55 - zero then I'll use flexbox to display
685:57 - the element elements display
686:00 - Flex the flex direction will be a column
686:03 - to arrange all the elements in a
686:07 - column then align item Center to
686:11 - horizontally align all the elements
686:13 - align item center now we'll select the
686:16 - class of weather form that'll be this
686:20 - form that has an input element and a
686:22 - button all we'll do is add a little bit
686:24 - of margin around the entire form 20
686:27 - pixels
686:29 - then we'll select our city input that's
686:31 - going to be the text
686:33 - box class of City
686:36 - input I will add some
686:38 - padding of 10
686:41 - pixels let me zoom out to
686:45 - 100% increase the font
686:47 - size to 2
686:51 - RM set the font weight to be
686:56 - bold I'll add a border
686:59 - two pixel
687:01 - solid and pick a
687:08 - color but all lower the alpha so it's
687:11 - transparent to
687:14 - 30% there's our border
687:17 - currently border radius around the
687:20 - corners let's do 10
687:23 - pixels add some margin of 10 pixels
687:28 - that'll separate this element from the
687:30 - button and set a width of 300
687:34 - pixels okay let's style the button next
687:38 - okay we are going to select all buttons
687:40 - that have an attribute where the type
687:43 - equals
687:46 - submit so that's going to be for our
687:48 - submit button that says get weather let
687:51 - me scroll down okay I'm going to add
687:54 - some padding around the
687:55 - button 10 pixels by 20
687:59 - pixels I'll set the font weight to be
688:04 - bold I'll increase the font
688:07 - size to be to
688:10 - R pick a background color for the button
688:13 - I'll pick something
688:17 - green but I'll use hsl
688:22 - values I've already pre-picked a color
688:25 - let's go with
688:26 - 122 the
688:29 - 39% and
688:31 - 50% that's a good shade of
688:34 - green I will set the color to be white
688:37 - for the font
688:39 - color remove the border border
688:44 - none and Border radius 5 pixels to round
688:47 - the
688:49 - corners then when we hover our cursor
688:52 - over the button I would like it to be a
688:55 - pointer and that does work when we hover
688:58 - a cursor over the button we'll use the
689:00 - hover Pudo class to change the
689:02 - background color so let's take our
689:04 - button for the type attribute is
689:06 - submit access the hover sudo class take
689:10 - our background color make it a little
689:12 - bit darker I'll bring down the lightness
689:14 - by 10% so it's at 40% so that does in
689:18 - fact
689:19 - work okay then we're going to select our
689:21 - card class that contains all the weather
689:24 - data so we will select the class of
689:29 - card for the background we're going to
689:31 - do something a little bit different
689:33 - we're going to use a linear gradient
689:35 - instead of selecting the background
689:36 - color we will select the
689:39 - background I will use the linear
689:42 - gradient
689:44 - function there's three arguments think
689:46 - of a linear gradient as a slow
689:49 - transition between two colors we need an
689:51 - angle in degrees we'll say 180° for now
689:56 - then a color let's pick something
690:00 - blue and
690:02 - orange I'm going to pick some colors
690:04 - that look a little bit
690:07 - better so for blue let's set the Hue to
690:10 - be
690:12 - 210 100% for the saturation and the
690:15 - lightness will be
690:17 - 75% that's a good shade of blue and for
690:20 - orange we'll use another hsl
690:25 - value for the Hue I'll say
690:28 - 40% the saturation will be
690:31 - 100% And The lightness will be
690:34 - 75% so I'm hoping with this linear
690:36 - gradient the background color looks kind
690:38 - of like a sunrise or a sunset once we
690:41 - have our background I will add some
690:43 - padding of 50
690:45 - pixels I'll add a box Shadow to this
690:47 - card we'll add a vertical and horizontal
690:50 - offset of two pixels each and a blur
690:53 - effect where the radius is 5
690:55 - pixels then we'll pick a color
691:00 - I'm just going to lower the alpha to
691:05 - 50% not
691:06 - bad this gives our card a 3D pop
691:10 - effect I will set a minimum width of
691:12 - this card to be 300
691:15 - pixels then we have to align everything
691:18 - within it I'll use flex box because I
691:20 - like Flex box display
691:23 - Flex Flex direction will be a
691:26 - column
691:30 - and align items Center to horizontally
691:35 - align the
691:37 - items there we go then we'll select all
691:40 - H1 elements that's going to be our city
691:42 - name select all H1
691:46 - elements increase the font
691:49 - size to be 3.5
691:53 - RM I'll remove any margin from the top
691:57 - margin top will be
691:59 - zero and add margin to the
692:02 - bottom of 25
692:05 - pixels then we'll select all
692:08 - paragraphs that's going to be everything
692:10 - underneath our
692:12 - city select all
692:15 - paragraphs increase the font size to 1.5
692:19 - RM there's a lot of natural margin
692:22 - between the
692:23 - paragraphs let's set all margin to be
692:25 - zero to see what it looks like okay
692:28 - let's add a little bit of margin five
692:30 - pixels on the top and bottom zero margin
692:33 - on the sides that's a lot better we'll
692:36 - select the city display and the
692:38 - temperature display we're going to be
692:40 - selecting two classes City
692:43 - display comma our temp
692:46 - display take these two classes apply the
692:49 - following properties you know what for
692:51 - our font size let's set that to be 3.5
692:55 - RM we can honestly remove that from
692:58 - H1 for the font weight I will set that
693:02 - to be bold for the color I'll make the
693:04 - color a little
693:06 - transparent I'll set the alpha down to
693:11 - 75% so that our city and our temperature
693:14 - they're both going to be
693:16 - transparent then I'll add some margin to
693:18 - the bottom margin
693:20 - bottom 25
693:22 - pixels okay let's select our humidity
693:25 - display class
693:28 - humidity display set the font weight to
693:33 - be bold and add some margin to the
693:38 - bottom of 25 pixels then we'll select
693:41 - our description
693:43 - display which we shortened to desk
693:47 - display for the font style I will set it
693:50 - to be
693:51 - italic and the font weight will be
693:55 - bold I'll increase the font
693:58 - size to 2
694:02 - RM then we'll select our weather Emoji
694:05 - so class weather Emoji remove all margin
694:10 - around the Emoji margin zero then we'll
694:13 - increase the font size of the
694:15 - Emoji the size will be 7.5 RM so it's
694:19 - kind of
694:20 - big then if for some reason we display
694:22 - an error we'll display this text so this
694:25 - class is error
694:29 - display I'll set the font size to be 2.5
694:34 - RM the font weight will be
694:38 - bold I'll set the color to be something
694:42 - transparent I'll lower the alpha to
694:48 - 75% okay that is all the CSS that we
694:50 - need let's go back to our HTML file we
694:54 - can delete everything within the card
694:56 - class
694:58 - we just wanted to see what it would look
694:59 - like with the elements populated with
695:02 - our card element I will set the style
695:04 - attribute to be take the display
695:07 - property set it to be none we don't want
695:10 - to display the card at all until we get
695:12 - the weather data until it's returned to
695:14 - us our HTML is done our CSS is done then
695:18 - we're ready to add some JavaScript
695:20 - functionality we'll declare our
695:21 - constants that we need const weather
695:25 - form equals
695:28 - document dot now since we're not working
695:31 - with IDs we can't get element by ID
695:34 - we're working with classes we can use
695:36 - Query selector or query selector all so
695:40 - I'm going to use Query selector this
695:43 - will return the first element in this
695:45 - class we only have one element with this
695:48 - class class weather form we'll store a
695:52 - reference to
695:53 - it const City in
695:57 - input equals
696:00 - document. query
696:03 - selector we are selecting the class of
696:07 - City input that's going to be this text
696:11 - box const card our card is what contains
696:15 - all the weather
696:17 - data
696:19 - document. query
696:22 - selector select the class of card and
696:26 - give me the first
696:29 - element now we'll need that API key
696:32 - const API key
696:36 - equals now here's my API key please
696:40 - don't try and use this one specifically
696:42 - I will be deactivating it at the end of
696:43 - this video hopefully by now you should
696:45 - have that API key given to you first
696:48 - we'll take our weather
696:49 - form We'll add an event
696:55 - listener this is our form
696:58 - the text element and the submit button
697:01 - when we click on this button the event
697:04 - type is going to be submit after we
697:06 - attempt to submit this form we'll do the
697:08 - following code we'll have one parameter
697:11 - an event that's going to be provided to
697:12 - us Arrow do this we'll fill this in
697:17 - later we'll declare our functions that
697:19 - we
697:19 - need we will need an async
697:22 - function to get weather data there will
697:27 - be one parameter a city that's going to
697:30 - be passed
697:32 - in then we'll need a function to
697:36 - display weather info there will be one
697:41 - parameter data the data will be in a
697:44 - Json like
697:46 - format we'll create a function to get
697:50 - weather
697:52 - Emoji based on what the weather is there
697:55 - will be one parameter a a weather
697:58 - ID then we'll create a function to
698:00 - display to the screen any errors if
698:03 - there are any function display
698:08 - error there will be one parameter a
698:10 - message a message to be displayed to the
698:13 - window within our event
698:16 - listener once we have a submit event
698:19 - once we click the button forms do have a
698:21 - default Behavior where they'll refresh
698:24 - the page we would like to prevent that
698:26 - so let's take our event use the prevent
698:30 - default method to prevent the default
698:33 - behavior for a form we don't want to
698:35 - refresh the page then we'll have to get
698:37 - the city the value within this text box
698:41 - const City equals take the city input
698:45 - access the value store it within this
698:48 - variable it should be a
698:50 - string we'll use an if statement if
698:54 - City if there's a value within here this
698:57 - this will be true we can use it within
698:58 - an if
698:59 - statement if there is a city do
699:04 - this else we'll call the display error
699:08 - function else we will display an
699:11 - error we will pass along the message to
699:15 - please enter a
699:18 - city let's fill in the display error
699:21 - function we want to be sure that it
699:23 - works before continuing the display
699:25 - error function is at the bottom
699:27 - will be provided with a message to
699:29 - display we will create a constant of
699:32 - error
699:34 - display equals document now we'll create
699:38 - an element create element we will create
699:41 - a
699:43 - paragraph then we'll need to change the
699:45 - text content of this element error
699:48 - display access the text
699:50 - content set it equal to be our
699:55 - message then we're going to add the
699:58 - class of error display we would like
700:01 - these CSS
700:03 - properties take our error display
700:05 - element access the class list then we
700:09 - will add a class we will add the CSS
700:12 - class of error
700:17 - display then we will take our card
700:19 - element which normally displays the
700:21 - weather data take our card reset the
700:24 - text content if there is something there
700:28 - we'll set it to be an empty string so
700:30 - normally with our card the display is
700:32 - set to none we'll set the display to be
700:35 - a block or even
700:38 - Flex access our card access the style
700:41 - access the display and I will set the
700:44 - display to be Flex to display
700:47 - it we will take our card we will append
700:52 - a child element append child we will
700:55 - append this par paragraph of error
700:58 - display to the card now if I were to not
701:01 - type in anything and just press get
701:03 - weather we get this error message please
701:06 - enter a
701:08 - city to our card I'm just going to round
701:10 - the corners to make it look better
701:12 - border radius let's do 10
701:16 - pixels that's better okay moving on if
701:21 - we do have a city if there's text within
701:23 - here we will try some code because it
701:27 - might cause some errors we will catch
701:29 - any errors that happen we have one
701:32 - parameter of error if there's an error
701:35 - we can console.log or console. error the
701:41 - error then let's call our display error
701:44 - function we'll pass along the error and
701:46 - display
701:47 - it now we need to get the weather data
701:50 - within our Tri block we will create a
701:51 - constant of weather data equals now we
701:57 - need to
701:59 - await get weather data function and pass
702:04 - in our city so with the weight we can
702:07 - only use a weight within an async
702:09 - function since we're within an arrow
702:11 - function we could declare this Arrow
702:13 - function as an a sync function so let's
702:16 - preedee our event parameter with a sync
702:19 - so that we can use a
702:21 - weight we're going to wait for this
702:23 - function to return the weather data once
702:26 - we receive our weather data we will call
702:29 - the display weather info function and
702:33 - pass along that data the weather
702:36 - data okay this function is complete once
702:39 - you've typed everything in I'm going to
702:41 - close this
702:43 - function and we can close our display
702:45 - error function
702:47 - too now once we want to get our weather
702:49 - data after we have a
702:51 - city now we actually need to fetch the
702:54 - weather data we'll have to create a URL
702:57 - we'll create a constant of API
703:00 - URL this is what we'll pass to the fetch
703:02 - function we will use a template string
703:06 - be sure to use a pair of back
703:08 - ticks we'll need to get the following
703:10 - URL at this web
703:12 - page we need to find the API call where
703:16 - we can pass in a city name we can copy
703:22 - this within our template string we'll
703:25 - paste it
703:27 - we'll replace the city name with the
703:30 - placeholder and use our city
703:34 - variable for the API key we'll use a
703:38 - placeholder pass in the API
703:44 - key this is what we'll pass to the fetch
703:47 - function we will create a response const
703:52 - response equals a weight we can use a
703:55 - weight because we're with within an
703:56 - async function we will
704:00 - fetch our API URL once we have a
704:04 - response let's check our
704:06 - response let's console.log our response
704:09 - just to see what it
704:11 - is okay I will type in the city of Miami
704:15 - get weather our data should be within
704:20 - console.log here's our
704:22 - response it has a status of 200 and it's
704:25 - okay we need to check to see if our
704:28 - response is not okay what if we couldn't
704:30 - retrieve the data I'll make up some
704:32 - gibberish
704:34 - City let's go to inspect
704:38 - console we have a response status 404
704:42 - the response is not okay we'll write an
704:45 - if
704:46 - statement if our
704:48 - response is not
704:51 - okay we will throw a new error and pass
704:56 - along the this
704:58 - message could not fetch weather
705:03 - data else if our response is okay we
705:07 - will return the
705:08 - response and we will
705:10 - await our response convert it to a Json
705:14 - format using the Json
705:16 - method so at the end of this function
705:19 - return an object that's in a Json like
705:22 - format this data is going to be returned
705:25 - to our event
705:27 - listener after we get our weather data
705:30 - we need to display it we'll work on the
705:32 - display weather info function next this
705:35 - one let's console.log the data we
705:43 - receive I will type in
705:46 - Miami so it looks like that
705:49 - worked we have a name of Miami for the
705:52 - city we have the weather which is an
705:55 - array it's an an array of objects we
705:58 - have coordinates clouds pretty much
706:00 - anything you can think of regarding the
706:02 - weather let's get the name within main
706:06 - there is temperature the temperature
706:08 - will be in kelvin we need to convert it
706:10 - I'll get the humidity within weather
706:12 - it's an array of objects we will get the
706:16 - description overcast clouds and this ID
706:20 - eventually we'll use the ID to return an
706:22 - emoji there's different weather codes
706:24 - I'll explain that later
706:27 - so we're going to use some object
706:29 - destructuring const use object
706:32 - destructuring with a set AC krly
706:34 - brackets we will access the name
706:37 - property and create a variable of city
706:41 - city will be Miami in this case then we
706:44 - will access main main is a property that
706:47 - contains an
706:48 - array take main use object destructuring
706:52 - again now we're within a nested object I
706:56 - would like the temp and the
707:01 - humidity then let's select our
707:05 - weather so whether it's an array of
707:09 - objects we'll have to use array
707:11 - destructuring followed by object
707:14 - destructuring give me the
707:19 - description and the
707:22 - ID we have to set this all equal to data
707:26 - to use
707:28 - destructuring and let me organize this
707:30 - to make it look
707:33 - nice our data is one gigantic object
707:37 - that has nested objects and nested
707:39 - arrays so after destructuring we'll have
707:41 - these variables the city the temperature
707:45 - the humidity a description of the
707:47 - weather and an ID for the weather code
707:50 - now we can use these like
707:51 - variables so with our card currently
707:54 - we're not displaying it now I would like
707:56 - to to display
707:57 - it we are going to take our card set the
708:01 - text content to be an empty string if
708:05 - there's already some text here we would
708:07 - like to reset it such as if there was an
708:09 - error
708:10 - message take our card access its style
708:15 - set the display property to be Flex for
708:19 - Flex
708:20 - box just to be sure that this is working
708:23 - I'm going to get the weather without
708:24 - entering a city after we do type in a
708:27 - city it should
708:29 - reset that's good that's what we wanted
708:31 - or if we make up some gibberish we have
708:34 - that error could not fetch weather data
708:36 - but then if we type in something
708:38 - legitimate and get the weather it'll
708:40 - reset that's what we would
708:42 - like okay now we have to create the
708:45 - elements the elements that we previously
708:48 - deleted from the div element we need to
708:50 - recreate those we will create a constant
708:54 - for City display
708:56 - to display the
708:58 - city document. create element our city
709:03 - display was an H1 element let's copy
709:06 - this line of code and paste it a few
709:09 - times four additional
709:11 - times we have City display temp display
709:15 - for the temperature that was a paragraph
709:18 - element humidity
709:21 - display humidity display that was also a
709:25 - paragraph element
709:27 - a description display which we shortened
709:30 - to desk desk
709:32 - display that was also a
709:35 - paragraph and a weather Emoji weather
709:39 - emoji and that was also a
709:42 - paragraph okay now we need to change the
709:44 - text content of each of these elements
709:46 - but they're empty so to say let's take
709:49 - the text content of our city
709:51 - display. text content
709:54 - property equals our city variable that
709:57 - we
709:58 - destructured okay let's see if that
710:00 - works I'll type in a city get weather oh
710:03 - and then we need to append
710:04 - it take our
710:07 - card append child we will append the
710:11 - city display element let's try that
710:13 - again type in Miami get the weather that
710:16 - should display
710:18 - Miami let's try Dallas
710:20 - Texas
710:23 - Dallas Oh and before displaying it we
710:26 - need to add the class list the CSS class
710:29 - for the city display after adding the
710:31 - text content we will take our city
710:33 - display access its class list add the
710:37 - class the CSS class of City display so
710:42 - then when we type in a city we should
710:45 - have that CSS styling all right now we
710:47 - have to add the temperature following
710:49 - the same
710:50 - format we will take our temp display
710:53 - access the text content
710:56 - equals I'll use a template string with a
710:59 - pair of back ticks I'll add a
711:01 - placeholder pass in our temperature add
711:04 - a degree symbol you can hold alt then
711:07 - type 0176 for a degree symbol now this
711:10 - is normally in kelvin actually I don't
711:12 - think Kelvin uses the degree symbol but
711:15 - we'll be changing that
711:16 - momentarily take our temperature
711:19 - display access its class list add the
711:23 - following class add the CSS class class
711:27 - of temp
711:29 - display then we have to append the
711:31 - element to the card element take our
711:33 - card we will append a child element of
711:37 - temperature
711:39 - display so now we should see the
711:41 - temperature but it's going to be in
711:44 - kelvin we have the city and the
711:46 - temperature for the temperature if you
711:48 - would like Celsius let's use deg
711:51 - CI you have to subtract from the
711:54 - temperature 200
712:01 - 17315 okay but now we should probably
712:03 - round it so let's enclose this equation
712:06 - with a set of parentheses follow this
712:08 - with the two fixed method of numbers to
712:11 - round it to one decimal
712:16 - place 15.6 de C if you would like a
712:20 - Fahrenheit temperature this is the
712:22 - formula take our temp in Kelvin minus
712:28 - 273.15 we will multiply this by 9 / 5
712:34 - plus
712:36 - 32 so let's enclose this all within a
712:38 - set of
712:42 - parentheses so now we should get that
712:44 - temperature but in Fahrenheit oh and
712:47 - then add F to the
712:49 - end 60° F then we'll get the humidity so
712:54 - take our humidity display element that
712:56 - we created access the text content set
713:01 - it equal to be a template string using a
713:04 - pair of back ticks let's add the word
713:08 - humidity coin space add a placeholder
713:12 - display our humidity
713:14 - variable We'll add the class list of
713:17 - humidity
713:18 - display humidity display access its
713:22 - class list add the following class of
713:26 - humidity
713:29 - display then we have to append the
713:31 - element to the card element card. append
713:35 - child append our humidity
713:39 - display so we should get the
713:42 - humidity Miami 60° fhe humidity 81 let's
713:47 - add
713:48 - percent
713:51 - 81% yep that does work then we'll add
713:54 - the description a description of the
713:56 - weather take the element of description
713:59 - display access the text content
714:04 - equals the
714:09 - description then add the CSS class to
714:11 - the class list for this element
714:13 - description display access the class
714:16 - list add the following
714:19 - class of description
714:23 - display then add the element card.
714:27 - append child we will append our
714:30 - description
714:32 - display let's type in Miami get the
714:36 - weather currently in Miami there's
714:38 - overcast clouds now we have to get an
714:40 - emoji based on the weather with our
714:42 - element of weather Emoji we will access
714:45 - the text content equals we will call the
714:49 - get weather Emoji function but we have
714:52 - to pass in a weather
714:54 - ID so we will pass in the ID
714:59 - variable that we receive from
715:02 - data once we get our weather
715:05 - Emoji we'll work on that momentarily
715:08 - we'll take our element of weather Emoji
715:11 - access the class list add the following
715:13 - CSS
715:15 - class of weather
715:19 - Emoji then append it to the card card.
715:23 - append child we will append our weather
715:29 - Emoji all right now before we canest it
715:31 - we need to fill in the get weather emoi
715:35 - function so with this open Weather AI
715:38 - there are different group codes so our
715:40 - weather ID is going to be either within
715:42 - the 200 range meaning a thunderstorm the
715:45 - 300 range means drizzle 500 is rain 600
715:49 - is snow 700 is atmosphere such as Mist
715:53 - smoke or even a tornado 800 exactly is a
715:57 - clear sky anything greater than 800
716:00 - means
716:01 - clouds so our weather ID is going to be
716:03 - one of these codes so we're going to use
716:06 - a
716:07 - switch we will examine the Boolean value
716:10 - of true does the value of true match one
716:14 - of these cases we'll have a case for
716:17 - group 200 if our weather ID that we pass
716:21 - in is greater than or equal to 200
716:26 - 00 and the weather
716:30 - ID is less than
716:35 - 300 that means there's a
716:37 - thunderstorm we will return an
716:41 - emoji a thunderstorm
716:43 - Emoji
716:47 - thunderstorm I don't like the look at
716:49 - that
716:50 - one that's
716:52 - better okay group 300 is a drizzle
716:56 - so let's copy this case because I don't
716:57 - feel like retyping
717:00 - it if our weather ID is greater than or
717:03 - equal to 300 and less than 400 that
717:07 - means we have a
717:09 - drizzle we'll just add an emoji of a
717:11 - raining
717:13 - Cloud so group 500 is also rain but it's
717:17 - a heavier
717:18 - rain so let's copy this case paste
717:23 - it if our weather is greater than or
717:26 - equal to
717:28 - 500 and less than 600 will return rain
717:31 - as well group 600 is
717:39 - snow if our weather ID is greater than
717:41 - or equal to 600 and less than
717:46 - 700 we will return a snowflake meaning
717:50 - snow then we have group
717:54 - 700
717:58 - if our weather ID is greater than or
718:00 - equal to
718:01 - 700 and less than
718:05 - 800 we'll return some fog
718:08 - Emoji 800 exactly means a clear sky we
718:12 - can display the
718:18 - sun if our weather ID is strictly equal
718:22 - to 800
718:24 - exactly
718:26 - we'll return a sun emoji anything within
718:28 - the 800 range means
718:36 - clouds so if our weather
718:40 - ID is greater than or equal to 801 800
718:44 - means clear
718:46 - sky so with this group code it only goes
718:49 - up to
718:51 - 809 if our weather ID is less than 810
718:56 - return a
718:59 - cloud then let's add a default in case
719:01 - we get a weird weather
719:05 - code
719:06 - default
719:09 - return I don't know a question
719:14 - mark we get some unknown weather
719:16 - phenomena UFOs or something I don't know
719:20 - okay and I think that should be
719:22 - everything let's close out of this close
719:25 - out of these
719:27 - functions and now if I were to type in
719:29 - Miami and get the weather in Miami it is
719:32 - 60.3 De F humidity 81% there's overcast
719:37 - clouds and we get a cloud Emoji because
719:39 - it's cloudy let's try
719:42 - Dallas we have a clear sky 45° fah
719:46 - humidity
719:47 - 63% clear sky and we get a sun emoji all
719:51 - right everybody so that is a weather app
719:53 - that you can make using Java JavaScript
719:55 - HTML and
719:58 - CSS