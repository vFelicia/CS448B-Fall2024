00:00 - what's going on everybody it's you bro
here and in this video I'm gonna teach
00:03 - you guys all about using arithmetic
operators in C++ let's get into it
00:10 - all right well in this video I'm going
to be discussing five of the basic
00:14 - arithmetic operators that you'll see in
C++ some rules regarding them and some
00:20 - cool tricks that you can use so just a
fair warning that this topic is somewhat
00:24 - dull and boring but I'm gonna try my
best to keep it fresh and interesting
00:27 - and if you can make it through this
lesson I would say that every lesson
00:31 - after this is going to be more
interesting so let's begin let's go over
00:35 - the five basic arithmetic operators
the first is addition and anytime you
00:41 - want to add something you just use the
plus symbol next we have subtraction and
00:47 - use a minus symbol I know I know we've
covered this in grade school you know
00:51 - many years ago but there's a few other
arithmetic operators that you should
00:56 - really be aware of first is
multiplication and do you remember back
01:01 - in math class where you would use X to
multiply something for example like 5
01:06 - times 5 is 25 and use X to multiply well
in programming we use the asterisk
01:11 - symbol so use this anytime you want to
multiply something next we have division
01:18 - and you use a forward slash anytime you
want to divide something and lastly we
01:24 - have this thing called a modulus and
it's a percent sign so the modulus is
01:30 - unique it basically what it does is that
if you divide two numbers you have it I
01:36 - believe it's called a dividend and a
divisor and to use the modulus between
01:42 - these two and instead of giving you the
quotient it gives you the remainder but
01:47 - don't fret right now if you don't quite
understand what a modulus is I'll give
01:50 - you an example of how it works and some
practical applications of us using one
01:54 - how about we go for an example of each
of these sounds good right all right
01:58 - let's get started alright so with
addition we can save something such as C
02:03 - out and then this is an example of us
using addition we can say 5 plus perhaps
02:09 - 2 then semicolon and this will just
display the number 7 we're using C out
02:15 - to display whatever the result is which
is 7 so I'm going to comment this out
02:21 - and then just write this as an example
and when we're finished with this I'll
02:25 - post this in the comments down below and
pin it to the top if you would like a
02:29 - copy for notes or something
alright so an example of us using
02:33 - subtraction see out then we need to use
the insertion operator then we could say
02:39 - 5 minus 2 and then just display the
result and the result is going to be
02:46 - obviously 3 so let's turn that into a
comment all right multiplication say C
02:54 - out and then we could say 5 times 2 so
remember we don't use X for
03:01 - multiplication we use the asterisk
symbol for multiplication and the result
03:06 - is going to be 10 so let's turn that
into a comment all right so division
03:17 - this is where it gets tricky
so see out how about 5 divided by 2 so
03:24 - the answer should be 2.5 right well that
is actually not the case the answer that
03:32 - we get is 2 and this is the reason why
it's this thing called integer division
03:37 - so if you divide by a whole integer or
something of the integer datatype it's
03:44 - not going to record that decimal portion
and it gets truncated so if we have 5
03:49 - divided by 2 the result is going to be
you know 2.5 obviously but it can't
03:56 - handle that decimal portion so it just
drops it or eliminates it and we're
04:00 - stuck with the result of 2 which is not
correct but you know the computer thinks
04:05 - it's correct so one trick that you can
do is that you can change this to a
04:10 - decimal value or a double value so if we
were to say 5 divided by 2.0 this will
04:17 - actually save the decimal portion and we
are ending up the result of 2.5 so make
04:25 - sure you remember that because when you
first start writing programs you might
04:29 - not notice that you're using integer
division and you might get an unexpected
04:33 - result so be sure that if you're
dividing
04:37 - by a certain value make sure that it's a
like double value or something with a
04:42 - decimal and there's this concept called
casting where you can convert from one
04:46 - data type to another such as an integer
to a double type but for now just make
04:52 - sure that if you're dividing and you
want to keep the decimal portion for the
04:56 - results make sure that you're dividing
by a number with a decimal all right so
05:01 - let's turn that into a comment and move
on to modulus
05:05 - Oh quick note so I decided to just do a
little bit of formatting with these
05:09 - comments I also added the results for
each of these operations for our
05:14 - examples just so you can have some notes
to look at and remember that I'll post
05:19 - this in the comments down below okay so
the modulus the modulus works exactly
05:24 - like division except instead of giving
you a quotient as an answer it's going
05:30 - to give you the remainder for example if
we said C out five modulus two instead
05:38 - of displaying two or two point five if
this is a decimal value or double value
05:44 - it's actually going to display the
remainder so five does not divide by two
05:49 - evenly with integer division so it's
going to give us a remainder of one and
05:55 - this is actually useful if you need to
determine if a number is even or odd
05:59 - because if you place the number that you
want to examine here then use modulus
06:04 - two if it divides evenly by two this
result is actually going to be zero so
06:10 - let's try it out so four divided by two
gives us a remainder of zero and when we
06:16 - get to if statements we could say if the
result is equal to zero then this number
06:22 - is even however if this numbered modulus
two is equal to one then it's going to
06:32 - be an odd number but I'll show you a
program like that maybe in the future
06:37 - for a different example but that's one
practical application of how using a
06:41 - modulus would be useful because you can
determine if a number is even or odd if
06:47 - you put your number here then use
modulus to
06:50 - so let's turn that into a comment and
then move on to something else
06:56 - so we'll say result equals one because
that's the remainder my next topic for
07:03 - this video we will be discussing the use
of the increment and the decrement
07:07 - operators so with programming we do a
lot of counting in fact we do so much
07:13 - counting that we have our own operator
that's specifically designed for
07:17 - counting up or down by a certain number
so let's say that we have an integer
07:23 - variable named total and let's just set
this equal to perhaps one all right so
07:30 - let's say that we want to add 1 to
whatever this total is well we would
07:36 - normally have to write a statement such
as total equals total plus 1 and then we
07:42 - can display whatever the new total is so
if we were to run this one which is the
07:49 - total plus one equals of course it's
gonna be two alright so since we do so
07:57 - much counting with programming we have a
shorthand way of writing statements such
08:02 - as this if we need to increment
something by one so instead of saying
08:06 - total equals total plus one what you
just do is say total plus plus and this
08:12 - will do the exact same thing we will add
1 to whatever the total currently is or
08:18 - whatever variable you're working with so
this works just the same now the
08:23 - opposite of this is the decrement
operator so we can say total minus minus
08:29 - and this is the same as saying total
equals total minus 1 so we could say
08:35 - total minus minus and this will
decrement something by 1 each time we
08:41 - use this so the result here would end up
being 0 now you can increment or
08:46 - decrement by a given value so with total
plus plus this increments by 1 if you
08:52 - want to increment by let's say 2 you can
do something else you could say total
08:57 - plus equals 2 and this will count up by
2 so the result here
09:04 - would be three and if you were to say
total - equals - this will subtract or
09:10 - count down by two and the result here
would be negative one so let's add that
09:17 - to our notes the increment operator we
can take a value or variable and just
09:24 - say plus plus right after the end and
then let's do the same thing for the
09:30 - decrement operator so we'll say X minus
- so use the increment operator if you
09:37 - want to add one to something to some
number or variable and then use the
09:42 - decrement operator if you want to
subtract one from a value or variable
09:47 - all right well next on my agenda I have
to teach you guys about typecasting
09:51 - because I said I would mention that now
what I'm going to do is copy this
09:55 - statement here where I say C out 5
divided by 2.0 but let's change that to
10:02 - two all right so normally this results
in the answer being two because with
10:07 - integer division we can't handle that
decimal portion so that gets cut off or
10:12 - truncated so we have a few options to
work with if we want our answer to
10:17 - retain that decimal portion in the
answer when we're using any sort of
10:21 - integer division the first is that we
would need either our dividend or our
10:27 - divisor to have a decimal portion they
can be of the float data type or the
10:34 - double data type so if we said five
divided by 2.0 we would end up keeping
10:39 - that decimal portion with our answer
here otherwise the dividend can also be
10:46 - a float or a double data type and this
worked just the same you can do it
10:52 - either way
another option is this concept called
10:55 - casting so you can convert a number
that's of one data type to another and
11:02 - what you do before that number is that
within parenthesis you just write the
11:07 - data type that you want to convert this
number or variable into so with this
11:12 - whole integer of five we can convert
this to let's say a double
11:18 - and if we were to run this the result is
going to be 2.5 and we end up keeping
11:24 - that decimal portion now check this out
what if we put our dividend and our
11:28 - divisor within its own set of
parentheses around this part of the
11:32 - equation and then we cast this
afterwards well what's going to happen
11:36 - is that it's actually going to take five
divided by two first and then it's going
11:42 - to truncate the decimal and then cast it
to a double and we still lose that
11:46 - decimal part of this answer likewise you
can take a result that's normally a
11:52 - double and you can cast it into an
integer datatype
11:55 - intentionally so you can purposefully
cut off the decimal portion so an
12:01 - example of this is that we'll say C out
perhaps five point zero five one divided
12:09 - by two point zero two one I'm just
making up numbers here let's comment
12:15 - this out so normally this dividend
divided by this divisor equals two point
12:26 - four nine nine two six all right let's
say that we want to cut off the decimal
12:32 - portion or truncate it well what we'll
do is that we'll put this within
12:36 - parenthesis and we're going to take the
result and cast this of the integer
12:42 - datatype so our result is that it's
going to be just two then before we move
12:50 - on I'm just going to add a note that
says cast to a double cast to an int
13:01 - alright so we finally made it to the
final topic of this video and we need to
13:06 - cover operator precedence so if you guys
remember in grade school where if we
13:10 - have a multi-part equation such as this
with multiple different of the
13:14 - arithmetic operators each of these
operators has a certain precedence one
13:19 - over another and what we learned in
grade school was this acronym it was
13:23 - PEMDAS and one way of remembering this
which was kind of silly is that we would
13:29 - say please excuse my dear
and Sally or something very similar to
13:34 - that that used the same letters for this
acronym and what this meant is that we
13:39 - would solve anything within parenthesis
first followed by exponents
13:45 - multiplication division addition and
then lastly subtraction so if we were to
13:51 - solve this using this order of
operations PEMDAS we would solve let's
13:57 - see two times three first because any
multiplication takes precedence over
14:02 - addition so 2 times 3 is 6 plus 1 the
result is going to be 7 then so we have
14:09 - a different set of rules for programming
and it's actually a little bit more
14:13 - simple I would say then
PEMDAS so with programming we solve
14:17 - anything within parenthesis first for
step 1 step 2 we do any multiplication
14:23 - or any division it doesn't matter which
one comes first
14:28 - we always start from the left and work
to the right and then step 3 we do any
14:32 - addition or subtraction at the very end
all right so here's an example so if you
14:37 - want why don't you pause the video and
see if you can guess what the total is
14:41 - going to be and I'll just walk you
through these steps using our order of
14:44 - operations for programming so step one
we have to solve anything within
14:48 - parentheses first and we start from the
left and work our way to the right see
14:53 - the only place that I see parenthesis is
at the very end so we're going to solve
14:57 - everything within here first so we're
going to say 6 plus 7 first which is 13
15:02 - all right so we can get rid of these
parenthesis then so they're no longer
15:06 - relevant step 2 we need to do any
multiplication and division first so we
15:11 - start from the left and work our way to
the right I see 3 times 4 so we need to
15:15 - solve that first alright so then we have
12 divided by 5 point 0 and I change
15:22 - this from 5 to 5 point 0 because of
integer division so this is going to be
15:28 - 12 divided by 5 is 2 point 4 so let's
change that alright so there is no more
15:38 - multiplication or division so we do any
addition or subtraction so 1 plus 2 is 3
15:45 - 3
- two point four is zero point six so
15:49 - zero point six plus 13 is 13 point six
alright so let's go back to see if that
15:56 - actually was the answer all right so
let's run this we probably need to
16:02 - display what the total is going to be
16:06 - and the answer is thirteen point six
well good job make it to the end I knew
16:15 - this was a somewhat more dull topic but
it was necessary for us to nail down
16:20 - some of these basics and if you want a
copy of what we did here today I'm going
16:25 - to post it as a comment down below and
pin it to the top but yeah that is
16:29 - everything you need to know to get
started working with just basic
16:33 - arithmetic and C++ heyyou if you enjoyed
this lesson then you can help me help
16:40 - you in three easy steps
by smashing that like button drop a
16:44 - comment down below and subscribe if
you'd like to become a fellow bro