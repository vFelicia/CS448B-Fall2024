00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in
00:03 - today's video I'm going to show you
00:04 - everything you need to know to get
00:05 - started working with reactjs so why
00:08 - don't you go ahead and sit back relax
00:10 - and enjoy the
00:12 - show react is a JavaScript library not
00:16 - framework that's used to easily build
00:18 - and arrange user interfaces for web
00:21 - applications react focuses on building a
00:23 - web application using these things
00:25 - called components a component is a
00:27 - self-contained section of code that
00:29 - functions as as a reusable building
00:31 - block think of Legos you could say a
00:32 - Lego is similar to react component each
00:35 - Lego represents a section of reusable
00:37 - JavaScript and HTML code we can build a
00:39 - diarama or other complicated structure
00:42 - from these Legos if we use enough of
00:44 - them and in the correct places react
00:46 - uses a syntax extension of JavaScript
00:48 - known as jsx meaning JavaScript XML jsx
00:52 - allows you to write HTML like code
00:55 - within your JavaScript files react also
00:57 - utilizes a virtual Dom it's a
00:59 - lightweight version of the real Dom of a
01:01 - web page we can keep track of any
01:03 - changes made to the virtual Dom and only
01:05 - apply that specific change to the real
01:07 - Dom without needing to refresh the
01:09 - entire web page only that specific
01:11 - section this reduces rendering
01:13 - performance overhead before we do begin
01:15 - you will need to know JavaScript since
01:17 - react is a JavaScript library everything
01:19 - up to arrays classes objects and es6
01:22 - feature such as Arrow functions will be
01:24 - necessary HTML will also be mandatory
01:27 - since our react components involve
01:29 - rendering HTML elements and applying CSS
01:32 - I do have full free courses on my
01:33 - YouTube channel on these topics if you
01:35 - need to catch up or you need a refresher
01:37 - so that's a quick overview of react
01:38 - we'll move on to the installation
01:40 - instructions next we're going to
01:42 - download nodejs from this URL nodejs.org
01:46 - node.js is a backend JavaScript runtime
01:49 - environment it executes JavaScript code
01:51 - outside of a web browser we're mostly
01:53 - interested in the node package manager
01:55 - that comes with it let's download the
01:58 - latest version of node.js
02:01 - open it when the download is
02:06 - complete select next read the license
02:09 - agreement yes I did read it that fast
02:12 - next select a destination folder I'll
02:15 - keep it as
02:16 - is you can define a custom setup but
02:19 - that's outside of the scope of this
02:21 - tutorial series we'll press next we'll
02:24 - skip tools for Native modules press next
02:28 - and
02:28 - install
02:32 - then
02:33 - finish you'll also need a text editor I
02:36 - recommend vs code since you've made it
02:39 - this far in my web development series
02:41 - I'm assuming you already have one
02:42 - downloaded which you can get from this
02:44 - site code dovisual studio.com and select
02:46 - the correct download for your operating
02:48 - system within VSS code I'm going to
02:51 - create a project folder let's go to
02:53 - explore open folder just for convenience
02:57 - I'll place my project folder on my
02:59 - desktop
03:00 - I'll create a new folder I'll name mine
03:04 - website then we will select this
03:07 - folder we're going to need to open up
03:09 - command prompt if you're using Windows
03:11 - or terminal if you're on Mac you can
03:13 - also do this within vs code go to the
03:15 - hamburger menu up top terminal new
03:21 - terminal we within our website folder we
03:24 - will type the command npm meaning node
03:27 - package
03:28 - manager
03:30 - create vit at latest meaning latest
03:34 - version V's a development server it's a
03:38 - modern replacement to create react app
03:40 - which is now
03:42 - outdated hit
03:44 - enter we'll need a name for this project
03:47 - a common naming convention for a user's
03:49 - first react project is my react app
03:54 - that's a common name that you'll see
03:56 - enter select a framework using the arrow
03:59 - keys we can select whatever framework we
04:01 - would like to use we will select react
04:04 - hit enter are we going to use typescript
04:07 - or JavaScript we'll stick with plain
04:10 - JavaScript all right here are the last
04:12 - few commands and they are given to us
04:15 - we'll change the directory to our react
04:18 - app CD meaning change directory my react
04:23 - app and that's the name of the folder
04:25 - where our project is
04:27 - located npm install that is the second
04:35 - command the last command is npm runev to
04:39 - start the development server npm
04:43 - runev all right so our web server is
04:45 - found at this address let's copy it then
04:48 - open up a web browser let's paste that
04:51 - address and here we are within our
04:53 - development server this is a sample
04:56 - project that's given to us it even
04:58 - includes this little counter
05:01 - hey this is future bro I was editing
05:03 - this video and I totally forgot to
05:05 - mention how you can restart the server
05:07 - if you close out of it all you got to do
05:09 - is open up a terminal let's go to
05:10 - terminal new terminal we have to be sure
05:13 - that we're within our application folder
05:15 - I'm going to change my directory by
05:17 - typing CD the name of the folder my
05:21 - react
05:23 - app then npm run Dev to start the
05:27 - development
05:28 - server
05:30 - and let's refresh that yep it seems like
05:33 - it's working so yes I forgot to mention
05:35 - that that is all I'm quickly going to
05:37 - cover the project structure of our react
05:39 - application we'll begin with the node
05:41 - modules folder this folder contains
05:44 - external libraries and packages that our
05:46 - project relies on a few of which are
05:49 - build tools utility libraries routing
05:51 - libraries just to name a few we won't be
05:55 - spending any time directly in this
05:56 - folder but you should still be aware
05:58 - what it's for if it just contains
06:00 - external libraries and packages that our
06:02 - project relies on next we have the
06:04 - public folder the public folder contains
06:07 - any public assets one of which in here
06:10 - is a vit image it should be this image
06:12 - right here this folder can contain
06:15 - public fonts images videos they're not
06:18 - bundled during the final output they're
06:20 - typically available via a URL just to
06:23 - demonstrate I'm going to delete this
06:25 - image file and see what
06:27 - happens yep and that logo is gone so my
06:31 - v logo was a public asset via a URL and
06:35 - let's put that
06:36 - back then we have the source folder
06:39 - we'll spend 99% of our time within the
06:42 - source folder we have an assets folder
06:44 - that can contain images and videos the
06:47 - assets folder is very similar to the
06:49 - public folder but files within the
06:51 - assets folder are bundled during the
06:53 - final output public assets are not and
06:55 - they're generally available via a URL my
06:59 - re act image is within the assets folder
07:02 - currently we have a main jsx file
07:05 - remember that jsx is Javascript XML in a
07:08 - way this functions as our main
07:10 - Javascript file react works with
07:13 - components we're adding a single
07:14 - component an app component which we are
07:18 - importing so let's take a look at our
07:20 - app component the app component in this
07:23 - example you could say is the root
07:24 - component we have two different
07:26 - stylesheets a stylesheet for app and we
07:30 - have an index CSS stylesheet this is the
07:32 - main CSS file for our application we're
07:35 - importing this file from our main jsx
07:38 - file right here so that's the source
07:40 - folder then we have an index HTML file
07:43 - this is the main entry point into our
07:45 - program within the body of our document
07:48 - we have a development with an ID of root
07:51 - as well as a script to our main jsx file
07:54 - a few other things you should know about
07:56 - is this package Json file Json file
07:59 - files are structured in key value pairs
08:01 - this file contains metadata about our
08:03 - project such as the project name the
08:06 - version number what build we're using
08:08 - we're using vit and the react version
08:11 - number just to name a few all right
08:14 - everybody so in just a moment we will be
08:15 - creating our first react component we
08:18 - already do have one component that is
08:20 - app right now this is serving as a
08:22 - sample project for us then we are
08:24 - importing app to main jsx this is our
08:28 - main J s x file think of it as the main
08:30 - JavaScript file we are creating a root
08:33 - element and including our app component
08:37 - within our app component we do have a
08:39 - function delete everything within this
08:45 - function that should eliminate our
08:47 - sample
08:49 - project and we no longer need these
08:52 - Imports we can delete them
08:54 - too but you do want to keep this export
08:57 - statement components can have dedicated
08:59 - stylesheets which you can see here for
09:01 - app CSS we are going to delete this
09:04 - because we no longer need
09:06 - it we do have an app component that's
09:08 - going to serve as the root we will add
09:10 - other components to our app component
09:12 - our app component ties them all together
09:15 - to create a new component go to your
09:16 - Source folder we're going to rightclick
09:18 - then go to new file we will create a
09:21 - component for a header the extension is
09:25 - jsx because it's a JavaScript XML file
09:30 - we will be working with function based
09:33 - components we will create a function
09:36 - with the name of header do pay attention
09:39 - to the
09:40 - capitalization then we would like to
09:42 - export this component so we can import
09:44 - it elsewhere at the end of this file
09:47 - type
09:48 - export default the name of the
09:52 - component header within our header
09:55 - function we can write a combination of
09:57 - JavaScript and HTML
09:59 - all we're going to do within this
10:00 - function is return something return
10:04 - parentheses semicolon within the return
10:07 - statement you can write pure HTML I will
10:10 - create a header
10:11 - element so react components they're only
10:14 - capable of returning a single element
10:17 - but you can place children elements
10:19 - within within our header element I will
10:21 - create an H1 element with text of my
10:27 - website just to be sure everything is
10:29 - working let's save I'm holding contrl s
10:32 - on Windows we will go to our app
10:34 - component then import the header
10:36 - component So within app we will type the
10:40 - statement import the name of the
10:43 - component
10:45 - header from a location that location is
10:49 - going to be do SL header.
10:54 - jsx we can now use this header component
10:57 - within our app component we will also be
10:59 - returning something so we will need a
11:02 - return statement return parentheses
11:04 - semicolon what are we going to return I
11:08 - would like to use my header component so
11:10 - to add a component we need a set of
11:13 - angle brackets then type the name of the
11:15 - component
11:18 - header like this they're a pair of two
11:22 - and the second one is closed that's why
11:24 - we have a forward slash preceding it we
11:26 - now have a header component you can
11:29 - shorten the syntax as well take your
11:32 - component end it with the forward slash
11:35 - that also works too it's a shorthand way
11:37 - of writing the same thing let's head
11:39 - back to our header component We'll add a
11:41 - few more
11:42 - elements after our H1 element let's
11:45 - create a navigation
11:47 - element then within the navigation
11:49 - element we'll create an unordered
11:52 - list within the unordered list we'll
11:54 - create a few list
11:57 - items the first will be
12:01 - home these are list items you would
12:03 - typically see for a navigation bar
12:07 - home
12:11 - about
12:15 - services and
12:17 - contact we now have our unordered list
12:21 - I'll enclose our list items within
12:23 - anchor tags to make them
12:25 - hyperlinks a hre equals
12:29 - I don't want these to go anywhere I'm
12:30 - just going to leave these empty I'll add
12:33 - a pound
12:34 - sign and then be sure to close these
12:37 - anchor
12:38 - tags we'll place our text within the
12:40 - anchor tag so they are now hyperlinks
12:43 - okay let's do that for the other list
12:53 - items there we are then after my
12:56 - navigation element I will add a
12:58 - horizontal rule to make it look
13:00 - nice okay there is our header component
13:04 - we no longer need to work with this
13:05 - header component we do have some styling
13:08 - already applied those Styles can be
13:09 - found within index.css if you would like
13:13 - to start fresh and eliminate all of
13:14 - these Styles you can delete everything
13:16 - from here then you do have HTML with no
13:20 - CSS in a future video I'll show you
13:22 - various ways in which we can apply CSS
13:24 - to a react component but for now we'll
13:26 - just keep this the same our head element
13:29 - is now complete we will create a new
13:31 - element for a footer again go to our
13:34 - source folder right click go to new
13:37 - file
13:38 - footer.
13:41 - jsx we are creating a function based
13:44 - component it's a function that's going
13:47 - to return a footer
13:50 - component then at the end of our script
13:53 - we will export default the name of the
13:56 - component footer so that we we can
13:58 - import it elsewhere our footer is going
14:01 - to return something so we need a return
14:04 - statement then within the set of
14:06 - parentheses we can return a single
14:08 - element we will return a footer
14:13 - element but remember you can place
14:15 - children elements within an element it
14:17 - still only counts as one then so what do
14:20 - we want to do for our
14:21 - footer I'll include a paragraph
14:27 - element
14:29 - within the paragraph element I'm going
14:30 - to add a copyright symbol to add a
14:32 - copyright Mark Type ampersand copy semi
14:36 - call
14:37 - in then afterwards I'll add your website
14:43 - name all right now we need to import
14:46 - this footer going back to our app
14:49 - component we will
14:51 - import
14:53 - footer from footer.
14:57 - jsx then I would like to include a
15:00 - footer component after the
15:03 - header now pay attention to
15:06 - this we're returning two
15:09 - components we have this warning we only
15:12 - have the capability of returning a
15:14 - single component that's how our return
15:16 - statements are designed jsx elements
15:18 - must be wrapped in an enclosing tag do
15:21 - you want a jsx fragment so since we only
15:25 - have the capability of returning a
15:26 - single enclosing tag we're we're going
15:28 - to enclose our components with what's
15:30 - known as a
15:32 - fragment it's just an empty set of anle
15:35 - brackets so we will enclose all
15:37 - components within a
15:40 - fragment and that should work we have
15:42 - our footer component following our
15:44 - header component we have our
15:47 - header and our footer let's make a few
15:50 - more changes to our
15:52 - footer I'm going to zoom out a little
15:55 - bit within our return statement we can
15:57 - insert some Javas script to insert some
16:00 - JavaScript you need a set of curly
16:02 - braces I will create a new date object
16:06 - this is some JavaScript code
16:09 - new date parentheses I would just like
16:13 - the year I will follow this object with
16:16 - get full year method let's save and take
16:20 - a look so I'm filming this video near
16:23 - the end of 2023 your web application
16:26 - should return the current year when ever
16:28 - you're watching this all right our
16:30 - footer component is now
16:32 - done I'm going to create a component for
16:35 - a unordered list to sandwich between our
16:37 - header and our footer I'll create a
16:40 - component for food we will go to our
16:42 - source folder create a new file this
16:46 - component will be food.
16:50 - jsx again we are creating a function
16:53 - based component with the name of
16:57 - food then we will export this component
16:59 - when we're done export default
17:03 - food be sure to add a return
17:07 - statement before we add anything to the
17:09 - return statement I will create some
17:11 - JavaScript variables so normally if
17:14 - you're adding JavaScript code within the
17:16 - return statement you need a set of curly
17:18 - braces but outside of the return
17:20 - statement you don't I will create two
17:23 - JavaScript constants const food one pick
17:28 - some food for me I will pick an
17:31 - orange let's make that
17:34 - Capital all right then let's create a
17:36 - second food
17:38 - variable food 2 for me will be a
17:42 - banana within the return statement we
17:44 - can utilize these
17:46 - constants what do we want to return
17:49 - exactly I will return an unordered
17:54 - list we'll have a few list
17:57 - items three to be
18:00 - exact my first list item I'll just add
18:03 - some text I'll add an
18:05 - apple just to be sure that everything is
18:08 - working let's import this food component
18:10 - from our app
18:12 - component again we need an import
18:14 - statement import food from food. jsx we
18:20 - can now use the food component we will
18:23 - add that after the header we will add
18:27 - food then here is our first list item an
18:30 - apple okay let's head back to our food
18:33 - component for our second list item I
18:35 - will add food one that's our constant
18:38 - now pay attention to this if I type food
18:40 - one well we're literally printing the
18:43 - text food one since we're within our
18:45 - return statement I would like to include
18:47 - some JavaScript code we're including a
18:49 - JavaScript variable so I need to enclose
18:53 - this variable within a set of curly
18:55 - braces because we're within the return
18:57 - statement and now now my second list
18:59 - item is an orange then let's include
19:02 - food 2 but I'm going to add one more
19:04 - thing food 2 however I'm going to use
19:08 - the builtin 2 uppercase method just to
19:12 - demonstrate that we can use JavaScript
19:14 - functions all right and there is our
19:16 - unordered list we have an apple orange
19:18 - and a
19:19 - banana so these components are now
19:21 - complete and the cool thing about react
19:23 - as well is that we can keep on reusing
19:25 - these components if we would like I
19:27 - would like a couple food components so I
19:29 - will just paste another component we now
19:31 - have two food components or even three
19:34 - or
19:35 - four you can rearrange these components
19:38 - however you would like by rearranging
19:40 - them we can change the feel and style of
19:42 - our web application for demonstration
19:44 - purposes I will put our footer on the
19:46 - top that doesn't make any sense but I
19:48 - just want to demonstrate so our footer
19:51 - is now on the top followed by the header
19:53 - then the food component or maybe I would
19:56 - like the food component on top
20:00 - we now have our food component footer
20:02 - component then our header
20:06 - component all right everybody that is an
20:08 - introduction to react react is all about
20:11 - reusing components a component is a
20:14 - small section of code that can include
20:16 - JavaScript and HTML your function will
20:19 - return that code and make it reusable
20:21 - and that is your introduction to
20:25 - react