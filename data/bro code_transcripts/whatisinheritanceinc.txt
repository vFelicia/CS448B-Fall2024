00:02 - hey guys let's talk about inheritance
00:04 - inheritance is when a class can receive
00:06 - attributes and methods from another
00:09 - class the receiving class is known as a
00:12 - child class
00:13 - the class that's being inherited from is
00:15 - known as the parent class it's kind of
00:17 - like how children will inherit their
00:19 - parents genes and some of their physical
00:21 - traits it's kind of the same concept a
00:23 - benefit of inheritance is that it helps
00:25 - to reuse similar code found within
00:27 - multiple classes here's an example we
00:30 - will create an animal class the animal
00:32 - class will be the parent class
00:35 - class animal
00:40 - i'll make these members publicly
00:42 - accessible
00:43 - all animals will have a boolean
00:45 - attribute that we will name alive
00:48 - if you're an animal you're alive then
00:51 - let's add a method maybe an eat method
00:53 - all animals should be able to eat
00:57 - void
00:59 - eat
01:01 - we'll just print a generic message
01:02 - standard output
01:05 - this animal is eating
01:10 - i'm going to create two classes a dog
01:13 - class and a cat class they will inherit
01:16 - from the animal class
01:18 - let's begin with dog
01:20 - class
01:21 - dog to inherit from another class you
01:24 - would add a colon
01:26 - then public
01:28 - the name of the parent class
01:29 - dog will inherit from the animal class
01:34 - that is out of curly braces semicolon at
01:36 - the end and we now have a dog class now
01:40 - check this out if i create a dog object
01:42 - it will have a boolean variable named
01:45 - alive as well as an eat method
01:47 - so let's create a dog object dog dog
01:53 - so i'm going to display that boolean
01:54 - variable
01:56 - dog dot alive
02:02 - if i display this attribute
02:04 - this will give me 1 which means true
02:08 - this dog object also has an eat method
02:13 - dog dot e add a set of parentheses to
02:16 - invoke it
02:19 - this animal is eating
02:21 - so even though there's nothing within
02:22 - this dog class it's inheriting
02:24 - everything from within the animal class
02:27 - and we could add some additional
02:28 - attributes and methods as well
02:30 - maybe just a method this time
02:32 - i would like to give my dog the ability
02:34 - to speak so let's make this public
02:38 - void
02:40 - maybe bark
02:42 - standard output
02:44 - the dog goes woof
02:50 - my dog is alive and it can eat my dog
02:53 - can also bark as well it has its own
02:55 - attributes and methods too
02:57 - i would like my dog to bark
03:03 - okay my dog is alive that's set to one
03:06 - the animal is eating the dog goes woof
03:09 - so now let's create a cat class
03:12 - class
03:14 - cat
03:15 - the cat class will inherit from the
03:16 - animal class
03:20 - i'll make its members publicly
03:21 - accessible
03:23 - i will give cats a meow function void
03:27 - meow
03:29 - standard output
03:31 - the cat goes meow
03:37 - there okay now we can create a cat
03:39 - object
03:40 - cat
03:41 - cat
03:42 - let's print the live boolean variable of
03:44 - my cat
03:47 - cat.eat now i'm going to try and use the
03:49 - bark method of a cat
03:52 - which we don't have
03:53 - let's attempt to use that
03:56 - so class cat has no member named bark
03:59 - that's because that method is found
04:01 - within the dog class and not the cat
04:03 - class cats have a meow method i'm
04:06 - instead going to use the meow method
04:10 - our cat's alive the animal is eating the
04:13 - cat goes meow so that's kind of how
04:15 - inheritance works a class can inherit
04:18 - attributes and methods from another
04:19 - class it helps with code reusability you
04:22 - know technically you could add these
04:24 - attributes and methods to each of these
04:26 - classes for example
04:28 - i'll just add the boolean variable alive
04:30 - to each of these classes
04:33 - as well as the eat method
04:38 - you know this would work too but we're
04:40 - repeating ourselves and with programming
04:42 - we try not to repeat ourselves if we
04:44 - don't have to
04:45 - especially because if we have to make a
04:47 - change to the eat method let's change
04:49 - eat to
04:50 - nom nom nom
04:52 - well i would have to go to each class
04:54 - and make that change manually and that
04:56 - can be inconvenient if i have hundreds
04:58 - of different classes it would be a lot
05:00 - easier if i just had to make that change
05:02 - in one place
05:03 - so i'm going to revert all those changes
05:08 - if i need to make a change to one of
05:09 - these methods i'm going to change eat to
05:12 - display
05:13 - nom nom nom
05:16 - well then i just have to make that
05:17 - change in one place instead of for every
05:20 - individual class
05:22 - let's try another example we'll create a
05:24 - class named shape
05:26 - this will be the parent class
05:30 - we'll make the members publicly
05:31 - accessible
05:33 - any class that inherits from the shape
05:34 - class will have a double attribute that
05:37 - we will name
05:39 - area for surface area
05:41 - double
05:42 - volume
05:44 - in this example we won't have any
05:45 - methods this time just some attributes
05:48 - i'm going to create class
05:50 - cube
05:51 - cube is the child class it will inherit
05:53 - from the parent class shape
05:56 - so colon
05:57 - public the name of the parent
06:00 - shape
06:02 - even though there's nothing within my
06:03 - cube class my cube class has an area and
06:06 - volume attribute
06:09 - then let's make a sphere class class
06:13 - sphere
06:16 - there we go
06:18 - i'm going to add a public axis modifier
06:21 - all cubes will have a double
06:24 - side property
06:25 - then with spheres
06:27 - they will have
06:28 - double
06:29 - radius
06:31 - then i'm going to add a constructor for
06:32 - both cubes and spheres
06:34 - let's begin with cube cube
06:38 - then sphere
06:44 - in order to instantiate a cube object i
06:46 - need to pass in a aside as an argument
06:48 - when i construct an object
06:51 - double side
06:53 - then for the sphere we need a radius
06:56 - double radius
06:58 - i think what we'll do is that when we
07:00 - construct a cube object and a sphere
07:02 - object we'll calculate the area and the
07:05 - volume based on either the side that we
07:07 - pass in for a cube or the radius for a
07:10 - sphere let's begin with the cube
07:13 - first let's assign the length of a side
07:15 - remember with a cube the length the
07:17 - width and the height are all the same
07:19 - this arrow side equals side
07:22 - to calculate the area we can use this
07:24 - formula
07:25 - so this area equals
07:29 - side time side
07:31 - times six because there are six sides to
07:34 - a cube then if you need the volume you
07:36 - could say this
07:37 - arrow
07:38 - volume equals side to the power of three
07:42 - we could just say side times side times
07:45 - side just to keep it simple
07:47 - now with the sphere it's a little more
07:49 - complex
07:50 - first let's assign the radius this arrow
07:53 - radius equals radius
07:58 - calculate the area of a sphere
08:00 - this arrow
08:02 - area
08:03 - equals
08:04 - to calculate the area of a sphere that
08:07 - would be 4
08:09 - times pi let's just say 3.14
08:13 - times radius squared
08:16 - so radius times radius
08:21 - then let's calculate the volume this
08:23 - arrow
08:24 - volume equals to calculate the volume of
08:28 - a sphere the formula is
08:30 - 4 divided by 3
08:32 - times pi
08:34 - times radius cubed so that would be 4
08:37 - divided by 3.0 make sure to divide by
08:40 - 3.0 and not three because in this case
08:43 - we would be using integer division we
08:45 - would like to keep that decimal so 3.0
08:49 - times pi that's 3.14159
08:53 - times radius cubed to keep it simple we
08:55 - can say radius
08:57 - times radius
08:58 - times radius
09:01 - and there we go
09:03 - okay so let's create a cube object to
09:05 - begin with
09:07 - cube
09:08 - i'll name this object just cube then in
09:11 - order to construct a cube object we need
09:13 - to pass in the length of a side
09:15 - let's say 10
09:18 - so my cube class inherits the area and
09:21 - volume attribute from the shape class
09:23 - within the constructor of the cube class
09:25 - we will calculate what the area and the
09:26 - volume is going to be
09:30 - and i will display that standard
09:32 - output
09:35 - area
09:39 - cube dot area
09:41 - then i'll add centimeters
09:47 - then let's do the same thing with volume
09:50 - volume
09:52 - cube dot volume
09:55 - if the length of a side is 10
09:59 - the area is going to be 600 centimeters
10:01 - squared
10:02 - the volume is 1000 centimeters cubed
10:06 - now let's try this with our sphere
10:08 - sphere
10:09 - i'll name this object sphere then we
10:11 - will pass in the radius
10:14 - let's say five
10:16 - i would like to display the spheres area
10:19 - and the sphere's volume
10:21 - the area would be 314 centimeters
10:24 - squared
10:26 - the volume is 523 centimeters cubed
10:31 - so yeah that's inheritance everybody
10:33 - a class can inherit attributes and
10:35 - methods from another class
10:37 - if you have multiple classes and they
10:40 - share similar attributes or methods
10:42 - you can place them within a parent class
10:45 - and all of those individual classes can
10:47 - inherit from that one common class it
10:50 - helps with code reusability and you
10:51 - don't have to repeat yourself if you're
10:53 - looking for some additional practice
10:55 - post a parent class and a child class in
10:58 - the comments section down below and well
11:00 - yeah that's an introduction to
11:01 - inheritance in c plus