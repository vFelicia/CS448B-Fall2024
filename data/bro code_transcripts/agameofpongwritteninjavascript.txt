00:00 - hey what's going on everybody it's you
00:01 - bro hope you're doing well and in this
00:03 - video we're going to create a game of
00:05 - pong using javascript so sit back relax
00:08 - and enjoy the show
00:10 - all right let's begin everybody let's
00:12 - create a div section to contain our
00:14 - game div
00:17 - close it
00:18 - the id will be game
00:21 - container
00:23 - we'll add a canvas
00:25 - canvas
00:26 - close it
00:28 - the id will be game
00:31 - board
00:32 - i'll set a width and a height in line
00:35 - the width will be 500
00:37 - the height will be 500 we'll add a score
00:40 - this will be another div section
00:43 - id equals score
00:46 - text
00:47 - the initial text will be 0 colon 0
00:52 - then a reset button
00:54 - button
00:55 - close it
00:57 - the id is reset button
01:00 - the text is reset
01:03 - cool that's our html file let's head to
01:05 - our css style sheet
01:07 - id game board
01:10 - border
01:11 - 3 pixel solid
01:13 - let's change our score text next
01:16 - score text
01:19 - pick a font family font
01:21 - family
01:23 - pick a font that you like
01:26 - then i'll add a backup
01:29 - i'll change the font size to 100 pixels
01:32 - that should be readable
01:34 - okay let's work on the button
01:36 - reset button i'll set a font of
01:40 - permanent marker
01:43 - then a backup of cursive
01:47 - font
01:48 - size
01:49 - 22 pixels
01:52 - a width
01:53 - of 100 pixels
01:56 - a height
01:58 - of 50 pixels
02:01 - border
02:02 - 4 pixels solid
02:05 - border
02:06 - radius
02:08 - 15 pixels
02:11 - then cursor
02:13 - pointer
02:14 - when we hover our cursor over this
02:16 - button the cursor is now a pointer then
02:18 - let's enter everything i will select our
02:21 - game container
02:25 - text align
02:28 - center
02:29 - all right there we go so that's our css
02:31 - style sheet and our html file let's head
02:34 - to our javascript file let's declare all
02:36 - the constants first
02:38 - const game board
02:41 - equals document dot query selector
02:47 - we are selecting our game board
02:52 - const
02:54 - context
02:56 - equals game board
02:59 - dot get
03:00 - context
03:04 - 2d
03:06 - context is what we draw on
03:08 - const score text
03:12 - equals document dot
03:14 - query selector
03:18 - we are selecting the score text
03:23 - i'm just going to copy this
03:26 - then we have our reset button
03:29 - id is reset button
03:33 - let's store the game with within a
03:34 - variable what's the size of our canvas
03:39 - const
03:40 - game with
03:42 - equals
03:43 - game board dot width attribute
03:47 - then we have height
03:49 - game
03:51 - height
03:54 - equals game board dot height i'm only
03:57 - storing them within a variable so that
03:58 - they're accessible let's select some
04:00 - colors
04:01 - const
04:03 - board
04:05 - background
04:06 - what color
04:08 - i'll select forest green kind of like
04:10 - it's a tennis court
04:12 - const paddle one color
04:16 - what color would you like the first
04:17 - player to be i'll pick light blue
04:22 - then paddle two
04:24 - paddle two
04:25 - color
04:27 - player two will be red if you want you
04:29 - can add a border
04:30 - const
04:31 - paddle border
04:33 - equals black
04:35 - const ball color
04:38 - i'll make this yellow like it's a tennis
04:40 - ball
04:42 - const
04:43 - ball
04:44 - border
04:45 - color
04:46 - i'll pick black
04:48 - so what do we want the size of the ball
04:50 - to be i'll store that as a constant
04:52 - const
04:54 - ball
04:55 - radius
04:57 - i'll set this to be
04:58 - 12.5
05:00 - then the full diameter is 25 then our
05:03 - paddle speed how far do we want our
05:05 - paddles to move when we press down on
05:07 - the button
05:08 - paddle
05:09 - speed
05:10 - equals 50. that's good enough
05:13 - feel free to change this number if you'd
05:15 - like now we have let
05:18 - interval
05:19 - id
05:22 - let
05:23 - ball speed
05:25 - i'll set this to be one that will be the
05:27 - lowest speed
05:28 - then ball x and ball wide they will be
05:30 - coordinates let ball x
05:34 - equal initially i'll place the ball
05:36 - right in the center of our game board
05:38 - i will take game
05:40 - width divided by two
05:43 - then ball y is going to be
05:45 - game height divided by two
05:48 - let
05:50 - ball x direction
05:53 - i'll set that to be zero ball x
05:55 - direction will be the direction in which
05:57 - the ball is headed on the x axis
06:00 - then ball
06:01 - y direction
06:04 - let player one score equal
06:09 - zero
06:10 - let player two score equal zero
06:14 - we'll define two paddle objects
06:17 - let paddle one
06:19 - equal
06:20 - this paddle will have a width property
06:23 - of 25
06:26 - a height
06:27 - of 100
06:30 - these are in pixels the starting x
06:32 - coordinate will be zero all the way at
06:34 - the left border
06:36 - then y
06:37 - zero
06:38 - so this petal will be in the top left
06:40 - corner initially so let's copy this
06:43 - paste it
06:44 - change paddle one to paddle two
06:46 - the width and the height will be the
06:48 - same i would like paddle two to be on
06:50 - the other side of my canvas
06:52 - i will set x to equal game
06:55 - width then i'm going to subtract
06:57 - negative 25 whatever the width is if i
06:59 - set x to be game with the left border is
07:02 - going to be lined up with the right
07:04 - border of my game board so i'm just
07:06 - going to shift it over by the width 25
07:08 - pixels so that you can actually see it
07:11 - then y is game height
07:13 - minus the height of our paddle and those
07:16 - are the two paddles let's add an event
07:18 - listener to the window to listen for key
07:20 - down events
07:22 - window dot add
07:24 - event
07:25 - listener
07:26 - we will listen for
07:28 - key
07:29 - down
07:31 - then we will invoke a change direction
07:34 - function
07:35 - let's add an event listener to our reset
07:37 - button
07:39 - reset
07:40 - button dot add event listener
07:45 - we are waiting for click
07:47 - then invoke the reset game function
07:51 - we'll still need to declare these two
07:52 - functions when we would like to start
07:54 - our game we'll invoke the game start
07:57 - function
07:58 - then we'll need to declare these
07:59 - functions the first function is function
08:03 - game start
08:05 - we'll fill these in momentarily
08:08 - function next tick
08:11 - function clear board
08:15 - function
08:16 - draw paddles
08:19 - function create ball
08:22 - function
08:23 - move ball
08:26 - function
08:27 - drawball
08:30 - function
08:32 - check
08:33 - collision
08:36 - function
08:37 - change direction
08:39 - function
08:40 - update score
08:44 - function
08:45 - reset game
08:47 - okay those are all the functions
08:50 - why don't we begin by drawing the
08:51 - paddles we'll start with the easy stuff
08:53 - so we will take our context
08:56 - set the stroke
08:58 - style equal to the paddle
09:01 - border
09:02 - let's begin by drawing paddle one
09:05 - context
09:07 - dot fill
09:08 - style
09:10 - equals
09:11 - paddle
09:12 - one
09:13 - color
09:15 - context
09:17 - fill
09:18 - rectangle
09:20 - the first two arguments are the x and
09:22 - the y coordinate of the top left corner
09:24 - of the rectangle
09:26 - that will be
09:27 - paddle one dot x
09:30 - then paddle
09:32 - one dot y
09:34 - the next two arguments are the width and
09:36 - the height of this rectangle
09:37 - the width will be paddle one dot width
09:41 - then paddle one dot height
09:44 - to test this i'm going to invoke draw
09:46 - paddles right after game start
09:48 - temporarily
09:49 - okay there's our first paddle but let's
09:51 - add a border we can just copy this
09:55 - paste it
09:57 - change fill rect to stroke
10:00 - rat
10:01 - okay there is our first paddle let's
10:03 - copy these three lines of code
10:06 - paste it
10:08 - change paddle one to paddle two
10:15 - and there's our second paddle i'll
10:17 - eliminate this function call
10:19 - let's fill in game start when we begin
10:21 - the game what are we going to do first
10:24 - we'll create a ball
10:26 - then invoke the next tick function
10:29 - let's fill in the next tick function
10:33 - we will take our set interval id
10:38 - set this equal to
10:40 - set
10:41 - timeout method
10:43 - will pass in a callback
10:46 - then we'll add a routine what are all
10:48 - the things that we're gonna do first we
10:50 - will clear and redraw our board
10:53 - clear
10:54 - board
10:56 - then draw
10:58 - paddles
11:00 - move
11:01 - ball
11:03 - draw ball
11:06 - draw ball is going to have two arguments
11:09 - ball x
11:11 - ball y
11:13 - and we should probably fill that in
11:14 - within the parameters
11:17 - there
11:18 - then we will check collision
11:22 - then invoke next tick
11:24 - for another round i would like to repeat
11:27 - this routine every 10 milliseconds
11:30 - that is the next tick function let's
11:32 - fill in the clear board function
11:34 - all we're doing is redrawing our board
11:36 - let's take our context
11:39 - set the fill
11:41 - style equal to the board
11:44 - background
11:46 - context dot
11:48 - phil
11:49 - wrecked
11:50 - will begin in the top left corner zero
11:52 - zero
11:53 - the width will be game width
11:56 - the height will be game height
11:59 - and that's our background
12:01 - so that is the clear board function
12:03 - we're redrawing our canvas
12:05 - let's head to the change direction
12:07 - function this will be in charge of
12:09 - moving the paddles
12:11 - but we'll need to know what key that we
12:12 - pressed i'll store that as a constant
12:15 - key pressed
12:18 - equals our event dot
12:21 - key code
12:22 - uh so we do have one parameter that's
12:24 - event so fill that in let's display
12:27 - whatever key pressed is
12:29 - console.log key pressed
12:32 - w has a key code of 87
12:34 - s is 83.
12:36 - the up arrow key is 38 the down arrow
12:39 - key is 40. so we can use that for
12:41 - something
12:43 - const
12:44 - paddle 1
12:46 - up
12:47 - equals 87
12:50 - const paddle 1
12:53 - down
12:54 - equals 83
12:57 - const paddle 2 up
13:00 - is 38
13:01 - const paddle 2 down
13:03 - is 40. let's write a switch to look at
13:06 - key pressed
13:08 - switch we're examining key pressed
13:11 - against many matching cases
13:14 - the first case is
13:16 - paddle one up
13:19 - if we press up we will take
13:21 - paddle 1
13:23 - axis the y property
13:26 - minus equals our paddle
13:29 - speed
13:30 - you could also think of paddle speed as
13:32 - paddle distance how far we're going to
13:34 - move then break
13:36 - so we should be able to move up
13:38 - but we can't move down
13:41 - paddle one
13:42 - down
13:44 - the y property of paddle one
13:46 - plus equals paddle speed
13:49 - by pressing s we can move down by
13:51 - pressing w we can move up but currently
13:53 - we're exiting the game board let's write
13:55 - an if statement to check that
13:58 - if
13:59 - paddle 1 dot y is greater than zero
14:03 - then we will move
14:06 - then within the second case paddle one
14:09 - down we'll write another if statement
14:11 - if the y property of paddle one is
14:14 - greater than
14:16 - game
14:17 - height
14:20 - okay now check this out so we can't go
14:22 - above the border
14:24 - but we can go below the border up to a
14:26 - certain point from game height we need
14:28 - to subtract the height of our paddle
14:30 - game height
14:32 - minus paddle
14:34 - one
14:35 - axis the height property we cannot go
14:38 - above the game board
14:40 - or below okay let's work on paddle two
14:47 - case paddle 2 up
14:52 - we'll check to see if paddle 2's y
14:55 - property
14:57 - is greater than zero
15:01 - then we will take
15:03 - the y property of paddle two
15:05 - minus equals the paddle speed so we
15:08 - cannot move paddle two above the game
15:10 - board then our last case is paddle two
15:13 - down
15:15 - okay let's copy what we have here
15:18 - within paddle one down
15:20 - paste it but change paddle one to paddle
15:23 - two
15:25 - the y property of paddle 2 plus equals
15:28 - the paddle speed with paddle 2 we
15:30 - shouldn't be able to go below or above
15:32 - the game board these paddles are
15:33 - complete let's close out of the change
15:36 - direction function let's work on the
15:38 - draw ball function we'll take the
15:40 - context
15:42 - set the fill
15:43 - style equal to the ball color
15:47 - context dot stroke style
15:51 - equals ball
15:53 - border
15:54 - color
15:56 - we can set a line width if we'd like
15:58 - context dot line with
16:01 - equals to
16:03 - context
16:04 - begin
16:05 - path
16:06 - context
16:08 - arc to draw a circle
16:10 - ball x
16:12 - ball y
16:14 - then the radius ball radius
16:17 - zero this is for radians
16:19 - two times
16:21 - math.pi
16:23 - context dot stroke method
16:27 - context dot fill method
16:30 - and there's our ball okay that is the
16:32 - drawball function let's head to the
16:34 - create ball function
16:36 - when we create a new ball let's set the
16:38 - ball
16:39 - speed
16:40 - equal to one let's begin with the x-axis
16:45 - if
16:47 - math
16:47 - dot round
16:50 - math
16:51 - dot random
16:53 - is equal to one
16:55 - this part of the condition will give us
16:57 - a random number between zero and one
17:00 - if that number is one let's move to the
17:02 - right if not let's move to the left so
17:05 - if we would like to move to the right
17:07 - let's set ball
17:09 - x direction
17:11 - equal to one
17:14 - else
17:15 - ball x direction
17:17 - equals negative one we're moving to the
17:19 - left okay let's copy these if else
17:22 - statements
17:23 - then change ball x to ball y
17:27 - then when we create a new ball we'll set
17:29 - it to be right in the middle set the
17:31 - ball x coordinate equal to game width
17:35 - divided by two
17:37 - set the ball y coordinate to game
17:41 - height divided by two
17:43 - then invoke the draw ball function
17:46 - pass in as arguments ball x ball y
17:51 - that's the create ball function then we
17:53 - need to move the ball
17:55 - ball x plus equals
17:59 - the ball's speed
18:01 - times
18:02 - the ball's direction ball x direction
18:08 - then do the same thing with y
18:11 - ball y plus equals ball speed times ball
18:16 - y direction
18:17 - so our ball should move in a random
18:18 - direction
18:20 - let's just test that by refreshing the
18:22 - page
18:24 - so let's close out of the move ball
18:26 - function
18:28 - now we'll need to check collisions
18:30 - let's check to see if we hit the top
18:32 - border if so then we'll bounce off of it
18:35 - if
18:36 - ball y
18:38 - is greater than or equal to zero
18:42 - plus
18:43 - the ball radius remember the center of
18:46 - the ball is where we place the x and y
18:48 - coordinates so that's why we're adding
18:50 - the ball radius to account for that if
18:53 - we touch the top border let's change the
18:56 - y direction
18:57 - ball
18:58 - y
18:59 - direction
19:00 - times equals negative one that will
19:03 - reverse the direction
19:05 - i'm just gonna test that so we should
19:07 - bounce off the top yeah let's check to
19:10 - see if we hit the bottom border if ball
19:12 - y
19:13 - is greater than or equal to
19:15 - game
19:17 - height
19:18 - minus ball radius
19:21 - then we will change direction
19:24 - okay let's check that
19:26 - yep we just bounced off the bottom
19:29 - what if we touch the left border
19:32 - if
19:33 - ball x is less than or equal to
19:36 - zero let's update player 2 score
19:40 - player 2 score
19:42 - plus equals 1.
19:44 - we'll update the score
19:48 - create a new ball
19:52 - then return
19:53 - once we hit the left border that should
19:55 - create a new ball yep there it is okay
19:57 - let's copy this if statement
20:00 - if ball x
20:02 - is greater than or equal to
20:05 - game width
20:07 - then we will update player 1 score when
20:09 - we hit the right border that creates a
20:12 - new ball
20:13 - okay now this is the tough part we're
20:14 - going to bounce off the paddles
20:16 - i'm going to maximize the screen
20:20 - if
20:21 - ball x is less than
20:24 - or equal to this is for paddle one
20:27 - paddle one
20:29 - take the x property
20:31 - plus
20:33 - paddle one
20:35 - axis the width property
20:38 - plus the ball radius
20:40 - on the x-axis
20:42 - if so let's check the y-axis
20:45 - if
20:46 - ball y is greater than
20:50 - paddle one
20:51 - take the y property
20:54 - and
20:55 - ball
20:56 - y
20:57 - is less than
20:59 - paddle one
21:00 - dot y plus paddle one
21:04 - dot height
21:05 - that means there's a collision
21:07 - we'll take ball x
21:10 - direction
21:12 - multiply this by negative one
21:14 - hey if you want for fun you can increase
21:16 - the ball speed ball speed
21:19 - plus equals one
21:23 - okay we should be able to bounce off
21:24 - this paddle yeah there we go okay let's
21:27 - do the same thing with the right paddle
21:29 - so i'm going to copy this section
21:31 - paste it
21:33 - is greater than or equal to
21:35 - the x property of paddle 2
21:39 - minus the ball radius
21:42 - if ball y is greater than the y property
21:45 - of paddle two
21:47 - and
21:48 - ball y is greater than the y property of
21:52 - paddle two
21:53 - plus paddle two's height
21:57 - so we should be able to bounce off these
21:59 - paddles now
22:02 - then the ball speeds up
22:07 - so we do have one situation where the
22:08 - ball might get stuck
22:11 - kind of like this
22:14 - if that happens i'm just going to push
22:15 - the ball out of the way and move it
22:17 - forward
22:19 - ball x equals
22:23 - paddle
22:24 - one
22:26 - take the x property
22:29 - plus
22:30 - paddle
22:31 - one dot width plus
22:34 - ball radius
22:36 - this is if ball gets stuck this line of
22:40 - code helps prevent the ball from getting
22:42 - stuck within the paddle
22:44 - this statement will be ball x equals
22:46 - paddle two dot x
22:48 - minus the ball radius
22:50 - okay now let's update the score
22:54 - update score
22:55 - this one's easy
22:57 - score text
22:59 - dot text content
23:02 - equals i'll use the template literal
23:07 - player one score
23:10 - colon
23:13 - player
23:14 - two score
23:17 - so we should be able to keep track of
23:19 - the score
23:22 - okay that's one
23:24 - and one
23:27 - lastly we have the reset button
23:31 - reset game
23:34 - player one score equals zero
23:39 - player two score equals zero
23:42 - let's reset these paddles i'll just copy
23:44 - them
23:46 - paste them get rid of the let keyword
23:49 - setting the x and the y coordinates that
23:51 - will put them in their original
23:52 - positions
23:54 - to demonstrate i'll press reset and they
23:56 - go back to their respective corners
23:58 - ball x equals zero
24:02 - ball y equals zero
24:05 - ball x
24:07 - direction
24:08 - equals zero
24:10 - ball y direction
24:12 - equals zero
24:14 - we'll update the score
24:18 - we'll invoke the clear
24:21 - interval method pass in our interval id
24:25 - then invoke game start again
24:28 - okay we should be able to restart this
24:30 - game
24:32 - yeah there we go well okay then
24:34 - everybody that is a game of pong using
24:36 - javascript if you would like a copy of
24:38 - this code i'll post this in the comment
24:40 - section down below be sure to check the
24:42 - original playlist and well yeah that's a
24:44 - game of pong using javascript