00:00 - yo what's going on everybody so in
00:02 - today's video I got to explain updator
00:04 - functions in react an updator function
00:06 - is a function passed as an argument to
00:09 - set State usually for example I have a
00:13 - Setter function for a year if I need to
00:15 - increment my year by one I would just
00:17 - add plus one to year this does in fact
00:20 - work but a better practice would be to
00:22 - pass in an updator function as an
00:26 - argument usually this is represented as
00:28 - an arrow function
00:30 - by passing in an updator function this
00:33 - allows for safe updates based on the
00:35 - previous state you typically see updator
00:38 - functions used with multiple State
00:40 - updates and asynchronous functions it is
00:43 - a good practice to use updator functions
00:45 - whenever possible so in this basic
00:48 - example I've made a counter program we
00:51 - can increment count decrement count and
00:54 - reset count within each of these
00:56 - functions I'm taking my state variable
00:59 - of count adding + one minus one or
01:03 - setting count to equal Z in the case of
01:05 - reset I don't want to increment once I
01:08 - would like to increment twice I will
01:10 - take set count update the state again
01:13 - using count + one this is different for
01:16 - me adding two to count I want to
01:19 - increment count by one twice I will set
01:22 - the state of count twice count + one
01:25 - then count + one if I attempt to run
01:28 - this I will increment count twice with
01:30 - every button click however our count
01:33 - only increases by one during each button
01:36 - click I'm very persistent let's try and
01:39 - set count
01:40 - again because you know the first two
01:42 - times didn't work during each button
01:45 - click I would like to increment count by
01:47 - one three times but we're still only
01:49 - updating by one still here's the reason
01:52 - why we're using the current state of
01:55 - count to calculate the next state after
01:57 - using a Setter function this doesn't
01:59 - trigger an update react batches together
02:02 - updates for performance reasons you
02:04 - would imagine that after these functions
02:07 - we would
02:11 - update but that's not necessarily the
02:13 - case using react we batch together these
02:16 - State updates for performance reasons in
02:19 - reality it's going to look something
02:20 - like
02:22 - this we're taking count which is zero
02:25 - adding one to it count didn't update yet
02:27 - it's still zero add one to it take count
02:31 - which is still zero because we didn't
02:32 - update add one to it in reality what
02:34 - we're doing is setting count to be one
02:37 - three separate times and then updating
02:40 - this would be similar to me hitting the
02:42 - refresh button on my web browser a bunch
02:44 - of times we've sent a bunch of commands
02:47 - to refresh the web browser but we may
02:49 - only end up refreshing once not each
02:51 - time I click the button that's because
02:53 - our web browser has its own event Loop
02:55 - cycle that's a similar way of thinking
02:57 - about it if for some reason you need to
03:00 - use multiple State updates you'll want
03:02 - to use an updator function here's
03:05 - how we're going to write a function our
03:08 - function has one
03:10 - parameter count in this case Arrow then
03:14 - do this let's write an arrow function
03:16 - for each set
03:21 - count so this will work however you'll
03:25 - want to rename count to be something
03:26 - else we're going to be working with the
03:29 - previous state of count not the current
03:31 - state we're using the previous state of
03:33 - count to calculate the next state
03:36 - according to the react documents you'll
03:38 - want to rename count as either something
03:41 - like previous
03:47 - count such as this or you can take the
03:51 - first letter of the state variable in
03:53 - this case
03:58 - C I find taking the first letter of the
04:01 - state variable much more easier to read
04:04 - it's less ver Bose so this will work
04:06 - then when I press the increment button
04:08 - we're updating the state three separate
04:11 - times C represents the previous count
04:15 - not the current count with our updator
04:17 - function we're taking the pending state
04:20 - to calculate the next state not the
04:23 - current state we don't update until
04:25 - later when we pass in an updator
04:27 - function we're adding all of these
04:29 - updator functions to a q a q is a type
04:32 - of data structure a q is similar to a
04:35 - bunch of people waiting in line it's
04:37 - first come first serve the first person
04:39 - in line is going to be helped first so
04:42 - during the next render it will call all
04:44 - of these functions in order rather than
04:46 - batch them all together when using
04:49 - multiple State updates you'll want to be
04:51 - sure to use updator functions it is good
04:53 - practice whenever possible to use
04:55 - updator functions just for consistency
04:58 - even if you're only going to up update
04:59 - the state
05:02 - once it would still be good practice to
05:04 - use an updater function it will help
05:07 - future proof your code in case you ever
05:09 - need to update the state
05:11 - again so now let's take our decrement
05:14 - function currently we're updating the
05:16 - current state of count not the previous
05:19 - state let's begin by setting up a
05:21 - parameter of count Arrow then do this
05:25 - but we'll want to be sure to rename
05:27 - count just to show that we're working
05:29 - with the previous state not the current
05:31 - state let's rename count as the first
05:34 - letter of the state variable which is c
05:36 - c arrow take C minus one let's do this
05:40 - two additional times now when we
05:43 - increment we will increment three
05:45 - separate times and we can decrement
05:47 - three separate times now last we have
05:51 - reset with the setter function we're not
05:54 - dependent on the previous state all
05:56 - we're doing is setting count to be zero
05:58 - if I was going to use use an updator
06:00 - function it would look like this C Arrow
06:03 - C equals z we really don't care about
06:07 - the previous state this would still
06:09 - technically work we don't really need
06:11 - our count for anything we're setting c
06:13 - equal to zero because by passing in zero
06:16 - we're already sending it to be zero in
06:18 - this specific example an updator
06:20 - function wouldn't be necessary because
06:22 - we don't need the previous state all
06:24 - right everybody so those are updator
06:26 - functions it's a function passed as an
06:29 - argument
06:29 - to set State usually when updating a
06:33 - state variable you'll pass in an arrow
06:35 - function if we were working with a state
06:37 - variable of year I would pass in an
06:39 - arrow function that looked like this we
06:41 - have a parameter of Y Arrow let's take y
06:45 - + one if I was incrementing our year by
06:48 - one in this case by using updator
06:50 - functions they allow for safe updates
06:53 - based on the previous state not the
06:55 - current state this allows for multiple
06:57 - State updates and is used with with
06:59 - asynchronous functions it's a good
07:01 - practice to use updat functions whenever
07:03 - possible we will be using updator
07:05 - functions in the future and well
07:07 - everybody those are updator functions in
07:13 - react