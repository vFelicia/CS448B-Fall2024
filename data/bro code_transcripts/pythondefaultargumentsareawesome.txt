00:00 - hey everybody today I'm going to explain
00:02 - default arguments default arguments are
00:05 - a default value for certain parameters
00:08 - the default is used when that argument
00:10 - is omitted when you invoke a function in
00:13 - the last topic we discussed positional
00:15 - arguments today we will be examining
00:17 - default arguments then in future topics
00:20 - we'll examine keyword and arbitrary
00:22 - arguments let's begin let's define a
00:25 - function to calculate net price
00:28 - there will be three parameters an
00:30 - original list price
00:33 - a discount if there is one and sales tax
00:39 - we will return a net price and here's
00:43 - the formula
00:44 - list price times
00:47 - one minus our discount percentage
00:52 - times
00:54 - 1 plus our sales tax
00:57 - maybe I'm buying a PlayStation 5 for
01:00 - 500.
01:02 - I will pass in 500 for the list price
01:05 - well I can't actually execute this
01:07 - function without also passing in an
01:09 - argument for Discount and tax perhaps
01:12 - the discount is zero and the sales tax
01:14 - is five percent 0.05
01:18 - well this would work and I should
01:19 - probably put this within a print
01:20 - statement so you can see it
01:24 - there we are my total is 525 dollars the
01:27 - list price of 500 no discount and 5
01:30 - sales tax now suppose that maybe ninety
01:34 - percent of the time when we're executing
01:36 - this function most of the time discount
01:38 - is zero and our sales tax is almost
01:40 - always the same what we could do to make
01:43 - this function a little more flexible is
01:45 - to set these two parameters to have a
01:48 - default value in place of sending in
01:50 - three arguments we can pass in one then
01:53 - set our discount and our tax to have a
01:55 - default value so I will set discount to
01:58 - be zero
01:59 - and tax to be 0.05 meaning 5 percent
02:04 - so this function would work our total is
02:06 - 525 and that's assuming that our
02:09 - discount is zero and our tax is five
02:12 - percent the nice thing about using
02:14 - default arguments is that let's say that
02:16 - somebody has a discount well this
02:18 - function would also accept up to two
02:21 - additional arguments
02:22 - so let's print
02:25 - our net price
02:27 - 500 and our customer has a coupon for 10
02:31 - off I'll add a second argument of 0.1
02:36 - if we're passing in an argument for our
02:39 - discount we'll use whatever is passed in
02:41 - rather than the default our total now is
02:44 - 472 dollars and 50 cents or maybe this
02:47 - time
02:49 - they are not paying sales tax I will set
02:52 - the sales tax to be zero
02:54 - now the customer's total is four hundred
02:57 - fifty dollars so that's kind of the nice
02:59 - thing about default arguments it makes
03:01 - your functions more flexible and it can
03:03 - reduce the number of arguments
03:04 - especially if the arguments that you're
03:06 - passing in tend to be consistent most of
03:08 - the time people don't have a discount
03:10 - and almost everybody is paying five
03:12 - percent sales tax why pass in arguments
03:14 - we don't have to let's cover an exercise
03:17 - we'll create a count up timer
03:20 - we will import the time module we will
03:23 - Define this function
03:25 - Define count
03:27 - there will be two arguments
03:29 - start and end
03:34 - for x and range
03:38 - start
03:39 - comma
03:41 - and
03:42 - within the range function the second
03:44 - argument is exclusive so I'm going to
03:46 - add 1 to the end of our time
03:50 - then I will print
03:52 - X to make this thread that's running the
03:55 - program sleep you can access the time
03:56 - modules Sleep Method pass in one for one
04:00 - second
04:01 - then outside of the for Loop let's print
04:04 - the word done
04:07 - to invoke this function I need to pass
04:09 - in two arguments
04:11 - a start time and an end time I'll set
04:14 - the start time to be zero the end time
04:16 - to be 10 10 seconds
04:19 - so we start at zero then we will
04:21 - increment by one every second
04:23 - I'll speed up the video I think you get
04:25 - the idea but we'll stop at 10.
04:30 - let's assume that most of the time a
04:33 - user would like to begin at zero well we
04:35 - don't necessarily need to pass that in
04:37 - as an argument let's set our start
04:39 - parameter to have a default value of
04:41 - zero
04:43 - we only need to pass in one argument but
04:46 - we do have a problem
04:47 - non-default arguments should follow
04:50 - default arguments so if you use any
04:53 - default arguments
04:54 - you'll want to be sure that they're
04:56 - after any positional arguments so let's
04:59 - reverse these
05:01 - and that should work
05:03 - so now when I run this program it's
05:05 - assuming we'd like to start at zero
05:08 - but we'll need to pass in an ending
05:10 - amount of seconds when do we want to
05:12 - stop
05:14 - that works the same but now we do have
05:17 - the option of starting at a different
05:19 - number this time let's end at 30 but we
05:23 - will begin at 15.
05:26 - we're beginning at 15 then we will count
05:29 - to 30. I'll speed up the video
05:36 - there we are all right everybody so in
05:38 - conclusion default arguments they are
05:41 - default values for certain parameters
05:43 - the default value is used when an
05:46 - argument is omitted they can make your
05:48 - functions more flexible and reduce the
05:50 - number of arguments you have to pass in
05:52 - especially if those arguments are
05:54 - consistent most of the time so those are
05:56 - default arguments and in the next topic
05:58 - we will discuss keyword arguments and
06:00 - well yeah those are default arguments in
06:03 - Python