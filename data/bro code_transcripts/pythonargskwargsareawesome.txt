00:00 - Hello friends it's me again today I need
00:02 - to explain arbitrary arguments arbitrary
00:05 - meaning a varying amount of arguments we
00:07 - don't know how many arguments the user
00:09 - is going to pass in when they invoke a
00:10 - function to accept a varying amount of
00:13 - arguments developers tend to use these
00:15 - parameters of args and quarks args means
00:19 - arguments quarks means keyword arguments
00:22 - you would want to prefix each of these
00:24 - parameters with the unpacking operator
00:26 - which is an asterisk when you invoke a
00:28 - function that has args or quarks as
00:31 - parameters you will pack all of those
00:33 - arguments into a tuple if it's args or a
00:37 - dictionary if the parameters quarks
00:39 - let's go over an example I will create a
00:42 - function to add two numbers together
00:45 - Define add function there will be two
00:48 - parameters
00:49 - a comma B
00:52 - all I'm going to do is return a plus b
00:57 - I will invoke this function pass in two
01:00 - arguments because we have two parameters
01:01 - set up one comma two then I'm going to
01:05 - print the result
01:08 - big surprise there my function return
01:10 - three all right well what if I would
01:13 - like to pass in three parameters this
01:15 - time well I can no longer use this
01:18 - function the add function it takes two
01:20 - positional arguments but three were
01:22 - given I could modify this function so
01:25 - that it could accept a varying amount of
01:27 - arguments any amount I'm going to
01:30 - replace the parameters with asterisk
01:33 - than the word args meaning arguments so
01:36 - when we use the unpacking operator
01:38 - what's going to happen now is that with
01:40 - the arguments that we pass into this
01:42 - function we will pack them all into a
01:44 - tuple and if you don't believe me let's
01:46 - test it I'm going to print the type
01:50 - of args then I'm going to remove this
01:53 - print statement for now
01:55 - my parameter args is a tuple that I
01:58 - could work with we can use the built-in
02:00 - methods of this Tuple or we could
02:02 - iterate over it
02:04 - I'm going to iterate over this Tuple
02:06 - for every ARG in args for every argument
02:11 - in arguments what we'll do is create a
02:15 - variable name total to keep track of the
02:17 - total
02:19 - total plus equals the current ARG that
02:22 - we're iterating over
02:24 - then at the end I will return the total
02:28 - let's print the results print
02:31 - add these three numbers together
02:33 - there we are my total is six then we can
02:36 - pass in any amount of arguments for this
02:38 - time
02:39 - maybe five
02:41 - or even one
02:44 - with my parameter args you can change
02:47 - this name to something else like nums
02:50 - meaning numbers for every num in nums
02:55 - total plus equals num
02:58 - this would work too the name of the
03:01 - parameter isn't as important as the
03:03 - unpacking Operator just by typical
03:05 - naming conventions people tend to stick
03:07 - with args but the parameter name can
03:09 - vary
03:11 - let's try a different example
03:12 - let's create a function to display
03:14 - somebody's name
03:16 - display name
03:19 - we will accept a varying amount of
03:21 - arguments use the unpacking operator
03:24 - then follow the unpacking operator with
03:26 - the unique parameter name for every ARG
03:29 - in args
03:32 - let's print each argument
03:36 - then replace the ending character of my
03:38 - print statement with the space
03:40 - now sometimes people can have a varying
03:43 - number of names in their full name there
03:45 - can be a first name middle name last
03:47 - name maiden name a title
03:49 - Etc so I'm going to pass in just a first
03:53 - name and a last name
03:55 - SpongeBob
03:58 - SquarePants
04:02 - if I need to add a middle name I can do
04:05 - that SpongeBob Harold SquarePants
04:08 - or a title
04:11 - doctor SpongeBob Harold SquarePants
04:16 - the Third
04:20 - yeah as I was saying with the unpacking
04:23 - operator followed by a unique parameter
04:25 - name you can pack all of these arguments
04:28 - into a tuple which you can use within
04:31 - this function
04:32 - now let's discuss quarks you use two
04:35 - unpacking operators then typically
04:38 - people follow this with the word quarks
04:40 - meaning keyword arguments it allows you
04:43 - to pass multiple keyword arguments which
04:46 - we discussed in the last topic I think
04:48 - this would be great for an address
04:49 - Define
04:52 - print
04:53 - address function
04:57 - use double asterisks then we can add a
05:00 - parameter name but people usually stick
05:02 - with quarks meaning keyword arguments
05:05 - just as a placeholder I'm going to type
05:07 - pass pass doesn't do anything I want
05:10 - this program to be able to run we'll get
05:12 - back to this function momentarily I'm
05:14 - going to invoke this function print
05:16 - address
05:19 - then pass in multiple keyword arguments
05:22 - with an address you would typically have
05:24 - a street
05:26 - a city
05:30 - State depending on what country you live
05:33 - in you may have more or less of these
05:34 - keyword arguments I live in the United
05:37 - States we have a state
05:39 - than a zip code
05:41 - okay my street will be I'm just making
05:44 - something up here one two three fake
05:47 - Street
05:48 - City will be Detroit
05:52 - State Michigan
05:55 - zip code
05:57 - 54321
06:00 - just to make this look better I'm going
06:01 - to place each of these keyword arguments
06:03 - on a new line for me that's just more
06:05 - readable but you do you when I pass in
06:08 - these keyword arguments we will pack
06:10 - them into a dictionary
06:13 - just to prove it let's print the type
06:17 - of quarks
06:19 - look at that class dictionary
06:22 - within this function you can treat
06:24 - quarks as if it's a dictionary there's a
06:27 - lot of built-in methods or we could
06:29 - iterate over the keys the values or both
06:31 - to iterate over the values let's say for
06:34 - every value in
06:37 - our dictionary quarks
06:39 - dot values method
06:43 - print every value
06:47 - here's all the values
06:49 - for the keys let's change this for Loop
06:52 - to be for every key in quarks dot Keys
06:57 - method print every key
07:01 - here are the keys for both you could say
07:03 - for every key comma value in quarks dot
07:09 - items method print every key actually
07:12 - let me turn this into an F string
07:14 - print every key
07:17 - colon
07:19 - value
07:24 - the items method will return key value
07:26 - pairs
07:28 - we can pass in a varying amount of
07:30 - keyword arguments
07:32 - I'm going to add an apartment number
07:34 - apartment equals 100.
07:41 - our keyword argument of apartment was
07:44 - packed into a dictionary along with all
07:46 - these other keyword arguments so that's
07:48 - kind of nice we could pass in a varying
07:50 - amount of keyword arguments let's cover
07:52 - an exercise we're going to use both args
07:54 - and quarks together
07:57 - we will print a shipping label Define
08:01 - shipping label function
08:04 - the parameters will be both args comma
08:07 - quarks
08:09 - then just for now I'm going to write
08:11 - past
08:12 - just so that this program will work for
08:14 - now we'll fill in the shipping label
08:15 - function momentarily when we invoke the
08:18 - shipping label function
08:19 - we will first pass in any positional
08:22 - arguments
08:23 - followed by keyword arguments and it
08:26 - won't work the other way around I'll
08:27 - prove that in a little bit
08:29 - so let's say we have doctor
08:33 - SpongeBob
08:36 - SquarePants
08:39 - the Third
08:42 - then I'll add my keyword arguments
08:45 - I'm going to put this on a new line
08:47 - Street equals one two three fig Street
08:53 - apartment equals 100
08:58 - City
09:00 - equals Detroit
09:06 - equals Michigan
09:09 - zip
09:11 - equals five four three two one
09:15 - when we invoke this function we have a
09:17 - mix of arbitrary positional arguments
09:19 - and arbitrary keyword arguments this
09:23 - shipping label function is designed to
09:25 - accept both you do need args first
09:28 - followed by quarks this program will run
09:31 - but if we have it the other way around
09:33 - quarks followed by args
09:37 - it's not going to function properly you
09:39 - can see that we have a syntax error
09:43 - with your parameters make sure that your
09:45 - keyword arguments follow your positional
09:47 - arguments
09:48 - let's iterate over the positional
09:50 - arguments first
09:51 - for every ARG in args
09:55 - let's print each ARG
09:59 - then I will change the ending character
10:01 - of my print statement to be a space
10:04 - here's the name of the user who we're
10:06 - shipping something to with the shipping
10:08 - label function
10:10 - I will print a new line then we will
10:13 - iterate over all the keyword arguments
10:16 - for every value in my dictionary quarks
10:22 - dot values method
10:25 - I will print each value
10:28 - then I will change the ending character
10:30 - of my print statement to be a space
10:35 - all right it's not looking too bad so
10:36 - far
10:38 - if you were to remove some keyword
10:40 - arguments or some positional arguments
10:43 - this should work still which it does
10:46 - I'm going to change the format of this
10:48 - address slightly
10:49 - let's add our street on one line then
10:52 - the city state and zip code on the next
10:55 - line
10:56 - let's get rid of this for Loop
10:59 - to print the street I'm going to print
11:02 - use an F string add a placeholder
11:07 - quarks dot get method I'm going to get
11:10 - the street key
11:13 - with this get method you'll probably
11:14 - need to place them within single quotes
11:16 - because if you use double quotes python
11:19 - gets confused as to where this F string
11:21 - ends
11:21 - we will use single quotes
11:24 - Let's test it
11:25 - all right we have a street
11:27 - on the next line we will print the city
11:29 - state and zip
11:33 - print fstring placeholder quarks dot get
11:39 - within single quotes
11:42 - the city
11:44 - I'll add another placeholder
11:48 - quarks dot get
11:51 - state
11:54 - then quarks
11:56 - dot get zip
11:59 - let's see what we have
12:01 - all right not too bad
12:04 - what if the user has an apartment
12:05 - keyword apartment equals number 100.
12:12 - well we should probably add that too
12:13 - within this top print statement I will
12:16 - add another placeholder
12:19 - invoke the get method of the dictionary
12:22 - the key we are looking for is apartment
12:26 - Dr SpongeBob SquarePants one to three
12:28 - fake Street apartment number 100 Detroit
12:30 - Michigan 54321
12:32 - what if our print statement is set up to
12:35 - display a street and an apartment but
12:37 - the user doesn't have an apartment
12:40 - this would display none and we don't
12:43 - want that I'm thinking what we'll do is
12:46 - we'll place this print statement within
12:48 - an if statement
12:50 - what we'll check is if
12:54 - apartment
12:56 - in quarks
13:01 - if there's an apartment key
13:03 - in quarks our dictionary
13:05 - then print this line
13:09 - else we will print
13:13 - just the street
13:18 - the person doesn't have an apartment we
13:20 - won't print the apartment then
13:22 - but if they do have an apartment
13:24 - apartment equals number 100
13:28 - then we will one two three fake Street
13:31 - apartment number 100.
13:33 - here's a challenge round what if a user
13:36 - has a PO Box let's change apartment to
13:39 - PO box
13:42 - the string will be PO box number 1001 I
13:47 - suppose
13:48 - I'll add an else if statement
13:51 - else if
13:54 - PO box
13:57 - in our dictionary quarks
14:01 - let's print the street
14:03 - I'll copy this line paste it
14:07 - followed by a second print statement
14:12 - quarks.getpo box
14:18 - there we are Dr SpongeBob SquarePants 23
14:21 - fig Street P.O box 1001 Detroit Michigan
14:24 - 54321
14:26 - all right everybody those are arbitrary
14:28 - arguments when you invoke a function you
14:31 - can pass in a varying amount of
14:32 - arguments set up your parameter to be
14:35 - args for a varying amount of non-keyword
14:38 - arguments or quarks for a varying amount
14:41 - of keyword arguments you can set up both
14:44 - in your parameters which we did for this
14:45 - exercise and well everybody those are
14:48 - arbitrary arguments in Python