00:00 - hello everybody today I'm going to
00:01 - attempt to explain recursion in just a
00:04 - few minutes think of recursion as just a
00:06 - function that calls itself from within
00:09 - it helps to visualize a complex problem
00:11 - into repeatable basic steps these steps
00:14 - can be solved more easily either
00:16 - iteratively using a for Loop or a while
00:19 - loop or recursively which we'll talk
00:21 - about momentarily let's say we have a
00:23 - complex task like walking we can break
00:25 - walking down in two basic steps such as
00:28 - taking a single step multiple times
00:30 - let's write a program that does this
00:32 - both iteratively and recursively and
00:35 - take a look at the differences if I were
00:37 - to create an iterative walk function
00:40 - let's define a function to walk but a
00:43 - user has to pass in a given amount of
00:45 - steps how many steps do you want to take
00:48 - then I'm going to invoke this function
00:50 - let's say 100 steps if I were to take an
00:54 - iterative approach within this function
00:56 - I could create a loop such as a for Loop
00:59 - for every step in my range
01:03 - one through steps plus one
01:06 - I'm going to print an F string you take
01:11 - step number
01:14 - step
01:15 - so that solves our problem we have taken
01:18 - a single step 100 times to simulate
01:21 - walking so that's an iterative approach
01:23 - We're looping within a function now
01:26 - let's take a recursive approach
01:31 - recursion involves a function calling
01:33 - itself from within at the end of our
01:35 - function I'm going to invoke the walk
01:37 - function again but I will pass in steps
01:40 - minus one let's change step two steps
01:43 - we're invoking this function from within
01:45 - it's creating a loop but we will include
01:48 - the function itself whereas in with
01:50 - iteration We're looping only within the
01:52 - function let's see what happens
01:54 - recursion error maximum recursion depth
01:57 - exceeded this time we're beginning at
01:59 - 100
02:00 - we're iterating downwards and we're
02:02 - going below zero we don't want to take
02:04 - negative steps we need what is known as
02:07 - a base condition when do we want to stop
02:09 - I'm going to add one line
02:12 - if
02:13 - steps is equal to zero
02:17 - to exit a function you can return
02:19 - let's try that again
02:23 - that's much better but we're counting
02:25 - downwards I would like to count up I'm
02:28 - only going to print the number of steps
02:30 - after we invoke the walk function
02:35 - okay that solves our problem so how does
02:37 - this work exactly when we enter the walk
02:39 - function after accepting a number of
02:41 - steps we check our base condition then
02:44 - we invoke the walk function again but
02:46 - pass in one less than the number we
02:48 - originally accepted in a way we're
02:50 - creating a loop but we're involving the
02:52 - function itself when you invoke a
02:54 - function you add what is known as a
02:57 - frame to the call stack there is a
02:59 - certain order in which we resolve
03:00 - functions it's a stack data structure
03:03 - you start at the top and work your way
03:05 - down it's like a stack of CDs or movies
03:07 - we add frames to the call stack until
03:10 - our condition is met then we undo
03:12 - everything starting at the top if you
03:14 - have too many frames on the call stack
03:16 - let's walk a thousand steps this is what
03:19 - would happen
03:20 - recursion error maximum recursion depth
03:23 - exceeded there's a limit to how many
03:25 - frames can be on the call stack that's
03:27 - an issue to keep into consideration you
03:29 - can solve many problems either
03:31 - iteratively or recursively for a problem
03:33 - such as this I would stick with an
03:35 - iterative approach a recursive approach
03:38 - tends to be slower than an iterative
03:40 - approach but at times it can be simpler
03:42 - to write which you'll see in data
03:45 - structures and algorithms recursion is
03:46 - going to be your best friend let's take
03:48 - a different approach we will find the
03:50 - factorial of a number both iteratively
03:53 - and recursively I will Define a
03:56 - factorial function we will pass in X as
03:59 - an argument if I was to write this
04:01 - function iteratively I will want to keep
04:03 - track of a result
04:05 - result equals one
04:07 - if x is greater than zero
04:11 - I will iterate using a for Loop for y in
04:16 - range
04:17 - 1 comma X plus one
04:22 - I will take our result equals result
04:27 - times y but we could simplify this to
04:31 - result times equals y then outside of
04:34 - the for loop I will return whatever the
04:37 - result is
04:38 - so let's invoke the factorial function
04:40 - pass in a number like 10 then I will
04:44 - print whatever is returned
04:47 - so factorial 10 is 3628 800.
04:53 - if I was to take a recursive approach
04:56 - that would look something like this
04:57 - we'll need a base condition when do we
05:00 - stop
05:01 - if x is equal to one
05:04 - then we will return
05:06 - one
05:08 - else all we need to do is return x times
05:14 - invoke the factorial function again but
05:18 - we will pass in x minus 1.
05:21 - and that's all we have to do even though
05:23 - recursion is slower than iteration the
05:26 - code can be simpler and easier to write
05:29 - with a problem like this I would stick
05:31 - with a recursive approach
05:33 - alright everybody in conclusion
05:34 - recursion is just a function that calls
05:37 - itself from within it helps to visualize
05:39 - a complex problem into repeatable basic
05:42 - steps problems can be solved more easily
05:45 - either iteratively or recursively well
05:48 - everybody that is recursion hey if this
05:50 - video helped you out please help me out
05:52 - by Smashing that like button leave a
05:54 - random comment down below and subscribe
05:56 - if you'd like to become a fellow bro