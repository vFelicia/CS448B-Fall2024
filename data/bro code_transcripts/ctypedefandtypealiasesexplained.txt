00:01 - hey everyone in this topic i'm going to
00:03 - explain typedefs and type aliases now
00:06 - typedef is a reserved keyword used to
00:08 - create an additional name for another
00:10 - data type kind of like a nickname it's a
00:13 - new identifier for an existing type one
00:15 - of the reasons that people use typedef
00:17 - is that it helps with readability and
00:19 - reduces typos here's an example in this
00:22 - example i'll need to include this header
00:24 - file
00:25 - include
00:27 - vector
00:28 - suppose we have this very long data type
00:31 - and i would like to give it a nickname
00:32 - an alias
00:34 - i would type the keyword type def then
00:37 - list the original data type so we're
00:39 - used to strings ins doubles well here's
00:43 - a really complicated one and of course i
00:45 - don't expect anybody to know this at
00:46 - this level yet
00:48 - standard
00:49 - vector
00:52 - standard
00:54 - pair
00:56 - standard string
00:59 - int so this is one really long data type
01:02 - this could be a data type for a pair
01:04 - list but i don't want to have to type
01:06 - all of this so what i could do is give
01:09 - this data type an alias using this
01:11 - typedef keyword after the original data
01:14 - type i'll come up with a new name a new
01:16 - identifier let's say pair
01:18 - list
01:20 - that's a lot easier to write than all of
01:21 - this for the data type
01:23 - a common convention when using the
01:25 - typedef keyword the new identifier
01:28 - usually ends with underscore t for type
01:32 - now suppose i declare a variable of this
01:34 - data type
01:37 - standard vector standard pair standard
01:39 - string int let's say the name is pair
01:42 - list in place of using the original data
01:45 - type we can use the new identifier
01:50 - pair list underscore t so that's one of
01:53 - the main benefits of using the typedef
01:55 - keyword we can give a new identifier to
01:57 - an existing data type it helps with code
02:00 - readability and helps reduce typos this
02:03 - data type is way beyond our level of
02:05 - understanding right now let's try some
02:07 - simple examples i'll turn this line into
02:09 - a comment
02:11 - then get rid of that
02:13 - let's create a typedef for standard
02:15 - strings
02:16 - type
02:17 - def
02:18 - then we list the original data type
02:21 - standard string
02:23 - in place of using standard string as the
02:25 - data type i'll create a new identifier
02:27 - for this data type as maybe just text
02:30 - text underscore t if i need to create a
02:33 - string i could use this new identifier
02:35 - in place of saying standard string then
02:38 - maybe first name
02:42 - i can replace the data type with the new
02:44 - identifier if i choose to
02:46 - text t
02:47 - and i'll set my first name equal to
02:49 - whatever my first name is feel free to
02:51 - set it to your own first name and this
02:53 - variable behaves exactly like a string
02:56 - so let's display it standard output
03:00 - first name
03:04 - and then we should have our first name
03:08 - yeah there we are
03:09 - okay now let's try this with an integer
03:13 - type
03:14 - def we list the old data type int
03:17 - let's create an identifier for int as
03:20 - number
03:21 - that's more descriptive
03:23 - underscore t
03:25 - although it's more to write technically
03:27 - in place of using the int data type i
03:29 - could use
03:31 - number t and this is technically an
03:33 - integer
03:34 - let's say age then make up some age
03:38 - standard output i will display my age
03:41 - then i will add a new line
03:48 - yep we have our first name and our age
03:51 - now typedef has largely been replaced
03:54 - with the using keyword that's because
03:56 - the using keyword works better with
03:58 - templates which is a topic for another
04:00 - video so in place of using typedef i
04:02 - recommend using the using keyword
04:07 - so i'm going to turn these lines into
04:08 - comments
04:10 - now if we were to use the using keyword
04:12 - we would type using
04:15 - then the new data type
04:17 - so let's say text t
04:20 - equals the old data type
04:22 - standard string
04:26 - then let's do that with number
04:28 - using
04:30 - the new identifier number t
04:33 - equals int and that would work the same
04:37 - we have our first name and our age the
04:39 - using keyword is more popular than
04:41 - typedef nowadays just because it's more
04:43 - suitable for templates and like i said
04:45 - that's a topic for another video alright
04:48 - everybody that is the typedef keyword
04:50 - and type aliases typedef along with the
04:53 - using keyword they're used to create an
04:56 - additional name an alias or nickname for
04:59 - another data type it's a new identifier
05:02 - for an existing data type it helps with
05:04 - readability and it reduces typos however
05:07 - you should really only be using the
05:09 - typedef and using keywords when there is
05:11 - a clear benefit so yeah that is typedefs
05:14 - and type aliases your assignment is to
05:16 - post a typedef in the comments section
05:18 - down below and well yeah those are
05:21 - typedefs and type aliases in c plus