00:00 - hey everybody in today's video we're
00:01 - going to create a beginners slot machine
00:04 - program using python this Project's
00:06 - meant for beginners so let's get started
00:08 - when creating a project I like to break
00:10 - up that project into different sections
00:13 - then tackle them one at a time so with
00:14 - the slot machine what are some of the
00:16 - different functions we'll need well
00:18 - we'll need to spin a row we'll Define a
00:21 - function to spin row as a placeholder
00:25 - I'll write pass we'll return to this
00:26 - function later we need to display or
00:29 - print the
00:31 - row print
00:36 - row if somebody gets matching symbols on
00:39 - the slot machine we need to give them a
00:41 - payout we'll create a function to get
00:45 - payout in this function we'll calculate
00:48 - what that payout is going to be but
00:50 - again we'll get to that later we'll
00:52 - write the majority of our code within a
00:54 - main
00:58 - function at the end of this program I
01:00 - will add the if statement of if Dunder
01:03 - name is equal to a string of Dunder
01:08 - main then we will call the main function
01:11 - which drives our code this program can
01:14 - be imported or stand alone it is good
01:16 - practice to add this if statement a
01:18 - majority of the code we're going to
01:19 - write is going to be within our main
01:21 - function So within our main function
01:23 - let's declare the variables we'll need
01:25 - throughout this program we will need a
01:27 - starting balance which I will just name
01:29 - same balance we will start with 100 as
01:32 - in
01:34 - $100 we'll need to display some sort of
01:36 - Welcome message let's print something we
01:40 - will print welcome to Let's name our
01:43 - game python
01:47 - slots just for some flavor I'm going to
01:49 - add some text decoration just a bunch of
01:52 - asterisks I think it'll look cool but
01:55 - you don't have
01:57 - to Let's display our symbols we're going
01:59 - to use
02:02 - use symbols I'll add some emojis we'll
02:06 - use emojis in this program in place of
02:08 - images if you're on Windows you can hold
02:10 - down the window key plus semicolon let's
02:13 - add a cherry you typically see a lot of
02:16 - fruit in slot machines a
02:22 - watermelon a
02:26 - lemon there's also a lot of bells for
02:28 - some reason
02:30 - but we'll add those and a
02:35 - star let me just align
02:44 - everything let's do a test
02:47 - run welcome to python
02:50 - slots let me make one
02:54 - adjustment okay I'm happy with
02:57 - that so after our welcome message
02:59 - message we'll continue playing this game
03:02 - while our balance is greater than zero
03:06 - while we still have money we can
03:08 - continue playing we will print I'll use
03:11 - an F
03:12 - string current
03:15 - balance colon space I'll add a
03:18 - placeholder pick a unit of currency I'll
03:20 - pick American dollars then we will
03:23 - display the users's balance we will
03:26 - prompt the user to enter in their bet
03:28 - which we will assign to a variable of
03:31 - bet so
03:35 - input place your bet
03:40 - amount let's do a test
03:43 - run welcome to python slots current
03:46 - balance $100 place your bet amount we
03:50 - won't deduce the BET amount from the
03:52 - balance quite yet I just want to be sure
03:54 - that we can enter in something
03:56 - $1 good $10
04:00 - $1 what if somebody types in a word like
04:04 - pizza we need to prevent that input and
04:06 - correct
04:10 - it we'll check if take our bet use the
04:15 - is digit method is our bet a digit if
04:19 - somebody types in a word like pizza we
04:21 - need to tell them that's not valid so
04:24 - this will return true if our bet is a
04:27 - digit but we're going to use the not not
04:30 - logical operator if our bet is not a
04:34 - digit then do
04:36 - this we will
04:39 - print please enter a valid
04:44 - number followed by the continue keyword
04:48 - the continue keyword will skip the
04:50 - current iteration of this Loop and start
04:52 - from the
04:54 - beginning Let's test it
04:59 - place your bet amount
05:01 - pizza please enter a valid number we
05:04 - have our current balance again place
05:06 - your bet amount I'll type in
05:09 - one okay we did not get that message of
05:11 - please enter a valid number this bet of
05:14 - $1 is
05:16 - valid so if our bet is a digit we'll
05:19 - convert it to be an integer using typ
05:21 - casting because when you accept user
05:23 - input it's a string it has the string
05:26 - data type let's reassign our bet typ
05:30 - cast our bet as an
05:34 - integer then we will check to see if our
05:36 - bet is greater than our balance people
05:39 - can't bet money that they don't
05:42 - have if the bet is greater than the
05:46 - current balance if bet is greater than
05:48 - balance we will print this message
05:51 - instead in sufficient
05:56 - funds then continue
06:02 - if somebody tries to bet negative money
06:05 - or no money we'll add this statement if
06:08 - bet is less than or equal to
06:12 - zero we will
06:15 - print bet must be greater than zero and
06:25 - continue if all these checks pass if our
06:27 - bet is not a digit if our bet is greater
06:30 - than our balance or if our bet is
06:33 - greater than zero we will take our
06:35 - original
06:39 - balance minus equals our bet to subtract
06:43 - it let's do a test
06:46 - run place your bet amount pizza please
06:50 - enter a valid number I will
06:54 - bet1 kajillion dollars insufficient
06:57 - funds yeah no kidding
07:01 - 0 bet must be greater than zero what
07:05 - about $1 our bet should be subtracted
07:08 - from our balance let's try 10 we are now
07:11 - down to
07:13 - 899 let's bet
07:16 - $90 insufficient funds
07:20 - 89 and that has appeared to
07:22 - work once we subtract our bet from our
07:25 - balance we will call the function to
07:28 - spin row
07:32 - this function is going to return a list
07:35 - which we will assign to be row row will
07:39 - be a list using the spin row function we
07:42 - have to generate three random symbols
07:44 - then return them within a list we'll
07:46 - work on the spin row function
07:48 - next within our spin row function we
07:51 - will declare a list of
07:54 - symbols add your
07:58 - symbols but these Need to Be
08:03 - Strings make sure they're all comma
08:18 - separated there we go this is where list
08:21 - comprehensions can come in if you don't
08:24 - know what a list comprehension is here's
08:26 - an alternative we will declare an empty
08:29 - list of results this is an empty list we
08:33 - need a for Loop to generate three random
08:35 - symbols we could say
08:38 - for
08:40 - symbol in range
08:44 - three this for Loop will iterate three
08:47 - times during each iteration let's take
08:50 - our empty list of results use the append
08:54 - method we will append a random. choice
09:00 - among our
09:02 - symbols so we need to import the random
09:07 - module we'll do so at the
09:10 - top import
09:12 - random we're telling the random module
09:14 - to pick a random Choice from this list
09:17 - of
09:18 - symbols then we will append them to our
09:21 - empty list of results after we escape
09:24 - the for Loop we will return our results
09:29 - it's a list now a much better option is
09:32 - to use a list comprehension here's how
09:36 - it's going to be a lot more concise we
09:38 - will return a list within the list we
09:42 - will write a list comprehension for
09:45 - every let's say
09:47 - symbol in range
09:50 - three there is no condition what do we
09:54 - want to return during each
09:57 - iteration access the random module
10:00 - use the choice
10:02 - method then pass in our
10:05 - symbols symbol isn't used in this
10:08 - example what you may see people do is
10:10 - use an underscore as a placeholder
10:13 - basically what we're saying is for every
10:15 - iteration in range three return a random
10:19 - symbol that's all we need for the spin
10:21 - row
10:23 - function going back we have our list of
10:26 - row afterwards I am going to print it to
10:29 - test it print
10:31 - row and we should have three random
10:34 - symbols after making a bet all right it
10:38 - looks like it's
10:41 - working we'll make a few changes
10:45 - though instead of printing our row I'm
10:48 - going to print the word
10:53 - spinning I will add a new line character
10:56 - just to give us some space like after
10:58 - this work of spinning then we will call
11:01 - the print row
11:05 - function we'll pass in one argument our
11:08 - row that's returned to us after we spin
11:11 - the row so going to our print row
11:14 - function we need to set up one parameter
11:17 - our row that we receive it's going to be
11:19 - a list one easy way to print the
11:22 - elements of a list is that we can print
11:25 - pick some sort of separator for each
11:26 - item in the list for example I'll just
11:28 - print a space with strings there are
11:31 - built-in methods we will use the join
11:33 - method then pass in our list or other
11:37 - iterable basically what we're saying
11:39 - using the join method we're going to
11:41 - take our iterable in this case our list
11:44 - join each element by a space a space
11:46 - character here's the
11:50 - result we have three symbols you could
11:53 - join them by a different character I'll
11:56 - add a vertical
11:58 - bar and to your beted amount $1 now we
12:01 - have a vertical bar between each of
12:03 - these symbols we could include more than
12:05 - one character I'll add a space before
12:07 - and after this vertical bar just to
12:09 - space things
12:11 - out I think that looks a lot better and
12:15 - you don't have to but I'm going to add
12:17 - some text decoration before and after
12:19 - I'll add a bunch of
12:24 - asterisks let's see what we're working
12:28 - with not
12:31 - bad so every time we make a bet we get a
12:35 - new set of
12:37 - symbols now what if all three symbols
12:39 - match we need to calculate a payout and
12:42 - give it to the user because well they
12:45 - won so after we print our row we will
12:48 - call the
12:50 - get payout function but we will pass in
12:54 - our row it's a list and our bet how much
12:58 - did we bet we will be returned with a
13:01 - payout which we will add to our balance
13:05 - let's go to the get payout
13:10 - function we're sending two arguments to
13:12 - our get payout function a row and a bet
13:17 - we have to check to see if each element
13:20 - in our row is all the same is it all the
13:22 - same character we can do that with an if
13:25 - statement if our row at index of zero
13:29 - that's going to be the first symbol is
13:31 - equal to
13:33 - row at index one that's the second
13:36 - symbol is equal to
13:39 - row at the second index and that's the
13:42 - third symbol if all three symbols match
13:45 - we have to return the BET multiplied
13:48 - within our if statement we will add
13:50 - another if
13:51 - statement I will check to see if our row
13:54 - at index
13:56 - zero is equal to our first symbol
13:59 - of
14:00 - cherry be sure to place it within quotes
14:03 - because it's a
14:05 - string now the reason I'm only checking
14:07 - if row at index zero is a Cherry Emoji
14:10 - all these symbols are going to be the
14:12 - same if we're within this if statement
14:15 - all of these symbols are going to match
14:17 - we only need to check one of them it
14:19 - could be zero one or two but I'll just
14:22 - add zero they're all going to be the
14:24 - same regardless if somebody has all
14:26 - cherries we will return their bet times
14:31 - three or some other amount you can make
14:34 - the payouts higher or
14:36 - lower else if row at index zero is equal
14:41 - to a
14:44 - watermelon then we will return their bet
14:48 - Time 4 so watermelons are worth more
14:51 - than
14:53 - cherries else if row at index zero
14:59 - is equal to a
15:02 - lemon we will return their bet Time
15:08 - 5 else if row at index zero is equal to
15:14 - a
15:17 - bell let's give them times 10 return bet
15:22 - time
15:26 - 10 else if row at
15:30 - index0 is equal to a star that's worth
15:34 - the
15:35 - most we will return their bet times
15:39 - 20 make sure we're not within our if
15:42 - statement anymore if all three symbols
15:44 - don't match within our list we don't
15:46 - want to give the user anything they lost
15:48 - that spin we will return zero that's all
15:52 - we need for the get payout function
15:54 - scrolling back down after receiving a
15:58 - payout it's returned to us from this
16:00 - function we'll check to see if our
16:03 - payout is greater than zero that means
16:07 - they want to
16:08 - spin I will
16:10 - print I'll use an F string you one I'll
16:15 - add a placeholder precede this with a
16:18 - unit of currency I'll use dollars we'll
16:21 - display the
16:23 - payout else if they did not receive a
16:26 - payout that means they lost that spin we
16:29 - will
16:30 - print sorry you lost this
16:36 - round then take our
16:39 - balance this is our original balance
16:42 - plus equals our payout in most cases the
16:45 - payout is going to be zero but if the
16:48 - user wins something we will add that to
16:50 - the balance okay let's do a test
16:54 - run I will bet $1 sorry you lost this
16:58 - round and my current balance is
17:01 - 99 let's bet
17:03 - again I'll just keep on doing this until
17:05 - I
17:07 - win we're going to lose more times than
17:09 - what we
17:16 - win okay see I got all Bells it says you
17:20 - won $10 once somebody runs out of money
17:23 - we want to stop them from playing or if
17:25 - they would like to exit we'll create a
17:27 - variable of play
17:30 - again we will accept some user
17:34 - input do you want to spin
17:41 - again we'll add y for yes /n for
17:48 - no if our variable of play again does
17:51 - not equal a character of capital Y then
17:56 - we will break to break out of this Loop
17:59 - let's do a test run enter your bet
18:02 - amount I'll just bet a dollar do you
18:04 - want to spin again if I type in anything
18:06 - besides a capital Y we will exit I will
18:09 - type in no then we
18:14 - exit and to your bet amount I'll bet a
18:17 - dollar if somebody were to type in a
18:20 - lowercase y that doesn't register we'll
18:22 - make it uppercase by following our input
18:25 - with the upper method to make it
18:27 - uppercase place your bet a dollar hey I
18:30 - won I won $3 do you want to play again
18:33 - I'll type in a lowercase y yes I would
18:36 - like to play again but I did not hold
18:39 - shift in order to make this a capital Y
18:42 - that will still register and our current
18:44 - balance is
18:46 - $12 we're ahead currently place your bet
18:49 - amount I'll bet
18:50 - $10 we lost this round I will press n
18:55 - because I don't want to play again then
18:57 - we exit so at the end of our
19:01 - program I will print I'll use an FST
19:05 - string game over your final balance is
19:12 - I'll add a placeholder pick a unit of
19:14 - currency I'll pick dollars display our
19:17 - balance then I'll just add some text
19:20 - decoration before and after to make it
19:22 - all look
19:27 - nice okay let's let's play this one last
19:30 - time enter your bet amount I'll bet a
19:32 - dollar sorry you lost this round do you
19:34 - want to spin again yes I do I will bet
19:38 - $5 you lost spin again yes I will bet
19:43 - 10
19:45 - 20 again I'll bet 20 I keep
19:52 - losing I'm running out of money guys hey
19:55 - I won $10 though do you want to spin
19:57 - again no game over your final balance is
20:01 - $13 that's why you shouldn't gamble you
20:03 - tend to lose more money than what you
20:05 - gain all right everybody so that is a
20:07 - slot machine program you can write using
20:09 - python