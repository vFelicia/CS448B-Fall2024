00:01 - hey everyone in this topic i'm going to
00:03 - explain const parameters a const
00:06 - parameter is a parameter that is
00:08 - modified with a const keyword that makes
00:10 - it effectively read-only there's a
00:12 - couple reasons why you might want to
00:14 - declare a const parameter your code is
00:16 - more secure within a function and it
00:19 - conveys the intent to other programmers
00:21 - it's especially useful for references
00:23 - and pointers here's an example of const
00:26 - parameters in action
00:27 - i have standard string name assign your
00:31 - first name
00:33 - then int
00:35 - age whatever your age is
00:37 - then suppose i have a function to print
00:40 - my info
00:41 - void
00:42 - print
00:43 - info
00:44 - and there will be two parameters
00:47 - standard string name
00:49 - int age
00:51 - be sure to add a function declaration if
00:53 - you're missing it
00:55 - then if i need to call this function i
00:56 - would invoke the function name
00:58 - pass in my arguments
01:00 - name age
01:03 - then we can print our info
01:05 - standard
01:06 - output
01:07 - name
01:12 - standard
01:13 - output
01:14 - age
01:18 - this of course does what you expect
01:20 - it prints our name and our age
01:23 - to make this function more secure we can
01:25 - instead use const parameters that means
01:28 - that we can't change the values that we
01:29 - receive name and age in this case just
01:32 - as a test let's set name equal to an
01:34 - empty space
01:36 - and age equals zero
01:38 - i don't want this to be able to happen
01:39 - at all now when i run this
01:42 - we don't have a name and we don't have
01:43 - an age to make these parameters
01:46 - read-only we can precede the parameters
01:48 - with that const keyword const string
01:51 - name
01:52 - constant age
01:55 - and you would probably want to add that
01:56 - to your function declaration as well
01:59 - just to display intent
02:03 - there we have an error assignment of
02:05 - read-only parameter
02:06 - age and name is somewhere up here but i
02:09 - don't feel like reading all that when we
02:11 - pass our string and our integer as
02:12 - arguments what we're doing is
02:14 - effectively making a copy of name and
02:16 - age technically we're not modifying the
02:18 - original variables in this case using
02:21 - the const keyword when we pass a
02:23 - variable by value isn't really that big
02:25 - of a deal but it at least conveys intent
02:28 - if we were working with reference data
02:30 - types
02:32 - now we'll pass by reference well now
02:34 - it's a bigger deal we don't want anybody
02:36 - modifying the original name and age
02:38 - variables all right everybody those are
02:40 - const parameters they are parameters
02:43 - modified by the const keyword that
02:45 - effectively make them read-only within a
02:47 - function your code is more secure and it
02:49 - conveys intent it tells other
02:51 - programmers hey don't mess with these
02:53 - values they're useful with references so
02:55 - that nobody can change the value found
02:58 - at that reference then in the case of
02:59 - pointers nobody can change the address
03:02 - of where a pointer is pointing to so
03:04 - yeah those are const parameters in c
03:06 - plus