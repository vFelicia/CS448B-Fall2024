00:00 - what's going on people it's bro hope
00:02 - you're doing well
00:03 - and in this video we're going to discuss
00:04 - the insertion sword algorithm in
00:06 - computer science
00:07 - as always sit back relax and well enjoy
00:10 - the show
00:13 - all right everybody insertion sword now
00:15 - what we do with insertion sort is that
00:17 - we begin at index 1
00:18 - we take the value found within move it
00:20 - to some temporary storage
00:22 - like a variable named temp to
00:24 - temporarily hold it
00:25 - we examine elements to the left if any
00:28 - elements are larger than what's within
00:29 - temp
00:30 - we shift those elements to the right so
00:32 - 6 is larger than 1
00:34 - we shift it to the right if it's less
00:36 - than whatever's within temp
00:37 - we stop or until we run out of elements
00:40 - so we have run out of elements
00:42 - we take this value found within temp and
00:44 - place it at this opening here
00:46 - that was the first iteration let's move
00:48 - on to iteration two
00:49 - take this value place it within temp
00:51 - examine the elements to the left
00:53 - if this element is greater than temp
00:55 - then we shift it to the right it's not
00:57 - so we stop here
00:58 - and place this value back where it came
01:00 - from so that was the second iteration
01:02 - iteration three take this value place it
01:05 - within temp
01:06 - examine the elements to the left if
01:07 - they're greater than four we shift them
01:09 - to the right
01:09 - seven is larger than four shift it to
01:11 - the right six is larger than four
01:13 - shift it to the right one is not larger
01:15 - than four so we stop here
01:17 - take whatever's within temp this value
01:19 - four and insert it here into this
01:21 - opening
01:21 - so that was the first three iterations
01:24 - we repeat this process until we run out
01:26 - of elements
01:27 - so i'll speed up the footage so we are
01:29 - currently on index
01:32 - [Music]
01:38 - four
01:39 - [Music]
01:50 - [Music]
02:06 - so
02:11 - [Music]
02:37 - and that is your visual representation
02:40 - of the insertion sword algorithm
02:42 - i like to think of it like a jigsaw
02:44 - puzzle we have some pieces that are
02:46 - connected
02:46 - they fit together and we will move whole
02:48 - sections of pieces together
02:50 - to make room for a piece that fits so
02:52 - let's create our own insertion sword
02:54 - algorithm in java now
02:55 - we'll need to create an array let's
02:57 - create an array of integers
02:59 - int array and make up some numbers
03:02 - put whatever numbers you want within
03:03 - here uh maybe nine
03:05 - how about a one and an eight and a two
03:09 - and a seven three six five
03:12 - four that sounds good to me okay then
03:15 - let's display the elements of this array
03:18 - we'll use a for each loop for
03:21 - and i in array we will display
03:25 - each element within this array with a
03:27 - print statement
03:28 - so let me get rid of that print ln and
03:31 - just have print
03:32 - so i will print i i think i'm going to
03:34 - add a space afterwards i didn't do that
03:36 - in the previous
03:37 - two videos so i think i better do that
03:40 - okay let's just run this just to test it
03:43 - nine one eight two seven three four and
03:46 - before we display the elements of our
03:48 - array let's invoke a function which we
03:50 - still need to declare called insertion
03:52 - sort
03:53 - so insertion
03:56 - sort then we will pass in our array as
03:59 - an argument
04:00 - and we'll need to declare this so i'm
04:02 - going to cheat and create this
04:04 - automatically
04:05 - so outside of our main method create a
04:07 - method named insertion sort
04:09 - private static void insertion sort there
04:12 - is one parameter
04:13 - an array of integers okay now the first
04:16 - thing we'll do
04:16 - is create a for loop to iterate over
04:19 - each element of our array
04:20 - but it begins at one not zero so that
04:23 - would be
04:24 - four then we will set int
04:27 - i to equal one not zero
04:30 - pay attention to that we will continue
04:32 - this as long as i
04:34 - is less than array dot length
04:37 - and we will increment i by one during
04:40 - each iteration
04:41 - now we need to take our value found
04:44 - within
04:45 - i and place it within temp so let's
04:47 - declare a temporary variable named temp
04:50 - int temp equals array at index of i
04:56 - and now we'll create a variable named j
04:59 - int j equals i minus one
05:02 - so this will keep track of what value
05:05 - we're comparing to the left of whatever
05:07 - i is so then we need to create a while
05:11 - loop
05:12 - we will continue comparing values to the
05:14 - left of i
05:15 - and our condition is going to be while j
05:18 - is greater than or equal to zero
05:22 - and array
05:26 - at index of j is greater than
05:30 - temp so if
05:33 - we need to shift an element to the right
05:35 - we would say
05:36 - array at index of
05:40 - j plus 1 equals
05:44 - array at index of j
05:47 - so that will shift an element to the
05:49 - right
05:50 - then we will decrement j by one j minus
05:54 - minus
05:55 - and the last thing to do is to insert
05:57 - the value found within temp
05:58 - into that opening so that would be array
06:01 - at index of j plus one
06:05 - equals temp and that's all there is to
06:08 - it
06:08 - so let's run this oh yeah
06:12 - one two three four five six seven eight
06:14 - nine well people
06:16 - in conclusion the insertion sort
06:18 - algorithm compares elements
06:20 - to the left and it will shift elements
06:22 - to the right to make room to insert a
06:23 - value
06:24 - the insertion sort algorithm has a
06:26 - runtime complexity
06:27 - of big o of n squared it runs in
06:29 - quadratic time it's decent with small
06:31 - data sets
06:32 - but bad with large data sets and using
06:35 - insertion sort tends to be preferable to
06:37 - both bubble sort and selection sort
06:40 - it uses less steps than bubble sort and
06:43 - in the best case scenario
06:44 - insertion sort can run in ofn linear
06:47 - time
06:48 - compared to selection sort which the
06:50 - best case scenario is
06:52 - of n squared all right people so that is
06:54 - the insertion sword algorithm if you can
06:57 - destroy that like button leave a random
06:59 - comment down below and well
07:00 - yeah that's the insertion sword
07:02 - algorithm in computer science