00:00 - hey everyone so today I'm going to
00:01 - explain function expressions in
00:03 - JavaScript a function expression is a
00:05 - way to define functions as a value or a
00:09 - variable not to be confused with
00:11 - function declarations where you define a
00:13 - block of reusable code that performs a
00:15 - specific task we're already familiar
00:17 - with function declarations such as this
00:21 - function then you create a function name
00:23 - such as hello in this example let's
00:27 - console.log the word
00:30 - hello with the function expression we
00:32 - can assign a function to a variable or
00:35 - pass it as a value to another function
00:37 - so this time we're going to write a
00:39 - function expression I will create a
00:41 - constant named
00:43 - hello equals a function parentheses
00:47 - curly braces we'll do the same thing we
00:50 - will console.log hello and if I were to
00:54 - run this the identifier hello has
00:56 - already been declared so for now I'm
00:58 - just going to remove this function
01:00 - declaration all we're doing is assigning
01:02 - a function to a variable to use the
01:04 - function that's stored within we have to
01:06 - take our variable name and add a set of
01:08 - parentheses to invoke it kind of like
01:10 - it's a pair of telephones talking to
01:12 - each other hello using JavaScript we
01:15 - also have the capability of passing a
01:17 - function as a value I will introduce the
01:21 - set timeout function there's going to be
01:25 - two parameters a call back to a function
01:29 - and an of time we're going to wait then
01:31 - execute this function this will be in
01:34 - milliseconds 3,000 milliseconds
01:36 - translates to 3 seconds let me put this
01:39 - function back after 3,000 milliseconds I
01:43 - will execute the hello
01:45 - function 1 2 3 hello instead of using a
01:51 - function declaration we are going to
01:53 - pass a function expression as an
01:55 - argument to the set timeout function
01:57 - instead of a call back we will create a
01:59 - fun function we will pass an entire
02:02 - function as an argument what are we
02:04 - going to do we will after 3 seconds
02:08 - console.log the word hello and let's see
02:12 - if this works just to prove that I'm not
02:14 - a
02:15 - liar 1 2 3 hello in JavaScript it is
02:21 - legal to pass an entire function as an
02:23 - argument or treat it as a value we'll
02:27 - use previous examples of the map filter
02:29 - anded methods of arrays I will create an
02:32 - array const
02:35 - numbers equals the numbers 1 through six
02:38 - 1 2 3 4 5
02:41 - 6 I would like to square each of these
02:44 - numbers what we've done in a previous
02:46 - lesson is declare a function function
02:50 - Square we had one parameter in that
02:52 - example we had an
02:54 - element what we did is we
02:57 - returned math. poop
03:00 - to raise a base to a given power we're
03:03 - raising our element to the power of two
03:06 - the map method will return a new
03:09 - array const squares
03:13 - equals
03:15 - numbers map we're passing in a
03:18 - callback to
03:20 - square then
03:23 - console. log
03:26 - squares this works we are using a
03:29 - function
03:30 - declaration but this time we will now
03:32 - use a function
03:34 - expression we will treat this function
03:36 - as a value let's cut this
03:39 - function replace the call
03:42 - back then paste it within the map method
03:45 - then we just need to remove the name we
03:47 - don't need a name and this is still
03:49 - going to
03:51 - work yeah it still does we don't
03:54 - necessarily need to think of a function
03:56 - name one of the benefits of doing this
03:58 - is that we're not polluting the global
03:59 - name space with function names we're
04:01 - only going to be using this function
04:03 - once there's no need to declare a
04:04 - function let's create a function
04:06 - expression to cube these numbers now as
04:09 - a beginner it might be helpful to write
04:10 - out your functions as a declaration
04:12 - first then transform it into a function
04:15 - expression function
04:18 - Cube we have our element as a
04:21 - parameter I'm going to copy this return
04:25 - math.pow element to the power of three
04:29 - we will create a new array const cubes
04:34 - equals
04:36 - numbers. map we don't need to pass in a
04:39 - call back we will cut this entire
04:42 - function paste it within the map method
04:45 - then we don't need the
04:46 - name then console.log cubes there are
04:50 - all the original numbers cubed all right
04:53 - I think we're starting to get the hang
04:54 - of this let's quickly use the filter
04:56 - method to filter out any even or odd
04:59 - numbers
05:00 - I will create const even nums equals
05:04 - take our array numbers we will use the
05:07 - filter
05:08 - method then we will pass a function
05:11 - expression as an
05:13 - argument there's one parameter an
05:17 - element we are going to
05:19 - return element modulus 2 to see if it's
05:23 - divisible by
05:24 - 0 is the result strictly equal to 0o let
05:29 - let's see if this works console.log even
05:32 - nums there they are we have 2
05:35 - 46 let's do this with odd
05:38 - numbers odd nums use the filter method
05:42 - again all we're going to change is
05:45 - strictly not equal to
05:47 - zero return any odd
05:49 - numbers
05:51 - 135 then lastly reduce we will sum all
05:54 - of the elements of this
05:58 - array con
06:00 - total equals our
06:03 - numbers do
06:06 - reduce passing a function
06:10 - expression we have two parameters an
06:14 - accumulator and an
06:16 - element we will
06:18 - return
06:20 - accumulator plus our
06:23 - element return the
06:25 - total which is
06:27 - 21 we already do have some practice with
06:30 - map filter and reduce instead of using
06:33 - function declarations then passing a
06:34 - call back we can pass an entire function
06:37 - expression as an argument to these
06:39 - methods in the next topic I'll discuss
06:41 - Arrow functions which shortens the
06:43 - syntax even further you'll like Arrow
06:45 - functions all right everybody so those
06:47 - are function Expressions they are a way
06:50 - to define functions as a value or a
06:52 - variable we've both defined a function
06:55 - expression as a variable we stored that
06:57 - within this hello variable we've also
06:59 - also passed entire functions as an
07:01 - argument which you can do with
07:02 - JavaScript there's a few benefits of
07:04 - function Expressions one of which is you
07:06 - don't need to keep on thinking of
07:08 - function names you can perform a
07:09 - function once then just forget about it
07:11 - they're also used in callbacks and
07:14 - asynchronous operations higher order
07:16 - functions closures and event listeners
07:18 - these are topics we still need to
07:20 - discuss but we will be using function
07:22 - Expressions a lot don't worry we will
07:24 - have more practice and well everybody
07:26 - those are function expressions in
07:28 - JavaScript