00:00 - hey how's it going everybody its bro
00:01 - here hope you're doing well and in this
00:03 - video we're going to get into
00:04 - object-oriented programming and C++ so
00:08 - let's get into it
00:09 - [Music]
00:11 - before you reach the end of this video
00:13 - make sure to LIKE comment and subscribe
00:16 - so that we together can challenge and
00:18 - defeat the mighty YouTube algorithm
00:21 - everyone so for this part of the series
00:24 - we're gonna get into object-oriented
00:26 - programming so we need to distinguish
00:28 - first the differences between classes
00:30 - and objects so look around you right now
00:32 - wherever you're sitting or standing so
00:35 - you are currently surrounded by
00:36 - different objects for example I have a
00:39 - mic in front of me I have a mouse I have
00:42 - a cell phone and I have a PlayStation 4
00:45 - controller next to me so in programming
00:48 - we can actually create objects that
00:49 - mimic these things and it's kind of like
00:51 - it's a new data type so I could create
00:54 - for example a PlayStation 4 controller
00:56 - that has some qualities and it can
00:58 - perform something otherwise I can create
01:00 - a cell phone object and it can do
01:03 - certain things so we can actually create
01:06 - a class that serves as a blueprint for
01:09 - the different characteristics of an
01:11 - object and what kinds of actions that
01:12 - they can perform so let's create a new
01:15 - class and we'll make some human objects
01:17 - so we're going to create a new class
01:19 - before our main method so to create a
01:22 - new class just type in class and you
01:24 - need a name for this class so if we're
01:26 - going to create human objects we can
01:28 - call this class human the second step is
01:31 - that we'll want the members of this
01:33 - class to be publicly accessible because
01:35 - normally we don't have access to
01:37 - whatever's in this class outside of this
01:40 - class so we're just going to type the
01:42 - word public and this is a access
01:44 - modifier now we can actually assign some
01:47 - variables that all humans should have so
01:50 - what characteristics of humans come to
01:52 - mind so I'm thinking humans typically
01:55 - have names at least that I'm aware of
01:58 - let's make that singular though they
02:00 - have an age and maybe a weight so we'll
02:06 - have a string variable named name
02:08 - integer named age and a double variable
02:10 - named weight so these are kind of like
02:13 - nouns they're variables that are acting
02:15 - as the characteristics of what all
02:18 - humans should have now humans can also
02:20 - have like functions so what kinds of
02:23 - actions can humans perform so for
02:26 - example one that comes to mind is eat so
02:29 - we can create a eat function for humans
02:31 - so maybe if we call this function will
02:34 - just say this person is eating then
02:40 - we'll just end the line let's add a few
02:43 - others here so maybe a drink function
02:47 - this person is drinking and sleeping so
02:54 - avoid sleep this person is sleeping
02:59 - alright so we have finished making this
03:02 - class a class is a blueprint for what
03:05 - characteristics and functions that an
03:07 - object should have now we can actually
03:09 - instantiate an object that's a fancy
03:12 - term for creating an object so if we
03:14 - want to create our first human we'll
03:16 - type in the name of the class so it's
03:19 - human and then we need a unique name for
03:22 - this specific human I'll creatively call
03:24 - this one human one now with our object
03:29 - human one it's kind of like the variable
03:32 - name except that within human one there
03:34 - is a name an age and a weight variable
03:37 - and we'll still need to assign these
03:38 - some values and when we instantiate this
03:41 - object this is kind of like the data
03:44 - type you know with variables we usually
03:46 - list the datatype before the variable
03:48 - name well it's kind of the same
03:49 - principle here we're listing the
03:51 - datatype of what object we want we want
03:53 - a human not a car not a bicycle a human
03:56 - and we're going to call it human one so
03:59 - we can actually assign these variables
04:01 - that all humans have
04:02 - so if we want to assign human ones some
04:05 - values to its variables well type in the
04:07 - name of our object so human one dot and
04:10 - let's give this human a name and let's
04:13 - give him a name of Ric
04:17 - all right so then
04:19 - this human now has the name Rick we can
04:21 - also give him an age so human one dot
04:24 - age and let's say he is 65 years old
04:28 - there we go
04:29 - I don't think we'll need to assign a
04:31 - weight I think you get the idea so let's
04:33 - actually display these just to test it
04:34 - so we'll see out human ones dot age and
04:40 - then end the line and we will do the
04:43 - same thing for named human one dot name
04:48 - so let's try this
04:53 - yep Rick is 65 years old now we can
04:57 - create another human so let's create
04:59 - human too so we need to list the
05:01 - datatype so it's a human basically and
05:05 - then we'll call this one human too and
05:08 - let's give human two a name and an age
05:10 - so human two dot name equals Morty and
05:16 - let's give human to an age perhaps
05:20 - sixteen all right so let's display human
05:25 - two is age and name but I'm going to
05:27 - flip these because they're bothering me
05:29 - because they're out of order okay let's
05:32 - try this now so human two's name is
05:39 - Morty and he has an age of sixteen years
05:41 - old now we can actually perform one of
05:45 - the functions within a class so let's
05:47 - have Rick use the drink function that he
05:50 - has access to so if you want to use a
05:53 - function that belongs to a class or an
05:56 - object just type in the name of the
05:58 - object that you want to perform that
05:59 - function so we can say human one and we
06:03 - want human one to use its drink function
06:06 - so let's drive this now yep
06:11 - this person is drinking so let's create
06:15 - one more human so we list the datatype
06:17 - human and we will call this specific
06:20 - human human three and we want to give
06:23 - him a name and an age so we'll type in
06:26 - the name of human three dot name is
06:31 - equal to
06:32 - calm Jerry and we'll give Jerry an age
06:37 - so human three dot age equals perhaps 45
06:43 - all right now we have three humans Rick
06:47 - Marty and Jerry and they all have a eat
06:51 - function drink function and sleep
06:53 - function but there's one thing if we try
06:55 - this though since these functions all
06:58 - have basically the same syntax we can't
07:01 - differentiate like who's performing
07:03 - which function so I'll give you an
07:05 - example let's have human one which is
07:08 - Rick use his drink function will have
07:11 - human two that is morty use his sleep
07:14 - function and then we'll have human three
07:17 - use its eat function so if we were to
07:21 - display these it's all going to look
07:27 - like the same thing we can't
07:28 - differentiate who's calling this
07:30 - specific function so what we can
07:32 - actually do is that with these strings
07:34 - within our functions we can actually
07:36 - replace this person with the actual name
07:40 - of the object that is calling this
07:42 - function so I'm going to take out this
07:44 - person and what we're going to place
07:47 - here but let me just add these insertion
07:50 - operators so we're going to replace this
07:53 - person with this - greater than sign and
07:57 - then name so this is going to be
08:01 - replaced with the name variable of
08:04 - whatever object is calling this function
08:07 - so we're going to take these this name
08:10 - and place it here and let's try it now
08:18 - there Rick is drinking morty is sleeping
08:21 - and jerry is eating likewise you can do
08:24 - this with other variables too like you
08:26 - can say this age or this weight but you
08:30 - know this name works for this example
08:32 - alright so I think that's the basics of
08:34 - object-oriented programming an object is
08:37 - an instance of a class an object usually
08:40 - has some sort of attributes like values
08:43 - and variables that act like nouns that
08:45 - describe the
08:46 - itself and they can usually perform some
08:49 - sort of action so for example our humans
08:52 - they have a name age and weight they can
08:54 - eat drink and sleep and a class is like
08:58 - the blueprint of what attributes and
09:00 - functions that all humans or whatever
09:03 - object you're dealing with can perform
09:04 - so that's the very basics of
09:06 - object-oriented programming in C++ I'll
09:09 - post all of this code and the comments
09:11 - down below if you'd like a copy for
09:13 - yourself if you're looking for
09:14 - additional practice why don't you create
09:16 - your own class and then post it in the
09:18 - comments down below as well if you'd
09:20 - like to share it but yeah that's the
09:22 - basics of object-oriented programming
09:24 - and C++ hey you yeah I'm talking to you
09:29 - if you learn something new then you can
09:31 - help me help you in three easy steps
09:35 - by smashing that like button drop a
09:37 - comment down below and subscribe if
09:39 - you'd like to become a fellow bro
09:42 - [Music]
09:58 - you