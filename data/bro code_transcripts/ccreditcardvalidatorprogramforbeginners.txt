00:01 - hey everybody in this topic we're going
00:03 - to create a program to validate if a
00:05 - credit card number is valid or not to do
00:07 - so we'll need to utilize the loon
00:09 - algorithm which i've broken into these
00:11 - steps if you need some test credit card
00:13 - numbers you can always google them i
00:15 - found a bunch on this website let's just
00:17 - take this one for example
00:19 - and to make this more readable i'll
00:20 - divide this number into groups of four
00:27 - step one we double every second digit
00:29 - from right to left if the double number
00:32 - is two digits split them i'm only
00:34 - concerned with every second digit from
00:36 - right to left so we can eliminate some
00:39 - of these that we won't be using
00:44 - then we're going to double these numbers
00:46 - so two doubled is four
00:49 - nine doubled is 18.
00:50 - since we have the number 18 that's two
00:53 - digits we need to split them we'll split
00:55 - 18 to one and eight
01:03 - then six doubled is twelve we'll split
01:05 - that
01:06 - step two we need to add all of these
01:08 - numbers together to create a sum
01:17 - the sum is 29. step 3 add all odd number
01:21 - digits from right to left with the
01:23 - original number
01:25 - so now we're only concerned with the odd
01:27 - numbers
01:33 - then we just add these numbers together
01:35 - no need to double them
01:41 - the sum is 21.
01:43 - step four we sum the results of steps
01:46 - two and steps three
01:48 - twenty nine plus twenty one that equals
01:50 - fifty
01:51 - step five if step four is divisible by
01:54 - ten that number is valid we could say
01:56 - our result
01:58 - modulus ten
02:00 - if that number is divisible by zero
02:02 - that number is valid fifty is divisible
02:05 - by ten so that number is valid we'll
02:08 - create a program that will do all of
02:09 - this for us
02:12 - let's create our functions
02:13 - we'll need three
02:15 - int
02:16 - get
02:16 - digit
02:19 - the parameter will be a constant integer
02:23 - that i will name number
02:26 - int
02:27 - will need to sum the odd digits
02:33 - the parameter is
02:35 - standard
02:36 - string
02:38 - card
02:39 - number
02:41 - let's copy this paste it
02:43 - some
02:44 - even digits the parameter is the same
02:48 - let's copy these functions and add some
02:50 - declarations
02:54 - we do need to return something
02:57 - otherwise we'll get a warning for the
02:58 - time being i'm just going to return 0 as
03:01 - a placeholder
03:04 - okay let's begin with the main function
03:05 - we'll need a credit card number that
03:07 - will be a string
03:09 - standard string
03:10 - card
03:11 - number
03:14 - then int result and i will set that
03:17 - equal to zero right away
03:19 - we'll prompt the user to enter in their
03:21 - credit card number
03:22 - standard output
03:25 - enter a credit card number
03:30 - standard
03:31 - input
03:34 - card
03:35 - number
03:37 - result
03:39 - equals
03:40 - will invoke the sum even digits function
03:45 - pass in our card number
03:49 - plus
03:50 - some odd digits
03:52 - pass in our card number
03:57 - we'll need to fill in these functions
03:59 - let's begin with some even digits
04:03 - we can get rid of this
04:04 - i'll create a local variable named sum
04:07 - to keep track of the sum
04:09 - what we'll need to do is iterate over
04:12 - our card number in reverse order
04:14 - we can treat a string as an array of
04:16 - characters and we can iterate over that
04:19 - so we'll need a for loop
04:21 - and we will iterate over this card
04:23 - number in reverse order starting from
04:26 - the end
04:27 - we'll need an index into i
04:29 - equals
04:30 - then we'll need to find the size of our
04:32 - card number
04:33 - there's a built-in function for that
04:36 - card number dot size
04:38 - now arrays they always start with zero
04:40 - so we're going to subtract one however
04:43 - if we're summing the even digits
04:45 - beginning from the right we'll need the
04:47 - second to last digit so that would
04:50 - actually be
04:51 - minus two the very last digit would be
04:53 - minus one
04:55 - our index i will begin from the second
04:57 - to last position i would like to
04:59 - continue this for loop as long as i is
05:02 - less than or equal to zero
05:05 - then we will decrement i by two i minus
05:09 - equals 2 because we need every even
05:11 - digit
05:12 - so we will take sum plus equals
05:16 - then invoke the get digit function
05:20 - get digit
05:22 - within the getdigit function as an
05:24 - argument we're going to pass in card
05:26 - number
05:28 - at index of i
05:30 - times two however there's one more thing
05:33 - that we'll need to do with card number
05:36 - at index of i we will subtract
05:39 - the character 0 and here's why we're
05:42 - currently working with a string of
05:44 - characters you can also treat a string
05:46 - as an array of characters each character
05:49 - according to the ascii table has an
05:51 - associated integer value a decimal value
05:54 - if i'm passing one of these characters
05:56 - as an argument to my getdigit function
05:58 - we'll treat that character as if it was
06:00 - its decimal equivalent according to the
06:02 - ascii table the character 0 has a
06:05 - decimal value of 48 the character 1 is
06:08 - 49 2 is 50 then all the way up to 9
06:11 - which has a decimal value of 57 so if
06:15 - i'm passing in the character at index of
06:17 - i what we'll end up working with is the
06:20 - decimal representation of that character
06:23 - if we subtract the character 0 or its
06:25 - equivalent 48 that would give us a range
06:28 - of numbers 0 through 9. for example the
06:31 - decimal equivalent of the character 9 is
06:33 - 57
06:34 - 57
06:36 - minus 48 would be 9. you could subtract
06:39 - either 48 or the character 0. that would
06:42 - give us numbers 0 through 9 according to
06:44 - the ascii table
06:46 - then we're multiplying that number by
06:47 - two
06:48 - then at the end we will return whatever
06:51 - the sum is
06:52 - let's fill in this get digit function
06:55 - within the getdigit function the digit
06:57 - that we're working with was doubled
06:59 - whatever number we passed in it may take
07:02 - two digits for example like nine times
07:04 - two is eighteen we need to split those
07:06 - two numbers to get one and eight
07:08 - so i'm going to return
07:10 - number
07:12 - modulus 10
07:14 - plus
07:16 - number
07:18 - divided by 10
07:19 - modulus 10. that will split the two
07:22 - numbers
07:23 - for example let's say our number that
07:25 - we're passing in as an argument is 18.
07:28 - 9 times 2. 18 modulus 10 would give us
07:32 - 8.
07:34 - 18
07:35 - divided by 10
07:37 - that would give us 1 since we're using
07:39 - integer division
07:40 - 1 modulus 10
07:43 - is one
07:45 - eight plus one
07:47 - is nine
07:48 - then we're just returning that number
07:50 - nine okay that is the get digit function
07:54 - then we need to sum the odd digits
07:57 - and really we could just copy all this
07:59 - then paste it
08:03 - but there's a couple changes to make
08:06 - int i equals card number dot size
08:08 - function minus one we need to begin at
08:10 - the end and then sum plus equals
08:14 - card number minus zero
08:17 - when summing the odd digits there's no
08:19 - need to double the odd digits that's
08:22 - only with the even digits
08:24 - and that is all the functions let's
08:25 - close out of these
08:29 - so we'll have a result the sum of the
08:31 - even digits plus the sum of the odd
08:33 - digits
08:34 - if result is divisible by 10 that number
08:37 - is valid
08:40 - if
08:41 - result
08:44 - modulus 10
08:47 - is equal to zero
08:51 - then that number is valid standard
08:53 - output
08:55 - card number
08:58 - is valid
09:03 - else
09:07 - card number is not valid
09:11 - okay let's try this
09:13 - i'm going to enter in that original
09:14 - number that we worked with that discover
09:16 - card
09:20 - okay enter a credit card number i'm
09:22 - going to paste this hit enter
09:25 - that number is valid let's try that
09:27 - again
09:30 - so i'm going to enter in the same card
09:32 - number except i'll add one to the end
09:38 - that number is not valid hey if you have
09:41 - your own credit cards feel free to try
09:42 - them too and see if it works
09:44 - all right everybody that is a credit
09:46 - card validation program mostly for
09:48 - practice
09:49 - if you would like a copy of this code
09:50 - i'll post this in the comments section
09:52 - down below please be sure that you do
09:54 - not enter in your own credit card into
09:55 - the comment section and well yeah that
09:58 - is a credit card validation program
10:00 - using c plus