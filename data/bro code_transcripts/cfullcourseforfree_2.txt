00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to show you
00:05 - all everything you need to know to get
00:06 - started writing code in c-sharp
00:08 - so sit back relax and enjoy the show
00:13 - if you wouldn't mind please like comment
00:15 - and subscribe
00:16 - one like equals one prayer for the
00:18 - youtube algorithm
00:20 - i'm gonna tell you why you need to learn
00:22 - c sharp c
00:23 - sharp is a very flexible language we can
00:26 - use c
00:27 - sharp for all sorts of things console
00:29 - apps web services
00:31 - games and if you're an aspiring game
00:32 - developer c-sharp is definitely a
00:34 - language you want to learn
00:36 - along with c plus but why not learn both
00:38 - and the average salary for a c-sharp
00:41 - developer if you have some experience
00:43 - is 63 000 per year according to
00:45 - glassdoor
00:46 - if that all sounds good let's begin to
00:48 - code with c-sharp we'll need an ide
00:51 - that's an integrated development
00:52 - environment think of it
00:53 - as software that helps us write other
00:55 - software one that i would recommend is
00:58 - visual studio community so you can just
01:00 - google that then head to this url at the
01:02 - top here
01:03 - okay then we are going to download
01:05 - visual studio and just follow the
01:07 - installation procedures
01:08 - so let's open this and run it so
01:11 - continue and here we have a bunch of
01:13 - different packages that we can download
01:14 - you'll want to check
01:15 - dot net desktop development for using c
01:18 - sharp
01:19 - and if you're interested in using unity
01:20 - you might as well just download this
01:22 - package too
01:23 - then we are going to install you have
01:25 - the option to sign in but i'm just going
01:27 - to click
01:27 - not now maybe later you can also pick a
01:30 - color theme for your ide i'm going to go
01:32 - with dark because i like to feel like a
01:33 - pretend elite hacker
01:35 - then start visual studio now with this
01:37 - home screen we'll continue without code
01:39 - i'll show you all how we can create a
01:40 - new project
01:41 - all right now to create a new project
01:43 - we'll go to file
01:45 - new project select c sharp
01:48 - console application next we'll need a
01:51 - name for this project
01:52 - i'll call this my first
01:55 - program next then create
01:58 - all right now this font size is very
02:01 - small you can either zoom in here or
02:02 - down at the bottom or you can change
02:04 - the font as well as the font size by
02:06 - going to tools
02:08 - options environment fonts and colors
02:12 - and you can change the size here what
02:13 - about 18
02:16 - and we should be good and here we have a
02:18 - small program that was created for us
02:20 - automatically
02:20 - all this does is display some output the
02:23 - words hello world
02:24 - to compile and run a program you just
02:26 - have to click this green play button at
02:28 - the top
02:30 - and this will create a console window
02:32 - that displays our output of
02:34 - hello world whatever we have written
02:36 - here within quotes
02:38 - and this line of code is known as the
02:40 - main method it's the entry point for
02:42 - where our program begins
02:44 - and this set of curly braces after the
02:46 - main method is the
02:47 - body of the main method so our program
02:50 - will begin
02:50 - by executing any code at the top of the
02:53 - main method
02:53 - and it will work its way down and
02:55 - execute any subsequent code that follows
02:58 - so this main method is made up of a
02:59 - bunch of words that we don't quite
03:01 - understand yet
03:02 - static void main string args in time
03:05 - we'll learn what each of these words
03:06 - mean but that's more of an advanced
03:08 - topic
03:09 - so a textbook that i read once said to
03:11 - think of the main method as like a
03:13 - magical spell or incantation that we
03:15 - have to say
03:16 - in order for our program to run so let's
03:18 - see what happens if i remove the main
03:20 - method
03:20 - i'll still keep this line though
03:22 - console.writeline hello world
03:24 - and let's try it okay so it looks like
03:27 - there were build errors so we cannot run
03:29 - the program as it is now
03:30 - so we do need that main method and if
03:32 - you are missing it you can just type it
03:34 - in
03:34 - and it should work now now this is a
03:37 - standard writeline method whatever text
03:40 - that we put within quotes will appear
03:42 - within
03:42 - our console window to display as output
03:45 - so let's actually change it right now it
03:47 - says hello world but let's type
03:48 - something else
03:49 - so make sure that this is within double
03:51 - quotes let's change this to
03:53 - i like pizza
03:56 - and then run this again
04:00 - so now my output should say i like pizza
04:03 - and then you can add a second line of
04:04 - output just by writing
04:06 - console.writeline then within
04:08 - parentheses and within double quotes you
04:10 - can write something else
04:11 - like it's really
04:14 - good and now we have two lines of output
04:17 - i like pizza
04:18 - it's really good so to write output to
04:21 - the console window you type
04:23 - console.writeline then within quotes
04:25 - some text that you want to write one
04:27 - thing that you may want to change
04:29 - is the font and the font size of your
04:31 - console window because right now it's
04:33 - very difficult for me to read
04:35 - so to change that right click in the top
04:37 - left corner go to
04:38 - properties then go to font let's
04:41 - increase this to maybe 28
04:43 - you can pick a new font style as well
04:45 - i'll keep it the same
04:46 - then you can also change the color
04:48 - scheme too i'll change the screen text
04:50 - to maybe green then okay all right but
04:54 - now this window is huge so let's change
04:56 - that
04:56 - so again go to the top left corner go to
05:00 - properties
05:01 - then go to layout let's change the width
05:04 - to
05:04 - what about i don't know 50 and the
05:06 - height to
05:08 - let's say 15 i think that should be good
05:12 - okay yeah that's not too bad and here
05:14 - it's actually a lot easier to read
05:16 - i like pizza it's really good oh one
05:19 - last stupid thing that i wanted to show
05:20 - you all is how we can make our console
05:22 - beep type console dot beep
05:25 - parentheses semicolon so then our
05:28 - program is going to beep when it reaches
05:30 - the end
05:32 - it's not really important at all i just
05:34 - thought it would be something fun to
05:35 - throw in at the end of this video so
05:37 - that's how to make your console beep
05:38 - for some reason all right well that's
05:41 - the very basics of c sharp to get you
05:43 - started in the next video we'll cover
05:45 - more on output and comments so i'll post
05:49 - this code to the comment section down
05:50 - below
05:51 - and well that's the very basics to get
05:53 - you started in
05:54 - c-sharp hey you yeah i'm talking to you
05:58 - if you learned something new then help
06:00 - me help you in three easy steps
06:03 - by smashing that like button drop a
06:05 - comment down below
06:06 - and subscribe if you'd like to become a
06:08 - fellow bro
06:21 - [Music]
06:30 - hey what's going on everybody it's you
06:32 - bro hope you're doing well
06:34 - and in this video i'm going to show you
06:35 - all a few different ways in which we can
06:37 - format output in c sharp
06:38 - so sit back relax and enjoy the show
06:43 - if you find this video helpful please
06:45 - remember to like
06:46 - comment and subscribe your support will
06:49 - help keep this channel running
06:51 - all right everybody here's a few
06:52 - different ways in which we can format
06:54 - output in c sharp
06:55 - as we covered in the last video to
06:56 - display something to our console window
06:58 - we would type
06:59 - console.writeline then you need a set of
07:02 - parenthesis then a semicolon at the end
07:04 - you place your message within the
07:06 - parenthesis this is known as a method
07:08 - and we have a semicolon at the end the
07:10 - semicolon is kind of like
07:12 - the period at the end of a sentence when
07:14 - we finish a statement in programming we
07:16 - end it with a semicolon
07:18 - so to display a message within double
07:20 - quotes you would type something
07:22 - so this is known as a string literal
07:24 - we're literally printing something to
07:26 - our console
07:27 - so we kind of covered this in the last
07:28 - video this will display the word
07:30 - hello now there's another way in which
07:32 - we can display output that is just
07:34 - right console dot right parentheses
07:37 - semicolon
07:38 - and within quotes let's display
07:40 - something else what about
07:42 - hey now let's take a look at the
07:44 - difference between the two
07:46 - all right we have hey immediately
07:48 - followed by hello
07:49 - all in the same line in the last video
07:51 - we used two right line statements
07:53 - each string literal had their very own
07:56 - line but in this case
07:57 - it's all one line so with writeline
08:00 - after you finish your string literal
08:02 - it's going to hit enter like we're
08:03 - hitting the enter key and we'll move
08:05 - down to a new line
08:06 - right doesn't do that so you have two
08:08 - different ways in which you can display
08:09 - output to the console window
08:11 - right and right line write does not hit
08:13 - the enter key after the end
08:15 - it doesn't create a new line and
08:16 - rightline does so you can use either one
08:18 - depending on what you need
08:19 - now there is a shortcut to create a
08:22 - rightline statement you type
08:23 - c then hit tab twice and that will auto
08:26 - generate
08:26 - a right light statement for you okay so
08:29 - the next topic to cover is comments we
08:31 - can add a comment to our code
08:33 - and this will not be displayed as output
08:35 - so to write a comment within your code
08:37 - you need
08:38 - two forward slashes and you can see that
08:40 - the color
08:41 - of our text changed to green so i'm
08:44 - going to tell you
08:44 - this is a comment and this has no effect
08:48 - on our output
08:49 - this comment will not be seen all we see
08:52 - here is
08:52 - hey and hello you can also write a
08:55 - multi-line comment
08:56 - you would type forward slash asterisk
08:59 - this is a multi-line
09:04 - comment then to end a multi-line comment
09:08 - you would end it with asterisk then
09:10 - forward slash again
09:11 - and last but not least we have escape
09:13 - sequences we can add an escape sequence
09:15 - to a string to format our output
09:17 - so let's create a writeline statement
09:19 - and type whatever your name is
09:22 - okay now to create an escape sequence we
09:25 - need to
09:25 - add a backslash followed by a certain
09:28 - character
09:29 - depending on what character you select
09:31 - it's going to have a special effect on
09:33 - your string
09:34 - so if i typed backslash t that will add
09:37 - a tab escape sequence before displaying
09:39 - my name
09:43 - all right so we have a tab before my
09:45 - string so let's change this to maybe
09:48 - a backspace i'll add that here so
09:51 - backslash b that will add a backspace
09:55 - and my name is now br
09:59 - code alright so we can also do newline
10:04 - and for new line so my first name is on
10:08 - one line
10:09 - and my last name is on a second line now
10:12 - you may have noticed that there's all
10:13 - this garbage at the end of my console
10:15 - window when my program is done running
10:17 - so one way in which we can hide that at
10:19 - the end of our program type
10:21 - console.read key so basically this will
10:24 - prevent
10:25 - our program from ending until we type a
10:27 - key
10:29 - and it should be hidden now so if i hit
10:31 - the enter key well then my program is
10:33 - going to finish running
10:35 - all right everybody so those are a few
10:37 - ways in which we can format output in c
10:39 - sharp if you can give this video a
10:41 - thumbs up drop a random comment down
10:43 - below
10:43 - and well those are a few ways to format
10:46 - output in c
10:47 - sharp hey what's going on everybody
10:50 - it's bro hope you're doing well and in
10:52 - this video i'm going to explain
10:53 - variables in c sharp so sit back relax
10:56 - and enjoy the show
11:00 - do you all remember back in middle
11:01 - school when we learned about algebra we
11:03 - had to solve an equation to find the
11:05 - value of x
11:06 - and x as some representation of a number
11:09 - well with programming we can create our
11:10 - own variables but we are not limited to
11:12 - just
11:13 - numbers we can store characters words
11:16 - and even these things called booleans
11:17 - which are either true or
11:19 - false so i'm going to show you all how
11:21 - we can create our own variables in c
11:23 - sharp creating a variable takes two
11:25 - steps declaration and initialization
11:28 - to create a variable we first have to
11:30 - declare what type of data we'll be
11:31 - storing
11:32 - if we need to store a number we'll type
11:34 - int short for integer
11:36 - and we'll need a unique name for this
11:38 - specific variable
11:40 - so let's just call this x and then end
11:42 - the statement with a semicolon because
11:44 - with programming semicolons are kind of
11:46 - like
11:46 - periods when you finish a sentence okay
11:48 - so this step
11:50 - was declaration and i'll just add a note
11:52 - here
11:53 - so this step is declaration
11:57 - and now to assign a value we will
11:59 - initialize this variable
12:00 - so to assign this variable x a value
12:03 - type
12:04 - x equals and then some value
12:07 - let's say one two three then semicolon
12:11 - okay so we now have a variable named x
12:14 - and this step is initialization
12:18 - now you can combine these two steps so
12:20 - to do that we would say
12:22 - and let's say y this time equals
12:25 - three two one semicolon so we have two
12:28 - variables
12:29 - x and y so this step right here is both
12:32 - declaration and initialization now these
12:35 - variables
12:36 - behave as the value that they contain so
12:38 - let's display some of these
12:40 - so within a console.writeline statement
12:43 - i'm going to display x and then with a
12:46 - second rightline statement i will
12:48 - display
12:49 - y so console.rightline
12:52 - y and we have one two three
12:55 - three two one now you can use these for
12:58 - like math two we could say
13:00 - like int z equals x
13:03 - plus y and then display whatever
13:06 - z is console.writeline
13:10 - z and the result is
13:14 - 444. so these names for these variables
13:18 - really aren't descriptive
13:19 - x y and z we can give some more unique
13:21 - names that describe what kind of value
13:24 - that
13:24 - these variables contain so let's say int
13:27 - edge and i'll assign this variable age a
13:30 - value
13:30 - of 21 and then i can display my edge
13:33 - within a writeline statement or use it
13:35 - for something
13:36 - so let's say console.writeline
13:39 - and then i can display a message along
13:42 - with my age
13:43 - so let's say your age
13:47 - is so this part is within quotes
13:50 - to display the value of my age i will
13:53 - add
13:54 - plus edge make sure age is not within
13:57 - quotes
13:58 - because then we're printing a string
14:00 - literal and not the
14:01 - value contained within edge so this
14:03 - should display
14:06 - your age is 21. so there's more data
14:10 - types than just int
14:11 - this time let's use a double a double
14:14 - is really just a decimal number it's
14:16 - like a floating point number but with
14:18 - more precision
14:19 - there are floats in c sharp but i don't
14:21 - really think they're that important for
14:22 - beginners
14:23 - so with a double we can store a decimal
14:26 - number
14:26 - and int only stores a hole integer
14:30 - so if i try to display like 21.5
14:34 - and then display it this is what happens
14:39 - so we'll run into a build error so with
14:41 - int we can only store
14:42 - whole integers but with a double we can
14:44 - store something that includes a decimal
14:47 - so let's say we have a double height and
14:50 - i'll assign this
14:51 - a perfectly average height of 300.5
14:55 - centimeters i guess and now since this
14:57 - variable is initialized we can use it
14:59 - for something
15:00 - we can change the value or we can use it
15:03 - within a message
15:04 - so let's use console.writeline and i'll
15:07 - display
15:08 - my height within some sort of message
15:11 - let's say your
15:12 - height is space
15:15 - plus height plus another string let's
15:19 - say
15:21 - cm 4 centimeters
15:24 - then let's try it okay your age is 21
15:27 - your height is 300.5 centimeters
15:31 - so a double variable can store a
15:34 - decimal number unlike with integers
15:37 - they only store whole numbers now the
15:40 - next data type is
15:41 - boolean and to declare a boolean
15:43 - variable we type
15:44 - bool then a variable name so booleans
15:48 - can only store
15:49 - true or false so this might be good if
15:51 - you need
15:52 - something that only has like two options
15:54 - like a light switch it's on
15:56 - or it's off if somebody's online that
15:58 - could be true if they're offline
16:00 - that's false or maybe somebody is alive
16:03 - let's say
16:03 - bull alive either true or
16:06 - false but the last time i checked i am
16:08 - alive so i'm going to say that is true
16:11 - and then we can use this boolean
16:12 - variable for something
16:14 - so let's use this within a
16:16 - console.writeline statement
16:18 - console.writeline and what should we say
16:22 - are you alive
16:28 - plus alive
16:31 - are you alive that is true so if i
16:34 - change this to false
16:36 - this would display are you alive
16:40 - that is false so that is a boolean
16:44 - variable it's only true or false
16:47 - so for practice i'll encourage you to
16:49 - try and type something besides true or
16:51 - false like the word pizza
16:53 - we can't shove a whole pizza into a
16:55 - boolean variable it can only be true or
16:57 - false so let's change that back okay the
17:00 - next data type
17:01 - is chart it's a character a single
17:04 - character
17:05 - what about symbol char symbol
17:08 - and we need to place this within single
17:11 - quotes
17:11 - so let's say our character is the at
17:14 - sign
17:15 - and then let's display it
17:19 - console.writeline
17:23 - your symbol is
17:27 - plus symbol
17:33 - your symbol is at sign so make sure that
17:36 - this is within single quotes when you
17:38 - assign a value
17:39 - so with chars we can only assign a
17:42 - single character if i
17:43 - attempted to add like a different symbol
17:45 - too well this wouldn't work then
17:48 - see we're getting an error here so
17:50 - that's where strings come in with a
17:52 - string we can store
17:53 - a series of characters and to declare
17:55 - this we type
17:56 - string with a capital s string let's say
17:59 - name
18:00 - string name and this value is within
18:03 - double quotes
18:04 - so type whatever your first name is and
18:06 - then we can use our name for something
18:09 - let's display a message that says hello
18:11 - whatever your name is
18:13 - console.writeline
18:16 - hello plus name
18:21 - okay hello bro your age is 21 your
18:24 - height is 300.5 centimeters
18:27 - are you alive false your symbol is at
18:30 - sign
18:31 - let's say that we have a username and
18:33 - i'll say
18:35 - string username
18:39 - equals symbol
18:42 - plus name and then i'll display this
18:48 - console.writeline
18:52 - your user name
18:56 - is colon space
18:59 - quotes plus user
19:02 - name whatever you typed here
19:07 - okay your username is at bro
19:11 - those are variables they're containers
19:13 - for values
19:15 - but you can store more than just numbers
19:16 - you can store boolean values
19:19 - characters and strings and a string is a
19:22 - series of characters
19:23 - so if you would like a copy of this code
19:25 - i will post this to the comment section
19:27 - down below
19:28 - and well those are variables in c sharp
19:33 - okay it looks like we're on constants
19:35 - constants are
19:36 - immutable values which are known at
19:39 - compile time
19:40 - and do not change for the life of a
19:42 - program let's say that we have a
19:44 - double variable named pi and this equals
19:47 - the first few digits of pi
19:50 - 3.14159 if this is not a constant
19:53 - people can actually change the value
19:55 - contained within this variable and that
19:57 - could be a security concern let's say pi
19:59 - now equals 420 and then i will display
20:02 - the value contained within pi
20:04 - so if you do not want people to be able
20:06 - to change this value
20:08 - we can precede the data type of this
20:10 - variable with the
20:12 - const keyword and this variable is now a
20:15 - constant and we can't update this
20:16 - variable
20:17 - now that it's a constant so yeah that's
20:19 - a constant it's an immutable value which
20:21 - is known at compile time
20:23 - and does not change for the life of the
20:25 - program and it adds a little bit of
20:27 - security to our programs because people
20:29 - cannot later change these values
20:31 - so yeah those are constants in c sharp
20:35 - oh yeah typecasting typecasting
20:39 - is the ability to convert a value to a
20:41 - different data type
20:42 - it's useful when we accept user input
20:45 - because when the user types in something
20:47 - it's going to be a string and strings
20:49 - can only do so many things
20:50 - and different data types can perform
20:53 - different things
20:54 - so it may be necessary to convert from
20:56 - one data type to another
20:57 - like for example we can't use strings
20:59 - for any sort of math we would need to
21:00 - convert a string
21:02 - to an integer or double to be able to
21:04 - use a string representation of a number
21:07 - so let's begin let's say we would like
21:09 - to convert a double to an integer
21:11 - let's create a double variable named a
21:14 - and i'll assign this a value of 3.1 for
21:17 - the first few digits of pi
21:19 - so what we could do if we wanted to
21:20 - convert this number to an
21:22 - end we could store this within a
21:23 - separate variable let's say
21:25 - int b equals now to convert this value
21:29 - to an integer we can use the convert
21:32 - classes
21:33 - 2 and 32 method so convert
21:36 - dot 2 into 32 parentheses semicolon
21:39 - and within the parentheses i'm going to
21:41 - place what i want to convert
21:43 - i'm going to convert the value stored
21:45 - with an a and then assign it to
21:47 - variable b and then let's display this
21:49 - variable with a rightline statement
21:51 - so console.writeline and then i will
21:54 - display whatever b
21:55 - is then let's try it
21:58 - and the value stored within a b is three
22:01 - so if we convert a double to an integer
22:04 - it's going to truncate
22:05 - any decimal portion if there is any so
22:07 - since we wrote this program this way
22:09 - it's not going to get rid of the value
22:11 - within a
22:12 - so if i were to display a it's going to
22:14 - be 3.14
22:16 - all we did is that we took the value
22:18 - stored with an a
22:19 - and created a copy of it then converted
22:22 - it to an integer and stored it within b
22:24 - it's also possible to display the data
22:27 - type of whatever variable that we're
22:28 - working with
22:29 - so after a within our rightline method
22:32 - type
22:33 - dot get type then add a set of
22:36 - parenthesis this is the
22:38 - get type method so this will display
22:41 - instead of the value stored within a
22:43 - it's going to display the data type of
22:45 - whatever a is
22:47 - so the data type of a is currently
22:50 - a double now let's change this to b
22:53 - b dot get type and our variable b
22:56 - is an integer into 32
23:01 - so if you need the data type of a
23:03 - variable follow
23:04 - that variable with dot get type then a
23:07 - set of parentheses
23:08 - this is a built-in method of variables
23:11 - let's convert an into double this time
23:14 - let's create
23:14 - int c equals what about 1 2 3
23:18 - and we'll create double d equals
23:22 - convert dot to double
23:26 - then parenthesis semicolon within the
23:28 - parentheses
23:29 - we will convert c so place that within
23:31 - there
23:32 - and within a writeline statement we will
23:34 - display
23:35 - whatever d is console.writeline
23:38 - d so if your
23:42 - double doesn't contain like a decimal
23:44 - portion it's not going to display
23:46 - like point zero but if i were to add
23:48 - like
23:49 - 0.1 to the end of this then it will
23:51 - display a decimal portion
23:55 - so 123.1 and the data type
23:58 - of d let's follow this with the get
24:02 - type method so the data type of d
24:05 - is in fact a double okay now let's
24:08 - convert an integer to a string
24:10 - we'll need int what about e e equals
24:13 - three two one and i'll create string
24:17 - f equals convert dot
24:20 - to string are you beginning to see a
24:23 - pattern here
24:24 - then parenthesis semicolon then pass in
24:27 - e
24:27 - so place that within the parenthesis and
24:30 - we will display whatever
24:31 - f is console.writeline
24:35 - the value stored within f and that will
24:38 - be
24:41 - three two one so a string we can't use
24:44 - for any arithmetic but with ins and
24:46 - doubles we can
24:47 - so if we convert an integer to a string
24:49 - we can no longer use this for any math
24:52 - but if we converted a string to an
24:53 - integer then we can use it for any sort
24:56 - of math
24:56 - so let's follow this with get type
24:59 - method
25:00 - f dot get type and the data type
25:03 - of f is in fact a string okay
25:06 - exercise number three let's convert a
25:09 - string
25:09 - to hr hr is just a single character
25:14 - string g equals so a string is always
25:18 - within double quotes what about the
25:19 - dollar sign
25:21 - and a char is always within single
25:23 - quotes we treat strings
25:25 - and chars differently you can store a
25:27 - single character within a string
25:29 - however strings are different from chars
25:31 - there's different things that we can do
25:33 - so let's say char what comes after g e f
25:36 - g
25:36 - h char h equals
25:40 - convert dot to
25:43 - char then of course parenthesis
25:47 - semicolon within the parentheses we will
25:49 - place g
25:52 - and then display whatever h is so
25:57 - console.writeline h
26:00 - so h will still be a dollar sign
26:04 - but we treat it different because it's a
26:05 - character there's different things that
26:07 - we can do
26:07 - then let's get the type of whatever h is
26:12 - and h is hr
26:15 - a single character okay last but not
26:18 - least let's convert
26:19 - a string to a boolean string
26:23 - i equals true within double quotes
26:27 - so this is different from true without
26:30 - double quotes
26:31 - because this is a boolean and right now
26:33 - we're getting an error
26:34 - so represents a boolean true or false a
26:37 - string
26:38 - is always within double quotes so we
26:40 - would treat this string
26:41 - different from this boolean even though
26:44 - they say the same thing
26:45 - okay then let's convert this string to a
26:48 - boolean
26:49 - type bool not cool bull
26:52 - j equals convert
26:56 - dot to boolean
26:59 - parentheses semicolon pass in i
27:03 - then we will display whatever j is
27:06 - console.writeline j and this will
27:09 - display
27:12 - true then let's get the type of this
27:14 - variable
27:15 - so j dot get type method
27:19 - and the data type of j is a boolean now
27:23 - all right everybody so that's how to
27:25 - type cast we can convert
27:27 - a value to a different data type and
27:29 - it's really useful when we accept user
27:31 - input because
27:32 - it's always going to be a string and
27:34 - there's different things that we can do
27:36 - with different data types so it may be
27:38 - necessary to convert from one data type
27:40 - to another
27:41 - so if you would like a copy of all this
27:43 - code i will post this to the comment
27:44 - section down below
27:45 - and well that's typecasting in c sharp
27:49 - hey what's going on everybody it's you
27:52 - bro hope you're doing well and in this
27:53 - video i'm going to show you all how we
27:55 - can accept some user input in c
27:57 - sharp so sit back relax and enjoy the
28:00 - show
28:02 - all right here's how we can accept some
28:04 - user input now when we do accept user
28:06 - input
28:07 - it's of the string data type so let's
28:09 - create a variable
28:10 - to hold and store our input let's create
28:13 - a variable
28:14 - named name and we will ask the user for
28:17 - what their name is
28:18 - now to read some user input type
28:22 - console.readline
28:24 - then parentheses semicolon so when the
28:26 - user
28:27 - types in something then hits enter we
28:29 - will take
28:30 - that user input and store it within this
28:32 - variable name
28:33 - which we can then use for something so
28:35 - within a writeline statement
28:37 - let's use the user's name for something
28:39 - hello
28:40 - plus name and let's take a look
28:45 - okay now to enter in some user input
28:47 - we'll have to type this into the console
28:49 - directly
28:50 - however it is good practice to let the
28:52 - user know what we want them to type in
28:54 - exactly because
28:55 - how's the views are supposed to know
28:57 - that they're supposed to type in their
28:58 - name right here
28:59 - so what we'll do is preceding our
29:01 - readline statement let's create a prompt
29:03 - to tell the user what we want them to
29:04 - type in
29:05 - so within a rightline statement let's
29:07 - say what's
29:08 - your name and then try this again
29:14 - okay what's your name now the user knows
29:16 - that they have to type in their name so
29:18 - type in your first name hit enter hello
29:21 - whatever your first name is
29:22 - okay this time let's accept a user's age
29:26 - and then we'll typecast the user's age
29:28 - into an integer variable
29:30 - so let's copy what we have paste it
29:34 - console.writeline what's your
29:37 - edge and we'll create a new variable of
29:40 - the int data type
29:41 - named age now we'll need to cast this
29:44 - user input into
29:45 - an integer so to do that we would type
29:48 - convert dot 2 and 32
29:52 - parenthesis semicolon now take this
29:55 - statement without the semicolon
29:58 - cut it and then paste it within the
30:00 - parentheses so what we're doing
30:02 - is accepting some user input then
30:04 - converting it
30:05 - to an integer that we're storing within
30:07 - this variable edge
30:08 - and then we will display the user's age
30:12 - console.writeline
30:13 - u r plus age plus
30:18 - years old then let's run this again
30:23 - so our program is actually going to wait
30:25 - at each prompt until the user types
30:27 - something in
30:28 - so what's your name bro let's say that
30:30 - i'm 21 i'll hit enter
30:32 - hello bro you are 21 years old
30:35 - now one issue that you may run into is
30:37 - if the user types in something that's
30:39 - non-numeric and we try and convert it
30:42 - so let's try this again what's your name
30:44 - bro
30:45 - and instead of an age what if i type in
30:47 - a word like pizza
30:48 - this will cause an exception an
30:50 - exception will interrupt our program
30:52 - and this specific exception is a format
30:56 - exception input string was not in a
30:58 - correct format
30:59 - so there will be a future video on
31:02 - handling exceptions which will prevent
31:03 - the program from pausing and being
31:05 - interrupted
31:06 - but that's a future video in the
31:08 - meantime we'll just have to be sure that
31:10 - we're entering in the correct user input
31:12 - well okay then everybody that's how to
31:14 - accept some user input in c
31:16 - sharp i will post this code to the
31:18 - comment section down below
31:19 - and well yeah that's how to accept user
31:22 - input in c
31:23 - sharp hey everyone we're going to cover
31:26 - some basic arithmetic
31:27 - in c sharp so sit back relax and enjoy
31:30 - the show
31:33 - everyone i thought we could just cover
31:34 - some basic arithmetic real quick
31:36 - let's say we have a variable friends and
31:38 - i will assign this a value of what about
31:40 - five
31:41 - and within a writeline statement i will
31:43 - display the value stored within friends
31:45 - so of course
31:46 - friends will have a value of five but
31:49 - what if i need to
31:50 - update this like increment it i could
31:52 - say friends
31:53 - equals friends and we make a friend so
31:56 - we could say friends equals friends plus
31:58 - one
31:58 - because remember the value stored within
32:00 - friends is five
32:02 - this is no different from saying friends
32:03 - equals five plus one which would be six
32:06 - so let me display the value stored
32:08 - within friends and of course
32:09 - that's six of course you can change this
32:11 - to a different number too you could say
32:13 - friends equals friends plus two then the
32:16 - amount of friends that we have
32:17 - is seven so there is a shortcut of
32:20 - writing this too because this can be
32:22 - somewhat tedious
32:23 - what you could say is friends plus
32:25 - equals
32:26 - then the amount that you want to
32:27 - increment this variable by
32:29 - so if i need to increment friends by two
32:32 - i could say friends
32:33 - plus equals two and that would do the
32:35 - same thing that's like a shortcut
32:37 - so of course that would be seven so
32:39 - there's a third way to increment and
32:42 - decrement two
32:42 - this method is found within loops you
32:44 - could say friends
32:46 - plus plus however this will only
32:48 - increment a
32:49 - variable by one so if friends is
32:51 - initially five
32:52 - then we say plus plus well then friends
32:54 - will equal six
32:55 - so there's three different ways to
32:57 - increment a variable
32:58 - this way is found within loops this is
33:00 - the standard way and that's kind of the
33:02 - shortcut this line right here
33:04 - okay so let's decrement friends so we
33:06 - could say friends
33:08 - equals friends minus one or we could say
33:12 - friends minus equals one or
33:15 - friends minus minus so if we combine all
33:19 - these the amount of friends that we have
33:20 - is two let's work on some multiplication
33:24 - if we need to double the amount of
33:26 - friends that we have we would say
33:27 - friends equals friends times
33:31 - we use an asterisk for multiplication
33:33 - and programming
33:34 - times two then the amount of friends
33:36 - that we have
33:38 - is 10 and the shortcut would be
33:43 - friends asterisk equals 2
33:46 - and that would do the same thing now
33:49 - division
33:50 - let's say that steve breaks up our group
33:52 - of friends
33:53 - so we could say friends equals friends
33:55 - divided by two and for division we use a
33:58 - forward slash
33:59 - now pay attention to this our current
34:01 - number of friends is five but what if we
34:03 - divide this by two
34:05 - well you would think that we get 2.5
34:07 - right well you're wrong we end up with
34:09 - 2.
34:09 - that's because friends is an integer we
34:12 - can only store whole numbers
34:13 - we can't store that decimal portion that
34:15 - 0.5
34:16 - so if this was a double well then that
34:19 - would be 2.5
34:21 - so that's referred to as integer
34:23 - division and that's something you have
34:24 - to look out for
34:25 - so if friends equals friends divided by
34:28 - 2
34:28 - well then the shortcut would be friends
34:31 - forward slash
34:32 - equals 2 and that would do the same
34:33 - thing and then remember i'm storing this
34:36 - within an integer so we will truncate
34:38 - that decimal portion and we end up with
34:40 - 2.
34:41 - and our last operator for this topic is
34:43 - the modulus
34:45 - also known as the remainder operator now
34:48 - for
34:48 - this example i'm going to change the
34:49 - amount of friends that we have to 10
34:51 - so we can find the remainder of any
34:53 - division but i'm going to store this
34:55 - within a new
34:56 - variable int remainder
34:59 - and to find the remainder we could say
35:01 - friends
35:02 - then modulus which is represented by a
35:04 - percent sign
35:05 - than 3 so 10 divided by 3
35:08 - will have a remainder and we will store
35:10 - that remainder within a new variable
35:13 - so let's pretend that we have a total of
35:15 - ten people and we have to break up into
35:17 - groups of three so there's going to be
35:20 - one person remaining
35:21 - and i will just display that remainder
35:23 - of one but if this was in groups of two
35:26 - so friends modulus two well ten divides
35:29 - by two evenly
35:30 - so there will be no remainder and the
35:32 - value will be zero
35:34 - so if you need to find the remainder you
35:36 - can always use this modulus
35:38 - the remainder operator and it's also
35:40 - pretty good for finding if numbers are
35:42 - even or odd too so that's always a plus
35:44 - as well
35:45 - alright everybody so that is some basic
35:47 - arithmetic i will post this code to the
35:49 - comment section down below
35:50 - and well that's some basic arithmetic in
35:53 - c sharp
35:54 - hey everyone in this video i'm going to
35:56 - show you all a few useful methods of the
35:59 - math class
36:00 - so sit back relax and enjoy the show
36:05 - alright everybody so here's a few useful
36:07 - methods of the math class that you might
36:09 - be interested in
36:10 - let's begin with creating a double
36:12 - variable named x
36:13 - and i'll assign a value of three now the
36:16 - first useful method
36:17 - is the pow method that will raise a
36:20 - value to a certain power
36:22 - and we'll store this within a new
36:24 - variable let's say a
36:25 - double a equals then to access the math
36:28 - class type
36:30 - math with a capital m dot and here's a
36:33 - whole bunch of methods they have access
36:34 - to
36:35 - so we are looking for the pow method
36:38 - right here
36:38 - then add a set of parentheses semicolon
36:41 - now within the parentheses the first
36:42 - value is your base so the base will be x
36:45 - and that is three
36:46 - and what power do we want to raise x to
36:49 - let's raise x to the second power
36:51 - and then display whatever our result is
36:53 - a so within the right line statement
36:55 - i'm going to display a so here is the
36:58 - result
36:58 - 3 to the power of 2 is
37:01 - drum roll please 9.
37:04 - so if we need 3 to the power of 3 that
37:07 - would be
37:08 - you know x whatever you're working with
37:10 - that's the base
37:11 - comma 3. so 3 to the power of 3
37:15 - is 27. okay let's try square root i'll
37:19 - turn this line into a comment
37:20 - and we'll create double b equals
37:24 - then again to access methods from the
37:25 - math class type
37:27 - math with a capital m dot and we are
37:30 - looking for
37:30 - square root that is all the way down
37:34 - here
37:34 - s q r t parenthesis semicolon within the
37:38 - parentheses
37:39 - we will find the square root of x
37:43 - and then store it within b console.write
37:47 - line
37:48 - b
37:50 - and that would be 1.73 something
37:53 - something something something
37:55 - so that is the square root method let's
37:57 - move on
37:58 - let's create a double c and we'll find
38:01 - the absolute value of x
38:04 - so math dot a b s
38:08 - so the absolute value is how far away
38:11 - something is
38:11 - from zero so if you have a negative
38:13 - number like negative three
38:15 - well it's going to turn that into a
38:17 - positive number
38:19 - so the absolute value of negative 3 oh
38:22 - we need to display c
38:24 - so the absolute value of negative 3 is
38:27 - in fact
38:27 - 3 so that is the absolute value method
38:31 - let's move on rounding so double
38:35 - let's see we're on d equals math.round
38:38 - and we can round a number
38:40 - pay attention to the capitalization too
38:42 - okay
38:43 - now let's change x to 3.14
38:47 - and then we will round x so place that
38:49 - within the parentheses of the round
38:51 - method
38:52 - and we will display d
38:56 - and 3.14 rounded is 3.
38:59 - now you can always round a number up by
39:02 - using the ceiling method
39:03 - let's create double e equals
39:07 - math.ceiling all right then we will
39:10 - place
39:11 - x within this method and display
39:14 - e so 3.14
39:18 - rounded up using the ceiling method is
39:21 - 4.
39:22 - alternatively there is a floor method
39:24 - that will always round down
39:26 - and i'm just going to copy this so
39:28 - double
39:30 - f math dot floor and
39:33 - let's change this to 3.99
39:36 - and display f
39:39 - so 3.99 rounded down is three
39:43 - okay now we'll need two variables for
39:46 - this next example
39:48 - so let's create double y equals
39:52 - what about five okay so we have the
39:55 - max method we can find the maximum value
39:58 - of two values or variables so
40:01 - double g equals math.max
40:06 - and within the parentheses we want to
40:08 - compare x and y
40:10 - and separate each of these with a comma
40:13 - so this will find
40:14 - the max between x and y and store the
40:17 - maximum number within
40:18 - g and then we should display g
40:22 - so the maximum between x and y is y
40:26 - and that contains five then we have min
40:30 - so double h math.min
40:36 - console.writeline h so the minimum
40:39 - between
40:40 - x and y is x 3.99
40:44 - all right everybody so those are a few
40:46 - useful methods of the math class
40:48 - i will post this code to the comments
40:49 - section down below and well
40:51 - yeah those are a few useful methods of
40:53 - the math class
40:55 - hey what's going on everybody it's bro
40:57 - hope you're doing well and in this video
40:58 - i'm going to explain how we can generate
41:00 - some random numbers in c
41:01 - sharp so sit back relax and enjoy the
41:04 - show
41:07 - all right people here's how to generate
41:09 - some random numbers
41:10 - just so you know these are not true
41:11 - random numbers but rather
41:13 - pseudo random numbers and they're fairly
41:15 - darn close so to create some random
41:17 - numbers we'll need to instantiate a
41:19 - random object
41:20 - type random with an uppercase r random
41:23 - with lowercase r
41:24 - equals new random parentheses semicolon
41:28 - so the name of our random object is
41:30 - random really you couldn't name this
41:32 - anything but i usually just call it
41:33 - random
41:34 - and we can use this object to generate
41:36 - random numbers and there's a few
41:38 - built-in methods of this random object
41:40 - to access them add a dot and we'll focus
41:43 - on
41:43 - the next method and next double method
41:46 - next we'll generate a random whole
41:48 - integer so we'll want to specify a range
41:51 - this by itself will generate a random
41:53 - number between i believe
41:54 - zero and just over two billion so we'll
41:57 - probably want to set a range
41:58 - let's pretend that we're rolling a six
42:00 - sided dice i need a random number
42:02 - between
42:03 - one and six so i can set that range
42:05 - within the parentheses
42:06 - so the minimum would be one comma and
42:09 - the max would be
42:10 - technically seven because the second
42:12 - number is going to be exclusive
42:14 - so this will give us a random number
42:16 - between one and
42:18 - six just specify the range and we'll
42:20 - store this within a variable
42:22 - int num equals random.next a random
42:25 - number between
42:26 - one and a six all right then let's
42:29 - display this
42:30 - console.writeline num and we should have
42:33 - a random number between
42:34 - one and six
42:38 - and we got six all right then you can
42:40 - always make adjustments to this too like
42:42 - you can add
42:42 - i don't know 100 and that should give us
42:45 - a number between
42:46 - 101 and 106. so that's always an option
42:50 - too
42:51 - okay now what if you need to roll a
42:53 - 20-sided dice like we're playing
42:54 - dungeons and dragons we use polyhedral
42:57 - dice
42:57 - so that would be 1 comma 21 and this
43:00 - will give us a random number between
43:02 - 1 and 20 and we rolled an 8.
43:05 - now there is a next double method which
43:08 - will generate a random
43:09 - decimal number so let's say double num
43:13 - equals random dot next double
43:18 - and the random number will be between 0
43:21 - and
43:21 - 1. so we have 0.701
43:26 - something something something something
43:28 - so if you need a random
43:29 - decimal or random double number you can
43:31 - use random.next double
43:34 - otherwise if you need a random hold
43:36 - integer you're better off using the next
43:38 - method of random
43:40 - now if you need let's say three random
43:42 - numbers we can keep on reusing the same
43:44 - random object we only need to
43:45 - instantiate it once
43:47 - let's say we're going to roll three dice
43:49 - so three
43:50 - six sided dice let's copy what we have
43:53 - and paste it twice
43:54 - so we have num1 num2 num3
43:58 - then let's display these
44:00 - console.writeline num1
44:02 - num2 and num3
44:06 - so we will have three random numbers and
44:09 - the result
44:10 - is three six and four well okay then
44:13 - everybody that
44:14 - is how to generate random numbers in c
44:16 - sharp
44:17 - i will post this code to the comment
44:19 - section down below if you can give this
44:21 - video a thumbs up
44:22 - drop a random comment down below and
44:24 - well that's how to generate random
44:25 - numbers
44:26 - in c sharp hey what's going on people
44:29 - it's
44:29 - bro hope you're doing well and in this
44:31 - video we're going to create a small
44:32 - program to find the hypotenuse of a
44:34 - right triangle
44:35 - in c sharp so sit back relax and enjoy
44:38 - the show
44:41 - everyone i thought for practice we could
44:43 - create a small program to find
44:45 - the hypotenuse of a right triangle this
44:47 - will be more or less just for practice
44:49 - so we'll need some prompts
44:51 - let's ask for sides a and b let's begin
44:54 - with a
44:55 - enter side a and then we'll store
44:59 - the user's input within a double double
45:02 - a equals and we'll convert the user
45:05 - input
45:06 - to a double convert to
45:09 - double then within the parenthesis
45:15 - console.read line
45:17 - then another set of parenthesis make
45:19 - sure there is a semicolon at the end too
45:21 - okay then for side b we can just copy
45:24 - what we have
45:25 - change any instance of a to b enter
45:28 - side b double b
45:32 - and we'll have to calculate whatever c
45:34 - is double
45:35 - c math dot square root
45:40 - then we need to multiply a times a
45:46 - that's effectively a to the power of two
45:49 - plus
45:51 - b times b and
45:54 - let's display the result
45:58 - console.writeline
46:00 - the hypotenuse
46:04 - is plus c
46:09 - and let's give it a go okay enter
46:12 - side a how about three enter side b four
46:16 - the hypotenuse is five well everybody
46:18 - that was
46:19 - a very small practice program if you
46:22 - would like a copy of this code i will
46:24 - post this to the comment section down
46:25 - below
46:26 - if you can give this video a thumbs up
46:28 - drop a random comment down below
46:30 - and well that is a very small sample
46:32 - program
46:33 - in c sharp hey what's going on everybody
46:37 - it's you bro hope you're doing well and
46:38 - in this video i'm going to show you all
46:40 - some useful string methods in c
46:42 - sharp so sit back relax and enjoy the
46:44 - show
46:47 - all right everybody here's a few useful
46:49 - string methods that you may be
46:51 - interested in
46:52 - so to begin we'll need a string to work
46:53 - with or a variable containing a string
46:56 - so why don't we create a variable named
46:58 - full name to store your own full name
47:01 - now to access some methods available to
47:04 - strings we'll need
47:04 - to type a string or a variable
47:06 - containing a string
47:08 - then follow this with a dot and there
47:09 - should be a prompt for
47:11 - a whole bunch of methods that we have
47:13 - access to i'll show you some of the more
47:15 - useful ones
47:16 - like two upper full name dot to upper
47:18 - then to invoke this
47:20 - add a set of parentheses then a
47:22 - semicolon to finish this statement but
47:24 - then we'll need to reassign this
47:26 - full name equals full name to upper
47:29 - then we can display our full name and
47:31 - when i run this
47:32 - my name should all be uppercase
47:35 - just like that okay now alternatively
47:38 - there's
47:39 - two lower it's the same process as
47:41 - before
47:42 - but change the method to lower
47:46 - and my name should all be lowercase okay
47:49 - so that's
47:49 - two upper and two lower let's move on
47:52 - for this next example we'll need a phone
47:54 - number
47:55 - so let's create a string named phone
47:58 - number equals and make up some phone
48:01 - number and be sure to include some
48:03 - dashes
48:03 - one two three four five six seven eight
48:06 - nine zero
48:07 - okay what i'm going to do is replace
48:09 - these dashes with a different character
48:12 - so to do that we'll need to use the
48:14 - replace method
48:15 - so phone number dot replace
48:20 - so within the set of parentheses we'll
48:22 - need the character we're going to
48:24 - replace
48:25 - and another character we're going to
48:27 - replace the old character with
48:29 - so i would like to replace all dashes
48:32 - with a forward slash so separate each of
48:35 - these characters with a comma
48:38 - so this will replace my phone number the
48:40 - dash is within the phone number
48:42 - with forward slashes phone number equals
48:44 - phone number dot replace
48:46 - and let's display our phone number with
48:49 - a right line statement
48:51 - so all of these dashes have been
48:53 - replaced with forward slashes
48:55 - now if you replace these with no
48:57 - characters just an empty set
48:59 - of quotes that will effectively remove
49:02 - those dashes within the phone number
49:04 - which could have some uses too so that
49:06 - is the replace
49:07 - method available to strings next we have
49:10 - the insert method we can insert
49:12 - a character or a string at a given index
49:14 - within a pre-existing string
49:16 - let's say i would like to take my full
49:18 - name and turn it into some sort of
49:20 - username
49:21 - by preceding my first name with the at
49:23 - sign
49:24 - so to do that i can use the insert
49:26 - method i'll create a new
49:28 - variable for this example let's say
49:29 - string username
49:31 - equals full name dot insert
49:34 - and with the insert method we will list
49:36 - an index
49:38 - and what we would like to insert so
49:40 - computers they always start at zero
49:42 - the beginning would be zero that would
49:43 - be the first index
49:45 - so at the beginning index zero i would
49:47 - like to insert
49:48 - an at sign and this will create a new
49:51 - variable called username
49:53 - so i will display that within a
49:55 - rightline statement
49:57 - console.writeline username and my
50:00 - username is now at whatever my full name
50:03 - was
50:04 - now this doesn't necessarily have to be
50:06 - a single character we could
50:07 - say like mr dot and precede
50:11 - my full name with mr and my username is
50:15 - now mr bro code okay so that is the
50:18 - insert
50:18 - method what i'm about to show you next
50:21 - technically
50:21 - isn't a method it's a property but it's
50:23 - found within the same place as methods
50:25 - for
50:26 - strings so to access the length property
50:29 - of a string type a string dot link
50:33 - and you do not add a set of parenthesis
50:35 - afterwards that is done with methods
50:37 - so the length property will return the
50:40 - given amount of characters within a
50:41 - string
50:42 - so i'm going to display this within a
50:44 - rightline statement
50:45 - if you need this you can always like
50:47 - assign this to a variable or something
50:49 - but that might be overkill for this
50:51 - lesson so console.writeline
50:53 - the length of my full name and my full
50:56 - name
50:56 - has eight characters in it one potential
51:00 - use of the length property of strings
51:02 - is that let's say that somebody's
51:03 - creating a username and there's a max 12
51:05 - characters
51:06 - well you can get the length of whatever
51:07 - they type in and check to see if it's
51:09 - more than 12 characters
51:10 - this next method is the substring method
51:13 - and it can be a little complex
51:15 - basically speaking we can take a section
51:17 - from an original string
51:19 - and create an entirely new string but we
51:21 - have to specify
51:22 - a position and how many characters you
51:24 - would like to extract
51:26 - from that given position so we'll create
51:29 - two new strings
51:30 - from full name first name and last name
51:32 - using the substring method
51:34 - so let's declare string first name
51:38 - equals full name dot
51:41 - substring okay so within the substring
51:45 - we're going to list
51:46 - an index and the amount of characters
51:48 - afterwards we would like to include
51:50 - within our substring
51:51 - so i would like to take the first three
51:54 - characters from my full name
51:55 - so the index computers always start with
51:57 - zero of the beginning of my string
51:59 - would be zero and i'm going to take
52:01 - three characters
52:02 - after this index so if i was to display
52:06 - my first name now it's going to be
52:09 - bro the first three characters of my
52:11 - full name
52:12 - now let's do the same thing with last
52:14 - name so let's copy what we have
52:17 - change first name to last name but now
52:20 - we have a different index
52:22 - so i would like my substring to begin
52:24 - where the c is
52:25 - so let's count what the index is going
52:27 - to be this would be 0
52:29 - 1 2 3 four so let's change
52:32 - zero to four and how many characters
52:35 - would we like to include within our
52:36 - substring
52:38 - one two three four so four
52:41 - comma four and that is my last name so i
52:43 - will display that within
52:45 - a writeline statement first name and
52:47 - last name
52:49 - so that is the substring method we can
52:51 - take a section or a slice
52:53 - from an original string and create an
52:55 - entirely new string from it
52:57 - all right everybody those are a few
52:59 - useful string methods
53:01 - but not all of them so if you would like
53:03 - a complete list you can always type a
53:05 - string
53:06 - dot and there should be a pop-up for all
53:08 - of the different string methods you can
53:09 - access
53:10 - and if you highlight one of these
53:11 - there's a description of what they do
53:13 - exactly
53:14 - i only showed you a few of the more
53:15 - useful ones for beginners
53:17 - so if you can give this video a big fat
53:19 - thumbs up drop a random comment down
53:21 - below and well
53:22 - those are some useful string methods in
53:25 - c sharp
53:28 - all right people if statements an if
53:31 - statement
53:32 - is a basic form of decision making if
53:34 - some condition that we specify
53:36 - is true we can execute a block of code
53:39 - if it's not true we can do something
53:40 - else entirely
53:42 - so let's write a small program where we
53:44 - will ask a user to enter in their edge
53:46 - and depending on their age we can write
53:48 - an if statement that checks to see if
53:50 - somebody is 18 years or older
53:52 - let's say that a user is signing up for
53:54 - a credit card and you have to be 18
53:55 - years or older
53:56 - so if their age is greater than or equal
53:59 - to 18
54:00 - we will display a message that says
54:02 - you're now signed up if they're less
54:03 - than 18 we can do something else
54:06 - so to write an if statement we just
54:07 - write if then parentheses to hold
54:10 - some sort of condition which we would
54:11 - like to evaluate followed by a set of
54:13 - parentheses
54:14 - so if some condition that we set within
54:16 - the parentheses is true
54:18 - we will execute this block of code if
54:20 - it's not true we skip over it entirely
54:22 - so let's check to see if age is greater
54:24 - than or equal to 18
54:26 - then we will display something console
54:29 - that right line you are now signed up
54:34 - and let's try it please enter your age
54:37 - let's say that i'm 21 i hit enter
54:39 - boom you are now signed up now what if i
54:41 - enter in an edge that's less than 18
54:43 - let's say that i'm 12 years old and i'm
54:45 - trying to sign up for a credit card
54:46 - well nothing appears to happen and
54:48 - that's normal so if
54:50 - this condition evaluates to be true we
54:52 - execute this block of code
54:54 - if it's false we skip over it entirely
54:56 - as if it never existed
54:58 - now we can take a different course of
54:59 - action if our above condition
55:02 - is false we can perform some other block
55:04 - of code
55:05 - so let's display a message that says you
55:06 - must be 18 years or older to sign up
55:09 - you must be 18 plus to sign
55:12 - up so if this condition is true we do
55:15 - this
55:15 - if it's false we do this so let's try it
55:18 - again
55:19 - please enter your age let's say that i'm
55:20 - 12 i hit enter you must be 18 plus to
55:23 - sign up
55:24 - so if this is true do this if it's not
55:27 - true
55:27 - do this now between the if and else
55:30 - statements you can add an else if
55:31 - statement
55:32 - if there's more things they want to
55:33 - check before reaching the else block
55:35 - so the else block is kind of like a last
55:38 - resort if all of buff statements
55:40 - evaluate to be false
55:42 - let's check to see if somebody's age is
55:45 - less than zero else if age is less than
55:48 - zero
55:49 - then we will display a custom message
55:51 - such as
55:53 - you haven't been born yet
55:57 - please enter your age i am negative 12
56:00 - years old
56:01 - you haven't been born yet with these
56:03 - else if statements you can add as many
56:05 - as you want between
56:06 - if and else let's add another so i will
56:08 - copy what we have
56:10 - let's check to see if somebody's age is
56:12 - greater than 100
56:13 - if it is then we'll say i don't know
56:15 - you're too old to sign up
56:16 - that's kind of mean i guess but it
56:18 - serves the purpose of this example
56:20 - so you are too old to sign
56:23 - up now we're going to run into one issue
56:27 - okay please enter your age i am 101
56:29 - years old
56:30 - you are now signed up now the reason
56:33 - that this block of code executed and not
56:35 - this one is that we're just going down
56:37 - an order starting from the top
56:39 - since age which was 101 is technically
56:42 - greater than or equal to 18
56:44 - this condition evaluated to be true and
56:47 - we executed
56:48 - this block of code and skipped
56:49 - everything else after it and continued
56:51 - on to the rest of the program
56:53 - so if we first want to check to see if
56:55 - somebody's age is greater than
56:56 - 100 we should probably put that within
56:59 - the if statement and check that first
57:01 - because age is technically greater than
57:03 - or equal to 18 if we set age to be
57:06 - 101 else if we will check to see if age
57:09 - is greater than or equal to 18
57:11 - then we just have to change these lines
57:13 - of text around
57:15 - so you are too old to sign up so the
57:18 - order of
57:19 - these if statements and else if
57:20 - statements does matter
57:22 - and let's try it again okay please enter
57:24 - your age i am 101 years old
57:26 - you are too old to sign up all right now
57:29 - in this next example let's ask a user
57:31 - for their name instead of their age
57:33 - let's change int age to string name
57:36 - and we do not need to convert this
57:38 - because it's already a string
57:40 - so to check to see if somebody does not
57:42 - enter in some user input
57:43 - we can check to see if our variable name
57:48 - equals an empty set of quotes so this is
57:51 - an empty string
57:52 - now the reason that we're using two
57:53 - equal signs is that this is a comparison
57:56 - operator
57:57 - if you just use one that is an
57:59 - assignment operator
58:00 - c sharp thinks you're attempting to
58:02 - assign name with an empty string
58:05 - so we're comparing if these two are
58:07 - equal so that's why we use
58:09 - double equals so if name is equal to an
58:11 - empty string
58:12 - that means that somebody skipped over
58:14 - entering in some user input
58:16 - so let's yell at them you did
58:19 - not enter your name so
58:22 - if our name is not empty we can display
58:26 - maybe hello whatever the user's name is
58:28 - so
58:30 - hello plus name
58:34 - and let's try it
58:37 - okay please enter your name i'm just
58:38 - going to hit enter you did not enter
58:40 - your name
58:41 - let's run this again and take it
58:43 - seriously this time please enter your
58:45 - name
58:45 - bro hello bro now there's another way in
58:48 - which we could
58:49 - write this so instead of using this
58:51 - double equal sign we can use
58:53 - exclamation point equal sign that means
58:56 - not equals
58:57 - if name does not equal an empty string
58:59 - then we will display
59:01 - hello name else we will display
59:05 - you did not enter your name so we're
59:07 - checking to see if name is
59:08 - not equal to an empty string and if
59:10 - that's true display hello
59:12 - name okay please enter your name i'll
59:15 - hit enter
59:16 - you did not enter your name let's try it
59:18 - again please enter your name
59:20 - bro hello bro all right everybody those
59:23 - are if statements they're a very basic
59:26 - form of decision making we can check to
59:27 - see if some condition
59:29 - is true if it is true then we can do
59:31 - something if not we can do something
59:32 - else
59:33 - so if you would like a copy of both
59:35 - examples from this video i will post
59:37 - that code to the comment section down
59:39 - below
59:39 - and well those are if statements and see
59:42 - you sharp
59:43 - hey what's going on everybody it's you
59:45 - bro hope you're doing well
59:47 - and in this video i'm going to explain
59:49 - switches in c-sharp
59:50 - so sit back relax and enjoy the show
59:55 - all right everybody switches a switch is
59:58 - an efficient alternative
59:59 - to writing many else if statements i
60:01 - wrote a small program
60:03 - we'll ask a user what day is it today
60:05 - like what day of the week
60:06 - and we'll store their input within a
60:08 - variable named day
60:10 - if day equals monday we'll write it's
60:12 - monday and we have else if statements
60:14 - for every day of the week that follows
60:16 - after and an else block at the end
60:18 - day is not a day they type in something
60:20 - that's obviously not a day
60:22 - using else if statements back to back
60:24 - like this really isn't that efficient
60:26 - and if a veteran programmer sees you do
60:28 - something like this
60:29 - they'll probably call you a noob a few
60:31 - else if statements is okay but
60:33 - this is somewhat excessive so let's
60:35 - rewrite this program
60:36 - so that we use a switch instead here's
60:39 - how to create one we'll keep our prompt
60:40 - too
60:41 - so switch parentheses curly braces
60:44 - within the parentheses we will place
60:47 - what we would like to examine
60:48 - we will examine our day variable against
60:51 - many cases
60:52 - and if there is a match then we will
60:54 - execute some block of code
60:56 - so to write a case write case then some
60:59 - value
61:00 - like monday then end this with a colon
61:03 - so anything indented after our case is
61:06 - part of the block of code for this case
61:09 - so if we have a match if day equals case
61:12 - monday then let's write it's monday
61:17 - then on the next line add a break to
61:19 - exit the switch
61:20 - okay so that's one case let's write a
61:23 - case for each
61:24 - day of the week and i'll just fast
61:25 - forward this footage
61:31 - and our switch is now complete although
61:33 - i did not add that line from the else
61:35 - statement quite yet we'll take care of
61:37 - that a little bit later
61:38 - so let's run this just to test it so
61:41 - what day is it today let's say that it's
61:42 - sunday
61:43 - enter it's sunday nice one thing that
61:46 - we're missing although it's optional
61:48 - is a default case if there's no matches
61:50 - what we want to do
61:52 - so currently there is no default case
61:54 - within the switch
61:55 - so what day is it today if i write
61:57 - something incorrect like
61:58 - pizza well the switch technically
62:00 - doesn't do anything
62:01 - so if there are no matching cases let's
62:04 - do something
62:05 - and we type default colon space if there
62:07 - are no matching cases we will perform
62:10 - this block of code at the end so let's
62:12 - write something
62:13 - day plus is
62:16 - not a day and then break
62:21 - and let's try it again so this is kind
62:23 - of like our else statement
62:24 - okay what day is it today this time
62:27 - let's say it's
62:28 - birthday birthday is not a day
62:32 - all right everybody those are switches
62:34 - they're efficient alternatives to using
62:37 - many else if statements
62:38 - if you would like a copy of this code i
62:40 - will post this to the comment section
62:42 - down below
62:43 - if you can give this video a thumbs up
62:45 - drop a random comment down below
62:47 - and those are switches in c sharp
62:52 - all right logical operators we can use
62:54 - logical operators to check to see if
62:56 - more than one condition
62:58 - is true or false we'll use two logical
63:01 - operators
63:02 - and as well as or and is represented by
63:04 - two ampersands
63:06 - and or is represented by two vertical
63:08 - bars we'll create a small program
63:10 - to ask the user what the temperature is
63:12 - outside and depending on what the user
63:13 - types in will display a custom message
63:16 - so we'll need to work with ranges of
63:18 - temperatures so let's begin we'll ask
63:20 - the user
63:20 - for some input so console.writeline
63:24 - what's the temperature outside
63:27 - and you can write this in fahrenheit or
63:29 - celsius but i'll use celsius
63:31 - okay then we'll store our input within a
63:34 - double
63:34 - variable named temp short for
63:36 - temperature and we'll need to use
63:39 - console.read
63:40 - line and then we'll need to convert this
63:43 - to a double
63:44 - using convert dot 2 double method so
63:47 - convert
63:47 - dot 2 double then within the parenthesis
63:51 - place your redline method within here
63:56 - okay now we need to check to see if our
63:59 - temperature falls within a certain range
64:01 - using an if statement and using the and
64:03 - logical operator
64:04 - that will help us with that so let's
64:06 - check to see if our temp
64:08 - is greater than or equal to 10 degrees
64:11 - celsius and if our temperature
64:14 - is less than or equal to what about 25
64:18 - so both of these conditions must be true
64:21 - in order for us to execute this
64:23 - if statement if one of them is false we
64:26 - will skip over this if statement
64:27 - so this condition needs to be true and
64:30 - this condition needs to be true so our
64:33 - temperature has to fall within
64:34 - that range so we will display a custom
64:37 - message
64:38 - like it's warm outside it's not hot
64:42 - it's not cold it's just warm let's try
64:44 - it
64:45 - okay so what if the temperature was like
64:49 - 35 degrees celsius well nothing appears
64:52 - to happen we did not execute
64:54 - this if statement even though this
64:56 - condition is true
64:57 - this condition must also be true because
64:59 - we're using the and logical operator
65:02 - so let's try this again and type in a
65:04 - temperature between that range
65:05 - what's the temperature outside let's say
65:07 - that it's 15 degrees celsius
65:10 - it's warm outside now using the or
65:12 - logical operator
65:14 - only one of these conditions needs to be
65:16 - true in order for this entire expression
65:18 - to evaluate to be true unlike with the
65:21 - analogical
65:22 - operator both conditions must be true so
65:24 - let's check for some extreme
65:25 - temperatures using an else if statement
65:28 - else if temp let's say is less than or
65:32 - equal to
65:33 - negative 50 or temp
65:36 - is greater than or equal to 50
65:40 - then we will display do
65:43 - not go outside
65:46 - let's try it okay what's the temperature
65:49 - outside
65:50 - let's say that it's negative 52 degrees
65:52 - celsius do not go outside
65:54 - so even though this condition is true
65:57 - and
65:57 - this one is false using the or logical
66:00 - operator
66:00 - only one of these conditions needs to be
66:02 - true in order for our entire expression
66:05 - to evaluate to be true so let's do the
66:07 - same thing with a
66:08 - very high temperature this time what's
66:11 - the temperature outside let's say that
66:13 - it's like a kajillion degrees celsius
66:15 - maybe our sun explodes or something do
66:18 - not go outside
66:19 - well okay then everybody those are
66:21 - logical operators we can use them to
66:23 - check to see if more than one condition
66:25 - is true or false so if you would like a
66:28 - copy of this code i will post this to
66:30 - the comment section down below and well
66:32 - those are logical operators in c sharp
66:38 - all right while loops a while loop will
66:40 - repeat some code while some condition
66:42 - remains true we'll write a small program
66:45 - where we will ask a user to enter in
66:47 - their name
66:47 - if they do not enter in anything we will
66:49 - keep on prompting them to enter their
66:51 - name they have to enter something
66:53 - in order to escape the loop so this is
66:55 - what we'll do to begin with
66:56 - let's create a prompt to ask a user for
66:58 - their name
66:59 - i'll use a write statement instead of a
67:01 - writeline statement
67:03 - and let's say enter your name
67:06 - and then we will declare a string
67:08 - variable named name
67:13 - the console.readline and then store that
67:15 - within variable name
67:17 - and then at the end of our program we'll
67:19 - say hello
67:20 - plus name okay so after running this
67:24 - what if a user doesn't type in anything
67:26 - like they just had enter
67:28 - hello and then there's nothing here so
67:30 - what if we
67:31 - try and force the user to enter in
67:33 - something we can write this code within
67:35 - a while loop
67:36 - so after we accept user input for the
67:39 - first time
67:39 - let's check that user input and we'll
67:42 - use a while loop
67:43 - our condition will be while name is
67:45 - equal to
67:46 - an empty string we will prompt the user
67:49 - again
67:49 - to enter in something for their name and
67:52 - we do not need to declare
67:53 - name twice name equals console.readline
67:56 - so let's try this again our condition is
67:58 - we will continue
67:59 - this while loop this section of code as
68:02 - long as name
68:03 - equals an empty string if they just hit
68:05 - enter so let's try it
68:06 - okay enter your name i'm going to hit
68:08 - enter enter your name no
68:10 - enter your name no and to your name no
68:12 - okay i'll type in something
68:14 - hello bro so with a while loop you'll
68:17 - need some way to eventually
68:18 - exit the while loop otherwise that is
68:20 - known as an infinite loop
68:22 - and here's an example of an infinite
68:23 - loop i'm going to say
68:25 - while one is equal to one
68:28 - and then let's display something else
68:30 - such as
68:33 - help i'm stuck in
68:36 - an infinite loop so basically we have no
68:40 - way to
68:41 - change this condition so it's always
68:43 - going to be true
68:44 - and we will repeat this code forever so
68:46 - let's try it again
68:50 - okay enter your name help i'm stuck in
68:53 - an infinite loop
68:55 - so with a while loop you'll eventually
68:57 - want some way to eventually
68:58 - exit the while loop now to optimize this
69:01 - code we don't technically need
69:03 - this right statement here because we
69:04 - will ask that within the while loop
69:07 - and i'm going to declare string name and
69:10 - assign this
69:11 - an empty string so this would work the
69:13 - same as before as well
69:15 - so enter your name i do not type in
69:17 - anything and we are prompted again to
69:19 - type in our name
69:20 - and i'll type in something well okay
69:22 - then everybody those are while loops
69:24 - they will repeat
69:25 - some code while some condition remains
69:28 - true
69:29 - and it will do so infinitely until this
69:32 - condition becomes false
69:34 - if you would like a copy of this code i
69:35 - will post this to the comment section
69:37 - down below
69:38 - if you can give this video a thumbs up
69:40 - drop a random comment down below
69:41 - and well those are wild loops in c sharp
69:47 - okay
69:48 - for loops a for loop will repeat some
69:51 - code a
69:52 - finite amount of times unlike with while
69:55 - loops a while loop will execute an
69:57 - infinite amount of times as long as its
69:59 - condition remains true
70:01 - for loops are limited so let's create a
70:03 - for loop to i don't know
70:05 - count to ten so let's create a for loop
70:07 - by typing four
70:08 - parentheses curly braces and within the
70:11 - for loop the parentheses of the for loop
70:14 - there's three separate statements we're
70:16 - going to fill in the first
70:17 - is that we need some sort of counter or
70:19 - index to keep track of which iteration
70:22 - we're on within the for loop
70:23 - so let's declare an index int index
70:26 - and i will assign zero to begin with so
70:29 - people usually just shorten
70:31 - index to simply i for short
70:34 - so that is the first statement the
70:36 - second statement is our condition
70:38 - when do we want to stop so let's stop
70:41 - when
70:41 - i is greater than or equal to 10.
70:44 - so we'll just say i is less than 10.
70:48 - so it's kind of like we'll continue this
70:50 - for loop as long as
70:51 - i is less than 10 and once we hit 10
70:54 - we'll stop
70:55 - and then the third statement is how much
70:57 - do we want to
70:58 - increment or decrement our index by so
71:01 - you can write
71:02 - i plus equals one to increment by one or
71:05 - another variation is just
71:07 - i plus plus so after each iteration
71:09 - we'll increment i
71:11 - our counter our index by one and during
71:14 - each iteration
71:14 - let's display whatever i is so after
71:17 - running this code
71:18 - we will execute this for loop ten times
71:21 - and we will count
71:22 - the numbers zero through nine so if we
71:25 - want 1 through 10 we can change our
71:27 - index
71:27 - to 1. into i equals 1 and we will
71:31 - continue this for loop as long as i
71:33 - is less than or equal to 10 and then
71:36 - our for loop will execute a total of ten
71:39 - times and count the numbers one through
71:41 - ten
71:42 - and you can also skip iterations too
71:44 - like we can increment
71:45 - our index i by two i plus equals
71:49 - two
71:52 - now this for loop is going to execute
71:54 - five times we're incrementing our index
71:57 - by two during each iteration
71:59 - let's change this to three i plus equals
72:02 - three
72:04 - and this will execute four times one 4 7
72:07 - 10. okay let's do something a little bit
72:10 - different let's count down let's pretend
72:12 - that we're counting down to a new year
72:14 - so we'll start at 10 and count down to
72:16 - one then display happy new year
72:18 - so four parentheses curly braces
72:22 - we'll set index i to equal 10 to begin
72:25 - with
72:26 - we'll continue this as long as i is
72:28 - greater than
72:29 - zero then we will decrement i by one
72:33 - during each iteration so you can use
72:35 - minus minus or
72:36 - minus equals one either variation works
72:39 - okay so
72:40 - after each iteration we will display i
72:43 - then when we exit our for loop we will
72:46 - display happy new year within a
72:47 - rightline statement
72:48 - so happy new year
72:52 - let's try it okay 10 9 8 7
72:55 - 6 5 4 3 2 1 happy new year
72:59 - so everybody those are for loops they
73:01 - will repeat
73:02 - some code a finite amount of times
73:05 - unlike with a while loop a while loop
73:07 - will execute
73:08 - some code infinitely as long as its
73:10 - condition remains true
73:12 - a for loop is limited in that regard
73:14 - well everybody
73:15 - those are for loops if you can give this
73:18 - video a big fat thumbs up
73:19 - drop a random comment down below and
73:21 - well those are for loops
73:23 - in c sharp hey what's going on everybody
73:25 - it's you bro hope you're doing well
73:27 - and in this video we're going to use
73:29 - nested loops to create a program to draw
73:31 - a rectangle for us made out of a certain
73:33 - symbol that we choose
73:34 - so sit back relax and enjoy the show
73:39 - all right welcome back so nested loops a
73:42 - nested loop is a
73:44 - loop that's inside of another loop there
73:47 - is an outer loop
73:48 - and an inner loop and both of these
73:50 - combined are nested
73:51 - loops so the uses they vary they're used
73:54 - a lot in sorting algorithms so i thought
73:56 - let's create a program where we will
73:58 - draw a rectangle
74:00 - we'll have the outer loop in charge of
74:02 - counting the rows
74:03 - and the inner loop in charge of counting
74:05 - the columns and we will let the user
74:07 - choose a symbol that they would like to
74:09 - create their rectangle of
74:10 - so we'll need to accept some user input
74:13 - so console.writeline
74:15 - let's ask how many rows how many
74:18 - rows actually let's make this a write
74:23 - statement
74:24 - okay and then we will store this within
74:26 - int rows
74:28 - equals then we will need to convert some
74:30 - user input
74:31 - convert 2 and 32
74:34 - because user input's always a string
74:38 - then within the parenthesis console.read
74:44 - okay let's ask for columns
74:47 - so let's copy this paste it
74:51 - how many columns int
74:55 - columns then let's ask the user for a
74:59 - symbol to use
75:05 - what symbol or character
75:09 - and let's use a string i guess you can
75:12 - use a char as well
75:14 - string symbol and we do not need to
75:16 - convert this because it's already a
75:18 - string
75:19 - okay we'll have an outer loop in charge
75:21 - of counting the rows
75:23 - and the inner loop is in charge of
75:24 - counting the columns
75:27 - so four then we need our index
75:30 - by the way it doesn't matter if you use
75:32 - a while loop or a for loop
75:34 - it's just the concept of having a loop
75:36 - inside of another loop i just so happen
75:37 - to be using
75:38 - a for loop for the outer loop and a for
75:41 - loop for the inner loop
75:43 - so into i equals zero
75:47 - we will continue this as long as i is
75:50 - less than
75:51 - our rows because we're letting the user
75:53 - choose how many rows
75:55 - then we will increment i by 1 during
75:58 - each iteration
75:59 - now we need an inner for loop and let's
76:01 - just copy this
76:03 - now one naming convention with the index
76:06 - of the inner for loop since i is already
76:08 - taken
76:09 - what people usually use for an index for
76:11 - the inner loop is
76:12 - j because j comes after i i guess
76:15 - so into j equals zero j
76:18 - is less than columns than
76:22 - j plus plus okay now what we'll do
76:25 - within
76:25 - the inner for loop is display our symbol
76:29 - so console dot right make sure you use
76:32 - right and not right line we will display
76:35 - our symbol
76:37 - so this inner loop is in charge of the
76:39 - columns
76:40 - the outer loop is in charge of the rows
76:42 - basically how this is going to work
76:44 - is that once we enter our outer for loop
76:47 - we will immediately enter our inner for
76:49 - loop in order to complete
76:51 - one iteration of the outer for loop we
76:54 - have to finish
76:55 - all iterations of the inner for loop and
76:58 - once we finish
76:59 - all iterations of the inner for loop we
77:01 - can complete
77:02 - one iteration of the outer for loop and
77:05 - during the next iteration
77:06 - we have to do it all over again so on
77:08 - the next iteration we would have to
77:10 - complete
77:10 - all the iterations for the inner for
77:12 - loop so
77:14 - this will display a rectangle made out
77:16 - of a certain symbol
77:18 - however there is one thing missing and
77:19 - i'll show you how many rows
77:21 - let's say four how many columns five and
77:24 - what symbol
77:25 - uh what about the i don't know that sign
77:29 - all right so this ended up in one long
77:32 - row so after we complete our iterations
77:35 - for the inner for loop we should
77:36 - probably move down to the next row
77:38 - kind of like a typewriter we finish one
77:40 - line then we move down to the next row
77:42 - so let's use an empty rightline
77:44 - statement just to move down to the next
77:45 - line
77:46 - so if we try this again okay four rows
77:50 - five columns let's use an at sign there
77:53 - we go there's a rectangle we have
77:55 - one two three four five columns
77:58 - and one two three four four rows
78:01 - so basically a nested loop is really
78:03 - just a loop that's inside of another
78:05 - loop
78:06 - when you'll encounter it it really
78:07 - varies but they're used a lot in sorting
78:09 - algorithms
78:10 - and this was a small program just to
78:13 - practice
78:13 - working with nested loops alright so if
78:16 - you want a copy of this code i will post
78:18 - this to the comment section down below
78:19 - if you liked this video give it a thumbs
78:21 - up drop a random comment down below
78:23 - and that is an example of nested loops
78:26 - in c
78:26 - sharp hey everyone it's you bro hope
78:30 - you're doing well
78:30 - and in this video we're going to create
78:32 - a number guessing game
78:33 - in c sharp so sit back relax and enjoy
78:37 - the show
78:40 - all right let's create a number guessing
78:42 - game we will randomly generate some
78:44 - random number between
78:45 - a set minimum and maximum and we will
78:48 - let the user guess as to what the number
78:50 - is
78:50 - if the number is too high or too low we
78:52 - will give a hint
78:53 - and the user can keep on guessing and
78:55 - we'll keep track of how many attempts it
78:57 - takes
78:58 - so we'll need a random object to
79:00 - generate some random numbers
79:02 - random random equals new random and
79:04 - there's a few other things we'll declare
79:06 - as well at the top
79:07 - boolean play again
79:11 - so if the user would like to play again
79:13 - we can keep this as true
79:15 - if they would like to quit we can set
79:16 - this to be false
79:18 - int min this will be the minimum value
79:21 - let's have the user guess a number
79:23 - between 1 and 100
79:26 - int max but you can feel free to adjust
79:29 - these
79:30 - max equals 100 and
79:33 - guess i will declare this but not yet
79:36 - assign a value
79:38 - and number
79:41 - and int guesses
79:44 - okay we'll create a while loop and we
79:46 - will let the user decide if they would
79:48 - like to play again
79:50 - so our condition while play again
79:53 - equals true but since this itself is a
79:57 - boolean variable you don't technically
79:58 - need
79:59 - this equals true portion you could just
80:01 - say while play again
80:03 - because this by itself would evaluate to
80:05 - be true or false
80:07 - now if our user decides they would like
80:09 - to play again we should probably reset
80:11 - everything
80:12 - so let's take our guess and set the
80:15 - sequel to zero
80:17 - guesses this is the number of attempts
80:20 - that equals zero as well and let's
80:23 - generate a
80:24 - new random number number equals random
80:27 - dot next and within the parentheses of
80:31 - the next method we can list
80:33 - our minimum and maximum but remember
80:35 - that this number is
80:37 - exclusive but since we have these
80:38 - variables we can place these here
80:40 - instead
80:41 - so min and max so this should be max
80:45 - plus one
80:46 - this will generate a random number
80:47 - between one and one hundred
80:49 - because like i said this number is
80:51 - exclusive
80:52 - okay then we will keep on asking the
80:55 - user to type in a number like guess
80:57 - again
80:58 - so we'll need a nested while loop while
81:01 - and our condition is guess
81:05 - does not equal our number that is
81:08 - randomly generated
81:10 - so let's ask the user to type in a
81:12 - number
81:16 - guess a number
81:19 - between
81:22 - and this next part is going to get a
81:23 - little funky plus
81:26 - min plus i'll add a dash
81:31 - plus max
81:34 - plus a colon
81:38 - okay then we will take variable guess
81:42 - equals and we'll need to convert some
81:44 - user input convert
81:46 - to int 32 and within the parentheses
81:52 - console dot read line
81:58 - all right then we will display whatever
82:01 - our guess is
82:02 - console.writeline
82:05 - guess colon space plus
82:09 - guess and now we need to check our guess
82:12 - versus the number and we can use
82:16 - an if else if statement
82:19 - if and the condition is
82:23 - guess is greater than number
82:26 - we will display a hint console that
82:29 - right line
82:32 - let's say that guess
82:36 - plus is too
82:39 - high
82:43 - elsif
82:46 - and the condition is guess
82:49 - is less than number
82:53 - let's copy this guess is
82:56 - too low and then
83:00 - if guess equals number we escape the
83:02 - while loop
83:03 - oh and we do need to increment our
83:05 - guesses by one
83:07 - after each guess so let's place that
83:10 - right about here right before we
83:14 - do another iteration of our while loop
83:16 - guesses
83:17 - plus plus to increment our guesses by
83:20 - one
83:21 - now when we exit the while loop that
83:23 - means that we eventually got the right
83:25 - number
83:26 - so we will display the number with a
83:28 - rightline statement
83:30 - console.writeline number
83:33 - colon space plus
83:36 - number then we will display
83:40 - you win console.writeline
83:43 - you win
83:46 - and let's display how many guesses it
83:49 - took how many attempts
83:51 - guesses call in space plus
83:54 - guesses then we should probably
83:58 - let the user decide if they would like
83:59 - to play again and actually let's declare
84:02 - one more variable string response
84:06 - and then we will assign this within the
84:09 - while loop
84:10 - let's do that here we'll reset it
84:14 - response equals an empty string
84:20 - okay then we'll have the user type in if
84:24 - they would like to play again
84:26 - would you like to play
84:30 - again y slash n
84:33 - so they would have to type in either y
84:35 - or n y to play again
84:37 - for yes and for no
84:40 - response equals
84:44 - console dot read
84:47 - line
84:51 - and let's make this uppercase in case
84:53 - they type in something that's lowercase
84:55 - response equals response dot to
84:59 - upper
85:03 - so if our response
85:08 - is equal to a capital y
85:12 - play again equals true
85:18 - else play again
85:21 - equals false then when we
85:25 - escape our outer while loop that means
85:27 - we are done playing this game
85:29 - so let's find where that ends right here
85:33 - okay let's say thanks for playing oh
85:36 - looks like i typed that already
85:37 - so just type this in i guess all right
85:42 - we're good so let's run this
85:46 - guess a number between 1 and 100 what
85:48 - about 50 that's right in the middle
85:50 - right
85:50 - 50 is too high what about 25 25
85:54 - is too high what about 12 12 is too high
85:57 - this is a very low number i guess
85:59 - what about six six is too high g's all
86:02 - right
86:02 - three three is too low our number is
86:05 - between three
86:06 - and six how about four
86:09 - four is too low five all right finally
86:13 - so it took seven guesses let's play
86:15 - again i think i can do better
86:17 - guess a number between one and one
86:19 - hundred let's go with 50 again
86:21 - 50 is too low so something between 50
86:24 - and 100 let's go with 75
86:26 - 75 is too high uh what about
86:31 - 63
86:33 - 63 is too high uh 57
86:38 - 57 is too low how about 60.
86:42 - all right 60. that took five guesses
86:45 - this time
86:46 - would you like to play again no thanks
86:48 - for playing
86:49 - well everybody that was a very simple
86:52 - number guessing game in csharp i'll post
86:54 - all of this code to the comment section
86:56 - down below if you would like a copy for
86:58 - yourself
86:59 - if you can give this video a thumbs up
87:01 - feel free to drop a random comment down
87:02 - below
87:03 - and well that is a very simple number
87:06 - guessing game
87:06 - in c sharp hey what's going on everybody
87:09 - it's you bro hope you're doing well
87:11 - and in this video we're going to create
87:12 - a game of rock paper scissors
87:14 - in c-sharp so sit back relax and enjoy
87:17 - the show
87:20 - all right everybody let's create a game
87:22 - of rock paper scissors what i like to do
87:24 - is declare all the things that we'll
87:26 - need at the top of our program
87:28 - we'll need a random object to generate a
87:30 - random number for the computer's choice
87:32 - so we'll say that one equals rock two
87:35 - equals paper
87:36 - and three equal scissors so we'll need
87:38 - to create a random object
87:40 - random random equals new random and
87:42 - we'll create a
87:43 - boolean variable named play again and i
87:47 - will set this
87:48 - to equal true so if the player decides
87:51 - to
87:51 - exit they would not like to play another
87:53 - game we can set this to be false
87:55 - and we'll need a string variable to hold
87:58 - the player's choice
87:59 - i will declare this but not yet assign
88:01 - it so this will store
88:02 - rock paper or scissors and we'll need a
88:05 - string variable for the computer's
88:07 - choice as well
88:08 - okay that's all of the different
88:10 - variables that we'll need so let's
88:12 - create a while loop
88:13 - while play again equals
88:17 - true now if we're working with boolean
88:19 - variables we technically don't need
88:21 - this equals true portion because this by
88:24 - itself would evaluate to be true or
88:26 - false
88:27 - so you can just say while play again and
88:29 - that would work as well
88:30 - and then if the player decides to quit
88:32 - we can change that to false
88:33 - okay now let's ask for some user input
88:36 - console
88:36 - without right enter
88:40 - rock paper
88:43 - or scissors
88:47 - and we will store the user's input
88:49 - within string
88:51 - variable player player equals console.rt
88:56 - line now strings are case sensitive what
89:00 - i'm going to do is take the player's
89:02 - input and make it all uppercase just so
89:04 - that everything is consistent
89:06 - player equals player dot
89:09 - two upper i guess you could make this
89:12 - all lowercase two
89:15 - okay now let's display the player's
89:17 - choice with a right line statement
89:20 - so what if the player decides to choose
89:22 - something that isn't rock paper or
89:23 - scissors
89:24 - we would want some way to enforce that
89:31 - so let's say that i choose the gun and
89:34 - that's a valid response so we should
89:36 - probably prevent the player from doing
89:37 - so
89:38 - so what we'll do is use a nested while
89:41 - loop
89:42 - so while then surround this section of
89:44 - code within
89:45 - a set of curly braces and we will
89:47 - continue to prompt the user to type in
89:49 - something that is valid a valid choice
89:52 - so this is our condition while player
89:55 - does not equal rock
89:59 - and i'm just going to copy this
90:03 - player does not equal paper
90:07 - and player
90:10 - does not equal scissors
90:14 - so we'll need to assign player and
90:16 - computer a value
90:17 - let's do that at the top of our while
90:19 - loop for play again
90:21 - so player equals an empty string
90:24 - and computer equals an empty string so
90:28 - this is kind of nice when we do play
90:29 - another round we can reset player and
90:31 - computer
90:33 - okay let's try this
90:38 - enter rock paper or scissors i pick the
90:41 - gun
90:42 - enter rock paper or scissors how about a
90:44 - bomb
90:45 - fist nope okay so we have to choose
90:48 - either rock paper or scissors
90:49 - what about rock cool so that is a valid
90:52 - response
90:54 - okay so let's get rid of this right line
90:55 - statement we won't really need it
90:57 - anymore
90:58 - now we'll need to generate a random
90:59 - number for the computer player
91:01 - one two or three and i will use a switch
91:06 - so we will place the random number that
91:09 - is generated within the parenthesis
91:11 - we could say like i don't know
91:14 - int random num
91:18 - equals random dot
91:21 - next and the range is going to be one
91:24 - through four so remember that this
91:27 - number is exclusive
91:28 - this will generate a random whole number
91:30 - between one and
91:31 - three okay then what i'm going to do is
91:34 - technically we don't need this portion
91:36 - like we could place random num within
91:38 - switch
91:39 - but what i like to do is kind of shorten
91:41 - and condense my code so i'm going to
91:43 - take
91:43 - this method of random.next and place it
91:46 - within the switch itself
91:47 - and that would work as well so let's
91:49 - examine some cases
91:51 - case 1 that will be rock
91:55 - computer equals rock
91:58 - all uppercase then break
92:02 - and we'll need case two in case the
92:04 - random number is two
92:05 - case two computer
92:09 - equals paper
92:13 - then break and
92:16 - case three
92:20 - computer equals
92:24 - scissors
92:28 - then break what i'm going to do after
92:31 - our switch
92:32 - is display the player's choice along
92:34 - with the computer's random choice
92:36 - so let's use a redline statement so
92:38 - player colon space
92:41 - plus variable player then let's create
92:44 - another right line for the computer
92:49 - computer plus computer
92:54 - let's run this
92:58 - okay i will choose rock
93:02 - player rock computer scissors let's play
93:04 - again
93:05 - i will choose paper player paper
93:08 - computer paper
93:09 - and scissors player scissors computer
93:13 - scissors okay now we just need to
93:15 - examine our choices and see who wins
93:18 - that's the next step
93:19 - now what we'll do at this point is
93:21 - create a switch to examine
93:22 - the player's choice versus the
93:24 - computer's choice and we can decide who
93:26 - wins
93:27 - so let's create a switch and we will
93:29 - examine
93:30 - the variable player against many
93:33 - different cases
93:35 - so the first case will be rock
93:41 - and for now we'll just break we'll fill
93:42 - this in a little bit later
93:44 - case paper
93:49 - break and case
93:53 - scissors
93:57 - and break all right we're going to
94:00 - check to see what the computer picked so
94:04 - if computer
94:08 - is equal to rock
94:12 - then it's a draw so let's write
94:20 - it's a draw i think i'm missing a break
94:24 - statement
94:26 - all right then else if
94:31 - computer equals paper
94:34 - that means that we lose else if computer
94:38 - equals paper then we will write
94:44 - you lose
94:47 - else technically we don't need a
94:50 - condition because the only choice left
94:52 - is
94:53 - scissors for the computer
94:57 - else you win
95:00 - so let's copy these statements paste it
95:03 - underneath paper
95:06 - so if we choose paper and the computer
95:09 - chooses rock
95:10 - that means that we win so let's change
95:12 - this to you
95:14 - win if we choose paper and the computer
95:18 - chooses paper that means
95:20 - it's a draw
95:24 - else you lose
95:28 - let's copy this again paste it
95:31 - underneath scissors
95:33 - so if we pick scissors and the computer
95:35 - picks rock
95:36 - you lose
95:41 - if we choose scissors the computer picks
95:43 - paper then we win
95:46 - you win else
95:53 - it's a draw all right let's test it
95:58 - all right enter rock paper scissors
96:00 - let's go with rock
96:02 - rock paper you lose let's choose paper
96:05 - this time
96:05 - paper scissors you lose again and let's
96:08 - try scissors
96:11 - scissors rock you lose man i kind of
96:13 - suck at this game
96:15 - let's try it again paper paper rock okay
96:18 - i finally won one
96:19 - cool now at this point we're going to
96:22 - let the player decide if they would like
96:23 - to play another round so place
96:25 - this code at the end of our outer while
96:27 - loop so i'm just going to follow the
96:28 - dots here
96:30 - so that would go right here all right so
96:33 - let's use a write statement
96:38 - would you like to play
96:41 - again y slash
96:45 - n so y for yes
96:48 - and for no actually i think i'm going to
96:51 - create another variable so let's do so
96:53 - at the top
96:54 - string answer
96:59 - and we should probably reset this to
97:03 - answer equals an empty string
97:06 - okay so we will add one more variable
97:10 - okay answer equals
97:15 - console dot read
97:18 - line then let's make it uppercase
97:22 - in case the player enters in something
97:24 - that is lowercase
97:25 - we'll still count it answer equals
97:28 - answer
97:28 - dot to upper
97:34 - then let's check to see what the player
97:35 - enters in
97:37 - if answer is equal to y
97:43 - then play again
97:46 - equals true
97:50 - else play again
97:54 - equals false
97:59 - all right then outside of the while loop
98:02 - we will display a goodbye message
98:06 - maybe we'll say thanks for playing
98:10 - all right let's try it one last time
98:16 - okay enter rock paper scissors always
98:19 - choose rock
98:21 - player rock computer paper you lose
98:23 - would you like to play again
98:24 - yes let's pick rock again rock paper you
98:28 - lose okay maybe you don't always pick
98:30 - rock would you like to play again
98:31 - no because this is a dumb game thanks
98:33 - for playing
98:34 - well okay then everybody that is a game
98:37 - of rock paper scissors
98:39 - if you would like a copy of this code i
98:40 - will post this to the comment section
98:42 - down below
98:43 - if you can smash that like button leave
98:45 - a random comment down below
98:46 - and well that's a game of rock paper
98:49 - scissors for c-sharp
98:54 - alright people well i thought for
98:56 - practice we could create a sort of
98:57 - calculator program we can pick two
98:59 - numbers
99:00 - we can add them subtract them multiply
99:02 - them and divide them
99:03 - so let's get started this will be just a
99:05 - very simple project
99:07 - i'm going to write just calculator
99:09 - program
99:10 - when we begin this program and then
99:13 - maybe
99:13 - i don't know format it a little bit
99:15 - let's add some
99:17 - i don't know dashes or something just to
99:18 - kind of make this look nice
99:20 - this will all be within the console okay
99:23 - so we'll need to declare
99:24 - num1 num2 and result these will be
99:27 - doubles double num1 i'll set this equal
99:31 - to
99:31 - zero let's create num2
99:36 - and result double result
99:40 - and i will set that equal to zero as
99:42 - well
99:43 - okay we will need to ask for some user
99:45 - input
99:47 - console the right line enter
99:50 - number one colon space and
99:54 - then we will assign num1 equals
99:58 - so user input's always a string we'll
99:59 - need to convert this to
100:01 - a double convert dot to double
100:07 - and within the parenthesis we need
100:10 - console.read
100:12 - line method okay let's do the same thing
100:15 - for num2
100:17 - enter number two num2
100:21 - equals convert.2double pass in
100:24 - console.readline now we need the user to
100:27 - type in an option do they want to add a
100:29 - subtract multiply or divide
100:33 - so let's type enter and option
100:41 - console.writeline again what about
100:44 - plus colon space add
100:50 - then minus colon space
100:54 - subtract
100:57 - asterisk for multiply
101:04 - and forward slash for divide
101:07 - you can add other options if you want to
101:10 - okay let's take a look at this so far
101:12 - so we have calculator program enter
101:15 - number one what about 3.14
101:18 - enter number two uh let's say
101:22 - i don't know five okay a couple things
101:25 - i'm going to change real quick i'm going
101:26 - to change
101:27 - this right line to just right
101:30 - then i'm going to add a tab escape
101:32 - sequence
101:34 - that is backslash t for tab
101:38 - just so that it looks better
101:43 - okay let's continue so i'm going to
101:46 - create a switch that will read our user
101:48 - input
101:49 - switch console.read
101:54 - line and we need
101:57 - matching cases case
102:01 - plus so if somebody would like to add
102:04 - we will take our result equals
102:07 - num1 plus num 2.
102:13 - console.writeline and i'll do some
102:16 - string interpolation
102:19 - your result colon space
102:25 - num1 plus
102:28 - num2 equals
102:33 - plus result and then we need to break
102:37 - out of this case
102:39 - okay let's do the same thing with minus
102:43 - case minus result equals
102:47 - num1 minus num2
102:50 - num1 minus num2
102:53 - and that's all we need then we need
102:56 - multiply
102:58 - case asterisk result
103:01 - equals num1 times num2
103:06 - replace minus with asterisk
103:09 - and then divide
103:14 - case forward slash for division result
103:17 - equals num1 divided by num2
103:21 - and replace the asterisk here
103:25 - and then we should probably add a
103:26 - default case just in case somebody
103:28 - doesn't pick one of these options
103:30 - default
103:34 - console.writeline that
103:37 - was not a valid
103:40 - option and then break
103:45 - enter number one 3.14
103:48 - enter number two uh let's say 6.9
103:53 - and i would like to multiply these so
103:56 - i will add an asterisk
103:59 - 3.14 times 6.9 equals 21.666
104:03 - all right i'm just going to change one
104:05 - thing i'm going to add
104:07 - one line right before we read our user's
104:10 - input for
104:10 - what operation they would like to use
104:14 - so let's add console dot
104:17 - right now right line enter
104:21 - an option
104:24 - then let's try it again 3.14
104:29 - multiplied by 6.9 is
104:34 - 21.666 okay now what if somebody would
104:37 - like to continue using this calculator
104:39 - so what we'll do is place all of this
104:41 - code within a do while loop
104:43 - i'm not sure if i discussed this in the
104:45 - past but a do while loop will always
104:47 - execute a body of code once
104:49 - and then it checks the condition at the
104:51 - end
104:53 - so let's add that here so we have
104:56 - do at the top then we need our while
104:59 - with condition
105:02 - while all right now before this
105:06 - let's ask for some user input
105:09 - console.writeline
105:13 - would you like to continue
105:21 - capital y equals yes
105:24 - capital n equals no
105:30 - and then we will read some user input so
105:32 - within
105:33 - the while loop the condition this will
105:35 - be
105:38 - console.readline
105:41 - dot 2 upper
105:44 - so in case they type in lowercase y or n
105:47 - we'll just change it to uppercase via
105:50 - the two upper method
105:52 - and let's check to see if this is equal
105:54 - to y
105:55 - if it is then we'll reset our num1 num2
105:59 - and result variables and do this all
106:00 - over again
106:02 - and if they would not like to continue
106:04 - let's write
106:06 - buy okay let's try this again
106:10 - what is point one four divided by two so
106:13 - enter number one three point one four
106:14 - enter number two two and let's divide
106:17 - these
106:18 - the result is one point five seven let's
106:21 - type
106:22 - y for yes all right then we can do this
106:24 - all over again
106:25 - what is 5 divided by 3.14
106:30 - so i will divide and the result is
106:33 - 1.59 something something something would
106:36 - you like to continue i'm going to type
106:38 - and for no
106:39 - bye so yeah that's a very simple
106:42 - calculator program in c sharp i will
106:45 - post this code in the comment section
106:46 - down below
106:47 - if you can give this video a thumbs up
106:48 - leave a random comment down below
106:50 - and subscribe if you'd like to become a
106:52 - fellow bro
106:53 - hey what's going on everybody it's you
106:55 - bro hope you're doing well
106:56 - and in this video i'm going to explain a
106:58 - raise in c sharp so
107:00 - sit back relax and enjoy the show
107:04 - all right everybody so arrays think of
107:07 - an array
107:08 - as a variable but it can store multiple
107:11 - values not just one so i have the string
107:14 - variable named car and it contains the
107:16 - name of a car bmw
107:18 - so what we could do is turn this
107:20 - variable into an array
107:21 - so it can store multiple values and this
107:24 - is all you have to do
107:25 - after the data type add a set of square
107:27 - brackets
107:28 - and then surround all of the values with
107:30 - a set of curly braces
107:32 - boom you got yourself an array and
107:34 - that's all there is to it so
107:36 - you can add multiple values to this
107:38 - array named car
107:39 - and actually i'm going to rename this as
107:41 - cars so it's plural so that we know that
107:43 - there's multiple values within here
107:45 - so let's separate each value with a
107:48 - comma
107:49 - so let's say we have a bmw a mustang
107:53 - as well as a corvette
107:56 - okay then let's display what cars is
107:58 - with a right line statement
108:00 - console the right line cars
108:05 - so this is what appears we have the data
108:07 - type of our array instead of the values
108:09 - within the array
108:11 - so if you need to access an element that
108:14 - is an item from an array
108:15 - you need to add after the variable name
108:17 - well the array name
108:19 - a set of square brackets and then the
108:21 - index
108:22 - so computers they always start with zero
108:24 - the first element would be
108:25 - zero so place that number within the
108:27 - square brackets
108:29 - cars at index zero and the first element
108:32 - would be bmw so let's display the other
108:36 - elements
108:37 - let's just copy what we have okay let's
108:40 - display
108:40 - cars at index 1 that will be this value
108:44 - because
108:44 - this is index zero
108:49 - and that is mustang
108:52 - then the next value cars at index
108:55 - two
108:59 - and that is corvette so let's take a
109:02 - look to see what happens if i attempt to
109:03 - access an element that doesn't exist
109:06 - so cars at index three so that would be
109:10 - something beyond corvette
109:16 - so we'll actually run into an error we
109:19 - ran into
109:20 - an index out of range exception so
109:22 - arrays do have a
109:24 - fixed size you have to make sure that
109:25 - you're not accessing an element
109:27 - that doesn't exist now if you need to
109:29 - update an element within an array all
109:31 - you have to do is type
109:33 - the array name in this case it would be
109:35 - cars straight brackets and
109:37 - list the index so if i need to change
109:39 - the first element within my array
109:42 - i will say my arrand name cars at index
109:44 - zero
109:45 - equals let's place a tesla there instead
109:49 - and then run this
109:52 - so instead of a bmw in the first
109:55 - position
109:56 - index zero we have a tesla so if you
109:58 - need to access or update an element
110:01 - within an array
110:02 - type the array name straight brackets
110:03 - and then the index
110:05 - and remember that these always start
110:06 - with zero so what we've done here
110:08 - to display the elements of an array is
110:10 - that we wrote a writeline statement for
110:13 - each individual
110:14 - element so a much better approach would
110:16 - be to iterate over
110:18 - our array using a for loop and later on
110:21 - i'll explain the for
110:22 - each loop so to display all of the
110:24 - elements of our array easily
110:26 - let's create a for loop so we'll say
110:29 - into i
110:30 - equals zero will continue this as long
110:32 - as i
110:33 - is less than now arrays have a length
110:35 - property so type the name of the array
110:38 - dot link then i
110:41 - plus plus to increment our index okay
110:44 - with our writeline statement
110:46 - let's display cars straight brackets
110:50 - and the index is going to be i so i
110:54 - is zero for the first iteration then
110:56 - during the next iteration it will be one
110:58 - then two and then it will stop because
111:01 - this statement will no longer be true
111:03 - okay let's try this again
111:06 - so we have tesla mustang and corvette so
111:09 - an easy way to display the elements of
111:11 - an array
111:12 - is to write a for loop and set the index
111:15 - equal to i
111:16 - whatever you have right here but we'll
111:18 - have to discuss the
111:20 - for each loop coming up in a later video
111:22 - one thing that you should know with
111:23 - arrays
111:24 - is that they have a fixed size if you
111:26 - would like to declare an array and then
111:28 - assign values later
111:29 - you'll need to declare that array with a
111:31 - fixed size of how many elements you're
111:33 - planning to place within that array
111:35 - so that would look something like this
111:37 - let's turn this line into a comment
111:39 - and this is how to declare an array so
111:42 - type the
111:43 - data type square brackets the name of
111:46 - the array
111:46 - equals new the data type again square
111:49 - brackets
111:50 - and then within this set of square
111:52 - brackets we will list a size
111:54 - so if i plan on adding no more than
111:57 - three elements to this array
111:58 - i can place three here but you can make
112:00 - this a larger size to accommodate more
112:02 - values
112:03 - and if you don't use those values
112:05 - they'll just remain empty no big deal
112:07 - and this will work the same as before
112:09 - and then we'll just have to update some
112:11 - values
112:12 - so cars at index 0 1 and
112:15 - zero is a tesla one is a mustang
112:18 - and two is a corvette and this will
112:21 - pretty much work the same as before
112:23 - instead of just in one step declaring
112:25 - and assigning an array
112:27 - we have done it in two steps we declared
112:29 - the array and then assigned some values
112:31 - later
112:32 - well okay then everybody that is an
112:34 - array it's a variable that can store
112:36 - multiple values and they have a fixed
112:39 - size so that's something you need to pay
112:41 - attention to
112:42 - if you would like a copy of this code i
112:44 - will post this to the comment section
112:45 - down below
112:46 - and well those are arrays in c sharp
112:50 - oh yeah all right everybody
112:53 - for each loops a for each loop is a
112:56 - simpler
112:57 - and more elegant way to iterate over an
112:59 - array
113:00 - however it's less flexible compared to a
113:03 - standard for loop
113:04 - i have an array of names of vehicles
113:06 - named cars
113:07 - we have a bmw mustang and corvette then
113:10 - we can use
113:11 - a standard for loop to iterate and
113:13 - display the elements of this array
113:16 - so this works fine however it's a lot of
113:18 - work to write all of this
113:19 - another approach although it's less
113:21 - flexible is to create a
113:23 - for each loop this will iterate once for
113:25 - each element within my array
113:27 - so type for each parenthesis curly
113:30 - braces
113:30 - and within the parentheses we list the
113:32 - data type of each element
113:34 - then we need a name for each element
113:36 - that we're working with
113:37 - since we're working with cars let's call
113:39 - each element a car
113:41 - string car in the name of the array
113:45 - cars string car in cars then i will with
113:48 - the right line statement
113:49 - display whatever car is so this is kind
113:52 - of like a nickname for the element that
113:54 - we're currently working with
113:56 - so let's get rid of this for loop
113:57 - because we don't need it anymore
113:59 - and use our for each loop instead
114:03 - and this works the same as before one
114:06 - downside with a for each loop is that
114:08 - it's not flexible with a standard for
114:10 - loop we can iterate forwards
114:12 - backwards or even skip iterations so use
114:15 - whatever loop is more appropriate for
114:17 - your situation
114:18 - well everybody that is a for each loop
114:21 - it's a
114:22 - simpler and more elegant way to iterate
114:24 - over an array
114:25 - however it's not as flexible if you just
114:27 - need something simple to display the
114:29 - elements of an array
114:30 - you can easily use a for each loop all
114:33 - right everybody so that's a for each
114:34 - loop if you can give this video
114:36 - a thumbs up drop a random comment down
114:37 - below and well those are four each loops
114:40 - in c-sharp
114:44 - all right people methods a method
114:46 - performs a
114:47 - section of code whenever it's called
114:49 - also known as
114:51 - invoking a method and the benefit of
114:53 - using a method
114:54 - is that it lets us reuse code without
114:56 - writing it
114:57 - multiple times here's a scenario let's
114:59 - say that we have to write a program
115:01 - where we need to
115:02 - sing happy birthday to our friend three
115:04 - times because we would like to annoy him
115:06 - one way in which we could do that
115:08 - without writing a method is that we
115:10 - would need to display as
115:11 - output you know the lyrics to happy
115:13 - birthday i just made my own version of
115:15 - it so
115:15 - happy birthday to you happy birthday to
115:17 - you happy birthday dear you
115:20 - happy birthday to you if i need to sing
115:22 - happy birthday three times
115:24 - i would need to copy and paste this code
115:27 - two additional times
115:28 - and that would allow me to effectively
115:30 - sing happy birthday three
115:31 - times so after running this we have all
115:34 - of our text
115:35 - repeated three times now a better way of
115:38 - writing this would be to use a method
115:40 - where we only have to write this once
115:41 - and then we can keep on reusing it
115:43 - yeah let's delete all this outside of
115:45 - our main method
115:46 - that will end right here we need to
115:48 - create a new method and the way we do
115:50 - that
115:50 - is that for this specific case we have
115:52 - to write static because we're invoking
115:55 - a method from our main method which is
115:57 - static so we need static but not always
116:00 - void and then a unique and descriptive
116:02 - name of this method what does it do
116:04 - exactly
116:05 - so let's call this method sing happy
116:09 - birthday then a set of parentheses then
116:11 - a set of curly braces
116:13 - and we have ourselves a method named
116:15 - saying happy birthday
116:16 - and when we call this method what kind
116:18 - of code do we want to execute
116:20 - so let's copy and paste the lyrics to
116:23 - happy birthday and then place it within
116:25 - this method now to invoke a method or
116:27 - called method
116:28 - we have to type the name of the method
116:31 - followed by a set of parentheses
116:32 - and i like to think of the parentheses
116:34 - kind of like a pair of telephones
116:36 - they're communicating with each other
116:38 - that's how i think of it at least and
116:39 - then a semicolon to end
116:41 - the statement so after running this this
116:43 - will execute sing happy birthday
116:45 - once now if i need to sing happy
116:48 - birthday two additional times
116:49 - i can just call this method two
116:51 - additional times sing happy birthday
116:53 - saying happy birthday sing happy
116:55 - birthday and i do not need all of this
116:57 - text i only need to write it once
116:58 - and then i can just keep on reusing it
117:01 - and here we have
117:03 - the lyrics to my happy birthday song
117:05 - repeated three times
117:07 - let's move on to level two we're going
117:09 - to create a string
117:10 - variable named name string name equals
117:13 - and make up some name
117:16 - now what if we attempt to use this
117:18 - variable within our method
117:20 - so replace you with name happy birthday
117:24 - dear name okay here's the situation
117:27 - the name name does not exist in the
117:30 - current context
117:31 - methods don't have access to any
117:33 - variables within another method
117:36 - so anything within the main method this
117:38 - singh happy birthday method cannot see
117:40 - so we need to pass what are known as
117:42 - arguments over to this method in order
117:44 - to use
117:45 - these values or variables so when you
117:48 - invoke a method and you need to send
117:50 - arguments over to a method we just list
117:52 - whatever we would like to send over to
117:54 - this method within the parentheses
117:56 - so i would like to pass name as an
117:59 - argument to this method
118:00 - however we need a matching set of
118:02 - arguments and parameters
118:04 - parameters are kind of like what this
118:06 - method is expecting to receive
118:08 - and to create some parameters we list
118:11 - the data type of what we're expecting
118:13 - followed by some sort of name so let's
118:15 - just say name
118:17 - and now we can use this variable name
118:19 - that is declared within the main method
118:21 - and we now have our name variable
118:23 - displayed within our happy birthday song
118:25 - and here's how to send more than one
118:27 - argument to a method let's create an
118:29 - integer variable
118:30 - named age and we will display the user's
118:32 - edge within our happy birthday song
118:35 - so separate each argument with a comma
118:38 - we will pass name as well as age to
118:41 - our happy birthday method but remember
118:44 - we need a matching
118:45 - set of arguments and parameters so we
118:48 - need to add
118:48 - a age parameter so separate each with a
118:52 - comma
118:52 - then list the data type of this variable
118:54 - first int
118:56 - and then a name we'll just call it edge
118:59 - and now we can use this edge variable
119:01 - within our method
119:02 - so let's create a line where we will
119:04 - display the person's edge
119:06 - so console that right line
119:09 - u r
119:13 - plus age plus
119:17 - years old and let's try this again
119:22 - happy birthday to you happy birthday to
119:24 - you happy birthday dear bro
119:26 - you are 21 years old happy birthday to
119:29 - you
119:29 - i guess my happy birthday song could use
119:31 - some work now these parameters they
119:33 - don't necessarily need
119:34 - the same exact name as the arguments
119:36 - that we pass in let's rename
119:38 - name as birthday boy
119:41 - and replace edge with years
119:44 - old okay then replace any instance of
119:47 - name with birthday boy
119:49 - and age with years old and this will
119:52 - work the same
119:54 - so you can rename these parameters
119:57 - what's important is the data type
119:59 - and the order of the values that you
120:01 - pass in
120:02 - all right everybody well those are
120:04 - methods they perform
120:05 - a section of code whenever they are
120:07 - called
120:08 - also known as invoking a method and the
120:11 - benefit of using methods
120:12 - is that it allows us to reuse code
120:15 - without writing it
120:16 - multiple times we only had to write the
120:19 - lyrics to happy birthday once
120:20 - then if we had to sing happy birthday
120:23 - you know more than one time
120:24 - we can just keep on invoking this method
120:26 - however many times that we need
120:28 - so those are methods if you can give
120:30 - this video a thumbs up
120:32 - drop a random comment down below and
120:34 - well yeah those are methods
120:35 - in c sharp
120:39 - oh yeah the return keyword now the
120:42 - return keyword
120:43 - returns data back to the place where a
120:45 - method is invoked
120:47 - so let's create a method to multiply two
120:49 - numbers together
120:50 - something simple so when we declare a
120:52 - method we'll have to make sure that we
120:53 - do it outside of our main method
120:55 - so right here so we will say static
120:59 - void and we will name this method
121:02 - multiply and we'll need to pass
121:05 - in two numbers as arguments let's say
121:07 - that the data type
121:09 - will be double double x and double
121:12 - y okay now we would like to multiply
121:15 - these two numbers together
121:17 - and we will store them within double
121:19 - variable z
121:20 - double z equals x times y
121:24 - now to return data back to the place
121:26 - where it's invoked
121:28 - we can use this return keyword and what
121:30 - kind of data would we like to return
121:32 - let's return whatever z is now there's
121:35 - one change that we need to make
121:37 - we need to replace this void keyword
121:39 - with the data type
121:41 - of what we're returning exactly so since
121:43 - we're returning a double
121:45 - we'll change void to double if you're
121:47 - not returning anything
121:48 - you can just keep that keyword as void
121:51 - now we can use this multiply method
121:52 - to well multiply two numbers together so
121:55 - let's write a program where we will ask
121:56 - a user for some user input
121:58 - multiply two numbers together then
122:00 - return the result and display it
122:02 - so let's accept some user input and
122:04 - first we should probably declare the
122:06 - variables that we'll need
122:07 - double x double y and
122:11 - double let's call this result and we
122:13 - will ask the user to enter
122:15 - in number one
122:19 - and then assign x equal and we'll need
122:22 - to convert
122:23 - the user's input to a double because
122:26 - it's always a string when we accept user
122:28 - input
122:28 - x equals convert dot
122:32 - to double
122:36 - then out of side of parenthesis within
122:37 - the parenthesis console.read
122:41 - line and we'll do the same thing for
122:44 - variable y enter in number two
122:48 - and then change x to y now if we need to
122:52 - assign
122:52 - results a value we can use this multiply
122:55 - method
122:56 - so type multiply add a set of
122:58 - parenthesis to invoke it
123:00 - but we'll need to pass two matching
123:02 - arguments because we have
123:03 - two parameters set up we need to pass in
123:06 - two
123:07 - double values or variables so we will
123:09 - pass
123:10 - x and y as arguments to this method
123:13 - multiply
123:14 - so this return keyword will return
123:17 - whatever z
123:17 - is back to the spot in where this method
123:20 - is invoked
123:21 - and we will store the result within this
123:23 - variable named result
123:24 - and then we should probably display it
123:27 - let's display
123:28 - result and well that's it let's try it
123:32 - enter in number one have you always
123:34 - wondered what
123:36 - pi times 420 is well we're about to find
123:38 - out
123:39 - it is 1 318.8
123:42 - so yeah that is the return keyword it
123:44 - returns data back to the place where a
123:46 - method is invoked
123:47 - and if you would like you can actually
123:49 - shorten this even further we don't
123:50 - necessarily need to
123:52 - store the result within you know a new
123:54 - variable we could just say return
123:56 - x times y and that would work the same
123:58 - too
123:59 - that is the return keyword it returns
124:01 - data back to the place where
124:02 - a method is invoked if you're able to
124:05 - give this video a thumbs up
124:06 - leave a random comment down below and
124:08 - well yeah that's the return keyword in c
124:10 - sharp let's go bros
124:14 - okay it looks like we're talking about
124:16 - method overloading now methods they can
124:18 - actually share the same name
124:19 - but you need a different set of
124:21 - parameters a method's name
124:23 - plus its parameters equals a method's
124:26 - signature
124:27 - and methods must have a unique method
124:29 - signature
124:30 - let's take this method for example
124:32 - called multiply so this returns
124:34 - a times b so what if i would like to
124:36 - multiply more than two numbers
124:38 - like three numbers well this method is
124:41 - only set up for
124:42 - two arguments so one thing that we could
124:44 - do is method overload
124:46 - so we can use the same name like we can
124:48 - reuse it but we need
124:49 - different parameters so to solve this
124:51 - problem i'm going to create a second
124:53 - multiply method
124:55 - and this will have a different set of
124:56 - parameters giving it a different
124:58 - method signature so let's create a
125:01 - method that has
125:02 - three parameters a b and c return
125:06 - a times b times c and you can see that
125:09 - that problem went away and this should
125:10 - work so 2 times 3 times 4
125:13 - equals 24 and i can just keep on
125:16 - creating more methods
125:17 - so basically that's method overloading
125:19 - methods can share the same name
125:21 - but they need different parameters if
125:23 - they do share the same name
125:25 - a method's name plus its parameters
125:27 - equals the method signature
125:29 - and methods must have a unique signature
125:32 - so yeah that's method overloading if you
125:34 - would like a copy of this code i'll post
125:36 - this to the comment section down below
125:37 - if you can smash that like button drop a
125:39 - random comment down below and well yeah
125:41 - that's method overloading in c
125:43 - sharp oh yeah ladies and gentlemen
125:48 - do you know what's better than
125:49 - overloaded methods the params keyword
125:52 - now a methods parameters can take a
125:55 - variable number of arguments if we use
125:57 - the params keyword and the parameter
125:59 - type must be a
126:01 - single dimensional array what's the
126:03 - benefit of this
126:04 - let me explain so let's say that we have
126:06 - an online store we have a method to
126:08 - check
126:08 - out where we will basically sum up a
126:10 - customer's prices
126:12 - and return a total and we'll tell the
126:14 - customer you have to pay this total what
126:16 - if the person
126:16 - checking out has a variable number of
126:19 - items that they would like to buy
126:20 - well we would have to set up a bunch of
126:22 - different methods like
126:24 - what if they only buy one item well
126:25 - there's a checkout method
126:27 - that accepts one argument another
126:29 - checkout method that accepts two
126:31 - arguments then three
126:32 - and then we continue on and on and on so
126:34 - yeah don't do this
126:35 - a better solution would be to use this
126:37 - params keyword where we only need a
126:39 - single method and this one single method
126:42 - can accept a
126:43 - varying number of arguments we don't
126:44 - need like several copies of the same
126:46 - method then
126:47 - so to use the params keyword precede our
126:50 - data type with the word params
126:53 - then after the data type follow this
126:55 - with a set of square brackets
126:57 - now this parameter a is now an array i'm
127:00 - going to name this as something a little
127:02 - more descriptive like
127:03 - prices because we're working with prices
127:06 - so we need to iterate over the elements
127:08 - of an array
127:09 - and create a total so i'm going to
127:11 - create a local variable
127:13 - named double total so you can have
127:16 - variables with the same name
127:18 - but they need to be within a different
127:19 - scope so these are in different methods
127:22 - so they are not visible to each other
127:24 - double total i will set the sql to zero
127:27 - to begin with
127:28 - and we'll use a for each loop to iterate
127:31 - over the elements of this array
127:33 - for each double
127:36 - price in prices
127:40 - total equals total plus
127:43 - whatever price we're working with but
127:45 - i'll shorten this
127:46 - to plus equals price then at the end
127:50 - we will return total and this should
127:53 - work the same
127:54 - okay the total price is 24.74
127:59 - but there's some formatting that we'll
128:00 - have to do in a future video and then i
128:02 - can just keep on adding items to my
128:04 - you know fictional shopping cart like i
128:06 - would like to buy a bottle of water
128:08 - for a dollar and a t-shirt for
128:11 - 10 and 25 cents
128:15 - so you see by using this params keyword
128:18 - a single method can accept
128:20 - a varying amount of arguments so method
128:22 - overloading
128:23 - isn't always necessary if you're working
128:25 - with a lot of different arguments you're
128:27 - not really sure how many arguments are
128:28 - going to be passed in
128:30 - okay then everybody that is the params
128:32 - keyword it can be applied to
128:33 - a method parameter so that it can accept
128:36 - a variable number of arguments
128:38 - but the parameter type must be a single
128:41 - dimensional array
128:42 - and that is the params keyword if you
128:44 - can help me out by smashing that like
128:46 - button
128:46 - drop a random comment down below and
128:48 - well yeah that's the params keyword
128:50 - in c-sharp hey
128:54 - well it looks like we're on exceptions
128:56 - today an exception
128:57 - is an error that occurs during execution
129:00 - so here's an example i have a small
129:02 - program
129:03 - where we will ask a user to type in two
129:05 - numbers divide those numbers then
129:06 - display the result
129:08 - so what if i type in something that's
129:10 - not a number i would like to divide
129:11 - the number 5 by the word pizza we'll
129:14 - encounter an exception
129:16 - and this interrupts our program we
129:17 - encountered a format exception
129:20 - input string was not in a correct format
129:22 - so any code that is considered dangerous
129:25 - where it might cause an exception
129:27 - we can surround with a try block so i
129:29 - would consider this code to be dangerous
129:31 - so type try then a set of curly braces
129:34 - surround any code that is considered
129:36 - dangerous with
129:37 - the set of curly braces now if we have a
129:39 - try block we also need a catch block
129:41 - so after the try block add catch and the
129:44 - catch block catches and handles
129:46 - exceptions when they occur
129:47 - but we need to specify what kinds of
129:50 - exceptions we would like to catch and
129:51 - handle
129:52 - so catch parentheses curly braces and
129:55 - this is kind of like a parameter so i
129:57 - would like to catch
129:58 - and handle any format
130:01 - exceptions then add e so
130:04 - if we encounter that same exception
130:06 - again instead of our program being
130:08 - interrupted we can do something else
130:09 - instead
130:10 - so let's write a message and let the
130:11 - user know to type in only numbers enter
130:15 - only numbers please
130:18 - and let's try that again enter number
130:21 - one
130:22 - five enter number two pizza enter only
130:25 - numbers please
130:26 - and this did not interrupt our program
130:29 - that's the important thing
130:30 - now these try and catch blocks they will
130:32 - only catch and handle
130:33 - format exceptions what if somebody
130:35 - accidentally divides by zero or
130:37 - intentionally does so
130:38 - so we do not have a catch block set up
130:41 - for that we
130:42 - can add multiple catch blocks so let's
130:44 - catch any
130:45 - divide by zero exceptions so catch
130:47 - parentheses curly braces
130:49 - and the exception we would like to catch
130:51 - is divide by
130:52 - zero exception then add e so if somebody
130:56 - attempts to divide by zero
130:57 - let's display a message you can't divide
131:01 - by zero idiot but this only occurs with
131:05 - integer division so let's turn our
131:07 - doubles
131:08 - x and y into integers and we'll have to
131:12 - change
131:12 - this cast as well so change to double
131:15 - to and 32.
131:20 - so if we attempt to divide a number by
131:23 - zero which we can't mathematically do
131:25 - this is what happens enter number one
131:27 - five enter number two
131:28 - zero you can't divide by zero idiot and
131:31 - this will not interrupt our program
131:33 - now you can add a catch block that just
131:35 - catches everything but it's not
131:37 - considered good practice to add by
131:38 - itself
131:39 - so sometimes i'll add a like catch all
131:41 - block just in case if there's any
131:43 - exceptions i do not anticipate
131:45 - so at the end we can add exception e but
131:48 - it's difficult to let the user know what
131:50 - went wrong exactly because
131:51 - it'll just print when any exception
131:53 - occurs something
131:54 - went wrong so this will catch everything
131:58 - let's remove the first two catch blocks
132:00 - so let's take
132:02 - five divided by the word pizza something
132:04 - went wrong
132:05 - now catch exception e does catch
132:07 - everything but it's considered poor
132:09 - practice to have this by itself
132:11 - because basically you're shrugging when
132:13 - something goes wrong you should let the
132:15 - user know exactly what went wrong
132:17 - so it's better practice to catch
132:19 - specific exceptions first
132:21 - then at the end you can add you know
132:23 - exception e in case there's anything you
132:24 - don't anticipate
132:26 - by the way i changed x and y back to
132:28 - doubles now
132:29 - the last thing we need to talk about is
132:31 - the finally block
132:32 - the finally block is optional it always
132:35 - executes regardless if an exception is
132:37 - caught or not
132:38 - so at the end let's create a finally
132:40 - block type finally
132:41 - curly braces if there's anything you'd
132:43 - like to do after
132:45 - you're trying catch block regardless if
132:47 - an exception occurs or not
132:48 - you can place that here what people
132:50 - typically use the finally block for
132:52 - is to close any open files if they need
132:55 - to reset anything
132:57 - but for this example let's just print
132:58 - something so let's display
133:00 - a thank you message thanks for visiting
133:05 - if we do not encounter any exceptions
133:07 - this finally block will still execute
133:09 - five divided by one is five thanks for
133:11 - visiting
133:12 - now if we do encounter and catch an
133:15 - exception
133:16 - well that finally block is still going
133:18 - to execute as well
133:20 - thanks for visiting so yeah those are
133:22 - exceptions
133:23 - they are errors that occur during
133:25 - execution they interrupt the normal flow
133:27 - of our program
133:28 - any code that is considered dangerous we
133:31 - should surround with a try block
133:33 - and catch any exceptions when they occur
133:35 - and finally can be added
133:37 - and it will execute regardless if an
133:39 - exception is caught or not
133:40 - so yeah those are exceptions i will post
133:43 - this code in the comment section down
133:44 - below
133:45 - if you can smash that like button drop a
133:47 - random comment down below
133:48 - and well yeah those are exceptions in c
133:51 - sharp
133:55 - all right welcome back we're talking
133:56 - about the conditional operator which is
133:58 - represented by a question mark
134:00 - so the conditional operator is used in
134:03 - conditional assignment
134:04 - if a condition is true or false and we
134:07 - follow this formula
134:08 - we have some sort of condition or
134:10 - expression then we add a question mark
134:12 - kind of like we're asking a question
134:14 - is this true if it is do x if not do y
134:18 - so we'll write a simple program to check
134:20 - the temperature outside
134:22 - so we'll write this using an if-else
134:23 - statement first and then later on we'll
134:25 - use the conditional operator and take a
134:27 - look at the differences
134:28 - so let's say we have a double named
134:31 - temperature
134:32 - and i'll set this equal to 20 degrees
134:35 - celsius
134:36 - as well as a string message i will
134:39 - declare this but not yet assign it
134:41 - so what if we would like to assign our
134:43 - variable message
134:44 - a custom message based on the
134:46 - temperature well if we're using
134:48 - if else statements that would look like
134:49 - this so we need a condition
134:51 - if temperature is greater than or equal
134:56 - to let's say
134:56 - 15 degrees celsius then we will assign
135:00 - message a string message
135:03 - equals it's
135:07 - warm outside
135:10 - else message
135:13 - equals it's cold outside
135:17 - and then at the end i would like to
135:19 - display my message within a writeline
135:21 - statement console that write line
135:24 - message and this will work just fine
135:27 - no issues so my temperature is currently
135:29 - 20
135:30 - and this will print the message it's
135:32 - warm outside now there is a way to
135:34 - shorten this and that's by using a
135:36 - conditional operator
135:37 - so if we were to take that approach we
135:39 - would have to follow this formula
135:41 - so let me just copy this we need our
135:43 - condition our condition
135:44 - is temperature is greater than or equal
135:47 - to
135:47 - 15. question mark like we're asking a
135:50 - question
135:51 - if it's true then do this so we will
135:53 - take
135:54 - its warm outside in place of x
135:58 - if not then we do this it's cold outside
136:02 - but these are returning values so we
136:04 - need to assign them to something
136:06 - so we will say message equals
136:10 - this is our condition temperature
136:12 - greater than or equal to 15
136:13 - question mark if that's true assign this
136:17 - if not assign that and that's all there
136:19 - is to it and we don't really need all of
136:20 - this anymore
136:22 - and then i will display my message
136:23 - within a redline statement
136:25 - and this will do the same thing it's
136:28 - warm outside
136:29 - you could even take this a step further
136:30 - too you could place just this within a
136:32 - right line statement and get rid of the
136:34 - message completely
136:35 - we don't even really need that message
136:36 - variable
136:38 - so yeah that's the conditional operator
136:40 - you can use this in conditional
136:42 - assignment if you need to assign
136:44 - some variable if some condition that you
136:46 - set is true or false
136:47 - it's kind of like a shortcut so yeah
136:49 - that's the conditional operator
136:51 - in c sharp
136:55 - all right what's going on people string
136:57 - interpolation string interpolation
136:59 - allows us to insert variables or values
137:02 - into
137:03 - a string literal we precede a string
137:06 - literal with a dollar sign
137:08 - and then any placeholders within a
137:10 - string literal
137:11 - that is interpolated we can use to
137:14 - insert values or variables within so
137:16 - here's an example of where
137:17 - string interpolation could be useful
137:20 - let's say we have three variables
137:21 - first name last name and age let's
137:24 - declare those
137:25 - string first name make up a first name
137:31 - string last name make up a
137:34 - last name and then an age
137:39 - okay so what if we would like to display
137:41 - somebody's first name last name and
137:43 - their age
137:43 - let's use a standard string literal
137:45 - first and we'll look at the differences
137:48 - so if i would like to display something
137:50 - like
137:51 - hello plus first name
137:56 - plus i'll add a space plus
138:00 - last name and then maybe add like a
138:04 - period at the end well i would have to
138:07 - concatenate all these separate strings
138:09 - together
138:10 - and then let me display age two
138:12 - console.writeline
138:14 - you are plus
138:18 - age plus years old
138:22 - so this works fine but an easier way is
138:24 - to use string interpolation
138:26 - so what we're going to do is create a
138:28 - string literal
138:30 - and then precede this with a dollar sign
138:32 - and then write a string normally
138:35 - hello wherever you would like to insert
138:37 - a value or variable
138:39 - add a set of curly braces as a
138:41 - placeholder
138:42 - and i would like to insert first name
138:44 - here then add a space
138:46 - and here within my string literal i will
138:49 - insert
138:50 - last name and then maybe add a period to
138:53 - the end
138:54 - and let's do the same thing with our
138:55 - second line so we need a string literal
138:58 - a double set of quotes precede this with
139:00 - a dollar sign
139:02 - you are curly braces
139:05 - age years old and this will do the exact
139:10 - same thing
139:11 - however it's less work
139:14 - so hello first name last name you are
139:16 - age years old
139:17 - another thing that you can do too is
139:19 - that when you display one of these
139:20 - values
139:21 - you can allocate some room after the
139:23 - variable name add a comma
139:25 - and then how many spaces you would like
139:27 - to allocate let's say that when i
139:28 - display my age i would like to allocate
139:31 - 10 spaces worth of room to display my
139:33 - edge
139:34 - and this is what that looks like you are
139:38 - then i have 10 spaces including the two
139:41 - digits in my age
139:42 - and if this was negative this would be
139:45 - left aligned
139:48 - so my age is all the way over here then
139:50 - i have eight spaces afterwards
139:52 - so yeah that's string interpolation it
139:54 - allows us to insert variables into a
139:57 - string
139:58 - literal we precede a string literal with
140:00 - a dollar sign
140:02 - and then curly braces with then as
140:04 - placeholders for values or variables
140:07 - so yeah that's string interpolation in c
140:09 - sharp if you found this video helpful
140:11 - please be sure to smash that like button
140:13 - leave a random comment down below and
140:15 - subscribe if you'd like to become a
140:16 - fellow bro
140:20 - alright what's going on
140:21 - multi-dimensional arrays so
140:23 - just a fair warning this is a difficult
140:25 - topic if you want you can skip this
140:27 - video you won't hurt my feelings
140:28 - but if you'd like to know what a
140:29 - multi-dimensional array is well here we
140:31 - go
140:32 - so a multi-dimensional array is an array
140:35 - of arrays
140:36 - so i have three standard arrays i have
140:38 - different car manufacturers
140:39 - ford chevy and toyota so each array has
140:43 - three different kinds of cars a
140:45 - multi-dimensional array is good if you
140:46 - need like some sort of grid or matrix of
140:49 - data
140:50 - so what i would like to do is to create
140:51 - an array of arrays to simulate maybe
140:53 - like a parking lot to park all of these
140:55 - cars
140:56 - so to create a multi-dimensional array
140:58 - this will be a two-dimensional array
141:00 - we need to list the data type of what
141:02 - we're storing strings
141:04 - then a set of straight brackets and
141:07 - then within the straight brackets add a
141:09 - comma
141:11 - so now i'm going to name this array
141:13 - let's say
141:14 - parking lot
141:17 - equals and then we add our curly braces
141:19 - much like what we do with standard
141:21 - arrays
141:22 - however i'm going to add each array
141:24 - within the set of curly braces
141:26 - and then separate each with a comma
141:33 - so this can be somewhat difficult to
141:35 - read i like to kind of condense it all
141:38 - and just make it look nice
141:42 - so you can see that this resembles sort
141:44 - of like a grid with rows and columns
141:47 - and that visual is going to help us so
141:49 - to access one of these elements
141:51 - we need to list an index for the row and
141:54 - an index for the column
141:55 - so let's say i would like to change this
141:57 - explorer to something else
141:59 - so in order to access this element i'm
142:02 - going to type the name of our
142:03 - multi-dimensional array
142:05 - straight brackets and then i need a row
142:08 - and column
142:09 - so these always start with zero this
142:11 - would be row zero
142:12 - row one row two i need to access
142:15 - row one so that would be zero then comma
142:18 - for column and then i need to count the
142:21 - row number
142:22 - zero one two so that would be
142:25 - zero comma two for this element within
142:28 - my
142:28 - two-dimensional array so i'm going to
142:30 - change this to something else
142:32 - so let's say that this is a ford fusion
142:36 - and then let's display these elements we
142:37 - can use a for each loop
142:40 - for each the data type is string
142:43 - let's say car in parking lot
142:48 - and then i will just iterate through
142:49 - these console.writeline
142:52 - card so this will iterate nine times
142:55 - one for each element within our
142:57 - two-dimensional array
143:00 - so we have a mustang f-150 then fusion
143:03 - so we updated
143:04 - explorer to fusion so let's update maybe
143:07 - this corolla to something else
143:09 - so let's count the row number that would
143:11 - be zero
143:12 - one two parking
143:15 - lot two and the column number is
143:19 - zero and let's say that this is a tacoma
143:25 - and try this again okay we have
143:28 - instead of a corolla a tacoma
143:32 - now if you would like to display this as
143:34 - like a grid we can use
143:35 - nested for loops for that so let's get
143:38 - rid of this for each loop
143:39 - i'll just turn this all into one giant
143:41 - comment
143:43 - okay so to display this as like a grid
143:45 - we'll use
143:46 - nested for loops the outer loop will be
143:49 - four
143:50 - and i equal zero we will continue this
143:53 - as long as i
143:55 - is less than parking lot
143:58 - dot get length method and then pass in
144:02 - the dimension so pass in 0 for the first
144:05 - dimension
144:07 - i plus plus and then we need a nested
144:10 - for loop
144:12 - so change i to j get
144:15 - length one so this represents the second
144:18 - dimension remember that these always
144:20 - start with zero
144:21 - and then change i to j plus plus so
144:25 - during each iteration of the inner for
144:27 - loop let's change this from
144:29 - right line to right i will display
144:33 - parking lot straight brackets
144:37 - i comma j then i'm just going to add a
144:40 - space to separate
144:41 - each car and then when we escape our for
144:44 - loop we
144:45 - need to go down to the next row so i'll
144:47 - use an empty right line statement
144:49 - so by using nested for loops we can
144:51 - display our
144:53 - two-dimensional array as sort of a grid
144:55 - or matrix
144:57 - so we have our mustang f-150 our fusion
145:00 - corvette camaro silverado tacoma camry
145:04 - and rav4
145:05 - so if you ever need like a grid or
145:07 - matrix of data you can always use a
145:09 - multi-dimensional
145:10 - array and these are kind of the steps to
145:12 - set it up
145:13 - so yeah those are multi-dimensional
145:15 - arrays if you found this video helpful
145:17 - please be sure to smash that like button
145:19 - leave a random comment down below and
145:21 - subscribe if you'd like to become a
145:22 - fellow bro
145:25 - alright classes a class is really just a
145:28 - bundle of related code that you would
145:30 - like to organize together
145:32 - it can be used as a blueprint to create
145:34 - objects with object-oriented programming
145:37 - but we'll discuss that in the next video
145:40 - so my main method
145:41 - is located within a class named program
145:44 - the point of this class is well to group
145:46 - my program together
145:47 - but there are classes too that have
145:49 - certain functions for example the math
145:51 - class the purpose of the math class
145:53 - is to contain a bunch of useful methods
145:55 - related to mathematics
145:57 - and let's take a look at this
146:00 - so this class is named math and all
146:03 - that's in here is a bunch of methods
146:04 - related to
146:05 - mathematics so that's kind of the point
146:07 - of this class but we can create our own
146:09 - classes too
146:10 - now to create a class we can either do
146:12 - so outside of our class program
146:14 - or create a class within a separate
146:16 - c-sharp file i'll show you both ways
146:19 - so to create a class make sure that
146:20 - we're not writing this within our class
146:22 - program so that ends here
146:24 - type class and let's create a class to
146:27 - group a bunch of useful messages
146:29 - together like message
146:31 - methods class messages curly braces
146:35 - and let's create a few methods related
146:37 - to messages
146:38 - so this is going to be more of like a
146:40 - utility class
146:42 - void hello and when we use this method
146:45 - let's display a message like hello
146:50 - welcome to the program and let's create
146:54 - maybe two more
146:55 - void hello void what about waiting like
146:59 - we're waiting for something
147:03 - i am waiting for something
147:08 - and what about goodbye void bye
147:14 - bye
147:16 - thanks for visiting
147:19 - if you would like to create a class
147:20 - within a separate c-sharp
147:22 - file i would recommend opening your
147:24 - solution explorer if you don't have that
147:25 - open you can find it here
147:26 - go to view solution explorer
147:30 - right click on your namespace add
147:34 - class
147:37 - class and then i will name this messages
147:42 - add okay then i'm going to take
147:46 - my code from within this class cut it
147:50 - delete my class and then paste it within
147:54 - this class messages so you can either
147:58 - write your class within
147:59 - the same c sharp file or a different one
148:02 - if i would like to use some of these
148:03 - methods found within
148:04 - the messages class there's one of two
148:06 - things that i need to do
148:07 - i either need to create an object from
148:09 - this class
148:10 - or i need to precede my class definition
148:14 - with the word
148:14 - static followed by everything within my
148:17 - messages class
148:19 - so we'll talk about creating objects in
148:20 - the next video so for now we'll just
148:22 - have to
148:23 - use the static keyword and i'll create a
148:25 - separate video on this too
148:27 - and we should now be able to use these
148:28 - methods found within my messages class
148:31 - so if i need to display a hello message
148:34 - i would type the name of the class
148:36 - that would be messages then dot to
148:39 - access the
148:40 - members however these are not visible so
148:42 - we need to make them public
148:44 - and that'll be a separate video on axis
148:46 - modifiers so i would like this to be a
148:48 - public method
148:49 - so precede static with public
148:53 - and we should now be able to see those
148:55 - methods so type messages again
148:57 - dot and here are those methods i would
148:59 - like to use the hello method
149:01 - and that will display my message hello
149:04 - welcome to the program
149:05 - i also have that waiting message
149:09 - messages dot and that was waiting
149:13 - as well as goodbye messages
149:16 - dot bye so hello welcome to the program
149:20 - i am waiting for something bye thanks
149:22 - for visiting
149:23 - so basically a class is just a bundle of
149:26 - related code
149:28 - and it can be used as a blueprint to
149:30 - create objects
149:31 - otherwise you can use a class more or
149:33 - less as a utility class
149:35 - but when you define your class you'll
149:36 - have to precede the class definition
149:38 - with the word static
149:40 - and to make this public and accessible
149:42 - you would have to precede each method
149:44 - with
149:44 - public and static so yeah those are
149:47 - classes they're really just a bundle of
149:49 - related code
149:50 - you can use them as a utility class or
149:53 - use them as a blueprint to create
149:55 - objects
149:55 - which we'll discuss in another video if
149:58 - you found this video helpful please help
149:59 - me by smashing that like button
150:01 - leave a random comment down below and
150:03 - well yeah those are classes
150:05 - in c sharp
150:09 - all right objects an object is an
150:12 - instance of a class
150:13 - that means that we can use a class as a
150:16 - type of blueprint to create objects with
150:18 - object oriented programming
150:20 - so look around you right now you're
150:21 - surrounded by objects next to me i have
150:23 - a microphone a monitor a mouse
150:27 - and a cup of coffee so we can use code
150:29 - to mimic
150:30 - real world objects objects can have
150:33 - fields and
150:34 - methods these are defining
150:35 - characteristics and
150:37 - actions that an object can perform they
150:40 - describe what an object has
150:41 - and what an object can do and in today's
150:44 - video we will be instantiating human
150:46 - objects but will need the help of a
150:48 - human class
150:49 - as a type of blueprint to design what
150:51 - sorts of fields and methods that all
150:53 - humans should have
150:55 - so outside of our class program you can
150:57 - either do this within the same
150:58 - c-sharp file or a separate one within
151:01 - your solution explorer
151:02 - i'll keep it all within the same c-sharp
151:04 - file this time let's create a class
151:06 - named human then curly braces so let's
151:09 - add some fields
151:10 - fields are kind of like the defining
151:12 - attributes of what all humans should
151:14 - have
151:15 - let's say that humans have a name and an
151:17 - age
151:18 - so i'll define those much like what we
151:20 - do with variables
151:21 - string name i will declare this but not
151:23 - yet assign it
151:24 - as well as int edge
151:27 - so these are fields they're defining
151:29 - characteristics of what an object has
151:32 - now let's create some methods what kinds
151:33 - of actions can humans perform
151:35 - they can eat and they can sleep
151:38 - void eat and then i will display
151:41 - something when we invoke this method
151:43 - let's say name plus
151:47 - is eating and then let's create a
151:51 - sleep method void sleep
151:55 - name plus is sleeping
151:58 - okay now this is what we need to do to
152:00 - instantiate an object from a class
152:03 - type the name of the class human we need
152:05 - a unique name for this human object
152:08 - let's call this human object just human
152:10 - one
152:11 - human human one equals new human again
152:15 - add a set of parentheses and a semicolon
152:18 - there we go we now have a human object
152:20 - named human
152:22 - one now there's just one problem the
152:24 - fields and methods of this human object
152:26 - are not visible
152:27 - so if i type human one dot we can't
152:30 - access the name
152:32 - and age fields as well as the eat and
152:34 - sleep methods
152:35 - so normally i wouldn't recommend doing
152:37 - this because this isn't secure but just
152:39 - for learning purposes
152:41 - let's precede our fields and methods
152:43 - with the axis modifier of public
152:46 - so that these are publicly accessible
152:48 - from another class
152:49 - so if we type human one dot we should be
152:52 - able to access our name
152:54 - and age fields as well as the eat and
152:57 - sleep methods
152:58 - so let's give humanoid a name
153:01 - human1.name
153:02 - and let's assign human1 a first name of
153:06 - rick like from rick and morty and let's
153:08 - give him an age too
153:09 - human one dot h and he will be 65 years
153:13 - old
153:14 - and we should be able to use the eat and
153:17 - sleep methods now
153:19 - humanone dot
153:22 - eat and then human
153:25 - one dot sleep
153:29 - so after invoking these two methods eat
153:32 - and sleep this will display
153:35 - rick is eating and rick is sleeping so
153:37 - congratulations we have successfully
153:39 - instantiated a human object
153:42 - and the nice thing about classes is that
153:44 - we can keep on using this class to
153:45 - create more humans if we need more than
153:47 - one
153:48 - so this time let's create a second human
153:50 - so follow this formula the name of the
153:52 - class
153:53 - human then we need a unique name for
153:55 - this human object
153:56 - human one is taken so let's name the
153:58 - second human human to
154:00 - equals new human and then we can assign
154:03 - some of the fields
154:04 - of our human class so we need a name and
154:07 - an age
154:08 - so human 2's name will be morty
154:13 - and his age will be 16 and this time
154:16 - let's have human 2 use the eat and
154:19 - sleep method so rick is eating
154:22 - rick is sleeping morty is eating morty
154:25 - is sleeping
154:26 - so that's basically what an object is
154:28 - it's an instance of a class
154:30 - and a class can be used as a blueprint
154:32 - to create objects
154:33 - and objects can have fields and methods
154:36 - fields are what an object has
154:38 - methods are what an object can do think
154:40 - of it that way
154:41 - so yeah those are objects they're an
154:43 - instance of a class
154:45 - and a class can be used as a blueprint
154:46 - to create objects
154:48 - so if this video helped you out help me
154:50 - out by smashing that like button
154:52 - leave a random comment down below and as
154:54 - always subscribe if you'd like to become
154:56 - a fellow bro
155:00 - all right constructors a constructor is
155:02 - a
155:03 - special method found within a class it
155:05 - has the same name as the class name
155:07 - in the last video we created a human
155:09 - class but it's missing a constructor
155:11 - if we do not explicitly create a
155:13 - constructor there is a hidden one behind
155:15 - the scenes that is automatically called
155:17 - and it is used to create
155:18 - an object for us so let's explicitly
155:21 - create a constructor
155:22 - so you type public because we want this
155:25 - to be publicly accessible
155:26 - and then it has the same name as the
155:28 - class name then add a side of
155:30 - parentheses then a set of curly braces
155:32 - this works just like a method and we can
155:34 - even set up parameters
155:36 - so let's set up name and age parameters
155:38 - so we need to list the data type
155:40 - string name and int edge now
155:43 - in order to create a human object we
155:45 - have to pass a matching set of arguments
155:47 - we need to pass in a name and an age
155:50 - well a string to function as a name and
155:52 - an integer to function as an edge
155:54 - so we don't manually need to assign
155:56 - these fields anymore
155:57 - we can just pass these values as
155:59 - arguments so with human one human one's
156:01 - name was rick
156:02 - and his age was 65 so i will pass these
156:05 - as arguments
156:06 - rick and 65 and you can see that that
156:09 - red underline went away
156:10 - so let's do the same thing for human too
156:13 - morty and his age 16
156:14 - and we no longer need to manually assign
156:17 - those fields
156:17 - however within the constructor we'll
156:19 - need to do so so
156:21 - type this dot the name of the field we
156:23 - would like to assign
156:25 - equals the name of the parameter and in
156:28 - this case they have the same name
156:30 - this dot name equals name and this
156:33 - dot age equals
156:37 - whatever this is age and this will work
156:40 - the same as before but we did not need
156:42 - to
156:42 - manually assign those values to those
156:45 - fields so after calling
156:46 - the eaton sleep method for both human
156:49 - one and human too
156:50 - this will display rick is eating rick is
156:52 - sleeping morty is eating morty's
156:54 - sleeping
156:55 - so that's kind of what a constructor is
156:56 - it's a special method found within a
156:58 - class
156:59 - and it's automatically called when we
157:00 - instantiate an object if we do not
157:03 - explicitly create
157:04 - a constructor but if we do we can
157:06 - manually assign
157:07 - some values to fields of an object let's
157:10 - try a different example this time
157:11 - instead of humans let's create a car
157:13 - class we will instantiate some car
157:15 - objects so let's delete our current
157:17 - class and create a new one
157:18 - class car then curly braces
157:22 - cars will have let's say four fields
157:26 - a make a model a year and a color
157:30 - string make string
157:33 - model int
157:37 - year and string
157:40 - color then to create a constructor this
157:44 - will have the same name as the class
157:46 - name precede this with public car
157:49 - parentheses curly braces and again this
157:52 - is a special kind of method and we can
157:54 - set up arguments and parameters
157:56 - so we have string make
158:00 - string model
158:03 - integer
158:06 - and string color
158:10 - and then when we receive arguments we
158:12 - can assign them to these fields
158:14 - this dot make
158:18 - equals make
158:21 - this dot model equals model
158:25 - this dot year equals year
158:29 - and this dot color equals
158:33 - color then let's create maybe a drive
158:35 - method
158:38 - public void drive
158:43 - and we will display something
158:46 - u drive the
158:50 - plus make plus a lot of space to
158:53 - separate make and model
158:55 - plus model okay now let's instantiate
158:58 - some car
158:59 - objects so we type the name of the class
159:02 - car then we need a unique name or
159:04 - identifier for this car
159:06 - let's call this first car car one equals
159:08 - new
159:09 - car parenthesis semicolon but to
159:11 - instantiate a car object we have to pass
159:13 - a
159:14 - matching set of arguments to these
159:16 - parameters we have to pass
159:18 - a make model year and color so car one
159:21 - let's say is a ford mustang ford
159:26 - mustang the year will be 2022
159:30 - and the color is red and then let's have
159:34 - car one
159:34 - use the drive method so type car one
159:38 - dot drive then a set of parentheses to
159:41 - invoke it
159:42 - u drive the ford mustang now let's
159:45 - create cartoon
159:46 - it's the same process as before but we
159:49 - need a unique name or identifier
159:51 - car car 2 equals new car this will be
159:54 - a chevy corvette
159:58 - and the year will be 20 21 and the color
160:01 - is blue
160:04 - and then let's use the drive method of
160:06 - car 2
160:07 - car 2 drive you drive the ford mustang
160:11 - you drive the chevy corvette
160:13 - so yeah that's a constructor it's a
160:15 - special method
160:16 - found within a class and it has the same
160:18 - name as the class name
160:20 - class car and the constructor name is
160:22 - car as well and it can be used to assign
160:24 - arguments to fields when creating an
160:26 - object there's a few other things you
160:28 - can do with constructors too but we'll
160:30 - discuss that in future videos
160:31 - so yeah those are constructors if you
160:34 - can smash that like button
160:35 - leave a random comment down below and
160:37 - well yeah those are constructors
160:39 - in c sharp oh yeah let's do this
160:43 - all right the static modifier the static
160:46 - modifier is used to declare a
160:48 - static member one which belongs to the
160:51 - class itself
160:52 - rather than any one specific object i
160:54 - have a class named carr cars have
160:57 - a field named model and a constructor to
161:00 - assign
161:00 - a model when we instantiate a car object
161:03 - and i have two car objects car one and
161:05 - car two car one is a mustang
161:07 - car two is a corvette here's the
161:09 - situation let's say that we're going to
161:11 - have a race but we need to keep track of
161:13 - how many cars are instantiated that are
161:15 - entering
161:16 - our race one way in which we can do that
161:18 - is to create a static field to keep
161:20 - track of how many cars are created
161:22 - so let me show you what this looks like
161:24 - with a non-static field first
161:26 - so let's declare an integer variable
161:29 - named number
161:30 - of cars to keep track of how many cars
161:32 - we create
161:34 - so i will declare this but not yet
161:36 - assign it
161:37 - and within my constructor i will
161:39 - increment number of cars by one
161:41 - remember that with constructors you're
161:43 - not limited to
161:44 - only assigning values to fields you can
161:46 - do like any sort of code that you want
161:48 - remember that it's just another kind of
161:50 - method okay so every time we instantiate
161:53 - a car object we will increment
161:54 - number of cars by one and then let's
161:57 - display a number of cars
161:59 - so we need to access this in a
162:01 - non-static way by typing
162:03 - the name of a car object like car 1 dot
162:05 - followed by the name of the field
162:07 - but it looks like we need to make this
162:08 - public
162:10 - public and number of cars car one
162:14 - dot number of cars let's do the same
162:16 - thing for
162:17 - car two car two dot number of cars
162:20 - now you would think that the number of
162:22 - cars would be two
162:23 - right and that's where you're wrong
162:25 - number of cars
162:26 - for both car 1 and car 2 are both one
162:29 - because each car object has their own
162:32 - copy of the number of cars field and
162:35 - within the constructor when we
162:37 - increment each copy of number of cars
162:40 - well it's only ever going to be a
162:41 - maximum of one
162:43 - so one way in which we could fix that is
162:45 - to change
162:46 - this field to a static field after
162:49 - public type
162:50 - static public static int number of cars
162:54 - and we can no longer access this field
162:56 - in a non-static way
162:58 - by typing the name of an object followed
163:00 - by the name of the field
163:02 - we would have to access this field in a
163:04 - static way
163:05 - by typing the name of its class followed
163:08 - by the name of the field
163:09 - so type the name of the class car
163:11 - followed by you know dot
163:13 - then the name of the field so this field
163:16 - now belongs to the car class
163:18 - and no one object has complete ownership
163:21 - of it it's kind of like they're all
163:22 - sharing the same variable and let's try
163:25 - this again
163:26 - so the number of cars that we have
163:28 - created
163:29 - is two now just to test everything let's
163:32 - create a third car we have a third racer
163:34 - within our race
163:36 - so car 3 will be a what about a lambo
163:39 - and we now have created three cars
163:42 - so again by preceding this field with
163:44 - the static modifier
163:46 - the class now owns it we can also apply
163:48 - the static modifier
163:50 - to a method as well public static
163:53 - and we'll create a method to begin our
163:55 - race let's call this
163:56 - start race
164:00 - so we don't want each object to be able
164:02 - to start the race on their own terms
164:04 - right
164:05 - so it would be better if the car class
164:07 - itself has a start race method
164:10 - so then if we would like to begin our
164:11 - race we can access it in a static way
164:14 - the race has begun
164:18 - then if i need to invoke this method i
164:21 - type
164:21 - the name of the class car dot
164:25 - the name of the static method start race
164:28 - then a set of parentheses to invoke it
164:30 - and this should now begin our race
164:32 - the race has begun and then you can also
164:36 - apply the static modifier to a class
164:38 - itself but then you can't instantiate
164:40 - objects from this class you can see that
164:42 - we're getting errors
164:43 - cannot declare a variable of static type
164:46 - cart
164:46 - so that's kind of like the deal with the
164:48 - math class
164:49 - in order to use a method of the math
164:51 - class we wouldn't create like a map
164:53 - object right like
164:54 - math math 1 equals new math right
164:57 - and then we wouldn't type math1 dot
165:00 - round to rounded number
165:01 - it's a lot easier just to use directly
165:04 - the math class and type
165:06 - math dot round so that's kind of the
165:09 - idea behind
165:09 - a static class you can't create objects
165:12 - from a static class
165:14 - and we kind of learned about that in the
165:15 - video on classes
165:17 - well in conclusion the static modifier
165:20 - can be applied to a field
165:22 - a method or a class itself anything that
165:25 - is declared static
165:26 - now belongs to the class and no one
165:29 - object has
165:30 - ownership of it so that is the static
165:33 - modifier
165:34 - if this video helped you out help me out
165:36 - by smashing that like button drop a
165:37 - random comment down below and well
165:39 - yeah that's the static modifier in
165:41 - c-sharp
165:45 - all right overloaded constructors by
165:48 - using overloaded constructors this is a
165:50 - technique to create
165:51 - multiple constructors within the same
165:53 - class much like that video on overloaded
165:55 - methods
165:56 - so with overloaded constructors multiple
165:59 - constructors can have the same name
166:01 - but they need a different set of
166:02 - parameters because
166:04 - a method's name plus its parameters
166:06 - equals a unique method signature
166:08 - and each method must have their own
166:10 - unique signature
166:12 - so let's create a class named pizza
166:17 - and there's going to be four fields
166:19 - let's have string bread
166:20 - for the type of bread we would like for
166:22 - our pizza like is it flat bread
166:24 - stuffed crust plain
166:28 - a field for sauce cheese
166:31 - and topping
166:35 - then let's create a constructor
166:38 - public pizza
166:41 - and then we need to set up the
166:43 - parameters
166:45 - string bread string sauce
166:49 - string cheese and
166:52 - string topping and then we'll need to
166:54 - assign these
166:56 - this dot bread equals bread
166:59 - this dot sauce equals sauce
167:03 - this dot cheese equals cheese
167:07 - and this dot topping equals
167:11 - topping all right then let's construct a
167:15 - pizza object
167:18 - pizza let's call this pizza all lower
167:20 - case
167:21 - equals new pizza then we need to pass
167:25 - in something for the bread the sauce the
167:27 - cheese and the topping
167:28 - because we can't construct a pizza
167:31 - object without
167:32 - bread sauce cheese and a topping we need
167:35 - all four
167:36 - in order to construct a pizza object so
167:39 - let's pass in something for the bread
167:41 - let's say i would like a stuffed crust
167:43 - pizza stuffed crust
167:45 - for the sauce let's say red sauce
167:49 - and the cheese what about mozzarella i
167:52 - don't remember how to spell mozzarella
167:55 - mozzarella i'm taking a guess here
167:58 - and a topping pepperoni
168:02 - so we can construct a pizza object just
168:05 - fine right
168:06 - but what if we would like a pizza
168:08 - without any toppings like a plain cheese
168:10 - pizza
168:10 - so i'm going to get rid of that topping
168:12 - well we can't construct a pizza without
168:14 - a topping we need to add something
168:16 - because we only have one constructor set
168:18 - up and we need to pass in something for
168:20 - a topping
168:21 - so one way in which we can solve this
168:23 - problem is to have multiple constructors
168:26 - overloaded constructors we can pass in a
168:29 - varying amount of arguments
168:30 - so if we would like a cheese pizza
168:32 - without any toppings
168:33 - we can use that specific constructor
168:35 - that will construct a
168:37 - plain cheese pizza so let's copy this
168:39 - constructor
168:40 - they can have the same name but they
168:42 - need a different set of parameters
168:44 - so i'm going to remove this topping
168:46 - parameter
168:47 - and we will not assign this dot topping
168:50 - equals topping
168:51 - and we can now create a plain cheese
168:54 - pizza
168:54 - and let's do the same thing with i don't
168:56 - know maybe somebody doesn't want cheese
168:58 - on their pizza
169:01 - so pizza with only bread and sauce
169:07 - and then another pizza with only bread
169:10 - i'm not even really sure if it's
169:11 - considered a pizza then maybe it's
169:12 - garlic bread or something
169:13 - but i don't know though we can now
169:15 - create a pizza object that has
169:17 - no toppings no cheese and no sauce
169:21 - so by using overload constructors we can
169:23 - construct objects with
169:25 - varying amounts of fields maybe we would
169:27 - like toppings
169:28 - maybe we don't well we have a choice now
169:31 - so yeah that's overloaded constructors
169:33 - it's a technique to create
169:34 - multiple constructors with a different
169:37 - set of parameters
169:38 - they can share the same name but you
169:39 - need a different set of parameters
169:42 - because a constructor's name plus its
169:44 - parameters
169:45 - equals a constructor's signature and
169:47 - each constructor needs a unique
169:49 - signature so yeah those are overloaded
169:52 - constructors in c
169:53 - sharp if this video helped you out help
169:55 - me out by smashing that like button
169:57 - leave a random comment down below and
169:58 - well yeah those are overloaded
170:00 - constructors
170:01 - in c sharp
170:06 - all right what's going on people
170:07 - inheritance so inheritance is this
170:10 - programming concept
170:11 - of one or more child classes receiving
170:14 - fields methods
170:15 - etc from a common parent kind of like
170:18 - how people
170:19 - inherit genes from their parents well
170:21 - with programming we can kind of do
170:22 - something similar
170:23 - parent classes can have children classes
170:26 - and anything
170:27 - that the parent class has the child
170:29 - classes now have
170:31 - so here's an example let's create a
170:32 - parent class named
170:34 - vehicle not any kind of specific vehicle
170:36 - just a generic
170:37 - vehicle class class vehicle and
170:41 - there will be one field let's say public
170:44 - and speed and i'll set this equal to
170:47 - maybe zero and let's create a method
170:50 - public void go all vehicles can go
170:52 - somewhere
170:54 - and all we'll display is
170:57 - this vehicle is moving
171:00 - we can inherit this speed field and this
171:03 - go method from the vehicle class
171:05 - so this vehicle class is going to have
171:07 - children so let's create a car class
171:09 - a bike class and a boat class so type
171:12 - class
171:13 - car then to inherit from another class
171:15 - type
171:16 - after the class name colon and then the
171:19 - parent in which you would like to
171:20 - inherit from
171:21 - so car is going to be the child class
171:24 - vehicle will be the parent class
171:26 - so car will have access to its own speed
171:29 - and go method
171:30 - and then you can add anything additional
171:32 - within the car class like number of
171:34 - wheels
171:35 - public and wheels and i'll set this to 4
171:38 - for all
171:38 - car objects now let's create a bicycle
171:41 - class
171:42 - it's the same process as before class
171:45 - bicycle and this will inherit from the
171:49 - vehicle class as well but let's change
171:51 - wheels to two and then let's create a
171:53 - book class
171:54 - class boat and here it's from vehicle
171:57 - wheels
171:58 - zero because well it's a boat okay so
172:00 - let's instantiate a car
172:02 - bicycle and boat object so let's do that
172:05 - here
172:06 - car car equals new car
172:11 - bicycle bicycle
172:14 - keep on spilling bicycle wrong bicycle
172:18 - equals new bicycle
172:21 - and boat boat equals new boat
172:25 - so if we take a look at this car object
172:27 - car
172:28 - dot there is a speed field as well as a
172:31 - go method even though there's nothing
172:33 - within
172:34 - this car class besides wheels so since
172:36 - car is the child class
172:38 - and vehicle is the parent class car has
172:41 - access to a go method and a speed field
172:43 - even though there's nothing within here
172:45 - except a wheels field
172:46 - and of course car objects do have a
172:48 - wheels field as well
172:50 - which we stand within the car class so
172:52 - let's just test these
172:53 - i'm going to display car dot speed
172:57 - car dot speed followed by
173:02 - car dot wheels and i will have this car
173:06 - use
173:06 - its go method car.go
173:10 - all right so our car speed is zero
173:12 - that's because we set it to be zero
173:14 - within the vehicle class
173:16 - this car has four wheels which we stated
173:18 - within the car class
173:19 - and this car class has a go method that
173:22 - states this vehicle is moving
173:24 - so i bet the same thing applies to our
173:26 - bicycle and boat object
173:28 - so let's copy these three lines of code
173:30 - change car to
173:31 - bicycle bicycle.speed bicycle.wheels
173:35 - and bicycle.go and the same thing
173:37 - applies to both
173:38 - boat dot speed boat dot wheels boat dot
173:41 - go
173:43 - so all three of these different types of
173:45 - vehicles each have
173:46 - a speed field a wheels field and a go
173:50 - method
173:50 - so the point of inheritance is that we
173:52 - can reuse code
173:54 - i mean we could just copy these fields
173:56 - and methods and then paste them within
173:58 - each of these classes
173:59 - but imagine that you have hundreds of
174:00 - different classes and we need to change
174:02 - like go to start well it's a lot easier
174:06 - just to make that change in one place
174:07 - than having to manually go through all
174:09 - of our classes
174:10 - so yeah that's kind of the benefit of
174:11 - inheritance we can keep
174:13 - anything that these classes have in
174:15 - common within a common parent class
174:17 - and these classes can simply just
174:19 - inherit these fields and methods
174:21 - so yeah that's inheritance if you liked
174:23 - this video be sure to smash that like
174:25 - button
174:26 - drop a random comment down below and
174:28 - well yeah that's inheritance in c sharp
174:34 - alright what's going on abstract classes
174:36 - abstract is a keyword that we can apply
174:39 - to classes properties and methods but in
174:42 - this video we're going to focus on
174:43 - abstract classes now you can apply the
174:46 - abstract keyword it's a modifier
174:48 - to a class and that indicates that this
174:51 - class
174:51 - is missing components or is an
174:53 - incomplete implementation
174:55 - so let's take a look we're using
174:56 - inheritance here so i have a class
174:58 - vehicle vehicle has a speed field as
175:01 - well as a go method
175:03 - and there's three children classes car
175:05 - bicycle and
175:06 - boat and these are complete
175:08 - implementations
175:09 - so car has four wheels and a max speed
175:11 - of 500
175:12 - bicycle has two wheels a max speed of 50
175:15 - and
175:16 - boat has zero wheels and a max speed of
175:17 - 100 i just made up some numbers for the
175:19 - max speed
175:20 - i can create a car object bicycle object
175:23 - and boat object just fine
175:24 - these are complete implementations but
175:27 - unfortunately i can also create a
175:29 - vehicle object
175:30 - vehicle vehicle equals new vehicle
175:33 - so vehicle is incomplete it's missing a
175:36 - number of wheels and a max speed
175:38 - so imagine that we're having a race and
175:40 - somebody decides to pick
175:42 - the vehicle but we want somebody to pick
175:44 - a specific
175:45 - implementation of a vehicle like a car
175:48 - bicycle or boat
175:49 - i would like to prevent people from
175:51 - creating generic vehicle objects
175:53 - so this is kind of like imagine somebody
175:55 - picks the invisible vehicle in like a
175:57 - racing game or something
175:59 - one way in which i can prevent people
176:00 - from instantiating vehicle objects
176:02 - because it's not finished it's an
176:04 - incomplete implementation
176:06 - is to precede this class definition with
176:08 - this abstract keyword
176:10 - so if i precede class with abstract i
176:13 - can no longer create a
176:14 - vehicle object cannot create an instance
176:17 - of the abstract type
176:18 - or interface vehicle so that adds a
176:21 - little bit of security to our programs
176:23 - if there's a class that you do not want
176:24 - to be able to instantiate objects from
176:27 - you can just precede that class
176:28 - definition with the abstract keyword
176:31 - and you cannot create an object from
176:33 - that class
176:34 - and that's basically what the abstract
176:35 - modifier does we can indicate that a
176:38 - class
176:38 - we can also apply this to properties and
176:40 - methods as well but that's a video for
176:42 - another day
176:43 - so when we precede a class definition
176:46 - with abstract
176:47 - we are indicating that that class is
176:49 - missing components
176:50 - or is incomplete so we should not be
176:52 - able to instantiate
176:54 - objects from this class which adds a
176:56 - little bit of security so yeah
176:57 - that's the abstract keyword if you found
176:59 - this video helpful help me out by
177:01 - smashing that like button
177:02 - leave a random comment down below and
177:03 - well yeah that's the abstract modifier
177:06 - in c-sharp
177:10 - all right what's going on people so in
177:12 - this video i'm going to show you all how
177:14 - we can create an array of objects
177:15 - i have a class car cars have one field a
177:18 - model field
177:19 - and a constructor to assign an argument
177:21 - to this
177:22 - model field so let's create some car
177:24 - objects car
177:25 - car one equals new car then pass in a
177:29 - model of your choosing
177:30 - let's say that car one will be a mustang
177:33 - and let's create maybe two more cars
177:36 - car two and car three car two will be
177:39 - a corvette and car three will be a lambo
177:43 - so we'll need an array to work with too
177:46 - so in the past when we've created arrays
177:48 - we will list the data type of what we're
177:50 - storing within our array like strings
177:52 - ins whatever so after the data type add
177:55 - a set of
177:55 - straight brackets but the data type is
177:58 - going to be the
177:59 - data type of the objects that we're
178:00 - working with since we're working with
178:02 - car objects
178:03 - we'll change that to car car straight
178:06 - brackets
178:06 - then we need a name for this array let's
178:09 - say garage it's kind of like we're
178:10 - parking cars within a garage
178:12 - equals new the data type again straight
178:15 - brackets
178:15 - then a size for this array let's say
178:18 - three then we will assign
178:20 - some of these indexes with an object so
178:22 - let's begin with garage at index
178:24 - zero this will equal let's say car one
178:27 - it's as if car one is parking within our
178:30 - garage at
178:31 - this parking spot number of zero then
178:33 - let's park
178:34 - car two and car three so garage at index
178:37 - of one
178:38 - equals car two garage at index of two
178:41 - equals car three then let's display
178:43 - these
178:44 - console.right console.writeline garage
178:47 - at index of zero so let me just show you
178:50 - what this looks like first we're not
178:51 - accessing the model quite yet we're just
178:53 - displaying whatever's within garage at
178:55 - index of zero and what we get is the
178:58 - namespace
178:59 - followed by the data type of our object
179:02 - so if we need
179:03 - the model of this object whatever's
179:04 - within garage index of zero
179:06 - i'm going to follow this with dot model
179:10 - and that will display my car's model
179:13 - which is a mustang
179:14 - then let's do the same thing for garage
179:16 - at index of one and two
179:18 - so garage index of one garage index of
179:21 - two
179:21 - then make sure to follow those with dot
179:23 - model
179:24 - so within our garage between indexes 0
179:27 - through
179:28 - 2 we have a mustang corvette and a lambo
179:31 - now another way in which we could
179:32 - display these is with a for each loop
179:35 - for each parentheses curly braces
179:39 - and with our for each loop we have to
179:41 - list the data type
179:42 - of whatever's within our array car
179:46 - and let's call each car just car car car
179:49 - in garage then during each iteration we
179:53 - will display
179:54 - car dot model and that will do the same
179:58 - thing
179:58 - however this time we will iterate
180:00 - through our array
180:02 - now there's another way in which we
180:03 - could write this too we don't need to
180:05 - necessarily
180:06 - define a size for our array then create
180:08 - some named car objects
180:10 - and then assign those objects directly
180:12 - to each index
180:13 - we could just declare an array and then
180:15 - immediately instantiate some objects all
180:17 - in one step
180:18 - so we're going to create a new array car
180:20 - straight brackets i will call this
180:22 - garage
180:23 - equals curly braces and then we will
180:26 - pass in
180:27 - just new car then you need to pass in a
180:29 - model
180:32 - and do the same thing with your other
180:33 - two cars
180:36 - okay this will do the same thing it's
180:38 - just written in less steps
180:41 - so these are known as anonymous objects
180:43 - they don't technically have a name
180:44 - so i may or may not make a separate
180:46 - video on anonymous objects
180:48 - so within our garage we should have a
180:50 - mustang corvette
180:52 - and a lambo so yeah that's how to create
180:54 - an array of objects
180:56 - in c sharp
180:59 - hey what's going on people in this video
181:01 - i'm going to show you all how we can
181:03 - pass
181:03 - an object as an argument so here's the
181:05 - rundown i have a class car
181:07 - cars have two fields a model and a color
181:10 - and a constructor to assign a model and
181:12 - color argument that we receive
181:14 - i have one car object car car one equals
181:17 - new car
181:18 - the model of this car is a mustang and
181:20 - the color is red
181:21 - so i'm going to create a method that
181:23 - will change the color of my car
181:25 - but i have to pass in a car object so
181:28 - let's create a method to handle that for
181:30 - us
181:31 - public static void it's not returning
181:34 - anything and let's call this method
181:36 - change color and we'll need two
181:39 - parameters
181:40 - a car that we would like to change the
181:42 - color of so the data type is going to be
181:45 - car as well as a name for this parameter
181:47 - let's name whatever car object that we
181:49 - receive as just
181:51 - simply car and we need a color as well
181:53 - that would be a string
181:54 - string color then to change the color of
181:58 - this car
181:59 - i would type car dot color
182:02 - equals whatever color that we receive
182:05 - and that's it
182:06 - so now when we invoke this method we
182:08 - have to pass in a car object as well as
182:10 - a color
182:12 - so that would be change color and the
182:15 - car object
182:16 - that i will pass in as an argument is
182:18 - car 1 the name of the object
182:20 - as well as a new color let's color this
182:22 - car silver
182:23 - and then let's display our cars color
182:26 - and
182:26 - model console.right
182:30 - car one dot color
182:34 - plus a lot of space plus car one
182:38 - dot model and this should change the
182:40 - color of our car
182:41 - to a silver mustang so to pass an object
182:45 - as an argument
182:46 - you need to make sure that you have the
182:47 - right parameter set up you type
182:49 - the data type of this object followed by
182:52 - a name for this parameter
182:54 - then when you invoke this method you
182:55 - have to pass in the name of the object
182:57 - let's try something a little bit
182:58 - different let's create a method to
183:00 - copy an object so let's get rid of this
183:03 - change color method but we'll keep our
183:05 - car object
183:07 - so we'll create a method to return a car
183:10 - object so public static
183:14 - instead of void the data type is the
183:17 - type that we're returning we're
183:18 - returning a car
183:20 - object so replace void with car
183:23 - then we need a name for this method
183:25 - let's call this copy
183:26 - so we will pass in a car object the data
183:29 - type
183:29 - is car and i will name this argument
183:32 - that we receive
183:33 - as car now one thing that we can do to
183:36 - copy a car object
183:37 - is return a new
183:40 - car and then we'll need to pass in
183:43 - a model and a color so the model
183:47 - of this car is car dot model and the
183:50 - color
183:51 - is car dot color
183:54 - now if i would like to copy car 1 and
183:57 - create a second car
183:58 - a copy of it i can type car car 2
184:02 - equals copy and then i will pass
184:05 - this object as an argument and then
184:08 - let's display the fields
184:09 - of car2 and i bet it's a red mustang
184:13 - oh yeah there we go so we successfully
184:15 - created a copy of car one
184:18 - by returning a car object so yeah that's
184:21 - how to pass objects as
184:22 - arguments you just have to list the data
184:24 - type of the object
184:26 - since we're working with cars we had to
184:27 - set up a cart parameter
184:29 - then if you would like to return an
184:31 - object instead of void you would replace
184:33 - void with the data type of the object
184:35 - you would like to return
184:37 - and if you would like to return a new
184:39 - object like what we did with this copy
184:41 - method
184:42 - you would return a new and then call the
184:45 - constructor of whatever object you would
184:47 - like to create and return
184:48 - so that's why we called the car
184:50 - constructor and then we returned that
184:52 - new car
184:53 - back to this spot here so it's kind of
184:55 - like we replaced this method with
184:58 - calling the car constructor something
185:00 - like that so yeah that's how to pass
185:02 - objects as arguments as well as return
185:05 - objects from methods too
185:07 - so yeah if this video helped you out
185:08 - feel free to help me out by smashing
185:10 - that like button
185:11 - leave a random comment down below and
185:13 - subscribe if you'd like to become a
185:14 - fellow bro
185:18 - right what's going on people we're
185:19 - talking about method overriding
185:21 - method overriding provides a new version
185:24 - of a method
185:25 - inherited from a parent class i have a
185:27 - class animal this is a parent class
185:29 - also known as a super class or base
185:31 - class and i have
185:33 - two child classes dog inherits from
185:35 - animal and
185:36 - cat inherits from animal so let's say
185:38 - that we have a method within
185:39 - our animal class so let's create one
185:42 - public
185:43 - void speak all animals can speak
185:48 - and then when a class that inherits this
185:50 - method
185:51 - uses this method let's display a message
185:54 - such as
185:55 - the animal goes
186:00 - okay let's create a dog object and a cat
186:03 - object
186:04 - dog dog equals new dog
186:08 - cat cat equals new cat
186:13 - dogs since they're inheriting from the
186:16 - animal class they have a speak method
186:18 - as well as cats cat dot speak
186:22 - so when both this dog object and this
186:24 - cat object
186:25 - invoke their speak methods that they
186:27 - inherit from the parent class of animal
186:30 - we will execute this method and when my
186:32 - dog
186:33 - and cat object speak that will display
186:36 - the animal goes
186:37 - burr okay so we can actually provide
186:40 - our own implementation of this method we
186:43 - can override this method and do
186:45 - something else
186:46 - now to overwrite a method it needs the
186:47 - same method signature
186:49 - the same name and the same parameters so
186:51 - if i would like to
186:52 - override this speak method within my dog
186:55 - class i'm going
186:56 - to type public override
187:01 - void the same type as the original
187:03 - method
187:04 - and the same name and signature now to
187:07 - create an overriding method
187:08 - the method that is inherited must be
187:11 - virtual
187:12 - abstract or already overridden so i'm
187:15 - going to add this modifier
187:17 - virtual so we can now override this
187:19 - method
187:20 - you can also do this with an abstract
187:22 - method too
187:24 - but the class needs to be abstract as
187:26 - well
187:27 - and there needs to be no body
187:30 - but we'll just stick with virtual in
187:32 - this video
187:35 - okay so we have our virtual method that
187:37 - means that
187:38 - this method can be overridden and now we
187:40 - can provide
187:41 - our own implementation of the speak
187:43 - method specifically for
187:45 - dogs so let's display a different
187:47 - message
187:48 - console.rightline the dog
187:51 - goes woof so notice that we don't have
187:55 - anything within
187:56 - our cat class now if both dog and cat
187:59 - use their speak methods
188:01 - the dog will instead speak and say the
188:04 - dog goes woof
188:05 - and our cat is still using the method
188:07 - that inherits from its parent animal
188:10 - if i would like to do the same thing for
188:12 - my cat objects i can override this
188:14 - method again
188:15 - public override void
188:19 - speak and then i can provide a different
188:23 - implementation
188:25 - the cat goes meow
188:30 - so after both dog and cat use their
188:33 - speak methods
188:34 - this displays the dog goes woof the cat
188:37 - goes meow
188:38 - so by using method overriding we can
188:40 - provide a new version of a method
188:42 - inherited from a parent class however
188:45 - the inheritance method
188:46 - must be abstract virtual or
188:49 - already overwritten and a method
188:51 - overriding is commonly used with
188:53 - the tostring method which we still need
188:55 - to talk about
188:56 - and polymorphism so yeah that's method
188:59 - overriding
189:00 - if you found this video helpful please
189:01 - smash that like button leave a random
189:03 - comment down below
189:04 - and subscribe if you'd like to become a
189:06 - fellow bro
189:09 - all right welcome back everybody the two
189:11 - string method the two string method
189:13 - is an inherent method of objects its job
189:16 - is to convert an object
189:18 - to its string representation so that it
189:20 - is suitable for display
189:22 - so i have a class car cars have four
189:25 - fields i make a model a year and a color
189:27 - and i have a constructor to assign some
189:30 - of these fields
189:31 - so what we could do if we would like
189:32 - some of this information we can override
189:34 - the built-in tostring method of objects
189:37 - that includes cars 2.
189:39 - so let's create a car object car car
189:42 - equals new card then i need to pass in a
189:45 - make
189:46 - model year and color let's say that this
189:48 - is a
189:49 - chevy corvette
189:53 - the year is 2022 and the color
189:56 - is blue so within a writeline statement
190:00 - if i type the name of my object
190:02 - car there's actually a tostring method
190:05 - and when we invoke this method let's
190:07 - take a look to see what happens
190:09 - so this displays the namespace followed
190:12 - by
190:12 - the type of the object that we're
190:14 - working with so we can actually
190:16 - override this method so that when we use
190:18 - the tostring method
190:19 - we can return a string representation of
190:22 - this object
190:23 - maybe we can display the make model year
190:25 - in color somehow
190:26 - so we'll need to override this method to
190:29 - string
190:30 - so let's do that here we're going to
190:32 - type
190:33 - public then to override a method we have
190:35 - to use that override keyword
190:38 - then type to string and this might
190:41 - auto-generate for you
190:42 - so we're returning a string and by
190:45 - default this will return
190:46 - base to string what we can do instead is
190:49 - return something else we can return
190:51 - some sort of string representation
190:53 - that's suitable for display
190:55 - let's say that when i use the tostring
190:57 - method of my car object
190:59 - i'd like to return a sentence that says
191:01 - this is a
191:02 - make plus model a chevy corvette so
191:05 - let's do something like this
191:07 - let's say string
191:10 - message equals this
191:13 - is a plus make
191:17 - then i'll just add a space plus model
191:20 - really you can do whatever you want and
191:22 - then i'm going to return
191:23 - this string or i could take all of this
191:27 - copy it and then return
191:33 - this is a make plus model i could do
191:35 - that too and that would work
191:37 - so when i use the tostring method it's
191:39 - going to return this sentence
191:40 - and insert make and model this is a
191:43 - chevy corvette
191:45 - one thing you can do too you don't
191:46 - necessarily need to directly invoke the
191:49 - tostring method
191:50 - you can just type the name of the object
191:52 - and that will do the same thing
191:54 - so this will behind the scenes called
191:55 - the tostring method
191:57 - so before when we displayed our object
192:00 - with a writeline statement it would
192:01 - display the namespace
192:02 - plus the type of the object but if you
192:04 - were to override
192:06 - the tostring method you can return some
192:08 - sort of sentence or string
192:10 - representation of your object
192:11 - that is suitable for display so yeah
192:14 - that is the
192:15 - tostring method it converts an object to
192:18 - a string representation
192:19 - that is suitable for display and really
192:21 - you can type whatever you want here just
192:23 - be sure to return a string
192:24 - so yeah that is the two string method if
192:27 - you found this video helpful please be
192:28 - sure to give it a thumbs up drop a
192:30 - random comment down below and subscribe
192:32 - if you'd like to become a fellow bro
192:34 - hey what's going on everybody it's you
192:36 - bro hope you're doing well
192:37 - and in this video i'm going to explain
192:39 - to polymorphism in c sharp
192:41 - so sit back relax and enjoy the show
192:46 - all right what's going on people
192:48 - polymorphism
192:49 - polymorphism is a greek word that means
192:52 - to have many forms
192:53 - with programming objects can be
192:55 - identified by more than one type
192:57 - they can have many forms for example
193:00 - let's say that we have a dog
193:02 - a dog could be considered a canine an
193:04 - animal
193:05 - and an organism so a dog has more than
193:07 - just
193:08 - one form it has more than one data type
193:10 - here's the situation we're going to have
193:12 - a race
193:13 - we'll enter in a car object bicycle
193:15 - object and boat object
193:17 - so i have four classes vehicle is the
193:19 - base class
193:20 - otherwise known as the parent class and
193:23 - car bicycle and boat all inherit from
193:25 - the vehicle class
193:26 - so with my race i need to create a car
193:28 - object bicycle object and
193:30 - boat object so let's do that car car
193:34 - equals new car
193:37 - bicycle bicycle equals
193:40 - new bicycle
193:43 - and boat boat equals new boat
193:47 - i would like to place all of these
193:49 - objects within an array for my race
193:51 - but what's the data type of the array
193:53 - going to be so let's try and make an
193:55 - array of cars and add our car
193:57 - bicycle and boat and let's just see what
193:59 - happens i will name this array
194:01 - just vehicles equals and then within
194:05 - curly braces
194:06 - add whatever objects you would like i
194:08 - would like to enter my car into the race
194:10 - my bicycle and my boat
194:13 - okay but we're running into some errors
194:15 - here cannot implicitly convert
194:17 - bicycle to car so i stated that the
194:21 - data type of this array is going to be
194:23 - cars i can only enter
194:25 - car objects so i have no issue there but
194:27 - i cannot enter in
194:28 - my bicycle and boat objects into this
194:31 - array
194:31 - but one way in which we can solve this
194:33 - is by using polymorphism
194:36 - so we can find what they all have in
194:38 - common they all
194:39 - identify as vehicles because they all
194:42 - inherit from the vehicle class
194:44 - these objects have more than one form
194:46 - they can be identified by more than one
194:48 - type
194:48 - so instead of my array being an array of
194:50 - cars i'm going to change this
194:52 - to vehicle because well these three
194:55 - objects
194:56 - identify as well a car a bicycle and a
194:58 - boat respectively
195:00 - but also vehicles because they inherit
195:02 - from the vehicle class
195:03 - so you can see that this is valid if you
195:05 - need to create an array of
195:07 - different types of objects you have to
195:09 - find what they have in common
195:10 - and then you can just use that as a data
195:12 - type they are all also considered
195:14 - vehicles
195:15 - let's move on to part two what i would
195:17 - like to do is have all of these vehicles
195:19 - use a go method
195:21 - so they will all begin the race at the
195:23 - same time so let's create a go method
195:25 - within each of these classes
195:27 - public void go
195:31 - and we'll just display the car
195:35 - is moving place that within the car
195:37 - class
195:38 - let's make a go method for bicycles
195:41 - change
195:41 - car to bicycle
195:44 - and then the boat is moving
195:48 - okay now to iterate over this array of
195:50 - vehicles
195:51 - we can use a for each loop for each
195:54 - now what's the data type of our vehicle
195:57 - array
195:57 - well it's vehicles vehicle vehicle
196:01 - in vehicles and now i would like
196:04 - each vehicle to use its go method
196:08 - vehicle.go so each vehicle will use its
196:11 - go method
196:12 - but there's one more thing that we need
196:14 - to do we need a go method within our
196:17 - vehicle class
196:18 - so all of these methods within our car
196:21 - bicycle
196:21 - and boat classes all are going to be
196:24 - overriding
196:25 - a go method found within the vehicle
196:27 - class so let's create a
196:29 - virtual method public
196:32 - virtual void
196:35 - go and we don't necessarily need to
196:39 - define anything within the go method
196:42 - because we're going to be overriding
196:43 - this method okay
196:45 - then we need to use this override
196:48 - modifier
196:52 - all right now when we iterate over this
196:55 - array of vehicles
196:56 - each vehicle will use its go method it's
196:59 - as if when we would like to begin our
197:01 - race
197:01 - all of the vehicles within our array
197:03 - will use their go methods
197:05 - at the same time the car is moving the
197:07 - bicycle is moving the boat is moving
197:10 - so yeah that's polymorphism it's a greek
197:12 - word that means to have many forms
197:14 - objects can be identified by more than
197:16 - one type
197:18 - and in this example we created an array
197:20 - of vehicles
197:21 - our car identifies as a car but it also
197:24 - identifies as a vehicle
197:25 - and objects do identify as objects too
197:28 - so cars identify as objects
197:30 - and the same thing can apply with
197:32 - bicycle and boats in our example
197:34 - so yeah that's polymorphism if you found
197:37 - this video helpful be sure to smash that
197:39 - like button leave a random comment down
197:40 - below
197:41 - and subscribe if you'd like to become a
197:43 - fellow bro
197:46 - all right interfaces an interface is
197:49 - much like a parent class
197:51 - or base class it defines a sort of
197:54 - contract
197:54 - that all classes inheriting from need to
197:57 - follow
197:58 - an interface can contain properties
198:00 - methods events
198:01 - and if there's any of those declared
198:03 - within an interface
198:05 - anything that inherits from that
198:06 - interface needs to be implemented within
198:09 - an inheriting class
198:10 - an interface declares what a class
198:13 - should have
198:14 - and the class that it inherits from
198:16 - defines how it should do it exactly
198:19 - so here's an example we'll create three
198:21 - classes
198:22 - rabbit hawk and fish and two interfaces
198:26 - prey and predator
198:33 - alright now let's create two interfaces
198:36 - to create an interface you type
198:38 - interface and then the name of the
198:39 - interface however a common naming
198:42 - convention with
198:43 - interfaces is that you precede the
198:45 - interface name
198:46 - with capital i so if we would like a
198:49 - prey interface
198:50 - we would type i pray and then let's
198:53 - create a predator interface
198:55 - interface i predator
198:58 - now with these interfaces we can pretty
199:00 - much declare anything within these
199:02 - interfaces but if one of these classes
199:04 - would like to inherit from this
199:06 - interface they need to implement
199:08 - anything declared within them
199:10 - so let's say that if you're prey then
199:13 - you need a method to flee because you're
199:15 - fleeing from predators
199:17 - i'm going to declare a flea method void
199:20 - flee we will declare it but not
199:23 - implement it
199:24 - implementing this method is the job of
199:26 - the inheriting class
199:27 - that would like to use this interface
199:30 - let's say that
199:30 - rabbits will inherit this interface i
199:33 - pray
199:34 - colon i pray and in order to do so we
199:38 - need to implement
199:39 - this method of fleet within the rabbit
199:41 - class in order to use it
199:44 - public void flea
199:47 - and then be sure to add a body to this
199:49 - method so when we invoke this method
199:52 - let's write the rabbit runs away
199:57 - okay now we can create a rabbit object
200:01 - rabbit rabbit equals
200:04 - new rabbit and i bet there's a flea
200:08 - method
200:08 - rabbit dot flea
200:11 - and let's try it the rabbit runs away
200:15 - now let's have our hawk class inherit
200:17 - this predator interface
200:19 - now with our predator interface let's
200:21 - create a method
200:23 - to hunt void hunt
200:26 - we will declare it but not implemented
200:28 - implementing this method is the job of
200:30 - the classes inheriting
200:31 - this interface so hawk will inherit the
200:35 - i predator interface but we need to
200:38 - implement
200:39 - that hunt method public
200:42 - void hunt
200:46 - and then let's display the hawk
200:49 - is searching for food
200:52 - and we can create a hawk object hawk
200:56 - hawk equals new hawk
201:00 - so let's take a look at our hawk object
201:03 - hawk
201:03 - dot and there's no flea method because
201:06 - we're not implementing
201:07 - the prey interface we're implementing
201:09 - the predator interface
201:11 - so there is a hunt method and not a flea
201:14 - method
201:16 - hawk.hunt
201:19 - the hawk is searching for food now with
201:21 - interfaces
201:22 - you can inherit more than one unlike
201:24 - with standard inheritance
201:25 - so fish they could be both prey and
201:28 - predators
201:29 - to inherit two interfaces after the
201:31 - colon you can separate each with a comma
201:34 - so fish will inherit the i prey and i
201:37 - predator interfaces but now they need to
201:40 - implement
201:40 - both of these methods flea and hunt so
201:43 - let's do so
201:45 - public void flea
201:51 - the fish swims away
201:54 - and now we need to implement that hunt
201:56 - method
201:58 - public void hunt
202:06 - the fish is searching
202:09 - for smaller fish
202:13 - all right now let's create a fish object
202:16 - fish
202:16 - fish equals new fish
202:23 - so fish have both a flea and a hunt
202:25 - method
202:27 - fish dot flea fish dot hunt
202:32 - the fish swims away the fish is
202:34 - searching for smaller fish
202:36 - so an interface defines a sort of
202:38 - contract that all classes inheriting
202:40 - from
202:41 - should follow an interface declares what
202:44 - a class
202:44 - should have and the inheritance class
202:47 - defines
202:48 - how it should do it the benefits of
202:50 - using interfaces
202:51 - for one is that you can inherit multiple
202:53 - interfaces
202:55 - unlike with standard inheritance there's
202:57 - added security
202:59 - and this gives us a plug-and-play style
203:01 - of coding because
203:02 - anything that has the same interface
203:05 - will definitely have the same
203:06 - implemented methods and properties
203:08 - so you can swap these out for like a
203:10 - different creature if you would like
203:12 - so yeah those are interfaces if you
203:14 - found this video helpful please be sure
203:15 - to give this video a thumbs up
203:17 - leave a random comment down below and
203:19 - subscribe if you'd like to become a
203:20 - fellow bro
203:24 - all right welcome back everybody a list
203:27 - a list is a
203:28 - data structure that represents a list of
203:31 - objects
203:31 - that can be accessed by index it's
203:34 - similar to an array
203:35 - but they can increase and decrease
203:37 - dynamically in size during runtime
203:40 - which rays cannot do so here's an
203:42 - example of an array an array has a
203:43 - static
203:44 - fixed size and we cannot change it
203:46 - normally after runtime
203:48 - so let's create a standard array just
203:50 - for this example let's create an array
203:52 - of food
203:52 - string food equals new
203:56 - string and let's say that this array has
203:58 - a size of three
204:00 - so i'm going to add some elements to
204:02 - this array
204:11 - and then i can display these elements
204:13 - with a symbol for each loop
204:19 - pizza hamburger and hot dog so if i
204:22 - attempt to add another element to this
204:24 - array this is what happens
204:29 - we'll run into an exception and index
204:32 - out of range exception
204:33 - because index was outside the bounds of
204:35 - the array
204:36 - so you can't normally change the size of
204:38 - an array another option is to use a list
204:40 - a list can increase and decrease
204:42 - dynamically in size during runtime
204:45 - so let's create a list step one is that
204:48 - we'll need to import
204:50 - system.collections.generic so include
204:53 - this at the top i'll place it right
204:54 - underneath
204:55 - using system and this is how to declare
204:58 - a list
204:59 - list then within angle brackets list the
205:02 - type of object you would like to store
205:04 - strings and then i will name this list
205:07 - food
205:08 - equals new list
205:12 - angle brackets the data type again
205:16 - parentheses semicolon and we now have
205:19 - a list named food and to add elements to
205:22 - this list there is a built in add method
205:25 - food dot add then within
205:29 - this method pass in the object you would
205:31 - like to store
205:32 - i would like to store let's say a pizza
205:35 - then a hamburger then a hot dog
205:38 - so food dot add pizza hamburger
205:42 - and hot dog
205:46 - and let's take a look so we have our
205:49 - pizza
205:50 - hamburger and hot dog and i bet we can
205:52 - add even more than three elements
205:57 - so it appears that our list can resize
205:59 - dynamically which is a bonus
206:01 - then to access one of these elements
206:03 - it's much like an array you use that set
206:05 - of straight brackets
206:06 - so i'm going to display whatever's
206:08 - within element
206:09 - number zero food index zero
206:14 - and that would be pizza so accessing an
206:17 - element is the same as an array you just
206:19 - type the list name
206:20 - and then add a set of straight brackets
206:22 - then the index number okay so here's a
206:24 - few other useful methods of lists
206:27 - there is a remove method food dot remove
206:31 - then type in what you would like to
206:33 - remove i would like to remove
206:34 - fries and let's see if that's still in
206:37 - here
206:39 - nope fries is missing pizza hamburger
206:42 - hot dog
206:43 - so that is the add method and remove
206:45 - method but there's a few other useful
206:47 - methods
206:48 - so we can insert an object at a given
206:50 - element
206:51 - let's insert maybe sushi at index 1 via
206:54 - the insert method food dot insert
206:58 - then we need an index and an item
207:02 - so at the beginning of our list at index
207:05 - 0
207:06 - i will insert sushi
207:11 - sushi pizza hamburger hot dog fries
207:14 - we can get the current size of our array
207:17 - using the
207:18 - count property so within a writeline
207:20 - statement
207:21 - i'm going to display food dot count
207:24 - property and the current size
207:28 - of our list is four so that is the count
207:32 - property we can find the index of an
207:35 - element
207:37 - food dot index of
207:41 - and let's find where pizza is
207:46 - so that is at index zero you can also
207:50 - find
207:50 - the last index of a given item so what
207:53 - if we have fries both
207:54 - in the beginning and at the end food dot
207:58 - add fries
208:02 - so i have that in the beginning and at
208:04 - the end so i'm going to use
208:06 - the last index of method
208:09 - food dot last index
208:12 - of fries
208:15 - and the last index surprise is at four
208:19 - zero one two three four so let me get
208:23 - rid of that okay we can check to see
208:25 - if our list contains a given item
208:28 - using the contains method food dot
208:31 - contains pizza
208:35 - this will return a boolean true if pizza
208:38 - is within our list and false if not
208:40 - pizza is within our list so that returns
208:43 - true
208:44 - and that is the contains method then we
208:46 - have sword
208:47 - food dot sword this will sort our list
208:51 - alphabetically
208:53 - so our list in alphabetical order is
208:55 - fries hamburger hot dog pizza
208:57 - and we can sort in reverse order
209:00 - food.reverse
209:04 - and our list in reverse order is fry's
209:07 - hot dog hamburger pizza
209:09 - we can clear our list food dot
209:13 - clear
209:16 - and now our list is empty and lastly
209:20 - we can convert our list into an array so
209:23 - i'm going to declare a new array
209:25 - string let's say food array
209:29 - equals food dot
209:32 - 2 array
209:36 - string item in food array so we have
209:38 - pizza hamburger hot dog fries
209:41 - well okay then everybody that is a list
209:44 - it's similar to an array it's a data
209:46 - structure that represents a list of
209:48 - objects
209:49 - that can be accessed by index it's
209:51 - similar to an array
209:52 - but they can increase and decrease
209:54 - dynamically in size
209:56 - but they waste more memory so yeah those
209:58 - are lists in c
209:59 - sharp if you found this video helpful
210:00 - please be sure to give it a thumbs up
210:02 - drop a random comment down below and as
210:04 - always subscribe if you'd like to become
210:06 - a fellow bro
210:09 - all right what's going on everybody so
210:11 - in this video i'm going to show you all
210:12 - how we can create a list of objects from
210:15 - a custom class of ours
210:16 - in the last video i showed you all how
210:18 - we can create a list of strings
210:19 - but what if we would like to create a
210:21 - list of players to keep track of the
210:23 - amount of players in our game and their
210:24 - names
210:25 - so let's create a list list then we need
210:28 - angle brackets and
210:30 - the data type of the object we would
210:31 - like to store within our list
210:33 - i would like to store player objects and
210:35 - i'll name
210:36 - this list players because we're keeping
210:38 - track of the players
210:39 - players equals new list
210:44 - angle brackets our data type again
210:46 - player
210:47 - parentheses semicolon so we now have a
210:50 - list
210:50 - that can store player objects so let's
210:53 - instantiate some player objects
210:54 - and i have a field setup username you
210:57 - can also set up getters and setters too
210:59 - if you prefer
211:00 - so let's create some player objects
211:01 - player and we'll call this player
211:03 - player1
211:04 - equals new player but we need to pass in
211:07 - a username as an argument
211:09 - let's say that this is chad and i'll
211:11 - create maybe
211:12 - two more players so player one
211:16 - player two player three player two will
211:18 - be what about steve
211:20 - and karen okay now to add
211:24 - our player objects to our list type the
211:26 - name of the list
211:27 - dot add and then pass in the name of the
211:31 - object
211:32 - players dot add player 1 then do the
211:35 - same thing with player 2 and player 3.
211:38 - then i'll use a for each loop to display
211:40 - all these for each
211:44 - the data type is player player
211:48 - in players so let's take a look at this
211:52 - i'm going to
211:53 - console.writeline each player but since
211:56 - we're displaying each object directly
211:59 - what's going to be displayed is the
212:01 - namespace
212:02 - plus the data type of our object we can
212:05 - access
212:05 - the username field
212:09 - and that will display each player's
212:10 - username or we can overwrite the
212:13 - tostring method so we have chad steve
212:16 - and kieran
212:17 - or we can override the tostring method
212:20 - so let's try that too public
212:24 - override to string
212:28 - and i'm going to return
212:31 - username so then when i use
212:34 - console.writeline i can just type in
212:36 - the object's name
212:41 - so we have chad steve and karen now
212:43 - another thing that you can do
212:44 - when we instantiate these player objects
212:47 - we can do so anonymously
212:49 - so within the add method of our list
212:52 - players
212:52 - we can simply just pass in new
212:56 - player then pass in a name and then we
212:58 - don't necessarily need to create a
213:00 - name for each of these objects so i'm
213:02 - going to pass in
213:03 - new player steve and new player karen
213:08 - so this is optional but i like to create
213:10 - anonymous objects
213:11 - it's less work so we should have our
213:14 - three players
213:15 - chad steve and karen so yeah that's how
213:18 - to add objects to a list
213:20 - within the angle brackets you just list
213:22 - the type of object that you would like
213:24 - to store within your list
213:25 - so yeah that's a list of objects in c
213:27 - sharp if you found this video helpful
213:29 - please be sure to smash that like button
213:31 - leave a random comment down below
213:32 - and subscribe if you'd like to become a
213:34 - fellow bro
213:37 - all right we have a lot to talk about
213:40 - today getters and setters but before i
213:42 - explain what these are let me explain
213:44 - the situation
213:45 - we have a class car and we have one
213:48 - field within our car class
213:49 - speed so when we construct a car object
213:52 - we need to pass in something for the
213:54 - speed
213:55 - maybe this is miles per hour kilometers
213:57 - per hour doesn't really matter
213:59 - so let's say that somebody takes our car
214:01 - object
214:02 - and changes the speed to like whatever
214:05 - this number is
214:06 - 100 million actually let's make that a
214:09 - billion
214:09 - how can we prevent people from doing
214:11 - this because currently our car is going
214:13 - way too fast
214:15 - so one way in which we could do that is
214:18 - to change
214:18 - this field from public to private
214:21 - but then we can't access it at all
214:24 - another way is to set up
214:25 - getters and setters and this adds
214:28 - security to our program
214:29 - via this concept called encapsulation so
214:32 - we need to first
214:33 - set up a property for this field the
214:36 - property name
214:37 - is the same as the field name except
214:39 - it's capital
214:40 - so type public if you're returning
214:44 - something
214:44 - list the data type then speed and then
214:47 - let's make this capital
214:49 - then add a set of curly braces a
214:51 - property combines the aspects
214:53 - of both fields and methods and it shares
214:56 - the same name with the field
214:57 - so it's kind of like something in
214:59 - between a field and a method
215:01 - and it contains accessors a get and
215:04 - set accessor now to first assign a value
215:07 - we'll need to change our constructor
215:09 - instead of assigning the field speed we
215:12 - will assign
215:12 - the property speed so this has a capital
215:16 - s
215:16 - let's create a get accessor first when
215:19 - we would like to
215:20 - get the value of speed whatever is
215:22 - contained within speed
215:24 - we will use this get accessor so type
215:26 - get
215:27 - curly braces and we will return
215:30 - speed and then we'll need to assign this
215:33 - with
215:34 - the set accessor then make sure you have
215:36 - that semicolon at the end
215:38 - so by using this get accessor this
215:41 - will read whatever value is within our
215:44 - field
215:45 - then we'll need a set accessor if we
215:47 - would like this to be
215:48 - writable set curly braces so what we'll
215:51 - do here
215:52 - is set speed equal to value
215:56 - so value is kind of like a parameter
215:58 - properties combine the aspects of both
216:00 - fields and methods
216:02 - so when we assign a value to speed
216:05 - well then this value is going to be
216:08 - this so it's kind of like an argument
216:10 - and a parameter
216:11 - and within our set accessor we can
216:13 - actually set up like some code or some
216:15 - rules or something
216:16 - so if somebody attempts to change the
216:18 - speed we could write an if
216:20 - statement like if value
216:23 - is greater than let's say 500 then we
216:26 - will limit this
216:28 - let's change speed equal to 500 then
216:32 - else speed
216:35 - equals value
216:40 - now car.speed is inaccessible due to its
216:42 - protection level
216:44 - so we need to access instead of the
216:46 - field the property so that's
216:48 - speed with a capital s and then if we're
216:50 - going to
216:51 - display the value of speed we'll access
216:53 - the property
216:54 - instead of the field so if we attempt to
216:57 - set our speed equal to 1 billion
217:00 - well we will access this set accessor
217:03 - and then it's going to be limited to 500
217:05 - then so if we attempt to change our
217:07 - speed to 1 billion
217:09 - it will be limited to 500 and then we
217:11 - can still display the value
217:13 - and access it because by having a getter
217:16 - and setter
217:16 - this is both readable and writable
217:20 - so yeah those are getters and setters
217:23 - they are accessors
217:24 - found within a property a property
217:26 - combines the aspect of both
217:28 - fields and methods and if you have a
217:30 - private field
217:31 - you can also set up a property that has
217:34 - getters and setters
217:36 - for more security so yeah those are
217:38 - getters and setters
217:40 - in c sharp
217:43 - all right everybody we have to talk
217:45 - about auto implemented properties
217:47 - this is an intimidating name but don't
217:49 - worry it's actually fairly simple
217:51 - they are shortcuts when no additional
217:53 - logic
217:54 - is required within a property you do not
217:57 - have to define a field for a property
217:59 - and you only have to write get and or
218:01 - set inside the property
218:03 - here's an example i have a class car and
218:04 - what if we would like a
218:06 - model field and property so that might
218:08 - look something like this
218:10 - make sure to not make your field public
218:12 - for this example
218:13 - so this will be a string named model for
218:15 - a model of car
218:17 - and i would like to set up a property
218:19 - that has get and set accessors
218:21 - so that would be public string
218:26 - model with a capital m curly braces and
218:30 - then i need a get and set accessor
218:33 - all we'll do within the get accessor is
218:36 - return
218:38 - model and that's the field and a set
218:41 - will be model r field
218:45 - equals value and within my constructor i
218:49 - will set
218:49 - this dot model property make sure that
218:52 - you have capital m
218:54 - equals model whatever our parameter is
218:58 - so if you're not doing anything else
219:00 - within your getter and setter there's
219:01 - actually a shortcut to all of this
219:03 - and that's by using an auto implement
219:05 - property so this is what we'll do we're
219:07 - going to instead
219:08 - get rid of all this and type
219:12 - public string model
219:16 - with a capital m curly braces
219:20 - get semicolon set semicolon
219:23 - and this will do the same thing however
219:25 - it's a lot less to write
219:27 - so if there's no additional logic that
219:29 - you need besides
219:30 - you know setting the value and getting
219:33 - the current
219:33 - field well you can just use an auto
219:35 - implemented property
219:36 - and this will do the same thing let's
219:38 - test it so let's create a car object
219:40 - car car equals new car then pass in
219:44 - a model of car let's say a porsche this
219:46 - time
219:47 - and then i would like to display the
219:49 - car's model car
219:51 - dot model property with a capital m
219:54 - so there will still be a model field but
219:56 - it's hidden
219:58 - and this car's model is a porsche
220:01 - so that's like a shortcut you can do an
220:03 - auto implemented property is a shortcut
220:06 - when
220:06 - no additional logic is required in the
220:09 - property
220:10 - you do not have to define a field for a
220:12 - property and you only have to write
220:14 - get and or set inside the property so
220:17 - yeah that is an
220:18 - auto implemented property if you liked
220:20 - this video please give it a thumbs up
220:22 - drop a random comment down below and
220:23 - subscribe if you'd like to become a
220:25 - fellow bro
220:29 - all right what's going on people enums
220:31 - enums are a special kind of class
220:34 - that contains a grouping of named
220:36 - integer constants we tend to use enums
220:39 - when we have values
220:40 - that we know will not change so here's
220:42 - an example let's create an enum of
220:44 - planets
220:45 - and we will associate a planet number
220:47 - with each named planet
220:48 - so to create an enum type enum then a
220:51 - unique name kind of like we're creating
220:52 - a class
220:53 - then curly braces so i'm going to add
220:56 - the name of each planet within our solar
220:58 - system beginning with mercury and then
221:00 - separate each with a comma
221:01 - so we have mercury venus earth then just
221:04 - continue on in this pattern
221:09 - this isn't necessary but i like to place
221:11 - each of my members on a new line within
221:13 - an
221:14 - enum i think it's easier to read
221:17 - okay we now have an enum of planets and
221:20 - there's an associated integer with each
221:22 - of these members
221:23 - if we do not explicitly set an integer
221:26 - by default the first
221:28 - member is zero then one two three then
221:31 - you just follow that pattern
221:32 - so let's access one of these members of
221:34 - our enum of planets
221:36 - let's display a message planets
221:39 - dot pluto
221:43 - is a planet so taxes
221:47 - a name of one of these members you type
221:50 - the name of your enum planets dot the
221:52 - name of your named member pluto
221:54 - this will return the name not the
221:57 - integer
221:58 - let's try it pluto is a planet
222:01 - this is no different from using the two
222:04 - string method this will do the same
222:05 - thing
222:06 - pluto is a planet okay now if we need
222:08 - the associated integer
222:10 - with each of these named members we
222:12 - would cast this member
222:14 - as an integer let's change our message
222:16 - around
222:17 - let's say that planets.mercury
222:21 - is planet number
222:24 - than to access one of the integers
222:27 - stored within a member
222:28 - that would be planets dot the name of a
222:31 - planet
222:32 - mercury and then we will precede this
222:34 - with parentheses
222:36 - and this will convert our named member
222:39 - into
222:39 - an integer so our message is now
222:43 - mercury is planet number zero so these
222:46 - named members
222:47 - always begin with zero but we can change
222:49 - that and set them
222:50 - let's say that mercury equals one venus
222:54 - equals two and then continue on in this
222:56 - pattern
223:00 - let's display pluto as well because
223:03 - pluto is feeling left out
223:04 - planets dot pluto is planet number
223:09 - planets dot pluto then cast as an
223:12 - integer
223:14 - okay mercury is planet number one pluto
223:16 - is planet number nine
223:18 - let's try something a little bit more
223:19 - complex let's create an enum to keep
223:22 - track of the radius of each planet
223:25 - enum planet radius
223:29 - and let me just copy this
223:33 - okay here's the radius of each planet in
223:35 - kilometers
223:36 - mercury is two four three nine
223:40 - six zero five one for venus
223:44 - and then i'll just fast forward the
223:45 - footage you can copy this down if you'd
223:46 - like
223:55 - all right we have the radius and
223:57 - kilometers of each planet
224:00 - so these are in name integer pairs
224:03 - let's create a variable to store the
224:05 - name of one of our planets
224:07 - string name equals what about earth
224:10 - planet radius the name of our enum dot
224:13 - the name of our member
224:15 - earth so if we're going to store this
224:17 - within a string variable we need to use
224:19 - the
224:19 - to string method and then
224:23 - let's display this just to test it let's
224:26 - say
224:27 - planet colon space plus name
224:31 - and this should display just earth
224:34 - planet
224:35 - earth okay let's get the radius of earth
224:40 - int radius
224:43 - planetradius dot earth
224:47 - then cast this as an integer
224:53 - console.rightline let's say radius
224:57 - colon space plus radius
225:01 - radius 6371 let me add kilometers
225:06 - so that's kind of the nice thing about
225:08 - enums is that we don't necessarily need
225:10 - to remember all of these numbers
225:12 - it's kind of like restoring variables so
225:14 - to say they are name
225:15 - integer constants that will not change
225:17 - through the life of a program
225:19 - now let's move on to a challenge round
225:20 - let's create a method that will
225:22 - calculate
225:23 - the volume of one of our planets when we
225:25 - pass in a radius
225:27 - public static will return a double
225:32 - and this will be the volume method and
225:35 - there is one parameter
225:36 - the parameter is planet radius and we
225:40 - will name this just radius
225:43 - okay we need to return let's say volume
225:49 - and double volume equals
225:53 - and here's the formula to calculate the
225:56 - volume of a sphere 4.0 divided by
226:00 - 3.0 times math
226:03 - dot pi times
226:06 - our radius to the power of three so we
226:08 - can use math
226:10 - dot power pass in
226:13 - our radius make sure to cast this as an
226:16 - integer
226:18 - to the power of three
226:23 - and let's call the volume method and
226:25 - store this within
226:26 - a double named volume
226:29 - double volume equals we will invoke the
226:32 - volume method and pass in planet
226:36 - radius dot earth
226:40 - and then we'll display the volume
226:42 - console.writeline
226:44 - volume colon space plus
226:48 - volume and i think that's in cubed
226:51 - kilometers
226:55 - all right and the volume of earth
226:59 - is whatever number this is one zero
227:02 - eight three something something
227:03 - something something
227:05 - cubed kilometers so yeah those are enums
227:08 - they're like a special class that
227:09 - contains a
227:10 - set or grouping of named integer
227:13 - constants
227:14 - we tend to use enums when we have values
227:16 - that we know will not change
227:18 - and to get the integer value from an
227:20 - item you must
227:21 - explicitly convert it to an integer so
227:24 - yeah those are enums if you found this
227:26 - video helpful
227:27 - please be sure to smash that like button
227:29 - leave a random comment down below
227:30 - and subscribe if you'd like to become a
227:32 - fellow bro
227:35 - if you wouldn't mind please like comment
227:38 - and subscribe
227:39 - one like equals one prayer for the
227:41 - youtube algorithm
227:43 - uh generics all right
227:46 - let's get started generics anything
227:48 - that's generic
227:49 - is not specific to any particular data
227:52 - type
227:53 - we can make something generic by adding
227:54 - a set of angle brackets
227:56 - then t we can make classes generic
227:58 - methods
227:59 - fields whatever we want this allows for
228:02 - greater code reusability for different
228:04 - data types
228:05 - let's say that we have three different
228:06 - types of arrays an array of integers
228:08 - doubles and strings let's create those
228:11 - int
228:12 - array i'll call this interray
228:15 - equals i don't know one two three
228:18 - the elements really aren't important the
228:20 - data type is
228:21 - okay then let's say we have an array of
228:24 - doubles
228:25 - i will name this double array and
228:28 - the elements are 1.0 2.0
228:32 - and 3.0 then let's say that we have an
228:36 - array of strings
228:38 - string array equals
228:43 - one two
228:46 - and three okay what if i would like to
228:50 - display the elements of each of these
228:51 - arrays so we can use a method for that
228:54 - let's begin with a method to accept an
228:56 - array of integers
228:58 - so let's add that here public static
229:02 - void we're not returning anything and
229:04 - let's say that this method is named
229:06 - display elements
229:11 - so there is one parameter if we're
229:13 - displaying an array of integers
229:15 - well that will be our parameter int
229:18 - array
229:19 - and let's call this array and then we'll
229:21 - need a for loop or for each loop to
229:24 - iterate over the elements of this array
229:26 - let's use a for each loop for each
229:29 - int item in array
229:33 - then we will write preferably not right
229:36 - line
229:38 - item then maybe i'll add a space okay
229:40 - let's call the display elements method
229:42 - that we just created
229:44 - and then pass in our interray as an
229:46 - argument
229:48 - and let's see what happens okay we have
229:51 - the numbers one
229:52 - two three so what if we attempt to pass
229:55 - in
229:56 - our double array display elements
229:59 - then we will pass in our array of
230:01 - doubles
230:02 - so we actually can't use this method for
230:05 - doubles we can only
230:06 - use this for integers cannot convert
230:08 - from double to
230:10 - int if i would like to display my array
230:12 - of doubles
230:13 - well i would need a completely different
230:15 - method that accepts
230:16 - an array of doubles as an argument so
230:19 - i'm going to
230:20 - copy this current method that we have
230:22 - change into
230:23 - double and change into double here as
230:27 - well
230:28 - and then we can call this version of our
230:30 - display elements method this will do the
230:34 - same thing
230:35 - actually let me make one change i'm just
230:37 - going to add a right line to the end of
230:39 - these
230:40 - so basically we have two methods that do
230:43 - the exact
230:43 - same thing however they accept a
230:45 - different data type as an argument
230:48 - let's add one more method for strings
230:53 - public static void display elements
230:56 - the parameter is an array of strings for
230:58 - each
230:59 - string item in array and then i can use
231:03 - the string version of display elements
231:06 - but pass
231:06 - in our string array
231:10 - so we have each of our three different
231:12 - types of arrays all displayed
231:15 - so this is a lot of work we have three
231:17 - methods that do basically the same thing
231:19 - however they accept
231:20 - different arguments so what if we had
231:22 - one method that could accept
231:24 - basically any data type well that's
231:26 - where generics come in
231:28 - so let's take these first two methods
231:30 - and delete them we will no longer need
231:32 - them
231:32 - we're going to turn this method into a
231:34 - generic method
231:35 - so after the method name add a set of
231:38 - angle brackets
231:39 - then add t so really you can put
231:41 - anything you want between these angle
231:43 - brackets i like to say thing because i
231:45 - think it's funny
231:46 - we're going to accept a thing as an
231:48 - argument
231:49 - so we need to change that here as well
231:51 - so change any instance of
231:53 - a data type to t or
231:56 - thing if you're using thing okay so
231:59 - change
231:59 - string to thing we're accepting an array
232:02 - of things
232:03 - for each thing item
232:06 - in array so now we have one method that
232:09 - accepts
232:10 - all data types we can reuse this one
232:12 - method for an array of integers
232:14 - doubles and strings
232:18 - and it appears to work so that's where
232:20 - generics are helpful
232:22 - anything that's generic is not specific
232:24 - to a particular data type
232:26 - we can add angle brackets t or really
232:29 - anything within these angle brackets
232:31 - just make sure that it's consistent
232:32 - so we can add this to classes methods
232:35 - fields etc
232:36 - and this allows for greater code
232:38 - reusability for different data
232:40 - types so instead of three different
232:41 - methods that all accept different data
232:43 - types we have one that accepts basically
232:46 - all data types
232:47 - so yeah those are generics if you found
232:49 - this video helpful be sure to smash that
232:51 - like button
232:51 - leave a random comment down below and
232:53 - subscribe if you'd like to become a
232:55 - fellow bro
232:56 - hey what's going on everybody it's bro
232:59 - hope you're doing well
233:00 - and in this video i'm going to explain a
233:01 - multi-threading in c-sharp
233:03 - so sit back relax and well enjoy the
233:06 - show
233:09 - if you find this video helpful please
233:11 - remember to like
233:12 - comment and subscribe your support will
233:14 - help keep this channel running
233:16 - all right all right all right threads a
233:19 - thread is an execution path of a program
233:22 - we can use multiple threads to perform
233:25 - different tasks of our program
233:27 - at the same time so when we begin a
233:29 - program we have
233:30 - one thread that is running and that is
233:32 - named the main thread
233:33 - twerk with threading include at the top
233:36 - using system
233:37 - dot threading so let's get the current
233:40 - main thread that is running and i'll
233:41 - assign this to a local variable of the
233:43 - thread data type
233:44 - let's say thread main thread
233:48 - equals thread dot current
233:51 - thread so this will assign the current
233:54 - thread that is running
233:55 - to a local variable named main thread or
233:58 - whatever you want to name it
234:00 - so i'm going to change the name property
234:02 - of main thread to equal
234:04 - let's say main thread
234:07 - and then i'll display this with a
234:08 - rightline statement main thread
234:11 - dot name and the name of this thread is
234:15 - main thread
234:16 - here's our job let's say that we need
234:18 - two timers to run
234:19 - one is counting up from zero to ten and
234:22 - the other is counting from ten to zero
234:24 - one is counting up the other is counting
234:25 - down but we need both of these timers to
234:28 - run
234:28 - concurrently so if we were to write
234:31 - these both on the same
234:32 - thread this is what this would look like
234:34 - and then later on we'll
234:35 - have these timers run on different
234:36 - threads so let's create a countdown and
234:39 - count
234:39 - up method public static
234:43 - void count
234:46 - down and then i'll need a for loop to
234:50 - iterate 10 times
234:51 - 4 and i equals 10
234:56 - then i will continue this as long as i
234:58 - is greater than or
235:00 - equal to zero and then
235:03 - decrement i by one during each iteration
235:06 - and during each iteration let's say that
235:08 - timer number one
235:10 - colon space plus i plus seconds
235:15 - now we can actually have our current
235:17 - thread that is running sleep for a given
235:19 - amount of milliseconds by typing thread
235:21 - dot sleep then pass in how many
235:24 - milliseconds you would like your thread
235:25 - to sleep
235:26 - so 1000 milliseconds for one second and
235:29 - then when we escape our for loop let's
235:31 - display that
235:33 - timer number one is complete
235:36 - and we'll also need a count up method so
235:39 - let's copy countdown
235:41 - paste it change down to up
235:44 - i is equal to zero we will continue this
235:47 - as long as
235:48 - i is less than or equal to ten
235:52 - increment i by one during each iteration
235:55 - timer number
235:56 - two timer number two is complete so
235:58 - let's invoke both
236:00 - countdown and count up
236:04 - so remember that these are both running
236:06 - on the same thread
236:07 - our main thread and when we complete our
236:10 - main thread
236:10 - let's display that main thread
236:14 - dot name plus is
236:17 - complete and i'm just going to hide this
236:20 - line here
236:22 - okay let's go so we have timer number
236:26 - one that's running currently
236:27 - timer number two has not started yet
236:29 - because these are both running on the
236:31 - same thread
236:36 - so timer number one is complete and now
236:38 - we're working on timer number two
236:46 - and now timer number two is complete our
236:48 - main thread is complete
236:50 - so if i would like both of these methods
236:52 - to execute at the same time i would need
236:54 - to create some additional threads
236:56 - and here's how to do so thread let's
237:00 - name this thread 1
237:01 - equals new thread and within the
237:04 - constructor of our thread let's pass in
237:06 - the method we would like to execute
237:09 - thread one is in charge of counting down
237:11 - and thread two is in charge of counting
237:14 - up
237:18 - so each of these threads has a built-in
237:20 - start method which we need to invoke to
237:22 - begin each of these threads
237:24 - thread1.start and thread2.start
237:30 - and we can get rid of these we now have
237:33 - one thread in charge of counting down
237:35 - and the other thread is in charge of
237:36 - counting up
237:37 - and our main thread is still running in
237:39 - the background
237:42 - so our main thread is complete and we
237:44 - have one timer that's counting down
237:46 - and the other that is counting up and as
237:48 - you can see these are both running at
237:50 - the same time concurrently
237:55 - so if you have a method that has
237:56 - parameters there's one additional step
237:58 - let's say that we have i don't know a
238:00 - string name or something
238:02 - we don't necessarily need to use these
238:04 - okay so we can't use these as they are
238:07 - currently
238:08 - so what we're going to do is within the
238:10 - constructor of our threads
238:11 - is pass in what is known as a lambda
238:14 - expression
238:15 - so parentheses arrow then the name of
238:18 - our method
238:19 - countdown parentheses then any
238:22 - arguments if there are any let's say i
238:24 - don't know timer
238:26 - number one i probably won't use this at
238:28 - all but this is just for an example
238:30 - okay let's do the same thing with thread
238:32 - two so we have a lambda expression
238:35 - parenthesis arrow and this is in charge
238:38 - of counting
238:39 - up and passing i don't know timer number
238:41 - two i guess
238:43 - i might have to make a separate video on
238:45 - lambda expressions
238:46 - okay let's try this again so this should
238:49 - work
238:51 - all right there we go so yeah those are
238:55 - threads
238:56 - a thread is an execution path of a
238:58 - program we can use
238:59 - multiple threads to perform different
239:01 - tasks of our program at the same time
239:04 - when we begin a program we have one
239:06 - thread that is running
239:07 - and that is referred to as the main
239:09 - thread so yeah that's multi-threading in
239:11 - c sharp if you would like a copy of this
239:13 - code i will post this to the comment
239:15 - section down below
239:16 - and well yeah that's multithreading in c
239:19 - sharp
239:20 - hey you yeah i'm talking to you if you
239:23 - learned something new
239:24 - then help me help you in three easy
239:26 - steps
239:27 - by smashing that like button drop a
239:29 - comment down below
239:30 - and subscribe if you'd like to become a
239:32 - fellow bro
239:40 - [Music]
239:59 - you