00:00 - how's it going everybody its bro here
00:02 - hope you're doing well and in this video
00:03 - we're going to be discussing and dynamic
00:05 - polymorphism in Java so let's get into
00:08 - it if you find this video helpful please
00:13 - remember to Like comment and subscribe
00:16 - your support will help keep this channel
00:17 - running alright everybody so we're gonna
00:20 - be discussing dynamic polymorphism and I
00:22 - know that sounds somewhat intimidating
00:24 - but it's not too bad once you break down
00:26 - the vocabulary so what we learned in the
00:28 - last video on polymorphism is that
00:31 - polymorphism is a Greek term poly means
00:34 - many and then morph means either shape
00:37 - or form and when you put those two
00:39 - together it means many shapes or forms
00:41 - so picture a Corvette a Corvette can
00:45 - have many shapes and forms it identifies
00:47 - as one or Corvette it also identifies as
00:50 - a car also as a vehicle and it also
00:53 - identifies as an object
00:55 - now the word dynamic that means in
00:57 - programming after the compilation phase
01:00 - after the program compiles so this is
01:02 - during runtime after the program is
01:05 - already running so when you combine
01:07 - these two words together dynamic
01:08 - polymorphism it's the ability of an
01:11 - object to take many shapes or forms
01:13 - after the program is already running so
01:16 - what we're gonna be doing for this video
01:17 - is declaring an object of the animal
01:20 - class which we have to make still and
01:22 - we'll call this object animal and we'll
01:24 - give the user two choices they can have
01:26 - a dog or a cat so we're going to end up
01:31 - either declaring this as an instance of
01:34 - the dog class and use the dog
01:35 - constructor or use the cat constructor
01:38 - but we don't know quite yet so we're
01:41 - going to ask the user during runtime so
01:43 - for now we're only going to declare that
01:46 - we want an animal of the animal class
01:48 - but we don't know if they're gonna be a
01:50 - dog or a cat they're gonna assume one of
01:53 - those forms so let's create a few
01:55 - classes so within your project folder
01:57 - you can right click go to new class and
02:00 - let's create an animal class and this is
02:03 - going to be the parent class for dog and
02:05 - cat so that's good for now let's head
02:08 - back to our project folder and create a
02:11 - dog class
02:14 - so dog is going to extend animal because
02:20 - dog is the child class of animal and
02:22 - let's create a cat class so cat finish
02:28 - cat extends the animal class let's also
02:34 - give these classes maybe just one method
02:37 - so make this a public void method and
02:41 - let's call it speak so this animal is
02:43 - going to say something relevant to the
02:45 - type of animal that it is so maybe cat
02:51 - goes meow and let's do the same thing
02:56 - for dog and I'll just copy this paste it
03:00 - and we'll change cat to dog dog goes
03:05 - bark and let's do the same thing for
03:09 - animal even though we don't have to so
03:12 - what's something generic that all
03:13 - animals say I can't really think of
03:15 - anything so I'm just going to make up
03:16 - something animal goes BRR
03:20 - so the speak method for the dog class
03:23 - and the speak method for the cat class
03:25 - are actually overridden methods they're
03:27 - overriding the speak method of the
03:29 - animal class so it's considered good
03:31 - practice to add a note that says
03:33 - override to let other users know that
03:36 - this is a overridden method and if we
03:39 - instantiate an object of the dog class
03:41 - or the cat class it's going to use its
03:44 - associated speak method compared to the
03:47 - generic speak method for the animal
03:49 - class now let's head back to our main
03:51 - class so what we're going to be doing is
03:54 - prompting the user to type in if they
03:56 - want a dog or a cat and then we're going
03:59 - to instantiate an object of that type of
04:02 - that specific form so let's create a
04:04 - prompt but we'll need a scanner first so
04:07 - let's create an instance of a scanner so
04:09 - scanner let's call it scanner for the
04:10 - lowercase s equals new scanner then
04:14 - within parentheses system dot in and
04:17 - then we'll need to import something so
04:21 - make sure you have this import at the
04:23 - top now let's create a prompt for the
04:25 - user so we'll assist
04:26 - dot out dot print line what animal do
04:30 - you want and then we'll give them two
04:33 - choices so maybe we'll do this on a
04:35 - second line so maybe we'll type in 1
04:42 - equals dog or two equals cat
04:50 - maybe I'll just make this a print
04:52 - statement okay and then let's give the
04:56 - user a choice so we'll assign this to a
04:58 - variable so we'll make this an integer
05:01 - because it's gonna store a number so int
05:03 - choice equals scanner dot next int all
05:10 - right
05:10 - so then we're going to have a few if
05:13 - statements here so if choice is equal to
05:17 - one what we'll do is that we're going to
05:20 - take our animal object and we're going
05:24 - to finish instantiating this so new
05:26 - we're going to use the dog constructor
05:29 - we're going to construct this animal as
05:31 - a dog and then we'll have this animal
05:34 - use its speak function so this is going
05:38 - to be an overridden method it's going to
05:41 - use the specific overridden method for
05:44 - dogs let's do the same thing for the cat
05:46 - so we'll change this to an else if
05:50 - statement choice equals to animal equals
05:54 - new cat we'll use the cat constructor
05:57 - the animal will still use its speak
05:59 - method and then else they must have
06:02 - typed in something wrong we'll Stan
06:06 - shape this with the animal class so new
06:11 - animal use the animal constructor system
06:16 - that out dot print line that choice was
06:19 - invalid and then maybe we'll use the
06:22 - animal dot speak method as well alright
06:27 - let's test this what animal do you want
06:30 - let's pick a dog I like dogs dog goes
06:33 - bark and let's try it again what animal
06:37 - do you want I want a cat this time cat
06:39 - goes meow
06:40 - and let's try this one last time let's
06:43 - make up a random number I like the
06:46 - number 42 that choice was invalid animal
06:49 - goes BRR
06:50 - so that's one of the benefits of dynamic
06:52 - polymorphism you can declare an object
06:54 - and make space for it in memory even if
06:57 - you don't know what type of object you
06:59 - want quite yet so for example we said
07:02 - that we want an animal and we're going
07:04 - to make room in our program for an
07:06 - animal but we don't know quite yet what
07:08 - kind of animal it's gonna be and in our
07:09 - case we're not sure if this animal is
07:11 - going to be a dog or a cat so here's a
07:14 - few other examples of dynamic
07:16 - polymorphism so do you remember and
07:18 - pretty much any game from the Pokemon
07:20 - series you had to choose if you were a
07:22 - boy or a girl
07:23 - well you could declare that your data
07:25 - type is a human as a placeholder but
07:28 - you're going to use the appropriate game
07:30 - sprite for a boy or a girl once you make
07:33 - your decision otherwise let's take world
07:35 - of warcraft so you have to pick a
07:37 - character class but when you first
07:39 - create your character you don't have one
07:40 - picked out quite yet so you have to
07:42 - later decide if this character is going
07:44 - to be a paladin a hunter a mage etc and
07:48 - then once this object does assume a form
07:51 - during a runtime it's going to inherit
07:53 - everything from the parent classes and
07:55 - if there is any methods that are
07:57 - overridden they're going to use these
07:59 - overridden methods in place of any
08:02 - previous methods that they might have
08:03 - had so that's the basics of a dynamic
08:06 - polymorphism if you want a copy of all
08:08 - this code I'll post all of this in the
08:10 - comments down below but well yeah that's
08:12 - the basics for dynamic polymorphism in
08:15 - Java hey you yeah I'm talking to you if
08:19 - you learn something new then you can
08:21 - help me help you in three easy steps
08:25 - by smashing that like button drop a
08:27 - comment down below and subscribe if
08:29 - you'd like to become a fellow grow
08:32 - [Music]