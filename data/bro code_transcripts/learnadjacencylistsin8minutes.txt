00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well and in this
00:03 - video i'm going to explain adjacency
00:05 - lists in computer science so sit back
00:08 - relax and enjoy the show
00:10 - all right what's going on everybody
00:12 - adjacency list an adjacency list is an
00:14 - array or an array list made up of linked
00:17 - lists each element is a separate linked
00:20 - list and each linked list can contain
00:22 - nodes and each linked list has a unique
00:25 - node at the head and basically speaking
00:28 - to represent a graph all adjacent
00:30 - neighbors to a node are added to that
00:32 - node's linked list if we add an edge we
00:35 - just add the address of that node to the
00:37 - tail so let's begin let's create two
00:39 - classes graph and node
00:42 - file new class this will be graph
00:45 - finish
00:46 - then file new class
00:49 - node
00:51 - let's say we have some data maybe just a
00:53 - single character char
00:55 - data
00:56 - and we'll create a constructor
00:58 - and then pass in some data
01:00 - char
01:01 - data
01:02 - this dot data equals data
01:05 - within our graph class we need to create
01:07 - an array list of linked lists
01:10 - array
01:11 - list and the data type of what's going
01:13 - to be stored are linked lists
01:16 - now we need a data type for our linked
01:18 - lists what are the linked lists going to
01:20 - store well they're going to store nodes
01:23 - let's name this array list just a list
01:25 - for adjacency list
01:28 - and let's create a graph constructor
01:31 - and we will instantiate our adjacency
01:34 - list a list equals new
01:36 - array
01:38 - list
01:40 - okay let's declare some methods we'll
01:42 - need an add node method so public void
01:45 - add node
01:47 - and there is one parameter a node of the
01:50 - node data type
01:52 - we'll need to add an edge
01:55 - public void add edge
01:57 - we'll need two indices a source and a
02:00 - destination
02:01 - into source
02:03 - int destination
02:05 - we'll be able to check an edge
02:07 - public void
02:09 - check edge
02:11 - again we'll need a source and
02:12 - destination indices
02:14 - and let's print our graph
02:16 - public void print
02:20 - all right now let's head to our main
02:21 - class and instantiate our graph
02:24 - graph
02:24 - graph equals new graph
02:28 - we're going to reuse a lot of the same
02:29 - code from the previous topic on
02:31 - adjacency matrices so let's add some
02:33 - nodes graph dot add node and i will pass
02:38 - in an anonymous node new node
02:42 - and we need some data
02:43 - so let's pass in the letter a
02:46 - let's copy this and create four
02:47 - additional nodes
02:50 - so
02:51 - b
02:52 - c
02:53 - d
02:53 - and e
02:55 - and we need to create some edges again
02:57 - i'm using the edges from the previous
02:59 - topic so graph dot add edge each of
03:02 - these nodes has an index number the
03:04 - first will be zero the second will be
03:06 - one then two
03:08 - three
03:09 - four if i need an edge between nodes a
03:11 - and b the index and node a is zero
03:14 - that's the source and the destination is
03:16 - b that has an index of one so zero one
03:20 - and let's fill in a few others how about
03:23 - one
03:24 - and two
03:26 - one
03:27 - and four
03:31 - two three
03:35 - two
03:36 - four
03:38 - four
03:39 - zero
03:41 - and four
03:42 - two
03:45 - okay so then at the end let's print our
03:47 - graph but we have not yet filled in the
03:48 - methods so graph dot print
03:51 - okay so let's head to our graph class
03:53 - and fill in some of these methods let's
03:55 - begin with add node so in order to add a
03:58 - node we first need to create a new
03:59 - linked list
04:01 - so linked
04:02 - list the data type of this linked list
04:05 - is nodes
04:06 - and let's name this current list
04:09 - equals new
04:11 - linked
04:12 - list
04:14 - after we create this new linked list we
04:16 - can add a node to the linked list
04:18 - current list dot add node
04:22 - whenever we create a new node we will
04:24 - also create a new linked list and the
04:26 - new node will be at the head of the
04:28 - linked list and lastly we just need to
04:31 - add this linked list to our array list
04:33 - alist
04:35 - dot add
04:36 - current list
04:38 - okay then let's fill in the add edge
04:40 - method i will declare a linked list and
04:42 - i'll just copy this linked list current
04:44 - list
04:45 - equals to add an edge to our adjacency
04:48 - list we first need to get a linked list
04:50 - from the arraylist so let's store that
04:53 - within currentlist currentlist equals to
04:56 - access our adjacency list we will type
04:59 - a list dot get
05:01 - and then an index and that will be
05:03 - source
05:04 - this will return a linked list it's kind
05:07 - of like it's in two layers we'll also
05:09 - need to know our destination node
05:11 - so let's say node
05:13 - destination node
05:15 - equals
05:16 - then we'll need to find the array list
05:18 - that this node is located at the head
05:20 - adjacency list dot
05:23 - our destination index
05:25 - then follow this with get zero that is
05:28 - the head of our linked list so this is
05:31 - the address of the node we would like to
05:33 - link to and now we just need to add this
05:35 - node to the tail of our current list
05:38 - current list dot add destination node
05:43 - and that's it we're taking a node and
05:45 - adding it to the tail of a linked list
05:48 - you can shorten this code if you would
05:49 - like to do so on less steps you would
05:51 - just take this portion
05:54 - and replace currentlist with
05:56 - alist.getsource then you technically
05:58 - don't need this line but it's a little
06:00 - more difficult to read so you do you
06:02 - okay this time let's check an edge so we
06:04 - can copy these two lines of code
06:07 - paste it what we're going to do is
06:09 - iterate over our current linked list and
06:11 - see if there's a match between a node
06:13 - and our destination node so let's use a
06:16 - for each loop and we will iterate over
06:18 - all of the nodes within our current
06:20 - linked list
06:21 - so the data type is node
06:24 - node
06:25 - in our current list with an if statement
06:28 - let's check to see if the current node
06:32 - that we're looking at is equal to our
06:34 - destination node are these addresses the
06:36 - same
06:37 - if so then return true if we escape the
06:40 - for loop that means we did not find the
06:42 - node we were looking for so let's return
06:44 - false and the return type of this method
06:46 - is going to be boolean okay we have one
06:48 - more method we just need to print our
06:50 - adjacency list we'll use nested for each
06:53 - loops
06:55 - so we need to iterate over all of the
06:58 - linked lists within our array list
07:00 - so for linked list
07:03 - the data type is node
07:05 - and let's name this current
07:08 - list
07:09 - iterate over every linked list in our
07:11 - array list
07:13 - and then we'll need another for each
07:14 - loop
07:15 - for every node node in current list
07:20 - then let's use a print statement
07:24 - print the node's data
07:26 - then maybe i'll add an arrow for flavor
07:28 - to represent a linked list
07:30 - then outside of our inner for loop let's
07:33 - print a new line
07:34 - and that should be everything that we
07:36 - need so let's run this
07:38 - all right so there is our adjacency list
07:41 - basically an adjacency list is an array
07:43 - or an array list made up of linked lists
07:46 - each linked list has unique node at the
07:48 - head and all adjacent neighbors to that
07:50 - node are added to the node's linked list
07:53 - at the tail the runtime complexity to
07:55 - check an edge is big o of the v for the
07:58 - number of vertices it's because we need
08:00 - to traverse a linked list linearly to
08:02 - find a matching node and the space
08:04 - complexity for an adjacency list is big
08:07 - o of v plus e v as in the number of
08:09 - vertices e as in the number of edges so
08:12 - yeah that's an adjacency list it's an
08:14 - array or an array list made up of linked
08:17 - lists it's used to represent a graph if
08:19 - you would like a copy of this code i'll
08:21 - post this to the comment section down
08:22 - below and well yeah those are adjacency
08:25 - lists and computer science