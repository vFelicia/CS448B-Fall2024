00:00 - hey y'all what's going on everybody it's
00:02 - you bro hope you're doing well and in
00:03 - this video we're going to create a
00:05 - number guessing game in c so sit back
00:08 - relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like comment and subscribe
00:16 - your support will help keep this channel
00:18 - running hey everybody so now that we
00:21 - know how to generate some pseudo-random
00:23 - numbers in c i thought this would be a
00:25 - good opportunity for us to create a
00:27 - number guessing game if we're working
00:29 - with pseudorandom numbers be sure to
00:30 - include at least these three header
00:32 - files at the top of your program so
00:34 - let's generate two constants min and max
00:38 - const int and a naming convention for
00:41 - constants is to make all of the letters
00:43 - uppercase
00:44 - so minimum will be the minimum number
00:47 - that we will generate when we generate a
00:49 - random number so let's pick a number
00:51 - between maybe 1 and 100 so min will be 1
00:55 - and max will be 100 but feel free to
00:58 - take the liberty to choose some other
00:59 - numbers and we'll need int guess to
01:02 - store a user's guess
01:04 - int guesses to keep track of the guesses
01:08 - and int
01:09 - answer okay now if we're working with
01:11 - random numbers we'll want to create a
01:14 - seed and to do that we can actually use
01:16 - the current time so use the s rand
01:18 - function
01:19 - and pass in time pass in zero
01:22 - so this uses the current time as a seed
01:28 - to generate some random numbers
01:30 - and if we need a random number between
01:32 - these two constants min and max this is
01:36 - what we can do
01:37 - so we will assign answer set this equal
01:40 - to
01:41 - call the rand function
01:42 - and use the modulus operator
01:45 - and set this to max and then we will add
01:48 - min as an offset
01:50 - so this will generate a random number
01:53 - between these two constants 1 and 100 or
01:56 - some other numbers if you have something
01:58 - different so this line of code will
02:01 - generate a random number
02:04 - between
02:05 - min
02:06 - and max now before we actually move on
02:09 - let's test this just to be sure that
02:11 - everything's working
02:12 - so let's print whatever the answer is so
02:15 - we're displaying an integer we are
02:17 - displaying
02:18 - answer
02:19 - and let's see what this is
02:22 - so my answer this round is 73 if i run
02:25 - this again it is 93. now if i change
02:28 - these values we will adjust the range in
02:30 - which some random numbers will generate
02:32 - so if i set min to 100 and max to 1000
02:36 - that should change the range of numbers
02:39 - and this time i have 334 but i'll change
02:42 - this back to 1 and 100
02:44 - okay so we know that we're generating a
02:46 - random number so let's move on let's
02:49 - create a do while loop so it's going to
02:51 - take at least one guess in order for
02:53 - somebody to guess the correct answer
02:56 - so do curly braces we'll add a while and
03:00 - check a condition at the end and the
03:02 - condition is guess
03:04 - does not equal
03:06 - answer so let's create a prompt and ask
03:09 - the user to enter a guess
03:11 - enter a guess
03:14 - and we will use scanf to accept some
03:16 - user input so this is an integer
03:20 - and we are storing this within
03:22 - guess so address of operator guess
03:25 - now that we have our user's guess let's
03:27 - compare it to our answer so we'll use an
03:30 - if statement and check to see if guess
03:33 - is greater than answer so that means a
03:36 - user guessed a number that was a little
03:38 - too high
03:39 - so let's print a message to let the user
03:42 - know
03:43 - to
03:44 - hi
03:47 - and then we can use an else if statement
03:49 - else if
03:51 - guess
03:52 - is less than answer well then their
03:54 - guess was too low
03:58 - print
03:58 - to
03:59 - low
04:01 - so if our guess is not greater than the
04:03 - answer or less than the answer that
04:05 - means they must have got it right
04:07 - so within an else block let's print
04:12 - correct so then after our if else
04:16 - statements let's increase guesses by one
04:19 - guesses plus plus
04:21 - the very best possible score a user can
04:23 - get is one if they guess it on the first
04:25 - try so before we finish a while loop we
04:27 - will increment guesses by one
04:30 - so then once we escape our while loop
04:32 - let's print the user's final score
04:35 - so we will print
04:37 - the answer
04:39 - this is an integer
04:42 - and we are displaying
04:44 - answer
04:48 - and we will display the guesses it took
04:51 - so
04:51 - guesses
04:53 - and display the value found within
04:54 - guesses
04:56 - and this part isn't necessary but i like
04:57 - to add some text decorations
05:00 - so maybe i'll add a bunch of asterisks
05:02 - to make it look nice
05:06 - let's run it
05:09 - enter a guess i'll guess something right
05:10 - in the middle between so maybe 50.
05:13 - so that guess was too low so maybe 75
05:17 - okay that was too high so our numbers
05:19 - between 50 and 75 how about 62
05:24 - that's too low so it's between 62 and 75
05:28 - how about 69
05:30 - that's still too low so between 69 and
05:32 - 75 maybe 72
05:35 - that's still too low so it's between 72
05:38 - and 75
05:39 - 73
05:40 - all right that was the right answer i'm
05:43 - just gonna fix one thing real quick uh
05:45 - let's add a new line here okay let's try
05:48 - this again okay until i guess i'll try
05:50 - 50 again that's too high maybe 25
05:54 - that's still too high what about 12
05:56 - 2 low
05:57 - maybe 18
05:59 - 2 low 21
06:01 - that's still too low 23 too low 24
06:05 - and 24 was the correct answer all right
06:07 - everybody so i thought that would be a
06:09 - fun guessing game we could create for
06:11 - practice if you would like a copy of all
06:13 - this i'll post this to the comment
06:15 - section down below and well yeah that is
06:17 - a simple number guessing game in c