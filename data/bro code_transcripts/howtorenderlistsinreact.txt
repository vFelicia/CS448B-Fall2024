00:00 - hey everybody I have a huge video for
00:02 - you today today we're going to talk
00:04 - about rendering lists in reactjs this
00:07 - can be pretty complex we'll go through
00:08 - it step by step what we'll do in this
00:10 - tutorial is create a new component to
00:12 - hold our list let's go to our source
00:14 - folder create a new file I'll name this
00:17 - component list this will be a jsx file
00:22 - to finish creating this component this
00:24 - will be a function based
00:26 - component with the name of list then be
00:30 - sure to export it export default
00:35 - list we'll start with something very
00:37 - simple we'll create an array of fruit
00:40 - this will be const fruits equals think
00:44 - of some fruit for me I'll pick an
00:47 - apple
00:49 - orange
00:52 - banana coconut and a
00:57 - pineapple let me show you what would
00:59 - happen if we were to return our array
01:02 - within our list component we will
01:04 - return our array of fruits but we will
01:08 - need to import it going back to the app
01:11 - component we will import our list
01:14 - component import list from a
01:20 - location SL list.
01:24 - jsx we need a return statement to be
01:26 - sure you have one we will return a list
01:34 - component and here is our list let me
01:36 - zoom
01:37 - in it's all one big string Apple orange
01:41 - banana coconut pineapple heading back to
01:43 - our list component we need to convert
01:45 - our array of strings into an array of
01:48 - list item elements we can use the
01:50 - built-in map method to do that we'll
01:53 - create a new array of list items the map
01:56 - method is going to return a new array
01:58 - after running it through a function
01:59 - function const list items equals take
02:04 - our original array of fruits use the
02:07 - built-in map method then we'll either
02:10 - pass in a callback a function expression
02:13 - or an arrow function we'll use Arrow
02:16 - functions because I like Arrow functions
02:18 - for every fruit in fruits Arrow meaning
02:22 - do this we'll create a new list item
02:28 - element that has the text of our fruit
02:32 - the array item we're not going to return
02:34 - our fruits array we're going to return
02:36 - an unordered
02:39 - list we're going to insert some
02:42 - JavaScript with curly braces we'll
02:44 - include our list items it's an array of
02:47 - list items and here's our array whoops
02:51 - but I forgot to enclose fruit with curly
02:56 - braces my mistake they are much better
02:59 - better or if you prefer we can turn this
03:02 - unordered list into an ordered list with
03:05 - a pair of O
03:07 - tags
03:09 - o there they're all numbered that's how
03:11 - to render a simple array if you're
03:13 - working with an array of strings and
03:15 - you'd like to sort this array beforehand
03:17 - you can use the sort
03:18 - method fruits. sort the sort method will
03:22 - sort an array in place however this
03:24 - doesn't work with numbers because we're
03:26 - sorting
03:28 - lexicographically we would treat numbers
03:29 - and symbols as characters more on that
03:32 - later let's go over example two we'll
03:35 - convert our array of strings into an
03:37 - array of objects each object will have a
03:40 - name property and calories calories per
03:44 - serving so let's enclose all of our
03:46 - elements within a set of curly braces to
03:48 - make them
03:55 - objects I'm going to place each of these
03:57 - objects on a new line just so that I can
03:59 - read it more
04:03 - easily each of these objects will have a
04:05 - name property the name property will be
04:08 - set to the original string for our array
04:11 - the first object will have a name of
04:13 - Apple let's add calories too calories
04:15 - per
04:17 - serving I did a quick Google search of
04:19 - some of the calories per serving for
04:21 - these fruits I don't know how accurate
04:23 - these are but they seemed right our
04:25 - first object has a name of Apple
04:27 - calories is set to 95
04:31 - name orange
04:34 - calories
04:37 - 45 name
04:41 - banana calories
04:45 - 105 name
04:51 - coconut coconut
04:54 - calories
04:57 - 159 name pineapp
05:00 - example
05:02 - calories
05:05 - 37 all right we now have an array of
05:08 - objects there's a few changes we're
05:10 - going to make if I run this again our
05:13 - list is in rendering I need to display
05:15 - the name property of each fruit fruit.
05:19 - name
05:20 - property we have one issue behind the
05:22 - scenes I'm going to right click go to
05:25 - inspect then go to
05:28 - console
05:33 - warning each child in a list should have
05:35 - a unique key prop react wants us to
05:38 - assign a key to each list item each key
05:41 - should be unique in my array of objects
05:44 - each fruit has a unique name I could use
05:47 - that we will set the key attribute to
05:50 - equal include some
05:52 - JavaScript fruit. name that warning
05:56 - should go
05:58 - away
06:01 - which it did if there's a possibility
06:04 - that two objects can share the same name
06:06 - you'll want to use some sort of unique
06:08 - ID in a real world scenario if you're
06:11 - pulling data from a database each row of
06:13 - data is going to have some sort of
06:15 - unique ID so we're going to mimic that
06:18 - let's add a new property for an
06:20 - ID ID will be one for Apple these will
06:24 - be in ascending order orange will have
06:27 - an ID of two banana is
06:30 - three coconut is four pineapple is
06:35 - five we'll set the key to be each
06:39 - ID this would be much better than using
06:42 - the name you can have a naming conflict
06:44 - if two objects share the same name like
06:47 - if these were people you could have two
06:48 - people named Bob that warning should be
06:53 - gone which it is react would like a
06:56 - unique key for each item just so it can
06:58 - more easily keep track of items being
07:00 - inserted and removed along with each
07:03 - element I'm going to display the
07:04 - calories next to each
07:06 - element so we'll make a few changes I'm
07:09 - going to put these HTML elements on a
07:11 - new line for
07:12 - readability after the fruit's name I'm
07:15 - going to add a
07:16 - colon a non-breaking space character and
07:20 - Pand nbsp for space oh then not a
07:25 - semicolon forgot about
07:27 - that then we'll ins some
07:30 - JavaScript fruit. calories for the
07:33 - calories of each
07:34 - fruit I'll make it bold I'll enclose our
07:38 - calories with a pair of bold tags which
07:40 - is just
07:47 - B now we're going to sort the items in
07:49 - our list we'll do that before the map
07:52 - method I'm going to sort our array of
07:55 - objects by their name property we'll
07:58 - take fruits
08:00 - use the sort method the sort method will
08:02 - sort an array in place we'll write a
08:05 - custom sorting function we have two
08:08 - parameters A and B A for the first item
08:11 - B for the second then we iterate over
08:14 - the entire
08:15 - array we need an arrow meaning do
08:18 - something to lexicographically sort
08:21 - string properties within an array we can
08:23 - use the following method we'll take the
08:25 - name property of a use the built-in Loc
08:29 - local or local some people say compare
08:33 - method I misspelled
08:35 - that yeah I can't spell
08:38 - compare to b.n name that should sort our
08:43 - array of objects by their name property
08:46 - for reverse order let me turn this line
08:48 - into a comment this is
08:54 - alphabetical for reverse alphabetical
08:58 - order we just have to replace a with B
09:02 - and B with a there pineapple orange
09:05 - coconut banana apple with apple being at
09:07 - the
09:08 - bottom let's sort by
09:11 - calories fruits. sort this one's easier
09:15 - again we have our parameters a comma
09:18 - B Arrow the calories of a a.
09:22 - calories minus b.
09:26 - calories that one's easy we have
09:28 - pineapple at the top followed by orange
09:30 - apple banana
09:31 - coconut this is in numeric
09:34 - order for reverse numeric
09:41 - order reverse
09:43 - numeric or descending you could say the
09:47 - calories of B minus the calories of a
09:50 - now we have coconut at the top with
09:52 - pineapple at the bottom with the least
09:53 - amount of
09:55 - calories in this next section I'm going
09:57 - to demonstrate to you how we can filter
09:59 - objects by a certain criteria we'll
10:01 - filter anything that's greater than 100
10:03 - calories we'll create a new array of
10:05 - fruit that has low
10:07 - calories we'll create a new array const
10:10 - low cal
10:13 - fruit equals take our original array of
10:16 - fruits use the built-in filter
10:21 - method we'll have one parameter of fruit
10:25 - examine each fruit in our array of
10:27 - fruits and Arrow then a condition here's
10:31 - the
10:32 - criteria check the calories property of
10:35 - our
10:37 - fruit if it's less than 100 filter it
10:41 - and add it to a new array instead of
10:44 - displaying our array of fruits let's
10:46 - display our new array of low calorie
10:48 - fruit oh that should be plural low cal
10:50 - fruits when we create our array of list
10:53 - items replace fruits with low cal fruits
10:57 - and any instance of fruit with local
11:00 - fruit
11:02 - singular so we have three instances of
11:04 - fruit let's replace
11:07 - those let me clean this up a
11:10 - little feel free to pause the video if
11:12 - you need to write this
11:14 - down we have three fruits that are low
11:16 - calories the calories is less than 100
11:20 - let's find any high calorie
11:24 - fruits we can just copy this line of
11:26 - code paste it but change the condition
11:30 - examine the calories of each fruit
11:32 - filter it out if the calories are
11:34 - greater than or equal to
11:36 - 100 the name of this array will be high
11:39 - Cal
11:41 - fruits replace low calow fruits with
11:43 - high Cal
11:45 - fruits replace low cal fruit with high
11:49 - Cal fruit
11:51 - singular and do that for the other
11:53 - instances as
11:56 - well there we are we have two fruits
11:58 - that are high in calories bananas and
12:01 - coconuts that is US using the filter
12:03 - method to filter out list items let's
12:06 - replace High Cal fruits with fruits high
12:09 - Cal fruit with fruit to display our
12:11 - original
12:18 - array for the next part of this lesson
12:20 - we're going to transform this list
12:22 - component so it's reusable with
12:24 - different lists currently the way that
12:25 - we set this up is that each list
12:27 - component that we create has its own
12:29 - list of fruit so we're going to make
12:32 - some
12:32 - changes let's cut our list of
12:36 - fruits going to the parent component of
12:40 - app we'll paste our list of fruits then
12:43 - pass it as props to our list
12:49 - component with our list component we
12:52 - will have a key of items equals insert
12:57 - some JavaScript our list of fruits let's
13:01 - also add a category
13:03 - key category equals for my category
13:08 - let's say fruits eventually we'll add an
13:11 - H3 heading we're now going to send all
13:14 - of this data to the list component but
13:17 - we have to set up props within the list
13:20 - function we have a parameter of
13:24 - props we'll access the items of props to
13:27 - get our fruit
13:30 - we'll create const item list equals not
13:35 - to be confused with list items list
13:38 - items is what we get after we map
13:41 - it item list equals props do items and
13:46 - remember that items is our fruits
13:49 - array replace fruits with item
13:53 - list replace fruit with
13:56 - item do that here here and
14:00 - here there's our list
14:03 - again if you're going to sort or use the
14:05 - filter method be sure it's item list not
14:08 - fruits because now list is a reusable
14:11 - component I'll add our category two
14:14 - that's stored within props const
14:17 - category equals props do
14:23 - category currently we're returning a
14:25 - single ordered list I'll also include an
14:27 - H3 element
14:32 - include some JavaScript we need curly
14:34 - braces add our
14:36 - category however with our return
14:38 - statement we can only return a single
14:40 - element or many elements that are
14:42 - wrapped within a fragment let's create a
14:45 - fragment that will enclose all of our
14:55 - markup there we
14:57 - are going back to our app component
15:00 - let's create a new list just to make
15:02 - sure that our list component is
15:05 - reusable let's copy our array of
15:09 - fruits paste
15:11 - it we'll create an array of
15:18 - vegetables the IDS will be 6 7 8 9
15:23 - 10 the name of my first item will be
15:27 - potatoes calorie 110 per
15:30 - serving
15:32 - celery calories will be
15:37 - 15 carrots calories
15:42 - 25 corn calories
15:47 - 63
15:50 - broccoli calories
15:53 - 50 now we should be able to create a new
15:55 - list
15:57 - component within our return turn
15:58 - statement we're going to need a fragment
16:06 - again we'll return a second list item
16:10 - component the items will be vegetables
16:14 - the category will be a string of
16:17 - vegetables boom there we go here's our
16:20 - second list
16:21 - component so our list component is now
16:24 - reusable we can pass in many different
16:26 - types of lists to make this look better
16:29 - let's apply some CSS styling we'll have
16:31 - to set a class name
16:34 - first our H3 element will have a class
16:37 - name equal
16:39 - to list-
16:43 - category our ordered list will have a
16:46 - class name of list
16:51 - items all right going to our CSS
16:54 - stylesheet index.css let's work on our
16:57 - list category
16:59 - first use dot to select a class list
17:03 - category I'm just going to run through
17:05 - these real quick I'm going to make sure
17:08 - I'm zoomed in to 100 because I was
17:10 - zoomed in
17:11 - beforehand font size 2.5
17:16 - em font weight will be
17:22 - bold pick a
17:24 - color I'm going to stick with hsl values
17:28 - I'll set the lightness to be
17:31 - 20% I'll add a little bit of margin on
17:33 - the
17:36 - bottom 10
17:39 - pixels text align
17:46 - Center I'll add a
17:48 - border three pixel
17:52 - solid I'll add a border radius to round
17:55 - the
17:57 - corners
18:02 - and a background
18:05 - color pick a color again I'll use
18:11 - hsl this one I pre-picked already
18:15 - 185
18:17 - 100%
18:19 - 50% that's not a bad looking color pick
18:21 - whatever color you would like let's work
18:24 - on our list item
18:25 - elements we need to select the class of
18:28 - list
18:29 - items do list items select each list
18:33 - item within this
18:36 - class I'll increase the font size to be
18:39 - 2
18:42 - em I'll remove the list style but you
18:45 - don't have
18:46 - to list style will be
18:50 - none pick a color again I'm using hsl
18:57 - values I'll set the lightness to be
19:02 - 25% text align
19:07 - Center and margin will be
19:11 - zero all right now when I hover over one
19:14 - of these list items I'll apply a hover
19:18 - effect take our class list items take
19:21 - each list item access the hover sudo
19:24 - class I'll change the brightness the
19:27 - color will be something a little bit
19:29 - brighter I'll set the lightness to be
19:32 - 45% and then the cursor will be a
19:37 - pointer yeah not bad that's how we can
19:40 - apply some CSS styling to list
19:42 - components all right heading back to our
19:44 - app component what if we have an empty
19:47 - list for example with our fruits I'm
19:49 - going to cut
19:51 - it we can use conditional rendering to
19:54 - render our list only if there's elements
19:57 - let's put put those back we're going to
20:00 - write some JavaScript we need some curly
20:02 - braces let's take our array of fruits
20:06 - access the length
20:08 - property is it greater than
20:11 - zero question mark if it is we'll return
20:15 - our list
20:18 - component colon if it's false we can
20:21 - return null let's do that with our
20:24 - vegetables
20:25 - too take our array of vegetables
20:28 - AIS the length property is a greater
20:31 - than zero tary operator if it is return
20:35 - our list
20:38 - component if not we can return
20:40 - null if one of these lists doesn't have
20:43 - any elements we won't render that
20:51 - component there is a short hand to the
20:53 - tary operator we don't need to write or
20:56 - else return null what we'll use instead
20:59 - of the trary operator is the and logical
21:01 - operator we can effectively Short
21:04 - Circuit the first
21:05 - expression then we don't need colon null
21:09 - it's a little less
21:13 - code our list component will always be
21:16 - true because it
21:18 - exists however the first expression
21:20 - might not be so if this condition is
21:24 - false we don't render this if it is true
21:27 - we will render this let's try that again
21:31 - let's remove these
21:33 - elements we don't display the fruits
21:35 - list
21:36 - component and we will not display the
21:38 - vegetable list
21:40 - component this is known as short
21:43 - circuiting one thing to consider what if
21:46 - our category is missing let's remove our
21:49 - category from
21:50 - fruits well I would like to add some
21:52 - sort of placeholder here or what if one
21:55 - of these arrays was
21:57 - missing well nothing displays not even
22:00 - vegetables we should add some default
22:02 - props in case one of these properties is
22:04 - missing so going back to our list
22:07 - component before we export it let's set
22:10 - up some default props take our component
22:13 - name list. default props equals within a
22:19 - set of curly braces let's set our
22:22 - category category
22:25 - property to be category as a placeholder
22:31 - if for some reason these components
22:33 - don't have a
22:34 - category we'll add a placeholder of
22:36 - category which at least looks better if
22:39 - we're missing an array that's a bigger
22:41 - problem let me go to inspect then
22:48 - console we're trying to map something
22:51 - that's undefined we have no array to
22:53 - work with so nothing is rendering so as
22:56 - a backup Within default props let's set
23:00 - our items to be an empty
23:02 - array items will be an empty
23:07 - array if one of these arrays was missing
23:09 - for some
23:11 - reason at least the category is
23:13 - displayed as well as the subsequent
23:15 - components at least something will
23:18 - display okay then lastly as good
23:20 - practice if we're accepting props we
23:23 - should set up prop types I'll walk you
23:25 - through it if you're just joining us
23:27 - with prop types if the incorrect data
23:30 - type is passed into props when we debug
23:33 - it'll give us a
23:34 - warning to use prop types we have to
23:37 - import it at the top of our list
23:39 - component we will
23:41 - import prop
23:43 - types
23:45 - from prop
23:49 - types take our component of
23:52 - list
23:54 - list. prop
23:56 - types
23:59 - equals set of curly braces for our
24:03 - category this will be a
24:05 - string category colon
24:08 - space prop types do
24:13 - string add a comma for another line okay
24:16 - this is where it's going to get tricky
24:18 - we have an array of
24:21 - objects we'll access the items
24:24 - property items colon
24:26 - space to types I'm going to move down a
24:30 - little
24:33 - bit dot we have an
24:35 - array
24:37 - array of we have an array of
24:41 - objects prop
24:43 - types do shape method we have to define
24:47 - the shape of each object each object is
24:50 - going to have its own data types we have
24:53 - a number string then
24:55 - number we're defining an object we need
24:57 - a set of curly
24:58 - braces ID
25:01 - colon prop types.
25:05 - number comma for another
25:08 - property I'll put the next one on a new
25:10 - line for
25:14 - readability we have a name property
25:16 - which will be a string prop types.
25:23 - string then
25:26 - calories
25:28 - prop types.
25:31 - number and that's
25:34 - it let's head back to our app
25:37 - component our prop types should raise a
25:39 - warning if some of our data is of the
25:41 - wrong data type for example let's say
25:44 - that calories is now the string Apple
25:48 - maybe somebody mistyped it
25:50 - twice you can see that right here it
25:52 - changed let's go to
25:54 - inspect
25:56 - console
25:58 - and here's our warning because we have
25:59 - prop type set up invalid prop items
26:03 - index zero calories of type
26:05 - string if we didn't have prop type setup
26:08 - we wouldn't receive that warning this
26:10 - may go unnoticed it is good practice if
26:12 - you're accepting props to also set up
26:14 - prop types it's a little more
26:16 - complicated if you have an array of
26:18 - objects but here are the steps all right
26:20 - everybody I know this was a massive
26:22 - topic thank you all for watching feel
26:24 - free to take some time to study and work
26:26 - with this before moving on to the next
26:28 - topic if you would like we did Cover a
26:30 - lot of material and well those are
26:32 - various ways in which we can render
26:34 - lists and
26:38 - react