00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - in this video i'm going to explain the
00:05 - stack data structure
00:06 - so sit back relax and enjoy the show
00:11 - if you wouldn't mind please like comment
00:13 - and subscribe
00:14 - one like equals one prayer for the
00:16 - youtube algorithm
00:18 - all right everybody stacks a stack is a
00:21 - lifo data structure lifo is an acronym
00:24 - for last in first out this allows us to
00:28 - store
00:28 - objects into a sort of vertical tower
00:31 - like a stack of books or a stack of cds
00:34 - we use the push method to add objects to
00:37 - the top of the stack
00:38 - and the pop method to remove objects
00:40 - from the top
00:41 - so here's a real life example of us
00:44 - creating a stack
00:45 - data structure after declaring our stack
00:47 - we can add
00:48 - objects to our stack the objects that
00:50 - we'll be adding are
00:51 - various video games to add an object to
00:54 - our stack we use the push method
00:56 - like we're pushing something onto our
00:58 - stack so let's push minecraft onto the
01:00 - bottom of our stack
01:02 - and then next we'll add skyrim then
01:05 - maybe some doom
01:07 - then borderlands and then final fantasy
01:09 - vii
01:10 - so this is a lifo data structure last in
01:13 - first out to access objects on the
01:16 - bottom of our stack
01:17 - we first need to pop or remove objects
01:19 - from the top of our stack
01:21 - if i need to access minecraft on the
01:23 - bottom i don't want to pull this
01:24 - from the bottom because everything on
01:26 - the top is going to fall right
01:28 - so that's kind of the concept so in
01:29 - order to access minecraft on the bottom
01:32 - i need to pop or remove objects from the
01:34 - top in order to access
01:36 - objects on the bottom so in order to
01:38 - access minecraft i need to remove all
01:40 - the games on the top of my stack
01:42 - so that's kind of the point of a stack
01:44 - data structure
01:45 - now let's create a stack the language
01:47 - you use really doesn't matter for the
01:49 - most part you can implement a stack in
01:51 - java
01:52 - python c plus plus c is sharp the
01:55 - language really doesn't matter
01:56 - however the syntax might be slightly
01:58 - different i just so happen to be using
02:00 - java so i'll stick with that
02:02 - now to push objects onto our stack we
02:04 - first need to declare our stack and
02:06 - instantiate it so let's do that
02:08 - stack then we will list the data type of
02:11 - the objects that we will be adding
02:13 - to our stack luckily strings are a type
02:15 - of object and they're fairly simple
02:17 - so we will create a stack that can store
02:20 - strings the names of video games
02:22 - and i will name the stack step to keep
02:24 - it simple stack
02:25 - static equals new stack and i will list
02:29 - the data type and then add a constructor
02:31 - okay so we now have a stack data
02:34 - structure now with stacks they have
02:36 - five unique methods let's take a look
02:39 - now with stacks
02:40 - we can push an item onto the top of our
02:42 - stack
02:43 - we can pop an item from the top of the
02:45 - stack we can
02:46 - peek at the item at the top of the stack
02:49 - we can check to see if our stack is
02:51 - empty
02:52 - and we can search our stack for an item
02:55 - so those are
02:55 - five unique methods available to stacks
02:58 - let's first check to see if our stack is
03:00 - empty
03:01 - so let's use system.out.printline stack
03:04 - dot empty method and currently
03:07 - our stack is empty that is true but
03:09 - that'll change soon
03:10 - so let's push some games onto the top of
03:13 - our stack
03:13 - so we type the name of our stack stack
03:16 - and use the push method then pass in
03:18 - our object so we will pass in a string
03:21 - the name
03:22 - of a video game let's add minecraft
03:24 - first
03:26 - then let's add
03:30 - skyrim
03:33 - then doom you can pick your own games if
03:36 - you want
03:36 - i don't care then borderlands
03:42 - and then final fantasy vii
03:46 - ffviii okay let's check to see if our
03:49 - stack is empty now
03:50 - so let's move this line of code to the
03:53 - bottom
03:55 - and run it so our stack is no longer
03:58 - empty
03:58 - this returns false so with the stack we
04:02 - can at least
04:02 - take a look at the items within the
04:04 - stack without removing them
04:06 - so let's use system.out.printline and i
04:09 - will print
04:10 - my stack so this will print all of the
04:13 - objects within my stack beginning with
04:15 - minecraft then skyrim
04:17 - doom borderlands and final fantasy vii
04:19 - however
04:20 - by printing our stack we're not removing
04:22 - items from the stack
04:24 - so that's completely fine so this time
04:26 - let's
04:27 - pop the topmost item from our stack by
04:30 - using the pop method
04:31 - stack dot pop and we don't need to list
04:35 - an object
04:35 - because pop will always remove the top
04:38 - most
04:38 - object from our stack so now final
04:41 - fantasy
04:42 - will be missing from the top of our
04:44 - stack so if i was to repeat this again
04:47 - well then this will remove borderlands
04:50 - and then doom then skyrim
04:55 - and then lastly minecraft then if you
04:58 - pop again
04:58 - this is what happens an exception
05:02 - empty stack exception so that's
05:04 - something to keep in mind
05:05 - now when you pop the topmost object from
05:07 - a stack
05:08 - this will actually return that object if
05:11 - you need
05:12 - the object from the top of the stack you
05:14 - can pop it
05:15 - and then assign it to something so let's
05:17 - say string
05:19 - my fave game equals
05:22 - stack dot pop and then i will print my
05:26 - fave game and this will print final
05:29 - fantasy 7
05:30 - and it should be missing from the top of
05:32 - my stack if i was to print my stack
05:35 - so final fantasy vii is no longer in my
05:38 - stack because i popped it
05:39 - then assigned it to the string variable
05:42 - of my favorite game
05:43 - so in order to take the top most object
05:46 - from a stack
05:47 - you use pop and then assign it to
05:49 - something if you ever need to take a
05:51 - look at what the
05:52 - top most object is within your stack you
05:54 - do not want to use pop because
05:56 - that will remove it you can instead use
05:58 - the peak method of stacks
06:00 - so what i'll do is system.out.printline
06:03 - stack.peak and then immediately follow
06:06 - this
06:06 - with printing my stack so let's run this
06:09 - so the top most item within my stack
06:12 - after using
06:13 - the peak method is final fantasy 7 then
06:16 - after printing my stack
06:18 - final fantasy 7 is still at the top of
06:20 - my stack
06:21 - so if you ever need to take a look at
06:23 - the object that is at the top of the
06:25 - stack
06:25 - without removing it you can simply use
06:27 - the peak method
06:29 - if you need to search for an object
06:31 - within the stack you can use the search
06:33 - method let's print
06:34 - stack dot search and we pass in
06:37 - our object as an argument so the very
06:40 - first item in a stack
06:42 - will have a position of one you would
06:44 - think it's zero but it's actually one
06:46 - now let's find borderlands that will be
06:49 - in position
06:50 - two from the top then doom would be
06:53 - of course three skyrim is four
06:56 - then minecraft is five so if you search
06:59 - for an item that is not within the stack
07:02 - like fallout 76 well then
07:05 - this will return negative one if search
07:08 - does not find
07:08 - this object within your stack it will
07:11 - return negative one
07:12 - so with stacks we can actually run out
07:14 - of memory so let's add
07:16 - like a billion copies of fallout 76 we
07:19 - find bethesda's
07:20 - warehouse of unsold fallout 76 games so
07:23 - we'll create a stack of a billion copies
07:25 - of fallout 76
07:27 - we can do this using a for loop didn't i
07:30 - equals zero
07:31 - as long as i is less than like one
07:34 - billion
07:36 - that's probably close enough increment i
07:39 - then we will push a copy of fallout 76
07:42 - to our stack so stack
07:45 - dot push fallout 76
07:49 - and this is what happens a few moments
07:52 - later
07:53 - so we will run into an out of memory
07:56 - error due to the
07:57 - java heap space so it is possible to run
08:00 - out of memory when adding objects
08:02 - to our stack now this is an interesting
08:05 - feature that may or may not happen to
08:07 - you
08:07 - if you add a billion copies of skyrim
08:10 - onto a stack
08:11 - [Music]
08:17 - [Music]
08:19 - damn it todd howard you did it again now
08:22 - what are some uses of stacks here's a
08:24 - few examples
08:24 - one we can use them in undo redo
08:27 - features in text editors
08:29 - like when we go to edit then undo typing
08:31 - or
08:32 - redo typing we can move back or forward
08:35 - through browser history by hitting the
08:37 - back or forward button in the top left
08:39 - corner of most web browsers
08:41 - we can implement them in back tracking
08:43 - algorithms
08:44 - if we need to navigate a miz or search
08:47 - through file directories
08:48 - and another is that we use them when
08:50 - calling functions whenever we call a
08:52 - function
08:53 - we add what is known as a frame to the
08:55 - call stack but i'll probably save this
08:57 - topic for another video
08:59 - so in conclusion everybody a stack is a
09:02 - lifo data structure last in first out
09:05 - it stores objects into a sort of
09:08 - vertical tower
09:09 - a stack of objects you use the push
09:11 - method to add
09:12 - objects to the top and the pop method to
09:15 - remove objects from the top
09:17 - so those are stack data structures in
09:19 - the next video we'll be covering cues
09:21 - which work a little bit different
09:23 - so if you can give this video a thumbs
09:24 - up and drop a random comment down below
09:26 - but yeah that is a stack data structure
09:29 - and well
09:30 - computer science hey you yeah i'm
09:33 - talking to you
09:33 - if you learned something new then help
09:35 - me help you in three easy steps
09:38 - by smashing that like button drop a
09:40 - comment down below
09:41 - and subscribe if you'd like to become a
09:43 - fellow bro
09:51 - [Music]
10:05 - you