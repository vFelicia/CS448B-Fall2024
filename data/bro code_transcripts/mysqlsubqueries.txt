00:00 - well hello again everybody today I need
00:02 - to explain subqueries they can be pretty
00:04 - complicated but I'll try my best to
00:06 - explain it simply a sub query is just a
00:09 - query within another query you write a
00:11 - query and close it within a set of
00:13 - parentheses whatever value or values are
00:16 - returned from the sub query you would
00:18 - use within an outer query I'll give you
00:20 - a few demonstrations
00:22 - I have an employees table our manager Mr
00:25 - Krabs he needs us to compare every
00:27 - employee's hourly pay with the average
00:30 - hourly pay of our employees table maybe
00:32 - Mr Krabs is going to give people a pay
00:34 - reduction not an increase a pay
00:36 - reduction but he needs to compare the
00:38 - hourly pay of every employee versus the
00:40 - average how can we write something like
00:42 - that a task like that I would say
00:45 - involves at least two steps we need to
00:47 - find the average hourly pay first and
00:50 - then display every employee's first name
00:52 - last name hourly pay then the average
00:55 - pay let's begin with the average pay
00:58 - select
00:59 - average function
01:01 - hourly
01:03 - pay
01:05 - from my employees table
01:10 - so far so good
01:12 - 15.45 is the average hourly pay of an
01:15 - employee how do I use this number
01:17 - whatever value or values are returned
01:20 - from a sub query we can use within a
01:22 - larger outer query let's delete this
01:25 - semicolon I will surround this statement
01:28 - with a set of parentheses I will then
01:30 - write the outer query let's select the
01:33 - first name
01:35 - last name
01:37 - the hourly pay
01:40 - then comma our subquery
01:44 - from
01:45 - employees
01:47 - there we are although I'm going to give
01:49 - the subquery an alias as average pay and
01:54 - I think I'm going to move this to the
01:56 - next line
01:57 - that is much better so we have
01:59 - accomplished our task we have compared
02:01 - every employee's hourly pay versus the
02:04 - average once we complete the subquery
02:06 - whatever value or values are returned
02:09 - from the sub query we would use within
02:11 - the larger picture the outer query just
02:13 - imagine that we replaced the subquery
02:16 - with 15.45 this value is what was
02:21 - returned although you don't want to
02:22 - write a concrete number like this just
02:25 - because the average pay is bound to
02:26 - change writing a sub query like this
02:28 - would calculate our average pay
02:30 - regardless if we add or remove employees
02:32 - let's try a different example let's find
02:35 - every employee that has an hourly pay
02:37 - greater than the average pay so again we
02:40 - can begin with the sub query
02:42 - we need the average pay
02:44 - select average function
02:47 - hourly pay
02:49 - from employees
02:54 - so again we return 15.45
02:58 - I'll use this within a where Clause
03:00 - let's select
03:02 - the first name
03:04 - last name
03:06 - hourly pay
03:08 - from our employees table
03:11 - where the hourly pay is greater than our
03:17 - sub query
03:20 - Mr Krabs and Sandy Cheeks are both
03:22 - making more than the average hourly pay
03:24 - what was returned was
03:27 - 15.45 then it's just a matter of
03:30 - completing the outer query select the
03:32 - first name last name hourly pay from
03:34 - employees
03:36 - where hourly pay is greater than 15.45.
03:39 - it looks complicated but when you break
03:41 - it down into steps it's a lot easier to
03:44 - visualize we're going to cover a
03:46 - completely different example we will be
03:48 - working with customers and transactions
03:50 - I'm going to select all from my
03:53 - transactions table
03:56 - we have a few transactions I would like
03:59 - to find the first name and last name of
04:02 - every customer that has ever placed an
04:04 - order
04:05 - we can do this step by step let's select
04:07 - every customer ID from transactions
04:10 - that's not null
04:13 - select
04:14 - customer ID
04:18 - from
04:20 - transactions
04:22 - where
04:24 - customer ID
04:27 - is not no let's take a look
04:32 - so we do have a few repeats we have one
04:34 - two three and three you can add this
04:37 - distinct keyword if there's any repeats
04:39 - that would eliminate them
04:41 - we have three registered customers that
04:43 - have placed orders in the past customer
04:45 - ID is one two and three but we don't
04:48 - know who these customers are we will use
04:50 - these values within a larger outer query
04:53 - I will surround this query within a set
04:56 - of parentheses
04:57 - eventually we'll use this within a where
04:59 - clause
05:00 - let's select the first name
05:03 - and last name
05:07 - from our customers table
05:10 - where customer
05:12 - ID I will then use the in operator
05:16 - then add my sub query
05:20 - there we are there's our three customers
05:21 - that have placed orders in the past Fred
05:24 - fish Larry Lobster bubble bass this sub
05:27 - query return to the values one two and
05:30 - three imagine that once this query
05:32 - resolves we are left with the values one
05:35 - two three
05:37 - so this outer query makes a lot more
05:39 - sense select the first name and last
05:41 - name from customers
05:43 - where the customer ID is one of these
05:46 - values one two or three you could do the
05:49 - inverse two find the first name and last
05:51 - name of every customer where the
05:54 - customer ID is not in the sub query
05:59 - this query would return every customer
06:02 - that has never placed an order let's
06:04 - send them a coupon in the mail to
06:05 - convince them to place an order we were
06:07 - left with values one two three
06:11 - select the first name and last name from
06:13 - any customers where the customer ID is
06:16 - not in one of these values one two or
06:19 - three Pearl Krabs had an idea five poppy
06:22 - pups was four
06:24 - so yeah that's a sub query everybody
06:26 - it's just a query within a larger query
06:30 - it helps to visualize this step by step
06:32 - imagine that we're completing the
06:34 - subquery first whatever value or values
06:37 - are returned we can use within a larger
06:39 - query and well yeah those are subqueries
06:41 - in MySQL