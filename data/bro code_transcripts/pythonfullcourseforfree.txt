00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to help you
00:04 - get started with python so
00:06 - sit back relax and enjoy the show
00:11 - if you wouldn't mind please like comment
00:13 - and subscribe
00:14 - one like equals one prayer for the
00:16 - youtube algorithm
00:18 - i'm gonna tell you why you need to learn
00:20 - python it's the easiest programming
00:22 - language to learn as well as being the
00:24 - most popular in the world right now
00:26 - and according to glassdoor the salary
00:28 - for new python developers in the united
00:31 - states is
00:32 - 64 000 if any of this sounds good to you
00:35 - well then
00:36 - let's get started if you need to
00:37 - download python go to
00:39 - python.org downloads and click this
00:42 - yellow download python
00:44 - button open when done check add
00:47 - python 3.9 or another version to path
00:51 - install now and then give it a little
00:53 - bit it states here that setup was
00:56 - successful so let's close out of this
00:58 - our next step is to download an ide
01:00 - that's an acronym for
01:02 - integrated development environment think
01:04 - of it as
01:05 - software that helps us write other
01:07 - software one ide that i recommend
01:09 - is pycharm you can find it at
01:11 - jetbrains.com
01:13 - pycharm go to download if you would like
01:17 - to pay for a professional version you
01:19 - can click
01:19 - this download button but since i don't
01:21 - like to pay for things i'm going to use
01:23 - the free community version at this point
01:26 - we just have to follow the standard
01:28 - installation procedure
01:29 - click next you can pick a destination
01:32 - folder but i'll keep the default
01:34 - next if you would like a desktop
01:37 - shortcut
01:38 - then check this i would also recommend
01:40 - updating the
01:41 - path variable next
01:44 - install and then give it a minute or two
01:48 - then after finishing i have a desktop
01:50 - shortcut so i can just click on this to
01:52 - run pycharm
01:53 - let's create a new project name this
01:56 - project whatever you like i'm going to
01:58 - name this project
01:59 - hello world and i recommend not creating
02:03 - a
02:03 - main dot pi welcome script right now
02:05 - i'll show you how to do that manually
02:07 - and let's create
02:09 - if you need a python file to work with
02:12 - this is how to create one go to
02:14 - file new python file and i'm going to
02:17 - name
02:18 - this main and then click python file
02:23 - all right ladies and gentlemen we now
02:25 - have an empty python script that we can
02:27 - use to begin coding
02:28 - now if you checked this box create a
02:31 - main.pi welcome script and then created
02:33 - a new project
02:34 - then your main python file will probably
02:37 - look a little something like this but
02:38 - that's completely fine we can just
02:40 - delete this
02:41 - i don't know about you guys but the font
02:43 - is very small for me
02:45 - so let's change that we can change that
02:47 - by going to file
02:49 - settings editor font and you can
02:52 - increase the font size
02:54 - let's say 25 you can also change the
02:56 - font too
02:57 - what's a good one uh how about
03:01 - that then click apply and
03:04 - okay much better we can actually see
03:06 - something
03:07 - to run a python script just click the
03:09 - screen play button in the corner
03:11 - alternatively you can go to the run tab
03:13 - and then go to run
03:15 - okay so this box that appeared at the
03:17 - bottom this is referred to as a terminal
03:20 - window this will display
03:21 - any output that your program has and
03:23 - this line at the end
03:25 - process finished with exit code zero
03:27 - that just means that there were no
03:29 - errors in this program
03:30 - so currently this program doesn't do
03:32 - anything but let's change that let's
03:34 - print something
03:35 - let's print a message so to print a
03:37 - message to the terminal window
03:39 - type print and then add a set of
03:42 - parentheses
03:42 - and then you can type a message but it
03:44 - has to be within quotes
03:46 - either double quotes or single quotes it
03:48 - doesn't matter
03:49 - so let's think of a message i don't know
03:52 - i
03:53 - love pizza then let me run this
03:57 - and in my terminal window it says i love
04:00 - pizza
04:01 - to print another line just add another
04:03 - print statement
04:04 - print and then your message within
04:06 - quotes
04:08 - it's really good
04:13 - and well what do you know it printed i
04:16 - love pizza
04:17 - it's really good so ladies and gentlemen
04:19 - you just wrote your first python program
04:21 - by the way you can change the font as
04:24 - well as the font color of your terminal
04:26 - window by going to
04:27 - file settings then go to editor
04:31 - color scheme console font and console
04:34 - colors
04:34 - let's change the font let's say i would
04:38 - like
04:39 - whatever this font is then click apply
04:43 - let's change the font color too by going
04:45 - to console colors
04:47 - for any output you can click number two
04:51 - and select a color let's say i would
04:54 - like
04:54 - bright green that should be decent
04:59 - and for anything else let's say this
05:02 - will be a dark color so i can barely see
05:04 - it
05:05 - so then let's click apply and okay
05:08 - oh yeah that's much better well
05:10 - everybody that was your very first
05:12 - python program i'll post
05:14 - any useful links and timestamps for this
05:16 - video in the comments section down below
05:18 - but yeah welcome to coding with python
05:22 - hey you yeah i'm talking to you if you
05:25 - learned something new
05:26 - then help me help you in three easy
05:28 - steps
05:29 - by smashing that like button drop a
05:31 - comment down below
05:32 - and subscribe if you'd like to become a
05:34 - fellow bro
05:38 - [Music]
05:56 - hey what's going on everybody it's bro
05:59 - hope you're doing well and in this video
06:01 - i'm going to explain how
06:02 - variables work in python so sit back
06:05 - relax
06:06 - and enjoy the show
06:09 - if you find this video helpful please
06:11 - remember to like
06:12 - comment and subscribe your support will
06:15 - help keep this channel running
06:17 - all right let's do this a variable is a
06:20 - container for a value it behaves as the
06:22 - value that it contains
06:24 - it's much like in algebra lessons back
06:26 - in the day where we had to solve for
06:28 - whatever value
06:29 - x was and then we can reuse x and it
06:31 - behaved exactly as that value
06:34 - well with programming we can do that
06:35 - plus we can assign variables of
06:37 - different data types
06:38 - so they are not limited to just numbers
06:40 - we can assign whole words
06:42 - numbers and even these things called
06:44 - booleans which are either true or false
06:46 - but i'll get more in depth into data
06:48 - types a little bit later on in this
06:49 - video
06:50 - so let's create a variable and this is
06:51 - how to do so we need a unique name for
06:54 - this variable
06:54 - let's say name name equals some value
06:57 - now the first data type that we'll cover
06:59 - is strings a string
07:01 - is a series of characters so to create a
07:03 - string
07:04 - we can either use single quotes or
07:06 - double quotes in python
07:08 - and we can assign this a value of
07:10 - whatever your own name is
07:11 - so i will assign this variable name a
07:14 - value of bro
07:15 - now this variable will behave exactly as
07:18 - if it was
07:18 - this value this name and then we can
07:20 - reuse this variable for something
07:22 - so let's print whatever our name is
07:25 - print
07:26 - name and this will print whatever your
07:28 - name is to the console window
07:30 - now when you print your variable make
07:32 - sure you don't put it within quotes
07:34 - because what we're doing then is
07:36 - literally printing
07:37 - the word name as you can see here so
07:41 - if you need to use your variable for
07:42 - something make sure it's not within
07:44 - quotes
07:45 - now we can combine our string variable
07:48 - with another string so within our print
07:50 - statement let's print
07:52 - a string literal such as hello space
07:55 - plus name so we are combining strings
07:58 - and then we're printing the results to
07:59 - the console window so this will print
08:02 - hello bro now you can actually check the
08:05 - data type of a variable
08:06 - so i'm going to turn this line into a
08:08 - comment so what you'll do
08:10 - is take the name of the variable
08:12 - surround this with a set of parentheses
08:14 - and then precede the set of parentheses
08:16 - with the type
08:17 - function and this will print the data
08:20 - type of this variable to the console
08:21 - window
08:22 - and you can see that it says class str
08:25 - short for string
08:26 - a string is a series of characters a
08:28 - name is a good example of a string
08:30 - a series of characters so that is how to
08:32 - check the data type
08:34 - of a variable just use the type function
08:37 - now you can actually combine variables
08:39 - together as long as they're of the same
08:41 - data type so let's change our name to
08:44 - maybe first name and we'll create a
08:45 - second variable called lastname
08:47 - now a common naming convention with
08:49 - variables if it has
08:51 - two words separate each word with an
08:53 - underscore
08:54 - it's not necessary but it's common
08:56 - practice for python and honestly i
08:58 - sometimes forget about that but don't
08:59 - tell anybody
09:00 - so let's create another variable called
09:02 - last name last
09:03 - name equals whatever your last name is
09:07 - and then let's create a third variable
09:09 - called full name
09:10 - full underscore name and let's combine
09:14 - first name plus last
09:18 - name and let us display full name
09:22 - along with hello plus full name
09:25 - now these two names were combined
09:26 - together to create a whole
09:28 - new variable actually what i think i'll
09:30 - do is add a space
09:32 - within my variable so i'm doing a bunch
09:35 - of string concatenation i'm combining
09:37 - the variable first name plus a space
09:39 - character plus
09:40 - last name so the result is hello
09:43 - whatever your first name and last name
09:44 - is
09:45 - so that is a variable of the string data
09:48 - type it is a series of characters
09:51 - now with strings we cannot normally use
09:53 - these for any sort of math
09:55 - that's where the next data type comes in
09:57 - for the time being i just turned all of
09:59 - these lines into comments and we are
10:00 - going to move on to the int
10:02 - data type short for integer this time
10:04 - let's create a variable called
10:06 - age and we will assign this a value of
10:08 - whatever your age is
10:09 - let's just say that i'm 21 now when you
10:12 - assign
10:12 - a value of the int data type make sure
10:15 - that it is
10:16 - not within quotes because then
10:18 - technically it would be a string then
10:19 - and you can see that the color scheme
10:21 - for this number actually changed
10:23 - so if this was a string we would treat
10:25 - it different
10:26 - than an int data type because with
10:28 - strings we cannot normally use them for
10:30 - any sort of math
10:31 - so we now have a variable called edge
10:34 - and we can actually
10:35 - increase or decrease or do whatever we
10:38 - want with the edge
10:38 - let's increase our age by one let's say
10:41 - it's our birthday to do so we would say
10:42 - age
10:43 - equals age plus one and then let's print
10:46 - our edge to the console window
10:48 - print edge and you can see that it says
10:51 - i am 22.
10:52 - now there's a shorthand way of writing
10:53 - this what you'll do is type
10:55 - age plus equals one so that's kind of
10:58 - like a shortcut and this would work the
11:00 - same too
11:01 - now let's print the data type of our
11:03 - inch variable because we can within a
11:05 - print statement i will print the edge
11:07 - and add my edge variable to this type
11:10 - function and this will print the data
11:13 - type of my edge variable to the console
11:15 - window
11:15 - and i will turn this line into a comment
11:17 - just so that it doesn't get in the way
11:19 - now if i were to print the data type of
11:21 - my age variable
11:23 - as you can see it is of the int data
11:25 - type short for integer
11:27 - it only stores a whole integer number
11:30 - now what if this was a string so what
11:33 - i'm going to do
11:34 - is surround my value within a set of
11:36 - quotes
11:37 - and i will turn this line into a comment
11:39 - so that it does not get in the way
11:41 - you can see that the data type of my age
11:43 - variable is now
11:44 - a string and with strings we cannot
11:46 - normally use them for any sort of math
11:48 - so let's attempt to increase our age
11:50 - variable by one
11:52 - and we ran into an error a type air can
11:54 - only concatenate string
11:56 - to string not end now the point being is
11:59 - that
12:00 - it's important to use the appropriate
12:02 - data type because
12:03 - with strings we cannot normally use them
12:05 - for any sort of math you'll want to use
12:06 - a data type of a numeric value
12:09 - an int or a float which we'll discuss a
12:11 - little bit later now here's a situation
12:13 - to consider
12:13 - what if we would like to display our
12:15 - edge variable along with a string
12:17 - literal much like what we did with this
12:19 - line involving a string literal such as
12:22 - hello
12:22 - plus the user's full name so let's
12:25 - attempt to do so and this is not going
12:26 - to work and i'll explain why
12:28 - so within our print statement let's say
12:30 - something such as
12:31 - your age is plus
12:35 - edge now we're going to run into a type
12:38 - error
12:38 - that's because we attempted to use
12:40 - string concatenation with a string
12:42 - literal
12:43 - and a variable of a different data type
12:46 - a variable of the
12:47 - int data type in order to display our
12:50 - edge along with the string we would need
12:52 - to convert our edge variable to the
12:54 - string
12:55 - data type and one way in which we can do
12:57 - that is by type casting
12:59 - and we'll cover this more in the next
13:00 - video so we're going to surround
13:02 - our age variable that is of the in data
13:05 - type with a set of parentheses
13:07 - and precede this with str short for
13:09 - string and this will convert our
13:11 - variable
13:12 - to a string that will allow us to
13:13 - display it with another string
13:15 - now if we were to run this program this
13:17 - way this will now display
13:19 - your age is and in this case 22 so if
13:22 - you need to display a variable of a
13:24 - different data type
13:26 - along with the string you would just
13:27 - need to use a stringcast to convert that
13:29 - data type to a string
13:31 - but we'll cover this more in the next
13:32 - video on typecasting
13:34 - so that is the int data type it stores a
13:37 - whole integer number and the next data
13:40 - type is the
13:41 - float data type and i'm going to turn
13:43 - these lines into comments and we can
13:44 - move on
13:45 - now the float data type is a numeric
13:47 - value that can store
13:48 - a number that includes a decimal portion
13:52 - an int data type cannot store a decimal
13:54 - portion that's why it's in
13:56 - short for integer it only stores a whole
13:58 - number this time let's say we have a
14:00 - height
14:00 - and i will assign this a perfectly
14:02 - normal height of maybe 250.5
14:06 - centimeters so this decimal portion is
14:08 - important
14:09 - that's indicating that this is a
14:11 - floating point number a float for short
14:13 - so let's print our height to the console
14:15 - window print
14:17 - height and this will print whatever my
14:19 - height is and now
14:20 - let's check the type of our height using
14:23 - the type function
14:25 - so within a print statement i'm going to
14:27 - add my height
14:28 - surround this with another set of
14:30 - parentheses and precede this
14:32 - with the type function and the data type
14:35 - of my variable height is a float short
14:38 - for a floating point number
14:39 - a numeric value that contains a decimal
14:42 - portion
14:42 - and now for practice let's print our
14:44 - height along with a string
14:46 - literal so let's create a string literal
14:48 - such as
14:50 - your height is
14:53 - plus height but guess what we're going
14:55 - to do some type casting
14:56 - so surround height with a set of
14:58 - parentheses and precede this with
15:00 - str so that we convert height to a
15:03 - string so that we can use
15:04 - string concatenation within this print
15:06 - statement and this will print the
15:07 - message
15:08 - your height is 250.5 actually let's add
15:12 - centimeters to the end so
15:14 - plus cm
15:17 - and there we go and that is what a
15:19 - floating point number is
15:20 - float for short it is a numeric value
15:22 - that contains a decimal portion
15:25 - now the last data type that we're going
15:26 - to cover is the boolean
15:28 - data type it is a variable that can only
15:30 - store true
15:31 - or false let's say we have a variable
15:34 - called human
15:35 - if we were to assign this a boolean
15:37 - value this would be either true or
15:40 - false and we can print whatever this
15:42 - value is let's print whatever
15:44 - human is and this will display false now
15:47 - the reason that you may want to use
15:49 - booleans instead of strings even though
15:51 - you can still store
15:52 - a string representation of the word
15:54 - false or true
15:56 - is that these are very useful when we
15:58 - get to if statements
15:59 - we can check to see if some statement is
16:01 - true so that is a good use of
16:04 - boolean values now let's check the data
16:07 - type of
16:08 - my human variable so let's print
16:11 - type human and this will print to the
16:15 - console window
16:16 - bool short for boolean now make sure
16:18 - you're not putting this within quotes
16:20 - because then it's technically a string
16:22 - and they behave differently
16:23 - now the data type is a string and you
16:26 - may have noticed as well that the font
16:27 - color has changed between
16:29 - strings and boolean values so that's
16:31 - another good indicator
16:32 - now what if you need to display your
16:35 - value along with a string using string
16:37 - concatenation
16:38 - well guess what we're going to typecast
16:39 - again so let's print something
16:44 - r u a human
16:48 - so we need to use string concatenation
16:50 - so i will convert
16:52 - my boolean variable of human to a string
16:55 - and i have been programmed to inform you
16:58 - that
16:59 - yes i am in fact a human that is true
17:01 - well everyone
17:02 - that is the basics of variables it is a
17:05 - container for a value and they behave
17:07 - as the value that they contain there are
17:09 - four basic data types
17:11 - strings which store a series of
17:13 - characters inc
17:14 - which store a whole integer floats which
17:18 - are floating point numbers a numeric
17:20 - value with a decimal
17:21 - and booleans which only store true or
17:24 - false
17:25 - and they're very useful with if
17:27 - statements so that is it for variables
17:29 - if you would like a copy of all this
17:31 - code i will copy and paste all of this
17:33 - to the comments section down below
17:35 - but yeah that is how variables work in
17:37 - python
17:38 - hey people what's going on it's bro hope
17:41 - you're doing well
17:41 - and in this video i'm going to explain
17:43 - multiple assignment in python so
17:45 - sit back relax and enjoy the show
17:50 - well then since you clicked on this
17:52 - video i should probably explain what
17:53 - multiple assignment is
17:55 - now multiple assignment allows us to
17:57 - assign multiple variables
17:59 - at the same time using one line of code
18:02 - here's an example of us
18:03 - using standard assignment let's say we
18:05 - have a variable
18:06 - name and i will set this to a value of
18:09 - my name but you can use your name for
18:11 - this example
18:12 - let's say edge equals 21 and how about a
18:15 - variable called
18:16 - attractive i think i'm going to set this
18:19 - to true
18:20 - okay so we have a bunch of variables and
18:22 - then we can print
18:23 - the value of these variables with some
18:25 - print statements
18:26 - so let's print name age and attractive
18:30 - so we have name age attractive
18:34 - and as you would expect this prints bro
18:37 - 21 and true
18:38 - now another way in which we could write
18:40 - the same code is to use
18:42 - multiple assignment and this allows us
18:44 - to assign multiple variables
18:46 - at the same time using one line of code
18:48 - so i'm going to turn
18:50 - all of these lines into comments and
18:52 - this time
18:53 - we will only use one line of code but to
18:55 - do this we're going to list all of our
18:57 - variables
18:58 - separated with a comma so that would be
19:00 - name
19:01 - comma edge comma attractive
19:05 - and we will set them equal to those
19:08 - values
19:08 - but in the same order separated by
19:10 - commas so that would be
19:12 - bro comma 21 comma true
19:15 - and this would do the same thing only
19:17 - using one line of code
19:19 - here's another example let's say we have
19:21 - four variables
19:22 - spongebob patrick sandy and squidward
19:25 - and
19:25 - let's pretend that they're all around
19:27 - maybe 30 years old
19:28 - at least it seems like they're around 30
19:30 - years old but i could be wrong
19:31 - i'm not too familiar with spongebob lore
19:34 - so let's set them all equal to 30.
19:36 - now we could write this using four lines
19:39 - of code or
19:40 - we could use multiple assignment to
19:42 - write the same thing
19:43 - using one line of code so if all of
19:45 - these variables
19:46 - are all equal to the same value there's
19:49 - a little bit of different syntax here
19:51 - so let's begin with the first variable
19:53 - of spongebob
19:54 - equals patrick
19:59 - equals sandy equals
20:02 - squidward then we're going to set them
20:06 - all equal to 30 and
20:09 - this should work just fine using only
20:11 - one line of code
20:12 - well everybody that's pretty much it for
20:14 - multiple assignment it allows us to
20:15 - assign
20:16 - multiple variables at the same time
20:18 - using one line of code
20:20 - i will post all of this code in the
20:22 - comments section down below
20:23 - and well yeah that's how multiple
20:25 - assignment works in python
20:27 - hey what's going on everybody it's bro
20:29 - hope you're doing well
20:30 - and in this video i'm going to
20:31 - demonstrate some useful string methods
20:33 - in python so
20:34 - sit back relax and enjoy the show
20:39 - all right let's do this in this video
20:42 - i'm going to be explaining and
20:43 - demonstrating
20:44 - a few useful methods available to us for
20:47 - strings
20:47 - now let's create a variable called name
20:49 - for this example and you can use your
20:51 - own name if you want
20:52 - so we now have a variable called name
20:54 - and for my first example
20:56 - let's print the length of our name
20:59 - variable
21:00 - so to do that we can surround our name
21:03 - variable with the length method and this
21:05 - will print
21:06 - and return how long the length of our
21:09 - string is
21:09 - and for me the length of my name
21:11 - variable is three
21:13 - for three characters if i were to
21:15 - increase the size of my name
21:17 - well then that's going to change to a so
21:19 - that is
21:20 - the length method and i'm just going to
21:22 - turn this line into a comment
21:24 - and let's move on so next we have the
21:26 - find method
21:27 - i just copy and pasted print name so i
21:30 - can reuse it
21:31 - name dot and actually if you have
21:33 - intellisense setup
21:34 - if you add dot after your variable
21:37 - you'll get a suggestion or a few
21:39 - suggestions of
21:40 - different methods and other features
21:42 - that you have access to so
21:44 - let's find find which is
21:48 - uh screw this i'll just type find find
21:51 - then we can find the first index of
21:54 - where this character is
21:55 - let's say i would like to find where
21:57 - capital b is
21:58 - well that is at index zero because
22:01 - computers always start with zero
22:03 - so this first character would be zero
22:05 - then r
22:06 - would be one and then o would be
22:10 - two for this example all right so that
22:12 - is how to find a character
22:14 - within a string moving on so let's
22:17 - capitalize our name and i should
22:19 - probably make this lowercase
22:23 - so name dot capitalize
22:26 - and this will make my name capitalized
22:29 - but if there's any spaces
22:31 - and then additional words it's not going
22:33 - to capitalize that
22:34 - only the first letter and your string
22:37 - next we have upper this will make your
22:40 - string all uppercase
22:42 - name upper and now
22:45 - it is uppercase guess what's next
22:49 - lower name dot lower
22:52 - and i should probably make this capital
22:54 - again
22:57 - and everything is lowercase
23:00 - we're making some good progress today
23:02 - next we have
23:04 - is digit this will return true or false
23:07 - depending on if our string is a digit
23:11 - which it's not so this will print false
23:14 - if i changed my string to a bunch of
23:15 - numbers like 1 2
23:17 - 3 then this will return true let's
23:19 - change that back
23:20 - and move on next we have
23:25 - is alpha
23:28 - are these alphabetical characters
23:33 - oh make sure you add the parentheses
23:35 - afterwards my bad
23:37 - false because we added a space within
23:41 - here
23:42 - now it's true so you can use is alpha to
23:46 - check to see
23:46 - if your string contains only letters
23:49 - alphabetical letters
23:51 - next we have count
23:55 - we can count how many characters are
23:57 - within our string
23:58 - i would like to count how many o's are
24:00 - in here and this should return
24:02 - two that's right okay we're almost at
24:06 - the end
24:07 - we can replace characters within our
24:09 - string
24:10 - so we use the replace method
24:13 - and we pass in two arguments the
24:16 - character we would like to
24:18 - replace and the character we would like
24:20 - to replace our character with
24:21 - i would like to change all o's to a's
24:24 - and now
24:25 - my name is brock hod oh you guys are
24:28 - gonna like this next one
24:29 - this isn't technically a method but it's
24:31 - a really neat feature
24:33 - so one thing that we can do that's
24:34 - available to us with python is that we
24:36 - can display a string
24:38 - multiple times by multiplying that
24:40 - string by a given number
24:42 - so let's say i would like to display my
24:44 - name three times i can just take my
24:46 - string variable
24:47 - then add times three and this will print
24:49 - my name
24:50 - three times bro bro bro like i said not
24:53 - technically
24:54 - a method but it's a useful feature that
24:56 - you might be interested in that's
24:57 - related
24:58 - all right everybody so that is a few
25:01 - useful methods available to us for
25:02 - strings if you would like a copy of all
25:04 - this code
25:05 - i will post this in the comments section
25:07 - down below but yeah those are
25:09 - a few useful methods available to us for
25:12 - strings
25:13 - hey what's going on everybody it's you
25:14 - bro hope you're doing well and in this
25:16 - video i'm going to teach you guys all
25:18 - about typecasting in python so
25:19 - sit back relax and enjoy the show
25:24 - all right welcome back everybody i have
25:26 - a super quick video for you guys today
25:28 - on the subject of typecasting now
25:30 - typecasting is the ability to convert
25:32 - the data type of a value to another data
25:35 - type
25:35 - here's an example that i've written
25:36 - already i'm just going to paste it
25:38 - i have three variables for this example
25:41 - x y
25:42 - and z x contains one this is a whole
25:45 - integer
25:46 - into for short y contains two point zero
25:48 - this is a floating point number
25:50 - float four short you can tell it's a
25:52 - float because it ends with a decimal
25:53 - portion
25:54 - and z contains a string of three a
25:57 - string
25:58 - is a series of characters and you can
26:00 - tell it's a string because it's
26:01 - surrounded with a set of quotes
26:03 - and remember with strings we cannot
26:05 - normally perform math on strings
26:08 - so i have three print statements for x y
26:11 - and z and as you would expect they
26:13 - contain the values of
26:14 - one two point zero and three now let's
26:17 - begin by converting both y
26:18 - and z to the integer data type via
26:21 - typecasting in order to perform
26:23 - typecasting
26:24 - on a value or variable type that value
26:27 - or variable and surround this with a set
26:28 - of parentheses whoops i missed and then
26:32 - pre-save this
26:32 - with the data type you'd like to convert
26:34 - this value or variable to
26:36 - i would like to convert y to an integer
26:39 - and then you can use this for whatever
26:40 - you need
26:41 - so i'm going to replace y within my
26:43 - print statement
26:44 - with y after we typecast it as
26:47 - an integer and this will display 1 2
26:50 - not 2.0 it's the whole integer
26:54 - of 2 and then 3. so this is not a
26:57 - permanent change
26:58 - if you need to make this as a permanent
27:00 - change to y
27:02 - you'd have to reassign it so let's say y
27:05 - equals y and then we're going to
27:07 - typecast y
27:09 - so let's round this with a set of
27:10 - parentheses and precede this with the
27:12 - data type we'd like to convert
27:14 - y2 so now y is a whole
27:17 - integer and then we will print y without
27:20 - typecast this time and our result is
27:23 - one two three now z z is storing a
27:27 - string and with strings we cannot
27:29 - normally perform any math on strings
27:31 - for example within my print statement i
27:33 - will state z
27:35 - times three you would think that the
27:37 - result would be nine right
27:39 - well you're wrong it's going to print
27:41 - three three times
27:42 - if you need to convert a string to a int
27:46 - or a float you would just have to
27:47 - typecast it so this time let's type cast
27:50 - z as an integer z
27:53 - int and we will type cast z as an
27:56 - integer so then if we have z times three
28:00 - the result is now 9 instead of 333
28:04 - so that's the basic formula for type
28:06 - casting now let's convert these to
28:08 - floating point numbers but let's include
28:11 - x as well because
28:12 - x is feeling left out so let's convert x
28:14 - to
28:15 - a floating point number so float
28:17 - parenthesis and we will surround
28:19 - this with x and display x
28:22 - and actually let's convert y and z to
28:26 - floats as well because why not
28:29 - the results are now 1.0 2.0 and 9.0
28:33 - remember that we multiplied z times
28:35 - three
28:36 - and then if we need to convert these
28:38 - values to a string
28:41 - we would use the string cast
28:46 - so the results now are 1 2.0
28:49 - and 333 now you might be thinking to
28:52 - yourself
28:53 - when would you need to convert an
28:55 - integer or a float to a string
28:57 - here's a situation let's say within our
28:59 - print statements we need to print
29:02 - these variables along with another
29:04 - string so within our print statement
29:06 - let's say x is plus
29:09 - x we would like to display these
29:11 - together
29:12 - and let me copy this and do the same
29:14 - thing for y
29:15 - we'll say y is plus y
29:18 - you cannot normally display a string
29:21 - along with an integer
29:22 - or a float because we're using some
29:24 - string concatenation
29:26 - so this will result in a compilation
29:28 - error can only concatenate
29:30 - string not int to string so that's a
29:33 - situation
29:34 - in which you might need to use
29:36 - typecasting to convert an
29:38 - integer or float to a string so let's
29:40 - display
29:41 - x and y as strings via typecasting
29:45 - so we'll surround x and y with a set of
29:47 - parentheses and precede this with the
29:49 - data type we'd like to convert these
29:50 - values to
29:51 - we would like to convert x and y to both
29:53 - strings and now this will compile and
29:55 - run
29:56 - just fine well everybody that's the
29:58 - basics of typecasting
30:00 - if you would like a copy of all my code
30:02 - i will post everything in the comments
30:03 - down below
30:04 - if you found this video helpful don't be
30:06 - afraid to help me out by smashing that
30:08 - like button
30:09 - drop a comment down below and subscribe
30:11 - if you'd like to become a fellow bro
30:14 - hey what's going on everybody it's bro
30:16 - hope you're doing well
30:17 - and in this video i'm going to teach you
30:18 - guys how we can accept some user input
30:20 - in python so sit
30:22 - back relax and enjoy the show
30:26 - ladies and gentlemen this is where the
30:27 - fun begins in this video i'm going to
30:30 - explain how we can accept some user
30:31 - input in python
30:32 - and we do so by using the input function
30:35 - and then we type in our input to the
30:37 - console window
30:38 - but it would probably be good practice
30:40 - to let the user know what we want them
30:41 - to type in exactly
30:43 - so let's ask for somebody's name within
30:45 - quotes inside the input function i'm
30:47 - going to type
30:48 - what is your name and now
30:52 - our program will wait for us to enter in
30:54 - some user input
30:55 - so you can use your own name for this
30:57 - example i'm going to type bro
30:58 - now to submit some user input you just
31:00 - type or press
31:02 - enter now you can see that my process
31:04 - finished with exit code zero that means
31:06 - the program is done running
31:08 - so we should probably do something with
31:09 - this value we can actually assign it to
31:11 - a variable so we can use it elsewhere in
31:13 - our program
31:14 - so to do so we precede input with
31:17 - a variable like name works name equals
31:20 - input
31:20 - and when we accept some user input we
31:22 - will assign it to this variable that we
31:24 - called them
31:25 - and now we can do something with it so
31:27 - let's print a message
31:28 - involving our name variable that we have
31:31 - so how about
31:32 - hello plus name
31:35 - now when i run this program we can
31:37 - accept some user input
31:38 - and then do something with that input
31:40 - such as display message that says
31:42 - hello bro and then you can type in
31:44 - whatever you want for your name
31:45 - let's say i'm dude what is your name
31:48 - dude hello dude
31:49 - now this next part is very important
31:51 - when we accept user input it is always
31:54 - of the string
31:55 - data type a series of characters what if
31:58 - we need to accept a number
32:00 - well you can but you can't normally
32:01 - perform any math on it because it's of
32:04 - the string data type
32:05 - we would need to cast it as either of
32:07 - the integer data type
32:09 - or of the float data type so here's an
32:11 - example of why we can't perform any math
32:14 - on a string let's say we have a variable
32:16 - called
32:17 - edge age equals input and let's
32:20 - ask how old somebody is how old
32:23 - are you now i will add one to somebody's
32:28 - age let's pretend it's their birthday
32:30 - age equals age plus one this will add
32:32 - one to their age
32:33 - now let's try and run this what is your
32:35 - name bro
32:37 - how old are you let's say that i'm 21.
32:40 - okay we ran into an error a type error
32:42 - can only concatenate string to string
32:46 - with what i mentioned previously we
32:47 - cannot normally use
32:49 - strings for any sort of mathematical
32:51 - equation or operation
32:53 - we'll want to cast it to the integer or
32:55 - the float
32:56 - data type so let's cast our user input
32:59 - to the integer data type and we will
33:01 - surround our user input with a cast
33:04 - surround your input with a set of
33:06 - parenthesis and precede this with
33:08 - int and now we can use this user input
33:11 - in a mathematical operation
33:13 - so let's try it even though this won't
33:15 - display age yet so
33:16 - what is your name bro 21 and our program
33:20 - finished with
33:20 - an x a code of zero there were no
33:22 - problems now let's attempt to display
33:24 - this edge
33:25 - so i will print
33:28 - u r plus
33:31 - age plus years
33:35 - old we're doing some string
33:36 - concatenation here
33:38 - what is your name bro how old are you 21
33:42 - all right we ran into a type error again
33:44 - can only concatenate string to string
33:47 - you cannot normally display a variable
33:50 - of the integer data type
33:52 - along with strings because we're doing
33:54 - string concatenation we're adding
33:55 - strings together
33:57 - we would need to convert this variable
33:59 - back to the string
34:00 - data type so we can cast it we'll
34:02 - surround
34:03 - our edge variable with a cast now this
34:05 - is what's going to happen we will accept
34:07 - some user input it will be of the string
34:09 - data type and then we will
34:10 - immediately cast it to be of the integer
34:13 - data type so that we can treat it
34:15 - as a number instead of a character and
34:17 - then if we need to display this
34:19 - edge we will need to convert it back to
34:21 - a string so that we can use
34:23 - some string concatenation and display
34:25 - all of these strings together
34:27 - and now let's try this theory so what is
34:29 - your name bro
34:30 - how old are you let's say i'm 21 hello
34:33 - bro you
34:34 - are 22 years old here's a situation what
34:36 - if we enter
34:37 - a number that contains a decimal portion
34:39 - so let's try this again
34:41 - let's say i'm 21.5 years old
34:44 - well now we ran into a different issue a
34:47 - value error
34:48 - invalid literal for int with base 10
34:51 - that means if we cast a string as an
34:54 - integer
34:54 - it can only be a whole number a portion
34:57 - that does not contain
34:58 - a decimal and that is where the float
35:01 - data type would come in
35:02 - it is a data type that can contain a
35:05 - decimal portion
35:06 - for this example let's create a third
35:09 - variable called height and we will ask
35:11 - for somebody's height
35:12 - input we'll create a prompt that says
35:16 - how tall are you
35:21 - and we will cast this to be of the float
35:24 - data type
35:25 - so that our string our user input
35:28 - can contain a decimal portion and then
35:31 - we can treat it as a number instead of a
35:33 - series of characters
35:34 - and i think i will delete this line we
35:36 - won't really need it anymore
35:38 - and then let's print their height along
35:40 - with a message
35:42 - u r plus then
35:45 - height but we need to cast this back to
35:47 - being a string
35:50 - so we'll surround our height with a cast
35:54 - plus let's say cm
35:57 - tall all right let's test this
36:00 - what is your name bro how old are you
36:03 - let's say i'm 21 how tall are you let's
36:06 - pretend that i'm 250.5 centimeters tall
36:12 - i'm adding the 0.5 just to test to see
36:14 - if this will accept a floating point
36:15 - number
36:17 - hello bro you are 21 years old you are
36:21 - 250.5 centimeters tall
36:23 - not really all right everybody so that
36:25 - is the basics of
36:26 - user input in python normally with user
36:29 - input it will give you
36:30 - a value of the string data type if you
36:33 - need to use that value for any sort of
36:35 - math
36:36 - you'll probably need to cast it to be of
36:38 - the integer or the float data
36:40 - type so if you would like a copy of this
36:42 - code i will post this in the comment
36:44 - section down below
36:45 - but yeah that's how to accept user input
36:47 - in python
36:49 - hey what's going on everybody it's bro
36:52 - hope you're doing well and in this video
36:53 - i'm going to demonstrate a few useful
36:55 - functions related to numbers in python
36:57 - so
36:58 - sit back relax and enjoy the show
37:03 - okay let's begin in this video i'm going
37:05 - to be demonstrating a bunch of useful
37:07 - functions related to numbers
37:09 - and a bunch of these functions are
37:11 - located within the math
37:13 - module now let's create a variable for
37:15 - this example let's say
37:17 - pi equals 3.14 just the first few digits
37:21 - of pi is fine for this example
37:23 - and now here's a bunch of useful
37:25 - functions that you guys would probably
37:26 - be interested in
37:28 - the first is round round is a built-in
37:30 - function and all we do is type round
37:32 - then add a set of parenthesis and then
37:35 - we can pass in
37:36 - a value or a variable as an argument and
37:39 - the round function
37:40 - will round that number for us so pi
37:43 - rounded to the nearest whole integer
37:45 - is you guessed it three now we can round
37:48 - a number up
37:49 - by using the seal function of the math
37:51 - class seal
37:52 - short for ceiling so let's print
37:55 - our result and in order to access this
37:58 - function within the math module
38:00 - we would type the name of the module dot
38:02 - and here's a bunch of functions that we
38:04 - have access to
38:05 - so we are looking for seal and it's
38:07 - actually at the top here for me
38:08 - and at seal we'll round a number up to
38:11 - the nearest whole integer
38:12 - so pi rounded up is four
38:16 - then on the flip side we can round a
38:18 - number down by using
38:19 - floor and that is also located within
38:21 - the math module
38:22 - so let's type math dot floor and
38:25 - pi rounded down would be three
38:29 - up next i have the absolute value
38:32 - function but it's abs
38:33 - for short abs will give you the absolute
38:36 - value of a number
38:38 - so the absolute value of pi actually
38:40 - let's make this negative 3.14
38:42 - the absolute value will tell you how far
38:45 - a number
38:46 - is away from zero so if you pass in a
38:48 - negative number
38:49 - it will give you a positive number so
38:52 - that is
38:52 - abs short for absolute value next we
38:55 - have
38:56 - the pow function pow will raise
38:59 - a base number to a power let's raise
39:03 - pi to the power of two so we pass in
39:06 - two arguments a base and an exponent
39:09 - pi to the power of two is nine point
39:11 - eight
39:12 - and some change so that is the pow
39:15 - function
39:16 - next we have square root
39:20 - so this is located within the math
39:22 - module we'll type
39:24 - math dot s q r
39:27 - t short for square root and the square
39:29 - root of pi
39:31 - is let's find out oh i guess we can't
39:34 - pass in pi
39:35 - uh let's round a different number like
39:38 - 420
39:39 - oh i guess that's because i made pi
39:41 - negative okay so the square root of 420
39:43 - is
39:44 - 20.4 and some change so that is the
39:47 - square
39:47 - root function all right we have two left
39:50 - we have the max function
39:52 - the max function will find the largest
39:54 - of a varying amount
39:56 - of values so let's create three
39:58 - variables for this example
40:00 - let's say x equals one y equals two
40:03 - and z equals three we can use the max
40:07 - function to find
40:08 - the largest of these values so within a
40:10 - print statement
40:11 - let's use the max function and pass in
40:15 - all of the different values or variables
40:17 - that you would like to compare
40:18 - so i would like to find the largest
40:21 - value between
40:22 - x y and z and the result in this example
40:26 - is three now the min function will find
40:29 - the lowest
40:30 - so min and then pass in your values or
40:34 - variables
40:35 - so i would like to find the minimum
40:36 - value between x
40:38 - y and z and in this case it is one
40:42 - well everybody those are a few useful
40:45 - functions that you guys might be
40:46 - interested in
40:47 - if you guys would like a copy of this
40:49 - code i will post this in the comments
40:50 - section down below
40:52 - but yeah those are a few useful
40:54 - functions related to numbers
40:56 - in python hey what's going on everybody
41:00 - it's bro hope you're doing well and in
41:02 - this video i'm going to explain string
41:04 - slicing in python so sit back
41:06 - relax and enjoy the show
41:10 - all right then let's talk about slicing
41:12 - slicing can be used to create a
41:14 - substring by extracting elements from
41:16 - another string
41:17 - the same principle can also be applied
41:19 - to different collections as well
41:21 - but in this video we're going to be
41:22 - focusing on slicing strings
41:24 - now to slice a string we can either use
41:27 - the indexing operator
41:29 - which is a set of square brackets or by
41:31 - use of the slice function
41:33 - to create a slice object this is a
41:35 - little more complex
41:36 - we'll discuss the slice function near
41:38 - the end of this video
41:39 - so with slicing there are three optional
41:43 - arguments
41:43 - three fields that we can fill in
41:45 - depending on where
41:46 - and how we want to slice our string a
41:49 - starting index
41:50 - a stopping index and a step let's begin
41:53 - with the starting index
41:54 - now for this example let's say we have a
41:57 - string
41:58 - variable called name and this will store
42:00 - a value of whatever your
42:02 - own full name is yes i legally change my
42:04 - name to bro code you can use your own
42:06 - name for this if you want
42:07 - so what i would like to do is to create
42:09 - a substring
42:10 - based off a sliced portion of my full
42:13 - name
42:14 - so what i would like to do is create a
42:16 - substring based off of just the first
42:18 - part of my name just bro
42:20 - so let's begin by creating a substring
42:23 - maybe i'll call this first
42:26 - name equals now to slice a string
42:30 - type in a string or the name of a
42:33 - variable that contains your string
42:34 - and follow this with the indexing
42:36 - operator and like i said we'll discuss
42:38 - the slice function a little bit later so
42:41 - we need
42:42 - a starting index and a stopping index
42:45 - but we'll begin with the starting index
42:47 - where do we want to begin
42:49 - our slice so computers they always start
42:51 - with zero
42:52 - so the first character in your string
42:54 - will have an index
42:56 - of zero i would like my slice to begin
42:58 - at index 0
42:59 - so i'll list that for the starting
43:01 - position the starting index
43:03 - so let's test this just to be sure it
43:05 - works i'll just print
43:07 - first name and let's see if this prints
43:10 - capital b
43:11 - which it does so following that same
43:13 - pattern the next character
43:15 - within my string would have an index of
43:18 - one that would be
43:19 - r then the next index two would be
43:22 - o and three should be an empty space
43:26 - all right so that is the starting index
43:29 - within string slicing if we would like
43:31 - to slice an entire portion of our string
43:34 - not just one letter we need a stopping
43:37 - index as well
43:38 - and both of these fields are separated
43:40 - with a colon
43:41 - so let's say i would like to slice the
43:43 - first three characters of my string
43:46 - so this would have an index of zero one
43:50 - two and this isn't going to work as you
43:52 - would imagine and i'll explain
43:54 - why so you would think that indexes
43:57 - 0 through 2 would give us three letters
43:59 - right but it only gives us two
44:01 - so this first index is inclusive
44:05 - the stopping index is exclusive so if i
44:08 - want the first
44:09 - three characters the first three letters
44:12 - in the string
44:12 - i would need the starting index to be
44:15 - zero
44:16 - and the stopping index to be three and
44:18 - now this should print
44:19 - my first name and not anything else
44:22 - there is a shorthand way of writing this
44:24 - too
44:24 - so if you were to leave this first index
44:27 - blank
44:28 - for start well python is going to assume
44:30 - that this is zero
44:31 - the beginning of your string so this
44:34 - would be
44:35 - no different than what we had previously
44:37 - just having colon
44:38 - three now let's try and create a
44:41 - separate substring
44:42 - for a last name so last
44:45 - name name now we need a
44:49 - starting index and a stopping index so
44:52 - we need the starting index at least so
44:54 - this would be
44:56 - zero one two three four
44:59 - four colon and where do we want this to
45:01 - stop
45:02 - zero one two three four five
45:05 - six seven and remember that this is
45:08 - exclusive
45:09 - so we're going to place eight here and
45:11 - now i would like to display
45:13 - last name and this should just display
45:16 - code
45:16 - and a shortcut is that if you were to
45:19 - leave
45:20 - stop blank but you still have that colon
45:22 - this is a shorthand way of writing
45:24 - i would like every character starting at
45:27 - index four
45:28 - and everything after until the end so
45:30 - there would be no change to this
45:32 - as well you can write it either way okay
45:34 - so we still have to discuss
45:36 - step step is an optional field that we
45:38 - can set a value to
45:40 - so step is how much we're increasing our
45:42 - index by
45:43 - between starting and stopping so it is
45:46 - entirely possible
45:48 - to create a substring that will count
45:50 - only
45:51 - every second character after the first
45:53 - normally step is one by default
45:55 - but if we were to set that to two we're
45:57 - going to count only
45:58 - every second character so let's try this
46:01 - maybe i'll create a new
46:02 - variable called funky name because i
46:05 - really don't know what else to call this
46:06 - for this example
46:07 - let's say funky name equals name and i'm
46:10 - going to count
46:11 - only every second character including
46:14 - the first
46:14 - so the indexes would be zero colon
46:18 - eight for my example but if you're using
46:20 - your own name that's probably going to
46:21 - be something different
46:23 - so the default first step is one and if
46:26 - i were to display funky name as it
46:28 - is currently this will just display my
46:30 - full name
46:31 - but if we set step to two this will only
46:33 - display
46:34 - every second character including the
46:36 - first so funky name is now
46:38 - for me at least b o c d now if step
46:42 - was three this will print only every
46:44 - third character including the first
46:46 - where it's b space d a shorthand way of
46:50 - writing this
46:50 - is that you could leave start and stop
46:53 - empty but the important thing is to have
46:55 - these two colons
46:57 - python is going to assume that if you
46:59 - leave your starting index
47:00 - empty you're referring to index 0 the
47:03 - beginning
47:04 - if your second index your stopping index
47:06 - is empty
47:07 - python will assume this will be the very
47:10 - end of your string
47:11 - so just having two colons and then step
47:13 - three would be
47:14 - no different than what we had previously
47:16 - or this next part i'm going to explain
47:19 - how we can reverse a string in python so
47:22 - let's create a new substring variable
47:24 - called
47:24 - reversed name equals name i would like
47:27 - to use the entire string
47:29 - so i can just use two colons python will
47:32 - fill in the rest
47:33 - so for the step this is going to be
47:35 - negative one
47:36 - it's kind of like we're counting
47:38 - backwards and we're going to create
47:40 - a new sub string based off my name but
47:43 - in reverse
47:44 - so if i were to print my reversed name
47:47 - this is now
47:48 - edok orb i think that's how you
47:50 - pronounce it
47:51 - so that's how to reverse a string in
47:53 - python using slicing
47:55 - now let's move on to part two of this
47:57 - video i'm going to be explaining the
47:59 - slice function and we can use the slice
48:01 - function to create a slice
48:03 - object which is actually reusable so
48:05 - that's somewhat convenient
48:07 - let's take a different scenario this
48:08 - time let's say we have a website url
48:11 - website equals http colon2forwardslashes
48:16 - google.com but use whatever website you
48:18 - want what i would like to do for this
48:20 - program
48:20 - is remove and create a substring based
48:23 - off the website name
48:24 - and not anything else i would like to
48:27 - exclude the http portion as well as the
48:30 - dot-com portion
48:31 - of this website url so let's break it
48:34 - down step by step
48:35 - our first step is to create a slice
48:37 - object so i will name the slice object
48:40 - as slice
48:40 - slice equals and i will invoke the slice
48:43 - function
48:44 - so within the parentheses of the slice
48:46 - function we can add up to
48:48 - three values a start a stop and a step
48:52 - exactly the same as what we did with
48:53 - indexing however with the slice function
48:56 - we separate each of these values with a
48:59 - comma
48:59 - instead of a colon but it works the same
49:01 - way so we would like
49:03 - our substring to begin where the name of
49:05 - the website begins
49:06 - so we would like our start to be zero
49:10 - one two three four five six seven
49:13 - so i will pass in seven for where my
49:15 - substring will begin
49:17 - and now each value within the slice
49:19 - function will be separated with
49:21 - a comma instead of a colon like what we
49:23 - did with the indexing operator
49:25 - now for the stop index that's going to
49:28 - be a little bit tricky
49:29 - and let me explain why one issue that
49:31 - we're going to run into
49:32 - is that not all website names are
49:34 - consistent with their length they can
49:36 - really vary
49:37 - so it is not possible for us to use the
49:40 - same stopping index
49:41 - for each of these website urls so one
49:44 - way in which we can account for that
49:46 - is to use what is called a negative
49:48 - index each character within a string
49:51 - has a positive index as well as a
49:53 - negative index
49:54 - and a negative index works almost
49:57 - exactly the same way
49:58 - except the character most on the right
50:01 - begins with a negative index
50:03 - of minus one and the character on the
50:06 - left
50:06 - of that would be negative two negative
50:09 - three and negative four
50:10 - it's as if you're counting backwards so
50:12 - with indexing we can use some
50:14 - combination of
50:15 - positive and negative indexing so i
50:18 - would like
50:19 - my substring to end where this dot is so
50:22 - this would have
50:23 - a index of minus one minus two
50:26 - minus three minus four and remember that
50:28 - this is exclusive
50:30 - so i would like my slice to begin at
50:32 - index seven
50:34 - and a negative index of four for the
50:37 - stopping position
50:38 - so that will give me just the website
50:40 - name and remove
50:41 - the http portion as well as the dot com
50:44 - portion of my website url
50:47 - and now we have a slice object and we
50:49 - can reuse this
50:50 - so to apply your slice object type in
50:53 - the name your string
50:54 - index operator and place your slice
50:57 - right within here
50:58 - and let's print this so print
51:01 - our website and apply the slice to it
51:03 - and now this should give us
51:05 - just the website name and now let's test
51:07 - this with maybe another website
51:09 - i'll rename this as website one and
51:11 - let's create website2
51:14 - and let's try a different website name
51:17 - for goodmeasure
51:18 - so let's try wikipedia so we can reuse
51:22 - our slice object
51:23 - and we will apply our slice to website
51:26 - two this time
51:27 - and this should remove the url portions
51:30 - http as well as
51:32 - com all right everybody so that is
51:34 - slicing strings
51:36 - in python you can either use the
51:38 - indexing operator
51:39 - or the slice function to create a slice
51:42 - object
51:43 - if you would like a copy of all this
51:44 - code i will post all of this in the
51:46 - comments section down below
51:48 - but yeah that is how string slicing
51:50 - works in python
51:52 - hey what's going on people it's you bro
51:54 - hope you're doing well and in this video
51:56 - i'm going to explain
51:57 - if statements else if statements and
51:59 - else statements and python so
52:01 - sit back relax and enjoy the show
52:06 - all right people let's talk about if
52:08 - statements an if statement is a block of
52:10 - code
52:11 - that will execute only if its condition
52:13 - is true
52:14 - it's a very basic form of decision
52:16 - making with programming
52:18 - for this example let's create a prompt
52:21 - where we will ask a user
52:22 - for their age and depending on what
52:24 - their age is we will print a response
52:26 - so let's say age equals input and then
52:29 - we will add a prompt
52:30 - how old are you now this will return a
52:33 - string
52:33 - so we should probably cast this as an
52:36 - integer data type
52:37 - so we now have a variable called age
52:39 - where we will accept some user input
52:42 - let's check somebody's age with a
52:43 - variety of if statements
52:45 - so let's check to see if somebody's age
52:47 - is greater than or equal to 18
52:49 - so to create an if statement type if and
52:51 - then some sort of condition
52:53 - if age is greater than or equal to 18
52:56 - to finish this if statement add a colon
52:58 - at the end
52:59 - now pay attention to this if i move down
53:01 - to the next line you'll notice that my
53:03 - cursor is now
53:04 - indented any indented code underneath an
53:07 - if statement is the block of code for
53:10 - that if statement
53:11 - so if this condition is true we will
53:13 - execute some
53:14 - block of code if it's false we'll skip
53:17 - over it so if somebody's age is greater
53:19 - than or equal to 18
53:20 - let's print you are an
53:24 - adult and let's try this program how old
53:27 - are you
53:28 - let's say i'm 21 so my condition when we
53:31 - get to the if statement
53:32 - is going to check to see if this
53:33 - condition is true if it is true we're
53:35 - going to
53:36 - execute this block of code if it's not
53:38 - we skip over it
53:39 - so how old are you let's say i'm 21 i'm
53:42 - going to hit enter
53:43 - and my if statement is true so we
53:45 - execute this block of code which prints
53:48 - you are an adult so what if this
53:49 - condition is false
53:51 - let's say i'm 12. well then we're just
53:53 - going to skip over this block of code
53:54 - and continue on with the rest of the
53:56 - program
53:56 - if you would like your program to take
53:58 - some other course of action
54:00 - if this condition is false we can add an
54:02 - else
54:03 - statement so after the if statement add
54:06 - else
54:06 - make sure you get the indentation right
54:08 - you don't want this within the block of
54:10 - code for the if statement
54:11 - so if this condition is false we can
54:14 - take
54:15 - some other course of action so if
54:17 - somebody's age
54:18 - is less than 18 let's print
54:22 - you are a child
54:26 - so let's try this again i'm going to
54:28 - enter that i
54:29 - am 12 years old not really but let's
54:31 - just pretend i am
54:33 - so this will now print you are a child
54:35 - if
54:36 - this condition is false perform this
54:38 - block of code for the else statement
54:40 - so with if statements we can check more
54:43 - than one condition before reaching the
54:45 - else statement by using an
54:46 - else if statement and we add that after
54:50 - an if statement so it's shortened to e l
54:53 - i f for else if so let's check to see if
54:56 - somebody's age
54:57 - is less than zero for some reason
55:00 - so let's print
55:03 - you haven't been born yet
55:08 - so with if statements we start at the
55:11 - top we first check
55:12 - the if statement if this is false we
55:14 - move down to the next
55:15 - statement to check then we check our
55:18 - else if statement
55:19 - if this is also false then we resort to
55:21 - the else statement
55:23 - the else statement is sort of like a
55:25 - last resort if all conditions
55:27 - evaluate to be false then we execute the
55:30 - else statement
55:31 - so let's try this how old are you let's
55:33 - say i'm negative
55:34 - 1 years old you haven't been born yet
55:38 - so with if statements we always begin
55:40 - with an if statement and we check
55:42 - that condition if that condition
55:44 - evaluates to be false
55:46 - then we will skip this block of code and
55:48 - move down to the else if statement
55:50 - if there is one it's optional if this
55:53 - condition
55:54 - is also false then we will use our else
55:56 - statement as a last resort
55:58 - if there is one if there is no else
56:00 - statement then we just skip over all of
56:02 - this then and continue on with the rest
56:04 - of the program
56:05 - so you can add more than one else if
56:07 - statement so let's check something else
56:10 - let's check to see else if age
56:14 - is equal to 100 so if you need to check
56:17 - to see
56:18 - if a value is equal to a particular
56:21 - value
56:21 - make sure you use double equal signs
56:24 - this is the comparison
56:25 - operator for equality if you use just
56:29 - one equal sign that's the assignment
56:31 - operator and
56:32 - python thinks you're attempting to set
56:34 - age equal to 100
56:35 - so if you want to check to see if age is
56:38 - equal to 100
56:39 - then use double equals so let's check to
56:42 - see if somebody's age is
56:44 - equal to 100 so let's print
56:48 - you are a century
56:52 - old now pay attention to this if i were
56:54 - to run this program
56:56 - how old are you let's say i'm 100. so
56:59 - this is printing you are an adult that's
57:02 - because we first check
57:03 - our if statement and well we're 100
57:06 - years old and 100
57:07 - is greater than or equal to 18. so we
57:10 - print
57:10 - this block of code we execute this block
57:12 - of code and then we skip
57:14 - everything else even though age is equal
57:17 - to 100 within
57:19 - our else if statement so the order of
57:22 - your if statements
57:23 - does matter so let's change this around
57:25 - let's add this
57:26 - to the very beginning and this will be
57:30 - our
57:30 - if statement and we will set age
57:33 - is greater than or equal to 18 to be an
57:35 - else if statement
57:36 - so we're first going to check to see if
57:38 - age is equal to 100
57:40 - if not we will check to see if age is
57:43 - greater than or equal to 18
57:45 - and we just follow that order so let's
57:47 - try this again how old are you
57:48 - i am 100 years old you are
57:52 - a century old so we first check our if
57:54 - statement
57:55 - if this condition is true we will
57:57 - execute this block of code
57:59 - if it's false we just go down the order
58:01 - till we reach our else statement
58:03 - well everybody that is the basics of if
58:06 - statements we have if statements
58:08 - else if statements and else statements
58:10 - so if you would like a copy of this code
58:12 - i will post this in the comments down
58:14 - below
58:15 - but yeah that is how if statements work
58:17 - in python
58:19 - hey what's going on everybody it's bro
58:21 - hope you're doing well in this video i'm
58:23 - going to explain
58:24 - logical operators in python so sit back
58:26 - relax
58:27 - and enjoy the show
58:30 - all right everybody let's talk about
58:32 - logical operators
58:33 - these are used to check if two or more
58:36 - conditional statements
58:37 - are true so we'll be discussing the and
58:40 - as well as the or
58:41 - logical operators there's also a third
58:44 - one called
58:44 - not but that works a little bit
58:46 - different and i'll explain why
58:48 - so let's create a program to demonstrate
58:50 - this let's create a program
58:51 - where we will ask somebody for the
58:53 - temperature outside and then depending
58:55 - on the temperature if it falls within a
58:56 - certain range
58:57 - we will print a message so we'll need to
58:59 - use and as well as or logical operators
59:01 - to do this
59:02 - so here i have a prompt temp for
59:04 - temperature equals input what is the
59:06 - temperature outside
59:08 - so i'm going to cast this as an integer
59:10 - data type
59:11 - so what if we want to check to see if
59:13 - our temperature is within a certain
59:15 - range
59:16 - we can use the and logical operator to
59:19 - check
59:19 - two or more conditional statements this
59:21 - is how we might do that
59:23 - let's check if temp
59:26 - is greater than or equal to zero zero
59:28 - degrees celsius
59:30 - and we can check another condition too
59:32 - if temp
59:34 - is less than or equal to 30 degrees
59:36 - celsius
59:38 - so we need to add a colon at the end to
59:40 - finish this if statement
59:42 - and let me just fix some of the spacing
59:44 - okay so
59:46 - with the and logical operator in order
59:48 - for this entire condition to be true
59:51 - both conditions must be true this needs
59:53 - to be true
59:54 - and this needs to be true so if our
59:57 - temperature
59:57 - is equal to or above 0 as well
60:01 - as being less than or equal to 30 that
60:04 - means our temperature
60:05 - falls within a certain range so let's
60:07 - print a message
60:08 - such as the temperature
60:12 - is good today
60:16 - print go
60:19 - outside all right let's try it
60:23 - so what is the temperature outside let's
60:25 - say it's 20 degrees celsius
60:27 - well the temperature is good today go
60:30 - outside
60:30 - this condition is true 20 is greater
60:33 - than or equal to zero
60:34 - and temperature is less than or equal to
60:37 - 30.
60:38 - let's try a different temperature like
60:40 - negative 20 degrees celsius so it's
60:42 - really freaking cold outside right now
60:44 - as you can see nothing happened because
60:46 - our first condition
60:48 - was false our temperature is not greater
60:50 - than or equal to zero
60:52 - but our temperature is less than or
60:54 - equal to 30 so
60:56 - our second condition is true but our
60:58 - first condition was false
60:59 - and in order for this entire statement
61:01 - to be true since we're using the and
61:03 - logical operator
61:04 - both conditions must be true in order
61:06 - for this statement
61:07 - to be true now let's discuss the or
61:10 - logical operator
61:11 - we can check to see if our temperature
61:13 - is below
61:14 - or above a certain range so let's write
61:16 - else if
61:17 - temp is less than zero or
61:21 - temp is greater than 30. so that means
61:25 - it's going to be either
61:26 - very cold outside or very hot outside so
61:29 - let's print a message
61:31 - the temperature
61:35 - is bad today
61:39 - print stay
61:44 - inside all right let's try this again
61:49 - what is the temperature outside it is
61:50 - negative 20 degrees outside
61:53 - the temperature is bad today stay inside
61:55 - so with the
61:56 - orological operator as long as one of
61:59 - these conditions
62:00 - is true then the entire statement is
62:02 - true it doesn't matter if one of them is
62:04 - false as long as one of them is true
62:05 - then the entire statement
62:07 - is true last but not least we have the
62:09 - not logical operator this works a little
62:11 - bit different from the
62:12 - and as well as the or logical operator
62:14 - because we can check
62:16 - one or more conditional statements
62:18 - instead of two or more conditional
62:20 - statements
62:21 - so what the not logical operator will do
62:23 - is that it'll take
62:24 - a conditional statement if it's true
62:26 - it's going to flip it to false
62:28 - if it's normally false it's going to
62:29 - flip it to true so for this example we
62:31 - have another way in which we could write
62:33 - this
62:34 - although it's a little more complex so
62:36 - if our statement
62:37 - is true what we can do is that we can
62:39 - flip it to false using the
62:41 - not logical operator if it's normally
62:43 - false we can change it to true
62:45 - so what we'll do is surround one or more
62:47 - conditional statements with a set of
62:48 - parentheses
62:49 - and precede everything within the
62:51 - parentheses with the not
62:52 - logical operator so if the statement is
62:55 - normally true
62:56 - it's going to become false using the not
62:58 - logical operator
62:59 - if it's normally false it's going to be
63:01 - true then let's do the same with the
63:03 - else if statement
63:04 - so surround one or more conditional
63:06 - statements with the not
63:08 - logical operator so now these roles are
63:10 - going to be kind of reversed so let's
63:12 - try this again what is the temperature
63:13 - outside it is negative 20 degrees
63:15 - outside
63:16 - the temperature is good today go outside
63:18 - so what we should probably do
63:19 - is kind of reverse these rolls so i'm
63:22 - just going to swap
63:23 - everything within these if statements
63:25 - with each other
63:27 - and now this should work the same as it
63:29 - did before but we just wrote it a little
63:30 - bit different
63:31 - what is the temperature outside it is 15
63:34 - degrees outside
63:35 - 15 degrees celsius the temperature is
63:37 - good today go outside
63:38 - so with the not logical operator you can
63:41 - surround one
63:42 - or more conditional statements with the
63:44 - not logical operator and what this will
63:46 - do
63:47 - is flip it from being false to true or
63:49 - from true to false
63:50 - well everybody that's the basics of
63:52 - logical operators in python if you would
63:55 - like a copy of all this code i will post
63:57 - this in the comments
63:58 - down below but yeah that's the basics of
64:00 - logical operators
64:02 - in python hey what's going on everybody
64:05 - it's bro hope you're doing well and in
64:07 - this video i'm going to explain while
64:08 - loops in python so sit back
64:10 - relax and enjoy the show
64:15 - so while loops a while loop is a
64:17 - statement that will execute its block of
64:19 - code
64:20 - as long as its condition remains true
64:23 - later on in this video for this example
64:25 - we're going to create
64:26 - a program where we will prompt a user to
64:28 - enter their name
64:29 - if they attempt to skip that prompt then
64:31 - we will continually ask the user to
64:33 - enter their name
64:34 - and they can't continue on with the rest
64:36 - of the program until they do so the key
64:37 - thing to keep in mind with while loops
64:39 - is that you'll want some way to
64:41 - eventually escape the while loop if you
64:42 - don't have any way to escape the while
64:44 - loop that's referred to as an
64:46 - infinite loop so let's create an example
64:48 - of an infinite loop because it's fun
64:50 - so to create a while loop type while and
64:52 - then some sort of condition
64:53 - so for our condition let's say while one
64:55 - is equal to one
64:56 - so this will always be true now what do
64:59 - we want to do
65:00 - when we execute this block of code let's
65:02 - print something
65:03 - print help i'm
65:06 - stuck in a loop all right so let's try
65:10 - this
65:10 - while one is equal to one print this
65:13 - statement
65:15 - and we will just continue on and on
65:17 - within this while loop because we have
65:19 - no way to escape this while loop
65:21 - so now let's use this concept and write
65:24 - a program where we will prompt a user to
65:26 - type in their name
65:27 - if they don't type in anything then we
65:29 - will continue to prompt them to type in
65:31 - at least something
65:32 - so let's say name is equal to
65:35 - and then to just keep this blank we'll
65:36 - just set this to a set of quotes
65:39 - and then let's write a while loop here
65:41 - while name
65:43 - and let's check the length of name if
65:45 - the length
65:46 - of our name is equal
65:49 - to zero then we will ask the user to
65:52 - type in their name
65:53 - name equals input
65:57 - enter your name
66:00 - so then once we escape the while loop
66:02 - let's print something
66:04 - print hello plus
66:07 - name whoops hello plus name
66:10 - alright so when i run this we are giving
66:12 - the user a way to escape the while loop
66:14 - they have to type in something for their
66:16 - name
66:16 - as long as the length of my name is
66:19 - equal to zero
66:20 - keep on printing this prompt enter your
66:23 - name
66:23 - so i'm just going to hit enter a bunch
66:25 - of times enter your name
66:26 - no enter your name no enter your name no
66:30 - so we are stuck within this loop until
66:32 - we enter something for our name
66:34 - so this time let me type in a name then
66:36 - hit enter
66:37 - so therefore our condition is now false
66:39 - the length
66:40 - of my name is now one two three so
66:43 - three is not equal to zero therefore our
66:46 - while statement our while loop is false
66:48 - and we continue on with the rest of the
66:49 - program there are a few variations in
66:51 - which you could write the same program
66:53 - so
66:54 - let's write this a different way what we
66:55 - could do is say
66:57 - name is equal to none while
67:00 - not name and this will pretty much do
67:03 - the same thing it's just another way of
67:05 - writing this
67:06 - well everybody that's the basics of
67:08 - while loops a while loop is a statement
67:10 - that will execute
67:11 - its block of code as long as its
67:13 - condition remains true
67:15 - for our example we asked the user to
67:17 - type in their name
67:18 - if they were to leave it empty or blank
67:20 - we would keep on asking the user to type
67:22 - in their name
67:23 - so if you would like a copy of this code
67:25 - i will post this in the comments section
67:26 - down below
67:27 - but yeah that's the basics of while
67:29 - loops in python
67:31 - hey what's going on everybody it's bro
67:33 - hope you're doing well and in this video
67:35 - i'm going to explain for loops in python
67:37 - and at the end of this video we're going
67:38 - to create a countdown timer so
67:40 - sit back relax and enjoy the show
67:45 - all right guys and gals let's talk about
67:47 - for loops a for loop is a statement that
67:49 - will execute its block of code a
67:52 - limited amount of times it's similar but
67:54 - different from a while loop because a
67:56 - while loop
67:57 - could iterate an unlimited or infinite
68:00 - amount of times depending on the
68:02 - condition a for loop
68:04 - will only iterate a limited amount of
68:06 - times and before we start executing
68:08 - its block of code we already know how
68:10 - many times we're going to repeat this
68:11 - block of code
68:12 - so for this example let's create a for
68:14 - loop that will simply count it to 10
68:16 - and then we'll create a few more
68:17 - sophisticated examples
68:19 - so to create a for loop that will count
68:20 - up to 10 this is what we'll type
68:22 - four and then we need some sort of
68:24 - counter people usually either write
68:26 - index or they shorten it to just i i for
68:29 - index
68:30 - four i in and we can set a range range
68:34 - ten so we will execute this for loop ten
68:36 - times
68:37 - and to finish this for loop just add a
68:39 - colon at the end
68:40 - so the next line or lines will be
68:43 - indented so that's the block of code for
68:45 - the for loop
68:46 - what do we want to do during each
68:47 - iteration let's just print what
68:49 - i is and let's take a look to see what
68:51 - would happen
68:52 - so we executed this for loop ten times
68:55 - except with computers computers always
68:57 - start with zero
68:58 - so when we said four i in range ten
69:00 - we're counting numbers
69:02 - zero through nine so it's as if this
69:04 - number
69:05 - is exclusive so there's two ways we can
69:07 - change this we could say range ten
69:09 - plus one or what i would do is say print
69:12 - i
69:12 - plus one so this will give us numbers
69:15 - one
69:15 - through ten so that's a for loop it will
69:18 - execute a limited amount of times
69:20 - this time let's count a range between
69:22 - two numbers
69:23 - not necessarily 0 to 10 but something
69:25 - else so let's say 4i
69:27 - in range maybe the numbers 50 through
69:31 - 100
69:31 - so within my range function i will pass
69:34 - in two numbers
69:35 - the first number will be the starting
69:37 - point and the second number is the
69:38 - ending point
69:39 - this first number is inclusive and the
69:41 - second number is exclusive
69:43 - so let's print this print whatever i is
69:46 - so this will count
69:48 - 50 through 99 actually if you wanted to
69:51 - include this last number since it's
69:53 - exclusive what we could do is just add
69:55 - one to the end so this would give
69:56 - us 50 through 100 except that
70:00 - this will iterate 51 times since we're
70:02 - counting 50.
70:04 - so you just have to pay attention to
70:05 - your range and the numbers that it's
70:06 - counting now one thing that you can do
70:08 - with the range function is that you can
70:10 - add a third argument and this will
70:12 - function as the step
70:13 - how much you want to count up or down by
70:15 - so this time let's count up by two
70:17 - so i'll add comma two we're passing in a
70:20 - third argument this time
70:22 - so this program will now count up by two
70:24 - starting at fifty and go all the way
70:27 - to one hundred a benefit of for loops is
70:30 - that we can iterate through anything
70:32 - that is considered
70:33 - iterable this could include a string the
70:35 - letters in a string
70:36 - or any sort of collection so this time
70:39 - let's create a for loop that will
70:40 - iterate
70:41 - once through each letter in maybe a name
70:44 - so for
70:44 - i in and let's type a name here type in
70:47 - whatever your first name and last name
70:49 - is
70:50 - and then we will print whatever i is
70:53 - for i in whatever your name is print
70:56 - each letter
70:57 - in the string so when i run this each
71:00 - letter
71:01 - within my name will be printed to a new
71:03 - line
71:04 - all right people for my last trick we're
71:06 - going to create a program
71:07 - where we will simulate a countdown
71:09 - starting at 10 and count down to zero
71:11 - and then maybe once we reach zero we can
71:13 - print something such as
71:15 - happy new year so to create this program
71:17 - we'll need an import so at the top
71:19 - we're going to import the time module
71:21 - because we'll be waiting
71:22 - one second after each iteration of this
71:24 - for loop
71:25 - so to create this program let's say four
71:27 - you could say i but you can really write
71:29 - anything here and
71:30 - to demonstrate that let's say four
71:32 - seconds four seconds
71:35 - in range so the starting point is going
71:38 - to be ten
71:38 - the ending point will be zero and we'll
71:41 - add a step
71:42 - what do we want to count up or down by
71:44 - let's set this to negative one so this
71:46 - will be a countdown
71:47 - starting at ten and ending at zero so
71:49 - after each iteration
71:51 - let's print whatever i is or in this
71:54 - case
71:55 - seconds and then we can sleep have our
71:58 - thread sleep
71:58 - for a number of seconds too so after we
72:01 - print seconds
72:03 - type time dot sleep and pass in
72:06 - how long you want to sleep for i would
72:08 - like to sleep for one second
72:10 - and then at the end let's print happy
72:12 - new year make sure this isn't within the
72:14 - for loop
72:15 - print happy new year and well
72:18 - that's it let's test this so we'll begin
72:21 - at 10 and count down to zero and you can
72:23 - see that my thread that is running this
72:25 - program
72:25 - is sleeping for one second after each
72:28 - iteration of this for loop
72:29 - then once we reach zero it will display
72:32 - happy new year
72:33 - well everybody that's the basics of for
72:35 - loops a for loop is a statement
72:37 - that will execute its block of code a
72:40 - limited amount of times
72:41 - it's different from a while loop because
72:43 - a while loop could execute
72:45 - an infinite or unlimited amount of times
72:47 - with for loops they execute limited
72:50 - amounts of times
72:51 - and before we enter the for loop we
72:53 - already know how many times we're going
72:54 - to iterate this for loop
72:56 - if you'd like a copy of all this code i
72:58 - will post this in the comments down
72:59 - below
73:00 - but yeah that's how for loops work in
73:02 - python
73:04 - hey what's going on everybody it's you
73:06 - bro hope you're doing well and in this
73:07 - video i'm going to explain nested loops
73:09 - in python so
73:10 - sit back relax and enjoy the show
73:15 - hey all you people let's talk about
73:17 - nested loops a nested loop is a general
73:19 - concept of having
73:20 - one loop inside of another loop and
73:22 - that's really it it doesn't matter if
73:24 - it's a for loop or a while loop
73:26 - so the inner loop will finish all of its
73:28 - iterations
73:29 - before we finish one iteration of the
73:31 - outer loop
73:32 - and to best demonstrate this we're going
73:34 - to create a program where we will draw a
73:36 - rectangle made out of a certain symbol
73:38 - that we choose
73:39 - we need to set a width and a height and
73:41 - to best do this we'll need to use a
73:43 - nested loop we'll create a few prompts
73:45 - one for rows
73:46 - columns and a symbol that we want to
73:48 - make a rectangle of
73:49 - so let's begin with rows rows equals
73:52 - input how many
73:56 - rows and we'll need to cast this as an
74:00 - integer data type
74:01 - because we're working with numbers okay
74:04 - let's do the same thing for columns
74:08 - so replace rows with columns for this
74:10 - next line
74:12 - input how many columns
74:15 - and we'll create a symbol variable
74:18 - symbol
74:18 - equals input and this we don't have to
74:21 - cast
74:23 - enter a symbol to
74:26 - use now it's time for the nested loops
74:29 - we're going to create an outer for loop
74:31 - as well as an inner for loop
74:33 - the outer for loop will be in charge of
74:35 - the rows the inner for loop will be in
74:37 - charge of the columns
74:38 - so let's begin by creating our outer
74:41 - loop so
74:42 - we'll write 4 i in range
74:46 - rows we would like our outer for loop to
74:49 - iterate as many times
74:50 - as we have rows and we're going to
74:52 - create an inner for loop that will
74:54 - iterate as many times as we have columns
74:56 - so within the block of code for the
74:58 - outer for loop we're going to create
75:00 - another for loop
75:01 - this time it'll be four and a common
75:04 - convention
75:05 - for inner loops is to write j as an
75:07 - index because
75:09 - j comes after i i guess so for j
75:12 - in range columns
75:18 - so our inner for loop will iterate for
75:21 - as many times
75:22 - as we have columns all we'll do within
75:24 - the
75:25 - inner for loop is print our symbol that
75:27 - we have
75:28 - except we'll have one issue using a
75:31 - print statement
75:32 - after we use the print statement we will
75:34 - enter a new line character and move down
75:36 - to the next line
75:37 - we can actually prevent that by adding
75:39 - comma
75:40 - and equals quotes so after using a print
75:45 - statement
75:45 - this will prevent our cursor from moving
75:47 - down to the next line
75:49 - so pay attention to the indentation too
75:52 - so there's kind of two levels of
75:53 - indentation
75:54 - we're currently within the inner for
75:56 - loop so that's pretty much it for the
75:58 - inner for loop now we're going to
76:00 - print a new line once we exit the inner
76:02 - for loop
76:03 - and you can see that the indentation is
76:05 - on
76:07 - this line right here we're within the
76:08 - outer for loop now
76:10 - and that's pretty much it so let's try
76:12 - this program
76:13 - how many rows let's say five rows how
76:16 - many columns perhaps six
76:19 - what symbol do we want to use let's say
76:21 - the dollar sign
76:22 - and let's try it there we go there's our
76:25 - rectangle
76:26 - so we have let's see six columns one
76:30 - two three four five six and five rows
76:32 - one
76:33 - two three four five in summary
76:36 - a nested loop is really just this
76:38 - concept of having
76:39 - one loop inside of another loop it
76:41 - doesn't matter if it's a while loop or a
76:43 - for a loop it's really situational
76:45 - the inner loop will finish all of its
76:47 - iterations before finishing
76:49 - one iteration of the outer loop so what
76:51 - we did to demonstrate that is that we
76:53 - had
76:54 - the outer loop in charge the rows and an
76:56 - inner loop in charge of the columns for
76:58 - our rectangle program
76:59 - so if you would like a copy of this
77:01 - program i will post this in the comment
77:03 - section down below
77:04 - but yeah that's the basics of nested
77:06 - loops in python
77:09 - hey what's going on everybody it's bro
77:11 - hope you're doing well
77:12 - and in this video i'm going to explain
77:14 - loop control statements in python
77:16 - so sit back relax and enjoy the show
77:21 - all right ladies and gentlemen let's
77:23 - talk about loop control statements
77:24 - these are used to change a loop's
77:26 - execution from its normal sequence
77:29 - and there are three we're going to
77:30 - discuss break continue
77:32 - and pass let's begin with break break is
77:35 - used to terminate the loop entirely
77:37 - now here's a good example of where a
77:39 - break would be useful
77:40 - let's say while true we're going to
77:43 - continually ask
77:44 - for somebody's name if they don't type
77:46 - in anything then we'll continue the
77:48 - while loop over and over again
77:49 - so let's say name equals input
77:55 - enter your name now
77:58 - if name does not equal
78:02 - a set of quotes that means they don't
78:04 - type in anything then
78:05 - we will break and break out of this
78:08 - while loop and let's test it
78:10 - enter your name nah i don't think so i'm
78:12 - too lazy to enter my name
78:14 - all right i can see that i'm not going
78:15 - to escape this while loop so i'm going
78:17 - to type in my name because i give up
78:19 - and hit enter therefore i will break and
78:22 - exit out of this while loop
78:23 - so a break is used to terminate the loop
78:26 - entirely when it's encountered
78:28 - next we have continue continue skips to
78:30 - the next iteration of the loop
78:32 - now let's say we have a phone number
78:35 - phone
78:35 - underscore number and i will set the
78:38 - sequel to
78:39 - let's say a random phone number
78:40 - including dashes 123-456-7890
78:45 - what i would like to do is to display
78:47 - this number within the console window
78:49 - without these dashes
78:51 - this is how to do that using a continue
78:53 - control statement
78:54 - for i in phone number
79:00 - so for each character within our string
79:03 - of phone number
79:04 - what we'll do is check to see if we
79:06 - encounter a dash character
79:08 - if i i is our index is
79:11 - equal to a dash then we want to
79:15 - continue and skip over this iteration of
79:18 - the loop
79:19 - so continue
79:23 - then i would like to print
79:26 - whatever our indexes whatever character
79:29 - we're working on
79:30 - so if i were to run this as it is it's
79:32 - going to print each digit
79:34 - on a new line so with print statements
79:37 - they will add a new line character to
79:39 - the end of your string
79:40 - and you can actually change that by
79:42 - adding to the end comma
79:44 - end equals and then a set of quotes so
79:47 - this will print my phone number without
79:49 - any dashes
79:50 - one two three four five six seven eight
79:51 - nine zero so that's a use of
79:54 - the continue control statement it skips
79:56 - to the next iteration of the loop
79:58 - last but not least we have pass pass
80:01 - does nothing
80:01 - it acts as a placeholder let's say that
80:04 - i would like to print the numbers
80:05 - 1 through 20 using a for loop for i
80:09 - in range 1 through 21 and remember that
80:13 - the second digit is
80:14 - exclusive so this will iterate once
80:16 - through the digits of 1
80:18 - through 20. let's pretend that i'm
80:20 - highly superstitious and i don't want to
80:22 - print
80:22 - the number 13 because 13 is considered
80:24 - an unlucky number
80:26 - if i is equal to 13
80:29 - what we'll do is pass and pass acts as a
80:31 - placeholder and it won't do anything
80:34 - else print
80:37 - i that's one i there we go
80:40 - this will print the numbers 1 through 20
80:42 - and skip 13 because we used
80:44 - the past control statement which does
80:47 - nothing it acts as a placeholder
80:49 - so everybody those are loop control
80:51 - statements they change
80:52 - a loop's execution from its normal
80:54 - sequence we have break
80:56 - continue and pass so if you would like a
80:59 - copy of all this code
81:00 - i will post all of this in the comments
81:01 - section down below but yeah those are a
81:03 - few
81:04 - loop control statements in python what's
81:07 - going on everybody
81:08 - it's bro hope you're doing well and in
81:10 - this video i'm going to explain
81:12 - lists in python so sit back relax
81:15 - and enjoy the show
81:19 - all right ladies and gentlemen let's get
81:21 - down to business i got to explain
81:23 - lists to you all now a list is used to
81:25 - store
81:26 - multiple items within a single variable
81:29 - for example let's say we have a variable
81:32 - called food
81:33 - and i will store a string value of pizza
81:36 - because i like pizza
81:37 - what we could do is that we can store
81:40 - multiple items within this
81:42 - variable by turning this variable into a
81:44 - list
81:45 - and in order to do so we're going to
81:47 - surround all of the values that we would
81:49 - like to add
81:50 - to our list with a set of square
81:52 - brackets
81:53 - and boom there you have it we now have a
81:56 - list called food it is no longer
81:58 - a variable so what we could do is add
82:01 - multiple items to this list of food so
82:04 - let's add some other food items that we
82:06 - might like
82:07 - let's see i also like maybe some
82:09 - hamburgers
82:11 - and a hot dog
82:15 - and maybe some spaghetti i think i
82:18 - smelled spaghetti right
82:19 - okay so we now have a list called food
82:22 - now what happens if we attempt to print
82:25 - this list of food
82:26 - so print food so this will
82:30 - print all of the elements found in this
82:34 - list
82:34 - each item in a list is referred to as an
82:37 - element
82:38 - if we need to access a certain element
82:41 - of
82:41 - this list we have to list the index so
82:44 - next to our list we'll add a set of
82:46 - square brackets again
82:47 - and we need to list the numbered index
82:49 - of the element that we're trying to
82:51 - access
82:52 - now computers they always start with
82:53 - zero so the first
82:55 - element in our list would be element
82:58 - number zero
82:59 - the next one would be one two and three
83:02 - so if we need to access element zero
83:06 - which is in the first position we would
83:07 - say food square brackets
83:10 - and then within here list the index so
83:12 - the first position
83:13 - is zero and this will now print the
83:15 - first element of our list
83:17 - which is pizza let's attempt to access
83:19 - some of these other elements
83:20 - so the element at index one would be
83:24 - you guessed it hamburger two
83:28 - would be hot dog and three would be
83:30 - spaghetti
83:31 - now what happens if we attempt to access
83:34 - the element at index four
83:36 - well currently that's out of range
83:38 - because we did not assign
83:40 - a value so we're experiencing an error
83:42 - an index
83:43 - out of range error but if i were to add
83:46 - another element
83:47 - let's say pudding alright well then
83:51 - the element at index 4 would be putting
83:54 - then
83:55 - one important concept with lists is that
83:57 - you can always
83:58 - update and change the elements found
84:00 - within a list
84:01 - later on in the program after you
84:03 - declare one so let's say we would like
84:05 - to
84:05 - immediately change one of these elements
84:08 - let's say
84:09 - food at index zero i want to
84:12 - replace with maybe sushi because sushi
84:15 - is great
84:16 - so if i were to print the element at
84:18 - index
84:19 - 0 this would no longer be pizza because
84:22 - we updated element 0 to be
84:25 - sushi then and this prints sushi now if
84:28 - you need to display
84:29 - all of the elements found within a list
84:31 - you can easily do so with a standard for
84:34 - loop
84:34 - what we'll do is say for x in
84:38 - the name of our list which is food
84:41 - print x and let me turn this line into a
84:45 - comment
84:46 - all right so this for loop will print
84:49 - all of the elements found within our
84:51 - list
84:51 - of food and the results are sushi
84:55 - hamburger hot dog spaghetti and pudding
84:57 - all right people for this next portion
84:59 - i'm going to demonstrate a few useful
85:01 - functions of
85:02 - lists and to access some of these
85:04 - functions type the name of your list
85:06 - dot and there's a bunch to choose from
85:08 - here let's begin with
85:10 - event we can add an element to this list
85:12 - let's say at the end i would like to add
85:14 - ice cream so then if i were to display
85:17 - my list we now have ice cream at the end
85:20 - because we appended
85:22 - this value to my list of food so let's
85:24 - go over a few others
85:26 - so we can also remove a value food
85:29 - dot remove let's say i would like to
85:32 - remove
85:32 - hotdog so i'm going to type that within
85:36 - my function and this will remove hotdog
85:39 - and that is no longer here
85:42 - next we can pop food.pop
85:46 - pop will remove the last element so this
85:50 - will remove
85:52 - pudding
85:54 - we can insert a value at a given index
85:57 - food dot insert we need to list an index
86:01 - let's say zero that would be the first
86:03 - position technically that's where pizza
86:05 - is currently
86:06 - and i would like to add cake
86:10 - and at index 0 we now have cake
86:14 - so next up we have sort
86:17 - food dot sort this will sort a list
86:20 - alphabetically
86:22 - so in the first position we have
86:24 - hamburger hot dog pudding spaghetti
86:26 - then sushi we can also clear a list
86:31 - food dot clear and this will remove
86:34 - all of the elements of a list so this
86:37 - will not print anything because we
86:39 - cleared the list
86:40 - well everyone in conclusion a list is
86:42 - really just a variable that can store
86:45 - multiple values think of it that way so
86:48 - if you would like a copy
86:50 - of all the code that we have written
86:51 - here today i will post all of this in
86:53 - the comments down below
86:54 - but yeah that's how lists work in python
86:58 - how's it going everybody it's bro hope
87:00 - you're doing well
87:01 - and in this video i'm going to explain
87:02 - 2d lists in python so sit back
87:05 - relax and enjoy the show
87:10 - i have a super quick video for you all
87:12 - today on
87:13 - 2d lists also referred to as
87:15 - multi-dimensional lists
87:17 - all it is is a list of separate lists
87:20 - so let's begin by creating a few
87:22 - separate lists let's say we have a list
87:24 - called drinks and let's assign a few
87:27 - values
87:28 - let's say we have coffee as well
87:32 - as soda and maybe some tea
87:35 - all right so we currently have one list
87:37 - let's make maybe two more let's make a
87:39 - list called
87:40 - dinner and maybe in here we'll place
87:44 - pizza then hamburger
87:50 - and hot dog okay
87:53 - then let's create one more for this
87:55 - example let's say dessert
87:59 - and maybe we'll add two items
88:02 - they all don't need the same amount of
88:03 - items or elements so we have cake
88:06 - and ice cream
88:09 - all right so we have three lists one
88:12 - called drinks
88:13 - dinner and dessert so what we can do is
88:16 - add
88:16 - all of these lists to one list
88:19 - and let's create a list called food food
88:22 - equals and for each of these elements
88:24 - we're going to place
88:25 - our lists so we have drinks dinner
88:29 - and dessert check this out what if i
88:32 - were to
88:33 - print my 2d list of food
88:36 - so what ends up happening is that this
88:38 - will print all of the elements
88:40 - found within each individual list and
88:42 - they're all grouped together
88:44 - so this first portion is my drinks list
88:48 - which contains coffee soda tea this next
88:51 - element
88:51 - is my dinner list which contains pizza
88:54 - hamburger hot dog and the last element
88:57 - dessert contains cake and ice cream if i
89:00 - need to access
89:02 - just one of these lists i will add an
89:04 - index
89:05 - after my food 2d list and
89:08 - set an index number so index zero is
89:11 - referring to my first
89:13 - list of drinks and this will display all
89:15 - of the elements found within my first
89:17 - list
89:18 - and if i need just one of these elements
89:21 - i will add
89:22 - a second set of square brackets and list
89:24 - the index of the item that i'm trying to
89:27 - access
89:27 - so this very first item coffee would be
89:31 - index zero and then index zero again so
89:33 - we need
89:34 - two sets of square brackets and if i
89:36 - were to print this
89:37 - this will display coffee so if i go down
89:40 - the list
89:40 - the next element would be soda
89:44 - and then t if i were to change the index
89:47 - within
89:47 - this first set of square brackets well
89:50 - now we're working with
89:51 - a different list this time we're working
89:53 - with our dinner list
89:54 - so the element at index 1
89:58 - index 2 that would be our dinner list
90:01 - and this will display the element of hot
90:03 - dog
90:04 - if i change this to the next list which
90:06 - would be dessert
90:08 - well we're going to receive an index out
90:10 - of range error because
90:11 - we only have two values within this list
90:14 - cake and ice cream there is no element
90:18 - at index 2 because we only added two
90:21 - elements
90:22 - to this list of dessert all right
90:24 - everybody so that
90:26 - is 2d lists also referred to as
90:29 - multi-dimensional lists
90:30 - it's a list of separate lists if you
90:33 - need to access
90:34 - one of the elements within your 2d list
90:36 - you need
90:37 - two sets of square brackets so if you
90:40 - would like a copy of this code
90:41 - i will post this in the comments down
90:43 - below but yeah that's how
90:44 - 2d lists work in python hey what's going
90:48 - on people
90:48 - it's you bro hope you're doing well and
90:50 - in this video i'm going to explain
90:51 - tuples in python so
90:53 - sit back relax and enjoy the show
90:58 - so tuples they are collections which are
91:01 - ordered
91:01 - and unchangeable they're very similar to
91:03 - lists but they're ordered
91:05 - and we can't change them they're useful
91:07 - for grouping together related data
91:09 - let's say we would like to create some
91:10 - sort of student record
91:12 - so we can create a tuple to take care of
91:14 - that for us so let's say we would like
91:16 - to create a tuple called student
91:18 - the process of creating a tuple is very
91:20 - similar to lists
91:22 - but instead of using a set of square
91:24 - brackets to place all of the values
91:26 - within
91:26 - we're going to use a set of parentheses
91:29 - and now we can add a bunch of values
91:31 - related to this collection of student
91:33 - so let's add some student information
91:35 - let's say that this student's name is
91:37 - bro
91:38 - let's give him an age as well as a
91:40 - gender
91:41 - all right so there you have it we now
91:43 - have a tuple called student
91:45 - and let's take a look at some of the
91:46 - functions related to tuples
91:48 - and you can access them by typing
91:49 - student dot
91:51 - and then there are a few here not as
91:53 - many as lists we have count and we have
91:55 - index
91:56 - so we can find the count of how many
91:58 - times a value appears
92:00 - let's count how many times the value of
92:03 - bro appears
92:04 - so we'll need to put this within a print
92:06 - statement so we can actually see it
92:08 - so bro appears
92:12 - one time within this tuple there is also
92:14 - an index method as well
92:16 - so type the name of your tuple dot
92:19 - and we will use the index method we can
92:22 - find the index of a certain value
92:24 - let's say we would like to find the
92:26 - index of mail
92:27 - and then i will just print this to the
92:29 - console window
92:31 - so the index of the value mail would be
92:34 - at two zero one
92:37 - two that's it for the methods available
92:40 - to tuples
92:41 - a few tricks that you can do with tuples
92:42 - is that you can display
92:44 - all of the contents within a tuple using
92:47 - a for loop
92:48 - let's say 4x in student
92:51 - we will print x so
92:55 - this will iterate once through all the
92:57 - values found within our tuple
92:59 - of student and we can also check to see
93:02 - if a certain value
93:03 - exists within our tuple using an if
93:05 - statement let's say if
93:07 - bro in student
93:11 - if this is true then what do we want to
93:13 - do let's say
93:14 - print bro is here
93:17 - all right so since bro is within here
93:21 - this will be true and this will print
93:23 - our
93:24 - statement of bro is here all right
93:27 - everybody like i said this is a super
93:29 - quick video on tuples
93:31 - they're very similar to lists except
93:34 - they are ordered and unchangeable if
93:36 - you'd like a copy of all this code i
93:38 - will post all of this in the comments
93:39 - down below
93:40 - and don't forget to smash that like
93:42 - button drop a comment down below
93:44 - and subscribe if you'd like to become a
93:46 - fellow bro
93:47 - hey what's going on everybody it's you
93:49 - bro hope you're doing well
93:51 - and in this video i'm going to explain
93:52 - what a set is in python so
93:55 - sit back relax and enjoy the show
94:00 - a set is a collection which is unordered
94:03 - as well as being
94:04 - unindexed they do not allow any
94:06 - duplicate values
94:07 - for example let's create a set of
94:10 - silverware
94:10 - so in order to create a set we need a
94:12 - name for this set
94:14 - let's call it utensils equals
94:17 - and in order to create a set we need to
94:19 - surround all values with a set
94:21 - of curly braces now let's add a few
94:23 - utensils
94:24 - to the set called utensils let's add a
94:27 - fork
94:29 - a spoon and maybe a knife and that
94:32 - should be good
94:33 - and let's display all of the values for
94:36 - x in utensils
94:41 - print x now with sets
94:44 - they're different from lists because
94:46 - they're unordered as well as being
94:48 - unindexed
94:49 - if i were to print all of the elements
94:51 - in utensils
94:52 - they might not necessarily be in the
94:54 - same order in which we placed them
94:56 - for example when we printed all of the
94:59 - elements found within utensils
95:00 - first we had a knife a fork and then a
95:03 - spoon if i were to run this again
95:05 - they might be in a different order kind
95:07 - of like that
95:08 - so a set is actually faster than a list
95:11 - if you need to check to see if something
95:14 - is within a set compared to a list and
95:16 - they do not allow any duplicate values
95:19 - let me add a bunch of knives and let's
95:21 - see what happens
95:22 - so i'll have a total of three knives but
95:26 - when we print all of the elements
95:28 - of the set only one knife appears so
95:30 - here's a few useful methods of sets
95:34 - the first method is that we can add an
95:36 - item to our set
95:37 - so type in the name of the set in this
95:40 - case it's utensils dot and here's a
95:42 - bunch of methods that you can use
95:44 - i am looking for add and we can add an
95:47 - element to the set
95:48 - i would like to add a napkin
95:52 - and then if we were to print the set we
95:54 - do have a napkin
95:56 - within the set we can also remove an
95:58 - element
95:59 - utensils dot remove
96:02 - and i would like to remove the fork
96:08 - and now our fork is gone we can also
96:11 - clear
96:12 - utensils dot clear
96:16 - and all the elements within our set
96:18 - should be gone
96:20 - so let me turn these lines into a
96:22 - comment
96:23 - all right for this next example we'll
96:25 - need a second set
96:26 - let's create a second set called dishes
96:30 - and then we need a set of curly braces
96:33 - and
96:33 - let's add a bowl
96:36 - a plate and a cup
96:40 - our next method is that we're going to
96:43 - add one set to another by using the
96:45 - update method
96:46 - let's say we would like to add our
96:48 - dishes set to our utensil set
96:51 - so let's type utensils dot and use the
96:54 - update method
96:54 - and within this method we will pass in
96:57 - the set that we would like to add
96:59 - so utensils update dishes this will add
97:02 - all of the elements found within dishes
97:04 - to our utensil set and you can see that
97:07 - when we print our utensils
97:08 - we have a bowl a plate and a cup in here
97:12 - as well
97:12 - and then if i were to switch these
97:14 - around let's say dishes
97:16 - update utensils and then i will
97:20 - print everything found within dishes now
97:23 - there's a fork a spoon
97:25 - and a knife in here as well we can also
97:28 - join
97:28 - two sets together and create a new set
97:31 - entirely
97:32 - so let's create a set called dinner
97:34 - table like we're setting up a dinner
97:36 - table and we need a fork a spoon a knife
97:39 - a bowl a plate and a cup
97:40 - so we have a dinner table set
97:44 - we're going to set the sequel to either
97:46 - utensils
97:48 - dot union
97:51 - dishes or we could do dishes
97:54 - union utensils either way would work and
97:57 - let's display all the elements found
97:59 - within dinner table
98:00 - and we should now have elements from
98:02 - both sets utensils
98:04 - and dishes as well there are also some
98:07 - methods in which we can compare
98:09 - the similarities as well as the
98:11 - differences between
98:12 - the elements found within two sets let's
98:14 - say i would like to check to see
98:16 - what utensils has that dishes doesn't
98:19 - and for this example i think i'll add a
98:21 - knife
98:22 - to my dishes set just so that they have
98:24 - at least one thing in common
98:26 - so i would like to see what utensils has
98:29 - that dishes doesn't so we can do so
98:31 - using the
98:32 - difference method and i will print the
98:35 - results with a print statement
98:36 - so i'm going to compare utensils against
98:40 - dishes utensils
98:45 - dishes and this will print what utensils
98:48 - has
98:49 - that dishes doesn't which is a fork as
98:52 - well as a spoon
98:54 - and we can reverse the rolls too we
98:56 - could say dishes difference
98:58 - utensils what do dishes have that
99:01 - utensils doesn't
99:02 - and dishes has a cup a bowl and a plate
99:06 - they both have knives so that's why
99:08 - knife isn't appearing
99:10 - we can also check to see if there's
99:12 - anything that they have in common
99:13 - using the intersection method so i'll
99:16 - turn this line into a comment
99:20 - we'll print utensils
99:23 - dot intersection
99:27 - dishes and this will return whatever
99:30 - element that they have in common
99:32 - which is a knife all right everybody in
99:35 - conclusion a set
99:36 - is a collection which is unordered as
99:39 - well as being
99:40 - unindexed they do not allow any
99:42 - duplicate values
99:43 - and you can do things like compare two
99:45 - sets see if there's anything that they
99:47 - have in common any differences
99:49 - and we can add or remove elements to a
99:51 - set if you'd like a copy of all this
99:53 - code i will post all of this in the
99:55 - comments down below
99:56 - don't be afraid to smash that like
99:58 - button drop a comment down below
100:00 - and subscribe if you'd like to become a
100:02 - fellow bro hey what's going on everybody
100:05 - it's you bro hope you're doing well and
100:06 - in this video i'm going to explain
100:08 - how dictionaries work in python so sit
100:11 - back
100:11 - relax and enjoy the show
100:15 - all right let's get down to business a
100:17 - dictionary is a
100:19 - changeable unordered collection of
100:22 - unique key value pairs they're fast
100:25 - because they use hashing
100:27 - and they allow us to access a value
100:29 - quickly
100:30 - now to create a dictionary it's very
100:32 - similar to creating a
100:33 - set based on the last video except we're
100:36 - going to store
100:36 - unique key value pairs let's create a
100:39 - dictionary
100:40 - of countries and their capitals we can
100:43 - store those
100:44 - as key value pairs so let's call this
100:46 - dictionary
100:48 - capitals capitals equals then we need a
100:51 - set of curly braces much like what we
100:53 - use
100:53 - with sets now we need a key
100:56 - and a value let's say we have the usa as
100:59 - a key
101:00 - and the capital of the usa would be
101:03 - washington dc
101:04 - so in order to associate a value with
101:06 - the key we'll follow the key with a
101:08 - colon
101:09 - and then add some value and the data
101:11 - type really doesn't matter but
101:12 - in this case we're just using strings so
101:14 - the capital of the usa
101:16 - would be washington dc
101:19 - and to add another key value pair we'll
101:21 - separate each with a comma
101:23 - and let's add a few others for good
101:25 - measure so let's say we have india next
101:28 - as a key and the value would be
101:31 - new delhi and we'll add two more
101:35 - let's say we have china
101:38 - and the capital of china is beijing
101:41 - and lastly let's add russia
101:46 - and the capital of russia is moscow
101:49 - and there you have it ladies and
101:51 - gentlemen we now have a dictionary
101:53 - called capitals
101:54 - that has unique key value pairs so
101:57 - remember with
101:58 - dictionaries they are unordered in order
102:00 - to access one of these values
102:02 - instead of using a numbered index we're
102:04 - going to use the associated key with
102:06 - that value
102:07 - here's an example let's say i would like
102:09 - to print the capital
102:10 - of russia so i need to use this key of
102:14 - russia
102:14 - so in order to do this type in the name
102:16 - of the dictionary
102:18 - followed by a set of straight brackets
102:20 - and then instead of an
102:21 - index number like 0 or 1 2 3
102:25 - i'm going to use the key so i would like
102:27 - to print
102:28 - the value that's stored or associated
102:31 - with the key
102:31 - of russia so when i run this this will
102:35 - print
102:36 - that value which is moscow so this isn't
102:39 - always safe
102:40 - let's say we have a key that doesn't
102:41 - exist like germany
102:43 - germany is not currently within my
102:44 - dictionary so if i were to run this
102:47 - well then my program is going to
102:49 - encounter an error
102:51 - and this will interrupt the normal flow
102:52 - of my program
102:54 - a much safer way to access a key
102:57 - to check to see if it's there or not is
102:59 - to use the get method
103:01 - of dictionaries so i'm going to turn
103:03 - this line into a comment and let's try
103:04 - this again but this time we'll use the
103:06 - get method
103:07 - so type in the name of the dictionary
103:09 - dot get
103:12 - and list the key that you want to use
103:15 - so i would like to see if germany
103:18 - is within my dictionary currently there
103:21 - isn't so this will return
103:23 - none and we will not encounter an error
103:25 - so this is a much
103:26 - safer way of checking to see if there is
103:28 - a key within your dictionary
103:30 - here's a few other useful methods there
103:32 - is a method to print only the keys
103:35 - so we type in the name of the dictionary
103:38 - capitals
103:39 - and here's a listing of all of the
103:41 - methods that we have access to
103:42 - i'm looking for the keys method and this
103:45 - will print
103:46 - only the keys and not the values we can
103:49 - also print
103:50 - just the values and not the keys so type
103:53 - in the name of the dictionary again
103:55 - capitals dot values
103:59 - and this will print only the values or
104:02 - you could print everything
104:03 - both the keys and the values and you do
104:06 - so by using
104:07 - the items method capitals
104:10 - dot items
104:15 - and this will print your entire
104:16 - dictionary one other way in which we can
104:18 - display
104:19 - all of the key value pairs in a
104:21 - dictionary is to use a for loop
104:23 - so at the end let's create a for loop
104:25 - for
104:26 - key comma value in
104:30 - capitals dot items
104:33 - this is going to iterate once for each
104:36 - key value pair
104:37 - in my dictionary for each key value in
104:40 - capitals
104:40 - dot items print
104:44 - key comma value
104:47 - and this will print my entire dictionary
104:50 - a feature of dictionaries
104:51 - is that they are mutable that means we
104:54 - can change them or alter them
104:55 - after the program is already running so
104:58 - one way in which we can do that
104:59 - is to use the update method of
105:01 - dictionaries
105:02 - so let's add germany as a key and give
105:06 - it a value
105:06 - of berlin so type in the name of the
105:09 - dictionary capitals
105:11 - and we'll use the update method and
105:13 - within the parentheses of this method
105:15 - we'll add a set of curly braces and now
105:18 - we can add a new
105:19 - key value pair so let's add germany
105:23 - and a value of berlin so if i were to
105:27 - run this and display
105:28 - all of the key value pairs found within
105:30 - my dictionary we now have
105:32 - germany as a key and berlin as its value
105:35 - not only can you use the update method
105:38 - to add a new
105:39 - key value pair but you can update an
105:41 - existing one let's say we would like to
105:43 - change the
105:44 - capital of usa so capitals
105:47 - dot update parentheses curly braces
105:51 - list the key usa colon
105:54 - and then we can give the usa a new value
105:57 - let's pretend that the united states
105:59 - government has decided to relocate
106:01 - their capital to las vegas
106:05 - so this will now update our key of usa
106:08 - with a new value and if i were to print
106:11 - all of the key value pairs found within
106:14 - my dictionary of capitals the usa has a
106:16 - new value
106:17 - of las vegas so the last two methods i'm
106:21 - going to cover are both pop
106:22 - and clear you can use the pop method to
106:25 - remove
106:25 - a key value pair so capitals
106:29 - dot pop parentheses and list the key
106:32 - of the key value pair that you would
106:34 - like to remove so let's say we would
106:36 - like to remove china
106:37 - so we'll list that key and then when we
106:39 - use the pop method
106:41 - that will remove this key value pair
106:44 - from my dictionary
106:45 - and then of course we have clear as well
106:47 - which will just remove everything
106:49 - capitals dot clear
106:52 - and this will clear my dictionary all
106:55 - right everybody
106:56 - so in conclusion a dictionary is a
106:58 - changeable
106:59 - unordered collection of unique key value
107:02 - pairs
107:03 - they're fast because they use hashing
107:05 - and they allow us to access a value
107:07 - quickly
107:08 - well that's the basics of dictionaries
107:10 - in python
107:11 - if you would like a copy of all this
107:13 - code i will post all of this in the
107:15 - comments down below
107:16 - but yeah that's how dictionaries work in
107:18 - python
107:20 - hey what's going on everybody it's bro
107:22 - hope you're doing well and in this video
107:24 - i'm going to teach you guys all about
107:25 - the index
107:26 - operator in python so sit back relax
107:29 - and enjoy the show
107:32 - all right people let's begin i'm going
107:34 - to be explaining the index operator
107:36 - which is represented by
107:38 - a set of square brackets now they give
107:41 - access
107:41 - to a sequences elements they include but
107:44 - are not limited to
107:46 - strings lists and tuples for this
107:48 - example we're going to be working with
107:50 - strings because strings are easy to work
107:52 - with
107:52 - let's say we have a name and name equals
107:55 - whatever your first
107:56 - and last name is we can use the index
107:58 - operator to access
108:00 - an element of the sequence our string
108:03 - so let's check to see if the first
108:05 - letter in our name
108:07 - is lowercase and i should probably
108:09 - change that to lowercase for this
108:11 - example
108:11 - so within an if statement if name and we
108:14 - can add a set
108:16 - of square brackets after our sequence
108:19 - which is a string and we can check
108:22 - a given element of our sequence let's
108:25 - check to see
108:26 - if the first letter is lowercase
108:29 - now with computers they always start at
108:31 - zero if you need to access the first
108:33 - element
108:33 - in a sequence that would be index zero
108:36 - and then the next sequence well the next
108:38 - element in the sequence would be one
108:40 - then two then you followed that pattern
108:42 - so i would like to check to see if
108:44 - name at index zero that would be the
108:47 - first character
108:48 - is lowercase so there is a method to
108:51 - check that
108:52 - dot is lower this will return
108:55 - true or false if the first letter is
108:58 - lowercase
108:59 - then our if statement is going to be
109:00 - resolved to true
109:03 - and what i could do is that i can
109:06 - perhaps change it
109:07 - to uppercase then so let's reassign
109:10 - name to equal name dot
109:14 - and there is a capitalize function here
109:17 - and then let's print our name print
109:21 - name so when we run this
109:24 - the first letter in my name is now
109:27 - capitalized
109:28 - so if you need to access an element
109:30 - within a sequence a string or
109:32 - list or a tuple you would add a set
109:36 - of square brackets afterwards and then
109:38 - you list an integer
109:39 - of the element that you're trying to
109:41 - access so here's a few other examples
109:43 - i'm going to turn
109:44 - this as well as this into a comment
109:47 - and let's say we would like to create
109:49 - some substrings and we can do so
109:51 - using our index operator so i would like
109:54 - to
109:54 - create a substring from the first part
109:57 - of my name
109:57 - so what i'll do is create a new variable
110:00 - first
110:01 - name equals name index operator
110:05 - so you can specify a range for an index
110:08 - operator
110:09 - so you would set the starting position
110:12 - on the left hand side followed by a
110:14 - colon and then your ending position
110:16 - so i would like the substring to begin
110:18 - at index 0 and
110:19 - end at 3 so that would be 0 colon
110:22 - then three all right and then i would
110:25 - like to make this all
110:26 - uppercase for some reason and then let's
110:29 - print my first name
110:33 - so with the index operator we specified
110:35 - a range
110:36 - we would like to access elements 0
110:39 - through
110:39 - 3. turn them up your case and assign
110:42 - them to a new
110:42 - variable of first name here's a shortcut
110:45 - that you might find useful
110:46 - if the index for your range begins with
110:49 - zero you can actually delete that you
110:50 - don't even necessarily need that zero
110:52 - now we just have a colon three and this
110:55 - would work the same as it did before
110:57 - so that's a useful shortcut and we're
110:59 - going to bring it up later if we need to
111:00 - access the last element in a sequence
111:03 - this time let's create a
111:05 - substring of last name so last
111:09 - name equals name index operator
111:13 - this time i would like to access the
111:16 - element at index let's see 0 1
111:20 - 2 3 4. all right so i'm going to say
111:24 - for colon and we're not really sure
111:27 - where our name our last name is going to
111:29 - end
111:30 - so what you could do is just say colon
111:32 - and then leave
111:33 - the next index blank so that will be
111:36 - the index beginning at four and
111:38 - everything afterwards
111:40 - and let's say two lower to make this all
111:42 - lowercase for some reason
111:44 - so let's print our last name print
111:48 - last name so this should
111:52 - take everything starting at index 4
111:56 - and after that and turn it into its own
111:58 - substring of last name
112:01 - now you can access the last element in a
112:03 - sequence by using what's called
112:05 - negative indexing so let's add
112:08 - a exclamation point to the end of our
112:11 - name so let's say
112:13 - we have a new variable called last
112:16 - character and i would like to store
112:21 - the last character in my name to this
112:23 - new
112:24 - variable this new substring so to access
112:27 - the last
112:27 - element in a sequence within the index
112:31 - operator we can use
112:32 - negative indexing so the last element
112:35 - would be
112:36 - negative one all right and then let's
112:38 - print
112:39 - whatever our last character is so this
112:42 - should print an exclamation point
112:45 - yep which did so then if this was
112:48 - negative 2
112:48 - that would be the second to last element
112:51 - in a sequence
112:52 - so now that would be e because e is in
112:55 - the second to last
112:56 - element in my sequence all right
112:59 - everybody so that's the basics of the
113:01 - index operator
113:02 - you can add a set of square brackets
113:04 - after a string
113:05 - a list or a tuple and then list an
113:08 - integer or a range
113:10 - of the elements that you're trying to
113:11 - access so if you would like a copy of
113:13 - all this code i will post everything in
113:15 - the comments down below
113:16 - don't be afraid to help me out and smash
113:18 - that like button drop a comment down
113:20 - below
113:20 - and subscribe if you'd like to become a
113:22 - fellow bro
113:24 - hey what's going on everybody it's you
113:26 - bro hope you're doing well
113:27 - and in this video i'm going to explain
113:28 - how functions work in python so
113:31 - sit back relax and enjoy the show
113:36 - if you find this video helpful please
113:37 - remember to like
113:39 - comment and subscribe your support will
113:41 - help keep this channel running
113:43 - okay let's do this thing a function
113:46 - is a block of code which is executed
113:49 - only when it is called
113:50 - this process is also known as invoking a
113:53 - function
113:54 - with programming we try not to repeat
113:56 - code if we don't have to
113:57 - that's why functions are useful because
113:59 - our function can perform
114:01 - some specific task for us some block of
114:03 - code for us
114:04 - whenever it is called so we only need to
114:06 - write that block of code
114:08 - once and if we need to repeat it we just
114:10 - call this function one more time
114:12 - so let's define and create a function
114:13 - we'll create a function called hello
114:15 - and in order to define a function we'll
114:17 - type def
114:19 - and then a unique function name so let's
114:21 - call this function hello
114:23 - and with functions they always end with
114:25 - a set of parentheses
114:26 - and lastly to finish defining this
114:29 - function we'll add
114:30 - a colon at the end so if you go down to
114:33 - the next line
114:33 - take notice that my cursor is now
114:36 - indented
114:37 - any code underneath a function that is
114:39 - indented
114:40 - belongs to that specific function and
114:42 - will only execute
114:44 - whenever that function is called so for
114:47 - now we need to type in something
114:48 - if you don't know what you want your
114:50 - function to do you can always type pass
114:52 - for now
114:52 - but let's print something print the word
114:56 - hello and in order to call this function
115:00 - all we need to do within our program is
115:02 - type the name of the function which is
115:04 - hello
115:05 - and then add a set of parentheses
115:07 - because functions always end with a set
115:09 - of parentheses
115:10 - so what this will do is execute my
115:13 - function
115:13 - once and perform this block of code
115:15 - whenever it is called
115:17 - if i were to remove this well our
115:19 - program currently isn't going to do
115:21 - anything
115:21 - because functions only execute their
115:24 - block of code
115:25 - only when it is called so this time
115:27 - let's print the word
115:28 - hello three times so i will call this
115:31 - function
115:32 - three separate times hello hello hello
115:35 - so when i run this our hello function
115:38 - will be called
115:39 - three separate times now with functions
115:41 - they are not limited to just one line
115:44 - this is an entire block of code so maybe
115:46 - we can do something else too
115:48 - let's print have a nice
115:52 - day now if i were to run this my hello
115:55 - function is going to execute
115:56 - this entire block of code three separate
115:59 - times hello
116:00 - have a nice day now an important feature
116:03 - of functions
116:04 - is that we can send our function some
116:06 - information
116:07 - and our function can do something with
116:08 - that information that it receives
116:10 - let's say this time i would like to
116:11 - print hello plus somebody's name
116:14 - currently name is an unresolved
116:16 - reference what we can do
116:17 - when we call this function is send our
116:19 - function some information
116:21 - this can be a value a variable a
116:23 - collection
116:24 - all sorts of different things so if you
116:26 - need to send your function some
116:27 - information
116:28 - within the parentheses when you call
116:30 - that function just list the data that
116:32 - you want to send your function
116:34 - so let's say i would like to send my
116:36 - function a string
116:37 - value of bro whatever your first name is
116:40 - when you send information
116:41 - to a function these are called arguments
116:45 - they are the information that you're
116:46 - sending to a function
116:48 - and when you define that function you
116:50 - need a matching
116:52 - set of what is known as parameters
116:55 - so our hello function is going to
116:57 - receive one argument a string value
117:00 - we need a matching number of parameters
117:03 - currently this isn't going to work you
117:05 - can see here that hello
117:06 - takes zero positional arguments but one
117:09 - was given
117:10 - our function needs a matching number of
117:13 - parameters
117:14 - so think of it this way when we receive
117:17 - this value
117:17 - we're going to give a nickname to this
117:20 - value
117:21 - so when we receive the string value what
117:24 - do we want to call it
117:25 - well let's call it name so in order to
117:27 - add parameters
117:29 - to your function just list the
117:31 - parameters within
117:32 - the parentheses of that function and
117:35 - well this should work now
117:36 - we have a matching set of arguments and
117:40 - parameters when we call the hello
117:42 - function this time we are sending
117:44 - one argument over and when our hello
117:46 - function
117:47 - receives this argument we're going to
117:49 - give it a temporary nickname of
117:52 - name or you can call this whatever you
117:53 - want to and then we can use
117:55 - this value for whatever we want within
117:58 - our function
117:58 - now if we were to run this this will
118:00 - print hello bro
118:02 - have a nice day now i can send maybe a
118:04 - different value
118:05 - let's say hello and then i will send a
118:09 - string value of dude
118:11 - hello dude have a nice day so this isn't
118:14 - limited to
118:15 - just values we can send variables to
118:18 - let's say we have a
118:19 - variable called name equals
118:23 - bro and this time i'm going to send
118:26 - this variable over hello and then send
118:30 - name so these don't need to be the
118:34 - exact same let's say this is
118:37 - my name and i'm going to send
118:40 - my name over and i will temporarily give
118:45 - this value a nickname of just name
118:48 - and then i can use this variable for
118:50 - something hello bro
118:52 - have a nice day now with arguments you
118:55 - can send
118:55 - more than one value over let's say this
118:58 - time i would like to send
118:59 - two values over so let's send pro
119:02 - maybe for a first name and code for a
119:05 - second name but
119:06 - you can use your first name and last
119:08 - name so this isn't going to work because
119:10 - we do not have a matching set
119:13 - of arguments and parameters we're
119:15 - sending
119:16 - two arguments over but our function is
119:19 - only designed
119:20 - to accept one argument because we have
119:23 - one parameter so let's rename
119:26 - name as first name and we need
119:30 - two parameters this time so what are we
119:32 - going to call
119:33 - this value when we receive it let's call
119:35 - this last name
119:38 - so this time we are going to receive two
119:40 - values
119:42 - they will be nicknamed first name and
119:44 - last name so this time
119:45 - let's print hello first name
119:48 - maybe i'll add a space plus
119:52 - last name and this is now valid
119:56 - hello bro code have a nice day with
119:59 - arguments
119:59 - you can mix and match the data types
120:02 - that you're sending
120:03 - as arguments so currently we're sending
120:05 - two
120:06 - string values as arguments this time
120:08 - let's send an integer value
120:10 - let's say we would like to send an edge
120:13 - over to our hello function
120:15 - so i'll just send maybe the value of 21.
120:18 - so currently this isn't going to work
120:20 - because the hello function takes two
120:22 - positional arguments
120:23 - but three were given when we call this
120:26 - hello function we're sending
120:27 - this argument over but our function
120:30 - doesn't know what to do with this
120:31 - argument
120:32 - so we need a matching parameter for this
120:34 - value that it receives
120:36 - so let's call this value maybe edge as a
120:39 - temporary nickname
120:40 - and then we can do something with this
120:42 - value when we receive it
120:43 - so let's print an additional message
120:47 - perhaps u r plus
120:50 - age plus years
120:54 - old so if you need to display an
120:57 - integer or number along with the string
120:59 - you do need to convert it to a string
121:01 - so let's just cast our edge as a string
121:04 - when we display this
121:06 - so this should work now we now have a
121:08 - matching number
121:09 - of arguments and parameters so this will
121:13 - display
121:14 - hello bro code you are 21 years old have
121:16 - a nice day
121:17 - so ladies and gentlemen in conclusion a
121:20 - function
121:20 - is a block of code which is executed
121:23 - only when it is called
121:24 - if i were to remove this function call
121:27 - well then
121:28 - our program is just going to completely
121:30 - ignore this function and
121:31 - this block of code would not be executed
121:34 - when we call this function we can pass
121:36 - information known as arguments but we
121:39 - need a
121:40 - matching number of parameters set up to
121:42 - receive
121:43 - these arguments there are a few advanced
121:46 - features of parameters but
121:48 - i'll hopefully get to that in future
121:50 - videos we'll just stick with the basics
121:51 - for now of functions
121:53 - so that's the basics of functions if you
121:55 - would like a copy of this code
121:57 - i will post this in the comments down
121:59 - below but yeah that is how functions
122:01 - work in python hey what's going on
122:04 - everybody it's you bro hope you're doing
122:06 - well
122:06 - and in this video i'm going to explain
122:08 - the return statement in python so
122:10 - sit back relax and enjoy the show
122:15 - all right people let's begin the return
122:18 - statement is used within functions
122:19 - to send python values or objects back to
122:23 - the caller
122:23 - these values or objects are known as the
122:26 - function's
122:26 - return value so do you know how with
122:29 - functions we can pass
122:30 - arguments to a function and then our
122:32 - function can do something with those
122:34 - arguments
122:34 - well not only that but our function can
122:36 - pass some value or
122:38 - object back to the caller so what we'll
122:41 - do for this example is create
122:43 - a function that will simply multiply two
122:45 - numbers together
122:46 - and return the result back to the caller
122:49 - so let's define
122:50 - a function called multiply and we'll set
122:52 - up two parameters for this function
122:54 - let's say number one and number two
122:58 - and what we'll do is say result
123:01 - equals number one times number two
123:05 - and then at the end we can return
123:07 - something what do we want to return
123:08 - let's return whatever the result is now
123:11 - when we call this function we will pass
123:13 - in two values as arguments let's say we
123:16 - would like to multiply
123:17 - six times eight so when we run this well
123:20 - we can't actually see anything
123:22 - when we return the result after
123:24 - multiplying numbers
123:25 - one and two it's going to return the
123:27 - result back to the caller
123:29 - in order to see the value that is
123:31 - returned back to the caller
123:32 - one way in which we can do this is to
123:35 - print
123:35 - the value that is returned within a
123:38 - print statement
123:39 - so what we'll do is print the value that
123:41 - is returned after calling the multiply
123:44 - function
123:44 - so 6 times 8 is really great 6 times 8
123:47 - is 48
123:48 - now one other thing that we can do is
123:51 - store the returned value within a
123:53 - variable
123:54 - so let's say x equals multiply
123:58 - 6 times 8 and then we will print
124:00 - whatever x is
124:02 - so the result is still the same of 48
124:05 - now with the return value there is
124:07 - another way in which we could write this
124:09 - that uses
124:10 - less lines of code so we'll delete this
124:12 - first line and instead of returning
124:14 - a variable called result what we'll do
124:16 - is just return
124:18 - number one times number two and this
124:20 - would work the same as it does before
124:23 - but it's written in less lines of code
124:25 - so that's another way in which you could
124:26 - write this
124:27 - all right everybody so that is the
124:29 - return statement functions can send
124:31 - python values or objects back to the
124:34 - caller
124:34 - these values or objects are known as the
124:36 - functions return
124:38 - value you can either print this value
124:40 - directly to the console window
124:42 - or you can store it within a variable or
124:44 - some other location
124:46 - and well ladies and gentlemen that is
124:48 - how the return statement works in python
124:51 - what's going on everybody it's bro hope
124:53 - you're doing well
124:54 - and in this video i'm going to explain
124:56 - keyword arguments in python so
124:58 - sit back relax and enjoy the show
125:02 - all right everybody let's discuss
125:05 - keyword arguments
125:06 - these are arguments that are preceded by
125:09 - an identifier when we pass them to a
125:11 - function
125:12 - the order of the arguments doesn't
125:14 - matter unlike positional arguments
125:16 - which do matter and we've been working
125:18 - with positional arguments already
125:20 - and python knows the names of the
125:21 - arguments that our function receives
125:24 - when we use keyword arguments here's an
125:26 - example of us
125:27 - using positional arguments and then i'll
125:29 - demonstrate the benefits of
125:30 - keyword arguments let's say we have a
125:32 - function called hello
125:34 - that accepts three arguments a first
125:36 - name a middle name and a last name
125:38 - and the output will be hello first name
125:40 - middle name last name
125:41 - so if i were to run this this will
125:43 - display hello bro
125:45 - dude code so we're using positional
125:47 - arguments
125:48 - the order of the arguments does matter
125:50 - what do you think's gonna happen if i
125:52 - were to replace some of these values
125:54 - let's say i will swap the first argument
125:56 - with the
125:57 - third argument so let's try it again
126:01 - hello code dude bro so obviously the
126:04 - order of the arguments matters
126:05 - and now if we were to use keyword
126:07 - arguments then the order of the
126:09 - arguments
126:10 - doesn't matter but with each argument we
126:12 - need to precede each argument with
126:15 - a unique identifier and that identifier
126:18 - is the name of the parameter we want to
126:20 - associate each argument with
126:22 - so for my intended last name i will use
126:25 - an identifier of
126:26 - last to match this parameter so
126:29 - dude will be middle middle equals dude
126:32 - and bro
126:33 - will be first even though they're not in
126:35 - the correct order so let's try this
126:36 - again
126:37 - and my output is hello bro dude code
126:40 - so that's all about keyword arguments
126:43 - they are arguments
126:44 - preceded with an identifier when we pass
126:46 - them to a function
126:48 - the order of the arguments doesn't
126:49 - matter unlike positional arguments
126:51 - which do matter and then python knows
126:53 - the names of the arguments
126:54 - that our function receives when we use
126:56 - keyword arguments
126:58 - so that's it for keyword arguments if
127:00 - you would like a copy of this code
127:02 - i will post this in the comment section
127:03 - down below but yeah that's how keyword
127:06 - arguments
127:06 - work in python hey what's going on
127:10 - everybody it's you bro hope you're doing
127:12 - well and in this video i'm going to
127:13 - explain
127:14 - nested function calls in python so sit
127:16 - back
127:17 - relax and enjoy the show
127:21 - all right people nested function calls
127:24 - these are function calls
127:25 - inside of other function calls and this
127:27 - is possible because
127:29 - certain functions will return a value
127:31 - and we can immediately use that value as
127:33 - an argument for the next function
127:35 - so here's an example let's say that we
127:37 - have the small program
127:39 - where we will ask a user to type in a
127:41 - whole positive number
127:43 - and let's say i don't let's say i type
127:45 - in negative 3.14
127:47 - and then i'm storing that value within a
127:50 - variable
127:50 - named num what i'm going to do is
127:52 - convert that number
127:54 - to a floating point number because
127:55 - currently it's a string when you accept
127:57 - user input
127:58 - i will find the absolute value of num
128:01 - and then round it to the nearest whole
128:03 - number
128:03 - and then print the value so we can
128:05 - actually do this using less lines of
128:07 - code with nested function calls
128:09 - so let's start with the first function
128:11 - which will be accepting some user input
128:13 - the input function so this will be in
128:16 - the very center
128:17 - of our nested function calls and then
128:19 - the next function we would like to apply
128:21 - to
128:22 - the variable that is returned the value
128:24 - that is returned
128:25 - we will pass in as an argument to our
128:27 - next function of casting
128:29 - this data type to a float so we'll
128:31 - surround
128:32 - our function with another function and
128:34 - use
128:35 - the float function and then we'll just
128:38 - keep on adding layers to this
128:39 - so we have the absolute value function
128:42 - next
128:42 - so we'll add another layer and we have
128:45 - the round function
128:47 - so we'll add a layer to that and
128:50 - lastly we're going to print and that'll
128:52 - be the outermost layer
128:55 - so this program will do the exact same
128:57 - thing
128:58 - let's say negative 3.14 except we've
129:01 - written this with
129:02 - one line of code so basically we start
129:05 - with the innermost function and resolve
129:07 - that first
129:08 - whatever value is returned we use as an
129:10 - argument to the next outermost function
129:13 - and in this case it would be float then
129:15 - we resolve that then move on to absolute
129:18 - value then round and then print
129:20 - so it's just another way of writing code
129:22 - that takes up less
129:23 - lines but this is more of an extreme
129:25 - example you probably won't see
129:27 - like four or five nested functions well
129:29 - everybody those are nested function
129:31 - calls
129:32 - if you would like a copy of this code i
129:34 - will post all of this to the comment
129:35 - section down below
129:36 - but yeah those are nested function calls
129:39 - in python
129:40 - hey what's going on people it's your bro
129:42 - hope you're doing well and in this video
129:44 - i'm going to show you how variable scope
129:46 - works in python so
129:47 - sit back relax and enjoy the show
129:52 - all right let's do a thing people let's
129:54 - discuss the scope of a variable
129:56 - now the scope of a variable is the
129:58 - region that a variable
130:00 - is recognized a variable is only
130:02 - available from inside the region
130:05 - that it is created let's say that we
130:06 - have a function and i just gave this
130:08 - function a name of display name
130:10 - i created a variable inside of this
130:12 - function named name
130:14 - and you can assign this a value of
130:16 - whatever your name is
130:17 - preferably a last name for this example
130:19 - and what i'll do is just print
130:21 - whatever my name is so this variable is
130:24 - known to have
130:25 - a local scope because it's declared
130:28 - inside of a function
130:29 - and a variable is only recognized inside
130:32 - of the region
130:33 - that it is created this variable of name
130:36 - since it's created inside
130:37 - of this function it is known as a local
130:40 - variable
130:41 - that has a local scope it's only
130:44 - available
130:44 - inside of this function that it's
130:46 - created now let's attempt to access this
130:49 - variable from
130:50 - outside of our function so i'm going to
130:52 - print my
130:53 - name variable but we'll have an issue
130:55 - though
130:56 - so name name is not defined so
130:59 - local variables are declared inside of a
131:02 - function
131:03 - and they have a local scope they are
131:05 - only
131:06 - available inside of this function in
131:07 - which they're created
131:09 - on the other hand a global variable is a
131:12 - variable that is declared
131:14 - outside of any function but within your
131:16 - module that you're working with
131:17 - a global variable is known to have a
131:20 - global scope
131:21 - they are available inside and outside of
131:23 - any functions
131:24 - now if i was to print my name variable
131:27 - this is going to print
131:29 - bro or whatever your first name is and
131:31 - it is entirely possible to have both
131:33 - a global and local version of the same
131:35 - named variable
131:37 - so we have both a global version of name
131:39 - as well as a local version of name
131:42 - if i was to print my name variable from
131:45 - outside of this function
131:46 - it's going to print my global version
131:48 - however if i print
131:50 - my version of name inside of that
131:52 - function in which it's created
131:54 - we're going to first use the local
131:56 - version before the
131:57 - global version of name and let's try
131:59 - that so i'm going to call
132:01 - my display name function
132:04 - and this will print my last name
132:08 - code and then my first name of bro so it
132:11 - is possible to have a global
132:12 - and local version of the same named
132:15 - variable
132:16 - now if i was to remove this line where
132:18 - we declare a local version
132:20 - of name well then the next best
132:22 - available name to us would be
132:24 - the global version of name so if you use
132:26 - a variable inside of a function
132:28 - you'll first use a local version of that
132:31 - variable
132:32 - if it's available if not you'll use a
132:34 - global version instead
132:36 - and python will follow this rule known
132:38 - as the legb
132:40 - rule you use any local variables first
132:42 - then
132:43 - enclosed variables then global and then
132:45 - any built-in variables in that order
132:48 - so that's the main difference between
132:50 - local scope and
132:51 - global scope the scope of a variable is
132:54 - the region in which it's available
132:56 - and it's limited to the region in which
132:58 - it's created a local scope
133:00 - is available only inside of the function
133:02 - in which that variable is created
133:04 - a global scoped variable is a variable
133:07 - that is available
133:08 - inside and outside of any functions but
133:10 - within your module that you're working
133:12 - with
133:13 - so that's variable scope in python if
133:15 - you would like a copy of this code i
133:17 - will post this code to the comment
133:18 - section down below
133:19 - and well yeah that's how variable scope
133:22 - works in python
133:24 - hey what's going on everybody it's bro
133:26 - hope you're doing well
133:27 - and in this video i'm going to explain
133:29 - the arcs parameter in python so sit back
133:32 - relax and enjoy the show
133:36 - all right guys and gals let's talk about
133:38 - args
133:39 - now args is a parameter that will pack
133:42 - all arguments into a tuple
133:44 - it's useful so that a function can
133:45 - accept a varying amount of arguments
133:48 - here's an example of why it would be
133:50 - useful let's say we have a function
133:52 - called add that will accept two numbers
133:54 - as arguments
133:55 - and add them together and return the sum
133:57 - so this works as intended right as long
133:59 - as we pass in
134:00 - only two numbers but what if we need to
134:02 - pass in three numbers as arguments
134:04 - well we can no longer use this add
134:06 - function because we have two parameters
134:08 - set up
134:08 - but we're passing in three arguments you
134:10 - can see here within my console window
134:12 - that we have a type error
134:14 - add takes two positional arguments but
134:16 - three were given
134:17 - and one way in which we can solve this
134:19 - issue is to use this
134:20 - args parameter so what we're going to do
134:22 - is replace all of our parameters
134:24 - with asterisk args and actually
134:27 - the args portion isn't as important as
134:30 - the asterisk
134:31 - args is short for arguments and you can
134:32 - really name this whatever you want just
134:34 - be sure that you have this asterisk
134:36 - because with this asterisk we're doing a
134:38 - form of packing
134:39 - what we're doing is passing all of these
134:41 - arguments and packing them
134:43 - into a tuple so let's rewrite this
134:45 - program so let's say maybe sum
134:47 - equals zero and then we will need to
134:51 - iterate through all of the items within
134:53 - our tuple because
134:54 - tuples are iterable so let's say for i
134:57 - in args what we'll do is say sum
135:00 - plus equals whatever i is and at the end
135:03 - when we escape the for loop we will
135:05 - return
135:06 - our sum so let's try it again and see if
135:08 - it works
135:09 - well would you look at that it works
135:11 - let's pass in a few other arguments for
135:13 - good measure
135:14 - let's pass in six arguments this time
135:16 - all right look at that
135:17 - this does in fact work so you can
135:19 - actually name this whatever you want the
135:20 - important thing is to have this asterisk
135:23 - so let's rename this as i don't know
135:25 - stuff
135:26 - and let's try this again yep
135:29 - it still works with tuples they are
135:32 - ordered
135:32 - and unchangeable let's attempt to edit
135:34 - one of these values
135:36 - so let's say stuff at
135:39 - index zero is equal to
135:42 - zero and let's try and change it so you
135:45 - can see that tuple object does not
135:47 - support
135:48 - item assignment if you need to change
135:50 - one of the values
135:51 - within your tuple after you pack all of
135:54 - these arguments
135:55 - you might need to convert this to a
135:56 - different collection one way in which we
135:58 - can do that is to cast it
136:00 - let's say stuff equals and we'll cast
136:03 - our tuple as a list because a list
136:06 - can be changeable it's mutable so let's
136:09 - attempt this again we'll cast
136:11 - our tuple as a list and then edit one of
136:13 - the values
136:14 - and then add all the values together so
136:16 - to change one of the values
136:18 - say the name your collection stuff in
136:20 - this case let's say at index zero
136:22 - this now equals zero so now if we were
136:25 - to add all these items together
136:26 - they should equal 20. there we go so
136:29 - yeah that's basically the args parameter
136:32 - the name isn't as important as the
136:34 - asterisk because you can really name it
136:36 - whatever you want
136:37 - a common convention is to just name this
136:39 - args it's a parameter that will pack
136:41 - all arguments into a tuple it's useful
136:44 - so that a function can accept
136:46 - a varying amount of arguments well that
136:48 - is all about args
136:50 - if you would like a copy of this code i
136:51 - will post this in the comments section
136:53 - down below
136:54 - but yeah that is how the args parameter
136:56 - works in python
136:58 - hey what's going on everybody it's bro
137:00 - hope you're doing well and in this video
137:02 - i'm going to be explaining quarks
137:04 - in python so sit back relax
137:07 - and enjoy the show
137:10 - all right everybody let's talk about
137:12 - quarkx now this is a parameter that will
137:14 - pack
137:15 - all arguments into a dictionary it's
137:17 - useful so that a function can accept a
137:20 - varying amount of keyword arguments it's
137:22 - identical
137:23 - to args except with args args will
137:26 - accept a varying amount of positional
137:28 - arguments
137:29 - and pack them into a tuple with quarks
137:31 - this will accept a varying amount of
137:33 - keyword arguments
137:34 - and pack them into a dictionary so
137:36 - here's an example of why this would be
137:38 - useful
137:38 - let's say we have a function called
137:40 - hello that accepts two keyword arguments
137:43 - a first name
137:44 - and a last name all this will do is
137:46 - output hello
137:47 - your first name and last name but what
137:49 - if somebody has more than two names
137:51 - let's say somebody has a middle name
137:53 - and for this example i'll just say my
137:54 - middle name is dude
137:56 - so if i were to run this well this hello
137:59 - function is no longer going to work
138:01 - as you can see in the console window we
138:03 - have a type error
138:04 - the hello function got an unexpected
138:06 - keyword argument middle
138:08 - one way in which we can solve this we
138:10 - can use this quark's
138:11 - parameter so we can accept a varying
138:14 - amount
138:15 - of keyword arguments so what we'll do is
138:17 - replace
138:18 - our parameters with two asterisks then
138:21 - quarks now if i would like the same
138:23 - output as i had before i'm going to need
138:25 - to change a few things around
138:26 - in order to access a value within a
138:29 - dictionary you type the name of the
138:30 - dictionary
138:31 - square brackets and then within quotes
138:34 - list your key
138:36 - so i would like to access the value at
138:38 - this key of first
138:40 - and let's repeat the process for last
138:42 - name
138:44 - so the key is going to be last we'll
138:46 - access this value
138:48 - at this key and this should work the
138:50 - same as it did before
138:52 - now let's take this a step further let's
138:54 - say we would like to display
138:55 - somebody's full name based on the amount
138:58 - of keyword arguments that they pass into
139:00 - this function
139:01 - well there's a few different ways in
139:02 - which we could do this one easy way is
139:05 - that we could write our program like
139:06 - this
139:08 - let's print the word hello
139:11 - and we will need to iterate once through
139:14 - each key value pair within this
139:16 - dictionary
139:17 - and we can use a for loop to do that so
139:19 - to iterate
139:20 - once through each key value pair in your
139:22 - dictionary
139:23 - we'll type for key value
139:26 - in the name of our dictionary quarks in
139:28 - this case
139:29 - dot items and then we will print
139:33 - each value
139:37 - so there's one more thing that we need
139:38 - to do this kind of works as intended but
139:40 - it's going to
139:41 - print each value including our word
139:44 - hello
139:44 - on a new line so with a standard print
139:48 - statement
139:48 - this will print a new line character
139:50 - after each print statement as if we're
139:52 - hitting enter
139:53 - we can actually change that so after
139:56 - your string
139:56 - add and equals and we can replace that
139:59 - new line character with something else
140:01 - maybe a space
140:02 - and let's do the same thing for our for
140:04 - loop so value
140:06 - comma end and then just add space now
140:08 - this will print
140:09 - all of your names on the same line hello
140:12 - bro
140:13 - dude code and now we can pass in a
140:15 - varying amount of keyword arguments
140:17 - based on how long our name is
140:19 - perhaps we have like a title title
140:22 - equals
140:23 - mr and we can print that as well
140:26 - hello mr bro dude code here's a fun
140:30 - fact of the day you don't necessarily
140:31 - need to name this parameter as quarks
140:34 - the important thing is to have
140:35 - these double asterisks that precede it
140:37 - quarks is just a
140:39 - common naming convention it's short for
140:41 - keyword arguments
140:42 - you could name this as something else
140:44 - perhaps something more descriptive like
140:45 - names since we're passing in a bunch of
140:47 - names so the name of our dictionary
140:49 - is now names and this would work the
140:52 - same as it did before
140:53 - the important thing is to have these
140:55 - double asterisks that precede the name
140:57 - of your dictionary
140:58 - but quarks is the common naming
141:00 - convention
141:01 - well everybody that's all about quarkx
141:03 - it's a parameter that will pack
141:05 - a varying amount of keyword arguments
141:07 - into a
141:08 - dictionary if you would like a copy of
141:10 - all this code i will post
141:12 - this in the comments section down below
141:13 - but yeah that is how quarkx
141:15 - works in python hey what's going on
141:18 - everybody
141:19 - it's your bro hope you're doing well and
141:20 - in this video i'm going to teach you
141:22 - guys all about the format method
141:23 - in python so sit back relax and enjoy
141:27 - the show
141:29 - okay ladies and gentlemen let's begin
141:32 - the format method
141:33 - is a method available to strings it's
141:35 - optional and it gives users
141:37 - more control when displaying output to
141:40 - best demonstrate this i'm going to use a
141:42 - line
141:42 - from a popular nursery rhyme titled hey
141:45 - diddle diddle because well
141:47 - you know i'm a mature adult like that
141:49 - i'll be printing
141:50 - this line to my console window the cow
141:53 - jumped over
141:54 - the moon let's do so using a standard
141:56 - print statement
141:57 - and then i'll show you the benefits of
141:59 - using the format method later
142:01 - for this example i have two variables a
142:04 - variable called animal and i'm going to
142:05 - store
142:06 - a string of cow and item and i'll be
142:09 - storing an item name
142:10 - which is moon when we compile and run
142:12 - this as you would expect
142:14 - the output is the cow jumped over the
142:16 - moon
142:17 - there's a more elegant way of writing
142:19 - this line of code
142:20 - and that is by using the format method
142:22 - available to strings
142:24 - i'm going to turn this line into a
142:26 - comment and we're instead
142:27 - going to produce the same output but use
142:29 - the format method
142:31 - instead so we need a standard print
142:33 - statement like usual
142:34 - and then a string that we would like to
142:36 - format so
142:37 - we're going to write the same thing but
142:39 - in place of the variables we're going to
142:41 - add a placeholder
142:42 - the instead of the variable name or
142:45 - value name i'm going to add
142:47 - a set of curly braces so that functions
142:50 - as a placeholder
142:51 - for a value or a variable the
142:55 - this should be cow jumped over
142:59 - the and i'm going to insert another
143:01 - placeholder
143:02 - now this is a string we can format the
143:04 - string by following
143:06 - this string with dot format parenthesis
143:10 - and within the parentheses of the format
143:12 - method we can insert
143:14 - some values or variables let's begin
143:16 - with some
143:17 - values i would like to insert cow
143:20 - as well as moon so this will produce
143:23 - the same output but it's written a
143:26 - little more elegantly
143:27 - we can also replace these with variables
143:30 - because
143:31 - they store these values so i'm going to
143:33 - replace cow
143:34 - with animal and moon with item
143:37 - and this will create the same output as
143:40 - it did before
143:41 - these curly braces are what's known as
143:43 - format fields
143:44 - they function as a placeholder for a
143:46 - value or
143:47 - a variable and they work in order the
143:50 - first format field will insert the first
143:52 - value
143:53 - at this location if you have another set
143:56 - or more sets of this format field you'll
143:59 - insert
144:00 - the next value that's listed within the
144:02 - format method
144:03 - so if we were to switch these around
144:06 - we'll switch the position of animal with
144:08 - item
144:09 - well then the first format field is
144:12 - going to insert
144:13 - our item and the second format field
144:15 - will insert our animal
144:17 - this time the moon jumped over the cow
144:20 - an additional way of inserting values at
144:22 - a given place holder would be to use
144:24 - what's referred to as a
144:26 - positional argument
144:29 - within these format fields we will list
144:32 - the index of the value that we would
144:33 - like to insert at this location
144:36 - if you need to insert the first value
144:38 - well that has an index
144:40 - of zero because computers always start
144:41 - with zero and following that pattern
144:44 - the next index would be one if you had
144:47 - let's say three values that you need to
144:49 - insert if you had another placeholder
144:51 - that would be two then so you would just
144:53 - follow that pattern
144:54 - so there's going to be no visible change
144:57 - but what we could do
144:58 - is reverse the positional arguments of
145:01 - these placeholders
145:02 - so what do you think would happen if i
145:04 - switched one with zero at these
145:06 - locations
145:07 - well this format field is going to
145:09 - insert the value found at index
145:11 - one this first value is index zero and
145:14 - the second one
145:15 - is index one so now the roles are
145:17 - reversed this time the moon
145:19 - jumped over the cow our last way of
145:22 - inserting some values at a given format
145:25 - field would be to use what's referred to
145:27 - as a
145:27 - keyword argument within
145:31 - the format method we're going to list
145:33 - some keyword argument pairs
145:35 - we need a keyword name followed by a
145:37 - value
145:38 - so let's say animal is going to be the
145:40 - keyword we're going to say equals
145:42 - some value animal equals cow and
145:45 - item equals moon and you may have
145:48 - noticed that the color of your text
145:50 - might have changed
145:51 - so we no longer need these variables
145:53 - actually um but i'm going to comment out
145:55 - these two print statements because we
145:57 - will get an error then
145:58 - so these are in keyword argument pairs
146:02 - and within our format field instead of
146:04 - keeping these empty
146:06 - or using an index we can use the keyword
146:08 - name at my first format field i'm going
146:10 - to insert my keyword
146:12 - of animal and at my second format field
146:15 - i would like to insert
146:17 - the item keyword so the result is going
146:20 - to be
146:20 - the cow jumped over the moon so let's
146:22 - reverse these now
146:23 - we'll place our item keyword here and
146:26 - then at the second format field we will
146:28 - insert
146:28 - our animal and this time the moon
146:32 - jumped over the cow here's an important
146:33 - concept that i'd like to bring to your
146:35 - attention
146:35 - with these values found within the
146:37 - format method you can actually reuse
146:39 - some of these
146:40 - more than once so let's say we would
146:42 - like to state
146:43 - the animal jumped over the animal we're
146:46 - going to use
146:46 - this animal keyword twice and our output
146:49 - is going to be
146:50 - the cow jumped over the cow if we're
146:52 - doing the same thing with positional
146:54 - arguments
146:55 - we can reuse the same index this time
146:58 - let's say
146:59 - that the moon jumped over the moon so
147:02 - our item has an
147:03 - index of one so within our first format
147:06 - field we'll state
147:08 - the index will be one and our second
147:10 - format field will also be one
147:12 - so our output's going to be the moon
147:14 - jumped over the moon
147:16 - all right let's take things up a level
147:17 - there's an even more elegant way in
147:19 - which we could write all of this
147:21 - what we'll do is store our string that
147:23 - we would like to format
147:25 - within a variable let's turn this line
147:27 - into a comment and let's create a
147:29 - variable called
147:30 - text text equals the string that we
147:32 - would like to format
147:33 - which is the format field
147:37 - jumped over the format field
147:41 - and if we need to format this variable
147:44 - we can just call the format method on it
147:47 - so within a print statement let's say
147:50 - text dot and then use the format method
147:54 - and pass
147:54 - in the values that we would like to
147:56 - insert at these placeholders
147:58 - so we're going to insert animal as well
148:02 - as item so our result as you would
148:05 - imagine
148:05 - is the cow jumped over the moon this
148:08 - next section i'm going to explain how we
148:10 - can add some padding
148:11 - to a string when we display it using the
148:13 - format method
148:14 - let's say we have a name variable and
148:16 - assign this a value of whatever your
148:18 - name is
148:19 - so i would like to display my name along
148:21 - with the custom message
148:22 - let's say hello my name
148:25 - is and then i'll use a format field here
148:28 - so let's follow this string by using the
148:30 - format method
148:31 - and i would like to insert my name at
148:33 - this location
148:34 - so currently this will display hello my
148:37 - name is bro
148:38 - or whatever else your name is so we can
148:40 - add some padding
148:41 - either before our name after or we can
148:44 - add some padding to the left and the
148:46 - right hand side
148:47 - of our value that we have so what we'll
148:49 - do to begin
148:51 - is let's add some padding to the right
148:53 - hand side of
148:54 - our name that we have so within our
148:56 - format field if we need to add some
148:58 - padding
148:59 - within the format field add a colon and
149:01 - then the amount of space you would like
149:03 - to allocate
149:04 - to displaying your value so let's say 10
149:07 - so i'm going to allocate 10 spaces worth
149:10 - of room
149:11 - to display my name you can't really see
149:13 - it right now but let's take a look
149:15 - so i can't move my cursor past this line
149:18 - at the end of my name
149:20 - but with my second line i have all of
149:22 - this room to work with
149:23 - so if i were to change my string that i
149:25 - have let's say
149:28 - nice to meet you well then
149:31 - all of this padding that i have is going
149:32 - to be more evident
149:34 - so we can add a number preceding with a
149:38 - colon to add some padding
149:40 - to a value and then you can left align
149:42 - this right align it or center align it
149:45 - so what i'll do is copy this line that i
149:47 - have
149:48 - if you need to left align it you use the
149:51 - less than sign
149:52 - but there's going to be no visible
149:53 - change because that's already the
149:55 - default
149:56 - if you need to write a line precede your
149:59 - number with a greater than sign
150:01 - so your value is going to be right
150:04 - aligned
150:05 - if you need to center this value then
150:07 - use
150:08 - the carrot so this will center align
150:11 - your value within the padding that you
150:14 - have allotted
150:15 - one question that you might have for me
150:16 - and i'll try and answer that now because
150:18 - it's relevant what if we need to add a
150:20 - positional argument or a
150:22 - keyword argument to our format field if
150:24 - there's already some text within here
150:26 - so what you would do before the colon
150:28 - you would just precede the colon
150:30 - with either your positional argument or
150:32 - your keyword argument
150:34 - followed by colon and then whatever you
150:36 - want to add afterwards to format
150:38 - your value that you have alright ladies
150:40 - and gentlemen we are near the end and i
150:42 - promise that this is the last section
150:44 - how can we format some numbers let's say
150:46 - we have a
150:47 - number variable and this will equal the
150:50 - first few digits of pi
150:52 - 3.14159 let's pretend that we would like
150:55 - to
150:56 - display only the first two digits after
150:59 - the decimal so we can do so using the
151:02 - format method
151:03 - let's print the number
151:06 - pi is and then i'll use a format field
151:09 - here
151:10 - and we will call the format method and
151:12 - insert our
151:13 - number that we have so if i need to
151:17 - display only the first two digits after
151:20 - the decimal
151:21 - within the format field i will add
151:24 - colon dot to f
151:28 - f is for floating point numbers that's
151:30 - anything with a decimal portion
151:32 - so the result is that this will display
151:35 - only the first
151:36 - two digits after my decimal because we
151:39 - placed two within
151:41 - the format field so if this was three
151:44 - point three f this would display three
151:47 - digits
151:47 - after the decimal portion oh and
151:50 - apparently this will round your number
151:51 - so that's something that you should keep
151:53 - in mind
151:53 - so this time let's change our number to
151:55 - something larger like
151:56 - 1000 and i will copy this line and make
151:59 - a few changes
152:00 - let's say the number is
152:04 - and i would like to add a comma at the
152:06 - thousands place
152:07 - so after the colon within the format
152:09 - field i will add a comma
152:11 - so this will automatically add a comma
152:13 - to all 1000s places
152:15 - another cool thing that you can do is
152:17 - that you can display your number as
152:19 - binary so within the format field add
152:21 - colon b
152:22 - this will display a binary
152:25 - representation of your number
152:27 - you can do the same thing with octal by
152:30 - adding colon
152:31 - o so our number is now being displayed
152:34 - as an octal number
152:35 - and you can do the same thing with
152:37 - hexadecimal lowercase x
152:39 - for lowercase or uppercase x for all
152:42 - uppercase
152:42 - so my number 1000 is now in hexadecimal
152:46 - and lastly we can display this number
152:49 - in scientific notation using either
152:53 - lowercase e for lowercase or capital e
152:55 - for uppercase
152:56 - and mynumber 1000 is now in scientific
153:00 - notation
153:01 - all right everybody so that's a few
153:03 - things that you can do with the format
153:05 - method it's an optional method that
153:07 - gives users
153:08 - more control when displaying output if
153:10 - you would like a copy of all the code
153:12 - that we've written here today i will
153:13 - post everything in the comments down
153:15 - below
153:16 - don't be afraid to smash that like
153:17 - button drop a comment down below and
153:20 - subscribe if you'd like to become a
153:21 - fellow bro
153:22 - hey what's going on everybody it's bro
153:24 - hope you're doing well and in this video
153:26 - i'm going to explain a few useful
153:27 - methods of the random module
153:29 - so sit back relax and enjoy the show
153:34 - okay people in this video i'm going to
153:36 - explain how we can generate some random
153:38 - numbers
153:39 - as well as a few other useful methods of
153:41 - the random module
153:43 - now we're not going to be creating true
153:45 - random numbers but something called
153:47 - pseudorandom numbers which are fairly
153:49 - darn close so the first step
153:51 - is to import the random module at the
153:53 - top import
153:54 - random we now have access to everything
153:57 - that the random module has to offer
153:59 - let's begin by generating a random
154:01 - number between one and six
154:02 - like we're rolling a dice so what i'm
154:04 - going to do is say x
154:06 - equals random dot rand
154:10 - and we can generate a random integer
154:12 - between a certain range
154:13 - if i want one through six i will state
154:16 - one
154:17 - comma six and then we can generate a
154:19 - random number between one and six like
154:21 - we're rolling a dice
154:22 - so if i were to print the value of x
154:26 - then we will get a random number between
154:27 - one and six for example i just got a one
154:30 - a two a three and a six all right
154:33 - we can also generate a random floating
154:35 - point number two
154:37 - let's say y equals random dot
154:40 - random so this will give us a random
154:43 - number between
154:44 - 0 and 1. this time i'm going to print
154:47 - y so we have 0.49 and some change
154:52 - 0.145 and 0.858
154:56 - we can also generate a random choice
154:58 - from a list or other collection
155:00 - let's say we're playing a game of rock
155:02 - paper scissors so let's create a list
155:04 - i'll just call this my list equals
155:08 - square brackets and we will have three
155:10 - choices
155:11 - rock paper and
155:14 - scissors
155:18 - so let's say z
155:21 - will be the random string that we
155:24 - generate
155:25 - z equals random dot
155:28 - choice and we will pass in my list
155:33 - and let's print z so this will generate
155:36 - a
155:37 - random choice from my list called my
155:40 - list
155:40 - so we got scissors paper and
155:43 - rock we can also use the shuffle method
155:46 - of the random module to
155:47 - shuffle a list or other collection let's
155:50 - say we're working with a deck of cards
155:52 - cards equals let's say one
155:56 - through nine
156:00 - and we have a jack a queen
156:04 - a king and an ace this won't be a full
156:08 - deck of cards it'll just be one suit
156:10 - so we can actually shuffle this list by
156:13 - using the shuffle method
156:14 - random dot shuffle what do we want to
156:18 - shuffle
156:18 - we want to shuffle our cards and i will
156:22 - display
156:23 - my cards with a print statement so the
156:26 - shuffle method will shuffle a list or
156:28 - other collection for you
156:29 - well everybody that's a few useful
156:31 - methods of the random module
156:33 - if you would like a copy of all this
156:34 - code i will post this in the comments
156:36 - down below
156:37 - don't be afraid to smash that like
156:39 - button drop a comment down below
156:40 - and subscribe if you'd like to become a
156:42 - fellow bro hey what's going on everybody
156:45 - it's
156:45 - bro hope you're doing well and in this
156:47 - video i'm going to explain exception
156:49 - handling in python
156:50 - so sit back relax and enjoy the show
156:55 - well everyone let's talk about
156:57 - exceptions an exception is an event
156:59 - detected
157:00 - during execution that interrupts the
157:02 - normal flow of a program
157:04 - here's a program that i've written and
157:06 - we're intentionally going to cause an
157:07 - exception
157:08 - so this program that i've written we
157:10 - will accept a numerator and a
157:12 - denominator from the user
157:13 - we'll divide the numerator by the
157:15 - denominator we'll get a result
157:17 - and print the result so what if i were
157:19 - to divide a number such as 5
157:21 - divided by 0 which we cannot
157:23 - mathematically do
157:24 - well this will cause an exception an
157:26 - event detected
157:27 - during execution that interrupts the
157:30 - flow of a program
157:31 - so our program was interrupted and
157:33 - within our console window we have this
157:35 - traceback message
157:36 - which states what went wrong and a name
157:39 - for this exception that occurred
157:41 - this specific exception that occurred is
157:43 - a zero division error
157:44 - so this video is all about handling
157:47 - these exceptions so they do not
157:48 - interrupt the normal flow of a program
157:51 - now a very basic form of exception
157:53 - handling
157:53 - is to surround any code that is
157:55 - considered dangerous as in it might
157:57 - cause an exception
157:58 - within a try block anytime you accept
158:01 - user input would be a good indicator too
158:03 - so this code is considered dangerous
158:05 - because we don't know what the user is
158:06 - going to type in
158:07 - so we will try all of this code if an
158:10 - exception occurs
158:11 - we can catch it and handle it so to do
158:13 - that
158:14 - we'll add an accept block accept and
158:16 - then we will catch
158:18 - exception normally having this block by
158:21 - itself
158:21 - isn't considered good practice but i'll
158:23 - explain why later so
158:25 - this accept exception block will catch
158:27 - all sorts of different exceptions
158:29 - and it will prevent our program from
158:31 - being interrupted and we can do
158:32 - something else entirely such as print a
158:34 - message
158:35 - something went wrong so let's try this
158:39 - again
158:40 - we will divide five by zero which we
158:42 - cannot do
158:43 - we no longer have that traceback message
158:45 - within our console window
158:46 - we caught the exception and we did
158:48 - something else we printed
158:50 - something went wrong like i said before
158:53 - it's not considered good practice to
158:55 - have a single
158:56 - accept block that will handle all
158:58 - exceptions it's much better to first
159:00 - handle specific exceptions when they
159:02 - occur
159:02 - and we can do so by writing additional
159:05 - accept blocks
159:06 - so let's create an additional accept
159:08 - block that will catch
159:10 - any zero division error exceptions
159:13 - that occurs when somebody attempts to
159:14 - divide by zero so if
159:16 - this exception occurs how do we want to
159:18 - handle it let's just print the message
159:20 - let's print you can't divide
159:24 - by zero idiot
159:27 - and let's try this again so five divided
159:30 - by zero
159:31 - you can't divide by zero idiot here's
159:33 - another one i'm going to turn
159:35 - this accept block into a comment so we
159:38 - can take a look at something
159:39 - what if i divide by something that's not
159:41 - a number like we take
159:42 - 5 and divide it by the word pizza well
159:45 - pizza is not a number
159:46 - and we ran into a value error exception
159:50 - so we should probably handle this too so
159:52 - let's create another accept block that
159:54 - will handle that
159:55 - accept value error
159:59 - and how do we want to handle this let's
160:02 - print something
160:03 - enter only numbers
160:06 - please okay let's try this again and see
160:10 - if
160:10 - this exception is caught five divided by
160:13 - the word
160:14 - pizza enter only numbers please
160:17 - not only that but you can also add the
160:20 - accept exception block at the very end
160:23 - just in case there's something you won't
160:24 - anticipate
160:25 - but it's always considered good practice
160:27 - to first catch any specific exceptions
160:30 - and let the user know exactly what went
160:31 - wrong an additional way in which we can
160:34 - handle these exceptions
160:35 - is that we could display the exception
160:38 - that occurs although it is completely
160:39 - optional
160:40 - so to do that what we'll do is that
160:42 - after each of these accept block
160:44 - definitions
160:45 - let's add as e so we're calling the
160:48 - exception as
160:49 - e that's just standard practice although
160:50 - it's not necessary
160:52 - so let's do that for each of these
160:54 - except blocks
160:55 - and then we can print whatever e is so
160:58 - let's add that
160:59 - to each of these blocks so
161:02 - it should now look something like this
161:04 - so when we encounter an exception
161:06 - we can display what exception occurred
161:09 - too as well
161:10 - so let's divide five by pizza invalid
161:13 - literal for int with base 10 pizza
161:16 - enter only numbers please so like i said
161:19 - this
161:20 - is an additional way in which you could
161:21 - handle an exception although it's
161:23 - entirely optional
161:24 - another thing that you can do is that
161:26 - you can add an else statement
161:28 - to the end of your accept blocks so
161:30 - what's happening here is that we're
161:32 - going to
161:32 - try all of this code if an exception
161:35 - happens
161:36 - then catch it and handle it if not then
161:38 - do something else
161:40 - so why don't we print our result only if
161:42 - there are no
161:43 - exceptions that occur so if there are no
161:46 - exceptions we will execute
161:48 - this else statement if not then we won't
161:51 - so
161:51 - let's divide five by an actual number
161:53 - this time like
161:54 - two so there are no exceptions that
161:57 - occurred so
161:58 - we executed this else statement whatever
162:00 - code is within
162:01 - our else block and this printed the
162:03 - result of 2.5
162:05 - but if an exception were to occur like
162:07 - we divide 5 by
162:08 - 0 then we will catch our exception and
162:11 - handle it
162:12 - and we do not execute whatever block of
162:15 - code is within
162:16 - our else statement there is one other
162:18 - clause that you should be aware of that
162:20 - is the
162:20 - final clause this is always at the end
162:22 - how this works
162:23 - is that whether or not we catch an
162:25 - exception we will always execute any
162:28 - code
162:28 - that is within the block of code for our
162:30 - final clause
162:32 - so this is a good opportunity if you
162:34 - open files
162:35 - to close them within the finally block
162:38 - but
162:38 - we haven't dealt with opening files yet
162:40 - so we won't do that
162:41 - all we'll do is just print something
162:43 - print this
162:45 - will always execute so
162:48 - whether or not we encounter an exception
162:50 - this finally block will always execute
162:52 - at the end
162:53 - so let's try this again so this time
162:55 - let's cause an exception
162:56 - let's divide five by zero you can't
162:59 - divide by
163:00 - zero this will always execute and this
163:02 - time let's take this seriously and
163:04 - divide
163:04 - five by another number such as three so
163:07 - this will give us a result
163:09 - and like i said the finally clause the
163:11 - code within the finally clause will
163:13 - always execute
163:14 - but we won't really be working with this
163:16 - until we get to the section on file
163:18 - handling
163:19 - well everybody those are exceptions in
163:21 - python they are events detected
163:24 - during execution that interrupt the flow
163:26 - of a program
163:27 - and we can handle these exceptions by
163:29 - using try and accept blocks
163:31 - so if you would like a copy of all this
163:33 - code i will post all of this in the
163:34 - comments down below
163:36 - but yeah that is how exceptions work in
163:38 - python
163:40 - hey what's going on everybody it's bro
163:42 - hope you're doing well
163:43 - and in this video we're going to be
163:45 - covering some basic file detection using
163:47 - python so
163:48 - sit back relax and enjoy the show
163:53 - welcome ladies and gentlemen to the
163:55 - beginning of a mini series involving
163:57 - doing stuff with files using python and
163:59 - in this video we're going to be doing
164:00 - some basic
164:01 - file detection and in order to do so i
164:04 - recommend
164:04 - importing the os module it's already
164:07 - included with the standard python
164:08 - library
164:09 - all you need to do is import it all
164:11 - we'll be doing is checking to see if a
164:13 - file
164:14 - exists someplace on our computer so
164:16 - we'll probably need a file to work with
164:17 - what i'm going to do is go to my desktop
164:20 - for convenience
164:21 - and just create a new text document i
164:23 - will call this test.txt
164:25 - now i probably need the file location so
164:28 - i'm going to copy that
164:30 - and then we can use this so let's create
164:32 - a variable called path
164:34 - that will include the path to the file
164:36 - that i would like to detect
164:38 - so that was test.txt now if you have
164:41 - backslashes in your file path you'll
164:44 - probably need
164:45 - double backslashes because that's the
164:47 - escape sequence for a backslash within a
164:49 - string
164:50 - so we now have this variable path that
164:53 - we can work with
164:54 - now i would like to check to see if this
164:56 - location
164:57 - exists on my computer so if os
165:00 - dot path dot exists and you can see that
165:04 - we can pass in
165:05 - our path as an argument so i will pass
165:07 - in my path
165:08 - and if this returns true if that
165:10 - location exists i will print
165:14 - that location exists
165:18 - so this will not tell me if this is a
165:21 - file or not
165:22 - we'll be covering that later else
165:25 - let's print that location
165:29 - doesn't exist
165:32 - all right so if this location exists
165:35 - this will return true
165:37 - if not this will execute our else
165:39 - statement
165:40 - that location exists so what if i were
165:43 - to delete this file
165:44 - and we run this program again that
165:46 - location doesn't exist
165:48 - now this won't tell you if the location
165:51 - you're dealing with
165:52 - is a file or not there is a separate
165:55 - function for that
165:56 - it is if os
165:59 - dot path dot is file
166:05 - what we'll do is pass in our path and
166:07 - print
166:09 - that is a file
166:12 - all right so let's create another file
166:16 - because i deleted the previous one
166:18 - test.txt it's in the same location let's
166:21 - run this again
166:22 - that location exists that is a file now
166:25 - what if this was a folder
166:27 - so i'm going to create a new folder i
166:29 - will call this folder
166:30 - i will delete my test document
166:34 - and let's change the location to folder
166:39 - that location exists but it is not a
166:41 - file you can check to see if a location
166:43 - is a directory
166:44 - so let's write an else if statement os
166:48 - dot path dot is directory and we will
166:52 - pass in our path
166:54 - and let's print that
166:57 - is a directory
167:01 - all right so we have our folder we're
167:03 - going to check to see
167:05 - if this location exists and if it's a
167:08 - file or
167:09 - a directory that location exists that is
167:12 - a directory
167:13 - well everyone that is the basics of file
167:15 - detection
167:16 - we'll be building upon this concept in
167:18 - future videos
167:19 - so if you would like a copy of this code
167:21 - i will post this in the comment section
167:23 - down below
167:24 - but yeah that is the basics of simple
167:26 - file detection using python
167:28 - hey what's going on everybody it's bro
167:31 - hope you're doing well and in this video
167:32 - we're going to be reading a file in
167:34 - python so
167:35 - sit back relax and enjoy the show
167:40 - welcome back guys and gals in this video
167:42 - i'm going to explain how we can read the
167:44 - contents of a file using python
167:46 - so we'll probably need some sort of file
167:48 - to work with i created a plain text file
167:50 - called
167:51 - test.txt it's a plain text file and all
167:54 - this says
167:55 - is omg you can read this have a nice day
167:58 - like comment and subscribe so what i
168:01 - would like to do is to read
168:02 - the contents of that file line by line
168:04 - and print it to the console window
168:06 - and here's how and honestly we only need
168:08 - two lines of code to do this
168:10 - so what we'll do is type with open
168:13 - then within the open function list the
168:15 - name of your file
168:17 - or the file path this file of mine is
168:20 - within my project folder
168:21 - so i only need to list the file name if
168:24 - this was someplace else you'll probably
168:26 - need
168:27 - the file path so let's say this was on
168:30 - my desktop
168:31 - well i'll probably need to list the file
168:33 - path of where that file is located
168:35 - and i'll need to use double backslashes
168:38 - because that's the escape sequence for a
168:40 - backslash
168:41 - but since this file is within my project
168:43 - folder i only need to list the file name
168:45 - so with open then the name your file or
168:49 - the file path
168:50 - as file then what we're going to do
168:54 - is print file dot
168:58 - read and that is it so let's test it
169:02 - and it works omg you can read this have
169:05 - a nice day
169:06 - like comment and subscribe so this will
169:09 - actually
169:09 - close files automatically after opening
169:12 - them
169:12 - so that's kind of convenient and let's
169:14 - just test that theory
169:15 - so i'm going to print file dot
169:19 - closed if my file is in fact closed this
169:22 - will print
169:22 - true if it's still open this will print
169:24 - false
169:26 - so normally when you read a file it's
169:28 - normally open and you need to
169:29 - close it manually but if you write your
169:31 - program this way
169:32 - with open this will close the file
169:35 - automatically for you
169:36 - so using with open will close any files
169:39 - automatically for you
169:41 - after they've been opened however this
169:43 - does not catch
169:44 - and handle any exceptions that might
169:46 - occur like if we cannot locate this file
169:49 - so let's say that i mistyped the
169:51 - extension for this file
169:53 - let's say that i type in test.tx
169:56 - that's kind of funny because tx is the
169:58 - abbreviation for
169:59 - texas it's a texas file so this will
170:02 - cause
170:03 - a file not found error and this will
170:05 - interrupt the flow of our program and we
170:08 - would probably like to prevent that
170:09 - so what we could do is write a try and
170:12 - an accept block
170:13 - so we will try all of this code if we
170:15 - cannot find
170:16 - this file we can handle this exception
170:19 - file not found error
170:20 - so we'll place all of this code within
170:22 - the try block then
170:23 - if an exception happens we will catch
170:25 - that exception
170:26 - except we would like to catch any file
170:29 - not found air
170:30 - exceptions and let's handle this by
170:33 - printing
170:35 - that file was not found
170:40 - so if i were to run this again we will
170:42 - catch and handle this exception and this
170:44 - will not
170:45 - interrupt the normal flow of our program
170:48 - well everybody that's how to open and
170:50 - read
170:50 - a file in python if you'd like a copy of
170:53 - all this code i will post this in the
170:55 - comment section down below
170:56 - but yeah that's how to open and read a
170:58 - file using python
171:00 - hey what's going on everybody it's bro
171:03 - hope you're doing well and in this video
171:04 - we're going to be writing files in
171:06 - python so sit back
171:07 - relax and enjoy the show
171:11 - so to begin it's kind of similar to the
171:13 - last video on reading files
171:15 - with open within the open function list
171:18 - the file name or the file path so what
171:21 - do you want to call this file
171:22 - i will call this file test dot txt
171:26 - now normally with the open function
171:28 - there is a mode
171:29 - and you can actually change that there's
171:31 - a second argument that you can pass in
171:33 - by default this is r for read but if you
171:36 - want to write a file this would be
171:38 - w so now we're going to write a file
171:41 - called
171:42 - test.txt so to finish with open
171:46 - as file what are we going to do file
171:49 - dot write and within the write function
171:52 - we can write some text
171:54 - so let's create a text variable and we
171:57 - will add a string
171:58 - so let's say text equals
172:03 - yo and if you need to go down to a new
172:06 - line
172:07 - be sure to use the new line character so
172:09 - after this new line character
172:11 - the text that comes after is going to be
172:13 - on the next line as if we're hitting
172:15 - enter
172:16 - so yo this is some
172:19 - text have
172:22 - a good one
172:26 - all right so after i run this program we
172:29 - should have
172:29 - a file a text file within our project
172:32 - folder that appears
172:34 - and it is right here and it says yo this
172:37 - is some text
172:38 - have a good one now this is in write
172:41 - mode
172:42 - if this text was something else it will
172:44 - actually
172:45 - overwrite your current file so if i were
172:47 - to change this to
172:49 - uh oh this text has
172:53 - been over written well then
172:56 - this will overwrite the text that we
172:59 - have
172:59 - uh oh this text has been overwritten so
173:02 - you can actually append a file by
173:04 - changing the mode
173:05 - to a for append so let me change this
173:08 - back
173:09 - we will rewrite this this will save over
173:12 - our current file
173:13 - now we can append some text so let's add
173:15 - maybe a new line
173:17 - uh have a nice
173:20 - day see ya so i would like to append
173:25 - some text to this file i'm going to
173:26 - change the mode to a
173:28 - for append and we can now append some
173:31 - text onto the end of this file
173:33 - well everybody that's how to write to a
173:35 - file and or append a file if you would
173:37 - like a copy of this code
173:38 - i will post this in the comment section
173:40 - down below but yeah that's how to
173:42 - write to and or append a file in python
173:46 - hey what's going on everybody it's bro
173:48 - hope you're doing well
173:49 - and in this video we're going to be
173:50 - copying files in python so
173:52 - sit back relax and enjoy the show
173:57 - welcome back to another video regarding
173:59 - doing stuff with files using python and
174:01 - in this video we're going to be
174:02 - copying some files and in order to do so
174:05 - i recommend
174:06 - importing the shuttle module there's
174:08 - other ways of doing this too
174:10 - but i tend to like using the shuttle
174:11 - module now
174:13 - with this module there are three basic
174:15 - functions
174:16 - to copy a file starting at the top they
174:19 - are copy file
174:20 - copy and copy to so copy file is what
174:24 - we'll be working with
174:25 - this will copy the contents of a file
174:27 - copy
174:28 - will do everything that copy file does
174:31 - plus copy
174:32 - the permissions mode and the destination
174:34 - can be a directory
174:36 - and lastly copy 2 this will do
174:38 - everything
174:39 - that copy does plus it copies the
174:41 - metadata
174:42 - of that file including the files
174:44 - creation and modification times
174:46 - so depending on the project or the
174:48 - program you're working with
174:49 - you may need to use copy or copy too but
174:52 - in this video we're going to be using
174:54 - copy file just to copy the contents of a
174:56 - file
174:57 - now after you import the shuttle module
175:00 - this is all you need to do to copy a
175:01 - file
175:02 - shuttle dot then use the appropriate
175:05 - function that you need to copy your file
175:07 - we're going to be using copy file copy
175:10 - file and within this function there are
175:12 - two arguments
175:13 - a source and a destination so within my
175:17 - project folder i have a plain
175:19 - text file called test test.txt
175:22 - all this says is yo this is some text
175:25 - see ya what i would like to do is copy
175:27 - this file because it's cool
175:29 - now since this file is within my project
175:32 - folder i only have to list the file name
175:34 - otherwise if this is someplace else i
175:36 - would list the file path here
175:38 - so this file is test.txt
175:42 - this is the source file and now i need a
175:45 - destination
175:46 - so the second argument will be separated
175:48 - with the comma i'm going to list
175:50 - a destination so you can actually rename
175:53 - this to
175:53 - i would like to name this as copy.txt
175:57 - so the destination is my project folder
176:00 - so when i create a copy of this file
176:02 - test.txt
176:04 - this copy will appear in my project
176:06 - folder and say the same thing
176:07 - so after running this we now have a
176:11 - file named copy.txt that says the same
176:13 - thing
176:14 - as my test file and remember what i said
176:16 - you can copy
176:17 - this file to a different location on
176:19 - your computer so you could list the file
176:22 - path
176:22 - so this file path would go to my desktop
176:25 - and then when i run this
176:26 - this will copy my original file my
176:28 - source and then copy it to
176:30 - wherever my destination is oh and i
176:32 - almost forgot so if you need to use copy
176:34 - or copy 2
176:35 - the arguments are exactly the same so if
176:38 - you needed to use copy
176:40 - this would be a shuttle dot copy instead
176:42 - of copy file
176:43 - then copy 2 is shuttle dot copy 2.
176:46 - the arguments are exactly the same but
176:48 - each of these functions will copy
176:50 - different things depending on what you
176:52 - need for your own program or project
176:54 - all right everybody so that's the basics
176:56 - of copying files and
176:58 - python i will post this in the comment
177:00 - section down below
177:01 - but yeah that is how to copy files using
177:04 - python
177:05 - hey what's going on everybody it's bro
177:08 - hope you're doing well and in this video
177:09 - i'm going to explain how we can move
177:11 - files using python so sit back relax
177:15 - and enjoy the show
177:18 - welcome back everybody to another video
177:20 - regarding that thing that we do called
177:22 - programming and in this video we're
177:23 - going to be moving files using python
177:26 - and in order to do so i recommend
177:28 - importing the os module
177:30 - this is included with the standard
177:32 - python library all you need to do is
177:34 - import it
177:35 - and now let's create two variables a
177:37 - variable called source
177:38 - that will hold the location of where our
177:41 - source file is located
177:42 - as well as a variable called destination
177:45 - to function as well
177:46 - the destination now for this video i'm
177:49 - going
177:50 - to move a file within my project folder
177:52 - to my desktop
177:53 - so to do so i'm going to create a new
177:56 - file
177:57 - i will name this test.txt but take the
178:00 - liberty to name this whatever you want
178:02 - so i'm going to list the location of
178:05 - where
178:05 - my test file is located since this is
178:08 - within my project folder i only need
178:10 - the file name if this was someplace else
178:12 - on your computer you would probably need
178:14 - the file path
178:15 - and now where would i like to move this
178:16 - file to i would like to move this file
178:19 - to my desktop
178:20 - so i just need the file path so i'm
178:22 - going to go to my desktop
178:24 - right click go to properties i'm going
178:27 - to copy
178:28 - this location and paste it within my
178:30 - destination
178:31 - and i will add slash desktop
178:34 - slash test.txt you can also rename this
178:38 - too if you want i will just keep it the
178:40 - same
178:40 - now if you have single backslashes
178:43 - you'll likely need to change these
178:45 - to double backslashes because that is
178:47 - the escape sequence
178:49 - to print a backslash within a string so
178:52 - we have a
178:52 - source location as well as a destination
178:55 - location
178:56 - now we can begin i would recommend
178:58 - writing our code within a try and accept
179:00 - block to
179:01 - handle any exceptions so i would like to
179:03 - handle any file
179:05 - not found error exceptions just in case
179:08 - our program cannot locate our source
179:10 - file so let's print a message if that is
179:12 - the case
179:13 - perhaps source plus was not
179:17 - found now within our try block let's
179:20 - check to see if there is already a file
179:22 - at this destination
179:23 - because i would not like to save over it
179:25 - if there's already a file there
179:27 - so let's do some basic file detection if
179:30 - os
179:31 - dot path dot exists
179:35 - and i will pass in my destination as an
179:37 - argument to the exists
179:39 - function so if there is already a file
179:42 - here i should probably let the user know
179:44 - print there is already a
179:47 - file there else
179:51 - we can replace our files honestly if you
179:53 - do not care about saving over any files
179:56 - you can omit this part so else os
179:59 - dot replace and we will pass
180:02 - in our source and our destination
180:06 - as arguments and let's print a message
180:09 - to the console window to let the user
180:11 - know
180:11 - that source plus was
180:16 - moved all right let's try this oh i
180:19 - accidentally deleted my
180:21 - file test.txt all right
180:24 - now this should disappear in three
180:27 - two one and it's gone
180:31 - test.txt was moved and it should now be
180:33 - on my desktop
180:35 - which it is now you can also use this to
180:37 - move a directory as well
180:39 - i'm going to create a new directory i
180:42 - will name this folder
180:44 - and i will change source to folder
180:47 - and the destination from test.txt to
180:50 - folder and now this should move my
180:53 - folder
180:55 - there is already a file there
180:59 - oh let's delete that okay
181:02 - folder was moved all right everybody so
181:05 - that is how
181:06 - to move a file and or directory using
181:08 - python
181:09 - if you would like a copy of this code i
181:11 - will post this in the comment section
181:13 - down below
181:14 - but yeah that is how to move a file and
181:17 - or directory
181:18 - using python hey what's going on
181:21 - everybody
181:21 - it's bro hope you're doing well and in
181:23 - this video i'm going to teach you guys
181:25 - how we can delete files using python so
181:27 - sit back relax and enjoy the show
181:32 - all right everybody so in this video
181:35 - we're going to be deleting files using
181:37 - python and in order to do so i recommend
181:39 - importing the os module
181:41 - this is already included with the
181:42 - standard python library all you need to
181:44 - do
181:45 - is import it and now we need a file to
181:47 - work with
181:48 - so let's right click on our projects
181:49 - folder and go to new
181:51 - file i will name this test.txt
181:54 - and we now have a file that we can work
181:56 - with but you know what i would like to
181:58 - delete this file because it's lame
182:00 - so let's do that in order to delete this
182:02 - file let's type os
182:03 - dot remove and we're going to list the
182:05 - file path here
182:07 - since this file is within my project
182:09 - folder i only need to list
182:10 - the file path test.txt if this was
182:14 - someplace else on my computer i would
182:16 - probably need the file path
182:17 - like that but since this file is within
182:19 - my project folder i only need
182:21 - the file name another thing that you can
182:23 - do too at least what i like to do
182:25 - is that i like to pass in a variable
182:27 - called path i will make this a variable
182:29 - and assign it a
182:31 - string value of whatever the path to my
182:33 - file is
182:34 - so i will assign path the name to my
182:37 - file
182:38 - test.txt now when i run this this will
182:40 - delete my file
182:42 - test.txt and you can see that it's no
182:44 - longer there
182:45 - now what if we attempt to delete a file
182:47 - that doesn't exist
182:49 - well we'll encounter an exception so if
182:51 - you want
182:52 - this is optional we can do some
182:53 - exception handling so let's write
182:56 - the remove function within a try block
182:58 - and we will catch
182:59 - this exception file not found error and
183:02 - let's print something
183:04 - print that file was not found
183:08 - now if you attempt to delete a file that
183:10 - doesn't exist
183:11 - your program will not be interrupted and
183:13 - instead you'll print something
183:15 - that file was not found now this
183:18 - function
183:18 - does not remove empty folders this is
183:21 - how to do so
183:22 - and actually let's test that so let's
183:23 - create a new directory
183:25 - i'll call this empty underscore folder
183:29 - now i will attempt to delete this empty
183:31 - folder
183:32 - empty folder
183:36 - we encountered a permission error access
183:38 - is denied so let's create an accept
183:40 - block for that
183:41 - accept permission error
183:44 - print i don't know you do
183:48 - not have permission to
183:51 - delete that right to delete
183:55 - an empty folder there is a different
183:57 - function
183:58 - os dot rmdir
184:02 - short for remove directory we're going
184:04 - to list the file path
184:05 - and pass that in as an argument and
184:07 - let's create an else block as well
184:09 - because we can
184:10 - else if there are no exceptions let's
184:12 - print
184:14 - path plus was
184:17 - deleted all right so rmdir
184:20 - remove directory will delete an empty
184:23 - directory
184:24 - empty folder was deleted now this
184:27 - function
184:27 - will not delete a folder that contains
184:30 - files and let's try that
184:31 - so let's create a new directory i'll
184:34 - just call this folder
184:36 - and within this folder i will create a
184:38 - new file
184:40 - test.txt
184:43 - all right let's attempt to delete this
184:45 - folder i will probably need to change
184:46 - the file name
184:48 - let's change that to folder and we
184:51 - encountered an
184:52 - os error that directory is not empty so
184:55 - let's handle this exception we don't
184:56 - need to but i like to
184:58 - accept os air print
185:03 - you cannot delete that
185:06 - using that function
185:10 - okay to delete a folder that contains
185:13 - files
185:13 - we'll need the shuttle module import
185:17 - shuttle and the function that we're
185:19 - looking for is
185:20 - shuttle dot rm tree
185:24 - short for remove tree and we will pass
185:26 - in our path
185:27 - now be careful with this function it is
185:29 - considered dangerous
185:30 - because it will delete a directory and
185:32 - all files contained within
185:34 - so now we can delete a folder that
185:36 - contains files
185:38 - folder was deleted in conclusion these
185:41 - are
185:41 - three basic functions to delete a file
185:44 - or directory they
185:45 - are remove which deletes a file rmdir
185:49 - which is an abbreviation for remove
185:52 - directory
185:52 - which will delete an empty directory and
185:55 - lastly
185:56 - rmtree which is an abbreviation for
185:58 - remove tree
185:59 - and this is of the shuttle module and
186:01 - this will delete a directory containing
186:04 - files
186:04 - so if you would like a copy of all this
186:06 - code i will post this in the comments
186:08 - section down below
186:10 - but yeah that is how to delete files and
186:12 - or directories
186:13 - using python yo what's going on
186:16 - everybody it's you bro hope you're doing
186:18 - well
186:18 - and in today's video i'm going to be
186:20 - discussing modules in python so
186:22 - sit back relax and enjoy the show
186:27 - all right well welcome back we're
186:29 - talking about modules today
186:31 - a module is a file containing python
186:33 - code
186:34 - it may contain functions classes etc
186:37 - it's used with modular programming which
186:39 - is this concept of separating a program
186:42 - into useful different parts we're
186:44 - currently working within our main module
186:46 - and mine is named hello youtube this is
186:48 - how to create a separate module
186:50 - right click on your project folder go to
186:52 - new python file
186:54 - i think i'll create a module filled with
186:56 - maybe message functions
186:58 - so i'll call this messages and click
187:00 - python file
187:01 - all right we have two tabs one for our
187:03 - main module mine is called hello youtube
187:05 - and a separate module
187:06 - for messages and i can write whatever i
187:09 - want within here since we're using
187:10 - modular programming i'll place a bunch
187:12 - of useful functions within this module
187:15 - and i'll import them to the main module
187:17 - that we're currently working with
187:18 - let's define a function called hello all
187:21 - this will do is print
187:24 - hello have a nice
187:27 - day and i'll create a second function
187:30 - for good measure
187:30 - let's call this pie
187:35 - let's say bye have
187:38 - a wonderful time
187:42 - now if we would like access to this
187:44 - module we need to import it
187:46 - i will head back to my main module and
187:47 - at the top write this
187:49 - import then the name of the module and
187:52 - for this example we used the name of
187:54 - messages
187:54 - for our separate module and to use a
187:57 - function from that module
187:58 - type the name of the module dot and then
188:01 - the name of the function
188:02 - so messages.hello will call the hello
188:05 - function
188:06 - found within the messages module and i
188:08 - can also call the
188:09 - buy function as well messages dot bye
188:13 - and that will print bye have a wonderful
188:16 - time
188:16 - no it can be somewhat tedious to have to
188:18 - write the name the module followed by
188:20 - the function name what we could do to
188:22 - shorten things up
188:22 - is to give our messages module an alias
188:25 - also known as a nickname
188:27 - so at the top write import messages
188:30 - as and what sort of nickname should we
188:32 - give messages
188:33 - let's say msg for short so we'll replace
188:37 - messages with
188:38 - msg msg hello and msg buy
188:41 - and this would work the same and it
188:42 - involves less typing there's also an
188:45 - additional way of
188:46 - importing a module and it goes a little
188:47 - something like this from
188:49 - the name of the module import and then
188:52 - list all of the functions or classes you
188:54 - would like to import
188:55 - i would like to import hello comma buy
188:58 - and we no longer need the module name
189:00 - before calling one of these functions
189:02 - i can simply just call hello and vi
189:04 - directly another way in which this could
189:06 - be written is
189:06 - from messages import asterisk that means
189:09 - to
189:10 - import all and i actually would not
189:11 - recommend using this if you're working
189:13 - on a large program or something that
189:15 - contains
189:16 - many modules because you can run into a
189:18 - naming conflict
189:19 - because some of these modules may have
189:21 - the same named function names or
189:22 - variables
189:24 - so if you're working on a small program
189:25 - i really don't think it's a big deal but
189:27 - if you have multiple modules i would
189:28 - actually refrain from using import alt
189:31 - it's much safer to write the name of the
189:33 - module followed by the name of the
189:35 - function that you want to use
189:36 - now another cool thing is that python
189:38 - has a bunch of pre-written modules that
189:40 - you have access to if you would like a
189:41 - comprehensive list of them type help
189:44 - and pass in the word modules and within
189:46 - my console window this will populate a
189:48 - listing of all the modules available to
189:50 - us
189:51 - here they are let's see if math is in
189:53 - here yep
189:54 - there it is so yeah feel free to take a
189:56 - look through some of these modules
189:58 - because there are some fairly useful
189:59 - tools within some of these modules
190:01 - i suppose you can also go to python's
190:03 - official documentation and search for
190:05 - the python module index and here's a
190:08 - listing of all the different modules too
190:09 - they have access to
190:10 - well everyone those are modules they are
190:13 - files containing python code and they
190:15 - may contain functions classes etc
190:17 - if you would like a copy of all this
190:18 - code i will post all of this to the
190:20 - comments section down below
190:22 - but yeah those are modules in python i
190:25 - guess there's a module called pickle
190:26 - hey what's going on everybody it's bro
190:28 - hope you're doing well
190:29 - and in this video we're going to be
190:31 - creating a basic game of rock paper
190:33 - scissors in python so
190:34 - sit back relax and enjoy the show
190:39 - let's begin by importing the random
190:42 - module
190:42 - because we're going to need the computer
190:44 - to pick a random choice and we'll create
190:46 - a
190:46 - list of possible choices so we have
190:49 - three strings within here
190:51 - rock paper and scissors
190:57 - i think i spelled scissors wrong there
191:00 - we go
191:01 - okay and we will have our computer pick
191:04 - a
191:04 - random dot choice from our list
191:08 - of choices and let's test it by printing
191:12 - whatever the computer picks
191:16 - so the computer picked paper paper
191:19 - scissors
191:20 - and scissors okay what about the player
191:23 - choice
191:23 - let's say player equals
191:27 - input rock
191:31 - paper or
191:34 - scissors
191:38 - and let's print what the player has
191:40 - print
191:41 - player and let's print the computer too
191:47 - maybe i'll add a string before these so
191:49 - let's say
191:50 - computer call in space
191:54 - whatever the computer chooses and same
191:57 - thing with the player
191:59 - player all right
192:02 - let's see if this works rock paper or
192:06 - scissors let's say rock
192:07 - the computer picks paper and i pick rock
192:10 - so i would technically lose this round
192:12 - now what if the player doesn't pick rock
192:14 - paper or scissors what if they type in
192:16 - gun so we would like some way to prevent
192:19 - that
192:19 - so let's put our input for our player
192:22 - within a while loop
192:24 - while player
192:27 - not in choices
192:32 - so we're going to need to initialize
192:34 - player because right now it's an
192:36 - unresolved reference
192:38 - so let's say player equals none
192:42 - for the time being okay now let's test
192:45 - our choices
192:46 - our player choices rock paper or
192:48 - scissors i pick
192:49 - the gun and it's going to keep on asking
192:52 - me until i pick
192:53 - something from my list of choices so
192:56 - if i type in that still won't accept it
192:58 - now let's type in
192:59 - rock again there we go now what if
193:02 - somebody types in one of these choices
193:04 - either all caps or
193:05 - capitalized well that technically
193:07 - wouldn't be in choices because
193:09 - these strings are case sensitive so why
193:12 - don't we take our user input and make it
193:14 - lowercase
193:14 - and i'll just add on dot lower and use
193:17 - the lower method
193:18 - so therefore we can now type in any
193:22 - input that is either all caps or
193:24 - uppercase
193:25 - and then that will still be accepted
193:27 - because we're going to take our player
193:28 - input
193:29 - and then make it lower case so that it
193:30 - matches one of these choices
193:33 - okay let's work on the win conditions
193:34 - next so first
193:36 - let's check to see if we encountered a
193:39 - tie
193:39 - if player is equal to computer that
193:42 - means that
193:43 - we both chose the same thing so let's
193:46 - print whatever the computer picked
193:48 - what we picked and we will print
193:52 - tie now let's write an else
193:56 - if statement e l i
193:59 - f player equals
194:03 - rock so if we pick rock and then we will
194:06 - create
194:07 - a nested if statement if computer
194:11 - equals paper
194:15 - that means we lose so let's print
194:18 - everything we have here except we're
194:20 - going to change
194:21 - tie to you
194:25 - lose now if the computer picks
194:29 - let's say scissors then we win
194:33 - so scissors and you
194:37 - win okay then let's just repeat this
194:40 - process
194:41 - for scissors and paper
194:45 - so this will be another else if
194:47 - statement
194:48 - if we pick
194:53 - scissors and the computer picks
194:56 - rock then we lose if the computer picks
195:00 - paper then you win
195:04 - and lastly we have paper as the player
195:07 - choice
195:12 - so else if player equals paper
195:16 - and the computer picks scissors then we
195:20 - lose
195:21 - if the computer picks rock well then
195:23 - paper covers rock
195:25 - and we win now let's test it
195:29 - rock paper or scissors again i'll try
195:32 - and pick the gun
195:33 - which i can't let's take this seriously
195:35 - i will pick rock
195:36 - the computer picked rock so it's a tie
195:40 - i'm feeling like paper today oh it's
195:43 - another tie i guess
195:44 - and how about scissors okay
195:48 - so i win this round i picked uh scissors
195:50 - and the computer picked paper
195:51 - therefore i win let's try and lose this
195:54 - time
195:55 - just to verify it so i won again let's
195:58 - try rock again
196:00 - okay so i lost that round so we know
196:02 - that the win conditions are working now
196:04 - how about we add a feature where we will
196:06 - ask the player if they would like to
196:08 - play again
196:08 - play another round i think the best way
196:10 - to do that would be to write
196:12 - all of this code within a while loop so
196:14 - at the top
196:15 - let's write while true and we'll need to
196:18 - indent everything so that it's within
196:20 - the while loop so let's just indent
196:22 - everything here
196:39 - now at the bottom we will ask the user
196:41 - if they would like to play again and i
196:43 - will store this within a variable
196:45 - named play again play again equals input
196:49 - and the prompt will be play again
196:54 - yes slash no and depending on their
196:58 - input
196:58 - let's just make it all lower case
197:02 - if play again
197:06 - does not equal yes
197:09 - that means they would like to quit so
197:11 - let's use a break statement to break out
197:14 - of our while loop that we're in
197:17 - and at the end let's print by
197:20 - and pay attention to the indentation
197:23 - this input and
197:24 - this if statement should be within the
197:25 - while loop so they should have at least
197:27 - one indentation and our print statement
197:30 - here we'll just say bye
197:32 - and you can see that there is no
197:33 - indentation so that is outside of the
197:35 - while loop
197:36 - okay let's test this one last time
197:40 - rock paper scissors i'm going to pick
197:42 - the
197:43 - cannon okay that's not valid input how
197:46 - about rock
197:47 - okay the computer picks rock i pick rock
197:49 - so it's a tie do i want to play again
197:52 - i'm going to select actually yes all
197:54 - caps
197:55 - that should still be acceptable elbow
197:57 - paper this time
197:59 - it's a tie again man the computer is
198:01 - really good at this game
198:02 - i'd like to play again i'll pick
198:04 - scissors
198:06 - okay so i lose i would like to play
198:08 - again and i want to win this time
198:11 - okay computer pick scissors i pick rock
198:14 - you win do you want to play again
198:16 - nah and it will print
198:19 - bye well everybody that's a simple game
198:22 - of rock paper scissors i'll post all of
198:24 - this code to the comment section down
198:26 - below
198:26 - and well yeah that's a basic game of
198:29 - rock paper scissors in python
198:32 - hey what's going on everybody it's you
198:34 - bro hope you're doing well
198:36 - and in this video i'm going to show you
198:37 - guys how we can build a basic quiz game
198:39 - in python
198:40 - so sit back relax and enjoy the show
198:45 - to begin this project i think it would
198:47 - be wise for us to create a skeletal
198:48 - structure for how this program is going
198:50 - to operate
198:51 - and then we'll fill in the gaps later as
198:52 - we go along so to begin
198:54 - let's define all of the functions that
198:56 - we'll need we'll need four
198:58 - we'll create a function that is named
199:00 - new game
199:01 - whenever we call this function it will
199:02 - create a new quiz game for us
199:05 - and for the time being let's write pass
199:07 - just as a placeholder
199:08 - we'll have a total of four functions new
199:10 - game
199:12 - a function to check our answer
199:16 - a function to display our score
199:21 - and lastly a function to
199:24 - play again
199:30 - all right now i'm just going to add some
199:33 - comments here
199:34 - just to separate each of these functions
199:36 - that we have just so that it's a little
199:37 - bit easier to read
199:38 - although this part is not really
199:40 - necessary so i just want to separate
199:42 - each of these functions for some
199:44 - readability
199:47 - okay those are all the functions that
199:49 - we'll need what we'll need now
199:51 - is some sort of collection to hold all
199:53 - of the questions and answers that we
199:55 - have and i think a dictionary would be
199:57 - perfect for this
199:58 - so what i did is that i created a
200:00 - dictionary named questions
200:02 - a dictionary has key value pairs
200:05 - each key is a question that i would like
200:07 - to ask and each question
200:08 - has an associated value we'll have the
200:11 - user guess between
200:12 - answers of a b c or d so these would be
200:16 - all of the correct answers all of the
200:17 - values within this dictionary
200:19 - so here are some of the questions that i
200:20 - want to ask feel free to come up with
200:22 - your own questions
200:23 - if you would like you can copy the
200:25 - questions that i have they should be
200:26 - posted in the comment section
200:28 - down below so the questions that i'm
200:30 - going to ask are
200:31 - who created python what year was python
200:33 - created
200:34 - python is attributed to which comedy
200:36 - group and lastly is the earth round
200:38 - i couldn't think of a fourth question so
200:40 - i just threw in a random stupid question
200:43 - and the correct answers to all of these
200:45 - questions in order would be
200:46 - a b c and a but feel free to come up
200:50 - with your own
200:51 - well we have our questions but we'll
200:53 - need some sort of collection to hold all
200:55 - of the different possible answers
200:57 - to each of these questions and i think a
200:59 - 2d list would work perfect for this
201:02 - so i have a list of lists a list of
201:05 - tuples could work too i suppose
201:07 - so here are all of the answers for the
201:09 - first question
201:10 - and the correct answer is a i believe
201:13 - his name is
201:14 - guido van rossum hey if you're listening
201:16 - man i'm sorry if i'm mispronouncing your
201:18 - name i'm really trying here
201:20 - the second list corresponds to the
201:21 - second question
201:23 - what year was python created it was
201:24 - created in 1991
201:26 - at least according to wikipedia python
201:29 - is attributed to which comedy group
201:31 - the answer is c monty python like monty
201:34 - python and the holy grail
201:35 - good movie by the way and lastly is the
201:38 - earth round
201:39 - this is a highly debated topic but the
201:41 - answer is hey
201:42 - the earth is in fact round so i have a
201:45 - list of lists
201:47 - each list corresponds to a key value
201:49 - pair within my dictionary of questions
201:52 - and this is a lot to type if you want
201:54 - you can just copy the code that i posted
201:56 - in the comments down below
201:57 - just copy and paste and you'll have all
201:59 - of this or if you want you can pause the
202:01 - video and type it
202:02 - i don't care so now that you have your
202:04 - questions and your options we're ready
202:05 - to begin
202:06 - so the first thing that we'll do within
202:07 - our program is to call the
202:09 - new game function to begin a new game so
202:12 - after
202:12 - we have our questions and options
202:14 - created let's create a
202:16 - new game by calling the new game
202:19 - function
202:20 - now when we run this program we'll
202:22 - generate our dictionary of questions
202:24 - and our 2d list of different options for
202:27 - each question
202:28 - and then we will call the new game
202:29 - function to begin a new game
202:31 - so let's head to the new game function
202:33 - and fill in everything within our new
202:35 - game function
202:36 - so at the top let's declare a few things
202:39 - let's say we have
202:40 - a list named guesses and guesses will be
202:43 - an empty list for now
202:45 - i will declare a variable called correct
202:48 - guesses set it equal to zero because we
202:51 - haven't guessed anything yet
202:52 - and we will set a current question
202:55 - number
202:56 - and set the sequel to one to represent
202:58 - the first question
203:00 - okay now we need to display all of the
203:03 - questions within our dictionary of
203:05 - questions
203:06 - and we can use a for loop for that so
203:09 - for
203:10 - key in questions
203:14 - i'm going to print my key
203:20 - and let's just test this okay yeah
203:23 - here's all my questions
203:25 - i think what i'll do is actually print
203:28 - something to separate each question
203:30 - let's say one of these lines i think it
203:34 - would look better with them
203:36 - okay i'll print this line and then we'll
203:38 - move on to a question
203:40 - all right now after re-running this we
203:42 - have each question and i added just a
203:44 - line break between each of these to make
203:46 - it look kind of fancy
203:47 - now i need to display all of the
203:49 - different options for each question
203:51 - and we can do that with a nested for
203:54 - loop
203:55 - so if i were to write i in
203:59 - options print i
204:02 - let me show you what happens now with
204:05 - the way this for loop is written now
204:07 - it's going to display
204:08 - all of the different options available
204:10 - to us for the entire quiz game
204:12 - what i would like instead is to display
204:14 - only the first
204:16 - list for the first question and then the
204:18 - second list
204:19 - for the second question and follow that
204:21 - pattern so we're going to change our for
204:23 - loop around
204:24 - 4i in options and we'll set an index for
204:27 - options
204:28 - the index is going to be our question
204:30 - number
204:31 - minus one now remember what i said in
204:34 - previous videos where different
204:36 - collections including
204:37 - lists tuples etc the first element in a
204:40 - collection
204:41 - has an index of zero because computers
204:43 - always start with zero
204:44 - then the next element would therefore
204:46 - have an index of one
204:48 - then two three then you follow that
204:50 - pattern we're using this question number
204:52 - variable
204:53 - as some sort of counter and since we
204:55 - initially set this to one
204:57 - i'm just going to subtract one so that
204:59 - we effectively
205:00 - receive zero as the index and now we
205:03 - just need to increment our question
205:04 - number
205:05 - after each iteration so let's do that
205:08 - i will add that to the end here after we
205:11 - finish displaying all of the options
205:13 - let's increment question number by one
205:16 - by typing question num plus equals one
205:20 - and if i were to run this currently
205:23 - we'll display all of the different
205:24 - options for each question
205:26 - who created python here's all of the
205:28 - associated options
205:30 - what year is python created python is
205:32 - attributed to which comedy group
205:34 - and lastly is the earth round now it's
205:37 - time for some user input
205:38 - so i'm going to create a variable called
205:41 - guess
205:42 - and make sure you don't put it within
205:44 - your inner for loop it should be within
205:46 - the outer for loop
205:48 - guess equals input and i'll create a
205:51 - prompt
205:53 - enter a b
205:56 - c or d
206:00 - here's something to consider we would
206:02 - like the user to type in either capital
206:04 - a
206:04 - b c or d with strings they're case
206:07 - sensitive what if the user typed in
206:09 - one of these letters but lowercase if
206:12 - they're correct we would still like to
206:13 - give them their point
206:14 - why don't we take our guess and make it
206:16 - uppercase
206:17 - so guess equals guess and we can make
206:20 - this uppercase
206:21 - using the upper method of strings at the
206:24 - end of this game i'm going to compare
206:26 - our guesses to the correct answers so we
206:29 - have an empty
206:30 - list named guesses and i'm going to
206:33 - append our current guest that we're
206:34 - working on
206:35 - to our list of guesses so guesses
206:39 - dot append and we will append our
206:42 - guess this round now that we have our
206:45 - guess
206:46 - and we've appended our guess to our list
206:48 - of guesses
206:49 - let's check to see if it's the correct
206:51 - answer or not so we're just about to
206:53 - fill in
206:53 - this check answer function next
206:57 - so we are going to call this function
206:59 - and pass in a few items as arguments
207:02 - so let's use the check answer function
207:07 - and we'll pass in the key for the
207:10 - current question that we're on
207:12 - so the key is the correct answer so that
207:14 - would be
207:15 - our questions
207:18 - dot get key
207:23 - this would be the answer and we'll also
207:25 - pass in
207:26 - our guess and we are going to fill in
207:30 - the check answer function but we need to
207:32 - set up the parameters
207:34 - we're receiving effectively our answer
207:37 - as well as our guess so i'm going to
207:41 - name these as
207:42 - answer and guess and we are going to
207:45 - check to see if
207:46 - our answer is equal to our guess
207:50 - if answer is equal
207:53 - to guess let's print something
207:57 - print correct
208:03 - and i think we should give the user a
208:04 - point we'll have our check answer
208:06 - function return
208:08 - one for one point return one
208:12 - else if this is not the correct answer
208:15 - let's print
208:17 - wrong and we will return
208:20 - zero they do not get a point
208:24 - and since this is returning a value we
208:26 - should assign that
208:27 - so let's assign the point we may or may
208:30 - not receive
208:31 - to our variable of correct guesses which
208:33 - is initially set to zero
208:35 - so we'll type correct guesses plus
208:38 - equals check answer and check answer
208:41 - will return
208:42 - one if we scored a point or zero if we
208:44 - did not score a point and make sure you
208:46 - have
208:47 - plus equals because if you just set this
208:49 - to equals
208:50 - then we cannot score more than one point
208:52 - it will either be
208:53 - zero or one so we are effectively
208:56 - incrementing our correct
208:57 - guesses by one for each point that we
209:00 - score
209:01 - and now we're going to work on the
209:03 - display score
209:04 - function and we'll call that at the end
209:06 - after we finish all of our questions
209:08 - that we have
209:09 - so make sure that you do not write this
209:10 - within the for loop it should be outside
209:13 - of it
209:13 - because once we finish iterating through
209:16 - all of our questions we're going to
209:17 - display a final score
209:19 - so let's call the display score
209:22 - function and we'll need to pass in some
209:25 - arguments
209:26 - our correct guesses as well
209:29 - as our list of guesses
209:33 - okay let's head to the display score
209:36 - function
209:37 - so we have as parameters
209:40 - correct guesses as well as
209:45 - guesses i need to remove this pass i'm
209:48 - going to add
209:49 - one of these fancy lines in just to
209:51 - separate the questions
209:52 - from the results and i will print
209:56 - results
209:59 - and maybe another one of these lines
210:02 - okay
210:02 - so i need to print all of the answers
210:08 - answers
210:11 - and i do not want to end on a new line
210:14 - so i'm going to set
210:15 - end equal to nothing and i need to
210:19 - display all of the values within
210:22 - our dictionary all of the answers i will
210:25 - do that using
210:26 - a for loop for i
210:29 - in questions
210:33 - print questions
210:37 - dot get i
210:41 - and i do not want to end on a new line
210:44 - so i'm going to set
210:45 - end equal to nothing effectively
210:48 - and then i'll print a new line okay
210:50 - let's work on the guesses i think i'm
210:52 - just going to copy all this
210:53 - and make some changes i'll replace
210:56 - answers
210:57 - with guesses for
211:00 - i in guesses
211:04 - print i
211:07 - okay let's just be sure that
211:09 - everything's working we're not
211:10 - calculating a score
211:12 - quite yet so i'm just going to answer a
211:16 - then b c and d
211:19 - on second thought after printing each of
211:22 - these answers and guesses
211:23 - i'm going to add a space after each of
211:25 - these so
211:26 - within each of these four loops at the
211:28 - end i will add a space
211:30 - let me try that again a b
211:33 - c d okay not too bad
211:37 - now let's calculate the final score and
211:39 - we're still within our display score
211:41 - function
211:43 - let's set score equal to
211:46 - correct
211:49 - guesses divided by
211:53 - the length of our questions
211:58 - and let me add a set of parentheses
212:00 - around here
212:03 - then i'm going to multiply our score by
212:06 - 100
212:08 - and if you don't want a decimal portion
212:12 - because we'll display a percentage we
212:14 - can cast this as an end
212:16 - okay that all looks good and we'll print
212:19 - the final score
212:21 - print your score
212:25 - is plus
212:29 - we need to cast our score to a string
212:31 - because we're using string concatenation
212:34 - plus i'll add a percent sign
212:38 - all right let's try it i'm intentionally
212:40 - going to get the last question wrong
212:42 - so we should have a 75 if we have four
212:45 - questions
212:46 - so that would be a b c
212:50 - is the earth round what's earth i'm
212:52 - gonna guess d
212:54 - answers a b c a your guess is a b c
212:57 - d your score is 75 okay let's test it
213:01 - but getting all wrong answers d d d
213:04 - d your score is zero percent
213:07 - congratulations
213:08 - and we'll test it one more time but get
213:10 - all the right answers
213:12 - we just want to be sure that we have 100
213:14 - that's a
213:15 - b c a your score is 100
213:20 - now the last thing that you can add is
213:22 - that we can play again if we want
213:24 - and i have a separate function for that
213:26 - if you would like to add this option
213:27 - here's how to do so
213:28 - let's remove that pass
213:32 - let's set a variable named response
213:34 - equal to
213:36 - some input do you
213:40 - want to play again
213:45 - let's ask for yes or no
213:50 - actually let me remove that okay
213:55 - and depending on the user's response it
213:56 - might be a lowercase so let's make it
213:58 - uppercase
213:59 - response equals response
214:02 - and use the upper method
214:07 - if response is equal to
214:10 - yes all caps if response is equal to yes
214:14 - then return true
214:18 - else we will return
214:22 - false and that is it for this function
214:25 - the last thing we need to do
214:26 - is to create a while loop that will
214:28 - continue to ask the player if they want
214:30 - to play again
214:31 - this will be after we call the new game
214:33 - function
214:34 - while play again
214:38 - and remember this will return either
214:40 - true or
214:41 - false depending on the user's response
214:44 - while
214:44 - play again new game
214:48 - and call the new game function to create
214:50 - a new game for us
214:52 - if we escape the while loop that means
214:54 - the user doesn't want to play again
214:56 - so let's print the message
214:59 - such as by e
215:02 - all right let's test it i'm going to get
215:06 - all of the correct answers this time a b
215:10 - c a all right your score is 100
215:14 - do you want to play again i'm going to
215:16 - type
215:17 - yes all right then we can play again
215:22 - d d d d your score is zero percent do
215:26 - you want to play again
215:27 - no i think i mastered this game
215:30 - bye all right everybody so that's how
215:33 - you can use python to create a simple
215:36 - quiz game
215:37 - i will post all of this code to the
215:38 - comment section down below
215:40 - but well yeah that's a basic quiz game
215:43 - in python for you all
215:46 - hey what's going on everybody it's bro
215:48 - hope you're doing well
215:49 - and in this video i'm going to explain
215:51 - object-oriented programming in python so
215:53 - sit back relax and enjoy the show
215:58 - welcome to today's topic on python
216:01 - object oriented programming
216:03 - also known as pop and in today's video
216:06 - we're going to be creating objects
216:07 - an object is an instance of a class by
216:10 - using programming we can create
216:12 - representations of real-life objects so
216:15 - look around you wherever you're sitting
216:16 - or standing right now you are surrounded
216:19 - by objects next to me i have a phone
216:21 - a television some snacks and i'm talking
216:24 - into a microphone
216:25 - point being we can use programming to
216:27 - mimic real world objects by assigning a
216:30 - combination of attributes
216:32 - what an object is or has and methods
216:35 - what an object can do now in order to
216:37 - create an object we'll need to create a
216:39 - class
216:40 - a class can function as a blueprint that
216:41 - will describe what attributes and
216:43 - methods
216:44 - that our distinct type of object will
216:46 - have you can either create your class
216:48 - within your main module
216:49 - or you could create a separate file
216:51 - dedicated solely for your class
216:53 - now to create a class we would type
216:55 - class and then the name of the object
216:57 - that we would like to create so today i
216:58 - would like to create some car objects
217:00 - because i like cars
217:02 - so we would type car and a common naming
217:04 - convention
217:05 - with class names is that they should be
217:07 - capital so car is going to have a
217:09 - capital c
217:10 - and for the time being we need to type
217:11 - in something i'll just type in pass as a
217:13 - placeholder
217:14 - so if you have a small program it may be
217:16 - better to write your class within your
217:18 - main
217:19 - module but if your class is fairly large
217:22 - you may want to consider placing your
217:24 - class within a separate module
217:26 - so if you were to take that route we
217:28 - would go to file
217:29 - new python file and we would name this
217:32 - car
217:32 - click python file and we would declare
217:35 - our class within
217:36 - the separate module so class car and for
217:39 - now i'll type in pass
217:40 - then we just need to import this class
217:42 - so within our main module we would type
217:44 - from the name of the module import the
217:47 - name of the class
217:48 - from car import car now objects can have
217:51 - some combination of attributes and
217:53 - methods attributes describe what an
217:55 - object is or has
217:56 - so what are a few attributes that cars
217:58 - might have they might have a make so
218:00 - let's create a few variables
218:02 - for the time being i'm just going to use
218:04 - none as a placeholder
218:06 - cars can have a model a year
218:10 - and a color
218:14 - now objects can also have methods what
218:16 - kinds of methods could cars perform
218:18 - perhaps a drive method and a stop method
218:20 - so let's define those
218:22 - def let's say drive and we'll have one
218:25 - argument
218:26 - self self refers to the object that is
218:28 - using this method
218:30 - now what do we want to do when we call
218:31 - this method
218:33 - let's say this car
218:36 - is driving let's create a stop method as
218:39 - well
218:40 - def stop
218:43 - and we will print this
218:46 - car is stopped we now have all of the
218:49 - different attributes and methods we
218:51 - would like our car objects to have but
218:53 - there is one more thing that we need
218:54 - it is a special method called the init
218:57 - method that will construct
218:58 - objects for us in other programming
219:00 - languages this is known as the
219:02 - constructor
219:03 - so we need a special method that will
219:05 - create objects for us
219:06 - so we need to define this method def and
219:08 - the syntax on this is somewhat strange
219:10 - it is
219:11 - two underscores init it's short for
219:14 - initialize
219:14 - 200 scores again and then we need at
219:16 - least self as an argument
219:18 - and then we can actually assign our car
219:21 - objects unique variables so take all of
219:24 - these attributes that we have
219:26 - and we're going to place them within
219:27 - this init method now we can receive
219:30 - arguments
219:30 - when we create car objects but we need
219:33 - to pass them in
219:34 - as arguments to our init method so we
219:36 - need to set up some parameters
219:38 - let's say in order to create a car
219:39 - object we need a make
219:42 - a model a year and a color
219:45 - then when we receive these arguments we
219:47 - can actually assign them to
219:49 - each car's specific attributes but we
219:52 - need to precede each of these with self
219:54 - self is referring to the object that
219:56 - we're currently working on
219:57 - or creating so self.make self.model
220:01 - self.ear and self.color
220:05 - and then when we assign these we're
220:07 - going to say self.make
220:08 - equals whatever make that we receive
220:11 - when it's passed in as an argument
220:12 - self.model equals model and continue
220:15 - that pattern for year
220:17 - and color all right that is all we need
220:20 - for our class car we have a constructor
220:23 - we're assigning
220:24 - arguments that we receive to the
220:26 - attributes of our car object
220:28 - and we also have two methods one for
220:30 - drive and one for stop
220:32 - now we can start creating some car
220:33 - objects so going back to my main file
220:36 - here
220:36 - to create an object we need a unique
220:38 - name for it let's call this first car
220:40 - just car one
220:41 - equals the name of the class car then a
220:44 - set of parentheses
220:46 - now in order to construct a car object
220:48 - we need to pass in a matching
220:50 - set of arguments you can see here that
220:52 - we need to pass in a make a model a year
220:54 - and a color
220:55 - so what kind of car should we make let's
220:57 - say that the make is going to be
220:59 - chevy we need a model
221:03 - perhaps corvette a year
221:07 - 2021 is good and a color let's say blue
221:10 - alright now let's actually access some
221:13 - of these cars attributes
221:15 - and i should probably put this one in a
221:16 - print statement so print car ones
221:19 - make and this should print chevy
221:23 - then we can do the same thing for model
221:25 - year and color
221:26 - so let's change some of these around
221:29 - model
221:30 - year and color
221:35 - yep this object is a chevy corvette 2021
221:38 - and the color is blue
221:39 - and we should have two methods as well
221:41 - so car one
221:42 - i would like this car to use its drive
221:44 - method
221:46 - this car is driving and let's have this
221:48 - car use it stop method
221:50 - car one dot stop
221:55 - this car is stopped there's one thing
221:56 - that i should mention real quick because
221:58 - i forgot to mention it earlier
222:00 - so within our init method you can see
222:02 - that we need five
222:03 - arguments in order to construct a car
222:05 - object self
222:06 - make model year in color but when we
222:09 - pass in
222:10 - our arguments we're not passing in
222:12 - anything for self we only have
222:13 - four arguments here that's because with
222:16 - python we do not need to pass itself
222:18 - that's done automatically for us we're
222:20 - referring to the object that we're
222:22 - dealing with
222:23 - as you can see with our drive and stop
222:25 - method we need
222:26 - to pass in self in order to execute our
222:29 - method
222:30 - but when we call this method we do not
222:31 - need to do so so just remember with
222:34 - python with self we do not need to pass
222:36 - in anything for this argument that is
222:38 - all
222:38 - now the nice thing about this is that we
222:40 - can reuse this class
222:42 - as a blueprint to create more car
222:43 - objects we just call that
222:45 - init method that constructor so this
222:47 - time let's create a second car called
222:49 - car
222:49 - 2 and this will be a different kind of
222:51 - car
222:53 - what kinds of arguments should we pass
222:55 - it let's say this is a ford
222:58 - mustang the year will be 2022 and the
223:01 - color will be red
223:03 - all right let's check card to use
223:05 - attributes
223:08 - and let's have car 2 use its drive and
223:10 - stop method
223:12 - this is a ford mustang the year is 2022
223:15 - the color is red
223:15 - this car is driving and this car is
223:17 - stopped one other thing that we can do
223:19 - too
223:20 - is that within our methods here let's
223:22 - replace car with
223:23 - the name of the model that we're working
223:25 - with so this
223:27 - plus self dot model
223:31 - plus is driving now this self keyword
223:34 - think of it as you're replacing self
223:37 - with the name of the object that we're
223:39 - working on if car one
223:41 - is using its drive method replace itself
223:44 - with car one
223:45 - if this is car two that called this
223:47 - method then replace itself with car 2.
223:50 - think of it that way and let's do the
223:51 - same thing for stop
223:54 - this plus self dot model
223:58 - plus is stopped all right
224:01 - probably don't need these anymore so
224:03 - let's have car one
224:04 - use its drive and stop method this
224:07 - corvette is driving this corvette is
224:09 - stopped
224:09 - let's try this with car two this mustang
224:13 - is driving
224:13 - this mustang is stopped now you can have
224:16 - them do things independently too let's
224:18 - have car 1 use its drive method and car
224:20 - 2 uses stop method
224:22 - this corvette is driving and this
224:24 - mustang is stopped in conclusion
224:26 - a class can function as a blueprint to
224:28 - create objects
224:29 - we can assign attributes what describe
224:32 - an object is or
224:33 - has and methods what each object
224:36 - can do and then within our class we have
224:38 - a special method called the init method
224:41 - we can pass in some arguments and assign
224:44 - these arguments to each
224:45 - object's attributes and then we can
224:47 - reuse this class as if it was a
224:49 - blueprint
224:50 - so we can create more objects out of it
224:53 - so
224:53 - that is the basics of object oriented
224:56 - programming in python if you would like
224:58 - a copy of all this code i will post this
225:00 - in the comment section down below
225:01 - but yeah that's the basics of object
225:04 - oriented programming
225:05 - in python hey what's going on everybody
225:08 - it's bro hope you're doing well and in
225:10 - this video i'm going to explain
225:12 - the basics of class variables in python
225:14 - so sit back
225:15 - relax and enjoy the show
225:19 - here's a super quick video on the
225:21 - differences between class and instance
225:23 - variables
225:24 - for this example let's say we have two
225:26 - car objects
225:27 - named car one and car two and i'm just
225:29 - passing in a bunch of values to each of
225:31 - these car constructors
225:33 - now within my class car i have my init
225:36 - method
225:36 - also known as the constructor and what
225:38 - i'm doing is assigning all of these
225:40 - values
225:40 - to the variables found within my car
225:43 - constructor
225:44 - these variables declared inside the
225:46 - constructor
225:47 - are known as instance variables and each
225:50 - object
225:50 - can have their own unique values
225:53 - assigned to each
225:54 - of these variables now where a class
225:56 - variable is different
225:57 - is that a class variable is declared
226:00 - inside the class but outside of the
226:02 - constructor and what we can do
226:04 - is set some default values for some
226:06 - variables
226:07 - let's say we would like to add an
226:08 - additional variable let's say wheels
226:10 - wheels equals and we can set a default
226:13 - value
226:14 - for all instances of this class for each
226:16 - car object that we create
226:18 - so we set wheels to equal four this is
226:20 - an example of a class
226:22 - variable whenever we create a car object
226:25 - we can pass in a unique
226:26 - make model year in color but by default
226:29 - they will all have
226:30 - four wheels now if i was to print the
226:33 - amount of wheels
226:34 - that car 1 and car 2 have they will both
226:37 - have
226:38 - four wheels it's as if we're setting a
226:40 - default value
226:41 - if i change this to two wheels well then
226:43 - these cars have two wheels
226:45 - maybe their motorcycles or something now
226:47 - you can actually
226:48 - change these values each object will
226:50 - have their own
226:51 - copy of this variable but you can set it
226:53 - to a default value
226:54 - so let's say car one
226:58 - is a motorcycle car one dot wheels
227:01 - equals two so if i were to print car
227:04 - one's wheels along with card two
227:06 - car one will have two wheels but car two
227:09 - is still using that default amount of
227:11 - wheels which is four
227:12 - now there's another way in which you can
227:14 - access a class variable
227:16 - you don't necessarily need to create an
227:18 - object to do so you can just use the
227:19 - name of the class
227:20 - so what i'm going to do is turn all of
227:23 - these lines into comments
227:25 - and i will print the amount of wheels
227:28 - that our class has so type in the name
227:31 - of the class car with a capital c
227:33 - it should be the same name as your class
227:35 - name followed by the name of the class
227:37 - variable
227:38 - car dot wheels but make sure you spell
227:41 - it right
227:42 - all right so this will display four
227:44 - wheels
227:45 - now what if we decide to change the
227:47 - class variable
227:48 - through our class well that will affect
227:51 - all
227:51 - instances of our class so let's say car
227:55 - dot wheels equals two it's as if we
227:59 - change our mind and we have decided to
228:01 - create motorcycles instead of cars
228:03 - well if we were to change the wheels
228:06 - class variable through the use of our
228:08 - car class
228:09 - well then it's going to affect it for
228:11 - all instances of this class
228:13 - you can see that both car 1 and car 2
228:15 - now have two wheels
228:16 - when we just changed car 1's wheels it
228:19 - did not affect
228:20 - car 2 at all so that's the main
228:22 - difference between a class variable and
228:24 - an instance variable
228:25 - an instance variable is declared inside
228:27 - of constructor
228:28 - and they can be given unique values with
228:31 - class variables
228:32 - they are declared within a class but
228:34 - outside of the constructor
228:35 - and you can set a default value for all
228:38 - instances of this class
228:40 - for all unique objects that are created
228:42 - and then you can change those values
228:43 - later too
228:44 - so if you would like a copy of all this
228:46 - code i will post all of this in the
228:48 - comment section down below
228:49 - but yeah that is the basics of class
228:51 - variables
228:52 - in python hey what's going on everybody
228:56 - it's you bro hope you're doing well and
228:57 - in this video i'm going to explain
228:59 - inheritance in python so
229:01 - sit back relax and enjoy the show
229:06 - let's talk about irritants the term
229:08 - inherit means to receive derive or
229:10 - be left with and we can apply this
229:11 - concept to programming classes can
229:13 - inherit something
229:14 - usually attributes and methods from
229:16 - another class these classes can form
229:18 - parent-child relationships where a child
229:21 - will receive everything
229:22 - that the parent class has much like you
229:24 - inherit jeans from your parents
229:26 - and classes can have children and give
229:28 - whatever they own to their children
229:30 - and in today's video we'll be creating a
229:32 - parent class called animal
229:33 - and children of the animal class will
229:35 - inherit the common attributes and
229:37 - methods
229:37 - that all animals might have to kick off
229:39 - this video i think what we'll do
229:41 - is keep all of our classes within the
229:42 - same file just so that it's easier for
229:44 - us to read and understand
229:45 - let's begin by creating a class called
229:47 - animal so at the top
229:49 - type class animal and what are some
229:51 - attributes and methods that all animals
229:53 - should have
229:53 - let's say we have a class variable
229:55 - called alive and we'll set this to true
229:58 - if you're an animal you begin by being
230:00 - alive and what are some methods
230:02 - how about an eat and sleep method so
230:04 - let's define those
230:05 - def eat what are we gonna do when we
230:08 - call this method
230:09 - let's print something let's print this
230:12 - animal
230:12 - is eating let's also create a sleep
230:15 - method def
230:16 - sleep what are we gonna do when we call
230:18 - this method let's print something as
230:19 - well
230:20 - this animal is sleeping and we now have
230:24 - our animal class
230:25 - now let's create separate classes for
230:27 - specific types of animals let's say
230:30 - a class for rabbit a fish and a hawk so
230:32 - we can make
230:33 - objects of those classes so let's begin
230:36 - with a
230:36 - rabbit class class rabbit now to use
230:40 - inheritance
230:41 - with the class that you intend to be the
230:43 - child class after the class name add a
230:45 - set of parentheses
230:46 - and then pass in the name of the parent
230:48 - class in this case it's going to be
230:49 - animal
230:50 - so we will add that to the parentheses
230:53 - so now
230:54 - rabbit is the child class and animal is
230:56 - the parent class
230:57 - so the child class is going to inherit
231:00 - everything that the animal class has
231:02 - so for the time being i'm going to type
231:04 - pass so this rabbit class
231:05 - will have access to a class variable
231:07 - called alive
231:08 - and an eat and sleep method so let's
231:11 - define
231:12 - a fish and hawk class and i'm just going
231:14 - to copy what i have here and just change
231:16 - rabbit to fish and then do so again and
231:19 - change rabbit to
231:21 - hawk this is our family tree animal
231:24 - is the parent class and it has three
231:26 - children a rabbit class
231:27 - a fish class and a hot class and for the
231:29 - time being we're just going to write
231:31 - pass as a placeholder
231:32 - so i bet we can create objects from
231:35 - these classes
231:36 - so let's do so let's say we have an
231:37 - object called rabbit
231:39 - rabbit equals rabbit let's do the same
231:41 - thing for
231:42 - fish and hawk
231:47 - all right we now have three objects
231:50 - rabbit
231:50 - fish and hawk and let's take a look at
231:53 - their
231:53 - class variables i bet they have an alive
231:56 - variable let's check that so i would
231:58 - like to print
231:59 - rabbit dot oh would you look at that
232:02 - this rabbit class
232:03 - has a class variable called alive even
232:05 - though there's nothing within this class
232:07 - well that's because we used inheritance
232:09 - so each of these
232:10 - three children classes inherit
232:12 - everything from their parents
232:14 - all of these attributes and methods i
232:16 - bet they have eaten sleep functions as
232:18 - well so let's check that
232:19 - with fish let's have fish use its eat
232:22 - method
232:24 - and hawk will use its sleep method hawk
232:26 - dot sleep
232:29 - so the rabbit is alive the fish is
232:31 - eating and
232:32 - the hawk is sleeping now even though we
232:34 - have nothing written within each of
232:36 - these
232:36 - specific types of animal classes all of
232:39 - these animals have access to these
232:41 - attributes and methods because of
232:43 - inheritance
232:44 - and another benefit of inheritance is
232:46 - that we don't need to keep on
232:48 - copying and pasting this code for
232:50 - example let's say we were not using
232:51 - inheritance so we would not need an
232:53 - animal class
232:54 - we could write our code this way where
232:56 - we would just copy and paste everything
232:59 - underneath each of our classes so what
233:01 - if we need to make a change to one of
233:03 - these methods
233:04 - as in your boss says you know what let's
233:06 - change sleep to
233:07 - slumber okay well we would have to go to
233:10 - each of these classes and make the
233:11 - change manually
233:12 - it's not too bad if you have like three
233:14 - classes but what if you have hundreds
233:16 - that's going to take a lot of effort so
233:18 - wouldn't it be nice if we just
233:20 - list everything that each of these
233:21 - classes has in common
233:23 - and then have all of these classes
233:25 - inherit from
233:26 - one common class and then if you need to
233:28 - make any changes
233:29 - you can do so just within this class and
233:31 - this change will apply to
233:33 - all of the different child classes so
233:35 - that's another benefit of inheritance
233:37 - and not only does it make any changes
233:39 - easier but each class
233:40 - can have their own unique attributes and
233:42 - methods as well
233:43 - along with the attributes and methods
233:45 - that they inherit from their parents
233:47 - so for rabbit fish and hawk let's have
233:49 - each of these classes have
233:50 - their own unique method as well so for
233:53 - rabbit let's define
233:54 - a run method if you're a rabbit then you
233:57 - can run
233:57 - so let's print this rabbit
234:01 - is running and i'm just going to fix
234:04 - some of the spacing here
234:05 - all right if you're a fish then you can
234:08 - swim
234:09 - def swim let's print
234:13 - this fish is swimming
234:17 - and lastly we have hawk if you're a hawk
234:21 - then you can fly def fly
234:24 - let's print this hawk
234:28 - is flying like i said before not only
234:32 - do these specific types of animals have
234:35 - access to
234:35 - all of the attributes and methods that
234:37 - they inherit from their parents
234:39 - but they can have their own attributes
234:40 - and methods as well so let's test some
234:42 - of these methods
234:43 - so we have our rabbit fish and hawk
234:46 - objects
234:46 - let's have rabbit use its run method
234:51 - fish we'll use its swim method and hawk
234:54 - will use its fly method
234:59 - and here we go this rabbit is running
235:02 - this fish is swimming
235:03 - and this hawk is flying so in conclusion
235:06 - classes can have children the children
235:09 - classes will inherit everything that
235:11 - their parent class has
235:12 - all of the parents attributes and
235:14 - methods but not only that the children
235:16 - classes can implement
235:17 - their own unique attributes and methods
235:19 - as well
235:20 - so that is inheritance if you would like
235:22 - a copy of this code
235:23 - i will post all of this in the comment
235:25 - section down below but yeah that's the
235:27 - basics of inheritance using python
235:31 - yo what's going on everybody it's you
235:33 - bro hope you're doing well
235:34 - and in this video i'm going to explain
235:36 - how multi-level inheritance works in
235:38 - python so
235:39 - sit back relax and enjoy the show
235:43 - all right welcome back everybody let's
235:45 - talk about multi-level inheritance
235:47 - this is a concept where a derived class
235:50 - also known as a child class
235:52 - inherits from another derived class
235:54 - here's an example let's say
235:56 - we have a hierarchy of classes there
235:58 - will be three levels to this
236:00 - we'll create a family tree of living
236:02 - organisms
236:03 - so at the very top we're going to have a
236:05 - class called
236:06 - organism any class that inherits from
236:09 - the organism parent class
236:10 - will receive one attribute one variable
236:13 - named alive
236:14 - and this will be set to true so if you
236:16 - are an organism you begin by being alive
236:19 - now let's say we have a child class that
236:21 - will inherit from the organism parent
236:23 - class
236:24 - let's say animal class animal
236:27 - inherits from organism so any animal
236:30 - that we create
236:31 - will have this alive attribute set the
236:33 - true
236:34 - and all animals eat so let's define a
236:37 - function that does that
236:39 - at least i believe all animals eat let's
236:40 - pretend that they do
236:42 - so this animal is eating
236:46 - and now why stop there let's create a
236:48 - class for a specific type of animal
236:50 - i like dogs so let's create a dog class
236:53 - class dog
236:54 - inherits from the animal class
236:57 - and all dogs should be able to bark so
236:59 - let's create a function to do that
237:04 - and we'll print this dog
237:07 - is barking okay so what we just did here
237:10 - is
237:11 - multi-level inheritance we had a derived
237:15 - child class inherit from another child
237:17 - class
237:18 - so it's kind of like this dog class is
237:20 - the child animal class is the parent
237:22 - and then the parent of the parent class
237:25 - would be like
237:25 - a grandparent right and then if you
237:27 - added another layer on top of that to
237:29 - this hierarchy
237:30 - well then the parent of the grandparent
237:31 - would be like a great grandparent
237:33 - that's how i think of it at least now
237:35 - let's create a dog object just to verify
237:37 - that everything's working so let's call
237:38 - our dog
237:39 - dog and our dog object should have
237:42 - access to an attribute named alive
237:44 - and our dog object receives that
237:47 - attribute from the organism class
237:49 - and this will print true if i were to
237:51 - print whatever this attribute contains
237:53 - and our dog should be able to eat
237:55 - because it receives this method from the
237:57 - animal parent class
238:00 - and lastly our dog should be able to
238:02 - bark and that method is defined within
238:04 - its own class
238:07 - so that's how multi-level inheritance
238:09 - works it's a concept where a child class
238:12 - will inherit from another child class
238:14 - i like to think of it like a family tree
238:17 - where a child class will have a parent
238:20 - and the parent of that parent would be
238:22 - like a grandparent basically
238:24 - so if you would like a copy of this code
238:26 - i will post all of this to the comment
238:28 - section down below
238:29 - but yeah that is how multi-level
238:31 - inheritance works in python
238:33 - hey what's going on everybody it's you
238:35 - bro hope you're doing well and in this
238:36 - video i'm going to show you all how
238:38 - multiple inheritance works in python so
238:40 - sit back
238:41 - relax and enjoy the show
238:45 - all right people multiple inheritance
238:48 - multiple inheritance is the concept
238:50 - where a child class
238:52 - is derived from more than one parent
238:54 - class
238:55 - here's an example let's say that all of
238:57 - our children classes are going to be
238:58 - certain types of animals and we would
239:01 - like our animal classes
239:03 - to inherit from either the prepared
239:05 - class
239:06 - the predator parrot class or both
239:08 - depending on what type of animal it is
239:10 - because some animals in the animal
239:12 - kingdom can be both prey
239:14 - and predators and one example that comes
239:16 - to mind would be fish
239:17 - fish will eat smaller fish but also can
239:20 - get eaten by
239:21 - larger fish so here we have two classes
239:23 - prey and predator
239:25 - each has a dedicated method if a class
239:27 - inherits from
239:28 - the prey parent class they will have
239:30 - access to a flea method
239:32 - which will print this animal please if a
239:35 - class inherits from the predator parent
239:37 - class
239:37 - that class will have access to a hunt
239:39 - method that will print
239:41 - this animal is hunting and it's possible
239:43 - that some animals can do both
239:45 - they can both flee and hunt but they'll
239:47 - need to inherit
239:48 - both of these classes both prey and
239:50 - predator and that's where multiple
239:52 - inheritance comes in
239:53 - now let's create some classes based on
239:55 - certain types of animals
239:56 - let's say we have class rabbit and
239:59 - rabbit we'll inherit from the prey class
240:01 - because
240:02 - rabbits are typically prey and not
240:03 - predators but i don't know there could
240:05 - be some killer rabbits out there
240:07 - haven't run into any yet let's have
240:09 - class hawk inherit from the
240:12 - predator class and lastly fish
240:16 - and fish can be both prey and predators
240:18 - so they will inherit from both classes
240:20 - and we just separate each class with a
240:22 - comma so prey
240:24 - comma predator and it's as simple as
240:26 - that
240:27 - now let's create an object from each of
240:29 - these classes we have rabbit
240:31 - equals rabbit hawk
240:36 - equals hawk and fish
240:39 - equals fish now let's just verify
240:42 - all of the different methods that each
240:44 - of these objects inherited
240:46 - so our rabbit should have access to a
240:48 - flea method
240:49 - but no hunt method and let's just test
240:52 - that
240:53 - yep this animal flees and my hawk object
240:57 - should have access to a hunt method but
240:59 - no flea method
241:01 - this animal is hunting and lastly
241:04 - my fish object has access to both a flea
241:08 - and a hunt method and if you take a look
241:10 - on the right hand side of this pop-up
241:11 - window it shows the class that it
241:13 - inherited this method from
241:15 - so fleet comes from the parent class of
241:17 - prey and hunt comes from the apparent
241:19 - class of predator
241:21 - so my fish can both flee and hunt
241:24 - because it's typically considered both
241:26 - prey and predators
241:29 - this animal flees this animal is hunting
241:31 - so that's basically what multiple
241:33 - inheritance is
241:34 - it's a concept where a child class is
241:37 - derived from more than one parent class
241:40 - so that's basically multiple inheritance
241:42 - i'll post all of this code to the
241:43 - comment section down below
241:45 - and well yeah that's how multiple
241:47 - inheritance works
241:48 - in python hey what's going on everybody
241:51 - it's bro hope you're doing well
241:53 - and in this video i'm going to teach you
241:54 - guys about method overriding in python
241:56 - so
241:57 - sit back relax and enjoy the show
242:01 - here's a super quick video on method
242:03 - overriding i have two classes a class
242:06 - called animal and a class called rabbit
242:08 - rabbit inherits from the animal class
242:09 - therefore rabbit is the child class
242:11 - an animal is the parent class within the
242:13 - animal class there is one method a
242:15 - method called eat
242:16 - and when you call this method all this
242:18 - will do is print this animal is eating
242:21 - the rabbit class inherits from the
242:22 - animal class therefore
242:24 - rabbit has access to this eat method and
242:26 - if i were to create a rabbit object
242:28 - and this rabbit used its eat method well
242:31 - then this is going to print
242:32 - this animal is eating now method of
242:35 - writing is the ability of an object
242:37 - oriented programming language
242:38 - to allow a subclass also known as a
242:41 - child class
242:42 - to provide a specific implementation of
242:45 - a method
242:46 - that is already provided by one of its
242:48 - parents in this case we're going to
242:50 - override
242:50 - the eat method and what we can do is
242:52 - provide a more specific
242:54 - implementation for the rabbit class and
242:57 - now to override a method what we'll do
242:59 - is that within
242:59 - the child class we need to define a
243:02 - method with the same
243:03 - matching method signature that is the
243:05 - combination of a method's name
243:07 - plus its parameters both of these
243:09 - together are known as a
243:10 - method signature within the child class
243:13 - we will define
243:14 - and eat method with the same parameters
243:16 - def eat
243:17 - and in this case the only parameter is
243:19 - self just to keep this simple
243:21 - and what we'll do is that will provide a
243:23 - more specific
243:24 - implementation of the eat method
243:26 - specifically for rabbits
243:28 - so let's print something more closely
243:29 - associated with rabbits such as
243:32 - this rabbit is eating a
243:35 - carrot now if i were to run this program
243:37 - again
243:38 - we will instead use this implementation
243:40 - of the
243:41 - method instead of the one that it
243:42 - inherits from its parent class
243:44 - of animal basically speaking an object
243:47 - will use a method that is more closely
243:49 - associated with itself first before
243:51 - relying on a method that it may inherit
243:54 - from a parent class
243:55 - in this example we're using this version
243:57 - of the eat method
243:58 - specifically for rabbits instead of the
244:00 - version that we inherit from the parent
244:02 - class
244:03 - of animal that is the basics of method
244:05 - overriding i will post this code in the
244:07 - comment section down below
244:09 - and well yeah that's how to override a
244:11 - method using python
244:14 - hey what's going on everybody it's you
244:16 - bro hope you're doing well
244:17 - and in this video i'm going to teach you
244:18 - guys all about method chaining in python
244:21 - so
244:21 - sit back relax and enjoy the show
244:26 - all right everybody let's talk about
244:28 - method training method chaining is used
244:30 - to call
244:30 - multiple methods sequentially and each
244:33 - call performs an action on the same
244:35 - object
244:36 - and return self here's an example of how
244:38 - method chaining would be useful
244:40 - let's say we have a class named car car
244:43 - has
244:43 - four methods turn on drive break and
244:46 - turn off
244:47 - they will all just print a simple
244:48 - message beginning with turn on
244:50 - turn on what print you start the engine
244:53 - drive will print you drive the car
244:55 - brake will print you step on the brakes
244:56 - and turn off will print
244:58 - you turn off the engine let's say we
245:00 - have a car object
245:01 - car equals car and i would like my car
245:04 - object
245:04 - to use its turn on method immediately
245:07 - followed by
245:08 - the drive method with how we've been
245:10 - coding things previously we may write
245:12 - something such as
245:13 - the name of the object in this case car
245:15 - dot and then the method to use
245:17 - i would like my card to use the turn on
245:19 - method followed by
245:21 - car dot drive so currently this will
245:23 - take two lines of code
245:25 - but this will print you start the engine
245:27 - and you drive the car
245:29 - now with method training we can call
245:31 - multiple methods
245:32 - sequentially now the format on this is
245:34 - going to be a little bit different
245:36 - and if we were to write the same code
245:38 - using method chaining it might look a
245:39 - little something like this
245:40 - after the first method call we would add
245:43 - dot
245:44 - and then an additional method that we
245:46 - would like to call so for example
245:48 - after the turn on method we'll
245:50 - immediately call
245:51 - the drive method but there's one more
245:53 - thing that we need to add when we're
245:54 - using python to do method training
245:56 - so normally this by itself will not work
245:59 - when we call a method in python if there
246:01 - is nothing that is returned python will
246:03 - return
246:03 - none so as you can see here attribute
246:06 - error none type
246:07 - object has no attribute of drive so we
246:10 - need to return itself under each method
246:12 - that we're using method training with
246:14 - so let's add return self to each of
246:16 - these methods
246:17 - so let's do that for drive
246:20 - break and the turn off method and this
246:24 - should work now you start the engine
246:26 - you drive the car so think of it like
246:28 - this after we finish
246:30 - calling this method python is going to
246:32 - return self
246:33 - so it's going to return car so then
246:35 - we'll immediately use
246:37 - car.drive now here's another example
246:39 - let's say i would like to
246:41 - call the break method followed by the
246:43 - turn off method
246:44 - so that would be car dot break
246:47 - parentheses
246:48 - followed by dot turn
246:51 - off so this will print you step on the
246:55 - brakes
246:55 - you turn off the engine now here's an
246:57 - extreme example let's say we would like
246:59 - to call all four methods in order
247:01 - so that would be car dot
247:04 - turn on followed by dot drive
247:08 - dot break dot
247:11 - turn off so this will call
247:15 - all four methods in order starting with
247:17 - the leftmost method
247:19 - you start the engine you drive the car
247:21 - you step on the brakes
247:22 - you turn off the engine now if you have
247:25 - one long method chain like this
247:27 - it might become difficult to read after
247:28 - a while so what i would recommend
247:30 - if you're doing a lot of method chaining
247:32 - is that after each method call
247:34 - just hit enter to move each method call
247:36 - down to a new line
247:38 - so it'll look something like that and
247:40 - this backslash
247:41 - might be inserted this is a line
247:43 - continuation character
247:44 - so this is a little more readable but
247:47 - you know it still does the same thing
247:48 - basically
247:49 - all right everybody so that is method
247:51 - training it's used to call
247:53 - multiple methods sequentially and each
247:55 - call performs an
247:56 - action on the same object and returns
247:58 - self if you would like a copy of this
248:00 - code i will post all of this in the
248:02 - comments section down below but yeah
248:04 - that is how to do a method chaining in
248:06 - python
248:08 - hey what's going on everybody it's bro
248:10 - hope you're doing well
248:11 - and in this video i'm going to explain
248:13 - the super function in python so
248:15 - sit back relax and enjoy the show
248:20 - well then since you clicked on this
248:21 - video i should probably discuss
248:23 - the super function now the super
248:25 - function is used to give access
248:26 - to the methods of a parent class it
248:29 - returns a temporary object
248:32 - of a parent class when used here's an
248:34 - example of why the super function would
248:36 - be useful
248:37 - let's take this program that i've
248:38 - written there's three classes
248:40 - a class called rectangle which is the
248:43 - parent class
248:43 - to two children classes square and cube
248:47 - and all we're doing is creating a square
248:49 - object and a cube object
248:50 - but we need to pass in a length and a
248:53 - width for squares
248:54 - and a length width and height for cubes
248:57 - now with programming we don't like to
248:59 - repeat code we like to reuse code and if
249:01 - you take a look within my knit methods
249:04 - for both square and cube we're repeating
249:06 - self.length equals length
249:08 - and self.width equals width twice for
249:11 - our init methods
249:12 - so one thing that we can do any
249:14 - similarities between
249:16 - the square and cube class we can place
249:18 - within
249:19 - the rectangle class and then reuse this
249:21 - code so what i'm going to do
249:23 - is copy this indent method within our
249:26 - square class
249:27 - and paste it within our rectangle parent
249:29 - class
249:30 - and then in order to access this init
249:33 - method
249:33 - we can use the super function so we no
249:36 - longer need
249:37 - these two lines of code what i'm going
249:39 - to do is ask
249:40 - the rectangle class to use its init
249:42 - method so we're going to type
249:44 - super parentheses dot and then the name
249:48 - or the function of the parent class
249:49 - that we would like to use and i would
249:51 - like to use the init method
249:53 - but i need to send a length and a width
249:55 - because it requires that
249:56 - so let's send these so we're going to
249:58 - pass in our length and
250:00 - our width and now we can do the same
250:01 - thing for our cube init method
250:03 - so i will copy this line of code we no
250:06 - longer need these two lines of code
250:08 - because we will be reusing our init
250:10 - method within the parent class
250:12 - of rectangle but we'll still need to
250:14 - keep this line in to assign the height
250:16 - because that's a difference between our
250:19 - square and cube class
250:20 - and now we can just reuse this init
250:23 - method within
250:24 - the rectangle parent class now i'm
250:26 - thinking that we should probably test to
250:27 - see if
250:28 - length and width are assigned to these
250:30 - attributes and one way
250:31 - that i think would be fun would be to
250:33 - create an area method
250:35 - for squares and a volume method for
250:37 - cubes so let's define
250:38 - an area method within the square class
250:41 - def
250:42 - area and i would like to return self
250:46 - dot length times self
250:49 - dot width and we can create a volume
250:52 - method within cubes
250:54 - so let's do that def let's change this
250:57 - to volume
250:58 - we'll multiply it length times width
251:00 - times height
251:02 - but we need to type self dot pipe
251:05 - and we can call these methods to get the
251:07 - area
251:08 - of a square or the volume of a cube
251:11 - let's print
251:13 - square dot area
251:17 - and then cube dot
251:21 - volume so if our init method
251:25 - is actually being used we should have a
251:27 - length and the width
251:28 - assigned to these attributes and it
251:31 - looks like we do
251:33 - in conclusion the super function is used
251:35 - to give access to the methods of a
251:37 - parent class
251:38 - it returns a temporary object of a
251:40 - parent class when used in order to
251:43 - access
251:43 - the methods of the parent class also
251:46 - known as
251:46 - a super class and in this example within
251:49 - the init methods of both square and cube
251:52 - we immediately called the init method of
251:55 - the parent class
251:56 - to pass in some arguments that both of
251:58 - these classes
251:59 - have in common so if you would like a
252:01 - copy of this code i will post all of
252:03 - this in the comment section down below
252:05 - but yeah that is how the super function
252:07 - works in python
252:09 - hey what's going on everybody it's bro
252:11 - hope you're doing well
252:12 - and in this video i'm going to explain
252:14 - how abstract classes work in python so
252:17 - sit back relax and enjoy the show
252:21 - hey what's good everybody let's talk
252:23 - about abstract classes
252:25 - now abstract classes prevent a user from
252:27 - creating an object of that class
252:30 - think of an abstract class more as a
252:32 - template
252:33 - it's an idea it's not real it's like a
252:35 - ghost class basically
252:37 - plus an abstract class compels a user to
252:40 - override any abstract methods within a
252:42 - child class
252:44 - so it's also a form of checks and
252:45 - balances as well which we'll discuss
252:47 - later
252:48 - now here's a small program that i've
252:49 - written let's say we have
252:51 - three classes class vehicle car and
252:53 - motorcycle
252:54 - car and motorcycle are the children
252:57 - classes of the vehicle class
252:59 - now within this vehicle class we have a
253:01 - go method
253:02 - but i'm currently only defining it not
253:04 - actually implementing it so i'm just
253:05 - writing pass
253:06 - now within car and motorcycle we're
253:09 - overriding this method and creating our
253:10 - own implementation of the skull method
253:12 - that we inherit
253:13 - the go method for the car will print you
253:16 - drive the car
253:16 - and the go method for the motorcycle
253:18 - class will print you ride the motorcycle
253:20 - now currently i'm creating an object of
253:22 - each of these classes
253:24 - i have a generic vehicle object car
253:26 - object
253:27 - and motorcycle object now after running
253:29 - this program
253:30 - currently the go method within our
253:32 - vehicle class is not being implemented
253:34 - so this won't print anything but the go
253:36 - method within our car class will print
253:38 - you drive the car and the go method
253:41 - within our motorcycle class will print
253:43 - you ride the motorcycle with that being
253:45 - said let's pretend that we're coding the
253:47 - next
253:47 - need for speed game and we would like a
253:49 - user to create an object from a specific
253:52 - kind of vehicle whether it's a car from
253:54 - the car class or a motorcycle from the
253:56 - motorcycle class
253:57 - we would like to prevent a user from
253:59 - creating an object of the vehicle class
254:02 - because the vehicle class is too generic
254:04 - we do not have all of the
254:05 - implementations
254:06 - set up for a vehicle it would be like
254:09 - somebody unlocked the ghost car or the
254:11 - invisible car
254:12 - which doesn't actually exist and is
254:13 - missing a lot of features we need a user
254:16 - to create an object
254:17 - from a child class because these are
254:19 - fully fleshed out and one way in which
254:21 - we can prevent a user from creating an
254:23 - object of this class
254:25 - as well to turn this class into an
254:27 - abstract class
254:28 - which is what this video is all about go
254:30 - figure now the first step to creating an
254:32 - abstract class is that we'll need some
254:34 - imports
254:34 - so at the top of your program write this
254:37 - from
254:37 - abc abc is an acronym for abstract
254:41 - based class abc from abc
254:44 - import abc all capital comma
254:48 - abstract method all right
254:51 - now with our vehicle class the class
254:53 - that you intend to be the abstract class
254:56 - add us out of parentheses and our
254:58 - vehicle class
254:59 - will inherit from the abc class
255:02 - and now with any methods within your
255:04 - vehicle class you're going to add
255:05 - this decorator at the top at abstract
255:09 - method all right we should now be
255:12 - prevented from creating a
255:13 - vehicle object our vehicle class is now
255:16 - an abstract class
255:17 - and we cannot give it a physical form a
255:19 - physical manifestation
255:21 - and if we attempt to you can see here
255:22 - that we have a type error
255:24 - can't instantiate abstract class from
255:26 - vehicle with abstract methods
255:28 - go so an abstract class is a class which
255:31 - contains
255:32 - one or more abstract methods and an
255:35 - abstract method
255:36 - is a method that has a declaration but
255:38 - does not have an implementation
255:40 - now by definition an abstract class
255:43 - contains
255:44 - one or more abstract methods if i remove
255:47 - this one abstract method within our
255:49 - vehicle class
255:50 - well we could still create a vehicle
255:52 - object and i'm just going to turn this
255:54 - vehicle.go line into a comment because
255:56 - we don't have a go method anymore
255:58 - as you can see we can still create a
256:00 - vehicle object which we would like to
256:02 - prevent a user from doing
256:04 - so we need at least one abstract method
256:06 - within our vehicle class
256:08 - so i'm going to go ahead and add this go
256:10 - method back in
256:11 - an additional feature of abstract
256:13 - classes is that they compel
256:15 - a user to override any abstract methods
256:17 - within a child class
256:19 - a method that is abstract has a
256:21 - declaration but does not have
256:22 - an implementation so let's say that we
256:25 - create our vehicle class
256:26 - our abstract vehicle class and now we're
256:29 - creating
256:29 - the children classes of car and
256:31 - motorcycle and let's say i'm not paying
256:33 - attention and i forget to add a go
256:35 - method
256:36 - so if i just write pass within my
256:38 - motorcycle class i'm currently missing a
256:40 - go method within my motorcycle class
256:43 - well python is going to prevent me from
256:45 - running this because we have a type air
256:47 - can't instantiate abstract class vehicle
256:50 - with abstract methods of go
256:52 - so by inheriting from an abstract class
256:55 - it's a good form of checks and balances
256:57 - to be sure that your children classes
256:59 - are not missing
257:00 - any implementations of any methods that
257:02 - they inherit
257:04 - here's an additional way of thinking of
257:05 - this our vehicle class
257:07 - is telling its children if you're going
257:08 - to inherit from me then you need to
257:10 - override
257:11 - this abstract method of mine and if you
257:13 - don't well i'm not going to let you be
257:14 - instantiated
257:16 - so in order for us to create a cart and
257:18 - motorcycle class
257:19 - we need to override the go method that
257:22 - they inherit from its parent class of
257:23 - vehicle
257:24 - and provide its own implementation now
257:26 - let's say we create an additional method
257:29 - let's say we have
257:30 - a stop method so let's define that def
257:32 - stop
257:33 - for the time being i'll write pass and
257:35 - to make this an abstract method
257:37 - add this decorator at abstract
257:40 - method now car and motorcycle both need
257:44 - to
257:44 - implement that method of stop it's
257:46 - currently missing it
257:47 - as you can see here class car must
257:49 - implement all abstract methods
257:51 - and the same thing applies for a
257:52 - motorcycle as well so we need to
257:54 - override this method and provide its own
257:56 - implementation
257:58 - so let's remove that decorator and let's
258:01 - print something
258:02 - let's print this car is stopped
258:06 - and i'll do the same thing for
258:08 - motorcycle
258:10 - so def stop let's say
258:14 - this motorcycle
258:18 - is stopped and we'll call the stop
258:21 - method for each of these
258:22 - types of vehicles car dot stop
258:26 - and motorcycle dot stop
258:29 - all right and we can now create a car
258:32 - and motorcycle object
258:33 - because we are overriding both of these
258:36 - abstract methods found within the parent
258:38 - class of vehicle
258:39 - all right everybody so that's the basics
258:41 - of abstract classes
258:42 - it's a class which contains one or more
258:45 - abstract methods
258:46 - and an abstract method is a method that
258:48 - has a declaration
258:50 - but does not have an implementation and
258:52 - the benefits of using an abstract class
258:54 - is that they prevent a user from
258:56 - creating an object of that class
258:58 - plus it compels a user to override any
259:01 - abstract methods found within a child
259:02 - class
259:03 - so if you would like a copy of this code
259:05 - i will post all of this in the comments
259:07 - section down below
259:08 - but yeah that is how abstract classes
259:10 - work in python
259:12 - hey what's going on everybody it's you
259:14 - bro hope you're doing well
259:15 - and in this video i'm going to explain
259:17 - how we can pass objects as
259:18 - arguments so sit back relax and enjoy
259:22 - the show
259:24 - ladies and gentlemen in today's video
259:26 - i'm going to be demonstrating how we can
259:28 - pass
259:28 - objects as arguments for this example
259:31 - let's say we have a class
259:32 - car and there is one class variable
259:35 - called color
259:36 - color equals none what we'll be doing is
259:38 - calling a function that accepts an
259:40 - object as an argument as well as a color
259:43 - so let's create a function named change
259:46 - color now make sure when you define this
259:48 - function it's not within the cart class
259:50 - then technically this would be a method
259:52 - of the car class
259:53 - what we would like is a separate
259:55 - function outside of the car class
259:57 - now we need to set up some parameters we
259:59 - would like to accept a car object as
260:01 - well as a color
260:02 - so for the first parameter let's say a
260:05 - car and make sure this is in
260:06 - uppercase or capital because python
260:08 - doesn't like that argument names should
260:10 - be lowercase
260:11 - so when we pass in a car we will give it
260:13 - a nickname of car
260:15 - and we would also like to pass in a
260:17 - color so let's set up a parameter called
260:19 - color
260:19 - now when we pass in a car we will assign
260:22 - that car's color with whatever color
260:24 - that we receive so
260:26 - car dot color equals color
260:29 - and now let's create some car objects so
260:31 - let's say car one
260:33 - equals car car two equals car
260:36 - and car three equals cart currently if i
260:40 - were to print
260:40 - their colors this is what we'll see
260:43 - print car one
260:44 - dot color and repeat the steps for two
260:47 - and three
260:48 - and we're not calling this function yet
260:50 - so all of these colors should be set to
260:52 - none
260:53 - they are basically cars with no color
260:56 - they're i don't know iron or something
260:58 - whatever cars are made out of aluminum
261:00 - plastic stuff like that okay so now
261:02 - let's call this function
261:03 - change color perhaps right here so in
261:06 - order to call this function we need to
261:08 - pass in
261:09 - a car object as well as a color so let's
261:11 - pass in
261:12 - car one and a color perhaps red and
261:15 - we'll repeat the steps for two and three
261:17 - so let's say car two will be white
261:21 - and car 3 will be blue
261:24 - now after calling this function we have
261:27 - a car
261:28 - object and a color and we're assigning
261:30 - the color of our car to whatever color
261:32 - that we receive
261:33 - now these cars in order car 1 2 and 3
261:36 - are red white and blue now one thing
261:39 - that you should know
261:39 - is that the name of this parameter that
261:41 - accepts our object
261:42 - doesn't necessarily need the same name
261:45 - as the class name
261:46 - that created the object that we're
261:47 - passing in we could name this something
261:49 - else entirely perhaps
261:51 - vehicle you'll just want to be sure that
261:52 - this is at least descriptive
261:54 - of the kind of object that you would
261:55 - like to pass in and we're not limited to
261:58 - just passing in car objects we can pass
262:00 - in all sorts of objects
262:02 - but we need to pass in an object as well
262:04 - as a color
262:05 - so this time let's create a class called
262:07 - motorcycle
262:08 - class motorcycle and this class will
262:12 - also have a color set to none
262:14 - so what we're doing is actually reusing
262:16 - this function for all sorts of different
262:18 - kinds of vehicles
262:19 - now let's create a vehicle i'll just
262:21 - name this bike one for short
262:22 - bike one equals motorcycle now let's
262:26 - call the
262:27 - change color function and we can pass in
262:30 - an object as well as color this time we
262:33 - will pass in
262:34 - our bike object as well as a color i
262:37 - think
262:37 - black counts as a color and let's print
262:42 - bike once color
262:46 - and this should work we have red white
262:48 - blue and black
262:50 - in conclusion we can pass objects as
262:52 - arguments to a function
262:54 - much like what we've been doing with
262:55 - variables however the type of objects
262:58 - that we pass in may be limited based on
263:01 - the required attributes and methods
263:03 - that that given class or object might
263:05 - have and we'll get more into this on the
263:08 - next video on
263:09 - duct typing so if you would like a copy
263:11 - of all this code i will post all of this
263:13 - in the comment section down below
263:15 - but yeah that is how to pass objects as
263:17 - arguments
263:18 - using python hey what's going on
263:21 - everybody
263:21 - it's bro hope you're doing well and in
263:23 - this video i'm going to explain duck
263:25 - typing in python so
263:26 - sit back relax and enjoy the show
263:31 - i hope you all like ducks because that's
263:33 - the topic of this video
263:34 - duct typing is the concept where the
263:37 - class of an object is less important
263:39 - than the methods and or attributes that
263:41 - that class might have
263:43 - the class type is not checked if the
263:45 - minimum methods and or attributes
263:47 - are present it's based off of a popular
263:50 - phrase
263:50 - if it walks like a duck and it quacks
263:52 - like a duck then it must be a duck
263:54 - here's an example i have two classes
263:57 - class duck and class chicken
263:59 - both duck and chicken have walk and talk
264:01 - methods
264:02 - but they print something different with
264:04 - the duck class the walk method will
264:06 - print
264:06 - this duck is walking and the duck talk
264:09 - method will
264:10 - print this duck is quacking the chicken
264:12 - class
264:13 - has the same named methods walk and talk
264:15 - but they print something slightly
264:16 - different
264:17 - a slightly different variation the print
264:19 - method will print
264:20 - this chicken is walking and the talk
264:22 - method will print
264:23 - this chicken is clucking now let's say
264:25 - we have a third class a class
264:28 - called person
264:32 - now there is one method within our
264:34 - person class
264:35 - let's say we're attempting to catch a
264:37 - duck
264:39 - we'll pass in self and we need to pass
264:41 - in a
264:42 - duck object as an argument so let's type
264:45 - duck now within this method
264:48 - we'll have our duck use its walk method
264:53 - as well as its talk method duck.walk and
264:56 - duck.talk
264:58 - and then maybe we'll print something
265:02 - such as you caught the critter
265:07 - now let's create an object from each of
265:09 - these classes let's create a
265:10 - duck object duck equals duck
265:14 - a chicken object chicken equals chicken
265:17 - and lastly person person equals person
265:21 - now if we would like our person to use
265:23 - the catch method
265:24 - we need to pass in a duck as an argument
265:27 - so with our person let's type person
265:29 - dot catch and we need to send a duck
265:32 - object because that's a required
265:34 - parameter here
265:35 - so we're passing in our duck object that
265:37 - we created and as soon as we catch the
265:39 - duck
265:39 - it's going to use its walk and talk
265:41 - method and then we'll print
265:43 - you caught the critter so as you would
265:45 - expect this will print
265:46 - this duck is walking the stuck is
265:48 - quacking you caught the critter
265:50 - now with duct typing we can pass in
265:53 - a different type of object as long as it
265:56 - has
265:56 - the same methods and or attributes as
265:59 - our duck
266:00 - we could pass in a chicken because a
266:02 - chicken can also walk
266:03 - and talk so this time let's pass in our
266:06 - chicken
266:06 - as an argument and this will still work
266:09 - even though our parameter is set up to
266:10 - take a duck object
266:13 - this chicken is walking this chicken is
266:15 - clucking you caught the critter
266:17 - in layman's terms think of it like this
266:19 - python is examining this chicken object
266:21 - it's using its walk method it's using
266:23 - its talk method which are required
266:25 - and python is saying well that's close
266:27 - enough remember if it walks like a duck
266:29 - and it quacks like a duck
266:30 - then it must be a duck so duct typing is
266:33 - the concept where the class of an object
266:35 - is less important than the methods and
266:38 - or attributes that it might have
266:39 - the class type is not checked if the
266:41 - minimum methods and or attributes
266:44 - are present now let's say with our
266:46 - chicken object our chicken can no longer
266:48 - walk
266:50 - well we cannot pass in our chicken
266:51 - object anymore
266:53 - we have an attribute error chicken
266:55 - object has no attribute walk
266:57 - so python took a look at this chicken
266:59 - and noticed that it does not have a walk
267:01 - method
267:01 - well it's not walking like a duck but
267:03 - it's talking like a duck
267:05 - so it doesn't count as a duck because it
267:07 - doesn't have its walk method
267:08 - in conclusion the class type of an
267:10 - object is not as important as the
267:12 - methods and or attributes that that
267:14 - class might have when using
267:16 - duct typing the class type will not be
267:18 - checked if the minimum
267:19 - methods and or attributes are present
267:22 - since
267:22 - chickens can both walk and talk like
267:24 - ducks then
267:25 - they can be a substitute for ducks when
267:27 - we pass in our duck object to this
267:29 - method
267:30 - so if you would like a copy of this code
267:32 - i will post all of this in the comment
267:33 - section down below
267:35 - but yeah that is the basics of duct
267:37 - typing in python
267:38 - hey what's going on everybody it's you
267:40 - bro hope you're doing well
267:42 - and in this video i'm going to discuss
267:44 - the walrus operator in python
267:46 - so sit back relax and enjoy the show
267:51 - all right people i hope you like
267:52 - walruses because that's the topic of
267:54 - this video we'll be discussing
267:56 - the walrus operator also known as an
267:58 - assignment expression
268:00 - it's a colon followed by an equal sign
268:02 - and it kind of looks like a walrus on
268:04 - its side
268:05 - now this is a new feature for python 3.8
268:08 - what it does is that it assigns values
268:10 - to variables
268:11 - as part of a larger expression here's an
268:14 - example of why the walrus operator would
268:16 - be useful
268:16 - let's say we have a variable named happy
268:19 - happy
268:19 - equals true if you're not happy or
268:21 - you're feeling so so you can set this to
268:23 - false if you want
268:24 - so let's print the value contained
268:27 - within happy
268:28 - so this will print true to the console
268:30 - window
268:31 - now wouldn't it be cool if we could
268:33 - combine both of these
268:35 - statements together so we would want to
268:37 - say something such as
268:39 - happy equals true and then print it to
268:42 - the console window using one line of
268:44 - code
268:44 - well normally we can't do this using the
268:47 - standard assignment operator now one
268:49 - thing that we can do is use
268:50 - the walrus operator this assigns a value
268:53 - to a variable
268:54 - as part of a larger expression so this
268:56 - would technically
268:57 - be allowed if this assignment operator
269:00 - was instead
269:01 - an assignment expression the walrus
269:03 - operator happy
269:04 - walrus true and when they're all within
269:07 - a print statement
269:08 - we can assign a value to a variable and
269:11 - use it as a part of a larger expression
269:14 - so as you can see
269:15 - this new variable of happy was assigned
269:17 - and used in one expression
269:19 - now here's a more practical example of
269:22 - why the walrus operator would be useful
269:24 - let's say we have the smell program what
269:26 - this will do is consistently ask you
269:28 - what food you like and put it into a
269:30 - list called foods
269:32 - foods equals list while true food equals
269:35 - input what food do you like if food
269:38 - equals quit
269:39 - break then append our list of foods with
269:42 - this new food item that we have
269:44 - okay let's run this then so this while
269:47 - loop
269:47 - will continue as long as i don't type in
269:49 - quit and it will consistently ask me
269:51 - what food do i like and place that food
269:54 - item into a list
269:55 - named foods so let's begin what food do
269:58 - i like well i do like pizza
270:00 - i like sushi and i like ice cream
270:04 - and that should be enough for me i'm
270:06 - going to type in quit to exit this
270:07 - program
270:08 - now let's write the same program but
270:10 - instead use
270:11 - a walrus operator so that we can write
270:13 - this program using
270:15 - less lines of code now if i were to use
270:17 - the walrus operator this is how i would
270:19 - write the same program
270:20 - we would still need our list foods
270:22 - equals
270:23 - list now for my while loop it's going to
270:26 - look something like this
270:28 - while food walrus operator
270:32 - input what
270:36 - food do you like
270:40 - all right this is the assignment portion
270:42 - now we can use
270:43 - this assignment portion within a larger
270:46 - expression
270:47 - so let's also check to see if our input
270:50 - does not equal quit alright
270:54 - so then after each iteration of this
270:56 - while loop
270:57 - we will take our list foods dot
271:00 - append food and
271:04 - that is it so we have written the same
271:06 - program in about half the lines of code
271:08 - that we did previously so
271:10 - let's test it what food do you like
271:12 - pizza
271:13 - sushi ice cream
271:17 - and quit well everybody that is the
271:20 - basics of the walrus operator also known
271:22 - as an assignment
271:23 - expression it's a new feature for python
271:25 - 3.8
271:26 - and beyond so if this doesn't work for
271:28 - you i would check to see what version of
271:30 - python you're using first
271:31 - it assigns values to variables as part
271:34 - of a larger expression
271:36 - if you would like a copy of this code i
271:37 - will post all of this in the comment
271:39 - section down below
271:40 - but yeah that is how the walrus operator
271:42 - works in python
271:45 - hello what's going on everybody it's bro
271:47 - hope you're doing well and in this video
271:48 - i'm going to show you guys how we can
271:50 - assign a function to a variable in
271:52 - python
271:52 - so sit back relax and enjoy the show
271:57 - hey all in today's video i will show you
271:59 - all how we can assign a function to a
272:01 - variable
272:02 - this video will be a prerequisite for a
272:04 - few videos i have coming up regarding
272:06 - functions
272:06 - now let's say we have a function named
272:08 - hello and all we'll do is print the word
272:11 - hello
272:11 - and as you know to call this function
272:13 - you would type the name of the function
272:14 - followed by a set of parentheses and
272:16 - this will print the word
272:17 - hello the set of parenthesis that comes
272:19 - after a function's name
272:21 - is the portion that will call the
272:23 - function if you were to remove
272:24 - that set of parenthesis afterwards we
272:26 - would not in fact call that function
272:29 - now with python python will pretty much
272:31 - treat everything as objects
272:32 - including functions so there's something
272:34 - i want to show you guys
272:35 - if i was to print the name of my
272:37 - function hello
272:39 - what will be displayed is the memory
272:41 - address of this function
272:43 - this is the memory address of where this
272:45 - function is located within my computer's
272:47 - memory
272:48 - and it's in hexadecimal think of it like
272:50 - a street address such as
272:51 - one two three fake street this is the
272:53 - address of where this function is within
272:55 - my computer's memory
272:56 - and each time that i run this program
272:58 - this number can change as you can see
273:00 - here
273:01 - now one thing that we could do we could
273:02 - assign this address to a variable
273:04 - let's say hi equals hello and be sure
273:06 - that you're not adding that set of
273:08 - parentheses afterwards because
273:09 - then you would be calling the hello
273:11 - function and returning the result to
273:12 - high
273:13 - so high equals hello no parentheses
273:16 - and if i was to print hi well
273:20 - the address of hello and hi will be at
273:22 - the same memory address
273:23 - both of these numbers are the same now
273:26 - what do you imagine would happen
273:27 - if i was to call the high function after
273:30 - we assigned the memory address of hello
273:32 - to hi
273:33 - well then what we'll end up doing is
273:34 - calling the hello function
273:36 - even though we're listing that we would
273:38 - like to call the
273:39 - high function even though it doesn't
273:41 - exist so it's as if this hello function
273:43 - has two names
273:44 - you can either use hello or you can use
273:46 - hi and let me demonstrate that
273:49 - so you can call either hello hi or both
273:52 - for this example
273:53 - that's because we're assigning the
273:55 - memory address of hello to this variable
273:57 - of high
273:58 - so we could treat high as a function
273:59 - it's kind of like
274:01 - an alias where this function has two
274:03 - names now here's another demonstration
274:05 - let's say that we would like to assign
274:07 - our built-in print function to
274:10 - a variable so let's say maybe say
274:13 - say equals print and when i say print
274:16 - i'm referring to the print function and
274:18 - be sure you're not adding that set of
274:19 - parentheses afterwards
274:20 - now if i need to print something to the
274:22 - console window i can either use
274:24 - print like what we've previously been
274:26 - doing or i could use
274:28 - say because say has the same memory
274:30 - address let's say
274:32 - perhaps whoa i can't
274:35 - believe this works
274:39 - surprise face all right so
274:42 - we can call the print function by saying
274:44 - the word say
274:45 - say all of this text and this will print
274:48 - all of this text
274:49 - well say all of this text to the console
274:51 - window
274:52 - under normal circumstances i'm not sure
274:54 - why or when
274:55 - you would need to assign the print
274:57 - function to a variable but
274:58 - you can and well that's kind of cool so
275:00 - i thought i'd show you guys that
275:02 - so everybody that's how to assign a
275:04 - function to a variable
275:06 - like i said we'll be building upon this
275:07 - topic so you want to be sure that you
275:09 - understand this
275:10 - all right then well if you would like a
275:12 - copy of this code i will post all of
275:14 - this to the comments section down below
275:15 - but yeah that's how to assign a function
275:18 - to a variable
275:19 - in python hey uh what's going on
275:22 - everybody
275:22 - it's bro hope you're doing well and in
275:24 - today's video i'm going to explain
275:26 - higher order functions in python so
275:28 - sit back relax and enjoy the show
275:33 - all right ladies and gentlemen let's
275:34 - talk about higher order functions
275:36 - these are functions that do one of two
275:38 - things one they either accept a function
275:40 - as an argument
275:42 - or two they return a function as output
275:44 - and in python this is totally allowed
275:46 - because functions are also treated as
275:48 - objects
275:48 - i'll give you guys an example of both of
275:50 - these but let's begin with number one
275:52 - here's an example of number one let's
275:54 - say that i have two functions
275:55 - named loud and quiet both of these
275:57 - functions will accept a string as an
275:59 - argument
276:00 - loud will return that string all
276:02 - uppercase as if we're shouting something
276:05 - quiet we'll return that text i'll
276:06 - lowercase as if we're whispering
276:08 - something
276:09 - now i'm going to create a third function
276:11 - called hello
276:13 - and this will be the higher order
276:14 - function it accepts a function as an
276:17 - argument
276:17 - i'm not sure if we're going to be
276:19 - passing in loud or quiet
276:21 - whatever it is i'm going to give it a
276:22 - name of funk
276:24 - short for function each of these
276:26 - functions will return some text
276:28 - either all uppercase or lowercase i'm
276:30 - going to assign that to
276:32 - text text equals the name of our
276:34 - function we're not sure what it's going
276:36 - to be
276:37 - and i will pass in some text in order to
276:39 - call one of these functions
276:41 - i will pass in just the word hello
276:42 - that's capitalized
276:44 - and at the end i will print whatever
276:46 - text that we have
276:47 - in order to call this function of hello
276:49 - i need to pass in a function as an
276:51 - argument
276:51 - do i want to pass in loud or quiet do i
276:54 - want the
276:55 - loud variety of hello where all of the
276:57 - text will be uppercase
276:58 - or the quiet variety of flow where all
277:00 - the text will be lowercase
277:02 - i would like to pass in loud because i
277:05 - want to make my text all uppercase
277:08 - so i'm typing the name of the higher
277:10 - order function and passing in
277:12 - a function as an argument and the result
277:14 - is that the word hello will be printed
277:16 - to the console window
277:17 - all uppercase now here's a rundown of
277:19 - what just happened
277:20 - we're calling the hello function and
277:21 - we're passing in loud
277:23 - as an argument we're naming loud as
277:26 - funk while we're within this hello
277:28 - function
277:29 - text equals loud and we're sending a
277:33 - string of text
277:34 - that says hello we're returning that
277:37 - text all uppercase
277:38 - assigning it to a variable called text
277:41 - and printing that text
277:42 - to the console window now if i would
277:44 - like to
277:45 - use the quiet variety of hello then i'm
277:47 - going to pass in
277:48 - quiet as an argument so quiet will make
277:52 - all of this text
277:53 - lowercase alright people so that's
277:55 - example
277:56 - one of a higher order function a higher
277:58 - order function
277:59 - is a function that accepts a function as
278:02 - an argument
278:03 - this hello function is an example of a
278:05 - higher order function
278:06 - because we're accepting either loud or
278:09 - quiet as arguments
278:10 - all right people let's move on to the
278:12 - second part of this definition for
278:14 - higher order functions
278:15 - a higher order function is a function
278:17 - that returns a function
278:18 - i'm going to give a different example
278:20 - this time let's say we have a pair of
278:22 - nested functions the outer function will
278:24 - be named divisor
278:26 - and we will accept a number as an
278:28 - argument that we will call x
278:30 - a divisor is a number that is used to
278:32 - divide
278:33 - another number when using division and
278:35 - inside this function we have an inner
278:37 - function
278:38 - named dividend dividend is the number
278:41 - that's going to be divided
278:42 - and we will call the argument that is
278:44 - passed in y
278:45 - all we'll do is return y divided by x
278:49 - we're dividing the dividend by the
278:51 - divisor y
278:52 - divided by x now within the
278:55 - outer function but not within the inner
278:57 - function we're going to return
279:00 - our dividend function so a higher order
279:02 - function is a function that returns a
279:04 - function
279:05 - divisor is a higher order function
279:07 - because we're returning
279:09 - dividend now if i would like to access
279:11 - this nested
279:12 - dividend function i first need to call
279:14 - the outside
279:15 - divisor function and pass in a number as
279:18 - an argument to serve as the divisor
279:20 - the divisor function is going to return
279:22 - my dividend function which we can then
279:24 - assign to a variable
279:26 - so the variable i'm going to name divide
279:29 - divide equals and i need to call divisor
279:32 - and set a divisor let's say that i would
279:35 - like to divide all numbers
279:37 - by two so i will set x to be two
279:40 - and now for the dividend i will
279:44 - print call the
279:47 - divide variable and pass in a number as
279:50 - the dividend the number that's going to
279:52 - be divided
279:52 - and let's say i would like to divide 10
279:55 - by two
279:56 - and this will work as you can see we
279:58 - have five in the console window
280:00 - so let me explain what just happened
280:01 - here so our program
280:03 - begins here divisor and we're passing in
280:06 - two
280:07 - x will be two and it will stay that way
280:09 - until we finish this program or until we
280:12 - reassign x
280:13 - now x equals two we're skipping this
280:16 - function because we did not call it yet
280:18 - we're returning dividend and assigning
280:21 - it to a variable
280:22 - and we can call a variable if it has the
280:24 - memory address of a function
280:26 - which is what we're doing in this line
280:28 - now we're calling
280:29 - dividend and passing in 10 so y equals
280:32 - 10
280:33 - and x still equals to we're returning 10
280:36 - divided by 2 and printing it to the
280:38 - console window
280:40 - well everyone in conclusion a higher
280:42 - order function
280:43 - is a function that either one accepts a
280:46 - function as an argument
280:47 - or two they return a function the format
280:51 - is a little bit strange and we're not
280:52 - quite used to it yet
280:53 - but in future videos we'll have more
280:55 - practice with high order functions
280:57 - if you would like a copy of all this
280:58 - code i will post all of this to the
281:00 - comment section down below
281:02 - but yeah that is how higher order
281:03 - functions work in python
281:06 - yo what's going on everybody it's bro
281:08 - hope you're doing well in today's video
281:10 - i'm going to explain
281:11 - lambda functions in python so sit back
281:14 - relax
281:15 - and enjoy the show all right
281:19 - ladies and gentlemen let's talk about
281:20 - lambda functions these are functions
281:22 - that are written in one line and use
281:24 - this lambda keyword
281:26 - they accept any number of arguments but
281:28 - they only have one expression
281:30 - think of it as a shortcut they're useful
281:32 - if you need a function for only one use
281:34 - or a short period of time
281:35 - and then you're just planning on
281:36 - throwing away that function afterwards
281:38 - here's the syntax for a lambda function
281:40 - you type lambda
281:42 - you add the parameters followed by a
281:44 - colon and then your expression
281:45 - let's say we have this function named
281:47 - double double accepts one argument that
281:49 - we will name
281:50 - x we're returning x times two
281:52 - effectively doubling it
281:54 - so if i need to call this function i
281:56 - would type double
281:57 - and then pass in a number as an argument
281:59 - so the result if i pass in 5 would be
282:01 - 10. now let's write the same function
282:03 - but instead write it as a
282:04 - lambda function so let me turn these
282:07 - lines into comments
282:09 - now the first step is to type lambda
282:12 - then our parameters we only have one
282:14 - parameter and that is x
282:16 - colon and then our expression we would
282:18 - like to return x
282:19 - times two now this lambda function is
282:21 - going to return a function object and we
282:23 - can assign that much like what we do
282:25 - with variables
282:26 - let's say double equals lambda x colon
282:29 - x times two and in order to call this
282:32 - lambda function
282:33 - we're going to type double then a set of
282:35 - parentheses
282:36 - to call this function and then pass in
282:38 - our arguments
282:39 - so let's say that x equals 5 and then
282:42 - we're going to double it
282:43 - and the result is 10. so that's the
282:45 - syntax for a lambda function you type
282:47 - lambda
282:48 - your parameters colon and then your
282:50 - expression this time let's say that we
282:52 - have two parameters
282:53 - we have two numbers that we want to
282:55 - multiply by each other
282:56 - so let's say that this function will be
282:59 - called multiply
283:00 - multiply equals lambda
283:03 - x comma y because we have two parameters
283:07 - colon followed by our expression we
283:10 - would like to multiply
283:11 - x times y and that is it
283:14 - now in order to call multiply we need to
283:16 - pass in two arguments
283:18 - if i were to pass in just one well we'll
283:20 - have a type error
283:21 - so let's pass in five and maybe six and
283:24 - the result
283:24 - is thirty now let's try three parameters
283:28 - let's say we would like to add three
283:30 - numbers together
283:31 - let's say add lambda x
283:35 - comma y comma z so we have all of our
283:38 - parameters
283:38 - we have our colon here and then we need
283:41 - our expression
283:42 - x plus y plus z and
283:46 - let's add five six and seven together
283:49 - the result is 18. now let's try
283:52 - something a little more complex let's
283:54 - pass in some strings this time
283:56 - i'll create a function named full name
283:58 - full name
283:59 - equals lambda
284:02 - first name comma
284:06 - last name the expression is going to be
284:09 - first name plus perhaps a space
284:12 - plus last name now i need to pass in a
284:16 - first name and a last name
284:19 - full name and you can use your own name
284:22 - for this example if you want
284:23 - let's say bro comma code
284:29 - yep this will print your first name and
284:31 - your last name to the console window
284:33 - now let's take it a step further let's
284:34 - say we would like to check somebody's
284:36 - age once using a lambda function we
284:38 - would like to check to see if they're 18
284:40 - or older because they're signing up for
284:41 - something perhaps let's say a credit
284:43 - card
284:43 - so let's create a function object age
284:47 - check equals lambda we have one
284:50 - parameter
284:51 - somebody's edge colon and then our
284:53 - expression
284:55 - let's type true if age is greater than
284:59 - or equal to
285:00 - 18 else
285:03 - false to call this age track function
285:07 - we need to pass in an age let's say the
285:10 - user is 12
285:11 - and they're trying to sign up for a
285:13 - credit card while this will return false
285:15 - let's say they're 18 now and this will
285:18 - return
285:19 - true so that's a lambda function it's a
285:22 - function
285:22 - that is written in one line using this
285:24 - lambda keyword
285:25 - they accept any number of arguments but
285:27 - they only have one expression
285:29 - think of it like a shortcut and they're
285:31 - useful if you need to use a function
285:32 - only once and then you're just planning
285:34 - on throwing it away afterwards
285:36 - so if you would like a copy of all this
285:37 - code i will post all of this to the
285:39 - comment section down below
285:40 - but yeah those are lambda functions in
285:43 - python
285:44 - hey what's going on everybody it's bro
285:46 - hope you're doing well
285:47 - and in this video i'm going to show you
285:49 - all how we can sort iterables in python
285:51 - so sit back
285:52 - relax and enjoy the show
285:57 - well well well welcome back everybody in
285:59 - this video i'm going to show you all how
286:00 - we can sort data using python we'll
286:02 - begin with the sort method which is used
286:04 - with lists and the sort function which
286:06 - is used with iterables and that would
286:07 - include lists let's start with something
286:09 - very basic and then we'll crank up the
286:11 - difficulty one step at a time
286:13 - i have a list named students and i have
286:15 - a bunch of student names within this
286:17 - list
286:17 - we have squidward sandy patrick
286:19 - spongebob mr krabs
286:21 - let's say that all of these students are
286:23 - taking a college course
286:25 - perhaps on marine biology what i would
286:27 - like to do is to sort this list in
286:28 - alphabetical order
286:29 - and to do that we have a method that is
286:31 - built in with lists
286:33 - so type the name of your list students
286:35 - dot
286:36 - sort and it's easy as that and to
286:38 - display this list i think i'll use a for
286:40 - loop
286:40 - for i in students
286:44 - print i
286:48 - and there you go that's how to sort a
286:50 - list starting with the top we have mr
286:52 - krabs
286:52 - then patrick sandy spongebob and
286:54 - squidward the sort method of lists can
286:57 - accept keyword arguments
286:58 - there are two optional keyword arguments
287:00 - that we can pass in we can pass
287:02 - in key and or reverse we'll cover key a
287:05 - little bit later
287:06 - if we set reverse to true then our list
287:09 - will be sorted by reverse alphabetical
287:12 - order beginning with
287:13 - squidward spongebob sandy patrick then
287:16 - mr krabs
287:17 - now the sort method does not work with
287:19 - other iterables it's a built-in method
287:21 - for lists
287:22 - if our list of students was instead
287:25 - let's say a tuple
287:26 - well then the sort method is not going
287:28 - to work you can see here that
287:30 - we have an attribute error tuple object
287:32 - has no attribute of sort
287:34 - that's where the sort function would
287:36 - come in because that's useful for other
287:38 - iterables
287:38 - you can also use this for a list 2 i
287:40 - suppose the sort function will return a
287:42 - sorted list so let's use the sort
287:45 - function this time
287:47 - and we'll assign the result to a list
287:50 - called sorted students
287:53 - equals sorted and then we need to pass
287:57 - in
287:57 - an iterable and we have the option of
287:59 - passing in a key
288:01 - and or reverse the iterable that we'll
288:03 - pass in as an argument is our tuple
288:06 - named
288:06 - students so this line will be sorted
288:09 - students
288:10 - equals sorted students sorted students
288:13 - is a list the sorted function will
288:14 - return a list but it accepts an iterable
288:17 - as an argument
288:18 - and to display this we should change 4i
288:20 - and students
288:21 - to 4i in sorted students and now
288:25 - this function will accept our iterable
288:27 - our tuple
288:28 - and create a sorted list and all of
288:30 - these are in alphabetical order
288:32 - and to reverse this we can pass in the
288:35 - keyword argument of
288:36 - reverse equals true and now our list is
288:39 - sorted in
288:40 - reverse alphabetical order all right
288:42 - we're gonna take it up a level
288:44 - welcome to level two sometimes data
288:46 - isn't always as simple here we have a
288:48 - list of tuples each tuple has a
288:51 - corresponding student record
288:53 - we have a name a letter grade for their
288:55 - college course
288:56 - and the student's age now how can we
288:58 - sort this
288:59 - list of tuples by either the student's
289:02 - name
289:03 - their grade or their age well that's
289:05 - where the key
289:06 - keyword argument's going to come in with
289:08 - sorting if you take a look at this list
289:10 - of tuples it somewhat resembles a
289:12 - spreadsheet there's rows and then
289:14 - there's columns
289:15 - the first column corresponds to student
289:17 - names the second column
289:19 - are grades and the third column are all
289:21 - the ages of the students
289:23 - so by default sorting by the first
289:25 - column is actually really easy that's
289:27 - the default
289:28 - so if we need to sort alphabetically
289:30 - that would be the same process
289:31 - as before we would type the name of the
289:33 - list students
289:35 - dot sort but if we were to print
289:38 - this iterable for i in students
289:42 - instead of just the individual student
289:44 - names we're going to get
289:45 - each tuple that we have so now all of
289:48 - these tuples are arranged in
289:50 - alphabetical order starting with
289:52 - the first column that we have which are
289:54 - all the student names
289:56 - now how can we sort these iterables by
289:58 - their second column
289:59 - for this case it would be student grades
290:01 - or even the third column which would be
290:03 - the student ages
290:04 - well that's where the key keyword
290:07 - argument's going to come in
290:08 - this is a keyword argument and we set
290:10 - key equal to a function that's going to
290:13 - return
290:13 - the index of that specific column that
290:16 - we have
290:17 - so let's say key equals grid grade is
290:20 - going to be a function object
290:22 - grade equals and we can easily use a
290:26 - lambda expression for this lambda
290:29 - let's say grades colon
290:32 - grades and we will set an index of one
290:36 - now the first index is zero that's the
290:39 - first
290:39 - column because computers always start
290:41 - with zero column two would have an index
290:44 - of one
290:44 - and then column three would have an
290:47 - index of two
290:48 - so grade equals lambda grids
290:51 - colon grids index one you can also
290:54 - rename these if you want
290:55 - so students dot sort we're setting the
290:58 - key
290:59 - equal to grade and grade is a function
291:01 - object
291:02 - via a lambda function and now all of
291:05 - these students
291:05 - will be sorted by their grades starting
291:08 - with sandy
291:09 - then spongebob mr krabs patrick then
291:11 - squidward
291:12 - if this needs to be in reverse order we
291:15 - can pass in that other keyword argument
291:16 - of reverse
291:17 - equals true and for practice if you
291:21 - wanted to sort all of this data by each
291:23 - student's age
291:24 - then we would change grade to let's say
291:26 - age age equals lambda
291:28 - we'll change grades to maybe ages colon
291:31 - ages and the index would then be two
291:34 - because the first column here is zero
291:37 - then one
291:38 - then two and change key to our function
291:41 - object
291:42 - of edge now each student is
291:45 - sorted numerically beginning with the
291:47 - smallest edge
291:48 - well the youngest person starting with
291:50 - spongebob sandy patrick squidward then
291:52 - mr krabs
291:53 - and like i said before if you want your
291:56 - data arranged in reverse order you can
291:58 - set
291:58 - that keyword argument of reverse to true
292:01 - within the sort method
292:02 - and all of our student data is sorted
292:05 - beginning with the eldest student which
292:07 - is mr krabs
292:08 - then squidward patrick sandy and then
292:10 - spongebob
292:11 - and for the last part of this video
292:13 - let's say that we're working with
292:14 - some other iterable let's say we have a
292:17 - tuple of tuples instead
292:19 - well we can no longer use this sort
292:21 - method because that only belongs to
292:23 - lists
292:24 - you can also use the sort function with
292:25 - lists and it will generate a new sorted
292:27 - list without changing the placement of
292:29 - the original
292:30 - so let's say we have a tuple of tuples
292:33 - and this will create a
292:34 - new sorted list let's call this list
292:37 - sorted
292:38 - students equals then we'll use the
292:41 - sorted function we need to pass in an
292:43 - iterable and we can pass in
292:46 - both a key and or the reverse keyword
292:48 - argument
292:49 - so the iterable would be students
292:53 - and let's set the key equal to edge
292:56 - and i will not reverse it we can keep it
292:58 - as it is but let's change
293:00 - for i in students to sorted students
293:04 - and that's how to use the sorted
293:06 - function to sort
293:07 - an iterable including a list well all
293:10 - right everyone
293:11 - that's how to sort iterables in python
293:13 - if you would like a copy of all this
293:15 - code i will post all of this to the
293:16 - comments section down below
293:18 - but yeah that's a basic way to sort
293:20 - iterables
293:21 - in python hey what's going on everybody
293:24 - it's your bro hope you're doing well in
293:26 - today's video i'm going to show you all
293:27 - how the map function works in python so
293:30 - sit back relax and enjoy the show
293:34 - what up everybody let's discuss the map
293:36 - function the map function will apply a
293:39 - function to each item in an interval
293:41 - that would include lists tuples things
293:43 - like that
293:44 - and the map function accepts two
293:46 - arguments are iterable
293:48 - as well as the function we would like to
293:50 - apply to each item within our iterable
293:52 - for example let's say that we have an
293:54 - online store to represent this i have
293:56 - a list of tuples named store each tuple
293:59 - within this list
294:01 - corresponds to an item for sale within
294:03 - our store
294:04 - there's shirts pants jackets and socks
294:06 - and each item has
294:07 - a price in us dollars let's say now what
294:10 - i would like to do is to convert all of
294:12 - the prices within my store
294:14 - to euros and currently the conversion
294:16 - rate as of the filming of this video is
294:18 - one us dollar to 0.82 euros
294:22 - so let's begin we can easily convert
294:24 - dollars to euros with a
294:25 - lambda function so let's say two euros
294:29 - equals lambda the parameter will be data
294:34 - colon and the next part's a little bit
294:36 - tricky within a set of parenthesis to
294:38 - represent a tuple
294:39 - we'll take data at index 0 that
294:42 - corresponds to the first column
294:45 - comma data at index 1.
294:49 - this represents the index of our prices
294:52 - we're going to take
294:52 - data at index 1 times 0.82
294:57 - and that's it the first column will be
294:59 - left untouched
295:00 - but the data in column 1 will be
295:03 - multiplied by 0.82
295:05 - now our map function is going to create
295:07 - a map object but we can easily cast that
295:10 - to a different type of iterable
295:12 - so let's say that store underscore
295:16 - euros equals map
295:19 - parenthesis and then we can pass in our
295:21 - function as well as our iterable
295:23 - our function is our two euros function
295:27 - comma and our iterable is our store
295:31 - and that is it now if you want to
295:33 - convert this map object to an iterable
295:36 - you can easily surround this with a cast
295:38 - i would like to convert this map object
295:40 - to a list
295:42 - and we will now have a new store named
295:44 - store
295:45 - euros which will have all of the
295:47 - different prices of our store in euros
295:49 - and to display this i'll use a for loop
295:52 - for i
295:52 - in store euros
295:56 - print i and
296:00 - let's try it yep that seems about right
296:03 - all of the prices in our store are now
296:05 - in euros
296:06 - let's pretend that these prices are
296:08 - already in euros and we would like to
296:10 - convert these
296:10 - to american dollars so we will use the
296:13 - same conversion rate but divide
296:15 - by 0.82 so let's create a separate
296:18 - lambda function
296:19 - two dollars equals
296:22 - i think i'll just copy this but we are
296:25 - going to divide
296:26 - the first index of data by 0.82
296:30 - and let's say store dollars to represent
296:34 - our store
296:35 - in dollars because we're pretending now
296:37 - that it's currently in euros
296:41 - and we will display 4i in store dollars
296:45 - so if all of these prices are in euros
296:48 - we are now converting them to american
296:50 - dollars
296:51 - but you may want to do some rounding as
296:52 - opposed to the nearest descent
296:54 - well everyone that is the map function
296:56 - it applies a function to
296:58 - each item in an iterable those include
297:00 - lists tuples
297:01 - the like you pass in your iterable and
297:04 - your function as an argument to the map
297:07 - function so if you would like a copy of
297:09 - all this code i will post all of this to
297:11 - the comment section down below
297:12 - but yeah that is how the map function
297:14 - works in python
297:17 - what's going on everybody it's you bro
297:19 - hope you're doing well and in today's
297:21 - video i'm going to show you all how the
297:22 - filter function works in python
297:24 - so sit back relax and enjoy the show
297:30 - all right all right let's discuss the
297:32 - filter function
297:33 - the filter function creates a collection
297:35 - of elements from an
297:36 - iterable for which a function returns
297:39 - true
297:40 - now what the heck does that mean let me
297:42 - explain let's say that we have a list of
297:44 - tuples named
297:45 - friends each tuple has the name of a
297:48 - friend as well as their age
297:49 - i just made up some ages for all of
297:51 - these friends what i would like to do is
297:53 - to create a
297:53 - separate list for all the friends that
297:55 - are 18 or older
297:57 - so let's say that we're all going out
297:59 - drinking and i would like to create a
298:01 - list of my drinking buddies
298:02 - because they're of drinking age i'm in
298:04 - the united states and the drinking age
298:06 - is currently 21
298:07 - but i think worldwide is 18 so let's go
298:09 - with 18 for this example since
298:11 - i have a worldwide audience all right
298:13 - now with this filter function
298:15 - we have to pass in our iterable as well
298:17 - as a function
298:18 - to get anybody's edge that is over 18.
298:21 - so let's begin by writing a
298:22 - lambda function for this expression here
298:24 - our filter function
298:26 - so let's say age equals lambda
298:30 - data will be the parameter colon data
298:34 - at index one so the first index
298:38 - the first column in this chart here
298:40 - would be zero for other names the next
298:42 - index of one would be all the ages
298:45 - data at index one is greater than
298:48 - or equal to eighteen and that is it
298:51 - that is our lambda function and now
298:53 - we're going to filter
298:55 - our iterable by this function of age so
298:57 - let's write
298:59 - filter pass in our function
299:02 - which is edge comma and our iterable
299:06 - friends now this filter function will
299:08 - return a filter
299:10 - object you can easily cast this i would
299:11 - like to cast
299:13 - my friends list back into a list
299:17 - and i will assign this to a new list
299:19 - let's say
299:20 - drinking buddies
299:24 - equals list filter age
299:27 - and friends and i should be able to
299:30 - print
299:30 - all of the friends that are 18 or older
299:33 - for i
299:34 - in drinking bodies
299:38 - print i
299:42 - and we have rachel monica chandler and
299:44 - ross
299:45 - well everyone that is the filter
299:47 - function it creates a collection of
299:49 - elements
299:50 - from an iterable for which a function
299:52 - returns true
299:53 - i like to think of it as the search
299:55 - results we're searching for any results
299:57 - that meet this criteria where age is
300:00 - greater than or equal to 18
300:02 - and then you can create a separate
300:03 - collection or other list if you want
300:05 - from the results
300:06 - but yeah that is how the filter function
300:08 - works in python
300:10 - yo what's going on everybody it's bro
300:12 - hope you're doing well
300:13 - and in today's video i'm going to show
300:15 - you how the reduce function works in
300:17 - python so
300:18 - sit back relax and enjoy the show
300:22 - well i suppose we're on the reduce
300:24 - function today the reduce function
300:26 - applies a function of our choosing
300:28 - to an iterable and reduces that iterable
300:31 - to a single cumulative value the way
300:34 - this works is that the reduce function
300:36 - performs our function
300:37 - on the first two elements of our
300:39 - iterable and repeats the process
300:41 - until only one value remains i kind of
300:44 - like to think of it like
300:45 - we're recycling elements within an
300:47 - iterable until a single
300:49 - value remains our finished product so
300:51 - how is this useful let's say that
300:53 - we're playing a game scramble and we
300:55 - have a bunch of different letters within
300:57 - an iterable
300:58 - a list is a type of iterable so i have a
301:01 - list named letters and we have all of
301:03 - the letters we need to spell the word
301:05 - what i would like to do is to reduce all
301:07 - of these individual elements into a
301:09 - single cumulative value until only one
301:12 - value remains so we can do that using
301:14 - the reduce function you can also do this
301:16 - with the for loop too there's multiple
301:18 - ways of doing this
301:19 - so using the reduce function we're going
301:21 - to import
301:23 - func tools and now let's say we have
301:28 - our cumulative value stored within a
301:30 - variable named word
301:32 - word equals func tools dot reduce
301:36 - now the reduce function has two
301:38 - arguments the function we would like to
301:40 - apply
301:41 - to the first two elements and then our
301:43 - iterable
301:44 - the interval is easy that is just
301:45 - letters so let's put that in
301:48 - letters and for the function we can
301:50 - easily write a lambda function for this
301:52 - lambda and now this function needs two
301:55 - parameters
301:56 - let's say x and y now what kind of
302:00 - function do we want to perform on the
302:02 - first two elements of our iterable
302:04 - let's combine them together so let's say
302:07 - x
302:07 - plus y and now
302:10 - let's print our single cumulative value
302:14 - of word so this should print
302:18 - the word hello i'm fairly confident that
302:21 - the word hello is worth like
302:22 - 20 points in scrabble now let me explain
302:24 - what happened step by
302:26 - step our reduce function applies our
302:28 - function
302:29 - to the first two elements within our
302:31 - iterable
302:32 - it performs this expression that we set
302:35 - x plus y but really we can write
302:37 - anything here
302:38 - so we perform this expression on the
302:41 - first two elements
302:43 - then we repeat the process again using
302:46 - the result
302:46 - from the first time we use this
302:48 - expression and the next element
302:50 - so we're combining x plus y again
302:54 - and then we're just going to repeat this
302:56 - process until only
302:58 - one value remains it's kind of like
303:00 - we're recycling
303:01 - all of these letters and creating a
303:03 - finished product out of all of these
303:05 - that's how i think of it at least here's
303:07 - a different example let's say that i
303:08 - would like to find
303:10 - the factorial of 5 so i have the numbers
303:13 - 5 through 1 within a list named
303:16 - factorial
303:17 - so if i was to find the factorial of 5
303:20 - via the reduce function
303:21 - i would probably write something like
303:23 - this so let me change
303:25 - word to let's say result result
303:28 - equals functools reduce now our lambda
303:31 - function will be
303:32 - x times y because with factorials we
303:36 - multiply
303:37 - the next two numbers together then we
303:40 - take that result
303:41 - and then multiply the next one in this
303:42 - list so the
303:44 - iterable will be factorial and
303:47 - let's print what our result is
303:51 - so the factorial of 5 should be 120. now
303:55 - let's walk through this we're taking
303:56 - the first two elements of this iterable
303:59 - five
303:59 - and four multiplying together in this
304:02 - case in the last example we concatenated
304:05 - the strings together of x and y
304:07 - in this example we're multiplying them
304:08 - together so we take
304:10 - the first two elements 5 times 4
304:13 - we take the result and apply it to the
304:15 - next iteration
304:17 - of x times y again so 20 times 3
304:20 - is 60. we repeat this process again
304:24 - 60 times 2 is 120 and 120 times 1
304:28 - is 120 so that's kind of how the reduce
304:31 - function
304:32 - works it applies a function of our
304:34 - choosing to the first
304:36 - two elements of an iterable and repeats
304:38 - that process until
304:39 - only a single cumulative value remains
304:43 - so that is the reduce function if you
304:44 - would like a copy of all this code i
304:46 - will post all of this to the comment
304:48 - section down below
304:49 - but yeah that is how the reduce function
304:51 - works in python
304:54 - hey what's going on everybody it's your
304:56 - bro hope you're doing well and in this
304:58 - video i'm going to show you all how list
304:59 - comprehensions work in python so
305:02 - sit back relax and enjoy the show
305:06 - all right everybody so list
305:08 - comprehensions a list comprehension is a
305:10 - way to create a new list with
305:12 - less syntax you can also use a list
305:15 - comprehension to mimic
305:16 - certain lambda functions such as in the
305:18 - previous videos where we use
305:20 - the map and the filter functions and not
305:23 - only that but a list comprehension
305:24 - is easier to read than a lambda function
305:27 - but there is a formula that we're going
305:29 - to follow
305:29 - when we create our list within our list
305:32 - we're going to write an expression
305:34 - for item in iterable now let me give you
305:37 - an example of where a list comprehension
305:39 - would be useful
305:40 - let's take this program that will create
305:42 - a list of all the numbers
305:44 - 1 through 10 squared so if i were to
305:46 - print this we'll get the numbers 1
305:48 - through 10
305:48 - whatever their square is right so we
305:50 - have 1 through 10
305:52 - and the square of 10 is 100 so we wrote
305:55 - this program
305:56 - in three lines of code we're creating an
305:58 - empty list we're creating a for loop
306:00 - and then we're writing an expression for
306:01 - what we want each loop iteration to do
306:04 - now let's write the same program but
306:05 - used a list comprehension
306:07 - and we can write the same program with
306:09 - less syntax
306:10 - so i would write something like this and
306:12 - we're going to follow this formula
306:14 - so our list is going to be named
306:17 - squares equals then within a set of
306:21 - straight brackets
306:22 - we're going to write our expression
306:24 - which is this portion i times i
306:27 - for item so that would be 4i
306:31 - in our iterable that would be range
306:34 - 1 through 11 because remember 11's
306:38 - exclusive
306:39 - and then let's print our squares print
306:43 - squares and there you go
306:47 - we made the exact same program using a
306:49 - list comprehension
306:50 - so basically speaking you just follow
306:52 - this formula you set your list equal to
306:55 - your expression and our expression for
306:58 - this example is i times i
307:00 - for item for i in
307:03 - your interval in range one through
307:05 - eleven
307:06 - so this took three lines of code well if
307:09 - you exclude us printing
307:11 - our list and this program took one line
307:14 - of code
307:14 - now we can also use a list comprehension
307:17 - to mimic certain lambda functions i
307:19 - wrote a program
307:20 - where we will be filtering a list of
307:22 - student grades
307:23 - let's pretend that all of these students
307:25 - took some sort of exam
307:26 - so we have one student that received a
307:28 - 100 90 80 70 60 50 40 30
307:32 - and then one student got a zero because
307:34 - they didn't show up so what i would like
307:35 - to do is to filter
307:36 - all of these student grades into a list
307:39 - that only contains
307:40 - students that passed and the criteria
307:42 - for a passing grade will be
307:44 - a 60 or above so i would like to filter
307:48 - all passing students and if i was to
307:50 - write this program using the filter
307:52 - function i would probably write
307:53 - something like this
307:54 - so i need a function and then my list
307:56 - that i'm working with
307:57 - lambda x colon x is greater than or
308:01 - equal to 60
308:02 - will filter all of the results and then
308:04 - convert it to a list named past students
308:06 - so the result will look something like
308:08 - this i have five student grades in here
308:11 - with 100 90 80 70 and 60.
308:14 - now let's write the same program using a
308:16 - list comprehension
308:17 - now there's just one portion to this
308:19 - formula for list comprehension that
308:20 - we're going to add
308:21 - at the end we're going to add if
308:23 - conditional we can check
308:25 - some sort of condition after each
308:27 - iteration so
308:28 - let's write the same program using a
308:30 - list comprehension following
308:31 - this new updated formula that we have so
308:34 - we need
308:34 - our list which will be named past
308:38 - students equals first comes our
308:41 - expression
308:41 - and it's just i for this example for
308:44 - item
308:45 - i in our iterable
308:48 - of students and then if we can check our
308:51 - conditional
308:52 - if i is greater than or equal to 60
308:56 - and this will have the same effect as
308:59 - our previous program but instead it uses
309:01 - a list comprehension
309:03 - now if your program has multiple output
309:06 - if you need an else statement within
309:07 - your conditional
309:08 - you're actually going to move this
309:09 - portion of the if conditional within
309:12 - our formula to right after the
309:13 - expression so let's write
309:15 - an if else statement here
309:18 - so let's say that instead of just
309:20 - excluding any student that didn't pass
309:22 - we'll replace their grade with the word
309:24 - failed and we can do that
309:26 - using an if else statement so let's do
309:28 - this again i'm going to copy what we
309:30 - have here
309:31 - paste it and we'll move our conditional
309:33 - from the end
309:35 - to just after the expression portion i
309:39 - if i is greater than or equal to 60 and
309:41 - you can see here that we need to add an
309:43 - else statement else will return
309:46 - the word failed
309:51 - so we're replacing each instance of
309:54 - a failing grade with the word failed
309:56 - instead so if your condition
309:58 - returns whatever i is you can just add
310:00 - that to the end
310:01 - if you need an if else statement you're
310:02 - going to add it right after the
310:04 - expression
310:05 - so everybody in conclusion a list
310:07 - comprehension is a way to create a new
310:10 - list
310:10 - with less syntax you can even mimic
310:13 - certain lambda functions which we did
310:14 - with the
310:15 - filter function and it has the added
310:17 - benefit of being easier to read than a
310:19 - lambda function
310:21 - so you just follow one of these formulas
310:22 - depending on what you're trying to do
310:24 - so you need at least list equals your
310:27 - expression
310:28 - for item and your interval if you have a
310:30 - condition that you want to check
310:31 - you just add that to the end of your
310:33 - list comprehension if you have an if
310:35 - else statement
310:36 - then you'll add that to right after the
310:38 - expression so you just follow one of
310:40 - these formulas depending on how you want
310:42 - to write your program
310:43 - so that is a list comprehension if you
310:45 - would like a copy of this code i will
310:47 - post all of this to the comments section
310:48 - down below and well
310:50 - yeah that's how list comprehensions work
310:52 - in python
310:54 - yo what's going on everybody it's bro
310:56 - hope you're doing well
310:57 - and in this video i'm going to explain
310:59 - dictionary comprehensions in python so
311:01 - sit back relax and enjoy the show
311:06 - okay people dictionary comprehensions
311:09 - they're very similar to list
311:10 - comprehensions except
311:11 - they're with dictionaries that's it
311:13 - video over okay but seriously a
311:15 - dictionary comprehension is a way to
311:17 - create dictionaries using an expression
311:19 - and they can replace for loops and
311:21 - certain lambda functions
311:22 - and all we have to do is follow this
311:24 - formula dictionary equals
311:26 - key colon our expression for key value
311:29 - in iterable so let's go over a few
311:31 - examples our first example we're going
311:33 - to take
311:34 - this dictionary named cities in f f is
311:37 - short for fahrenheit
311:38 - i have different city names as keys and
311:41 - relative temperatures as
311:42 - values in fahrenheit so new york is 32
311:46 - degrees fahrenheit boston is 75.
311:48 - los angeles is 100 and chicago is 50.
311:51 - and what we'll be doing is creating a
311:53 - separate dictionary where all of these
311:55 - temperatures will be in celsius
311:57 - using a dictionary comprehension so
312:00 - let's follow this formula let's create a
312:02 - new name for this dictionary
312:03 - let's say cities in c short for celsius
312:07 - equals and we will follow this pattern
312:10 - first our key
312:11 - golden then our expression we'll go back
312:13 - to this in just a moment
312:15 - for key comma
312:18 - value in our iterable
312:21 - of cities in f and since we're working
312:25 - with a dictionary we're going to use
312:27 - the items method now we just need to
312:29 - fill in this expression
312:31 - there is a formula to convert fahrenheit
312:33 - to celsius and it should be on the
312:34 - screen right about now
312:36 - so let's follow this formula so we'll
312:38 - take our value
312:40 - minus 32 and just for good measure i'm
312:43 - going to put these within parentheses
312:45 - and we will multiply all of this by
312:49 - 5 divided by 9 and that is it so we have
312:52 - our key
312:54 - our expression to convert fahrenheit to
312:56 - celsius
312:58 - for key value in our iterable of
313:01 - cities in f our previous dictionary and
313:04 - let's test this by printing our new
313:07 - dictionary
313:08 - cities in c
313:12 - actually i think i'm going to round
313:14 - these numbers just so it's more readable
313:16 - so let's round all this there we go so
313:19 - new york and celsius is zero
313:21 - boston is 24. los angeles is 38 and
313:24 - chicago is 10.
313:26 - so we created a new dictionary using a
313:29 - dictionary comprehension
313:30 - now with these dictionary comprehensions
313:32 - you can add an if conditional to the end
313:34 - of this
313:35 - so let's say that we have a separate
313:37 - dictionary of weather
313:38 - like a description of the weather in
313:40 - each city new york is snowing
313:42 - boston is sunny los angeles is sunny and
313:44 - chicago is cloudy
313:46 - let's say that we would like to create a
313:47 - separate dictionary with a dictionary
313:50 - comprehension
313:51 - that only has cities where the weather
313:53 - is sunny
313:54 - so i would write something like this
313:57 - let's say sunny
313:58 - weather will be the name of our
313:59 - dictionary equals and we'll follow
314:02 - this formula and then we just tack on
314:04 - our conditional to the end so it's kind
314:06 - of the same as before really
314:08 - so key colon and we don't really have an
314:11 - expression here so let's just say
314:14 - value then for
314:19 - key comma value
314:22 - in our iterable of
314:25 - weather dot items
314:28 - then our conditional if value
314:33 - sunny because we are only looking for
314:35 - sunny weather
314:37 - and let's print this print
314:40 - our dictionary of sunny weather
314:44 - and let me just make this more readable
314:45 - for you guys and our new dictionary
314:47 - comprehension
314:48 - will create a dictionary of key values
314:51 - where the value
314:52 - is sunny using an if conditional at the
314:55 - end of our dictionary comprehension
314:57 - here's a third example for you well if
314:59 - you have an if else condition you can
315:00 - add that to where the expression is
315:02 - within your dictionary comprehension
315:04 - so i'm going to reuse the previous
315:06 - dictionary for the first example where
315:08 - we have
315:09 - cities and their temperatures as values
315:11 - so we're going to replace each
315:13 - temperature with a description of the
315:15 - weather
315:16 - is it warm or is it cold so let's do
315:18 - that using
315:19 - a dictionary comprehension that contains
315:21 - an if else statement
315:22 - so let's say we have a new dictionary
315:24 - named desk short for description
315:27 - cities it's a brief description of each
315:29 - city's temperature
315:31 - so we follow this formula key
315:34 - then our if else conditional for key
315:37 - value
315:38 - and iterable actually i probably can
315:40 - copy all this
315:41 - just to save some time okay so our
315:44 - iterable
315:45 - will be cities dot items
315:49 - and our conditional is going to be
315:53 - we will return warm if
315:56 - our value is greater than or equal to
316:00 - let's say 40. else
316:04 - cold and we will print
316:07 - our new dictionary of desk cities
316:11 - description of cities so new york is
316:14 - cold because it's 32 that's below 40.
316:17 - boston is warm los angeles is warm and
316:19 - chicago is warm
316:21 - now if your condition gets somewhat
316:22 - complex you can even call a separate
316:25 - function to keep your code more
316:26 - organized
316:27 - so key then we can call a function and
316:29 - pass in a value
316:30 - for key value in iterable so i'm going
316:32 - to again
316:33 - reuse our city names and our
316:35 - temperatures
316:36 - and this time we are going to call a
316:39 - function instead
316:40 - i think i'll reuse this code from the
316:41 - previous example where we have a
316:43 - separate dictionary named
316:44 - desk cities and i'm going to replace
316:47 - this if else statement
316:48 - with a function so let's say we have a
316:51 - function that is named
316:52 - check temp and we will pass in our value
316:56 - and we just need to define this function
316:58 - so let's define that here
317:00 - so let's define check
317:03 - temp and our parameter is our value that
317:06 - we're currently working on within our
317:08 - dictionary
317:09 - value then we'll write if
317:12 - value is greater than or equal to
317:16 - let's say anything above how about 70
317:19 - will return the word hot
317:24 - then else if
317:27 - let's say 69 greater than or equal to
317:32 - value and then
317:35 - value is greater than or equal to
317:39 - how about 40 then we will
317:43 - return the word warm
317:46 - and lastly else return
317:51 - cold and let me just fix some of the
317:53 - spacing
317:56 - now depending on the temperature that is
317:58 - stored within each value of our
318:00 - dictionary
318:01 - we will call a function that will return
318:04 - one of a few different outputs
318:06 - so it's kind of like we're using the map
318:08 - function the map lambda function
318:11 - so let's print our description
318:14 - of cities and we should get a short
318:16 - description of the temperature in each
318:18 - city
318:19 - after we call the check temperature
318:21 - function and then pass in each value
318:23 - from our dictionary
318:24 - so new york is cold because it's 32
318:27 - degrees fahrenheit
318:28 - boston is hot because it's above 70. los
318:31 - angeles is hot
318:32 - because it's 100 and then chicago is
318:34 - warm because that is 50 which is between
318:36 - 69 and 40 within our function
318:40 - so that is a dictionary comprehension
318:42 - it's a shortcut where you can create
318:44 - dictionaries using an expression
318:46 - and they can replace for loops and
318:48 - certain lambda functions
318:49 - so if you would like a copy of all this
318:51 - code i will post all of this to the
318:53 - comment section down below
318:54 - and well yeah that's how dictionary
318:56 - comprehensions work
318:57 - in python hey what's going on everybody
319:00 - it's bro hope you're doing well and in
319:02 - today's video i'm going to show you how
319:04 - the zip function works in python so
319:06 - sit back relax and enjoy the show
319:11 - all right ladies and gentlemen welcome
319:13 - back we're talking about the zip
319:14 - function today
319:16 - the zip function will aggregate elements
319:18 - from two or more iterables
319:20 - iterables are those things like lists
319:23 - tuples
319:23 - sets etc and the zip function will
319:26 - create a
319:26 - zip object with paired elements from
319:29 - each iterable
319:30 - stored in a tuple for each element
319:33 - within our zip object
319:34 - here's an example let's say that we have
319:37 - two different types of iterables
319:38 - i have a list of usernames and a few
319:41 - usernames within here are
319:43 - dude bro and mr and i have a
319:46 - tuple of passwords and i have some very
319:48 - secure passwords
319:49 - such as password abc123
319:53 - and guest what i would like to do is to
319:55 - zip elements from each iterable together
319:58 - so that they're in pairs and each pair
320:00 - is going to be stored as a tuple within
320:03 - a zip object and here's how we can do
320:05 - that let's say that we will create a zip
320:07 - object called users
320:09 - and we will use the zip function the zip
320:11 - function will take a
320:13 - varying amount of iterables we're going
320:14 - to pass in our usernames
320:16 - and passwords and zip them together so
320:18 - let's pass in usernames
320:20 - as well as passwords and now our zip
320:23 - object of users
320:24 - is actually iterable zip objects are
320:26 - iterable so we can use them within a for
320:28 - loop
320:28 - so let's type for i in users
320:32 - and print i
320:36 - and what we get is that we have a zip
320:39 - object
320:39 - of tuples and each tuple is storing each
320:42 - pair of elements from our
320:44 - two iterables now users is a
320:47 - zip object and if you don't believe me
320:49 - let me prove it i'm going to print
320:51 - the type of users and this will print
320:54 - that users is indeed a zip object
320:58 - but you can easily convert this to a
321:00 - different type of iterable by using a
321:02 - cast
321:03 - let's say that we would like to convert
321:04 - our zip object into a list
321:07 - so we'll surround the zip function with
321:09 - a cast to a list
321:10 - and now the data type of users is now a
321:13 - list
321:14 - what we have is a list of tuples and
321:16 - each tuple is storing a
321:18 - pair of elements from our two iterables
321:21 - of usernames and passwords
321:22 - now currently since we're passing in
321:24 - only two different iterables we can
321:26 - easily make this
321:27 - a dictionary so that these are key value
321:30 - pairs
321:31 - so let's cast our zip object as a
321:33 - dictionary
321:34 - and to display all of the elements
321:36 - within our dictionary all the key value
321:38 - pairs
321:38 - we're going to change our for loop to
321:40 - this for key value
321:43 - in users dot and we will use the
321:46 - items method print key
321:50 - comma value actually i think i'm going
321:53 - to separate each of these with
321:54 - a colon just to make it more readable
321:58 - and now when we zip these two intervals
322:00 - together
322:01 - we end up with a dictionary of usernames
322:04 - and passwords and the name of this
322:06 - dictionary is users
322:08 - now you're not limited to just two
322:11 - iterables you can add
322:12 - a third iterable or more so this time
322:14 - let's create a
322:16 - maybe a list a list of last login dates
322:19 - and i'll just call this
322:20 - login date equals and why not make a
322:23 - list
322:24 - and let's make up some dates let's say 1
322:27 - 1
322:27 - dash 20 21
322:32 - 12-20-21
322:34 - and 1-3-20
322:38 - 21 okay so let's create
322:42 - a zip object of users and we're going to
322:46 - zip
322:48 - user names passwords
322:52 - and login date
322:56 - and let's iterate over this for i
323:00 - in users print
323:03 - i now we have a tuple for each element
323:08 - and instead of a pair we now
323:10 - have a trio i guess of all of the
323:13 - different elements
323:14 - from each iterable so in conclusion
323:17 - the zip function will aggregate elements
323:19 - from two or more
323:20 - iterables and create a zip object with
323:23 - paired or grouped together elements
323:25 - stored in a
323:26 - tuple for each element within our zip
323:29 - object
323:30 - so that is the zip function if you would
323:32 - like a copy of this code i will post
323:34 - this to the comment section down below
323:36 - and well yeah that's how the zip
323:38 - function works in python
323:41 - hey what's going on everybody it's you
323:43 - bro hope you're doing well
323:44 - and i'm going to explain the purpose of
323:46 - if name equals main
323:48 - in python so sit back relax
323:51 - and enjoy the show
323:54 - during your programming journey you may
323:56 - have encountered this strange statement
323:58 - of
323:58 - if name equals main now what the heck
324:01 - does that mean
324:02 - so with python files also referred to as
324:05 - modules by including this statement it
324:08 - gives our modules some flexibility
324:10 - one a module that has the statement can
324:12 - be run as a standalone program
324:15 - or two this module can be imported
324:18 - and used by other modules if there's
324:20 - some sort of useful functions
324:22 - or other resources within this module to
324:24 - be imported
324:25 - by including the statement of if name
324:27 - equals main we're checking to see if a
324:30 - user
324:30 - is running this module as either a
324:32 - standalone program
324:34 - or they're importing it from another
324:36 - module behind the scenes
324:38 - the python interpreter will set special
324:40 - variables
324:41 - one of which is double underscore name
324:44 - it's a variable
324:45 - and python will assign the name variable
324:48 - a value
324:49 - of main if it's the initial module being
324:52 - run
324:52 - and we can actually test that by
324:54 - printing double
324:56 - underscore name so since this is the
324:59 - initial module being run
325:01 - module one for my example name is going
325:04 - to be assigned a value
325:05 - a string of main now check this out i
325:09 - have two modules what if i were to
325:12 - import module 2 and check the name
325:14 - variable of module 2.
325:16 - let's try it import module
325:20 - two
325:23 - in order to access a variable from
325:26 - another module i need to type the name
325:28 - of the module
325:29 - module two dot and i would like to check
325:32 - the special name variable of module 2
325:35 - and print it
325:37 - so when you import a module this name
325:40 - variable is going to be assigned
325:41 - the name of the module in this case
325:43 - module 2.
325:44 - this time what if we change the roles
325:46 - around i'm going to copy all of this
325:48 - text
325:49 - and paste it within module two we're
325:52 - going to
325:52 - import from module one we will
325:56 - print that special name variable of
325:59 - this module module 2 and then print the
326:02 - name variable
326:03 - of module 1 which is being imported now
326:06 - when i run this program i'm going to
326:08 - instead
326:09 - run from module 2.
326:12 - now this time that special name variable
326:15 - of module 2 is main and the special name
326:19 - variable of module 1
326:21 - is module 1 the name of the module
326:24 - so by including a statement such as
326:27 - if name equals main we're checking to
326:30 - see if this module is being run
326:32 - directly or indirectly so let's test it
326:36 - within this statement of if name equals
326:39 - main
326:39 - let's print running this
326:43 - module directly
326:47 - else that must mean that we're running
326:49 - this module
326:50 - indirectly so let's print
326:54 - running other
326:57 - module indirectly
327:00 - okay so i'm going to go to module 1
327:03 - and run from here running this module
327:07 - directly
327:08 - now let's do the same thing with module
327:10 - two but we need to
327:12 - import module
327:16 - one and let's run for module two
327:24 - running other module indirectly for the
327:27 - time being i'm just going to write pass
327:28 - within
327:29 - our if name equals main as a placeholder
327:32 - and get rid of our if statement
327:33 - so let's say within module 1 there's a
327:36 - useful function or resource we would
327:38 - like to access
327:39 - from module 2. so let's say we have a
327:41 - function named hello
327:43 - and all this will do is print the word
327:46 - hello
327:47 - let's just pretend that it's a useful
327:49 - function not really but
327:50 - let's pretend so in order to use this
327:54 - function from module two i need to
327:56 - import module one
327:58 - then type module one dot and
328:02 - then the name of the function so i'm
328:04 - going to run
328:05 - from module 2 and this will print
328:08 - hello but what if i run this program
328:11 - from module 1.
328:13 - so right now module 1 cannot be run
328:16 - directly as a standalone program
328:18 - so i cannot print the word hello so what
328:21 - i could do
328:22 - is within if name equals main i can
328:25 - call that hello function directly
328:28 - so let's run from module one
328:31 - hello one other thing that you might see
328:34 - too within
328:35 - the if statement if name equals main
328:37 - there might be a call for
328:39 - a main function and you can write the
328:41 - main body of your program within
328:43 - a main function so everybody in
328:46 - conclusion
328:47 - the reason that people may include this
328:49 - statement if name
328:50 - equals main is that it allows our
328:52 - modules to have some flexibility
328:54 - they can be run as a standalone program
328:57 - or they can be imported and used by
328:59 - other modules
329:00 - and this is because the python
329:02 - interpreter sets
329:03 - that special variable of name with a
329:06 - value
329:07 - of main if it's the initial module being
329:10 - run
329:10 - if you would like a copy of my code and
329:12 - my notes i will post all of this to the
329:14 - comment section down below
329:16 - but yeah that's the purpose of if name
329:19 - equals main
329:19 - in python hey what's going on everybody
329:23 - it's bro hope you're doing well and in
329:25 - this video i'm going to show you all a
329:26 - few useful functions related to
329:28 - times and dates using the time module in
329:31 - python so
329:32 - sit back relax and enjoy the show
329:37 - alright everybody so the time module
329:39 - let's begin by importing time
329:41 - and the first thing that i'm going to
329:42 - explain to you while is how we can find
329:44 - our computer's epic
329:46 - also pronounced as epoch so this is a
329:49 - date and time
329:50 - in which your computer thinks time began
329:52 - think of it that way at least
329:54 - so we use our epic as a reference point
329:58 - so to find your computer's epic it's
329:59 - going to vary based on your computer and
330:01 - your operating system
330:02 - so to find your computer's epic type
330:04 - time dot
330:06 - c time and as an argument we will pass
330:08 - in zero
330:10 - now what this method will do is that
330:12 - this method will convert a time
330:14 - expressed in seconds and convert it to a
330:16 - readable string
330:18 - so if i was to pass in 0 and print it
330:20 - well then
330:21 - this will display the date and time
330:23 - which is my epic
330:25 - our reference point so for me my epic is
330:28 - wednesday december 31st 6 p.m
330:31 - 1969 so i've just added a note
330:34 - that the c time method will convert a
330:37 - time expressed in seconds
330:39 - since epic and convert it to a readable
330:42 - string a readable
330:44 - date and time so for practice let's pass
330:47 - in perhaps
330:47 - 1 million seconds and see what date and
330:50 - time that we receive
330:51 - so our c time method will return a date
330:54 - and time
330:55 - one million seconds past this epic here
330:59 - so that would be for me monday january
331:02 - 12th
331:02 - about 7 a.m 1970. our next method is
331:06 - the time method of the time module let's
331:09 - print
331:10 - time dot time method and what this
331:12 - method will do
331:13 - is return the current seconds that have
331:16 - passed
331:16 - since our epic using our computer's
331:19 - clock
331:20 - so the number that i end up with is just
331:23 - over
331:23 - 1.6 billion and this is in seconds
331:27 - so for me 1.6 billion seconds
331:30 - has passed since that date which is my
331:33 - epic
331:33 - i believe it was december 31st 1969
331:37 - and every time that i rerun this program
331:39 - you can see that the amount of seconds
331:41 - that has passed is actually increasing
331:44 - so
331:45 - that is the time method it will return
331:47 - the current seconds
331:49 - since you're epic using your computer's
331:51 - clock and you know what
331:52 - just for fun let's change the date and
331:55 - time under clock and see what happens
331:57 - so let's change the year to
332:00 - how about the year 2000 change
332:04 - and close so let's see what number we
332:07 - get with the time method now
332:09 - so we get just under 1 billion 948
332:14 - million seconds have passed
332:16 - and now if you need to retrieve the
332:18 - current date and time
332:19 - well there's one of a few ways in which
332:21 - you could retrieve that but one way is
332:23 - that we can combine
332:24 - both of these methods of the see time
332:27 - method and the time method of the time
332:29 - module
332:30 - so let's print time dot c
332:33 - time and we're going to pass in an
332:35 - amount of seconds
332:36 - into the c time method as an argument so
332:39 - within
332:40 - the c time method we're going to call
332:42 - the time method
332:44 - so the time method will return an amount
332:46 - of seconds
332:47 - since our epic and the c time method
332:49 - will convert
332:50 - that amount of seconds to a readable
332:52 - date and time
332:53 - so the current date and time is saturday
332:57 - january 23rd about 3 p.m 20 21
333:00 - now there is more than one way to get
333:02 - the current date and time
333:03 - another way is to use the local time
333:06 - method and the local time method will
333:08 - create a
333:09 - time object based on the current time so
333:12 - what i'm going to do is
333:14 - create a variable called time object
333:17 - and i just need to explain a few things
333:19 - about time objects
333:20 - so to best explain this i'm going to
333:22 - print our time
333:23 - object now a time object is also
333:26 - referred to as a
333:27 - struct time object it is made up of
333:30 - different keyword arguments
333:32 - there's a year a month day
333:35 - hour minutes seconds day of the week
333:39 - day of the year and this keyword
333:41 - argument here has something to do with
333:42 - daylight savings time
333:44 - so there's quite a few uses with time
333:46 - objects
333:47 - and one way is that we can format them
333:50 - however we want because right now
333:52 - this time object is not in a readable
333:54 - format
333:55 - so to convert this time object into a
333:58 - readable string we'll need the help of a
334:00 - separate function
334:01 - and that is the strf time function
334:05 - str is short for string f4 format and
334:08 - time
334:09 - well for time i guess so this function
334:12 - needs two arguments a format and a time
334:15 - object so our strf time function will
334:18 - accept
334:19 - a format and a time object as an
334:22 - argument
334:23 - so our format is really just a string
334:26 - of different directives and to best
334:28 - explain these i'm going to head to
334:30 - python's official documentation on the
334:32 - subject
334:33 - so here i am on python's website
334:35 - regarding the time module and underneath
334:38 - this section on the strf time function
334:41 - there are different directives that we
334:43 - can embed within our format string that
334:45 - we pass in as an argument
334:47 - depending on the directive that we add
334:49 - we can display
334:50 - a certain format of our date and time
334:54 - so for example if i was to pass in let's
334:57 - say
334:57 - percent lowercase a then we will display
335:01 - the time object's weekday name and
335:04 - you're not limited to just one directive
335:05 - you can add any combination of
335:07 - directives
335:08 - so if i was to add percent m well we
335:11 - would display
335:12 - the month of our date time object as a
335:14 - number
335:15 - 1 through 12. so there's a bunch of
335:17 - directives here and i'm going to be
335:18 - using some of these
335:20 - so within a string for the format
335:22 - argument i'm going to pass in
335:24 - percent capital b for the name of the
335:27 - month
335:28 - percent d for the day
335:31 - percent y for the year
335:35 - percent h for the hour and to format
335:38 - this i'm going to add a colon
335:40 - to separate hours and minutes percent
335:43 - m for minutes colon percent s
335:48 - for seconds and then we are going to
335:51 - assign
335:51 - all of this to a variable let's say
335:54 - local
335:55 - time and local time will be a string
335:58 - so let's print our local time
336:03 - and the current time is january
336:06 - 23rd 2021 about 3 p.m
336:10 - oh and i almost forgot you can also get
336:12 - the utc
336:13 - time that is the coordinated universal
336:16 - time if you know how that works
336:18 - so if you need that you would just use
336:20 - the gm
336:21 - time method for the utc time coordinated
336:25 - universal time
336:26 - okay next up we have the strp
336:29 - time function and this function will
336:32 - parse
336:32 - a string representation of a time and or
336:36 - date
336:36 - and return a time object so we need to
336:39 - pass in
336:39 - a string representing the date and or
336:42 - time as well as a format
336:44 - string so let's create a time string and
336:47 - this variable is going to be a string
336:49 - representation of
336:50 - a date let's say 20th of april 2020
336:54 - and what we can do is take this string
336:56 - representation of a time and or date
336:58 - and parse it to a time object so we're
337:01 - going to pass in our time
337:02 - string variable as well as a format
337:05 - string
337:06 - so let's say i would like to parse
337:10 - the day so that would be percent d for
337:12 - day
337:13 - then percent b for name of the month
337:17 - and then comma percent y for year
337:21 - this function will create a time object
337:23 - so let's assign that to a variable
337:26 - time object equals time dot strp time
337:29 - we're passing in our string
337:31 - representation of a time
337:32 - or date as well as a format string
337:35 - and we can print our time object using a
337:38 - print statement
337:40 - however this is going to be in a form
337:41 - that is somewhat difficult to read but
337:43 - you can see at least we have a time
337:45 - object
337:46 - with all of these keywords filled in
337:48 - with anything that we passed in
337:49 - via these format directives that we have
337:52 - now the next function
337:53 - is the asc time function
337:56 - and this function accepts a time object
337:59 - or a tuple representation
338:01 - of a relative time so this time let's
338:04 - create a
338:04 - time tuple and we're going to follow
338:08 - this order we can pass in
338:09 - up to nine values the first value is a
338:12 - year so let's pass in perhaps
338:14 - 2020 a month let's say four
338:17 - a day how about 20 four hours
338:20 - let's say four minutes 20 and seconds
338:24 - maybe zero let me just fix some of the
338:26 - spacing here
338:27 - okay you can also pass in a numbered day
338:30 - of the week
338:31 - um i'm just going to say zero i don't
338:33 - think it's really that important
338:35 - a day of the year zero and
338:38 - negative one or zero for daylight
338:39 - savings time so
338:41 - we created a time tuple and we can pass
338:44 - in a time
338:44 - object or a tuple representation of a
338:47 - time
338:48 - following this formula so let's pass in
338:51 - our time tuple
338:52 - and this will create a time string a
338:55 - string representation of the time that
338:57 - we create
338:58 - and let's print our time string
339:02 - and we should have april 20th
339:05 - about four in the morning the year 2020.
339:08 - so that is asc time it will convert a
339:11 - tuple representation of a time and date
339:15 - or a time object and convert it to a
339:17 - readable
339:18 - string now another option is to use m
339:21 - k time and mk time will take a
339:24 - tuple representation of a time or a time
339:28 - object
339:28 - and convert it to seconds since epic
339:32 - so april 20th of the year 2020
339:35 - is about 1.5 billion seconds
339:38 - since our epic date and for me that was
339:40 - december 31st the year 1969
339:44 - so that is a few useful functions of the
339:47 - time module
339:49 - if you would like a copy of this code i
339:50 - will post all this to the comment
339:52 - section down below
339:53 - and well yeah that's the time module in
339:56 - python
339:58 - yo what's going on everybody it's bro
340:00 - hope you're doing well
340:01 - and in this video i'm going to explain
340:03 - multi-threading in python so
340:04 - sit back relax and enjoy the show
340:09 - think of a thread as a flow of execution
340:12 - like a river
340:13 - and each thread can carry out its own
340:15 - separate order of instructions
340:17 - if we use this process of
340:18 - multi-threading we can have our program
340:21 - run
340:21 - different parts of its program at
340:23 - different times
340:24 - they all run concurrently but not truly
340:27 - in parallel that is a concept for later
340:29 - referred to as multi-processing
340:31 - so with reds they each take a turn
340:34 - running to achieve concurrency
340:36 - this is due to a notorious feature known
340:38 - as the gil
340:40 - the global interpreter lock only one
340:43 - thread can be running at one time
340:45 - but they can all take turns when one
340:47 - thread is idle
340:48 - so this allows one thread to hold
340:50 - control of the python interpreter
340:53 - at any one time so they run concurrently
340:55 - but not truly in parallel
340:57 - which is what we do with
340:59 - multi-processing now programs and tasks
341:01 - can be divided into
341:02 - two different categories they can be cpu
341:05 - bound that is a program or a task
341:08 - that spends most of its time waiting for
341:10 - internal events
341:11 - such as a task that is cpu intensive
341:14 - it is better to use multi-processing for
341:17 - tasks that are cpu bound
341:19 - now tasks that are io bound means that
341:22 - the program will spend most of its time
341:24 - waiting for external events
341:26 - such as waiting for user input or if
341:29 - you're doing activities like web
341:30 - scraping
341:31 - you do a lot of sitting around so with i
341:33 - o bound tasks it's better to use
341:35 - multi-threading
341:36 - because we can have multiple threads
341:38 - running concurrently
341:40 - but not truly in parallel like what we
341:42 - do with multi-processing
341:43 - after importing the threading module we
341:46 - can count the number of threads that are
341:48 - currently running
341:48 - in the background whenever we run a
341:50 - program we have one thread that is
341:52 - running that is in charge of
341:54 - executing our program and we can print
341:56 - the active count of threads running in
341:58 - our program
341:59 - using the active count function of the
342:01 - threading module
342:03 - so this will print one we have one
342:05 - thread that is running
342:06 - and we can print a list of all the
342:09 - threads that are running
342:11 - by using the enumerate function so
342:14 - the one thread that is in charge of
342:16 - running our program
342:17 - is referred to as the main thread by
342:20 - using this concept of multi-threading we
342:22 - can have
342:22 - more than one thread running
342:24 - concurrently not truly in parallel
342:27 - all the threads will take turns while
342:28 - one of them is idle
342:30 - so we can have more than one thread
342:32 - running more than just the main
342:34 - thread which is in charge of running the
342:35 - main body of our program
342:37 - so while our main thread is in charge of
342:39 - running the main body of our program
342:41 - we can have another thread that's in
342:43 - charge of a separate part of it
342:45 - maybe like a countdown timer or
342:47 - something so
342:48 - one good example take that quiz game
342:50 - that we made some number of videos ago
342:52 - while we were waiting for user input
342:55 - which is a
342:56 - i o bound task we could have had a
342:58 - countdown timer going
342:59 - like you only have so many seconds to
343:01 - answer this question we could have had
343:03 - one thread in charge of waiting for user
343:05 - input and another thread
343:06 - in charge of the countdown timer so
343:09 - that's an example of multi-threading
343:11 - we had two threads running concurrently
343:14 - and what we'll be doing in this video is
343:15 - creating a program that involves
343:17 - multi-threading we can have
343:19 - different threads in charge of different
343:21 - parts of our program and they can all
343:22 - run
343:23 - concurrently they'll all take turns
343:25 - while one of them is idle
343:26 - so let's say that we're running late for
343:29 - school
343:30 - or work in the morning and we have three
343:32 - different tasks that we need to complete
343:34 - before we can leave
343:35 - for school or work so think of three
343:38 - different
343:38 - things you do in the morning such as
343:40 - maybe eat
343:41 - breakfast some people drink coffee or
343:44 - maybe a beverage of your choice so drink
343:48 - coffee and some people like me they like
343:51 - to
343:51 - do their homework last minute so i'll
343:53 - say study
343:54 - before i leave for work or school in the
343:57 - morning
343:58 - so what we'll do in each of these
344:00 - functions each of these functions
344:01 - should take some amount of time to
344:03 - complete so we can have our main thread
344:06 - sleep for a given number of seconds
344:07 - using the sleep function
344:10 - time dot sleep and let's say that in
344:12 - order for me to eat breakfast
344:14 - this task will take me three seconds
344:16 - let's just pretend that instead of
344:18 - minutes this will be
344:19 - in seconds so drink coffee will take me
344:23 - four seconds and study will take me
344:26 - five seconds then when we finish
344:30 - sleeping
344:31 - let's print a confirmation message let's
344:34 - say
344:35 - you eat breakfast
344:38 - as in you finish eating breakfast with
344:41 - drink coffee
344:43 - you drink coffee
344:48 - and with study
344:51 - you finish studying
344:56 - now each of these tasks are i o bound
344:58 - they're going to be spending a lot of
345:00 - time just waiting around
345:01 - for external events they're waiting for
345:03 - the sleep function to expire before they
345:06 - can finish their task
345:07 - so we're going to have all of these
345:09 - three functions run on our main thread
345:12 - and we'll see how long it takes for us
345:13 - to complete our morning ritual
345:15 - these three tasks so let's call these
345:18 - three functions within
345:19 - our main thread so let's call the
345:22 - eat breakfast function first followed by
345:26 - drink coffee and then study
345:30 - in that order so this program is going
345:33 - to take approximately
345:35 - let's see 12 seconds to complete so
345:38 - there's going to be a pause for a second
345:40 - you eat breakfast then followed by
345:44 - you drank coffee and then study
345:50 - you finished studying so this program
345:52 - took about
345:53 - 12 seconds overall so if this were
345:56 - realistic
345:57 - what we would have done is we would sit
345:59 - down and eat breakfast for
346:01 - three minutes well three seconds in this
346:03 - case and then
346:04 - once we finish eating breakfast only
346:06 - then are we allowed to drink our coffee
346:09 - and once we finish our coffee only then
346:12 - can we study
346:13 - so we completed these tasks sequentially
346:16 - and not concurrently for us to move down
346:19 - to the next
346:19 - function we need to complete the
346:21 - previous functions because we're doing
346:23 - this in order
346:24 - but realistically us human beings we
346:27 - would probably
346:28 - eat breakfast drink coffee and study
346:30 - altogether because
346:32 - we can multitask and we can complete
346:34 - these three functions in less time
346:36 - and that's kind of the same process as
346:38 - multi-threading we can have
346:40 - these three separate functions running
346:42 - concurrently
346:43 - as if we're multitasking we're eating
346:45 - breakfast drinking coffee
346:46 - and studying all at once now currently
346:49 - we have
346:50 - one thread that is in charge of these
346:52 - three separate functions
346:54 - what we could do is that we can create
346:56 - three additional threads
346:57 - each thread will be in charge of each
347:00 - task and then we'll have our main thread
347:02 - running in the background that will
347:03 - complete the rest of the program
347:05 - so this is how to create an additional
347:06 - thread let's say that
347:08 - x equals threading
347:12 - dot thread we need to pass in a target
347:15 - target equals and then the name of the
347:20 - function so let's say
347:21 - thread x will be in charge of eating
347:23 - breakfast
347:24 - and then you can pass in arguments too
347:26 - if your function has parameters by
347:28 - typing args
347:29 - and then you pass in a tuple so let's
347:31 - say you have one argument to pass in
347:33 - you'll type your argument followed by
347:35 - a comma but we don't have any arguments
347:37 - in this example but
347:38 - you'll need to be sure to enter them in
347:40 - if you do have any
347:42 - okay then to begin this thread you type
347:44 - the name of the thread
347:45 - in this case x dot start so
347:48 - we now have an additional thread and
347:50 - this thread is in charge of eating
347:52 - breakfast
347:53 - now let's create another thread to drink
347:55 - coffee
347:57 - and we'll call this y
348:01 - and the target will be drink coffee
348:05 - and lastly we have a thread in charge of
348:08 - studying
348:10 - and this will be z
348:14 - and the target is our study function
348:17 - okay now let's see how long it takes for
348:19 - us to complete our program
348:21 - oh and be sure to comment out these
348:23 - function calls within the main thread
348:25 - because we don't want the main thread in
348:26 - charge of those anymore
348:27 - okay now we can run the program so we
348:30 - have four threads running this time
348:32 - you eat breakfast you drink coffee you
348:34 - finish studying
348:35 - so this program took approximately five
348:38 - seconds to finish
348:39 - and the reason that this program took
348:41 - five seconds instead of 12
348:43 - is because before our main thread was in
348:45 - charge of running
348:46 - these tasks sequentially in order but
348:49 - now since we have a thread
348:50 - dedicated to each task we can run them
348:53 - all
348:54 - concurrently instead of sequentially so
348:56 - that this program
348:57 - now took about five seconds to complete
348:59 - and you may have noticed too
349:01 - that the activecount function as well as
349:03 - the enumerate function
349:04 - were called before threads 1 2 and 3
349:07 - finished their respective tasks
349:09 - that's because the main thread is not
349:11 - going to wait around for
349:12 - these three threads to complete it has
349:14 - its own set of instructions to do
349:16 - so it is no longer in charge of these
349:19 - three functions
349:21 - the program is going to handle those
349:23 - three functions to our three threads
349:25 - and our main thread is going to continue
349:27 - its own set of instructions
349:28 - its job is to print the active count as
349:31 - well as
349:32 - call the enumerate function which it did
349:35 - and it finished its tasks
349:36 - before threads one two and three now one
349:39 - trick that you can do too
349:40 - is that you can use the time modules
349:43 - performance
349:43 - counter function and this function will
349:46 - return
349:47 - how long it takes our calling thread as
349:49 - in our main thread
349:50 - to finish its set of instructions so our
349:53 - main thread is not in charge of
349:55 - executing
349:56 - these three functions our main thread is
349:59 - in charge of creating
350:00 - three additional threads and then
350:02 - calling the activecount function
350:04 - and the enumerate function as well as
350:06 - the performance counter function
350:09 - so our main thread will take
350:11 - approximately
350:13 - 0.075 seconds to complete
350:15 - and our three threads are still running
350:17 - in the background our main threads job
350:19 - its order of instructions is to create
350:22 - three additional threads and then
350:24 - immediately
350:25 - print whatever is returned via the
350:28 - activecount function
350:29 - enumerate and then your performance
350:31 - counter so
350:33 - our main thread says that it finished
350:35 - its tasks in about
350:36 - .07 seconds but threads one
350:40 - through three were still trying to catch
350:42 - up that's why the main thread
350:44 - finished before are three additional
350:45 - threads and once
350:47 - all active threads have completed their
350:49 - tasks
350:50 - then your program will finish and exit
350:52 - there's also this concept called
350:54 - thread synchronization we can have a
350:56 - calling thread in this case our main
350:58 - thread
350:59 - wait around for another thread to finish
351:01 - before it can move on
351:02 - with its own instruction set so let's
351:05 - say we would like
351:06 - our main thread to wait around for
351:08 - thread 1 also known as
351:10 - x so we're going to use the join
351:13 - function
351:14 - of thread x and now our main thread
351:17 - has to wait around for thread x also
351:19 - known as
351:20 - thread 1 to finish before it can move on
351:22 - with its instruction set
351:24 - so let's do the same with y and
351:27 - z so now our main thread before it can
351:30 - move on with the rest of the program has
351:32 - to wait for all of these threads
351:33 - to synchronize and join and then and
351:36 - only then
351:37 - can it move on with the rest of its own
351:39 - instruction set
351:40 - so this time our program is going to
351:42 - look a little something like this
351:44 - you eat breakfast you drink coffee you
351:46 - finish studying
351:47 - so by the time we reach our active count
351:50 - these threads
351:50 - are already joined and synchronized
351:52 - they're no longer active
351:54 - when we enumerate over our active
351:56 - threads we only have
351:57 - our main thread and our main thread
351:59 - completed in
352:00 - about 5.1 seconds this time because it
352:03 - did a lot of waiting around
352:04 - it was waiting for threads x y and z to
352:08 - join and finish in conclusion a thread
352:10 - is
352:11 - a flow of execution like a separate
352:14 - order of instructions that a program can
352:16 - follow
352:16 - and when we run a program we always have
352:19 - at least one
352:20 - thread running initially and that is
352:22 - referred to as the main thread
352:24 - however if you have multiple threads
352:26 - using the concept of multi-threading
352:28 - we can have multiple threads running
352:30 - concurrently but not truly in parallel
352:33 - which is what we'll cover
352:34 - during the video on multi-processing
352:36 - this is due
352:37 - to a feature known as the gil
352:40 - the global interpreter lock which allows
352:43 - only
352:43 - one thread to hold control of the python
352:46 - interpreter
352:47 - at any one time and tasks can be either
352:50 - cpu bound or io bound a cpu bound task
352:53 - is a program or task
352:55 - that spends most of its time waiting for
352:58 - internal events
352:59 - such as a task that is cpu intensive
353:02 - and o bound tasks spend most of their
353:05 - time waiting for
353:06 - external events such as waiting around
353:09 - for user input
353:10 - or web scraping with i o bound tasks
353:13 - it's better to use multi-threading
353:15 - with cpu bound tasks it's better to use
353:18 - multi-processing
353:19 - well everybody that is a quick overview
353:21 - of multi-threading i will post all of
353:23 - this code to the comment section down
353:25 - below
353:26 - and well yeah that's how to achieve
353:28 - multi-threading
353:29 - using python hey what's going on
353:32 - everybody
353:33 - it's you bro hope you're doing well and
353:35 - in this video i'm going to explain demon
353:36 - threads in python so
353:38 - sit back relax and enjoy the show
353:43 - okay so demon threads also pronounced as
353:46 - daemon threads a demon thread is a
353:49 - thread that runs in the background and
353:51 - they are normally not important for your
353:52 - program in order to run
353:54 - your program will not wait for demon
353:56 - threads to complete before
353:57 - exiting whereas non-demon threads they
354:00 - cannot normally be killed
354:02 - they will stay alive until their task is
354:04 - complete so
354:05 - a few common uses of demon threads would
354:08 - be
354:08 - background tasks garbage collection
354:11 - waiting for input
354:12 - or other long-running processes so
354:15 - here's an example of why demon threads
354:17 - would be useful
354:18 - let's say that we'll have two threads
354:20 - our main thread will be in charge of
354:22 - waiting around for some user input we'll
354:24 - ask
354:24 - do you wish to exit and in the
354:26 - background we'll have a timer going that
354:28 - will display
354:29 - how long somebody is logged in so let's
354:32 - create
354:32 - a function named timer
354:36 - and what we'll do is just display how
354:38 - long somebody's logged in
354:40 - so let's say we have a count variable
354:43 - while true we'll use
354:46 - the sleep function of the time module to
354:49 - sleep for approximately one second
354:51 - then we'll increment our count variable
354:53 - by one and we'll print a message
354:56 - so let's say logged in
354:59 - for
355:03 - count
355:06 - seconds and let's create a thread that
355:09 - will be in charge of this timer and run
355:11 - it in the background so let's say
355:13 - x equals threading
355:16 - dot thread the target will be our
355:19 - function
355:19 - of timer and we need to start this
355:22 - thread
355:23 - x dot start so our thread
355:26 - x will be in charge of our timer and run
355:29 - it concurrently
355:30 - while we're waiting for some user input
355:32 - our main thread will be in charge of
355:34 - waiting for this user input do you wish
355:36 - to exit now here's the issue
355:38 - of us using a non-demon thread for a
355:40 - background task such as a countdown
355:42 - timer
355:43 - so our main thread is in charge of
355:45 - waiting around for some user input
355:46 - and thread x our additional thread is in
355:49 - charge of
355:50 - running this countdown timer so if i
355:52 - wish to exit this program i'm just going
355:54 - to type
355:55 - okay and hit enter well my background
355:57 - timer is still going but my main thread
356:00 - is complete so i would like to exit this
356:02 - program but
356:03 - my program will not exit as long as
356:06 - there are non-demon threads that are
356:08 - still alive
356:09 - we cannot normally close this program
356:11 - unless we do like a brute force
356:13 - you know close and exit of the program
356:15 - so we can turn
356:17 - this thread of x into a demon thread
356:20 - so that when we wish to exit the program
356:22 - when there are no more
356:24 - non-demon threads alive and to change a
356:26 - thread to a demon thread it's actually
356:28 - fairly easy when you create your thread
356:30 - you can set
356:31 - this flag of demon equal to true and
356:33 - that's it
356:34 - so when all non-demon threads have
356:37 - finished their tasks
356:38 - your program will complete and exit but
356:41 - if there are demon tasks running in the
356:43 - background
356:43 - they will be killed automatically so
356:45 - let's try this program again
356:47 - so do you wish to exit my program is
356:49 - going to continue running
356:50 - my demon thread is in charge of the
356:52 - timer and it's going to continue running
356:53 - until
356:54 - all non-daemon threads have completed
356:57 - their tasks
356:58 - so once i type ok my program will
357:02 - finish running and my countdown timer
357:04 - will stop because
357:05 - all demons are killed when your program
357:07 - is finished running there's also two
357:09 - additional methods that you might be
357:11 - interested in
357:11 - you can use the set daemon method
357:14 - of a thread and you can set it to false
357:16 - or true if you would like to change
357:18 - a thread to a non-demon or a demon
357:21 - however if your thread is currently
357:23 - running well you cannot actually change
357:25 - it from
357:26 - a non-demon thread to a demon thread
357:28 - while it's currently running
357:30 - so you would have to do that before you
357:31 - actually use the start function
357:34 - and you can also check to see if a
357:36 - thread is a demon or not
357:37 - by using the is demon method this will
357:40 - return
357:41 - true or false so everybody in conclusion
357:44 - a demon thread is a thread that runs in
357:46 - the background
357:47 - and they're not important for your
357:49 - program in order to continue running
357:51 - your program will not wait for demon
357:53 - threads to complete before exiting the
357:55 - program
357:56 - whereas non-demon threads cannot
357:58 - normally be killed
357:59 - they will stay alive until their task is
358:01 - complete and demon threads are commonly
358:04 - used for
358:04 - background tasks garbage collection
358:07 - waiting around for input
358:08 - or other long running processes so if
358:11 - you would like a copy of this code i
358:13 - will post all of this to the comment
358:14 - section down below
358:15 - but yeah those are demon threads in
358:18 - python
358:19 - yo what's going on everybody it's bro
358:22 - hope you're doing well
358:23 - and in this video i'm going to explain
358:24 - multi-processing in python so
358:26 - sit back relax and enjoy the show
358:31 - what's up let's talk about
358:33 - multi-processing multi-processing
358:35 - is the act of running tasks in parallel
358:38 - on a different cpu cores it's different
358:41 - from multi-threading
358:42 - although it sounds similar because with
358:44 - multi-threading
358:45 - we're limited to running one thread at a
358:48 - time
358:48 - because of the gil that lock which is
358:51 - used for threading we can run threads
358:53 - concurrently
358:54 - but not in parallel however with
358:57 - multi-processing
358:58 - we can create processes and we can run
359:01 - each process
359:02 - in parallel on a different cpu course so
359:05 - with multi-processing
359:06 - it's better for tasks that are cpu bound
359:09 - where you need heavy cpu usage whereas
359:13 - multi-threading that is better for i o
359:15 - bound tasks where you do a lot of
359:17 - waiting around
359:18 - so before we begin i recommend these two
359:20 - imports
359:21 - multi-processing and time let's begin
359:24 - quick note if you're running the windows
359:26 - operating system you'll probably need to
359:28 - add
359:28 - this line if name is equal to
359:31 - main so when we run a program we have a
359:34 - main process that is running and if we
359:37 - create a child process
359:38 - from that process it's going to copy the
359:41 - module that we're currently working with
359:43 - and that child process will create its
359:46 - own children processes and it's going to
359:48 - be a problem
359:49 - so we're going to add this line if name
359:51 - is equal to main
359:52 - so when we create a child process it
359:54 - will copy our module but it's not going
359:56 - to execute it
359:58 - so let's create a main function and a
360:00 - majority of our code is going to be
360:02 - within our main function
360:04 - if you're running a different operating
360:05 - system you probably don't have to do
360:07 - this but if you're running windows
360:08 - you probably will now with
360:10 - multi-processing multi-processing is
360:12 - better for tasks or functions
360:14 - that are cpu bound where they require
360:17 - heavy cpu usage
360:19 - let's say that we have a function named
360:21 - counter
360:22 - and we'll pass in a number to count up
360:24 - to but the number we're going to pass in
360:26 - is a ridiculously large number like a
360:28 - billion so let's create a function that
360:30 - will count
360:31 - from zero so count equals zero and
360:35 - while count is less than
360:38 - our number that we pass in we will
360:40 - increment our counter
360:42 - by one so that is the function that
360:45 - we'll call with
360:46 - our processes that we create now within
360:48 - our main function
360:49 - we'll create a process and to do that
360:52 - you'll need the multi-processing module
360:54 - so import process and cpu account and
360:57 - we'll save this for a little bit later
360:59 - to create a process let's say we have
361:01 - process a
361:02 - a equals process this step is very
361:06 - similar to creating a thread
361:08 - we have a target our target will be our
361:10 - function of counter
361:13 - and if we have arguments we will pass
361:16 - those in
361:16 - so remember with our arguments we have
361:18 - to pass in a tuple
361:20 - since we only have one argument to pass
361:23 - in
361:23 - to differentiate this from an expression
361:25 - we have to add a comma at the end
361:27 - so our number let's say is 1 billion
361:31 - so that's a million 10 million 100
361:35 - million
361:35 - 1 billion let me just verify that okay
361:38 - so that's 1 billion
361:39 - we're going to count from zero to a
361:42 - billion
361:42 - and in order to start this process a
361:46 - my process use the start function
361:50 - and then i will use some process
361:52 - synchronization by using the
361:54 - join function my main process is going
361:57 - to wait around
361:58 - for my child process of a to finish
362:01 - before continuing
362:03 - and let's print our performance counter
362:06 - so we'll print finished in
362:12 - let's say time dot performance counter
362:19 - seconds okay so let's see how long it'll
362:23 - take to count from zero to a billion
362:25 - using
362:26 - one process i fast forwarded this video
362:28 - but it took my program
362:30 - 56.7 seconds to count from zero to a
362:33 - billion
362:34 - but we can speed this up by using
362:35 - multi-processing let's create a second
362:38 - process named b
362:40 - and i'm going to divide the amount of
362:42 - work in half so
362:44 - each process will count to 500 million
362:47 - half of a billion so let's change a to b
362:52 - and i'm gonna group these start
362:53 - functions together
362:57 - just so it's easier to read and then b
362:59 - dot join just to synchronize everything
363:02 - okay and then let's change 1 billion to
363:06 - 500 million for each it's the same
363:09 - amount of work but divided among workers
363:12 - so that is 500 million let's see how
363:14 - well it runs this time
363:16 - so it took my program about 40.3 seconds
363:19 - to finish
363:20 - counting from zero to a billion but i
363:22 - divided that task among
363:24 - different processes each of my two
363:26 - processes counted from
363:27 - zero to 500 million this time so this
363:30 - time let's create
363:31 - four processes so we have a
363:35 - b c and d
363:39 - and we'll need to start them
363:44 - and i'm going to join them now this
363:48 - might not actually speed it up for you
363:50 - and i'll explain why later
363:52 - it depends on the amount of cpu cores
363:54 - that you have
363:55 - okay so oh let's change this to so 250
363:59 - million for each
364:02 - okay see you in a couple seconds
364:06 - okay welcome back so on my computer when
364:08 - i ran
364:09 - four processes and each was counting up
364:11 - to 250 million
364:14 - i could finish my program in 27.3
364:17 - seconds now for me if i created
364:20 - more processes than this it would
364:22 - probably take longer and here's why
364:24 - so you can print the cpu count of your
364:27 - computer
364:27 - using this function of cpu count so if i
364:31 - were to
364:31 - print whatever this function returns i
364:34 - can get the count
364:35 - of the number of additional processes
364:37 - that i can run
364:38 - for the time being i'm just going to
364:40 - comment out this start function because
364:42 - i just want to print whatever this value
364:44 - is so my cpu count on my computer
364:47 - is four so i can run four additional
364:51 - processes
364:52 - but let's attempt to run eight processes
364:55 - so i'm going to copy all these and let's
364:57 - say that we have
364:59 - e f g
365:02 - and h and we will start all of those two
365:06 - so give me a second just to start them
365:10 - so a b c d e
365:14 - f g
365:18 - h and then i'm going to join all of them
365:23 - e f g
365:28 - and h okay so
365:31 - let's run this now oh and change the
365:34 - arguments to i keep forgetting to do
365:35 - that
365:36 - so let's say 125 for each
365:40 - so 125 million times eight is
365:43 - one billion okay see you in a bit
365:47 - all right welcome back this time when i
365:49 - had eight processes working it actually
365:51 - took me
365:52 - longer than when i had four processes
365:54 - working when i had four processes
365:56 - working it took me about 27 seconds
365:58 - this time it took 30 seconds when i had
366:01 - eight processes working
366:02 - that's because i had more processes than
366:05 - my cpu count
366:06 - and that's partially because whenever
366:08 - you create a process
366:09 - there's significant overhead with
366:11 - beginning and
366:12 - destroying a process and if i can only
366:15 - run four
366:16 - processes on my computer at one time
366:18 - well then i'm creating additional
366:20 - processes
366:21 - to no extra benefit it's actually
366:23 - hindering the performance of the
366:24 - computer
366:25 - because i'm creating all of these
366:27 - additional processes when it really
366:28 - doesn't help me
366:30 - in conclusion multi-processing is the
366:32 - concept
366:33 - of running tasks in parallel on
366:35 - different cpu cores
366:37 - it's similar but different from
366:38 - multi-threading because with
366:40 - multi-threading
366:41 - we can run tasks concurrently but
366:43 - they're all taking turns because of the
366:45 - gil
366:46 - with multi-processing we can run all of
366:49 - these different tasks
366:50 - together in parallel multi-processing is
366:53 - better for
366:53 - cpu bound tasks where a task has
366:56 - heavy cpu usage and multi-threading
367:00 - is better for i o bound tasks tasks that
367:02 - involve a lot of waiting around
367:04 - so that's multi-processing if you would
367:06 - like a copy of all this code i will post
367:08 - all of this to the comment section down
367:10 - below
367:10 - but yeah that is how multi-processing
367:12 - works in python
367:15 - hey what's going on everybody two bro
367:17 - here hope you're doing well and in this
367:18 - video we're going to be creating our
367:19 - very first
367:20 - graphical user interface in python so
367:22 - sit back relax and enjoy the show
367:27 - welcome one and all today we'll be
367:28 - creating our very first
367:30 - graphical user interface in python also
367:32 - known as a
367:33 - gui for short we're going to be using
367:35 - the tk inter gui which is a module that
367:38 - is included with python
367:40 - our first step in order to use tk enter
367:42 - is to import this module so that we can
367:44 - begin using it
367:45 - our first line of code will be from tk
367:48 - enter
367:49 - import asterisk this will import
367:52 - everything related to the tk inter
367:54 - module
367:55 - and with this import we can now use all
367:57 - of the gui features that this module has
367:59 - to offer
368:00 - now there is one important distinction
368:02 - that we need to make we need to discuss
368:04 - the differences between
368:05 - windows and widgets here's a few quick
368:09 - definitions that i definitely did not
368:11 - copy from the internet
368:12 - widgets are gui elements such as buttons
368:15 - text boxes labels images you name it
368:18 - and windows they serve as a container
368:21 - to hold or contain these widgets for
368:24 - this topic we'll be creating and
368:26 - customizing our own window
368:28 - and in future topics we'll be exploring
368:30 - different widgets that are available to
368:32 - us
368:33 - so let's begin by creating a simple
368:35 - window and we should give our window a
368:37 - unique name
368:38 - such as window that's pretty creative
368:40 - and in order to instantiate this window
368:42 - we're going to follow
368:43 - this window name with equals tk make
368:46 - sure you get the capitalization right
368:48 - this is a
368:49 - uppercase t and a set of parentheses to
368:51 - serve as the constructor
368:53 - what this will do and i'm just going to
368:54 - add a comment is instantiate
368:57 - an instance of a window for us
369:02 - and when we compile and run this nothing
369:04 - appears to happen
369:05 - that's because we only instantiated our
369:07 - window and we're not actually displaying
369:09 - it
369:10 - in order to display our window we're
369:11 - going to follow this with
369:13 - the name of the window dot main loop
369:16 - and this will display our window and
369:19 - this is our first
369:20 - graphical user interface and we'll be
369:22 - adding widgets
369:23 - to this window so i'm going to add a
369:25 - comment that
369:27 - this will place window on
369:30 - computer screen and it will also listen
369:34 - for events but we'll get to that in
369:36 - future videos
369:37 - now what we'll be doing is customizing
369:39 - the appearance of this window
369:41 - let's begin by changing the size and we
369:43 - can do that with the geometry function
369:46 - so we're going to first begin by typing
369:48 - the name of our window which is window
369:51 - follow this by using the geometry
369:53 - function and we pass in a width and a
369:55 - height
369:56 - but make sure this is within quotes and
369:58 - set this to whatever width and height
369:59 - that you want
370:00 - so if i want 420 by 420 that would be
370:03 - 420
370:04 - x 420 and the size of our window
370:07 - is now the size that we set with the
370:09 - geometry function
370:11 - now take a look at the top left of this
370:13 - window we have
370:14 - this feather icon as well as a title of
370:17 - tk
370:18 - that's kind of lame so let's change that
370:21 - let's first
370:21 - change the window title and there is a
370:24 - function to do that
370:25 - so we type in the name of our window
370:28 - window
370:29 - dot title function and we can pass in a
370:33 - new title that we want to set
370:35 - and i will set the title to be maybe bro
370:38 - code first gui
370:42 - program that'll work and we now changed
370:46 - the title of this window and it says
370:48 - bro code first gui program
370:51 - the next thing that we can do although
370:53 - not necessary
370:54 - is that we can change the icon of our
370:57 - window bar at the top
370:58 - i would like to replace this feather
371:00 - icon with an image of my choosing
371:03 - here's my desktop don't mind all of the
371:05 - clutter and i would like to use this
371:07 - image of the logo for my channel and set
371:09 - this as the icon
371:10 - for my window so what i'm going to do is
371:13 - copy
371:15 - and then go to my project folder and
371:17 - then paste it
371:19 - click ok and i now have this image
371:22 - within my project folder
371:24 - but it's in a format that we cannot use
371:27 - currently we need to convert this to
371:28 - what's called a photo image
371:30 - that is a format that tk enter can use
371:34 - so we'll need to convert our image to a
371:36 - photo image
371:37 - so do that anywhere within the window
371:39 - between window equals tk and window.main
371:42 - loop
371:42 - right here is good i suppose we're going
371:44 - to create a photo image
371:46 - from this image and this is a png file
371:48 - but yours might be something different
371:50 - so let's give our photo image a unique
371:53 - name like maybe icon
371:54 - and in order to create a photo image
371:56 - we'll follow this with equals
371:58 - photo image and within the constructor
372:01 - of our photo image
372:02 - there is an option for file we can
372:05 - either list
372:05 - the file name or the file path if it's
372:08 - somewhere else on your computer
372:09 - since this image is within my same
372:12 - project folder i only have to list the
372:14 - file name
372:15 - and this is called logo.png
372:18 - and this is probably going to be named
372:19 - something else for you though
372:21 - so we now have this photo image called
372:24 - icon
372:24 - that we can use and i need to set the
372:27 - icon
372:28 - of my window to this icon and luckily
372:31 - there is a function to take care of that
372:33 - for us
372:33 - type in the name of the window which is
372:35 - window
372:36 - dot and we're going to use the icon
372:39 - photo
372:40 - function there are two arguments the
372:43 - first we're going to set to true
372:46 - and the second is the photo image that
372:48 - we want to use
372:49 - and this photo image is called icon so
372:51 - we're going to pass
372:53 - this photo image as an argument to this
372:55 - function
372:56 - of icon photo and now when we compile
372:58 - and run this
372:59 - the image that we wanted to use is now
373:02 - set for the top left icon of this window
373:05 - bar
373:05 - however it loses a lot of the quality
373:07 - since the dimensions are so small
373:09 - but you can still tell that it's my logo
373:11 - though so that's how to replace
373:13 - the icon of your window bar in the top
373:15 - left corner now let's change the
373:17 - background color
373:18 - of this window and one way in which we
373:20 - can do that is to use the config
373:22 - function you can use the config function
373:24 - anytime that you want to make any
373:26 - changes to this window
373:27 - so let's change the background color
373:29 - here and there is an option called
373:31 - background and we can set this equal to
373:34 - either
373:34 - a color name or a hexadecimal value
373:37 - let's begin with just some color names
373:39 - let's say that i want the background
373:41 - color to be black
373:42 - i'll just type in the word black here
373:44 - and this will change the background
373:46 - color of my window to black
373:48 - alternatively you can set a hex value as
373:51 - the color
373:52 - so if you were to look up or google hex
373:55 - color picker
373:56 - you can select whatever color you want
373:58 - let's say that i want
373:59 - a sky blue color like this well this is
374:03 - the hex value i'm going to copy this
374:05 - value
374:07 - and then paste it within the option for
374:09 - my background
374:10 - make sure you have this hashtag as well
374:12 - because that represents that this is a
374:14 - hex value so now the background color is
374:17 - that sky blue color that i picked
374:20 - well everybody that's the basics of
374:21 - creating a window in python and in
374:24 - future videos we're going to be
374:25 - exploring
374:26 - different widgets that we can add to
374:28 - this window that have some functionality
374:30 - so if you would like a copy of all this
374:32 - code i'll post all of this in the
374:33 - comments down below
374:34 - but yeah that's how to create your very
374:36 - first gui in python
374:38 - hey what's going on everybody it's your
374:40 - bro here hope you're doing well and in
374:42 - this video i'm going to teach you guys
374:43 - how we can create
374:44 - labels in python so sit back relax and
374:47 - enjoy the show
374:49 - what is a label well i'm glad you asked
374:52 - that question
374:52 - it's an area widget that holds text and
374:55 - or
374:56 - an image within a window so to begin
374:58 - we'll need to create a window to act as
375:00 - a container
375:02 - to hold this label we can create a
375:04 - window with
375:05 - window equals tk followed by
375:07 - window.mainloop
375:08 - and this will give us a window in which
375:10 - we can add a label to
375:12 - now let's give our label a unique name
375:15 - such as label
375:16 - and in order to instantiate a label
375:18 - we'll follow this label name
375:20 - with equals label with a capital l and a
375:23 - set of parentheses
375:24 - the parentheses are acting as the
375:26 - constructor for this widget
375:28 - our label and we can pass in arguments
375:30 - into
375:31 - these parentheses the first argument
375:33 - that we're going to pass
375:34 - in is a master the container for this
375:37 - label
375:38 - we're going to pass in the name of our
375:40 - window because our window is acting as
375:42 - the container
375:43 - with widgets in python we can
375:45 - de-eliminate the arguments that we're
375:47 - passing in
375:48 - with a comma and there are options
375:50 - available to us
375:52 - options are keyword arguments that we
375:54 - can pass in to the constructor for this
375:56 - widget
375:57 - one option available to us is text and
376:00 - we can set the text of this label equal
376:02 - to
376:02 - a string that we set so let's say that
376:05 - we want this label to say
376:07 - hello world well we're going to pass in
376:09 - this option
376:10 - text and it's a keyword argument
376:14 - so if we were to do this we're going to
376:16 - set the text
376:17 - of the label but this label currently
376:20 - doesn't appear within our window
376:21 - what gives bro i thought you knew how to
376:23 - code hold up wait a minute there's one
376:25 - more thing that we need to do
376:27 - so we're going to actually add this
376:29 - label
376:30 - to the window now we set the master
376:33 - of the label to be our window but now we
376:35 - actually have to add it as step two
376:38 - one way which we can do that is to use a
376:40 - pack
376:41 - function of our label so follow label
376:44 - equals label and pass in all of your
376:46 - arguments
376:46 - and then follow this with the name of
376:48 - the label dot pack
376:51 - so with the pack option by default this
376:53 - will place our widget in the top
376:55 - center of our window another way in
376:58 - which we can add a label
377:00 - to a container or window is to use the
377:02 - place function
377:03 - and we can set some coordinates of where
377:05 - we want this label or other widget to
377:08 - appear
377:08 - within the window if we want this to
377:10 - appear in the top left corner
377:12 - we can set x to equal zero and y t
377:15 - equals zero and these are options
377:17 - available to us too that we can pass
377:18 - in so this place function will place
377:22 - our label at some position or
377:25 - some set of coordinates within the
377:27 - window and with
377:28 - x equals 0 and y equals 0 that will
377:31 - place our widget in the top left corner
377:33 - of the window
377:34 - and if i were to change these to let's
377:36 - say x equals 100
377:38 - and y equals 100 well this is going to
377:40 - be placed
377:42 - down by 100 pixels and to the right by
377:45 - 100 pixels
377:46 - so you can use pack or place there's a
377:48 - few others
377:49 - like grid but they're a little more
377:51 - complex so we'll get to that in a future
377:53 - video
377:53 - for the time being i'm going to use the
377:55 - pack function of the label
377:57 - and turn this place function into a
377:59 - comment
378:01 - dot pack all right now
378:04 - how can we customize this label we can
378:07 - pass in different options
378:08 - when we instantiate this label let's
378:10 - change the font and that's another
378:12 - option
378:13 - we can change the font with font equals
378:16 - and then we can pass in a font let's
378:18 - begin with a
378:19 - font family i will say maybe ariel
378:22 - a size perhaps 40 and then a style if
378:26 - you so choose
378:28 - like bold there's also italic and
378:30 - underline
378:31 - uh but this will work just fine then so
378:33 - this will change the font
378:35 - of the text of our label and it says
378:38 - hello world still
378:39 - now let's change the foreground color
378:43 - so that is another option the foreground
378:46 - is the font color
378:47 - and the option is fg for foreground it's
378:50 - short for foreground
378:51 - foreground equals we can state a color
378:54 - name
378:55 - such as green and our text
378:58 - should now be green you can select
379:00 - something more specific by
379:02 - passing in a hex value so a custom color
379:05 - that i like
379:06 - is hashtag zero zero ff00
379:10 - this is bright green you can always look
379:12 - up what different hex values are
379:14 - and we can also change the background
379:16 - color too
379:17 - that is bg short for background color
379:20 - and we can pass in a color name
379:22 - or a hex value i'm just going to set
379:24 - this to black just to demonstrate that
379:26 - we can pass in both
379:27 - either hex values or color names and
379:30 - what we have
379:31 - is green text on a black background
379:34 - and this is the limits of our label
379:37 - within the window
379:38 - because when we expand this window the
379:41 - label is still going to stay the same
379:42 - size
379:43 - if we were to change the text within the
379:46 - label
379:46 - our label is only going to take up the
379:49 - room that it needs
379:50 - and you can see that our label is now
379:52 - smaller now we have all of these
379:54 - arguments within our constructor and
379:55 - it's getting a little bit difficult to
379:57 - actually read
379:58 - so i'm going to separate each of these
380:00 - arguments line by line just so that this
380:02 - is more organized
380:03 - but it'll work just the same as it did
380:05 - before now how do we add a
380:07 - border around our label one we can set
380:10 - the border style
380:11 - with the relief option and one border
380:14 - that i like
380:14 - is raised but right now the border width
380:18 - is one so it's a little difficult for us
380:21 - to actually see the border
380:22 - let's increase the border width with the
380:24 - option bd
380:26 - and i'll set this equal to maybe 10.
380:29 - so this border is now more visible
380:32 - another relief
380:33 - which is the border style is sunken and
380:36 - this will give our label a
380:38 - sunken appearance but i think i'll
380:40 - change this back to raised
380:42 - we can also add some padding around the
380:45 - text
380:45 - between the text and the border we can
380:47 - pad x and pad y
380:49 - pad x will add some padding some space
380:52 - between
380:53 - the x-axis of our text between the
380:55 - border so let's set this to maybe 20
380:57 - and we now have 20 pixels worth of space
381:00 - between
381:01 - the text and the border let's also pad y
381:06 - this will add some space above and below
381:10 - our text between the text and the border
381:13 - now how do we add an image to a label we
381:16 - first need to create what's called
381:18 - a photo image and we will create this
381:21 - within
381:21 - the lines of window equals tk and
381:24 - window.main loop
381:25 - and let's give this photo image a unique
381:27 - name like
381:28 - photo and in order to create a photo
381:31 - image we're going to follow this with
381:33 - photo equals photo image
381:36 - and within the constructor of our photo
381:38 - image there's an option called
381:40 - file and we can list a file path or a
381:43 - file name
381:44 - right now on my desktop there is a image
381:46 - that i want to use and i need to convert
381:48 - this to a photo image
381:50 - here's my desktop and this is an image
381:52 - that i want to use to add to my label
381:54 - i need to get the file path and i can
381:56 - get that by going to properties
381:58 - then underneath location i can copy this
382:01 - location address
382:03 - and paste it within the quotes for file
382:07 - and then i need to add the image name
382:09 - and this is person.png
382:12 - and with these backslashes these need to
382:14 - be double backslashes because
382:16 - that is the escape character for a
382:18 - backslash
382:20 - but what would be a better option is to
382:23 - add
382:23 - this image to my project folder that
382:25 - contains the python file that i'm
382:27 - working with
382:28 - so in place of listing the entire file
382:31 - path
382:31 - i'm going to copy the image that i want
382:33 - to use go to my project folder
382:36 - and then paste it and i no longer need
382:40 - this entire file path i can just list
382:42 - the image name that i have
382:44 - and now what we need to do is add this
382:46 - photo to the label and there's an option
382:48 - to do so
382:49 - that is the image option and we'll place
382:52 - this within the constructor for the
382:53 - label
382:54 - we're going to set image equal to the
382:56 - photo image that we have
382:58 - and our photo image is called photo this
383:00 - will add our photo image
383:02 - to our label or other widget depending
383:04 - on what we're working with
383:06 - so we have our image but it replaced all
383:09 - of the text
383:10 - that we had for this label how do we add
383:12 - both
383:13 - text and an image to a window well we
383:16 - can follow this
383:16 - with the compound option we can set a
383:19 - direction of where
383:21 - we want this image to be placed relative
383:23 - to the text that we have
383:25 - so i'm going to set compound equal to
383:28 - bottom
383:28 - so that the image appears on the bottom
383:31 - or underneath
383:31 - our text so we can both have text and an
383:35 - image
383:35 - or if i want this to be in a different
383:37 - location i could set this to maybe top
383:39 - left or right if i were to set this to
383:41 - top we have
383:42 - our image on top of our text and one
383:46 - thing to know about labels and many
383:48 - other widgets in python is that
383:50 - the size of the widget will actually
383:52 - increase to accommodate
383:54 - the size of all the components that's
383:56 - contained within if i were to give the
383:58 - text a longer string of characters such
384:01 - as
384:02 - bro do you even code then
384:05 - the width of our label is actually going
384:07 - to expand
384:08 - to accommodate the size of the longer
384:11 - string of text that we have
384:13 - so that's the basics of labels everyone
384:15 - if you would like a copy of all this
384:17 - code i will post all of this in the
384:18 - comments down below
384:20 - but yeah that's the basics of labels in
384:22 - python
384:24 - hey what's going on everybody it's your
384:26 - bro here hope you're doing well
384:27 - and in this video i'm going to teach you
384:28 - guys how we can create buttons in python
384:31 - so sit back relax and enjoy the show
384:35 - buttons you click them and then they do
384:38 - stuff that's pretty much it
384:39 - so this is how to create a button in
384:41 - python we'll need a window
384:43 - window equals tk followed by window.main
384:46 - loop
384:46 - let's call our button just button and in
384:49 - order to create this we'll follow this
384:51 - with
384:51 - equals button and within the constructor
384:55 - for this button we're going to list
384:56 - what we want to add this button to what
384:59 - is the master
385:00 - the master is the window and in order to
385:03 - display this button
385:04 - we're going to follow this with button
385:07 - dot
385:07 - pack and we should have a small
385:11 - rectangular button within our window
385:13 - but it doesn't display any text nor does
385:16 - it do anything
385:17 - so let's add some text and there is an
385:19 - option to do that
385:20 - within the constructor we're going to
385:22 - list the option for text
385:23 - and set this to whatever text you want
385:25 - to display let's
385:26 - say click me and then when we run
385:30 - this our button now says the text that
385:32 - we set
385:33 - and it says click me however it
385:35 - currently doesn't do anything though
385:37 - we need to set a command that is another
385:39 - option
385:40 - command equals and we list a function
385:43 - name this is what's known as a callback
385:46 - so let's create a function
385:47 - called click and then outside of the
385:50 - window let's define what our click
385:51 - function does def click
385:55 - and let's print a message you
385:58 - clicked the button
386:02 - now with the command we're going to list
386:05 - the
386:05 - function name without the parentheses so
386:08 - make sure you're writing it as
386:10 - this and not that this is what's known
386:12 - as a callback
386:14 - so when we click on this button it's
386:16 - going to perform our callback
386:19 - and perform whatever is within our
386:21 - function
386:22 - click just like that let's customize the
386:25 - appearance of this button i'm going to
386:27 - change the font
386:28 - that is another option font equals
386:31 - and let's pick a professional font such
386:34 - as comic
386:35 - sans it's very professional and i'll set
386:38 - a size of 30.
386:41 - and now you can actually read what's on
386:43 - this button it's large enough
386:46 - let's set the foreground color that is
386:48 - the font color fg
386:49 - you can place a color name or a hex
386:52 - value here
386:53 - i'll pick green that is 0 0 ff00
386:57 - and our text should now be green which
387:00 - it is
387:01 - let's also change the background color
387:04 - that is bg
387:05 - i will pick the color name of black and
387:08 - now we have
387:09 - green text on a black background notice
387:12 - that when i click on this button
387:14 - or hold my mouse button down the color
387:16 - scheme has changed that's because
387:18 - there is a different active foreground
387:21 - and active background
387:22 - and we can change those too so that this
387:24 - won't flash every time you click on the
387:26 - button
387:27 - so let's change the active foreground
387:29 - and active background
387:30 - those are other options active
387:33 - foreground
387:34 - and i'll set this to the same color as
387:36 - my foreground
387:38 - which is green so the text color is
387:41 - going to stay the same
387:42 - and i'll also change the active
387:44 - background
387:47 - and i will also set this to black to
387:49 - match my
387:50 - background and then this should no
387:53 - longer flash
387:54 - when we click on our button
387:57 - if you need to disable somebody from
387:59 - clicking on this button
388:00 - there is an option to do so and that
388:02 - option is the state
388:04 - option and normally this is active but
388:07 - you can set this to
388:08 - disabled and we can no longer click on
388:11 - this button
388:12 - and you can see that the color scheme
388:14 - has changed too it's all grayed out and
388:16 - whatnot
388:17 - so i'm going to replace this back with
388:19 - active because we still have a few more
388:21 - things to do
388:22 - now how do we add an image to a button
388:24 - there is an
388:25 - image option and we set this equal to a
388:28 - photo image
388:28 - but first we need to create a photo
388:30 - image i have this photo of
388:32 - a like button a thumbs up that i want to
388:34 - use i need to create a photo image from
388:37 - this image file
388:38 - so within the window let's call this
388:40 - photo image just
388:42 - photo photo equals
388:46 - photo image then i'm going to list the
388:49 - file path or the file name
388:51 - since this image is within my same
388:53 - project folder
388:54 - i only have to list the file name and
388:57 - this is called
388:58 - like.png but if you use your own image
389:00 - it's probably going to be named
389:01 - something else
389:02 - then i need to set the image equal to my
389:05 - photo image which i named
389:07 - photo but the photo replaces the text on
389:11 - this button but it still works the same
389:14 - so we would like to display some text as
389:16 - well as our image
389:17 - we need to use the compound option
389:21 - and we list a direction we can list
389:24 - top bottom left right we want this image
389:27 - to be
389:28 - on the perhaps bottom so let's list the
389:31 - bottom
389:32 - and now when we run this we have our
389:34 - text as well as our image
389:36 - and if we changed compound to a
389:37 - different direction like
389:39 - top then the image is going to be
389:41 - displayed
389:42 - on the top relative to the text
389:45 - what if we wanted to count the amount of
389:47 - times that we clicked this button
389:49 - we could create a variable called count
389:52 - and we'll set this equal to
389:53 - zero but in order for us to access this
389:56 - count variable
389:58 - within the function of click we're going
390:01 - to list
390:02 - count as global so that this is a global
390:06 - variable
390:06 - every time we click this button let's
390:09 - increment our variable count
390:10 - by one by saying count plus equals one
390:14 - and then we will print whatever the
390:16 - value of count is
390:18 - so within a print statement we'll just
390:20 - say count
390:21 - now when we click on this button we have
390:23 - access to our count
390:24 - variable that's outside of this function
390:27 - and every time we click on this button
390:28 - it's going to increase our count
390:31 - variable by
390:32 - one well everybody that's the basics of
390:34 - creating
390:35 - buttons in python if you want a copy of
390:37 - all this code i'll post all of this in
390:39 - the comments down below
390:40 - but yeah that's the basics of buttons in
390:43 - python
390:44 - hey what's going on everybody it's your
390:46 - bro here hope you're doing well and in
390:48 - this video i'm going to teach you guys
390:49 - how we can create a simple entry box in
390:51 - python
390:52 - so sit back relax and enjoy the show
390:56 - if you find this video helpful please
390:58 - remember to like
390:59 - comment and subscribe your support will
391:02 - help keep this channel running
391:04 - alright my fellow bros in this video
391:06 - we're going to be discussing the entry
391:07 - widget
391:08 - this is a text box that accepts a single
391:10 - line of user input
391:12 - as always we'll need a window window
391:14 - equals tk
391:15 - followed by window.main loop and let's
391:17 - give our entry box a unique name let's
391:19 - call
391:20 - this entry for short and then to create
391:22 - this entry widget we're going to follow
391:23 - this with equals
391:25 - entry and within the constructor we have
391:28 - to state what we're adding this to
391:29 - we're going to add this to our window
391:32 - and we should finish this by packing it
391:34 - or placing it
391:36 - entry dot pack and we should have an
391:39 - entry box within
391:40 - our window however the text is somewhat
391:43 - small so let's change that
391:45 - we can set this as an option within the
391:47 - constructor of our entry box
391:50 - so let's set the font font equals and
391:53 - pick whatever font you want
391:54 - i'm going to pick maybe ariel and then a
391:57 - size
391:58 - it'd be 50. and this should be a little
392:00 - bit larger
392:02 - and we can type in some
392:06 - text like this cool right
392:10 - now we should add a submit button
392:13 - because right now this currently doesn't
392:14 - do anything if we type some text in
392:16 - so let's create a button i'm going to
392:18 - create this button maybe after
392:20 - the entry box and let's say that this is
392:23 - a submit button so let's call this
392:25 - submit button equals button
392:28 - what are we adding this to writing the
392:30 - square window
392:32 - and we'll set some text text equals
392:35 - submit
392:36 - we'll also need a command for this
392:37 - button
392:39 - command equals and we'll create a
392:42 - function called submit
392:43 - and we want to pack the submit button to
392:46 - add it to the window
392:47 - submit button.pack
392:50 - all right now let's put our entry box on
392:53 - the left hand side and our submit button
392:55 - on the right hand side
392:56 - when you pack these widgets you can set
392:58 - these on a certain side
393:00 - side equals left and our submit button
393:04 - we want this on the right not necessary
393:06 - but i think it looks better
393:08 - and we also need to define our submit
393:10 - function outside of the window
393:12 - let's define what this does def submit
393:16 - what's this going to do we need to get
393:19 - the current value that's within our
393:21 - entry box
393:22 - one way in which we can do that is use
393:24 - the entry boxes get
393:26 - function this will return a string and
393:29 - we can do something with that string
393:30 - such as store this within a variable so
393:33 - let's create a variable called maybe
393:35 - username
393:35 - let's pretend we're having a user submit
393:38 - their username to login to something i
393:40 - suppose
393:41 - so we'll get the current value of the
393:43 - entry box
393:44 - store that within a variable and we'll
393:46 - call this username
393:47 - and then we will maybe print this for
393:49 - fun print
393:52 - hello plus user
393:55 - name and let's try this
393:58 - so here's our entry box here and our
394:00 - submit button i'm just going to make up
394:02 - something
394:03 - click submit and it displays our message
394:06 - hello ergo gerger gerger
394:09 - i didn't say that this video was going
394:10 - to be professional let's add a few other
394:12 - buttons
394:13 - let's say we want a delete button as
394:15 - well as a backspace button
394:18 - so let's copy what we have for our
394:20 - submit button and create a delete button
394:22 - and then a backspace button the delete
394:24 - button is a little bit easier to code
394:26 - so let's rename our submit button as
394:28 - delete button
394:31 - make sure to change the name to when you
394:33 - pack this and the text
394:34 - we will say delete and we'll create a
394:38 - function called
394:38 - delete and let's define what delete does
394:42 - so after our submit function let's
394:44 - define
394:46 - our delete function and we need to
394:50 - delete all of the text within our entry
394:52 - box
394:53 - one way in which we can do that is to
394:55 - type in the name of our entry box
394:57 - dot delete function
395:00 - and this takes two positional arguments
395:03 - which portion of our entry box do we
395:06 - want to delete
395:07 - so we want the very first character that
395:09 - is index
395:10 - 0 followed by the last character and we
395:13 - can say
395:13 - end so this will delete all of the
395:16 - characters
395:16 - within our entry box and let's try it so
395:19 - i'm just going to type in my name
395:21 - bro i'm going to delete this and all of
395:24 - the text is now gone
395:27 - just like that let's create a backspace
395:29 - button we'll copy what we have for our
395:31 - delete button and change
395:32 - the word delete to backspace
395:37 - make sure you change that when you pack
395:38 - this as well and for the text we'll set
395:40 - this to
395:41 - backspace and we'll create a function
395:44 - called backspace
395:46 - and let's define what backspace does so
395:49 - after
395:49 - our delete function let's define back
395:52 - space and this is going to do something
395:55 - very similar to our delete function
395:58 - except we're going to change the first
396:02 - positional argument
396:03 - we need to place the second to last
396:06 - character
396:06 - within this positional argument one way
396:09 - in which we can do that
396:10 - is to first get the entire length of all
396:13 - of the characters within our entry box
396:16 - so let's begin by typing entry dot
396:19 - get and we need to determine the length
396:21 - of this
396:22 - and we can surround this by placing this
396:25 - within the length function so this will
396:28 - return
396:29 - the current length of all of the
396:31 - characters within our entry box
396:33 - and then we're going to add -1 so that
396:36 - this
396:36 - first positional argument is the second
396:38 - to last character
396:40 - and the second positional argument is
396:42 - the end the last character
396:44 - and then when we run this let's type in
396:47 - our name i'm just going to type in draw
396:49 - code this time i'm going to click
396:50 - backspace and then it's only going to
396:52 - delete the last
396:53 - character and then if you were to click
396:55 - delete it deletes everything
396:58 - broy and then if you click submit it's
397:01 - going to submit your name
397:03 - all right let's customize the appearance
397:05 - of this entry box
397:06 - so within the constructor for this entry
397:09 - box
397:10 - let's change maybe the color maybe the
397:13 - background color and foreground color
397:14 - let's begin with the foreground color
397:16 - you can pass in a color name or a hex
397:18 - value
397:18 - i want this to be green so the hex value
397:21 - for that is
397:21 - zero zero f zero ff00 and the foreground
397:25 - color
397:25 - of the text when we type it in is now
397:28 - green
397:29 - and we can also change the background
397:31 - color that is bg
397:33 - we could pass in a color name or a hex
397:35 - value i'm just going to say black to
397:37 - keep it simple
397:38 - and we now have a black background and
397:40 - the text color is now
397:42 - green here's a few useful features that
397:45 - you might be interested in
397:47 - let's insert some default text for our
397:49 - entry box
397:50 - so we can use the insert function entry
397:53 - dot insert
397:54 - we place a positional argument as well
397:56 - as some text
397:57 - so for the positional argument let's say
397:59 - zero so that's the very beginning
398:01 - index zero and let's set the text to
398:04 - maybe
398:05 - spongebob and then the default text
398:08 - within our entry box is now
398:10 - spongebob another option available to us
398:12 - is that we can set the state
398:15 - of this entry box we can set this to
398:17 - active or disabled
398:19 - let's say that after somebody submits
398:20 - our name we want to disable
398:22 - this entry box so we can either pass in
398:25 - this option
398:27 - within our constructor or we can use the
398:30 - config function to make any changes
398:32 - to the state of our entry box so let's
398:35 - say after we submit our username we want
398:37 - to disable this entry box
398:39 - so let's type in the name of our entry
398:41 - box dot config
398:44 - and for the option for state let's set
398:48 - this to
398:49 - disabled and then once we type in a name
398:54 - and then click submit our entry box is
398:57 - now disabled
398:58 - there's also an option called show where
399:02 - you can show a certain character in
399:04 - place of the normal text on the screen
399:06 - so this would be useful for a password
399:09 - let's say that we're typing in
399:10 - a password but we don't want to display
399:13 - the password on the screen
399:14 - we can use the show option to show a
399:17 - certain character in place
399:19 - of our text so you might see bullets or
399:22 - an asterisk
399:23 - so let's pretend that we're now typing
399:24 - in a password so we're going to set
399:27 - the option for show and place a
399:30 - character that we want to replace each
399:32 - character with
399:33 - let's say we want to only display
399:35 - asterisks when we type in
399:37 - some characters and i'm going to type in
399:39 - the word password
399:41 - but it's only displaying asterisks now
399:43 - but if i were to click submit
399:45 - it displays our text and i would say
399:48 - plain text instead of our hidden text
399:50 - because we're only showing
399:52 - whatever character that we set so that's
399:54 - an option available to you as well
399:55 - well everybody that's how to create an
399:57 - entry box in python you can submit
399:59 - information
400:00 - such as a username for example or even a
400:03 - password if you set the
400:04 - show option available to you if you want
400:07 - a copy of all this code i'll post all of
400:09 - this in the comments down below
400:10 - but yeah that's some of the uses of the
400:12 - entry widget in python
400:14 - hey how's it going everybody two bro
400:16 - here hope you're doing well and in this
400:18 - video i'm going to teach you guys how we
400:19 - can create and customize our own
400:21 - check buttons in python so sit back
400:23 - relax and enjoy the show
400:27 - all right my fellow bros in this video
400:30 - we're going to be creating
400:31 - and customizing our own check buttons in
400:33 - python i sometimes refer to these as
400:35 - check boxes
400:36 - so in case i do that's what i'm
400:38 - referring to as always we'll need a
400:40 - window
400:41 - window equals tk followed by window.main
400:44 - loop
400:44 - and let's call this button just check
400:47 - button and in order to create this check
400:50 - button
400:51 - we type in the name of the check button
400:53 - equals
400:54 - check button and within the constructor
400:58 - what are we adding this check button to
401:00 - we're adding this to our window
401:02 - and also within the constructor we can
401:04 - set the different options
401:05 - for how we want to customize this check
401:07 - button let's begin with the text
401:10 - text equals i agree
401:13 - to something and last but not least we
401:17 - need to add
401:18 - this check button to the window one way
401:20 - in which we can do that is
401:22 - to use the pack function of this widget
401:24 - so follow this with
401:26 - check button dot pack when we run this
401:28 - we have our check button within our
401:30 - window
401:31 - and we can toggle this on or off right
401:34 - now i'm agreeing to something
401:35 - i'm not sure what i'm agreeing to but
401:37 - hopefully it's not anything bad
401:38 - now currently this doesn't do anything
401:40 - so we'll need to associate a variable
401:42 - with this check button
401:43 - so we'll add that as an option variable
401:46 - equals and let's create a variable
401:49 - called x
401:50 - and we'll need to define this within the
401:52 - window so
401:53 - after we create our instance of our
401:55 - window let's say
401:57 - x equals now with check buttons
402:00 - they store a 1 or a 0 by default within
402:03 - our variable
402:04 - our variable that we call x so with
402:08 - x we're going to set this equal to a int
402:12 - var if this were to return a string we
402:15 - would say
402:16 - string bar but normally by default this
402:19 - returns a one
402:20 - or a zero and we can actually change
402:23 - that using the on value
402:25 - and off value options so the on value
402:28 - is what's going to be stored within our
402:31 - variable
402:32 - if it's toggled on so by default this is
402:35 - one
402:36 - and the off value is the opposite this
402:38 - is what is stored within
402:40 - our variable if this is toggled off
402:43 - alright now let's have some fun with
402:44 - this so let's associate a command with
402:47 - this check button
402:49 - command equals and let's create a
402:51 - function called
402:52 - maybe display and then let's define this
402:55 - before the window def display and we're
403:00 - going to check
403:00 - the value of x to see if it's one
403:04 - or zero so within our display function
403:07 - we're going to check to see
403:08 - if x and to get
403:11 - the value of x we're going to use the
403:14 - get function
403:15 - so if x dot get is equal to one
403:19 - that means that somebody clicked on the
403:20 - check box or toggled it on
403:23 - so if they check the check box
403:26 - or check the check button then they
403:29 - agree
403:30 - so print you agree
403:34 - if it's zero and we can do this with an
403:36 - else statement
403:37 - else print
403:41 - you don't agree frowny face
403:45 - and let's test this theory so we have
403:48 - our
403:49 - check button when we click on this it's
403:51 - actually going to call
403:52 - our display function i agree to
403:54 - something and it says within our console
403:56 - window
403:57 - you agree and if i were to toggle this
403:59 - off it says you don't agree
404:02 - let's change the font of our check
404:03 - button so we'll add that as an option
404:05 - font equals and we can pass in a font
404:08 - that we want
404:09 - i'll say maybe ariel and then a size
404:12 - of 20 and now this should be readable
404:16 - i agree to something let's also color
404:19 - this
404:20 - because well i like coloring let's begin
404:22 - with the foreground color
404:24 - so that is fg for short fg equals
404:27 - and then we can pass in a color name or
404:30 - a hex value
404:31 - i like hex values so i'm going to stick
404:33 - with those i want a green
404:35 - foreground color so that is zero zero f
404:39 - zero zero but feel free to adjust these
404:42 - values however you want
404:44 - so our text should now be green that is
404:47 - a
404:47 - very bright green and it hurts my eyes
404:49 - so i'm also going to change the
404:51 - background
404:51 - color which is bg and i'm going to set
404:54 - this to
404:54 - black so we'll have green text on a
404:57 - black background
404:59 - okay now when you click on this it
405:01 - flashes that's kind of annoying
405:03 - that's the active foreground and active
405:06 - background
405:07 - if we click on this or hold this down
405:09 - the color scheme switches to
405:11 - our active foreground slash background
405:13 - and we can change those too
405:15 - so i'm going to set those options active
405:19 - foreground i'm going to set this the
405:21 - same as my foreground color
405:25 - and the active background will be the
405:27 - same as
405:28 - our normal background so that's active
405:31 - background equals
405:35 - black and this should no longer flash
405:38 - when we click on it
405:41 - not too bad not too bad let's add some
405:43 - padding
405:45 - pad x i'll set this to 25
405:49 - and pad y i'll set this to
405:52 - 10. we have a little more padding around
405:57 - our check button one feature that's
405:59 - available to us
406:00 - is that we can add an image next to our
406:03 - check button
406:04 - i downloaded an image of the python logo
406:07 - that i want to add
406:08 - so we'll use the image option to add a
406:12 - photo image
406:13 - to this check button but first we need
406:15 - to create a
406:16 - photo image from our image file so
406:19 - within the window
406:21 - let's call this python photo
406:24 - but you'll probably use something
406:25 - different for your project
406:27 - python photo equals photo
406:31 - image and within the constructor for our
406:33 - photo image
406:36 - we can set the file path or the file
406:38 - name
406:39 - since this image is within my project
406:41 - folder i only have to list the file name
406:44 - and this photo of mine is python.png
406:49 - and now we set the image equal to
406:52 - our photo image that we have image
406:55 - equals
406:56 - python photo but when we run this
406:59 - it's going to overlap the text we still
407:02 - have our image though
407:04 - and this still works as intended so in
407:06 - order to display
407:08 - the image as well as the text we're
407:11 - going to need to use the compound
407:13 - option and let's add that at the end
407:15 - compound
407:17 - is where we're adding this photo
407:19 - relative to the text
407:21 - i want this photo on the left hand side
407:23 - of the text
407:24 - so i'm going to set this to left and now
407:27 - when we run this
407:28 - surprise surprise our image is on the
407:30 - left hand side
407:31 - one thing that you should know is that
407:33 - with the on value and the off value data
407:35 - type if you were to change this
407:37 - to a non-integer value let's say we're
407:40 - going to replace the on value with a
407:42 - boolean value of true and the off value
407:45 - is false with this variable make sure to
407:49 - change the data type as well to reflect
407:52 - what you're storing within
407:53 - it so with our int var variable we want
407:56 - to change this to a
407:57 - boolean var value so replace int
408:01 - with boolean and this will work much the
408:04 - same
408:04 - now with this display function we'll
408:06 - need to account for that
408:08 - so within the if statement here we'll
408:10 - say if x
408:11 - dot get we don't need to say is equal to
408:14 - one
408:15 - this will return true or false and this
408:18 - will work
408:19 - just the same as it did before and if
408:21 - you replace this with a string
408:23 - let's say the on value is
408:26 - yes all caps and the off value is
408:30 - no this is now a string bar
408:34 - and we'll change our display function to
408:36 - say if x
408:38 - dot get is equal to yes
408:43 - and this should work you agree you don't
408:46 - agree you agree
408:47 - you don't agree and i'll change that
408:50 - back to one so
408:51 - one and zero is the default for this but
408:53 - you can edit these based on what you
408:55 - need
408:56 - all right so that's the basics of check
408:58 - buttons in python if you want a copy of
409:00 - all this code
409:01 - i'll post all of this in the comments
409:03 - down below but yeah that's the basics of
409:05 - check buttons in python hey what's going
409:08 - on everybody it's your bro here hope
409:10 - you're doing well and in this video i'm
409:11 - going to be teaching you guys how we can
409:12 - create radio buttons in python so sit
409:15 - back
409:15 - relax and enjoy the show
409:19 - okay everybody let's create some radio
409:21 - buttons now these are similar to check
409:23 - boxes but you can only select one from
409:25 - any single grouping
409:27 - so let's pretend that i'm buying you
409:29 - lunch and you can only select
409:30 - one item from a menu you can select
409:33 - either a
409:33 - slice of pizza a hamburger or a hot dog
409:37 - so let's begin by creating a list i will
409:39 - call this list
409:40 - food food equals
409:44 - pizza hamburger
409:48 - hot dog and let's create a window
409:52 - window equals tk followed by
409:55 - window dot main loop
409:59 - so to create a radio button we'll need a
410:01 - name so i'll call this radio button
410:04 - radio button equals radio button
410:08 - and we're going to be adding this to our
410:10 - window and we're going to put this
410:12 - within
410:12 - a for loop so we're going to iterate
410:15 - through all of the items within our list
410:17 - so let's create a for loop so we'll say
410:20 - for
410:22 - index in range
410:26 - length of food
410:30 - so this is going to iterate once through
410:32 - all of the elements within our list
410:35 - so when we run this it's going to create
410:38 - three
410:38 - radio buttons for us because we're
410:40 - instantiating
410:42 - one radio button for each item in the
410:44 - list
410:45 - now what i'm going to do is set the text
410:48 - equal to
410:51 - our list of food at a certain index
410:55 - so when we first run this for loop it's
410:57 - going to be zero for the index
411:00 - then one and then two and then so on and
411:03 - so forth for each item within our list
411:06 - and then we just need to pack this so
411:09 - radio
411:10 - button dot pack
411:14 - and then let's take a look at this
411:17 - alright so here are all of the radio
411:19 - buttons that we have
411:20 - currently they're all selected though so
411:22 - we'll need to link these within a single
411:25 - grouping
411:25 - the next thing we'll add is a variable
411:28 - and we'll set this equal to
411:29 - x and we'll need to declare this after
411:31 - we create an instance of our window
411:33 - so x equals int var
411:37 - so this will hold an integer object
411:40 - so these are all within the same
411:42 - grouping
411:43 - however if we try to run this again and
411:45 - select one of these options
411:47 - they all become selected so we're going
411:50 - to need to give
411:51 - each of these individual radio buttons
411:53 - their own
411:54 - value because right now they're all
411:56 - sharing the same value
411:57 - so we can add value equals
412:01 - whatever the index is currently so the
412:04 - first
412:04 - item within our list of food is going to
412:07 - have an
412:07 - index value of zero then one
412:11 - then two so let's try that again and you
412:14 - can see by default it's
412:15 - zero so pizza is already selected then
412:18 - we can select either hamburger or hot
412:20 - dog
412:20 - but we can only select one so that's
412:23 - kind of what we want then
412:25 - so do you guys usually know how i call
412:27 - the config function after each change
412:29 - that i make for an object
412:30 - well that's because i like to add
412:32 - comments just for teaching purposes
412:34 - for what each change does however it
412:37 - might be easier for you instead of
412:38 - calling the config function a bunch of
412:40 - times
412:41 - just to list all of the changes within
412:43 - the parentheses when you create an
412:45 - instance of the
412:46 - object that you're working with however
412:48 - just for teaching purposes i'm going to
412:50 - put this all within
412:52 - separate lines that allows me to add
412:54 - some comments
412:55 - so i think i'm going to start doing that
412:56 - from now on uh so what this does
412:59 - is that this adds text to
413:02 - radio buttons and this
413:06 - groups radio buttons together
413:10 - if they share the same variable
413:16 - so if you wanted a completely different
413:18 - grouping of radio buttons you can give
413:20 - them a different variable
413:21 - like y and what this line does
413:25 - is that this assigns
413:28 - each radio button a
413:32 - different value
413:37 - all right so let's make some cosmetic
413:39 - changes to our radio buttons
413:42 - so right now they are centered let's
413:45 - anchor these to the west
413:47 - so we'll place this within the pack
413:49 - function so
413:50 - anchor equals w alternatively you can
413:54 - just say capital w
413:56 - without the quotes this would also work
413:58 - too
414:00 - so now they're all lined up let's add
414:01 - some padding
414:03 - so i'm going to add pad x
414:06 - and i'll set this to 25
414:10 - and this adds
414:13 - padding on x
414:17 - axis
414:20 - let's also change the font
414:23 - so we'll save font
414:27 - equals maybe i'll pick impact for a font
414:31 - style
414:32 - and set the font size to 50
414:36 - and now we can actually read these
414:38 - because the font is large enough
414:40 - now let's add some images so let's
414:43 - create some photo images
414:44 - you'll want to be sure to create these
414:47 - after you create your instance of your
414:49 - window
414:50 - so let's create a pizza image first
414:53 - pizza image
414:54 - equals photo image
414:58 - file equals the file path or the file
415:01 - name
415:01 - and my file is pizza.png and it kind of
415:04 - looks like this
415:05 - it's just the pizza emoji so
415:10 - pizza.png
415:12 - and then i'll do the same thing for
415:14 - hamburger and hotdog
415:16 - so this will be hamburger image
415:20 - file equals hamburger.png
415:25 - and then hotdog image
415:35 - and this is what the other emojis look
415:37 - like
415:40 - and then let's create a list of the
415:42 - photo images that we have
415:44 - i'll call this food images
415:47 - equals than the names of these images
415:52 - pizza image hamburger image
415:56 - and hot dog image
416:01 - so then we can set the image for each
416:03 - radio button
416:05 - image equals
416:08 - the name of the list food images
416:11 - followed by
416:12 - the index that we're currently on within
416:15 - our for loop
416:16 - so this adds image
416:20 - to radio button and
416:23 - let's test this cool here's our images
416:27 - now if you want some images as well as
416:30 - text you'll have to use compound
416:32 - so let's add that next so i'm just going
416:36 - to add a comma
416:37 - followed by compound
416:43 - equals let's say left so this will add
416:46 - the image
416:47 - to the left of the text
416:52 - adds image and text i'll just say left
416:56 - side
416:59 - so this will display both an image and
417:02 - text
417:04 - so with these radio buttons you can
417:06 - eliminate these
417:07 - circle indicators and there's actually a
417:10 - way to do that
417:11 - so what we'll add if you want to get rid
417:13 - of those
417:14 - is indicator
417:18 - on equals zero
417:21 - so this will i should say eliminate
417:27 - circle indicators
417:32 - so it's going to change these to these
417:34 - push buttons
417:35 - however they are going to be of uneven
417:38 - size you can set the width
417:40 - if you want to so we'll do that
417:43 - so we'll say width equals
417:47 - what about 75 i'm not sure if that's a
417:50 - good size or not
417:52 - okay that's way too small let's try 375
417:59 - so yeah you can have some push buttons
418:00 - if you want to if you don't like the
418:02 - circle indicators
418:04 - so this sets width
418:07 - of radio buttons
418:11 - now let's actually set a function to
418:14 - uh be called when we click one of these
418:16 - buttons
418:18 - so let's call this function maybe order
418:20 - like we're ordering one of these items
418:24 - so def we'll call this order like we're
418:27 - ordering something
418:29 - and what we'll do is just a few if
418:31 - statements because i'm feeling lazy
418:33 - so we'll just say if x that's
418:37 - the value that's going to be stored
418:40 - because each of these radio buttons is
418:42 - grouped together by the variable x
418:45 - if x dot get
418:48 - is equal to zero that's our first index
418:52 - for pizza what we'll display is
418:57 - print you
419:01 - oops you ordered
419:04 - pizza then we'll just add
419:08 - else if x dot get
419:12 - is equal to one we will print
419:17 - you ordered a hamburger
419:25 - and then else if two
419:30 - you ordered a hot dog
419:37 - else
419:40 - print huh
419:44 - so there's probably a more efficient way
419:46 - to write this however
419:48 - i was just feeling lazy and this is
419:49 - probably the best way to keep this
419:51 - simple and easy to understand
419:53 - so let's try this now oh however we need
419:55 - to set the command
419:57 - for our radio buttons so
420:00 - command equals then the
420:04 - function name which is order and make
420:07 - sure you do not add the parentheses
420:10 - so don't do this do that
420:13 - and this will set
420:16 - command of
420:19 - radio button to function
420:25 - all right let's test this so if we click
420:28 - on pizza it says you ordered pizza
420:30 - you ordered a hamburger and you ordered
420:33 - a hot dog
420:35 - okay everybody so that's the basics of
420:37 - radio buttons if you would like a copy
420:39 - of all this code i'll post all of this
420:40 - in the comments down below
420:42 - but yeah that's the basics of radio
420:44 - buttons in python
420:46 - hey what's going on everybody it's you
420:48 - bro here hope you're doing well and in
420:50 - this video i'm going to teach you guys
420:51 - how we can create
420:52 - a sliding scale in python so sit back
420:55 - relax and enjoy the show
420:59 - let's create a scale so we'll need a
421:00 - window window equals tk
421:03 - followed by window.mainloop we'll create
421:06 - a scale
421:07 - called scale scale equals scale
421:10 - we need to add the scale to our window
421:12 - so we'll put that here
421:14 - we can list a from position and a 2
421:17 - position
421:18 - both of these values will be our range
421:20 - of values that we can use
421:22 - for our scale so from
421:25 - sure to add an underscore after from it
421:28 - won't work without this underscore
421:30 - from equals let's say 0 and 2 equals 100
421:34 - so we're going to create a scale for
421:36 - temperature
421:37 - and this will be in celsius so 0 will be
421:41 - freezing and 100 will be the boiling
421:43 - point uh you know for water
421:45 - so then to display the scale we'll need
421:48 - to add
421:48 - scale.pack and let's run this
421:52 - so the front position is zero so that's
421:54 - at the top here and then if you go down
421:56 - it increases so you can actually flip
421:58 - this so we'll save from
422:01 - 102 will be zero
422:04 - so now you can scroll up and the number
422:06 - will increase
422:08 - let's also get the current value so
422:12 - we'll need a button
422:14 - so button equals button
422:18 - we'll add this to the window we'll add
422:20 - some text
422:22 - text equals submit and then a command
422:26 - command equals submit but we'll have to
422:29 - make this function
422:31 - so let's do that outside the window def
422:34 - submit and we will simply print the
422:38 - current temperature
422:39 - so let's display message the temperature
422:43 - is plus
422:47 - scale dot get
422:51 - plus degrees
422:55 - celsius we can just say degree c
422:59 - so let's try this uh but we also have to
423:01 - pack the button so button.pack
423:07 - so if we were to try and submit this
423:10 - right now scale.get is going to return
423:12 - an integer
423:13 - so we need to convert this to a string
423:16 - so
423:16 - str scale.get
423:20 - and you have to do that with python if
423:22 - you're displaying a
423:23 - integer value along with another string
423:26 - uh you need to convert it to a string
423:29 - so now this should work so it is 82
423:33 - degrees celsius
423:35 - so let's do some cosmetic changes for
423:37 - our temperature gauge
423:39 - because right now it's kind of ugly
423:43 - so the first thing we'll change is
423:46 - let's say the length so length equals
423:49 - 600 so that should be fairly large
423:56 - you can also set the orientation so that
423:59 - is
423:59 - orient spelt like that
424:04 - so this can either be vertical which it
424:06 - currently is
424:09 - or horizontal
424:15 - but i'll keep this as vertical
424:19 - so i'll let a comment that this is
424:22 - orientation
424:23 - of scale let's also change the
424:27 - font so font equals
424:30 - pick whatever font you want
424:34 - and a size so maybe 20.
424:41 - now you can add some tick intervals
424:46 - maybe i'll set this to 10. so these will
424:50 - be
424:50 - numeric indicators on the scale
425:00 - and show value this hides the current
425:04 - value
425:04 - so if you set this to zero this will
425:06 - hide
425:07 - current value
425:12 - so it no longer displays what the
425:14 - current value is next to the slider
425:17 - to actually retrieve it you'd have to
425:19 - get the value
425:20 - so right now it's 40 but it helps that
425:22 - you have the tick intervals on the
425:24 - left-hand side
425:26 - i should probably add that this adds
425:31 - uh numeric
425:34 - indicators for
425:38 - value good enough let's continue on
425:41 - now let's use the set function we can
425:44 - set the current value of the knob
425:46 - on our scale and by default it is zero
425:49 - so we can use the scale
425:50 - dot set function and we can place a
425:53 - number in here
425:54 - a value so let's say we want this to be
425:57 - 100
425:58 - so this is now at the 100 position
426:00 - instead of zero
426:01 - if we wanted this in the middle we could
426:03 - set this to 50
426:05 - and now it's in the middle however if
426:07 - you change the
426:09 - range of your skill of from minus 2
426:12 - and set this to 50 now 50 is all the way
426:15 - down here so it no longer appears in the
426:17 - middle
426:18 - so this isn't really necessary but if
426:20 - you want this to be a little more
426:21 - sophisticated
426:22 - there's actually a formula that you
426:23 - could use we can use scale
426:26 - straight braces and then place the word
426:28 - from
426:29 - within here this will give us our max
426:31 - basically
426:32 - uh so this is from without an underscore
426:35 - so this not this this
426:40 - scale from minus scale
426:43 - two and then we're going to divide this
426:47 - by two
426:48 - and then i'm just going to put this
426:50 - within a extra set of parentheses
426:53 - plus scale two just in case
426:57 - our two value is greater than zero
427:01 - we just want to account for that and
427:03 - then i'm just going to
427:05 - put these within another set of
427:06 - parentheses so
427:08 - this should always appear in the middle
427:10 - then even if we were to change this
427:14 - range
427:16 - yeah it seems like it works uh like i
427:18 - said it's not really necessary but
427:20 - if you want this to be a little more
427:21 - sophisticated that would work
427:23 - now let's make some cosmetic changes to
427:25 - this scale and make it look pretty
427:28 - so first let's change the trough color
427:30 - this is this gray portion right here
427:35 - so let's set the trough color
427:39 - equals whatever color you want you could
427:42 - say like blue
427:43 - or you can place a hex value here and i
427:45 - actually picked one out already
427:47 - so i'm going to use 6 9 e
427:50 - a f f and that is this icy blue color
427:54 - kind of like this is sliding on ice
427:58 - and i'm also going to change the font
428:00 - color
428:03 - and i'm going to pick this fiery red
428:06 - color
428:07 - to symbolize heat
428:12 - and then you can change the background
428:14 - color too
428:16 - so that is bg and i'll just set this to
428:20 - like black
428:24 - it's looking kind of cool now right and
428:27 - for no good reason i'm going to add some
428:29 - pictures
428:31 - so feel free to pause the video if you'd
428:32 - like to download some images i'm going
428:34 - to use an image of a flame
428:36 - for the hot side of our scale and a
428:39 - snowflake
428:40 - for the cold side so let's begin by
428:43 - adding the hot image uh to the scale
428:46 - before we actually
428:48 - add the scale to the window so we'll do
428:50 - this after we instantiate the window
428:52 - because that's the only place that we
428:53 - can do that
428:55 - so we're going to create a image i'll
428:56 - just call this hot image
428:58 - for the fire icon so hot image equals
429:01 - photo image file
429:04 - equals this is hot.png so
429:08 - hot.png we're going to add the image to
429:12 - a label
429:13 - i'll call this hot label hot label
429:17 - label image equals
429:20 - hot image and then we need to pack this
429:24 - so hot label dot pack
429:29 - and this should appear at the top let's
429:31 - test it
429:32 - yep there it is let's do the same thing
429:35 - for the cold side
429:37 - so i'll add this here before the button
429:41 - and i'm going to replace hot with cold
429:44 - same thing with the file name
429:45 - cold.png
429:49 - this will be cold label cold
429:52 - image and cold label dot pack
429:57 - and that should be it let's take a look
429:59 - not too shabby it's looking pretty sweet
430:02 - it has our submit button at the bottom
430:03 - too uh so
430:05 - right now the temperature is 100 degrees
430:07 - celsius
430:09 - the temperature is 0 degrees celsius the
430:11 - temperature is 60 degrees celsius
430:14 - well that's how to create a scale in
430:16 - python if you would like a copy of all
430:17 - this code i'll post all of this in the
430:19 - comments down below
430:20 - but yeah that's how to create a scale in
430:22 - python
430:24 - hey what's going on everybody it's your
430:26 - bro here hope you're doing well and in
430:27 - this video i'm going to teach you guys
430:29 - how we can create a list box in python
430:31 - so
430:32 - sit back relax and enjoy the show
430:36 - all right you wonderful people let's
430:38 - create a list box a list box
430:40 - is a listing of selectable text items
430:43 - within its own container
430:44 - so as always we'll need a window window
430:47 - equals tk
430:48 - followed by window dot main loop let's
430:51 - create a list box
430:52 - simply called list box big surprise
430:55 - there right
430:55 - so list box equals list box what are we
430:59 - adding this list box to
431:00 - we're going to place that here within
431:01 - the parentheses of the constructor
431:03 - we're adding this to our window and then
431:05 - we're going to follow this with
431:07 - listbox.pack you can also do
431:09 - listbox.place as well and place some
431:11 - coordinates but
431:12 - we've always done pack let's just stick
431:14 - with that for now all right so this is
431:16 - what our list box looks like
431:18 - it's a small rectangular box and we're
431:20 - going to add some text items that are
431:22 - selectable
431:23 - and eventually we'll be able to submit a
431:25 - choice so i have an idea
431:27 - let's create an online menu like we're
431:30 - ordering food from a restaurant
431:32 - let's say it's bros italian restaurant
431:34 - so let's add some food items to our menu
431:36 - and somebody can submit an order so
431:39 - we'll need to use the
431:40 - insert function of the list box to add
431:42 - some items so
431:43 - list box dot insert we place
431:47 - an index and a text item so let's say
431:50 - for
431:51 - index one we'll have pizza
431:54 - and this is what we end up with we have
431:56 - the item pizza
431:58 - it's selectable and well that's really
432:00 - it we'll need to create a submit button
432:02 - and populate the rest of this list box
432:04 - so let's add a few other items for our
432:06 - menu so let's say we'll have five items
432:10 - and we need an index for each so one two
432:13 - three four and five so we have
432:16 - pizza for the first item for the second
432:18 - item let's have pasta
432:20 - and third let's say garlic bread because
432:23 - garlic bread
432:24 - is awesome and restaurants usually have
432:26 - appetizers so why not soup and salad
432:30 - and that should be enough for this
432:31 - example
432:33 - and this is what we have we have our
432:36 - menu and we can select
432:37 - an item from this menu so let's
432:40 - customize the appearance of this menu
432:42 - well because we can so let's do that
432:45 - let's change the background color so we
432:46 - do that with the option
432:48 - bg for background and you can set this
432:50 - equal to a color of your choice
432:52 - or a hex value so i have a hex color
432:55 - value already picked out
432:57 - it is f7fde and this has the appearance
433:01 - of i would say
433:02 - paper like it's kind of faded i think
433:04 - that would fit some sort
433:06 - of menu for a restaurant but pick
433:08 - whatever background color you want
433:10 - so let's change the font next so we can
433:13 - do that with the option font
433:16 - and i will pick the font
433:22 - it's somewhat fancy i think it would fit
433:24 - like a restaurant menu
433:26 - and then a size of 35.
433:29 - yeah we're getting somewhere we can also
433:32 - change the width and the height
433:35 - so width equals let's say 12.
433:39 - that's not too bad for a width let's
433:41 - also change the height
433:43 - so we can do that with a function
433:46 - of our list box so let's get the current
433:49 - size of the list box
433:50 - and let's actually do that after we
433:53 - insert all of the items within our list
433:55 - box
433:55 - so to change the size of our list box
433:58 - what we do
433:59 - is type in list box
434:02 - dot config you usually use config if you
434:05 - need to change any uh
434:06 - options and we want to change the
434:09 - length of or the height of this list box
434:13 - so we're going to say height equals
434:17 - list box dot
434:20 - size function so then this will adjust
434:24 - the size
434:25 - of our list box dynamically even if we
434:28 - were to remove an item
434:30 - then the size of our list box is going
434:32 - to shrink
434:34 - just like that but let's keep salad in
434:37 - there for now because we need salad
434:40 - all right so how do we actually submit
434:43 - one of these options we'll need to
434:44 - create a submit button
434:46 - so let's do that after we create our
434:48 - list box so near the bottom
434:50 - we'll call this submit button
434:53 - submit button equals button we're adding
434:56 - this to our window
434:58 - let's set the text to submit
435:01 - and we'll need a command so we'll create
435:03 - a function called
435:05 - submit and then we need to pack
435:08 - this submit button
435:11 - submit button.pack now at the top of
435:14 - this program
435:15 - let's create a submit function
435:19 - so at the top def submit
435:24 - so to retrieve or get the current
435:27 - selected item
435:28 - of a list box there is a certain
435:30 - function that you can use
435:31 - so we'll begin by saying
435:35 - list box dot get
435:38 - what are we getting we want to get
435:39 - anything that is currently selected and
435:41 - there is a function
435:43 - for that so what we're going to do
435:45 - within the parentheses of the get
435:47 - function is type in
435:49 - listbox dot current selection
435:54 - it's shortened to cur selection all
435:57 - right and then we can either store this
435:59 - within a variable or we can just print
436:01 - this but i think we'll just print this
436:02 - to keep it simple
436:06 - now when we select an item and
436:09 - click on the submit button it's going to
436:11 - submit our order
436:12 - actually better yet let's actually uh
436:16 - print you have
436:20 - ordered whatever item that
436:25 - we select so garlic bread you have
436:27 - ordered garlic bread
436:29 - cool what we're going to work on now is
436:32 - a way to submit
436:33 - or insert an item to our list box after
436:36 - this program is compiled and already
436:38 - running
436:39 - so we'll create an entry box within our
436:42 - window
436:42 - where we can submit a custom item to
436:44 - this menu
436:45 - so let's create an entry box and let's
436:49 - do that before the submit button that
436:50 - would be a good spot for this
436:52 - so let's call this entry box where
436:54 - somebody can
436:55 - type in something to add to the menu so
436:58 - entry box equals entry and we're adding
437:01 - this
437:02 - to our window and then entry box
437:05 - dot pack then we're going to create a
437:09 - button
437:10 - called add and i'm just going to copy
437:12 - everything from the
437:13 - submit button and we'll change submit to
437:16 - add
437:17 - we're going to add an item to the menu
437:20 - so we'll change the text
437:21 - to add and command add
437:24 - add button dot pack then we're going to
437:28 - create
437:29 - a function called add and we'll do that
437:31 - at the top
437:32 - def add parentheses
437:35 - colon so to add an item to the list box
437:39 - first we need to
437:40 - get what is currently in the entry box
437:43 - so we can do that by typing in
437:47 - list box dot insert
437:50 - then within the parentheses we need to
437:52 - get
437:53 - an index number as well as
437:56 - a text item so for the number what we
437:59 - can type here
438:00 - is the listbox dot size
438:03 - so this will give us the current
438:05 - position of the
438:07 - index that we're currently on for the
438:08 - list box and then we need to get the
438:11 - text
438:12 - in the entry box so we type in the name
438:14 - of the entry box
438:15 - entry box dot get
438:19 - and this will insert a new item within
438:22 - our menu our list box so let's try it
438:24 - again
438:27 - so we can type in an item let's say soda
438:29 - we want to add soda to the menu
438:31 - and then we click add all right there's
438:34 - our soda but we have to scroll down to
438:36 - see it
438:37 - so let's change the size of our list box
438:41 - so there's actually a line of code that
438:43 - we did that already
438:44 - listbox.config height equals listbox
438:47 - size so let's add that within the add
438:50 - function at the very end
438:52 - so then the height of our list box will
438:55 - adjust
438:56 - so currently there's no soda within our
438:57 - menu let's type in soda
438:59 - or some other item click add and then
439:02 - that item will appear and the size of
439:04 - the list box will change to accommodate
439:06 - any new items
439:07 - let's say now that we serve sushi we're
439:10 - now an italian
439:11 - and japanese restaurant now we have
439:14 - sushi on the menu
439:15 - you know what why stop there let's
439:17 - create a delete button to delete an item
439:19 - from this menu
439:21 - so we'll create a delete button
439:24 - i'll just copy everything for add and
439:26 - change this to
439:27 - delete so delete button text equals
439:30 - delete
439:32 - command equals delete as well and
439:35 - delete button dot pack and then at the
439:38 - very top we'll create a delete
439:40 - function so we'll do that here
439:44 - d e f delete
439:48 - and to delete an item from a list box
439:51 - there's actually a function to do that
439:52 - so
439:53 - list box dot delete
439:56 - and then within the parenthesis of the
439:58 - delete function we can pass
440:00 - in list box dot current selection or
440:04 - just
440:04 - cur selection for short and then we want
440:07 - to
440:08 - readjust the height of this list box
440:10 - after we delete an item
440:12 - so we'll just add listbox.config height
440:15 - equals listbox.size because the size
440:18 - of all the items within the list box is
440:20 - going to shrink after we delete an item
440:23 - so let's try this so here's our menu
440:26 - let's say we no longer want salad
440:28 - because salad is healthy well we can
440:30 - delete it
440:31 - same thing with soup and you know what
440:33 - let's also delete the
440:34 - pasta and the pizza so we're only left
440:37 - with sweet sweet garlic bread
440:39 - well ladies and gentlemen we're going to
440:40 - get into some more advanced stuff with
440:42 - list boxes
440:43 - what if you want to select more than one
440:45 - item from this list box
440:47 - we're going to need to change a few
440:48 - things so when we create our list box
440:51 - there is a select mode select mode
440:54 - and we are going to set this equal to
440:56 - multiple
440:57 - so now we can actually select multiple
441:00 - items
441:01 - from this list box like i want to select
441:03 - one of everything
441:04 - but what happens when we submit this
441:07 - well we're going to run into some
441:08 - problems so we're going to need to
441:09 - change this program around
441:11 - so let's begin with the submit option so
441:14 - what we're going to do within the submit
441:16 - option
441:16 - is first get rid of this line let's say
441:20 - we
441:20 - no longer need this anymore uh and then
441:23 - before we print out the items that we
441:26 - ordered
441:26 - let's create a list called food
441:30 - and we'll just leave this empty for now
441:31 - we'll fill this later
441:33 - so we'll create a for loop for index
441:37 - in list box
441:40 - dot current selection
441:44 - what we're going to do after each
441:46 - iteration
441:48 - food dot insert
441:52 - our index number as well as
441:55 - listbox dot get
441:59 - the item name at this index what this
442:02 - for loop is doing is that it's going to
442:04 - iterate once for each item that we
442:07 - select
442:08 - so since we have three items that are
442:10 - currently selected this is going to
442:12 - iterate three times
442:13 - get the index number as well as the item
442:15 - at that index number
442:17 - and now we just need to display the
442:18 - contents of what we have
442:20 - within our list of food so we can do
442:23 - that with
442:23 - another for loop so let's add that after
442:26 - you have ordered
442:27 - then for
442:30 - index in our list
442:34 - food all we'll do is print
442:39 - index so this will print out everything
442:42 - that we ordered
442:43 - so let's say that we want one of
442:45 - everything and submit this
442:46 - you have ordered pizza pasta garlic
442:49 - bread soup and salad
442:51 - now what happens if we try to delete
442:53 - multiple items
442:54 - so let's say we want to delete soup and
442:56 - salad and we click delete
442:58 - well we're going to run into an error
443:00 - because our function is not set up to
443:02 - accommodate for
443:03 - multiple items so we'll need to change a
443:05 - few things around so let's get rid of
443:07 - this line for now
443:08 - list box dot delete list box dot current
443:10 - selection
443:11 - and we're going to place a for loop here
443:13 - so for
443:14 - index in list box
443:18 - dot current selection then after each
443:21 - iteration
443:22 - what we're going to do is use list box
443:25 - dot
443:26 - delete and we're deleting the item at
443:29 - whatever index we're currently on so you
443:32 - would think this would work
443:33 - at first glance let's say we want to
443:36 - delete pizza and pasta
443:38 - we're going to click delete so pizza was
443:40 - deleted but not
443:41 - pasta that's because the indexes are
443:44 - changing
443:45 - after we delete an item so when we use
443:48 - this for loop
443:49 - we should actually reverse this so with
443:53 - listbox.currentselection
443:54 - we are going to enclose this with
443:56 - reversed
443:59 - so then we're going to start at the last
444:01 - index and work our way to zero
444:03 - in that order so now if we want to
444:06 - delete
444:06 - pizza and pasta i don't know why we
444:09 - would because
444:10 - they're amazing and we click delete it
444:12 - deletes
444:13 - pizza and pasta but we still have garlic
444:16 - bread soup and salad then we can add an
444:18 - item
444:19 - let's say we want to add sushi against
444:21 - the menu we can do that
444:22 - and then we can order one of everything
444:24 - because we're really hungry
444:26 - you have ordered garlic bread soup salad
444:28 - and sushi
444:29 - so that's the basics of creating a list
444:32 - box in python if you want a copy of all
444:34 - this code
444:35 - i'll post all of this in the comments
444:36 - down below but yeah that's the basics
444:38 - of list boxes in python
444:41 - hey what's going on everybody it's your
444:43 - bro here hope you're doing well and in
444:45 - this video i'm going to teach you guys
444:46 - how we can create
444:47 - message boxes in python so sit back
444:49 - relax and enjoy the show
444:54 - okay people let's create some message
444:56 - boxes but first we'll need an import so
444:58 - from
444:59 - tk enter import
445:02 - message box and what this will do
445:06 - is import the message box
445:09 - library so it's not necessary to add
445:12 - this comment uh so we'll need a window
445:15 - window equals tk followed by window
445:18 - dot main loop let's create a button
445:22 - so button equals button we're going to
445:26 - add this to the window
445:27 - we're going to set the command to
445:29 - execute a
445:30 - click function that will have a message
445:33 - box appear when we click on the button
445:35 - and let's set the text so text equals
445:39 - click me and then we will need to pack
445:43 - this button
445:43 - so button.pack now we'll need to create
445:46 - a click function
445:47 - so let's do that at the top def
445:50 - click and what do we want to do
445:54 - so there's a few different uh message
445:56 - dialog boxes that you can use
445:58 - so let's begin with a basic show info
446:01 - message box
446:02 - so message box dot and there's a few
446:05 - options
446:06 - let's begin with show info show
446:09 - info this just displays a simple message
446:12 - so if we were to run this we have a
446:15 - button we click on the button and it's
446:16 - going to create a message box for us
446:19 - and it just shows some info but we don't
446:21 - really have any info to show yet
446:23 - so we can set a title and we can set a
446:26 - message
446:26 - so let's set the title title equals
446:31 - this is an info
446:34 - message box
446:39 - although part of the title got cut off
446:42 - let's also set the message message
446:45 - equals
446:47 - you are a person
446:53 - click me you are a person thanks i
446:56 - didn't know that so there's a few other
446:59 - message boxes that we can use too
447:01 - so for now i'm just going to turn this
447:03 - into a comment and i'll just copy this
447:05 - just to save some time
447:09 - and the next one that we have is
447:12 - show warning
447:15 - so this will have a different icon so
447:18 - the title
447:19 - let's say warning and the message
447:24 - you have a virus
447:31 - so now we get this annoying warning
447:33 - message but you can just click ok to get
447:35 - rid of it
447:36 - so one thing that you might see with
447:38 - tech support scams
447:39 - they'll have a message box like this
447:42 - that shows a warning
447:43 - but they'll put this within a while loop
447:45 - that's set to true
447:47 - so this will just continue on and on
447:52 - kind of like this so if we were to try
447:55 - and close out of this
447:56 - it's just going to reappear while
448:00 - true is true basically so that's just
448:03 - something funny that i wanted to show
448:05 - you
448:05 - so let's move on i'm going to turn this
448:07 - into a comment
448:10 - then the next one we have is show error
448:17 - so show error
448:21 - title set it to whatever you want
448:24 - error message
448:27 - something went wrong
448:36 - there's a few more sophisticated ones
448:38 - too we can ask for some user input
448:42 - so this next one is message box
448:45 - dot ask and there's a few to choose from
448:49 - let's go with ask okay cancel first
448:53 - we'll set the title title equals
448:56 - ask okay cancel
449:00 - and a message message
449:05 - do you want to
449:08 - do the thing
449:15 - so we can actually put this within an if
449:18 - statement
449:19 - so this returns either true or false
449:21 - depending on what you click
449:23 - so let's put this within an if statement
449:26 - if this is true
449:28 - print you did
449:31 - a thing
449:34 - if it returns false we can use an else
449:36 - statement
449:38 - else what else do we want to do we'll
449:40 - say else
449:42 - print you
449:45 - cancelled a thing
449:49 - and let's test this
449:56 - but i am forgetting a colon there
450:01 - do you want to do the thing okay you did
450:04 - a thing
450:04 - let's try it again do you want to do the
450:07 - thing
450:08 - cancel you cancelled a thing cool
450:11 - there's a few others
450:12 - so i'll turn all of these into comments
450:17 - and the next one we can go over is ask
450:20 - retry cancel
450:22 - and this is fairly similar to what we
450:23 - had before i'm going to copy this
450:28 - let's change this to ask
450:32 - retry cancel ask retry
450:36 - cancel do you want to
450:40 - retry the thing
450:44 - you retried a thing
450:48 - or you cancelled a thing so it's very
450:51 - similar to what we had before
450:52 - do you want to retry the thing retry you
450:55 - retried a thing
450:58 - and cancel you cancelled a thing
451:03 - okay the next one we have is ask yes
451:06 - no so we can get some user input
451:11 - if it's a yes or a no
451:14 - so this returns a boolean value a true
451:17 - or false
451:18 - value so message box
451:21 - dot ask
451:24 - yes no
451:28 - and we'll set the title title equals
451:31 - ask yes or no
451:35 - and a message
451:40 - do you like
451:44 - cake
451:47 - so let's put this within an if statement
451:50 - because this returns
451:51 - a true or false answer print
451:57 - i like cake too
452:01 - else they answered no then if this is
452:05 - false
452:06 - print why do you
452:09 - not like cake
452:15 - and i'm missing a colon there we go
452:19 - so if they click yes this returns true
452:22 - and we execute this line of code i like
452:25 - cake
452:25 - too if they answer no it's going to
452:28 - execute this
452:29 - else statement do you like cake no why
452:32 - do you not like
452:33 - cake now what we have next is ask
452:36 - question and this doesn't return a
452:38 - boolean value of true or false
452:40 - it actually returns a string of yes or
452:43 - no
452:43 - so this is message box
452:47 - dot ask question
452:50 - and we'll set the title to ask
452:54 - question and a message
452:57 - message equals do
453:00 - you like pi
453:05 - so let's just print the result what this
453:08 - returns
453:09 - so print everything within here
453:13 - so like i said this doesn't return it
453:15 - true or false
453:16 - but yes or no
453:20 - so what we could do is assign the
453:23 - response to
453:24 - a variable such as answer
453:27 - so answer equals whatever the answer is
453:30 - whatever they
453:31 - click whatever button they click on so
453:33 - if
453:34 - our answer is equal to yes
453:38 - will print a message print
453:42 - i like pie 2.
453:47 - then else the answer is no
453:51 - will print why do you
453:54 - not like pie
454:00 - so do you like pie yes i like pie too do
454:03 - you like pie
454:04 - no why do you not like pie
454:07 - so this next one is probably the most
454:10 - difficult
454:10 - it's ask yes no cancel
454:15 - so it's message box dot
454:18 - ask yes no cancel
454:21 - it's this last one so let's set the
454:23 - title
454:24 - title equals whatever you want yes
454:28 - no cancel and a message message
454:35 - equals do you
454:38 - like to code
454:42 - so let's just print the results what
454:45 - this returns
454:46 - so print everything just so we can take
454:50 - a look
454:51 - so the possible answers are
454:55 - true false
454:58 - or none so we can just run some if
455:01 - statements for this
455:04 - so if
455:07 - answer is equal to true
455:11 - what we can do is print
455:16 - you like to code
455:20 - oh but we need to assign this to an
455:22 - answer so answer
455:23 - equals all of this
455:29 - else if
455:33 - answer is equal to false
455:37 - let's print then
455:41 - why are you watching a video
455:44 - on coding
455:48 - and then else the response is none so we
455:51 - can just use an
455:52 - else statement so else
455:56 - you have dodged the question
456:02 - okay let's try this
456:05 - do you like to code yes you like to code
456:08 - uh but this should really be a smiley
456:10 - face right
456:12 - do you like to code no then why are you
456:15 - watching a video on coding
456:17 - do you like to code cancel you have
456:20 - dodged the question
456:22 - no one other option available to you is
456:24 - that you can change the icon that you're
456:26 - using
456:27 - so let's say that we want to change this
456:29 - icon so right now it is currently
456:32 - this question mark so we can set this to
456:34 - one
456:35 - of a few preset icons so icon
456:38 - equals and let's set this to warning
456:42 - so instead of that question mark we get
456:44 - this yellow exclamation point
456:46 - and you can also use info
456:54 - it's just an eye and error
457:02 - so do it fits best for you all right
457:05 - well
457:06 - that's the basics on message boxes in
457:08 - python if you'd like a copy of all this
457:10 - code
457:10 - i'll post all of this in the comments
457:12 - down below but yeah that's the basics of
457:14 - message boxes in python hey what's going
457:18 - on everybody it's your bro here hope
457:19 - you're doing well and in this video i'm
457:21 - going to teach you guys about the color
457:23 - chooser module in python so
457:25 - sit back relax and enjoy the show
457:29 - okay everybody so before we begin it
457:31 - we'll need a second import so let's add
457:33 - this at the top
457:34 - so from tk enter import
457:37 - color chooser and the reason that we
457:40 - need a second import and it's not
457:42 - included with this first import
457:44 - is because this is a sub module
457:47 - it's not necessary to add this comment i
457:49 - just like to add comments for teaching
457:51 - purposes
457:52 - so make sure you have these two imports
457:54 - before we begin
457:55 - now we'll need a window and a button
457:58 - that we can add to the window
457:59 - and when we click on the button we're
458:00 - going to select a color and change the
458:03 - background color
458:04 - of the window so let's create a window
458:07 - window equals tk followed by window.main
458:11 - loop and then let's set the geometry so
458:14 - we're going to change
458:15 - the background color of the window after
458:17 - we select a color
458:18 - so let's select a fairly large size for
458:21 - a window
458:22 - maybe 420 by 420 so this is the width
458:25 - and the height
458:26 - and then let's create a button so button
458:29 - equals button
458:31 - let's set some text text equals
458:34 - click me and we're going to
458:37 - set a command for this button that is
458:39 - called so we're going to create a
458:41 - function maybe called click
458:43 - and then we just need to pack this
458:45 - button so we can add this to the window
458:47 - so button.pack
458:48 - now we're going to need to create a
458:50 - function and we'll call it click
458:53 - so when we click on the button this
458:55 - function is going to be called
458:56 - so def click and what do we want to do
459:00 - after clicking this button
459:01 - what we're going to do is take color
459:05 - chooser and we're going to use the ask
459:09 - color function so currently this is what
459:12 - this does
459:13 - we can select a color after clicking
459:15 - this button and pick whatever color you
459:17 - want
459:18 - then you hit ok however we need to store
459:21 - this color within
459:22 - let's say a variable so we'll create a
459:23 - variable called color color equals
459:26 - color chooser dot ask color and then we
459:28 - can do something with this color
459:30 - but for now let's just print this color
459:32 - just to take a look to see what it
459:33 - contains
459:34 - so print color
459:39 - so let's say that i want this green
459:42 - color
459:43 - click ok this is what this prints this
459:46 - is our color
459:47 - so this is the rgb values that we have
459:51 - in this
459:51 - first element so this is the amount of
459:53 - red
459:54 - then green and then blue and the second
459:58 - element
459:58 - is the hexadecimal representation of
460:01 - these values
460:03 - so what we want is this hexadecimal
460:06 - value
460:07 - so what we can do is create a second
460:09 - variable to store this
460:11 - so let's just call this color hex
460:14 - color hex equals color
460:18 - and we're going to get the first element
460:21 - well technically it's the second element
460:22 - but it's the
460:24 - element at position one so this one
460:27 - this is zero index zero so we're going
460:30 - to
460:31 - basically extract this hexadecimal value
460:33 - and let's just print this
460:35 - just to be sure that it's working fine
460:36 - so print color
460:38 - hex and let's try this again but select
460:41 - a different color
460:42 - uh maybe i want this purple color then
460:45 - click ok
460:46 - so this is cb42ff
460:50 - and here we have cb42ff
460:54 - now let's change the background color so
460:56 - since we have this hex value that's
460:58 - actually fairly simple
460:59 - so we're going to take window dot config
461:05 - bg for background color equals
461:08 - color hex
461:11 - and this will change background
461:15 - color
461:18 - and let's set this to a sky blue color
461:22 - maybe like this click ok and it changes
461:25 - the color
461:26 - however it's not really necessary to
461:28 - continue printing these values you can
461:30 - take these out if you want
461:33 - and this would work like just the same
461:35 - then
461:37 - now this part isn't necessary but if you
461:40 - want
461:40 - you can condense these three lines of
461:42 - code that we have for our click function
461:44 - into less lines of code so what you
461:47 - could do
461:48 - instead of assigning the value of color
461:52 - at index 1
461:53 - to a separate variable we can take color
461:56 - at index 1
461:57 - get rid of this line and assign bg
462:00 - equals color
462:01 - at index one so now this is done with
462:03 - just
462:04 - two lines of code and why stop there we
462:06 - can write this with just
462:08 - one line of code so now we're going to
462:10 - take color chooser dot ask
462:12 - color get rid of this line bg equals
462:17 - color chooser dot ask color at index
462:20 - one and now this is done
462:24 - with just one line of code however it's
462:27 - a
462:27 - i would say a little more difficult to
462:29 - teach
462:30 - so that's why i kind of like to separate
462:32 - this line by line
462:34 - so if you want you can condense all of
462:36 - this into just one line of code
462:38 - so here's some ideas of where the color
462:40 - chooser sub module could be helpful
462:43 - so of course you can change the
462:44 - background color too but let's say that
462:46 - you're creating a game and you can
462:48 - customize your character or avatar
462:51 - well it would be kind of nice if you
462:52 - could have some way for the user to
462:54 - actually change maybe the character's
462:56 - hair color eye color something like this
462:58 - would actually work fairly well
463:00 - so yeah that's the basics of color
463:02 - chooser if you'd like a copy of all this
463:04 - code
463:04 - i'll post this in the comments down
463:06 - below but that's the basics of
463:08 - color chooser in python hey what's going
463:11 - on everybody it's bro here hope you're
463:12 - doing well and in this video i'm going
463:14 - to teach you guys how we can create a
463:15 - text area in python so sit back relax
463:18 - and enjoy the show
463:21 - all right my fellow bros let's discuss
463:24 - the text
463:24 - widget this functions like a text area
463:27 - you can enter multiple lines of text i'm
463:30 - not sure why
463:31 - it's called a text widget instead of a
463:33 - text area widget text area would make
463:36 - more sense
463:37 - but idk though so let's begin by
463:39 - creating a window
463:41 - window equals tk followed by window.main
463:44 - loop
463:46 - so to create a text widget also known as
463:49 - a text area
463:51 - let's call this text text equals text
463:54 - and we're going to add this text to our
463:56 - window and then we need to
463:58 - pack this text text dot pack
464:03 - so we should have a text area
464:06 - and you can enter in
464:09 - stuff like this
464:13 - all right but what good is a text area
464:16 - if you can't actually submit
464:18 - some text so let's create a button to do
464:20 - that for us
464:21 - so button equals button
464:24 - we're going to add this button to the
464:26 - window
464:28 - and button dot pack
464:32 - so we need a command for this button
464:36 - and a function as well so let's create a
464:39 - function called submit it's going to be
464:40 - a submit button
464:42 - and let's change the text to because we
464:44 - can
464:45 - text equals submit
464:50 - cool now let's create a function called
464:53 - submit
464:54 - and we'll do this at the top d e f
464:56 - submit
464:58 - and what is this going to do well it's
465:01 - going to
465:02 - get the text from the text area and
465:05 - let's assign this to a variable and we
465:07 - can call this maybe input or
465:09 - whatever you want so to get the text
465:12 - from the text area
465:14 - let's say text that's the name of this
465:16 - text
465:17 - area dot get but we need
465:20 - a starting index as well as an ending
465:23 - index
465:24 - so we're going to place 1.0 here
465:27 - for the beginning index this is the
465:29 - first line
465:30 - we want to get everything so for the
465:33 - second index we can just put
465:34 - end then we can do anything we want with
465:37 - this input so let's just print this to
465:39 - the console window
465:40 - so print input
465:44 - and this should work
465:49 - hey you drink plenty
465:52 - of water love you
465:55 - and click submit and then you can do
465:58 - whatever you want with this
465:59 - input well that's how a text area
466:02 - functions but now let's customize the
466:04 - appearance of this text area and i have
466:06 - a few ideas that you might be interested
466:08 - in
466:09 - so let's change the background color of
466:11 - this text area
466:12 - so bg equals and i will pick
466:15 - light yellow and you will see why in
466:17 - just a second
466:19 - so now this text area kind of resembles
466:22 - maybe a piece of paper
466:23 - a notebook a post-it note however
466:27 - this font is really small so let's
466:30 - change the font
466:31 - styling and the font size so
466:35 - font equals and i will pick the font
466:39 - ink free this somewhat resembles
466:42 - handwriting so
466:43 - i kind of like this and it kind of fits
466:45 - our notebook theme
466:46 - and then a size maybe 25. one thing you
466:49 - should know
466:50 - the text area size corresponds directly
466:53 - with
466:53 - the font size so 25 is a fairly
466:57 - large font so if we were to compile this
467:00 - and run this
467:01 - the size of our text area is now massive
467:05 - because it corresponds directly with the
467:07 - font size
467:08 - so we might want to limit the width and
467:10 - the height
467:11 - so the height is the amount of
467:14 - characters that this is tall
467:16 - so let's say 8 and the width is the
467:19 - amount of characters
467:20 - that this is long and let's say 20.
467:24 - and now this should be much smaller and
467:27 - it kind of resembles a post-it note
467:28 - which is kind of cool let's also change
467:31 - the amount of padding that we have
467:34 - we can do that with pad x and pad y so
467:36 - pad x
467:37 - let's say 20 and pad
467:40 - y also 20. so the text shouldn't
467:43 - actually touch any of the borders
467:47 - this is some sample
467:50 - text cool let's finish this by changing
467:54 - the font color so that is
467:56 - fg for foreground foreground equals
467:59 - and i'll pick purple because purple is a
468:02 - pretty color
468:03 - and let's run this one last time
468:07 - roses are red
468:10 - violets are blue
468:14 - booty booty booty booty
468:19 - rockin everywhere
468:25 - well that's the basics of the text
468:27 - widget in python if you would like a
468:29 - copy of all this code
468:30 - i'll post all of this in the comments
468:32 - down below but yeah that's the basics of
468:34 - the text widget in python
468:37 - hey what's going on everybody it's your
468:39 - bro here hope you're doing well and in
468:41 - this video i'm going to teach you guys
468:42 - how we can use a file dialog
468:44 - in python to open and read the contents
468:46 - of a file so sit back
468:47 - relax and enjoy the show
468:51 - okay people so this is how you can use
468:54 - file dialog
468:55 - to open and read the contents of a file
468:57 - but first we'll need a second import
468:59 - along with this import at the top
469:01 - so what we're going to be importing is
469:03 - from tk
469:05 - enter import file
469:08 - dialog and then we'll need a window
469:11 - like what we usually do so window equals
469:15 - tk followed by window dot
469:18 - main loop now we'll need a button that
469:21 - we're going to add to the window and
469:22 - when we click on this button
469:23 - it's going to launch our file dialog so
469:26 - we can select a file
469:27 - so we'll call this button button equals
469:30 - button
469:31 - let's set some text maybe to just open
469:34 - like we're opening a file and we'll
469:36 - associate a function to our command
469:39 - for this button so let's create a
469:41 - function called
469:43 - open file that's fine and then we need
469:46 - to
469:47 - pack this button so we can add it to the
469:49 - screen so button.pack
469:51 - now we need to create a function called
469:53 - open file and we'll do this before we
469:55 - create our window let's type
469:57 - def open file
470:00 - and when we call this function we're
470:03 - going to
470:04 - take file dialog and use the
470:07 - ask open file name function
470:11 - so this is going to return a string
470:14 - and that string is the file path of
470:16 - where your file is located
470:18 - so what we could do is store this within
470:21 - a variable
470:22 - so let's store this within a variable
470:24 - called file path
470:26 - and to test this let's just print this
470:29 - just to take a look at the contents of
470:31 - this variable
470:32 - so let's just print the file path now i
470:35 - have a file on my desktop that i want to
470:37 - use called test file
470:39 - so let's click the open button and this
470:42 - might not necessarily bring you to your
470:44 - desktop it might bring you someplace
470:45 - else within your
470:46 - file directory so this just happens to
470:49 - be
470:50 - bring me to my desktop so i'm going to
470:52 - click the test file that i have and
470:54 - click
470:54 - open so this prints the file path
470:57 - so it's going to return a string and
471:00 - it's the file path basically
471:02 - so now we want to open and read the
471:04 - contents of this file
471:05 - so we don't really need this print line
471:07 - anymore so
471:09 - what we'll do is create a file
471:12 - variable and we're going to use open
471:16 - we're going to list the file path and
471:18 - then we're going to use
471:20 - r for read so the default is normally rt
471:23 - for read text otherwise you can read
471:25 - binary uh but we can just set this to r
471:28 - r is the same as rt basically uh so then
471:30 - we're going to open this file
471:32 - and then we're going to read it so let's
471:35 - just print this to the console window
471:37 - so print the name of the file which is
471:41 - file
471:41 - where this is located file dot
471:45 - read function and then it's a good idea
471:47 - to close your files
471:49 - after you're done with them so file dot
471:51 - close
471:52 - and let's test this so i'm going to
471:55 - click
471:56 - open find the file that i want
472:00 - click it and then open
472:05 - and that text file says my name is bro i
472:07 - like pizza
472:08 - now let's say you want to make this a
472:10 - little more advanced so what i'm going
472:12 - to do
472:12 - is that i'm going to set the initial
472:14 - directory of where we begin
472:16 - looking for a file when we launch our
472:18 - file dialog
472:19 - so with that test file i'm going to move
472:21 - this to my project folder so i'm just
472:23 - going to paste it
472:26 - so now this is within my project folder
472:28 - now i'm going to set the initial
472:30 - directory within
472:31 - the function of ask open file name
472:35 - so we're going to set the initial d
472:38 - i r for initial directory and then we
472:40 - can list a file path
472:42 - so one thing you could do i want to get
472:45 - this
472:46 - path here this file path so if you're
472:47 - using pycharm what you could do is right
472:49 - click this
472:50 - copy path and then get the absolute path
472:53 - and then i'm just going to paste this
472:55 - and then uh with these backslashes
472:58 - you'll have to do double backslashes
472:59 - because
473:00 - this is the escape character for a
473:02 - backslash
473:04 - alright so this should open my project
473:06 - folder
473:08 - which it does and here's that test file
473:12 - another thing we could do is that we can
473:13 - change the title of our file dialog
473:16 - right now the default is just open so we
473:18 - can change that to something else
473:20 - so i'm going to add a comma maybe put
473:22 - this on a different line
473:24 - uh so this is still within the function
473:27 - of ask open file name
473:28 - so i'm going to set the title to
473:30 - something else i'll say
473:32 - open file
473:35 - okay so if we were to run this again
473:40 - instead of just saying open it says open
473:43 - file okay and we can also limit the
473:46 - file types that we accept and look for
473:49 - so we can use file types
473:55 - so let's say that we want to initially
473:57 - look for a
473:58 - txt file so what we'll do is type in
474:04 - like a name for the file that we're
474:06 - looking for so this is what's going to
474:07 - appear to the user
474:09 - uh text files followed by an extension
474:12 - so we want asterisk
474:16 - dot txt
474:19 - and then we can also have an option for
474:21 - all files
474:22 - so i'm going to add a comma for a second
474:24 - option
474:26 - and then let's say all
474:29 - files and then an extension so comma
474:34 - asterisk dot asterisk this will look for
474:37 - all files
474:38 - uh but i think i am missing a
474:40 - parenthesis
474:42 - there that should be good so then when
474:44 - we open our file dialog
474:47 - it's going to initially be looking for
474:49 - plain text files
474:50 - and with this drop down menu it says
474:52 - text files and
474:54 - all files so that's what we have listed
474:56 - within our file types of what we want to
474:58 - search for
475:00 - so you can see that if i switch to all
475:02 - files
475:03 - our python file actually appears because
475:06 - we don't have any limits on the files
475:08 - that we're trying to open or search for
475:10 - so if i change this back to text files
475:13 - only folders and
475:14 - plain text files are visible so then we
475:16 - can open our test file again
475:19 - but yeah that's the basics of file
475:22 - dialog in the next video we're going to
475:23 - be saving
475:24 - a file so if you'd like a copy of all
475:26 - this code i'll post
475:28 - all of this in the comments down below
475:29 - but yeah that's the basics of opening a
475:31 - file
475:32 - using python hey what's going on
475:34 - everybody it's your bro here hope you're
475:36 - doing well and in this video i'm going
475:37 - to teach you guys how we can use
475:39 - python's file dialog to save a file
475:42 - someplace on your computer
475:43 - so sit back relax and enjoy the show
475:48 - okay everybody so this is how we can
475:50 - save a file
475:52 - we're going to be reusing a file dialog
475:54 - again kind of like what we did with the
475:56 - video on opening and reading a file so
475:59 - from
476:00 - tk enter import file dialog we're going
476:03 - to be creating a window and adding a
476:05 - button as well as a text area to this
476:07 - window
476:08 - so let's create our window window equals
476:10 - tk
476:11 - followed by window.main loop
476:15 - let's create a button so button equals
476:18 - button
476:19 - let's set the text of the button so text
476:22 - equals
476:22 - save it's going to be a save button and
476:25 - then a command
476:26 - so we'll need to link a function to this
476:28 - command so let's create a
476:30 - save file function and then we need to
476:34 - pack
476:34 - this button so button dot pack
476:38 - now let's create a text area this is
476:40 - just called
476:41 - text so text equals text we're going to
476:44 - add this to the window
476:46 - and we need to pack this text so text
476:49 - dot pack and now let's create
476:52 - a save file function so at the top of
476:56 - our program
476:57 - d e f save file
477:02 - and then we're going to take file dialog
477:05 - and use the
477:06 - ask save as file function and we're
477:09 - going to store
477:11 - the contents within file file equals
477:14 - file dialog dot ask save as file
477:18 - let's run this just to test it out so we
477:21 - have
477:21 - our window a save button and this
477:25 - is our text area
477:28 - we can type in multiple
477:32 - lines of text
477:35 - yay and let's try and save this just to
477:39 - see what we have so far
477:41 - so this will bring me to my desktop it
477:43 - might bring you someplace else for
477:46 - your computer so i'm just going to save
477:48 - this as
477:50 - test file now with this drop down menu
477:53 - save as type there's nothing set up so
477:56 - we'll need to do that manually
477:58 - uh if we were to save this and here's
478:00 - that test file on my desktop
478:02 - so let's take a look at the properties
478:04 - we did not list a
478:06 - file extension so the type of file just
478:09 - says
478:09 - file so we'll get to that later on in
478:11 - this video
478:12 - and if we were to open this with a
478:14 - program like notepad
478:16 - well it's currently empty that's because
478:18 - we need to write
478:19 - some text to this file so let's do that
478:22 - next
478:23 - let's store all of the text from our
478:26 - text area to a variable
478:28 - let's call this variable file text
478:32 - file text equals and then we need to get
478:35 - all of the text from our text area so
478:38 - text dot get and we're going to list the
478:42 - starting index as well as the ending
478:44 - index
478:45 - for this function so we're going to
478:47 - begin at
478:48 - 1.0 that is the beginning of this text
478:51 - area
478:51 - and the ending we can just put end and
478:54 - then we need to convert
478:55 - all of this into a string so let's
478:57 - surround this with
478:59 - str and then we can store all of the
479:02 - text
479:03 - from our text area within this variable
479:06 - file text and now we just need to write
479:09 - our text to this file so file dot
479:12 - write and we're going to pass in file
479:15 - text
479:16 - and then it's a good idea to close your
479:18 - files when you're done using them so
479:20 - file
479:21 - dot close and let's try this again
479:26 - hello my name
479:30 - is bro let's save this
479:34 - i'll call this hello and click save
479:38 - and we still can't save s-type so we'll
479:40 - work on that next
479:42 - let's go to my desktop here's the test
479:44 - file that we created i'm going to open
479:46 - this with notepad and it has all of the
479:48 - text
479:49 - that we added to that text area now
479:52 - let's list
479:53 - some available file extensions that we
479:55 - can have the user
479:56 - save this file as so let's begin by
479:59 - setting
480:00 - the default extension so default
480:04 - extension and let's set this to
480:07 - a text file that is dot
480:11 - txt and then we can list
480:14 - all of the available file types
480:17 - so file types
480:21 - and we're going to place these within a
480:23 - set of straight brackets
480:25 - and i'll just separate these line by
480:26 - line so let's begin with a plain
480:28 - text file so this will take two strings
480:32 - the first is the message that will
480:36 - appear within
480:37 - that save as type drop down menu so
480:39 - let's place
480:41 - text file and the second string
480:44 - the file extension and that is
480:48 - dot txt
480:51 - then let's add another let's say html
480:54 - so i'm going to copy this and paste it
480:57 - and
480:58 - let's say html next
481:02 - dot html and then lastly you can do
481:06 - just all files so
481:09 - all files and that is dot
481:13 - asterisk and let's try this again
481:17 - so hello my
481:21 - name is bro i
481:25 - like pizza and
481:28 - ice cream and this time i think i'll
481:32 - save this
481:32 - as an html file
481:35 - and this is we'll call this
481:39 - pizza and ice cream i guess
481:43 - and click save now let's go back to my
481:46 - desktop
481:47 - here's that file pizza and ice cream and
481:49 - it is an
481:51 - file let's just verify that yep.html for
481:56 - the type of file
481:57 - so we can open this with notepad
482:01 - and it has all of the text i could even
482:04 - open this with sublime text
482:06 - as well kind of like that
482:11 - all right let's change the initial
482:14 - directory
482:15 - for saving a file let's change it to
482:18 - my project folder for uh this python
482:22 - file that we have
482:23 - so that is and i'm just going to
482:25 - organize this a little bit
482:28 - initial d i r
482:31 - equals and then we can list a file path
482:34 - so i'm just going to copy this
482:37 - so copy path paste it
482:42 - then i want to make sure that these are
482:45 - double backslashes
482:49 - and i need to add a comma at the end
482:52 - okay let's try this again
482:54 - so testing
482:57 - one two three and this should go to my
483:01 - project folder
483:02 - which it does testing123
483:07 - and let's save this as a plain text file
483:10 - click save
483:12 - and here's that plain text file
483:15 - testing123
483:16 - another option available to you is that
483:18 - you don't necessarily need to use
483:20 - a text area to get some text to write to
483:23 - a file
483:24 - you could use the console window to
483:26 - accept some text
483:28 - so to demonstrate this i'm going to turn
483:30 - this line into a comment
483:32 - and we're instead going to use the
483:34 - console window this time
483:36 - so we'll say file text equals
483:40 - input and then let's just have a prompt
483:43 - here
483:44 - enter some text i
483:47 - guess and then let's run this again so
483:50 - we still need to
483:51 - click this save button and select a file
483:54 - location i'll just save over our file
483:57 - testing123 i'll click save
484:00 - yeah i'll replace it alright so we need
484:02 - to enter some text
484:04 - i guess so i will write a message
484:08 - such as the cake
484:12 - is a lie and hit enter
484:16 - so then our file testing123 now says
484:19 - the cake is a lie so you don't
484:21 - necessarily need to use
484:23 - the get function for a text area you can
484:26 - use the console window as well
484:29 - here's one last thing to consider before
484:30 - you go so what if we begin the process
484:33 - of
484:34 - finding a file location to save a file
484:37 - to
484:37 - and then we exit out of this window well
484:40 - we're going to encounter an exception
484:42 - so one way that we can prevent this is
484:45 - to add
484:46 - this line if file is
484:49 - none return
484:52 - so then if we were to try this again
484:56 - begin saving a file and then exit out of
484:58 - this
484:59 - there is no exception that we encounter
485:02 - so that's just one little extra i
485:04 - thought i would throw in
485:05 - but yeah that's the basics of saving
485:07 - files in python if you would like a copy
485:09 - of all this code
485:10 - i'll post all of this in the comments
485:12 - down below but yeah that's how to save a
485:15 - file using python
485:17 - hey what's going on everybody it's your
485:18 - bro here hope you're doing well and in
485:20 - this video i'm going to teach you guys
485:21 - how we can create a menu bar
485:23 - in python so sit back relax and enjoy
485:26 - the show
485:28 - all right people let's create a menu bar
485:31 - not too different from the menu bar that
485:32 - you see at the top of many programs
485:34 - there's usually a tab
485:36 - for file edit view help stuff like that
485:39 - except we're going to create one that
485:41 - doesn't have as many options
485:43 - or features it's going to be the generic
485:45 - brand menu bar like the walmart variety
485:48 - so let's begin by creating a window so
485:50 - window equals tk followed by
485:53 - window.mainloop then we're going to
485:54 - create a menu bar
485:56 - and add menus to the menu bar and each
485:59 - menu is going to function like a
486:01 - dropdown menu where you hover over one
486:03 - of these tabs
486:04 - and there's a drop down so we need a
486:07 - menu bar
486:08 - let's just call this menu bar menu bar
486:10 - equals
486:11 - menu and we're adding this to our window
486:15 - so then we're going to take window dot
486:17 - config
486:18 - and we can set the menu of this window
486:21 - to equal the menu bar that we just
486:24 - created
486:25 - with each of these tabs for your menu
486:26 - bar you need to create a separate menu
486:29 - and add each menu to your menu bar and
486:31 - the menu bar is added to the window
486:33 - there's different levels to the stuff so
486:36 - let's create
486:37 - a file menu because well this one has a
486:40 - file menu
486:40 - why not our program so file
486:44 - menu equals menu
486:47 - kind of like what we did with our menu
486:49 - bar except instead of adding this to our
486:52 - window we're going to add this
486:53 - to our menu bar so menu
486:57 - bar like that there's one other step two
487:02 - we need to use this function menu
487:05 - bar dot add
487:08 - underscore cascade this will have a drop
487:12 - down
487:12 - menu sort of effect so let's create a
487:16 - label
487:16 - just called file to mimic the file tab
487:19 - that you see at the top of many programs
487:21 - so label file and we're going to set the
487:25 - menu
487:26 - to equal the file menu that we created
487:30 - so file menu and let's take a look just
487:33 - to see what we have
487:35 - so here's our menu bar and here's our
487:37 - menu there's a drop down
487:39 - effect for this but we need to add
487:41 - actual options
487:42 - to this file menu so let's do that
487:46 - so let's begin by creating let's see we
487:49 - got
487:50 - maybe open save and exit
487:54 - that should be good so file
487:58 - menu dot add
488:01 - underscore command so this is a
488:03 - clickable option
488:05 - and let's create a label called open
488:08 - and we can open a file and maybe two
488:12 - more so we got open
488:14 - save and exit open save
488:17 - exit
488:21 - and let's take a look at this
488:25 - so here's the drop down menu we can open
488:27 - save exit
488:29 - now you might notice that there is this
488:31 - annoying line
488:32 - this is called a tear off you can
488:34 - actually get rid of this if you want
488:36 - so when we create this file menu we're
488:39 - going to
488:40 - set tear off to equal
488:43 - zero and that should get rid of that
488:47 - and it's gone so sometimes you might see
488:51 - a line to separate sections well
488:54 - you can do that with a separator so
488:57 - let's separate
488:58 - the exit command that we have
489:01 - from open and save and to add that
489:03 - separator we just type in the name of
489:05 - our menu
489:06 - file menu dot add
489:10 - separator so this will separate your
489:14 - different commands from each other
489:16 - within a menu you can see that there is
489:18 - a line between
489:19 - save and exit because we placed a
489:21 - separator here
489:22 - now if you want each of these file
489:24 - commands to actually do something you
489:26 - need to associate
489:27 - a command with each of these commands
489:30 - it's a command within a command
489:32 - so command equals for our open file
489:35 - command
489:36 - we'll create a function called open file
489:40 - and we'll need to declare that function
489:42 - and then let's create a command called
489:45 - save file and then another called
489:48 - exit actually one shortcut if you want
489:51 - to exit something you can just say
489:53 - quit all right let's create an
489:56 - open file and a save file function so
489:59 - def open file
490:03 - let's just print something just to keep
490:05 - this simple
490:07 - i already have another video on opening
490:09 - files so
490:11 - print file has
490:14 - been opened and let's do the same thing
490:18 - for
490:18 - save file
490:25 - file has been saved
490:28 - and then our last command exit we'll
490:30 - just quit
490:31 - so let's try this so let's go to file
490:34 - here's the drop down menu we can
490:36 - open a file file has been opened we can
490:39 - save a file
490:41 - and then exit and exit will close out of
490:43 - our window
490:44 - let's create a second menu called edit
490:46 - to mimic the one that we have at the top
490:48 - of our ide
490:49 - so let's create a edit menu so it's the
490:52 - same process that we did with our file
490:54 - menu
490:55 - so let's call this edit menu equals menu
490:59 - we're adding this to our menu bar and i
491:02 - do not want a tear
491:03 - off so tear off equals zero then for the
491:07 - next line we need to add
491:09 - cascade so i'm going to copy this
491:12 - menu bar dot add cascade the label name
491:15 - will be edit and the file i mean the
491:18 - menu
491:19 - will be edit menu and we're setting
491:22 - this menu that we're adding to edit menu
491:26 - and let's try this so we have file and
491:28 - edit
491:29 - but we need to add commands to this edit
491:31 - menu
491:32 - so it's the same process that we did
491:34 - with our file menu i'm just going to
491:35 - copy this
491:36 - change file to edit and let's
491:40 - make a command called cut copy and paste
491:44 - so the label will be cut we'll create a
491:48 - command called
491:49 - cut we'll copy this
491:54 - and we'll create a another command
491:56 - called
491:58 - copy and then paste
492:08 - all right then we just need to create
492:10 - some functions for this so cut
492:11 - copy paste let's do that at the top
492:18 - so cut
492:24 - you cut some text
492:29 - so cut copy and then paste
492:35 - you copied some text
492:38 - and paste you
492:42 - pasted some text
492:45 - all right let's try this so here's our
492:47 - edit menu
492:49 - here's the drop down we can cut we can
492:51 - copy
492:52 - and we can paste not actually but it's
492:55 - going to call a function that can
492:57 - do something like that if you want to
492:59 - set that up maybe that's a video for a
493:01 - different day
493:02 - let's customize these menus well because
493:04 - we can
493:05 - so let's begin by changing the font so
493:08 - we can just type in
493:09 - within each of these menus font equals
493:12 - pick a font that you want and then a
493:14 - size so i'm going to add this font
493:16 - for both of these menus that we have and
493:19 - then when we
493:20 - hover over and click on these menus you
493:23 - can see that the font has changed
493:25 - did you guys know that you can actually
493:27 - add images next to each of these
493:28 - commands
493:29 - well you can and this is how we can do
493:31 - that first you'll need some images
493:33 - here's a few that i'm using so add these
493:35 - to your project folder i plan on using a
493:38 - floppy disk for save
493:39 - and open folder for open and for some
493:42 - reason a stop sign for exit because i
493:44 - couldn't really think of anything at the
493:46 - moment
493:46 - i guess an arrow would have worked too i
493:48 - guess so let's create some photo images
493:50 - out of these images
493:53 - so i already did this i'm just going to
493:54 - copy and paste the text that i had
493:57 - so create a unique name for each image i
494:00 - have
494:00 - open image save image and exit image
494:03 - they're all
494:04 - photo images and here is the file path
494:07 - or the file name for each of these
494:09 - pictures that i'm using so to add an
494:12 - image
494:12 - to each of these commands when you add
494:14 - the command we can just say
494:16 - image and then the photo image that you
494:18 - want to use
494:19 - so with my open command i'm going to use
494:22 - this
494:22 - open image photo image that i have and
494:25 - this is the
494:26 - open folder so i'm going to do the same
494:28 - thing for save
494:29 - and exit so we have save image
494:33 - and exit image
494:38 - but when we run and compile this let's
494:40 - take a look
494:42 - yeah so all the text is gone that's
494:44 - going to be a problem
494:46 - so we'll need to compound views so with
494:48 - compound we can add
494:50 - an image on a certain side of the text
494:53 - and keep the text so compound
494:56 - let's say we want the image on the left
494:59 - so
495:00 - compound left and i'm just going to add
495:02 - this to each of these commands
495:06 - and now we should have an image as well
495:09 - as some text
495:11 - well that's the basics of creating a
495:13 - menu bar in python if you want a copy of
495:15 - all this code
495:16 - i'll post all of this in the comments
495:18 - down below but yeah that's how you can
495:19 - create a simple
495:20 - menu bar in python what's going on
495:24 - everybody it's bro here hope you're
495:25 - doing well and in this video i'm going
495:27 - to teach you guys how
495:28 - frames work in python so sit back relax
495:31 - and enjoy the show
495:34 - what's going on people we're going to be
495:36 - discussing frames today
495:38 - a frame is really just a rectangular
495:40 - container to group and hold widgets
495:42 - together
495:43 - so we're going to practice using frames
495:45 - today but first we'll need a window
495:47 - we're going to create a frame and add a
495:49 - frame to the window
495:51 - so window equals tk followed by
495:54 - window.main loop
495:56 - well we're going to need some widgets to
495:58 - add to our frame
495:59 - so let's create a bunch of buttons
496:01 - because why not
496:03 - so i'm going to show you guys a shortcut
496:05 - too so let's say
496:06 - button equals button
496:10 - and then for now we're going to add this
496:12 - to our window but we're going to replace
496:14 - this eventually with
496:16 - frame when we create this and i'm just
496:18 - going to set the text
496:20 - to equal let's say w
496:23 - we're going to have four different
496:24 - buttons wasd
496:26 - like the buttons on the keyboard if
496:28 - you're playing a game and you want to
496:29 - move forward
496:30 - left back or right so we're adding this
496:33 - to the window
496:34 - for now let's set the text to w
496:38 - and what else can we do uh let's change
496:40 - the font so font
496:41 - equals i'll pick the font consoles
496:45 - because
496:46 - that tends to be even uh with buttons
496:50 - the size of the button adjusts to uh the
496:52 - size of the
496:54 - uh letter that you're using or the size
496:56 - of the text
496:57 - uh so let's set this to 25
497:00 - and then a width so maybe
497:04 - width equals three all right and then
497:07 - button.pack and i just want to take a
497:10 - look at this
497:14 - so here's our button w so i'd like to
497:16 - show you guys a
497:17 - shortcut if you don't plan on using this
497:20 - button by name
497:22 - you don't really need to give it a name
497:23 - you can just say button
497:25 - and then have all your uh options here
497:28 - and then instead of having button.pack
497:31 - just add
497:32 - dot pack to the end so this will do the
497:34 - same thing
497:35 - however you can't adjust this button by
497:38 - its name though because it doesn't have
497:39 - a name anymore
497:40 - so let's create a few other buttons one
497:42 - for a s
497:44 - and d so we have w
497:47 - a s d
497:52 - and by default they're all top and
497:55 - center
497:56 - so with pack we can actually put these
497:59 - on a certain side
498:00 - so let's say we want uh w on the top
498:04 - and then the other three will be all
498:07 - left
498:07 - so side equals left and then after i
498:11 - show this to you
498:12 - you'll see the benefits of using a frame
498:15 - all right so right now they're all at
498:18 - least it appears that they're all within
498:19 - a container
498:20 - so what if i were to expand this well w
498:23 - is just drifting off
498:24 - it's sailing away by w so
498:27 - what if we could put these within a
498:29 - frame or container
498:30 - to actually contain all of these widgets
498:33 - well we can
498:34 - so let's create a frame frame
498:38 - equals frame
498:41 - and instead of adding these buttons to
498:43 - the window we're going to add
498:44 - these buttons to our frame
498:51 - and now we need to add the frame to the
498:54 - window
498:56 - and this is what this looks like however
498:59 - we need to
499:00 - actually add this by using pack or place
499:03 - so frame
499:04 - dot pack so now what this looks
499:08 - like is that all of these buttons all of
499:10 - these widgets are now contained within a
499:12 - frame
499:13 - a container let's change the background
499:16 - color of this frame just so that we can
499:17 - see
499:18 - the width and the height of this frame
499:20 - so
499:21 - when you create your frame there is an
499:24 - option for background color it's just bg
499:27 - and let's set this to a color we haven't
499:29 - done pink yet
499:30 - pink is a very masculine color so now
499:33 - the background of our frame is pink and
499:36 - that might be
499:37 - a better visual cue to the balance of
499:40 - the frame
499:41 - let's also give this frame a border so
499:43 - let's
499:44 - set a width of 5 using bd
499:47 - and then the type of border that we want
499:50 - and we can
499:51 - specify that with relief so relief
499:53 - equals
499:54 - let's say raised so this will have a 3d
499:57 - pop effect
499:58 - kind of like that let's try sunken
500:00 - there's a few other ones as well but i
500:02 - don't feel like it's necessary to
500:04 - go over all the border types let's stick
500:07 - with sunken for now that'll work
500:09 - alright so with this frame we are
500:12 - currently packing this
500:13 - we can set this on a certain side within
500:16 - our window
500:17 - so currently it's at the top let's set
500:19 - this to maybe the bottom so
500:21 - side equals bottom
500:25 - now this frame is sticking to the bottom
500:28 - of the window
500:29 - and it still contains all of the buttons
500:31 - all of the widgets
500:32 - that we added another function available
500:34 - to you is
500:35 - the place function we can place this
500:38 - frame
500:38 - at certain coordinates within our window
500:41 - so let's set
500:43 - x to equal zero and y to equal zero
500:46 - so then when we place this frame within
500:48 - our window and set some coordinates
500:51 - this entire frame is going to stick at
500:54 - these coordinates even if we were to
500:56 - resize this window and we can change
500:59 - these too
501:00 - let's say x is now 100 and y is also 100
501:05 - so the frame along with all of the
501:08 - components all of the widgets that it
501:10 - contains
501:11 - are sticking within the container and
501:13 - they move along with this
501:15 - so that's the basics of frames it's
501:17 - really just a rectangular container to
501:19 - group and hold widgets together
501:22 - so if you want a copy of all this code
501:24 - i'll post all of this in the comments
501:25 - down below
501:26 - and well yeah that's how frames work in
501:29 - python
501:30 - hey what's going on everybody it's your
501:32 - bro here hope you're doing well and in
501:33 - this video i'm going to teach you guys a
501:35 - few different ways in which we can
501:36 - create new windows using python so sit
501:38 - back relax and enjoy the show
501:42 - let's get started everybody so we're
501:44 - going to create a window and we'll add a
501:45 - button to this window
501:46 - when we click on this button it'll
501:48 - create a new separate window for us
501:50 - so window equals tk followed by
501:52 - window.main loop
501:54 - we'll need to add a button so let's do
501:55 - that button we're adding this to the
501:57 - window
501:58 - let's add some text to the button let's
502:00 - say create
502:02 - new window and we'll set a command
502:06 - command equals and we'll need to define
502:08 - a function
502:09 - let's create a function called create
502:12 - underscore window
502:14 - and let's pack this as well so we will
502:16 - define
502:17 - this function create window and let's do
502:19 - so at the top
502:21 - def create window and what do we want
502:23 - this to do
502:24 - well we're going to create a new window
502:26 - and let's call this next window
502:28 - new underscore window equals and there's
502:31 - two popular ways of creating a window
502:33 - one is we can use tk and the other is
502:36 - that we can use
502:37 - something called top level and let me
502:40 - explain the difference between the two
502:41 - here's a definition for a top level
502:43 - window this is a
502:45 - new window on top of other windows
502:48 - and it's usually linked to a bottom
502:51 - window
502:52 - our main window is serving as the bottom
502:54 - window
502:55 - and our new window is serving as the top
502:57 - window the top level window
503:00 - so let's try this and just experiment
503:02 - here is our main window
503:03 - the bottom window and if we were to
503:05 - click on this button it's going to
503:07 - create a
503:08 - new window for us a new top level window
503:11 - if we were to close out of the bottom
503:13 - level window
503:14 - any top level windows associated with
503:17 - this would also close
503:18 - kind of like what you just saw now
503:20 - however it's not the same case
503:22 - the other way around if we have a bottom
503:25 - window and a top level window
503:26 - and we close out of the top level window
503:29 - our bottom level window
503:31 - is just fine it didn't close out of that
503:33 - so think of these like
503:34 - jenga pieces if you were to pull one of
503:37 - the pieces
503:38 - one of the windows out from underneath
503:40 - the bottom any
503:41 - pieces or windows on the top of it will
503:44 - close out as well
503:45 - or collapse kind of like in the game
503:46 - jenga so
503:48 - that's one way to think of top level
503:50 - windows they're stacked on top of any
503:52 - bottom level windows
503:53 - if you remove a bottom piece it removes
503:55 - any from the top
503:56 - on the flip side we have tk this is a
503:59 - new independent window and we've
504:01 - actually been doing this since
504:03 - day one of our gui programming tk is a
504:06 - new independent window and our main
504:09 - window and the new window that we create
504:10 - are not linked whatsoever they're
504:12 - completely independent
504:13 - so if we were to create a new window
504:16 - this is our new window and close out of
504:17 - our old window
504:18 - well this new window still persists so
504:21 - this could be useful for
504:22 - let's say a login form or a login screen
504:25 - after you log in you'll be brought to
504:26 - your main program which could be within
504:28 - the new window
504:29 - one other thing that you can do too you
504:31 - can also destroy the old window after
504:33 - creating a new window
504:35 - so we need to type in the name of the
504:37 - window that we want to destroy
504:39 - actually let's call the main window just
504:41 - old underscore window just to clarify
504:43 - things
504:44 - so let's rename that here here and here
504:47 - as well
504:48 - so we want to destroy our old window as
504:51 - if we're closing out of it
504:52 - so we type in the name of the window old
504:55 - underscore window
504:56 - and we use the destroy function and that
504:58 - sounds pretty sweet
505:00 - so we're going to destroy our old window
505:02 - after creating
505:03 - our new window so let me add a comment
505:05 - that this will
505:06 - close out of old window
505:10 - and let's test it so we have our old
505:13 - window
505:14 - our main window we'll create a new
505:16 - window it creates our new window and
505:18 - then closes out of the old window
505:20 - so that's one of a few ways in which you
505:22 - can create a new window for your program
505:24 - so if you want to copy of all this code
505:26 - i'll post all of this in the comments
505:28 - down below
505:28 - but yeah that's how to create a new
505:30 - window using python
505:32 - hey what's going on everybody too bro
505:34 - here hope you're doing well and in this
505:36 - video i'm going to teach you guys how we
505:37 - can create separate tabs for our gui
505:39 - applications in python so
505:41 - sit back relax and enjoy the show
505:45 - okay let's begin so in order to create
505:47 - tabs for our python gui application
505:50 - we're going to need access to a widget
505:52 - called notebook
505:53 - and that's found in a different module
505:56 - so this time we're going to need
505:57 - two imports so at the top from tk enter
506:00 - import
506:01 - just everything but the notebook widget
506:03 - is found within a separate module
506:05 - so we'll need a second import from tk
506:09 - enter
506:10 - import ttk so this ttk import
506:14 - gives us access to several different
506:16 - widgets that are normally not available
506:18 - to us
506:18 - so once you have these two imports
506:20 - you're ready to begin so we'll need a
506:22 - window
506:23 - window equals tk followed by window.main
506:26 - loop
506:26 - and we need to create a notebook widget
506:29 - so
506:30 - right after you create your window we're
506:31 - going to create a notebook
506:33 - we'll call this notebook equals ttk
506:37 - dot notebook and we want to add
506:40 - this notebook to our window so let me
506:43 - add a comment here what this widget does
506:45 - so this is a widget that manages
506:49 - a collection of windows
506:52 - and displays and that's really all there
506:55 - is to it
506:56 - so in order to create different tabs
506:58 - we're going to create some frames
507:00 - so for the first tab i'll call this tab
507:02 - 1 equals frame
507:04 - and we want to add this to the notebook
507:08 - and with our notebook we're adding this
507:10 - notebook to the window
507:12 - all right so this will be a new frame
507:16 - for tab one and let's create a second
507:19 - tab
507:19 - and we'll call this tab two and you can
507:22 - create more tabs if you want but that
507:24 - might be overkill
507:25 - so this is a new frame for tab two
507:28 - after you finish these two lines of code
507:30 - we're going to follow this up with
507:32 - notebook.ad so notebook.ad
507:36 - what widget are we adding we're adding
507:39 - our tab
507:39 - 1 frame and we can set some text for
507:43 - this tab so text equals and i'll type in
507:46 - tab one and we'll repeat the process for
507:49 - tab two
507:51 - so notebook dot add tab two
507:54 - and we'll change the text to tab two and
507:57 - then we need to
507:58 - pack this notebook notebook dot pack
508:02 - and let's take a look to see what we
508:04 - have all right we have
508:06 - tab one and tab two but we'll probably
508:09 - want to actually add something
508:11 - to each of these tabs so that the
508:13 - content is visible so let's create some
508:15 - labels
508:15 - so after we pack our notebook let's
508:18 - create some labels
508:19 - i don't really feel like giving these
508:21 - names because we don't really plan on
508:22 - using them for anything else
508:24 - so we'll just say label tab
508:27 - one that's going to be the parent widget
508:30 - and let's set some text text equals
508:33 - hello this is tab
508:36 - number one then i think i'll give this a
508:40 - width and a height too
508:41 - just so it's more visible so for the
508:44 - width i'll make this 50
508:45 - and the height 25 so this will be
508:48 - roughly a square shape
508:51 - and then we need to pack this so i'm
508:52 - just going to add pack
508:55 - and let's create a second label for tab
508:57 - two
508:58 - so label tab two maybe i'll say
509:02 - goodbye this is tab number two
509:05 - okay we should have some actual content
509:08 - for these labels now for these tabs
509:10 - so here's the label this is tab one and
509:13 - this is tab two and you can switch
509:15 - between these and they display
509:16 - each of these separate labels however
509:19 - with the way that this window is
509:20 - arranged
509:21 - if we were to expand the size of this
509:23 - window well
509:25 - our frames and our tabs kind of stay in
509:27 - the top
509:28 - and in the center so i'm going to add a
509:30 - few lines within
509:32 - the pack function of our notebook the
509:34 - first thing i'm going to do
509:35 - is use the expand option and set this to
509:38 - true
509:40 - so what this does and i'm just going to
509:41 - add a comment that expand
509:44 - this will expand
509:47 - to fill any space
509:50 - not otherwise
509:53 - used so what happens now
509:57 - is that this will actually expand
510:00 - and it's staying in the center of the
510:02 - window but there's one more thing we're
510:04 - going to add
510:05 - fill equals both
510:08 - normally this is x or y or you can do
510:11 - both
510:12 - so i'll add a comment as to what this
510:14 - option does
510:16 - so fill will fill
510:19 - space on x and
510:22 - y axis so if you combine
510:26 - both of these together what you get is
510:28 - that these tabs will stay
510:30 - in the top left corner and if you were
510:32 - to expand the size of this window
510:34 - the tabs aren't going to move they're
510:36 - going to stick to the top left
510:38 - but the size of the window will expand
510:41 - all right so that's the basics of
510:42 - creating tabs in python if you want a
510:44 - copy of all this code
510:45 - i'll post all of this in the comments
510:47 - down below but yeah that's the basics of
510:49 - creating tabs in python
510:52 - hey what's going on everybody it's your
510:54 - bro here hope you're doing well and in
510:56 - this video i'm going to teach you guys
510:57 - all about the grid geometry manager in
510:59 - python so sit back relax and enjoy the
511:02 - show
511:04 - all right everybody let's talk about the
511:06 - grid geometry manager
511:07 - well because we have to this is a useful
511:10 - way to organize widgets within a
511:12 - container
511:12 - imagine our windows being arranged into
511:14 - a series of
511:16 - rows and columns similar to an excel
511:18 - spreadsheet
511:19 - i tend to use that example a lot the top
511:21 - left most cell
511:22 - is row zero column zero computers always
511:25 - begin with zero so that's why our grid
511:27 - doesn't begin with
511:28 - row one column one and we can list which
511:31 - row and column
511:32 - we would like our widgets to be placed
511:34 - within and by default we only have
511:36 - one row and one column to work with at
511:38 - the start but we can explicitly state
511:41 - which row and column this widget should
511:43 - be placed within
511:44 - relative to the container that it's in
511:46 - and python will create new relative rows
511:48 - and columns for us if we state where
511:50 - these widgets
511:50 - should be placed so let's create a small
511:53 - submission form
511:54 - and then organize all of our widgets
511:55 - using our new grid system that we have
511:58 - so let's begin by creating a window
512:00 - window equals tk
512:01 - followed by window.mainloop now that we
512:04 - have our window we'll need to create
512:05 - some widgets to add to this window
512:07 - so let's say that we want an entry box
512:10 - and a label for a first name last name
512:12 - and email address as well as a submit
512:15 - button
512:15 - so let's create a label and an entry box
512:18 - for a first name just to demonstrate
512:20 - this
512:21 - so let's call this label first name
512:24 - label equals label we're adding this to
512:27 - the window
512:27 - and let's set the text to first
512:31 - name for now i'm just going to use that
512:34 - pack to demonstrate the differences
512:36 - between
512:36 - pack and grid and let's create an entry
512:40 - box
512:41 - let's call this first name
512:45 - entry equals entry
512:48 - we are adding this to the window and for
512:51 - now we're just going to
512:52 - pack this and let's take a look
512:57 - so here's our label on the top it says
512:59 - first name and then it has
513:01 - our entry box right underneath so what
513:03 - if we want to have
513:05 - this label on the left hand side and our
513:08 - entry box on the right hand side of the
513:09 - label
513:10 - we're better off using the grid geometry
513:13 - manager
513:14 - so we're going to replace pack with grid
513:21 - and we have to set which row and column
513:23 - that we want each of these widgets to be
513:24 - placed within
513:26 - normally if you use the pack geometry
513:29 - manager
513:29 - as you create new widgets they're just
513:31 - going to be placed directly underneath
513:33 - in one long column so
513:36 - let's say that for our name label we
513:39 - want to place this where
513:41 - the row is zero and the column is zero
513:43 - that's the top left corner
513:45 - so within the grid geometry manager when
513:48 - we call it
513:49 - we're going to set row to equal zero as
513:52 - well as column
513:53 - to equal zero and then for the first
513:56 - name
513:56 - entry we want this to be on the right
513:58 - hand side of our label
514:00 - so we'll place this within the same row
514:03 - row
514:03 - equals zero but in a different column
514:06 - column
514:07 - equals one so column one is directly to
514:10 - the right of column zero
514:12 - and then when we compile and run this we
514:14 - now have our entry box
514:16 - to the right of our label that we have
514:18 - so let's repeat the process
514:19 - for a last name an email address and
514:22 - then a submit button
514:23 - so i'm just going to copy what we have
514:25 - here and change first name to
514:27 - last name so last name label
514:31 - and we'll change the text to last name
514:35 - last name entry and we'll keep that the
514:38 - same
514:39 - now we want this last name label to be
514:42 - underneath
514:43 - the first name label because right now
514:45 - they're going to overlap because we have
514:47 - them in the same
514:48 - row and columns so you can see that we
514:50 - can no longer see
514:51 - the first name label or the first name
514:53 - entry
514:54 - so let's place this directly underneath
514:56 - we're going to put these underneath by
514:58 - one row
514:59 - so we'll keep the columns the same but
515:01 - we're going to
515:02 - put this underneath by one row so row
515:05 - one
515:05 - and row one for the last name entry and
515:08 - what you get is that
515:10 - these two labels and entry boxes are
515:12 - arranged neatly into
515:14 - rows and columns and let's do the same
515:16 - thing for an email
515:18 - so i'm going to copy what we have and
515:20 - we're going to change
515:22 - last name to email so
515:25 - email label and email entry and then
515:28 - change
515:28 - for the text last name to just email
515:31 - and we're going to place these where row
515:34 - equals 2
515:35 - and we'll keep the column the same and
515:37 - for email entry
515:39 - row 2 column one
515:43 - so doesn't that look a lot better now
515:45 - let's create a submit button
515:48 - so let's call this submit button
515:52 - equals button and then we're adding this
515:54 - to the window
515:56 - and we should set some text text equals
515:59 - submit i guess dot grid
516:03 - and we want to place this underneath
516:06 - currently kind of just shoves it
516:07 - underneath for now
516:08 - let's say that we want this between
516:11 - these two columns
516:13 - so we'll want to set the row and the
516:15 - column to begin with
516:17 - row is going to equal three
516:20 - and column we'll set this equal to zero
516:22 - for now
516:23 - there isn't going to be any apparent
516:24 - change it's still going to be in the
516:26 - same place
516:27 - but one thing that we can do is use an
516:29 - option called column
516:30 - span we can have a widget take up more
516:32 - than one column
516:34 - and it's going to place this widget in
516:36 - between both of these columns
516:38 - in between the combined width of both of
516:40 - them
516:41 - so we'll add column span
516:44 - equals two so this widget is going to
516:47 - take up
516:48 - the next two available columns including
516:50 - the one that it's currently in and you
516:52 - can see that our submit button
516:54 - is now between these two columns that we
516:56 - have
516:57 - one thing that you should know is that
516:59 - the column width is dependent on the
517:01 - width
517:01 - of the largest widget that is contained
517:03 - within that particular column
517:05 - let's say that we increase the width of
517:07 - our first name
517:08 - label well our column is going to expand
517:11 - to actually fit
517:12 - that widget that we have so for our
517:14 - first name label
517:15 - let's set the width to maybe 20
517:19 - and this is going to increase the width
517:22 - of column 0
517:23 - and to even better demonstrate this
517:25 - let's color
517:26 - each label a certain color just for a
517:28 - visual
517:29 - for our first name label let's say this
517:31 - is red and then for
517:34 - our last name label let's set this to
517:36 - green
517:38 - and then for email maybe blue
517:46 - now all of these are color coordinated
517:48 - and you can see that
517:49 - the background color of our first name
517:51 - label
517:52 - is taking up the entire column space now
517:55 - what if we changed the size of our
517:58 - email label to something even larger
518:00 - like 30
518:01 - so width equals 30.
518:06 - and now the column 0 has expanded to
518:09 - accommodate the size of our largest
518:11 - widget which is our email
518:13 - which has a width of 30 and before we
518:15 - finish this video let's add a
518:17 - title to the submission form right on
518:19 - top of the first name label and the
518:22 - entry label so let's call this title
518:25 - label equals label writing this to the
518:28 - window
518:28 - let's set some text let's say enter
518:32 - your info and let's pick font
518:36 - font equals
518:40 - what am i feeling like today maybe just
518:42 - arial
518:43 - and then a size maybe 25 we're going to
518:46 - use the
518:47 - grid geometry manager
518:50 - and we want this at the top so we want
518:53 - row zero at least
518:55 - i want this to take up two columns so
518:57 - we'll say column
518:59 - equals zero and then set a column span
519:02 - column span equals two
519:05 - now a few things are going to overlap
519:07 - here
519:09 - so we're going to move everything down
519:11 - by one row
519:13 - besides our title label so we want
519:16 - this first name label to be directly
519:18 - underneath our title label
519:20 - so let's move everything down by one row
519:32 - and our title is going to be directly on
519:34 - top of our first name label as well as
519:37 - the first name
519:38 - entry box that we have all right so
519:40 - that's the very basics of the grid
519:42 - geometry manager
519:43 - if you want a copy of all this code i'll
519:45 - post all of this in the comments down
519:47 - below
519:47 - but yeah that's the basics of the grid
519:49 - geometry manager
519:50 - in python hey what's going on everybody
519:53 - it's your bro here hope you're doing
519:55 - well and in this video i'm going to
519:56 - teach you guys how we can create a
519:57 - progress bar in python so
519:59 - sit back relax and enjoy the show
520:03 - okay let's create a progress bar but
520:05 - we'll need a few imports to begin
520:07 - the progress bar widget is found within
520:09 - that ttk module so we'll need a separate
520:12 - import from that
520:13 - from tk enter dot ttk
520:16 - import everything and we'll import
520:19 - everything from time as well let's
520:22 - create a window
520:23 - window equals tk followed by
520:25 - window.mainloop
520:26 - we're going to add a progress bar and a
520:28 - button to this window
520:30 - when we click on the button it's going
520:31 - to fill our progress bar
520:33 - let's begin by creating a button to
520:35 - begin with let's call this button
520:37 - equals button we're adding this to the
520:40 - window
520:41 - let's set some text text equals maybe
520:43 - download
520:45 - and then a command maybe i'll call this
520:48 - start
520:50 - finish by adding this button to the
520:52 - window and we'll just use pack to do
520:54 - that
520:55 - let's define what our start function
520:57 - does
520:58 - def start we'll fill this in later i'm
521:01 - just going to
521:02 - print nothing just as a placeholder and
521:05 - we should just have a button
521:07 - now let's add a progress bar before this
521:09 - button
521:11 - and we'll call this progress bar just
521:12 - bar for short bar
521:14 - equals progress bar
521:18 - we're adding this to the window
521:22 - we can set an orientation
521:25 - this can be horizontal or vertical later
521:28 - on in this video i'll show you the
521:29 - differences between the two
521:30 - but for now let's set this to horizontal
521:34 - and then i'm going to pack this bar bar
521:37 - dot pack
521:38 - and add some padding pad y
521:41 - equals 10 and let's see what we have
521:46 - okay this is our progress bar at the top
521:48 - and this is the button
521:49 - when we click on this button it's going
521:51 - to fill our progress bar
521:53 - but i think i'm going to increase the
521:55 - length of this progress bar
521:57 - let's set this to maybe 300 i believe
521:59 - 100 is the default
522:01 - okay that's not too bad of a size now
522:04 - let's define what our start function
522:06 - does
522:07 - we can actually increase the value of
522:10 - our progress bar by typing in the name
522:11 - of this progress bar here
522:14 - value plus equals some amount let's say
522:18 - 10. so what's going to happen right now
522:22 - is that every time we click on this
522:24 - button it's going to fill our progress
522:26 - bar by
522:27 - 10 out of the total which is 100
522:32 - let's pretend that we're waiting for a
522:34 - certain amount of tasks
522:35 - to complete so let's define a few
522:38 - variables
522:39 - let's say we have a variable called
522:41 - tasks and let's set this to 10 just to
522:43 - keep it simple
522:45 - and x will represent the current task
522:47 - that we're on
522:48 - and we'll say 0 to begin with let's
522:51 - create a while loop
522:53 - while x is less than the amount of
522:57 - tasks that we have we will
523:00 - increment the value of our bar by 10.
523:03 - 10 10 for each test that we have which
523:06 - is 10 for a total of 100
523:09 - and we'll want to increment the task
523:11 - that we're on as well
523:12 - which is represented by x so let's
523:15 - increment x by 1 after each iteration
523:18 - of this while loop now when we run this
523:21 - and click download this spills instantly
523:25 - let's add a delay just to simulate
523:29 - each task waiting to be completed so
523:32 - let's add that here let's add a delay by
523:35 - using time
523:36 - dot sleep and let's set this to one
523:38 - second
523:40 - we're going to wait one second and then
523:41 - complete a task
523:45 - what ends up happening now is that
523:46 - nothing appears to be updating
523:48 - well what gives bro you lie to me well
523:50 - that's because
523:51 - the window is waiting to have this
523:53 - progress bar complete
523:55 - before it's actually going to display it
523:57 - being filled
523:58 - so we would want to refresh this window
524:01 - after each iteration of the while loop
524:04 - so at the end of this while loop let's
524:06 - add one thing
524:07 - window dot update underscore idle
524:11 - tasks after each iteration of this while
524:14 - loop it's going to update
524:16 - the window that we have so then when we
524:18 - download something
524:20 - it's going to update our progress bar
524:22 - after each iteration of this while loop
524:24 - until it's completed
524:26 - right about now let's take this a step
524:29 - further by adding a label that displays
524:31 - the current percent of the progress bar
524:33 - that is complete
524:34 - let's add this label after the progress
524:36 - bar but before the button
524:38 - sandwiched right between these two
524:39 - widgets so let's add that here
524:42 - we'll call this label percent label
524:45 - equals label we'll add this to the
524:47 - window
524:48 - and we'll need a text variable text
524:51 - variable equals let's call this percent
524:54 - so the reason that we use a text
524:56 - variable is so that we can update this
524:58 - label with some text
525:00 - after each iteration of our while loop
525:02 - and we'll need to
525:03 - pack this okay within the window
525:07 - near the top let's define percent
525:09 - percent
525:10 - equals string var this allows us to
525:14 - update percent with some new text and
525:16 - set the percent label with the new text
525:18 - that we have
525:20 - within the while loop but before we
525:22 - update idle tasks
525:25 - let's set what percent is
525:28 - percent dot set and let's say
525:32 - x divided by tasks and then we'll
525:35 - multiply this by
525:36 - 100 i'm just going to put this within
525:39 - its own set of
525:40 - parentheses times 100
525:43 - and then we'll convert all of this to a
525:44 - string
525:46 - so we can display this along with some
525:48 - text
525:50 - there are a lot of parentheses here so
525:51 - it might be difficult to keep track of
525:53 - all this
525:54 - all right and then we're just going to
525:56 - tack on
525:57 - percent and that's it let's try it
526:03 - so we got 10 20 30
526:07 - 40 50. i'll shut up now one change that
526:10 - i'm gonna make is that i'm going to cast
526:13 - all of this
526:13 - as an integer before we convert it to a
526:15 - string
526:18 - because i do not like that decimal at
526:20 - the end of our percentage
526:22 - so yeah it says 10 percent 20 so on and
526:25 - so forth
526:26 - let's add a label that displays the
526:28 - current task that we're on
526:29 - so let's copy what we have for our
526:31 - percent label
526:32 - and let's rename this as maybe task
526:35 - label
526:38 - task label text variable will equal
526:41 - maybe text
526:43 - and let's define what text is so text
526:46 - is also a string var and within our
526:50 - while loop
526:51 - let's update the value of our text
526:54 - text dot set
526:57 - will display x plus maybe a forward
527:01 - slash
527:05 - plus our tasks
527:08 - and since we're displaying integers
527:10 - along with some strings
527:12 - we need to convert these to strings and
527:14 - we can use the str function to do that
527:16 - for us
527:19 - so surround x and tasks with str to
527:22 - convert these to strings
527:25 - and then we'll add just plus tasks
527:28 - completed so the value of x will update
527:33 - after each iteration of this while loop
527:35 - let's try it
527:36 - and after clicking download this will
527:39 - display the percentage as well as the
527:41 - amount of tasks that have been completed
527:44 - all the way until it reaches the end
527:49 - let's change this into a more practical
527:51 - example
527:52 - we'll pretend that we're downloading a
527:53 - video game so let's replace or rename
527:56 - tasks as maybe gb4 gigabytes
528:00 - and this game will be 100 gigabytes
528:03 - we'll rename x as well so let's refactor
528:07 - rename and change x to maybe download to
528:09 - represent
528:10 - the amount of gigabytes that are
528:12 - downloaded
528:14 - and let's create a variable called speed
528:17 - and let's set this to one
528:19 - alright so while our download
528:22 - is less than the amount of gigabytes for
528:24 - this game
528:25 - we'll sleep for maybe a portion of a
528:28 - second
528:28 - .05 should be good we'll increase
528:32 - the value of our bar by
528:35 - this amount speed divided by
528:38 - gigabytes and then multiply this by 100
528:44 - for the download we're going to
528:46 - increment this by whatever
528:47 - our speed is and right now it's one so
528:49 - that's the same
528:50 - we can keep percent the same for our
528:53 - text
528:53 - let's change tasks to gigabytes
528:57 - and that's all the changes that we have
528:58 - to make and
529:00 - now when we download something we're
529:02 - kind of pretending that we're
529:04 - downloading
529:05 - a large file or a game you can see that
529:07 - once it reaches 100 it says 100
529:10 - 100 out of 100 gigabytes completed now
529:13 - we can change
529:14 - this to a different value let's say
529:15 - maybe 50
529:17 - and the speed will be maybe two
529:21 - so this will adjust to accommodate
529:23 - whatever the new file size is as well as
529:25 - the speed
529:26 - and before i forget you can change the
529:28 - orientation to a
529:30 - vertical bar if you so choose so we have
529:33 - this vertical download bar now
529:35 - which could be good for something all
529:37 - right so that's the basics
529:39 - of progress bars in python if you want
529:41 - to copy of all this code
529:42 - i'll post all of this in the comments
529:44 - down below but yeah that's the basics of
529:46 - progress bars
529:47 - in python what's going on everybody it's
529:50 - your bro here hope you're doing well and
529:52 - in this video i'm going to teach you
529:53 - guys how we can use the canvas widget to
529:55 - draw some simple shapes so
529:56 - sit back relax and enjoy the show
530:01 - welcome back everyone well in this video
530:03 - we're going to be creating a canvas
530:05 - a canvas is a widget that is used to
530:07 - draw simple graphs plots and images
530:09 - within a window
530:11 - we're going to be creating some simple
530:12 - shapes in this video not anything too
530:14 - sophisticated i might get more into the
530:16 - canvas widget in a separate video
530:18 - and at the end of this lesson we're
530:20 - going to practice by creating a pokeball
530:22 - so to begin we'll need a window window
530:25 - equals tk
530:26 - followed by window.main loop to create a
530:28 - canvas we can just simply call this
530:30 - canvas
530:31 - canvas equals canvas and we're adding
530:33 - this canvas
530:34 - to our window and then we need to follow
530:36 - this with canvas.pack or
530:38 - place but i'm just going to use pack
530:40 - because it's simple
530:41 - this is what our canvas looks like it's
530:43 - a rectangular area which we can draw
530:45 - graphics on
530:46 - we can also set the width and the height
530:48 - of this canvas so when we create this
530:50 - canvas
530:51 - we're going to set the options for a
530:53 - height and a width
530:54 - so let's begin with the height height
530:56 - equals let's say 500
530:58 - and the width will be the same 500 and
531:01 - now we have
531:02 - a square canvas that we can draw
531:04 - graphics on
531:05 - let's begin by creating some simple
531:07 - shapes maybe a line
531:08 - i think a line is a shape maybe a
531:10 - one-dimensional one i don't know
531:12 - i don't geometry so let's create a
531:14 - simple line
531:16 - so we type the name of the canvas dot
531:19 - create and there's a bunch of different
531:20 - shapes that we can create
531:21 - let's create a line
531:24 - now i'm just going to turn this into a
531:26 - comment for a moment we need to set some
531:28 - coordinates
531:28 - for this line this top left corner of
531:31 - our canvas
531:32 - is 0 0 and the bottom right corner of
531:35 - this canvas is
531:36 - 500 by 500 depends on what you set the
531:39 - dimensions of the canvas to
531:41 - so when we create a line we need a
531:43 - starting point and an ending point
531:45 - so if we want this to start in the top
531:47 - left corner we're going to pass in
531:49 - 0 0 that is the starting position and we
531:52 - can place the coordinates for the ending
531:54 - position
531:54 - if we want this line to end in the
531:56 - bottom right corner that would be
531:58 - where x is 500 and y is 500 and this is
532:02 - what this looks like
532:03 - we just have a simple line going across
532:05 - the screen
532:06 - but that's not all we can also change
532:08 - the color of this line
532:10 - and the thickness let's begin by
532:11 - changing the color so
532:13 - we can do that with fill fill equals
532:16 - let's pick color blue
532:20 - and now we have a blue line going across
532:22 - the screen
532:23 - but we can also change the width of this
532:25 - as well so we can do that
532:26 - using the width option and let's set
532:28 - this to five
532:30 - now we get an extra thick line across
532:32 - the screen
532:34 - now let's make a red line
532:37 - so i'm just going to copy this
532:40 - canvas.createline and let's change
532:42 - some coordinates for this uh let's say
532:45 - we want this to start in the bottom left
532:47 - corner and go up to the top right
532:50 - so the starting x position would be zero
532:53 - y would actually be 500 x
532:56 - for the ending position would be 500 and
532:58 - y would be zero
533:00 - let's set this to red and we'll keep the
533:03 - width the same
533:06 - okay so here's our red line and notice
533:08 - that this red line
533:10 - is overlapping the blue line so when you
533:12 - create shapes
533:13 - on a canvas if there's any that overlap
533:16 - the one that you most recently created
533:18 - will appear on the top one option
533:20 - available to you is that you can
533:22 - actually
533:22 - give these graphics a unique name with
533:25 - our blue line we could call this
533:26 - blue line blue line equals all of this
533:30 - and then we can call our red line
533:32 - something different like
533:34 - red line this would be useful if you
533:35 - want to call or use a
533:37 - graphic by its name if you want to like
533:40 - move a graphic on the screen or have
533:41 - something appear
533:42 - you can use this by its name but we
533:44 - don't really need it for this lesson so
533:46 - i'll just revert this back to what we
533:48 - had previously
533:49 - i'm just letting you know that you can
533:50 - do that alright what do we have up next
533:52 - let's create a rectangle so canvas dot
533:55 - create
533:56 - rectangle we can set some starting
533:59 - coordinates and ending coordinates
534:01 - the starting coordinates are for the top
534:03 - left of the rectangle
534:04 - and the ending coordinates are for the
534:05 - bottom right so for the starting
534:07 - coordinates let's say
534:08 - we're going to place this where x is 50
534:11 - y is 50.
534:12 - for the ending coordinates we want this
534:14 - where
534:15 - x is 250 and y is 250 i'm just making up
534:18 - numbers
534:19 - put it whatever you want really and this
534:22 - is what this looks like
534:24 - but i think i'm going to comment out
534:26 - these lines for now
534:29 - and here is our rectangle well i guess
534:31 - it's also a square
534:33 - we can actually give this a fill color
534:35 - as well so we do that with the fill
534:37 - option
534:38 - fill equals purple
534:41 - i guess and now we have a
534:44 - purple rectangle next on our list
534:47 - is create polygon we can create many
534:50 - sorts of shapes using create polygon but
534:52 - it really depends on how many
534:53 - coordinates that we enter
534:55 - let's create a simple triangle so we
534:57 - need at least three coordinates for this
534:59 - to work
534:59 - so canvas dot create polygon
535:02 - and i have some coordinates picked out
535:04 - already so let's place the first set of
535:06 - coordinates where
535:07 - x is 250 y is zero for the second set
535:12 - where x is 500 and y is 500
535:15 - in the last set the third set we'll
535:17 - place this where x
535:18 - is zero and y is 500 and what this looks
535:22 - like
535:22 - is that we have this black triangle
535:25 - that's taking up most of the canvas
535:27 - we can also change the fill color as
535:29 - well so we do that with
535:31 - the option fill and we can set this to
535:33 - whatever color you want
535:35 - let's say yellow and we now have a
535:38 - yellow triangle on our screen and it
535:40 - kind of resembles the triforce from the
535:42 - legend of zelda series one of my
535:44 - personal favorites
535:45 - let's also add a border this is actually
535:48 - done with
535:48 - outline outline equals and then pick a
535:51 - color for the outline
535:52 - let's say black and we have a black
535:54 - outline around
535:56 - this graphic and you can also change the
535:58 - thickness of this too
535:59 - with width and let's set the width to
536:01 - five
536:02 - and now we have an extra thick line
536:04 - around our triangle
536:06 - with these shapes you can pass in a list
536:09 - of points too
536:10 - so i'm going to get rid of all these and
536:12 - we're going to pass in
536:14 - a list so let's create a list called
536:16 - points
536:17 - points equals all the points that we
536:20 - just entered in previously
536:21 - and then instead of passing in all these
536:24 - coordinates individually i'm just going
536:25 - to pass in our list of points
536:28 - and this will work exactly the same okay
536:31 - let's create an arc now so canvas dot
536:34 - create
536:34 - arc and arc is really just a
536:37 - curved line between at two points
536:40 - however when we list some coordinates
536:42 - we're not listing the coordinates of the
536:44 - starting position and ending position
536:45 - for this arc it's more or less for the
536:48 - amount of space that we want to allocate
536:50 - to actually draw this arc
536:52 - so let's say that we want this arc to
536:54 - take up the entire canvas we can pass in
536:56 - the dimensions
536:57 - for this canvas so the top left corner
536:59 - is zero zero
537:00 - and the height and the width are five
537:02 - hundred
537:07 - so this is our arc it resembles a pie
537:09 - slice it's not starting in the top left
537:12 - corner and ending down here
537:13 - that's the amount of space that we're
537:15 - giving this crate arc function to
537:17 - actually draw
537:18 - an arc it's really an entire circle but
537:21 - only a portion of it is visible
537:23 - let's also set a fill color for this so
537:25 - fill equals
537:26 - what color did we not pick yet let's say
537:29 - green
537:32 - and now we have a green pie slice
537:35 - there's different styles you can do too
537:38 - so we can change that with style equals
537:40 - the default is pi slice
537:42 - that's what we had previously let's
537:44 - change this to chord
537:46 - this will draw a line between these two
537:48 - points
537:49 - and this kind of resembles like a bow
537:51 - like a ball with arrows
537:52 - and there's also just arc
537:56 - where it's simply just a curved line
537:59 - let's change this back to pie slice well
538:02 - because i like pie
538:04 - we can change the starting position of
538:06 - where this arc begins with the option
538:08 - start
538:09 - so start equals 0 by default so there's
538:12 - going to be no apparent change
538:14 - let's adjust this by 90 degrees so this
538:17 - is in
538:18 - degrees so this shifted
538:22 - what is this direction counterclockwise
538:24 - by 90 degrees
538:26 - so 180 would theoretically flip this
538:31 - and now this is on the other side of
538:33 - what we had previously
538:34 - and then 270.
538:40 - all right we can also set an extent
538:44 - so the default is normally 90 degrees
538:46 - but let's change this to 180
538:49 - and now we have a what is that
538:51 - hemisphere half a circle
538:54 - all right people let's practice by
538:55 - creating a pokeball there's still one
538:57 - more function that we have to cover it's
538:59 - called create oval but we'll do that as
539:01 - we're making this
539:02 - so let's begin by creating the top red
539:04 - hemisphere of this pokeball so that's
539:06 - canvas
539:07 - dot create arc and we're going to set
539:11 - the extent of this
539:13 - to 0 0 500 500
539:16 - so that this is going to take up the
539:18 - entire canvas
539:20 - and then let's also set a fill color to
539:22 - red
539:23 - so fill equals red
539:26 - we need to change the extent of how far
539:28 - this extends
539:29 - so we'll do that with the extent
539:31 - function so extent
539:32 - equals 180 so that this is a half circle
539:36 - and let's also change the thickness of
539:39 - this outline as well
539:40 - using the width option so width equals
539:44 - 10 would be good and we have
539:47 - a red hemisphere for the top of our
539:49 - pokeball let's work on the bottom half
539:51 - so that is a white hemisphere
539:54 - so canvas dot create arc these are all
539:57 - the same we'll change
539:58 - the fill to white the extent will be the
540:01 - same
540:02 - but we need a different starting
540:03 - position so start
540:05 - equals 180. so this is going to begin
540:08 - at the 180 degree mark so when you
540:11 - combine these both together we get
540:13 - two different colored hemispheres that
540:14 - form a perfect circle
540:16 - now let's create an oval within the
540:18 - center of this pokeball
540:21 - so we're going to do that with canvas
540:24 - dot create
540:26 - oval we're going to set the amount of
540:29 - space that we want to give
540:30 - the circle to be drawn so we'll place
540:33 - this where
540:33 - x is 190 where y is 190
540:37 - where x 2 or the second x position is
540:40 - 310
540:41 - and y2 is 310
540:46 - let's set the fill color next so we do
540:48 - that with fill
540:49 - fill equals white
540:53 - and lastly let's just give this a
540:55 - thicker border
540:56 - so that is width
541:00 - equals 10 to match the width for the
541:03 - two arcs that we have and there you have
541:06 - it we have a simple
541:07 - pokeball all right well that's the
541:09 - basics of the canvas widget if you'd
541:11 - like a copy of all this code i'll post
541:13 - all of this in the comments down below
541:15 - but yeah that's the basics of the canvas
541:17 - widget in python
541:18 - what's going on everybody it's your bro
541:21 - here hope you're doing well and in this
541:22 - video i'm going to teach you guys how we
541:24 - can create key events in python so sit
541:26 - back relax and enjoy the show
541:30 - welcome back everyone in this video
541:33 - we're going to be discussing at key
541:34 - events
541:35 - we can bind a key event and a function
541:38 - to a widget or a window so that when we
541:41 - press a certain key
541:43 - or do something we can trigger a
541:45 - function to be called that will perform
541:47 - some sort of task for us
541:48 - so we can actually do this by using the
541:51 - bind function
541:52 - so widgets and windows have access to a
541:55 - bind function
541:57 - so when our window or our widget is
541:59 - selected
542:00 - and then you press a certain key or do
542:02 - something then it's going to call a
542:04 - certain function to perform a task for
542:06 - us
542:06 - so there's two arguments within the bind
542:08 - function this takes an event
542:10 - as well as a function name let's say
542:13 - that when we press the enter key we want
542:15 - to
542:16 - call this function to do something so
542:18 - for this event
542:20 - what we type for that is a set of quotes
542:23 - angle brackets and the name of the
542:25 - button
542:26 - so for example if you want to press w to
542:28 - move forward like you're playing a game
542:30 - this would be w
542:32 - a s d there's also up
542:35 - down and then let's say we want to press
542:38 - enter to do something that is actually a
542:40 - return and then we will call
542:42 - this function so let's create a function
542:44 - called do something
542:46 - and let's define this at the top def
542:50 - do something now pay attention to this
542:53 - part we need to set up
542:54 - one parameter for this do something
542:56 - function
542:58 - this needs an event so be sure to
543:00 - include that and it's easy to forget
543:02 - so what do we want to do after we press
543:04 - enter
543:05 - let's just print a message you
543:09 - did a thing and
543:12 - this should work now so let's try it
543:17 - so while this window has focus ability
543:20 - we can actually uh have this respond to
543:22 - events
543:23 - so right now i'm pressing all sorts of
543:24 - keys you can probably hear me right now
543:26 - going crazy on my keyboard but now i'm
543:28 - going to hit
543:29 - enter and it says you did a thing and
543:32 - you can bind all sorts of keys to
543:33 - this window let's say that i want to
543:35 - press q to quit
543:38 - so we'll just replace this with
543:39 - lowercase q
543:42 - so i'm typing all sorts of keys but now
543:44 - i'm going to press q
543:45 - and it says you did a thing kind of like
543:48 - we're quitting the game
543:49 - you can actually have this respond to
543:51 - all keys
543:52 - well almost all of them so to do that
543:55 - you just type in key with the capital k
543:58 - so i can pretty much press on any key
544:01 - then it's going to
544:02 - trigger or call our function
544:05 - kind of like that so one thing that we
544:08 - could do
544:09 - we can display the key event that was
544:11 - pressed so i'm just going to add that
544:13 - here
544:14 - maybe i'll change this message u
544:18 - pressed plus and to display
544:21 - what key was pressed that is event
544:24 - dot key sim i believe that's for
544:28 - key symbol so this will actually display
544:31 - what button you pressed
544:32 - so w-a-s-d
544:36 - here's a unique idea for practice let's
544:39 - say that we want to add
544:40 - a label to our window and we're going to
544:42 - change the text on the label
544:44 - to reflect whatever key that we press so
544:47 - let's create a label
544:48 - label equals label we're adding this to
544:50 - our window
544:52 - and let's change the font as well to
544:54 - something massive
544:55 - like helvetica
544:59 - and a size of 100 that should be good
545:02 - then we need to pack this label so
545:04 - label dot pack then within
545:07 - this function let's turn this into a
545:09 - comment
545:10 - and we're going to use label dot config
545:14 - and we're going to update our text
545:17 - and the text is going to be whatever key
545:19 - that we press so we can do that with
545:21 - event dot key sim so now
545:25 - this label is going to display whatever
545:28 - key that we press
545:29 - so for example w a s
545:32 - d backspace escape
545:36 - up up down down left right left right b
545:38 - a start
545:39 - all right so that's the basics of key
545:41 - events if you could do me a favor and in
545:43 - the comments down below
545:44 - just press f to pay respects so if you
545:47 - want a copy of this code i'll post this
545:49 - in the comments down below but yeah
545:50 - that's the basics of key events in
545:53 - python
545:54 - hey what's going on everybody it's your
545:55 - bro here hope you're doing well and in
545:57 - this video i'm going to teach you guys
545:58 - all about
545:59 - mouse events in python so sit back relax
546:01 - and enjoy the show
546:05 - hey everyone we're going to be
546:06 - discussing mouse events in python so
546:08 - before we begin we'll need a window so
546:10 - window equals tk followed by window.main
546:13 - loop
546:14 - and in the last video we learned that we
546:16 - can bind
546:17 - a widget or a window so that when a
546:19 - certain event occurs we can call a
546:21 - function
546:22 - so we're going to do the same thing for
546:24 - this video but we have
546:25 - various mouse events that we can cover
546:28 - so we're going to use the window.bind
546:31 - function
546:31 - and this takes two arguments an event as
546:34 - well as a function
546:36 - name so let's define a function let's
546:38 - call it the
546:39 - do something function so do something
546:42 - and we'll need to define this so at the
546:44 - top def
546:46 - do something and remember that we need
546:49 - to set up
546:49 - one parameter for this function the
546:52 - parameter
546:53 - is an event and then we'll just print
546:55 - something print
546:57 - you did a thing
547:01 - okay so there are various mouse events
547:04 - for a
547:04 - left button click within quotes and then
547:08 - within angle brackets
547:09 - a left button click is button dash one
547:13 - so then if we were to click within this
547:16 - window
547:16 - it's going to call our function you did
547:19 - a thing
547:20 - but if i were to right click it doesn't
547:22 - do anything
547:24 - so there are other mouse events too so
547:26 - button two
547:27 - is that scroll wheel not if you scroll
547:29 - up or down but if you press
547:31 - in on it so right now i'm clicking left
547:34 - i'm clicking right
547:35 - now i'm going to press in on the mouse
547:37 - wheel and it says you did a thing
547:40 - button three is a right mouse click
547:46 - so i'm clicking left nothing but i'm
547:49 - gonna click right
547:51 - and that seems to work all right so
547:53 - button one i'm just going to add a note
547:56 - left mouse click button two
548:00 - is the scroll wheel
548:04 - that's if you press in on it and then
548:07 - button three
548:08 - is a right mouse click
548:11 - so did you guys know we can actually get
548:13 - the x and y coordinates of where this
548:15 - event occurred
548:16 - so to do that we type in the name of the
548:19 - event
548:20 - dot x however since we're displaying
548:23 - this along with some text
548:24 - we'll need to convert this to a string
548:28 - so string event dot x then i'll add the
548:31 - y coordinates as well
548:35 - event.y i think i'll just add a comma
548:38 - between these
548:39 - to separate them and we'll change our
548:42 - text
548:44 - so we'll say mouse coordinates
548:48 - all right let's try this again so this
548:51 - is going to
548:52 - give us the coordinates of where we
548:54 - click and right now i'm just left
548:55 - clicking
548:58 - so the top left corner is zero zero
549:02 - well at least close to it not there
549:04 - exactly
549:06 - alright so here's a few other events
549:08 - that we can cover
549:11 - i'm going to copy this we have button
549:14 - release
549:15 - if we were to release a button it's
549:18 - going to trigger our event
549:21 - so right now i'm holding in on the left
549:23 - mouse button but i'm going to let go
549:25 - then it triggers our event if i were to
549:28 - right click
549:29 - and hold it it doesn't do anything but
549:31 - as soon as i let go
549:32 - then our event is triggered we also have
549:35 - enter
549:36 - not to be confused with the enter button
549:39 - just going to get rid of that so that
549:42 - is enter if we were to enter our binded
549:46 - window or widget
549:49 - so if i were to enter it's going to give
549:51 - the coordinates of where i entered this
549:56 - there is also leave
549:59 - so i'm going to say that enter
550:03 - the window
550:07 - and leave is leave the window
550:14 - so if i enter nothing happens but as
550:16 - soon as i leave it gives the coordinates
550:22 - and the last one is motion as long as
550:24 - the cursor is in motion
550:28 - so this one might be good for a game so
550:31 - that is motion
550:34 - where the mouse
550:40 - moved
550:42 - it's consistently giving me the
550:43 - coordinates if i'm moving the mouse but
550:45 - if i were
550:45 - stationary or stop moving it stops
550:50 - all right so that's the basics of mouse
550:52 - events in python if you want to copy of
550:54 - all this code
550:54 - i'll post all of this in the comments
550:56 - down below but yeah that's the basics of
550:58 - mouse events in python hey what's going
551:01 - on everybody it's bro here hope you're
551:03 - doing well and in this video i'm going
551:05 - to teach you guys how we can drag
551:06 - and drop widgets in python so sit back
551:09 - relax and enjoy the show
551:12 - all right people let's just dive into
551:15 - this so we'll need a window and then
551:16 - we're going to be adding widgets to the
551:18 - window
551:19 - so window equals tk followed by
551:21 - window.main loop
551:23 - now you can drag and drop all sorts of
551:25 - widgets but let's just stick with the
551:26 - label because creating a label is simple
551:29 - so let's define a label label equals
551:32 - label we're going to be adding this
551:35 - label to the window
551:36 - and let's set a background color so we
551:38 - can actually see this label
551:40 - pick i don't know your favorite color
551:42 - i'm going to pick red
551:43 - and then i'm going to set a width and a
551:45 - height because normally if you have a
551:47 - label without any text it's really small
551:50 - so let's set a width of maybe 10
551:53 - and then a height of 5.
551:57 - that should be good and we want to place
551:59 - this label
552:00 - someplace within the window so label dot
552:03 - place and we can pass in some x
552:05 - coordinates as well as y coordinates
552:07 - so x equals zero and y equals zero
552:11 - so that this is going to appear in the
552:13 - top left corner
552:14 - of our window so this is what we have
552:17 - this
552:18 - is our label and we want to be able to
552:20 - drag and drop
552:21 - this label someplace within the window
552:23 - what we're going to need to do
552:24 - is actually bind this label twice but
552:27 - let's begin with just
552:28 - the first binding so in order to bind a
552:31 - widget you type in the name of the
552:32 - widget
552:33 - followed by calling the bind function
552:36 - so this bind function can take two
552:39 - arguments
552:40 - it can take an event as well as a
552:42 - function
552:43 - name so for the function name let's call
552:45 - this
552:46 - drag underscore start but you don't
552:48 - really need to
552:49 - name it the same that i do and for the
552:52 - event that occurs
552:53 - this is going to be a left button click
552:55 - with the mouse
552:56 - so that event is within quotes and
552:59 - within angle brackets
553:01 - button dash one so if we were to click
553:04 - someplace within the label using the
553:06 - left mouse button
553:07 - it's going to call our drag start
553:10 - function but we need to define this
553:12 - so at the top of our program let's
553:13 - define this function
553:16 - def drag start and this takes one
553:19 - parameter
553:20 - the parameter we have is our event so
553:22 - what we're going to do
553:23 - is actually get the coordinates of where
553:26 - we click
553:27 - within this label and we're going to
553:29 - assign these
553:30 - to a new variable or attribute of our
553:33 - label
553:34 - so label dot let's create an attribute
553:37 - called
553:37 - start x equals our event
553:41 - dot x so this is where we click
553:44 - within the label and not necessarily the
553:47 - window
553:48 - and let's repeat the process for y so
553:50 - label
553:51 - dot start y equals event dot
553:54 - y so we're going to have some
553:57 - coordinates of where we click
553:58 - within this label and we can actually
554:01 - use that for our next
554:02 - function so we're going to bind this
554:04 - label a second time
554:06 - so i'm going to copy this line and paste
554:08 - it
554:09 - the second binding let's say is
554:12 - drag underscore motion for the function
554:15 - name
554:16 - and this event is going to occur if we
554:19 - were to hold down the left mouse button
554:21 - and then drag so that is b
554:25 - one dash motion
554:28 - and then we need to define this function
554:30 - so at the top
554:32 - d e f drag underscore motion and this
554:35 - takes our event as a parameter
554:37 - so this part is going to be a little
554:39 - funky we're going to
554:41 - get or create new x and y
554:44 - coordinates so let's begin with x x
554:47 - equals the name of our label or widget
554:50 - label dot w info
554:54 - underscore x this is a function so add
554:56 - some parentheses
554:58 - this will get the top left x coordinate
555:01 - of our label relative to the window that
555:04 - we're in
555:05 - minus label x well labeled.startx
555:11 - plus event dot x
555:14 - all right so we're going to do the same
555:17 - thing for y
555:19 - well we're going to replace x with y for
555:21 - the second line
555:25 - all right so this is the top
555:29 - left corner the x coordinate of our
555:32 - widget
555:33 - relative to the window this
555:37 - is the place where we click within
555:40 - the label itself and this is where we
555:43 - begin
555:44 - dragging our widget to it's a little
555:47 - difficult to explain but if you can find
555:48 - combine
555:49 - combine all of these together you'll get
555:51 - the new coordinates
555:52 - of where you want to drag this component
555:56 - this widget to
555:57 - so we need to replace this widget so
556:00 - label dot place x equals x
556:04 - and y equals y so then when you combine
556:07 - all of these together
556:09 - we have our widget and we can drag it
556:11 - and drop it someplace else within the
556:13 - window
556:15 - now wait a second what if we have more
556:17 - than one widget
556:18 - well with the way that our functions are
556:20 - written now they wouldn't be compatible
556:22 - with more than one widget
556:24 - just this label itself so what if we
556:27 - were to create a
556:28 - second label so i'm going to call the
556:30 - second label just
556:32 - label two so i'm just going to rename
556:34 - them and
556:35 - let's change the background color to
556:37 - maybe
556:38 - blue and i'm just going to place this
556:40 - somewhere else within our window so
556:41 - maybe where x
556:42 - is 100 and y is 100 and we'll need to
556:45 - bind
556:46 - label two as well so
556:49 - make sure to bind label two so we have
556:53 - label one binded it's just called label
556:55 - and the same thing with label two
556:57 - all right let's see what happens i'm
556:59 - going to attempt to drag
557:01 - label 2. the label 1 is moving that's
557:04 - because
557:04 - with our functions we stated we're
557:07 - getting the coordinates
557:09 - and we're storing them within the
557:10 - attributes of label
557:12 - 1 and not necessarily label two so in
557:14 - order to make
557:15 - these functions compatible with all
557:18 - widgets
557:19 - we can actually add one line of code
557:22 - widget equals event dot widget
557:26 - so this is going to get the widget of
557:28 - the event that we're dealing with
557:30 - and we're going to temporarily rename
557:32 - this as widget
557:34 - so now we're going to replace all
557:36 - instances of where we use
557:37 - label and replace it with widget
557:42 - be sure to do the same thing too with
557:43 - drag motion
557:46 - and then we will need to add this line
557:48 - at the top of
557:49 - drag motion so now
557:53 - these functions are now compatible with
557:55 - any widget that we create
557:59 - and we should be able to drag and drop
558:02 - both
558:03 - widgets all right well that's the basics
558:06 - of dragging and dropping widgets in
558:08 - python if you want a copy of all this
558:10 - code i'll post all of this in the
558:11 - comments down below
558:13 - but yeah that's the basics of dragging
558:14 - and dropping widgets in python
558:18 - hey what's going on everybody it's your
558:20 - bro here hope you're doing well and in
558:21 - this video i'm going to teach you guys
558:22 - how we can move an image
558:24 - on both a window and a canvas in python
558:27 - so sit back relax and enjoy the show
558:31 - all right my fellow bros i'm going to
558:33 - divide this video into
558:35 - two different sections in the first
558:37 - section we're going to move a widget
558:39 - within a window
558:40 - and in the next section we're going to
558:42 - move an image
558:43 - on a canvas so let's begin by moving a
558:46 - widget within a window
558:47 - so we'll need a window window equals tk
558:50 - followed by window.mainloop and we'll
558:52 - also need to set some geometry for this
558:54 - window
558:55 - window dot geometry let's make this
558:58 - 500x500
559:01 - 500 x 500 and let's take a look
559:06 - okay that should be a decent size let's
559:08 - add a label to this window
559:11 - so i actually have a race car image that
559:13 - i want to use if you would like an image
559:15 - feel free to pause the video and
559:16 - download one
559:17 - what i would like to do is create a
559:19 - photo image from this png file that i
559:21 - have
559:22 - i'm just going to call this my
559:25 - image equals photo
559:28 - image file equals since this is within
559:32 - my project folder i can just list the
559:34 - file name
559:36 - otherwise you might have to list the
559:37 - file path and for me this is called
559:40 - racecar.png
559:42 - i want to add this image to my label not
559:45 - necessary but
559:46 - it'll be helpful for this example i'm
559:48 - going to call my label just a label
559:50 - label equals label i'm adding this to
559:52 - the window and i'm going to set the
559:54 - image to equal
559:55 - my image that i created it's a photo
559:57 - image
559:58 - if you do not have an image that you
560:00 - want to use you can simply
560:02 - just change the background color you
560:03 - could say bg
560:05 - i don't know red
560:08 - oh then we need to place this so be sure
560:10 - to do that
560:11 - label dot place and i'm going to place
560:13 - this in the top left corner that is
560:15 - where x
560:15 - equals zero and y equals zero and then
560:18 - we should have a race car
560:20 - or whatever image you used and a red
560:22 - background you can get rid of the
560:24 - background color if you prefer
560:25 - that's just if you don't have an image
560:27 - to use you can set the background color
560:29 - just for a
560:30 - visual to show you where the label
560:32 - currently is
560:33 - let's set some key bindings for this
560:35 - window and let's add them maybe here
560:37 - before we create the label and our image
560:39 - so let's find the w key for up s for
560:43 - down
560:43 - a for left and d for right so we do that
560:46 - with
560:47 - window dot bind and we pass in an event
560:51 - as well as a function name so we want to
560:54 - tie the w key to a function and we'll
560:58 - call this
560:58 - move underscore up and then we will need
561:02 - to define this
561:04 - so outside of the window let's define
561:08 - move underscore up and this takes
561:12 - an event so we'll place that as a
561:14 - parameter
561:15 - and to move our label up we're going to
561:18 - take
561:18 - label dot place
561:22 - and we're going to place this at some
561:23 - new coordinates
561:25 - x equals the label's current position
561:28 - relative to the window that it's in so
561:31 - that is label
561:32 - dot w info
561:35 - underscore x
561:38 - all right so then for y it's similar
561:41 - y equals label dot w
561:45 - info underscore y
561:48 - but we're going to subtract maybe one
561:52 - all right so this is all we need
561:56 - although this is only going to move up
561:58 - so i'm going to press
561:59 - w and our label our race car or whatever
562:03 - image you used is going to move
562:04 - slowly up i'm going to increase this to
562:08 - 10 so the change is more drastic
562:11 - so now our race car is drifting off into
562:13 - space
562:15 - let's find a few other keys s a
562:18 - and d sad all right so
562:21 - s will be down move underscore down
562:27 - a for left move left
562:31 - and d for right move
562:35 - right we'll just copy what we have here
562:38 - and make a few changes
562:39 - let's begin with move down
562:44 - the only thing we're going to change
562:45 - within here is in place of subtracting
562:48 - 10
562:48 - from the y coordinate we're going to add
562:50 - 10
562:52 - and with our race car oh i guess we have
562:54 - to define these so let's do that real
562:56 - quick
562:57 - uh so we have left
563:00 - move left we're going to subtract
563:03 - 10 from the x coordinate and keep y the
563:07 - same
563:09 - and then the same thing for move right
563:11 - move
563:12 - underscore right and this time we are
563:15 - going to add 10
563:16 - to x and y will stay the same
563:21 - okay now with our image we can move up
563:25 - down right and then left
563:29 - and y stop there we combine these to our
563:32 - arrow keys
563:36 - so up is just up with a capital u
563:39 - down is down these are all capital by
563:42 - the way
563:43 - left is left and then right is right
563:49 - and now i can use my arrow keys to move
563:51 - this image
563:58 - now for this part of the video i'm going
564:00 - to teach you guys how we can move an
564:02 - image on a canvas this time and not just
564:04 - within a window
564:05 - but we'll need a window to begin with
564:07 - window equals tk followed by
564:09 - window.mainloop
564:10 - and we're going to create a canvas
564:12 - canvas equals canvas
564:15 - we're adding this canvas to the window
564:17 - and let's set a width and height
564:19 - for the width let's make this 500 and
564:21 - the height 500 as well
564:22 - so this is an even square and we'll need
564:25 - to
564:26 - pack or place this canvas canvas.pack
564:28 - should take care of that
564:30 - and let's run this and this is our
564:32 - canvas
564:33 - at this step we need to add an image to
564:36 - our canvas and i have an image of a
564:38 - racecar that i want to add
564:39 - so i need to create a photo image from
564:42 - this file
564:43 - so we can do that let's give this photo
564:46 - image a unique name i'm just going to
564:47 - call this photo image to keep it simple
564:50 - photo image equals photo image and i can
564:53 - list the file path or the file name
564:55 - since
564:56 - this image is within my project folder i
564:59 - only have to list the file name
565:00 - and my file is called racecar.png
565:04 - this next step we need to give our image
565:07 - a unique name
565:08 - the image that's being added to the
565:09 - canvas i'll call this
565:11 - my image equals
565:15 - and we need to turn this photo image
565:18 - into an image added to the canvas
565:20 - so we type in the name of the canvas
565:22 - canvas
565:23 - dot create underscore image
565:26 - we first need to list the coordinates of
565:28 - where we want to place this photo image
565:31 - so let's place this in the top left
565:32 - corner that is where
565:34 - x is 0 and y 0 and we need to set the
565:37 - image of the image that we're creating
565:40 - so we can do that with saying
565:41 - image equals the name of our photo image
565:46 - and let's see what we have so far so
565:49 - this image is somewhat cut off in the
565:51 - top left corner we can easily fix that
565:53 - by anchoring
565:54 - our image when we create it so let's at
565:56 - the end add
565:57 - anchor equals northwest
566:00 - so that should fix that problem and we
566:03 - now have our image that we want to use
566:06 - and to move our image we can set some
566:07 - key bindings
566:10 - so we type in the name of the window dot
566:12 - bind
566:13 - and we pass in two arguments an event as
566:16 - well as a function name
566:18 - let's tie pressing the w key to moving
566:21 - up
566:21 - so the first argument is going to be w
566:24 - and the second is going to be
566:25 - a function name so let's say move
566:28 - underscore up
566:29 - and let's find some other keys
566:33 - w for up s for down
566:39 - a for left and
566:42 - d for right
566:45 - we'll need to define these now so at the
566:48 - top outside of the window
566:50 - let's begin by defining move up
566:53 - def move up this has an event as a
566:56 - parameter
566:59 - and let's create the other definitions
567:02 - here
567:05 - so i'm just going to rename these so we
567:08 - have move
567:08 - up move down move left
567:12 - and move right okay now this next step
567:18 - we can use the canvases move function to
567:20 - move an image
567:21 - a certain amount of pixels on the x-axis
567:24 - and
567:24 - y-axis so let's begin with move up we
567:27 - type in the name of the canvas
567:29 - dot and use the move function and this
567:32 - has
567:32 - three arguments the image that we want
567:34 - to use
567:35 - and this image is called my image the
567:38 - one with the race car
567:41 - the next argument is the amount of
567:43 - pixels we're moving this on the
567:45 - x-axis with up we can keep this the same
567:50 - but on the y-axis let's say we want to
567:52 - move this
567:53 - up 10 pixels so that would be -10
567:57 - and let's repeat the process for move
567:59 - down move left and move right
568:01 - for move down we're going to change
568:04 - y to 10 for move left
568:08 - we'll keep y the same at zero but we're
568:11 - going to subtract
568:12 - 10 and then move right
568:16 - we are going to add 10 to our x's
568:20 - and that should be it so we can move up
568:24 - down right left
568:28 - and if you want to bind these to some
568:30 - arrow keys
568:31 - all we have to do is just change the
568:34 - event
568:35 - so we can bind these to our wsad keys
568:38 - as well as up
568:42 - down left
568:46 - and right and this time i'm going to use
568:49 - my arrow keys
568:50 - up down right and left
568:56 - all right so that's a few of the basics
568:58 - of moving either widgets or
569:00 - images on a canvas or window if you
569:02 - would like a copy of all this code for
569:04 - both examples i'll post both of them in
569:06 - the comments down below
569:08 - but yeah that's the basics of moving
569:10 - widgets and images
569:11 - in python hey what's going on everybody
569:14 - it's your bro here hope you're doing
569:16 - well and in this video i'm going to
569:17 - teach you guys how we can create some
569:19 - simple 2d animations in python so sit
569:22 - back relax and enjoy the show
569:26 - alright my fellow bros in this video
569:28 - we're going to be animating an image on
569:30 - a canvas we're only going to be moving
569:33 - this image
569:33 - up down left and right feel free to
569:36 - download an image that you want to use
569:37 - i'm just going to use this
569:39 - ufo emoji that i found so we'll need two
569:42 - imports
569:43 - at the top from tk enter import
569:45 - everything that's what we usually have
569:47 - we'll also need to import time as well
569:50 - we'll need a window window equals tk
569:53 - followed by window.main loop
569:55 - we'll need a canvas i'm going to call
569:57 - the canvas canvas
569:58 - canvas equals canvas we're adding the
570:01 - canvas
570:01 - to the window i'm going to create
570:03 - something that's called a
570:05 - constant we're going to create a
570:07 - constant for the width and the height
570:09 - of our canvas so a constant is a
570:12 - variable or value that you don't plan on
570:14 - changing later at all
570:16 - and a common naming convention for a
570:18 - constant is that the name of the
570:20 - constant is
570:20 - all uppercase so i want the width and
570:23 - the height
570:24 - of this canvas to be constants so for
570:27 - the width this is going to be
570:28 - all uppercase it's not necessary to make
570:31 - it all uppercase
570:32 - but that's a common naming convention
570:34 - for the width i'm going to set this to
570:35 - 500
570:36 - and the height set to 500 as well
570:39 - and for the width of this canvas i'm
570:41 - going to set the width
570:43 - to equal my constant which is 500
570:46 - and the height to my constant height
570:50 - so the reason that i'm making constants
570:52 - is that we'll be reusing these a lot
570:54 - later in this program so we might as
570:56 - well just declare them now and get it
570:58 - over with
570:59 - so for the canvas we're adding this to
571:01 - the window we're setting the width to
571:03 - our constant of width and the height to
571:05 - our constant of height
571:07 - and we need to follow this by packing
571:08 - this or place
571:10 - canvas dot pack pack to make it simple
571:13 - so we should have a canvas on our window
571:17 - now if you have an image that you want
571:18 - to use we're going to animate it
571:20 - i need to create a photo image from this
571:22 - file it's a png file it's called
571:25 - ufo but yours is probably going to be
571:27 - named something different so
571:28 - don't copy me exactly i need to create a
571:31 - photo image from this
571:32 - i'm going to call this photo underscore
571:35 - image but name it whatever you want this
571:38 - equals
571:39 - photo image and i need to list the file
571:42 - path or the file name
571:43 - since this file is within my project
571:46 - folder i only have to list the file name
571:48 - and for me this is called ufo.png
571:53 - our next step is that we're going to
571:54 - take our photo image and add this photo
571:57 - image to the canvas
571:58 - and we'll also give this image a unique
572:00 - name i'm going to call this my
572:03 - image equals we're going to use the
572:06 - canvases
572:07 - create image function so canvas dot
572:11 - create image there's a few arguments
572:13 - that we need to pass
572:14 - in where we want this image to appear we
572:17 - need a set of coordinates
572:18 - if we want this to appear in the top
572:20 - left corner that is where x
572:22 - is zero and y is zero for the image
572:25 - we're going to set this equal to
572:27 - our photo image whatever you named this
572:30 - and lastly we should anchor this i'm
572:33 - going to anchor this in the northwest
572:35 - corner to keep it simple
572:37 - and we should have our image on our
572:39 - canvas in the top left corner
572:41 - and here is my ufo that's being piloted
572:44 - by a green alien that's waving to me
572:46 - aliens are usually not that friendly
572:48 - unless they're abducting you our next
572:49 - step is to create a
572:50 - while loop so we'll say wow true this
572:53 - will continue forever until we close out
572:55 - of the program
572:56 - if you're looking at the code for a game
572:57 - this might say instead
572:59 - while running running will be a boolean
573:03 - variable that contains either true or
573:05 - false so if this is true while the game
573:07 - is running
573:08 - they're going to continue moving all of
573:10 - the characters on the screen
573:11 - and then if somebody pauses the game or
573:13 - closes out of the game
573:14 - then they'll flip this running variable
573:16 - to false but to keep things simple we'll
573:19 - just say wow
573:20 - true but that's something that you might
573:21 - see what we'll want to do is get the
573:24 - coordinates of our image
573:25 - within the canvas and this will return a
573:28 - list of coordinates
573:29 - so let's create a list called
573:31 - coordinates so
573:33 - coordinates equals canvas
573:37 - and we can use the chords function to
573:40 - get the coordinates
573:41 - i guess that's short for coordinates and
573:44 - we're getting the coordinates of
573:45 - my image so we'll pass this into this
573:48 - function
573:49 - and then let's print this just to see
573:51 - what this returns
573:52 - we'll print coordinates
573:57 - okay now to update the window after each
573:59 - cycle
574:00 - of this while loop we can use the update
574:02 - function of our window
574:04 - so window.update will also have this
574:07 - thread sleep for let's say 0.01 seconds
574:10 - so time dot sleep 0.01 one
574:15 - so here's a quick rundown of what we
574:17 - have going on so far within this while
574:19 - loop
574:19 - we're going to first get the coordinates
574:21 - of where our image
574:23 - is located we'll print the coordinates
574:26 - to the console window
574:27 - this part isn't required but it's going
574:29 - to help us for learning purposes
574:32 - we'll update this window for any changes
574:34 - and then our thread
574:36 - which is in charge of running the
574:37 - program is going to sleep
574:39 - for i believe that's a hundredth of a
574:41 - second
574:43 - so when we run this our image is staying
574:46 - in place
574:47 - and we know that our while loop is
574:48 - running because it's continuously
574:50 - printing the coordinates
574:51 - the first number is the x position
574:55 - the second number is the y position and
574:58 - now we're going to give our image a
574:59 - speed
575:00 - or velocity i like to call it velocity
575:03 - and in fact i'm going to give this image
575:05 - two velocities
575:06 - one for how fast this image is moving on
575:08 - the x-axis
575:09 - and another for how fast it's moving on
575:11 - the y axis
575:13 - so i'm going to create two variables one
575:15 - called x velocity
575:17 - and i'm going to set this equal to one
575:19 - and y velocity
575:22 - and i'll set this to one as well okay
575:26 - so what we need to do now is update
575:29 - the position of our image so let's do
575:32 - that before we update
575:33 - our window so i'm going to type in the
575:35 - name of the canvas
575:36 - and use the move function this move
575:39 - function takes three arguments
575:41 - what you want to move i want to move my
575:44 - image my ufo
575:46 - and how far i want to move this image on
575:49 - each axis each coordinate
575:51 - so what i want to do is update the
575:54 - x velocity the x position of my image
575:58 - so i'm going to pass in my x velocity
576:02 - variable and then y we'll just keep the
576:04 - same for now so we'll just say
576:06 - zero so after each iteration of this
576:08 - while loop
576:09 - my ufo is going to move one pixel to the
576:11 - right
576:12 - and it's just going to go off into the
576:13 - void forever and now
576:15 - if we replaced x velocity with zero
576:19 - and for y we set this to our y velocity
576:22 - this image is now going to travel down
576:26 - and it will continue into the void
576:27 - forever
576:29 - and then if we combine both of these
576:30 - together
576:33 - we're going to move diagonally down and
576:36 - to the right
576:37 - so what if we want this image to bounce
576:40 - off the walls we're going to add some
576:41 - if statements we're going to begin by
576:43 - just having this image bounce off the
576:45 - left and right walls
576:47 - for now let's set y velocity to zero so
576:50 - that this image is only moving
576:51 - left and right so before we move this
576:55 - image we'll add an if statement we're
576:56 - going to check to see
576:58 - if the x position of our image
577:01 - is either greater than the width of the
577:03 - canvas
577:04 - or if it's less than zero so we take
577:07 - our coordinates and we're going to get
577:09 - the first element from this list
577:11 - so that is zero that is x the x value
577:15 - if coordinates at element zero is
577:18 - greater than or equal to
577:20 - the width of this window and this is a
577:22 - constant
577:24 - so we can just place that here if
577:26 - coordinates
577:27 - well x within our coordinates is greater
577:29 - than or equal to width
577:32 - or coordinates at index
577:36 - 0 is less than 0 then we want to reverse
577:40 - the direction or flip the velocity
577:43 - so we want to change our x velocity and
577:45 - make this a negative number
577:47 - one easy way to do that is that we can
577:49 - take x velocity
577:51 - equals x velocity times negative one
577:55 - or another way of writing this is just
577:57 - to say x velocity
577:59 - minus negative velocity now what ends up
578:02 - happening
578:03 - is that when this image reaches the
578:05 - right border it's going to bounce back
578:08 - however it only bounces back after it
578:10 - reaches
578:11 - the top left corner of the image we need
578:13 - to factor in
578:14 - the width of the image as well so we're
578:17 - going to create
578:18 - two new variables and let's do this
578:19 - right before the while loop
578:21 - we'll want to determine what the height
578:23 - and the width are for our photo image
578:25 - that we have
578:26 - so this is what we're going to write
578:28 - let's call these two values
578:29 - image underscore width and
578:33 - image underscore height
578:37 - so we need to determine what the width
578:39 - and the height is
578:40 - for our photo image and there is a
578:42 - function to do that
578:44 - type in the name of the photo image dot
578:47 - and there is a width
578:48 - function and the same thing for height
578:53 - photo image dot height
578:56 - and then we can reuse these so i'm just
578:59 - going to add
579:00 - one line to the sift statement if
579:03 - the x position of our image is greater
579:06 - uh greater than
579:07 - or equal to the width of our window
579:10 - minus the width of our image and i'm
579:13 - just going to put these within
579:15 - parentheses just to keep these more
579:16 - organized
579:17 - and what ends up happening now is that
579:20 - when
579:22 - the right portion of our image hits the
579:25 - right wall it's going to bounce off
579:27 - and let's do the same thing for our y
579:29 - velocity
579:32 - we're going to replace coordinates at
579:35 - index 0 with 1 and change that here as
579:38 - well
579:39 - replace with with height
579:43 - and this is image underscore height
579:46 - and we're going to change the y velocity
579:49 - this time
579:54 - and when we move this image let's also
579:56 - add the
579:57 - y velocity
580:00 - and now our image is just going to
580:03 - bounce off the walls forever
580:04 - but it's kind of predictable since we
580:06 - set x and y
580:08 - to equal one now let's change the speeds
580:10 - to kind of spice things up
580:12 - let's say for the x velocity this is
580:14 - three and y velocity this is now two
580:16 - this is going to go in a completely
580:18 - different direction
580:21 - so you can mess with the speeds however
580:22 - you want so
580:24 - guys how about we add a background image
580:26 - to this well because we can
580:28 - i'm going to reuse this image of space
580:30 - from my java video on this same topic
580:33 - i need to create a photo image from this
580:35 - and i'm going to copy what we did for
580:37 - our normal image that we were moving and
580:40 - animating
580:41 - so this is called space.png well that's
580:44 - the name of my file
580:46 - and i'm going to give this image a
580:47 - different name maybe i'll call this
580:50 - background underscore photo
580:53 - and then i'm going to add this photo to
580:55 - the canvas
580:57 - and i'm going to call this a different
580:59 - name
581:01 - i'll just call this background all right
581:04 - so
581:04 - our window should have a background now
581:08 - and then our image moves on top of the
581:10 - background
581:10 - so make sure you add and create the
581:12 - background before you add any other
581:14 - images
581:15 - otherwise the background might overlap
581:17 - your image
581:18 - alright so that's the basics of some
581:21 - simple animations in
581:22 - python if you want to copy all this code
581:24 - i'll post all of this in the comments
581:26 - down below
581:26 - but yeah that's the basics of some
581:28 - animations in python
581:31 - hey what's going on everybody it's your
581:33 - bro here hope you're doing well and in
581:35 - this video i'm going to teach you guys
581:36 - how we can animate multiple objects in
581:38 - python so
581:39 - sit back relax and enjoy the show
581:43 - welcome back my fellow bros in this
581:45 - video we're going to be animating
581:47 - multiple objects within a window
581:49 - more specifically we'll animate some
581:50 - circles and each of these circles will
581:52 - have their own characteristics
581:54 - speeds and directions so we'll need two
581:57 - imports to begin
581:58 - from ck enter import everything we'll
582:01 - also be importing everything from the
582:02 - time module as well
582:04 - we'll need a window window equals tk
582:06 - followed by window.main loop
582:08 - i'm going to create two constants one
582:10 - for the width and one for the height
582:12 - let's set the width equal to 500 and the
582:14 - height equal to
582:15 - 500 as well we'll create a canvas and
582:17 - we'll be animating
582:19 - the circles that we're going to create
582:20 - on the canvas so let's create a canvas
582:23 - canvas equals canvas
582:27 - we're going to be adding the canvas to
582:28 - the window and we'll set the width of
582:30 - our canvas equal to our constant width
582:33 - which is 500 and our height equal to our
582:36 - constant of height
582:37 - which is also 500 and we will add this
582:40 - canvas by using the pack function
582:42 - canvas.pack here's our canvas and we're
582:45 - going to be creating multiple circles
582:47 - let's pretend that they're all different
582:48 - sports balls like a tennis ball baseball
582:51 - volleyball bowling ball
582:53 - they'll all be bouncing off of the
582:55 - borders and once
582:56 - each of them encounters a border they
582:57 - will change direction
582:59 - since we're going to be creating
583:01 - multiple objects i think it's best if we
583:03 - do this with another class
583:05 - so let's create another class i'm going
583:07 - to go to file
583:08 - new python file and let's call this
583:12 - class
583:12 - ball and click python file and we need
583:16 - to define
583:17 - this class class ball
583:22 - and we also need a constructor for this
583:24 - ball class
583:25 - we can create one with def two
583:28 - underscores
583:28 - i-n-i-t two underscores again
583:32 - and we can set up the parameters of what
583:34 - we want to receive if we were to create
583:36 - a ball
583:37 - object so let's pretend that
583:40 - we're going to be creating a volleyball
583:42 - to begin with so
583:44 - let's call this ball volley
583:47 - underscore ball equals
583:50 - ball and we'll pass in some arguments so
583:53 - let's set up the parameters first
583:55 - what do we want to receive one we want
583:57 - to receive
583:58 - our canvas so that we can actually draw
584:00 - this oval we can draw this ball
584:03 - we should also have an x and y position
584:07 - a diameter
584:11 - x velocity y velocity
584:15 - and a color all right so
584:18 - when we create a ball like a volleyball
584:21 - we're going to pass
584:22 - in whatever the parameters require so we
584:25 - need a canvas
584:26 - x y a diameter an x velocity
584:30 - y velocity and a color so within the
584:32 - constructor for the ball
584:34 - we're passing in our canvas it's kind of
584:37 - like what we do with widgets
584:38 - we're specifying what we're going to be
584:40 - adding this widget to
584:42 - we're going to be adding this ball to
584:44 - our canvas we also need
584:46 - x y and a diameter let's make this
584:48 - simple by setting x and y to both zero
584:51 - for the diameter let's set this to maybe
584:54 - 100 and we also need an x velocity and y
584:58 - velocity
584:59 - let's set this both to one and a color
585:02 - so let's pass in a string
585:04 - like white let's head back to our ball
585:07 - class and finish assigning
585:08 - all of these arguments that we're going
585:10 - to receive the first step is that we'll
585:12 - say
585:13 - self dot canvas equals
585:16 - the canvas that we receive when it's
585:18 - passed to us as an argument
585:21 - our next step is to draw this oval draw
585:24 - this ball
585:25 - and we'll say self dot image
585:29 - equals canvas dot create
585:33 - underscore oval and with creating ovals
585:36 - we can pass in x y
585:39 - and with circles the diameter is equal
585:42 - for both the width and the height
585:44 - so we'll pass in our diameter twice
585:48 - and lastly a fill color
585:52 - and we'll say this is equal to the color
585:54 - that we receive
585:55 - which is white
585:58 - we're going to set the x velocity and
586:00 - the y velocity
586:02 - this is related to the direction that
586:04 - it's initially going to head in
586:06 - so self dot x velocity
586:10 - equals the x velocity that we receive
586:15 - and we'll do the same thing for y
586:16 - velocity
586:19 - self.y velocity equals y velocity
586:23 - now since this is in another class we
586:25 - need to import this class
586:29 - from ball import
586:32 - everything and you can see that this red
586:34 - underline went away
586:36 - so let's see what happens now
586:39 - we have our volleyball but it's not
586:42 - currently moving
586:42 - so that's the next step so let's create
586:45 - a function
586:46 - within the ball class called move that
586:48 - we can call upon
586:49 - so we'll do this after the constructor
586:51 - cef
586:53 - move and this will take self as an
586:56 - argument
586:58 - the first thing that we should do is get
587:00 - the coordinates
587:02 - so we'll say coordinates and this is a
587:04 - list coordinates equals
587:06 - self dot canvas dot
587:09 - c o o rds
587:14 - and we'll pass in self dot image
587:18 - and we will print these coordinates just
587:20 - to see what's here
587:26 - all right now we'll create a while loop
587:29 - within our main class
587:30 - so let's add that near the end and we'll
587:33 - just say
587:35 - while true so while this is running
587:39 - let's move our volleyball so volleyball
587:43 - dot move so this will call the move
587:45 - function of our volleyball
587:48 - and then we will update the window
587:51 - window dot update so that this refreshes
587:54 - and we will sleep for maybe a hundredth
587:57 - of a second
587:58 - time dot sleep 0.01 but you can put
588:02 - whatever you want here
588:04 - so this is going to at first just print
588:06 - the coordinates of this ball
588:09 - so it's not currently moving and this
588:11 - time with our list we have
588:13 - four coordinates zero zero that's the
588:15 - top left corner and 100 100 that's the
588:18 - bottom
588:18 - right corner so this time we have four
588:21 - coordinates that we have to deal with
588:23 - the top left corner as well as the
588:25 - bottom right corner
588:26 - our next step is that we should move
588:28 - this image
588:30 - self dot canvas dot move
588:34 - what object are we going to move we're
588:36 - going to move self
588:38 - dot image and in what directions
588:41 - self.x velocity as well as
588:44 - self dot y velocity now
588:48 - our ball is going to move across the
588:50 - window and it right now it's displaying
588:52 - all of the coordinates
588:53 - we don't have any bounds set up so it's
588:55 - just going to continue into the void
588:56 - forever so we should set up some if
588:59 - statements to check to see if one of the
589:01 - borders
589:02 - touches one of the walls of the window
589:04 - if so it's going to change
589:05 - direction so let's check to see
589:09 - if the left or right side of our ball
589:11 - touches one of the left or right borders
589:13 - so let's write an if statement if
589:17 - and then let's take a look at these
589:18 - coordinates if
589:20 - coordinates at index 2
589:24 - that is this one 0 1
589:27 - 2. so this is the bottom right corner
589:31 - with these two sets of coordinates if
589:33 - coordinates at index 2
589:35 - is greater than or equal to
589:38 - i'm going to put these within
589:39 - parentheses self
589:41 - dot canvas and we need to get the width
589:44 - of the canvas
589:45 - one way which we can do that is to use
589:47 - the w
589:49 - info underscore with function
589:53 - so this is going to get the width of the
589:55 - canvas
589:57 - and then let's add one more thing
590:00 - or coordinates at index
590:03 - zero is less than zero
590:07 - so if this ball touches the left or
590:10 - right border
590:11 - we want to change direction so we can
590:14 - flip
590:14 - the x velocity self.x velocity
590:18 - equals negative self x
590:22 - velocity and let's do the same thing for
590:24 - the top and bottom borders
590:26 - so let's copy what we have
590:31 - and we'll replace coordinates at index
590:33 - two with
590:34 - three and we'll also replace
590:38 - w info underscore width with height
590:43 - and coordinates at index one
590:46 - change self dot x velocity with y
590:49 - velocity
590:50 - same thing here as well alright and
590:54 - that should be everything let's try it
590:58 - so let's see if this ball actually
590:59 - bounces off the borders
591:02 - which it does pretty cool so that's
591:04 - everything we need to do within our ball
591:06 - class
591:06 - now if we need to create multiple balls
591:09 - we can just construct them
591:10 - so let's say this time we would like a
591:12 - tennis ball
591:14 - i'm going to name this volleyball as
591:16 - tennis ball and
591:18 - let's make the diameter smaller like
591:20 - five but we'll make this a lot faster
591:22 - like
591:23 - for the velocity let's say four and
591:25 - three and the color
591:26 - let's make this yellow and we also need
591:30 - to call the
591:31 - move function of this tennis ball so
591:33 - within the while loop
591:34 - tennis ball dot move and then we should
591:38 - also have a tennis ball moving across
591:40 - the screen
591:40 - in a different direction now technically
591:43 - we don't need to print the coordinates
591:44 - but i tend to do that just for
591:46 - teaching purposes to better demonstrate
591:48 - all of this
591:49 - now our ball class is acting as a
591:52 - blueprint
591:53 - for how balls should be created and the
591:55 - behavior that they exhibit
591:57 - and if we need to create a ball we can
591:59 - just come up with a name for the ball
592:01 - and call the ball constructor to take
592:03 - care of that for us
592:05 - kind of like what we've been doing with
592:06 - widgets so all we need to do to create
592:09 - another ball
592:10 - is come up with a unique name for the
592:11 - ball and instantiate it using
592:13 - our ball class that we created so this
592:15 - time let's create
592:17 - a basketball i'll rename this as
592:19 - basketball
592:20 - and we'll pass in different arguments
592:22 - based on how we want to customize
592:25 - this unique ball so for the diameter
592:28 - let's say this is now 125
592:30 - and the x and y velocity let's set this
592:32 - to something very fast like
592:35 - eight and seven and with the color let's
592:38 - change this to orange
592:40 - and make sure you also call the move
592:42 - function
592:44 - so basketball dot move and we should
592:47 - have a basketball moving across the
592:49 - screen
592:50 - all right everybody so that's the basics
592:53 - of animating multiple objects in python
592:55 - if you want
592:56 - a copy of all this code i'll post all of
592:58 - this in the comments down below
592:59 - but yeah that's how to animate multiple
593:01 - objects in python
593:04 - hey what's going on everybody it's ibro
593:06 - here hope you're doing well and in this
593:08 - video i'm going to teach you guys how we
593:09 - can create a clock program in python so
593:12 - sit back relax and enjoy the show
593:16 - all right my fellow bros in this video
593:18 - we're going to be creating a clock
593:20 - gui program so we'll need a few imports
593:22 - from
593:23 - tk enter import everything
593:27 - and from time import everything as well
593:31 - we'll need a window window equals tk
593:33 - followed by window.main loop
593:35 - and in this program we're going to be
593:37 - creating three separate labels
593:39 - one for the time another for the day of
593:41 - the week and another for the date
593:43 - so let's begin with just displaying the
593:45 - time and work on the day of the week and
593:47 - the date later
593:49 - so let's create a label for the time
593:51 - called time
593:52 - label equals label we're adding this to
593:55 - the window
593:56 - and let's set the font because we can
593:59 - i'm going to choose
594:00 - maybe ariel and then a size of 50 so
594:03 - that this is somewhat large
594:05 - i'm going to change the foreground color
594:07 - that is the font color
594:09 - and i will pick a hex value of green so
594:12 - that is
594:12 - 0 0 f 0 0 but feel free to pick whatever
594:16 - color you want
594:17 - and i'm also going to set the background
594:19 - color and you can pick a hex value or a
594:21 - color name i'm just going to say black
594:24 - and then i'm going to pack this label
594:27 - time label dot pack
594:32 - now we're going to call a function and
594:35 - we'll call this update
594:37 - and we'll define what this does after
594:39 - every second has passed
594:40 - we will use a recursive function to keep
594:43 - on updating the
594:44 - time every one second or so so let's
594:47 - define what this function does
594:49 - def update
594:52 - there is a function within the time
594:54 - module called strf time
594:57 - which we can use to return the current
594:59 - time and format it however we want
595:01 - so we're going to actually place this
595:03 - within a string variable and we'll call
595:05 - this time
595:06 - string and this function is strf
595:10 - time i'm actually going to go to
595:12 - python's website just to give you an
595:14 - example of how this works
595:15 - here we are on python's website and this
595:18 - is the
595:18 - strf time function and this converts a
595:22 - tuple representing a time as returned by
595:26 - gm time or local time to a string
595:29 - as specified by the format arguments
595:32 - so when we call this function we can
595:35 - pass in
595:36 - directives as arguments based on what we
595:39 - want to display
595:40 - if we want to display the current time
595:42 - there is a few directives that we can
595:44 - pass in
595:45 - so let's say that we want a 12 hour
595:48 - clock as represented by a decimal number
595:50 - between
595:51 - 1 and 12 well we would pass in percent
595:54 - i as an argument if we want the minutes
595:57 - that would be
595:58 - right here percent m and if we want the
596:01 - seconds that is
596:02 - percent s so we're going to pass in
596:05 - these directives
596:06 - as if they are arguments so within
596:09 - this function we'll pass in those format
596:13 - specifiers or directives so i want
596:16 - percent i followed by
596:20 - percent m and percent
596:23 - s alright uh but these also have to be
596:27 - within quotes so don't forget that
596:28 - because i just did
596:32 - okay this will display the current time
596:35 - oh then we also have to update our time
596:38 - label so
596:39 - time label dot config
596:44 - text equals our time string because
596:47 - remember that this
596:48 - returns a string of text
596:52 - text equals time string so this will
596:54 - display the current time
596:56 - and right now it is six in the morning
596:59 - or so
596:59 - however we just get one long jumbled
597:02 - number
597:03 - so it would be a good idea if we
597:05 - separated some of these numbers
597:07 - so within our strf time function i'm
597:10 - just going to add some colons to
597:11 - separate these values
597:15 - and this will display the current time
597:17 - it is currently 6
597:18 - 46 in the morning let's add am or pm to
597:22 - the end of this
597:23 - so the directive for that is percent
597:26 - lowercase p
597:29 - 6 46 am now how do we update this label
597:33 - every one second to reflect the current
597:35 - time
597:35 - well that's a good question and i'm glad
597:37 - you asked it so we're going to use
597:39 - the time labels after function
597:42 - we pass in a delay and then a function
597:45 - that we want to call
597:46 - after that delay so let's say we want to
597:49 - call this function update every 1000
597:52 - milliseconds
597:53 - or one second so we'll pass in the delay
597:56 - as an argument
597:57 - 1000 milliseconds and the function that
597:59 - we want to call
598:00 - and we're going to perform what is known
598:02 - as a recursive
598:04 - function we're going to call a function
598:07 - within itself so after 1000 seconds
598:10 - we're going to call
598:11 - update again and it's going to repeat
598:12 - the process it's going to return the
598:14 - time
598:15 - and format that time and update
598:18 - our label with the new time so what ends
598:21 - up happening now
598:22 - is that our clock is going to update
598:25 - every 1000 milliseconds
598:28 - now let's add a few other labels let's
598:30 - say the day of the week
598:32 - i'm going to copy what we have here and
598:34 - let's rename this as
598:36 - day label
598:40 - but i probably don't want this to be the
598:42 - same size for the font let's say
598:44 - ink free because i like that font and a
598:48 - size of maybe 25 and i'll get rid of the
598:50 - coloring
598:53 - it's the same process as before really
598:56 - so let's replace
599:00 - time string with day string
599:05 - the directive for strf time to display
599:09 - the day of the week
599:11 - is percent a
599:14 - and we're going to replace time label
599:17 - with
599:18 - day label text equals day string
599:23 - and this will display the day of the
599:25 - week and it is currently
599:27 - wednesday and if we want to display
599:31 - the current date we can create a label
599:34 - and we'll call this
599:36 - date label
599:40 - and i'll make the font slightly bigger
599:41 - maybe 30.
599:44 - we'll copy what we have for our day
599:46 - string
599:48 - and rename this as date string
599:54 - so we have a few options for the date i
599:56 - want to display
599:58 - the name of the month the day and then
600:00 - the year
600:01 - so that would be percent capital b
600:06 - percent lowercase d i'm going to add a
600:09 - comma to separate the day and the year
600:12 - and percent capital y
600:15 - and then i want to set the text of my
600:17 - date label
600:18 - to my date string so that this will now
600:22 - display the current date there's just
600:24 - one quick change that i think we should
600:26 - make
600:26 - right now we have three different labels
600:28 - a time label a day label
600:30 - and a date label and right now we're
600:33 - using the after function of the time
600:35 - label
600:36 - so since we have all of these different
600:37 - labels i think we should replace time
600:39 - label
600:40 - with our window because our window has
600:42 - an after function as well
600:44 - so that after 1000 milliseconds has
600:47 - passed
600:47 - we can update the time the day of the
600:50 - week
600:50 - and the date all right so that's the
600:53 - basics of creating a simple clock
600:55 - program in python if you want a copy of
600:57 - all this code
600:58 - i'll post all of this in the comments
600:59 - down below but yeah that's the basics of
601:01 - creating a clock in python
601:04 - hey what's going on everybody it's you
601:06 - bro hope you're doing well
601:07 - and in this video i'm going to show you
601:08 - all how we can send an email using
601:10 - python so
601:11 - sit back relax and enjoy the show
601:16 - oh a quick note for you all you're going
601:17 - to need a gmail account to sign into
601:20 - as well as your username and password so
601:22 - once you have those set you're ready to
601:24 - begin
601:24 - all right let's begin by importing the
601:27 - simple mail
601:28 - transfer protocol library we'll need a
601:31 - couple variables to hold strings
601:32 - let's say we have a sender a receiver
601:37 - a password
601:40 - a subject for your email as well as
601:44 - a body for the email okay sender is
601:46 - going to be you
601:47 - sending the email so enter your email in
601:49 - here i'm just going to make up one
601:51 - you at gmail.com
601:54 - actually sender would be better i would
601:56 - say let me change that sender at
601:58 - gmail.com
601:59 - let's say we have a receiver this is who
602:01 - you're going to send the email to
602:04 - receiver gmail.com
602:07 - don't actually enter in these emails use
602:09 - your owner the person that you intend to
602:10 - send the email to for your test
602:12 - because these will probably not work i'm
602:14 - assuming
602:15 - then enter the password for your gmail
602:17 - account so let's say
602:20 - password123 and a subject
602:23 - uh let's say python email
602:27 - test and a body what do you want to say
602:30 - within your email
602:32 - i wrote an email
602:36 - okay so that should be good so remember
602:38 - that you're going to want to change
602:40 - these to your actual
602:41 - gmail account and you'll want to send it
602:43 - to a valid email address too
602:45 - and make sure that you use your password
602:47 - for your gmail account
602:49 - okay now we're going to create a header
602:51 - for our email and the syntax on this is
602:53 - a little strange we're going to say
602:55 - message
602:56 - f and then triple quotes so what this
602:59 - triple quotes is
603:00 - is that a triple quote string can span
603:03 - multiple lines of text so the first
603:06 - thing we'll enter is
603:07 - from within our header from and then
603:10 - since we're using an f-string we can
603:12 - insert
603:13 - a variable at a given location when we
603:16 - insert
603:16 - a pair of these curly braces so from
603:20 - will be sender the next line
603:23 - to colon
603:27 - receiver then the next line
603:30 - subject colon
603:34 - subject this will be the title of the
603:36 - email then i'm going to add a new line
603:39 - and then insert the body
603:43 - and if you want you can give yourself a
603:45 - name when you send this email
603:47 - let's say maybe snoop dogg and if
603:50 - there's somebody you want to send the
603:51 - email to
603:52 - and give them a name you can say like
603:55 - nicholas
603:56 - cage but these aren't necessary
603:59 - okay so we have our header completed let
604:02 - me just add a note that this is our
604:03 - header
604:05 - okay we're going to create a server
604:07 - object
604:08 - server equals smtplib.smtp
604:17 - there are two arguments the first is
604:20 - smtp
604:25 - the other argument is the port number
604:28 - and that is going to be
604:29 - 587 that is the default mail submission
604:32 - port
604:33 - 587 now we're going to take our server
604:36 - object
604:37 - and start tls transport layer security
604:42 - okay now we need to log in so server
604:46 - dot login we will pass in
604:50 - our sender email that's us as well as
604:53 - our password
604:56 - password and let's print
605:02 - logged in
605:06 - we'll eventually place all this within a
605:08 - try and accept block later
605:10 - all right and then to send an email type
605:13 - server dot send mail
605:17 - and we pass in our self sender
605:20 - receiver and our message
605:23 - sender comma receiver
605:27 - comma message and let's print a
605:31 - confirmation
605:32 - print email has
605:36 - been sent now if you were to run this
605:39 - program
605:40 - you may encounter this error smtp
605:43 - authentication error that either means
605:45 - your username
605:46 - password combination was not correct or
605:49 - you need to turn on
605:50 - the less secure app access on your gmail
605:53 - account
605:54 - which you can find here however i would
605:56 - recommend turning that back off when
605:58 - you're done with this program just
605:59 - because
606:00 - your account will be less secure and i'm
606:02 - not liable if you get hacked hey you
606:03 - know what
606:04 - let's place this code within a try block
606:06 - we will try
606:07 - all of this code and then if we
606:10 - encounter
606:10 - this exception we can catch and handle
606:13 - it properly
606:14 - so we will try these four lines of code
606:17 - and we will handle
606:18 - our exception of smt lib dot
606:21 - smtp authentication error
606:25 - that means we could not sign in so let's
606:27 - print
606:28 - unable to sign in
606:32 - so i'm going to run this one more time
606:34 - and instead of getting that ugly error
606:36 - we should get a simple message that says
606:38 - unable to sign in once you have the
606:40 - proper username password combination for
606:42 - your gmail account
606:43 - and if you need to set less secure app
606:46 - access to on
606:47 - but make sure that you turn it back off
606:49 - when you're done with this you should be
606:50 - able to send an email
606:51 - let's try it logged in email has been
606:54 - sent
606:55 - here is a snapshot of the email that i
606:57 - received
606:58 - i blurred out my actual email because i
607:00 - don't want it public because
607:01 - some of you guys are weird so we have
607:04 - our sender
607:05 - our receiver and i gave myself a
607:07 - nickname of snoop dogg that's why it
607:09 - says snoop
607:10 - to nicholas the receiver but you don't
607:12 - actually need a name for these as long
607:14 - as you have the sender and receiver
607:16 - fields filled in you should be good
607:18 - we have our subject python email test
607:21 - as well as our body i wrote an email
607:24 - well everybody that's how to write and
607:26 - send a simple email using python if you
607:28 - would like a copy of this code i will
607:30 - post this to the comment section down
607:32 - below
607:32 - but yeah that's how to send a simple
607:34 - email using python
607:37 - hey what's going on everybody it's you
607:39 - bro hope you're doing well
607:40 - and in this video i'm going to show you
607:41 - all how we can run a python file using
607:44 - command prompt so
607:45 - sit back relax and enjoy the show
607:50 - hey y'all in today's video i'm going to
607:52 - show you all how we can run a python
607:53 - file with command prompt
607:55 - so first we'll need a script to work
607:57 - with let's just make a very simple
607:59 - program
608:00 - let's say print hello world and then
608:03 - maybe we will ask
608:04 - for some user input name equals input
608:08 - what's your name and then at the end
608:12 - we will print the word hello
608:16 - plus the user's name okay so
608:20 - let's save this to a place that will
608:22 - remember perhaps
608:23 - my desktop now to save this file to a
608:25 - separate location go to
608:27 - file save as you can pick a name for
608:30 - this python file
608:32 - then to directory click these three dots
608:34 - and pick a location you want to save
608:36 - this to
608:37 - to make this easy i'm going to save this
608:39 - python file to my desktop
608:40 - and then click ok so the name of this
608:43 - python file of mine
608:44 - is hello underscore world dot py then
608:48 - click ok
608:49 - now our second step is to open command
608:51 - prompt to open command prompt just
608:53 - search for
608:54 - cmd if you're using mac i believe it's
608:57 - terminal
608:58 - step number three is that we need to
609:00 - navigate to the directory that contains
609:02 - our python file i saved this python file
609:05 - to my desktop
609:06 - so if you right click on your file and
609:08 - go to location you can just copy this
609:10 - address
609:11 - now within command prompt type cd to
609:13 - change directory
609:15 - space and then paste that directory
609:18 - that contains your python file hit enter
609:21 - and for the last step we need to invoke
609:23 - the python interpreter by typing
609:25 - python space and then
609:29 - the name of the script and the name of
609:31 - my script is hello
609:32 - underscore world dot p y hit enter to
609:36 - run the script
609:37 - hello world what is your name bro hello
609:40 - bro
609:41 - so that is how to run a python file with
609:43 - command prompt i will post all of these
609:45 - notes to the comments section down below
609:47 - and well
609:48 - yeah that's how to run a python file
609:50 - with command prompt
609:52 - it's you bro hope you're all doing well
609:54 - and in this video i'm going to show you
609:55 - all how we can use pip for python to
609:58 - download packages and modules so sit
610:00 - back
610:01 - relax and enjoy the show
610:05 - alright people pip for python pip is a
610:08 - package manager for packages and modules
610:10 - from the python package index if you're
610:13 - using
610:14 - python version 3.4 or above pip should
610:17 - already be installed
610:18 - if you're using a python version below
610:21 - 3.4
610:22 - one option is that you can always update
610:24 - your version of python just click
610:26 - download open when done
610:30 - go to customize installation make sure
610:32 - that pip
610:33 - is checked go to next and add
610:36 - python to environment variables then
610:38 - install
610:40 - now to use pip open up command prompt
610:42 - and type pip
610:43 - for a help menu all sorts of different
610:47 - general options and commands will appear
610:49 - if you need to check
610:50 - your version of pip type this command
610:53 - and here's a cheat sheet that i wrote
610:55 - so to check the current version of pip
610:57 - type pip
610:58 - dash dash version enter
611:02 - and currently the version that i'm using
611:05 - is 21
611:06 - if you need to upgrade pip use this
611:08 - command pip
611:10 - install dash dash up
611:14 - grade pip mine should be the latest
611:18 - version
611:18 - yeah requirement already satisfied and
611:21 - if you need a list of installed packages
611:24 - type
611:24 - pip list
611:28 - so here's all of the packages that i
611:31 - currently have installed
611:32 - some of these you might recognize like
611:34 - numpy
611:35 - pie game pie installer those are just a
611:38 - few to check to see if any of your
611:40 - packages
611:41 - are outdated type pip list
611:45 - dash dash outdated
611:49 - and this might take a second here are
611:51 - four packages that are outdated on my
611:53 - computer
611:54 - babel pi game pi tz and setup tools
611:58 - if you need to upgrade one of your
611:59 - packages type pip
612:01 - install the name of the package let's
612:04 - say that i would like to update pygame
612:06 - then dash dash upgrade
612:10 - i just realized that in my notes i'm
612:12 - missing updated package so i just added
612:14 - that here
612:15 - now you can see that pie game has
612:17 - successfully
612:18 - updated and let's just check to see if
612:20 - it has by using
612:22 - pip list outdated pip
612:25 - list dash dash outdated
612:29 - and pi game is no longer in here so it
612:32 - is up to date
612:33 - and if you would like to install a
612:34 - package type hip
612:36 - install and the name of the package you
612:38 - would like to download
612:39 - let's say i would like to download
612:41 - pandas pip
612:42 - install the name of the package in this
612:44 - case pandas
612:47 - two valley boring minutes later and it's
612:50 - done
612:50 - so i should now have pandas installed
612:52 - and let me check
612:54 - pip list
612:57 - and here it is i have successfully
612:59 - downloaded the package of pandas
613:02 - so those are a few commands for pip and
613:05 - if you're interested in downloading more
613:06 - packages head to python's package index
613:09 - on second thought i should probably show
613:11 - you all where that is python's package
613:13 - index
613:14 - is located at pipi.org
613:17 - and you can do a search for all sorts of
613:19 - different projects and packages
613:21 - so everybody that is pip4 python i will
613:24 - post my notes in the comments section
613:25 - down below
613:26 - and well yeah that's how to use pip for
613:29 - python
613:30 - hey what's going on everybody it's bro
613:32 - hope you're doing well
613:33 - and in this video i'm going to show you
613:34 - all how we can convert a python file to
613:37 - an executable
613:38 - so sit back relax and enjoy the show
613:43 - here's a quick disclaimer before we
613:45 - begin windows defender and other
613:47 - anti-virus programs may prevent your
613:49 - executable from running but if you head
613:51 - to the settings section of your
613:52 - anti-virus you can disable that so that
613:54 - your python file can run
613:56 - also please be sure that pip and pi
613:58 - installer are both installed and up to
614:00 - date
614:01 - i have a separate video on that if
614:03 - you're interested now the program that
614:04 - i'm going to be converting to an
614:06 - executable
614:06 - has a gui portion to it i created a
614:09 - clock program in a previous video
614:11 - so i'm going to turn this clock program
614:13 - into an executable
614:15 - now i recommend creating a new folder on
614:17 - your desktop just because this process
614:19 - is normally somewhat messy so we'll
614:21 - create a folder to contain it all
614:23 - now copy any relevant python files and
614:25 - or images and paste them to within
614:27 - this folder if you have an image that
614:29 - you would like to set as an icon for
614:31 - your executable
614:32 - i recommend moving that to the same
614:33 - folder as well our next step is to open
614:36 - command prompt
614:38 - and we need to change the directory of
614:40 - command prompt so that it's pointing to
614:42 - that folder that contains our python
614:44 - file
614:44 - so on your python file right click on it
614:46 - go to properties and copy
614:48 - this location and in command prompt to
614:52 - change directory type
614:53 - cd space and then paste that location
614:56 - now here's the cheat code to convert a
614:58 - python file to an executable
615:00 - make sure that pi installer and pip are
615:02 - installed and both
615:03 - up to date so type pi installer
615:07 - dash capital f to make all of this one
615:10 - file
615:11 - if you need the terminal window in your
615:14 - program
615:14 - then omit this next part since i'm
615:16 - running a gui application i do not need
615:18 - that terminal window
615:20 - so to remove that window type dash w
615:23 - if you have an icon that you want to set
615:26 - type dash
615:27 - i and the name of your icon however it
615:30 - should be an ico file
615:32 - so if you have some other image that you
615:34 - would like to convert to an ico file
615:36 - here's how if you need to convert an
615:39 - image to an ico file
615:41 - you can just google convert to ico but
615:43 - one website that i commonly use
615:45 - is icoconvert.com just pick a file to
615:48 - upload
615:49 - so choose file i'm going to convert this
615:52 - png file of an alarm clock
615:54 - upload it there is a bunch of different
615:57 - settings you can use
615:58 - convert ico and then download my icon
616:02 - and once your ico file is downloaded i
616:04 - will drag and drop it to my folder
616:06 - and i will rename this let's rename this
616:09 - as
616:09 - icon dot ico and here's that cheat code
616:13 - one more time pi installer dash f
616:16 - dash w if you do not need the terminal
616:18 - window
616:19 - dash i if you would like to add an icon
616:22 - the name of your icon it should be an
616:23 - ico file
616:24 - followed by the name of the python file
616:27 - and mine is named
616:29 - clock.p.y then hit enter
616:36 - alright looks like building our
616:39 - executable has completed successfully so
616:41 - open that folder back up
616:43 - your executable is located within this
616:45 - dist folder
616:46 - i would recommend just dragging and
616:48 - dropping it to your desktop
616:50 - and we can get rid of this old folder
616:53 - but close out a command prompt and by
616:56 - clicking on this executable
616:58 - this executable will now run my python
617:00 - program
617:01 - well everyone that is how to convert a
617:03 - python file to
617:04 - an exe file i will post my notes to the
617:07 - comment section down below
617:08 - and well yeah that's how to convert a
617:10 - python file to an executable
617:13 - what's going on everybody it's you bro
617:15 - hope you're doing well
617:16 - and in this video i'm going to show you
617:17 - all how we can create a basic calculator
617:19 - using python so
617:21 - sit back relax and enjoy the show
617:26 - let's create a calculator after
617:27 - importing tkinter we'll need to define
617:30 - three separate functions our first
617:32 - function will be named
617:33 - button press and there is one parameter
617:37 - which we will call num we're not going
617:39 - to fill this in quite yet we'll get back
617:41 - to it later we'll use
617:42 - pass as a placeholder we'll also need an
617:45 - equals function to calculate our
617:47 - expression
617:50 - and a function to clear our calculator
617:55 - okay that's it for our three functions
617:57 - let's create a window
617:58 - window equals tk and at the end of our
618:02 - program
618:02 - we'll write window.mainloop
618:06 - let's set a title window
618:09 - dot title calculator
618:14 - programs good but make sure you spell
618:17 - title right
618:21 - and let's set a geometry of
618:25 - 500 500 should be decent
618:29 - now we're going to create a string named
618:31 - equation
618:32 - text equals a set of quotes
618:36 - this will effectively be empty for the
618:38 - time being
618:40 - and we'll need to create a string var
618:42 - and i will call this
618:44 - equation label equals string
618:48 - var let's create a label
618:51 - label equals label we're adding our
618:54 - label
618:54 - to our window i will set our text
618:58 - variable equal to our equation label
619:04 - you can pick a font if you wish
619:11 - i'll set the background color equal to
619:13 - white
619:17 - a width of 24
619:20 - and a height of two
619:24 - and we need to finish this by using
619:26 - label dot pack
619:27 - and we should have a blank label within
619:30 - our calculator
619:31 - this will display our numbers that we're
619:33 - entering in or our expression
619:36 - okay this is the tedious part we have to
619:38 - create all of the buttons and i think we
619:40 - should place these all within a frame
619:42 - frame equals frame we're adding our
619:44 - frame to our window
619:46 - frame dot pack
619:50 - now let's create button one we'll do
619:52 - some copying and pasting later
619:53 - so it's not as tedious so button one
619:57 - equals button we're adding our button to
620:00 - our frame
620:01 - i'll set the text equal to 1
620:04 - the height equal to 4 and the width
620:07 - equal to 9 and a font size
620:11 - of 35
620:15 - okay we'll need a command command
620:18 - equals i'll write a lambda function here
620:22 - lambda we will call button press
620:28 - i think i'm going to put this on the
620:29 - next line just so it's easier to read
620:31 - button press and we will pass in the
620:33 - number one
620:35 - and we need to add our button to our
620:37 - frame
620:38 - button one dot grid
620:42 - and i'm going to set a row equal to zero
620:45 - and a column
620:46 - equal to zero and let's just test it
620:50 - okay let's add the other buttons i'm
620:53 - going to copy and paste everything that
620:54 - we have for button one
620:56 - and change button one to button two
621:00 - set the text equal to two pass into
621:03 - to button press and for the row and
621:06 - column
621:06 - i'm going to set the column equal to one
621:09 - but keep row the same
621:11 - okay button three
621:15 - it's gonna be the same process really so
621:19 - text equals three
621:20 - button press three row zero column two
621:27 - and button four
621:30 - text equals four button press
621:34 - four column
621:37 - actually let's set this to row one
621:40 - column zero and i need to change that
621:44 - too
621:47 - okay let's just double check this
621:52 - okay button five
621:57 - so button five text equals five
622:01 - button press five and
622:05 - let's set column equal to one
622:10 - okay number six i told you all this is
622:14 - going to be tedious
622:21 - okay so row one column two
622:29 - button seven
622:38 - okay so row two column two
622:44 - actually let's change that to column
622:46 - zero
622:48 - much better okay
622:51 - button eight
622:55 - eight eight eight eight
622:59 - row two column one
623:04 - number nine
623:14 - row two column two
623:20 - and lastly zero
623:26 - so button zero
623:30 - text equals zero button press pass in
623:33 - zero
623:34 - and this will be row three column
623:38 - zero okay
623:41 - not too bad now let's fill in some of
623:43 - the symbols
623:45 - so we need plus
623:49 - i'm just going to rename this as plus
623:54 - the text will equal the plus sign put
623:58 - that within quotes
624:00 - and button press will be plus
624:05 - oh and we should probably put this in a
624:07 - row and column so let's say
624:09 - row 0 column three
624:12 - so it should be on the right hand side
624:14 - here
624:15 - okay we need minus
624:25 - let's change plus to minus
624:30 - and place this at row one column three
624:36 - we need multiply
624:45 - that is an asterisk
624:51 - row two column three
624:55 - and divide
625:04 - that is a forward slash
625:12 - row three column three
625:18 - i promise we're near the end of creating
625:20 - these buttons we'll need an equal sign
625:23 - let's say equal
625:27 - equal text
625:31 - is the equal sign and our command
625:34 - is going to be
625:37 - equals the function
625:41 - and this will be row 3 column 2.
625:50 - we need a decimal
626:02 - let's change the text to a decimal
626:08 - row three column one
626:13 - okay and lastly we just need a clear
626:16 - button let's put this at the bottom
626:24 - so clear clear
626:28 - let's set the text equal to the word
626:31 - clear
626:33 - and the command will be our clear
626:36 - function
626:38 - and i think i'm going to pack this at
626:40 - the end
626:42 - but let's change frame to window
626:46 - okay let's check out all these buttons
626:50 - okay not too bad i think i'm going to
626:51 - change the width on our clear button so
626:53 - it's a little bit wider
626:55 - let's change the width to 12.
626:58 - that's a little bit better okay let's
627:01 - fill in some of these functions
627:03 - let's start with button press we're
627:06 - going to state
627:07 - global equation
627:10 - text then our equation text
627:16 - is equal to equation text plus
627:20 - we're converting whatever number or
627:22 - symbol that we receive
627:24 - to a string and our equation
627:29 - label which is a string var will be set
627:32 - to our equation text
627:36 - and let's test this
627:39 - so we can type in any combination of
627:42 - numbers or symbols
627:47 - okay let's work on our equals
627:50 - function next so let's say
627:53 - global equation
627:57 - text total
628:01 - equals
628:04 - eval now eval will parse the expression
628:07 - that we pass in
628:10 - equation
628:14 - text
628:17 - and our equation label
628:20 - will be set to whatever our total is
628:26 - and if we want to reuse our total let's
628:28 - set
628:29 - our equation text
628:33 - equal to total 2 plus 2
628:37 - equals four minus three equals one
628:41 - times five equals five divided by two
628:44 - equals two point five now what if we
628:47 - divide by zero
628:49 - well we'll run into that ugly zero
628:51 - division error
628:53 - so let's write our code within a try and
628:55 - accept block
628:56 - so i'm going to indent some of this
629:01 - and let's write try all of this code
629:04 - and we will catch a zero division error
629:06 - exception
629:08 - so accept zero division error
629:15 - and i will set our equation
629:19 - label set
629:22 - let's say arithmetic
629:26 - error equation text
629:30 - equals a set of quotes okay so we should
629:33 - be able to catch this exception now
629:37 - five divided by zero equals arithmetic
629:40 - error
629:41 - now what if we have a syntax here
629:45 - like we type in just a bunch of symbols
629:46 - and hit equals
629:49 - we'll probably want to catch the syntax
629:51 - error as well
629:52 - so let's write an additional accept
629:55 - block before
629:56 - zero division error or after i guess it
629:59 - doesn't matter
630:01 - accept syntax
630:04 - error let's change arithmetic to
630:09 - syntax and we can keep equation text the
630:11 - same
630:13 - so now our program won't crash if we
630:15 - type in a bunch of symbols
630:17 - syntax error now let's work on the clear
630:20 - button
630:22 - so that is within the clear function
630:28 - so we will set global
630:31 - equation text
630:36 - equation label
630:41 - dot set to a set of quotes to
630:43 - effectively clear it
630:46 - and our equation
630:49 - text equal to a set of quotes as well
630:54 - and that should be it for this program
630:55 - let's run this one last time
630:57 - let's say 3.14 times
631:01 - 2.1 equals 6.594
631:05 - divided by 2.1
631:08 - equals 3.14 minus one i'm just making up
631:12 - numbers here
631:13 - plus ten equals twelve point one four
631:16 - and let's clear this and start again one
631:19 - plus
631:19 - two plus three plus four equals ten
631:23 - i think that's good enough all right
631:24 - everybody so that's how to create a
631:26 - basic
631:27 - calculator in python i will post all of
631:29 - my code in the comments section down
631:31 - below if you would like a copy for
631:33 - yourself
631:34 - but yeah that's how to create a basic
631:36 - calculator using python
631:38 - hey what's going on everybody it's your
631:40 - bro hope you're doing well and in this
631:42 - video i'm going to explain how we can
631:43 - build a basic text editor program in
631:46 - python so
631:47 - sit back relax and enjoy the show
631:51 - okay people let's create a text editor
631:53 - here's all the different imports that
631:55 - you'll need and we'll begin by defining
631:57 - all of the different functions that
631:58 - we'll need
631:59 - so let's say we have a change color
632:01 - function to change the color
632:03 - of our font and for all of these
632:05 - functions i'm going to write pass as a
632:07 - placeholder
632:08 - so we have change font and
632:12 - this function will accept a varying
632:14 - amount of arguments
632:15 - so we'll use that args keyword
632:19 - we will need to open a file new
632:23 - file
632:27 - open file
632:34 - save file
632:40 - cut
632:44 - copy
632:49 - paste yeah there's a lot of functions
632:52 - here
632:54 - about
632:57 - this is for an about section
633:01 - and lastly quit
633:05 - so how many do we have one two three
633:09 - four five six seven eight
633:12 - nine ten ten functions let's create the
633:15 - main window that we're gonna work with
633:17 - window equals tk
633:20 - and at the very end window.main
633:24 - loop
633:27 - okay so let's create a title for this
633:28 - window window
633:30 - title notepad
633:34 - program i guess or maybe text editor
633:36 - program would be more appropriate
633:39 - text editor program
633:44 - okay and we will need a file to work
633:46 - with and i'll declare that now
633:48 - file equals none
633:51 - we'll need a window width and height
633:55 - window with equals 500 is good and a
634:00 - height
634:03 - okay so let's attempt to center this
634:05 - window
634:06 - because right now it just appears to the
634:08 - side
634:10 - so our next step is to get the screen
634:12 - width
634:16 - equals window dot w
634:20 - info screen width
634:24 - and i'll copy this for screen height
634:35 - okay so we need to figure out how much
634:37 - we're going to move our window on the x
634:39 - and y axis so let's say x
634:42 - equals screen
634:46 - width divided by 2
634:49 - minus
634:52 - window width divided by
634:56 - two and we're going to cast all of this
634:58 - to an
634:59 - end so add an inch cast around this
635:04 - let's copy this do the same thing for y
635:08 - except this will be screen height
635:11 - and window height
635:17 - okay let's set the geometry for the
635:19 - window window
635:21 - geometry i'm going to use a
635:24 - string format method so let's say
635:32 - these will be placeholders for our
635:34 - values
635:37 - so we have window width for the first
635:40 - value
635:42 - window height
635:46 - x and y so this should be near the
635:50 - middle
635:51 - cool
635:55 - we're going to create a string var
635:57 - variable to hold the
635:58 - font name font name
636:02 - equals string var
636:05 - and pass in your window and you can set
636:08 - this to
636:09 - what do you want your default font to be
636:12 - so let's say font
636:13 - name dot set and then pick a font
636:16 - i'll use ariel i think
636:19 - let's create a font size string bar as
636:22 - well
636:28 - we're going to add this to the window
636:32 - and we can set a default size
636:37 - perhaps 25.
636:40 - okay let's create a text area
636:43 - text area equals text
636:48 - we're adding this to the window i'm
636:51 - going to set a
636:52 - font equal to font
636:55 - name dot get the name of the font that
636:59 - we want to use
637:00 - will be the font that we set within our
637:03 - font
637:03 - name string var so now we'll use a size
637:07 - of font size dot get
637:11 - font size dot get
637:16 - okay now we need a scroll bar
637:20 - scroll bar equals
637:23 - scroll bar
637:26 - writing this to our text area so pass
637:29 - that in
637:31 - and i'm going to configure my window
637:34 - using grid row configure
637:39 - this will allow our text area to expand
637:42 - but we're going to set a weight equal to
637:44 - 1 so that it doesn't back expand
637:47 - and then we need column configure
637:55 - okay and text
637:59 - area dot grid
638:03 - i'm going to use the sticky keyword and
638:07 - this will stick north plus east
638:10 - plus south plus west
638:14 - so my text area should take most of the
638:16 - window
638:19 - this is some sample text
638:24 - hooray so it goes down to the next line
638:27 - once it runs out of room on one line
638:29 - unless you resize the window which is
638:31 - exactly what we wanted
638:33 - let's create a scroll bar while we
638:37 - already created it we just have to
638:39 - add a few details to it
638:42 - so that will be near the bottom
638:45 - and why don't we say scroll
638:49 - bar dot pack
638:53 - side equals right
638:56 - fill equals y
639:00 - and then we just have to configure our
639:03 - text area
639:04 - with the scroll bar so text
639:08 - area dot config
639:12 - y scroll command
639:16 - equals scroll bar
639:20 - dot set so that should work but
639:24 - let's test it to be sure okay i'm just
639:27 - going to type a bunch of f's
639:31 - okay look at that our scroll bar works
639:34 - cool okay let's head to this portion
639:39 - and we'll create a bunch of buttons well
639:42 - a button
639:43 - an option menu and a spin box for the
639:46 - font color the size and the font style
639:49 - so i'm going to place all of these
639:51 - different widgets within a frame
639:53 - frame equals frame add it to the window
639:58 - and then i'm going to use frame dot grid
640:02 - okay let's create a color button to
640:05 - change the fonts color
640:07 - color button equals button
640:10 - i'll add my button to my frame
640:13 - i'll set the text of the button equal to
640:16 - color
640:18 - and i will associate a command of
640:21 - change color which we have already
640:23 - defined at the top
640:25 - where is it at the top here change color
640:32 - and then actually that's it for this
640:35 - portion
640:36 - so then we need to add this button color
640:40 - button dot grid i'll set the row
640:44 - equal to zero and the column equal to
640:47 - zero
640:48 - so let's be sure that this appears make
640:51 - sure you spell grid right
640:53 - okay and we have a color button but this
640:56 - button doesn't do anything
640:58 - so let's head to the change color
641:00 - function
641:02 - within the change color function we're
641:04 - going to say color
641:05 - equals color chooser
641:10 - dot ask color
641:14 - and you can set a title to
641:17 - pick a color or
641:21 - else you don't technically need a title
641:25 - and then text area
641:28 - dot config oh i should probably print
641:32 - this color
641:32 - so let me do that um i'm just gonna
641:35 - explain something here
641:36 - so this color is going to be i believe a
641:39 - tuple
641:39 - so let's print it so let's say that i
641:43 - would like
641:45 - white okay so we have a tuple we just
641:49 - need
641:50 - one of these values not both of them
641:53 - so i'm going to say
641:56 - text area dot config
642:00 - foreground equals our color but we do
642:03 - not want to assign a tuple
642:05 - to our color we just need one of these
642:07 - values so let's say i would like this
642:09 - hex value
642:11 - so i'm going to say at index 1
642:15 - and let's try it color
642:19 - perhaps i would like my text pink for
642:22 - some reason so we're going with pink
642:24 - this is some text i suppose
642:28 - and we can change this back too by using
642:30 - this color button now i would like
642:32 - blue and we have blue text okay so that
642:36 - is the change color function i'm going
642:38 - to minimize this because we do not need
642:40 - it anymore
642:41 - okay we're going to change the font next
642:44 - so
642:44 - head to the portion of our code right
642:48 - after the
642:49 - color button and we'll create an option
642:51 - menu
642:52 - to list all of the different fonts
642:53 - available to us so let's say
642:55 - font box equals option
642:59 - menu we're adding this to our frame
643:04 - we need to set a variable a string var
643:08 - so that will be our font name that we
643:10 - declared up here
643:12 - now here's a trick to add all of the
643:14 - fonts as options to our option menu
643:17 - we can use the unpacking operator which
643:20 - is an asterisk
643:21 - followed by font dot families
643:25 - and then call this function so this will
643:28 - return
643:29 - all of the different fonts available to
643:31 - us and we just need to set a command
643:34 - and when we use our option menu we'll
643:37 - call
643:38 - change font and we need to add
643:41 - our font box to our grid
643:46 - row equals zero and column
643:49 - equals one so this should be on the
643:51 - right hand side of our color button
643:55 - yeah it's going to look something like
643:56 - that and you can see the default is
643:58 - arial that we set
643:59 - and we can change it to something else
644:02 - like
644:03 - comic sans or whatever
644:06 - uh however it's not going to change it
644:08 - quite yet so that'll be the change font
644:10 - function
644:11 - before we fill in the change font
644:13 - function there's another widget that's
644:15 - going to share the same command of
644:17 - change font so we should create that
644:18 - next
644:19 - so our next widget is a spin box which i
644:22 - will name
644:23 - sizebox this will be in charge of
644:26 - increasing or decreasing the font
644:28 - so size box equals spin box
644:32 - we're adding the spin box to our frame
644:35 - and we'll set a range
644:37 - so from underscore you have to add that
644:39 - underscore it's kind of weird
644:41 - this is the range of our spin box for
644:43 - the font size
644:44 - from 1 to let's say 100
644:49 - the text variable will be
644:53 - font size
644:57 - and our command equals change
645:01 - font so when
645:04 - we use our spin box and call this
645:08 - command of change font it's going to
645:10 - pass in
645:11 - our font size as an argument whereas
645:13 - with option menu
645:14 - it doesn't pass any arguments that's why
645:17 - with our
645:17 - change font function we're accepting a
645:20 - varying amount of arguments
645:21 - because one's going to pass in an
645:23 - argument and the other isn't and we just
645:26 - need to add our spin box
645:28 - so that would be size box
645:32 - dot grid row equals zero
645:36 - and column equals two
645:39 - so we should have a spin box right on
645:42 - the bottom
645:43 - and it's set to 25 that was our default
645:46 - for
645:47 - our font size string var which we set as
645:50 - the text variable
645:52 - okay so we can fill in this function of
645:54 - change font now
645:55 - which will apply both to our option menu
645:58 - and our spin box
646:00 - so that is all the way at the top within
646:03 - the change font function
646:04 - we're going to take our text area
646:08 - dot config set
646:11 - the font equal to font
646:14 - name dot get
646:18 - and the size will be size box
646:22 - dot get and that's it for this function
646:25 - i'll minimize it for now and let's test
646:28 - it
646:30 - this is some sample text
646:34 - hey how you doing good
646:38 - looking okay so let's change
646:41 - the font uh let's pick comic sans or
646:45 - whatever you want
646:46 - and we can increase or decrease the size
646:51 - and we can change the color how about
646:54 - red this time
646:56 - all right nice now let's add a menu bar
646:59 - at the top so we can save this file or
647:02 - open a file or create a new file and
647:04 - some other stuff
647:06 - on second thought i'm going to move
647:08 - these two last lines of code
647:09 - to this section here
647:12 - where we create our scroll bar just so
647:14 - that it's more organized
647:16 - okay so at the bottom let's create
647:19 - various drop-down menus so we'll need a
647:21 - menu bar to begin with
647:23 - so let's say menu bar
647:27 - equals menu we're adding this to our
647:30 - window
647:31 - make sure that's capital by the way
647:35 - and window dot config
647:39 - menu equals menu bar
647:44 - so we'll create a file menu edit menu
647:46 - and
647:47 - a help menu so let's begin with the file
647:50 - menu to add to the menu bar file menu
647:54 - equals menu we're adding this to our
647:57 - menu
647:58 - bar and set a tear off equal to zero
648:06 - we'll need a cascade for it to actually
648:09 - be a drop down menu
648:10 - so that will be menu bar
648:14 - dot add cascade
648:21 - label equals file
648:25 - comma menu equals
648:28 - file menu
648:32 - let's see if anything appears yet yep so
648:35 - we have a file menu
648:37 - but there's nothing to drop down yet
648:40 - so we need some options
648:43 - well commands technically file menu
648:47 - dot add command
648:54 - label equals new
649:00 - and the command will equal our
649:03 - new file function
649:06 - actually i'll put these together okay so
649:09 - let's copy this
649:10 - and paste it we have open
649:16 - the command will be open file
649:22 - we have save
649:25 - the command will be save
649:28 - file and i'll add a separator
649:33 - file menu dot add
649:37 - separator and lastly
649:40 - we will have exit
649:44 - command quit
649:47 - okay let me show you what this looks
649:49 - like
649:51 - so here's our drop down menu
649:54 - that separator is this bold line going
649:56 - across
649:57 - so if i was to remove this then we
650:00 - wouldn't have that bolt line
650:01 - you can keep it in or get rid of it do
650:03 - whatever you want
650:05 - and this is the tear off so i'm going to
650:07 - remove the tear off
650:11 - and you get this like tear off line at
650:13 - the top i guess it's the default
650:15 - i usually don't like it so i set tear
650:17 - off equal to zero
650:18 - so that is our file menu let's work on a
650:21 - edit menu
650:24 - edit menu equals
650:27 - menu menu
650:32 - bar make sure that's capital two
650:38 - tare off equals zero
650:42 - we'll need a cascade menu bar
650:46 - dot add cascade
650:55 - label equals
651:00 - edit
651:02 - menu equals edit
651:06 - menu
651:10 - edit menu dot add
651:14 - command
651:19 - label equals cut to cut some text
651:25 - command equals copy
651:30 - actually that's cut my bad
651:33 - okay next is copy so let's copy this
651:36 - and paste it
651:40 - cut copy
651:44 - we have paste
651:47 - command paste
651:51 - all right let's take a look
651:55 - oh make sure you spell label right
651:58 - okay there we go okay so we can cut
652:01 - copy and paste and lastly we should have
652:05 - a help menu
652:08 - help menu equals
652:12 - menu menu
652:15 - bar tear off
652:19 - equals zero
652:22 - i think i'll copy this for my cascade
652:26 - so menu bar dot add cascade
652:30 - help menu equals help
652:33 - menu
652:38 - what we'll be doing for a command is
652:40 - that we'll be creating
652:41 - an about section that will bring up a
652:44 - pop-up window if you need to display
652:46 - any like help information or anything
652:49 - uh so let's say about and the command
652:52 - will be
652:54 - about okay let's take a look
652:58 - so we have help and we'll have an about
653:00 - section that will tell you more about
653:02 - this program
653:03 - but we need to work on some of these
653:05 - functions let's head to the quit
653:08 - function
653:09 - this one's fairly easy this is found
653:11 - within the file menu
653:12 - window dot destroy that will close out
653:16 - of the window
653:18 - so go to file then exit to exit the
653:22 - program
653:23 - we don't need it anymore so let's
653:25 - minimize this
653:26 - okay let's go to the about function
653:31 - let's bring up a message box show info
653:36 - this first argument is the title so
653:38 - let's say
653:39 - about this program
653:43 - and the text will be whatever you want
653:45 - to
653:46 - tell the user about this program this
653:49 - is a program written
653:53 - by you
653:57 - okay so we should have a pop-up window
653:59 - when you go to help
654:00 - then about about this program this is a
654:03 - program
654:04 - written by you the next function is the
654:07 - paste function so we can paste some text
654:10 - text area dot event
654:14 - generate and the event is going to be
654:18 - within quotes
654:19 - and double angle brackets
654:22 - paste let's copy this
654:26 - and change paste to copy
654:31 - and then cut
654:37 - okay so we should be able to cut copy
654:39 - and paste
654:44 - hey how's it
654:47 - hanging okay
654:50 - let's highlight this edit
654:54 - copy let's move down to the next line
654:58 - and paste and we should be able to cut
655:01 - as well
655:02 - edit cut nice
655:06 - head to the new file function
655:09 - and we'll set the title of our window to
655:12 - maybe
655:13 - untitled until we save something so
655:16 - untitled
655:20 - and i need to delete any text within our
655:23 - text area
655:24 - text area dot delete and we need to set
655:28 - a range so this has to be a floating
655:30 - point number
655:31 - the first character until the end
655:34 - let's try it so i'll write some sample
655:40 - text
655:42 - and we are going to go to file new
655:45 - that changed the title and it deleted
655:48 - our text
655:49 - so that is the new file function
655:52 - let's work on open file we are now
655:55 - within
655:56 - the open file function and we'll say
655:58 - file
655:59 - equals ask open
656:03 - file name so we have a
656:07 - default extension if you would like one
656:11 - default i think i spelled that wrong
656:14 - extension
656:18 - equals let's say a txt file
656:23 - comma what are the accepted file types
656:28 - i'll set this equal to
656:32 - all files
656:35 - comma and then we need asterisk
656:38 - dot asterisk for all file types
656:43 - as well as text documents
656:46 - so these are what is accepted when we
656:49 - look for a file so we have either all
656:52 - files
656:53 - or all text documents text
656:57 - documents comma
657:02 - asterisk dot txt
657:08 - okay so then let's try some code
657:14 - we'll set our window title
657:18 - equal to os dot path
657:21 - dot base name of our file
657:24 - so that we will change the title of the
657:26 - window
657:27 - to match whatever the file is that we
657:29 - opened
657:32 - then let's take our text
657:35 - area delete what's currently here
657:38 - from one until the end
657:42 - take our file use the open function
657:47 - open our file and read it so pass in our
657:52 - text area dot insert
657:58 - beginning at index of 1.0
658:04 - file dot read
658:07 - that you can catch any exceptions to
658:11 - i'll just write accept exception but
658:13 - it's better to name specific
658:15 - exceptions i'll just print
658:20 - couldn't read
658:24 - file and we should close our file at the
658:28 - end within a finally block
658:31 - finally file dot close
658:35 - we'll need a sample file to read so i'm
658:37 - going to create a new file on my desktop
658:40 - i'll call this test.txt
658:44 - and let's write something whoa
658:47 - you can actually read this
658:53 - awesome okay let's save
658:56 - close out of it add run our program
659:01 - file open test.txt
659:05 - open whoa you can actually read this
659:08 - awesome nice so we know that the open
659:12 - function is working
659:13 - if we need to create a new file just go
659:15 - to file new
659:17 - and that will delete our old text
659:20 - so lastly we have save file
659:25 - underneath the save file function file
659:28 - equals file dialog
659:31 - dot ask save as
659:34 - file name so this will be the default
659:38 - name for the file but you can change
659:40 - that
659:41 - initial file equals
659:45 - let's say untitled
659:49 - dot
659:53 - you txt set a default extension default
659:57 - extension equals let's say txt
660:05 - file types equals
660:14 - all files
660:18 - comma then asterisk dot asterisk
660:22 - for all file types
660:30 - and any text documents text
660:34 - documents
660:38 - asterisk dot txt
660:46 - okay if file
660:49 - is none that's if they close out of our
660:52 - file dialog
660:56 - we'll just return
660:59 - else
661:03 - so we'll set the window title first
661:07 - window title os dot path
661:11 - dot base name
661:16 - file
661:18 - file equals open open
661:22 - our file and write
661:27 - file dot right
661:31 - take our text area and get
661:34 - the text from
661:37 - index one through the end
661:42 - catch any exceptions it's better to name
661:45 - them instead of just
661:46 - doing a general accept exception
661:49 - but i'm just going to print couldn't
661:53 - save file
661:57 - and finally close our file
662:00 - file dot close all right so
662:03 - let's test it so i'm going to change
662:07 - the font i wonder if impact is in here
662:11 - yes it is i'll change the font size
662:15 - maybe 30 and i'll pick a color
662:18 - how about this swamp green color okay so
662:22 - write something perhaps some lyrics to a
662:24 - song you like
662:40 - i should probably test copying and
662:42 - pasting
662:43 - edit copy
662:46 - edit paste
662:50 - nice
662:55 - all right let's actually try and save
662:56 - this now i'll go to
662:58 - file save the default file name is
663:02 - untitled because we set it to that
663:05 - i'll say all star
663:09 - lyrics
663:13 - and save now i should be able to open
663:17 - this
663:18 - so i'm going to go to my desktop here's
663:21 - that text file
663:21 - i'm going to open it and here are the
663:23 - lyrics that i wrote within my text
663:25 - editor
663:26 - and let's try and read this so let's go
663:29 - to
663:29 - file open find your text document
663:33 - open and would you look at that my
663:35 - lyrics are still here
663:37 - however this program doesn't save the
663:39 - font
663:40 - so i thought of a fun last minute
663:42 - project that we can do we can actually
663:44 - use our text editor to write a python
663:46 - file much like what we do with pycharm
663:49 - so let's write a program using our text
663:51 - editor program
663:53 - it'll be just a simple program let's
663:56 - print
663:58 - hello world and ask for some user input
664:02 - let's say name equals input
664:09 - what's your name
664:14 - and we will print
664:18 - hello plus our name
664:21 - variable and you can change the font and
664:24 - everything too if you want
664:31 - okay so let's save this file save
664:34 - i'll save this to my desktop but make
664:36 - sure you save it as a
664:38 - py file a python file i'll name this as
664:42 - hello dot py and save
664:47 - now to run a file using command prompt
664:49 - we need to find
664:50 - the directory that contains our python
664:52 - file mine is hello.py and it's located
664:56 - on my desktop
664:57 - so i need the location right click go to
665:00 - properties
665:01 - you can copy the location then within
665:03 - command prompt or terminal
665:05 - you can change directory by typing cd
665:08 - space
665:09 - and then paste your new directory the
665:11 - new location
665:12 - enter then to run a python program
665:15 - type python space and then the name of
665:19 - the program
665:20 - the python file mine is hello dot
665:23 - py hit enter hello world what is your
665:26 - name
665:27 - bro hello bro i just thought that would
665:31 - be a fun last minute project
665:32 - that we can do you don't even
665:33 - technically need an ide to write a
665:36 - python program
665:37 - screw you pycharm well everyone that is
665:39 - a basic
665:40 - text editor program i will post the code
665:43 - for this program
665:44 - in the comment section down below and
665:46 - well yeah that's a basic text editor
665:48 - program
665:49 - using python all right
665:52 - ladies and gentlemen let's create a game
665:54 - of tic-tac-toe to begin we'll need to
665:56 - import tkinter as well as random and
665:59 - let's begin by defining
666:00 - all of the different functions that
666:02 - we'll need let's define a function named
666:04 - next turn for the time being we'll just
666:08 - write pass we'll fill this in later on
666:10 - we'll need a function named check winner
666:16 - a function named empty spaces to check
666:21 - if there are any empty spaces left and
666:24 - lastly a function named new
666:26 - game that will launch a new game for us
666:29 - okay we have our four functions now
666:31 - let's create a window
666:32 - let's create a window window equals
666:35 - tk and at the end of our program we need
666:39 - to use window
666:40 - dot main loop and when we run this we
666:43 - should have just a small
666:45 - basic window let's set the title window
666:49 - dot title let's set this to
666:53 - tick tack toe
666:57 - we'll need a list of players players
667:00 - equals
667:02 - x comma o
667:05 - and with the way that we're writing this
667:07 - program we can swap
667:08 - these symbols with a different character
667:10 - for example we could say
667:12 - dollar sign is playing against the at
667:15 - symbol too
667:16 - but i'll demonstrate that later let's
667:18 - keep it as x and o for now
667:21 - now we need to select a random player to
667:24 - begin
667:25 - player equals random
667:28 - dot choice and pass in our list of
667:32 - players
667:33 - now we'll need nine buttons i'm going to
667:35 - create a 2d
667:36 - list of buttons named buttons
667:39 - and this will be the first row this will
667:42 - be the second row
667:44 - for the time being i'm just going to
667:45 - initialize these with
667:47 - 0 for everything and put these all
667:50 - within
667:51 - a list so we have a 2d list named
667:54 - buttons
667:56 - and to better visualize this i'm going
667:58 - to place each row on a new line
668:00 - so that's what our board is going to
668:01 - look like we have a 2d list
668:04 - named buttons we'll need a label to
668:06 - display whose turn it is
668:08 - label equals label
668:11 - i'll set the text equal to
668:15 - player plus the word
668:18 - turn and i'll set the font to
668:22 - font equals pick whatever font that you
668:25 - want
668:30 - and i am going to pack this label
668:33 - label dot pack and set the side
668:37 - equal to top and let's run this just to
668:40 - test it
668:42 - okay looks like it's x's turn let's try
668:45 - it again
668:46 - oh stern okay that's fine for now
668:49 - let's create a reset button
668:52 - reset underscore button
668:55 - equals button
668:59 - i'll set the text equal to
669:02 - restart it's going to be a restart
669:04 - button or reset button
669:07 - pick a font
669:14 - maybe i'll set the size to 20
669:17 - and we'll need a command command
669:21 - equals new game
669:24 - when we click on this button it's going
669:26 - to call this
669:27 - new game function for us and we need to
669:31 - pack this button reset
669:34 - button dot pack
669:37 - and i will set the side equal to top
669:40 - okay
669:41 - let's see if that appears alright so we
669:43 - have our
669:45 - turn order a label that will display
669:47 - whose turn it is as well as our reset
669:49 - button
669:50 - now we'll need to create all of the
669:51 - buttons to add to our 2d
669:53 - list named buttons but i'm going to
669:55 - place these all within
669:57 - a frame frame equals frame
670:00 - we're adding our frame to our window and
670:03 - i'm going to
670:04 - pack this frame frame dot pack
670:08 - now we'll take our 2d list of buttons
670:11 - and add a button to each spot
670:13 - and i think the best way to do this
670:14 - would be to use nested for loops
670:17 - we'll have an outer for loop in charge
670:19 - of the rows
670:20 - four row in range three
670:24 - remember we only have three rows and
670:26 - three columns
670:27 - the inner for loop will be in charge of
670:29 - the columns
670:30 - four column and range three
670:34 - and inside the inner for loop we're
670:36 - going to create a new button
670:39 - we'll say buttons at index
670:43 - row and column we have two indexes
670:46 - because
670:47 - we have a 2d list so buttons
670:50 - at row whatever column whatever
670:53 - depending on
670:54 - what iteration we are within our for
670:56 - loops
670:57 - we'll create a new button
671:00 - and we'll set the text oh first add this
671:03 - to the frame
671:04 - almost forgot about that we're adding
671:06 - our buttons to our frame and adding the
671:08 - frame to the window
671:10 - now we'll set the text equal to a blank
671:12 - set of quotes because we don't want any
671:14 - text
671:16 - we'll set the font i'll just copy what
671:19 - we have here
671:20 - for label
671:26 - for a width let's say five and a height
671:29 - let's say two i'm going to hit enter
671:32 - just to move down to the next line
671:33 - because we still have a few more things
671:35 - to fill in
671:36 - okay we'll need a command command
671:39 - equals and i'm going to set this equal
671:41 - to a lambda function
671:42 - so we need some arguments actually i
671:45 - think i'll pass in some keyword
671:46 - arguments
671:46 - row equals row and column
671:50 - equals column then our expression is
671:54 - next turn and we will pass in
671:57 - row and column now we also need to add
672:00 - our buttons to our
672:02 - frame buttons at
672:05 - index of row and column
672:09 - we'll use the grid function for this
672:12 - grid
672:13 - row equals and
672:16 - column equals column
672:20 - and it's always a good idea to test your
672:22 - program after making any major changes
672:24 - so we should have our label our reset
672:27 - button
672:28 - and our grid of buttons now that the
672:31 - main body of our program is complete
672:33 - let's head to the next turn function
672:36 - and remember that we're passing in row
672:38 - and column as
672:40 - arguments so we need to set up those
672:42 - parameters within the next turn
672:44 - function row and column and the first
672:47 - line within here
672:48 - we would like access to our player
672:52 - so let's say global player so that we
672:54 - have access to it
672:56 - and we're first going to check to see if
672:58 - the button
672:59 - that we click on is empty so buttons
673:03 - at index of row and index of column
673:07 - to access the text of a button just add
673:10 - a
673:10 - third index operator and type in text
673:14 - if the text of our button that we click
673:17 - is equal to a set of quotes that means
673:20 - it's empty
673:21 - and when we call check winner
673:25 - winner winner chicken dinner and it's
673:28 - false
673:29 - there is no winner then we will fill in
673:32 - that button with our player our player's
673:35 - character whatever it is
673:37 - x or o or whatever we decide
673:40 - so within here let's check to see if
673:44 - player is equal to players
673:47 - at index zero that is our first player
673:51 - and remember that we created
673:52 - a list of players and we're planning on
673:55 - swapping these later
673:56 - we could say like if player is equal to
673:59 - x
674:00 - but that would make our program less
674:01 - flexible if we want to pick like a
674:03 - different character instead of an x
674:05 - so if player is equal to player at index
674:08 - zero whatever symbol is there
674:11 - then we are going to take buttons
674:14 - at index of row index of column
674:19 - take our text and set it equal to
674:23 - our player
674:27 - and we should check to see if there's a
674:29 - winner after filling in this button
674:32 - if check
674:35 - winner and we still need to fill in this
674:37 - function
674:38 - returns false
674:42 - then we will switch players player
674:44 - equals
674:45 - players at index of one and
674:50 - label dot config
674:55 - text equals
674:59 - players at index 1
675:02 - plus the word turn
675:06 - so what we did here is that we're
675:08 - checking to see
675:09 - if after placing our text of our player
675:13 - on that button that we click if there is
675:16 - no winner
675:17 - then we're going to swap players player
675:20 - equals our next player
675:21 - and we're configuring our label so that
675:23 - it displays the next player's turn
675:26 - players at index 1 turn
675:29 - now what if there is a winner let's say
675:32 - else if
675:33 - check winner
675:36 - is true
675:40 - then we will take our label dot
675:44 - config and set the text
675:48 - equal to players
675:51 - at index 0
675:54 - plus the word wins
675:59 - now let's add another else if statement
676:02 - else if there's a tie let's say check
676:06 - winner is equal to
676:09 - the word tie because we are already
676:12 - using
676:12 - false and true then let's change our
676:16 - label
676:17 - and i'm just going to copy this
676:20 - text equals the word
676:23 - tie okay
676:26 - so let's create an else block
676:29 - so that goes right here
676:32 - so if it's not player one's turn player
676:35 - at index zero
676:37 - then it's our other player's turn player
676:39 - at index
676:40 - of one so oh then so we just need to
676:43 - mostly just copy this text and change a
676:46 - few things around
676:47 - so i'm going to copy all this
676:52 - and within here let's set
676:56 - player equals players at index
676:59 - zero then players at
677:02 - index zero's turn players
677:06 - at index one wins
677:09 - and that is it now our next turn
677:11 - function is now complete let's head down
677:13 - to the
677:14 - check winner function and we need to
677:16 - check all of the different win
677:18 - conditions
677:18 - and return it true if somebody won false
677:22 - if there is yet no winner and the word
677:24 - tie if it's a tie
677:26 - so let's check all of the horizontal win
677:28 - conditions
677:29 - so we can do this using a for loop for
677:32 - row in range three
677:37 - we need to check the text of each button
677:39 - in each row
677:40 - if buttons at index of row
677:44 - and column index of 0 we'll use the
677:48 - index operator to check the text
677:50 - is equal to the next button in our row
677:54 - so i will copy this and change zero to
677:57 - one
677:58 - check to see if that is equal to buttons
678:02 - at index of row index of two
678:06 - and i'm going to check to see if this is
678:08 - all not
678:10 - equal let me move this a little bit
678:13 - to a space
678:17 - so if that is the case that means
678:19 - somebody won
678:20 - so if all of these buttons are the same
678:23 - and they are not equal to
678:25 - an empty space that means they're all
678:27 - the same so let's return
678:29 - true that means that somebody won
678:32 - no we need to check the vertical win
678:34 - conditions
678:35 - if anybody has the same character all
678:38 - the way down
678:39 - a single column this next for loop is
678:41 - going to be four column in range three
678:44 - for the first button this will be button
678:47 - at index of zero
678:49 - and column then
678:52 - one and column let me just paste that
678:56 - and two and column
679:01 - now we need to check the diagonal win
679:03 - conditions
679:04 - so if buttons at
679:07 - index 0 0 that's the top left corner
679:11 - if the text of that button is equal to
679:14 - buttons at indexes of one one
679:19 - is equal to the indexes of
679:23 - button two two and if all of this
679:27 - does not equal an empty space
679:30 - then return true so there is a winner
679:35 - and we have one last win condition to
679:37 - check that is the other
679:39 - diagonal win condition so we just need
679:41 - to change some of these indexes around
679:44 - so we have zero two
679:47 - one one and two zero
679:50 - i'm going to change this statement to an
679:52 - else if statement
679:54 - no we need to check to see if there's
679:56 - any spaces remaining
679:58 - else if we will call the empty spaces
680:01 - function which we have yet to fill in if
680:05 - this returns false then we will
680:09 - return the word
680:12 - tie
680:15 - and lastly else else there is no winner
680:19 - and
680:20 - no tie so we will return false
680:24 - and that is it for the check winner
680:27 - function
680:28 - let's test this
680:31 - so this doesn't account for a tie quite
680:33 - yet but we can fill in
680:35 - some of these spaces looks like x wins
680:37 - and we can no longer fill in buttons
680:40 - and we cannot start a new game quite yet
680:42 - either
680:43 - within the empty spaces function let's
680:45 - create a local
680:47 - variable named spaces and set this equal
680:49 - to nine whenever we call this function
680:53 - four row in range
680:56 - three and we'll create a nested for loop
680:59 - for column in range
681:04 - three we will check the text of each
681:07 - button
681:08 - if buttons at indexes of
681:11 - row and column
681:15 - and we will check the text to see
681:21 - if it's not equal to an empty space
681:26 - if that is the case spaces
681:29 - minus equals one
681:33 - then we'll write an if statement if
681:36 - spaces
681:36 - as in spaces remaining is equal to zero
681:41 - that means we will return false and
681:44 - there are no
681:45 - spaces left else
681:49 - we will return
681:52 - true okay let's test it
681:56 - so this time i'm trying to get a tie
682:06 - yep looks like it's a tie this next
682:10 - part's optional but i would like to
682:11 - change
682:12 - the color of each button for the winning
682:14 - combination
682:15 - so within our check winner function
682:17 - underneath the first win condition
682:20 - i'm going to take buttons at index
682:23 - of row and index of zero
682:29 - use the config method
682:33 - and set the background color equal to
682:36 - let's say green
682:39 - and i'm going to repeat this process for
682:41 - the other buttons within this win
682:43 - condition
682:44 - so that is row
682:47 - zero row one and row two
682:50 - i'll copy all of this paste it
682:55 - and switch some of these around so these
682:57 - should all be matching
683:00 - so zero and column one and column and
683:03 - two in column
683:08 - okay so we have zero zero one
683:11 - one and two two
683:14 - and one more
683:17 - zero two one one and
683:20 - two zero now when we have a winning
683:24 - combination
683:26 - the color of the buttons involved in
683:28 - that combination are going to change to
683:30 - green
683:30 - now if there is a tie let's change all
683:33 - of the buttons to
683:34 - let's say yellow so i'm going to write
683:37 - nested for loops for this
683:39 - four row in range
683:43 - three for column
683:47 - in range three
683:51 - take our buttons at row
683:54 - and column and change
683:58 - the background color to yellow or some
684:00 - other color of your choosing
684:03 - so if there's a tie they should all be
684:06 - yellow
684:08 - i'm trying not to win here it's actually
684:10 - more complex than what i thought
684:16 - yep it looks like it's all a tie and the
684:18 - last thing that we need to do is to fill
684:20 - in
684:20 - the new game function so that we can
684:22 - begin a new game
684:24 - so let's say global player we would like
684:26 - access to our player
684:27 - from inside this function and set player
684:30 - equal
684:31 - to a new random choice random
684:35 - dot choice and pass in our list
684:38 - of players and we will change our label
684:41 - label dot config
684:44 - and set the text equal to player
684:48 - plus the word turn and we also need to
684:52 - reset all of our buttons
684:56 - for row in range
685:00 - three for
685:03 - column in range
685:07 - three buttons
685:10 - at index of row and index of column
685:16 - dot config
685:19 - text equals a set of quotes so it's
685:22 - empty
685:23 - and we'll change the background color
685:26 - factors previously
685:27 - so the default color for buttons is
685:30 - actually hexadecimal
685:32 - f 0 f 0 f 0
685:35 - so this function will begin a new game
685:37 - for us
685:38 - and let's test it to be sure i'm going
685:41 - to start a new game
685:42 - reset reset
685:46 - i'll actually try and win this time and
685:49 - reset
685:50 - okay so it looks like the new game
685:52 - function is working
685:54 - now another thing that you can do too is
685:56 - that you can change
685:57 - the players around let's say we would
685:59 - like to play as
686:01 - dollar sign and at sign so this program
686:04 - is flexible enough
686:06 - so that you can change the icons of the
686:08 - players
686:10 - all right everybody so that's a basic
686:12 - game of tic-tac-toe for
686:14 - python if you would like a copy of this
686:16 - code i will post all of this to the
686:17 - comments section down below
686:19 - but yeah that's how to code a basic game
686:21 - of tic-tac-toe
686:23 - for python hey what's going on everybody
686:26 - it's your bro hope you're doing well and
686:28 - in this video we're going to create a
686:30 - game of snake using python so
686:32 - sit back relax and enjoy the show
686:36 - first thing we should do is import from
686:39 - tkinter as well as the random module
686:41 - and let's define all of the different
686:43 - classes and functions that we'll need
686:45 - so let's create a class for our snake
686:48 - object
686:49 - as well as our food object so for the
686:52 - time being i'm just going to write pass
686:54 - for my classes we'll fill these in later
686:56 - so we have class snake and
686:58 - class food and
687:01 - let's define all of the different
687:02 - functions that we'll need so let's say
687:04 - we have a function named next
687:06 - turn
687:10 - change direction
687:18 - check collisions
687:22 - and lastly game over
687:29 - okay for change direction i'm going to
687:32 - have one parameter
687:34 - a new direction
687:37 - now when i create a game i like to place
687:39 - a bunch of constants at the top
687:41 - of my game constants are variables that
687:44 - you do not want to change
687:45 - later they're kind of like the settings
687:47 - however in python
687:49 - there are no constants compared to other
687:51 - programming languages
687:52 - so we're just going to create a bunch of
687:54 - variables that will behave like them
687:56 - so constants are values we do not want
687:58 - to change and they're kind of like the
687:59 - game settings
688:00 - and i placed them at the top for
688:02 - convenience and the naming convention
688:04 - for a constant is that
688:05 - all the letters are uppercase so these
688:08 - will be settings like
688:09 - the game width the speed etc
688:12 - so let's say the width of our game will
688:14 - be 700
688:15 - but feel free to take the liberty to
688:17 - pick whatever size you want
688:19 - so we have game width game height
688:22 - i'll set this to 700 as well so it's a
688:24 - square
688:26 - let's say we have a speed the speed of
688:28 - the snake how often will our canvas
688:30 - update
688:31 - so let's say 50 but the lower the number
688:33 - the faster the game
688:35 - and a space size how large are the items
688:38 - in our game like
688:39 - the food and body parts of the snake
688:42 - so i'm going to pick 50 but you can
688:44 - change this
688:46 - and body parts how many body parts does
688:50 - our snake have when we begin a game
688:52 - let's say three how about a snake
688:55 - color you can pick a color name
688:58 - you can use rgb values or you can use a
689:01 - hexadecimal value
689:02 - so i'm going to pick green 0 0 ff00 but
689:06 - you can pick any color you want
689:09 - how about food color
689:13 - equals red
689:16 - and that is ff000
689:20 - and what about a background color for
689:22 - the canvas background
689:25 - color i'll pick black so that is
689:28 - six zeros
689:31 - feel free to mess with some of these
689:32 - colors too so we have a green snake
689:35 - our food is going to be red and our
689:37 - background is going to be black
689:39 - so that is all of the constants for our
689:41 - game but you can feel free to adjust
689:43 - them if you like
689:44 - let's head down to the bottom and make
689:46 - our window so we have
689:48 - window equals tk and at the very end we
689:51 - should have
689:52 - window dot main loop
689:57 - let's set a title for this window window
690:01 - dot title
690:04 - snack game okay fine i'll spell it right
690:08 - snake game and if you do not want your
690:12 - window to be resizable
690:14 - you can use resizable
690:18 - and then you have to pass in false twice
690:20 - it's kind of strange but it's how it is
690:23 - okay we should have a small window and
690:26 - we cannot resize this even if we tried
690:30 - okay let's create a score label
690:33 - but we probably need a score first so
690:35 - let's say score equals zero
690:37 - and an initial direction direction
690:41 - equals let's say down
690:45 - now let's create a score label so let's
690:47 - say label
690:49 - equals label we're adding our
690:52 - label to our window let's set the text
690:56 - equal to score
690:59 - colon then i'm going to use the format
691:02 - method
691:04 - and we will pass in our score whatever
691:08 - it is
691:10 - and i'll set a font pick whatever font
691:12 - you prefer
691:17 - and 40 is a decent size
691:21 - and then i'm going to pack this label
691:25 - let's test it okay we're getting
691:28 - somewhere
691:29 - we'll need to create a canvas canvas
691:33 - equals canvas we're adding it to our
691:36 - window i'm going to set the background
691:39 - color
691:40 - equal to our background constant
691:45 - i'm going to set our height equal to the
691:47 - game
691:48 - height and the width equal
691:52 - to the game width that we set
691:56 - and we need to pack this canvas dot pack
692:02 - and we should have a game board
692:06 - i'm going to try and center this window
692:08 - when it appears
692:09 - so we can do that using a few lines of
692:11 - code the first thing we'll do is
692:13 - update our window so that it renders and
692:16 - then we need to find some dimensions
692:18 - so let's say the window width
692:22 - equals window dot w
692:26 - info width
692:31 - and window height
692:35 - equals window
692:38 - dot w info height
692:43 - we'll need our screen width
692:48 - equals window
692:53 - dot screen width
692:56 - and screen height
693:00 - equals window dot w
693:04 - info screen height
693:07 - where is it there it is
693:13 - okay then we need to see how much we're
693:15 - going to adjust the position of our
693:17 - window
693:19 - so let's say x equals
693:24 - screen width divided by 2
693:28 - minus window
693:32 - width divided by two
693:36 - and do the same thing for y
693:40 - except this will be screen height
693:45 - and window height
693:48 - and that will be why
693:52 - okay then we need to set the geometry
693:55 - window
693:56 - dot geometry
694:00 - we're going to use an f string
694:04 - so let's set the window
694:07 - width times
694:12 - window height
694:17 - and then add plus
694:21 - x plus y
694:24 - so when we pass in x and y
694:27 - these cannot be floats they have to be
694:30 - whole integers
694:31 - so let's add a cast around x and y
694:38 - okay now this should be fairly close to
694:40 - the center
694:42 - yeah that's not too bad now when we
694:44 - begin a new game we should create a
694:45 - snake object as well as a food object
694:48 - snake equals snake and called the snake
694:51 - constructor
694:52 - and food equals food
694:56 - okay let's fill in our food class first
694:58 - because i think that'll be easier than
695:00 - our snake class
695:01 - so let's head to the food class
695:04 - now let's create an init method so def
695:08 - init this will construct a food object
695:11 - for us
695:12 - and we need to place our food object
695:14 - randomly
695:16 - so for the x coordinate let's say x
695:18 - equals
695:19 - random dot rand int and we need a range
695:23 - the range is going to be zero comma now
695:27 - with our game board i view it like a
695:29 - chess board
695:30 - there's a given amount of spaces so
695:33 - 700 divided by our space size
695:37 - is 14 possible spots on the x-axis
695:41 - and then 14 possible spots on the y-axis
695:45 - so i need to pick one of these spots
695:47 - randomly
695:49 - so let's say game
695:53 - width divided by our space
695:56 - size so we'll get a random number
695:58 - between 0 and 14
696:00 - however this should be exclusive so
696:02 - let's say -1
696:05 - and for good measure i'm just going to
696:07 - add a set of parentheses around this
696:09 - okay and then we'll convert this to
696:11 - pixels
696:12 - so let's multiply all of this by our
696:14 - space
696:16 - size the size of each item in the game
696:19 - and we'll do the same thing for
696:20 - y but change game width to height
696:30 - okay we should be good
696:35 - all right now let's set the coordinates
696:37 - let's say self dot coordinates
696:41 - equals a list of x and y
696:45 - and that's it but make sure you spell
696:47 - coordinates right
696:50 - now we need to draw our food object on
696:52 - our canvas
696:54 - canvas dot create
696:58 - oval you can pick a square two if you
697:00 - like
697:01 - we need a starting corner that will be
697:03 - where x
697:05 - and y is and an ending coordinator
697:08 - so that will be x and y plus
697:11 - our space size the size of an object in
697:14 - that game
697:15 - so x plus space
697:19 - size y plus
697:22 - space size
697:26 - and you can set a fill color too
697:29 - fill will be our food color that we
697:32 - declared
697:34 - and i recommend adding a tag as well
697:37 - that'll make it easy to delete this
697:39 - object
697:41 - so tag will equal the string food
697:44 - now let's just test this so we should
697:47 - have a random circle
697:48 - or a square if you picked a square
697:50 - appear someplace at some spot
697:52 - on my game board cool seems like it's
697:55 - working
697:56 - let's work on the snake class next our
697:59 - snake class we'll need a constructor
698:06 - and we will set a body size
698:10 - equal to our body parts
698:16 - we'll need a list of coordinates
698:24 - fill this in later and a list
698:27 - of square graphics
698:31 - so that will be a list okay
698:34 - so we need to create a list of
698:37 - coordinates
698:38 - we can use a for loop for that so let's
698:40 - say for
698:41 - i in range zero
698:45 - through body parts
698:50 - we will take self dot coordinates
698:54 - and append a new list
698:59 - and the coordinates for each body part
699:01 - at the start of the game will be
699:03 - 0 0 so that our snake will appear in the
699:06 - top left corner
699:09 - now we'll need to create some squares
699:11 - okay so
699:12 - for x y
699:15 - in self dot coordinates
699:18 - and remember that we have a list of
699:21 - lists so that's why we're using
699:22 - x y in self coordinates
699:27 - we'll create a square equals
699:31 - canvas dot create
699:35 - rectangle
699:38 - so we need a starting corner that will
699:40 - be x and y
699:45 - then x plus our
699:48 - space size the size of each object in
699:51 - the game
699:53 - let me use the constant though space
699:57 - size y plus
700:00 - space size
700:06 - and let's set a fill color equal to
700:09 - our snake color
700:14 - all right and let's set a tag
700:18 - for convenience tag equals
700:22 - a string of snake okay so we have a
700:25 - list of squares and we can append each
700:28 - square into our list
700:31 - self dot squares
700:36 - dot append and pass in whatever square
700:39 - that you create
700:42 - so we have a snake that has a body size
700:46 - a list of coordinates and a list of
700:49 - square graphics
700:50 - now after testing this we should have
700:52 - the head of our snake in the top left
700:54 - corner
700:55 - and now we just need the snake to move
700:57 - in a given direction every turn
700:59 - so the initial direction is down but
701:02 - we'll be able to change that later
701:03 - so let's head to the next turn function
701:06 - and there's actually two things we'll
701:08 - need as parameters that i forgot to fill
701:10 - in
701:11 - snake as well as food and we will call
701:14 - this function when we begin our game
701:17 - so let's unpack the head of the snake so
701:19 - that's
701:20 - x comma y equals
701:23 - snake dot coordinates
701:26 - at index of zero so that's the head of
701:30 - the snake
701:31 - the coordinates will be stored in x and
701:34 - y
701:35 - so let's check to see if our direction
701:39 - our initial direction equals
701:42 - up and we'll need some else if
701:46 - statements
701:46 - we'll fill this in just a moment
701:52 - else if our direction equals
701:55 - down
702:00 - then left
702:06 - and then right
702:11 - okay if our direction is up
702:14 - then let's take our y coordinate for the
702:17 - head of our snake
702:18 - minus equals our space
702:22 - size so that we move one space up
702:26 - and then down is plus equals
702:29 - space size left
702:33 - is x minus equals
702:36 - space size and lastly
702:39 - right is x plus equals space size
702:45 - okay then we need to call the next turn
702:47 - function again
702:48 - for the next turn so we can use window
702:52 - dot after we need the time
702:56 - so let's say our game speed
702:59 - we're going to call the next turn
703:01 - function and we need to pass in our
703:03 - arguments of snake and food
703:08 - snake food
703:12 - oh and make sure you're not actually
703:13 - calling the next turn function inside of
703:15 - the after method you just have to write
703:17 - the function name of next turn without
703:19 - the parentheses
703:21 - okay so let's update the coordinates for
703:23 - the height for the snake
703:24 - and write that before we move on to the
703:26 - next turn
703:28 - so snake dot coordinates
703:34 - and we will insert a new set of
703:36 - coordinates
703:37 - after updating one of them
703:41 - so zero will be the index the head of
703:44 - the snake
703:45 - and we will insert x and y coordinates
703:48 - at
703:48 - this new location now we're going to
703:52 - create a new graphic for the head of the
703:54 - snake
703:55 - square equals canvas dot create
703:59 - rectangle pass in x
704:02 - and y for the starting corner of our
704:05 - rectangle and
704:06 - the ending corner will be x plus
704:09 - our space size y
704:14 - plus our space size
704:17 - then i will add a fill color of
704:22 - snake color and then we need to update
704:26 - our snakes list of squares
704:30 - so that will be snake dot squares
704:35 - and insert at
704:39 - index 0 a new square that we create
704:44 - okay let's test this one last thing that
704:46 - we'll need to get this program to run
704:48 - is that after you create your snake and
704:50 - food object we should call it the
704:52 - next turn function and pass in our snake
704:55 - and food object so we should be able to
704:57 - test this
704:59 - so our snake is going to move but we
705:01 - need to delete the
705:02 - last body part in our snake within the
705:05 - next turn function
705:07 - but before we update to the next turn
705:10 - let's delete the last body part of our
705:12 - snake so delete
705:14 - snake dot coordinates
705:18 - at negative index of one that is the
705:21 - last set of coordinates
705:24 - we will update our canvas canvas dot
705:27 - delete
705:31 - snake dot squares
705:36 - an index of negative one
705:40 - and lastly delete snake
705:46 - the list of squares
705:49 - at index of negative one
705:52 - so it should appear that our snake is
705:54 - moving cool
705:56 - we need some controls for our snake so
705:59 - at the bottom of our program
706:01 - let's bind some keys let's do that here
706:06 - so window dot bind
706:10 - let's find the left arrow key
706:16 - and we will use a lambda
706:20 - the argument is event and we will call
706:23 - the
706:23 - change direction function and pass in
706:27 - the word left
706:31 - okay then we have to do the same thing
706:33 - for the other directions
706:40 - so we have right
706:44 - pass in right
706:48 - up pass in up
706:53 - down pass in down
706:59 - let's head to the change direction
707:01 - function
707:03 - we need to access our direction global
707:07 - direction this is the old direction
707:12 - if our new direction that is passed in
707:16 - is equal to left
707:22 - and if our old direction this direction
707:26 - does not equal right because we do not
707:28 - want to go backwards and do a 180 degree
707:31 - turn
707:34 - then we will set our direction
707:37 - equal to our new
707:40 - direction and we just need to repeat
707:42 - this for the other
707:44 - directions for new direction
707:48 - and i'm going to change this to else if
707:52 - else if new direction is right
707:56 - and our direction is not already
707:59 - left
708:05 - then we have up
708:09 - if our direction is not down
708:16 - and down if our
708:20 - direction is not up okay so we should be
708:23 - able to change
708:24 - the direction of our snake
708:28 - sweet okay we need to eat that pesky
708:31 - apple next so let's work on that
708:34 - there's nothing else that we need to
708:35 - change within the change direction
708:37 - function so i'm going to minimize
708:39 - this function and head to the
708:42 - next turn function
708:47 - we'll place an if statement here if
708:50 - x remember that we unpacked the
708:53 - coordinates
708:54 - for the head of the snake if x
708:57 - the x coordinate for the head of the
708:59 - snake is equal to
709:02 - our food objects coordinates
709:08 - at index of zero that's the x-coordinate
709:12 - for our food object and
709:16 - y is equal to
709:19 - food coordinates at index of one
709:23 - that means they're overlapping
709:27 - let's take our score
709:31 - and increment it by one
709:36 - and change our label label.config
709:44 - the text will equal
709:48 - score
709:52 - and then i'm going to use the format
709:54 - method
709:55 - and pass in my new score
710:01 - let's delete our food object
710:04 - and we gave our food object a tag so we
710:07 - can just use the name of the tag
710:09 - to delete it and create a new food
710:11 - object
710:16 - then i'm going to write this part of our
710:18 - program within an else statement
710:23 - we will only delete the last body part
710:26 - of our snake
710:28 - if we did not eat a food object
710:32 - okay let's test it again
710:36 - so i have three body parts now i have
710:38 - four
710:39 - five
710:43 - six seven eight nine
710:47 - ten you can see that the score is going
710:49 - up too
710:51 - okay let's work on collisions next
710:53 - because i should not be able to go off
710:55 - screen like this
710:56 - there's one thing that we're going to
710:58 - change so let's add an
711:00 - if statement that will check collisions
711:04 - this will return true or false if we
711:07 - detect a collision
711:08 - and pass in our snake object
711:13 - if there is a collision we'll call the
711:16 - game over function
711:20 - else we will update to the next turn
711:25 - okay let's fill in the check collisions
711:28 - function
711:29 - and we no longer need our function of
711:31 - next turn
711:32 - actually we don't need these classes
711:34 - either so i'll minimize them
711:36 - okay check collisions so it looks like
711:39 - we will need a parameter of snake
711:41 - so be sure to set that
711:44 - let's unpack the head of the snake x
711:47 - y equals snake dot coordinates
711:52 - at index of zero
711:57 - and let's check to see if we cross the
711:59 - left or
712:00 - right border of the game if x
712:03 - is less than zero or
712:07 - x is greater than or equal to
712:11 - our game width
712:15 - then return true i think for testing
712:19 - purposes i'm going to print something to
712:21 - the console window
712:24 - game over let's test it
712:29 - okay i'm going to go over to the right
712:30 - border game over and our game stopped
712:34 - let's go over the left game over
712:37 - cool so we know that it's working okay
712:39 - let's do the same thing for y
712:43 - we can use else if here
712:47 - if y is less than zero or
712:50 - y is greater than or equal to our game
712:54 - height let's print game over
712:59 - and return true and we should probably
713:01 - test it
713:03 - okay i'm going up game over and let's go
713:07 - down
713:08 - game over
713:12 - so what if our snake touches its tail or
713:15 - another body part
713:17 - so let's say four i actually i
713:20 - isn't too descriptive let's say for
713:22 - every body part
713:25 - in snake dot coordinates
713:34 - we're going to set this to everything
713:37 - after the head of the snake
713:40 - we're going to check to see if any of
713:41 - the coordinates are matching
713:45 - if x is equal to
713:48 - body part at index
713:52 - 0 and
713:55 - y is equal to body
713:59 - part at index 1
714:03 - then return true
714:07 - and i'll print game over to test it
714:10 - print game over
714:15 - otherwise we can return false there are
714:18 - no collisions
714:20 - i think i'm going to change the size of
714:23 - the snake
714:24 - to 10. okay let's run into each other
714:29 - cool game over and the last thing that
714:32 - we need to do
714:33 - is to fill in the game over function
714:36 - because it looks like everything else is
714:37 - fine
714:38 - so head to the game over function take
714:42 - your canvas and delete all
714:49 - and we'll create some game over text
714:52 - canvas
714:53 - create text
714:57 - i would like this in the center of my
714:59 - canvas
715:00 - i'll take canvas w info
715:04 - width divided by two comma
715:08 - canvas w info height
715:12 - divided by two i'm going to put some of
715:14 - this on the next line
715:16 - for readability i'll set a font
715:19 - pick whatever font that you want
715:26 - we'll need some text
715:30 - text equals game over
715:36 - pick a color red's decent
715:40 - i'll add a tag too for convenience game
715:44 - over and that should be it for the game
715:47 - over function
715:49 - i'm going to change the body parts of
715:51 - the snake back to what it was originally
715:53 - and we should probably test that game
715:55 - over screen
715:58 - all right it appeared okay so let's
716:01 - change some of these settings around
716:03 - you can create a larger game board let's
716:05 - say
716:06 - 1000 by 700
716:11 - that still works you can slow down the
716:14 - speed or speed it up
716:16 - so 100 will be about half as fast
716:19 - it's going pretty slow now but what if
716:22 - we set it to
716:23 - 20.
716:28 - you can change the space size
716:32 - so everything is a lot smaller now
716:35 - including the food
716:36 - object
716:40 - you can change the body parts what about
716:42 - 20 to begin with
716:46 - that's fairly excessive
716:50 - i'll change that back to three you can
716:53 - change the snake color
716:54 - let's say we would like a blue snake
716:57 - so that is for a hex color
717:01 - four zeros and then two f's
717:05 - you can change the food color so let's
717:07 - say we would like a yellow food
717:09 - object so that would be four f's and
717:11 - then two zeros
717:14 - kind of resembles the python logo that
717:16 - color scheme
717:20 - you can change the background color too
717:23 - so let's say
717:23 - all white that would be six apps
717:28 - i do not like that go back delete delete
717:32 - delete alright well
717:33 - that should be everything let's run this
717:35 - game one last time
717:46 - [Music]
718:14 - [Music]
718:44 - well everybody that is a very basic game
718:46 - of snake for beginners i will post all
718:48 - of this code to the comment section down
718:50 - below but yeah that's a basic game of
718:53 - snake
718:53 - using python hey you
718:57 - yeah i'm talking to you if you learned
718:58 - something new then help me
719:00 - help you in three easy steps by smashing
719:03 - that like button
719:04 - drop a comment down below and subscribe
719:06 - if you'd like to become a fellow bro
719:11 - [Music]
719:59 - you