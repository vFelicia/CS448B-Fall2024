00:02 - all right everybody in this video we're
00:04 - going to create a game of rock paper
00:06 - scissors let's create our function
00:08 - declarations first
00:10 - char
00:11 - get
00:12 - user
00:13 - choice
00:15 - char in this case would be the return
00:16 - type will be returning a character
00:20 - char
00:21 - get
00:22 - computer
00:23 - choice
00:27 - void there is no return type
00:30 - show
00:31 - choice
00:33 - there will be one parameter
00:35 - char
00:37 - choice
00:38 - then the last function is
00:41 - void
00:42 - choose
00:43 - winner
00:45 - there will be two parameters
00:47 - char
00:48 - player that's us
00:50 - char
00:51 - computer
00:53 - the computer's choice will be determined
00:54 - randomly using a random number generator
00:57 - let's define these functions let's copy
00:59 - all of these after the main function i
01:02 - will paste them then add a set of curly
01:04 - braces after each
01:12 - currently if i were to run this program
01:14 - we do have some warnings because with
01:16 - these two functions get user choice and
01:18 - get computer choice we're not returning
01:20 - anything even though we stated that
01:21 - we're returning a character just for the
01:23 - time being i'm going to return 0 just so
01:26 - that those warnings go away but we'll
01:28 - correct these momentarily so we
01:30 - shouldn't have those warnings within the
01:32 - main function we will declare two
01:34 - characters one for player
01:37 - char player that's us
01:39 - char
01:40 - computer that's the opponent we will
01:42 - take our player
01:45 - then assign this a value of whatever is
01:47 - returned from the get user choice
01:50 - function then we need to fill in this
01:52 - function
01:54 - within the get user choice function i
01:56 - will create a local variable of player
01:59 - as well i'll create a message to begin
02:01 - our game
02:02 - standard output
02:05 - rock
02:06 - paper
02:08 - scissors
02:10 - game
02:11 - i'll add a new line
02:13 - this part isn't necessary but i'm just
02:15 - going to add a bunch of asterisks
02:17 - afterwards
02:23 - just because i think it would look cool
02:24 - underneath our title
02:26 - let's list our choices standard output
02:31 - the character r
02:34 - for
02:35 - rock
02:37 - new line
02:41 - uh let's copy this
02:48 - p
02:49 - for paper
02:52 - s for
02:54 - scissors
02:58 - standard input
03:00 - player
03:03 - i'm just gonna test that this works
03:06 - standard output
03:10 - player
03:14 - rock paper scissors game
03:16 - r for rock p for paper s for scissors
03:18 - i'll pick r
03:20 - that would give us the character r
03:26 - okay so we know that that works
03:28 - i'm going to place some of this code
03:30 - within a do while loop because the user
03:33 - might not type in rp or s
03:38 - so
03:39 - do
03:42 - while
03:45 - i'm gonna stick my code within the do
03:47 - while loop
03:53 - i'm just gonna add one more line of
03:55 - output
04:01 - choose one of the following
04:05 - all right we'll continue this while loop
04:07 - as long as our player
04:10 - does not equal the character r
04:14 - and
04:16 - player
04:18 - does not equal
04:20 - the character p
04:23 - and
04:24 - player does not equal the character s
04:28 - then at the end of this function we will
04:30 - return player
04:33 - we can't escape this while loop until we
04:35 - pick either r
04:37 - p
04:37 - or s
04:39 - that's how this condition works
04:41 - let's test it
04:44 - rock paper scissors game choose one of
04:45 - the following r for rock p for paper s
04:48 - for scissors
04:49 - uh i will pick
04:52 - w for wombo
04:54 - choose one of the following rprs
04:57 - uh i like the letter x nope can't pick
05:00 - that uh let's go with s for scissors
05:03 - okay s is a valid choice okay that is
05:06 - the get user choice function that is
05:09 - complete so i'm going to close out of
05:11 - this function
05:15 - after we assign our player variable
05:17 - let's display the user's choice
05:20 - standard output
05:23 - your choice colon space
05:27 - then we will invoke the show choice
05:30 - function
05:31 - show choice
05:33 - then there is one parameter we have to
05:34 - pass in a choice as an argument we will
05:38 - pass in our player that's a character
05:41 - within the show choice function i'm
05:43 - going to create a switch
05:46 - switch
05:47 - we're examining some value against
05:49 - matching cases
05:50 - we'll examine our choice
05:53 - our choice argument that we receive
05:55 - if
05:56 - our choice
05:57 - matches the case r what would we like to
06:01 - do
06:02 - i'm going to display some output
06:04 - standard output
06:07 - just rock
06:08 - then i'll add a new line
06:11 - make sure to break
06:16 - then case
06:18 - p for paper
06:20 - standard
06:22 - output
06:25 - paper i'll add a new line
06:29 - then break
06:34 - case
06:36 - s for scissors
06:38 - standard
06:40 - output
06:42 - scissors
06:43 - new line
06:47 - then break
06:49 - let's close out of this function then
06:51 - test it
06:56 - okay i'll type r for rock your choice
06:59 - rock
07:03 - p for paper your choice paper
07:10 - s for scissors your choice scissors
07:14 - okay the show choice function is done
07:16 - now we need to get the computer choice
07:21 - computer
07:22 - equals
07:24 - get
07:25 - computer choice
07:30 - then we'll need to fill in this function
07:33 - get computer choice right here
07:36 - we'll need to generate a random seed
07:39 - s rand
07:41 - pass in the time function then type 0 or
07:45 - null
07:46 - you may need to include this header file
07:48 - at the top of your program just in case
07:50 - this doesn't work
07:52 - include
07:53 - c
07:54 - time
07:56 - we'll generate a random number between
07:58 - one and three
07:59 - and num
08:00 - equals brand function
08:03 - modulus
08:05 - three plus one
08:07 - we'll examine this number against
08:08 - matching cases
08:11 - switch
08:12 - we're examining our num
08:15 - the first case will be the number one if
08:18 - our random number is one
08:20 - let's return
08:22 - the character r
08:25 - since we're returning a value we don't
08:27 - necessarily need to add that break
08:29 - statement we're already breaking when we
08:31 - return
08:32 - so we can omit this
08:35 - case to
08:37 - return the character
08:40 - p for paper
08:43 - case three
08:45 - return
08:46 - s for scissors
08:48 - okay we can close out of the get
08:50 - computer choice function that's all done
08:53 - back within the main function
08:55 - let's display the computer's choice
08:59 - standard output
09:02 - computer's choice
09:05 - will invoke the show choice function
09:10 - but pass in our computer
09:13 - let's run it to test it
09:16 - i'll pick r for rock
09:18 - your choice rock the computer's choice
09:20 - is paper let's try it like two more
09:22 - times
09:24 - okay we chose paper the computer chose
09:27 - rock
09:30 - let's pick s for scissors
09:32 - your choice scissors the computer's
09:34 - choice is also scissors
09:36 - okay so the computer is picking a random
09:38 - choice that's good now we'll have to
09:40 - decide who won at the end of our program
09:43 - we will invoke the choose winner
09:44 - function
09:45 - pass in our player
09:48 - as well as the computer
09:52 - then within the choose winner function
09:54 - let's create another switch
09:57 - we will examine our player against
09:59 - matching cases
10:01 - if our player
10:03 - chooses
10:04 - rock the character r
10:06 - i think the best way to do this would be
10:08 - to use if statements within each case
10:14 - if the player chooses rock and if the
10:16 - computer
10:19 - chooses
10:20 - r for rock that means there's a tie
10:25 - i'll display that standard output
10:29 - it's a
10:30 - tie then i'll add a new line
10:36 - else if
10:39 - the computer
10:41 - chooses
10:42 - paper
10:43 - that means we lose standard output
10:48 - you lose
10:54 - else
10:55 - well there's only one option left
10:57 - scissors because if the computer didn't
10:59 - choose rock or paper that means they
11:02 - pick scissors
11:03 - rock beats scissors
11:05 - so let's display that the user won
11:09 - you win
11:13 - oh then be sure to add a break at the
11:15 - end
11:16 - to break out of the switch
11:18 - this is the case if the player chooses
11:20 - rock
11:21 - let's copy all of this code
11:24 - paste it
11:26 - and let's move this over now if the user
11:29 - chooses paper we have some different
11:31 - results
11:32 - paper be its rock will change this line
11:35 - of output to be
11:38 - you win
11:40 - if the user chooses paper and the
11:42 - computer chooses paper
11:43 - that means it's a tie
11:46 - it's a tie
11:48 - if we choose paper and the computer
11:50 - chooses scissors that means we lose
11:53 - you
11:54 - lose
11:56 - one more case
12:00 - if the player picks scissors
12:03 - and the computer picks rock
12:05 - you lose
12:08 - scissors beats paper
12:11 - you win
12:13 - else scissors ties with scissors
12:18 - it's a tie
12:20 - and that is everything
12:23 - let's close this function
12:26 - and run this program
12:30 - okay i'll pick r for rock
12:33 - we picked rock the computer picked
12:35 - scissors you
12:36 - win
12:38 - p for paper
12:41 - the computer also picked paper it's a
12:43 - tie
12:46 - i'll pick scissors
12:49 - i picked scissors the computer picked
12:50 - rock you lose
12:52 - well alright then everybody that is a
12:55 - game of rock paper scissors
12:57 - if you would like a copy of this code
12:58 - i'll post this in the comment section
13:00 - down below and well yeah that's a game
13:03 - of rock paper scissors in c plus plus