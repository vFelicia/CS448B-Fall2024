00:00 - hey what's going on everybody it's you
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to explain
00:04 - how functions work in python so sit back
00:07 - relax and enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like
00:14 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - okay let's do this thing a function is a
00:22 - block of code
00:23 - which is executed only when it is called
00:26 - this process
00:27 - is also known as invoking a function
00:29 - with programming we try not to repeat
00:31 - code if we don't have to
00:32 - that's why functions are useful because
00:35 - our function can perform
00:36 - some specific task for us some block of
00:39 - code for us
00:40 - whenever it is called so we only need to
00:42 - write that block of code once
00:44 - and if we need to repeat it we just call
00:46 - this function one more time
00:47 - so let's define and create a function
00:49 - we'll create a function called hello
00:51 - and in order to define a function we'll
00:53 - type def
00:54 - and then a unique function name so let's
00:57 - call this function hello
00:58 - and with functions they always end with
01:00 - a set of parentheses
01:02 - and lastly to finish defining this
01:04 - function we'll add
01:05 - a colon at the end so if you go down to
01:08 - the next line
01:09 - take notice that my cursor is now
01:12 - indented
01:12 - any code underneath a function that is
01:15 - indented
01:16 - belongs to that specific function and
01:18 - will only execute
01:20 - whenever that function is called so for
01:22 - now we need to type in something
01:24 - if you don't know what you want your
01:25 - function to do you can always type pass
01:27 - for now
01:28 - but let's print something print the word
01:32 - hello and in order to call this function
01:35 - all we need to do within our program is
01:38 - type the name of the function which is
01:40 - hello
01:41 - and then add a set of parentheses
01:42 - because functions always end with a set
01:44 - of parentheses
01:46 - so what this will do is execute my
01:48 - function
01:49 - once and perform this block of code
01:51 - whenever it is called
01:52 - if i were to remove this well our
01:55 - program currently isn't going to do
01:56 - anything
01:57 - because functions only execute their
01:59 - block of code
02:00 - only when it is called so this time
02:03 - let's print the word
02:04 - hello three times so i will call this
02:07 - function
02:08 - three separate times hello hello hello
02:11 - so when i run this our hello function
02:14 - will be called
02:14 - three separate times now with functions
02:17 - they are not limited to just one line
02:20 - this is an entire block of code so maybe
02:22 - we can do something else too
02:24 - let's print have a nice
02:27 - day now if i were to run this my hello
02:30 - function is going to execute
02:32 - this entire block of code three separate
02:34 - times hello
02:36 - have a nice day now an important feature
02:38 - of functions
02:39 - is that we can send our function some
02:42 - information
02:42 - and our function can do something with
02:44 - that information that it receives
02:46 - let's say this time i would like to
02:47 - print hello plus somebody's name
02:50 - currently name is an unresolved
02:52 - reference what we can do
02:53 - when we call this function is send our
02:55 - function some information
02:57 - this can be a value a variable a
02:59 - collection
03:00 - all sorts of different things so if you
03:02 - need to send your function some
03:03 - information
03:04 - within the parentheses when you call
03:06 - that function just list the data that
03:08 - you want to send your function
03:09 - so let's say i would like to send my
03:11 - function a string
03:13 - value of bro whatever your first name is
03:15 - when you send information
03:17 - to a function these are called arguments
03:20 - they are the information that you're
03:22 - sending to a function
03:24 - and when you define that function you
03:26 - need a matching
03:27 - set of what is known as parameters
03:31 - so our hello function is going to
03:33 - receive one argument a string value
03:36 - we need a matching number of parameters
03:39 - currently this isn't going to work you
03:40 - can see here that hello
03:42 - takes zero positional arguments but one
03:45 - was given
03:46 - our function needs a matching number of
03:49 - parameters
03:50 - so think of it this way when we receive
03:52 - this value
03:53 - we're going to give a nickname to this
03:56 - value
03:56 - so when we receive the string value what
03:59 - do we want to call it
04:00 - well let's call it name so in order to
04:03 - add parameters
04:04 - to your function just list the
04:06 - parameters within
04:08 - the parentheses of that function and
04:10 - well this should work now
04:12 - we have a matching set of arguments and
04:15 - parameters when we call the hello
04:17 - function this time we are sending
04:19 - one argument over and when our hello
04:22 - function
04:23 - receives this argument we're going to
04:25 - give it a temporary nickname
04:27 - of name or you can call this whatever
04:29 - you want to and then we can use
04:31 - this value for whatever we want within
04:33 - our function
04:34 - now if we were to run this this will
04:36 - print hello bro
04:38 - have a nice day now i can send maybe a
04:40 - different value
04:41 - let's say hello and then i will send a
04:44 - string value of dude
04:47 - hello dude have a nice day so this isn't
04:50 - limited to
04:51 - just values we can send variables to
04:53 - let's say we have a
04:55 - variable called name equals
04:59 - bro and this time i'm going to send
05:02 - this variable over hello and then send
05:06 - name so these don't need to be the exact
05:10 - same let's say this is
05:13 - my name and i'm going to send
05:16 - my name over and i will temporarily give
05:21 - this value a nickname of just name
05:24 - and then i can use this variable for
05:26 - something hello bro
05:28 - have a nice day now with arguments you
05:30 - can send
05:31 - more than one value over let's say this
05:34 - time i would like to send
05:35 - two values over so let's send pro
05:38 - maybe for a first name and code for a
05:41 - second name but
05:42 - you can use your first name and last
05:43 - name so this isn't going to work because
05:46 - we do not have a matching set of
05:49 - arguments and parameters
05:50 - we're sending two arguments over but our
05:53 - function
05:54 - is only designed to accept one argument
05:57 - because
05:58 - we have one parameter so let's
06:01 - rename name as first name
06:04 - and we need two parameters this time so
06:07 - what are we going to call
06:08 - this value when we receive it let's call
06:11 - this last name
06:14 - so this time we are going to receive two
06:16 - values
06:17 - they will be nicknamed first name and
06:19 - last name so this time
06:21 - let's print hello first name
06:24 - maybe i'll add a space plus
06:28 - last name and this is now valid
06:32 - hello bro code have a nice day with
06:34 - arguments
06:35 - you can mix and match the data types
06:37 - that you're sending
06:38 - as arguments so currently we're sending
06:41 - two
06:41 - string values as arguments this time
06:44 - let's send an integer value
06:46 - let's say we would like to send an edge
06:49 - over to our hello function
06:50 - so i'll just send maybe the value of 21
06:53 - so currently this isn't going to work
06:55 - because the hello function takes two
06:58 - positional arguments
06:59 - but three were given when we call this
07:01 - hello function we're sending
07:03 - this argument over but our function
07:05 - doesn't know what to do with this
07:07 - argument
07:07 - so we need a matching parameter for this
07:10 - value that it receives
07:11 - so let's call this value maybe edge as a
07:14 - temporary nickname
07:16 - and then we can do something with this
07:17 - value when we receive it
07:19 - so let's print an additional message
07:22 - perhaps u r plus
07:26 - age plus years
07:30 - old so if you need to display an
07:33 - integer or number along with the string
07:35 - you do need to convert it to a string
07:37 - so let's just cast our edge as a string
07:40 - when we display this
07:41 - so this should work now we now have a
07:44 - matching number
07:45 - of arguments and parameters so this will
07:48 - display
07:49 - hello bro code you are 21 years old have
07:52 - a nice day
07:53 - so ladies and gentlemen in conclusion a
07:56 - function
07:56 - is a block of code which is executed
07:59 - only when it is called
08:00 - if i were to remove this function call
08:03 - well then
08:03 - our program is just going to completely
08:06 - ignore this function and
08:07 - this block of code would not be executed
08:10 - when we call this function we can pass
08:12 - information known as arguments but we
08:15 - need a
08:15 - matching number of parameters set up to
08:18 - receive
08:19 - these arguments there are a few advanced
08:21 - features
08:22 - of parameters but i'll hopefully get to
08:24 - that in future videos
08:26 - we'll just stick with the basics for now
08:28 - of functions so
08:29 - that's the basics of functions if you
08:31 - would like a copy of this code i will
08:33 - post this in the comments down below
08:35 - but yeah that is how functions work in
08:38 - python
08:40 - hey you yeah i'm talking to you if you
08:42 - learned something new
08:43 - then help me help you in three easy
08:45 - steps
08:46 - by smashing that like button drop a
08:48 - comment down below
08:49 - and subscribe if you'd like to become a
08:51 - fellow bro
08:55 - [Music]
09:14 - you