00:01 - hey guys in this video i'm going to
00:03 - explain cookies a cookie is a small text
00:06 - file that is stored on your computer
00:08 - it's used to remember information about
00:10 - a user data within a cookie is saved in
00:13 - name value pairs in order to check to
00:15 - see if we have cookies enabled within
00:18 - console.log i can type
00:20 - navigator dot
00:22 - cookie
00:23 - enabled
00:25 - for me that's true i have cookies
00:26 - enabled to add a cookie we would type
00:29 - document.cookie
00:32 - we will set the sql to a string but the
00:34 - string has certain components first is a
00:37 - name value pair i would like to create a
00:39 - cookie to store a user's first name the
00:42 - name of this pair will be let's say
00:44 - first name set the sequel to some value
00:47 - the value that i will pick is spongebob
00:50 - then end it with a semicolon now you can
00:52 - add an expiration date when the current
00:55 - time is past a certain expiration date
00:57 - well then this cookie will be deleted to
00:59 - set an expiration date set expires equal
01:02 - to then pick a date i'll pick sunday
01:06 - 1st
01:08 - january
01:09 - maybe a date that's really far out like
01:11 - 20 30
01:13 - at midnight
01:16 - utc
01:17 - then semicolon we're also able to set a
01:20 - path for this cookie i'll use the
01:21 - default path that would be path equals
01:24 - forward slash okay let's take a look at
01:26 - this cookie
01:27 - console.log
01:29 - document dot cookie even though this
01:33 - appears to be a string it's actually an
01:35 - object the expiration date and the path
01:37 - aren't displayed all that's displayed is
01:39 - the name and the value you can add more
01:41 - than one cookie so again we will type
01:44 - document.cookie
01:46 - let's copy this text paste it
01:50 - last name
01:51 - last name equals square
01:55 - pants
01:57 - then let's take a look at our cookie
01:58 - again
01:59 - the cookie property of our document can
02:02 - hold more than one cookie but to access
02:04 - it you would just type cookie to
02:06 - overwrite a cookie you would just change
02:08 - the value of a name value pair if i
02:10 - overwrite the first name and the last
02:12 - name they'll change this time let's set
02:14 - first name to patrick
02:16 - last name star
02:18 - there we go first name patrick last name
02:20 - star if we change the expiration date to
02:23 - a date that has already passed that will
02:25 - delete this cookie it'll expire so maybe
02:28 - the last name expired in the year 2000
02:32 - that last name portion of my cookie is
02:34 - no longer there so that's how to expire
02:36 - a cookie at this point we're going to
02:38 - create a function to create a cookie
02:40 - instead of doing so manually
02:42 - function set cookie
02:46 - we'll need a few things
02:47 - a name because these are a name value
02:50 - pairs
02:51 - a value and an expiration date although
02:54 - that's optional for the third argument
02:56 - let's name this parameter days to live
03:00 - as an argument you'll pass a number of
03:02 - days that you would like this cookie to
03:03 - be set to expire 365 would be one year
03:06 - let's create a date object
03:08 - const
03:10 - date
03:10 - equals new
03:12 - date i will set the time of this date
03:14 - date dot set
03:17 - time method within the parentheses we
03:19 - will take date dot get time
03:22 - this will return the current time in
03:24 - milliseconds then add the amount of days
03:27 - to live converted to milliseconds
03:30 - days to live times 24 hours
03:34 - times
03:35 - 60 minutes
03:37 - times 60 seconds
03:40 - times 1000 for 1000 milliseconds our
03:44 - future date is currently in milliseconds
03:47 - we'll convert that to utc string date
03:50 - to
03:51 - utc
03:53 - string method i'll assign this to a
03:55 - variable
03:56 - let
03:58 - expires
03:59 - equals
04:01 - and then we'll use some string
04:02 - concatenation we'll need to set this
04:04 - expires value
04:06 - so within quotes expires
04:08 - equals
04:10 - plus
04:11 - our future date converted to a utc
04:13 - string then we can assign our cookie
04:16 - document.cookie
04:18 - equals i'll use a template literal
04:21 - we're inserting our name that we pass in
04:24 - equals
04:26 - our
04:26 - value
04:28 - add a semicolon to finish this section
04:31 - then the expire section
04:34 - expires
04:36 - then you could also add a path if you
04:37 - would like
04:38 - path equals forward slash that's the
04:41 - default path okay now let's create some
04:43 - cookies i will invoke our set cookie
04:46 - function
04:48 - pass in a name value pair and the amount
04:50 - of days i would like this cookie active
04:52 - what about an email address
04:55 - email
04:56 - make up some email address
04:59 - sponge
05:00 - gmail.com
05:02 - i would like this cookie to live for 365
05:05 - days
05:06 - then let's display our cookies
05:08 - console.log
05:10 - document dot
05:12 - cookie
05:15 - and here's our cookies we still have our
05:17 - first name and last name because we
05:19 - never deleted them but we do have an
05:21 - email now email equals sponge at
05:24 - gmail.com how can we delete a cookie all
05:26 - we have to do is set the expiration date
05:28 - to a pass date here's one easy way to do
05:31 - that let's create function
05:34 - delete
05:35 - cookie
05:36 - all we'll need is a name
05:39 - what we'll do is invoke set cookie
05:42 - pass our name as an argument
05:45 - null for the value and null for the days
05:47 - to live if i was to invoke the delete
05:50 - cookie method and pass in the name email
05:52 - well that email cookie is no longer in
05:54 - here so it's gone let's delete the other
05:56 - cookies too
05:58 - delete
05:59 - first name
06:00 - delete
06:02 - last name
06:04 - and those three cookies are cleared
06:06 - let's create a function to get the value
06:08 - of a cookie by a name let's declare this
06:10 - function function
06:12 - get
06:13 - cookie
06:15 - we'll accept a name as an argument what
06:18 - we'll need to do is decode our cookie
06:20 - i'll store this within a constant
06:22 - constant
06:24 - c for cookie
06:25 - decoded
06:27 - equals
06:29 - decode
06:30 - uri
06:32 - component
06:35 - then pass in
06:36 - document.cookie
06:39 - let's take a look at this
06:40 - console.log
06:45 - c decoded let's make sure we have at
06:47 - least two cookies
06:48 - set cookie
06:51 - first name
06:55 - spongebob
06:57 - 365 days to live
07:01 - set cookie last name
07:05 - squarepants
07:08 - then i will invoke the getcookie method
07:13 - then pass in a name first name is fine
07:16 - okay let's see what we have this is
07:17 - what's stored within c decoded we have
07:20 - our name value pairs what we'll need to
07:22 - do is split each of these name value
07:24 - pairs at each of these semicolons that's
07:26 - how to separate them so after this first
07:29 - statement we'll take
07:31 - c decoded
07:32 - and split at each semicolon semicolon
07:36 - space
07:37 - this will return an array we'll store
07:39 - that within const c
07:42 - array
07:43 - cookie array
07:44 - let's display cookie array
07:47 - console.log cookie array each of those
07:50 - name value pairs is now within separate
07:52 - elements what we're going to do is for
07:54 - each element we'll check to see if
07:56 - there's a match between each of these
07:58 - element names and the name that we're
08:00 - looking for let's take our cookie array
08:02 - c array
08:04 - and use the for
08:05 - each method
08:07 - i'll use an arrow function expression
08:09 - there is one parameter element arrow
08:12 - what would we like to do for each
08:14 - element
08:15 - i'll use an if statement
08:17 - let's check to see if
08:19 - our element
08:20 - at index of
08:23 - the name that we're looking for is equal
08:26 - to zero say that we're looking for last
08:29 - name we'll iterate over each element of
08:31 - our array and see if there's a match we
08:34 - check the first element these don't
08:36 - match but this one does if there's a
08:38 - match then let's return the result
08:41 - results
08:42 - equals
08:43 - and we'll create a substring
08:45 - element dot substring
08:50 - name dot length plus one the length of
08:54 - the name plus one will create a
08:56 - substring and return this text so let's
08:59 - declare
09:00 - let result
09:02 - at the end
09:04 - return
09:05 - result
09:06 - actually i'm going to set result to null
09:09 - okay let's see if this works
09:11 - so we have two cookies
09:13 - and i'm going to console.log
09:16 - getcookie pass in my first name
09:19 - and that first name is spongebob
09:23 - let's get last name
09:25 - last name
09:26 - spongebob and squarepants okay yeah
09:29 - that's how to set delete and get cookies
09:32 - let's take this a step further let's
09:34 - create some text fields a submit button
09:36 - and a get cookies button heading to our
09:38 - html file let's create some text fields
09:41 - and some labels
09:43 - label
09:44 - for
09:46 - equals
09:47 - first text
09:51 - first
09:52 - name colon
09:54 - close the label
09:57 - input
09:58 - id equals first text
10:02 - i'll add a line break
10:05 - let's do the same thing with last name
10:09 - last text
10:11 - last name
10:13 - id is last text
10:17 - i'll create a submit button
10:19 - button id equals
10:22 - submit
10:23 - now let's name this btn for short submit
10:26 - button
10:28 - text will be
10:31 - submit
10:34 - then a get cookies button
10:38 - cookies btn for button
10:40 - the text will be
10:42 - get
10:43 - cookies
10:46 - okay heading back to our javascript file
10:49 - let's select these elements
10:51 - const
10:52 - first text
10:54 - equals document
10:56 - dot
10:58 - query
10:58 - selector
11:00 - we're selecting the id of first text
11:08 - let's do the same thing with last text
11:17 - our submit button
11:19 - submit button
11:26 - then cookie button
11:29 - cookie
11:30 - button
11:35 - i'm going to add an event listener to
11:37 - our submit button
11:38 - submit button dot add
11:41 - event
11:42 - listener
11:45 - the event attribute will be click
11:48 - when we click we're going to perform an
11:51 - arrow function expression
11:53 - we will set the cookies according to
11:55 - what these values are within these text
11:57 - boxes we will invoke the set cookie
12:00 - function
12:02 - the name will be first name
12:05 - the value will be whatever's within our
12:08 - text boxes
12:09 - first text
12:11 - dot value
12:13 - and days to live i'll set this to be a
12:15 - year
12:16 - 365 days
12:18 - let's do the same thing with our last
12:21 - name
12:22 - set cookie last name
12:26 - last text.value
12:28 - let's add an event listener to our
12:29 - cookie button that will populate the
12:32 - fields that function will search for any
12:34 - cookies and return a value okay we have
12:36 - cookie button add event listener
12:39 - click
12:43 - first text
12:44 - dot value
12:46 - equals
12:47 - get
12:49 - cookie
12:51 - then the name of the cookie first name
12:55 - do the same thing with last text
12:57 - last text value gut cookie
13:01 - last name
13:07 - whoops looks like i misspelt this id
13:10 - cookie button now before we run this i'm
13:11 - just going to delete our cookies
13:15 - delete cookie
13:17 - first
13:18 - name delete cookie last name
13:25 - then save and run it
13:27 - so when i press get cookies well we
13:29 - don't have any first name or last name
13:31 - cookies there's nothing to populate
13:33 - these text fields so i'm going to type
13:35 - in a first name and a last name
13:37 - spongebob
13:40 - squarepants
13:42 - press submit
13:43 - this first name and last name are stored
13:45 - as cookies now so i'm going to refresh
13:47 - this page press that get cookies button
13:50 - again that will populate these text
13:52 - fields with the cookies i have so yeah
13:54 - everybody that's an introduction to
13:56 - cookies they're small text files stored
13:58 - on your computer they're used to
14:00 - remember information about the user and
14:02 - they're saved in name value pairs if you
14:04 - would like a copy of all this code i
14:06 - know there's a lot here i'll post all of
14:08 - this in the comments section down below
14:10 - and well yeah that's an introduction to
14:12 - cookies using javascript