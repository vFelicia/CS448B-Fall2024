00:00 - hey everybody today I need to explain
00:01 - triggers when an event happens a trigger
00:05 - does something I know that sounds very
00:07 - generic for example when we insert
00:09 - update or delete a record we can use a
00:12 - trigger to check data handle errors or
00:15 - audit tables we can do a plethora of
00:17 - things here's an example I have a table
00:20 - of employees we have an hourly pay
00:22 - column maybe I would like a salary
00:25 - column whenever we add an employee or
00:28 - update our hourly pay the employee's
00:30 - salary will be changed automatically
00:32 - with the trigger before creating a
00:34 - trigger let's update our employees table
00:36 - We'll add a salary column
00:39 - alter table
00:42 - employees
00:44 - add column
00:47 - salary the data type will be decimal
00:51 - 10 digits Precision of two
00:53 - we will place this column after the
00:56 - hourly pay column
00:59 - then select all from our employees table
01:05 - let's see what we have there we are
01:06 - there's our salary column
01:09 - let's update our employees table
01:13 - set our salary column equal to the
01:18 - hourly pay times to calculate an
01:22 - employee's salary using an hourly pay
01:24 - Sheldon Plankton for example take the
01:26 - hourly pay ten dollars per hour there's
01:29 - typically 40 hours in a work week then
01:32 - 52 weeks in a year
01:34 - Plankton would have a salary of twenty
01:36 - thousand eight hundred dollars so a
01:38 - shortcut you could just take the hourly
01:39 - pay times
01:42 - 2080. there are 2080 work hours in a
01:46 - typical year so take the hourly pay
01:48 - times 2080.
01:52 - then we will select all from
01:56 - employees
01:59 - there is everybody's salary currently
02:01 - whenever we update an employee's hourly
02:04 - pay I would like to also update the
02:06 - salary automatically with the trigger I
02:09 - don't want to have to calculate every
02:10 - employee's salary manually you know
02:13 - using a calculator like I just did we're
02:15 - going to create a trigger
02:17 - create trigger
02:19 - then we need a name for this trigger
02:21 - before we update the hourly pay we're
02:24 - going to do something I will name this
02:26 - trigger before
02:28 - hourly pay
02:31 - update
02:33 - we'll use either the keyword before
02:35 - or after
02:37 - do you want to do something before or
02:39 - after I would like to do something
02:41 - before
02:42 - before what before an insert before
02:45 - delete before an update before an update
02:47 - in this case
02:49 - on our table
02:51 - employees
02:53 - then add this line for each row
02:56 - we may be working with more than one row
02:58 - using a trigger so that's why we're
03:00 - including this line This trigger can
03:03 - involve one or more rows now what are we
03:06 - going to do before we update an
03:07 - employee's hourly pay let's set the
03:11 - salary
03:12 - equal to
03:15 - the hourly
03:18 - pay times 2080 because there's 2080 work
03:24 - hours in a typical year
03:25 - okay there's one more thing I'm going to
03:27 - add let's prefix salary and hourly pay
03:30 - with this new keyword new DOT salary new
03:35 - DOT hourly pay MySQL doesn't know if
03:38 - we're referring to the old salary and
03:40 - the old hourly pay we're telling MySQL
03:42 - we're calculating a new salary use the
03:45 - new hourly pay when that's changed in
03:47 - place of the old one okay let's take a
03:49 - look let's execute this statement
03:54 - our trigger has been created in your
03:56 - schemas window to find any triggers go
03:58 - to tables then find that table where we
04:01 - applied the trigger employees
04:03 - then triggers I probably need to refresh
04:06 - this there it is before hourly pay
04:09 - update otherwise you can type show
04:12 - triggers
04:15 - and here is our trigger
04:16 - here's the trigger name event update the
04:20 - table the statement and the timing
04:24 - let's select all from
04:26 - employees
04:29 - Mr Krabs is going to give himself an
04:31 - hourly pay raise because he's greedy
04:34 - let's update our employees table
04:39 - set the hourly
04:42 - pay
04:43 - equal to fifty dollars per hour
04:46 - where our employee ID equals one
04:51 - so Mr crab's salary is about fifty three
04:54 - thousand dollars per year
04:56 - before we update it we will change the
04:59 - salary of this employee
05:01 - from fifty three thousand dollars to
05:04 - over six figures
05:06 - 104 000 that change happened
05:09 - automatically with the trigger before
05:11 - updating the employee's hourly pay we
05:14 - calculated a new salary automatically
05:17 - let's make another change let's increase
05:19 - every employee's hourly pay by one
05:22 - dollar per hour Mr Krabs is now feeling
05:24 - generous
05:25 - update employees we will set the hourly
05:28 - pay equal to whatever the hourly pay
05:32 - currently is plus one
05:35 - we will apply this for every employee we
05:37 - don't need a where clause
05:39 - there everybody is now making one more
05:42 - dollar per hour and the salaries reflect
05:45 - that let's create a new trigger we will
05:48 - calculate a salary whenever we insert a
05:50 - new employee more specifically whenever
05:52 - we insert a new hourly pay right now we
05:55 - have a trigger that only kicks in when
05:57 - we update an hourly pay
06:00 - let's delete plankton
06:02 - Plankton got fired
06:04 - delete from employees
06:08 - where employee ID equals six
06:14 - select all from employees
06:19 - their Plankton is now gone
06:21 - let's create a trigger
06:23 - create
06:24 - trigger
06:26 - before
06:28 - hourly pay
06:31 - insert
06:33 - are we doing something after or before
06:37 - we're doing something before an event
06:40 - before are we updating inserting or
06:43 - deleting we are inserting before we
06:47 - insert a new record
06:48 - on our table employees
06:52 - for each row
06:54 - let's set the new
06:57 - salary
06:59 - equal to
07:02 - the new
07:04 - hourly pay
07:07 - times 2080.
07:11 - here is our new trigger
07:14 - let's take a look at our employees table
07:15 - select all from employees
07:21 - let's insert a new employee
07:23 - insert into employees
07:28 - values
07:30 - I'm just going to follow these columns
07:32 - employee ID 6.
07:34 - first name is Sheldon
07:37 - last name plankton
07:41 - hourly pay is ten dollars per hour
07:44 - for the salary I'm going to set this to
07:46 - null our trigger will kick in and set
07:49 - that
07:50 - position
07:52 - janitor
07:54 - higher date
07:56 - 2023 January 7th
08:00 - supervisor idea five
08:03 - let's see if our salary is calculated
08:06 - it was
08:08 - Plankton's hourly pay is ten dollars per
08:10 - hour meaning he has a salary of twenty
08:12 - thousand eight hundred dollars per year
08:14 - I do have a few more examples triggers
08:16 - are something you'll want to master
08:17 - they're really helpful we're going to
08:20 - create a new table this time
08:22 - create table
08:25 - expenses
08:30 - our expenses table will have three
08:32 - columns
08:34 - an expense
08:36 - ID
08:38 - the data type will be int this will be
08:40 - the primary key you could set this
08:42 - column to Auto increment if you want but
08:45 - but that's overkill for this topic I
08:46 - would say I'm going to try and keep it
08:48 - simple
08:49 - expense name
08:52 - the data type is varchar
08:55 - 50 is good I suppose
08:58 - then expense
09:00 - total
09:02 - I will set that to be decimal
09:05 - 10 digits Precision of 2 is fine then
09:08 - let's select everything from our table
09:10 - expenses
09:14 - let's insert some values
09:17 - insert into expenses
09:23 - we have three rows one two three
09:30 - ID of one
09:33 - the expense name is salaries
09:36 - for the value for now I'm going to set
09:38 - that to be zero the second row will be
09:40 - two
09:42 - supplies
09:44 - zero
09:47 - ID of three
09:48 - maybe taxes
09:51 - and zero
09:56 - I will calculate the expense total of my
09:58 - salaries bro
10:02 - update expenses
10:05 - I will set
10:07 - the expense
10:10 - total equal to I'll use a nested query
10:15 - select the sum of salary
10:20 - from
10:22 - employees
10:24 - where our expense name column right here
10:30 - is equal to
10:32 - salaries
10:37 - this is all of these salaries combined
10:39 - from the employees table the total is
10:41 - two hundred fifty four thousand two
10:43 - hundred eighty dollars whenever we
10:46 - delete an employee we will update this
10:48 - value found within another table our
10:50 - expenses table
10:52 - so let's create a trigger
10:55 - create
10:57 - trigger
10:59 - after salary
11:02 - delete
11:04 - are we doing something before
11:07 - or after we're doing something after
11:10 - deleting a salary
11:12 - after delete
11:14 - on
11:16 - employees
11:19 - for each row
11:21 - we will update our expenses table
11:26 - and set the expense
11:30 - total
11:32 - equal to
11:34 - whatever the expense total currently is
11:38 - minus that employee's salary
11:41 - if we're deleting a salary we will refer
11:44 - to that salary as the old salary
11:50 - the net aware Clause where
11:53 - expense
11:55 - name equals
11:58 - salaries
12:03 - okay we have created our trigger
12:06 - let's take a look at our expenses table
12:13 - I'm going to delete Plankton again he's
12:16 - fired
12:17 - delete from employees
12:22 - where
12:24 - employee ID equals six that's plankton
12:28 - then select all from expenses
12:32 - look at that our expense total changed
12:34 - it's now two hundred thirty three
12:36 - thousand dollars
12:38 - let's create a trigger that will update
12:40 - our salaries whenever we insert a new
12:42 - employee
12:45 - create
12:46 - trigger
12:48 - after
12:49 - salary insert
12:53 - we're doing something after this time
12:55 - after an insert
12:58 - on our table employees
13:01 - or each row
13:04 - we will update
13:07 - our expenses table
13:09 - we will set the expense
13:13 - total
13:14 - equal to
13:16 - the expense total
13:18 - plus the employee's new salary
13:22 - new DOT salary
13:25 - where
13:27 - expense
13:29 - name
13:30 - equals
13:33 - salaries
13:37 - let's insert a new employee
13:39 - let's take a look at our expenses table
13:41 - select all from expenses
13:45 - we will insert a new employee
13:48 - insert into
13:50 - employees
13:52 - our values
13:54 - employee ID 6.
13:57 - first name is Sheldon
13:59 - last name plankton
14:03 - hourly pay of ten dollars per hour
14:06 - the salary will be null that will be
14:08 - calculated automatically with the
14:10 - trigger
14:11 - position is
14:13 - janitor
14:15 - higher date 2023-01-07
14:20 - and a supervisor idea five
14:23 - let's see if this expense total will
14:25 - change
14:26 - which it does when we insert a new
14:28 - employee we're specifically a salary our
14:31 - expense total of salaries will be
14:33 - updated one last example that I promised
14:36 - we're done let's create a trigger that
14:38 - will update this value when we change an
14:41 - employee salary and that will probably
14:43 - be the most complicated one
14:45 - let's create
14:47 - a trigger
14:50 - after
14:52 - salary
14:54 - update
14:56 - we're doing something after
14:58 - we update on our table employees
15:04 - for each row
15:07 - let's update
15:10 - expenses
15:12 - set the expense
15:15 - total
15:17 - equal to
15:18 - the expense total Plus
15:22 - the employee's new salary
15:26 - minus the employee's old salary what's
15:29 - the difference we'll find the difference
15:31 - between the employee's new salary and
15:33 - their old salary add that to the expense
15:36 - total
15:38 - where
15:39 - expense
15:41 - name equals
15:44 - salaries
15:47 - we have created our trigger
15:50 - let's select all from expenses
15:55 - Mr Krabs is going to give himself
15:57 - another pay raise
15:59 - update employees
16:02 - set the hourly pay
16:07 - of Mr Krabs to 100 per hour
16:12 - where employee ID equals one
16:18 - our expense total underneath salaries is
16:21 - now changed it's now 356 200 dollars
16:26 - well all right everybody that's a
16:27 - trigger in simple words when an event
16:30 - happens do something such as when we
16:33 - insert update or delete something from a
16:35 - table a few of the benefits is that you
16:37 - can check data handle errors and audit
16:40 - tables it's a really helpful tool to
16:42 - have and well everybody those are
16:45 - triggers in MySQL