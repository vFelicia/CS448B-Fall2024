00:00 - hey everyone it's you bro hope you're
00:01 - doing well and in this video i'm going
00:03 - to explain
00:04 - the binary search algorithm in computer
00:07 - science
00:07 - so sit back relax and enjoy the show
00:12 - all right binary search it's a search
00:15 - algorithm that finds
00:16 - the position of a target value within a
00:19 - sorted array or other collection
00:21 - in order for a binary search to work
00:23 - whatever we're searching through
00:24 - it needs to be sorted and basically what
00:27 - we do is we take
00:28 - half of the array and eliminate it
00:30 - during each step and we will whittle
00:31 - down our collection until there is only
00:33 - one element remaining
00:35 - in this example i have an array of 11
00:37 - elements each element contains a letter
00:39 - and they're all sorted alphabetically
00:41 - let's say we are looking for the letter
00:43 - h and i need the index
00:45 - what we would do with a binary search is
00:47 - that we always begin in the middle
00:48 - we first check to see if our target
00:51 - value is equal to this middle value
00:53 - if these are equal then we can return
00:55 - this index but odds are they're probably
00:57 - not
00:58 - going to be equal on the very first turn
01:00 - the very first step
01:01 - so these are not equal then we will
01:03 - check to see if our target value
01:06 - is greater than or less than this middle
01:08 - value
01:09 - since h is greater than f we can
01:11 - disregard
01:12 - this entire first half of our array
01:14 - because since this is sorted
01:16 - our target value could not possibly be
01:18 - within this first portion
01:20 - and then we begin step two or phase two
01:23 - it's the same process as before
01:25 - so again we begin in the middle check to
01:27 - see if our target value
01:29 - is equal to the middle value there or
01:31 - not check to see if our target value
01:33 - is greater than or less than the middle
01:36 - value
01:36 - this time h is less than i we would
01:39 - delete the
01:40 - second half of this portion we're not
01:42 - actually deleting these values we're
01:43 - disregarding them
01:44 - and then we can move on to step three
01:46 - we're repeating the same process as
01:48 - before
01:49 - and this time these elements divide
01:51 - evenly so we would just round down and
01:53 - begin
01:54 - and say that this is the middle so h is
01:56 - greater than
01:57 - g we would disregard this element and we
02:00 - only have h remaining so we would return
02:03 - this index because these values are
02:05 - equal and that's a binary search
02:08 - now a binary search isn't too efficient
02:10 - when working with
02:11 - small data sets however if you're
02:12 - working with a large data set like
02:15 - 1 million elements well then a binary
02:18 - search is actually fantastic
02:20 - because we're eliminating half of the
02:21 - elements we are searching through
02:23 - during each phase or turn so if we had a
02:26 - million elements
02:27 - after the first phase we can already
02:29 - disregard like half a million elements
02:32 - and then we just repeat the process
02:33 - until there's only one left
02:35 - so if this was an iterative approach we
02:37 - would need to search through these
02:39 - linearly beginning with
02:40 - you know index zero and going all the
02:42 - way to a million so a binary search is
02:45 - fantastic with large data sets
02:47 - the runtime complexity of a binary
02:49 - search is o of log
02:51 - n the larger the data set a binary
02:53 - search becomes more and more efficient
02:55 - compared to other search algorithms
02:57 - alright let's perform a binary search in
02:59 - real life now we'll use the built-in
03:02 - binary search method of arrays to begin
03:04 - with and then later on we'll build our
03:06 - own binary search function
03:07 - so we'll need an array to work with
03:09 - let's say we have an array of integers
03:11 - named array
03:12 - int array and the size of this array
03:15 - will be 100
03:16 - we'll increase the size later for
03:17 - demonstration purposes
03:19 - and we'll need a target value that we're
03:21 - searching for i'll just name this target
03:23 - and target equals what about 42 we'll
03:25 - search for the number 42 and we'll need
03:27 - to
03:28 - populate our array so we can do so using
03:30 - a for loop int
03:32 - i equals zero we will continue this for
03:34 - loop as long
03:35 - as i is less than array dot length
03:39 - and increment i by one during each
03:42 - iteration
03:43 - then we will fill array at index i
03:46 - with whatever i is our index
03:49 - okay so the cheap way of using a binary
03:53 - search
03:53 - is to use the built-in binary search
03:56 - method of arrays
03:57 - let's say int index
04:01 - equals arrays dot
04:04 - binary search and taking a look at this
04:08 - binary search method
04:09 - there's two arguments that we have to
04:11 - pass in an array
04:13 - and whatever we're searching for so we
04:15 - will pass in
04:16 - our array and our target then return the
04:19 - index
04:20 - and let's display that so let's check to
04:23 - see
04:23 - if our index is equal to negative one
04:28 - if our target is not found then that
04:30 - means
04:31 - negative one will be returned from our
04:33 - binary search method
04:34 - so let's print something
04:36 - system.out.printline
04:38 - uh what about element not found
04:42 - actually better yet target not found let
04:44 - me change that
04:45 - target plus not found
04:48 - okay then else
04:52 - else we will display
04:54 - system.out.printline
04:57 - element found at
05:01 - colon space plus index
05:05 - all right let's try it okay element
05:08 - found at 42
05:10 - cool now let's create our own binary
05:12 - search function for practice
05:13 - i'll turn this line into a comment copy
05:16 - it
05:17 - paste it and get rid of this erase
05:18 - portion
05:20 - okay then i'm just going to use a
05:22 - shortcut to generate this function
05:25 - okay so private static int binary search
05:28 - there are two parameters an array of
05:31 - integers named array
05:32 - and int target so we'll return negative
05:35 - one
05:36 - that acts as a sentinel value negative 1
05:38 - means that
05:39 - the value was not found now what we'll
05:42 - need at this point
05:43 - is the beginning and ending index of our
05:45 - array so let's say
05:47 - int low will be the beginning and int
05:50 - high
05:50 - is the end array dot length
05:54 - minus one so we have a low index and
05:57 - high index and we'll create a while loop
06:01 - while low is less than or equal to high
06:05 - we'll continue this while loop
06:06 - and keep on searching through our array
06:09 - so first we need
06:10 - the middle index int middle
06:13 - and here's the formula for that low plus
06:17 - high minus low divided by two
06:21 - so we have our middle index we will take
06:25 - int value equals our array
06:29 - at index of middle so this will extract
06:32 - that value found within
06:34 - this element okay so this portion is
06:37 - optional i'm just going to display
06:38 - whatever this value is
06:40 - so we can count the amount of steps it's
06:41 - going to take to find a value
06:43 - so let's say middle colon space whatever
06:47 - this value is this line of code is
06:49 - optional i'm just doing this for
06:50 - educational purposes
06:52 - okay now we need to check to see if our
06:54 - value is
06:55 - less than or greater than our target or
06:58 - equal to
07:00 - if value
07:03 - is less than our target
07:07 - low equals middle plus
07:11 - one and actually i'm going to get rid of
07:13 - these curly braces
07:14 - if you have an if statement and you only
07:16 - have like one line of code you don't
07:17 - really need
07:18 - the curly braces i'm just doing this so
07:20 - it's easier to read
07:22 - okay else if
07:26 - value is greater than target
07:30 - we will set our height index high equals
07:34 - middle minus one
07:37 - else that means we have found our target
07:39 - else
07:40 - return middle
07:43 - so this means that target is found
07:48 - and by returning negative one that means
07:50 - target
07:51 - not found and that is our binary search
07:54 - function
07:54 - let's try it okay element found at 42
07:58 - so it took us let's see one two three
08:01 - four four steps to find the number 42
08:04 - within this array of 100 elements
08:06 - now let's increase the size because
08:08 - binary searches do extremely well
08:10 - with large data sets so let's say we
08:13 - have
08:13 - 1 million elements and let's change this
08:15 - target
08:16 - what about 700
08:19 - 7 thousands whatever that number is
08:23 - okay so let's search for it and let's
08:25 - count the steps
08:27 - uh so there's quite a number of steps
08:29 - here but let's count them
08:31 - 1 2 3 4 5 6 7
08:34 - 8 9 10 11 12 13 14 15
08:38 - 16 17 18 19 20 20 steps
08:41 - now imagine if we took a linear approach
08:43 - where we began
08:44 - at index zero and looped through this
08:46 - entire array
08:47 - looking for this index and in that case
08:50 - looping through an array would have a
08:51 - runtime complexity of o event
08:53 - to find this number it's going to take
08:55 - over 700 000 steps because we're
08:58 - iterating
08:58 - once for each element within this array
09:01 - compared to a binary search where it
09:02 - only took 20 steps
09:04 - well then in conclusion a binary search
09:06 - is a search
09:07 - algorithm that finds the position of a
09:10 - target value within
09:11 - a sorted array half of the array is
09:14 - eliminated during each step or phase
09:17 - so that's a binary search algorithm if
09:19 - you would like a copy of all this code
09:21 - of course i will post this to the
09:22 - comment section down below
09:24 - and that is the binary search algorithm
09:26 - in computer science
09:29 - hey you yeah i'm talking to you if you
09:31 - learned something new
09:32 - then help me help you in three easy
09:35 - steps by smashing that like button
09:37 - drop a comment down below and subscribe
09:39 - if you'd like to become a fellow bro
09:50 - [Music]
10:03 - you