00:00 - hey hello there so today I'm going to
00:02 - explain Arrow functions in JavaScript an
00:04 - arrow function is a concise way to write
00:06 - a function expression it's good for
00:09 - simple functions that you only use once
00:11 - here's the formula you have your
00:13 - parameters Arrow then some code you
00:15 - would like to perform here's an example
00:18 - suppose I have a function declaration I
00:21 - have the hello function I'll we're going
00:24 - to do is
00:25 - console.log the word hello to use this
00:29 - function I need to call it by its name
00:31 - add a set of parentheses this will
00:33 - display the word hello a concise way to
00:36 - write the same function is to use an
00:38 - arrow function we'll begin with a
00:40 - function expression then convert it to
00:41 - an arrow function just so we understand
00:43 - the differences this time I will create
00:46 - a constant hello hello is going to be a
00:49 - constant that stores our function
00:52 - expression if I were using a function
00:54 - expression we would say function
00:57 - parenthesis curly braces then the code
00:59 - we want to perform console.log the
01:04 - word hello this would do the same thing
01:08 - hello a more concise way to write this
01:11 - function expression would be to use an
01:13 - arrow
01:14 - function following this formula we list
01:17 - our parameters we don't have any we need
01:19 - a set of parenthesis Arrow then some
01:22 - code we would like to perform I'm going
01:24 - to console.log the word
01:28 - hello and that
01:30 - works we're sticking an arrow function
01:33 - within a variable or named constant to
01:36 - invoke the arrow function within we just
01:38 - follow that constant or variable with
01:39 - the set of parentheses like we're
01:41 - calling it as if it's a pair of
01:42 - telephones talking to each other you can
01:45 - send some arguments to an arrow function
01:47 - we'll need to set up the parameters I
01:49 - will have a name parameter within our
01:52 - code let's console.log I'll use a
01:55 - template string hello add a placeholder
01:59 - add my name
02:00 - parameter now I need to pass in an
02:02 - argument because right now it's hello
02:06 - undefined pass in your first name is an
02:09 - argument hello bro within your code if
02:12 - you need to include more than one
02:14 - statement you'll need to enclose all of
02:16 - that code within a set of curly
02:18 - braces let's add a new
02:22 - line
02:25 - console.log you are
02:27 - old hello bro you are
02:30 - old okay let's set up another parameter
02:33 - this time we will accept an age
02:37 - argument let's transform our second
02:39 - console.log to be you are at a
02:44 - placeholder our parameter
02:47 - age years
02:49 - old now we'll pass in a second argument
02:52 - for age hello bro you are 25 years old
02:57 - so that's the basics of an arrow
02:58 - function you have your parameter ERS
03:00 - Arrow then some code you would like to
03:02 - perform there's no need to create a
03:04 - function
03:04 - declaration let's go over another
03:07 - example we have the set timeout
03:11 - function this function accepts a call
03:14 - back then a given amount of time we are
03:16 - then going to execute this code this
03:19 - callback after 3 seconds 3,000
03:22 - milliseconds I will execute whatever
03:24 - this call back is let's create a
03:26 - function to say hello again function
03:31 - hello we will
03:34 - console.log the word hello I will pass
03:38 - in a call back after 3 seconds we
03:42 - say hello in place of a call back I
03:46 - could use a function expression let's
03:48 - cut our
03:52 - function remove this argument then paste
03:55 - our function expression remember we
03:57 - don't need the name for a function
03:58 - expression this works as
04:02 - well hello or otherwise we can use a
04:05 - more concise Arrow function we will pass
04:08 - that as an argument we have our
04:10 - parameters we don't have any Arrow then
04:13 - some code
04:16 - console.log the word hello after 3
04:20 - seconds we display the
04:22 - word hello now we'll use Arrow functions
04:25 - with map filter and
04:27 - reduce we have an array of numbers const
04:31 - numbers equals the numbers 1 through
04:37 - six let's start with using the map
04:40 - filter to square each of these numbers
04:43 - but we will use Arrow
04:46 - functions const
04:50 - squares equals our original array
04:53 - numbers. map normally we would pass in a
04:57 - call back as an argument but we're not
04:59 - going to do that we'll use an arrow
05:02 - function we have one
05:05 - parameter an
05:08 - element
05:09 - arrow take each element use
05:13 - math.pow to raise our element to a given
05:17 - power then let's console.log our
05:21 - squares console.log squares there they
05:24 - are here are all the original numbers
05:26 - squared 1 4 9 16 25
05:30 - 36 let's Cube each
05:34 - number const
05:37 - cubes raise our element to the power of
05:40 - three console.log are
05:43 - cubes there are all the numbers
05:46 - cubed we'll use the filter method to
05:49 - filter out any numbers that are odd
05:52 - const even nums equals rray
05:57 - numbers we will use the filter method
05:59 - method we can pass in a call back but we
06:01 - don't need to we will pass in an arrow
06:05 - function we have our element as a
06:08 - parameter
06:10 - Arrow we don't necessarily need a return
06:13 - statement if we have only one line of
06:16 - code take our element modulus 2 is it
06:21 - divisible by two and does the strictly
06:24 - equal zero if it does it's an even
06:26 - number let's console.log our even number
06:30 - 2
06:30 - 46 let's do this with odd
06:34 - numbers odd
06:38 - nums take our element modulus 2 is it
06:41 - strictly not equal to
06:44 - zero display our odd nums 1
06:48 - 35 and lastly let's do reduce we will
06:51 - get a total by summing all of the
06:53 - elements of this array const total
06:57 - equals our original array
07:00 - do reduce pass in a call back or an
07:03 - arrow function this time we have two
07:05 - arguments an
07:08 - accumulator and an
07:11 - element we have an
07:13 - Arrow return our accumulator plus our
07:19 - element then display the
07:22 - total our total is
07:24 - 21 all right everybody so those are
07:26 - Arrow functions they're a concise way to
07:29 - write a function expression they're good
07:31 - for simple functions that you only use
07:33 - once you list your parameters within a
07:36 - set of parentheses an arrow then some
07:39 - code you would like to perform in this
07:41 - example we've written a more concise way
07:43 - to use the map filter and reduce methods
07:46 - normally we can pass in a call back as
07:47 - an argument a function expression or an
07:50 - arrow function and well everybody those
07:53 - are Arrow functions in
07:58 - JavaScript