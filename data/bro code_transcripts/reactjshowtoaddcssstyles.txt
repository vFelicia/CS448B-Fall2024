00:00 - yo what's going on everybody so in
00:02 - today's video I'm going to show you a
00:04 - few ways in which we can style react
00:06 - components with CSS this topic doesn't
00:09 - include external Frameworks such as
00:11 - Tailwind or pre-processors such as SAS
00:14 - I'm going to cover a few of the more
00:15 - basic techniques including external
00:18 - modules and inline CSS styling we will
00:21 - need a component to work with let's
00:23 - begin with a button component let's go
00:24 - to our source folder new file button.
00:28 - jsx
00:30 - we'll create a function based component
00:32 - because we like function based
00:34 - components be sure to export it because
00:37 - I sometimes forget to do that so let's
00:39 - do it now export default the name of the
00:43 - component then we will
00:46 - return a single button
00:51 - element with text that says click me
00:55 - normally when setting a CSS class you
00:57 - use the keyword class however in jsx
01:00 - that's a reserved keyword we'll instead
01:03 - use class name with a capital N I'll set
01:07 - my class name to be
01:10 - button all right then we just need to
01:13 - import this button component going back
01:15 - to our app component that's the parent
01:18 - we will import button from its
01:22 - location do SL button. jsx and now we
01:28 - have a button component to work with
01:30 - with there's my button let's begin with
01:33 - external CSS styling we should already
01:36 - be a little familiar with it already
01:37 - heading to our index CSS stylesheet we
01:40 - can apply some Global Styles we will
01:42 - select the class name of button dot to
01:46 - select a class button let's apply the
01:49 - following CSS properties but feel free
01:51 - to make any changes or alterations I
01:54 - will begin with a background color I've
01:56 - already pre-picked a color personally I
01:58 - like using hsl cell
02:01 - values 200 for the Hue 100% for the
02:06 - saturation 50% for the lightness that
02:09 - will give you a light blue color for the
02:11 - font color that would be the color
02:13 - property I will set that to be
02:16 - white for
02:18 - padding let's say 10 pixels by 20
02:23 - pixels border radius to round the
02:25 - corners I will set that to be five
02:28 - pixels border none to remove the
02:33 - Border then let's change our cursor to
02:37 - be a pointer when we hover over the
02:39 - button that's not a bad looking button I
02:42 - am zoomed in to like 300% just for this
02:45 - demonstration all right we have utilized
02:47 - an external CSS stylesheet they're easy
02:50 - to use for simple projects such as
02:52 - making a YouTube video tutorial it gives
02:55 - you flexibility with media queries and
02:57 - pseudo selectors you can use external
02:59 - Style sheets to apply Global Styles
03:01 - throughout your web application however
03:03 - using external stylesheets can lead to
03:05 - naming conflicts especially when you
03:07 - have more components and classes to work
03:09 - with if you have a large web application
03:11 - you'll likely have all sorts of
03:12 - different buttons you would need a
03:14 - strong naming convention and good
03:16 - organization two buttons you may create
03:19 - might have the same class Name by
03:20 - mistake and with large applications it
03:22 - might be difficult to keep track of all
03:24 - the different class names moving on to
03:26 - Method two let's cut all of these
03:28 - properties save we're going to create a
03:31 - module now that's the second method
03:34 - we'll create a dedicated CSS stylesheet
03:37 - specifically for each component what you
03:40 - may see some developers do is they'll
03:42 - create a new folder specifically for
03:45 - their component let's create a new
03:47 - folder which we will name button the
03:49 - name of our
03:50 - component let's move our button
03:52 - component to the button
03:54 - folder let's move it be sure to update
03:57 - any Imports as well my app component is
04:00 - now importing the button component from
04:02 - the button
04:04 - directory within our button folder we'll
04:07 - create a new file this will be a CSS
04:10 - stylesheet which we will name the name
04:12 - of the component in this case button dot
04:16 - module.
04:18 - CSS let's paste all of those properties
04:20 - that we cut
04:22 - before now from our button component we
04:25 - will need to import this module at the
04:28 - top we will import styles from the
04:33 - location of that
04:34 - module
04:36 - slash button. module.
04:41 - CSS for our class name we will use a set
04:44 - of cly braces to use a dynamic
04:48 - value our class name will equal our
04:51 - import of styles dot the name of the
04:54 - class
04:58 - button and there's our button again the
05:01 - nice thing about modules is that it
05:03 - avoids naming conflicts because a unique
05:05 - class is going to be generated for you
05:07 - via a hashing algorithm if I were to
05:09 - right click on this button and go to
05:12 - inspect this class name is unique it's
05:15 - generated via a hash so with modules we
05:18 - don't have to worry about naming
05:20 - conflicts modules are also convenient if
05:22 - each component has its own unique style
05:25 - however a few of the downsides though
05:27 - with using modules is that it does
05:29 - require additional setup and Global
05:31 - Styles aren't applied easily you would
05:33 - have to import them from elsewhere and
05:35 - that's a whole thing let's remove our
05:37 - button component from the button
05:38 - directory let's put it back in
05:41 - source and delete our button
05:45 - directory going to our button component
05:48 - then remove the import as well we don't
05:50 - need that anymore now we're going to use
05:52 - inline
05:54 - Styles what you see some people do is
05:56 - they'll create a JavaScript object named
06:00 - styles styles equals a set of curly
06:03 - braces for an object let's paste all of
06:06 - those CSS properties we're within jsx
06:09 - code right now we can't use any dashes
06:12 - we'll switch to a camel case naming
06:18 - convention all values Should Be
06:28 - Strings
06:31 - each property should be comma
06:38 - separated let's remove our class
06:41 - name we will set the style attribute to
06:45 - equal use a set of curly braces to
06:48 - insert a dynamic value we will insert
06:51 - our Styles object that contains all of
06:53 - these CSS properties and now we have
06:56 - done inline CSS styling inline CSS
06:59 - styling is convenient and easy to
07:02 - understand it prevents Global style
07:03 - conflicts because we're not working with
07:05 - class names it's great for isolated
07:08 - components with minimal styling such as
07:10 - a like button or a subscribe button
07:12 - however inline styling can be
07:14 - increasingly Less maintainable in large
07:16 - applications it reduces the readability
07:19 - of your components especially if you
07:20 - have a lot of CSS properties it's not
07:23 - great for any complex styling such as
07:25 - responsive CSS it tends to be better for
07:27 - components with minimal Style
07:30 - all right everybody so those are three
07:31 - different ways in which we can style
07:33 - react components with CSS external which
07:36 - is great for Global Styles or small
07:38 - projects modules which is preferred for
07:41 - individual components that have their
07:43 - own unique Styles and inline which tends
07:46 - to be good for any small components with
07:48 - minimal styling use what's best for your
07:50 - project or your own personal preference
07:52 - or whatever your team prefers if you're
07:54 - working on a project together there's no
07:56 - one siiz fits-all approach unfortunately
07:58 - myself I prefer to use modules but
08:00 - throughout the series I'm going to be
08:02 - using a lot of external CSS just because
08:04 - our projects are really small and well
08:06 - everybody those are a few ways in which
08:08 - you can style react components with
08:14 - CSS