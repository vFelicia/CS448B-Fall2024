00:02 - all right everybody linear searches we
00:04 - need to talk about linear searches
00:06 - because this wouldn't be a complete
00:07 - course without them with a linear search
00:10 - we iterate through a collection one
00:12 - element at a time the runtime complexity
00:15 - of a linear search is big o of n the
00:18 - larger the data set the number of steps
00:20 - to complete that search will increase
00:22 - proportionately the disadvantages of a
00:25 - linear search is that they are slow for
00:27 - large data sets but with the advantages
00:30 - they are fast for searches of small to
00:32 - medium sized data sets and they don't
00:35 - need to be sorted that's a huge benefit
00:37 - over binary searches and interpolation
00:40 - searches and they are useful for data
00:42 - structures that do not have random
00:44 - access such as linked lists so let's
00:47 - begin let's create a basic array of
00:49 - integers
00:50 - int array
00:52 - and to make up some numbers they don't
00:54 - necessarily need to be in order
00:58 - all right then let's find an index int
01:00 - index equals and we will invoke a linear
01:05 - search function which we still need to
01:07 - declare we will pass in our array and
01:09 - some value we would like to search for
01:11 - uh let's search for the number one okay
01:14 - so then let's declare this function
01:16 - create method linear search private
01:19 - static and linear search so we have two
01:21 - parameters an integer array and an
01:24 - integer i'm going to rename i as value
01:27 - so it's more descriptive
01:29 - okay with a linear search all we need to
01:31 - do is loop through our array one element
01:34 - at a time so we can do that with the for
01:36 - loop
01:39 - so let's set into i our index equal to
01:43 - zero we will continue this as long as i
01:46 - is less than
01:47 - our arrays
01:48 - length then increment i by one what
01:51 - we're checking with an if statement is
01:54 - to see if our array at index of i
01:58 - is equal to the value that we're
02:00 - searching for this parameter
02:02 - if it is then let's return whatever our
02:04 - index is i
02:06 - if we do not find it after iterating
02:08 - through our entire array let's return
02:11 - negative 1 as a sentinel value and
02:14 - that's all there is to it to our linear
02:16 - search function so back within our main
02:18 - function let's check to see if the value
02:21 - returned does not equal negative one
02:24 - that means that we found our value so
02:26 - with an if else statement
02:29 - let's check to see if index does not
02:32 - equal negative one that means that we
02:35 - have found our element so let's print
02:38 - element found at
02:40 - index
02:41 - plus index
02:44 - else let's print element not found
02:47 - system.out.printline
02:49 - element not found
02:51 - so if we're searching for the number one
02:54 - we would find that at index one
02:57 - zero one if we search for five
03:01 - that is found at index eight zero one
03:04 - two three four five six seven eight if
03:07 - there's some number that's not in here
03:08 - like 10
03:09 - then this will print element not found
03:12 - so yeah that's the idea behind a linear
03:14 - search we iterate through some
03:16 - collection one element at a time it's
03:19 - slow for large data sets but it's fast
03:21 - for small to medium data sets this would
03:23 - be a small data set and they do not need
03:26 - to be sorted that's a huge advantage so
03:29 - yeah everybody that is a linear search
03:31 - if you would like a copy of this code
03:33 - i'll post this to the comment section
03:34 - down below and well yeah that is a basic
03:37 - linear search in computer science i
03:40 - guess