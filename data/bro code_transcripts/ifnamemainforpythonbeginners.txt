00:00 - hey everybody so today I got to talk
00:02 - about this if statement if Dunder name
00:05 - is equal to a string of Dunder main when
00:08 - you see this if statement it's usually
00:10 - followed by a call to a function named
00:12 - main or something similar a majority of
00:15 - the driving code behind a program is
00:17 - usually found within some sort of main
00:19 - method when you see this if statement
00:22 - basically speaking it means that this
00:24 - script can be imported or it can run
00:26 - Standalone functions and classes in this
00:29 - module can be reused in other programs
00:31 - without the main block of code running
00:34 - sometimes you would like the
00:34 - functionality of a program without
00:36 - executing the main body of code a good
00:39 - example could be a library in a python
00:41 - Library we would like to import some of
00:43 - the useful functions such as the math
00:45 - module but if we were to run that
00:47 - Library directly instead of importing it
00:50 - we could instead display a help page but
00:53 - if we're importing that Library we don't
00:55 - necessarily want to display that help
00:57 - page only if we're running it directly
00:59 - in many python scripts you'll see the
01:01 - statement of if Dunder name is equal to
01:03 - main if we're not running this program
01:05 - directly don't do it in this example
01:08 - we're going to delete our main python
01:09 - script be sure to recreate it at the end
01:12 - of this topic in case I forget to
01:13 - mention that we will create two new
01:16 - scripts go to file new python
01:20 - file script
01:23 - one file new python file script 2
01:30 - we have to add new run configurations
01:32 - for script one and script 2 so if you go
01:35 - to the top go to run edit
01:38 - configurations we will add a new run
01:41 - configuration select python select a new
01:44 - script path to script one okay apply
01:49 - again we have to do this with script 2
01:51 - add
01:54 - python select a script path of script 2
01:58 - okay apply then okay using this drop
02:02 - down menu we can select which run
02:04 - configuration we would like would we
02:06 - like to run our main python file but we
02:09 - have deleted it do we want to run script
02:11 - one or script two for the time being
02:14 - we'll select script one within script
02:18 - one if I was to
02:19 - print then call the dur function dur
02:23 - meaning directory python has all of
02:26 - these built-in attributes if you're not
02:28 - familiar with object oriented
02:29 - programming for now think of an
02:31 - attribute as a variable Dunder name is a
02:35 - special type of variable Dunder meaning
02:37 - double uncore if I was to print what's
02:40 - contained within Dunder
02:42 - name we would receive a string of Dunder
02:46 - main that's why in a script you may see
02:48 - the statement if Dunder name is equal to
02:53 - a string of Dunder
02:56 - main if so then you usually call a
02:59 - function named main to start your
03:01 - program I'm going to undo that so let's
03:04 - import script
03:07 - 2 from script 2
03:11 - import everything asterisk means
03:14 - everything within script 2 I will print
03:18 - Dunder name and we'll see what's within
03:22 - it again I'm running script
03:26 - one within script two Dunder name is
03:29 - equal to a string of script 2 the name
03:32 - of the Python
03:33 - script however within script one Dunder
03:36 - name is equal to a string of Dunder main
03:40 - this means I am running script one
03:42 - directly let's delete this
03:44 - import then go to script two import
03:47 - script one from script One Import
03:52 - asterisk meaning all we're now going to
03:55 - change our run configuration from script
03:57 - 1 to script 2 we are running script 2
04:00 - directly now Dunder name within script
04:03 - one is the name of the Python script
04:05 - script
04:07 - one Dunder name within script 2 is now
04:10 - Dunder
04:12 - main so by adding this if statement of
04:15 - Dunder
04:16 - name is equal to Dunder
04:20 - main we can check to see which file is
04:23 - being run
04:24 - directly if Dunder name equals Dunder
04:27 - main we will call a function of main to
04:30 - contain the main body of our program but
04:33 - we need to Define this function define
04:37 - main our main function will contain the
04:40 - majority of our python code anything
04:42 - that's not already within a
04:44 - function so let's
04:47 - print this is script
04:51 - one then we'll Define another
04:54 - function of favorite food we will have
04:59 - one print
05:00 - of
05:00 - food let's print the following message
05:04 - I'll use an F
05:05 - string your favorite food is add a
05:10 - placeholder add our parameter of
05:13 - food within our main function let's call
05:16 - the favorite food function pass in your
05:18 - favorite food as a string I'll type in
05:22 - pizza then let's print the word
05:26 - goodbye we're going to run script one
05:30 - run it here's the
05:33 - result from the top down all of our code
05:36 - is within functions we skip over it
05:38 - because we're not calling it quite yet
05:40 - the first thing we do in this program is
05:42 - check this if statement if Dunder name
05:45 - is equal to Dunder main are we running
05:47 - this program directly which we are we're
05:50 - running script one if so call the main
05:52 - method to start the program we print
05:55 - this is script one your favorite food is
05:57 - pizza goodbye now I'm going to go to
06:00 - script 2 delete our print
06:03 - statement change the Run configuration
06:06 - to script 2 and run it nothing should
06:09 - happen that's good now if we were
06:11 - missing this if statement of if Dunder
06:14 - name is equal to main then we delete our
06:17 - main
06:17 - function here's what would happen we're
06:20 - importing script one but we're running
06:23 - script
06:24 - 2 this is script one your favorite food
06:26 - is pizza goodbye I don't want this code
06:29 - to execute we're not running it directly
06:32 - that's why we have that if
06:34 - statement if under name is equal to main
06:37 - I only want to run this code if we're
06:39 - running it
06:41 - directly so what we'll do within script
06:43 - 2 now is Define a
06:45 - function of
06:48 - favorite drink there's one parameter of
06:53 - drink I will print use an FST
06:56 - string your favorite drink is I'll add a
07:01 - placeholder we'll add our parameter of
07:03 - drink let's print the
07:06 - message this is script
07:10 - 2 we will call from script one the
07:14 - favorite food function pass in your
07:17 - favorite
07:18 - food this time I'll say
07:20 - Sushi let's call our favorite drink
07:24 - function favorite drink I'll pass in
07:28 - coffee
07:30 - then we will print
07:33 - goodbye okay we are running script
07:36 - two this is script 2 your favorite food
07:39 - is Sushi your favorite drink is coffee
07:42 - goodbye we're running script 2 but we're
07:45 - importing the functionality of the
07:47 - favorite food function from script one
07:50 - sometimes from another python script you
07:52 - want to borrow something but you don't
07:54 - want to run the main body of code
07:55 - directly I just want to borrow this
07:57 - function from script one and that's it
08:01 - script 2 can be run as a standalone
08:03 - program but I can't import it without
08:05 - this body of code running I can add that
08:07 - if statement if Dunder
08:10 - name is equal to a string of Dunder
08:14 - main if we're running this program
08:16 - directly execute this code so let's call
08:19 - a function of
08:22 - main Define
08:24 - main then Place main body of code within
08:27 - it
08:30 - if I run script 2 we have the same
08:32 - message so by adding this if statement
08:35 - of if name is equal to main this script
08:38 - can be run as a standalone program or it
08:40 - can be imported a more practical example
08:43 - of this could be a python Library you
08:45 - can import the library for functionality
08:48 - but if you run the library directly you
08:50 - could instead display a help page it is
08:53 - good practice to include if Dunder name
08:55 - equals Dunder main it makes your code
08:58 - more modular helps with readability
09:01 - leaves no Global variables and avoid
09:03 - unintended execution and well everybody
09:06 - that is the purpose of if Dunder name
09:09 - equals Dunder Main in Python