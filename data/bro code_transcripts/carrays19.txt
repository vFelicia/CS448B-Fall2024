00:00 - hey how's it going everybody it's bro
00:02 - here hope you're doing well and in this
00:03 - video I'm going to teach you guys about
00:05 - arrays in C++ and at the end of this
00:08 - video we're going to work on a project
00:10 - where we can assign some names of cars
00:13 - and then place them all within an array
00:15 - and then we're going to take this array
00:17 - display all the values into some sort of
00:19 - virtual garage kind of like this pretty
00:22 - cool right let's get into it
00:24 - [Music]
00:25 - before you reach the end of this video
00:27 - make sure to LIKE comment and subscribe
00:30 - so that we together can challenge and
00:33 - defeat the mighty YouTube algorithm
00:36 - all an array is is that it's a variable
00:39 - that can store multiple values so for
00:42 - example I have a string variable named
00:45 - car and it's storing a single string
00:47 - with the word Corvette now we can
00:50 - actually turn this into an array by
00:51 - following a few simple steps so let's
00:54 - say that we want to add multiple car
00:57 - names to this variable well we'll want
00:59 - to turn this into an array then so the
01:01 - first step is that next to the variable
01:03 - name add a set of straight brackets and
01:06 - then all values that we want to assign
01:08 - to this array we're going to surround
01:10 - with a set of curly braces all right so
01:14 - this is our first value if we want to
01:17 - add a second value we're going to
01:18 - separate each value with a comma and
01:21 - then we can add maybe another car name
01:23 - so think of this maybe like a parking
01:25 - lot or a garage we're adding multiple
01:27 - cars to this array and they're each
01:29 - going to take up one spot so for the
01:32 - second car name I think I will assign a
01:34 - Tesla and the third how about a Ferrari
01:39 - all right and then with the name of the
01:42 - array you should pick a name that
01:44 - reflects the values that is storing so
01:47 - before we had a single variable named
01:50 - car so I think I'll turn this into cars
01:53 - because it's plural now so there we go
01:56 - we have just made an array now there's
01:59 - one limitation with arrays all the
02:01 - values that are assigned to this array
02:03 - have to be of the same data type so for
02:06 - example I couldn't mix an array with
02:09 - different data types like for example
02:10 - let's get rid of this Ferrari and just
02:13 - the number 2021 like a year well this
02:16 - would actually not work because we're
02:18 - mixing different data types this is an
02:20 - integer and these are strings so we have
02:23 - to be sure that we're only adding a
02:25 - values of the same data type although we
02:28 - could add the string representation of
02:31 - the number 20 21 this would technically
02:34 - work maybe we could change this to years
02:37 - and we'll make this an array of integer
02:41 - values so let's start adding some
02:43 - numbers so like maybe 20 20 20 21 and 20
02:47 - 22
02:48 - so this would work the same as well with
02:51 - the Rays you have to make sure that all
02:53 - values are of the same data type now
02:56 - let's head back to our previous example
02:58 - of our array named cars now pay
03:00 - attention to what happens if I attempt
03:02 - to display this array named cars all
03:06 - right so take a look at this
03:10 - we get this address and you probably
03:13 - learned about this on the lesson on
03:15 - pointers this is where this array is
03:18 - storing these values at this address so
03:22 - if you want to display one of these
03:24 - values that's located in this array you
03:27 - actually have to label the element so
03:30 - what you want to do is that when you
03:32 - want to display it one of these values
03:33 - type in the name of the array then that
03:36 - set of straight brackets and then you're
03:39 - going to put the element number of the
03:42 - value that you want to retrieve and if
03:44 - you want to retrieve let's say this
03:45 - first value you're actually going to
03:47 - type 0 it's a computer science thing
03:50 - arrays always start at 0 and the next
03:52 - position would be 1 and then 2 and then
03:55 - you continue in that pattern so if we
03:58 - want to display this word Corvette or
04:00 - retrieve whatever is at this element
04:03 - element number 0 we're going to type in
04:05 - the name of the array followed by a set
04:07 - of straight brackets and then the
04:10 - element number which in this case is 0
04:12 - so let's see what happens now and
04:16 - it displays our first value which is
04:19 - Corvette so now let's say we want to
04:22 - display this second value we're going to
04:24 - enter in element number one within the
04:28 - set of straight brackets let's run this
04:30 - just to test it
04:32 - yep that's right we have a Tesla in spot
04:35 - number 2 also known as element number 1
04:38 - and then let's do the same thing with
04:40 - our last element here so that is index
04:45 - number 2 or element number 2 and that
04:47 - has a Ferrari now what happens if we
04:50 - attempt to retrieve an element that
04:52 - doesn't exist within our array so let's
04:54 - say 3 so we don't have an element 3 we
04:58 - have element 0 1 & 2
05:04 - and
05:06 - this results in a problem so an
05:09 - exception was thrown it'll say something
05:11 - such as index out of balance and if we
05:14 - added another element to this array we
05:16 - actually wouldn't have that problem then
05:18 - so I think I'll have a naughty this time
05:20 - and then let's display this
05:26 - yep oh and another thing with these
05:29 - arrays you can always update these
05:31 - values so let's say that we want to
05:33 - change that last element element number
05:35 - 3 we're going to say cars straight
05:39 - brackets 3 equals and then we can pick a
05:42 - new value so maybe I'll place a I don't
05:46 - know I like Mustangs let's put a Mustang
05:49 - in there and then let's display this
05:51 - again so cars 3 equals Mustang yep it's
05:56 - right there let's say that you want to
05:57 - display all the values in this array let
06:00 - me show you what you don't want to do so
06:03 - what you don't want to do is simply just
06:06 - to see out all of these manually by hand
06:09 - so for example I'll just copy and paste
06:12 - this see out a few times so if we want
06:15 - to display the first element that is
06:17 - element number 0 the second one is 1 2
06:21 - and then 3 all right so this would
06:24 - actually display all of them but it's
06:27 - probably not the best programming
06:28 - practice to actually display all these
06:30 - let me show you a better method to
06:33 - display all the elements of an array
06:34 - using a for loop then so let's start
06:37 - over fresh but we'll keep our array cars
06:40 - so the first thing that we're going to
06:42 - do is create a four loop so we're going
06:44 - to type four then up set of parentheses
06:47 - and then let's add a set of curly braces
06:49 - now there's three different statements
06:51 - that we're going to fill out within the
06:53 - parentheses of the for loop we'll need
06:55 - some sort of index so we'll say int I
06:58 - and set this equal to zero then a
07:01 - semicolon to move on to the next
07:03 - statement the second statement in our
07:05 - for loop is for our condition how many
07:08 - times do we want this for loop to repeat
07:10 - and cycle well we want this for loop to
07:12 - repeat for as many elements there are in
07:15 - our array of cars so one way to write
07:18 - this is that our conditions going to be
07:20 - I is less than size then a set of
07:25 - parentheses and within the parentheses
07:27 - we're going to type in our array name of
07:29 - cars and then we're going to add a
07:32 - semicolon to move on to the next
07:33 - statement so this is dynamic so if we
07:37 - were to increase the amount of elements
07:40 - that are within our array we wouldn't
07:42 - need to manually adjust how many times
07:45 - this for loop is going to repeat when we
07:48 - compile this program this number might
07:50 - update depending on whatever the current
07:53 - amount of elements is within our array
07:55 - so we could freely add or remove
07:57 - elements without worrying about our for
08:00 - loop working or not this is going to
08:02 - adjust so for the third statement we're
08:05 - just going to increment our counter so
08:08 - we can just type in I plus plus so now
08:11 - this for loop is going to repeat for as
08:14 - many elements there are in our array so
08:17 - let's say that we want to display each
08:19 - of these elements now so before what we
08:22 - did is that we just typed in C out and
08:24 - then the name of our array straight
08:27 - brackets and then we put a number in
08:30 - here so if we wanted the first element
08:33 - that was element number zero this would
08:35 - display the first element then the
08:38 - second one would be one two three so we
08:41 - would continue on like that so what
08:43 - we're going to do within this for loop
08:44 - is actually put our index of I so I is
08:48 - currently set to zero so when we reach
08:51 - this part of the for loop it's going to
08:53 - read cars at index I as in zero and the
08:58 - second time that we cycle through this
08:59 - for loop I is going to increment with
09:02 - this statement and I is now one and it's
09:05 - going to continue after each cycle so
09:08 - I'm just going to add an end line and
09:10 - let's try this out now
09:15 - all right here is our array of cars then
09:19 - that we made let's try another example
09:22 - of this just so that we really have the
09:24 - fundamentals down of arrays so I'm going
09:27 - to create another array of a different
09:29 - datatype so for cars I'm just going to
09:32 - comment this out for now and let's
09:34 - create a new array maybe years so let's
09:38 - make this of the integer datatype we're
09:40 - going to come up with a unique name for
09:42 - this array that reflects the values that
09:44 - it stores so years then a set of
09:47 - straight brackets equals and then we're
09:50 - going to add a bunch of values between
09:52 - this set of curly braces and I'm just
09:54 - going to make up some years so maybe
09:56 - twenty twenty one twenty twenty two two
10:00 - thousand nineteen ninety nine
10:03 - eighteen forty two alright and then for
10:06 - our for loop we're just going to change
10:08 - the word cars to years so here and
10:12 - here and
10:15 - let's try this
10:20 - yeah that looks about right we have five
10:23 - elements within this array this array
10:25 - called years and they're all displayed
10:27 - here well that's the very basics of
10:30 - arrays I'll post this code in the
10:32 - comments down below if you would like to
10:34 - take it a step further I'm going to show
10:36 - you some more advanced stuff involving
10:37 - arrays what we're going to do is
10:39 - dynamically allocate an array after the
10:42 - compilation phase by using a pointer
10:45 - don't worry I'll walk you through it so
10:47 - we will be able to ask the user for the
10:49 - size of an array and then have the user
10:51 - assigned values to it so we're actually
10:54 - going to make a project will ask the
10:56 - user how many cars they have and we're
10:59 - going to park each of their cars into an
11:01 - array think of it like a garage and each
11:04 - element has a parking spot number so if
11:07 - you want to continue let's take it to
11:08 - level two
11:14 - all right well if you're ready for some
11:16 - more advanced stuff we're going to
11:18 - create a program that's going to ask the
11:20 - user how many cars they have they're
11:22 - going to enter in some names of these
11:24 - cars and we're going to put them all
11:26 - within an array that's going to function
11:29 - like a garage and at the end we're
11:31 - actually going to display all the cars
11:33 - that are within our garage all the
11:35 - elements in our array the first thing
11:38 - that we're going to do is to create an
11:39 - integer variable and let's call this
11:41 - number we're not going to assign this
11:43 - value quite yet we're only going to
11:45 - declare it because we're going to have
11:47 - the user type in a number for the number
11:50 - of cars that they have so we're going to
11:52 - see out
11:53 - how many cars do you have and
12:00 - then let's see in their response and
12:04 - we'll store that within our variable
12:06 - number this number is going to reflect
12:08 - how many cars they have and this is
12:10 - going to function as the size of our
12:12 - array now this is the tricky part we're
12:15 - going to create a pointer for our array
12:18 - because we don't know how much space we
12:21 - need to allocate before the program
12:23 - actually compiles so these are the steps
12:26 - we're going to create a variable of
12:29 - strings so we're going to type string
12:31 - then we need to use the dereference
12:33 - operator and we're going to create a
12:36 - pointer so a common naming convention is
12:38 - to type in P lowercase and the name of
12:42 - the variable or the array and the first
12:44 - letter is uppercase so if this array is
12:47 - going to be named cars we can just type
12:50 - in cars here with a capital C equals new
12:54 - then the data type that we're working
12:57 - with so it's an array of strings so
12:59 - we're going to type in string a set of
13:02 - straight brackets okay so then within
13:05 - the straight brackets this is the amount
13:08 - of space that we want to give this array
13:10 - we don't know how much space we're going
13:12 - to allocate it's going to depend on this
13:15 - number so if you were to type in 10 this
13:18 - would allocate 10 spaces 5 would give 5
13:22 - we're going to put in our variable
13:24 - number within here and then add a
13:26 - semicolon at the end so this is our
13:29 - pointer P cars for our array all right P
13:34 - cars is a pointer that's storing the
13:36 - address of our array and when we assign
13:39 - values to this we're sending values to
13:42 - whatever address is stored within our
13:44 - pointer now we're going to create a for
13:47 - loop that's going to repeatedly ask the
13:49 - user for each name of each car they have
13:52 - for as many times as the number that
13:55 - they typed in so let's create a for loop
13:57 - so for a set of parentheses and then a
14:00 - set of curly braces there's three
14:02 - statements to fill out within the for
14:04 - loop we'll need some sort of counter or
14:06 - index we can declare that within here
14:08 - int I and let's set this equal to zero
14:11 - semicolon the next statement is our
14:14 - condition we could easily just say we'll
14:16 - continue this for loop as long as I is
14:20 - less than whatever the number the user
14:23 - types in semicolon and then we're going
14:26 - to increment our counter by 1 within the
14:29 - for loop we're going to create a prompt
14:31 - for the user to enter in the name of
14:33 - each card that they have so let's see
14:36 - out some sort of message enter car
14:39 - number
14:41 - and then we will put the value or the
14:45 - index of I here now one problem though
14:49 - right now during our first iteration of
14:52 - the for loop I is going to be 0 and if
14:55 - some user doesn't know any programming
14:57 - and they probably won't they'll be
14:59 - confused when it says enter cart number
15:02 - 0 like what does that mean so what we
15:05 - can do to actually offset the display
15:07 - for our index is just say I plus 1 all
15:11 - right so this won't actually affect the
15:15 - value of 1 it's going to affect how it's
15:18 - displayed though to the user so I is
15:21 - still going to be 0 but when it's
15:23 - displayed it's going to be displayed as
15:25 - 1 so if somebody's using this program
15:27 - and it says enter card number 1 that
15:30 - actually makes sense before we had enter
15:33 - card number 0 where that probably
15:35 - wouldn't we understand what it means but
15:37 - the user might not so we're going to say
15:39 - enter car number I plus one and then
15:43 - let's add a semicolon and then we're
15:45 - going to see in actually let's get line
15:47 - because some car names might have some
15:50 - spaces between them so get line C in and
15:53 - comma and then what we're going to type
15:55 - in here is the pointer that we made so P
15:59 - cars at a specific index so then we need
16:04 - a set of straight brackets and then
16:06 - we're going to put our index or counter
16:09 - I within here and then just add a
16:11 - semicolon at the end now with this for
16:14 - loop it's going to have the user enter
16:16 - in a value for each car that they have
16:18 - and it's going to assign this value at
16:21 - wherever this array is located at
16:24 - wherever the pointer is pointing to
16:26 - which is where our array is located now
16:29 - let's create some sort of graphical
16:31 - display to actually display all this
16:33 - information so maybe we'll just make a C
16:36 - out message such as
16:38 - here is your garage and then maybe I'll
16:42 - create a new line after this maybe
16:44 - before this is well just to make it look
16:47 - nice um maybe let's add like some sort
16:51 - of line here too
16:54 - then I'll create a new line
16:57 - okay I think that's fine and for this
17:00 - last step all we need to do is to create
17:02 - another for loop that will display all
17:04 - the elements of this array this time and
17:06 - honestly we can just copy what we have
17:08 - here and simply paste it and make a few
17:11 - changes all we need to do is to change
17:13 - the contents of this for loop we can
17:16 - leave all of this the same then so let's
17:18 - create some sort of display for each
17:20 - line so maybe see out maybe let's type
17:25 - in parking spot number you don't have to
17:29 - do this exactly as I do you can create
17:32 - your own sort of display parking spot
17:34 - number
17:35 - maybe I or you could do I plus one I
17:40 - think I'll do I plus one you could have
17:41 - a parking spot number zero if it's like
17:43 - a VIP parking spot or something do what
17:46 - you want to do so parking spot number
17:49 - one and then I think I'll add a space
17:53 - and then I will display the element of
17:56 - each array so if you want to do that
17:58 - we're just going to type in P cars
18:02 - straight brackets and then our index
18:05 - then semicolon Oh before we actually do
18:09 - run this there is a few housekeeping
18:11 - things I'm going to add real quick I
18:13 - forgot to and the line after this and
18:16 - I'm also going to add a space after the
18:20 - number to make it look better I'm kind
18:22 - of doing this on the fly so the syntax
18:24 - isn't going to be perfect all right we
18:27 - should be good then so there's one thing
18:29 - you're going to notice when we run this
18:31 - and it's going to be fairly evident at
18:33 - first
18:35 - alright so how many cars do you have
18:37 - let's say four and then hit enter all
18:40 - right so you'll notice that it says
18:41 - enter card number one and then
18:43 - immediately it goes to enter card number
18:46 - two and this is the reason why it
18:48 - actually skipped the first prompt for
18:51 - car number one and that's because when
18:53 - we typed in four and hit enter well see
18:57 - and picked up the four but when we hit
18:59 - enter that's still within the buffer and
19:01 - we need to get rid of that because then
19:02 - when we used the get line function here
19:06 - it actually took the newline character
19:09 - and entered it into the first line of
19:11 - our array so what we can do is actually
19:14 - clear the buffer and what we'll do is
19:16 - after we type in CN number we're just
19:19 - going to type in C in ignore and then
19:22 - just add a semicolon so then that should
19:24 - clear the buffer then so that's just one
19:27 - thing you might run into and I wanted to
19:28 - point that out okay now we should be
19:30 - good to go
19:33 - all right how many cards do you have I
19:36 - have four cars enter card number one
19:39 - let's say I have a Lamborghini Lam or I
19:45 - don't know how to spell Lamborghini I'll
19:47 - just type in Lambo car number two maybe
19:50 - a Tesla number three maybe and Oddie and
19:54 - number four perhaps a jeep all right
19:58 - here is your garage and here are the
20:01 - four cars that we have they're all
20:03 - within our garage and that is basically
20:05 - how you can create a program to
20:08 - dynamically ask for the size of an array
20:11 - and assign values to it to display if
20:14 - you would like a copy of this program
20:16 - I'll post all of this code in the
20:18 - comments down below and if you're
20:20 - looking for additional practice then why
20:22 - don't you create a program that involves
20:24 - an array and post them in the comments
20:26 - down below if you'd like to share it but
20:28 - yeah that's everything you need to know
20:29 - to get started with arrays in C++
20:32 - hey you yeah I'm talking to you if you
20:36 - learn something new then you can help me
20:38 - help you in three easy steps by smashing
20:42 - that like button drop a comment down
20:44 - below and subscribe if you'd like to
20:46 - become a fellow bro
20:48 - [Music]
21:02 - you
21:03 - [Music]