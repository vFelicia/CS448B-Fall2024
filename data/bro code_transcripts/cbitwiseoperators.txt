00:02 - hey everybody let's talk about bitwise
00:04 - operators these are special operators
00:07 - used in bit level programming
00:09 - knowing binary is important for this
00:11 - topic so if you don't know how binary
00:13 - works i would recommend skipping to the
00:15 - next topic but if you're comfortable
00:17 - with binary well this video is for you
00:19 - so let's begin i'm going to discuss five
00:22 - different bitwise operators and or
00:25 - exclusive or left shift and right shift
00:28 - let's create three variables x y and z
00:31 - x will equal six
00:34 - y will equal twelve
00:36 - and z will store our result and we will
00:39 - set that to be zero
00:41 - so i'm going to give you the binary
00:42 - representation of each of these numbers
00:45 - so six is
00:48 - this number so we have eight bits that's
00:51 - a byte and this is the binary
00:53 - representation of the number six
00:57 - 12 would be this binary number
01:00 - and zero zero is easy
01:03 - that would be all zeros so let's use the
01:06 - and bitwise operator so what we're going
01:08 - to do is set z equal to x and y
01:14 - so imagine this imagine that we're
01:15 - aligning all of these bits in columns
01:19 - using the and bitwise operator we're
01:21 - going to look at our operands x and y if
01:24 - both of these are a one we will assign
01:26 - one to our result
01:28 - and let's begin with the first column on
01:30 - the right both of these are zeros so our
01:32 - result will stay at zero and with the
01:34 - next column we have one and a zero and
01:37 - using the and bitwise operator both of
01:39 - these need to be won in order to assign
01:42 - one to our result so we will skip this
01:44 - column now with our third column these
01:46 - are both one so we will assign one to
01:49 - our result the next column is zero and
01:52 - one we skip it and the rest are just
01:54 - zero so this binary number is the binary
01:58 - representation of the number four
02:01 - so let's test that z equals x and y and
02:04 - let's print z
02:08 - and equals we're displaying an integer
02:11 - i'll add a new line
02:13 - and we are displaying z
02:15 - and let's see if this is four
02:18 - yep our result z is equal to four now
02:21 - let's move on to or so let's set this
02:23 - back to zero
02:25 - and we will set z
02:27 - equal to x
02:29 - or y or is represented by a single
02:32 - vertical bar
02:35 - and we will print
02:37 - or let's try and guess what z is going
02:39 - to be before we actually display it
02:41 - with the or bitwise operator only one of
02:44 - these bits needs to be one in order for
02:46 - us to assign one to the result so since
02:49 - these are both zero this will stay at
02:51 - zero
02:52 - this bit is one this one's zero so this
02:55 - would be one
02:56 - and for the next column of bits these
02:58 - are both one so that counts as well
03:00 - and we have a one in here so that is one
03:02 - and the rest are just zero so this is
03:05 - the binary representation of the number
03:08 - fourteen and let's see if z is equal to
03:10 - fourteen
03:12 - yep we got that right
03:14 - so let's set this back to zero
03:17 - now with exclusive or that is
03:19 - represented by a carrot with exclusive
03:22 - ore only one of these bits can be won if
03:25 - neither or both of these bits are one we
03:28 - don't assign anything so both of these
03:30 - bits are zero they will stay a zero
03:33 - we have one of these bits as one and not
03:35 - the other so that counts as one now with
03:37 - this next column both of these are one
03:39 - and using exclusive or
03:41 - only one of these can be one so since
03:44 - these are both ones we do not assign
03:46 - anything so we keep that as zero and
03:48 - with the next column only one of these
03:50 - is one so we will set this to be one
03:52 - within the result and this is the binary
03:55 - representation of ten and let's test
03:58 - that z
04:01 - equals x
04:03 - exclusive or y
04:06 - and we will print exclusive or equals z
04:10 - and let's see if that's ten
04:13 - yep z is equal to 10.
04:16 - now here's left shift we will shift
04:18 - these bits so many spaces to the left
04:20 - using left shift so we will set z
04:24 - equal to x
04:26 - and then left shift which is represented
04:29 - by two left angle brackets a number of
04:31 - spaces let's begin with one
04:33 - so we have x equal to six
04:36 - what we're doing is shifting these bits
04:38 - one spot to the left
04:41 - and then adding 0 at the end
04:43 - and this is the binary representation of
04:46 - the number 12. actually it's the same as
04:48 - y currently these binary numbers are the
04:50 - same
04:51 - and let's print that
04:55 - so shift left
04:58 - and z should equal 12
05:01 - yep
05:02 - and if i shift left twice
05:04 - well then we are just moving these bits
05:06 - one more space
05:08 - and now this is 24.
05:13 - there you go so you probably noticed
05:15 - that there's a pattern every time we
05:17 - shift a binary number to the left it
05:19 - effectively doubles
05:21 - now let's right shift
05:23 - so let's copy this
05:26 - paste it
05:27 - and we will use two right angle brackets
05:31 - and this is shift right
05:34 - and let's set this to six
05:37 - if we're right shifting we shift these
05:39 - bits one spot to the right and this is
05:41 - the binary representation of the number
05:44 - three and if i print this
05:47 - after shifting right once our result z
05:51 - is three
05:52 - every time we shift right we're
05:54 - effectively cutting our number in half
05:56 - now if i shift right again
05:58 - we will shift these bits one more spot
06:00 - to the right and we are going to
06:02 - truncate this one at the end and this
06:04 - will give us one that is the binary
06:07 - representation of the number one
06:09 - so technically half of three is 1.5 but
06:12 - we can't store that 0.5 portion so it
06:15 - just gets truncated all right everybody
06:18 - those are just a few bitwise operators
06:20 - they are special operators used in bit
06:24 - level programming there's five that we
06:26 - discussed today but there is another
06:28 - known as the complement operator but
06:30 - that's a little bit more complex and i
06:32 - might save that for another video so
06:35 - yeah those are bitwise operators if you
06:38 - would like a copy of this code i'll post
06:39 - this to the comment section down below
06:41 - and well yeah those are some bitwise
06:43 - operators in c