00:00 - oh yeah all right
00:03 - bubble sort bubble sort is a sorting
00:05 - algorithm that compares adjacent
00:07 - elements and checks to see if they're in
00:09 - order
00:09 - if not these elements are switched then
00:11 - the next pair of adjacent elements is
00:13 - compared
00:14 - and we continue on in that pattern until
00:16 - all elements are in order
00:17 - while using bubble sword i like to
00:19 - imagine that our collection is filled
00:21 - with water
00:22 - heavy things like rocks sediment will
00:25 - sink to the bottom
00:26 - anything light such as air wood bubbles
00:29 - anything light will flow to the top
00:31 - here's an array of nine
00:33 - unordered elements we will use bubble
00:35 - sort to manually sort these elements in
00:37 - ascending numeric order
00:38 - alright so i reset this array we're
00:41 - going to perform
00:42 - a total of nine laps but don't worry
00:44 - i'll fast forward through this footage
00:46 - so let's just walk through the first few
00:48 - steps we will compare
00:50 - these first two adjacent elements we'll
00:52 - check to see if the first element
00:54 - is greater than the second element if it
00:56 - is we will move
00:58 - this element to a variable which will
01:00 - probably be named
01:01 - temp short for temporary check the video
01:04 - in the java playlist on how to swap
01:06 - variables i think it's a pretty good
01:07 - video
01:08 - but i might be biased with my opinion
01:10 - we'll take the next element and place it
01:12 - where the first element was
01:13 - then move this variable within temp into
01:16 - the spot
01:17 - that one was in the previous element
01:20 - okay
01:20 - so then we will check these next two
01:22 - adjacent elements this first element is
01:24 - greater than the second element
01:26 - so we will move our first element into
01:28 - temp
01:29 - move the second element to where element
01:32 - one was
01:34 - and then move temp to where element two
01:37 - is
01:38 - and then we would just repeat this
01:39 - process so we will lap
01:41 - through this array once for each element
01:43 - that is available
01:45 - so let's just speed up the footage here
01:47 - and i will show you manually a bubble
01:52 - sort
01:59 - [Music]
02:48 - so
02:50 - [Music]
02:52 - as you may have noticed the bubble sort
02:54 - algorithm really isn't that efficient
02:56 - even when working with
02:57 - smaller data sets in most real world
02:59 - applications you'll probably use a
03:01 - different sorting algorithm
03:03 - but this is still a good thing to learn
03:05 - so the bubble sort algorithm has a
03:07 - runtime complexity
03:09 - of o of n squared it runs in quadratic
03:11 - time
03:12 - so the larger the data set the more and
03:14 - more inefficient that this sorting
03:16 - algorithm is going to be
03:17 - with a small data set it's not horrible
03:19 - but there's definitely better algorithms
03:21 - out there
03:22 - so for practice let's create our own
03:24 - bubble sort algorithm
03:26 - all right let's create an array of
03:28 - integers and
03:29 - assign some random numbers make sure
03:31 - that they're not in order because well
03:33 - then that would defeat the purpose of
03:34 - this program
03:35 - so at the end we'll just display all the
03:37 - elements of this array using an enhanced
03:39 - for loop
03:40 - for i in array we will
03:44 - display with a print statement not print
03:46 - line
03:47 - whatever i is during each iteration so
03:50 - let's just test this
03:52 - so i have all the elements in my array
03:54 - printed and they're currently not in
03:56 - order
03:56 - so we'll need to declare a bubble sort
03:59 - method bubble
04:01 - sort and then we will need to define
04:04 - this outside of our main method
04:06 - so public static
04:10 - void we're not returning anything bubble
04:14 - sort and then we will need to pass in an
04:17 - array
04:18 - so that will be the argument array
04:21 - and we will accept int
04:24 - array okay so this is actually really
04:28 - easy to write
04:29 - even though the bubble sort algorithm
04:31 - really isn't too efficient
04:33 - so i guess that's one benefit so we'll
04:35 - need nested for loops
04:38 - and then the outer for loop will be
04:41 - int i equals zero
04:44 - i is less than array
04:48 - dot length minus one
04:52 - i plus plus and let's do the same thing
04:56 - with the inner for loop but we can copy
04:58 - what we have
04:59 - change i to j
05:05 - and this is going to be array length
05:07 - minus i
05:09 - minus 1. so we're going to check to see
05:12 - if array
05:16 - at index of j is
05:19 - greater than that will be for ascending
05:22 - order
05:23 - is greater than array at index of j
05:27 - plus one so that would be the next
05:30 - adjacent element
05:31 - so if this number is greater than this
05:34 - one
05:34 - we should switch these two elements
05:36 - around and we'll need the
05:38 - assistance of a temporary variable so
05:40 - let's declare int
05:42 - temp equals array at
05:45 - index of j
05:48 - then we will take array at index of
05:52 - j set this equal to array at
05:55 - index of j plus one
05:58 - and then lastly we have array at
06:01 - index of j plus one
06:04 - equals whatever is stored within temp
06:07 - and honestly that's all there is to it
06:09 - so this should sort our array and it's
06:12 - in ascending order
06:13 - so if you need this in descending order
06:16 - we would just swap
06:17 - this greater than sign with a less than
06:19 - sign
06:20 - and now this is in descending order so
06:23 - even though the bubble sort algorithm
06:25 - really isn't too efficient it's actually
06:27 - extraordinarily easy to write if you
06:29 - just need something really simple so i
06:30 - guess that's one benefit
06:32 - all right everybody that is the bubble
06:34 - sort algorithm it compares
06:37 - pairs of adjacent elements and checks to
06:39 - see if they're in order
06:40 - if they're not they're swapped and this
06:42 - process will repeat
06:44 - once for each element in an array or
06:46 - other collection
06:47 - so this algorithm has a runtime
06:49 - complexity of o of n squared
06:52 - so it's ok ish for small data sets
06:55 - and please do not use this for any large
06:58 - data sets
06:59 - so if you would like a copy of this code
07:01 - i will post this to the comment section
07:03 - down below
07:04 - and well that's the bubble sort
07:05 - algorithm in computer science
07:09 - hey you yeah i'm talking to you if you
07:11 - learned something new
07:12 - then help me help you in three easy
07:14 - steps
07:15 - by smashing that like button drop a
07:17 - comment down below
07:18 - and subscribe if you'd like to become a
07:20 - fellow bro
07:29 - [Music]
07:43 - you