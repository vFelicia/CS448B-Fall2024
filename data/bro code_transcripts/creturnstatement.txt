00:02 - hey what's going on people so the return
00:04 - statement the return statement returns a
00:07 - value back to a calling function here's
00:10 - an example i have a function named
00:12 - square square is going to accept one
00:14 - argument a double it's going to square
00:17 - that double and return the result back
00:19 - to the calling function so here's an
00:21 - example let's say we have double x and
00:24 - i'm going to call the square function
00:26 - and then pass in some value
00:29 - let's say 3.14
00:31 - so when we call a function we can also
00:34 - return a value back to the spot in which
00:36 - we call the function so within our
00:38 - square function let's set double result
00:42 - equal to x times x effectively squaring
00:45 - it so to return a value back to the
00:48 - calling function we will use this return
00:50 - keyword followed by some value or
00:52 - variable i would like to return result
00:55 - however we need to list the data type of
00:58 - what we're returning within the function
01:00 - declaration right now it's void so if
01:03 - we're returning a double we will list
01:05 - double here if this was an integer we
01:08 - would return int
01:09 - if it was a character we would return
01:12 - char you kind of get the idea so result
01:14 - is a double so we need to change this
01:17 - from void to double and we will return
01:19 - this result back to the calling function
01:22 - so we're effectively stating that double
01:25 - x equals 3.14 squared and then let's
01:28 - print the result
01:30 - so printf
01:32 - the format specifier for a double is lf
01:35 - and we will print x
01:37 - and 3.14 squared is 9.859
01:41 - now you could shorten this too we could
01:43 - just say return x times x
01:46 - instead of declaring a local variable
01:49 - return x times x
01:52 - and that would work the same so yeah
01:54 - that's basically the return statement
01:56 - you can place it within a function and
01:58 - return a value or variable back to the
02:01 - calling function and the spot in which
02:03 - you invoked that function but if you're
02:05 - going to return a value or variable
02:08 - within the function declaration you need
02:10 - to change void to the data type of what
02:12 - you're returning so yeah that is the
02:15 - return statement and you may have
02:16 - noticed within our main function we're
02:18 - returning 0 0 is the exit status if this
02:22 - program runs successfully so instead of
02:24 - void with our main function declaration
02:27 - we have int because 0 is technically an
02:30 - integer so yeah that's the return
02:32 - statement if you would like a copy of
02:33 - this code i will post this to the
02:35 - comments section down below well yeah
02:37 - that's the return statement in c