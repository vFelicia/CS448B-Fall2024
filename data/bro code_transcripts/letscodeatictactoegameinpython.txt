00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to show you
00:04 - all how we can code a basic game of
00:06 - tic-tac-toe using python so
00:09 - sit back relax and enjoy the show
00:14 - if you find this video helpful please
00:15 - remember to like
00:17 - comment and subscribe your support will
00:19 - help keep this channel running
00:21 - all right ladies and gentlemen let's
00:23 - create a game of tic-tac-toe to begin
00:25 - we'll need to
00:26 - import tkinter as well as random and
00:29 - let's begin by
00:30 - defining all of the different functions
00:32 - that we'll need let's define a function
00:34 - named
00:34 - next turn for the time being we'll just
00:38 - write pass we'll fill this in later on
00:40 - we'll need a function named check winner
00:46 - a function named empty spaces
00:49 - to check if there are any empty spaces
00:52 - left
00:53 - and lastly a function named new game
00:56 - that will launch
00:56 - a new game for us okay we have our four
01:00 - functions
01:00 - now let's create a window let's create a
01:03 - window
01:04 - window equals tk and at the end of our
01:07 - program
01:08 - we need to use window dot main loop
01:12 - and when we run this we should have just
01:14 - a small basic window
01:16 - let's set the title window dot
01:19 - title let's set this to
01:23 - tick tack toe
01:27 - we'll need a list of players players
01:30 - equals
01:31 - x comma o
01:35 - and with the way that we're writing this
01:36 - program we can swap
01:38 - these symbols with a different character
01:40 - for example we could say
01:42 - dollar sign is playing against the at
01:45 - symbol too
01:46 - but i'll demonstrate that later let's
01:48 - keep it as x and o for now
01:51 - now we need to select a random player to
01:54 - begin
01:54 - player equals random
01:58 - dot choice and pass in our list of
02:02 - players
02:02 - now we'll need nine buttons i'm going to
02:04 - create a 2d
02:06 - list of buttons named buttons
02:09 - and this will be the first row this will
02:12 - be the second row
02:14 - for the time being i'm just going to
02:15 - initialize these with
02:17 - zero for everything and put these all
02:20 - within a list so we have a 2d list
02:24 - named buttons and to better visualize
02:27 - this i'm going to place each row on a
02:29 - new line
02:30 - so that's what our board is going to
02:31 - look like we have a 2d list
02:34 - named buttons we'll need a label to
02:36 - display whose turn it is
02:38 - label equals label
02:41 - i'll set the text equal to
02:45 - player plus the word
02:48 - turn and i'll set the font to
02:52 - font equals pick whatever font that you
02:55 - want
03:00 - and i am going to pack this label
03:03 - label dot pack and set the side
03:07 - equal to top and let's run this just to
03:10 - test it
03:12 - okay looks like it's x's turn let's try
03:14 - it again
03:16 - oh stern okay that's fine for now
03:19 - let's create a reset button
03:22 - reset underscore button
03:25 - equals button
03:29 - i'll set the text equal to
03:32 - restart it's going to be a restart
03:34 - button or reset button
03:37 - pick a font
03:44 - maybe i'll set the size to 20
03:47 - and we'll need a command command
03:50 - equals new game
03:54 - when we click on this button it's going
03:56 - to call this
03:57 - new game function for us and we need to
04:01 - pack this button reset
04:04 - button dot pack
04:07 - and i will set the side equal to top
04:10 - okay
04:10 - let's see if that appears alright so we
04:13 - have our
04:14 - turn order a label that will display
04:17 - whose turn it is as well as our reset
04:18 - button
04:20 - now we'll need to create all of the
04:21 - buttons to add to our 2d
04:23 - list named buttons but i'm going to
04:25 - place these all within a frame frame
04:28 - equals frame we're adding our frame to
04:31 - our window
04:33 - and i'm going to pack this frame frame
04:36 - dot pack now we'll take our 2d
04:40 - list of buttons and add a button to each
04:42 - spot and i think the best way to do this
04:44 - would be to use
04:45 - nested for loops we'll have an outer for
04:48 - loop in charge of the rows
04:50 - four row in range three
04:54 - remember we only have three rows and
04:56 - three columns
04:57 - the inner for loop will be in charge of
04:59 - the columns
05:00 - four column and range three
05:04 - and inside the inner for loop we're
05:06 - going to create a
05:07 - new button we'll say
05:10 - buttons at index row
05:13 - and column we have two indexes because
05:17 - we have a 2d list so buttons
05:20 - at row whatever column whatever
05:23 - depending on
05:24 - what iteration we are within our for
05:26 - loops
05:27 - we'll create a new button
05:30 - and we'll set the text oh first add this
05:33 - to the frame almost forgot about that
05:36 - we're adding our buttons to our frame
05:37 - and adding the frame to the window
05:40 - now we'll set the text equal to a blank
05:42 - set of quotes because we don't want any
05:44 - text
05:46 - we'll set the font i'll just copy what
05:49 - we have here
05:50 - for label
05:56 - for a width let's say five and a height
05:59 - let's say two i'm going to hit enter
06:02 - just to move down to the next line
06:03 - because we still have a few more things
06:05 - to fill in
06:06 - okay we'll need a command command
06:09 - equals and i'm going to set this equal
06:11 - to a lambda function so we need some
06:13 - arguments
06:14 - actually i think i'll pass in some
06:15 - keyword arguments row equals row
06:18 - and column equals column
06:21 - then our expression is next
06:25 - turn and we will pass in row and
06:28 - column now we also need to add our
06:30 - buttons to our frame
06:32 - buttons at index
06:35 - of row and column
06:39 - we'll use the grid function for this
06:42 - grid
06:43 - row equals row and
06:46 - column equals column
06:50 - and it's always a good idea to test your
06:52 - program after making any major changes
06:54 - so we should have our label our reset
06:57 - button
06:58 - and our grid of buttons now that the
07:01 - main body of our program is complete
07:03 - let's head to the next turn function
07:06 - and remember that we're passing in row
07:08 - and column as
07:09 - arguments so we need to set up those
07:11 - parameters within the next
07:13 - turn function bro and column
07:16 - and the first line within here we would
07:18 - like access
07:19 - to our player so let's say global
07:23 - player so that we have access to it and
07:26 - we're first going to check to see if
07:28 - the button that we click on is empty so
07:32 - buttons at index of row
07:35 - and index of column to access the text
07:38 - of a button
07:39 - just add a third index operator and type
07:42 - in
07:42 - text if the text of our button that we
07:46 - click
07:47 - is equal to a set of quotes that means
07:50 - it's empty
07:51 - and when we call check winner
07:55 - winner winner chicken dinner and it's
07:58 - false
07:58 - there is no winner then we will fill in
08:02 - that button with our player our player's
08:05 - character whatever it is
08:06 - x or o or whatever we decide
08:10 - so within here let's check to see if
08:14 - player is equal to players
08:17 - at index zero that is our first player
08:20 - and remember that we created
08:22 - a list of players and we're planning on
08:25 - swapping these later
08:26 - we could say like if player is equal to
08:29 - x
08:29 - but that would make our program less
08:31 - flexible if we want to pick like a
08:33 - different character instead of an x
08:35 - so if player is equal to player at index
08:38 - 0 whatever symbol is there
08:41 - then we are going to take buttons
08:44 - at index of row index of column
08:49 - take our text and set it equal to
08:53 - our player
08:57 - and we should check to see if there's a
08:58 - winner after filling in this button
09:01 - if check
09:04 - winner and we still need to fill in this
09:07 - function
09:08 - returns false
09:11 - then we will switch players player
09:14 - equals
09:15 - players at index of 1
09:19 - and label dot config
09:25 - text equals
09:29 - players at index 1
09:32 - plus the word turn
09:36 - so what we did here is that we're
09:38 - checking to see
09:39 - if after placing our text of our player
09:43 - on that button that we click if there is
09:46 - no winner
09:47 - then we're going to swap players player
09:49 - equals our next player
09:51 - and we're configuring our label so that
09:53 - it displays the next player's turn
09:56 - players at index 1 turn
09:59 - now what if there is a winner let's say
10:02 - else if
10:03 - check winner
10:06 - is true
10:10 - then we will take our label dot
10:14 - config and set the text
10:18 - equal to players
10:21 - at index 0
10:24 - plus the word wins
10:29 - now let's add another else if statement
10:32 - else if there's a tie let's say check
10:36 - winner is equal to the word
10:40 - tie because we are already using false
10:43 - and true
10:45 - then let's change our label and i'm just
10:47 - going to copy this
10:50 - text equals the word
10:53 - tie okay
10:56 - so let's create an else block
10:59 - so that goes right here
11:02 - so if it's not player one's turn player
11:05 - at index
11:06 - zero then it's our other player's turn
11:09 - player at
11:09 - index of one so oh then so we just need
11:13 - to mostly just copy this text
11:15 - and change a few things around so i'm
11:17 - going to copy all this
11:22 - and within here let's set
11:25 - player equals players at index
11:29 - 0 then players at
11:32 - index 0's turn players
11:36 - at index 1 wins
11:39 - and that is it now our next turn
11:41 - function is now complete
11:43 - let's head down to the check winner
11:45 - function and we need to check
11:46 - all of the different win conditions and
11:49 - return it true
11:50 - if somebody won false if there is yet no
11:52 - winner
11:53 - and the word tie if it's a tie so let's
11:56 - check
11:57 - all of the horizontal win conditions so
11:59 - we can do this using a for loop
12:01 - for row in range
12:05 - three we need to check the text of each
12:08 - button in each row
12:10 - if buttons at index
12:13 - of row and column index of 0
12:17 - we'll use the index operator to check
12:19 - the text
12:20 - is equal to the next button in our row
12:24 - so i will copy this and change zero to
12:27 - one
12:28 - check to see if that is equal to buttons
12:31 - at index of row index of two
12:36 - and i'm going to check to see if this is
12:38 - all not
12:40 - equal let me move this a little bit
12:43 - to a space
12:47 - so if that is the case that means
12:49 - somebody won
12:50 - so if all of these buttons are the same
12:53 - and they are not equal to
12:55 - an empty space that means they're all
12:57 - the same so let's return
12:59 - true that means that somebody won
13:02 - now we need to check the vertical win
13:04 - conditions
13:05 - if anybody has the same character all
13:08 - the way down
13:08 - a single column this next for loop is
13:11 - going to be
13:12 - four column in range three for the first
13:15 - button this will be
13:16 - button at index of zero and
13:20 - column then 1
13:23 - and column let me just paste that and
13:27 - 2 and column
13:31 - now we need to check the diagonal win
13:33 - conditions
13:34 - so if buttons at
13:37 - index 0 0 that's the top left corner
13:41 - if the text of that button is equal to
13:44 - buttons at indexes of 1
13:47 - one is equal to
13:51 - the indexes of button two
13:54 - two and if all of this does not
13:57 - equal an empty space then
14:01 - return true so there is a winner
14:05 - and we have one last win condition to
14:07 - check that is the other
14:09 - diagonal win condition so we just need
14:11 - to change some of these indexes around
14:13 - so we have zero two
14:17 - one one and two zero
14:20 - i'm going to change this statement to an
14:22 - else if statement
14:24 - now we need to check to see if there's
14:25 - any spaces remaining
14:27 - else if we will call the empty spaces
14:31 - function which we have yet to fill in if
14:34 - this returns false then we will
14:39 - return the word
14:42 - tie
14:45 - and lastly else else there is no winner
14:49 - and
14:50 - no tie so we will return false
14:54 - and that is it for the check winner
14:57 - function let's test this
15:01 - so this doesn't account for a tie quite
15:03 - yet but we can fill in
15:04 - some of these spaces looks like x wins
15:07 - and we can no longer fill in buttons
15:10 - and we cannot start a new game quite yet
15:12 - either
15:13 - within the empty spaces function let's
15:15 - create a local
15:16 - variable named spaces and set the sql to
15:19 - nine whenever we call this function
15:23 - for row in range
15:26 - three and we'll create a nested for loop
15:29 - for column in range
15:34 - three we will check the text of each
15:37 - button
15:38 - if buttons at indexes of
15:41 - row and column
15:45 - and we will check the text to see
15:51 - if it's not equal to an empty space
15:56 - if that is the case spaces
15:59 - minus equals one
16:03 - then we'll write an if statement if
16:06 - spaces
16:06 - as in spaces remaining is equal to zero
16:11 - that means we will return false and
16:14 - there are no
16:15 - spaces left else
16:19 - we will return
16:22 - true okay let's test it
16:26 - so this time i'm trying to get a tie
16:36 - yep looks like it's a tie this next
16:39 - part's optional but i would like to
16:41 - change
16:41 - the color of each button for the winning
16:44 - combination
16:45 - so within our check winner function
16:47 - underneath the first
16:48 - win condition i'm going to take buttons
16:52 - at index of row
16:55 - and index of zero
16:59 - use the config method
17:03 - and set the background color equal to
17:06 - let's say green
17:09 - and i'm going to repeat this process for
17:11 - the other buttons within this win
17:12 - condition
17:14 - so that is row
17:17 - zero row one and row two
17:20 - i'll copy all of this paste it
17:24 - and switch some of these around so these
17:26 - should all be matching
17:30 - so zero and column one and column and
17:33 - two in column
17:38 - okay so we have zero zero one
17:41 - one and two two
17:44 - and one more
17:47 - zero two one one and
17:50 - two zero now when we have a winning
17:54 - combination
17:55 - the color of the buttons involved in
17:58 - that combination are going to change to
18:00 - green
18:00 - now if there's a tie let's change all of
18:03 - the buttons to let's say
18:05 - yellow so i'm going to write nested for
18:08 - loops for this
18:09 - four row in range
18:13 - 3 4 column
18:16 - in range 3
18:21 - take our buttons at row
18:24 - and column and change
18:28 - the background color to yellow or some
18:30 - other color of your choosing
18:33 - so if there's a tie they should all be
18:36 - yellow
18:38 - i'm trying not to win here it's actually
18:40 - more complex than what i thought
18:45 - yep it looks like it's all a tie and the
18:48 - last thing that we need to do is to fill
18:50 - in the new game function so that we can
18:52 - begin a new game
18:53 - so let's say global player we would like
18:56 - access to our player
18:57 - from inside this function and set player
19:00 - equal
19:01 - to a new random choice random
19:04 - dot choice and pass in our list
19:08 - of players and we will change our label
19:11 - label dot config
19:14 - and set the text equal to player
19:18 - plus the word turn
19:21 - and we also need to reset all of our
19:23 - buttons
19:26 - for row in range
19:29 - three for
19:33 - column in range
19:36 - three buttons
19:40 - at index of row and index of column
19:46 - dot config
19:49 - text equals a set of quotes so it's
19:52 - empty
19:53 - and we'll change the background color
19:55 - fact
19:56 - was previously so the default color
19:59 - for buttons is actually hexadecimal f
20:02 - 0 f 0 f so
20:05 - this function will begin a new game for
20:07 - us and
20:08 - let's test it to be sure i'm going to
20:11 - start a new game
20:12 - reset reset
20:15 - i'll actually try and win this time
20:18 - and reset okay so it looks like the new
20:21 - game function is working
20:24 - now another thing that you can do too is
20:26 - that you can change
20:27 - the players around let's say we would
20:29 - like to play as
20:31 - dollar sign and at sign so
20:34 - this program is flexible enough so that
20:36 - you can change the icons of the players
20:40 - all right everybody so that's a basic
20:42 - game of tic-tac-toe for
20:44 - python if you would like a copy of this
20:46 - code i will post all of this to the
20:47 - comment section down below
20:49 - but yeah that's how to code a basic game
20:51 - of tic-tac-toe for python
20:55 - hey you yeah i'm talking to you if you
20:57 - learned something new
20:58 - then help me help you in three easy
21:01 - steps by smashing that like button
21:03 - drop a comment down below and subscribe
21:05 - if you'd like to become a fellow bro
21:16 - [Music]
21:29 - you