00:00 - hey how's it going everybody it's you
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to teach you guys how
00:04 - inheritance works in java so sit back
00:07 - relax and enjoy the show
00:11 - make sure you like comment and subscribe
00:14 - one like equals one prayer for the
00:16 - youtube algorithm
00:18 - alright everybody let's talk about
00:20 - inheritance this is the process where
00:22 - one class acquires the attributes and
00:24 - the methods of another
00:26 - so here's an example i have my class
00:28 - that contains my main method
00:29 - an additional class called vehicle a
00:32 - class called car
00:33 - and a class called bicycle what i would
00:35 - like to do is have my car class
00:37 - and my bicycle class inherit everything
00:39 - from the vehicle class
00:41 - so let's list a few attributes that
00:43 - vehicles might have
00:44 - so all vehicles have a speed supposedly
00:48 - so let's make a double variable called
00:50 - speed
00:51 - and we do not really need to assign this
00:53 - for this example
00:54 - and maybe two methods perhaps a go
00:57 - method
00:57 - void go and what should we print
01:01 - maybe this vehicle is
01:04 - moving and let's create a stop method
01:10 - void stop this vehicle is
01:13 - stopped so i have everything related to
01:16 - vehicles
01:17 - within my vehicle class so i would like
01:20 - my car class
01:21 - and bicycle class to receive these
01:24 - attributes and methods
01:25 - from the vehicle class so that i do not
01:27 - have to list this twice
01:29 - so in order to use inheritance when you
01:31 - define the class
01:32 - we're going to add extends and then the
01:35 - name of the class
01:36 - which you would like to receive
01:37 - everything from so car
01:39 - extends by vehicle class
01:44 - and we'll do the same thing for bicycle
01:46 - bicycle extends
01:48 - vehicle now the car class and the
01:50 - bicycle class
01:51 - are subclasses of the vehicle class also
01:54 - known as
01:55 - child classes and the vehicle class is
01:57 - the superclass
01:59 - also known as the parent class so this
02:02 - vehicle class is like an ancestor
02:04 - it's giving an inheritance to its
02:06 - descendants meaning its attributes and
02:08 - its methods
02:09 - so let's create a car object and a
02:12 - bicycle object to see if this theory is
02:14 - true
02:15 - so let's create a car car we'll name it
02:17 - car equals new
02:18 - car and we'll have our car
02:21 - use the go method and it says
02:25 - this vehicle is moving but we didn't
02:27 - list anything within the car class
02:29 - so how can this be how is that possible
02:32 - well
02:32 - since car is a descendant of the vehicle
02:35 - class it receives
02:36 - everything that the vehicle class has
02:38 - meaning a speed
02:39 - and a go method and a stop method now
02:42 - let's create a bicycle object
02:43 - so bicycle let's call this bike equals
02:46 - new bicycle
02:50 - and we'll have our bicycle object use
02:52 - the stop method
02:56 - which it apparently has even though we
02:58 - have nothing listed within the bicycle
03:00 - class
03:01 - and then both the car class and the byte
03:03 - class should have
03:05 - their own speed variable so let's also
03:08 - display that
03:09 - so let's system.out.printline car
03:12 - dot speed the same thing goes with our
03:16 - bike object
03:18 - system.out.printline bike.speed
03:21 - and they should both be zero which they
03:23 - are
03:24 - so that's one of the benefits of using
03:26 - inheritance for one we do not need to
03:28 - list
03:28 - all of these attributes and methods
03:30 - twice now another benefit
03:32 - of this is that we can have this car
03:34 - class
03:35 - and this bicycle class have their own
03:37 - unique additional attributes and methods
03:39 - since not all cars and bicycles are the
03:42 - same they're two completely different
03:43 - objects
03:44 - so we could say that cars will also have
03:47 - a
03:47 - perhaps number of wheels so end wheels
03:50 - and we'll set this to four
03:53 - and then bicycles will say int wheels
03:56 - equals two and then with cars they have
04:00 - doors
04:00 - we can create another variable for that
04:02 - int
04:03 - doors and this could be like two or four
04:06 - i'll just say
04:07 - four for now and then bicycles don't
04:10 - have doors but they do have pedals so
04:12 - and pedals
04:15 - and this will be two and if we head back
04:18 - to our main method
04:19 - let's display the amount of doors that
04:21 - cars have and the amount of pedals that
04:23 - bikes have
04:24 - so we can do this with a print line
04:25 - statement car dot doors
04:28 - and we'll display this and we'll do the
04:30 - same thing with bikes but display the
04:32 - number of pedals
04:33 - bike dot pedals so our car has four
04:38 - doors and our bike has two pedals
04:40 - now these attributes are unique to the
04:43 - car class
04:44 - and the bike class so cars don't have
04:46 - pedals and if we try and access the
04:48 - pedals variable
04:49 - well it's not going to be recognized and
04:51 - our bike doesn't have doors
04:53 - so this variable isn't recognized either
04:55 - so when might you want to use
04:57 - inheritance
04:58 - well for one you'll probably want to use
05:00 - it if you have more than one class
05:02 - so if you have two separate classes for
05:04 - example cars and bicycles
05:05 - you can list everything that they have
05:07 - in common
05:08 - such as a speed some ability to move or
05:12 - go
05:12 - and an ability to stop and then we can
05:15 - just list that within another class and
05:17 - have
05:17 - our card class and bicycle class just
05:20 - receive
05:20 - everything that this vehicle class has
05:23 - because
05:23 - this is what they all have in common so
05:26 - that's the basics of inheritance if you
05:28 - would like a copy of all this code i
05:29 - will post all of this in the comments
05:31 - down below
05:32 - but yeah that's the basics of
05:33 - inheritance in java
05:36 - hey you yeah i'm talking to you if you
05:39 - learn something new
05:40 - then you can help me help you in three
05:43 - easy steps
05:44 - by smashing that like button drop a
05:46 - comment down below
05:47 - and subscribe if you'd like to become a
05:49 - fellow bro
05:55 - [Music]
06:10 - you