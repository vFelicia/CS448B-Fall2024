00:00 - hey yeah everybody it's you bro hope
00:02 - you're doing well and in this video
00:03 - we're going to discuss priority queues
00:05 - in computer science so sit back relax
00:09 - and enjoy the show
00:12 - hey uh what's going on everybody so
00:14 - priority queues a priority queue is a
00:17 - fifo data structure first in first out
00:21 - however a major difference with priority
00:23 - queues is that before we start polling
00:25 - and serving elements we put them in some
00:27 - sort of order higher priority elements
00:30 - are served first before elements with
00:33 - lower priority so here's an example
00:35 - let's say that we have some student gpas
00:38 - and we'll place them all within a queue
00:40 - and then a priority queue and take a
00:41 - look at the differences so let's create
00:43 - a queue the data type is q
00:45 - and we are going to insert some doubles
00:48 - some gpas i'll name this queue equals
00:52 - new now queues are actually interfaces
00:55 - and we can't implement them directly so
00:57 - we need to use a class that utilizes the
01:00 - queue interface one that i know of is a
01:03 - linked
01:04 - list
01:05 - then finish instantiating it
01:08 - now to add data to a queue we use the
01:10 - offer method q
01:12 - dot offer
01:14 - and then pass in a gpa let's make sure
01:17 - that these are not in order
01:18 - uh how about a 3.0
01:22 - then the next student has a let's say
01:25 - 2.5
01:27 - then a 4.0
01:30 - 1.5
01:32 - and 2.0
01:34 - okay now let's display the elements of
01:37 - our queue
01:38 - one easy way in which we can do that is
01:40 - to use a while loop
01:42 - and this is our condition we'll continue
01:44 - this while
01:45 - not logical operator q
01:48 - dot
01:49 - is
01:50 - empty method while our q is not empty
01:55 - pull each element and display it so
01:57 - within a print line statement let's use
02:00 - hue dot poll to display and remove each
02:04 - element beginning with the first one and
02:06 - then working our way to the end so this
02:08 - will display the elements within my
02:10 - queue so these are in first come first
02:13 - serve order whatever element we were
02:16 - offered first we are serving that
02:18 - element first if an element was added
02:20 - last well then it's served last so
02:22 - that's a standard queue now with a
02:24 - priority queue we're going to arrange
02:26 - them in some sort of order before we
02:28 - actually pull these elements so let's
02:31 - change our linked list to a priority
02:33 - queue
02:35 - and run this again and let's take a look
02:37 - at the differences
02:38 - okay these are all in order now so if
02:41 - we're working with numbers like doubles
02:44 - these are arranged in ascending order
02:46 - beginning with the smallest element
02:48 - let's pretend that these are grade point
02:50 - averages gpas why might we want to put
02:52 - these in order let's say whatever
02:54 - student performed the worst gets two
02:56 - hours of free tutoring whichever student
02:59 - performed second worst gets one hour of
03:01 - free tutoring and third gets half an
03:03 - hour free tutoring now if you need these
03:06 - in descending order well there's one
03:08 - change that we're going to make within
03:10 - the constructor we can pass in a
03:11 - comparator but that's a little advanced
03:14 - for us and we haven't discussed that yet
03:16 - so there is a default comparator that we
03:18 - can use found within collections
03:20 - collections dot
03:22 - reverse
03:23 - order method so these elements will be
03:27 - in reverse order then
03:29 - in this example let's say that whichever
03:32 - student has the best gpa will receive i
03:34 - don't know a gold medal like the
03:36 - olympics and the second best student
03:38 - will receive a silver medal then a
03:40 - bronze medal and then every student
03:42 - after that i guess will receive nothing
03:44 - but that's okay though they got some
03:46 - free tutoring in the last example okay
03:48 - now let's change the data type let's say
03:50 - that these are now strings and let's put
03:53 - these in standard order so let's change
03:56 - these two strings maybe this student has
03:58 - a b this one has a c
04:03 - a
04:06 - f
04:07 - and
04:08 - what are we missing d
04:10 - if we have a priority queue of strings
04:12 - well then these elements will be in
04:14 - alphabetical order so if we need these
04:16 - in reverse alphabetical order again we
04:19 - can pass in a comparator and then one
04:21 - that we can use is from collections
04:24 - collections dot
04:25 - reverse
04:27 - order
04:28 - and these elements within our priority
04:30 - queue are now within reverse
04:32 - alphabetical order so yeah that's a
04:35 - priority queue think of it like a queue
04:37 - however we first sort these elements
04:40 - based on a certain priority we will pull
04:42 - and serve the elements with the highest
04:44 - priorities first and work our way to
04:47 - elements with lower priority so yeah
04:50 - that's a priority queue if you would
04:51 - like a copy of this code i'll post this
04:53 - to the comment section down below and
04:55 - well yeah those are priority queues in
04:57 - computer science