00:00 - hey what's going on everybody it's your
00:02 - bro hope you're doing well and in this
00:03 - video we're going to create an
00:05 - interactive stopwatch using javascript
00:07 - so sit back relax and enjoy the show
00:11 - sup guys let's create a stopwatch head
00:14 - to your html file then we will create a
00:16 - container to hold our stopwatch
00:19 - div
00:20 - id equals i'll name this time
00:23 - container
00:25 - then we're going to close it within our
00:26 - time container let's add a div for the
00:29 - time display
00:31 - id equals time display i'll add a time
00:36 - zero zero
00:37 - colon zero zero colon zero zero hours
00:41 - minutes and seconds
00:42 - let's close that div section we'll add
00:45 - three buttons start pause and restart
00:48 - button id equals
00:51 - start button
00:53 - i'll put this within a class class
00:56 - equals
00:57 - timer button
01:00 - let's close the button add some text
01:03 - the text will be start
01:05 - let's copy this button
01:07 - paste it two times
01:08 - the second button is a pause button
01:12 - the text will be pause
01:15 - next will be a reset button reset the
01:18 - text is reset
01:21 - that is everything for our html file
01:23 - let's head to our css file let's begin
01:25 - by adding some properties to the timer
01:28 - button class
01:30 - i'll set a width
01:31 - of 80 pixels
01:35 - a height
01:36 - of 30 pixels
01:40 - a border
01:42 - three pixels solid is good
01:47 - a border radius
01:50 - of
01:51 - 12
01:52 - pixels a background color
01:57 - uh let's select a hexadecimal value pick
02:00 - whatever color you want i'm going to
02:02 - pick a dark gray color
02:04 - you can always use a color picker to
02:05 - select the color
02:07 - i'll set the color to be white
02:10 - i'll set the cursor to be a pointer
02:13 - when we hover our cursor over that
02:15 - button then we have a cursor pointer
02:18 - then i'll change the font family font
02:21 - family
02:22 - i'll pick this font
02:24 - with the backup of monospace
02:28 - yeah cool
02:29 - let's change the time display right here
02:32 - this is an id
02:35 - time display
02:38 - i'll edit the font size font dash size
02:42 - this will be 75 pixels
02:46 - i'll select a color
02:48 - uh go ahead and pick a color
02:51 - oh select maybe
02:53 - that that looks good
03:00 - sweet i'll change the font family
03:05 - then let's add a background color and
03:06 - center everything
03:08 - this will be our time container
03:12 - text align
03:15 - center
03:17 - i'll add a border
03:19 - 3 pixel solid
03:23 - border
03:24 - radius of 25 pixels
03:27 - background
03:29 - color
03:31 - of this is a dark gray color six twos
03:35 - yeah there we go so there's our css
03:38 - styling our css styling is done our html
03:41 - file is done let's head to our
03:42 - javascript file
03:44 - let's select all the elements that we'll
03:45 - need
03:46 - first is the time display let's get that
03:49 - id
03:50 - time display i'll store this as a
03:52 - constant const time display equals
03:56 - document
03:57 - dot
03:58 - query selector
04:02 - we're selecting an id
04:04 - the id is time display
04:08 - next is our start button let's copy this
04:11 - paste it
04:13 - start
04:14 - button
04:17 - start button
04:21 - then our pause button
04:24 - pause button
04:26 - pause button
04:28 - then reset button
04:30 - reset button
04:33 - the id is reset button
04:36 - here's the variables we'll need
04:38 - let
04:39 - start time
04:41 - i'll go ahead and set this to zero right
04:43 - away
04:44 - let
04:45 - elapsed time
04:47 - equal zero
04:50 - let
04:51 - current time
04:52 - equal zero
04:55 - let paused this will be a boolean
04:57 - variable
04:59 - if our timer is currently paused we'll
05:00 - set this to be true false if it's
05:02 - running
05:04 - let
05:05 - interval id
05:07 - let ours hrs is fine
05:10 - equals zero
05:12 - let
05:13 - mins for minutes equal zero
05:16 - let then sec four seconds
05:19 - equal zero here's what we're gonna do
05:21 - we're gonna add event listeners to each
05:23 - of our buttons
05:24 - start pause and reset
05:27 - add
05:28 - event
05:30 - listener
05:33 - i'll fill these in momentarily
05:38 - pause button
05:40 - then reset button
05:41 - then we'll declare a function to update
05:43 - our time
05:45 - function
05:46 - update
05:47 - time
05:49 - let's fill in these event listeners
05:50 - these will each be click
05:54 - we'll use an arrow function expression
05:58 - i'll just copy this and paste it
06:02 - okay let's begin with our start button
06:06 - we'll check to see if paused is true
06:10 - if
06:11 - paused
06:15 - we'll take paused
06:17 - set it to false
06:21 - calculate the start time
06:23 - start time equals date dot now method
06:28 - the now method of date will give you the
06:30 - current date and time in milliseconds
06:33 - minus elapsed
06:36 - time
06:37 - which will initially be zero to begin
06:38 - with
06:40 - then we'll begin our timer
06:42 - interval
06:43 - id
06:45 - equals set interval
06:49 - we'll need a callback the callback will
06:51 - be update time
06:53 - let's invoke this function every maybe
06:56 - 75 milliseconds
06:58 - that should be good enough
07:00 - let's fill in the update time function
07:03 - we'll calculate how much time is passed
07:07 - elapsed time
07:08 - equals
07:09 - whatever time it is right now
07:12 - date.now method
07:14 - minus the original start time
07:16 - this will be a time in milliseconds
07:20 - we'll have to format it so that we can
07:21 - display it within our timer
07:24 - let's take our seconds
07:26 - set the sql to
07:28 - math.floor method
07:32 - we will pass in our elapsed time
07:36 - divided by 1000 because it's normally in
07:38 - milliseconds
07:40 - modulus 60.
07:43 - i'm going to put these within
07:44 - parentheses
07:46 - it's a similar process for minutes
07:50 - except this section is 1000
07:53 - times 60.
07:54 - that will be 60 000 milliseconds in
07:57 - every minute
07:59 - let's calculate the hours
08:05 - hours
08:07 - one thousand times sixty
08:10 - times 60.
08:12 - then we'll need to update our display
08:16 - that is time display
08:19 - dot text
08:21 - content
08:22 - equals i'll use a template literal
08:25 - will display the hours
08:28 - colon
08:30 - the minutes
08:33 - then the seconds
08:35 - let's take a look to see what we have so
08:37 - far
08:38 - we'll have one issue
08:40 - let's press start
08:42 - you can see that it's currently running
08:44 - but when we display zeros i would like
08:46 - two zeros let's add a zero as padding
08:48 - for any single digit numbers
08:51 - i'll create an inner function
08:53 - function
08:54 - pad
08:55 - will accept a unit
08:59 - we will return
09:02 - this will be a ternary operator
09:06 - it might be a little difficult to
09:07 - understand
09:08 - so we're going to add a zero to the
09:10 - front of our unit whatever we pass in
09:13 - hours minutes and seconds
09:16 - we'll access the length property
09:18 - if we add a zero to our unit
09:21 - what's the length is that length greater
09:24 - than 2 question mark
09:26 - if it is
09:28 - we'll simply return unit
09:31 - otherwise
09:32 - we'll prepend a 0 plus unit
09:37 - then we'll invoke the pad function
09:41 - our seconds equals invoke pad
09:45 - pass in our seconds
09:47 - do the same thing with minutes and hours
09:52 - minutes
09:57 - hours
09:58 - then let's move this line down
10:02 - right about here
10:04 - okay we should have some zeros as
10:06 - padding now
10:08 - yeah there we go one two three
10:12 - so we have no way to pause this timer
10:13 - let's work on that next
10:15 - let's head to our pause button we'll
10:18 - check to see if
10:21 - not
10:22 - paused
10:25 - then we will set paused equal to true
10:30 - we'll calculate the elapsed time
10:34 - equals date dot now
10:38 - minus our start time
10:41 - this will save how much time has passed
10:43 - in milliseconds
10:45 - then clear our set interval method
10:49 - clear
10:51 - interval we'll pass our id as an
10:53 - argument
10:55 - okay now we should be able to start our
10:57 - timer
10:59 - one two three and pause
11:03 - and you can see that it's paused
11:05 - lastly reset and this one's kind of easy
11:08 - head to our reset button
11:11 - we'll take paused
11:13 - set that to true
11:15 - clear our timer
11:18 - take start elapsed and current time
11:21 - set them all to zero
11:24 - take hours minutes and seconds set them
11:27 - to zero
11:30 - then lastly change our time display to
11:32 - all zeros
11:35 - time
11:36 - display
11:37 - dot text content
11:40 - equals zero zero colon zero zero colon
11:44 - zero zero
11:45 - oh then make sure you don't add this let
11:47 - keyword then we're creating a local
11:49 - variable
11:52 - okay this should work now
11:55 - one two three we can pause
11:58 - we can reset
11:59 - we can start again
12:02 - and reset all right everybody that is a
12:04 - simple timer if you'd like to make a
12:06 - more advanced version you could add
12:08 - milliseconds and well yeah that's a
12:10 - basic stopwatch using javascript