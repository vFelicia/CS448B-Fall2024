00:00 - hey also go on everybody its bro here
00:02 - hope you're doing well and in this video
00:04 - we're going to be creating a pretty
00:05 - sweet stopwatch in Java kind of looks
00:08 - like this so let's get into it before
00:13 - you reach the end of this video make
00:15 - sure to LIKE comment and subscribe so
00:19 - that we together can challenge and
00:20 - defeat the mighty YouTube algorithm
00:23 - alrighty everyone let's create a
00:25 - stopwatch so if you're using eclipse
00:27 - we're going to go to file new and we're
00:30 - going to create a new Java project
00:32 - let's call this stopwatch but make sure
00:36 - you don't have your caps lock on like I
00:38 - did so stop watch and then click finish
00:42 - and we're not going to create a module
00:45 - because I find modules annoying alright
00:48 - then go to your source folder and then
00:50 - go to file new class and we're going to
00:53 - create a class maybe called main and
00:55 - then click public static void main ok
01:00 - let's create another class then so make
01:02 - sure you go to your source folder then
01:04 - go to file new class and let's call this
01:08 - class stop watch and then we'll click
01:12 - finish ok so then going back to your
01:15 - main class all we're going to do here is
01:18 - create an instance of our stopwatch
01:20 - class so we're going to type in
01:23 - stopwatch and then we're going to create
01:25 - a name for this stopwatch so we can call
01:28 - it stopwatch with a lowercase s so
01:31 - stopwatch stopwatch equals new stopwatch
01:35 - parenthesis semicolon and that's it so
01:38 - we're going to do everything else within
01:40 - our stopwatch class so we want our
01:43 - stopwatch class to implement the action
01:45 - listener interface so we're going to
01:48 - implements action it's a capital L
01:53 - listener there we go so we need to
01:56 - import a few things so we're going to
01:59 - need 3 imports import java.awt asterisk
02:04 - and import java.awt event dot asterisk
02:11 - and
02:13 - import Java X dot swing dot asterisk
02:19 - so basically we're importing everything
02:21 - for java.awt and Java X dot swing ok so
02:26 - since we're implementing actionlistener
02:29 - we actually need some methods here
02:32 - more specifically the action performed
02:34 - method so it's not gonna work without it
02:36 - so let's get the framework for our
02:39 - stopwatch class all taken care of
02:41 - so we're going to want a few things
02:43 - first so let's create a constructor for
02:45 - this stopwatch class so stop watch and a
02:49 - set of parentheses a set of curly braces
02:51 - and we're also going to create three
02:53 - methods so we'll create a method called
02:58 - start so void start parentheses curly
03:02 - braces and we'll create another method
03:05 - called stop and then reset okay I
03:17 - believe that is everything for our
03:19 - framework now we're going to be
03:21 - declaring some global variables and
03:24 - objects so you want to be sure that
03:26 - you're writing this outside of your
03:27 - constructor so that all of these methods
03:30 - will have access to these global
03:32 - variables and objects so right after we
03:36 - create this class what we're gonna do is
03:39 - to clear a few things so let's create a
03:41 - J frame first
03:42 - so J frame will call this frame equals
03:46 - new J frame will want a start button and
03:52 - a reset button so we can use a J button
03:55 - for this J button will call this start
03:57 - button equals new J button and then we
04:03 - can actually set some text on this
04:06 - button so maybe we'll just say start and
04:08 - we'll do the same thing for a reset
04:11 - button so start button and reset button
04:16 - and we'll change the text here as well
04:17 - so we'll change that to reset well want
04:21 - a jlabel to hold the current time
04:25 - so we'll call this time label equals new
04:30 - J label we're also going to create a
04:37 - integer variable called the elapsed time
04:41 - but make sure you spell it right
04:43 - he elapsed time so this is going to hold
04:48 - the amount of basically milliseconds
04:51 - after we start our timer then we're
04:53 - going to have an integer variable called
04:57 - seconds to hold the amount of seconds
05:00 - that have passed an integer variable
05:02 - named minutes we're going to set these
05:05 - all to zero by the way and int hours you
05:09 - could go crazy and add days to but we'll
05:12 - just stick with seconds minutes and
05:13 - hours now we're also going to want a
05:15 - boolean value and we'll call this
05:17 - started and we'll set this to false
05:20 - we're going to use this to determine if
05:22 - our timer has started or not
05:24 - now with our time label we'll want to
05:27 - put in some zeros kind of as
05:29 - placeholders for the seconds minutes and
05:31 - hours one easy way we can do that is by
05:34 - using string format so we're going to
05:36 - create a string for hours minutes and
05:40 - seconds and they're going to act as a
05:42 - placeholder that'll hold a bunch of
05:44 - zeros as the time is going up so we'll
05:47 - create a string and let's call the first
05:49 - one maybe seconds underscore string
05:56 - equals and then we're going to use
05:58 - string a dot format so we're going to be
06:03 - formatting this string so we'll need to
06:06 - use the format specifier so it's the %
06:09 - and we want to display two zeros if
06:12 - there's currently no value in one of
06:15 - these places basically so we'll place
06:19 - zero to D so if seconds is 0 it's just
06:23 - going to display two zeros if it becomes
06:26 - one it's going to be 0 1 then 0 2 so on
06:30 - and so forth in that pattern same thing
06:31 - with the rest of these so we're going to
06:34 - add loops not hours we're going to
06:38 - as seconds here okay and then we're
06:42 - going to do the same thing for minutes
06:44 - and hours and we can just change a few
06:46 - things so we're going to change seconds
06:48 - to minutes and then we're going to
06:52 - change that here as well and then hours
07:03 - okay
07:04 - so we're going to hold off on creating a
07:06 - timer until the very end because we want
07:09 - to be sure that everything else is
07:10 - working first now for this next part
07:12 - we're going to be adding a few things
07:14 - within our constructor for our stopwatch
07:16 - so let's begin by adding the frame so
07:19 - we're going to type in frame dot set
07:24 - default close operation it's a lot to
07:28 - type and then within here j-frame dot
07:33 - exit underscore on closed
07:36 - that's just so it closes out when you
07:39 - hit the X button basically all right and
07:41 - we're going to set a size to this frame
07:44 - so frame dot set size and then we're
07:48 - going to set to dimensions I tend to
07:51 - like 420 by 420 because 420 is a funny
07:54 - number and then we're going to set frame
07:57 - dot set layout no because I don't like
08:02 - layout managers and we need to set this
08:05 - as visible so we're going to do that at
08:07 - the very end so frame dot set visible
08:11 - and this will be true now make sure that
08:14 - frame dot set visible is at the end of
08:17 - your constructor because if you add
08:18 - components after frame dot set visible
08:21 - sometimes it doesn't work so make sure
08:22 - you have this line last so I'm just
08:25 - going to go back to this main class and
08:27 - then hit run yep here is our frame it is
08:31 - 420 by 420 so this is enough to hold our
08:35 - stopwatch basically okay let's go back
08:38 - to our constructor and let's add a few
08:40 - things before our frame so let's add the
08:43 - time label that's going to hold the
08:45 - current hours minutes and seconds so
08:49 - what will be first is set me text
08:52 - so we'll type in time label dot set text
08:57 - and then we're going to add ours
09:01 - underscore string and that is this right
09:05 - here plus and let's add a colon to
09:11 - separate each of these fields basically
09:14 - so our string plus minutes string plus
09:23 - another colon then plus you guessed it
09:28 - seconds underscore string okay
09:33 - let's do some formatting of this time
09:36 - label so time label and let's set the
09:41 - bounds so set bounds and we're going to
09:45 - place this where X is 100 y is 100 we'll
09:50 - make this 200 pixels long and 100 pixels
09:56 - for the height let's also change the
09:59 - font so time label dot set font then
10:05 - within parentheses new font and the
10:10 - first value is you can pick a font that
10:12 - you like some fonts aren't compatible
10:13 - with Java but one that I kind of like
10:16 - for this project was I think it's
10:18 - pronounced for Danno
10:20 - that's not too bad of a font but you can
10:22 - always pick something you prefer better
10:24 - and let's have this font be plain so
10:27 - font dot plain and 35 is a decent size
10:33 - and let's set a border so time label dot
10:39 - set border then within parentheses
10:44 - border factory and then dot create and
10:53 - then you can pick a border from here I
10:56 - kind of like bevel border
11:00 - one time label dot set I don't know how
11:10 - to pronounce this word
11:11 - OPEC opaque somebody's probably making
11:14 - fun of you right now then lastly let's
11:18 - set the horizontal alignment so time
11:21 - label dot set or is on till alignment
11:27 - and we're going to type in J text field
11:34 - dot Center okay let's see if this label
11:38 - actually appears now oh we need to add
11:40 - it as well almost forgot
11:42 - so we'll do this right by the frame so
11:44 - frame dot add time label I'll probably
11:51 - forget to add one of these components so
11:53 - let's try it now
11:56 - yep here we go let's add the buttons now
11:59 - so let's start with the start button so
12:02 - start button dot set bounds and we'll
12:08 - place this where X is 100 Y is 200 this
12:12 - will be 100 pixels for the width and the
12:15 - height will be 50 pixels so start button
12:20 - dot let's set the font to you know what
12:24 - I'm just gonna copy it here and change a
12:25 - few things just to save time alright so
12:31 - start button dot set font new font and
12:34 - maybe we'll change this to ink free I
12:38 - kind of like that font but pick whatever
12:40 - font you want that's compatible and this
12:42 - will be 20 it's a slightly smaller sized
12:48 - font alright then we'll type in start
12:53 - button and we don't want this to be
12:55 - focusable because things that are
12:57 - focusable are annoying so dot set
13:00 - focusable false and then we need to add
13:07 - an action listener so this button
13:09 - actually does something so start button
13:11 - dot add
13:13 - action listener parentheses then we're
13:16 - going to type in the word this now let's
13:19 - do the same thing for our reset button
13:21 - and honestly we can just copy this and
13:23 - make a few changes so we're going to
13:25 - change start button here to reset button
13:28 - and then for set bounds we're going to
13:35 - change this x-coordinate to 200 so it's
13:38 - right next to the start button and we
13:41 - can keep everything else the same okay
13:43 - now we just need to add these to our
13:44 - frame so frame dot add start button and
13:52 - then frame dot add reset button and
14:01 - let's make sure that these appear all
14:07 - right not too shabby
14:09 - we need them to do stuff though so we'll
14:12 - have to work on that okay guys this next
14:15 - part is going to be a little complex
14:16 - we're going to create a timer and you
14:18 - know what looking back I don't know if I
14:20 - ever created a video on timers in Java I
14:22 - think I have in other languages so
14:24 - that's probably something I'll have to
14:26 - do but don't worry I'll kind of explain
14:28 - things along the way and if you copy it
14:30 - exactly like I do it should be fine so
14:33 - we're going to create a timer here along
14:36 - with our global variables and objects so
14:39 - timer and we'll call this timer the
14:41 - lowercase T equals new timer and then
14:45 - we're going to pass in a few arguments
14:47 - the first value is how often do we want
14:50 - this timer to do something like how
14:53 - frequently let's say that we want this
14:55 - timer to update the current time every
14:58 - second so the unit we're going to be
15:00 - passing in is how frequently we want
15:03 - this timer to do something in
15:04 - milliseconds so if we want this timer to
15:07 - do something every one second we're
15:09 - going to pass in 1000 for 1000
15:12 - milliseconds which equals one second so
15:14 - the next argument separated with a comma
15:17 - we're going to pass in a new action
15:21 - listener
15:23 - then you need a set of parentheses and
15:25 - this parts going to get a little
15:27 - complicated so we're going to add a set
15:30 - of curly braces within here and we're
15:33 - going to add an action performed method
15:36 - so type in public void action performed
15:45 - parentheses and then pass in action
15:49 - event yeah well I guess we're not
15:52 - passing something in this is a parameter
15:54 - and then a set of curly braces then
15:58 - everything within this set of curly
15:59 - braces is what this timer is going to do
16:02 - every 1000 milliseconds let me just add
16:06 - a semicolon at the end things can get
16:09 - kind of funky with all these curly
16:11 - braces and parentheses and if you use an
16:13 - eclipse everything might become
16:15 - color-coordinated if everything checks
16:17 - out so we're just going to be passing in
16:21 - 1080
16:23 - then within here we're going to define a
16:27 - actionperformed method and this is what
16:30 - our timer is going to do every 1000
16:33 - milliseconds now the first line is that
16:35 - we're going to increase the elapsed time
16:37 - by 1000 milliseconds so you can type in
16:41 - elapsed time plus equals 1000 or the
16:45 - longhand way which is more clear is
16:47 - elapsed time equals elapsed time plus
16:50 - 1000 which works the same then we'll
16:53 - also need to figure out how many hours
16:55 - have passed so one way to do that is
16:57 - that we can take our hours variable set
17:00 - this equal to within parenthesis elapsed
17:03 - time divided by 3,600,000 this number is
17:10 - the amount of milliseconds that are in
17:12 - one hour
17:13 - so dividing the total elapsed time that
17:17 - is passed by 3,600,000 milliseconds will
17:21 - give us the amount of hours that have
17:23 - passed then let's do something similar
17:25 - for minutes and seconds so minutes
17:27 - equals within parenthesis elapsed time
17:30 - but this time divided by 60,000 because
17:34 - there's 60,000 Millicent
17:37 - in one minute and then we're also going
17:40 - to set this to modulus 60 so what we're
17:44 - doing here is that we don't want it to
17:47 - display like 60 minutes or 61 minutes or
17:49 - anything above that so let's say that
17:52 - it's at 59 minutes so 59 modulus 60
17:56 - would be 59 when this increases to 60
17:59 - minutes 60 modulus 60 would be zero
18:02 - because modulus gives you the remainder
18:05 - and then 61 modulus 60 would be just 1
18:09 - and then our hours would increase at
18:11 - that time now let's add seconds so
18:13 - seconds equals elapsed time divided by
18:17 - 1,000 because there's 1,000 milliseconds
18:21 - in one second and then modulus 60
18:24 - because we don't want to display
18:25 - anything 60 or above okay so then we'll
18:30 - want to set our different strings so we
18:33 - can just copy this so we're going to
18:35 - update these different strings so our
18:37 - second string equals whatever our
18:40 - seconds currently is at and then we're
18:43 - going to be adding this later so then
18:46 - let's do the same thing for minutes and
18:48 - then hours so all of these strings are
18:51 - gonna update and the last thing to do
18:55 - within this timer is that we're going to
18:58 - update our time label with these new
19:01 - strings for the hours minutes and
19:03 - seconds so time label dot set text then
19:09 - within parenthesis we're going to add
19:12 - our hours first so hours string and then
19:17 - we'll just add a colon character between
19:19 - these plus our minutes string plus
19:25 - another : plus our seconds string now
19:34 - what we'll want to do is to start our
19:36 - timer when we hit our start button so
19:39 - let's close out of this and head down
19:42 - there too
19:43 - we're going to start with
19:44 - actionperformed so what we'll check here
19:47 - is if e
19:51 - get source parentheses is equal to our
19:56 - start button then what we'll do so
20:02 - within curly braces is we're gonna call
20:07 - the start function and then within the
20:09 - start function all we need to type here
20:11 - is the name of our timer so timer dot
20:14 - start okay let's test this out so far
20:18 - whoops not restart just start okay let's
20:22 - try it crossing my fingers here okay so
20:26 - it's not started currently but when we
20:28 - hit start it is in fact starting so
20:32 - that's pretty sweet to see now let's
20:34 - also test the minutes and the seconds
20:37 - and I don't feel like waiting here for
20:38 - like a minute or even less so an hour so
20:42 - what we're gonna do with our elapsed
20:43 - time is just give this a little boost so
20:46 - let's set this to 60 seconds to begin
20:48 - with and let's see if it begins at one
20:51 - minute
20:53 - yep you can see that it's fine at one
20:55 - minute let's try three million six
21:00 - hundred thousand milliseconds yeah and
21:07 - it starts at one hour and you can see
21:09 - that minutes reset back to zero when it
21:12 - hits sixty okay so we know that that's
21:14 - working then our timer so let's reset
21:17 - elapsed time back to zero and work on a
21:19 - few things within our actionperformed
21:21 - method then so for this part we're going
21:24 - to need our started boolean variable and
21:28 - it's currently false so one thing that
21:30 - I'm thinking is that if we hit our start
21:33 - button we also want it to function as a
21:35 - stop button and we don't have any way of
21:37 - stopping this timer unless we reset it
21:39 - so we can toggle if this is a start
21:42 - button or a stop button but first we'll
21:45 - want to check to see if our started
21:47 - boolean variable is currently false or
21:50 - if it's true so currently it is false so
21:54 - the first thing we'll check so within if
21:57 - the actionperformed
21:59 - is equal to our start button we'll start
22:02 - our timer but then we'll also
22:04 - check if started is equal to false is it
22:09 - currently started and then what we'll do
22:13 - is take our started boolean variable and
22:16 - set this to true and then we'll also
22:20 - change the text on her button so we'll
22:22 - just type in start button dot set text
22:28 - and then we'll change this to stop so we
22:32 - can toggle that button between being a
22:34 - start button and a stop button and I'm
22:37 - going to take this method call and just
22:39 - put it within our if statement so we're
22:42 - only going to start our timer if started
22:45 - is currently equal to false now let's
22:47 - create an else statement
22:49 - so if started is not false it must be
22:52 - true then so our timer must be currently
22:54 - running so honestly we could just take
22:57 - all of these and then we can flip a few
22:59 - things so we're going to take started
23:01 - and flip it to false we're going to
23:03 - change our start button to display a
23:05 - start and then we're going to call the
23:07 - stop method then and then we'll just
23:10 - have to go to our stop method and then
23:11 - set that so timer dot stop and let's try
23:17 - it now okay so the timer is started and
23:25 - then let's stop it yep and it stopped
23:28 - and let's start it again pretty sweet
23:32 - right okay let's work on this reset
23:34 - button and that should be it and for the
23:37 - reset button we're going to write that
23:38 - within our actionperformed method so we
23:41 - got to figure out where this if
23:44 - statement ends okay right here yeah make
23:46 - sure you don't write this within this if
23:48 - statement so it looks like it ends right
23:50 - here so if you dot get source
23:55 - parenthesis is equal to our reset button
24:01 - then what we want to do within the set
24:05 - of curly braces is we're going to take
24:07 - started and set this to false because
24:10 - we're resetting the button then we're
24:12 - also going to let's see we're going to
24:17 - take our start
24:18 - and we should also set that to start so
24:27 - we're gonna type start here and the last
24:30 - thing is that we're going to call our
24:31 - reset method and this is the last thing
24:34 - that we need to fill out so let's go to
24:37 - our reset method we're going to take our
24:39 - timer and then we're going to use its
24:42 - stop function here then we also want to
24:46 - reset all the values so we're going to
24:48 - take our elapsed time variable set this
24:53 - equal to zero and then we're going to
24:55 - take our seconds and set it to zero as
24:59 - well our minutes to zero and our hours
25:03 - to zero and now we just have to update
25:07 - the time label so I kind of feel like
25:09 - just copying and pasting it because I
25:11 - really don't feel like typing this out
25:13 - okay so we're going to take all of this
25:16 - and copy it so second string equals
25:22 - string format yadda yadda yadda
25:24 - same thing with minutes during our
25:26 - string and then time label dot set text
25:28 - to whatever all of these are so take all
25:31 - of that copy it and then we're going to
25:33 - paste it within our reset method here so
25:37 - feel free to pause the video if you want
25:39 - to type this down but it should look
25:40 - like this then so when we hit the reset
25:43 - button we're taking all of these values
25:44 - setting everything back to zero and then
25:47 - we're updating the second string minute
25:49 - string and our string and then we're
25:51 - going to change our time label and
25:53 - display all of these strings then all
25:55 - right let's run this bad boy here is our
25:59 - timer
25:59 - it is currently stopped let's start it
26:02 - it's currently going up let's stop it
26:05 - now let's reset it
26:07 - sweet everything's back to zero let's
26:10 - start it again and it's counting back up
26:13 - from zero so that's pretty sweet one
26:16 - less thing before you go now take a look
26:19 - at this so since we created an instance
26:21 - of this stopwatch class what would
26:23 - happen if we created another so I'm
26:26 - going to call this next one
26:28 - stopwatch two so we have two instances
26:30 - of the stop
26:31 - watch glass just stop watch and stop
26:34 - watch - let's try it now let's see what
26:36 - happens so now we actually have to stop
26:40 - watches and they each have their own
26:42 - individual timers which is pretty sweet
26:44 - so hopefully this will give you some
26:46 - ideas on things where you can have like
26:48 - two timers concurrently going but yeah I
26:51 - guess that's one way to make a stopwatch
26:54 - in Java if you would like a copy of all
26:56 - this code I'll include it in the
26:58 - comments down below and pin it to the
27:00 - top but yeah that's one way of creating
27:02 - a stopwatch in Java hey you yeah I'm
27:06 - talking to you if you learn something
27:08 - new then you can help me help you in
27:11 - three easy steps
27:13 - by smashing that like button drop a
27:15 - comment down below and subscribe if
27:17 - you'd like to become a fellow bro
27:20 - [Music]